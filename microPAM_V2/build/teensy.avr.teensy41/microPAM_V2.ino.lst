
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd0c 	bl	60001e48 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fcb8 	bl	60001e58 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 feda 	bl	600022d4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f87d 	bl	60002630 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fce8 	bl	60001f50 <configure_external_ram>
	analog_init();
60001580:	f001 f80c 	bl	6000259c <analog_init>
	pwm_init();
60001584:	f001 f85c 	bl	60002640 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fed2 	bl	60002330 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fc5e 	bl	60001e4c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ff63 	bl	60002460 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fc57 	bl	60001e54 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fc53 	bl	60001e50 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f831 	bl	60002610 <____libc_init_array_veneer>
	main();
600015ae:	f001 f83b 	bl	60002628 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00013e68 	.word	0x00013e68
600015c0:	60002870 	.word	0x60002870
600015c4:	00000000 	.word	0x00000000
600015c8:	200092c0 	.word	0x200092c0
600015cc:	600166dc 	.word	0x600166dc
600015d0:	20000000 	.word	0x20000000
600015d4:	2001f640 	.word	0x2001f640
600015d8:	200092c0 	.word	0x200092c0
600015dc:	20009000 	.word	0x20009000
600015e0:	00007c65 	.word	0x00007c65
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00007265 	.word	0x00007265
600015f4:	2001f5c8 	.word	0x2001f5c8
600015f8:	00007269 	.word	0x00007269
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001f5cc 	.word	0x2001f5cc
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001654:	4b7c      	ldr	r3, [pc, #496]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000165a:	2a0b      	cmp	r2, #11
{
6000165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001660:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001662:	d11c      	bne.n	6000169e <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001664:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001668:	4978      	ldr	r1, [pc, #480]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000166a:	4b79      	ldr	r3, [pc, #484]	; (60001850 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
6000166c:	4e79      	ldr	r6, [pc, #484]	; (60001854 <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
6000166e:	f101 0c04 	add.w	ip, r1, #4
60001672:	4050      	eors	r0, r2
60001674:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001676:	f000 0201 	and.w	r2, r0, #1
6000167a:	3c01      	subs	r4, #1
6000167c:	fb03 f202 	mul.w	r2, r3, r2
60001680:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001684:	d1f7      	bne.n	60001676 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001686:	45b4      	cmp	ip, r6
60001688:	d002      	beq.n	60001690 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
6000168a:	684a      	ldr	r2, [r1, #4]
6000168c:	4661      	mov	r1, ip
6000168e:	e7ee      	b.n	6000166e <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001690:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001848 <CrashReportClass::printTo(Print&) const+0x1f4>
60001694:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001698:	4298      	cmp	r0, r3
6000169a:	f000 80fd 	beq.w	60001898 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000169e:	682b      	ldr	r3, [r5, #0]
600016a0:	2217      	movs	r2, #23
600016a2:	496d      	ldr	r1, [pc, #436]	; (60001858 <CrashReportClass::printTo(Print&) const+0x204>)
600016a4:	4628      	mov	r0, r5
600016a6:	685b      	ldr	r3, [r3, #4]
600016a8:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600016aa:	4628      	mov	r0, r5
600016ac:	f000 ffd4 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016b0:	682b      	ldr	r3, [r5, #0]
600016b2:	2248      	movs	r2, #72	; 0x48
600016b4:	4969      	ldr	r1, [pc, #420]	; (6000185c <CrashReportClass::printTo(Print&) const+0x208>)
600016b6:	685b      	ldr	r3, [r3, #4]
600016b8:	4628      	mov	r0, r5
600016ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016bc:	4628      	mov	r0, r5
600016be:	f000 ffcb 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016c2:	682b      	ldr	r3, [r5, #0]
600016c4:	2249      	movs	r2, #73	; 0x49
600016c6:	4966      	ldr	r1, [pc, #408]	; (60001860 <CrashReportClass::printTo(Print&) const+0x20c>)
600016c8:	685b      	ldr	r3, [r3, #4]
600016ca:	4628      	mov	r0, r5
600016cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016ce:	4628      	mov	r0, r5
600016d0:	f000 ffc2 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016d4:	682b      	ldr	r3, [r5, #0]
600016d6:	2224      	movs	r2, #36	; 0x24
600016d8:	4962      	ldr	r1, [pc, #392]	; (60001864 <CrashReportClass::printTo(Print&) const+0x210>)
600016da:	685b      	ldr	r3, [r3, #4]
600016dc:	4628      	mov	r0, r5
600016de:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016e0:	4628      	mov	r0, r5
600016e2:	f000 ffb9 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016e6:	682b      	ldr	r3, [r5, #0]
600016e8:	2247      	movs	r2, #71	; 0x47
600016ea:	495f      	ldr	r1, [pc, #380]	; (60001868 <CrashReportClass::printTo(Print&) const+0x214>)
600016ec:	685b      	ldr	r3, [r3, #4]
600016ee:	4628      	mov	r0, r5
600016f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016f2:	4628      	mov	r0, r5
600016f4:	f000 ffb0 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016f8:	682b      	ldr	r3, [r5, #0]
600016fa:	223f      	movs	r2, #63	; 0x3f
600016fc:	495b      	ldr	r1, [pc, #364]	; (6000186c <CrashReportClass::printTo(Print&) const+0x218>)
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	4628      	mov	r0, r5
60001702:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001704:	4628      	mov	r0, r5
60001706:	f000 ffa7 	bl	60002658 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
6000170a:	4b59      	ldr	r3, [pc, #356]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
6000170c:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000170e:	07a2      	lsls	r2, r4, #30
60001710:	d50d      	bpl.n	6000172e <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
60001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001714:	4b57      	ldr	r3, [pc, #348]	; (60001874 <CrashReportClass::printTo(Print&) const+0x220>)
60001716:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001718:	682b      	ldr	r3, [r5, #0]
6000171a:	f000 81b8 	beq.w	60001a8e <CrashReportClass::printTo(Print&) const+0x43a>
6000171e:	2240      	movs	r2, #64	; 0x40
60001720:	4955      	ldr	r1, [pc, #340]	; (60001878 <CrashReportClass::printTo(Print&) const+0x224>)
60001722:	685b      	ldr	r3, [r3, #4]
60001724:	4628      	mov	r0, r5
60001726:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001728:	4628      	mov	r0, r5
6000172a:	f000 ff95 	bl	60002658 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000172e:	0763      	lsls	r3, r4, #29
60001730:	f100 81a3 	bmi.w	60001a7a <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001734:	0727      	lsls	r7, r4, #28
60001736:	f100 8196 	bmi.w	60001a66 <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000173a:	06e6      	lsls	r6, r4, #27
6000173c:	f100 8189 	bmi.w	60001a52 <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001740:	06a0      	lsls	r0, r4, #26
60001742:	f100 817c 	bmi.w	60001a3e <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001746:	0661      	lsls	r1, r4, #25
60001748:	f100 816f 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000174c:	0622      	lsls	r2, r4, #24
6000174e:	f100 8134 	bmi.w	600019ba <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001752:	05e3      	lsls	r3, r4, #23
60001754:	f100 813d 	bmi.w	600019d2 <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001758:	4f3b      	ldr	r7, [pc, #236]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
6000175e:	2b00      	cmp	r3, #0
60001760:	d051      	beq.n	60001806 <CrashReportClass::printTo(Print&) const+0x1b2>
60001762:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
60001764:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60001894 <CrashReportClass::printTo(Print&) const+0x240>
60001768:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6000188c <CrashReportClass::printTo(Print&) const+0x238>
6000176c:	e004      	b.n	60001778 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
6000176e:	3401      	adds	r4, #1
60001770:	2c07      	cmp	r4, #7
60001772:	d039      	beq.n	600017e8 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
60001774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001778:	1e62      	subs	r2, r4, #1
6000177a:	2601      	movs	r6, #1
6000177c:	fa06 f102 	lsl.w	r1, r6, r2
60001780:	4219      	tst	r1, r3
60001782:	d0f4      	beq.n	6000176e <CrashReportClass::printTo(Print&) const+0x11a>
60001784:	682b      	ldr	r3, [r5, #0]
60001786:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
6000178a:	4649      	mov	r1, r9
6000178c:	220e      	movs	r2, #14
6000178e:	685b      	ldr	r3, [r3, #4]
60001790:	4628      	mov	r0, r5
60001792:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001794:	4621      	mov	r1, r4
60001796:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001798:	3401      	adds	r4, #1
6000179a:	f000 ff59 	bl	60002650 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179e:	682b      	ldr	r3, [r5, #0]
600017a0:	2205      	movs	r2, #5
600017a2:	4936      	ldr	r1, [pc, #216]	; (6000187c <CrashReportClass::printTo(Print&) const+0x228>)
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	4628      	mov	r0, r5
600017a8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600017aa:	2300      	movs	r3, #0
600017ac:	f8da 1004 	ldr.w	r1, [sl, #4]
600017b0:	220a      	movs	r2, #10
600017b2:	4628      	mov	r0, r5
600017b4:	f000 ff48 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b8:	682b      	ldr	r3, [r5, #0]
600017ba:	2204      	movs	r2, #4
600017bc:	4930      	ldr	r1, [pc, #192]	; (60001880 <CrashReportClass::printTo(Print&) const+0x22c>)
600017be:	685b      	ldr	r3, [r3, #4]
600017c0:	4628      	mov	r0, r5
600017c2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600017c4:	f8da 1004 	ldr.w	r1, [sl, #4]
600017c8:	2300      	movs	r3, #0
600017ca:	2210      	movs	r2, #16
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff3b 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	4632      	mov	r2, r6
600017d6:	492b      	ldr	r1, [pc, #172]	; (60001884 <CrashReportClass::printTo(Print&) const+0x230>)
600017d8:	685b      	ldr	r3, [r3, #4]
600017da:	4628      	mov	r0, r5
600017dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017de:	4628      	mov	r0, r5
600017e0:	f000 ff3a 	bl	60002658 <___ZN5Print7printlnEv_veneer>
600017e4:	2c07      	cmp	r4, #7
600017e6:	d1c5      	bne.n	60001774 <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600017e8:	4b27      	ldr	r3, [pc, #156]	; (60001888 <CrashReportClass::printTo(Print&) const+0x234>)
600017ea:	2200      	movs	r2, #0
600017ec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600017f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600017f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017f8:	4a24      	ldr	r2, [pc, #144]	; (6000188c <CrashReportClass::printTo(Print&) const+0x238>)
600017fa:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600017fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001802:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001806:	4a10      	ldr	r2, [pc, #64]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001808:	2300      	movs	r3, #0
	info->ipsr  = 0;
6000180a:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000180e:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001812:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001816:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000181a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001826:	4809      	ldr	r0, [pc, #36]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
60001828:	4919      	ldr	r1, [pc, #100]	; (60001890 <CrashReportClass::printTo(Print&) const+0x23c>)
6000182a:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
6000182e:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001832:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001836:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183a:	4a0d      	ldr	r2, [pc, #52]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
}
6000183c:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183e:	6891      	ldr	r1, [r2, #8]
60001840:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001842:	6313      	str	r3, [r2, #48]	; 0x30
}
60001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001848:	2027ff00 	.word	0x2027ff00
6000184c:	2027ff80 	.word	0x2027ff80
60001850:	edb88320 	.word	0xedb88320
60001854:	2027ffa8 	.word	0x2027ffa8
60001858:	200081ac 	.word	0x200081ac
6000185c:	200081c4 	.word	0x200081c4
60001860:	20008210 	.word	0x20008210
60001864:	2000825c 	.word	0x2000825c
60001868:	20008284 	.word	0x20008284
6000186c:	200082cc 	.word	0x200082cc
60001870:	400f8000 	.word	0x400f8000
60001874:	0bad00f1 	.word	0x0bad00f1
60001878:	20008358 	.word	0x20008358
6000187c:	20008530 	.word	0x20008530
60001880:	20008538 	.word	0x20008538
60001884:	20008258 	.word	0x20008258
60001888:	2027f000 	.word	0x2027f000
6000188c:	2027ffc0 	.word	0x2027ffc0
60001890:	2027ffa0 	.word	0x2027ffa0
60001894:	20008520 	.word	0x20008520
							  return write((const uint8_t *)str, strlen(str)); }
60001898:	682b      	ldr	r3, [r5, #0]
6000189a:	220c      	movs	r2, #12
6000189c:	49aa      	ldr	r1, [pc, #680]	; (60001b48 <CrashReportClass::printTo(Print&) const+0x4f4>)
6000189e:	4628      	mov	r0, r5
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a4:	4628      	mov	r0, r5
600018a6:	f000 fed7 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018aa:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018ac:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018b0:	4628      	mov	r0, r5
    info->time /= 60;
600018b2:	4ba6      	ldr	r3, [pc, #664]	; (60001b4c <CrashReportClass::printTo(Print&) const+0x4f8>)
600018b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018b8:	fba3 2709 	umull	r2, r7, r3, r9
600018bc:	49a4      	ldr	r1, [pc, #656]	; (60001b50 <CrashReportClass::printTo(Print&) const+0x4fc>)
600018be:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018c0:	fba3 2307 	umull	r2, r3, r3, r7
600018c4:	2226      	movs	r2, #38	; 0x26
600018c6:	095e      	lsrs	r6, r3, #5
600018c8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018cc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018ce:	49a1      	ldr	r1, [pc, #644]	; (60001b54 <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	fba1 3106 	umull	r3, r1, r1, r6
600018d8:	4623      	mov	r3, r4
600018da:	0909      	lsrs	r1, r1, #4
600018dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018e0:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018e4:	f000 feb0 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e8:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600018ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018ee:	2201      	movs	r2, #1
600018f0:	685b      	ldr	r3, [r3, #4]
600018f2:	4628      	mov	r0, r5
600018f4:	4998      	ldr	r1, [pc, #608]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
600018f6:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018f8:	4623      	mov	r3, r4
600018fa:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018fe:	220a      	movs	r2, #10
60001900:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001902:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001906:	f000 fe9f 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2201      	movs	r2, #1
6000190e:	4992      	ldr	r1, [pc, #584]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001916:	4623      	mov	r3, r4
60001918:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
6000191c:	220a      	movs	r2, #10
6000191e:	4628      	mov	r0, r5
60001920:	f000 fe92 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001924:	4628      	mov	r0, r5
60001926:	f000 fe97 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192a:	682b      	ldr	r3, [r5, #0]
6000192c:	2224      	movs	r2, #36	; 0x24
6000192e:	498b      	ldr	r1, [pc, #556]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x508>)
60001930:	685b      	ldr	r3, [r3, #4]
60001932:	4628      	mov	r0, r5
60001934:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001936:	4623      	mov	r3, r4
60001938:	2210      	movs	r2, #16
6000193a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
6000193e:	4628      	mov	r0, r5
60001940:	f000 fe82 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 fe87 	bl	60002658 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000194a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000194e:	2e00      	cmp	r6, #0
60001950:	f040 80a0 	bne.w	60001a94 <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001954:	4e82      	ldr	r6, [pc, #520]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
60001956:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000195a:	2c00      	cmp	r4, #0
6000195c:	f040 80bb 	bne.w	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2222      	movs	r2, #34	; 0x22
60001964:	497f      	ldr	r1, [pc, #508]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x510>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
    p.print(info->temp);
6000196c:	4b7c      	ldr	r3, [pc, #496]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000196e:	2102      	movs	r1, #2
60001970:	4628      	mov	r0, r5
60001972:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001976:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000197a:	f000 fe4d 	bl	60002618 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000197e:	682b      	ldr	r3, [r5, #0]
60001980:	2205      	movs	r2, #5
60001982:	4979      	ldr	r1, [pc, #484]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x514>)
60001984:	685b      	ldr	r3, [r3, #4]
60001986:	4628      	mov	r0, r5
60001988:	4798      	blx	r3
6000198a:	682b      	ldr	r3, [r5, #0]
6000198c:	221d      	movs	r2, #29
6000198e:	4977      	ldr	r1, [pc, #476]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x518>)
60001990:	685b      	ldr	r3, [r3, #4]
60001992:	4628      	mov	r0, r5
60001994:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001996:	4a76      	ldr	r2, [pc, #472]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x51c>)
60001998:	4876      	ldr	r0, [pc, #472]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000199a:	2300      	movs	r3, #0
6000199c:	6811      	ldr	r1, [r2, #0]
6000199e:	220a      	movs	r2, #10
600019a0:	fba0 0101 	umull	r0, r1, r0, r1
600019a4:	4628      	mov	r0, r5
600019a6:	0c89      	lsrs	r1, r1, #18
600019a8:	f000 fe4e 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019ac:	682b      	ldr	r3, [r5, #0]
600019ae:	2204      	movs	r2, #4
600019b0:	4971      	ldr	r1, [pc, #452]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x524>)
600019b2:	685b      	ldr	r3, [r3, #4]
600019b4:	4628      	mov	r0, r5
600019b6:	4798      	blx	r3
600019b8:	e6a7      	b.n	6000170a <CrashReportClass::printTo(Print&) const+0xb6>
600019ba:	682b      	ldr	r3, [r5, #0]
600019bc:	2221      	movs	r2, #33	; 0x21
600019be:	496f      	ldr	r1, [pc, #444]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x528>)
600019c0:	4628      	mov	r0, r5
600019c2:	685b      	ldr	r3, [r3, #4]
600019c4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c6:	4628      	mov	r0, r5
600019c8:	f000 fe46 	bl	60002658 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019cc:	05e3      	lsls	r3, r4, #23
600019ce:	f57f aec3 	bpl.w	60001758 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	496a      	ldr	r1, [pc, #424]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x52c>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe3a 	bl	60002658 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4967      	ldr	r1, [pc, #412]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	4964      	ldr	r1, [pc, #400]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x534>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe2c 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	4961      	ldr	r1, [pc, #388]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x538>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe23 	bl	60002658 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a5f      	ldr	r2, [pc, #380]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b5f      	ldr	r3, [pc, #380]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x540>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	495a      	ldr	r1, [pc, #360]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x544>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fe0e 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a3c:	e686      	b.n	6000174c <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682b      	ldr	r3, [r5, #0]
60001a40:	2229      	movs	r2, #41	; 0x29
60001a42:	4956      	ldr	r1, [pc, #344]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x548>)
60001a44:	4628      	mov	r0, r5
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4a:	4628      	mov	r0, r5
60001a4c:	f000 fe04 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a50:	e679      	b.n	60001746 <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2226      	movs	r2, #38	; 0x26
60001a56:	4952      	ldr	r1, [pc, #328]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x54c>)
60001a58:	4628      	mov	r0, r5
60001a5a:	685b      	ldr	r3, [r3, #4]
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fdfa 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a64:	e66c      	b.n	60001740 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001a66:	682b      	ldr	r3, [r5, #0]
60001a68:	222a      	movs	r2, #42	; 0x2a
60001a6a:	494e      	ldr	r1, [pc, #312]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x550>)
60001a6c:	4628      	mov	r0, r5
60001a6e:	685b      	ldr	r3, [r3, #4]
60001a70:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a72:	4628      	mov	r0, r5
60001a74:	f000 fdf0 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a78:	e65f      	b.n	6000173a <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7a:	682b      	ldr	r3, [r5, #0]
60001a7c:	2227      	movs	r2, #39	; 0x27
60001a7e:	494a      	ldr	r1, [pc, #296]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x554>)
60001a80:	4628      	mov	r0, r5
60001a82:	685b      	ldr	r3, [r3, #4]
60001a84:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a86:	4628      	mov	r0, r5
60001a88:	f000 fde6 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a8c:	e652      	b.n	60001734 <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a8e:	2248      	movs	r2, #72	; 0x48
60001a90:	4946      	ldr	r1, [pc, #280]	; (60001bac <CrashReportClass::printTo(Print&) const+0x558>)
60001a92:	e646      	b.n	60001722 <CrashReportClass::printTo(Print&) const+0xce>
60001a94:	682b      	ldr	r3, [r5, #0]
60001a96:	2208      	movs	r2, #8
60001a98:	4945      	ldr	r1, [pc, #276]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x55c>)
60001a9a:	4628      	mov	r0, r5
60001a9c:	685b      	ldr	r3, [r3, #4]
60001a9e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aa0:	4623      	mov	r3, r4
60001aa2:	2210      	movs	r2, #16
60001aa4:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001aa8:	4628      	mov	r0, r5
60001aaa:	f000 fdcd 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001aae:	4628      	mov	r0, r5
60001ab0:	f000 fdd2 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ab4:	07f4      	lsls	r4, r6, #31
60001ab6:	d427      	bmi.n	60001b08 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001ab8:	07b0      	lsls	r0, r6, #30
60001aba:	f100 811d 	bmi.w	60001cf8 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001abe:	0731      	lsls	r1, r6, #28
60001ac0:	f100 810e 	bmi.w	60001ce0 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ac4:	06f2      	lsls	r2, r6, #27
60001ac6:	f100 8127 	bmi.w	60001d18 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001aca:	06b3      	lsls	r3, r6, #26
60001acc:	d525      	bpl.n	60001b1a <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ace:	682b      	ldr	r3, [r5, #0]
60001ad0:	222a      	movs	r2, #42	; 0x2a
60001ad2:	4938      	ldr	r1, [pc, #224]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x560>)
60001ad4:	e01b      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ad6:	682b      	ldr	r3, [r5, #0]
60001ad8:	2208      	movs	r2, #8
60001ada:	4937      	ldr	r1, [pc, #220]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x564>)
60001adc:	4628      	mov	r0, r5
60001ade:	685b      	ldr	r3, [r3, #4]
60001ae0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ae2:	2300      	movs	r3, #0
60001ae4:	2210      	movs	r2, #16
60001ae6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001aea:	4628      	mov	r0, r5
60001aec:	f000 fdac 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001af0:	4628      	mov	r0, r5
60001af2:	f000 fdb1 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001af6:	07a0      	lsls	r0, r4, #30
60001af8:	d466      	bmi.n	60001bc8 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001afa:	0061      	lsls	r1, r4, #1
60001afc:	f57f af30 	bpl.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	221b      	movs	r2, #27
60001b04:	492d      	ldr	r1, [pc, #180]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x568>)
60001b06:	e062      	b.n	60001bce <CrashReportClass::printTo(Print&) const+0x57a>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2228      	movs	r2, #40	; 0x28
60001b0c:	492c      	ldr	r1, [pc, #176]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x56c>)
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4628      	mov	r0, r5
60001b12:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b14:	4628      	mov	r0, r5
60001b16:	f000 fd9f 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001b1a:	0637      	lsls	r7, r6, #24
60001b1c:	d47d      	bmi.n	60001c1a <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001b1e:	05f4      	lsls	r4, r6, #23
60001b20:	d45c      	bmi.n	60001bdc <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001b22:	05b0      	lsls	r0, r6, #22
60001b24:	f100 80e4 	bmi.w	60001cf0 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001b28:	0571      	lsls	r1, r6, #21
60001b2a:	f100 80dd 	bmi.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001b2e:	0532      	lsls	r2, r6, #20
60001b30:	f100 80ee 	bmi.w	60001d10 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001b34:	04f3      	lsls	r3, r6, #19
60001b36:	f100 80e7 	bmi.w	60001d08 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001b3a:	04b7      	lsls	r7, r6, #18
60001b3c:	d557      	bpl.n	60001bee <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001b3e:	682b      	ldr	r3, [r5, #0]
60001b40:	2231      	movs	r2, #49	; 0x31
60001b42:	4920      	ldr	r1, [pc, #128]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x570>)
60001b44:	e04d      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001b46:	bf00      	nop
60001b48:	20007c94 	.word	0x20007c94
60001b4c:	88888889 	.word	0x88888889
60001b50:	20007ca4 	.word	0x20007ca4
60001b54:	aaaaaaab 	.word	0xaaaaaaab
60001b58:	20007ccc 	.word	0x20007ccc
60001b5c:	20007cd0 	.word	0x20007cd0
60001b60:	2027ff00 	.word	0x2027ff00
60001b64:	20008158 	.word	0x20008158
60001b68:	2000817c 	.word	0x2000817c
60001b6c:	20008184 	.word	0x20008184
60001b70:	20008750 	.word	0x20008750
60001b74:	431bde83 	.word	0x431bde83
60001b78:	200081a4 	.word	0x200081a4
60001b7c:	20008468 	.word	0x20008468
60001b80:	2000848c 	.word	0x2000848c
60001b84:	400f8000 	.word	0x400f8000
60001b88:	200084b8 	.word	0x200084b8
60001b8c:	200084dc 	.word	0x200084dc
60001b90:	400d4000 	.word	0x400d4000
60001b94:	400ac000 	.word	0x400ac000
60001b98:	20008444 	.word	0x20008444
60001b9c:	20008418 	.word	0x20008418
60001ba0:	200083f0 	.word	0x200083f0
60001ba4:	200083c4 	.word	0x200083c4
60001ba8:	2000839c 	.word	0x2000839c
60001bac:	2000830c 	.word	0x2000830c
60001bb0:	20007cf8 	.word	0x20007cf8
60001bb4:	20007da8 	.word	0x20007da8
60001bb8:	20008108 	.word	0x20008108
60001bbc:	2000813c 	.word	0x2000813c
60001bc0:	20007d04 	.word	0x20007d04
60001bc4:	20007fcc 	.word	0x20007fcc
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	2226      	movs	r2, #38	; 0x26
60001bcc:	495c      	ldr	r1, [pc, #368]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001bce:	4628      	mov	r0, r5
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bd4:	4628      	mov	r0, r5
60001bd6:	f000 fd3f 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001bda:	e6c1      	b.n	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	2220      	movs	r2, #32
60001be0:	4958      	ldr	r1, [pc, #352]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001be2:	685b      	ldr	r3, [r3, #4]
60001be4:	4628      	mov	r0, r5
60001be6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be8:	4628      	mov	r0, r5
60001bea:	f000 fd35 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001bee:	0434      	lsls	r4, r6, #16
60001bf0:	d43f      	bmi.n	60001c72 <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001bf2:	03f0      	lsls	r0, r6, #15
60001bf4:	d42d      	bmi.n	60001c52 <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001bf6:	03b1      	lsls	r1, r6, #14
60001bf8:	f100 8082 	bmi.w	60001d00 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001bfc:	0372      	lsls	r2, r6, #13
60001bfe:	d44a      	bmi.n	60001c96 <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c00:	0333      	lsls	r3, r6, #12
60001c02:	f100 8091 	bmi.w	60001d28 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c06:	01f7      	lsls	r7, r6, #7
60001c08:	f100 808a 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c0c:	01b4      	lsls	r4, r6, #6
60001c0e:	f57f aea1 	bpl.w	60001954 <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001c12:	682b      	ldr	r3, [r5, #0]
60001c14:	221b      	movs	r2, #27
60001c16:	494c      	ldr	r1, [pc, #304]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001c18:	e01e      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c1a:	682b      	ldr	r3, [r5, #0]
60001c1c:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c1e:	4c4b      	ldr	r4, [pc, #300]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c20:	4628      	mov	r0, r5
60001c22:	494b      	ldr	r1, [pc, #300]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001c24:	685b      	ldr	r3, [r3, #4]
60001c26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c28:	2210      	movs	r2, #16
60001c2a:	2300      	movs	r3, #0
60001c2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c30:	4628      	mov	r0, r5
60001c32:	f000 fd09 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c3a:	2a1f      	cmp	r2, #31
60001c3c:	d92f      	bls.n	60001c9e <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c3e:	4b45      	ldr	r3, [pc, #276]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x700>)
60001c40:	429a      	cmp	r2, r3
60001c42:	d302      	bcc.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001c44:	3320      	adds	r3, #32
60001c46:	429a      	cmp	r2, r3
60001c48:	d372      	bcc.n	60001d30 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001c4a:	4628      	mov	r0, r5
60001c4c:	f000 fd04 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001c50:	e765      	b.n	60001b1e <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001c52:	682b      	ldr	r3, [r5, #0]
60001c54:	2223      	movs	r2, #35	; 0x23
60001c56:	4940      	ldr	r1, [pc, #256]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x704>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c5c:	4e3b      	ldr	r6, [pc, #236]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c5e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c60:	4628      	mov	r0, r5
60001c62:	f000 fcf9 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001c66:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001c6a:	2c00      	cmp	r4, #0
60001c6c:	f43f ae78 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
60001c70:	e731      	b.n	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001c72:	682b      	ldr	r3, [r5, #0]
60001c74:	2221      	movs	r2, #33	; 0x21
60001c76:	4939      	ldr	r1, [pc, #228]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x708>)
60001c78:	4628      	mov	r0, r5
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001c7e:	4933      	ldr	r1, [pc, #204]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c80:	2300      	movs	r3, #0
60001c82:	2210      	movs	r2, #16
60001c84:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001c88:	4628      	mov	r0, r5
60001c8a:	f000 fcdd 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c8e:	4628      	mov	r0, r5
60001c90:	f000 fce2 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001c94:	e7ad      	b.n	60001bf2 <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001c96:	682b      	ldr	r3, [r5, #0]
60001c98:	2228      	movs	r2, #40	; 0x28
60001c9a:	4931      	ldr	r1, [pc, #196]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x70c>)
60001c9c:	e7dc      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c9e:	682b      	ldr	r3, [r5, #0]
60001ca0:	221e      	movs	r2, #30
60001ca2:	4930      	ldr	r1, [pc, #192]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x710>)
60001ca4:	4628      	mov	r0, r5
60001ca6:	685b      	ldr	r3, [r3, #4]
60001ca8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001caa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cae:	2300      	movs	r3, #0
60001cb0:	2210      	movs	r2, #16
60001cb2:	4628      	mov	r0, r5
60001cb4:	f000 fcc8 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb8:	682b      	ldr	r3, [r5, #0]
60001cba:	223e      	movs	r2, #62	; 0x3e
60001cbc:	492a      	ldr	r1, [pc, #168]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x714>)
60001cbe:	685b      	ldr	r3, [r3, #4]
60001cc0:	4628      	mov	r0, r5
60001cc2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cc8:	2300      	movs	r3, #0
60001cca:	2210      	movs	r2, #16
60001ccc:	4628      	mov	r0, r5
60001cce:	f000 fcbb 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cd2:	682b      	ldr	r3, [r5, #0]
60001cd4:	221d      	movs	r2, #29
60001cd6:	4925      	ldr	r1, [pc, #148]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x718>)
60001cd8:	685b      	ldr	r3, [r3, #4]
60001cda:	4628      	mov	r0, r5
60001cdc:	4798      	blx	r3
60001cde:	e7b4      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	2229      	movs	r2, #41	; 0x29
60001ce4:	4922      	ldr	r1, [pc, #136]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x71c>)
60001ce6:	e712      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2244      	movs	r2, #68	; 0x44
60001cec:	4921      	ldr	r1, [pc, #132]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x720>)
60001cee:	e778      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf0:	682b      	ldr	r3, [r5, #0]
60001cf2:	222c      	movs	r2, #44	; 0x2c
60001cf4:	4920      	ldr	r1, [pc, #128]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x724>)
60001cf6:	e774      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf8:	682b      	ldr	r3, [r5, #0]
60001cfa:	2221      	movs	r2, #33	; 0x21
60001cfc:	491f      	ldr	r1, [pc, #124]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x728>)
60001cfe:	e706      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d00:	682b      	ldr	r3, [r5, #0]
60001d02:	2232      	movs	r2, #50	; 0x32
60001d04:	491e      	ldr	r1, [pc, #120]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x72c>)
60001d06:	e7a7      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d08:	682b      	ldr	r3, [r5, #0]
60001d0a:	2233      	movs	r2, #51	; 0x33
60001d0c:	491d      	ldr	r1, [pc, #116]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x730>)
60001d0e:	e768      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d10:	682b      	ldr	r3, [r5, #0]
60001d12:	223f      	movs	r2, #63	; 0x3f
60001d14:	491c      	ldr	r1, [pc, #112]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x734>)
60001d16:	e764      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d18:	682b      	ldr	r3, [r5, #0]
60001d1a:	2225      	movs	r2, #37	; 0x25
60001d1c:	491b      	ldr	r1, [pc, #108]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x738>)
60001d1e:	e6f6      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2228      	movs	r2, #40	; 0x28
60001d24:	491a      	ldr	r1, [pc, #104]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x73c>)
60001d26:	e797      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d28:	682b      	ldr	r3, [r5, #0]
60001d2a:	2216      	movs	r2, #22
60001d2c:	4919      	ldr	r1, [pc, #100]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x740>)
60001d2e:	e793      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2241      	movs	r2, #65	; 0x41
60001d34:	4918      	ldr	r1, [pc, #96]	; (60001d98 <CrashReportClass::printTo(Print&) const+0x744>)
60001d36:	4628      	mov	r0, r5
60001d38:	685b      	ldr	r3, [r3, #4]
60001d3a:	4798      	blx	r3
60001d3c:	e785      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001d3e:	bf00      	nop
60001d40:	20008114 	.word	0x20008114
60001d44:	20007ebc 	.word	0x20007ebc
60001d48:	200080ec 	.word	0x200080ec
60001d4c:	2027ff00 	.word	0x2027ff00
60001d50:	20007dd4 	.word	0x20007dd4
60001d54:	2001f640 	.word	0x2001f640
60001d58:	20008024 	.word	0x20008024
60001d5c:	20008000 	.word	0x20008000
60001d60:	2000807c 	.word	0x2000807c
60001d64:	20007df8 	.word	0x20007df8
60001d68:	20007e18 	.word	0x20007e18
60001d6c:	20007e58 	.word	0x20007e58
60001d70:	20007d54 	.word	0x20007d54
60001d74:	20007f10 	.word	0x20007f10
60001d78:	20007ee0 	.word	0x20007ee0
60001d7c:	20007d30 	.word	0x20007d30
60001d80:	20008048 	.word	0x20008048
60001d84:	20007f98 	.word	0x20007f98
60001d88:	20007f58 	.word	0x20007f58
60001d8c:	20007d80 	.word	0x20007d80
60001d90:	200080c0 	.word	0x200080c0
60001d94:	200080a8 	.word	0x200080a8
60001d98:	20007e78 	.word	0x20007e78

60001d9c <CrashReportClass::clear()>:
	info->len = 0;
60001d9c:	4a0f      	ldr	r2, [pc, #60]	; (60001ddc <CrashReportClass::clear()+0x40>)
60001d9e:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001da0:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001da4:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001da8:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001dac:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001db4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001db8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001dbc:	4808      	ldr	r0, [pc, #32]	; (60001de0 <CrashReportClass::clear()+0x44>)
60001dbe:	4909      	ldr	r1, [pc, #36]	; (60001de4 <CrashReportClass::clear()+0x48>)
60001dc0:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001dc4:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001dc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001dcc:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dd0:	4a05      	ldr	r2, [pc, #20]	; (60001de8 <CrashReportClass::clear()+0x4c>)
60001dd2:	6891      	ldr	r1, [r2, #8]
60001dd4:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dd6:	6313      	str	r3, [r2, #48]	; 0x30
}
60001dd8:	4770      	bx	lr
60001dda:	bf00      	nop
60001ddc:	2027ff00 	.word	0x2027ff00
60001de0:	2027ff80 	.word	0x2027ff80
60001de4:	2027ffa0 	.word	0x2027ffa0
60001de8:	400f8000 	.word	0x400f8000

60001dec <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001dec:	4b12      	ldr	r3, [pc, #72]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001df2:	2b0b      	cmp	r3, #11
60001df4:	d11e      	bne.n	60001e34 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001df6:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dfa:	4810      	ldr	r0, [pc, #64]	; (60001e3c <CrashReportClass::operator bool()+0x50>)
{
60001dfc:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001dfe:	4d10      	ldr	r5, [pc, #64]	; (60001e40 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e00:	4c10      	ldr	r4, [pc, #64]	; (60001e44 <CrashReportClass::operator bool()+0x58>)
60001e02:	e001      	b.n	60001e08 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e04:	686b      	ldr	r3, [r5, #4]
60001e06:	4675      	mov	r5, lr
60001e08:	f105 0e04 	add.w	lr, r5, #4
60001e0c:	405a      	eors	r2, r3
60001e0e:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e10:	f002 0301 	and.w	r3, r2, #1
60001e14:	3901      	subs	r1, #1
60001e16:	fb00 f303 	mul.w	r3, r0, r3
60001e1a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e1e:	d1f7      	bne.n	60001e10 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e20:	45a6      	cmp	lr, r4
60001e22:	d1ef      	bne.n	60001e04 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e24:	4b04      	ldr	r3, [pc, #16]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001e26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e2a:	1a80      	subs	r0, r0, r2
60001e2c:	fab0 f080 	clz	r0, r0
60001e30:	0940      	lsrs	r0, r0, #5
}
60001e32:	bd30      	pop	{r4, r5, pc}
	return false;
60001e34:	2000      	movs	r0, #0
}
60001e36:	4770      	bx	lr
60001e38:	2027ff00 	.word	0x2027ff00
60001e3c:	edb88320 	.word	0xedb88320
60001e40:	2027ff80 	.word	0x2027ff80
60001e44:	2027ffa8 	.word	0x2027ffa8

60001e48 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e48:	4770      	bx	lr
60001e4a:	bf00      	nop

60001e4c <startup_default_middle_hook>:
60001e4c:	4770      	bx	lr
60001e4e:	bf00      	nop

60001e50 <startup_default_late_hook>:
60001e50:	4770      	bx	lr
60001e52:	bf00      	nop

60001e54 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e54:	bf00      	nop
60001e56:	4770      	bx	lr

60001e58 <configure_cache>:
{
60001e58:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e60:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e62:	482b      	ldr	r0, [pc, #172]	; (60001f10 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e64:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e68:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e6c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e6e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e72:	4828      	ldr	r0, [pc, #160]	; (60001f14 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e74:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e78:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e7a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e7e:	4826      	ldr	r0, [pc, #152]	; (60001f18 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e80:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e84:	4a25      	ldr	r2, [pc, #148]	; (60001f1c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e86:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e8a:	4c25      	ldr	r4, [pc, #148]	; (60001f20 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e8c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e90:	4824      	ldr	r0, [pc, #144]	; (60001f24 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e92:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9a:	4c23      	ldr	r4, [pc, #140]	; (60001f28 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001e9c:	4823      	ldr	r0, [pc, #140]	; (60001f2c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ea6:	4c22      	ldr	r4, [pc, #136]	; (60001f30 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ea8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eac:	4821      	ldr	r0, [pc, #132]	; (60001f34 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eae:	4a22      	ldr	r2, [pc, #136]	; (60001f38 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001eb0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eb4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eb8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ebc:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec0:	4c1e      	ldr	r4, [pc, #120]	; (60001f3c <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ec2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ec4:	481e      	ldr	r0, [pc, #120]	; (60001f40 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eca:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ece:	4a1d      	ldr	r2, [pc, #116]	; (60001f44 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ed0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ed4:	4c1c      	ldr	r4, [pc, #112]	; (60001f48 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ed6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001eda:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001edc:	481b      	ldr	r0, [pc, #108]	; (60001f4c <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ede:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001ee2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ee6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001eea:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001eee:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001ef2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001ef6:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001efa:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001efe:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f06:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f0e:	4770      	bx	lr
60001f10:	1000003f 	.word	0x1000003f
60001f14:	03080025 	.word	0x03080025
60001f18:	00100009 	.word	0x00100009
60001f1c:	2001f640 	.word	0x2001f640
60001f20:	00200013 	.word	0x00200013
60001f24:	07020021 	.word	0x07020021
60001f28:	20000014 	.word	0x20000014
60001f2c:	13080025 	.word	0x13080025
60001f30:	10000009 	.word	0x10000009
60001f34:	20200016 	.word	0x20200016
60001f38:	130b0027 	.word	0x130b0027
60001f3c:	40000017 	.word	0x40000017
60001f40:	60000018 	.word	0x60000018
60001f44:	070b002f 	.word	0x070b002f
60001f48:	70000019 	.word	0x70000019
60001f4c:	130b002f 	.word	0x130b002f

60001f50 <configure_external_ram>:
{
60001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f52:	4bb8      	ldr	r3, [pc, #736]	; (60002234 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f54:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f56:	4eb8      	ldr	r6, [pc, #736]	; (60002238 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f58:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f5a:	4fb8      	ldr	r7, [pc, #736]	; (6000223c <configure_external_ram+0x2ec>)
{
60001f5c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f5e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f62:	49b7      	ldr	r1, [pc, #732]	; (60002240 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f64:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f68:	4db6      	ldr	r5, [pc, #728]	; (60002244 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f6a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f6e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001f72:	4cb5      	ldr	r4, [pc, #724]	; (60002248 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f74:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f78:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f80:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f84:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001f88:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001f8e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001f90:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001f92:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001f94:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fa6:	4aa9      	ldr	r2, [pc, #676]	; (6000224c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fa8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fac:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001fb0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001fb4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001fb8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fbc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fbe:	4ba4      	ldr	r3, [pc, #656]	; (60002250 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fc0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fc2:	48a4      	ldr	r0, [pc, #656]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fc4:	49a4      	ldr	r1, [pc, #656]	; (60002258 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fc6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	4aa4      	ldr	r2, [pc, #656]	; (6000225c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fca:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001fd0:	f043 030c 	orr.w	r3, r3, #12
60001fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001fd8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fdc:	6803      	ldr	r3, [r0, #0]
60001fde:	f043 0302 	orr.w	r3, r3, #2
60001fe2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001fe4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fe6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001fe8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fec:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fee:	4b9c      	ldr	r3, [pc, #624]	; (60002260 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ff0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001ff2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ff6:	4c9b      	ldr	r4, [pc, #620]	; (60002264 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ffa:	4a9b      	ldr	r2, [pc, #620]	; (60002268 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002000:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002002:	68c3      	ldr	r3, [r0, #12]
60002004:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002008:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000200a:	6a03      	ldr	r3, [r0, #32]
6000200c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000200e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002010:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002012:	6a03      	ldr	r3, [r0, #32]
60002014:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002016:	4a95      	ldr	r2, [pc, #596]	; (6000226c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002018:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000201a:	4c95      	ldr	r4, [pc, #596]	; (60002270 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000201c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000201e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002020:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002022:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002024:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000202c:	f043 0301 	orr.w	r3, r3, #1
60002030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002034:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002038:	498e      	ldr	r1, [pc, #568]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000203e:	f043 0301 	orr.w	r3, r3, #1
60002042:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002046:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000204a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000204c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000204e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002050:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002054:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002056:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002058:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000205a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000205e:	6803      	ldr	r3, [r0, #0]
60002060:	f023 0302 	bic.w	r3, r3, #2
60002064:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002066:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002068:	4b83      	ldr	r3, [pc, #524]	; (60002278 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206a:	4984      	ldr	r1, [pc, #528]	; (6000227c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000206c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206e:	f843 2b04 	str.w	r2, [r3], #4
60002072:	428b      	cmp	r3, r1
60002074:	d1fb      	bne.n	6000206e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002076:	4a77      	ldr	r2, [pc, #476]	; (60002254 <configure_external_ram+0x304>)
60002078:	6813      	ldr	r3, [r2, #0]
6000207a:	f043 0301 	orr.w	r3, r3, #1
6000207e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002080:	6813      	ldr	r3, [r2, #0]
60002082:	f013 0301 	ands.w	r3, r3, #1
60002086:	d1fb      	bne.n	60002080 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002088:	487a      	ldr	r0, [pc, #488]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000208a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000208c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002090:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002092:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002096:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002098:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000209c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020a0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020a4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020a8:	4975      	ldr	r1, [pc, #468]	; (60002280 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020aa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ae:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020b2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020b6:	4873      	ldr	r0, [pc, #460]	; (60002284 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020b8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020bc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020c0:	4c71      	ldr	r4, [pc, #452]	; (60002288 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020c2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020c6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600020ca:	4970      	ldr	r1, [pc, #448]	; (6000228c <configure_external_ram+0x33c>)
600020cc:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020d0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020d2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020d6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020da:	485e      	ldr	r0, [pc, #376]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600020dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020e4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020e8:	6943      	ldr	r3, [r0, #20]
600020ea:	07da      	lsls	r2, r3, #31
600020ec:	d5fc      	bpl.n	600020e8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020ee:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600020f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020f6:	4957      	ldr	r1, [pc, #348]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020f8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600020fa:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002102:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002106:	694b      	ldr	r3, [r1, #20]
60002108:	07db      	lsls	r3, r3, #31
6000210a:	d5fc      	bpl.n	60002106 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000210c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000210e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002110:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002114:	4a4f      	ldr	r2, [pc, #316]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002116:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002118:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000211c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002120:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002124:	6953      	ldr	r3, [r2, #20]
60002126:	07df      	lsls	r7, r3, #31
60002128:	d5fc      	bpl.n	60002124 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000212c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000212e:	4858      	ldr	r0, [pc, #352]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002130:	4948      	ldr	r1, [pc, #288]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002132:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002134:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002138:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000213c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002140:	694b      	ldr	r3, [r1, #20]
60002142:	07de      	lsls	r6, r3, #31
60002144:	d5fc      	bpl.n	60002140 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002146:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000214a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000214e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002150:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002152:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002154:	4293      	cmp	r3, r2
60002156:	d165      	bne.n	60002224 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002158:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000215e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002160:	483c      	ldr	r0, [pc, #240]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002162:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002166:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000216a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000216e:	6943      	ldr	r3, [r0, #20]
60002170:	07dd      	lsls	r5, r3, #31
60002172:	d5fc      	bpl.n	6000216e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002174:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002176:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000217a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217c:	4a35      	ldr	r2, [pc, #212]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000217e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6953      	ldr	r3, [r2, #20]
6000218e:	07dc      	lsls	r4, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219c:	492d      	ldr	r1, [pc, #180]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ac:	694b      	ldr	r3, [r1, #20]
600021ae:	07d8      	lsls	r0, r3, #31
600021b0:	d5fc      	bpl.n	600021ac <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a25      	ldr	r2, [pc, #148]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07d9      	lsls	r1, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d8:	482d      	ldr	r0, [pc, #180]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021da:	491e      	ldr	r1, [pc, #120]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021dc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021de:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021e2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ea:	694b      	ldr	r3, [r1, #20]
600021ec:	07da      	lsls	r2, r3, #31
600021ee:	d5fc      	bpl.n	600021ea <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600021f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021f4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021fa:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021fc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021fe:	4293      	cmp	r3, r2
60002200:	d050      	beq.n	600022a4 <configure_external_ram+0x354>
60002202:	2508      	movs	r5, #8
60002204:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002208:	4922      	ldr	r1, [pc, #136]	; (60002294 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000220a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000220c:	4b22      	ldr	r3, [pc, #136]	; (60002298 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000220e:	4a23      	ldr	r2, [pc, #140]	; (6000229c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002210:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002212:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002214:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002216:	2301      	movs	r3, #1
60002218:	4821      	ldr	r0, [pc, #132]	; (600022a0 <configure_external_ram+0x350>)
6000221a:	4422      	add	r2, r4
6000221c:	f000 f9f4 	bl	60002608 <__sm_set_pool_veneer>
}
60002220:	b003      	add	sp, #12
60002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002224:	4b1e      	ldr	r3, [pc, #120]	; (600022a0 <configure_external_ram+0x350>)
60002226:	2200      	movs	r2, #0
60002228:	e9c3 2200 	strd	r2, r2, [r3]
6000222c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002230:	b003      	add	sp, #12
60002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002234:	401f8000 	.word	0x401f8000
60002238:	0001b0f9 	.word	0x0001b0f9
6000223c:	000110f9 	.word	0x000110f9
60002240:	401f8400 	.word	0x401f8400
60002244:	000170f9 	.word	0x000170f9
60002248:	400fc000 	.word	0x400fc000
6000224c:	1ffffcff 	.word	0x1ffffcff
60002250:	a0000300 	.word	0xa0000300
60002254:	402a4000 	.word	0x402a4000
60002258:	402a8000 	.word	0x402a8000
6000225c:	ffff0012 	.word	0xffff0012
60002260:	00f737ff 	.word	0x00f737ff
60002264:	80000040 	.word	0x80000040
60002268:	7cf0ff00 	.word	0x7cf0ff00
6000226c:	830f00ff 	.word	0x830f00ff
60002270:	00020063 	.word	0x00020063
60002274:	5af05af0 	.word	0x5af05af0
60002278:	402a4200 	.word	0x402a4200
6000227c:	402a4300 	.word	0x402a4300
60002280:	3018049f 	.word	0x3018049f
60002284:	0a1806eb 	.word	0x0a1806eb
60002288:	0a180638 	.word	0x0a180638
6000228c:	26013206 	.word	0x26013206
60002290:	00030004 	.word	0x00030004
60002294:	70000000 	.word	0x70000000
60002298:	70000000 	.word	0x70000000
6000229c:	2001f60b 	.word	0x2001f60b
600022a0:	2001e7a0 	.word	0x2001e7a0
	FLEXSPI2_IPCR0 = addr;
600022a4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ac:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ae:	4808      	ldr	r0, [pc, #32]	; (600022d0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022b4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022bc:	6943      	ldr	r3, [r0, #20]
600022be:	07db      	lsls	r3, r3, #31
600022c0:	d5fc      	bpl.n	600022bc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c2:	2301      	movs	r3, #1
600022c4:	2510      	movs	r5, #16
600022c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600022ca:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600022cc:	e79c      	b.n	60002208 <configure_external_ram+0x2b8>
600022ce:	bf00      	nop
600022d0:	402a4000 	.word	0x402a4000

600022d4 <usb_pll_start>:
{
600022d4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022d6:	4a15      	ldr	r2, [pc, #84]	; (6000232c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022d8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600022e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600022e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600022ea:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022ee:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600022f0:	f013 0f02 	tst.w	r3, #2
600022f4:	d10e      	bne.n	60002314 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600022f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600022fa:	d00f      	beq.n	6000231c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600022fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002300:	d00e      	beq.n	60002320 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002302:	2b00      	cmp	r3, #0
60002304:	daf3      	bge.n	600022ee <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000230a:	d10b      	bne.n	60002324 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000230c:	065b      	lsls	r3, r3, #25
6000230e:	d50b      	bpl.n	60002328 <usb_pll_start+0x54>
}
60002310:	bcf0      	pop	{r4, r5, r6, r7}
60002312:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002314:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002316:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002318:	6190      	str	r0, [r2, #24]
			continue;
6000231a:	e7e8      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000231c:	6155      	str	r5, [r2, #20]
			continue;
6000231e:	e7e6      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002320:	6156      	str	r6, [r2, #20]
			continue;
60002322:	e7e4      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002324:	6191      	str	r1, [r2, #24]
			continue;
60002326:	e7e2      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002328:	6157      	str	r7, [r2, #20]
			continue;
6000232a:	e7e0      	b.n	600022ee <usb_pll_start+0x1a>
6000232c:	400d8000 	.word	0x400d8000

60002330 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002330:	4a3f      	ldr	r2, [pc, #252]	; (60002430 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002332:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002334:	493f      	ldr	r1, [pc, #252]	; (60002434 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002336:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000233a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000233e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002342:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002438 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002346:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000234a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000243c <tempmon_init+0x10c>
{
6000234e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002354:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002358:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000235c:	4d38      	ldr	r5, [pc, #224]	; (60002440 <tempmon_init+0x110>)
6000235e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002360:	4c38      	ldr	r4, [pc, #224]	; (60002444 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002362:	4839      	ldr	r0, [pc, #228]	; (60002448 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002364:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002366:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000236a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000236c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002374:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002378:	ee07 1a10 	vmov	s14, r1
6000237c:	4b33      	ldr	r3, [pc, #204]	; (6000244c <tempmon_init+0x11c>)
6000237e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002382:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002388:	4931      	ldr	r1, [pc, #196]	; (60002450 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002392:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002396:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000239a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000239e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023a2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023aa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ae:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023b6:	4827      	ldr	r0, [pc, #156]	; (60002454 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023bc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c0:	ee75 5a87 	vadd.f32	s11, s11, s14
600023c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023cc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023e0:	ee16 3a10 	vmov	r3, s12
600023e4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023ec:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600023f0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023f6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
600023fe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002402:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002404:	4914      	ldr	r1, [pc, #80]	; (60002458 <tempmon_init+0x128>)
60002406:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000240a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000240e:	f043 0302 	orr.w	r3, r3, #2
60002412:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002416:	4b11      	ldr	r3, [pc, #68]	; (6000245c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002418:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000241c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002424:	2201      	movs	r2, #1
}
60002426:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000242c:	4770      	bx	lr
6000242e:	bf00      	nop
60002430:	400d8100 	.word	0x400d8100
60002434:	401f4400 	.word	0x401f4400
60002438:	42aa0000 	.word	0x42aa0000
6000243c:	42b40000 	.word	0x42b40000
60002440:	2001f0ec 	.word	0x2001f0ec
60002444:	2001f0e8 	.word	0x2001f0e8
60002448:	2001f0f0 	.word	0x2001f0f0
6000244c:	2001f0f4 	.word	0x2001f0f4
60002450:	0fff0000 	.word	0x0fff0000
60002454:	e000e400 	.word	0xe000e400
60002458:	20009000 	.word	0x20009000
6000245c:	00007e41 	.word	0x00007e41

60002460 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002460:	4b31      	ldr	r3, [pc, #196]	; (60002528 <usb_init+0xc8>)
60002462:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002466:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000246c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002470:	f000 f8c6 	bl	60002600 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002474:	4a2d      	ldr	r2, [pc, #180]	; (6000252c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002476:	492e      	ldr	r1, [pc, #184]	; (60002530 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002478:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000247c:	482d      	ldr	r0, [pc, #180]	; (60002534 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000247e:	f043 0303 	orr.w	r3, r3, #3
60002482:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002486:	4b2c      	ldr	r3, [pc, #176]	; (60002538 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002488:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000248c:	6802      	ldr	r2, [r0, #0]
6000248e:	421a      	tst	r2, r3
60002490:	d103      	bne.n	6000249a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002492:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002496:	079a      	lsls	r2, r3, #30
60002498:	d01b      	beq.n	600024d2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000249a:	4a25      	ldr	r2, [pc, #148]	; (60002530 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000249c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024a0:	4b24      	ldr	r3, [pc, #144]	; (60002534 <usb_init+0xd4>)
600024a2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024a8:	f043 0302 	orr.w	r3, r3, #2
600024ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024b0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024b4:	079b      	lsls	r3, r3, #30
600024b6:	d4fb      	bmi.n	600024b0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024c0:	4b1c      	ldr	r3, [pc, #112]	; (60002534 <usb_init+0xd4>)
600024c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024c6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600024ca:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024cc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600024ce:	f000 f8a7 	bl	60002620 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024d2:	4a18      	ldr	r2, [pc, #96]	; (60002534 <usb_init+0xd4>)
600024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024d8:	4c15      	ldr	r4, [pc, #84]	; (60002530 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600024da:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024dc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024de:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e0:	4b16      	ldr	r3, [pc, #88]	; (6000253c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600024e2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024e8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024ec:	4618      	mov	r0, r3
600024ee:	f000 f8a3 	bl	60002638 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024f6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600024f8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600024fc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002500:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002502:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002506:	641a      	str	r2, [r3, #64]	; 0x40
60002508:	4b0d      	ldr	r3, [pc, #52]	; (60002540 <usb_init+0xe0>)
6000250a:	4a0e      	ldr	r2, [pc, #56]	; (60002544 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000250c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002514:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000251c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000251e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002526:	bd10      	pop	{r4, pc}
60002528:	400d8000 	.word	0x400d8000
6000252c:	400fc000 	.word	0x400fc000
60002530:	402e0000 	.word	0x402e0000
60002534:	400d9000 	.word	0x400d9000
60002538:	001e1c00 	.word	0x001e1c00
6000253c:	20000000 	.word	0x20000000
60002540:	20009000 	.word	0x20009000
60002544:	00008029 	.word	0x00008029

60002548 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002548:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000254a:	4b0e      	ldr	r3, [pc, #56]	; (60002584 <_reboot_Teensyduino_+0x3c>)
6000254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000254e:	079b      	lsls	r3, r3, #30
60002550:	d400      	bmi.n	60002554 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002552:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002554:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002556:	4b0c      	ldr	r3, [pc, #48]	; (60002588 <_reboot_Teensyduino_+0x40>)
60002558:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000255a:	4a0c      	ldr	r2, [pc, #48]	; (6000258c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000255c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002560:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002564:	490a      	ldr	r1, [pc, #40]	; (60002590 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002566:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000256a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000256c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000256e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002576:	4807      	ldr	r0, [pc, #28]	; (60002594 <_reboot_Teensyduino_+0x4c>)
60002578:	4a07      	ldr	r2, [pc, #28]	; (60002598 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000257c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257e:	689b      	ldr	r3, [r3, #8]
60002580:	4798      	blx	r3
	}
	__builtin_unreachable();
60002582:	bf00      	nop
60002584:	401f4400 	.word	0x401f4400
60002588:	402e0000 	.word	0x402e0000
6000258c:	400ac000 	.word	0x400ac000
60002590:	00200003 	.word	0x00200003
60002594:	20208000 	.word	0x20208000
60002598:	eb120000 	.word	0xeb120000

6000259c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000259c:	4b10      	ldr	r3, [pc, #64]	; (600025e0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000259e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025a0:	4a10      	ldr	r2, [pc, #64]	; (600025e4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025a8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025aa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ac:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025b2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025b6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025b8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025ba:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025be:	061b      	lsls	r3, r3, #24
600025c0:	d4fc      	bmi.n	600025bc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025c2:	4a09      	ldr	r2, [pc, #36]	; (600025e8 <analog_init+0x4c>)
600025c4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025c8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025ca:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025cc:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600025ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600025d4:	d1fb      	bne.n	600025ce <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600025d6:	4a05      	ldr	r2, [pc, #20]	; (600025ec <analog_init+0x50>)
600025d8:	7013      	strb	r3, [r2, #0]
}
600025da:	f85d 4b04 	ldr.w	r4, [sp], #4
600025de:	4770      	bx	lr
600025e0:	400fc000 	.word	0x400fc000
600025e4:	400c4000 	.word	0x400c4000
600025e8:	400c8000 	.word	0x400c8000
600025ec:	2001f60a 	.word	0x2001f60a

600025f0 <_init>:
600025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600025f2:	bf00      	nop
600025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
600025f6:	bc08      	pop	{r3}
600025f8:	469e      	mov	lr, r3
600025fa:	4770      	bx	lr
600025fc:	0000      	movs	r0, r0
	...

60002600 <__usb_init_serialnumber_veneer>:
60002600:	f85f f000 	ldr.w	pc, [pc]	; 60002604 <__usb_init_serialnumber_veneer+0x4>
60002604:	00008799 	.word	0x00008799

60002608 <__sm_set_pool_veneer>:
60002608:	f85f f000 	ldr.w	pc, [pc]	; 6000260c <__sm_set_pool_veneer+0x4>
6000260c:	000091f9 	.word	0x000091f9

60002610 <____libc_init_array_veneer>:
60002610:	f85f f000 	ldr.w	pc, [pc]	; 60002614 <____libc_init_array_veneer+0x4>
60002614:	0000b66d 	.word	0x0000b66d

60002618 <___ZN5Print10printFloatEdh_veneer>:
60002618:	f85f f000 	ldr.w	pc, [pc]	; 6000261c <___ZN5Print10printFloatEdh_veneer+0x4>
6000261c:	000073a9 	.word	0x000073a9

60002620 <__delay_veneer>:
60002620:	f85f f000 	ldr.w	pc, [pc]	; 60002624 <__delay_veneer+0x4>
60002624:	0000788d 	.word	0x0000788d

60002628 <__main_veneer>:
60002628:	f85f f000 	ldr.w	pc, [pc]	; 6000262c <__main_veneer+0x4>
6000262c:	00007a4d 	.word	0x00007a4d

60002630 <__set_arm_clock_veneer>:
60002630:	f85f f000 	ldr.w	pc, [pc]	; 60002634 <__set_arm_clock_veneer+0x4>
60002634:	0000759d 	.word	0x0000759d

60002638 <__memset_veneer>:
60002638:	f85f f000 	ldr.w	pc, [pc]	; 6000263c <__memset_veneer+0x4>
6000263c:	0000b3f5 	.word	0x0000b3f5

60002640 <__pwm_init_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <__pwm_init_veneer+0x4>
60002644:	000090b5 	.word	0x000090b5

60002648 <___ZN5Print11printNumberEmhh_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000264c:	0000737d 	.word	0x0000737d

60002650 <___ZN5Print5printEl_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <___ZN5Print5printEl_veneer+0x4>
60002654:	00007311 	.word	0x00007311

60002658 <___ZN5Print7printlnEv_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <___ZN5Print7printlnEv_veneer+0x4>
6000265c:	00007329 	.word	0x00007329

60002660 <__frame_dummy_init_array_entry>:
60002660:	00000045 000007ad 00001109 00006e3d     E...........=n..
60002670:	00007071                                qp..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	200092c0 	.word	0x200092c0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	200092c0 	.word	0x200092c0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	2001f02c 	.word	0x2001f02c
      64:	60020800 	.word	0x60020800

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	4c7c      	ldr	r4, [pc, #496]	; (260 <loop+0x1f8>)
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
    *--str = 'U';
      6e:	b08b      	sub	sp, #44	; 0x2c
    *--str = 'C';
      70:	4d7c      	ldr	r5, [pc, #496]	; (264 <loop+0x1fc>)
    *--str = 'T';
      72:	6823      	ldr	r3, [r4, #0]
    *--str = 'U';
      74:	3301      	adds	r3, #1
    *--str = 'C';
      76:	6023      	str	r3, [r4, #0]
    *--str = 'T';
      78:	f001 f88c 	bl	1194 <getDataCount()>
  }
  return str;
}
      7c:	882b      	ldrh	r3, [r5, #0]
    *--str = '0';
      7e:	4283      	cmp	r3, r0
      80:	bf38      	it	cc
      82:	8028      	strhcc	r0, [r5, #0]
      84:	f008 fe78 	bl	8d78 <usb_serial_available>
      sign = '+';
      88:	b980      	cbnz	r0, ac <loop+0x44>
}
      8a:	4f77      	ldr	r7, [pc, #476]	; (268 <loop+0x200>)
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
      8c:	8838      	ldrh	r0, [r7, #0]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	4e77      	ldr	r6, [pc, #476]	; (26c <loop+0x204>)
      90:	b200      	sxth	r0, r0
      92:	f000 ffe1 	bl	1058 <saveData(short)>
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      96:	4b76      	ldr	r3, [pc, #472]	; (270 <loop+0x208>)
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      98:	8038      	strh	r0, [r7, #0]
      9a:	681f      	ldr	r7, [r3, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      9c:	6833      	ldr	r3, [r6, #0]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      9e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    }
    return str;

   fail:
    return nullptr;
      a2:	42bb      	cmp	r3, r7
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
      a4:	d30d      	bcc.n	c2 <loop+0x5a>
      a6:	b00b      	add	sp, #44	; 0x2c
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
		txBufferLength = 1;
      a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		txBuffer[0] = (address << 1);
      ac:	f008 fea8 	bl	8e00 <usb_serial_getchar>
}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
      b0:	b2c0      	uxtb	r0, r0
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b2:	2873      	cmp	r0, #115	; 0x73
      b4:	d028      	beq.n	108 <loop+0xa0>
      b6:	2865      	cmp	r0, #101	; 0x65
      b8:	d11d      	bne.n	f6 <loop+0x8e>
      ba:	4f6b      	ldr	r7, [pc, #428]	; (268 <loop+0x200>)
  return str - name;

 fail:
  *name = 0;
  return 0;
}
      bc:	2304      	movs	r3, #4
      be:	803b      	strh	r3, [r7, #0]
      c0:	e7e4      	b.n	8c <loop+0x24>
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	a808      	add	r0, sp, #32
      c4:	f001 fa1c 	bl	1500 <rtc_get_datetime(datetime_t*)>
      c8:	4b6a      	ldr	r3, [pc, #424]	; (274 <loop+0x20c>)
      ca:	f9b3 3000 	ldrsh.w	r3, [r3]
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      ce:	b9fb      	cbnz	r3, 110 <loop+0xa8>
}
      d0:	4b69      	ldr	r3, [pc, #420]	; (278 <loop+0x210>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2b8 <loop+0x250>
      d6:	9306      	str	r3, [sp, #24]
      d8:	4b68      	ldr	r3, [pc, #416]	; (27c <loop+0x214>)
      da:	9307      	str	r3, [sp, #28]
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	2300      	movs	r3, #0
      de:	9a06      	ldr	r2, [sp, #24]
      e0:	6037      	str	r7, [r6, #0]
    return 0; // zero returned if timeout
      e2:	6013      	str	r3, [r2, #0]
      e4:	9a07      	ldr	r2, [sp, #28]
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	6023      	str	r3, [r4, #0]
      e8:	f8cb 3000 	str.w	r3, [fp]
      ec:	802b      	strh	r3, [r5, #0]
      ee:	6013      	str	r3, [r2, #0]
      f0:	b00b      	add	sp, #44	; 0x2c
      f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      f6:	286d      	cmp	r0, #109	; 0x6d
      f8:	d17f      	bne.n	1fa <loop+0x192>
      fa:	4a5e      	ldr	r2, [pc, #376]	; (274 <loop+0x20c>)
      fc:	4f5a      	ldr	r7, [pc, #360]	; (268 <loop+0x200>)
      fe:	8813      	ldrh	r3, [r2, #0]
     100:	f1c3 0301 	rsb	r3, r3, #1
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	8013      	strh	r3, [r2, #0]
     106:	e7c1      	b.n	8c <loop+0x24>
    return m_blockDev->syncDevice();
     108:	4f57      	ldr	r7, [pc, #348]	; (268 <loop+0x200>)
     10a:	2300      	movs	r3, #0
     10c:	803b      	strh	r3, [r7, #0]
     10e:	e7bd      	b.n	8c <loop+0x24>
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     114:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     118:	9304      	str	r3, [sp, #16]
     11a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	4958      	ldr	r1, [pc, #352]	; (280 <loop+0x218>)
     120:	9303      	str	r3, [sp, #12]
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     126:	4857      	ldr	r0, [pc, #348]	; (284 <loop+0x21c>)
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	9302      	str	r3, [sp, #8]
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12e:	f8df b188 	ldr.w	fp, [pc, #392]	; 2b8 <loop+0x250>
     132:	9301      	str	r3, [sp, #4]
	if (!wait_idle()) return 4;
     134:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
	return rxBufferLength;
}
     138:	9300      	str	r3, [sp, #0]
     13a:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     13e:	f007 f90f 	bl	7360 <Print::printf(char const*, ...)>
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     142:	2103      	movs	r1, #3
     144:	4850      	ldr	r0, [pc, #320]	; (288 <loop+0x220>)
     146:	f008 fe81 	bl	8e4c <usb_serial_write>
     14a:	2300      	movs	r3, #0
     14c:	220a      	movs	r2, #10
     14e:	6821      	ldr	r1, [r4, #0]
     150:	484c      	ldr	r0, [pc, #304]	; (284 <loop+0x21c>)
     152:	f007 f913 	bl	737c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     156:	2101      	movs	r1, #1
     158:	484c      	ldr	r0, [pc, #304]	; (28c <loop+0x224>)
     15a:	f008 fe77 	bl	8e4c <usb_serial_write>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	4b46      	ldr	r3, [pc, #280]	; (278 <loop+0x210>)
     160:	220a      	movs	r2, #10
     162:	f8db 1000 	ldr.w	r1, [fp]
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     166:	9306      	str	r3, [sp, #24]
          df->modifyTimeMs = ms10;
     168:	2300      	movs	r3, #0
     16a:	4846      	ldr	r0, [pc, #280]	; (284 <loop+0x21c>)
     16c:	f007 f906 	bl	737c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	2101      	movs	r1, #1
     172:	4846      	ldr	r0, [pc, #280]	; (28c <loop+0x224>)
}
     174:	f008 fe6a 	bl	8e4c <usb_serial_write>
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     178:	9906      	ldr	r1, [sp, #24]
     17a:	2300      	movs	r3, #0
     17c:	220a      	movs	r2, #10
     17e:	6809      	ldr	r1, [r1, #0]
     180:	4840      	ldr	r0, [pc, #256]	; (284 <loop+0x21c>)
     182:	f007 f8fb 	bl	737c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}
     186:	2101      	movs	r1, #1
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     188:	4840      	ldr	r0, [pc, #256]	; (28c <loop+0x224>)
     18a:	f008 fe5f 	bl	8e4c <usb_serial_write>
    writeMsg("Bad cluster count\r\n");
     18e:	882a      	ldrh	r2, [r5, #0]
     190:	493f      	ldr	r1, [pc, #252]	; (290 <loop+0x228>)
     192:	483c      	ldr	r0, [pc, #240]	; (284 <loop+0x21c>)
     194:	f007 f8e4 	bl	7360 <Print::printf(char const*, ...)>
     198:	2102      	movs	r1, #2
     19a:	483e      	ldr	r0, [pc, #248]	; (294 <loop+0x22c>)
     19c:	f008 fe56 	bl	8e4c <usb_serial_write>
}
     1a0:	4b3d      	ldr	r3, [pc, #244]	; (298 <loop+0x230>)
     1a2:	493e      	ldr	r1, [pc, #248]	; (29c <loop+0x234>)
     1a4:	681a      	ldr	r2, [r3, #0]
     1a6:	4837      	ldr	r0, [pc, #220]	; (284 <loop+0x21c>)
     1a8:	f007 f8da 	bl	7360 <Print::printf(char const*, ...)>
     1ac:	4b33      	ldr	r3, [pc, #204]	; (27c <loop+0x214>)
     1ae:	2101      	movs	r1, #1
     1b0:	4836      	ldr	r0, [pc, #216]	; (28c <loop+0x224>)
     1b2:	9307      	str	r3, [sp, #28]
     1b4:	f008 fe4a 	bl	8e4c <usb_serial_write>
     1b8:	9907      	ldr	r1, [sp, #28]
     1ba:	2300      	movs	r3, #0
     1bc:	220a      	movs	r2, #10
     1be:	4831      	ldr	r0, [pc, #196]	; (284 <loop+0x21c>)
     1c0:	6809      	ldr	r1, [r1, #0]
     1c2:	f007 f8db 	bl	737c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
     1c6:	2104      	movs	r1, #4
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
     1c8:	4835      	ldr	r0, [pc, #212]	; (2a0 <loop+0x238>)
     1ca:	f008 fe3f 	bl	8e4c <usb_serial_write>
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1ce:	4b35      	ldr	r3, [pc, #212]	; (2a4 <loop+0x23c>)
    return m_blockDev->syncDevice();
     1d0:	f9b3 3000 	ldrsh.w	r3, [r3]
     1d4:	bb23      	cbnz	r3, 220 <loop+0x1b8>
     1d6:	4699      	mov	r9, r3
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1d8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2bc <loop+0x254>
     1dc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 284 <loop+0x21c>
     1e0:	4b31      	ldr	r3, [pc, #196]	; (2a8 <loop+0x240>)
     1e2:	4651      	mov	r1, sl
     1e4:	4640      	mov	r0, r8
     1e6:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ea:	f109 0901 	add.w	r9, r9, #1
     1ee:	f007 f8b7 	bl	7360 <Print::printf(char const*, ...)>
     1f2:	f1b9 0f08 	cmp.w	r9, #8
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
     1f6:	d1f3      	bne.n	1e0 <loop+0x178>
     1f8:	e770      	b.n	dc <loop+0x74>

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fa:	283a      	cmp	r0, #58	; 0x3a
     1fc:	d103      	bne.n	206 <loop+0x19e>
			if (d > 2) {
     1fe:	4f1a      	ldr	r7, [pc, #104]	; (268 <loop+0x200>)
     200:	f001 fa16 	bl	1630 <menu1()>
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	e742      	b.n	8c <loop+0x24>
     206:	283f      	cmp	r0, #63	; 0x3f
     208:	d103      	bne.n	212 <loop+0x1aa>
     20a:	4f17      	ldr	r7, [pc, #92]	; (268 <loop+0x200>)
     20c:	f001 fa1a 	bl	1644 <menu2()>
     210:	e73c      	b.n	8c <loop+0x24>
     212:	2821      	cmp	r0, #33	; 0x21
     214:	4f14      	ldr	r7, [pc, #80]	; (268 <loop+0x200>)
     216:	f47f af39 	bne.w	8c <loop+0x24>
     21a:	f001 fabd 	bl	1798 <menu3()>
     21e:	e735      	b.n	8c <loop+0x24>
     220:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2c0 <loop+0x258>
     224:	4921      	ldr	r1, [pc, #132]	; (2ac <loop+0x244>)
     226:	f8df 905c 	ldr.w	r9, [pc, #92]	; 284 <loop+0x21c>
     22a:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     22e:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     232:	4648      	mov	r0, r9
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     234:	f007 f894 	bl	7360 <Print::printf(char const*, ...)>
     238:	491c      	ldr	r1, [pc, #112]	; (2ac <loop+0x244>)
     23a:	45d0      	cmp	r8, sl
     23c:	d1f7      	bne.n	22e <loop+0x1c6>
        Serial.printf("%2d",max_stat);
     23e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2c4 <loop+0x25c>
     242:	491b      	ldr	r1, [pc, #108]	; (2b0 <loop+0x248>)
     244:	f8d8 2000 	ldr.w	r2, [r8]
     248:	480e      	ldr	r0, [pc, #56]	; (284 <loop+0x21c>)
     24a:	f007 f889 	bl	7360 <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     24e:	2260      	movs	r2, #96	; 0x60
     250:	2100      	movs	r1, #0
     252:	4818      	ldr	r0, [pc, #96]	; (2b4 <loop+0x24c>)
     254:	f00b f8ce 	bl	b3f4 <memset>
        max_stat=0;        
     258:	2300      	movs	r3, #0
     25a:	f8c8 3000 	str.w	r3, [r8]
     25e:	e73d      	b.n	dc <loop+0x74>
     260:	2001e264 	.word	0x2001e264
     264:	2001f5f4 	.word	0x2001f5f4
     268:	2001f5f6 	.word	0x2001f5f6
     26c:	2001e260 	.word	0x2001e260
     270:	2001f5cc 	.word	0x2001f5cc
     274:	2001f5f8 	.word	0x2001f5f8
     278:	2001f048 	.word	0x2001f048
     27c:	2001e788 	.word	0x2001e788
     280:	20007bcc 	.word	0x20007bcc
     284:	20008754 	.word	0x20008754
     288:	20007bf0 	.word	0x20007bf0
     28c:	20008534 	.word	0x20008534
     290:	20007bf4 	.word	0x20007bf4
     294:	20007bf8 	.word	0x20007bf8
     298:	2001e780 	.word	0x2001e780
     29c:	20007bfc 	.word	0x20007bfc
     2a0:	20007c00 	.word	0x20007c00
     2a4:	20008d72 	.word	0x20008d72
     2a8:	2001f008 	.word	0x2001f008
     2ac:	20007c10 	.word	0x20007c10
     2b0:	20007c18 	.word	0x20007c18
     2b4:	2001f04c 	.word	0x2001f04c
     2b8:	2001f044 	.word	0x2001f044
     2bc:	20007c08 	.word	0x20007c08
     2c0:	2001f048 	.word	0x2001f048
     2c4:	2001f028 	.word	0x2001f028

000002c8 <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2c8:	b510      	push	{r4, lr}
     2ca:	4c0b      	ldr	r4, [pc, #44]	; (2f8 <setup1()+0x30>)
     2cc:	6823      	ldr	r3, [r4, #0]
     2ce:	b92b      	cbnz	r3, 2dc <setup1()+0x14>
     2d0:	2001      	movs	r0, #1
     2d2:	f007 fadb 	bl	788c <delay>
     2d6:	6823      	ldr	r3, [r4, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d0f9      	beq.n	2d0 <setup1()+0x8>
  i2s_setup();
     2dc:	f000 f9ba 	bl	654 <i2s_setup()>
  dma_setup();
     2e0:	f000 f9fe 	bl	6e0 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2e4:	210b      	movs	r1, #11
     2e6:	4805      	ldr	r0, [pc, #20]	; (2fc <setup1()+0x34>)
     2e8:	f008 fdb0 	bl	8e4c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     2ec:	4804      	ldr	r0, [pc, #16]	; (300 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2f2:	f007 b819 	b.w	7328 <Print::println()>
     2f6:	bf00      	nop
     2f8:	2001f0ac 	.word	0x2001f0ac
     2fc:	200004c4 	.word	0x200004c4
     300:	20008754 	.word	0x20008754

00000304 <setup>:
{
     304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     308:	4d49      	ldr	r5, [pc, #292]	; (430 <setup+0x12c>)
     30a:	b087      	sub	sp, #28
     30c:	4c49      	ldr	r4, [pc, #292]	; (434 <setup+0x130>)
				if (elapsed > 750) break;
     30e:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     312:	4f49      	ldr	r7, [pc, #292]	; (438 <setup+0x134>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     314:	f8df 9144 	ldr.w	r9, [pc, #324]	; 45c <setup+0x158>
		uint32_t millis_begin = systick_millis_count;
     318:	682e      	ldr	r6, [r5, #0]
		yield();
     31a:	f008 fe15 	bl	8f48 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     31e:	7823      	ldrb	r3, [r4, #0]
     320:	2b00      	cmp	r3, #0
     322:	d062      	beq.n	3ea <setup+0xe6>
     324:	783b      	ldrb	r3, [r7, #0]
     326:	07da      	lsls	r2, r3, #31
     328:	d55f      	bpl.n	3ea <setup+0xe6>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     32a:	682b      	ldr	r3, [r5, #0]
     32c:	f8d9 2000 	ldr.w	r2, [r9]
     330:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     332:	2b0e      	cmp	r3, #14
     334:	d959      	bls.n	3ea <setup+0xe6>
     336:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) break;
     338:	f242 760f 	movw	r6, #9999	; 0x270f
     33c:	42b3      	cmp	r3, r6
     33e:	d810      	bhi.n	362 <setup+0x5e>
     340:	4f3d      	ldr	r7, [pc, #244]	; (438 <setup+0x134>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     342:	f8df 8118 	ldr.w	r8, [pc, #280]	; 45c <setup+0x158>
		yield();
     346:	f008 fdff 	bl	8f48 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     34a:	7823      	ldrb	r3, [r4, #0]
     34c:	2b00      	cmp	r3, #0
     34e:	d056      	beq.n	3fe <setup+0xfa>
     350:	783b      	ldrb	r3, [r7, #0]
     352:	07db      	lsls	r3, r3, #31
     354:	d553      	bpl.n	3fe <setup+0xfa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     356:	682b      	ldr	r3, [r5, #0]
     358:	f8d8 2000 	ldr.w	r2, [r8]
     35c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     35e:	2b0e      	cmp	r3, #14
     360:	d94d      	bls.n	3fe <setup+0xfa>
    if(CrashReport) Serial.print(CrashReport);
     362:	4836      	ldr	r0, [pc, #216]	; (43c <setup+0x138>)
     364:	f013 fd70 	bl	13e48 <___ZN16CrashReportClasscvbEv_veneer>
     368:	2800      	cmp	r0, #0
     36a:	d150      	bne.n	40e <setup+0x10a>
  rtc_setup();
     36c:	2113      	movs	r1, #19
     36e:	2012      	movs	r0, #18
     370:	f001 f8c4 	bl	14fc <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     374:	2110      	movs	r1, #16
     376:	4832      	ldr	r0, [pc, #200]	; (440 <setup+0x13c>)
     378:	f008 fd68 	bl	8e4c <usb_serial_write>
     37c:	4831      	ldr	r0, [pc, #196]	; (444 <setup+0x140>)
     37e:	f006 ffd3 	bl	7328 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     382:	a804      	add	r0, sp, #16
     384:	f001 f8bc 	bl	1500 <rtc_get_datetime(datetime_t*)>
     388:	2800      	cmp	r0, #0
     38a:	d048      	beq.n	41e <setup+0x11a>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     38c:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     390:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     394:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     398:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     39c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3a4:	e9cd 0400 	strd	r0, r4, [sp]
     3a8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     3ac:	4926      	ldr	r1, [pc, #152]	; (448 <setup+0x144>)
     3ae:	4825      	ldr	r0, [pc, #148]	; (444 <setup+0x140>)
     3b0:	f006 ffd6 	bl	7360 <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3b4:	4823      	ldr	r0, [pc, #140]	; (444 <setup+0x140>)
     3b6:	f006 ffb7 	bl	7328 <Print::println()>
     3ba:	210b      	movs	r1, #11
     3bc:	4823      	ldr	r0, [pc, #140]	; (44c <setup+0x148>)
     3be:	f008 fd45 	bl	8e4c <usb_serial_write>
     3c2:	4820      	ldr	r0, [pc, #128]	; (444 <setup+0x140>)
     3c4:	f006 ffb0 	bl	7328 <Print::println()>
  filing_init();
     3c8:	f000 fc00 	bl	bcc <filing_init()>
     3cc:	210a      	movs	r1, #10
     3ce:	4820      	ldr	r0, [pc, #128]	; (450 <setup+0x14c>)
     3d0:	f008 fd3c 	bl	8e4c <usb_serial_write>
     3d4:	481b      	ldr	r0, [pc, #108]	; (444 <setup+0x140>)
     3d6:	f006 ffa7 	bl	7328 <Print::println()>
  ready=1;
     3da:	4b1e      	ldr	r3, [pc, #120]	; (454 <setup+0x150>)
     3dc:	2201      	movs	r2, #1
     3de:	601a      	str	r2, [r3, #0]
    setup1();
     3e0:	f7ff ff72 	bl	2c8 <setup1()>
}
     3e4:	b007      	add	sp, #28
     3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     3ea:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     3ec:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     3ee:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     3f0:	b192      	cbz	r2, 418 <setup+0x114>
				if (elapsed > 2000) break;
     3f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     3f6:	d89e      	bhi.n	336 <setup+0x32>
			yield();
     3f8:	f008 fda6 	bl	8f48 <yield>
     3fc:	e78d      	b.n	31a <setup+0x16>
     3fe:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) break;
     400:	42b3      	cmp	r3, r6
     402:	d9a0      	bls.n	346 <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     404:	480d      	ldr	r0, [pc, #52]	; (43c <setup+0x138>)
     406:	f013 fd1f 	bl	13e48 <___ZN16CrashReportClasscvbEv_veneer>
     40a:	2800      	cmp	r0, #0
     40c:	d0ae      	beq.n	36c <setup+0x68>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     40e:	490d      	ldr	r1, [pc, #52]	; (444 <setup+0x140>)
     410:	480a      	ldr	r0, [pc, #40]	; (43c <setup+0x138>)
     412:	f013 fd1d 	bl	13e50 <___ZNK16CrashReportClass7printToER5Print_veneer>
     416:	e7a9      	b.n	36c <setup+0x68>
				if (elapsed > 750) break;
     418:	4543      	cmp	r3, r8
     41a:	d9ed      	bls.n	3f8 <setup+0xf4>
     41c:	e78b      	b.n	336 <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     41e:	2114      	movs	r1, #20
     420:	480d      	ldr	r0, [pc, #52]	; (458 <setup+0x154>)
     422:	f008 fd13 	bl	8e4c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     426:	4807      	ldr	r0, [pc, #28]	; (444 <setup+0x140>)
     428:	f006 ff7e 	bl	7328 <Print::println()>
     42c:	e7ae      	b.n	38c <setup+0x88>
     42e:	bf00      	nop
     430:	2001f5cc 	.word	0x2001f5cc
     434:	2001f613 	.word	0x2001f613
     438:	2001f612 	.word	0x2001f612
     43c:	20008748 	.word	0x20008748
     440:	20007c28 	.word	0x20007c28
     444:	20008754 	.word	0x20008754
     448:	20007c54 	.word	0x20007c54
     44c:	20007c7c 	.word	0x20007c7c
     450:	20007c88 	.word	0x20007c88
     454:	2001f0ac 	.word	0x2001f0ac
     458:	20007c3c 	.word	0x20007c3c
     45c:	2001f5e8 	.word	0x2001f5e8

00000460 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     460:	4a2a      	ldr	r2, [pc, #168]	; (50c <acq_isr()+0xac>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     462:	4b2b      	ldr	r3, [pc, #172]	; (510 <acq_isr()+0xb0>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     464:	6810      	ldr	r0, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     466:	492b      	ldr	r1, [pc, #172]	; (514 <acq_isr()+0xb4>)
     468:	6900      	ldr	r0, [r0, #16]
  {
     46a:	b510      	push	{r4, lr}
     46c:	7912      	ldrb	r2, [r2, #4]
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
    }

    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     46e:	4c2a      	ldr	r4, [pc, #168]	; (518 <acq_isr()+0xb8>)
     470:	77ca      	strb	r2, [r1, #31]
      src = (int32_t *)&i2s_buffer[0];
     472:	f5a3 6180 	sub.w	r1, r3, #1024	; 0x400
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     476:	f9b4 4000 	ldrsh.w	r4, [r4]
     47a:	2200      	movs	r2, #0
      src = (int32_t *)&i2s_buffer[0];
     47c:	4298      	cmp	r0, r3
     47e:	bf38      	it	cc
     480:	4619      	movcc	r1, r3
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     482:	4826      	ldr	r0, [pc, #152]	; (51c <acq_isr()+0xbc>)
     484:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
     488:	4403      	add	r3, r0
     48a:	4123      	asrs	r3, r4
     48c:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
     490:	3201      	adds	r2, #1
     492:	2a80      	cmp	r2, #128	; 0x80
     494:	d1f6      	bne.n	484 <acq_isr()+0x24>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     496:	4c22      	ldr	r4, [pc, #136]	; (520 <acq_isr()+0xc0>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     498:	2300      	movs	r3, #0
     49a:	4a22      	ldr	r2, [pc, #136]	; (524 <acq_isr()+0xc4>)
{ procCount++;
     49c:	6820      	ldr	r0, [r4, #0]
     49e:	3001      	adds	r0, #1
     4a0:	6020      	str	r0, [r4, #0]
     4a2:	4610      	mov	r0, r2
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     4a4:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
     4a8:	3301      	adds	r3, #1
     4aa:	2b80      	cmp	r3, #128	; 0x80
     4ac:	f840 4f04 	str.w	r4, [r0, #4]!
     4b0:	d1f8      	bne.n	4a4 <acq_isr()+0x44>
     4b2:	4b1d      	ldr	r3, [pc, #116]	; (528 <acq_isr()+0xc8>)
  
  float tmp=0.0f;
     4b4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 52c <acq_isr()+0xcc>
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
     4b8:	edd2 7a01 	vldr	s15, [r2, #4]
     4bc:	3204      	adds	r2, #4
     4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     4c2:	4293      	cmp	r3, r2
     4c4:	ee37 7a27 	vadd.f32	s14, s14, s15
     4c8:	d1f6      	bne.n	4b8 <acq_isr()+0x58>
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     4ca:	eddf 7a19 	vldr	s15, [pc, #100]	; 530 <acq_isr()+0xd0>

  if(proc==0)
     4ce:	4b19      	ldr	r3, [pc, #100]	; (534 <acq_isr()+0xd4>)
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     4d0:	ee27 7a27 	vmul.f32	s14, s14, s15
     4d4:	4a18      	ldr	r2, [pc, #96]	; (538 <acq_isr()+0xd8>)
  if(proc==0)
     4d6:	f9b3 3000 	ldrsh.w	r3, [r3]
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     4da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
     4de:	ed82 7a00 	vstr	s14, [r2]
  if(proc==0)
     4e2:	b113      	cbz	r3, 4ea <acq_isr()+0x8a>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     4e4:	2b01      	cmp	r3, #1
     4e6:	d00a      	beq.n	4fe <acq_isr()+0x9e>
  }
     4e8:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     4ea:	4814      	ldr	r0, [pc, #80]	; (53c <acq_isr()+0xdc>)
     4ec:	f000 fe60 	bl	11b0 <pushData(unsigned long*)>
     4f0:	2800      	cmp	r0, #0
     4f2:	d1f9      	bne.n	4e8 <acq_isr()+0x88>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     4f4:	4a12      	ldr	r2, [pc, #72]	; (540 <acq_isr()+0xe0>)
     4f6:	6813      	ldr	r3, [r2, #0]
     4f8:	3301      	adds	r3, #1
     4fa:	6013      	str	r3, [r2, #0]
  }
     4fc:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     4fe:	480f      	ldr	r0, [pc, #60]	; (53c <acq_isr()+0xdc>)
     500:	f000 f966 	bl	7d0 <compress(void*)>
     504:	2800      	cmp	r0, #0
     506:	d1ef      	bne.n	4e8 <acq_isr()+0x88>
     508:	e7f4      	b.n	4f4 <acq_isr()+0x94>
     50a:	bf00      	nop
     50c:	2001db44 	.word	0x2001db44
     510:	2001ec08 	.word	0x2001ec08
     514:	400e8000 	.word	0x400e8000
     518:	20008d74 	.word	0x20008d74
     51c:	06978000 	.word	0x06978000
     520:	2001f044 	.word	0x2001f044
     524:	2001e57c 	.word	0x2001e57c
     528:	2001e77c 	.word	0x2001e77c
     52c:	00000000 	.word	0x00000000
     530:	3c000000 	.word	0x3c000000
     534:	20008d72 	.word	0x20008d72
     538:	2001e780 	.word	0x2001e780
     53c:	2001e580 	.word	0x2001e580
     540:	2001f048 	.word	0x2001f048

00000544 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     544:	b510      	push	{r4, lr}
     546:	4604      	mov	r4, r0
		release();
     548:	f006 fe0e 	bl	7168 <DMAChannel::release()>
	}
     54c:	4620      	mov	r0, r4
     54e:	bd10      	pop	{r4, pc}

00000550 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     550:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     554:	4938      	ldr	r1, [pc, #224]	; (638 <setAudioFrequency(int)+0xe8>)
     556:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     558:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     55c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     560:	4b36      	ldr	r3, [pc, #216]	; (63c <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     562:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 620 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     566:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     56a:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     56e:	1c4a      	adds	r2, r1, #1
     570:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     574:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     578:	ee27 7b03 	vmul.f64	d7, d7, d3
     57c:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 628 <setAudioFrequency(int)+0xd8>
  {
     580:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     582:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     586:	f242 7410 	movw	r4, #10000	; 0x2710
     58a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 630 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     58e:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     592:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     596:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     59a:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     59e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     5a2:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     5a6:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     5aa:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     5ae:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     5b0:	ee96 7b05 	vfnms.f64	d7, d6, d5
     5b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     5b8:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     5bc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     5c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     5c4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     5c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     5ce:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     5d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5d2:	2a00      	cmp	r2, #0
     5d4:	dafc      	bge.n	5d0 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5d6:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     5da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5de:	4a18      	ldr	r2, [pc, #96]	; (640 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5e0:	4818      	ldr	r0, [pc, #96]	; (644 <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5e2:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     5e4:	4c18      	ldr	r4, [pc, #96]	; (648 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5e6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     5ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     5f0:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5f2:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     5f4:	4b15      	ldr	r3, [pc, #84]	; (64c <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     5fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5fe:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     600:	6a82      	ldr	r2, [r0, #40]	; 0x28
     602:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     604:	4a12      	ldr	r2, [pc, #72]	; (650 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     606:	430b      	orrs	r3, r1
     608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     60c:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     60e:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     610:	401a      	ands	r2, r3
     612:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     616:	6062      	str	r2, [r4, #4]
  }
     618:	f85d 4b04 	ldr.w	r4, [sp], #4
     61c:	4770      	bx	lr
     61e:	bf00      	nop
     620:	00000000 	.word	0x00000000
     624:	40700000 	.word	0x40700000
     628:	00000000 	.word	0x00000000
     62c:	4176e360 	.word	0x4176e360
     630:	00000000 	.word	0x00000000
     634:	40c38800 	.word	0x40c38800
     638:	269fb200 	.word	0x269fb200
     63c:	400d8000 	.word	0x400d8000
     640:	ff7f7fff 	.word	0xff7f7fff
     644:	400fc000 	.word	0x400fc000
     648:	400ac000 	.word	0x400ac000
     64c:	fffffe00 	.word	0xfffffe00
     650:	fff7fff8 	.word	0xfff7fff8

00000654 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     654:	4a19      	ldr	r2, [pc, #100]	; (6bc <i2s_setup()+0x68>)
     656:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     658:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     65a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     65e:	4c18      	ldr	r4, [pc, #96]	; (6c0 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     660:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     662:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     666:	2b00      	cmp	r3, #0
     668:	db27      	blt.n	6ba <i2s_setup()+0x66>
    int fs = fsamp;
     66a:	4b16      	ldr	r3, [pc, #88]	; (6c4 <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     66c:	6818      	ldr	r0, [r3, #0]
     66e:	f7ff ff6f 	bl	550 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     672:	4b15      	ldr	r3, [pc, #84]	; (6c8 <i2s_setup()+0x74>)
     674:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     676:	4915      	ldr	r1, [pc, #84]	; (6cc <i2s_setup()+0x78>)
     678:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     67a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     67e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     682:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     686:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     68a:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     68c:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     694:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     696:	480e      	ldr	r0, [pc, #56]	; (6d0 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     698:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     69c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     6a0:	490c      	ldr	r1, [pc, #48]	; (6d4 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6a2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     6a6:	4a0c      	ldr	r2, [pc, #48]	; (6d8 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     6a8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     6ac:	4b0b      	ldr	r3, [pc, #44]	; (6dc <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     6ae:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     6b2:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     6b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     6ba:	bd10      	pop	{r4, pc}
     6bc:	400fc000 	.word	0x400fc000
     6c0:	40384000 	.word	0x40384000
     6c4:	20008d10 	.word	0x20008d10
     6c8:	401f8000 	.word	0x401f8000
     6cc:	401f8400 	.word	0x401f8400
     6d0:	07000001 	.word	0x07000001
     6d4:	00011f1b 	.word	0x00011f1b
     6d8:	1f1f1f00 	.word	0x1f1f1f00
     6dc:	92000001 	.word	0x92000001

000006e0 <dma_setup()>:
  {
     6e0:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     6e2:	4c1c      	ldr	r4, [pc, #112]	; (754 <dma_setup()+0x74>)
     6e4:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     6e6:	4d1c      	ldr	r5, [pc, #112]	; (758 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     6e8:	4620      	mov	r0, r4
     6ea:	f006 fce3 	bl	70b4 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     6ee:	6823      	ldr	r3, [r4, #0]
     6f0:	481a      	ldr	r0, [pc, #104]	; (75c <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     6f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     6f6:	491a      	ldr	r1, [pc, #104]	; (760 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     6f8:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     6fa:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     6fc:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     6fe:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     700:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     702:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     704:	4d17      	ldr	r5, [pc, #92]	; (764 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     706:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     708:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     70a:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     70c:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     70e:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     710:	2204      	movs	r2, #4
     712:	4915      	ldr	r1, [pc, #84]	; (768 <dma_setup()+0x88>)
     714:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     716:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     718:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     71a:	4d14      	ldr	r5, [pc, #80]	; (76c <dma_setup()+0x8c>)
     71c:	60da      	str	r2, [r3, #12]
		*mux = 0;
     71e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     722:	4b13      	ldr	r3, [pc, #76]	; (770 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     724:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     728:	2101      	movs	r1, #1
     72a:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     72c:	4811      	ldr	r0, [pc, #68]	; (774 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     72e:	f002 051f 	and.w	r5, r2, #31
     732:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     736:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     73a:	40a9      	lsls	r1, r5
     73c:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     73e:	4d0e      	ldr	r5, [pc, #56]	; (778 <dma_setup()+0x98>)
     740:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     744:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     746:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     748:	490c      	ldr	r1, [pc, #48]	; (77c <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     74a:	4b0d      	ldr	r3, [pc, #52]	; (780 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     74c:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     74e:	7922      	ldrb	r2, [r4, #4]
     750:	76da      	strb	r2, [r3, #27]
  }
     752:	bd38      	pop	{r3, r4, r5, pc}
     754:	2001db44 	.word	0x2001db44
     758:	02020000 	.word	0x02020000
     75c:	403840a0 	.word	0x403840a0
     760:	2001e808 	.word	0x2001e808
     764:	fffff800 	.word	0xfffff800
     768:	400ec000 	.word	0x400ec000
     76c:	80000013 	.word	0x80000013
     770:	38003840 	.word	0x38003840
     774:	20009000 	.word	0x20009000
     778:	00000461 	.word	0x00000461
     77c:	e000e400 	.word	0xe000e400
     780:	400e8000 	.word	0x400e8000

00000784 <acqModifyFrequency(unsigned long)>:
  {
     784:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     786:	4c08      	ldr	r4, [pc, #32]	; (7a8 <acqModifyFrequency(unsigned long)+0x24>)
     788:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     78c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     790:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     794:	f7ff fedc 	bl	550 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     798:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     79c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     7a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     7a4:	bd10      	pop	{r4, pc}
     7a6:	bf00      	nop
     7a8:	40384000 	.word	0x40384000

000007ac <_GLOBAL__sub_I_procCount>:
		begin();
     7ac:	4805      	ldr	r0, [pc, #20]	; (7c4 <_GLOBAL__sub_I_procCount+0x18>)
     7ae:	2100      	movs	r1, #0
  }
}
     7b0:	b508      	push	{r3, lr}
     7b2:	f006 fc7f 	bl	70b4 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     7b6:	4a04      	ldr	r2, [pc, #16]	; (7c8 <_GLOBAL__sub_I_procCount+0x1c>)
     7b8:	4904      	ldr	r1, [pc, #16]	; (7cc <_GLOBAL__sub_I_procCount+0x20>)
     7ba:	4802      	ldr	r0, [pc, #8]	; (7c4 <_GLOBAL__sub_I_procCount+0x18>)
}
     7bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     7c0:	f008 bd5c 	b.w	927c <__aeabi_atexit>
     7c4:	2001db44 	.word	0x2001db44
     7c8:	2000876c 	.word	0x2000876c
     7cc:	00000545 	.word	0x00000545

000007d0 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7d4:	b083      	sub	sp, #12
     7d6:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to = rtc_get();
     7d8:	f007 fa0e 	bl	7bf8 <rtc_get>
     7dc:	4682      	mov	sl, r0
  uint32_t t1 = micros();
     7de:	f007 f8a9 	bl	7934 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     7e2:	49a1      	ldr	r1, [pc, #644]	; (a68 <compress(void*)+0x298>)
     7e4:	6822      	ldr	r2, [r4, #0]
     7e6:	4623      	mov	r3, r4
     7e8:	680d      	ldr	r5, [r1, #0]
     7ea:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     7ee:	499f      	ldr	r1, [pc, #636]	; (a6c <compress(void*)+0x29c>)
  uint32_t t1 = micros();
     7f0:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     7f2:	602a      	str	r2, [r5, #0]
     7f4:	462c      	mov	r4, r5
     7f6:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     7f8:	4629      	mov	r1, r5
     7fa:	4618      	mov	r0, r3
     7fc:	3304      	adds	r3, #4
     7fe:	e9d0 0200 	ldrd	r0, r2, [r0]
     802:	42b3      	cmp	r3, r6
     804:	eba2 0200 	sub.w	r2, r2, r0
     808:	f844 2f04 	str.w	r2, [r4, #4]!
     80c:	d1f5      	bne.n	7fa <compress(void*)+0x2a>
     80e:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     812:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     814:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     818:	2b00      	cmp	r3, #0
     81a:	bfb8      	it	lt
     81c:	425b      	neglt	r3, r3
     81e:	429a      	cmp	r2, r3
     820:	bfb8      	it	lt
     822:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     824:	4281      	cmp	r1, r0
     826:	d1f5      	bne.n	814 <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     828:	2702      	movs	r7, #2
     82a:	2101      	movs	r1, #1
     82c:	e003      	b.n	836 <compress(void*)+0x66>
     82e:	3701      	adds	r7, #1
     830:	2f18      	cmp	r7, #24
     832:	f000 8110 	beq.w	a56 <compress(void*)+0x286>
     836:	1e7c      	subs	r4, r7, #1
     838:	fa01 f304 	lsl.w	r3, r1, r4
     83c:	4293      	cmp	r3, r2
     83e:	ddf6      	ble.n	82e <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     840:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     844:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     846:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     84a:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     84c:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     84e:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     852:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     856:	4986      	ldr	r1, [pc, #536]	; (a70 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     858:	4d86      	ldr	r5, [pc, #536]	; (a74 <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     85a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     85e:	3201      	adds	r2, #1
     860:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     864:	682a      	ldr	r2, [r5, #0]
     866:	4c84      	ldr	r4, [pc, #528]	; (a78 <compress(void*)+0x2a8>)
     868:	42ba      	cmp	r2, r7
     86a:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     86e:	46a3      	mov	fp, r4
     870:	4622      	mov	r2, r4
     872:	bf38      	it	cc
     874:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     876:	f852 1f04 	ldr.w	r1, [r2, #4]!
     87a:	4001      	ands	r1, r0
     87c:	4296      	cmp	r6, r2
     87e:	6011      	str	r1, [r2, #0]
     880:	d1f9      	bne.n	876 <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     882:	4d7e      	ldr	r5, [pc, #504]	; (a7c <compress(void*)+0x2ac>)
     884:	f44f 7200 	mov.w	r2, #512	; 0x200
     888:	2100      	movs	r1, #0
     88a:	9300      	str	r3, [sp, #0]
     88c:	4628      	mov	r0, r5
     88e:	f00a fdb1 	bl	b3f4 <memset>
  *iptr++ = nb | shift<<16;
     892:	4a7b      	ldr	r2, [pc, #492]	; (a80 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     894:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     896:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     898:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     89c:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8a0:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     8a2:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     8a4:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     8a8:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8aa:	f8db 2000 	ldr.w	r2, [fp]
     8ae:	f8cb 1000 	str.w	r1, [fp]
     8b2:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     8b4:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     8b8:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     8ba:	2201      	movs	r2, #1
  *iptr++ = t1;
     8bc:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     8c0:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     8c2:	e00a      	b.n	8da <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     8c4:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     8c8:	4694      	mov	ip, r2
     8ca:	ea41 010e 	orr.w	r1, r1, lr
     8ce:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     8d2:	42a6      	cmp	r6, r4
     8d4:	d018      	beq.n	908 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     8d6:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     8da:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     8de:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     8e0:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     8e4:	dcee      	bgt.n	8c4 <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     8e6:	eba7 0e0c 	sub.w	lr, r7, ip
     8ea:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     8ee:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     8f2:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     8f6:	d12f      	bne.n	958 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     8f8:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     8fa:	42a6      	cmp	r6, r4
          nx=MBIT;
     8fc:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     900:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     904:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     906:	d1e6      	bne.n	8d6 <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     908:	4e5e      	ldr	r6, [pc, #376]	; (a84 <compress(void*)+0x2b4>)
     90a:	6834      	ldr	r4, [r6, #0]
     90c:	eb04 0208 	add.w	r2, r4, r8
     910:	2a80      	cmp	r2, #128	; 0x80
     912:	dc2d      	bgt.n	970 <compress(void*)+0x1a0>
     914:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     918:	4a5b      	ldr	r2, [pc, #364]	; (a88 <compress(void*)+0x2b8>)
     91a:	4858      	ldr	r0, [pc, #352]	; (a7c <compress(void*)+0x2ac>)
     91c:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     920:	4423      	add	r3, r4
     922:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     926:	2300      	movs	r3, #0
     928:	e001      	b.n	92e <compress(void*)+0x15e>
     92a:	f850 1f04 	ldr.w	r1, [r0, #4]!
     92e:	3301      	adds	r3, #1
     930:	f842 1f04 	str.w	r1, [r2, #4]!
     934:	4543      	cmp	r3, r8
     936:	dbf8      	blt.n	92a <compress(void*)+0x15a>
     938:	f1b8 0f00 	cmp.w	r8, #0
     93c:	f108 33ff 	add.w	r3, r8, #4294967295
     940:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     944:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     948:	bfd8      	it	le
     94a:	2300      	movle	r3, #0
     94c:	4423      	add	r3, r4
     94e:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     950:	4638      	mov	r0, r7
     952:	b003      	add	sp, #12
     954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     958:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     95c:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     960:	ea4e 0202 	orr.w	r2, lr, r2
     964:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     968:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     96a:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     96e:	e7b0      	b.n	8d2 <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     970:	2c7a      	cmp	r4, #122	; 0x7a
     972:	dd22      	ble.n	9ba <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     974:	2c7f      	cmp	r4, #127	; 0x7f
     976:	dc0a      	bgt.n	98e <compress(void*)+0x1be>
     978:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     97c:	4842      	ldr	r0, [pc, #264]	; (a88 <compress(void*)+0x2b8>)
     97e:	2100      	movs	r1, #0
     980:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     984:	0092      	lsls	r2, r2, #2
     986:	f00a fd35 	bl	b3f4 <memset>
     98a:	2380      	movs	r3, #128	; 0x80
     98c:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     98e:	483e      	ldr	r0, [pc, #248]	; (a88 <compress(void*)+0x2b8>)
     990:	f000 fc0e 	bl	11b0 <pushData(unsigned long*)>
     994:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     996:	ea4f 0288 	mov.w	r2, r8, lsl #2
     99a:	4938      	ldr	r1, [pc, #224]	; (a7c <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     99c:	bf18      	it	ne
     99e:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9a0:	f1b8 0f00 	cmp.w	r8, #0
     9a4:	4838      	ldr	r0, [pc, #224]	; (a88 <compress(void*)+0x2b8>)
     9a6:	bfd8      	it	le
     9a8:	2204      	movle	r2, #4
     9aa:	f007 f857 	bl	7a5c <memcpy>
}
     9ae:	4638      	mov	r0, r7
     9b0:	f8c6 8000 	str.w	r8, [r6]
     9b4:	b003      	add	sp, #12
     9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     9ba:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     9be:	4832      	ldr	r0, [pc, #200]	; (a88 <compress(void*)+0x2b8>)
     9c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     9c4:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     9c8:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     9ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     9ce:	4d2b      	ldr	r5, [pc, #172]	; (a7c <compress(void*)+0x2ac>)
     9d0:	4423      	add	r3, r4
     9d2:	4629      	mov	r1, r5
     9d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     9d8:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     9dc:	e001      	b.n	9e2 <compress(void*)+0x212>
     9de:	f851 2f04 	ldr.w	r2, [r1, #4]!
     9e2:	f843 2f04 	str.w	r2, [r3, #4]!
     9e6:	4298      	cmp	r0, r3
     9e8:	d1f9      	bne.n	9de <compress(void*)+0x20e>
     9ea:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     9ec:	4826      	ldr	r0, [pc, #152]	; (a88 <compress(void*)+0x2b8>)
     9ee:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     9f2:	6033      	str	r3, [r6, #0]
     9f4:	f000 fbdc 	bl	11b0 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9f8:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     9fa:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     9fc:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9fe:	4a23      	ldr	r2, [pc, #140]	; (a8c <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     a00:	bf18      	it	ne
     a02:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     a04:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a08:	f8df e070 	ldr.w	lr, [pc, #112]	; a7c <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a0c:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a0e:	f8df c078 	ldr.w	ip, [pc, #120]	; a88 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     a12:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a14:	ea42 0203 	orr.w	r2, r2, r3
     a18:	f04f 0306 	mov.w	r3, #6
     a1c:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a1e:	6033      	str	r3, [r6, #0]
     a20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a28:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a2c:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a30:	da8e      	bge.n	950 <compress(void*)+0x180>
     a32:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a36:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     a3a:	f10c 0008 	add.w	r0, ip, #8
     a3e:	4442      	add	r2, r8
     a40:	0092      	lsls	r2, r2, #2
     a42:	f007 f80b 	bl	7a5c <memcpy>
     a46:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     a4a:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     a4c:	4443      	add	r3, r8
     a4e:	6033      	str	r3, [r6, #0]
}
     a50:	b003      	add	sp, #12
     a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a56:	2267      	movs	r2, #103	; 0x67
     a58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     a5c:	f04f 0868 	mov.w	r8, #104	; 0x68
     a60:	2361      	movs	r3, #97	; 0x61
     a62:	2417      	movs	r4, #23
     a64:	9201      	str	r2, [sp, #4]
     a66:	e6f6      	b.n	856 <compress(void*)+0x86>
     a68:	20008d58 	.word	0x20008d58
     a6c:	2001f5dc 	.word	0x2001f5dc
     a70:	2001f04c 	.word	0x2001f04c
     a74:	2001f028 	.word	0x2001f028
     a78:	2001e014 	.word	0x2001e014
     a7c:	2001ddc4 	.word	0x2001ddc4
     a80:	20008d74 	.word	0x20008d74
     a84:	2001e26c 	.word	0x2001e26c
     a88:	2001db4c 	.word	0x2001db4c
     a8c:	ffff0000 	.word	0xffff0000

00000a90 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     a90:	2000      	movs	r0, #0
     a92:	4770      	bx	lr

00000a94 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     a94:	4770      	bx	lr
     a96:	bf00      	nop

00000a98 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     a98:	4b04      	ldr	r3, [pc, #16]	; (aac <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a9a:	b510      	push	{r4, lr}
     a9c:	4604      	mov	r4, r0
     a9e:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     aa2:	f003 fdb9 	bl	4618 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     aa6:	4620      	mov	r0, r4
     aa8:	bd10      	pop	{r4, pc}
     aaa:	bf00      	nop
     aac:	20000884 	.word	0x20000884

00000ab0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     ab0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     ab2:	b500      	push	{lr}
     ab4:	b083      	sub	sp, #12
     ab6:	b163      	cbz	r3, ad2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ab8:	2201      	movs	r2, #1
     aba:	f10d 0107 	add.w	r1, sp, #7
     abe:	4618      	mov	r0, r3
     ac0:	f002 fc48 	bl	3354 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     ac4:	2801      	cmp	r0, #1
     ac6:	d10c      	bne.n	ae2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     ac8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     acc:	b003      	add	sp, #12
     ace:	f85d fb04 	ldr.w	pc, [sp], #4
     ad2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ad4:	b128      	cbz	r0, ae2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     ad6:	2201      	movs	r2, #1
     ad8:	f10d 0107 	add.w	r1, sp, #7
     adc:	f000 ff5a 	bl	1994 <ExFatFile::read(void*, unsigned int)>
     ae0:	e7f0      	b.n	ac4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     ae2:	f04f 30ff 	mov.w	r0, #4294967295
     ae6:	e7f1      	b.n	acc <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000ae8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     ae8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     aea:	b113      	cbz	r3, af2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     aec:	4618      	mov	r0, r3
     aee:	f002 bd05 	b.w	34fc <FatFile::peek()>
     af2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     af4:	b108      	cbz	r0, afa <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     af6:	f001 b81d 	b.w	1b34 <ExFatFile::peek()>
  }
     afa:	f04f 30ff 	mov.w	r0, #4294967295
     afe:	4770      	bx	lr

00000b00 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     b00:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b02:	b153      	cbz	r3, b1a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     b04:	7818      	ldrb	r0, [r3, #0]
     b06:	f010 0008 	ands.w	r0, r0, #8
     b0a:	d00d      	beq.n	b28 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     b0c:	69d8      	ldr	r0, [r3, #28]
     b0e:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     b10:	1ac0      	subs	r0, r0, r3
     b12:	bf48      	it	mi
     b14:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     b18:	4770      	bx	lr
     b1a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     b1c:	b1a3      	cbz	r3, b48 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     b1e:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     b22:	f010 0008 	ands.w	r0, r0, #8
     b26:	d100      	bne.n	b2a <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     b28:	4770      	bx	lr
     b2a:	6918      	ldr	r0, [r3, #16]
     b2c:	6819      	ldr	r1, [r3, #0]
     b2e:	695a      	ldr	r2, [r3, #20]
     b30:	1a40      	subs	r0, r0, r1
     b32:	685b      	ldr	r3, [r3, #4]
     b34:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     b38:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     b3c:	f173 0300 	sbcs.w	r3, r3, #0
     b40:	d3f2      	bcc.n	b28 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     b42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     b46:	4770      	bx	lr
     b48:	4618      	mov	r0, r3
    return BaseFile::available();
     b4a:	e7ed      	b.n	b28 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000b4c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     b4c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b4e:	b113      	cbz	r3, b56 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     b50:	4618      	mov	r0, r3
     b52:	f002 bdd3 	b.w	36fc <FatFile::sync()>
     b56:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     b58:	b108      	cbz	r0, b5e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     b5a:	f001 bbad 	b.w	22b8 <ExFatFile::sync()>
  }
     b5e:	4770      	bx	lr

00000b60 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     b60:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b62:	b113      	cbz	r3, b6a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     b64:	4618      	mov	r0, r3
     b66:	f002 bdcf 	b.w	3708 <FatFile::write(void const*, unsigned int)>
     b6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     b6c:	b108      	cbz	r0, b72 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     b6e:	f001 bd39 	b.w	25e4 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     b72:	4770      	bx	lr

00000b74 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     b74:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     b76:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b78:	b083      	sub	sp, #12
     b7a:	f88d 1007 	strb.w	r1, [sp, #7]
     b7e:	b143      	cbz	r3, b92 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     b80:	2201      	movs	r2, #1
     b82:	f10d 0107 	add.w	r1, sp, #7
     b86:	4618      	mov	r0, r3
     b88:	f002 fdbe 	bl	3708 <FatFile::write(void const*, unsigned int)>
  }
     b8c:	b003      	add	sp, #12
     b8e:	f85d fb04 	ldr.w	pc, [sp], #4
     b92:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     b94:	2800      	cmp	r0, #0
     b96:	d0f9      	beq.n	b8c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     b98:	2201      	movs	r2, #1
     b9a:	f10d 0107 	add.w	r1, sp, #7
     b9e:	f001 fd21 	bl	25e4 <ExFatFile::write(void const*, unsigned int)>
     ba2:	b003      	add	sp, #12
     ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ba8 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     ba8:	b538      	push	{r3, r4, r5, lr}
     baa:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     bac:	b149      	cbz	r1, bc2 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     bae:	4608      	mov	r0, r1
     bb0:	460d      	mov	r5, r1
     bb2:	f00a ff65 	bl	ba80 <strlen>
     bb6:	6823      	ldr	r3, [r4, #0]
     bb8:	4602      	mov	r2, r0
     bba:	4629      	mov	r1, r5
     bbc:	685b      	ldr	r3, [r3, #4]
     bbe:	4620      	mov	r0, r4
     bc0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     bc2:	4620      	mov	r0, r4
     bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     bc8:	f006 bbae 	b.w	7328 <Print::println()>

00000bcc <filing_init()>:
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
     bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     bce:	4b23      	ldr	r3, [pc, #140]	; (c5c <filing_init()+0x90>)
     bd0:	2505      	movs	r5, #5
     bd2:	4c23      	ldr	r4, [pc, #140]	; (c60 <filing_init()+0x94>)
     bd4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
     bd8:	4a22      	ldr	r2, [pc, #136]	; (c64 <filing_init()+0x98>)
     bda:	f504 6692 	add.w	r6, r4, #1168	; 0x490
     bde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     be2:	4f21      	ldr	r7, [pc, #132]	; (c68 <filing_init()+0x9c>)
     be4:	6013      	str	r3, [r2, #0]
    sdioConfigBackup = sdioConfig;
     be6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     be8:	22ff      	movs	r2, #255	; 0xff
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     bea:	4630      	mov	r0, r6
     bec:	4619      	mov	r1, r3
     bee:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     bf2:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     bf6:	f005 f95b 	bl	5eb0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     bfa:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     bfc:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     c00:	f004 fc4c 	bl	549c <SdioCard::errorCode() const>
     c04:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     c06:	2301      	movs	r3, #1
     c08:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
     c0a:	b98a      	cbnz	r2, c30 <filing_init()+0x64>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     c0c:	461a      	mov	r2, r3
     c0e:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     c12:	f003 fd6f 	bl	46f4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     c16:	b158      	cbz	r0, c30 <filing_init()+0x64>
     c18:	2111      	movs	r1, #17
     c1a:	4814      	ldr	r0, [pc, #80]	; (c6c <filing_init()+0xa0>)
     c1c:	f008 f916 	bl	8e4c <usb_serial_write>
     c20:	4813      	ldr	r0, [pc, #76]	; (c70 <filing_init()+0xa4>)
     c22:	f006 fb81 	bl	7328 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     c26:	2301      	movs	r3, #1
     c28:	4a12      	ldr	r2, [pc, #72]	; (c74 <filing_init()+0xa8>)
      return 1;
     c2a:	4618      	mov	r0, r3
      haveStore=1;
     c2c:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c30:	210f      	movs	r1, #15
     c32:	4638      	mov	r0, r7
     c34:	f008 f90a 	bl	8e4c <usb_serial_write>
     c38:	480d      	ldr	r0, [pc, #52]	; (c70 <filing_init()+0xa4>)
     c3a:	f006 fb75 	bl	7328 <Print::println()>
      delay(100);
     c3e:	2064      	movs	r0, #100	; 0x64
     c40:	f006 fe24 	bl	788c <delay>
  for(int ii=0; ii<5;ii++)
     c44:	3d01      	subs	r5, #1
     c46:	d1ce      	bne.n	be6 <filing_init()+0x1a>
     c48:	211b      	movs	r1, #27
     c4a:	480b      	ldr	r0, [pc, #44]	; (c78 <filing_init()+0xac>)
     c4c:	f008 f8fe 	bl	8e4c <usb_serial_write>
     c50:	4807      	ldr	r0, [pc, #28]	; (c70 <filing_init()+0xa4>)
     c52:	f006 fb69 	bl	7328 <Print::println()>
  return 0;
     c56:	4628      	mov	r0, r5
}
     c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c5a:	bf00      	nop
     c5c:	401f4400 	.word	0x401f4400
     c60:	2001f0fc 	.word	0x2001f0fc
     c64:	2000c578 	.word	0x2000c578
     c68:	200003d0 	.word	0x200003d0
     c6c:	200003bc 	.word	0x200003bc
     c70:	20008754 	.word	0x20008754
     c74:	2001e800 	.word	0x2001e800
     c78:	200003e0 	.word	0x200003e0

00000c7c <makeHeader(long*)>:


int16_t makeHeader(int32_t *header)
{
     c7c:	b530      	push	{r4, r5, lr}
     c7e:	b089      	sub	sp, #36	; 0x24
     c80:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     c82:	4d1d      	ldr	r5, [pc, #116]	; (cf8 <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     c84:	a806      	add	r0, sp, #24
     c86:	f000 fc3b 	bl	1500 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     c8a:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     c8e:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     c92:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     c96:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     c9a:	e9cd 3003 	strd	r3, r0, [sp, #12]
     c9e:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     ca2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     ca6:	9000      	str	r0, [sp, #0]
     ca8:	4620      	mov	r0, r4
     caa:	e9cd 2101 	strd	r2, r1, [sp, #4]
     cae:	4a13      	ldr	r2, [pc, #76]	; (cfc <makeHeader(long*)+0x80>)
     cb0:	4913      	ldr	r1, [pc, #76]	; (d00 <makeHeader(long*)+0x84>)
     cb2:	f00a f9f9 	bl	b0a8 <sprintf>
    header[10] = t_on;
     cb6:	4b13      	ldr	r3, [pc, #76]	; (d04 <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     cb8:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     cba:	2001      	movs	r0, #1
    header[10] = t_on;
     cbc:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     cbe:	4a12      	ldr	r2, [pc, #72]	; (d08 <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     cc0:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     cc2:	4b12      	ldr	r3, [pc, #72]	; (d0c <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     cc4:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     cc6:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     cc8:	4911      	ldr	r1, [pc, #68]	; (d10 <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     cca:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     ccc:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     cce:	4a11      	ldr	r2, [pc, #68]	; (d14 <makeHeader(long*)+0x98>)
    header[11] = t_off;
     cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     cd2:	4b11      	ldr	r3, [pc, #68]	; (d18 <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     cd4:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     cd6:	2514      	movs	r5, #20
    header[13] = shift;
     cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     cdc:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     cde:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     ce2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     ce6:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     ce8:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     cea:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     cec:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     cf0:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     cf2:	b009      	add	sp, #36	; 0x24
     cf4:	bd30      	pop	{r4, r5, pc}
     cf6:	bf00      	nop
     cf8:	20008d50 	.word	0x20008d50
     cfc:	20000398 	.word	0x20000398
     d00:	200003a0 	.word	0x200003a0
     d04:	20008d54 	.word	0x20008d54
     d08:	2000c578 	.word	0x2000c578
     d0c:	2001f5d4 	.word	0x2001f5d4
     d10:	20008d10 	.word	0x20008d10
     d14:	20008d72 	.word	0x20008d72
     d18:	20008d74 	.word	0x20008d74

00000d1c <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     d1c:	b530      	push	{r4, r5, lr}
     d1e:	b087      	sub	sp, #28
     d20:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     d22:	a804      	add	r0, sp, #16
     d24:	f000 fbec 	bl	1500 <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
     d28:	4913      	ldr	r1, [pc, #76]	; (d78 <newDirectory(char*)+0x5c>)

    if(newHour(t.hour))
     d2a:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     d2e:	680b      	ldr	r3, [r1, #0]
     d30:	429a      	cmp	r2, r3
     d32:	d01e      	beq.n	d72 <newDirectory(char*)+0x56>
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     d34:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     d38:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     d3c:	4b0f      	ldr	r3, [pc, #60]	; (d7c <newDirectory(char*)+0x60>)
     d3e:	e9cd 5202 	strd	r5, r2, [sp, #8]
     d42:	681b      	ldr	r3, [r3, #0]
     d44:	9001      	str	r0, [sp, #4]
     d46:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     d4a:	600a      	str	r2, [r1, #0]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     d4c:	4a0c      	ldr	r2, [pc, #48]	; (d80 <newDirectory(char*)+0x64>)
     d4e:	490d      	ldr	r1, [pc, #52]	; (d84 <newDirectory(char*)+0x68>)
     d50:	9000      	str	r0, [sp, #0]
     d52:	4620      	mov	r0, r4
     d54:	f00a f9a8 	bl	b0a8 <sprintf>
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(dirName);
     d58:	480b      	ldr	r0, [pc, #44]	; (d88 <newDirectory(char*)+0x6c>)
     d5a:	f006 fae5 	bl	7328 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     d5e:	4620      	mov	r0, r4
     d60:	f00a fe8e 	bl	ba80 <strlen>
     d64:	4601      	mov	r1, r0
     d66:	4620      	mov	r0, r4
     d68:	f008 f870 	bl	8e4c <usb_serial_write>
        return 1;   // have new directory
     d6c:	2001      	movs	r0, #1
    }
    return 0;       // keep old directory

}
     d6e:	b007      	add	sp, #28
     d70:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
     d72:	2000      	movs	r0, #0
}
     d74:	b007      	add	sp, #28
     d76:	bd30      	pop	{r4, r5, pc}
     d78:	2001e268 	.word	0x2001e268
     d7c:	2000c578 	.word	0x2000c578
     d80:	20000418 	.word	0x20000418
     d84:	2000041c 	.word	0x2000041c
     d88:	20008754 	.word	0x20008754

00000d8c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
     d8c:	b510      	push	{r4, lr}
     d8e:	b084      	sub	sp, #16
     d90:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     d92:	a802      	add	r0, sp, #8
     d94:	f000 fbb4 	bl	1500 <rtc_get_datetime(datetime_t*)>
    sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
     d98:	f99d 000f 	ldrsb.w	r0, [sp, #15]
     d9c:	f99d 100e 	ldrsb.w	r1, [sp, #14]
     da0:	f99d 300d 	ldrsb.w	r3, [sp, #13]
     da4:	4a0b      	ldr	r2, [pc, #44]	; (dd4 <newFileName(char*)+0x48>)
     da6:	e9cd 1000 	strd	r1, r0, [sp]
     daa:	490b      	ldr	r1, [pc, #44]	; (dd8 <newFileName(char*)+0x4c>)
     dac:	4620      	mov	r0, r4
     dae:	f00a f97b 	bl	b0a8 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
     db2:	480a      	ldr	r0, [pc, #40]	; (ddc <newFileName(char*)+0x50>)
     db4:	f006 fab8 	bl	7328 <Print::println()>
     db8:	2102      	movs	r1, #2
     dba:	4809      	ldr	r0, [pc, #36]	; (de0 <newFileName(char*)+0x54>)
     dbc:	f008 f846 	bl	8e4c <usb_serial_write>
     dc0:	4620      	mov	r0, r4
     dc2:	f00a fe5d 	bl	ba80 <strlen>
     dc6:	4601      	mov	r1, r0
     dc8:	4620      	mov	r0, r4
     dca:	f008 f83f 	bl	8e4c <usb_serial_write>
    return 1;
}
     dce:	2001      	movs	r0, #1
     dd0:	b004      	add	sp, #16
     dd2:	bd10      	pop	{r4, pc}
     dd4:	200003fc 	.word	0x200003fc
     dd8:	20000400 	.word	0x20000400
     ddc:	20008754 	.word	0x20008754
     de0:	20000414 	.word	0x20000414

00000de4 <storeData(short)>:
static char fileName[80];
static int32_t fileHeader[128];

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
     de4:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
     de6:	4604      	mov	r4, r0
{
     de8:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
     dea:	2800      	cmp	r0, #0
     dec:	d03a      	beq.n	e64 <storeData(short)+0x80>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
     dee:	2801      	cmp	r0, #1
     df0:	d015      	beq.n	e1e <storeData(short)+0x3a>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
     df2:	2802      	cmp	r0, #2
     df4:	f000 80c0 	beq.w	f78 <storeData(short)+0x194>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
     df8:	2803      	cmp	r0, #3
     dfa:	f000 80b1 	beq.w	f60 <storeData(short)+0x17c>
            file.close();
        }
        status = CLOSED;
    }
    //
    if(status==MUSTSTOP) // should close file and stop
     dfe:	2804      	cmp	r0, #4
     e00:	d10b      	bne.n	e1a <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
     e02:	4b86      	ldr	r3, [pc, #536]	; (101c <storeData(short)+0x238>)
     e04:	6c98      	ldr	r0, [r3, #72]	; 0x48
     e06:	2800      	cmp	r0, #0
     e08:	f000 80f2 	beq.w	ff0 <storeData(short)+0x20c>
    return m_fFile ? m_fFile->sync() :
     e0c:	f002 fc76 	bl	36fc <FatFile::sync()>
    {   if(file)
        {
            file.flush();
            file.close();
     e10:	4883      	ldr	r0, [pc, #524]	; (1020 <storeData(short)+0x23c>)
     e12:	f003 fc01 	bl	4618 <FsBaseFile::close()>
        }
        status = STOPPED;
     e16:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return status;
}
     e1a:	b014      	add	sp, #80	; 0x50
     e1c:	bd70      	pop	{r4, r5, r6, pc}
     e1e:	4c7f      	ldr	r4, [pc, #508]	; (101c <storeData(short)+0x238>)
    {   makeHeader(fileHeader);
     e20:	4880      	ldr	r0, [pc, #512]	; (1024 <storeData(short)+0x240>)
     e22:	f7ff ff2b 	bl	c7c <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
     e26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e28:	2800      	cmp	r0, #0
     e2a:	d068      	beq.n	efe <storeData(short)+0x11a>
     e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
     e30:	497c      	ldr	r1, [pc, #496]	; (1024 <storeData(short)+0x240>)
     e32:	f002 fc69 	bl	3708 <FatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
     e36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     e3a:	d36b      	bcc.n	f14 <storeData(short)+0x130>
     e3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e3e:	2800      	cmp	r0, #0
     e40:	f000 8090 	beq.w	f64 <storeData(short)+0x180>
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	4977      	ldr	r1, [pc, #476]	; (1028 <storeData(short)+0x244>)
     e4a:	f002 fc5d 	bl	3708 <FatFile::write(void const*, unsigned int)>
     e4e:	4605      	mov	r5, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
     e50:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     e54:	d36a      	bcc.n	f2c <storeData(short)+0x148>
        disk_count++;
     e56:	4a75      	ldr	r2, [pc, #468]	; (102c <storeData(short)+0x248>)
     e58:	2002      	movs	r0, #2
     e5a:	6813      	ldr	r3, [r2, #0]
     e5c:	3301      	adds	r3, #1
     e5e:	6013      	str	r3, [r2, #0]
}
     e60:	b014      	add	sp, #80	; 0x50
     e62:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
     e64:	4872      	ldr	r0, [pc, #456]	; (1030 <storeData(short)+0x24c>)
     e66:	f7ff ff59 	bl	d1c <newDirectory(char*)>
     e6a:	b1d8      	cbz	r0, ea4 <storeData(short)+0xc0>
    return m_fVol ? m_fVol->exists(path) :
     e6c:	4d71      	ldr	r5, [pc, #452]	; (1034 <storeData(short)+0x250>)
     e6e:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
     e72:	2a00      	cmp	r2, #0
     e74:	f000 8082 	beq.w	f7c <storeData(short)+0x198>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     e78:	466e      	mov	r6, sp
     e7a:	4611      	mov	r1, r2
     e7c:	4623      	mov	r3, r4
     e7e:	4a6c      	ldr	r2, [pc, #432]	; (1030 <storeData(short)+0x24c>)
     e80:	4630      	mov	r0, r6
  FatFile() {}
     e82:	9400      	str	r4, [sp, #0]
     e84:	f002 fa40 	bl	3308 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
     e88:	2800      	cmp	r0, #0
     e8a:	f000 8084 	beq.w	f96 <storeData(short)+0x1b2>
    return m_fVol ? m_fVol->chdir(path) :
     e8e:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
     e92:	2800      	cmp	r0, #0
     e94:	f000 8095 	beq.w	fc2 <storeData(short)+0x1de>
     e98:	4965      	ldr	r1, [pc, #404]	; (1030 <storeData(short)+0x24c>)
     e9a:	f003 fb3b 	bl	4514 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
     e9e:	2800      	cmp	r0, #0
     ea0:	f000 8098 	beq.w	fd4 <storeData(short)+0x1f0>
        if(newFileName(fileName))
     ea4:	4864      	ldr	r0, [pc, #400]	; (1038 <storeData(short)+0x254>)
     ea6:	f7ff ff71 	bl	d8c <newFileName(char*)>
     eaa:	b328      	cbz	r0, ef8 <storeData(short)+0x114>
            file = sd.open(fileName, FILE_WRITE); 
     eac:	f244 2302 	movw	r3, #16898	; 0x4202
     eb0:	4a61      	ldr	r2, [pc, #388]	; (1038 <storeData(short)+0x254>)
     eb2:	4960      	ldr	r1, [pc, #384]	; (1034 <storeData(short)+0x250>)
     eb4:	4668      	mov	r0, sp
     eb6:	f003 fc8f 	bl	47d8 <FsVolume::open(char const*, int)>
class Print
     eba:	4c58      	ldr	r4, [pc, #352]	; (101c <storeData(short)+0x238>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     ebc:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
     ec0:	f104 0010 	add.w	r0, r4, #16
     ec4:	7323      	strb	r3, [r4, #12]
     ec6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
     eca:	e9c4 1201 	strd	r1, r2, [r4, #4]
     ece:	a904      	add	r1, sp, #16
     ed0:	f003 fb48 	bl	4564 <FsBaseFile::operator=(FsBaseFile const&)>
     ed4:	4b59      	ldr	r3, [pc, #356]	; (103c <storeData(short)+0x258>)
  ~FsBaseFile() {close();}
     ed6:	a804      	add	r0, sp, #16
     ed8:	9300      	str	r3, [sp, #0]
     eda:	f003 fb9d 	bl	4618 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
     ede:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ee0:	2b00      	cmp	r3, #0
     ee2:	d19d      	bne.n	e20 <storeData(short)+0x3c>
     ee4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     ee6:	2b00      	cmp	r3, #0
     ee8:	d19a      	bne.n	e20 <storeData(short)+0x3c>
     eea:	2111      	movs	r1, #17
     eec:	4854      	ldr	r0, [pc, #336]	; (1040 <storeData(short)+0x25c>)
     eee:	f007 ffad 	bl	8e4c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     ef2:	4854      	ldr	r0, [pc, #336]	; (1044 <storeData(short)+0x260>)
     ef4:	f006 fa18 	bl	7328 <Print::println()>
                return STOPPED; 
     ef8:	f04f 30ff 	mov.w	r0, #4294967295
     efc:	e78d      	b.n	e1a <storeData(short)+0x36>
     efe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     f00:	2800      	cmp	r0, #0
     f02:	d08a      	beq.n	e1a <storeData(short)+0x36>
     f04:	f44f 7200 	mov.w	r2, #512	; 0x200
     f08:	4946      	ldr	r1, [pc, #280]	; (1024 <storeData(short)+0x240>)
     f0a:	f001 fb6b 	bl	25e4 <ExFatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
     f0e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     f12:	d293      	bcs.n	e3c <storeData(short)+0x58>
  bool isOpen() const {return m_fFile || m_xFile;}
     f14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     f16:	2800      	cmp	r0, #0
     f18:	d063      	beq.n	fe2 <storeData(short)+0x1fe>
    return m_fFile ? m_fFile->sync() :
     f1a:	f002 fbef 	bl	36fc <FatFile::sync()>
            file.close();
     f1e:	4840      	ldr	r0, [pc, #256]	; (1020 <storeData(short)+0x23c>)
     f20:	f003 fb7a 	bl	4618 <FsBaseFile::close()>
        status = CLOSED;
     f24:	2000      	movs	r0, #0
}
     f26:	b014      	add	sp, #80	; 0x50
     f28:	bd70      	pop	{r4, r5, r6, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     f2a:	4605      	mov	r5, r0
     f2c:	2101      	movs	r1, #1
     f2e:	4846      	ldr	r0, [pc, #280]	; (1048 <storeData(short)+0x264>)
     f30:	f007 ff8c 	bl	8e4c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f34:	2300      	movs	r3, #0
     f36:	220a      	movs	r2, #10
     f38:	4629      	mov	r1, r5
     f3a:	4842      	ldr	r0, [pc, #264]	; (1044 <storeData(short)+0x260>)
     f3c:	f006 fa1e 	bl	737c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f40:	2101      	movs	r1, #1
     f42:	4842      	ldr	r0, [pc, #264]	; (104c <storeData(short)+0x268>)
     f44:	f007 ff82 	bl	8e4c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     f48:	2102      	movs	r1, #2
     f4a:	483e      	ldr	r0, [pc, #248]	; (1044 <storeData(short)+0x260>)
     f4c:	f006 f9e0 	bl	7310 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     f50:	483c      	ldr	r0, [pc, #240]	; (1044 <storeData(short)+0x260>)
     f52:	f006 f9e9 	bl	7328 <Print::println()>
        disk_count++;
     f56:	4a35      	ldr	r2, [pc, #212]	; (102c <storeData(short)+0x248>)
     f58:	6813      	ldr	r3, [r2, #0]
     f5a:	3301      	adds	r3, #1
     f5c:	6013      	str	r3, [r2, #0]
    if(status==DOCLOSE) // should close file
     f5e:	e7d9      	b.n	f14 <storeData(short)+0x130>
     f60:	4c2e      	ldr	r4, [pc, #184]	; (101c <storeData(short)+0x238>)
     f62:	e7d7      	b.n	f14 <storeData(short)+0x130>
     f64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     f66:	2800      	cmp	r0, #0
     f68:	d0df      	beq.n	f2a <storeData(short)+0x146>
     f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f6e:	492e      	ldr	r1, [pc, #184]	; (1028 <storeData(short)+0x244>)
     f70:	f001 fb38 	bl	25e4 <ExFatFile::write(void const*, unsigned int)>
     f74:	4605      	mov	r5, r0
     f76:	e76b      	b.n	e50 <storeData(short)+0x6c>
     f78:	4c28      	ldr	r4, [pc, #160]	; (101c <storeData(short)+0x238>)
     f7a:	e75f      	b.n	e3c <storeData(short)+0x58>
     f7c:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
     f80:	b1c1      	cbz	r1, fb4 <storeData(short)+0x1d0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     f82:	466e      	mov	r6, sp
     f84:	4613      	mov	r3, r2
  ExFatFile() {}
     f86:	920c      	str	r2, [sp, #48]	; 0x30
     f88:	4630      	mov	r0, r6
     f8a:	4a29      	ldr	r2, [pc, #164]	; (1030 <storeData(short)+0x24c>)
     f8c:	f001 f8a6 	bl	20dc <ExFatFile::open(ExFatVolume*, char const*, int)>
     f90:	2800      	cmp	r0, #0
     f92:	f47f af7c 	bne.w	e8e <storeData(short)+0xaa>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f96:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
     f9a:	b37a      	cbz	r2, ffc <storeData(short)+0x218>
     f9c:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     f9e:	f502 6189 	add.w	r1, r2, #1096	; 0x448
     fa2:	2301      	movs	r3, #1
     fa4:	4630      	mov	r0, r6
     fa6:	4a22      	ldr	r2, [pc, #136]	; (1030 <storeData(short)+0x24c>)
     fa8:	9400      	str	r4, [sp, #0]
     faa:	f002 f8b5 	bl	3118 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
     fae:	2800      	cmp	r0, #0
     fb0:	f47f af6d 	bne.w	e8e <storeData(short)+0xaa>
     fb4:	4823      	ldr	r0, [pc, #140]	; (1044 <storeData(short)+0x260>)
     fb6:	4926      	ldr	r1, [pc, #152]	; (1050 <storeData(short)+0x26c>)
     fb8:	f7ff fdf6 	bl	ba8 <Print::println(char const*) [clone .isra.0]>
     fbc:	f04f 30ff 	mov.w	r0, #4294967295
     fc0:	e72b      	b.n	e1a <storeData(short)+0x36>
     fc2:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
     fc6:	b128      	cbz	r0, fd4 <storeData(short)+0x1f0>
     fc8:	4919      	ldr	r1, [pc, #100]	; (1030 <storeData(short)+0x24c>)
     fca:	f001 feff 	bl	2dcc <ExFatVolume::chdir(char const*)>
     fce:	2800      	cmp	r0, #0
     fd0:	f47f af68 	bne.w	ea4 <storeData(short)+0xc0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
     fd4:	481b      	ldr	r0, [pc, #108]	; (1044 <storeData(short)+0x260>)
     fd6:	491f      	ldr	r1, [pc, #124]	; (1054 <storeData(short)+0x270>)
     fd8:	f7ff fde6 	bl	ba8 <Print::println(char const*) [clone .isra.0]>
     fdc:	f04f 30ff 	mov.w	r0, #4294967295
     fe0:	e71b      	b.n	e1a <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
     fe2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     fe4:	2800      	cmp	r0, #0
     fe6:	f43f af18 	beq.w	e1a <storeData(short)+0x36>
           m_xFile ? m_xFile->sync() : false;
     fea:	f001 f965 	bl	22b8 <ExFatFile::sync()>
     fee:	e796      	b.n	f1e <storeData(short)+0x13a>
  bool isOpen() const {return m_fFile || m_xFile;}
     ff0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     ff2:	2800      	cmp	r0, #0
     ff4:	d080      	beq.n	ef8 <storeData(short)+0x114>
           m_xFile ? m_xFile->sync() : false;
     ff6:	f001 f95f 	bl	22b8 <ExFatFile::sync()>
     ffa:	e709      	b.n	e10 <storeData(short)+0x2c>
     ffc:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1000:	2900      	cmp	r1, #0
    1002:	d0d7      	beq.n	fb4 <storeData(short)+0x1d0>
    1004:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1006:	2301      	movs	r3, #1
    1008:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    100c:	4630      	mov	r0, r6
    100e:	4a08      	ldr	r2, [pc, #32]	; (1030 <storeData(short)+0x24c>)
    1010:	f001 fa0a 	bl	2428 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1014:	2800      	cmp	r0, #0
    1016:	d0cd      	beq.n	fb4 <storeData(short)+0x1d0>
    1018:	e739      	b.n	e8e <storeData(short)+0xaa>
    101a:	bf00      	nop
    101c:	2001e7b0 	.word	0x2001e7b0
    1020:	2001e7c0 	.word	0x2001e7c0
    1024:	2000d93c 	.word	0x2000d93c
    1028:	2000c93c 	.word	0x2000c93c
    102c:	2001e788 	.word	0x2001e788
    1030:	2001dd74 	.word	0x2001dd74
    1034:	2001f0fc 	.word	0x2001f0fc
    1038:	2001dfc4 	.word	0x2001dfc4
    103c:	20000884 	.word	0x20000884
    1040:	200004e8 	.word	0x200004e8
    1044:	20008754 	.word	0x20008754
    1048:	200004fc 	.word	0x200004fc
    104c:	20008534 	.word	0x20008534
    1050:	200004d0 	.word	0x200004d0
    1054:	200004dc 	.word	0x200004dc

00001058 <saveData(short)>:
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    1058:	1c43      	adds	r3, r0, #1
{
    105a:	b570      	push	{r4, r5, r6, lr}
    if(status==STOPPED) 
    105c:	d031      	beq.n	10c2 <saveData(short)+0x6a>
    { pullData(diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }
    if(status<CLOSED) return status; // we are stopped: don't do anything
    105e:	2800      	cmp	r0, #0
    1060:	4605      	mov	r5, r0
    1062:	db2c      	blt.n	10be <saveData(short)+0x66>
  uint32_t tx=rtc_get();
    1064:	f006 fdc8 	bl	7bf8 <rtc_get>
  tx = tx % t_acq;
    1068:	4b21      	ldr	r3, [pc, #132]	; (10f0 <saveData(short)+0x98>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    106a:	2d01      	cmp	r5, #1
  tx = tx % t_acq;
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	fbb0 f2f3 	udiv	r2, r0, r3
    1072:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1076:	4b1f      	ldr	r3, [pc, #124]	; (10f4 <saveData(short)+0x9c>)
    1078:	dd05      	ble.n	1086 <saveData(short)+0x2e>
    107a:	681a      	ldr	r2, [r3, #0]
    107c:	b11a      	cbz	r2, 1086 <saveData(short)+0x2e>
    107e:	681a      	ldr	r2, [r3, #0]
    1080:	4290      	cmp	r0, r2
    1082:	bf38      	it	cc
    1084:	2503      	movcc	r5, #3
  tx_=tx;
    1086:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    1088:	f000 f884 	bl	1194 <getDataCount()>
    108c:	2807      	cmp	r0, #7
    108e:	d916      	bls.n	10be <saveData(short)+0x66>
    1090:	4c19      	ldr	r4, [pc, #100]	; (10f8 <saveData(short)+0xa0>)
    1092:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
    1096:	4620      	mov	r0, r4
    1098:	f504 7400 	add.w	r4, r4, #512	; 0x200
    109c:	f000 f8c4 	bl	1228 <pullData(unsigned long*)>
    10a0:	42b4      	cmp	r4, r6
    10a2:	d1f8      	bne.n	1096 <saveData(short)+0x3e>
    10a4:	4a15      	ldr	r2, [pc, #84]	; (10fc <saveData(short)+0xa4>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    10a6:	2300      	movs	r3, #0
    10a8:	4815      	ldr	r0, [pc, #84]	; (1100 <saveData(short)+0xa8>)
    10aa:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10ae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    10b2:	3301      	adds	r3, #1
    10b4:	2b08      	cmp	r3, #8
    10b6:	d1f8      	bne.n	10aa <saveData(short)+0x52>
      if(haveStore)
    10b8:	4b12      	ldr	r3, [pc, #72]	; (1104 <saveData(short)+0xac>)
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	b993      	cbnz	r3, 10e4 <saveData(short)+0x8c>
        status=storeData(status);
    }
    return status;
}
    10be:	4628      	mov	r0, r5
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    { pullData(diskBuffer);
    10c2:	480d      	ldr	r0, [pc, #52]	; (10f8 <saveData(short)+0xa0>)
    10c4:	f000 f8b0 	bl	1228 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    10c8:	4a0c      	ldr	r2, [pc, #48]	; (10fc <saveData(short)+0xa4>)
    10ca:	2300      	movs	r3, #0
    10cc:	480c      	ldr	r0, [pc, #48]	; (1100 <saveData(short)+0xa8>)
    10ce:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10d2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    10d6:	3301      	adds	r3, #1
    10d8:	2b08      	cmp	r3, #8
    10da:	d1f8      	bne.n	10ce <saveData(short)+0x76>
    10dc:	f04f 35ff 	mov.w	r5, #4294967295
}
    10e0:	4628      	mov	r0, r5
    10e2:	bd70      	pop	{r4, r5, r6, pc}
        status=storeData(status);
    10e4:	4628      	mov	r0, r5
}
    10e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        status=storeData(status);
    10ea:	f7ff be7b 	b.w	de4 <storeData(short)>
    10ee:	bf00      	nop
    10f0:	20008d50 	.word	0x20008d50
    10f4:	2001e25c 	.word	0x2001e25c
    10f8:	2000c93c 	.word	0x2000c93c
    10fc:	2000c938 	.word	0x2000c938
    1100:	2001f008 	.word	0x2001f008
    1104:	2001e800 	.word	0x2001e800

00001108 <_GLOBAL__sub_I_t_acq>:
  FsVolume() {}
    1108:	4819      	ldr	r0, [pc, #100]	; (1170 <_GLOBAL__sub_I_t_acq+0x68>)
	SPISettings() : _clock(4000000) {
    110a:	4b1a      	ldr	r3, [pc, #104]	; (1174 <_GLOBAL__sub_I_t_acq+0x6c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    110c:	491a      	ldr	r1, [pc, #104]	; (1178 <_GLOBAL__sub_I_t_acq+0x70>)
SdFs sd;
    110e:	4a1b      	ldr	r2, [pc, #108]	; (117c <_GLOBAL__sub_I_t_acq+0x74>)
}
    1110:	b510      	push	{r4, lr}
    1112:	f8c0 34a4 	str.w	r3, [r0, #1188]	; 0x4a4
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    1116:	2329      	movs	r3, #41	; 0x29
    1118:	2400      	movs	r4, #0
    111a:	f8c0 1490 	str.w	r1, [r0, #1168]	; 0x490
    111e:	f880 34ad 	strb.w	r3, [r0, #1197]	; 0x4ad
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1122:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    1124:	4b16      	ldr	r3, [pc, #88]	; (1180 <_GLOBAL__sub_I_t_acq+0x78>)
    1126:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    112a:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    112e:	f8c0 448c 	str.w	r4, [r0, #1164]	; 0x48c
  SdioConfig() {}
    1132:	f8a0 4498 	strh.w	r4, [r0, #1176]	; 0x498
  SharedSpiCard() {}
    1136:	f880 44b1 	strb.w	r4, [r0, #1201]	; 0x4b1
  DedicatedSpiCard() {}
    113a:	f880 44b8 	strb.w	r4, [r0, #1208]	; 0x4b8
    113e:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    1142:	f880 44c8 	strb.w	r4, [r0, #1224]	; 0x4c8
SdFs sd;
    1146:	490f      	ldr	r1, [pc, #60]	; (1184 <_GLOBAL__sub_I_t_acq+0x7c>)
    1148:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    114c:	f008 f896 	bl	927c <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    1150:	480d      	ldr	r0, [pc, #52]	; (1188 <_GLOBAL__sub_I_t_acq+0x80>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1152:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1156:	4b0d      	ldr	r3, [pc, #52]	; (118c <_GLOBAL__sub_I_t_acq+0x84>)
    1158:	7304      	strb	r4, [r0, #12]
FsFile file;
    115a:	4a08      	ldr	r2, [pc, #32]	; (117c <_GLOBAL__sub_I_t_acq+0x74>)
    115c:	6003      	str	r3, [r0, #0]
    115e:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() {}
    1162:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1166:	490a      	ldr	r1, [pc, #40]	; (1190 <_GLOBAL__sub_I_t_acq+0x88>)
}
    1168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    116c:	f008 b886 	b.w	927c <__aeabi_atexit>
    1170:	2001f0fc 	.word	0x2001f0fc
    1174:	003d0900 	.word	0x003d0900
    1178:	20000994 	.word	0x20000994
    117c:	2000876c 	.word	0x2000876c
    1180:	200008b4 	.word	0x200008b4
    1184:	00000a95 	.word	0x00000a95
    1188:	2001e7b0 	.word	0x2001e7b0
    118c:	2000094c 	.word	0x2000094c
    1190:	00000a99 	.word	0x00000a99

00001194 <getDataCount()>:
  volatile int busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1194:	4a04      	ldr	r2, [pc, #16]	; (11a8 <getDataCount()+0x14>)
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <getDataCount()+0x18>)
    1198:	6810      	ldr	r0, [r2, #0]
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	1ac0      	subs	r0, r0, r3
    119e:	bf48      	it	mi
    11a0:	3080      	addmi	r0, #128	; 0x80
    11a2:	b280      	uxth	r0, r0
    11a4:	4770      	bx	lr
    11a6:	bf00      	nop
    11a8:	2001f5d8 	.word	0x2001f5d8
    11ac:	2001e804 	.word	0x2001e804

000011b0 <pushData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    11b0:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    11b2:	4c19      	ldr	r4, [pc, #100]	; (1218 <pushData(unsigned long*)+0x68>)
    11b4:	4a19      	ldr	r2, [pc, #100]	; (121c <pushData(unsigned long*)+0x6c>)
    11b6:	6823      	ldr	r3, [r4, #0]
    11b8:	6811      	ldr	r1, [r2, #0]
    11ba:	3301      	adds	r3, #1
    11bc:	425a      	negs	r2, r3
    11be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    11c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    11c6:	bf58      	it	pl
    11c8:	4253      	negpl	r3, r2
    11ca:	428b      	cmp	r3, r1
    11cc:	d020      	beq.n	1210 <pushData(unsigned long*)+0x60>
    11ce:	4e14      	ldr	r6, [pc, #80]	; (1220 <pushData(unsigned long*)+0x70>)
    while(busy); busy=1;
    11d0:	6833      	ldr	r3, [r6, #0]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d1fc      	bne.n	11d0 <pushData(unsigned long*)+0x20>
    11d6:	2201      	movs	r2, #1
    11d8:	1f01      	subs	r1, r0, #4
    11da:	4d12      	ldr	r5, [pc, #72]	; (1224 <pushData(unsigned long*)+0x74>)
    11dc:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    11de:	6822      	ldr	r2, [r4, #0]
    11e0:	f851 0f04 	ldr.w	r0, [r1, #4]!
    11e4:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    11e8:	3301      	adds	r3, #1
    11ea:	2b80      	cmp	r3, #128	; 0x80
    11ec:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    11f0:	d1f5      	bne.n	11de <pushData(unsigned long*)+0x2e>
    tail = (tail+1)%MAXBUF;
    11f2:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1; // signal success.
    11f4:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    11f6:	3301      	adds	r3, #1
    11f8:	425a      	negs	r2, r3
    11fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    11fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1202:	bf58      	it	pl
    1204:	4253      	negpl	r3, r2
    busy=0;
    1206:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    1208:	6023      	str	r3, [r4, #0]
    busy=0;
    120a:	6032      	str	r2, [r6, #0]
  }
    120c:	bc70      	pop	{r4, r5, r6}
    120e:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    1210:	2000      	movs	r0, #0
  }
    1212:	bc70      	pop	{r4, r5, r6}
    1214:	4770      	bx	lr
    1216:	bf00      	nop
    1218:	2001f5d8 	.word	0x2001f5d8
    121c:	2001e804 	.word	0x2001e804
    1220:	2001e784 	.word	0x2001e784
    1224:	2000db40 	.word	0x2000db40

00001228 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    1228:	4b15      	ldr	r3, [pc, #84]	; (1280 <pullData(unsigned long*)+0x58>)
  {
    122a:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    122c:	4c15      	ldr	r4, [pc, #84]	; (1284 <pullData(unsigned long*)+0x5c>)
    122e:	6822      	ldr	r2, [r4, #0]
    1230:	681b      	ldr	r3, [r3, #0]
    1232:	429a      	cmp	r2, r3
    1234:	d020      	beq.n	1278 <pullData(unsigned long*)+0x50>
    1236:	4d14      	ldr	r5, [pc, #80]	; (1288 <pullData(unsigned long*)+0x60>)
    while(busy); busy=1;
    1238:	682b      	ldr	r3, [r5, #0]
    123a:	2b00      	cmp	r3, #0
    123c:	d1fc      	bne.n	1238 <pullData(unsigned long*)+0x10>
    123e:	2201      	movs	r2, #1
    1240:	1f01      	subs	r1, r0, #4
    1242:	4812      	ldr	r0, [pc, #72]	; (128c <pullData(unsigned long*)+0x64>)
    1244:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1246:	6822      	ldr	r2, [r4, #0]
    1248:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    124c:	3301      	adds	r3, #1
    124e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1252:	2b80      	cmp	r3, #128	; 0x80
    1254:	f841 2f04 	str.w	r2, [r1, #4]!
    1258:	d1f5      	bne.n	1246 <pullData(unsigned long*)+0x1e>
    head = (head+1)%MAXBUF;
    125a:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1;
    125c:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    125e:	3301      	adds	r3, #1
    1260:	425a      	negs	r2, r3
    1262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1266:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    126a:	bf58      	it	pl
    126c:	4253      	negpl	r3, r2
    busy=0;
    126e:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    1270:	6023      	str	r3, [r4, #0]
    busy=0;
    1272:	602a      	str	r2, [r5, #0]
  }
    1274:	bc30      	pop	{r4, r5}
    1276:	4770      	bx	lr
    if ( head==tail ) return 0;
    1278:	2000      	movs	r0, #0
  }
    127a:	bc30      	pop	{r4, r5}
    127c:	4770      	bx	lr
    127e:	bf00      	nop
    1280:	2001f5d8 	.word	0x2001f5d8
    1284:	2001e804 	.word	0x2001e804
    1288:	2001e784 	.word	0x2001e784
    128c:	2000db40 	.word	0x2000db40

00001290 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    1290:	4a54      	ldr	r2, [pc, #336]	; (13e4 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    1292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1296:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    129a:	f240 196d 	movw	r9, #365	; 0x16d
    129e:	4e52      	ldr	r6, [pc, #328]	; (13e8 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    12a0:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    12a2:	4f52      	ldr	r7, [pc, #328]	; (13ec <time2date(unsigned long, datetime_t*)+0x15c>)
    12a4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 1400 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    12a8:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    12ac:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    12b0:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    12b2:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    12b6:	4c4e      	ldr	r4, [pc, #312]	; (13f0 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    12b8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    12bc:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    12c0:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    12c4:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    12c6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    12ca:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    12cc:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    12d0:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    12d4:	4b47      	ldr	r3, [pc, #284]	; (13f4 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    12d6:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    12da:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    12de:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    12e0:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    12e2:	1ae2      	subs	r2, r4, r3
    12e4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    12e8:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    12ea:	089b      	lsrs	r3, r3, #2
    12ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    12f0:	1ae4      	subs	r4, r4, r3
    12f2:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    12f4:	b2c3      	uxtb	r3, r0
    12f6:	f240 1c6d 	movw	ip, #365	; 0x16d
    12fa:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    12fe:	f013 0403 	ands.w	r4, r3, #3
    1302:	fb06 f503 	mul.w	r5, r6, r3
    1306:	d108      	bne.n	131a <time2date(unsigned long, datetime_t*)+0x8a>
    1308:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    130c:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    1310:	d303      	bcc.n	131a <time2date(unsigned long, datetime_t*)+0x8a>
    1312:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    1316:	bf38      	it	cc
    1318:	46cc      	movcc	ip, r9
    131a:	4462      	add	r2, ip
    131c:	3001      	adds	r0, #1
    131e:	4596      	cmp	lr, r2
    1320:	d2e8      	bcs.n	12f4 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    1322:	4d35      	ldr	r5, [pc, #212]	; (13f8 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    1324:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    1326:	fba5 0503 	umull	r0, r5, r5, r3
    132a:	b3a4      	cbz	r4, 1396 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    132c:	096e      	lsrs	r6, r5, #5
    132e:	2764      	movs	r7, #100	; 0x64
    1330:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1334:	09ed      	lsrs	r5, r5, #7
    1336:	fb07 3616 	mls	r6, r7, r6, r3
    133a:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    133e:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    1342:	ebae 0e02 	sub.w	lr, lr, r2
    1346:	2300      	movs	r3, #0
    1348:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    134a:	4f2c      	ldr	r7, [pc, #176]	; (13fc <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    134c:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    134e:	e00a      	b.n	1366 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    1350:	f813 c007 	ldrb.w	ip, [r3, r7]
    1354:	4584      	cmp	ip, r0
    1356:	d837      	bhi.n	13c8 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    1358:	2a0c      	cmp	r2, #12
        time -= monthLength;
    135a:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    135e:	d012      	beq.n	1386 <time2date(unsigned long, datetime_t*)+0xf6>
    1360:	3201      	adds	r2, #1
    1362:	3301      	adds	r3, #1
    1364:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    1366:	2b01      	cmp	r3, #1
    1368:	fa5f fe83 	uxtb.w	lr, r3
    136c:	d1f0      	bne.n	1350 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    136e:	b91c      	cbnz	r4, 1378 <time2date(unsigned long, datetime_t*)+0xe8>
    1370:	b1f6      	cbz	r6, 13b0 <time2date(unsigned long, datetime_t*)+0x120>
    1372:	f04f 0c1d 	mov.w	ip, #29
    1376:	e001      	b.n	137c <time2date(unsigned long, datetime_t*)+0xec>
    1378:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    137c:	4560      	cmp	r0, ip
    137e:	d32d      	bcc.n	13dc <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    1380:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1384:	e7ec      	b.n	1360 <time2date(unsigned long, datetime_t*)+0xd0>
    1386:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    138a:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    138c:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    1390:	70c8      	strb	r0, [r1, #3]
  }
    1392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    1396:	2064      	movs	r0, #100	; 0x64
    1398:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    139a:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    139c:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    13a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    13a4:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    13a8:	b14e      	cbz	r6, 13be <time2date(unsigned long, datetime_t*)+0x12e>
    13aa:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    13ae:	e7c8      	b.n	1342 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    13b0:	2d00      	cmp	r5, #0
    13b2:	bf14      	ite	ne
    13b4:	f04f 0c1c 	movne.w	ip, #28
    13b8:	f04f 0c1d 	moveq.w	ip, #29
    13bc:	e7de      	b.n	137c <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    13be:	2d00      	cmp	r5, #0
    13c0:	d1bd      	bne.n	133e <time2date(unsigned long, datetime_t*)+0xae>
    13c2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    13c6:	e7bc      	b.n	1342 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    13c8:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    13cc:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    13ce:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    13d2:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    13d4:	f881 e002 	strb.w	lr, [r1, #2]
  }
    13d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    13dc:	f04f 0e02 	mov.w	lr, #2
    13e0:	e7d3      	b.n	138a <time2date(unsigned long, datetime_t*)+0xfa>
    13e2:	bf00      	nop
    13e4:	88888889 	.word	0x88888889
    13e8:	c28f5c29 	.word	0xc28f5c29
    13ec:	028f5c28 	.word	0x028f5c28
    13f0:	aaaaaaab 	.word	0xaaaaaaab
    13f4:	24924925 	.word	0x24924925
    13f8:	51eb851f 	.word	0x51eb851f
    13fc:	2000070c 	.word	0x2000070c
    1400:	00a3d70a 	.word	0x00a3d70a

00001404 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    1404:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    1406:	4a35      	ldr	r2, [pc, #212]	; (14dc <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    1408:	314e      	adds	r1, #78	; 0x4e
    140a:	b2c9      	uxtb	r1, r1
  {
    140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    1410:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    1414:	b1e1      	cbz	r1, 1450 <date2time(datetime_t*)+0x4c>
    1416:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    141a:	f240 73b3 	movw	r3, #1971	; 0x7b3
    141e:	4d30      	ldr	r5, [pc, #192]	; (14e0 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    1420:	4e30      	ldr	r6, [pc, #192]	; (14e4 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1422:	4f31      	ldr	r7, [pc, #196]	; (14e8 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    1424:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 14f4 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    1428:	4563      	cmp	r3, ip
    142a:	fb05 f403 	mul.w	r4, r5, r3
    142e:	d00f      	beq.n	1450 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    1430:	f013 0f03 	tst.w	r3, #3
    1434:	f103 0301 	add.w	r3, r3, #1
    1438:	d1f6      	bne.n	1428 <date2time(datetime_t*)+0x24>
    143a:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    143e:	d302      	bcc.n	1446 <date2time(datetime_t*)+0x42>
    1440:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    1444:	d3f0      	bcc.n	1428 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    1446:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1448:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    144a:	fb05 f403 	mul.w	r4, r5, r3
    144e:	d1ef      	bne.n	1430 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    1450:	f990 e002 	ldrsb.w	lr, [r0, #2]
    1454:	f1be 0f01 	cmp.w	lr, #1
    1458:	dd29      	ble.n	14ae <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    145a:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    145e:	4e23      	ldr	r6, [pc, #140]	; (14ec <date2time(datetime_t*)+0xe8>)
    1460:	2564      	movs	r5, #100	; 0x64
    1462:	f44f 74c8 	mov.w	r4, #400	; 0x190
    1466:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    146a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 14f8 <date2time(datetime_t*)+0xf4>
    146e:	4920      	ldr	r1, [pc, #128]	; (14f0 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1470:	0977      	lsrs	r7, r6, #5
    1472:	09f6      	lsrs	r6, r6, #7
    1474:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1478:	4d1b      	ldr	r5, [pc, #108]	; (14e8 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    147a:	fb04 3616 	mls	r6, r4, r6, r3
    147e:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    1482:	2301      	movs	r3, #1
    1484:	e007      	b.n	1496 <date2time(datetime_t*)+0x92>
    1486:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1488:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    148c:	3101      	adds	r1, #1
    148e:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1490:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1494:	d00b      	beq.n	14ae <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1496:	2b02      	cmp	r3, #2
    1498:	d1f5      	bne.n	1486 <date2time(datetime_t*)+0x82>
    149a:	2c00      	cmp	r4, #0
    149c:	d1f3      	bne.n	1486 <date2time(datetime_t*)+0x82>
    149e:	b90f      	cbnz	r7, 14a4 <date2time(datetime_t*)+0xa0>
    14a0:	2e00      	cmp	r6, #0
    14a2:	d1f0      	bne.n	1486 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    14a4:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    14a6:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    14a8:	3101      	adds	r1, #1
    14aa:	4573      	cmp	r3, lr
    14ac:	d1f3      	bne.n	1496 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    14ae:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    14b2:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    14b6:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    14ba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    14be:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    14c2:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    14c4:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    14c8:	f990 1003 	ldrsb.w	r1, [r0, #3]
    14cc:	4c06      	ldr	r4, [pc, #24]	; (14e8 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    14ce:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    14d0:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    14d2:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    14d6:	4410      	add	r0, r2
    14d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14dc:	01e13380 	.word	0x01e13380
    14e0:	c28f5c29 	.word	0xc28f5c29
    14e4:	028f5c28 	.word	0x028f5c28
    14e8:	00015180 	.word	0x00015180
    14ec:	51eb851f 	.word	0x51eb851f
    14f0:	2000070c 	.word	0x2000070c
    14f4:	00a3d70a 	.word	0x00a3d70a
    14f8:	00263b80 	.word	0x00263b80

000014fc <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    14fc:	2001      	movs	r0, #1
    14fe:	4770      	bx	lr

00001500 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    1500:	b500      	push	{lr}
    1502:	b083      	sub	sp, #12
    1504:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    1506:	f006 fb77 	bl	7bf8 <rtc_get>
    150a:	9901      	ldr	r1, [sp, #4]
    150c:	f7ff fec0 	bl	1290 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    1510:	2001      	movs	r0, #1
    1512:	b003      	add	sp, #12
    1514:	f85d fb04 	ldr.w	pc, [sp], #4

00001518 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	b082      	sub	sp, #8
    151c:	4614      	mov	r4, r2
    151e:	460d      	mov	r5, r1
    1520:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1522:	f006 fb69 	bl	7bf8 <rtc_get>
    1526:	4669      	mov	r1, sp
    1528:	f7ff feb2 	bl	1290 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    152c:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    1530:	4608      	mov	r0, r1
    t.month=month;
    1532:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    1536:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    153a:	f7ff ff63 	bl	1404 <date2time(datetime_t*)>
    153e:	f006 fb6d 	bl	7c1c <rtc_set>
    rtc_set_datetime(&t);
  }
    1542:	b002      	add	sp, #8
    1544:	bd70      	pop	{r4, r5, r6, pc}
    1546:	bf00      	nop

00001548 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	b082      	sub	sp, #8
    154c:	4614      	mov	r4, r2
    154e:	460d      	mov	r5, r1
    1550:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1552:	f006 fb51 	bl	7bf8 <rtc_get>
    1556:	4669      	mov	r1, sp
    1558:	f7ff fe9a 	bl	1290 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    155c:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    1560:	4608      	mov	r0, r1
    t.min=minutes;
    1562:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    1566:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    156a:	f7ff ff4b 	bl	1404 <date2time(datetime_t*)>
    156e:	f006 fb55 	bl	7c1c <rtc_set>
    rtc_set_datetime(&t);
  }
    1572:	b002      	add	sp, #8
    1574:	bd70      	pop	{r4, r5, r6, pc}
    1576:	bf00      	nop

00001578 <menuGetInt16(short*) [clone .isra.0]>:
#include "mConfig.h"
#include "menu.h"
#include "mRTC.h"
#include "mAcq.h"

static int menuGetInt16(int16_t *val)
    1578:	b510      	push	{r4, lr}
    157a:	4604      	mov	r4, r0
    157c:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    157e:	f007 fbfb 	bl	8d78 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1582:	2800      	cmp	r0, #0
    1584:	d0fb      	beq.n	157e <menuGetInt16(short*) [clone .isra.0]+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
    1586:	210d      	movs	r1, #13
    1588:	aa02      	add	r2, sp, #8
    158a:	2328      	movs	r3, #40	; 0x28
    158c:	480d      	ldr	r0, [pc, #52]	; (15c4 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    158e:	f005 ffc1 	bl	7514 <Stream::readBytesUntil(char, char*, unsigned int)>
    1592:	4603      	mov	r3, r0
  buffer[count]=0;
    1594:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1596:	a802      	add	r0, sp, #8
    1598:	3330      	adds	r3, #48	; 0x30
    159a:	446b      	add	r3, sp
    159c:	f803 2c28 	strb.w	r2, [r3, #-40]
    15a0:	f00a fa6e 	bl	ba80 <strlen>
    15a4:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    15a6:	a802      	add	r0, sp, #8
    15a8:	f007 fc50 	bl	8e4c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15ac:	4805      	ldr	r0, [pc, #20]	; (15c4 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    15ae:	f005 febb 	bl	7328 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    15b2:	aa01      	add	r2, sp, #4
    15b4:	4904      	ldr	r1, [pc, #16]	; (15c8 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    15b6:	a802      	add	r0, sp, #8
    15b8:	f009 fd96 	bl	b0e8 <sscanf>
    15bc:	9b01      	ldr	r3, [sp, #4]
    15be:	8023      	strh	r3, [r4, #0]
  return 1;
}
    15c0:	b00c      	add	sp, #48	; 0x30
    15c2:	bd10      	pop	{r4, pc}
    15c4:	20008754 	.word	0x20008754
    15c8:	20000634 	.word	0x20000634

000015cc <menuGet3Int(int*, int*, int*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
  return 1;
}

static int menuGet3Int(int *val1, int *val2, int *val3)
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	4606      	mov	r6, r0
    15d0:	b090      	sub	sp, #64	; 0x40
    15d2:	460c      	mov	r4, r1
    15d4:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    15d6:	f007 fbcf 	bl	8d78 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    15da:	2800      	cmp	r0, #0
    15dc:	d0fb      	beq.n	15d6 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
    15de:	aa06      	add	r2, sp, #24
    15e0:	210d      	movs	r1, #13
    15e2:	2328      	movs	r3, #40	; 0x28
    15e4:	4810      	ldr	r0, [pc, #64]	; (1628 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    15e6:	f005 ff95 	bl	7514 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    15ea:	f100 0340 	add.w	r3, r0, #64	; 0x40
    15ee:	eb0d 0003 	add.w	r0, sp, r3
    15f2:	2300      	movs	r3, #0
    15f4:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    15f8:	a806      	add	r0, sp, #24
    15fa:	f00a fa41 	bl	ba80 <strlen>
    15fe:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1600:	a806      	add	r0, sp, #24
    1602:	f007 fc23 	bl	8e4c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1606:	4808      	ldr	r0, [pc, #32]	; (1628 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1608:	f005 fe8e 	bl	7328 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    160c:	f10d 0317 	add.w	r3, sp, #23
    1610:	4632      	mov	r2, r6
    1612:	4906      	ldr	r1, [pc, #24]	; (162c <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    1614:	a806      	add	r0, sp, #24
    1616:	9400      	str	r4, [sp, #0]
    1618:	e9cd 3501 	strd	r3, r5, [sp, #4]
    161c:	f10d 0316 	add.w	r3, sp, #22
    1620:	f009 fd62 	bl	b0e8 <sscanf>
}
    1624:	b010      	add	sp, #64	; 0x40
    1626:	bd70      	pop	{r4, r5, r6, pc}
    1628:	20008754 	.word	0x20008754
    162c:	2000062c 	.word	0x2000062c

00001630 <menu1()>:

void menu1(void)
{   // have ':'
    1630:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1632:	f007 fba1 	bl	8d78 <usb_serial_available>
    while(!Serial.available()) ;
    1636:	2800      	cmp	r0, #0
    1638:	d0fb      	beq.n	1632 <menu1()+0x2>
    char ch=Serial.read();
    if(ch=='x') return;
}
    163a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    163e:	f007 bbdf 	b.w	8e00 <usb_serial_getchar>
    1642:	bf00      	nop

00001644 <menu2()>:

void menu2(void)
{   // have '?'
    1644:	b510      	push	{r4, lr}
    1646:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1648:	f007 fb96 	bl	8d78 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    164c:	2800      	cmp	r0, #0
    164e:	d0fb      	beq.n	1648 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1650:	f007 fbd6 	bl	8e00 <usb_serial_getchar>
    char ch=Serial.read();
    1654:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1656:	2870      	cmp	r0, #112	; 0x70
    1658:	d017      	beq.n	168a <menu2()+0x46>
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    165a:	2864      	cmp	r0, #100	; 0x64
    165c:	d056      	beq.n	170c <menu2()+0xc8>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    165e:	3863      	subs	r0, #99	; 0x63
    1660:	2811      	cmp	r0, #17
    1662:	d80c      	bhi.n	167e <menu2()+0x3a>
    1664:	e8df f000 	tbb	[pc, r0]
    1668:	700b0b44 	.word	0x700b0b44
    166c:	0b0b0b0b 	.word	0x0b0b0b0b
    1670:	0b0b0b0b 	.word	0x0b0b0b0b
    1674:	0b0b0b0b 	.word	0x0b0b0b0b
    1678:	617d      	.short	0x617d
    167a:	f007 fbc1 	bl	8e00 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    167e:	f007 fb7b 	bl	8d78 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1682:	2800      	cmp	r0, #0
    1684:	d1f9      	bne.n	167a <menu2()+0x36>

}
    1686:	b008      	add	sp, #32
    1688:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    168a:	a806      	add	r0, sp, #24
    168c:	f7ff ff38 	bl	1500 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1690:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1694:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1698:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    169c:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    16a0:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    16a4:	9000      	str	r0, [sp, #0]
    16a6:	4832      	ldr	r0, [pc, #200]	; (1770 <menu2()+0x12c>)
    16a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
    16ac:	e9cd 1401 	strd	r1, r4, [sp, #4]
    16b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    16b4:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    16b8:	492e      	ldr	r1, [pc, #184]	; (1774 <menu2()+0x130>)
    16ba:	f005 fe51 	bl	7360 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    16be:	210c      	movs	r1, #12
    16c0:	482d      	ldr	r0, [pc, #180]	; (1778 <menu2()+0x134>)
    16c2:	f007 fbc3 	bl	8e4c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    16c6:	4b2d      	ldr	r3, [pc, #180]	; (177c <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    16c8:	4829      	ldr	r0, [pc, #164]	; (1770 <menu2()+0x12c>)
    16ca:	6819      	ldr	r1, [r3, #0]
    16cc:	f005 fe20 	bl	7310 <Print::print(long)>
    16d0:	4827      	ldr	r0, [pc, #156]	; (1770 <menu2()+0x12c>)
    16d2:	f005 fe29 	bl	7328 <Print::println()>
    16d6:	210c      	movs	r1, #12
    16d8:	4829      	ldr	r0, [pc, #164]	; (1780 <menu2()+0x13c>)
    16da:	f007 fbb7 	bl	8e4c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    16de:	4b29      	ldr	r3, [pc, #164]	; (1784 <menu2()+0x140>)
	size_t print(int n)				{ return print((long)n); }
    16e0:	4823      	ldr	r0, [pc, #140]	; (1770 <menu2()+0x12c>)
    16e2:	f9b3 1000 	ldrsh.w	r1, [r3]
    16e6:	f005 fe13 	bl	7310 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    16ea:	4821      	ldr	r0, [pc, #132]	; (1770 <menu2()+0x12c>)
    16ec:	f005 fe1c 	bl	7328 <Print::println()>
    16f0:	210c      	movs	r1, #12
    16f2:	4825      	ldr	r0, [pc, #148]	; (1788 <menu2()+0x144>)
    16f4:	f007 fbaa 	bl	8e4c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    16f8:	4b24      	ldr	r3, [pc, #144]	; (178c <menu2()+0x148>)
	size_t print(int n)				{ return print((long)n); }
    16fa:	f9b3 1000 	ldrsh.w	r1, [r3]
    16fe:	481c      	ldr	r0, [pc, #112]	; (1770 <menu2()+0x12c>)
    1700:	f005 fe06 	bl	7310 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1704:	481a      	ldr	r0, [pc, #104]	; (1770 <menu2()+0x12c>)
    1706:	f005 fe0f 	bl	7328 <Print::println()>
    170a:	e7b8      	b.n	167e <menu2()+0x3a>
      rtc_get_datetime(&t);
    170c:	a806      	add	r0, sp, #24
    170e:	f7ff fef7 	bl	1500 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1712:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1716:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    171a:	9000      	str	r0, [sp, #0]
    171c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1720:	491b      	ldr	r1, [pc, #108]	; (1790 <menu2()+0x14c>)
    1722:	4813      	ldr	r0, [pc, #76]	; (1770 <menu2()+0x12c>)
    1724:	f005 fe1c 	bl	7360 <Print::printf(char const*, ...)>
    1728:	e7a9      	b.n	167e <menu2()+0x3a>
      rtc_get_datetime(&t);
    172a:	a806      	add	r0, sp, #24
    172c:	f7ff fee8 	bl	1500 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1730:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1734:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1738:	9000      	str	r0, [sp, #0]
    173a:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    173e:	4915      	ldr	r1, [pc, #84]	; (1794 <menu2()+0x150>)
    1740:	480b      	ldr	r0, [pc, #44]	; (1770 <menu2()+0x12c>)
    1742:	f005 fe0d 	bl	7360 <Print::printf(char const*, ...)>
    1746:	e79a      	b.n	167e <menu2()+0x3a>
    1748:	210c      	movs	r1, #12
    174a:	480b      	ldr	r0, [pc, #44]	; (1778 <menu2()+0x134>)
    174c:	f007 fb7e 	bl	8e4c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1750:	4b0a      	ldr	r3, [pc, #40]	; (177c <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1752:	4807      	ldr	r0, [pc, #28]	; (1770 <menu2()+0x12c>)
    1754:	6819      	ldr	r1, [r3, #0]
    1756:	f005 fddb 	bl	7310 <Print::print(long)>
    175a:	4805      	ldr	r0, [pc, #20]	; (1770 <menu2()+0x12c>)
    175c:	f005 fde4 	bl	7328 <Print::println()>
    1760:	e78d      	b.n	167e <menu2()+0x3a>
    1762:	210c      	movs	r1, #12
    1764:	4806      	ldr	r0, [pc, #24]	; (1780 <menu2()+0x13c>)
    1766:	f007 fb71 	bl	8e4c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    176a:	4b06      	ldr	r3, [pc, #24]	; (1784 <menu2()+0x140>)
    176c:	e7c5      	b.n	16fa <menu2()+0xb6>
    176e:	bf00      	nop
    1770:	20008754 	.word	0x20008754
    1774:	20000438 	.word	0x20000438
    1778:	2000045c 	.word	0x2000045c
    177c:	20008d10 	.word	0x20008d10
    1780:	2000046c 	.word	0x2000046c
    1784:	20008d74 	.word	0x20008d74
    1788:	2000047c 	.word	0x2000047c
    178c:	20008d72 	.word	0x20008d72
    1790:	2000048c 	.word	0x2000048c
    1794:	200004a8 	.word	0x200004a8

00001798 <menu3()>:

void menu3(void)
{   // have '!'
    1798:	b510      	push	{r4, lr}
    179a:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    179c:	f007 faec 	bl	8d78 <usb_serial_available>

    while(!Serial.available()) ;
    17a0:	2800      	cmp	r0, #0
    17a2:	d0fb      	beq.n	179c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    17a4:	f007 fb2c 	bl	8e00 <usb_serial_getchar>
    char ch=Serial.read();
    17a8:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    17aa:	2864      	cmp	r0, #100	; 0x64
    17ac:	d00d      	beq.n	17ca <menu3()+0x32>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    17ae:	3863      	subs	r0, #99	; 0x63
    17b0:	2811      	cmp	r0, #17
    17b2:	d814      	bhi.n	17de <menu3()+0x46>
    17b4:	e8df f000 	tbb	[pc, r0]
    17b8:	15131353 	.word	0x15131353
    17bc:	13131313 	.word	0x13131313
    17c0:	13131313 	.word	0x13131313
    17c4:	13131313 	.word	0x13131313
    17c8:	473c      	.short	0x473c
      menuGet3Int(&year,&month,&day);
    17ca:	aa02      	add	r2, sp, #8
    17cc:	a901      	add	r1, sp, #4
    17ce:	4668      	mov	r0, sp
    17d0:	f7ff fefc 	bl	15cc <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    17d4:	9800      	ldr	r0, [sp, #0]
    17d6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    17da:	f7ff fe9d 	bl	1518 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    17de:	b00c      	add	sp, #48	; 0x30
    17e0:	bd10      	pop	{r4, pc}
        virtual int available() { return usb_serial_available(); }
    17e2:	f007 fac9 	bl	8d78 <usb_serial_available>
  while(!Serial.available()) continue;
    17e6:	2800      	cmp	r0, #0
    17e8:	d0fb      	beq.n	17e2 <menu3()+0x4a>
  int count = Serial.readBytesUntil('\r',buffer,40);
    17ea:	210d      	movs	r1, #13
    17ec:	aa02      	add	r2, sp, #8
    17ee:	2328      	movs	r3, #40	; 0x28
    17f0:	481e      	ldr	r0, [pc, #120]	; (186c <menu3()+0xd4>)
    17f2:	f005 fe8f 	bl	7514 <Stream::readBytesUntil(char, char*, unsigned int)>
    17f6:	4603      	mov	r3, r0
  buffer[count]=0;
    17f8:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    17fa:	a802      	add	r0, sp, #8
    17fc:	3330      	adds	r3, #48	; 0x30
    17fe:	446b      	add	r3, sp
    1800:	f803 2c28 	strb.w	r2, [r3, #-40]
    1804:	f00a f93c 	bl	ba80 <strlen>
    1808:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    180a:	a802      	add	r0, sp, #8
    180c:	f007 fb1e 	bl	8e4c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1810:	4816      	ldr	r0, [pc, #88]	; (186c <menu3()+0xd4>)
    1812:	f005 fd89 	bl	7328 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1816:	aa01      	add	r2, sp, #4
    1818:	4915      	ldr	r1, [pc, #84]	; (1870 <menu3()+0xd8>)
    181a:	a802      	add	r0, sp, #8
    181c:	f009 fc64 	bl	b0e8 <sscanf>
    1820:	9801      	ldr	r0, [sp, #4]
    1822:	4b14      	ldr	r3, [pc, #80]	; (1874 <menu3()+0xdc>)
    1824:	6018      	str	r0, [r3, #0]
}
    1826:	b00c      	add	sp, #48	; 0x30
    1828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    182c:	f7fe bfaa 	b.w	784 <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1830:	4c11      	ldr	r4, [pc, #68]	; (1878 <menu3()+0xe0>)
    1832:	4620      	mov	r0, r4
    1834:	f7ff fea0 	bl	1578 <menuGetInt16(short*) [clone .isra.0]>
    1838:	f9b4 3000 	ldrsh.w	r3, [r4]
    183c:	2b00      	cmp	r3, #0
    183e:	dace      	bge.n	17de <menu3()+0x46>
    1840:	2300      	movs	r3, #0
    1842:	8023      	strh	r3, [r4, #0]
    1844:	e7cb      	b.n	17de <menu3()+0x46>
      menuGet3Int(&hour,&minutes,&seconds);
    1846:	aa02      	add	r2, sp, #8
    1848:	a901      	add	r1, sp, #4
    184a:	4668      	mov	r0, sp
    184c:	f7ff febe 	bl	15cc <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1850:	9800      	ldr	r0, [sp, #0]
    1852:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1856:	f7ff fe77 	bl	1548 <rtcSetTime(int, int, int)>
}
    185a:	b00c      	add	sp, #48	; 0x30
    185c:	bd10      	pop	{r4, pc}
      menuGetInt16(&proc);
    185e:	4807      	ldr	r0, [pc, #28]	; (187c <menu3()+0xe4>)
}
    1860:	b00c      	add	sp, #48	; 0x30
    1862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1866:	f7ff be87 	b.w	1578 <menuGetInt16(short*) [clone .isra.0]>
    186a:	bf00      	nop
    186c:	20008754 	.word	0x20008754
    1870:	20000634 	.word	0x20000634
    1874:	20008d10 	.word	0x20008d10
    1878:	20008d74 	.word	0x20008d74
    187c:	20008d72 	.word	0x20008d72

00001880 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1880:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1882:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1886:	b084      	sub	sp, #16
    1888:	468c      	mov	ip, r1
    188a:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    188c:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    188e:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1894:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    1898:	ea4f 124c 	mov.w	r2, ip, lsl #5
    189c:	4629      	mov	r1, r5
    189e:	6a20      	ldr	r0, [r4, #32]
    18a0:	f001 f934 	bl	2b0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    18a4:	2801      	cmp	r0, #1
    18a6:	d106      	bne.n	18b6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    18a8:	4632      	mov	r2, r6
    18aa:	4629      	mov	r1, r5
    18ac:	6a20      	ldr	r0, [r4, #32]
    18ae:	f001 f911 	bl	2ad4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    18b2:	b004      	add	sp, #16
    18b4:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    18b6:	2000      	movs	r0, #0
}
    18b8:	b004      	add	sp, #16
    18ba:	bd70      	pop	{r4, r5, r6, pc}

000018bc <ExFatFile::close()>:
bool ExFatFile::close() {
    18bc:	b510      	push	{r4, lr}
    18be:	4604      	mov	r4, r0
  bool rtn = sync();
    18c0:	f000 fcfa 	bl	22b8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    18c4:	2300      	movs	r3, #0
    18c6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    18ca:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    18ce:	bd10      	pop	{r4, pc}

000018d0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    18d0:	b538      	push	{r3, r4, r5, lr}
    18d2:	460d      	mov	r5, r1
  if (isOpen()) {
    18d4:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    18d8:	b109      	cbz	r1, 18de <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    18da:	2000      	movs	r0, #0
}
    18dc:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    18de:	2238      	movs	r2, #56	; 0x38
    18e0:	4604      	mov	r4, r0
    18e2:	f009 fd87 	bl	b3f4 <memset>
  m_flags = FILE_FLAG_READ;
    18e6:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    18e8:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    18ea:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    18ec:	4618      	mov	r0, r3
    18ee:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    18f2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    18f6:	bd38      	pop	{r3, r4, r5, pc}

000018f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    18f8:	b4f0      	push	{r4, r5, r6, r7}
    18fa:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    18fc:	7809      	ldrb	r1, [r1, #0]
    18fe:	2920      	cmp	r1, #32
    1900:	d103      	bne.n	190a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1902:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1906:	2c20      	cmp	r4, #32
    1908:	d0fb      	beq.n	1902 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    190a:	6015      	str	r5, [r2, #0]
  fname->end = path;
    190c:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    190e:	782c      	ldrb	r4, [r5, #0]
    1910:	2c2f      	cmp	r4, #47	; 0x2f
    1912:	d011      	beq.n	1938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1914:	b184      	cbz	r4, 1938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1916:	1c6e      	adds	r6, r5, #1
    1918:	2c3c      	cmp	r4, #60	; 0x3c
    191a:	4f1d      	ldr	r7, [pc, #116]	; (1990 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    191c:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    191e:	d82a      	bhi.n	1976 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1920:	2c21      	cmp	r4, #33	; 0x21
    1922:	d812      	bhi.n	194a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1924:	f104 3cff 	add.w	ip, r4, #4294967295
    1928:	f1bc 0f1e 	cmp.w	ip, #30
    192c:	d816      	bhi.n	195c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    192e:	2000      	movs	r0, #0
    1930:	bcf0      	pop	{r4, r5, r6, r7}
    1932:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    1934:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1938:	2c20      	cmp	r4, #32
    193a:	d0fb      	beq.n	1934 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    193c:	2c2f      	cmp	r4, #47	; 0x2f
    193e:	d0f9      	beq.n	1934 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1940:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1942:	4611      	mov	r1, r2
}
    1944:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1946:	f000 bfb3 	b.w	28b0 <ExFatFile::hashName(ExName_t*)>
    194a:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    194e:	fa5f fc8c 	uxtb.w	ip, ip
    1952:	fa27 fc0c 	lsr.w	ip, r7, ip
    1956:	f01c 0f01 	tst.w	ip, #1
    195a:	d1e8      	bne.n	192e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    195c:	2c2e      	cmp	r4, #46	; 0x2e
    195e:	d001      	beq.n	1964 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1960:	2c20      	cmp	r4, #32
    1962:	d10d      	bne.n	1980 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    1964:	f816 4b01 	ldrb.w	r4, [r6], #1
    1968:	2c00      	cmp	r4, #0
    196a:	d0e5      	beq.n	1938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    196c:	2c2f      	cmp	r4, #47	; 0x2f
    196e:	d0e3      	beq.n	1938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1970:	2c3c      	cmp	r4, #60	; 0x3c
    1972:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1974:	d9d4      	bls.n	1920 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1976:	2c5c      	cmp	r4, #92	; 0x5c
    1978:	d0d9      	beq.n	192e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    197a:	d903      	bls.n	1984 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    197c:	2c7c      	cmp	r4, #124	; 0x7c
    197e:	d0d6      	beq.n	192e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1980:	6096      	str	r6, [r2, #8]
    1982:	e7ef      	b.n	1964 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1984:	3c3e      	subs	r4, #62	; 0x3e
    1986:	2c01      	cmp	r4, #1
    1988:	d8fa      	bhi.n	1980 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    198a:	2000      	movs	r0, #0
    198c:	bcf0      	pop	{r4, r5, r6, r7}
    198e:	4770      	bx	lr
    1990:	05002101 	.word	0x05002101

00001994 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    1998:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    199c:	b083      	sub	sp, #12
    199e:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    19a0:	07dc      	lsls	r4, r3, #31
    19a2:	d574      	bpl.n	1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    19a4:	0658      	lsls	r0, r3, #25
    19a6:	460f      	mov	r7, r1
    19a8:	4690      	mov	r8, r2
    19aa:	f140 80b0 	bpl.w	1b0e <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    19ae:	e9d5 2300 	ldrd	r2, r3, [r5]
    19b2:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    19b6:	eb18 0402 	adds.w	r4, r8, r2
    19ba:	f143 0300 	adc.w	r3, r3, #0
    19be:	42a1      	cmp	r1, r4
    19c0:	eb70 0303 	sbcs.w	r3, r0, r3
    19c4:	f0c0 80a9 	bcc.w	1b1a <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    19c8:	f1b8 0f00 	cmp.w	r8, #0
    19cc:	d05b      	beq.n	1a86 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    19ce:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    19d0:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    19d4:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    19d8:	f8d5 a020 	ldr.w	sl, [r5, #32]
    19dc:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    19e0:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    19e2:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    19e6:	2c00      	cmp	r4, #0
    19e8:	d170      	bne.n	1acc <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    19ea:	4313      	orrs	r3, r2
    19ec:	d170      	bne.n	1ad0 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    19ee:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    19f2:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    19f4:	bf4c      	ite	mi
    19f6:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    19fa:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    19fc:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    19fe:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1a02:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1a04:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1a08:	0a63      	lsrs	r3, r4, #9
    1a0a:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1a0c:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1a10:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    1a12:	f1bb 0f00 	cmp.w	fp, #0
    1a16:	d145      	bne.n	1aa4 <ExFatFile::read(void*, unsigned int)+0x110>
    1a18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1a1c:	d342      	bcc.n	1aa4 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    1a1e:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    1a22:	4291      	cmp	r1, r2
    1a24:	d03e      	beq.n	1aa4 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    1a26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1a2a:	d358      	bcc.n	1ade <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    1a2c:	f04f 0b01 	mov.w	fp, #1
    1a30:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1a34:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1a38:	0a73      	lsrs	r3, r6, #9
    1a3a:	459b      	cmp	fp, r3
    1a3c:	bf28      	it	cs
    1a3e:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1a40:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1a42:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1a46:	d80a      	bhi.n	1a5e <ExFatFile::read(void*, unsigned int)+0xca>
    1a48:	eb01 030b 	add.w	r3, r1, fp
    1a4c:	429a      	cmp	r2, r3
    1a4e:	d206      	bcs.n	1a5e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1a50:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1a54:	9101      	str	r1, [sp, #4]
    1a56:	f004 ff79 	bl	694c <FsCache::sync()>
    1a5a:	9901      	ldr	r1, [sp, #4]
    1a5c:	b1b8      	cbz	r0, 1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1a5e:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1a62:	465b      	mov	r3, fp
    1a64:	6802      	ldr	r2, [r0, #0]
    1a66:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1a6a:	463a      	mov	r2, r7
    1a6c:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1a6e:	b170      	cbz	r0, 1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1a70:	4623      	mov	r3, r4
    dst += n;
    1a72:	4427      	add	r7, r4
    m_curPosition += n;
    1a74:	e9d5 1200 	ldrd	r1, r2, [r5]
    1a78:	185b      	adds	r3, r3, r1
    1a7a:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1a7e:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1a80:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1a84:	d1a8      	bne.n	19d8 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1a86:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    1a88:	b003      	add	sp, #12
    1a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1a8e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1a92:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1a96:	f043 0302 	orr.w	r3, r3, #2
    1a9a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1a9e:	b003      	add	sp, #12
    1aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1aa4:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1aa8:	2200      	movs	r2, #0
    1aaa:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1aae:	42b4      	cmp	r4, r6
    1ab0:	bf28      	it	cs
    1ab2:	4634      	movcs	r4, r6
    1ab4:	f004 ff76 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1ab8:	2800      	cmp	r0, #0
    1aba:	d0e8      	beq.n	1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1abc:	eb00 010b 	add.w	r1, r0, fp
    1ac0:	4622      	mov	r2, r4
    1ac2:	4638      	mov	r0, r7
    1ac4:	f005 ffca 	bl	7a5c <memcpy>
    m_curPosition += n;
    1ac8:	4623      	mov	r3, r4
    1aca:	e7d2      	b.n	1a72 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1acc:	69aa      	ldr	r2, [r5, #24]
    1ace:	e796      	b.n	19fe <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1ad0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1ad4:	065b      	lsls	r3, r3, #25
    1ad6:	d50e      	bpl.n	1af6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1ad8:	69aa      	ldr	r2, [r5, #24]
    1ada:	3201      	adds	r2, #1
    1adc:	e78e      	b.n	19fc <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1ade:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1ae2:	463a      	mov	r2, r7
    1ae4:	6803      	ldr	r3, [r0, #0]
    1ae6:	691b      	ldr	r3, [r3, #16]
    1ae8:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1aea:	2800      	cmp	r0, #0
    1aec:	d0cf      	beq.n	1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
    1aee:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1af2:	461c      	mov	r4, r3
    1af4:	e7bd      	b.n	1a72 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1af6:	464a      	mov	r2, r9
    1af8:	4650      	mov	r0, sl
    1afa:	69a9      	ldr	r1, [r5, #24]
    1afc:	f001 f848 	bl	2b90 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1b00:	2800      	cmp	r0, #0
    1b02:	dbc4      	blt.n	1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1b04:	d00c      	beq.n	1b20 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1b06:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1b0a:	69aa      	ldr	r2, [r5, #24]
    1b0c:	e777      	b.n	19fe <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1b0e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1b12:	0719      	lsls	r1, r3, #28
    1b14:	f57f af58 	bpl.w	19c8 <ExFatFile::read(void*, unsigned int)+0x34>
    1b18:	e749      	b.n	19ae <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1b1a:	eba1 0802 	sub.w	r8, r1, r2
    1b1e:	e753      	b.n	19c8 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1b20:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1b24:	f013 0f50 	tst.w	r3, #80	; 0x50
    1b28:	d0b1      	beq.n	1a8e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1b2a:	eba8 0806 	sub.w	r8, r8, r6
    1b2e:	4640      	mov	r0, r8
    1b30:	e7aa      	b.n	1a88 <ExFatFile::read(void*, unsigned int)+0xf4>
    1b32:	bf00      	nop

00001b34 <ExFatFile::peek()>:
int ExFatFile::peek() {
    1b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b36:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1b38:	2201      	movs	r2, #1
    1b3a:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    1b3c:	6985      	ldr	r5, [r0, #24]
    1b3e:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    1b42:	e9d0 6700 	ldrd	r6, r7, [r0]
    1b46:	f7ff ff25 	bl	1994 <ExFatFile::read(void*, unsigned int)>
    1b4a:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    1b4c:	61a5      	str	r5, [r4, #24]
    1b4e:	bf0c      	ite	eq
    1b50:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1b54:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    1b58:	e9c4 6700 	strd	r6, r7, [r4]
}
    1b5c:	b003      	add	sp, #12
    1b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b60 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b64:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    1b66:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1b6a:	b083      	sub	sp, #12
    1b6c:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1b6e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1b72:	2b00      	cmp	r3, #0
    1b74:	d051      	beq.n	1c1a <ExFatFile::seekSet(unsigned long long)+0xba>
    1b76:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1b78:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1b7c:	45bc      	cmp	ip, r7
    1b7e:	bf08      	it	eq
    1b80:	4291      	cmpeq	r1, r2
    1b82:	d05c      	beq.n	1c3e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1b84:	ea56 0207 	orrs.w	r2, r6, r7
    1b88:	d04d      	beq.n	1c26 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1b8a:	071d      	lsls	r5, r3, #28
    1b8c:	d504      	bpl.n	1b98 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1b8e:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1b92:	42b0      	cmp	r0, r6
    1b94:	41ba      	sbcs	r2, r7
    1b96:	d340      	bcc.n	1c1a <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1b98:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1b9c:	1e75      	subs	r5, r6, #1
    1b9e:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1ba2:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1ba4:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    1ba8:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    1bac:	3209      	adds	r2, #9
    1bae:	b2d2      	uxtb	r2, r2
    1bb0:	f1c2 0e20 	rsb	lr, r2, #32
    1bb4:	40d5      	lsrs	r5, r2
    1bb6:	f1a2 0920 	sub.w	r9, r2, #32
    1bba:	fa00 fb0e 	lsl.w	fp, r0, lr
    1bbe:	fa20 f009 	lsr.w	r0, r0, r9
    1bc2:	ea45 050b 	orr.w	r5, r5, fp
    1bc6:	4305      	orrs	r5, r0
  if (isContiguous()) {
    1bc8:	9801      	ldr	r0, [sp, #4]
    1bca:	0640      	lsls	r0, r0, #25
    1bcc:	d433      	bmi.n	1c36 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1bce:	1e48      	subs	r0, r1, #1
    1bd0:	fa20 f202 	lsr.w	r2, r0, r2
    1bd4:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    1bd8:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1bdc:	fa00 fe0e 	lsl.w	lr, r0, lr
    1be0:	fa20 f009 	lsr.w	r0, r0, r9
    1be4:	ea42 020e 	orr.w	r2, r2, lr
    1be8:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    1bec:	d001      	beq.n	1bf2 <ExFatFile::seekSet(unsigned long long)+0x92>
    1bee:	4295      	cmp	r5, r2
    1bf0:	d229      	bcs.n	1c46 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1bf2:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1bf4:	bf4c      	ite	mi
    1bf6:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    1bfa:	69e3      	ldrpl	r3, [r4, #28]
    1bfc:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    1bfe:	f104 0918 	add.w	r9, r4, #24
    1c02:	e006      	b.n	1c12 <ExFatFile::seekSet(unsigned long long)+0xb2>
    1c04:	69a1      	ldr	r1, [r4, #24]
    1c06:	3d01      	subs	r5, #1
    1c08:	6a20      	ldr	r0, [r4, #32]
    1c0a:	f000 ffc1 	bl	2b90 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1c0e:	2800      	cmp	r0, #0
    1c10:	dd03      	ble.n	1c1a <ExFatFile::seekSet(unsigned long long)+0xba>
    1c12:	464a      	mov	r2, r9
  while (nNew--) {
    1c14:	2d00      	cmp	r5, #0
    1c16:	d1f5      	bne.n	1c04 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    1c18:	e007      	b.n	1c2a <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    1c1a:	2000      	movs	r0, #0
  m_curCluster = tmp;
    1c1c:	f8c4 8018 	str.w	r8, [r4, #24]
}
    1c20:	b003      	add	sp, #12
    1c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    1c26:	2300      	movs	r3, #0
    1c28:	6183      	str	r3, [r0, #24]
  return true;
    1c2a:	2001      	movs	r0, #1
  m_curPosition = pos;
    1c2c:	e9c4 6700 	strd	r6, r7, [r4]
}
    1c30:	b003      	add	sp, #12
    1c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    1c36:	69e3      	ldr	r3, [r4, #28]
    1c38:	442b      	add	r3, r5
    1c3a:	61a3      	str	r3, [r4, #24]
    goto done;
    1c3c:	e7f5      	b.n	1c2a <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    1c3e:	2001      	movs	r0, #1
}
    1c40:	b003      	add	sp, #12
    1c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    1c46:	1aad      	subs	r5, r5, r2
    1c48:	e7d9      	b.n	1bfe <ExFatFile::seekSet(unsigned long long)+0x9e>
    1c4a:	bf00      	nop

00001c4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    1c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c50:	4617      	mov	r7, r2
    1c52:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    1c56:	b08f      	sub	sp, #60	; 0x3c
    1c58:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    1c5a:	2a00      	cmp	r2, #0
    1c5c:	f040 80d7 	bne.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    1c60:	468b      	mov	fp, r1
    1c62:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    1c66:	f011 0f50 	tst.w	r1, #80	; 0x50
    1c6a:	f000 80d0 	beq.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    1c6e:	f003 0103 	and.w	r1, r3, #3
    1c72:	469a      	mov	sl, r3
    1c74:	2903      	cmp	r1, #3
    1c76:	f000 80ca 	beq.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    1c7a:	3101      	adds	r1, #1
    1c7c:	f003 0008 	and.w	r0, r3, #8
    1c80:	ea41 0300 	orr.w	r3, r1, r0
    1c84:	9302      	str	r3, [sp, #8]
  if (fname) {
    1c86:	2f00      	cmp	r7, #0
    1c88:	f000 80cb 	beq.w	1e22 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1c8c:	6939      	ldr	r1, [r7, #16]
    1c8e:	f101 080e 	add.w	r8, r1, #14
    1c92:	49b6      	ldr	r1, [pc, #728]	; (1f6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    1c94:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    1c98:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1c9c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    1ca0:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1ca2:	f108 0802 	add.w	r8, r8, #2
    1ca6:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    1caa:	d005      	beq.n	1cb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    1cac:	2000      	movs	r0, #0
    1cae:	2100      	movs	r1, #0
    m_curCluster = 0;
    1cb0:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    1cb4:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    1cb8:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1cba:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    1cbc:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cc2:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    1cc4:	2220      	movs	r2, #32
    1cc6:	a906      	add	r1, sp, #24
    1cc8:	4658      	mov	r0, fp
    1cca:	f7ff fe63 	bl	1994 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1cce:	b300      	cbz	r0, 1d12 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    1cd0:	2820      	cmp	r0, #32
    1cd2:	f040 809c 	bne.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    1cd6:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    1cda:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1cde:	2a00      	cmp	r2, #0
    1ce0:	f2c0 80a2 	blt.w	1e28 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    1ce4:	b934      	cbnz	r4, 1cf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    1ce6:	f8db 2000 	ldr.w	r2, [fp]
    1cea:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    1cee:	f8db 2018 	ldr.w	r2, [fp, #24]
    1cf2:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    1cf4:	4544      	cmp	r4, r8
    1cf6:	d201      	bcs.n	1cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    1cf8:	3401      	adds	r4, #1
    1cfa:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	f000 8113 	beq.w	1f28 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    1d02:	2220      	movs	r2, #32
    1d04:	a906      	add	r1, sp, #24
    1d06:	4658      	mov	r0, fp
      inSet = false;
    1d08:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    1d0a:	f7ff fe43 	bl	1994 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1d0e:	2800      	cmp	r0, #0
    1d10:	d1de      	bne.n	1cd0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    1d12:	f41a 7f00 	tst.w	sl, #512	; 0x200
    1d16:	d07a      	beq.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1d18:	9b02      	ldr	r3, [sp, #8]
    1d1a:	079b      	lsls	r3, r3, #30
    1d1c:	d577      	bpl.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1d1e:	2f00      	cmp	r7, #0
    1d20:	d075      	beq.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    1d22:	4544      	cmp	r4, r8
    1d24:	d217      	bcs.n	1d56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    1d26:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    1d2a:	2220      	movs	r2, #32
    1d2c:	a906      	add	r1, sp, #24
    1d2e:	4658      	mov	r0, fp
    1d30:	f7ff fe30 	bl	1994 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    1d34:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    1d36:	2800      	cmp	r0, #0
    1d38:	d061      	beq.n	1dfe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    1d3a:	2820      	cmp	r0, #32
    1d3c:	d167      	bne.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    1d3e:	b92c      	cbnz	r4, 1d4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    1d40:	f8db 2000 	ldr.w	r2, [fp]
    1d44:	f8db a018 	ldr.w	sl, [fp, #24]
    1d48:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    1d4c:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    1d4e:	45a0      	cmp	r8, r4
    1d50:	d8eb      	bhi.n	1d2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    1d52:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    1d56:	2238      	movs	r2, #56	; 0x38
    1d58:	2100      	movs	r1, #0
    1d5a:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    1d5c:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    1d60:	f009 fb48 	bl	b3f4 <memset>
  ExFatVolume* volume() const {return m_vol;}
    1d64:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    1d68:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    1d6c:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    1d6e:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    1d70:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    1d72:	2600      	movs	r6, #0
  m_dirPos = freePos;
    1d74:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    1d78:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    1d7c:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    1d7e:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    1d82:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    1d84:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    1d86:	f1b8 0f00 	cmp.w	r8, #0
    1d8a:	d033      	beq.n	1df4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    1d8c:	f108 39ff 	add.w	r9, r8, #4294967295
    1d90:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    1d92:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 1f70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    1d96:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    1d9a:	2201      	movs	r2, #1
    1d9c:	4659      	mov	r1, fp
    1d9e:	4628      	mov	r0, r5
    1da0:	f7ff fd6e 	bl	1880 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    1da4:	4604      	mov	r4, r0
    1da6:	b390      	cbz	r0, 1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1da8:	f990 2000 	ldrsb.w	r2, [r0]
    1dac:	2a00      	cmp	r2, #0
    1dae:	db2e      	blt.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    1db0:	2220      	movs	r2, #32
    1db2:	2100      	movs	r1, #0
    1db4:	f009 fb1e 	bl	b3f4 <memset>
    if (i == 0) {
    1db8:	2e00      	cmp	r6, #0
    1dba:	f000 80bc 	beq.w	1f36 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    1dbe:	f1bb 0f01 	cmp.w	fp, #1
    1dc2:	f000 80d7 	beq.w	1f74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    1dc6:	23c1      	movs	r3, #193	; 0xc1
    1dc8:	46a3      	mov	fp, r4
    1dca:	341e      	adds	r4, #30
    1dcc:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    1dd0:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    1dd2:	4638      	mov	r0, r7
    1dd4:	b91b      	cbnz	r3, 1dde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    1dd6:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    1dda:	429a      	cmp	r2, r3
    1ddc:	d005      	beq.n	1dea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    1dde:	f004 fe09 	bl	69f4 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    1de2:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    1de6:	45a3      	cmp	fp, r4
    1de8:	d1f2      	bne.n	1dd0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    1dea:	3601      	adds	r6, #1
    1dec:	fa5f fb86 	uxtb.w	fp, r6
    1df0:	45d8      	cmp	r8, fp
    1df2:	d8d2      	bhi.n	1d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    1df4:	4628      	mov	r0, r5
    1df6:	f000 fa5f 	bl	22b8 <ExFatFile::sync()>
    1dfa:	4606      	mov	r6, r0
    1dfc:	e00d      	b.n	1e1a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    1dfe:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    1e00:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    1e04:	f000 fa88 	bl	2318 <ExFatFile::addDirCluster()>
    1e08:	2800      	cmp	r0, #0
    1e0a:	f040 8091 	bne.w	1f30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    1e0e:	2300      	movs	r3, #0
  return false;
    1e10:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    1e12:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    1e16:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    1e1a:	4630      	mov	r0, r6
    1e1c:	b00f      	add	sp, #60	; 0x3c
    1e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    1e22:	f04f 0803 	mov.w	r8, #3
    1e26:	e747      	b.n	1cb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    1e28:	bb56      	cbnz	r6, 1e80 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    1e2a:	4544      	cmp	r4, r8
    1e2c:	bf38      	it	cc
    1e2e:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    1e30:	2b85      	cmp	r3, #133	; 0x85
    1e32:	f47f af47 	bne.w	1cc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    1e36:	4631      	mov	r1, r6
    1e38:	2238      	movs	r2, #56	; 0x38
    1e3a:	4628      	mov	r0, r5
      inSet = true;
    1e3c:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    1e3e:	f009 fad9 	bl	b3f4 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    1e42:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    1e46:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1e4a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    1e4e:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    1e52:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    1e54:	bf58      	it	pl
    1e56:	f043 0308 	orrpl.w	r3, r3, #8
    1e5a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    1e5e:	f8db 3000 	ldr.w	r3, [fp]
    1e62:	f8db 2020 	ldr.w	r2, [fp, #32]
    1e66:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    1e68:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    1e6a:	f8db 2018 	ldr.w	r2, [fp, #24]
    1e6e:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    1e72:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    1e76:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    1e7a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    1e7e:	e721      	b.n	1cc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    1e80:	2bc0      	cmp	r3, #192	; 0xc0
    1e82:	d028      	beq.n	1ed6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    1e84:	2bc1      	cmp	r3, #193	; 0xc1
    1e86:	f47f af3c 	bne.w	1d02 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    1e8a:	463a      	mov	r2, r7
    1e8c:	a906      	add	r1, sp, #24
    1e8e:	4628      	mov	r0, r5
    1e90:	f000 fce8 	bl	2864 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    1e94:	b1e8      	cbz	r0, 1ed2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    1e96:	89bb      	ldrh	r3, [r7, #12]
    1e98:	b9db      	cbnz	r3, 1ed2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    1e9a:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    1e9e:	429a      	cmp	r2, r3
    1ea0:	d117      	bne.n	1ed2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    1ea2:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    1ea6:	d1b2      	bne.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    1ea8:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    1eac:	d170      	bne.n	1f90 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    1eae:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1eb2:	0798      	lsls	r0, r3, #30
    1eb4:	d46c      	bmi.n	1f90 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    1eb6:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    1eba:	d1a8      	bne.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    1ebc:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    1ec0:	d0ab      	beq.n	1e1a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    1ec2:	4628      	mov	r0, r5
    1ec4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    1ec8:	f7ff fe4a 	bl	1b60 <ExFatFile::seekSet(unsigned long long)>
    1ecc:	2800      	cmp	r0, #0
    1ece:	d1a4      	bne.n	1e1a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    1ed0:	e79d      	b.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1ed2:	4606      	mov	r6, r0
    1ed4:	e6f6      	b.n	1cc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    1ed6:	9b02      	ldr	r3, [sp, #8]
    1ed8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    1edc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1ee0:	079b      	lsls	r3, r3, #30
    1ee2:	d502      	bpl.n	1eea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1ee4:	9b03      	ldr	r3, [sp, #12]
    1ee6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    1eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1eec:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    1eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1ef2:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    1ef6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1efa:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    1efe:	2f00      	cmp	r7, #0
    1f00:	d0cf      	beq.n	1ea2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    1f02:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    1f06:	693a      	ldr	r2, [r7, #16]
    1f08:	81bb      	strh	r3, [r7, #12]
    next = begin;
    1f0a:	683b      	ldr	r3, [r7, #0]
    1f0c:	607b      	str	r3, [r7, #4]
    1f0e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1f12:	429a      	cmp	r2, r3
    1f14:	f47f aef5 	bne.w	1d02 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    1f18:	8abe      	ldrh	r6, [r7, #20]
    1f1a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    1f1e:	1af6      	subs	r6, r6, r3
    1f20:	fab6 f686 	clz	r6, r6
    1f24:	0976      	lsrs	r6, r6, #5
    1f26:	e6cd      	b.n	1cc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    1f28:	2f00      	cmp	r7, #0
    1f2a:	f47f aef2 	bne.w	1d12 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    1f2e:	e76e      	b.n	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    1f30:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    1f34:	e70b      	b.n	1d4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    1f36:	2385      	movs	r3, #133	; 0x85
    1f38:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    1f3a:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    1f3e:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    1f42:	f8da 3000 	ldr.w	r3, [sl]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d046      	beq.n	1fd8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    1f4a:	f10d 0213 	add.w	r2, sp, #19
    1f4e:	f10d 0116 	add.w	r1, sp, #22
    1f52:	a805      	add	r0, sp, #20
    1f54:	4798      	blx	r3
    1f56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    1f5a:	8163      	strh	r3, [r4, #10]
    1f5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    1f60:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    1f62:	f89d 3013 	ldrb.w	r3, [sp, #19]
    1f66:	7523      	strb	r3, [r4, #20]
    1f68:	e73f      	b.n	1dea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    1f6a:	bf00      	nop
    1f6c:	88888889 	.word	0x88888889
    1f70:	2001e21c 	.word	0x2001e21c
      dirStream->type = EXFAT_TYPE_STREAM;
    1f74:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    1f76:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    1f7a:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    1f7c:	9b02      	ldr	r3, [sp, #8]
    1f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1f82:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    1f86:	693b      	ldr	r3, [r7, #16]
    1f88:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    1f8a:	8abb      	ldrh	r3, [r7, #20]
    1f8c:	80a3      	strh	r3, [r4, #4]
}
    1f8e:	e72c      	b.n	1dea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    1f90:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    1f94:	06d9      	lsls	r1, r3, #27
    1f96:	f53f af3a 	bmi.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1f9a:	f013 0101 	ands.w	r1, r3, #1
    1f9e:	f47f af36 	bne.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    1fa2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    1fa6:	d089      	beq.n	1ebc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    1fa8:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    1fac:	0792      	lsls	r2, r2, #30
    1fae:	f57f af2e 	bpl.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	f43f af2b 	beq.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    1fb8:	e9d5 3200 	ldrd	r3, r2, [r5]
    1fbc:	4313      	orrs	r3, r2
    1fbe:	d004      	beq.n	1fca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    1fc0:	2200      	movs	r2, #0
    1fc2:	2300      	movs	r3, #0
    m_curCluster = 0;
    1fc4:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    1fc6:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    1fca:	4628      	mov	r0, r5
    1fcc:	f000 fa98 	bl	2500 <ExFatFile::truncate()>
    1fd0:	2800      	cmp	r0, #0
    1fd2:	f43f af1c 	beq.w	1e0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1fd6:	e720      	b.n	1e1a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    1fd8:	f245 6321 	movw	r3, #22049	; 0x5621
    1fdc:	8163      	strh	r3, [r4, #10]
    1fde:	81e3      	strh	r3, [r4, #14]
    1fe0:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    1fe2:	e702      	b.n	1dea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

00001fe4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    1fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    1fe8:	2500      	movs	r5, #0
    1fea:	b097      	sub	sp, #92	; 0x5c
    1fec:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    1fee:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    1ff2:	9201      	str	r2, [sp, #4]
    1ff4:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    1ff6:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d13e      	bne.n	207c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    1ffe:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2002:	460f      	mov	r7, r1
    2004:	f013 0f50 	tst.w	r3, #80	; 0x50
    2008:	d038      	beq.n	207c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    200a:	7813      	ldrb	r3, [r2, #0]
    200c:	4604      	mov	r4, r0
    200e:	4616      	mov	r6, r2
    2010:	2b2f      	cmp	r3, #47	; 0x2f
    2012:	d037      	beq.n	2084 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2014:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    2018:	ab01      	add	r3, sp, #4
    201a:	aa02      	add	r2, sp, #8
    201c:	4631      	mov	r1, r6
    201e:	4620      	mov	r0, r4
    2020:	f7ff fc6a 	bl	18f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2024:	b350      	cbz	r0, 207c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    2026:	9e01      	ldr	r6, [sp, #4]
    2028:	7833      	ldrb	r3, [r6, #0]
    202a:	2b00      	cmp	r3, #0
    202c:	d03e      	beq.n	20ac <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    202e:	2300      	movs	r3, #0
    2030:	aa02      	add	r2, sp, #8
    2032:	4639      	mov	r1, r7
    2034:	4620      	mov	r0, r4
    2036:	f7ff fe09 	bl	1c4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    203a:	b1f8      	cbz	r0, 207c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    203c:	46a4      	mov	ip, r4
    203e:	ad08      	add	r5, sp, #32
    2040:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2044:	f8dc 0000 	ldr.w	r0, [ip]
    2048:	f10c 0c10 	add.w	ip, ip, #16
    204c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2050:	46ae      	mov	lr, r5
    2052:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2056:	3510      	adds	r5, #16
    2058:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    205c:	45bc      	cmp	ip, r7
    205e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2062:	d1ef      	bne.n	2044 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    2064:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    2068:	af08      	add	r7, sp, #32
    tmpDir = *this;
    206a:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    206c:	4620      	mov	r0, r4
    206e:	f000 f923 	bl	22b8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2072:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    2076:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    207a:	e7cd      	b.n	2018 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    207c:	2000      	movs	r0, #0
}
    207e:	b017      	add	sp, #92	; 0x5c
    2080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    2084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2088:	292f      	cmp	r1, #47	; 0x2f
    208a:	d0fb      	beq.n	2084 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    208c:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    208e:	b9b1      	cbnz	r1, 20be <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    2090:	2238      	movs	r2, #56	; 0x38
    2092:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    2094:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    2096:	f009 f9ad 	bl	b3f4 <memset>
  m_flags = FILE_FLAG_READ;
    209a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    209c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    209e:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    20a0:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    20a2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    20a6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    20aa:	e7e8      	b.n	207e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    20ac:	464b      	mov	r3, r9
    20ae:	aa02      	add	r2, sp, #8
    20b0:	4639      	mov	r1, r7
    20b2:	4620      	mov	r0, r4
    20b4:	f7ff fdca 	bl	1c4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    20b8:	b017      	add	sp, #92	; 0x5c
    20ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    20be:	2238      	movs	r2, #56	; 0x38
    20c0:	2100      	movs	r1, #0
    20c2:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    20c4:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    20c6:	f009 f995 	bl	b3f4 <memset>
  m_flags = FILE_FLAG_READ;
    20ca:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    20cc:	af08      	add	r7, sp, #32
  m_vol = vol;
    20ce:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    20d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    20d4:	2340      	movs	r3, #64	; 0x40
    20d6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    20da:	e79b      	b.n	2014 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000020dc <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    20dc:	b119      	cbz	r1, 20e6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    20de:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    20e2:	f7ff bf7f 	b.w	1fe4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    20e6:	4608      	mov	r0, r1
    20e8:	4770      	bx	lr
    20ea:	bf00      	nop

000020ec <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    20ec:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    20ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20f0:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    20f2:	6a00      	ldr	r0, [r0, #32]
    20f4:	b101      	cbz	r1, 20f8 <ExFatFile::addCluster()+0xc>
    20f6:	3101      	adds	r1, #1
    20f8:	2201      	movs	r2, #1
    20fa:	f000 fc0f 	bl	291c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    20fe:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    2100:	4605      	mov	r5, r0
  if (find < 2) {
    2102:	d932      	bls.n	216a <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2104:	2301      	movs	r3, #1
    2106:	4601      	mov	r1, r0
    2108:	6a20      	ldr	r0, [r4, #32]
    210a:	461a      	mov	r2, r3
    210c:	f000 fc66 	bl	29dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2110:	4606      	mov	r6, r0
    2112:	b350      	cbz	r0, 216a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2114:	69a3      	ldr	r3, [r4, #24]
    2116:	b35b      	cbz	r3, 2170 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2118:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    211c:	0651      	lsls	r1, r2, #25
    211e:	d512      	bpl.n	2146 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2120:	1c59      	adds	r1, r3, #1
    2122:	42a9      	cmp	r1, r5
    2124:	d018      	beq.n	2158 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    212a:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    212c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2130:	e005      	b.n	213e <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    2132:	6a20      	ldr	r0, [r4, #32]
    2134:	f000 fd4e 	bl	2bd4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2138:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    213a:	b1b0      	cbz	r0, 216a <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    213c:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    213e:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2140:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    2142:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2144:	d3f5      	bcc.n	2132 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2146:	f04f 32ff 	mov.w	r2, #4294967295
    214a:	4629      	mov	r1, r5
    214c:	6a20      	ldr	r0, [r4, #32]
    214e:	f000 fd41 	bl	2bd4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2152:	b150      	cbz	r0, 216a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2154:	69a1      	ldr	r1, [r4, #24]
    2156:	b911      	cbnz	r1, 215e <ExFatFile::addCluster()+0x72>
}
    2158:	4630      	mov	r0, r6
  m_curCluster = find;
    215a:	61a5      	str	r5, [r4, #24]
}
    215c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    215e:	462a      	mov	r2, r5
    2160:	6a20      	ldr	r0, [r4, #32]
    2162:	f000 fd37 	bl	2bd4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2166:	2800      	cmp	r0, #0
    2168:	d1f6      	bne.n	2158 <ExFatFile::addCluster()+0x6c>
  return false;
    216a:	2600      	movs	r6, #0
}
    216c:	4630      	mov	r0, r6
    216e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2170:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2178:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    217c:	e7ec      	b.n	2158 <ExFatFile::addCluster()+0x6c>
    217e:	bf00      	nop

00002180 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    2180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2184:	f04f 0800 	mov.w	r8, #0
    2188:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    218a:	4f4a      	ldr	r7, [pc, #296]	; (22b4 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    218c:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    218e:	4644      	mov	r4, r8
    2190:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2192:	2200      	movs	r2, #0
    2194:	4630      	mov	r0, r6
    2196:	f7ff fb73 	bl	1880 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    219a:	4605      	mov	r5, r0
    219c:	b130      	cbz	r0, 21ac <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    219e:	7801      	ldrb	r1, [r0, #0]
    21a0:	29c0      	cmp	r1, #192	; 0xc0
    21a2:	d069      	beq.n	2278 <ExFatFile::syncDir()+0xf8>
    21a4:	29c1      	cmp	r1, #193	; 0xc1
    21a6:	d02b      	beq.n	2200 <ExFatFile::syncDir()+0x80>
    21a8:	2985      	cmp	r1, #133	; 0x85
    21aa:	d009      	beq.n	21c0 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    21ac:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    21b0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    21b2:	f043 0301 	orr.w	r3, r3, #1
    21b6:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    21ba:	b002      	add	sp, #8
    21bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    21c0:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    21c4:	f003 0337 	and.w	r3, r3, #55	; 0x37
    21c8:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    21ca:	683b      	ldr	r3, [r7, #0]
    21cc:	b183      	cbz	r3, 21f0 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    21ce:	f10d 0203 	add.w	r2, sp, #3
    21d2:	f10d 0106 	add.w	r1, sp, #6
    21d6:	a801      	add	r0, sp, #4
    21d8:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    21da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    21de:	81ab      	strh	r3, [r5, #12]
    21e0:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    21e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    21e6:	81eb      	strh	r3, [r5, #14]
    21e8:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    21ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    21ee:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    21f0:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    21f2:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    21f6:	f043 0301 	orr.w	r3, r3, #1
    21fa:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    21fe:	7829      	ldrb	r1, [r5, #0]
    2200:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2204:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2206:	fab0 f080 	clz	r0, r0
    220a:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    220c:	e001      	b.n	2212 <ExFatFile::syncDir()+0x92>
    220e:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2210:	5ca9      	ldrb	r1, [r5, r2]
    2212:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2214:	2a01      	cmp	r2, #1
    2216:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    221a:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    221e:	fa11 f383 	uxtah	r3, r1, r3
    2222:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2224:	d101      	bne.n	222a <ExFatFile::syncDir()+0xaa>
    2226:	2800      	cmp	r0, #0
    2228:	d1f1      	bne.n	220e <ExFatFile::syncDir()+0x8e>
    222a:	2a1f      	cmp	r2, #31
    222c:	d9f0      	bls.n	2210 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    222e:	f108 0801 	add.w	r8, r8, #1
    2232:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    2236:	fa5f f188 	uxtb.w	r1, r8
    223a:	428b      	cmp	r3, r1
    223c:	d2a9      	bcs.n	2192 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    223e:	2201      	movs	r2, #1
    2240:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2244:	6a30      	ldr	r0, [r6, #32]
    2246:	f000 fc45 	bl	2ad4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    224a:	2800      	cmp	r0, #0
    224c:	d0ae      	beq.n	21ac <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    224e:	6a35      	ldr	r5, [r6, #32]
    2250:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2252:	4628      	mov	r0, r5
    2254:	f004 fb7a 	bl	694c <FsCache::sync()>
    2258:	2800      	cmp	r0, #0
    225a:	d0a7      	beq.n	21ac <ExFatFile::syncDir()+0x2c>
    225c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2260:	f004 fb74 	bl	694c <FsCache::sync()>
    2264:	2800      	cmp	r0, #0
    2266:	d0a1      	beq.n	21ac <ExFatFile::syncDir()+0x2c>
    2268:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    226c:	6803      	ldr	r3, [r0, #0]
    226e:	6a1b      	ldr	r3, [r3, #32]
    2270:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2272:	2800      	cmp	r0, #0
    2274:	d1a1      	bne.n	21ba <ExFatFile::syncDir()+0x3a>
    2276:	e799      	b.n	21ac <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    2278:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    227c:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2280:	7843      	ldrb	r3, [r0, #1]
    2282:	bf14      	ite	ne
    2284:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    2288:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    228c:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    228e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    2292:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2296:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    229a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    229e:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    22a0:	e9c5 0106 	strd	r0, r1, [r5, #24]
    22a4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    22a8:	f043 0301 	orr.w	r3, r3, #1
    22ac:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    22b0:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    22b2:	e7a5      	b.n	2200 <ExFatFile::syncDir()+0x80>
    22b4:	2001e21c 	.word	0x2001e21c

000022b8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    22b8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    22ba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    22be:	b343      	cbz	r3, 2312 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    22c0:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    22c4:	4604      	mov	r4, r0
    22c6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    22ca:	2a00      	cmp	r2, #0
    22cc:	db0c      	blt.n	22e8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    22ce:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    22d0:	4628      	mov	r0, r5
    22d2:	f004 fb3b 	bl	694c <FsCache::sync()>
    22d6:	b978      	cbnz	r0, 22f8 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    22d8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    22dc:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    22de:	f043 0301 	orr.w	r3, r3, #1
    22e2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    22e6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    22e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22ec:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    22f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    22f4:	f7ff bf44 	b.w	2180 <ExFatFile::syncDir()>
    22f8:	f505 7004 	add.w	r0, r5, #528	; 0x210
    22fc:	f004 fb26 	bl	694c <FsCache::sync()>
    2300:	2800      	cmp	r0, #0
    2302:	d0e9      	beq.n	22d8 <ExFatFile::sync()+0x20>
    2304:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    2308:	6803      	ldr	r3, [r0, #0]
    230a:	6a1b      	ldr	r3, [r3, #32]
    230c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    230e:	2800      	cmp	r0, #0
    2310:	d0e2      	beq.n	22d8 <ExFatFile::sync()+0x20>
    return true;
    2312:	2001      	movs	r0, #1
}
    2314:	bd38      	pop	{r3, r4, r5, pc}
    2316:	bf00      	nop

00002318 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    2318:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    231a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    231e:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2320:	065a      	lsls	r2, r3, #25
    2322:	d44c      	bmi.n	23be <ExFatFile::addDirCluster()+0xa6>
    2324:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    2326:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2328:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    232c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    232e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    2332:	d301      	bcc.n	2338 <ExFatFile::addDirCluster()+0x20>
}
    2334:	2000      	movs	r0, #0
    2336:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    2338:	4628      	mov	r0, r5
    233a:	f7ff fed7 	bl	20ec <ExFatFile::addCluster()>
    233e:	2800      	cmp	r0, #0
    2340:	d0f8      	beq.n	2334 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    2342:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2344:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    2346:	69ae      	ldr	r6, [r5, #24]
    2348:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    234c:	3e02      	subs	r6, #2
    234e:	409e      	lsls	r6, r3
    2350:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2354:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    2356:	1931      	adds	r1, r6, r4
    2358:	2205      	movs	r2, #5
    235a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    235e:	3401      	adds	r4, #1
    2360:	f004 fb20 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    2364:	f44f 7200 	mov.w	r2, #512	; 0x200
    2368:	2100      	movs	r1, #0
    if (!cache) {
    236a:	2800      	cmp	r0, #0
    236c:	d0e2      	beq.n	2334 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    236e:	f009 f841 	bl	b3f4 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2372:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2374:	2301      	movs	r3, #1
    2376:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    237a:	4093      	lsls	r3, r2
    237c:	429c      	cmp	r4, r3
    237e:	d3ea      	bcc.n	2356 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    2380:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2384:	065b      	lsls	r3, r3, #25
    2386:	d415      	bmi.n	23b4 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2388:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    238c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    2390:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2394:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    2398:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    239c:	189b      	adds	r3, r3, r2
    239e:	f141 0000 	adc.w	r0, r1, #0
    23a2:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    23a4:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    23a8:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    23aa:	189b      	adds	r3, r3, r2
    23ac:	f141 0100 	adc.w	r1, r1, #0
    23b0:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    23b4:	4628      	mov	r0, r5
}
    23b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    23ba:	f7ff bf7d 	b.w	22b8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    23be:	6a00      	ldr	r0, [r0, #32]
    23c0:	f000 fcf8 	bl	2db4 <ExFatPartition::rootLength()>
    23c4:	e7af      	b.n	2326 <ExFatFile::addDirCluster()+0xe>
    23c6:	bf00      	nop

000023c8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    23c8:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    23ca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    23ce:	f013 0f50 	tst.w	r3, #80	; 0x50
    23d2:	d102      	bne.n	23da <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    23d4:	2500      	movs	r5, #0
}
    23d6:	4628      	mov	r0, r5
    23d8:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    23da:	f640 2302 	movw	r3, #2562	; 0xa02
    23de:	4604      	mov	r4, r0
    23e0:	f7ff fc34 	bl	1c4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    23e4:	2800      	cmp	r0, #0
    23e6:	d0f5      	beq.n	23d4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    23e8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    23ea:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    23ec:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    23f0:	f7ff ff92 	bl	2318 <ExFatFile::addDirCluster()>
    23f4:	4605      	mov	r5, r0
    23f6:	2800      	cmp	r0, #0
    23f8:	d0ec      	beq.n	23d4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    23fa:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    23fc:	2200      	movs	r2, #0
    23fe:	2300      	movs	r3, #0
    2400:	4620      	mov	r0, r4
    2402:	61e1      	str	r1, [r4, #28]
    2404:	f7ff fbac 	bl	1b60 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2408:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    240a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    240e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    2412:	2b00      	cmp	r3, #0
    2414:	d0df      	beq.n	23d6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2416:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    2418:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    241a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    241e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2422:	f7ff bead 	b.w	2180 <ExFatFile::syncDir()>
    2426:	bf00      	nop

00002428 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2428:	b5f0      	push	{r4, r5, r6, r7, lr}
    242a:	2500      	movs	r5, #0
    242c:	b097      	sub	sp, #92	; 0x5c
    242e:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    2430:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2434:	9201      	str	r2, [sp, #4]
    2436:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    243a:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    243c:	2b00      	cmp	r3, #0
    243e:	d146      	bne.n	24ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    2440:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2444:	460e      	mov	r6, r1
    2446:	f013 0f50 	tst.w	r3, #80	; 0x50
    244a:	d040      	beq.n	24ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    244c:	7813      	ldrb	r3, [r2, #0]
    244e:	4604      	mov	r4, r0
    2450:	4611      	mov	r1, r2
    2452:	2b2f      	cmp	r3, #47	; 0x2f
    2454:	d03e      	beq.n	24d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    2456:	ab01      	add	r3, sp, #4
    2458:	aa02      	add	r2, sp, #8
    245a:	4620      	mov	r0, r4
    245c:	f7ff fa4c 	bl	18f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2460:	2800      	cmp	r0, #0
    2462:	d034      	beq.n	24ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    2464:	9b01      	ldr	r3, [sp, #4]
    2466:	781b      	ldrb	r3, [r3, #0]
    2468:	2b00      	cmp	r3, #0
    246a:	d041      	beq.n	24f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    246c:	2300      	movs	r3, #0
    246e:	aa02      	add	r2, sp, #8
    2470:	4631      	mov	r1, r6
    2472:	4620      	mov	r0, r4
    2474:	f7ff fbea 	bl	1c4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2478:	b930      	cbnz	r0, 2488 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    247a:	b347      	cbz	r7, 24ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    247c:	aa02      	add	r2, sp, #8
    247e:	4631      	mov	r1, r6
    2480:	4620      	mov	r0, r4
    2482:	f7ff ffa1 	bl	23c8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    2486:	b310      	cbz	r0, 24ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    2488:	46a4      	mov	ip, r4
    248a:	ad08      	add	r5, sp, #32
    248c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2490:	f8dc 0000 	ldr.w	r0, [ip]
    2494:	f10c 0c10 	add.w	ip, ip, #16
    2498:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    249c:	46ae      	mov	lr, r5
    249e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    24a2:	3510      	adds	r5, #16
    24a4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    24a8:	45b4      	cmp	ip, r6
    24aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    24ae:	d1ef      	bne.n	2490 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    24b0:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    24b4:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    24b6:	6028      	str	r0, [r5, #0]
    close();
    24b8:	4620      	mov	r0, r4
    24ba:	f7ff f9ff 	bl	18bc <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    24be:	9901      	ldr	r1, [sp, #4]
    24c0:	ab01      	add	r3, sp, #4
    24c2:	aa02      	add	r2, sp, #8
    24c4:	4620      	mov	r0, r4
    24c6:	f7ff fa17 	bl	18f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    24ca:	2800      	cmp	r0, #0
    24cc:	d1ca      	bne.n	2464 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    24ce:	2000      	movs	r0, #0
}
    24d0:	b017      	add	sp, #92	; 0x5c
    24d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    24d4:	3101      	adds	r1, #1
    24d6:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    24d8:	780b      	ldrb	r3, [r1, #0]
    24da:	2b2f      	cmp	r3, #47	; 0x2f
    24dc:	d0fa      	beq.n	24d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    24de:	6a31      	ldr	r1, [r6, #32]
    24e0:	a808      	add	r0, sp, #32
    24e2:	f7ff f9f5 	bl	18d0 <ExFatFile::openRoot(ExFatVolume*)>
    24e6:	2800      	cmp	r0, #0
    24e8:	d0f1      	beq.n	24ce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    24ea:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    24ec:	ae08      	add	r6, sp, #32
    24ee:	e7b2      	b.n	2456 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    24f0:	aa02      	add	r2, sp, #8
    24f2:	4631      	mov	r1, r6
    24f4:	4620      	mov	r0, r4
    24f6:	f7ff ff67 	bl	23c8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    24fa:	b017      	add	sp, #92	; 0x5c
    24fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24fe:	bf00      	nop

00002500 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    2500:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2504:	079a      	lsls	r2, r3, #30
    2506:	d562      	bpl.n	25ce <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2508:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    250a:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    250c:	b082      	sub	sp, #8
    250e:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2510:	b3a5      	cbz	r5, 257c <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    2512:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2516:	d034      	beq.n	2582 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2518:	6a00      	ldr	r0, [r0, #32]
    251a:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    251c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2520:	3a01      	subs	r2, #1
    2522:	68e1      	ldr	r1, [r4, #12]
    2524:	f10c 0c09 	add.w	ip, ip, #9
    2528:	f141 31ff 	adc.w	r1, r1, #4294967295
    252c:	fa5f fc8c 	uxtb.w	ip, ip
    2530:	f1cc 0e20 	rsb	lr, ip, #32
    2534:	fa22 f20c 	lsr.w	r2, r2, ip
    2538:	f1ac 0c20 	sub.w	ip, ip, #32
    253c:	fa01 fe0e 	lsl.w	lr, r1, lr
    2540:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2544:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2546:	ea42 020e 	orr.w	r2, r2, lr
    254a:	ea42 020c 	orr.w	r2, r2, ip
    254e:	3201      	adds	r2, #1
    if (m_curCluster) {
    2550:	b319      	cbz	r1, 259a <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2552:	3d01      	subs	r5, #1
    2554:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2556:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2558:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    255a:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    255c:	bb72      	cbnz	r2, 25bc <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    255e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2562:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2564:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2568:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    256c:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2570:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2574:	f7ff fea0 	bl	22b8 <ExFatFile::sync()>

 fail:
  return false;
}
    2578:	b002      	add	sp, #8
    257a:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    257c:	2001      	movs	r0, #1
}
    257e:	b002      	add	sp, #8
    2580:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2582:	6981      	ldr	r1, [r0, #24]
    2584:	b961      	cbnz	r1, 25a0 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2586:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2588:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    258a:	4629      	mov	r1, r5
    258c:	6a20      	ldr	r0, [r4, #32]
    258e:	f000 fb41 	bl	2c14 <ExFatPartition::freeChain(unsigned long)>
    2592:	b1c8      	cbz	r0, 25c8 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2594:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2598:	e7e1      	b.n	255e <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    259a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    259c:	61e1      	str	r1, [r4, #28]
    259e:	e7dd      	b.n	255c <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    25a0:	aa01      	add	r2, sp, #4
    25a2:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    25a4:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    25a6:	f000 faf3 	bl	2b90 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    25aa:	2800      	cmp	r0, #0
    25ac:	db0c      	blt.n	25c8 <ExFatFile::truncate()+0xc8>
      if (fg) {
    25ae:	d110      	bne.n	25d2 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    25b0:	9d01      	ldr	r5, [sp, #4]
    25b2:	2d00      	cmp	r5, #0
    25b4:	d1e9      	bne.n	258a <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    25b6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    25ba:	e7d0      	b.n	255e <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    25bc:	2300      	movs	r3, #0
    25be:	9901      	ldr	r1, [sp, #4]
    25c0:	f000 fa0c 	bl	29dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    25c4:	2800      	cmp	r0, #0
    25c6:	d1e5      	bne.n	2594 <ExFatFile::truncate()+0x94>
  return false;
    25c8:	2000      	movs	r0, #0
}
    25ca:	b002      	add	sp, #8
    25cc:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    25ce:	2000      	movs	r0, #0
}
    25d0:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    25d2:	f04f 32ff 	mov.w	r2, #4294967295
    25d6:	69a1      	ldr	r1, [r4, #24]
    25d8:	6a20      	ldr	r0, [r4, #32]
    25da:	f000 fafb 	bl	2bd4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    25de:	2800      	cmp	r0, #0
    25e0:	d1e6      	bne.n	25b0 <ExFatFile::truncate()+0xb0>
    25e2:	e7f1      	b.n	25c8 <ExFatFile::truncate()+0xc8>

000025e4 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    25e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    25e8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    25ec:	b083      	sub	sp, #12
    25ee:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    25f0:	079d      	lsls	r5, r3, #30
    25f2:	f140 80a1 	bpl.w	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    25f6:	4691      	mov	r9, r2
    25f8:	071a      	lsls	r2, r3, #28
    25fa:	460e      	mov	r6, r1
    25fc:	f100 8095 	bmi.w	272a <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2600:	f1b9 0f00 	cmp.w	r9, #0
    2604:	f000 8128 	beq.w	2858 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2608:	6823      	ldr	r3, [r4, #0]
    260a:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    260c:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    260e:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2610:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2614:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2618:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    261c:	f1b8 0f00 	cmp.w	r8, #0
    2620:	f040 8094 	bne.w	274c <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2624:	2900      	cmp	r1, #0
    2626:	f000 80d4 	beq.w	27d2 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    262a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    262e:	065b      	lsls	r3, r3, #25
    2630:	f140 80ec 	bpl.w	280c <ExFatFile::write(void const*, unsigned int)+0x228>
    2634:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2638:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    263c:	f10c 0c09 	add.w	ip, ip, #9
    2640:	3b01      	subs	r3, #1
    2642:	fa5f fc8c 	uxtb.w	ip, ip
    2646:	f142 32ff 	adc.w	r2, r2, #4294967295
    264a:	f1cc 0e20 	rsb	lr, ip, #32
    264e:	fa23 f30c 	lsr.w	r3, r3, ip
    2652:	f1ac 0c20 	sub.w	ip, ip, #32
    2656:	fa02 fe0e 	lsl.w	lr, r2, lr
    265a:	fa22 fc0c 	lsr.w	ip, r2, ip
    265e:	69e2      	ldr	r2, [r4, #28]
    2660:	ea43 030e 	orr.w	r3, r3, lr
    2664:	ea43 030c 	orr.w	r3, r3, ip
    2668:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    266a:	4299      	cmp	r1, r3
    266c:	f080 80d5 	bcs.w	281a <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2670:	3101      	adds	r1, #1
    2672:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2674:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2678:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    267a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    267e:	4091      	lsls	r1, r2
    2680:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2682:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2686:	f0c0 808a 	bcc.w	279e <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    268a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    268e:	f0c0 80a6 	bcc.w	27de <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2692:	2301      	movs	r3, #1
    2694:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2696:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    2698:	eba3 0308 	sub.w	r3, r3, r8
    269c:	4293      	cmp	r3, r2
    269e:	bf28      	it	cs
    26a0:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    26a2:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    26a6:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    26a8:	ea4f 2843 	mov.w	r8, r3, lsl #9
    26ac:	d309      	bcc.n	26c2 <ExFatFile::write(void const*, unsigned int)+0xde>
    26ae:	185f      	adds	r7, r3, r1
    26b0:	42ba      	cmp	r2, r7
    26b2:	d206      	bcs.n	26c2 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    26b4:	2200      	movs	r2, #0
    26b6:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    26ba:	f04f 32ff 	mov.w	r2, #4294967295
    26be:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    26c2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    26c6:	4632      	mov	r2, r6
    26c8:	6807      	ldr	r7, [r0, #0]
    26ca:	6abf      	ldr	r7, [r7, #40]	; 0x28
    26cc:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    26ce:	b398      	cbz	r0, 2738 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    26d0:	4643      	mov	r3, r8
    src += n;
    26d2:	4446      	add	r6, r8
    toWrite -= n;
    26d4:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    26d8:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    26dc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    26e0:	19db      	adds	r3, r3, r7
    26e2:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    26e6:	4298      	cmp	r0, r3
    26e8:	4191      	sbcs	r1, r2
    m_curPosition += n;
    26ea:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    26ee:	d207      	bcs.n	2700 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    26f0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    26f4:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    26f8:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    26fc:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2700:	2d00      	cmp	r5, #0
    2702:	d183      	bne.n	260c <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2704:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2708:	4298      	cmp	r0, r3
    270a:	4191      	sbcs	r1, r2
    270c:	f0c0 8096 	bcc.w	283c <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2710:	4b53      	ldr	r3, [pc, #332]	; (2860 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	2b00      	cmp	r3, #0
    2716:	f000 809d 	beq.w	2854 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    271a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    271e:	4648      	mov	r0, r9
    2720:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2724:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2728:	e00d      	b.n	2746 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    272a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    272e:	f7ff fa17 	bl	1b60 <ExFatFile::seekSet(unsigned long long)>
    2732:	2800      	cmp	r0, #0
    2734:	f47f af64 	bne.w	2600 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2738:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    273c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    273e:	f043 0301 	orr.w	r3, r3, #1
    2742:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2746:	b003      	add	sp, #12
    2748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    274c:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2750:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2752:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2756:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    275a:	4091      	lsls	r1, r2
    275c:	4441      	add	r1, r8
    275e:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2760:	2f00      	cmp	r7, #0
    2762:	d08e      	beq.n	2682 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2764:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2768:	2201      	movs	r2, #1
    276a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    276e:	45a8      	cmp	r8, r5
    2770:	bf28      	it	cs
    2772:	46a8      	movcs	r8, r5
    2774:	f004 f916 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2778:	2800      	cmp	r0, #0
    277a:	d0dd      	beq.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    277c:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    277e:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2780:	4642      	mov	r2, r8
    2782:	4631      	mov	r1, r6
    2784:	f005 f96a 	bl	7a5c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2788:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    278c:	6a20      	ldr	r0, [r4, #32]
    278e:	d19f      	bne.n	26d0 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    2790:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2794:	f004 f8da 	bl	694c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2798:	2800      	cmp	r0, #0
    279a:	d199      	bne.n	26d0 <ExFatFile::write(void const*, unsigned int)+0xec>
    279c:	e7cc      	b.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    279e:	6862      	ldr	r2, [r4, #4]
    27a0:	6963      	ldr	r3, [r4, #20]
    27a2:	9200      	str	r2, [sp, #0]
    27a4:	9301      	str	r3, [sp, #4]
    27a6:	6922      	ldr	r2, [r4, #16]
    27a8:	6823      	ldr	r3, [r4, #0]
    27aa:	4293      	cmp	r3, r2
    27ac:	e9dd 2300 	ldrd	r2, r3, [sp]
    27b0:	419a      	sbcs	r2, r3
    27b2:	d212      	bcs.n	27da <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    27b4:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    27b6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    27ba:	f004 f8f3 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    27be:	2800      	cmp	r0, #0
    27c0:	d0ba      	beq.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    27c2:	462a      	mov	r2, r5
    27c4:	4631      	mov	r1, r6
    27c6:	4438      	add	r0, r7
    m_curPosition += n;
    27c8:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    27ca:	f005 f947 	bl	7a5c <memcpy>
    m_curPosition += n;
    27ce:	462b      	mov	r3, r5
    27d0:	e77f      	b.n	26d2 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    27d2:	69e1      	ldr	r1, [r4, #28]
    27d4:	b349      	cbz	r1, 282a <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    27d6:	61a1      	str	r1, [r4, #24]
    27d8:	e74c      	b.n	2674 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    27da:	2205      	movs	r2, #5
    27dc:	e7eb      	b.n	27b6 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    27de:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    27e2:	428b      	cmp	r3, r1
    27e4:	d106      	bne.n	27f4 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    27e6:	2300      	movs	r3, #0
    27e8:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    27ec:	f04f 33ff 	mov.w	r3, #4294967295
    27f0:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    27f4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    27f8:	4632      	mov	r2, r6
    27fa:	6803      	ldr	r3, [r0, #0]
    27fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    27fe:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2800:	2800      	cmp	r0, #0
    2802:	d099      	beq.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
    2804:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2808:	4698      	mov	r8, r3
    280a:	e762      	b.n	26d2 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    280c:	f104 0218 	add.w	r2, r4, #24
    2810:	f000 f9be 	bl	2b90 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2814:	2800      	cmp	r0, #0
    2816:	db8f      	blt.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2818:	d104      	bne.n	2824 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    281a:	4620      	mov	r0, r4
    281c:	f7ff fc66 	bl	20ec <ExFatFile::addCluster()>
    2820:	2800      	cmp	r0, #0
    2822:	d089      	beq.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2824:	69a1      	ldr	r1, [r4, #24]
    2826:	6a20      	ldr	r0, [r4, #32]
    2828:	e724      	b.n	2674 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    282a:	4620      	mov	r0, r4
    282c:	f7ff fc5e 	bl	20ec <ExFatFile::addCluster()>
    2830:	2800      	cmp	r0, #0
    2832:	d081      	beq.n	2738 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2834:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2836:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2838:	61e1      	str	r1, [r4, #28]
    283a:	e71b      	b.n	2674 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    283c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2840:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2842:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2846:	f061 037f 	orn	r3, r1, #127	; 0x7f
    284a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    284e:	b003      	add	sp, #12
    2850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2854:	4648      	mov	r0, r9
    2856:	e776      	b.n	2746 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2858:	e9d4 3200 	ldrd	r3, r2, [r4]
    285c:	e752      	b.n	2704 <ExFatFile::write(void const*, unsigned int)+0x120>
    285e:	bf00      	nop
    2860:	2001e21c 	.word	0x2001e21c

00002864 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2868:	460c      	mov	r4, r1
    286a:	4615      	mov	r5, r2
    286c:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    2870:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    2872:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    2874:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    2878:	b91b      	cbnz	r3, 2882 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    287a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    287e:	429a      	cmp	r2, r3
    2880:	d00e      	beq.n	28a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    2882:	f004 f8b7 	bl	69f4 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    2886:	f004 f927 	bl	6ad8 <toUpcase(unsigned short)>
    288a:	4606      	mov	r6, r0
    288c:	4638      	mov	r0, r7
    288e:	f004 f923 	bl	6ad8 <toUpcase(unsigned short)>
    2892:	4286      	cmp	r6, r0
    2894:	d109      	bne.n	28aa <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    2896:	4544      	cmp	r4, r8
    2898:	d1ea      	bne.n	2870 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    289a:	2001      	movs	r0, #1
}
    289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    28a0:	fab7 f087 	clz	r0, r7
    28a4:	0940      	lsrs	r0, r0, #5
}
    28a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    28aa:	2000      	movs	r0, #0
}
    28ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000028b0 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    28b0:	b570      	push	{r4, r5, r6, lr}
    28b2:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    28b4:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    28b6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    28ba:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    28bc:	4619      	mov	r1, r3
  uint16_t hash = 0;
    28be:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    28c0:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    28c2:	6123      	str	r3, [r4, #16]
    next = begin;
    28c4:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    28c6:	e017      	b.n	28f8 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    28c8:	f004 f894 	bl	69f4 <FsName::get16()>
    if (u == 0XFFFF) {
    28cc:	42a8      	cmp	r0, r5
    28ce:	d022      	beq.n	2916 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    28d0:	f004 f902 	bl	6ad8 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    28d4:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    28d6:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    28d8:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    28da:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    28dc:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    28e0:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    28e2:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    28e4:	fa52 f080 	uxtab	r0, r2, r0
    28e8:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    28ea:	f3c0 004e 	ubfx	r0, r0, #1, #15
    28ee:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    28f2:	fa16 f080 	uxtah	r0, r6, r0
    28f6:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    28f8:	4620      	mov	r0, r4
    28fa:	2900      	cmp	r1, #0
    28fc:	d1e4      	bne.n	28c8 <ExFatFile::hashName(ExName_t*)+0x18>
    28fe:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    2902:	429a      	cmp	r2, r3
    2904:	d1e0      	bne.n	28c8 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2906:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    2908:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    290a:	3801      	subs	r0, #1
    290c:	28fe      	cmp	r0, #254	; 0xfe
    290e:	bf8c      	ite	hi
    2910:	2000      	movhi	r0, #0
    2912:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    2914:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2916:	2000      	movs	r0, #0
}
    2918:	bd70      	pop	{r4, r5, r6, pc}
    291a:	bf00      	nop

0000291c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    291c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2920:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2922:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2924:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2926:	2900      	cmp	r1, #0
    2928:	d042      	beq.n	29b0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    292a:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    292e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2932:	4543      	cmp	r3, r8
    2934:	d942      	bls.n	29bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2936:	f008 0307 	and.w	r3, r8, #7
    293a:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    293c:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2940:	409d      	lsls	r5, r3
    2942:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2944:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2946:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    2948:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    294c:	2200      	movs	r2, #0
    294e:	4638      	mov	r0, r7
    2950:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2954:	f004 f826 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2958:	b1e8      	cbz	r0, 2996 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    295a:	f10b 3bff 	add.w	fp, fp, #4294967295
    295e:	4483      	add	fp, r0
    2960:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2964:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2968:	e00a      	b.n	2980 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    296a:	454a      	cmp	r2, r9
    296c:	d02b      	beq.n	29c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    296e:	45a0      	cmp	r8, r4
    2970:	d010      	beq.n	2994 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2972:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2976:	42a5      	cmp	r5, r4
    2978:	d914      	bls.n	29a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    297a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    297e:	d00c      	beq.n	299a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2980:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2982:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2984:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2988:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    298c:	d0ed      	beq.n	296a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    298e:	45a0      	cmp	r8, r4
        endAlloc++;
    2990:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2992:	d1ee      	bne.n	2972 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2994:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    299a:	4558      	cmp	r0, fp
      mask = 1;
    299c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    29a0:	d1e0      	bne.n	2964 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    29a2:	e001      	b.n	29a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    29a4:	2600      	movs	r6, #0
    29a6:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    29a8:	2501      	movs	r5, #1
    i = 0;
    29aa:	f04f 0b00 	mov.w	fp, #0
    29ae:	e7cb      	b.n	2948 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    29b0:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    29b4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    29b8:	4543      	cmp	r3, r8
    29ba:	d8bc      	bhi.n	2936 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    29bc:	f04f 0800 	mov.w	r8, #0
    29c0:	2501      	movs	r5, #1
    start = 0;
    29c2:	46c3      	mov	fp, r8
    29c4:	e7be      	b.n	2944 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    29c6:	f1ba 0f00 	cmp.w	sl, #0
    29ca:	d104      	bne.n	29d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    29cc:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    29d0:	bf08      	it	eq
    29d2:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    29d6:	1cb0      	adds	r0, r6, #2
}
    29d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000029dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    29dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    29e0:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    29e2:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    29e4:	4615      	mov	r5, r2
    29e6:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    29e8:	1883      	adds	r3, r0, r2
    29ea:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    29ee:	4293      	cmp	r3, r2
    29f0:	d837      	bhi.n	2a62 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    29f2:	bbce      	cbnz	r6, 2a68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    29f4:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    29f8:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    29fa:	bf88      	it	hi
    29fc:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2a00:	f000 0307 	and.w	r3, r0, #7
    2a04:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    2a06:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    2a0a:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2a0e:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    2a10:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2a14:	b2e4      	uxtb	r4, r4
    2a16:	2201      	movs	r2, #1
    2a18:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2a1a:	188f      	adds	r7, r1, r2
    2a1c:	f003 ffc2 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2a20:	b1f8      	cbz	r0, 2a62 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2a22:	f109 3eff 	add.w	lr, r9, #4294967295
    2a26:	4486      	add	lr, r0
    2a28:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2a2c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2a30:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2a34:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2a38:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2a3c:	bf14      	ite	ne
    2a3e:	2201      	movne	r2, #1
    2a40:	2200      	moveq	r2, #0
    2a42:	42b2      	cmp	r2, r6
    2a44:	d00d      	beq.n	2a62 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2a46:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2a48:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2a4c:	d018      	beq.n	2a80 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2a4e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2a52:	d1ed      	bne.n	2a30 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2a54:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2a56:	46a1      	mov	r9, r4
    2a58:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2a5c:	d1e6      	bne.n	2a2c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2a5e:	4639      	mov	r1, r7
    2a60:	e7d9      	b.n	2a16 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    2a62:	2000      	movs	r0, #0
}
    2a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2a68:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2a6c:	428b      	cmp	r3, r1
    2a6e:	d9c7      	bls.n	2a00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2a70:	4281      	cmp	r1, r0
    2a72:	d3c5      	bcc.n	2a00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2a74:	4293      	cmp	r3, r2
    2a76:	bf28      	it	cs
    2a78:	2300      	movcs	r3, #0
    2a7a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2a7e:	e7bf      	b.n	2a00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2a80:	2001      	movs	r0, #1
}
    2a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a86:	bf00      	nop

00002a88 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2a8a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2a8e:	3301      	adds	r3, #1
    2a90:	428b      	cmp	r3, r1
    2a92:	d201      	bcs.n	2a98 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2a94:	2000      	movs	r0, #0
}
    2a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a98:	4607      	mov	r7, r0
    2a9a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2a9c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2aa0:	2500      	movs	r5, #0
    2aa2:	e005      	b.n	2ab0 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2aa4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2aa8:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2aaa:	3301      	adds	r3, #1
    2aac:	42a3      	cmp	r3, r4
    2aae:	d3f1      	bcc.n	2a94 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2ab0:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2ab4:	2200      	movs	r2, #0
    2ab6:	4630      	mov	r0, r6
    2ab8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2abc:	f003 ff72 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ac0:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2ac2:	2800      	cmp	r0, #0
    2ac4:	d0e6      	beq.n	2a94 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ac6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2aca:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2acc:	1c63      	adds	r3, r4, #1
    2ace:	d1e9      	bne.n	2aa4 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2ad0:	1c68      	adds	r0, r5, #1
}
    2ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002ad4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2ad4:	b538      	push	{r3, r4, r5, lr}
    2ad6:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2ad8:	680b      	ldr	r3, [r1, #0]
    2ada:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2ade:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2ae2:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2ae6:	3b02      	subs	r3, #2
    2ae8:	6865      	ldr	r5, [r4, #4]
    2aea:	fa03 f30c 	lsl.w	r3, r3, ip
    2aee:	4029      	ands	r1, r5
    2af0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2af4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2af8:	4419      	add	r1, r3
    2afa:	f003 ff53 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2afe:	b118      	cbz	r0, 2b08 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2b00:	6863      	ldr	r3, [r4, #4]
    2b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2b06:	4418      	add	r0, r3
}
    2b08:	bd38      	pop	{r3, r4, r5, pc}
    2b0a:	bf00      	nop

00002b0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2b10:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2b12:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    2b16:	6849      	ldr	r1, [r1, #4]
    2b18:	400b      	ands	r3, r1
  pos->position += offset;
    2b1a:	4411      	add	r1, r2
    2b1c:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2b1e:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2b20:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    2b24:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    2b28:	b2d2      	uxtb	r2, r2
    2b2a:	40d3      	lsrs	r3, r2
  while (tmp--) {
    2b2c:	b32b      	cbz	r3, 2b7a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    2b2e:	4680      	mov	r8, r0
    2b30:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    2b32:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2b36:	e005      	b.n	2b44 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    2b38:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    2b3a:	3d01      	subs	r5, #1
      pos->cluster++;
    2b3c:	f103 0301 	add.w	r3, r3, #1
    2b40:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2b42:	d31a      	bcc.n	2b7a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    2b44:	7a26      	ldrb	r6, [r4, #8]
    2b46:	2e00      	cmp	r6, #0
    2b48:	d1f6      	bne.n	2b38 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    2b4a:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    2b4e:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    2b50:	6827      	ldr	r7, [r4, #0]
    2b52:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    2b54:	3301      	adds	r3, #1
    2b56:	429f      	cmp	r7, r3
    2b58:	d812      	bhi.n	2b80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2b5a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    2b5e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    2b62:	f003 ff1f 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2b66:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    2b68:	b150      	cbz	r0, 2b80 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2b6a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    2b6e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    2b70:	1c5a      	adds	r2, r3, #1
    2b72:	d009      	beq.n	2b88 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    2b74:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    2b76:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2b78:	d2e4      	bcs.n	2b44 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    2b7a:	2001      	movs	r0, #1
}
    2b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    2b80:	f04f 30ff 	mov.w	r0, #4294967295
}
    2b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    2b88:	4630      	mov	r0, r6
}
    2b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2b8e:	bf00      	nop

00002b90 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2b90:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    2b92:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2b96:	3301      	adds	r3, #1
    2b98:	428b      	cmp	r3, r1
    2b9a:	d202      	bcs.n	2ba2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    2b9c:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    2ba0:	bd38      	pop	{r3, r4, r5, pc}
    2ba2:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2ba4:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2ba8:	4615      	mov	r5, r2
    2baa:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2bae:	2200      	movs	r2, #0
    2bb0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2bb4:	f003 fef6 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2bb8:	2800      	cmp	r0, #0
    2bba:	d0ef      	beq.n	2b9c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2bbc:	00a4      	lsls	r4, r4, #2
    2bbe:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2bc2:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    2bc4:	1c5a      	adds	r2, r3, #1
    2bc6:	d002      	beq.n	2bce <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    2bc8:	2001      	movs	r0, #1
  *value = next;
    2bca:	602b      	str	r3, [r5, #0]
}
    2bcc:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    2bce:	2000      	movs	r0, #0
}
    2bd0:	bd38      	pop	{r3, r4, r5, pc}
    2bd2:	bf00      	nop

00002bd4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2bd4:	2901      	cmp	r1, #1
    2bd6:	d91b      	bls.n	2c10 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2bd8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2bda:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2bde:	460c      	mov	r4, r1
    2be0:	3301      	adds	r3, #1
    2be2:	428b      	cmp	r3, r1
    2be4:	d201      	bcs.n	2bea <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    2be6:	2000      	movs	r0, #0
}
    2be8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2bea:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2bee:	4615      	mov	r5, r2
    2bf0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2bf4:	2201      	movs	r2, #1
    2bf6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2bfa:	f003 fed3 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2bfe:	4603      	mov	r3, r0
    2c00:	2800      	cmp	r0, #0
    2c02:	d0f0      	beq.n	2be6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2c04:	00a4      	lsls	r4, r4, #2
  return true;
    2c06:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2c08:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    2c0c:	511d      	str	r5, [r3, r4]
}
    2c0e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    2c10:	2000      	movs	r0, #0
}
    2c12:	4770      	bx	lr

00002c14 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    2c14:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2c18:	3301      	adds	r3, #1
    2c1a:	4299      	cmp	r1, r3
    2c1c:	d901      	bls.n	2c22 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    2c1e:	2000      	movs	r0, #0
    2c20:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    2c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c26:	4605      	mov	r5, r0
    2c28:	b083      	sub	sp, #12
    2c2a:	460c      	mov	r4, r1
    2c2c:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2c30:	460f      	mov	r7, r1
    2c32:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2c36:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2c3a:	2200      	movs	r2, #0
    2c3c:	4648      	mov	r0, r9
    2c3e:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    2c42:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2c46:	f003 fead 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2c4a:	b190      	cbz	r0, 2c72 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2c4c:	00a3      	lsls	r3, r4, #2
    2c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2c52:	58c2      	ldr	r2, [r0, r3]
    2c54:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    2c56:	1c53      	adds	r3, r2, #1
    2c58:	bf16      	itet	ne
    2c5a:	4616      	movne	r6, r2
    2c5c:	f04f 0a00 	moveq.w	sl, #0
    2c60:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2c64:	2c01      	cmp	r4, #1
    2c66:	d904      	bls.n	2c72 <ExFatPartition::freeChain(unsigned long)+0x5e>
    2c68:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    2c6c:	3201      	adds	r2, #1
    2c6e:	4294      	cmp	r4, r2
    2c70:	d903      	bls.n	2c7a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    2c72:	2000      	movs	r0, #0
    2c74:	b003      	add	sp, #12
    2c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2c7a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2c7e:	2201      	movs	r2, #1
    2c80:	4648      	mov	r0, r9
    2c82:	4459      	add	r1, fp
    2c84:	f003 fe8e 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2c88:	2800      	cmp	r0, #0
    2c8a:	d0f2      	beq.n	2c72 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    2c92:	f1ba 0f00 	cmp.w	sl, #0
    2c96:	d012      	beq.n	2cbe <ExFatPartition::freeChain(unsigned long)+0xaa>
    2c98:	3401      	adds	r4, #1
    2c9a:	42b4      	cmp	r4, r6
    2c9c:	d008      	beq.n	2cb0 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2c9e:	2300      	movs	r3, #0
    2ca0:	1be2      	subs	r2, r4, r7
    2ca2:	4639      	mov	r1, r7
    2ca4:	4628      	mov	r0, r5
    2ca6:	f7ff fe99 	bl	29dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2caa:	2800      	cmp	r0, #0
    2cac:	d0e1      	beq.n	2c72 <ExFatPartition::freeChain(unsigned long)+0x5e>
    2cae:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    2cb0:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    2cb4:	3301      	adds	r3, #1
    2cb6:	42b3      	cmp	r3, r6
    2cb8:	d3db      	bcc.n	2c72 <ExFatPartition::freeChain(unsigned long)+0x5e>
    2cba:	4634      	mov	r4, r6
    2cbc:	e7bb      	b.n	2c36 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2cbe:	1c62      	adds	r2, r4, #1
    2cc0:	4653      	mov	r3, sl
    2cc2:	4639      	mov	r1, r7
    2cc4:	4628      	mov	r0, r5
    2cc6:	1bd2      	subs	r2, r2, r7
}
    2cc8:	b003      	add	sp, #12
    2cca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2cce:	f7ff be85 	b.w	29dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2cd2:	bf00      	nop

00002cd4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    2cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    2cd6:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    2cd8:	f04f 36ff 	mov.w	r6, #4294967295
    2cdc:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    2ce0:	4615      	mov	r5, r2
  m_blockDev = dev;
    2ce2:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    2ce6:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    2ce8:	6041      	str	r1, [r0, #4]
    2cea:	461a      	mov	r2, r3
    2cec:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    2cf0:	4619      	mov	r1, r3
  m_fatType = 0;
    2cf2:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    2cf6:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    2cf8:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    2cfa:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2cfe:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    2d02:	4638      	mov	r0, r7
    2d04:	f003 fe4e 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    2d08:	2d04      	cmp	r5, #4
    2d0a:	d80d      	bhi.n	2d28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    2d0c:	4606      	mov	r6, r0
    2d0e:	b158      	cbz	r0, 2d28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    2d10:	b1bd      	cbz	r5, 2d42 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    2d12:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    2d14:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    2d18:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    2d1c:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    2d20:	d102      	bne.n	2d28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    2d22:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    2d26:	b90b      	cbnz	r3, 2d2c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    2d28:	2000      	movs	r0, #0
}
    2d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    2d2c:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    2d30:	4638      	mov	r0, r7
    2d32:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    2d36:	4629      	mov	r1, r5
    2d38:	f003 fe34 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2d3c:	4606      	mov	r6, r0
    2d3e:	2800      	cmp	r0, #0
    2d40:	d0f2      	beq.n	2d28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    2d42:	2205      	movs	r2, #5
    2d44:	491a      	ldr	r1, [pc, #104]	; (2db0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    2d46:	1cf0      	adds	r0, r6, #3
    2d48:	f008 fba6 	bl	b498 <strncmp>
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d1eb      	bne.n	2d28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    2d50:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    2d54:	2b09      	cmp	r3, #9
    2d56:	d1e7      	bne.n	2d28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2d58:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    2d5a:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2d5c:	442b      	add	r3, r5
    2d5e:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    2d62:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    2d64:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    2d68:	6db3      	ldr	r3, [r6, #88]	; 0x58
    2d6a:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d6c:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    2d6e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    2d72:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    2d74:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    2d78:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    2d7a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    2d7e:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    2d82:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    2d86:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d88:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    2d8c:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d90:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    2d94:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d96:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    2d9a:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    2d9e:	462a      	mov	r2, r5
    2da0:	f7ff fdbc 	bl	291c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    2da4:	2340      	movs	r3, #64	; 0x40
  return true;
    2da6:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    2da8:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    2dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dae:	bf00      	nop
    2db0:	20000718 	.word	0x20000718

00002db4 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    2db4:	b510      	push	{r4, lr}
    2db6:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    2db8:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    2dbc:	f7ff fe64 	bl	2a88 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2dc0:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    2dc4:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    2dc6:	b2db      	uxtb	r3, r3
}
    2dc8:	4098      	lsls	r0, r3
    2dca:	bd10      	pop	{r4, pc}

00002dcc <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    2dcc:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    2dce:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    2dd2:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    2dd4:	2300      	movs	r3, #0
    2dd6:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    2dd8:	4668      	mov	r0, sp
    2dda:	4621      	mov	r1, r4
    2ddc:	930c      	str	r3, [sp, #48]	; 0x30
    2dde:	f7ff f901 	bl	1fe4 <ExFatFile::open(ExFatFile*, char const*, int)>
    2de2:	4605      	mov	r5, r0
    2de4:	b1d8      	cbz	r0, 2e1e <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    2de6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2dea:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    2dee:	d019      	beq.n	2e24 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    2df0:	46ee      	mov	lr, sp
    2df2:	46a4      	mov	ip, r4
    2df4:	ae0c      	add	r6, sp, #48	; 0x30
    2df6:	4674      	mov	r4, lr
    2df8:	f10c 0c10 	add.w	ip, ip, #16
    2dfc:	f10e 0e10 	add.w	lr, lr, #16
    2e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2e02:	42b4      	cmp	r4, r6
    2e04:	f84c 0c10 	str.w	r0, [ip, #-16]
    2e08:	f84c 1c0c 	str.w	r1, [ip, #-12]
    2e0c:	f84c 2c08 	str.w	r2, [ip, #-8]
    2e10:	f84c 3c04 	str.w	r3, [ip, #-4]
    2e14:	d1ef      	bne.n	2df6 <ExFatVolume::chdir(char const*)+0x2a>
    2e16:	f8de 0000 	ldr.w	r0, [lr]
    2e1a:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    2e1e:	4628      	mov	r0, r5
    2e20:	b00e      	add	sp, #56	; 0x38
    2e22:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2e24:	461d      	mov	r5, r3
}
    2e26:	4628      	mov	r0, r5
    2e28:	b00e      	add	sp, #56	; 0x38
    2e2a:	bd70      	pop	{r4, r5, r6, pc}

00002e2c <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    2e2c:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2e2e:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    2e32:	b082      	sub	sp, #8
    2e34:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2e36:	2b00      	cmp	r3, #0
    2e38:	db0d      	blt.n	2e56 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    2e3a:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    2e3c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    2e40:	f003 fd84 	bl	694c <FsCache::sync()>
    2e44:	2800      	cmp	r0, #0
    2e46:	d13b      	bne.n	2ec0 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    2e48:	7863      	ldrb	r3, [r4, #1]
  return false;
    2e4a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2e4c:	f043 0301 	orr.w	r3, r3, #1
    2e50:	7063      	strb	r3, [r4, #1]
}
    2e52:	b002      	add	sp, #8
    2e54:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    2e56:	6880      	ldr	r0, [r0, #8]
    2e58:	2201      	movs	r2, #1
    2e5a:	69a1      	ldr	r1, [r4, #24]
    2e5c:	3028      	adds	r0, #40	; 0x28
    2e5e:	f003 fda1 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    2e62:	2800      	cmp	r0, #0
    2e64:	d0f0      	beq.n	2e48 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    2e66:	88a5      	ldrh	r5, [r4, #4]
    2e68:	f005 050f 	and.w	r5, r5, #15
    2e6c:	016b      	lsls	r3, r5, #5
    2e6e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    2e72:	5cc3      	ldrb	r3, [r0, r3]
    2e74:	2be5      	cmp	r3, #229	; 0xe5
    2e76:	d0e7      	beq.n	2e48 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    2e78:	7823      	ldrb	r3, [r4, #0]
    2e7a:	071b      	lsls	r3, r3, #28
    2e7c:	d501      	bpl.n	2e82 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    2e7e:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    2e80:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    2e82:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    2e84:	4915      	ldr	r1, [pc, #84]	; (2edc <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    2e86:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    2e88:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    2e8a:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    2e8c:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    2e8e:	b166      	cbz	r6, 2eaa <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    2e90:	f10d 0203 	add.w	r2, sp, #3
    2e94:	f10d 0106 	add.w	r1, sp, #6
    2e98:	a801      	add	r0, sp, #4
    2e9a:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    2e9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    2ea0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2ea4:	832b      	strh	r3, [r5, #24]
    2ea6:	826b      	strh	r3, [r5, #18]
    2ea8:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2eaa:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    2eac:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    2eb2:	f105 0028 	add.w	r0, r5, #40	; 0x28
    2eb6:	70a3      	strb	r3, [r4, #2]
    2eb8:	f003 fd48 	bl	694c <FsCache::sync()>
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d0c3      	beq.n	2e48 <FatFile::sync() [clone .part.0]+0x1c>
    2ec0:	f505 700e 	add.w	r0, r5, #568	; 0x238
    2ec4:	f003 fd42 	bl	694c <FsCache::sync()>
    2ec8:	2800      	cmp	r0, #0
    2eca:	d0bd      	beq.n	2e48 <FatFile::sync() [clone .part.0]+0x1c>
    2ecc:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    2ece:	6803      	ldr	r3, [r0, #0]
    2ed0:	6a1b      	ldr	r3, [r3, #32]
    2ed2:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    2ed4:	2800      	cmp	r0, #0
    2ed6:	d0b7      	beq.n	2e48 <FatFile::sync() [clone .part.0]+0x1c>
    2ed8:	e7bb      	b.n	2e52 <FatFile::sync() [clone .part.0]+0x26>
    2eda:	bf00      	nop
    2edc:	2001e21c 	.word	0x2001e21c

00002ee0 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    2ee0:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    2ee2:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    2ee4:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    2ee8:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    2eea:	6880      	ldr	r0, [r0, #8]
    2eec:	4629      	mov	r1, r5
    2eee:	f001 f9f3 	bl	42d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    2ef2:	b150      	cbz	r0, 2f0a <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    2ef4:	b155      	cbz	r5, 2f0c <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    2ef6:	6923      	ldr	r3, [r4, #16]
    2ef8:	3501      	adds	r5, #1
    2efa:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2efc:	78a3      	ldrb	r3, [r4, #2]
    2efe:	bf18      	it	ne
    2f00:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f08:	70a3      	strb	r3, [r4, #2]
}
    2f0a:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2f0c:	78a3      	ldrb	r3, [r4, #2]
    2f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f12:	e7f7      	b.n	2f04 <FatFile::addCluster()+0x24>

00002f14 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    2f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    2f16:	7804      	ldrb	r4, [r0, #0]
    2f18:	f014 0420 	ands.w	r4, r4, #32
    2f1c:	d104      	bne.n	2f28 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    2f1e:	4b1a      	ldr	r3, [pc, #104]	; (2f88 <FatFile::addDirCluster()+0x74>)
    2f20:	4605      	mov	r5, r0
    2f22:	6942      	ldr	r2, [r0, #20]
    2f24:	429a      	cmp	r2, r3
    2f26:	d302      	bcc.n	2f2e <FatFile::addDirCluster()+0x1a>
  return false;
    2f28:	2700      	movs	r7, #0
}
    2f2a:	4638      	mov	r0, r7
    2f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    2f2e:	f7ff ffd7 	bl	2ee0 <FatFile::addCluster()>
    2f32:	4607      	mov	r7, r0
    2f34:	2800      	cmp	r0, #0
    2f36:	d0f7      	beq.n	2f28 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    2f38:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    2f3a:	692e      	ldr	r6, [r5, #16]
    2f3c:	7982      	ldrb	r2, [r0, #6]
    2f3e:	3e02      	subs	r6, #2
    2f40:	6941      	ldr	r1, [r0, #20]
    2f42:	4096      	lsls	r6, r2
    2f44:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2f46:	7901      	ldrb	r1, [r0, #4]
    2f48:	b1a9      	cbz	r1, 2f76 <FatFile::addDirCluster()+0x62>
    2f4a:	4621      	mov	r1, r4
    2f4c:	e006      	b.n	2f5c <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    2f4e:	f008 fa51 	bl	b3f4 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2f52:	68a8      	ldr	r0, [r5, #8]
    2f54:	b2e1      	uxtb	r1, r4
    2f56:	7902      	ldrb	r2, [r0, #4]
    2f58:	428a      	cmp	r2, r1
    2f5a:	d90b      	bls.n	2f74 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    2f5c:	4431      	add	r1, r6
    2f5e:	2205      	movs	r2, #5
    2f60:	3028      	adds	r0, #40	; 0x28
    2f62:	3401      	adds	r4, #1
    2f64:	f003 fd1e 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    2f68:	f44f 7200 	mov.w	r2, #512	; 0x200
    2f6c:	2100      	movs	r1, #0
    if (!pc) {
    2f6e:	2800      	cmp	r0, #0
    2f70:	d1ed      	bne.n	2f4e <FatFile::addDirCluster()+0x3a>
    2f72:	e7d9      	b.n	2f28 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2f74:	7982      	ldrb	r2, [r0, #6]
    2f76:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    2f7a:	6969      	ldr	r1, [r5, #20]
}
    2f7c:	4638      	mov	r0, r7
    2f7e:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    2f80:	fa11 f383 	uxtah	r3, r1, r3
    2f84:	616b      	str	r3, [r5, #20]
}
    2f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f88:	001ffe00 	.word	0x001ffe00

00002f8c <FatFile::close()>:
bool FatFile::close() {
    2f8c:	b510      	push	{r4, lr}
  if (!isOpen()) {
    2f8e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    2f90:	4604      	mov	r4, r0
  if (!isOpen()) {
    2f92:	b12b      	cbz	r3, 2fa0 <FatFile::close()+0x14>
    2f94:	f7ff ff4a 	bl	2e2c <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    2f98:	2300      	movs	r3, #0
    2f9a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    2f9c:	70a3      	strb	r3, [r4, #2]
}
    2f9e:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    2fa0:	2300      	movs	r3, #0
    return true;
    2fa2:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    2fa4:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    2fa6:	70a3      	strb	r3, [r4, #2]
}
    2fa8:	bd10      	pop	{r4, pc}
    2faa:	bf00      	nop

00002fac <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    2fac:	780b      	ldrb	r3, [r1, #0]
    2fae:	f013 0f70 	tst.w	r3, #112	; 0x70
    2fb2:	d101      	bne.n	2fb8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    2fb4:	2000      	movs	r0, #0
    2fb6:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    2fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    2fba:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    2fbe:	b089      	sub	sp, #36	; 0x24
    2fc0:	460d      	mov	r5, r1
    2fc2:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    2fc4:	f000 fe78 	bl	3cb8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    2fc8:	b138      	cbz	r0, 2fda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    2fca:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    2fcc:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    2fce:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    2fd0:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    2fd2:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    2fd4:	f7ff ff9e 	bl	2f14 <FatFile::addDirCluster()>
    2fd8:	b910      	cbnz	r0, 2fe0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    2fda:	2000      	movs	r0, #0
    2fdc:	b009      	add	sp, #36	; 0x24
    2fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    2fe0:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    2fe2:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    2fe4:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    2fe6:	b16b      	cbz	r3, 3004 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    2fe8:	6963      	ldr	r3, [r4, #20]
    2fea:	b133      	cbz	r3, 2ffa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2fec:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    2fee:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2ff0:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    2ff4:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2ff8:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    2ffa:	4620      	mov	r0, r4
    2ffc:	f7ff ff16 	bl	2e2c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3000:	2800      	cmp	r0, #0
    3002:	d0ea      	beq.n	2fda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    3004:	68a0      	ldr	r0, [r4, #8]
    3006:	2201      	movs	r2, #1
    3008:	69a1      	ldr	r1, [r4, #24]
    300a:	3028      	adds	r0, #40	; 0x28
    300c:	f003 fcca 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3010:	2800      	cmp	r0, #0
    3012:	d0e2      	beq.n	2fda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    3014:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3018:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    301a:	f00c 0c0f 	and.w	ip, ip, #15
    301e:	ea4f 134c 	mov.w	r3, ip, lsl #5
    3022:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3026:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    302a:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    302c:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    302e:	6a23      	ldr	r3, [r4, #32]
    3030:	f897 e006 	ldrb.w	lr, [r7, #6]
    3034:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    3036:	f8dc 1004 	ldr.w	r1, [ip, #4]
    303a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    303e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    3042:	fa06 f60e 	lsl.w	r6, r6, lr
    3046:	46ee      	mov	lr, sp
    3048:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    304c:	f8dc 0010 	ldr.w	r0, [ip, #16]
    3050:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3054:	f8dc 2018 	ldr.w	r2, [ip, #24]
    3058:	f8dc 301c 	ldr.w	r3, [ip, #28]
    305c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    3060:	697b      	ldr	r3, [r7, #20]
    3062:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3066:	2201      	movs	r2, #1
    3068:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    306a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    306e:	f8cd 3001 	str.w	r3, [sp, #1]
    3072:	f8cd 3005 	str.w	r3, [sp, #5]
    3076:	f8ad 3009 	strh.w	r3, [sp, #9]
    307a:	f003 fc93 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    307e:	4684      	mov	ip, r0
    3080:	2800      	cmp	r0, #0
    3082:	d0aa      	beq.n	2fda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    3084:	272e      	movs	r7, #46	; 0x2e
    3086:	46ee      	mov	lr, sp
    3088:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    308c:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    308e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3092:	f8cc 0000 	str.w	r0, [ip]
    3096:	f8cc 1004 	str.w	r1, [ip, #4]
    309a:	f8cc 2008 	str.w	r2, [ip, #8]
    309e:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    30a2:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    30a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    30aa:	f8cc 0010 	str.w	r0, [ip, #16]
    30ae:	f8cc 1014 	str.w	r1, [ip, #20]
    30b2:	f8cc 2018 	str.w	r2, [ip, #24]
    30b6:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    30ba:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    30bc:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    30be:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    30c2:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    30c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    30c8:	f8cc 0020 	str.w	r0, [ip, #32]
    30cc:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    30d0:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    30d4:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    30d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    30da:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    30de:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    30e2:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    30e6:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    30ea:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    30ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
    30f0:	f003 fc2c 	bl	694c <FsCache::sync()>
    30f4:	2800      	cmp	r0, #0
    30f6:	f43f af70 	beq.w	2fda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    30fa:	f504 700e 	add.w	r0, r4, #568	; 0x238
    30fe:	f003 fc25 	bl	694c <FsCache::sync()>
    3102:	2800      	cmp	r0, #0
    3104:	f43f af69 	beq.w	2fda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3108:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    310a:	6803      	ldr	r3, [r0, #0]
    310c:	6a1b      	ldr	r3, [r3, #32]
}
    310e:	b009      	add	sp, #36	; 0x24
    3110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3114:	4718      	bx	r3
    3116:	bf00      	nop

00003118 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    311c:	2600      	movs	r6, #0
    311e:	b094      	sub	sp, #80	; 0x50
    3120:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    3122:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3124:	9201      	str	r2, [sp, #4]
    3126:	f8ad 6014 	strh.w	r6, [sp, #20]
    312a:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    312c:	2b00      	cmp	r3, #0
    312e:	d141      	bne.n	31b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3130:	780b      	ldrb	r3, [r1, #0]
    3132:	460d      	mov	r5, r1
    3134:	f013 0f70 	tst.w	r3, #112	; 0x70
    3138:	d03c      	beq.n	31b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    313a:	7813      	ldrb	r3, [r2, #0]
    313c:	4604      	mov	r4, r0
    313e:	4616      	mov	r6, r2
    3140:	2b2f      	cmp	r3, #47	; 0x2f
    3142:	d03b      	beq.n	31bc <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    3144:	2700      	movs	r7, #0
    3146:	e028      	b.n	319a <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    3148:	9e01      	ldr	r6, [sp, #4]
    314a:	7836      	ldrb	r6, [r6, #0]
    314c:	2e00      	cmp	r6, #0
    314e:	d050      	beq.n	31f2 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    3150:	f000 fdb2 	bl	3cb8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3154:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    3156:	aa02      	add	r2, sp, #8
    3158:	4629      	mov	r1, r5
    315a:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    315c:	b92b      	cbnz	r3, 316a <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    315e:	f1b8 0f00 	cmp.w	r8, #0
    3162:	d027      	beq.n	31b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3164:	f7ff ff22 	bl	2fac <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3168:	b320      	cbz	r0, 31b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    316a:	46a6      	mov	lr, r4
    316c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    3170:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3174:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3178:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    317c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3180:	f8de 5000 	ldr.w	r5, [lr]
    3184:	4620      	mov	r0, r4
  if (!isOpen()) {
    3186:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    3188:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    318c:	b10b      	cbz	r3, 3192 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    318e:	f7ff fe4d 	bl	2e2c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3192:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3194:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    3196:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3198:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    319a:	4631      	mov	r1, r6
    319c:	ab01      	add	r3, sp, #4
    319e:	aa02      	add	r2, sp, #8
    31a0:	4620      	mov	r0, r4
    31a2:	f000 fed5 	bl	3f50 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    31a6:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    31a8:	aa02      	add	r2, sp, #8
    31aa:	4629      	mov	r1, r5
    31ac:	2300      	movs	r3, #0
    31ae:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    31b0:	2e00      	cmp	r6, #0
    31b2:	d1c9      	bne.n	3148 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    31b4:	2000      	movs	r0, #0
}
    31b6:	b014      	add	sp, #80	; 0x50
    31b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    31bc:	3601      	adds	r6, #1
    31be:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    31c0:	7833      	ldrb	r3, [r6, #0]
    31c2:	2b2f      	cmp	r3, #47	; 0x2f
    31c4:	d0fa      	beq.n	31bc <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    31c6:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    31c8:	2224      	movs	r2, #36	; 0x24
    31ca:	2100      	movs	r1, #0
    31cc:	a80b      	add	r0, sp, #44	; 0x2c
    31ce:	f008 f911 	bl	b3f4 <memset>
  m_vol = vol;
    31d2:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    31d4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    31d6:	2b10      	cmp	r3, #16
    31d8:	d003      	beq.n	31e2 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    31da:	2b20      	cmp	r3, #32
    31dc:	d00f      	beq.n	31fe <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    31de:	2b0c      	cmp	r3, #12
    31e0:	d1e8      	bne.n	31b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    31e2:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    31e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    31e8:	2301      	movs	r3, #1
    parent = &tmpDir;
    31ea:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    31ec:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    31f0:	e7a8      	b.n	3144 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    31f2:	aa02      	add	r2, sp, #8
    31f4:	f7ff feda 	bl	2fac <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    31f8:	b014      	add	sp, #80	; 0x50
    31fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    31fe:	2340      	movs	r3, #64	; 0x40
    3200:	e7f0      	b.n	31e4 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    3202:	bf00      	nop

00003204 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3208:	2500      	movs	r5, #0
    320a:	b094      	sub	sp, #80	; 0x50
    320c:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    320e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3210:	9201      	str	r2, [sp, #4]
    3212:	9502      	str	r5, [sp, #8]
    3214:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    3218:	2b00      	cmp	r3, #0
    321a:	d137      	bne.n	328c <FatFile::open(FatFile*, char const*, int)+0x88>
    321c:	780b      	ldrb	r3, [r1, #0]
    321e:	460e      	mov	r6, r1
    3220:	f013 0f70 	tst.w	r3, #112	; 0x70
    3224:	d032      	beq.n	328c <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    3226:	7813      	ldrb	r3, [r2, #0]
    3228:	4604      	mov	r4, r0
    322a:	4615      	mov	r5, r2
    322c:	2b2f      	cmp	r3, #47	; 0x2f
    322e:	d031      	beq.n	3294 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3230:	2700      	movs	r7, #0
    3232:	e01e      	b.n	3272 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    3234:	9d01      	ldr	r5, [sp, #4]
    3236:	782d      	ldrb	r5, [r5, #0]
    3238:	2d00      	cmp	r5, #0
    323a:	d040      	beq.n	32be <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    323c:	f000 fd3c 	bl	3cb8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    3240:	46a6      	mov	lr, r4
    3242:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    3246:	b308      	cbz	r0, 328c <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    3248:	4666      	mov	r6, ip
  if (!isOpen()) {
    324a:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    324c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3254:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3258:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    325c:	f8de 3000 	ldr.w	r3, [lr]
    3260:	4620      	mov	r0, r4
    3262:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    3266:	b10d      	cbz	r5, 326c <FatFile::open(FatFile*, char const*, int)+0x68>
    3268:	f7ff fde0 	bl	2e2c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    326c:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    326e:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3270:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    3272:	4629      	mov	r1, r5
    3274:	ab01      	add	r3, sp, #4
    3276:	aa0b      	add	r2, sp, #44	; 0x2c
    3278:	4620      	mov	r0, r4
    327a:	f000 fe69 	bl	3f50 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    327e:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    3280:	aa0b      	add	r2, sp, #44	; 0x2c
    3282:	4631      	mov	r1, r6
    3284:	2300      	movs	r3, #0
    3286:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3288:	2d00      	cmp	r5, #0
    328a:	d1d3      	bne.n	3234 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    328c:	2000      	movs	r0, #0
}
    328e:	b014      	add	sp, #80	; 0x50
    3290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3294:	3501      	adds	r5, #1
    3296:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3298:	7829      	ldrb	r1, [r5, #0]
    329a:	292f      	cmp	r1, #47	; 0x2f
    329c:	d0fa      	beq.n	3294 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    329e:	b9a9      	cbnz	r1, 32cc <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    32a0:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    32a2:	2224      	movs	r2, #36	; 0x24
    32a4:	4620      	mov	r0, r4
    32a6:	f008 f8a5 	bl	b3f4 <memset>
  m_vol = vol;
    32aa:	60a5      	str	r5, [r4, #8]
    32ac:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    32ae:	2b10      	cmp	r3, #16
    32b0:	d003      	beq.n	32ba <FatFile::open(FatFile*, char const*, int)+0xb6>
    32b2:	2b20      	cmp	r3, #32
    32b4:	d022      	beq.n	32fc <FatFile::open(FatFile*, char const*, int)+0xf8>
    32b6:	2b0c      	cmp	r3, #12
    32b8:	d1e8      	bne.n	328c <FatFile::open(FatFile*, char const*, int)+0x88>
    32ba:	2220      	movs	r2, #32
    32bc:	e01f      	b.n	32fe <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    32be:	4643      	mov	r3, r8
    32c0:	aa0b      	add	r2, sp, #44	; 0x2c
    32c2:	f000 fcf9 	bl	3cb8 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    32c6:	b014      	add	sp, #80	; 0x50
    32c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    32cc:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    32ce:	2224      	movs	r2, #36	; 0x24
    32d0:	2100      	movs	r1, #0
    32d2:	a802      	add	r0, sp, #8
    32d4:	f008 f88e 	bl	b3f4 <memset>
  m_vol = vol;
    32d8:	9604      	str	r6, [sp, #16]
    32da:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    32dc:	2b10      	cmp	r3, #16
    32de:	d003      	beq.n	32e8 <FatFile::open(FatFile*, char const*, int)+0xe4>
    32e0:	2b20      	cmp	r3, #32
    32e2:	d003      	beq.n	32ec <FatFile::open(FatFile*, char const*, int)+0xe8>
    32e4:	2b0c      	cmp	r3, #12
    32e6:	d1d1      	bne.n	328c <FatFile::open(FatFile*, char const*, int)+0x88>
    32e8:	2320      	movs	r3, #32
    32ea:	e000      	b.n	32ee <FatFile::open(FatFile*, char const*, int)+0xea>
    32ec:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    32ee:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    32f2:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    32f4:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    32f6:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    32fa:	e799      	b.n	3230 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    32fc:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    32fe:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3300:	7022      	strb	r2, [r4, #0]
  return true;
    3302:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3304:	70a3      	strb	r3, [r4, #2]
  return true;
    3306:	e7c2      	b.n	328e <FatFile::open(FatFile*, char const*, int)+0x8a>

00003308 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3308:	b119      	cbz	r1, 3312 <FatFile::open(FatVolume*, char const*, int)+0xa>
    330a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    330e:	f7ff bf79 	b.w	3204 <FatFile::open(FatFile*, char const*, int)>
}
    3312:	4608      	mov	r0, r1
    3314:	4770      	bx	lr
    3316:	bf00      	nop

00003318 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3318:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    331a:	7805      	ldrb	r5, [r0, #0]
    331c:	b10d      	cbz	r5, 3322 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    331e:	2000      	movs	r0, #0
}
    3320:	bd70      	pop	{r4, r5, r6, pc}
    3322:	460e      	mov	r6, r1
    3324:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    3326:	2224      	movs	r2, #36	; 0x24
    3328:	4629      	mov	r1, r5
    332a:	f008 f863 	bl	b3f4 <memset>
  m_vol = vol;
    332e:	60a6      	str	r6, [r4, #8]
    3330:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3332:	2b10      	cmp	r3, #16
    3334:	d00b      	beq.n	334e <FatFile::openRoot(FatVolume*)+0x36>
    3336:	2b20      	cmp	r3, #32
    3338:	d003      	beq.n	3342 <FatFile::openRoot(FatVolume*)+0x2a>
    333a:	2b0c      	cmp	r3, #12
    333c:	d007      	beq.n	334e <FatFile::openRoot(FatVolume*)+0x36>
    333e:	4628      	mov	r0, r5
}
    3340:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    3342:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    3344:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3346:	7022      	strb	r2, [r4, #0]
  return true;
    3348:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    334a:	70a3      	strb	r3, [r4, #2]
}
    334c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    334e:	2220      	movs	r2, #32
    3350:	e7f8      	b.n	3344 <FatFile::openRoot(FatVolume*)+0x2c>
    3352:	bf00      	nop

00003354 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    3354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3358:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    335c:	7883      	ldrb	r3, [r0, #2]
    335e:	b083      	sub	sp, #12
    3360:	4605      	mov	r5, r0
  if (!isReadable()) {
    3362:	07df      	lsls	r7, r3, #31
    3364:	f140 808c 	bpl.w	3480 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    3368:	4688      	mov	r8, r1
    336a:	7801      	ldrb	r1, [r0, #0]
    336c:	4692      	mov	sl, r2
  if (isFile()) {
    336e:	070e      	lsls	r6, r1, #28
    3370:	f100 8091 	bmi.w	3496 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    3374:	068c      	lsls	r4, r1, #26
    3376:	d508      	bpl.n	338a <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3378:	6883      	ldr	r3, [r0, #8]
    337a:	895a      	ldrh	r2, [r3, #10]
    337c:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    337e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    3382:	b29b      	uxth	r3, r3
    3384:	459a      	cmp	sl, r3
    3386:	bf28      	it	cs
    3388:	469a      	movcs	sl, r3
  while (toRead) {
    338a:	f1ba 0f00 	cmp.w	sl, #0
    338e:	f000 80af 	beq.w	34f0 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3392:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3394:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3398:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    339a:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    339c:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    33a0:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    33a4:	68af      	ldr	r7, [r5, #8]
    33a6:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    33aa:	d53d      	bpl.n	3428 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    33ac:	6a39      	ldr	r1, [r7, #32]
    33ae:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    33b2:	f1bb 0f00 	cmp.w	fp, #0
    33b6:	d151      	bne.n	345c <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    33b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    33bc:	d34e      	bcc.n	345c <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    33be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    33c0:	4291      	cmp	r1, r2
    33c2:	d04b      	beq.n	345c <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    33c4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    33c8:	f0c0 8082 	bcc.w	34d0 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    33cc:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    33ce:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    33d0:	0680      	lsls	r0, r0, #26
    33d2:	d405      	bmi.n	33e0 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    33d4:	7938      	ldrb	r0, [r7, #4]
    33d6:	eba0 0009 	sub.w	r0, r0, r9
    33da:	4283      	cmp	r3, r0
    33dc:	bf28      	it	cs
    33de:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    33e0:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    33e2:	ea4f 2443 	mov.w	r4, r3, lsl #9
    33e6:	d80c      	bhi.n	3402 <FatFile::read(void*, unsigned int)+0xae>
    33e8:	18c8      	adds	r0, r1, r3
    33ea:	4282      	cmp	r2, r0
    33ec:	d209      	bcs.n	3402 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    33ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
    33f2:	e9cd 1300 	strd	r1, r3, [sp]
    33f6:	f003 faa9 	bl	694c <FsCache::sync()>
    33fa:	e9dd 1300 	ldrd	r1, r3, [sp]
    33fe:	2800      	cmp	r0, #0
    3400:	d03e      	beq.n	3480 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    3402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3404:	6802      	ldr	r2, [r0, #0]
    3406:	6957      	ldr	r7, [r2, #20]
    3408:	4642      	mov	r2, r8
    340a:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    340c:	2800      	cmp	r0, #0
    340e:	d037      	beq.n	3480 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    3410:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    3412:	1b36      	subs	r6, r6, r4
    dst += n;
    3414:	44a0      	add	r8, r4
    m_curPosition += n;
    3416:	4422      	add	r2, r4
    3418:	616a      	str	r2, [r5, #20]
  while (toRead) {
    341a:	d069      	beq.n	34f0 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    341c:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    341e:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    3422:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    3424:	0688      	lsls	r0, r1, #26
    3426:	d4c1      	bmi.n	33ac <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3428:	f897 9005 	ldrb.w	r9, [r7, #5]
    342c:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    3430:	f1bb 0f00 	cmp.w	fp, #0
    3434:	d136      	bne.n	34a4 <FatFile::read(void*, unsigned int)+0x150>
    3436:	f1b9 0f00 	cmp.w	r9, #0
    343a:	d133      	bne.n	34a4 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    343c:	2a00      	cmp	r2, #0
    343e:	d133      	bne.n	34a8 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3440:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    3442:	bf4c      	ite	mi
    3444:	6a3a      	ldrmi	r2, [r7, #32]
    3446:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    3448:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    344a:	3a02      	subs	r2, #2
    344c:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    344e:	6979      	ldr	r1, [r7, #20]
    3450:	4082      	lsls	r2, r0
    3452:	4449      	add	r1, r9
    3454:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    3456:	f1bb 0f00 	cmp.w	fp, #0
    345a:	d0ad      	beq.n	33b8 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    345c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    3460:	2200      	movs	r2, #0
    3462:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3466:	42b4      	cmp	r4, r6
    3468:	bf28      	it	cs
    346a:	4634      	movcs	r4, r6
    346c:	f003 fa9a 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3470:	b130      	cbz	r0, 3480 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    3472:	eb00 010b 	add.w	r1, r0, fp
    3476:	4622      	mov	r2, r4
    3478:	4640      	mov	r0, r8
    347a:	f004 faef 	bl	7a5c <memcpy>
    347e:	e7c7      	b.n	3410 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    3480:	786b      	ldrb	r3, [r5, #1]
  return -1;
    3482:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3486:	f043 0302 	orr.w	r3, r3, #2
    348a:	706b      	strb	r3, [r5, #1]
}
    348c:	b003      	add	sp, #12
    348e:	ecbd 8b02 	vpop	{d8}
    3492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3496:	69c3      	ldr	r3, [r0, #28]
    3498:	6942      	ldr	r2, [r0, #20]
    349a:	1a9b      	subs	r3, r3, r2
    349c:	459a      	cmp	sl, r3
    349e:	bf28      	it	cs
    34a0:	469a      	movcs	sl, r3
    34a2:	e772      	b.n	338a <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    34a4:	692a      	ldr	r2, [r5, #16]
    34a6:	e7d0      	b.n	344a <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    34a8:	070b      	lsls	r3, r1, #28
    34aa:	d505      	bpl.n	34b8 <FatFile::read(void*, unsigned int)+0x164>
    34ac:	78aa      	ldrb	r2, [r5, #2]
    34ae:	0654      	lsls	r4, r2, #25
    34b0:	d502      	bpl.n	34b8 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    34b2:	692a      	ldr	r2, [r5, #16]
    34b4:	3201      	adds	r2, #1
    34b6:	e7c7      	b.n	3448 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    34b8:	ee18 2a10 	vmov	r2, s16
    34bc:	4638      	mov	r0, r7
    34be:	6929      	ldr	r1, [r5, #16]
    34c0:	f000 ff58 	bl	4374 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    34c4:	2800      	cmp	r0, #0
    34c6:	dbdb      	blt.n	3480 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    34c8:	d00c      	beq.n	34e4 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    34ca:	68af      	ldr	r7, [r5, #8]
    34cc:	692a      	ldr	r2, [r5, #16]
    34ce:	e7bc      	b.n	344a <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    34d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    34d2:	4642      	mov	r2, r8
    34d4:	6803      	ldr	r3, [r0, #0]
    34d6:	691b      	ldr	r3, [r3, #16]
    34d8:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    34da:	2800      	cmp	r0, #0
    34dc:	d0d0      	beq.n	3480 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    34de:	f44f 7400 	mov.w	r4, #512	; 0x200
    34e2:	e795      	b.n	3410 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    34e4:	782b      	ldrb	r3, [r5, #0]
    34e6:	f013 0f70 	tst.w	r3, #112	; 0x70
    34ea:	d0c9      	beq.n	3480 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    34ec:	ebaa 0a06 	sub.w	sl, sl, r6
    34f0:	4650      	mov	r0, sl
}
    34f2:	b003      	add	sp, #12
    34f4:	ecbd 8b02 	vpop	{d8}
    34f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000034fc <FatFile::peek()>:
int FatFile::peek() {
    34fc:	b570      	push	{r4, r5, r6, lr}
    34fe:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3500:	2201      	movs	r2, #1
    3502:	4604      	mov	r4, r0
    3504:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    3508:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    350c:	f7ff ff22 	bl	3354 <FatFile::read(void*, unsigned int)>
    3510:	2801      	cmp	r0, #1
    3512:	bf0c      	ite	eq
    3514:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3518:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    351c:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3520:	b002      	add	sp, #8
    3522:	bd70      	pop	{r4, r5, r6, pc}

00003524 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3524:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3526:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    352a:	b530      	push	{r4, r5, lr}
    352c:	4604      	mov	r4, r0
    352e:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3530:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3534:	d009      	beq.n	354a <FatFile::readDirCache(bool)+0x26>
    3536:	2901      	cmp	r1, #1
    3538:	d107      	bne.n	354a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    353a:	3320      	adds	r3, #32
    353c:	6143      	str	r3, [r0, #20]
    return m_buffer;
    353e:	68a0      	ldr	r0, [r4, #8]
    3540:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3542:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3546:	b003      	add	sp, #12
    3548:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    354a:	2201      	movs	r2, #1
    354c:	f10d 0107 	add.w	r1, sp, #7
    3550:	4620      	mov	r0, r4
    3552:	f7ff feff 	bl	3354 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    3556:	b240      	sxtb	r0, r0
    3558:	2801      	cmp	r0, #1
    355a:	d103      	bne.n	3564 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    355c:	6963      	ldr	r3, [r4, #20]
    355e:	331f      	adds	r3, #31
    3560:	6163      	str	r3, [r4, #20]
    3562:	e7ec      	b.n	353e <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3564:	2000      	movs	r0, #0
    3566:	e7ee      	b.n	3546 <FatFile::readDirCache(bool)+0x22>

00003568 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    356c:	7803      	ldrb	r3, [r0, #0]
    356e:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3570:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3572:	2b00      	cmp	r3, #0
    3574:	d039      	beq.n	35ea <FatFile::seekSet(unsigned long)+0x82>
    3576:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3578:	6941      	ldr	r1, [r0, #20]
    357a:	42a9      	cmp	r1, r5
    357c:	d042      	beq.n	3604 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    357e:	2d00      	cmp	r5, #0
    3580:	d037      	beq.n	35f2 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3582:	0718      	lsls	r0, r3, #28
    3584:	d52a      	bpl.n	35dc <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3586:	69e2      	ldr	r2, [r4, #28]
    3588:	42aa      	cmp	r2, r5
    358a:	d32e      	bcc.n	35ea <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    358c:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3590:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    3592:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3594:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3598:	f012 0f40 	tst.w	r2, #64	; 0x40
    359c:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    35a0:	b2c0      	uxtb	r0, r0
    35a2:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    35a6:	d130      	bne.n	360a <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    35a8:	1e4a      	subs	r2, r1, #1
    35aa:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    35ac:	b109      	cbz	r1, 35b2 <FatFile::seekSet(unsigned long)+0x4a>
    35ae:	4296      	cmp	r6, r2
    35b0:	d22f      	bcs.n	3612 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    35b2:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    35b4:	bf4c      	ite	mi
    35b6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    35ba:	6a23      	ldrpl	r3, [r4, #32]
    35bc:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    35be:	f104 0810 	add.w	r8, r4, #16
    35c2:	e006      	b.n	35d2 <FatFile::seekSet(unsigned long)+0x6a>
    35c4:	6921      	ldr	r1, [r4, #16]
    35c6:	3e01      	subs	r6, #1
    35c8:	68a0      	ldr	r0, [r4, #8]
    35ca:	f000 fed3 	bl	4374 <FatPartition::fatGet(unsigned long, unsigned long*)>
    35ce:	2800      	cmp	r0, #0
    35d0:	dd0b      	ble.n	35ea <FatFile::seekSet(unsigned long)+0x82>
    35d2:	4642      	mov	r2, r8
  while (nNew--) {
    35d4:	2e00      	cmp	r6, #0
    35d6:	d1f5      	bne.n	35c4 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    35d8:	78a2      	ldrb	r2, [r4, #2]
    35da:	e00c      	b.n	35f6 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    35dc:	069a      	lsls	r2, r3, #26
    35de:	d5d5      	bpl.n	358c <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    35e0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    35e2:	895b      	ldrh	r3, [r3, #10]
    35e4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    35e8:	d9f6      	bls.n	35d8 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    35ea:	2000      	movs	r0, #0
  m_curCluster = tmp;
    35ec:	6127      	str	r7, [r4, #16]
}
    35ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f2:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    35f4:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    35f6:	f022 0220 	bic.w	r2, r2, #32
  return true;
    35fa:	2001      	movs	r0, #1
  m_curPosition = pos;
    35fc:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    35fe:	70a2      	strb	r2, [r4, #2]
}
    3600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3604:	2001      	movs	r0, #1
}
    3606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    360a:	6a23      	ldr	r3, [r4, #32]
    360c:	4433      	add	r3, r6
    360e:	6123      	str	r3, [r4, #16]
    goto done;
    3610:	e7f1      	b.n	35f6 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    3612:	1ab6      	subs	r6, r6, r2
    3614:	e7d3      	b.n	35be <FatFile::seekSet(unsigned long)+0x56>
    3616:	bf00      	nop

00003618 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    361c:	460e      	mov	r6, r1
    361e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3620:	2100      	movs	r1, #0
    3622:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3624:	4604      	mov	r4, r0
    3626:	4698      	mov	r8, r3
    3628:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    362c:	f007 fee2 	bl	b3f4 <memset>
  m_vol = dirFile->m_vol;
    3630:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3632:	6a33      	ldr	r3, [r6, #32]
    3634:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    3638:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    363a:	f005 050f 	and.w	r5, r5, #15
    363e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3642:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3646:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    3648:	070b      	lsls	r3, r1, #28
    364a:	d411      	bmi.n	3670 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    364c:	f001 0117 	and.w	r1, r1, #23
    3650:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    3652:	7ad3      	ldrb	r3, [r2, #11]
    3654:	f013 0f18 	tst.w	r3, #24
    3658:	d102      	bne.n	3660 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    365a:	f041 0108 	orr.w	r1, r1, #8
    365e:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3660:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3664:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3666:	2b01      	cmp	r3, #1
    3668:	d038      	beq.n	36dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    366a:	2b02      	cmp	r3, #2
    366c:	d006      	beq.n	367c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    366e:	b1f3      	cbz	r3, 36ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    3670:	2300      	movs	r3, #0
  return false;
    3672:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3674:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3676:	70a3      	strb	r3, [r4, #2]
}
    3678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    367c:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    367e:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    3680:	06cd      	lsls	r5, r1, #27
    3682:	d4f5      	bmi.n	3670 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3684:	07ce      	lsls	r6, r1, #31
    3686:	d4f3      	bmi.n	3670 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3688:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    368c:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3690:	ea43 0301 	orr.w	r3, r3, r1
    3694:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    3696:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3698:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    369a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    369c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    369e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    36a2:	d012      	beq.n	36ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    36a4:	bb19      	cbnz	r1, 36ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    36a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    36aa:	70a3      	strb	r3, [r4, #2]
    36ac:	e010      	b.n	36d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    36ae:	f418 6f80 	tst.w	r8, #1024	; 0x400
    36b2:	d1dd      	bne.n	3670 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    36b4:	f008 0308 	and.w	r3, r8, #8
    36b8:	f043 0301 	orr.w	r3, r3, #1
    36bc:	70a3      	strb	r3, [r4, #2]
    36be:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    36c0:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    36c2:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    36c4:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    36c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    36ca:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    36cc:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    36ce:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    36d0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    36d4:	d104      	bne.n	36e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    36d6:	2001      	movs	r0, #1
}
    36d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    36dc:	2302      	movs	r3, #2
    36de:	e7ce      	b.n	367e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    36e0:	69e1      	ldr	r1, [r4, #28]
    36e2:	4620      	mov	r0, r4
    36e4:	f7ff ff40 	bl	3568 <FatFile::seekSet(unsigned long)>
    36e8:	2800      	cmp	r0, #0
    36ea:	d1f4      	bne.n	36d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    36ec:	e7c0      	b.n	3670 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    36ee:	f000 fe53 	bl	4398 <FatPartition::freeChain(unsigned long)>
    36f2:	2800      	cmp	r0, #0
    36f4:	d0bc      	beq.n	3670 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    36f6:	78a3      	ldrb	r3, [r4, #2]
    36f8:	e7d5      	b.n	36a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    36fa:	bf00      	nop

000036fc <FatFile::sync()>:
  if (!isOpen()) {
    36fc:	7803      	ldrb	r3, [r0, #0]
    36fe:	b10b      	cbz	r3, 3704 <FatFile::sync()+0x8>
    3700:	f7ff bb94 	b.w	2e2c <FatFile::sync() [clone .part.0]>
}
    3704:	2001      	movs	r0, #1
    3706:	4770      	bx	lr

00003708 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    370c:	7883      	ldrb	r3, [r0, #2]
    370e:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3710:	079c      	lsls	r4, r3, #30
    3712:	d577      	bpl.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3714:	4688      	mov	r8, r1
    3716:	0719      	lsls	r1, r3, #28
    3718:	4691      	mov	r9, r2
    371a:	f100 80b5 	bmi.w	3888 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    371e:	696b      	ldr	r3, [r5, #20]
    3720:	eb13 0209 	adds.w	r2, r3, r9
    3724:	d26e      	bcs.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3726:	f1b9 0f00 	cmp.w	r9, #0
    372a:	d040      	beq.n	37ae <FatFile::write(void const*, unsigned int)+0xa6>
    372c:	464f      	mov	r7, r9
    m_status = 0;
    372e:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3732:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3734:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3738:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    373a:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    373c:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3740:	d13f      	bne.n	37c2 <FatFile::write(void const*, unsigned int)+0xba>
    3742:	2e00      	cmp	r6, #0
    3744:	d13d      	bne.n	37c2 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3746:	2900      	cmp	r1, #0
    3748:	d06e      	beq.n	3828 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    374a:	78aa      	ldrb	r2, [r5, #2]
    374c:	0652      	lsls	r2, r2, #25
    374e:	d576      	bpl.n	383e <FatFile::write(void const*, unsigned int)+0x136>
    3750:	69ea      	ldr	r2, [r5, #28]
    3752:	429a      	cmp	r2, r3
    3754:	d973      	bls.n	383e <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3756:	3101      	adds	r1, #1
    3758:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    375a:	3902      	subs	r1, #2
    375c:	7982      	ldrb	r2, [r0, #6]
    375e:	6943      	ldr	r3, [r0, #20]
    3760:	4091      	lsls	r1, r2
    3762:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3764:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3768:	d353      	bcc.n	3812 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    376a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    376e:	d370      	bcc.n	3852 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3770:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3772:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3774:	1b1b      	subs	r3, r3, r4
    3776:	4293      	cmp	r3, r2
    3778:	bf28      	it	cs
    377a:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    377c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    377e:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3780:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3784:	d307      	bcc.n	3796 <FatFile::write(void const*, unsigned int)+0x8e>
    3786:	185e      	adds	r6, r3, r1
    3788:	42b2      	cmp	r2, r6
    378a:	d204      	bcs.n	3796 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    378c:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3790:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3794:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    3796:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3798:	4642      	mov	r2, r8
    379a:	6806      	ldr	r6, [r0, #0]
    379c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    379e:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    37a0:	b380      	cbz	r0, 3804 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    37a2:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    37a4:	1b3f      	subs	r7, r7, r4
    src += n;
    37a6:	44a0      	add	r8, r4
    m_curPosition += n;
    37a8:	4423      	add	r3, r4
    37aa:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    37ac:	d1c1      	bne.n	3732 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    37ae:	69ea      	ldr	r2, [r5, #28]
    37b0:	429a      	cmp	r2, r3
    37b2:	d276      	bcs.n	38a2 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    37b4:	78aa      	ldrb	r2, [r5, #2]
    37b6:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    37b8:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    37ba:	f062 037f 	orn	r3, r2, #127	; 0x7f
    37be:	70ab      	strb	r3, [r5, #2]
    37c0:	e025      	b.n	380e <FatFile::write(void const*, unsigned int)+0x106>
    37c2:	7982      	ldrb	r2, [r0, #6]
    37c4:	3902      	subs	r1, #2
    37c6:	6943      	ldr	r3, [r0, #20]
    37c8:	4091      	lsls	r1, r2
    37ca:	4419      	add	r1, r3
                      + sectorOfCluster;
    37cc:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    37ce:	2e00      	cmp	r6, #0
    37d0:	d0c8      	beq.n	3764 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    37d2:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    37d6:	2201      	movs	r2, #1
    37d8:	42bc      	cmp	r4, r7
    37da:	bf28      	it	cs
    37dc:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    37de:	3028      	adds	r0, #40	; 0x28
    37e0:	f003 f8e0 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    37e4:	b170      	cbz	r0, 3804 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    37e6:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    37e8:	4426      	add	r6, r4
      memcpy(dst, src, n);
    37ea:	4622      	mov	r2, r4
    37ec:	4641      	mov	r1, r8
    37ee:	f004 f935 	bl	7a5c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    37f2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    37f6:	68a8      	ldr	r0, [r5, #8]
    37f8:	d1d3      	bne.n	37a2 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    37fa:	3028      	adds	r0, #40	; 0x28
    37fc:	f003 f8a6 	bl	694c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3800:	2800      	cmp	r0, #0
    3802:	d1ce      	bne.n	37a2 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3804:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3806:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3808:	f043 0301 	orr.w	r3, r3, #1
    380c:	706b      	strb	r3, [r5, #1]
}
    380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3812:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3816:	696a      	ldr	r2, [r5, #20]
    3818:	69eb      	ldr	r3, [r5, #28]
    381a:	42bc      	cmp	r4, r7
    381c:	bf28      	it	cs
    381e:	463c      	movcs	r4, r7
    3820:	429a      	cmp	r2, r3
    3822:	d305      	bcc.n	3830 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3824:	2205      	movs	r2, #5
    3826:	e7da      	b.n	37de <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3828:	6a29      	ldr	r1, [r5, #32]
    382a:	b321      	cbz	r1, 3876 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    382c:	6129      	str	r1, [r5, #16]
    382e:	e794      	b.n	375a <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3830:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3832:	f013 0f20 	tst.w	r3, #32
    3836:	bf14      	ite	ne
    3838:	2205      	movne	r2, #5
    383a:	2201      	moveq	r2, #1
    383c:	e7cf      	b.n	37de <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    383e:	f105 0210 	add.w	r2, r5, #16
    3842:	f000 fd97 	bl	4374 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3846:	2800      	cmp	r0, #0
    3848:	dbdc      	blt.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    384a:	d024      	beq.n	3896 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    384c:	68a8      	ldr	r0, [r5, #8]
    384e:	6929      	ldr	r1, [r5, #16]
    3850:	e783      	b.n	375a <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3852:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3854:	428b      	cmp	r3, r1
    3856:	d104      	bne.n	3862 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3858:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    385c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3860:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    3862:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3864:	4642      	mov	r2, r8
    3866:	6803      	ldr	r3, [r0, #0]
    3868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    386a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    386c:	2800      	cmp	r0, #0
    386e:	d0c9      	beq.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3870:	f44f 7400 	mov.w	r4, #512	; 0x200
    3874:	e795      	b.n	37a2 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3876:	4628      	mov	r0, r5
    3878:	f7ff fb32 	bl	2ee0 <FatFile::addCluster()>
    387c:	2800      	cmp	r0, #0
    387e:	d0c1      	beq.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3880:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3882:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3884:	6229      	str	r1, [r5, #32]
    3886:	e768      	b.n	375a <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3888:	69c1      	ldr	r1, [r0, #28]
    388a:	f7ff fe6d 	bl	3568 <FatFile::seekSet(unsigned long)>
    388e:	2800      	cmp	r0, #0
    3890:	f47f af45 	bne.w	371e <FatFile::write(void const*, unsigned int)+0x16>
    3894:	e7b6      	b.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3896:	4628      	mov	r0, r5
    3898:	f7ff fb22 	bl	2ee0 <FatFile::addCluster()>
    389c:	2800      	cmp	r0, #0
    389e:	d1d5      	bne.n	384c <FatFile::write(void const*, unsigned int)+0x144>
    38a0:	e7b0      	b.n	3804 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    38a2:	4b05      	ldr	r3, [pc, #20]	; (38b8 <FatFile::write(void const*, unsigned int)+0x1b0>)
    38a4:	681b      	ldr	r3, [r3, #0]
    38a6:	b12b      	cbz	r3, 38b4 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    38a8:	78ab      	ldrb	r3, [r5, #2]
    38aa:	4648      	mov	r0, r9
    38ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    38b0:	70ab      	strb	r3, [r5, #2]
    38b2:	e7ac      	b.n	380e <FatFile::write(void const*, unsigned int)+0x106>
    38b4:	4648      	mov	r0, r9
    38b6:	e7aa      	b.n	380e <FatFile::write(void const*, unsigned int)+0x106>
    38b8:	2001e21c 	.word	0x2001e21c

000038bc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    38bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    38c0:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    38c2:	b08d      	sub	sp, #52	; 0x34
    38c4:	4614      	mov	r4, r2
    next = begin;
    38c6:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    38c8:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    38ca:	4606      	mov	r6, r0
    38cc:	4689      	mov	r9, r1
  FatFile dir = *this;
    38ce:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    38d0:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    38d2:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    38d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    38da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    38dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    38e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    38e2:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    38e6:	6065      	str	r5, [r4, #4]
    38e8:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    38ea:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    38ec:	f8a4 e00c 	strh.w	lr, [r4, #12]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d03f      	beq.n	3974 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    38f4:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    38f8:	eba9 010a 	sub.w	r1, r9, sl
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    38fc:	a803      	add	r0, sp, #12
    38fe:	b289      	uxth	r1, r1
    3900:	0149      	lsls	r1, r1, #5
    3902:	f7ff fe31 	bl	3568 <FatFile::seekSet(unsigned long)>
    3906:	b350      	cbz	r0, 395e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3908:	2100      	movs	r1, #0
    390a:	a803      	add	r0, sp, #12
    390c:	f7ff fe0a 	bl	3524 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3910:	4607      	mov	r7, r0
    3912:	b320      	cbz	r0, 395e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3914:	2500      	movs	r5, #0
    3916:	e00d      	b.n	3934 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    3918:	f003 f86c 	bl	69f4 <FsName::get16()>
    391c:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    391e:	4658      	mov	r0, fp
    3920:	f003 f8da 	bl	6ad8 <toUpcase(unsigned short)>
    3924:	4683      	mov	fp, r0
    3926:	4640      	mov	r0, r8
    3928:	f003 f8d6 	bl	6ad8 <toUpcase(unsigned short)>
    392c:	4583      	cmp	fp, r0
    392e:	d116      	bne.n	395e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    3930:	2d0d      	cmp	r5, #13
    3932:	d018      	beq.n	3966 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    3934:	b2ea      	uxtb	r2, r5
    3936:	4639      	mov	r1, r7
    3938:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    393a:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    393c:	f000 fb90 	bl	4060 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    3940:	89a3      	ldrh	r3, [r4, #12]
    3942:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    3944:	4620      	mov	r0, r4
    3946:	2b00      	cmp	r3, #0
    3948:	d1e6      	bne.n	3918 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    394a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    394e:	4293      	cmp	r3, r2
    3950:	d1e2      	bne.n	3918 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    3952:	fabb f08b 	clz	r0, fp
    3956:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    3958:	b00d      	add	sp, #52	; 0x34
    395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    395e:	2000      	movs	r0, #0
}
    3960:	b00d      	add	sp, #52	; 0x34
    3962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3966:	f10a 0a01 	add.w	sl, sl, #1
    396a:	9b01      	ldr	r3, [sp, #4]
    396c:	fa5f fa8a 	uxtb.w	sl, sl
    3970:	4553      	cmp	r3, sl
    3972:	d2c1      	bcs.n	38f8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    3974:	2001      	movs	r0, #1
    3976:	e7ef      	b.n	3958 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00003978 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    397c:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    397e:	b08d      	sub	sp, #52	; 0x34
    3980:	4616      	mov	r6, r2
    3982:	469a      	mov	sl, r3
  FatFile dir = *this;
    3984:	f10d 0c0c 	add.w	ip, sp, #12
    3988:	f102 0415 	add.w	r4, r2, #21
    398c:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3990:	9101      	str	r1, [sp, #4]
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    3992:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    3996:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3998:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    399c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    399e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    39a2:	683b      	ldr	r3, [r7, #0]
    39a4:	f8cc 3000 	str.w	r3, [ip]
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    39a8:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    39ac:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    39b0:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    39b4:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    39b6:	fa52 f383 	uxtab	r3, r2, r3
    39ba:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    39be:	d1f3      	bne.n	39a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    39c0:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    39c2:	f04f 0800 	mov.w	r8, #0
    next = begin;
    39c6:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    39c8:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    39cc:	f1ba 0f00 	cmp.w	sl, #0
    39d0:	d04e      	beq.n	3a70 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    39d2:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    39d4:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    39d6:	a803      	add	r0, sp, #12
    39d8:	1bd9      	subs	r1, r3, r7
    39da:	b289      	uxth	r1, r1
    39dc:	0149      	lsls	r1, r1, #5
    39de:	f7ff fdc3 	bl	3568 <FatFile::seekSet(unsigned long)>
    39e2:	2800      	cmp	r0, #0
    39e4:	d055      	beq.n	3a92 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    39e6:	2100      	movs	r1, #0
    39e8:	a803      	add	r0, sp, #12
    39ea:	f7ff fd9b 	bl	3524 <FatFile::readDirCache(bool)>
    if (!ldir) {
    39ee:	2800      	cmp	r0, #0
    39f0:	d04f      	beq.n	3a92 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    39f2:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    39f4:	4557      	cmp	r7, sl
    39f6:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    39fa:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    39fe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    3a02:	f04f 0500 	mov.w	r5, #0
    3a06:	f043 0301 	orr.w	r3, r3, #1
    3a0a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3a0e:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3a12:	bf0c      	ite	eq
    3a14:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    3a18:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3a1a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    3a1c:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3a20:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    3a22:	7303      	strb	r3, [r0, #12]
    3a24:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    3a28:	f880 900d 	strb.w	r9, [r0, #13]
    3a2c:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3a2e:	e006      	b.n	3a3e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    3a30:	f8ab 0000 	strh.w	r0, [fp]
    3a34:	3401      	adds	r4, #1
    3a36:	3501      	adds	r5, #1
    3a38:	f10b 0b02 	add.w	fp, fp, #2
    3a3c:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    3a3e:	89b0      	ldrh	r0, [r6, #12]
    3a40:	b918      	cbnz	r0, 3a4a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    3a42:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    3a46:	429a      	cmp	r2, r3
    3a48:	d016      	beq.n	3a78 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    3a4a:	4630      	mov	r0, r6
    3a4c:	f002 ffd2 	bl	69f4 <FsName::get16()>
  if (i < 5) {
    3a50:	2d04      	cmp	r5, #4
    3a52:	b2eb      	uxtb	r3, r5
    3a54:	d9ec      	bls.n	3a30 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    3a56:	2b0a      	cmp	r3, #10
    3a58:	d802      	bhi.n	3a60 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    3a5a:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    3a5e:	e7e9      	b.n	3a34 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    3a60:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3a62:	f8ab 0005 	strh.w	r0, [fp, #5]
    3a66:	d1e5      	bne.n	3a34 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3a68:	3701      	adds	r7, #1
    3a6a:	b2ff      	uxtb	r7, r7
    3a6c:	45ba      	cmp	sl, r7
    3a6e:	d2b1      	bcs.n	39d4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3a70:	2001      	movs	r0, #1

 fail:
  return false;
}
    3a72:	b00d      	add	sp, #52	; 0x34
    3a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    3a78:	f1b8 0f00 	cmp.w	r8, #0
    3a7c:	d006      	beq.n	3a8c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3a7e:	f108 0801 	add.w	r8, r8, #1
    3a82:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3a86:	fa5f f888 	uxtb.w	r8, r8
    3a8a:	e7e1      	b.n	3a50 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    3a8c:	f04f 0801 	mov.w	r8, #1
    3a90:	e7de      	b.n	3a50 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    3a92:	2000      	movs	r0, #0
}
    3a94:	b00d      	add	sp, #52	; 0x34
    3a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a9a:	bf00      	nop

00003a9c <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3a9c:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3a9e:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3aa2:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    3aa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3aaa:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3aae:	4686      	mov	lr, r0
  const char* end = fname->end;
    3ab0:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3ab2:	6051      	str	r1, [r2, #4]
    3ab4:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3ab8:	781a      	ldrb	r2, [r3, #0]
    3aba:	2a2e      	cmp	r2, #46	; 0x2e
    3abc:	bf14      	ite	ne
    3abe:	2001      	movne	r0, #1
    3ac0:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    3ac2:	d103      	bne.n	3acc <FatFile::makeSFN(FatLfn_t*)+0x30>
    3ac4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3ac8:	2a2e      	cmp	r2, #46	; 0x2e
    3aca:	d0fb      	beq.n	3ac4 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    3acc:	1e61      	subs	r1, r4, #1
    3ace:	4299      	cmp	r1, r3
    3ad0:	d90b      	bls.n	3aea <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3ad2:	460a      	mov	r2, r1
    3ad4:	e002      	b.n	3adc <FatFile::makeSFN(FatLfn_t*)+0x40>
    3ad6:	4293      	cmp	r3, r2
    3ad8:	4611      	mov	r1, r2
    3ada:	d006      	beq.n	3aea <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3adc:	4611      	mov	r1, r2
    3ade:	3a01      	subs	r2, #1
    3ae0:	f891 c000 	ldrb.w	ip, [r1]
    3ae4:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3ae8:	d1f5      	bne.n	3ad6 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    3aea:	429c      	cmp	r4, r3
    3aec:	f04f 0500 	mov.w	r5, #0
    3af0:	f240 8086 	bls.w	3c00 <FatFile::makeSFN(FatLfn_t*)+0x164>
    3af4:	2607      	movs	r6, #7
    3af6:	2708      	movs	r7, #8
    3af8:	46a9      	mov	r9, r5
    3afa:	46a8      	mov	r8, r5
    3afc:	e006      	b.n	3b0c <FatFile::makeSFN(FatLfn_t*)+0x70>
    3afe:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    3b00:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    3b02:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3b06:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3b08:	429c      	cmp	r4, r3
    3b0a:	d95b      	bls.n	3bc4 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3b0c:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3b0e:	2a2e      	cmp	r2, #46	; 0x2e
    3b10:	bf08      	it	eq
    3b12:	4299      	cmpeq	r1, r3
    3b14:	d0f3      	beq.n	3afe <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    3b16:	2a22      	cmp	r2, #34	; 0x22
    3b18:	d00d      	beq.n	3b36 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3b1a:	2a7c      	cmp	r2, #124	; 0x7c
    3b1c:	d00b      	beq.n	3b36 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3b1e:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    3b22:	f1bc 0f02 	cmp.w	ip, #2
    3b26:	d906      	bls.n	3b36 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    3b28:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    3b2c:	f1bc 0f05 	cmp.w	ip, #5
    3b30:	d821      	bhi.n	3b76 <FatFile::makeSFN(FatLfn_t*)+0xda>
    3b32:	2a2d      	cmp	r2, #45	; 0x2d
    3b34:	d01f      	beq.n	3b76 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    3b36:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3b3a:	2a80      	cmp	r2, #128	; 0x80
    3b3c:	d05d      	beq.n	3bfa <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    3b3e:	454e      	cmp	r6, r9
    3b40:	d22f      	bcs.n	3ba2 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    3b42:	4299      	cmp	r1, r3
    3b44:	bf2c      	ite	cs
    3b46:	2000      	movcs	r0, #0
    3b48:	2001      	movcc	r0, #1
    3b4a:	2e0a      	cmp	r6, #10
    3b4c:	bf08      	it	eq
    3b4e:	f040 0001 	orreq.w	r0, r0, #1
    3b52:	2800      	cmp	r0, #0
    3b54:	d047      	beq.n	3be6 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3b56:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3b5a:	2b20      	cmp	r3, #32
    3b5c:	d040      	beq.n	3be0 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3b5e:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3b62:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3b64:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3b66:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    3b68:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3b6a:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    3b6e:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    3b70:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    3b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b76:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    3b7a:	f1bc 0f05 	cmp.w	ip, #5
    3b7e:	d9da      	bls.n	3b36 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    3b80:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    3b84:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    3b88:	d8d5      	bhi.n	3b36 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    3b8a:	454e      	cmp	r6, r9
    3b8c:	d3d9      	bcc.n	3b42 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    3b8e:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    3b92:	f1bc 0f19 	cmp.w	ip, #25
    3b96:	d828      	bhi.n	3bea <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    3b98:	3a20      	subs	r2, #32
        lc |= bit;
    3b9a:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    3b9c:	b2d2      	uxtb	r2, r2
        lc |= bit;
    3b9e:	b2ed      	uxtb	r5, r5
    3ba0:	e001      	b.n	3ba6 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    3ba2:	2000      	movs	r0, #0
        c = '_';
    3ba4:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    3ba6:	f109 0c01 	add.w	ip, r9, #1
    3baa:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    3bac:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    3bae:	f889 2016 	strb.w	r2, [r9, #22]
    3bb2:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    3bb6:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    3bb8:	4691      	mov	r9, r2
    3bba:	bf98      	it	ls
    3bbc:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    3bc0:	429c      	cmp	r4, r3
    3bc2:	d8a3      	bhi.n	3b0c <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    3bc4:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3bc8:	2b20      	cmp	r3, #32
    3bca:	d009      	beq.n	3be0 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    3bcc:	2800      	cmp	r0, #0
    3bce:	d0c6      	beq.n	3b5e <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    3bd0:	ea18 0f05 	tst.w	r8, r5
    3bd4:	bf18      	it	ne
    3bd6:	2502      	movne	r5, #2
    3bd8:	f88e 5015 	strb.w	r5, [lr, #21]
}
    3bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    3be0:	2000      	movs	r0, #0
}
    3be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3be6:	460b      	mov	r3, r1
    3be8:	e78e      	b.n	3b08 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    3bea:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    3bee:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    3bf2:	bf98      	it	ls
    3bf4:	ea47 0808 	orrls.w	r8, r7, r8
    3bf8:	e7d5      	b.n	3ba6 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    3bfa:	3301      	adds	r3, #1
        is83 = false;
    3bfc:	2000      	movs	r0, #0
    3bfe:	e783      	b.n	3b08 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    3c00:	46a8      	mov	r8, r5
    3c02:	e7df      	b.n	3bc4 <FatFile::makeSFN(FatLfn_t*)+0x128>

00003c04 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    3c08:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    3c0c:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3c0e:	460f      	mov	r7, r1
    3c10:	4604      	mov	r4, r0
    3c12:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3cb4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    3c16:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    3c1a:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3c1e:	f101 0616 	add.w	r6, r1, #22
    3c22:	f1b8 0f03 	cmp.w	r8, #3
    3c26:	f8db 3000 	ldr.w	r3, [fp]
    3c2a:	bf28      	it	cs
    3c2c:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    3c30:	442b      	add	r3, r5
    3c32:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3c34:	f108 0304 	add.w	r3, r8, #4
    3c38:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    3c3a:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3c3e:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    3c40:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3c42:	2a09      	cmp	r2, #9
    3c44:	f102 0137 	add.w	r1, r2, #55	; 0x37
    3c48:	bf98      	it	ls
    3c4a:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    3c4e:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3c50:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3c52:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3c54:	4598      	cmp	r8, r3
    3c56:	d1f0      	bne.n	3c3a <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    3c58:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    3c5c:	2100      	movs	r1, #0
    3c5e:	4620      	mov	r0, r4
    3c60:	f883 a016 	strb.w	sl, [r3, #22]
    3c64:	f7ff fc80 	bl	3568 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    3c68:	2101      	movs	r1, #1
    3c6a:	4620      	mov	r0, r4
    3c6c:	f7ff fc5a 	bl	3524 <FatFile::readDirCache(bool)>
    3c70:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3c72:	220b      	movs	r2, #11
    3c74:	4630      	mov	r0, r6
      if (!dir) {
    3c76:	b19b      	cbz	r3, 3ca0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    3c78:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3c7c:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    3c7e:	f1bc 0f00 	cmp.w	ip, #0
    3c82:	d013      	beq.n	3cac <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3c84:	7adb      	ldrb	r3, [r3, #11]
    3c86:	071b      	lsls	r3, r3, #28
    3c88:	d4ee      	bmi.n	3c68 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    3c8a:	f007 fb07 	bl	b29c <memcmp>
    3c8e:	2800      	cmp	r0, #0
    3c90:	d1ea      	bne.n	3c68 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    3c92:	f109 39ff 	add.w	r9, r9, #4294967295
    3c96:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    3c9a:	d1c2      	bne.n	3c22 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    3c9c:	4648      	mov	r0, r9
 fail:
    3c9e:	e003      	b.n	3ca8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    3ca0:	7860      	ldrb	r0, [r4, #1]
    3ca2:	fab0 f080 	clz	r0, r0
    3ca6:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    3ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    3cac:	2001      	movs	r0, #1
}
    3cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cb2:	bf00      	nop
    3cb4:	2001f5cc 	.word	0x2001f5cc

00003cb8 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    3cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cbc:	ed2d 8b02 	vpush	{d8}
    3cc0:	b08b      	sub	sp, #44	; 0x2c
    3cc2:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    3cc6:	688b      	ldr	r3, [r1, #8]
    3cc8:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    3cca:	780b      	ldrb	r3, [r1, #0]
    3ccc:	f013 0f70 	tst.w	r3, #112	; 0x70
    3cd0:	d053      	beq.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    3cd2:	9b02      	ldr	r3, [sp, #8]
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d14f      	bne.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    3cda:	6913      	ldr	r3, [r2, #16]
    3cdc:	4690      	mov	r8, r2
    3cde:	4a9a      	ldr	r2, [pc, #616]	; (3f48 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    3ce0:	460e      	mov	r6, r1
    3ce2:	330c      	adds	r3, #12
    3ce4:	fba2 2303 	umull	r2, r3, r2, r3
    3ce8:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    3cec:	f898 3015 	ldrb.w	r3, [r8, #21]
    3cf0:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    3cf2:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    3cf4:	f000 80a7 	beq.w	3e46 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    3cf8:	1c57      	adds	r7, r2, #1
    3cfa:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    3cfc:	2300      	movs	r3, #0
    seekSet(0);
    3cfe:	4630      	mov	r0, r6
    3d00:	4619      	mov	r1, r3
    3d02:	461c      	mov	r4, r3
    3d04:	9306      	str	r3, [sp, #24]
    3d06:	f7ff fc2f 	bl	3568 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3d0a:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    3d0e:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    3d10:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    3d12:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3d14:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    3d18:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    3d1a:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    3d1c:	2100      	movs	r1, #0
    3d1e:	4630      	mov	r0, r6
    3d20:	f7ff fc00 	bl	3524 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    3d24:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    3d28:	4603      	mov	r3, r0
    3d2a:	b320      	cbz	r0, 3d76 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    3d2c:	7802      	ldrb	r2, [r0, #0]
    3d2e:	2ae5      	cmp	r2, #229	; 0xe5
    3d30:	d029      	beq.n	3d86 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    3d32:	b342      	cbz	r2, 3d86 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    3d34:	42bc      	cmp	r4, r7
    3d36:	bf38      	it	cc
    3d38:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    3d3a:	2a2e      	cmp	r2, #46	; 0x2e
    3d3c:	d02b      	beq.n	3d96 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    3d3e:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    3d42:	f1bc 0f0f 	cmp.w	ip, #15
    3d46:	d054      	beq.n	3df2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    3d48:	f01c 0c08 	ands.w	ip, ip, #8
    3d4c:	d123      	bne.n	3d96 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    3d4e:	f1b9 0f00 	cmp.w	r9, #0
    3d52:	f040 80d5 	bne.w	3f00 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3d56:	220b      	movs	r2, #11
    3d58:	ee18 1a10 	vmov	r1, s16
    3d5c:	f007 fa9e 	bl	b29c <memcmp>
    3d60:	2800      	cmp	r0, #0
    3d62:	d1da      	bne.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    3d64:	f898 3015 	ldrb.w	r3, [r8, #21]
    3d68:	f013 0301 	ands.w	r3, r3, #1
    3d6c:	f000 80e4 	beq.w	3f38 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    3d70:	2301      	movs	r3, #1
    3d72:	9305      	str	r3, [sp, #20]
    3d74:	e7d1      	b.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    3d76:	7873      	ldrb	r3, [r6, #1]
    3d78:	b183      	cbz	r3, 3d9c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    3d7a:	2000      	movs	r0, #0
}
    3d7c:	b00b      	add	sp, #44	; 0x2c
    3d7e:	ecbd 8b02 	vpop	{d8}
    3d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    3d86:	2c00      	cmp	r4, #0
    3d88:	bf08      	it	eq
    3d8a:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    3d8c:	42bc      	cmp	r4, r7
    3d8e:	d201      	bcs.n	3d94 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    3d90:	3401      	adds	r4, #1
    3d92:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    3d94:	b112      	cbz	r2, 3d9c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    3d96:	f04f 0900 	mov.w	r9, #0
    3d9a:	e7be      	b.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    3d9c:	9b03      	ldr	r3, [sp, #12]
    3d9e:	059a      	lsls	r2, r3, #22
    3da0:	d5eb      	bpl.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    3da2:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    3da6:	3b01      	subs	r3, #1
    3da8:	2b01      	cmp	r3, #1
    3daa:	d8e6      	bhi.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    3dac:	2c00      	cmp	r4, #0
    3dae:	bf08      	it	eq
    3db0:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    3db2:	42bc      	cmp	r4, r7
    3db4:	d303      	bcc.n	3dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    3db6:	e048      	b.n	3e4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    3db8:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    3dba:	42a7      	cmp	r7, r4
    3dbc:	d045      	beq.n	3e4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    3dbe:	2100      	movs	r1, #0
    3dc0:	4630      	mov	r0, r6
    3dc2:	f7ff fbaf 	bl	3524 <FatFile::readDirCache(bool)>
    freeFound++;
    3dc6:	1c63      	adds	r3, r4, #1
    if (!dir) {
    3dc8:	2800      	cmp	r0, #0
    3dca:	d1f5      	bne.n	3db8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    3dcc:	7873      	ldrb	r3, [r6, #1]
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d1d3      	bne.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    3dd2:	42a7      	cmp	r7, r4
    3dd4:	d939      	bls.n	3e4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    3dd6:	9d07      	ldr	r5, [sp, #28]
    3dd8:	e005      	b.n	3de6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    3dda:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    3ddc:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    3de0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    3de2:	42a7      	cmp	r7, r4
    3de4:	d931      	bls.n	3e4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    3de6:	4630      	mov	r0, r6
    3de8:	f7ff f894 	bl	2f14 <FatFile::addDirCluster()>
    3dec:	2800      	cmp	r0, #0
    3dee:	d1f4      	bne.n	3dda <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    3df0:	e7c3      	b.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    3df2:	f1b9 0f00 	cmp.w	r9, #0
    3df6:	d119      	bne.n	3e2c <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    3df8:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    3dfc:	9904      	ldr	r1, [sp, #16]
    3dfe:	4559      	cmp	r1, fp
    3e00:	d18b      	bne.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    3e02:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    3e06:	d088      	beq.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    3e08:	7b43      	ldrb	r3, [r0, #13]
    3e0a:	4689      	mov	r9, r1
    3e0c:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    3e0e:	f1bb 0f01 	cmp.w	fp, #1
    3e12:	d182      	bne.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    3e14:	1c69      	adds	r1, r5, #1
    3e16:	464b      	mov	r3, r9
    3e18:	4642      	mov	r2, r8
    3e1a:	4630      	mov	r0, r6
    3e1c:	b289      	uxth	r1, r1
    3e1e:	f7ff fd4d 	bl	38bc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    3e22:	2800      	cmp	r0, #0
    3e24:	bf08      	it	eq
    3e26:	f04f 0900 	moveq.w	r9, #0
    3e2a:	e776      	b.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    3e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
    3e30:	fa5f fb8b 	uxtb.w	fp, fp
    3e34:	455a      	cmp	r2, fp
    3e36:	d1ae      	bne.n	3d96 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    3e38:	7b43      	ldrb	r3, [r0, #13]
    3e3a:	9a06      	ldr	r2, [sp, #24]
    3e3c:	4293      	cmp	r3, r2
    3e3e:	d0e6      	beq.n	3e0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    3e40:	f04f 0900 	mov.w	r9, #0
    3e44:	e769      	b.n	3d1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    3e46:	2701      	movs	r7, #1
    3e48:	e758      	b.n	3cfc <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    3e4a:	9b05      	ldr	r3, [sp, #20]
    3e4c:	b12b      	cbz	r3, 3e5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    3e4e:	4641      	mov	r1, r8
    3e50:	4630      	mov	r0, r6
    3e52:	f7ff fed7 	bl	3c04 <FatFile::makeUniqueSfn(FatLfn_t*)>
    3e56:	2800      	cmp	r0, #0
    3e58:	d08f      	beq.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    3e5a:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    3e5c:	4642      	mov	r2, r8
    3e5e:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    3e60:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    3e62:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    3e66:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    3e68:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    3e6a:	4629      	mov	r1, r5
    3e6c:	f7ff fd84 	bl	3978 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    3e70:	2800      	cmp	r0, #0
    3e72:	d082      	beq.n	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3e74:	0169      	lsls	r1, r5, #5
    3e76:	4630      	mov	r0, r6
    3e78:	f7ff fb76 	bl	3568 <FatFile::seekSet(unsigned long)>
    3e7c:	2800      	cmp	r0, #0
    3e7e:	f43f af7c 	beq.w	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    3e82:	2100      	movs	r1, #0
    3e84:	4630      	mov	r0, r6
    3e86:	f7ff fb4d 	bl	3524 <FatFile::readDirCache(bool)>
  if (!dir) {
    3e8a:	4604      	mov	r4, r0
    3e8c:	2800      	cmp	r0, #0
    3e8e:	f43f af74 	beq.w	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    3e92:	2220      	movs	r2, #32
    3e94:	2100      	movs	r1, #0
    3e96:	f007 faad 	bl	b3f4 <memset>
  memcpy(dir->name, fname->sfn, 11);
    3e9a:	f8d8 2016 	ldr.w	r2, [r8, #22]
    3e9e:	f8d8 301a 	ldr.w	r3, [r8, #26]
    3ea2:	6022      	str	r2, [r4, #0]
    3ea4:	6063      	str	r3, [r4, #4]
    3ea6:	f898 3020 	ldrb.w	r3, [r8, #32]
    3eaa:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    3eae:	72a3      	strb	r3, [r4, #10]
    3eb0:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    3eb2:	f898 3015 	ldrb.w	r3, [r8, #21]
    3eb6:	f003 0318 	and.w	r3, r3, #24
    3eba:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    3ebc:	4b23      	ldr	r3, [pc, #140]	; (3f4c <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d03b      	beq.n	3f3c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    3ec4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    3ec8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    3ecc:	a809      	add	r0, sp, #36	; 0x24
    3ece:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ed0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3ed4:	8223      	strh	r3, [r4, #16]
    3ed6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    3eda:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    3edc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    3ee0:	7363      	strb	r3, [r4, #13]
    3ee2:	9a07      	ldr	r2, [sp, #28]
    3ee4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    3ee8:	f043 0301 	orr.w	r3, r3, #1
    3eec:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    3ef0:	9b03      	ldr	r3, [sp, #12]
    3ef2:	462a      	mov	r2, r5
    3ef4:	4631      	mov	r1, r6
    3ef6:	9802      	ldr	r0, [sp, #8]
    3ef8:	9700      	str	r7, [sp, #0]
    3efa:	f7ff fb8d 	bl	3618 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    3efe:	e73d      	b.n	3d7c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    3f00:	f1bb 0f01 	cmp.w	fp, #1
    3f04:	f47f af39 	bne.w	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    3f08:	300a      	adds	r0, #10
    3f0a:	e001      	b.n	3f10 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3f0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3f10:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    3f14:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3f16:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    3f1a:	fa52 f281 	uxtab	r2, r2, r1
    3f1e:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    3f22:	d1f3      	bne.n	3f0c <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    3f24:	9b06      	ldr	r3, [sp, #24]
    3f26:	4563      	cmp	r3, ip
    3f28:	f47f af27 	bne.w	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    3f2c:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    3f2e:	9b03      	ldr	r3, [sp, #12]
    3f30:	0519      	lsls	r1, r3, #20
    3f32:	f53f af22 	bmi.w	3d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    3f36:	e7db      	b.n	3ef0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    3f38:	461f      	mov	r7, r3
    3f3a:	e7f8      	b.n	3f2e <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    3f3c:	f245 6321 	movw	r3, #22049	; 0x5621
    3f40:	8223      	strh	r3, [r4, #16]
    3f42:	8323      	strh	r3, [r4, #24]
    3f44:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    3f46:	e7cc      	b.n	3ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    3f48:	4ec4ec4f 	.word	0x4ec4ec4f
    3f4c:	2001e21c 	.word	0x2001e21c

00003f50 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    3f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f54:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    3f56:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    3f58:	b082      	sub	sp, #8
    3f5a:	460c      	mov	r4, r1
  while (*path == ' ') {
    3f5c:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    3f5e:	4615      	mov	r5, r2
  while (*path == ' ') {
    3f60:	d103      	bne.n	3f6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    3f62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    3f66:	2b20      	cmp	r3, #32
    3f68:	d0fb      	beq.n	3f62 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    3f6a:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    3f6c:	7823      	ldrb	r3, [r4, #0]
    3f6e:	b363      	cbz	r3, 3fca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    3f70:	2b2f      	cmp	r3, #47	; 0x2f
    3f72:	d02a      	beq.n	3fca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    3f74:	f04f 0800 	mov.w	r8, #0
    3f78:	4e29      	ldr	r6, [pc, #164]	; (4020 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    3f7a:	1d21      	adds	r1, r4, #4
    3f7c:	4620      	mov	r0, r4
    3f7e:	aa01      	add	r2, sp, #4
    3f80:	f002 fd5e 	bl	6a40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    3f84:	4604      	mov	r4, r0
    3f86:	b170      	cbz	r0, 3fa6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    3f88:	9b01      	ldr	r3, [sp, #4]
    3f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3f8e:	d240      	bcs.n	4012 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    3f90:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    3f92:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    3f96:	d831      	bhi.n	3ffc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    3f98:	2b3c      	cmp	r3, #60	; 0x3c
    3f9a:	b2d9      	uxtb	r1, r3
    3f9c:	d829      	bhi.n	3ff2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    3f9e:	2921      	cmp	r1, #33	; 0x21
    3fa0:	d805      	bhi.n	3fae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    3fa2:	291f      	cmp	r1, #31
    3fa4:	d809      	bhi.n	3fba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    3fa6:	2000      	movs	r0, #0
    3fa8:	b002      	add	sp, #8
    3faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fae:	3922      	subs	r1, #34	; 0x22
    3fb0:	b2c9      	uxtb	r1, r1
    3fb2:	fa26 f101 	lsr.w	r1, r6, r1
    3fb6:	07ca      	lsls	r2, r1, #31
    3fb8:	d4f5      	bmi.n	3fa6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    3fba:	2b2e      	cmp	r3, #46	; 0x2e
    3fbc:	d001      	beq.n	3fc2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    3fbe:	2b20      	cmp	r3, #32
    3fc0:	d11c      	bne.n	3ffc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    3fc2:	7823      	ldrb	r3, [r4, #0]
    3fc4:	b10b      	cbz	r3, 3fca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    3fc6:	2b2f      	cmp	r3, #47	; 0x2f
    3fc8:	d1d7      	bne.n	3f7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    3fca:	692b      	ldr	r3, [r5, #16]
    3fcc:	3b01      	subs	r3, #1
    3fce:	2bfe      	cmp	r3, #254	; 0xfe
    3fd0:	d8e9      	bhi.n	3fa6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    3fd2:	7823      	ldrb	r3, [r4, #0]
    3fd4:	2b20      	cmp	r3, #32
    3fd6:	d103      	bne.n	3fe0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    3fd8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    3fdc:	2b20      	cmp	r3, #32
    3fde:	d0fb      	beq.n	3fd8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    3fe0:	2b2f      	cmp	r3, #47	; 0x2f
    3fe2:	d0f9      	beq.n	3fd8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    3fe4:	4628      	mov	r0, r5
  *ptr = path;
    3fe6:	603c      	str	r4, [r7, #0]
}
    3fe8:	b002      	add	sp, #8
    3fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    3fee:	f7ff bd55 	b.w	3a9c <FatFile::makeSFN(FatLfn_t*)>
    3ff2:	295c      	cmp	r1, #92	; 0x5c
    3ff4:	d0d7      	beq.n	3fa6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    3ff6:	d905      	bls.n	4004 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    3ff8:	297c      	cmp	r1, #124	; 0x7c
    3ffa:	d0d4      	beq.n	3fa6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    3ffc:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    4000:	60ac      	str	r4, [r5, #8]
    4002:	e7de      	b.n	3fc2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    4004:	393e      	subs	r1, #62	; 0x3e
    4006:	2901      	cmp	r1, #1
    4008:	d8f8      	bhi.n	3ffc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    400a:	2000      	movs	r0, #0
    400c:	b002      	add	sp, #8
    400e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    4012:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    4016:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    4018:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    401c:	e7d1      	b.n	3fc2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    401e:	bf00      	nop
    4020:	05002101 	.word	0x05002101

00004024 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    4024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4028:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    402c:	b1a2      	cbz	r2, 4058 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    402e:	4605      	mov	r5, r0
    4030:	460c      	mov	r4, r1
    4032:	4698      	mov	r8, r3
    4034:	1857      	adds	r7, r2, r1
    4036:	e001      	b.n	403c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    4038:	42bc      	cmp	r4, r7
    403a:	d00d      	beq.n	4058 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    403c:	682b      	ldr	r3, [r5, #0]
    403e:	4620      	mov	r0, r4
    4040:	4649      	mov	r1, r9
    4042:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    4044:	47c0      	blx	r8
    4046:	4621      	mov	r1, r4
    4048:	4602      	mov	r2, r0
    404a:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    404c:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    404e:	47b0      	blx	r6
    4050:	2800      	cmp	r0, #0
    4052:	d1f1      	bne.n	4038 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    4054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    4058:	2001      	movs	r0, #1
  }
    405a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    405e:	bf00      	nop

00004060 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    4060:	2a04      	cmp	r2, #4
    4062:	d804      	bhi.n	406e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    4064:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4068:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    406c:	4770      	bx	lr
  } else if (i < 11) {
    406e:	2a0a      	cmp	r2, #10
    4070:	d803      	bhi.n	407a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    4072:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4076:	8890      	ldrh	r0, [r2, #4]
    4078:	4770      	bx	lr
  } else if (i < 13) {
    407a:	2a0c      	cmp	r2, #12
    407c:	d803      	bhi.n	4086 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    407e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    4082:	88c8      	ldrh	r0, [r1, #6]
    4084:	4770      	bx	lr
  return 0;
    4086:	2000      	movs	r0, #0
}
    4088:	4770      	bx	lr
    408a:	bf00      	nop

0000408c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    408c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4090:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    4094:	b1c3      	cbz	r3, 40c8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    4096:	4681      	mov	r9, r0
    4098:	460c      	mov	r4, r1
    409a:	4615      	mov	r5, r2
    409c:	185e      	adds	r6, r3, r1
    409e:	e002      	b.n	40a6 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    40a0:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    40a2:	42b4      	cmp	r4, r6
    40a4:	d010      	beq.n	40c8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    40a6:	f8d9 3000 	ldr.w	r3, [r9]
    40aa:	4621      	mov	r1, r4
    40ac:	462a      	mov	r2, r5
    40ae:	4648      	mov	r0, r9
    40b0:	691b      	ldr	r3, [r3, #16]
    40b2:	4798      	blx	r3
    40b4:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    40b6:	463a      	mov	r2, r7
    40b8:	4620      	mov	r0, r4
    40ba:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    40bc:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    40be:	2b00      	cmp	r3, #0
    40c0:	d1ee      	bne.n	40a0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    40c2:	4618      	mov	r0, r3
    40c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    40c8:	2301      	movs	r3, #1
  }
    40ca:	4618      	mov	r0, r3
    40cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000040d0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    40d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    40d4:	79c3      	ldrb	r3, [r0, #7]
    40d6:	4604      	mov	r4, r0
    40d8:	460d      	mov	r5, r1
    40da:	4617      	mov	r7, r2
  if (fatType() == 32) {
    40dc:	2b20      	cmp	r3, #32
    40de:	d059      	beq.n	4194 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    40e0:	2b10      	cmp	r3, #16
    40e2:	d030      	beq.n	4146 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    40e4:	2b0c      	cmp	r3, #12
    40e6:	d151      	bne.n	418c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    40e8:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    40ea:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    40ee:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    40f0:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    40f4:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    40f8:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    40fc:	4648      	mov	r0, r9
    40fe:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4100:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    4104:	f3c1 2146 	ubfx	r1, r1, #9, #7
    4108:	0952      	lsrs	r2, r2, #5
    410a:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    410e:	0052      	lsls	r2, r2, #1
    4110:	4641      	mov	r1, r8
    4112:	f002 fc47 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4116:	2800      	cmp	r0, #0
    4118:	d038      	beq.n	418c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    411a:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    411e:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    4120:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    4122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4126:	d023      	beq.n	4170 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    4128:	4418      	add	r0, r3
    412a:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    412c:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    412e:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    4130:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4134:	bf4c      	ite	mi
    4136:	091b      	lsrmi	r3, r3, #4
    4138:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    413c:	429a      	cmp	r2, r3
    413e:	d240      	bcs.n	41c2 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    4140:	2000      	movs	r0, #0
}
    4142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4146:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    4148:	f3c1 2107 	ubfx	r1, r1, #8, #8
    414c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    414e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4152:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4156:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4158:	fab2 f282 	clz	r2, r2
    415c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    415e:	0052      	lsls	r2, r2, #1
    4160:	f002 fc20 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4164:	b190      	cbz	r0, 418c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4166:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    4168:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    416c:	5b43      	ldrh	r3, [r0, r5]
    416e:	e025      	b.n	41bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4170:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    4172:	f108 0101 	add.w	r1, r8, #1
    4176:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4178:	f1a2 0202 	sub.w	r2, r2, #2
    417c:	fab2 f282 	clz	r2, r2
    4180:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    4182:	0052      	lsls	r2, r2, #1
    4184:	f002 fc0e 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4188:	2800      	cmp	r0, #0
    418a:	d1ce      	bne.n	412a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    418c:	f04f 30ff 	mov.w	r0, #4294967295
}
    4190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4194:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4196:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4198:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    419c:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    41a0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    41a4:	fab2 f282 	clz	r2, r2
    41a8:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    41aa:	0052      	lsls	r2, r2, #1
    41ac:	f002 fbfa 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    41b0:	2800      	cmp	r0, #0
    41b2:	d0eb      	beq.n	418c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    41b4:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    41b6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    41ba:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    41bc:	69e2      	ldr	r2, [r4, #28]
    41be:	429a      	cmp	r2, r3
    41c0:	d3be      	bcc.n	4140 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    41c2:	2001      	movs	r0, #1
  *value = next;
    41c4:	603b      	str	r3, [r7, #0]
}
    41c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41ca:	bf00      	nop

000041cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    41cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    41d0:	79c3      	ldrb	r3, [r0, #7]
    41d2:	4605      	mov	r5, r0
    41d4:	460c      	mov	r4, r1
    41d6:	4616      	mov	r6, r2
  if (fatType() == 32) {
    41d8:	2b20      	cmp	r3, #32
    41da:	d048      	beq.n	426e <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    41dc:	2b10      	cmp	r3, #16
    41de:	d02d      	beq.n	423c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    41e0:	2b0c      	cmp	r3, #12
    41e2:	d141      	bne.n	4268 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    41e4:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    41e8:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    41ea:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    41ee:	fa11 f184 	uxtah	r1, r1, r4
    41f2:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    41f6:	f3c1 2146 	ubfx	r1, r1, #9, #7
    41fa:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    41fc:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    41fe:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4200:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    4202:	4639      	mov	r1, r7
    4204:	bf14      	ite	ne
    4206:	2201      	movne	r2, #1
    4208:	2203      	moveq	r2, #3
    420a:	f002 fbcb 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    420e:	b358      	cbz	r0, 4268 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    4210:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    4214:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    4218:	d03f      	beq.n	429a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    421a:	5cc2      	ldrb	r2, [r0, r3]
    421c:	f002 020f 	and.w	r2, r2, #15
    4220:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    4224:	54c2      	strb	r2, [r0, r3]
    index++;
    4226:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    4228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    422c:	d03a      	beq.n	42a4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    422e:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    4232:	4403      	add	r3, r0
    return true;
    4234:	2001      	movs	r0, #1
    pc[index] = tmp;
    4236:	701a      	strb	r2, [r3, #0]
}
    4238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    423c:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    423e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    4242:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4244:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4248:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    424a:	4419      	add	r1, r3
    424c:	bf14      	ite	ne
    424e:	2201      	movne	r2, #1
    4250:	2203      	moveq	r2, #3
    4252:	f002 fba7 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4256:	4603      	mov	r3, r0
    4258:	b130      	cbz	r0, 4268 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    425a:	0064      	lsls	r4, r4, #1
    return true;
    425c:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    425e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    4262:	531e      	strh	r6, [r3, r4]
}
    4264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    4268:	2000      	movs	r0, #0
}
    426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    426e:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4270:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4272:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4276:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    4278:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    427c:	bf14      	ite	ne
    427e:	2201      	movne	r2, #1
    4280:	2203      	moveq	r2, #3
    4282:	f002 fb8f 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4286:	4603      	mov	r3, r0
    4288:	2800      	cmp	r0, #0
    428a:	d0ed      	beq.n	4268 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    428c:	00a4      	lsls	r4, r4, #2
    return true;
    428e:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4290:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4294:	511e      	str	r6, [r3, r4]
}
    4296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    429a:	54c6      	strb	r6, [r0, r3]
    index++;
    429c:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    429e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    42a2:	d115      	bne.n	42d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    42a4:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    42a6:	1c79      	adds	r1, r7, #1
    42a8:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    42aa:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    42ac:	bf14      	ite	ne
    42ae:	2201      	movne	r2, #1
    42b0:	2203      	moveq	r2, #3
    42b2:	f002 fb77 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    42b6:	4603      	mov	r3, r0
    42b8:	2800      	cmp	r0, #0
    42ba:	d0d5      	beq.n	4268 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    42bc:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    42c0:	2c00      	cmp	r4, #0
    42c2:	d1b7      	bne.n	4234 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    42c4:	7819      	ldrb	r1, [r3, #0]
    42c6:	f021 010f 	bic.w	r1, r1, #15
    42ca:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    42ce:	e7b1      	b.n	4234 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    42d0:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    42d4:	4403      	add	r3, r0
    42d6:	e7f5      	b.n	42c4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

000042d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    42d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    42dc:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    42de:	b082      	sub	sp, #8
    42e0:	4605      	mov	r5, r0
    42e2:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    42e4:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    42e6:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    42e8:	d340      	bcc.n	436c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    42ea:	2701      	movs	r7, #1
    find++;
    42ec:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    42ee:	69eb      	ldr	r3, [r5, #28]
    42f0:	aa01      	add	r2, sp, #4
    42f2:	4628      	mov	r0, r5
    42f4:	42a3      	cmp	r3, r4
    42f6:	d205      	bcs.n	4304 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    42f8:	bb9f      	cbnz	r7, 4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    42fa:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    42fc:	2701      	movs	r7, #1
    find++;
    42fe:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    4300:	42a3      	cmp	r3, r4
    4302:	d32e      	bcc.n	4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    4304:	42a6      	cmp	r6, r4
    4306:	bf18      	it	ne
    4308:	2c01      	cmpne	r4, #1
    430a:	4621      	mov	r1, r4
    430c:	d929      	bls.n	4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    430e:	f7ff fedf 	bl	40d0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    4312:	2800      	cmp	r0, #0
    4314:	db25      	blt.n	4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    4316:	d0e9      	beq.n	42ec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4318:	9b01      	ldr	r3, [sp, #4]
    431a:	2b00      	cmp	r3, #0
    431c:	d1e6      	bne.n	42ec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    431e:	b107      	cbz	r7, 4322 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    4320:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    4322:	69eb      	ldr	r3, [r5, #28]
    4324:	42a3      	cmp	r3, r4
    4326:	d31c      	bcc.n	4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4328:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    432c:	4621      	mov	r1, r4
    432e:	4628      	mov	r0, r5
    4330:	f7ff ff4c 	bl	41cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    4334:	4607      	mov	r7, r0
    4336:	b1a0      	cbz	r0, 4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    4338:	b93e      	cbnz	r6, 434a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    433a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    433c:	2b00      	cmp	r3, #0
    433e:	db01      	blt.n	4344 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    4340:	3b01      	subs	r3, #1
    4342:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    4344:	f8c8 4000 	str.w	r4, [r8]
  return true;
    4348:	e00c      	b.n	4364 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    434a:	2e01      	cmp	r6, #1
    434c:	d009      	beq.n	4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    434e:	69eb      	ldr	r3, [r5, #28]
    4350:	429e      	cmp	r6, r3
    4352:	d806      	bhi.n	4362 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4354:	4631      	mov	r1, r6
    4356:	4622      	mov	r2, r4
    4358:	4628      	mov	r0, r5
    435a:	f7ff ff37 	bl	41cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    435e:	2800      	cmp	r0, #0
    4360:	d1eb      	bne.n	433a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    4362:	2700      	movs	r7, #0
}
    4364:	4638      	mov	r0, r7
    4366:	b002      	add	sp, #8
    4368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    436c:	460c      	mov	r4, r1
    setStart = false;
    436e:	2700      	movs	r7, #0
    4370:	e7bc      	b.n	42ec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4372:	bf00      	nop

00004374 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4374:	2901      	cmp	r1, #1
    4376:	d90c      	bls.n	4392 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4378:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    437a:	69c4      	ldr	r4, [r0, #28]
    437c:	428c      	cmp	r4, r1
    437e:	d303      	bcc.n	4388 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    4380:	f85d 4b04 	ldr.w	r4, [sp], #4
    4384:	f7ff bea4 	b.w	40d0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    4388:	f04f 30ff 	mov.w	r0, #4294967295
    438c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4390:	4770      	bx	lr
    4392:	f04f 30ff 	mov.w	r0, #4294967295
    4396:	4770      	bx	lr

00004398 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    4398:	b570      	push	{r4, r5, r6, lr}
    439a:	4605      	mov	r5, r0
    439c:	b082      	sub	sp, #8
    439e:	460c      	mov	r4, r1
    43a0:	e01d      	b.n	43de <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    43a2:	69eb      	ldr	r3, [r5, #28]
    43a4:	429c      	cmp	r4, r3
    43a6:	d81f      	bhi.n	43e8 <FatPartition::freeChain(unsigned long)+0x50>
    43a8:	f7ff fe92 	bl	40d0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    43ac:	4606      	mov	r6, r0
    if (fg < 0) {
    43ae:	4621      	mov	r1, r4
    43b0:	2200      	movs	r2, #0
    43b2:	2e00      	cmp	r6, #0
    43b4:	4628      	mov	r0, r5
    43b6:	db17      	blt.n	43e8 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    43b8:	69eb      	ldr	r3, [r5, #28]
    43ba:	429c      	cmp	r4, r3
    43bc:	d814      	bhi.n	43e8 <FatPartition::freeChain(unsigned long)+0x50>
    43be:	f7ff ff05 	bl	41cc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    43c2:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    43c4:	b180      	cbz	r0, 43e8 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    43c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    43c8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    43ca:	f103 0301 	add.w	r3, r3, #1
    43ce:	bfa8      	it	ge
    43d0:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    43d2:	68eb      	ldr	r3, [r5, #12]
    43d4:	42a3      	cmp	r3, r4
    cluster = next;
    43d6:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    43d8:	bf88      	it	hi
    43da:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    43dc:	b12e      	cbz	r6, 43ea <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    43de:	2c01      	cmp	r4, #1
    43e0:	4621      	mov	r1, r4
    43e2:	aa01      	add	r2, sp, #4
    43e4:	4628      	mov	r0, r5
    43e6:	d8dc      	bhi.n	43a2 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    43e8:	2000      	movs	r0, #0
}
    43ea:	b002      	add	sp, #8
    43ec:	bd70      	pop	{r4, r5, r6, pc}
    43ee:	bf00      	nop

000043f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    43f0:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    43f2:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    43f4:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    43f6:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    43f8:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    43fa:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    43fe:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    4402:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    4404:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    4406:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    4408:	62e1      	str	r1, [r4, #44]	; 0x2c
    440a:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    440e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    4412:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    4416:	6362      	str	r2, [r4, #52]	; 0x34
    4418:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    441c:	b1cd      	cbz	r5, 4452 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    441e:	2d04      	cmp	r5, #4
    4420:	d901      	bls.n	4426 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    4422:	2000      	movs	r0, #0
}
    4424:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    4426:	461a      	mov	r2, r3
    4428:	4619      	mov	r1, r3
    442a:	4630      	mov	r0, r6
    442c:	f002 faba 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    4430:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4434:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    4438:	442b      	add	r3, r5
    443a:	011d      	lsls	r5, r3, #4
    443c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4440:	2800      	cmp	r0, #0
    4442:	d0ee      	beq.n	4422 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4444:	7919      	ldrb	r1, [r3, #4]
    4446:	2900      	cmp	r1, #0
    4448:	d0eb      	beq.n	4422 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    444a:	5d52      	ldrb	r2, [r2, r5]
    444c:	0652      	lsls	r2, r2, #25
    444e:	d1e8      	bne.n	4422 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    4450:	689d      	ldr	r5, [r3, #8]
    4452:	2200      	movs	r2, #0
    4454:	4629      	mov	r1, r5
    4456:	4630      	mov	r0, r6
    4458:	f002 faa4 	bl	69a4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    445c:	2800      	cmp	r0, #0
    445e:	d0e0      	beq.n	4422 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4460:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4468:	d1db      	bne.n	4422 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    446a:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    446c:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    446e:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    4470:	2a01      	cmp	r2, #1
    4472:	d8d6      	bhi.n	4422 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4474:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4476:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4478:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    447a:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    447c:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    447e:	f04f 0300 	mov.w	r3, #0
    4482:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4484:	d044      	beq.n	4510 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    4486:	2201      	movs	r2, #1
    4488:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    448a:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    448c:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    448e:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4490:	4291      	cmp	r1, r2
    4492:	d004      	beq.n	449e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    4494:	2b08      	cmp	r3, #8
    4496:	d1f7      	bne.n	4488 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    4498:	2000      	movs	r0, #0
    449a:	71a3      	strb	r3, [r4, #6]
}
    449c:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    449e:	461e      	mov	r6, r3
    44a0:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    44a2:	8ac1      	ldrh	r1, [r0, #22]
    44a4:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    44a6:	b909      	cbnz	r1, 44ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    44a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    44aa:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    44ac:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    44ae:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    44b2:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    44b4:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    44b6:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    44b8:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    44ba:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    44be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    44c2:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    44c6:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    44ca:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    44cc:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    44d0:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    44d2:	b902      	cbnz	r2, 44d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    44d4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    44d6:	1aed      	subs	r5, r5, r3
    44d8:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    44da:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    44dc:	1c5a      	adds	r2, r3, #1
    44de:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    44e0:	f04f 32ff 	mov.w	r2, #4294967295
    44e4:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    44e6:	f640 72f4 	movw	r2, #4084	; 0xff4
    44ea:	4293      	cmp	r3, r2
    44ec:	d90c      	bls.n	4508 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    44ee:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    44f2:	4293      	cmp	r3, r2
    44f4:	d90a      	bls.n	450c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    44f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    44f8:	2320      	movs	r3, #32
    44fa:	6222      	str	r2, [r4, #32]
  return true;
    44fc:	2001      	movs	r0, #1
    m_fatType = 12;
    44fe:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    4500:	6321      	str	r1, [r4, #48]	; 0x30
    4502:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    4506:	bd70      	pop	{r4, r5, r6, pc}
    4508:	230c      	movs	r3, #12
    450a:	e7f7      	b.n	44fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    450c:	2310      	movs	r3, #16
    450e:	e7f5      	b.n	44fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4510:	461e      	mov	r6, r3
    4512:	e7c6      	b.n	44a2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00004514 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    4514:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4516:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    451a:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    451c:	2300      	movs	r3, #0
    451e:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4520:	a801      	add	r0, sp, #4
    4522:	4621      	mov	r1, r4
    4524:	9301      	str	r3, [sp, #4]
    4526:	f7fe fe6d 	bl	3204 <FatFile::open(FatFile*, char const*, int)>
    452a:	4605      	mov	r5, r0
    452c:	b198      	cbz	r0, 4556 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    452e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4532:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    4536:	d011      	beq.n	455c <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4538:	f10d 0e04 	add.w	lr, sp, #4
    453c:	46a4      	mov	ip, r4
    453e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4546:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    454a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    454e:	f8de 3000 	ldr.w	r3, [lr]
    4552:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    4556:	4628      	mov	r0, r5
    4558:	b00b      	add	sp, #44	; 0x2c
    455a:	bd30      	pop	{r4, r5, pc}
  return false;
    455c:	461d      	mov	r5, r3
}
    455e:	4628      	mov	r0, r5
    4560:	b00b      	add	sp, #44	; 0x2c
    4562:	bd30      	pop	{r4, r5, pc}

00004564 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    4564:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4566:	b570      	push	{r4, r5, r6, lr}
    4568:	4604      	mov	r4, r0
  if (this == &from) return *this;
    456a:	d021      	beq.n	45b0 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  if (m_fFile && m_fFile->close()) {
    456c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    456e:	460d      	mov	r5, r1
    4570:	b118      	cbz	r0, 457a <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    4572:	f7fe fd0b 	bl	2f8c <FatFile::close()>
    4576:	2800      	cmp	r0, #0
    4578:	d141      	bne.n	45fe <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
  if (m_xFile && m_xFile->close()) {
    457a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    457c:	b118      	cbz	r0, 4586 <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    457e:	f7fd f99d 	bl	18bc <ExFatFile::close()>
    4582:	2800      	cmp	r0, #0
    4584:	d141      	bne.n	460a <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    4586:	6bae      	ldr	r6, [r5, #56]	; 0x38
    4588:	b1a6      	cbz	r6, 45b4 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    458a:	4621      	mov	r1, r4
    458c:	2024      	movs	r0, #36	; 0x24
    458e:	f000 f8af 	bl	46f0 <operator new(unsigned int, unsigned long*)>
    4592:	2300      	movs	r3, #0
    4594:	4684      	mov	ip, r0
    4596:	8003      	strh	r3, [r0, #0]
    4598:	7083      	strb	r3, [r0, #2]
    459a:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    459c:	6bad      	ldr	r5, [r5, #56]	; 0x38
    459e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    45a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    45a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    45a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    45aa:	682b      	ldr	r3, [r5, #0]
    45ac:	f8cc 3000 	str.w	r3, [ip]
}
    45b0:	4620      	mov	r0, r4
    45b2:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    45b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    45b6:	2b00      	cmp	r3, #0
    45b8:	d0fa      	beq.n	45b0 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    45ba:	4621      	mov	r1, r4
    45bc:	2038      	movs	r0, #56	; 0x38
    45be:	f000 f897 	bl	46f0 <operator new(unsigned int, unsigned long*)>
    45c2:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    45c6:	8646      	strh	r6, [r0, #50]	; 0x32
    45c8:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    45ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    45cc:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    45d0:	681e      	ldr	r6, [r3, #0]
    45d2:	3310      	adds	r3, #16
    45d4:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    45d8:	3010      	adds	r0, #16
    45da:	f853 1c08 	ldr.w	r1, [r3, #-8]
    45de:	f853 2c04 	ldr.w	r2, [r3, #-4]
    45e2:	4563      	cmp	r3, ip
    45e4:	f840 6c10 	str.w	r6, [r0, #-16]
    45e8:	f840 5c0c 	str.w	r5, [r0, #-12]
    45ec:	f840 1c08 	str.w	r1, [r0, #-8]
    45f0:	f840 2c04 	str.w	r2, [r0, #-4]
    45f4:	d1ec      	bne.n	45d0 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	6003      	str	r3, [r0, #0]
}
    45fa:	4620      	mov	r0, r4
    45fc:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    45fe:	2300      	movs	r3, #0
    4600:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    4602:	6bae      	ldr	r6, [r5, #56]	; 0x38
    4604:	2e00      	cmp	r6, #0
    4606:	d1c0      	bne.n	458a <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4608:	e7d4      	b.n	45b4 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    460a:	2300      	movs	r3, #0
  if (from.m_fFile) {
    460c:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    460e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    4610:	2e00      	cmp	r6, #0
    4612:	d1ba      	bne.n	458a <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4614:	e7ce      	b.n	45b4 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    4616:	bf00      	nop

00004618 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    4618:	b510      	push	{r4, lr}
    461a:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    461c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    461e:	b110      	cbz	r0, 4626 <FsBaseFile::close()+0xe>
    4620:	f7fe fcb4 	bl	2f8c <FatFile::close()>
    4624:	b930      	cbnz	r0, 4634 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    4626:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4628:	b110      	cbz	r0, 4630 <FsBaseFile::close()+0x18>
    462a:	f7fd f947 	bl	18bc <ExFatFile::close()>
    462e:	b920      	cbnz	r0, 463a <FsBaseFile::close()+0x22>
  return false;
    4630:	2000      	movs	r0, #0
}
    4632:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    4634:	2300      	movs	r3, #0
    4636:	63a3      	str	r3, [r4, #56]	; 0x38
}
    4638:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    463a:	2300      	movs	r3, #0
    463c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    463e:	bd10      	pop	{r4, pc}

00004640 <FsBaseFile::open(FsVolume*, char const*, int)>:
  if (!vol) {
    4640:	2900      	cmp	r1, #0
    4642:	d052      	beq.n	46ea <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4648:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    464a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    464c:	460d      	mov	r5, r1
    464e:	4617      	mov	r7, r2
    4650:	461e      	mov	r6, r3
    4652:	b110      	cbz	r0, 465a <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    4654:	f7fe fc9a 	bl	2f8c <FatFile::close()>
    4658:	bba0      	cbnz	r0, 46c4 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    465a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    465c:	b110      	cbz	r0, 4664 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    465e:	f7fd f92d 	bl	18bc <ExFatFile::close()>
    4662:	bbb8      	cbnz	r0, 46d4 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
  if (vol->m_fVol) {
    4664:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    4668:	f1b8 0f00 	cmp.w	r8, #0
    466c:	d011      	beq.n	4692 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    466e:	4621      	mov	r1, r4
    4670:	2024      	movs	r0, #36	; 0x24
    4672:	f000 f83d 	bl	46f0 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4676:	4633      	mov	r3, r6
    4678:	2600      	movs	r6, #0
    467a:	463a      	mov	r2, r7
    467c:	8006      	strh	r6, [r0, #0]
    467e:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    4680:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4682:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    4686:	f7fe fe3f 	bl	3308 <FatFile::open(FatVolume*, char const*, int)>
    468a:	bb58      	cbnz	r0, 46e4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_fFile = nullptr;
    468c:	63a0      	str	r0, [r4, #56]	; 0x38
}
    468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    4692:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4696:	b193      	cbz	r3, 46be <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    4698:	4621      	mov	r1, r4
    469a:	2038      	movs	r0, #56	; 0x38
    469c:	f000 f828 	bl	46f0 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    46a0:	4633      	mov	r3, r6
    46a2:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    46a6:	463a      	mov	r2, r7
    46a8:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    46ac:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    46ae:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    46b2:	f7fd fd13 	bl	20dc <ExFatFile::open(ExFatVolume*, char const*, int)>
    46b6:	b9a8      	cbnz	r0, 46e4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    46b8:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    46ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    46be:	2000      	movs	r0, #0
}
    46c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    46c4:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    46c6:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    46ca:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    46cc:	f1b8 0f00 	cmp.w	r8, #0
    46d0:	d1cd      	bne.n	466e <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    46d2:	e7de      	b.n	4692 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    46d4:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    46d6:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    46da:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    46dc:	f1b8 0f00 	cmp.w	r8, #0
    46e0:	d1c5      	bne.n	466e <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    46e2:	e7d6      	b.n	4692 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    46e4:	2001      	movs	r0, #1
}
    46e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    46ea:	2000      	movs	r0, #0
}
    46ec:	4770      	bx	lr
    46ee:	bf00      	nop

000046f0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    46f0:	4608      	mov	r0, r1
    46f2:	4770      	bx	lr

000046f4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    46f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    46f8:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    46fa:	4604      	mov	r4, r0
    46fc:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    46fe:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    4702:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4706:	4601      	mov	r1, r0
    4708:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    470c:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    470e:	f7ff ffef 	bl	46f0 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    4712:	4642      	mov	r2, r8
  ExFatPartition() {}
    4714:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    4718:	4605      	mov	r5, r0
    471a:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    471e:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    4722:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    4726:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    472a:	f7fe fad3 	bl	2cd4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    472e:	bba0      	cbnz	r0, 479a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    4730:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    4732:	4621      	mov	r1, r4
    4734:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    4738:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    473c:	f7ff ffd8 	bl	46f0 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    4740:	2302      	movs	r3, #2
    4742:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    4744:	4642      	mov	r2, r8
    4746:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    474a:	4605      	mov	r5, r0
    474c:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    4750:	7203      	strb	r3, [r0, #8]
    4752:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    4756:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    475a:	f7ff fe49 	bl	43f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    475e:	b938      	cbnz	r0, 4770 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    4760:	2300      	movs	r3, #0
    4762:	4a1a      	ldr	r2, [pc, #104]	; (47cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    4764:	4618      	mov	r0, r3
  m_cwv = nullptr;
    4766:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    4768:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4770:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4774:	4630      	mov	r0, r6
    4776:	f7fe fc09 	bl	2f8c <FatFile::close()>
    return m_vwd.openRoot(this);
    477a:	4629      	mov	r1, r5
    477c:	4630      	mov	r0, r6
    477e:	f7fe fdcb 	bl	3318 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4782:	2800      	cmp	r0, #0
    4784:	d0ec      	beq.n	4760 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    4786:	4b12      	ldr	r3, [pc, #72]	; (47d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    4788:	681a      	ldr	r2, [r3, #0]
    478a:	b9aa      	cbnz	r2, 47b8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    478c:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    478e:	4b0f      	ldr	r3, [pc, #60]	; (47cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4790:	b1af      	cbz	r7, 47be <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    4792:	2001      	movs	r0, #1
    m_cwv = this;
    4794:	601c      	str	r4, [r3, #0]
}
    4796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    479a:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    479e:	4630      	mov	r0, r6
    47a0:	f7fd f88c 	bl	18bc <ExFatFile::close()>
    return m_vwd.openRoot(this);
    47a4:	4629      	mov	r1, r5
    47a6:	4630      	mov	r0, r6
    47a8:	f7fd f892 	bl	18d0 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    47ac:	2800      	cmp	r0, #0
    47ae:	d0bf      	beq.n	4730 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    47b0:	4b08      	ldr	r3, [pc, #32]	; (47d4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    47b2:	681a      	ldr	r2, [r3, #0]
    47b4:	2a00      	cmp	r2, #0
    47b6:	d0e9      	beq.n	478c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    47b8:	4b04      	ldr	r3, [pc, #16]	; (47cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    47ba:	2f00      	cmp	r7, #0
    47bc:	d1e9      	bne.n	4792 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    47be:	681a      	ldr	r2, [r3, #0]
    47c0:	2a00      	cmp	r2, #0
    47c2:	d0e6      	beq.n	4792 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    47c4:	2001      	movs	r0, #1
}
    47c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47ca:	bf00      	nop
    47cc:	2001e254 	.word	0x2001e254
    47d0:	2001e258 	.word	0x2001e258
    47d4:	2001e220 	.word	0x2001e220

000047d8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    47d8:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    47da:	2500      	movs	r5, #0
    47dc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    47e0:	4604      	mov	r4, r0
    47e2:	6045      	str	r5, [r0, #4]
    47e4:	7305      	strb	r5, [r0, #12]
    47e6:	6086      	str	r6, [r0, #8]
    47e8:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    47ec:	4d03      	ldr	r5, [pc, #12]	; (47fc <FsVolume::open(char const*, int)+0x24>)
    47ee:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    47f2:	f7ff ff25 	bl	4640 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    47f6:	4620      	mov	r0, r4
    47f8:	bd70      	pop	{r4, r5, r6, pc}
    47fa:	bf00      	nop
    47fc:	2000094c 	.word	0x2000094c

00004800 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    4800:	f04f 30ff 	mov.w	r0, #4294967295
    4804:	4770      	bx	lr
    4806:	bf00      	nop

00004808 <SharedSpiCard::errorCode() const>:
  }
    4808:	7c40      	ldrb	r0, [r0, #17]
    480a:	4770      	bx	lr

0000480c <SharedSpiCard::errorData() const>:
  }
    480c:	7d00      	ldrb	r0, [r0, #20]
    480e:	4770      	bx	lr

00004810 <SharedSpiCard::type() const>:
  }
    4810:	7d40      	ldrb	r0, [r0, #21]
    4812:	4770      	bx	lr

00004814 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    4814:	2001      	movs	r0, #1
    4816:	4770      	bx	lr

00004818 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    4818:	7f00      	ldrb	r0, [r0, #28]
    481a:	4770      	bx	lr

0000481c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    481c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4820:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4822:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4824:	4605      	mov	r5, r0
    4826:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4828:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    482a:	4691      	mov	r9, r2
    482c:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    482e:	d028      	beq.n	4882 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    4830:	682b      	ldr	r3, [r5, #0]
    4832:	4621      	mov	r1, r4
    4834:	4628      	mov	r0, r5
    4836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4838:	4798      	blx	r3
    483a:	b198      	cbz	r0, 4864 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    483c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    483e:	f1b9 0f00 	cmp.w	r9, #0
    4842:	d012      	beq.n	486a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    4844:	eb04 0809 	add.w	r8, r4, r9
    4848:	e001      	b.n	484e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    484a:	45a0      	cmp	r8, r4
    484c:	d00d      	beq.n	486a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    484e:	4639      	mov	r1, r7
    4850:	4620      	mov	r0, r4
    4852:	47b0      	blx	r6
    if (!writeData(src)) {
    4854:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    4856:	4601      	mov	r1, r0
    if (!writeData(src)) {
    4858:	4628      	mov	r0, r5
    485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    485c:	3401      	adds	r4, #1
    if (!writeData(src)) {
    485e:	4798      	blx	r3
    4860:	2800      	cmp	r0, #0
    4862:	d1f2      	bne.n	484a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    4864:	2000      	movs	r0, #0
}
    4866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    486a:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    486c:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    486e:	444b      	add	r3, r9
    4870:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4872:	2800      	cmp	r0, #0
    4874:	d1f7      	bne.n	4866 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    4876:	682b      	ldr	r3, [r5, #0]
    4878:	4628      	mov	r0, r5
    487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    487c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    4880:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4882:	6983      	ldr	r3, [r0, #24]
    4884:	428b      	cmp	r3, r1
    4886:	d1d3      	bne.n	4830 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    4888:	e7d9      	b.n	483e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    488a:	bf00      	nop

0000488c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    488c:	4770      	bx	lr
    488e:	bf00      	nop

00004890 <SharedSpiCard::end()>:
    m_spiDriver.end();
    4890:	3004      	adds	r0, #4
    4892:	f002 b807 	b.w	68a4 <SdSpiArduinoDriver::end()>
    4896:	bf00      	nop

00004898 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4898:	b510      	push	{r4, lr}
    489a:	4604      	mov	r4, r0
    489c:	2120      	movs	r1, #32
    489e:	f003 f977 	bl	7b90 <operator delete(void*, unsigned int)>
    48a2:	4620      	mov	r0, r4
    48a4:	bd10      	pop	{r4, pc}
    48a6:	bf00      	nop

000048a8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    48a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48ac:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    48ae:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    48b0:	4605      	mov	r5, r0
    48b2:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    48b4:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    48b6:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    48b8:	d024      	beq.n	4904 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    48ba:	682b      	ldr	r3, [r5, #0]
    48bc:	4631      	mov	r1, r6
    48be:	4628      	mov	r0, r5
    48c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    48c2:	4798      	blx	r3
    48c4:	b178      	cbz	r0, 48e6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    48c6:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    48c8:	b187      	cbz	r7, 48ec <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    48ca:	2600      	movs	r6, #0
    48cc:	e001      	b.n	48d2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    48ce:	42b7      	cmp	r7, r6
    48d0:	d00c      	beq.n	48ec <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    48d2:	682a      	ldr	r2, [r5, #0]
    48d4:	4621      	mov	r1, r4
    48d6:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    48d8:	3601      	adds	r6, #1
    if (!writeData(src)) {
    48da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    48dc:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    48e0:	4790      	blx	r2
    48e2:	2800      	cmp	r0, #0
    48e4:	d1f3      	bne.n	48ce <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    48e6:	2000      	movs	r0, #0
}
    48e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    48ec:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    48ee:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    48f0:	443b      	add	r3, r7
    48f2:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    48f4:	2800      	cmp	r0, #0
    48f6:	d1f7      	bne.n	48e8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    48f8:	682b      	ldr	r3, [r5, #0]
    48fa:	4628      	mov	r0, r5
    48fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    48fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    4902:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4904:	6983      	ldr	r3, [r0, #24]
    4906:	428b      	cmp	r3, r1
    4908:	d1d7      	bne.n	48ba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    490a:	e7dd      	b.n	48c8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000490c <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4910:	4e20      	ldr	r6, [pc, #128]	; (4994 <SharedSpiCard::writeStop()+0x88>)
    4912:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4914:	f100 0804 	add.w	r8, r0, #4
    4918:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    491a:	f505 7516 	add.w	r5, r5, #600	; 0x258
    491e:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4920:	e003      	b.n	492a <SharedSpiCard::writeStop()+0x1e>
    4922:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4924:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4926:	041b      	lsls	r3, r3, #16
    4928:	d410      	bmi.n	494c <SharedSpiCard::writeStop()+0x40>
    492a:	4640      	mov	r0, r8
    492c:	f001 ffbe 	bl	68ac <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4930:	28ff      	cmp	r0, #255	; 0xff
    4932:	4604      	mov	r4, r0
    4934:	d1f5      	bne.n	4922 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4936:	21fd      	movs	r1, #253	; 0xfd
    4938:	4640      	mov	r0, r8
    493a:	f001 ffd5 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    493e:	7cbb      	ldrb	r3, [r7, #18]
    4940:	b9cb      	cbnz	r3, 4976 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    4942:	2300      	movs	r3, #0
    4944:	2001      	movs	r0, #1
    4946:	74fb      	strb	r3, [r7, #19]
}
    4948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    494c:	231e      	movs	r3, #30
  if (m_spiActive) {
    494e:	7cb8      	ldrb	r0, [r7, #18]
    4950:	747b      	strb	r3, [r7, #17]
    4952:	2800      	cmp	r0, #0
    4954:	d0f8      	beq.n	4948 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    4956:	7c38      	ldrb	r0, [r7, #16]
    4958:	2101      	movs	r1, #1
    495a:	f001 fee7 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    495e:	21ff      	movs	r1, #255	; 0xff
    4960:	4640      	mov	r0, r8
    4962:	f001 ffc1 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4966:	4640      	mov	r0, r8
    4968:	f001 ff74 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    496c:	2300      	movs	r3, #0
  return false;
    496e:	4618      	mov	r0, r3
    m_spiActive = false;
    4970:	74bb      	strb	r3, [r7, #18]
}
    4972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    4976:	2101      	movs	r1, #1
    4978:	7c38      	ldrb	r0, [r7, #16]
    497a:	f001 fed7 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    497e:	4621      	mov	r1, r4
    4980:	4640      	mov	r0, r8
    4982:	f001 ffb1 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4986:	4640      	mov	r0, r8
    4988:	f001 ff64 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    498c:	2300      	movs	r3, #0
    498e:	74bb      	strb	r3, [r7, #18]
}
    4990:	e7d7      	b.n	4942 <SharedSpiCard::writeStop()+0x36>
    4992:	bf00      	nop
    4994:	2001f5cc 	.word	0x2001f5cc

00004998 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    499c:	7cc3      	ldrb	r3, [r0, #19]
    499e:	2b01      	cmp	r3, #1
    49a0:	d035      	beq.n	4a0e <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    49a2:	7c86      	ldrb	r6, [r0, #18]
    49a4:	4604      	mov	r4, r0
    49a6:	b14e      	cbz	r6, 49bc <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    49a8:	3004      	adds	r0, #4
    49aa:	f001 ff7f 	bl	68ac <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    49ae:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    49b2:	bf18      	it	ne
    49b4:	2501      	movne	r5, #1
}
    49b6:	4628      	mov	r0, r5
    49b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    49bc:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    49be:	f04f 0801 	mov.w	r8, #1
    49c2:	4638      	mov	r0, r7
    49c4:	f001 ff3c 	bl	6840 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    49c8:	4631      	mov	r1, r6
    49ca:	7c20      	ldrb	r0, [r4, #16]
    49cc:	f001 feae 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    49d0:	21ff      	movs	r1, #255	; 0xff
    49d2:	4638      	mov	r0, r7
    49d4:	f001 ff88 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    49d8:	4638      	mov	r0, r7
    49da:	f884 8012 	strb.w	r8, [r4, #18]
    49de:	f001 ff65 	bl	68ac <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    49e2:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    49e4:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    49e8:	bf18      	it	ne
    49ea:	2501      	movne	r5, #1
  if (m_spiActive) {
    49ec:	2b00      	cmp	r3, #0
    49ee:	d0e2      	beq.n	49b6 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    49f0:	4641      	mov	r1, r8
    49f2:	7c20      	ldrb	r0, [r4, #16]
    49f4:	f001 fe9a 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    49f8:	21ff      	movs	r1, #255	; 0xff
    49fa:	4638      	mov	r0, r7
    49fc:	f001 ff74 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4a00:	4638      	mov	r0, r7
    4a02:	f001 ff27 	bl	6854 <SdSpiArduinoDriver::deactivate()>
}
    4a06:	4628      	mov	r0, r5
    m_spiActive = false;
    4a08:	74a6      	strb	r6, [r4, #18]
}
    4a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4a0e:	2500      	movs	r5, #0
}
    4a10:	4628      	mov	r0, r5
    4a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a16:	bf00      	nop

00004a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a1c:	4f20      	ldr	r7, [pc, #128]	; (4aa0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4a1e:	4604      	mov	r4, r0
    4a20:	4688      	mov	r8, r1
    4a22:	4691      	mov	r9, r2
    4a24:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4a26:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    4a28:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4a2c:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4a2e:	e003      	b.n	4a38 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4a30:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4a32:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4a34:	041b      	lsls	r3, r3, #16
    4a36:	d40d      	bmi.n	4a54 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4a38:	4630      	mov	r0, r6
    4a3a:	f001 ff37 	bl	68ac <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4a3e:	28ff      	cmp	r0, #255	; 0xff
    4a40:	7520      	strb	r0, [r4, #20]
    4a42:	d0f5      	beq.n	4a30 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4a44:	28fe      	cmp	r0, #254	; 0xfe
    4a46:	d01a      	beq.n	4a7e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4a48:	2318      	movs	r3, #24
  if (m_spiActive) {
    4a4a:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    4a4c:	7463      	strb	r3, [r4, #17]
    4a4e:	b930      	cbnz	r0, 4a5e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a54:	231d      	movs	r3, #29
  if (m_spiActive) {
    4a56:	7ca0      	ldrb	r0, [r4, #18]
    4a58:	7463      	strb	r3, [r4, #17]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d0f8      	beq.n	4a50 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    4a5e:	7c20      	ldrb	r0, [r4, #16]
    4a60:	2101      	movs	r1, #1
    4a62:	f001 fe63 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4a66:	21ff      	movs	r1, #255	; 0xff
    4a68:	4630      	mov	r0, r6
    4a6a:	f001 ff3d 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4a6e:	4630      	mov	r0, r6
    4a70:	f001 fef0 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4a74:	2300      	movs	r3, #0
  return false;
    4a76:	4618      	mov	r0, r3
    m_spiActive = false;
    4a78:	74a3      	strb	r3, [r4, #18]
}
    4a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4a7e:	464a      	mov	r2, r9
    4a80:	4641      	mov	r1, r8
    4a82:	4630      	mov	r0, r6
    4a84:	f001 ff1e 	bl	68c4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4a88:	7520      	strb	r0, [r4, #20]
    4a8a:	b938      	cbnz	r0, 4a9c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4a8c:	4630      	mov	r0, r6
    4a8e:	f001 ff0d 	bl	68ac <SdSpiArduinoDriver::receive()>
    4a92:	4630      	mov	r0, r6
    4a94:	f001 ff0a 	bl	68ac <SdSpiArduinoDriver::receive()>
  return true;
    4a98:	2001      	movs	r0, #1
    4a9a:	e7d9      	b.n	4a50 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4a9c:	2325      	movs	r3, #37	; 0x25
    4a9e:	e7d4      	b.n	4a4a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4aa0:	2001f5cc 	.word	0x2001f5cc

00004aa4 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4aa6:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4aa8:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4aaa:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4aac:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4aae:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4ab0:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    4ab2:	f000 f85b 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4ab6:	b9b0      	cbnz	r0, 4ae6 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4ab8:	7ca6      	ldrb	r6, [r4, #18]
    4aba:	b91e      	cbnz	r6, 4ac4 <SharedSpiCard::readStop()+0x20>
  return true;
    4abc:	2601      	movs	r6, #1
}
    4abe:	4630      	mov	r0, r6
    4ac0:	b003      	add	sp, #12
    4ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4ac4:	4605      	mov	r5, r0
    4ac6:	2101      	movs	r1, #1
    4ac8:	7c20      	ldrb	r0, [r4, #16]
    4aca:	f001 fe2f 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ace:	1d20      	adds	r0, r4, #4
    4ad0:	21ff      	movs	r1, #255	; 0xff
    4ad2:	9001      	str	r0, [sp, #4]
    4ad4:	f001 ff08 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4ad8:	9801      	ldr	r0, [sp, #4]
    4ada:	f001 febb 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    4ade:	4630      	mov	r0, r6
    m_spiActive = false;
    4ae0:	74a5      	strb	r5, [r4, #18]
}
    4ae2:	b003      	add	sp, #12
    4ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4ae6:	2309      	movs	r3, #9
  if (m_spiActive) {
    4ae8:	7ca6      	ldrb	r6, [r4, #18]
    4aea:	7463      	strb	r3, [r4, #17]
    4aec:	2e00      	cmp	r6, #0
    4aee:	d0e6      	beq.n	4abe <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4af0:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4af2:	7c20      	ldrb	r0, [r4, #16]
    4af4:	2101      	movs	r1, #1
}
    4af6:	463e      	mov	r6, r7
    4af8:	f001 fe18 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4afc:	21ff      	movs	r1, #255	; 0xff
    4afe:	4628      	mov	r0, r5
    4b00:	f001 fef2 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4b04:	4628      	mov	r0, r5
    4b06:	f001 fea5 	bl	6854 <SdSpiArduinoDriver::deactivate()>
}
    4b0a:	4630      	mov	r0, r6
    m_spiActive = false;
    4b0c:	74a7      	strb	r7, [r4, #18]
}
    4b0e:	b003      	add	sp, #12
    4b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b12:	bf00      	nop

00004b14 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4b14:	7cc2      	ldrb	r2, [r0, #19]
    4b16:	2a02      	cmp	r2, #2
    4b18:	d003      	beq.n	4b22 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4b1a:	2a01      	cmp	r2, #1
    4b1c:	d004      	beq.n	4b28 <SharedSpiCard::syncDevice()+0x14>
}
    4b1e:	2001      	movs	r0, #1
    4b20:	4770      	bx	lr
    return writeStop();
    4b22:	6803      	ldr	r3, [r0, #0]
    4b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4b26:	4718      	bx	r3
    return readStop();
    4b28:	f7ff bfbc 	b.w	4aa4 <SharedSpiCard::readStop()>

00004b2c <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4b2c:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    4b2e:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4b30:	460d      	mov	r5, r1
    4b32:	490d      	ldr	r1, [pc, #52]	; (4b68 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    4b34:	4604      	mov	r4, r0
  if (!syncDevice()) {
    4b36:	6a1a      	ldr	r2, [r3, #32]
    4b38:	428a      	cmp	r2, r1
    4b3a:	d10c      	bne.n	4b56 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    4b3c:	7cc2      	ldrb	r2, [r0, #19]
    4b3e:	2a02      	cmp	r2, #2
    4b40:	d004      	beq.n	4b4c <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    4b42:	2a01      	cmp	r2, #1
    4b44:	d00b      	beq.n	4b5e <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    4b46:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    4b48:	7725      	strb	r5, [r4, #28]
}
    4b4a:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    4b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4b4e:	4798      	blx	r3
  if (!syncDevice()) {
    4b50:	2800      	cmp	r0, #0
    4b52:	d1f8      	bne.n	4b46 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    4b54:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    4b56:	4790      	blx	r2
    4b58:	2800      	cmp	r0, #0
    4b5a:	d0fb      	beq.n	4b54 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4b5c:	e7f3      	b.n	4b46 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    4b5e:	f7ff ffa1 	bl	4aa4 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4b62:	2800      	cmp	r0, #0
    4b64:	d0f6      	beq.n	4b54 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4b66:	e7ee      	b.n	4b46 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    4b68:	00004b15 	.word	0x00004b15

00004b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4b70:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4b72:	b082      	sub	sp, #8
    4b74:	460f      	mov	r7, r1
    4b76:	4935      	ldr	r1, [pc, #212]	; (4c4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    4b78:	9201      	str	r2, [sp, #4]
    4b7a:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4b7c:	6a1a      	ldr	r2, [r3, #32]
    4b7e:	428a      	cmp	r2, r1
    4b80:	d15e      	bne.n	4c40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    4b82:	7cc2      	ldrb	r2, [r0, #19]
    4b84:	2a02      	cmp	r2, #2
    4b86:	d041      	beq.n	4c0c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    4b88:	2a01      	cmp	r2, #1
    4b8a:	d05b      	beq.n	4c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    4b8c:	7cb4      	ldrb	r4, [r6, #18]
    4b8e:	2c00      	cmp	r4, #0
    4b90:	d047      	beq.n	4c22 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    4b92:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    4b94:	2f0c      	cmp	r7, #12
    4b96:	d011      	beq.n	4bbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4b98:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    4b9c:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    4ba0:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4ba4:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    4ba6:	e004      	b.n	4bb2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    4ba8:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    4bac:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4bae:	041a      	lsls	r2, r3, #16
    4bb0:	d434      	bmi.n	4c1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    4bb2:	4628      	mov	r0, r5
    4bb4:	f001 fe7a 	bl	68ac <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4bb8:	28ff      	cmp	r0, #255	; 0xff
    4bba:	d1f5      	bne.n	4ba8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    4bbc:	f10d 0804 	add.w	r8, sp, #4
    4bc0:	ac02      	add	r4, sp, #8
    4bc2:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4bc6:	4628      	mov	r0, r5
    4bc8:	f001 fe8e 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    4bcc:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4bd0:	4628      	mov	r0, r5
    4bd2:	f001 fe89 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4bd6:	45a0      	cmp	r8, r4
    4bd8:	d1f8      	bne.n	4bcc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4bda:	2f00      	cmp	r7, #0
    4bdc:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4bde:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4be2:	bf0c      	ite	eq
    4be4:	2195      	moveq	r1, #149	; 0x95
    4be6:	2187      	movne	r1, #135	; 0x87
    4be8:	f001 fe7e 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4bec:	4628      	mov	r0, r5
    4bee:	f001 fe5d 	bl	68ac <SdSpiArduinoDriver::receive()>
    4bf2:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    4bf4:	3c01      	subs	r4, #1
    4bf6:	f001 fe59 	bl	68ac <SdSpiArduinoDriver::receive()>
    4bfa:	0603      	lsls	r3, r0, #24
    4bfc:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    4bfe:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    4c00:	d501      	bpl.n	4c06 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4c02:	2c00      	cmp	r4, #0
    4c04:	d1f5      	bne.n	4bf2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    4c06:	b002      	add	sp, #8
    4c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4c0e:	4798      	blx	r3
  if (!syncDevice()) {
    4c10:	2800      	cmp	r0, #0
    4c12:	d1bb      	bne.n	4b8c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4c14:	20ff      	movs	r0, #255	; 0xff
}
    4c16:	b002      	add	sp, #8
    4c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    4c1c:	2f00      	cmp	r7, #0
    4c1e:	d0cd      	beq.n	4bbc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4c20:	e7f8      	b.n	4c14 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    4c22:	1d35      	adds	r5, r6, #4
    4c24:	4628      	mov	r0, r5
    4c26:	f001 fe0b 	bl	6840 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4c2a:	4621      	mov	r1, r4
    4c2c:	7c30      	ldrb	r0, [r6, #16]
    4c2e:	f001 fd7d 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c32:	21ff      	movs	r1, #255	; 0xff
    4c34:	4628      	mov	r0, r5
    4c36:	f001 fe57 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    4c3a:	2301      	movs	r3, #1
    4c3c:	74b3      	strb	r3, [r6, #18]
}
    4c3e:	e7a9      	b.n	4b94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4c40:	4790      	blx	r2
    4c42:	e7e5      	b.n	4c10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    4c44:	f7ff ff2e 	bl	4aa4 <SharedSpiCard::readStop()>
    4c48:	e7e2      	b.n	4c10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    4c4a:	bf00      	nop
    4c4c:	00004b15 	.word	0x00004b15
    4c50:	2001f5cc 	.word	0x2001f5cc

00004c54 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4c56:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4c58:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4c5a:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4c5c:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4c5e:	f7ff ff85 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4c62:	b9e0      	cbnz	r0, 4c9e <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    4c64:	1d37      	adds	r7, r6, #4
    4c66:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4c68:	4638      	mov	r0, r7
    4c6a:	f001 fe1f 	bl	68ac <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4c6e:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4c72:	42a5      	cmp	r5, r4
    4c74:	d1f8      	bne.n	4c68 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4c76:	7cb4      	ldrb	r4, [r6, #18]
    4c78:	b914      	cbnz	r4, 4c80 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4c7a:	2401      	movs	r4, #1
}
    4c7c:	4620      	mov	r0, r4
    4c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4c80:	7c30      	ldrb	r0, [r6, #16]
    4c82:	2101      	movs	r1, #1
    4c84:	f001 fd52 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c88:	21ff      	movs	r1, #255	; 0xff
    4c8a:	4638      	mov	r0, r7
    4c8c:	f001 fe2c 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4c90:	4638      	mov	r0, r7
    4c92:	f001 fddf 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c96:	2300      	movs	r3, #0
}
    4c98:	4620      	mov	r0, r4
    m_spiActive = false;
    4c9a:	74b3      	strb	r3, [r6, #18]
}
    4c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4c9e:	2312      	movs	r3, #18
  if (m_spiActive) {
    4ca0:	7cb4      	ldrb	r4, [r6, #18]
    4ca2:	7473      	strb	r3, [r6, #17]
    4ca4:	2c00      	cmp	r4, #0
    4ca6:	d0e9      	beq.n	4c7c <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    4ca8:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    4caa:	7c30      	ldrb	r0, [r6, #16]
    4cac:	2101      	movs	r1, #1
    4cae:	f001 fd3d 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cb2:	21ff      	movs	r1, #255	; 0xff
    4cb4:	4620      	mov	r0, r4
    4cb6:	f001 fe17 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4cba:	4620      	mov	r0, r4
    4cbc:	f001 fdca 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cc0:	2300      	movs	r3, #0
  return false;
    4cc2:	461c      	mov	r4, r3
    m_spiActive = false;
    4cc4:	74b3      	strb	r3, [r6, #18]
}
    4cc6:	4620      	mov	r0, r4
    4cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cca:	bf00      	nop

00004ccc <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4ccc:	b570      	push	{r4, r5, r6, lr}
    4cce:	4616      	mov	r6, r2
    4cd0:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    4cd2:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4cd4:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    4cd6:	f7ff ff49 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4cda:	b1b0      	cbz	r0, 4d0a <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    4cdc:	231b      	movs	r3, #27
    4cde:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    4ce0:	7ca0      	ldrb	r0, [r4, #18]
    4ce2:	b908      	cbnz	r0, 4ce8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    4ce4:	b002      	add	sp, #8
    4ce6:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4ce8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4cea:	7c20      	ldrb	r0, [r4, #16]
    4cec:	2101      	movs	r1, #1
    4cee:	f001 fd1d 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cf2:	21ff      	movs	r1, #255	; 0xff
    4cf4:	4628      	mov	r0, r5
    4cf6:	f001 fdf7 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4cfa:	4628      	mov	r0, r5
    4cfc:	f001 fdaa 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4d00:	2300      	movs	r3, #0
  return false;
    4d02:	4618      	mov	r0, r3
    m_spiActive = false;
    4d04:	74a3      	strb	r3, [r4, #18]
}
    4d06:	b002      	add	sp, #8
    4d08:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    4d0a:	4605      	mov	r5, r0
    4d0c:	2210      	movs	r2, #16
    4d0e:	4631      	mov	r1, r6
    4d10:	4620      	mov	r0, r4
    4d12:	f7ff fe81 	bl	4a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4d16:	2800      	cmp	r0, #0
    4d18:	d0e2      	beq.n	4ce0 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    4d1a:	7ca6      	ldrb	r6, [r4, #18]
    4d1c:	2e00      	cmp	r6, #0
    4d1e:	d0e1      	beq.n	4ce4 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    4d20:	7c20      	ldrb	r0, [r4, #16]
    4d22:	2101      	movs	r1, #1
    4d24:	f001 fd02 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d28:	1d20      	adds	r0, r4, #4
    4d2a:	21ff      	movs	r1, #255	; 0xff
    4d2c:	9001      	str	r0, [sp, #4]
    4d2e:	f001 fddb 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4d32:	9801      	ldr	r0, [sp, #4]
    4d34:	f001 fd8e 	bl	6854 <SdSpiArduinoDriver::deactivate()>
}
    4d38:	4630      	mov	r0, r6
    m_spiActive = false;
    4d3a:	74a5      	strb	r5, [r4, #18]
}
    4d3c:	b002      	add	sp, #8
    4d3e:	bd70      	pop	{r4, r5, r6, pc}

00004d40 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    4d40:	6803      	ldr	r3, [r0, #0]
    4d42:	4a25      	ldr	r2, [pc, #148]	; (4dd8 <SharedSpiCard::sectorCount()+0x98>)
    4d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4d46:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    4d48:	b500      	push	{lr}
    4d4a:	b085      	sub	sp, #20
    4d4c:	d10f      	bne.n	4d6e <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    4d4e:	466a      	mov	r2, sp
    4d50:	2109      	movs	r1, #9
    4d52:	f7ff ffbb 	bl	4ccc <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    4d56:	b138      	cbz	r0, 4d68 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    4d58:	f89d 3000 	ldrb.w	r3, [sp]
    4d5c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4d60:	d008      	beq.n	4d74 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    4d62:	2b40      	cmp	r3, #64	; 0x40
    4d64:	d027      	beq.n	4db6 <SharedSpiCard::sectorCount()+0x76>
    4d66:	2000      	movs	r0, #0
}
    4d68:	b005      	add	sp, #20
    4d6a:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    4d6e:	4669      	mov	r1, sp
    4d70:	4798      	blx	r3
    4d72:	e7f0      	b.n	4d56 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    4d74:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    4d78:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    4d7c:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    4d80:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    4d84:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    4d88:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    4d8a:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    4d8e:	0080      	lsls	r0, r0, #2
    4d90:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4d94:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    4d98:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    4d9c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4da0:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    4da4:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4da8:	4413      	add	r3, r2
    4daa:	3001      	adds	r0, #1
    4dac:	3b07      	subs	r3, #7
    4dae:	4098      	lsls	r0, r3
}
    4db0:	b005      	add	sp, #20
    4db2:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    4db6:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    4dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    4dbe:	3001      	adds	r0, #1
    4dc0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    4dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    4dc8:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    4dcc:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    4dd0:	0280      	lsls	r0, r0, #10
    4dd2:	b005      	add	sp, #20
    4dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    4dd8:	000050fd 	.word	0x000050fd

00004ddc <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    4ddc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    4dde:	460a      	mov	r2, r1
    4de0:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    4de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    4de4:	b083      	sub	sp, #12
    4de6:	4d16      	ldr	r5, [pc, #88]	; (4e40 <SharedSpiCard::readStart(unsigned long)+0x64>)
    4de8:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    4dea:	42ab      	cmp	r3, r5
    4dec:	d124      	bne.n	4e38 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    4dee:	7d40      	ldrb	r0, [r0, #21]
    4df0:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    4df2:	f04f 0112 	mov.w	r1, #18
    4df6:	4620      	mov	r0, r4
    sector <<= 9;
    4df8:	bf18      	it	ne
    4dfa:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    4dfc:	f7ff feb6 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4e00:	b920      	cbnz	r0, 4e0c <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    4e02:	2301      	movs	r3, #1
  return true;
    4e04:	4618      	mov	r0, r3
  m_state = READ_STATE;
    4e06:	74e3      	strb	r3, [r4, #19]
}
    4e08:	b003      	add	sp, #12
    4e0a:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    4e0c:	230c      	movs	r3, #12
  if (m_spiActive) {
    4e0e:	7ca0      	ldrb	r0, [r4, #18]
    4e10:	7463      	strb	r3, [r4, #17]
    4e12:	2800      	cmp	r0, #0
    4e14:	d0f8      	beq.n	4e08 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    4e16:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4e18:	7c20      	ldrb	r0, [r4, #16]
    4e1a:	2101      	movs	r1, #1
    4e1c:	f001 fc86 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e20:	21ff      	movs	r1, #255	; 0xff
    4e22:	4628      	mov	r0, r5
    4e24:	f001 fd60 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e28:	4628      	mov	r0, r5
    4e2a:	f001 fd13 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4e2e:	2300      	movs	r3, #0
}
    4e30:	4618      	mov	r0, r3
    m_spiActive = false;
    4e32:	74a3      	strb	r3, [r4, #18]
}
    4e34:	b003      	add	sp, #12
    4e36:	bd30      	pop	{r4, r5, pc}
    4e38:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    4e3a:	4798      	blx	r3
    4e3c:	9a01      	ldr	r2, [sp, #4]
    4e3e:	e7d7      	b.n	4df0 <SharedSpiCard::readStart(unsigned long)+0x14>
    4e40:	00004811 	.word	0x00004811

00004e44 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    4e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e46:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    4e48:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    4e4a:	4606      	mov	r6, r0
    4e4c:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    4e4e:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    4e50:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    4e52:	d102      	bne.n	4e5a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    4e54:	6983      	ldr	r3, [r0, #24]
    4e56:	428b      	cmp	r3, r1
    4e58:	d005      	beq.n	4e66 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    4e5a:	4629      	mov	r1, r5
    4e5c:	4630      	mov	r0, r6
    4e5e:	f7ff ffbd 	bl	4ddc <SharedSpiCard::readStart(unsigned long)>
    4e62:	b180      	cbz	r0, 4e86 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    4e64:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4e66:	b187      	cbz	r7, 4e8a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    4e68:	2500      	movs	r5, #0
    4e6a:	e001      	b.n	4e70 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4e6c:	42af      	cmp	r7, r5
    4e6e:	d00c      	beq.n	4e8a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    4e70:	4621      	mov	r1, r4
    4e72:	f44f 7200 	mov.w	r2, #512	; 0x200
    4e76:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4e78:	3501      	adds	r5, #1
    4e7a:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    4e7e:	f7ff fdcb 	bl	4a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    4e82:	2800      	cmp	r0, #0
    4e84:	d1f2      	bne.n	4e6c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    4e86:	2000      	movs	r0, #0
}
    4e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    4e8a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    4e8c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    4e8e:	443b      	add	r3, r7
    4e90:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    4e92:	2800      	cmp	r0, #0
    4e94:	d1f8      	bne.n	4e88 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    4e96:	4630      	mov	r0, r6
}
    4e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    4e9c:	f7ff be02 	b.w	4aa4 <SharedSpiCard::readStop()>

00004ea0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    4ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ea4:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    4ea6:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    4ea8:	4606      	mov	r6, r0
    4eaa:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    4eac:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    4eae:	4615      	mov	r5, r2
    4eb0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4eb4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    4eb8:	d102      	bne.n	4ec0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    4eba:	6983      	ldr	r3, [r0, #24]
    4ebc:	428b      	cmp	r3, r1
    4ebe:	d005      	beq.n	4ecc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    4ec0:	4621      	mov	r1, r4
    4ec2:	4630      	mov	r0, r6
    4ec4:	f7ff ff8a 	bl	4ddc <SharedSpiCard::readStart(unsigned long)>
    4ec8:	b1b0      	cbz	r0, 4ef8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    4eca:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    4ecc:	f1bb 0f00 	cmp.w	fp, #0
    4ed0:	d015      	beq.n	4efe <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    4ed2:	eb04 0a0b 	add.w	sl, r4, fp
    4ed6:	e002      	b.n	4ede <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    4ed8:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    4eda:	45a2      	cmp	sl, r4
    4edc:	d00f      	beq.n	4efe <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    4ede:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ee2:	4629      	mov	r1, r5
    4ee4:	4630      	mov	r0, r6
    4ee6:	f7ff fd97 	bl	4a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4eea:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    4eec:	4642      	mov	r2, r8
    4eee:	4620      	mov	r0, r4
    4ef0:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    4ef2:	3401      	adds	r4, #1
    if (readData(dst)) {
    4ef4:	2f00      	cmp	r7, #0
    4ef6:	d1ef      	bne.n	4ed8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    4ef8:	2000      	movs	r0, #0
}
    4efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    4efe:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    4f00:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    4f02:	445b      	add	r3, fp
    4f04:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    4f06:	2800      	cmp	r0, #0
    4f08:	d1f7      	bne.n	4efa <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    4f0a:	4630      	mov	r0, r6
}
    4f0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    4f10:	f7ff bdc8 	b.w	4aa4 <SharedSpiCard::readStop()>

00004f14 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    4f14:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    4f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    4f1a:	695f      	ldr	r7, [r3, #20]
    4f1c:	4b16      	ldr	r3, [pc, #88]	; (4f78 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    4f1e:	429f      	cmp	r7, r3
    4f20:	d11f      	bne.n	4f62 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    4f22:	7cc3      	ldrb	r3, [r0, #19]
    4f24:	4604      	mov	r4, r0
    4f26:	460d      	mov	r5, r1
    4f28:	4616      	mov	r6, r2
    4f2a:	2b01      	cmp	r3, #1
    4f2c:	d102      	bne.n	4f34 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    4f2e:	6983      	ldr	r3, [r0, #24]
    4f30:	4299      	cmp	r1, r3
    4f32:	d005      	beq.n	4f40 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    4f34:	4629      	mov	r1, r5
    4f36:	4620      	mov	r0, r4
    4f38:	f7ff ff50 	bl	4ddc <SharedSpiCard::readStart(unsigned long)>
    4f3c:	b170      	cbz	r0, 4f5c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    4f3e:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    4f40:	f44f 7200 	mov.w	r2, #512	; 0x200
    4f44:	4631      	mov	r1, r6
    4f46:	4620      	mov	r0, r4
    4f48:	f7ff fd66 	bl	4a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    4f4c:	b130      	cbz	r0, 4f5c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    4f4e:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    4f50:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    4f52:	3301      	adds	r3, #1
    4f54:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    4f56:	b148      	cbz	r0, 4f6c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    4f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    4f5c:	2000      	movs	r0, #0
}
    4f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    4f62:	46bc      	mov	ip, r7
    4f64:	2301      	movs	r3, #1
}
    4f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    4f6a:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    4f6c:	4620      	mov	r0, r4
}
    4f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    4f72:	f7ff bd97 	b.w	4aa4 <SharedSpiCard::readStop()>
    4f76:	bf00      	nop
    4f78:	00004e45 	.word	0x00004e45

00004f7c <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    4f7c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    4f7e:	460a      	mov	r2, r1
    4f80:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    4f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    4f84:	b083      	sub	sp, #12
    4f86:	4d16      	ldr	r5, [pc, #88]	; (4fe0 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    4f88:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    4f8a:	42ab      	cmp	r3, r5
    4f8c:	d124      	bne.n	4fd8 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    4f8e:	7d40      	ldrb	r0, [r0, #21]
    4f90:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    4f92:	f04f 0119 	mov.w	r1, #25
    4f96:	4620      	mov	r0, r4
    sector <<= 9;
    4f98:	bf18      	it	ne
    4f9a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    4f9c:	f7ff fde6 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fa0:	b920      	cbnz	r0, 4fac <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    4fa2:	2302      	movs	r3, #2
  return true;
    4fa4:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    4fa6:	74e3      	strb	r3, [r4, #19]
}
    4fa8:	b003      	add	sp, #12
    4faa:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    4fac:	230e      	movs	r3, #14
  if (m_spiActive) {
    4fae:	7ca0      	ldrb	r0, [r4, #18]
    4fb0:	7463      	strb	r3, [r4, #17]
    4fb2:	2800      	cmp	r0, #0
    4fb4:	d0f8      	beq.n	4fa8 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    4fb6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4fb8:	7c20      	ldrb	r0, [r4, #16]
    4fba:	2101      	movs	r1, #1
    4fbc:	f001 fbb6 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fc0:	21ff      	movs	r1, #255	; 0xff
    4fc2:	4628      	mov	r0, r5
    4fc4:	f001 fc90 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4fc8:	4628      	mov	r0, r5
    4fca:	f001 fc43 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fce:	2300      	movs	r3, #0
}
    4fd0:	4618      	mov	r0, r3
    m_spiActive = false;
    4fd2:	74a3      	strb	r3, [r4, #18]
}
    4fd4:	b003      	add	sp, #12
    4fd6:	bd30      	pop	{r4, r5, pc}
    4fd8:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    4fda:	4798      	blx	r3
    4fdc:	9a01      	ldr	r2, [sp, #4]
    4fde:	e7d7      	b.n	4f90 <SharedSpiCard::writeStart(unsigned long)+0x14>
    4fe0:	00004811 	.word	0x00004811

00004fe4 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    4fe4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4fe6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    4fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4fec:	4617      	mov	r7, r2
    4fee:	4a41      	ldr	r2, [pc, #260]	; (50f4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    4ff0:	b085      	sub	sp, #20
    4ff2:	4604      	mov	r4, r0
    4ff4:	460e      	mov	r6, r1
    4ff6:	4293      	cmp	r3, r2
    4ff8:	d145      	bne.n	5086 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    4ffa:	466a      	mov	r2, sp
    4ffc:	2109      	movs	r1, #9
    4ffe:	f7ff fe65 	bl	4ccc <SharedSpiCard::readRegister(unsigned char, void*)>
    5002:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    5004:	b1b5      	cbz	r5, 5034 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    5006:	f89d 300a 	ldrb.w	r3, [sp, #10]
    500a:	065a      	lsls	r2, r3, #25
    500c:	d518      	bpl.n	5040 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    500e:	7d63      	ldrb	r3, [r4, #21]
    5010:	2b03      	cmp	r3, #3
    5012:	d001      	beq.n	5018 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5014:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    5016:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    5018:	4632      	mov	r2, r6
    501a:	2120      	movs	r1, #32
    501c:	4620      	mov	r0, r4
    501e:	f7ff fda5 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    5022:	b928      	cbnz	r0, 5030 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    5024:	463a      	mov	r2, r7
    5026:	2121      	movs	r1, #33	; 0x21
    5028:	4620      	mov	r0, r4
    502a:	f7ff fd9f 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    502e:	b370      	cbz	r0, 508e <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    5030:	2326      	movs	r3, #38	; 0x26
    5032:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5034:	7ca5      	ldrb	r5, [r4, #18]
    5036:	b99d      	cbnz	r5, 5060 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    5038:	4628      	mov	r0, r5
    503a:	b005      	add	sp, #20
    503c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    5040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5044:	f89d 200b 	ldrb.w	r2, [sp, #11]
    5048:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    504a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    504e:	1c7a      	adds	r2, r7, #1
    5050:	4332      	orrs	r2, r6
    5052:	4213      	tst	r3, r2
    5054:	d0db      	beq.n	500e <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5056:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    5058:	7ca5      	ldrb	r5, [r4, #18]
    505a:	7463      	strb	r3, [r4, #17]
    505c:	2d00      	cmp	r5, #0
    505e:	d0eb      	beq.n	5038 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    5060:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5062:	7c20      	ldrb	r0, [r4, #16]
    5064:	2101      	movs	r1, #1
    5066:	f001 fb61 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    506a:	21ff      	movs	r1, #255	; 0xff
    506c:	4628      	mov	r0, r5
    506e:	f001 fc3b 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5072:	4628      	mov	r0, r5
    5074:	f001 fbee 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5078:	2300      	movs	r3, #0
  return false;
    507a:	461d      	mov	r5, r3
    m_spiActive = false;
    507c:	74a3      	strb	r3, [r4, #18]
}
    507e:	4628      	mov	r0, r5
    5080:	b005      	add	sp, #20
    5082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    5086:	4669      	mov	r1, sp
    5088:	4798      	blx	r3
    508a:	4605      	mov	r5, r0
    508c:	e7ba      	b.n	5004 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    508e:	4602      	mov	r2, r0
    5090:	2126      	movs	r1, #38	; 0x26
    5092:	4620      	mov	r0, r4
    5094:	f7ff fd6a 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5098:	2800      	cmp	r0, #0
    509a:	d1c9      	bne.n	5030 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    509c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 50f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    50a0:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    50a4:	f104 0904 	add.w	r9, r4, #4
    50a8:	f8d8 3000 	ldr.w	r3, [r8]
    50ac:	441f      	add	r7, r3
    50ae:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    50b0:	e004      	b.n	50bc <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    50b2:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    50b6:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    50b8:	041b      	lsls	r3, r3, #16
    50ba:	d417      	bmi.n	50ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    50bc:	4648      	mov	r0, r9
    50be:	f001 fbf5 	bl	68ac <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    50c2:	28ff      	cmp	r0, #255	; 0xff
    50c4:	4606      	mov	r6, r0
    50c6:	d1f4      	bne.n	50b2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    50c8:	7ca3      	ldrb	r3, [r4, #18]
    50ca:	2b00      	cmp	r3, #0
    50cc:	d0b4      	beq.n	5038 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    50ce:	2101      	movs	r1, #1
    50d0:	7c20      	ldrb	r0, [r4, #16]
  return true;
    50d2:	461d      	mov	r5, r3
    50d4:	f001 fb2a 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    50d8:	4631      	mov	r1, r6
    50da:	4648      	mov	r0, r9
    50dc:	f001 fc04 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    50e0:	4648      	mov	r0, r9
    50e2:	f001 fbb7 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    50e6:	2300      	movs	r3, #0
    50e8:	74a3      	strb	r3, [r4, #18]
}
    50ea:	e7a5      	b.n	5038 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    50ec:	2328      	movs	r3, #40	; 0x28
    50ee:	7463      	strb	r3, [r4, #17]
    goto fail;
    50f0:	e7a0      	b.n	5034 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    50f2:	bf00      	nop
    50f4:	000050fd 	.word	0x000050fd
    50f8:	2001f5cc 	.word	0x2001f5cc

000050fc <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    50fc:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    50fe:	2200      	movs	r2, #0
    5100:	b082      	sub	sp, #8
    5102:	460e      	mov	r6, r1
    5104:	2109      	movs	r1, #9
    5106:	4604      	mov	r4, r0
    5108:	f7ff fd30 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    510c:	b1b0      	cbz	r0, 513c <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    510e:	231b      	movs	r3, #27
    5110:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5112:	7ca0      	ldrb	r0, [r4, #18]
    5114:	b908      	cbnz	r0, 511a <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    5116:	b002      	add	sp, #8
    5118:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    511a:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    511c:	7c20      	ldrb	r0, [r4, #16]
    511e:	2101      	movs	r1, #1
    5120:	f001 fb04 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5124:	21ff      	movs	r1, #255	; 0xff
    5126:	4628      	mov	r0, r5
    5128:	f001 fbde 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    512c:	4628      	mov	r0, r5
    512e:	f001 fb91 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5132:	2300      	movs	r3, #0
  return false;
    5134:	4618      	mov	r0, r3
    m_spiActive = false;
    5136:	74a3      	strb	r3, [r4, #18]
  }
    5138:	b002      	add	sp, #8
    513a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    513c:	4605      	mov	r5, r0
    513e:	2210      	movs	r2, #16
    5140:	4631      	mov	r1, r6
    5142:	4620      	mov	r0, r4
    5144:	f7ff fc68 	bl	4a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5148:	2800      	cmp	r0, #0
    514a:	d0e2      	beq.n	5112 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    514c:	7ca6      	ldrb	r6, [r4, #18]
    514e:	2e00      	cmp	r6, #0
    5150:	d0e1      	beq.n	5116 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    5152:	7c20      	ldrb	r0, [r4, #16]
    5154:	2101      	movs	r1, #1
    5156:	f001 fae9 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    515a:	1d20      	adds	r0, r4, #4
    515c:	21ff      	movs	r1, #255	; 0xff
    515e:	9001      	str	r0, [sp, #4]
    5160:	f001 fbc2 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5164:	9801      	ldr	r0, [sp, #4]
    5166:	f001 fb75 	bl	6854 <SdSpiArduinoDriver::deactivate()>
}
    516a:	4630      	mov	r0, r6
    m_spiActive = false;
    516c:	74a5      	strb	r5, [r4, #18]
  }
    516e:	b002      	add	sp, #8
    5170:	bd70      	pop	{r4, r5, r6, pc}
    5172:	bf00      	nop

00005174 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    5174:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5176:	2200      	movs	r2, #0
    5178:	b082      	sub	sp, #8
    517a:	460e      	mov	r6, r1
    517c:	210a      	movs	r1, #10
    517e:	4604      	mov	r4, r0
    5180:	f7ff fcf4 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5184:	b1b0      	cbz	r0, 51b4 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    5186:	231b      	movs	r3, #27
    5188:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    518a:	7ca0      	ldrb	r0, [r4, #18]
    518c:	b908      	cbnz	r0, 5192 <SharedSpiCard::readCID(CID*)+0x1e>
  }
    518e:	b002      	add	sp, #8
    5190:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5192:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5194:	7c20      	ldrb	r0, [r4, #16]
    5196:	2101      	movs	r1, #1
    5198:	f001 fac8 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    519c:	21ff      	movs	r1, #255	; 0xff
    519e:	4628      	mov	r0, r5
    51a0:	f001 fba2 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    51a4:	4628      	mov	r0, r5
    51a6:	f001 fb55 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    51aa:	2300      	movs	r3, #0
  return false;
    51ac:	4618      	mov	r0, r3
    m_spiActive = false;
    51ae:	74a3      	strb	r3, [r4, #18]
  }
    51b0:	b002      	add	sp, #8
    51b2:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    51b4:	4605      	mov	r5, r0
    51b6:	2210      	movs	r2, #16
    51b8:	4631      	mov	r1, r6
    51ba:	4620      	mov	r0, r4
    51bc:	f7ff fc2c 	bl	4a18 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    51c0:	2800      	cmp	r0, #0
    51c2:	d0e2      	beq.n	518a <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    51c4:	7ca6      	ldrb	r6, [r4, #18]
    51c6:	2e00      	cmp	r6, #0
    51c8:	d0e1      	beq.n	518e <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    51ca:	7c20      	ldrb	r0, [r4, #16]
    51cc:	2101      	movs	r1, #1
    51ce:	f001 faad 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    51d2:	1d20      	adds	r0, r4, #4
    51d4:	21ff      	movs	r1, #255	; 0xff
    51d6:	9001      	str	r0, [sp, #4]
    51d8:	f001 fb86 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    51dc:	9801      	ldr	r0, [sp, #4]
    51de:	f001 fb39 	bl	6854 <SdSpiArduinoDriver::deactivate()>
}
    51e2:	4630      	mov	r0, r6
    m_spiActive = false;
    51e4:	74a5      	strb	r5, [r4, #18]
  }
    51e6:	b002      	add	sp, #8
    51e8:	bd70      	pop	{r4, r5, r6, pc}
    51ea:	bf00      	nop

000051ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    51ec:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    51ee:	1d05      	adds	r5, r0, #4
    51f0:	4616      	mov	r6, r2
    51f2:	4604      	mov	r4, r0
    51f4:	4628      	mov	r0, r5
    51f6:	f001 fb77 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    51fa:	f44f 7200 	mov.w	r2, #512	; 0x200
    51fe:	4631      	mov	r1, r6
    5200:	4628      	mov	r0, r5
    5202:	f001 fb7b 	bl	68fc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    5206:	21ff      	movs	r1, #255	; 0xff
    5208:	4628      	mov	r0, r5
    520a:	f001 fb6d 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    520e:	21ff      	movs	r1, #255	; 0xff
    5210:	4628      	mov	r0, r5
    5212:	f001 fb69 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    5216:	4628      	mov	r0, r5
    5218:	f001 fb48 	bl	68ac <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    521c:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    5220:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5222:	2b05      	cmp	r3, #5
    5224:	d004      	beq.n	5230 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    5226:	2320      	movs	r3, #32
  if (m_spiActive) {
    5228:	7ca0      	ldrb	r0, [r4, #18]
    522a:	7463      	strb	r3, [r4, #17]
    522c:	b910      	cbnz	r0, 5234 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    522e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5230:	2001      	movs	r0, #1
}
    5232:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    5234:	7c20      	ldrb	r0, [r4, #16]
    5236:	2101      	movs	r1, #1
    5238:	f001 fa78 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    523c:	21ff      	movs	r1, #255	; 0xff
    523e:	4628      	mov	r0, r5
    5240:	f001 fb52 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5244:	4628      	mov	r0, r5
    5246:	f001 fb05 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    524a:	2300      	movs	r3, #0
}
    524c:	4618      	mov	r0, r3
    m_spiActive = false;
    524e:	74a3      	strb	r3, [r4, #18]
}
    5250:	bd70      	pop	{r4, r5, r6, pc}
    5252:	bf00      	nop

00005254 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    5254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5258:	4d17      	ldr	r5, [pc, #92]	; (52b8 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    525a:	4606      	mov	r6, r0
    525c:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    525e:	f100 0804 	add.w	r8, r0, #4
    5262:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    5264:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5268:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    526a:	e003      	b.n	5274 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    526c:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    526e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5270:	041b      	lsls	r3, r3, #16
    5272:	d40c      	bmi.n	528e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    5274:	4640      	mov	r0, r8
    5276:	f001 fb19 	bl	68ac <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    527a:	28ff      	cmp	r0, #255	; 0xff
    527c:	d1f6      	bne.n	526c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    527e:	463a      	mov	r2, r7
    5280:	21fc      	movs	r1, #252	; 0xfc
    5282:	4630      	mov	r0, r6
    5284:	f7ff ffb2 	bl	51ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5288:	b118      	cbz	r0, 5292 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    528a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    528e:	2324      	movs	r3, #36	; 0x24
    5290:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    5292:	7cb0      	ldrb	r0, [r6, #18]
    5294:	2800      	cmp	r0, #0
    5296:	d0f8      	beq.n	528a <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    5298:	7c30      	ldrb	r0, [r6, #16]
    529a:	2101      	movs	r1, #1
    529c:	f001 fa46 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52a0:	21ff      	movs	r1, #255	; 0xff
    52a2:	4640      	mov	r0, r8
    52a4:	f001 fb20 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    52a8:	4640      	mov	r0, r8
    52aa:	f001 fad3 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    52ae:	2300      	movs	r3, #0
}
    52b0:	4618      	mov	r0, r3
    m_spiActive = false;
    52b2:	74b3      	strb	r3, [r6, #18]
}
    52b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52b8:	2001f5cc 	.word	0x2001f5cc

000052bc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    52bc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    52be:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    52c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    52c2:	4616      	mov	r6, r2
    52c4:	4a22      	ldr	r2, [pc, #136]	; (5350 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    52c6:	b082      	sub	sp, #8
    52c8:	4604      	mov	r4, r0
    52ca:	460d      	mov	r5, r1
    52cc:	4293      	cmp	r3, r2
    52ce:	d13c      	bne.n	534a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    52d0:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    52d2:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    52d4:	f04f 0118 	mov.w	r1, #24
    52d8:	4620      	mov	r0, r4
    sector <<= 9;
    52da:	bf18      	it	ne
    52dc:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    52de:	462a      	mov	r2, r5
    52e0:	f7ff fc44 	bl	4b6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52e4:	4605      	mov	r5, r0
    52e6:	b1b0      	cbz	r0, 5316 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    52e8:	230d      	movs	r3, #13
    52ea:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    52ec:	7ca0      	ldrb	r0, [r4, #18]
    52ee:	b908      	cbnz	r0, 52f4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    52f0:	b002      	add	sp, #8
    52f2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    52f4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    52f6:	7c20      	ldrb	r0, [r4, #16]
    52f8:	2101      	movs	r1, #1
    52fa:	f001 fa17 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52fe:	21ff      	movs	r1, #255	; 0xff
    5300:	4628      	mov	r0, r5
    5302:	f001 faf1 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5306:	4628      	mov	r0, r5
    5308:	f001 faa4 	bl	6854 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    530c:	2300      	movs	r3, #0
  return false;
    530e:	4618      	mov	r0, r3
    m_spiActive = false;
    5310:	74a3      	strb	r3, [r4, #18]
}
    5312:	b002      	add	sp, #8
    5314:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    5316:	4632      	mov	r2, r6
    5318:	21fe      	movs	r1, #254	; 0xfe
    531a:	4620      	mov	r0, r4
    531c:	f7ff ff66 	bl	51ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5320:	2800      	cmp	r0, #0
    5322:	d0e3      	beq.n	52ec <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    5324:	7ca6      	ldrb	r6, [r4, #18]
    5326:	2e00      	cmp	r6, #0
    5328:	d0e2      	beq.n	52f0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    532a:	7c20      	ldrb	r0, [r4, #16]
    532c:	2101      	movs	r1, #1
    532e:	f001 f9fd 	bl	672c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5332:	1d20      	adds	r0, r4, #4
    5334:	21ff      	movs	r1, #255	; 0xff
    5336:	9001      	str	r0, [sp, #4]
    5338:	f001 fad6 	bl	68e8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    533c:	9801      	ldr	r0, [sp, #4]
    533e:	f001 fa89 	bl	6854 <SdSpiArduinoDriver::deactivate()>
  return true;
    5342:	4630      	mov	r0, r6
    m_spiActive = false;
    5344:	74a5      	strb	r5, [r4, #18]
}
    5346:	b002      	add	sp, #8
    5348:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    534a:	4798      	blx	r3
    534c:	e7c1      	b.n	52d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    534e:	bf00      	nop
    5350:	00004811 	.word	0x00004811

00005354 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5354:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    5356:	7f04      	ldrb	r4, [r0, #28]
    5358:	b134      	cbz	r4, 5368 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    535a:	6804      	ldr	r4, [r0, #0]
    535c:	2301      	movs	r3, #1
    535e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    5360:	46a4      	mov	ip, r4
}
    5362:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    5366:	4760      	bx	ip
}
    5368:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    536c:	f7ff bfa6 	b.w	52bc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00005370 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    5370:	2000      	movs	r0, #0
    5372:	4770      	bx	lr

00005374 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    5374:	2000      	movs	r0, #0
    5376:	4770      	bx	lr

00005378 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    5378:	2000      	movs	r0, #0
    537a:	4770      	bx	lr

0000537c <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    537c:	4770      	bx	lr
    537e:	bf00      	nop

00005380 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    5380:	4b08      	ldr	r3, [pc, #32]	; (53a4 <sdIrs()+0x24>)
    5382:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5384:	4a08      	ldr	r2, [pc, #32]	; (53a8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    5386:	4809      	ldr	r0, [pc, #36]	; (53ac <sdIrs()+0x2c>)
static void sdIrs() {
    5388:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    538a:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    538c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    538e:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    5390:	6812      	ldr	r2, [r2, #0]
}
    5392:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    5396:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    5398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    539a:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    539e:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    53a0:	7001      	strb	r1, [r0, #0]
}
    53a2:	4770      	bx	lr
    53a4:	402c0000 	.word	0x402c0000
    53a8:	2001e218 	.word	0x2001e218
    53ac:	2001f606 	.word	0x2001f606

000053b0 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    53b0:	4b03      	ldr	r3, [pc, #12]	; (53c0 <isBusyDat()+0x10>)
    53b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    53b4:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    53b8:	f3c0 6000 	ubfx	r0, r0, #24, #1
    53bc:	4770      	bx	lr
    53be:	bf00      	nop
    53c0:	402c0000 	.word	0x402c0000

000053c4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    53c4:	4b01      	ldr	r3, [pc, #4]	; (53cc <isBusyDMA()+0x8>)
    53c6:	7818      	ldrb	r0, [r3, #0]
}
    53c8:	4770      	bx	lr
    53ca:	bf00      	nop
    53cc:	2001f606 	.word	0x2001f606

000053d0 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    53d0:	4a2b      	ldr	r2, [pc, #172]	; (5480 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    53d2:	4b2c      	ldr	r3, [pc, #176]	; (5484 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    53d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    53d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    53da:	492b      	ldr	r1, [pc, #172]	; (5488 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    53dc:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    53e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    53e4:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    53e6:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    53e8:	4c28      	ldr	r4, [pc, #160]	; (548c <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    53ea:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    53ee:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    53f2:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    53f6:	089b      	lsrs	r3, r3, #2
    53f8:	fbb1 fef3 	udiv	lr, r1, r3
    53fc:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5400:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    5404:	d235      	bcs.n	5472 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    5406:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    5408:	461e      	mov	r6, r3
    540a:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    540c:	011a      	lsls	r2, r3, #4
    540e:	fbbe f2f2 	udiv	r2, lr, r2
    5412:	4282      	cmp	r2, r0
    5414:	d901      	bls.n	541a <setSdclk(unsigned long)+0x4a>
    5416:	2bff      	cmp	r3, #255	; 0xff
    5418:	d9f6      	bls.n	5408 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    541a:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    541e:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5420:	4290      	cmp	r0, r2
    5422:	d22a      	bcs.n	547a <setSdclk(unsigned long)+0xaa>
    5424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5428:	2201      	movs	r2, #1
    542a:	e000      	b.n	542e <setSdclk(unsigned long)+0x5e>
    542c:	46a4      	mov	ip, r4
    dvs++;
    542e:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5430:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5434:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5436:	fbbe f1fc 	udiv	r1, lr, ip
    543a:	4281      	cmp	r1, r0
    543c:	d917      	bls.n	546e <setSdclk(unsigned long)+0x9e>
    543e:	2a10      	cmp	r2, #16
    5440:	d1f4      	bne.n	542c <setSdclk(unsigned long)+0x5c>
    5442:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    5444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5448:	4911      	ldr	r1, [pc, #68]	; (5490 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    544a:	4a12      	ldr	r2, [pc, #72]	; (5494 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    544c:	fb03 fc0c 	mul.w	ip, r3, ip
    5450:	fbbe f3fc 	udiv	r3, lr, ip
    5454:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    5456:	4b10      	ldr	r3, [pc, #64]	; (5498 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    5458:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    545a:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    545c:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    545e:	4333      	orrs	r3, r6
    5460:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    5464:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5466:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5468:	071b      	lsls	r3, r3, #28
    546a:	d5fc      	bpl.n	5466 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    546c:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    546e:	012d      	lsls	r5, r5, #4
    5470:	e7e8      	b.n	5444 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5472:	4672      	mov	r2, lr
    5474:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    5476:	2301      	movs	r3, #1
    5478:	e7d2      	b.n	5420 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    547a:	469c      	mov	ip, r3
    547c:	2500      	movs	r5, #0
    547e:	e7e1      	b.n	5444 <setSdclk(unsigned long)+0x74>
    5480:	400fc000 	.word	0x400fc000
    5484:	400d8000 	.word	0x400d8000
    5488:	5e69ec00 	.word	0x5e69ec00
    548c:	aaaaaaab 	.word	0xaaaaaaab
    5490:	2000db3c 	.word	0x2000db3c
    5494:	402c0000 	.word	0x402c0000
    5498:	fff0000f 	.word	0xfff0000f

0000549c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    549c:	4b01      	ldr	r3, [pc, #4]	; (54a4 <SdioCard::errorCode() const+0x8>)
}
    549e:	7818      	ldrb	r0, [r3, #0]
    54a0:	4770      	bx	lr
    54a2:	bf00      	nop
    54a4:	20008d76 	.word	0x20008d76

000054a8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    54a8:	4b01      	ldr	r3, [pc, #4]	; (54b0 <SdioCard::errorData() const+0x8>)
    54aa:	6818      	ldr	r0, [r3, #0]
}
    54ac:	4770      	bx	lr
    54ae:	bf00      	nop
    54b0:	2001e218 	.word	0x2001e218

000054b4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    54b4:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    54b6:	4c07      	ldr	r4, [pc, #28]	; (54d4 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    54b8:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    54ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    54bc:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    54c0:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    54c2:	f8cc 1004 	str.w	r1, [ip, #4]
    54c6:	f8cc 2008 	str.w	r2, [ip, #8]
    54ca:	f8cc 300c 	str.w	r3, [ip, #12]
}
    54ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    54d2:	4770      	bx	lr
    54d4:	2001dd4c 	.word	0x2001dd4c

000054d8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    54d8:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    54da:	4c07      	ldr	r4, [pc, #28]	; (54f8 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    54dc:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    54de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    54e0:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    54e4:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    54e6:	f8cc 1004 	str.w	r1, [ip, #4]
    54ea:	f8cc 2008 	str.w	r2, [ip, #8]
    54ee:	f8cc 300c 	str.w	r3, [ip, #12]
}
    54f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    54f6:	4770      	bx	lr
    54f8:	2001dd5c 	.word	0x2001dd5c

000054fc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    54fc:	4b02      	ldr	r3, [pc, #8]	; (5508 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    54fe:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	600b      	str	r3, [r1, #0]
}
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	2001dd6c 	.word	0x2001dd6c

0000550c <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    550c:	4770      	bx	lr
    550e:	bf00      	nop

00005510 <SdioCard::~SdioCard()>:
    5510:	b510      	push	{r4, lr}
    5512:	4604      	mov	r4, r0
    5514:	210c      	movs	r1, #12
    5516:	f002 fb3b 	bl	7b90 <operator delete(void*, unsigned int)>
    551a:	4620      	mov	r0, r4
    551c:	bd10      	pop	{r4, pc}
    551e:	bf00      	nop

00005520 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    5520:	4b04      	ldr	r3, [pc, #16]	; (5534 <SdioCard::type() const+0x14>)
    5522:	781b      	ldrb	r3, [r3, #0]
    5524:	b123      	cbz	r3, 5530 <SdioCard::type() const+0x10>
    5526:	4b04      	ldr	r3, [pc, #16]	; (5538 <SdioCard::type() const+0x18>)
    5528:	7818      	ldrb	r0, [r3, #0]
    552a:	3002      	adds	r0, #2
    552c:	b2c0      	uxtb	r0, r0
    552e:	4770      	bx	lr
    5530:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    5532:	4770      	bx	lr
    5534:	2001f603 	.word	0x2001f603
    5538:	2001f604 	.word	0x2001f604

0000553c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    553c:	4b18      	ldr	r3, [pc, #96]	; (55a0 <SdioCard::sectorCount()+0x64>)
    553e:	781a      	ldrb	r2, [r3, #0]
    5540:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    5544:	d00f      	beq.n	5566 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    5546:	2a40      	cmp	r2, #64	; 0x40
    5548:	d001      	beq.n	554e <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    554a:	2000      	movs	r0, #0
}
    554c:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    554e:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5550:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5552:	7a19      	ldrb	r1, [r3, #8]
    5554:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5556:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    555a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    555e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    5562:	0280      	lsls	r0, r0, #10
    5564:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5566:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5568:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    556a:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    556c:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5570:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5574:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5578:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    557a:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    557c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    5580:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    5582:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5586:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    558a:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    558c:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    5590:	3001      	adds	r0, #1
    5592:	f003 030f 	and.w	r3, r3, #15
    5596:	4413      	add	r3, r2
    5598:	3b07      	subs	r3, #7
    559a:	4098      	lsls	r0, r3
}
    559c:	f85d fb04 	ldr.w	pc, [sp], #4
    55a0:	2001dd5c 	.word	0x2001dd5c

000055a4 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    55a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    55a8:	f002 f9c4 	bl	7934 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    55ac:	4e17      	ldr	r6, [pc, #92]	; (560c <waitTransferComplete() [clone .part.0]+0x68>)
    55ae:	4d18      	ldr	r5, [pc, #96]	; (5610 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    55b0:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    55b2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5628 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    55b6:	e004      	b.n	55c2 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    55b8:	f002 f9bc 	bl	7934 <micros>
    55bc:	1bc0      	subs	r0, r0, r7
    55be:	4540      	cmp	r0, r8
    55c0:	d81b      	bhi.n	55fa <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    55c2:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    55c4:	402c      	ands	r4, r5
    55c6:	d0f7      	beq.n	55b8 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    55c8:	4a12      	ldr	r2, [pc, #72]	; (5614 <waitTransferComplete() [clone .part.0]+0x70>)
    55ca:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    55cc:	4b12      	ldr	r3, [pc, #72]	; (5618 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    55ce:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    55d0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    55d2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    55d4:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    55d6:	4a11      	ldr	r2, [pc, #68]	; (561c <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    55d8:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	4213      	tst	r3, r2
    55de:	d009      	beq.n	55f4 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    55e0:	490f      	ldr	r1, [pc, #60]	; (5620 <waitTransferComplete() [clone .part.0]+0x7c>)
    55e2:	241f      	movs	r4, #31
  m_errorLine = line;
    55e4:	4b0f      	ldr	r3, [pc, #60]	; (5624 <waitTransferComplete() [clone .part.0]+0x80>)
    55e6:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    55ea:	2000      	movs	r0, #0
  m_errorCode = code;
    55ec:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    55ee:	601a      	str	r2, [r3, #0]
}
    55f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    55f4:	2001      	movs	r0, #1
}
    55f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    55fa:	4a06      	ldr	r2, [pc, #24]	; (5614 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    55fc:	4b06      	ldr	r3, [pc, #24]	; (5618 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    55fe:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5600:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5602:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5604:	681b      	ldr	r3, [r3, #0]
    5606:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5608:	e7ea      	b.n	55e0 <waitTransferComplete() [clone .part.0]+0x3c>
    560a:	bf00      	nop
    560c:	402c0000 	.word	0x402c0000
    5610:	117f0002 	.word	0x117f0002
    5614:	2001f605 	.word	0x2001f605
    5618:	2001e218 	.word	0x2001e218
    561c:	117f0000 	.word	0x117f0000
    5620:	20008d76 	.word	0x20008d76
    5624:	2001db40 	.word	0x2001db40
    5628:	000f4240 	.word	0x000f4240

0000562c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5630:	4c26      	ldr	r4, [pc, #152]	; (56cc <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5632:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5634:	7823      	ldrb	r3, [r4, #0]
    5636:	2b00      	cmp	r3, #0
    5638:	d138      	bne.n	56ac <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    563a:	4b25      	ldr	r3, [pc, #148]	; (56d0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    563c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    563e:	05d2      	lsls	r2, r2, #23
    5640:	d52b      	bpl.n	569a <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5642:	4d23      	ldr	r5, [pc, #140]	; (56d0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5644:	f8df 8094 	ldr.w	r8, [pc, #148]	; 56dc <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5648:	6aab      	ldr	r3, [r5, #40]	; 0x28
    564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    564e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5650:	f002 f970 	bl	7934 <micros>
    5654:	4606      	mov	r6, r0
  while (fcn()) {
    5656:	e004      	b.n	5662 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5658:	f002 f96c 	bl	7934 <micros>
    565c:	1b80      	subs	r0, r0, r6
    565e:	4540      	cmp	r0, r8
    5660:	d82a      	bhi.n	56b8 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    5662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5664:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5668:	d0f6      	beq.n	5658 <SdioCard::writeData(unsigned char const*)+0x2c>
    566a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    566e:	4818      	ldr	r0, [pc, #96]	; (56d0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5670:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5674:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5676:	055b      	lsls	r3, r3, #21
    5678:	d5fc      	bpl.n	5674 <SdioCard::writeData(unsigned char const*)+0x48>
    567a:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    567e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5682:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5684:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5686:	d1fa      	bne.n	567e <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    5688:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    568c:	45bc      	cmp	ip, r7
    568e:	d1f1      	bne.n	5674 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5690:	2301      	movs	r3, #1
  return true;
    5692:	4618      	mov	r0, r3
  m_transferActive = true;
    5694:	7023      	strb	r3, [r4, #0]
}
    5696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    569a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    569c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    56a0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    56a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    56a8:	629a      	str	r2, [r3, #40]	; 0x28
    56aa:	e7ca      	b.n	5642 <SdioCard::writeData(unsigned char const*)+0x16>
    56ac:	f7ff ff7a 	bl	55a4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    56b0:	2800      	cmp	r0, #0
    56b2:	d1c2      	bne.n	563a <SdioCard::writeData(unsigned char const*)+0xe>
}
    56b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    56b8:	4906      	ldr	r1, [pc, #24]	; (56d4 <SdioCard::writeData(unsigned char const*)+0xa8>)
    56ba:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    56bc:	4b06      	ldr	r3, [pc, #24]	; (56d8 <SdioCard::writeData(unsigned char const*)+0xac>)
    56be:	f240 32d9 	movw	r2, #985	; 0x3d9
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    56c2:	4648      	mov	r0, r9
  m_errorCode = code;
    56c4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    56c6:	601a      	str	r2, [r3, #0]
}
    56c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    56cc:	2001f605 	.word	0x2001f605
    56d0:	402c0000 	.word	0x402c0000
    56d4:	20008d76 	.word	0x20008d76
    56d8:	2001db40 	.word	0x2001db40
    56dc:	000f4240 	.word	0x000f4240

000056e0 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    56e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56e4:	4607      	mov	r7, r0
    56e6:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    56e8:	4c1f      	ldr	r4, [pc, #124]	; (5768 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    56ea:	f002 f923 	bl	7934 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    56ee:	4e1f      	ldr	r6, [pc, #124]	; (576c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    56f0:	4605      	mov	r5, r0
  while (fcn()) {
    56f2:	e004      	b.n	56fe <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    56f4:	f002 f91e 	bl	7934 <micros>
    56f8:	1b43      	subs	r3, r0, r5
    56fa:	42b3      	cmp	r3, r6
    56fc:	d824      	bhi.n	5748 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    56fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5700:	07d9      	lsls	r1, r3, #31
    5702:	d4f7      	bmi.n	56f4 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5704:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5706:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    570a:	d420      	bmi.n	574e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    570c:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5710:	4c15      	ldr	r4, [pc, #84]	; (5768 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5712:	4e17      	ldr	r6, [pc, #92]	; (5770 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5714:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5716:	f002 f90d 	bl	7934 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    571a:	4f14      	ldr	r7, [pc, #80]	; (576c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    571c:	4605      	mov	r5, r0
  while (fcn()) {
    571e:	e004      	b.n	572a <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5720:	f002 f908 	bl	7934 <micros>
    5724:	1b40      	subs	r0, r0, r5
    5726:	42b8      	cmp	r0, r7
    5728:	d80e      	bhi.n	5748 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    572a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    572c:	4233      	tst	r3, r6
    572e:	d0f7      	beq.n	5720 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5730:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5732:	4b10      	ldr	r3, [pc, #64]	; (5774 <cardCommand(unsigned long, unsigned long)+0x94>)
    5734:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5736:	681a      	ldr	r2, [r3, #0]
    5738:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    573a:	681a      	ldr	r2, [r3, #0]
    573c:	07d2      	lsls	r2, r2, #31
    573e:	d503      	bpl.n	5748 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5740:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5742:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5746:	d00b      	beq.n	5760 <cardCommand(unsigned long, unsigned long)+0x80>
    5748:	2000      	movs	r0, #0
}
    574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    574e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5750:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5752:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5756:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5758:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    575a:	4313      	orrs	r3, r2
    575c:	64a3      	str	r3, [r4, #72]	; 0x48
    575e:	e7d5      	b.n	570c <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5760:	2001      	movs	r0, #1
}
    5762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5766:	bf00      	nop
    5768:	402c0000 	.word	0x402c0000
    576c:	000f4240 	.word	0x000f4240
    5770:	000f0001 	.word	0x000f0001
    5774:	2001e218 	.word	0x2001e218

00005778 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5778:	4b15      	ldr	r3, [pc, #84]	; (57d0 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    577a:	b530      	push	{r4, r5, lr}
    577c:	460d      	mov	r5, r1
    577e:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5780:	6819      	ldr	r1, [r3, #0]
    5782:	f7ff ffad 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5786:	b308      	cbz	r0, 57cc <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5788:	4b12      	ldr	r3, [pc, #72]	; (57d4 <readReg16(unsigned long, void*)+0x5c>)
    578a:	f105 040f 	add.w	r4, r5, #15
    578e:	691a      	ldr	r2, [r3, #16]
    5790:	9200      	str	r2, [sp, #0]
    5792:	6959      	ldr	r1, [r3, #20]
    5794:	9101      	str	r1, [sp, #4]
    5796:	6999      	ldr	r1, [r3, #24]
    5798:	9102      	str	r1, [sp, #8]
    579a:	69db      	ldr	r3, [r3, #28]
    579c:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    579e:	2300      	movs	r3, #0
    57a0:	e001      	b.n	57a6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    57a2:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    57a6:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    57aa:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    57ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    57b0:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    57b4:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    57b6:	fa22 f20c 	lsr.w	r2, r2, ip
    57ba:	f10e 0110 	add.w	r1, lr, #16
    57be:	f804 2d01 	strb.w	r2, [r4, #-1]!
    57c2:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    57c6:	d1ec      	bne.n	57a2 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    57c8:	2300      	movs	r3, #0
    57ca:	73eb      	strb	r3, [r5, #15]
}
    57cc:	b005      	add	sp, #20
    57ce:	bd30      	pop	{r4, r5, pc}
    57d0:	2001dd70 	.word	0x2001dd70
    57d4:	402c0000 	.word	0x402c0000

000057d8 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    57d8:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    57da:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    57dc:	07db      	lsls	r3, r3, #31
    57de:	d505      	bpl.n	57ec <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    57e0:	4b15      	ldr	r3, [pc, #84]	; (5838 <SdioCard::isBusy()+0x60>)
    57e2:	681b      	ldr	r3, [r3, #0]
    57e4:	b1b3      	cbz	r3, 5814 <SdioCard::isBusy()+0x3c>
}
    57e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    57ea:	4718      	bx	r3
    if (m_transferActive) {
    57ec:	4b13      	ldr	r3, [pc, #76]	; (583c <SdioCard::isBusy()+0x64>)
    57ee:	781b      	ldrb	r3, [r3, #0]
    57f0:	b93b      	cbnz	r3, 5802 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    57f2:	4b13      	ldr	r3, [pc, #76]	; (5840 <SdioCard::isBusy()+0x68>)
    57f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    57f6:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    57fa:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    57fe:	4620      	mov	r0, r4
    5800:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5802:	4b0f      	ldr	r3, [pc, #60]	; (5840 <SdioCard::isBusy()+0x68>)
    5804:	4c0f      	ldr	r4, [pc, #60]	; (5844 <SdioCard::isBusy()+0x6c>)
    5806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5808:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    580a:	fab4 f484 	clz	r4, r4
    580e:	0964      	lsrs	r4, r4, #5
}
    5810:	4620      	mov	r0, r4
    5812:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5814:	4b0c      	ldr	r3, [pc, #48]	; (5848 <SdioCard::isBusy()+0x70>)
    5816:	781c      	ldrb	r4, [r3, #0]
    5818:	2c00      	cmp	r4, #0
    581a:	d0f0      	beq.n	57fe <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    581c:	4b0b      	ldr	r3, [pc, #44]	; (584c <SdioCard::isBusy()+0x74>)
    581e:	480c      	ldr	r0, [pc, #48]	; (5850 <SdioCard::isBusy()+0x78>)
    5820:	6819      	ldr	r1, [r3, #0]
    5822:	f7ff ff5d 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5826:	2800      	cmp	r0, #0
    5828:	d0e9      	beq.n	57fe <SdioCard::isBusy()+0x26>
    582a:	4b05      	ldr	r3, [pc, #20]	; (5840 <SdioCard::isBusy()+0x68>)
    582c:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    582e:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5832:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5836:	e7e2      	b.n	57fe <SdioCard::isBusy()+0x26>
    5838:	2001e214 	.word	0x2001e214
    583c:	2001f605 	.word	0x2001f605
    5840:	402c0000 	.word	0x402c0000
    5844:	117f0002 	.word	0x117f0002
    5848:	2001f602 	.word	0x2001f602
    584c:	2001dd70 	.word	0x2001dd70
    5850:	0d1a0000 	.word	0x0d1a0000

00005854 <SdioCard::status()>:
uint32_t SdioCard::status() {
    5854:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5856:	4b04      	ldr	r3, [pc, #16]	; (5868 <SdioCard::status()+0x14>)
    5858:	4804      	ldr	r0, [pc, #16]	; (586c <SdioCard::status()+0x18>)
    585a:	6819      	ldr	r1, [r3, #0]
    585c:	f7ff ff40 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5860:	b108      	cbz	r0, 5866 <SdioCard::status()+0x12>
    5862:	4b03      	ldr	r3, [pc, #12]	; (5870 <SdioCard::status()+0x1c>)
    5864:	6918      	ldr	r0, [r3, #16]
}
    5866:	bd08      	pop	{r3, pc}
    5868:	2001dd70 	.word	0x2001dd70
    586c:	0d1a0000 	.word	0x0d1a0000
    5870:	402c0000 	.word	0x402c0000

00005874 <isBusyCMD13()>:
static bool isBusyCMD13() {
    5874:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5876:	4b07      	ldr	r3, [pc, #28]	; (5894 <isBusyCMD13()+0x20>)
    5878:	4807      	ldr	r0, [pc, #28]	; (5898 <isBusyCMD13()+0x24>)
    587a:	6819      	ldr	r1, [r3, #0]
    587c:	f7ff ff30 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5880:	b130      	cbz	r0, 5890 <isBusyCMD13()+0x1c>
    5882:	4b06      	ldr	r3, [pc, #24]	; (589c <isBusyCMD13()+0x28>)
    5884:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5886:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    588a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    588e:	bd08      	pop	{r3, pc}
    5890:	2001      	movs	r0, #1
    5892:	bd08      	pop	{r3, pc}
    5894:	2001dd70 	.word	0x2001dd70
    5898:	0d1a0000 	.word	0x0d1a0000
    589c:	402c0000 	.word	0x402c0000

000058a0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    58a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    58a4:	4b29      	ldr	r3, [pc, #164]	; (594c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    58a6:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    58a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 596c <SdioCard::writeStart(unsigned long)+0xcc>
    58ac:	4e28      	ldr	r6, [pc, #160]	; (5950 <SdioCard::writeStart(unsigned long)+0xb0>)
    58ae:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    58b2:	f002 f83f 	bl	7934 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    58b6:	4d27      	ldr	r5, [pc, #156]	; (5954 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    58b8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    58ba:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5970 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    58be:	4f26      	ldr	r7, [pc, #152]	; (5958 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    58c0:	e006      	b.n	58d0 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    58c2:	f002 f837 	bl	7934 <micros>
    58c6:	1b00      	subs	r0, r0, r4
    58c8:	42b8      	cmp	r0, r7
    58ca:	d829      	bhi.n	5920 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    58cc:	f003 fb3c 	bl	8f48 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    58d0:	6831      	ldr	r1, [r6, #0]
    58d2:	4628      	mov	r0, r5
    58d4:	f7ff ff04 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    58d8:	2800      	cmp	r0, #0
    58da:	d0f2      	beq.n	58c2 <SdioCard::writeStart(unsigned long)+0x22>
    58dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    58e0:	05db      	lsls	r3, r3, #23
    58e2:	d5ee      	bpl.n	58c2 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    58e4:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    58e6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    58ea:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    58ee:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    58f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    58f6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    58fa:	4b18      	ldr	r3, [pc, #96]	; (595c <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    58fc:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	b1cb      	cbz	r3, 5938 <SdioCard::writeStart(unsigned long)+0x98>
    5904:	4649      	mov	r1, r9
    5906:	4816      	ldr	r0, [pc, #88]	; (5960 <SdioCard::writeStart(unsigned long)+0xc0>)
    5908:	f7ff feea 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    590c:	b930      	cbnz	r0, 591c <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    590e:	4915      	ldr	r1, [pc, #84]	; (5964 <SdioCard::writeStart(unsigned long)+0xc4>)
    5910:	240e      	movs	r4, #14
  m_errorLine = line;
    5912:	4b15      	ldr	r3, [pc, #84]	; (5968 <SdioCard::writeStart(unsigned long)+0xc8>)
    5914:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    5918:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    591a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5920:	4a10      	ldr	r2, [pc, #64]	; (5964 <SdioCard::writeStart(unsigned long)+0xc4>)
    5922:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5924:	2000      	movs	r0, #0
  m_errorLine = line;
    5926:	4b10      	ldr	r3, [pc, #64]	; (5968 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5928:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    592a:	f240 422c 	movw	r2, #1068	; 0x42c
      m_busyFcn = 0;
    592e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5932:	601a      	str	r2, [r3, #0]
}
    5934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5938:	ea4f 2949 	mov.w	r9, r9, lsl #9
    593c:	4808      	ldr	r0, [pc, #32]	; (5960 <SdioCard::writeStart(unsigned long)+0xc0>)
    593e:	4649      	mov	r1, r9
    5940:	f7ff fece 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5944:	2800      	cmp	r0, #0
    5946:	d1e9      	bne.n	591c <SdioCard::writeStart(unsigned long)+0x7c>
    5948:	e7e1      	b.n	590e <SdioCard::writeStart(unsigned long)+0x6e>
    594a:	bf00      	nop
    594c:	00005875 	.word	0x00005875
    5950:	2001dd70 	.word	0x2001dd70
    5954:	0d1a0000 	.word	0x0d1a0000
    5958:	000f4240 	.word	0x000f4240
    595c:	2001f604 	.word	0x2001f604
    5960:	193a0020 	.word	0x193a0020
    5964:	20008d76 	.word	0x20008d76
    5968:	2001db40 	.word	0x2001db40
    596c:	2001e214 	.word	0x2001e214
    5970:	402c0000 	.word	0x402c0000

00005974 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    5974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5978:	4c25      	ldr	r4, [pc, #148]	; (5a10 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    597a:	2100      	movs	r1, #0
    597c:	4825      	ldr	r0, [pc, #148]	; (5a14 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    597e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5984:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5986:	f7ff feab 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    598a:	4605      	mov	r5, r0
    598c:	b948      	cbnz	r0, 59a2 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    598e:	4922      	ldr	r1, [pc, #136]	; (5a18 <SdioCard::readStop()+0xa4>)
    5990:	2009      	movs	r0, #9
  m_errorLine = line;
    5992:	4b22      	ldr	r3, [pc, #136]	; (5a1c <SdioCard::readStop()+0xa8>)
    5994:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    5998:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    599a:	601a      	str	r2, [r3, #0]
}
    599c:	4628      	mov	r0, r5
    599e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    59a2:	4b1f      	ldr	r3, [pc, #124]	; (5a20 <SdioCard::readStop()+0xac>)
    59a4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5a28 <SdioCard::readStop()+0xb4>
    59a8:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    59ac:	f001 ffc2 	bl	7934 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    59b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    59b2:	4606      	mov	r6, r0
  while (fcn()) {
    59b4:	01d8      	lsls	r0, r3, #7
    59b6:	d418      	bmi.n	59ea <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59b8:	4f1a      	ldr	r7, [pc, #104]	; (5a24 <SdioCard::readStop()+0xb0>)
    59ba:	e004      	b.n	59c6 <SdioCard::readStop()+0x52>
    yield();
    59bc:	f003 fac4 	bl	8f48 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    59c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    59c2:	01d9      	lsls	r1, r3, #7
    59c4:	d411      	bmi.n	59ea <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59c6:	f001 ffb5 	bl	7934 <micros>
    59ca:	1b83      	subs	r3, r0, r6
    59cc:	42bb      	cmp	r3, r7
    59ce:	d9f5      	bls.n	59bc <SdioCard::readStop()+0x48>
  m_errorCode = code;
    59d0:	4a11      	ldr	r2, [pc, #68]	; (5a18 <SdioCard::readStop()+0xa4>)
    59d2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    59d4:	2500      	movs	r5, #0
  m_errorLine = line;
    59d6:	4b11      	ldr	r3, [pc, #68]	; (5a1c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    59d8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    59da:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    59de:	4628      	mov	r0, r5
      m_busyFcn = 0;
    59e0:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    59e4:	601a      	str	r2, [r3, #0]
}
    59e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    59ea:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    59ec:	4b08      	ldr	r3, [pc, #32]	; (5a10 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    59ee:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    59f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    59f4:	0792      	lsls	r2, r2, #30
    59f6:	d5d1      	bpl.n	599c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    59f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    59fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    59fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    59fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5a02:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    5a06:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    5a08:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5a0a:	629a      	str	r2, [r3, #40]	; 0x28
    5a0c:	e7c6      	b.n	599c <SdioCard::readStop()+0x28>
    5a0e:	bf00      	nop
    5a10:	402c0000 	.word	0x402c0000
    5a14:	0cdb0000 	.word	0x0cdb0000
    5a18:	20008d76 	.word	0x20008d76
    5a1c:	2001db40 	.word	0x2001db40
    5a20:	000053b1 	.word	0x000053b1
    5a24:	000f4240 	.word	0x000f4240
    5a28:	2001e214 	.word	0x2001e214

00005a2c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    5a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a30:	4682      	mov	sl, r0
    5a32:	4689      	mov	r9, r1
    5a34:	4e36      	ldr	r6, [pc, #216]	; (5b10 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    5a36:	f001 ff7d 	bl	7934 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5a3a:	4d36      	ldr	r5, [pc, #216]	; (5b14 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    5a3c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5a3e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 5b40 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a42:	4f35      	ldr	r7, [pc, #212]	; (5b18 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    5a44:	e004      	b.n	5a50 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a46:	f001 ff75 	bl	7934 <micros>
    5a4a:	1b03      	subs	r3, r0, r4
    5a4c:	42bb      	cmp	r3, r7
    5a4e:	d827      	bhi.n	5aa0 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5a50:	6831      	ldr	r1, [r6, #0]
    5a52:	4628      	mov	r0, r5
    5a54:	f7ff fe44 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5a58:	2800      	cmp	r0, #0
    5a5a:	d0f4      	beq.n	5a46 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    5a5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5a60:	05da      	lsls	r2, r3, #23
    5a62:	d5f0      	bpl.n	5a46 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    5a64:	2301      	movs	r3, #1
    5a66:	4d2d      	ldr	r5, [pc, #180]	; (5b1c <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    5a68:	4f2d      	ldr	r7, [pc, #180]	; (5b20 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5a6a:	4651      	mov	r1, sl
  m_dmaBusy = true;
    5a6c:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    5a6e:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5a70:	482c      	ldr	r0, [pc, #176]	; (5b24 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    5a72:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5a74:	4b2c      	ldr	r3, [pc, #176]	; (5b28 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    5a76:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5a7a:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5a7e:	4b2b      	ldr	r3, [pc, #172]	; (5b2c <cardCMD6(unsigned long, unsigned char*)+0x100>)
    5a80:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5a84:	f7ff fe2c 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5a88:	4604      	mov	r4, r0
    5a8a:	b9a0      	cbnz	r0, 5ab6 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    5a8c:	4928      	ldr	r1, [pc, #160]	; (5b30 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5a8e:	2004      	movs	r0, #4
  m_errorLine = line;
    5a90:	4b28      	ldr	r3, [pc, #160]	; (5b34 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5a92:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    5a96:	7008      	strb	r0, [r1, #0]
}
    5a98:	4620      	mov	r0, r4
  m_errorLine = line;
    5a9a:	601a      	str	r2, [r3, #0]
}
    5a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5aa0:	4923      	ldr	r1, [pc, #140]	; (5b30 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5aa2:	200a      	movs	r0, #10
  m_errorLine = line;
    5aa4:	4b23      	ldr	r3, [pc, #140]	; (5b34 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5aa6:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    5aaa:	2400      	movs	r4, #0
  m_errorCode = code;
    5aac:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5aae:	601a      	str	r2, [r3, #0]
}
    5ab0:	4620      	mov	r0, r4
    5ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    5ab6:	4b20      	ldr	r3, [pc, #128]	; (5b38 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    5ab8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5b44 <cardCMD6(unsigned long, unsigned char*)+0x118>
    5abc:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    5ac0:	f001 ff38 	bl	7934 <micros>
  return m_dmaBusy;
    5ac4:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    5ac6:	4606      	mov	r6, r0
  while (fcn()) {
    5ac8:	b1bb      	cbz	r3, 5afa <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5aca:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5b18 <cardCMD6(unsigned long, unsigned char*)+0xec>
    5ace:	e003      	b.n	5ad8 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    5ad0:	f003 fa3a 	bl	8f48 <yield>
  return m_dmaBusy;
    5ad4:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5ad6:	b183      	cbz	r3, 5afa <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ad8:	f001 ff2c 	bl	7934 <micros>
    5adc:	1b83      	subs	r3, r0, r6
    5ade:	4543      	cmp	r3, r8
    5ae0:	d9f6      	bls.n	5ad0 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    5ae2:	2300      	movs	r3, #0
    5ae4:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    5ae8:	4911      	ldr	r1, [pc, #68]	; (5b30 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5aea:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5aec:	4b11      	ldr	r3, [pc, #68]	; (5b34 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5aee:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    5af2:	2400      	movs	r4, #0
  m_errorCode = code;
    5af4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5af6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    5af8:	e7da      	b.n	5ab0 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5afa:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    5afc:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5afe:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    5b00:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5b04:	d5f0      	bpl.n	5ae8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5b06:	683a      	ldr	r2, [r7, #0]
    5b08:	4b0c      	ldr	r3, [pc, #48]	; (5b3c <cardCMD6(unsigned long, unsigned char*)+0x110>)
    5b0a:	421a      	tst	r2, r3
    5b0c:	d0d0      	beq.n	5ab0 <cardCMD6(unsigned long, unsigned char*)+0x84>
    5b0e:	e7eb      	b.n	5ae8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5b10:	2001dd70 	.word	0x2001dd70
    5b14:	0d1a0000 	.word	0x0d1a0000
    5b18:	000f4240 	.word	0x000f4240
    5b1c:	2001f606 	.word	0x2001f606
    5b20:	2001e218 	.word	0x2001e218
    5b24:	063a0011 	.word	0x063a0011
    5b28:	00010040 	.word	0x00010040
    5b2c:	117f0002 	.word	0x117f0002
    5b30:	20008d76 	.word	0x20008d76
    5b34:	2001db40 	.word	0x2001db40
    5b38:	000053c5 	.word	0x000053c5
    5b3c:	117f0000 	.word	0x117f0000
    5b40:	402c0000 	.word	0x402c0000
    5b44:	2001e214 	.word	0x2001e214

00005b48 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    5b4c:	4d32      	ldr	r5, [pc, #200]	; (5c18 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5b4e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    5b50:	7aab      	ldrb	r3, [r5, #10]
    5b52:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    5b56:	d112      	bne.n	5b7e <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    5b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b5c:	7aea      	ldrb	r2, [r5, #11]
    5b5e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5b60:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5b64:	1c62      	adds	r2, r4, #1
    5b66:	430a      	orrs	r2, r1
    5b68:	4213      	tst	r3, r2
    5b6a:	d008      	beq.n	5b7e <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    5b6c:	492b      	ldr	r1, [pc, #172]	; (5c1c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5b6e:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    5b70:	4b2b      	ldr	r3, [pc, #172]	; (5c20 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5b72:	f240 22e3 	movw	r2, #739	; 0x2e3
  m_errorCode = code;
    5b76:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5b78:	601a      	str	r2, [r3, #0]
}
    5b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    5b7e:	4b29      	ldr	r3, [pc, #164]	; (5c24 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5b80:	781b      	ldrb	r3, [r3, #0]
    5b82:	b90b      	cbnz	r3, 5b88 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    5b84:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    5b86:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    5b88:	4827      	ldr	r0, [pc, #156]	; (5c28 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    5b8a:	f7ff fda9 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5b8e:	b940      	cbnz	r0, 5ba2 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    5b90:	4922      	ldr	r1, [pc, #136]	; (5c1c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5b92:	240f      	movs	r4, #15
  m_errorLine = line;
    5b94:	4b22      	ldr	r3, [pc, #136]	; (5c20 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5b96:	f240 22eb 	movw	r2, #747	; 0x2eb
  m_errorCode = code;
    5b9a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5b9c:	601a      	str	r2, [r3, #0]
}
    5b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    5ba2:	4621      	mov	r1, r4
    5ba4:	4821      	ldr	r0, [pc, #132]	; (5c2c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    5ba6:	f7ff fd9b 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5baa:	b940      	cbnz	r0, 5bbe <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    5bac:	491b      	ldr	r1, [pc, #108]	; (5c1c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5bae:	2410      	movs	r4, #16
  m_errorLine = line;
    5bb0:	4b1b      	ldr	r3, [pc, #108]	; (5c20 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5bb2:	f240 22ee 	movw	r2, #750	; 0x2ee
  m_errorCode = code;
    5bb6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5bb8:	601a      	str	r2, [r3, #0]
}
    5bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5bbe:	2100      	movs	r1, #0
    5bc0:	481b      	ldr	r0, [pc, #108]	; (5c30 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    5bc2:	f7ff fd8d 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5bc6:	b938      	cbnz	r0, 5bd8 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    5bc8:	4914      	ldr	r1, [pc, #80]	; (5c1c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5bca:	2411      	movs	r4, #17
  m_errorLine = line;
    5bcc:	4b14      	ldr	r3, [pc, #80]	; (5c20 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5bce:	f240 22f1 	movw	r2, #753	; 0x2f1
  m_errorCode = code;
    5bd2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5bd4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    5bd6:	e7e2      	b.n	5b9e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    5bd8:	f001 feac 	bl	7934 <micros>
    5bdc:	4e15      	ldr	r6, [pc, #84]	; (5c34 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5bde:	4d16      	ldr	r5, [pc, #88]	; (5c38 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    5be0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5be2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5c40 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5be6:	4f15      	ldr	r7, [pc, #84]	; (5c3c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5be8:	6831      	ldr	r1, [r6, #0]
    5bea:	4628      	mov	r0, r5
    5bec:	f7ff fd78 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5bf0:	b118      	cbz	r0, 5bfa <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    5bf2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5bf6:	05db      	lsls	r3, r3, #23
    5bf8:	d4d1      	bmi.n	5b9e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5bfa:	f001 fe9b 	bl	7934 <micros>
    5bfe:	1b00      	subs	r0, r0, r4
    5c00:	42b8      	cmp	r0, r7
    5c02:	d9f1      	bls.n	5be8 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    5c04:	4905      	ldr	r1, [pc, #20]	; (5c1c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5c06:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    5c08:	4b05      	ldr	r3, [pc, #20]	; (5c20 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5c0a:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5c0e:	2000      	movs	r0, #0
  m_errorCode = code;
    5c10:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5c12:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5c14:	e7c3      	b.n	5b9e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    5c16:	bf00      	nop
    5c18:	2001dd5c 	.word	0x2001dd5c
    5c1c:	20008d76 	.word	0x20008d76
    5c20:	2001db40 	.word	0x2001db40
    5c24:	2001f604 	.word	0x2001f604
    5c28:	201a0000 	.word	0x201a0000
    5c2c:	211a0000 	.word	0x211a0000
    5c30:	261b0000 	.word	0x261b0000
    5c34:	2001dd70 	.word	0x2001dd70
    5c38:	0d1a0000 	.word	0x0d1a0000
    5c3c:	000f4240 	.word	0x000f4240
    5c40:	402c0000 	.word	0x402c0000

00005c44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    5c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    5c48:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    5c4c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    5c4e:	bf18      	it	ne
    5c50:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    5c52:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    5c54:	9300      	str	r3, [sp, #0]
    5c56:	2b00      	cmp	r3, #0
    5c58:	bf08      	it	eq
    5c5a:	f044 0401 	orreq.w	r4, r4, #1
    5c5e:	b15c      	cbz	r4, 5c78 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    5c60:	4940      	ldr	r1, [pc, #256]	; (5d64 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    5c62:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5c64:	4b40      	ldr	r3, [pc, #256]	; (5d68 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    5c66:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    5c6a:	2400      	movs	r4, #0
  m_errorCode = code;
    5c6c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5c6e:	601a      	str	r2, [r3, #0]
}
    5c70:	4620      	mov	r0, r4
    5c72:	b003      	add	sp, #12
    5c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    5c78:	4b3c      	ldr	r3, [pc, #240]	; (5d6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    5c7a:	4615      	mov	r5, r2
    5c7c:	4a3c      	ldr	r2, [pc, #240]	; (5d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5c7e:	460e      	mov	r6, r1
    5c80:	f8df 910c 	ldr.w	r9, [pc, #268]	; 5d90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    5c84:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    5c86:	f001 fe55 	bl	7934 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5c8a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 5d94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    5c8e:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5c90:	f8df b104 	ldr.w	fp, [pc, #260]	; 5d98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c94:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 5d88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    5c98:	e006      	b.n	5ca8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c9a:	f001 fe4b 	bl	7934 <micros>
    5c9e:	1bc0      	subs	r0, r0, r7
    5ca0:	4550      	cmp	r0, sl
    5ca2:	d844      	bhi.n	5d2e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    5ca4:	f003 f950 	bl	8f48 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ca8:	f8d9 1000 	ldr.w	r1, [r9]
    5cac:	4640      	mov	r0, r8
    5cae:	f7ff fd17 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5cb2:	2800      	cmp	r0, #0
    5cb4:	d0f1      	beq.n	5c9a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    5cb6:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    5cba:	05da      	lsls	r2, r3, #23
    5cbc:	d5ed      	bpl.n	5c9a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5cbe:	9a00      	ldr	r2, [sp, #0]
    5cc0:	4b2c      	ldr	r3, [pc, #176]	; (5d74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    5cc2:	492b      	ldr	r1, [pc, #172]	; (5d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5cc4:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    5cc8:	2200      	movs	r2, #0
  m_dmaBusy = true;
    5cca:	4f2b      	ldr	r7, [pc, #172]	; (5d78 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    5ccc:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    5cd2:	2101      	movs	r1, #1
  m_irqstat = 0;
    5cd4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5d9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    5cd8:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    5cda:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    5cde:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5ce2:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5ce6:	4b25      	ldr	r3, [pc, #148]	; (5d7c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    5ce8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    5cec:	4b24      	ldr	r3, [pc, #144]	; (5d80 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    5cee:	781b      	ldrb	r3, [r3, #0]
    5cf0:	b343      	cbz	r3, 5d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    5cf2:	4631      	mov	r1, r6
    5cf4:	9801      	ldr	r0, [sp, #4]
    5cf6:	f7ff fcf3 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5cfa:	4681      	mov	r9, r0
    5cfc:	2800      	cmp	r0, #0
    5cfe:	d0b7      	beq.n	5c70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    5d00:	4b20      	ldr	r3, [pc, #128]	; (5d84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    5d02:	4a1b      	ldr	r2, [pc, #108]	; (5d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5d04:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    5d06:	f001 fe15 	bl	7934 <micros>
  return m_dmaBusy;
    5d0a:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    5d0c:	4605      	mov	r5, r0
  while (fcn()) {
    5d0e:	b1db      	cbz	r3, 5d48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d10:	4e1d      	ldr	r6, [pc, #116]	; (5d88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    5d12:	e003      	b.n	5d1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    5d14:	f003 f918 	bl	8f48 <yield>
  return m_dmaBusy;
    5d18:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    5d1a:	b1ab      	cbz	r3, 5d48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d1c:	f001 fe0a 	bl	7934 <micros>
    5d20:	1b40      	subs	r0, r0, r5
    5d22:	42b0      	cmp	r0, r6
    5d24:	d9f6      	bls.n	5d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    5d26:	2300      	movs	r3, #0
    5d28:	4a11      	ldr	r2, [pc, #68]	; (5d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5d2a:	6013      	str	r3, [r2, #0]
      return true;
    5d2c:	e7a0      	b.n	5c70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    5d2e:	4b0d      	ldr	r3, [pc, #52]	; (5d64 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    5d30:	220a      	movs	r2, #10
      m_busyFcn = 0;
    5d32:	2100      	movs	r1, #0
    5d34:	480e      	ldr	r0, [pc, #56]	; (5d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    5d36:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    5d38:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    5d3c:	4b0a      	ldr	r3, [pc, #40]	; (5d68 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    5d3e:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    5d40:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    5d42:	e795      	b.n	5c70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    5d44:	0276      	lsls	r6, r6, #9
    5d46:	e7d4      	b.n	5cf2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    5d48:	2300      	movs	r3, #0
    5d4a:	4a09      	ldr	r2, [pc, #36]	; (5d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5d4c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5d4e:	f8d8 3000 	ldr.w	r3, [r8]
    5d52:	079b      	lsls	r3, r3, #30
    5d54:	d58c      	bpl.n	5c70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    5d56:	f8d8 2000 	ldr.w	r2, [r8]
    5d5a:	4b0c      	ldr	r3, [pc, #48]	; (5d8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    5d5c:	421a      	tst	r2, r3
    5d5e:	bf08      	it	eq
    5d60:	464c      	moveq	r4, r9
    5d62:	e785      	b.n	5c70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    5d64:	20008d76 	.word	0x20008d76
    5d68:	2001db40 	.word	0x2001db40
    5d6c:	00005875 	.word	0x00005875
    5d70:	2001e214 	.word	0x2001e214
    5d74:	1fff0000 	.word	0x1fff0000
    5d78:	2001f606 	.word	0x2001f606
    5d7c:	117f0002 	.word	0x117f0002
    5d80:	2001f604 	.word	0x2001f604
    5d84:	000053c5 	.word	0x000053c5
    5d88:	000f4240 	.word	0x000f4240
    5d8c:	117f0000 	.word	0x117f0000
    5d90:	2001dd70 	.word	0x2001dd70
    5d94:	0d1a0000 	.word	0x0d1a0000
    5d98:	402c0000 	.word	0x402c0000
    5d9c:	2001e218 	.word	0x2001e218

00005da0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5da2:	4606      	mov	r6, r0
    5da4:	7a00      	ldrb	r0, [r0, #8]
    5da6:	460c      	mov	r4, r1
    5da8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5daa:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5dac:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5dae:	d413      	bmi.n	5dd8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    5db0:	b183      	cbz	r3, 5dd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5db2:	440f      	add	r7, r1
    5db4:	e001      	b.n	5dba <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    5db6:	42bc      	cmp	r4, r7
    5db8:	d00c      	beq.n	5dd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    5dba:	6833      	ldr	r3, [r6, #0]
    5dbc:	462a      	mov	r2, r5
    5dbe:	4621      	mov	r1, r4
    5dc0:	4630      	mov	r0, r6
    5dc2:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    5dc4:	3401      	adds	r4, #1
    5dc6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    5dca:	4798      	blx	r3
    5dcc:	2800      	cmp	r0, #0
    5dce:	d1f2      	bne.n	5db6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    5dd0:	2000      	movs	r0, #0
}
    5dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    5dd4:	2001      	movs	r0, #1
}
    5dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    5dd8:	0790      	lsls	r0, r2, #30
    5dda:	d012      	beq.n	5e02 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d0f9      	beq.n	5dd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5de0:	440f      	add	r7, r1
    5de2:	e001      	b.n	5de8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    5de4:	42bc      	cmp	r4, r7
    5de6:	d0f5      	beq.n	5dd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    5de8:	6833      	ldr	r3, [r6, #0]
    5dea:	462a      	mov	r2, r5
    5dec:	4621      	mov	r1, r4
    5dee:	4630      	mov	r0, r6
    5df0:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5df2:	3401      	adds	r4, #1
    5df4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    5df8:	4798      	blx	r3
    5dfa:	2800      	cmp	r0, #0
    5dfc:	d1f2      	bne.n	5de4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    5dfe:	2000      	movs	r0, #0
    5e00:	e7e7      	b.n	5dd2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    5e02:	4806      	ldr	r0, [pc, #24]	; (5e1c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    5e04:	f7ff ff1e 	bl	5c44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5e08:	2800      	cmp	r0, #0
    5e0a:	d1e3      	bne.n	5dd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    5e0c:	4904      	ldr	r1, [pc, #16]	; (5e20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    5e0e:	240c      	movs	r4, #12
  m_errorLine = line;
    5e10:	4b04      	ldr	r3, [pc, #16]	; (5e24 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    5e12:	f240 3282 	movw	r2, #898	; 0x382
  m_errorCode = code;
    5e16:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5e18:	601a      	str	r2, [r3, #0]
}
    5e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e1c:	123a0037 	.word	0x123a0037
    5e20:	20008d76 	.word	0x20008d76
    5e24:	2001db40 	.word	0x2001db40

00005e28 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e2a:	4606      	mov	r6, r0
    5e2c:	7a00      	ldrb	r0, [r0, #8]
    5e2e:	460c      	mov	r4, r1
    5e30:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5e32:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5e34:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5e36:	d413      	bmi.n	5e60 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    5e38:	b183      	cbz	r3, 5e5c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    5e3a:	440f      	add	r7, r1
    5e3c:	e001      	b.n	5e42 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    5e3e:	42bc      	cmp	r4, r7
    5e40:	d00c      	beq.n	5e5c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    5e42:	6833      	ldr	r3, [r6, #0]
    5e44:	462a      	mov	r2, r5
    5e46:	4621      	mov	r1, r4
    5e48:	4630      	mov	r0, r6
    5e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    5e4c:	3401      	adds	r4, #1
    5e4e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    5e52:	4798      	blx	r3
    5e54:	2800      	cmp	r0, #0
    5e56:	d1f2      	bne.n	5e3e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    5e58:	2000      	movs	r0, #0
}
    5e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    5e5c:	2001      	movs	r0, #1
}
    5e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    5e60:	0790      	lsls	r0, r2, #30
    5e62:	d012      	beq.n	5e8a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    5e64:	2b00      	cmp	r3, #0
    5e66:	d0f9      	beq.n	5e5c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    5e68:	440f      	add	r7, r1
    5e6a:	e001      	b.n	5e70 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    5e6c:	42bc      	cmp	r4, r7
    5e6e:	d0f5      	beq.n	5e5c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    5e70:	6833      	ldr	r3, [r6, #0]
    5e72:	462a      	mov	r2, r5
    5e74:	4621      	mov	r1, r4
    5e76:	4630      	mov	r0, r6
    5e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    5e7a:	3401      	adds	r4, #1
    5e7c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    5e80:	4798      	blx	r3
    5e82:	2800      	cmp	r0, #0
    5e84:	d1f2      	bne.n	5e6c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    5e86:	2000      	movs	r0, #0
    5e88:	e7e7      	b.n	5e5a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    5e8a:	4806      	ldr	r0, [pc, #24]	; (5ea4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    5e8c:	f7ff feda 	bl	5c44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5e90:	2800      	cmp	r0, #0
    5e92:	d1e3      	bne.n	5e5c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    5e94:	4904      	ldr	r1, [pc, #16]	; (5ea8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    5e96:	240e      	movs	r4, #14
  m_errorLine = line;
    5e98:	4b04      	ldr	r3, [pc, #16]	; (5eac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    5e9a:	f240 421e 	movw	r2, #1054	; 0x41e
  m_errorCode = code;
    5e9e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ea0:	601a      	str	r2, [r3, #0]
}
    5ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ea4:	193a0027 	.word	0x193a0027
    5ea8:	20008d76 	.word	0x20008d76
    5eac:	2001db40 	.word	0x2001db40

00005eb0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    5eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5eb4:	4ba8      	ldr	r3, [pc, #672]	; (6158 <SdioCard::begin(SdioConfig)+0x2a8>)
  m_curState = IDLE_STATE;
    5eb6:	2200      	movs	r2, #0
  m_initDone = false;
    5eb8:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 61b8 <SdioCard::begin(SdioConfig)+0x308>
bool SdioCard::begin(SdioConfig sdioConfig) {
    5ebc:	b091      	sub	sp, #68	; 0x44
  m_errorCode = SD_CARD_ERROR_NONE;
    5ebe:	4da7      	ldr	r5, [pc, #668]	; (615c <SdioCard::begin(SdioConfig)+0x2ac>)
  m_highCapacity = false;
    5ec0:	4fa7      	ldr	r7, [pc, #668]	; (6160 <SdioCard::begin(SdioConfig)+0x2b0>)
  m_version2 = false;
    5ec2:	4ea8      	ldr	r6, [pc, #672]	; (6164 <SdioCard::begin(SdioConfig)+0x2b4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    5ec4:	702a      	strb	r2, [r5, #0]
  m_curState = IDLE_STATE;
    5ec6:	7242      	strb	r2, [r0, #9]
  m_initDone = false;
    5ec8:	f888 2000 	strb.w	r2, [r8]
  m_highCapacity = false;
    5ecc:	703a      	strb	r2, [r7, #0]
  m_version2 = false;
    5ece:	7032      	strb	r2, [r6, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5ed0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    5ed4:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5ed6:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    5edc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 6180 <SdioCard::begin(SdioConfig)+0x2d0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5ee0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    5ee4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    5ee8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    5eec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    5ef0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    5ef4:	f042 0218 	orr.w	r2, r2, #24
    5ef8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    5efc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    5f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5f04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    5f08:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5f0c:	4a96      	ldr	r2, [pc, #600]	; (6168 <SdioCard::begin(SdioConfig)+0x2b8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    5f0e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    5f12:	f040 000c 	orr.w	r0, r0, #12
    5f16:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    5f1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5f1c:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    5f20:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    5f22:	69d8      	ldr	r0, [r3, #28]
    5f24:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    5f28:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    5f2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5f2c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5f30:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5f32:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    5f36:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    5f3a:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    5f3e:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    5f42:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    5f46:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    5f4a:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5f4e:	4b87      	ldr	r3, [pc, #540]	; (616c <SdioCard::begin(SdioConfig)+0x2bc>)
  SDHC_MIX_CTRL |= 0x80000000;
    5f50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5f54:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5f58:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    5f5c:	4313      	orrs	r3, r2
    5f5e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    5f62:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
    5f66:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    5f6a:	d1fa      	bne.n	5f62 <SdioCard::begin(SdioConfig)+0xb2>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    5f6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5f70:	f7ff fa2e 	bl	53d0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5f74:	4b7c      	ldr	r3, [pc, #496]	; (6168 <SdioCard::begin(SdioConfig)+0x2b8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5f76:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    5f7a:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5f7e:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    5f82:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    5f86:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    5f8a:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    5f8e:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    5f92:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5f96:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    5f9a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    5f9e:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    5fa2:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    5fa6:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    5faa:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    5fae:	4b70      	ldr	r3, [pc, #448]	; (6170 <SdioCard::begin(SdioConfig)+0x2c0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    5fb0:	4a70      	ldr	r2, [pc, #448]	; (6174 <SdioCard::begin(SdioConfig)+0x2c4>)
    5fb2:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
    5fb6:	4b70      	ldr	r3, [pc, #448]	; (6178 <SdioCard::begin(SdioConfig)+0x2c8>)
    5fb8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    5fbc:	4b6f      	ldr	r3, [pc, #444]	; (617c <SdioCard::begin(SdioConfig)+0x2cc>)
    5fbe:	2260      	movs	r2, #96	; 0x60
    5fc0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    5fc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5fc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5fcc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    5fd0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    5fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    5fd8:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    5fdc:	4b68      	ldr	r3, [pc, #416]	; (6180 <SdioCard::begin(SdioConfig)+0x2d0>)
    5fde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5fe0:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    5fe4:	d1fb      	bne.n	5fde <SdioCard::begin(SdioConfig)+0x12e>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    5fe6:	4608      	mov	r0, r1
    5fe8:	f7ff fb7a 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    5fec:	4604      	mov	r4, r0
    5fee:	b948      	cbnz	r0, 6004 <SdioCard::begin(SdioConfig)+0x154>
  m_errorCode = code;
    5ff0:	2101      	movs	r1, #1
  m_errorLine = line;
    5ff2:	4b64      	ldr	r3, [pc, #400]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    5ff4:	f240 228e 	movw	r2, #654	; 0x28e
  m_errorCode = code;
    5ff8:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    5ffa:	601a      	str	r2, [r3, #0]
}
    5ffc:	4620      	mov	r0, r4
    5ffe:	b011      	add	sp, #68	; 0x44
    6000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6004:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6006:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 61bc <SdioCard::begin(SdioConfig)+0x30c>
    600a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    600e:	4648      	mov	r0, r9
    6010:	f7ff fb66 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6014:	2800      	cmp	r0, #0
    6016:	d144      	bne.n	60a2 <SdioCard::begin(SdioConfig)+0x1f2>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6018:	3c01      	subs	r4, #1
    601a:	d1f6      	bne.n	600a <SdioCard::begin(SdioConfig)+0x15a>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    601c:	7832      	ldrb	r2, [r6, #0]
    601e:	4b5a      	ldr	r3, [pc, #360]	; (6188 <SdioCard::begin(SdioConfig)+0x2d8>)
    6020:	2a00      	cmp	r2, #0
    6022:	bf14      	ite	ne
    6024:	469a      	movne	sl, r3
    6026:	f44f 1a40 	moveq.w	sl, #3145728	; 0x300000
  int m = micros();
    602a:	f001 fc83 	bl	7934 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    602e:	4e57      	ldr	r6, [pc, #348]	; (618c <SdioCard::begin(SdioConfig)+0x2dc>)
  int m = micros();
    6030:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6032:	f8df b18c 	ldr.w	fp, [pc, #396]	; 61c0 <SdioCard::begin(SdioConfig)+0x310>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6036:	f8df 918c 	ldr.w	r9, [pc, #396]	; 61c4 <SdioCard::begin(SdioConfig)+0x314>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    603a:	2100      	movs	r1, #0
    603c:	4630      	mov	r0, r6
    603e:	f7ff fb4f 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6042:	b950      	cbnz	r0, 605a <SdioCard::begin(SdioConfig)+0x1aa>
      return sdError(SD_CARD_ERROR_ACMD41);
    6044:	2400      	movs	r4, #0
  m_errorCode = code;
    6046:	2117      	movs	r1, #23
  m_errorLine = line;
    6048:	4b4e      	ldr	r3, [pc, #312]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    604a:	f240 229f 	movw	r2, #671	; 0x29f
}
    604e:	4620      	mov	r0, r4
  m_errorCode = code;
    6050:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6052:	601a      	str	r2, [r3, #0]
}
    6054:	b011      	add	sp, #68	; 0x44
    6056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    605a:	4651      	mov	r1, sl
    605c:	4658      	mov	r0, fp
    605e:	f7ff fb3f 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6062:	2800      	cmp	r0, #0
    6064:	d0ee      	beq.n	6044 <SdioCard::begin(SdioConfig)+0x194>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6066:	f001 fc65 	bl	7934 <micros>
    606a:	1b00      	subs	r0, r0, r4
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    606c:	4b44      	ldr	r3, [pc, #272]	; (6180 <SdioCard::begin(SdioConfig)+0x2d0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    606e:	4548      	cmp	r0, r9
    6070:	d8e8      	bhi.n	6044 <SdioCard::begin(SdioConfig)+0x194>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6072:	691a      	ldr	r2, [r3, #16]
    6074:	2a00      	cmp	r2, #0
    6076:	dae0      	bge.n	603a <SdioCard::begin(SdioConfig)+0x18a>
  m_ocr = SDHC_CMDRSP0;
    6078:	6919      	ldr	r1, [r3, #16]
    607a:	4a45      	ldr	r2, [pc, #276]	; (6190 <SdioCard::begin(SdioConfig)+0x2e0>)
    607c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    607e:	691b      	ldr	r3, [r3, #16]
    6080:	005a      	lsls	r2, r3, #1
    6082:	d501      	bpl.n	6088 <SdioCard::begin(SdioConfig)+0x1d8>
    m_highCapacity = true;
    6084:	2301      	movs	r3, #1
    6086:	703b      	strb	r3, [r7, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6088:	2100      	movs	r1, #0
    608a:	4842      	ldr	r0, [pc, #264]	; (6194 <SdioCard::begin(SdioConfig)+0x2e4>)
    608c:	f7ff fb28 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6090:	4604      	mov	r4, r0
    6092:	b9c0      	cbnz	r0, 60c6 <SdioCard::begin(SdioConfig)+0x216>
  m_errorCode = code;
    6094:	2102      	movs	r1, #2
  m_errorLine = line;
    6096:	4b3b      	ldr	r3, [pc, #236]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    6098:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    609c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    609e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    60a0:	e7ac      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
      if (SDHC_CMDRSP0 != 0X1AA) {
    60a2:	4b37      	ldr	r3, [pc, #220]	; (6180 <SdioCard::begin(SdioConfig)+0x2d0>)
    60a4:	691b      	ldr	r3, [r3, #16]
    60a6:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    60aa:	d007      	beq.n	60bc <SdioCard::begin(SdioConfig)+0x20c>
  m_errorCode = code;
    60ac:	2106      	movs	r1, #6
  m_errorLine = line;
    60ae:	4b35      	ldr	r3, [pc, #212]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    60b0:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    60b4:	2400      	movs	r4, #0
  m_errorCode = code;
    60b6:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    60b8:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    60ba:	e79f      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
      m_version2 = true;
    60bc:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    60be:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 6188 <SdioCard::begin(SdioConfig)+0x2d8>
      m_version2 = true;
    60c2:	7033      	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    60c4:	e7b1      	b.n	602a <SdioCard::begin(SdioConfig)+0x17a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    60c6:	2100      	movs	r1, #0
    60c8:	4833      	ldr	r0, [pc, #204]	; (6198 <SdioCard::begin(SdioConfig)+0x2e8>)
    60ca:	f7ff fb09 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    60ce:	4604      	mov	r4, r0
    60d0:	b930      	cbnz	r0, 60e0 <SdioCard::begin(SdioConfig)+0x230>
  m_errorCode = code;
    60d2:	2103      	movs	r1, #3
  m_errorLine = line;
    60d4:	4b2b      	ldr	r3, [pc, #172]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    60d6:	f240 22ab 	movw	r2, #683	; 0x2ab
  m_errorCode = code;
    60da:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    60dc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    60de:	e78d      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    60e0:	4e27      	ldr	r6, [pc, #156]	; (6180 <SdioCard::begin(SdioConfig)+0x2d0>)
    60e2:	4b2e      	ldr	r3, [pc, #184]	; (619c <SdioCard::begin(SdioConfig)+0x2ec>)
    60e4:	6932      	ldr	r2, [r6, #16]
    60e6:	4f2e      	ldr	r7, [pc, #184]	; (61a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    60e8:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    60ea:	492e      	ldr	r1, [pc, #184]	; (61a4 <SdioCard::begin(SdioConfig)+0x2f4>)
    60ec:	482e      	ldr	r0, [pc, #184]	; (61a8 <SdioCard::begin(SdioConfig)+0x2f8>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    60ee:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    60f0:	f7ff fb42 	bl	5778 <readReg16(unsigned long, void*)>
    60f4:	4604      	mov	r4, r0
    60f6:	b930      	cbnz	r0, 6106 <SdioCard::begin(SdioConfig)+0x256>
  m_errorCode = code;
    60f8:	2107      	movs	r1, #7
  m_errorLine = line;
    60fa:	4b22      	ldr	r3, [pc, #136]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    60fc:	f44f 722c 	mov.w	r2, #688	; 0x2b0
  m_errorCode = code;
    6100:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6102:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    6104:	e77a      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    6106:	4929      	ldr	r1, [pc, #164]	; (61ac <SdioCard::begin(SdioConfig)+0x2fc>)
    6108:	4829      	ldr	r0, [pc, #164]	; (61b0 <SdioCard::begin(SdioConfig)+0x300>)
    610a:	f7ff fb35 	bl	5778 <readReg16(unsigned long, void*)>
    610e:	4604      	mov	r4, r0
    6110:	b930      	cbnz	r0, 6120 <SdioCard::begin(SdioConfig)+0x270>
  m_errorCode = code;
    6112:	2108      	movs	r1, #8
  m_errorLine = line;
    6114:	4b1b      	ldr	r3, [pc, #108]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    6116:	f240 22b3 	movw	r2, #691	; 0x2b3
  m_errorCode = code;
    611a:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    611c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    611e:	e76d      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6120:	6839      	ldr	r1, [r7, #0]
    6122:	4824      	ldr	r0, [pc, #144]	; (61b4 <SdioCard::begin(SdioConfig)+0x304>)
    6124:	f7ff fadc 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6128:	4604      	mov	r4, r0
    612a:	b930      	cbnz	r0, 613a <SdioCard::begin(SdioConfig)+0x28a>
  m_errorCode = code;
    612c:	2105      	movs	r1, #5
  m_errorLine = line;
    612e:	4b15      	ldr	r3, [pc, #84]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    6130:	f240 22b6 	movw	r2, #694	; 0x2b6
  m_errorCode = code;
    6134:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6136:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    6138:	e760      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    613a:	6839      	ldr	r1, [r7, #0]
    613c:	4813      	ldr	r0, [pc, #76]	; (618c <SdioCard::begin(SdioConfig)+0x2dc>)
    613e:	f7ff facf 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6142:	2800      	cmp	r0, #0
    6144:	d140      	bne.n	61c8 <SdioCard::begin(SdioConfig)+0x318>
  m_errorCode = code;
    6146:	2114      	movs	r1, #20
  m_errorLine = line;
    6148:	4b0e      	ldr	r3, [pc, #56]	; (6184 <SdioCard::begin(SdioConfig)+0x2d4>)
    614a:	f240 22ba 	movw	r2, #698	; 0x2ba
    return sdError(SD_CARD_ERROR_ACMD6);
    614e:	2400      	movs	r4, #0
  m_errorCode = code;
    6150:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6152:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    6154:	e752      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
    6156:	bf00      	nop
    6158:	400d8000 	.word	0x400d8000
    615c:	20008d76 	.word	0x20008d76
    6160:	2001f604 	.word	0x2001f604
    6164:	2001f603 	.word	0x2001f603
    6168:	401f8000 	.word	0x401f8000
    616c:	01008000 	.word	0x01008000
    6170:	117f000b 	.word	0x117f000b
    6174:	00005381 	.word	0x00005381
    6178:	20009000 	.word	0x20009000
    617c:	e000e400 	.word	0xe000e400
    6180:	402c0000 	.word	0x402c0000
    6184:	2001db40 	.word	0x2001db40
    6188:	40300000 	.word	0x40300000
    618c:	371a0000 	.word	0x371a0000
    6190:	2001dd6c 	.word	0x2001dd6c
    6194:	02090000 	.word	0x02090000
    6198:	031a0000 	.word	0x031a0000
    619c:	ffff0000 	.word	0xffff0000
    61a0:	2001dd70 	.word	0x2001dd70
    61a4:	2001dd5c 	.word	0x2001dd5c
    61a8:	09090000 	.word	0x09090000
    61ac:	2001dd4c 	.word	0x2001dd4c
    61b0:	0a090000 	.word	0x0a090000
    61b4:	071b0000 	.word	0x071b0000
    61b8:	2001f602 	.word	0x2001f602
    61bc:	081a0000 	.word	0x081a0000
    61c0:	29020000 	.word	0x29020000
    61c4:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    61c8:	2102      	movs	r1, #2
    61ca:	482e      	ldr	r0, [pc, #184]	; (6284 <SdioCard::begin(SdioConfig)+0x3d4>)
    61cc:	f7ff fa88 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    61d0:	4604      	mov	r4, r0
    61d2:	2800      	cmp	r0, #0
    61d4:	d0b7      	beq.n	6146 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    61d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    61d8:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    61dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    61e0:	4669      	mov	r1, sp
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    61e2:	f023 0306 	bic.w	r3, r3, #6
    61e6:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    61e8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    61ea:	f043 0302 	orr.w	r3, r3, #2
    61ee:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    61f0:	6472      	str	r2, [r6, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    61f2:	f7ff fc1b 	bl	5a2c <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    61f6:	b118      	cbz	r0, 6200 <SdioCard::begin(SdioConfig)+0x350>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    61f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    61fc:	079b      	lsls	r3, r3, #30
    61fe:	d432      	bmi.n	6266 <SdioCard::begin(SdioConfig)+0x3b6>
    kHzSdClk = 25000;
    6200:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6204:	4d20      	ldr	r5, [pc, #128]	; (6288 <SdioCard::begin(SdioConfig)+0x3d8>)
    6206:	2305      	movs	r3, #5
    6208:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    620c:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6210:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6214:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6218:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    621c:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    6220:	f7ff f8d6 	bl	53d0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6224:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6226:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    622a:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    622e:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6232:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6236:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    623a:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    623e:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6242:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6246:	f8c5 23bc 	str.w	r2, [r5, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    624a:	f8c5 23c0 	str.w	r2, [r5, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    624e:	f8c5 23ac 	str.w	r2, [r5, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6252:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
  m_initDone = true;
    6256:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6258:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    625c:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
  m_initDone = true;
    6260:	f888 3000 	strb.w	r3, [r8]
  return true;
    6264:	e6ca      	b.n	5ffc <SdioCard::begin(SdioConfig)+0x14c>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6266:	4669      	mov	r1, sp
    6268:	4808      	ldr	r0, [pc, #32]	; (628c <SdioCard::begin(SdioConfig)+0x3dc>)
    626a:	f7ff fbdf 	bl	5a2c <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    626e:	2800      	cmp	r0, #0
    6270:	d0c6      	beq.n	6200 <SdioCard::begin(SdioConfig)+0x350>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6272:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6276:	f003 030f 	and.w	r3, r3, #15
    627a:	2b01      	cmp	r3, #1
    627c:	d1c0      	bne.n	6200 <SdioCard::begin(SdioConfig)+0x350>
    kHzSdClk = 50000;
    627e:	f24c 3050 	movw	r0, #50000	; 0xc350
    6282:	e7bf      	b.n	6204 <SdioCard::begin(SdioConfig)+0x354>
    6284:	061a0000 	.word	0x061a0000
    6288:	401f8000 	.word	0x401f8000
    628c:	80fffff1 	.word	0x80fffff1

00006290 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6290:	4b37      	ldr	r3, [pc, #220]	; (6370 <SdioCard::readData(unsigned char*)+0xe0>)
    6292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6294:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    6296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    629a:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    629c:	d40d      	bmi.n	62ba <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    629e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    62a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    62a4:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    62a6:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    62a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    62aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    62ae:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    62b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    62b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    62b6:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    62b8:	b662      	cpsie	i
  uint32_t m = micros();
    62ba:	f001 fb3b 	bl	7934 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    62be:	4e2c      	ldr	r6, [pc, #176]	; (6370 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    62c0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6388 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    62c4:	4605      	mov	r5, r0
  while (fcn()) {
    62c6:	e004      	b.n	62d2 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    62c8:	f001 fb34 	bl	7934 <micros>
    62cc:	1b43      	subs	r3, r0, r5
    62ce:	4543      	cmp	r3, r8
    62d0:	d837      	bhi.n	6342 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    62d2:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    62d4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    62d8:	d0f6      	beq.n	62c8 <SdioCard::readData(unsigned char*)+0x38>
    62da:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    62de:	4824      	ldr	r0, [pc, #144]	; (6370 <SdioCard::readData(unsigned char*)+0xe0>)
    62e0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    62e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    62e6:	051b      	lsls	r3, r3, #20
    62e8:	d5fc      	bpl.n	62e4 <SdioCard::readData(unsigned char*)+0x54>
    62ea:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    62ee:	6a02      	ldr	r2, [r0, #32]
    62f0:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    62f4:	459c      	cmp	ip, r3
    62f6:	d1fa      	bne.n	62ee <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    62f8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    62fc:	4567      	cmp	r7, ip
    62fe:	d1f1      	bne.n	62e4 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    6300:	f001 fb18 	bl	7934 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6304:	4f1a      	ldr	r7, [pc, #104]	; (6370 <SdioCard::readData(unsigned char*)+0xe0>)
    6306:	4d1b      	ldr	r5, [pc, #108]	; (6374 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    6308:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    630a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6388 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    630e:	e004      	b.n	631a <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6310:	f001 fb10 	bl	7934 <micros>
    6314:	1b83      	subs	r3, r0, r6
    6316:	4543      	cmp	r3, r8
    6318:	d81d      	bhi.n	6356 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    631a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    631c:	402c      	ands	r4, r5
    631e:	d0f7      	beq.n	6310 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6322:	4a15      	ldr	r2, [pc, #84]	; (6378 <SdioCard::readData(unsigned char*)+0xe8>)
    6324:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    6326:	6813      	ldr	r3, [r2, #0]
    6328:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    632a:	6813      	ldr	r3, [r2, #0]
    632c:	f013 0302 	ands.w	r3, r3, #2
    6330:	d01b      	beq.n	636a <SdioCard::readData(unsigned char*)+0xda>
    6332:	6812      	ldr	r2, [r2, #0]
    6334:	4b11      	ldr	r3, [pc, #68]	; (637c <SdioCard::readData(unsigned char*)+0xec>)
    6336:	421a      	tst	r2, r3
    6338:	bf0c      	ite	eq
    633a:	2001      	moveq	r0, #1
    633c:	2000      	movne	r0, #0
}
    633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6342:	490f      	ldr	r1, [pc, #60]	; (6380 <SdioCard::readData(unsigned char*)+0xf0>)
    6344:	251a      	movs	r5, #26
  m_errorLine = line;
    6346:	4b0f      	ldr	r3, [pc, #60]	; (6384 <SdioCard::readData(unsigned char*)+0xf4>)
    6348:	f240 3237 	movw	r2, #823	; 0x337
    return sdError(SD_CARD_ERROR_READ_FIFO);
    634c:	4620      	mov	r0, r4
  m_errorCode = code;
    634e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6350:	601a      	str	r2, [r3, #0]
}
    6352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6356:	490a      	ldr	r1, [pc, #40]	; (6380 <SdioCard::readData(unsigned char*)+0xf0>)
    6358:	251d      	movs	r5, #29
  m_errorLine = line;
    635a:	4b0a      	ldr	r3, [pc, #40]	; (6384 <SdioCard::readData(unsigned char*)+0xf4>)
    635c:	f240 3242 	movw	r2, #834	; 0x342
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    6360:	4620      	mov	r0, r4
  m_errorCode = code;
    6362:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6364:	601a      	str	r2, [r3, #0]
}
    6366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    636a:	4618      	mov	r0, r3
}
    636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6370:	402c0000 	.word	0x402c0000
    6374:	117f0002 	.word	0x117f0002
    6378:	2001e218 	.word	0x2001e218
    637c:	117f0000 	.word	0x117f0000
    6380:	20008d76 	.word	0x20008d76
    6384:	2001db40 	.word	0x2001db40
    6388:	000f4240 	.word	0x000f4240

0000638c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    6390:	4b29      	ldr	r3, [pc, #164]	; (6438 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    6392:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    6394:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6458 <SdioCard::readStart(unsigned long)+0xcc>
    6398:	4e28      	ldr	r6, [pc, #160]	; (643c <SdioCard::readStart(unsigned long)+0xb0>)
    639a:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    639e:	f001 fac9 	bl	7934 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    63a2:	4d27      	ldr	r5, [pc, #156]	; (6440 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    63a4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    63a6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 645c <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    63aa:	4f26      	ldr	r7, [pc, #152]	; (6444 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    63ac:	e006      	b.n	63bc <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    63ae:	f001 fac1 	bl	7934 <micros>
    63b2:	1b00      	subs	r0, r0, r4
    63b4:	42b8      	cmp	r0, r7
    63b6:	d829      	bhi.n	640c <SdioCard::readStart(unsigned long)+0x80>
    yield();
    63b8:	f002 fdc6 	bl	8f48 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    63bc:	6831      	ldr	r1, [r6, #0]
    63be:	4628      	mov	r0, r5
    63c0:	f7ff f98e 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    63c4:	2800      	cmp	r0, #0
    63c6:	d0f2      	beq.n	63ae <SdioCard::readStart(unsigned long)+0x22>
    63c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    63cc:	05db      	lsls	r3, r3, #23
    63ce:	d5ee      	bpl.n	63ae <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    63d0:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    63d2:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    63d6:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    63da:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    63de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    63e2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    63e6:	4b18      	ldr	r3, [pc, #96]	; (6448 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    63e8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    63ec:	781b      	ldrb	r3, [r3, #0]
    63ee:	b1cb      	cbz	r3, 6424 <SdioCard::readStart(unsigned long)+0x98>
    63f0:	4649      	mov	r1, r9
    63f2:	4816      	ldr	r0, [pc, #88]	; (644c <SdioCard::readStart(unsigned long)+0xc0>)
    63f4:	f7ff f974 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    63f8:	b930      	cbnz	r0, 6408 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    63fa:	4915      	ldr	r1, [pc, #84]	; (6450 <SdioCard::readStart(unsigned long)+0xc4>)
    63fc:	240c      	movs	r4, #12
  m_errorLine = line;
    63fe:	4b15      	ldr	r3, [pc, #84]	; (6454 <SdioCard::readStart(unsigned long)+0xc8>)
    6400:	f240 329e 	movw	r2, #926	; 0x39e
  m_errorCode = code;
    6404:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6406:	601a      	str	r2, [r3, #0]
}
    6408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    640c:	4a10      	ldr	r2, [pc, #64]	; (6450 <SdioCard::readStart(unsigned long)+0xc4>)
    640e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6410:	2000      	movs	r0, #0
  m_errorLine = line;
    6412:	4b10      	ldr	r3, [pc, #64]	; (6454 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6414:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6416:	f240 3292 	movw	r2, #914	; 0x392
      m_busyFcn = 0;
    641a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    641e:	601a      	str	r2, [r3, #0]
}
    6420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6424:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6428:	4808      	ldr	r0, [pc, #32]	; (644c <SdioCard::readStart(unsigned long)+0xc0>)
    642a:	4649      	mov	r1, r9
    642c:	f7ff f958 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    6430:	2800      	cmp	r0, #0
    6432:	d1e9      	bne.n	6408 <SdioCard::readStart(unsigned long)+0x7c>
    6434:	e7e1      	b.n	63fa <SdioCard::readStart(unsigned long)+0x6e>
    6436:	bf00      	nop
    6438:	00005875 	.word	0x00005875
    643c:	2001dd70 	.word	0x2001dd70
    6440:	0d1a0000 	.word	0x0d1a0000
    6444:	000f4240 	.word	0x000f4240
    6448:	2001f604 	.word	0x2001f604
    644c:	123a0030 	.word	0x123a0030
    6450:	20008d76 	.word	0x20008d76
    6454:	2001db40 	.word	0x2001db40
    6458:	2001e214 	.word	0x2001e214
    645c:	402c0000 	.word	0x402c0000

00006460 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6464:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6466:	4c1d      	ldr	r4, [pc, #116]	; (64dc <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6468:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    646a:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    646c:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    646e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6470:	481b      	ldr	r0, [pc, #108]	; (64e0 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6476:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6478:	f7ff f932 	bl	56e0 <cardCommand(unsigned long, unsigned long)>
    647c:	b940      	cbnz	r0, 6490 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    647e:	4919      	ldr	r1, [pc, #100]	; (64e4 <SdioCard::stopTransmission(bool)+0x84>)
    6480:	2409      	movs	r4, #9
  m_errorLine = line;
    6482:	4b19      	ldr	r3, [pc, #100]	; (64e8 <SdioCard::stopTransmission(bool)+0x88>)
    6484:	f44f 726d 	mov.w	r2, #948	; 0x3b4
  m_errorCode = code;
    6488:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    648a:	601a      	str	r2, [r3, #0]
}
    648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    6490:	2d00      	cmp	r5, #0
    6492:	d0fb      	beq.n	648c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    6494:	4b15      	ldr	r3, [pc, #84]	; (64ec <SdioCard::stopTransmission(bool)+0x8c>)
    6496:	4e16      	ldr	r6, [pc, #88]	; (64f0 <SdioCard::stopTransmission(bool)+0x90>)
    6498:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    649a:	f001 fa4b 	bl	7934 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    649e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    64a0:	4607      	mov	r7, r0
  while (fcn()) {
    64a2:	01da      	lsls	r2, r3, #7
    64a4:	d416      	bmi.n	64d4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    64a6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 64f4 <SdioCard::stopTransmission(bool)+0x94>
    64aa:	e004      	b.n	64b6 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    64ac:	f002 fd4c 	bl	8f48 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    64b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    64b2:	01db      	lsls	r3, r3, #7
    64b4:	d40e      	bmi.n	64d4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    64b6:	f001 fa3d 	bl	7934 <micros>
    64ba:	1bc0      	subs	r0, r0, r7
    64bc:	4540      	cmp	r0, r8
    64be:	d9f5      	bls.n	64ac <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    64c0:	4a08      	ldr	r2, [pc, #32]	; (64e4 <SdioCard::stopTransmission(bool)+0x84>)
    64c2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    64c4:	2000      	movs	r0, #0
  m_errorLine = line;
    64c6:	4b08      	ldr	r3, [pc, #32]	; (64e8 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    64c8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    64ca:	f44f 726e 	mov.w	r2, #952	; 0x3b8
      m_busyFcn = 0;
    64ce:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    64d0:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    64d2:	e7db      	b.n	648c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    64d4:	2300      	movs	r3, #0
  return true;
    64d6:	4628      	mov	r0, r5
  m_busyFcn = 0;
    64d8:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    64da:	e7d7      	b.n	648c <SdioCard::stopTransmission(bool)+0x2c>
    64dc:	402c0000 	.word	0x402c0000
    64e0:	0cdb0000 	.word	0x0cdb0000
    64e4:	20008d76 	.word	0x20008d76
    64e8:	2001db40 	.word	0x2001db40
    64ec:	000053b1 	.word	0x000053b1
    64f0:	2001e214 	.word	0x2001e214
    64f4:	000f4240 	.word	0x000f4240

000064f8 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    64f8:	4b0a      	ldr	r3, [pc, #40]	; (6524 <SdioCard::syncDevice()+0x2c>)
    64fa:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    64fc:	b510      	push	{r4, lr}
    64fe:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6500:	b91b      	cbnz	r3, 650a <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6502:	7a63      	ldrb	r3, [r4, #9]
    6504:	b943      	cbnz	r3, 6518 <SdioCard::syncDevice()+0x20>
  return true;
    6506:	2001      	movs	r0, #1
}
    6508:	bd10      	pop	{r4, pc}
    650a:	f7ff f84b 	bl	55a4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    650e:	2800      	cmp	r0, #0
    6510:	d0fa      	beq.n	6508 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6512:	7a63      	ldrb	r3, [r4, #9]
    6514:	2b00      	cmp	r3, #0
    6516:	d0f6      	beq.n	6506 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6518:	4620      	mov	r0, r4
    651a:	2101      	movs	r1, #1
}
    651c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6520:	f7ff bf9e 	b.w	6460 <SdioCard::stopTransmission(bool)>
    6524:	2001f605 	.word	0x2001f605

00006528 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    652c:	4604      	mov	r4, r0
    652e:	7a00      	ldrb	r0, [r0, #8]
    6530:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6534:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6536:	f010 0501 	ands.w	r5, r0, #1
    653a:	d013      	beq.n	6564 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    653c:	0793      	lsls	r3, r2, #30
    653e:	d03c      	beq.n	65ba <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6540:	2301      	movs	r3, #1
    6542:	4838      	ldr	r0, [pc, #224]	; (6624 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6544:	466a      	mov	r2, sp
    6546:	f7ff fb7d 	bl	5c44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    654a:	2800      	cmp	r0, #0
    654c:	d03a      	beq.n	65c4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    654e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6552:	4669      	mov	r1, sp
    6554:	4630      	mov	r0, r6
    6556:	f001 fa81 	bl	7a5c <memcpy>
}
    655a:	4628      	mov	r0, r5
    655c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6564:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6634 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6568:	460f      	mov	r7, r1
    656a:	f898 3000 	ldrb.w	r3, [r8]
    656e:	2b00      	cmp	r3, #0
    6570:	d135      	bne.n	65de <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6572:	7a63      	ldrb	r3, [r4, #9]
    6574:	2b01      	cmp	r3, #1
    6576:	d039      	beq.n	65ec <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6578:	6822      	ldr	r2, [r4, #0]
    657a:	492b      	ldr	r1, [pc, #172]	; (6628 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    657c:	6a12      	ldr	r2, [r2, #32]
    657e:	428a      	cmp	r2, r1
    6580:	d14a      	bne.n	6618 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6582:	f898 2000 	ldrb.w	r2, [r8]
    6586:	2a00      	cmp	r2, #0
    6588:	d134      	bne.n	65f4 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    658a:	2b00      	cmp	r3, #0
    658c:	d139      	bne.n	6602 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    658e:	4639      	mov	r1, r7
    6590:	4620      	mov	r0, r4
    6592:	f7ff fefb 	bl	638c <SdioCard::readStart(unsigned long)>
    6596:	b1e8      	cbz	r0, 65d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6598:	2301      	movs	r3, #1
      m_curSector = sector;
    659a:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    659c:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    659e:	4631      	mov	r1, r6
    65a0:	4620      	mov	r0, r4
    65a2:	f7ff fe75 	bl	6290 <SdioCard::readData(unsigned char*)>
    65a6:	b1a8      	cbz	r0, 65d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    65a8:	6863      	ldr	r3, [r4, #4]
  return true;
    65aa:	4605      	mov	r5, r0
    m_curSector++;
    65ac:	3301      	adds	r3, #1
}
    65ae:	4628      	mov	r0, r5
    m_curSector++;
    65b0:	6063      	str	r3, [r4, #4]
}
    65b2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    65b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    65ba:	2301      	movs	r3, #1
    65bc:	4819      	ldr	r0, [pc, #100]	; (6624 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    65be:	f7ff fb41 	bl	5c44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    65c2:	b938      	cbnz	r0, 65d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    65c4:	4919      	ldr	r1, [pc, #100]	; (662c <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    65c6:	200b      	movs	r0, #11
  m_errorLine = line;
    65c8:	4b19      	ldr	r3, [pc, #100]	; (6630 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    65ca:	f240 3255 	movw	r2, #853	; 0x355
      return sdError(SD_CARD_ERROR_CMD17);
    65ce:	2500      	movs	r5, #0
  m_errorCode = code;
    65d0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    65d2:	601a      	str	r2, [r3, #0]
}
    65d4:	4628      	mov	r0, r5
    65d6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    65da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65de:	f7fe ffe1 	bl	55a4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    65e2:	2800      	cmp	r0, #0
    65e4:	d0f6      	beq.n	65d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    65e6:	7a63      	ldrb	r3, [r4, #9]
    65e8:	2b01      	cmp	r3, #1
    65ea:	d1c5      	bne.n	6578 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    65ec:	6862      	ldr	r2, [r4, #4]
    65ee:	42ba      	cmp	r2, r7
    65f0:	d1c2      	bne.n	6578 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    65f2:	e7d4      	b.n	659e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    65f4:	f7fe ffd6 	bl	55a4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    65f8:	2800      	cmp	r0, #0
    65fa:	d0eb      	beq.n	65d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    65fc:	7a63      	ldrb	r3, [r4, #9]
    65fe:	2b00      	cmp	r3, #0
    6600:	d0c5      	beq.n	658e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6602:	2101      	movs	r1, #1
    6604:	4620      	mov	r0, r4
    6606:	f7ff ff2b 	bl	6460 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    660a:	2800      	cmp	r0, #0
    660c:	d1bf      	bne.n	658e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    660e:	4628      	mov	r0, r5
    6610:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6618:	4620      	mov	r0, r4
    661a:	4790      	blx	r2
    661c:	2800      	cmp	r0, #0
    661e:	d0f6      	beq.n	660e <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6620:	e7b5      	b.n	658e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6622:	bf00      	nop
    6624:	113a0011 	.word	0x113a0011
    6628:	000064f9 	.word	0x000064f9
    662c:	20008d76 	.word	0x20008d76
    6630:	2001db40 	.word	0x2001db40
    6634:	2001f605 	.word	0x2001f605

00006638 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    663c:	7a04      	ldrb	r4, [r0, #8]
    663e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6642:	460f      	mov	r7, r1
    6644:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6646:	f014 0401 	ands.w	r4, r4, #1
    664a:	d01d      	beq.n	6688 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    664c:	f012 0f03 	tst.w	r2, #3
    6650:	d006      	beq.n	6660 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6652:	4668      	mov	r0, sp
    6654:	4611      	mov	r1, r2
    6656:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    665a:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    665c:	f001 f9fe 	bl	7a5c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6660:	2301      	movs	r3, #1
    6662:	4642      	mov	r2, r8
    6664:	4639      	mov	r1, r7
    6666:	482c      	ldr	r0, [pc, #176]	; (6718 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6668:	f7ff faec 	bl	5c44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    666c:	4604      	mov	r4, r0
    666e:	b930      	cbnz	r0, 667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6670:	492a      	ldr	r1, [pc, #168]	; (671c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6672:	200d      	movs	r0, #13
  m_errorLine = line;
    6674:	4b2a      	ldr	r3, [pc, #168]	; (6720 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6676:	f240 32f2 	movw	r2, #1010	; 0x3f2
  m_errorCode = code;
    667a:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    667c:	601a      	str	r2, [r3, #0]
}
    667e:	4620      	mov	r0, r4
    6680:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6688:	4d26      	ldr	r5, [pc, #152]	; (6724 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    668a:	4606      	mov	r6, r0
    668c:	782b      	ldrb	r3, [r5, #0]
    668e:	bb2b      	cbnz	r3, 66dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6690:	7a73      	ldrb	r3, [r6, #9]
    6692:	2b02      	cmp	r3, #2
    6694:	d029      	beq.n	66ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6696:	6832      	ldr	r2, [r6, #0]
    6698:	4923      	ldr	r1, [pc, #140]	; (6728 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    669a:	6a12      	ldr	r2, [r2, #32]
    669c:	428a      	cmp	r2, r1
    669e:	d136      	bne.n	670e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    66a0:	782a      	ldrb	r2, [r5, #0]
    66a2:	bb32      	cbnz	r2, 66f2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    66a4:	2b00      	cmp	r3, #0
    66a6:	d12b      	bne.n	6700 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    66a8:	6833      	ldr	r3, [r6, #0]
    66aa:	4639      	mov	r1, r7
    66ac:	4630      	mov	r0, r6
    66ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    66b0:	4798      	blx	r3
    66b2:	2800      	cmp	r0, #0
    66b4:	d0e3      	beq.n	667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    66b6:	2302      	movs	r3, #2
      m_curSector = sector;
    66b8:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    66ba:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    66bc:	6833      	ldr	r3, [r6, #0]
    66be:	4641      	mov	r1, r8
    66c0:	4630      	mov	r0, r6
    66c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    66c4:	4798      	blx	r3
    66c6:	2800      	cmp	r0, #0
    66c8:	d0d9      	beq.n	667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    66ca:	6873      	ldr	r3, [r6, #4]
  return true;
    66cc:	4604      	mov	r4, r0
    m_curSector++;
    66ce:	3301      	adds	r3, #1
}
    66d0:	4620      	mov	r0, r4
    m_curSector++;
    66d2:	6073      	str	r3, [r6, #4]
}
    66d4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    66d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66dc:	f7fe ff62 	bl	55a4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    66e0:	2800      	cmp	r0, #0
    66e2:	d0cc      	beq.n	667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    66e4:	7a73      	ldrb	r3, [r6, #9]
    66e6:	2b02      	cmp	r3, #2
    66e8:	d1d5      	bne.n	6696 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    66ea:	6872      	ldr	r2, [r6, #4]
    66ec:	42ba      	cmp	r2, r7
    66ee:	d1d2      	bne.n	6696 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    66f0:	e7e4      	b.n	66bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    66f2:	f7fe ff57 	bl	55a4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    66f6:	2800      	cmp	r0, #0
    66f8:	d0c1      	beq.n	667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    66fa:	7a73      	ldrb	r3, [r6, #9]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d0d3      	beq.n	66a8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6700:	2101      	movs	r1, #1
    6702:	4630      	mov	r0, r6
    6704:	f7ff feac 	bl	6460 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6708:	2800      	cmp	r0, #0
    670a:	d0b8      	beq.n	667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    670c:	e7cc      	b.n	66a8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    670e:	4630      	mov	r0, r6
    6710:	4790      	blx	r2
    6712:	2800      	cmp	r0, #0
    6714:	d0b3      	beq.n	667e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6716:	e7c7      	b.n	66a8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6718:	183a0001 	.word	0x183a0001
    671c:	20008d76 	.word	0x20008d76
    6720:	2001db40 	.word	0x2001db40
    6724:	2001f605 	.word	0x2001f605
    6728:	000064f9 	.word	0x000064f9

0000672c <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    672c:	f001 b92c 	b.w	7988 <digitalWrite>

00006730 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6730:	b430      	push	{r4, r5}
    6732:	b082      	sub	sp, #8
    6734:	460c      	mov	r4, r1
    6736:	ab02      	add	r3, sp, #8
    6738:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    673c:	7cc3      	ldrb	r3, [r0, #19]
    673e:	2b00      	cmp	r3, #0
    6740:	d030      	beq.n	67a4 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6742:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6744:	7cc3      	ldrb	r3, [r0, #19]
    6746:	07da      	lsls	r2, r3, #31
    6748:	d508      	bpl.n	675c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    674a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    674e:	6945      	ldr	r5, [r0, #20]
    6750:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6754:	402a      	ands	r2, r5
    6756:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6758:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    675c:	079d      	lsls	r5, r3, #30
    675e:	d508      	bpl.n	6772 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6760:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6764:	6985      	ldr	r5, [r0, #24]
    6766:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    676a:	402a      	ands	r2, r5
    676c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    676e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6772:	0759      	lsls	r1, r3, #29
    6774:	d508      	bpl.n	6788 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6776:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    677a:	69c5      	ldr	r5, [r0, #28]
    677c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6780:	402a      	ands	r2, r5
    6782:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6784:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6788:	071a      	lsls	r2, r3, #28
    678a:	d508      	bpl.n	679e <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    678c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6790:	6a05      	ldr	r5, [r0, #32]
    6792:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6796:	402a      	ands	r2, r5
    6798:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    679a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    679e:	06db      	lsls	r3, r3, #27
    67a0:	d42f      	bmi.n	6802 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    67a2:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    67a4:	6883      	ldr	r3, [r0, #8]
    67a6:	429c      	cmp	r4, r3
    67a8:	d035      	beq.n	6816 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    67aa:	4b22      	ldr	r3, [pc, #136]	; (6834 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    67ac:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    67ae:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    67b0:	4a21      	ldr	r2, [pc, #132]	; (6838 <SPIClass::beginTransaction(SPISettings)+0x108>)
    67b2:	f3c3 1101 	ubfx	r1, r3, #4, #2
    67b6:	f3c3 6382 	ubfx	r3, r3, #26, #3
    67ba:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    67be:	3301      	adds	r3, #1
    67c0:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    67c4:	b1cc      	cbz	r4, 67fa <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    67c6:	4294      	cmp	r4, r2
    67c8:	d827      	bhi.n	681a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    67ca:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    67ce:	fbb2 f2f3 	udiv	r2, r2, r3
    67d2:	4294      	cmp	r4, r2
    67d4:	d32c      	bcc.n	6830 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    67d6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    67da:	d320      	bcc.n	681e <SPIClass::beginTransaction(SPISettings)+0xee>
    67dc:	4c17      	ldr	r4, [pc, #92]	; (683c <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    67de:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    67e0:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    67e2:	2203      	movs	r2, #3
		port().CR = 0;
    67e4:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    67e6:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    67e8:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    67ea:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    67ec:	2201      	movs	r2, #1
		port().CCR = _ccr;
    67ee:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    67f0:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    67f2:	611a      	str	r2, [r3, #16]
	}
    67f4:	b002      	add	sp, #8
    67f6:	bc30      	pop	{r4, r5}
    67f8:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    67fa:	4299      	cmp	r1, r3
    67fc:	d3ef      	bcc.n	67de <SPIClass::beginTransaction(SPISettings)+0xae>
    67fe:	1c53      	adds	r3, r2, #1
    6800:	e7e9      	b.n	67d6 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6802:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6806:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6808:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    680c:	400b      	ands	r3, r1
    680e:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6810:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6814:	e7c5      	b.n	67a2 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6816:	68c4      	ldr	r4, [r0, #12]
    6818:	e7e2      	b.n	67e0 <SPIClass::beginTransaction(SPISettings)+0xb0>
    681a:	2400      	movs	r4, #0
    681c:	e7df      	b.n	67de <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    681e:	2b02      	cmp	r3, #2
    6820:	d9fb      	bls.n	681a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6822:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6824:	085a      	lsrs	r2, r3, #1
    6826:	0214      	lsls	r4, r2, #8
    6828:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    682c:	431c      	orrs	r4, r3
    682e:	e7d6      	b.n	67de <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6830:	461a      	mov	r2, r3
    6832:	e7e4      	b.n	67fe <SPIClass::beginTransaction(SPISettings)+0xce>
    6834:	400fc000 	.word	0x400fc000
    6838:	200009fc 	.word	0x200009fc
    683c:	007f7fff 	.word	0x007f7fff

00006840 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    6840:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    6842:	4603      	mov	r3, r0
    6844:	f853 0b04 	ldr.w	r0, [r3], #4
    6848:	e893 0006 	ldmia.w	r3, {r1, r2}
    684c:	f7ff ff70 	bl	6730 <SPIClass::beginTransaction(SPISettings)>
}
    6850:	bd08      	pop	{r3, pc}
    6852:	bf00      	nop

00006854 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    6854:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6856:	7cd3      	ldrb	r3, [r2, #19]
    6858:	b313      	cbz	r3, 68a0 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    685a:	07d8      	lsls	r0, r3, #31
    685c:	d504      	bpl.n	6868 <SdSpiArduinoDriver::deactivate()+0x14>
    685e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6860:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6864:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6868:	0799      	lsls	r1, r3, #30
    686a:	d504      	bpl.n	6876 <SdSpiArduinoDriver::deactivate()+0x22>
    686c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    686e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6872:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6876:	0758      	lsls	r0, r3, #29
    6878:	d504      	bpl.n	6884 <SdSpiArduinoDriver::deactivate()+0x30>
    687a:	6b10      	ldr	r0, [r2, #48]	; 0x30
    687c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6880:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6884:	0719      	lsls	r1, r3, #28
    6886:	d504      	bpl.n	6892 <SdSpiArduinoDriver::deactivate()+0x3e>
    6888:	6b50      	ldr	r0, [r2, #52]	; 0x34
    688a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    688e:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6892:	06db      	lsls	r3, r3, #27
    6894:	d504      	bpl.n	68a0 <SdSpiArduinoDriver::deactivate()+0x4c>
    6896:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6898:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    689c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    68a0:	4770      	bx	lr
    68a2:	bf00      	nop

000068a4 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    68a4:	6800      	ldr	r0, [r0, #0]
    68a6:	f000 baa5 	b.w	6df4 <SPIClass::end()>
    68aa:	bf00      	nop

000068ac <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    68ac:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    68ae:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    68b0:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    68b2:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    68b4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    68b6:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    68ba:	d0fb      	beq.n	68b4 <SdSpiArduinoDriver::receive()+0x8>
    68bc:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    68be:	b2c0      	uxtb	r0, r0
    68c0:	4770      	bx	lr
    68c2:	bf00      	nop

000068c4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    68c4:	b530      	push	{r4, r5, lr}
    68c6:	460c      	mov	r4, r1
    68c8:	b083      	sub	sp, #12
    68ca:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    68cc:	21ff      	movs	r1, #255	; 0xff
    68ce:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    68d0:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    68d2:	f004 fd8f 	bl	b3f4 <memset>
		transfer(buf, buf, count);
    68d6:	6828      	ldr	r0, [r5, #0]
    68d8:	9b01      	ldr	r3, [sp, #4]
    68da:	4622      	mov	r2, r4
    68dc:	4621      	mov	r1, r4
    68de:	f000 fa85 	bl	6dec <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    68e2:	2000      	movs	r0, #0
    68e4:	b003      	add	sp, #12
    68e6:	bd30      	pop	{r4, r5, pc}

000068e8 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    68e8:	6803      	ldr	r3, [r0, #0]
    68ea:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    68ec:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    68ee:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    68f0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    68f4:	d0fb      	beq.n	68ee <SdSpiArduinoDriver::send(unsigned char)+0x6>
    68f6:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    68f8:	4770      	bx	lr
    68fa:	bf00      	nop

000068fc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    68fc:	1e53      	subs	r3, r2, #1
    68fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    6902:	b530      	push	{r4, r5, lr}
    6904:	4614      	mov	r4, r2
    6906:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    690a:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    690c:	d311      	bcc.n	6932 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    690e:	b16a      	cbz	r2, 692c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6910:	6803      	ldr	r3, [r0, #0]
    6912:	1e48      	subs	r0, r1, #1
    6914:	6819      	ldr	r1, [r3, #0]
    6916:	1882      	adds	r2, r0, r2
		port().TDR = data;
    6918:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    691c:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    691e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6920:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6924:	d0fb      	beq.n	691e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    6926:	4290      	cmp	r0, r2
    6928:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    692a:	d1f5      	bne.n	6918 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    692c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6930:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    6932:	4668      	mov	r0, sp
    6934:	f001 f892 	bl	7a5c <memcpy>
		transfer(buf, buf, count);
    6938:	466a      	mov	r2, sp
    693a:	4623      	mov	r3, r4
    693c:	6828      	ldr	r0, [r5, #0]
    693e:	4611      	mov	r1, r2
    6940:	f000 fa54 	bl	6dec <SPIClass::transfer(void const*, void*, unsigned int)>
}
    6944:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6948:	bd30      	pop	{r4, r5, pc}
    694a:	bf00      	nop

0000694c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    694c:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    694e:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    6950:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    6952:	07dc      	lsls	r4, r3, #31
    6954:	d51d      	bpl.n	6992 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    6956:	4604      	mov	r4, r0
    6958:	6840      	ldr	r0, [r0, #4]
    695a:	f104 0210 	add.w	r2, r4, #16
    695e:	6803      	ldr	r3, [r0, #0]
    6960:	68e1      	ldr	r1, [r4, #12]
    6962:	9201      	str	r2, [sp, #4]
    6964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6966:	4798      	blx	r3
    6968:	9a01      	ldr	r2, [sp, #4]
    696a:	4605      	mov	r5, r0
    696c:	b1a8      	cbz	r0, 699a <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    696e:	7823      	ldrb	r3, [r4, #0]
    6970:	0799      	lsls	r1, r3, #30
    6972:	d508      	bpl.n	6986 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6974:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    6976:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    697a:	4419      	add	r1, r3
    697c:	6803      	ldr	r3, [r0, #0]
    697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6980:	4798      	blx	r3
    6982:	b150      	cbz	r0, 699a <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6984:	7823      	ldrb	r3, [r4, #0]
    6986:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    698a:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    698c:	7023      	strb	r3, [r4, #0]
}
    698e:	b003      	add	sp, #12
    6990:	bd30      	pop	{r4, r5, pc}
  return true;
    6992:	2501      	movs	r5, #1
}
    6994:	4628      	mov	r0, r5
    6996:	b003      	add	sp, #12
    6998:	bd30      	pop	{r4, r5, pc}
  return false;
    699a:	2500      	movs	r5, #0
}
    699c:	4628      	mov	r0, r5
    699e:	b003      	add	sp, #12
    69a0:	bd30      	pop	{r4, r5, pc}
    69a2:	bf00      	nop

000069a4 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    69a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    69a6:	6843      	ldr	r3, [r0, #4]
    69a8:	b30b      	cbz	r3, 69ee <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    69aa:	68c3      	ldr	r3, [r0, #12]
    69ac:	4604      	mov	r4, r0
    69ae:	460f      	mov	r7, r1
    69b0:	4615      	mov	r5, r2
    69b2:	428b      	cmp	r3, r1
    69b4:	d106      	bne.n	69c4 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    69b6:	f810 3b10 	ldrb.w	r3, [r0], #16
    69ba:	f005 0503 	and.w	r5, r5, #3
    69be:	432b      	orrs	r3, r5
    69c0:	7023      	strb	r3, [r4, #0]
}
    69c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    69c4:	f7ff ffc2 	bl	694c <FsCache::sync()>
    69c8:	b188      	cbz	r0, 69ee <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    69ca:	076b      	lsls	r3, r5, #29
    69cc:	d505      	bpl.n	69da <FsCache::prepare(unsigned long, unsigned char)+0x36>
    69ce:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    69d2:	4630      	mov	r0, r6
    m_sector = sector;
    69d4:	2300      	movs	r3, #0
    69d6:	60e7      	str	r7, [r4, #12]
    69d8:	e7ef      	b.n	69ba <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    69da:	6860      	ldr	r0, [r4, #4]
    69dc:	f104 0610 	add.w	r6, r4, #16
    69e0:	4639      	mov	r1, r7
    69e2:	6803      	ldr	r3, [r0, #0]
    69e4:	4632      	mov	r2, r6
    69e6:	691b      	ldr	r3, [r3, #16]
    69e8:	4798      	blx	r3
    69ea:	2800      	cmp	r0, #0
    69ec:	d1f1      	bne.n	69d2 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    69ee:	2000      	movs	r0, #0
}
    69f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69f2:	bf00      	nop

000069f4 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    69f4:	b510      	push	{r4, lr}
    69f6:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    69f8:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    69fa:	b082      	sub	sp, #8
  if (ls) {
    69fc:	b118      	cbz	r0, 6a06 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    69fe:	2300      	movs	r3, #0
    6a00:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    6a02:	b002      	add	sp, #8
    6a04:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    6a06:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6a0a:	428b      	cmp	r3, r1
    6a0c:	d2f9      	bcs.n	6a02 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    6a0e:	aa01      	add	r2, sp, #4
    6a10:	4618      	mov	r0, r3
    6a12:	f000 f815 	bl	6a40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    6a16:	b180      	cbz	r0, 6a3a <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    6a18:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    6a1a:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    6a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6a20:	d201      	bcs.n	6a26 <FsName::get16()+0x32>
      rtn = cp;
    6a22:	b298      	uxth	r0, r3
    6a24:	e7ed      	b.n	6a02 <FsName::get16()+0xe>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6a26:	0a98      	lsrs	r0, r3, #10
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
    6a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6a2c:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    6a30:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6a34:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    6a36:	81a3      	strh	r3, [r4, #12]
    6a38:	e7e3      	b.n	6a02 <FsName::get16()+0xe>
  return 0XFFFF;
    6a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6a3e:	e7e0      	b.n	6a02 <FsName::get16()+0xe>

00006a40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    6a40:	4288      	cmp	r0, r1
    6a42:	d23d      	bcs.n	6ac0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    6a44:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    6a46:	b410      	push	{r4}
      return nullptr;
    }
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
    6a48:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    6a4c:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    6a4e:	2800      	cmp	r0, #0
    6a50:	da2d      	bge.n	6aae <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    6a52:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    6a56:	28c0      	cmp	r0, #192	; 0xc0
    6a58:	d034      	beq.n	6ac4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    6a5a:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    6a5e:	28e0      	cmp	r0, #224	; 0xe0
    6a60:	d034      	beq.n	6acc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    6a62:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    6a66:	28f0      	cmp	r0, #240	; 0xf0
    6a68:	d126      	bne.n	6ab8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    6a6a:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    6a6e:	2004      	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    6a70:	4418      	add	r0, r3
    6a72:	4288      	cmp	r0, r1
    6a74:	d820      	bhi.n	6ab8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    6a76:	3301      	adds	r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    6a78:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    6a7c:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    6a80:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    6a84:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    6a88:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    6a8c:	d114      	bne.n	6ab8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    6a8e:	4283      	cmp	r3, r0
    6a90:	d1f2      	bne.n	6a78 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    6a92:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    6a96:	4b0f      	ldr	r3, [pc, #60]	; (6ad4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    6a98:	4299      	cmp	r1, r3
    6a9a:	d80d      	bhi.n	6ab8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    6a9c:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    6aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6aa4:	d308      	bcc.n	6ab8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      return nullptr;
    }
    *rtn = cp;
    6aa6:	6014      	str	r4, [r2, #0]
    return str + n;
  }
    6aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
    6aac:	4770      	bx	lr
      return str + 1;
    6aae:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    6ab0:	6014      	str	r4, [r2, #0]
  }
    6ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
    6ab6:	4770      	bx	lr
      return nullptr;
    6ab8:	2000      	movs	r0, #0
  }
    6aba:	f85d 4b04 	ldr.w	r4, [sp], #4
    6abe:	4770      	bx	lr
      return nullptr;
    6ac0:	2000      	movs	r0, #0
  }
    6ac2:	4770      	bx	lr
      cp = ch & 0X1F;
    6ac4:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    6ac8:	2002      	movs	r0, #2
    6aca:	e7d1      	b.n	6a70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    6acc:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    6ad0:	2003      	movs	r0, #3
    6ad2:	e7cd      	b.n	6a70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    6ad4:	0010ff7f 	.word	0x0010ff7f

00006ad8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    6ad8:	287e      	cmp	r0, #126	; 0x7e
    6ada:	d93e      	bls.n	6b5a <toUpcase(unsigned short)+0x82>
  size_t right = size;
    6adc:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    6ae0:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    6ae2:	b430      	push	{r4, r5}
    6ae4:	4c28      	ldr	r4, [pc, #160]	; (6b88 <toUpcase(unsigned short)+0xb0>)
    6ae6:	e004      	b.n	6af2 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    6ae8:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    6aec:	4282      	cmp	r2, r0
    6aee:	d820      	bhi.n	6b32 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    6af0:	460b      	mov	r3, r1
  while (right - left > 1) {
    6af2:	ebac 0203 	sub.w	r2, ip, r3
    6af6:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6af8:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6afc:	d8f4      	bhi.n	6ae8 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    6afe:	b29b      	uxth	r3, r3
    6b00:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6b04:	4290      	cmp	r0, r2
    6b06:	d216      	bcs.n	6b36 <toUpcase(unsigned short)+0x5e>
    6b08:	244b      	movs	r4, #75	; 0x4b
    6b0a:	2300      	movs	r3, #0
    6b0c:	4d1f      	ldr	r5, [pc, #124]	; (6b8c <toUpcase(unsigned short)+0xb4>)
    6b0e:	e004      	b.n	6b1a <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    6b10:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    6b14:	4282      	cmp	r2, r0
    6b16:	d81e      	bhi.n	6b56 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    6b18:	460b      	mov	r3, r1
  while (right - left > 1) {
    6b1a:	1ae2      	subs	r2, r4, r3
    6b1c:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6b1e:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6b22:	d8f5      	bhi.n	6b10 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    6b24:	b29b      	uxth	r3, r3
    6b26:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    6b2a:	4282      	cmp	r2, r0
    6b2c:	d01f      	beq.n	6b6e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    6b2e:	bc30      	pop	{r4, r5}
    6b30:	4770      	bx	lr
    mid = left + (right - left)/2;
    6b32:	468c      	mov	ip, r1
    6b34:	e7dd      	b.n	6af2 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6b36:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    6b3a:	1a82      	subs	r2, r0, r2
    6b3c:	78e3      	ldrb	r3, [r4, #3]
    6b3e:	429a      	cmp	r2, r3
    6b40:	dae2      	bge.n	6b08 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    6b42:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    6b46:	2b01      	cmp	r3, #1
    6b48:	d016      	beq.n	6b78 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    6b4a:	b1d3      	cbz	r3, 6b82 <toUpcase(unsigned short)+0xaa>
    6b4c:	b29b      	uxth	r3, r3
    6b4e:	4403      	add	r3, r0
}
    6b50:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    6b52:	b298      	uxth	r0, r3
}
    6b54:	4770      	bx	lr
    mid = left + (right - left)/2;
    6b56:	460c      	mov	r4, r1
    6b58:	e7df      	b.n	6b1a <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    6b5a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    6b5e:	2b19      	cmp	r3, #25
    6b60:	bf8c      	ite	hi
    6b62:	2300      	movhi	r3, #0
    6b64:	2301      	movls	r3, #1
    6b66:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    6b6a:	b298      	uxth	r0, r3
}
    6b6c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    6b6e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6b72:	8868      	ldrh	r0, [r5, #2]
}
    6b74:	bc30      	pop	{r4, r5}
    6b76:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    6b78:	f002 0201 	and.w	r2, r2, #1
    6b7c:	1a83      	subs	r3, r0, r2
    6b7e:	b298      	uxth	r0, r3
    6b80:	e7d5      	b.n	6b2e <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    6b82:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    6b86:	e7e2      	b.n	6b4e <toUpcase(unsigned short)+0x76>
    6b88:	20000638 	.word	0x20000638
    6b8c:	20000500 	.word	0x20000500

00006b90 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6b90:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    6b94:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    6b96:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    6b9a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6b9c:	d101      	bne.n	6ba2 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    6b9e:	6883      	ldr	r3, [r0, #8]
    6ba0:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    6ba2:	f000 bafb 	b.w	719c <EventResponder::triggerEventNotImmediate()>
    6ba6:	bf00      	nop

00006ba8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    6ba8:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6baa:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6bac:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    6bb0:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6bb2:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    6bb4:	b1a3      	cbz	r3, 6be0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6bb6:	b321      	cbz	r1, 6c02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    6bb8:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    6bbc:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6bbe:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6bc0:	6f25      	ldr	r5, [r4, #112]	; 0x70
    6bc2:	07af      	lsls	r7, r5, #30
    6bc4:	d407      	bmi.n	6bd6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    6bc6:	4615      	mov	r5, r2
				count_read--;
    6bc8:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6bca:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    6bcc:	b11a      	cbz	r2, 6bd6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6bce:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    6bd2:	462a      	mov	r2, r5
    6bd4:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    6bd6:	6965      	ldr	r5, [r4, #20]
    6bd8:	07ed      	lsls	r5, r5, #31
    6bda:	d5f1      	bpl.n	6bc0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    6bdc:	2b00      	cmp	r3, #0
    6bde:	d1ea      	bne.n	6bb6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    6be0:	b16e      	cbz	r6, 6bfe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    6be2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6be4:	6f19      	ldr	r1, [r3, #112]	; 0x70
    6be6:	0789      	lsls	r1, r1, #30
    6be8:	d4fa      	bmi.n	6be0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    6bea:	4611      	mov	r1, r2
			count_read--;
    6bec:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    6bf0:	2a00      	cmp	r2, #0
    6bf2:	d0f5      	beq.n	6be0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6bf4:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    6bf8:	460a      	mov	r2, r1
	while (count_read) {
    6bfa:	2e00      	cmp	r6, #0
    6bfc:	d1f1      	bne.n	6be2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    6bfe:	bcf0      	pop	{r4, r5, r6, r7}
    6c00:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6c02:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    6c06:	e7d9      	b.n	6bbc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00006c08 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    6c08:	4b32      	ldr	r3, [pc, #200]	; (6cd4 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    6c0a:	4933      	ldr	r1, [pc, #204]	; (6cd8 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6c0c:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    6c0e:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    6c12:	7920      	ldrb	r0, [r4, #4]
    6c14:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    6c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    6c18:	f895 c004 	ldrb.w	ip, [r5, #4]
    6c1c:	f881 c01c 	strb.w	ip, [r1, #28]
    6c20:	7708      	strb	r0, [r1, #28]
    6c22:	b152      	cbz	r2, 6c3a <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    6c24:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6c28:	d323      	bcc.n	6c72 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    6c2a:	492c      	ldr	r1, [pc, #176]	; (6cdc <_spi_dma_rxISR1()+0xd4>)
    6c2c:	4411      	add	r1, r2
		DMA_SERQ = channel;
    6c2e:	4a2a      	ldr	r2, [pc, #168]	; (6cd8 <_spi_dma_rxISR1()+0xd0>)
    6c30:	6419      	str	r1, [r3, #64]	; 0x40
    6c32:	76d0      	strb	r0, [r2, #27]
    6c34:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6c38:	bd30      	pop	{r4, r5, pc}
    6c3a:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6c3c:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6c3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6c40:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6c42:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    6c46:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6c48:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    6c4a:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    6c4e:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6c50:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    6c52:	6804      	ldr	r4, [r0, #0]
    6c54:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6c56:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    6c5a:	4b21      	ldr	r3, [pc, #132]	; (6ce0 <_spi_dma_rxISR1()+0xd8>)
    6c5c:	429c      	cmp	r4, r3
    6c5e:	d126      	bne.n	6cae <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    6c60:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    6c62:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    6c64:	2b02      	cmp	r3, #2
		_data = data;
    6c66:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6c68:	d126      	bne.n	6cb8 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    6c6a:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6c70:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    6c72:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6c74:	8be9      	ldrh	r1, [r5, #30]
    6c76:	0409      	lsls	r1, r1, #16
    6c78:	d422      	bmi.n	6cc0 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    6c7a:	b292      	uxth	r2, r2
    6c7c:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    6c7e:	6821      	ldr	r1, [r4, #0]
    6c80:	8bec      	ldrh	r4, [r5, #30]
    6c82:	b2a4      	uxth	r4, r4
    6c84:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6c86:	8bcc      	ldrh	r4, [r1, #30]
    6c88:	0424      	lsls	r4, r4, #16
    6c8a:	d505      	bpl.n	6c98 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6c8c:	8bcc      	ldrh	r4, [r1, #30]
    6c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6c92:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6c96:	4322      	orrs	r2, r4
    6c98:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    6c9a:	8bca      	ldrh	r2, [r1, #30]
    6c9c:	b292      	uxth	r2, r2
    6c9e:	82ca      	strh	r2, [r1, #22]
    6ca0:	2100      	movs	r1, #0
    6ca2:	4a0d      	ldr	r2, [pc, #52]	; (6cd8 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    6ca4:	6419      	str	r1, [r3, #64]	; 0x40
    6ca6:	76d0      	strb	r0, [r2, #27]
    6ca8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6cac:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    6cae:	4623      	mov	r3, r4
    6cb0:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6cb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    6cb6:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    6cbc:	f000 ba6e 	b.w	719c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6cc0:	8be9      	ldrh	r1, [r5, #30]
    6cc2:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    6cc6:	b292      	uxth	r2, r2
    6cc8:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    6ccc:	ea41 010e 	orr.w	r1, r1, lr
    6cd0:	83e9      	strh	r1, [r5, #30]
    6cd2:	e7d4      	b.n	6c7e <_spi_dma_rxISR1()+0x76>
    6cd4:	2000c4d8 	.word	0x2000c4d8
    6cd8:	400e8000 	.word	0x400e8000
    6cdc:	ffff8001 	.word	0xffff8001
    6ce0:	00006b91 	.word	0x00006b91

00006ce4 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    6ce4:	4b32      	ldr	r3, [pc, #200]	; (6db0 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    6ce6:	4933      	ldr	r1, [pc, #204]	; (6db4 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6ce8:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    6cea:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    6cee:	7920      	ldrb	r0, [r4, #4]
    6cf0:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    6cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    6cf4:	f895 c004 	ldrb.w	ip, [r5, #4]
    6cf8:	f881 c01c 	strb.w	ip, [r1, #28]
    6cfc:	7708      	strb	r0, [r1, #28]
    6cfe:	b152      	cbz	r2, 6d16 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    6d00:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6d04:	d323      	bcc.n	6d4e <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    6d06:	492c      	ldr	r1, [pc, #176]	; (6db8 <_spi_dma_rxISR0()+0xd4>)
    6d08:	4411      	add	r1, r2
		DMA_SERQ = channel;
    6d0a:	4a2a      	ldr	r2, [pc, #168]	; (6db4 <_spi_dma_rxISR0()+0xd0>)
    6d0c:	6419      	str	r1, [r3, #64]	; 0x40
    6d0e:	76d0      	strb	r0, [r2, #27]
    6d10:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6d14:	bd30      	pop	{r4, r5, pc}
    6d16:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6d18:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    6d1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6d1c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6d1e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    6d22:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6d24:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    6d26:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    6d2a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6d2c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    6d2e:	6804      	ldr	r4, [r0, #0]
    6d30:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6d32:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    6d36:	4b21      	ldr	r3, [pc, #132]	; (6dbc <_spi_dma_rxISR0()+0xd8>)
    6d38:	429c      	cmp	r4, r3
    6d3a:	d126      	bne.n	6d8a <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    6d3c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    6d3e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    6d40:	2b02      	cmp	r3, #2
		_data = data;
    6d42:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6d44:	d126      	bne.n	6d94 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    6d46:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6d4c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    6d4e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6d50:	8be9      	ldrh	r1, [r5, #30]
    6d52:	0409      	lsls	r1, r1, #16
    6d54:	d422      	bmi.n	6d9c <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    6d56:	b292      	uxth	r2, r2
    6d58:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    6d5a:	6821      	ldr	r1, [r4, #0]
    6d5c:	8bec      	ldrh	r4, [r5, #30]
    6d5e:	b2a4      	uxth	r4, r4
    6d60:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6d62:	8bcc      	ldrh	r4, [r1, #30]
    6d64:	0424      	lsls	r4, r4, #16
    6d66:	d505      	bpl.n	6d74 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6d68:	8bcc      	ldrh	r4, [r1, #30]
    6d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6d6e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6d72:	4322      	orrs	r2, r4
    6d74:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    6d76:	8bca      	ldrh	r2, [r1, #30]
    6d78:	b292      	uxth	r2, r2
    6d7a:	82ca      	strh	r2, [r1, #22]
    6d7c:	2100      	movs	r1, #0
    6d7e:	4a0d      	ldr	r2, [pc, #52]	; (6db4 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    6d80:	6419      	str	r1, [r3, #64]	; 0x40
    6d82:	76d0      	strb	r0, [r2, #27]
    6d84:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6d88:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    6d8a:	4623      	mov	r3, r4
    6d8c:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    6d92:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    6d98:	f000 ba00 	b.w	719c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6d9c:	8be9      	ldrh	r1, [r5, #30]
    6d9e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    6da2:	b292      	uxth	r2, r2
    6da4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    6da8:	ea41 010e 	orr.w	r1, r1, lr
    6dac:	83e9      	strh	r1, [r5, #30]
    6dae:	e7d4      	b.n	6d5a <_spi_dma_rxISR0()+0x76>
    6db0:	2000c488 	.word	0x2000c488
    6db4:	400e8000 	.word	0x400e8000
    6db8:	ffff8001 	.word	0xffff8001
    6dbc:	00006b91 	.word	0x00006b91

00006dc0 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    6dc0:	2300      	movs	r3, #0
    6dc2:	e9c0 1200 	strd	r1, r2, [r0]
    6dc6:	e9c0 3302 	strd	r3, r3, [r0, #8]
    6dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
    6dce:	e9c0 3306 	strd	r3, r3, [r0, #24]
    6dd2:	e9c0 3308 	strd	r3, r3, [r0, #32]
    6dd6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    6dda:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    6dde:	6383      	str	r3, [r0, #56]	; 0x38
    6de0:	8783      	strh	r3, [r0, #60]	; 0x3c
    6de2:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    6de6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    6dea:	4770      	bx	lr

00006dec <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    6dec:	b10b      	cbz	r3, 6df2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    6dee:	f7ff bedb 	b.w	6ba8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    6df2:	4770      	bx	lr

00006df4 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    6df4:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    6df6:	e9d3 1200 	ldrd	r1, r2, [r3]
    6dfa:	6809      	ldr	r1, [r1, #0]
    6dfc:	4211      	tst	r1, r2
    6dfe:	d100      	bne.n	6e02 <SPIClass::end()+0xe>
    6e00:	4770      	bx	lr
void SPIClass::end() {
    6e02:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6e04:	6802      	ldr	r2, [r0, #0]
    6e06:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    6e08:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    6e0a:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    6e0c:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    6e0e:	7c22      	ldrb	r2, [r4, #16]
    6e10:	4413      	add	r3, r2
    6e12:	7c18      	ldrb	r0, [r3, #16]
    6e14:	f000 fde2 	bl	79dc <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    6e18:	7c62      	ldrb	r2, [r4, #17]
    6e1a:	6863      	ldr	r3, [r4, #4]
    6e1c:	2105      	movs	r1, #5
    6e1e:	4413      	add	r3, r2
    6e20:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    6e24:	f000 fdda 	bl	79dc <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    6e28:	6863      	ldr	r3, [r4, #4]
    6e2a:	7ca2      	ldrb	r2, [r4, #18]
    6e2c:	2105      	movs	r1, #5
    6e2e:	4413      	add	r3, r2
}
    6e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    6e34:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    6e38:	f000 bdd0 	b.w	79dc <pinMode>

00006e3c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    6e3c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    6e3e:	4a08      	ldr	r2, [pc, #32]	; (6e60 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    6e40:	4908      	ldr	r1, [pc, #32]	; (6e64 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    6e42:	4809      	ldr	r0, [pc, #36]	; (6e68 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    6e44:	f7ff ffbc 	bl	6dc0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    6e48:	4a08      	ldr	r2, [pc, #32]	; (6e6c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    6e4a:	4909      	ldr	r1, [pc, #36]	; (6e70 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    6e4c:	4809      	ldr	r0, [pc, #36]	; (6e74 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    6e4e:	f7ff ffb7 	bl	6dc0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    6e52:	4a09      	ldr	r2, [pc, #36]	; (6e78 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    6e54:	4909      	ldr	r1, [pc, #36]	; (6e7c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    6e56:	480a      	ldr	r0, [pc, #40]	; (6e80 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    6e58:	f7ff ffb2 	bl	6dc0 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    6e5c:	bd08      	pop	{r3, pc}
    6e5e:	bf00      	nop
    6e60:	2000080c 	.word	0x2000080c
    6e64:	403a0000 	.word	0x403a0000
    6e68:	2000c488 	.word	0x2000c488
    6e6c:	2000079c 	.word	0x2000079c
    6e70:	4039c000 	.word	0x4039c000
    6e74:	2000c4d8 	.word	0x2000c4d8
    6e78:	2000072c 	.word	0x2000072c
    6e7c:	40394000 	.word	0x40394000
    6e80:	2000c528 	.word	0x2000c528

00006e84 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    6e84:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    6e88:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    6e8c:	1a10      	subs	r0, r2, r0
    6e8e:	4770      	bx	lr

00006e90 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6e90:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6e94:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    6e98:	429a      	cmp	r2, r3
    6e9a:	d905      	bls.n	6ea8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    6e9c:	1c5a      	adds	r2, r3, #1
    6e9e:	4403      	add	r3, r0
    6ea0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    6ea4:	7e98      	ldrb	r0, [r3, #26]
    6ea6:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    6ea8:	f04f 30ff 	mov.w	r0, #4294967295
	}
    6eac:	4770      	bx	lr
    6eae:	bf00      	nop

00006eb0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6eb0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6eb4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    6eb8:	429a      	cmp	r2, r3
    6eba:	d902      	bls.n	6ec2 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    6ebc:	4418      	add	r0, r3
    6ebe:	7e80      	ldrb	r0, [r0, #26]
    6ec0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    6ec2:	f04f 30ff 	mov.w	r0, #4294967295
	}
    6ec6:	4770      	bx	lr

00006ec8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    6ec8:	4770      	bx	lr
    6eca:	bf00      	nop

00006ecc <TwoWire::write(unsigned char)>:
{
    6ecc:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    6ece:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    6ed2:	b178      	cbz	r0, 6ef4 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    6ed4:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    6ed8:	2a88      	cmp	r2, #136	; 0x88
    6eda:	d903      	bls.n	6ee4 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    6edc:	2201      	movs	r2, #1
			return 0;
    6ede:	2000      	movs	r0, #0
    6ee0:	605a      	str	r2, [r3, #4]
    6ee2:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    6ee4:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    6ee8:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    6eea:	441a      	add	r2, r3
    6eec:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    6ef0:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    6ef4:	4770      	bx	lr
    6ef6:	bf00      	nop

00006ef8 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    6ef8:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    6efa:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    6efe:	b90c      	cbnz	r4, 6f04 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    6f00:	4620      	mov	r0, r4
    6f02:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    6f04:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    6f08:	4605      	mov	r5, r0
    6f0a:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    6f0e:	42a2      	cmp	r2, r4
    6f10:	d80d      	bhi.n	6f2e <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    6f12:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    6f14:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    6f18:	4622      	mov	r2, r4
    6f1a:	4418      	add	r0, r3
    6f1c:	f000 fd9e 	bl	7a5c <memcpy>
		txBufferLength += quantity;
    6f20:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    6f24:	4620      	mov	r0, r4
		txBufferLength += quantity;
    6f26:	4423      	add	r3, r4
    6f28:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    6f2c:	bd38      	pop	{r3, r4, r5, pc}
    6f2e:	2201      	movs	r2, #1
    6f30:	6042      	str	r2, [r0, #4]
    6f32:	e7ef      	b.n	6f14 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00006f34 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    6f34:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    6f36:	2500      	movs	r5, #0
    6f38:	4613      	mov	r3, r2
    6f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6f3e:	4604      	mov	r4, r0
    6f40:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    6f44:	4815      	ldr	r0, [pc, #84]	; (6f9c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    6f46:	2288      	movs	r2, #136	; 0x88
    6f48:	6121      	str	r1, [r4, #16]
    6f4a:	4629      	mov	r1, r5
    6f4c:	6020      	str	r0, [r4, #0]
    6f4e:	f104 001a 	add.w	r0, r4, #26
    6f52:	6163      	str	r3, [r4, #20]
    6f54:	7325      	strb	r5, [r4, #12]
    6f56:	7625      	strb	r5, [r4, #24]
    6f58:	7665      	strb	r5, [r4, #25]
    6f5a:	f004 fa4b 	bl	b3f4 <memset>
    6f5e:	2289      	movs	r2, #137	; 0x89
    6f60:	4629      	mov	r1, r5
    6f62:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    6f66:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    6f6a:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    6f6e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    6f72:	f004 fa3f 	bl	b3f4 <memset>
	}
    6f76:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    6f78:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    6f7c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    6f80:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    6f84:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    6f88:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    6f8c:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    6f90:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    6f94:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    6f98:	bd38      	pop	{r3, r4, r5, pc}
    6f9a:	bf00      	nop
    6f9c:	20000970 	.word	0x20000970

00006fa0 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    6fa0:	6903      	ldr	r3, [r0, #16]
{
    6fa2:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    6fa4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    6fa8:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    6faa:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    6fae:	d001      	beq.n	6fb4 <TwoWire::isr()+0x14>
    6fb0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    6fb4:	07ae      	lsls	r6, r5, #30
    6fb6:	d50b      	bpl.n	6fd0 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    6fb8:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    6fbc:	0408      	lsls	r0, r1, #16
    6fbe:	d53e      	bpl.n	703e <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    6fc0:	2200      	movs	r2, #0
    6fc2:	2001      	movs	r0, #1
    6fc4:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    6fc8:	4422      	add	r2, r4
    6fca:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    6fce:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    6fd0:	07ea      	lsls	r2, r5, #31
    6fd2:	d510      	bpl.n	6ff6 <TwoWire::isr()+0x56>
		if (!transmitting) {
    6fd4:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    6fd8:	b1f6      	cbz	r6, 7018 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    6fda:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    6fde:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    6fe2:	42b2      	cmp	r2, r6
    6fe4:	d927      	bls.n	7036 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    6fe6:	1c72      	adds	r2, r6, #1
    6fe8:	4426      	add	r6, r4
    6fea:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    6fee:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    6ff2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    6ff6:	05ab      	lsls	r3, r5, #22
    6ff8:	d50d      	bpl.n	7016 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    6ffa:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    6ffe:	b118      	cbz	r0, 7008 <TwoWire::isr()+0x68>
    7000:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7004:	b103      	cbz	r3, 7008 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    7006:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    7008:	2300      	movs	r3, #0
    700a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    700e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    7012:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    7016:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    7018:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    701c:	b10a      	cbz	r2, 7022 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    701e:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    7020:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    7022:	2200      	movs	r2, #0
    7024:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    7028:	2201      	movs	r2, #1
    702a:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    702e:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    7032:	42b2      	cmp	r2, r6
    7034:	d8d7      	bhi.n	6fe6 <TwoWire::isr()+0x46>
			port->STDR = 0;
    7036:	2200      	movs	r2, #0
    7038:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    703c:	e7db      	b.n	6ff6 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    703e:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    7042:	2a87      	cmp	r2, #135	; 0x87
    7044:	d8c4      	bhi.n	6fd0 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    7046:	1c50      	adds	r0, r2, #1
    7048:	b2c0      	uxtb	r0, r0
    704a:	e7bd      	b.n	6fc8 <TwoWire::isr()+0x28>

0000704c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    704c:	4801      	ldr	r0, [pc, #4]	; (7054 <lpi2c1_isr()+0x8>)
    704e:	f7ff bfa7 	b.w	6fa0 <TwoWire::isr()>
    7052:	bf00      	nop
    7054:	2000c57c 	.word	0x2000c57c

00007058 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    7058:	4801      	ldr	r0, [pc, #4]	; (7060 <lpi2c3_isr()+0x8>)
    705a:	f7ff bfa1 	b.w	6fa0 <TwoWire::isr()>
    705e:	bf00      	nop
    7060:	2000c6bc 	.word	0x2000c6bc

00007064 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7064:	4801      	ldr	r0, [pc, #4]	; (706c <lpi2c4_isr()+0x8>)
    7066:	f7ff bf9b 	b.w	6fa0 <TwoWire::isr()>
    706a:	bf00      	nop
    706c:	2000c7fc 	.word	0x2000c7fc

00007070 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    7070:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    7072:	4c09      	ldr	r4, [pc, #36]	; (7098 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    7074:	4909      	ldr	r1, [pc, #36]	; (709c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    7076:	4622      	mov	r2, r4
    7078:	4809      	ldr	r0, [pc, #36]	; (70a0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    707a:	f7ff ff5b 	bl	6f34 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    707e:	f104 0250 	add.w	r2, r4, #80	; 0x50
    7082:	4908      	ldr	r1, [pc, #32]	; (70a4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    7084:	4808      	ldr	r0, [pc, #32]	; (70a8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    7086:	f7ff ff55 	bl	6f34 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    708a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    708e:	4907      	ldr	r1, [pc, #28]	; (70ac <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    7090:	4807      	ldr	r0, [pc, #28]	; (70b0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    7092:	f7ff ff4f 	bl	6f34 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    7096:	bd10      	pop	{r4, pc}
    7098:	60002674 	.word	0x60002674
    709c:	403f0000 	.word	0x403f0000
    70a0:	2000c57c 	.word	0x2000c57c
    70a4:	403f8000 	.word	0x403f8000
    70a8:	2000c6bc 	.word	0x2000c6bc
    70ac:	403fc000 	.word	0x403fc000
    70b0:	2000c7fc 	.word	0x2000c7fc

000070b4 <DMAChannel::begin(bool)>:
{
    70b4:	b430      	push	{r4, r5}
	__disable_irq();
    70b6:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    70b8:	b921      	cbnz	r1, 70c4 <DMAChannel::begin(bool)+0x10>
    70ba:	6803      	ldr	r3, [r0, #0]
    70bc:	b113      	cbz	r3, 70c4 <DMAChannel::begin(bool)+0x10>
    70be:	7902      	ldrb	r2, [r0, #4]
    70c0:	2a0f      	cmp	r2, #15
    70c2:	d93b      	bls.n	713c <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    70c4:	4c24      	ldr	r4, [pc, #144]	; (7158 <DMAChannel::begin(bool)+0xa4>)
    70c6:	8821      	ldrh	r1, [r4, #0]
{
    70c8:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    70ca:	fa41 f203 	asr.w	r2, r1, r3
    70ce:	f012 0201 	ands.w	r2, r2, #1
    70d2:	d008      	beq.n	70e6 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    70d4:	3301      	adds	r3, #1
    70d6:	2b10      	cmp	r3, #16
    70d8:	d1f7      	bne.n	70ca <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    70da:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    70dc:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    70de:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    70e0:	6002      	str	r2, [r0, #0]
}
    70e2:	bc30      	pop	{r4, r5}
    70e4:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    70e6:	f04f 0c01 	mov.w	ip, #1
    70ea:	fa0c fc03 	lsl.w	ip, ip, r3
    70ee:	ea41 010c 	orr.w	r1, r1, ip
    70f2:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    70f4:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    70f6:	4919      	ldr	r1, [pc, #100]	; (715c <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    70f8:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    70fc:	4c18      	ldr	r4, [pc, #96]	; (7160 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    70fe:	4419      	add	r1, r3
	channel = ch;
    7100:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7104:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7106:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    7108:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    710c:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    710e:	f240 4482 	movw	r4, #1154	; 0x482
    7112:	4914      	ldr	r1, [pc, #80]	; (7164 <DMAChannel::begin(bool)+0xb0>)
    7114:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    7116:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    711a:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    711e:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    7122:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7126:	6003      	str	r3, [r0, #0]
}
    7128:	bc30      	pop	{r4, r5}
	*p++ = 0;
    712a:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    712e:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    7132:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    7136:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    713a:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    713c:	4c06      	ldr	r4, [pc, #24]	; (7158 <DMAChannel::begin(bool)+0xa4>)
    713e:	8821      	ldrh	r1, [r4, #0]
    7140:	fa41 f502 	asr.w	r5, r1, r2
    7144:	07ed      	lsls	r5, r5, #31
    7146:	d5bf      	bpl.n	70c8 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    7148:	4d04      	ldr	r5, [pc, #16]	; (715c <DMAChannel::begin(bool)+0xa8>)
    714a:	4415      	add	r5, r2
    714c:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    7150:	d1ba      	bne.n	70c8 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    7152:	b662      	cpsie	i
		return;
    7154:	e7c5      	b.n	70e2 <DMAChannel::begin(bool)+0x2e>
    7156:	bf00      	nop
    7158:	2001f5fa 	.word	0x2001f5fa
    715c:	02007480 	.word	0x02007480
    7160:	400fc000 	.word	0x400fc000
    7164:	400e8000 	.word	0x400e8000

00007168 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7168:	7903      	ldrb	r3, [r0, #4]
    716a:	2b0f      	cmp	r3, #15
    716c:	d811      	bhi.n	7192 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    716e:	4a09      	ldr	r2, [pc, #36]	; (7194 <DMAChannel::release()+0x2c>)
    7170:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    7172:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    7174:	4908      	ldr	r1, [pc, #32]	; (7198 <DMAChannel::release()+0x30>)
    7176:	2201      	movs	r2, #1
    7178:	f890 c004 	ldrb.w	ip, [r0, #4]
    717c:	880b      	ldrh	r3, [r1, #0]
    717e:	fa02 f20c 	lsl.w	r2, r2, ip
    7182:	ea23 0302 	bic.w	r3, r3, r2
    7186:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7188:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    718a:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    718c:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    718e:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    7190:	6003      	str	r3, [r0, #0]
}
    7192:	4770      	bx	lr
    7194:	400e8000 	.word	0x400e8000
    7198:	2001f5fa 	.word	0x2001f5fa

0000719c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    719c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    71a0:	b672      	cpsid	i
	if (_triggered == false) {
    71a2:	7f43      	ldrb	r3, [r0, #29]
    71a4:	b95b      	cbnz	r3, 71be <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    71a6:	7f01      	ldrb	r1, [r0, #28]
    71a8:	2901      	cmp	r1, #1
{
    71aa:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    71ac:	d00b      	beq.n	71c6 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    71ae:	2903      	cmp	r1, #3
    71b0:	d013      	beq.n	71da <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    71b2:	2301      	movs	r3, #1
    71b4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    71b6:	b902      	cbnz	r2, 71ba <EventResponder::triggerEventNotImmediate()+0x1e>
    71b8:	b662      	cpsie	i
}
    71ba:	bc30      	pop	{r4, r5}
    71bc:	4770      	bx	lr
    71be:	b90a      	cbnz	r2, 71c4 <EventResponder::triggerEventNotImmediate()+0x28>
    71c0:	b662      	cpsie	i
    71c2:	4770      	bx	lr
    71c4:	4770      	bx	lr
			if (firstYield == nullptr) {
    71c6:	4c12      	ldr	r4, [pc, #72]	; (7210 <EventResponder::triggerEventNotImmediate()+0x74>)
    71c8:	6821      	ldr	r1, [r4, #0]
    71ca:	b1b1      	cbz	r1, 71fa <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    71cc:	4911      	ldr	r1, [pc, #68]	; (7214 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    71ce:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    71d0:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    71d2:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    71d4:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    71d6:	6158      	str	r0, [r3, #20]
				lastYield = this;
    71d8:	e7eb      	b.n	71b2 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    71da:	4d0f      	ldr	r5, [pc, #60]	; (7218 <EventResponder::triggerEventNotImmediate()+0x7c>)
    71dc:	490f      	ldr	r1, [pc, #60]	; (721c <EventResponder::triggerEventNotImmediate()+0x80>)
    71de:	682c      	ldr	r4, [r5, #0]
    71e0:	b18c      	cbz	r4, 7206 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    71e2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    71e4:	680b      	ldr	r3, [r1, #0]
    71e6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    71e8:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    71ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    71ee:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    71f2:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    71f4:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    71f8:	e7db      	b.n	71b2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    71fa:	4b06      	ldr	r3, [pc, #24]	; (7214 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    71fc:	6020      	str	r0, [r4, #0]
				lastYield = this;
    71fe:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    7200:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    7204:	e7d5      	b.n	71b2 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    7206:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    720a:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    720c:	e7ed      	b.n	71ea <EventResponder::triggerEventNotImmediate()+0x4e>
    720e:	bf00      	nop
    7210:	2001e224 	.word	0x2001e224
    7214:	2001e230 	.word	0x2001e230
    7218:	2001e22c 	.word	0x2001e22c
    721c:	2001e228 	.word	0x2001e228

00007220 <EventResponder::runFromInterrupt()>:
{
    7220:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7222:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7226:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7228:	4c0c      	ldr	r4, [pc, #48]	; (725c <EventResponder::runFromInterrupt()+0x3c>)
    722a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    722c:	b180      	cbz	r0, 7250 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    722e:	4e0c      	ldr	r6, [pc, #48]	; (7260 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    7230:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    7232:	6943      	ldr	r3, [r0, #20]
    7234:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7236:	b173      	cbz	r3, 7256 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7238:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    723a:	b902      	cbnz	r2, 723e <EventResponder::runFromInterrupt()+0x1e>
    723c:	b662      	cpsie	i
			(*(first->_function))(*first);
    723e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    7240:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    7242:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7244:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7248:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    724a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    724c:	2800      	cmp	r0, #0
    724e:	d1f0      	bne.n	7232 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    7250:	b902      	cbnz	r2, 7254 <EventResponder::runFromInterrupt()+0x34>
    7252:	b662      	cpsie	i
}
    7254:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    7256:	6033      	str	r3, [r6, #0]
    7258:	e7ef      	b.n	723a <EventResponder::runFromInterrupt()+0x1a>
    725a:	bf00      	nop
    725c:	2001e22c 	.word	0x2001e22c
    7260:	2001e228 	.word	0x2001e228

00007264 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7264:	f7ff bfdc 	b.w	7220 <EventResponder::runFromInterrupt()>

00007268 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    7268:	4904      	ldr	r1, [pc, #16]	; (727c <systick_isr+0x14>)
	systick_millis_count++;
    726a:	4a05      	ldr	r2, [pc, #20]	; (7280 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    726c:	6849      	ldr	r1, [r1, #4]
    726e:	4b05      	ldr	r3, [pc, #20]	; (7284 <systick_isr+0x1c>)
    7270:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    7272:	6813      	ldr	r3, [r2, #0]
    7274:	3301      	adds	r3, #1
    7276:	6013      	str	r3, [r2, #0]
}
    7278:	4770      	bx	lr
    727a:	bf00      	nop
    727c:	e0001000 	.word	0xe0001000
    7280:	2001f5cc 	.word	0x2001f5cc
    7284:	2001f5c8 	.word	0x2001f5c8

00007288 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7288:	4608      	mov	r0, r1
    728a:	f001 bdc9 	b.w	8e20 <usb_serial_putchar>
    728e:	bf00      	nop

00007290 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    7290:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7292:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7294:	bf08      	it	eq
    7296:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7298:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    729a:	b391      	cbz	r1, 7302 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    729c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    72a0:	e001      	b.n	72a6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    72a2:	fa5f fe86 	uxtb.w	lr, r6
    72a6:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    72aa:	fbb1 f5f2 	udiv	r5, r1, r2
    72ae:	fb02 1415 	mls	r4, r2, r5, r1
    72b2:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    72b6:	2c09      	cmp	r4, #9
    72b8:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    72bc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    72c0:	bf98      	it	ls
    72c2:	fa5f f48c 	uxtbls.w	r4, ip
    72c6:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    72ca:	bf88      	it	hi
    72cc:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    72ce:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    72d0:	44ec      	add	ip, sp
			n /= base;
    72d2:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    72d4:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    72d8:	d2e3      	bcs.n	72a2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    72da:	b14b      	cbz	r3, 72f0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    72dc:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    72e0:	222d      	movs	r2, #45	; 0x2d
		i--;
    72e2:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    72e6:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    72ea:	446b      	add	r3, sp
    72ec:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    72f0:	6803      	ldr	r3, [r0, #0]
    72f2:	a901      	add	r1, sp, #4
    72f4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    72f8:	685b      	ldr	r3, [r3, #4]
    72fa:	4471      	add	r1, lr
    72fc:	4798      	blx	r3
}
    72fe:	b00a      	add	sp, #40	; 0x28
    7300:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    7302:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7304:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7308:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    730c:	e7e5      	b.n	72da <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    730e:	bf00      	nop

00007310 <Print::print(long)>:
	if (n < 0) {
    7310:	2900      	cmp	r1, #0
    7312:	db03      	blt.n	731c <Print::print(long)+0xc>
	uint8_t sign=0;
    7314:	2300      	movs	r3, #0
	if (base == 0) {
    7316:	220a      	movs	r2, #10
    7318:	f7ff bfba 	b.w	7290 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    731c:	4249      	negs	r1, r1
		sign = '-';
    731e:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    7320:	220a      	movs	r2, #10
    7322:	f7ff bfb5 	b.w	7290 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7326:	bf00      	nop

00007328 <Print::println()>:
{
    7328:	b500      	push	{lr}
	return write(buf, 2);
    732a:	6803      	ldr	r3, [r0, #0]
{
    732c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    732e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    7332:	2202      	movs	r2, #2
    7334:	a901      	add	r1, sp, #4
    7336:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    7338:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    733c:	4798      	blx	r3
}
    733e:	b003      	add	sp, #12
    7340:	f85d fb04 	ldr.w	pc, [sp], #4

00007344 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7344:	4b05      	ldr	r3, [pc, #20]	; (735c <_write+0x18>)
    7346:	2802      	cmp	r0, #2
    7348:	bf88      	it	hi
    734a:	4603      	movhi	r3, r0
{
    734c:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    734e:	681c      	ldr	r4, [r3, #0]
    7350:	4618      	mov	r0, r3
    7352:	6863      	ldr	r3, [r4, #4]
}
    7354:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7358:	4718      	bx	r3
    735a:	bf00      	nop
    735c:	20008754 	.word	0x20008754

00007360 <Print::printf(char const*, ...)>:
{
    7360:	b40e      	push	{r1, r2, r3}
    7362:	b500      	push	{lr}
    7364:	b082      	sub	sp, #8
    7366:	aa03      	add	r2, sp, #12
    7368:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    736c:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    736e:	f003 ff55 	bl	b21c <vdprintf>
}
    7372:	b002      	add	sp, #8
    7374:	f85d eb04 	ldr.w	lr, [sp], #4
    7378:	b003      	add	sp, #12
    737a:	4770      	bx	lr

0000737c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    737c:	b95a      	cbnz	r2, 7396 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    737e:	6803      	ldr	r3, [r0, #0]
    7380:	b2c9      	uxtb	r1, r1
    7382:	4a07      	ldr	r2, [pc, #28]	; (73a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7384:	681b      	ldr	r3, [r3, #0]
    7386:	4293      	cmp	r3, r2
{
    7388:	b500      	push	{lr}
    738a:	d106      	bne.n	739a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    738c:	4608      	mov	r0, r1
}
    738e:	f85d eb04 	ldr.w	lr, [sp], #4
    7392:	f001 bd45 	b.w	8e20 <usb_serial_putchar>
    7396:	f7ff bf7b 	b.w	7290 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    739a:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    739e:	4718      	bx	r3
    73a0:	00007289 	.word	0x00007289
    73a4:	00000000 	.word	0x00000000

000073a8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    73a8:	eeb4 0b40 	vcmp.f64	d0, d0
{
    73ac:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    73ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    73b2:	4605      	mov	r5, r0
    73b4:	ed2d 8b02 	vpush	{d8}
    73b8:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    73ba:	d67c      	bvs.n	74b6 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    73bc:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    73c0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 74e0 <Print::printFloat(double, unsigned char)+0x138>
    73c4:	eeb4 7b46 	vcmp.f64	d7, d6
    73c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73cc:	dc6b      	bgt.n	74a6 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    73ce:	ed9f 7b46 	vldr	d7, [pc, #280]	; 74e8 <Print::printFloat(double, unsigned char)+0x140>
    73d2:	eeb4 0bc7 	vcmpe.f64	d0, d7
    73d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73da:	dc5a      	bgt.n	7492 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    73dc:	ed9f 7b44 	vldr	d7, [pc, #272]	; 74f0 <Print::printFloat(double, unsigned char)+0x148>
    73e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    73e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73e8:	d453      	bmi.n	7492 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    73ea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    73ee:	460c      	mov	r4, r1
    73f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73f4:	d45b      	bmi.n	74ae <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    73f6:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    73f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    73fc:	2c00      	cmp	r4, #0
    73fe:	d05e      	beq.n	74be <Print::printFloat(double, unsigned char)+0x116>
    7400:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7404:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 74f8 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7408:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    740c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7410:	fa5f f28c 	uxtb.w	r2, ip
    7414:	42a2      	cmp	r2, r4
    7416:	d3f7      	bcc.n	7408 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7418:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    741c:	220a      	movs	r2, #10
    741e:	4628      	mov	r0, r5
    7420:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7424:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7428:	ee17 1a90 	vmov	r1, s15
    742c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7430:	f7ff ff2e 	bl	7290 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7434:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7436:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    743a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    743e:	4606      	mov	r6, r0
		buf[0] = '.';
    7440:	bf28      	it	cs
    7442:	240f      	movcs	r4, #15
    7444:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7448:	f10d 0309 	add.w	r3, sp, #9
    744c:	aa02      	add	r2, sp, #8
    744e:	1e61      	subs	r1, r4, #1
    7450:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7454:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7458:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    745c:	edcd 7a01 	vstr	s15, [sp, #4]
    7460:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7464:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7468:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    746a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    746e:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7472:	4291      	cmp	r1, r2
			remainder -= n; 
    7474:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7478:	d1ec      	bne.n	7454 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    747a:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    747c:	3401      	adds	r4, #1
		count += write(buf, count);
    747e:	a902      	add	r1, sp, #8
    7480:	4628      	mov	r0, r5
    7482:	685b      	ldr	r3, [r3, #4]
    7484:	b2e2      	uxtb	r2, r4
    7486:	4798      	blx	r3
	}
	return count;
}
    7488:	4630      	mov	r0, r6
    748a:	b006      	add	sp, #24
    748c:	ecbd 8b02 	vpop	{d8}
    7490:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7492:	682b      	ldr	r3, [r5, #0]
    7494:	2203      	movs	r2, #3
    7496:	491a      	ldr	r1, [pc, #104]	; (7500 <Print::printFloat(double, unsigned char)+0x158>)
    7498:	685b      	ldr	r3, [r3, #4]
    749a:	b006      	add	sp, #24
    749c:	ecbd 8b02 	vpop	{d8}
    74a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74a4:	4718      	bx	r3
    74a6:	6803      	ldr	r3, [r0, #0]
    74a8:	2203      	movs	r2, #3
    74aa:	4916      	ldr	r1, [pc, #88]	; (7504 <Print::printFloat(double, unsigned char)+0x15c>)
    74ac:	e7f4      	b.n	7498 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    74ae:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    74b2:	2301      	movs	r3, #1
    74b4:	e7a0      	b.n	73f8 <Print::printFloat(double, unsigned char)+0x50>
    74b6:	6803      	ldr	r3, [r0, #0]
    74b8:	2203      	movs	r2, #3
    74ba:	4913      	ldr	r1, [pc, #76]	; (7508 <Print::printFloat(double, unsigned char)+0x160>)
    74bc:	e7ec      	b.n	7498 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    74be:	ee30 0b07 	vadd.f64	d0, d0, d7
    74c2:	220a      	movs	r2, #10
    74c4:	4628      	mov	r0, r5
    74c6:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    74ca:	ee17 1a90 	vmov	r1, s15
}
    74ce:	b006      	add	sp, #24
    74d0:	ecbd 8b02 	vpop	{d8}
    74d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74d8:	f7ff beda 	b.w	7290 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    74dc:	f3af 8000 	nop.w
    74e0:	ffffffff 	.word	0xffffffff
    74e4:	7fefffff 	.word	0x7fefffff
    74e8:	e0000000 	.word	0xe0000000
    74ec:	41efffff 	.word	0x41efffff
    74f0:	e0000000 	.word	0xe0000000
    74f4:	c1efffff 	.word	0xc1efffff
    74f8:	9999999a 	.word	0x9999999a
    74fc:	3fb99999 	.word	0x3fb99999
    7500:	20000728 	.word	0x20000728
    7504:	20000724 	.word	0x20000724
    7508:	20000720 	.word	0x20000720

0000750c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    750c:	f001 bc78 	b.w	8e00 <usb_serial_getchar>

00007510 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7510:	f001 bc10 	b.w	8d34 <usb_serial_peekchar>

00007514 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7518:	b392      	cbz	r2, 7580 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    751a:	4617      	mov	r7, r2
    751c:	fab3 f283 	clz	r2, r3
    7520:	0952      	lsrs	r2, r2, #5
    7522:	b36b      	cbz	r3, 7580 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7524:	f1b3 0801 	subs.w	r8, r3, #1
    7528:	d025      	beq.n	7576 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    752a:	eb07 0a08 	add.w	sl, r7, r8
    752e:	4683      	mov	fp, r0
    7530:	4689      	mov	r9, r1
	size_t index = 0;
    7532:	4690      	mov	r8, r2
    7534:	4c17      	ldr	r4, [pc, #92]	; (7594 <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7536:	4e18      	ldr	r6, [pc, #96]	; (7598 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7538:	6825      	ldr	r5, [r4, #0]
    753a:	e00b      	b.n	7554 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    753c:	f001 fc60 	bl	8e00 <usb_serial_getchar>
    if (c >= 0) return c;
    7540:	2800      	cmp	r0, #0
    7542:	da10      	bge.n	7566 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7544:	f001 fd00 	bl	8f48 <yield>
    7548:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    754a:	f8db 2008 	ldr.w	r2, [fp, #8]
    754e:	1b5b      	subs	r3, r3, r5
    7550:	4293      	cmp	r3, r2
    7552:	d21a      	bcs.n	758a <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7554:	f8db 3000 	ldr.w	r3, [fp]
    7558:	695b      	ldr	r3, [r3, #20]
    755a:	42b3      	cmp	r3, r6
    755c:	d0ee      	beq.n	753c <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    755e:	4658      	mov	r0, fp
    7560:	4798      	blx	r3
    if (c >= 0) return c;
    7562:	2800      	cmp	r0, #0
    7564:	dbee      	blt.n	7544 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7566:	4548      	cmp	r0, r9
    7568:	d005      	beq.n	7576 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    756a:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    756e:	45ba      	cmp	sl, r7
		index++;
    7570:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7574:	d1e0      	bne.n	7538 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7576:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7578:	4640      	mov	r0, r8
	*buffer = 0;
    757a:	703b      	strb	r3, [r7, #0]
}
    757c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7580:	f04f 0800 	mov.w	r8, #0
}
    7584:	4640      	mov	r0, r8
    7586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    758a:	2301      	movs	r3, #1
    758c:	f88b 300c 	strb.w	r3, [fp, #12]
    7590:	e7f1      	b.n	7576 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7592:	bf00      	nop
    7594:	2001f5cc 	.word	0x2001f5cc
    7598:	0000750d 	.word	0x0000750d

0000759c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    759c:	49a2      	ldr	r1, [pc, #648]	; (7828 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    759e:	4ba3      	ldr	r3, [pc, #652]	; (782c <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    75a0:	4288      	cmp	r0, r1
{
    75a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    75a6:	4ca2      	ldr	r4, [pc, #648]	; (7830 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    75a8:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    75aa:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    75ac:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    75b0:	d91b      	bls.n	75ea <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    75b2:	4ba0      	ldr	r3, [pc, #640]	; (7834 <set_arm_clock+0x298>)
    75b4:	4298      	cmp	r0, r3
    75b6:	f240 8102 	bls.w	77be <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    75ba:	1ac3      	subs	r3, r0, r3
    75bc:	499e      	ldr	r1, [pc, #632]	; (7838 <set_arm_clock+0x29c>)
    75be:	0a1b      	lsrs	r3, r3, #8
    75c0:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    75c4:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    75c8:	09db      	lsrs	r3, r3, #7
    75ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75d2:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    75d6:	428b      	cmp	r3, r1
    75d8:	bf28      	it	cs
    75da:	460b      	movcs	r3, r1
    75dc:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    75e0:	4b96      	ldr	r3, [pc, #600]	; (783c <set_arm_clock+0x2a0>)
    75e2:	fba3 3707 	umull	r3, r7, r3, r7
    75e6:	08ff      	lsrs	r7, r7, #3
    75e8:	e004      	b.n	75f4 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    75ea:	4f95      	ldr	r7, [pc, #596]	; (7840 <set_arm_clock+0x2a4>)
    75ec:	42b8      	cmp	r0, r7
    75ee:	bf8c      	ite	hi
    75f0:	270e      	movhi	r7, #14
    75f2:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    75f4:	498d      	ldr	r1, [pc, #564]	; (782c <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    75f6:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    75fa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    75fe:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7604:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7608:	d20c      	bcs.n	7624 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    760a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    760e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7612:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7616:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    761a:	680b      	ldr	r3, [r1, #0]
    761c:	2b00      	cmp	r3, #0
    761e:	dafc      	bge.n	761a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7620:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7624:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7628:	d124      	bne.n	7674 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    762a:	4986      	ldr	r1, [pc, #536]	; (7844 <set_arm_clock+0x2a8>)
    762c:	690c      	ldr	r4, [r1, #16]
    762e:	4986      	ldr	r1, [pc, #536]	; (7848 <set_arm_clock+0x2ac>)
    7630:	43a1      	bics	r1, r4
    7632:	f000 80ea 	beq.w	780a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7636:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    763a:	4634      	mov	r4, r6
    763c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7640:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7644:	d004      	beq.n	7650 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7646:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    764a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    764c:	4b77      	ldr	r3, [pc, #476]	; (782c <set_arm_clock+0x290>)
    764e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7650:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7654:	d007      	beq.n	7666 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7656:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    765a:	4974      	ldr	r1, [pc, #464]	; (782c <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    765c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    765e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7660:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7662:	071a      	lsls	r2, r3, #28
    7664:	d4fc      	bmi.n	7660 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7666:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    766a:	4a70      	ldr	r2, [pc, #448]	; (782c <set_arm_clock+0x290>)
    766c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    766e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7670:	069b      	lsls	r3, r3, #26
    7672:	d4fc      	bmi.n	766e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7674:	4c75      	ldr	r4, [pc, #468]	; (784c <set_arm_clock+0x2b0>)
    7676:	42a0      	cmp	r0, r4
    7678:	f200 80ce 	bhi.w	7818 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    767c:	f04f 0c01 	mov.w	ip, #1
    7680:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7682:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7684:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7688:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    768c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7690:	42a2      	cmp	r2, r4
    7692:	d818      	bhi.n	76c6 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7694:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7698:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    769c:	f040 808d 	bne.w	77ba <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    76a0:	f1bc 0f04 	cmp.w	ip, #4
    76a4:	f200 8091 	bhi.w	77ca <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    76a8:	180a      	adds	r2, r1, r0
    76aa:	42a2      	cmp	r2, r4
    76ac:	f200 80a4 	bhi.w	77f8 <set_arm_clock+0x25c>
    76b0:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    76b4:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    76b6:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    76ba:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    76be:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    76c2:	42a2      	cmp	r2, r4
    76c4:	d9e6      	bls.n	7694 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    76c6:	f10c 31ff 	add.w	r1, ip, #4294967295
    76ca:	028c      	lsls	r4, r1, #10
    76cc:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    76d0:	485f      	ldr	r0, [pc, #380]	; (7850 <set_arm_clock+0x2b4>)
    76d2:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    76d4:	4a5f      	ldr	r2, [pc, #380]	; (7854 <set_arm_clock+0x2b8>)
    76d6:	4290      	cmp	r0, r2
    76d8:	d97f      	bls.n	77da <set_arm_clock+0x23e>
    76da:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7880 <set_arm_clock+0x2e4>
    76de:	226c      	movs	r2, #108	; 0x6c
    76e0:	485d      	ldr	r0, [pc, #372]	; (7858 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    76e2:	4d58      	ldr	r5, [pc, #352]	; (7844 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    76e4:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    76e8:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    76ec:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    76f0:	f8df c190 	ldr.w	ip, [pc, #400]	; 7884 <set_arm_clock+0x2e8>
    76f4:	ea0e 0c0c 	and.w	ip, lr, ip
    76f8:	45d4      	cmp	ip, sl
    76fa:	d009      	beq.n	7710 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    76fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7700:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7704:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7708:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    770a:	682a      	ldr	r2, [r5, #0]
    770c:	2a00      	cmp	r2, #0
    770e:	dafc      	bge.n	770a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7710:	4a46      	ldr	r2, [pc, #280]	; (782c <set_arm_clock+0x290>)
    7712:	6915      	ldr	r5, [r2, #16]
    7714:	f005 0507 	and.w	r5, r5, #7
    7718:	429d      	cmp	r5, r3
    771a:	d003      	beq.n	7724 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    771c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    771e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7720:	03dd      	lsls	r5, r3, #15
    7722:	d4fc      	bmi.n	771e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7724:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7728:	d009      	beq.n	773e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    772a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    772e:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7732:	4a3e      	ldr	r2, [pc, #248]	; (782c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7734:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7736:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7738:	6c93      	ldr	r3, [r2, #72]	; 0x48
    773a:	0799      	lsls	r1, r3, #30
    773c:	d4fc      	bmi.n	7738 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    773e:	4947      	ldr	r1, [pc, #284]	; (785c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7740:	4a47      	ldr	r2, [pc, #284]	; (7860 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7742:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7744:	4291      	cmp	r1, r2
    7746:	d83c      	bhi.n	77c2 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7748:	4b46      	ldr	r3, [pc, #280]	; (7864 <set_arm_clock+0x2c8>)
    774a:	09c9      	lsrs	r1, r1, #7
    774c:	fba3 3101 	umull	r3, r1, r3, r1
    7750:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7752:	1e4b      	subs	r3, r1, #1
    7754:	021b      	lsls	r3, r3, #8
    7756:	ea86 0203 	eor.w	r2, r6, r3
    775a:	f412 7f40 	tst.w	r2, #768	; 0x300
    775e:	d006      	beq.n	776e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7760:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7764:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7768:	4a30      	ldr	r2, [pc, #192]	; (782c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    776a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    776c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    776e:	4a2f      	ldr	r2, [pc, #188]	; (782c <set_arm_clock+0x290>)
    7770:	6953      	ldr	r3, [r2, #20]
    7772:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7776:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7778:	6c93      	ldr	r3, [r2, #72]	; 0x48
    777a:	069b      	lsls	r3, r3, #26
    777c:	d4fc      	bmi.n	7778 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    777e:	4b3a      	ldr	r3, [pc, #232]	; (7868 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7780:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7782:	fba3 2300 	umull	r2, r3, r3, r0
    7786:	f04f 32ff 	mov.w	r2, #4294967295
    778a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    778e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7792:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    7796:	4a35      	ldr	r2, [pc, #212]	; (786c <set_arm_clock+0x2d0>)
    7798:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    779a:	4a35      	ldr	r2, [pc, #212]	; (7870 <set_arm_clock+0x2d4>)
    779c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    779e:	4a35      	ldr	r2, [pc, #212]	; (7874 <set_arm_clock+0x2d8>)
    77a0:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    77a2:	d208      	bcs.n	77b6 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    77a4:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    77a8:	4a21      	ldr	r2, [pc, #132]	; (7830 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    77aa:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    77ae:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    77b0:	6813      	ldr	r3, [r2, #0]
    77b2:	2b00      	cmp	r3, #0
    77b4:	dafc      	bge.n	77b0 <set_arm_clock+0x214>
	}

	return frequency;
}
    77b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77ba:	4673      	mov	r3, lr
    77bc:	e762      	b.n	7684 <set_arm_clock+0xe8>
    77be:	2712      	movs	r7, #18
    77c0:	e718      	b.n	75f4 <set_arm_clock+0x58>
    77c2:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    77c6:	2104      	movs	r1, #4
    77c8:	e7c5      	b.n	7756 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77ca:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77ce:	4820      	ldr	r0, [pc, #128]	; (7850 <set_arm_clock+0x2b4>)
    77d0:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77d2:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77d4:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77d6:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77da:	4a27      	ldr	r2, [pc, #156]	; (7878 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    77dc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7888 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77e0:	fba2 2000 	umull	r2, r0, r2, r0
    77e4:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    77e6:	4825      	ldr	r0, [pc, #148]	; (787c <set_arm_clock+0x2e0>)
    77e8:	2a36      	cmp	r2, #54	; 0x36
    77ea:	bf38      	it	cc
    77ec:	2236      	movcc	r2, #54	; 0x36
    77ee:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    77f2:	ea42 0a0a 	orr.w	sl, r2, sl
    77f6:	e774      	b.n	76e2 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77f8:	ea4f 248c 	mov.w	r4, ip, lsl #10
    77fc:	2300      	movs	r3, #0
    77fe:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7802:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7806:	46ac      	mov	ip, r5
    7808:	e762      	b.n	76d0 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    780a:	461d      	mov	r5, r3
    780c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7810:	4611      	mov	r1, r2
    7812:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7816:	e713      	b.n	7640 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7818:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    781a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    781e:	4602      	mov	r2, r0
    7820:	4631      	mov	r1, r6
    7822:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7824:	46e6      	mov	lr, ip
    7826:	e753      	b.n	76d0 <set_arm_clock+0x134>
    7828:	1f78a400 	.word	0x1f78a400
    782c:	400fc000 	.word	0x400fc000
    7830:	40080000 	.word	0x40080000
    7834:	23c34600 	.word	0x23c34600
    7838:	004cb223 	.word	0x004cb223
    783c:	51eb851f 	.word	0x51eb851f
    7840:	016e3600 	.word	0x016e3600
    7844:	400d8000 	.word	0x400d8000
    7848:	80003040 	.word	0x80003040
    784c:	269fb1ff 	.word	0x269fb1ff
    7850:	005b8d80 	.word	0x005b8d80
    7854:	4df67eff 	.word	0x4df67eff
    7858:	4d3f6400 	.word	0x4d3f6400
    785c:	08f0d17f 	.word	0x08f0d17f
    7860:	2cb4177f 	.word	0x2cb4177f
    7864:	00e5109f 	.word	0x00e5109f
    7868:	431bde83 	.word	0x431bde83
    786c:	20008750 	.word	0x20008750
    7870:	2000874c 	.word	0x2000874c
    7874:	2001f0f8 	.word	0x2001f0f8
    7878:	165e9f81 	.word	0x165e9f81
    787c:	00b71b00 	.word	0x00b71b00
    7880:	8000206c 	.word	0x8000206c
    7884:	8001307f 	.word	0x8001307f
    7888:	80002000 	.word	0x80002000

0000788c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    788c:	b900      	cbnz	r0, 7890 <delay+0x4>
    788e:	4770      	bx	lr
{
    7890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7894:	2101      	movs	r1, #1
    7896:	4681      	mov	r9, r0
    7898:	4c21      	ldr	r4, [pc, #132]	; (7920 <delay+0x94>)
    789a:	4d22      	ldr	r5, [pc, #136]	; (7924 <delay+0x98>)
    789c:	4e22      	ldr	r6, [pc, #136]	; (7928 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    789e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    78a2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    78a4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    78a6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    78aa:	2b00      	cmp	r3, #0
    78ac:	d1f7      	bne.n	789e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    78ae:	491f      	ldr	r1, [pc, #124]	; (792c <delay+0xa0>)
    78b0:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    78b2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78b6:	f8df a078 	ldr.w	sl, [pc, #120]	; 7930 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    78ba:	1a1b      	subs	r3, r3, r0
    78bc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    78be:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78c2:	f8da 2000 	ldr.w	r2, [sl]
    78c6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    78ca:	455a      	cmp	r2, fp
    78cc:	bf94      	ite	ls
    78ce:	4490      	addls	r8, r2
    78d0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    78d2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    78d6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    78d8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    78da:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    78de:	2b00      	cmp	r3, #0
    78e0:	d1f7      	bne.n	78d2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    78e2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78e4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    78e8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    78ea:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78ee:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    78f2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    78f6:	bf94      	ite	ls
    78f8:	4462      	addls	r2, ip
    78fa:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    78fe:	eba2 0208 	sub.w	r2, r2, r8
    7902:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7906:	d306      	bcc.n	7916 <delay+0x8a>
			if (--msec == 0) return;
    7908:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    790c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7910:	d1df      	bne.n	78d2 <delay+0x46>
}
    7912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7916:	f001 fb17 	bl	8f48 <yield>
		while ((micros() - start) >= 1000) {
    791a:	4904      	ldr	r1, [pc, #16]	; (792c <delay+0xa0>)
    791c:	e7d9      	b.n	78d2 <delay+0x46>
    791e:	bf00      	nop
    7920:	2001f5d0 	.word	0x2001f5d0
    7924:	2001f5cc 	.word	0x2001f5cc
    7928:	2001f5c8 	.word	0x2001f5c8
    792c:	e0001000 	.word	0xe0001000
    7930:	2001f0f8 	.word	0x2001f0f8

00007934 <micros>:
{
    7934:	b430      	push	{r4, r5}
    7936:	4b0f      	ldr	r3, [pc, #60]	; (7974 <micros+0x40>)
    7938:	f04f 0c01 	mov.w	ip, #1
    793c:	4d0e      	ldr	r5, [pc, #56]	; (7978 <micros+0x44>)
    793e:	4c0f      	ldr	r4, [pc, #60]	; (797c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7940:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7944:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7946:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7948:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    794c:	2a00      	cmp	r2, #0
    794e:	d1f7      	bne.n	7940 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7950:	4b0b      	ldr	r3, [pc, #44]	; (7980 <micros+0x4c>)
    7952:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7954:	4a0b      	ldr	r2, [pc, #44]	; (7984 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7956:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7958:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    795c:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    795e:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7962:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7966:	bc30      	pop	{r4, r5}
    7968:	428a      	cmp	r2, r1
    796a:	bf94      	ite	ls
    796c:	1880      	addls	r0, r0, r2
    796e:	1840      	addhi	r0, r0, r1
    7970:	4770      	bx	lr
    7972:	bf00      	nop
    7974:	2001f5d0 	.word	0x2001f5d0
    7978:	2001f5cc 	.word	0x2001f5cc
    797c:	2001f5c8 	.word	0x2001f5c8
    7980:	e0001000 	.word	0xe0001000
    7984:	2001f0f8 	.word	0x2001f0f8

00007988 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    7988:	2836      	cmp	r0, #54	; 0x36
    798a:	d816      	bhi.n	79ba <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    798c:	0102      	lsls	r2, r0, #4
    798e:	4b10      	ldr	r3, [pc, #64]	; (79d0 <digitalWrite+0x48>)
    7990:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    7994:	589b      	ldr	r3, [r3, r2]
{
    7996:	b410      	push	{r4}
	mask = p->mask;
    7998:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    799a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    799c:	4214      	tst	r4, r2
    799e:	d005      	beq.n	79ac <digitalWrite+0x24>
		if (val) {
    79a0:	b961      	cbnz	r1, 79bc <digitalWrite+0x34>
		}
	}
}
    79a2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    79a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    79aa:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    79ac:	6883      	ldr	r3, [r0, #8]
		if (val) {
    79ae:	b151      	cbz	r1, 79c6 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    79b0:	4a08      	ldr	r2, [pc, #32]	; (79d4 <digitalWrite+0x4c>)
}
    79b2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    79b6:	601a      	str	r2, [r3, #0]
}
    79b8:	4770      	bx	lr
    79ba:	4770      	bx	lr
    79bc:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    79c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    79c4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    79c6:	4a04      	ldr	r2, [pc, #16]	; (79d8 <digitalWrite+0x50>)
}
    79c8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    79cc:	601a      	str	r2, [r3, #0]
}
    79ce:	4770      	bx	lr
    79d0:	20007834 	.word	0x20007834
    79d4:	0001f038 	.word	0x0001f038
    79d8:	00013038 	.word	0x00013038

000079dc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    79dc:	2836      	cmp	r0, #54	; 0x36
    79de:	d829      	bhi.n	7a34 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    79e0:	4b16      	ldr	r3, [pc, #88]	; (7a3c <pinMode+0x60>)
    79e2:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    79e4:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    79e6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    79ea:	589a      	ldr	r2, [r3, r2]
{
    79ec:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    79ee:	6853      	ldr	r3, [r2, #4]
    79f0:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    79f2:	d00e      	beq.n	7a12 <pinMode+0x36>
    79f4:	2904      	cmp	r1, #4
    79f6:	d00c      	beq.n	7a12 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    79f8:	ea23 0304 	bic.w	r3, r3, r4
    79fc:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    79fe:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    7a00:	b1a9      	cbz	r1, 7a2e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    7a02:	2902      	cmp	r1, #2
    7a04:	d017      	beq.n	7a36 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    7a06:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7a08:	bf0c      	ite	eq
    7a0a:	4a0d      	ldreq	r2, [pc, #52]	; (7a40 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    7a0c:	4a0d      	ldrne	r2, [pc, #52]	; (7a44 <pinMode+0x68>)
    7a0e:	601a      	str	r2, [r3, #0]
    7a10:	e007      	b.n	7a22 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7a12:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    7a14:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7a16:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7a18:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    7a1a:	d008      	beq.n	7a2e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    7a1c:	f640 0238 	movw	r2, #2104	; 0x838
    7a20:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    7a22:	6843      	ldr	r3, [r0, #4]
    7a24:	2215      	movs	r2, #21
}
    7a26:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    7a2a:	601a      	str	r2, [r3, #0]
}
    7a2c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7a2e:	2238      	movs	r2, #56	; 0x38
    7a30:	601a      	str	r2, [r3, #0]
    7a32:	e7f6      	b.n	7a22 <pinMode+0x46>
    7a34:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7a36:	4a04      	ldr	r2, [pc, #16]	; (7a48 <pinMode+0x6c>)
    7a38:	601a      	str	r2, [r3, #0]
    7a3a:	e7f2      	b.n	7a22 <pinMode+0x46>
    7a3c:	20007834 	.word	0x20007834
    7a40:	00013038 	.word	0x00013038
    7a44:	00010038 	.word	0x00010038
    7a48:	0001f038 	.word	0x0001f038

00007a4c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    7a4c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    7a4e:	f7f8 fc59 	bl	304 <setup>
	while (1) {
		loop();
    7a52:	f7f8 fb09 	bl	68 <loop>
		yield();
    7a56:	f001 fa77 	bl	8f48 <yield>
	while (1) {
    7a5a:	e7fa      	b.n	7a52 <main+0x6>

00007a5c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7a5c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7a5e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7a62:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7a66:	d16d      	bne.n	7b44 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7a68:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    7a6a:	d341      	bcc.n	7af0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7a6c:	f851 3b04 	ldr.w	r3, [r1], #4
    7a70:	f840 3b04 	str.w	r3, [r0], #4
    7a74:	f851 3b04 	ldr.w	r3, [r1], #4
    7a78:	f840 3b04 	str.w	r3, [r0], #4
    7a7c:	f851 3b04 	ldr.w	r3, [r1], #4
    7a80:	f840 3b04 	str.w	r3, [r0], #4
    7a84:	f851 3b04 	ldr.w	r3, [r1], #4
    7a88:	f840 3b04 	str.w	r3, [r0], #4
    7a8c:	f851 3b04 	ldr.w	r3, [r1], #4
    7a90:	f840 3b04 	str.w	r3, [r0], #4
    7a94:	f851 3b04 	ldr.w	r3, [r1], #4
    7a98:	f840 3b04 	str.w	r3, [r0], #4
    7a9c:	f851 3b04 	ldr.w	r3, [r1], #4
    7aa0:	f840 3b04 	str.w	r3, [r0], #4
    7aa4:	f851 3b04 	ldr.w	r3, [r1], #4
    7aa8:	f840 3b04 	str.w	r3, [r0], #4
    7aac:	f851 3b04 	ldr.w	r3, [r1], #4
    7ab0:	f840 3b04 	str.w	r3, [r0], #4
    7ab4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ab8:	f840 3b04 	str.w	r3, [r0], #4
    7abc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ac0:	f840 3b04 	str.w	r3, [r0], #4
    7ac4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ac8:	f840 3b04 	str.w	r3, [r0], #4
    7acc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ad0:	f840 3b04 	str.w	r3, [r0], #4
    7ad4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ad8:	f840 3b04 	str.w	r3, [r0], #4
    7adc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ae0:	f840 3b04 	str.w	r3, [r0], #4
    7ae4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ae8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7aec:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    7aee:	d2bd      	bcs.n	7a6c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    7af0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    7af2:	d311      	bcc.n	7b18 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7af4:	f851 3b04 	ldr.w	r3, [r1], #4
    7af8:	f840 3b04 	str.w	r3, [r0], #4
    7afc:	f851 3b04 	ldr.w	r3, [r1], #4
    7b00:	f840 3b04 	str.w	r3, [r0], #4
    7b04:	f851 3b04 	ldr.w	r3, [r1], #4
    7b08:	f840 3b04 	str.w	r3, [r0], #4
    7b0c:	f851 3b04 	ldr.w	r3, [r1], #4
    7b10:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    7b14:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    7b16:	d2ed      	bcs.n	7af4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    7b18:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    7b1a:	d305      	bcc.n	7b28 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    7b1c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    7b20:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    7b24:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    7b26:	d2f9      	bcs.n	7b1c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    7b28:	3204      	adds	r2, #4
	beq	.Ldone
    7b2a:	d008      	beq.n	7b3e <memcpy+0xe2>

	lsls	r2, r2, #31
    7b2c:	07d2      	lsls	r2, r2, #31
	itt ne
    7b2e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    7b30:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7b34:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    7b38:	d301      	bcc.n	7b3e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    7b3a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    7b3c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7b3e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7b40:	4770      	bx	lr
    7b42:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    7b44:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    7b46:	d313      	bcc.n	7b70 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    7b48:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    7b4a:	d08d      	beq.n	7a68 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    7b4c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    7b50:	d08a      	beq.n	7a68 <memcpy+0xc>

	rsb	r3, #4
    7b52:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    7b56:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    7b58:	07db      	lsls	r3, r3, #31
	itt ne
    7b5a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    7b5c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7b60:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    7b64:	d380      	bcc.n	7a68 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    7b66:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    7b6a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    7b6e:	e77b      	b.n	7a68 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    7b70:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    7b72:	d3d9      	bcc.n	7b28 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    7b74:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    7b76:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    7b7a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    7b7e:	d2f9      	bcs.n	7b74 <memcpy+0x118>

	ldrb	r3, [r1]
    7b80:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    7b82:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    7b84:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    7b86:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    7b88:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    7b8a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7b8c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7b8e:	4770      	bx	lr

00007b90 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    7b90:	f001 bd00 	b.w	9594 <free>

00007b94 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    7b94:	f101 3cff 	add.w	ip, r1, #4294967295
{
    7b98:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    7b9a:	4666      	mov	r6, ip
	int i=0, j;
    7b9c:	2400      	movs	r4, #0
    7b9e:	e000      	b.n	7ba2 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    7ba0:	3401      	adds	r4, #1
		digit = val % radix;
    7ba2:	fbb0 f5f2 	udiv	r5, r0, r2
    7ba6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7baa:	2b09      	cmp	r3, #9
    7bac:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    7bb0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7bb4:	fa5f fe8e 	uxtb.w	lr, lr
    7bb8:	bf98      	it	ls
    7bba:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    7bbe:	4290      	cmp	r0, r2
		val /= radix;
    7bc0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7bc2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    7bc6:	d2eb      	bcs.n	7ba0 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    7bc8:	1c63      	adds	r3, r4, #1
    7bca:	2200      	movs	r2, #0
    7bcc:	18c8      	adds	r0, r1, r3
    7bce:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    7bd0:	b17c      	cbz	r4, 7bf2 <ultoa+0x5e>
		t = buf[j];
    7bd2:	4662      	mov	r2, ip
    7bd4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    7bd8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    7bdc:	eba1 030c 	sub.w	r3, r1, ip
    7be0:	3202      	adds	r2, #2
		buf[j] = buf[i];
    7be2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    7be6:	3b01      	subs	r3, #1
    7be8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    7bea:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    7bec:	4423      	add	r3, r4
    7bee:	429a      	cmp	r2, r3
    7bf0:	dbef      	blt.n	7bd2 <ultoa+0x3e>
	}
	return buf;
}
    7bf2:	4608      	mov	r0, r1
    7bf4:	bd70      	pop	{r4, r5, r6, pc}
    7bf6:	bf00      	nop

00007bf8 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    7bf8:	4a07      	ldr	r2, [pc, #28]	; (7c18 <rtc_get+0x20>)
    7bfa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    7bfc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    7bfe:	4619      	mov	r1, r3
    7c00:	4684      	mov	ip, r0
    7c02:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    7c04:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    7c06:	4299      	cmp	r1, r3
    7c08:	d1f9      	bne.n	7bfe <rtc_get+0x6>
    7c0a:	4584      	cmp	ip, r0
    7c0c:	d1f7      	bne.n	7bfe <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    7c0e:	0bdb      	lsrs	r3, r3, #15
}
    7c10:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    7c14:	4770      	bx	lr
    7c16:	bf00      	nop
    7c18:	400d4000 	.word	0x400d4000

00007c1c <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    7c1c:	4910      	ldr	r1, [pc, #64]	; (7c60 <rtc_set+0x44>)
    7c1e:	688b      	ldr	r3, [r1, #8]
    7c20:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    7c24:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    7c26:	688b      	ldr	r3, [r1, #8]
    7c28:	07db      	lsls	r3, r3, #31
    7c2a:	d4fc      	bmi.n	7c26 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    7c2c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    7c2e:	4a0c      	ldr	r2, [pc, #48]	; (7c60 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    7c30:	f023 0301 	bic.w	r3, r3, #1
    7c34:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    7c36:	6b93      	ldr	r3, [r2, #56]	; 0x38
    7c38:	07d9      	lsls	r1, r3, #31
    7c3a:	d4fc      	bmi.n	7c36 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    7c3c:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    7c3e:	4908      	ldr	r1, [pc, #32]	; (7c60 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    7c40:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    7c42:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    7c44:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    7c46:	6b93      	ldr	r3, [r2, #56]	; 0x38
    7c48:	f043 0301 	orr.w	r3, r3, #1
    7c4c:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    7c4e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7c50:	07db      	lsls	r3, r3, #31
    7c52:	d5fc      	bpl.n	7c4e <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    7c54:	688b      	ldr	r3, [r1, #8]
    7c56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    7c5a:	608b      	str	r3, [r1, #8]
}
    7c5c:	4770      	bx	lr
    7c5e:	bf00      	nop
    7c60:	400d4000 	.word	0x400d4000

00007c64 <unused_interrupt_vector>:
	__disable_irq();
    7c64:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    7c66:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    7c6a:	4c4f      	ldr	r4, [pc, #316]	; (7da8 <unused_interrupt_vector+0x144>)
    7c6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    7c70:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    7c74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    7c78:	4e4c      	ldr	r6, [pc, #304]	; (7dac <unused_interrupt_vector+0x148>)
	while (p < end) {
    7c7a:	4d4d      	ldr	r5, [pc, #308]	; (7db0 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    7c7c:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    7c80:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    7c84:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    7c88:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    7c8c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    7c90:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    7c94:	6993      	ldr	r3, [r2, #24]
    7c96:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    7c9a:	69d3      	ldr	r3, [r2, #28]
    7c9c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    7ca0:	f000 f8d0 	bl	7e44 <tempmonGetTemp>
    7ca4:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    7ca8:	f7ff ffa6 	bl	7bf8 <rtc_get>
	info->len = sizeof(*info) / 4;
    7cac:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    7cae:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    7cb2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    7cb6:	460b      	mov	r3, r1
    7cb8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7cbc:	493d      	ldr	r1, [pc, #244]	; (7db4 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    7cbe:	1d30      	adds	r0, r6, #4
    7cc0:	405a      	eors	r2, r3
    7cc2:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7cc4:	f002 0301 	and.w	r3, r2, #1
    7cc8:	3c01      	subs	r4, #1
    7cca:	fb01 f303 	mul.w	r3, r1, r3
    7cce:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    7cd2:	d1f7      	bne.n	7cc4 <unused_interrupt_vector+0x60>
	while (p < end) {
    7cd4:	42a8      	cmp	r0, r5
    7cd6:	d002      	beq.n	7cde <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    7cd8:	6873      	ldr	r3, [r6, #4]
    7cda:	4606      	mov	r6, r0
    7cdc:	e7ef      	b.n	7cbe <unused_interrupt_vector+0x5a>
	info->crc = crc;
    7cde:	4b32      	ldr	r3, [pc, #200]	; (7da8 <unused_interrupt_vector+0x144>)
    7ce0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    7ce4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7cec:	492f      	ldr	r1, [pc, #188]	; (7dac <unused_interrupt_vector+0x148>)
    7cee:	4a32      	ldr	r2, [pc, #200]	; (7db8 <unused_interrupt_vector+0x154>)
    7cf0:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    7cf4:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    7cf8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7cfc:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7d00:	4a2e      	ldr	r2, [pc, #184]	; (7dbc <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    7d02:	2502      	movs	r5, #2
    7d04:	482e      	ldr	r0, [pc, #184]	; (7dc0 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7d06:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7d08:	492e      	ldr	r1, [pc, #184]	; (7dc4 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7d0a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    7d0e:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    7d10:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    7d12:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7d14:	482c      	ldr	r0, [pc, #176]	; (7dc8 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    7d16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7d1e:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7d20:	680b      	ldr	r3, [r1, #0]
    7d22:	4283      	cmp	r3, r0
    7d24:	d83d      	bhi.n	7da2 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    7d26:	4d26      	ldr	r5, [pc, #152]	; (7dc0 <unused_interrupt_vector+0x15c>)
    7d28:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    7d2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7d2e:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    7d32:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7d34:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    7d36:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    7d3a:	4924      	ldr	r1, [pc, #144]	; (7dcc <unused_interrupt_vector+0x168>)
    7d3c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7d40:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    7d44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    7d48:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    7d4c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    7d50:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    7d54:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    7d58:	e001      	b.n	7d5e <unused_interrupt_vector+0xfa>
		usb_isr();
    7d5a:	f000 f965 	bl	8028 <usb_isr>
		if (PIT_TFLG0) {
    7d5e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7d62:	2b00      	cmp	r3, #0
    7d64:	d0f9      	beq.n	7d5a <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    7d66:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    7d68:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    7d6c:	2c4f      	cmp	r4, #79	; 0x4f
    7d6e:	d9f4      	bls.n	7d5a <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7d70:	4b17      	ldr	r3, [pc, #92]	; (7dd0 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    7d72:	2002      	movs	r0, #2
    7d74:	4917      	ldr	r1, [pc, #92]	; (7dd4 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7d76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    7d7a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7d7e:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7d80:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7d84:	b93b      	cbnz	r3, 7d96 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    7d86:	4814      	ldr	r0, [pc, #80]	; (7dd8 <unused_interrupt_vector+0x174>)
    7d88:	4914      	ldr	r1, [pc, #80]	; (7ddc <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7d8a:	4a0d      	ldr	r2, [pc, #52]	; (7dc0 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    7d8c:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7d8e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    7d92:	2b00      	cmp	r3, #0
    7d94:	d0fa      	beq.n	7d8c <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    7d96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7d9a:	4a11      	ldr	r2, [pc, #68]	; (7de0 <unused_interrupt_vector+0x17c>)
    7d9c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    7da0:	e7fe      	b.n	7da0 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7da2:	f7ff fbfb 	bl	759c <set_arm_clock>
    7da6:	e7be      	b.n	7d26 <unused_interrupt_vector+0xc2>
    7da8:	2027ff00 	.word	0x2027ff00
    7dac:	2027ff80 	.word	0x2027ff80
    7db0:	2027ffa8 	.word	0x2027ffa8
    7db4:	edb88320 	.word	0xedb88320
    7db8:	2027ffa0 	.word	0x2027ffa0
    7dbc:	400fc000 	.word	0x400fc000
    7dc0:	40084000 	.word	0x40084000
    7dc4:	20008750 	.word	0x20008750
    7dc8:	0bcd3d80 	.word	0x0bcd3d80
    7dcc:	00249f00 	.word	0x00249f00
    7dd0:	400d9000 	.word	0x400d9000
    7dd4:	402e0000 	.word	0x402e0000
    7dd8:	400f8000 	.word	0x400f8000
    7ddc:	0bad00f1 	.word	0x0bad00f1
    7de0:	05fa0004 	.word	0x05fa0004

00007de4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    7de4:	490a      	ldr	r1, [pc, #40]	; (7e10 <_sbrk+0x2c>)
    7de6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    7de8:	b138      	cbz	r0, 7dfa <_sbrk+0x16>
{
    7dea:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    7dec:	1813      	adds	r3, r2, r0
    7dee:	4809      	ldr	r0, [pc, #36]	; (7e14 <_sbrk+0x30>)
    7df0:	4283      	cmp	r3, r0
    7df2:	d804      	bhi.n	7dfe <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    7df4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    7df6:	600b      	str	r3, [r1, #0]
}
    7df8:	bd08      	pop	{r3, pc}
    7dfa:	4610      	mov	r0, r2
    7dfc:	4770      	bx	lr
                        errno = ENOMEM;
    7dfe:	f003 fc2f 	bl	b660 <__errno>
    7e02:	230c      	movs	r3, #12
                        return (void *)-1;
    7e04:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    7e08:	6003      	str	r3, [r0, #0]
}
    7e0a:	4610      	mov	r0, r2
    7e0c:	bd08      	pop	{r3, pc}
    7e0e:	bf00      	nop
    7e10:	20008768 	.word	0x20008768
    7e14:	20280000 	.word	0x20280000

00007e18 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    7e18:	2000      	movs	r0, #0
    7e1a:	4770      	bx	lr

00007e1c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    7e1c:	f04f 30ff 	mov.w	r0, #4294967295
    7e20:	4770      	bx	lr
    7e22:	bf00      	nop

00007e24 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    7e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    7e28:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    7e2a:	604b      	str	r3, [r1, #4]
}
    7e2c:	4770      	bx	lr
    7e2e:	bf00      	nop

00007e30 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    7e30:	2001      	movs	r0, #1
    7e32:	4770      	bx	lr

00007e34 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    7e34:	f04f 30ff 	mov.w	r0, #4294967295
    7e38:	4770      	bx	lr
    7e3a:	bf00      	nop

00007e3c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    7e3c:	bf30      	wfi
    7e3e:	e7fd      	b.n	7e3c <abort>

00007e40 <Panic_Temp_isr>:
  unused_interrupt_vector();
    7e40:	f7ff bf10 	b.w	7c64 <unused_interrupt_vector>

00007e44 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    7e44:	4a12      	ldr	r2, [pc, #72]	; (7e90 <tempmonGetTemp+0x4c>)
    7e46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    7e4a:	075b      	lsls	r3, r3, #29
    7e4c:	d5fb      	bpl.n	7e46 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7e4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7e52:	4810      	ldr	r0, [pc, #64]	; (7e94 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7e54:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7e58:	490f      	ldr	r1, [pc, #60]	; (7e98 <tempmonGetTemp+0x54>)
    7e5a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7e5e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7e62:	ed91 6a00 	vldr	s12, [r1]
    7e66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    7e6a:	4a0c      	ldr	r2, [pc, #48]	; (7e9c <tempmonGetTemp+0x58>)
    7e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7e70:	4b0b      	ldr	r3, [pc, #44]	; (7ea0 <tempmonGetTemp+0x5c>)
    7e72:	edd2 6a00 	vldr	s13, [r2]
    7e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7e7a:	ed93 7a00 	vldr	s14, [r3]
    7e7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    7e82:	ee67 7a86 	vmul.f32	s15, s15, s12
    7e86:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    7e8a:	ee37 0a40 	vsub.f32	s0, s14, s0
    7e8e:	4770      	bx	lr
    7e90:	400d8100 	.word	0x400d8100
    7e94:	2001f0e8 	.word	0x2001f0e8
    7e98:	2001f0f0 	.word	0x2001f0f0
    7e9c:	2001f0f4 	.word	0x2001f0f4
    7ea0:	2001f0ec 	.word	0x2001f0ec

00007ea4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    7ea4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    7ea6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    7ea8:	b11b      	cbz	r3, 7eb2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    7eaa:	6853      	ldr	r3, [r2, #4]
    7eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7eb0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    7eb2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    7eb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    7eb6:	b33c      	cbz	r4, 7f08 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    7eb8:	4b1a      	ldr	r3, [pc, #104]	; (7f24 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    7eba:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    7ebc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    7ec0:	420c      	tst	r4, r1
    7ec2:	d11d      	bne.n	7f00 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    7ec4:	4e18      	ldr	r6, [pc, #96]	; (7f28 <schedule_transfer+0x84>)
    7ec6:	6877      	ldr	r7, [r6, #4]
    7ec8:	e004      	b.n	7ed4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    7eca:	6874      	ldr	r4, [r6, #4]
    7ecc:	1be4      	subs	r4, r4, r7
    7ece:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    7ed2:	d20b      	bcs.n	7eec <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    7ed4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    7ed8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    7edc:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    7ee0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    7ee4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    7ee8:	0464      	lsls	r4, r4, #17
    7eea:	d5ee      	bpl.n	7eca <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    7eec:	400d      	ands	r5, r1
    7eee:	d107      	bne.n	7f00 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    7ef0:	4c0c      	ldr	r4, [pc, #48]	; (7f24 <schedule_transfer+0x80>)
		endpoint->status = 0;
    7ef2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    7ef6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7efa:	430b      	orrs	r3, r1
    7efc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    7f00:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7f02:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    7f04:	bcf0      	pop	{r4, r5, r6, r7}
    7f06:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    7f08:	4d06      	ldr	r5, [pc, #24]	; (7f24 <schedule_transfer+0x80>)
	endpoint->status = 0;
    7f0a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    7f0e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    7f12:	430b      	orrs	r3, r1
    7f14:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    7f18:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    7f1a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7f1c:	b662      	cpsie	i
}
    7f1e:	bcf0      	pop	{r4, r5, r6, r7}
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop
    7f24:	402e0000 	.word	0x402e0000
    7f28:	e0001000 	.word	0xe0001000

00007f2c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    7f2c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    7f2e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    7f30:	b19d      	cbz	r5, 7f5a <run_callbacks+0x2e>
    7f32:	4606      	mov	r6, r0
    7f34:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    7f36:	2400      	movs	r4, #0
    7f38:	e003      	b.n	7f42 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    7f3a:	6812      	ldr	r2, [r2, #0]
		count++;
    7f3c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    7f3e:	2a01      	cmp	r2, #1
    7f40:	d00c      	beq.n	7f5c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    7f42:	6853      	ldr	r3, [r2, #4]
    7f44:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    7f48:	d0f7      	beq.n	7f3a <run_callbacks+0xe>
			ep->first_transfer = t;
    7f4a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    7f4c:	b12c      	cbz	r4, 7f5a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    7f4e:	4628      	mov	r0, r5
		ep->callback_function(first);
    7f50:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    7f52:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    7f54:	4798      	blx	r3
	while (count) {
    7f56:	3c01      	subs	r4, #1
    7f58:	d1f9      	bne.n	7f4e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    7f5a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    7f5c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    7f60:	e7f4      	b.n	7f4c <run_callbacks+0x20>
    7f62:	bf00      	nop

00007f64 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    7f64:	b430      	push	{r4, r5}
	if (len > 0) {
    7f66:	b9d9      	cbnz	r1, 7fa0 <endpoint0_transmit.constprop.0+0x3c>
    7f68:	4c1f      	ldr	r4, [pc, #124]	; (7fe8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    7f6a:	4b20      	ldr	r3, [pc, #128]	; (7fec <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    7f6c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7f6e:	4a20      	ldr	r2, [pc, #128]	; (7ff0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    7f70:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7f72:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    7f76:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    7f78:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    7f7a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7f7e:	2480      	movs	r4, #128	; 0x80
    7f80:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7f82:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    7f86:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    7f8a:	481a      	ldr	r0, [pc, #104]	; (7ff4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    7f8c:	432b      	orrs	r3, r5
    7f8e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    7f92:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    7f94:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d1fb      	bne.n	7f94 <endpoint0_transmit.constprop.0+0x30>
}
    7f9c:	bc30      	pop	{r4, r5}
    7f9e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7fa0:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    7fa2:	4b15      	ldr	r3, [pc, #84]	; (7ff8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    7fa4:	4c10      	ldr	r4, [pc, #64]	; (7fe8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    7fa6:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7fa8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    7fac:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    7fae:	4a10      	ldr	r2, [pc, #64]	; (7ff0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7fb0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7fb2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    7fb6:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7fb8:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7fba:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    7fbe:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7fc0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7fc2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7fc6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7fca:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    7fcc:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7fce:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    7fd0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    7fd2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    7fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7fda:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    7fde:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d1fb      	bne.n	7fde <endpoint0_transmit.constprop.0+0x7a>
    7fe6:	e7c0      	b.n	7f6a <endpoint0_transmit.constprop.0+0x6>
    7fe8:	20000000 	.word	0x20000000
    7fec:	200092c0 	.word	0x200092c0
    7ff0:	402e0000 	.word	0x402e0000
    7ff4:	2001e794 	.word	0x2001e794
    7ff8:	200092e0 	.word	0x200092e0

00007ffc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    7ffc:	4908      	ldr	r1, [pc, #32]	; (8020 <usb_stop_sof_interrupts+0x24>)
    7ffe:	2201      	movs	r2, #1
    8000:	780b      	ldrb	r3, [r1, #0]
    8002:	fa02 f000 	lsl.w	r0, r2, r0
    8006:	ea23 0000 	bic.w	r0, r3, r0
    800a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    800c:	b930      	cbnz	r0, 801c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    800e:	4a05      	ldr	r2, [pc, #20]	; (8024 <usb_stop_sof_interrupts+0x28>)
    8010:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    8014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8018:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    801c:	4770      	bx	lr
    801e:	bf00      	nop
    8020:	2001f60e 	.word	0x2001f60e
    8024:	402e0000 	.word	0x402e0000

00008028 <usb_isr>:
{
    8028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    802c:	4c97      	ldr	r4, [pc, #604]	; (828c <usb_isr+0x264>)
{
    802e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    8030:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8034:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    8036:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    803a:	d553      	bpl.n	80e4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    803c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8040:	2a00      	cmp	r2, #0
    8042:	d04a      	beq.n	80da <usb_isr+0xb2>
    8044:	4e92      	ldr	r6, [pc, #584]	; (8290 <usb_isr+0x268>)
    8046:	f8df a260 	ldr.w	sl, [pc, #608]	; 82a8 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    804a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 82c0 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    804e:	f8df b274 	ldr.w	fp, [pc, #628]	; 82c4 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8052:	f8df 8274 	ldr.w	r8, [pc, #628]	; 82c8 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    8056:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    805a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    805e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    8066:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    806a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    806e:	049d      	lsls	r5, r3, #18
    8070:	d5f5      	bpl.n	805e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8072:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    807a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    807e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8082:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8086:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    808a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    808e:	d1fa      	bne.n	8086 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    8090:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    8092:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    8094:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    8098:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    809c:	f000 81cf 	beq.w	843e <usb_isr+0x416>
    80a0:	f200 80db 	bhi.w	825a <usb_isr+0x232>
    80a4:	f240 3102 	movw	r1, #770	; 0x302
    80a8:	428b      	cmp	r3, r1
    80aa:	f000 81e7 	beq.w	847c <usb_isr+0x454>
    80ae:	f200 809a 	bhi.w	81e6 <usb_isr+0x1be>
    80b2:	2b82      	cmp	r3, #130	; 0x82
    80b4:	f000 81cb 	beq.w	844e <usb_isr+0x426>
    80b8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    80bc:	f040 808a 	bne.w	81d4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    80c0:	f010 0f78 	tst.w	r0, #120	; 0x78
    80c4:	b283      	uxth	r3, r0
    80c6:	f000 8203 	beq.w	84d0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    80ca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    80ce:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    80d2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    80d6:	2a00      	cmp	r2, #0
    80d8:	d1bd      	bne.n	8056 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    80da:	4a6c      	ldr	r2, [pc, #432]	; (828c <usb_isr+0x264>)
    80dc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    80e0:	2b00      	cmp	r3, #0
    80e2:	d142      	bne.n	816a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    80e4:	067e      	lsls	r6, r7, #25
    80e6:	d516      	bpl.n	8116 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    80e8:	4b68      	ldr	r3, [pc, #416]	; (828c <usb_isr+0x264>)
    80ea:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    80ee:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    80f2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    80f6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    80fa:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    80fe:	2c00      	cmp	r4, #0
    8100:	d1fb      	bne.n	80fa <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8102:	f04f 32ff 	mov.w	r2, #4294967295
    8106:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    810a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    810e:	f000 fd29 	bl	8b64 <usb_serial_reset>
		endpointN_notify_mask = 0;
    8112:	4b60      	ldr	r3, [pc, #384]	; (8294 <usb_isr+0x26c>)
    8114:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    8116:	01fc      	lsls	r4, r7, #7
    8118:	d503      	bpl.n	8122 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    811a:	4b5f      	ldr	r3, [pc, #380]	; (8298 <usb_isr+0x270>)
    811c:	681b      	ldr	r3, [r3, #0]
    811e:	b103      	cbz	r3, 8122 <usb_isr+0xfa>
    8120:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    8122:	01b8      	lsls	r0, r7, #6
    8124:	d503      	bpl.n	812e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8126:	4b5d      	ldr	r3, [pc, #372]	; (829c <usb_isr+0x274>)
    8128:	681b      	ldr	r3, [r3, #0]
    812a:	b103      	cbz	r3, 812e <usb_isr+0x106>
    812c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    812e:	0779      	lsls	r1, r7, #29
    8130:	d508      	bpl.n	8144 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8132:	4b56      	ldr	r3, [pc, #344]	; (828c <usb_isr+0x264>)
    8134:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8138:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    813c:	d047      	beq.n	81ce <usb_isr+0x1a6>
			usb_high_speed = 1;
    813e:	4b58      	ldr	r3, [pc, #352]	; (82a0 <usb_isr+0x278>)
    8140:	2201      	movs	r2, #1
    8142:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8144:	4b51      	ldr	r3, [pc, #324]	; (828c <usb_isr+0x264>)
    8146:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    814a:	061a      	lsls	r2, r3, #24
    814c:	d50a      	bpl.n	8164 <usb_isr+0x13c>
    814e:	063b      	lsls	r3, r7, #24
    8150:	d508      	bpl.n	8164 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    8152:	4a54      	ldr	r2, [pc, #336]	; (82a4 <usb_isr+0x27c>)
    8154:	7813      	ldrb	r3, [r2, #0]
    8156:	b12b      	cbz	r3, 8164 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    8158:	3b01      	subs	r3, #1
    815a:	b2db      	uxtb	r3, r3
    815c:	7013      	strb	r3, [r2, #0]
    815e:	2b00      	cmp	r3, #0
    8160:	f000 8272 	beq.w	8648 <usb_isr+0x620>
}
    8164:	b003      	add	sp, #12
    8166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    816a:	494f      	ldr	r1, [pc, #316]	; (82a8 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    816c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8170:	6808      	ldr	r0, [r1, #0]
    8172:	4203      	tst	r3, r0
    8174:	f040 81d1 	bne.w	851a <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    8178:	4a46      	ldr	r2, [pc, #280]	; (8294 <usb_isr+0x26c>)
    817a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    817c:	401c      	ands	r4, r3
    817e:	d0b1      	beq.n	80e4 <usb_isr+0xbc>
				while (tx) {
    8180:	ea5f 4814 	movs.w	r8, r4, lsr #16
    8184:	d010      	beq.n	81a8 <usb_isr+0x180>
    8186:	4e42      	ldr	r6, [pc, #264]	; (8290 <usb_isr+0x268>)
					tx &= ~(1<<p);
    8188:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    818c:	fa98 f5a8 	rbit	r5, r8
    8190:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8194:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    8198:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    819c:	3040      	adds	r0, #64	; 0x40
    819e:	f7ff fec5 	bl	7f2c <run_callbacks>
				while (tx) {
    81a2:	ea38 0805 	bics.w	r8, r8, r5
    81a6:	d1f1      	bne.n	818c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    81a8:	b2a4      	uxth	r4, r4
				while(rx) {
    81aa:	2c00      	cmp	r4, #0
    81ac:	d09a      	beq.n	80e4 <usb_isr+0xbc>
    81ae:	4e38      	ldr	r6, [pc, #224]	; (8290 <usb_isr+0x268>)
					rx &= ~(1<<p);
    81b0:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    81b4:	fa94 f5a4 	rbit	r5, r4
    81b8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    81bc:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    81c0:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    81c4:	f7ff feb2 	bl	7f2c <run_callbacks>
				while(rx) {
    81c8:	43ac      	bics	r4, r5
    81ca:	d1f3      	bne.n	81b4 <usb_isr+0x18c>
    81cc:	e78a      	b.n	80e4 <usb_isr+0xbc>
			usb_high_speed = 0;
    81ce:	4a34      	ldr	r2, [pc, #208]	; (82a0 <usb_isr+0x278>)
    81d0:	7013      	strb	r3, [r2, #0]
    81d2:	e7b7      	b.n	8144 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    81d4:	2b80      	cmp	r3, #128	; 0x80
    81d6:	f47f af78 	bne.w	80ca <usb_isr+0xa2>
		reply_buffer[0] = 0;
    81da:	4834      	ldr	r0, [pc, #208]	; (82ac <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    81dc:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    81de:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    81e0:	f7ff fec0 	bl	7f64 <endpoint0_transmit.constprop.0>
		return;
    81e4:	e775      	b.n	80d2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    81e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    81ea:	f000 810b 	beq.w	8404 <usb_isr+0x3dc>
    81ee:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    81f2:	2b01      	cmp	r3, #1
    81f4:	f63f af69 	bhi.w	80ca <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    81f8:	4b2d      	ldr	r3, [pc, #180]	; (82b0 <usb_isr+0x288>)
    81fa:	685d      	ldr	r5, [r3, #4]
    81fc:	2d00      	cmp	r5, #0
    81fe:	f43f af64 	beq.w	80ca <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8202:	fa1f fc8c 	uxth.w	ip, ip
    8206:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    820a:	e004      	b.n	8216 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    820c:	691d      	ldr	r5, [r3, #16]
    820e:	330c      	adds	r3, #12
    8210:	2d00      	cmp	r5, #0
    8212:	f43f af5a 	beq.w	80ca <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8216:	881a      	ldrh	r2, [r3, #0]
    8218:	4572      	cmp	r2, lr
    821a:	d1f7      	bne.n	820c <usb_isr+0x1e4>
    821c:	885a      	ldrh	r2, [r3, #2]
    821e:	4562      	cmp	r2, ip
    8220:	d1f4      	bne.n	820c <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    8222:	ea4f 221e 	mov.w	r2, lr, lsr #8
    8226:	2a03      	cmp	r2, #3
    8228:	f000 81a5 	beq.w	8576 <usb_isr+0x54e>
					datalen = list->length;
    822c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    822e:	0c00      	lsrs	r0, r0, #16
    8230:	4282      	cmp	r2, r0
    8232:	bf28      	it	cs
    8234:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    8236:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    823a:	f040 81a1 	bne.w	8580 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    823e:	4b18      	ldr	r3, [pc, #96]	; (82a0 <usb_isr+0x278>)
    8240:	491c      	ldr	r1, [pc, #112]	; (82b4 <usb_isr+0x28c>)
    8242:	7818      	ldrb	r0, [r3, #0]
    8244:	4b1c      	ldr	r3, [pc, #112]	; (82b8 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8246:	9201      	str	r2, [sp, #4]
    8248:	2800      	cmp	r0, #0
    824a:	bf18      	it	ne
    824c:	4619      	movne	r1, r3
    824e:	481b      	ldr	r0, [pc, #108]	; (82bc <usb_isr+0x294>)
    8250:	f7ff fc04 	bl	7a5c <memcpy>
    8254:	4d19      	ldr	r5, [pc, #100]	; (82bc <usb_isr+0x294>)
    8256:	9a01      	ldr	r2, [sp, #4]
    8258:	e1e1      	b.n	861e <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    825a:	f242 2121 	movw	r1, #8737	; 0x2221
    825e:	428b      	cmp	r3, r1
    8260:	d07c      	beq.n	835c <usb_isr+0x334>
    8262:	d933      	bls.n	82cc <usb_isr+0x2a4>
    8264:	f242 3121 	movw	r1, #8993	; 0x2321
    8268:	428b      	cmp	r3, r1
    826a:	f000 8081 	beq.w	8370 <usb_isr+0x348>
    826e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    8272:	428b      	cmp	r3, r1
    8274:	f47f af29 	bne.w	80ca <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    8278:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    827c:	b283      	uxth	r3, r0
    827e:	f47f af24 	bne.w	80ca <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    8282:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    8286:	f363 0c0f 	bfi	ip, r3, #0, #16
    828a:	e7b5      	b.n	81f8 <usb_isr+0x1d0>
    828c:	402e0000 	.word	0x402e0000
    8290:	20000000 	.word	0x20000000
    8294:	2001e798 	.word	0x2001e798
    8298:	2001f5ec 	.word	0x2001f5ec
    829c:	2001f5f0 	.word	0x2001f5f0
    82a0:	2001f614 	.word	0x2001f614
    82a4:	2001f615 	.word	0x2001f615
    82a8:	2001e794 	.word	0x2001e794
    82ac:	2001f0b0 	.word	0x2001f0b0
    82b0:	20008584 	.word	0x20008584
    82b4:	6000279c 	.word	0x6000279c
    82b8:	60002800 	.word	0x60002800
    82bc:	20200000 	.word	0x20200000
    82c0:	2001e78c 	.word	0x2001e78c
    82c4:	b8c6cf5d 	.word	0xb8c6cf5d
    82c8:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    82cc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    82d0:	d066      	beq.n	83a0 <usb_isr+0x378>
    82d2:	f242 0121 	movw	r1, #8225	; 0x2021
    82d6:	428b      	cmp	r3, r1
    82d8:	f47f aef7 	bne.w	80ca <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    82dc:	0c03      	lsrs	r3, r0, #16
    82de:	2b07      	cmp	r3, #7
    82e0:	f47f aef3 	bne.w	80ca <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    82e4:	4bb2      	ldr	r3, [pc, #712]	; (85b0 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    82e6:	49b3      	ldr	r1, [pc, #716]	; (85b4 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    82e8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    82ea:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    82ec:	49b2      	ldr	r1, [pc, #712]	; (85b8 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    82ee:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    82f0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    82f4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    82f8:	2201      	movs	r2, #1
    82fa:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    82fc:	4aaf      	ldr	r2, [pc, #700]	; (85bc <usb_isr+0x594>)
    82fe:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8300:	4aaf      	ldr	r2, [pc, #700]	; (85c0 <usb_isr+0x598>)
    8302:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    8304:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    8308:	f041 0101 	orr.w	r1, r1, #1
    830c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8310:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8314:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8318:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    831a:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    831c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8320:	2b00      	cmp	r3, #0
    8322:	d1fb      	bne.n	831c <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    8324:	4aa7      	ldr	r2, [pc, #668]	; (85c4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8326:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8328:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    832a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    832c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    832e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8330:	f248 0380 	movw	r3, #32896	; 0x8080
    8334:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8336:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    833a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    833e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8346:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    834a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    834e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    8352:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8356:	2b00      	cmp	r3, #0
    8358:	d1fb      	bne.n	8352 <usb_isr+0x32a>
    835a:	e6ba      	b.n	80d2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    835c:	b280      	uxth	r0, r0
    835e:	b938      	cbnz	r0, 8370 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8360:	4b99      	ldr	r3, [pc, #612]	; (85c8 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8362:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8366:	6819      	ldr	r1, [r3, #0]
    8368:	4b98      	ldr	r3, [pc, #608]	; (85cc <usb_isr+0x5a4>)
    836a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    836c:	4b98      	ldr	r3, [pc, #608]	; (85d0 <usb_isr+0x5a8>)
    836e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    8370:	4b94      	ldr	r3, [pc, #592]	; (85c4 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    8372:	2200      	movs	r2, #0
    8374:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    8376:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8378:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    837a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    837c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    837e:	2280      	movs	r2, #128	; 0x80
    8380:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8382:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8386:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    838a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    838e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8392:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8396:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    839a:	2b00      	cmp	r3, #0
    839c:	d1fb      	bne.n	8396 <usb_isr+0x36e>
    839e:	e698      	b.n	80d2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    83a0:	f3c2 4207 	ubfx	r2, r2, #16, #8
    83a4:	4b8b      	ldr	r3, [pc, #556]	; (85d4 <usb_isr+0x5ac>)
    83a6:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    83a8:	4b8b      	ldr	r3, [pc, #556]	; (85d8 <usb_isr+0x5b0>)
    83aa:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    83ae:	4b8b      	ldr	r3, [pc, #556]	; (85dc <usb_isr+0x5b4>)
    83b0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    83b4:	4b8a      	ldr	r3, [pc, #552]	; (85e0 <usb_isr+0x5b8>)
    83b6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    83ba:	f000 fbd5 	bl	8b68 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    83be:	2280      	movs	r2, #128	; 0x80
    83c0:	4629      	mov	r1, r5
    83c2:	4888      	ldr	r0, [pc, #544]	; (85e4 <usb_isr+0x5bc>)
    83c4:	f003 f816 	bl	b3f4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    83c8:	4b87      	ldr	r3, [pc, #540]	; (85e8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    83ca:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    83cc:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    83d0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    83d4:	4b7b      	ldr	r3, [pc, #492]	; (85c4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    83d6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    83d8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    83da:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    83dc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    83de:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    83e0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    83e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    83e6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    83ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    83ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    83f2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    83f6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    83fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    83fe:	2b00      	cmp	r3, #0
    8400:	d1fb      	bne.n	83fa <usb_isr+0x3d2>
    8402:	e666      	b.n	80d2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    8404:	4b6f      	ldr	r3, [pc, #444]	; (85c4 <usb_isr+0x59c>)
    8406:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8408:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    840a:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    840c:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    840e:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8410:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8412:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8414:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8418:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    841c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8424:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8428:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    842c:	2b00      	cmp	r3, #0
    842e:	d1fb      	bne.n	8428 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8430:	0c13      	lsrs	r3, r2, #16
    8432:	065b      	lsls	r3, r3, #25
    8434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8438:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    843c:	e649      	b.n	80d2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    843e:	4b65      	ldr	r3, [pc, #404]	; (85d4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8440:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8442:	486a      	ldr	r0, [pc, #424]	; (85ec <usb_isr+0x5c4>)
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8448:	f7ff fd8c 	bl	7f64 <endpoint0_transmit.constprop.0>
		return;
    844c:	e641      	b.n	80d2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    844e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8450:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8454:	f47f ae39 	bne.w	80ca <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    845c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8460:	4a62      	ldr	r2, [pc, #392]	; (85ec <usb_isr+0x5c4>)
    8462:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8464:	0618      	lsls	r0, r3, #24
    8466:	f100 809e 	bmi.w	85a6 <usb_isr+0x57e>
    846a:	07cb      	lsls	r3, r1, #31
    846c:	d501      	bpl.n	8472 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    846e:	2301      	movs	r3, #1
    8470:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8472:	2102      	movs	r1, #2
    8474:	485d      	ldr	r0, [pc, #372]	; (85ec <usb_isr+0x5c4>)
    8476:	f7ff fd75 	bl	7f64 <endpoint0_transmit.constprop.0>
		return;
    847a:	e62a      	b.n	80d2 <usb_isr+0xaa>
		if (endpoint > 7) break;
    847c:	f010 0f78 	tst.w	r0, #120	; 0x78
    8480:	b283      	uxth	r3, r0
    8482:	f47f ae22 	bne.w	80ca <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    848a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    848e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8492:	bf14      	ite	ne
    8494:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8498:	f043 0301 	orreq.w	r3, r3, #1
    849c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    84a0:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    84a2:	4b48      	ldr	r3, [pc, #288]	; (85c4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    84a4:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    84a6:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    84a8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    84aa:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    84ac:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    84ae:	2280      	movs	r2, #128	; 0x80
    84b0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    84b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    84b6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    84ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    84be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    84c2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    84c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    84ca:	2b00      	cmp	r3, #0
    84cc:	d1fb      	bne.n	84c6 <usb_isr+0x49e>
    84ce:	e600      	b.n	80d2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    84d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    84d4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    84d8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    84dc:	bf14      	ite	ne
    84de:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    84e2:	f023 0301 	biceq.w	r3, r3, #1
    84e6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    84ea:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    84ec:	4b35      	ldr	r3, [pc, #212]	; (85c4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    84ee:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    84f0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    84f2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    84f4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    84f6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    84f8:	2280      	movs	r2, #128	; 0x80
    84fa:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    84fc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8500:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8504:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    850c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8510:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8514:	2b00      	cmp	r3, #0
    8516:	d1fb      	bne.n	8510 <usb_isr+0x4e8>
    8518:	e5db      	b.n	80d2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    851a:	2000      	movs	r0, #0
    851c:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    851e:	4926      	ldr	r1, [pc, #152]	; (85b8 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8520:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8522:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8524:	f242 0121 	movw	r1, #8225	; 0x2021
    8528:	428c      	cmp	r4, r1
    852a:	f47f ae25 	bne.w	8178 <usb_isr+0x150>
    852e:	b280      	uxth	r0, r0
    8530:	2800      	cmp	r0, #0
    8532:	f47f ae21 	bne.w	8178 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8536:	492e      	ldr	r1, [pc, #184]	; (85f0 <usb_isr+0x5c8>)
    8538:	4c2e      	ldr	r4, [pc, #184]	; (85f4 <usb_isr+0x5cc>)
    853a:	c903      	ldmia	r1, {r0, r1}
    853c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    853e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8540:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8544:	6020      	str	r0, [r4, #0]
    8546:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8548:	f47f ae16 	bne.w	8178 <usb_isr+0x150>
	__disable_irq();
    854c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    854e:	482a      	ldr	r0, [pc, #168]	; (85f8 <usb_isr+0x5d0>)
    8550:	7801      	ldrb	r1, [r0, #0]
    8552:	f041 0108 	orr.w	r1, r1, #8
    8556:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8558:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    855c:	060d      	lsls	r5, r1, #24
    855e:	d405      	bmi.n	856c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8560:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8562:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8564:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8568:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    856c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    856e:	4a23      	ldr	r2, [pc, #140]	; (85fc <usb_isr+0x5d4>)
    8570:	2150      	movs	r1, #80	; 0x50
    8572:	7011      	strb	r1, [r2, #0]
    8574:	e600      	b.n	8178 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8576:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8578:	782a      	ldrb	r2, [r5, #0]
    857a:	4282      	cmp	r2, r0
    857c:	bf28      	it	cs
    857e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    8580:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8584:	d144      	bne.n	8610 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8586:	4b1e      	ldr	r3, [pc, #120]	; (8600 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8588:	4d1e      	ldr	r5, [pc, #120]	; (8604 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    858a:	7818      	ldrb	r0, [r3, #0]
    858c:	491e      	ldr	r1, [pc, #120]	; (8608 <usb_isr+0x5e0>)
    858e:	4b1f      	ldr	r3, [pc, #124]	; (860c <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8590:	9201      	str	r2, [sp, #4]
    8592:	2800      	cmp	r0, #0
    8594:	bf18      	it	ne
    8596:	4619      	movne	r1, r3
    8598:	4628      	mov	r0, r5
    859a:	f7ff fa5f 	bl	7a5c <memcpy>
					usb_descriptor_buffer[1] = 7;
    859e:	2307      	movs	r3, #7
    85a0:	706b      	strb	r3, [r5, #1]
    85a2:	9a01      	ldr	r2, [sp, #4]
    85a4:	e03b      	b.n	861e <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    85a6:	03c9      	lsls	r1, r1, #15
    85a8:	f53f af61 	bmi.w	846e <usb_isr+0x446>
    85ac:	e761      	b.n	8472 <usb_isr+0x44a>
    85ae:	bf00      	nop
    85b0:	200092e0 	.word	0x200092e0
    85b4:	2001f78c 	.word	0x2001f78c
    85b8:	2000c480 	.word	0x2000c480
    85bc:	00070080 	.word	0x00070080
    85c0:	2002078c 	.word	0x2002078c
    85c4:	200092c0 	.word	0x200092c0
    85c8:	2001f5cc 	.word	0x2001f5cc
    85cc:	2001f5e8 	.word	0x2001f5e8
    85d0:	2001f612 	.word	0x2001f612
    85d4:	2001f613 	.word	0x2001f613
    85d8:	00cc0002 	.word	0x00cc0002
    85dc:	000200c8 	.word	0x000200c8
    85e0:	00c80002 	.word	0x00c80002
    85e4:	20000080 	.word	0x20000080
    85e8:	74d59319 	.word	0x74d59319
    85ec:	2001f0b0 	.word	0x2001f0b0
    85f0:	2001e78c 	.word	0x2001e78c
    85f4:	2001f5e0 	.word	0x2001f5e0
    85f8:	2001f60e 	.word	0x2001f60e
    85fc:	2001f615 	.word	0x2001f615
    8600:	2001f614 	.word	0x2001f614
    8604:	20200000 	.word	0x20200000
    8608:	60002800 	.word	0x60002800
    860c:	6000279c 	.word	0x6000279c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8610:	4629      	mov	r1, r5
    8612:	4d10      	ldr	r5, [pc, #64]	; (8654 <usb_isr+0x62c>)
    8614:	9201      	str	r2, [sp, #4]
    8616:	4628      	mov	r0, r5
    8618:	f7ff fa20 	bl	7a5c <memcpy>
    861c:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    861e:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8622:	4415      	add	r5, r2
	asm("dsb");
    8624:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8628:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    862c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    8630:	3320      	adds	r3, #32
	} while (location < end_addr);
    8632:	429d      	cmp	r5, r3
    8634:	d8fa      	bhi.n	862c <usb_isr+0x604>
	asm("dsb");
    8636:	f3bf 8f4f 	dsb	sy
	asm("isb");
    863a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    863e:	4805      	ldr	r0, [pc, #20]	; (8654 <usb_isr+0x62c>)
    8640:	4611      	mov	r1, r2
    8642:	f7ff fc8f 	bl	7f64 <endpoint0_transmit.constprop.0>
				return;
    8646:	e544      	b.n	80d2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8648:	2003      	movs	r0, #3
    864a:	f7ff fcd7 	bl	7ffc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    864e:	f00b fbf7 	bl	13e40 <___reboot_Teensyduino__veneer>
    8652:	bf00      	nop
    8654:	20200000 	.word	0x20200000

00008658 <usb_config_rx>:
{
    8658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    865c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    865e:	1e83      	subs	r3, r0, #2
    8660:	2b02      	cmp	r3, #2
    8662:	d901      	bls.n	8668 <usb_config_rx+0x10>
}
    8664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8668:	f8df 904c 	ldr.w	r9, [pc, #76]	; 86b8 <usb_config_rx+0x60>
    866c:	4615      	mov	r5, r2
    866e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8670:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8672:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8676:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8678:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    867c:	2100      	movs	r1, #0
    867e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8682:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8684:	f002 feb6 	bl	b3f4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8688:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    868c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    868e:	0952      	lsrs	r2, r2, #5
    8690:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8694:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    8698:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    869c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    86a0:	2f00      	cmp	r7, #0
    86a2:	d0df      	beq.n	8664 <usb_config_rx+0xc>
    86a4:	4a03      	ldr	r2, [pc, #12]	; (86b4 <usb_config_rx+0x5c>)
    86a6:	40b3      	lsls	r3, r6
    86a8:	6811      	ldr	r1, [r2, #0]
    86aa:	430b      	orrs	r3, r1
    86ac:	6013      	str	r3, [r2, #0]
}
    86ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86b2:	bf00      	nop
    86b4:	2001e798 	.word	0x2001e798
    86b8:	20000000 	.word	0x20000000

000086bc <usb_config_tx>:
{
    86bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86c0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    86c2:	1e81      	subs	r1, r0, #2
    86c4:	2902      	cmp	r1, #2
    86c6:	d901      	bls.n	86cc <usb_config_tx+0x10>
}
    86c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    86cc:	01c7      	lsls	r7, r0, #7
    86ce:	f8df 904c 	ldr.w	r9, [pc, #76]	; 871c <usb_config_tx+0x60>
    86d2:	4692      	mov	sl, r2
    86d4:	4604      	mov	r4, r0
    86d6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    86d8:	223c      	movs	r2, #60	; 0x3c
    86da:	2100      	movs	r1, #0
    86dc:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    86de:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    86e2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    86e4:	f108 0004 	add.w	r0, r8, #4
    86e8:	f002 fe84 	bl	b3f4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    86ec:	faba f28a 	clz	r2, sl
    86f0:	0952      	lsrs	r2, r2, #5
    86f2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    86f6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    86fa:	2201      	movs	r2, #1
	qh->callback_function = callback;
    86fc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8700:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8704:	2e00      	cmp	r6, #0
    8706:	d0df      	beq.n	86c8 <usb_config_tx+0xc>
    8708:	4b03      	ldr	r3, [pc, #12]	; (8718 <usb_config_tx+0x5c>)
    870a:	3410      	adds	r4, #16
    870c:	6819      	ldr	r1, [r3, #0]
    870e:	40a2      	lsls	r2, r4
    8710:	430a      	orrs	r2, r1
    8712:	601a      	str	r2, [r3, #0]
}
    8714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8718:	2001e798 	.word	0x2001e798
    871c:	20000000 	.word	0x20000000

00008720 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    8720:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    8722:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    8724:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    8726:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    872a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    872e:	b410      	push	{r4}
	transfer->next = 1;
    8730:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    8732:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    8734:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    8738:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    873a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    873e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    8742:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    8744:	6181      	str	r1, [r0, #24]
}
    8746:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    874a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    874e:	4770      	bx	lr

00008750 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8750:	1e83      	subs	r3, r0, #2
{
    8752:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8754:	2b02      	cmp	r3, #2
    8756:	d900      	bls.n	875a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    8758:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    875a:	4b06      	ldr	r3, [pc, #24]	; (8774 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    875c:	f100 0110 	add.w	r1, r0, #16
    8760:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8764:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    8768:	fa0c f101 	lsl.w	r1, ip, r1
    876c:	3040      	adds	r0, #64	; 0x40
    876e:	f7ff bb99 	b.w	7ea4 <schedule_transfer>
    8772:	bf00      	nop
    8774:	20000000 	.word	0x20000000

00008778 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8778:	1e83      	subs	r3, r0, #2
{
    877a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    877c:	2b02      	cmp	r3, #2
    877e:	d900      	bls.n	8782 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8780:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8782:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8784:	4b02      	ldr	r3, [pc, #8]	; (8790 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    8786:	4081      	lsls	r1, r0
    8788:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    878c:	f7ff bb8a 	b.w	7ea4 <schedule_transfer>
    8790:	20000000 	.word	0x20000000

00008794 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8794:	6840      	ldr	r0, [r0, #4]
#endif
}
    8796:	4770      	bx	lr

00008798 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8798:	4a12      	ldr	r2, [pc, #72]	; (87e4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    879a:	4b13      	ldr	r3, [pc, #76]	; (87e8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    879c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    87a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    87a4:	4298      	cmp	r0, r3
{
    87a6:	b510      	push	{r4, lr}
    87a8:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    87aa:	d202      	bcs.n	87b2 <usb_init_serialnumber+0x1a>
    87ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    87b0:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    87b2:	4c0e      	ldr	r4, [pc, #56]	; (87ec <usb_init_serialnumber+0x54>)
    87b4:	a901      	add	r1, sp, #4
    87b6:	220a      	movs	r2, #10
    87b8:	f7ff f9ec 	bl	7b94 <ultoa>
	for (i=0; i<10; i++) {
    87bc:	a901      	add	r1, sp, #4
    87be:	2300      	movs	r3, #0
    87c0:	4620      	mov	r0, r4
		char c = buf[i];
    87c2:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    87c6:	3301      	adds	r3, #1
		if (!c) break;
    87c8:	b13a      	cbz	r2, 87da <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    87ca:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    87cc:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    87d0:	d1f7      	bne.n	87c2 <usb_init_serialnumber+0x2a>
    87d2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    87d4:	7023      	strb	r3, [r4, #0]
}
    87d6:	b004      	add	sp, #16
    87d8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    87da:	005b      	lsls	r3, r3, #1
    87dc:	b2db      	uxtb	r3, r3
    87de:	7023      	strb	r3, [r4, #0]
}
    87e0:	b004      	add	sp, #16
    87e2:	bd10      	pop	{r4, pc}
    87e4:	401f4400 	.word	0x401f4400
    87e8:	00989680 	.word	0x00989680
    87ec:	20008d5c 	.word	0x20008d5c

000087f0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    87f0:	f000 bace 	b.w	8d90 <usb_serial_flush_input>

000087f4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    87f4:	f000 bac0 	b.w	8d78 <usb_serial_available>

000087f8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    87f8:	f000 bb5c 	b.w	8eb4 <usb_serial_flush_output>

000087fc <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    87fc:	f000 bb32 	b.w	8e64 <usb_serial_write_buffer_free>

00008800 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8800:	4608      	mov	r0, r1
    8802:	4611      	mov	r1, r2
    8804:	f000 bb22 	b.w	8e4c <usb_serial_write>

00008808 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    880a:	4c14      	ldr	r4, [pc, #80]	; (885c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    880c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8810:	4e13      	ldr	r6, [pc, #76]	; (8860 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8816:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    881a:	4f12      	ldr	r7, [pc, #72]	; (8864 <rx_queue_transfer+0x5c>)
    881c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8820:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8822:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8826:	4621      	mov	r1, r4
    8828:	883a      	ldrh	r2, [r7, #0]
    882a:	4630      	mov	r0, r6
    882c:	f7ff ff78 	bl	8720 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8830:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8832:	4423      	add	r3, r4
	asm("dsb");
    8834:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8838:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    883c:	3420      	adds	r4, #32
	} while (location < end_addr);
    883e:	42a3      	cmp	r3, r4
    8840:	d8fa      	bhi.n	8838 <rx_queue_transfer+0x30>
	asm("dsb");
    8842:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8846:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    884a:	2003      	movs	r0, #3
    884c:	4631      	mov	r1, r6
    884e:	f7ff ff93 	bl	8778 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8856:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    885c:	20009300 	.word	0x20009300
    8860:	2000a300 	.word	0x2000a300
    8864:	2001f5fc 	.word	0x2001f5fc

00008868 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8868:	4b24      	ldr	r3, [pc, #144]	; (88fc <rx_event+0x94>)
{
    886a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    886e:	881c      	ldrh	r4, [r3, #0]
    8870:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8872:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8874:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8878:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    887a:	2c00      	cmp	r4, #0
    887c:	dd24      	ble.n	88c8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    887e:	4920      	ldr	r1, [pc, #128]	; (8900 <rx_event+0x98>)
		if (head != rx_tail) {
    8880:	4820      	ldr	r0, [pc, #128]	; (8904 <rx_event+0x9c>)
		uint32_t head = rx_head;
    8882:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8884:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8886:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8888:	4e1f      	ldr	r6, [pc, #124]	; (8908 <rx_event+0xa0>)
		if (head != rx_tail) {
    888a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    888c:	481f      	ldr	r0, [pc, #124]	; (890c <rx_event+0xa4>)
		if (head != rx_tail) {
    888e:	d007      	beq.n	88a0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8890:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8894:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8898:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    889c:	4294      	cmp	r4, r2
    889e:	d918      	bls.n	88d2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    88a0:	3301      	adds	r3, #1
		rx_index[i] = 0;
    88a2:	2200      	movs	r2, #0
		rx_count[i] = len;
    88a4:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    88a8:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    88aa:	4e19      	ldr	r6, [pc, #100]	; (8910 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    88ac:	bf88      	it	hi
    88ae:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    88b0:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    88b4:	bf98      	it	ls
    88b6:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    88b8:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    88ba:	4b16      	ldr	r3, [pc, #88]	; (8914 <rx_event+0xac>)
		rx_head = head;
    88bc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    88be:	681a      	ldr	r2, [r3, #0]
    88c0:	4414      	add	r4, r2
    88c2:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    88c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    88c8:	4628      	mov	r0, r5
}
    88ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    88ce:	f7ff bf9b 	b.w	8808 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    88d2:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    88d6:	4910      	ldr	r1, [pc, #64]	; (8918 <rx_event+0xb0>)
    88d8:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    88da:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    88dc:	4408      	add	r0, r1
    88de:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    88e2:	f7ff f8bb 	bl	7a5c <memcpy>
				rx_available += len;
    88e6:	4a0b      	ldr	r2, [pc, #44]	; (8914 <rx_event+0xac>)
				rx_queue_transfer(i);
    88e8:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    88ea:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    88ee:	6813      	ldr	r3, [r2, #0]
    88f0:	4423      	add	r3, r4
}
    88f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    88f6:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    88f8:	f7ff bf86 	b.w	8808 <rx_queue_transfer>
    88fc:	2001f5fc 	.word	0x2001f5fc
    8900:	2001f60c 	.word	0x2001f60c
    8904:	2001f60d 	.word	0x2001f60d
    8908:	2001f0bc 	.word	0x2001f0bc
    890c:	2001f0dc 	.word	0x2001f0dc
    8910:	2001f0cc 	.word	0x2001f0cc
    8914:	2001f0b8 	.word	0x2001f0b8
    8918:	20009300 	.word	0x20009300

0000891c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    891c:	4b1d      	ldr	r3, [pc, #116]	; (8994 <usb_serial_flush_callback+0x78>)
    891e:	781a      	ldrb	r2, [r3, #0]
    8920:	2a00      	cmp	r2, #0
    8922:	d136      	bne.n	8992 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8924:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8928:	4a1b      	ldr	r2, [pc, #108]	; (8998 <usb_serial_flush_callback+0x7c>)
    892a:	7812      	ldrb	r2, [r2, #0]
    892c:	b38a      	cbz	r2, 8992 <usb_serial_flush_callback+0x76>
{
    892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8932:	4d1a      	ldr	r5, [pc, #104]	; (899c <usb_serial_flush_callback+0x80>)
    8934:	882a      	ldrh	r2, [r5, #0]
    8936:	b352      	cbz	r2, 898e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8938:	4e19      	ldr	r6, [pc, #100]	; (89a0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    893a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    893e:	4f19      	ldr	r7, [pc, #100]	; (89a4 <usb_serial_flush_callback+0x88>)
    8940:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8942:	4c19      	ldr	r4, [pc, #100]	; (89a8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8944:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8948:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    894c:	4642      	mov	r2, r8
    894e:	4638      	mov	r0, r7
    8950:	4621      	mov	r1, r4
    8952:	f7ff fee5 	bl	8720 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8956:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    895a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    895e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8962:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8966:	3420      	adds	r4, #32
	} while (location < end_addr);
    8968:	42a2      	cmp	r2, r4
    896a:	d8fa      	bhi.n	8962 <usb_serial_flush_callback+0x46>
	asm("dsb");
    896c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8970:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8974:	2004      	movs	r0, #4
    8976:	4639      	mov	r1, r7
    8978:	f7ff feea 	bl	8750 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    897c:	7833      	ldrb	r3, [r6, #0]
    897e:	3301      	adds	r3, #1
    8980:	b2db      	uxtb	r3, r3
    8982:	2b03      	cmp	r3, #3
    8984:	bf88      	it	hi
    8986:	2300      	movhi	r3, #0
    8988:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    898a:	2300      	movs	r3, #0
    898c:	802b      	strh	r3, [r5, #0]
}
    898e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8992:	4770      	bx	lr
    8994:	2001f611 	.word	0x2001f611
    8998:	2001f613 	.word	0x2001f613
    899c:	2001f5fe 	.word	0x2001f5fe
    89a0:	2001f610 	.word	0x2001f610
    89a4:	2000a400 	.word	0x2000a400
    89a8:	2000a480 	.word	0x2000a480

000089ac <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    89ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89b0:	b085      	sub	sp, #20
	while (size > 0) {
    89b2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    89b6:	2900      	cmp	r1, #0
    89b8:	f000 80bf 	beq.w	8b3a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    89bc:	2300      	movs	r3, #0
    89be:	4c60      	ldr	r4, [pc, #384]	; (8b40 <usb_serial_write.part.0+0x194>)
    89c0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8b5c <usb_serial_write.part.0+0x1b0>
    89c4:	f8df a198 	ldr.w	sl, [pc, #408]	; 8b60 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    89c8:	4f5e      	ldr	r7, [pc, #376]	; (8b44 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    89ca:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    89cc:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    89ce:	4a5e      	ldr	r2, [pc, #376]	; (8b48 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    89d0:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    89d2:	4b5e      	ldr	r3, [pc, #376]	; (8b4c <usb_serial_write.part.0+0x1a0>)
    89d4:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    89d6:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    89da:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    89de:	2b00      	cmp	r3, #0
    89e0:	f040 80a7 	bne.w	8b32 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    89e4:	461e      	mov	r6, r3
		int waiting=0;
    89e6:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    89e8:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    89ea:	4648      	mov	r0, r9
    89ec:	f7ff fed2 	bl	8794 <usb_transfer_status>
			if (!(status & 0x80)) {
    89f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    89f4:	f000 808c 	beq.w	8b10 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    89f8:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    89fc:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    8a00:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    8a04:	b905      	cbnz	r5, 8a08 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    8a06:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d17d      	bne.n	8b08 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8a0c:	683b      	ldr	r3, [r7, #0]
    8a0e:	1b9b      	subs	r3, r3, r6
    8a10:	2b78      	cmp	r3, #120	; 0x78
    8a12:	f200 8087 	bhi.w	8b24 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    8a16:	4b4e      	ldr	r3, [pc, #312]	; (8b50 <usb_serial_write.part.0+0x1a4>)
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	2b00      	cmp	r3, #0
    8a1c:	d074      	beq.n	8b08 <usb_serial_write.part.0+0x15c>
			yield();
    8a1e:	f000 fa93 	bl	8f48 <yield>
			tx_noautoflush = 1;
    8a22:	2201      	movs	r2, #1
		while (!tx_available) {
    8a24:	f8b8 3000 	ldrh.w	r3, [r8]
    8a28:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    8a2a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d0dc      	beq.n	89ea <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8a30:	4a46      	ldr	r2, [pc, #280]	; (8b4c <usb_serial_write.part.0+0x1a0>)
    8a32:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8a36:	7811      	ldrb	r1, [r2, #0]
    8a38:	461a      	mov	r2, r3
    8a3a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    8a3e:	4d45      	ldr	r5, [pc, #276]	; (8b54 <usb_serial_write.part.0+0x1a8>)
    8a40:	02c9      	lsls	r1, r1, #11
    8a42:	4428      	add	r0, r5
		if (size >= tx_available) {
    8a44:	9d01      	ldr	r5, [sp, #4]
    8a46:	4295      	cmp	r5, r2
    8a48:	d217      	bcs.n	8a7a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    8a4a:	9303      	str	r3, [sp, #12]
    8a4c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    8a50:	462a      	mov	r2, r5
    8a52:	f7ff f803 	bl	7a5c <memcpy>
			tx_available -= size;
    8a56:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8a58:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    8a5c:	1b5b      	subs	r3, r3, r5
    8a5e:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8a62:	4b3d      	ldr	r3, [pc, #244]	; (8b58 <usb_serial_write.part.0+0x1ac>)
    8a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    8a68:	f3bf 8f4f 	dsb	sy
			sent += size;
    8a6c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    8a6e:	2300      	movs	r3, #0
			sent += size;
    8a70:	4428      	add	r0, r5
		tx_noautoflush = 0;
    8a72:	7023      	strb	r3, [r4, #0]
}
    8a74:	b005      	add	sp, #20
    8a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8a7a:	4b36      	ldr	r3, [pc, #216]	; (8b54 <usb_serial_write.part.0+0x1a8>)
    8a7c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    8a7e:	9902      	ldr	r1, [sp, #8]
    8a80:	f7fe ffec 	bl	7a5c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    8a84:	2300      	movs	r3, #0
    8a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8a8a:	4629      	mov	r1, r5
    8a8c:	4648      	mov	r0, r9
    8a8e:	f7ff fe47 	bl	8720 <usb_prepare_transfer>
	asm("dsb");
    8a92:	f3bf 8f4f 	dsb	sy
    8a96:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    8a9a:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    8a9e:	4293      	cmp	r3, r2
    8aa0:	bf34      	ite	cc
    8aa2:	2301      	movcc	r3, #1
    8aa4:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    8aa6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    8aaa:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    8aae:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    8ab2:	3520      	adds	r5, #32
	} while (location < end_addr);
    8ab4:	42ab      	cmp	r3, r5
    8ab6:	d1fa      	bne.n	8aae <usb_serial_write.part.0+0x102>
	asm("dsb");
    8ab8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8abc:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8ac0:	2004      	movs	r0, #4
    8ac2:	4649      	mov	r1, r9
    8ac4:	f7ff fe44 	bl	8750 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8ac8:	4a20      	ldr	r2, [pc, #128]	; (8b4c <usb_serial_write.part.0+0x1a0>)
    8aca:	7813      	ldrb	r3, [r2, #0]
    8acc:	3301      	adds	r3, #1
    8ace:	b2db      	uxtb	r3, r3
    8ad0:	2b03      	cmp	r3, #3
    8ad2:	bf84      	itt	hi
    8ad4:	2300      	movhi	r3, #0
    8ad6:	4a1d      	ldrhi	r2, [pc, #116]	; (8b4c <usb_serial_write.part.0+0x1a0>)
    8ad8:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    8ada:	f8b8 3000 	ldrh.w	r3, [r8]
    8ade:	9a01      	ldr	r2, [sp, #4]
    8ae0:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    8ae2:	9a00      	ldr	r2, [sp, #0]
    8ae4:	441a      	add	r2, r3
			size -= tx_available;
    8ae6:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    8ae8:	9200      	str	r2, [sp, #0]
			data += tx_available;
    8aea:	9a02      	ldr	r2, [sp, #8]
    8aec:	441a      	add	r2, r3
			tx_available = 0;
    8aee:	2300      	movs	r3, #0
			data += tx_available;
    8af0:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    8af2:	4a19      	ldr	r2, [pc, #100]	; (8b58 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    8af4:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    8af8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    8afc:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    8b00:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    8b02:	2900      	cmp	r1, #0
    8b04:	f47f af62 	bne.w	89cc <usb_serial_write.part.0+0x20>
	return sent;
    8b08:	9800      	ldr	r0, [sp, #0]
}
    8b0a:	b005      	add	sp, #20
    8b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    8b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8b14:	4b0d      	ldr	r3, [pc, #52]	; (8b4c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    8b16:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8b1a:	7819      	ldrb	r1, [r3, #0]
				break;
    8b1c:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    8b1e:	f8a8 2000 	strh.w	r2, [r8]
				break;
    8b22:	e78a      	b.n	8a3a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    8b24:	2301      	movs	r3, #1
				return sent;
    8b26:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    8b28:	f88a 3000 	strb.w	r3, [sl]
}
    8b2c:	b005      	add	sp, #20
    8b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8b32:	461a      	mov	r2, r3
    8b34:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8b38:	e77f      	b.n	8a3a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    8b3a:	9801      	ldr	r0, [sp, #4]
	return sent;
    8b3c:	e7e5      	b.n	8b0a <usb_serial_write.part.0+0x15e>
    8b3e:	bf00      	nop
    8b40:	2001f611 	.word	0x2001f611
    8b44:	2001f5cc 	.word	0x2001f5cc
    8b48:	2000a400 	.word	0x2000a400
    8b4c:	2001f610 	.word	0x2001f610
    8b50:	2001f613 	.word	0x2001f613
    8b54:	2000a480 	.word	0x2000a480
    8b58:	402e0000 	.word	0x402e0000
    8b5c:	2001f5fe 	.word	0x2001f5fe
    8b60:	2001f60f 	.word	0x2001f60f

00008b64 <usb_serial_reset>:
}
    8b64:	4770      	bx	lr
    8b66:	bf00      	nop

00008b68 <usb_serial_configure>:
	if (usb_high_speed) {
    8b68:	4b2a      	ldr	r3, [pc, #168]	; (8c14 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8b6a:	2100      	movs	r1, #0
    8b6c:	2280      	movs	r2, #128	; 0x80
    8b6e:	482a      	ldr	r0, [pc, #168]	; (8c18 <usb_serial_configure+0xb0>)
{
    8b70:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    8b72:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    8b74:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    8b76:	4d29      	ldr	r5, [pc, #164]	; (8c1c <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    8b78:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    8b7a:	4e29      	ldr	r6, [pc, #164]	; (8c20 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    8b7c:	bf0c      	ite	eq
    8b7e:	2340      	moveq	r3, #64	; 0x40
    8b80:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    8b84:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    8b86:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8b88:	f002 fc34 	bl	b3f4 <memset>
	tx_head = 0;
    8b8c:	4a25      	ldr	r2, [pc, #148]	; (8c24 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8b8e:	4621      	mov	r1, r4
	tx_available = 0;
    8b90:	4b25      	ldr	r3, [pc, #148]	; (8c28 <usb_serial_configure+0xc0>)
	tx_head = 0;
    8b92:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8b94:	f44f 7280 	mov.w	r2, #256	; 0x100
    8b98:	4824      	ldr	r0, [pc, #144]	; (8c2c <usb_serial_configure+0xc4>)
	tx_available = 0;
    8b9a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8b9c:	f002 fc2a 	bl	b3f4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8ba0:	4a23      	ldr	r2, [pc, #140]	; (8c30 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8ba2:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    8ba4:	4b23      	ldr	r3, [pc, #140]	; (8c34 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8ba6:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    8ba8:	e9c2 4400 	strd	r4, r4, [r2]
    8bac:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    8bb0:	4a21      	ldr	r2, [pc, #132]	; (8c38 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    8bb2:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    8bb6:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    8bb8:	4a20      	ldr	r2, [pc, #128]	; (8c3c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    8bba:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    8bbe:	4b20      	ldr	r3, [pc, #128]	; (8c40 <usb_serial_configure+0xd8>)
    8bc0:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8bc2:	4623      	mov	r3, r4
	rx_available = 0;
    8bc4:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8bc6:	4622      	mov	r2, r4
    8bc8:	f7ff fd78 	bl	86bc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    8bcc:	4622      	mov	r2, r4
    8bce:	8831      	ldrh	r1, [r6, #0]
    8bd0:	2003      	movs	r0, #3
    8bd2:	4b1c      	ldr	r3, [pc, #112]	; (8c44 <usb_serial_configure+0xdc>)
    8bd4:	f7ff fd40 	bl	8658 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    8bd8:	4623      	mov	r3, r4
    8bda:	2201      	movs	r2, #1
    8bdc:	8829      	ldrh	r1, [r5, #0]
    8bde:	2004      	movs	r0, #4
    8be0:	f7ff fd6c 	bl	86bc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8be4:	4620      	mov	r0, r4
    8be6:	3401      	adds	r4, #1
    8be8:	f7ff fe0e 	bl	8808 <rx_queue_transfer>
    8bec:	2c08      	cmp	r4, #8
    8bee:	d1f9      	bne.n	8be4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    8bf0:	4b15      	ldr	r3, [pc, #84]	; (8c48 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    8bf2:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    8bf4:	4815      	ldr	r0, [pc, #84]	; (8c4c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    8bf6:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    8bf8:	4c15      	ldr	r4, [pc, #84]	; (8c50 <usb_serial_configure+0xe8>)
    8bfa:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    8bfc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8c04:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    8c08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    8c0c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    8c10:	bd70      	pop	{r4, r5, r6, pc}
    8c12:	bf00      	nop
    8c14:	2001f614 	.word	0x2001f614
    8c18:	2000a400 	.word	0x2000a400
    8c1c:	2001f600 	.word	0x2001f600
    8c20:	2001f5fc 	.word	0x2001f5fc
    8c24:	2001f610 	.word	0x2001f610
    8c28:	2001f5fe 	.word	0x2001f5fe
    8c2c:	2000a300 	.word	0x2000a300
    8c30:	2001f0bc 	.word	0x2001f0bc
    8c34:	2001f0cc 	.word	0x2001f0cc
    8c38:	2001f60c 	.word	0x2001f60c
    8c3c:	2001f0b8 	.word	0x2001f0b8
    8c40:	2001f60d 	.word	0x2001f60d
    8c44:	00008869 	.word	0x00008869
    8c48:	402e0000 	.word	0x402e0000
    8c4c:	2001f5ec 	.word	0x2001f5ec
    8c50:	0000891d 	.word	0x0000891d

00008c54 <usb_serial_read>:
{
    8c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8c58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8c5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    8c60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8d2c <usb_serial_read+0xd8>
{
    8c64:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8c66:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    8c6a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    8c6c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    8c70:	2900      	cmp	r1, #0
    8c72:	d04f      	beq.n	8d14 <usb_serial_read+0xc0>
    8c74:	4680      	mov	r8, r0
    8c76:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    8c78:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    8c7a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8d30 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    8c7e:	4b26      	ldr	r3, [pc, #152]	; (8d18 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    8c80:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8c84:	4925      	ldr	r1, [pc, #148]	; (8d1c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    8c86:	781b      	ldrb	r3, [r3, #0]
    8c88:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    8c8a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    8c8e:	d03f      	beq.n	8d10 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    8c90:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    8c92:	4b23      	ldr	r3, [pc, #140]	; (8d20 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8c94:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    8c96:	bf28      	it	cs
    8c98:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    8c9a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    8c9c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8ca0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    8ca4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    8ca6:	4b1f      	ldr	r3, [pc, #124]	; (8d24 <usb_serial_read+0xd0>)
    8ca8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    8cac:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    8cb0:	42aa      	cmp	r2, r5
    8cb2:	d21c      	bcs.n	8cee <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8cb4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    8cb8:	4918      	ldr	r1, [pc, #96]	; (8d1c <usb_serial_read+0xc8>)
			rx_available -= len;
    8cba:	4c1b      	ldr	r4, [pc, #108]	; (8d28 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8cbc:	4461      	add	r1, ip
    8cbe:	9201      	str	r2, [sp, #4]
    8cc0:	f7fe fecc 	bl	7a5c <memcpy>
			rx_available -= len;
    8cc4:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    8cc6:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    8cca:	4658      	mov	r0, fp
			rx_index[i] += len;
    8ccc:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    8cce:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    8cd2:	442a      	add	r2, r5
			rx_available -= len;
    8cd4:	4439      	add	r1, r7
			rx_index[i] += len;
    8cd6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    8cda:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8cdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8ce0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8ce4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    8ce8:	b003      	add	sp, #12
    8cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8cee:	462a      	mov	r2, r5
			count += avail;
    8cf0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8cf2:	f7fe feb3 	bl	7a5c <memcpy>
			rx_available -= avail;
    8cf6:	490c      	ldr	r1, [pc, #48]	; (8d28 <usb_serial_read+0xd4>)
			rx_tail = tail;
    8cf8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    8cfa:	4630      	mov	r0, r6
			rx_available -= avail;
    8cfc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    8cfe:	44a8      	add	r8, r5
			rx_available -= avail;
    8d00:	1b52      	subs	r2, r2, r5
    8d02:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    8d04:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    8d08:	f7ff fd7e 	bl	8808 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    8d0c:	45bb      	cmp	fp, r7
    8d0e:	d8b6      	bhi.n	8c7e <usb_serial_read+0x2a>
	return count;
    8d10:	4638      	mov	r0, r7
    8d12:	e7e3      	b.n	8cdc <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    8d14:	4608      	mov	r0, r1
    8d16:	e7e1      	b.n	8cdc <usb_serial_read+0x88>
    8d18:	2001f60c 	.word	0x2001f60c
    8d1c:	20009300 	.word	0x20009300
    8d20:	2001f0dc 	.word	0x2001f0dc
    8d24:	2001f0bc 	.word	0x2001f0bc
    8d28:	2001f0b8 	.word	0x2001f0b8
    8d2c:	2001f60d 	.word	0x2001f60d
    8d30:	2001f0cc 	.word	0x2001f0cc

00008d34 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    8d34:	4b0b      	ldr	r3, [pc, #44]	; (8d64 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    8d36:	4a0c      	ldr	r2, [pc, #48]	; (8d68 <usb_serial_peekchar+0x34>)
    8d38:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    8d3a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    8d3c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    8d3e:	428a      	cmp	r2, r1
    8d40:	d00d      	beq.n	8d5e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8d42:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    8d44:	4809      	ldr	r0, [pc, #36]	; (8d6c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8d46:	4a0a      	ldr	r2, [pc, #40]	; (8d70 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    8d48:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8d4a:	490a      	ldr	r1, [pc, #40]	; (8d74 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    8d4c:	bf28      	it	cs
    8d4e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8d50:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8d52:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    8d56:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    8d5a:	5c58      	ldrb	r0, [r3, r1]
    8d5c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    8d5e:	f04f 30ff 	mov.w	r0, #4294967295
}
    8d62:	4770      	bx	lr
    8d64:	2001f60c 	.word	0x2001f60c
    8d68:	2001f60d 	.word	0x2001f60d
    8d6c:	2001f0dc 	.word	0x2001f0dc
    8d70:	20009300 	.word	0x20009300
    8d74:	2001f0cc 	.word	0x2001f0cc

00008d78 <usb_serial_available>:
	uint32_t n = rx_available;
    8d78:	4b04      	ldr	r3, [pc, #16]	; (8d8c <usb_serial_available+0x14>)
{
    8d7a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    8d7c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    8d7e:	b10c      	cbz	r4, 8d84 <usb_serial_available+0xc>
}
    8d80:	4620      	mov	r0, r4
    8d82:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    8d84:	f000 f8e0 	bl	8f48 <yield>
}
    8d88:	4620      	mov	r0, r4
    8d8a:	bd10      	pop	{r4, pc}
    8d8c:	2001f0b8 	.word	0x2001f0b8

00008d90 <usb_serial_flush_input>:
{
    8d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8d94:	4e14      	ldr	r6, [pc, #80]	; (8de8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    8d96:	4d15      	ldr	r5, [pc, #84]	; (8dec <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    8d98:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    8d9a:	782a      	ldrb	r2, [r5, #0]
    8d9c:	4293      	cmp	r3, r2
    8d9e:	d021      	beq.n	8de4 <usb_serial_flush_input+0x54>
    8da0:	b2dc      	uxtb	r4, r3
    8da2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8df4 <usb_serial_flush_input+0x64>
    8da6:	f8df b050 	ldr.w	fp, [pc, #80]	; 8df8 <usb_serial_flush_input+0x68>
    8daa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8dfc <usb_serial_flush_input+0x6c>
    8dae:	4f10      	ldr	r7, [pc, #64]	; (8df0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    8db0:	3401      	adds	r4, #1
    8db2:	2c08      	cmp	r4, #8
		rx_tail = tail;
    8db4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    8db8:	d901      	bls.n	8dbe <usb_serial_flush_input+0x2e>
    8dba:	2400      	movs	r4, #0
    8dbc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    8dbe:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8dc2:	f8db 3000 	ldr.w	r3, [fp]
    8dc6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    8dca:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    8dce:	1a52      	subs	r2, r2, r1
    8dd0:	1a9b      	subs	r3, r3, r2
    8dd2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    8dd6:	f7ff fd17 	bl	8808 <rx_queue_transfer>
		rx_tail = tail;
    8dda:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    8dde:	782b      	ldrb	r3, [r5, #0]
    8de0:	42a3      	cmp	r3, r4
    8de2:	d1e5      	bne.n	8db0 <usb_serial_flush_input+0x20>
}
    8de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8de8:	2001f60d 	.word	0x2001f60d
    8dec:	2001f60c 	.word	0x2001f60c
    8df0:	2001f0cc 	.word	0x2001f0cc
    8df4:	2001f0dc 	.word	0x2001f0dc
    8df8:	2001f0b8 	.word	0x2001f0b8
    8dfc:	2001f0bc 	.word	0x2001f0bc

00008e00 <usb_serial_getchar>:
{
    8e00:	b500      	push	{lr}
    8e02:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    8e04:	2101      	movs	r1, #1
    8e06:	f10d 0007 	add.w	r0, sp, #7
    8e0a:	f7ff ff23 	bl	8c54 <usb_serial_read>
    8e0e:	b120      	cbz	r0, 8e1a <usb_serial_getchar+0x1a>
    8e10:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    8e14:	b003      	add	sp, #12
    8e16:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    8e1a:	f04f 30ff 	mov.w	r0, #4294967295
    8e1e:	e7f9      	b.n	8e14 <usb_serial_getchar+0x14>

00008e20 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    8e20:	4b09      	ldr	r3, [pc, #36]	; (8e48 <usb_serial_putchar+0x28>)
{
    8e22:	b500      	push	{lr}
    8e24:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    8e26:	781b      	ldrb	r3, [r3, #0]
{
    8e28:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    8e2c:	b13b      	cbz	r3, 8e3e <usb_serial_putchar+0x1e>
    8e2e:	2101      	movs	r1, #1
    8e30:	f10d 0007 	add.w	r0, sp, #7
    8e34:	f7ff fdba 	bl	89ac <usb_serial_write.part.0>
}
    8e38:	b003      	add	sp, #12
    8e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    8e3e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8e42:	b003      	add	sp, #12
    8e44:	f85d fb04 	ldr.w	pc, [sp], #4
    8e48:	2001f613 	.word	0x2001f613

00008e4c <usb_serial_write>:
	if (!usb_configuration) return 0;
    8e4c:	4b04      	ldr	r3, [pc, #16]	; (8e60 <usb_serial_write+0x14>)
    8e4e:	781b      	ldrb	r3, [r3, #0]
    8e50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8e54:	b10b      	cbz	r3, 8e5a <usb_serial_write+0xe>
    8e56:	f7ff bda9 	b.w	89ac <usb_serial_write.part.0>
}
    8e5a:	4610      	mov	r0, r2
    8e5c:	4770      	bx	lr
    8e5e:	bf00      	nop
    8e60:	2001f613 	.word	0x2001f613

00008e64 <usb_serial_write_buffer_free>:
{
    8e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    8e68:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    8e6a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8eb0 <usb_serial_write_buffer_free+0x4c>
    8e6e:	2301      	movs	r3, #1
    8e70:	4d0d      	ldr	r5, [pc, #52]	; (8ea8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    8e72:	4627      	mov	r7, r4
    8e74:	4e0d      	ldr	r6, [pc, #52]	; (8eac <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    8e76:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    8e7a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8e7c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    8e7e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    8e80:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    8e82:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    8e86:	d005      	beq.n	8e94 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8e88:	f7ff fc84 	bl	8794 <usb_transfer_status>
    8e8c:	0603      	lsls	r3, r0, #24
    8e8e:	bf58      	it	pl
    8e90:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    8e94:	2c04      	cmp	r4, #4
    8e96:	d1f0      	bne.n	8e7a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    8e98:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    8e9c:	2300      	movs	r3, #0
}
    8e9e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    8ea0:	f888 3000 	strb.w	r3, [r8]
}
    8ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ea8:	2000a400 	.word	0x2000a400
    8eac:	2001f610 	.word	0x2001f610
    8eb0:	2001f611 	.word	0x2001f611

00008eb4 <usb_serial_flush_output>:
{
    8eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    8eb8:	4b1d      	ldr	r3, [pc, #116]	; (8f30 <usb_serial_flush_output+0x7c>)
    8eba:	781b      	ldrb	r3, [r3, #0]
    8ebc:	b113      	cbz	r3, 8ec4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    8ebe:	4d1d      	ldr	r5, [pc, #116]	; (8f34 <usb_serial_flush_output+0x80>)
    8ec0:	882a      	ldrh	r2, [r5, #0]
    8ec2:	b90a      	cbnz	r2, 8ec8 <usb_serial_flush_output+0x14>
}
    8ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    8ec8:	4e1b      	ldr	r6, [pc, #108]	; (8f38 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    8eca:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8ece:	491b      	ldr	r1, [pc, #108]	; (8f3c <usb_serial_flush_output+0x88>)
    8ed0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8ed2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8ed4:	4c1a      	ldr	r4, [pc, #104]	; (8f40 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8ed6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    8eda:	4f1a      	ldr	r7, [pc, #104]	; (8f44 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8edc:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    8ee0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8ee2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    8ee4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8ee6:	4621      	mov	r1, r4
    8ee8:	2300      	movs	r3, #0
    8eea:	f7ff fc19 	bl	8720 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8eee:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    8ef2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8ef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8efa:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8efe:	3420      	adds	r4, #32
	} while (location < end_addr);
    8f00:	42a2      	cmp	r2, r4
    8f02:	d8fa      	bhi.n	8efa <usb_serial_flush_output+0x46>
	asm("dsb");
    8f04:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8f08:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8f0c:	2004      	movs	r0, #4
    8f0e:	4641      	mov	r1, r8
    8f10:	f7ff fc1e 	bl	8750 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8f14:	7833      	ldrb	r3, [r6, #0]
    8f16:	3301      	adds	r3, #1
    8f18:	b2db      	uxtb	r3, r3
    8f1a:	2b03      	cmp	r3, #3
    8f1c:	bf88      	it	hi
    8f1e:	2300      	movhi	r3, #0
    8f20:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    8f22:	2300      	movs	r3, #0
    8f24:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    8f26:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    8f2a:	703b      	strb	r3, [r7, #0]
}
    8f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f30:	2001f613 	.word	0x2001f613
    8f34:	2001f5fe 	.word	0x2001f5fe
    8f38:	2001f610 	.word	0x2001f610
    8f3c:	2000a400 	.word	0x2000a400
    8f40:	2000a480 	.word	0x2000a480
    8f44:	2001f611 	.word	0x2001f611

00008f48 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    8f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    8f4c:	4e32      	ldr	r6, [pc, #200]	; (9018 <yield+0xd0>)
    8f4e:	7833      	ldrb	r3, [r6, #0]
    8f50:	b163      	cbz	r3, 8f6c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    8f52:	4f32      	ldr	r7, [pc, #200]	; (901c <yield+0xd4>)
    8f54:	783a      	ldrb	r2, [r7, #0]
    8f56:	b94a      	cbnz	r2, 8f6c <yield+0x24>
	running = 1;
    8f58:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    8f5a:	07d9      	lsls	r1, r3, #31
	running = 1;
    8f5c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    8f5e:	d444      	bmi.n	8fea <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    8f60:	079a      	lsls	r2, r3, #30
    8f62:	d426      	bmi.n	8fb2 <yield+0x6a>

	running = 0;
    8f64:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    8f66:	075b      	lsls	r3, r3, #29
	running = 0;
    8f68:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    8f6a:	d401      	bmi.n	8f70 <yield+0x28>
	
};
    8f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    8f70:	4b2b      	ldr	r3, [pc, #172]	; (9020 <yield+0xd8>)
    8f72:	681a      	ldr	r2, [r3, #0]
    8f74:	2a00      	cmp	r2, #0
    8f76:	d0f9      	beq.n	8f6c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    8f78:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    8f7c:	2a00      	cmp	r2, #0
    8f7e:	d1f5      	bne.n	8f6c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8f80:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    8f84:	b672      	cpsid	i
		EventResponder *first = firstYield;
    8f86:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    8f88:	2800      	cmp	r0, #0
    8f8a:	d03b      	beq.n	9004 <yield+0xbc>
		if (runningFromYield) {
    8f8c:	4c25      	ldr	r4, [pc, #148]	; (9024 <yield+0xdc>)
    8f8e:	7821      	ldrb	r1, [r4, #0]
    8f90:	2900      	cmp	r1, #0
    8f92:	d137      	bne.n	9004 <yield+0xbc>
		runningFromYield = true;
    8f94:	2201      	movs	r2, #1
    8f96:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    8f98:	6942      	ldr	r2, [r0, #20]
    8f9a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    8f9c:	2a00      	cmp	r2, #0
    8f9e:	d038      	beq.n	9012 <yield+0xca>
			firstYield->_prev = nullptr;
    8fa0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    8fa2:	b905      	cbnz	r5, 8fa6 <yield+0x5e>
    8fa4:	b662      	cpsie	i
		first->_triggered = false;
    8fa6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    8fa8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    8faa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    8fac:	4798      	blx	r3
		runningFromYield = false;
    8fae:	7025      	strb	r5, [r4, #0]
    8fb0:	e7dc      	b.n	8f6c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    8fb2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 9030 <yield+0xe8>
    8fb6:	f898 2000 	ldrb.w	r2, [r8]
    8fba:	2a00      	cmp	r2, #0
    8fbc:	d0d2      	beq.n	8f64 <yield+0x1c>
    8fbe:	2500      	movs	r5, #0
    8fc0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 9034 <yield+0xec>
    8fc4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    8fc6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    8fca:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    8fcc:	6823      	ldr	r3, [r4, #0]
    8fce:	4620      	mov	r0, r4
    8fd0:	691b      	ldr	r3, [r3, #16]
    8fd2:	4798      	blx	r3
    8fd4:	b110      	cbz	r0, 8fdc <yield+0x94>
    8fd6:	6963      	ldr	r3, [r4, #20]
    8fd8:	689b      	ldr	r3, [r3, #8]
    8fda:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    8fdc:	f898 2000 	ldrb.w	r2, [r8]
    8fe0:	b2eb      	uxtb	r3, r5
    8fe2:	429a      	cmp	r2, r3
    8fe4:	d8ef      	bhi.n	8fc6 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    8fe6:	7833      	ldrb	r3, [r6, #0]
    8fe8:	e7bc      	b.n	8f64 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    8fea:	f7ff fec5 	bl	8d78 <usb_serial_available>
		if (Serial.available()) serialEvent();
    8fee:	b968      	cbnz	r0, 900c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    8ff0:	4b0d      	ldr	r3, [pc, #52]	; (9028 <yield+0xe0>)
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	b90b      	cbnz	r3, 8ffa <yield+0xb2>
    8ff6:	7833      	ldrb	r3, [r6, #0]
    8ff8:	e7b2      	b.n	8f60 <yield+0x18>
    8ffa:	7833      	ldrb	r3, [r6, #0]
    8ffc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9000:	7033      	strb	r3, [r6, #0]
    9002:	e7ad      	b.n	8f60 <yield+0x18>
		if (doit) __enable_irq();
    9004:	2d00      	cmp	r5, #0
    9006:	d1b1      	bne.n	8f6c <yield+0x24>
    9008:	b662      	cpsie	i
    900a:	e7af      	b.n	8f6c <yield+0x24>
		if (Serial.available()) serialEvent();
    900c:	f000 f8cc 	bl	91a8 <serialEvent()>
    9010:	e7ee      	b.n	8ff0 <yield+0xa8>
			lastYield = nullptr;
    9012:	4b06      	ldr	r3, [pc, #24]	; (902c <yield+0xe4>)
    9014:	601a      	str	r2, [r3, #0]
    9016:	e7c4      	b.n	8fa2 <yield+0x5a>
    9018:	20008d77 	.word	0x20008d77
    901c:	2001f609 	.word	0x2001f609
    9020:	2001e224 	.word	0x2001e224
    9024:	2001f607 	.word	0x2001f607
    9028:	60002766 	.word	0x60002766
    902c:	2001e230 	.word	0x2001e230
    9030:	2001f608 	.word	0x2001f608
    9034:	2001e234 	.word	0x2001e234

00009038 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9038:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    903a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    903c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    9040:	4619      	mov	r1, r3
{
    9042:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9044:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9048:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    904c:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9050:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    9054:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    9058:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    905a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    905e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9062:	b29b      	uxth	r3, r3
    9064:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    9068:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    906c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    9070:	3101      	adds	r1, #1
    9072:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    9076:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9078:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    907a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    907e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9080:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9082:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9084:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9086:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    908a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    908c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    908e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9090:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    9092:	d1eb      	bne.n	906c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9094:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9098:	b29b      	uxth	r3, r3
    909a:	f043 030f 	orr.w	r3, r3, #15
    909e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    90a2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    90a6:	b29b      	uxth	r3, r3
    90a8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    90ac:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    90b0:	bd10      	pop	{r4, pc}
    90b2:	bf00      	nop

000090b4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    90b4:	4b37      	ldr	r3, [pc, #220]	; (9194 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    90b6:	4a38      	ldr	r2, [pc, #224]	; (9198 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    90b8:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    90ba:	4838      	ldr	r0, [pc, #224]	; (919c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    90bc:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    90c0:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    90c2:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    90c4:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    90c8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    90cc:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    90d0:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    90d4:	430a      	orrs	r2, r1
    90d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    90da:	f7ff ffad 	bl	9038 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    90de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    90e2:	f7ff ffa9 	bl	9038 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    90e6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    90ea:	f7ff ffa5 	bl	9038 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    90ee:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    90f2:	f7ff ffa1 	bl	9038 <flexpwm_init>
	for (i=0; i < 4; i++) {
    90f6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    90f8:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    90fc:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    9100:	4611      	mov	r1, r2
    9102:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9106:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    910a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    910c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    910e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9110:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9112:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9116:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9118:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    911a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    911e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9120:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    9122:	d1ee      	bne.n	9102 <pwm_init+0x4e>
    9124:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9126:	481e      	ldr	r0, [pc, #120]	; (91a0 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9128:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    912c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    9130:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9132:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9136:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    913a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    913e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9142:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9144:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9146:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9148:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    914a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    914e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9150:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9152:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9156:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9158:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    915a:	d1ee      	bne.n	913a <pwm_init+0x86>
    915c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    915e:	4811      	ldr	r0, [pc, #68]	; (91a4 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9160:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9162:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    9166:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9168:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    916c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9170:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9174:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9178:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    917a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    917c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    917e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9180:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9182:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9184:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9186:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    918a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    918c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    9190:	d1ee      	bne.n	9170 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    9192:	bd70      	pop	{r4, r5, r6, pc}
    9194:	400fc000 	.word	0x400fc000
    9198:	fc030000 	.word	0xfc030000
    919c:	403dc000 	.word	0x403dc000
    91a0:	401e0000 	.word	0x401e0000
    91a4:	401e4000 	.word	0x401e4000

000091a8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    91a8:	4770      	bx	lr
    91aa:	bf00      	nop

000091ac <sm_align_pool>:
{
    91ac:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    91ae:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    91b2:	b15b      	cbz	r3, 91cc <sm_align_pool+0x20>
    91b4:	b1ba      	cbz	r2, 91e6 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    91b6:	4b0f      	ldr	r3, [pc, #60]	; (91f4 <sm_align_pool+0x48>)
    91b8:	fba3 1302 	umull	r1, r3, r3, r2
    91bc:	08db      	lsrs	r3, r3, #3
    91be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91c2:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    91c6:	d10a      	bne.n	91de <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    91c8:	2001      	movs	r0, #1
}
    91ca:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    91cc:	4b09      	ldr	r3, [pc, #36]	; (91f4 <sm_align_pool+0x48>)
    91ce:	fba3 1302 	umull	r1, r3, r3, r2
    91d2:	08db      	lsrs	r3, r3, #3
    91d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    91d8:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    91dc:	d001      	beq.n	91e2 <sm_align_pool+0x36>
    91de:	1ad2      	subs	r2, r2, r3
    91e0:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    91e2:	2af0      	cmp	r2, #240	; 0xf0
    91e4:	d8f0      	bhi.n	91c8 <sm_align_pool+0x1c>
		errno = ENOSPC;
    91e6:	f002 fa3b 	bl	b660 <__errno>
    91ea:	221c      	movs	r2, #28
    91ec:	4603      	mov	r3, r0
    91ee:	2000      	movs	r0, #0
    91f0:	601a      	str	r2, [r3, #0]
}
    91f2:	bd08      	pop	{r3, pc}
    91f4:	aaaaaaab 	.word	0xaaaaaaab

000091f8 <sm_set_pool>:
{
    91f8:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    91fa:	4604      	mov	r4, r0
    91fc:	b338      	cbz	r0, 924e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    91fe:	b119      	cbz	r1, 9208 <sm_set_pool+0x10>
    9200:	fab2 f682 	clz	r6, r2
    9204:	0976      	lsrs	r6, r6, #5
    9206:	b9a2      	cbnz	r2, 9232 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    9208:	6820      	ldr	r0, [r4, #0]
    920a:	b300      	cbz	r0, 924e <sm_set_pool+0x56>
    920c:	6862      	ldr	r2, [r4, #4]
    920e:	b1f2      	cbz	r2, 924e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    9210:	4b18      	ldr	r3, [pc, #96]	; (9274 <sm_set_pool+0x7c>)
    9212:	4919      	ldr	r1, [pc, #100]	; (9278 <sm_set_pool+0x80>)
    9214:	fb02 f303 	mul.w	r3, r2, r3
    9218:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    921c:	d317      	bcc.n	924e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    921e:	68a3      	ldr	r3, [r4, #8]
    9220:	b9e3      	cbnz	r3, 925c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    9222:	2200      	movs	r2, #0
			return 1;
    9224:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    9226:	6022      	str	r2, [r4, #0]
    9228:	6062      	str	r2, [r4, #4]
    922a:	60a2      	str	r2, [r4, #8]
    922c:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    922e:	4618      	mov	r0, r3
    9230:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    9232:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    9234:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    9236:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    923a:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    923c:	f7ff ffb6 	bl	91ac <sm_align_pool>
    9240:	4603      	mov	r3, r0
    9242:	2800      	cmp	r0, #0
    9244:	d0f3      	beq.n	922e <sm_set_pool+0x36>
	if (do_zero) {
    9246:	b96d      	cbnz	r5, 9264 <sm_set_pool+0x6c>
	return 1;
    9248:	2301      	movs	r3, #1
}
    924a:	4618      	mov	r0, r3
    924c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    924e:	f002 fa07 	bl	b660 <__errno>
    9252:	2216      	movs	r2, #22
		return 0;
    9254:	2300      	movs	r3, #0
		errno = EINVAL;
    9256:	6002      	str	r2, [r0, #0]
}
    9258:	4618      	mov	r0, r3
    925a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    925c:	2100      	movs	r1, #0
    925e:	f002 f8c9 	bl	b3f4 <memset>
    9262:	e7de      	b.n	9222 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    9264:	6862      	ldr	r2, [r4, #4]
    9266:	4631      	mov	r1, r6
    9268:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    926a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    926c:	f002 f8c2 	bl	b3f4 <memset>
	return 1;
    9270:	2301      	movs	r3, #1
    9272:	e7dc      	b.n	922e <sm_set_pool+0x36>
    9274:	aaaaaaab 	.word	0xaaaaaaab
    9278:	15555555 	.word	0x15555555

0000927c <__aeabi_atexit>:
    927c:	4603      	mov	r3, r0
    927e:	4608      	mov	r0, r1
    9280:	4619      	mov	r1, r3
    9282:	f001 be27 	b.w	aed4 <__cxa_atexit>
    9286:	bf00      	nop

00009288 <__aeabi_uldivmod>:
    9288:	b953      	cbnz	r3, 92a0 <__aeabi_uldivmod+0x18>
    928a:	b94a      	cbnz	r2, 92a0 <__aeabi_uldivmod+0x18>
    928c:	2900      	cmp	r1, #0
    928e:	bf08      	it	eq
    9290:	2800      	cmpeq	r0, #0
    9292:	bf1c      	itt	ne
    9294:	f04f 31ff 	movne.w	r1, #4294967295
    9298:	f04f 30ff 	movne.w	r0, #4294967295
    929c:	f000 b970 	b.w	9580 <__aeabi_idiv0>
    92a0:	f1ad 0c08 	sub.w	ip, sp, #8
    92a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    92a8:	f000 f806 	bl	92b8 <__udivmoddi4>
    92ac:	f8dd e004 	ldr.w	lr, [sp, #4]
    92b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    92b4:	b004      	add	sp, #16
    92b6:	4770      	bx	lr

000092b8 <__udivmoddi4>:
    92b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92bc:	9e08      	ldr	r6, [sp, #32]
    92be:	460d      	mov	r5, r1
    92c0:	4604      	mov	r4, r0
    92c2:	460f      	mov	r7, r1
    92c4:	2b00      	cmp	r3, #0
    92c6:	d14a      	bne.n	935e <__udivmoddi4+0xa6>
    92c8:	428a      	cmp	r2, r1
    92ca:	4694      	mov	ip, r2
    92cc:	d965      	bls.n	939a <__udivmoddi4+0xe2>
    92ce:	fab2 f382 	clz	r3, r2
    92d2:	b143      	cbz	r3, 92e6 <__udivmoddi4+0x2e>
    92d4:	fa02 fc03 	lsl.w	ip, r2, r3
    92d8:	f1c3 0220 	rsb	r2, r3, #32
    92dc:	409f      	lsls	r7, r3
    92de:	fa20 f202 	lsr.w	r2, r0, r2
    92e2:	4317      	orrs	r7, r2
    92e4:	409c      	lsls	r4, r3
    92e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    92ea:	fa1f f58c 	uxth.w	r5, ip
    92ee:	fbb7 f1fe 	udiv	r1, r7, lr
    92f2:	0c22      	lsrs	r2, r4, #16
    92f4:	fb0e 7711 	mls	r7, lr, r1, r7
    92f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    92fc:	fb01 f005 	mul.w	r0, r1, r5
    9300:	4290      	cmp	r0, r2
    9302:	d90a      	bls.n	931a <__udivmoddi4+0x62>
    9304:	eb1c 0202 	adds.w	r2, ip, r2
    9308:	f101 37ff 	add.w	r7, r1, #4294967295
    930c:	f080 811c 	bcs.w	9548 <__udivmoddi4+0x290>
    9310:	4290      	cmp	r0, r2
    9312:	f240 8119 	bls.w	9548 <__udivmoddi4+0x290>
    9316:	3902      	subs	r1, #2
    9318:	4462      	add	r2, ip
    931a:	1a12      	subs	r2, r2, r0
    931c:	b2a4      	uxth	r4, r4
    931e:	fbb2 f0fe 	udiv	r0, r2, lr
    9322:	fb0e 2210 	mls	r2, lr, r0, r2
    9326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    932a:	fb00 f505 	mul.w	r5, r0, r5
    932e:	42a5      	cmp	r5, r4
    9330:	d90a      	bls.n	9348 <__udivmoddi4+0x90>
    9332:	eb1c 0404 	adds.w	r4, ip, r4
    9336:	f100 32ff 	add.w	r2, r0, #4294967295
    933a:	f080 8107 	bcs.w	954c <__udivmoddi4+0x294>
    933e:	42a5      	cmp	r5, r4
    9340:	f240 8104 	bls.w	954c <__udivmoddi4+0x294>
    9344:	4464      	add	r4, ip
    9346:	3802      	subs	r0, #2
    9348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    934c:	1b64      	subs	r4, r4, r5
    934e:	2100      	movs	r1, #0
    9350:	b11e      	cbz	r6, 935a <__udivmoddi4+0xa2>
    9352:	40dc      	lsrs	r4, r3
    9354:	2300      	movs	r3, #0
    9356:	e9c6 4300 	strd	r4, r3, [r6]
    935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    935e:	428b      	cmp	r3, r1
    9360:	d908      	bls.n	9374 <__udivmoddi4+0xbc>
    9362:	2e00      	cmp	r6, #0
    9364:	f000 80ed 	beq.w	9542 <__udivmoddi4+0x28a>
    9368:	2100      	movs	r1, #0
    936a:	e9c6 0500 	strd	r0, r5, [r6]
    936e:	4608      	mov	r0, r1
    9370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9374:	fab3 f183 	clz	r1, r3
    9378:	2900      	cmp	r1, #0
    937a:	d149      	bne.n	9410 <__udivmoddi4+0x158>
    937c:	42ab      	cmp	r3, r5
    937e:	d302      	bcc.n	9386 <__udivmoddi4+0xce>
    9380:	4282      	cmp	r2, r0
    9382:	f200 80f8 	bhi.w	9576 <__udivmoddi4+0x2be>
    9386:	1a84      	subs	r4, r0, r2
    9388:	eb65 0203 	sbc.w	r2, r5, r3
    938c:	2001      	movs	r0, #1
    938e:	4617      	mov	r7, r2
    9390:	2e00      	cmp	r6, #0
    9392:	d0e2      	beq.n	935a <__udivmoddi4+0xa2>
    9394:	e9c6 4700 	strd	r4, r7, [r6]
    9398:	e7df      	b.n	935a <__udivmoddi4+0xa2>
    939a:	b902      	cbnz	r2, 939e <__udivmoddi4+0xe6>
    939c:	deff      	udf	#255	; 0xff
    939e:	fab2 f382 	clz	r3, r2
    93a2:	2b00      	cmp	r3, #0
    93a4:	f040 8090 	bne.w	94c8 <__udivmoddi4+0x210>
    93a8:	1a8a      	subs	r2, r1, r2
    93aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
    93ae:	fa1f fe8c 	uxth.w	lr, ip
    93b2:	2101      	movs	r1, #1
    93b4:	fbb2 f5f7 	udiv	r5, r2, r7
    93b8:	fb07 2015 	mls	r0, r7, r5, r2
    93bc:	0c22      	lsrs	r2, r4, #16
    93be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    93c2:	fb0e f005 	mul.w	r0, lr, r5
    93c6:	4290      	cmp	r0, r2
    93c8:	d908      	bls.n	93dc <__udivmoddi4+0x124>
    93ca:	eb1c 0202 	adds.w	r2, ip, r2
    93ce:	f105 38ff 	add.w	r8, r5, #4294967295
    93d2:	d202      	bcs.n	93da <__udivmoddi4+0x122>
    93d4:	4290      	cmp	r0, r2
    93d6:	f200 80cb 	bhi.w	9570 <__udivmoddi4+0x2b8>
    93da:	4645      	mov	r5, r8
    93dc:	1a12      	subs	r2, r2, r0
    93de:	b2a4      	uxth	r4, r4
    93e0:	fbb2 f0f7 	udiv	r0, r2, r7
    93e4:	fb07 2210 	mls	r2, r7, r0, r2
    93e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    93ec:	fb0e fe00 	mul.w	lr, lr, r0
    93f0:	45a6      	cmp	lr, r4
    93f2:	d908      	bls.n	9406 <__udivmoddi4+0x14e>
    93f4:	eb1c 0404 	adds.w	r4, ip, r4
    93f8:	f100 32ff 	add.w	r2, r0, #4294967295
    93fc:	d202      	bcs.n	9404 <__udivmoddi4+0x14c>
    93fe:	45a6      	cmp	lr, r4
    9400:	f200 80bb 	bhi.w	957a <__udivmoddi4+0x2c2>
    9404:	4610      	mov	r0, r2
    9406:	eba4 040e 	sub.w	r4, r4, lr
    940a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    940e:	e79f      	b.n	9350 <__udivmoddi4+0x98>
    9410:	f1c1 0720 	rsb	r7, r1, #32
    9414:	408b      	lsls	r3, r1
    9416:	fa22 fc07 	lsr.w	ip, r2, r7
    941a:	ea4c 0c03 	orr.w	ip, ip, r3
    941e:	fa05 f401 	lsl.w	r4, r5, r1
    9422:	fa20 f307 	lsr.w	r3, r0, r7
    9426:	40fd      	lsrs	r5, r7
    9428:	ea4f 491c 	mov.w	r9, ip, lsr #16
    942c:	4323      	orrs	r3, r4
    942e:	fbb5 f8f9 	udiv	r8, r5, r9
    9432:	fa1f fe8c 	uxth.w	lr, ip
    9436:	fb09 5518 	mls	r5, r9, r8, r5
    943a:	0c1c      	lsrs	r4, r3, #16
    943c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9440:	fb08 f50e 	mul.w	r5, r8, lr
    9444:	42a5      	cmp	r5, r4
    9446:	fa02 f201 	lsl.w	r2, r2, r1
    944a:	fa00 f001 	lsl.w	r0, r0, r1
    944e:	d90b      	bls.n	9468 <__udivmoddi4+0x1b0>
    9450:	eb1c 0404 	adds.w	r4, ip, r4
    9454:	f108 3aff 	add.w	sl, r8, #4294967295
    9458:	f080 8088 	bcs.w	956c <__udivmoddi4+0x2b4>
    945c:	42a5      	cmp	r5, r4
    945e:	f240 8085 	bls.w	956c <__udivmoddi4+0x2b4>
    9462:	f1a8 0802 	sub.w	r8, r8, #2
    9466:	4464      	add	r4, ip
    9468:	1b64      	subs	r4, r4, r5
    946a:	b29d      	uxth	r5, r3
    946c:	fbb4 f3f9 	udiv	r3, r4, r9
    9470:	fb09 4413 	mls	r4, r9, r3, r4
    9474:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9478:	fb03 fe0e 	mul.w	lr, r3, lr
    947c:	45a6      	cmp	lr, r4
    947e:	d908      	bls.n	9492 <__udivmoddi4+0x1da>
    9480:	eb1c 0404 	adds.w	r4, ip, r4
    9484:	f103 35ff 	add.w	r5, r3, #4294967295
    9488:	d26c      	bcs.n	9564 <__udivmoddi4+0x2ac>
    948a:	45a6      	cmp	lr, r4
    948c:	d96a      	bls.n	9564 <__udivmoddi4+0x2ac>
    948e:	3b02      	subs	r3, #2
    9490:	4464      	add	r4, ip
    9492:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9496:	fba3 9502 	umull	r9, r5, r3, r2
    949a:	eba4 040e 	sub.w	r4, r4, lr
    949e:	42ac      	cmp	r4, r5
    94a0:	46c8      	mov	r8, r9
    94a2:	46ae      	mov	lr, r5
    94a4:	d356      	bcc.n	9554 <__udivmoddi4+0x29c>
    94a6:	d053      	beq.n	9550 <__udivmoddi4+0x298>
    94a8:	b156      	cbz	r6, 94c0 <__udivmoddi4+0x208>
    94aa:	ebb0 0208 	subs.w	r2, r0, r8
    94ae:	eb64 040e 	sbc.w	r4, r4, lr
    94b2:	fa04 f707 	lsl.w	r7, r4, r7
    94b6:	40ca      	lsrs	r2, r1
    94b8:	40cc      	lsrs	r4, r1
    94ba:	4317      	orrs	r7, r2
    94bc:	e9c6 7400 	strd	r7, r4, [r6]
    94c0:	4618      	mov	r0, r3
    94c2:	2100      	movs	r1, #0
    94c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94c8:	f1c3 0120 	rsb	r1, r3, #32
    94cc:	fa02 fc03 	lsl.w	ip, r2, r3
    94d0:	fa20 f201 	lsr.w	r2, r0, r1
    94d4:	fa25 f101 	lsr.w	r1, r5, r1
    94d8:	409d      	lsls	r5, r3
    94da:	432a      	orrs	r2, r5
    94dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
    94e0:	fa1f fe8c 	uxth.w	lr, ip
    94e4:	fbb1 f0f7 	udiv	r0, r1, r7
    94e8:	fb07 1510 	mls	r5, r7, r0, r1
    94ec:	0c11      	lsrs	r1, r2, #16
    94ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    94f2:	fb00 f50e 	mul.w	r5, r0, lr
    94f6:	428d      	cmp	r5, r1
    94f8:	fa04 f403 	lsl.w	r4, r4, r3
    94fc:	d908      	bls.n	9510 <__udivmoddi4+0x258>
    94fe:	eb1c 0101 	adds.w	r1, ip, r1
    9502:	f100 38ff 	add.w	r8, r0, #4294967295
    9506:	d22f      	bcs.n	9568 <__udivmoddi4+0x2b0>
    9508:	428d      	cmp	r5, r1
    950a:	d92d      	bls.n	9568 <__udivmoddi4+0x2b0>
    950c:	3802      	subs	r0, #2
    950e:	4461      	add	r1, ip
    9510:	1b49      	subs	r1, r1, r5
    9512:	b292      	uxth	r2, r2
    9514:	fbb1 f5f7 	udiv	r5, r1, r7
    9518:	fb07 1115 	mls	r1, r7, r5, r1
    951c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9520:	fb05 f10e 	mul.w	r1, r5, lr
    9524:	4291      	cmp	r1, r2
    9526:	d908      	bls.n	953a <__udivmoddi4+0x282>
    9528:	eb1c 0202 	adds.w	r2, ip, r2
    952c:	f105 38ff 	add.w	r8, r5, #4294967295
    9530:	d216      	bcs.n	9560 <__udivmoddi4+0x2a8>
    9532:	4291      	cmp	r1, r2
    9534:	d914      	bls.n	9560 <__udivmoddi4+0x2a8>
    9536:	3d02      	subs	r5, #2
    9538:	4462      	add	r2, ip
    953a:	1a52      	subs	r2, r2, r1
    953c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9540:	e738      	b.n	93b4 <__udivmoddi4+0xfc>
    9542:	4631      	mov	r1, r6
    9544:	4630      	mov	r0, r6
    9546:	e708      	b.n	935a <__udivmoddi4+0xa2>
    9548:	4639      	mov	r1, r7
    954a:	e6e6      	b.n	931a <__udivmoddi4+0x62>
    954c:	4610      	mov	r0, r2
    954e:	e6fb      	b.n	9348 <__udivmoddi4+0x90>
    9550:	4548      	cmp	r0, r9
    9552:	d2a9      	bcs.n	94a8 <__udivmoddi4+0x1f0>
    9554:	ebb9 0802 	subs.w	r8, r9, r2
    9558:	eb65 0e0c 	sbc.w	lr, r5, ip
    955c:	3b01      	subs	r3, #1
    955e:	e7a3      	b.n	94a8 <__udivmoddi4+0x1f0>
    9560:	4645      	mov	r5, r8
    9562:	e7ea      	b.n	953a <__udivmoddi4+0x282>
    9564:	462b      	mov	r3, r5
    9566:	e794      	b.n	9492 <__udivmoddi4+0x1da>
    9568:	4640      	mov	r0, r8
    956a:	e7d1      	b.n	9510 <__udivmoddi4+0x258>
    956c:	46d0      	mov	r8, sl
    956e:	e77b      	b.n	9468 <__udivmoddi4+0x1b0>
    9570:	3d02      	subs	r5, #2
    9572:	4462      	add	r2, ip
    9574:	e732      	b.n	93dc <__udivmoddi4+0x124>
    9576:	4608      	mov	r0, r1
    9578:	e70a      	b.n	9390 <__udivmoddi4+0xd8>
    957a:	4464      	add	r4, ip
    957c:	3802      	subs	r0, #2
    957e:	e742      	b.n	9406 <__udivmoddi4+0x14e>

00009580 <__aeabi_idiv0>:
    9580:	4770      	bx	lr
    9582:	bf00      	nop

00009584 <malloc>:
    9584:	4b02      	ldr	r3, [pc, #8]	; (9590 <malloc+0xc>)
    9586:	4601      	mov	r1, r0
    9588:	6818      	ldr	r0, [r3, #0]
    958a:	f000 b80b 	b.w	95a4 <_malloc_r>
    958e:	bf00      	nop
    9590:	20008cf8 	.word	0x20008cf8

00009594 <free>:
    9594:	4b02      	ldr	r3, [pc, #8]	; (95a0 <free+0xc>)
    9596:	4601      	mov	r1, r0
    9598:	6818      	ldr	r0, [r3, #0]
    959a:	f002 bb83 	b.w	bca4 <_free_r>
    959e:	bf00      	nop
    95a0:	20008cf8 	.word	0x20008cf8

000095a4 <_malloc_r>:
    95a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95a8:	f101 060b 	add.w	r6, r1, #11
    95ac:	2e16      	cmp	r6, #22
    95ae:	b083      	sub	sp, #12
    95b0:	4604      	mov	r4, r0
    95b2:	d824      	bhi.n	95fe <_malloc_r+0x5a>
    95b4:	2910      	cmp	r1, #16
    95b6:	f200 80ba 	bhi.w	972e <_malloc_r+0x18a>
    95ba:	f000 faa3 	bl	9b04 <__malloc_lock>
    95be:	2610      	movs	r6, #16
    95c0:	2218      	movs	r2, #24
    95c2:	2002      	movs	r0, #2
    95c4:	4fb5      	ldr	r7, [pc, #724]	; (989c <_malloc_r+0x2f8>)
    95c6:	443a      	add	r2, r7
    95c8:	f1a2 0108 	sub.w	r1, r2, #8
    95cc:	6853      	ldr	r3, [r2, #4]
    95ce:	428b      	cmp	r3, r1
    95d0:	f000 80ba 	beq.w	9748 <_malloc_r+0x1a4>
    95d4:	685a      	ldr	r2, [r3, #4]
    95d6:	68d9      	ldr	r1, [r3, #12]
    95d8:	f022 0203 	bic.w	r2, r2, #3
    95dc:	441a      	add	r2, r3
    95de:	689d      	ldr	r5, [r3, #8]
    95e0:	60e9      	str	r1, [r5, #12]
    95e2:	608d      	str	r5, [r1, #8]
    95e4:	6851      	ldr	r1, [r2, #4]
    95e6:	f041 0101 	orr.w	r1, r1, #1
    95ea:	4620      	mov	r0, r4
    95ec:	6051      	str	r1, [r2, #4]
    95ee:	f103 0508 	add.w	r5, r3, #8
    95f2:	f000 fa8d 	bl	9b10 <__malloc_unlock>
    95f6:	4628      	mov	r0, r5
    95f8:	b003      	add	sp, #12
    95fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95fe:	f036 0607 	bics.w	r6, r6, #7
    9602:	f100 8094 	bmi.w	972e <_malloc_r+0x18a>
    9606:	42b1      	cmp	r1, r6
    9608:	f200 8091 	bhi.w	972e <_malloc_r+0x18a>
    960c:	f000 fa7a 	bl	9b04 <__malloc_lock>
    9610:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    9614:	f0c0 819a 	bcc.w	994c <_malloc_r+0x3a8>
    9618:	0a73      	lsrs	r3, r6, #9
    961a:	f000 808f 	beq.w	973c <_malloc_r+0x198>
    961e:	2b04      	cmp	r3, #4
    9620:	f200 816f 	bhi.w	9902 <_malloc_r+0x35e>
    9624:	09b3      	lsrs	r3, r6, #6
    9626:	f103 0039 	add.w	r0, r3, #57	; 0x39
    962a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    962e:	00c3      	lsls	r3, r0, #3
    9630:	4f9a      	ldr	r7, [pc, #616]	; (989c <_malloc_r+0x2f8>)
    9632:	443b      	add	r3, r7
    9634:	f1a3 0508 	sub.w	r5, r3, #8
    9638:	685b      	ldr	r3, [r3, #4]
    963a:	429d      	cmp	r5, r3
    963c:	d106      	bne.n	964c <_malloc_r+0xa8>
    963e:	e00c      	b.n	965a <_malloc_r+0xb6>
    9640:	2900      	cmp	r1, #0
    9642:	f280 8127 	bge.w	9894 <_malloc_r+0x2f0>
    9646:	68db      	ldr	r3, [r3, #12]
    9648:	429d      	cmp	r5, r3
    964a:	d006      	beq.n	965a <_malloc_r+0xb6>
    964c:	685a      	ldr	r2, [r3, #4]
    964e:	f022 0203 	bic.w	r2, r2, #3
    9652:	1b91      	subs	r1, r2, r6
    9654:	290f      	cmp	r1, #15
    9656:	ddf3      	ble.n	9640 <_malloc_r+0x9c>
    9658:	4660      	mov	r0, ip
    965a:	693d      	ldr	r5, [r7, #16]
    965c:	f8df c250 	ldr.w	ip, [pc, #592]	; 98b0 <_malloc_r+0x30c>
    9660:	4565      	cmp	r5, ip
    9662:	d07c      	beq.n	975e <_malloc_r+0x1ba>
    9664:	686a      	ldr	r2, [r5, #4]
    9666:	f022 0203 	bic.w	r2, r2, #3
    966a:	1b93      	subs	r3, r2, r6
    966c:	2b0f      	cmp	r3, #15
    966e:	f300 817b 	bgt.w	9968 <_malloc_r+0x3c4>
    9672:	2b00      	cmp	r3, #0
    9674:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9678:	f280 816c 	bge.w	9954 <_malloc_r+0x3b0>
    967c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9680:	f080 811a 	bcs.w	98b8 <_malloc_r+0x314>
    9684:	08d3      	lsrs	r3, r2, #3
    9686:	6879      	ldr	r1, [r7, #4]
    9688:	3301      	adds	r3, #1
    968a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    968e:	2201      	movs	r2, #1
    9690:	fa02 f20e 	lsl.w	r2, r2, lr
    9694:	430a      	orrs	r2, r1
    9696:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    969a:	f8c5 e008 	str.w	lr, [r5, #8]
    969e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    96a2:	3908      	subs	r1, #8
    96a4:	60e9      	str	r1, [r5, #12]
    96a6:	607a      	str	r2, [r7, #4]
    96a8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    96ac:	f8ce 500c 	str.w	r5, [lr, #12]
    96b0:	1083      	asrs	r3, r0, #2
    96b2:	2101      	movs	r1, #1
    96b4:	4099      	lsls	r1, r3
    96b6:	4291      	cmp	r1, r2
    96b8:	d857      	bhi.n	976a <_malloc_r+0x1c6>
    96ba:	4211      	tst	r1, r2
    96bc:	d106      	bne.n	96cc <_malloc_r+0x128>
    96be:	f020 0003 	bic.w	r0, r0, #3
    96c2:	0049      	lsls	r1, r1, #1
    96c4:	4211      	tst	r1, r2
    96c6:	f100 0004 	add.w	r0, r0, #4
    96ca:	d0fa      	beq.n	96c2 <_malloc_r+0x11e>
    96cc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    96d0:	464d      	mov	r5, r9
    96d2:	4686      	mov	lr, r0
    96d4:	f8d5 800c 	ldr.w	r8, [r5, #12]
    96d8:	4545      	cmp	r5, r8
    96da:	d108      	bne.n	96ee <_malloc_r+0x14a>
    96dc:	e11d      	b.n	991a <_malloc_r+0x376>
    96de:	2b00      	cmp	r3, #0
    96e0:	f280 8124 	bge.w	992c <_malloc_r+0x388>
    96e4:	f8d8 800c 	ldr.w	r8, [r8, #12]
    96e8:	4545      	cmp	r5, r8
    96ea:	f000 8116 	beq.w	991a <_malloc_r+0x376>
    96ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
    96f2:	f022 0203 	bic.w	r2, r2, #3
    96f6:	1b93      	subs	r3, r2, r6
    96f8:	2b0f      	cmp	r3, #15
    96fa:	ddf0      	ble.n	96de <_malloc_r+0x13a>
    96fc:	4620      	mov	r0, r4
    96fe:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    9702:	eb08 0106 	add.w	r1, r8, r6
    9706:	f046 0601 	orr.w	r6, r6, #1
    970a:	f8c8 6004 	str.w	r6, [r8, #4]
    970e:	60ec      	str	r4, [r5, #12]
    9710:	60a5      	str	r5, [r4, #8]
    9712:	f043 0401 	orr.w	r4, r3, #1
    9716:	e9c7 1104 	strd	r1, r1, [r7, #16]
    971a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    971e:	604c      	str	r4, [r1, #4]
    9720:	f848 3002 	str.w	r3, [r8, r2]
    9724:	f000 f9f4 	bl	9b10 <__malloc_unlock>
    9728:	f108 0508 	add.w	r5, r8, #8
    972c:	e002      	b.n	9734 <_malloc_r+0x190>
    972e:	230c      	movs	r3, #12
    9730:	6023      	str	r3, [r4, #0]
    9732:	2500      	movs	r5, #0
    9734:	4628      	mov	r0, r5
    9736:	b003      	add	sp, #12
    9738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    973c:	f44f 7300 	mov.w	r3, #512	; 0x200
    9740:	2040      	movs	r0, #64	; 0x40
    9742:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    9746:	e773      	b.n	9630 <_malloc_r+0x8c>
    9748:	68d3      	ldr	r3, [r2, #12]
    974a:	429a      	cmp	r2, r3
    974c:	bf08      	it	eq
    974e:	3002      	addeq	r0, #2
    9750:	f47f af40 	bne.w	95d4 <_malloc_r+0x30>
    9754:	693d      	ldr	r5, [r7, #16]
    9756:	f8df c158 	ldr.w	ip, [pc, #344]	; 98b0 <_malloc_r+0x30c>
    975a:	4565      	cmp	r5, ip
    975c:	d182      	bne.n	9664 <_malloc_r+0xc0>
    975e:	687a      	ldr	r2, [r7, #4]
    9760:	1083      	asrs	r3, r0, #2
    9762:	2101      	movs	r1, #1
    9764:	4099      	lsls	r1, r3
    9766:	4291      	cmp	r1, r2
    9768:	d9a7      	bls.n	96ba <_malloc_r+0x116>
    976a:	68bd      	ldr	r5, [r7, #8]
    976c:	686b      	ldr	r3, [r5, #4]
    976e:	f023 0903 	bic.w	r9, r3, #3
    9772:	454e      	cmp	r6, r9
    9774:	d803      	bhi.n	977e <_malloc_r+0x1da>
    9776:	eba9 0306 	sub.w	r3, r9, r6
    977a:	2b0f      	cmp	r3, #15
    977c:	dc7a      	bgt.n	9874 <_malloc_r+0x2d0>
    977e:	f8df b134 	ldr.w	fp, [pc, #308]	; 98b4 <_malloc_r+0x310>
    9782:	4b47      	ldr	r3, [pc, #284]	; (98a0 <_malloc_r+0x2fc>)
    9784:	f8db 2000 	ldr.w	r2, [fp]
    9788:	681b      	ldr	r3, [r3, #0]
    978a:	3201      	adds	r2, #1
    978c:	4433      	add	r3, r6
    978e:	eb05 0a09 	add.w	sl, r5, r9
    9792:	f000 8133 	beq.w	99fc <_malloc_r+0x458>
    9796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    979a:	330f      	adds	r3, #15
    979c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    97a0:	f028 080f 	bic.w	r8, r8, #15
    97a4:	4641      	mov	r1, r8
    97a6:	4620      	mov	r0, r4
    97a8:	f001 ff32 	bl	b610 <_sbrk_r>
    97ac:	1c41      	adds	r1, r0, #1
    97ae:	4602      	mov	r2, r0
    97b0:	f000 80f3 	beq.w	999a <_malloc_r+0x3f6>
    97b4:	4582      	cmp	sl, r0
    97b6:	f200 80ee 	bhi.w	9996 <_malloc_r+0x3f2>
    97ba:	4b3a      	ldr	r3, [pc, #232]	; (98a4 <_malloc_r+0x300>)
    97bc:	6819      	ldr	r1, [r3, #0]
    97be:	4441      	add	r1, r8
    97c0:	6019      	str	r1, [r3, #0]
    97c2:	4608      	mov	r0, r1
    97c4:	f000 814e 	beq.w	9a64 <_malloc_r+0x4c0>
    97c8:	f8db 1000 	ldr.w	r1, [fp]
    97cc:	9301      	str	r3, [sp, #4]
    97ce:	3101      	adds	r1, #1
    97d0:	bf1b      	ittet	ne
    97d2:	eba2 010a 	subne.w	r1, r2, sl
    97d6:	1809      	addne	r1, r1, r0
    97d8:	f8cb 2000 	streq.w	r2, [fp]
    97dc:	6019      	strne	r1, [r3, #0]
    97de:	f012 0b07 	ands.w	fp, r2, #7
    97e2:	f000 8117 	beq.w	9a14 <_malloc_r+0x470>
    97e6:	f1cb 0108 	rsb	r1, fp, #8
    97ea:	440a      	add	r2, r1
    97ec:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    97f0:	4490      	add	r8, r2
    97f2:	3108      	adds	r1, #8
    97f4:	eba1 0108 	sub.w	r1, r1, r8
    97f8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    97fc:	4651      	mov	r1, sl
    97fe:	4620      	mov	r0, r4
    9800:	9200      	str	r2, [sp, #0]
    9802:	f001 ff05 	bl	b610 <_sbrk_r>
    9806:	1c42      	adds	r2, r0, #1
    9808:	e9dd 2300 	ldrd	r2, r3, [sp]
    980c:	f000 814f 	beq.w	9aae <_malloc_r+0x50a>
    9810:	1a80      	subs	r0, r0, r2
    9812:	eb00 080a 	add.w	r8, r0, sl
    9816:	6819      	ldr	r1, [r3, #0]
    9818:	60ba      	str	r2, [r7, #8]
    981a:	f048 0001 	orr.w	r0, r8, #1
    981e:	4451      	add	r1, sl
    9820:	42bd      	cmp	r5, r7
    9822:	6050      	str	r0, [r2, #4]
    9824:	6019      	str	r1, [r3, #0]
    9826:	f000 8129 	beq.w	9a7c <_malloc_r+0x4d8>
    982a:	f1b9 0f0f 	cmp.w	r9, #15
    982e:	f240 8127 	bls.w	9a80 <_malloc_r+0x4dc>
    9832:	6868      	ldr	r0, [r5, #4]
    9834:	f1a9 0c0c 	sub.w	ip, r9, #12
    9838:	f02c 0c07 	bic.w	ip, ip, #7
    983c:	f000 0001 	and.w	r0, r0, #1
    9840:	ea40 000c 	orr.w	r0, r0, ip
    9844:	6068      	str	r0, [r5, #4]
    9846:	f04f 0e05 	mov.w	lr, #5
    984a:	eb05 000c 	add.w	r0, r5, ip
    984e:	f1bc 0f0f 	cmp.w	ip, #15
    9852:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9856:	f200 8132 	bhi.w	9abe <_malloc_r+0x51a>
    985a:	6850      	ldr	r0, [r2, #4]
    985c:	4615      	mov	r5, r2
    985e:	4b12      	ldr	r3, [pc, #72]	; (98a8 <_malloc_r+0x304>)
    9860:	681a      	ldr	r2, [r3, #0]
    9862:	428a      	cmp	r2, r1
    9864:	bf38      	it	cc
    9866:	6019      	strcc	r1, [r3, #0]
    9868:	4b10      	ldr	r3, [pc, #64]	; (98ac <_malloc_r+0x308>)
    986a:	681a      	ldr	r2, [r3, #0]
    986c:	428a      	cmp	r2, r1
    986e:	bf38      	it	cc
    9870:	6019      	strcc	r1, [r3, #0]
    9872:	e094      	b.n	999e <_malloc_r+0x3fa>
    9874:	19aa      	adds	r2, r5, r6
    9876:	f043 0301 	orr.w	r3, r3, #1
    987a:	f046 0601 	orr.w	r6, r6, #1
    987e:	606e      	str	r6, [r5, #4]
    9880:	4620      	mov	r0, r4
    9882:	60ba      	str	r2, [r7, #8]
    9884:	6053      	str	r3, [r2, #4]
    9886:	f000 f943 	bl	9b10 <__malloc_unlock>
    988a:	3508      	adds	r5, #8
    988c:	4628      	mov	r0, r5
    988e:	b003      	add	sp, #12
    9890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9894:	68d9      	ldr	r1, [r3, #12]
    9896:	441a      	add	r2, r3
    9898:	e6a1      	b.n	95de <_malloc_r+0x3a>
    989a:	bf00      	nop
    989c:	200088dc 	.word	0x200088dc
    98a0:	2001e440 	.word	0x2001e440
    98a4:	2001e410 	.word	0x2001e410
    98a8:	2001e438 	.word	0x2001e438
    98ac:	2001e43c 	.word	0x2001e43c
    98b0:	200088e4 	.word	0x200088e4
    98b4:	20008ce4 	.word	0x20008ce4
    98b8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    98bc:	ea4f 2352 	mov.w	r3, r2, lsr #9
    98c0:	d363      	bcc.n	998a <_malloc_r+0x3e6>
    98c2:	2b14      	cmp	r3, #20
    98c4:	f200 80b7 	bhi.w	9a36 <_malloc_r+0x492>
    98c8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    98cc:	00c9      	lsls	r1, r1, #3
    98ce:	335b      	adds	r3, #91	; 0x5b
    98d0:	eb07 0e01 	add.w	lr, r7, r1
    98d4:	5879      	ldr	r1, [r7, r1]
    98d6:	f1ae 0e08 	sub.w	lr, lr, #8
    98da:	458e      	cmp	lr, r1
    98dc:	f000 8091 	beq.w	9a02 <_malloc_r+0x45e>
    98e0:	684b      	ldr	r3, [r1, #4]
    98e2:	f023 0303 	bic.w	r3, r3, #3
    98e6:	4293      	cmp	r3, r2
    98e8:	d902      	bls.n	98f0 <_malloc_r+0x34c>
    98ea:	6889      	ldr	r1, [r1, #8]
    98ec:	458e      	cmp	lr, r1
    98ee:	d1f7      	bne.n	98e0 <_malloc_r+0x33c>
    98f0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    98f4:	687a      	ldr	r2, [r7, #4]
    98f6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    98fa:	f8ce 5008 	str.w	r5, [lr, #8]
    98fe:	60cd      	str	r5, [r1, #12]
    9900:	e6d6      	b.n	96b0 <_malloc_r+0x10c>
    9902:	2b14      	cmp	r3, #20
    9904:	d959      	bls.n	99ba <_malloc_r+0x416>
    9906:	2b54      	cmp	r3, #84	; 0x54
    9908:	f200 809d 	bhi.w	9a46 <_malloc_r+0x4a2>
    990c:	0b33      	lsrs	r3, r6, #12
    990e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9912:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9916:	00c3      	lsls	r3, r0, #3
    9918:	e68a      	b.n	9630 <_malloc_r+0x8c>
    991a:	f10e 0e01 	add.w	lr, lr, #1
    991e:	f01e 0f03 	tst.w	lr, #3
    9922:	f105 0508 	add.w	r5, r5, #8
    9926:	f47f aed5 	bne.w	96d4 <_malloc_r+0x130>
    992a:	e051      	b.n	99d0 <_malloc_r+0x42c>
    992c:	4442      	add	r2, r8
    992e:	4645      	mov	r5, r8
    9930:	6853      	ldr	r3, [r2, #4]
    9932:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9936:	f043 0301 	orr.w	r3, r3, #1
    993a:	6053      	str	r3, [r2, #4]
    993c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9940:	4620      	mov	r0, r4
    9942:	60d9      	str	r1, [r3, #12]
    9944:	608b      	str	r3, [r1, #8]
    9946:	f000 f8e3 	bl	9b10 <__malloc_unlock>
    994a:	e6f3      	b.n	9734 <_malloc_r+0x190>
    994c:	08f0      	lsrs	r0, r6, #3
    994e:	f106 0208 	add.w	r2, r6, #8
    9952:	e637      	b.n	95c4 <_malloc_r+0x20>
    9954:	442a      	add	r2, r5
    9956:	4620      	mov	r0, r4
    9958:	6853      	ldr	r3, [r2, #4]
    995a:	f043 0301 	orr.w	r3, r3, #1
    995e:	6053      	str	r3, [r2, #4]
    9960:	3508      	adds	r5, #8
    9962:	f000 f8d5 	bl	9b10 <__malloc_unlock>
    9966:	e6e5      	b.n	9734 <_malloc_r+0x190>
    9968:	19a9      	adds	r1, r5, r6
    996a:	4620      	mov	r0, r4
    996c:	f046 0601 	orr.w	r6, r6, #1
    9970:	f043 0401 	orr.w	r4, r3, #1
    9974:	606e      	str	r6, [r5, #4]
    9976:	e9c7 1104 	strd	r1, r1, [r7, #16]
    997a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    997e:	604c      	str	r4, [r1, #4]
    9980:	50ab      	str	r3, [r5, r2]
    9982:	f000 f8c5 	bl	9b10 <__malloc_unlock>
    9986:	3508      	adds	r5, #8
    9988:	e6d4      	b.n	9734 <_malloc_r+0x190>
    998a:	0993      	lsrs	r3, r2, #6
    998c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    9990:	00c9      	lsls	r1, r1, #3
    9992:	3338      	adds	r3, #56	; 0x38
    9994:	e79c      	b.n	98d0 <_malloc_r+0x32c>
    9996:	42bd      	cmp	r5, r7
    9998:	d05f      	beq.n	9a5a <_malloc_r+0x4b6>
    999a:	68bd      	ldr	r5, [r7, #8]
    999c:	6868      	ldr	r0, [r5, #4]
    999e:	f020 0803 	bic.w	r8, r0, #3
    99a2:	4546      	cmp	r6, r8
    99a4:	eba8 0306 	sub.w	r3, r8, r6
    99a8:	d802      	bhi.n	99b0 <_malloc_r+0x40c>
    99aa:	2b0f      	cmp	r3, #15
    99ac:	f73f af62 	bgt.w	9874 <_malloc_r+0x2d0>
    99b0:	4620      	mov	r0, r4
    99b2:	f000 f8ad 	bl	9b10 <__malloc_unlock>
    99b6:	2500      	movs	r5, #0
    99b8:	e6bc      	b.n	9734 <_malloc_r+0x190>
    99ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    99be:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    99c2:	00c3      	lsls	r3, r0, #3
    99c4:	e634      	b.n	9630 <_malloc_r+0x8c>
    99c6:	f859 3908 	ldr.w	r3, [r9], #-8
    99ca:	454b      	cmp	r3, r9
    99cc:	f040 8096 	bne.w	9afc <_malloc_r+0x558>
    99d0:	f010 0f03 	tst.w	r0, #3
    99d4:	f100 30ff 	add.w	r0, r0, #4294967295
    99d8:	d1f5      	bne.n	99c6 <_malloc_r+0x422>
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	ea23 0301 	bic.w	r3, r3, r1
    99e0:	607b      	str	r3, [r7, #4]
    99e2:	0049      	lsls	r1, r1, #1
    99e4:	4299      	cmp	r1, r3
    99e6:	f63f aec0 	bhi.w	976a <_malloc_r+0x1c6>
    99ea:	b919      	cbnz	r1, 99f4 <_malloc_r+0x450>
    99ec:	e6bd      	b.n	976a <_malloc_r+0x1c6>
    99ee:	0049      	lsls	r1, r1, #1
    99f0:	f10e 0e04 	add.w	lr, lr, #4
    99f4:	4219      	tst	r1, r3
    99f6:	d0fa      	beq.n	99ee <_malloc_r+0x44a>
    99f8:	4670      	mov	r0, lr
    99fa:	e667      	b.n	96cc <_malloc_r+0x128>
    99fc:	f103 0810 	add.w	r8, r3, #16
    9a00:	e6d0      	b.n	97a4 <_malloc_r+0x200>
    9a02:	109a      	asrs	r2, r3, #2
    9a04:	f04f 0801 	mov.w	r8, #1
    9a08:	687b      	ldr	r3, [r7, #4]
    9a0a:	fa08 f202 	lsl.w	r2, r8, r2
    9a0e:	431a      	orrs	r2, r3
    9a10:	607a      	str	r2, [r7, #4]
    9a12:	e770      	b.n	98f6 <_malloc_r+0x352>
    9a14:	eb02 0108 	add.w	r1, r2, r8
    9a18:	4249      	negs	r1, r1
    9a1a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9a1e:	4651      	mov	r1, sl
    9a20:	4620      	mov	r0, r4
    9a22:	9200      	str	r2, [sp, #0]
    9a24:	f001 fdf4 	bl	b610 <_sbrk_r>
    9a28:	1c43      	adds	r3, r0, #1
    9a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a2e:	f47f aeef 	bne.w	9810 <_malloc_r+0x26c>
    9a32:	46da      	mov	sl, fp
    9a34:	e6ef      	b.n	9816 <_malloc_r+0x272>
    9a36:	2b54      	cmp	r3, #84	; 0x54
    9a38:	d825      	bhi.n	9a86 <_malloc_r+0x4e2>
    9a3a:	0b13      	lsrs	r3, r2, #12
    9a3c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    9a40:	00c9      	lsls	r1, r1, #3
    9a42:	336e      	adds	r3, #110	; 0x6e
    9a44:	e744      	b.n	98d0 <_malloc_r+0x32c>
    9a46:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9a4a:	d825      	bhi.n	9a98 <_malloc_r+0x4f4>
    9a4c:	0bf3      	lsrs	r3, r6, #15
    9a4e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    9a52:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    9a56:	00c3      	lsls	r3, r0, #3
    9a58:	e5ea      	b.n	9630 <_malloc_r+0x8c>
    9a5a:	4b29      	ldr	r3, [pc, #164]	; (9b00 <_malloc_r+0x55c>)
    9a5c:	6818      	ldr	r0, [r3, #0]
    9a5e:	4440      	add	r0, r8
    9a60:	6018      	str	r0, [r3, #0]
    9a62:	e6b1      	b.n	97c8 <_malloc_r+0x224>
    9a64:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    9a68:	f1bc 0f00 	cmp.w	ip, #0
    9a6c:	f47f aeac 	bne.w	97c8 <_malloc_r+0x224>
    9a70:	68bd      	ldr	r5, [r7, #8]
    9a72:	44c8      	add	r8, r9
    9a74:	f048 0001 	orr.w	r0, r8, #1
    9a78:	6068      	str	r0, [r5, #4]
    9a7a:	e6f0      	b.n	985e <_malloc_r+0x2ba>
    9a7c:	4615      	mov	r5, r2
    9a7e:	e6ee      	b.n	985e <_malloc_r+0x2ba>
    9a80:	2301      	movs	r3, #1
    9a82:	6053      	str	r3, [r2, #4]
    9a84:	e794      	b.n	99b0 <_malloc_r+0x40c>
    9a86:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9a8a:	d823      	bhi.n	9ad4 <_malloc_r+0x530>
    9a8c:	0bd3      	lsrs	r3, r2, #15
    9a8e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    9a92:	00c9      	lsls	r1, r1, #3
    9a94:	3377      	adds	r3, #119	; 0x77
    9a96:	e71b      	b.n	98d0 <_malloc_r+0x32c>
    9a98:	f240 5254 	movw	r2, #1364	; 0x554
    9a9c:	4293      	cmp	r3, r2
    9a9e:	d823      	bhi.n	9ae8 <_malloc_r+0x544>
    9aa0:	0cb3      	lsrs	r3, r6, #18
    9aa2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    9aa6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    9aaa:	00c3      	lsls	r3, r0, #3
    9aac:	e5c0      	b.n	9630 <_malloc_r+0x8c>
    9aae:	f1ab 0b08 	sub.w	fp, fp, #8
    9ab2:	44d8      	add	r8, fp
    9ab4:	eba8 0802 	sub.w	r8, r8, r2
    9ab8:	f04f 0a00 	mov.w	sl, #0
    9abc:	e6ab      	b.n	9816 <_malloc_r+0x272>
    9abe:	f105 0108 	add.w	r1, r5, #8
    9ac2:	4620      	mov	r0, r4
    9ac4:	9300      	str	r3, [sp, #0]
    9ac6:	f002 f8ed 	bl	bca4 <_free_r>
    9aca:	68bd      	ldr	r5, [r7, #8]
    9acc:	9b00      	ldr	r3, [sp, #0]
    9ace:	6868      	ldr	r0, [r5, #4]
    9ad0:	6819      	ldr	r1, [r3, #0]
    9ad2:	e6c4      	b.n	985e <_malloc_r+0x2ba>
    9ad4:	f240 5154 	movw	r1, #1364	; 0x554
    9ad8:	428b      	cmp	r3, r1
    9ada:	d80b      	bhi.n	9af4 <_malloc_r+0x550>
    9adc:	0c93      	lsrs	r3, r2, #18
    9ade:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    9ae2:	00c9      	lsls	r1, r1, #3
    9ae4:	337c      	adds	r3, #124	; 0x7c
    9ae6:	e6f3      	b.n	98d0 <_malloc_r+0x32c>
    9ae8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    9aec:	207f      	movs	r0, #127	; 0x7f
    9aee:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    9af2:	e59d      	b.n	9630 <_malloc_r+0x8c>
    9af4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    9af8:	237e      	movs	r3, #126	; 0x7e
    9afa:	e6e9      	b.n	98d0 <_malloc_r+0x32c>
    9afc:	687b      	ldr	r3, [r7, #4]
    9afe:	e770      	b.n	99e2 <_malloc_r+0x43e>
    9b00:	2001e410 	.word	0x2001e410

00009b04 <__malloc_lock>:
    9b04:	4801      	ldr	r0, [pc, #4]	; (9b0c <__malloc_lock+0x8>)
    9b06:	f001 bdd9 	b.w	b6bc <__retarget_lock_acquire_recursive>
    9b0a:	bf00      	nop
    9b0c:	2001e408 	.word	0x2001e408

00009b10 <__malloc_unlock>:
    9b10:	4801      	ldr	r0, [pc, #4]	; (9b18 <__malloc_unlock+0x8>)
    9b12:	f001 bdd5 	b.w	b6c0 <__retarget_lock_release_recursive>
    9b16:	bf00      	nop
    9b18:	2001e408 	.word	0x2001e408

00009b1c <realloc>:
    9b1c:	b410      	push	{r4}
    9b1e:	4c04      	ldr	r4, [pc, #16]	; (9b30 <realloc+0x14>)
    9b20:	4603      	mov	r3, r0
    9b22:	460a      	mov	r2, r1
    9b24:	6820      	ldr	r0, [r4, #0]
    9b26:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b2a:	4619      	mov	r1, r3
    9b2c:	f000 b802 	b.w	9b34 <_realloc_r>
    9b30:	20008cf8 	.word	0x20008cf8

00009b34 <_realloc_r>:
    9b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b38:	4617      	mov	r7, r2
    9b3a:	2900      	cmp	r1, #0
    9b3c:	f000 8098 	beq.w	9c70 <_realloc_r+0x13c>
    9b40:	460c      	mov	r4, r1
    9b42:	f107 050b 	add.w	r5, r7, #11
    9b46:	4680      	mov	r8, r0
    9b48:	f7ff ffdc 	bl	9b04 <__malloc_lock>
    9b4c:	2d16      	cmp	r5, #22
    9b4e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    9b52:	d85b      	bhi.n	9c0c <_realloc_r+0xd8>
    9b54:	2510      	movs	r5, #16
    9b56:	462a      	mov	r2, r5
    9b58:	42af      	cmp	r7, r5
    9b5a:	d85c      	bhi.n	9c16 <_realloc_r+0xe2>
    9b5c:	f021 0603 	bic.w	r6, r1, #3
    9b60:	4296      	cmp	r6, r2
    9b62:	f1a4 0908 	sub.w	r9, r4, #8
    9b66:	da62      	bge.n	9c2e <_realloc_r+0xfa>
    9b68:	4bbc      	ldr	r3, [pc, #752]	; (9e5c <_realloc_r+0x328>)
    9b6a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    9b6e:	eb09 0006 	add.w	r0, r9, r6
    9b72:	4584      	cmp	ip, r0
    9b74:	f000 8097 	beq.w	9ca6 <_realloc_r+0x172>
    9b78:	f8d0 c004 	ldr.w	ip, [r0, #4]
    9b7c:	f02c 0301 	bic.w	r3, ip, #1
    9b80:	4403      	add	r3, r0
    9b82:	685b      	ldr	r3, [r3, #4]
    9b84:	07db      	lsls	r3, r3, #31
    9b86:	d468      	bmi.n	9c5a <_realloc_r+0x126>
    9b88:	f02c 0c03 	bic.w	ip, ip, #3
    9b8c:	eb06 030c 	add.w	r3, r6, ip
    9b90:	4293      	cmp	r3, r2
    9b92:	da47      	bge.n	9c24 <_realloc_r+0xf0>
    9b94:	07cb      	lsls	r3, r1, #31
    9b96:	d410      	bmi.n	9bba <_realloc_r+0x86>
    9b98:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9b9c:	eba9 0a03 	sub.w	sl, r9, r3
    9ba0:	f8da 3004 	ldr.w	r3, [sl, #4]
    9ba4:	f023 0103 	bic.w	r1, r3, #3
    9ba8:	448c      	add	ip, r1
    9baa:	44b4      	add	ip, r6
    9bac:	4594      	cmp	ip, r2
    9bae:	f280 8111 	bge.w	9dd4 <_realloc_r+0x2a0>
    9bb2:	1873      	adds	r3, r6, r1
    9bb4:	4293      	cmp	r3, r2
    9bb6:	f280 80e8 	bge.w	9d8a <_realloc_r+0x256>
    9bba:	4639      	mov	r1, r7
    9bbc:	4640      	mov	r0, r8
    9bbe:	f7ff fcf1 	bl	95a4 <_malloc_r>
    9bc2:	4607      	mov	r7, r0
    9bc4:	b1e0      	cbz	r0, 9c00 <_realloc_r+0xcc>
    9bc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9bca:	f023 0301 	bic.w	r3, r3, #1
    9bce:	444b      	add	r3, r9
    9bd0:	f1a0 0208 	sub.w	r2, r0, #8
    9bd4:	4293      	cmp	r3, r2
    9bd6:	f000 80d2 	beq.w	9d7e <_realloc_r+0x24a>
    9bda:	1f32      	subs	r2, r6, #4
    9bdc:	2a24      	cmp	r2, #36	; 0x24
    9bde:	f200 80f5 	bhi.w	9dcc <_realloc_r+0x298>
    9be2:	2a13      	cmp	r2, #19
    9be4:	f200 80ac 	bhi.w	9d40 <_realloc_r+0x20c>
    9be8:	4603      	mov	r3, r0
    9bea:	4622      	mov	r2, r4
    9bec:	6811      	ldr	r1, [r2, #0]
    9bee:	6019      	str	r1, [r3, #0]
    9bf0:	6851      	ldr	r1, [r2, #4]
    9bf2:	6059      	str	r1, [r3, #4]
    9bf4:	6892      	ldr	r2, [r2, #8]
    9bf6:	609a      	str	r2, [r3, #8]
    9bf8:	4621      	mov	r1, r4
    9bfa:	4640      	mov	r0, r8
    9bfc:	f002 f852 	bl	bca4 <_free_r>
    9c00:	4640      	mov	r0, r8
    9c02:	f7ff ff85 	bl	9b10 <__malloc_unlock>
    9c06:	4638      	mov	r0, r7
    9c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c0c:	f025 0507 	bic.w	r5, r5, #7
    9c10:	2d00      	cmp	r5, #0
    9c12:	462a      	mov	r2, r5
    9c14:	daa0      	bge.n	9b58 <_realloc_r+0x24>
    9c16:	230c      	movs	r3, #12
    9c18:	f8c8 3000 	str.w	r3, [r8]
    9c1c:	2700      	movs	r7, #0
    9c1e:	4638      	mov	r0, r7
    9c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c24:	461e      	mov	r6, r3
    9c26:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    9c2a:	60d3      	str	r3, [r2, #12]
    9c2c:	609a      	str	r2, [r3, #8]
    9c2e:	1b73      	subs	r3, r6, r5
    9c30:	2b0f      	cmp	r3, #15
    9c32:	d822      	bhi.n	9c7a <_realloc_r+0x146>
    9c34:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9c38:	f003 0301 	and.w	r3, r3, #1
    9c3c:	4333      	orrs	r3, r6
    9c3e:	444e      	add	r6, r9
    9c40:	f8c9 3004 	str.w	r3, [r9, #4]
    9c44:	6873      	ldr	r3, [r6, #4]
    9c46:	f043 0301 	orr.w	r3, r3, #1
    9c4a:	6073      	str	r3, [r6, #4]
    9c4c:	4640      	mov	r0, r8
    9c4e:	4627      	mov	r7, r4
    9c50:	f7ff ff5e 	bl	9b10 <__malloc_unlock>
    9c54:	4638      	mov	r0, r7
    9c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c5a:	07c9      	lsls	r1, r1, #31
    9c5c:	d4ad      	bmi.n	9bba <_realloc_r+0x86>
    9c5e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9c62:	eba9 0a03 	sub.w	sl, r9, r3
    9c66:	f8da 1004 	ldr.w	r1, [sl, #4]
    9c6a:	f021 0103 	bic.w	r1, r1, #3
    9c6e:	e7a0      	b.n	9bb2 <_realloc_r+0x7e>
    9c70:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c74:	4611      	mov	r1, r2
    9c76:	f7ff bc95 	b.w	95a4 <_malloc_r>
    9c7a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    9c7e:	eb09 0105 	add.w	r1, r9, r5
    9c82:	f002 0201 	and.w	r2, r2, #1
    9c86:	444e      	add	r6, r9
    9c88:	f043 0301 	orr.w	r3, r3, #1
    9c8c:	432a      	orrs	r2, r5
    9c8e:	f8c9 2004 	str.w	r2, [r9, #4]
    9c92:	604b      	str	r3, [r1, #4]
    9c94:	6873      	ldr	r3, [r6, #4]
    9c96:	f043 0301 	orr.w	r3, r3, #1
    9c9a:	3108      	adds	r1, #8
    9c9c:	6073      	str	r3, [r6, #4]
    9c9e:	4640      	mov	r0, r8
    9ca0:	f002 f800 	bl	bca4 <_free_r>
    9ca4:	e7d2      	b.n	9c4c <_realloc_r+0x118>
    9ca6:	f8dc 0004 	ldr.w	r0, [ip, #4]
    9caa:	f020 0b03 	bic.w	fp, r0, #3
    9cae:	eb06 0c0b 	add.w	ip, r6, fp
    9cb2:	f105 0010 	add.w	r0, r5, #16
    9cb6:	4584      	cmp	ip, r0
    9cb8:	da4d      	bge.n	9d56 <_realloc_r+0x222>
    9cba:	07c9      	lsls	r1, r1, #31
    9cbc:	f53f af7d 	bmi.w	9bba <_realloc_r+0x86>
    9cc0:	f854 1c08 	ldr.w	r1, [r4, #-8]
    9cc4:	eba9 0a01 	sub.w	sl, r9, r1
    9cc8:	f8da 1004 	ldr.w	r1, [sl, #4]
    9ccc:	f021 0103 	bic.w	r1, r1, #3
    9cd0:	448b      	add	fp, r1
    9cd2:	44b3      	add	fp, r6
    9cd4:	4558      	cmp	r0, fp
    9cd6:	f73f af6c 	bgt.w	9bb2 <_realloc_r+0x7e>
    9cda:	4657      	mov	r7, sl
    9cdc:	f8da 100c 	ldr.w	r1, [sl, #12]
    9ce0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9ce4:	1f32      	subs	r2, r6, #4
    9ce6:	2a24      	cmp	r2, #36	; 0x24
    9ce8:	60c1      	str	r1, [r0, #12]
    9cea:	6088      	str	r0, [r1, #8]
    9cec:	f200 80db 	bhi.w	9ea6 <_realloc_r+0x372>
    9cf0:	2a13      	cmp	r2, #19
    9cf2:	f240 80d6 	bls.w	9ea2 <_realloc_r+0x36e>
    9cf6:	6821      	ldr	r1, [r4, #0]
    9cf8:	f8ca 1008 	str.w	r1, [sl, #8]
    9cfc:	6861      	ldr	r1, [r4, #4]
    9cfe:	f8ca 100c 	str.w	r1, [sl, #12]
    9d02:	2a1b      	cmp	r2, #27
    9d04:	f200 80df 	bhi.w	9ec6 <_realloc_r+0x392>
    9d08:	3408      	adds	r4, #8
    9d0a:	f10a 0210 	add.w	r2, sl, #16
    9d0e:	6821      	ldr	r1, [r4, #0]
    9d10:	6011      	str	r1, [r2, #0]
    9d12:	6861      	ldr	r1, [r4, #4]
    9d14:	6051      	str	r1, [r2, #4]
    9d16:	68a1      	ldr	r1, [r4, #8]
    9d18:	6091      	str	r1, [r2, #8]
    9d1a:	eb0a 0105 	add.w	r1, sl, r5
    9d1e:	ebab 0205 	sub.w	r2, fp, r5
    9d22:	f042 0201 	orr.w	r2, r2, #1
    9d26:	6099      	str	r1, [r3, #8]
    9d28:	604a      	str	r2, [r1, #4]
    9d2a:	f8da 3004 	ldr.w	r3, [sl, #4]
    9d2e:	f003 0301 	and.w	r3, r3, #1
    9d32:	432b      	orrs	r3, r5
    9d34:	4640      	mov	r0, r8
    9d36:	f8ca 3004 	str.w	r3, [sl, #4]
    9d3a:	f7ff fee9 	bl	9b10 <__malloc_unlock>
    9d3e:	e76e      	b.n	9c1e <_realloc_r+0xea>
    9d40:	6823      	ldr	r3, [r4, #0]
    9d42:	6003      	str	r3, [r0, #0]
    9d44:	6863      	ldr	r3, [r4, #4]
    9d46:	6043      	str	r3, [r0, #4]
    9d48:	2a1b      	cmp	r2, #27
    9d4a:	d868      	bhi.n	9e1e <_realloc_r+0x2ea>
    9d4c:	f104 0208 	add.w	r2, r4, #8
    9d50:	f100 0308 	add.w	r3, r0, #8
    9d54:	e74a      	b.n	9bec <_realloc_r+0xb8>
    9d56:	eb09 0205 	add.w	r2, r9, r5
    9d5a:	609a      	str	r2, [r3, #8]
    9d5c:	ebac 0305 	sub.w	r3, ip, r5
    9d60:	f043 0301 	orr.w	r3, r3, #1
    9d64:	6053      	str	r3, [r2, #4]
    9d66:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9d6a:	f003 0301 	and.w	r3, r3, #1
    9d6e:	432b      	orrs	r3, r5
    9d70:	4640      	mov	r0, r8
    9d72:	f844 3c04 	str.w	r3, [r4, #-4]
    9d76:	f7ff fecb 	bl	9b10 <__malloc_unlock>
    9d7a:	4627      	mov	r7, r4
    9d7c:	e74f      	b.n	9c1e <_realloc_r+0xea>
    9d7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    9d82:	f023 0303 	bic.w	r3, r3, #3
    9d86:	441e      	add	r6, r3
    9d88:	e751      	b.n	9c2e <_realloc_r+0xfa>
    9d8a:	4657      	mov	r7, sl
    9d8c:	f8da 100c 	ldr.w	r1, [sl, #12]
    9d90:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9d94:	1f32      	subs	r2, r6, #4
    9d96:	2a24      	cmp	r2, #36	; 0x24
    9d98:	60c1      	str	r1, [r0, #12]
    9d9a:	6088      	str	r0, [r1, #8]
    9d9c:	d84c      	bhi.n	9e38 <_realloc_r+0x304>
    9d9e:	2a13      	cmp	r2, #19
    9da0:	d948      	bls.n	9e34 <_realloc_r+0x300>
    9da2:	6821      	ldr	r1, [r4, #0]
    9da4:	f8ca 1008 	str.w	r1, [sl, #8]
    9da8:	6861      	ldr	r1, [r4, #4]
    9daa:	f8ca 100c 	str.w	r1, [sl, #12]
    9dae:	2a1b      	cmp	r2, #27
    9db0:	d856      	bhi.n	9e60 <_realloc_r+0x32c>
    9db2:	3408      	adds	r4, #8
    9db4:	f10a 0210 	add.w	r2, sl, #16
    9db8:	461e      	mov	r6, r3
    9dba:	6823      	ldr	r3, [r4, #0]
    9dbc:	6013      	str	r3, [r2, #0]
    9dbe:	6863      	ldr	r3, [r4, #4]
    9dc0:	6053      	str	r3, [r2, #4]
    9dc2:	68a3      	ldr	r3, [r4, #8]
    9dc4:	6093      	str	r3, [r2, #8]
    9dc6:	46d1      	mov	r9, sl
    9dc8:	463c      	mov	r4, r7
    9dca:	e730      	b.n	9c2e <_realloc_r+0xfa>
    9dcc:	4621      	mov	r1, r4
    9dce:	f001 fa95 	bl	b2fc <memmove>
    9dd2:	e711      	b.n	9bf8 <_realloc_r+0xc4>
    9dd4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    9dd8:	4657      	mov	r7, sl
    9dda:	60cb      	str	r3, [r1, #12]
    9ddc:	6099      	str	r1, [r3, #8]
    9dde:	f857 1f08 	ldr.w	r1, [r7, #8]!
    9de2:	f8da 300c 	ldr.w	r3, [sl, #12]
    9de6:	60cb      	str	r3, [r1, #12]
    9de8:	1f32      	subs	r2, r6, #4
    9dea:	2a24      	cmp	r2, #36	; 0x24
    9dec:	6099      	str	r1, [r3, #8]
    9dee:	d82d      	bhi.n	9e4c <_realloc_r+0x318>
    9df0:	2a13      	cmp	r2, #19
    9df2:	d929      	bls.n	9e48 <_realloc_r+0x314>
    9df4:	6823      	ldr	r3, [r4, #0]
    9df6:	f8ca 3008 	str.w	r3, [sl, #8]
    9dfa:	6863      	ldr	r3, [r4, #4]
    9dfc:	f8ca 300c 	str.w	r3, [sl, #12]
    9e00:	2a1b      	cmp	r2, #27
    9e02:	d842      	bhi.n	9e8a <_realloc_r+0x356>
    9e04:	3408      	adds	r4, #8
    9e06:	f10a 0310 	add.w	r3, sl, #16
    9e0a:	6822      	ldr	r2, [r4, #0]
    9e0c:	601a      	str	r2, [r3, #0]
    9e0e:	6862      	ldr	r2, [r4, #4]
    9e10:	605a      	str	r2, [r3, #4]
    9e12:	68a2      	ldr	r2, [r4, #8]
    9e14:	609a      	str	r2, [r3, #8]
    9e16:	4666      	mov	r6, ip
    9e18:	46d1      	mov	r9, sl
    9e1a:	463c      	mov	r4, r7
    9e1c:	e707      	b.n	9c2e <_realloc_r+0xfa>
    9e1e:	68a3      	ldr	r3, [r4, #8]
    9e20:	6083      	str	r3, [r0, #8]
    9e22:	68e3      	ldr	r3, [r4, #12]
    9e24:	60c3      	str	r3, [r0, #12]
    9e26:	2a24      	cmp	r2, #36	; 0x24
    9e28:	d026      	beq.n	9e78 <_realloc_r+0x344>
    9e2a:	f104 0210 	add.w	r2, r4, #16
    9e2e:	f100 0310 	add.w	r3, r0, #16
    9e32:	e6db      	b.n	9bec <_realloc_r+0xb8>
    9e34:	463a      	mov	r2, r7
    9e36:	e7bf      	b.n	9db8 <_realloc_r+0x284>
    9e38:	4621      	mov	r1, r4
    9e3a:	4638      	mov	r0, r7
    9e3c:	461e      	mov	r6, r3
    9e3e:	46d1      	mov	r9, sl
    9e40:	f001 fa5c 	bl	b2fc <memmove>
    9e44:	463c      	mov	r4, r7
    9e46:	e6f2      	b.n	9c2e <_realloc_r+0xfa>
    9e48:	463b      	mov	r3, r7
    9e4a:	e7de      	b.n	9e0a <_realloc_r+0x2d6>
    9e4c:	4621      	mov	r1, r4
    9e4e:	4638      	mov	r0, r7
    9e50:	4666      	mov	r6, ip
    9e52:	46d1      	mov	r9, sl
    9e54:	f001 fa52 	bl	b2fc <memmove>
    9e58:	463c      	mov	r4, r7
    9e5a:	e6e8      	b.n	9c2e <_realloc_r+0xfa>
    9e5c:	200088dc 	.word	0x200088dc
    9e60:	68a1      	ldr	r1, [r4, #8]
    9e62:	f8ca 1010 	str.w	r1, [sl, #16]
    9e66:	68e1      	ldr	r1, [r4, #12]
    9e68:	f8ca 1014 	str.w	r1, [sl, #20]
    9e6c:	2a24      	cmp	r2, #36	; 0x24
    9e6e:	d020      	beq.n	9eb2 <_realloc_r+0x37e>
    9e70:	3410      	adds	r4, #16
    9e72:	f10a 0218 	add.w	r2, sl, #24
    9e76:	e79f      	b.n	9db8 <_realloc_r+0x284>
    9e78:	6923      	ldr	r3, [r4, #16]
    9e7a:	6103      	str	r3, [r0, #16]
    9e7c:	6961      	ldr	r1, [r4, #20]
    9e7e:	6141      	str	r1, [r0, #20]
    9e80:	f104 0218 	add.w	r2, r4, #24
    9e84:	f100 0318 	add.w	r3, r0, #24
    9e88:	e6b0      	b.n	9bec <_realloc_r+0xb8>
    9e8a:	68a3      	ldr	r3, [r4, #8]
    9e8c:	f8ca 3010 	str.w	r3, [sl, #16]
    9e90:	68e3      	ldr	r3, [r4, #12]
    9e92:	f8ca 3014 	str.w	r3, [sl, #20]
    9e96:	2a24      	cmp	r2, #36	; 0x24
    9e98:	d021      	beq.n	9ede <_realloc_r+0x3aa>
    9e9a:	3410      	adds	r4, #16
    9e9c:	f10a 0318 	add.w	r3, sl, #24
    9ea0:	e7b3      	b.n	9e0a <_realloc_r+0x2d6>
    9ea2:	463a      	mov	r2, r7
    9ea4:	e733      	b.n	9d0e <_realloc_r+0x1da>
    9ea6:	4621      	mov	r1, r4
    9ea8:	4638      	mov	r0, r7
    9eaa:	f001 fa27 	bl	b2fc <memmove>
    9eae:	4b16      	ldr	r3, [pc, #88]	; (9f08 <_realloc_r+0x3d4>)
    9eb0:	e733      	b.n	9d1a <_realloc_r+0x1e6>
    9eb2:	6922      	ldr	r2, [r4, #16]
    9eb4:	f8ca 2018 	str.w	r2, [sl, #24]
    9eb8:	6962      	ldr	r2, [r4, #20]
    9eba:	f8ca 201c 	str.w	r2, [sl, #28]
    9ebe:	3418      	adds	r4, #24
    9ec0:	f10a 0220 	add.w	r2, sl, #32
    9ec4:	e778      	b.n	9db8 <_realloc_r+0x284>
    9ec6:	68a1      	ldr	r1, [r4, #8]
    9ec8:	f8ca 1010 	str.w	r1, [sl, #16]
    9ecc:	68e1      	ldr	r1, [r4, #12]
    9ece:	f8ca 1014 	str.w	r1, [sl, #20]
    9ed2:	2a24      	cmp	r2, #36	; 0x24
    9ed4:	d00d      	beq.n	9ef2 <_realloc_r+0x3be>
    9ed6:	3410      	adds	r4, #16
    9ed8:	f10a 0218 	add.w	r2, sl, #24
    9edc:	e717      	b.n	9d0e <_realloc_r+0x1da>
    9ede:	6923      	ldr	r3, [r4, #16]
    9ee0:	f8ca 3018 	str.w	r3, [sl, #24]
    9ee4:	6963      	ldr	r3, [r4, #20]
    9ee6:	f8ca 301c 	str.w	r3, [sl, #28]
    9eea:	3418      	adds	r4, #24
    9eec:	f10a 0320 	add.w	r3, sl, #32
    9ef0:	e78b      	b.n	9e0a <_realloc_r+0x2d6>
    9ef2:	6922      	ldr	r2, [r4, #16]
    9ef4:	f8ca 2018 	str.w	r2, [sl, #24]
    9ef8:	6962      	ldr	r2, [r4, #20]
    9efa:	f8ca 201c 	str.w	r2, [sl, #28]
    9efe:	3418      	adds	r4, #24
    9f00:	f10a 0220 	add.w	r2, sl, #32
    9f04:	e703      	b.n	9d0e <_realloc_r+0x1da>
    9f06:	bf00      	nop
    9f08:	200088dc 	.word	0x200088dc
    9f0c:	00000000 	.word	0x00000000

00009f10 <_strtod_l>:
    9f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f14:	ed2d 8b10 	vpush	{d8-d15}
    9f18:	b097      	sub	sp, #92	; 0x5c
    9f1a:	468a      	mov	sl, r1
    9f1c:	2100      	movs	r1, #0
    9f1e:	9207      	str	r2, [sp, #28]
    9f20:	9112      	str	r1, [sp, #72]	; 0x48
    9f22:	2200      	movs	r2, #0
    9f24:	2100      	movs	r1, #0
    9f26:	e9cd 1204 	strd	r1, r2, [sp, #16]
    9f2a:	4680      	mov	r8, r0
    9f2c:	4651      	mov	r1, sl
    9f2e:	9111      	str	r1, [sp, #68]	; 0x44
    9f30:	460f      	mov	r7, r1
    9f32:	f811 2b01 	ldrb.w	r2, [r1], #1
    9f36:	2a2d      	cmp	r2, #45	; 0x2d
    9f38:	d85e      	bhi.n	9ff8 <_strtod_l+0xe8>
    9f3a:	a001      	add	r0, pc, #4	; (adr r0, 9f40 <_strtod_l+0x30>)
    9f3c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    9f40:	0000a0e1 	.word	0x0000a0e1
    9f44:	00009ff9 	.word	0x00009ff9
    9f48:	00009ff9 	.word	0x00009ff9
    9f4c:	00009ff9 	.word	0x00009ff9
    9f50:	00009ff9 	.word	0x00009ff9
    9f54:	00009ff9 	.word	0x00009ff9
    9f58:	00009ff9 	.word	0x00009ff9
    9f5c:	00009ff9 	.word	0x00009ff9
    9f60:	00009ff9 	.word	0x00009ff9
    9f64:	00009f2f 	.word	0x00009f2f
    9f68:	00009f2f 	.word	0x00009f2f
    9f6c:	00009f2f 	.word	0x00009f2f
    9f70:	00009f2f 	.word	0x00009f2f
    9f74:	00009f2f 	.word	0x00009f2f
    9f78:	00009ff9 	.word	0x00009ff9
    9f7c:	00009ff9 	.word	0x00009ff9
    9f80:	00009ff9 	.word	0x00009ff9
    9f84:	00009ff9 	.word	0x00009ff9
    9f88:	00009ff9 	.word	0x00009ff9
    9f8c:	00009ff9 	.word	0x00009ff9
    9f90:	00009ff9 	.word	0x00009ff9
    9f94:	00009ff9 	.word	0x00009ff9
    9f98:	00009ff9 	.word	0x00009ff9
    9f9c:	00009ff9 	.word	0x00009ff9
    9fa0:	00009ff9 	.word	0x00009ff9
    9fa4:	00009ff9 	.word	0x00009ff9
    9fa8:	00009ff9 	.word	0x00009ff9
    9fac:	00009ff9 	.word	0x00009ff9
    9fb0:	00009ff9 	.word	0x00009ff9
    9fb4:	00009ff9 	.word	0x00009ff9
    9fb8:	00009ff9 	.word	0x00009ff9
    9fbc:	00009ff9 	.word	0x00009ff9
    9fc0:	00009f2f 	.word	0x00009f2f
    9fc4:	00009ff9 	.word	0x00009ff9
    9fc8:	00009ff9 	.word	0x00009ff9
    9fcc:	00009ff9 	.word	0x00009ff9
    9fd0:	00009ff9 	.word	0x00009ff9
    9fd4:	00009ff9 	.word	0x00009ff9
    9fd8:	00009ff9 	.word	0x00009ff9
    9fdc:	00009ff9 	.word	0x00009ff9
    9fe0:	00009ff9 	.word	0x00009ff9
    9fe4:	00009ff9 	.word	0x00009ff9
    9fe8:	00009ff9 	.word	0x00009ff9
    9fec:	0000a71b 	.word	0x0000a71b
    9ff0:	00009ff9 	.word	0x00009ff9
    9ff4:	0000a707 	.word	0x0000a707
    9ff8:	2100      	movs	r1, #0
    9ffa:	9109      	str	r1, [sp, #36]	; 0x24
    9ffc:	2a30      	cmp	r2, #48	; 0x30
    9ffe:	d07d      	beq.n	a0fc <_strtod_l+0x1ec>
    a000:	2300      	movs	r3, #0
    a002:	9308      	str	r3, [sp, #32]
    a004:	2a2f      	cmp	r2, #47	; 0x2f
    a006:	4614      	mov	r4, r2
    a008:	f240 84cd 	bls.w	a9a6 <_strtod_l+0xa96>
    a00c:	f04f 0900 	mov.w	r9, #0
    a010:	4638      	mov	r0, r7
    a012:	464e      	mov	r6, r9
    a014:	464d      	mov	r5, r9
    a016:	e012      	b.n	a03e <_strtod_l+0x12e>
    a018:	3001      	adds	r0, #1
    a01a:	2d08      	cmp	r5, #8
    a01c:	9011      	str	r0, [sp, #68]	; 0x44
    a01e:	bfc8      	it	gt
    a020:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a024:	7804      	ldrb	r4, [r0, #0]
    a026:	bfc6      	itte	gt
    a028:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a02c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a030:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a034:	2c2f      	cmp	r4, #47	; 0x2f
    a036:	f105 0501 	add.w	r5, r5, #1
    a03a:	4622      	mov	r2, r4
    a03c:	dd6f      	ble.n	a11e <_strtod_l+0x20e>
    a03e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a042:	2c39      	cmp	r4, #57	; 0x39
    a044:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a048:	dde6      	ble.n	a018 <_strtod_l+0x108>
    a04a:	499f      	ldr	r1, [pc, #636]	; (a2c8 <_strtod_l+0x3b8>)
    a04c:	2201      	movs	r2, #1
    a04e:	f001 fa23 	bl	b498 <strncmp>
    a052:	2800      	cmp	r0, #0
    a054:	d137      	bne.n	a0c6 <_strtod_l+0x1b6>
    a056:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a058:	461a      	mov	r2, r3
    a05a:	3301      	adds	r3, #1
    a05c:	9311      	str	r3, [sp, #68]	; 0x44
    a05e:	7854      	ldrb	r4, [r2, #1]
    a060:	2d00      	cmp	r5, #0
    a062:	f040 8543 	bne.w	aaec <_strtod_l+0xbdc>
    a066:	2c30      	cmp	r4, #48	; 0x30
    a068:	f040 8524 	bne.w	aab4 <_strtod_l+0xba4>
    a06c:	f1c3 0201 	rsb	r2, r3, #1
    a070:	1898      	adds	r0, r3, r2
    a072:	3301      	adds	r3, #1
    a074:	9311      	str	r3, [sp, #68]	; 0x44
    a076:	781c      	ldrb	r4, [r3, #0]
    a078:	2c30      	cmp	r4, #48	; 0x30
    a07a:	d0f9      	beq.n	a070 <_strtod_l+0x160>
    a07c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a080:	2b08      	cmp	r3, #8
    a082:	f200 8301 	bhi.w	a688 <_strtod_l+0x778>
    a086:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a088:	1c43      	adds	r3, r0, #1
    a08a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a08e:	930b      	str	r3, [sp, #44]	; 0x2c
    a090:	2501      	movs	r5, #1
    a092:	46bc      	mov	ip, r7
    a094:	f04f 0e00 	mov.w	lr, #0
    a098:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a09c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a0a0:	2000      	movs	r0, #0
    a0a2:	f10c 0301 	add.w	r3, ip, #1
    a0a6:	9311      	str	r3, [sp, #68]	; 0x44
    a0a8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a0ac:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a0b0:	2909      	cmp	r1, #9
    a0b2:	f200 82bb 	bhi.w	a62c <_strtod_l+0x71c>
    a0b6:	3001      	adds	r0, #1
    a0b8:	468b      	mov	fp, r1
    a0ba:	2900      	cmp	r1, #0
    a0bc:	f040 844f 	bne.w	a95e <_strtod_l+0xa4e>
    a0c0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a0c4:	e7ed      	b.n	a0a2 <_strtod_l+0x192>
    a0c6:	2000      	movs	r0, #0
    a0c8:	2c65      	cmp	r4, #101	; 0x65
    a0ca:	46ae      	mov	lr, r5
    a0cc:	900b      	str	r0, [sp, #44]	; 0x2c
    a0ce:	4684      	mov	ip, r0
    a0d0:	d001      	beq.n	a0d6 <_strtod_l+0x1c6>
    a0d2:	2c45      	cmp	r4, #69	; 0x45
    a0d4:	d130      	bne.n	a138 <_strtod_l+0x228>
    a0d6:	2d00      	cmp	r5, #0
    a0d8:	d16b      	bne.n	a1b2 <_strtod_l+0x2a2>
    a0da:	9b08      	ldr	r3, [sp, #32]
    a0dc:	4303      	orrs	r3, r0
    a0de:	d167      	bne.n	a1b0 <_strtod_l+0x2a0>
    a0e0:	9b07      	ldr	r3, [sp, #28]
    a0e2:	ed9f 8b77 	vldr	d8, [pc, #476]	; a2c0 <_strtod_l+0x3b0>
    a0e6:	b113      	cbz	r3, a0ee <_strtod_l+0x1de>
    a0e8:	9b07      	ldr	r3, [sp, #28]
    a0ea:	f8c3 a000 	str.w	sl, [r3]
    a0ee:	eeb0 0b48 	vmov.f64	d0, d8
    a0f2:	b017      	add	sp, #92	; 0x5c
    a0f4:	ecbd 8b10 	vpop	{d8-d15}
    a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0fc:	787a      	ldrb	r2, [r7, #1]
    a0fe:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a102:	2a58      	cmp	r2, #88	; 0x58
    a104:	f000 840c 	beq.w	a920 <_strtod_l+0xa10>
    a108:	3701      	adds	r7, #1
    a10a:	9711      	str	r7, [sp, #68]	; 0x44
    a10c:	783a      	ldrb	r2, [r7, #0]
    a10e:	2a30      	cmp	r2, #48	; 0x30
    a110:	d0fa      	beq.n	a108 <_strtod_l+0x1f8>
    a112:	2a00      	cmp	r2, #0
    a114:	f000 80b7 	beq.w	a286 <_strtod_l+0x376>
    a118:	2301      	movs	r3, #1
    a11a:	9308      	str	r3, [sp, #32]
    a11c:	e772      	b.n	a004 <_strtod_l+0xf4>
    a11e:	496a      	ldr	r1, [pc, #424]	; (a2c8 <_strtod_l+0x3b8>)
    a120:	2201      	movs	r2, #1
    a122:	f001 f9b9 	bl	b498 <strncmp>
    a126:	2800      	cmp	r0, #0
    a128:	f000 80c0 	beq.w	a2ac <_strtod_l+0x39c>
    a12c:	46ae      	mov	lr, r5
    a12e:	f04f 0c00 	mov.w	ip, #0
    a132:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a136:	4660      	mov	r0, ip
    a138:	f04f 0b00 	mov.w	fp, #0
    a13c:	2d00      	cmp	r5, #0
    a13e:	d07e      	beq.n	a23e <_strtod_l+0x32e>
    a140:	ee07 6a90 	vmov	s15, r6
    a144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a146:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a14a:	ebab 0303 	sub.w	r3, fp, r3
    a14e:	f1be 0f00 	cmp.w	lr, #0
    a152:	bf08      	it	eq
    a154:	46ae      	moveq	lr, r5
    a156:	2d10      	cmp	r5, #16
    a158:	930a      	str	r3, [sp, #40]	; 0x28
    a15a:	462b      	mov	r3, r5
    a15c:	bfa8      	it	ge
    a15e:	2310      	movge	r3, #16
    a160:	2d09      	cmp	r5, #9
    a162:	ed8d 7b04 	vstr	d7, [sp, #16]
    a166:	dd0c      	ble.n	a182 <_strtod_l+0x272>
    a168:	4a58      	ldr	r2, [pc, #352]	; (a2cc <_strtod_l+0x3bc>)
    a16a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a16e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a172:	ee06 9a90 	vmov	s13, r9
    a176:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a17a:	eea7 6b05 	vfma.f64	d6, d7, d5
    a17e:	ed8d 6b04 	vstr	d6, [sp, #16]
    a182:	2d0f      	cmp	r5, #15
    a184:	f300 80a8 	bgt.w	a2d8 <_strtod_l+0x3c8>
    a188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a18a:	2a00      	cmp	r2, #0
    a18c:	f000 83e4 	beq.w	a958 <_strtod_l+0xa48>
    a190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a192:	f340 833c 	ble.w	a80e <_strtod_l+0x8fe>
    a196:	2a16      	cmp	r2, #22
    a198:	f340 8498 	ble.w	aacc <_strtod_l+0xbbc>
    a19c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a19e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a1a2:	428a      	cmp	r2, r1
    a1a4:	f280 84a6 	bge.w	aaf4 <_strtod_l+0xbe4>
    a1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1aa:	1aeb      	subs	r3, r5, r3
    a1ac:	4413      	add	r3, r2
    a1ae:	e099      	b.n	a2e4 <_strtod_l+0x3d4>
    a1b0:	2500      	movs	r5, #0
    a1b2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a1b6:	f10a 0301 	add.w	r3, sl, #1
    a1ba:	9311      	str	r3, [sp, #68]	; 0x44
    a1bc:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a1c0:	2c2b      	cmp	r4, #43	; 0x2b
    a1c2:	f000 825e 	beq.w	a682 <_strtod_l+0x772>
    a1c6:	2c2d      	cmp	r4, #45	; 0x2d
    a1c8:	f000 81f7 	beq.w	a5ba <_strtod_l+0x6aa>
    a1cc:	2300      	movs	r3, #0
    a1ce:	930a      	str	r3, [sp, #40]	; 0x28
    a1d0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a1d4:	2b09      	cmp	r3, #9
    a1d6:	f200 81eb 	bhi.w	a5b0 <_strtod_l+0x6a0>
    a1da:	2c30      	cmp	r4, #48	; 0x30
    a1dc:	d105      	bne.n	a1ea <_strtod_l+0x2da>
    a1de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a1e0:	3301      	adds	r3, #1
    a1e2:	9311      	str	r3, [sp, #68]	; 0x44
    a1e4:	781c      	ldrb	r4, [r3, #0]
    a1e6:	2c30      	cmp	r4, #48	; 0x30
    a1e8:	d0fa      	beq.n	a1e0 <_strtod_l+0x2d0>
    a1ea:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a1ee:	2b08      	cmp	r3, #8
    a1f0:	d8a2      	bhi.n	a138 <_strtod_l+0x228>
    a1f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a1f4:	920c      	str	r2, [sp, #48]	; 0x30
    a1f6:	1c53      	adds	r3, r2, #1
    a1f8:	9311      	str	r3, [sp, #68]	; 0x44
    a1fa:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a1fe:	7854      	ldrb	r4, [r2, #1]
    a200:	2c2f      	cmp	r4, #47	; 0x2f
    a202:	dc07      	bgt.n	a214 <_strtod_l+0x304>
    a204:	e3de      	b.n	a9c4 <_strtod_l+0xab4>
    a206:	3301      	adds	r3, #1
    a208:	9311      	str	r3, [sp, #68]	; 0x44
    a20a:	784c      	ldrb	r4, [r1, #1]
    a20c:	2c2f      	cmp	r4, #47	; 0x2f
    a20e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a212:	dd06      	ble.n	a222 <_strtod_l+0x312>
    a214:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a218:	2c39      	cmp	r4, #57	; 0x39
    a21a:	4619      	mov	r1, r3
    a21c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a220:	ddf1      	ble.n	a206 <_strtod_l+0x2f6>
    a222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a224:	1a9b      	subs	r3, r3, r2
    a226:	2b08      	cmp	r3, #8
    a228:	f340 83cc 	ble.w	a9c4 <_strtod_l+0xab4>
    a22c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a232:	2b00      	cmp	r3, #0
    a234:	d082      	beq.n	a13c <_strtod_l+0x22c>
    a236:	f1cb 0b00 	rsb	fp, fp, #0
    a23a:	2d00      	cmp	r5, #0
    a23c:	d180      	bne.n	a140 <_strtod_l+0x230>
    a23e:	9b08      	ldr	r3, [sp, #32]
    a240:	4303      	orrs	r3, r0
    a242:	d120      	bne.n	a286 <_strtod_l+0x376>
    a244:	f1bc 0f00 	cmp.w	ip, #0
    a248:	f47f af4a 	bne.w	a0e0 <_strtod_l+0x1d0>
    a24c:	2c69      	cmp	r4, #105	; 0x69
    a24e:	f000 83cf 	beq.w	a9f0 <_strtod_l+0xae0>
    a252:	f300 82f3 	bgt.w	a83c <_strtod_l+0x92c>
    a256:	2c49      	cmp	r4, #73	; 0x49
    a258:	f000 83ca 	beq.w	a9f0 <_strtod_l+0xae0>
    a25c:	2c4e      	cmp	r4, #78	; 0x4e
    a25e:	f47f af3f 	bne.w	a0e0 <_strtod_l+0x1d0>
    a262:	491b      	ldr	r1, [pc, #108]	; (a2d0 <_strtod_l+0x3c0>)
    a264:	a811      	add	r0, sp, #68	; 0x44
    a266:	f002 f93f 	bl	c4e8 <__match>
    a26a:	2800      	cmp	r0, #0
    a26c:	f43f af38 	beq.w	a0e0 <_strtod_l+0x1d0>
    a270:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a272:	781b      	ldrb	r3, [r3, #0]
    a274:	2b28      	cmp	r3, #40	; 0x28
    a276:	f000 84f2 	beq.w	ac5e <_strtod_l+0xd4e>
    a27a:	4816      	ldr	r0, [pc, #88]	; (a2d4 <_strtod_l+0x3c4>)
    a27c:	f001 fc70 	bl	bb60 <nan>
    a280:	eeb0 8b40 	vmov.f64	d8, d0
    a284:	e001      	b.n	a28a <_strtod_l+0x37a>
    a286:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a2c0 <_strtod_l+0x3b0>
    a28a:	9a07      	ldr	r2, [sp, #28]
    a28c:	b10a      	cbz	r2, a292 <_strtod_l+0x382>
    a28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a290:	6013      	str	r3, [r2, #0]
    a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a294:	2b00      	cmp	r3, #0
    a296:	f43f af2a 	beq.w	a0ee <_strtod_l+0x1de>
    a29a:	eeb1 8b48 	vneg.f64	d8, d8
    a29e:	eeb0 0b48 	vmov.f64	d0, d8
    a2a2:	b017      	add	sp, #92	; 0x5c
    a2a4:	ecbd 8b10 	vpop	{d8-d15}
    a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a2ae:	900b      	str	r0, [sp, #44]	; 0x2c
    a2b0:	1c5a      	adds	r2, r3, #1
    a2b2:	9211      	str	r2, [sp, #68]	; 0x44
    a2b4:	785c      	ldrb	r4, [r3, #1]
    a2b6:	46ae      	mov	lr, r5
    a2b8:	e6f8      	b.n	a0ac <_strtod_l+0x19c>
    a2ba:	bf00      	nop
    a2bc:	f3af 8000 	nop.w
	...
    a2c8:	20007eb8 	.word	0x20007eb8
    a2cc:	200002a8 	.word	0x200002a8
    a2d0:	20000db8 	.word	0x20000db8
    a2d4:	200081a8 	.word	0x200081a8
    a2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a2da:	1aeb      	subs	r3, r5, r3
    a2dc:	4413      	add	r3, r2
    a2de:	2b00      	cmp	r3, #0
    a2e0:	f340 82b0 	ble.w	a844 <_strtod_l+0x934>
    a2e4:	f013 010f 	ands.w	r1, r3, #15
    a2e8:	d00a      	beq.n	a300 <_strtod_l+0x3f0>
    a2ea:	4ac3      	ldr	r2, [pc, #780]	; (a5f8 <_strtod_l+0x6e8>)
    a2ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a2f0:	ed9d 6b04 	vldr	d6, [sp, #16]
    a2f4:	ed92 7b00 	vldr	d7, [r2]
    a2f8:	ee27 7b06 	vmul.f64	d7, d7, d6
    a2fc:	ed8d 7b04 	vstr	d7, [sp, #16]
    a300:	f033 020f 	bics.w	r2, r3, #15
    a304:	f040 8238 	bne.w	a778 <_strtod_l+0x868>
    a308:	2300      	movs	r3, #0
    a30a:	9308      	str	r3, [sp, #32]
    a30c:	9600      	str	r6, [sp, #0]
    a30e:	462b      	mov	r3, r5
    a310:	4672      	mov	r2, lr
    a312:	4639      	mov	r1, r7
    a314:	4640      	mov	r0, r8
    a316:	f002 fa73 	bl	c800 <__s2b>
    a31a:	4681      	mov	r9, r0
    a31c:	2800      	cmp	r0, #0
    a31e:	f000 82e1 	beq.w	a8e4 <_strtod_l+0x9d4>
    a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a324:	eba3 0b0b 	sub.w	fp, r3, fp
    a328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a32a:	ed9f eba9 	vldr	d14, [pc, #676]	; a5d0 <_strtod_l+0x6c0>
    a32e:	2b00      	cmp	r3, #0
    a330:	ed9f cba9 	vldr	d12, [pc, #676]	; a5d8 <_strtod_l+0x6c8>
    a334:	ed9f dbaa 	vldr	d13, [pc, #680]	; a5e0 <_strtod_l+0x6d0>
    a338:	ed9f bbab 	vldr	d11, [pc, #684]	; a5e8 <_strtod_l+0x6d8>
    a33c:	bfb4      	ite	lt
    a33e:	465a      	movlt	r2, fp
    a340:	2200      	movge	r2, #0
    a342:	f04f 0a00 	mov.w	sl, #0
    a346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a34a:	920b      	str	r2, [sp, #44]	; 0x2c
    a34c:	930c      	str	r3, [sp, #48]	; 0x30
    a34e:	4654      	mov	r4, sl
    a350:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a354:	4640      	mov	r0, r8
    a356:	f002 f9d1 	bl	c6fc <_Balloc>
    a35a:	4606      	mov	r6, r0
    a35c:	2800      	cmp	r0, #0
    a35e:	f000 810e 	beq.w	a57e <_strtod_l+0x66e>
    a362:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a366:	ed9d 8b04 	vldr	d8, [sp, #16]
    a36a:	3202      	adds	r2, #2
    a36c:	0092      	lsls	r2, r2, #2
    a36e:	f109 010c 	add.w	r1, r9, #12
    a372:	300c      	adds	r0, #12
    a374:	f7fd fb72 	bl	7a5c <memcpy>
    a378:	eeb0 0b48 	vmov.f64	d0, d8
    a37c:	aa14      	add	r2, sp, #80	; 0x50
    a37e:	a913      	add	r1, sp, #76	; 0x4c
    a380:	4640      	mov	r0, r8
    a382:	f002 fdf9 	bl	cf78 <__d2b>
    a386:	9012      	str	r0, [sp, #72]	; 0x48
    a388:	2800      	cmp	r0, #0
    a38a:	f000 80e4 	beq.w	a556 <_strtod_l+0x646>
    a38e:	2101      	movs	r1, #1
    a390:	4640      	mov	r0, r8
    a392:	f002 fadd 	bl	c950 <__i2b>
    a396:	4604      	mov	r4, r0
    a398:	2800      	cmp	r0, #0
    a39a:	f000 80f0 	beq.w	a57e <_strtod_l+0x66e>
    a39e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a3a0:	2a00      	cmp	r2, #0
    a3a2:	f2c0 80de 	blt.w	a562 <_strtod_l+0x652>
    a3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a3aa:	eb02 0b03 	add.w	fp, r2, r3
    a3ae:	9b08      	ldr	r3, [sp, #32]
    a3b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    a3b2:	1ad2      	subs	r2, r2, r3
    a3b4:	442a      	add	r2, r5
    a3b6:	4b91      	ldr	r3, [pc, #580]	; (a5fc <_strtod_l+0x6ec>)
    a3b8:	3a01      	subs	r2, #1
    a3ba:	429a      	cmp	r2, r3
    a3bc:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    a3c0:	f280 8098 	bge.w	a4f4 <_strtod_l+0x5e4>
    a3c4:	1a99      	subs	r1, r3, r2
    a3c6:	291f      	cmp	r1, #31
    a3c8:	eba5 0501 	sub.w	r5, r5, r1
    a3cc:	f300 80e3 	bgt.w	a596 <_strtod_l+0x686>
    a3d0:	2201      	movs	r2, #1
    a3d2:	fa02 f301 	lsl.w	r3, r2, r1
    a3d6:	930d      	str	r3, [sp, #52]	; 0x34
    a3d8:	2300      	movs	r3, #0
    a3da:	930e      	str	r3, [sp, #56]	; 0x38
    a3dc:	442f      	add	r7, r5
    a3de:	9b08      	ldr	r3, [sp, #32]
    a3e0:	445d      	add	r5, fp
    a3e2:	45ab      	cmp	fp, r5
    a3e4:	465a      	mov	r2, fp
    a3e6:	441f      	add	r7, r3
    a3e8:	bfa8      	it	ge
    a3ea:	462a      	movge	r2, r5
    a3ec:	42ba      	cmp	r2, r7
    a3ee:	bfa8      	it	ge
    a3f0:	463a      	movge	r2, r7
    a3f2:	2a00      	cmp	r2, #0
    a3f4:	dd03      	ble.n	a3fe <_strtod_l+0x4ee>
    a3f6:	1aad      	subs	r5, r5, r2
    a3f8:	1abf      	subs	r7, r7, r2
    a3fa:	ebab 0b02 	sub.w	fp, fp, r2
    a3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a400:	2b00      	cmp	r3, #0
    a402:	f300 8088 	bgt.w	a516 <_strtod_l+0x606>
    a406:	2d00      	cmp	r5, #0
    a408:	f300 809c 	bgt.w	a544 <_strtod_l+0x634>
    a40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a40e:	2b00      	cmp	r3, #0
    a410:	f300 80b7 	bgt.w	a582 <_strtod_l+0x672>
    a414:	2f00      	cmp	r7, #0
    a416:	f300 80a9 	bgt.w	a56c <_strtod_l+0x65c>
    a41a:	f1bb 0f00 	cmp.w	fp, #0
    a41e:	dd08      	ble.n	a432 <_strtod_l+0x522>
    a420:	4621      	mov	r1, r4
    a422:	465a      	mov	r2, fp
    a424:	4640      	mov	r0, r8
    a426:	f002 fbcf 	bl	cbc8 <__lshift>
    a42a:	4604      	mov	r4, r0
    a42c:	2800      	cmp	r0, #0
    a42e:	f000 80a6 	beq.w	a57e <_strtod_l+0x66e>
    a432:	9912      	ldr	r1, [sp, #72]	; 0x48
    a434:	4632      	mov	r2, r6
    a436:	4640      	mov	r0, r8
    a438:	f002 fc60 	bl	ccfc <__mdiff>
    a43c:	4682      	mov	sl, r0
    a43e:	2800      	cmp	r0, #0
    a440:	f000 809d 	beq.w	a57e <_strtod_l+0x66e>
    a444:	2300      	movs	r3, #0
    a446:	68c5      	ldr	r5, [r0, #12]
    a448:	60c3      	str	r3, [r0, #12]
    a44a:	4621      	mov	r1, r4
    a44c:	f002 fc34 	bl	ccb8 <__mcmp>
    a450:	2800      	cmp	r0, #0
    a452:	f2c0 83c7 	blt.w	abe4 <_strtod_l+0xcd4>
    a456:	f000 8361 	beq.w	ab1c <_strtod_l+0xc0c>
    a45a:	4621      	mov	r1, r4
    a45c:	4650      	mov	r0, sl
    a45e:	f002 fdf5 	bl	d04c <__ratio>
    a462:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    a466:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a46e:	d846      	bhi.n	a4fe <_strtod_l+0x5ee>
    a470:	2d00      	cmp	r5, #0
    a472:	f000 80cb 	beq.w	a60c <_strtod_l+0x6fc>
    a476:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    a47a:	9805      	ldr	r0, [sp, #20]
    a47c:	4b60      	ldr	r3, [pc, #384]	; (a600 <_strtod_l+0x6f0>)
    a47e:	2200      	movs	r2, #0
    a480:	4960      	ldr	r1, [pc, #384]	; (a604 <_strtod_l+0x6f4>)
    a482:	f8df c184 	ldr.w	ip, [pc, #388]	; a608 <_strtod_l+0x6f8>
    a486:	ea00 0701 	and.w	r7, r0, r1
    a48a:	4567      	cmp	r7, ip
    a48c:	f000 80d4 	beq.w	a638 <_strtod_l+0x728>
    a490:	9908      	ldr	r1, [sp, #32]
    a492:	b159      	cbz	r1, a4ac <_strtod_l+0x59c>
    a494:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    a498:	d808      	bhi.n	a4ac <_strtod_l+0x59c>
    a49a:	eeb4 9bcb 	vcmpe.f64	d9, d11
    a49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a4a2:	f240 8156 	bls.w	a752 <_strtod_l+0x842>
    a4a6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    a4aa:	1bcb      	subs	r3, r1, r7
    a4ac:	eeb0 0b48 	vmov.f64	d0, d8
    a4b0:	ec43 2b1a 	vmov	d10, r2, r3
    a4b4:	f002 fccc 	bl	ce50 <__ulp>
    a4b8:	eeaa 8b00 	vfma.f64	d8, d10, d0
    a4bc:	ed8d 8b04 	vstr	d8, [sp, #16]
    a4c0:	ee18 3a90 	vmov	r3, s17
    a4c4:	9a08      	ldr	r2, [sp, #32]
    a4c6:	b922      	cbnz	r2, a4d2 <_strtod_l+0x5c2>
    a4c8:	4a4e      	ldr	r2, [pc, #312]	; (a604 <_strtod_l+0x6f4>)
    a4ca:	401a      	ands	r2, r3
    a4cc:	4297      	cmp	r7, r2
    a4ce:	f000 80e4 	beq.w	a69a <_strtod_l+0x78a>
    a4d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    a4d4:	4640      	mov	r0, r8
    a4d6:	f002 f937 	bl	c748 <_Bfree>
    a4da:	4631      	mov	r1, r6
    a4dc:	4640      	mov	r0, r8
    a4de:	f002 f933 	bl	c748 <_Bfree>
    a4e2:	4621      	mov	r1, r4
    a4e4:	4640      	mov	r0, r8
    a4e6:	f002 f92f 	bl	c748 <_Bfree>
    a4ea:	4651      	mov	r1, sl
    a4ec:	4640      	mov	r0, r8
    a4ee:	f002 f92b 	bl	c748 <_Bfree>
    a4f2:	e72d      	b.n	a350 <_strtod_l+0x440>
    a4f4:	2301      	movs	r3, #1
    a4f6:	2100      	movs	r1, #0
    a4f8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    a4fc:	e76e      	b.n	a3dc <_strtod_l+0x4cc>
    a4fe:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    a502:	ee20 9b09 	vmul.f64	d9, d0, d9
    a506:	2d00      	cmp	r5, #0
    a508:	d15f      	bne.n	a5ca <_strtod_l+0x6ba>
    a50a:	eeb1 7b49 	vneg.f64	d7, d9
    a50e:	9805      	ldr	r0, [sp, #20]
    a510:	ec53 2b17 	vmov	r2, r3, d7
    a514:	e7b4      	b.n	a480 <_strtod_l+0x570>
    a516:	4621      	mov	r1, r4
    a518:	461a      	mov	r2, r3
    a51a:	4640      	mov	r0, r8
    a51c:	f002 faf4 	bl	cb08 <__pow5mult>
    a520:	4604      	mov	r4, r0
    a522:	b360      	cbz	r0, a57e <_strtod_l+0x66e>
    a524:	4601      	mov	r1, r0
    a526:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a528:	4640      	mov	r0, r8
    a52a:	f002 fa3f 	bl	c9ac <__multiply>
    a52e:	b330      	cbz	r0, a57e <_strtod_l+0x66e>
    a530:	900f      	str	r0, [sp, #60]	; 0x3c
    a532:	9912      	ldr	r1, [sp, #72]	; 0x48
    a534:	4640      	mov	r0, r8
    a536:	f002 f907 	bl	c748 <_Bfree>
    a53a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a53c:	9212      	str	r2, [sp, #72]	; 0x48
    a53e:	2d00      	cmp	r5, #0
    a540:	f77f af64 	ble.w	a40c <_strtod_l+0x4fc>
    a544:	9912      	ldr	r1, [sp, #72]	; 0x48
    a546:	462a      	mov	r2, r5
    a548:	4640      	mov	r0, r8
    a54a:	f002 fb3d 	bl	cbc8 <__lshift>
    a54e:	9012      	str	r0, [sp, #72]	; 0x48
    a550:	2800      	cmp	r0, #0
    a552:	f47f af5b 	bne.w	a40c <_strtod_l+0x4fc>
    a556:	2322      	movs	r3, #34	; 0x22
    a558:	ed9f 8b25 	vldr	d8, [pc, #148]	; a5f0 <_strtod_l+0x6e0>
    a55c:	f8c8 3000 	str.w	r3, [r8]
    a560:	e0bc      	b.n	a6dc <_strtod_l+0x7cc>
    a562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a564:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    a568:	1a9f      	subs	r7, r3, r2
    a56a:	e720      	b.n	a3ae <_strtod_l+0x49e>
    a56c:	4631      	mov	r1, r6
    a56e:	463a      	mov	r2, r7
    a570:	4640      	mov	r0, r8
    a572:	f002 fb29 	bl	cbc8 <__lshift>
    a576:	4606      	mov	r6, r0
    a578:	2800      	cmp	r0, #0
    a57a:	f47f af4e 	bne.w	a41a <_strtod_l+0x50a>
    a57e:	9812      	ldr	r0, [sp, #72]	; 0x48
    a580:	e7e9      	b.n	a556 <_strtod_l+0x646>
    a582:	4631      	mov	r1, r6
    a584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a586:	4640      	mov	r0, r8
    a588:	f002 fabe 	bl	cb08 <__pow5mult>
    a58c:	4606      	mov	r6, r0
    a58e:	2800      	cmp	r0, #0
    a590:	f47f af40 	bne.w	a414 <_strtod_l+0x504>
    a594:	e7f3      	b.n	a57e <_strtod_l+0x66e>
    a596:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    a59a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    a59e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    a5a2:	2101      	movs	r1, #1
    a5a4:	32e2      	adds	r2, #226	; 0xe2
    a5a6:	fa01 f302 	lsl.w	r3, r1, r2
    a5aa:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    a5ae:	e715      	b.n	a3dc <_strtod_l+0x4cc>
    a5b0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    a5b4:	f04f 0b00 	mov.w	fp, #0
    a5b8:	e5c0      	b.n	a13c <_strtod_l+0x22c>
    a5ba:	2301      	movs	r3, #1
    a5bc:	930a      	str	r3, [sp, #40]	; 0x28
    a5be:	f10a 0302 	add.w	r3, sl, #2
    a5c2:	9311      	str	r3, [sp, #68]	; 0x44
    a5c4:	f89a 4002 	ldrb.w	r4, [sl, #2]
    a5c8:	e602      	b.n	a1d0 <_strtod_l+0x2c0>
    a5ca:	eeb0 7b49 	vmov.f64	d7, d9
    a5ce:	e79e      	b.n	a50e <_strtod_l+0x5fe>
    a5d0:	94a03595 	.word	0x94a03595
    a5d4:	3fcfffff 	.word	0x3fcfffff
    a5d8:	94a03595 	.word	0x94a03595
    a5dc:	3fdfffff 	.word	0x3fdfffff
    a5e0:	35afe535 	.word	0x35afe535
    a5e4:	3fe00000 	.word	0x3fe00000
    a5e8:	ffc00000 	.word	0xffc00000
    a5ec:	41dfffff 	.word	0x41dfffff
    a5f0:	00000000 	.word	0x00000000
    a5f4:	7ff00000 	.word	0x7ff00000
    a5f8:	200002a8 	.word	0x200002a8
    a5fc:	fffffc02 	.word	0xfffffc02
    a600:	3ff00000 	.word	0x3ff00000
    a604:	7ff00000 	.word	0x7ff00000
    a608:	7fe00000 	.word	0x7fe00000
    a60c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    a610:	2900      	cmp	r1, #0
    a612:	f000 8085 	beq.w	a720 <_strtod_l+0x810>
    a616:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    a61a:	2901      	cmp	r1, #1
    a61c:	f000 81d8 	beq.w	a9d0 <_strtod_l+0xac0>
    a620:	4610      	mov	r0, r2
    a622:	4bb7      	ldr	r3, [pc, #732]	; (a900 <_strtod_l+0x9f0>)
    a624:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    a628:	2200      	movs	r2, #0
    a62a:	e729      	b.n	a480 <_strtod_l+0x570>
    a62c:	2c65      	cmp	r4, #101	; 0x65
    a62e:	f04f 0c01 	mov.w	ip, #1
    a632:	f43f adbe 	beq.w	a1b2 <_strtod_l+0x2a2>
    a636:	e54c      	b.n	a0d2 <_strtod_l+0x1c2>
    a638:	ec43 2b1a 	vmov	d10, r2, r3
    a63c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    a640:	9305      	str	r3, [sp, #20]
    a642:	ed9d fb04 	vldr	d15, [sp, #16]
    a646:	eeb0 0b4f 	vmov.f64	d0, d15
    a64a:	f002 fc01 	bl	ce50 <__ulp>
    a64e:	49ad      	ldr	r1, [pc, #692]	; (a904 <_strtod_l+0x9f4>)
    a650:	eeaa fb00 	vfma.f64	d15, d10, d0
    a654:	ee1f 3a90 	vmov	r3, s31
    a658:	4aab      	ldr	r2, [pc, #684]	; (a908 <_strtod_l+0x9f8>)
    a65a:	4019      	ands	r1, r3
    a65c:	4291      	cmp	r1, r2
    a65e:	ed8d fb04 	vstr	d15, [sp, #16]
    a662:	d972      	bls.n	a74a <_strtod_l+0x83a>
    a664:	4ba9      	ldr	r3, [pc, #676]	; (a90c <_strtod_l+0x9fc>)
    a666:	ee18 2a90 	vmov	r2, s17
    a66a:	429a      	cmp	r2, r3
    a66c:	d103      	bne.n	a676 <_strtod_l+0x766>
    a66e:	ee18 3a10 	vmov	r3, s16
    a672:	3301      	adds	r3, #1
    a674:	d083      	beq.n	a57e <_strtod_l+0x66e>
    a676:	4aa5      	ldr	r2, [pc, #660]	; (a90c <_strtod_l+0x9fc>)
    a678:	f04f 33ff 	mov.w	r3, #4294967295
    a67c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    a680:	e727      	b.n	a4d2 <_strtod_l+0x5c2>
    a682:	2300      	movs	r3, #0
    a684:	930a      	str	r3, [sp, #40]	; 0x28
    a686:	e79a      	b.n	a5be <_strtod_l+0x6ae>
    a688:	2c65      	cmp	r4, #101	; 0x65
    a68a:	f000 80d0 	beq.w	a82e <_strtod_l+0x91e>
    a68e:	2c45      	cmp	r4, #69	; 0x45
    a690:	f000 80cd 	beq.w	a82e <_strtod_l+0x91e>
    a694:	f04f 0c01 	mov.w	ip, #1
    a698:	e5d1      	b.n	a23e <_strtod_l+0x32e>
    a69a:	ec51 0b19 	vmov	r0, r1, d9
    a69e:	930d      	str	r3, [sp, #52]	; 0x34
    a6a0:	f009 fb90 	bl	13dc4 <__aeabi_d2lz>
    a6a4:	f009 fb60 	bl	13d68 <__aeabi_l2d>
    a6a8:	9b04      	ldr	r3, [sp, #16]
    a6aa:	431d      	orrs	r5, r3
    a6ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a6ae:	ec41 0b17 	vmov	d7, r0, r1
    a6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a6b6:	431d      	orrs	r5, r3
    a6b8:	ee39 9b47 	vsub.f64	d9, d9, d7
    a6bc:	f000 80a0 	beq.w	a800 <_strtod_l+0x8f0>
    a6c0:	eeb4 9bcc 	vcmpe.f64	d9, d12
    a6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6c8:	d405      	bmi.n	a6d6 <_strtod_l+0x7c6>
    a6ca:	eeb4 9bcd 	vcmpe.f64	d9, d13
    a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6d2:	f77f aefe 	ble.w	a4d2 <_strtod_l+0x5c2>
    a6d6:	ed9d 8b04 	vldr	d8, [sp, #16]
    a6da:	9812      	ldr	r0, [sp, #72]	; 0x48
    a6dc:	4601      	mov	r1, r0
    a6de:	4640      	mov	r0, r8
    a6e0:	f002 f832 	bl	c748 <_Bfree>
    a6e4:	4631      	mov	r1, r6
    a6e6:	4640      	mov	r0, r8
    a6e8:	f002 f82e 	bl	c748 <_Bfree>
    a6ec:	4621      	mov	r1, r4
    a6ee:	4640      	mov	r0, r8
    a6f0:	f002 f82a 	bl	c748 <_Bfree>
    a6f4:	4649      	mov	r1, r9
    a6f6:	4640      	mov	r0, r8
    a6f8:	f002 f826 	bl	c748 <_Bfree>
    a6fc:	4651      	mov	r1, sl
    a6fe:	4640      	mov	r0, r8
    a700:	f002 f822 	bl	c748 <_Bfree>
    a704:	e5c1      	b.n	a28a <_strtod_l+0x37a>
    a706:	2201      	movs	r2, #1
    a708:	9209      	str	r2, [sp, #36]	; 0x24
    a70a:	1c79      	adds	r1, r7, #1
    a70c:	9111      	str	r1, [sp, #68]	; 0x44
    a70e:	787a      	ldrb	r2, [r7, #1]
    a710:	2a00      	cmp	r2, #0
    a712:	f43f ace5 	beq.w	a0e0 <_strtod_l+0x1d0>
    a716:	460f      	mov	r7, r1
    a718:	e470      	b.n	9ffc <_strtod_l+0xec>
    a71a:	2200      	movs	r2, #0
    a71c:	9209      	str	r2, [sp, #36]	; 0x24
    a71e:	e7f4      	b.n	a70a <_strtod_l+0x7fa>
    a720:	f3c2 0313 	ubfx	r3, r2, #0, #20
    a724:	4610      	mov	r0, r2
    a726:	2b00      	cmp	r3, #0
    a728:	f47f af7b 	bne.w	a622 <_strtod_l+0x712>
    a72c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a730:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a738:	f100 81d3 	bmi.w	aae2 <_strtod_l+0xbd2>
    a73c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    a740:	ee20 9b09 	vmul.f64	d9, d0, d9
    a744:	eeb1 7b49 	vneg.f64	d7, d9
    a748:	e6e2      	b.n	a510 <_strtod_l+0x600>
    a74a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    a74e:	9305      	str	r3, [sp, #20]
    a750:	e6b8      	b.n	a4c4 <_strtod_l+0x5b4>
    a752:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    a756:	ee19 3a10 	vmov	r3, s18
    a75a:	2b01      	cmp	r3, #1
    a75c:	bf38      	it	cc
    a75e:	2301      	movcc	r3, #1
    a760:	ee09 3a10 	vmov	s18, r3
    a764:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    a768:	2d00      	cmp	r5, #0
    a76a:	f040 813e 	bne.w	a9ea <_strtod_l+0xada>
    a76e:	eeb1 7b49 	vneg.f64	d7, d9
    a772:	ec53 2b17 	vmov	r2, r3, d7
    a776:	e696      	b.n	a4a6 <_strtod_l+0x596>
    a778:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    a77c:	f300 80b2 	bgt.w	a8e4 <_strtod_l+0x9d4>
    a780:	2a10      	cmp	r2, #16
    a782:	ea4f 1322 	mov.w	r3, r2, asr #4
    a786:	f340 8286 	ble.w	ac96 <_strtod_l+0xd86>
    a78a:	4c61      	ldr	r4, [pc, #388]	; (a910 <_strtod_l+0xa00>)
    a78c:	ed9d 7b04 	vldr	d7, [sp, #16]
    a790:	2000      	movs	r0, #0
    a792:	4622      	mov	r2, r4
    a794:	4601      	mov	r1, r0
    a796:	f013 0f01 	tst.w	r3, #1
    a79a:	f101 0101 	add.w	r1, r1, #1
    a79e:	ea4f 0363 	mov.w	r3, r3, asr #1
    a7a2:	d004      	beq.n	a7ae <_strtod_l+0x89e>
    a7a4:	ed92 6b00 	vldr	d6, [r2]
    a7a8:	2001      	movs	r0, #1
    a7aa:	ee27 7b06 	vmul.f64	d7, d7, d6
    a7ae:	2b01      	cmp	r3, #1
    a7b0:	f102 0208 	add.w	r2, r2, #8
    a7b4:	d1ef      	bne.n	a796 <_strtod_l+0x886>
    a7b6:	b108      	cbz	r0, a7bc <_strtod_l+0x8ac>
    a7b8:	ed8d 7b04 	vstr	d7, [sp, #16]
    a7bc:	9b05      	ldr	r3, [sp, #20]
    a7be:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    a7c2:	9305      	str	r3, [sp, #20]
    a7c4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    a7c8:	ed9d 6b04 	vldr	d6, [sp, #16]
    a7cc:	ed94 7b00 	vldr	d7, [r4]
    a7d0:	4b4c      	ldr	r3, [pc, #304]	; (a904 <_strtod_l+0x9f4>)
    a7d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    a7d6:	ee17 2a90 	vmov	r2, s15
    a7da:	494e      	ldr	r1, [pc, #312]	; (a914 <_strtod_l+0xa04>)
    a7dc:	4013      	ands	r3, r2
    a7de:	428b      	cmp	r3, r1
    a7e0:	ed8d 7b04 	vstr	d7, [sp, #16]
    a7e4:	d87e      	bhi.n	a8e4 <_strtod_l+0x9d4>
    a7e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a7ea:	428b      	cmp	r3, r1
    a7ec:	f240 81d6 	bls.w	ab9c <_strtod_l+0xc8c>
    a7f0:	4c46      	ldr	r4, [pc, #280]	; (a90c <_strtod_l+0x9fc>)
    a7f2:	f04f 33ff 	mov.w	r3, #4294967295
    a7f6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a7fa:	2300      	movs	r3, #0
    a7fc:	9308      	str	r3, [sp, #32]
    a7fe:	e585      	b.n	a30c <_strtod_l+0x3fc>
    a800:	eeb4 9bce 	vcmpe.f64	d9, d14
    a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a808:	f57f ae63 	bpl.w	a4d2 <_strtod_l+0x5c2>
    a80c:	e763      	b.n	a6d6 <_strtod_l+0x7c6>
    a80e:	3216      	adds	r2, #22
    a810:	f6ff ad62 	blt.w	a2d8 <_strtod_l+0x3c8>
    a814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a816:	eba3 0b0b 	sub.w	fp, r3, fp
    a81a:	4b3f      	ldr	r3, [pc, #252]	; (a918 <_strtod_l+0xa08>)
    a81c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    a820:	ed93 7b00 	vldr	d7, [r3]
    a824:	ed9d 6b04 	vldr	d6, [sp, #16]
    a828:	ee86 8b07 	vdiv.f64	d8, d6, d7
    a82c:	e52d      	b.n	a28a <_strtod_l+0x37a>
    a82e:	f04f 0e00 	mov.w	lr, #0
    a832:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    a836:	f04f 0c01 	mov.w	ip, #1
    a83a:	e44e      	b.n	a0da <_strtod_l+0x1ca>
    a83c:	2c6e      	cmp	r4, #110	; 0x6e
    a83e:	f43f ad10 	beq.w	a262 <_strtod_l+0x352>
    a842:	e44d      	b.n	a0e0 <_strtod_l+0x1d0>
    a844:	f43f ad60 	beq.w	a308 <_strtod_l+0x3f8>
    a848:	425b      	negs	r3, r3
    a84a:	f013 010f 	ands.w	r1, r3, #15
    a84e:	d00a      	beq.n	a866 <_strtod_l+0x956>
    a850:	4a31      	ldr	r2, [pc, #196]	; (a918 <_strtod_l+0xa08>)
    a852:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a856:	ed9d 6b04 	vldr	d6, [sp, #16]
    a85a:	ed92 7b00 	vldr	d7, [r2]
    a85e:	ee86 7b07 	vdiv.f64	d7, d6, d7
    a862:	ed8d 7b04 	vstr	d7, [sp, #16]
    a866:	111b      	asrs	r3, r3, #4
    a868:	f43f ad4e 	beq.w	a308 <_strtod_l+0x3f8>
    a86c:	2b1f      	cmp	r3, #31
    a86e:	dc33      	bgt.n	a8d8 <_strtod_l+0x9c8>
    a870:	f013 0210 	ands.w	r2, r3, #16
    a874:	bf18      	it	ne
    a876:	226a      	movne	r2, #106	; 0x6a
    a878:	ed9d 7b04 	vldr	d7, [sp, #16]
    a87c:	9208      	str	r2, [sp, #32]
    a87e:	4a27      	ldr	r2, [pc, #156]	; (a91c <_strtod_l+0xa0c>)
    a880:	2100      	movs	r1, #0
    a882:	07d8      	lsls	r0, r3, #31
    a884:	d504      	bpl.n	a890 <_strtod_l+0x980>
    a886:	ed92 6b00 	vldr	d6, [r2]
    a88a:	2101      	movs	r1, #1
    a88c:	ee27 7b06 	vmul.f64	d7, d7, d6
    a890:	105b      	asrs	r3, r3, #1
    a892:	f102 0208 	add.w	r2, r2, #8
    a896:	d1f4      	bne.n	a882 <_strtod_l+0x972>
    a898:	b109      	cbz	r1, a89e <_strtod_l+0x98e>
    a89a:	ed8d 7b04 	vstr	d7, [sp, #16]
    a89e:	9b08      	ldr	r3, [sp, #32]
    a8a0:	b193      	cbz	r3, a8c8 <_strtod_l+0x9b8>
    a8a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a8a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
    a8aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	dd0a      	ble.n	a8c8 <_strtod_l+0x9b8>
    a8b2:	2b1f      	cmp	r3, #31
    a8b4:	f340 822f 	ble.w	ad16 <_strtod_l+0xe06>
    a8b8:	2000      	movs	r0, #0
    a8ba:	2b34      	cmp	r3, #52	; 0x34
    a8bc:	9004      	str	r0, [sp, #16]
    a8be:	f340 8240 	ble.w	ad42 <_strtod_l+0xe32>
    a8c2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    a8c6:	9305      	str	r3, [sp, #20]
    a8c8:	ed9d 7b04 	vldr	d7, [sp, #16]
    a8cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8d4:	f47f ad1a 	bne.w	a30c <_strtod_l+0x3fc>
    a8d8:	2322      	movs	r3, #34	; 0x22
    a8da:	ed9f 8b05 	vldr	d8, [pc, #20]	; a8f0 <_strtod_l+0x9e0>
    a8de:	f8c8 3000 	str.w	r3, [r8]
    a8e2:	e4d2      	b.n	a28a <_strtod_l+0x37a>
    a8e4:	2322      	movs	r3, #34	; 0x22
    a8e6:	ed9f 8b04 	vldr	d8, [pc, #16]	; a8f8 <_strtod_l+0x9e8>
    a8ea:	f8c8 3000 	str.w	r3, [r8]
    a8ee:	e4cc      	b.n	a28a <_strtod_l+0x37a>
	...
    a8fc:	7ff00000 	.word	0x7ff00000
    a900:	bff00000 	.word	0xbff00000
    a904:	7ff00000 	.word	0x7ff00000
    a908:	7c9fffff 	.word	0x7c9fffff
    a90c:	7fefffff 	.word	0x7fefffff
    a910:	20000280 	.word	0x20000280
    a914:	7ca00000 	.word	0x7ca00000
    a918:	200002a8 	.word	0x200002a8
    a91c:	20000370 	.word	0x20000370
    a920:	9302      	str	r3, [sp, #8]
    a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a924:	9301      	str	r3, [sp, #4]
    a926:	ab12      	add	r3, sp, #72	; 0x48
    a928:	9300      	str	r3, [sp, #0]
    a92a:	4aa7      	ldr	r2, [pc, #668]	; (abc8 <_strtod_l+0xcb8>)
    a92c:	ab13      	add	r3, sp, #76	; 0x4c
    a92e:	a911      	add	r1, sp, #68	; 0x44
    a930:	4640      	mov	r0, r8
    a932:	f001 fb0f 	bl	bf54 <__gethex>
    a936:	f010 050f 	ands.w	r5, r0, #15
    a93a:	4604      	mov	r4, r0
    a93c:	f43f aca3 	beq.w	a286 <_strtod_l+0x376>
    a940:	2d06      	cmp	r5, #6
    a942:	d174      	bne.n	aa2e <_strtod_l+0xb1e>
    a944:	9b07      	ldr	r3, [sp, #28]
    a946:	ed9f 8b9a 	vldr	d8, [pc, #616]	; abb0 <_strtod_l+0xca0>
    a94a:	3701      	adds	r7, #1
    a94c:	2b00      	cmp	r3, #0
    a94e:	f43f abce 	beq.w	a0ee <_strtod_l+0x1de>
    a952:	601f      	str	r7, [r3, #0]
    a954:	f7ff bbcb 	b.w	a0ee <_strtod_l+0x1de>
    a958:	ed9d 8b04 	vldr	d8, [sp, #16]
    a95c:	e495      	b.n	a28a <_strtod_l+0x37a>
    a95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a960:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a964:	4403      	add	r3, r0
    a966:	930b      	str	r3, [sp, #44]	; 0x2c
    a968:	2801      	cmp	r0, #1
    a96a:	f105 0301 	add.w	r3, r5, #1
    a96e:	461a      	mov	r2, r3
    a970:	d014      	beq.n	a99c <_strtod_l+0xa8c>
    a972:	4428      	add	r0, r5
    a974:	1e44      	subs	r4, r0, #1
    a976:	e003      	b.n	a980 <_strtod_l+0xa70>
    a978:	0046      	lsls	r6, r0, #1
    a97a:	429c      	cmp	r4, r3
    a97c:	d00d      	beq.n	a99a <_strtod_l+0xa8a>
    a97e:	3301      	adds	r3, #1
    a980:	462a      	mov	r2, r5
    a982:	2a08      	cmp	r2, #8
    a984:	461d      	mov	r5, r3
    a986:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    a98a:	d9f5      	bls.n	a978 <_strtod_l+0xa68>
    a98c:	2b10      	cmp	r3, #16
    a98e:	bfdc      	itt	le
    a990:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    a994:	ea4f 0949 	movle.w	r9, r9, lsl #1
    a998:	e7ef      	b.n	a97a <_strtod_l+0xa6a>
    a99a:	3202      	adds	r2, #2
    a99c:	2d08      	cmp	r5, #8
    a99e:	dc3c      	bgt.n	aa1a <_strtod_l+0xb0a>
    a9a0:	4615      	mov	r5, r2
    a9a2:	f7ff bb79 	b.w	a098 <_strtod_l+0x188>
    a9a6:	4989      	ldr	r1, [pc, #548]	; (abcc <_strtod_l+0xcbc>)
    a9a8:	2201      	movs	r2, #1
    a9aa:	4638      	mov	r0, r7
    a9ac:	f000 fd74 	bl	b498 <strncmp>
    a9b0:	2800      	cmp	r0, #0
    a9b2:	f000 8082 	beq.w	aaba <_strtod_l+0xbaa>
    a9b6:	f04f 0e00 	mov.w	lr, #0
    a9ba:	46f1      	mov	r9, lr
    a9bc:	4676      	mov	r6, lr
    a9be:	4675      	mov	r5, lr
    a9c0:	f7ff bbb5 	b.w	a12e <_strtod_l+0x21e>
    a9c4:	f644 631f 	movw	r3, #19999	; 0x4e1f
    a9c8:	459b      	cmp	fp, r3
    a9ca:	bfa8      	it	ge
    a9cc:	469b      	movge	fp, r3
    a9ce:	e42f      	b.n	a230 <_strtod_l+0x320>
    a9d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a9d4:	4618      	mov	r0, r3
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	f47f ae23 	bne.w	a622 <_strtod_l+0x712>
    a9dc:	2322      	movs	r3, #34	; 0x22
    a9de:	ed9f 8b74 	vldr	d8, [pc, #464]	; abb0 <_strtod_l+0xca0>
    a9e2:	9812      	ldr	r0, [sp, #72]	; 0x48
    a9e4:	f8c8 3000 	str.w	r3, [r8]
    a9e8:	e678      	b.n	a6dc <_strtod_l+0x7cc>
    a9ea:	eeb0 7b49 	vmov.f64	d7, d9
    a9ee:	e6c0      	b.n	a772 <_strtod_l+0x862>
    a9f0:	4977      	ldr	r1, [pc, #476]	; (abd0 <_strtod_l+0xcc0>)
    a9f2:	a811      	add	r0, sp, #68	; 0x44
    a9f4:	f001 fd78 	bl	c4e8 <__match>
    a9f8:	2800      	cmp	r0, #0
    a9fa:	f43f ab71 	beq.w	a0e0 <_strtod_l+0x1d0>
    a9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aa00:	4974      	ldr	r1, [pc, #464]	; (abd4 <_strtod_l+0xcc4>)
    aa02:	3b01      	subs	r3, #1
    aa04:	a811      	add	r0, sp, #68	; 0x44
    aa06:	9311      	str	r3, [sp, #68]	; 0x44
    aa08:	f001 fd6e 	bl	c4e8 <__match>
    aa0c:	b910      	cbnz	r0, aa14 <_strtod_l+0xb04>
    aa0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aa10:	3301      	adds	r3, #1
    aa12:	9311      	str	r3, [sp, #68]	; 0x44
    aa14:	ed9f 8b68 	vldr	d8, [pc, #416]	; abb8 <_strtod_l+0xca8>
    aa18:	e437      	b.n	a28a <_strtod_l+0x37a>
    aa1a:	2a10      	cmp	r2, #16
    aa1c:	bfdc      	itt	le
    aa1e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    aa22:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    aa26:	4615      	mov	r5, r2
    aa28:	2000      	movs	r0, #0
    aa2a:	f7ff bb3a 	b.w	a0a2 <_strtod_l+0x192>
    aa2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aa30:	b13a      	cbz	r2, aa42 <_strtod_l+0xb32>
    aa32:	2135      	movs	r1, #53	; 0x35
    aa34:	a814      	add	r0, sp, #80	; 0x50
    aa36:	f002 fb3b 	bl	d0b0 <__copybits>
    aa3a:	9912      	ldr	r1, [sp, #72]	; 0x48
    aa3c:	4640      	mov	r0, r8
    aa3e:	f001 fe83 	bl	c748 <_Bfree>
    aa42:	3d01      	subs	r5, #1
    aa44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aa46:	2d04      	cmp	r5, #4
    aa48:	f200 818f 	bhi.w	ad6a <_strtod_l+0xe5a>
    aa4c:	e8df f005 	tbb	[pc, r5]
    aa50:	1f2a2d03 	.word	0x1f2a2d03
    aa54:	03          	.byte	0x03
    aa55:	00          	.byte	0x00
    aa56:	9a14      	ldr	r2, [sp, #80]	; 0x50
    aa58:	9204      	str	r2, [sp, #16]
    aa5a:	f203 4233 	addw	r2, r3, #1075	; 0x433
    aa5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    aa60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    aa64:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    aa68:	9305      	str	r3, [sp, #20]
    aa6a:	05e5      	lsls	r5, r4, #23
    aa6c:	d502      	bpl.n	aa74 <_strtod_l+0xb64>
    aa6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    aa72:	9305      	str	r3, [sp, #20]
    aa74:	4a58      	ldr	r2, [pc, #352]	; (abd8 <_strtod_l+0xcc8>)
    aa76:	401a      	ands	r2, r3
    aa78:	ed9d 8b04 	vldr	d8, [sp, #16]
    aa7c:	2a00      	cmp	r2, #0
    aa7e:	f47f ac04 	bne.w	a28a <_strtod_l+0x37a>
    aa82:	f000 fded 	bl	b660 <__errno>
    aa86:	2322      	movs	r3, #34	; 0x22
    aa88:	6003      	str	r3, [r0, #0]
    aa8a:	f7ff bbfe 	b.w	a28a <_strtod_l+0x37a>
    aa8e:	f04f 33ff 	mov.w	r3, #4294967295
    aa92:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    aa96:	e9cd 3604 	strd	r3, r6, [sp, #16]
    aa9a:	05e3      	lsls	r3, r4, #23
    aa9c:	f57f af5c 	bpl.w	a958 <_strtod_l+0xa48>
    aaa0:	9b05      	ldr	r3, [sp, #20]
    aaa2:	e7e4      	b.n	aa6e <_strtod_l+0xb5e>
    aaa4:	4b4c      	ldr	r3, [pc, #304]	; (abd8 <_strtod_l+0xcc8>)
    aaa6:	9305      	str	r3, [sp, #20]
    aaa8:	e7f7      	b.n	aa9a <_strtod_l+0xb8a>
    aaaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aaac:	9304      	str	r3, [sp, #16]
    aaae:	9b15      	ldr	r3, [sp, #84]	; 0x54
    aab0:	9305      	str	r3, [sp, #20]
    aab2:	e7da      	b.n	aa6a <_strtod_l+0xb5a>
    aab4:	2000      	movs	r0, #0
    aab6:	f7ff bae1 	b.w	a07c <_strtod_l+0x16c>
    aaba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aabc:	461a      	mov	r2, r3
    aabe:	3301      	adds	r3, #1
    aac0:	9311      	str	r3, [sp, #68]	; 0x44
    aac2:	7854      	ldrb	r4, [r2, #1]
    aac4:	4606      	mov	r6, r0
    aac6:	4681      	mov	r9, r0
    aac8:	f7ff bacd 	b.w	a066 <_strtod_l+0x156>
    aacc:	4b43      	ldr	r3, [pc, #268]	; (abdc <_strtod_l+0xccc>)
    aace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    aad2:	ed93 8b00 	vldr	d8, [r3]
    aad6:	ed9d 7b04 	vldr	d7, [sp, #16]
    aada:	ee28 8b07 	vmul.f64	d8, d8, d7
    aade:	f7ff bbd4 	b.w	a28a <_strtod_l+0x37a>
    aae2:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    aae6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    aaea:	e511      	b.n	a510 <_strtod_l+0x600>
    aaec:	46ae      	mov	lr, r5
    aaee:	900b      	str	r0, [sp, #44]	; 0x2c
    aaf0:	f7ff badc 	b.w	a0ac <_strtod_l+0x19c>
    aaf4:	4b39      	ldr	r3, [pc, #228]	; (abdc <_strtod_l+0xccc>)
    aaf6:	f1c5 050f 	rsb	r5, r5, #15
    aafa:	1b4a      	subs	r2, r1, r5
    aafc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    ab00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ab04:	ed95 8b00 	vldr	d8, [r5]
    ab08:	ed93 7b00 	vldr	d7, [r3]
    ab0c:	ed9d 6b04 	vldr	d6, [sp, #16]
    ab10:	ee28 8b06 	vmul.f64	d8, d8, d6
    ab14:	ee28 8b07 	vmul.f64	d8, d8, d7
    ab18:	f7ff bbb7 	b.w	a28a <_strtod_l+0x37a>
    ab1c:	2d00      	cmp	r5, #0
    ab1e:	f000 8095 	beq.w	ac4c <_strtod_l+0xd3c>
    ab22:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    ab26:	4b2e      	ldr	r3, [pc, #184]	; (abe0 <_strtod_l+0xcd0>)
    ab28:	f3cc 0113 	ubfx	r1, ip, #0, #20
    ab2c:	4299      	cmp	r1, r3
    ab2e:	4662      	mov	r2, ip
    ab30:	f000 80d2 	beq.w	acd8 <_strtod_l+0xdc8>
    ab34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab36:	2b00      	cmp	r3, #0
    ab38:	f000 80a5 	beq.w	ac86 <_strtod_l+0xd76>
    ab3c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ab40:	4213      	tst	r3, r2
    ab42:	4617      	mov	r7, r2
    ab44:	d01a      	beq.n	ab7c <_strtod_l+0xc6c>
    ab46:	eeb0 0b48 	vmov.f64	d0, d8
    ab4a:	2d00      	cmp	r5, #0
    ab4c:	f000 80a6 	beq.w	ac9c <_strtod_l+0xd8c>
    ab50:	f002 f97e 	bl	ce50 <__ulp>
    ab54:	9b08      	ldr	r3, [sp, #32]
    ab56:	b17b      	cbz	r3, ab78 <_strtod_l+0xc68>
    ab58:	f3c7 530a 	ubfx	r3, r7, #20, #11
    ab5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    ab60:	2b00      	cmp	r3, #0
    ab62:	dd09      	ble.n	ab78 <_strtod_l+0xc68>
    ab64:	051b      	lsls	r3, r3, #20
    ab66:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    ab6a:	2000      	movs	r0, #0
    ab6c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    ab70:	ec41 0b17 	vmov	d7, r0, r1
    ab74:	ee20 0b07 	vmul.f64	d0, d0, d7
    ab78:	ee38 8b00 	vadd.f64	d8, d8, d0
    ab7c:	9b08      	ldr	r3, [sp, #32]
    ab7e:	b15b      	cbz	r3, ab98 <_strtod_l+0xc88>
    ab80:	ed9f 7b0f 	vldr	d7, [pc, #60]	; abc0 <_strtod_l+0xcb0>
    ab84:	4b14      	ldr	r3, [pc, #80]	; (abd8 <_strtod_l+0xcc8>)
    ab86:	ee28 8b07 	vmul.f64	d8, d8, d7
    ab8a:	ee18 2a90 	vmov	r2, s17
    ab8e:	4013      	ands	r3, r2
    ab90:	b913      	cbnz	r3, ab98 <_strtod_l+0xc88>
    ab92:	2322      	movs	r3, #34	; 0x22
    ab94:	f8c8 3000 	str.w	r3, [r8]
    ab98:	9812      	ldr	r0, [sp, #72]	; 0x48
    ab9a:	e59f      	b.n	a6dc <_strtod_l+0x7cc>
    ab9c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    aba0:	9305      	str	r3, [sp, #20]
    aba2:	2300      	movs	r3, #0
    aba4:	9308      	str	r3, [sp, #32]
    aba6:	f7ff bbb1 	b.w	a30c <_strtod_l+0x3fc>
    abaa:	bf00      	nop
    abac:	f3af 8000 	nop.w
	...
    abbc:	7ff00000 	.word	0x7ff00000
    abc0:	00000000 	.word	0x00000000
    abc4:	39500000 	.word	0x39500000
    abc8:	20007ba4 	.word	0x20007ba4
    abcc:	20007eb8 	.word	0x20007eb8
    abd0:	20000dac 	.word	0x20000dac
    abd4:	20000db0 	.word	0x20000db0
    abd8:	7ff00000 	.word	0x7ff00000
    abdc:	200002a8 	.word	0x200002a8
    abe0:	000fffff 	.word	0x000fffff
    abe4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    abe8:	430d      	orrs	r5, r1
    abea:	d1c7      	bne.n	ab7c <_strtod_l+0xc6c>
    abec:	f3c2 0313 	ubfx	r3, r2, #0, #20
    abf0:	4617      	mov	r7, r2
    abf2:	2b00      	cmp	r3, #0
    abf4:	d1c2      	bne.n	ab7c <_strtod_l+0xc6c>
    abf6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    abfa:	0d1b      	lsrs	r3, r3, #20
    abfc:	051b      	lsls	r3, r3, #20
    abfe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    ac02:	d9bb      	bls.n	ab7c <_strtod_l+0xc6c>
    ac04:	f8da 3014 	ldr.w	r3, [sl, #20]
    ac08:	b91b      	cbnz	r3, ac12 <_strtod_l+0xd02>
    ac0a:	f8da 3010 	ldr.w	r3, [sl, #16]
    ac0e:	2b01      	cmp	r3, #1
    ac10:	ddb4      	ble.n	ab7c <_strtod_l+0xc6c>
    ac12:	4651      	mov	r1, sl
    ac14:	2201      	movs	r2, #1
    ac16:	4640      	mov	r0, r8
    ac18:	f001 ffd6 	bl	cbc8 <__lshift>
    ac1c:	4621      	mov	r1, r4
    ac1e:	4682      	mov	sl, r0
    ac20:	f002 f84a 	bl	ccb8 <__mcmp>
    ac24:	2800      	cmp	r0, #0
    ac26:	dda9      	ble.n	ab7c <_strtod_l+0xc6c>
    ac28:	9b08      	ldr	r3, [sp, #32]
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	d17e      	bne.n	ad2c <_strtod_l+0xe1c>
    ac2e:	4b50      	ldr	r3, [pc, #320]	; (ad70 <_strtod_l+0xe60>)
    ac30:	403b      	ands	r3, r7
    ac32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    ac36:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    ac3a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    ac3e:	9305      	str	r3, [sp, #20]
    ac40:	f04f 33ff 	mov.w	r3, #4294967295
    ac44:	9304      	str	r3, [sp, #16]
    ac46:	ed9d 8b04 	vldr	d8, [sp, #16]
    ac4a:	e797      	b.n	ab7c <_strtod_l+0xc6c>
    ac4c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ac50:	f3c2 0313 	ubfx	r3, r2, #0, #20
    ac54:	430b      	orrs	r3, r1
    ac56:	4617      	mov	r7, r2
    ac58:	f47f af6c 	bne.w	ab34 <_strtod_l+0xc24>
    ac5c:	e7e4      	b.n	ac28 <_strtod_l+0xd18>
    ac5e:	4945      	ldr	r1, [pc, #276]	; (ad74 <_strtod_l+0xe64>)
    ac60:	a811      	add	r0, sp, #68	; 0x44
    ac62:	aa14      	add	r2, sp, #80	; 0x50
    ac64:	f001 fc5c 	bl	c520 <__hexnan>
    ac68:	2805      	cmp	r0, #5
    ac6a:	f47f ab06 	bne.w	a27a <_strtod_l+0x36a>
    ac6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac70:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    ac74:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    ac78:	9305      	str	r3, [sp, #20]
    ac7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac7c:	9304      	str	r3, [sp, #16]
    ac7e:	ed9d 8b04 	vldr	d8, [sp, #16]
    ac82:	f7ff bb02 	b.w	a28a <_strtod_l+0x37a>
    ac86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ac8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac8c:	4203      	tst	r3, r0
    ac8e:	f43f af75 	beq.w	ab7c <_strtod_l+0xc6c>
    ac92:	460f      	mov	r7, r1
    ac94:	e757      	b.n	ab46 <_strtod_l+0xc36>
    ac96:	4c38      	ldr	r4, [pc, #224]	; (ad78 <_strtod_l+0xe68>)
    ac98:	2100      	movs	r1, #0
    ac9a:	e58f      	b.n	a7bc <_strtod_l+0x8ac>
    ac9c:	f002 f8d8 	bl	ce50 <__ulp>
    aca0:	9b08      	ldr	r3, [sp, #32]
    aca2:	2b00      	cmp	r3, #0
    aca4:	d055      	beq.n	ad52 <_strtod_l+0xe42>
    aca6:	f3c7 530a 	ubfx	r3, r7, #20, #11
    acaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    acae:	2b00      	cmp	r3, #0
    acb0:	dd09      	ble.n	acc6 <_strtod_l+0xdb6>
    acb2:	051b      	lsls	r3, r3, #20
    acb4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    acb8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    acbc:	4628      	mov	r0, r5
    acbe:	ec41 0b17 	vmov	d7, r0, r1
    acc2:	ee20 0b07 	vmul.f64	d0, d0, d7
    acc6:	ee38 8b40 	vsub.f64	d8, d8, d0
    acca:	eeb5 8b40 	vcmp.f64	d8, #0.0
    acce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acd2:	f47f af55 	bne.w	ab80 <_strtod_l+0xc70>
    acd6:	e681      	b.n	a9dc <_strtod_l+0xacc>
    acd8:	9b08      	ldr	r3, [sp, #32]
    acda:	9904      	ldr	r1, [sp, #16]
    acdc:	b31b      	cbz	r3, ad26 <_strtod_l+0xe16>
    acde:	4b24      	ldr	r3, [pc, #144]	; (ad70 <_strtod_l+0xe60>)
    ace0:	4013      	ands	r3, r2
    ace2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    ace6:	d81e      	bhi.n	ad26 <_strtod_l+0xe16>
    ace8:	0d1b      	lsrs	r3, r3, #20
    acea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    acee:	f04f 30ff 	mov.w	r0, #4294967295
    acf2:	fa00 f303 	lsl.w	r3, r0, r3
    acf6:	4299      	cmp	r1, r3
    acf8:	f47f af1c 	bne.w	ab34 <_strtod_l+0xc24>
    acfc:	4b1f      	ldr	r3, [pc, #124]	; (ad7c <_strtod_l+0xe6c>)
    acfe:	429a      	cmp	r2, r3
    ad00:	d030      	beq.n	ad64 <_strtod_l+0xe54>
    ad02:	4b1b      	ldr	r3, [pc, #108]	; (ad70 <_strtod_l+0xe60>)
    ad04:	4013      	ands	r3, r2
    ad06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    ad0a:	9305      	str	r3, [sp, #20]
    ad0c:	2300      	movs	r3, #0
    ad0e:	9304      	str	r3, [sp, #16]
    ad10:	ed9d 8b04 	vldr	d8, [sp, #16]
    ad14:	e732      	b.n	ab7c <_strtod_l+0xc6c>
    ad16:	f04f 32ff 	mov.w	r2, #4294967295
    ad1a:	fa02 f303 	lsl.w	r3, r2, r3
    ad1e:	9a04      	ldr	r2, [sp, #16]
    ad20:	401a      	ands	r2, r3
    ad22:	9204      	str	r2, [sp, #16]
    ad24:	e5d0      	b.n	a8c8 <_strtod_l+0x9b8>
    ad26:	f04f 33ff 	mov.w	r3, #4294967295
    ad2a:	e7e4      	b.n	acf6 <_strtod_l+0xde6>
    ad2c:	4b10      	ldr	r3, [pc, #64]	; (ad70 <_strtod_l+0xe60>)
    ad2e:	403b      	ands	r3, r7
    ad30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    ad34:	f73f af7d 	bgt.w	ac32 <_strtod_l+0xd22>
    ad38:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    ad3c:	f73f af20 	bgt.w	ab80 <_strtod_l+0xc70>
    ad40:	e64c      	b.n	a9dc <_strtod_l+0xacc>
    ad42:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    ad46:	f04f 33ff 	mov.w	r3, #4294967295
    ad4a:	4093      	lsls	r3, r2
    ad4c:	400b      	ands	r3, r1
    ad4e:	9305      	str	r3, [sp, #20]
    ad50:	e5ba      	b.n	a8c8 <_strtod_l+0x9b8>
    ad52:	ee38 8b40 	vsub.f64	d8, d8, d0
    ad56:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ad5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad5e:	f47f af1b 	bne.w	ab98 <_strtod_l+0xc88>
    ad62:	e63b      	b.n	a9dc <_strtod_l+0xacc>
    ad64:	3101      	adds	r1, #1
    ad66:	d1cc      	bne.n	ad02 <_strtod_l+0xdf2>
    ad68:	e409      	b.n	a57e <_strtod_l+0x66e>
    ad6a:	2300      	movs	r3, #0
    ad6c:	e67d      	b.n	aa6a <_strtod_l+0xb5a>
    ad6e:	bf00      	nop
    ad70:	7ff00000 	.word	0x7ff00000
    ad74:	20007bb8 	.word	0x20007bb8
    ad78:	20000280 	.word	0x20000280
    ad7c:	7fefffff 	.word	0x7fefffff

0000ad80 <_strtod_r>:
    ad80:	4b01      	ldr	r3, [pc, #4]	; (ad88 <_strtod_r+0x8>)
    ad82:	f7ff b8c5 	b.w	9f10 <_strtod_l>
    ad86:	bf00      	nop
    ad88:	20008770 	.word	0x20008770

0000ad8c <_strtol_l.constprop.0>:
    ad8c:	2b01      	cmp	r3, #1
    ad8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad92:	d040      	beq.n	ae16 <_strtol_l.constprop.0+0x8a>
    ad94:	2b24      	cmp	r3, #36	; 0x24
    ad96:	4698      	mov	r8, r3
    ad98:	d83d      	bhi.n	ae16 <_strtol_l.constprop.0+0x8a>
    ad9a:	4d4c      	ldr	r5, [pc, #304]	; (aecc <_strtol_l.constprop.0+0x140>)
    ad9c:	468e      	mov	lr, r1
    ad9e:	4676      	mov	r6, lr
    ada0:	f81e bb01 	ldrb.w	fp, [lr], #1
    ada4:	f815 400b 	ldrb.w	r4, [r5, fp]
    ada8:	f014 0408 	ands.w	r4, r4, #8
    adac:	d1f7      	bne.n	ad9e <_strtol_l.constprop.0+0x12>
    adae:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    adb2:	d072      	beq.n	ae9a <_strtol_l.constprop.0+0x10e>
    adb4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    adb8:	bf08      	it	eq
    adba:	f89e b000 	ldrbeq.w	fp, [lr]
    adbe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    adc2:	bf08      	it	eq
    adc4:	f106 0e02 	addeq.w	lr, r6, #2
    adc8:	2b00      	cmp	r3, #0
    adca:	d042      	beq.n	ae52 <_strtol_l.constprop.0+0xc6>
    adcc:	2b10      	cmp	r3, #16
    adce:	d057      	beq.n	ae80 <_strtol_l.constprop.0+0xf4>
    add0:	fbb9 f7f8 	udiv	r7, r9, r8
    add4:	2500      	movs	r5, #0
    add6:	462e      	mov	r6, r5
    add8:	fb08 9a17 	mls	sl, r8, r7, r9
    addc:	e005      	b.n	adea <_strtol_l.constprop.0+0x5e>
    adde:	d033      	beq.n	ae48 <_strtol_l.constprop.0+0xbc>
    ade0:	fb08 c606 	mla	r6, r8, r6, ip
    ade4:	2501      	movs	r5, #1
    ade6:	f81e bb01 	ldrb.w	fp, [lr], #1
    adea:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    adee:	f1bc 0f09 	cmp.w	ip, #9
    adf2:	d906      	bls.n	ae02 <_strtol_l.constprop.0+0x76>
    adf4:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    adf8:	f1bc 0f19 	cmp.w	ip, #25
    adfc:	d812      	bhi.n	ae24 <_strtol_l.constprop.0+0x98>
    adfe:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    ae02:	4563      	cmp	r3, ip
    ae04:	dd17      	ble.n	ae36 <_strtol_l.constprop.0+0xaa>
    ae06:	f1b5 3fff 	cmp.w	r5, #4294967295
    ae0a:	d0ec      	beq.n	ade6 <_strtol_l.constprop.0+0x5a>
    ae0c:	42b7      	cmp	r7, r6
    ae0e:	d2e6      	bcs.n	adde <_strtol_l.constprop.0+0x52>
    ae10:	f04f 35ff 	mov.w	r5, #4294967295
    ae14:	e7e7      	b.n	ade6 <_strtol_l.constprop.0+0x5a>
    ae16:	f000 fc23 	bl	b660 <__errno>
    ae1a:	2316      	movs	r3, #22
    ae1c:	6003      	str	r3, [r0, #0]
    ae1e:	2000      	movs	r0, #0
    ae20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae24:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    ae28:	f1bc 0f19 	cmp.w	ip, #25
    ae2c:	d803      	bhi.n	ae36 <_strtol_l.constprop.0+0xaa>
    ae2e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    ae32:	4563      	cmp	r3, ip
    ae34:	dce7      	bgt.n	ae06 <_strtol_l.constprop.0+0x7a>
    ae36:	1c6b      	adds	r3, r5, #1
    ae38:	d027      	beq.n	ae8a <_strtol_l.constprop.0+0xfe>
    ae3a:	b98c      	cbnz	r4, ae60 <_strtol_l.constprop.0+0xd4>
    ae3c:	b10a      	cbz	r2, ae42 <_strtol_l.constprop.0+0xb6>
    ae3e:	bba5      	cbnz	r5, aeaa <_strtol_l.constprop.0+0x11e>
    ae40:	6011      	str	r1, [r2, #0]
    ae42:	4630      	mov	r0, r6
    ae44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae48:	45e2      	cmp	sl, ip
    ae4a:	dac9      	bge.n	ade0 <_strtol_l.constprop.0+0x54>
    ae4c:	f04f 35ff 	mov.w	r5, #4294967295
    ae50:	e7c9      	b.n	ade6 <_strtol_l.constprop.0+0x5a>
    ae52:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    ae56:	d005      	beq.n	ae64 <_strtol_l.constprop.0+0xd8>
    ae58:	f04f 080a 	mov.w	r8, #10
    ae5c:	4643      	mov	r3, r8
    ae5e:	e7b7      	b.n	add0 <_strtol_l.constprop.0+0x44>
    ae60:	4276      	negs	r6, r6
    ae62:	e7eb      	b.n	ae3c <_strtol_l.constprop.0+0xb0>
    ae64:	f89e 3000 	ldrb.w	r3, [lr]
    ae68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ae6c:	2b58      	cmp	r3, #88	; 0x58
    ae6e:	d121      	bne.n	aeb4 <_strtol_l.constprop.0+0x128>
    ae70:	f04f 0810 	mov.w	r8, #16
    ae74:	f89e b001 	ldrb.w	fp, [lr, #1]
    ae78:	4643      	mov	r3, r8
    ae7a:	f10e 0e02 	add.w	lr, lr, #2
    ae7e:	e7a7      	b.n	add0 <_strtol_l.constprop.0+0x44>
    ae80:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    ae84:	d01a      	beq.n	aebc <_strtol_l.constprop.0+0x130>
    ae86:	4698      	mov	r8, r3
    ae88:	e7a2      	b.n	add0 <_strtol_l.constprop.0+0x44>
    ae8a:	2322      	movs	r3, #34	; 0x22
    ae8c:	6003      	str	r3, [r0, #0]
    ae8e:	b172      	cbz	r2, aeae <_strtol_l.constprop.0+0x122>
    ae90:	f10e 31ff 	add.w	r1, lr, #4294967295
    ae94:	464e      	mov	r6, r9
    ae96:	6011      	str	r1, [r2, #0]
    ae98:	e7d3      	b.n	ae42 <_strtol_l.constprop.0+0xb6>
    ae9a:	f89e b000 	ldrb.w	fp, [lr]
    ae9e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    aea2:	f106 0e02 	add.w	lr, r6, #2
    aea6:	2401      	movs	r4, #1
    aea8:	e78e      	b.n	adc8 <_strtol_l.constprop.0+0x3c>
    aeaa:	46b1      	mov	r9, r6
    aeac:	e7f0      	b.n	ae90 <_strtol_l.constprop.0+0x104>
    aeae:	464e      	mov	r6, r9
    aeb0:	4630      	mov	r0, r6
    aeb2:	e7c7      	b.n	ae44 <_strtol_l.constprop.0+0xb8>
    aeb4:	f04f 0808 	mov.w	r8, #8
    aeb8:	4643      	mov	r3, r8
    aeba:	e789      	b.n	add0 <_strtol_l.constprop.0+0x44>
    aebc:	f89e 5000 	ldrb.w	r5, [lr]
    aec0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    aec4:	2d58      	cmp	r5, #88	; 0x58
    aec6:	d0d3      	beq.n	ae70 <_strtol_l.constprop.0+0xe4>
    aec8:	4698      	mov	r8, r3
    aeca:	e781      	b.n	add0 <_strtol_l.constprop.0+0x44>
    aecc:	20000c29 	.word	0x20000c29

0000aed0 <_strtol_r>:
    aed0:	f7ff bf5c 	b.w	ad8c <_strtol_l.constprop.0>

0000aed4 <__cxa_atexit>:
    aed4:	4613      	mov	r3, r2
    aed6:	460a      	mov	r2, r1
    aed8:	4601      	mov	r1, r0
    aeda:	2002      	movs	r0, #2
    aedc:	f000 be4e 	b.w	bb7c <__register_exitproc>

0000aee0 <stdio_exit_handler>:
    aee0:	4a02      	ldr	r2, [pc, #8]	; (aeec <stdio_exit_handler+0xc>)
    aee2:	4903      	ldr	r1, [pc, #12]	; (aef0 <stdio_exit_handler+0x10>)
    aee4:	4803      	ldr	r0, [pc, #12]	; (aef4 <stdio_exit_handler+0x14>)
    aee6:	f000 b8bb 	b.w	b060 <_fwalk_sglue>
    aeea:	bf00      	nop
    aeec:	20008cec 	.word	0x20008cec
    aef0:	00010525 	.word	0x00010525
    aef4:	20008628 	.word	0x20008628

0000aef8 <cleanup_stdio>:
    aef8:	4b0c      	ldr	r3, [pc, #48]	; (af2c <cleanup_stdio+0x34>)
    aefa:	6841      	ldr	r1, [r0, #4]
    aefc:	4299      	cmp	r1, r3
    aefe:	b510      	push	{r4, lr}
    af00:	4604      	mov	r4, r0
    af02:	d001      	beq.n	af08 <cleanup_stdio+0x10>
    af04:	f005 fb0e 	bl	10524 <_fclose_r>
    af08:	68a1      	ldr	r1, [r4, #8]
    af0a:	4b09      	ldr	r3, [pc, #36]	; (af30 <cleanup_stdio+0x38>)
    af0c:	4299      	cmp	r1, r3
    af0e:	d002      	beq.n	af16 <cleanup_stdio+0x1e>
    af10:	4620      	mov	r0, r4
    af12:	f005 fb07 	bl	10524 <_fclose_r>
    af16:	68e1      	ldr	r1, [r4, #12]
    af18:	4b06      	ldr	r3, [pc, #24]	; (af34 <cleanup_stdio+0x3c>)
    af1a:	4299      	cmp	r1, r3
    af1c:	d004      	beq.n	af28 <cleanup_stdio+0x30>
    af1e:	4620      	mov	r0, r4
    af20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af24:	f005 bafe 	b.w	10524 <_fclose_r>
    af28:	bd10      	pop	{r4, pc}
    af2a:	bf00      	nop
    af2c:	2001e444 	.word	0x2001e444
    af30:	2001e4ac 	.word	0x2001e4ac
    af34:	2001e514 	.word	0x2001e514

0000af38 <global_stdio_init.part.0>:
    af38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    af3c:	4c2a      	ldr	r4, [pc, #168]	; (afe8 <global_stdio_init.part.0+0xb0>)
    af3e:	4b2b      	ldr	r3, [pc, #172]	; (afec <global_stdio_init.part.0+0xb4>)
    af40:	482b      	ldr	r0, [pc, #172]	; (aff0 <global_stdio_init.part.0+0xb8>)
    af42:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b004 <global_stdio_init.part.0+0xcc>
    af46:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b008 <global_stdio_init.part.0+0xd0>
    af4a:	4f2a      	ldr	r7, [pc, #168]	; (aff4 <global_stdio_init.part.0+0xbc>)
    af4c:	6018      	str	r0, [r3, #0]
    af4e:	2500      	movs	r5, #0
    af50:	2304      	movs	r3, #4
    af52:	2208      	movs	r2, #8
    af54:	4629      	mov	r1, r5
    af56:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    af5a:	4e27      	ldr	r6, [pc, #156]	; (aff8 <global_stdio_init.part.0+0xc0>)
    af5c:	6665      	str	r5, [r4, #100]	; 0x64
    af5e:	e9c4 5302 	strd	r5, r3, [r4, #8]
    af62:	e9c4 5500 	strd	r5, r5, [r4]
    af66:	e9c4 5504 	strd	r5, r5, [r4, #16]
    af6a:	61a5      	str	r5, [r4, #24]
    af6c:	f000 fa42 	bl	b3f4 <memset>
    af70:	4b22      	ldr	r3, [pc, #136]	; (affc <global_stdio_init.part.0+0xc4>)
    af72:	6763      	str	r3, [r4, #116]	; 0x74
    af74:	2208      	movs	r2, #8
    af76:	4629      	mov	r1, r5
    af78:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    af7c:	e9c4 4907 	strd	r4, r9, [r4, #28]
    af80:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    af84:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    af88:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    af8c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    af90:	6725      	str	r5, [r4, #112]	; 0x70
    af92:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    af96:	62e6      	str	r6, [r4, #44]	; 0x2c
    af98:	f000 fa2c 	bl	b3f4 <memset>
    af9c:	4b18      	ldr	r3, [pc, #96]	; (b000 <global_stdio_init.part.0+0xc8>)
    af9e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    afa2:	4629      	mov	r1, r5
    afa4:	f104 0368 	add.w	r3, r4, #104	; 0x68
    afa8:	2208      	movs	r2, #8
    afaa:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    afae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    afb2:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    afb6:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    afba:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    afbe:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    afc2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    afc6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    afca:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    afce:	f000 fa11 	bl	b3f4 <memset>
    afd2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    afd6:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    afda:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    afde:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    afe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    afe6:	bf00      	nop
    afe8:	2001e444 	.word	0x2001e444
    afec:	2001e57c 	.word	0x2001e57c
    aff0:	0000aee1 	.word	0x0000aee1
    aff4:	0000b1a9 	.word	0x0000b1a9
    aff8:	0000b1c9 	.word	0x0000b1c9
    affc:	00010009 	.word	0x00010009
    b000:	00020012 	.word	0x00020012
    b004:	0000b141 	.word	0x0000b141
    b008:	0000b169 	.word	0x0000b169

0000b00c <__sinit>:
    b00c:	b510      	push	{r4, lr}
    b00e:	4604      	mov	r4, r0
    b010:	480a      	ldr	r0, [pc, #40]	; (b03c <__sinit+0x30>)
    b012:	f000 fb53 	bl	b6bc <__retarget_lock_acquire_recursive>
    b016:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b018:	b923      	cbnz	r3, b024 <__sinit+0x18>
    b01a:	4b09      	ldr	r3, [pc, #36]	; (b040 <__sinit+0x34>)
    b01c:	4a09      	ldr	r2, [pc, #36]	; (b044 <__sinit+0x38>)
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	6362      	str	r2, [r4, #52]	; 0x34
    b022:	b123      	cbz	r3, b02e <__sinit+0x22>
    b024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b028:	4804      	ldr	r0, [pc, #16]	; (b03c <__sinit+0x30>)
    b02a:	f000 bb49 	b.w	b6c0 <__retarget_lock_release_recursive>
    b02e:	f7ff ff83 	bl	af38 <global_stdio_init.part.0>
    b032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b036:	4801      	ldr	r0, [pc, #4]	; (b03c <__sinit+0x30>)
    b038:	f000 bb42 	b.w	b6c0 <__retarget_lock_release_recursive>
    b03c:	2001e40c 	.word	0x2001e40c
    b040:	2001e57c 	.word	0x2001e57c
    b044:	0000aef9 	.word	0x0000aef9

0000b048 <__sfp_lock_acquire>:
    b048:	4801      	ldr	r0, [pc, #4]	; (b050 <__sfp_lock_acquire+0x8>)
    b04a:	f000 bb37 	b.w	b6bc <__retarget_lock_acquire_recursive>
    b04e:	bf00      	nop
    b050:	2001e40c 	.word	0x2001e40c

0000b054 <__sfp_lock_release>:
    b054:	4801      	ldr	r0, [pc, #4]	; (b05c <__sfp_lock_release+0x8>)
    b056:	f000 bb33 	b.w	b6c0 <__retarget_lock_release_recursive>
    b05a:	bf00      	nop
    b05c:	2001e40c 	.word	0x2001e40c

0000b060 <_fwalk_sglue>:
    b060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b064:	4680      	mov	r8, r0
    b066:	460f      	mov	r7, r1
    b068:	4616      	mov	r6, r2
    b06a:	f04f 0900 	mov.w	r9, #0
    b06e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b072:	3d01      	subs	r5, #1
    b074:	d411      	bmi.n	b09a <_fwalk_sglue+0x3a>
    b076:	89a3      	ldrh	r3, [r4, #12]
    b078:	2b01      	cmp	r3, #1
    b07a:	f105 35ff 	add.w	r5, r5, #4294967295
    b07e:	d908      	bls.n	b092 <_fwalk_sglue+0x32>
    b080:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b084:	3301      	adds	r3, #1
    b086:	4621      	mov	r1, r4
    b088:	d003      	beq.n	b092 <_fwalk_sglue+0x32>
    b08a:	4640      	mov	r0, r8
    b08c:	47b8      	blx	r7
    b08e:	ea49 0900 	orr.w	r9, r9, r0
    b092:	1c6b      	adds	r3, r5, #1
    b094:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b098:	d1ed      	bne.n	b076 <_fwalk_sglue+0x16>
    b09a:	6836      	ldr	r6, [r6, #0]
    b09c:	2e00      	cmp	r6, #0
    b09e:	d1e6      	bne.n	b06e <_fwalk_sglue+0xe>
    b0a0:	4648      	mov	r0, r9
    b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b0a6:	bf00      	nop

0000b0a8 <sprintf>:
    b0a8:	b40e      	push	{r1, r2, r3}
    b0aa:	b510      	push	{r4, lr}
    b0ac:	b09d      	sub	sp, #116	; 0x74
    b0ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b0b2:	ab1f      	add	r3, sp, #124	; 0x7c
    b0b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b0b8:	9104      	str	r1, [sp, #16]
    b0ba:	4909      	ldr	r1, [pc, #36]	; (b0e0 <sprintf+0x38>)
    b0bc:	f853 2b04 	ldr.w	r2, [r3], #4
    b0c0:	9002      	str	r0, [sp, #8]
    b0c2:	4c08      	ldr	r4, [pc, #32]	; (b0e4 <sprintf+0x3c>)
    b0c4:	6808      	ldr	r0, [r1, #0]
    b0c6:	9301      	str	r3, [sp, #4]
    b0c8:	a902      	add	r1, sp, #8
    b0ca:	9405      	str	r4, [sp, #20]
    b0cc:	f002 f860 	bl	d190 <_svfprintf_r>
    b0d0:	9b02      	ldr	r3, [sp, #8]
    b0d2:	2200      	movs	r2, #0
    b0d4:	701a      	strb	r2, [r3, #0]
    b0d6:	b01d      	add	sp, #116	; 0x74
    b0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0dc:	b003      	add	sp, #12
    b0de:	4770      	bx	lr
    b0e0:	20008cf8 	.word	0x20008cf8
    b0e4:	ffff0208 	.word	0xffff0208

0000b0e8 <sscanf>:
    b0e8:	b40e      	push	{r1, r2, r3}
    b0ea:	b510      	push	{r4, lr}
    b0ec:	b09f      	sub	sp, #124	; 0x7c
    b0ee:	ac21      	add	r4, sp, #132	; 0x84
    b0f0:	f44f 7101 	mov.w	r1, #516	; 0x204
    b0f4:	f854 2b04 	ldr.w	r2, [r4], #4
    b0f8:	9201      	str	r2, [sp, #4]
    b0fa:	f8ad 101c 	strh.w	r1, [sp, #28]
    b0fe:	9004      	str	r0, [sp, #16]
    b100:	9008      	str	r0, [sp, #32]
    b102:	f000 fcbd 	bl	ba80 <strlen>
    b106:	9005      	str	r0, [sp, #20]
    b108:	9009      	str	r0, [sp, #36]	; 0x24
    b10a:	480b      	ldr	r0, [pc, #44]	; (b138 <sscanf+0x50>)
    b10c:	490b      	ldr	r1, [pc, #44]	; (b13c <sscanf+0x54>)
    b10e:	910c      	str	r1, [sp, #48]	; 0x30
    b110:	2300      	movs	r3, #0
    b112:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b116:	9310      	str	r3, [sp, #64]	; 0x40
    b118:	9315      	str	r3, [sp, #84]	; 0x54
    b11a:	9a01      	ldr	r2, [sp, #4]
    b11c:	6800      	ldr	r0, [r0, #0]
    b11e:	f8ad c01e 	strh.w	ip, [sp, #30]
    b122:	4623      	mov	r3, r4
    b124:	a904      	add	r1, sp, #16
    b126:	9403      	str	r4, [sp, #12]
    b128:	f003 fdd4 	bl	ecd4 <__ssvfscanf_r>
    b12c:	b01f      	add	sp, #124	; 0x7c
    b12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b132:	b003      	add	sp, #12
    b134:	4770      	bx	lr
    b136:	bf00      	nop
    b138:	20008cf8 	.word	0x20008cf8
    b13c:	0000b165 	.word	0x0000b165

0000b140 <__sread>:
    b140:	b510      	push	{r4, lr}
    b142:	460c      	mov	r4, r1
    b144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b148:	f000 fa4c 	bl	b5e4 <_read_r>
    b14c:	2800      	cmp	r0, #0
    b14e:	db03      	blt.n	b158 <__sread+0x18>
    b150:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b152:	4403      	add	r3, r0
    b154:	6523      	str	r3, [r4, #80]	; 0x50
    b156:	bd10      	pop	{r4, pc}
    b158:	89a3      	ldrh	r3, [r4, #12]
    b15a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b15e:	81a3      	strh	r3, [r4, #12]
    b160:	bd10      	pop	{r4, pc}
    b162:	bf00      	nop

0000b164 <__seofread>:
    b164:	2000      	movs	r0, #0
    b166:	4770      	bx	lr

0000b168 <__swrite>:
    b168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b16c:	460c      	mov	r4, r1
    b16e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b172:	461f      	mov	r7, r3
    b174:	05cb      	lsls	r3, r1, #23
    b176:	4605      	mov	r5, r0
    b178:	4616      	mov	r6, r2
    b17a:	d40b      	bmi.n	b194 <__swrite+0x2c>
    b17c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b180:	81a1      	strh	r1, [r4, #12]
    b182:	463b      	mov	r3, r7
    b184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b188:	4632      	mov	r2, r6
    b18a:	4628      	mov	r0, r5
    b18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b190:	f000 ba50 	b.w	b634 <_write_r>
    b194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b198:	2302      	movs	r3, #2
    b19a:	2200      	movs	r2, #0
    b19c:	f000 fa0c 	bl	b5b8 <_lseek_r>
    b1a0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b1a4:	e7ea      	b.n	b17c <__swrite+0x14>
    b1a6:	bf00      	nop

0000b1a8 <__sseek>:
    b1a8:	b510      	push	{r4, lr}
    b1aa:	460c      	mov	r4, r1
    b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b1b0:	f000 fa02 	bl	b5b8 <_lseek_r>
    b1b4:	89a3      	ldrh	r3, [r4, #12]
    b1b6:	1c42      	adds	r2, r0, #1
    b1b8:	bf0e      	itee	eq
    b1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b1c2:	6520      	strne	r0, [r4, #80]	; 0x50
    b1c4:	81a3      	strh	r3, [r4, #12]
    b1c6:	bd10      	pop	{r4, pc}

0000b1c8 <__sclose>:
    b1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b1cc:	f000 b9e2 	b.w	b594 <_close_r>

0000b1d0 <_vdprintf_r>:
    b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1d2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b1d6:	af04      	add	r7, sp, #16
    b1d8:	9300      	str	r3, [sp, #0]
    b1da:	4613      	mov	r3, r2
    b1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    b1e0:	460e      	mov	r6, r1
    b1e2:	9203      	str	r2, [sp, #12]
    b1e4:	4639      	mov	r1, r7
    b1e6:	aa03      	add	r2, sp, #12
    b1e8:	4605      	mov	r5, r0
    b1ea:	f000 f825 	bl	b238 <_vasnprintf_r>
    b1ee:	b188      	cbz	r0, b214 <_vdprintf_r+0x44>
    b1f0:	4604      	mov	r4, r0
    b1f2:	4602      	mov	r2, r0
    b1f4:	9b03      	ldr	r3, [sp, #12]
    b1f6:	4631      	mov	r1, r6
    b1f8:	4628      	mov	r0, r5
    b1fa:	f000 fa1b 	bl	b634 <_write_r>
    b1fe:	42bc      	cmp	r4, r7
    b200:	9003      	str	r0, [sp, #12]
    b202:	d004      	beq.n	b20e <_vdprintf_r+0x3e>
    b204:	4628      	mov	r0, r5
    b206:	4621      	mov	r1, r4
    b208:	f000 fd4c 	bl	bca4 <_free_r>
    b20c:	9803      	ldr	r0, [sp, #12]
    b20e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b214:	f04f 30ff 	mov.w	r0, #4294967295
    b218:	e7f9      	b.n	b20e <_vdprintf_r+0x3e>
    b21a:	bf00      	nop

0000b21c <vdprintf>:
    b21c:	b410      	push	{r4}
    b21e:	4c05      	ldr	r4, [pc, #20]	; (b234 <vdprintf+0x18>)
    b220:	4684      	mov	ip, r0
    b222:	4613      	mov	r3, r2
    b224:	6820      	ldr	r0, [r4, #0]
    b226:	f85d 4b04 	ldr.w	r4, [sp], #4
    b22a:	460a      	mov	r2, r1
    b22c:	4661      	mov	r1, ip
    b22e:	f7ff bfcf 	b.w	b1d0 <_vdprintf_r>
    b232:	bf00      	nop
    b234:	20008cf8 	.word	0x20008cf8

0000b238 <_vasnprintf_r>:
    b238:	b530      	push	{r4, r5, lr}
    b23a:	6814      	ldr	r4, [r2, #0]
    b23c:	4615      	mov	r5, r2
    b23e:	b09b      	sub	sp, #108	; 0x6c
    b240:	461a      	mov	r2, r3
    b242:	b109      	cbz	r1, b248 <_vasnprintf_r+0x10>
    b244:	2c00      	cmp	r4, #0
    b246:	d119      	bne.n	b27c <_vasnprintf_r+0x44>
    b248:	2100      	movs	r1, #0
    b24a:	f44f 7322 	mov.w	r3, #648	; 0x288
    b24e:	f8ad 300c 	strh.w	r3, [sp, #12]
    b252:	9100      	str	r1, [sp, #0]
    b254:	9104      	str	r1, [sp, #16]
    b256:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b25a:	9102      	str	r1, [sp, #8]
    b25c:	9105      	str	r1, [sp, #20]
    b25e:	f8ad 300e 	strh.w	r3, [sp, #14]
    b262:	4669      	mov	r1, sp
    b264:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b266:	f001 ff93 	bl	d190 <_svfprintf_r>
    b26a:	2800      	cmp	r0, #0
    b26c:	db13      	blt.n	b296 <_vasnprintf_r+0x5e>
    b26e:	9b00      	ldr	r3, [sp, #0]
    b270:	6028      	str	r0, [r5, #0]
    b272:	2200      	movs	r2, #0
    b274:	701a      	strb	r2, [r3, #0]
    b276:	9804      	ldr	r0, [sp, #16]
    b278:	b01b      	add	sp, #108	; 0x6c
    b27a:	bd30      	pop	{r4, r5, pc}
    b27c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b280:	9100      	str	r1, [sp, #0]
    b282:	9104      	str	r1, [sp, #16]
    b284:	f8ad 300c 	strh.w	r3, [sp, #12]
    b288:	4621      	mov	r1, r4
    b28a:	dae4      	bge.n	b256 <_vasnprintf_r+0x1e>
    b28c:	238b      	movs	r3, #139	; 0x8b
    b28e:	6003      	str	r3, [r0, #0]
    b290:	2000      	movs	r0, #0
    b292:	b01b      	add	sp, #108	; 0x6c
    b294:	bd30      	pop	{r4, r5, pc}
    b296:	2000      	movs	r0, #0
    b298:	e7ee      	b.n	b278 <_vasnprintf_r+0x40>
    b29a:	bf00      	nop

0000b29c <memcmp>:
    b29c:	2a03      	cmp	r2, #3
    b29e:	b570      	push	{r4, r5, r6, lr}
    b2a0:	d914      	bls.n	b2cc <memcmp+0x30>
    b2a2:	ea40 0301 	orr.w	r3, r0, r1
    b2a6:	079b      	lsls	r3, r3, #30
    b2a8:	d122      	bne.n	b2f0 <memcmp+0x54>
    b2aa:	4604      	mov	r4, r0
    b2ac:	460b      	mov	r3, r1
    b2ae:	4619      	mov	r1, r3
    b2b0:	4620      	mov	r0, r4
    b2b2:	680e      	ldr	r6, [r1, #0]
    b2b4:	6805      	ldr	r5, [r0, #0]
    b2b6:	42b5      	cmp	r5, r6
    b2b8:	f104 0404 	add.w	r4, r4, #4
    b2bc:	f103 0304 	add.w	r3, r3, #4
    b2c0:	d116      	bne.n	b2f0 <memcmp+0x54>
    b2c2:	3a04      	subs	r2, #4
    b2c4:	2a03      	cmp	r2, #3
    b2c6:	4620      	mov	r0, r4
    b2c8:	4619      	mov	r1, r3
    b2ca:	d8f0      	bhi.n	b2ae <memcmp+0x12>
    b2cc:	1e54      	subs	r4, r2, #1
    b2ce:	b19a      	cbz	r2, b2f8 <memcmp+0x5c>
    b2d0:	1e42      	subs	r2, r0, #1
    b2d2:	3901      	subs	r1, #1
    b2d4:	e001      	b.n	b2da <memcmp+0x3e>
    b2d6:	18c3      	adds	r3, r0, r3
    b2d8:	d00c      	beq.n	b2f4 <memcmp+0x58>
    b2da:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b2de:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b2e2:	45e6      	cmp	lr, ip
    b2e4:	eba4 0302 	sub.w	r3, r4, r2
    b2e8:	d0f5      	beq.n	b2d6 <memcmp+0x3a>
    b2ea:	ebae 000c 	sub.w	r0, lr, ip
    b2ee:	bd70      	pop	{r4, r5, r6, pc}
    b2f0:	1e54      	subs	r4, r2, #1
    b2f2:	e7ed      	b.n	b2d0 <memcmp+0x34>
    b2f4:	4618      	mov	r0, r3
    b2f6:	bd70      	pop	{r4, r5, r6, pc}
    b2f8:	4610      	mov	r0, r2
    b2fa:	bd70      	pop	{r4, r5, r6, pc}

0000b2fc <memmove>:
    b2fc:	4288      	cmp	r0, r1
    b2fe:	d90d      	bls.n	b31c <memmove+0x20>
    b300:	188b      	adds	r3, r1, r2
    b302:	4283      	cmp	r3, r0
    b304:	d90a      	bls.n	b31c <memmove+0x20>
    b306:	eb00 0c02 	add.w	ip, r0, r2
    b30a:	b1ba      	cbz	r2, b33c <memmove+0x40>
    b30c:	4662      	mov	r2, ip
    b30e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b312:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b316:	4299      	cmp	r1, r3
    b318:	d1f9      	bne.n	b30e <memmove+0x12>
    b31a:	4770      	bx	lr
    b31c:	2a0f      	cmp	r2, #15
    b31e:	d80e      	bhi.n	b33e <memmove+0x42>
    b320:	4603      	mov	r3, r0
    b322:	f102 3cff 	add.w	ip, r2, #4294967295
    b326:	b14a      	cbz	r2, b33c <memmove+0x40>
    b328:	f10c 0c01 	add.w	ip, ip, #1
    b32c:	3b01      	subs	r3, #1
    b32e:	448c      	add	ip, r1
    b330:	f811 2b01 	ldrb.w	r2, [r1], #1
    b334:	f803 2f01 	strb.w	r2, [r3, #1]!
    b338:	4561      	cmp	r1, ip
    b33a:	d1f9      	bne.n	b330 <memmove+0x34>
    b33c:	4770      	bx	lr
    b33e:	ea40 0301 	orr.w	r3, r0, r1
    b342:	079b      	lsls	r3, r3, #30
    b344:	d150      	bne.n	b3e8 <memmove+0xec>
    b346:	f1a2 0310 	sub.w	r3, r2, #16
    b34a:	b570      	push	{r4, r5, r6, lr}
    b34c:	f101 0c20 	add.w	ip, r1, #32
    b350:	f023 050f 	bic.w	r5, r3, #15
    b354:	f101 0e10 	add.w	lr, r1, #16
    b358:	f100 0410 	add.w	r4, r0, #16
    b35c:	44ac      	add	ip, r5
    b35e:	091b      	lsrs	r3, r3, #4
    b360:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b364:	f844 5c10 	str.w	r5, [r4, #-16]
    b368:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b36c:	f844 5c0c 	str.w	r5, [r4, #-12]
    b370:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b374:	f844 5c08 	str.w	r5, [r4, #-8]
    b378:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b37c:	f844 5c04 	str.w	r5, [r4, #-4]
    b380:	f10e 0e10 	add.w	lr, lr, #16
    b384:	45e6      	cmp	lr, ip
    b386:	f104 0410 	add.w	r4, r4, #16
    b38a:	d1e9      	bne.n	b360 <memmove+0x64>
    b38c:	3301      	adds	r3, #1
    b38e:	f012 0f0c 	tst.w	r2, #12
    b392:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b396:	f002 040f 	and.w	r4, r2, #15
    b39a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b39e:	d027      	beq.n	b3f0 <memmove+0xf4>
    b3a0:	3c04      	subs	r4, #4
    b3a2:	f024 0603 	bic.w	r6, r4, #3
    b3a6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b3aa:	441e      	add	r6, r3
    b3ac:	1f1c      	subs	r4, r3, #4
    b3ae:	468e      	mov	lr, r1
    b3b0:	f85e 5b04 	ldr.w	r5, [lr], #4
    b3b4:	f844 5f04 	str.w	r5, [r4, #4]!
    b3b8:	42b4      	cmp	r4, r6
    b3ba:	d1f9      	bne.n	b3b0 <memmove+0xb4>
    b3bc:	f10c 0401 	add.w	r4, ip, #1
    b3c0:	f002 0203 	and.w	r2, r2, #3
    b3c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b3cc:	f102 3cff 	add.w	ip, r2, #4294967295
    b3d0:	b14a      	cbz	r2, b3e6 <memmove+0xea>
    b3d2:	f10c 0c01 	add.w	ip, ip, #1
    b3d6:	3b01      	subs	r3, #1
    b3d8:	448c      	add	ip, r1
    b3da:	f811 2b01 	ldrb.w	r2, [r1], #1
    b3de:	f803 2f01 	strb.w	r2, [r3, #1]!
    b3e2:	4561      	cmp	r1, ip
    b3e4:	d1f9      	bne.n	b3da <memmove+0xde>
    b3e6:	bd70      	pop	{r4, r5, r6, pc}
    b3e8:	f102 3cff 	add.w	ip, r2, #4294967295
    b3ec:	4603      	mov	r3, r0
    b3ee:	e79b      	b.n	b328 <memmove+0x2c>
    b3f0:	4622      	mov	r2, r4
    b3f2:	e7eb      	b.n	b3cc <memmove+0xd0>

0000b3f4 <memset>:
    b3f4:	0783      	lsls	r3, r0, #30
    b3f6:	b530      	push	{r4, r5, lr}
    b3f8:	d048      	beq.n	b48c <memset+0x98>
    b3fa:	1e54      	subs	r4, r2, #1
    b3fc:	2a00      	cmp	r2, #0
    b3fe:	d03f      	beq.n	b480 <memset+0x8c>
    b400:	b2ca      	uxtb	r2, r1
    b402:	4603      	mov	r3, r0
    b404:	e001      	b.n	b40a <memset+0x16>
    b406:	3c01      	subs	r4, #1
    b408:	d33a      	bcc.n	b480 <memset+0x8c>
    b40a:	f803 2b01 	strb.w	r2, [r3], #1
    b40e:	079d      	lsls	r5, r3, #30
    b410:	d1f9      	bne.n	b406 <memset+0x12>
    b412:	2c03      	cmp	r4, #3
    b414:	d92d      	bls.n	b472 <memset+0x7e>
    b416:	b2cd      	uxtb	r5, r1
    b418:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b41c:	2c0f      	cmp	r4, #15
    b41e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b422:	d936      	bls.n	b492 <memset+0x9e>
    b424:	f1a4 0210 	sub.w	r2, r4, #16
    b428:	f022 0c0f 	bic.w	ip, r2, #15
    b42c:	f103 0e20 	add.w	lr, r3, #32
    b430:	44e6      	add	lr, ip
    b432:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    b436:	f103 0210 	add.w	r2, r3, #16
    b43a:	e942 5504 	strd	r5, r5, [r2, #-16]
    b43e:	e942 5502 	strd	r5, r5, [r2, #-8]
    b442:	3210      	adds	r2, #16
    b444:	4572      	cmp	r2, lr
    b446:	d1f8      	bne.n	b43a <memset+0x46>
    b448:	f10c 0201 	add.w	r2, ip, #1
    b44c:	f014 0f0c 	tst.w	r4, #12
    b450:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b454:	f004 0c0f 	and.w	ip, r4, #15
    b458:	d013      	beq.n	b482 <memset+0x8e>
    b45a:	f1ac 0304 	sub.w	r3, ip, #4
    b45e:	f023 0303 	bic.w	r3, r3, #3
    b462:	3304      	adds	r3, #4
    b464:	4413      	add	r3, r2
    b466:	f842 5b04 	str.w	r5, [r2], #4
    b46a:	4293      	cmp	r3, r2
    b46c:	d1fb      	bne.n	b466 <memset+0x72>
    b46e:	f00c 0403 	and.w	r4, ip, #3
    b472:	b12c      	cbz	r4, b480 <memset+0x8c>
    b474:	b2c9      	uxtb	r1, r1
    b476:	441c      	add	r4, r3
    b478:	f803 1b01 	strb.w	r1, [r3], #1
    b47c:	429c      	cmp	r4, r3
    b47e:	d1fb      	bne.n	b478 <memset+0x84>
    b480:	bd30      	pop	{r4, r5, pc}
    b482:	4664      	mov	r4, ip
    b484:	4613      	mov	r3, r2
    b486:	2c00      	cmp	r4, #0
    b488:	d1f4      	bne.n	b474 <memset+0x80>
    b48a:	e7f9      	b.n	b480 <memset+0x8c>
    b48c:	4603      	mov	r3, r0
    b48e:	4614      	mov	r4, r2
    b490:	e7bf      	b.n	b412 <memset+0x1e>
    b492:	461a      	mov	r2, r3
    b494:	46a4      	mov	ip, r4
    b496:	e7e0      	b.n	b45a <memset+0x66>

0000b498 <strncmp>:
    b498:	2a00      	cmp	r2, #0
    b49a:	d03e      	beq.n	b51a <strncmp+0x82>
    b49c:	ea40 0301 	orr.w	r3, r0, r1
    b4a0:	079b      	lsls	r3, r3, #30
    b4a2:	b530      	push	{r4, r5, lr}
    b4a4:	4684      	mov	ip, r0
    b4a6:	d12f      	bne.n	b508 <strncmp+0x70>
    b4a8:	2a03      	cmp	r2, #3
    b4aa:	d92d      	bls.n	b508 <strncmp+0x70>
    b4ac:	460b      	mov	r3, r1
    b4ae:	e008      	b.n	b4c2 <strncmp+0x2a>
    b4b0:	3a04      	subs	r2, #4
    b4b2:	4684      	mov	ip, r0
    b4b4:	4619      	mov	r1, r3
    b4b6:	d025      	beq.n	b504 <strncmp+0x6c>
    b4b8:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    b4bc:	d122      	bne.n	b504 <strncmp+0x6c>
    b4be:	2a03      	cmp	r2, #3
    b4c0:	d922      	bls.n	b508 <strncmp+0x70>
    b4c2:	6804      	ldr	r4, [r0, #0]
    b4c4:	4619      	mov	r1, r3
    b4c6:	f853 5b04 	ldr.w	r5, [r3], #4
    b4ca:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    b4ce:	42ac      	cmp	r4, r5
    b4d0:	4684      	mov	ip, r0
    b4d2:	ea2e 0e04 	bic.w	lr, lr, r4
    b4d6:	f100 0004 	add.w	r0, r0, #4
    b4da:	d0e9      	beq.n	b4b0 <strncmp+0x18>
    b4dc:	f89c 0000 	ldrb.w	r0, [ip]
    b4e0:	780c      	ldrb	r4, [r1, #0]
    b4e2:	42a0      	cmp	r0, r4
    b4e4:	d11b      	bne.n	b51e <strncmp+0x86>
    b4e6:	46e6      	mov	lr, ip
    b4e8:	b168      	cbz	r0, b506 <strncmp+0x6e>
    b4ea:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    b4ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b4f2:	eba2 030e 	sub.w	r3, r2, lr
    b4f6:	42a0      	cmp	r0, r4
    b4f8:	f103 33ff 	add.w	r3, r3, #4294967295
    b4fc:	d10f      	bne.n	b51e <strncmp+0x86>
    b4fe:	eb1c 0303 	adds.w	r3, ip, r3
    b502:	d1f1      	bne.n	b4e8 <strncmp+0x50>
    b504:	2000      	movs	r0, #0
    b506:	bd30      	pop	{r4, r5, pc}
    b508:	f89c 0000 	ldrb.w	r0, [ip]
    b50c:	780c      	ldrb	r4, [r1, #0]
    b50e:	4284      	cmp	r4, r0
    b510:	d105      	bne.n	b51e <strncmp+0x86>
    b512:	2a01      	cmp	r2, #1
    b514:	d0f6      	beq.n	b504 <strncmp+0x6c>
    b516:	46e6      	mov	lr, ip
    b518:	e7e6      	b.n	b4e8 <strncmp+0x50>
    b51a:	4610      	mov	r0, r2
    b51c:	4770      	bx	lr
    b51e:	1b00      	subs	r0, r0, r4
    b520:	bd30      	pop	{r4, r5, pc}
    b522:	bf00      	nop

0000b524 <strncpy>:
    b524:	ea40 0301 	orr.w	r3, r0, r1
    b528:	079b      	lsls	r3, r3, #30
    b52a:	b530      	push	{r4, r5, lr}
    b52c:	d101      	bne.n	b532 <strncpy+0xe>
    b52e:	2a03      	cmp	r2, #3
    b530:	d80f      	bhi.n	b552 <strncpy+0x2e>
    b532:	4684      	mov	ip, r0
    b534:	f101 3eff 	add.w	lr, r1, #4294967295
    b538:	e007      	b.n	b54a <strncpy+0x26>
    b53a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    b53e:	f803 1b01 	strb.w	r1, [r3], #1
    b542:	1e54      	subs	r4, r2, #1
    b544:	b1c1      	cbz	r1, b578 <strncpy+0x54>
    b546:	469c      	mov	ip, r3
    b548:	4622      	mov	r2, r4
    b54a:	4663      	mov	r3, ip
    b54c:	2a00      	cmp	r2, #0
    b54e:	d1f4      	bne.n	b53a <strncpy+0x16>
    b550:	bd30      	pop	{r4, r5, pc}
    b552:	460b      	mov	r3, r1
    b554:	4684      	mov	ip, r0
    b556:	4619      	mov	r1, r3
    b558:	f853 5b04 	ldr.w	r5, [r3], #4
    b55c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b560:	ea24 0405 	bic.w	r4, r4, r5
    b564:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b568:	d1e4      	bne.n	b534 <strncpy+0x10>
    b56a:	3a04      	subs	r2, #4
    b56c:	2a03      	cmp	r2, #3
    b56e:	f84c 5b04 	str.w	r5, [ip], #4
    b572:	4619      	mov	r1, r3
    b574:	d8ef      	bhi.n	b556 <strncpy+0x32>
    b576:	e7dd      	b.n	b534 <strncpy+0x10>
    b578:	4494      	add	ip, r2
    b57a:	2c00      	cmp	r4, #0
    b57c:	d0e8      	beq.n	b550 <strncpy+0x2c>
    b57e:	f803 1b01 	strb.w	r1, [r3], #1
    b582:	4563      	cmp	r3, ip
    b584:	d1fb      	bne.n	b57e <strncpy+0x5a>
    b586:	bd30      	pop	{r4, r5, pc}

0000b588 <__locale_mb_cur_max>:
    b588:	4b01      	ldr	r3, [pc, #4]	; (b590 <__locale_mb_cur_max+0x8>)
    b58a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    b58e:	4770      	bx	lr
    b590:	20008770 	.word	0x20008770

0000b594 <_close_r>:
    b594:	b538      	push	{r3, r4, r5, lr}
    b596:	4d07      	ldr	r5, [pc, #28]	; (b5b4 <_close_r+0x20>)
    b598:	2200      	movs	r2, #0
    b59a:	4604      	mov	r4, r0
    b59c:	4608      	mov	r0, r1
    b59e:	602a      	str	r2, [r5, #0]
    b5a0:	f7fc fc3c 	bl	7e1c <_close>
    b5a4:	1c43      	adds	r3, r0, #1
    b5a6:	d000      	beq.n	b5aa <_close_r+0x16>
    b5a8:	bd38      	pop	{r3, r4, r5, pc}
    b5aa:	682b      	ldr	r3, [r5, #0]
    b5ac:	2b00      	cmp	r3, #0
    b5ae:	d0fb      	beq.n	b5a8 <_close_r+0x14>
    b5b0:	6023      	str	r3, [r4, #0]
    b5b2:	bd38      	pop	{r3, r4, r5, pc}
    b5b4:	2001e79c 	.word	0x2001e79c

0000b5b8 <_lseek_r>:
    b5b8:	b538      	push	{r3, r4, r5, lr}
    b5ba:	460c      	mov	r4, r1
    b5bc:	4d08      	ldr	r5, [pc, #32]	; (b5e0 <_lseek_r+0x28>)
    b5be:	4684      	mov	ip, r0
    b5c0:	4611      	mov	r1, r2
    b5c2:	4620      	mov	r0, r4
    b5c4:	461a      	mov	r2, r3
    b5c6:	2300      	movs	r3, #0
    b5c8:	602b      	str	r3, [r5, #0]
    b5ca:	4664      	mov	r4, ip
    b5cc:	f7fc fc32 	bl	7e34 <_lseek>
    b5d0:	1c43      	adds	r3, r0, #1
    b5d2:	d000      	beq.n	b5d6 <_lseek_r+0x1e>
    b5d4:	bd38      	pop	{r3, r4, r5, pc}
    b5d6:	682b      	ldr	r3, [r5, #0]
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d0fb      	beq.n	b5d4 <_lseek_r+0x1c>
    b5dc:	6023      	str	r3, [r4, #0]
    b5de:	bd38      	pop	{r3, r4, r5, pc}
    b5e0:	2001e79c 	.word	0x2001e79c

0000b5e4 <_read_r>:
    b5e4:	b538      	push	{r3, r4, r5, lr}
    b5e6:	460c      	mov	r4, r1
    b5e8:	4d08      	ldr	r5, [pc, #32]	; (b60c <_read_r+0x28>)
    b5ea:	4684      	mov	ip, r0
    b5ec:	4611      	mov	r1, r2
    b5ee:	4620      	mov	r0, r4
    b5f0:	461a      	mov	r2, r3
    b5f2:	2300      	movs	r3, #0
    b5f4:	602b      	str	r3, [r5, #0]
    b5f6:	4664      	mov	r4, ip
    b5f8:	f7fc fc0e 	bl	7e18 <_read>
    b5fc:	1c43      	adds	r3, r0, #1
    b5fe:	d000      	beq.n	b602 <_read_r+0x1e>
    b600:	bd38      	pop	{r3, r4, r5, pc}
    b602:	682b      	ldr	r3, [r5, #0]
    b604:	2b00      	cmp	r3, #0
    b606:	d0fb      	beq.n	b600 <_read_r+0x1c>
    b608:	6023      	str	r3, [r4, #0]
    b60a:	bd38      	pop	{r3, r4, r5, pc}
    b60c:	2001e79c 	.word	0x2001e79c

0000b610 <_sbrk_r>:
    b610:	b538      	push	{r3, r4, r5, lr}
    b612:	4d07      	ldr	r5, [pc, #28]	; (b630 <_sbrk_r+0x20>)
    b614:	2200      	movs	r2, #0
    b616:	4604      	mov	r4, r0
    b618:	4608      	mov	r0, r1
    b61a:	602a      	str	r2, [r5, #0]
    b61c:	f7fc fbe2 	bl	7de4 <_sbrk>
    b620:	1c43      	adds	r3, r0, #1
    b622:	d000      	beq.n	b626 <_sbrk_r+0x16>
    b624:	bd38      	pop	{r3, r4, r5, pc}
    b626:	682b      	ldr	r3, [r5, #0]
    b628:	2b00      	cmp	r3, #0
    b62a:	d0fb      	beq.n	b624 <_sbrk_r+0x14>
    b62c:	6023      	str	r3, [r4, #0]
    b62e:	bd38      	pop	{r3, r4, r5, pc}
    b630:	2001e79c 	.word	0x2001e79c

0000b634 <_write_r>:
    b634:	b538      	push	{r3, r4, r5, lr}
    b636:	460c      	mov	r4, r1
    b638:	4d08      	ldr	r5, [pc, #32]	; (b65c <_write_r+0x28>)
    b63a:	4684      	mov	ip, r0
    b63c:	4611      	mov	r1, r2
    b63e:	4620      	mov	r0, r4
    b640:	461a      	mov	r2, r3
    b642:	2300      	movs	r3, #0
    b644:	602b      	str	r3, [r5, #0]
    b646:	4664      	mov	r4, ip
    b648:	f7fb fe7c 	bl	7344 <_write>
    b64c:	1c43      	adds	r3, r0, #1
    b64e:	d000      	beq.n	b652 <_write_r+0x1e>
    b650:	bd38      	pop	{r3, r4, r5, pc}
    b652:	682b      	ldr	r3, [r5, #0]
    b654:	2b00      	cmp	r3, #0
    b656:	d0fb      	beq.n	b650 <_write_r+0x1c>
    b658:	6023      	str	r3, [r4, #0]
    b65a:	bd38      	pop	{r3, r4, r5, pc}
    b65c:	2001e79c 	.word	0x2001e79c

0000b660 <__errno>:
    b660:	4b01      	ldr	r3, [pc, #4]	; (b668 <__errno+0x8>)
    b662:	6818      	ldr	r0, [r3, #0]
    b664:	4770      	bx	lr
    b666:	bf00      	nop
    b668:	20008cf8 	.word	0x20008cf8

0000b66c <__libc_init_array>:
    b66c:	b570      	push	{r4, r5, r6, lr}
    b66e:	4e0d      	ldr	r6, [pc, #52]	; (b6a4 <__libc_init_array+0x38>)
    b670:	4d0d      	ldr	r5, [pc, #52]	; (b6a8 <__libc_init_array+0x3c>)
    b672:	1b76      	subs	r6, r6, r5
    b674:	10b6      	asrs	r6, r6, #2
    b676:	d006      	beq.n	b686 <__libc_init_array+0x1a>
    b678:	2400      	movs	r4, #0
    b67a:	f855 3b04 	ldr.w	r3, [r5], #4
    b67e:	3401      	adds	r4, #1
    b680:	4798      	blx	r3
    b682:	42a6      	cmp	r6, r4
    b684:	d1f9      	bne.n	b67a <__libc_init_array+0xe>
    b686:	4e09      	ldr	r6, [pc, #36]	; (b6ac <__libc_init_array+0x40>)
    b688:	4d09      	ldr	r5, [pc, #36]	; (b6b0 <__libc_init_array+0x44>)
    b68a:	1b76      	subs	r6, r6, r5
    b68c:	f008 fbd4 	bl	13e38 <___init_veneer>
    b690:	10b6      	asrs	r6, r6, #2
    b692:	d006      	beq.n	b6a2 <__libc_init_array+0x36>
    b694:	2400      	movs	r4, #0
    b696:	f855 3b04 	ldr.w	r3, [r5], #4
    b69a:	3401      	adds	r4, #1
    b69c:	4798      	blx	r3
    b69e:	42a6      	cmp	r6, r4
    b6a0:	d1f9      	bne.n	b696 <__libc_init_array+0x2a>
    b6a2:	bd70      	pop	{r4, r5, r6, pc}
    b6a4:	60002660 	.word	0x60002660
    b6a8:	60002660 	.word	0x60002660
    b6ac:	60002674 	.word	0x60002674
    b6b0:	60002660 	.word	0x60002660

0000b6b4 <__retarget_lock_init_recursive>:
    b6b4:	4770      	bx	lr
    b6b6:	bf00      	nop

0000b6b8 <__retarget_lock_close_recursive>:
    b6b8:	4770      	bx	lr
    b6ba:	bf00      	nop

0000b6bc <__retarget_lock_acquire_recursive>:
    b6bc:	4770      	bx	lr
    b6be:	bf00      	nop

0000b6c0 <__retarget_lock_release_recursive>:
    b6c0:	4770      	bx	lr
    b6c2:	bf00      	nop
	...
    b6e0:	eba2 0003 	sub.w	r0, r2, r3
    b6e4:	4770      	bx	lr
    b6e6:	bf00      	nop

0000b6e8 <strcmp>:
    b6e8:	7802      	ldrb	r2, [r0, #0]
    b6ea:	780b      	ldrb	r3, [r1, #0]
    b6ec:	2a01      	cmp	r2, #1
    b6ee:	bf28      	it	cs
    b6f0:	429a      	cmpcs	r2, r3
    b6f2:	d1f5      	bne.n	b6e0 <__retarget_lock_release_recursive+0x20>
    b6f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    b6f8:	ea40 0401 	orr.w	r4, r0, r1
    b6fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    b700:	f06f 0c00 	mvn.w	ip, #0
    b704:	ea4f 7244 	mov.w	r2, r4, lsl #29
    b708:	b312      	cbz	r2, b750 <strcmp+0x68>
    b70a:	ea80 0401 	eor.w	r4, r0, r1
    b70e:	f014 0f07 	tst.w	r4, #7
    b712:	d16a      	bne.n	b7ea <strcmp+0x102>
    b714:	f000 0407 	and.w	r4, r0, #7
    b718:	f020 0007 	bic.w	r0, r0, #7
    b71c:	f004 0503 	and.w	r5, r4, #3
    b720:	f021 0107 	bic.w	r1, r1, #7
    b724:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    b728:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    b72c:	f014 0f04 	tst.w	r4, #4
    b730:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    b734:	fa0c f405 	lsl.w	r4, ip, r5
    b738:	ea62 0204 	orn	r2, r2, r4
    b73c:	ea66 0604 	orn	r6, r6, r4
    b740:	d00a      	beq.n	b758 <strcmp+0x70>
    b742:	ea63 0304 	orn	r3, r3, r4
    b746:	4662      	mov	r2, ip
    b748:	ea67 0704 	orn	r7, r7, r4
    b74c:	4666      	mov	r6, ip
    b74e:	e003      	b.n	b758 <strcmp+0x70>
    b750:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    b754:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    b758:	fa82 f54c 	uadd8	r5, r2, ip
    b75c:	ea82 0406 	eor.w	r4, r2, r6
    b760:	faa4 f48c 	sel	r4, r4, ip
    b764:	bb6c      	cbnz	r4, b7c2 <strcmp+0xda>
    b766:	fa83 f54c 	uadd8	r5, r3, ip
    b76a:	ea83 0507 	eor.w	r5, r3, r7
    b76e:	faa5 f58c 	sel	r5, r5, ip
    b772:	b995      	cbnz	r5, b79a <strcmp+0xb2>
    b774:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    b778:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    b77c:	fa82 f54c 	uadd8	r5, r2, ip
    b780:	ea82 0406 	eor.w	r4, r2, r6
    b784:	faa4 f48c 	sel	r4, r4, ip
    b788:	fa83 f54c 	uadd8	r5, r3, ip
    b78c:	ea83 0507 	eor.w	r5, r3, r7
    b790:	faa5 f58c 	sel	r5, r5, ip
    b794:	4325      	orrs	r5, r4
    b796:	d0db      	beq.n	b750 <strcmp+0x68>
    b798:	b99c      	cbnz	r4, b7c2 <strcmp+0xda>
    b79a:	ba2d      	rev	r5, r5
    b79c:	fab5 f485 	clz	r4, r5
    b7a0:	f024 0407 	bic.w	r4, r4, #7
    b7a4:	fa27 f104 	lsr.w	r1, r7, r4
    b7a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    b7ac:	fa23 f304 	lsr.w	r3, r3, r4
    b7b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b7b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b7b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b7bc:	eba0 0001 	sub.w	r0, r0, r1
    b7c0:	4770      	bx	lr
    b7c2:	ba24      	rev	r4, r4
    b7c4:	fab4 f484 	clz	r4, r4
    b7c8:	f024 0407 	bic.w	r4, r4, #7
    b7cc:	fa26 f104 	lsr.w	r1, r6, r4
    b7d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    b7d4:	fa22 f204 	lsr.w	r2, r2, r4
    b7d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    b7dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b7e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b7e4:	eba0 0001 	sub.w	r0, r0, r1
    b7e8:	4770      	bx	lr
    b7ea:	f014 0f03 	tst.w	r4, #3
    b7ee:	d13c      	bne.n	b86a <strcmp+0x182>
    b7f0:	f010 0403 	ands.w	r4, r0, #3
    b7f4:	d128      	bne.n	b848 <strcmp+0x160>
    b7f6:	f850 2b08 	ldr.w	r2, [r0], #8
    b7fa:	f851 3b08 	ldr.w	r3, [r1], #8
    b7fe:	fa82 f54c 	uadd8	r5, r2, ip
    b802:	ea82 0503 	eor.w	r5, r2, r3
    b806:	faa5 f58c 	sel	r5, r5, ip
    b80a:	b95d      	cbnz	r5, b824 <strcmp+0x13c>
    b80c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    b810:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b814:	fa82 f54c 	uadd8	r5, r2, ip
    b818:	ea82 0503 	eor.w	r5, r2, r3
    b81c:	faa5 f58c 	sel	r5, r5, ip
    b820:	2d00      	cmp	r5, #0
    b822:	d0e8      	beq.n	b7f6 <strcmp+0x10e>
    b824:	ba2d      	rev	r5, r5
    b826:	fab5 f485 	clz	r4, r5
    b82a:	f024 0407 	bic.w	r4, r4, #7
    b82e:	fa23 f104 	lsr.w	r1, r3, r4
    b832:	fa22 f204 	lsr.w	r2, r2, r4
    b836:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    b83a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b83e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b842:	eba0 0001 	sub.w	r0, r0, r1
    b846:	4770      	bx	lr
    b848:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    b84c:	f020 0003 	bic.w	r0, r0, #3
    b850:	f850 2b08 	ldr.w	r2, [r0], #8
    b854:	f021 0103 	bic.w	r1, r1, #3
    b858:	f851 3b08 	ldr.w	r3, [r1], #8
    b85c:	fa0c f404 	lsl.w	r4, ip, r4
    b860:	ea62 0204 	orn	r2, r2, r4
    b864:	ea63 0304 	orn	r3, r3, r4
    b868:	e7c9      	b.n	b7fe <strcmp+0x116>
    b86a:	f010 0403 	ands.w	r4, r0, #3
    b86e:	d01a      	beq.n	b8a6 <strcmp+0x1be>
    b870:	eba1 0104 	sub.w	r1, r1, r4
    b874:	f020 0003 	bic.w	r0, r0, #3
    b878:	07e4      	lsls	r4, r4, #31
    b87a:	f850 2b04 	ldr.w	r2, [r0], #4
    b87e:	d006      	beq.n	b88e <strcmp+0x1a6>
    b880:	d20f      	bcs.n	b8a2 <strcmp+0x1ba>
    b882:	788b      	ldrb	r3, [r1, #2]
    b884:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    b888:	1ae4      	subs	r4, r4, r3
    b88a:	d106      	bne.n	b89a <strcmp+0x1b2>
    b88c:	b12b      	cbz	r3, b89a <strcmp+0x1b2>
    b88e:	78cb      	ldrb	r3, [r1, #3]
    b890:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    b894:	1ae4      	subs	r4, r4, r3
    b896:	d100      	bne.n	b89a <strcmp+0x1b2>
    b898:	b91b      	cbnz	r3, b8a2 <strcmp+0x1ba>
    b89a:	4620      	mov	r0, r4
    b89c:	f85d 4b10 	ldr.w	r4, [sp], #16
    b8a0:	4770      	bx	lr
    b8a2:	f101 0104 	add.w	r1, r1, #4
    b8a6:	f850 2b04 	ldr.w	r2, [r0], #4
    b8aa:	07cc      	lsls	r4, r1, #31
    b8ac:	f021 0103 	bic.w	r1, r1, #3
    b8b0:	f851 3b04 	ldr.w	r3, [r1], #4
    b8b4:	d848      	bhi.n	b948 <strcmp+0x260>
    b8b6:	d224      	bcs.n	b902 <strcmp+0x21a>
    b8b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    b8bc:	fa82 f54c 	uadd8	r5, r2, ip
    b8c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    b8c4:	faa5 f58c 	sel	r5, r5, ip
    b8c8:	d10a      	bne.n	b8e0 <strcmp+0x1f8>
    b8ca:	b965      	cbnz	r5, b8e6 <strcmp+0x1fe>
    b8cc:	f851 3b04 	ldr.w	r3, [r1], #4
    b8d0:	ea84 0402 	eor.w	r4, r4, r2
    b8d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    b8d8:	d10e      	bne.n	b8f8 <strcmp+0x210>
    b8da:	f850 2b04 	ldr.w	r2, [r0], #4
    b8de:	e7eb      	b.n	b8b8 <strcmp+0x1d0>
    b8e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    b8e4:	e055      	b.n	b992 <strcmp+0x2aa>
    b8e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    b8ea:	d14d      	bne.n	b988 <strcmp+0x2a0>
    b8ec:	7808      	ldrb	r0, [r1, #0]
    b8ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b8f2:	f1c0 0000 	rsb	r0, r0, #0
    b8f6:	4770      	bx	lr
    b8f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    b8fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    b900:	e047      	b.n	b992 <strcmp+0x2aa>
    b902:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    b906:	fa82 f54c 	uadd8	r5, r2, ip
    b90a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    b90e:	faa5 f58c 	sel	r5, r5, ip
    b912:	d10a      	bne.n	b92a <strcmp+0x242>
    b914:	b965      	cbnz	r5, b930 <strcmp+0x248>
    b916:	f851 3b04 	ldr.w	r3, [r1], #4
    b91a:	ea84 0402 	eor.w	r4, r4, r2
    b91e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    b922:	d10c      	bne.n	b93e <strcmp+0x256>
    b924:	f850 2b04 	ldr.w	r2, [r0], #4
    b928:	e7eb      	b.n	b902 <strcmp+0x21a>
    b92a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    b92e:	e030      	b.n	b992 <strcmp+0x2aa>
    b930:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    b934:	d128      	bne.n	b988 <strcmp+0x2a0>
    b936:	880b      	ldrh	r3, [r1, #0]
    b938:	ea4f 4212 	mov.w	r2, r2, lsr #16
    b93c:	e029      	b.n	b992 <strcmp+0x2aa>
    b93e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    b942:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    b946:	e024      	b.n	b992 <strcmp+0x2aa>
    b948:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    b94c:	fa82 f54c 	uadd8	r5, r2, ip
    b950:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    b954:	faa5 f58c 	sel	r5, r5, ip
    b958:	d10a      	bne.n	b970 <strcmp+0x288>
    b95a:	b965      	cbnz	r5, b976 <strcmp+0x28e>
    b95c:	f851 3b04 	ldr.w	r3, [r1], #4
    b960:	ea84 0402 	eor.w	r4, r4, r2
    b964:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    b968:	d109      	bne.n	b97e <strcmp+0x296>
    b96a:	f850 2b04 	ldr.w	r2, [r0], #4
    b96e:	e7eb      	b.n	b948 <strcmp+0x260>
    b970:	ea4f 6313 	mov.w	r3, r3, lsr #24
    b974:	e00d      	b.n	b992 <strcmp+0x2aa>
    b976:	f015 0fff 	tst.w	r5, #255	; 0xff
    b97a:	d105      	bne.n	b988 <strcmp+0x2a0>
    b97c:	680b      	ldr	r3, [r1, #0]
    b97e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    b982:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b986:	e004      	b.n	b992 <strcmp+0x2aa>
    b988:	f04f 0000 	mov.w	r0, #0
    b98c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b990:	4770      	bx	lr
    b992:	ba12      	rev	r2, r2
    b994:	ba1b      	rev	r3, r3
    b996:	fa82 f44c 	uadd8	r4, r2, ip
    b99a:	ea82 0403 	eor.w	r4, r2, r3
    b99e:	faa4 f58c 	sel	r5, r4, ip
    b9a2:	fab5 f485 	clz	r4, r5
    b9a6:	fa02 f204 	lsl.w	r2, r2, r4
    b9aa:	fa03 f304 	lsl.w	r3, r3, r4
    b9ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    b9b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b9b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    b9ba:	4770      	bx	lr
    b9bc:	0000      	movs	r0, r0
	...

0000b9c0 <memchr>:
    b9c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b9c4:	2a10      	cmp	r2, #16
    b9c6:	db2b      	blt.n	ba20 <memchr+0x60>
    b9c8:	f010 0f07 	tst.w	r0, #7
    b9cc:	d008      	beq.n	b9e0 <memchr+0x20>
    b9ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    b9d2:	3a01      	subs	r2, #1
    b9d4:	428b      	cmp	r3, r1
    b9d6:	d02d      	beq.n	ba34 <memchr+0x74>
    b9d8:	f010 0f07 	tst.w	r0, #7
    b9dc:	b342      	cbz	r2, ba30 <memchr+0x70>
    b9de:	d1f6      	bne.n	b9ce <memchr+0xe>
    b9e0:	b4f0      	push	{r4, r5, r6, r7}
    b9e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b9e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b9ea:	f022 0407 	bic.w	r4, r2, #7
    b9ee:	f07f 0700 	mvns.w	r7, #0
    b9f2:	2300      	movs	r3, #0
    b9f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b9f8:	3c08      	subs	r4, #8
    b9fa:	ea85 0501 	eor.w	r5, r5, r1
    b9fe:	ea86 0601 	eor.w	r6, r6, r1
    ba02:	fa85 f547 	uadd8	r5, r5, r7
    ba06:	faa3 f587 	sel	r5, r3, r7
    ba0a:	fa86 f647 	uadd8	r6, r6, r7
    ba0e:	faa5 f687 	sel	r6, r5, r7
    ba12:	b98e      	cbnz	r6, ba38 <memchr+0x78>
    ba14:	d1ee      	bne.n	b9f4 <memchr+0x34>
    ba16:	bcf0      	pop	{r4, r5, r6, r7}
    ba18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba1c:	f002 0207 	and.w	r2, r2, #7
    ba20:	b132      	cbz	r2, ba30 <memchr+0x70>
    ba22:	f810 3b01 	ldrb.w	r3, [r0], #1
    ba26:	3a01      	subs	r2, #1
    ba28:	ea83 0301 	eor.w	r3, r3, r1
    ba2c:	b113      	cbz	r3, ba34 <memchr+0x74>
    ba2e:	d1f8      	bne.n	ba22 <memchr+0x62>
    ba30:	2000      	movs	r0, #0
    ba32:	4770      	bx	lr
    ba34:	3801      	subs	r0, #1
    ba36:	4770      	bx	lr
    ba38:	2d00      	cmp	r5, #0
    ba3a:	bf06      	itte	eq
    ba3c:	4635      	moveq	r5, r6
    ba3e:	3803      	subeq	r0, #3
    ba40:	3807      	subne	r0, #7
    ba42:	f015 0f01 	tst.w	r5, #1
    ba46:	d107      	bne.n	ba58 <memchr+0x98>
    ba48:	3001      	adds	r0, #1
    ba4a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ba4e:	bf02      	ittt	eq
    ba50:	3001      	addeq	r0, #1
    ba52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ba56:	3001      	addeq	r0, #1
    ba58:	bcf0      	pop	{r4, r5, r6, r7}
    ba5a:	3801      	subs	r0, #1
    ba5c:	4770      	bx	lr
    ba5e:	bf00      	nop
	...

0000ba80 <strlen>:
    ba80:	f890 f000 	pld	[r0]
    ba84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ba88:	f020 0107 	bic.w	r1, r0, #7
    ba8c:	f06f 0c00 	mvn.w	ip, #0
    ba90:	f010 0407 	ands.w	r4, r0, #7
    ba94:	f891 f020 	pld	[r1, #32]
    ba98:	f040 8049 	bne.w	bb2e <strlen+0xae>
    ba9c:	f04f 0400 	mov.w	r4, #0
    baa0:	f06f 0007 	mvn.w	r0, #7
    baa4:	e9d1 2300 	ldrd	r2, r3, [r1]
    baa8:	f891 f040 	pld	[r1, #64]	; 0x40
    baac:	f100 0008 	add.w	r0, r0, #8
    bab0:	fa82 f24c 	uadd8	r2, r2, ip
    bab4:	faa4 f28c 	sel	r2, r4, ip
    bab8:	fa83 f34c 	uadd8	r3, r3, ip
    babc:	faa2 f38c 	sel	r3, r2, ip
    bac0:	bb4b      	cbnz	r3, bb16 <strlen+0x96>
    bac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    bac6:	fa82 f24c 	uadd8	r2, r2, ip
    baca:	f100 0008 	add.w	r0, r0, #8
    bace:	faa4 f28c 	sel	r2, r4, ip
    bad2:	fa83 f34c 	uadd8	r3, r3, ip
    bad6:	faa2 f38c 	sel	r3, r2, ip
    bada:	b9e3      	cbnz	r3, bb16 <strlen+0x96>
    badc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    bae0:	fa82 f24c 	uadd8	r2, r2, ip
    bae4:	f100 0008 	add.w	r0, r0, #8
    bae8:	faa4 f28c 	sel	r2, r4, ip
    baec:	fa83 f34c 	uadd8	r3, r3, ip
    baf0:	faa2 f38c 	sel	r3, r2, ip
    baf4:	b97b      	cbnz	r3, bb16 <strlen+0x96>
    baf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    bafa:	f101 0120 	add.w	r1, r1, #32
    bafe:	fa82 f24c 	uadd8	r2, r2, ip
    bb02:	f100 0008 	add.w	r0, r0, #8
    bb06:	faa4 f28c 	sel	r2, r4, ip
    bb0a:	fa83 f34c 	uadd8	r3, r3, ip
    bb0e:	faa2 f38c 	sel	r3, r2, ip
    bb12:	2b00      	cmp	r3, #0
    bb14:	d0c6      	beq.n	baa4 <strlen+0x24>
    bb16:	2a00      	cmp	r2, #0
    bb18:	bf04      	itt	eq
    bb1a:	3004      	addeq	r0, #4
    bb1c:	461a      	moveq	r2, r3
    bb1e:	ba12      	rev	r2, r2
    bb20:	fab2 f282 	clz	r2, r2
    bb24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    bb28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    bb2c:	4770      	bx	lr
    bb2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    bb32:	f004 0503 	and.w	r5, r4, #3
    bb36:	f1c4 0000 	rsb	r0, r4, #0
    bb3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bb3e:	f014 0f04 	tst.w	r4, #4
    bb42:	f891 f040 	pld	[r1, #64]	; 0x40
    bb46:	fa0c f505 	lsl.w	r5, ip, r5
    bb4a:	ea62 0205 	orn	r2, r2, r5
    bb4e:	bf1c      	itt	ne
    bb50:	ea63 0305 	ornne	r3, r3, r5
    bb54:	4662      	movne	r2, ip
    bb56:	f04f 0400 	mov.w	r4, #0
    bb5a:	e7a9      	b.n	bab0 <strlen+0x30>
    bb5c:	0000      	movs	r0, r0
	...

0000bb60 <nan>:
    bb60:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb68 <nan+0x8>
    bb64:	4770      	bx	lr
    bb66:	bf00      	nop
    bb68:	00000000 	.word	0x00000000
    bb6c:	7ff80000 	.word	0x7ff80000

0000bb70 <nanf>:
    bb70:	ed9f 0a01 	vldr	s0, [pc, #4]	; bb78 <nanf+0x8>
    bb74:	4770      	bx	lr
    bb76:	bf00      	nop
    bb78:	7fc00000 	.word	0x7fc00000

0000bb7c <__register_exitproc>:
    bb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb80:	f8df a07c 	ldr.w	sl, [pc, #124]	; bc00 <__register_exitproc+0x84>
    bb84:	4606      	mov	r6, r0
    bb86:	f8da 0000 	ldr.w	r0, [sl]
    bb8a:	4698      	mov	r8, r3
    bb8c:	460f      	mov	r7, r1
    bb8e:	4691      	mov	r9, r2
    bb90:	f7ff fd94 	bl	b6bc <__retarget_lock_acquire_recursive>
    bb94:	4b18      	ldr	r3, [pc, #96]	; (bbf8 <__register_exitproc+0x7c>)
    bb96:	681c      	ldr	r4, [r3, #0]
    bb98:	b324      	cbz	r4, bbe4 <__register_exitproc+0x68>
    bb9a:	6865      	ldr	r5, [r4, #4]
    bb9c:	2d1f      	cmp	r5, #31
    bb9e:	dc24      	bgt.n	bbea <__register_exitproc+0x6e>
    bba0:	b95e      	cbnz	r6, bbba <__register_exitproc+0x3e>
    bba2:	1c6b      	adds	r3, r5, #1
    bba4:	3502      	adds	r5, #2
    bba6:	f8da 0000 	ldr.w	r0, [sl]
    bbaa:	6063      	str	r3, [r4, #4]
    bbac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    bbb0:	f7ff fd86 	bl	b6c0 <__retarget_lock_release_recursive>
    bbb4:	2000      	movs	r0, #0
    bbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    bbbe:	2301      	movs	r3, #1
    bbc0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    bbc4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    bbc8:	40ab      	lsls	r3, r5
    bbca:	431a      	orrs	r2, r3
    bbcc:	2e02      	cmp	r6, #2
    bbce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    bbd2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    bbd6:	d1e4      	bne.n	bba2 <__register_exitproc+0x26>
    bbd8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    bbdc:	431a      	orrs	r2, r3
    bbde:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    bbe2:	e7de      	b.n	bba2 <__register_exitproc+0x26>
    bbe4:	4c05      	ldr	r4, [pc, #20]	; (bbfc <__register_exitproc+0x80>)
    bbe6:	601c      	str	r4, [r3, #0]
    bbe8:	e7d7      	b.n	bb9a <__register_exitproc+0x1e>
    bbea:	f8da 0000 	ldr.w	r0, [sl]
    bbee:	f7ff fd67 	bl	b6c0 <__retarget_lock_release_recursive>
    bbf2:	f04f 30ff 	mov.w	r0, #4294967295
    bbf6:	e7de      	b.n	bbb6 <__register_exitproc+0x3a>
    bbf8:	2001e270 	.word	0x2001e270
    bbfc:	2001e274 	.word	0x2001e274
    bc00:	20008764 	.word	0x20008764

0000bc04 <_malloc_trim_r>:
    bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc06:	4f24      	ldr	r7, [pc, #144]	; (bc98 <_malloc_trim_r+0x94>)
    bc08:	460c      	mov	r4, r1
    bc0a:	4606      	mov	r6, r0
    bc0c:	f7fd ff7a 	bl	9b04 <__malloc_lock>
    bc10:	68bb      	ldr	r3, [r7, #8]
    bc12:	685d      	ldr	r5, [r3, #4]
    bc14:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    bc18:	310f      	adds	r1, #15
    bc1a:	f025 0503 	bic.w	r5, r5, #3
    bc1e:	194b      	adds	r3, r1, r5
    bc20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    bc24:	f023 030f 	bic.w	r3, r3, #15
    bc28:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    bc2c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    bc30:	db07      	blt.n	bc42 <_malloc_trim_r+0x3e>
    bc32:	2100      	movs	r1, #0
    bc34:	4630      	mov	r0, r6
    bc36:	f7ff fceb 	bl	b610 <_sbrk_r>
    bc3a:	68bb      	ldr	r3, [r7, #8]
    bc3c:	442b      	add	r3, r5
    bc3e:	4298      	cmp	r0, r3
    bc40:	d004      	beq.n	bc4c <_malloc_trim_r+0x48>
    bc42:	4630      	mov	r0, r6
    bc44:	f7fd ff64 	bl	9b10 <__malloc_unlock>
    bc48:	2000      	movs	r0, #0
    bc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc4c:	4261      	negs	r1, r4
    bc4e:	4630      	mov	r0, r6
    bc50:	f7ff fcde 	bl	b610 <_sbrk_r>
    bc54:	3001      	adds	r0, #1
    bc56:	d00d      	beq.n	bc74 <_malloc_trim_r+0x70>
    bc58:	4a10      	ldr	r2, [pc, #64]	; (bc9c <_malloc_trim_r+0x98>)
    bc5a:	68bb      	ldr	r3, [r7, #8]
    bc5c:	1b2d      	subs	r5, r5, r4
    bc5e:	f045 0501 	orr.w	r5, r5, #1
    bc62:	605d      	str	r5, [r3, #4]
    bc64:	6813      	ldr	r3, [r2, #0]
    bc66:	4630      	mov	r0, r6
    bc68:	1b1b      	subs	r3, r3, r4
    bc6a:	6013      	str	r3, [r2, #0]
    bc6c:	f7fd ff50 	bl	9b10 <__malloc_unlock>
    bc70:	2001      	movs	r0, #1
    bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc74:	2100      	movs	r1, #0
    bc76:	4630      	mov	r0, r6
    bc78:	f7ff fcca 	bl	b610 <_sbrk_r>
    bc7c:	68ba      	ldr	r2, [r7, #8]
    bc7e:	1a83      	subs	r3, r0, r2
    bc80:	2b0f      	cmp	r3, #15
    bc82:	ddde      	ble.n	bc42 <_malloc_trim_r+0x3e>
    bc84:	f043 0301 	orr.w	r3, r3, #1
    bc88:	6053      	str	r3, [r2, #4]
    bc8a:	4b05      	ldr	r3, [pc, #20]	; (bca0 <_malloc_trim_r+0x9c>)
    bc8c:	4903      	ldr	r1, [pc, #12]	; (bc9c <_malloc_trim_r+0x98>)
    bc8e:	681b      	ldr	r3, [r3, #0]
    bc90:	1ac0      	subs	r0, r0, r3
    bc92:	6008      	str	r0, [r1, #0]
    bc94:	e7d5      	b.n	bc42 <_malloc_trim_r+0x3e>
    bc96:	bf00      	nop
    bc98:	200088dc 	.word	0x200088dc
    bc9c:	2001e410 	.word	0x2001e410
    bca0:	20008ce4 	.word	0x20008ce4

0000bca4 <_free_r>:
    bca4:	2900      	cmp	r1, #0
    bca6:	d061      	beq.n	bd6c <_free_r+0xc8>
    bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcaa:	460c      	mov	r4, r1
    bcac:	4606      	mov	r6, r0
    bcae:	f7fd ff29 	bl	9b04 <__malloc_lock>
    bcb2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    bcb6:	4f7b      	ldr	r7, [pc, #492]	; (bea4 <_free_r+0x200>)
    bcb8:	f1a4 0508 	sub.w	r5, r4, #8
    bcbc:	f022 0101 	bic.w	r1, r2, #1
    bcc0:	eb05 0c01 	add.w	ip, r5, r1
    bcc4:	68b8      	ldr	r0, [r7, #8]
    bcc6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    bcca:	4560      	cmp	r0, ip
    bccc:	f023 0303 	bic.w	r3, r3, #3
    bcd0:	f000 808b 	beq.w	bdea <_free_r+0x146>
    bcd4:	07d2      	lsls	r2, r2, #31
    bcd6:	f8cc 3004 	str.w	r3, [ip, #4]
    bcda:	d432      	bmi.n	bd42 <_free_r+0x9e>
    bcdc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    bce0:	1aad      	subs	r5, r5, r2
    bce2:	4411      	add	r1, r2
    bce4:	68aa      	ldr	r2, [r5, #8]
    bce6:	f107 0008 	add.w	r0, r7, #8
    bcea:	4282      	cmp	r2, r0
    bcec:	d06a      	beq.n	bdc4 <_free_r+0x120>
    bcee:	eb0c 0403 	add.w	r4, ip, r3
    bcf2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    bcf6:	68ec      	ldr	r4, [r5, #12]
    bcf8:	60d4      	str	r4, [r2, #12]
    bcfa:	f01e 0f01 	tst.w	lr, #1
    bcfe:	60a2      	str	r2, [r4, #8]
    bd00:	f000 8097 	beq.w	be32 <_free_r+0x18e>
    bd04:	f041 0301 	orr.w	r3, r1, #1
    bd08:	606b      	str	r3, [r5, #4]
    bd0a:	f8cc 1000 	str.w	r1, [ip]
    bd0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    bd12:	d235      	bcs.n	bd80 <_free_r+0xdc>
    bd14:	6878      	ldr	r0, [r7, #4]
    bd16:	08cb      	lsrs	r3, r1, #3
    bd18:	2201      	movs	r2, #1
    bd1a:	0949      	lsrs	r1, r1, #5
    bd1c:	3301      	adds	r3, #1
    bd1e:	408a      	lsls	r2, r1
    bd20:	4302      	orrs	r2, r0
    bd22:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    bd26:	607a      	str	r2, [r7, #4]
    bd28:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    bd2c:	3a08      	subs	r2, #8
    bd2e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    bd32:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    bd36:	60cd      	str	r5, [r1, #12]
    bd38:	4630      	mov	r0, r6
    bd3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd3e:	f7fd bee7 	b.w	9b10 <__malloc_unlock>
    bd42:	eb0c 0203 	add.w	r2, ip, r3
    bd46:	6852      	ldr	r2, [r2, #4]
    bd48:	07d0      	lsls	r0, r2, #31
    bd4a:	d410      	bmi.n	bd6e <_free_r+0xca>
    bd4c:	4419      	add	r1, r3
    bd4e:	f107 0008 	add.w	r0, r7, #8
    bd52:	f8dc 3008 	ldr.w	r3, [ip, #8]
    bd56:	4283      	cmp	r3, r0
    bd58:	d073      	beq.n	be42 <_free_r+0x19e>
    bd5a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    bd5e:	60da      	str	r2, [r3, #12]
    bd60:	6093      	str	r3, [r2, #8]
    bd62:	f041 0301 	orr.w	r3, r1, #1
    bd66:	606b      	str	r3, [r5, #4]
    bd68:	5069      	str	r1, [r5, r1]
    bd6a:	e7d0      	b.n	bd0e <_free_r+0x6a>
    bd6c:	4770      	bx	lr
    bd6e:	f041 0301 	orr.w	r3, r1, #1
    bd72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    bd76:	f844 3c04 	str.w	r3, [r4, #-4]
    bd7a:	f8cc 1000 	str.w	r1, [ip]
    bd7e:	d3c9      	bcc.n	bd14 <_free_r+0x70>
    bd80:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    bd84:	ea4f 2351 	mov.w	r3, r1, lsr #9
    bd88:	d248      	bcs.n	be1c <_free_r+0x178>
    bd8a:	098b      	lsrs	r3, r1, #6
    bd8c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    bd90:	f103 0238 	add.w	r2, r3, #56	; 0x38
    bd94:	00c3      	lsls	r3, r0, #3
    bd96:	18f8      	adds	r0, r7, r3
    bd98:	58fb      	ldr	r3, [r7, r3]
    bd9a:	3808      	subs	r0, #8
    bd9c:	4298      	cmp	r0, r3
    bd9e:	d059      	beq.n	be54 <_free_r+0x1b0>
    bda0:	685a      	ldr	r2, [r3, #4]
    bda2:	f022 0203 	bic.w	r2, r2, #3
    bda6:	428a      	cmp	r2, r1
    bda8:	d902      	bls.n	bdb0 <_free_r+0x10c>
    bdaa:	689b      	ldr	r3, [r3, #8]
    bdac:	4298      	cmp	r0, r3
    bdae:	d1f7      	bne.n	bda0 <_free_r+0xfc>
    bdb0:	68d8      	ldr	r0, [r3, #12]
    bdb2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    bdb6:	6085      	str	r5, [r0, #8]
    bdb8:	60dd      	str	r5, [r3, #12]
    bdba:	4630      	mov	r0, r6
    bdbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bdc0:	f7fd bea6 	b.w	9b10 <__malloc_unlock>
    bdc4:	eb0c 0203 	add.w	r2, ip, r3
    bdc8:	6852      	ldr	r2, [r2, #4]
    bdca:	07d2      	lsls	r2, r2, #31
    bdcc:	d463      	bmi.n	be96 <_free_r+0x1f2>
    bdce:	440b      	add	r3, r1
    bdd0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    bdd4:	60ca      	str	r2, [r1, #12]
    bdd6:	6091      	str	r1, [r2, #8]
    bdd8:	f043 0201 	orr.w	r2, r3, #1
    bddc:	606a      	str	r2, [r5, #4]
    bdde:	4630      	mov	r0, r6
    bde0:	50eb      	str	r3, [r5, r3]
    bde2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bde6:	f7fd be93 	b.w	9b10 <__malloc_unlock>
    bdea:	440b      	add	r3, r1
    bdec:	07d1      	lsls	r1, r2, #31
    bdee:	d407      	bmi.n	be00 <_free_r+0x15c>
    bdf0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    bdf4:	1aad      	subs	r5, r5, r2
    bdf6:	4413      	add	r3, r2
    bdf8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    bdfc:	60ca      	str	r2, [r1, #12]
    bdfe:	6091      	str	r1, [r2, #8]
    be00:	f043 0201 	orr.w	r2, r3, #1
    be04:	606a      	str	r2, [r5, #4]
    be06:	4a28      	ldr	r2, [pc, #160]	; (bea8 <_free_r+0x204>)
    be08:	60bd      	str	r5, [r7, #8]
    be0a:	6812      	ldr	r2, [r2, #0]
    be0c:	429a      	cmp	r2, r3
    be0e:	d893      	bhi.n	bd38 <_free_r+0x94>
    be10:	4b26      	ldr	r3, [pc, #152]	; (beac <_free_r+0x208>)
    be12:	4630      	mov	r0, r6
    be14:	6819      	ldr	r1, [r3, #0]
    be16:	f7ff fef5 	bl	bc04 <_malloc_trim_r>
    be1a:	e78d      	b.n	bd38 <_free_r+0x94>
    be1c:	2b14      	cmp	r3, #20
    be1e:	d90a      	bls.n	be36 <_free_r+0x192>
    be20:	2b54      	cmp	r3, #84	; 0x54
    be22:	d81f      	bhi.n	be64 <_free_r+0x1c0>
    be24:	0b0b      	lsrs	r3, r1, #12
    be26:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    be2a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    be2e:	00c3      	lsls	r3, r0, #3
    be30:	e7b1      	b.n	bd96 <_free_r+0xf2>
    be32:	4419      	add	r1, r3
    be34:	e78d      	b.n	bd52 <_free_r+0xae>
    be36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    be3a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    be3e:	00c3      	lsls	r3, r0, #3
    be40:	e7a9      	b.n	bd96 <_free_r+0xf2>
    be42:	f041 0301 	orr.w	r3, r1, #1
    be46:	e9c7 5504 	strd	r5, r5, [r7, #16]
    be4a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    be4e:	606b      	str	r3, [r5, #4]
    be50:	5069      	str	r1, [r5, r1]
    be52:	e771      	b.n	bd38 <_free_r+0x94>
    be54:	6879      	ldr	r1, [r7, #4]
    be56:	1092      	asrs	r2, r2, #2
    be58:	2401      	movs	r4, #1
    be5a:	fa04 f202 	lsl.w	r2, r4, r2
    be5e:	430a      	orrs	r2, r1
    be60:	607a      	str	r2, [r7, #4]
    be62:	e7a6      	b.n	bdb2 <_free_r+0x10e>
    be64:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    be68:	d806      	bhi.n	be78 <_free_r+0x1d4>
    be6a:	0bcb      	lsrs	r3, r1, #15
    be6c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    be70:	f103 0277 	add.w	r2, r3, #119	; 0x77
    be74:	00c3      	lsls	r3, r0, #3
    be76:	e78e      	b.n	bd96 <_free_r+0xf2>
    be78:	f240 5254 	movw	r2, #1364	; 0x554
    be7c:	4293      	cmp	r3, r2
    be7e:	d806      	bhi.n	be8e <_free_r+0x1ea>
    be80:	0c8b      	lsrs	r3, r1, #18
    be82:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    be86:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    be8a:	00c3      	lsls	r3, r0, #3
    be8c:	e783      	b.n	bd96 <_free_r+0xf2>
    be8e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    be92:	227e      	movs	r2, #126	; 0x7e
    be94:	e77f      	b.n	bd96 <_free_r+0xf2>
    be96:	f041 0301 	orr.w	r3, r1, #1
    be9a:	606b      	str	r3, [r5, #4]
    be9c:	f8cc 1000 	str.w	r1, [ip]
    bea0:	e74a      	b.n	bd38 <_free_r+0x94>
    bea2:	bf00      	nop
    bea4:	200088dc 	.word	0x200088dc
    bea8:	20008ce8 	.word	0x20008ce8
    beac:	2001e440 	.word	0x2001e440

0000beb0 <rshift>:
    beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beb4:	6904      	ldr	r4, [r0, #16]
    beb6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    beba:	dd2f      	ble.n	bf1c <rshift+0x6c>
    bebc:	f100 0e14 	add.w	lr, r0, #20
    bec0:	114e      	asrs	r6, r1, #5
    bec2:	f011 0c1f 	ands.w	ip, r1, #31
    bec6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    beca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    bece:	d02b      	beq.n	bf28 <rshift+0x78>
    bed0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    bed4:	3304      	adds	r3, #4
    bed6:	429d      	cmp	r5, r3
    bed8:	fa21 f10c 	lsr.w	r1, r1, ip
    bedc:	f1cc 0820 	rsb	r8, ip, #32
    bee0:	d918      	bls.n	bf14 <rshift+0x64>
    bee2:	4677      	mov	r7, lr
    bee4:	681a      	ldr	r2, [r3, #0]
    bee6:	fa02 f208 	lsl.w	r2, r2, r8
    beea:	430a      	orrs	r2, r1
    beec:	f847 2b04 	str.w	r2, [r7], #4
    bef0:	f853 1b04 	ldr.w	r1, [r3], #4
    bef4:	429d      	cmp	r5, r3
    bef6:	fa21 f10c 	lsr.w	r1, r1, ip
    befa:	d8f3      	bhi.n	bee4 <rshift+0x34>
    befc:	1ba3      	subs	r3, r4, r6
    befe:	009b      	lsls	r3, r3, #2
    bf00:	3b05      	subs	r3, #5
    bf02:	089b      	lsrs	r3, r3, #2
    bf04:	3301      	adds	r3, #1
    bf06:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    bf0a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    bf0e:	b1c9      	cbz	r1, bf44 <rshift+0x94>
    bf10:	3404      	adds	r4, #4
    bf12:	e017      	b.n	bf44 <rshift+0x94>
    bf14:	6141      	str	r1, [r0, #20]
    bf16:	4674      	mov	r4, lr
    bf18:	2900      	cmp	r1, #0
    bf1a:	d1f9      	bne.n	bf10 <rshift+0x60>
    bf1c:	2300      	movs	r3, #0
    bf1e:	6103      	str	r3, [r0, #16]
    bf20:	2300      	movs	r3, #0
    bf22:	6143      	str	r3, [r0, #20]
    bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf28:	429d      	cmp	r5, r3
    bf2a:	bf88      	it	hi
    bf2c:	f100 0210 	addhi.w	r2, r0, #16
    bf30:	d9f4      	bls.n	bf1c <rshift+0x6c>
    bf32:	f853 1b04 	ldr.w	r1, [r3], #4
    bf36:	f842 1f04 	str.w	r1, [r2, #4]!
    bf3a:	429d      	cmp	r5, r3
    bf3c:	d8f9      	bhi.n	bf32 <rshift+0x82>
    bf3e:	1ba4      	subs	r4, r4, r6
    bf40:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    bf44:	eba4 030e 	sub.w	r3, r4, lr
    bf48:	109b      	asrs	r3, r3, #2
    bf4a:	4574      	cmp	r4, lr
    bf4c:	6103      	str	r3, [r0, #16]
    bf4e:	d0e7      	beq.n	bf20 <rshift+0x70>
    bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bf54 <__gethex>:
    bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf58:	ed2d 8b02 	vpush	{d8}
    bf5c:	680c      	ldr	r4, [r1, #0]
    bf5e:	468b      	mov	fp, r1
    bf60:	78a1      	ldrb	r1, [r4, #2]
    bf62:	b085      	sub	sp, #20
    bf64:	2930      	cmp	r1, #48	; 0x30
    bf66:	ee08 0a10 	vmov	s16, r0
    bf6a:	4692      	mov	sl, r2
    bf6c:	9302      	str	r3, [sp, #8]
    bf6e:	f040 81ce 	bne.w	c30e <__gethex+0x3ba>
    bf72:	f06f 0001 	mvn.w	r0, #1
    bf76:	1b00      	subs	r0, r0, r4
    bf78:	1ce2      	adds	r2, r4, #3
    bf7a:	1883      	adds	r3, r0, r2
    bf7c:	4614      	mov	r4, r2
    bf7e:	f812 1b01 	ldrb.w	r1, [r2], #1
    bf82:	2930      	cmp	r1, #48	; 0x30
    bf84:	d0f9      	beq.n	bf7a <__gethex+0x26>
    bf86:	f8df 8300 	ldr.w	r8, [pc, #768]	; c288 <__gethex+0x334>
    bf8a:	f818 2001 	ldrb.w	r2, [r8, r1]
    bf8e:	2a00      	cmp	r2, #0
    bf90:	f000 80e5 	beq.w	c15e <__gethex+0x20a>
    bf94:	7822      	ldrb	r2, [r4, #0]
    bf96:	2700      	movs	r7, #0
    bf98:	f818 2002 	ldrb.w	r2, [r8, r2]
    bf9c:	463d      	mov	r5, r7
    bf9e:	4626      	mov	r6, r4
    bfa0:	b12a      	cbz	r2, bfae <__gethex+0x5a>
    bfa2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    bfa6:	f818 2002 	ldrb.w	r2, [r8, r2]
    bfaa:	2a00      	cmp	r2, #0
    bfac:	d1f9      	bne.n	bfa2 <__gethex+0x4e>
    bfae:	49b5      	ldr	r1, [pc, #724]	; (c284 <__gethex+0x330>)
    bfb0:	9301      	str	r3, [sp, #4]
    bfb2:	2201      	movs	r2, #1
    bfb4:	4630      	mov	r0, r6
    bfb6:	f7ff fa6f 	bl	b498 <strncmp>
    bfba:	9b01      	ldr	r3, [sp, #4]
    bfbc:	4681      	mov	r9, r0
    bfbe:	2800      	cmp	r0, #0
    bfc0:	d04d      	beq.n	c05e <__gethex+0x10a>
    bfc2:	2d00      	cmp	r5, #0
    bfc4:	d14e      	bne.n	c064 <__gethex+0x110>
    bfc6:	7832      	ldrb	r2, [r6, #0]
    bfc8:	46a9      	mov	r9, r5
    bfca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    bfce:	2a50      	cmp	r2, #80	; 0x50
    bfd0:	4635      	mov	r5, r6
    bfd2:	d050      	beq.n	c076 <__gethex+0x122>
    bfd4:	f8cb 6000 	str.w	r6, [fp]
    bfd8:	2f00      	cmp	r7, #0
    bfda:	d169      	bne.n	c0b0 <__gethex+0x15c>
    bfdc:	1b2b      	subs	r3, r5, r4
    bfde:	3b01      	subs	r3, #1
    bfe0:	2b07      	cmp	r3, #7
    bfe2:	4639      	mov	r1, r7
    bfe4:	dd04      	ble.n	bff0 <__gethex+0x9c>
    bfe6:	105b      	asrs	r3, r3, #1
    bfe8:	2b07      	cmp	r3, #7
    bfea:	f101 0101 	add.w	r1, r1, #1
    bfee:	dcfa      	bgt.n	bfe6 <__gethex+0x92>
    bff0:	ee18 0a10 	vmov	r0, s16
    bff4:	f000 fb82 	bl	c6fc <_Balloc>
    bff8:	4683      	mov	fp, r0
    bffa:	2800      	cmp	r0, #0
    bffc:	f000 8266 	beq.w	c4cc <__gethex+0x578>
    c000:	f100 0614 	add.w	r6, r0, #20
    c004:	42ac      	cmp	r4, r5
    c006:	9601      	str	r6, [sp, #4]
    c008:	f080 81d2 	bcs.w	c3b0 <__gethex+0x45c>
    c00c:	2700      	movs	r7, #0
    c00e:	f8cd 900c 	str.w	r9, [sp, #12]
    c012:	499c      	ldr	r1, [pc, #624]	; (c284 <__gethex+0x330>)
    c014:	46a1      	mov	r9, r4
    c016:	463c      	mov	r4, r7
    c018:	e00c      	b.n	c034 <__gethex+0xe0>
    c01a:	2f20      	cmp	r7, #32
    c01c:	d019      	beq.n	c052 <__gethex+0xfe>
    c01e:	4638      	mov	r0, r7
    c020:	3704      	adds	r7, #4
    c022:	782a      	ldrb	r2, [r5, #0]
    c024:	f818 2002 	ldrb.w	r2, [r8, r2]
    c028:	f002 020f 	and.w	r2, r2, #15
    c02c:	4082      	lsls	r2, r0
    c02e:	4314      	orrs	r4, r2
    c030:	454d      	cmp	r5, r9
    c032:	d047      	beq.n	c0c4 <__gethex+0x170>
    c034:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c038:	2a2e      	cmp	r2, #46	; 0x2e
    c03a:	d1ee      	bne.n	c01a <__gethex+0xc6>
    c03c:	454d      	cmp	r5, r9
    c03e:	d3ec      	bcc.n	c01a <__gethex+0xc6>
    c040:	2201      	movs	r2, #1
    c042:	4628      	mov	r0, r5
    c044:	f7ff fa28 	bl	b498 <strncmp>
    c048:	498e      	ldr	r1, [pc, #568]	; (c284 <__gethex+0x330>)
    c04a:	2800      	cmp	r0, #0
    c04c:	d0f0      	beq.n	c030 <__gethex+0xdc>
    c04e:	2f20      	cmp	r7, #32
    c050:	d1e5      	bne.n	c01e <__gethex+0xca>
    c052:	2000      	movs	r0, #0
    c054:	f846 4b04 	str.w	r4, [r6], #4
    c058:	2704      	movs	r7, #4
    c05a:	4604      	mov	r4, r0
    c05c:	e7e1      	b.n	c022 <__gethex+0xce>
    c05e:	2d00      	cmp	r5, #0
    c060:	f000 8142 	beq.w	c2e8 <__gethex+0x394>
    c064:	7832      	ldrb	r2, [r6, #0]
    c066:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c06a:	1bad      	subs	r5, r5, r6
    c06c:	2a50      	cmp	r2, #80	; 0x50
    c06e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c072:	4635      	mov	r5, r6
    c074:	d1ae      	bne.n	bfd4 <__gethex+0x80>
    c076:	786a      	ldrb	r2, [r5, #1]
    c078:	2a2b      	cmp	r2, #43	; 0x2b
    c07a:	f000 8125 	beq.w	c2c8 <__gethex+0x374>
    c07e:	2a2d      	cmp	r2, #45	; 0x2d
    c080:	f000 80a5 	beq.w	c1ce <__gethex+0x27a>
    c084:	1c6e      	adds	r6, r5, #1
    c086:	2000      	movs	r0, #0
    c088:	f818 1002 	ldrb.w	r1, [r8, r2]
    c08c:	1e4a      	subs	r2, r1, #1
    c08e:	2a18      	cmp	r2, #24
    c090:	f200 809b 	bhi.w	c1ca <__gethex+0x276>
    c094:	7872      	ldrb	r2, [r6, #1]
    c096:	f818 2002 	ldrb.w	r2, [r8, r2]
    c09a:	3910      	subs	r1, #16
    c09c:	3601      	adds	r6, #1
    c09e:	2a00      	cmp	r2, #0
    c0a0:	d15a      	bne.n	c158 <__gethex+0x204>
    c0a2:	b100      	cbz	r0, c0a6 <__gethex+0x152>
    c0a4:	4249      	negs	r1, r1
    c0a6:	4489      	add	r9, r1
    c0a8:	f8cb 6000 	str.w	r6, [fp]
    c0ac:	2f00      	cmp	r7, #0
    c0ae:	d095      	beq.n	bfdc <__gethex+0x88>
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	bf14      	ite	ne
    c0b4:	2500      	movne	r5, #0
    c0b6:	2506      	moveq	r5, #6
    c0b8:	4628      	mov	r0, r5
    c0ba:	b005      	add	sp, #20
    c0bc:	ecbd 8b02 	vpop	{d8}
    c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c0c8:	4623      	mov	r3, r4
    c0ca:	f846 3b04 	str.w	r3, [r6], #4
    c0ce:	4618      	mov	r0, r3
    c0d0:	9b01      	ldr	r3, [sp, #4]
    c0d2:	1af6      	subs	r6, r6, r3
    c0d4:	10b6      	asrs	r6, r6, #2
    c0d6:	f8cb 6010 	str.w	r6, [fp, #16]
    c0da:	f000 fbe9 	bl	c8b0 <__hi0bits>
    c0de:	0176      	lsls	r6, r6, #5
    c0e0:	f8da 4000 	ldr.w	r4, [sl]
    c0e4:	1a30      	subs	r0, r6, r0
    c0e6:	42a0      	cmp	r0, r4
    c0e8:	dc75      	bgt.n	c1d6 <__gethex+0x282>
    c0ea:	f2c0 80ef 	blt.w	c2cc <__gethex+0x378>
    c0ee:	2700      	movs	r7, #0
    c0f0:	f8da 3008 	ldr.w	r3, [sl, #8]
    c0f4:	454b      	cmp	r3, r9
    c0f6:	f2c0 8151 	blt.w	c39c <__gethex+0x448>
    c0fa:	f8da 3004 	ldr.w	r3, [sl, #4]
    c0fe:	454b      	cmp	r3, r9
    c100:	dd4a      	ble.n	c198 <__gethex+0x244>
    c102:	eba3 0909 	sub.w	r9, r3, r9
    c106:	454c      	cmp	r4, r9
    c108:	f300 8082 	bgt.w	c210 <__gethex+0x2bc>
    c10c:	f8da 200c 	ldr.w	r2, [sl, #12]
    c110:	2a02      	cmp	r2, #2
    c112:	f000 8165 	beq.w	c3e0 <__gethex+0x48c>
    c116:	2a03      	cmp	r2, #3
    c118:	f000 8181 	beq.w	c41e <__gethex+0x4ca>
    c11c:	2a01      	cmp	r2, #1
    c11e:	f000 816f 	beq.w	c400 <__gethex+0x4ac>
    c122:	ee18 0a10 	vmov	r0, s16
    c126:	4659      	mov	r1, fp
    c128:	f000 fb0e 	bl	c748 <_Bfree>
    c12c:	2550      	movs	r5, #80	; 0x50
    c12e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c130:	2300      	movs	r3, #0
    c132:	4628      	mov	r0, r5
    c134:	6013      	str	r3, [r2, #0]
    c136:	b005      	add	sp, #20
    c138:	ecbd 8b02 	vpop	{d8}
    c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c140:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c144:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c148:	f1a2 0110 	sub.w	r1, r2, #16
    c14c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c150:	f818 2002 	ldrb.w	r2, [r8, r2]
    c154:	2a00      	cmp	r2, #0
    c156:	d0a4      	beq.n	c0a2 <__gethex+0x14e>
    c158:	2a19      	cmp	r2, #25
    c15a:	ddf1      	ble.n	c140 <__gethex+0x1ec>
    c15c:	e7a1      	b.n	c0a2 <__gethex+0x14e>
    c15e:	4949      	ldr	r1, [pc, #292]	; (c284 <__gethex+0x330>)
    c160:	9301      	str	r3, [sp, #4]
    c162:	2201      	movs	r2, #1
    c164:	4620      	mov	r0, r4
    c166:	f7ff f997 	bl	b498 <strncmp>
    c16a:	9b01      	ldr	r3, [sp, #4]
    c16c:	2800      	cmp	r0, #0
    c16e:	d16d      	bne.n	c24c <__gethex+0x2f8>
    c170:	7861      	ldrb	r1, [r4, #1]
    c172:	f818 2001 	ldrb.w	r2, [r8, r1]
    c176:	1c65      	adds	r5, r4, #1
    c178:	2a00      	cmp	r2, #0
    c17a:	d069      	beq.n	c250 <__gethex+0x2fc>
    c17c:	2930      	cmp	r1, #48	; 0x30
    c17e:	462c      	mov	r4, r5
    c180:	d105      	bne.n	c18e <__gethex+0x23a>
    c182:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c186:	2b30      	cmp	r3, #48	; 0x30
    c188:	d0fb      	beq.n	c182 <__gethex+0x22e>
    c18a:	f818 2003 	ldrb.w	r2, [r8, r3]
    c18e:	fab2 f782 	clz	r7, r2
    c192:	097f      	lsrs	r7, r7, #5
    c194:	2301      	movs	r3, #1
    c196:	e702      	b.n	bf9e <__gethex+0x4a>
    c198:	2501      	movs	r5, #1
    c19a:	b157      	cbz	r7, c1b2 <__gethex+0x25e>
    c19c:	f8da 300c 	ldr.w	r3, [sl, #12]
    c1a0:	2b02      	cmp	r3, #2
    c1a2:	d05d      	beq.n	c260 <__gethex+0x30c>
    c1a4:	2b03      	cmp	r3, #3
    c1a6:	d05f      	beq.n	c268 <__gethex+0x314>
    c1a8:	2b01      	cmp	r3, #1
    c1aa:	f000 8084 	beq.w	c2b6 <__gethex+0x362>
    c1ae:	f045 0510 	orr.w	r5, r5, #16
    c1b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c1b4:	f8c3 b000 	str.w	fp, [r3]
    c1b8:	9b02      	ldr	r3, [sp, #8]
    c1ba:	4628      	mov	r0, r5
    c1bc:	f8c3 9000 	str.w	r9, [r3]
    c1c0:	b005      	add	sp, #20
    c1c2:	ecbd 8b02 	vpop	{d8}
    c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1ca:	462e      	mov	r6, r5
    c1cc:	e702      	b.n	bfd4 <__gethex+0x80>
    c1ce:	2001      	movs	r0, #1
    c1d0:	78aa      	ldrb	r2, [r5, #2]
    c1d2:	1cae      	adds	r6, r5, #2
    c1d4:	e758      	b.n	c088 <__gethex+0x134>
    c1d6:	1b06      	subs	r6, r0, r4
    c1d8:	4631      	mov	r1, r6
    c1da:	4658      	mov	r0, fp
    c1dc:	f000 ff96 	bl	d10c <__any_on>
    c1e0:	4607      	mov	r7, r0
    c1e2:	b178      	cbz	r0, c204 <__gethex+0x2b0>
    c1e4:	1e72      	subs	r2, r6, #1
    c1e6:	1153      	asrs	r3, r2, #5
    c1e8:	9901      	ldr	r1, [sp, #4]
    c1ea:	2701      	movs	r7, #1
    c1ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c1f0:	f002 031f 	and.w	r3, r2, #31
    c1f4:	fa07 f303 	lsl.w	r3, r7, r3
    c1f8:	420b      	tst	r3, r1
    c1fa:	d003      	beq.n	c204 <__gethex+0x2b0>
    c1fc:	42ba      	cmp	r2, r7
    c1fe:	f300 80e2 	bgt.w	c3c6 <__gethex+0x472>
    c202:	2702      	movs	r7, #2
    c204:	4631      	mov	r1, r6
    c206:	4658      	mov	r0, fp
    c208:	44b1      	add	r9, r6
    c20a:	f7ff fe51 	bl	beb0 <rshift>
    c20e:	e76f      	b.n	c0f0 <__gethex+0x19c>
    c210:	f109 35ff 	add.w	r5, r9, #4294967295
    c214:	2f00      	cmp	r7, #0
    c216:	f040 80ce 	bne.w	c3b6 <__gethex+0x462>
    c21a:	2d00      	cmp	r5, #0
    c21c:	f040 80cd 	bne.w	c3ba <__gethex+0x466>
    c220:	116b      	asrs	r3, r5, #5
    c222:	9a01      	ldr	r2, [sp, #4]
    c224:	f005 051f 	and.w	r5, r5, #31
    c228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c22c:	2301      	movs	r3, #1
    c22e:	40ab      	lsls	r3, r5
    c230:	4213      	tst	r3, r2
    c232:	4649      	mov	r1, r9
    c234:	4658      	mov	r0, fp
    c236:	bf18      	it	ne
    c238:	f047 0702 	orrne.w	r7, r7, #2
    c23c:	eba4 0409 	sub.w	r4, r4, r9
    c240:	f7ff fe36 	bl	beb0 <rshift>
    c244:	2502      	movs	r5, #2
    c246:	f8da 9004 	ldr.w	r9, [sl, #4]
    c24a:	e7a6      	b.n	c19a <__gethex+0x246>
    c24c:	7821      	ldrb	r1, [r4, #0]
    c24e:	4625      	mov	r5, r4
    c250:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c254:	2950      	cmp	r1, #80	; 0x50
    c256:	f000 80bf 	beq.w	c3d8 <__gethex+0x484>
    c25a:	f8cb 5000 	str.w	r5, [fp]
    c25e:	e727      	b.n	c0b0 <__gethex+0x15c>
    c260:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c262:	f1c3 0301 	rsb	r3, r3, #1
    c266:	9311      	str	r3, [sp, #68]	; 0x44
    c268:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c26a:	2b00      	cmp	r3, #0
    c26c:	d09f      	beq.n	c1ae <__gethex+0x25a>
    c26e:	f8db 7010 	ldr.w	r7, [fp, #16]
    c272:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c276:	00ba      	lsls	r2, r7, #2
    c278:	4643      	mov	r3, r8
    c27a:	9201      	str	r2, [sp, #4]
    c27c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c280:	2100      	movs	r1, #0
    c282:	e007      	b.n	c294 <__gethex+0x340>
    c284:	20007eb8 	.word	0x20007eb8
    c288:	20000ac4 	.word	0x20000ac4
    c28c:	4298      	cmp	r0, r3
    c28e:	f843 1c04 	str.w	r1, [r3, #-4]
    c292:	d93f      	bls.n	c314 <__gethex+0x3c0>
    c294:	461e      	mov	r6, r3
    c296:	f853 2b04 	ldr.w	r2, [r3], #4
    c29a:	f1b2 3fff 	cmp.w	r2, #4294967295
    c29e:	d0f5      	beq.n	c28c <__gethex+0x338>
    c2a0:	3201      	adds	r2, #1
    c2a2:	2d02      	cmp	r5, #2
    c2a4:	6032      	str	r2, [r6, #0]
    c2a6:	f000 80bf 	beq.w	c428 <__gethex+0x4d4>
    c2aa:	f014 041f 	ands.w	r4, r4, #31
    c2ae:	f040 80e7 	bne.w	c480 <__gethex+0x52c>
    c2b2:	2521      	movs	r5, #33	; 0x21
    c2b4:	e77d      	b.n	c1b2 <__gethex+0x25e>
    c2b6:	07ba      	lsls	r2, r7, #30
    c2b8:	f57f af79 	bpl.w	c1ae <__gethex+0x25a>
    c2bc:	9b01      	ldr	r3, [sp, #4]
    c2be:	681b      	ldr	r3, [r3, #0]
    c2c0:	431f      	orrs	r7, r3
    c2c2:	07fb      	lsls	r3, r7, #31
    c2c4:	d4d3      	bmi.n	c26e <__gethex+0x31a>
    c2c6:	e772      	b.n	c1ae <__gethex+0x25a>
    c2c8:	2000      	movs	r0, #0
    c2ca:	e781      	b.n	c1d0 <__gethex+0x27c>
    c2cc:	1a22      	subs	r2, r4, r0
    c2ce:	4659      	mov	r1, fp
    c2d0:	ee18 0a10 	vmov	r0, s16
    c2d4:	eba9 0902 	sub.w	r9, r9, r2
    c2d8:	f000 fc76 	bl	cbc8 <__lshift>
    c2dc:	f100 0314 	add.w	r3, r0, #20
    c2e0:	4683      	mov	fp, r0
    c2e2:	9301      	str	r3, [sp, #4]
    c2e4:	2700      	movs	r7, #0
    c2e6:	e703      	b.n	c0f0 <__gethex+0x19c>
    c2e8:	7872      	ldrb	r2, [r6, #1]
    c2ea:	f818 0002 	ldrb.w	r0, [r8, r2]
    c2ee:	1c71      	adds	r1, r6, #1
    c2f0:	2800      	cmp	r0, #0
    c2f2:	f000 80a0 	beq.w	c436 <__gethex+0x4e2>
    c2f6:	460d      	mov	r5, r1
    c2f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    c2fc:	f818 0002 	ldrb.w	r0, [r8, r2]
    c300:	2800      	cmp	r0, #0
    c302:	d1f8      	bne.n	c2f6 <__gethex+0x3a2>
    c304:	1b75      	subs	r5, r6, r5
    c306:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c30a:	460e      	mov	r6, r1
    c30c:	e65d      	b.n	bfca <__gethex+0x76>
    c30e:	3402      	adds	r4, #2
    c310:	2300      	movs	r3, #0
    c312:	e638      	b.n	bf86 <__gethex+0x32>
    c314:	f8db 3008 	ldr.w	r3, [fp, #8]
    c318:	429f      	cmp	r7, r3
    c31a:	f280 808e 	bge.w	c43a <__gethex+0x4e6>
    c31e:	463b      	mov	r3, r7
    c320:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    c324:	2101      	movs	r1, #1
    c326:	3301      	adds	r3, #1
    c328:	2d02      	cmp	r5, #2
    c32a:	f8cb 3010 	str.w	r3, [fp, #16]
    c32e:	6151      	str	r1, [r2, #20]
    c330:	d07a      	beq.n	c428 <__gethex+0x4d4>
    c332:	429f      	cmp	r7, r3
    c334:	dab9      	bge.n	c2aa <__gethex+0x356>
    c336:	2b00      	cmp	r3, #0
    c338:	f340 809b 	ble.w	c472 <__gethex+0x51e>
    c33c:	f8db 2014 	ldr.w	r2, [fp, #20]
    c340:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c344:	f10b 0018 	add.w	r0, fp, #24
    c348:	4283      	cmp	r3, r0
    c34a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c34e:	f240 80b1 	bls.w	c4b4 <__gethex+0x560>
    c352:	4644      	mov	r4, r8
    c354:	6801      	ldr	r1, [r0, #0]
    c356:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c35a:	f844 2b04 	str.w	r2, [r4], #4
    c35e:	f850 2b04 	ldr.w	r2, [r0], #4
    c362:	4283      	cmp	r3, r0
    c364:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c368:	d8f4      	bhi.n	c354 <__gethex+0x400>
    c36a:	eba3 030b 	sub.w	r3, r3, fp
    c36e:	3b19      	subs	r3, #25
    c370:	089b      	lsrs	r3, r3, #2
    c372:	3301      	adds	r3, #1
    c374:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    c378:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c37c:	2a00      	cmp	r2, #0
    c37e:	f040 809d 	bne.w	c4bc <__gethex+0x568>
    c382:	eba3 0208 	sub.w	r2, r3, r8
    c386:	1092      	asrs	r2, r2, #2
    c388:	4543      	cmp	r3, r8
    c38a:	f8cb 2010 	str.w	r2, [fp, #16]
    c38e:	d073      	beq.n	c478 <__gethex+0x524>
    c390:	f8da 3008 	ldr.w	r3, [sl, #8]
    c394:	f109 0901 	add.w	r9, r9, #1
    c398:	454b      	cmp	r3, r9
    c39a:	da8a      	bge.n	c2b2 <__gethex+0x35e>
    c39c:	ee18 0a10 	vmov	r0, s16
    c3a0:	4659      	mov	r1, fp
    c3a2:	f000 f9d1 	bl	c748 <_Bfree>
    c3a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3a8:	2300      	movs	r3, #0
    c3aa:	6013      	str	r3, [r2, #0]
    c3ac:	25a3      	movs	r5, #163	; 0xa3
    c3ae:	e683      	b.n	c0b8 <__gethex+0x164>
    c3b0:	9e01      	ldr	r6, [sp, #4]
    c3b2:	2300      	movs	r3, #0
    c3b4:	e689      	b.n	c0ca <__gethex+0x176>
    c3b6:	2701      	movs	r7, #1
    c3b8:	e732      	b.n	c220 <__gethex+0x2cc>
    c3ba:	4629      	mov	r1, r5
    c3bc:	4658      	mov	r0, fp
    c3be:	f000 fea5 	bl	d10c <__any_on>
    c3c2:	4607      	mov	r7, r0
    c3c4:	e72c      	b.n	c220 <__gethex+0x2cc>
    c3c6:	1eb1      	subs	r1, r6, #2
    c3c8:	4658      	mov	r0, fp
    c3ca:	f000 fe9f 	bl	d10c <__any_on>
    c3ce:	2800      	cmp	r0, #0
    c3d0:	f43f af17 	beq.w	c202 <__gethex+0x2ae>
    c3d4:	2703      	movs	r7, #3
    c3d6:	e715      	b.n	c204 <__gethex+0x2b0>
    c3d8:	f04f 0900 	mov.w	r9, #0
    c3dc:	2701      	movs	r7, #1
    c3de:	e64a      	b.n	c076 <__gethex+0x122>
    c3e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c3e2:	2a00      	cmp	r2, #0
    c3e4:	f47f ae9d 	bne.w	c122 <__gethex+0x1ce>
    c3e8:	9902      	ldr	r1, [sp, #8]
    c3ea:	600b      	str	r3, [r1, #0]
    c3ec:	9b01      	ldr	r3, [sp, #4]
    c3ee:	2201      	movs	r2, #1
    c3f0:	f8cb 2010 	str.w	r2, [fp, #16]
    c3f4:	601a      	str	r2, [r3, #0]
    c3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3f8:	2562      	movs	r5, #98	; 0x62
    c3fa:	f8c3 b000 	str.w	fp, [r3]
    c3fe:	e65b      	b.n	c0b8 <__gethex+0x164>
    c400:	454c      	cmp	r4, r9
    c402:	f47f ae8e 	bne.w	c122 <__gethex+0x1ce>
    c406:	2c01      	cmp	r4, #1
    c408:	d0ee      	beq.n	c3e8 <__gethex+0x494>
    c40a:	1e61      	subs	r1, r4, #1
    c40c:	4658      	mov	r0, fp
    c40e:	f000 fe7d 	bl	d10c <__any_on>
    c412:	2800      	cmp	r0, #0
    c414:	f43f ae85 	beq.w	c122 <__gethex+0x1ce>
    c418:	f8da 3004 	ldr.w	r3, [sl, #4]
    c41c:	e7e4      	b.n	c3e8 <__gethex+0x494>
    c41e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c420:	2a00      	cmp	r2, #0
    c422:	f43f ae7e 	beq.w	c122 <__gethex+0x1ce>
    c426:	e7df      	b.n	c3e8 <__gethex+0x494>
    c428:	f8da 3000 	ldr.w	r3, [sl]
    c42c:	3b01      	subs	r3, #1
    c42e:	42a3      	cmp	r3, r4
    c430:	d034      	beq.n	c49c <__gethex+0x548>
    c432:	2522      	movs	r5, #34	; 0x22
    c434:	e6bd      	b.n	c1b2 <__gethex+0x25e>
    c436:	460e      	mov	r6, r1
    c438:	e5c7      	b.n	bfca <__gethex+0x76>
    c43a:	f8db 1004 	ldr.w	r1, [fp, #4]
    c43e:	ee18 0a10 	vmov	r0, s16
    c442:	3101      	adds	r1, #1
    c444:	f000 f95a 	bl	c6fc <_Balloc>
    c448:	4606      	mov	r6, r0
    c44a:	b3c8      	cbz	r0, c4c0 <__gethex+0x56c>
    c44c:	f8db 3010 	ldr.w	r3, [fp, #16]
    c450:	3302      	adds	r3, #2
    c452:	009a      	lsls	r2, r3, #2
    c454:	f10b 010c 	add.w	r1, fp, #12
    c458:	300c      	adds	r0, #12
    c45a:	f7fb faff 	bl	7a5c <memcpy>
    c45e:	4659      	mov	r1, fp
    c460:	ee18 0a10 	vmov	r0, s16
    c464:	f000 f970 	bl	c748 <_Bfree>
    c468:	f106 0814 	add.w	r8, r6, #20
    c46c:	6933      	ldr	r3, [r6, #16]
    c46e:	46b3      	mov	fp, r6
    c470:	e756      	b.n	c320 <__gethex+0x3cc>
    c472:	2300      	movs	r3, #0
    c474:	f8cb 3010 	str.w	r3, [fp, #16]
    c478:	2300      	movs	r3, #0
    c47a:	f8cb 3014 	str.w	r3, [fp, #20]
    c47e:	e787      	b.n	c390 <__gethex+0x43c>
    c480:	9b01      	ldr	r3, [sp, #4]
    c482:	4443      	add	r3, r8
    c484:	f1c4 0420 	rsb	r4, r4, #32
    c488:	f853 0c04 	ldr.w	r0, [r3, #-4]
    c48c:	f000 fa10 	bl	c8b0 <__hi0bits>
    c490:	42a0      	cmp	r0, r4
    c492:	f6bf af0e 	bge.w	c2b2 <__gethex+0x35e>
    c496:	f8db 3010 	ldr.w	r3, [fp, #16]
    c49a:	e74c      	b.n	c336 <__gethex+0x3e2>
    c49c:	1163      	asrs	r3, r4, #5
    c49e:	f004 041f 	and.w	r4, r4, #31
    c4a2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    c4a6:	2301      	movs	r3, #1
    c4a8:	40a3      	lsls	r3, r4
    c4aa:	4213      	tst	r3, r2
    c4ac:	bf0c      	ite	eq
    c4ae:	2522      	moveq	r5, #34	; 0x22
    c4b0:	2521      	movne	r5, #33	; 0x21
    c4b2:	e67e      	b.n	c1b2 <__gethex+0x25e>
    c4b4:	f8c8 2000 	str.w	r2, [r8]
    c4b8:	4643      	mov	r3, r8
    c4ba:	b16a      	cbz	r2, c4d8 <__gethex+0x584>
    c4bc:	3304      	adds	r3, #4
    c4be:	e760      	b.n	c382 <__gethex+0x42e>
    c4c0:	4b07      	ldr	r3, [pc, #28]	; (c4e0 <__gethex+0x58c>)
    c4c2:	4808      	ldr	r0, [pc, #32]	; (c4e4 <__gethex+0x590>)
    c4c4:	4632      	mov	r2, r6
    c4c6:	2184      	movs	r1, #132	; 0x84
    c4c8:	f004 fa0a 	bl	108e0 <__assert_func>
    c4cc:	4b04      	ldr	r3, [pc, #16]	; (c4e0 <__gethex+0x58c>)
    c4ce:	4805      	ldr	r0, [pc, #20]	; (c4e4 <__gethex+0x590>)
    c4d0:	465a      	mov	r2, fp
    c4d2:	21e4      	movs	r1, #228	; 0xe4
    c4d4:	f004 fa04 	bl	108e0 <__assert_func>
    c4d8:	f8cb 2010 	str.w	r2, [fp, #16]
    c4dc:	e7cc      	b.n	c478 <__gethex+0x524>
    c4de:	bf00      	nop
    c4e0:	20000a4c 	.word	0x20000a4c
    c4e4:	20000a60 	.word	0x20000a60

0000c4e8 <__match>:
    c4e8:	b410      	push	{r4}
    c4ea:	6804      	ldr	r4, [r0, #0]
    c4ec:	e009      	b.n	c502 <__match+0x1a>
    c4ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c4f2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    c4f6:	f1bc 0f19 	cmp.w	ip, #25
    c4fa:	bf98      	it	ls
    c4fc:	3320      	addls	r3, #32
    c4fe:	4293      	cmp	r3, r2
    c500:	d109      	bne.n	c516 <__match+0x2e>
    c502:	f811 2b01 	ldrb.w	r2, [r1], #1
    c506:	2a00      	cmp	r2, #0
    c508:	d1f1      	bne.n	c4ee <__match+0x6>
    c50a:	3401      	adds	r4, #1
    c50c:	6004      	str	r4, [r0, #0]
    c50e:	2001      	movs	r0, #1
    c510:	f85d 4b04 	ldr.w	r4, [sp], #4
    c514:	4770      	bx	lr
    c516:	2000      	movs	r0, #0
    c518:	f85d 4b04 	ldr.w	r4, [sp], #4
    c51c:	4770      	bx	lr
    c51e:	bf00      	nop

0000c520 <__hexnan>:
    c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c524:	6809      	ldr	r1, [r1, #0]
    c526:	b085      	sub	sp, #20
    c528:	114b      	asrs	r3, r1, #5
    c52a:	f011 011f 	ands.w	r1, r1, #31
    c52e:	9002      	str	r0, [sp, #8]
    c530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c534:	9103      	str	r1, [sp, #12]
    c536:	f040 808f 	bne.w	c658 <__hexnan+0x138>
    c53a:	1f1d      	subs	r5, r3, #4
    c53c:	9301      	str	r3, [sp, #4]
    c53e:	9b02      	ldr	r3, [sp, #8]
    c540:	9901      	ldr	r1, [sp, #4]
    c542:	681c      	ldr	r4, [r3, #0]
    c544:	2300      	movs	r3, #0
    c546:	f841 3c04 	str.w	r3, [r1, #-4]
    c54a:	7861      	ldrb	r1, [r4, #1]
    c54c:	3401      	adds	r4, #1
    c54e:	2900      	cmp	r1, #0
    c550:	f000 8098 	beq.w	c684 <__hexnan+0x164>
    c554:	f8df 9174 	ldr.w	r9, [pc, #372]	; c6cc <__hexnan+0x1ac>
    c558:	46a8      	mov	r8, r5
    c55a:	46ac      	mov	ip, r5
    c55c:	469a      	mov	sl, r3
    c55e:	461e      	mov	r6, r3
    c560:	e00e      	b.n	c580 <__hexnan+0x60>
    c562:	2920      	cmp	r1, #32
    c564:	f200 808c 	bhi.w	c680 <__hexnan+0x160>
    c568:	4556      	cmp	r6, sl
    c56a:	dd06      	ble.n	c57a <__hexnan+0x5a>
    c56c:	45c4      	cmp	ip, r8
    c56e:	d201      	bcs.n	c574 <__hexnan+0x54>
    c570:	2b07      	cmp	r3, #7
    c572:	dd5b      	ble.n	c62c <__hexnan+0x10c>
    c574:	4562      	cmp	r2, ip
    c576:	d351      	bcc.n	c61c <__hexnan+0xfc>
    c578:	2308      	movs	r3, #8
    c57a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    c57e:	b1a1      	cbz	r1, c5aa <__hexnan+0x8a>
    c580:	f819 0001 	ldrb.w	r0, [r9, r1]
    c584:	2800      	cmp	r0, #0
    c586:	d0ec      	beq.n	c562 <__hexnan+0x42>
    c588:	3301      	adds	r3, #1
    c58a:	2b08      	cmp	r3, #8
    c58c:	f106 0601 	add.w	r6, r6, #1
    c590:	dc3a      	bgt.n	c608 <__hexnan+0xe8>
    c592:	f8dc 1000 	ldr.w	r1, [ip]
    c596:	0109      	lsls	r1, r1, #4
    c598:	f000 000f 	and.w	r0, r0, #15
    c59c:	4308      	orrs	r0, r1
    c59e:	f8cc 0000 	str.w	r0, [ip]
    c5a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    c5a6:	2900      	cmp	r1, #0
    c5a8:	d1ea      	bne.n	c580 <__hexnan+0x60>
    c5aa:	2e00      	cmp	r6, #0
    c5ac:	d06a      	beq.n	c684 <__hexnan+0x164>
    c5ae:	45c4      	cmp	ip, r8
    c5b0:	d201      	bcs.n	c5b6 <__hexnan+0x96>
    c5b2:	2b07      	cmp	r3, #7
    c5b4:	dd74      	ble.n	c6a0 <__hexnan+0x180>
    c5b6:	4562      	cmp	r2, ip
    c5b8:	d252      	bcs.n	c660 <__hexnan+0x140>
    c5ba:	1f11      	subs	r1, r2, #4
    c5bc:	4663      	mov	r3, ip
    c5be:	f853 0b04 	ldr.w	r0, [r3], #4
    c5c2:	f841 0f04 	str.w	r0, [r1, #4]!
    c5c6:	42ab      	cmp	r3, r5
    c5c8:	d9f9      	bls.n	c5be <__hexnan+0x9e>
    c5ca:	eba5 030c 	sub.w	r3, r5, ip
    c5ce:	f023 0303 	bic.w	r3, r3, #3
    c5d2:	1c69      	adds	r1, r5, #1
    c5d4:	3304      	adds	r3, #4
    c5d6:	f10c 0c01 	add.w	ip, ip, #1
    c5da:	4561      	cmp	r1, ip
    c5dc:	bf38      	it	cc
    c5de:	2304      	movcc	r3, #4
    c5e0:	4413      	add	r3, r2
    c5e2:	2100      	movs	r1, #0
    c5e4:	f843 1b04 	str.w	r1, [r3], #4
    c5e8:	42ab      	cmp	r3, r5
    c5ea:	d9fb      	bls.n	c5e4 <__hexnan+0xc4>
    c5ec:	9b01      	ldr	r3, [sp, #4]
    c5ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c5f2:	b92b      	cbnz	r3, c600 <__hexnan+0xe0>
    c5f4:	42aa      	cmp	r2, r5
    c5f6:	d049      	beq.n	c68c <__hexnan+0x16c>
    c5f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d0f9      	beq.n	c5f4 <__hexnan+0xd4>
    c600:	2005      	movs	r0, #5
    c602:	b005      	add	sp, #20
    c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c608:	4562      	cmp	r2, ip
    c60a:	d2b6      	bcs.n	c57a <__hexnan+0x5a>
    c60c:	2300      	movs	r3, #0
    c60e:	f84c 3c04 	str.w	r3, [ip, #-4]
    c612:	4619      	mov	r1, r3
    c614:	f1ac 0c04 	sub.w	ip, ip, #4
    c618:	2301      	movs	r3, #1
    c61a:	e7bd      	b.n	c598 <__hexnan+0x78>
    c61c:	2300      	movs	r3, #0
    c61e:	f1ac 0804 	sub.w	r8, ip, #4
    c622:	f84c 3c04 	str.w	r3, [ip, #-4]
    c626:	46b2      	mov	sl, r6
    c628:	46c4      	mov	ip, r8
    c62a:	e7a6      	b.n	c57a <__hexnan+0x5a>
    c62c:	f1c3 0108 	rsb	r1, r3, #8
    c630:	f8dc 3000 	ldr.w	r3, [ip]
    c634:	0089      	lsls	r1, r1, #2
    c636:	f1c1 0e20 	rsb	lr, r1, #32
    c63a:	4660      	mov	r0, ip
    c63c:	469b      	mov	fp, r3
    c63e:	6847      	ldr	r7, [r0, #4]
    c640:	fa07 f30e 	lsl.w	r3, r7, lr
    c644:	ea43 030b 	orr.w	r3, r3, fp
    c648:	fa27 fb01 	lsr.w	fp, r7, r1
    c64c:	6003      	str	r3, [r0, #0]
    c64e:	f840 bf04 	str.w	fp, [r0, #4]!
    c652:	4540      	cmp	r0, r8
    c654:	d3f3      	bcc.n	c63e <__hexnan+0x11e>
    c656:	e78d      	b.n	c574 <__hexnan+0x54>
    c658:	1d19      	adds	r1, r3, #4
    c65a:	9101      	str	r1, [sp, #4]
    c65c:	461d      	mov	r5, r3
    c65e:	e76e      	b.n	c53e <__hexnan+0x1e>
    c660:	9b03      	ldr	r3, [sp, #12]
    c662:	2b00      	cmp	r3, #0
    c664:	d0c2      	beq.n	c5ec <__hexnan+0xcc>
    c666:	9b03      	ldr	r3, [sp, #12]
    c668:	9801      	ldr	r0, [sp, #4]
    c66a:	f1c3 0120 	rsb	r1, r3, #32
    c66e:	f04f 33ff 	mov.w	r3, #4294967295
    c672:	40cb      	lsrs	r3, r1
    c674:	f850 1c04 	ldr.w	r1, [r0, #-4]
    c678:	400b      	ands	r3, r1
    c67a:	f840 3c04 	str.w	r3, [r0, #-4]
    c67e:	e7b8      	b.n	c5f2 <__hexnan+0xd2>
    c680:	2929      	cmp	r1, #41	; 0x29
    c682:	d009      	beq.n	c698 <__hexnan+0x178>
    c684:	2004      	movs	r0, #4
    c686:	b005      	add	sp, #20
    c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c68c:	2301      	movs	r3, #1
    c68e:	2005      	movs	r0, #5
    c690:	602b      	str	r3, [r5, #0]
    c692:	b005      	add	sp, #20
    c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c698:	9902      	ldr	r1, [sp, #8]
    c69a:	3401      	adds	r4, #1
    c69c:	600c      	str	r4, [r1, #0]
    c69e:	e784      	b.n	c5aa <__hexnan+0x8a>
    c6a0:	f8dc 1000 	ldr.w	r1, [ip]
    c6a4:	f1c3 0308 	rsb	r3, r3, #8
    c6a8:	009b      	lsls	r3, r3, #2
    c6aa:	f1c3 0720 	rsb	r7, r3, #32
    c6ae:	4664      	mov	r4, ip
    c6b0:	4608      	mov	r0, r1
    c6b2:	6866      	ldr	r6, [r4, #4]
    c6b4:	fa06 f107 	lsl.w	r1, r6, r7
    c6b8:	4301      	orrs	r1, r0
    c6ba:	fa26 f003 	lsr.w	r0, r6, r3
    c6be:	6021      	str	r1, [r4, #0]
    c6c0:	f844 0f04 	str.w	r0, [r4, #4]!
    c6c4:	4544      	cmp	r4, r8
    c6c6:	d3f4      	bcc.n	c6b2 <__hexnan+0x192>
    c6c8:	e775      	b.n	c5b6 <__hexnan+0x96>
    c6ca:	bf00      	nop
    c6cc:	20000ac4 	.word	0x20000ac4

0000c6d0 <__ascii_mbtowc>:
    c6d0:	b082      	sub	sp, #8
    c6d2:	b149      	cbz	r1, c6e8 <__ascii_mbtowc+0x18>
    c6d4:	b15a      	cbz	r2, c6ee <__ascii_mbtowc+0x1e>
    c6d6:	b16b      	cbz	r3, c6f4 <__ascii_mbtowc+0x24>
    c6d8:	7813      	ldrb	r3, [r2, #0]
    c6da:	600b      	str	r3, [r1, #0]
    c6dc:	7812      	ldrb	r2, [r2, #0]
    c6de:	1e10      	subs	r0, r2, #0
    c6e0:	bf18      	it	ne
    c6e2:	2001      	movne	r0, #1
    c6e4:	b002      	add	sp, #8
    c6e6:	4770      	bx	lr
    c6e8:	a901      	add	r1, sp, #4
    c6ea:	2a00      	cmp	r2, #0
    c6ec:	d1f3      	bne.n	c6d6 <__ascii_mbtowc+0x6>
    c6ee:	4610      	mov	r0, r2
    c6f0:	b002      	add	sp, #8
    c6f2:	4770      	bx	lr
    c6f4:	f06f 0001 	mvn.w	r0, #1
    c6f8:	e7f4      	b.n	c6e4 <__ascii_mbtowc+0x14>
    c6fa:	bf00      	nop

0000c6fc <_Balloc>:
    c6fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c6fe:	b570      	push	{r4, r5, r6, lr}
    c700:	4605      	mov	r5, r0
    c702:	460c      	mov	r4, r1
    c704:	b14b      	cbz	r3, c71a <_Balloc+0x1e>
    c706:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c70a:	b180      	cbz	r0, c72e <_Balloc+0x32>
    c70c:	6802      	ldr	r2, [r0, #0]
    c70e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c712:	2300      	movs	r3, #0
    c714:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c718:	bd70      	pop	{r4, r5, r6, pc}
    c71a:	2221      	movs	r2, #33	; 0x21
    c71c:	2104      	movs	r1, #4
    c71e:	f004 f8ff 	bl	10920 <_calloc_r>
    c722:	4603      	mov	r3, r0
    c724:	6468      	str	r0, [r5, #68]	; 0x44
    c726:	2800      	cmp	r0, #0
    c728:	d1ed      	bne.n	c706 <_Balloc+0xa>
    c72a:	2000      	movs	r0, #0
    c72c:	bd70      	pop	{r4, r5, r6, pc}
    c72e:	2101      	movs	r1, #1
    c730:	fa01 f604 	lsl.w	r6, r1, r4
    c734:	1d72      	adds	r2, r6, #5
    c736:	0092      	lsls	r2, r2, #2
    c738:	4628      	mov	r0, r5
    c73a:	f004 f8f1 	bl	10920 <_calloc_r>
    c73e:	2800      	cmp	r0, #0
    c740:	d0f3      	beq.n	c72a <_Balloc+0x2e>
    c742:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c746:	e7e4      	b.n	c712 <_Balloc+0x16>

0000c748 <_Bfree>:
    c748:	b131      	cbz	r1, c758 <_Bfree+0x10>
    c74a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c74c:	684a      	ldr	r2, [r1, #4]
    c74e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c752:	6008      	str	r0, [r1, #0]
    c754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c758:	4770      	bx	lr
    c75a:	bf00      	nop

0000c75c <__multadd>:
    c75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c760:	690e      	ldr	r6, [r1, #16]
    c762:	4680      	mov	r8, r0
    c764:	460f      	mov	r7, r1
    c766:	461d      	mov	r5, r3
    c768:	f101 0e14 	add.w	lr, r1, #20
    c76c:	2000      	movs	r0, #0
    c76e:	f8de 1000 	ldr.w	r1, [lr]
    c772:	b28c      	uxth	r4, r1
    c774:	fb02 5304 	mla	r3, r2, r4, r5
    c778:	0c09      	lsrs	r1, r1, #16
    c77a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c77e:	fb02 cc01 	mla	ip, r2, r1, ip
    c782:	3001      	adds	r0, #1
    c784:	b29c      	uxth	r4, r3
    c786:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    c78a:	4286      	cmp	r6, r0
    c78c:	f84e 4b04 	str.w	r4, [lr], #4
    c790:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c794:	dceb      	bgt.n	c76e <__multadd+0x12>
    c796:	b13d      	cbz	r5, c7a8 <__multadd+0x4c>
    c798:	68bb      	ldr	r3, [r7, #8]
    c79a:	42b3      	cmp	r3, r6
    c79c:	dd07      	ble.n	c7ae <__multadd+0x52>
    c79e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c7a2:	3601      	adds	r6, #1
    c7a4:	615d      	str	r5, [r3, #20]
    c7a6:	613e      	str	r6, [r7, #16]
    c7a8:	4638      	mov	r0, r7
    c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7ae:	6879      	ldr	r1, [r7, #4]
    c7b0:	4640      	mov	r0, r8
    c7b2:	3101      	adds	r1, #1
    c7b4:	f7ff ffa2 	bl	c6fc <_Balloc>
    c7b8:	4604      	mov	r4, r0
    c7ba:	b1b0      	cbz	r0, c7ea <__multadd+0x8e>
    c7bc:	693a      	ldr	r2, [r7, #16]
    c7be:	3202      	adds	r2, #2
    c7c0:	f107 010c 	add.w	r1, r7, #12
    c7c4:	0092      	lsls	r2, r2, #2
    c7c6:	300c      	adds	r0, #12
    c7c8:	f7fb f948 	bl	7a5c <memcpy>
    c7cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c7d0:	687a      	ldr	r2, [r7, #4]
    c7d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c7d6:	6039      	str	r1, [r7, #0]
    c7d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    c7dc:	4627      	mov	r7, r4
    c7de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c7e2:	3601      	adds	r6, #1
    c7e4:	615d      	str	r5, [r3, #20]
    c7e6:	613e      	str	r6, [r7, #16]
    c7e8:	e7de      	b.n	c7a8 <__multadd+0x4c>
    c7ea:	4b03      	ldr	r3, [pc, #12]	; (c7f8 <__multadd+0x9c>)
    c7ec:	4803      	ldr	r0, [pc, #12]	; (c7fc <__multadd+0xa0>)
    c7ee:	4622      	mov	r2, r4
    c7f0:	21ba      	movs	r1, #186	; 0xba
    c7f2:	f004 f875 	bl	108e0 <__assert_func>
    c7f6:	bf00      	nop
    c7f8:	20000a4c 	.word	0x20000a4c
    c7fc:	20000bc4 	.word	0x20000bc4

0000c800 <__s2b>:
    c800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c804:	4617      	mov	r7, r2
    c806:	4a27      	ldr	r2, [pc, #156]	; (c8a4 <__s2b+0xa4>)
    c808:	461e      	mov	r6, r3
    c80a:	3308      	adds	r3, #8
    c80c:	460c      	mov	r4, r1
    c80e:	2e09      	cmp	r6, #9
    c810:	fb82 1203 	smull	r1, r2, r2, r3
    c814:	ea4f 73e3 	mov.w	r3, r3, asr #31
    c818:	4605      	mov	r5, r0
    c81a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    c81e:	dd39      	ble.n	c894 <__s2b+0x94>
    c820:	f04f 0c01 	mov.w	ip, #1
    c824:	2100      	movs	r1, #0
    c826:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    c82a:	4563      	cmp	r3, ip
    c82c:	f101 0101 	add.w	r1, r1, #1
    c830:	dcf9      	bgt.n	c826 <__s2b+0x26>
    c832:	4628      	mov	r0, r5
    c834:	f7ff ff62 	bl	c6fc <_Balloc>
    c838:	4601      	mov	r1, r0
    c83a:	b368      	cbz	r0, c898 <__s2b+0x98>
    c83c:	9b08      	ldr	r3, [sp, #32]
    c83e:	6143      	str	r3, [r0, #20]
    c840:	2f09      	cmp	r7, #9
    c842:	f04f 0301 	mov.w	r3, #1
    c846:	6103      	str	r3, [r0, #16]
    c848:	dc12      	bgt.n	c870 <__s2b+0x70>
    c84a:	340a      	adds	r4, #10
    c84c:	2709      	movs	r7, #9
    c84e:	42be      	cmp	r6, r7
    c850:	dd0b      	ble.n	c86a <__s2b+0x6a>
    c852:	1bf2      	subs	r2, r6, r7
    c854:	18a6      	adds	r6, r4, r2
    c856:	f814 3b01 	ldrb.w	r3, [r4], #1
    c85a:	220a      	movs	r2, #10
    c85c:	3b30      	subs	r3, #48	; 0x30
    c85e:	4628      	mov	r0, r5
    c860:	f7ff ff7c 	bl	c75c <__multadd>
    c864:	42a6      	cmp	r6, r4
    c866:	4601      	mov	r1, r0
    c868:	d1f5      	bne.n	c856 <__s2b+0x56>
    c86a:	4608      	mov	r0, r1
    c86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c870:	f104 0909 	add.w	r9, r4, #9
    c874:	46c8      	mov	r8, r9
    c876:	443c      	add	r4, r7
    c878:	f818 3b01 	ldrb.w	r3, [r8], #1
    c87c:	220a      	movs	r2, #10
    c87e:	3b30      	subs	r3, #48	; 0x30
    c880:	4628      	mov	r0, r5
    c882:	f7ff ff6b 	bl	c75c <__multadd>
    c886:	45a0      	cmp	r8, r4
    c888:	4601      	mov	r1, r0
    c88a:	d1f5      	bne.n	c878 <__s2b+0x78>
    c88c:	f1a7 0408 	sub.w	r4, r7, #8
    c890:	444c      	add	r4, r9
    c892:	e7dc      	b.n	c84e <__s2b+0x4e>
    c894:	2100      	movs	r1, #0
    c896:	e7cc      	b.n	c832 <__s2b+0x32>
    c898:	460a      	mov	r2, r1
    c89a:	4b03      	ldr	r3, [pc, #12]	; (c8a8 <__s2b+0xa8>)
    c89c:	4803      	ldr	r0, [pc, #12]	; (c8ac <__s2b+0xac>)
    c89e:	21d3      	movs	r1, #211	; 0xd3
    c8a0:	f004 f81e 	bl	108e0 <__assert_func>
    c8a4:	38e38e39 	.word	0x38e38e39
    c8a8:	20000a4c 	.word	0x20000a4c
    c8ac:	20000bc4 	.word	0x20000bc4

0000c8b0 <__hi0bits>:
    c8b0:	0c03      	lsrs	r3, r0, #16
    c8b2:	041b      	lsls	r3, r3, #16
    c8b4:	b9d3      	cbnz	r3, c8ec <__hi0bits+0x3c>
    c8b6:	0400      	lsls	r0, r0, #16
    c8b8:	2310      	movs	r3, #16
    c8ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c8be:	bf04      	itt	eq
    c8c0:	0200      	lsleq	r0, r0, #8
    c8c2:	3308      	addeq	r3, #8
    c8c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c8c8:	bf04      	itt	eq
    c8ca:	0100      	lsleq	r0, r0, #4
    c8cc:	3304      	addeq	r3, #4
    c8ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c8d2:	bf04      	itt	eq
    c8d4:	0080      	lsleq	r0, r0, #2
    c8d6:	3302      	addeq	r3, #2
    c8d8:	2800      	cmp	r0, #0
    c8da:	db05      	blt.n	c8e8 <__hi0bits+0x38>
    c8dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    c8e0:	f103 0301 	add.w	r3, r3, #1
    c8e4:	bf08      	it	eq
    c8e6:	2320      	moveq	r3, #32
    c8e8:	4618      	mov	r0, r3
    c8ea:	4770      	bx	lr
    c8ec:	2300      	movs	r3, #0
    c8ee:	e7e4      	b.n	c8ba <__hi0bits+0xa>

0000c8f0 <__lo0bits>:
    c8f0:	6803      	ldr	r3, [r0, #0]
    c8f2:	f013 0207 	ands.w	r2, r3, #7
    c8f6:	d008      	beq.n	c90a <__lo0bits+0x1a>
    c8f8:	07d9      	lsls	r1, r3, #31
    c8fa:	d41f      	bmi.n	c93c <__lo0bits+0x4c>
    c8fc:	079a      	lsls	r2, r3, #30
    c8fe:	d522      	bpl.n	c946 <__lo0bits+0x56>
    c900:	085b      	lsrs	r3, r3, #1
    c902:	6003      	str	r3, [r0, #0]
    c904:	2201      	movs	r2, #1
    c906:	4610      	mov	r0, r2
    c908:	4770      	bx	lr
    c90a:	b299      	uxth	r1, r3
    c90c:	b909      	cbnz	r1, c912 <__lo0bits+0x22>
    c90e:	0c1b      	lsrs	r3, r3, #16
    c910:	2210      	movs	r2, #16
    c912:	b2d9      	uxtb	r1, r3
    c914:	b909      	cbnz	r1, c91a <__lo0bits+0x2a>
    c916:	3208      	adds	r2, #8
    c918:	0a1b      	lsrs	r3, r3, #8
    c91a:	0719      	lsls	r1, r3, #28
    c91c:	bf04      	itt	eq
    c91e:	091b      	lsreq	r3, r3, #4
    c920:	3204      	addeq	r2, #4
    c922:	0799      	lsls	r1, r3, #30
    c924:	bf04      	itt	eq
    c926:	089b      	lsreq	r3, r3, #2
    c928:	3202      	addeq	r2, #2
    c92a:	07d9      	lsls	r1, r3, #31
    c92c:	d403      	bmi.n	c936 <__lo0bits+0x46>
    c92e:	085b      	lsrs	r3, r3, #1
    c930:	f102 0201 	add.w	r2, r2, #1
    c934:	d005      	beq.n	c942 <__lo0bits+0x52>
    c936:	6003      	str	r3, [r0, #0]
    c938:	4610      	mov	r0, r2
    c93a:	4770      	bx	lr
    c93c:	2200      	movs	r2, #0
    c93e:	4610      	mov	r0, r2
    c940:	4770      	bx	lr
    c942:	2220      	movs	r2, #32
    c944:	e7df      	b.n	c906 <__lo0bits+0x16>
    c946:	089b      	lsrs	r3, r3, #2
    c948:	2202      	movs	r2, #2
    c94a:	6003      	str	r3, [r0, #0]
    c94c:	4610      	mov	r0, r2
    c94e:	4770      	bx	lr

0000c950 <__i2b>:
    c950:	b538      	push	{r3, r4, r5, lr}
    c952:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c954:	4604      	mov	r4, r0
    c956:	460d      	mov	r5, r1
    c958:	b14b      	cbz	r3, c96e <__i2b+0x1e>
    c95a:	6858      	ldr	r0, [r3, #4]
    c95c:	b1b0      	cbz	r0, c98c <__i2b+0x3c>
    c95e:	6802      	ldr	r2, [r0, #0]
    c960:	605a      	str	r2, [r3, #4]
    c962:	2200      	movs	r2, #0
    c964:	2301      	movs	r3, #1
    c966:	e9c0 3504 	strd	r3, r5, [r0, #16]
    c96a:	60c2      	str	r2, [r0, #12]
    c96c:	bd38      	pop	{r3, r4, r5, pc}
    c96e:	2221      	movs	r2, #33	; 0x21
    c970:	2104      	movs	r1, #4
    c972:	f003 ffd5 	bl	10920 <_calloc_r>
    c976:	4603      	mov	r3, r0
    c978:	6460      	str	r0, [r4, #68]	; 0x44
    c97a:	2800      	cmp	r0, #0
    c97c:	d1ed      	bne.n	c95a <__i2b+0xa>
    c97e:	4b09      	ldr	r3, [pc, #36]	; (c9a4 <__i2b+0x54>)
    c980:	4809      	ldr	r0, [pc, #36]	; (c9a8 <__i2b+0x58>)
    c982:	2200      	movs	r2, #0
    c984:	f240 1145 	movw	r1, #325	; 0x145
    c988:	f003 ffaa 	bl	108e0 <__assert_func>
    c98c:	221c      	movs	r2, #28
    c98e:	2101      	movs	r1, #1
    c990:	4620      	mov	r0, r4
    c992:	f003 ffc5 	bl	10920 <_calloc_r>
    c996:	2800      	cmp	r0, #0
    c998:	d0f1      	beq.n	c97e <__i2b+0x2e>
    c99a:	2201      	movs	r2, #1
    c99c:	2302      	movs	r3, #2
    c99e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    c9a2:	e7de      	b.n	c962 <__i2b+0x12>
    c9a4:	20000a4c 	.word	0x20000a4c
    c9a8:	20000bc4 	.word	0x20000bc4

0000c9ac <__multiply>:
    c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9b0:	690e      	ldr	r6, [r1, #16]
    c9b2:	6915      	ldr	r5, [r2, #16]
    c9b4:	42ae      	cmp	r6, r5
    c9b6:	b085      	sub	sp, #20
    c9b8:	4688      	mov	r8, r1
    c9ba:	4614      	mov	r4, r2
    c9bc:	db05      	blt.n	c9ca <__multiply+0x1e>
    c9be:	462a      	mov	r2, r5
    c9c0:	4623      	mov	r3, r4
    c9c2:	4635      	mov	r5, r6
    c9c4:	460c      	mov	r4, r1
    c9c6:	4616      	mov	r6, r2
    c9c8:	4698      	mov	r8, r3
    c9ca:	68a3      	ldr	r3, [r4, #8]
    c9cc:	6861      	ldr	r1, [r4, #4]
    c9ce:	19af      	adds	r7, r5, r6
    c9d0:	42bb      	cmp	r3, r7
    c9d2:	bfb8      	it	lt
    c9d4:	3101      	addlt	r1, #1
    c9d6:	f7ff fe91 	bl	c6fc <_Balloc>
    c9da:	9001      	str	r0, [sp, #4]
    c9dc:	2800      	cmp	r0, #0
    c9de:	f000 8087 	beq.w	caf0 <__multiply+0x144>
    c9e2:	9b01      	ldr	r3, [sp, #4]
    c9e4:	f103 0914 	add.w	r9, r3, #20
    c9e8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    c9ec:	45d1      	cmp	r9, sl
    c9ee:	d205      	bcs.n	c9fc <__multiply+0x50>
    c9f0:	464b      	mov	r3, r9
    c9f2:	2200      	movs	r2, #0
    c9f4:	f843 2b04 	str.w	r2, [r3], #4
    c9f8:	459a      	cmp	sl, r3
    c9fa:	d8fb      	bhi.n	c9f4 <__multiply+0x48>
    c9fc:	f108 0814 	add.w	r8, r8, #20
    ca00:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    ca04:	f104 0314 	add.w	r3, r4, #20
    ca08:	45d8      	cmp	r8, fp
    ca0a:	461a      	mov	r2, r3
    ca0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    ca10:	d25f      	bcs.n	cad2 <__multiply+0x126>
    ca12:	1b2b      	subs	r3, r5, r4
    ca14:	3b15      	subs	r3, #21
    ca16:	f023 0303 	bic.w	r3, r3, #3
    ca1a:	3304      	adds	r3, #4
    ca1c:	3415      	adds	r4, #21
    ca1e:	42a5      	cmp	r5, r4
    ca20:	bf38      	it	cc
    ca22:	2304      	movcc	r3, #4
    ca24:	e9cd a702 	strd	sl, r7, [sp, #8]
    ca28:	46ac      	mov	ip, r5
    ca2a:	461f      	mov	r7, r3
    ca2c:	4692      	mov	sl, r2
    ca2e:	e005      	b.n	ca3c <__multiply+0x90>
    ca30:	0c09      	lsrs	r1, r1, #16
    ca32:	d129      	bne.n	ca88 <__multiply+0xdc>
    ca34:	45c3      	cmp	fp, r8
    ca36:	f109 0904 	add.w	r9, r9, #4
    ca3a:	d948      	bls.n	cace <__multiply+0x122>
    ca3c:	f858 1b04 	ldr.w	r1, [r8], #4
    ca40:	b28d      	uxth	r5, r1
    ca42:	2d00      	cmp	r5, #0
    ca44:	d0f4      	beq.n	ca30 <__multiply+0x84>
    ca46:	4656      	mov	r6, sl
    ca48:	464c      	mov	r4, r9
    ca4a:	2300      	movs	r3, #0
    ca4c:	f856 1b04 	ldr.w	r1, [r6], #4
    ca50:	6822      	ldr	r2, [r4, #0]
    ca52:	fa1f fe81 	uxth.w	lr, r1
    ca56:	b290      	uxth	r0, r2
    ca58:	0c09      	lsrs	r1, r1, #16
    ca5a:	fb05 000e 	mla	r0, r5, lr, r0
    ca5e:	0c12      	lsrs	r2, r2, #16
    ca60:	4403      	add	r3, r0
    ca62:	fb05 2201 	mla	r2, r5, r1, r2
    ca66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ca6a:	b29b      	uxth	r3, r3
    ca6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ca70:	45b4      	cmp	ip, r6
    ca72:	f844 3b04 	str.w	r3, [r4], #4
    ca76:	ea4f 4312 	mov.w	r3, r2, lsr #16
    ca7a:	d8e7      	bhi.n	ca4c <__multiply+0xa0>
    ca7c:	f849 3007 	str.w	r3, [r9, r7]
    ca80:	f858 1c04 	ldr.w	r1, [r8, #-4]
    ca84:	0c09      	lsrs	r1, r1, #16
    ca86:	d0d5      	beq.n	ca34 <__multiply+0x88>
    ca88:	f8d9 3000 	ldr.w	r3, [r9]
    ca8c:	4650      	mov	r0, sl
    ca8e:	461a      	mov	r2, r3
    ca90:	464c      	mov	r4, r9
    ca92:	2600      	movs	r6, #0
    ca94:	8805      	ldrh	r5, [r0, #0]
    ca96:	0c12      	lsrs	r2, r2, #16
    ca98:	fb01 2205 	mla	r2, r1, r5, r2
    ca9c:	4416      	add	r6, r2
    ca9e:	b29b      	uxth	r3, r3
    caa0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    caa4:	f844 3b04 	str.w	r3, [r4], #4
    caa8:	f850 5b04 	ldr.w	r5, [r0], #4
    caac:	6822      	ldr	r2, [r4, #0]
    caae:	0c2d      	lsrs	r5, r5, #16
    cab0:	b293      	uxth	r3, r2
    cab2:	fb01 3305 	mla	r3, r1, r5, r3
    cab6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    caba:	4584      	cmp	ip, r0
    cabc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    cac0:	d8e8      	bhi.n	ca94 <__multiply+0xe8>
    cac2:	45c3      	cmp	fp, r8
    cac4:	f849 3007 	str.w	r3, [r9, r7]
    cac8:	f109 0904 	add.w	r9, r9, #4
    cacc:	d8b6      	bhi.n	ca3c <__multiply+0x90>
    cace:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    cad2:	2f00      	cmp	r7, #0
    cad4:	dc02      	bgt.n	cadc <__multiply+0x130>
    cad6:	e005      	b.n	cae4 <__multiply+0x138>
    cad8:	3f01      	subs	r7, #1
    cada:	d003      	beq.n	cae4 <__multiply+0x138>
    cadc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    cae0:	2b00      	cmp	r3, #0
    cae2:	d0f9      	beq.n	cad8 <__multiply+0x12c>
    cae4:	9b01      	ldr	r3, [sp, #4]
    cae6:	4618      	mov	r0, r3
    cae8:	611f      	str	r7, [r3, #16]
    caea:	b005      	add	sp, #20
    caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    caf0:	4b03      	ldr	r3, [pc, #12]	; (cb00 <__multiply+0x154>)
    caf2:	4804      	ldr	r0, [pc, #16]	; (cb04 <__multiply+0x158>)
    caf4:	9a01      	ldr	r2, [sp, #4]
    caf6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    cafa:	f003 fef1 	bl	108e0 <__assert_func>
    cafe:	bf00      	nop
    cb00:	20000a4c 	.word	0x20000a4c
    cb04:	20000bc4 	.word	0x20000bc4

0000cb08 <__pow5mult>:
    cb08:	f012 0303 	ands.w	r3, r2, #3
    cb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb10:	4614      	mov	r4, r2
    cb12:	4606      	mov	r6, r0
    cb14:	d132      	bne.n	cb7c <__pow5mult+0x74>
    cb16:	460d      	mov	r5, r1
    cb18:	10a4      	asrs	r4, r4, #2
    cb1a:	d020      	beq.n	cb5e <__pow5mult+0x56>
    cb1c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    cb20:	f1b8 0f00 	cmp.w	r8, #0
    cb24:	d033      	beq.n	cb8e <__pow5mult+0x86>
    cb26:	07e3      	lsls	r3, r4, #31
    cb28:	f04f 0700 	mov.w	r7, #0
    cb2c:	d407      	bmi.n	cb3e <__pow5mult+0x36>
    cb2e:	1064      	asrs	r4, r4, #1
    cb30:	d015      	beq.n	cb5e <__pow5mult+0x56>
    cb32:	f8d8 0000 	ldr.w	r0, [r8]
    cb36:	b1a8      	cbz	r0, cb64 <__pow5mult+0x5c>
    cb38:	4680      	mov	r8, r0
    cb3a:	07e3      	lsls	r3, r4, #31
    cb3c:	d5f7      	bpl.n	cb2e <__pow5mult+0x26>
    cb3e:	4642      	mov	r2, r8
    cb40:	4629      	mov	r1, r5
    cb42:	4630      	mov	r0, r6
    cb44:	f7ff ff32 	bl	c9ac <__multiply>
    cb48:	b1b5      	cbz	r5, cb78 <__pow5mult+0x70>
    cb4a:	6869      	ldr	r1, [r5, #4]
    cb4c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    cb4e:	1064      	asrs	r4, r4, #1
    cb50:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    cb54:	602a      	str	r2, [r5, #0]
    cb56:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    cb5a:	4605      	mov	r5, r0
    cb5c:	d1e9      	bne.n	cb32 <__pow5mult+0x2a>
    cb5e:	4628      	mov	r0, r5
    cb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb64:	4642      	mov	r2, r8
    cb66:	4641      	mov	r1, r8
    cb68:	4630      	mov	r0, r6
    cb6a:	f7ff ff1f 	bl	c9ac <__multiply>
    cb6e:	f8c8 0000 	str.w	r0, [r8]
    cb72:	6007      	str	r7, [r0, #0]
    cb74:	4680      	mov	r8, r0
    cb76:	e7e0      	b.n	cb3a <__pow5mult+0x32>
    cb78:	4605      	mov	r5, r0
    cb7a:	e7d8      	b.n	cb2e <__pow5mult+0x26>
    cb7c:	3b01      	subs	r3, #1
    cb7e:	4a0f      	ldr	r2, [pc, #60]	; (cbbc <__pow5mult+0xb4>)
    cb80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    cb84:	2300      	movs	r3, #0
    cb86:	f7ff fde9 	bl	c75c <__multadd>
    cb8a:	4605      	mov	r5, r0
    cb8c:	e7c4      	b.n	cb18 <__pow5mult+0x10>
    cb8e:	2101      	movs	r1, #1
    cb90:	4630      	mov	r0, r6
    cb92:	f7ff fdb3 	bl	c6fc <_Balloc>
    cb96:	4680      	mov	r8, r0
    cb98:	b140      	cbz	r0, cbac <__pow5mult+0xa4>
    cb9a:	2301      	movs	r3, #1
    cb9c:	f240 2271 	movw	r2, #625	; 0x271
    cba0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    cba4:	2300      	movs	r3, #0
    cba6:	6430      	str	r0, [r6, #64]	; 0x40
    cba8:	6003      	str	r3, [r0, #0]
    cbaa:	e7bc      	b.n	cb26 <__pow5mult+0x1e>
    cbac:	4b04      	ldr	r3, [pc, #16]	; (cbc0 <__pow5mult+0xb8>)
    cbae:	4805      	ldr	r0, [pc, #20]	; (cbc4 <__pow5mult+0xbc>)
    cbb0:	4642      	mov	r2, r8
    cbb2:	f240 1145 	movw	r1, #325	; 0x145
    cbb6:	f003 fe93 	bl	108e0 <__assert_func>
    cbba:	bf00      	nop
    cbbc:	20007c1c 	.word	0x20007c1c
    cbc0:	20000a4c 	.word	0x20000a4c
    cbc4:	20000bc4 	.word	0x20000bc4

0000cbc8 <__lshift>:
    cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbcc:	460d      	mov	r5, r1
    cbce:	4614      	mov	r4, r2
    cbd0:	692f      	ldr	r7, [r5, #16]
    cbd2:	68ab      	ldr	r3, [r5, #8]
    cbd4:	6849      	ldr	r1, [r1, #4]
    cbd6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    cbda:	1c7e      	adds	r6, r7, #1
    cbdc:	429e      	cmp	r6, r3
    cbde:	4680      	mov	r8, r0
    cbe0:	ea4f 1962 	mov.w	r9, r2, asr #5
    cbe4:	dd04      	ble.n	cbf0 <__lshift+0x28>
    cbe6:	005b      	lsls	r3, r3, #1
    cbe8:	429e      	cmp	r6, r3
    cbea:	f101 0101 	add.w	r1, r1, #1
    cbee:	dcfa      	bgt.n	cbe6 <__lshift+0x1e>
    cbf0:	4640      	mov	r0, r8
    cbf2:	f7ff fd83 	bl	c6fc <_Balloc>
    cbf6:	4684      	mov	ip, r0
    cbf8:	2800      	cmp	r0, #0
    cbfa:	d052      	beq.n	cca2 <__lshift+0xda>
    cbfc:	f1b9 0f00 	cmp.w	r9, #0
    cc00:	f100 0214 	add.w	r2, r0, #20
    cc04:	dd0e      	ble.n	cc24 <__lshift+0x5c>
    cc06:	f109 0105 	add.w	r1, r9, #5
    cc0a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    cc0e:	4613      	mov	r3, r2
    cc10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    cc14:	2000      	movs	r0, #0
    cc16:	f843 0b04 	str.w	r0, [r3], #4
    cc1a:	428b      	cmp	r3, r1
    cc1c:	d1fb      	bne.n	cc16 <__lshift+0x4e>
    cc1e:	f1ae 0314 	sub.w	r3, lr, #20
    cc22:	441a      	add	r2, r3
    cc24:	6929      	ldr	r1, [r5, #16]
    cc26:	f105 0314 	add.w	r3, r5, #20
    cc2a:	f014 0e1f 	ands.w	lr, r4, #31
    cc2e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cc32:	d02e      	beq.n	cc92 <__lshift+0xca>
    cc34:	f1ce 0920 	rsb	r9, lr, #32
    cc38:	4610      	mov	r0, r2
    cc3a:	f04f 0a00 	mov.w	sl, #0
    cc3e:	681c      	ldr	r4, [r3, #0]
    cc40:	fa04 f40e 	lsl.w	r4, r4, lr
    cc44:	ea44 040a 	orr.w	r4, r4, sl
    cc48:	f840 4b04 	str.w	r4, [r0], #4
    cc4c:	f853 4b04 	ldr.w	r4, [r3], #4
    cc50:	4299      	cmp	r1, r3
    cc52:	fa24 fa09 	lsr.w	sl, r4, r9
    cc56:	d8f2      	bhi.n	cc3e <__lshift+0x76>
    cc58:	1b4b      	subs	r3, r1, r5
    cc5a:	3b15      	subs	r3, #21
    cc5c:	f023 0303 	bic.w	r3, r3, #3
    cc60:	3304      	adds	r3, #4
    cc62:	f105 0015 	add.w	r0, r5, #21
    cc66:	4281      	cmp	r1, r0
    cc68:	bf38      	it	cc
    cc6a:	2304      	movcc	r3, #4
    cc6c:	f1ba 0f00 	cmp.w	sl, #0
    cc70:	bf18      	it	ne
    cc72:	4637      	movne	r7, r6
    cc74:	f842 a003 	str.w	sl, [r2, r3]
    cc78:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    cc7c:	686a      	ldr	r2, [r5, #4]
    cc7e:	f8cc 7010 	str.w	r7, [ip, #16]
    cc82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    cc86:	6029      	str	r1, [r5, #0]
    cc88:	4660      	mov	r0, ip
    cc8a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc92:	3a04      	subs	r2, #4
    cc94:	f853 0b04 	ldr.w	r0, [r3], #4
    cc98:	f842 0f04 	str.w	r0, [r2, #4]!
    cc9c:	4299      	cmp	r1, r3
    cc9e:	d8f9      	bhi.n	cc94 <__lshift+0xcc>
    cca0:	e7ea      	b.n	cc78 <__lshift+0xb0>
    cca2:	4b03      	ldr	r3, [pc, #12]	; (ccb0 <__lshift+0xe8>)
    cca4:	4803      	ldr	r0, [pc, #12]	; (ccb4 <__lshift+0xec>)
    cca6:	4662      	mov	r2, ip
    cca8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    ccac:	f003 fe18 	bl	108e0 <__assert_func>
    ccb0:	20000a4c 	.word	0x20000a4c
    ccb4:	20000bc4 	.word	0x20000bc4

0000ccb8 <__mcmp>:
    ccb8:	690b      	ldr	r3, [r1, #16]
    ccba:	4684      	mov	ip, r0
    ccbc:	6900      	ldr	r0, [r0, #16]
    ccbe:	1ac0      	subs	r0, r0, r3
    ccc0:	d116      	bne.n	ccf0 <__mcmp+0x38>
    ccc2:	f10c 0c14 	add.w	ip, ip, #20
    ccc6:	3114      	adds	r1, #20
    ccc8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    cccc:	b410      	push	{r4}
    ccce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ccd2:	e001      	b.n	ccd8 <__mcmp+0x20>
    ccd4:	4594      	cmp	ip, r2
    ccd6:	d208      	bcs.n	ccea <__mcmp+0x32>
    ccd8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ccdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cce0:	428c      	cmp	r4, r1
    cce2:	d0f7      	beq.n	ccd4 <__mcmp+0x1c>
    cce4:	d205      	bcs.n	ccf2 <__mcmp+0x3a>
    cce6:	f04f 30ff 	mov.w	r0, #4294967295
    ccea:	f85d 4b04 	ldr.w	r4, [sp], #4
    ccee:	4770      	bx	lr
    ccf0:	4770      	bx	lr
    ccf2:	2001      	movs	r0, #1
    ccf4:	f85d 4b04 	ldr.w	r4, [sp], #4
    ccf8:	4770      	bx	lr
    ccfa:	bf00      	nop

0000ccfc <__mdiff>:
    ccfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd00:	690f      	ldr	r7, [r1, #16]
    cd02:	6913      	ldr	r3, [r2, #16]
    cd04:	1aff      	subs	r7, r7, r3
    cd06:	2f00      	cmp	r7, #0
    cd08:	460e      	mov	r6, r1
    cd0a:	4690      	mov	r8, r2
    cd0c:	d17f      	bne.n	ce0e <__mdiff+0x112>
    cd0e:	f101 0514 	add.w	r5, r1, #20
    cd12:	3214      	adds	r2, #20
    cd14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    cd18:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    cd1c:	e001      	b.n	cd22 <__mdiff+0x26>
    cd1e:	429d      	cmp	r5, r3
    cd20:	d278      	bcs.n	ce14 <__mdiff+0x118>
    cd22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cd26:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cd2a:	42a1      	cmp	r1, r4
    cd2c:	d0f7      	beq.n	cd1e <__mdiff+0x22>
    cd2e:	d369      	bcc.n	ce04 <__mdiff+0x108>
    cd30:	6871      	ldr	r1, [r6, #4]
    cd32:	f7ff fce3 	bl	c6fc <_Balloc>
    cd36:	4681      	mov	r9, r0
    cd38:	2800      	cmp	r0, #0
    cd3a:	d077      	beq.n	ce2c <__mdiff+0x130>
    cd3c:	6935      	ldr	r5, [r6, #16]
    cd3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    cd42:	60c7      	str	r7, [r0, #12]
    cd44:	f108 0e14 	add.w	lr, r8, #20
    cd48:	f106 0014 	add.w	r0, r6, #20
    cd4c:	f109 0a14 	add.w	sl, r9, #20
    cd50:	f106 0110 	add.w	r1, r6, #16
    cd54:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    cd58:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    cd5c:	4656      	mov	r6, sl
    cd5e:	f04f 0c00 	mov.w	ip, #0
    cd62:	f85e 4b04 	ldr.w	r4, [lr], #4
    cd66:	f851 bf04 	ldr.w	fp, [r1, #4]!
    cd6a:	b2a3      	uxth	r3, r4
    cd6c:	fa1c fc8b 	uxtah	ip, ip, fp
    cd70:	ebac 0303 	sub.w	r3, ip, r3
    cd74:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    cd78:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    cd7c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    cd80:	b29b      	uxth	r3, r3
    cd82:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    cd86:	4572      	cmp	r2, lr
    cd88:	f846 3b04 	str.w	r3, [r6], #4
    cd8c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    cd90:	d8e7      	bhi.n	cd62 <__mdiff+0x66>
    cd92:	eba2 0108 	sub.w	r1, r2, r8
    cd96:	3915      	subs	r1, #21
    cd98:	f108 0815 	add.w	r8, r8, #21
    cd9c:	4542      	cmp	r2, r8
    cd9e:	f021 0403 	bic.w	r4, r1, #3
    cda2:	f104 0404 	add.w	r4, r4, #4
    cda6:	bf38      	it	cc
    cda8:	2404      	movcc	r4, #4
    cdaa:	4420      	add	r0, r4
    cdac:	f021 0203 	bic.w	r2, r1, #3
    cdb0:	bf38      	it	cc
    cdb2:	2200      	movcc	r2, #0
    cdb4:	4287      	cmp	r7, r0
    cdb6:	4452      	add	r2, sl
    cdb8:	4454      	add	r4, sl
    cdba:	d918      	bls.n	cdee <__mdiff+0xf2>
    cdbc:	4626      	mov	r6, r4
    cdbe:	4601      	mov	r1, r0
    cdc0:	f851 3b04 	ldr.w	r3, [r1], #4
    cdc4:	fa1c fc83 	uxtah	ip, ip, r3
    cdc8:	ea4f 422c 	mov.w	r2, ip, asr #16
    cdcc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cdd0:	fa1f fc8c 	uxth.w	ip, ip
    cdd4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    cdd8:	428f      	cmp	r7, r1
    cdda:	f846 3b04 	str.w	r3, [r6], #4
    cdde:	ea4f 4c22 	mov.w	ip, r2, asr #16
    cde2:	d8ed      	bhi.n	cdc0 <__mdiff+0xc4>
    cde4:	3f01      	subs	r7, #1
    cde6:	1a3f      	subs	r7, r7, r0
    cde8:	f027 0703 	bic.w	r7, r7, #3
    cdec:	19e2      	adds	r2, r4, r7
    cdee:	b923      	cbnz	r3, cdfa <__mdiff+0xfe>
    cdf0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    cdf4:	3d01      	subs	r5, #1
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d0fa      	beq.n	cdf0 <__mdiff+0xf4>
    cdfa:	f8c9 5010 	str.w	r5, [r9, #16]
    cdfe:	4648      	mov	r0, r9
    ce00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce04:	4633      	mov	r3, r6
    ce06:	2701      	movs	r7, #1
    ce08:	4646      	mov	r6, r8
    ce0a:	4698      	mov	r8, r3
    ce0c:	e790      	b.n	cd30 <__mdiff+0x34>
    ce0e:	dbf9      	blt.n	ce04 <__mdiff+0x108>
    ce10:	2700      	movs	r7, #0
    ce12:	e78d      	b.n	cd30 <__mdiff+0x34>
    ce14:	2100      	movs	r1, #0
    ce16:	f7ff fc71 	bl	c6fc <_Balloc>
    ce1a:	4681      	mov	r9, r0
    ce1c:	b168      	cbz	r0, ce3a <__mdiff+0x13e>
    ce1e:	2201      	movs	r2, #1
    ce20:	2300      	movs	r3, #0
    ce22:	e9c9 2304 	strd	r2, r3, [r9, #16]
    ce26:	4648      	mov	r0, r9
    ce28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce2c:	4b06      	ldr	r3, [pc, #24]	; (ce48 <__mdiff+0x14c>)
    ce2e:	4807      	ldr	r0, [pc, #28]	; (ce4c <__mdiff+0x150>)
    ce30:	464a      	mov	r2, r9
    ce32:	f240 2145 	movw	r1, #581	; 0x245
    ce36:	f003 fd53 	bl	108e0 <__assert_func>
    ce3a:	4b03      	ldr	r3, [pc, #12]	; (ce48 <__mdiff+0x14c>)
    ce3c:	4803      	ldr	r0, [pc, #12]	; (ce4c <__mdiff+0x150>)
    ce3e:	464a      	mov	r2, r9
    ce40:	f240 2137 	movw	r1, #567	; 0x237
    ce44:	f003 fd4c 	bl	108e0 <__assert_func>
    ce48:	20000a4c 	.word	0x20000a4c
    ce4c:	20000bc4 	.word	0x20000bc4

0000ce50 <__ulp>:
    ce50:	b082      	sub	sp, #8
    ce52:	ed8d 0b00 	vstr	d0, [sp]
    ce56:	4b16      	ldr	r3, [pc, #88]	; (ceb0 <__ulp+0x60>)
    ce58:	9a01      	ldr	r2, [sp, #4]
    ce5a:	4013      	ands	r3, r2
    ce5c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    ce60:	2b00      	cmp	r3, #0
    ce62:	dd06      	ble.n	ce72 <__ulp+0x22>
    ce64:	2200      	movs	r2, #0
    ce66:	4619      	mov	r1, r3
    ce68:	4610      	mov	r0, r2
    ce6a:	ec41 0b10 	vmov	d0, r0, r1
    ce6e:	b002      	add	sp, #8
    ce70:	4770      	bx	lr
    ce72:	425b      	negs	r3, r3
    ce74:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    ce78:	ea4f 5223 	mov.w	r2, r3, asr #20
    ce7c:	da09      	bge.n	ce92 <__ulp+0x42>
    ce7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    ce82:	4113      	asrs	r3, r2
    ce84:	2200      	movs	r2, #0
    ce86:	4619      	mov	r1, r3
    ce88:	4610      	mov	r0, r2
    ce8a:	ec41 0b10 	vmov	d0, r0, r1
    ce8e:	b002      	add	sp, #8
    ce90:	4770      	bx	lr
    ce92:	f1a2 0314 	sub.w	r3, r2, #20
    ce96:	2b1e      	cmp	r3, #30
    ce98:	bfda      	itte	le
    ce9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    ce9e:	40da      	lsrle	r2, r3
    cea0:	2201      	movgt	r2, #1
    cea2:	2300      	movs	r3, #0
    cea4:	4619      	mov	r1, r3
    cea6:	4610      	mov	r0, r2
    cea8:	ec41 0b10 	vmov	d0, r0, r1
    ceac:	b002      	add	sp, #8
    ceae:	4770      	bx	lr
    ceb0:	7ff00000 	.word	0x7ff00000

0000ceb4 <__b2d>:
    ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ceb6:	6904      	ldr	r4, [r0, #16]
    ceb8:	f100 0614 	add.w	r6, r0, #20
    cebc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    cec0:	1f27      	subs	r7, r4, #4
    cec2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    cec6:	4628      	mov	r0, r5
    cec8:	f7ff fcf2 	bl	c8b0 <__hi0bits>
    cecc:	f1c0 0320 	rsb	r3, r0, #32
    ced0:	280a      	cmp	r0, #10
    ced2:	600b      	str	r3, [r1, #0]
    ced4:	dd1b      	ble.n	cf0e <__b2d+0x5a>
    ced6:	42be      	cmp	r6, r7
    ced8:	d20b      	bcs.n	cef2 <__b2d+0x3e>
    ceda:	380b      	subs	r0, #11
    cedc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    cee0:	d12e      	bne.n	cf40 <__b2d+0x8c>
    cee2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    cee6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ceea:	460a      	mov	r2, r1
    ceec:	ec43 2b10 	vmov	d0, r2, r3
    cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cef2:	f1b0 010b 	subs.w	r1, r0, #11
    cef6:	d0f4      	beq.n	cee2 <__b2d+0x2e>
    cef8:	fa05 f101 	lsl.w	r1, r5, r1
    cefc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    cf00:	2100      	movs	r1, #0
    cf02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    cf06:	460a      	mov	r2, r1
    cf08:	ec43 2b10 	vmov	d0, r2, r3
    cf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf0e:	f1c0 0c0b 	rsb	ip, r0, #11
    cf12:	fa25 f10c 	lsr.w	r1, r5, ip
    cf16:	42be      	cmp	r6, r7
    cf18:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    cf1c:	bf38      	it	cc
    cf1e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    cf22:	f100 0015 	add.w	r0, r0, #21
    cf26:	bf34      	ite	cc
    cf28:	fa21 f10c 	lsrcc.w	r1, r1, ip
    cf2c:	2100      	movcs	r1, #0
    cf2e:	fa05 f000 	lsl.w	r0, r5, r0
    cf32:	4301      	orrs	r1, r0
    cf34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    cf38:	460a      	mov	r2, r1
    cf3a:	ec43 2b10 	vmov	d0, r2, r3
    cf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf40:	f1c0 0c20 	rsb	ip, r0, #32
    cf44:	4085      	lsls	r5, r0
    cf46:	fa21 f30c 	lsr.w	r3, r1, ip
    cf4a:	ea45 0703 	orr.w	r7, r5, r3
    cf4e:	f1a4 0508 	sub.w	r5, r4, #8
    cf52:	42ae      	cmp	r6, r5
    cf54:	fa01 f100 	lsl.w	r1, r1, r0
    cf58:	bf3c      	itt	cc
    cf5a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    cf5e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    cf62:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    cf66:	bf38      	it	cc
    cf68:	4301      	orrcc	r1, r0
    cf6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    cf6e:	460a      	mov	r2, r1
    cf70:	ec43 2b10 	vmov	d0, r2, r3
    cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf76:	bf00      	nop

0000cf78 <__d2b>:
    cf78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf7c:	4688      	mov	r8, r1
    cf7e:	b083      	sub	sp, #12
    cf80:	2101      	movs	r1, #1
    cf82:	ec57 6b10 	vmov	r6, r7, d0
    cf86:	4615      	mov	r5, r2
    cf88:	f7ff fbb8 	bl	c6fc <_Balloc>
    cf8c:	4604      	mov	r4, r0
    cf8e:	2800      	cmp	r0, #0
    cf90:	d051      	beq.n	d036 <__d2b+0xbe>
    cf92:	f3c7 590a 	ubfx	r9, r7, #20, #11
    cf96:	f3c7 0313 	ubfx	r3, r7, #0, #20
    cf9a:	f1b9 0f00 	cmp.w	r9, #0
    cf9e:	d001      	beq.n	cfa4 <__d2b+0x2c>
    cfa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cfa4:	2e00      	cmp	r6, #0
    cfa6:	9301      	str	r3, [sp, #4]
    cfa8:	d118      	bne.n	cfdc <__d2b+0x64>
    cfaa:	a801      	add	r0, sp, #4
    cfac:	f7ff fca0 	bl	c8f0 <__lo0bits>
    cfb0:	9a01      	ldr	r2, [sp, #4]
    cfb2:	6162      	str	r2, [r4, #20]
    cfb4:	2201      	movs	r2, #1
    cfb6:	f100 0320 	add.w	r3, r0, #32
    cfba:	6122      	str	r2, [r4, #16]
    cfbc:	f1b9 0f00 	cmp.w	r9, #0
    cfc0:	d025      	beq.n	d00e <__d2b+0x96>
    cfc2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    cfc6:	eb09 0203 	add.w	r2, r9, r3
    cfca:	4620      	mov	r0, r4
    cfcc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    cfd0:	f8c8 2000 	str.w	r2, [r8]
    cfd4:	602b      	str	r3, [r5, #0]
    cfd6:	b003      	add	sp, #12
    cfd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cfdc:	4668      	mov	r0, sp
    cfde:	9600      	str	r6, [sp, #0]
    cfe0:	f7ff fc86 	bl	c8f0 <__lo0bits>
    cfe4:	4603      	mov	r3, r0
    cfe6:	b310      	cbz	r0, d02e <__d2b+0xb6>
    cfe8:	e9dd 0200 	ldrd	r0, r2, [sp]
    cfec:	f1c3 0120 	rsb	r1, r3, #32
    cff0:	fa02 f101 	lsl.w	r1, r2, r1
    cff4:	4301      	orrs	r1, r0
    cff6:	40da      	lsrs	r2, r3
    cff8:	6161      	str	r1, [r4, #20]
    cffa:	9201      	str	r2, [sp, #4]
    cffc:	2a00      	cmp	r2, #0
    cffe:	61a2      	str	r2, [r4, #24]
    d000:	bf14      	ite	ne
    d002:	2202      	movne	r2, #2
    d004:	2201      	moveq	r2, #1
    d006:	6122      	str	r2, [r4, #16]
    d008:	f1b9 0f00 	cmp.w	r9, #0
    d00c:	d1d9      	bne.n	cfc2 <__d2b+0x4a>
    d00e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d012:	f8c8 3000 	str.w	r3, [r8]
    d016:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d01a:	6918      	ldr	r0, [r3, #16]
    d01c:	f7ff fc48 	bl	c8b0 <__hi0bits>
    d020:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d024:	4620      	mov	r0, r4
    d026:	602b      	str	r3, [r5, #0]
    d028:	b003      	add	sp, #12
    d02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d02e:	9a00      	ldr	r2, [sp, #0]
    d030:	6162      	str	r2, [r4, #20]
    d032:	9a01      	ldr	r2, [sp, #4]
    d034:	e7e2      	b.n	cffc <__d2b+0x84>
    d036:	4b03      	ldr	r3, [pc, #12]	; (d044 <__d2b+0xcc>)
    d038:	4803      	ldr	r0, [pc, #12]	; (d048 <__d2b+0xd0>)
    d03a:	4622      	mov	r2, r4
    d03c:	f240 310f 	movw	r1, #783	; 0x30f
    d040:	f003 fc4e 	bl	108e0 <__assert_func>
    d044:	20000a4c 	.word	0x20000a4c
    d048:	20000bc4 	.word	0x20000bc4

0000d04c <__ratio>:
    d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d04e:	b083      	sub	sp, #12
    d050:	460e      	mov	r6, r1
    d052:	4669      	mov	r1, sp
    d054:	4607      	mov	r7, r0
    d056:	f7ff ff2d 	bl	ceb4 <__b2d>
    d05a:	a901      	add	r1, sp, #4
    d05c:	4630      	mov	r0, r6
    d05e:	ec55 4b10 	vmov	r4, r5, d0
    d062:	eeb0 7b40 	vmov.f64	d7, d0
    d066:	f7ff ff25 	bl	ceb4 <__b2d>
    d06a:	6933      	ldr	r3, [r6, #16]
    d06c:	693a      	ldr	r2, [r7, #16]
    d06e:	1ad2      	subs	r2, r2, r3
    d070:	e9dd 3100 	ldrd	r3, r1, [sp]
    d074:	1a5b      	subs	r3, r3, r1
    d076:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d07a:	2b00      	cmp	r3, #0
    d07c:	dd09      	ble.n	d092 <__ratio+0x46>
    d07e:	ee17 2a90 	vmov	r2, s15
    d082:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d086:	ec45 4b17 	vmov	d7, r4, r5
    d08a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d08e:	b003      	add	sp, #12
    d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d092:	ee10 2a90 	vmov	r2, s1
    d096:	ec51 0b10 	vmov	r0, r1, d0
    d09a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d09e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d0a2:	ec41 0b10 	vmov	d0, r0, r1
    d0a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d0aa:	b003      	add	sp, #12
    d0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0ae:	bf00      	nop

0000d0b0 <__copybits>:
    d0b0:	3901      	subs	r1, #1
    d0b2:	1149      	asrs	r1, r1, #5
    d0b4:	f101 0c01 	add.w	ip, r1, #1
    d0b8:	6911      	ldr	r1, [r2, #16]
    d0ba:	f102 0314 	add.w	r3, r2, #20
    d0be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d0c2:	428b      	cmp	r3, r1
    d0c4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d0c8:	d217      	bcs.n	d0fa <__copybits+0x4a>
    d0ca:	b510      	push	{r4, lr}
    d0cc:	f1a0 0e04 	sub.w	lr, r0, #4
    d0d0:	f853 4b04 	ldr.w	r4, [r3], #4
    d0d4:	f84e 4f04 	str.w	r4, [lr, #4]!
    d0d8:	4299      	cmp	r1, r3
    d0da:	d8f9      	bhi.n	d0d0 <__copybits+0x20>
    d0dc:	1a8a      	subs	r2, r1, r2
    d0de:	f1a2 0315 	sub.w	r3, r2, #21
    d0e2:	f023 0303 	bic.w	r3, r3, #3
    d0e6:	3304      	adds	r3, #4
    d0e8:	4418      	add	r0, r3
    d0ea:	4584      	cmp	ip, r0
    d0ec:	d904      	bls.n	d0f8 <__copybits+0x48>
    d0ee:	2300      	movs	r3, #0
    d0f0:	f840 3b04 	str.w	r3, [r0], #4
    d0f4:	4584      	cmp	ip, r0
    d0f6:	d8fb      	bhi.n	d0f0 <__copybits+0x40>
    d0f8:	bd10      	pop	{r4, pc}
    d0fa:	4584      	cmp	ip, r0
    d0fc:	d905      	bls.n	d10a <__copybits+0x5a>
    d0fe:	2300      	movs	r3, #0
    d100:	f840 3b04 	str.w	r3, [r0], #4
    d104:	4584      	cmp	ip, r0
    d106:	d8fb      	bhi.n	d100 <__copybits+0x50>
    d108:	4770      	bx	lr
    d10a:	4770      	bx	lr

0000d10c <__any_on>:
    d10c:	6903      	ldr	r3, [r0, #16]
    d10e:	114a      	asrs	r2, r1, #5
    d110:	4293      	cmp	r3, r2
    d112:	f100 0014 	add.w	r0, r0, #20
    d116:	da09      	bge.n	d12c <__any_on+0x20>
    d118:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d11c:	e002      	b.n	d124 <__any_on+0x18>
    d11e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d122:	b9c2      	cbnz	r2, d156 <__any_on+0x4a>
    d124:	4283      	cmp	r3, r0
    d126:	d8fa      	bhi.n	d11e <__any_on+0x12>
    d128:	2000      	movs	r0, #0
    d12a:	4770      	bx	lr
    d12c:	dd10      	ble.n	d150 <__any_on+0x44>
    d12e:	f011 011f 	ands.w	r1, r1, #31
    d132:	d00d      	beq.n	d150 <__any_on+0x44>
    d134:	b410      	push	{r4}
    d136:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d13a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d13e:	fa24 f201 	lsr.w	r2, r4, r1
    d142:	408a      	lsls	r2, r1
    d144:	4294      	cmp	r4, r2
    d146:	d00c      	beq.n	d162 <__any_on+0x56>
    d148:	2001      	movs	r0, #1
    d14a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d14e:	4770      	bx	lr
    d150:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d154:	e7e6      	b.n	d124 <__any_on+0x18>
    d156:	2001      	movs	r0, #1
    d158:	4770      	bx	lr
    d15a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d15e:	2a00      	cmp	r2, #0
    d160:	d1f2      	bne.n	d148 <__any_on+0x3c>
    d162:	4283      	cmp	r3, r0
    d164:	d8f9      	bhi.n	d15a <__any_on+0x4e>
    d166:	2000      	movs	r0, #0
    d168:	f85d 4b04 	ldr.w	r4, [sp], #4
    d16c:	4770      	bx	lr
    d16e:	bf00      	nop

0000d170 <__ascii_wctomb>:
    d170:	b149      	cbz	r1, d186 <__ascii_wctomb+0x16>
    d172:	2aff      	cmp	r2, #255	; 0xff
    d174:	d802      	bhi.n	d17c <__ascii_wctomb+0xc>
    d176:	700a      	strb	r2, [r1, #0]
    d178:	2001      	movs	r0, #1
    d17a:	4770      	bx	lr
    d17c:	238a      	movs	r3, #138	; 0x8a
    d17e:	6003      	str	r3, [r0, #0]
    d180:	f04f 30ff 	mov.w	r0, #4294967295
    d184:	4770      	bx	lr
    d186:	4608      	mov	r0, r1
    d188:	4770      	bx	lr
    d18a:	bf00      	nop
    d18c:	0000      	movs	r0, r0
	...

0000d190 <_svfprintf_r>:
    d190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d194:	ed2d 8b08 	vpush	{d8-d11}
    d198:	b0d1      	sub	sp, #324	; 0x144
    d19a:	460c      	mov	r4, r1
    d19c:	ee0b 1a10 	vmov	s22, r1
    d1a0:	4690      	mov	r8, r2
    d1a2:	9308      	str	r3, [sp, #32]
    d1a4:	4683      	mov	fp, r0
    d1a6:	f003 fb59 	bl	1085c <_localeconv_r>
    d1aa:	6803      	ldr	r3, [r0, #0]
    d1ac:	9312      	str	r3, [sp, #72]	; 0x48
    d1ae:	4618      	mov	r0, r3
    d1b0:	f7fe fc66 	bl	ba80 <strlen>
    d1b4:	af20      	add	r7, sp, #128	; 0x80
    d1b6:	9010      	str	r0, [sp, #64]	; 0x40
    d1b8:	2208      	movs	r2, #8
    d1ba:	2100      	movs	r1, #0
    d1bc:	4638      	mov	r0, r7
    d1be:	f7fe f919 	bl	b3f4 <memset>
    d1c2:	89a3      	ldrh	r3, [r4, #12]
    d1c4:	061b      	lsls	r3, r3, #24
    d1c6:	d503      	bpl.n	d1d0 <_svfprintf_r+0x40>
    d1c8:	6923      	ldr	r3, [r4, #16]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	f000 8755 	beq.w	e07a <_svfprintf_r+0xeea>
    d1d0:	2300      	movs	r3, #0
    d1d2:	ed9f 8b83 	vldr	d8, [pc, #524]	; d3e0 <_svfprintf_r+0x250>
    d1d6:	ed9f 9b84 	vldr	d9, [pc, #528]	; d3e8 <_svfprintf_r+0x258>
    d1da:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d1de:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d1e2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d1e6:	aa27      	add	r2, sp, #156	; 0x9c
    d1e8:	930e      	str	r3, [sp, #56]	; 0x38
    d1ea:	9224      	str	r2, [sp, #144]	; 0x90
    d1ec:	4692      	mov	sl, r2
    d1ee:	9311      	str	r3, [sp, #68]	; 0x44
    d1f0:	9304      	str	r3, [sp, #16]
    d1f2:	4644      	mov	r4, r8
    d1f4:	46a1      	mov	r9, r4
    d1f6:	4b7e      	ldr	r3, [pc, #504]	; (d3f0 <_svfprintf_r+0x260>)
    d1f8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d1fc:	f7fe f9c4 	bl	b588 <__locale_mb_cur_max>
    d200:	464a      	mov	r2, r9
    d202:	4603      	mov	r3, r0
    d204:	a91c      	add	r1, sp, #112	; 0x70
    d206:	9700      	str	r7, [sp, #0]
    d208:	4658      	mov	r0, fp
    d20a:	47a8      	blx	r5
    d20c:	2800      	cmp	r0, #0
    d20e:	f000 80b0 	beq.w	d372 <_svfprintf_r+0x1e2>
    d212:	f2c0 80a6 	blt.w	d362 <_svfprintf_r+0x1d2>
    d216:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d218:	2a25      	cmp	r2, #37	; 0x25
    d21a:	4603      	mov	r3, r0
    d21c:	d001      	beq.n	d222 <_svfprintf_r+0x92>
    d21e:	4499      	add	r9, r3
    d220:	e7e9      	b.n	d1f6 <_svfprintf_r+0x66>
    d222:	ebb9 0504 	subs.w	r5, r9, r4
    d226:	4606      	mov	r6, r0
    d228:	f040 80a7 	bne.w	d37a <_svfprintf_r+0x1ea>
    d22c:	2300      	movs	r3, #0
    d22e:	f04f 32ff 	mov.w	r2, #4294967295
    d232:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d236:	4698      	mov	r8, r3
    d238:	9306      	str	r3, [sp, #24]
    d23a:	f109 0901 	add.w	r9, r9, #1
    d23e:	f899 3000 	ldrb.w	r3, [r9]
    d242:	9203      	str	r2, [sp, #12]
    d244:	252b      	movs	r5, #43	; 0x2b
    d246:	2620      	movs	r6, #32
    d248:	f109 0901 	add.w	r9, r9, #1
    d24c:	f1a3 0220 	sub.w	r2, r3, #32
    d250:	2a5a      	cmp	r2, #90	; 0x5a
    d252:	f200 80cf 	bhi.w	d3f4 <_svfprintf_r+0x264>
    d256:	e8df f012 	tbh	[pc, r2, lsl #1]
    d25a:	02e8      	.short	0x02e8
    d25c:	00cd00cd 	.word	0x00cd00cd
    d260:	00cd02e3 	.word	0x00cd02e3
    d264:	00cd00cd 	.word	0x00cd00cd
    d268:	00cd006a 	.word	0x00cd006a
    d26c:	020500cd 	.word	0x020500cd
    d270:	00cd0284 	.word	0x00cd0284
    d274:	02c90210 	.word	0x02c90210
    d278:	02bd00cd 	.word	0x02bd00cd
    d27c:	005b005b 	.word	0x005b005b
    d280:	005b005b 	.word	0x005b005b
    d284:	005b005b 	.word	0x005b005b
    d288:	005b005b 	.word	0x005b005b
    d28c:	00cd005b 	.word	0x00cd005b
    d290:	00cd00cd 	.word	0x00cd00cd
    d294:	00cd00cd 	.word	0x00cd00cd
    d298:	00cd00cd 	.word	0x00cd00cd
    d29c:	00cd0153 	.word	0x00cd0153
    d2a0:	021a0183 	.word	0x021a0183
    d2a4:	01530153 	.word	0x01530153
    d2a8:	00cd0153 	.word	0x00cd0153
    d2ac:	00cd00cd 	.word	0x00cd00cd
    d2b0:	021500cd 	.word	0x021500cd
    d2b4:	00cd00cd 	.word	0x00cd00cd
    d2b8:	00cd0296 	.word	0x00cd0296
    d2bc:	00cd00cd 	.word	0x00cd00cd
    d2c0:	00cd01ab 	.word	0x00cd01ab
    d2c4:	00cd02aa 	.word	0x00cd02aa
    d2c8:	06e300cd 	.word	0x06e300cd
    d2cc:	00cd00cd 	.word	0x00cd00cd
    d2d0:	00cd00cd 	.word	0x00cd00cd
    d2d4:	00cd00cd 	.word	0x00cd00cd
    d2d8:	00cd00cd 	.word	0x00cd00cd
    d2dc:	00cd0153 	.word	0x00cd0153
    d2e0:	01de0183 	.word	0x01de0183
    d2e4:	01530153 	.word	0x01530153
    d2e8:	02770153 	.word	0x02770153
    d2ec:	007f01de 	.word	0x007f01de
    d2f0:	028900cd 	.word	0x028900cd
    d2f4:	025f00cd 	.word	0x025f00cd
    d2f8:	022f06e0 	.word	0x022f06e0
    d2fc:	00cd007f 	.word	0x00cd007f
    d300:	007c01ab 	.word	0x007c01ab
    d304:	00cd06b8 	.word	0x00cd06b8
    d308:	06bd00cd 	.word	0x06bd00cd
    d30c:	007c00cd 	.word	0x007c00cd
    d310:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d314:	2100      	movs	r1, #0
    d316:	f819 3b01 	ldrb.w	r3, [r9], #1
    d31a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d31e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d322:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d326:	2a09      	cmp	r2, #9
    d328:	d9f5      	bls.n	d316 <_svfprintf_r+0x186>
    d32a:	9106      	str	r1, [sp, #24]
    d32c:	e78e      	b.n	d24c <_svfprintf_r+0xbc>
    d32e:	4658      	mov	r0, fp
    d330:	f003 fa94 	bl	1085c <_localeconv_r>
    d334:	6843      	ldr	r3, [r0, #4]
    d336:	9315      	str	r3, [sp, #84]	; 0x54
    d338:	4618      	mov	r0, r3
    d33a:	f7fe fba1 	bl	ba80 <strlen>
    d33e:	9016      	str	r0, [sp, #88]	; 0x58
    d340:	4658      	mov	r0, fp
    d342:	f003 fa8b 	bl	1085c <_localeconv_r>
    d346:	6883      	ldr	r3, [r0, #8]
    d348:	9313      	str	r3, [sp, #76]	; 0x4c
    d34a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d34c:	2b00      	cmp	r3, #0
    d34e:	f040 862d 	bne.w	dfac <_svfprintf_r+0xe1c>
    d352:	f899 3000 	ldrb.w	r3, [r9]
    d356:	e777      	b.n	d248 <_svfprintf_r+0xb8>
    d358:	f899 3000 	ldrb.w	r3, [r9]
    d35c:	f048 0820 	orr.w	r8, r8, #32
    d360:	e772      	b.n	d248 <_svfprintf_r+0xb8>
    d362:	2208      	movs	r2, #8
    d364:	2100      	movs	r1, #0
    d366:	4638      	mov	r0, r7
    d368:	f7fe f844 	bl	b3f4 <memset>
    d36c:	2301      	movs	r3, #1
    d36e:	4499      	add	r9, r3
    d370:	e741      	b.n	d1f6 <_svfprintf_r+0x66>
    d372:	ebb9 0504 	subs.w	r5, r9, r4
    d376:	4606      	mov	r6, r0
    d378:	d011      	beq.n	d39e <_svfprintf_r+0x20e>
    d37a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d37c:	442b      	add	r3, r5
    d37e:	9326      	str	r3, [sp, #152]	; 0x98
    d380:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d382:	3301      	adds	r3, #1
    d384:	2b07      	cmp	r3, #7
    d386:	e9ca 4500 	strd	r4, r5, [sl]
    d38a:	9325      	str	r3, [sp, #148]	; 0x94
    d38c:	dc1c      	bgt.n	d3c8 <_svfprintf_r+0x238>
    d38e:	f10a 0a08 	add.w	sl, sl, #8
    d392:	9b04      	ldr	r3, [sp, #16]
    d394:	442b      	add	r3, r5
    d396:	9304      	str	r3, [sp, #16]
    d398:	2e00      	cmp	r6, #0
    d39a:	f47f af47 	bne.w	d22c <_svfprintf_r+0x9c>
    d39e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	f041 820b 	bne.w	e7bc <_svfprintf_r+0x162c>
    d3a6:	ee1b 3a10 	vmov	r3, s22
    d3aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d3ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    d3b2:	9b04      	ldr	r3, [sp, #16]
    d3b4:	bf18      	it	ne
    d3b6:	f04f 33ff 	movne.w	r3, #4294967295
    d3ba:	9304      	str	r3, [sp, #16]
    d3bc:	9804      	ldr	r0, [sp, #16]
    d3be:	b051      	add	sp, #324	; 0x144
    d3c0:	ecbd 8b08 	vpop	{d8-d11}
    d3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3c8:	ee1b 1a10 	vmov	r1, s22
    d3cc:	aa24      	add	r2, sp, #144	; 0x90
    d3ce:	4658      	mov	r0, fp
    d3d0:	f004 fd6a 	bl	11ea8 <__ssprint_r>
    d3d4:	2800      	cmp	r0, #0
    d3d6:	d1e6      	bne.n	d3a6 <_svfprintf_r+0x216>
    d3d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d3dc:	e7d9      	b.n	d392 <_svfprintf_r+0x202>
    d3de:	bf00      	nop
	...
    d3e8:	ffffffff 	.word	0xffffffff
    d3ec:	7fefffff 	.word	0x7fefffff
    d3f0:	20008770 	.word	0x20008770
    d3f4:	930b      	str	r3, [sp, #44]	; 0x2c
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d0d1      	beq.n	d39e <_svfprintf_r+0x20e>
    d3fa:	2100      	movs	r1, #0
    d3fc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d400:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    d404:	2301      	movs	r3, #1
    d406:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d40a:	9302      	str	r3, [sp, #8]
    d40c:	9107      	str	r1, [sp, #28]
    d40e:	9305      	str	r3, [sp, #20]
    d410:	9103      	str	r1, [sp, #12]
    d412:	910f      	str	r1, [sp, #60]	; 0x3c
    d414:	ac37      	add	r4, sp, #220	; 0xdc
    d416:	f018 0302 	ands.w	r3, r8, #2
    d41a:	9309      	str	r3, [sp, #36]	; 0x24
    d41c:	d002      	beq.n	d424 <_svfprintf_r+0x294>
    d41e:	9b02      	ldr	r3, [sp, #8]
    d420:	3302      	adds	r3, #2
    d422:	9302      	str	r3, [sp, #8]
    d424:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    d428:	930a      	str	r3, [sp, #40]	; 0x28
    d42a:	d105      	bne.n	d438 <_svfprintf_r+0x2a8>
    d42c:	9b06      	ldr	r3, [sp, #24]
    d42e:	9a02      	ldr	r2, [sp, #8]
    d430:	1a9d      	subs	r5, r3, r2
    d432:	2d00      	cmp	r5, #0
    d434:	f300 8369 	bgt.w	db0a <_svfprintf_r+0x97a>
    d438:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d43a:	b189      	cbz	r1, d460 <_svfprintf_r+0x2d0>
    d43c:	9925      	ldr	r1, [sp, #148]	; 0x94
    d43e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    d442:	3101      	adds	r1, #1
    d444:	3201      	adds	r2, #1
    d446:	f8ca 0000 	str.w	r0, [sl]
    d44a:	2907      	cmp	r1, #7
    d44c:	f04f 0001 	mov.w	r0, #1
    d450:	9226      	str	r2, [sp, #152]	; 0x98
    d452:	9125      	str	r1, [sp, #148]	; 0x94
    d454:	f8ca 0004 	str.w	r0, [sl, #4]
    d458:	f300 83a2 	bgt.w	dba0 <_svfprintf_r+0xa10>
    d45c:	f10a 0a08 	add.w	sl, sl, #8
    d460:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d462:	b183      	cbz	r3, d486 <_svfprintf_r+0x2f6>
    d464:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d466:	a91a      	add	r1, sp, #104	; 0x68
    d468:	3301      	adds	r3, #1
    d46a:	3202      	adds	r2, #2
    d46c:	f8ca 1000 	str.w	r1, [sl]
    d470:	2b07      	cmp	r3, #7
    d472:	f04f 0102 	mov.w	r1, #2
    d476:	9226      	str	r2, [sp, #152]	; 0x98
    d478:	9325      	str	r3, [sp, #148]	; 0x94
    d47a:	f8ca 1004 	str.w	r1, [sl, #4]
    d47e:	f300 83a3 	bgt.w	dbc8 <_svfprintf_r+0xa38>
    d482:	f10a 0a08 	add.w	sl, sl, #8
    d486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d488:	2b80      	cmp	r3, #128	; 0x80
    d48a:	f000 826c 	beq.w	d966 <_svfprintf_r+0x7d6>
    d48e:	9b03      	ldr	r3, [sp, #12]
    d490:	9905      	ldr	r1, [sp, #20]
    d492:	1a5d      	subs	r5, r3, r1
    d494:	2d00      	cmp	r5, #0
    d496:	f300 82a5 	bgt.w	d9e4 <_svfprintf_r+0x854>
    d49a:	f418 7f80 	tst.w	r8, #256	; 0x100
    d49e:	f040 820d 	bne.w	d8bc <_svfprintf_r+0x72c>
    d4a2:	9b05      	ldr	r3, [sp, #20]
    d4a4:	f8ca 3004 	str.w	r3, [sl, #4]
    d4a8:	441a      	add	r2, r3
    d4aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d4ac:	f8ca 4000 	str.w	r4, [sl]
    d4b0:	3301      	adds	r3, #1
    d4b2:	2b07      	cmp	r3, #7
    d4b4:	9226      	str	r2, [sp, #152]	; 0x98
    d4b6:	9325      	str	r3, [sp, #148]	; 0x94
    d4b8:	f300 831b 	bgt.w	daf2 <_svfprintf_r+0x962>
    d4bc:	f10a 0a08 	add.w	sl, sl, #8
    d4c0:	f018 0f04 	tst.w	r8, #4
    d4c4:	d005      	beq.n	d4d2 <_svfprintf_r+0x342>
    d4c6:	9b06      	ldr	r3, [sp, #24]
    d4c8:	9902      	ldr	r1, [sp, #8]
    d4ca:	1a5c      	subs	r4, r3, r1
    d4cc:	2c00      	cmp	r4, #0
    d4ce:	f300 8388 	bgt.w	dbe2 <_svfprintf_r+0xa52>
    d4d2:	9b04      	ldr	r3, [sp, #16]
    d4d4:	9906      	ldr	r1, [sp, #24]
    d4d6:	9802      	ldr	r0, [sp, #8]
    d4d8:	4281      	cmp	r1, r0
    d4da:	bfac      	ite	ge
    d4dc:	185b      	addge	r3, r3, r1
    d4de:	181b      	addlt	r3, r3, r0
    d4e0:	9304      	str	r3, [sp, #16]
    d4e2:	2a00      	cmp	r2, #0
    d4e4:	f040 82b0 	bne.w	da48 <_svfprintf_r+0x8b8>
    d4e8:	2300      	movs	r3, #0
    d4ea:	9325      	str	r3, [sp, #148]	; 0x94
    d4ec:	9b07      	ldr	r3, [sp, #28]
    d4ee:	b11b      	cbz	r3, d4f8 <_svfprintf_r+0x368>
    d4f0:	9907      	ldr	r1, [sp, #28]
    d4f2:	4658      	mov	r0, fp
    d4f4:	f7fe fbd6 	bl	bca4 <_free_r>
    d4f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d4fc:	464c      	mov	r4, r9
    d4fe:	e679      	b.n	d1f4 <_svfprintf_r+0x64>
    d500:	930b      	str	r3, [sp, #44]	; 0x2c
    d502:	9b08      	ldr	r3, [sp, #32]
    d504:	3307      	adds	r3, #7
    d506:	f023 0307 	bic.w	r3, r3, #7
    d50a:	ecb3 8b02 	vldmia	r3!, {d8}
    d50e:	eeb0 7bc8 	vabs.f64	d7, d8
    d512:	eeb4 7b49 	vcmp.f64	d7, d9
    d516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d51a:	9308      	str	r3, [sp, #32]
    d51c:	f340 84e9 	ble.w	def2 <_svfprintf_r+0xd62>
    d520:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    d524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d528:	f101 8059 	bmi.w	e5de <_svfprintf_r+0x144e>
    d52c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d530:	4cab      	ldr	r4, [pc, #684]	; (d7e0 <_svfprintf_r+0x650>)
    d532:	4bac      	ldr	r3, [pc, #688]	; (d7e4 <_svfprintf_r+0x654>)
    d534:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    d538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d53a:	2a47      	cmp	r2, #71	; 0x47
    d53c:	bfc8      	it	gt
    d53e:	461c      	movgt	r4, r3
    d540:	2300      	movs	r3, #0
    d542:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d546:	2203      	movs	r2, #3
    d548:	9307      	str	r3, [sp, #28]
    d54a:	9202      	str	r2, [sp, #8]
    d54c:	9205      	str	r2, [sp, #20]
    d54e:	9303      	str	r3, [sp, #12]
    d550:	930f      	str	r3, [sp, #60]	; 0x3c
    d552:	2900      	cmp	r1, #0
    d554:	f43f af5f 	beq.w	d416 <_svfprintf_r+0x286>
    d558:	9b02      	ldr	r3, [sp, #8]
    d55a:	3301      	adds	r3, #1
    d55c:	9302      	str	r3, [sp, #8]
    d55e:	e75a      	b.n	d416 <_svfprintf_r+0x286>
    d560:	2b43      	cmp	r3, #67	; 0x43
    d562:	930b      	str	r3, [sp, #44]	; 0x2c
    d564:	d003      	beq.n	d56e <_svfprintf_r+0x3de>
    d566:	f018 0f10 	tst.w	r8, #16
    d56a:	f000 855d 	beq.w	e028 <_svfprintf_r+0xe98>
    d56e:	9d08      	ldr	r5, [sp, #32]
    d570:	2208      	movs	r2, #8
    d572:	2100      	movs	r1, #0
    d574:	a822      	add	r0, sp, #136	; 0x88
    d576:	ac37      	add	r4, sp, #220	; 0xdc
    d578:	f7fd ff3c 	bl	b3f4 <memset>
    d57c:	ab22      	add	r3, sp, #136	; 0x88
    d57e:	f855 2b04 	ldr.w	r2, [r5], #4
    d582:	4621      	mov	r1, r4
    d584:	4658      	mov	r0, fp
    d586:	f004 fb65 	bl	11c54 <_wcrtomb_r>
    d58a:	4603      	mov	r3, r0
    d58c:	3301      	adds	r3, #1
    d58e:	9005      	str	r0, [sp, #20]
    d590:	f001 82ee 	beq.w	eb70 <_svfprintf_r+0x19e0>
    d594:	9b05      	ldr	r3, [sp, #20]
    d596:	9508      	str	r5, [sp, #32]
    d598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d59c:	9302      	str	r3, [sp, #8]
    d59e:	2100      	movs	r1, #0
    d5a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d5a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d5a8:	9107      	str	r1, [sp, #28]
    d5aa:	9103      	str	r1, [sp, #12]
    d5ac:	910f      	str	r1, [sp, #60]	; 0x3c
    d5ae:	e732      	b.n	d416 <_svfprintf_r+0x286>
    d5b0:	930b      	str	r3, [sp, #44]	; 0x2c
    d5b2:	9b08      	ldr	r3, [sp, #32]
    d5b4:	461a      	mov	r2, r3
    d5b6:	2300      	movs	r3, #0
    d5b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d5bc:	4613      	mov	r3, r2
    d5be:	f853 4b04 	ldr.w	r4, [r3], #4
    d5c2:	9308      	str	r3, [sp, #32]
    d5c4:	2c00      	cmp	r4, #0
    d5c6:	f000 8548 	beq.w	e05a <_svfprintf_r+0xeca>
    d5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5cc:	2b53      	cmp	r3, #83	; 0x53
    d5ce:	f000 86ec 	beq.w	e3aa <_svfprintf_r+0x121a>
    d5d2:	f018 0310 	ands.w	r3, r8, #16
    d5d6:	930c      	str	r3, [sp, #48]	; 0x30
    d5d8:	f040 86e7 	bne.w	e3aa <_svfprintf_r+0x121a>
    d5dc:	9b03      	ldr	r3, [sp, #12]
    d5de:	1c5d      	adds	r5, r3, #1
    d5e0:	f001 80e5 	beq.w	e7ae <_svfprintf_r+0x161e>
    d5e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    d5e6:	461a      	mov	r2, r3
    d5e8:	4620      	mov	r0, r4
    d5ea:	f7fe f9e9 	bl	b9c0 <memchr>
    d5ee:	9007      	str	r0, [sp, #28]
    d5f0:	2800      	cmp	r0, #0
    d5f2:	f001 8328 	beq.w	ec46 <_svfprintf_r+0x1ab6>
    d5f6:	9b07      	ldr	r3, [sp, #28]
    d5f8:	1b1a      	subs	r2, r3, r4
    d5fa:	9205      	str	r2, [sp, #20]
    d5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d5fe:	9303      	str	r3, [sp, #12]
    d600:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d604:	930f      	str	r3, [sp, #60]	; 0x3c
    d606:	930d      	str	r3, [sp, #52]	; 0x34
    d608:	9307      	str	r3, [sp, #28]
    d60a:	2373      	movs	r3, #115	; 0x73
    d60c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d610:	9202      	str	r2, [sp, #8]
    d612:	930b      	str	r3, [sp, #44]	; 0x2c
    d614:	e79d      	b.n	d552 <_svfprintf_r+0x3c2>
    d616:	f018 0f20 	tst.w	r8, #32
    d61a:	930b      	str	r3, [sp, #44]	; 0x2c
    d61c:	9b08      	ldr	r3, [sp, #32]
    d61e:	d03d      	beq.n	d69c <_svfprintf_r+0x50c>
    d620:	3307      	adds	r3, #7
    d622:	f023 0307 	bic.w	r3, r3, #7
    d626:	461a      	mov	r2, r3
    d628:	4611      	mov	r1, r2
    d62a:	685b      	ldr	r3, [r3, #4]
    d62c:	f851 2b08 	ldr.w	r2, [r1], #8
    d630:	9108      	str	r1, [sp, #32]
    d632:	4619      	mov	r1, r3
    d634:	2b00      	cmp	r3, #0
    d636:	f2c0 840c 	blt.w	de52 <_svfprintf_r+0xcc2>
    d63a:	9b03      	ldr	r3, [sp, #12]
    d63c:	3301      	adds	r3, #1
    d63e:	f000 829e 	beq.w	db7e <_svfprintf_r+0x9ee>
    d642:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    d646:	ea52 0301 	orrs.w	r3, r2, r1
    d64a:	9002      	str	r0, [sp, #8]
    d64c:	f040 8299 	bne.w	db82 <_svfprintf_r+0x9f2>
    d650:	9b03      	ldr	r3, [sp, #12]
    d652:	2b00      	cmp	r3, #0
    d654:	f040 829a 	bne.w	db8c <_svfprintf_r+0x9fc>
    d658:	4680      	mov	r8, r0
    d65a:	2300      	movs	r3, #0
    d65c:	9303      	str	r3, [sp, #12]
    d65e:	9305      	str	r3, [sp, #20]
    d660:	ac50      	add	r4, sp, #320	; 0x140
    d662:	e106      	b.n	d872 <_svfprintf_r+0x6e2>
    d664:	9b08      	ldr	r3, [sp, #32]
    d666:	f853 2b04 	ldr.w	r2, [r3], #4
    d66a:	9206      	str	r2, [sp, #24]
    d66c:	2a00      	cmp	r2, #0
    d66e:	f280 8419 	bge.w	dea4 <_svfprintf_r+0xd14>
    d672:	9a06      	ldr	r2, [sp, #24]
    d674:	9308      	str	r3, [sp, #32]
    d676:	4252      	negs	r2, r2
    d678:	9206      	str	r2, [sp, #24]
    d67a:	f899 3000 	ldrb.w	r3, [r9]
    d67e:	f048 0804 	orr.w	r8, r8, #4
    d682:	e5e1      	b.n	d248 <_svfprintf_r+0xb8>
    d684:	f899 3000 	ldrb.w	r3, [r9]
    d688:	f048 0808 	orr.w	r8, r8, #8
    d68c:	e5dc      	b.n	d248 <_svfprintf_r+0xb8>
    d68e:	f048 0810 	orr.w	r8, r8, #16
    d692:	f018 0f20 	tst.w	r8, #32
    d696:	930b      	str	r3, [sp, #44]	; 0x2c
    d698:	9b08      	ldr	r3, [sp, #32]
    d69a:	d1c1      	bne.n	d620 <_svfprintf_r+0x490>
    d69c:	f018 0f10 	tst.w	r8, #16
    d6a0:	f040 840b 	bne.w	deba <_svfprintf_r+0xd2a>
    d6a4:	f018 0f40 	tst.w	r8, #64	; 0x40
    d6a8:	f000 8403 	beq.w	deb2 <_svfprintf_r+0xd22>
    d6ac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    d6b0:	9308      	str	r3, [sp, #32]
    d6b2:	17d1      	asrs	r1, r2, #31
    d6b4:	460b      	mov	r3, r1
    d6b6:	e7bd      	b.n	d634 <_svfprintf_r+0x4a4>
    d6b8:	9b08      	ldr	r3, [sp, #32]
    d6ba:	f048 0202 	orr.w	r2, r8, #2
    d6be:	9202      	str	r2, [sp, #8]
    d6c0:	f853 2b04 	ldr.w	r2, [r3], #4
    d6c4:	9308      	str	r3, [sp, #32]
    d6c6:	f647 0330 	movw	r3, #30768	; 0x7830
    d6ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    d6ce:	2078      	movs	r0, #120	; 0x78
    d6d0:	4b45      	ldr	r3, [pc, #276]	; (d7e8 <_svfprintf_r+0x658>)
    d6d2:	9311      	str	r3, [sp, #68]	; 0x44
    d6d4:	2100      	movs	r1, #0
    d6d6:	2302      	movs	r3, #2
    d6d8:	900b      	str	r0, [sp, #44]	; 0x2c
    d6da:	2000      	movs	r0, #0
    d6dc:	9c03      	ldr	r4, [sp, #12]
    d6de:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    d6e2:	1c60      	adds	r0, r4, #1
    d6e4:	f000 80ad 	beq.w	d842 <_svfprintf_r+0x6b2>
    d6e8:	9802      	ldr	r0, [sp, #8]
    d6ea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    d6ee:	ea52 0001 	orrs.w	r0, r2, r1
    d6f2:	f040 80a4 	bne.w	d83e <_svfprintf_r+0x6ae>
    d6f6:	2c00      	cmp	r4, #0
    d6f8:	f040 86ae 	bne.w	e458 <_svfprintf_r+0x12c8>
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d1ac      	bne.n	d65a <_svfprintf_r+0x4ca>
    d700:	9b02      	ldr	r3, [sp, #8]
    d702:	f013 0301 	ands.w	r3, r3, #1
    d706:	9305      	str	r3, [sp, #20]
    d708:	f000 83d1 	beq.w	deae <_svfprintf_r+0xd1e>
    d70c:	2330      	movs	r3, #48	; 0x30
    d70e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    d712:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d716:	e0ac      	b.n	d872 <_svfprintf_r+0x6e2>
    d718:	f018 0f20 	tst.w	r8, #32
    d71c:	f040 83d4 	bne.w	dec8 <_svfprintf_r+0xd38>
    d720:	f018 0f10 	tst.w	r8, #16
    d724:	f040 869f 	bne.w	e466 <_svfprintf_r+0x12d6>
    d728:	f018 0f40 	tst.w	r8, #64	; 0x40
    d72c:	f040 8797 	bne.w	e65e <_svfprintf_r+0x14ce>
    d730:	f418 7f00 	tst.w	r8, #512	; 0x200
    d734:	f000 8697 	beq.w	e466 <_svfprintf_r+0x12d6>
    d738:	9b08      	ldr	r3, [sp, #32]
    d73a:	9904      	ldr	r1, [sp, #16]
    d73c:	f853 2b04 	ldr.w	r2, [r3], #4
    d740:	9308      	str	r3, [sp, #32]
    d742:	7011      	strb	r1, [r2, #0]
    d744:	464c      	mov	r4, r9
    d746:	e555      	b.n	d1f4 <_svfprintf_r+0x64>
    d748:	f899 3000 	ldrb.w	r3, [r9]
    d74c:	2b68      	cmp	r3, #104	; 0x68
    d74e:	bf03      	ittte	eq
    d750:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d754:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    d758:	f109 0901 	addeq.w	r9, r9, #1
    d75c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    d760:	e572      	b.n	d248 <_svfprintf_r+0xb8>
    d762:	f899 3000 	ldrb.w	r3, [r9]
    d766:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    d76a:	e56d      	b.n	d248 <_svfprintf_r+0xb8>
    d76c:	f899 3000 	ldrb.w	r3, [r9]
    d770:	2b6c      	cmp	r3, #108	; 0x6c
    d772:	bf03      	ittte	eq
    d774:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d778:	f048 0820 	orreq.w	r8, r8, #32
    d77c:	f109 0901 	addeq.w	r9, r9, #1
    d780:	f048 0810 	orrne.w	r8, r8, #16
    d784:	e560      	b.n	d248 <_svfprintf_r+0xb8>
    d786:	930b      	str	r3, [sp, #44]	; 0x2c
    d788:	f048 0810 	orr.w	r8, r8, #16
    d78c:	f018 0120 	ands.w	r1, r8, #32
    d790:	f000 8351 	beq.w	de36 <_svfprintf_r+0xca6>
    d794:	9b08      	ldr	r3, [sp, #32]
    d796:	3307      	adds	r3, #7
    d798:	f023 0307 	bic.w	r3, r3, #7
    d79c:	6859      	ldr	r1, [r3, #4]
    d79e:	f853 2b08 	ldr.w	r2, [r3], #8
    d7a2:	9308      	str	r3, [sp, #32]
    d7a4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d7a8:	9302      	str	r3, [sp, #8]
    d7aa:	2300      	movs	r3, #0
    d7ac:	e795      	b.n	d6da <_svfprintf_r+0x54a>
    d7ae:	930b      	str	r3, [sp, #44]	; 0x2c
    d7b0:	f048 0310 	orr.w	r3, r8, #16
    d7b4:	9302      	str	r3, [sp, #8]
    d7b6:	9b02      	ldr	r3, [sp, #8]
    d7b8:	f013 0120 	ands.w	r1, r3, #32
    d7bc:	f000 8329 	beq.w	de12 <_svfprintf_r+0xc82>
    d7c0:	9b08      	ldr	r3, [sp, #32]
    d7c2:	3307      	adds	r3, #7
    d7c4:	f023 0307 	bic.w	r3, r3, #7
    d7c8:	6859      	ldr	r1, [r3, #4]
    d7ca:	f853 2b08 	ldr.w	r2, [r3], #8
    d7ce:	9308      	str	r3, [sp, #32]
    d7d0:	2301      	movs	r3, #1
    d7d2:	e782      	b.n	d6da <_svfprintf_r+0x54a>
    d7d4:	f899 3000 	ldrb.w	r3, [r9]
    d7d8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    d7dc:	e534      	b.n	d248 <_svfprintf_r+0xb8>
    d7de:	bf00      	nop
    d7e0:	20000dbc 	.word	0x20000dbc
    d7e4:	20000724 	.word	0x20000724
    d7e8:	20000dc4 	.word	0x20000dc4
    d7ec:	4649      	mov	r1, r9
    d7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
    d7f2:	2b2a      	cmp	r3, #42	; 0x2a
    d7f4:	f001 8249 	beq.w	ec8a <_svfprintf_r+0x1afa>
    d7f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d7fc:	2a09      	cmp	r2, #9
    d7fe:	4689      	mov	r9, r1
    d800:	bf98      	it	ls
    d802:	2100      	movls	r1, #0
    d804:	f201 8144 	bhi.w	ea90 <_svfprintf_r+0x1900>
    d808:	f819 3b01 	ldrb.w	r3, [r9], #1
    d80c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d810:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d814:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d818:	2a09      	cmp	r2, #9
    d81a:	d9f5      	bls.n	d808 <_svfprintf_r+0x678>
    d81c:	9103      	str	r1, [sp, #12]
    d81e:	e515      	b.n	d24c <_svfprintf_r+0xbc>
    d820:	f899 3000 	ldrb.w	r3, [r9]
    d824:	f048 0801 	orr.w	r8, r8, #1
    d828:	e50e      	b.n	d248 <_svfprintf_r+0xb8>
    d82a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    d82e:	2b00      	cmp	r3, #0
    d830:	f47f ad8f 	bne.w	d352 <_svfprintf_r+0x1c2>
    d834:	f899 3000 	ldrb.w	r3, [r9]
    d838:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    d83c:	e504      	b.n	d248 <_svfprintf_r+0xb8>
    d83e:	f8cd 8008 	str.w	r8, [sp, #8]
    d842:	2b01      	cmp	r3, #1
    d844:	f000 819d 	beq.w	db82 <_svfprintf_r+0x9f2>
    d848:	2b02      	cmp	r3, #2
    d84a:	ac50      	add	r4, sp, #320	; 0x140
    d84c:	d120      	bne.n	d890 <_svfprintf_r+0x700>
    d84e:	9811      	ldr	r0, [sp, #68]	; 0x44
    d850:	f002 030f 	and.w	r3, r2, #15
    d854:	0912      	lsrs	r2, r2, #4
    d856:	5cc3      	ldrb	r3, [r0, r3]
    d858:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d85c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d860:	0909      	lsrs	r1, r1, #4
    d862:	ea52 0301 	orrs.w	r3, r2, r1
    d866:	d1f3      	bne.n	d850 <_svfprintf_r+0x6c0>
    d868:	ab50      	add	r3, sp, #320	; 0x140
    d86a:	1b1b      	subs	r3, r3, r4
    d86c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d870:	9305      	str	r3, [sp, #20]
    d872:	9a05      	ldr	r2, [sp, #20]
    d874:	9803      	ldr	r0, [sp, #12]
    d876:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d87a:	4282      	cmp	r2, r0
    d87c:	f04f 0300 	mov.w	r3, #0
    d880:	bfb8      	it	lt
    d882:	4602      	movlt	r2, r0
    d884:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d888:	9307      	str	r3, [sp, #28]
    d88a:	9202      	str	r2, [sp, #8]
    d88c:	930f      	str	r3, [sp, #60]	; 0x3c
    d88e:	e660      	b.n	d552 <_svfprintf_r+0x3c2>
    d890:	f002 0307 	and.w	r3, r2, #7
    d894:	08d2      	lsrs	r2, r2, #3
    d896:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    d89a:	08c9      	lsrs	r1, r1, #3
    d89c:	3330      	adds	r3, #48	; 0x30
    d89e:	ea52 0501 	orrs.w	r5, r2, r1
    d8a2:	4620      	mov	r0, r4
    d8a4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d8a8:	d1f2      	bne.n	d890 <_svfprintf_r+0x700>
    d8aa:	9a02      	ldr	r2, [sp, #8]
    d8ac:	07d1      	lsls	r1, r2, #31
    d8ae:	f100 824d 	bmi.w	dd4c <_svfprintf_r+0xbbc>
    d8b2:	ab50      	add	r3, sp, #320	; 0x140
    d8b4:	1b1b      	subs	r3, r3, r4
    d8b6:	4690      	mov	r8, r2
    d8b8:	9305      	str	r3, [sp, #20]
    d8ba:	e7da      	b.n	d872 <_svfprintf_r+0x6e2>
    d8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d8be:	2b65      	cmp	r3, #101	; 0x65
    d8c0:	f340 80d4 	ble.w	da6c <_svfprintf_r+0x8dc>
    d8c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d8cc:	f040 81c1 	bne.w	dc52 <_svfprintf_r+0xac2>
    d8d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d8d2:	49ba      	ldr	r1, [pc, #744]	; (dbbc <_svfprintf_r+0xa2c>)
    d8d4:	f8ca 1000 	str.w	r1, [sl]
    d8d8:	3301      	adds	r3, #1
    d8da:	3201      	adds	r2, #1
    d8dc:	2101      	movs	r1, #1
    d8de:	2b07      	cmp	r3, #7
    d8e0:	9226      	str	r2, [sp, #152]	; 0x98
    d8e2:	9325      	str	r3, [sp, #148]	; 0x94
    d8e4:	f8ca 1004 	str.w	r1, [sl, #4]
    d8e8:	f300 8551 	bgt.w	e38e <_svfprintf_r+0x11fe>
    d8ec:	f10a 0a08 	add.w	sl, sl, #8
    d8f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d8f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    d8f4:	428b      	cmp	r3, r1
    d8f6:	f280 82d0 	bge.w	de9a <_svfprintf_r+0xd0a>
    d8fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d8fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    d8fe:	441a      	add	r2, r3
    d900:	e9ca 1300 	strd	r1, r3, [sl]
    d904:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d906:	9226      	str	r2, [sp, #152]	; 0x98
    d908:	3301      	adds	r3, #1
    d90a:	2b07      	cmp	r3, #7
    d90c:	9325      	str	r3, [sp, #148]	; 0x94
    d90e:	f300 8397 	bgt.w	e040 <_svfprintf_r+0xeb0>
    d912:	f10a 0a08 	add.w	sl, sl, #8
    d916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d918:	1e5c      	subs	r4, r3, #1
    d91a:	2c00      	cmp	r4, #0
    d91c:	f77f add0 	ble.w	d4c0 <_svfprintf_r+0x330>
    d920:	2c10      	cmp	r4, #16
    d922:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d924:	f340 856e 	ble.w	e404 <_svfprintf_r+0x1274>
    d928:	ee1b 6a10 	vmov	r6, s22
    d92c:	2510      	movs	r5, #16
    d92e:	e005      	b.n	d93c <_svfprintf_r+0x7ac>
    d930:	f10a 0a08 	add.w	sl, sl, #8
    d934:	3c10      	subs	r4, #16
    d936:	2c10      	cmp	r4, #16
    d938:	f340 8564 	ble.w	e404 <_svfprintf_r+0x1274>
    d93c:	3301      	adds	r3, #1
    d93e:	49a0      	ldr	r1, [pc, #640]	; (dbc0 <_svfprintf_r+0xa30>)
    d940:	3210      	adds	r2, #16
    d942:	2b07      	cmp	r3, #7
    d944:	e9ca 1500 	strd	r1, r5, [sl]
    d948:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d94c:	ddf0      	ble.n	d930 <_svfprintf_r+0x7a0>
    d94e:	aa24      	add	r2, sp, #144	; 0x90
    d950:	4631      	mov	r1, r6
    d952:	4658      	mov	r0, fp
    d954:	f004 faa8 	bl	11ea8 <__ssprint_r>
    d958:	2800      	cmp	r0, #0
    d95a:	d17e      	bne.n	da5a <_svfprintf_r+0x8ca>
    d95c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d960:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d964:	e7e6      	b.n	d934 <_svfprintf_r+0x7a4>
    d966:	9b06      	ldr	r3, [sp, #24]
    d968:	9902      	ldr	r1, [sp, #8]
    d96a:	1a5d      	subs	r5, r3, r1
    d96c:	2d00      	cmp	r5, #0
    d96e:	f77f ad8e 	ble.w	d48e <_svfprintf_r+0x2fe>
    d972:	2d10      	cmp	r5, #16
    d974:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d976:	dd21      	ble.n	d9bc <_svfprintf_r+0x82c>
    d978:	9409      	str	r4, [sp, #36]	; 0x24
    d97a:	2610      	movs	r6, #16
    d97c:	ee1b 4a10 	vmov	r4, s22
    d980:	e004      	b.n	d98c <_svfprintf_r+0x7fc>
    d982:	3d10      	subs	r5, #16
    d984:	2d10      	cmp	r5, #16
    d986:	f10a 0a08 	add.w	sl, sl, #8
    d98a:	dd16      	ble.n	d9ba <_svfprintf_r+0x82a>
    d98c:	3301      	adds	r3, #1
    d98e:	498c      	ldr	r1, [pc, #560]	; (dbc0 <_svfprintf_r+0xa30>)
    d990:	3210      	adds	r2, #16
    d992:	2b07      	cmp	r3, #7
    d994:	e9ca 1600 	strd	r1, r6, [sl]
    d998:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d99c:	ddf1      	ble.n	d982 <_svfprintf_r+0x7f2>
    d99e:	aa24      	add	r2, sp, #144	; 0x90
    d9a0:	4621      	mov	r1, r4
    d9a2:	4658      	mov	r0, fp
    d9a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d9a8:	f004 fa7e 	bl	11ea8 <__ssprint_r>
    d9ac:	2800      	cmp	r0, #0
    d9ae:	d154      	bne.n	da5a <_svfprintf_r+0x8ca>
    d9b0:	3d10      	subs	r5, #16
    d9b2:	2d10      	cmp	r5, #16
    d9b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d9b8:	dce8      	bgt.n	d98c <_svfprintf_r+0x7fc>
    d9ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d9bc:	4980      	ldr	r1, [pc, #512]	; (dbc0 <_svfprintf_r+0xa30>)
    d9be:	f8ca 5004 	str.w	r5, [sl, #4]
    d9c2:	3301      	adds	r3, #1
    d9c4:	442a      	add	r2, r5
    d9c6:	2b07      	cmp	r3, #7
    d9c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d9cc:	f8ca 1000 	str.w	r1, [sl]
    d9d0:	f300 8526 	bgt.w	e420 <_svfprintf_r+0x1290>
    d9d4:	9b03      	ldr	r3, [sp, #12]
    d9d6:	9905      	ldr	r1, [sp, #20]
    d9d8:	1a5d      	subs	r5, r3, r1
    d9da:	2d00      	cmp	r5, #0
    d9dc:	f10a 0a08 	add.w	sl, sl, #8
    d9e0:	f77f ad5b 	ble.w	d49a <_svfprintf_r+0x30a>
    d9e4:	2d10      	cmp	r5, #16
    d9e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9e8:	dd1f      	ble.n	da2a <_svfprintf_r+0x89a>
    d9ea:	4651      	mov	r1, sl
    d9ec:	2610      	movs	r6, #16
    d9ee:	ee1b aa10 	vmov	sl, s22
    d9f2:	e004      	b.n	d9fe <_svfprintf_r+0x86e>
    d9f4:	3d10      	subs	r5, #16
    d9f6:	2d10      	cmp	r5, #16
    d9f8:	f101 0108 	add.w	r1, r1, #8
    d9fc:	dd14      	ble.n	da28 <_svfprintf_r+0x898>
    d9fe:	3301      	adds	r3, #1
    da00:	486f      	ldr	r0, [pc, #444]	; (dbc0 <_svfprintf_r+0xa30>)
    da02:	3210      	adds	r2, #16
    da04:	2b07      	cmp	r3, #7
    da06:	e9c1 0600 	strd	r0, r6, [r1]
    da0a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da0e:	ddf1      	ble.n	d9f4 <_svfprintf_r+0x864>
    da10:	aa24      	add	r2, sp, #144	; 0x90
    da12:	4651      	mov	r1, sl
    da14:	4658      	mov	r0, fp
    da16:	f004 fa47 	bl	11ea8 <__ssprint_r>
    da1a:	b9f0      	cbnz	r0, da5a <_svfprintf_r+0x8ca>
    da1c:	3d10      	subs	r5, #16
    da1e:	2d10      	cmp	r5, #16
    da20:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    da24:	a927      	add	r1, sp, #156	; 0x9c
    da26:	dcea      	bgt.n	d9fe <_svfprintf_r+0x86e>
    da28:	468a      	mov	sl, r1
    da2a:	3301      	adds	r3, #1
    da2c:	4964      	ldr	r1, [pc, #400]	; (dbc0 <_svfprintf_r+0xa30>)
    da2e:	f8ca 5004 	str.w	r5, [sl, #4]
    da32:	442a      	add	r2, r5
    da34:	2b07      	cmp	r3, #7
    da36:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da3a:	f8ca 1000 	str.w	r1, [sl]
    da3e:	f300 81da 	bgt.w	ddf6 <_svfprintf_r+0xc66>
    da42:	f10a 0a08 	add.w	sl, sl, #8
    da46:	e528      	b.n	d49a <_svfprintf_r+0x30a>
    da48:	ee1b 1a10 	vmov	r1, s22
    da4c:	aa24      	add	r2, sp, #144	; 0x90
    da4e:	4658      	mov	r0, fp
    da50:	f004 fa2a 	bl	11ea8 <__ssprint_r>
    da54:	2800      	cmp	r0, #0
    da56:	f43f ad47 	beq.w	d4e8 <_svfprintf_r+0x358>
    da5a:	9b07      	ldr	r3, [sp, #28]
    da5c:	2b00      	cmp	r3, #0
    da5e:	f43f aca2 	beq.w	d3a6 <_svfprintf_r+0x216>
    da62:	9907      	ldr	r1, [sp, #28]
    da64:	4658      	mov	r0, fp
    da66:	f7fe f91d 	bl	bca4 <_free_r>
    da6a:	e49c      	b.n	d3a6 <_svfprintf_r+0x216>
    da6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    da6e:	2b01      	cmp	r3, #1
    da70:	f340 817a 	ble.w	dd68 <_svfprintf_r+0xbd8>
    da74:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da76:	f8ca 4000 	str.w	r4, [sl]
    da7a:	3301      	adds	r3, #1
    da7c:	3201      	adds	r2, #1
    da7e:	2101      	movs	r1, #1
    da80:	2b07      	cmp	r3, #7
    da82:	9226      	str	r2, [sp, #152]	; 0x98
    da84:	9325      	str	r3, [sp, #148]	; 0x94
    da86:	f8ca 1004 	str.w	r1, [sl, #4]
    da8a:	f300 81f8 	bgt.w	de7e <_svfprintf_r+0xcee>
    da8e:	f10a 0a08 	add.w	sl, sl, #8
    da92:	9910      	ldr	r1, [sp, #64]	; 0x40
    da94:	9812      	ldr	r0, [sp, #72]	; 0x48
    da96:	3301      	adds	r3, #1
    da98:	440a      	add	r2, r1
    da9a:	2b07      	cmp	r3, #7
    da9c:	e9ca 0100 	strd	r0, r1, [sl]
    daa0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    daa4:	f300 81dd 	bgt.w	de62 <_svfprintf_r+0xcd2>
    daa8:	f10a 0a08 	add.w	sl, sl, #8
    daac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    dab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dab4:	f000 8177 	beq.w	dda6 <_svfprintf_r+0xc16>
    dab8:	990e      	ldr	r1, [sp, #56]	; 0x38
    daba:	3301      	adds	r3, #1
    dabc:	3901      	subs	r1, #1
    dabe:	3401      	adds	r4, #1
    dac0:	440a      	add	r2, r1
    dac2:	2b07      	cmp	r3, #7
    dac4:	f8ca 4000 	str.w	r4, [sl]
    dac8:	9325      	str	r3, [sp, #148]	; 0x94
    daca:	f8ca 1004 	str.w	r1, [sl, #4]
    dace:	9226      	str	r2, [sp, #152]	; 0x98
    dad0:	f300 815b 	bgt.w	dd8a <_svfprintf_r+0xbfa>
    dad4:	f10a 0a08 	add.w	sl, sl, #8
    dad8:	9914      	ldr	r1, [sp, #80]	; 0x50
    dada:	f8ca 1004 	str.w	r1, [sl, #4]
    dade:	3301      	adds	r3, #1
    dae0:	440a      	add	r2, r1
    dae2:	2b07      	cmp	r3, #7
    dae4:	a91e      	add	r1, sp, #120	; 0x78
    dae6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    daea:	f8ca 1000 	str.w	r1, [sl]
    daee:	f77f ace5 	ble.w	d4bc <_svfprintf_r+0x32c>
    daf2:	ee1b 1a10 	vmov	r1, s22
    daf6:	aa24      	add	r2, sp, #144	; 0x90
    daf8:	4658      	mov	r0, fp
    dafa:	f004 f9d5 	bl	11ea8 <__ssprint_r>
    dafe:	2800      	cmp	r0, #0
    db00:	d1ab      	bne.n	da5a <_svfprintf_r+0x8ca>
    db02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    db04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db08:	e4da      	b.n	d4c0 <_svfprintf_r+0x330>
    db0a:	2d10      	cmp	r5, #16
    db0c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    db10:	4e2c      	ldr	r6, [pc, #176]	; (dbc4 <_svfprintf_r+0xa34>)
    db12:	dd24      	ble.n	db5e <_svfprintf_r+0x9ce>
    db14:	9417      	str	r4, [sp, #92]	; 0x5c
    db16:	2310      	movs	r3, #16
    db18:	ee1b 4a10 	vmov	r4, s22
    db1c:	4608      	mov	r0, r1
    db1e:	e004      	b.n	db2a <_svfprintf_r+0x99a>
    db20:	3d10      	subs	r5, #16
    db22:	2d10      	cmp	r5, #16
    db24:	f10a 0a08 	add.w	sl, sl, #8
    db28:	dd17      	ble.n	db5a <_svfprintf_r+0x9ca>
    db2a:	3001      	adds	r0, #1
    db2c:	3210      	adds	r2, #16
    db2e:	2807      	cmp	r0, #7
    db30:	e9ca 6300 	strd	r6, r3, [sl]
    db34:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    db38:	ddf2      	ble.n	db20 <_svfprintf_r+0x990>
    db3a:	aa24      	add	r2, sp, #144	; 0x90
    db3c:	4621      	mov	r1, r4
    db3e:	4658      	mov	r0, fp
    db40:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db44:	f004 f9b0 	bl	11ea8 <__ssprint_r>
    db48:	2800      	cmp	r0, #0
    db4a:	d186      	bne.n	da5a <_svfprintf_r+0x8ca>
    db4c:	3d10      	subs	r5, #16
    db4e:	2d10      	cmp	r5, #16
    db50:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    db54:	f04f 0310 	mov.w	r3, #16
    db58:	dce7      	bgt.n	db2a <_svfprintf_r+0x99a>
    db5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    db5c:	4601      	mov	r1, r0
    db5e:	3101      	adds	r1, #1
    db60:	442a      	add	r2, r5
    db62:	2907      	cmp	r1, #7
    db64:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    db68:	f8ca 6000 	str.w	r6, [sl]
    db6c:	f8ca 5004 	str.w	r5, [sl, #4]
    db70:	f300 83bd 	bgt.w	e2ee <_svfprintf_r+0x115e>
    db74:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    db78:	f10a 0a08 	add.w	sl, sl, #8
    db7c:	e45d      	b.n	d43a <_svfprintf_r+0x2aa>
    db7e:	f8cd 8008 	str.w	r8, [sp, #8]
    db82:	2a0a      	cmp	r2, #10
    db84:	f171 0300 	sbcs.w	r3, r1, #0
    db88:	f080 8345 	bcs.w	e216 <_svfprintf_r+0x1086>
    db8c:	3230      	adds	r2, #48	; 0x30
    db8e:	2301      	movs	r3, #1
    db90:	f8dd 8008 	ldr.w	r8, [sp, #8]
    db94:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    db98:	9305      	str	r3, [sp, #20]
    db9a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    db9e:	e668      	b.n	d872 <_svfprintf_r+0x6e2>
    dba0:	ee1b 1a10 	vmov	r1, s22
    dba4:	aa24      	add	r2, sp, #144	; 0x90
    dba6:	4658      	mov	r0, fp
    dba8:	f004 f97e 	bl	11ea8 <__ssprint_r>
    dbac:	2800      	cmp	r0, #0
    dbae:	f47f af54 	bne.w	da5a <_svfprintf_r+0x8ca>
    dbb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dbb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dbb8:	e452      	b.n	d460 <_svfprintf_r+0x2d0>
    dbba:	bf00      	nop
    dbbc:	20000df4 	.word	0x20000df4
    dbc0:	20008608 	.word	0x20008608
    dbc4:	20002870 	.word	0x20002870
    dbc8:	ee1b 1a10 	vmov	r1, s22
    dbcc:	aa24      	add	r2, sp, #144	; 0x90
    dbce:	4658      	mov	r0, fp
    dbd0:	f004 f96a 	bl	11ea8 <__ssprint_r>
    dbd4:	2800      	cmp	r0, #0
    dbd6:	f47f af40 	bne.w	da5a <_svfprintf_r+0x8ca>
    dbda:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dbdc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dbe0:	e451      	b.n	d486 <_svfprintf_r+0x2f6>
    dbe2:	2c10      	cmp	r4, #16
    dbe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbe6:	4ebe      	ldr	r6, [pc, #760]	; (dee0 <_svfprintf_r+0xd50>)
    dbe8:	dd1f      	ble.n	dc2a <_svfprintf_r+0xa9a>
    dbea:	ee1b 8a10 	vmov	r8, s22
    dbee:	2510      	movs	r5, #16
    dbf0:	e004      	b.n	dbfc <_svfprintf_r+0xa6c>
    dbf2:	3c10      	subs	r4, #16
    dbf4:	2c10      	cmp	r4, #16
    dbf6:	f10a 0a08 	add.w	sl, sl, #8
    dbfa:	dd16      	ble.n	dc2a <_svfprintf_r+0xa9a>
    dbfc:	3301      	adds	r3, #1
    dbfe:	3210      	adds	r2, #16
    dc00:	2b07      	cmp	r3, #7
    dc02:	e9ca 6500 	strd	r6, r5, [sl]
    dc06:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dc0a:	ddf2      	ble.n	dbf2 <_svfprintf_r+0xa62>
    dc0c:	aa24      	add	r2, sp, #144	; 0x90
    dc0e:	4641      	mov	r1, r8
    dc10:	4658      	mov	r0, fp
    dc12:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dc16:	f004 f947 	bl	11ea8 <__ssprint_r>
    dc1a:	2800      	cmp	r0, #0
    dc1c:	f47f af1d 	bne.w	da5a <_svfprintf_r+0x8ca>
    dc20:	3c10      	subs	r4, #16
    dc22:	2c10      	cmp	r4, #16
    dc24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dc28:	dce8      	bgt.n	dbfc <_svfprintf_r+0xa6c>
    dc2a:	3301      	adds	r3, #1
    dc2c:	4422      	add	r2, r4
    dc2e:	2b07      	cmp	r3, #7
    dc30:	e9ca 6400 	strd	r6, r4, [sl]
    dc34:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dc38:	f77f ac4b 	ble.w	d4d2 <_svfprintf_r+0x342>
    dc3c:	ee1b 1a10 	vmov	r1, s22
    dc40:	aa24      	add	r2, sp, #144	; 0x90
    dc42:	4658      	mov	r0, fp
    dc44:	f004 f930 	bl	11ea8 <__ssprint_r>
    dc48:	2800      	cmp	r0, #0
    dc4a:	f47f af06 	bne.w	da5a <_svfprintf_r+0x8ca>
    dc4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dc50:	e43f      	b.n	d4d2 <_svfprintf_r+0x342>
    dc52:	991b      	ldr	r1, [sp, #108]	; 0x6c
    dc54:	2900      	cmp	r1, #0
    dc56:	f340 835a 	ble.w	e30e <_svfprintf_r+0x117e>
    dc5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    dc5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc5e:	429e      	cmp	r6, r3
    dc60:	bfa8      	it	ge
    dc62:	461e      	movge	r6, r3
    dc64:	2e00      	cmp	r6, #0
    dc66:	dd0b      	ble.n	dc80 <_svfprintf_r+0xaf0>
    dc68:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dc6a:	3301      	adds	r3, #1
    dc6c:	4432      	add	r2, r6
    dc6e:	2b07      	cmp	r3, #7
    dc70:	e9ca 4600 	strd	r4, r6, [sl]
    dc74:	9226      	str	r2, [sp, #152]	; 0x98
    dc76:	9325      	str	r3, [sp, #148]	; 0x94
    dc78:	f300 8689 	bgt.w	e98e <_svfprintf_r+0x17fe>
    dc7c:	f10a 0a08 	add.w	sl, sl, #8
    dc80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    dc82:	2e00      	cmp	r6, #0
    dc84:	bfa8      	it	ge
    dc86:	1bad      	subge	r5, r5, r6
    dc88:	2d00      	cmp	r5, #0
    dc8a:	f300 8203 	bgt.w	e094 <_svfprintf_r+0xf04>
    dc8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc90:	f418 6f80 	tst.w	r8, #1024	; 0x400
    dc94:	4423      	add	r3, r4
    dc96:	9305      	str	r3, [sp, #20]
    dc98:	f040 821f 	bne.w	e0da <_svfprintf_r+0xf4a>
    dc9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dc9e:	990e      	ldr	r1, [sp, #56]	; 0x38
    dca0:	428b      	cmp	r3, r1
    dca2:	db03      	blt.n	dcac <_svfprintf_r+0xb1c>
    dca4:	f018 0f01 	tst.w	r8, #1
    dca8:	f000 84cf 	beq.w	e64a <_svfprintf_r+0x14ba>
    dcac:	9910      	ldr	r1, [sp, #64]	; 0x40
    dcae:	9812      	ldr	r0, [sp, #72]	; 0x48
    dcb0:	440a      	add	r2, r1
    dcb2:	e9ca 0100 	strd	r0, r1, [sl]
    dcb6:	9925      	ldr	r1, [sp, #148]	; 0x94
    dcb8:	9226      	str	r2, [sp, #152]	; 0x98
    dcba:	3101      	adds	r1, #1
    dcbc:	2907      	cmp	r1, #7
    dcbe:	9125      	str	r1, [sp, #148]	; 0x94
    dcc0:	f300 86a5 	bgt.w	ea0e <_svfprintf_r+0x187e>
    dcc4:	f10a 0a08 	add.w	sl, sl, #8
    dcc8:	990e      	ldr	r1, [sp, #56]	; 0x38
    dcca:	1865      	adds	r5, r4, r1
    dccc:	1acc      	subs	r4, r1, r3
    dcce:	9b05      	ldr	r3, [sp, #20]
    dcd0:	1aed      	subs	r5, r5, r3
    dcd2:	42a5      	cmp	r5, r4
    dcd4:	bfa8      	it	ge
    dcd6:	4625      	movge	r5, r4
    dcd8:	2d00      	cmp	r5, #0
    dcda:	dd0d      	ble.n	dcf8 <_svfprintf_r+0xb68>
    dcdc:	f8ca 3000 	str.w	r3, [sl]
    dce0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dce2:	f8ca 5004 	str.w	r5, [sl, #4]
    dce6:	3301      	adds	r3, #1
    dce8:	442a      	add	r2, r5
    dcea:	2b07      	cmp	r3, #7
    dcec:	9226      	str	r2, [sp, #152]	; 0x98
    dcee:	9325      	str	r3, [sp, #148]	; 0x94
    dcf0:	f300 86bb 	bgt.w	ea6a <_svfprintf_r+0x18da>
    dcf4:	f10a 0a08 	add.w	sl, sl, #8
    dcf8:	2d00      	cmp	r5, #0
    dcfa:	bfa8      	it	ge
    dcfc:	1b64      	subge	r4, r4, r5
    dcfe:	2c00      	cmp	r4, #0
    dd00:	f77f abde 	ble.w	d4c0 <_svfprintf_r+0x330>
    dd04:	2c10      	cmp	r4, #16
    dd06:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dd08:	f340 837c 	ble.w	e404 <_svfprintf_r+0x1274>
    dd0c:	ee1b 6a10 	vmov	r6, s22
    dd10:	2510      	movs	r5, #16
    dd12:	e005      	b.n	dd20 <_svfprintf_r+0xb90>
    dd14:	f10a 0a08 	add.w	sl, sl, #8
    dd18:	3c10      	subs	r4, #16
    dd1a:	2c10      	cmp	r4, #16
    dd1c:	f340 8372 	ble.w	e404 <_svfprintf_r+0x1274>
    dd20:	3301      	adds	r3, #1
    dd22:	4970      	ldr	r1, [pc, #448]	; (dee4 <_svfprintf_r+0xd54>)
    dd24:	3210      	adds	r2, #16
    dd26:	2b07      	cmp	r3, #7
    dd28:	e9ca 1500 	strd	r1, r5, [sl]
    dd2c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dd30:	ddf0      	ble.n	dd14 <_svfprintf_r+0xb84>
    dd32:	aa24      	add	r2, sp, #144	; 0x90
    dd34:	4631      	mov	r1, r6
    dd36:	4658      	mov	r0, fp
    dd38:	f004 f8b6 	bl	11ea8 <__ssprint_r>
    dd3c:	2800      	cmp	r0, #0
    dd3e:	f47f ae8c 	bne.w	da5a <_svfprintf_r+0x8ca>
    dd42:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dd46:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dd4a:	e7e5      	b.n	dd18 <_svfprintf_r+0xb88>
    dd4c:	2b30      	cmp	r3, #48	; 0x30
    dd4e:	f43f ad8b 	beq.w	d868 <_svfprintf_r+0x6d8>
    dd52:	2330      	movs	r3, #48	; 0x30
    dd54:	3802      	subs	r0, #2
    dd56:	f804 3c01 	strb.w	r3, [r4, #-1]
    dd5a:	ab50      	add	r3, sp, #320	; 0x140
    dd5c:	1a1b      	subs	r3, r3, r0
    dd5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dd62:	9305      	str	r3, [sp, #20]
    dd64:	4604      	mov	r4, r0
    dd66:	e584      	b.n	d872 <_svfprintf_r+0x6e2>
    dd68:	f018 0f01 	tst.w	r8, #1
    dd6c:	f47f ae82 	bne.w	da74 <_svfprintf_r+0x8e4>
    dd70:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dd72:	f8ca 4000 	str.w	r4, [sl]
    dd76:	3301      	adds	r3, #1
    dd78:	3201      	adds	r2, #1
    dd7a:	2101      	movs	r1, #1
    dd7c:	2b07      	cmp	r3, #7
    dd7e:	9226      	str	r2, [sp, #152]	; 0x98
    dd80:	9325      	str	r3, [sp, #148]	; 0x94
    dd82:	f8ca 1004 	str.w	r1, [sl, #4]
    dd86:	f77f aea5 	ble.w	dad4 <_svfprintf_r+0x944>
    dd8a:	ee1b 1a10 	vmov	r1, s22
    dd8e:	aa24      	add	r2, sp, #144	; 0x90
    dd90:	4658      	mov	r0, fp
    dd92:	f004 f889 	bl	11ea8 <__ssprint_r>
    dd96:	2800      	cmp	r0, #0
    dd98:	f47f ae5f 	bne.w	da5a <_svfprintf_r+0x8ca>
    dd9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dda0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dda4:	e698      	b.n	dad8 <_svfprintf_r+0x948>
    dda6:	990e      	ldr	r1, [sp, #56]	; 0x38
    dda8:	1e4c      	subs	r4, r1, #1
    ddaa:	2c00      	cmp	r4, #0
    ddac:	f77f ae94 	ble.w	dad8 <_svfprintf_r+0x948>
    ddb0:	2c10      	cmp	r4, #16
    ddb2:	f340 8361 	ble.w	e478 <_svfprintf_r+0x12e8>
    ddb6:	ee1b 6a10 	vmov	r6, s22
    ddba:	2510      	movs	r5, #16
    ddbc:	e005      	b.n	ddca <_svfprintf_r+0xc3a>
    ddbe:	f10a 0a08 	add.w	sl, sl, #8
    ddc2:	3c10      	subs	r4, #16
    ddc4:	2c10      	cmp	r4, #16
    ddc6:	f340 8357 	ble.w	e478 <_svfprintf_r+0x12e8>
    ddca:	3301      	adds	r3, #1
    ddcc:	4945      	ldr	r1, [pc, #276]	; (dee4 <_svfprintf_r+0xd54>)
    ddce:	3210      	adds	r2, #16
    ddd0:	2b07      	cmp	r3, #7
    ddd2:	e9ca 1500 	strd	r1, r5, [sl]
    ddd6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ddda:	ddf0      	ble.n	ddbe <_svfprintf_r+0xc2e>
    dddc:	aa24      	add	r2, sp, #144	; 0x90
    ddde:	4631      	mov	r1, r6
    dde0:	4658      	mov	r0, fp
    dde2:	f004 f861 	bl	11ea8 <__ssprint_r>
    dde6:	2800      	cmp	r0, #0
    dde8:	f47f ae37 	bne.w	da5a <_svfprintf_r+0x8ca>
    ddec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ddf0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ddf4:	e7e5      	b.n	ddc2 <_svfprintf_r+0xc32>
    ddf6:	ee1b 1a10 	vmov	r1, s22
    ddfa:	aa24      	add	r2, sp, #144	; 0x90
    ddfc:	4658      	mov	r0, fp
    ddfe:	f004 f853 	bl	11ea8 <__ssprint_r>
    de02:	2800      	cmp	r0, #0
    de04:	f47f ae29 	bne.w	da5a <_svfprintf_r+0x8ca>
    de08:	9a26      	ldr	r2, [sp, #152]	; 0x98
    de0a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de0e:	f7ff bb44 	b.w	d49a <_svfprintf_r+0x30a>
    de12:	9b02      	ldr	r3, [sp, #8]
    de14:	f013 0310 	ands.w	r3, r3, #16
    de18:	f040 80c1 	bne.w	df9e <_svfprintf_r+0xe0e>
    de1c:	9a02      	ldr	r2, [sp, #8]
    de1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    de22:	f000 837a 	beq.w	e51a <_svfprintf_r+0x138a>
    de26:	9808      	ldr	r0, [sp, #32]
    de28:	f850 2b04 	ldr.w	r2, [r0], #4
    de2c:	9008      	str	r0, [sp, #32]
    de2e:	4619      	mov	r1, r3
    de30:	b292      	uxth	r2, r2
    de32:	2301      	movs	r3, #1
    de34:	e451      	b.n	d6da <_svfprintf_r+0x54a>
    de36:	f018 0310 	ands.w	r3, r8, #16
    de3a:	d155      	bne.n	dee8 <_svfprintf_r+0xd58>
    de3c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    de40:	f000 835d 	beq.w	e4fe <_svfprintf_r+0x136e>
    de44:	9808      	ldr	r0, [sp, #32]
    de46:	f850 2b04 	ldr.w	r2, [r0], #4
    de4a:	9008      	str	r0, [sp, #32]
    de4c:	4619      	mov	r1, r3
    de4e:	b292      	uxth	r2, r2
    de50:	e4a8      	b.n	d7a4 <_svfprintf_r+0x614>
    de52:	4252      	negs	r2, r2
    de54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    de58:	f8cd 8008 	str.w	r8, [sp, #8]
    de5c:	202d      	movs	r0, #45	; 0x2d
    de5e:	2301      	movs	r3, #1
    de60:	e43c      	b.n	d6dc <_svfprintf_r+0x54c>
    de62:	ee1b 1a10 	vmov	r1, s22
    de66:	aa24      	add	r2, sp, #144	; 0x90
    de68:	4658      	mov	r0, fp
    de6a:	f004 f81d 	bl	11ea8 <__ssprint_r>
    de6e:	2800      	cmp	r0, #0
    de70:	f47f adf3 	bne.w	da5a <_svfprintf_r+0x8ca>
    de74:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    de78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de7c:	e616      	b.n	daac <_svfprintf_r+0x91c>
    de7e:	ee1b 1a10 	vmov	r1, s22
    de82:	aa24      	add	r2, sp, #144	; 0x90
    de84:	4658      	mov	r0, fp
    de86:	f004 f80f 	bl	11ea8 <__ssprint_r>
    de8a:	2800      	cmp	r0, #0
    de8c:	f47f ade5 	bne.w	da5a <_svfprintf_r+0x8ca>
    de90:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    de94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de98:	e5fb      	b.n	da92 <_svfprintf_r+0x902>
    de9a:	f018 0f01 	tst.w	r8, #1
    de9e:	f43f ab0f 	beq.w	d4c0 <_svfprintf_r+0x330>
    dea2:	e52a      	b.n	d8fa <_svfprintf_r+0x76a>
    dea4:	9308      	str	r3, [sp, #32]
    dea6:	f899 3000 	ldrb.w	r3, [r9]
    deaa:	f7ff b9cd 	b.w	d248 <_svfprintf_r+0xb8>
    deae:	ac50      	add	r4, sp, #320	; 0x140
    deb0:	e4df      	b.n	d872 <_svfprintf_r+0x6e2>
    deb2:	f418 7f00 	tst.w	r8, #512	; 0x200
    deb6:	f040 83db 	bne.w	e670 <_svfprintf_r+0x14e0>
    deba:	f853 2b04 	ldr.w	r2, [r3], #4
    debe:	9308      	str	r3, [sp, #32]
    dec0:	17d1      	asrs	r1, r2, #31
    dec2:	460b      	mov	r3, r1
    dec4:	f7ff bbb6 	b.w	d634 <_svfprintf_r+0x4a4>
    dec8:	9b08      	ldr	r3, [sp, #32]
    deca:	9804      	ldr	r0, [sp, #16]
    decc:	f853 1b04 	ldr.w	r1, [r3], #4
    ded0:	9308      	str	r3, [sp, #32]
    ded2:	17c2      	asrs	r2, r0, #31
    ded4:	e9c1 0200 	strd	r0, r2, [r1]
    ded8:	464c      	mov	r4, r9
    deda:	f7ff b98b 	b.w	d1f4 <_svfprintf_r+0x64>
    dede:	bf00      	nop
    dee0:	20002870 	.word	0x20002870
    dee4:	20008608 	.word	0x20008608
    dee8:	9b08      	ldr	r3, [sp, #32]
    deea:	f853 2b04 	ldr.w	r2, [r3], #4
    deee:	9308      	str	r3, [sp, #32]
    def0:	e458      	b.n	d7a4 <_svfprintf_r+0x614>
    def2:	eeb4 8b48 	vcmp.f64	d8, d8
    def6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    defa:	f180 8694 	bvs.w	ec26 <_svfprintf_r+0x1a96>
    defe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df00:	2b61      	cmp	r3, #97	; 0x61
    df02:	f000 8552 	beq.w	e9aa <_svfprintf_r+0x181a>
    df06:	2b41      	cmp	r3, #65	; 0x41
    df08:	f000 85c0 	beq.w	ea8c <_svfprintf_r+0x18fc>
    df0c:	9b03      	ldr	r3, [sp, #12]
    df0e:	3301      	adds	r3, #1
    df10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df12:	f023 0520 	bic.w	r5, r3, #32
    df16:	f000 8480 	beq.w	e81a <_svfprintf_r+0x168a>
    df1a:	2d47      	cmp	r5, #71	; 0x47
    df1c:	d104      	bne.n	df28 <_svfprintf_r+0xd98>
    df1e:	9b03      	ldr	r3, [sp, #12]
    df20:	2b00      	cmp	r3, #0
    df22:	bf08      	it	eq
    df24:	2301      	moveq	r3, #1
    df26:	9303      	str	r3, [sp, #12]
    df28:	ee18 3a90 	vmov	r3, s17
    df2c:	2b00      	cmp	r3, #0
    df2e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    df32:	4646      	mov	r6, r8
    df34:	f2c0 8618 	blt.w	eb68 <_svfprintf_r+0x19d8>
    df38:	eeb0 ab48 	vmov.f64	d10, d8
    df3c:	2300      	movs	r3, #0
    df3e:	4690      	mov	r8, r2
    df40:	9309      	str	r3, [sp, #36]	; 0x24
    df42:	9307      	str	r3, [sp, #28]
    df44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df46:	3b41      	subs	r3, #65	; 0x41
    df48:	2b25      	cmp	r3, #37	; 0x25
    df4a:	f200 8398 	bhi.w	e67e <_svfprintf_r+0x14ee>
    df4e:	e8df f013 	tbh	[pc, r3, lsl #1]
    df52:	046f      	.short	0x046f
    df54:	03960396 	.word	0x03960396
    df58:	04680396 	.word	0x04680396
    df5c:	0396046c 	.word	0x0396046c
    df60:	03960396 	.word	0x03960396
    df64:	03960396 	.word	0x03960396
    df68:	03960396 	.word	0x03960396
    df6c:	03960396 	.word	0x03960396
    df70:	03960396 	.word	0x03960396
    df74:	03960396 	.word	0x03960396
    df78:	03960396 	.word	0x03960396
    df7c:	03960396 	.word	0x03960396
    df80:	03960396 	.word	0x03960396
    df84:	03960396 	.word	0x03960396
    df88:	03960396 	.word	0x03960396
    df8c:	03960396 	.word	0x03960396
    df90:	03960396 	.word	0x03960396
    df94:	03960396 	.word	0x03960396
    df98:	04680396 	.word	0x04680396
    df9c:	046c      	.short	0x046c
    df9e:	9b08      	ldr	r3, [sp, #32]
    dfa0:	f853 2b04 	ldr.w	r2, [r3], #4
    dfa4:	9308      	str	r3, [sp, #32]
    dfa6:	2301      	movs	r3, #1
    dfa8:	f7ff bb97 	b.w	d6da <_svfprintf_r+0x54a>
    dfac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dfae:	2b00      	cmp	r3, #0
    dfb0:	f43f a9cf 	beq.w	d352 <_svfprintf_r+0x1c2>
    dfb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dfb6:	781b      	ldrb	r3, [r3, #0]
    dfb8:	2b00      	cmp	r3, #0
    dfba:	f43f a9ca 	beq.w	d352 <_svfprintf_r+0x1c2>
    dfbe:	f899 3000 	ldrb.w	r3, [r9]
    dfc2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    dfc6:	f7ff b93f 	b.w	d248 <_svfprintf_r+0xb8>
    dfca:	930b      	str	r3, [sp, #44]	; 0x2c
    dfcc:	f8cd 8008 	str.w	r8, [sp, #8]
    dfd0:	f7ff bbf1 	b.w	d7b6 <_svfprintf_r+0x626>
    dfd4:	930b      	str	r3, [sp, #44]	; 0x2c
    dfd6:	4b9a      	ldr	r3, [pc, #616]	; (e240 <_svfprintf_r+0x10b0>)
    dfd8:	9311      	str	r3, [sp, #68]	; 0x44
    dfda:	f018 0120 	ands.w	r1, r8, #32
    dfde:	f000 8105 	beq.w	e1ec <_svfprintf_r+0x105c>
    dfe2:	9b08      	ldr	r3, [sp, #32]
    dfe4:	3307      	adds	r3, #7
    dfe6:	f023 0307 	bic.w	r3, r3, #7
    dfea:	6859      	ldr	r1, [r3, #4]
    dfec:	f853 2b08 	ldr.w	r2, [r3], #8
    dff0:	9308      	str	r3, [sp, #32]
    dff2:	f018 0f01 	tst.w	r8, #1
    dff6:	d00a      	beq.n	e00e <_svfprintf_r+0xe7e>
    dff8:	ea52 0301 	orrs.w	r3, r2, r1
    dffc:	d007      	beq.n	e00e <_svfprintf_r+0xe7e>
    dffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e000:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e004:	2330      	movs	r3, #48	; 0x30
    e006:	f048 0802 	orr.w	r8, r8, #2
    e00a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e00e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e012:	9302      	str	r3, [sp, #8]
    e014:	2302      	movs	r3, #2
    e016:	f7ff bb60 	b.w	d6da <_svfprintf_r+0x54a>
    e01a:	930b      	str	r3, [sp, #44]	; 0x2c
    e01c:	f7ff bbb6 	b.w	d78c <_svfprintf_r+0x5fc>
    e020:	930b      	str	r3, [sp, #44]	; 0x2c
    e022:	4b88      	ldr	r3, [pc, #544]	; (e244 <_svfprintf_r+0x10b4>)
    e024:	9311      	str	r3, [sp, #68]	; 0x44
    e026:	e7d8      	b.n	dfda <_svfprintf_r+0xe4a>
    e028:	9b08      	ldr	r3, [sp, #32]
    e02a:	2101      	movs	r1, #1
    e02c:	f853 2b04 	ldr.w	r2, [r3], #4
    e030:	9102      	str	r1, [sp, #8]
    e032:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e036:	9308      	str	r3, [sp, #32]
    e038:	9105      	str	r1, [sp, #20]
    e03a:	ac37      	add	r4, sp, #220	; 0xdc
    e03c:	f7ff baaf 	b.w	d59e <_svfprintf_r+0x40e>
    e040:	ee1b 1a10 	vmov	r1, s22
    e044:	aa24      	add	r2, sp, #144	; 0x90
    e046:	4658      	mov	r0, fp
    e048:	f003 ff2e 	bl	11ea8 <__ssprint_r>
    e04c:	2800      	cmp	r0, #0
    e04e:	f47f ad04 	bne.w	da5a <_svfprintf_r+0x8ca>
    e052:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e054:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e058:	e45d      	b.n	d916 <_svfprintf_r+0x786>
    e05a:	9b03      	ldr	r3, [sp, #12]
    e05c:	9407      	str	r4, [sp, #28]
    e05e:	2b06      	cmp	r3, #6
    e060:	4622      	mov	r2, r4
    e062:	bf28      	it	cs
    e064:	2306      	movcs	r3, #6
    e066:	9403      	str	r4, [sp, #12]
    e068:	4621      	mov	r1, r4
    e06a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e06e:	4c76      	ldr	r4, [pc, #472]	; (e248 <_svfprintf_r+0x10b8>)
    e070:	9302      	str	r3, [sp, #8]
    e072:	9305      	str	r3, [sp, #20]
    e074:	920f      	str	r2, [sp, #60]	; 0x3c
    e076:	f7ff ba6c 	b.w	d552 <_svfprintf_r+0x3c2>
    e07a:	2140      	movs	r1, #64	; 0x40
    e07c:	4658      	mov	r0, fp
    e07e:	f7fb fa91 	bl	95a4 <_malloc_r>
    e082:	6020      	str	r0, [r4, #0]
    e084:	6120      	str	r0, [r4, #16]
    e086:	2800      	cmp	r0, #0
    e088:	f000 860f 	beq.w	ecaa <_svfprintf_r+0x1b1a>
    e08c:	2340      	movs	r3, #64	; 0x40
    e08e:	6163      	str	r3, [r4, #20]
    e090:	f7ff b89e 	b.w	d1d0 <_svfprintf_r+0x40>
    e094:	2d10      	cmp	r5, #16
    e096:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e098:	f340 825d 	ble.w	e556 <_svfprintf_r+0x13c6>
    e09c:	4651      	mov	r1, sl
    e09e:	2610      	movs	r6, #16
    e0a0:	ee1b aa10 	vmov	sl, s22
    e0a4:	e004      	b.n	e0b0 <_svfprintf_r+0xf20>
    e0a6:	3108      	adds	r1, #8
    e0a8:	3d10      	subs	r5, #16
    e0aa:	2d10      	cmp	r5, #16
    e0ac:	f340 8252 	ble.w	e554 <_svfprintf_r+0x13c4>
    e0b0:	3301      	adds	r3, #1
    e0b2:	4866      	ldr	r0, [pc, #408]	; (e24c <_svfprintf_r+0x10bc>)
    e0b4:	3210      	adds	r2, #16
    e0b6:	2b07      	cmp	r3, #7
    e0b8:	e9c1 0600 	strd	r0, r6, [r1]
    e0bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0c0:	ddf1      	ble.n	e0a6 <_svfprintf_r+0xf16>
    e0c2:	aa24      	add	r2, sp, #144	; 0x90
    e0c4:	4651      	mov	r1, sl
    e0c6:	4658      	mov	r0, fp
    e0c8:	f003 feee 	bl	11ea8 <__ssprint_r>
    e0cc:	2800      	cmp	r0, #0
    e0ce:	f47f acc4 	bne.w	da5a <_svfprintf_r+0x8ca>
    e0d2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0d6:	a927      	add	r1, sp, #156	; 0x9c
    e0d8:	e7e6      	b.n	e0a8 <_svfprintf_r+0xf18>
    e0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e0e0:	18e3      	adds	r3, r4, r3
    e0e2:	9303      	str	r3, [sp, #12]
    e0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e0e6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e0ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e0ec:	9d05      	ldr	r5, [sp, #20]
    e0ee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e0f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e0f6:	940b      	str	r4, [sp, #44]	; 0x2c
    e0f8:	ee1b 1a10 	vmov	r1, s22
    e0fc:	4650      	mov	r0, sl
    e0fe:	2b00      	cmp	r3, #0
    e100:	d034      	beq.n	e16c <_svfprintf_r+0xfdc>
    e102:	f1b8 0f00 	cmp.w	r8, #0
    e106:	d135      	bne.n	e174 <_svfprintf_r+0xfe4>
    e108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e10a:	3b01      	subs	r3, #1
    e10c:	3e01      	subs	r6, #1
    e10e:	930d      	str	r3, [sp, #52]	; 0x34
    e110:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e112:	e9c0 3900 	strd	r3, r9, [r0]
    e116:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e118:	3301      	adds	r3, #1
    e11a:	444a      	add	r2, r9
    e11c:	2b07      	cmp	r3, #7
    e11e:	9226      	str	r2, [sp, #152]	; 0x98
    e120:	9325      	str	r3, [sp, #148]	; 0x94
    e122:	dc6c      	bgt.n	e1fe <_svfprintf_r+0x106e>
    e124:	3008      	adds	r0, #8
    e126:	9b03      	ldr	r3, [sp, #12]
    e128:	f896 c000 	ldrb.w	ip, [r6]
    e12c:	1b5b      	subs	r3, r3, r5
    e12e:	4563      	cmp	r3, ip
    e130:	bfa8      	it	ge
    e132:	4663      	movge	r3, ip
    e134:	2b00      	cmp	r3, #0
    e136:	469a      	mov	sl, r3
    e138:	dd0c      	ble.n	e154 <_svfprintf_r+0xfc4>
    e13a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e13c:	3401      	adds	r4, #1
    e13e:	441a      	add	r2, r3
    e140:	2c07      	cmp	r4, #7
    e142:	e9c0 5300 	strd	r5, r3, [r0]
    e146:	9226      	str	r2, [sp, #152]	; 0x98
    e148:	9425      	str	r4, [sp, #148]	; 0x94
    e14a:	f300 8177 	bgt.w	e43c <_svfprintf_r+0x12ac>
    e14e:	f896 c000 	ldrb.w	ip, [r6]
    e152:	3008      	adds	r0, #8
    e154:	f1ba 0f00 	cmp.w	sl, #0
    e158:	bfac      	ite	ge
    e15a:	ebac 040a 	subge.w	r4, ip, sl
    e15e:	4664      	movlt	r4, ip
    e160:	2c00      	cmp	r4, #0
    e162:	dc0a      	bgt.n	e17a <_svfprintf_r+0xfea>
    e164:	4465      	add	r5, ip
    e166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e168:	2b00      	cmp	r3, #0
    e16a:	d1ca      	bne.n	e102 <_svfprintf_r+0xf72>
    e16c:	f1b8 0f00 	cmp.w	r8, #0
    e170:	f000 83ac 	beq.w	e8cc <_svfprintf_r+0x173c>
    e174:	f108 38ff 	add.w	r8, r8, #4294967295
    e178:	e7ca      	b.n	e110 <_svfprintf_r+0xf80>
    e17a:	2c10      	cmp	r4, #16
    e17c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e180:	dd24      	ble.n	e1cc <_svfprintf_r+0x103c>
    e182:	9505      	str	r5, [sp, #20]
    e184:	f04f 0a10 	mov.w	sl, #16
    e188:	4663      	mov	r3, ip
    e18a:	460d      	mov	r5, r1
    e18c:	e004      	b.n	e198 <_svfprintf_r+0x1008>
    e18e:	3c10      	subs	r4, #16
    e190:	2c10      	cmp	r4, #16
    e192:	f100 0008 	add.w	r0, r0, #8
    e196:	dd16      	ble.n	e1c6 <_svfprintf_r+0x1036>
    e198:	3301      	adds	r3, #1
    e19a:	492c      	ldr	r1, [pc, #176]	; (e24c <_svfprintf_r+0x10bc>)
    e19c:	3210      	adds	r2, #16
    e19e:	2b07      	cmp	r3, #7
    e1a0:	e9c0 1a00 	strd	r1, sl, [r0]
    e1a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1a8:	ddf1      	ble.n	e18e <_svfprintf_r+0xffe>
    e1aa:	aa24      	add	r2, sp, #144	; 0x90
    e1ac:	4629      	mov	r1, r5
    e1ae:	4658      	mov	r0, fp
    e1b0:	f003 fe7a 	bl	11ea8 <__ssprint_r>
    e1b4:	2800      	cmp	r0, #0
    e1b6:	f47f ac50 	bne.w	da5a <_svfprintf_r+0x8ca>
    e1ba:	3c10      	subs	r4, #16
    e1bc:	2c10      	cmp	r4, #16
    e1be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e1c2:	a827      	add	r0, sp, #156	; 0x9c
    e1c4:	dce8      	bgt.n	e198 <_svfprintf_r+0x1008>
    e1c6:	4629      	mov	r1, r5
    e1c8:	9d05      	ldr	r5, [sp, #20]
    e1ca:	469c      	mov	ip, r3
    e1cc:	f10c 0301 	add.w	r3, ip, #1
    e1d0:	4422      	add	r2, r4
    e1d2:	6044      	str	r4, [r0, #4]
    e1d4:	2b07      	cmp	r3, #7
    e1d6:	4c1d      	ldr	r4, [pc, #116]	; (e24c <_svfprintf_r+0x10bc>)
    e1d8:	6004      	str	r4, [r0, #0]
    e1da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1de:	f300 83c6 	bgt.w	e96e <_svfprintf_r+0x17de>
    e1e2:	f896 c000 	ldrb.w	ip, [r6]
    e1e6:	3008      	adds	r0, #8
    e1e8:	4465      	add	r5, ip
    e1ea:	e7bc      	b.n	e166 <_svfprintf_r+0xfd6>
    e1ec:	f018 0310 	ands.w	r3, r8, #16
    e1f0:	f000 80c2 	beq.w	e378 <_svfprintf_r+0x11e8>
    e1f4:	9b08      	ldr	r3, [sp, #32]
    e1f6:	f853 2b04 	ldr.w	r2, [r3], #4
    e1fa:	9308      	str	r3, [sp, #32]
    e1fc:	e6f9      	b.n	dff2 <_svfprintf_r+0xe62>
    e1fe:	aa24      	add	r2, sp, #144	; 0x90
    e200:	4658      	mov	r0, fp
    e202:	9105      	str	r1, [sp, #20]
    e204:	f003 fe50 	bl	11ea8 <__ssprint_r>
    e208:	2800      	cmp	r0, #0
    e20a:	f47f ac26 	bne.w	da5a <_svfprintf_r+0x8ca>
    e20e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e210:	9905      	ldr	r1, [sp, #20]
    e212:	a827      	add	r0, sp, #156	; 0x9c
    e214:	e787      	b.n	e126 <_svfprintf_r+0xf96>
    e216:	9802      	ldr	r0, [sp, #8]
    e218:	f8cd a01c 	str.w	sl, [sp, #28]
    e21c:	ac50      	add	r4, sp, #320	; 0x140
    e21e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e222:	2500      	movs	r5, #0
    e224:	ee0a ba10 	vmov	s20, fp
    e228:	4b09      	ldr	r3, [pc, #36]	; (e250 <_svfprintf_r+0x10c0>)
    e22a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e22e:	f8cd 9014 	str.w	r9, [sp, #20]
    e232:	46a3      	mov	fp, r4
    e234:	f04f 0805 	mov.w	r8, #5
    e238:	46ac      	mov	ip, r5
    e23a:	4604      	mov	r4, r0
    e23c:	e010      	b.n	e260 <_svfprintf_r+0x10d0>
    e23e:	bf00      	nop
    e240:	20000dc4 	.word	0x20000dc4
    e244:	20000dd8 	.word	0x20000dd8
    e248:	20000dec 	.word	0x20000dec
    e24c:	20008608 	.word	0x20008608
    e250:	cccccccd 	.word	0xcccccccd
    e254:	2a0a      	cmp	r2, #10
    e256:	f171 0100 	sbcs.w	r1, r1, #0
    e25a:	d336      	bcc.n	e2ca <_svfprintf_r+0x113a>
    e25c:	464a      	mov	r2, r9
    e25e:	4631      	mov	r1, r6
    e260:	1850      	adds	r0, r2, r1
    e262:	f140 0000 	adc.w	r0, r0, #0
    e266:	fba3 5600 	umull	r5, r6, r3, r0
    e26a:	f026 0503 	bic.w	r5, r6, #3
    e26e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e272:	1b40      	subs	r0, r0, r5
    e274:	1a15      	subs	r5, r2, r0
    e276:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e27a:	f161 0e00 	sbc.w	lr, r1, #0
    e27e:	fb06 f605 	mul.w	r6, r6, r5
    e282:	fba5 9503 	umull	r9, r5, r5, r3
    e286:	fb03 660e 	mla	r6, r3, lr, r6
    e28a:	f009 0e01 	and.w	lr, r9, #1
    e28e:	442e      	add	r6, r5
    e290:	fbae 5e08 	umull	r5, lr, lr, r8
    e294:	182d      	adds	r5, r5, r0
    e296:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e29a:	3530      	adds	r5, #48	; 0x30
    e29c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e2a0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e2a4:	f10c 0c01 	add.w	ip, ip, #1
    e2a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    e2ac:	0876      	lsrs	r6, r6, #1
    e2ae:	2c00      	cmp	r4, #0
    e2b0:	d0d0      	beq.n	e254 <_svfprintf_r+0x10c4>
    e2b2:	f89a 0000 	ldrb.w	r0, [sl]
    e2b6:	4584      	cmp	ip, r0
    e2b8:	d1cc      	bne.n	e254 <_svfprintf_r+0x10c4>
    e2ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e2be:	d0c9      	beq.n	e254 <_svfprintf_r+0x10c4>
    e2c0:	2a0a      	cmp	r2, #10
    e2c2:	f171 0100 	sbcs.w	r1, r1, #0
    e2c6:	f080 818f 	bcs.w	e5e8 <_svfprintf_r+0x1458>
    e2ca:	465c      	mov	r4, fp
    e2cc:	ab50      	add	r3, sp, #320	; 0x140
    e2ce:	1b1b      	subs	r3, r3, r4
    e2d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e2d4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e2d8:	ee1a ba10 	vmov	fp, s20
    e2dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e2e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e2e4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e2e8:	9305      	str	r3, [sp, #20]
    e2ea:	f7ff bac2 	b.w	d872 <_svfprintf_r+0x6e2>
    e2ee:	ee1b 1a10 	vmov	r1, s22
    e2f2:	aa24      	add	r2, sp, #144	; 0x90
    e2f4:	4658      	mov	r0, fp
    e2f6:	f003 fdd7 	bl	11ea8 <__ssprint_r>
    e2fa:	2800      	cmp	r0, #0
    e2fc:	f47f abad 	bne.w	da5a <_svfprintf_r+0x8ca>
    e300:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e304:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e306:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e30a:	f7ff b896 	b.w	d43a <_svfprintf_r+0x2aa>
    e30e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e310:	48be      	ldr	r0, [pc, #760]	; (e60c <_svfprintf_r+0x147c>)
    e312:	f8ca 0000 	str.w	r0, [sl]
    e316:	3301      	adds	r3, #1
    e318:	3201      	adds	r2, #1
    e31a:	2001      	movs	r0, #1
    e31c:	2b07      	cmp	r3, #7
    e31e:	9226      	str	r2, [sp, #152]	; 0x98
    e320:	9325      	str	r3, [sp, #148]	; 0x94
    e322:	f8ca 0004 	str.w	r0, [sl, #4]
    e326:	f300 8177 	bgt.w	e618 <_svfprintf_r+0x1488>
    e32a:	f10a 0a08 	add.w	sl, sl, #8
    e32e:	2900      	cmp	r1, #0
    e330:	f040 80af 	bne.w	e492 <_svfprintf_r+0x1302>
    e334:	990e      	ldr	r1, [sp, #56]	; 0x38
    e336:	f008 0301 	and.w	r3, r8, #1
    e33a:	430b      	orrs	r3, r1
    e33c:	f43f a8c0 	beq.w	d4c0 <_svfprintf_r+0x330>
    e340:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e342:	9912      	ldr	r1, [sp, #72]	; 0x48
    e344:	441a      	add	r2, r3
    e346:	e9ca 1300 	strd	r1, r3, [sl]
    e34a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e34c:	9226      	str	r2, [sp, #152]	; 0x98
    e34e:	3301      	adds	r3, #1
    e350:	2b07      	cmp	r3, #7
    e352:	9325      	str	r3, [sp, #148]	; 0x94
    e354:	f300 8252 	bgt.w	e7fc <_svfprintf_r+0x166c>
    e358:	f10a 0a08 	add.w	sl, sl, #8
    e35c:	990e      	ldr	r1, [sp, #56]	; 0x38
    e35e:	f8ca 4000 	str.w	r4, [sl]
    e362:	3301      	adds	r3, #1
    e364:	440a      	add	r2, r1
    e366:	2b07      	cmp	r3, #7
    e368:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e36c:	f8ca 1004 	str.w	r1, [sl, #4]
    e370:	f77f a8a4 	ble.w	d4bc <_svfprintf_r+0x32c>
    e374:	f7ff bbbd 	b.w	daf2 <_svfprintf_r+0x962>
    e378:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e37c:	f000 80dd 	beq.w	e53a <_svfprintf_r+0x13aa>
    e380:	9808      	ldr	r0, [sp, #32]
    e382:	f850 2b04 	ldr.w	r2, [r0], #4
    e386:	9008      	str	r0, [sp, #32]
    e388:	4619      	mov	r1, r3
    e38a:	b292      	uxth	r2, r2
    e38c:	e631      	b.n	dff2 <_svfprintf_r+0xe62>
    e38e:	ee1b 1a10 	vmov	r1, s22
    e392:	aa24      	add	r2, sp, #144	; 0x90
    e394:	4658      	mov	r0, fp
    e396:	f003 fd87 	bl	11ea8 <__ssprint_r>
    e39a:	2800      	cmp	r0, #0
    e39c:	f47f ab5d 	bne.w	da5a <_svfprintf_r+0x8ca>
    e3a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e3a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e3a6:	f7ff baa3 	b.w	d8f0 <_svfprintf_r+0x760>
    e3aa:	ae22      	add	r6, sp, #136	; 0x88
    e3ac:	2208      	movs	r2, #8
    e3ae:	2100      	movs	r1, #0
    e3b0:	4630      	mov	r0, r6
    e3b2:	941d      	str	r4, [sp, #116]	; 0x74
    e3b4:	f7fd f81e 	bl	b3f4 <memset>
    e3b8:	9b03      	ldr	r3, [sp, #12]
    e3ba:	1c5a      	adds	r2, r3, #1
    e3bc:	f000 80db 	beq.w	e576 <_svfprintf_r+0x13e6>
    e3c0:	2500      	movs	r5, #0
    e3c2:	f8cd 9008 	str.w	r9, [sp, #8]
    e3c6:	f8cd 801c 	str.w	r8, [sp, #28]
    e3ca:	4699      	mov	r9, r3
    e3cc:	46a8      	mov	r8, r5
    e3ce:	e00c      	b.n	e3ea <_svfprintf_r+0x125a>
    e3d0:	a937      	add	r1, sp, #220	; 0xdc
    e3d2:	4658      	mov	r0, fp
    e3d4:	f003 fc3e 	bl	11c54 <_wcrtomb_r>
    e3d8:	1c43      	adds	r3, r0, #1
    e3da:	4440      	add	r0, r8
    e3dc:	f000 83c8 	beq.w	eb70 <_svfprintf_r+0x19e0>
    e3e0:	4548      	cmp	r0, r9
    e3e2:	dc08      	bgt.n	e3f6 <_svfprintf_r+0x1266>
    e3e4:	f000 8418 	beq.w	ec18 <_svfprintf_r+0x1a88>
    e3e8:	4680      	mov	r8, r0
    e3ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e3ec:	5952      	ldr	r2, [r2, r5]
    e3ee:	4633      	mov	r3, r6
    e3f0:	3504      	adds	r5, #4
    e3f2:	2a00      	cmp	r2, #0
    e3f4:	d1ec      	bne.n	e3d0 <_svfprintf_r+0x1240>
    e3f6:	f8cd 8014 	str.w	r8, [sp, #20]
    e3fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e3fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e402:	e0c5      	b.n	e590 <_svfprintf_r+0x1400>
    e404:	3301      	adds	r3, #1
    e406:	4982      	ldr	r1, [pc, #520]	; (e610 <_svfprintf_r+0x1480>)
    e408:	f8ca 4004 	str.w	r4, [sl, #4]
    e40c:	4422      	add	r2, r4
    e40e:	2b07      	cmp	r3, #7
    e410:	f8ca 1000 	str.w	r1, [sl]
    e414:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e418:	f77f a850 	ble.w	d4bc <_svfprintf_r+0x32c>
    e41c:	f7ff bb69 	b.w	daf2 <_svfprintf_r+0x962>
    e420:	ee1b 1a10 	vmov	r1, s22
    e424:	aa24      	add	r2, sp, #144	; 0x90
    e426:	4658      	mov	r0, fp
    e428:	f003 fd3e 	bl	11ea8 <__ssprint_r>
    e42c:	2800      	cmp	r0, #0
    e42e:	f47f ab14 	bne.w	da5a <_svfprintf_r+0x8ca>
    e432:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e434:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e438:	f7ff b829 	b.w	d48e <_svfprintf_r+0x2fe>
    e43c:	aa24      	add	r2, sp, #144	; 0x90
    e43e:	4658      	mov	r0, fp
    e440:	9105      	str	r1, [sp, #20]
    e442:	f003 fd31 	bl	11ea8 <__ssprint_r>
    e446:	2800      	cmp	r0, #0
    e448:	f47f ab07 	bne.w	da5a <_svfprintf_r+0x8ca>
    e44c:	f896 c000 	ldrb.w	ip, [r6]
    e450:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e452:	9905      	ldr	r1, [sp, #20]
    e454:	a827      	add	r0, sp, #156	; 0x9c
    e456:	e67d      	b.n	e154 <_svfprintf_r+0xfc4>
    e458:	2b01      	cmp	r3, #1
    e45a:	f8cd 8008 	str.w	r8, [sp, #8]
    e45e:	f47f a9f3 	bne.w	d848 <_svfprintf_r+0x6b8>
    e462:	f7ff bb93 	b.w	db8c <_svfprintf_r+0x9fc>
    e466:	9b08      	ldr	r3, [sp, #32]
    e468:	9904      	ldr	r1, [sp, #16]
    e46a:	f853 2b04 	ldr.w	r2, [r3], #4
    e46e:	464c      	mov	r4, r9
    e470:	6011      	str	r1, [r2, #0]
    e472:	9308      	str	r3, [sp, #32]
    e474:	f7fe bebe 	b.w	d1f4 <_svfprintf_r+0x64>
    e478:	3301      	adds	r3, #1
    e47a:	4965      	ldr	r1, [pc, #404]	; (e610 <_svfprintf_r+0x1480>)
    e47c:	f8ca 4004 	str.w	r4, [sl, #4]
    e480:	4422      	add	r2, r4
    e482:	2b07      	cmp	r3, #7
    e484:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e488:	f8ca 1000 	str.w	r1, [sl]
    e48c:	f77f ab22 	ble.w	dad4 <_svfprintf_r+0x944>
    e490:	e47b      	b.n	dd8a <_svfprintf_r+0xbfa>
    e492:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e494:	9812      	ldr	r0, [sp, #72]	; 0x48
    e496:	441a      	add	r2, r3
    e498:	e9ca 0300 	strd	r0, r3, [sl]
    e49c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e49e:	9226      	str	r2, [sp, #152]	; 0x98
    e4a0:	3301      	adds	r3, #1
    e4a2:	2b07      	cmp	r3, #7
    e4a4:	9325      	str	r3, [sp, #148]	; 0x94
    e4a6:	f300 81a9 	bgt.w	e7fc <_svfprintf_r+0x166c>
    e4aa:	f10a 0a08 	add.w	sl, sl, #8
    e4ae:	2900      	cmp	r1, #0
    e4b0:	f6bf af54 	bge.w	e35c <_svfprintf_r+0x11cc>
    e4b4:	424d      	negs	r5, r1
    e4b6:	3110      	adds	r1, #16
    e4b8:	f280 830f 	bge.w	eada <_svfprintf_r+0x194a>
    e4bc:	ee1b 1a10 	vmov	r1, s22
    e4c0:	2610      	movs	r6, #16
    e4c2:	e005      	b.n	e4d0 <_svfprintf_r+0x1340>
    e4c4:	f10a 0a08 	add.w	sl, sl, #8
    e4c8:	3d10      	subs	r5, #16
    e4ca:	2d10      	cmp	r5, #16
    e4cc:	f340 8305 	ble.w	eada <_svfprintf_r+0x194a>
    e4d0:	3301      	adds	r3, #1
    e4d2:	484f      	ldr	r0, [pc, #316]	; (e610 <_svfprintf_r+0x1480>)
    e4d4:	3210      	adds	r2, #16
    e4d6:	2b07      	cmp	r3, #7
    e4d8:	e9ca 0600 	strd	r0, r6, [sl]
    e4dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e4e0:	ddf0      	ble.n	e4c4 <_svfprintf_r+0x1334>
    e4e2:	aa24      	add	r2, sp, #144	; 0x90
    e4e4:	4658      	mov	r0, fp
    e4e6:	9103      	str	r1, [sp, #12]
    e4e8:	f003 fcde 	bl	11ea8 <__ssprint_r>
    e4ec:	2800      	cmp	r0, #0
    e4ee:	f47f aab4 	bne.w	da5a <_svfprintf_r+0x8ca>
    e4f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4f6:	9903      	ldr	r1, [sp, #12]
    e4f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4fc:	e7e4      	b.n	e4c8 <_svfprintf_r+0x1338>
    e4fe:	9b08      	ldr	r3, [sp, #32]
    e500:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e504:	bf1a      	itte	ne
    e506:	4611      	movne	r1, r2
    e508:	f853 2b04 	ldrne.w	r2, [r3], #4
    e50c:	f853 2b04 	ldreq.w	r2, [r3], #4
    e510:	9308      	str	r3, [sp, #32]
    e512:	bf18      	it	ne
    e514:	b2d2      	uxtbne	r2, r2
    e516:	f7ff b945 	b.w	d7a4 <_svfprintf_r+0x614>
    e51a:	9b02      	ldr	r3, [sp, #8]
    e51c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    e520:	9b08      	ldr	r3, [sp, #32]
    e522:	bf1a      	itte	ne
    e524:	4611      	movne	r1, r2
    e526:	f853 2b04 	ldrne.w	r2, [r3], #4
    e52a:	f853 2b04 	ldreq.w	r2, [r3], #4
    e52e:	9308      	str	r3, [sp, #32]
    e530:	bf18      	it	ne
    e532:	b2d2      	uxtbne	r2, r2
    e534:	2301      	movs	r3, #1
    e536:	f7ff b8d0 	b.w	d6da <_svfprintf_r+0x54a>
    e53a:	9b08      	ldr	r3, [sp, #32]
    e53c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e540:	bf1a      	itte	ne
    e542:	4611      	movne	r1, r2
    e544:	f853 2b04 	ldrne.w	r2, [r3], #4
    e548:	f853 2b04 	ldreq.w	r2, [r3], #4
    e54c:	9308      	str	r3, [sp, #32]
    e54e:	bf18      	it	ne
    e550:	b2d2      	uxtbne	r2, r2
    e552:	e54e      	b.n	dff2 <_svfprintf_r+0xe62>
    e554:	468a      	mov	sl, r1
    e556:	3301      	adds	r3, #1
    e558:	492d      	ldr	r1, [pc, #180]	; (e610 <_svfprintf_r+0x1480>)
    e55a:	f8ca 5004 	str.w	r5, [sl, #4]
    e55e:	442a      	add	r2, r5
    e560:	2b07      	cmp	r3, #7
    e562:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e566:	f8ca 1000 	str.w	r1, [sl]
    e56a:	f300 8139 	bgt.w	e7e0 <_svfprintf_r+0x1650>
    e56e:	f10a 0a08 	add.w	sl, sl, #8
    e572:	f7ff bb8c 	b.w	dc8e <_svfprintf_r+0xafe>
    e576:	2300      	movs	r3, #0
    e578:	4619      	mov	r1, r3
    e57a:	9600      	str	r6, [sp, #0]
    e57c:	aa1d      	add	r2, sp, #116	; 0x74
    e57e:	4658      	mov	r0, fp
    e580:	f003 fb8e 	bl	11ca0 <_wcsrtombs_r>
    e584:	4603      	mov	r3, r0
    e586:	3301      	adds	r3, #1
    e588:	9005      	str	r0, [sp, #20]
    e58a:	f000 82f1 	beq.w	eb70 <_svfprintf_r+0x19e0>
    e58e:	941d      	str	r4, [sp, #116]	; 0x74
    e590:	9b05      	ldr	r3, [sp, #20]
    e592:	2b00      	cmp	r3, #0
    e594:	d04e      	beq.n	e634 <_svfprintf_r+0x14a4>
    e596:	2b63      	cmp	r3, #99	; 0x63
    e598:	f300 8118 	bgt.w	e7cc <_svfprintf_r+0x163c>
    e59c:	2300      	movs	r3, #0
    e59e:	9307      	str	r3, [sp, #28]
    e5a0:	ac37      	add	r4, sp, #220	; 0xdc
    e5a2:	2208      	movs	r2, #8
    e5a4:	2100      	movs	r1, #0
    e5a6:	4630      	mov	r0, r6
    e5a8:	f7fc ff24 	bl	b3f4 <memset>
    e5ac:	9d05      	ldr	r5, [sp, #20]
    e5ae:	9600      	str	r6, [sp, #0]
    e5b0:	462b      	mov	r3, r5
    e5b2:	aa1d      	add	r2, sp, #116	; 0x74
    e5b4:	4621      	mov	r1, r4
    e5b6:	4658      	mov	r0, fp
    e5b8:	f003 fb72 	bl	11ca0 <_wcsrtombs_r>
    e5bc:	4285      	cmp	r5, r0
    e5be:	f040 837c 	bne.w	ecba <_svfprintf_r+0x1b2a>
    e5c2:	9a05      	ldr	r2, [sp, #20]
    e5c4:	2300      	movs	r3, #0
    e5c6:	54a3      	strb	r3, [r4, r2]
    e5c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e5cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e5d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e5d4:	9303      	str	r3, [sp, #12]
    e5d6:	9202      	str	r2, [sp, #8]
    e5d8:	930f      	str	r3, [sp, #60]	; 0x3c
    e5da:	f7fe bfba 	b.w	d552 <_svfprintf_r+0x3c2>
    e5de:	212d      	movs	r1, #45	; 0x2d
    e5e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e5e4:	f7fe bfa4 	b.w	d530 <_svfprintf_r+0x3a0>
    e5e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e5ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    e5ec:	ebab 0b03 	sub.w	fp, fp, r3
    e5f0:	461a      	mov	r2, r3
    e5f2:	4658      	mov	r0, fp
    e5f4:	f7fc ff96 	bl	b524 <strncpy>
    e5f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    e5fc:	4b05      	ldr	r3, [pc, #20]	; (e614 <_svfprintf_r+0x1484>)
    e5fe:	b10a      	cbz	r2, e604 <_svfprintf_r+0x1474>
    e600:	f10a 0a01 	add.w	sl, sl, #1
    e604:	f04f 0c00 	mov.w	ip, #0
    e608:	e628      	b.n	e25c <_svfprintf_r+0x10cc>
    e60a:	bf00      	nop
    e60c:	20000df4 	.word	0x20000df4
    e610:	20008608 	.word	0x20008608
    e614:	cccccccd 	.word	0xcccccccd
    e618:	ee1b 1a10 	vmov	r1, s22
    e61c:	aa24      	add	r2, sp, #144	; 0x90
    e61e:	4658      	mov	r0, fp
    e620:	f003 fc42 	bl	11ea8 <__ssprint_r>
    e624:	2800      	cmp	r0, #0
    e626:	f47f aa18 	bne.w	da5a <_svfprintf_r+0x8ca>
    e62a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e62c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e62e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e632:	e67c      	b.n	e32e <_svfprintf_r+0x119e>
    e634:	9b05      	ldr	r3, [sp, #20]
    e636:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e63a:	930f      	str	r3, [sp, #60]	; 0x3c
    e63c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e640:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e644:	9307      	str	r3, [sp, #28]
    e646:	f7fe bf84 	b.w	d552 <_svfprintf_r+0x3c2>
    e64a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e64c:	9805      	ldr	r0, [sp, #20]
    e64e:	1865      	adds	r5, r4, r1
    e650:	1a2d      	subs	r5, r5, r0
    e652:	1acc      	subs	r4, r1, r3
    e654:	42a5      	cmp	r5, r4
    e656:	bfa8      	it	ge
    e658:	4625      	movge	r5, r4
    e65a:	f7ff bb4d 	b.w	dcf8 <_svfprintf_r+0xb68>
    e65e:	9b08      	ldr	r3, [sp, #32]
    e660:	9904      	ldr	r1, [sp, #16]
    e662:	f853 2b04 	ldr.w	r2, [r3], #4
    e666:	9308      	str	r3, [sp, #32]
    e668:	8011      	strh	r1, [r2, #0]
    e66a:	464c      	mov	r4, r9
    e66c:	f7fe bdc2 	b.w	d1f4 <_svfprintf_r+0x64>
    e670:	f913 2b04 	ldrsb.w	r2, [r3], #4
    e674:	9308      	str	r3, [sp, #32]
    e676:	17d1      	asrs	r1, r2, #31
    e678:	460b      	mov	r3, r1
    e67a:	f7fe bfdb 	b.w	d634 <_svfprintf_r+0x4a4>
    e67e:	9a03      	ldr	r2, [sp, #12]
    e680:	2102      	movs	r1, #2
    e682:	ab22      	add	r3, sp, #136	; 0x88
    e684:	9301      	str	r3, [sp, #4]
    e686:	ab1d      	add	r3, sp, #116	; 0x74
    e688:	9300      	str	r3, [sp, #0]
    e68a:	4658      	mov	r0, fp
    e68c:	ab1b      	add	r3, sp, #108	; 0x6c
    e68e:	eeb0 0b4a 	vmov.f64	d0, d10
    e692:	9202      	str	r2, [sp, #8]
    e694:	f002 fa14 	bl	10ac0 <_dtoa_r>
    e698:	2d47      	cmp	r5, #71	; 0x47
    e69a:	9a02      	ldr	r2, [sp, #8]
    e69c:	4604      	mov	r4, r0
    e69e:	f000 8161 	beq.w	e964 <_svfprintf_r+0x17d4>
    e6a2:	2d46      	cmp	r5, #70	; 0x46
    e6a4:	4410      	add	r0, r2
    e6a6:	d105      	bne.n	e6b4 <_svfprintf_r+0x1524>
    e6a8:	7823      	ldrb	r3, [r4, #0]
    e6aa:	2b30      	cmp	r3, #48	; 0x30
    e6ac:	f000 826f 	beq.w	eb8e <_svfprintf_r+0x19fe>
    e6b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e6b2:	4410      	add	r0, r2
    e6b4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e6bc:	f040 8146 	bne.w	e94c <_svfprintf_r+0x17bc>
    e6c0:	4603      	mov	r3, r0
    e6c2:	1b1b      	subs	r3, r3, r4
    e6c4:	930e      	str	r3, [sp, #56]	; 0x38
    e6c6:	2d47      	cmp	r5, #71	; 0x47
    e6c8:	f000 8110 	beq.w	e8ec <_svfprintf_r+0x175c>
    e6cc:	2d46      	cmp	r5, #70	; 0x46
    e6ce:	f000 81b5 	beq.w	ea3c <_svfprintf_r+0x18ac>
    e6d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e6d4:	930c      	str	r3, [sp, #48]	; 0x30
    e6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6d8:	2d41      	cmp	r5, #65	; 0x41
    e6da:	f103 33ff 	add.w	r3, r3, #4294967295
    e6de:	931b      	str	r3, [sp, #108]	; 0x6c
    e6e0:	f000 81e5 	beq.w	eaae <_svfprintf_r+0x191e>
    e6e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    e6e8:	2100      	movs	r1, #0
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	bfb8      	it	lt
    e6ee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    e6f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    e6f4:	bfba      	itte	lt
    e6f6:	f1c3 0301 	rsblt	r3, r3, #1
    e6fa:	222d      	movlt	r2, #45	; 0x2d
    e6fc:	222b      	movge	r2, #43	; 0x2b
    e6fe:	2b09      	cmp	r3, #9
    e700:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    e704:	f340 81da 	ble.w	eabc <_svfprintf_r+0x192c>
    e708:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    e70c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; eb2c <_svfprintf_r+0x199c>
    e710:	462a      	mov	r2, r5
    e712:	4610      	mov	r0, r2
    e714:	fb8c 2103 	smull	r2, r1, ip, r3
    e718:	17da      	asrs	r2, r3, #31
    e71a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    e71e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e722:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    e726:	3130      	adds	r1, #48	; 0x30
    e728:	f800 1c01 	strb.w	r1, [r0, #-1]
    e72c:	4619      	mov	r1, r3
    e72e:	2963      	cmp	r1, #99	; 0x63
    e730:	4613      	mov	r3, r2
    e732:	f100 32ff 	add.w	r2, r0, #4294967295
    e736:	dcec      	bgt.n	e712 <_svfprintf_r+0x1582>
    e738:	3330      	adds	r3, #48	; 0x30
    e73a:	b2d9      	uxtb	r1, r3
    e73c:	1e83      	subs	r3, r0, #2
    e73e:	429d      	cmp	r5, r3
    e740:	f802 1c01 	strb.w	r1, [r2, #-1]
    e744:	f240 828b 	bls.w	ec5e <_svfprintf_r+0x1ace>
    e748:	4613      	mov	r3, r2
    e74a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e74e:	e001      	b.n	e754 <_svfprintf_r+0x15c4>
    e750:	f813 1b01 	ldrb.w	r1, [r3], #1
    e754:	f802 1b01 	strb.w	r1, [r2], #1
    e758:	429d      	cmp	r5, r3
    e75a:	d1f9      	bne.n	e750 <_svfprintf_r+0x15c0>
    e75c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    e760:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e764:	1a1b      	subs	r3, r3, r0
    e766:	4413      	add	r3, r2
    e768:	aa1e      	add	r2, sp, #120	; 0x78
    e76a:	1a9b      	subs	r3, r3, r2
    e76c:	9314      	str	r3, [sp, #80]	; 0x50
    e76e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e770:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e772:	2b01      	cmp	r3, #1
    e774:	441a      	add	r2, r3
    e776:	9205      	str	r2, [sp, #20]
    e778:	f340 8203 	ble.w	eb82 <_svfprintf_r+0x19f2>
    e77c:	9b05      	ldr	r3, [sp, #20]
    e77e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e780:	4413      	add	r3, r2
    e782:	9305      	str	r3, [sp, #20]
    e784:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    e788:	9a05      	ldr	r2, [sp, #20]
    e78a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    e78e:	2300      	movs	r3, #0
    e790:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e794:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e798:	930f      	str	r3, [sp, #60]	; 0x3c
    e79a:	9202      	str	r2, [sp, #8]
    e79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e79e:	2b00      	cmp	r3, #0
    e7a0:	f040 80b1 	bne.w	e906 <_svfprintf_r+0x1776>
    e7a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e7a8:	9303      	str	r3, [sp, #12]
    e7aa:	f7fe bed2 	b.w	d552 <_svfprintf_r+0x3c2>
    e7ae:	4620      	mov	r0, r4
    e7b0:	f7fd f966 	bl	ba80 <strlen>
    e7b4:	4602      	mov	r2, r0
    e7b6:	9005      	str	r0, [sp, #20]
    e7b8:	f7fe bf20 	b.w	d5fc <_svfprintf_r+0x46c>
    e7bc:	ee1b 1a10 	vmov	r1, s22
    e7c0:	aa24      	add	r2, sp, #144	; 0x90
    e7c2:	4658      	mov	r0, fp
    e7c4:	f003 fb70 	bl	11ea8 <__ssprint_r>
    e7c8:	f7fe bded 	b.w	d3a6 <_svfprintf_r+0x216>
    e7cc:	1c59      	adds	r1, r3, #1
    e7ce:	4658      	mov	r0, fp
    e7d0:	f7fa fee8 	bl	95a4 <_malloc_r>
    e7d4:	4604      	mov	r4, r0
    e7d6:	2800      	cmp	r0, #0
    e7d8:	f000 81ca 	beq.w	eb70 <_svfprintf_r+0x19e0>
    e7dc:	9007      	str	r0, [sp, #28]
    e7de:	e6e0      	b.n	e5a2 <_svfprintf_r+0x1412>
    e7e0:	ee1b 1a10 	vmov	r1, s22
    e7e4:	aa24      	add	r2, sp, #144	; 0x90
    e7e6:	4658      	mov	r0, fp
    e7e8:	f003 fb5e 	bl	11ea8 <__ssprint_r>
    e7ec:	2800      	cmp	r0, #0
    e7ee:	f47f a934 	bne.w	da5a <_svfprintf_r+0x8ca>
    e7f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e7f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e7f8:	f7ff ba49 	b.w	dc8e <_svfprintf_r+0xafe>
    e7fc:	ee1b 1a10 	vmov	r1, s22
    e800:	aa24      	add	r2, sp, #144	; 0x90
    e802:	4658      	mov	r0, fp
    e804:	f003 fb50 	bl	11ea8 <__ssprint_r>
    e808:	2800      	cmp	r0, #0
    e80a:	f47f a926 	bne.w	da5a <_svfprintf_r+0x8ca>
    e80e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e812:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e814:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e818:	e649      	b.n	e4ae <_svfprintf_r+0x131e>
    e81a:	2306      	movs	r3, #6
    e81c:	9303      	str	r3, [sp, #12]
    e81e:	f7ff bb83 	b.w	df28 <_svfprintf_r+0xd98>
    e822:	9b03      	ldr	r3, [sp, #12]
    e824:	2102      	movs	r1, #2
    e826:	1c5a      	adds	r2, r3, #1
    e828:	e72b      	b.n	e682 <_svfprintf_r+0x14f2>
    e82a:	9a03      	ldr	r2, [sp, #12]
    e82c:	2103      	movs	r1, #3
    e82e:	e728      	b.n	e682 <_svfprintf_r+0x14f2>
    e830:	a81b      	add	r0, sp, #108	; 0x6c
    e832:	eeb0 0b4a 	vmov.f64	d0, d10
    e836:	f002 f817 	bl	10868 <frexp>
    e83a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e83e:	ee20 0b07 	vmul.f64	d0, d0, d7
    e842:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e84a:	d101      	bne.n	e850 <_svfprintf_r+0x16c0>
    e84c:	2301      	movs	r3, #1
    e84e:	931b      	str	r3, [sp, #108]	; 0x6c
    e850:	48b3      	ldr	r0, [pc, #716]	; (eb20 <_svfprintf_r+0x1990>)
    e852:	9b03      	ldr	r3, [sp, #12]
    e854:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    e858:	3b01      	subs	r3, #1
    e85a:	4622      	mov	r2, r4
    e85c:	e004      	b.n	e868 <_svfprintf_r+0x16d8>
    e85e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e866:	d013      	beq.n	e890 <_svfprintf_r+0x1700>
    e868:	ee20 0b05 	vmul.f64	d0, d0, d5
    e86c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    e870:	f1b3 3fff 	cmp.w	r3, #4294967295
    e874:	ee17 1a90 	vmov	r1, s15
    e878:	5c41      	ldrb	r1, [r0, r1]
    e87a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    e87e:	4694      	mov	ip, r2
    e880:	ee30 0b46 	vsub.f64	d0, d0, d6
    e884:	f802 1b01 	strb.w	r1, [r2], #1
    e888:	4619      	mov	r1, r3
    e88a:	f103 33ff 	add.w	r3, r3, #4294967295
    e88e:	d1e6      	bne.n	e85e <_svfprintf_r+0x16ce>
    e890:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    e894:	eeb4 0bc6 	vcmpe.f64	d0, d6
    e898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e89c:	f300 8148 	bgt.w	eb30 <_svfprintf_r+0x19a0>
    e8a0:	eeb4 0b46 	vcmp.f64	d0, d6
    e8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e8a8:	d104      	bne.n	e8b4 <_svfprintf_r+0x1724>
    e8aa:	ee17 3a90 	vmov	r3, s15
    e8ae:	07db      	lsls	r3, r3, #31
    e8b0:	f100 813e 	bmi.w	eb30 <_svfprintf_r+0x19a0>
    e8b4:	2900      	cmp	r1, #0
    e8b6:	db06      	blt.n	e8c6 <_svfprintf_r+0x1736>
    e8b8:	1c4b      	adds	r3, r1, #1
    e8ba:	4413      	add	r3, r2
    e8bc:	2130      	movs	r1, #48	; 0x30
    e8be:	f802 1b01 	strb.w	r1, [r2], #1
    e8c2:	4293      	cmp	r3, r2
    e8c4:	d1fb      	bne.n	e8be <_svfprintf_r+0x172e>
    e8c6:	1b13      	subs	r3, r2, r4
    e8c8:	930e      	str	r3, [sp, #56]	; 0x38
    e8ca:	e6fc      	b.n	e6c6 <_svfprintf_r+0x1536>
    e8cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    e8d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    e8d8:	9613      	str	r6, [sp, #76]	; 0x4c
    e8da:	18e3      	adds	r3, r4, r3
    e8dc:	429d      	cmp	r5, r3
    e8de:	4629      	mov	r1, r5
    e8e0:	bf28      	it	cs
    e8e2:	4619      	movcs	r1, r3
    e8e4:	4682      	mov	sl, r0
    e8e6:	9105      	str	r1, [sp, #20]
    e8e8:	f7ff b9d8 	b.w	dc9c <_svfprintf_r+0xb0c>
    e8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e8ee:	930c      	str	r3, [sp, #48]	; 0x30
    e8f0:	1cda      	adds	r2, r3, #3
    e8f2:	db02      	blt.n	e8fa <_svfprintf_r+0x176a>
    e8f4:	9a03      	ldr	r2, [sp, #12]
    e8f6:	4293      	cmp	r3, r2
    e8f8:	dd0c      	ble.n	e914 <_svfprintf_r+0x1784>
    e8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8fc:	3b02      	subs	r3, #2
    e8fe:	930b      	str	r3, [sp, #44]	; 0x2c
    e900:	f023 0520 	bic.w	r5, r3, #32
    e904:	e6e7      	b.n	e6d6 <_svfprintf_r+0x1546>
    e906:	212d      	movs	r1, #45	; 0x2d
    e908:	2300      	movs	r3, #0
    e90a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e90e:	9303      	str	r3, [sp, #12]
    e910:	f7fe be22 	b.w	d558 <_svfprintf_r+0x3c8>
    e914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e918:	4293      	cmp	r3, r2
    e91a:	f2c0 80bd 	blt.w	ea98 <_svfprintf_r+0x1908>
    e91e:	07f0      	lsls	r0, r6, #31
    e920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e922:	f140 8132 	bpl.w	eb8a <_svfprintf_r+0x19fa>
    e926:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e928:	4413      	add	r3, r2
    e92a:	9305      	str	r3, [sp, #20]
    e92c:	0571      	lsls	r1, r6, #21
    e92e:	d503      	bpl.n	e938 <_svfprintf_r+0x17a8>
    e930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e932:	2b00      	cmp	r3, #0
    e934:	f300 8135 	bgt.w	eba2 <_svfprintf_r+0x1a12>
    e938:	9b05      	ldr	r3, [sp, #20]
    e93a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e93e:	9302      	str	r3, [sp, #8]
    e940:	2367      	movs	r3, #103	; 0x67
    e942:	930b      	str	r3, [sp, #44]	; 0x2c
    e944:	2300      	movs	r3, #0
    e946:	930f      	str	r3, [sp, #60]	; 0x3c
    e948:	930d      	str	r3, [sp, #52]	; 0x34
    e94a:	e727      	b.n	e79c <_svfprintf_r+0x160c>
    e94c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e94e:	4283      	cmp	r3, r0
    e950:	f4bf aeb7 	bcs.w	e6c2 <_svfprintf_r+0x1532>
    e954:	2130      	movs	r1, #48	; 0x30
    e956:	1c5a      	adds	r2, r3, #1
    e958:	9222      	str	r2, [sp, #136]	; 0x88
    e95a:	7019      	strb	r1, [r3, #0]
    e95c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e95e:	4298      	cmp	r0, r3
    e960:	d8f9      	bhi.n	e956 <_svfprintf_r+0x17c6>
    e962:	e6ae      	b.n	e6c2 <_svfprintf_r+0x1532>
    e964:	07f3      	lsls	r3, r6, #31
    e966:	f100 80a7 	bmi.w	eab8 <_svfprintf_r+0x1928>
    e96a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e96c:	e6a9      	b.n	e6c2 <_svfprintf_r+0x1532>
    e96e:	aa24      	add	r2, sp, #144	; 0x90
    e970:	4658      	mov	r0, fp
    e972:	9105      	str	r1, [sp, #20]
    e974:	f003 fa98 	bl	11ea8 <__ssprint_r>
    e978:	2800      	cmp	r0, #0
    e97a:	f47f a86e 	bne.w	da5a <_svfprintf_r+0x8ca>
    e97e:	f896 c000 	ldrb.w	ip, [r6]
    e982:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e984:	9905      	ldr	r1, [sp, #20]
    e986:	a827      	add	r0, sp, #156	; 0x9c
    e988:	4465      	add	r5, ip
    e98a:	f7ff bbec 	b.w	e166 <_svfprintf_r+0xfd6>
    e98e:	ee1b 1a10 	vmov	r1, s22
    e992:	aa24      	add	r2, sp, #144	; 0x90
    e994:	4658      	mov	r0, fp
    e996:	f003 fa87 	bl	11ea8 <__ssprint_r>
    e99a:	2800      	cmp	r0, #0
    e99c:	f47f a85d 	bne.w	da5a <_svfprintf_r+0x8ca>
    e9a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e9a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9a6:	f7ff b96b 	b.w	dc80 <_svfprintf_r+0xaf0>
    e9aa:	2378      	movs	r3, #120	; 0x78
    e9ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e9b0:	2330      	movs	r3, #48	; 0x30
    e9b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e9b6:	9b03      	ldr	r3, [sp, #12]
    e9b8:	2b63      	cmp	r3, #99	; 0x63
    e9ba:	f048 0602 	orr.w	r6, r8, #2
    e9be:	f300 80a6 	bgt.w	eb0e <_svfprintf_r+0x197e>
    e9c2:	2300      	movs	r3, #0
    e9c4:	9307      	str	r3, [sp, #28]
    e9c6:	ac37      	add	r4, sp, #220	; 0xdc
    e9c8:	ee18 3a90 	vmov	r3, s17
    e9cc:	2b00      	cmp	r3, #0
    e9ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    e9d2:	db2b      	blt.n	ea2c <_svfprintf_r+0x189c>
    e9d4:	eeb0 ab48 	vmov.f64	d10, d8
    e9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9da:	f023 0520 	bic.w	r5, r3, #32
    e9de:	2300      	movs	r3, #0
    e9e0:	9309      	str	r3, [sp, #36]	; 0x24
    e9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9e4:	2b61      	cmp	r3, #97	; 0x61
    e9e6:	f47f aaad 	bne.w	df44 <_svfprintf_r+0xdb4>
    e9ea:	eeb0 0b4a 	vmov.f64	d0, d10
    e9ee:	a81b      	add	r0, sp, #108	; 0x6c
    e9f0:	f001 ff3a 	bl	10868 <frexp>
    e9f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e9f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    e9fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ea04:	d101      	bne.n	ea0a <_svfprintf_r+0x187a>
    ea06:	2301      	movs	r3, #1
    ea08:	931b      	str	r3, [sp, #108]	; 0x6c
    ea0a:	4846      	ldr	r0, [pc, #280]	; (eb24 <_svfprintf_r+0x1994>)
    ea0c:	e721      	b.n	e852 <_svfprintf_r+0x16c2>
    ea0e:	ee1b 1a10 	vmov	r1, s22
    ea12:	aa24      	add	r2, sp, #144	; 0x90
    ea14:	4658      	mov	r0, fp
    ea16:	f003 fa47 	bl	11ea8 <__ssprint_r>
    ea1a:	2800      	cmp	r0, #0
    ea1c:	f47f a81d 	bne.w	da5a <_svfprintf_r+0x8ca>
    ea20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ea22:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea28:	f7ff b94e 	b.w	dcc8 <_svfprintf_r+0xb38>
    ea2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ea2e:	f023 0520 	bic.w	r5, r3, #32
    ea32:	232d      	movs	r3, #45	; 0x2d
    ea34:	9309      	str	r3, [sp, #36]	; 0x24
    ea36:	eeb1 ab48 	vneg.f64	d10, d8
    ea3a:	e7d2      	b.n	e9e2 <_svfprintf_r+0x1852>
    ea3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ea3e:	920c      	str	r2, [sp, #48]	; 0x30
    ea40:	2a00      	cmp	r2, #0
    ea42:	f006 0301 	and.w	r3, r6, #1
    ea46:	f340 810d 	ble.w	ec64 <_svfprintf_r+0x1ad4>
    ea4a:	9903      	ldr	r1, [sp, #12]
    ea4c:	430b      	orrs	r3, r1
    ea4e:	f040 80cf 	bne.w	ebf0 <_svfprintf_r+0x1a60>
    ea52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea54:	9305      	str	r3, [sp, #20]
    ea56:	2366      	movs	r3, #102	; 0x66
    ea58:	930b      	str	r3, [sp, #44]	; 0x2c
    ea5a:	0572      	lsls	r2, r6, #21
    ea5c:	f100 80a3 	bmi.w	eba6 <_svfprintf_r+0x1a16>
    ea60:	9b05      	ldr	r3, [sp, #20]
    ea62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ea66:	9302      	str	r3, [sp, #8]
    ea68:	e76c      	b.n	e944 <_svfprintf_r+0x17b4>
    ea6a:	ee1b 1a10 	vmov	r1, s22
    ea6e:	aa24      	add	r2, sp, #144	; 0x90
    ea70:	4658      	mov	r0, fp
    ea72:	f003 fa19 	bl	11ea8 <__ssprint_r>
    ea76:	2800      	cmp	r0, #0
    ea78:	f47e afef 	bne.w	da5a <_svfprintf_r+0x8ca>
    ea7c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    ea7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea80:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea82:	1b1c      	subs	r4, r3, r4
    ea84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea88:	f7ff b936 	b.w	dcf8 <_svfprintf_r+0xb68>
    ea8c:	2358      	movs	r3, #88	; 0x58
    ea8e:	e78d      	b.n	e9ac <_svfprintf_r+0x181c>
    ea90:	2200      	movs	r2, #0
    ea92:	9203      	str	r2, [sp, #12]
    ea94:	f7fe bbda 	b.w	d24c <_svfprintf_r+0xbc>
    ea98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ea9c:	189a      	adds	r2, r3, r2
    ea9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eaa0:	9205      	str	r2, [sp, #20]
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	f340 80ab 	ble.w	ebfe <_svfprintf_r+0x1a6e>
    eaa8:	2367      	movs	r3, #103	; 0x67
    eaaa:	930b      	str	r3, [sp, #44]	; 0x2c
    eaac:	e7d5      	b.n	ea5a <_svfprintf_r+0x18ca>
    eaae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eab0:	320f      	adds	r2, #15
    eab2:	b2d2      	uxtb	r2, r2
    eab4:	2101      	movs	r1, #1
    eab6:	e618      	b.n	e6ea <_svfprintf_r+0x155a>
    eab8:	18a0      	adds	r0, r4, r2
    eaba:	e5fb      	b.n	e6b4 <_svfprintf_r+0x1524>
    eabc:	2900      	cmp	r1, #0
    eabe:	f040 80a8 	bne.w	ec12 <_svfprintf_r+0x1a82>
    eac2:	2230      	movs	r2, #48	; 0x30
    eac4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    eac8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    eacc:	3330      	adds	r3, #48	; 0x30
    eace:	f802 3b01 	strb.w	r3, [r2], #1
    ead2:	ab1e      	add	r3, sp, #120	; 0x78
    ead4:	1ad3      	subs	r3, r2, r3
    ead6:	9314      	str	r3, [sp, #80]	; 0x50
    ead8:	e649      	b.n	e76e <_svfprintf_r+0x15de>
    eada:	3301      	adds	r3, #1
    eadc:	4912      	ldr	r1, [pc, #72]	; (eb28 <_svfprintf_r+0x1998>)
    eade:	f8ca 5004 	str.w	r5, [sl, #4]
    eae2:	442a      	add	r2, r5
    eae4:	2b07      	cmp	r3, #7
    eae6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eaea:	f8ca 1000 	str.w	r1, [sl]
    eaee:	f77f ac33 	ble.w	e358 <_svfprintf_r+0x11c8>
    eaf2:	ee1b 1a10 	vmov	r1, s22
    eaf6:	aa24      	add	r2, sp, #144	; 0x90
    eaf8:	4658      	mov	r0, fp
    eafa:	f003 f9d5 	bl	11ea8 <__ssprint_r>
    eafe:	2800      	cmp	r0, #0
    eb00:	f47e afab 	bne.w	da5a <_svfprintf_r+0x8ca>
    eb04:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eb08:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb0c:	e426      	b.n	e35c <_svfprintf_r+0x11cc>
    eb0e:	1c59      	adds	r1, r3, #1
    eb10:	4658      	mov	r0, fp
    eb12:	f7fa fd47 	bl	95a4 <_malloc_r>
    eb16:	4604      	mov	r4, r0
    eb18:	b350      	cbz	r0, eb70 <_svfprintf_r+0x19e0>
    eb1a:	9007      	str	r0, [sp, #28]
    eb1c:	e754      	b.n	e9c8 <_svfprintf_r+0x1838>
    eb1e:	bf00      	nop
    eb20:	20000dd8 	.word	0x20000dd8
    eb24:	20000dc4 	.word	0x20000dc4
    eb28:	20008608 	.word	0x20008608
    eb2c:	66666667 	.word	0x66666667
    eb30:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    eb34:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    eb38:	f890 c00f 	ldrb.w	ip, [r0, #15]
    eb3c:	4561      	cmp	r1, ip
    eb3e:	4613      	mov	r3, r2
    eb40:	d10a      	bne.n	eb58 <_svfprintf_r+0x19c8>
    eb42:	f04f 0e30 	mov.w	lr, #48	; 0x30
    eb46:	f803 ec01 	strb.w	lr, [r3, #-1]
    eb4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eb4c:	1e59      	subs	r1, r3, #1
    eb4e:	9122      	str	r1, [sp, #136]	; 0x88
    eb50:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    eb54:	458c      	cmp	ip, r1
    eb56:	d0f6      	beq.n	eb46 <_svfprintf_r+0x19b6>
    eb58:	2939      	cmp	r1, #57	; 0x39
    eb5a:	bf16      	itet	ne
    eb5c:	3101      	addne	r1, #1
    eb5e:	7a81      	ldrbeq	r1, [r0, #10]
    eb60:	b2c9      	uxtbne	r1, r1
    eb62:	f803 1c01 	strb.w	r1, [r3, #-1]
    eb66:	e6ae      	b.n	e8c6 <_svfprintf_r+0x1736>
    eb68:	2300      	movs	r3, #0
    eb6a:	4690      	mov	r8, r2
    eb6c:	9307      	str	r3, [sp, #28]
    eb6e:	e760      	b.n	ea32 <_svfprintf_r+0x18a2>
    eb70:	ee1b 2a10 	vmov	r2, s22
    eb74:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    eb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eb7c:	8193      	strh	r3, [r2, #12]
    eb7e:	f7fe bc16 	b.w	d3ae <_svfprintf_r+0x21e>
    eb82:	07f5      	lsls	r5, r6, #31
    eb84:	f57f adfe 	bpl.w	e784 <_svfprintf_r+0x15f4>
    eb88:	e5f8      	b.n	e77c <_svfprintf_r+0x15ec>
    eb8a:	9305      	str	r3, [sp, #20]
    eb8c:	e6ce      	b.n	e92c <_svfprintf_r+0x179c>
    eb8e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb96:	f43f ad8b 	beq.w	e6b0 <_svfprintf_r+0x1520>
    eb9a:	f1c2 0201 	rsb	r2, r2, #1
    eb9e:	921b      	str	r2, [sp, #108]	; 0x6c
    eba0:	e587      	b.n	e6b2 <_svfprintf_r+0x1522>
    eba2:	2367      	movs	r3, #103	; 0x67
    eba4:	930b      	str	r3, [sp, #44]	; 0x2c
    eba6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    eba8:	780b      	ldrb	r3, [r1, #0]
    ebaa:	2bff      	cmp	r3, #255	; 0xff
    ebac:	d079      	beq.n	eca2 <_svfprintf_r+0x1b12>
    ebae:	2500      	movs	r5, #0
    ebb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ebb2:	4628      	mov	r0, r5
    ebb4:	e003      	b.n	ebbe <_svfprintf_r+0x1a2e>
    ebb6:	3001      	adds	r0, #1
    ebb8:	3101      	adds	r1, #1
    ebba:	2bff      	cmp	r3, #255	; 0xff
    ebbc:	d008      	beq.n	ebd0 <_svfprintf_r+0x1a40>
    ebbe:	4293      	cmp	r3, r2
    ebc0:	da06      	bge.n	ebd0 <_svfprintf_r+0x1a40>
    ebc2:	1ad2      	subs	r2, r2, r3
    ebc4:	784b      	ldrb	r3, [r1, #1]
    ebc6:	2b00      	cmp	r3, #0
    ebc8:	d1f5      	bne.n	ebb6 <_svfprintf_r+0x1a26>
    ebca:	780b      	ldrb	r3, [r1, #0]
    ebcc:	3501      	adds	r5, #1
    ebce:	e7f4      	b.n	ebba <_svfprintf_r+0x1a2a>
    ebd0:	920c      	str	r2, [sp, #48]	; 0x30
    ebd2:	9113      	str	r1, [sp, #76]	; 0x4c
    ebd4:	900d      	str	r0, [sp, #52]	; 0x34
    ebd6:	950f      	str	r5, [sp, #60]	; 0x3c
    ebd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ebda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ebdc:	9916      	ldr	r1, [sp, #88]	; 0x58
    ebde:	4413      	add	r3, r2
    ebe0:	9a05      	ldr	r2, [sp, #20]
    ebe2:	fb01 2303 	mla	r3, r1, r3, r2
    ebe6:	9305      	str	r3, [sp, #20]
    ebe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ebec:	9302      	str	r3, [sp, #8]
    ebee:	e5d5      	b.n	e79c <_svfprintf_r+0x160c>
    ebf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ebf2:	18d3      	adds	r3, r2, r3
    ebf4:	4419      	add	r1, r3
    ebf6:	2366      	movs	r3, #102	; 0x66
    ebf8:	9105      	str	r1, [sp, #20]
    ebfa:	930b      	str	r3, [sp, #44]	; 0x2c
    ebfc:	e72d      	b.n	ea5a <_svfprintf_r+0x18ca>
    ebfe:	f1c3 0301 	rsb	r3, r3, #1
    ec02:	441a      	add	r2, r3
    ec04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    ec08:	9302      	str	r3, [sp, #8]
    ec0a:	2367      	movs	r3, #103	; 0x67
    ec0c:	9205      	str	r2, [sp, #20]
    ec0e:	930b      	str	r3, [sp, #44]	; 0x2c
    ec10:	e698      	b.n	e944 <_svfprintf_r+0x17b4>
    ec12:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ec16:	e759      	b.n	eacc <_svfprintf_r+0x193c>
    ec18:	9b03      	ldr	r3, [sp, #12]
    ec1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    ec1e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ec22:	9305      	str	r3, [sp, #20]
    ec24:	e4b4      	b.n	e590 <_svfprintf_r+0x1400>
    ec26:	ee18 3a90 	vmov	r3, s17
    ec2a:	2b00      	cmp	r3, #0
    ec2c:	bfb4      	ite	lt
    ec2e:	212d      	movlt	r1, #45	; 0x2d
    ec30:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    ec34:	4c25      	ldr	r4, [pc, #148]	; (eccc <_svfprintf_r+0x1b3c>)
    ec36:	4b26      	ldr	r3, [pc, #152]	; (ecd0 <_svfprintf_r+0x1b40>)
    ec38:	bfb8      	it	lt
    ec3a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    ec3e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    ec42:	f7fe bc79 	b.w	d538 <_svfprintf_r+0x3a8>
    ec46:	9b03      	ldr	r3, [sp, #12]
    ec48:	9302      	str	r3, [sp, #8]
    ec4a:	9305      	str	r3, [sp, #20]
    ec4c:	2373      	movs	r3, #115	; 0x73
    ec4e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ec52:	9003      	str	r0, [sp, #12]
    ec54:	900f      	str	r0, [sp, #60]	; 0x3c
    ec56:	900d      	str	r0, [sp, #52]	; 0x34
    ec58:	930b      	str	r3, [sp, #44]	; 0x2c
    ec5a:	f7fe bc7a 	b.w	d552 <_svfprintf_r+0x3c2>
    ec5e:	2302      	movs	r3, #2
    ec60:	9314      	str	r3, [sp, #80]	; 0x50
    ec62:	e584      	b.n	e76e <_svfprintf_r+0x15de>
    ec64:	9a03      	ldr	r2, [sp, #12]
    ec66:	4313      	orrs	r3, r2
    ec68:	d105      	bne.n	ec76 <_svfprintf_r+0x1ae6>
    ec6a:	2301      	movs	r3, #1
    ec6c:	2266      	movs	r2, #102	; 0x66
    ec6e:	9302      	str	r3, [sp, #8]
    ec70:	920b      	str	r2, [sp, #44]	; 0x2c
    ec72:	9305      	str	r3, [sp, #20]
    ec74:	e666      	b.n	e944 <_svfprintf_r+0x17b4>
    ec76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ec78:	3301      	adds	r3, #1
    ec7a:	441a      	add	r2, r3
    ec7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    ec80:	9302      	str	r3, [sp, #8]
    ec82:	2366      	movs	r3, #102	; 0x66
    ec84:	9205      	str	r2, [sp, #20]
    ec86:	930b      	str	r3, [sp, #44]	; 0x2c
    ec88:	e65c      	b.n	e944 <_svfprintf_r+0x17b4>
    ec8a:	9a08      	ldr	r2, [sp, #32]
    ec8c:	f899 3001 	ldrb.w	r3, [r9, #1]
    ec90:	4689      	mov	r9, r1
    ec92:	f852 1b04 	ldr.w	r1, [r2], #4
    ec96:	9208      	str	r2, [sp, #32]
    ec98:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    ec9c:	9103      	str	r1, [sp, #12]
    ec9e:	f7fe bad3 	b.w	d248 <_svfprintf_r+0xb8>
    eca2:	2300      	movs	r3, #0
    eca4:	930f      	str	r3, [sp, #60]	; 0x3c
    eca6:	930d      	str	r3, [sp, #52]	; 0x34
    eca8:	e796      	b.n	ebd8 <_svfprintf_r+0x1a48>
    ecaa:	230c      	movs	r3, #12
    ecac:	f8cb 3000 	str.w	r3, [fp]
    ecb0:	f04f 33ff 	mov.w	r3, #4294967295
    ecb4:	9304      	str	r3, [sp, #16]
    ecb6:	f7fe bb81 	b.w	d3bc <_svfprintf_r+0x22c>
    ecba:	ee1b 2a10 	vmov	r2, s22
    ecbe:	8993      	ldrh	r3, [r2, #12]
    ecc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ecc4:	8193      	strh	r3, [r2, #12]
    ecc6:	f7fe bec8 	b.w	da5a <_svfprintf_r+0x8ca>
    ecca:	bf00      	nop
    eccc:	20000dc0 	.word	0x20000dc0
    ecd0:	20000720 	.word	0x20000720

0000ecd4 <__ssvfscanf_r>:
    ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecd8:	ed2d 8b02 	vpush	{d8}
    ecdc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    ece0:	468b      	mov	fp, r1
    ece2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    ece6:	af02      	add	r7, sp, #8
    ece8:	048c      	lsls	r4, r1, #18
    ecea:	4681      	mov	r9, r0
    ecec:	64fa      	str	r2, [r7, #76]	; 0x4c
    ecee:	633b      	str	r3, [r7, #48]	; 0x30
    ecf0:	d409      	bmi.n	ed06 <__ssvfscanf_r+0x32>
    ecf2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    ecf6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    ecfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ecfe:	f8ab 100c 	strh.w	r1, [fp, #12]
    ed02:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    ed06:	2300      	movs	r3, #0
    ed08:	461c      	mov	r4, r3
    ed0a:	2208      	movs	r2, #8
    ed0c:	4619      	mov	r1, r3
    ed0e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    ed12:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed14:	46a2      	mov	sl, r4
    ed16:	f7fc fb6d 	bl	b3f4 <memset>
    ed1a:	643c      	str	r4, [r7, #64]	; 0x40
    ed1c:	627c      	str	r4, [r7, #36]	; 0x24
    ed1e:	63bc      	str	r4, [r7, #56]	; 0x38
    ed20:	647c      	str	r4, [r7, #68]	; 0x44
    ed22:	4b83      	ldr	r3, [pc, #524]	; (ef30 <__ssvfscanf_r+0x25c>)
    ed24:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    ed28:	f7fc fc2e 	bl	b588 <__locale_mb_cur_max>
    ed2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    ed30:	4603      	mov	r3, r0
    ed32:	9200      	str	r2, [sp, #0]
    ed34:	f107 0154 	add.w	r1, r7, #84	; 0x54
    ed38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ed3a:	4648      	mov	r0, r9
    ed3c:	47a0      	blx	r4
    ed3e:	1e05      	subs	r5, r0, #0
    ed40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ed42:	db33      	blt.n	edac <__ssvfscanf_r+0xd8>
    ed44:	442b      	add	r3, r5
    ed46:	64fb      	str	r3, [r7, #76]	; 0x4c
    ed48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ed4a:	462e      	mov	r6, r5
    ed4c:	2b00      	cmp	r3, #0
    ed4e:	f000 80b6 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    ed52:	2d01      	cmp	r5, #1
    ed54:	d038      	beq.n	edc8 <__ssvfscanf_r+0xf4>
    ed56:	2b25      	cmp	r3, #37	; 0x25
    ed58:	d040      	beq.n	eddc <__ssvfscanf_r+0x108>
    ed5a:	2d00      	cmp	r5, #0
    ed5c:	d0e1      	beq.n	ed22 <__ssvfscanf_r+0x4e>
    ed5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ed60:	1b9e      	subs	r6, r3, r6
    ed62:	f8db 3004 	ldr.w	r3, [fp, #4]
    ed66:	1e74      	subs	r4, r6, #1
    ed68:	2b00      	cmp	r3, #0
    ed6a:	f340 8098 	ble.w	ee9e <__ssvfscanf_r+0x1ca>
    ed6e:	f8db 1000 	ldr.w	r1, [fp]
    ed72:	f894 c001 	ldrb.w	ip, [r4, #1]
    ed76:	f891 e000 	ldrb.w	lr, [r1]
    ed7a:	1ca3      	adds	r3, r4, #2
    ed7c:	eb0a 0003 	add.w	r0, sl, r3
    ed80:	45e6      	cmp	lr, ip
    ed82:	f101 0101 	add.w	r1, r1, #1
    ed86:	eba3 0206 	sub.w	r2, r3, r6
    ed8a:	f104 0401 	add.w	r4, r4, #1
    ed8e:	eba0 0006 	sub.w	r0, r0, r6
    ed92:	f040 8094 	bne.w	eebe <__ssvfscanf_r+0x1ea>
    ed96:	f8db 3004 	ldr.w	r3, [fp, #4]
    ed9a:	f8cb 1000 	str.w	r1, [fp]
    ed9e:	3b01      	subs	r3, #1
    eda0:	42aa      	cmp	r2, r5
    eda2:	f8cb 3004 	str.w	r3, [fp, #4]
    eda6:	dbdf      	blt.n	ed68 <__ssvfscanf_r+0x94>
    eda8:	4682      	mov	sl, r0
    edaa:	e7ba      	b.n	ed22 <__ssvfscanf_r+0x4e>
    edac:	3301      	adds	r3, #1
    edae:	64fb      	str	r3, [r7, #76]	; 0x4c
    edb0:	2208      	movs	r2, #8
    edb2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    edb6:	2100      	movs	r1, #0
    edb8:	f107 0058 	add.w	r0, r7, #88	; 0x58
    edbc:	657b      	str	r3, [r7, #84]	; 0x54
    edbe:	f7fc fb19 	bl	b3f4 <memset>
    edc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    edc4:	2b00      	cmp	r3, #0
    edc6:	d07a      	beq.n	eebe <__ssvfscanf_r+0x1ea>
    edc8:	4e5a      	ldr	r6, [pc, #360]	; (ef34 <__ssvfscanf_r+0x260>)
    edca:	5cf2      	ldrb	r2, [r6, r3]
    edcc:	0710      	lsls	r0, r2, #28
    edce:	f100 851c 	bmi.w	f80a <__ssvfscanf_r+0xb36>
    edd2:	2b25      	cmp	r3, #37	; 0x25
    edd4:	f040 8086 	bne.w	eee4 <__ssvfscanf_r+0x210>
    edd8:	2501      	movs	r5, #1
    edda:	462e      	mov	r6, r5
    eddc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    edde:	2400      	movs	r4, #0
    ede0:	7802      	ldrb	r2, [r0, #0]
    ede2:	46a0      	mov	r8, r4
    ede4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    ede8:	1c41      	adds	r1, r0, #1
    edea:	2b55      	cmp	r3, #85	; 0x55
    edec:	d867      	bhi.n	eebe <__ssvfscanf_r+0x1ea>
    edee:	e8df f013 	tbh	[pc, r3, lsl #1]
    edf2:	070a      	.short	0x070a
    edf4:	00660066 	.word	0x00660066
    edf8:	00660066 	.word	0x00660066
    edfc:	00660701 	.word	0x00660701
    ee00:	00660066 	.word	0x00660066
    ee04:	00660066 	.word	0x00660066
    ee08:	060c060c 	.word	0x060c060c
    ee0c:	060c060c 	.word	0x060c060c
    ee10:	060c060c 	.word	0x060c060c
    ee14:	060c060c 	.word	0x060c060c
    ee18:	060c060c 	.word	0x060c060c
    ee1c:	00660066 	.word	0x00660066
    ee20:	00660066 	.word	0x00660066
    ee24:	00660066 	.word	0x00660066
    ee28:	06180066 	.word	0x06180066
    ee2c:	048e0066 	.word	0x048e0066
    ee30:	061804c9 	.word	0x061804c9
    ee34:	06180618 	.word	0x06180618
    ee38:	00660066 	.word	0x00660066
    ee3c:	00660066 	.word	0x00660066
    ee40:	00660082 	.word	0x00660082
    ee44:	04bf0066 	.word	0x04bf0066
    ee48:	00660066 	.word	0x00660066
    ee4c:	00890066 	.word	0x00890066
    ee50:	00660066 	.word	0x00660066
    ee54:	00660066 	.word	0x00660066
    ee58:	0066066b 	.word	0x0066066b
    ee5c:	06dd0066 	.word	0x06dd0066
    ee60:	00660066 	.word	0x00660066
    ee64:	00660066 	.word	0x00660066
    ee68:	06180066 	.word	0x06180066
    ee6c:	04900066 	.word	0x04900066
    ee70:	061804cb 	.word	0x061804cb
    ee74:	06180618 	.word	0x06180618
    ee78:	06d206be 	.word	0x06d206be
    ee7c:	00660082 	.word	0x00660082
    ee80:	06f306e7 	.word	0x06f306e7
    ee84:	04c106ac 	.word	0x04c106ac
    ee88:	006606da 	.word	0x006606da
    ee8c:	008b0066 	.word	0x008b0066
    ee90:	06ca007d 	.word	0x06ca007d
    ee94:	00660066 	.word	0x00660066
    ee98:	0066066b 	.word	0x0066066b
    ee9c:	007d      	.short	0x007d
    ee9e:	4659      	mov	r1, fp
    eea0:	4648      	mov	r0, r9
    eea2:	f003 f8c1 	bl	12028 <__ssrefill_r>
    eea6:	2800      	cmp	r0, #0
    eea8:	f43f af61 	beq.w	ed6e <__ssvfscanf_r+0x9a>
    eeac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    eeae:	2b00      	cmp	r3, #0
    eeb0:	f001 8052 	beq.w	ff58 <__ssvfscanf_r+0x1284>
    eeb4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    eeb8:	065a      	lsls	r2, r3, #25
    eeba:	f101 804d 	bmi.w	ff58 <__ssvfscanf_r+0x1284>
    eebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    eec0:	b143      	cbz	r3, eed4 <__ssvfscanf_r+0x200>
    eec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    eec4:	f8d3 8000 	ldr.w	r8, [r3]
    eec8:	f1b8 0f00 	cmp.w	r8, #0
    eecc:	d002      	beq.n	eed4 <__ssvfscanf_r+0x200>
    eece:	4640      	mov	r0, r8
    eed0:	f7fa fb60 	bl	9594 <free>
    eed4:	6c78      	ldr	r0, [r7, #68]	; 0x44
    eed6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    eeda:	46bd      	mov	sp, r7
    eedc:	ecbd 8b02 	vpop	{d8}
    eee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    eee6:	2501      	movs	r5, #1
    eee8:	1e5e      	subs	r6, r3, #1
    eeea:	e73a      	b.n	ed62 <__ssvfscanf_r+0x8e>
    eeec:	0723      	lsls	r3, r4, #28
    eeee:	d1e6      	bne.n	eebe <__ssvfscanf_r+0x1ea>
    eef0:	7842      	ldrb	r2, [r0, #1]
    eef2:	4608      	mov	r0, r1
    eef4:	e776      	b.n	ede4 <__ssvfscanf_r+0x110>
    eef6:	0722      	lsls	r2, r4, #28
    eef8:	d1e1      	bne.n	eebe <__ssvfscanf_r+0x1ea>
    eefa:	7842      	ldrb	r2, [r0, #1]
    eefc:	f044 0402 	orr.w	r4, r4, #2
    ef00:	4608      	mov	r0, r1
    ef02:	e76f      	b.n	ede4 <__ssvfscanf_r+0x110>
    ef04:	f044 0401 	orr.w	r4, r4, #1
    ef08:	64f9      	str	r1, [r7, #76]	; 0x4c
    ef0a:	2502      	movs	r5, #2
    ef0c:	f8db 3004 	ldr.w	r3, [fp, #4]
    ef10:	2b00      	cmp	r3, #0
    ef12:	f340 8408 	ble.w	f726 <__ssvfscanf_r+0xa52>
    ef16:	0660      	lsls	r0, r4, #25
    ef18:	f140 840f 	bpl.w	f73a <__ssvfscanf_r+0xa66>
    ef1c:	1e6b      	subs	r3, r5, #1
    ef1e:	2b03      	cmp	r3, #3
    ef20:	f201 80eb 	bhi.w	100fa <__ssvfscanf_r+0x1426>
    ef24:	e8df f013 	tbh	[pc, r3, lsl #1]
    ef28:	01f1027b 	.word	0x01f1027b
    ef2c:	0008014b 	.word	0x0008014b
    ef30:	20008770 	.word	0x20008770
    ef34:	20000c29 	.word	0x20000c29
    ef38:	4648      	mov	r0, r9
    ef3a:	f001 fc8f 	bl	1085c <_localeconv_r>
    ef3e:	6803      	ldr	r3, [r0, #0]
    ef40:	623b      	str	r3, [r7, #32]
    ef42:	f108 33ff 	add.w	r3, r8, #4294967295
    ef46:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    ef4a:	f240 855a 	bls.w	fa02 <__ssvfscanf_r+0xd2e>
    ef4e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    ef52:	eb08 0305 	add.w	r3, r8, r5
    ef56:	613b      	str	r3, [r7, #16]
    ef58:	f240 185d 	movw	r8, #349	; 0x15d
    ef5c:	2600      	movs	r6, #0
    ef5e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    ef62:	ee08 9a10 	vmov	s16, r9
    ef66:	e9c7 6605 	strd	r6, r6, [r7, #20]
    ef6a:	63fe      	str	r6, [r7, #60]	; 0x3c
    ef6c:	637e      	str	r6, [r7, #52]	; 0x34
    ef6e:	61fe      	str	r6, [r7, #28]
    ef70:	64be      	str	r6, [r7, #72]	; 0x48
    ef72:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    ef76:	62bb      	str	r3, [r7, #40]	; 0x28
    ef78:	461d      	mov	r5, r3
    ef7a:	4646      	mov	r6, r8
    ef7c:	f8db 1000 	ldr.w	r1, [fp]
    ef80:	780a      	ldrb	r2, [r1, #0]
    ef82:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    ef86:	2b4e      	cmp	r3, #78	; 0x4e
    ef88:	d850      	bhi.n	f02c <__ssvfscanf_r+0x358>
    ef8a:	e8df f013 	tbh	[pc, r3, lsl #1]
    ef8e:	037e      	.short	0x037e
    ef90:	037e004f 	.word	0x037e004f
    ef94:	004f004f 	.word	0x004f004f
    ef98:	00a600a3 	.word	0x00a600a3
    ef9c:	00a600a6 	.word	0x00a600a6
    efa0:	00a600a6 	.word	0x00a600a6
    efa4:	00a600a6 	.word	0x00a600a6
    efa8:	00a600a6 	.word	0x00a600a6
    efac:	004f004f 	.word	0x004f004f
    efb0:	004f004f 	.word	0x004f004f
    efb4:	004f004f 	.word	0x004f004f
    efb8:	0374004f 	.word	0x0374004f
    efbc:	030b030b 	.word	0x030b030b
    efc0:	039e030b 	.word	0x039e030b
    efc4:	004f0394 	.word	0x004f0394
    efc8:	0384004f 	.word	0x0384004f
    efcc:	004f004f 	.word	0x004f004f
    efd0:	004f004f 	.word	0x004f004f
    efd4:	004f035d 	.word	0x004f035d
    efd8:	004f033a 	.word	0x004f033a
    efdc:	004f004f 	.word	0x004f004f
    efe0:	004f0333 	.word	0x004f0333
    efe4:	004f004f 	.word	0x004f004f
    efe8:	036d031e 	.word	0x036d031e
    efec:	004f004f 	.word	0x004f004f
    eff0:	004f004f 	.word	0x004f004f
    eff4:	004f004f 	.word	0x004f004f
    eff8:	0374004f 	.word	0x0374004f
    effc:	030b030b 	.word	0x030b030b
    f000:	039e030b 	.word	0x039e030b
    f004:	004f0394 	.word	0x004f0394
    f008:	0384004f 	.word	0x0384004f
    f00c:	004f004f 	.word	0x004f004f
    f010:	004f004f 	.word	0x004f004f
    f014:	004f035d 	.word	0x004f035d
    f018:	004f033a 	.word	0x004f033a
    f01c:	004f004f 	.word	0x004f004f
    f020:	004f0333 	.word	0x004f0333
    f024:	004f004f 	.word	0x004f004f
    f028:	036d031e 	.word	0x036d031e
    f02c:	05a0      	lsls	r0, r4, #22
    f02e:	d56f      	bpl.n	f110 <__ssvfscanf_r+0x43c>
    f030:	6a38      	ldr	r0, [r7, #32]
    f032:	7803      	ldrb	r3, [r0, #0]
    f034:	4293      	cmp	r3, r2
    f036:	d16b      	bne.n	f110 <__ssvfscanf_r+0x43c>
    f038:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f03c:	607e      	str	r6, [r7, #4]
    f03e:	4681      	mov	r9, r0
    f040:	ee18 6a10 	vmov	r6, s16
    f044:	f04f 0800 	mov.w	r8, #0
    f048:	465c      	mov	r4, fp
    f04a:	e007      	b.n	f05c <__ssvfscanf_r+0x388>
    f04c:	6021      	str	r1, [r4, #0]
    f04e:	f891 e000 	ldrb.w	lr, [r1]
    f052:	f899 0000 	ldrb.w	r0, [r9]
    f056:	4586      	cmp	lr, r0
    f058:	d11c      	bne.n	f094 <__ssvfscanf_r+0x3c0>
    f05a:	46da      	mov	sl, fp
    f05c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f060:	4645      	mov	r5, r8
    f062:	f10a 0b01 	add.w	fp, sl, #1
    f066:	3101      	adds	r1, #1
    f068:	f108 0801 	add.w	r8, r8, #1
    f06c:	2800      	cmp	r0, #0
    f06e:	f000 8664 	beq.w	fd3a <__ssvfscanf_r+0x1066>
    f072:	6860      	ldr	r0, [r4, #4]
    f074:	3801      	subs	r0, #1
    f076:	2800      	cmp	r0, #0
    f078:	6060      	str	r0, [r4, #4]
    f07a:	dce7      	bgt.n	f04c <__ssvfscanf_r+0x378>
    f07c:	4621      	mov	r1, r4
    f07e:	4630      	mov	r0, r6
    f080:	f002 ffd2 	bl	12028 <__ssrefill_r>
    f084:	b930      	cbnz	r0, f094 <__ssvfscanf_r+0x3c0>
    f086:	6821      	ldr	r1, [r4, #0]
    f088:	f899 0000 	ldrb.w	r0, [r9]
    f08c:	f891 e000 	ldrb.w	lr, [r1]
    f090:	4586      	cmp	lr, r0
    f092:	d0e2      	beq.n	f05a <__ssvfscanf_r+0x386>
    f094:	46a3      	mov	fp, r4
    f096:	6a3a      	ldr	r2, [r7, #32]
    f098:	68bc      	ldr	r4, [r7, #8]
    f09a:	613d      	str	r5, [r7, #16]
    f09c:	462b      	mov	r3, r5
    f09e:	46b1      	mov	r9, r6
    f0a0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f0a2:	68fd      	ldr	r5, [r7, #12]
    f0a4:	64bd      	str	r5, [r7, #72]	; 0x48
    f0a6:	3301      	adds	r3, #1
    f0a8:	465d      	mov	r5, fp
    f0aa:	eb02 0803 	add.w	r8, r2, r3
    f0ae:	46b3      	mov	fp, r6
    f0b0:	4626      	mov	r6, r4
    f0b2:	4614      	mov	r4, r2
    f0b4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f0b8:	462a      	mov	r2, r5
    f0ba:	4648      	mov	r0, r9
    f0bc:	f002 ff74 	bl	11fa8 <_sungetc_r>
    f0c0:	4544      	cmp	r4, r8
    f0c2:	d1f7      	bne.n	f0b4 <__ssvfscanf_r+0x3e0>
    f0c4:	693b      	ldr	r3, [r7, #16]
    f0c6:	4634      	mov	r4, r6
    f0c8:	ebaa 0a03 	sub.w	sl, sl, r3
    f0cc:	465e      	mov	r6, fp
    f0ce:	46ab      	mov	fp, r5
    f0d0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f0d2:	e020      	b.n	f116 <__ssvfscanf_r+0x442>
    f0d4:	05e0      	lsls	r0, r4, #23
    f0d6:	f100 8501 	bmi.w	fadc <__ssvfscanf_r+0xe08>
    f0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f0dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f0de:	42d9      	cmn	r1, r3
    f0e0:	d116      	bne.n	f110 <__ssvfscanf_r+0x43c>
    f0e2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f0e6:	f805 2b01 	strb.w	r2, [r5], #1
    f0ea:	3e01      	subs	r6, #1
    f0ec:	f8db 3004 	ldr.w	r3, [fp, #4]
    f0f0:	3b01      	subs	r3, #1
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	f10a 0a01 	add.w	sl, sl, #1
    f0f8:	f8cb 3004 	str.w	r3, [fp, #4]
    f0fc:	f340 836f 	ble.w	f7de <__ssvfscanf_r+0xb0a>
    f100:	f8db 3000 	ldr.w	r3, [fp]
    f104:	3301      	adds	r3, #1
    f106:	f8cb 3000 	str.w	r3, [fp]
    f10a:	2e00      	cmp	r6, #0
    f10c:	f47f af36 	bne.w	ef7c <__ssvfscanf_r+0x2a8>
    f110:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f112:	ee18 9a10 	vmov	r9, s16
    f116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f118:	2b00      	cmp	r3, #0
    f11a:	f040 82dc 	bne.w	f6d6 <__ssvfscanf_r+0xa02>
    f11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f120:	3b01      	subs	r3, #1
    f122:	2b01      	cmp	r3, #1
    f124:	f241 8016 	bls.w	10154 <__ssvfscanf_r+0x1480>
    f128:	1e73      	subs	r3, r6, #1
    f12a:	2b06      	cmp	r3, #6
    f12c:	f240 8627 	bls.w	fd7e <__ssvfscanf_r+0x10aa>
    f130:	05e3      	lsls	r3, r4, #23
    f132:	d51b      	bpl.n	f16c <__ssvfscanf_r+0x498>
    f134:	0566      	lsls	r6, r4, #21
    f136:	f101 80b5 	bmi.w	102a4 <__ssvfscanf_r+0x15d0>
    f13a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f13e:	2965      	cmp	r1, #101	; 0x65
    f140:	f105 33ff 	add.w	r3, r5, #4294967295
    f144:	f10a 36ff 	add.w	r6, sl, #4294967295
    f148:	d00a      	beq.n	f160 <__ssvfscanf_r+0x48c>
    f14a:	2945      	cmp	r1, #69	; 0x45
    f14c:	d008      	beq.n	f160 <__ssvfscanf_r+0x48c>
    f14e:	465a      	mov	r2, fp
    f150:	4648      	mov	r0, r9
    f152:	f002 ff29 	bl	11fa8 <_sungetc_r>
    f156:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f15a:	f1aa 0602 	sub.w	r6, sl, #2
    f15e:	1eab      	subs	r3, r5, #2
    f160:	465a      	mov	r2, fp
    f162:	4648      	mov	r0, r9
    f164:	46b2      	mov	sl, r6
    f166:	461d      	mov	r5, r3
    f168:	f002 ff1e 	bl	11fa8 <_sungetc_r>
    f16c:	f014 0210 	ands.w	r2, r4, #16
    f170:	f47f add7 	bne.w	ed22 <__ssvfscanf_r+0x4e>
    f174:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f17c:	702a      	strb	r2, [r5, #0]
    f17e:	f000 84d2 	beq.w	fb26 <__ssvfscanf_r+0xe52>
    f182:	69bb      	ldr	r3, [r7, #24]
    f184:	2b00      	cmp	r3, #0
    f186:	f040 872c 	bne.w	ffe2 <__ssvfscanf_r+0x130e>
    f18a:	4648      	mov	r0, r9
    f18c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f18e:	2200      	movs	r2, #0
    f190:	f7fb fdf6 	bl	ad80 <_strtod_r>
    f194:	07e0      	lsls	r0, r4, #31
    f196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f198:	f100 85c9 	bmi.w	fd2e <__ssvfscanf_r+0x105a>
    f19c:	07a1      	lsls	r1, r4, #30
    f19e:	f100 85c6 	bmi.w	fd2e <__ssvfscanf_r+0x105a>
    f1a2:	eeb4 0b40 	vcmp.f64	d0, d0
    f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1aa:	f853 4b04 	ldr.w	r4, [r3], #4
    f1ae:	f180 86f4 	bvs.w	ff9a <__ssvfscanf_r+0x12c6>
    f1b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f1b6:	633b      	str	r3, [r7, #48]	; 0x30
    f1b8:	ed84 0a00 	vstr	s0, [r4]
    f1bc:	e3a2      	b.n	f904 <__ssvfscanf_r+0xc30>
    f1be:	f108 33ff 	add.w	r3, r8, #4294967295
    f1c2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f1c6:	f240 83a2 	bls.w	f90e <__ssvfscanf_r+0xc3a>
    f1ca:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f1ce:	eb08 0302 	add.w	r3, r8, r2
    f1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    f1d4:	f240 185d 	movw	r8, #349	; 0x15d
    f1d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f1dc:	2200      	movs	r2, #0
    f1de:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f1e0:	62bb      	str	r3, [r7, #40]	; 0x28
    f1e2:	4659      	mov	r1, fp
    f1e4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f1e8:	46d3      	mov	fp, sl
    f1ea:	461d      	mov	r5, r3
    f1ec:	4692      	mov	sl, r2
    f1ee:	680a      	ldr	r2, [r1, #0]
    f1f0:	7810      	ldrb	r0, [r2, #0]
    f1f2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f1f6:	2b4d      	cmp	r3, #77	; 0x4d
    f1f8:	d860      	bhi.n	f2bc <__ssvfscanf_r+0x5e8>
    f1fa:	e8df f013 	tbh	[pc, r3, lsl #1]
    f1fe:	0282      	.short	0x0282
    f200:	0282005f 	.word	0x0282005f
    f204:	005f005f 	.word	0x005f005f
    f208:	01e002cd 	.word	0x01e002cd
    f20c:	01e001e0 	.word	0x01e001e0
    f210:	01e001e0 	.word	0x01e001e0
    f214:	01e001e0 	.word	0x01e001e0
    f218:	026f026f 	.word	0x026f026f
    f21c:	005f005f 	.word	0x005f005f
    f220:	005f005f 	.word	0x005f005f
    f224:	005f005f 	.word	0x005f005f
    f228:	004e005f 	.word	0x004e005f
    f22c:	004e004e 	.word	0x004e004e
    f230:	004e004e 	.word	0x004e004e
    f234:	005f004e 	.word	0x005f004e
    f238:	005f005f 	.word	0x005f005f
    f23c:	005f005f 	.word	0x005f005f
    f240:	005f005f 	.word	0x005f005f
    f244:	005f005f 	.word	0x005f005f
    f248:	005f005f 	.word	0x005f005f
    f24c:	005f005f 	.word	0x005f005f
    f250:	005f005f 	.word	0x005f005f
    f254:	005f005f 	.word	0x005f005f
    f258:	005f0276 	.word	0x005f0276
    f25c:	005f005f 	.word	0x005f005f
    f260:	005f005f 	.word	0x005f005f
    f264:	005f005f 	.word	0x005f005f
    f268:	004e005f 	.word	0x004e005f
    f26c:	004e004e 	.word	0x004e004e
    f270:	004e004e 	.word	0x004e004e
    f274:	005f004e 	.word	0x005f004e
    f278:	005f005f 	.word	0x005f005f
    f27c:	005f005f 	.word	0x005f005f
    f280:	005f005f 	.word	0x005f005f
    f284:	005f005f 	.word	0x005f005f
    f288:	005f005f 	.word	0x005f005f
    f28c:	005f005f 	.word	0x005f005f
    f290:	005f005f 	.word	0x005f005f
    f294:	005f005f 	.word	0x005f005f
    f298:	0276      	.short	0x0276
    f29a:	2e0a      	cmp	r6, #10
    f29c:	dd0e      	ble.n	f2bc <__ssvfscanf_r+0x5e8>
    f29e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f2a2:	684b      	ldr	r3, [r1, #4]
    f2a4:	f805 0b01 	strb.w	r0, [r5], #1
    f2a8:	3b01      	subs	r3, #1
    f2aa:	2b00      	cmp	r3, #0
    f2ac:	604b      	str	r3, [r1, #4]
    f2ae:	f340 828d 	ble.w	f7cc <__ssvfscanf_r+0xaf8>
    f2b2:	3201      	adds	r2, #1
    f2b4:	600a      	str	r2, [r1, #0]
    f2b6:	f1b8 0801 	subs.w	r8, r8, #1
    f2ba:	d198      	bne.n	f1ee <__ssvfscanf_r+0x51a>
    f2bc:	05e0      	lsls	r0, r4, #23
    f2be:	46d0      	mov	r8, sl
    f2c0:	63be      	str	r6, [r7, #56]	; 0x38
    f2c2:	46da      	mov	sl, fp
    f2c4:	468b      	mov	fp, r1
    f2c6:	d507      	bpl.n	f2d8 <__ssvfscanf_r+0x604>
    f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f2ca:	429d      	cmp	r5, r3
    f2cc:	f200 8422 	bhi.w	fb14 <__ssvfscanf_r+0xe40>
    f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f2d2:	429d      	cmp	r5, r3
    f2d4:	f43f adf3 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f2d8:	f014 0210 	ands.w	r2, r4, #16
    f2dc:	d110      	bne.n	f300 <__ssvfscanf_r+0x62c>
    f2de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f2e2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    f2e4:	702a      	strb	r2, [r5, #0]
    f2e6:	4648      	mov	r0, r9
    f2e8:	47b0      	blx	r6
    f2ea:	06a1      	lsls	r1, r4, #26
    f2ec:	f140 8408 	bpl.w	fb00 <__ssvfscanf_r+0xe2c>
    f2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f2f2:	f853 2b04 	ldr.w	r2, [r3], #4
    f2f6:	6010      	str	r0, [r2, #0]
    f2f8:	633b      	str	r3, [r7, #48]	; 0x30
    f2fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f2fc:	3301      	adds	r3, #1
    f2fe:	647b      	str	r3, [r7, #68]	; 0x44
    f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f302:	1aed      	subs	r5, r5, r3
    f304:	4445      	add	r5, r8
    f306:	44aa      	add	sl, r5
    f308:	e50b      	b.n	ed22 <__ssvfscanf_r+0x4e>
    f30a:	f1b8 0f00 	cmp.w	r8, #0
    f30e:	bf08      	it	eq
    f310:	f04f 38ff 	moveq.w	r8, #4294967295
    f314:	07e0      	lsls	r0, r4, #31
    f316:	f140 8295 	bpl.w	f844 <__ssvfscanf_r+0xb70>
    f31a:	f014 0310 	ands.w	r3, r4, #16
    f31e:	637b      	str	r3, [r7, #52]	; 0x34
    f320:	f040 8474 	bne.w	fc0c <__ssvfscanf_r+0xf38>
    f324:	0621      	lsls	r1, r4, #24
    f326:	f140 8666 	bpl.w	fff6 <__ssvfscanf_r+0x1322>
    f32a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f32c:	f854 3b04 	ldr.w	r3, [r4], #4
    f330:	63fb      	str	r3, [r7, #60]	; 0x3c
    f332:	2b00      	cmp	r3, #0
    f334:	f43f adc3 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f338:	2080      	movs	r0, #128	; 0x80
    f33a:	f7fa f923 	bl	9584 <malloc>
    f33e:	64b8      	str	r0, [r7, #72]	; 0x48
    f340:	2800      	cmp	r0, #0
    f342:	f000 8778 	beq.w	10236 <__ssvfscanf_r+0x1562>
    f346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f348:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f34a:	601a      	str	r2, [r3, #0]
    f34c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f34e:	88d5      	ldrh	r5, [r2, #6]
    f350:	8893      	ldrh	r3, [r2, #4]
    f352:	429d      	cmp	r5, r3
    f354:	f080 8552 	bcs.w	fdfc <__ssvfscanf_r+0x1128>
    f358:	6810      	ldr	r0, [r2, #0]
    f35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f35c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f362:	633c      	str	r4, [r7, #48]	; 0x30
    f364:	3501      	adds	r5, #1
    f366:	80dd      	strh	r5, [r3, #6]
    f368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f36a:	62bb      	str	r3, [r7, #40]	; 0x28
    f36c:	2320      	movs	r3, #32
    f36e:	623b      	str	r3, [r7, #32]
    f370:	f8db 3000 	ldr.w	r3, [fp]
    f374:	4eb1      	ldr	r6, [pc, #708]	; (f63c <__ssvfscanf_r+0x968>)
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	5cf3      	ldrb	r3, [r6, r3]
    f37a:	f013 0308 	ands.w	r3, r3, #8
    f37e:	f040 84bb 	bne.w	fcf8 <__ssvfscanf_r+0x1024>
    f382:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    f384:	627e      	str	r6, [r7, #36]	; 0x24
    f386:	461d      	mov	r5, r3
    f388:	f7fc f8fe 	bl	b588 <__locale_mb_cur_max>
    f38c:	42a8      	cmp	r0, r5
    f38e:	f43f ad8d 	beq.w	eeac <__ssvfscanf_r+0x1d8>
    f392:	e9db 3200 	ldrd	r3, r2, [fp]
    f396:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    f39a:	f813 1b01 	ldrb.w	r1, [r3], #1
    f39e:	5541      	strb	r1, [r0, r5]
    f3a0:	3a01      	subs	r2, #1
    f3a2:	2c03      	cmp	r4, #3
    f3a4:	e9cb 3200 	strd	r3, r2, [fp]
    f3a8:	f105 0501 	add.w	r5, r5, #1
    f3ac:	f107 0668 	add.w	r6, r7, #104	; 0x68
    f3b0:	d102      	bne.n	f3b8 <__ssvfscanf_r+0x6e4>
    f3b2:	6833      	ldr	r3, [r6, #0]
    f3b4:	2b04      	cmp	r3, #4
    f3b6:	d004      	beq.n	f3c2 <__ssvfscanf_r+0x6ee>
    f3b8:	2208      	movs	r2, #8
    f3ba:	2100      	movs	r1, #0
    f3bc:	4630      	mov	r0, r6
    f3be:	f7fc f819 	bl	b3f4 <memset>
    f3c2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    f3c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    f3c8:	9600      	str	r6, [sp, #0]
    f3ca:	462b      	mov	r3, r5
    f3cc:	4648      	mov	r0, r9
    f3ce:	f002 fc17 	bl	11c00 <_mbrtowc_r>
    f3d2:	1c42      	adds	r2, r0, #1
    f3d4:	4604      	mov	r4, r0
    f3d6:	f43f ad69 	beq.w	eeac <__ssvfscanf_r+0x1d8>
    f3da:	2800      	cmp	r0, #0
    f3dc:	f040 8478 	bne.w	fcd0 <__ssvfscanf_r+0xffc>
    f3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f3e2:	6018      	str	r0, [r3, #0]
    f3e4:	f002 fc68 	bl	11cb8 <iswspace>
    f3e8:	2800      	cmp	r0, #0
    f3ea:	f040 865c 	bne.w	100a6 <__ssvfscanf_r+0x13d2>
    f3ee:	44aa      	add	sl, r5
    f3f0:	f108 38ff 	add.w	r8, r8, #4294967295
    f3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	f040 8633 	bne.w	10062 <__ssvfscanf_r+0x138e>
    f3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f3fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f400:	3304      	adds	r3, #4
    f402:	64bb      	str	r3, [r7, #72]	; 0x48
    f404:	2a00      	cmp	r2, #0
    f406:	f000 862c 	beq.w	10062 <__ssvfscanf_r+0x138e>
    f40a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f40c:	1a9d      	subs	r5, r3, r2
    f40e:	6a3b      	ldr	r3, [r7, #32]
    f410:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    f414:	f240 8756 	bls.w	102c4 <__ssvfscanf_r+0x15f0>
    f418:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    f41a:	f000 bc5c 	b.w	fcd6 <__ssvfscanf_r+0x1002>
    f41e:	f1b8 0f00 	cmp.w	r8, #0
    f422:	bf08      	it	eq
    f424:	f04f 38ff 	moveq.w	r8, #4294967295
    f428:	07e0      	lsls	r0, r4, #31
    f42a:	f140 827b 	bpl.w	f924 <__ssvfscanf_r+0xc50>
    f42e:	f014 0310 	ands.w	r3, r4, #16
    f432:	62bb      	str	r3, [r7, #40]	; 0x28
    f434:	f040 83f3 	bne.w	fc1e <__ssvfscanf_r+0xf4a>
    f438:	0621      	lsls	r1, r4, #24
    f43a:	f140 85ed 	bpl.w	10018 <__ssvfscanf_r+0x1344>
    f43e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    f440:	f856 3b04 	ldr.w	r3, [r6], #4
    f444:	623b      	str	r3, [r7, #32]
    f446:	2b00      	cmp	r3, #0
    f448:	f43f ad39 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f44c:	2080      	movs	r0, #128	; 0x80
    f44e:	f7fa f899 	bl	9584 <malloc>
    f452:	4604      	mov	r4, r0
    f454:	2800      	cmp	r0, #0
    f456:	f000 86ee 	beq.w	10236 <__ssvfscanf_r+0x1562>
    f45a:	6a3b      	ldr	r3, [r7, #32]
    f45c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f45e:	6018      	str	r0, [r3, #0]
    f460:	88d5      	ldrh	r5, [r2, #6]
    f462:	8893      	ldrh	r3, [r2, #4]
    f464:	429d      	cmp	r5, r3
    f466:	f080 84dd 	bcs.w	fe24 <__ssvfscanf_r+0x1150>
    f46a:	6810      	ldr	r0, [r2, #0]
    f46c:	6a3b      	ldr	r3, [r7, #32]
    f46e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f474:	633e      	str	r6, [r7, #48]	; 0x30
    f476:	3501      	adds	r5, #1
    f478:	80dd      	strh	r5, [r3, #6]
    f47a:	2320      	movs	r3, #32
    f47c:	61fc      	str	r4, [r7, #28]
    f47e:	61bb      	str	r3, [r7, #24]
    f480:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    f482:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    f486:	2500      	movs	r5, #0
    f488:	46c2      	mov	sl, r8
    f48a:	46a0      	mov	r8, r4
    f48c:	f7fc f87c 	bl	b588 <__locale_mb_cur_max>
    f490:	42a8      	cmp	r0, r5
    f492:	f43f ad0b 	beq.w	eeac <__ssvfscanf_r+0x1d8>
    f496:	e9db 3200 	ldrd	r3, r2, [fp]
    f49a:	f813 1b01 	ldrb.w	r1, [r3], #1
    f49e:	3a01      	subs	r2, #1
    f4a0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    f4a4:	e9cb 3200 	strd	r3, r2, [fp]
    f4a8:	2e03      	cmp	r6, #3
    f4aa:	f105 0301 	add.w	r3, r5, #1
    f4ae:	5541      	strb	r1, [r0, r5]
    f4b0:	64bb      	str	r3, [r7, #72]	; 0x48
    f4b2:	f107 0460 	add.w	r4, r7, #96	; 0x60
    f4b6:	d102      	bne.n	f4be <__ssvfscanf_r+0x7ea>
    f4b8:	6823      	ldr	r3, [r4, #0]
    f4ba:	2b04      	cmp	r3, #4
    f4bc:	d004      	beq.n	f4c8 <__ssvfscanf_r+0x7f4>
    f4be:	2208      	movs	r2, #8
    f4c0:	2100      	movs	r1, #0
    f4c2:	4620      	mov	r0, r4
    f4c4:	f7fb ff96 	bl	b3f4 <memset>
    f4c8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    f4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f4ce:	9400      	str	r4, [sp, #0]
    f4d0:	4641      	mov	r1, r8
    f4d2:	4648      	mov	r0, r9
    f4d4:	f002 fb94 	bl	11c00 <_mbrtowc_r>
    f4d8:	1c42      	adds	r2, r0, #1
    f4da:	4606      	mov	r6, r0
    f4dc:	f43f ace6 	beq.w	eeac <__ssvfscanf_r+0x1d8>
    f4e0:	2800      	cmp	r0, #0
    f4e2:	f040 82ca 	bne.w	fa7a <__ssvfscanf_r+0xda6>
    f4e6:	f8c8 0000 	str.w	r0, [r8]
    f4ea:	4605      	mov	r5, r0
    f4ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
    f4f0:	2208      	movs	r2, #8
    f4f2:	2100      	movs	r1, #0
    f4f4:	4618      	mov	r0, r3
    f4f6:	637b      	str	r3, [r7, #52]	; 0x34
    f4f8:	f7fb ff7c 	bl	b3f4 <memset>
    f4fc:	4950      	ldr	r1, [pc, #320]	; (f640 <__ssvfscanf_r+0x96c>)
    f4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f500:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    f504:	462a      	mov	r2, r5
    f506:	4648      	mov	r0, r9
    f508:	460d      	mov	r5, r1
    f50a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    f50e:	47a8      	blx	r5
    f510:	2801      	cmp	r0, #1
    f512:	f000 83d5 	beq.w	fcc0 <__ssvfscanf_r+0xfec>
    f516:	2200      	movs	r2, #0
    f518:	f107 0370 	add.w	r3, r7, #112	; 0x70
    f51c:	5c9b      	ldrb	r3, [r3, r2]
    f51e:	2b00      	cmp	r3, #0
    f520:	f000 85a1 	beq.w	10066 <__ssvfscanf_r+0x1392>
    f524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f526:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f528:	2e03      	cmp	r6, #3
    f52a:	4413      	add	r3, r2
    f52c:	63fb      	str	r3, [r7, #60]	; 0x3c
    f52e:	f000 83ca 	beq.w	fcc6 <__ssvfscanf_r+0xff2>
    f532:	f10a 3aff 	add.w	sl, sl, #4294967295
    f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f538:	b95b      	cbnz	r3, f552 <__ssvfscanf_r+0x87e>
    f53a:	6a3b      	ldr	r3, [r7, #32]
    f53c:	f108 0804 	add.w	r8, r8, #4
    f540:	b13b      	cbz	r3, f552 <__ssvfscanf_r+0x87e>
    f542:	69fb      	ldr	r3, [r7, #28]
    f544:	eba8 0403 	sub.w	r4, r8, r3
    f548:	69bb      	ldr	r3, [r7, #24]
    f54a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    f54e:	f240 8405 	bls.w	fd5c <__ssvfscanf_r+0x1088>
    f552:	f8db 3004 	ldr.w	r3, [fp, #4]
    f556:	2b00      	cmp	r3, #0
    f558:	f04f 0500 	mov.w	r5, #0
    f55c:	f340 8296 	ble.w	fa8c <__ssvfscanf_r+0xdb8>
    f560:	f1ba 0f00 	cmp.w	sl, #0
    f564:	d192      	bne.n	f48c <__ssvfscanf_r+0x7b8>
    f566:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    f56a:	627e      	str	r6, [r7, #36]	; 0x24
    f56c:	4644      	mov	r4, r8
    f56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f570:	2b00      	cmp	r3, #0
    f572:	f47f abd6 	bne.w	ed22 <__ssvfscanf_r+0x4e>
    f576:	6023      	str	r3, [r4, #0]
    f578:	6a3b      	ldr	r3, [r7, #32]
    f57a:	2b00      	cmp	r3, #0
    f57c:	f000 81c2 	beq.w	f904 <__ssvfscanf_r+0xc30>
    f580:	69fb      	ldr	r3, [r7, #28]
    f582:	69ba      	ldr	r2, [r7, #24]
    f584:	1ae1      	subs	r1, r4, r3
    f586:	108b      	asrs	r3, r1, #2
    f588:	3301      	adds	r3, #1
    f58a:	429a      	cmp	r2, r3
    f58c:	f240 81ba 	bls.w	f904 <__ssvfscanf_r+0xc30>
    f590:	6a3c      	ldr	r4, [r7, #32]
    f592:	3104      	adds	r1, #4
    f594:	6820      	ldr	r0, [r4, #0]
    f596:	f7fa fac1 	bl	9b1c <realloc>
    f59a:	2800      	cmp	r0, #0
    f59c:	f000 81b2 	beq.w	f904 <__ssvfscanf_r+0xc30>
    f5a0:	6020      	str	r0, [r4, #0]
    f5a2:	e1af      	b.n	f904 <__ssvfscanf_r+0xc30>
    f5a4:	0521      	lsls	r1, r4, #20
    f5a6:	f57f adb3 	bpl.w	f110 <__ssvfscanf_r+0x43c>
    f5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f5ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    f5ae:	185b      	adds	r3, r3, r1
    f5b0:	f47f adae 	bne.w	f110 <__ssvfscanf_r+0x43c>
    f5b4:	64bb      	str	r3, [r7, #72]	; 0x48
    f5b6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    f5bc:	e593      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f5be:	4b21      	ldr	r3, [pc, #132]	; (f644 <__ssvfscanf_r+0x970>)
    f5c0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f5c4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    f5c8:	e66b      	b.n	f2a2 <__ssvfscanf_r+0x5ce>
    f5ca:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    f5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f5d2:	f47f ad9d 	bne.w	f110 <__ssvfscanf_r+0x43c>
    f5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f5d8:	2b01      	cmp	r3, #1
    f5da:	f47f ad99 	bne.w	f110 <__ssvfscanf_r+0x43c>
    f5de:	2330      	movs	r3, #48	; 0x30
    f5e0:	f805 3b01 	strb.w	r3, [r5], #1
    f5e4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    f5e8:	2300      	movs	r3, #0
    f5ea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    f5ee:	3e01      	subs	r6, #1
    f5f0:	637b      	str	r3, [r7, #52]	; 0x34
    f5f2:	e578      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f5f6:	2b06      	cmp	r3, #6
    f5f8:	f040 8574 	bne.w	100e4 <__ssvfscanf_r+0x1410>
    f5fc:	2307      	movs	r3, #7
    f5fe:	64bb      	str	r3, [r7, #72]	; 0x48
    f600:	e571      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f602:	0523      	lsls	r3, r4, #20
    f604:	f57f ad84 	bpl.w	f110 <__ssvfscanf_r+0x43c>
    f608:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    f60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f610:	d005      	beq.n	f61e <__ssvfscanf_r+0x94a>
    f612:	0561      	lsls	r1, r4, #21
    f614:	f57f ad7c 	bpl.w	f110 <__ssvfscanf_r+0x43c>
    f618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f61a:	2b00      	cmp	r3, #0
    f61c:	d047      	beq.n	f6ae <__ssvfscanf_r+0x9da>
    f61e:	05a3      	lsls	r3, r4, #22
    f620:	d404      	bmi.n	f62c <__ssvfscanf_r+0x958>
    f622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f624:	69f9      	ldr	r1, [r7, #28]
    f626:	1a5b      	subs	r3, r3, r1
    f628:	e9c7 5305 	strd	r5, r3, [r7, #20]
    f62c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    f630:	2300      	movs	r3, #0
    f632:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    f636:	637b      	str	r3, [r7, #52]	; 0x34
    f638:	e555      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f63a:	bf00      	nop
    f63c:	20000c29 	.word	0x20000c29
    f640:	20008770 	.word	0x20008770
    f644:	2000284c 	.word	0x2000284c
    f648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f64a:	2b00      	cmp	r3, #0
    f64c:	f000 81ff 	beq.w	fa4e <__ssvfscanf_r+0xd7a>
    f650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f652:	2b02      	cmp	r3, #2
    f654:	f000 83b0 	beq.w	fdb8 <__ssvfscanf_r+0x10e4>
    f658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f65a:	2b01      	cmp	r3, #1
    f65c:	f000 81f1 	beq.w	fa42 <__ssvfscanf_r+0xd6e>
    f660:	2b04      	cmp	r3, #4
    f662:	f000 81ee 	beq.w	fa42 <__ssvfscanf_r+0xd6e>
    f666:	e553      	b.n	f110 <__ssvfscanf_r+0x43c>
    f668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f66a:	2b07      	cmp	r3, #7
    f66c:	f040 853a 	bne.w	100e4 <__ssvfscanf_r+0x1410>
    f670:	2308      	movs	r3, #8
    f672:	64bb      	str	r3, [r7, #72]	; 0x48
    f674:	e537      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f676:	0520      	lsls	r0, r4, #20
    f678:	f100 81f9 	bmi.w	fa6e <__ssvfscanf_r+0xd9a>
    f67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f67e:	2b01      	cmp	r3, #1
    f680:	f47f ad46 	bne.w	f110 <__ssvfscanf_r+0x43c>
    f684:	2302      	movs	r3, #2
    f686:	63fb      	str	r3, [r7, #60]	; 0x3c
    f688:	e52d      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f68a:	0623      	lsls	r3, r4, #24
    f68c:	f57f ad40 	bpl.w	f110 <__ssvfscanf_r+0x43c>
    f690:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    f694:	e527      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f698:	2b00      	cmp	r3, #0
    f69a:	f040 81cc 	bne.w	fa36 <__ssvfscanf_r+0xd62>
    f69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6a0:	b9b3      	cbnz	r3, f6d0 <__ssvfscanf_r+0x9fc>
    f6a2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    f6a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    f6aa:	f000 8520 	beq.w	100ee <__ssvfscanf_r+0x141a>
    f6ae:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f6b0:	ee18 9a10 	vmov	r9, s16
    f6b4:	e533      	b.n	f11e <__ssvfscanf_r+0x44a>
    f6b6:	0521      	lsls	r1, r4, #20
    f6b8:	f100 81b7 	bmi.w	fa2a <__ssvfscanf_r+0xd56>
    f6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f6be:	2b02      	cmp	r3, #2
    f6c0:	f040 8510 	bne.w	100e4 <__ssvfscanf_r+0x1410>
    f6c4:	2303      	movs	r3, #3
    f6c6:	64bb      	str	r3, [r7, #72]	; 0x48
    f6c8:	e50d      	b.n	f0e6 <__ssvfscanf_r+0x412>
    f6ca:	0520      	lsls	r0, r4, #20
    f6cc:	d59c      	bpl.n	f608 <__ssvfscanf_r+0x934>
    f6ce:	e76c      	b.n	f5aa <__ssvfscanf_r+0x8d6>
    f6d0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f6d2:	ee18 9a10 	vmov	r9, s16
    f6d6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    f6da:	e520      	b.n	f11e <__ssvfscanf_r+0x44a>
    f6dc:	4b8d      	ldr	r3, [pc, #564]	; (f914 <__ssvfscanf_r+0xc40>)
    f6de:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    f6e2:	2e08      	cmp	r6, #8
    f6e4:	f73f addb 	bgt.w	f29e <__ssvfscanf_r+0x5ca>
    f6e8:	e5e8      	b.n	f2bc <__ssvfscanf_r+0x5e8>
    f6ea:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f6ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    f6f2:	f47f ade3 	bne.w	f2bc <__ssvfscanf_r+0x5e8>
    f6f6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    f6fa:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    f6fe:	2610      	movs	r6, #16
    f700:	e5cf      	b.n	f2a2 <__ssvfscanf_r+0x5ce>
    f702:	0623      	lsls	r3, r4, #24
    f704:	f57f adda 	bpl.w	f2bc <__ssvfscanf_r+0x5e8>
    f708:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    f70c:	e5c9      	b.n	f2a2 <__ssvfscanf_r+0x5ce>
    f70e:	f044 0401 	orr.w	r4, r4, #1
    f712:	f8db 3004 	ldr.w	r3, [fp, #4]
    f716:	64f9      	str	r1, [r7, #76]	; 0x4c
    f718:	2b00      	cmp	r3, #0
    f71a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    f71e:	f04f 0500 	mov.w	r5, #0
    f722:	f73f abf8 	bgt.w	ef16 <__ssvfscanf_r+0x242>
    f726:	4659      	mov	r1, fp
    f728:	4648      	mov	r0, r9
    f72a:	f002 fc7d 	bl	12028 <__ssrefill_r>
    f72e:	2800      	cmp	r0, #0
    f730:	f47f abbc 	bne.w	eeac <__ssvfscanf_r+0x1d8>
    f734:	0660      	lsls	r0, r4, #25
    f736:	f53f abf1 	bmi.w	ef1c <__ssvfscanf_r+0x248>
    f73a:	f8db 2000 	ldr.w	r2, [fp]
    f73e:	4e76      	ldr	r6, [pc, #472]	; (f918 <__ssvfscanf_r+0xc44>)
    f740:	7813      	ldrb	r3, [r2, #0]
    f742:	5cf3      	ldrb	r3, [r6, r3]
    f744:	0719      	lsls	r1, r3, #28
    f746:	f57f abe9 	bpl.w	ef1c <__ssvfscanf_r+0x248>
    f74a:	f8db 3004 	ldr.w	r3, [fp, #4]
    f74e:	3b01      	subs	r3, #1
    f750:	2b00      	cmp	r3, #0
    f752:	f10a 0a01 	add.w	sl, sl, #1
    f756:	f8cb 3004 	str.w	r3, [fp, #4]
    f75a:	f102 0201 	add.w	r2, r2, #1
    f75e:	dd4a      	ble.n	f7f6 <__ssvfscanf_r+0xb22>
    f760:	f8cb 2000 	str.w	r2, [fp]
    f764:	7813      	ldrb	r3, [r2, #0]
    f766:	5cf3      	ldrb	r3, [r6, r3]
    f768:	0719      	lsls	r1, r3, #28
    f76a:	f57f abd7 	bpl.w	ef1c <__ssvfscanf_r+0x248>
    f76e:	e7ec      	b.n	f74a <__ssvfscanf_r+0xa76>
    f770:	f044 0401 	orr.w	r4, r4, #1
    f774:	4b69      	ldr	r3, [pc, #420]	; (f91c <__ssvfscanf_r+0xc48>)
    f776:	62fb      	str	r3, [r7, #44]	; 0x2c
    f778:	2308      	movs	r3, #8
    f77a:	64f9      	str	r1, [r7, #76]	; 0x4c
    f77c:	63bb      	str	r3, [r7, #56]	; 0x38
    f77e:	2503      	movs	r5, #3
    f780:	f7ff bbc4 	b.w	ef0c <__ssvfscanf_r+0x238>
    f784:	f044 0401 	orr.w	r4, r4, #1
    f788:	4b65      	ldr	r3, [pc, #404]	; (f920 <__ssvfscanf_r+0xc4c>)
    f78a:	62fb      	str	r3, [r7, #44]	; 0x2c
    f78c:	230a      	movs	r3, #10
    f78e:	64f9      	str	r1, [r7, #76]	; 0x4c
    f790:	63bb      	str	r3, [r7, #56]	; 0x38
    f792:	2503      	movs	r5, #3
    f794:	f7ff bbba 	b.w	ef0c <__ssvfscanf_r+0x238>
    f798:	0523      	lsls	r3, r4, #20
    f79a:	f57f ad82 	bpl.w	f2a2 <__ssvfscanf_r+0x5ce>
    f79e:	b916      	cbnz	r6, f7a6 <__ssvfscanf_r+0xad2>
    f7a0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    f7a4:	2608      	movs	r6, #8
    f7a6:	0563      	lsls	r3, r4, #21
    f7a8:	f100 81a6 	bmi.w	faf8 <__ssvfscanf_r+0xe24>
    f7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f7ae:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    f7b2:	b11b      	cbz	r3, f7bc <__ssvfscanf_r+0xae8>
    f7b4:	3b01      	subs	r3, #1
    f7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    f7b8:	f108 0801 	add.w	r8, r8, #1
    f7bc:	684b      	ldr	r3, [r1, #4]
    f7be:	3b01      	subs	r3, #1
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	f10a 0a01 	add.w	sl, sl, #1
    f7c6:	604b      	str	r3, [r1, #4]
    f7c8:	f73f ad73 	bgt.w	f2b2 <__ssvfscanf_r+0x5de>
    f7cc:	4648      	mov	r0, r9
    f7ce:	64b9      	str	r1, [r7, #72]	; 0x48
    f7d0:	f002 fc2a 	bl	12028 <__ssrefill_r>
    f7d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    f7d6:	2800      	cmp	r0, #0
    f7d8:	f43f ad6d 	beq.w	f2b6 <__ssvfscanf_r+0x5e2>
    f7dc:	e56e      	b.n	f2bc <__ssvfscanf_r+0x5e8>
    f7de:	ee18 0a10 	vmov	r0, s16
    f7e2:	4659      	mov	r1, fp
    f7e4:	f002 fc20 	bl	12028 <__ssrefill_r>
    f7e8:	2800      	cmp	r0, #0
    f7ea:	f47f ac91 	bne.w	f110 <__ssvfscanf_r+0x43c>
    f7ee:	2e00      	cmp	r6, #0
    f7f0:	f47f abc4 	bne.w	ef7c <__ssvfscanf_r+0x2a8>
    f7f4:	e48c      	b.n	f110 <__ssvfscanf_r+0x43c>
    f7f6:	4659      	mov	r1, fp
    f7f8:	4648      	mov	r0, r9
    f7fa:	f002 fc15 	bl	12028 <__ssrefill_r>
    f7fe:	2800      	cmp	r0, #0
    f800:	f47f ab54 	bne.w	eeac <__ssvfscanf_r+0x1d8>
    f804:	f8db 2000 	ldr.w	r2, [fp]
    f808:	e79a      	b.n	f740 <__ssvfscanf_r+0xa6c>
    f80a:	f8db 2004 	ldr.w	r2, [fp, #4]
    f80e:	e00f      	b.n	f830 <__ssvfscanf_r+0xb5c>
    f810:	f8db 3000 	ldr.w	r3, [fp]
    f814:	781a      	ldrb	r2, [r3, #0]
    f816:	5cb2      	ldrb	r2, [r6, r2]
    f818:	0711      	lsls	r1, r2, #28
    f81a:	f103 0301 	add.w	r3, r3, #1
    f81e:	f57f aa80 	bpl.w	ed22 <__ssvfscanf_r+0x4e>
    f822:	f8db 2004 	ldr.w	r2, [fp, #4]
    f826:	3a01      	subs	r2, #1
    f828:	e9cb 3200 	strd	r3, r2, [fp]
    f82c:	f10a 0a01 	add.w	sl, sl, #1
    f830:	2a00      	cmp	r2, #0
    f832:	dced      	bgt.n	f810 <__ssvfscanf_r+0xb3c>
    f834:	4659      	mov	r1, fp
    f836:	4648      	mov	r0, r9
    f838:	f002 fbf6 	bl	12028 <__ssrefill_r>
    f83c:	2800      	cmp	r0, #0
    f83e:	d0e7      	beq.n	f810 <__ssvfscanf_r+0xb3c>
    f840:	f7ff ba6f 	b.w	ed22 <__ssvfscanf_r+0x4e>
    f844:	06e1      	lsls	r1, r4, #27
    f846:	f100 8349 	bmi.w	fedc <__ssvfscanf_r+0x1208>
    f84a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    f84e:	f000 83ab 	beq.w	ffa8 <__ssvfscanf_r+0x12d4>
    f852:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f854:	f854 6b04 	ldr.w	r6, [r4], #4
    f858:	64be      	str	r6, [r7, #72]	; 0x48
    f85a:	2e00      	cmp	r6, #0
    f85c:	f43f ab2f 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f860:	2020      	movs	r0, #32
    f862:	f7f9 fe8f 	bl	9584 <malloc>
    f866:	4605      	mov	r5, r0
    f868:	2800      	cmp	r0, #0
    f86a:	f000 8462 	beq.w	10132 <__ssvfscanf_r+0x145e>
    f86e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f870:	6030      	str	r0, [r6, #0]
    f872:	8893      	ldrh	r3, [r2, #4]
    f874:	88d6      	ldrh	r6, [r2, #6]
    f876:	429e      	cmp	r6, r3
    f878:	f080 82a8 	bcs.w	fdcc <__ssvfscanf_r+0x10f8>
    f87c:	6810      	ldr	r0, [r2, #0]
    f87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f880:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f886:	633c      	str	r4, [r7, #48]	; 0x30
    f888:	3601      	adds	r6, #1
    f88a:	80de      	strh	r6, [r3, #6]
    f88c:	2320      	movs	r3, #32
    f88e:	63fb      	str	r3, [r7, #60]	; 0x3c
    f890:	f8db 2000 	ldr.w	r2, [fp]
    f894:	4e20      	ldr	r6, [pc, #128]	; (f918 <__ssvfscanf_r+0xc44>)
    f896:	7811      	ldrb	r1, [r2, #0]
    f898:	5c71      	ldrb	r1, [r6, r1]
    f89a:	0708      	lsls	r0, r1, #28
    f89c:	f100 82ac 	bmi.w	fdf8 <__ssvfscanf_r+0x1124>
    f8a0:	4633      	mov	r3, r6
    f8a2:	462c      	mov	r4, r5
    f8a4:	4610      	mov	r0, r2
    f8a6:	462e      	mov	r6, r5
    f8a8:	f8db 1004 	ldr.w	r1, [fp, #4]
    f8ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f8ae:	3901      	subs	r1, #1
    f8b0:	f8cb 1004 	str.w	r1, [fp, #4]
    f8b4:	1c41      	adds	r1, r0, #1
    f8b6:	f8cb 1000 	str.w	r1, [fp]
    f8ba:	4635      	mov	r5, r6
    f8bc:	7801      	ldrb	r1, [r0, #0]
    f8be:	f805 1b01 	strb.w	r1, [r5], #1
    f8c2:	b122      	cbz	r2, f8ce <__ssvfscanf_r+0xbfa>
    f8c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f8c6:	1b2e      	subs	r6, r5, r4
    f8c8:	4296      	cmp	r6, r2
    f8ca:	f080 837a 	bcs.w	ffc2 <__ssvfscanf_r+0x12ee>
    f8ce:	f1b8 0801 	subs.w	r8, r8, #1
    f8d2:	d00b      	beq.n	f8ec <__ssvfscanf_r+0xc18>
    f8d4:	f8db 1004 	ldr.w	r1, [fp, #4]
    f8d8:	2900      	cmp	r1, #0
    f8da:	462e      	mov	r6, r5
    f8dc:	f340 83ae 	ble.w	1003c <__ssvfscanf_r+0x1368>
    f8e0:	f8db 0000 	ldr.w	r0, [fp]
    f8e4:	7801      	ldrb	r1, [r0, #0]
    f8e6:	5c59      	ldrb	r1, [r3, r1]
    f8e8:	0709      	lsls	r1, r1, #28
    f8ea:	d5dd      	bpl.n	f8a8 <__ssvfscanf_r+0xbd4>
    f8ec:	1b29      	subs	r1, r5, r4
    f8ee:	448a      	add	sl, r1
    f8f0:	3101      	adds	r1, #1
    f8f2:	f04f 0300 	mov.w	r3, #0
    f8f6:	702b      	strb	r3, [r5, #0]
    f8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f8fa:	b11b      	cbz	r3, f904 <__ssvfscanf_r+0xc30>
    f8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f8fe:	428b      	cmp	r3, r1
    f900:	f200 8394 	bhi.w	1002c <__ssvfscanf_r+0x1358>
    f904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f906:	3301      	adds	r3, #1
    f908:	647b      	str	r3, [r7, #68]	; 0x44
    f90a:	f7ff ba0a 	b.w	ed22 <__ssvfscanf_r+0x4e>
    f90e:	2300      	movs	r3, #0
    f910:	63fb      	str	r3, [r7, #60]	; 0x3c
    f912:	e461      	b.n	f1d8 <__ssvfscanf_r+0x504>
    f914:	2000284c 	.word	0x2000284c
    f918:	20000c29 	.word	0x20000c29
    f91c:	000118ed 	.word	0x000118ed
    f920:	0000aed1 	.word	0x0000aed1
    f924:	06e6      	lsls	r6, r4, #27
    f926:	f100 8181 	bmi.w	fc2c <__ssvfscanf_r+0xf58>
    f92a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    f92e:	f000 836d 	beq.w	1000c <__ssvfscanf_r+0x1338>
    f932:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f934:	f854 6b04 	ldr.w	r6, [r4], #4
    f938:	64be      	str	r6, [r7, #72]	; 0x48
    f93a:	2e00      	cmp	r6, #0
    f93c:	f43f aabf 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f940:	2020      	movs	r0, #32
    f942:	f7f9 fe1f 	bl	9584 <malloc>
    f946:	4605      	mov	r5, r0
    f948:	2800      	cmp	r0, #0
    f94a:	f000 83f2 	beq.w	10132 <__ssvfscanf_r+0x145e>
    f94e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f950:	6030      	str	r0, [r6, #0]
    f952:	8893      	ldrh	r3, [r2, #4]
    f954:	88d6      	ldrh	r6, [r2, #6]
    f956:	429e      	cmp	r6, r3
    f958:	f080 827a 	bcs.w	fe50 <__ssvfscanf_r+0x117c>
    f95c:	6810      	ldr	r0, [r2, #0]
    f95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f960:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    f964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f966:	633c      	str	r4, [r7, #48]	; 0x30
    f968:	3601      	adds	r6, #1
    f96a:	80de      	strh	r6, [r3, #6]
    f96c:	2420      	movs	r4, #32
    f96e:	f8db 2000 	ldr.w	r2, [fp]
    f972:	f107 0370 	add.w	r3, r7, #112	; 0x70
    f976:	4619      	mov	r1, r3
    f978:	7813      	ldrb	r3, [r2, #0]
    f97a:	5ccb      	ldrb	r3, [r1, r3]
    f97c:	2b00      	cmp	r3, #0
    f97e:	f43f aa9e 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f982:	ee08 9a10 	vmov	s16, r9
    f986:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    f98a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    f98e:	462e      	mov	r6, r5
    f990:	46a2      	mov	sl, r4
    f992:	4610      	mov	r0, r2
    f994:	460c      	mov	r4, r1
    f996:	f8db 1004 	ldr.w	r1, [fp, #4]
    f99a:	1c43      	adds	r3, r0, #1
    f99c:	3901      	subs	r1, #1
    f99e:	e9cb 3100 	strd	r3, r1, [fp]
    f9a2:	4629      	mov	r1, r5
    f9a4:	7800      	ldrb	r0, [r0, #0]
    f9a6:	f801 0b01 	strb.w	r0, [r1], #1
    f9aa:	f1b9 0f00 	cmp.w	r9, #0
    f9ae:	d002      	beq.n	f9b6 <__ssvfscanf_r+0xce2>
    f9b0:	1b8d      	subs	r5, r1, r6
    f9b2:	4555      	cmp	r5, sl
    f9b4:	d27a      	bcs.n	faac <__ssvfscanf_r+0xdd8>
    f9b6:	460d      	mov	r5, r1
    f9b8:	f1b8 0801 	subs.w	r8, r8, #1
    f9bc:	d00a      	beq.n	f9d4 <__ssvfscanf_r+0xd00>
    f9be:	f8db 1004 	ldr.w	r1, [fp, #4]
    f9c2:	2900      	cmp	r1, #0
    f9c4:	f340 816a 	ble.w	fc9c <__ssvfscanf_r+0xfc8>
    f9c8:	f8db 0000 	ldr.w	r0, [fp]
    f9cc:	7801      	ldrb	r1, [r0, #0]
    f9ce:	5c61      	ldrb	r1, [r4, r1]
    f9d0:	2900      	cmp	r1, #0
    f9d2:	d1e0      	bne.n	f996 <__ssvfscanf_r+0xcc2>
    f9d4:	4654      	mov	r4, sl
    f9d6:	ee18 9a10 	vmov	r9, s16
    f9da:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    f9de:	1bae      	subs	r6, r5, r6
    f9e0:	f43f aa6d 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    f9e4:	f04f 0300 	mov.w	r3, #0
    f9e8:	702b      	strb	r3, [r5, #0]
    f9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f9ec:	b11b      	cbz	r3, f9f6 <__ssvfscanf_r+0xd22>
    f9ee:	1c71      	adds	r1, r6, #1
    f9f0:	428c      	cmp	r4, r1
    f9f2:	f200 832d 	bhi.w	10050 <__ssvfscanf_r+0x137c>
    f9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f9f8:	3301      	adds	r3, #1
    f9fa:	44b2      	add	sl, r6
    f9fc:	647b      	str	r3, [r7, #68]	; 0x44
    f9fe:	f7ff b990 	b.w	ed22 <__ssvfscanf_r+0x4e>
    fa02:	2300      	movs	r3, #0
    fa04:	613b      	str	r3, [r7, #16]
    fa06:	f7ff baa9 	b.w	ef5c <__ssvfscanf_r+0x288>
    fa0a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    fa0e:	f47f aa56 	bne.w	eebe <__ssvfscanf_r+0x1ea>
    fa12:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    fa16:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    fa1a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    fa1e:	f7ff ba67 	b.w	eef0 <__ssvfscanf_r+0x21c>
    fa22:	64f9      	str	r1, [r7, #76]	; 0x4c
    fa24:	2504      	movs	r5, #4
    fa26:	f7ff ba71 	b.w	ef0c <__ssvfscanf_r+0x238>
    fa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa2c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fa2e:	185b      	adds	r3, r3, r1
    fa30:	f47f ae44 	bne.w	f6bc <__ssvfscanf_r+0x9e8>
    fa34:	e5be      	b.n	f5b4 <__ssvfscanf_r+0x8e0>
    fa36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa38:	2b03      	cmp	r3, #3
    fa3a:	d002      	beq.n	fa42 <__ssvfscanf_r+0xd6e>
    fa3c:	2b05      	cmp	r3, #5
    fa3e:	f47f ab67 	bne.w	f110 <__ssvfscanf_r+0x43c>
    fa42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa44:	3301      	adds	r3, #1
    fa46:	b2db      	uxtb	r3, r3
    fa48:	64bb      	str	r3, [r7, #72]	; 0x48
    fa4a:	f7ff bb4c 	b.w	f0e6 <__ssvfscanf_r+0x412>
    fa4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fa50:	2b00      	cmp	r3, #0
    fa52:	f47f ae01 	bne.w	f658 <__ssvfscanf_r+0x984>
    fa56:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fa5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fa5e:	f47f adfb 	bne.w	f658 <__ssvfscanf_r+0x984>
    fa62:	2301      	movs	r3, #1
    fa64:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    fa68:	63fb      	str	r3, [r7, #60]	; 0x3c
    fa6a:	f7ff bb3c 	b.w	f0e6 <__ssvfscanf_r+0x412>
    fa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fa72:	185b      	adds	r3, r3, r1
    fa74:	f47f ae02 	bne.w	f67c <__ssvfscanf_r+0x9a8>
    fa78:	e59c      	b.n	f5b4 <__ssvfscanf_r+0x8e0>
    fa7a:	1c83      	adds	r3, r0, #2
    fa7c:	f040 845b 	bne.w	10336 <__ssvfscanf_r+0x1662>
    fa80:	f8db 3004 	ldr.w	r3, [fp, #4]
    fa84:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    fa86:	2b00      	cmp	r3, #0
    fa88:	f73f ad00 	bgt.w	f48c <__ssvfscanf_r+0x7b8>
    fa8c:	4659      	mov	r1, fp
    fa8e:	4648      	mov	r0, r9
    fa90:	f002 faca 	bl	12028 <__ssrefill_r>
    fa94:	2800      	cmp	r0, #0
    fa96:	f43f ad63 	beq.w	f560 <__ssvfscanf_r+0x88c>
    fa9a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fa9e:	627e      	str	r6, [r7, #36]	; 0x24
    faa0:	4644      	mov	r4, r8
    faa2:	2d00      	cmp	r5, #0
    faa4:	f43f ad63 	beq.w	f56e <__ssvfscanf_r+0x89a>
    faa8:	f7ff ba00 	b.w	eeac <__ssvfscanf_r+0x1d8>
    faac:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    fab0:	4630      	mov	r0, r6
    fab2:	4651      	mov	r1, sl
    fab4:	f7fa f832 	bl	9b1c <realloc>
    fab8:	4606      	mov	r6, r0
    faba:	2800      	cmp	r0, #0
    fabc:	f000 8339 	beq.w	10132 <__ssvfscanf_r+0x145e>
    fac0:	4405      	add	r5, r0
    fac2:	f8c9 0000 	str.w	r0, [r9]
    fac6:	e777      	b.n	f9b8 <__ssvfscanf_r+0xce4>
    fac8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    facc:	4bbc      	ldr	r3, [pc, #752]	; (fdc0 <__ssvfscanf_r+0x10ec>)
    face:	62fb      	str	r3, [r7, #44]	; 0x2c
    fad0:	2310      	movs	r3, #16
    fad2:	64f9      	str	r1, [r7, #76]	; 0x4c
    fad4:	63bb      	str	r3, [r7, #56]	; 0x38
    fad6:	2503      	movs	r5, #3
    fad8:	f7ff ba18 	b.w	ef0c <__ssvfscanf_r+0x238>
    fadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fade:	3301      	adds	r3, #1
    fae0:	637b      	str	r3, [r7, #52]	; 0x34
    fae2:	693b      	ldr	r3, [r7, #16]
    fae4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fae8:	2b00      	cmp	r3, #0
    faea:	f43f aafe 	beq.w	f0ea <__ssvfscanf_r+0x416>
    faee:	693b      	ldr	r3, [r7, #16]
    faf0:	3b01      	subs	r3, #1
    faf2:	613b      	str	r3, [r7, #16]
    faf4:	f7ff bafa 	b.w	f0ec <__ssvfscanf_r+0x418>
    faf8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    fafc:	f7ff bbd1 	b.w	f2a2 <__ssvfscanf_r+0x5ce>
    fb00:	0722      	lsls	r2, r4, #28
    fb02:	f140 81c7 	bpl.w	fe94 <__ssvfscanf_r+0x11c0>
    fb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fb08:	f853 2b04 	ldr.w	r2, [r3], #4
    fb0c:	633b      	str	r3, [r7, #48]	; 0x30
    fb0e:	7010      	strb	r0, [r2, #0]
    fb10:	f7ff bbf3 	b.w	f2fa <__ssvfscanf_r+0x626>
    fb14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    fb18:	465a      	mov	r2, fp
    fb1a:	4648      	mov	r0, r9
    fb1c:	3d01      	subs	r5, #1
    fb1e:	f002 fa43 	bl	11fa8 <_sungetc_r>
    fb22:	f7ff bbd5 	b.w	f2d0 <__ssvfscanf_r+0x5fc>
    fb26:	69fb      	ldr	r3, [r7, #28]
    fb28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fb2a:	4293      	cmp	r3, r2
    fb2c:	f43f ab2d 	beq.w	f18a <__ssvfscanf_r+0x4b6>
    fb30:	1a9a      	subs	r2, r3, r2
    fb32:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    fb36:	429d      	cmp	r5, r3
    fb38:	bf28      	it	cs
    fb3a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    fb3e:	49a1      	ldr	r1, [pc, #644]	; (fdc4 <__ssvfscanf_r+0x10f0>)
    fb40:	4628      	mov	r0, r5
    fb42:	f7fb fab1 	bl	b0a8 <sprintf>
    fb46:	f7ff bb20 	b.w	f18a <__ssvfscanf_r+0x4b6>
    fb4a:	06e2      	lsls	r2, r4, #27
    fb4c:	f100 8131 	bmi.w	fdb2 <__ssvfscanf_r+0x10de>
    fb50:	0723      	lsls	r3, r4, #28
    fb52:	f100 81ba 	bmi.w	feca <__ssvfscanf_r+0x11f6>
    fb56:	0766      	lsls	r6, r4, #29
    fb58:	f140 82b4 	bpl.w	100c4 <__ssvfscanf_r+0x13f0>
    fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fb5e:	64f9      	str	r1, [r7, #76]	; 0x4c
    fb60:	f853 2b04 	ldr.w	r2, [r3], #4
    fb64:	633b      	str	r3, [r7, #48]	; 0x30
    fb66:	f8a2 a000 	strh.w	sl, [r2]
    fb6a:	f7ff b8da 	b.w	ed22 <__ssvfscanf_r+0x4e>
    fb6e:	0723      	lsls	r3, r4, #28
    fb70:	f47f a9a5 	bne.w	eebe <__ssvfscanf_r+0x1ea>
    fb74:	7842      	ldrb	r2, [r0, #1]
    fb76:	2a68      	cmp	r2, #104	; 0x68
    fb78:	f000 8186 	beq.w	fe88 <__ssvfscanf_r+0x11b4>
    fb7c:	f044 0404 	orr.w	r4, r4, #4
    fb80:	4608      	mov	r0, r1
    fb82:	f7ff b92f 	b.w	ede4 <__ssvfscanf_r+0x110>
    fb86:	4b8e      	ldr	r3, [pc, #568]	; (fdc0 <__ssvfscanf_r+0x10ec>)
    fb88:	62fb      	str	r3, [r7, #44]	; 0x2c
    fb8a:	230a      	movs	r3, #10
    fb8c:	64f9      	str	r1, [r7, #76]	; 0x4c
    fb8e:	63bb      	str	r3, [r7, #56]	; 0x38
    fb90:	2503      	movs	r5, #3
    fb92:	f7ff b9bb 	b.w	ef0c <__ssvfscanf_r+0x238>
    fb96:	4b8c      	ldr	r3, [pc, #560]	; (fdc8 <__ssvfscanf_r+0x10f4>)
    fb98:	62fb      	str	r3, [r7, #44]	; 0x2c
    fb9a:	2300      	movs	r3, #0
    fb9c:	64f9      	str	r1, [r7, #76]	; 0x4c
    fb9e:	63bb      	str	r3, [r7, #56]	; 0x38
    fba0:	2503      	movs	r5, #3
    fba2:	f7ff b9b3 	b.w	ef0c <__ssvfscanf_r+0x238>
    fba6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    fbaa:	e78f      	b.n	facc <__ssvfscanf_r+0xdf8>
    fbac:	f107 0070 	add.w	r0, r7, #112	; 0x70
    fbb0:	f000 fdde 	bl	10770 <__sccl>
    fbb4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fbb8:	64f8      	str	r0, [r7, #76]	; 0x4c
    fbba:	2501      	movs	r5, #1
    fbbc:	f7ff b9a6 	b.w	ef0c <__ssvfscanf_r+0x238>
    fbc0:	0722      	lsls	r2, r4, #28
    fbc2:	f47f a97c 	bne.w	eebe <__ssvfscanf_r+0x1ea>
    fbc6:	7842      	ldrb	r2, [r0, #1]
    fbc8:	2a6c      	cmp	r2, #108	; 0x6c
    fbca:	f000 8157 	beq.w	fe7c <__ssvfscanf_r+0x11a8>
    fbce:	f044 0401 	orr.w	r4, r4, #1
    fbd2:	4608      	mov	r0, r1
    fbd4:	f7ff b906 	b.w	ede4 <__ssvfscanf_r+0x110>
    fbd8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    fbdc:	f47f a96f 	bne.w	eebe <__ssvfscanf_r+0x1ea>
    fbe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fbe2:	2a00      	cmp	r2, #0
    fbe4:	f000 81e7 	beq.w	ffb6 <__ssvfscanf_r+0x12e2>
    fbe8:	7842      	ldrb	r2, [r0, #1]
    fbea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    fbee:	4608      	mov	r0, r1
    fbf0:	f7ff b8f8 	b.w	ede4 <__ssvfscanf_r+0x110>
    fbf4:	ea58 0804 	orrs.w	r8, r8, r4
    fbf8:	f47f a961 	bne.w	eebe <__ssvfscanf_r+0x1ea>
    fbfc:	7842      	ldrb	r2, [r0, #1]
    fbfe:	2410      	movs	r4, #16
    fc00:	4608      	mov	r0, r1
    fc02:	f7ff b8ef 	b.w	ede4 <__ssvfscanf_r+0x110>
    fc06:	64f9      	str	r1, [r7, #76]	; 0x4c
    fc08:	f7ff b8a7 	b.w	ed5a <__ssvfscanf_r+0x86>
    fc0c:	2300      	movs	r3, #0
    fc0e:	623b      	str	r3, [r7, #32]
    fc10:	62bb      	str	r3, [r7, #40]	; 0x28
    fc12:	63fb      	str	r3, [r7, #60]	; 0x3c
    fc14:	f107 0354 	add.w	r3, r7, #84	; 0x54
    fc18:	64bb      	str	r3, [r7, #72]	; 0x48
    fc1a:	f7ff bba9 	b.w	f370 <__ssvfscanf_r+0x69c>
    fc1e:	2300      	movs	r3, #0
    fc20:	e9c7 3306 	strd	r3, r3, [r7, #24]
    fc24:	623b      	str	r3, [r7, #32]
    fc26:	f107 0454 	add.w	r4, r7, #84	; 0x54
    fc2a:	e429      	b.n	f480 <__ssvfscanf_r+0x7ac>
    fc2c:	f8db 3000 	ldr.w	r3, [fp]
    fc30:	f107 0270 	add.w	r2, r7, #112	; 0x70
    fc34:	4611      	mov	r1, r2
    fc36:	781a      	ldrb	r2, [r3, #0]
    fc38:	5c8a      	ldrb	r2, [r1, r2]
    fc3a:	2a00      	cmp	r2, #0
    fc3c:	f43f a93f 	beq.w	eebe <__ssvfscanf_r+0x1ea>
    fc40:	3301      	adds	r3, #1
    fc42:	f8cb 3000 	str.w	r3, [fp]
    fc46:	f8db 3004 	ldr.w	r3, [fp, #4]
    fc4a:	f1b8 0f01 	cmp.w	r8, #1
    fc4e:	f103 33ff 	add.w	r3, r3, #4294967295
    fc52:	f8cb 3004 	str.w	r3, [fp, #4]
    fc56:	bf18      	it	ne
    fc58:	460c      	movne	r4, r1
    fc5a:	d114      	bne.n	fc86 <__ssvfscanf_r+0xfb2>
    fc5c:	f7ff bb53 	b.w	f306 <__ssvfscanf_r+0x632>
    fc60:	f8db 3000 	ldr.w	r3, [fp]
    fc64:	781a      	ldrb	r2, [r3, #0]
    fc66:	5ca2      	ldrb	r2, [r4, r2]
    fc68:	3301      	adds	r3, #1
    fc6a:	2a00      	cmp	r2, #0
    fc6c:	f43f ab4b 	beq.w	f306 <__ssvfscanf_r+0x632>
    fc70:	f8cb 3000 	str.w	r3, [fp]
    fc74:	f8db 3004 	ldr.w	r3, [fp, #4]
    fc78:	3501      	adds	r5, #1
    fc7a:	3b01      	subs	r3, #1
    fc7c:	4545      	cmp	r5, r8
    fc7e:	f8cb 3004 	str.w	r3, [fp, #4]
    fc82:	f43f ab40 	beq.w	f306 <__ssvfscanf_r+0x632>
    fc86:	2b00      	cmp	r3, #0
    fc88:	dcea      	bgt.n	fc60 <__ssvfscanf_r+0xf8c>
    fc8a:	4659      	mov	r1, fp
    fc8c:	4648      	mov	r0, r9
    fc8e:	f002 f9cb 	bl	12028 <__ssrefill_r>
    fc92:	2800      	cmp	r0, #0
    fc94:	d0e4      	beq.n	fc60 <__ssvfscanf_r+0xf8c>
    fc96:	44aa      	add	sl, r5
    fc98:	f7ff b843 	b.w	ed22 <__ssvfscanf_r+0x4e>
    fc9c:	ee18 0a10 	vmov	r0, s16
    fca0:	4659      	mov	r1, fp
    fca2:	f002 f9c1 	bl	12028 <__ssrefill_r>
    fca6:	2800      	cmp	r0, #0
    fca8:	f43f ae8e 	beq.w	f9c8 <__ssvfscanf_r+0xcf4>
    fcac:	42b5      	cmp	r5, r6
    fcae:	4654      	mov	r4, sl
    fcb0:	ee18 9a10 	vmov	r9, s16
    fcb4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fcb8:	f47f ae91 	bne.w	f9de <__ssvfscanf_r+0xd0a>
    fcbc:	f7ff b8f6 	b.w	eeac <__ssvfscanf_r+0x1d8>
    fcc0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    fcc4:	e428      	b.n	f518 <__ssvfscanf_r+0x844>
    fcc6:	6823      	ldr	r3, [r4, #0]
    fcc8:	2b04      	cmp	r3, #4
    fcca:	f47f ac32 	bne.w	f532 <__ssvfscanf_r+0x85e>
    fcce:	e432      	b.n	f536 <__ssvfscanf_r+0x862>
    fcd0:	1c83      	adds	r3, r0, #2
    fcd2:	f040 8339 	bne.w	10348 <__ssvfscanf_r+0x1674>
    fcd6:	f8db 3004 	ldr.w	r3, [fp, #4]
    fcda:	2b00      	cmp	r3, #0
    fcdc:	f340 81d7 	ble.w	1008e <__ssvfscanf_r+0x13ba>
    fce0:	f8db 3000 	ldr.w	r3, [fp]
    fce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fce6:	781b      	ldrb	r3, [r3, #0]
    fce8:	5cd3      	ldrb	r3, [r2, r3]
    fcea:	0718      	lsls	r0, r3, #28
    fcec:	d403      	bmi.n	fcf6 <__ssvfscanf_r+0x1022>
    fcee:	f1b8 0f00 	cmp.w	r8, #0
    fcf2:	f47f ab49 	bne.w	f388 <__ssvfscanf_r+0x6b4>
    fcf6:	627c      	str	r4, [r7, #36]	; 0x24
    fcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fcfa:	2b00      	cmp	r3, #0
    fcfc:	f47f a811 	bne.w	ed22 <__ssvfscanf_r+0x4e>
    fd00:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fd02:	6013      	str	r3, [r2, #0]
    fd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd06:	2b00      	cmp	r3, #0
    fd08:	f43f adfc 	beq.w	f904 <__ssvfscanf_r+0xc30>
    fd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fd0e:	1ad1      	subs	r1, r2, r3
    fd10:	108b      	asrs	r3, r1, #2
    fd12:	6a3a      	ldr	r2, [r7, #32]
    fd14:	3301      	adds	r3, #1
    fd16:	429a      	cmp	r2, r3
    fd18:	f67f adf4 	bls.w	f904 <__ssvfscanf_r+0xc30>
    fd1c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    fd1e:	3104      	adds	r1, #4
    fd20:	6820      	ldr	r0, [r4, #0]
    fd22:	f7f9 fefb 	bl	9b1c <realloc>
    fd26:	2800      	cmp	r0, #0
    fd28:	f47f ac3a 	bne.w	f5a0 <__ssvfscanf_r+0x8cc>
    fd2c:	e5ea      	b.n	f904 <__ssvfscanf_r+0xc30>
    fd2e:	f853 2b04 	ldr.w	r2, [r3], #4
    fd32:	ed82 0b00 	vstr	d0, [r2]
    fd36:	633b      	str	r3, [r7, #48]	; 0x30
    fd38:	e5e4      	b.n	f904 <__ssvfscanf_r+0xc30>
    fd3a:	68fd      	ldr	r5, [r7, #12]
    fd3c:	6a39      	ldr	r1, [r7, #32]
    fd3e:	687e      	ldr	r6, [r7, #4]
    fd40:	4628      	mov	r0, r5
    fd42:	4642      	mov	r2, r8
    fd44:	46a3      	mov	fp, r4
    fd46:	68bc      	ldr	r4, [r7, #8]
    fd48:	f000 fd56 	bl	107f8 <stpncpy>
    fd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd4e:	61fb      	str	r3, [r7, #28]
    fd50:	f424 7420 	bic.w	r4, r4, #640	; 0x280
    fd54:	3e01      	subs	r6, #1
    fd56:	4605      	mov	r5, r0
    fd58:	f7ff b9c8 	b.w	f0ec <__ssvfscanf_r+0x418>
    fd5c:	69f8      	ldr	r0, [r7, #28]
    fd5e:	00d9      	lsls	r1, r3, #3
    fd60:	461d      	mov	r5, r3
    fd62:	f7f9 fedb 	bl	9b1c <realloc>
    fd66:	61f8      	str	r0, [r7, #28]
    fd68:	2800      	cmp	r0, #0
    fd6a:	f000 8264 	beq.w	10236 <__ssvfscanf_r+0x1562>
    fd6e:	6a3a      	ldr	r2, [r7, #32]
    fd70:	006b      	lsls	r3, r5, #1
    fd72:	eb00 0804 	add.w	r8, r0, r4
    fd76:	6010      	str	r0, [r2, #0]
    fd78:	61bb      	str	r3, [r7, #24]
    fd7a:	f7ff bbea 	b.w	f552 <__ssvfscanf_r+0x87e>
    fd7e:	2e02      	cmp	r6, #2
    fd80:	f240 82c4 	bls.w	1030c <__ssvfscanf_r+0x1638>
    fd84:	2e03      	cmp	r6, #3
    fd86:	f43f a9d3 	beq.w	f130 <__ssvfscanf_r+0x45c>
    fd8a:	3e04      	subs	r6, #4
    fd8c:	fa5f f886 	uxtb.w	r8, r6
    fd90:	ea6f 0308 	mvn.w	r3, r8
    fd94:	18ee      	adds	r6, r5, r3
    fd96:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    fd9a:	465a      	mov	r2, fp
    fd9c:	4648      	mov	r0, r9
    fd9e:	f002 f903 	bl	11fa8 <_sungetc_r>
    fda2:	42ae      	cmp	r6, r5
    fda4:	d1f7      	bne.n	fd96 <__ssvfscanf_r+0x10c2>
    fda6:	f10a 3aff 	add.w	sl, sl, #4294967295
    fdaa:	ebaa 0a08 	sub.w	sl, sl, r8
    fdae:	f7ff b9bf 	b.w	f130 <__ssvfscanf_r+0x45c>
    fdb2:	64f9      	str	r1, [r7, #76]	; 0x4c
    fdb4:	f7fe bfb5 	b.w	ed22 <__ssvfscanf_r+0x4e>
    fdb8:	2303      	movs	r3, #3
    fdba:	63fb      	str	r3, [r7, #60]	; 0x3c
    fdbc:	f7ff b993 	b.w	f0e6 <__ssvfscanf_r+0x412>
    fdc0:	000118ed 	.word	0x000118ed
    fdc4:	20000c20 	.word	0x20000c20
    fdc8:	0000aed1 	.word	0x0000aed1
    fdcc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    fdd0:	4293      	cmp	r3, r2
    fdd2:	f200 8297 	bhi.w	10304 <__ssvfscanf_r+0x1630>
    fdd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fdd8:	3308      	adds	r3, #8
    fdda:	b29b      	uxth	r3, r3
    fddc:	6810      	ldr	r0, [r2, #0]
    fdde:	63f8      	str	r0, [r7, #60]	; 0x3c
    fde0:	0099      	lsls	r1, r3, #2
    fde2:	637b      	str	r3, [r7, #52]	; 0x34
    fde4:	f7f9 fe9a 	bl	9b1c <realloc>
    fde8:	2800      	cmp	r0, #0
    fdea:	f000 827b 	beq.w	102e4 <__ssvfscanf_r+0x1610>
    fdee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fdf2:	8093      	strh	r3, [r2, #4]
    fdf4:	6010      	str	r0, [r2, #0]
    fdf6:	e542      	b.n	f87e <__ssvfscanf_r+0xbaa>
    fdf8:	2101      	movs	r1, #1
    fdfa:	e57a      	b.n	f8f2 <__ssvfscanf_r+0xc1e>
    fdfc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    fe00:	4293      	cmp	r3, r2
    fe02:	f200 8293 	bhi.w	1032c <__ssvfscanf_r+0x1658>
    fe06:	3308      	adds	r3, #8
    fe08:	b29e      	uxth	r6, r3
    fe0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe0c:	00b1      	lsls	r1, r6, #2
    fe0e:	6818      	ldr	r0, [r3, #0]
    fe10:	f7f9 fe84 	bl	9b1c <realloc>
    fe14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe16:	2800      	cmp	r0, #0
    fe18:	f000 823e 	beq.w	10298 <__ssvfscanf_r+0x15c4>
    fe1c:	809e      	strh	r6, [r3, #4]
    fe1e:	6018      	str	r0, [r3, #0]
    fe20:	f7ff ba9b 	b.w	f35a <__ssvfscanf_r+0x686>
    fe24:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    fe28:	4293      	cmp	r3, r2
    fe2a:	f200 827f 	bhi.w	1032c <__ssvfscanf_r+0x1658>
    fe2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fe30:	3308      	adds	r3, #8
    fe32:	b29b      	uxth	r3, r3
    fe34:	0099      	lsls	r1, r3, #2
    fe36:	6810      	ldr	r0, [r2, #0]
    fe38:	64bb      	str	r3, [r7, #72]	; 0x48
    fe3a:	f7f9 fe6f 	bl	9b1c <realloc>
    fe3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fe40:	2800      	cmp	r0, #0
    fe42:	f000 8228 	beq.w	10296 <__ssvfscanf_r+0x15c2>
    fe46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fe48:	8093      	strh	r3, [r2, #4]
    fe4a:	6010      	str	r0, [r2, #0]
    fe4c:	f7ff bb0e 	b.w	f46c <__ssvfscanf_r+0x798>
    fe50:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    fe54:	4293      	cmp	r3, r2
    fe56:	f200 8255 	bhi.w	10304 <__ssvfscanf_r+0x1630>
    fe5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fe5c:	3308      	adds	r3, #8
    fe5e:	b29b      	uxth	r3, r3
    fe60:	6810      	ldr	r0, [r2, #0]
    fe62:	63f8      	str	r0, [r7, #60]	; 0x3c
    fe64:	0099      	lsls	r1, r3, #2
    fe66:	637b      	str	r3, [r7, #52]	; 0x34
    fe68:	f7f9 fe58 	bl	9b1c <realloc>
    fe6c:	2800      	cmp	r0, #0
    fe6e:	f000 8239 	beq.w	102e4 <__ssvfscanf_r+0x1610>
    fe72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fe74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fe76:	8093      	strh	r3, [r2, #4]
    fe78:	6010      	str	r0, [r2, #0]
    fe7a:	e570      	b.n	f95e <__ssvfscanf_r+0xc8a>
    fe7c:	7882      	ldrb	r2, [r0, #2]
    fe7e:	f044 0402 	orr.w	r4, r4, #2
    fe82:	3002      	adds	r0, #2
    fe84:	f7fe bfae 	b.w	ede4 <__ssvfscanf_r+0x110>
    fe88:	7882      	ldrb	r2, [r0, #2]
    fe8a:	f044 0408 	orr.w	r4, r4, #8
    fe8e:	3002      	adds	r0, #2
    fe90:	f7fe bfa8 	b.w	ede4 <__ssvfscanf_r+0x110>
    fe94:	0763      	lsls	r3, r4, #29
    fe96:	d458      	bmi.n	ff4a <__ssvfscanf_r+0x1276>
    fe98:	f014 0201 	ands.w	r2, r4, #1
    fe9c:	f47f aa28 	bne.w	f2f0 <__ssvfscanf_r+0x61c>
    fea0:	07a6      	lsls	r6, r4, #30
    fea2:	f57f aa25 	bpl.w	f2f0 <__ssvfscanf_r+0x61c>
    fea6:	4bb3      	ldr	r3, [pc, #716]	; (10174 <__ssvfscanf_r+0x14a0>)
    fea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    feaa:	4299      	cmp	r1, r3
    feac:	4648      	mov	r0, r9
    feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    feb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    feb2:	f000 823d 	beq.w	10330 <__ssvfscanf_r+0x165c>
    feb6:	f001 fdd1 	bl	11a5c <_strtoll_r>
    feba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    febc:	f853 2b04 	ldr.w	r2, [r3], #4
    fec0:	633b      	str	r3, [r7, #48]	; 0x30
    fec2:	e9c2 0100 	strd	r0, r1, [r2]
    fec6:	f7ff ba18 	b.w	f2fa <__ssvfscanf_r+0x626>
    feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fecc:	64f9      	str	r1, [r7, #76]	; 0x4c
    fece:	f853 2b04 	ldr.w	r2, [r3], #4
    fed2:	633b      	str	r3, [r7, #48]	; 0x30
    fed4:	f882 a000 	strb.w	sl, [r2]
    fed8:	f7fe bf23 	b.w	ed22 <__ssvfscanf_r+0x4e>
    fedc:	f8db 3000 	ldr.w	r3, [fp]
    fee0:	4ea5      	ldr	r6, [pc, #660]	; (10178 <__ssvfscanf_r+0x14a4>)
    fee2:	781a      	ldrb	r2, [r3, #0]
    fee4:	5cb2      	ldrb	r2, [r6, r2]
    fee6:	0712      	lsls	r2, r2, #28
    fee8:	f53e af1b 	bmi.w	ed22 <__ssvfscanf_r+0x4e>
    feec:	3301      	adds	r3, #1
    feee:	f8cb 3000 	str.w	r3, [fp]
    fef2:	f8db 3004 	ldr.w	r3, [fp, #4]
    fef6:	f1b8 0f01 	cmp.w	r8, #1
    fefa:	f103 33ff 	add.w	r3, r3, #4294967295
    fefe:	f8cb 3004 	str.w	r3, [fp, #4]
    ff02:	bf08      	it	eq
    ff04:	f10a 0a01 	addeq.w	sl, sl, #1
    ff08:	f43e af0b 	beq.w	ed22 <__ssvfscanf_r+0x4e>
    ff0c:	2401      	movs	r4, #1
    ff0e:	e011      	b.n	ff34 <__ssvfscanf_r+0x1260>
    ff10:	f8db 3000 	ldr.w	r3, [fp]
    ff14:	781a      	ldrb	r2, [r3, #0]
    ff16:	5cb2      	ldrb	r2, [r6, r2]
    ff18:	0715      	lsls	r5, r2, #28
    ff1a:	f103 0301 	add.w	r3, r3, #1
    ff1e:	d411      	bmi.n	ff44 <__ssvfscanf_r+0x1270>
    ff20:	f8cb 3000 	str.w	r3, [fp]
    ff24:	f8db 3004 	ldr.w	r3, [fp, #4]
    ff28:	3401      	adds	r4, #1
    ff2a:	3b01      	subs	r3, #1
    ff2c:	4544      	cmp	r4, r8
    ff2e:	f8cb 3004 	str.w	r3, [fp, #4]
    ff32:	d007      	beq.n	ff44 <__ssvfscanf_r+0x1270>
    ff34:	2b00      	cmp	r3, #0
    ff36:	dceb      	bgt.n	ff10 <__ssvfscanf_r+0x123c>
    ff38:	4659      	mov	r1, fp
    ff3a:	4648      	mov	r0, r9
    ff3c:	f002 f874 	bl	12028 <__ssrefill_r>
    ff40:	2800      	cmp	r0, #0
    ff42:	d0e5      	beq.n	ff10 <__ssvfscanf_r+0x123c>
    ff44:	44a2      	add	sl, r4
    ff46:	f7fe beec 	b.w	ed22 <__ssvfscanf_r+0x4e>
    ff4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ff4c:	f853 2b04 	ldr.w	r2, [r3], #4
    ff50:	633b      	str	r3, [r7, #48]	; 0x30
    ff52:	8010      	strh	r0, [r2, #0]
    ff54:	f7ff b9d1 	b.w	f2fa <__ssvfscanf_r+0x626>
    ff58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff5a:	2b00      	cmp	r3, #0
    ff5c:	f000 816e 	beq.w	1023c <__ssvfscanf_r+0x1568>
    ff60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff62:	f8d3 8000 	ldr.w	r8, [r3]
    ff66:	88de      	ldrh	r6, [r3, #6]
    ff68:	b176      	cbz	r6, ff88 <__ssvfscanf_r+0x12b4>
    ff6a:	2400      	movs	r4, #0
    ff6c:	f1a8 0504 	sub.w	r5, r8, #4
    ff70:	46a1      	mov	r9, r4
    ff72:	f855 3f04 	ldr.w	r3, [r5, #4]!
    ff76:	6818      	ldr	r0, [r3, #0]
    ff78:	f7f9 fb0c 	bl	9594 <free>
    ff7c:	3401      	adds	r4, #1
    ff7e:	682b      	ldr	r3, [r5, #0]
    ff80:	42a6      	cmp	r6, r4
    ff82:	f8c3 9000 	str.w	r9, [r3]
    ff86:	d1f4      	bne.n	ff72 <__ssvfscanf_r+0x129e>
    ff88:	f04f 33ff 	mov.w	r3, #4294967295
    ff8c:	647b      	str	r3, [r7, #68]	; 0x44
    ff8e:	f1b8 0f00 	cmp.w	r8, #0
    ff92:	f47e af9c 	bne.w	eece <__ssvfscanf_r+0x1fa>
    ff96:	f7fe bf9d 	b.w	eed4 <__ssvfscanf_r+0x200>
    ff9a:	4878      	ldr	r0, [pc, #480]	; (1017c <__ssvfscanf_r+0x14a8>)
    ff9c:	633b      	str	r3, [r7, #48]	; 0x30
    ff9e:	f7fb fde7 	bl	bb70 <nanf>
    ffa2:	ed84 0a00 	vstr	s0, [r4]
    ffa6:	e4ad      	b.n	f904 <__ssvfscanf_r+0xc30>
    ffa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ffaa:	63fc      	str	r4, [r7, #60]	; 0x3c
    ffac:	f852 5b04 	ldr.w	r5, [r2], #4
    ffb0:	633a      	str	r2, [r7, #48]	; 0x30
    ffb2:	64bc      	str	r4, [r7, #72]	; 0x48
    ffb4:	e46c      	b.n	f890 <__ssvfscanf_r+0xbbc>
    ffb6:	b082      	sub	sp, #8
    ffb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ffbc:	ab02      	add	r3, sp, #8
    ffbe:	643b      	str	r3, [r7, #64]	; 0x40
    ffc0:	e612      	b.n	fbe8 <__ssvfscanf_r+0xf14>
    ffc2:	637b      	str	r3, [r7, #52]	; 0x34
    ffc4:	0053      	lsls	r3, r2, #1
    ffc6:	4620      	mov	r0, r4
    ffc8:	4619      	mov	r1, r3
    ffca:	63fb      	str	r3, [r7, #60]	; 0x3c
    ffcc:	f7f9 fda6 	bl	9b1c <realloc>
    ffd0:	4604      	mov	r4, r0
    ffd2:	2800      	cmp	r0, #0
    ffd4:	f000 80ad 	beq.w	10132 <__ssvfscanf_r+0x145e>
    ffd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ffda:	1985      	adds	r5, r0, r6
    ffdc:	6018      	str	r0, [r3, #0]
    ffde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffe0:	e475      	b.n	f8ce <__ssvfscanf_r+0xbfa>
    ffe2:	697d      	ldr	r5, [r7, #20]
    ffe4:	4629      	mov	r1, r5
    ffe6:	230a      	movs	r3, #10
    ffe8:	3101      	adds	r1, #1
    ffea:	4648      	mov	r0, r9
    ffec:	f7fa ff70 	bl	aed0 <_strtol_r>
    fff0:	69bb      	ldr	r3, [r7, #24]
    fff2:	1ac2      	subs	r2, r0, r3
    fff4:	e59d      	b.n	fb32 <__ssvfscanf_r+0xe5e>
    fff6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
    fffa:	f853 1b04 	ldr.w	r1, [r3], #4
    fffe:	623a      	str	r2, [r7, #32]
   10000:	64b9      	str	r1, [r7, #72]	; 0x48
   10002:	633b      	str	r3, [r7, #48]	; 0x30
   10004:	62ba      	str	r2, [r7, #40]	; 0x28
   10006:	63fa      	str	r2, [r7, #60]	; 0x3c
   10008:	f7ff b9b2 	b.w	f370 <__ssvfscanf_r+0x69c>
   1000c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1000e:	64bc      	str	r4, [r7, #72]	; 0x48
   10010:	f853 5b04 	ldr.w	r5, [r3], #4
   10014:	633b      	str	r3, [r7, #48]	; 0x30
   10016:	e4aa      	b.n	f96e <__ssvfscanf_r+0xc9a>
   10018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1001a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1001c:	f853 4b04 	ldr.w	r4, [r3], #4
   10020:	61ba      	str	r2, [r7, #24]
   10022:	e9c7 2207 	strd	r2, r2, [r7, #28]
   10026:	633b      	str	r3, [r7, #48]	; 0x30
   10028:	f7ff ba2a 	b.w	f480 <__ssvfscanf_r+0x7ac>
   1002c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1002e:	6820      	ldr	r0, [r4, #0]
   10030:	f7f9 fd74 	bl	9b1c <realloc>
   10034:	2800      	cmp	r0, #0
   10036:	f47f aab3 	bne.w	f5a0 <__ssvfscanf_r+0x8cc>
   1003a:	e463      	b.n	f904 <__ssvfscanf_r+0xc30>
   1003c:	4659      	mov	r1, fp
   1003e:	4648      	mov	r0, r9
   10040:	637b      	str	r3, [r7, #52]	; 0x34
   10042:	f001 fff1 	bl	12028 <__ssrefill_r>
   10046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10048:	2800      	cmp	r0, #0
   1004a:	f43f ac49 	beq.w	f8e0 <__ssvfscanf_r+0xc0c>
   1004e:	e44d      	b.n	f8ec <__ssvfscanf_r+0xc18>
   10050:	6818      	ldr	r0, [r3, #0]
   10052:	461c      	mov	r4, r3
   10054:	f7f9 fd62 	bl	9b1c <realloc>
   10058:	2800      	cmp	r0, #0
   1005a:	f43f accc 	beq.w	f9f6 <__ssvfscanf_r+0xd22>
   1005e:	6020      	str	r0, [r4, #0]
   10060:	e4c9      	b.n	f9f6 <__ssvfscanf_r+0xd22>
   10062:	2500      	movs	r5, #0
   10064:	e637      	b.n	fcd6 <__ssvfscanf_r+0x1002>
   10066:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10068:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1006c:	627e      	str	r6, [r7, #36]	; 0x24
   1006e:	4644      	mov	r4, r8
   10070:	2d00      	cmp	r5, #0
   10072:	f43f aa7c 	beq.w	f56e <__ssvfscanf_r+0x89a>
   10076:	3d01      	subs	r5, #1
   10078:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1007c:	465a      	mov	r2, fp
   1007e:	5d59      	ldrb	r1, [r3, r5]
   10080:	4648      	mov	r0, r9
   10082:	f001 ff91 	bl	11fa8 <_sungetc_r>
   10086:	2d00      	cmp	r5, #0
   10088:	d1f5      	bne.n	10076 <__ssvfscanf_r+0x13a2>
   1008a:	f7ff ba70 	b.w	f56e <__ssvfscanf_r+0x89a>
   1008e:	4659      	mov	r1, fp
   10090:	4648      	mov	r0, r9
   10092:	f001 ffc9 	bl	12028 <__ssrefill_r>
   10096:	2800      	cmp	r0, #0
   10098:	f43f ae22 	beq.w	fce0 <__ssvfscanf_r+0x100c>
   1009c:	627c      	str	r4, [r7, #36]	; 0x24
   1009e:	2d00      	cmp	r5, #0
   100a0:	f47e af04 	bne.w	eeac <__ssvfscanf_r+0x1d8>
   100a4:	e628      	b.n	fcf8 <__ssvfscanf_r+0x1024>
   100a6:	627c      	str	r4, [r7, #36]	; 0x24
   100a8:	2d00      	cmp	r5, #0
   100aa:	f43f ae25 	beq.w	fcf8 <__ssvfscanf_r+0x1024>
   100ae:	3d01      	subs	r5, #1
   100b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   100b4:	465a      	mov	r2, fp
   100b6:	5d59      	ldrb	r1, [r3, r5]
   100b8:	4648      	mov	r0, r9
   100ba:	f001 ff75 	bl	11fa8 <_sungetc_r>
   100be:	2d00      	cmp	r5, #0
   100c0:	d1f5      	bne.n	100ae <__ssvfscanf_r+0x13da>
   100c2:	e619      	b.n	fcf8 <__ssvfscanf_r+0x1024>
   100c4:	07e5      	lsls	r5, r4, #31
   100c6:	d43c      	bmi.n	10142 <__ssvfscanf_r+0x146e>
   100c8:	07a4      	lsls	r4, r4, #30
   100ca:	d53a      	bpl.n	10142 <__ssvfscanf_r+0x146e>
   100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   100ce:	64f9      	str	r1, [r7, #76]	; 0x4c
   100d0:	f853 2b04 	ldr.w	r2, [r3], #4
   100d4:	633b      	str	r3, [r7, #48]	; 0x30
   100d6:	ea4f 73ea 	mov.w	r3, sl, asr #31
   100da:	f8c2 a000 	str.w	sl, [r2]
   100de:	6053      	str	r3, [r2, #4]
   100e0:	f7fe be1f 	b.w	ed22 <__ssvfscanf_r+0x4e>
   100e4:	ee18 9a10 	vmov	r9, s16
   100e8:	461e      	mov	r6, r3
   100ea:	f7ff b814 	b.w	f116 <__ssvfscanf_r+0x442>
   100ee:	2301      	movs	r3, #1
   100f0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   100f4:	64bb      	str	r3, [r7, #72]	; 0x48
   100f6:	f7fe bff6 	b.w	f0e6 <__ssvfscanf_r+0x412>
   100fa:	f1b8 0f01 	cmp.w	r8, #1
   100fe:	bf38      	it	cc
   10100:	f04f 0801 	movcc.w	r8, #1
   10104:	f014 0301 	ands.w	r3, r4, #1
   10108:	d13a      	bne.n	10180 <__ssvfscanf_r+0x14ac>
   1010a:	06e5      	lsls	r5, r4, #27
   1010c:	f100 8136 	bmi.w	1037c <__ssvfscanf_r+0x16a8>
   10110:	0624      	lsls	r4, r4, #24
   10112:	f140 814c 	bpl.w	103ae <__ssvfscanf_r+0x16da>
   10116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10118:	f853 5b04 	ldr.w	r5, [r3], #4
   1011c:	64bb      	str	r3, [r7, #72]	; 0x48
   1011e:	2d00      	cmp	r5, #0
   10120:	f43e aecd 	beq.w	eebe <__ssvfscanf_r+0x1ea>
   10124:	4640      	mov	r0, r8
   10126:	f7f9 fa2d 	bl	9584 <malloc>
   1012a:	4603      	mov	r3, r0
   1012c:	2800      	cmp	r0, #0
   1012e:	f040 80dc 	bne.w	102ea <__ssvfscanf_r+0x1616>
   10132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10134:	2b00      	cmp	r3, #0
   10136:	f000 8081 	beq.w	1023c <__ssvfscanf_r+0x1568>
   1013a:	f8d3 8000 	ldr.w	r8, [r3]
   1013e:	88de      	ldrh	r6, [r3, #6]
   10140:	e712      	b.n	ff68 <__ssvfscanf_r+0x1294>
   10142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10144:	64f9      	str	r1, [r7, #76]	; 0x4c
   10146:	f853 2b04 	ldr.w	r2, [r3], #4
   1014a:	f8c2 a000 	str.w	sl, [r2]
   1014e:	633b      	str	r3, [r7, #48]	; 0x30
   10150:	f7fe bde7 	b.w	ed22 <__ssvfscanf_r+0x4e>
   10154:	462b      	mov	r3, r5
   10156:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10158:	42ab      	cmp	r3, r5
   1015a:	f67e aeb0 	bls.w	eebe <__ssvfscanf_r+0x1ea>
   1015e:	461c      	mov	r4, r3
   10160:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10164:	465a      	mov	r2, fp
   10166:	4648      	mov	r0, r9
   10168:	f001 ff1e 	bl	11fa8 <_sungetc_r>
   1016c:	42ac      	cmp	r4, r5
   1016e:	d1f7      	bne.n	10160 <__ssvfscanf_r+0x148c>
   10170:	f7fe bea5 	b.w	eebe <__ssvfscanf_r+0x1ea>
   10174:	000118ed 	.word	0x000118ed
   10178:	20000c29 	.word	0x20000c29
   1017c:	200081a8 	.word	0x200081a8
   10180:	f014 0310 	ands.w	r3, r4, #16
   10184:	637b      	str	r3, [r7, #52]	; 0x34
   10186:	d05e      	beq.n	10246 <__ssvfscanf_r+0x1572>
   10188:	2500      	movs	r5, #0
   1018a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1018c:	64bd      	str	r5, [r7, #72]	; 0x48
   1018e:	462e      	mov	r6, r5
   10190:	2400      	movs	r4, #0
   10192:	464b      	mov	r3, r9
   10194:	46c1      	mov	r9, r8
   10196:	46a8      	mov	r8, r5
   10198:	4625      	mov	r5, r4
   1019a:	461c      	mov	r4, r3
   1019c:	f7fb f9f4 	bl	b588 <__locale_mb_cur_max>
   101a0:	42a8      	cmp	r0, r5
   101a2:	f43e ae83 	beq.w	eeac <__ssvfscanf_r+0x1d8>
   101a6:	e9db 3200 	ldrd	r3, r2, [fp]
   101aa:	f813 1b01 	ldrb.w	r1, [r3], #1
   101ae:	3a01      	subs	r2, #1
   101b0:	e9cb 3200 	strd	r3, r2, [fp]
   101b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   101b6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   101ba:	2a03      	cmp	r2, #3
   101bc:	5541      	strb	r1, [r0, r5]
   101be:	f105 0301 	add.w	r3, r5, #1
   101c2:	f107 0568 	add.w	r5, r7, #104	; 0x68
   101c6:	d102      	bne.n	101ce <__ssvfscanf_r+0x14fa>
   101c8:	682a      	ldr	r2, [r5, #0]
   101ca:	2a04      	cmp	r2, #4
   101cc:	d006      	beq.n	101dc <__ssvfscanf_r+0x1508>
   101ce:	2208      	movs	r2, #8
   101d0:	2100      	movs	r1, #0
   101d2:	4628      	mov	r0, r5
   101d4:	62bb      	str	r3, [r7, #40]	; 0x28
   101d6:	f7fb f90d 	bl	b3f4 <memset>
   101da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   101dc:	9500      	str	r5, [sp, #0]
   101de:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   101e2:	4631      	mov	r1, r6
   101e4:	4620      	mov	r0, r4
   101e6:	62bb      	str	r3, [r7, #40]	; 0x28
   101e8:	f001 fd0a 	bl	11c00 <_mbrtowc_r>
   101ec:	1c43      	adds	r3, r0, #1
   101ee:	6278      	str	r0, [r7, #36]	; 0x24
   101f0:	f43e ae5c 	beq.w	eeac <__ssvfscanf_r+0x1d8>
   101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   101f6:	2800      	cmp	r0, #0
   101f8:	f040 8147 	bne.w	1048a <__ssvfscanf_r+0x17b6>
   101fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   101fe:	b902      	cbnz	r2, 10202 <__ssvfscanf_r+0x152e>
   10200:	6032      	str	r2, [r6, #0]
   10202:	449a      	add	sl, r3
   10204:	f109 39ff 	add.w	r9, r9, #4294967295
   10208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1020a:	2b00      	cmp	r3, #0
   1020c:	f040 8175 	bne.w	104fa <__ssvfscanf_r+0x1826>
   10210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10212:	2b00      	cmp	r3, #0
   10214:	f000 8170 	beq.w	104f8 <__ssvfscanf_r+0x1824>
   10218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1021a:	1af5      	subs	r5, r6, r3
   1021c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   10220:	f200 816a 	bhi.w	104f8 <__ssvfscanf_r+0x1824>
   10224:	4618      	mov	r0, r3
   10226:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1022a:	f7f9 fc77 	bl	9b1c <realloc>
   1022e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10230:	2800      	cmp	r0, #0
   10232:	f040 815c 	bne.w	104ee <__ssvfscanf_r+0x181a>
   10236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10238:	2b00      	cmp	r3, #0
   1023a:	d12d      	bne.n	10298 <__ssvfscanf_r+0x15c4>
   1023c:	f04f 33ff 	mov.w	r3, #4294967295
   10240:	647b      	str	r3, [r7, #68]	; 0x44
   10242:	f7fe be47 	b.w	eed4 <__ssvfscanf_r+0x200>
   10246:	0622      	lsls	r2, r4, #24
   10248:	f140 808f 	bpl.w	1036a <__ssvfscanf_r+0x1696>
   1024c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1024e:	f854 3b04 	ldr.w	r3, [r4], #4
   10252:	64bb      	str	r3, [r7, #72]	; 0x48
   10254:	2b00      	cmp	r3, #0
   10256:	f43e ae32 	beq.w	eebe <__ssvfscanf_r+0x1ea>
   1025a:	2080      	movs	r0, #128	; 0x80
   1025c:	f7f9 f992 	bl	9584 <malloc>
   10260:	4606      	mov	r6, r0
   10262:	2800      	cmp	r0, #0
   10264:	d0e7      	beq.n	10236 <__ssvfscanf_r+0x1562>
   10266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10268:	6018      	str	r0, [r3, #0]
   1026a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1026c:	88dd      	ldrh	r5, [r3, #6]
   1026e:	889a      	ldrh	r2, [r3, #4]
   10270:	4295      	cmp	r5, r2
   10272:	f0c0 80b3 	bcc.w	103dc <__ssvfscanf_r+0x1708>
   10276:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1027a:	428a      	cmp	r2, r1
   1027c:	d856      	bhi.n	1032c <__ssvfscanf_r+0x1658>
   1027e:	3208      	adds	r2, #8
   10280:	b293      	uxth	r3, r2
   10282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10284:	63fb      	str	r3, [r7, #60]	; 0x3c
   10286:	0099      	lsls	r1, r3, #2
   10288:	6810      	ldr	r0, [r2, #0]
   1028a:	f7f9 fc47 	bl	9b1c <realloc>
   1028e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10290:	2800      	cmp	r0, #0
   10292:	f040 80ae 	bne.w	103f2 <__ssvfscanf_r+0x171e>
   10296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10298:	88db      	ldrh	r3, [r3, #6]
   1029a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1029c:	461e      	mov	r6, r3
   1029e:	f8d2 8000 	ldr.w	r8, [r2]
   102a2:	e661      	b.n	ff68 <__ssvfscanf_r+0x1294>
   102a4:	462b      	mov	r3, r5
   102a6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   102a8:	42ab      	cmp	r3, r5
   102aa:	f67e ae08 	bls.w	eebe <__ssvfscanf_r+0x1ea>
   102ae:	461c      	mov	r4, r3
   102b0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   102b4:	465a      	mov	r2, fp
   102b6:	4648      	mov	r0, r9
   102b8:	f001 fe76 	bl	11fa8 <_sungetc_r>
   102bc:	42ac      	cmp	r4, r5
   102be:	d1f7      	bne.n	102b0 <__ssvfscanf_r+0x15dc>
   102c0:	f7fe bdfd 	b.w	eebe <__ssvfscanf_r+0x1ea>
   102c4:	4610      	mov	r0, r2
   102c6:	00d9      	lsls	r1, r3, #3
   102c8:	461e      	mov	r6, r3
   102ca:	f7f9 fc27 	bl	9b1c <realloc>
   102ce:	62b8      	str	r0, [r7, #40]	; 0x28
   102d0:	2800      	cmp	r0, #0
   102d2:	d0b0      	beq.n	10236 <__ssvfscanf_r+0x1562>
   102d4:	1942      	adds	r2, r0, r5
   102d6:	64ba      	str	r2, [r7, #72]	; 0x48
   102d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   102da:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   102dc:	6010      	str	r0, [r2, #0]
   102de:	0073      	lsls	r3, r6, #1
   102e0:	623b      	str	r3, [r7, #32]
   102e2:	e4f8      	b.n	fcd6 <__ssvfscanf_r+0x1002>
   102e4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   102e8:	e63e      	b.n	ff68 <__ssvfscanf_r+0x1294>
   102ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
   102ec:	6028      	str	r0, [r5, #0]
   102ee:	88ce      	ldrh	r6, [r1, #6]
   102f0:	888a      	ldrh	r2, [r1, #4]
   102f2:	4296      	cmp	r6, r2
   102f4:	f0c0 808e 	bcc.w	10414 <__ssvfscanf_r+0x1740>
   102f8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   102fc:	428a      	cmp	r2, r1
   102fe:	6338      	str	r0, [r7, #48]	; 0x30
   10300:	f240 80a5 	bls.w	1044e <__ssvfscanf_r+0x177a>
   10304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10306:	f8d3 8000 	ldr.w	r8, [r3]
   1030a:	e62d      	b.n	ff68 <__ssvfscanf_r+0x1294>
   1030c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1030e:	4295      	cmp	r5, r2
   10310:	f67e add5 	bls.w	eebe <__ssvfscanf_r+0x1ea>
   10314:	462c      	mov	r4, r5
   10316:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10318:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1031c:	465a      	mov	r2, fp
   1031e:	4648      	mov	r0, r9
   10320:	f001 fe42 	bl	11fa8 <_sungetc_r>
   10324:	42ac      	cmp	r4, r5
   10326:	d1f7      	bne.n	10318 <__ssvfscanf_r+0x1644>
   10328:	f7fe bdc9 	b.w	eebe <__ssvfscanf_r+0x1ea>
   1032c:	462b      	mov	r3, r5
   1032e:	e7b4      	b.n	1029a <__ssvfscanf_r+0x15c6>
   10330:	f001 fc64 	bl	11bfc <_strtoull_r>
   10334:	e5c1      	b.n	feba <__ssvfscanf_r+0x11e6>
   10336:	f8d8 3000 	ldr.w	r3, [r8]
   1033a:	461d      	mov	r5, r3
   1033c:	3301      	adds	r3, #1
   1033e:	f47f a8d5 	bne.w	f4ec <__ssvfscanf_r+0x818>
   10342:	462a      	mov	r2, r5
   10344:	f7ff b8e8 	b.w	f518 <__ssvfscanf_r+0x844>
   10348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1034a:	6818      	ldr	r0, [r3, #0]
   1034c:	f001 fcb4 	bl	11cb8 <iswspace>
   10350:	2800      	cmp	r0, #0
   10352:	f47f aea8 	bne.w	100a6 <__ssvfscanf_r+0x13d2>
   10356:	2c03      	cmp	r4, #3
   10358:	44aa      	add	sl, r5
   1035a:	f47f a849 	bne.w	f3f0 <__ssvfscanf_r+0x71c>
   1035e:	6833      	ldr	r3, [r6, #0]
   10360:	2b04      	cmp	r3, #4
   10362:	f47f a845 	bne.w	f3f0 <__ssvfscanf_r+0x71c>
   10366:	f7ff b845 	b.w	f3f4 <__ssvfscanf_r+0x720>
   1036a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1036e:	f853 6b04 	ldr.w	r6, [r3], #4
   10372:	633b      	str	r3, [r7, #48]	; 0x30
   10374:	4615      	mov	r5, r2
   10376:	63fa      	str	r2, [r7, #60]	; 0x3c
   10378:	64ba      	str	r2, [r7, #72]	; 0x48
   1037a:	e709      	b.n	10190 <__ssvfscanf_r+0x14bc>
   1037c:	461c      	mov	r4, r3
   1037e:	f8db 3004 	ldr.w	r3, [fp, #4]
   10382:	4598      	cmp	r8, r3
   10384:	dd39      	ble.n	103fa <__ssvfscanf_r+0x1726>
   10386:	f8db 2000 	ldr.w	r2, [fp]
   1038a:	441a      	add	r2, r3
   1038c:	f8cb 2000 	str.w	r2, [fp]
   10390:	4659      	mov	r1, fp
   10392:	4648      	mov	r0, r9
   10394:	441c      	add	r4, r3
   10396:	eba8 0803 	sub.w	r8, r8, r3
   1039a:	f001 fe45 	bl	12028 <__ssrefill_r>
   1039e:	2800      	cmp	r0, #0
   103a0:	d0ed      	beq.n	1037e <__ssvfscanf_r+0x16aa>
   103a2:	2c00      	cmp	r4, #0
   103a4:	f43e ad82 	beq.w	eeac <__ssvfscanf_r+0x1d8>
   103a8:	44a2      	add	sl, r4
   103aa:	f7fe bcba 	b.w	ed22 <__ssvfscanf_r+0x4e>
   103ae:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   103b0:	4643      	mov	r3, r8
   103b2:	6829      	ldr	r1, [r5, #0]
   103b4:	f8cd b000 	str.w	fp, [sp]
   103b8:	2201      	movs	r2, #1
   103ba:	4648      	mov	r0, r9
   103bc:	f001 fe52 	bl	12064 <_sfread_r>
   103c0:	4604      	mov	r4, r0
   103c2:	2800      	cmp	r0, #0
   103c4:	f43e ad72 	beq.w	eeac <__ssvfscanf_r+0x1d8>
   103c8:	3504      	adds	r5, #4
   103ca:	64bd      	str	r5, [r7, #72]	; 0x48
   103cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   103ce:	3301      	adds	r3, #1
   103d0:	647b      	str	r3, [r7, #68]	; 0x44
   103d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   103d4:	633b      	str	r3, [r7, #48]	; 0x30
   103d6:	44a2      	add	sl, r4
   103d8:	f7fe bca3 	b.w	ed22 <__ssvfscanf_r+0x4e>
   103dc:	6818      	ldr	r0, [r3, #0]
   103de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   103e0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   103e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   103e6:	633c      	str	r4, [r7, #48]	; 0x30
   103e8:	3501      	adds	r5, #1
   103ea:	80dd      	strh	r5, [r3, #6]
   103ec:	63fe      	str	r6, [r7, #60]	; 0x3c
   103ee:	2520      	movs	r5, #32
   103f0:	e6ce      	b.n	10190 <__ssvfscanf_r+0x14bc>
   103f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   103f4:	8093      	strh	r3, [r2, #4]
   103f6:	6010      	str	r0, [r2, #0]
   103f8:	e7f1      	b.n	103de <__ssvfscanf_r+0x170a>
   103fa:	eba3 0308 	sub.w	r3, r3, r8
   103fe:	f8cb 3004 	str.w	r3, [fp, #4]
   10402:	f8db 3000 	ldr.w	r3, [fp]
   10406:	4444      	add	r4, r8
   10408:	4443      	add	r3, r8
   1040a:	f8cb 3000 	str.w	r3, [fp]
   1040e:	44a2      	add	sl, r4
   10410:	f7fe bc87 	b.w	ed22 <__ssvfscanf_r+0x4e>
   10414:	680a      	ldr	r2, [r1, #0]
   10416:	63fa      	str	r2, [r7, #60]	; 0x3c
   10418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1041a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1041e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10420:	3601      	adds	r6, #1
   10422:	b2b6      	uxth	r6, r6
   10424:	80d6      	strh	r6, [r2, #6]
   10426:	4619      	mov	r1, r3
   10428:	f8cd b000 	str.w	fp, [sp]
   1042c:	4643      	mov	r3, r8
   1042e:	2201      	movs	r2, #1
   10430:	4648      	mov	r0, r9
   10432:	f001 fe17 	bl	12064 <_sfread_r>
   10436:	4604      	mov	r4, r0
   10438:	b1d8      	cbz	r0, 10472 <__ssvfscanf_r+0x179e>
   1043a:	4580      	cmp	r8, r0
   1043c:	d9c6      	bls.n	103cc <__ssvfscanf_r+0x16f8>
   1043e:	6828      	ldr	r0, [r5, #0]
   10440:	4621      	mov	r1, r4
   10442:	f7f9 fb6b 	bl	9b1c <realloc>
   10446:	2800      	cmp	r0, #0
   10448:	d0c0      	beq.n	103cc <__ssvfscanf_r+0x16f8>
   1044a:	6028      	str	r0, [r5, #0]
   1044c:	e7be      	b.n	103cc <__ssvfscanf_r+0x16f8>
   1044e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10450:	3208      	adds	r2, #8
   10452:	b294      	uxth	r4, r2
   10454:	681a      	ldr	r2, [r3, #0]
   10456:	637a      	str	r2, [r7, #52]	; 0x34
   10458:	4610      	mov	r0, r2
   1045a:	00a1      	lsls	r1, r4, #2
   1045c:	f7f9 fb5e 	bl	9b1c <realloc>
   10460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10462:	63f8      	str	r0, [r7, #60]	; 0x3c
   10464:	2800      	cmp	r0, #0
   10466:	d05b      	beq.n	10520 <__ssvfscanf_r+0x184c>
   10468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1046a:	809c      	strh	r4, [r3, #4]
   1046c:	6018      	str	r0, [r3, #0]
   1046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10470:	e7d2      	b.n	10418 <__ssvfscanf_r+0x1744>
   10472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10474:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10478:	2b00      	cmp	r3, #0
   1047a:	f43f ad75 	beq.w	ff68 <__ssvfscanf_r+0x1294>
   1047e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10482:	065b      	lsls	r3, r3, #25
   10484:	f57e ad1d 	bpl.w	eec2 <__ssvfscanf_r+0x1ee>
   10488:	e56a      	b.n	ff60 <__ssvfscanf_r+0x128c>
   1048a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1048c:	3202      	adds	r2, #2
   1048e:	d11d      	bne.n	104cc <__ssvfscanf_r+0x17f8>
   10490:	f8db 2004 	ldr.w	r2, [fp, #4]
   10494:	2a00      	cmp	r2, #0
   10496:	461d      	mov	r5, r3
   10498:	f73f ae80 	bgt.w	1019c <__ssvfscanf_r+0x14c8>
   1049c:	4659      	mov	r1, fp
   1049e:	4620      	mov	r0, r4
   104a0:	f001 fdc2 	bl	12028 <__ssrefill_r>
   104a4:	b9e0      	cbnz	r0, 104e0 <__ssvfscanf_r+0x180c>
   104a6:	f1b9 0f00 	cmp.w	r9, #0
   104aa:	f47f ae77 	bne.w	1019c <__ssvfscanf_r+0x14c8>
   104ae:	4645      	mov	r5, r8
   104b0:	46a1      	mov	r9, r4
   104b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   104b4:	b123      	cbz	r3, 104c0 <__ssvfscanf_r+0x17ec>
   104b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   104b8:	1af1      	subs	r1, r6, r3
   104ba:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   104be:	d827      	bhi.n	10510 <__ssvfscanf_r+0x183c>
   104c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104c2:	2b00      	cmp	r3, #0
   104c4:	f47e ac2d 	bne.w	ed22 <__ssvfscanf_r+0x4e>
   104c8:	f7ff ba1c 	b.w	f904 <__ssvfscanf_r+0xc30>
   104cc:	449a      	add	sl, r3
   104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104d0:	2b03      	cmp	r3, #3
   104d2:	f47f ae97 	bne.w	10204 <__ssvfscanf_r+0x1530>
   104d6:	682b      	ldr	r3, [r5, #0]
   104d8:	2b04      	cmp	r3, #4
   104da:	f47f ae93 	bne.w	10204 <__ssvfscanf_r+0x1530>
   104de:	e693      	b.n	10208 <__ssvfscanf_r+0x1534>
   104e0:	46a1      	mov	r9, r4
   104e2:	462c      	mov	r4, r5
   104e4:	4645      	mov	r5, r8
   104e6:	2c00      	cmp	r4, #0
   104e8:	d0e3      	beq.n	104b2 <__ssvfscanf_r+0x17de>
   104ea:	f7fe bcdf 	b.w	eeac <__ssvfscanf_r+0x1d8>
   104ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
   104f0:	1946      	adds	r6, r0, r5
   104f2:	6010      	str	r0, [r2, #0]
   104f4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   104f8:	3604      	adds	r6, #4
   104fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   104fe:	2b00      	cmp	r3, #0
   10500:	f04f 0500 	mov.w	r5, #0
   10504:	ddca      	ble.n	1049c <__ssvfscanf_r+0x17c8>
   10506:	f1b9 0f00 	cmp.w	r9, #0
   1050a:	f47f ae47 	bne.w	1019c <__ssvfscanf_r+0x14c8>
   1050e:	e7ce      	b.n	104ae <__ssvfscanf_r+0x17da>
   10510:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   10512:	6820      	ldr	r0, [r4, #0]
   10514:	f7f9 fb02 	bl	9b1c <realloc>
   10518:	2800      	cmp	r0, #0
   1051a:	d0d1      	beq.n	104c0 <__ssvfscanf_r+0x17ec>
   1051c:	6020      	str	r0, [r4, #0]
   1051e:	e7cf      	b.n	104c0 <__ssvfscanf_r+0x17ec>
   10520:	4690      	mov	r8, r2
   10522:	e521      	b.n	ff68 <__ssvfscanf_r+0x1294>

00010524 <_fclose_r>:
   10524:	b570      	push	{r4, r5, r6, lr}
   10526:	2900      	cmp	r1, #0
   10528:	d04b      	beq.n	105c2 <_fclose_r+0x9e>
   1052a:	4606      	mov	r6, r0
   1052c:	460c      	mov	r4, r1
   1052e:	b110      	cbz	r0, 10536 <_fclose_r+0x12>
   10530:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10532:	2b00      	cmp	r3, #0
   10534:	d048      	beq.n	105c8 <_fclose_r+0xa4>
   10536:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10538:	07d8      	lsls	r0, r3, #31
   1053a:	d534      	bpl.n	105a6 <_fclose_r+0x82>
   1053c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10540:	2b00      	cmp	r3, #0
   10542:	d03e      	beq.n	105c2 <_fclose_r+0x9e>
   10544:	4621      	mov	r1, r4
   10546:	4630      	mov	r0, r6
   10548:	f000 f850 	bl	105ec <__sflush_r>
   1054c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1054e:	4605      	mov	r5, r0
   10550:	b133      	cbz	r3, 10560 <_fclose_r+0x3c>
   10552:	69e1      	ldr	r1, [r4, #28]
   10554:	4630      	mov	r0, r6
   10556:	4798      	blx	r3
   10558:	2800      	cmp	r0, #0
   1055a:	bfb8      	it	lt
   1055c:	f04f 35ff 	movlt.w	r5, #4294967295
   10560:	89a3      	ldrh	r3, [r4, #12]
   10562:	061a      	lsls	r2, r3, #24
   10564:	d43c      	bmi.n	105e0 <_fclose_r+0xbc>
   10566:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10568:	b141      	cbz	r1, 1057c <_fclose_r+0x58>
   1056a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1056e:	4299      	cmp	r1, r3
   10570:	d002      	beq.n	10578 <_fclose_r+0x54>
   10572:	4630      	mov	r0, r6
   10574:	f7fb fb96 	bl	bca4 <_free_r>
   10578:	2300      	movs	r3, #0
   1057a:	6323      	str	r3, [r4, #48]	; 0x30
   1057c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1057e:	b121      	cbz	r1, 1058a <_fclose_r+0x66>
   10580:	4630      	mov	r0, r6
   10582:	f7fb fb8f 	bl	bca4 <_free_r>
   10586:	2300      	movs	r3, #0
   10588:	6463      	str	r3, [r4, #68]	; 0x44
   1058a:	f7fa fd5d 	bl	b048 <__sfp_lock_acquire>
   1058e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10590:	2200      	movs	r2, #0
   10592:	07db      	lsls	r3, r3, #31
   10594:	81a2      	strh	r2, [r4, #12]
   10596:	d51f      	bpl.n	105d8 <_fclose_r+0xb4>
   10598:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1059a:	f7fb f88d 	bl	b6b8 <__retarget_lock_close_recursive>
   1059e:	f7fa fd59 	bl	b054 <__sfp_lock_release>
   105a2:	4628      	mov	r0, r5
   105a4:	bd70      	pop	{r4, r5, r6, pc}
   105a6:	89a3      	ldrh	r3, [r4, #12]
   105a8:	0599      	lsls	r1, r3, #22
   105aa:	d4cb      	bmi.n	10544 <_fclose_r+0x20>
   105ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   105ae:	f7fb f885 	bl	b6bc <__retarget_lock_acquire_recursive>
   105b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   105b6:	2b00      	cmp	r3, #0
   105b8:	d1c4      	bne.n	10544 <_fclose_r+0x20>
   105ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
   105bc:	f015 0501 	ands.w	r5, r5, #1
   105c0:	d005      	beq.n	105ce <_fclose_r+0xaa>
   105c2:	2500      	movs	r5, #0
   105c4:	4628      	mov	r0, r5
   105c6:	bd70      	pop	{r4, r5, r6, pc}
   105c8:	f7fa fd20 	bl	b00c <__sinit>
   105cc:	e7b3      	b.n	10536 <_fclose_r+0x12>
   105ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
   105d0:	f7fb f876 	bl	b6c0 <__retarget_lock_release_recursive>
   105d4:	4628      	mov	r0, r5
   105d6:	bd70      	pop	{r4, r5, r6, pc}
   105d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   105da:	f7fb f871 	bl	b6c0 <__retarget_lock_release_recursive>
   105de:	e7db      	b.n	10598 <_fclose_r+0x74>
   105e0:	6921      	ldr	r1, [r4, #16]
   105e2:	4630      	mov	r0, r6
   105e4:	f7fb fb5e 	bl	bca4 <_free_r>
   105e8:	e7bd      	b.n	10566 <_fclose_r+0x42>
   105ea:	bf00      	nop

000105ec <__sflush_r>:
   105ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   105f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105f4:	460c      	mov	r4, r1
   105f6:	0711      	lsls	r1, r2, #28
   105f8:	4680      	mov	r8, r0
   105fa:	d447      	bmi.n	1068c <__sflush_r+0xa0>
   105fc:	6863      	ldr	r3, [r4, #4]
   105fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10602:	2b00      	cmp	r3, #0
   10604:	81a2      	strh	r2, [r4, #12]
   10606:	dd5e      	ble.n	106c6 <__sflush_r+0xda>
   10608:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1060a:	2d00      	cmp	r5, #0
   1060c:	d058      	beq.n	106c0 <__sflush_r+0xd4>
   1060e:	2300      	movs	r3, #0
   10610:	f8d8 6000 	ldr.w	r6, [r8]
   10614:	f8c8 3000 	str.w	r3, [r8]
   10618:	b293      	uxth	r3, r2
   1061a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1061e:	d156      	bne.n	106ce <__sflush_r+0xe2>
   10620:	2301      	movs	r3, #1
   10622:	69e1      	ldr	r1, [r4, #28]
   10624:	4640      	mov	r0, r8
   10626:	47a8      	blx	r5
   10628:	1c43      	adds	r3, r0, #1
   1062a:	d067      	beq.n	106fc <__sflush_r+0x110>
   1062c:	89a3      	ldrh	r3, [r4, #12]
   1062e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10630:	075f      	lsls	r7, r3, #29
   10632:	d505      	bpl.n	10640 <__sflush_r+0x54>
   10634:	6863      	ldr	r3, [r4, #4]
   10636:	1ac0      	subs	r0, r0, r3
   10638:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1063a:	b10b      	cbz	r3, 10640 <__sflush_r+0x54>
   1063c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1063e:	1ac0      	subs	r0, r0, r3
   10640:	69e1      	ldr	r1, [r4, #28]
   10642:	4602      	mov	r2, r0
   10644:	2300      	movs	r3, #0
   10646:	4640      	mov	r0, r8
   10648:	47a8      	blx	r5
   1064a:	1c41      	adds	r1, r0, #1
   1064c:	d141      	bne.n	106d2 <__sflush_r+0xe6>
   1064e:	f8d8 3000 	ldr.w	r3, [r8]
   10652:	2b00      	cmp	r3, #0
   10654:	d03d      	beq.n	106d2 <__sflush_r+0xe6>
   10656:	2b1d      	cmp	r3, #29
   10658:	d001      	beq.n	1065e <__sflush_r+0x72>
   1065a:	2b16      	cmp	r3, #22
   1065c:	d156      	bne.n	1070c <__sflush_r+0x120>
   1065e:	89a3      	ldrh	r3, [r4, #12]
   10660:	6922      	ldr	r2, [r4, #16]
   10662:	6022      	str	r2, [r4, #0]
   10664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10668:	2100      	movs	r1, #0
   1066a:	6061      	str	r1, [r4, #4]
   1066c:	81a3      	strh	r3, [r4, #12]
   1066e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10670:	f8c8 6000 	str.w	r6, [r8]
   10674:	b321      	cbz	r1, 106c0 <__sflush_r+0xd4>
   10676:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1067a:	4299      	cmp	r1, r3
   1067c:	d002      	beq.n	10684 <__sflush_r+0x98>
   1067e:	4640      	mov	r0, r8
   10680:	f7fb fb10 	bl	bca4 <_free_r>
   10684:	2000      	movs	r0, #0
   10686:	6320      	str	r0, [r4, #48]	; 0x30
   10688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1068c:	6926      	ldr	r6, [r4, #16]
   1068e:	b1be      	cbz	r6, 106c0 <__sflush_r+0xd4>
   10690:	b293      	uxth	r3, r2
   10692:	6825      	ldr	r5, [r4, #0]
   10694:	6026      	str	r6, [r4, #0]
   10696:	079a      	lsls	r2, r3, #30
   10698:	bf0c      	ite	eq
   1069a:	6963      	ldreq	r3, [r4, #20]
   1069c:	2300      	movne	r3, #0
   1069e:	1bad      	subs	r5, r5, r6
   106a0:	60a3      	str	r3, [r4, #8]
   106a2:	e00b      	b.n	106bc <__sflush_r+0xd0>
   106a4:	462b      	mov	r3, r5
   106a6:	4632      	mov	r2, r6
   106a8:	69e1      	ldr	r1, [r4, #28]
   106aa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   106ac:	4640      	mov	r0, r8
   106ae:	47b8      	blx	r7
   106b0:	f1b0 0c00 	subs.w	ip, r0, #0
   106b4:	eba5 050c 	sub.w	r5, r5, ip
   106b8:	4466      	add	r6, ip
   106ba:	dd17      	ble.n	106ec <__sflush_r+0x100>
   106bc:	2d00      	cmp	r5, #0
   106be:	dcf1      	bgt.n	106a4 <__sflush_r+0xb8>
   106c0:	2000      	movs	r0, #0
   106c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   106c8:	2b00      	cmp	r3, #0
   106ca:	dc9d      	bgt.n	10608 <__sflush_r+0x1c>
   106cc:	e7f8      	b.n	106c0 <__sflush_r+0xd4>
   106ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
   106d0:	e7ae      	b.n	10630 <__sflush_r+0x44>
   106d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   106d6:	6922      	ldr	r2, [r4, #16]
   106d8:	6022      	str	r2, [r4, #0]
   106da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   106de:	81a3      	strh	r3, [r4, #12]
   106e0:	2200      	movs	r2, #0
   106e2:	04db      	lsls	r3, r3, #19
   106e4:	6062      	str	r2, [r4, #4]
   106e6:	d5c2      	bpl.n	1066e <__sflush_r+0x82>
   106e8:	6520      	str	r0, [r4, #80]	; 0x50
   106ea:	e7c0      	b.n	1066e <__sflush_r+0x82>
   106ec:	89a3      	ldrh	r3, [r4, #12]
   106ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106f2:	f04f 30ff 	mov.w	r0, #4294967295
   106f6:	81a3      	strh	r3, [r4, #12]
   106f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106fc:	f8d8 3000 	ldr.w	r3, [r8]
   10700:	2b00      	cmp	r3, #0
   10702:	d093      	beq.n	1062c <__sflush_r+0x40>
   10704:	2b1d      	cmp	r3, #29
   10706:	d006      	beq.n	10716 <__sflush_r+0x12a>
   10708:	2b16      	cmp	r3, #22
   1070a:	d004      	beq.n	10716 <__sflush_r+0x12a>
   1070c:	89a3      	ldrh	r3, [r4, #12]
   1070e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10712:	81a3      	strh	r3, [r4, #12]
   10714:	e7d5      	b.n	106c2 <__sflush_r+0xd6>
   10716:	f8c8 6000 	str.w	r6, [r8]
   1071a:	e7d1      	b.n	106c0 <__sflush_r+0xd4>

0001071c <_fflush_r>:
   1071c:	b538      	push	{r3, r4, r5, lr}
   1071e:	460c      	mov	r4, r1
   10720:	4605      	mov	r5, r0
   10722:	b108      	cbz	r0, 10728 <_fflush_r+0xc>
   10724:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10726:	b303      	cbz	r3, 1076a <_fflush_r+0x4e>
   10728:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1072c:	b188      	cbz	r0, 10752 <_fflush_r+0x36>
   1072e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10730:	07db      	lsls	r3, r3, #31
   10732:	d401      	bmi.n	10738 <_fflush_r+0x1c>
   10734:	0581      	lsls	r1, r0, #22
   10736:	d50f      	bpl.n	10758 <_fflush_r+0x3c>
   10738:	4628      	mov	r0, r5
   1073a:	4621      	mov	r1, r4
   1073c:	f7ff ff56 	bl	105ec <__sflush_r>
   10740:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10742:	07da      	lsls	r2, r3, #31
   10744:	4605      	mov	r5, r0
   10746:	d402      	bmi.n	1074e <_fflush_r+0x32>
   10748:	89a3      	ldrh	r3, [r4, #12]
   1074a:	059b      	lsls	r3, r3, #22
   1074c:	d508      	bpl.n	10760 <_fflush_r+0x44>
   1074e:	4628      	mov	r0, r5
   10750:	bd38      	pop	{r3, r4, r5, pc}
   10752:	4605      	mov	r5, r0
   10754:	4628      	mov	r0, r5
   10756:	bd38      	pop	{r3, r4, r5, pc}
   10758:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1075a:	f7fa ffaf 	bl	b6bc <__retarget_lock_acquire_recursive>
   1075e:	e7eb      	b.n	10738 <_fflush_r+0x1c>
   10760:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10762:	f7fa ffad 	bl	b6c0 <__retarget_lock_release_recursive>
   10766:	4628      	mov	r0, r5
   10768:	bd38      	pop	{r3, r4, r5, pc}
   1076a:	f7fa fc4f 	bl	b00c <__sinit>
   1076e:	e7db      	b.n	10728 <_fflush_r+0xc>

00010770 <__sccl>:
   10770:	b570      	push	{r4, r5, r6, lr}
   10772:	780c      	ldrb	r4, [r1, #0]
   10774:	2c5e      	cmp	r4, #94	; 0x5e
   10776:	4686      	mov	lr, r0
   10778:	d01e      	beq.n	107b8 <__sccl+0x48>
   1077a:	2200      	movs	r2, #0
   1077c:	1c48      	adds	r0, r1, #1
   1077e:	4694      	mov	ip, r2
   10780:	f10e 33ff 	add.w	r3, lr, #4294967295
   10784:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10788:	f803 2f01 	strb.w	r2, [r3, #1]!
   1078c:	428b      	cmp	r3, r1
   1078e:	d1fb      	bne.n	10788 <__sccl+0x18>
   10790:	b184      	cbz	r4, 107b4 <__sccl+0x44>
   10792:	f08c 0101 	eor.w	r1, ip, #1
   10796:	f80e 1004 	strb.w	r1, [lr, r4]
   1079a:	1c45      	adds	r5, r0, #1
   1079c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   107a0:	2b2d      	cmp	r3, #45	; 0x2d
   107a2:	d00e      	beq.n	107c2 <__sccl+0x52>
   107a4:	2b5d      	cmp	r3, #93	; 0x5d
   107a6:	d003      	beq.n	107b0 <__sccl+0x40>
   107a8:	b11b      	cbz	r3, 107b2 <__sccl+0x42>
   107aa:	461c      	mov	r4, r3
   107ac:	4628      	mov	r0, r5
   107ae:	e7f2      	b.n	10796 <__sccl+0x26>
   107b0:	4628      	mov	r0, r5
   107b2:	bd70      	pop	{r4, r5, r6, pc}
   107b4:	3801      	subs	r0, #1
   107b6:	bd70      	pop	{r4, r5, r6, pc}
   107b8:	2201      	movs	r2, #1
   107ba:	784c      	ldrb	r4, [r1, #1]
   107bc:	1c88      	adds	r0, r1, #2
   107be:	4694      	mov	ip, r2
   107c0:	e7de      	b.n	10780 <__sccl+0x10>
   107c2:	f890 c001 	ldrb.w	ip, [r0, #1]
   107c6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   107ca:	d0ee      	beq.n	107aa <__sccl+0x3a>
   107cc:	4564      	cmp	r4, ip
   107ce:	dcec      	bgt.n	107aa <__sccl+0x3a>
   107d0:	1c66      	adds	r6, r4, #1
   107d2:	3002      	adds	r0, #2
   107d4:	eb0e 0206 	add.w	r2, lr, r6
   107d8:	f802 1b01 	strb.w	r1, [r2], #1
   107dc:	eba2 030e 	sub.w	r3, r2, lr
   107e0:	3b01      	subs	r3, #1
   107e2:	459c      	cmp	ip, r3
   107e4:	dcf8      	bgt.n	107d8 <__sccl+0x68>
   107e6:	ebac 0304 	sub.w	r3, ip, r4
   107ea:	3b01      	subs	r3, #1
   107ec:	4564      	cmp	r4, ip
   107ee:	bfa8      	it	ge
   107f0:	2300      	movge	r3, #0
   107f2:	3502      	adds	r5, #2
   107f4:	199c      	adds	r4, r3, r6
   107f6:	e7d1      	b.n	1079c <__sccl+0x2c>

000107f8 <stpncpy>:
   107f8:	ea41 0300 	orr.w	r3, r1, r0
   107fc:	079b      	lsls	r3, r3, #30
   107fe:	b430      	push	{r4, r5}
   10800:	d101      	bne.n	10806 <stpncpy+0xe>
   10802:	2a03      	cmp	r2, #3
   10804:	d80f      	bhi.n	10826 <stpncpy+0x2e>
   10806:	f101 3cff 	add.w	ip, r1, #4294967295
   1080a:	e007      	b.n	1081c <stpncpy+0x24>
   1080c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10810:	f803 1b01 	strb.w	r1, [r3], #1
   10814:	1e54      	subs	r4, r2, #1
   10816:	b1c1      	cbz	r1, 1084a <stpncpy+0x52>
   10818:	4622      	mov	r2, r4
   1081a:	4618      	mov	r0, r3
   1081c:	4603      	mov	r3, r0
   1081e:	2a00      	cmp	r2, #0
   10820:	d1f4      	bne.n	1080c <stpncpy+0x14>
   10822:	bc30      	pop	{r4, r5}
   10824:	4770      	bx	lr
   10826:	460b      	mov	r3, r1
   10828:	4619      	mov	r1, r3
   1082a:	f853 5b04 	ldr.w	r5, [r3], #4
   1082e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10832:	ea24 0405 	bic.w	r4, r4, r5
   10836:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1083a:	d1e4      	bne.n	10806 <stpncpy+0xe>
   1083c:	3a04      	subs	r2, #4
   1083e:	2a03      	cmp	r2, #3
   10840:	f840 5b04 	str.w	r5, [r0], #4
   10844:	4619      	mov	r1, r3
   10846:	d8ef      	bhi.n	10828 <stpncpy+0x30>
   10848:	e7dd      	b.n	10806 <stpncpy+0xe>
   1084a:	4402      	add	r2, r0
   1084c:	2c00      	cmp	r4, #0
   1084e:	d0e8      	beq.n	10822 <stpncpy+0x2a>
   10850:	f803 1b01 	strb.w	r1, [r3], #1
   10854:	4293      	cmp	r3, r2
   10856:	d1fb      	bne.n	10850 <stpncpy+0x58>
   10858:	bc30      	pop	{r4, r5}
   1085a:	4770      	bx	lr

0001085c <_localeconv_r>:
   1085c:	4800      	ldr	r0, [pc, #0]	; (10860 <_localeconv_r+0x4>)
   1085e:	4770      	bx	lr
   10860:	20008860 	.word	0x20008860
   10864:	00000000 	.word	0x00000000

00010868 <frexp>:
   10868:	b430      	push	{r4, r5}
   1086a:	b082      	sub	sp, #8
   1086c:	ed8d 0b00 	vstr	d0, [sp]
   10870:	9a01      	ldr	r2, [sp, #4]
   10872:	4c19      	ldr	r4, [pc, #100]	; (108d8 <frexp+0x70>)
   10874:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10878:	2100      	movs	r1, #0
   1087a:	42a3      	cmp	r3, r4
   1087c:	6001      	str	r1, [r0, #0]
   1087e:	dc21      	bgt.n	108c4 <frexp+0x5c>
   10880:	9c00      	ldr	r4, [sp, #0]
   10882:	431c      	orrs	r4, r3
   10884:	d01e      	beq.n	108c4 <frexp+0x5c>
   10886:	4c15      	ldr	r4, [pc, #84]	; (108dc <frexp+0x74>)
   10888:	4014      	ands	r4, r2
   1088a:	b954      	cbnz	r4, 108a2 <frexp+0x3a>
   1088c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 108d0 <frexp+0x68>
   10890:	ee20 7b07 	vmul.f64	d7, d0, d7
   10894:	ed8d 7b00 	vstr	d7, [sp]
   10898:	9a01      	ldr	r2, [sp, #4]
   1089a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1089e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   108a2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   108a6:	e9dd 4500 	ldrd	r4, r5, [sp]
   108aa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   108ae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   108b2:	151b      	asrs	r3, r3, #20
   108b4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   108b8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   108bc:	e9cd 4500 	strd	r4, r5, [sp]
   108c0:	440b      	add	r3, r1
   108c2:	6003      	str	r3, [r0, #0]
   108c4:	ed9d 0b00 	vldr	d0, [sp]
   108c8:	b002      	add	sp, #8
   108ca:	bc30      	pop	{r4, r5}
   108cc:	4770      	bx	lr
   108ce:	bf00      	nop
   108d0:	00000000 	.word	0x00000000
   108d4:	43500000 	.word	0x43500000
   108d8:	7fefffff 	.word	0x7fefffff
   108dc:	7ff00000 	.word	0x7ff00000

000108e0 <__assert_func>:
   108e0:	b500      	push	{lr}
   108e2:	4c0b      	ldr	r4, [pc, #44]	; (10910 <__assert_func+0x30>)
   108e4:	6825      	ldr	r5, [r4, #0]
   108e6:	4614      	mov	r4, r2
   108e8:	68ee      	ldr	r6, [r5, #12]
   108ea:	461a      	mov	r2, r3
   108ec:	b085      	sub	sp, #20
   108ee:	4603      	mov	r3, r0
   108f0:	460d      	mov	r5, r1
   108f2:	b14c      	cbz	r4, 10908 <__assert_func+0x28>
   108f4:	4907      	ldr	r1, [pc, #28]	; (10914 <__assert_func+0x34>)
   108f6:	9500      	str	r5, [sp, #0]
   108f8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   108fc:	4630      	mov	r0, r6
   108fe:	4906      	ldr	r1, [pc, #24]	; (10918 <__assert_func+0x38>)
   10900:	f001 fabe 	bl	11e80 <fiprintf>
   10904:	f7f7 fa9a 	bl	7e3c <abort>
   10908:	4904      	ldr	r1, [pc, #16]	; (1091c <__assert_func+0x3c>)
   1090a:	460c      	mov	r4, r1
   1090c:	e7f3      	b.n	108f6 <__assert_func+0x16>
   1090e:	bf00      	nop
   10910:	20008cf8 	.word	0x20008cf8
   10914:	20000a0c 	.word	0x20000a0c
   10918:	20000a1c 	.word	0x20000a1c
   1091c:	200081a8 	.word	0x200081a8

00010920 <_calloc_r>:
   10920:	b538      	push	{r3, r4, r5, lr}
   10922:	fba1 1402 	umull	r1, r4, r1, r2
   10926:	bb8c      	cbnz	r4, 1098c <_calloc_r+0x6c>
   10928:	f7f8 fe3c 	bl	95a4 <_malloc_r>
   1092c:	4605      	mov	r5, r0
   1092e:	b1e0      	cbz	r0, 1096a <_calloc_r+0x4a>
   10930:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10934:	f022 0203 	bic.w	r2, r2, #3
   10938:	3a04      	subs	r2, #4
   1093a:	2a24      	cmp	r2, #36	; 0x24
   1093c:	d817      	bhi.n	1096e <_calloc_r+0x4e>
   1093e:	2a13      	cmp	r2, #19
   10940:	d91a      	bls.n	10978 <_calloc_r+0x58>
   10942:	2a1b      	cmp	r2, #27
   10944:	e9c0 4400 	strd	r4, r4, [r0]
   10948:	d91d      	bls.n	10986 <_calloc_r+0x66>
   1094a:	2a24      	cmp	r2, #36	; 0x24
   1094c:	bf14      	ite	ne
   1094e:	f100 0210 	addne.w	r2, r0, #16
   10952:	f100 0218 	addeq.w	r2, r0, #24
   10956:	f04f 0300 	mov.w	r3, #0
   1095a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1095e:	bf04      	itt	eq
   10960:	6104      	streq	r4, [r0, #16]
   10962:	6144      	streq	r4, [r0, #20]
   10964:	e9c2 3300 	strd	r3, r3, [r2]
   10968:	6093      	str	r3, [r2, #8]
   1096a:	4628      	mov	r0, r5
   1096c:	bd38      	pop	{r3, r4, r5, pc}
   1096e:	4621      	mov	r1, r4
   10970:	f7fa fd40 	bl	b3f4 <memset>
   10974:	4628      	mov	r0, r5
   10976:	bd38      	pop	{r3, r4, r5, pc}
   10978:	4602      	mov	r2, r0
   1097a:	2300      	movs	r3, #0
   1097c:	e9c2 3300 	strd	r3, r3, [r2]
   10980:	6093      	str	r3, [r2, #8]
   10982:	4628      	mov	r0, r5
   10984:	bd38      	pop	{r3, r4, r5, pc}
   10986:	f100 0208 	add.w	r2, r0, #8
   1098a:	e7f6      	b.n	1097a <_calloc_r+0x5a>
   1098c:	f7fa fe68 	bl	b660 <__errno>
   10990:	230c      	movs	r3, #12
   10992:	2500      	movs	r5, #0
   10994:	6003      	str	r3, [r0, #0]
   10996:	e7e8      	b.n	1096a <_calloc_r+0x4a>

00010998 <quorem>:
   10998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1099c:	6903      	ldr	r3, [r0, #16]
   1099e:	690c      	ldr	r4, [r1, #16]
   109a0:	42a3      	cmp	r3, r4
   109a2:	b083      	sub	sp, #12
   109a4:	f2c0 8087 	blt.w	10ab6 <quorem+0x11e>
   109a8:	3c01      	subs	r4, #1
   109aa:	f101 0514 	add.w	r5, r1, #20
   109ae:	00a3      	lsls	r3, r4, #2
   109b0:	f100 0814 	add.w	r8, r0, #20
   109b4:	9300      	str	r3, [sp, #0]
   109b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   109ba:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   109be:	3301      	adds	r3, #1
   109c0:	4681      	mov	r9, r0
   109c2:	429a      	cmp	r2, r3
   109c4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   109c8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   109cc:	9001      	str	r0, [sp, #4]
   109ce:	fbb2 f6f3 	udiv	r6, r2, r3
   109d2:	d33b      	bcc.n	10a4c <quorem+0xb4>
   109d4:	f04f 0c00 	mov.w	ip, #0
   109d8:	46ae      	mov	lr, r5
   109da:	4640      	mov	r0, r8
   109dc:	46e2      	mov	sl, ip
   109de:	4663      	mov	r3, ip
   109e0:	f85e bb04 	ldr.w	fp, [lr], #4
   109e4:	6802      	ldr	r2, [r0, #0]
   109e6:	fa1f fc8b 	uxth.w	ip, fp
   109ea:	fb06 330c 	mla	r3, r6, ip, r3
   109ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   109f2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   109f6:	fb06 cc0b 	mla	ip, r6, fp, ip
   109fa:	b29b      	uxth	r3, r3
   109fc:	ebaa 0303 	sub.w	r3, sl, r3
   10a00:	fa1f fa8c 	uxth.w	sl, ip
   10a04:	fa13 f382 	uxtah	r3, r3, r2
   10a08:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   10a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10a10:	b29b      	uxth	r3, r3
   10a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10a16:	4577      	cmp	r7, lr
   10a18:	f840 3b04 	str.w	r3, [r0], #4
   10a1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   10a20:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10a24:	d2dc      	bcs.n	109e0 <quorem+0x48>
   10a26:	9b00      	ldr	r3, [sp, #0]
   10a28:	f858 3003 	ldr.w	r3, [r8, r3]
   10a2c:	b973      	cbnz	r3, 10a4c <quorem+0xb4>
   10a2e:	9b01      	ldr	r3, [sp, #4]
   10a30:	3b04      	subs	r3, #4
   10a32:	4598      	cmp	r8, r3
   10a34:	d304      	bcc.n	10a40 <quorem+0xa8>
   10a36:	e007      	b.n	10a48 <quorem+0xb0>
   10a38:	4598      	cmp	r8, r3
   10a3a:	f104 34ff 	add.w	r4, r4, #4294967295
   10a3e:	d203      	bcs.n	10a48 <quorem+0xb0>
   10a40:	f853 2904 	ldr.w	r2, [r3], #-4
   10a44:	2a00      	cmp	r2, #0
   10a46:	d0f7      	beq.n	10a38 <quorem+0xa0>
   10a48:	f8c9 4010 	str.w	r4, [r9, #16]
   10a4c:	4648      	mov	r0, r9
   10a4e:	f7fc f933 	bl	ccb8 <__mcmp>
   10a52:	2800      	cmp	r0, #0
   10a54:	db2b      	blt.n	10aae <quorem+0x116>
   10a56:	3601      	adds	r6, #1
   10a58:	4641      	mov	r1, r8
   10a5a:	2300      	movs	r3, #0
   10a5c:	f855 0b04 	ldr.w	r0, [r5], #4
   10a60:	f8d1 c000 	ldr.w	ip, [r1]
   10a64:	b282      	uxth	r2, r0
   10a66:	1a9a      	subs	r2, r3, r2
   10a68:	0c03      	lsrs	r3, r0, #16
   10a6a:	fa12 f28c 	uxtah	r2, r2, ip
   10a6e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10a72:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10a76:	b292      	uxth	r2, r2
   10a78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10a7c:	42af      	cmp	r7, r5
   10a7e:	f841 2b04 	str.w	r2, [r1], #4
   10a82:	ea4f 4323 	mov.w	r3, r3, asr #16
   10a86:	d2e9      	bcs.n	10a5c <quorem+0xc4>
   10a88:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10a8c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10a90:	b96a      	cbnz	r2, 10aae <quorem+0x116>
   10a92:	3b04      	subs	r3, #4
   10a94:	4598      	cmp	r8, r3
   10a96:	d304      	bcc.n	10aa2 <quorem+0x10a>
   10a98:	e007      	b.n	10aaa <quorem+0x112>
   10a9a:	4598      	cmp	r8, r3
   10a9c:	f104 34ff 	add.w	r4, r4, #4294967295
   10aa0:	d203      	bcs.n	10aaa <quorem+0x112>
   10aa2:	f853 2904 	ldr.w	r2, [r3], #-4
   10aa6:	2a00      	cmp	r2, #0
   10aa8:	d0f7      	beq.n	10a9a <quorem+0x102>
   10aaa:	f8c9 4010 	str.w	r4, [r9, #16]
   10aae:	4630      	mov	r0, r6
   10ab0:	b003      	add	sp, #12
   10ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ab6:	2000      	movs	r0, #0
   10ab8:	b003      	add	sp, #12
   10aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10abe:	bf00      	nop

00010ac0 <_dtoa_r>:
   10ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ac4:	ed2d 8b02 	vpush	{d8}
   10ac8:	b08f      	sub	sp, #60	; 0x3c
   10aca:	ed8d 0b02 	vstr	d0, [sp, #8]
   10ace:	9101      	str	r1, [sp, #4]
   10ad0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10ad2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10ad4:	9305      	str	r3, [sp, #20]
   10ad6:	ec57 6b10 	vmov	r6, r7, d0
   10ada:	4604      	mov	r4, r0
   10adc:	4693      	mov	fp, r2
   10ade:	b141      	cbz	r1, 10af2 <_dtoa_r+0x32>
   10ae0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   10ae2:	604a      	str	r2, [r1, #4]
   10ae4:	2301      	movs	r3, #1
   10ae6:	4093      	lsls	r3, r2
   10ae8:	608b      	str	r3, [r1, #8]
   10aea:	f7fb fe2d 	bl	c748 <_Bfree>
   10aee:	2300      	movs	r3, #0
   10af0:	63a3      	str	r3, [r4, #56]	; 0x38
   10af2:	f1b7 0800 	subs.w	r8, r7, #0
   10af6:	bfb4      	ite	lt
   10af8:	2301      	movlt	r3, #1
   10afa:	2300      	movge	r3, #0
   10afc:	602b      	str	r3, [r5, #0]
   10afe:	4bbe      	ldr	r3, [pc, #760]	; (10df8 <_dtoa_r+0x338>)
   10b00:	bfbc      	itt	lt
   10b02:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   10b06:	f8cd 800c 	strlt.w	r8, [sp, #12]
   10b0a:	ea33 0308 	bics.w	r3, r3, r8
   10b0e:	f000 809f 	beq.w	10c50 <_dtoa_r+0x190>
   10b12:	ed9d 8b02 	vldr	d8, [sp, #8]
   10b16:	eeb5 8b40 	vcmp.f64	d8, #0.0
   10b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b1e:	d111      	bne.n	10b44 <_dtoa_r+0x84>
   10b20:	9a05      	ldr	r2, [sp, #20]
   10b22:	2301      	movs	r3, #1
   10b24:	6013      	str	r3, [r2, #0]
   10b26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b28:	2b00      	cmp	r3, #0
   10b2a:	f000 823f 	beq.w	10fac <_dtoa_r+0x4ec>
   10b2e:	4bb3      	ldr	r3, [pc, #716]	; (10dfc <_dtoa_r+0x33c>)
   10b30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10b32:	6013      	str	r3, [r2, #0]
   10b34:	3b01      	subs	r3, #1
   10b36:	9300      	str	r3, [sp, #0]
   10b38:	9800      	ldr	r0, [sp, #0]
   10b3a:	b00f      	add	sp, #60	; 0x3c
   10b3c:	ecbd 8b02 	vpop	{d8}
   10b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b44:	aa0c      	add	r2, sp, #48	; 0x30
   10b46:	a90d      	add	r1, sp, #52	; 0x34
   10b48:	4620      	mov	r0, r4
   10b4a:	eeb0 0b48 	vmov.f64	d0, d8
   10b4e:	f7fc fa13 	bl	cf78 <__d2b>
   10b52:	ea5f 5318 	movs.w	r3, r8, lsr #20
   10b56:	4605      	mov	r5, r0
   10b58:	f040 8092 	bne.w	10c80 <_dtoa_r+0x1c0>
   10b5c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   10b60:	440b      	add	r3, r1
   10b62:	f203 4232 	addw	r2, r3, #1074	; 0x432
   10b66:	2a20      	cmp	r2, #32
   10b68:	f340 82fa 	ble.w	11160 <_dtoa_r+0x6a0>
   10b6c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   10b70:	fa08 f802 	lsl.w	r8, r8, r2
   10b74:	f203 4212 	addw	r2, r3, #1042	; 0x412
   10b78:	40d6      	lsrs	r6, r2
   10b7a:	ea48 0206 	orr.w	r2, r8, r6
   10b7e:	ee07 2a10 	vmov	s14, r2
   10b82:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   10b86:	1e58      	subs	r0, r3, #1
   10b88:	ee17 6a90 	vmov	r6, s15
   10b8c:	ec53 2b17 	vmov	r2, r3, d7
   10b90:	f04f 0a01 	mov.w	sl, #1
   10b94:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   10b98:	ed9f 3b91 	vldr	d3, [pc, #580]	; 10de0 <_dtoa_r+0x320>
   10b9c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 10de8 <_dtoa_r+0x328>
   10ba0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 10df0 <_dtoa_r+0x330>
   10ba4:	ee06 0a90 	vmov	s13, r0
   10ba8:	ec43 2b12 	vmov	d2, r2, r3
   10bac:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   10bb0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   10bb4:	ee32 6b46 	vsub.f64	d6, d2, d6
   10bb8:	eea6 7b03 	vfma.f64	d7, d6, d3
   10bbc:	eea4 7b05 	vfma.f64	d7, d4, d5
   10bc0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   10bc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bcc:	ee16 7a90 	vmov	r7, s13
   10bd0:	d508      	bpl.n	10be4 <_dtoa_r+0x124>
   10bd2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   10bd6:	eeb4 6b47 	vcmp.f64	d6, d7
   10bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bde:	bf18      	it	ne
   10be0:	f107 37ff 	addne.w	r7, r7, #4294967295
   10be4:	2f16      	cmp	r7, #22
   10be6:	f200 8145 	bhi.w	10e74 <_dtoa_r+0x3b4>
   10bea:	4b85      	ldr	r3, [pc, #532]	; (10e00 <_dtoa_r+0x340>)
   10bec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   10bf0:	ed93 7b00 	vldr	d7, [r3]
   10bf4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   10bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bfc:	d557      	bpl.n	10cae <_dtoa_r+0x1ee>
   10bfe:	1a09      	subs	r1, r1, r0
   10c00:	2300      	movs	r3, #0
   10c02:	f1b1 0801 	subs.w	r8, r1, #1
   10c06:	f107 37ff 	add.w	r7, r7, #4294967295
   10c0a:	930a      	str	r3, [sp, #40]	; 0x28
   10c0c:	f100 8139 	bmi.w	10e82 <_dtoa_r+0x3c2>
   10c10:	2300      	movs	r3, #0
   10c12:	9306      	str	r3, [sp, #24]
   10c14:	2f00      	cmp	r7, #0
   10c16:	da52      	bge.n	10cbe <_dtoa_r+0x1fe>
   10c18:	9b06      	ldr	r3, [sp, #24]
   10c1a:	9704      	str	r7, [sp, #16]
   10c1c:	1bdb      	subs	r3, r3, r7
   10c1e:	9306      	str	r3, [sp, #24]
   10c20:	427b      	negs	r3, r7
   10c22:	9308      	str	r3, [sp, #32]
   10c24:	9b01      	ldr	r3, [sp, #4]
   10c26:	2b09      	cmp	r3, #9
   10c28:	f04f 0700 	mov.w	r7, #0
   10c2c:	d84e      	bhi.n	10ccc <_dtoa_r+0x20c>
   10c2e:	2b05      	cmp	r3, #5
   10c30:	f340 829d 	ble.w	1116e <_dtoa_r+0x6ae>
   10c34:	3b04      	subs	r3, #4
   10c36:	9301      	str	r3, [sp, #4]
   10c38:	2600      	movs	r6, #0
   10c3a:	9b01      	ldr	r3, [sp, #4]
   10c3c:	1e9a      	subs	r2, r3, #2
   10c3e:	2a03      	cmp	r2, #3
   10c40:	f200 8125 	bhi.w	10e8e <_dtoa_r+0x3ce>
   10c44:	e8df f012 	tbh	[pc, r2, lsl #1]
   10c48:	03a703aa 	.word	0x03a703aa
   10c4c:	037e039d 	.word	0x037e039d
   10c50:	9a05      	ldr	r2, [sp, #20]
   10c52:	f3c8 0813 	ubfx	r8, r8, #0, #20
   10c56:	f242 730f 	movw	r3, #9999	; 0x270f
   10c5a:	ea58 0806 	orrs.w	r8, r8, r6
   10c5e:	6013      	str	r3, [r2, #0]
   10c60:	d11e      	bne.n	10ca0 <_dtoa_r+0x1e0>
   10c62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10c64:	2b00      	cmp	r3, #0
   10c66:	f000 8591 	beq.w	1178c <_dtoa_r+0xccc>
   10c6a:	4b66      	ldr	r3, [pc, #408]	; (10e04 <_dtoa_r+0x344>)
   10c6c:	9300      	str	r3, [sp, #0]
   10c6e:	3308      	adds	r3, #8
   10c70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10c72:	9800      	ldr	r0, [sp, #0]
   10c74:	6013      	str	r3, [r2, #0]
   10c76:	b00f      	add	sp, #60	; 0x3c
   10c78:	ecbd 8b02 	vpop	{d8}
   10c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c80:	ee18 6a90 	vmov	r6, s17
   10c84:	f3c6 0613 	ubfx	r6, r6, #0, #20
   10c88:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   10c8c:	ec53 2b18 	vmov	r2, r3, d8
   10c90:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   10c94:	990c      	ldr	r1, [sp, #48]	; 0x30
   10c96:	f04f 0a00 	mov.w	sl, #0
   10c9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   10c9e:	e77b      	b.n	10b98 <_dtoa_r+0xd8>
   10ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10ca2:	2b00      	cmp	r3, #0
   10ca4:	f040 833b 	bne.w	1131e <_dtoa_r+0x85e>
   10ca8:	4b57      	ldr	r3, [pc, #348]	; (10e08 <_dtoa_r+0x348>)
   10caa:	9300      	str	r3, [sp, #0]
   10cac:	e744      	b.n	10b38 <_dtoa_r+0x78>
   10cae:	1a09      	subs	r1, r1, r0
   10cb0:	2300      	movs	r3, #0
   10cb2:	f1b1 0801 	subs.w	r8, r1, #1
   10cb6:	930a      	str	r3, [sp, #40]	; 0x28
   10cb8:	f100 80e3 	bmi.w	10e82 <_dtoa_r+0x3c2>
   10cbc:	9306      	str	r3, [sp, #24]
   10cbe:	2300      	movs	r3, #0
   10cc0:	9308      	str	r3, [sp, #32]
   10cc2:	9b01      	ldr	r3, [sp, #4]
   10cc4:	9704      	str	r7, [sp, #16]
   10cc6:	2b09      	cmp	r3, #9
   10cc8:	44b8      	add	r8, r7
   10cca:	d9b0      	bls.n	10c2e <_dtoa_r+0x16e>
   10ccc:	2300      	movs	r3, #0
   10cce:	2601      	movs	r6, #1
   10cd0:	9301      	str	r3, [sp, #4]
   10cd2:	9607      	str	r6, [sp, #28]
   10cd4:	f04f 39ff 	mov.w	r9, #4294967295
   10cd8:	469b      	mov	fp, r3
   10cda:	2100      	movs	r1, #0
   10cdc:	63e1      	str	r1, [r4, #60]	; 0x3c
   10cde:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   10ce2:	4620      	mov	r0, r4
   10ce4:	f7fb fd0a 	bl	c6fc <_Balloc>
   10ce8:	9000      	str	r0, [sp, #0]
   10cea:	2800      	cmp	r0, #0
   10cec:	f000 8540 	beq.w	11770 <_dtoa_r+0xcb0>
   10cf0:	9b00      	ldr	r3, [sp, #0]
   10cf2:	63a3      	str	r3, [r4, #56]	; 0x38
   10cf4:	f1b9 0f0e 	cmp.w	r9, #14
   10cf8:	f200 80dc 	bhi.w	10eb4 <_dtoa_r+0x3f4>
   10cfc:	2e00      	cmp	r6, #0
   10cfe:	f000 80d9 	beq.w	10eb4 <_dtoa_r+0x3f4>
   10d02:	9b04      	ldr	r3, [sp, #16]
   10d04:	2b00      	cmp	r3, #0
   10d06:	f340 83de 	ble.w	114c6 <_dtoa_r+0xa06>
   10d0a:	4a3d      	ldr	r2, [pc, #244]	; (10e00 <_dtoa_r+0x340>)
   10d0c:	f003 010f 	and.w	r1, r3, #15
   10d10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   10d14:	ed92 7b00 	vldr	d7, [r2]
   10d18:	111a      	asrs	r2, r3, #4
   10d1a:	05db      	lsls	r3, r3, #23
   10d1c:	f140 8382 	bpl.w	11424 <_dtoa_r+0x964>
   10d20:	493a      	ldr	r1, [pc, #232]	; (10e0c <_dtoa_r+0x34c>)
   10d22:	ed91 6b08 	vldr	d6, [r1, #32]
   10d26:	f002 020f 	and.w	r2, r2, #15
   10d2a:	2003      	movs	r0, #3
   10d2c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   10d30:	b15a      	cbz	r2, 10d4a <_dtoa_r+0x28a>
   10d32:	4936      	ldr	r1, [pc, #216]	; (10e0c <_dtoa_r+0x34c>)
   10d34:	07d6      	lsls	r6, r2, #31
   10d36:	d504      	bpl.n	10d42 <_dtoa_r+0x282>
   10d38:	ed91 6b00 	vldr	d6, [r1]
   10d3c:	3001      	adds	r0, #1
   10d3e:	ee27 7b06 	vmul.f64	d7, d7, d6
   10d42:	1052      	asrs	r2, r2, #1
   10d44:	f101 0108 	add.w	r1, r1, #8
   10d48:	d1f4      	bne.n	10d34 <_dtoa_r+0x274>
   10d4a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   10d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d50:	b13b      	cbz	r3, 10d62 <_dtoa_r+0x2a2>
   10d52:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10d56:	eeb4 6bc7 	vcmpe.f64	d6, d7
   10d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d5e:	f100 84ae 	bmi.w	116be <_dtoa_r+0xbfe>
   10d62:	ee07 0a90 	vmov	s15, r0
   10d66:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   10d6a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   10d6e:	eea5 7b06 	vfma.f64	d7, d5, d6
   10d72:	ee17 2a90 	vmov	r2, s15
   10d76:	ec51 0b17 	vmov	r0, r1, d7
   10d7a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   10d7e:	f1b9 0f00 	cmp.w	r9, #0
   10d82:	f000 8388 	beq.w	11496 <_dtoa_r+0x9d6>
   10d86:	9e04      	ldr	r6, [sp, #16]
   10d88:	464a      	mov	r2, r9
   10d8a:	9b07      	ldr	r3, [sp, #28]
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	f000 8447 	beq.w	11620 <_dtoa_r+0xb60>
   10d92:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   10d96:	4b1a      	ldr	r3, [pc, #104]	; (10e00 <_dtoa_r+0x340>)
   10d98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   10d9c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   10da0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   10da4:	ee36 7b47 	vsub.f64	d7, d6, d7
   10da8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   10dac:	ee83 5b06 	vdiv.f64	d5, d3, d6
   10db0:	ec41 0b16 	vmov	d6, r0, r1
   10db4:	ee14 0a90 	vmov	r0, s9
   10db8:	ee35 5b46 	vsub.f64	d5, d5, d6
   10dbc:	9900      	ldr	r1, [sp, #0]
   10dbe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   10dc2:	3030      	adds	r0, #48	; 0x30
   10dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10dc8:	f801 0b01 	strb.w	r0, [r1], #1
   10dcc:	f300 84ac 	bgt.w	11728 <_dtoa_r+0xc68>
   10dd0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   10dd4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10dd8:	f04f 0c00 	mov.w	ip, #0
   10ddc:	e031      	b.n	10e42 <_dtoa_r+0x382>
   10dde:	bf00      	nop
   10de0:	636f4361 	.word	0x636f4361
   10de4:	3fd287a7 	.word	0x3fd287a7
   10de8:	8b60c8b3 	.word	0x8b60c8b3
   10dec:	3fc68a28 	.word	0x3fc68a28
   10df0:	509f79fb 	.word	0x509f79fb
   10df4:	3fd34413 	.word	0x3fd34413
   10df8:	7ff00000 	.word	0x7ff00000
   10dfc:	20000df5 	.word	0x20000df5
   10e00:	200002a8 	.word	0x200002a8
   10e04:	20000d2c 	.word	0x20000d2c
   10e08:	20000d38 	.word	0x20000d38
   10e0c:	20000280 	.word	0x20000280
   10e10:	f10c 0c01 	add.w	ip, ip, #1
   10e14:	4594      	cmp	ip, r2
   10e16:	da4d      	bge.n	10eb4 <_dtoa_r+0x3f4>
   10e18:	ee27 7b04 	vmul.f64	d7, d7, d4
   10e1c:	ee25 5b04 	vmul.f64	d5, d5, d4
   10e20:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   10e24:	ee16 3a90 	vmov	r3, s13
   10e28:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   10e2c:	3330      	adds	r3, #48	; 0x30
   10e2e:	ee37 7b43 	vsub.f64	d7, d7, d3
   10e32:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e3a:	f801 3b01 	strb.w	r3, [r1], #1
   10e3e:	f100 8473 	bmi.w	11728 <_dtoa_r+0xc68>
   10e42:	ee32 6b47 	vsub.f64	d6, d2, d7
   10e46:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e4e:	d5df      	bpl.n	10e10 <_dtoa_r+0x350>
   10e50:	9a00      	ldr	r2, [sp, #0]
   10e52:	9604      	str	r6, [sp, #16]
   10e54:	e002      	b.n	10e5c <_dtoa_r+0x39c>
   10e56:	428a      	cmp	r2, r1
   10e58:	f000 8450 	beq.w	116fc <_dtoa_r+0xc3c>
   10e5c:	4689      	mov	r9, r1
   10e5e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   10e62:	2b39      	cmp	r3, #57	; 0x39
   10e64:	d0f7      	beq.n	10e56 <_dtoa_r+0x396>
   10e66:	3301      	adds	r3, #1
   10e68:	b2db      	uxtb	r3, r3
   10e6a:	700b      	strb	r3, [r1, #0]
   10e6c:	9b04      	ldr	r3, [sp, #16]
   10e6e:	3301      	adds	r3, #1
   10e70:	9304      	str	r3, [sp, #16]
   10e72:	e155      	b.n	11120 <_dtoa_r+0x660>
   10e74:	1a09      	subs	r1, r1, r0
   10e76:	2301      	movs	r3, #1
   10e78:	f1b1 0801 	subs.w	r8, r1, #1
   10e7c:	930a      	str	r3, [sp, #40]	; 0x28
   10e7e:	f57f aec7 	bpl.w	10c10 <_dtoa_r+0x150>
   10e82:	f1c1 0301 	rsb	r3, r1, #1
   10e86:	9306      	str	r3, [sp, #24]
   10e88:	f04f 0800 	mov.w	r8, #0
   10e8c:	e6c2      	b.n	10c14 <_dtoa_r+0x154>
   10e8e:	2600      	movs	r6, #0
   10e90:	63e6      	str	r6, [r4, #60]	; 0x3c
   10e92:	4631      	mov	r1, r6
   10e94:	4620      	mov	r0, r4
   10e96:	f7fb fc31 	bl	c6fc <_Balloc>
   10e9a:	9000      	str	r0, [sp, #0]
   10e9c:	2800      	cmp	r0, #0
   10e9e:	f000 8467 	beq.w	11770 <_dtoa_r+0xcb0>
   10ea2:	9b00      	ldr	r3, [sp, #0]
   10ea4:	63a3      	str	r3, [r4, #56]	; 0x38
   10ea6:	f04f 33ff 	mov.w	r3, #4294967295
   10eaa:	930b      	str	r3, [sp, #44]	; 0x2c
   10eac:	4699      	mov	r9, r3
   10eae:	2301      	movs	r3, #1
   10eb0:	46b3      	mov	fp, r6
   10eb2:	9307      	str	r3, [sp, #28]
   10eb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10eb6:	2a00      	cmp	r2, #0
   10eb8:	db55      	blt.n	10f66 <_dtoa_r+0x4a6>
   10eba:	9904      	ldr	r1, [sp, #16]
   10ebc:	290e      	cmp	r1, #14
   10ebe:	dc52      	bgt.n	10f66 <_dtoa_r+0x4a6>
   10ec0:	4bb7      	ldr	r3, [pc, #732]	; (111a0 <_dtoa_r+0x6e0>)
   10ec2:	f1bb 0f00 	cmp.w	fp, #0
   10ec6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10eca:	ed93 6b00 	vldr	d6, [r3]
   10ece:	da15      	bge.n	10efc <_dtoa_r+0x43c>
   10ed0:	f1b9 0f00 	cmp.w	r9, #0
   10ed4:	dc12      	bgt.n	10efc <_dtoa_r+0x43c>
   10ed6:	f040 82f2 	bne.w	114be <_dtoa_r+0x9fe>
   10eda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   10ede:	ee26 7b07 	vmul.f64	d7, d6, d7
   10ee2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   10ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10eea:	46ca      	mov	sl, r9
   10eec:	464e      	mov	r6, r9
   10eee:	f200 826d 	bhi.w	113cc <_dtoa_r+0x90c>
   10ef2:	f8dd 8000 	ldr.w	r8, [sp]
   10ef6:	ea6f 0b0b 	mvn.w	fp, fp
   10efa:	e270      	b.n	113de <_dtoa_r+0x91e>
   10efc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   10f00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   10f04:	9900      	ldr	r1, [sp, #0]
   10f06:	ee17 3a10 	vmov	r3, s14
   10f0a:	f1b9 0f01 	cmp.w	r9, #1
   10f0e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   10f12:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   10f16:	f801 3b01 	strb.w	r3, [r1], #1
   10f1a:	eea5 8b46 	vfms.f64	d8, d5, d6
   10f1e:	f000 8334 	beq.w	1158a <_dtoa_r+0xaca>
   10f22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10f26:	2301      	movs	r3, #1
   10f28:	e011      	b.n	10f4e <_dtoa_r+0x48e>
   10f2a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   10f2e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   10f32:	3301      	adds	r3, #1
   10f34:	ee17 2a10 	vmov	r2, s14
   10f38:	454b      	cmp	r3, r9
   10f3a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   10f3e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   10f42:	f801 2b01 	strb.w	r2, [r1], #1
   10f46:	eea5 8b46 	vfms.f64	d8, d5, d6
   10f4a:	f000 831e 	beq.w	1158a <_dtoa_r+0xaca>
   10f4e:	ee28 8b04 	vmul.f64	d8, d8, d4
   10f52:	eeb5 8b40 	vcmp.f64	d8, #0.0
   10f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f5a:	d1e6      	bne.n	10f2a <_dtoa_r+0x46a>
   10f5c:	9b04      	ldr	r3, [sp, #16]
   10f5e:	3301      	adds	r3, #1
   10f60:	9304      	str	r3, [sp, #16]
   10f62:	4689      	mov	r9, r1
   10f64:	e0dc      	b.n	11120 <_dtoa_r+0x660>
   10f66:	9b07      	ldr	r3, [sp, #28]
   10f68:	b343      	cbz	r3, 10fbc <_dtoa_r+0x4fc>
   10f6a:	9b01      	ldr	r3, [sp, #4]
   10f6c:	2b01      	cmp	r3, #1
   10f6e:	f340 8276 	ble.w	1145e <_dtoa_r+0x99e>
   10f72:	9b08      	ldr	r3, [sp, #32]
   10f74:	f109 3aff 	add.w	sl, r9, #4294967295
   10f78:	4553      	cmp	r3, sl
   10f7a:	f280 823f 	bge.w	113fc <_dtoa_r+0x93c>
   10f7e:	9b08      	ldr	r3, [sp, #32]
   10f80:	f8cd a020 	str.w	sl, [sp, #32]
   10f84:	ebaa 0203 	sub.w	r2, sl, r3
   10f88:	4417      	add	r7, r2
   10f8a:	f04f 0a00 	mov.w	sl, #0
   10f8e:	f1b9 0f00 	cmp.w	r9, #0
   10f92:	f2c0 8325 	blt.w	115e0 <_dtoa_r+0xb20>
   10f96:	9b06      	ldr	r3, [sp, #24]
   10f98:	9309      	str	r3, [sp, #36]	; 0x24
   10f9a:	444b      	add	r3, r9
   10f9c:	44c8      	add	r8, r9
   10f9e:	9306      	str	r3, [sp, #24]
   10fa0:	2101      	movs	r1, #1
   10fa2:	4620      	mov	r0, r4
   10fa4:	f7fb fcd4 	bl	c950 <__i2b>
   10fa8:	4606      	mov	r6, r0
   10faa:	e00c      	b.n	10fc6 <_dtoa_r+0x506>
   10fac:	4b7d      	ldr	r3, [pc, #500]	; (111a4 <_dtoa_r+0x6e4>)
   10fae:	9300      	str	r3, [sp, #0]
   10fb0:	9800      	ldr	r0, [sp, #0]
   10fb2:	b00f      	add	sp, #60	; 0x3c
   10fb4:	ecbd 8b02 	vpop	{d8}
   10fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fbc:	9b06      	ldr	r3, [sp, #24]
   10fbe:	f8dd a020 	ldr.w	sl, [sp, #32]
   10fc2:	9e07      	ldr	r6, [sp, #28]
   10fc4:	9309      	str	r3, [sp, #36]	; 0x24
   10fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fc8:	b16b      	cbz	r3, 10fe6 <_dtoa_r+0x526>
   10fca:	f1b8 0f00 	cmp.w	r8, #0
   10fce:	dd0a      	ble.n	10fe6 <_dtoa_r+0x526>
   10fd0:	4543      	cmp	r3, r8
   10fd2:	9906      	ldr	r1, [sp, #24]
   10fd4:	461a      	mov	r2, r3
   10fd6:	bfa8      	it	ge
   10fd8:	4642      	movge	r2, r8
   10fda:	1a89      	subs	r1, r1, r2
   10fdc:	1a9b      	subs	r3, r3, r2
   10fde:	9106      	str	r1, [sp, #24]
   10fe0:	9309      	str	r3, [sp, #36]	; 0x24
   10fe2:	eba8 0802 	sub.w	r8, r8, r2
   10fe6:	9b08      	ldr	r3, [sp, #32]
   10fe8:	b163      	cbz	r3, 11004 <_dtoa_r+0x544>
   10fea:	9b07      	ldr	r3, [sp, #28]
   10fec:	2b00      	cmp	r3, #0
   10fee:	f000 82a7 	beq.w	11540 <_dtoa_r+0xa80>
   10ff2:	f1ba 0f00 	cmp.w	sl, #0
   10ff6:	f300 8204 	bgt.w	11402 <_dtoa_r+0x942>
   10ffa:	9b08      	ldr	r3, [sp, #32]
   10ffc:	ebb3 020a 	subs.w	r2, r3, sl
   11000:	f040 82ff 	bne.w	11602 <_dtoa_r+0xb42>
   11004:	2101      	movs	r1, #1
   11006:	4620      	mov	r0, r4
   11008:	f7fb fca2 	bl	c950 <__i2b>
   1100c:	2f00      	cmp	r7, #0
   1100e:	4682      	mov	sl, r0
   11010:	f300 80af 	bgt.w	11172 <_dtoa_r+0x6b2>
   11014:	9b01      	ldr	r3, [sp, #4]
   11016:	2b01      	cmp	r3, #1
   11018:	f340 8187 	ble.w	1132a <_dtoa_r+0x86a>
   1101c:	2300      	movs	r3, #0
   1101e:	9308      	str	r3, [sp, #32]
   11020:	2001      	movs	r0, #1
   11022:	2f00      	cmp	r7, #0
   11024:	f040 80b1 	bne.w	1118a <_dtoa_r+0x6ca>
   11028:	4440      	add	r0, r8
   1102a:	f010 001f 	ands.w	r0, r0, #31
   1102e:	f000 817a 	beq.w	11326 <_dtoa_r+0x866>
   11032:	f1c0 0220 	rsb	r2, r0, #32
   11036:	2a04      	cmp	r2, #4
   11038:	f300 8088 	bgt.w	1114c <_dtoa_r+0x68c>
   1103c:	f040 81f6 	bne.w	1142c <_dtoa_r+0x96c>
   11040:	9b06      	ldr	r3, [sp, #24]
   11042:	2b00      	cmp	r3, #0
   11044:	dd05      	ble.n	11052 <_dtoa_r+0x592>
   11046:	4629      	mov	r1, r5
   11048:	461a      	mov	r2, r3
   1104a:	4620      	mov	r0, r4
   1104c:	f7fb fdbc 	bl	cbc8 <__lshift>
   11050:	4605      	mov	r5, r0
   11052:	f1b8 0f00 	cmp.w	r8, #0
   11056:	dd05      	ble.n	11064 <_dtoa_r+0x5a4>
   11058:	4651      	mov	r1, sl
   1105a:	4642      	mov	r2, r8
   1105c:	4620      	mov	r0, r4
   1105e:	f7fb fdb3 	bl	cbc8 <__lshift>
   11062:	4682      	mov	sl, r0
   11064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11066:	2b00      	cmp	r3, #0
   11068:	f040 813f 	bne.w	112ea <_dtoa_r+0x82a>
   1106c:	f1b9 0f00 	cmp.w	r9, #0
   11070:	f340 8125 	ble.w	112be <_dtoa_r+0x7fe>
   11074:	9b07      	ldr	r3, [sp, #28]
   11076:	2b00      	cmp	r3, #0
   11078:	f040 80a3 	bne.w	111c2 <_dtoa_r+0x702>
   1107c:	9b04      	ldr	r3, [sp, #16]
   1107e:	3301      	adds	r3, #1
   11080:	9304      	str	r3, [sp, #16]
   11082:	f8dd 8000 	ldr.w	r8, [sp]
   11086:	2701      	movs	r7, #1
   11088:	e007      	b.n	1109a <_dtoa_r+0x5da>
   1108a:	4629      	mov	r1, r5
   1108c:	2300      	movs	r3, #0
   1108e:	220a      	movs	r2, #10
   11090:	4620      	mov	r0, r4
   11092:	f7fb fb63 	bl	c75c <__multadd>
   11096:	3701      	adds	r7, #1
   11098:	4605      	mov	r5, r0
   1109a:	4651      	mov	r1, sl
   1109c:	4628      	mov	r0, r5
   1109e:	f7ff fc7b 	bl	10998 <quorem>
   110a2:	45b9      	cmp	r9, r7
   110a4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   110a8:	f808 0b01 	strb.w	r0, [r8], #1
   110ac:	dced      	bgt.n	1108a <_dtoa_r+0x5ca>
   110ae:	f1b9 0f00 	cmp.w	r9, #0
   110b2:	9a00      	ldr	r2, [sp, #0]
   110b4:	bfcc      	ite	gt
   110b6:	46cb      	movgt	fp, r9
   110b8:	f04f 0b01 	movle.w	fp, #1
   110bc:	4603      	mov	r3, r0
   110be:	4493      	add	fp, r2
   110c0:	2700      	movs	r7, #0
   110c2:	4629      	mov	r1, r5
   110c4:	2201      	movs	r2, #1
   110c6:	4620      	mov	r0, r4
   110c8:	9301      	str	r3, [sp, #4]
   110ca:	f7fb fd7d 	bl	cbc8 <__lshift>
   110ce:	4651      	mov	r1, sl
   110d0:	4605      	mov	r5, r0
   110d2:	f7fb fdf1 	bl	ccb8 <__mcmp>
   110d6:	2800      	cmp	r0, #0
   110d8:	f340 81af 	ble.w	1143a <_dtoa_r+0x97a>
   110dc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   110e0:	9a00      	ldr	r2, [sp, #0]
   110e2:	f10b 3bff 	add.w	fp, fp, #4294967295
   110e6:	e004      	b.n	110f2 <_dtoa_r+0x632>
   110e8:	455a      	cmp	r2, fp
   110ea:	f000 81b1 	beq.w	11450 <_dtoa_r+0x990>
   110ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   110f2:	2b39      	cmp	r3, #57	; 0x39
   110f4:	f10b 0901 	add.w	r9, fp, #1
   110f8:	d0f6      	beq.n	110e8 <_dtoa_r+0x628>
   110fa:	3301      	adds	r3, #1
   110fc:	f88b 3000 	strb.w	r3, [fp]
   11100:	4651      	mov	r1, sl
   11102:	4620      	mov	r0, r4
   11104:	f7fb fb20 	bl	c748 <_Bfree>
   11108:	b156      	cbz	r6, 11120 <_dtoa_r+0x660>
   1110a:	b12f      	cbz	r7, 11118 <_dtoa_r+0x658>
   1110c:	42b7      	cmp	r7, r6
   1110e:	d003      	beq.n	11118 <_dtoa_r+0x658>
   11110:	4639      	mov	r1, r7
   11112:	4620      	mov	r0, r4
   11114:	f7fb fb18 	bl	c748 <_Bfree>
   11118:	4631      	mov	r1, r6
   1111a:	4620      	mov	r0, r4
   1111c:	f7fb fb14 	bl	c748 <_Bfree>
   11120:	4629      	mov	r1, r5
   11122:	4620      	mov	r0, r4
   11124:	f7fb fb10 	bl	c748 <_Bfree>
   11128:	2300      	movs	r3, #0
   1112a:	f889 3000 	strb.w	r3, [r9]
   1112e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11132:	601a      	str	r2, [r3, #0]
   11134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11136:	2b00      	cmp	r3, #0
   11138:	f43f acfe 	beq.w	10b38 <_dtoa_r+0x78>
   1113c:	9800      	ldr	r0, [sp, #0]
   1113e:	f8c3 9000 	str.w	r9, [r3]
   11142:	b00f      	add	sp, #60	; 0x3c
   11144:	ecbd 8b02 	vpop	{d8}
   11148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1114c:	f1c0 001c 	rsb	r0, r0, #28
   11150:	9b06      	ldr	r3, [sp, #24]
   11152:	4403      	add	r3, r0
   11154:	9306      	str	r3, [sp, #24]
   11156:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11158:	4403      	add	r3, r0
   1115a:	9309      	str	r3, [sp, #36]	; 0x24
   1115c:	4480      	add	r8, r0
   1115e:	e76f      	b.n	11040 <_dtoa_r+0x580>
   11160:	f1c2 0220 	rsb	r2, r2, #32
   11164:	fa06 f202 	lsl.w	r2, r6, r2
   11168:	ee07 2a10 	vmov	s14, r2
   1116c:	e509      	b.n	10b82 <_dtoa_r+0xc2>
   1116e:	2601      	movs	r6, #1
   11170:	e563      	b.n	10c3a <_dtoa_r+0x17a>
   11172:	4601      	mov	r1, r0
   11174:	463a      	mov	r2, r7
   11176:	4620      	mov	r0, r4
   11178:	f7fb fcc6 	bl	cb08 <__pow5mult>
   1117c:	9b01      	ldr	r3, [sp, #4]
   1117e:	2b01      	cmp	r3, #1
   11180:	4682      	mov	sl, r0
   11182:	f340 81c5 	ble.w	11510 <_dtoa_r+0xa50>
   11186:	2300      	movs	r3, #0
   11188:	9308      	str	r3, [sp, #32]
   1118a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1118e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   11192:	6910      	ldr	r0, [r2, #16]
   11194:	f7fb fb8c 	bl	c8b0 <__hi0bits>
   11198:	f1c0 0020 	rsb	r0, r0, #32
   1119c:	e744      	b.n	11028 <_dtoa_r+0x568>
   1119e:	bf00      	nop
   111a0:	200002a8 	.word	0x200002a8
   111a4:	20000df4 	.word	0x20000df4
   111a8:	4631      	mov	r1, r6
   111aa:	2300      	movs	r3, #0
   111ac:	220a      	movs	r2, #10
   111ae:	4620      	mov	r0, r4
   111b0:	f7fb fad4 	bl	c75c <__multadd>
   111b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   111b6:	2b00      	cmp	r3, #0
   111b8:	4606      	mov	r6, r0
   111ba:	f340 82ce 	ble.w	1175a <_dtoa_r+0xc9a>
   111be:	9704      	str	r7, [sp, #16]
   111c0:	4699      	mov	r9, r3
   111c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111c4:	2b00      	cmp	r3, #0
   111c6:	dd05      	ble.n	111d4 <_dtoa_r+0x714>
   111c8:	4631      	mov	r1, r6
   111ca:	461a      	mov	r2, r3
   111cc:	4620      	mov	r0, r4
   111ce:	f7fb fcfb 	bl	cbc8 <__lshift>
   111d2:	4606      	mov	r6, r0
   111d4:	9b08      	ldr	r3, [sp, #32]
   111d6:	2b00      	cmp	r3, #0
   111d8:	f040 81eb 	bne.w	115b2 <_dtoa_r+0xaf2>
   111dc:	46b0      	mov	r8, r6
   111de:	9b02      	ldr	r3, [sp, #8]
   111e0:	9f00      	ldr	r7, [sp, #0]
   111e2:	f003 0201 	and.w	r2, r3, #1
   111e6:	1e7b      	subs	r3, r7, #1
   111e8:	444b      	add	r3, r9
   111ea:	9308      	str	r3, [sp, #32]
   111ec:	9b01      	ldr	r3, [sp, #4]
   111ee:	920a      	str	r2, [sp, #40]	; 0x28
   111f0:	4313      	orrs	r3, r2
   111f2:	9309      	str	r3, [sp, #36]	; 0x24
   111f4:	4651      	mov	r1, sl
   111f6:	4628      	mov	r0, r5
   111f8:	f7ff fbce 	bl	10998 <quorem>
   111fc:	4631      	mov	r1, r6
   111fe:	4683      	mov	fp, r0
   11200:	4628      	mov	r0, r5
   11202:	f7fb fd59 	bl	ccb8 <__mcmp>
   11206:	4642      	mov	r2, r8
   11208:	4651      	mov	r1, sl
   1120a:	4681      	mov	r9, r0
   1120c:	4620      	mov	r0, r4
   1120e:	f7fb fd75 	bl	ccfc <__mdiff>
   11212:	68c2      	ldr	r2, [r0, #12]
   11214:	4601      	mov	r1, r0
   11216:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1121a:	2a00      	cmp	r2, #0
   1121c:	d142      	bne.n	112a4 <_dtoa_r+0x7e4>
   1121e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   11222:	4628      	mov	r0, r5
   11224:	f7fb fd48 	bl	ccb8 <__mcmp>
   11228:	9906      	ldr	r1, [sp, #24]
   1122a:	9002      	str	r0, [sp, #8]
   1122c:	4620      	mov	r0, r4
   1122e:	f7fb fa8b 	bl	c748 <_Bfree>
   11232:	9a02      	ldr	r2, [sp, #8]
   11234:	9b07      	ldr	r3, [sp, #28]
   11236:	b91a      	cbnz	r2, 11240 <_dtoa_r+0x780>
   11238:	9909      	ldr	r1, [sp, #36]	; 0x24
   1123a:	2900      	cmp	r1, #0
   1123c:	f000 827e 	beq.w	1173c <_dtoa_r+0xc7c>
   11240:	f1b9 0f00 	cmp.w	r9, #0
   11244:	f2c0 8183 	blt.w	1154e <_dtoa_r+0xa8e>
   11248:	9901      	ldr	r1, [sp, #4]
   1124a:	ea49 0901 	orr.w	r9, r9, r1
   1124e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11250:	ea51 0909 	orrs.w	r9, r1, r9
   11254:	f000 817b 	beq.w	1154e <_dtoa_r+0xa8e>
   11258:	2a00      	cmp	r2, #0
   1125a:	f300 81c6 	bgt.w	115ea <_dtoa_r+0xb2a>
   1125e:	9a08      	ldr	r2, [sp, #32]
   11260:	703b      	strb	r3, [r7, #0]
   11262:	f107 0901 	add.w	r9, r7, #1
   11266:	4297      	cmp	r7, r2
   11268:	46cb      	mov	fp, r9
   1126a:	f000 81c4 	beq.w	115f6 <_dtoa_r+0xb36>
   1126e:	4629      	mov	r1, r5
   11270:	2300      	movs	r3, #0
   11272:	220a      	movs	r2, #10
   11274:	4620      	mov	r0, r4
   11276:	f7fb fa71 	bl	c75c <__multadd>
   1127a:	4546      	cmp	r6, r8
   1127c:	4605      	mov	r5, r0
   1127e:	4631      	mov	r1, r6
   11280:	f04f 0300 	mov.w	r3, #0
   11284:	f04f 020a 	mov.w	r2, #10
   11288:	4620      	mov	r0, r4
   1128a:	d012      	beq.n	112b2 <_dtoa_r+0x7f2>
   1128c:	f7fb fa66 	bl	c75c <__multadd>
   11290:	4641      	mov	r1, r8
   11292:	4606      	mov	r6, r0
   11294:	2300      	movs	r3, #0
   11296:	220a      	movs	r2, #10
   11298:	4620      	mov	r0, r4
   1129a:	f7fb fa5f 	bl	c75c <__multadd>
   1129e:	464f      	mov	r7, r9
   112a0:	4680      	mov	r8, r0
   112a2:	e7a7      	b.n	111f4 <_dtoa_r+0x734>
   112a4:	4620      	mov	r0, r4
   112a6:	9302      	str	r3, [sp, #8]
   112a8:	f7fb fa4e 	bl	c748 <_Bfree>
   112ac:	9b02      	ldr	r3, [sp, #8]
   112ae:	2201      	movs	r2, #1
   112b0:	e7c6      	b.n	11240 <_dtoa_r+0x780>
   112b2:	f7fb fa53 	bl	c75c <__multadd>
   112b6:	464f      	mov	r7, r9
   112b8:	4606      	mov	r6, r0
   112ba:	4680      	mov	r8, r0
   112bc:	e79a      	b.n	111f4 <_dtoa_r+0x734>
   112be:	9b01      	ldr	r3, [sp, #4]
   112c0:	2b02      	cmp	r3, #2
   112c2:	dc71      	bgt.n	113a8 <_dtoa_r+0x8e8>
   112c4:	9b07      	ldr	r3, [sp, #28]
   112c6:	2b00      	cmp	r3, #0
   112c8:	f47f af7b 	bne.w	111c2 <_dtoa_r+0x702>
   112cc:	9b04      	ldr	r3, [sp, #16]
   112ce:	4651      	mov	r1, sl
   112d0:	3301      	adds	r3, #1
   112d2:	4628      	mov	r0, r5
   112d4:	9304      	str	r3, [sp, #16]
   112d6:	f7ff fb5f 	bl	10998 <quorem>
   112da:	f8dd b000 	ldr.w	fp, [sp]
   112de:	f100 0330 	add.w	r3, r0, #48	; 0x30
   112e2:	f80b 3b01 	strb.w	r3, [fp], #1
   112e6:	2700      	movs	r7, #0
   112e8:	e6eb      	b.n	110c2 <_dtoa_r+0x602>
   112ea:	4651      	mov	r1, sl
   112ec:	4628      	mov	r0, r5
   112ee:	f7fb fce3 	bl	ccb8 <__mcmp>
   112f2:	2800      	cmp	r0, #0
   112f4:	f6bf aeba 	bge.w	1106c <_dtoa_r+0x5ac>
   112f8:	4629      	mov	r1, r5
   112fa:	2300      	movs	r3, #0
   112fc:	220a      	movs	r2, #10
   112fe:	4620      	mov	r0, r4
   11300:	f7fb fa2c 	bl	c75c <__multadd>
   11304:	9b04      	ldr	r3, [sp, #16]
   11306:	1e5f      	subs	r7, r3, #1
   11308:	9b07      	ldr	r3, [sp, #28]
   1130a:	4605      	mov	r5, r0
   1130c:	2b00      	cmp	r3, #0
   1130e:	f47f af4b 	bne.w	111a8 <_dtoa_r+0x6e8>
   11312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11314:	2b00      	cmp	r3, #0
   11316:	f340 8218 	ble.w	1174a <_dtoa_r+0xc8a>
   1131a:	4699      	mov	r9, r3
   1131c:	e6b1      	b.n	11082 <_dtoa_r+0x5c2>
   1131e:	4bbc      	ldr	r3, [pc, #752]	; (11610 <_dtoa_r+0xb50>)
   11320:	9300      	str	r3, [sp, #0]
   11322:	3303      	adds	r3, #3
   11324:	e4a4      	b.n	10c70 <_dtoa_r+0x1b0>
   11326:	201c      	movs	r0, #28
   11328:	e712      	b.n	11150 <_dtoa_r+0x690>
   1132a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1132e:	2800      	cmp	r0, #0
   11330:	f47f ae74 	bne.w	1101c <_dtoa_r+0x55c>
   11334:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11338:	2a00      	cmp	r2, #0
   1133a:	f000 80f4 	beq.w	11526 <_dtoa_r+0xa66>
   1133e:	9b02      	ldr	r3, [sp, #8]
   11340:	9308      	str	r3, [sp, #32]
   11342:	e66d      	b.n	11020 <_dtoa_r+0x560>
   11344:	2301      	movs	r3, #1
   11346:	9307      	str	r3, [sp, #28]
   11348:	9b04      	ldr	r3, [sp, #16]
   1134a:	445b      	add	r3, fp
   1134c:	f103 0901 	add.w	r9, r3, #1
   11350:	f1b9 0f01 	cmp.w	r9, #1
   11354:	46cc      	mov	ip, r9
   11356:	930b      	str	r3, [sp, #44]	; 0x2c
   11358:	bfb8      	it	lt
   1135a:	f04f 0c01 	movlt.w	ip, #1
   1135e:	2100      	movs	r1, #0
   11360:	f1bc 0f17 	cmp.w	ip, #23
   11364:	63e1      	str	r1, [r4, #60]	; 0x3c
   11366:	f77f acbc 	ble.w	10ce2 <_dtoa_r+0x222>
   1136a:	2001      	movs	r0, #1
   1136c:	2204      	movs	r2, #4
   1136e:	0052      	lsls	r2, r2, #1
   11370:	f102 0314 	add.w	r3, r2, #20
   11374:	4563      	cmp	r3, ip
   11376:	4601      	mov	r1, r0
   11378:	f100 0001 	add.w	r0, r0, #1
   1137c:	d9f7      	bls.n	1136e <_dtoa_r+0x8ae>
   1137e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11380:	e4af      	b.n	10ce2 <_dtoa_r+0x222>
   11382:	2301      	movs	r3, #1
   11384:	9307      	str	r3, [sp, #28]
   11386:	f1bb 0f00 	cmp.w	fp, #0
   1138a:	dd52      	ble.n	11432 <_dtoa_r+0x972>
   1138c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11390:	46d9      	mov	r9, fp
   11392:	46dc      	mov	ip, fp
   11394:	e7e3      	b.n	1135e <_dtoa_r+0x89e>
   11396:	2300      	movs	r3, #0
   11398:	9307      	str	r3, [sp, #28]
   1139a:	e7d5      	b.n	11348 <_dtoa_r+0x888>
   1139c:	2300      	movs	r3, #0
   1139e:	9307      	str	r3, [sp, #28]
   113a0:	e7f1      	b.n	11386 <_dtoa_r+0x8c6>
   113a2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   113a6:	9704      	str	r7, [sp, #16]
   113a8:	f1b9 0f00 	cmp.w	r9, #0
   113ac:	f47f ada1 	bne.w	10ef2 <_dtoa_r+0x432>
   113b0:	4651      	mov	r1, sl
   113b2:	464b      	mov	r3, r9
   113b4:	2205      	movs	r2, #5
   113b6:	4620      	mov	r0, r4
   113b8:	f7fb f9d0 	bl	c75c <__multadd>
   113bc:	4601      	mov	r1, r0
   113be:	4682      	mov	sl, r0
   113c0:	4628      	mov	r0, r5
   113c2:	f7fb fc79 	bl	ccb8 <__mcmp>
   113c6:	2800      	cmp	r0, #0
   113c8:	f77f ad93 	ble.w	10ef2 <_dtoa_r+0x432>
   113cc:	9b04      	ldr	r3, [sp, #16]
   113ce:	f103 0b01 	add.w	fp, r3, #1
   113d2:	9b00      	ldr	r3, [sp, #0]
   113d4:	2231      	movs	r2, #49	; 0x31
   113d6:	4698      	mov	r8, r3
   113d8:	f803 2b01 	strb.w	r2, [r3], #1
   113dc:	9300      	str	r3, [sp, #0]
   113de:	4651      	mov	r1, sl
   113e0:	4620      	mov	r0, r4
   113e2:	f7fb f9b1 	bl	c748 <_Bfree>
   113e6:	f10b 0301 	add.w	r3, fp, #1
   113ea:	f8dd 9000 	ldr.w	r9, [sp]
   113ee:	9304      	str	r3, [sp, #16]
   113f0:	f8cd 8000 	str.w	r8, [sp]
   113f4:	2e00      	cmp	r6, #0
   113f6:	f47f ae8f 	bne.w	11118 <_dtoa_r+0x658>
   113fa:	e691      	b.n	11120 <_dtoa_r+0x660>
   113fc:	eba3 0a0a 	sub.w	sl, r3, sl
   11400:	e5c5      	b.n	10f8e <_dtoa_r+0x4ce>
   11402:	4631      	mov	r1, r6
   11404:	4652      	mov	r2, sl
   11406:	4620      	mov	r0, r4
   11408:	f7fb fb7e 	bl	cb08 <__pow5mult>
   1140c:	462a      	mov	r2, r5
   1140e:	4601      	mov	r1, r0
   11410:	4606      	mov	r6, r0
   11412:	4620      	mov	r0, r4
   11414:	f7fb faca 	bl	c9ac <__multiply>
   11418:	4629      	mov	r1, r5
   1141a:	4605      	mov	r5, r0
   1141c:	4620      	mov	r0, r4
   1141e:	f7fb f993 	bl	c748 <_Bfree>
   11422:	e5ea      	b.n	10ffa <_dtoa_r+0x53a>
   11424:	2002      	movs	r0, #2
   11426:	eeb0 5b48 	vmov.f64	d5, d8
   1142a:	e481      	b.n	10d30 <_dtoa_r+0x270>
   1142c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11430:	e68e      	b.n	11150 <_dtoa_r+0x690>
   11432:	f04f 0b01 	mov.w	fp, #1
   11436:	46d9      	mov	r9, fp
   11438:	e44f      	b.n	10cda <_dtoa_r+0x21a>
   1143a:	d103      	bne.n	11444 <_dtoa_r+0x984>
   1143c:	9b01      	ldr	r3, [sp, #4]
   1143e:	07db      	lsls	r3, r3, #31
   11440:	f53f ae4c 	bmi.w	110dc <_dtoa_r+0x61c>
   11444:	46d9      	mov	r9, fp
   11446:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1144a:	2b30      	cmp	r3, #48	; 0x30
   1144c:	d0fa      	beq.n	11444 <_dtoa_r+0x984>
   1144e:	e657      	b.n	11100 <_dtoa_r+0x640>
   11450:	9b04      	ldr	r3, [sp, #16]
   11452:	9a00      	ldr	r2, [sp, #0]
   11454:	3301      	adds	r3, #1
   11456:	9304      	str	r3, [sp, #16]
   11458:	2331      	movs	r3, #49	; 0x31
   1145a:	7013      	strb	r3, [r2, #0]
   1145c:	e650      	b.n	11100 <_dtoa_r+0x640>
   1145e:	f1ba 0f00 	cmp.w	sl, #0
   11462:	f000 8123 	beq.w	116ac <_dtoa_r+0xbec>
   11466:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1146a:	9b06      	ldr	r3, [sp, #24]
   1146c:	9309      	str	r3, [sp, #36]	; 0x24
   1146e:	4413      	add	r3, r2
   11470:	f8dd a020 	ldr.w	sl, [sp, #32]
   11474:	9306      	str	r3, [sp, #24]
   11476:	4490      	add	r8, r2
   11478:	e592      	b.n	10fa0 <_dtoa_r+0x4e0>
   1147a:	ee07 0a90 	vmov	s15, r0
   1147e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11486:	eea6 5b07 	vfma.f64	d5, d6, d7
   1148a:	ee15 2a90 	vmov	r2, s11
   1148e:	ec51 0b15 	vmov	r0, r1, d5
   11492:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11496:	ec41 0b15 	vmov	d5, r0, r1
   1149a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1149e:	ee36 7b47 	vsub.f64	d7, d6, d7
   114a2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   114a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   114aa:	f300 8137 	bgt.w	1171c <_dtoa_r+0xc5c>
   114ae:	eeb1 5b45 	vneg.f64	d5, d5
   114b2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   114b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   114ba:	f57f acfb 	bpl.w	10eb4 <_dtoa_r+0x3f4>
   114be:	f04f 0a00 	mov.w	sl, #0
   114c2:	4656      	mov	r6, sl
   114c4:	e515      	b.n	10ef2 <_dtoa_r+0x432>
   114c6:	f000 80f5 	beq.w	116b4 <_dtoa_r+0xbf4>
   114ca:	9b04      	ldr	r3, [sp, #16]
   114cc:	4951      	ldr	r1, [pc, #324]	; (11614 <_dtoa_r+0xb54>)
   114ce:	425a      	negs	r2, r3
   114d0:	f002 000f 	and.w	r0, r2, #15
   114d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   114d8:	ed91 6b00 	vldr	d6, [r1]
   114dc:	1112      	asrs	r2, r2, #4
   114de:	ee28 6b06 	vmul.f64	d6, d8, d6
   114e2:	f000 8142 	beq.w	1176a <_dtoa_r+0xcaa>
   114e6:	eeb0 7b46 	vmov.f64	d7, d6
   114ea:	494b      	ldr	r1, [pc, #300]	; (11618 <_dtoa_r+0xb58>)
   114ec:	2600      	movs	r6, #0
   114ee:	2002      	movs	r0, #2
   114f0:	07d3      	lsls	r3, r2, #31
   114f2:	d505      	bpl.n	11500 <_dtoa_r+0xa40>
   114f4:	ed91 5b00 	vldr	d5, [r1]
   114f8:	3001      	adds	r0, #1
   114fa:	2601      	movs	r6, #1
   114fc:	ee27 7b05 	vmul.f64	d7, d7, d5
   11500:	1052      	asrs	r2, r2, #1
   11502:	f101 0108 	add.w	r1, r1, #8
   11506:	d1f3      	bne.n	114f0 <_dtoa_r+0xa30>
   11508:	2e00      	cmp	r6, #0
   1150a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   1150e:	e41e      	b.n	10d4e <_dtoa_r+0x28e>
   11510:	9b02      	ldr	r3, [sp, #8]
   11512:	2b00      	cmp	r3, #0
   11514:	f47f ae37 	bne.w	11186 <_dtoa_r+0x6c6>
   11518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1151c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11520:	2a00      	cmp	r2, #0
   11522:	f040 8137 	bne.w	11794 <_dtoa_r+0xcd4>
   11526:	4a3d      	ldr	r2, [pc, #244]	; (1161c <_dtoa_r+0xb5c>)
   11528:	400a      	ands	r2, r1
   1152a:	2a00      	cmp	r2, #0
   1152c:	f000 80fa 	beq.w	11724 <_dtoa_r+0xc64>
   11530:	9b06      	ldr	r3, [sp, #24]
   11532:	3301      	adds	r3, #1
   11534:	9306      	str	r3, [sp, #24]
   11536:	2301      	movs	r3, #1
   11538:	f108 0801 	add.w	r8, r8, #1
   1153c:	9308      	str	r3, [sp, #32]
   1153e:	e56f      	b.n	11020 <_dtoa_r+0x560>
   11540:	4629      	mov	r1, r5
   11542:	9a08      	ldr	r2, [sp, #32]
   11544:	4620      	mov	r0, r4
   11546:	f7fb fadf 	bl	cb08 <__pow5mult>
   1154a:	4605      	mov	r5, r0
   1154c:	e55a      	b.n	11004 <_dtoa_r+0x544>
   1154e:	2a00      	cmp	r2, #0
   11550:	dd12      	ble.n	11578 <_dtoa_r+0xab8>
   11552:	4629      	mov	r1, r5
   11554:	2201      	movs	r2, #1
   11556:	4620      	mov	r0, r4
   11558:	9301      	str	r3, [sp, #4]
   1155a:	f7fb fb35 	bl	cbc8 <__lshift>
   1155e:	4651      	mov	r1, sl
   11560:	4605      	mov	r5, r0
   11562:	f7fb fba9 	bl	ccb8 <__mcmp>
   11566:	2800      	cmp	r0, #0
   11568:	9b01      	ldr	r3, [sp, #4]
   1156a:	f340 80e1 	ble.w	11730 <_dtoa_r+0xc70>
   1156e:	2b39      	cmp	r3, #57	; 0x39
   11570:	f000 80ca 	beq.w	11708 <_dtoa_r+0xc48>
   11574:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11578:	46b9      	mov	r9, r7
   1157a:	f809 3b01 	strb.w	r3, [r9], #1
   1157e:	9b04      	ldr	r3, [sp, #16]
   11580:	3301      	adds	r3, #1
   11582:	4637      	mov	r7, r6
   11584:	9304      	str	r3, [sp, #16]
   11586:	4646      	mov	r6, r8
   11588:	e5ba      	b.n	11100 <_dtoa_r+0x640>
   1158a:	ee38 8b08 	vadd.f64	d8, d8, d8
   1158e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11596:	dc0a      	bgt.n	115ae <_dtoa_r+0xaee>
   11598:	eeb4 8b46 	vcmp.f64	d8, d6
   1159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   115a0:	f47f acdc 	bne.w	10f5c <_dtoa_r+0x49c>
   115a4:	ee17 3a10 	vmov	r3, s14
   115a8:	07d8      	lsls	r0, r3, #31
   115aa:	f57f acd7 	bpl.w	10f5c <_dtoa_r+0x49c>
   115ae:	9a00      	ldr	r2, [sp, #0]
   115b0:	e454      	b.n	10e5c <_dtoa_r+0x39c>
   115b2:	6871      	ldr	r1, [r6, #4]
   115b4:	4620      	mov	r0, r4
   115b6:	f7fb f8a1 	bl	c6fc <_Balloc>
   115ba:	4607      	mov	r7, r0
   115bc:	2800      	cmp	r0, #0
   115be:	f000 80de 	beq.w	1177e <_dtoa_r+0xcbe>
   115c2:	6933      	ldr	r3, [r6, #16]
   115c4:	3302      	adds	r3, #2
   115c6:	009a      	lsls	r2, r3, #2
   115c8:	f106 010c 	add.w	r1, r6, #12
   115cc:	300c      	adds	r0, #12
   115ce:	f7f6 fa45 	bl	7a5c <memcpy>
   115d2:	4639      	mov	r1, r7
   115d4:	2201      	movs	r2, #1
   115d6:	4620      	mov	r0, r4
   115d8:	f7fb faf6 	bl	cbc8 <__lshift>
   115dc:	4680      	mov	r8, r0
   115de:	e5fe      	b.n	111de <_dtoa_r+0x71e>
   115e0:	9b06      	ldr	r3, [sp, #24]
   115e2:	eba3 0309 	sub.w	r3, r3, r9
   115e6:	9309      	str	r3, [sp, #36]	; 0x24
   115e8:	e4da      	b.n	10fa0 <_dtoa_r+0x4e0>
   115ea:	2b39      	cmp	r3, #57	; 0x39
   115ec:	f000 808c 	beq.w	11708 <_dtoa_r+0xc48>
   115f0:	46b9      	mov	r9, r7
   115f2:	3301      	adds	r3, #1
   115f4:	e7c1      	b.n	1157a <_dtoa_r+0xaba>
   115f6:	9a04      	ldr	r2, [sp, #16]
   115f8:	3201      	adds	r2, #1
   115fa:	4637      	mov	r7, r6
   115fc:	9204      	str	r2, [sp, #16]
   115fe:	4646      	mov	r6, r8
   11600:	e55f      	b.n	110c2 <_dtoa_r+0x602>
   11602:	4629      	mov	r1, r5
   11604:	4620      	mov	r0, r4
   11606:	f7fb fa7f 	bl	cb08 <__pow5mult>
   1160a:	4605      	mov	r5, r0
   1160c:	e4fa      	b.n	11004 <_dtoa_r+0x544>
   1160e:	bf00      	nop
   11610:	20000d38 	.word	0x20000d38
   11614:	200002a8 	.word	0x200002a8
   11618:	20000280 	.word	0x20000280
   1161c:	7ff00000 	.word	0x7ff00000
   11620:	4b5e      	ldr	r3, [pc, #376]	; (1179c <_dtoa_r+0xcdc>)
   11622:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   11626:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1162a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   1162e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   11632:	ee36 7b47 	vsub.f64	d7, d6, d7
   11636:	ec41 0b16 	vmov	d6, r0, r1
   1163a:	ee15 1a90 	vmov	r1, s11
   1163e:	ee23 3b06 	vmul.f64	d3, d3, d6
   11642:	9800      	ldr	r0, [sp, #0]
   11644:	3130      	adds	r1, #48	; 0x30
   11646:	2a01      	cmp	r2, #1
   11648:	f800 1b01 	strb.w	r1, [r0], #1
   1164c:	f000 8083 	beq.w	11756 <_dtoa_r+0xc96>
   11650:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11654:	9b00      	ldr	r3, [sp, #0]
   11656:	1899      	adds	r1, r3, r2
   11658:	ee27 7b04 	vmul.f64	d7, d7, d4
   1165c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11660:	ee16 3a90 	vmov	r3, s13
   11664:	3330      	adds	r3, #48	; 0x30
   11666:	f800 3b01 	strb.w	r3, [r0], #1
   1166a:	4281      	cmp	r1, r0
   1166c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11670:	ee37 7b45 	vsub.f64	d7, d7, d5
   11674:	d1f0      	bne.n	11658 <_dtoa_r+0xb98>
   11676:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1167a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1167e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11686:	f53f abe3 	bmi.w	10e50 <_dtoa_r+0x390>
   1168a:	ee36 6b43 	vsub.f64	d6, d6, d3
   1168e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11696:	f77f ac0d 	ble.w	10eb4 <_dtoa_r+0x3f4>
   1169a:	4689      	mov	r9, r1
   1169c:	3901      	subs	r1, #1
   1169e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   116a2:	2b30      	cmp	r3, #48	; 0x30
   116a4:	d0f9      	beq.n	1169a <_dtoa_r+0xbda>
   116a6:	1c73      	adds	r3, r6, #1
   116a8:	9304      	str	r3, [sp, #16]
   116aa:	e539      	b.n	11120 <_dtoa_r+0x660>
   116ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   116ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   116b2:	e6da      	b.n	1146a <_dtoa_r+0x9aa>
   116b4:	2002      	movs	r0, #2
   116b6:	eeb0 6b48 	vmov.f64	d6, d8
   116ba:	f7ff bb48 	b.w	10d4e <_dtoa_r+0x28e>
   116be:	f1b9 0f00 	cmp.w	r9, #0
   116c2:	f43f aeda 	beq.w	1147a <_dtoa_r+0x9ba>
   116c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   116c8:	2a00      	cmp	r2, #0
   116ca:	f77f abf3 	ble.w	10eb4 <_dtoa_r+0x3f4>
   116ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   116d2:	ee26 6b04 	vmul.f64	d6, d6, d4
   116d6:	3001      	adds	r0, #1
   116d8:	ee07 0a90 	vmov	s15, r0
   116dc:	9b04      	ldr	r3, [sp, #16]
   116de:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   116e2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   116e6:	eea6 7b05 	vfma.f64	d7, d6, d5
   116ea:	ee17 ca90 	vmov	ip, s15
   116ee:	ec51 0b17 	vmov	r0, r1, d7
   116f2:	1e5e      	subs	r6, r3, #1
   116f4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   116f8:	f7ff bb47 	b.w	10d8a <_dtoa_r+0x2ca>
   116fc:	9b04      	ldr	r3, [sp, #16]
   116fe:	3301      	adds	r3, #1
   11700:	9304      	str	r3, [sp, #16]
   11702:	2331      	movs	r3, #49	; 0x31
   11704:	f7ff bbb1 	b.w	10e6a <_dtoa_r+0x3aa>
   11708:	9b04      	ldr	r3, [sp, #16]
   1170a:	46bb      	mov	fp, r7
   1170c:	3301      	adds	r3, #1
   1170e:	9304      	str	r3, [sp, #16]
   11710:	2339      	movs	r3, #57	; 0x39
   11712:	4637      	mov	r7, r6
   11714:	f80b 3b01 	strb.w	r3, [fp], #1
   11718:	4646      	mov	r6, r8
   1171a:	e4e1      	b.n	110e0 <_dtoa_r+0x620>
   1171c:	f04f 0a00 	mov.w	sl, #0
   11720:	4656      	mov	r6, sl
   11722:	e653      	b.n	113cc <_dtoa_r+0x90c>
   11724:	9208      	str	r2, [sp, #32]
   11726:	e47b      	b.n	11020 <_dtoa_r+0x560>
   11728:	1c73      	adds	r3, r6, #1
   1172a:	9304      	str	r3, [sp, #16]
   1172c:	4689      	mov	r9, r1
   1172e:	e4f7      	b.n	11120 <_dtoa_r+0x660>
   11730:	f47f af22 	bne.w	11578 <_dtoa_r+0xab8>
   11734:	07da      	lsls	r2, r3, #31
   11736:	f57f af1f 	bpl.w	11578 <_dtoa_r+0xab8>
   1173a:	e718      	b.n	1156e <_dtoa_r+0xaae>
   1173c:	2b39      	cmp	r3, #57	; 0x39
   1173e:	d0e3      	beq.n	11708 <_dtoa_r+0xc48>
   11740:	f1b9 0f00 	cmp.w	r9, #0
   11744:	f73f af16 	bgt.w	11574 <_dtoa_r+0xab4>
   11748:	e716      	b.n	11578 <_dtoa_r+0xab8>
   1174a:	9b01      	ldr	r3, [sp, #4]
   1174c:	2b02      	cmp	r3, #2
   1174e:	f73f ae28 	bgt.w	113a2 <_dtoa_r+0x8e2>
   11752:	9704      	str	r7, [sp, #16]
   11754:	e5ba      	b.n	112cc <_dtoa_r+0x80c>
   11756:	4601      	mov	r1, r0
   11758:	e78d      	b.n	11676 <_dtoa_r+0xbb6>
   1175a:	9b01      	ldr	r3, [sp, #4]
   1175c:	2b02      	cmp	r3, #2
   1175e:	f73f ae20 	bgt.w	113a2 <_dtoa_r+0x8e2>
   11762:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11766:	9704      	str	r7, [sp, #16]
   11768:	e52b      	b.n	111c2 <_dtoa_r+0x702>
   1176a:	2002      	movs	r0, #2
   1176c:	f7ff baef 	b.w	10d4e <_dtoa_r+0x28e>
   11770:	4b0b      	ldr	r3, [pc, #44]	; (117a0 <_dtoa_r+0xce0>)
   11772:	480c      	ldr	r0, [pc, #48]	; (117a4 <_dtoa_r+0xce4>)
   11774:	2200      	movs	r2, #0
   11776:	f240 11af 	movw	r1, #431	; 0x1af
   1177a:	f7ff f8b1 	bl	108e0 <__assert_func>
   1177e:	4b08      	ldr	r3, [pc, #32]	; (117a0 <_dtoa_r+0xce0>)
   11780:	4808      	ldr	r0, [pc, #32]	; (117a4 <_dtoa_r+0xce4>)
   11782:	463a      	mov	r2, r7
   11784:	f240 21ef 	movw	r1, #751	; 0x2ef
   11788:	f7ff f8aa 	bl	108e0 <__assert_func>
   1178c:	4b06      	ldr	r3, [pc, #24]	; (117a8 <_dtoa_r+0xce8>)
   1178e:	9300      	str	r3, [sp, #0]
   11790:	f7ff b9d2 	b.w	10b38 <_dtoa_r+0x78>
   11794:	9b02      	ldr	r3, [sp, #8]
   11796:	9308      	str	r3, [sp, #32]
   11798:	e4f7      	b.n	1118a <_dtoa_r+0x6ca>
   1179a:	bf00      	nop
   1179c:	200002a8 	.word	0x200002a8
   117a0:	20000a4c 	.word	0x20000a4c
   117a4:	20000d3c 	.word	0x20000d3c
   117a8:	20000d2c 	.word	0x20000d2c

000117ac <_strtoul_l.constprop.0>:
   117ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117b0:	4607      	mov	r7, r0
   117b2:	484c      	ldr	r0, [pc, #304]	; (118e4 <_strtoul_l.constprop.0+0x138>)
   117b4:	460e      	mov	r6, r1
   117b6:	4635      	mov	r5, r6
   117b8:	f816 eb01 	ldrb.w	lr, [r6], #1
   117bc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   117c0:	f01c 0c08 	ands.w	ip, ip, #8
   117c4:	d1f7      	bne.n	117b6 <_strtoul_l.constprop.0+0xa>
   117c6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   117ca:	d05a      	beq.n	11882 <_strtoul_l.constprop.0+0xd6>
   117cc:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   117d0:	bf03      	ittte	eq
   117d2:	f896 e000 	ldrbeq.w	lr, [r6]
   117d6:	4664      	moveq	r4, ip
   117d8:	1cae      	addeq	r6, r5, #2
   117da:	4664      	movne	r4, ip
   117dc:	b15b      	cbz	r3, 117f6 <_strtoul_l.constprop.0+0x4a>
   117de:	2b10      	cmp	r3, #16
   117e0:	d054      	beq.n	1188c <_strtoul_l.constprop.0+0xe0>
   117e2:	f04f 38ff 	mov.w	r8, #4294967295
   117e6:	fbb8 f8f3 	udiv	r8, r8, r3
   117ea:	fb03 fa08 	mul.w	sl, r3, r8
   117ee:	ea6f 0a0a 	mvn.w	sl, sl
   117f2:	4699      	mov	r9, r3
   117f4:	e008      	b.n	11808 <_strtoul_l.constprop.0+0x5c>
   117f6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   117fa:	d05a      	beq.n	118b2 <_strtoul_l.constprop.0+0x106>
   117fc:	230a      	movs	r3, #10
   117fe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 118e8 <_strtoul_l.constprop.0+0x13c>
   11802:	f04f 0a05 	mov.w	sl, #5
   11806:	4699      	mov	r9, r3
   11808:	2500      	movs	r5, #0
   1180a:	4628      	mov	r0, r5
   1180c:	e005      	b.n	1181a <_strtoul_l.constprop.0+0x6e>
   1180e:	d02c      	beq.n	1186a <_strtoul_l.constprop.0+0xbe>
   11810:	fb09 c000 	mla	r0, r9, r0, ip
   11814:	2501      	movs	r5, #1
   11816:	f816 eb01 	ldrb.w	lr, [r6], #1
   1181a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   1181e:	f1bc 0f09 	cmp.w	ip, #9
   11822:	d906      	bls.n	11832 <_strtoul_l.constprop.0+0x86>
   11824:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11828:	f1bc 0f19 	cmp.w	ip, #25
   1182c:	d80b      	bhi.n	11846 <_strtoul_l.constprop.0+0x9a>
   1182e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11832:	4563      	cmp	r3, ip
   11834:	dd10      	ble.n	11858 <_strtoul_l.constprop.0+0xac>
   11836:	f1b5 3fff 	cmp.w	r5, #4294967295
   1183a:	d0ec      	beq.n	11816 <_strtoul_l.constprop.0+0x6a>
   1183c:	4540      	cmp	r0, r8
   1183e:	d9e6      	bls.n	1180e <_strtoul_l.constprop.0+0x62>
   11840:	f04f 35ff 	mov.w	r5, #4294967295
   11844:	e7e7      	b.n	11816 <_strtoul_l.constprop.0+0x6a>
   11846:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   1184a:	f1bc 0f19 	cmp.w	ip, #25
   1184e:	d803      	bhi.n	11858 <_strtoul_l.constprop.0+0xac>
   11850:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11854:	4563      	cmp	r3, ip
   11856:	dcee      	bgt.n	11836 <_strtoul_l.constprop.0+0x8a>
   11858:	1c6b      	adds	r3, r5, #1
   1185a:	d00b      	beq.n	11874 <_strtoul_l.constprop.0+0xc8>
   1185c:	b104      	cbz	r4, 11860 <_strtoul_l.constprop.0+0xb4>
   1185e:	4240      	negs	r0, r0
   11860:	b10a      	cbz	r2, 11866 <_strtoul_l.constprop.0+0xba>
   11862:	b965      	cbnz	r5, 1187e <_strtoul_l.constprop.0+0xd2>
   11864:	6011      	str	r1, [r2, #0]
   11866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1186a:	45d4      	cmp	ip, sl
   1186c:	ddd0      	ble.n	11810 <_strtoul_l.constprop.0+0x64>
   1186e:	f04f 35ff 	mov.w	r5, #4294967295
   11872:	e7d0      	b.n	11816 <_strtoul_l.constprop.0+0x6a>
   11874:	2322      	movs	r3, #34	; 0x22
   11876:	603b      	str	r3, [r7, #0]
   11878:	4628      	mov	r0, r5
   1187a:	2a00      	cmp	r2, #0
   1187c:	d0f3      	beq.n	11866 <_strtoul_l.constprop.0+0xba>
   1187e:	1e71      	subs	r1, r6, #1
   11880:	e7f0      	b.n	11864 <_strtoul_l.constprop.0+0xb8>
   11882:	f896 e000 	ldrb.w	lr, [r6]
   11886:	2401      	movs	r4, #1
   11888:	1cae      	adds	r6, r5, #2
   1188a:	e7a7      	b.n	117dc <_strtoul_l.constprop.0+0x30>
   1188c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11890:	d121      	bne.n	118d6 <_strtoul_l.constprop.0+0x12a>
   11892:	7830      	ldrb	r0, [r6, #0]
   11894:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11898:	2858      	cmp	r0, #88	; 0x58
   1189a:	d116      	bne.n	118ca <_strtoul_l.constprop.0+0x11e>
   1189c:	f04f 0910 	mov.w	r9, #16
   118a0:	f896 e001 	ldrb.w	lr, [r6, #1]
   118a4:	f04f 0a0f 	mov.w	sl, #15
   118a8:	3602      	adds	r6, #2
   118aa:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   118ae:	464b      	mov	r3, r9
   118b0:	e7aa      	b.n	11808 <_strtoul_l.constprop.0+0x5c>
   118b2:	7833      	ldrb	r3, [r6, #0]
   118b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   118b8:	2b58      	cmp	r3, #88	; 0x58
   118ba:	d0ef      	beq.n	1189c <_strtoul_l.constprop.0+0xf0>
   118bc:	2308      	movs	r3, #8
   118be:	f04f 0a07 	mov.w	sl, #7
   118c2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   118c6:	4699      	mov	r9, r3
   118c8:	e79e      	b.n	11808 <_strtoul_l.constprop.0+0x5c>
   118ca:	4699      	mov	r9, r3
   118cc:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   118d0:	f04f 0a0f 	mov.w	sl, #15
   118d4:	e798      	b.n	11808 <_strtoul_l.constprop.0+0x5c>
   118d6:	f04f 0a0f 	mov.w	sl, #15
   118da:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   118de:	4699      	mov	r9, r3
   118e0:	e792      	b.n	11808 <_strtoul_l.constprop.0+0x5c>
   118e2:	bf00      	nop
   118e4:	20000c29 	.word	0x20000c29
   118e8:	19999999 	.word	0x19999999

000118ec <_strtoul_r>:
   118ec:	f7ff bf5e 	b.w	117ac <_strtoul_l.constprop.0>

000118f0 <_strtoll_l.constprop.0>:
   118f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118f4:	b085      	sub	sp, #20
   118f6:	461f      	mov	r7, r3
   118f8:	4b57      	ldr	r3, [pc, #348]	; (11a58 <_strtoll_l.constprop.0+0x168>)
   118fa:	9003      	str	r0, [sp, #12]
   118fc:	468a      	mov	sl, r1
   118fe:	9200      	str	r2, [sp, #0]
   11900:	460d      	mov	r5, r1
   11902:	462a      	mov	r2, r5
   11904:	f815 4b01 	ldrb.w	r4, [r5], #1
   11908:	5d1e      	ldrb	r6, [r3, r4]
   1190a:	f016 0608 	ands.w	r6, r6, #8
   1190e:	d1f8      	bne.n	11902 <_strtoll_l.constprop.0+0x12>
   11910:	2c2d      	cmp	r4, #45	; 0x2d
   11912:	d075      	beq.n	11a00 <_strtoll_l.constprop.0+0x110>
   11914:	2c2b      	cmp	r4, #43	; 0x2b
   11916:	bf05      	ittet	eq
   11918:	782c      	ldrbeq	r4, [r5, #0]
   1191a:	9602      	streq	r6, [sp, #8]
   1191c:	9602      	strne	r6, [sp, #8]
   1191e:	1c95      	addeq	r5, r2, #2
   11920:	f04f 36ff 	mov.w	r6, #4294967295
   11924:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   11928:	b12f      	cbz	r7, 11936 <_strtoll_l.constprop.0+0x46>
   1192a:	2f10      	cmp	r7, #16
   1192c:	d06f      	beq.n	11a0e <_strtoll_l.constprop.0+0x11e>
   1192e:	46b8      	mov	r8, r7
   11930:	ea4f 79e7 	mov.w	r9, r7, asr #31
   11934:	e005      	b.n	11942 <_strtoll_l.constprop.0+0x52>
   11936:	2c30      	cmp	r4, #48	; 0x30
   11938:	d074      	beq.n	11a24 <_strtoll_l.constprop.0+0x134>
   1193a:	f04f 080a 	mov.w	r8, #10
   1193e:	46b9      	mov	r9, r7
   11940:	4647      	mov	r7, r8
   11942:	4642      	mov	r2, r8
   11944:	464b      	mov	r3, r9
   11946:	4630      	mov	r0, r6
   11948:	4659      	mov	r1, fp
   1194a:	f7f7 fc9d 	bl	9288 <__aeabi_uldivmod>
   1194e:	2300      	movs	r3, #0
   11950:	9201      	str	r2, [sp, #4]
   11952:	4684      	mov	ip, r0
   11954:	460a      	mov	r2, r1
   11956:	4618      	mov	r0, r3
   11958:	4619      	mov	r1, r3
   1195a:	e011      	b.n	11980 <_strtoll_l.constprop.0+0x90>
   1195c:	428a      	cmp	r2, r1
   1195e:	bf08      	it	eq
   11960:	4584      	cmpeq	ip, r0
   11962:	d03d      	beq.n	119e0 <_strtoll_l.constprop.0+0xf0>
   11964:	fb00 f309 	mul.w	r3, r0, r9
   11968:	fb08 3301 	mla	r3, r8, r1, r3
   1196c:	fba0 0108 	umull	r0, r1, r0, r8
   11970:	440b      	add	r3, r1
   11972:	eb1e 0000 	adds.w	r0, lr, r0
   11976:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   1197a:	2301      	movs	r3, #1
   1197c:	f815 4b01 	ldrb.w	r4, [r5], #1
   11980:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   11984:	f1be 0f09 	cmp.w	lr, #9
   11988:	d906      	bls.n	11998 <_strtoll_l.constprop.0+0xa8>
   1198a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1198e:	f1be 0f19 	cmp.w	lr, #25
   11992:	d80c      	bhi.n	119ae <_strtoll_l.constprop.0+0xbe>
   11994:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   11998:	4577      	cmp	r7, lr
   1199a:	dd11      	ble.n	119c0 <_strtoll_l.constprop.0+0xd0>
   1199c:	1c5c      	adds	r4, r3, #1
   1199e:	d0ed      	beq.n	1197c <_strtoll_l.constprop.0+0x8c>
   119a0:	4584      	cmp	ip, r0
   119a2:	eb72 0301 	sbcs.w	r3, r2, r1
   119a6:	d2d9      	bcs.n	1195c <_strtoll_l.constprop.0+0x6c>
   119a8:	f04f 33ff 	mov.w	r3, #4294967295
   119ac:	e7e6      	b.n	1197c <_strtoll_l.constprop.0+0x8c>
   119ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   119b2:	f1be 0f19 	cmp.w	lr, #25
   119b6:	d803      	bhi.n	119c0 <_strtoll_l.constprop.0+0xd0>
   119b8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   119bc:	4577      	cmp	r7, lr
   119be:	dced      	bgt.n	1199c <_strtoll_l.constprop.0+0xac>
   119c0:	1c5a      	adds	r2, r3, #1
   119c2:	d013      	beq.n	119ec <_strtoll_l.constprop.0+0xfc>
   119c4:	9a02      	ldr	r2, [sp, #8]
   119c6:	b112      	cbz	r2, 119ce <_strtoll_l.constprop.0+0xde>
   119c8:	4240      	negs	r0, r0
   119ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   119ce:	9a00      	ldr	r2, [sp, #0]
   119d0:	b11a      	cbz	r2, 119da <_strtoll_l.constprop.0+0xea>
   119d2:	bba3      	cbnz	r3, 11a3e <_strtoll_l.constprop.0+0x14e>
   119d4:	9b00      	ldr	r3, [sp, #0]
   119d6:	f8c3 a000 	str.w	sl, [r3]
   119da:	b005      	add	sp, #20
   119dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119e0:	9b01      	ldr	r3, [sp, #4]
   119e2:	4573      	cmp	r3, lr
   119e4:	dabe      	bge.n	11964 <_strtoll_l.constprop.0+0x74>
   119e6:	f04f 33ff 	mov.w	r3, #4294967295
   119ea:	e7c7      	b.n	1197c <_strtoll_l.constprop.0+0x8c>
   119ec:	9a03      	ldr	r2, [sp, #12]
   119ee:	2322      	movs	r3, #34	; 0x22
   119f0:	6013      	str	r3, [r2, #0]
   119f2:	9b00      	ldr	r3, [sp, #0]
   119f4:	b333      	cbz	r3, 11a44 <_strtoll_l.constprop.0+0x154>
   119f6:	f105 3aff 	add.w	sl, r5, #4294967295
   119fa:	4630      	mov	r0, r6
   119fc:	4659      	mov	r1, fp
   119fe:	e7e9      	b.n	119d4 <_strtoll_l.constprop.0+0xe4>
   11a00:	2301      	movs	r3, #1
   11a02:	782c      	ldrb	r4, [r5, #0]
   11a04:	9302      	str	r3, [sp, #8]
   11a06:	1c95      	adds	r5, r2, #2
   11a08:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   11a0c:	e78c      	b.n	11928 <_strtoll_l.constprop.0+0x38>
   11a0e:	2c30      	cmp	r4, #48	; 0x30
   11a10:	d104      	bne.n	11a1c <_strtoll_l.constprop.0+0x12c>
   11a12:	782b      	ldrb	r3, [r5, #0]
   11a14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11a18:	2b58      	cmp	r3, #88	; 0x58
   11a1a:	d008      	beq.n	11a2e <_strtoll_l.constprop.0+0x13e>
   11a1c:	46b8      	mov	r8, r7
   11a1e:	f04f 0900 	mov.w	r9, #0
   11a22:	e78e      	b.n	11942 <_strtoll_l.constprop.0+0x52>
   11a24:	782b      	ldrb	r3, [r5, #0]
   11a26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11a2a:	2b58      	cmp	r3, #88	; 0x58
   11a2c:	d10f      	bne.n	11a4e <_strtoll_l.constprop.0+0x15e>
   11a2e:	f04f 0810 	mov.w	r8, #16
   11a32:	786c      	ldrb	r4, [r5, #1]
   11a34:	f04f 0900 	mov.w	r9, #0
   11a38:	3502      	adds	r5, #2
   11a3a:	4647      	mov	r7, r8
   11a3c:	e781      	b.n	11942 <_strtoll_l.constprop.0+0x52>
   11a3e:	4606      	mov	r6, r0
   11a40:	468b      	mov	fp, r1
   11a42:	e7d8      	b.n	119f6 <_strtoll_l.constprop.0+0x106>
   11a44:	4630      	mov	r0, r6
   11a46:	4659      	mov	r1, fp
   11a48:	b005      	add	sp, #20
   11a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a4e:	f04f 0808 	mov.w	r8, #8
   11a52:	46b9      	mov	r9, r7
   11a54:	4647      	mov	r7, r8
   11a56:	e774      	b.n	11942 <_strtoll_l.constprop.0+0x52>
   11a58:	20000c29 	.word	0x20000c29

00011a5c <_strtoll_r>:
   11a5c:	f7ff bf48 	b.w	118f0 <_strtoll_l.constprop.0>

00011a60 <_strtoull_l.constprop.0>:
   11a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a64:	b085      	sub	sp, #20
   11a66:	468b      	mov	fp, r1
   11a68:	9201      	str	r2, [sp, #4]
   11a6a:	4a62      	ldr	r2, [pc, #392]	; (11bf4 <_strtoull_l.constprop.0+0x194>)
   11a6c:	9003      	str	r0, [sp, #12]
   11a6e:	461e      	mov	r6, r3
   11a70:	460d      	mov	r5, r1
   11a72:	4629      	mov	r1, r5
   11a74:	f815 4b01 	ldrb.w	r4, [r5], #1
   11a78:	5d13      	ldrb	r3, [r2, r4]
   11a7a:	f013 0308 	ands.w	r3, r3, #8
   11a7e:	d1f8      	bne.n	11a72 <_strtoull_l.constprop.0+0x12>
   11a80:	2c2d      	cmp	r4, #45	; 0x2d
   11a82:	f000 8082 	beq.w	11b8a <_strtoull_l.constprop.0+0x12a>
   11a86:	2c2b      	cmp	r4, #43	; 0x2b
   11a88:	bf03      	ittte	eq
   11a8a:	782c      	ldrbeq	r4, [r5, #0]
   11a8c:	9302      	streq	r3, [sp, #8]
   11a8e:	1c8d      	addeq	r5, r1, #2
   11a90:	9302      	strne	r3, [sp, #8]
   11a92:	b1be      	cbz	r6, 11ac4 <_strtoull_l.constprop.0+0x64>
   11a94:	2e10      	cmp	r6, #16
   11a96:	d07d      	beq.n	11b94 <_strtoull_l.constprop.0+0x134>
   11a98:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   11a9c:	4632      	mov	r2, r6
   11a9e:	4653      	mov	r3, sl
   11aa0:	f04f 30ff 	mov.w	r0, #4294967295
   11aa4:	f04f 31ff 	mov.w	r1, #4294967295
   11aa8:	f7f7 fbee 	bl	9288 <__aeabi_uldivmod>
   11aac:	4632      	mov	r2, r6
   11aae:	4607      	mov	r7, r0
   11ab0:	4688      	mov	r8, r1
   11ab2:	4653      	mov	r3, sl
   11ab4:	f04f 30ff 	mov.w	r0, #4294967295
   11ab8:	f04f 31ff 	mov.w	r1, #4294967295
   11abc:	46b1      	mov	r9, r6
   11abe:	f7f7 fbe3 	bl	9288 <__aeabi_uldivmod>
   11ac2:	e00a      	b.n	11ada <_strtoull_l.constprop.0+0x7a>
   11ac4:	2c30      	cmp	r4, #48	; 0x30
   11ac6:	d079      	beq.n	11bbc <_strtoull_l.constprop.0+0x15c>
   11ac8:	f04f 090a 	mov.w	r9, #10
   11acc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 11bf8 <_strtoull_l.constprop.0+0x198>
   11ad0:	46b2      	mov	sl, r6
   11ad2:	2205      	movs	r2, #5
   11ad4:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   11ad8:	464e      	mov	r6, r9
   11ada:	f04f 0c00 	mov.w	ip, #0
   11ade:	4660      	mov	r0, ip
   11ae0:	4661      	mov	r1, ip
   11ae2:	e011      	b.n	11b08 <_strtoull_l.constprop.0+0xa8>
   11ae4:	4541      	cmp	r1, r8
   11ae6:	bf08      	it	eq
   11ae8:	42b8      	cmpeq	r0, r7
   11aea:	d03e      	beq.n	11b6a <_strtoull_l.constprop.0+0x10a>
   11aec:	fb00 f40a 	mul.w	r4, r0, sl
   11af0:	fb09 4101 	mla	r1, r9, r1, r4
   11af4:	fba0 0409 	umull	r0, r4, r0, r9
   11af8:	4421      	add	r1, r4
   11afa:	1818      	adds	r0, r3, r0
   11afc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   11b00:	f04f 0c01 	mov.w	ip, #1
   11b04:	f815 4b01 	ldrb.w	r4, [r5], #1
   11b08:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   11b0c:	2b09      	cmp	r3, #9
   11b0e:	d905      	bls.n	11b1c <_strtoull_l.constprop.0+0xbc>
   11b10:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   11b14:	2b19      	cmp	r3, #25
   11b16:	d80d      	bhi.n	11b34 <_strtoull_l.constprop.0+0xd4>
   11b18:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   11b1c:	429e      	cmp	r6, r3
   11b1e:	dd11      	ble.n	11b44 <_strtoull_l.constprop.0+0xe4>
   11b20:	f1bc 3fff 	cmp.w	ip, #4294967295
   11b24:	d0ee      	beq.n	11b04 <_strtoull_l.constprop.0+0xa4>
   11b26:	4287      	cmp	r7, r0
   11b28:	eb78 0401 	sbcs.w	r4, r8, r1
   11b2c:	d2da      	bcs.n	11ae4 <_strtoull_l.constprop.0+0x84>
   11b2e:	f04f 3cff 	mov.w	ip, #4294967295
   11b32:	e7e7      	b.n	11b04 <_strtoull_l.constprop.0+0xa4>
   11b34:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   11b38:	2b19      	cmp	r3, #25
   11b3a:	d803      	bhi.n	11b44 <_strtoull_l.constprop.0+0xe4>
   11b3c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   11b40:	429e      	cmp	r6, r3
   11b42:	dced      	bgt.n	11b20 <_strtoull_l.constprop.0+0xc0>
   11b44:	f1bc 3fff 	cmp.w	ip, #4294967295
   11b48:	d014      	beq.n	11b74 <_strtoull_l.constprop.0+0x114>
   11b4a:	9b02      	ldr	r3, [sp, #8]
   11b4c:	b113      	cbz	r3, 11b54 <_strtoull_l.constprop.0+0xf4>
   11b4e:	4240      	negs	r0, r0
   11b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11b54:	9b01      	ldr	r3, [sp, #4]
   11b56:	b12b      	cbz	r3, 11b64 <_strtoull_l.constprop.0+0x104>
   11b58:	f1bc 0f00 	cmp.w	ip, #0
   11b5c:	d112      	bne.n	11b84 <_strtoull_l.constprop.0+0x124>
   11b5e:	9b01      	ldr	r3, [sp, #4]
   11b60:	f8c3 b000 	str.w	fp, [r3]
   11b64:	b005      	add	sp, #20
   11b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b6a:	4293      	cmp	r3, r2
   11b6c:	ddbe      	ble.n	11aec <_strtoull_l.constprop.0+0x8c>
   11b6e:	f04f 3cff 	mov.w	ip, #4294967295
   11b72:	e7c7      	b.n	11b04 <_strtoull_l.constprop.0+0xa4>
   11b74:	9a03      	ldr	r2, [sp, #12]
   11b76:	2322      	movs	r3, #34	; 0x22
   11b78:	6013      	str	r3, [r2, #0]
   11b7a:	9b01      	ldr	r3, [sp, #4]
   11b7c:	4660      	mov	r0, ip
   11b7e:	4661      	mov	r1, ip
   11b80:	2b00      	cmp	r3, #0
   11b82:	d0ef      	beq.n	11b64 <_strtoull_l.constprop.0+0x104>
   11b84:	f105 3bff 	add.w	fp, r5, #4294967295
   11b88:	e7e9      	b.n	11b5e <_strtoull_l.constprop.0+0xfe>
   11b8a:	2301      	movs	r3, #1
   11b8c:	782c      	ldrb	r4, [r5, #0]
   11b8e:	9302      	str	r3, [sp, #8]
   11b90:	1c8d      	adds	r5, r1, #2
   11b92:	e77e      	b.n	11a92 <_strtoull_l.constprop.0+0x32>
   11b94:	2c30      	cmp	r4, #48	; 0x30
   11b96:	d123      	bne.n	11be0 <_strtoull_l.constprop.0+0x180>
   11b98:	782b      	ldrb	r3, [r5, #0]
   11b9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11b9e:	2b58      	cmp	r3, #88	; 0x58
   11ba0:	d11b      	bne.n	11bda <_strtoull_l.constprop.0+0x17a>
   11ba2:	f04f 0910 	mov.w	r9, #16
   11ba6:	786c      	ldrb	r4, [r5, #1]
   11ba8:	220f      	movs	r2, #15
   11baa:	3502      	adds	r5, #2
   11bac:	f04f 37ff 	mov.w	r7, #4294967295
   11bb0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11bb4:	f04f 0a00 	mov.w	sl, #0
   11bb8:	464e      	mov	r6, r9
   11bba:	e78e      	b.n	11ada <_strtoull_l.constprop.0+0x7a>
   11bbc:	782b      	ldrb	r3, [r5, #0]
   11bbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11bc2:	2b58      	cmp	r3, #88	; 0x58
   11bc4:	d0ed      	beq.n	11ba2 <_strtoull_l.constprop.0+0x142>
   11bc6:	f04f 0908 	mov.w	r9, #8
   11bca:	46b2      	mov	sl, r6
   11bcc:	2207      	movs	r2, #7
   11bce:	f04f 37ff 	mov.w	r7, #4294967295
   11bd2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11bd6:	464e      	mov	r6, r9
   11bd8:	e77f      	b.n	11ada <_strtoull_l.constprop.0+0x7a>
   11bda:	f04f 0a00 	mov.w	sl, #0
   11bde:	e75d      	b.n	11a9c <_strtoull_l.constprop.0+0x3c>
   11be0:	220f      	movs	r2, #15
   11be2:	f04f 37ff 	mov.w	r7, #4294967295
   11be6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11bea:	46b1      	mov	r9, r6
   11bec:	f04f 0a00 	mov.w	sl, #0
   11bf0:	e773      	b.n	11ada <_strtoull_l.constprop.0+0x7a>
   11bf2:	bf00      	nop
   11bf4:	20000c29 	.word	0x20000c29
   11bf8:	19999999 	.word	0x19999999

00011bfc <_strtoull_r>:
   11bfc:	f7ff bf30 	b.w	11a60 <_strtoull_l.constprop.0>

00011c00 <_mbrtowc_r>:
   11c00:	b570      	push	{r4, r5, r6, lr}
   11c02:	b082      	sub	sp, #8
   11c04:	4604      	mov	r4, r0
   11c06:	9d06      	ldr	r5, [sp, #24]
   11c08:	b155      	cbz	r5, 11c20 <_mbrtowc_r+0x20>
   11c0a:	b16a      	cbz	r2, 11c28 <_mbrtowc_r+0x28>
   11c0c:	480f      	ldr	r0, [pc, #60]	; (11c4c <_mbrtowc_r+0x4c>)
   11c0e:	9500      	str	r5, [sp, #0]
   11c10:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   11c14:	4620      	mov	r0, r4
   11c16:	47b0      	blx	r6
   11c18:	1c43      	adds	r3, r0, #1
   11c1a:	d010      	beq.n	11c3e <_mbrtowc_r+0x3e>
   11c1c:	b002      	add	sp, #8
   11c1e:	bd70      	pop	{r4, r5, r6, pc}
   11c20:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   11c24:	2a00      	cmp	r2, #0
   11c26:	d1f1      	bne.n	11c0c <_mbrtowc_r+0xc>
   11c28:	4b08      	ldr	r3, [pc, #32]	; (11c4c <_mbrtowc_r+0x4c>)
   11c2a:	9500      	str	r5, [sp, #0]
   11c2c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   11c30:	4611      	mov	r1, r2
   11c32:	2301      	movs	r3, #1
   11c34:	4a06      	ldr	r2, [pc, #24]	; (11c50 <_mbrtowc_r+0x50>)
   11c36:	4620      	mov	r0, r4
   11c38:	47b0      	blx	r6
   11c3a:	1c43      	adds	r3, r0, #1
   11c3c:	d1ee      	bne.n	11c1c <_mbrtowc_r+0x1c>
   11c3e:	2200      	movs	r2, #0
   11c40:	238a      	movs	r3, #138	; 0x8a
   11c42:	602a      	str	r2, [r5, #0]
   11c44:	6023      	str	r3, [r4, #0]
   11c46:	b002      	add	sp, #8
   11c48:	bd70      	pop	{r4, r5, r6, pc}
   11c4a:	bf00      	nop
   11c4c:	20008770 	.word	0x20008770
   11c50:	200081a8 	.word	0x200081a8

00011c54 <_wcrtomb_r>:
   11c54:	b570      	push	{r4, r5, r6, lr}
   11c56:	4605      	mov	r5, r0
   11c58:	b084      	sub	sp, #16
   11c5a:	b15b      	cbz	r3, 11c74 <_wcrtomb_r+0x20>
   11c5c:	461c      	mov	r4, r3
   11c5e:	b169      	cbz	r1, 11c7c <_wcrtomb_r+0x28>
   11c60:	4b0e      	ldr	r3, [pc, #56]	; (11c9c <_wcrtomb_r+0x48>)
   11c62:	4628      	mov	r0, r5
   11c64:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11c68:	4623      	mov	r3, r4
   11c6a:	47b0      	blx	r6
   11c6c:	1c43      	adds	r3, r0, #1
   11c6e:	d00f      	beq.n	11c90 <_wcrtomb_r+0x3c>
   11c70:	b004      	add	sp, #16
   11c72:	bd70      	pop	{r4, r5, r6, pc}
   11c74:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11c78:	2900      	cmp	r1, #0
   11c7a:	d1f1      	bne.n	11c60 <_wcrtomb_r+0xc>
   11c7c:	4a07      	ldr	r2, [pc, #28]	; (11c9c <_wcrtomb_r+0x48>)
   11c7e:	4623      	mov	r3, r4
   11c80:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11c84:	4628      	mov	r0, r5
   11c86:	460a      	mov	r2, r1
   11c88:	a901      	add	r1, sp, #4
   11c8a:	47b0      	blx	r6
   11c8c:	1c43      	adds	r3, r0, #1
   11c8e:	d1ef      	bne.n	11c70 <_wcrtomb_r+0x1c>
   11c90:	2200      	movs	r2, #0
   11c92:	238a      	movs	r3, #138	; 0x8a
   11c94:	6022      	str	r2, [r4, #0]
   11c96:	602b      	str	r3, [r5, #0]
   11c98:	b004      	add	sp, #16
   11c9a:	bd70      	pop	{r4, r5, r6, pc}
   11c9c:	20008770 	.word	0x20008770

00011ca0 <_wcsrtombs_r>:
   11ca0:	b510      	push	{r4, lr}
   11ca2:	b082      	sub	sp, #8
   11ca4:	9c04      	ldr	r4, [sp, #16]
   11ca6:	e9cd 3400 	strd	r3, r4, [sp]
   11caa:	f04f 33ff 	mov.w	r3, #4294967295
   11cae:	f001 fd9f 	bl	137f0 <_wcsnrtombs_r>
   11cb2:	b002      	add	sp, #8
   11cb4:	bd10      	pop	{r4, pc}
   11cb6:	bf00      	nop

00011cb8 <iswspace>:
   11cb8:	2100      	movs	r1, #0
   11cba:	f000 b801 	b.w	11cc0 <iswspace_l>
   11cbe:	bf00      	nop

00011cc0 <iswspace_l>:
   11cc0:	b510      	push	{r4, lr}
   11cc2:	f000 f8ab 	bl	11e1c <_jp2uc_l>
   11cc6:	4604      	mov	r4, r0
   11cc8:	f001 fda4 	bl	13814 <category>
   11ccc:	f1a0 031a 	sub.w	r3, r0, #26
   11cd0:	b2db      	uxtb	r3, r3
   11cd2:	2b02      	cmp	r3, #2
   11cd4:	d906      	bls.n	11ce4 <iswspace_l+0x24>
   11cd6:	f1a4 0009 	sub.w	r0, r4, #9
   11cda:	2804      	cmp	r0, #4
   11cdc:	bf8c      	ite	hi
   11cde:	2000      	movhi	r0, #0
   11ce0:	2001      	movls	r0, #1
   11ce2:	bd10      	pop	{r4, pc}
   11ce4:	2001      	movs	r0, #1
   11ce6:	bd10      	pop	{r4, pc}

00011ce8 <__jp2uc>:
   11ce8:	2902      	cmp	r1, #2
   11cea:	d032      	beq.n	11d52 <__jp2uc+0x6a>
   11cec:	2903      	cmp	r1, #3
   11cee:	f3c0 2307 	ubfx	r3, r0, #8, #8
   11cf2:	bf1d      	ittte	ne
   11cf4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   11cf8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   11cfc:	b2d2      	uxtbne	r2, r2
   11cfe:	b2c2      	uxtbeq	r2, r0
   11d00:	f103 0150 	add.w	r1, r3, #80	; 0x50
   11d04:	b2c9      	uxtb	r1, r1
   11d06:	291f      	cmp	r1, #31
   11d08:	d806      	bhi.n	11d18 <__jp2uc+0x30>
   11d0a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   11d0e:	4288      	cmp	r0, r1
   11d10:	d969      	bls.n	11de6 <__jp2uc+0xfe>
   11d12:	f04f 30ff 	mov.w	r0, #4294967295
   11d16:	4770      	bx	lr
   11d18:	f103 0130 	add.w	r1, r3, #48	; 0x30
   11d1c:	b2c9      	uxtb	r1, r1
   11d1e:	2924      	cmp	r1, #36	; 0x24
   11d20:	d80e      	bhi.n	11d40 <__jp2uc+0x58>
   11d22:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   11d26:	4288      	cmp	r0, r1
   11d28:	d8f3      	bhi.n	11d12 <__jp2uc+0x2a>
   11d2a:	3bd0      	subs	r3, #208	; 0xd0
   11d2c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   11d30:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   11d34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   11d38:	4a30      	ldr	r2, [pc, #192]	; (11dfc <__jp2uc+0x114>)
   11d3a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   11d3e:	4770      	bx	lr
   11d40:	3ba1      	subs	r3, #161	; 0xa1
   11d42:	2b07      	cmp	r3, #7
   11d44:	d8e5      	bhi.n	11d12 <__jp2uc+0x2a>
   11d46:	e8df f003 	tbb	[pc, r3]
   11d4a:	3e48      	.short	0x3e48
   11d4c:	25292e34 	.word	0x25292e34
   11d50:	1921      	.short	0x1921
   11d52:	b2c2      	uxtb	r2, r0
   11d54:	2a9e      	cmp	r2, #158	; 0x9e
   11d56:	f3c0 2107 	ubfx	r1, r0, #8, #8
   11d5a:	d90b      	bls.n	11d74 <__jp2uc+0x8c>
   11d5c:	3223      	adds	r2, #35	; 0x23
   11d5e:	b2d2      	uxtb	r2, r2
   11d60:	2380      	movs	r3, #128	; 0x80
   11d62:	299f      	cmp	r1, #159	; 0x9f
   11d64:	bf94      	ite	ls
   11d66:	3970      	subls	r1, #112	; 0x70
   11d68:	3150      	addhi	r1, #80	; 0x50
   11d6a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   11d6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   11d72:	e7c5      	b.n	11d00 <__jp2uc+0x18>
   11d74:	3a7e      	subs	r2, #126	; 0x7e
   11d76:	b2d2      	uxtb	r2, r2
   11d78:	237f      	movs	r3, #127	; 0x7f
   11d7a:	e7f2      	b.n	11d62 <__jp2uc+0x7a>
   11d7c:	2ac0      	cmp	r2, #192	; 0xc0
   11d7e:	d8c8      	bhi.n	11d12 <__jp2uc+0x2a>
   11d80:	4b1f      	ldr	r3, [pc, #124]	; (11e00 <__jp2uc+0x118>)
   11d82:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   11d86:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11d8a:	4770      	bx	lr
   11d8c:	2af1      	cmp	r2, #241	; 0xf1
   11d8e:	d8c0      	bhi.n	11d12 <__jp2uc+0x2a>
   11d90:	4b1c      	ldr	r3, [pc, #112]	; (11e04 <__jp2uc+0x11c>)
   11d92:	e019      	b.n	11dc8 <__jp2uc+0xe0>
   11d94:	2ad8      	cmp	r2, #216	; 0xd8
   11d96:	d8bc      	bhi.n	11d12 <__jp2uc+0x2a>
   11d98:	4b1b      	ldr	r3, [pc, #108]	; (11e08 <__jp2uc+0x120>)
   11d9a:	e015      	b.n	11dc8 <__jp2uc+0xe0>
   11d9c:	2af6      	cmp	r2, #246	; 0xf6
   11d9e:	d8b8      	bhi.n	11d12 <__jp2uc+0x2a>
   11da0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   11da4:	4770      	bx	lr
   11da6:	2af3      	cmp	r2, #243	; 0xf3
   11da8:	d8b3      	bhi.n	11d12 <__jp2uc+0x2a>
   11daa:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   11dae:	3020      	adds	r0, #32
   11db0:	4770      	bx	lr
   11db2:	4b16      	ldr	r3, [pc, #88]	; (11e0c <__jp2uc+0x124>)
   11db4:	4413      	add	r3, r2
   11db6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   11dba:	2b00      	cmp	r3, #0
   11dbc:	d0a9      	beq.n	11d12 <__jp2uc+0x2a>
   11dbe:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   11dc2:	3060      	adds	r0, #96	; 0x60
   11dc4:	4770      	bx	lr
   11dc6:	4b12      	ldr	r3, [pc, #72]	; (11e10 <__jp2uc+0x128>)
   11dc8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   11dcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11dd0:	2800      	cmp	r0, #0
   11dd2:	bf08      	it	eq
   11dd4:	f04f 30ff 	moveq.w	r0, #4294967295
   11dd8:	4770      	bx	lr
   11dda:	4b0e      	ldr	r3, [pc, #56]	; (11e14 <__jp2uc+0x12c>)
   11ddc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   11de0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11de4:	4770      	bx	lr
   11de6:	3bb0      	subs	r3, #176	; 0xb0
   11de8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   11dec:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   11df0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   11df4:	4a08      	ldr	r2, [pc, #32]	; (11e18 <__jp2uc+0x130>)
   11df6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   11dfa:	4770      	bx	lr
   11dfc:	20005db8 	.word	0x20005db8
   11e00:	200010e0 	.word	0x200010e0
   11e04:	2000103c 	.word	0x2000103c
   11e08:	20000fcc 	.word	0x20000fcc
   11e0c:	20000f70 	.word	0x20000f70
   11e10:	20000eb4 	.word	0x20000eb4
   11e14:	20000df8 	.word	0x20000df8
   11e18:	20001120 	.word	0x20001120

00011e1c <_jp2uc_l>:
   11e1c:	b538      	push	{r3, r4, r5, lr}
   11e1e:	4605      	mov	r5, r0
   11e20:	b1b9      	cbz	r1, 11e52 <_jp2uc_l+0x36>
   11e22:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   11e26:	4912      	ldr	r1, [pc, #72]	; (11e70 <_jp2uc_l+0x54>)
   11e28:	4620      	mov	r0, r4
   11e2a:	f7f9 fc5d 	bl	b6e8 <strcmp>
   11e2e:	b928      	cbnz	r0, 11e3c <_jp2uc_l+0x20>
   11e30:	4628      	mov	r0, r5
   11e32:	2101      	movs	r1, #1
   11e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11e38:	f7ff bf56 	b.w	11ce8 <__jp2uc>
   11e3c:	490d      	ldr	r1, [pc, #52]	; (11e74 <_jp2uc_l+0x58>)
   11e3e:	4620      	mov	r0, r4
   11e40:	f7f9 fc52 	bl	b6e8 <strcmp>
   11e44:	b938      	cbnz	r0, 11e56 <_jp2uc_l+0x3a>
   11e46:	4628      	mov	r0, r5
   11e48:	2102      	movs	r1, #2
   11e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11e4e:	f7ff bf4b 	b.w	11ce8 <__jp2uc>
   11e52:	4c09      	ldr	r4, [pc, #36]	; (11e78 <_jp2uc_l+0x5c>)
   11e54:	e7e7      	b.n	11e26 <_jp2uc_l+0xa>
   11e56:	4909      	ldr	r1, [pc, #36]	; (11e7c <_jp2uc_l+0x60>)
   11e58:	4620      	mov	r0, r4
   11e5a:	f7f9 fc45 	bl	b6e8 <strcmp>
   11e5e:	b928      	cbnz	r0, 11e6c <_jp2uc_l+0x50>
   11e60:	4628      	mov	r0, r5
   11e62:	2103      	movs	r1, #3
   11e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11e68:	f7ff bf3e 	b.w	11ce8 <__jp2uc>
   11e6c:	4628      	mov	r0, r5
   11e6e:	bd38      	pop	{r3, r4, r5, pc}
   11e70:	20000d98 	.word	0x20000d98
   11e74:	20000d9c 	.word	0x20000d9c
   11e78:	2000889a 	.word	0x2000889a
   11e7c:	20000da4 	.word	0x20000da4

00011e80 <fiprintf>:
   11e80:	b40e      	push	{r1, r2, r3}
   11e82:	b510      	push	{r4, lr}
   11e84:	b083      	sub	sp, #12
   11e86:	ab05      	add	r3, sp, #20
   11e88:	4c06      	ldr	r4, [pc, #24]	; (11ea4 <fiprintf+0x24>)
   11e8a:	f853 2b04 	ldr.w	r2, [r3], #4
   11e8e:	9301      	str	r3, [sp, #4]
   11e90:	4601      	mov	r1, r0
   11e92:	6820      	ldr	r0, [r4, #0]
   11e94:	f000 f97c 	bl	12190 <_vfiprintf_r>
   11e98:	b003      	add	sp, #12
   11e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e9e:	b003      	add	sp, #12
   11ea0:	4770      	bx	lr
   11ea2:	bf00      	nop
   11ea4:	20008cf8 	.word	0x20008cf8

00011ea8 <__ssprint_r>:
   11ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eac:	6893      	ldr	r3, [r2, #8]
   11eae:	6817      	ldr	r7, [r2, #0]
   11eb0:	b083      	sub	sp, #12
   11eb2:	4692      	mov	sl, r2
   11eb4:	2b00      	cmp	r3, #0
   11eb6:	d070      	beq.n	11f9a <__ssprint_r+0xf2>
   11eb8:	4681      	mov	r9, r0
   11eba:	688a      	ldr	r2, [r1, #8]
   11ebc:	6808      	ldr	r0, [r1, #0]
   11ebe:	460c      	mov	r4, r1
   11ec0:	3708      	adds	r7, #8
   11ec2:	e043      	b.n	11f4c <__ssprint_r+0xa4>
   11ec4:	89a3      	ldrh	r3, [r4, #12]
   11ec6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11eca:	d02e      	beq.n	11f2a <__ssprint_r+0x82>
   11ecc:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   11ed0:	eba0 0801 	sub.w	r8, r0, r1
   11ed4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11ed8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   11edc:	f108 0001 	add.w	r0, r8, #1
   11ee0:	1076      	asrs	r6, r6, #1
   11ee2:	4428      	add	r0, r5
   11ee4:	42b0      	cmp	r0, r6
   11ee6:	4632      	mov	r2, r6
   11ee8:	bf84      	itt	hi
   11eea:	4606      	movhi	r6, r0
   11eec:	4632      	movhi	r2, r6
   11eee:	055b      	lsls	r3, r3, #21
   11ef0:	d537      	bpl.n	11f62 <__ssprint_r+0xba>
   11ef2:	4611      	mov	r1, r2
   11ef4:	4648      	mov	r0, r9
   11ef6:	f7f7 fb55 	bl	95a4 <_malloc_r>
   11efa:	9001      	str	r0, [sp, #4]
   11efc:	2800      	cmp	r0, #0
   11efe:	d03a      	beq.n	11f76 <__ssprint_r+0xce>
   11f00:	4642      	mov	r2, r8
   11f02:	6921      	ldr	r1, [r4, #16]
   11f04:	f7f5 fdaa 	bl	7a5c <memcpy>
   11f08:	89a2      	ldrh	r2, [r4, #12]
   11f0a:	9b01      	ldr	r3, [sp, #4]
   11f0c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11f14:	81a2      	strh	r2, [r4, #12]
   11f16:	eba6 0208 	sub.w	r2, r6, r8
   11f1a:	eb03 0008 	add.w	r0, r3, r8
   11f1e:	6166      	str	r6, [r4, #20]
   11f20:	60a2      	str	r2, [r4, #8]
   11f22:	6123      	str	r3, [r4, #16]
   11f24:	6020      	str	r0, [r4, #0]
   11f26:	462e      	mov	r6, r5
   11f28:	46a8      	mov	r8, r5
   11f2a:	4642      	mov	r2, r8
   11f2c:	4659      	mov	r1, fp
   11f2e:	f7f9 f9e5 	bl	b2fc <memmove>
   11f32:	f8da 3008 	ldr.w	r3, [sl, #8]
   11f36:	68a2      	ldr	r2, [r4, #8]
   11f38:	6820      	ldr	r0, [r4, #0]
   11f3a:	1b92      	subs	r2, r2, r6
   11f3c:	4440      	add	r0, r8
   11f3e:	1b5b      	subs	r3, r3, r5
   11f40:	60a2      	str	r2, [r4, #8]
   11f42:	6020      	str	r0, [r4, #0]
   11f44:	f8ca 3008 	str.w	r3, [sl, #8]
   11f48:	b33b      	cbz	r3, 11f9a <__ssprint_r+0xf2>
   11f4a:	3708      	adds	r7, #8
   11f4c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   11f50:	2d00      	cmp	r5, #0
   11f52:	d0fa      	beq.n	11f4a <__ssprint_r+0xa2>
   11f54:	42aa      	cmp	r2, r5
   11f56:	4616      	mov	r6, r2
   11f58:	4690      	mov	r8, r2
   11f5a:	d9b3      	bls.n	11ec4 <__ssprint_r+0x1c>
   11f5c:	462e      	mov	r6, r5
   11f5e:	46a8      	mov	r8, r5
   11f60:	e7e3      	b.n	11f2a <__ssprint_r+0x82>
   11f62:	4648      	mov	r0, r9
   11f64:	f7f7 fde6 	bl	9b34 <_realloc_r>
   11f68:	4603      	mov	r3, r0
   11f6a:	2800      	cmp	r0, #0
   11f6c:	d1d3      	bne.n	11f16 <__ssprint_r+0x6e>
   11f6e:	6921      	ldr	r1, [r4, #16]
   11f70:	4648      	mov	r0, r9
   11f72:	f7f9 fe97 	bl	bca4 <_free_r>
   11f76:	89a3      	ldrh	r3, [r4, #12]
   11f78:	220c      	movs	r2, #12
   11f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11f7e:	f8c9 2000 	str.w	r2, [r9]
   11f82:	f04f 30ff 	mov.w	r0, #4294967295
   11f86:	81a3      	strh	r3, [r4, #12]
   11f88:	2200      	movs	r2, #0
   11f8a:	2300      	movs	r3, #0
   11f8c:	f8ca 2008 	str.w	r2, [sl, #8]
   11f90:	f8ca 3004 	str.w	r3, [sl, #4]
   11f94:	b003      	add	sp, #12
   11f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f9a:	2000      	movs	r0, #0
   11f9c:	2300      	movs	r3, #0
   11f9e:	f8ca 3004 	str.w	r3, [sl, #4]
   11fa2:	b003      	add	sp, #12
   11fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011fa8 <_sungetc_r>:
   11fa8:	b538      	push	{r3, r4, r5, lr}
   11faa:	1c4b      	adds	r3, r1, #1
   11fac:	d01a      	beq.n	11fe4 <_sungetc_r+0x3c>
   11fae:	8993      	ldrh	r3, [r2, #12]
   11fb0:	4614      	mov	r4, r2
   11fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   11fb4:	f023 0320 	bic.w	r3, r3, #32
   11fb8:	81a3      	strh	r3, [r4, #12]
   11fba:	b2cd      	uxtb	r5, r1
   11fbc:	b1aa      	cbz	r2, 11fea <_sungetc_r+0x42>
   11fbe:	6862      	ldr	r2, [r4, #4]
   11fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11fc2:	429a      	cmp	r2, r3
   11fc4:	da09      	bge.n	11fda <_sungetc_r+0x32>
   11fc6:	6823      	ldr	r3, [r4, #0]
   11fc8:	1e5a      	subs	r2, r3, #1
   11fca:	6022      	str	r2, [r4, #0]
   11fcc:	f803 5c01 	strb.w	r5, [r3, #-1]
   11fd0:	6863      	ldr	r3, [r4, #4]
   11fd2:	3301      	adds	r3, #1
   11fd4:	6063      	str	r3, [r4, #4]
   11fd6:	4628      	mov	r0, r5
   11fd8:	bd38      	pop	{r3, r4, r5, pc}
   11fda:	4621      	mov	r1, r4
   11fdc:	f001 fa58 	bl	13490 <__submore>
   11fe0:	2800      	cmp	r0, #0
   11fe2:	d0f0      	beq.n	11fc6 <_sungetc_r+0x1e>
   11fe4:	f04f 35ff 	mov.w	r5, #4294967295
   11fe8:	e7f5      	b.n	11fd6 <_sungetc_r+0x2e>
   11fea:	6923      	ldr	r3, [r4, #16]
   11fec:	6822      	ldr	r2, [r4, #0]
   11fee:	b12b      	cbz	r3, 11ffc <_sungetc_r+0x54>
   11ff0:	4293      	cmp	r3, r2
   11ff2:	d203      	bcs.n	11ffc <_sungetc_r+0x54>
   11ff4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   11ff8:	42ab      	cmp	r3, r5
   11ffa:	d00f      	beq.n	1201c <_sungetc_r+0x74>
   11ffc:	6861      	ldr	r1, [r4, #4]
   11ffe:	63e1      	str	r1, [r4, #60]	; 0x3c
   12000:	4623      	mov	r3, r4
   12002:	63a2      	str	r2, [r4, #56]	; 0x38
   12004:	f104 0140 	add.w	r1, r4, #64	; 0x40
   12008:	2203      	movs	r2, #3
   1200a:	6362      	str	r2, [r4, #52]	; 0x34
   1200c:	6321      	str	r1, [r4, #48]	; 0x30
   1200e:	f803 5f42 	strb.w	r5, [r3, #66]!
   12012:	2201      	movs	r2, #1
   12014:	e9c4 3200 	strd	r3, r2, [r4]
   12018:	4628      	mov	r0, r5
   1201a:	bd38      	pop	{r3, r4, r5, pc}
   1201c:	6863      	ldr	r3, [r4, #4]
   1201e:	3a01      	subs	r2, #1
   12020:	3301      	adds	r3, #1
   12022:	e9c4 2300 	strd	r2, r3, [r4]
   12026:	e7d6      	b.n	11fd6 <_sungetc_r+0x2e>

00012028 <__ssrefill_r>:
   12028:	b510      	push	{r4, lr}
   1202a:	460c      	mov	r4, r1
   1202c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1202e:	b169      	cbz	r1, 1204c <__ssrefill_r+0x24>
   12030:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12034:	4299      	cmp	r1, r3
   12036:	d001      	beq.n	1203c <__ssrefill_r+0x14>
   12038:	f7f9 fe34 	bl	bca4 <_free_r>
   1203c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1203e:	6063      	str	r3, [r4, #4]
   12040:	2000      	movs	r0, #0
   12042:	6320      	str	r0, [r4, #48]	; 0x30
   12044:	b113      	cbz	r3, 1204c <__ssrefill_r+0x24>
   12046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12048:	6023      	str	r3, [r4, #0]
   1204a:	bd10      	pop	{r4, pc}
   1204c:	89a3      	ldrh	r3, [r4, #12]
   1204e:	6921      	ldr	r1, [r4, #16]
   12050:	2200      	movs	r2, #0
   12052:	f043 0320 	orr.w	r3, r3, #32
   12056:	e9c4 1200 	strd	r1, r2, [r4]
   1205a:	81a3      	strh	r3, [r4, #12]
   1205c:	f04f 30ff 	mov.w	r0, #4294967295
   12060:	bd10      	pop	{r4, pc}
   12062:	bf00      	nop

00012064 <_sfread_r>:
   12064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12068:	b085      	sub	sp, #20
   1206a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1206e:	fb02 f303 	mul.w	r3, r2, r3
   12072:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   12074:	9301      	str	r3, [sp, #4]
   12076:	b3a3      	cbz	r3, 120e2 <_sfread_r+0x7e>
   12078:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1207c:	9b01      	ldr	r3, [sp, #4]
   1207e:	4553      	cmp	r3, sl
   12080:	468b      	mov	fp, r1
   12082:	d946      	bls.n	12112 <_sfread_r+0xae>
   12084:	46a0      	mov	r8, r4
   12086:	9d01      	ldr	r5, [sp, #4]
   12088:	f858 1b40 	ldr.w	r1, [r8], #64
   1208c:	4607      	mov	r7, r0
   1208e:	2600      	movs	r6, #0
   12090:	4652      	mov	r2, sl
   12092:	4658      	mov	r0, fp
   12094:	f7f5 fce2 	bl	7a5c <memcpy>
   12098:	6823      	ldr	r3, [r4, #0]
   1209a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1209c:	4453      	add	r3, sl
   1209e:	46a9      	mov	r9, r5
   120a0:	e9c4 3600 	strd	r3, r6, [r4]
   120a4:	4611      	mov	r1, r2
   120a6:	4638      	mov	r0, r7
   120a8:	44d3      	add	fp, sl
   120aa:	eba5 050a 	sub.w	r5, r5, sl
   120ae:	b1e2      	cbz	r2, 120ea <_sfread_r+0x86>
   120b0:	4542      	cmp	r2, r8
   120b2:	d001      	beq.n	120b8 <_sfread_r+0x54>
   120b4:	f7f9 fdf6 	bl	bca4 <_free_r>
   120b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   120ba:	6326      	str	r6, [r4, #48]	; 0x30
   120bc:	6063      	str	r3, [r4, #4]
   120be:	b1a3      	cbz	r3, 120ea <_sfread_r+0x86>
   120c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   120c2:	6021      	str	r1, [r4, #0]
   120c4:	42ab      	cmp	r3, r5
   120c6:	469a      	mov	sl, r3
   120c8:	d3e2      	bcc.n	12090 <_sfread_r+0x2c>
   120ca:	9b02      	ldr	r3, [sp, #8]
   120cc:	9301      	str	r3, [sp, #4]
   120ce:	462a      	mov	r2, r5
   120d0:	4658      	mov	r0, fp
   120d2:	f7f5 fcc3 	bl	7a5c <memcpy>
   120d6:	e9d4 3200 	ldrd	r3, r2, [r4]
   120da:	1b52      	subs	r2, r2, r5
   120dc:	442b      	add	r3, r5
   120de:	e9c4 3200 	strd	r3, r2, [r4]
   120e2:	9801      	ldr	r0, [sp, #4]
   120e4:	b005      	add	sp, #20
   120e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ea:	9a01      	ldr	r2, [sp, #4]
   120ec:	9b03      	ldr	r3, [sp, #12]
   120ee:	4452      	add	r2, sl
   120f0:	eba2 0209 	sub.w	r2, r2, r9
   120f4:	fbb2 f3f3 	udiv	r3, r2, r3
   120f8:	9301      	str	r3, [sp, #4]
   120fa:	89a3      	ldrh	r3, [r4, #12]
   120fc:	6922      	ldr	r2, [r4, #16]
   120fe:	9801      	ldr	r0, [sp, #4]
   12100:	f043 0320 	orr.w	r3, r3, #32
   12104:	81a3      	strh	r3, [r4, #12]
   12106:	2300      	movs	r3, #0
   12108:	e9c4 2300 	strd	r2, r3, [r4]
   1210c:	b005      	add	sp, #20
   1210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12112:	6821      	ldr	r1, [r4, #0]
   12114:	461d      	mov	r5, r3
   12116:	e7d8      	b.n	120ca <_sfread_r+0x66>

00012118 <__sprint_r.part.0>:
   12118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1211c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1211e:	049c      	lsls	r4, r3, #18
   12120:	4690      	mov	r8, r2
   12122:	d52d      	bpl.n	12180 <__sprint_r.part.0+0x68>
   12124:	6893      	ldr	r3, [r2, #8]
   12126:	6812      	ldr	r2, [r2, #0]
   12128:	b343      	cbz	r3, 1217c <__sprint_r.part.0+0x64>
   1212a:	468b      	mov	fp, r1
   1212c:	4606      	mov	r6, r0
   1212e:	f102 0908 	add.w	r9, r2, #8
   12132:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12136:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1213a:	d015      	beq.n	12168 <__sprint_r.part.0+0x50>
   1213c:	3d04      	subs	r5, #4
   1213e:	2400      	movs	r4, #0
   12140:	e001      	b.n	12146 <__sprint_r.part.0+0x2e>
   12142:	42a7      	cmp	r7, r4
   12144:	d00e      	beq.n	12164 <__sprint_r.part.0+0x4c>
   12146:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1214a:	465a      	mov	r2, fp
   1214c:	4630      	mov	r0, r6
   1214e:	f001 fa97 	bl	13680 <_fputwc_r>
   12152:	1c43      	adds	r3, r0, #1
   12154:	f104 0401 	add.w	r4, r4, #1
   12158:	d1f3      	bne.n	12142 <__sprint_r.part.0+0x2a>
   1215a:	2300      	movs	r3, #0
   1215c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12164:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12168:	f02a 0a03 	bic.w	sl, sl, #3
   1216c:	eba3 030a 	sub.w	r3, r3, sl
   12170:	f8c8 3008 	str.w	r3, [r8, #8]
   12174:	f109 0908 	add.w	r9, r9, #8
   12178:	2b00      	cmp	r3, #0
   1217a:	d1da      	bne.n	12132 <__sprint_r.part.0+0x1a>
   1217c:	2000      	movs	r0, #0
   1217e:	e7ec      	b.n	1215a <__sprint_r.part.0+0x42>
   12180:	f001 f80c 	bl	1319c <__sfvwrite_r>
   12184:	2300      	movs	r3, #0
   12186:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1218a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1218e:	bf00      	nop

00012190 <_vfiprintf_r>:
   12190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	ed2d 8b02 	vpush	{d8}
   12198:	b0c5      	sub	sp, #276	; 0x114
   1219a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1219e:	4683      	mov	fp, r0
   121a0:	ee08 1a10 	vmov	s16, r1
   121a4:	4616      	mov	r6, r2
   121a6:	2100      	movs	r1, #0
   121a8:	2208      	movs	r2, #8
   121aa:	4650      	mov	r0, sl
   121ac:	461c      	mov	r4, r3
   121ae:	9307      	str	r3, [sp, #28]
   121b0:	f7f9 f920 	bl	b3f4 <memset>
   121b4:	f1bb 0f00 	cmp.w	fp, #0
   121b8:	d004      	beq.n	121c4 <_vfiprintf_r+0x34>
   121ba:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   121be:	2b00      	cmp	r3, #0
   121c0:	f000 86a0 	beq.w	12f04 <_vfiprintf_r+0xd74>
   121c4:	ee18 2a10 	vmov	r2, s16
   121c8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   121ca:	07db      	lsls	r3, r3, #31
   121cc:	f140 8513 	bpl.w	12bf6 <_vfiprintf_r+0xa66>
   121d0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   121d4:	b28a      	uxth	r2, r1
   121d6:	0495      	lsls	r5, r2, #18
   121d8:	d40b      	bmi.n	121f2 <_vfiprintf_r+0x62>
   121da:	ee18 3a10 	vmov	r3, s16
   121de:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   121e2:	8199      	strh	r1, [r3, #12]
   121e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   121e6:	b28a      	uxth	r2, r1
   121e8:	ee18 1a10 	vmov	r1, s16
   121ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   121f0:	664b      	str	r3, [r1, #100]	; 0x64
   121f2:	0710      	lsls	r0, r2, #28
   121f4:	f140 8105 	bpl.w	12402 <_vfiprintf_r+0x272>
   121f8:	ee18 3a10 	vmov	r3, s16
   121fc:	691b      	ldr	r3, [r3, #16]
   121fe:	2b00      	cmp	r3, #0
   12200:	f000 80ff 	beq.w	12402 <_vfiprintf_r+0x272>
   12204:	f002 031a 	and.w	r3, r2, #26
   12208:	2b0a      	cmp	r3, #10
   1220a:	f000 810a 	beq.w	12422 <_vfiprintf_r+0x292>
   1220e:	2300      	movs	r3, #0
   12210:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12214:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12218:	aa1b      	add	r2, sp, #108	; 0x6c
   1221a:	930c      	str	r3, [sp, #48]	; 0x30
   1221c:	9218      	str	r2, [sp, #96]	; 0x60
   1221e:	4691      	mov	r9, r2
   12220:	930b      	str	r3, [sp, #44]	; 0x2c
   12222:	9305      	str	r3, [sp, #20]
   12224:	46b0      	mov	r8, r6
   12226:	4644      	mov	r4, r8
   12228:	4ba8      	ldr	r3, [pc, #672]	; (124cc <_vfiprintf_r+0x33c>)
   1222a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1222e:	f7f9 f9ab 	bl	b588 <__locale_mb_cur_max>
   12232:	4622      	mov	r2, r4
   12234:	4603      	mov	r3, r0
   12236:	a912      	add	r1, sp, #72	; 0x48
   12238:	f8cd a000 	str.w	sl, [sp]
   1223c:	4658      	mov	r0, fp
   1223e:	47a8      	blx	r5
   12240:	2800      	cmp	r0, #0
   12242:	f000 8145 	beq.w	124d0 <_vfiprintf_r+0x340>
   12246:	f2c0 8139 	blt.w	124bc <_vfiprintf_r+0x32c>
   1224a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1224c:	2a25      	cmp	r2, #37	; 0x25
   1224e:	4603      	mov	r3, r0
   12250:	d001      	beq.n	12256 <_vfiprintf_r+0xc6>
   12252:	441c      	add	r4, r3
   12254:	e7e8      	b.n	12228 <_vfiprintf_r+0x98>
   12256:	ebb4 0608 	subs.w	r6, r4, r8
   1225a:	4605      	mov	r5, r0
   1225c:	f040 813c 	bne.w	124d8 <_vfiprintf_r+0x348>
   12260:	2300      	movs	r3, #0
   12262:	7861      	ldrb	r1, [r4, #1]
   12264:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12268:	f104 0801 	add.w	r8, r4, #1
   1226c:	9306      	str	r3, [sp, #24]
   1226e:	f04f 37ff 	mov.w	r7, #4294967295
   12272:	461e      	mov	r6, r3
   12274:	242b      	movs	r4, #43	; 0x2b
   12276:	f108 0801 	add.w	r8, r8, #1
   1227a:	f1a1 0320 	sub.w	r3, r1, #32
   1227e:	2b5a      	cmp	r3, #90	; 0x5a
   12280:	f200 8178 	bhi.w	12574 <_vfiprintf_r+0x3e4>
   12284:	e8df f013 	tbh	[pc, r3, lsl #1]
   12288:	017602b5 	.word	0x017602b5
   1228c:	02b00176 	.word	0x02b00176
   12290:	01760176 	.word	0x01760176
   12294:	006a0176 	.word	0x006a0176
   12298:	01760176 	.word	0x01760176
   1229c:	028d027d 	.word	0x028d027d
   122a0:	02880176 	.word	0x02880176
   122a4:	01760297 	.word	0x01760297
   122a8:	005b0292 	.word	0x005b0292
   122ac:	005b005b 	.word	0x005b005b
   122b0:	005b005b 	.word	0x005b005b
   122b4:	005b005b 	.word	0x005b005b
   122b8:	005b005b 	.word	0x005b005b
   122bc:	01760176 	.word	0x01760176
   122c0:	01760176 	.word	0x01760176
   122c4:	01760176 	.word	0x01760176
   122c8:	01760176 	.word	0x01760176
   122cc:	025c0176 	.word	0x025c0176
   122d0:	01760084 	.word	0x01760084
   122d4:	01760176 	.word	0x01760176
   122d8:	01760176 	.word	0x01760176
   122dc:	01760176 	.word	0x01760176
   122e0:	01760176 	.word	0x01760176
   122e4:	00e80176 	.word	0x00e80176
   122e8:	01760176 	.word	0x01760176
   122ec:	02330176 	.word	0x02330176
   122f0:	02da0176 	.word	0x02da0176
   122f4:	01760176 	.word	0x01760176
   122f8:	0176058b 	.word	0x0176058b
   122fc:	01760176 	.word	0x01760176
   12300:	01760176 	.word	0x01760176
   12304:	01760176 	.word	0x01760176
   12308:	01760176 	.word	0x01760176
   1230c:	025c0176 	.word	0x025c0176
   12310:	01760086 	.word	0x01760086
   12314:	01760176 	.word	0x01760176
   12318:	008602cd 	.word	0x008602cd
   1231c:	0176007f 	.word	0x0176007f
   12320:	017602c0 	.word	0x017602c0
   12324:	00ea02fd 	.word	0x00ea02fd
   12328:	007f02ed 	.word	0x007f02ed
   1232c:	02330176 	.word	0x02330176
   12330:	0569007c 	.word	0x0569007c
   12334:	01760176 	.word	0x01760176
   12338:	0176056b 	.word	0x0176056b
   1233c:	007c      	.short	0x007c
   1233e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12342:	2200      	movs	r2, #0
   12344:	f818 1b01 	ldrb.w	r1, [r8], #1
   12348:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1234c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12350:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12354:	2b09      	cmp	r3, #9
   12356:	d9f5      	bls.n	12344 <_vfiprintf_r+0x1b4>
   12358:	9206      	str	r2, [sp, #24]
   1235a:	e78e      	b.n	1227a <_vfiprintf_r+0xea>
   1235c:	4658      	mov	r0, fp
   1235e:	f7fe fa7d 	bl	1085c <_localeconv_r>
   12362:	6843      	ldr	r3, [r0, #4]
   12364:	930d      	str	r3, [sp, #52]	; 0x34
   12366:	4618      	mov	r0, r3
   12368:	f7f9 fb8a 	bl	ba80 <strlen>
   1236c:	900e      	str	r0, [sp, #56]	; 0x38
   1236e:	4605      	mov	r5, r0
   12370:	4658      	mov	r0, fp
   12372:	f7fe fa73 	bl	1085c <_localeconv_r>
   12376:	6883      	ldr	r3, [r0, #8]
   12378:	930b      	str	r3, [sp, #44]	; 0x2c
   1237a:	2d00      	cmp	r5, #0
   1237c:	f040 84d6 	bne.w	12d2c <_vfiprintf_r+0xb9c>
   12380:	f898 1000 	ldrb.w	r1, [r8]
   12384:	e777      	b.n	12276 <_vfiprintf_r+0xe6>
   12386:	f898 1000 	ldrb.w	r1, [r8]
   1238a:	f046 0620 	orr.w	r6, r6, #32
   1238e:	e772      	b.n	12276 <_vfiprintf_r+0xe6>
   12390:	f046 0610 	orr.w	r6, r6, #16
   12394:	06b4      	lsls	r4, r6, #26
   12396:	f140 818e 	bpl.w	126b6 <_vfiprintf_r+0x526>
   1239a:	9b07      	ldr	r3, [sp, #28]
   1239c:	3307      	adds	r3, #7
   1239e:	f023 0307 	bic.w	r3, r3, #7
   123a2:	461a      	mov	r2, r3
   123a4:	6859      	ldr	r1, [r3, #4]
   123a6:	f852 3b08 	ldr.w	r3, [r2], #8
   123aa:	9207      	str	r2, [sp, #28]
   123ac:	460a      	mov	r2, r1
   123ae:	2900      	cmp	r1, #0
   123b0:	f2c0 8470 	blt.w	12c94 <_vfiprintf_r+0xb04>
   123b4:	1c79      	adds	r1, r7, #1
   123b6:	f000 85a2 	beq.w	12efe <_vfiprintf_r+0xd6e>
   123ba:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   123be:	9103      	str	r1, [sp, #12]
   123c0:	ea53 0102 	orrs.w	r1, r3, r2
   123c4:	f000 843f 	beq.w	12c46 <_vfiprintf_r+0xab6>
   123c8:	2b0a      	cmp	r3, #10
   123ca:	f172 0100 	sbcs.w	r1, r2, #0
   123ce:	f080 8541 	bcs.w	12e54 <_vfiprintf_r+0xcc4>
   123d2:	3330      	adds	r3, #48	; 0x30
   123d4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   123d8:	9e03      	ldr	r6, [sp, #12]
   123da:	2301      	movs	r3, #1
   123dc:	9304      	str	r3, [sp, #16]
   123de:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   123e2:	9b04      	ldr	r3, [sp, #16]
   123e4:	42bb      	cmp	r3, r7
   123e6:	bfb8      	it	lt
   123e8:	463b      	movlt	r3, r7
   123ea:	9303      	str	r3, [sp, #12]
   123ec:	2300      	movs	r3, #0
   123ee:	9308      	str	r3, [sp, #32]
   123f0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   123f4:	2b00      	cmp	r3, #0
   123f6:	f000 80cb 	beq.w	12590 <_vfiprintf_r+0x400>
   123fa:	9b03      	ldr	r3, [sp, #12]
   123fc:	3301      	adds	r3, #1
   123fe:	9303      	str	r3, [sp, #12]
   12400:	e0c6      	b.n	12590 <_vfiprintf_r+0x400>
   12402:	ee18 1a10 	vmov	r1, s16
   12406:	4658      	mov	r0, fp
   12408:	ee18 5a10 	vmov	r5, s16
   1240c:	f001 f87c 	bl	13508 <__swsetup_r>
   12410:	2800      	cmp	r0, #0
   12412:	f040 8652 	bne.w	130ba <_vfiprintf_r+0xf2a>
   12416:	89aa      	ldrh	r2, [r5, #12]
   12418:	f002 031a 	and.w	r3, r2, #26
   1241c:	2b0a      	cmp	r3, #10
   1241e:	f47f aef6 	bne.w	1220e <_vfiprintf_r+0x7e>
   12422:	ee18 1a10 	vmov	r1, s16
   12426:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1242a:	2b00      	cmp	r3, #0
   1242c:	f6ff aeef 	blt.w	1220e <_vfiprintf_r+0x7e>
   12430:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12432:	07db      	lsls	r3, r3, #31
   12434:	d402      	bmi.n	1243c <_vfiprintf_r+0x2ac>
   12436:	0597      	lsls	r7, r2, #22
   12438:	f140 8612 	bpl.w	13060 <_vfiprintf_r+0xed0>
   1243c:	ee18 1a10 	vmov	r1, s16
   12440:	4623      	mov	r3, r4
   12442:	4632      	mov	r2, r6
   12444:	4658      	mov	r0, fp
   12446:	f000 fe69 	bl	1311c <__sbprintf>
   1244a:	9005      	str	r0, [sp, #20]
   1244c:	9805      	ldr	r0, [sp, #20]
   1244e:	b045      	add	sp, #276	; 0x114
   12450:	ecbd 8b02 	vpop	{d8}
   12454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12458:	f046 0610 	orr.w	r6, r6, #16
   1245c:	f016 0220 	ands.w	r2, r6, #32
   12460:	f000 8136 	beq.w	126d0 <_vfiprintf_r+0x540>
   12464:	9b07      	ldr	r3, [sp, #28]
   12466:	3307      	adds	r3, #7
   12468:	f023 0307 	bic.w	r3, r3, #7
   1246c:	4619      	mov	r1, r3
   1246e:	685a      	ldr	r2, [r3, #4]
   12470:	f851 3b08 	ldr.w	r3, [r1], #8
   12474:	9107      	str	r1, [sp, #28]
   12476:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1247a:	9103      	str	r1, [sp, #12]
   1247c:	2100      	movs	r1, #0
   1247e:	2000      	movs	r0, #0
   12480:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12484:	1c78      	adds	r0, r7, #1
   12486:	f000 8210 	beq.w	128aa <_vfiprintf_r+0x71a>
   1248a:	9803      	ldr	r0, [sp, #12]
   1248c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12490:	ea53 0002 	orrs.w	r0, r3, r2
   12494:	f040 8208 	bne.w	128a8 <_vfiprintf_r+0x718>
   12498:	2f00      	cmp	r7, #0
   1249a:	f040 8538 	bne.w	12f0e <_vfiprintf_r+0xd7e>
   1249e:	2900      	cmp	r1, #0
   124a0:	f040 83d5 	bne.w	12c4e <_vfiprintf_r+0xabe>
   124a4:	9b03      	ldr	r3, [sp, #12]
   124a6:	f013 0301 	ands.w	r3, r3, #1
   124aa:	9304      	str	r3, [sp, #16]
   124ac:	f000 8411 	beq.w	12cd2 <_vfiprintf_r+0xb42>
   124b0:	2330      	movs	r3, #48	; 0x30
   124b2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   124b6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   124ba:	e792      	b.n	123e2 <_vfiprintf_r+0x252>
   124bc:	2208      	movs	r2, #8
   124be:	2100      	movs	r1, #0
   124c0:	4650      	mov	r0, sl
   124c2:	f7f8 ff97 	bl	b3f4 <memset>
   124c6:	2301      	movs	r3, #1
   124c8:	441c      	add	r4, r3
   124ca:	e6ad      	b.n	12228 <_vfiprintf_r+0x98>
   124cc:	20008770 	.word	0x20008770
   124d0:	ebb4 0608 	subs.w	r6, r4, r8
   124d4:	4605      	mov	r5, r0
   124d6:	d01b      	beq.n	12510 <_vfiprintf_r+0x380>
   124d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   124da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   124dc:	3301      	adds	r3, #1
   124de:	4432      	add	r2, r6
   124e0:	2b07      	cmp	r3, #7
   124e2:	e9c9 8600 	strd	r8, r6, [r9]
   124e6:	921a      	str	r2, [sp, #104]	; 0x68
   124e8:	9319      	str	r3, [sp, #100]	; 0x64
   124ea:	dd1c      	ble.n	12526 <_vfiprintf_r+0x396>
   124ec:	2a00      	cmp	r2, #0
   124ee:	f000 83a6 	beq.w	12c3e <_vfiprintf_r+0xaae>
   124f2:	ee18 1a10 	vmov	r1, s16
   124f6:	aa18      	add	r2, sp, #96	; 0x60
   124f8:	4658      	mov	r0, fp
   124fa:	f7ff fe0d 	bl	12118 <__sprint_r.part.0>
   124fe:	bb20      	cbnz	r0, 1254a <_vfiprintf_r+0x3ba>
   12500:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12504:	9b05      	ldr	r3, [sp, #20]
   12506:	4433      	add	r3, r6
   12508:	9305      	str	r3, [sp, #20]
   1250a:	2d00      	cmp	r5, #0
   1250c:	f47f aea8 	bne.w	12260 <_vfiprintf_r+0xd0>
   12510:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12512:	2b00      	cmp	r3, #0
   12514:	f040 85c1 	bne.w	1309a <_vfiprintf_r+0xf0a>
   12518:	ee18 3a10 	vmov	r3, s16
   1251c:	2200      	movs	r2, #0
   1251e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12522:	9219      	str	r2, [sp, #100]	; 0x64
   12524:	e015      	b.n	12552 <_vfiprintf_r+0x3c2>
   12526:	f109 0908 	add.w	r9, r9, #8
   1252a:	e7eb      	b.n	12504 <_vfiprintf_r+0x374>
   1252c:	ee18 1a10 	vmov	r1, s16
   12530:	aa18      	add	r2, sp, #96	; 0x60
   12532:	4658      	mov	r0, fp
   12534:	f7ff fdf0 	bl	12118 <__sprint_r.part.0>
   12538:	2800      	cmp	r0, #0
   1253a:	f000 80a6 	beq.w	1268a <_vfiprintf_r+0x4fa>
   1253e:	9b08      	ldr	r3, [sp, #32]
   12540:	b11b      	cbz	r3, 1254a <_vfiprintf_r+0x3ba>
   12542:	9908      	ldr	r1, [sp, #32]
   12544:	4658      	mov	r0, fp
   12546:	f7f9 fbad 	bl	bca4 <_free_r>
   1254a:	ee18 3a10 	vmov	r3, s16
   1254e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12552:	ee18 2a10 	vmov	r2, s16
   12556:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12558:	f012 0f01 	tst.w	r2, #1
   1255c:	b29a      	uxth	r2, r3
   1255e:	f000 80a0 	beq.w	126a2 <_vfiprintf_r+0x512>
   12562:	0650      	lsls	r0, r2, #25
   12564:	f100 85b2 	bmi.w	130cc <_vfiprintf_r+0xf3c>
   12568:	9805      	ldr	r0, [sp, #20]
   1256a:	b045      	add	sp, #276	; 0x114
   1256c:	ecbd 8b02 	vpop	{d8}
   12570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12574:	2900      	cmp	r1, #0
   12576:	d0cb      	beq.n	12510 <_vfiprintf_r+0x380>
   12578:	2300      	movs	r3, #0
   1257a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1257e:	2301      	movs	r3, #1
   12580:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12584:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12588:	ac2b      	add	r4, sp, #172	; 0xac
   1258a:	2300      	movs	r3, #0
   1258c:	9308      	str	r3, [sp, #32]
   1258e:	461f      	mov	r7, r3
   12590:	f016 0302 	ands.w	r3, r6, #2
   12594:	9309      	str	r3, [sp, #36]	; 0x24
   12596:	d002      	beq.n	1259e <_vfiprintf_r+0x40e>
   12598:	9b03      	ldr	r3, [sp, #12]
   1259a:	3302      	adds	r3, #2
   1259c:	9303      	str	r3, [sp, #12]
   1259e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   125a2:	930a      	str	r3, [sp, #40]	; 0x28
   125a4:	d105      	bne.n	125b2 <_vfiprintf_r+0x422>
   125a6:	9b06      	ldr	r3, [sp, #24]
   125a8:	9a03      	ldr	r2, [sp, #12]
   125aa:	1a9d      	subs	r5, r3, r2
   125ac:	2d00      	cmp	r5, #0
   125ae:	f300 827b 	bgt.w	12aa8 <_vfiprintf_r+0x918>
   125b2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   125b6:	1c41      	adds	r1, r0, #1
   125b8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   125bc:	b182      	cbz	r2, 125e0 <_vfiprintf_r+0x450>
   125be:	2201      	movs	r2, #1
   125c0:	3301      	adds	r3, #1
   125c2:	f8c9 2004 	str.w	r2, [r9, #4]
   125c6:	2907      	cmp	r1, #7
   125c8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   125cc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   125d0:	f8c9 2000 	str.w	r2, [r9]
   125d4:	f300 824a 	bgt.w	12a6c <_vfiprintf_r+0x8dc>
   125d8:	4608      	mov	r0, r1
   125da:	f109 0908 	add.w	r9, r9, #8
   125de:	3101      	adds	r1, #1
   125e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   125e2:	b1e2      	cbz	r2, 1261e <_vfiprintf_r+0x48e>
   125e4:	aa11      	add	r2, sp, #68	; 0x44
   125e6:	3302      	adds	r3, #2
   125e8:	f8c9 2000 	str.w	r2, [r9]
   125ec:	2907      	cmp	r1, #7
   125ee:	f04f 0202 	mov.w	r2, #2
   125f2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   125f6:	f8c9 2004 	str.w	r2, [r9, #4]
   125fa:	f340 8250 	ble.w	12a9e <_vfiprintf_r+0x90e>
   125fe:	2b00      	cmp	r3, #0
   12600:	f000 8343 	beq.w	12c8a <_vfiprintf_r+0xafa>
   12604:	ee18 1a10 	vmov	r1, s16
   12608:	aa18      	add	r2, sp, #96	; 0x60
   1260a:	4658      	mov	r0, fp
   1260c:	f7ff fd84 	bl	12118 <__sprint_r.part.0>
   12610:	2800      	cmp	r0, #0
   12612:	d194      	bne.n	1253e <_vfiprintf_r+0x3ae>
   12614:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12618:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1261c:	1c41      	adds	r1, r0, #1
   1261e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12620:	2a80      	cmp	r2, #128	; 0x80
   12622:	f000 8184 	beq.w	1292e <_vfiprintf_r+0x79e>
   12626:	9a04      	ldr	r2, [sp, #16]
   12628:	1abd      	subs	r5, r7, r2
   1262a:	2d00      	cmp	r5, #0
   1262c:	f300 81d7 	bgt.w	129de <_vfiprintf_r+0x84e>
   12630:	9a04      	ldr	r2, [sp, #16]
   12632:	f8c9 4000 	str.w	r4, [r9]
   12636:	4413      	add	r3, r2
   12638:	2907      	cmp	r1, #7
   1263a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1263e:	f8c9 2004 	str.w	r2, [r9, #4]
   12642:	f340 816e 	ble.w	12922 <_vfiprintf_r+0x792>
   12646:	2b00      	cmp	r3, #0
   12648:	f000 8275 	beq.w	12b36 <_vfiprintf_r+0x9a6>
   1264c:	ee18 1a10 	vmov	r1, s16
   12650:	aa18      	add	r2, sp, #96	; 0x60
   12652:	4658      	mov	r0, fp
   12654:	f7ff fd60 	bl	12118 <__sprint_r.part.0>
   12658:	2800      	cmp	r0, #0
   1265a:	f47f af70 	bne.w	1253e <_vfiprintf_r+0x3ae>
   1265e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12660:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12664:	0775      	lsls	r5, r6, #29
   12666:	d505      	bpl.n	12674 <_vfiprintf_r+0x4e4>
   12668:	9a06      	ldr	r2, [sp, #24]
   1266a:	9903      	ldr	r1, [sp, #12]
   1266c:	1a54      	subs	r4, r2, r1
   1266e:	2c00      	cmp	r4, #0
   12670:	f300 826b 	bgt.w	12b4a <_vfiprintf_r+0x9ba>
   12674:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12678:	9803      	ldr	r0, [sp, #12]
   1267a:	4281      	cmp	r1, r0
   1267c:	bfac      	ite	ge
   1267e:	1852      	addge	r2, r2, r1
   12680:	1812      	addlt	r2, r2, r0
   12682:	9205      	str	r2, [sp, #20]
   12684:	2b00      	cmp	r3, #0
   12686:	f47f af51 	bne.w	1252c <_vfiprintf_r+0x39c>
   1268a:	9908      	ldr	r1, [sp, #32]
   1268c:	2300      	movs	r3, #0
   1268e:	9319      	str	r3, [sp, #100]	; 0x64
   12690:	2900      	cmp	r1, #0
   12692:	f000 8149 	beq.w	12928 <_vfiprintf_r+0x798>
   12696:	4658      	mov	r0, fp
   12698:	f7f9 fb04 	bl	bca4 <_free_r>
   1269c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   126a0:	e5c1      	b.n	12226 <_vfiprintf_r+0x96>
   126a2:	059c      	lsls	r4, r3, #22
   126a4:	f53f af5d 	bmi.w	12562 <_vfiprintf_r+0x3d2>
   126a8:	ee18 4a10 	vmov	r4, s16
   126ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   126ae:	f7f9 f807 	bl	b6c0 <__retarget_lock_release_recursive>
   126b2:	89a2      	ldrh	r2, [r4, #12]
   126b4:	e755      	b.n	12562 <_vfiprintf_r+0x3d2>
   126b6:	06f0      	lsls	r0, r6, #27
   126b8:	9a07      	ldr	r2, [sp, #28]
   126ba:	f100 831f 	bmi.w	12cfc <_vfiprintf_r+0xb6c>
   126be:	0671      	lsls	r1, r6, #25
   126c0:	f140 8319 	bpl.w	12cf6 <_vfiprintf_r+0xb66>
   126c4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   126c8:	9207      	str	r2, [sp, #28]
   126ca:	17da      	asrs	r2, r3, #31
   126cc:	4611      	mov	r1, r2
   126ce:	e66e      	b.n	123ae <_vfiprintf_r+0x21e>
   126d0:	f016 0310 	ands.w	r3, r6, #16
   126d4:	9907      	ldr	r1, [sp, #28]
   126d6:	f040 8309 	bne.w	12cec <_vfiprintf_r+0xb5c>
   126da:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   126de:	f000 8301 	beq.w	12ce4 <_vfiprintf_r+0xb54>
   126e2:	461a      	mov	r2, r3
   126e4:	f851 3b04 	ldr.w	r3, [r1], #4
   126e8:	9107      	str	r1, [sp, #28]
   126ea:	b29b      	uxth	r3, r3
   126ec:	e6c3      	b.n	12476 <_vfiprintf_r+0x2e6>
   126ee:	9b07      	ldr	r3, [sp, #28]
   126f0:	461a      	mov	r2, r3
   126f2:	2300      	movs	r3, #0
   126f4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   126f8:	4613      	mov	r3, r2
   126fa:	f853 4b04 	ldr.w	r4, [r3], #4
   126fe:	9303      	str	r3, [sp, #12]
   12700:	2c00      	cmp	r4, #0
   12702:	f000 8412 	beq.w	12f2a <_vfiprintf_r+0xd9a>
   12706:	2953      	cmp	r1, #83	; 0x53
   12708:	f000 8365 	beq.w	12dd6 <_vfiprintf_r+0xc46>
   1270c:	f016 0510 	ands.w	r5, r6, #16
   12710:	f040 8361 	bne.w	12dd6 <_vfiprintf_r+0xc46>
   12714:	1c7b      	adds	r3, r7, #1
   12716:	f000 84b3 	beq.w	13080 <_vfiprintf_r+0xef0>
   1271a:	463a      	mov	r2, r7
   1271c:	4629      	mov	r1, r5
   1271e:	4620      	mov	r0, r4
   12720:	f7f9 f94e 	bl	b9c0 <memchr>
   12724:	9008      	str	r0, [sp, #32]
   12726:	2800      	cmp	r0, #0
   12728:	f000 849f 	beq.w	1306a <_vfiprintf_r+0xeda>
   1272c:	1b03      	subs	r3, r0, r4
   1272e:	9a03      	ldr	r2, [sp, #12]
   12730:	9304      	str	r3, [sp, #16]
   12732:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12736:	462f      	mov	r7, r5
   12738:	9207      	str	r2, [sp, #28]
   1273a:	9303      	str	r3, [sp, #12]
   1273c:	9508      	str	r5, [sp, #32]
   1273e:	e657      	b.n	123f0 <_vfiprintf_r+0x260>
   12740:	2943      	cmp	r1, #67	; 0x43
   12742:	d002      	beq.n	1274a <_vfiprintf_r+0x5ba>
   12744:	06f5      	lsls	r5, r6, #27
   12746:	f140 832d 	bpl.w	12da4 <_vfiprintf_r+0xc14>
   1274a:	9d07      	ldr	r5, [sp, #28]
   1274c:	2208      	movs	r2, #8
   1274e:	2100      	movs	r1, #0
   12750:	a816      	add	r0, sp, #88	; 0x58
   12752:	ac2b      	add	r4, sp, #172	; 0xac
   12754:	f7f8 fe4e 	bl	b3f4 <memset>
   12758:	ab16      	add	r3, sp, #88	; 0x58
   1275a:	f855 2b04 	ldr.w	r2, [r5], #4
   1275e:	4621      	mov	r1, r4
   12760:	4658      	mov	r0, fp
   12762:	f7ff fa77 	bl	11c54 <_wcrtomb_r>
   12766:	4603      	mov	r3, r0
   12768:	3301      	adds	r3, #1
   1276a:	9004      	str	r0, [sp, #16]
   1276c:	f000 84b3 	beq.w	130d6 <_vfiprintf_r+0xf46>
   12770:	9b04      	ldr	r3, [sp, #16]
   12772:	9507      	str	r5, [sp, #28]
   12774:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12778:	9303      	str	r3, [sp, #12]
   1277a:	2300      	movs	r3, #0
   1277c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12780:	e703      	b.n	1258a <_vfiprintf_r+0x3fa>
   12782:	9b07      	ldr	r3, [sp, #28]
   12784:	f853 2b04 	ldr.w	r2, [r3], #4
   12788:	9206      	str	r2, [sp, #24]
   1278a:	2a00      	cmp	r2, #0
   1278c:	f280 829c 	bge.w	12cc8 <_vfiprintf_r+0xb38>
   12790:	9a06      	ldr	r2, [sp, #24]
   12792:	4252      	negs	r2, r2
   12794:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12798:	f898 1000 	ldrb.w	r1, [r8]
   1279c:	f046 0604 	orr.w	r6, r6, #4
   127a0:	e569      	b.n	12276 <_vfiprintf_r+0xe6>
   127a2:	f898 1000 	ldrb.w	r1, [r8]
   127a6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   127aa:	e564      	b.n	12276 <_vfiprintf_r+0xe6>
   127ac:	f898 1000 	ldrb.w	r1, [r8]
   127b0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   127b4:	e55f      	b.n	12276 <_vfiprintf_r+0xe6>
   127b6:	4642      	mov	r2, r8
   127b8:	f812 1b01 	ldrb.w	r1, [r2], #1
   127bc:	292a      	cmp	r1, #42	; 0x2a
   127be:	f000 8496 	beq.w	130ee <_vfiprintf_r+0xf5e>
   127c2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   127c6:	2b09      	cmp	r3, #9
   127c8:	4690      	mov	r8, r2
   127ca:	f04f 0700 	mov.w	r7, #0
   127ce:	f63f ad54 	bhi.w	1227a <_vfiprintf_r+0xea>
   127d2:	f818 1b01 	ldrb.w	r1, [r8], #1
   127d6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   127da:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   127de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   127e2:	2b09      	cmp	r3, #9
   127e4:	d9f5      	bls.n	127d2 <_vfiprintf_r+0x642>
   127e6:	e548      	b.n	1227a <_vfiprintf_r+0xea>
   127e8:	f898 1000 	ldrb.w	r1, [r8]
   127ec:	f046 0601 	orr.w	r6, r6, #1
   127f0:	e541      	b.n	12276 <_vfiprintf_r+0xe6>
   127f2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   127f6:	2b00      	cmp	r3, #0
   127f8:	f47f adc2 	bne.w	12380 <_vfiprintf_r+0x1f0>
   127fc:	2320      	movs	r3, #32
   127fe:	f898 1000 	ldrb.w	r1, [r8]
   12802:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12806:	e536      	b.n	12276 <_vfiprintf_r+0xe6>
   12808:	f898 1000 	ldrb.w	r1, [r8]
   1280c:	296c      	cmp	r1, #108	; 0x6c
   1280e:	bf03      	ittte	eq
   12810:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12814:	f046 0620 	orreq.w	r6, r6, #32
   12818:	f108 0801 	addeq.w	r8, r8, #1
   1281c:	f046 0610 	orrne.w	r6, r6, #16
   12820:	e529      	b.n	12276 <_vfiprintf_r+0xe6>
   12822:	f898 1000 	ldrb.w	r1, [r8]
   12826:	2968      	cmp	r1, #104	; 0x68
   12828:	bf03      	ittte	eq
   1282a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1282e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12832:	f108 0801 	addeq.w	r8, r8, #1
   12836:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1283a:	e51c      	b.n	12276 <_vfiprintf_r+0xe6>
   1283c:	f046 0310 	orr.w	r3, r6, #16
   12840:	9303      	str	r3, [sp, #12]
   12842:	9b03      	ldr	r3, [sp, #12]
   12844:	f013 0220 	ands.w	r2, r3, #32
   12848:	f000 8206 	beq.w	12c58 <_vfiprintf_r+0xac8>
   1284c:	9b07      	ldr	r3, [sp, #28]
   1284e:	3307      	adds	r3, #7
   12850:	f023 0307 	bic.w	r3, r3, #7
   12854:	4619      	mov	r1, r3
   12856:	685a      	ldr	r2, [r3, #4]
   12858:	f851 3b08 	ldr.w	r3, [r1], #8
   1285c:	9107      	str	r1, [sp, #28]
   1285e:	2101      	movs	r1, #1
   12860:	e60d      	b.n	1247e <_vfiprintf_r+0x2ee>
   12862:	9a07      	ldr	r2, [sp, #28]
   12864:	f046 0302 	orr.w	r3, r6, #2
   12868:	9303      	str	r3, [sp, #12]
   1286a:	f852 3b04 	ldr.w	r3, [r2], #4
   1286e:	9207      	str	r2, [sp, #28]
   12870:	f647 0230 	movw	r2, #30768	; 0x7830
   12874:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12878:	4ab8      	ldr	r2, [pc, #736]	; (12b5c <_vfiprintf_r+0x9cc>)
   1287a:	920c      	str	r2, [sp, #48]	; 0x30
   1287c:	2102      	movs	r1, #2
   1287e:	2200      	movs	r2, #0
   12880:	e5fd      	b.n	1247e <_vfiprintf_r+0x2ee>
   12882:	06b7      	lsls	r7, r6, #26
   12884:	f100 8248 	bmi.w	12d18 <_vfiprintf_r+0xb88>
   12888:	06f5      	lsls	r5, r6, #27
   1288a:	f100 8346 	bmi.w	12f1a <_vfiprintf_r+0xd8a>
   1288e:	0674      	lsls	r4, r6, #25
   12890:	f100 83d5 	bmi.w	1303e <_vfiprintf_r+0xeae>
   12894:	05b0      	lsls	r0, r6, #22
   12896:	f140 8340 	bpl.w	12f1a <_vfiprintf_r+0xd8a>
   1289a:	9b07      	ldr	r3, [sp, #28]
   1289c:	9905      	ldr	r1, [sp, #20]
   1289e:	f853 2b04 	ldr.w	r2, [r3], #4
   128a2:	9307      	str	r3, [sp, #28]
   128a4:	7011      	strb	r1, [r2, #0]
   128a6:	e4be      	b.n	12226 <_vfiprintf_r+0x96>
   128a8:	9603      	str	r6, [sp, #12]
   128aa:	2901      	cmp	r1, #1
   128ac:	f43f ad8c 	beq.w	123c8 <_vfiprintf_r+0x238>
   128b0:	2902      	cmp	r1, #2
   128b2:	ac44      	add	r4, sp, #272	; 0x110
   128b4:	d111      	bne.n	128da <_vfiprintf_r+0x74a>
   128b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   128b8:	f003 010f 	and.w	r1, r3, #15
   128bc:	091b      	lsrs	r3, r3, #4
   128be:	5c41      	ldrb	r1, [r0, r1]
   128c0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   128c4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   128c8:	0912      	lsrs	r2, r2, #4
   128ca:	ea53 0102 	orrs.w	r1, r3, r2
   128ce:	d1f3      	bne.n	128b8 <_vfiprintf_r+0x728>
   128d0:	9e03      	ldr	r6, [sp, #12]
   128d2:	ab44      	add	r3, sp, #272	; 0x110
   128d4:	1b1b      	subs	r3, r3, r4
   128d6:	9304      	str	r3, [sp, #16]
   128d8:	e583      	b.n	123e2 <_vfiprintf_r+0x252>
   128da:	f003 0107 	and.w	r1, r3, #7
   128de:	08db      	lsrs	r3, r3, #3
   128e0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   128e4:	08d2      	lsrs	r2, r2, #3
   128e6:	3130      	adds	r1, #48	; 0x30
   128e8:	ea53 0502 	orrs.w	r5, r3, r2
   128ec:	4620      	mov	r0, r4
   128ee:	f804 1d01 	strb.w	r1, [r4, #-1]!
   128f2:	d1f2      	bne.n	128da <_vfiprintf_r+0x74a>
   128f4:	9e03      	ldr	r6, [sp, #12]
   128f6:	07f3      	lsls	r3, r6, #31
   128f8:	d5eb      	bpl.n	128d2 <_vfiprintf_r+0x742>
   128fa:	2930      	cmp	r1, #48	; 0x30
   128fc:	d0e8      	beq.n	128d0 <_vfiprintf_r+0x740>
   128fe:	2330      	movs	r3, #48	; 0x30
   12900:	3802      	subs	r0, #2
   12902:	f804 3c01 	strb.w	r3, [r4, #-1]
   12906:	ab44      	add	r3, sp, #272	; 0x110
   12908:	1a1b      	subs	r3, r3, r0
   1290a:	9e03      	ldr	r6, [sp, #12]
   1290c:	9304      	str	r3, [sp, #16]
   1290e:	4604      	mov	r4, r0
   12910:	e567      	b.n	123e2 <_vfiprintf_r+0x252>
   12912:	9b04      	ldr	r3, [sp, #16]
   12914:	941b      	str	r4, [sp, #108]	; 0x6c
   12916:	2201      	movs	r2, #1
   12918:	931c      	str	r3, [sp, #112]	; 0x70
   1291a:	931a      	str	r3, [sp, #104]	; 0x68
   1291c:	9219      	str	r2, [sp, #100]	; 0x64
   1291e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12922:	f109 0908 	add.w	r9, r9, #8
   12926:	e69d      	b.n	12664 <_vfiprintf_r+0x4d4>
   12928:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1292c:	e47b      	b.n	12226 <_vfiprintf_r+0x96>
   1292e:	9a06      	ldr	r2, [sp, #24]
   12930:	9d03      	ldr	r5, [sp, #12]
   12932:	1b55      	subs	r5, r2, r5
   12934:	2d00      	cmp	r5, #0
   12936:	f77f ae76 	ble.w	12626 <_vfiprintf_r+0x496>
   1293a:	2d10      	cmp	r5, #16
   1293c:	f340 83bb 	ble.w	130b6 <_vfiprintf_r+0xf26>
   12940:	9409      	str	r4, [sp, #36]	; 0x24
   12942:	ee18 4a10 	vmov	r4, s16
   12946:	e007      	b.n	12958 <_vfiprintf_r+0x7c8>
   12948:	f100 0c02 	add.w	ip, r0, #2
   1294c:	f109 0908 	add.w	r9, r9, #8
   12950:	4610      	mov	r0, r2
   12952:	3d10      	subs	r5, #16
   12954:	2d10      	cmp	r5, #16
   12956:	dd1e      	ble.n	12996 <_vfiprintf_r+0x806>
   12958:	4981      	ldr	r1, [pc, #516]	; (12b60 <_vfiprintf_r+0x9d0>)
   1295a:	f8c9 1000 	str.w	r1, [r9]
   1295e:	1c42      	adds	r2, r0, #1
   12960:	3310      	adds	r3, #16
   12962:	2110      	movs	r1, #16
   12964:	2a07      	cmp	r2, #7
   12966:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1296a:	f8c9 1004 	str.w	r1, [r9, #4]
   1296e:	ddeb      	ble.n	12948 <_vfiprintf_r+0x7b8>
   12970:	aa18      	add	r2, sp, #96	; 0x60
   12972:	2b00      	cmp	r3, #0
   12974:	d074      	beq.n	12a60 <_vfiprintf_r+0x8d0>
   12976:	4621      	mov	r1, r4
   12978:	4658      	mov	r0, fp
   1297a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1297e:	f7ff fbcb 	bl	12118 <__sprint_r.part.0>
   12982:	2800      	cmp	r0, #0
   12984:	f47f addb 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12988:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1298c:	3d10      	subs	r5, #16
   1298e:	2d10      	cmp	r5, #16
   12990:	f100 0c01 	add.w	ip, r0, #1
   12994:	dce0      	bgt.n	12958 <_vfiprintf_r+0x7c8>
   12996:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12998:	4a71      	ldr	r2, [pc, #452]	; (12b60 <_vfiprintf_r+0x9d0>)
   1299a:	f8c9 5004 	str.w	r5, [r9, #4]
   1299e:	442b      	add	r3, r5
   129a0:	f1bc 0f07 	cmp.w	ip, #7
   129a4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   129a8:	f8c9 2000 	str.w	r2, [r9]
   129ac:	f340 8194 	ble.w	12cd8 <_vfiprintf_r+0xb48>
   129b0:	2b00      	cmp	r3, #0
   129b2:	f000 831f 	beq.w	12ff4 <_vfiprintf_r+0xe64>
   129b6:	ee18 1a10 	vmov	r1, s16
   129ba:	aa18      	add	r2, sp, #96	; 0x60
   129bc:	4658      	mov	r0, fp
   129be:	f7ff fbab 	bl	12118 <__sprint_r.part.0>
   129c2:	2800      	cmp	r0, #0
   129c4:	f47f adbb 	bne.w	1253e <_vfiprintf_r+0x3ae>
   129c8:	9a04      	ldr	r2, [sp, #16]
   129ca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   129ce:	1abd      	subs	r5, r7, r2
   129d0:	2d00      	cmp	r5, #0
   129d2:	f100 0101 	add.w	r1, r0, #1
   129d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129da:	f77f ae29 	ble.w	12630 <_vfiprintf_r+0x4a0>
   129de:	2d10      	cmp	r5, #16
   129e0:	dd29      	ble.n	12a36 <_vfiprintf_r+0x8a6>
   129e2:	9409      	str	r4, [sp, #36]	; 0x24
   129e4:	2710      	movs	r7, #16
   129e6:	ee18 4a10 	vmov	r4, s16
   129ea:	e007      	b.n	129fc <_vfiprintf_r+0x86c>
   129ec:	f100 0c02 	add.w	ip, r0, #2
   129f0:	f109 0908 	add.w	r9, r9, #8
   129f4:	4610      	mov	r0, r2
   129f6:	3d10      	subs	r5, #16
   129f8:	2d10      	cmp	r5, #16
   129fa:	dd1a      	ble.n	12a32 <_vfiprintf_r+0x8a2>
   129fc:	1c42      	adds	r2, r0, #1
   129fe:	4958      	ldr	r1, [pc, #352]	; (12b60 <_vfiprintf_r+0x9d0>)
   12a00:	3310      	adds	r3, #16
   12a02:	2a07      	cmp	r2, #7
   12a04:	e9c9 1700 	strd	r1, r7, [r9]
   12a08:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12a0c:	ddee      	ble.n	129ec <_vfiprintf_r+0x85c>
   12a0e:	aa18      	add	r2, sp, #96	; 0x60
   12a10:	b303      	cbz	r3, 12a54 <_vfiprintf_r+0x8c4>
   12a12:	4621      	mov	r1, r4
   12a14:	4658      	mov	r0, fp
   12a16:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a1a:	f7ff fb7d 	bl	12118 <__sprint_r.part.0>
   12a1e:	2800      	cmp	r0, #0
   12a20:	f47f ad8d 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12a24:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12a28:	3d10      	subs	r5, #16
   12a2a:	2d10      	cmp	r5, #16
   12a2c:	f100 0c01 	add.w	ip, r0, #1
   12a30:	dce4      	bgt.n	129fc <_vfiprintf_r+0x86c>
   12a32:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12a34:	4661      	mov	r1, ip
   12a36:	4a4a      	ldr	r2, [pc, #296]	; (12b60 <_vfiprintf_r+0x9d0>)
   12a38:	f8c9 5004 	str.w	r5, [r9, #4]
   12a3c:	442b      	add	r3, r5
   12a3e:	2907      	cmp	r1, #7
   12a40:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12a44:	f8c9 2000 	str.w	r2, [r9]
   12a48:	f300 80e7 	bgt.w	12c1a <_vfiprintf_r+0xa8a>
   12a4c:	f109 0908 	add.w	r9, r9, #8
   12a50:	3101      	adds	r1, #1
   12a52:	e5ed      	b.n	12630 <_vfiprintf_r+0x4a0>
   12a54:	f04f 0c01 	mov.w	ip, #1
   12a58:	4618      	mov	r0, r3
   12a5a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a5e:	e7ca      	b.n	129f6 <_vfiprintf_r+0x866>
   12a60:	f04f 0c01 	mov.w	ip, #1
   12a64:	4618      	mov	r0, r3
   12a66:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a6a:	e772      	b.n	12952 <_vfiprintf_r+0x7c2>
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	f000 8104 	beq.w	12c7a <_vfiprintf_r+0xaea>
   12a72:	ee18 1a10 	vmov	r1, s16
   12a76:	aa18      	add	r2, sp, #96	; 0x60
   12a78:	4658      	mov	r0, fp
   12a7a:	f7ff fb4d 	bl	12118 <__sprint_r.part.0>
   12a7e:	2800      	cmp	r0, #0
   12a80:	f47f ad5d 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12a84:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12a88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a8c:	1c41      	adds	r1, r0, #1
   12a8e:	e5a7      	b.n	125e0 <_vfiprintf_r+0x450>
   12a90:	2302      	movs	r3, #2
   12a92:	aa11      	add	r2, sp, #68	; 0x44
   12a94:	931c      	str	r3, [sp, #112]	; 0x70
   12a96:	921b      	str	r2, [sp, #108]	; 0x6c
   12a98:	2101      	movs	r1, #1
   12a9a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a9e:	4608      	mov	r0, r1
   12aa0:	f109 0908 	add.w	r9, r9, #8
   12aa4:	1c41      	adds	r1, r0, #1
   12aa6:	e5ba      	b.n	1261e <_vfiprintf_r+0x48e>
   12aa8:	2d10      	cmp	r5, #16
   12aaa:	f340 82e5 	ble.w	13078 <_vfiprintf_r+0xee8>
   12aae:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12ab2:	940f      	str	r4, [sp, #60]	; 0x3c
   12ab4:	4608      	mov	r0, r1
   12ab6:	ee18 4a10 	vmov	r4, s16
   12aba:	e007      	b.n	12acc <_vfiprintf_r+0x93c>
   12abc:	f100 0c02 	add.w	ip, r0, #2
   12ac0:	f109 0908 	add.w	r9, r9, #8
   12ac4:	4610      	mov	r0, r2
   12ac6:	3d10      	subs	r5, #16
   12ac8:	2d10      	cmp	r5, #16
   12aca:	dd1d      	ble.n	12b08 <_vfiprintf_r+0x978>
   12acc:	4925      	ldr	r1, [pc, #148]	; (12b64 <_vfiprintf_r+0x9d4>)
   12ace:	f8c9 1000 	str.w	r1, [r9]
   12ad2:	1c42      	adds	r2, r0, #1
   12ad4:	3310      	adds	r3, #16
   12ad6:	2110      	movs	r1, #16
   12ad8:	2a07      	cmp	r2, #7
   12ada:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12ade:	f8c9 1004 	str.w	r1, [r9, #4]
   12ae2:	ddeb      	ble.n	12abc <_vfiprintf_r+0x92c>
   12ae4:	aa18      	add	r2, sp, #96	; 0x60
   12ae6:	b303      	cbz	r3, 12b2a <_vfiprintf_r+0x99a>
   12ae8:	4621      	mov	r1, r4
   12aea:	4658      	mov	r0, fp
   12aec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12af0:	f7ff fb12 	bl	12118 <__sprint_r.part.0>
   12af4:	2800      	cmp	r0, #0
   12af6:	f47f ad22 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12afa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12afe:	3d10      	subs	r5, #16
   12b00:	2d10      	cmp	r5, #16
   12b02:	f100 0c01 	add.w	ip, r0, #1
   12b06:	dce1      	bgt.n	12acc <_vfiprintf_r+0x93c>
   12b08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   12b0a:	4660      	mov	r0, ip
   12b0c:	4a15      	ldr	r2, [pc, #84]	; (12b64 <_vfiprintf_r+0x9d4>)
   12b0e:	f8c9 5004 	str.w	r5, [r9, #4]
   12b12:	442b      	add	r3, r5
   12b14:	2807      	cmp	r0, #7
   12b16:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12b1a:	f8c9 2000 	str.w	r2, [r9]
   12b1e:	f300 80c1 	bgt.w	12ca4 <_vfiprintf_r+0xb14>
   12b22:	f109 0908 	add.w	r9, r9, #8
   12b26:	1c41      	adds	r1, r0, #1
   12b28:	e546      	b.n	125b8 <_vfiprintf_r+0x428>
   12b2a:	4618      	mov	r0, r3
   12b2c:	f04f 0c01 	mov.w	ip, #1
   12b30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b34:	e7c7      	b.n	12ac6 <_vfiprintf_r+0x936>
   12b36:	0776      	lsls	r6, r6, #29
   12b38:	9319      	str	r3, [sp, #100]	; 0x64
   12b3a:	d553      	bpl.n	12be4 <_vfiprintf_r+0xa54>
   12b3c:	9a06      	ldr	r2, [sp, #24]
   12b3e:	9903      	ldr	r1, [sp, #12]
   12b40:	1a54      	subs	r4, r2, r1
   12b42:	2c00      	cmp	r4, #0
   12b44:	dd4e      	ble.n	12be4 <_vfiprintf_r+0xa54>
   12b46:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b4a:	2c10      	cmp	r4, #16
   12b4c:	f340 82b0 	ble.w	130b0 <_vfiprintf_r+0xf20>
   12b50:	9919      	ldr	r1, [sp, #100]	; 0x64
   12b52:	ee18 6a10 	vmov	r6, s16
   12b56:	2510      	movs	r5, #16
   12b58:	e00d      	b.n	12b76 <_vfiprintf_r+0x9e6>
   12b5a:	bf00      	nop
   12b5c:	20000dc4 	.word	0x20000dc4
   12b60:	20008618 	.word	0x20008618
   12b64:	20002880 	.word	0x20002880
   12b68:	1c88      	adds	r0, r1, #2
   12b6a:	f109 0908 	add.w	r9, r9, #8
   12b6e:	4611      	mov	r1, r2
   12b70:	3c10      	subs	r4, #16
   12b72:	2c10      	cmp	r4, #16
   12b74:	dd1a      	ble.n	12bac <_vfiprintf_r+0xa1c>
   12b76:	1c4a      	adds	r2, r1, #1
   12b78:	48b3      	ldr	r0, [pc, #716]	; (12e48 <_vfiprintf_r+0xcb8>)
   12b7a:	3310      	adds	r3, #16
   12b7c:	2a07      	cmp	r2, #7
   12b7e:	e9c9 0500 	strd	r0, r5, [r9]
   12b82:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12b86:	ddef      	ble.n	12b68 <_vfiprintf_r+0x9d8>
   12b88:	aa18      	add	r2, sp, #96	; 0x60
   12b8a:	b333      	cbz	r3, 12bda <_vfiprintf_r+0xa4a>
   12b8c:	4631      	mov	r1, r6
   12b8e:	4658      	mov	r0, fp
   12b90:	f7ff fac2 	bl	12118 <__sprint_r.part.0>
   12b94:	2800      	cmp	r0, #0
   12b96:	f47f acd2 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12b9a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12b9e:	3c10      	subs	r4, #16
   12ba0:	2c10      	cmp	r4, #16
   12ba2:	f101 0001 	add.w	r0, r1, #1
   12ba6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12baa:	dce4      	bgt.n	12b76 <_vfiprintf_r+0x9e6>
   12bac:	4aa6      	ldr	r2, [pc, #664]	; (12e48 <_vfiprintf_r+0xcb8>)
   12bae:	f8c9 4004 	str.w	r4, [r9, #4]
   12bb2:	4423      	add	r3, r4
   12bb4:	2807      	cmp	r0, #7
   12bb6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12bba:	f8c9 2000 	str.w	r2, [r9]
   12bbe:	f77f ad59 	ble.w	12674 <_vfiprintf_r+0x4e4>
   12bc2:	b17b      	cbz	r3, 12be4 <_vfiprintf_r+0xa54>
   12bc4:	ee18 1a10 	vmov	r1, s16
   12bc8:	aa18      	add	r2, sp, #96	; 0x60
   12bca:	4658      	mov	r0, fp
   12bcc:	f7ff faa4 	bl	12118 <__sprint_r.part.0>
   12bd0:	2800      	cmp	r0, #0
   12bd2:	f47f acb4 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12bd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12bd8:	e54c      	b.n	12674 <_vfiprintf_r+0x4e4>
   12bda:	2001      	movs	r0, #1
   12bdc:	4619      	mov	r1, r3
   12bde:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12be2:	e7c5      	b.n	12b70 <_vfiprintf_r+0x9e0>
   12be4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   12be8:	9903      	ldr	r1, [sp, #12]
   12bea:	428a      	cmp	r2, r1
   12bec:	bfac      	ite	ge
   12bee:	189b      	addge	r3, r3, r2
   12bf0:	185b      	addlt	r3, r3, r1
   12bf2:	9305      	str	r3, [sp, #20]
   12bf4:	e549      	b.n	1268a <_vfiprintf_r+0x4fa>
   12bf6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12bfa:	058f      	lsls	r7, r1, #22
   12bfc:	ee18 3a10 	vmov	r3, s16
   12c00:	b28a      	uxth	r2, r1
   12c02:	f53f aae8 	bmi.w	121d6 <_vfiprintf_r+0x46>
   12c06:	ee18 5a10 	vmov	r5, s16
   12c0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12c0c:	f7f8 fd56 	bl	b6bc <__retarget_lock_acquire_recursive>
   12c10:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   12c14:	b28a      	uxth	r2, r1
   12c16:	f7ff bade 	b.w	121d6 <_vfiprintf_r+0x46>
   12c1a:	2b00      	cmp	r3, #0
   12c1c:	f43f ae79 	beq.w	12912 <_vfiprintf_r+0x782>
   12c20:	ee18 1a10 	vmov	r1, s16
   12c24:	aa18      	add	r2, sp, #96	; 0x60
   12c26:	4658      	mov	r0, fp
   12c28:	f7ff fa76 	bl	12118 <__sprint_r.part.0>
   12c2c:	2800      	cmp	r0, #0
   12c2e:	f47f ac86 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12c32:	9919      	ldr	r1, [sp, #100]	; 0x64
   12c34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12c36:	3101      	adds	r1, #1
   12c38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c3c:	e4f8      	b.n	12630 <_vfiprintf_r+0x4a0>
   12c3e:	9219      	str	r2, [sp, #100]	; 0x64
   12c40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c44:	e45e      	b.n	12504 <_vfiprintf_r+0x374>
   12c46:	2f00      	cmp	r7, #0
   12c48:	f47f abc3 	bne.w	123d2 <_vfiprintf_r+0x242>
   12c4c:	9e03      	ldr	r6, [sp, #12]
   12c4e:	2700      	movs	r7, #0
   12c50:	9704      	str	r7, [sp, #16]
   12c52:	ac44      	add	r4, sp, #272	; 0x110
   12c54:	f7ff bbc5 	b.w	123e2 <_vfiprintf_r+0x252>
   12c58:	9b03      	ldr	r3, [sp, #12]
   12c5a:	f013 0310 	ands.w	r3, r3, #16
   12c5e:	d154      	bne.n	12d0a <_vfiprintf_r+0xb7a>
   12c60:	9a03      	ldr	r2, [sp, #12]
   12c62:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12c66:	f000 816b 	beq.w	12f40 <_vfiprintf_r+0xdb0>
   12c6a:	9907      	ldr	r1, [sp, #28]
   12c6c:	461a      	mov	r2, r3
   12c6e:	f851 3b04 	ldr.w	r3, [r1], #4
   12c72:	9107      	str	r1, [sp, #28]
   12c74:	b29b      	uxth	r3, r3
   12c76:	2101      	movs	r1, #1
   12c78:	e401      	b.n	1247e <_vfiprintf_r+0x2ee>
   12c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c7c:	2a00      	cmp	r2, #0
   12c7e:	d164      	bne.n	12d4a <_vfiprintf_r+0xbba>
   12c80:	4618      	mov	r0, r3
   12c82:	2101      	movs	r1, #1
   12c84:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c88:	e4c9      	b.n	1261e <_vfiprintf_r+0x48e>
   12c8a:	2101      	movs	r1, #1
   12c8c:	4618      	mov	r0, r3
   12c8e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c92:	e4c4      	b.n	1261e <_vfiprintf_r+0x48e>
   12c94:	425b      	negs	r3, r3
   12c96:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12c9a:	9603      	str	r6, [sp, #12]
   12c9c:	202d      	movs	r0, #45	; 0x2d
   12c9e:	2101      	movs	r1, #1
   12ca0:	f7ff bbee 	b.w	12480 <_vfiprintf_r+0x2f0>
   12ca4:	2b00      	cmp	r3, #0
   12ca6:	f000 8088 	beq.w	12dba <_vfiprintf_r+0xc2a>
   12caa:	ee18 1a10 	vmov	r1, s16
   12cae:	aa18      	add	r2, sp, #96	; 0x60
   12cb0:	4658      	mov	r0, fp
   12cb2:	f7ff fa31 	bl	12118 <__sprint_r.part.0>
   12cb6:	2800      	cmp	r0, #0
   12cb8:	f47f ac41 	bne.w	1253e <_vfiprintf_r+0x3ae>
   12cbc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12cc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12cc4:	1c41      	adds	r1, r0, #1
   12cc6:	e477      	b.n	125b8 <_vfiprintf_r+0x428>
   12cc8:	f898 1000 	ldrb.w	r1, [r8]
   12ccc:	9307      	str	r3, [sp, #28]
   12cce:	f7ff bad2 	b.w	12276 <_vfiprintf_r+0xe6>
   12cd2:	ac44      	add	r4, sp, #272	; 0x110
   12cd4:	f7ff bb85 	b.w	123e2 <_vfiprintf_r+0x252>
   12cd8:	f109 0908 	add.w	r9, r9, #8
   12cdc:	f10c 0101 	add.w	r1, ip, #1
   12ce0:	4660      	mov	r0, ip
   12ce2:	e4a0      	b.n	12626 <_vfiprintf_r+0x496>
   12ce4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12ce8:	f040 8197 	bne.w	1301a <_vfiprintf_r+0xe8a>
   12cec:	f851 3b04 	ldr.w	r3, [r1], #4
   12cf0:	9107      	str	r1, [sp, #28]
   12cf2:	f7ff bbc0 	b.w	12476 <_vfiprintf_r+0x2e6>
   12cf6:	05b3      	lsls	r3, r6, #22
   12cf8:	f100 8188 	bmi.w	1300c <_vfiprintf_r+0xe7c>
   12cfc:	f852 3b04 	ldr.w	r3, [r2], #4
   12d00:	9207      	str	r2, [sp, #28]
   12d02:	17da      	asrs	r2, r3, #31
   12d04:	4611      	mov	r1, r2
   12d06:	f7ff bb52 	b.w	123ae <_vfiprintf_r+0x21e>
   12d0a:	9907      	ldr	r1, [sp, #28]
   12d0c:	f851 3b04 	ldr.w	r3, [r1], #4
   12d10:	9107      	str	r1, [sp, #28]
   12d12:	2101      	movs	r1, #1
   12d14:	f7ff bbb3 	b.w	1247e <_vfiprintf_r+0x2ee>
   12d18:	9b07      	ldr	r3, [sp, #28]
   12d1a:	9805      	ldr	r0, [sp, #20]
   12d1c:	f853 1b04 	ldr.w	r1, [r3], #4
   12d20:	9307      	str	r3, [sp, #28]
   12d22:	17c2      	asrs	r2, r0, #31
   12d24:	e9c1 0200 	strd	r0, r2, [r1]
   12d28:	f7ff ba7d 	b.w	12226 <_vfiprintf_r+0x96>
   12d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12d2e:	2b00      	cmp	r3, #0
   12d30:	f43f ab26 	beq.w	12380 <_vfiprintf_r+0x1f0>
   12d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12d36:	781b      	ldrb	r3, [r3, #0]
   12d38:	2b00      	cmp	r3, #0
   12d3a:	f43f ab21 	beq.w	12380 <_vfiprintf_r+0x1f0>
   12d3e:	f898 1000 	ldrb.w	r1, [r8]
   12d42:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   12d46:	f7ff ba96 	b.w	12276 <_vfiprintf_r+0xe6>
   12d4a:	2302      	movs	r3, #2
   12d4c:	aa11      	add	r2, sp, #68	; 0x44
   12d4e:	931c      	str	r3, [sp, #112]	; 0x70
   12d50:	921b      	str	r2, [sp, #108]	; 0x6c
   12d52:	2001      	movs	r0, #1
   12d54:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d58:	e6a2      	b.n	12aa0 <_vfiprintf_r+0x910>
   12d5a:	9603      	str	r6, [sp, #12]
   12d5c:	e571      	b.n	12842 <_vfiprintf_r+0x6b2>
   12d5e:	4b3b      	ldr	r3, [pc, #236]	; (12e4c <_vfiprintf_r+0xcbc>)
   12d60:	930c      	str	r3, [sp, #48]	; 0x30
   12d62:	f016 0220 	ands.w	r2, r6, #32
   12d66:	d059      	beq.n	12e1c <_vfiprintf_r+0xc8c>
   12d68:	9b07      	ldr	r3, [sp, #28]
   12d6a:	3307      	adds	r3, #7
   12d6c:	f023 0307 	bic.w	r3, r3, #7
   12d70:	4618      	mov	r0, r3
   12d72:	685a      	ldr	r2, [r3, #4]
   12d74:	f850 3b08 	ldr.w	r3, [r0], #8
   12d78:	9007      	str	r0, [sp, #28]
   12d7a:	07f4      	lsls	r4, r6, #31
   12d7c:	d509      	bpl.n	12d92 <_vfiprintf_r+0xc02>
   12d7e:	ea53 0002 	orrs.w	r0, r3, r2
   12d82:	d006      	beq.n	12d92 <_vfiprintf_r+0xc02>
   12d84:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   12d88:	2130      	movs	r1, #48	; 0x30
   12d8a:	f046 0602 	orr.w	r6, r6, #2
   12d8e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   12d92:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12d96:	9103      	str	r1, [sp, #12]
   12d98:	2102      	movs	r1, #2
   12d9a:	f7ff bb70 	b.w	1247e <_vfiprintf_r+0x2ee>
   12d9e:	4b2c      	ldr	r3, [pc, #176]	; (12e50 <_vfiprintf_r+0xcc0>)
   12da0:	930c      	str	r3, [sp, #48]	; 0x30
   12da2:	e7de      	b.n	12d62 <_vfiprintf_r+0xbd2>
   12da4:	9b07      	ldr	r3, [sp, #28]
   12da6:	2101      	movs	r1, #1
   12da8:	f853 2b04 	ldr.w	r2, [r3], #4
   12dac:	9103      	str	r1, [sp, #12]
   12dae:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   12db2:	9307      	str	r3, [sp, #28]
   12db4:	9104      	str	r1, [sp, #16]
   12db6:	ac2b      	add	r4, sp, #172	; 0xac
   12db8:	e4df      	b.n	1277a <_vfiprintf_r+0x5ea>
   12dba:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12dbe:	2a00      	cmp	r2, #0
   12dc0:	f040 8132 	bne.w	13028 <_vfiprintf_r+0xe98>
   12dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12dc6:	2a00      	cmp	r2, #0
   12dc8:	f47f ae62 	bne.w	12a90 <_vfiprintf_r+0x900>
   12dcc:	4618      	mov	r0, r3
   12dce:	2101      	movs	r1, #1
   12dd0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12dd4:	e427      	b.n	12626 <_vfiprintf_r+0x496>
   12dd6:	2100      	movs	r1, #0
   12dd8:	2208      	movs	r2, #8
   12dda:	a816      	add	r0, sp, #88	; 0x58
   12ddc:	9413      	str	r4, [sp, #76]	; 0x4c
   12dde:	f7f8 fb09 	bl	b3f4 <memset>
   12de2:	1c79      	adds	r1, r7, #1
   12de4:	f000 80bc 	beq.w	12f60 <_vfiprintf_r+0xdd0>
   12de8:	2500      	movs	r5, #0
   12dea:	9407      	str	r4, [sp, #28]
   12dec:	462c      	mov	r4, r5
   12dee:	e00c      	b.n	12e0a <_vfiprintf_r+0xc7a>
   12df0:	a92b      	add	r1, sp, #172	; 0xac
   12df2:	4658      	mov	r0, fp
   12df4:	f7fe ff2e 	bl	11c54 <_wcrtomb_r>
   12df8:	1c42      	adds	r2, r0, #1
   12dfa:	4420      	add	r0, r4
   12dfc:	f000 816b 	beq.w	130d6 <_vfiprintf_r+0xf46>
   12e00:	42b8      	cmp	r0, r7
   12e02:	dc08      	bgt.n	12e16 <_vfiprintf_r+0xc86>
   12e04:	f000 8170 	beq.w	130e8 <_vfiprintf_r+0xf58>
   12e08:	4604      	mov	r4, r0
   12e0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12e0c:	5952      	ldr	r2, [r2, r5]
   12e0e:	ab16      	add	r3, sp, #88	; 0x58
   12e10:	3504      	adds	r5, #4
   12e12:	2a00      	cmp	r2, #0
   12e14:	d1ec      	bne.n	12df0 <_vfiprintf_r+0xc60>
   12e16:	9404      	str	r4, [sp, #16]
   12e18:	9c07      	ldr	r4, [sp, #28]
   12e1a:	e0af      	b.n	12f7c <_vfiprintf_r+0xdec>
   12e1c:	f016 0310 	ands.w	r3, r6, #16
   12e20:	9807      	ldr	r0, [sp, #28]
   12e22:	d10c      	bne.n	12e3e <_vfiprintf_r+0xcae>
   12e24:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   12e28:	d005      	beq.n	12e36 <_vfiprintf_r+0xca6>
   12e2a:	461a      	mov	r2, r3
   12e2c:	f850 3b04 	ldr.w	r3, [r0], #4
   12e30:	9007      	str	r0, [sp, #28]
   12e32:	b29b      	uxth	r3, r3
   12e34:	e7a1      	b.n	12d7a <_vfiprintf_r+0xbea>
   12e36:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12e3a:	f040 80e1 	bne.w	13000 <_vfiprintf_r+0xe70>
   12e3e:	f850 3b04 	ldr.w	r3, [r0], #4
   12e42:	9007      	str	r0, [sp, #28]
   12e44:	e799      	b.n	12d7a <_vfiprintf_r+0xbea>
   12e46:	bf00      	nop
   12e48:	20002880 	.word	0x20002880
   12e4c:	20000dc4 	.word	0x20000dc4
   12e50:	20000dd8 	.word	0x20000dd8
   12e54:	9903      	ldr	r1, [sp, #12]
   12e56:	9704      	str	r7, [sp, #16]
   12e58:	ac44      	add	r4, sp, #272	; 0x110
   12e5a:	469e      	mov	lr, r3
   12e5c:	ee08 ba90 	vmov	s17, fp
   12e60:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   12e64:	f04f 0c00 	mov.w	ip, #0
   12e68:	4623      	mov	r3, r4
   12e6a:	e006      	b.n	12e7a <_vfiprintf_r+0xcea>
   12e6c:	f1be 0f0a 	cmp.w	lr, #10
   12e70:	f172 0200 	sbcs.w	r2, r2, #0
   12e74:	d339      	bcc.n	12eea <_vfiprintf_r+0xd5a>
   12e76:	46a6      	mov	lr, r4
   12e78:	462a      	mov	r2, r5
   12e7a:	49a6      	ldr	r1, [pc, #664]	; (13114 <_vfiprintf_r+0xf84>)
   12e7c:	eb1e 0002 	adds.w	r0, lr, r2
   12e80:	f140 0000 	adc.w	r0, r0, #0
   12e84:	460f      	mov	r7, r1
   12e86:	fba1 1400 	umull	r1, r4, r1, r0
   12e8a:	f024 0103 	bic.w	r1, r4, #3
   12e8e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   12e92:	1a40      	subs	r0, r0, r1
   12e94:	ebbe 0100 	subs.w	r1, lr, r0
   12e98:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   12e9c:	f162 0400 	sbc.w	r4, r2, #0
   12ea0:	fb05 f501 	mul.w	r5, r5, r1
   12ea4:	fb07 5504 	mla	r5, r7, r4, r5
   12ea8:	fba1 4107 	umull	r4, r1, r1, r7
   12eac:	440d      	add	r5, r1
   12eae:	2705      	movs	r7, #5
   12eb0:	f004 0101 	and.w	r1, r4, #1
   12eb4:	fba1 1b07 	umull	r1, fp, r1, r7
   12eb8:	1809      	adds	r1, r1, r0
   12eba:	0864      	lsrs	r4, r4, #1
   12ebc:	3130      	adds	r1, #48	; 0x30
   12ebe:	f803 1c01 	strb.w	r1, [r3, #-1]
   12ec2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   12ec6:	f10c 0c01 	add.w	ip, ip, #1
   12eca:	3b01      	subs	r3, #1
   12ecc:	086d      	lsrs	r5, r5, #1
   12ece:	2e00      	cmp	r6, #0
   12ed0:	d0cc      	beq.n	12e6c <_vfiprintf_r+0xcdc>
   12ed2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12ed4:	7809      	ldrb	r1, [r1, #0]
   12ed6:	4561      	cmp	r1, ip
   12ed8:	d1c8      	bne.n	12e6c <_vfiprintf_r+0xcdc>
   12eda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   12ede:	d0c5      	beq.n	12e6c <_vfiprintf_r+0xcdc>
   12ee0:	f1be 0f0a 	cmp.w	lr, #10
   12ee4:	f172 0200 	sbcs.w	r2, r2, #0
   12ee8:	d26c      	bcs.n	12fc4 <_vfiprintf_r+0xe34>
   12eea:	461c      	mov	r4, r3
   12eec:	ab44      	add	r3, sp, #272	; 0x110
   12eee:	1b1b      	subs	r3, r3, r4
   12ef0:	9f04      	ldr	r7, [sp, #16]
   12ef2:	9e03      	ldr	r6, [sp, #12]
   12ef4:	9304      	str	r3, [sp, #16]
   12ef6:	ee18 ba90 	vmov	fp, s17
   12efa:	f7ff ba72 	b.w	123e2 <_vfiprintf_r+0x252>
   12efe:	9603      	str	r6, [sp, #12]
   12f00:	f7ff ba62 	b.w	123c8 <_vfiprintf_r+0x238>
   12f04:	4658      	mov	r0, fp
   12f06:	f7f8 f881 	bl	b00c <__sinit>
   12f0a:	f7ff b95b 	b.w	121c4 <_vfiprintf_r+0x34>
   12f0e:	2901      	cmp	r1, #1
   12f10:	9603      	str	r6, [sp, #12]
   12f12:	f47f accd 	bne.w	128b0 <_vfiprintf_r+0x720>
   12f16:	f7ff ba5c 	b.w	123d2 <_vfiprintf_r+0x242>
   12f1a:	9b07      	ldr	r3, [sp, #28]
   12f1c:	9905      	ldr	r1, [sp, #20]
   12f1e:	f853 2b04 	ldr.w	r2, [r3], #4
   12f22:	6011      	str	r1, [r2, #0]
   12f24:	9307      	str	r3, [sp, #28]
   12f26:	f7ff b97e 	b.w	12226 <_vfiprintf_r+0x96>
   12f2a:	2f06      	cmp	r7, #6
   12f2c:	463b      	mov	r3, r7
   12f2e:	9a03      	ldr	r2, [sp, #12]
   12f30:	4c79      	ldr	r4, [pc, #484]	; (13118 <_vfiprintf_r+0xf88>)
   12f32:	9207      	str	r2, [sp, #28]
   12f34:	bf28      	it	cs
   12f36:	2306      	movcs	r3, #6
   12f38:	9304      	str	r3, [sp, #16]
   12f3a:	9303      	str	r3, [sp, #12]
   12f3c:	f7ff bb25 	b.w	1258a <_vfiprintf_r+0x3fa>
   12f40:	9b03      	ldr	r3, [sp, #12]
   12f42:	9907      	ldr	r1, [sp, #28]
   12f44:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   12f48:	bf14      	ite	ne
   12f4a:	f851 3b04 	ldrne.w	r3, [r1], #4
   12f4e:	f851 3b04 	ldreq.w	r3, [r1], #4
   12f52:	9107      	str	r1, [sp, #28]
   12f54:	bf1c      	itt	ne
   12f56:	4602      	movne	r2, r0
   12f58:	b2db      	uxtbne	r3, r3
   12f5a:	2101      	movs	r1, #1
   12f5c:	f7ff ba8f 	b.w	1247e <_vfiprintf_r+0x2ee>
   12f60:	ab16      	add	r3, sp, #88	; 0x58
   12f62:	9300      	str	r3, [sp, #0]
   12f64:	2300      	movs	r3, #0
   12f66:	4619      	mov	r1, r3
   12f68:	aa13      	add	r2, sp, #76	; 0x4c
   12f6a:	4658      	mov	r0, fp
   12f6c:	f7fe fe98 	bl	11ca0 <_wcsrtombs_r>
   12f70:	4603      	mov	r3, r0
   12f72:	3301      	adds	r3, #1
   12f74:	9004      	str	r0, [sp, #16]
   12f76:	f000 80ae 	beq.w	130d6 <_vfiprintf_r+0xf46>
   12f7a:	9413      	str	r4, [sp, #76]	; 0x4c
   12f7c:	9b04      	ldr	r3, [sp, #16]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d030      	beq.n	12fe4 <_vfiprintf_r+0xe54>
   12f82:	2b63      	cmp	r3, #99	; 0x63
   12f84:	dc63      	bgt.n	1304e <_vfiprintf_r+0xebe>
   12f86:	2300      	movs	r3, #0
   12f88:	9308      	str	r3, [sp, #32]
   12f8a:	ac2b      	add	r4, sp, #172	; 0xac
   12f8c:	2208      	movs	r2, #8
   12f8e:	2100      	movs	r1, #0
   12f90:	a816      	add	r0, sp, #88	; 0x58
   12f92:	f7f8 fa2f 	bl	b3f4 <memset>
   12f96:	9d04      	ldr	r5, [sp, #16]
   12f98:	ab16      	add	r3, sp, #88	; 0x58
   12f9a:	9300      	str	r3, [sp, #0]
   12f9c:	aa13      	add	r2, sp, #76	; 0x4c
   12f9e:	462b      	mov	r3, r5
   12fa0:	4621      	mov	r1, r4
   12fa2:	4658      	mov	r0, fp
   12fa4:	f7fe fe7c 	bl	11ca0 <_wcsrtombs_r>
   12fa8:	4285      	cmp	r5, r0
   12faa:	f040 80ab 	bne.w	13104 <_vfiprintf_r+0xf74>
   12fae:	9b03      	ldr	r3, [sp, #12]
   12fb0:	9a04      	ldr	r2, [sp, #16]
   12fb2:	9307      	str	r3, [sp, #28]
   12fb4:	2300      	movs	r3, #0
   12fb6:	54a3      	strb	r3, [r4, r2]
   12fb8:	461f      	mov	r7, r3
   12fba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12fbe:	9303      	str	r3, [sp, #12]
   12fc0:	f7ff ba16 	b.w	123f0 <_vfiprintf_r+0x260>
   12fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12fc6:	990d      	ldr	r1, [sp, #52]	; 0x34
   12fc8:	1a9b      	subs	r3, r3, r2
   12fca:	4618      	mov	r0, r3
   12fcc:	9308      	str	r3, [sp, #32]
   12fce:	f7f8 faa9 	bl	b524 <strncpy>
   12fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12fd4:	9b08      	ldr	r3, [sp, #32]
   12fd6:	784a      	ldrb	r2, [r1, #1]
   12fd8:	b10a      	cbz	r2, 12fde <_vfiprintf_r+0xe4e>
   12fda:	3101      	adds	r1, #1
   12fdc:	910b      	str	r1, [sp, #44]	; 0x2c
   12fde:	f04f 0c00 	mov.w	ip, #0
   12fe2:	e748      	b.n	12e76 <_vfiprintf_r+0xce6>
   12fe4:	9b03      	ldr	r3, [sp, #12]
   12fe6:	9307      	str	r3, [sp, #28]
   12fe8:	9b04      	ldr	r3, [sp, #16]
   12fea:	9303      	str	r3, [sp, #12]
   12fec:	461f      	mov	r7, r3
   12fee:	9308      	str	r3, [sp, #32]
   12ff0:	f7ff b9fe 	b.w	123f0 <_vfiprintf_r+0x260>
   12ff4:	2101      	movs	r1, #1
   12ff6:	4618      	mov	r0, r3
   12ff8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ffc:	f7ff bb13 	b.w	12626 <_vfiprintf_r+0x496>
   13000:	f850 3b04 	ldr.w	r3, [r0], #4
   13004:	9007      	str	r0, [sp, #28]
   13006:	4622      	mov	r2, r4
   13008:	b2db      	uxtb	r3, r3
   1300a:	e6b6      	b.n	12d7a <_vfiprintf_r+0xbea>
   1300c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13010:	9207      	str	r2, [sp, #28]
   13012:	17da      	asrs	r2, r3, #31
   13014:	4611      	mov	r1, r2
   13016:	f7ff b9ca 	b.w	123ae <_vfiprintf_r+0x21e>
   1301a:	f851 3b04 	ldr.w	r3, [r1], #4
   1301e:	9107      	str	r1, [sp, #28]
   13020:	4602      	mov	r2, r0
   13022:	b2db      	uxtb	r3, r3
   13024:	f7ff ba27 	b.w	12476 <_vfiprintf_r+0x2e6>
   13028:	2301      	movs	r3, #1
   1302a:	931c      	str	r3, [sp, #112]	; 0x70
   1302c:	2101      	movs	r1, #1
   1302e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13032:	931b      	str	r3, [sp, #108]	; 0x6c
   13034:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13038:	460b      	mov	r3, r1
   1303a:	f7ff bacd 	b.w	125d8 <_vfiprintf_r+0x448>
   1303e:	9b07      	ldr	r3, [sp, #28]
   13040:	9905      	ldr	r1, [sp, #20]
   13042:	f853 2b04 	ldr.w	r2, [r3], #4
   13046:	9307      	str	r3, [sp, #28]
   13048:	8011      	strh	r1, [r2, #0]
   1304a:	f7ff b8ec 	b.w	12226 <_vfiprintf_r+0x96>
   1304e:	1c59      	adds	r1, r3, #1
   13050:	4658      	mov	r0, fp
   13052:	f7f6 faa7 	bl	95a4 <_malloc_r>
   13056:	4604      	mov	r4, r0
   13058:	2800      	cmp	r0, #0
   1305a:	d03c      	beq.n	130d6 <_vfiprintf_r+0xf46>
   1305c:	9008      	str	r0, [sp, #32]
   1305e:	e795      	b.n	12f8c <_vfiprintf_r+0xdfc>
   13060:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13062:	f7f8 fb2d 	bl	b6c0 <__retarget_lock_release_recursive>
   13066:	f7ff b9e9 	b.w	1243c <_vfiprintf_r+0x2ac>
   1306a:	9b03      	ldr	r3, [sp, #12]
   1306c:	9307      	str	r3, [sp, #28]
   1306e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13072:	9f08      	ldr	r7, [sp, #32]
   13074:	f7ff b9bc 	b.w	123f0 <_vfiprintf_r+0x260>
   13078:	9819      	ldr	r0, [sp, #100]	; 0x64
   1307a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1307c:	3001      	adds	r0, #1
   1307e:	e545      	b.n	12b0c <_vfiprintf_r+0x97c>
   13080:	9b03      	ldr	r3, [sp, #12]
   13082:	9307      	str	r3, [sp, #28]
   13084:	4620      	mov	r0, r4
   13086:	f7f8 fcfb 	bl	ba80 <strlen>
   1308a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1308e:	462f      	mov	r7, r5
   13090:	9004      	str	r0, [sp, #16]
   13092:	9303      	str	r3, [sp, #12]
   13094:	9508      	str	r5, [sp, #32]
   13096:	f7ff b9ab 	b.w	123f0 <_vfiprintf_r+0x260>
   1309a:	ee18 1a10 	vmov	r1, s16
   1309e:	aa18      	add	r2, sp, #96	; 0x60
   130a0:	4658      	mov	r0, fp
   130a2:	f7ff f839 	bl	12118 <__sprint_r.part.0>
   130a6:	2800      	cmp	r0, #0
   130a8:	f43f aa36 	beq.w	12518 <_vfiprintf_r+0x388>
   130ac:	f7ff ba4d 	b.w	1254a <_vfiprintf_r+0x3ba>
   130b0:	9819      	ldr	r0, [sp, #100]	; 0x64
   130b2:	3001      	adds	r0, #1
   130b4:	e57a      	b.n	12bac <_vfiprintf_r+0xa1c>
   130b6:	468c      	mov	ip, r1
   130b8:	e46e      	b.n	12998 <_vfiprintf_r+0x808>
   130ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   130bc:	07d9      	lsls	r1, r3, #31
   130be:	d405      	bmi.n	130cc <_vfiprintf_r+0xf3c>
   130c0:	89ab      	ldrh	r3, [r5, #12]
   130c2:	059a      	lsls	r2, r3, #22
   130c4:	d402      	bmi.n	130cc <_vfiprintf_r+0xf3c>
   130c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   130c8:	f7f8 fafa 	bl	b6c0 <__retarget_lock_release_recursive>
   130cc:	f04f 33ff 	mov.w	r3, #4294967295
   130d0:	9305      	str	r3, [sp, #20]
   130d2:	f7ff ba49 	b.w	12568 <_vfiprintf_r+0x3d8>
   130d6:	ee18 2a10 	vmov	r2, s16
   130da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   130de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   130e2:	8193      	strh	r3, [r2, #12]
   130e4:	f7ff ba35 	b.w	12552 <_vfiprintf_r+0x3c2>
   130e8:	9c07      	ldr	r4, [sp, #28]
   130ea:	9704      	str	r7, [sp, #16]
   130ec:	e746      	b.n	12f7c <_vfiprintf_r+0xdec>
   130ee:	9b07      	ldr	r3, [sp, #28]
   130f0:	f898 1001 	ldrb.w	r1, [r8, #1]
   130f4:	f853 7b04 	ldr.w	r7, [r3], #4
   130f8:	9307      	str	r3, [sp, #28]
   130fa:	4690      	mov	r8, r2
   130fc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13100:	f7ff b8b9 	b.w	12276 <_vfiprintf_r+0xe6>
   13104:	ee18 2a10 	vmov	r2, s16
   13108:	8993      	ldrh	r3, [r2, #12]
   1310a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1310e:	8193      	strh	r3, [r2, #12]
   13110:	f7ff ba15 	b.w	1253e <_vfiprintf_r+0x3ae>
   13114:	cccccccd 	.word	0xcccccccd
   13118:	20000dec 	.word	0x20000dec

0001311c <__sbprintf>:
   1311c:	b570      	push	{r4, r5, r6, lr}
   1311e:	460c      	mov	r4, r1
   13120:	8989      	ldrh	r1, [r1, #12]
   13122:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13126:	f021 0102 	bic.w	r1, r1, #2
   1312a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1312e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13130:	911b      	str	r1, [sp, #108]	; 0x6c
   13132:	89e1      	ldrh	r1, [r4, #14]
   13134:	f8ad 1016 	strh.w	r1, [sp, #22]
   13138:	69e1      	ldr	r1, [r4, #28]
   1313a:	9109      	str	r1, [sp, #36]	; 0x24
   1313c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1313e:	910b      	str	r1, [sp, #44]	; 0x2c
   13140:	a91c      	add	r1, sp, #112	; 0x70
   13142:	9102      	str	r1, [sp, #8]
   13144:	9106      	str	r1, [sp, #24]
   13146:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1314a:	4606      	mov	r6, r0
   1314c:	9104      	str	r1, [sp, #16]
   1314e:	9107      	str	r1, [sp, #28]
   13150:	a818      	add	r0, sp, #96	; 0x60
   13152:	2100      	movs	r1, #0
   13154:	e9cd 3200 	strd	r3, r2, [sp]
   13158:	9108      	str	r1, [sp, #32]
   1315a:	f7f8 faab 	bl	b6b4 <__retarget_lock_init_recursive>
   1315e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13162:	a902      	add	r1, sp, #8
   13164:	4630      	mov	r0, r6
   13166:	f7ff f813 	bl	12190 <_vfiprintf_r>
   1316a:	1e05      	subs	r5, r0, #0
   1316c:	db07      	blt.n	1317e <__sbprintf+0x62>
   1316e:	a902      	add	r1, sp, #8
   13170:	4630      	mov	r0, r6
   13172:	f7fd fad3 	bl	1071c <_fflush_r>
   13176:	2800      	cmp	r0, #0
   13178:	bf18      	it	ne
   1317a:	f04f 35ff 	movne.w	r5, #4294967295
   1317e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13182:	065b      	lsls	r3, r3, #25
   13184:	d503      	bpl.n	1318e <__sbprintf+0x72>
   13186:	89a3      	ldrh	r3, [r4, #12]
   13188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1318c:	81a3      	strh	r3, [r4, #12]
   1318e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13190:	f7f8 fa92 	bl	b6b8 <__retarget_lock_close_recursive>
   13194:	4628      	mov	r0, r5
   13196:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1319a:	bd70      	pop	{r4, r5, r6, pc}

0001319c <__sfvwrite_r>:
   1319c:	6893      	ldr	r3, [r2, #8]
   1319e:	2b00      	cmp	r3, #0
   131a0:	f000 8085 	beq.w	132ae <__sfvwrite_r+0x112>
   131a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   131ac:	460c      	mov	r4, r1
   131ae:	0719      	lsls	r1, r3, #28
   131b0:	4680      	mov	r8, r0
   131b2:	b083      	sub	sp, #12
   131b4:	4617      	mov	r7, r2
   131b6:	b298      	uxth	r0, r3
   131b8:	d525      	bpl.n	13206 <__sfvwrite_r+0x6a>
   131ba:	6923      	ldr	r3, [r4, #16]
   131bc:	b31b      	cbz	r3, 13206 <__sfvwrite_r+0x6a>
   131be:	f010 0302 	ands.w	r3, r0, #2
   131c2:	683d      	ldr	r5, [r7, #0]
   131c4:	d02d      	beq.n	13222 <__sfvwrite_r+0x86>
   131c6:	f04f 0a00 	mov.w	sl, #0
   131ca:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1348c <__sfvwrite_r+0x2f0>
   131ce:	4656      	mov	r6, sl
   131d0:	46b9      	mov	r9, r7
   131d2:	455e      	cmp	r6, fp
   131d4:	4633      	mov	r3, r6
   131d6:	4652      	mov	r2, sl
   131d8:	bf28      	it	cs
   131da:	465b      	movcs	r3, fp
   131dc:	4640      	mov	r0, r8
   131de:	2e00      	cmp	r6, #0
   131e0:	d052      	beq.n	13288 <__sfvwrite_r+0xec>
   131e2:	69e1      	ldr	r1, [r4, #28]
   131e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   131e6:	47b8      	blx	r7
   131e8:	2800      	cmp	r0, #0
   131ea:	dd56      	ble.n	1329a <__sfvwrite_r+0xfe>
   131ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
   131f0:	1a1b      	subs	r3, r3, r0
   131f2:	4482      	add	sl, r0
   131f4:	1a36      	subs	r6, r6, r0
   131f6:	f8c9 3008 	str.w	r3, [r9, #8]
   131fa:	2b00      	cmp	r3, #0
   131fc:	d1e9      	bne.n	131d2 <__sfvwrite_r+0x36>
   131fe:	2000      	movs	r0, #0
   13200:	b003      	add	sp, #12
   13202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13206:	4621      	mov	r1, r4
   13208:	4640      	mov	r0, r8
   1320a:	f000 f97d 	bl	13508 <__swsetup_r>
   1320e:	2800      	cmp	r0, #0
   13210:	f040 8138 	bne.w	13484 <__sfvwrite_r+0x2e8>
   13214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13218:	683d      	ldr	r5, [r7, #0]
   1321a:	b298      	uxth	r0, r3
   1321c:	f010 0302 	ands.w	r3, r0, #2
   13220:	d1d1      	bne.n	131c6 <__sfvwrite_r+0x2a>
   13222:	f010 0901 	ands.w	r9, r0, #1
   13226:	d144      	bne.n	132b2 <__sfvwrite_r+0x116>
   13228:	464e      	mov	r6, r9
   1322a:	9700      	str	r7, [sp, #0]
   1322c:	b346      	cbz	r6, 13280 <__sfvwrite_r+0xe4>
   1322e:	0582      	lsls	r2, r0, #22
   13230:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13234:	f140 8085 	bpl.w	13342 <__sfvwrite_r+0x1a6>
   13238:	45b3      	cmp	fp, r6
   1323a:	465a      	mov	r2, fp
   1323c:	f200 80b4 	bhi.w	133a8 <__sfvwrite_r+0x20c>
   13240:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13244:	f040 80c1 	bne.w	133ca <__sfvwrite_r+0x22e>
   13248:	6820      	ldr	r0, [r4, #0]
   1324a:	9201      	str	r2, [sp, #4]
   1324c:	4649      	mov	r1, r9
   1324e:	f7f8 f855 	bl	b2fc <memmove>
   13252:	68a3      	ldr	r3, [r4, #8]
   13254:	9a01      	ldr	r2, [sp, #4]
   13256:	eba3 010b 	sub.w	r1, r3, fp
   1325a:	6823      	ldr	r3, [r4, #0]
   1325c:	60a1      	str	r1, [r4, #8]
   1325e:	4413      	add	r3, r2
   13260:	46b2      	mov	sl, r6
   13262:	6023      	str	r3, [r4, #0]
   13264:	2600      	movs	r6, #0
   13266:	9a00      	ldr	r2, [sp, #0]
   13268:	6893      	ldr	r3, [r2, #8]
   1326a:	eba3 030a 	sub.w	r3, r3, sl
   1326e:	44d1      	add	r9, sl
   13270:	6093      	str	r3, [r2, #8]
   13272:	2b00      	cmp	r3, #0
   13274:	d0c3      	beq.n	131fe <__sfvwrite_r+0x62>
   13276:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1327a:	b280      	uxth	r0, r0
   1327c:	2e00      	cmp	r6, #0
   1327e:	d1d6      	bne.n	1322e <__sfvwrite_r+0x92>
   13280:	e9d5 9600 	ldrd	r9, r6, [r5]
   13284:	3508      	adds	r5, #8
   13286:	e7d1      	b.n	1322c <__sfvwrite_r+0x90>
   13288:	e9d5 a600 	ldrd	sl, r6, [r5]
   1328c:	3508      	adds	r5, #8
   1328e:	e7a0      	b.n	131d2 <__sfvwrite_r+0x36>
   13290:	4621      	mov	r1, r4
   13292:	4640      	mov	r0, r8
   13294:	f7fd fa42 	bl	1071c <_fflush_r>
   13298:	b388      	cbz	r0, 132fe <__sfvwrite_r+0x162>
   1329a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1329e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   132a2:	f04f 30ff 	mov.w	r0, #4294967295
   132a6:	81a3      	strh	r3, [r4, #12]
   132a8:	b003      	add	sp, #12
   132aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132ae:	2000      	movs	r0, #0
   132b0:	4770      	bx	lr
   132b2:	461e      	mov	r6, r3
   132b4:	46ba      	mov	sl, r7
   132b6:	4699      	mov	r9, r3
   132b8:	4618      	mov	r0, r3
   132ba:	9500      	str	r5, [sp, #0]
   132bc:	461f      	mov	r7, r3
   132be:	b366      	cbz	r6, 1331a <__sfvwrite_r+0x17e>
   132c0:	2800      	cmp	r0, #0
   132c2:	d032      	beq.n	1332a <__sfvwrite_r+0x18e>
   132c4:	464a      	mov	r2, r9
   132c6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   132ca:	6820      	ldr	r0, [r4, #0]
   132cc:	68a5      	ldr	r5, [r4, #8]
   132ce:	42b2      	cmp	r2, r6
   132d0:	bf28      	it	cs
   132d2:	4632      	movcs	r2, r6
   132d4:	4288      	cmp	r0, r1
   132d6:	d904      	bls.n	132e2 <__sfvwrite_r+0x146>
   132d8:	eb05 0b03 	add.w	fp, r5, r3
   132dc:	455a      	cmp	r2, fp
   132de:	f300 80a7 	bgt.w	13430 <__sfvwrite_r+0x294>
   132e2:	4293      	cmp	r3, r2
   132e4:	dc64      	bgt.n	133b0 <__sfvwrite_r+0x214>
   132e6:	69e1      	ldr	r1, [r4, #28]
   132e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   132ea:	463a      	mov	r2, r7
   132ec:	4640      	mov	r0, r8
   132ee:	47a8      	blx	r5
   132f0:	f1b0 0b00 	subs.w	fp, r0, #0
   132f4:	ddd1      	ble.n	1329a <__sfvwrite_r+0xfe>
   132f6:	ebb9 090b 	subs.w	r9, r9, fp
   132fa:	d0c9      	beq.n	13290 <__sfvwrite_r+0xf4>
   132fc:	2001      	movs	r0, #1
   132fe:	f8da 3008 	ldr.w	r3, [sl, #8]
   13302:	eba3 030b 	sub.w	r3, r3, fp
   13306:	445f      	add	r7, fp
   13308:	eba6 060b 	sub.w	r6, r6, fp
   1330c:	f8ca 3008 	str.w	r3, [sl, #8]
   13310:	2b00      	cmp	r3, #0
   13312:	f43f af74 	beq.w	131fe <__sfvwrite_r+0x62>
   13316:	2e00      	cmp	r6, #0
   13318:	d1d2      	bne.n	132c0 <__sfvwrite_r+0x124>
   1331a:	9a00      	ldr	r2, [sp, #0]
   1331c:	6856      	ldr	r6, [r2, #4]
   1331e:	4613      	mov	r3, r2
   13320:	3208      	adds	r2, #8
   13322:	9200      	str	r2, [sp, #0]
   13324:	2e00      	cmp	r6, #0
   13326:	d0f8      	beq.n	1331a <__sfvwrite_r+0x17e>
   13328:	681f      	ldr	r7, [r3, #0]
   1332a:	4632      	mov	r2, r6
   1332c:	210a      	movs	r1, #10
   1332e:	4638      	mov	r0, r7
   13330:	f7f8 fb46 	bl	b9c0 <memchr>
   13334:	2800      	cmp	r0, #0
   13336:	f000 809c 	beq.w	13472 <__sfvwrite_r+0x2d6>
   1333a:	3001      	adds	r0, #1
   1333c:	eba0 0907 	sub.w	r9, r0, r7
   13340:	e7c0      	b.n	132c4 <__sfvwrite_r+0x128>
   13342:	6820      	ldr	r0, [r4, #0]
   13344:	6923      	ldr	r3, [r4, #16]
   13346:	4298      	cmp	r0, r3
   13348:	d816      	bhi.n	13378 <__sfvwrite_r+0x1dc>
   1334a:	6962      	ldr	r2, [r4, #20]
   1334c:	42b2      	cmp	r2, r6
   1334e:	d813      	bhi.n	13378 <__sfvwrite_r+0x1dc>
   13350:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13354:	42b3      	cmp	r3, r6
   13356:	bf28      	it	cs
   13358:	4633      	movcs	r3, r6
   1335a:	69e1      	ldr	r1, [r4, #28]
   1335c:	fb93 f3f2 	sdiv	r3, r3, r2
   13360:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13362:	fb02 f303 	mul.w	r3, r2, r3
   13366:	4640      	mov	r0, r8
   13368:	464a      	mov	r2, r9
   1336a:	47b8      	blx	r7
   1336c:	f1b0 0a00 	subs.w	sl, r0, #0
   13370:	dd93      	ble.n	1329a <__sfvwrite_r+0xfe>
   13372:	eba6 060a 	sub.w	r6, r6, sl
   13376:	e776      	b.n	13266 <__sfvwrite_r+0xca>
   13378:	45b3      	cmp	fp, r6
   1337a:	46da      	mov	sl, fp
   1337c:	bf28      	it	cs
   1337e:	46b2      	movcs	sl, r6
   13380:	4652      	mov	r2, sl
   13382:	4649      	mov	r1, r9
   13384:	f7f7 ffba 	bl	b2fc <memmove>
   13388:	68a3      	ldr	r3, [r4, #8]
   1338a:	6822      	ldr	r2, [r4, #0]
   1338c:	eba3 030a 	sub.w	r3, r3, sl
   13390:	4452      	add	r2, sl
   13392:	60a3      	str	r3, [r4, #8]
   13394:	6022      	str	r2, [r4, #0]
   13396:	2b00      	cmp	r3, #0
   13398:	d1eb      	bne.n	13372 <__sfvwrite_r+0x1d6>
   1339a:	4621      	mov	r1, r4
   1339c:	4640      	mov	r0, r8
   1339e:	f7fd f9bd 	bl	1071c <_fflush_r>
   133a2:	2800      	cmp	r0, #0
   133a4:	d0e5      	beq.n	13372 <__sfvwrite_r+0x1d6>
   133a6:	e778      	b.n	1329a <__sfvwrite_r+0xfe>
   133a8:	6820      	ldr	r0, [r4, #0]
   133aa:	46b3      	mov	fp, r6
   133ac:	4632      	mov	r2, r6
   133ae:	e74c      	b.n	1324a <__sfvwrite_r+0xae>
   133b0:	4639      	mov	r1, r7
   133b2:	9201      	str	r2, [sp, #4]
   133b4:	f7f7 ffa2 	bl	b2fc <memmove>
   133b8:	9a01      	ldr	r2, [sp, #4]
   133ba:	68a3      	ldr	r3, [r4, #8]
   133bc:	1a9b      	subs	r3, r3, r2
   133be:	60a3      	str	r3, [r4, #8]
   133c0:	6823      	ldr	r3, [r4, #0]
   133c2:	4413      	add	r3, r2
   133c4:	6023      	str	r3, [r4, #0]
   133c6:	4693      	mov	fp, r2
   133c8:	e795      	b.n	132f6 <__sfvwrite_r+0x15a>
   133ca:	6823      	ldr	r3, [r4, #0]
   133cc:	6921      	ldr	r1, [r4, #16]
   133ce:	eba3 0b01 	sub.w	fp, r3, r1
   133d2:	6963      	ldr	r3, [r4, #20]
   133d4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   133d8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   133dc:	f10b 0301 	add.w	r3, fp, #1
   133e0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   133e4:	4433      	add	r3, r6
   133e6:	4553      	cmp	r3, sl
   133e8:	4652      	mov	r2, sl
   133ea:	bf84      	itt	hi
   133ec:	469a      	movhi	sl, r3
   133ee:	4652      	movhi	r2, sl
   133f0:	0543      	lsls	r3, r0, #21
   133f2:	d52c      	bpl.n	1344e <__sfvwrite_r+0x2b2>
   133f4:	4611      	mov	r1, r2
   133f6:	4640      	mov	r0, r8
   133f8:	f7f6 f8d4 	bl	95a4 <_malloc_r>
   133fc:	2800      	cmp	r0, #0
   133fe:	d03b      	beq.n	13478 <__sfvwrite_r+0x2dc>
   13400:	465a      	mov	r2, fp
   13402:	6921      	ldr	r1, [r4, #16]
   13404:	9001      	str	r0, [sp, #4]
   13406:	f7f4 fb29 	bl	7a5c <memcpy>
   1340a:	89a2      	ldrh	r2, [r4, #12]
   1340c:	9b01      	ldr	r3, [sp, #4]
   1340e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13416:	81a2      	strh	r2, [r4, #12]
   13418:	eb03 000b 	add.w	r0, r3, fp
   1341c:	6123      	str	r3, [r4, #16]
   1341e:	ebaa 030b 	sub.w	r3, sl, fp
   13422:	f8c4 a014 	str.w	sl, [r4, #20]
   13426:	60a3      	str	r3, [r4, #8]
   13428:	6020      	str	r0, [r4, #0]
   1342a:	46b3      	mov	fp, r6
   1342c:	4632      	mov	r2, r6
   1342e:	e70c      	b.n	1324a <__sfvwrite_r+0xae>
   13430:	4639      	mov	r1, r7
   13432:	465a      	mov	r2, fp
   13434:	f7f7 ff62 	bl	b2fc <memmove>
   13438:	6823      	ldr	r3, [r4, #0]
   1343a:	445b      	add	r3, fp
   1343c:	6023      	str	r3, [r4, #0]
   1343e:	4621      	mov	r1, r4
   13440:	4640      	mov	r0, r8
   13442:	f7fd f96b 	bl	1071c <_fflush_r>
   13446:	2800      	cmp	r0, #0
   13448:	f43f af55 	beq.w	132f6 <__sfvwrite_r+0x15a>
   1344c:	e725      	b.n	1329a <__sfvwrite_r+0xfe>
   1344e:	4640      	mov	r0, r8
   13450:	f7f6 fb70 	bl	9b34 <_realloc_r>
   13454:	4603      	mov	r3, r0
   13456:	2800      	cmp	r0, #0
   13458:	d1de      	bne.n	13418 <__sfvwrite_r+0x27c>
   1345a:	6921      	ldr	r1, [r4, #16]
   1345c:	4640      	mov	r0, r8
   1345e:	f7f8 fc21 	bl	bca4 <_free_r>
   13462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13466:	220c      	movs	r2, #12
   13468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1346c:	f8c8 2000 	str.w	r2, [r8]
   13470:	e715      	b.n	1329e <__sfvwrite_r+0x102>
   13472:	1c72      	adds	r2, r6, #1
   13474:	4691      	mov	r9, r2
   13476:	e726      	b.n	132c6 <__sfvwrite_r+0x12a>
   13478:	220c      	movs	r2, #12
   1347a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1347e:	f8c8 2000 	str.w	r2, [r8]
   13482:	e70c      	b.n	1329e <__sfvwrite_r+0x102>
   13484:	f04f 30ff 	mov.w	r0, #4294967295
   13488:	e6ba      	b.n	13200 <__sfvwrite_r+0x64>
   1348a:	bf00      	nop
   1348c:	7ffffc00 	.word	0x7ffffc00

00013490 <__submore>:
   13490:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13498:	460c      	mov	r4, r1
   1349a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1349c:	4299      	cmp	r1, r3
   1349e:	d014      	beq.n	134ca <__submore+0x3a>
   134a0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   134a2:	0077      	lsls	r7, r6, #1
   134a4:	463a      	mov	r2, r7
   134a6:	f7f6 fb45 	bl	9b34 <_realloc_r>
   134aa:	4605      	mov	r5, r0
   134ac:	b340      	cbz	r0, 13500 <__submore+0x70>
   134ae:	eb00 0806 	add.w	r8, r0, r6
   134b2:	4601      	mov	r1, r0
   134b4:	4632      	mov	r2, r6
   134b6:	4640      	mov	r0, r8
   134b8:	f7f4 fad0 	bl	7a5c <memcpy>
   134bc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   134c0:	f8c4 8000 	str.w	r8, [r4]
   134c4:	2000      	movs	r0, #0
   134c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   134ce:	f7f6 f869 	bl	95a4 <_malloc_r>
   134d2:	b1a8      	cbz	r0, 13500 <__submore+0x70>
   134d4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   134d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   134dc:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   134e0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   134e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   134e8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   134ec:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   134f0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   134f4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   134f8:	6023      	str	r3, [r4, #0]
   134fa:	2000      	movs	r0, #0
   134fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13500:	f04f 30ff 	mov.w	r0, #4294967295
   13504:	e7df      	b.n	134c6 <__submore+0x36>
   13506:	bf00      	nop

00013508 <__swsetup_r>:
   13508:	b538      	push	{r3, r4, r5, lr}
   1350a:	4b31      	ldr	r3, [pc, #196]	; (135d0 <__swsetup_r+0xc8>)
   1350c:	681b      	ldr	r3, [r3, #0]
   1350e:	4605      	mov	r5, r0
   13510:	460c      	mov	r4, r1
   13512:	b113      	cbz	r3, 1351a <__swsetup_r+0x12>
   13514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13516:	2a00      	cmp	r2, #0
   13518:	d04e      	beq.n	135b8 <__swsetup_r+0xb0>
   1351a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1351e:	0718      	lsls	r0, r3, #28
   13520:	b29a      	uxth	r2, r3
   13522:	d51c      	bpl.n	1355e <__swsetup_r+0x56>
   13524:	6921      	ldr	r1, [r4, #16]
   13526:	b329      	cbz	r1, 13574 <__swsetup_r+0x6c>
   13528:	f012 0001 	ands.w	r0, r2, #1
   1352c:	d007      	beq.n	1353e <__swsetup_r+0x36>
   1352e:	2000      	movs	r0, #0
   13530:	60a0      	str	r0, [r4, #8]
   13532:	6960      	ldr	r0, [r4, #20]
   13534:	4240      	negs	r0, r0
   13536:	61a0      	str	r0, [r4, #24]
   13538:	b139      	cbz	r1, 1354a <__swsetup_r+0x42>
   1353a:	2000      	movs	r0, #0
   1353c:	bd38      	pop	{r3, r4, r5, pc}
   1353e:	0795      	lsls	r5, r2, #30
   13540:	bf58      	it	pl
   13542:	6960      	ldrpl	r0, [r4, #20]
   13544:	60a0      	str	r0, [r4, #8]
   13546:	2900      	cmp	r1, #0
   13548:	d1f7      	bne.n	1353a <__swsetup_r+0x32>
   1354a:	0612      	lsls	r2, r2, #24
   1354c:	bf58      	it	pl
   1354e:	4608      	movpl	r0, r1
   13550:	d5f4      	bpl.n	1353c <__swsetup_r+0x34>
   13552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13556:	81a3      	strh	r3, [r4, #12]
   13558:	f04f 30ff 	mov.w	r0, #4294967295
   1355c:	bd38      	pop	{r3, r4, r5, pc}
   1355e:	06d1      	lsls	r1, r2, #27
   13560:	d52e      	bpl.n	135c0 <__swsetup_r+0xb8>
   13562:	0752      	lsls	r2, r2, #29
   13564:	d414      	bmi.n	13590 <__swsetup_r+0x88>
   13566:	6921      	ldr	r1, [r4, #16]
   13568:	f043 0308 	orr.w	r3, r3, #8
   1356c:	81a3      	strh	r3, [r4, #12]
   1356e:	b29a      	uxth	r2, r3
   13570:	2900      	cmp	r1, #0
   13572:	d1d9      	bne.n	13528 <__swsetup_r+0x20>
   13574:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13578:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1357c:	d0d4      	beq.n	13528 <__swsetup_r+0x20>
   1357e:	4621      	mov	r1, r4
   13580:	4628      	mov	r0, r5
   13582:	f000 f977 	bl	13874 <__smakebuf_r>
   13586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1358a:	6921      	ldr	r1, [r4, #16]
   1358c:	b29a      	uxth	r2, r3
   1358e:	e7cb      	b.n	13528 <__swsetup_r+0x20>
   13590:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13592:	b151      	cbz	r1, 135aa <__swsetup_r+0xa2>
   13594:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13598:	4291      	cmp	r1, r2
   1359a:	d004      	beq.n	135a6 <__swsetup_r+0x9e>
   1359c:	4628      	mov	r0, r5
   1359e:	f7f8 fb81 	bl	bca4 <_free_r>
   135a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   135a6:	2200      	movs	r2, #0
   135a8:	6322      	str	r2, [r4, #48]	; 0x30
   135aa:	6921      	ldr	r1, [r4, #16]
   135ac:	2200      	movs	r2, #0
   135ae:	e9c4 1200 	strd	r1, r2, [r4]
   135b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   135b6:	e7d7      	b.n	13568 <__swsetup_r+0x60>
   135b8:	4618      	mov	r0, r3
   135ba:	f7f7 fd27 	bl	b00c <__sinit>
   135be:	e7ac      	b.n	1351a <__swsetup_r+0x12>
   135c0:	2209      	movs	r2, #9
   135c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   135c6:	602a      	str	r2, [r5, #0]
   135c8:	f04f 30ff 	mov.w	r0, #4294967295
   135cc:	81a3      	strh	r3, [r4, #12]
   135ce:	bd38      	pop	{r3, r4, r5, pc}
   135d0:	20008cf8 	.word	0x20008cf8

000135d4 <__fputwc>:
   135d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135d8:	b082      	sub	sp, #8
   135da:	4682      	mov	sl, r0
   135dc:	4688      	mov	r8, r1
   135de:	4614      	mov	r4, r2
   135e0:	f7f7 ffd2 	bl	b588 <__locale_mb_cur_max>
   135e4:	2801      	cmp	r0, #1
   135e6:	d103      	bne.n	135f0 <__fputwc+0x1c>
   135e8:	f108 33ff 	add.w	r3, r8, #4294967295
   135ec:	2bfe      	cmp	r3, #254	; 0xfe
   135ee:	d936      	bls.n	1365e <__fputwc+0x8a>
   135f0:	f10d 0904 	add.w	r9, sp, #4
   135f4:	4642      	mov	r2, r8
   135f6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   135fa:	4649      	mov	r1, r9
   135fc:	4650      	mov	r0, sl
   135fe:	f7fe fb29 	bl	11c54 <_wcrtomb_r>
   13602:	1c42      	adds	r2, r0, #1
   13604:	4606      	mov	r6, r0
   13606:	d032      	beq.n	1366e <__fputwc+0x9a>
   13608:	b320      	cbz	r0, 13654 <__fputwc+0x80>
   1360a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1360e:	2500      	movs	r5, #0
   13610:	e009      	b.n	13626 <__fputwc+0x52>
   13612:	6823      	ldr	r3, [r4, #0]
   13614:	1c5a      	adds	r2, r3, #1
   13616:	6022      	str	r2, [r4, #0]
   13618:	f883 c000 	strb.w	ip, [r3]
   1361c:	3501      	adds	r5, #1
   1361e:	42b5      	cmp	r5, r6
   13620:	d218      	bcs.n	13654 <__fputwc+0x80>
   13622:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13626:	68a3      	ldr	r3, [r4, #8]
   13628:	3b01      	subs	r3, #1
   1362a:	2b00      	cmp	r3, #0
   1362c:	60a3      	str	r3, [r4, #8]
   1362e:	daf0      	bge.n	13612 <__fputwc+0x3e>
   13630:	69a7      	ldr	r7, [r4, #24]
   13632:	42bb      	cmp	r3, r7
   13634:	4661      	mov	r1, ip
   13636:	4622      	mov	r2, r4
   13638:	4650      	mov	r0, sl
   1363a:	db02      	blt.n	13642 <__fputwc+0x6e>
   1363c:	f1bc 0f0a 	cmp.w	ip, #10
   13640:	d1e7      	bne.n	13612 <__fputwc+0x3e>
   13642:	f000 f983 	bl	1394c <__swbuf_r>
   13646:	1c43      	adds	r3, r0, #1
   13648:	d1e8      	bne.n	1361c <__fputwc+0x48>
   1364a:	4606      	mov	r6, r0
   1364c:	4630      	mov	r0, r6
   1364e:	b002      	add	sp, #8
   13650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13654:	4646      	mov	r6, r8
   13656:	4630      	mov	r0, r6
   13658:	b002      	add	sp, #8
   1365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1365e:	fa5f fc88 	uxtb.w	ip, r8
   13662:	f88d c004 	strb.w	ip, [sp, #4]
   13666:	4606      	mov	r6, r0
   13668:	f10d 0904 	add.w	r9, sp, #4
   1366c:	e7cf      	b.n	1360e <__fputwc+0x3a>
   1366e:	89a3      	ldrh	r3, [r4, #12]
   13670:	4630      	mov	r0, r6
   13672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13676:	81a3      	strh	r3, [r4, #12]
   13678:	b002      	add	sp, #8
   1367a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1367e:	bf00      	nop

00013680 <_fputwc_r>:
   13680:	b530      	push	{r4, r5, lr}
   13682:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13684:	f013 0f01 	tst.w	r3, #1
   13688:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1368c:	4614      	mov	r4, r2
   1368e:	b083      	sub	sp, #12
   13690:	4605      	mov	r5, r0
   13692:	b29a      	uxth	r2, r3
   13694:	d101      	bne.n	1369a <_fputwc_r+0x1a>
   13696:	0598      	lsls	r0, r3, #22
   13698:	d51c      	bpl.n	136d4 <_fputwc_r+0x54>
   1369a:	0490      	lsls	r0, r2, #18
   1369c:	d406      	bmi.n	136ac <_fputwc_r+0x2c>
   1369e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   136a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   136a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   136a8:	81a3      	strh	r3, [r4, #12]
   136aa:	6662      	str	r2, [r4, #100]	; 0x64
   136ac:	4622      	mov	r2, r4
   136ae:	4628      	mov	r0, r5
   136b0:	f7ff ff90 	bl	135d4 <__fputwc>
   136b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   136b6:	07da      	lsls	r2, r3, #31
   136b8:	4605      	mov	r5, r0
   136ba:	d402      	bmi.n	136c2 <_fputwc_r+0x42>
   136bc:	89a3      	ldrh	r3, [r4, #12]
   136be:	059b      	lsls	r3, r3, #22
   136c0:	d502      	bpl.n	136c8 <_fputwc_r+0x48>
   136c2:	4628      	mov	r0, r5
   136c4:	b003      	add	sp, #12
   136c6:	bd30      	pop	{r4, r5, pc}
   136c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   136ca:	f7f7 fff9 	bl	b6c0 <__retarget_lock_release_recursive>
   136ce:	4628      	mov	r0, r5
   136d0:	b003      	add	sp, #12
   136d2:	bd30      	pop	{r4, r5, pc}
   136d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   136d6:	9101      	str	r1, [sp, #4]
   136d8:	f7f7 fff0 	bl	b6bc <__retarget_lock_acquire_recursive>
   136dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   136e0:	9901      	ldr	r1, [sp, #4]
   136e2:	b29a      	uxth	r2, r3
   136e4:	e7d9      	b.n	1369a <_fputwc_r+0x1a>
   136e6:	bf00      	nop

000136e8 <_wcsnrtombs_l>:
   136e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ec:	b08b      	sub	sp, #44	; 0x2c
   136ee:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   136f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   136f4:	9103      	str	r1, [sp, #12]
   136f6:	4681      	mov	r9, r0
   136f8:	9205      	str	r2, [sp, #20]
   136fa:	461e      	mov	r6, r3
   136fc:	f1b8 0f00 	cmp.w	r8, #0
   13700:	d05c      	beq.n	137bc <_wcsnrtombs_l+0xd4>
   13702:	9b03      	ldr	r3, [sp, #12]
   13704:	2b00      	cmp	r3, #0
   13706:	d05e      	beq.n	137c6 <_wcsnrtombs_l+0xde>
   13708:	9b05      	ldr	r3, [sp, #20]
   1370a:	681d      	ldr	r5, [r3, #0]
   1370c:	2f00      	cmp	r7, #0
   1370e:	d06a      	beq.n	137e6 <_wcsnrtombs_l+0xfe>
   13710:	1e74      	subs	r4, r6, #1
   13712:	b34e      	cbz	r6, 13768 <_wcsnrtombs_l+0x80>
   13714:	9b03      	ldr	r3, [sp, #12]
   13716:	9304      	str	r3, [sp, #16]
   13718:	3d04      	subs	r5, #4
   1371a:	2600      	movs	r6, #0
   1371c:	9501      	str	r5, [sp, #4]
   1371e:	e00b      	b.n	13738 <_wcsnrtombs_l+0x50>
   13720:	9b03      	ldr	r3, [sp, #12]
   13722:	bb2b      	cbnz	r3, 13770 <_wcsnrtombs_l+0x88>
   13724:	9b01      	ldr	r3, [sp, #4]
   13726:	681a      	ldr	r2, [r3, #0]
   13728:	2a00      	cmp	r2, #0
   1372a:	d03a      	beq.n	137a2 <_wcsnrtombs_l+0xba>
   1372c:	45bc      	cmp	ip, r7
   1372e:	d25c      	bcs.n	137ea <_wcsnrtombs_l+0x102>
   13730:	3c01      	subs	r4, #1
   13732:	1c63      	adds	r3, r4, #1
   13734:	4666      	mov	r6, ip
   13736:	d017      	beq.n	13768 <_wcsnrtombs_l+0x80>
   13738:	f8d8 3000 	ldr.w	r3, [r8]
   1373c:	9302      	str	r3, [sp, #8]
   1373e:	9b01      	ldr	r3, [sp, #4]
   13740:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13744:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13748:	9301      	str	r3, [sp, #4]
   1374a:	a907      	add	r1, sp, #28
   1374c:	4643      	mov	r3, r8
   1374e:	4648      	mov	r0, r9
   13750:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13754:	47a8      	blx	r5
   13756:	1c42      	adds	r2, r0, #1
   13758:	d03a      	beq.n	137d0 <_wcsnrtombs_l+0xe8>
   1375a:	eb00 0c06 	add.w	ip, r0, r6
   1375e:	45bc      	cmp	ip, r7
   13760:	d9de      	bls.n	13720 <_wcsnrtombs_l+0x38>
   13762:	9b02      	ldr	r3, [sp, #8]
   13764:	e9c8 3b00 	strd	r3, fp, [r8]
   13768:	4630      	mov	r0, r6
   1376a:	b00b      	add	sp, #44	; 0x2c
   1376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13770:	2800      	cmp	r0, #0
   13772:	dd0e      	ble.n	13792 <_wcsnrtombs_l+0xaa>
   13774:	9b04      	ldr	r3, [sp, #16]
   13776:	9d01      	ldr	r5, [sp, #4]
   13778:	4418      	add	r0, r3
   1377a:	1e5a      	subs	r2, r3, #1
   1377c:	a907      	add	r1, sp, #28
   1377e:	f100 3eff 	add.w	lr, r0, #4294967295
   13782:	f811 3b01 	ldrb.w	r3, [r1], #1
   13786:	f802 3f01 	strb.w	r3, [r2, #1]!
   1378a:	4572      	cmp	r2, lr
   1378c:	d1f9      	bne.n	13782 <_wcsnrtombs_l+0x9a>
   1378e:	9501      	str	r5, [sp, #4]
   13790:	9004      	str	r0, [sp, #16]
   13792:	9b05      	ldr	r3, [sp, #20]
   13794:	681a      	ldr	r2, [r3, #0]
   13796:	3204      	adds	r2, #4
   13798:	601a      	str	r2, [r3, #0]
   1379a:	9b01      	ldr	r3, [sp, #4]
   1379c:	681a      	ldr	r2, [r3, #0]
   1379e:	2a00      	cmp	r2, #0
   137a0:	d1c4      	bne.n	1372c <_wcsnrtombs_l+0x44>
   137a2:	9b03      	ldr	r3, [sp, #12]
   137a4:	b10b      	cbz	r3, 137aa <_wcsnrtombs_l+0xc2>
   137a6:	9b05      	ldr	r3, [sp, #20]
   137a8:	601a      	str	r2, [r3, #0]
   137aa:	f10c 36ff 	add.w	r6, ip, #4294967295
   137ae:	2200      	movs	r2, #0
   137b0:	4630      	mov	r0, r6
   137b2:	f8c8 2000 	str.w	r2, [r8]
   137b6:	b00b      	add	sp, #44	; 0x2c
   137b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137bc:	9b03      	ldr	r3, [sp, #12]
   137be:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   137c2:	2b00      	cmp	r3, #0
   137c4:	d1a0      	bne.n	13708 <_wcsnrtombs_l+0x20>
   137c6:	9b05      	ldr	r3, [sp, #20]
   137c8:	f04f 37ff 	mov.w	r7, #4294967295
   137cc:	681d      	ldr	r5, [r3, #0]
   137ce:	e79f      	b.n	13710 <_wcsnrtombs_l+0x28>
   137d0:	4606      	mov	r6, r0
   137d2:	218a      	movs	r1, #138	; 0x8a
   137d4:	2200      	movs	r2, #0
   137d6:	4630      	mov	r0, r6
   137d8:	f8c9 1000 	str.w	r1, [r9]
   137dc:	f8c8 2000 	str.w	r2, [r8]
   137e0:	b00b      	add	sp, #44	; 0x2c
   137e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e6:	463e      	mov	r6, r7
   137e8:	e7be      	b.n	13768 <_wcsnrtombs_l+0x80>
   137ea:	4666      	mov	r6, ip
   137ec:	e7bc      	b.n	13768 <_wcsnrtombs_l+0x80>
   137ee:	bf00      	nop

000137f0 <_wcsnrtombs_r>:
   137f0:	b510      	push	{r4, lr}
   137f2:	b084      	sub	sp, #16
   137f4:	4c05      	ldr	r4, [pc, #20]	; (1380c <_wcsnrtombs_r+0x1c>)
   137f6:	9806      	ldr	r0, [sp, #24]
   137f8:	9000      	str	r0, [sp, #0]
   137fa:	9807      	ldr	r0, [sp, #28]
   137fc:	9001      	str	r0, [sp, #4]
   137fe:	4804      	ldr	r0, [pc, #16]	; (13810 <_wcsnrtombs_r+0x20>)
   13800:	6800      	ldr	r0, [r0, #0]
   13802:	9402      	str	r4, [sp, #8]
   13804:	f7ff ff70 	bl	136e8 <_wcsnrtombs_l>
   13808:	b004      	add	sp, #16
   1380a:	bd10      	pop	{r4, pc}
   1380c:	20008770 	.word	0x20008770
   13810:	20008cf8 	.word	0x20008cf8

00013814 <category>:
   13814:	4b15      	ldr	r3, [pc, #84]	; (1386c <category+0x58>)
   13816:	4298      	cmp	r0, r3
   13818:	d823      	bhi.n	13862 <category+0x4e>
   1381a:	b570      	push	{r4, r5, r6, lr}
   1381c:	4e14      	ldr	r6, [pc, #80]	; (13870 <category+0x5c>)
   1381e:	f04f 0e00 	mov.w	lr, #0
   13822:	f640 04db 	movw	r4, #2267	; 0x8db
   13826:	e003      	b.n	13830 <category+0x1c>
   13828:	f102 0e01 	add.w	lr, r2, #1
   1382c:	45a6      	cmp	lr, r4
   1382e:	dc16      	bgt.n	1385e <category+0x4a>
   13830:	eb04 020e 	add.w	r2, r4, lr
   13834:	f022 0301 	bic.w	r3, r2, #1
   13838:	eb03 0362 	add.w	r3, r3, r2, asr #1
   1383c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13840:	1052      	asrs	r2, r2, #1
   13842:	7859      	ldrb	r1, [r3, #1]
   13844:	885d      	ldrh	r5, [r3, #2]
   13846:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1384a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1384e:	448c      	add	ip, r1
   13850:	4560      	cmp	r0, ip
   13852:	d8e9      	bhi.n	13828 <category+0x14>
   13854:	4288      	cmp	r0, r1
   13856:	d206      	bcs.n	13866 <category+0x52>
   13858:	1e54      	subs	r4, r2, #1
   1385a:	45a6      	cmp	lr, r4
   1385c:	dde8      	ble.n	13830 <category+0x1c>
   1385e:	20ff      	movs	r0, #255	; 0xff
   13860:	bd70      	pop	{r4, r5, r6, pc}
   13862:	20ff      	movs	r0, #255	; 0xff
   13864:	4770      	bx	lr
   13866:	7818      	ldrb	r0, [r3, #0]
   13868:	bd70      	pop	{r4, r5, r6, pc}
   1386a:	bf00      	nop
   1386c:	000e01ef 	.word	0x000e01ef
   13870:	20002890 	.word	0x20002890

00013874 <__smakebuf_r>:
   13874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13878:	898b      	ldrh	r3, [r1, #12]
   1387a:	460c      	mov	r4, r1
   1387c:	0799      	lsls	r1, r3, #30
   1387e:	b096      	sub	sp, #88	; 0x58
   13880:	d508      	bpl.n	13894 <__smakebuf_r+0x20>
   13882:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13886:	2201      	movs	r2, #1
   13888:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1388c:	6023      	str	r3, [r4, #0]
   1388e:	b016      	add	sp, #88	; 0x58
   13890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13898:	2900      	cmp	r1, #0
   1389a:	4606      	mov	r6, r0
   1389c:	db25      	blt.n	138ea <__smakebuf_r+0x76>
   1389e:	466a      	mov	r2, sp
   138a0:	f000 f8ac 	bl	139fc <_fstat_r>
   138a4:	2800      	cmp	r0, #0
   138a6:	db1f      	blt.n	138e8 <__smakebuf_r+0x74>
   138a8:	9d01      	ldr	r5, [sp, #4]
   138aa:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   138ae:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   138b2:	fab5 f585 	clz	r5, r5
   138b6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   138ba:	096d      	lsrs	r5, r5, #5
   138bc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   138c0:	4641      	mov	r1, r8
   138c2:	4630      	mov	r0, r6
   138c4:	f7f5 fe6e 	bl	95a4 <_malloc_r>
   138c8:	b1e0      	cbz	r0, 13904 <__smakebuf_r+0x90>
   138ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138ce:	f8c4 8014 	str.w	r8, [r4, #20]
   138d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   138d6:	6020      	str	r0, [r4, #0]
   138d8:	6120      	str	r0, [r4, #16]
   138da:	81a3      	strh	r3, [r4, #12]
   138dc:	bb35      	cbnz	r5, 1392c <__smakebuf_r+0xb8>
   138de:	433b      	orrs	r3, r7
   138e0:	81a3      	strh	r3, [r4, #12]
   138e2:	b016      	add	sp, #88	; 0x58
   138e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138e8:	89a3      	ldrh	r3, [r4, #12]
   138ea:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   138ee:	d019      	beq.n	13924 <__smakebuf_r+0xb0>
   138f0:	f04f 0840 	mov.w	r8, #64	; 0x40
   138f4:	2500      	movs	r5, #0
   138f6:	4641      	mov	r1, r8
   138f8:	4630      	mov	r0, r6
   138fa:	462f      	mov	r7, r5
   138fc:	f7f5 fe52 	bl	95a4 <_malloc_r>
   13900:	2800      	cmp	r0, #0
   13902:	d1e2      	bne.n	138ca <__smakebuf_r+0x56>
   13904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13908:	059a      	lsls	r2, r3, #22
   1390a:	d4c0      	bmi.n	1388e <__smakebuf_r+0x1a>
   1390c:	f023 0303 	bic.w	r3, r3, #3
   13910:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13914:	f043 0302 	orr.w	r3, r3, #2
   13918:	2101      	movs	r1, #1
   1391a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1391e:	81a3      	strh	r3, [r4, #12]
   13920:	6022      	str	r2, [r4, #0]
   13922:	e7b4      	b.n	1388e <__smakebuf_r+0x1a>
   13924:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13928:	462f      	mov	r7, r5
   1392a:	e7c9      	b.n	138c0 <__smakebuf_r+0x4c>
   1392c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13930:	4630      	mov	r0, r6
   13932:	f000 f879 	bl	13a28 <_isatty_r>
   13936:	b910      	cbnz	r0, 1393e <__smakebuf_r+0xca>
   13938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1393c:	e7cf      	b.n	138de <__smakebuf_r+0x6a>
   1393e:	89a3      	ldrh	r3, [r4, #12]
   13940:	f023 0303 	bic.w	r3, r3, #3
   13944:	f043 0301 	orr.w	r3, r3, #1
   13948:	b21b      	sxth	r3, r3
   1394a:	e7c8      	b.n	138de <__smakebuf_r+0x6a>

0001394c <__swbuf_r>:
   1394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1394e:	460d      	mov	r5, r1
   13950:	4614      	mov	r4, r2
   13952:	4606      	mov	r6, r0
   13954:	b110      	cbz	r0, 1395c <__swbuf_r+0x10>
   13956:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13958:	2b00      	cmp	r3, #0
   1395a:	d04c      	beq.n	139f6 <__swbuf_r+0xaa>
   1395c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13960:	69a3      	ldr	r3, [r4, #24]
   13962:	60a3      	str	r3, [r4, #8]
   13964:	0717      	lsls	r7, r2, #28
   13966:	b290      	uxth	r0, r2
   13968:	d51b      	bpl.n	139a2 <__swbuf_r+0x56>
   1396a:	6923      	ldr	r3, [r4, #16]
   1396c:	b1cb      	cbz	r3, 139a2 <__swbuf_r+0x56>
   1396e:	b2ed      	uxtb	r5, r5
   13970:	0481      	lsls	r1, r0, #18
   13972:	462f      	mov	r7, r5
   13974:	d522      	bpl.n	139bc <__swbuf_r+0x70>
   13976:	6822      	ldr	r2, [r4, #0]
   13978:	6961      	ldr	r1, [r4, #20]
   1397a:	1ad3      	subs	r3, r2, r3
   1397c:	4299      	cmp	r1, r3
   1397e:	dd29      	ble.n	139d4 <__swbuf_r+0x88>
   13980:	3301      	adds	r3, #1
   13982:	68a1      	ldr	r1, [r4, #8]
   13984:	3901      	subs	r1, #1
   13986:	60a1      	str	r1, [r4, #8]
   13988:	1c51      	adds	r1, r2, #1
   1398a:	6021      	str	r1, [r4, #0]
   1398c:	7015      	strb	r5, [r2, #0]
   1398e:	6962      	ldr	r2, [r4, #20]
   13990:	429a      	cmp	r2, r3
   13992:	d027      	beq.n	139e4 <__swbuf_r+0x98>
   13994:	89a3      	ldrh	r3, [r4, #12]
   13996:	07db      	lsls	r3, r3, #31
   13998:	d501      	bpl.n	1399e <__swbuf_r+0x52>
   1399a:	2d0a      	cmp	r5, #10
   1399c:	d022      	beq.n	139e4 <__swbuf_r+0x98>
   1399e:	4638      	mov	r0, r7
   139a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   139a2:	4621      	mov	r1, r4
   139a4:	4630      	mov	r0, r6
   139a6:	f7ff fdaf 	bl	13508 <__swsetup_r>
   139aa:	bb08      	cbnz	r0, 139f0 <__swbuf_r+0xa4>
   139ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   139b0:	6923      	ldr	r3, [r4, #16]
   139b2:	b290      	uxth	r0, r2
   139b4:	b2ed      	uxtb	r5, r5
   139b6:	0481      	lsls	r1, r0, #18
   139b8:	462f      	mov	r7, r5
   139ba:	d4dc      	bmi.n	13976 <__swbuf_r+0x2a>
   139bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   139c0:	81a2      	strh	r2, [r4, #12]
   139c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   139c4:	6961      	ldr	r1, [r4, #20]
   139c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   139ca:	6662      	str	r2, [r4, #100]	; 0x64
   139cc:	6822      	ldr	r2, [r4, #0]
   139ce:	1ad3      	subs	r3, r2, r3
   139d0:	4299      	cmp	r1, r3
   139d2:	dcd5      	bgt.n	13980 <__swbuf_r+0x34>
   139d4:	4621      	mov	r1, r4
   139d6:	4630      	mov	r0, r6
   139d8:	f7fc fea0 	bl	1071c <_fflush_r>
   139dc:	b940      	cbnz	r0, 139f0 <__swbuf_r+0xa4>
   139de:	6822      	ldr	r2, [r4, #0]
   139e0:	2301      	movs	r3, #1
   139e2:	e7ce      	b.n	13982 <__swbuf_r+0x36>
   139e4:	4621      	mov	r1, r4
   139e6:	4630      	mov	r0, r6
   139e8:	f7fc fe98 	bl	1071c <_fflush_r>
   139ec:	2800      	cmp	r0, #0
   139ee:	d0d6      	beq.n	1399e <__swbuf_r+0x52>
   139f0:	f04f 37ff 	mov.w	r7, #4294967295
   139f4:	e7d3      	b.n	1399e <__swbuf_r+0x52>
   139f6:	f7f7 fb09 	bl	b00c <__sinit>
   139fa:	e7af      	b.n	1395c <__swbuf_r+0x10>

000139fc <_fstat_r>:
   139fc:	b570      	push	{r4, r5, r6, lr}
   139fe:	460c      	mov	r4, r1
   13a00:	4d08      	ldr	r5, [pc, #32]	; (13a24 <_fstat_r+0x28>)
   13a02:	4603      	mov	r3, r0
   13a04:	2600      	movs	r6, #0
   13a06:	4620      	mov	r0, r4
   13a08:	4611      	mov	r1, r2
   13a0a:	461c      	mov	r4, r3
   13a0c:	602e      	str	r6, [r5, #0]
   13a0e:	f7f4 fa09 	bl	7e24 <_fstat>
   13a12:	1c43      	adds	r3, r0, #1
   13a14:	d000      	beq.n	13a18 <_fstat_r+0x1c>
   13a16:	bd70      	pop	{r4, r5, r6, pc}
   13a18:	682b      	ldr	r3, [r5, #0]
   13a1a:	2b00      	cmp	r3, #0
   13a1c:	d0fb      	beq.n	13a16 <_fstat_r+0x1a>
   13a1e:	6023      	str	r3, [r4, #0]
   13a20:	bd70      	pop	{r4, r5, r6, pc}
   13a22:	bf00      	nop
   13a24:	2001e79c 	.word	0x2001e79c

00013a28 <_isatty_r>:
   13a28:	b538      	push	{r3, r4, r5, lr}
   13a2a:	4d07      	ldr	r5, [pc, #28]	; (13a48 <_isatty_r+0x20>)
   13a2c:	2200      	movs	r2, #0
   13a2e:	4604      	mov	r4, r0
   13a30:	4608      	mov	r0, r1
   13a32:	602a      	str	r2, [r5, #0]
   13a34:	f7f4 f9fc 	bl	7e30 <_isatty>
   13a38:	1c43      	adds	r3, r0, #1
   13a3a:	d000      	beq.n	13a3e <_isatty_r+0x16>
   13a3c:	bd38      	pop	{r3, r4, r5, pc}
   13a3e:	682b      	ldr	r3, [r5, #0]
   13a40:	2b00      	cmp	r3, #0
   13a42:	d0fb      	beq.n	13a3c <_isatty_r+0x14>
   13a44:	6023      	str	r3, [r4, #0]
   13a46:	bd38      	pop	{r3, r4, r5, pc}
   13a48:	2001e79c 	.word	0x2001e79c

00013a4c <__aeabi_drsub>:
   13a4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   13a50:	e002      	b.n	13a58 <__adddf3>
   13a52:	bf00      	nop

00013a54 <__aeabi_dsub>:
   13a54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00013a58 <__adddf3>:
   13a58:	b530      	push	{r4, r5, lr}
   13a5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   13a5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   13a62:	ea94 0f05 	teq	r4, r5
   13a66:	bf08      	it	eq
   13a68:	ea90 0f02 	teqeq	r0, r2
   13a6c:	bf1f      	itttt	ne
   13a6e:	ea54 0c00 	orrsne.w	ip, r4, r0
   13a72:	ea55 0c02 	orrsne.w	ip, r5, r2
   13a76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   13a7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   13a7e:	f000 80e2 	beq.w	13c46 <__adddf3+0x1ee>
   13a82:	ea4f 5454 	mov.w	r4, r4, lsr #21
   13a86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   13a8a:	bfb8      	it	lt
   13a8c:	426d      	neglt	r5, r5
   13a8e:	dd0c      	ble.n	13aaa <__adddf3+0x52>
   13a90:	442c      	add	r4, r5
   13a92:	ea80 0202 	eor.w	r2, r0, r2
   13a96:	ea81 0303 	eor.w	r3, r1, r3
   13a9a:	ea82 0000 	eor.w	r0, r2, r0
   13a9e:	ea83 0101 	eor.w	r1, r3, r1
   13aa2:	ea80 0202 	eor.w	r2, r0, r2
   13aa6:	ea81 0303 	eor.w	r3, r1, r3
   13aaa:	2d36      	cmp	r5, #54	; 0x36
   13aac:	bf88      	it	hi
   13aae:	bd30      	pophi	{r4, r5, pc}
   13ab0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13ab4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   13ab8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   13abc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   13ac0:	d002      	beq.n	13ac8 <__adddf3+0x70>
   13ac2:	4240      	negs	r0, r0
   13ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13ac8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   13acc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13ad0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   13ad4:	d002      	beq.n	13adc <__adddf3+0x84>
   13ad6:	4252      	negs	r2, r2
   13ad8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13adc:	ea94 0f05 	teq	r4, r5
   13ae0:	f000 80a7 	beq.w	13c32 <__adddf3+0x1da>
   13ae4:	f1a4 0401 	sub.w	r4, r4, #1
   13ae8:	f1d5 0e20 	rsbs	lr, r5, #32
   13aec:	db0d      	blt.n	13b0a <__adddf3+0xb2>
   13aee:	fa02 fc0e 	lsl.w	ip, r2, lr
   13af2:	fa22 f205 	lsr.w	r2, r2, r5
   13af6:	1880      	adds	r0, r0, r2
   13af8:	f141 0100 	adc.w	r1, r1, #0
   13afc:	fa03 f20e 	lsl.w	r2, r3, lr
   13b00:	1880      	adds	r0, r0, r2
   13b02:	fa43 f305 	asr.w	r3, r3, r5
   13b06:	4159      	adcs	r1, r3
   13b08:	e00e      	b.n	13b28 <__adddf3+0xd0>
   13b0a:	f1a5 0520 	sub.w	r5, r5, #32
   13b0e:	f10e 0e20 	add.w	lr, lr, #32
   13b12:	2a01      	cmp	r2, #1
   13b14:	fa03 fc0e 	lsl.w	ip, r3, lr
   13b18:	bf28      	it	cs
   13b1a:	f04c 0c02 	orrcs.w	ip, ip, #2
   13b1e:	fa43 f305 	asr.w	r3, r3, r5
   13b22:	18c0      	adds	r0, r0, r3
   13b24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   13b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13b2c:	d507      	bpl.n	13b3e <__adddf3+0xe6>
   13b2e:	f04f 0e00 	mov.w	lr, #0
   13b32:	f1dc 0c00 	rsbs	ip, ip, #0
   13b36:	eb7e 0000 	sbcs.w	r0, lr, r0
   13b3a:	eb6e 0101 	sbc.w	r1, lr, r1
   13b3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   13b42:	d31b      	bcc.n	13b7c <__adddf3+0x124>
   13b44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   13b48:	d30c      	bcc.n	13b64 <__adddf3+0x10c>
   13b4a:	0849      	lsrs	r1, r1, #1
   13b4c:	ea5f 0030 	movs.w	r0, r0, rrx
   13b50:	ea4f 0c3c 	mov.w	ip, ip, rrx
   13b54:	f104 0401 	add.w	r4, r4, #1
   13b58:	ea4f 5244 	mov.w	r2, r4, lsl #21
   13b5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   13b60:	f080 809a 	bcs.w	13c98 <__adddf3+0x240>
   13b64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13b68:	bf08      	it	eq
   13b6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13b6e:	f150 0000 	adcs.w	r0, r0, #0
   13b72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13b76:	ea41 0105 	orr.w	r1, r1, r5
   13b7a:	bd30      	pop	{r4, r5, pc}
   13b7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   13b80:	4140      	adcs	r0, r0
   13b82:	eb41 0101 	adc.w	r1, r1, r1
   13b86:	3c01      	subs	r4, #1
   13b88:	bf28      	it	cs
   13b8a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   13b8e:	d2e9      	bcs.n	13b64 <__adddf3+0x10c>
   13b90:	f091 0f00 	teq	r1, #0
   13b94:	bf04      	itt	eq
   13b96:	4601      	moveq	r1, r0
   13b98:	2000      	moveq	r0, #0
   13b9a:	fab1 f381 	clz	r3, r1
   13b9e:	bf08      	it	eq
   13ba0:	3320      	addeq	r3, #32
   13ba2:	f1a3 030b 	sub.w	r3, r3, #11
   13ba6:	f1b3 0220 	subs.w	r2, r3, #32
   13baa:	da0c      	bge.n	13bc6 <__adddf3+0x16e>
   13bac:	320c      	adds	r2, #12
   13bae:	dd08      	ble.n	13bc2 <__adddf3+0x16a>
   13bb0:	f102 0c14 	add.w	ip, r2, #20
   13bb4:	f1c2 020c 	rsb	r2, r2, #12
   13bb8:	fa01 f00c 	lsl.w	r0, r1, ip
   13bbc:	fa21 f102 	lsr.w	r1, r1, r2
   13bc0:	e00c      	b.n	13bdc <__adddf3+0x184>
   13bc2:	f102 0214 	add.w	r2, r2, #20
   13bc6:	bfd8      	it	le
   13bc8:	f1c2 0c20 	rsble	ip, r2, #32
   13bcc:	fa01 f102 	lsl.w	r1, r1, r2
   13bd0:	fa20 fc0c 	lsr.w	ip, r0, ip
   13bd4:	bfdc      	itt	le
   13bd6:	ea41 010c 	orrle.w	r1, r1, ip
   13bda:	4090      	lslle	r0, r2
   13bdc:	1ae4      	subs	r4, r4, r3
   13bde:	bfa2      	ittt	ge
   13be0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   13be4:	4329      	orrge	r1, r5
   13be6:	bd30      	popge	{r4, r5, pc}
   13be8:	ea6f 0404 	mvn.w	r4, r4
   13bec:	3c1f      	subs	r4, #31
   13bee:	da1c      	bge.n	13c2a <__adddf3+0x1d2>
   13bf0:	340c      	adds	r4, #12
   13bf2:	dc0e      	bgt.n	13c12 <__adddf3+0x1ba>
   13bf4:	f104 0414 	add.w	r4, r4, #20
   13bf8:	f1c4 0220 	rsb	r2, r4, #32
   13bfc:	fa20 f004 	lsr.w	r0, r0, r4
   13c00:	fa01 f302 	lsl.w	r3, r1, r2
   13c04:	ea40 0003 	orr.w	r0, r0, r3
   13c08:	fa21 f304 	lsr.w	r3, r1, r4
   13c0c:	ea45 0103 	orr.w	r1, r5, r3
   13c10:	bd30      	pop	{r4, r5, pc}
   13c12:	f1c4 040c 	rsb	r4, r4, #12
   13c16:	f1c4 0220 	rsb	r2, r4, #32
   13c1a:	fa20 f002 	lsr.w	r0, r0, r2
   13c1e:	fa01 f304 	lsl.w	r3, r1, r4
   13c22:	ea40 0003 	orr.w	r0, r0, r3
   13c26:	4629      	mov	r1, r5
   13c28:	bd30      	pop	{r4, r5, pc}
   13c2a:	fa21 f004 	lsr.w	r0, r1, r4
   13c2e:	4629      	mov	r1, r5
   13c30:	bd30      	pop	{r4, r5, pc}
   13c32:	f094 0f00 	teq	r4, #0
   13c36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   13c3a:	bf06      	itte	eq
   13c3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   13c40:	3401      	addeq	r4, #1
   13c42:	3d01      	subne	r5, #1
   13c44:	e74e      	b.n	13ae4 <__adddf3+0x8c>
   13c46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13c4a:	bf18      	it	ne
   13c4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   13c50:	d029      	beq.n	13ca6 <__adddf3+0x24e>
   13c52:	ea94 0f05 	teq	r4, r5
   13c56:	bf08      	it	eq
   13c58:	ea90 0f02 	teqeq	r0, r2
   13c5c:	d005      	beq.n	13c6a <__adddf3+0x212>
   13c5e:	ea54 0c00 	orrs.w	ip, r4, r0
   13c62:	bf04      	itt	eq
   13c64:	4619      	moveq	r1, r3
   13c66:	4610      	moveq	r0, r2
   13c68:	bd30      	pop	{r4, r5, pc}
   13c6a:	ea91 0f03 	teq	r1, r3
   13c6e:	bf1e      	ittt	ne
   13c70:	2100      	movne	r1, #0
   13c72:	2000      	movne	r0, #0
   13c74:	bd30      	popne	{r4, r5, pc}
   13c76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   13c7a:	d105      	bne.n	13c88 <__adddf3+0x230>
   13c7c:	0040      	lsls	r0, r0, #1
   13c7e:	4149      	adcs	r1, r1
   13c80:	bf28      	it	cs
   13c82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   13c86:	bd30      	pop	{r4, r5, pc}
   13c88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   13c8c:	bf3c      	itt	cc
   13c8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   13c92:	bd30      	popcc	{r4, r5, pc}
   13c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13c98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   13c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13ca0:	f04f 0000 	mov.w	r0, #0
   13ca4:	bd30      	pop	{r4, r5, pc}
   13ca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13caa:	bf1a      	itte	ne
   13cac:	4619      	movne	r1, r3
   13cae:	4610      	movne	r0, r2
   13cb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   13cb4:	bf1c      	itt	ne
   13cb6:	460b      	movne	r3, r1
   13cb8:	4602      	movne	r2, r0
   13cba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13cbe:	bf06      	itte	eq
   13cc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   13cc4:	ea91 0f03 	teqeq	r1, r3
   13cc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   13ccc:	bd30      	pop	{r4, r5, pc}
   13cce:	bf00      	nop

00013cd0 <__aeabi_ui2d>:
   13cd0:	f090 0f00 	teq	r0, #0
   13cd4:	bf04      	itt	eq
   13cd6:	2100      	moveq	r1, #0
   13cd8:	4770      	bxeq	lr
   13cda:	b530      	push	{r4, r5, lr}
   13cdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13ce0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13ce4:	f04f 0500 	mov.w	r5, #0
   13ce8:	f04f 0100 	mov.w	r1, #0
   13cec:	e750      	b.n	13b90 <__adddf3+0x138>
   13cee:	bf00      	nop

00013cf0 <__aeabi_i2d>:
   13cf0:	f090 0f00 	teq	r0, #0
   13cf4:	bf04      	itt	eq
   13cf6:	2100      	moveq	r1, #0
   13cf8:	4770      	bxeq	lr
   13cfa:	b530      	push	{r4, r5, lr}
   13cfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13d00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13d04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   13d08:	bf48      	it	mi
   13d0a:	4240      	negmi	r0, r0
   13d0c:	f04f 0100 	mov.w	r1, #0
   13d10:	e73e      	b.n	13b90 <__adddf3+0x138>
   13d12:	bf00      	nop

00013d14 <__aeabi_f2d>:
   13d14:	0042      	lsls	r2, r0, #1
   13d16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   13d1a:	ea4f 0131 	mov.w	r1, r1, rrx
   13d1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   13d22:	bf1f      	itttt	ne
   13d24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   13d28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   13d2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   13d30:	4770      	bxne	lr
   13d32:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   13d36:	bf08      	it	eq
   13d38:	4770      	bxeq	lr
   13d3a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   13d3e:	bf04      	itt	eq
   13d40:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   13d44:	4770      	bxeq	lr
   13d46:	b530      	push	{r4, r5, lr}
   13d48:	f44f 7460 	mov.w	r4, #896	; 0x380
   13d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13d54:	e71c      	b.n	13b90 <__adddf3+0x138>
   13d56:	bf00      	nop

00013d58 <__aeabi_ul2d>:
   13d58:	ea50 0201 	orrs.w	r2, r0, r1
   13d5c:	bf08      	it	eq
   13d5e:	4770      	bxeq	lr
   13d60:	b530      	push	{r4, r5, lr}
   13d62:	f04f 0500 	mov.w	r5, #0
   13d66:	e00a      	b.n	13d7e <__aeabi_l2d+0x16>

00013d68 <__aeabi_l2d>:
   13d68:	ea50 0201 	orrs.w	r2, r0, r1
   13d6c:	bf08      	it	eq
   13d6e:	4770      	bxeq	lr
   13d70:	b530      	push	{r4, r5, lr}
   13d72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   13d76:	d502      	bpl.n	13d7e <__aeabi_l2d+0x16>
   13d78:	4240      	negs	r0, r0
   13d7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13d7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13d82:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13d86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   13d8a:	f43f aed8 	beq.w	13b3e <__adddf3+0xe6>
   13d8e:	f04f 0203 	mov.w	r2, #3
   13d92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   13d96:	bf18      	it	ne
   13d98:	3203      	addne	r2, #3
   13d9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   13d9e:	bf18      	it	ne
   13da0:	3203      	addne	r2, #3
   13da2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   13da6:	f1c2 0320 	rsb	r3, r2, #32
   13daa:	fa00 fc03 	lsl.w	ip, r0, r3
   13dae:	fa20 f002 	lsr.w	r0, r0, r2
   13db2:	fa01 fe03 	lsl.w	lr, r1, r3
   13db6:	ea40 000e 	orr.w	r0, r0, lr
   13dba:	fa21 f102 	lsr.w	r1, r1, r2
   13dbe:	4414      	add	r4, r2
   13dc0:	e6bd      	b.n	13b3e <__adddf3+0xe6>
   13dc2:	bf00      	nop

00013dc4 <__aeabi_d2lz>:
   13dc4:	b508      	push	{r3, lr}
   13dc6:	4602      	mov	r2, r0
   13dc8:	460b      	mov	r3, r1
   13dca:	ec43 2b17 	vmov	d7, r2, r3
   13dce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   13dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13dd6:	d403      	bmi.n	13de0 <__aeabi_d2lz+0x1c>
   13dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13ddc:	f000 b80c 	b.w	13df8 <__aeabi_d2ulz>
   13de0:	eeb1 7b47 	vneg.f64	d7, d7
   13de4:	ec51 0b17 	vmov	r0, r1, d7
   13de8:	f000 f806 	bl	13df8 <__aeabi_d2ulz>
   13dec:	4240      	negs	r0, r0
   13dee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13df2:	bd08      	pop	{r3, pc}
   13df4:	0000      	movs	r0, r0
	...

00013df8 <__aeabi_d2ulz>:
   13df8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 13e28 <__aeabi_d2ulz+0x30>
   13dfc:	ec41 0b17 	vmov	d7, r0, r1
   13e00:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 13e30 <__aeabi_d2ulz+0x38>
   13e04:	ee27 6b06 	vmul.f64	d6, d7, d6
   13e08:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   13e0c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   13e10:	eea4 7b45 	vfms.f64	d7, d4, d5
   13e14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   13e18:	ee16 1a10 	vmov	r1, s12
   13e1c:	ee17 0a90 	vmov	r0, s15
   13e20:	4770      	bx	lr
   13e22:	bf00      	nop
   13e24:	f3af 8000 	nop.w
   13e28:	00000000 	.word	0x00000000
   13e2c:	3df00000 	.word	0x3df00000
   13e30:	00000000 	.word	0x00000000
   13e34:	41f00000 	.word	0x41f00000

00013e38 <___init_veneer>:
   13e38:	f85f f000 	ldr.w	pc, [pc]	; 13e3c <___init_veneer+0x4>
   13e3c:	600025f1 	.word	0x600025f1

00013e40 <___reboot_Teensyduino__veneer>:
   13e40:	f85f f000 	ldr.w	pc, [pc]	; 13e44 <___reboot_Teensyduino__veneer+0x4>
   13e44:	60002549 	.word	0x60002549

00013e48 <___ZN16CrashReportClasscvbEv_veneer>:
   13e48:	f85f f000 	ldr.w	pc, [pc]	; 13e4c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   13e4c:	60001ded 	.word	0x60001ded

00013e50 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   13e50:	f85f f000 	ldr.w	pc, [pc]	; 13e54 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   13e54:	60001655 	.word	0x60001655
	...

Disassembly of section .fini:

00013e60 <_fini>:
   13e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e62:	bf00      	nop

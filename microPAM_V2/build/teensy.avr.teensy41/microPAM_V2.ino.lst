
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd0c 	bl	60001e48 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fcb8 	bl	60001e58 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 feda 	bl	600022d4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f86d 	bl	60002610 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fce8 	bl	60001f50 <configure_external_ram>
	analog_init();
60001580:	f001 f80c 	bl	6000259c <analog_init>
	pwm_init();
60001584:	f001 f850 	bl	60002628 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fed2 	bl	60002330 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fc5e 	bl	60001e4c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ff63 	bl	60002460 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fc57 	bl	60001e54 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fc53 	bl	60001e50 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f82d 	bl	60002608 <____libc_init_array_veneer>
	main();
600015ae:	f001 f84f 	bl	60002650 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00014568 	.word	0x00014568
600015c0:	60002870 	.word	0x60002870
600015c4:	00000000 	.word	0x00000000
600015c8:	20008ec0 	.word	0x20008ec0
600015cc:	60016ddc 	.word	0x60016ddc
600015d0:	20000000 	.word	0x20000000
600015d4:	200294e0 	.word	0x200294e0
600015d8:	20008ec0 	.word	0x20008ec0
600015dc:	20008c00 	.word	0x20008c00
600015e0:	000082dd 	.word	0x000082dd
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	000078e1 	.word	0x000078e1
600015f4:	20029458 	.word	0x20029458
600015f8:	000078e5 	.word	0x000078e5
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2002945c 	.word	0x2002945c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001654:	4b7c      	ldr	r3, [pc, #496]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000165a:	2a0b      	cmp	r2, #11
{
6000165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001660:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001662:	d11c      	bne.n	6000169e <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001664:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001668:	4978      	ldr	r1, [pc, #480]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000166a:	4b79      	ldr	r3, [pc, #484]	; (60001850 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
6000166c:	4e79      	ldr	r6, [pc, #484]	; (60001854 <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
6000166e:	f101 0c04 	add.w	ip, r1, #4
60001672:	4050      	eors	r0, r2
60001674:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001676:	f000 0201 	and.w	r2, r0, #1
6000167a:	3c01      	subs	r4, #1
6000167c:	fb03 f202 	mul.w	r2, r3, r2
60001680:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001684:	d1f7      	bne.n	60001676 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001686:	45b4      	cmp	ip, r6
60001688:	d002      	beq.n	60001690 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
6000168a:	684a      	ldr	r2, [r1, #4]
6000168c:	4661      	mov	r1, ip
6000168e:	e7ee      	b.n	6000166e <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001690:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001848 <CrashReportClass::printTo(Print&) const+0x1f4>
60001694:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001698:	4298      	cmp	r0, r3
6000169a:	f000 80fd 	beq.w	60001898 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000169e:	682b      	ldr	r3, [r5, #0]
600016a0:	2217      	movs	r2, #23
600016a2:	496d      	ldr	r1, [pc, #436]	; (60001858 <CrashReportClass::printTo(Print&) const+0x204>)
600016a4:	4628      	mov	r0, r5
600016a6:	685b      	ldr	r3, [r3, #4]
600016a8:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600016aa:	4628      	mov	r0, r5
600016ac:	f000 ffb4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016b0:	682b      	ldr	r3, [r5, #0]
600016b2:	2248      	movs	r2, #72	; 0x48
600016b4:	4969      	ldr	r1, [pc, #420]	; (6000185c <CrashReportClass::printTo(Print&) const+0x208>)
600016b6:	685b      	ldr	r3, [r3, #4]
600016b8:	4628      	mov	r0, r5
600016ba:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016bc:	4628      	mov	r0, r5
600016be:	f000 ffab 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016c2:	682b      	ldr	r3, [r5, #0]
600016c4:	2249      	movs	r2, #73	; 0x49
600016c6:	4966      	ldr	r1, [pc, #408]	; (60001860 <CrashReportClass::printTo(Print&) const+0x20c>)
600016c8:	685b      	ldr	r3, [r3, #4]
600016ca:	4628      	mov	r0, r5
600016cc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016ce:	4628      	mov	r0, r5
600016d0:	f000 ffa2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016d4:	682b      	ldr	r3, [r5, #0]
600016d6:	2224      	movs	r2, #36	; 0x24
600016d8:	4962      	ldr	r1, [pc, #392]	; (60001864 <CrashReportClass::printTo(Print&) const+0x210>)
600016da:	685b      	ldr	r3, [r3, #4]
600016dc:	4628      	mov	r0, r5
600016de:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016e0:	4628      	mov	r0, r5
600016e2:	f000 ff99 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016e6:	682b      	ldr	r3, [r5, #0]
600016e8:	2247      	movs	r2, #71	; 0x47
600016ea:	495f      	ldr	r1, [pc, #380]	; (60001868 <CrashReportClass::printTo(Print&) const+0x214>)
600016ec:	685b      	ldr	r3, [r3, #4]
600016ee:	4628      	mov	r0, r5
600016f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600016f2:	4628      	mov	r0, r5
600016f4:	f000 ff90 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600016f8:	682b      	ldr	r3, [r5, #0]
600016fa:	223f      	movs	r2, #63	; 0x3f
600016fc:	495b      	ldr	r1, [pc, #364]	; (6000186c <CrashReportClass::printTo(Print&) const+0x218>)
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	4628      	mov	r0, r5
60001702:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001704:	4628      	mov	r0, r5
60001706:	f000 ff87 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
6000170a:	4b59      	ldr	r3, [pc, #356]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
6000170c:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
6000170e:	07a2      	lsls	r2, r4, #30
60001710:	d50d      	bpl.n	6000172e <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
60001712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001714:	4b57      	ldr	r3, [pc, #348]	; (60001874 <CrashReportClass::printTo(Print&) const+0x220>)
60001716:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
60001718:	682b      	ldr	r3, [r5, #0]
6000171a:	f000 81b8 	beq.w	60001a8e <CrashReportClass::printTo(Print&) const+0x43a>
6000171e:	2240      	movs	r2, #64	; 0x40
60001720:	4955      	ldr	r1, [pc, #340]	; (60001878 <CrashReportClass::printTo(Print&) const+0x224>)
60001722:	685b      	ldr	r3, [r3, #4]
60001724:	4628      	mov	r0, r5
60001726:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001728:	4628      	mov	r0, r5
6000172a:	f000 ff75 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
6000172e:	0763      	lsls	r3, r4, #29
60001730:	f100 81a3 	bmi.w	60001a7a <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001734:	0727      	lsls	r7, r4, #28
60001736:	f100 8196 	bmi.w	60001a66 <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000173a:	06e6      	lsls	r6, r4, #27
6000173c:	f100 8189 	bmi.w	60001a52 <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001740:	06a0      	lsls	r0, r4, #26
60001742:	f100 817c 	bmi.w	60001a3e <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001746:	0661      	lsls	r1, r4, #25
60001748:	f100 816f 	bmi.w	60001a2a <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000174c:	0622      	lsls	r2, r4, #24
6000174e:	f100 8134 	bmi.w	600019ba <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001752:	05e3      	lsls	r3, r4, #23
60001754:	f100 813d 	bmi.w	600019d2 <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001758:	4f3b      	ldr	r7, [pc, #236]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
6000175e:	2b00      	cmp	r3, #0
60001760:	d051      	beq.n	60001806 <CrashReportClass::printTo(Print&) const+0x1b2>
60001762:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
60001764:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60001894 <CrashReportClass::printTo(Print&) const+0x240>
60001768:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6000188c <CrashReportClass::printTo(Print&) const+0x238>
6000176c:	e004      	b.n	60001778 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
6000176e:	3401      	adds	r4, #1
60001770:	2c07      	cmp	r4, #7
60001772:	d039      	beq.n	600017e8 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
60001774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001778:	1e62      	subs	r2, r4, #1
6000177a:	2601      	movs	r6, #1
6000177c:	fa06 f102 	lsl.w	r1, r6, r2
60001780:	4219      	tst	r1, r3
60001782:	d0f4      	beq.n	6000176e <CrashReportClass::printTo(Print&) const+0x11a>
60001784:	682b      	ldr	r3, [r5, #0]
60001786:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
6000178a:	4649      	mov	r1, r9
6000178c:	220e      	movs	r2, #14
6000178e:	685b      	ldr	r3, [r3, #4]
60001790:	4628      	mov	r0, r5
60001792:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001794:	4621      	mov	r1, r4
60001796:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001798:	3401      	adds	r4, #1
6000179a:	f000 ff49 	bl	60002630 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179e:	682b      	ldr	r3, [r5, #0]
600017a0:	2205      	movs	r2, #5
600017a2:	4936      	ldr	r1, [pc, #216]	; (6000187c <CrashReportClass::printTo(Print&) const+0x228>)
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	4628      	mov	r0, r5
600017a8:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600017aa:	2300      	movs	r3, #0
600017ac:	f8da 1004 	ldr.w	r1, [sl, #4]
600017b0:	220a      	movs	r2, #10
600017b2:	4628      	mov	r0, r5
600017b4:	f000 ff34 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b8:	682b      	ldr	r3, [r5, #0]
600017ba:	2204      	movs	r2, #4
600017bc:	4930      	ldr	r1, [pc, #192]	; (60001880 <CrashReportClass::printTo(Print&) const+0x22c>)
600017be:	685b      	ldr	r3, [r3, #4]
600017c0:	4628      	mov	r0, r5
600017c2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600017c4:	f8da 1004 	ldr.w	r1, [sl, #4]
600017c8:	2300      	movs	r3, #0
600017ca:	2210      	movs	r2, #16
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff27 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	4632      	mov	r2, r6
600017d6:	492b      	ldr	r1, [pc, #172]	; (60001884 <CrashReportClass::printTo(Print&) const+0x230>)
600017d8:	685b      	ldr	r3, [r3, #4]
600017da:	4628      	mov	r0, r5
600017dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017de:	4628      	mov	r0, r5
600017e0:	f000 ff1a 	bl	60002618 <___ZN5Print7printlnEv_veneer>
600017e4:	2c07      	cmp	r4, #7
600017e6:	d1c5      	bne.n	60001774 <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600017e8:	4b27      	ldr	r3, [pc, #156]	; (60001888 <CrashReportClass::printTo(Print&) const+0x234>)
600017ea:	2200      	movs	r2, #0
600017ec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600017f0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600017f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017f8:	4a24      	ldr	r2, [pc, #144]	; (6000188c <CrashReportClass::printTo(Print&) const+0x238>)
600017fa:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600017fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001802:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001806:	4a10      	ldr	r2, [pc, #64]	; (60001848 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001808:	2300      	movs	r3, #0
	info->ipsr  = 0;
6000180a:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000180e:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001812:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001816:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000181a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001822:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001826:	4809      	ldr	r0, [pc, #36]	; (6000184c <CrashReportClass::printTo(Print&) const+0x1f8>)
60001828:	4919      	ldr	r1, [pc, #100]	; (60001890 <CrashReportClass::printTo(Print&) const+0x23c>)
6000182a:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
6000182e:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001832:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001836:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183a:	4a0d      	ldr	r2, [pc, #52]	; (60001870 <CrashReportClass::printTo(Print&) const+0x21c>)
}
6000183c:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000183e:	6891      	ldr	r1, [r2, #8]
60001840:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001842:	6313      	str	r3, [r2, #48]	; 0x30
}
60001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001848:	2027ff00 	.word	0x2027ff00
6000184c:	2027ff80 	.word	0x2027ff80
60001850:	edb88320 	.word	0xedb88320
60001854:	2027ffa8 	.word	0x2027ffa8
60001858:	2000802c 	.word	0x2000802c
6000185c:	20008044 	.word	0x20008044
60001860:	20008090 	.word	0x20008090
60001864:	200080dc 	.word	0x200080dc
60001868:	20008104 	.word	0x20008104
6000186c:	2000814c 	.word	0x2000814c
60001870:	400f8000 	.word	0x400f8000
60001874:	0bad00f1 	.word	0x0bad00f1
60001878:	200081d8 	.word	0x200081d8
6000187c:	200083b0 	.word	0x200083b0
60001880:	200083b8 	.word	0x200083b8
60001884:	200080d8 	.word	0x200080d8
60001888:	2027f000 	.word	0x2027f000
6000188c:	2027ffc0 	.word	0x2027ffc0
60001890:	2027ffa0 	.word	0x2027ffa0
60001894:	200083a0 	.word	0x200083a0
							  return write((const uint8_t *)str, strlen(str)); }
60001898:	682b      	ldr	r3, [r5, #0]
6000189a:	220c      	movs	r2, #12
6000189c:	49aa      	ldr	r1, [pc, #680]	; (60001b48 <CrashReportClass::printTo(Print&) const+0x4f4>)
6000189e:	4628      	mov	r0, r5
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a4:	4628      	mov	r0, r5
600018a6:	f000 feb7 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018aa:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600018ac:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600018b0:	4628      	mov	r0, r5
    info->time /= 60;
600018b2:	4ba6      	ldr	r3, [pc, #664]	; (60001b4c <CrashReportClass::printTo(Print&) const+0x4f8>)
600018b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600018b8:	fba3 2709 	umull	r2, r7, r3, r9
600018bc:	49a4      	ldr	r1, [pc, #656]	; (60001b50 <CrashReportClass::printTo(Print&) const+0x4fc>)
600018be:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600018c0:	fba3 2307 	umull	r2, r3, r3, r7
600018c4:	2226      	movs	r2, #38	; 0x26
600018c6:	095e      	lsrs	r6, r3, #5
600018c8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600018cc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600018ce:	49a1      	ldr	r1, [pc, #644]	; (60001b54 <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	fba1 3106 	umull	r3, r1, r1, r6
600018d8:	4623      	mov	r3, r4
600018da:	0909      	lsrs	r1, r1, #4
600018dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600018e0:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600018e4:	f000 fe9c 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e8:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600018ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018ee:	2201      	movs	r2, #1
600018f0:	685b      	ldr	r3, [r3, #4]
600018f2:	4628      	mov	r0, r5
600018f4:	4998      	ldr	r1, [pc, #608]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
600018f6:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018f8:	4623      	mov	r3, r4
600018fa:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018fe:	220a      	movs	r2, #10
60001900:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001902:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001906:	f000 fe8b 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2201      	movs	r2, #1
6000190e:	4992      	ldr	r1, [pc, #584]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x504>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001916:	4623      	mov	r3, r4
60001918:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
6000191c:	220a      	movs	r2, #10
6000191e:	4628      	mov	r0, r5
60001920:	f000 fe7e 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001924:	4628      	mov	r0, r5
60001926:	f000 fe77 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192a:	682b      	ldr	r3, [r5, #0]
6000192c:	2224      	movs	r2, #36	; 0x24
6000192e:	498b      	ldr	r1, [pc, #556]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x508>)
60001930:	685b      	ldr	r3, [r3, #4]
60001932:	4628      	mov	r0, r5
60001934:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001936:	4623      	mov	r3, r4
60001938:	2210      	movs	r2, #16
6000193a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
6000193e:	4628      	mov	r0, r5
60001940:	f000 fe6e 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001944:	4628      	mov	r0, r5
60001946:	f000 fe67 	bl	60002618 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
6000194a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000194e:	2e00      	cmp	r6, #0
60001950:	f040 80a0 	bne.w	60001a94 <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001954:	4e82      	ldr	r6, [pc, #520]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
60001956:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000195a:	2c00      	cmp	r4, #0
6000195c:	f040 80bb 	bne.w	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2222      	movs	r2, #34	; 0x22
60001964:	497f      	ldr	r1, [pc, #508]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x510>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
    p.print(info->temp);
6000196c:	4b7c      	ldr	r3, [pc, #496]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000196e:	2102      	movs	r1, #2
60001970:	4628      	mov	r0, r5
60001972:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001976:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000197a:	f000 fe61 	bl	60002640 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000197e:	682b      	ldr	r3, [r5, #0]
60001980:	2205      	movs	r2, #5
60001982:	4979      	ldr	r1, [pc, #484]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x514>)
60001984:	685b      	ldr	r3, [r3, #4]
60001986:	4628      	mov	r0, r5
60001988:	4798      	blx	r3
6000198a:	682b      	ldr	r3, [r5, #0]
6000198c:	221d      	movs	r2, #29
6000198e:	4977      	ldr	r1, [pc, #476]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x518>)
60001990:	685b      	ldr	r3, [r3, #4]
60001992:	4628      	mov	r0, r5
60001994:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001996:	4a76      	ldr	r2, [pc, #472]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x51c>)
60001998:	4876      	ldr	r0, [pc, #472]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000199a:	2300      	movs	r3, #0
6000199c:	6811      	ldr	r1, [r2, #0]
6000199e:	220a      	movs	r2, #10
600019a0:	fba0 0101 	umull	r0, r1, r0, r1
600019a4:	4628      	mov	r0, r5
600019a6:	0c89      	lsrs	r1, r1, #18
600019a8:	f000 fe3a 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019ac:	682b      	ldr	r3, [r5, #0]
600019ae:	2204      	movs	r2, #4
600019b0:	4971      	ldr	r1, [pc, #452]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x524>)
600019b2:	685b      	ldr	r3, [r3, #4]
600019b4:	4628      	mov	r0, r5
600019b6:	4798      	blx	r3
600019b8:	e6a7      	b.n	6000170a <CrashReportClass::printTo(Print&) const+0xb6>
600019ba:	682b      	ldr	r3, [r5, #0]
600019bc:	2221      	movs	r2, #33	; 0x21
600019be:	496f      	ldr	r1, [pc, #444]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x528>)
600019c0:	4628      	mov	r0, r5
600019c2:	685b      	ldr	r3, [r3, #4]
600019c4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019c6:	4628      	mov	r0, r5
600019c8:	f000 fe26 	bl	60002618 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
600019cc:	05e3      	lsls	r3, r4, #23
600019ce:	f57f aec3 	bpl.w	60001758 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2229      	movs	r2, #41	; 0x29
600019d6:	496a      	ldr	r1, [pc, #424]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x52c>)
600019d8:	4628      	mov	r0, r5
600019da:	685b      	ldr	r3, [r3, #4]
600019dc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019de:	4628      	mov	r0, r5
600019e0:	f000 fe1a 	bl	60002618 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600019e4:	4967      	ldr	r1, [pc, #412]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
600019e6:	6828      	ldr	r0, [r5, #0]
600019e8:	2221      	movs	r2, #33	; 0x21
600019ea:	688b      	ldr	r3, [r1, #8]
600019ec:	6844      	ldr	r4, [r0, #4]
600019ee:	4628      	mov	r0, r5
600019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600019f4:	608b      	str	r3, [r1, #8]
600019f6:	4964      	ldr	r1, [pc, #400]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x534>)
600019f8:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600019fa:	4628      	mov	r0, r5
600019fc:	f000 fe0c 	bl	60002618 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a00:	682b      	ldr	r3, [r5, #0]
60001a02:	2242      	movs	r2, #66	; 0x42
60001a04:	4961      	ldr	r1, [pc, #388]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x538>)
60001a06:	685b      	ldr	r3, [r3, #4]
60001a08:	4628      	mov	r0, r5
60001a0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe03 	bl	60002618 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a12:	4a5f      	ldr	r2, [pc, #380]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001a14:	4b5f      	ldr	r3, [pc, #380]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x540>)
60001a16:	2107      	movs	r1, #7
60001a18:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001a1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001a20:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001a22:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001a26:	bf30      	wfi
60001a28:	e7fd      	b.n	60001a26 <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a2a:	682b      	ldr	r3, [r5, #0]
60001a2c:	2221      	movs	r2, #33	; 0x21
60001a2e:	495a      	ldr	r1, [pc, #360]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x544>)
60001a30:	4628      	mov	r0, r5
60001a32:	685b      	ldr	r3, [r3, #4]
60001a34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a36:	4628      	mov	r0, r5
60001a38:	f000 fdee 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a3c:	e686      	b.n	6000174c <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3e:	682b      	ldr	r3, [r5, #0]
60001a40:	2229      	movs	r2, #41	; 0x29
60001a42:	4956      	ldr	r1, [pc, #344]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x548>)
60001a44:	4628      	mov	r0, r5
60001a46:	685b      	ldr	r3, [r3, #4]
60001a48:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a4a:	4628      	mov	r0, r5
60001a4c:	f000 fde4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a50:	e679      	b.n	60001746 <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	2226      	movs	r2, #38	; 0x26
60001a56:	4952      	ldr	r1, [pc, #328]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x54c>)
60001a58:	4628      	mov	r0, r5
60001a5a:	685b      	ldr	r3, [r3, #4]
60001a5c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a5e:	4628      	mov	r0, r5
60001a60:	f000 fdda 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a64:	e66c      	b.n	60001740 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001a66:	682b      	ldr	r3, [r5, #0]
60001a68:	222a      	movs	r2, #42	; 0x2a
60001a6a:	494e      	ldr	r1, [pc, #312]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x550>)
60001a6c:	4628      	mov	r0, r5
60001a6e:	685b      	ldr	r3, [r3, #4]
60001a70:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a72:	4628      	mov	r0, r5
60001a74:	f000 fdd0 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a78:	e65f      	b.n	6000173a <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a7a:	682b      	ldr	r3, [r5, #0]
60001a7c:	2227      	movs	r2, #39	; 0x27
60001a7e:	494a      	ldr	r1, [pc, #296]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x554>)
60001a80:	4628      	mov	r0, r5
60001a82:	685b      	ldr	r3, [r3, #4]
60001a84:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a86:	4628      	mov	r0, r5
60001a88:	f000 fdc6 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001a8c:	e652      	b.n	60001734 <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a8e:	2248      	movs	r2, #72	; 0x48
60001a90:	4946      	ldr	r1, [pc, #280]	; (60001bac <CrashReportClass::printTo(Print&) const+0x558>)
60001a92:	e646      	b.n	60001722 <CrashReportClass::printTo(Print&) const+0xce>
60001a94:	682b      	ldr	r3, [r5, #0]
60001a96:	2208      	movs	r2, #8
60001a98:	4945      	ldr	r1, [pc, #276]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x55c>)
60001a9a:	4628      	mov	r0, r5
60001a9c:	685b      	ldr	r3, [r3, #4]
60001a9e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001aa0:	4623      	mov	r3, r4
60001aa2:	2210      	movs	r2, #16
60001aa4:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001aa8:	4628      	mov	r0, r5
60001aaa:	f000 fdb9 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001aae:	4628      	mov	r0, r5
60001ab0:	f000 fdb2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ab4:	07f4      	lsls	r4, r6, #31
60001ab6:	d427      	bmi.n	60001b08 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001ab8:	07b0      	lsls	r0, r6, #30
60001aba:	f100 811d 	bmi.w	60001cf8 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001abe:	0731      	lsls	r1, r6, #28
60001ac0:	f100 810e 	bmi.w	60001ce0 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ac4:	06f2      	lsls	r2, r6, #27
60001ac6:	f100 8127 	bmi.w	60001d18 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001aca:	06b3      	lsls	r3, r6, #26
60001acc:	d525      	bpl.n	60001b1a <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001ace:	682b      	ldr	r3, [r5, #0]
60001ad0:	222a      	movs	r2, #42	; 0x2a
60001ad2:	4938      	ldr	r1, [pc, #224]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x560>)
60001ad4:	e01b      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ad6:	682b      	ldr	r3, [r5, #0]
60001ad8:	2208      	movs	r2, #8
60001ada:	4937      	ldr	r1, [pc, #220]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x564>)
60001adc:	4628      	mov	r0, r5
60001ade:	685b      	ldr	r3, [r3, #4]
60001ae0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ae2:	2300      	movs	r3, #0
60001ae4:	2210      	movs	r2, #16
60001ae6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001aea:	4628      	mov	r0, r5
60001aec:	f000 fd98 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001af0:	4628      	mov	r0, r5
60001af2:	f000 fd91 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001af6:	07a0      	lsls	r0, r4, #30
60001af8:	d466      	bmi.n	60001bc8 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001afa:	0061      	lsls	r1, r4, #1
60001afc:	f57f af30 	bpl.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	221b      	movs	r2, #27
60001b04:	492d      	ldr	r1, [pc, #180]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x568>)
60001b06:	e062      	b.n	60001bce <CrashReportClass::printTo(Print&) const+0x57a>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2228      	movs	r2, #40	; 0x28
60001b0c:	492c      	ldr	r1, [pc, #176]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x56c>)
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4628      	mov	r0, r5
60001b12:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b14:	4628      	mov	r0, r5
60001b16:	f000 fd7f 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001b1a:	0637      	lsls	r7, r6, #24
60001b1c:	d47d      	bmi.n	60001c1a <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001b1e:	05f4      	lsls	r4, r6, #23
60001b20:	d45c      	bmi.n	60001bdc <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001b22:	05b0      	lsls	r0, r6, #22
60001b24:	f100 80e4 	bmi.w	60001cf0 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001b28:	0571      	lsls	r1, r6, #21
60001b2a:	f100 80dd 	bmi.w	60001ce8 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001b2e:	0532      	lsls	r2, r6, #20
60001b30:	f100 80ee 	bmi.w	60001d10 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001b34:	04f3      	lsls	r3, r6, #19
60001b36:	f100 80e7 	bmi.w	60001d08 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001b3a:	04b7      	lsls	r7, r6, #18
60001b3c:	d557      	bpl.n	60001bee <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001b3e:	682b      	ldr	r3, [r5, #0]
60001b40:	2231      	movs	r2, #49	; 0x31
60001b42:	4920      	ldr	r1, [pc, #128]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x570>)
60001b44:	e04d      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001b46:	bf00      	nop
60001b48:	20007b14 	.word	0x20007b14
60001b4c:	88888889 	.word	0x88888889
60001b50:	20007b24 	.word	0x20007b24
60001b54:	aaaaaaab 	.word	0xaaaaaaab
60001b58:	20007b4c 	.word	0x20007b4c
60001b5c:	20007b50 	.word	0x20007b50
60001b60:	2027ff00 	.word	0x2027ff00
60001b64:	20007fd8 	.word	0x20007fd8
60001b68:	20007ffc 	.word	0x20007ffc
60001b6c:	20008004 	.word	0x20008004
60001b70:	200085d0 	.word	0x200085d0
60001b74:	431bde83 	.word	0x431bde83
60001b78:	20008024 	.word	0x20008024
60001b7c:	200082e8 	.word	0x200082e8
60001b80:	2000830c 	.word	0x2000830c
60001b84:	400f8000 	.word	0x400f8000
60001b88:	20008338 	.word	0x20008338
60001b8c:	2000835c 	.word	0x2000835c
60001b90:	400d4000 	.word	0x400d4000
60001b94:	400ac000 	.word	0x400ac000
60001b98:	200082c4 	.word	0x200082c4
60001b9c:	20008298 	.word	0x20008298
60001ba0:	20008270 	.word	0x20008270
60001ba4:	20008244 	.word	0x20008244
60001ba8:	2000821c 	.word	0x2000821c
60001bac:	2000818c 	.word	0x2000818c
60001bb0:	20007b78 	.word	0x20007b78
60001bb4:	20007c28 	.word	0x20007c28
60001bb8:	20007f88 	.word	0x20007f88
60001bbc:	20007fbc 	.word	0x20007fbc
60001bc0:	20007b84 	.word	0x20007b84
60001bc4:	20007e4c 	.word	0x20007e4c
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	2226      	movs	r2, #38	; 0x26
60001bcc:	495c      	ldr	r1, [pc, #368]	; (60001d40 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001bce:	4628      	mov	r0, r5
60001bd0:	685b      	ldr	r3, [r3, #4]
60001bd2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bd4:	4628      	mov	r0, r5
60001bd6:	f000 fd1f 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001bda:	e6c1      	b.n	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	2220      	movs	r2, #32
60001be0:	4958      	ldr	r1, [pc, #352]	; (60001d44 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001be2:	685b      	ldr	r3, [r3, #4]
60001be4:	4628      	mov	r0, r5
60001be6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be8:	4628      	mov	r0, r5
60001bea:	f000 fd15 	bl	60002618 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001bee:	0434      	lsls	r4, r6, #16
60001bf0:	d43f      	bmi.n	60001c72 <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001bf2:	03f0      	lsls	r0, r6, #15
60001bf4:	d42d      	bmi.n	60001c52 <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001bf6:	03b1      	lsls	r1, r6, #14
60001bf8:	f100 8082 	bmi.w	60001d00 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001bfc:	0372      	lsls	r2, r6, #13
60001bfe:	d44a      	bmi.n	60001c96 <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c00:	0333      	lsls	r3, r6, #12
60001c02:	f100 8091 	bmi.w	60001d28 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c06:	01f7      	lsls	r7, r6, #7
60001c08:	f100 808a 	bmi.w	60001d20 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c0c:	01b4      	lsls	r4, r6, #6
60001c0e:	f57f aea1 	bpl.w	60001954 <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001c12:	682b      	ldr	r3, [r5, #0]
60001c14:	221b      	movs	r2, #27
60001c16:	494c      	ldr	r1, [pc, #304]	; (60001d48 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001c18:	e01e      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c1a:	682b      	ldr	r3, [r5, #0]
60001c1c:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c1e:	4c4b      	ldr	r4, [pc, #300]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c20:	4628      	mov	r0, r5
60001c22:	494b      	ldr	r1, [pc, #300]	; (60001d50 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001c24:	685b      	ldr	r3, [r3, #4]
60001c26:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c28:	2210      	movs	r2, #16
60001c2a:	2300      	movs	r3, #0
60001c2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c30:	4628      	mov	r0, r5
60001c32:	f000 fcf5 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c3a:	2a1f      	cmp	r2, #31
60001c3c:	d92f      	bls.n	60001c9e <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c3e:	4b45      	ldr	r3, [pc, #276]	; (60001d54 <CrashReportClass::printTo(Print&) const+0x700>)
60001c40:	429a      	cmp	r2, r3
60001c42:	d302      	bcc.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001c44:	3320      	adds	r3, #32
60001c46:	429a      	cmp	r2, r3
60001c48:	d372      	bcc.n	60001d30 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001c4a:	4628      	mov	r0, r5
60001c4c:	f000 fce4 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c50:	e765      	b.n	60001b1e <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001c52:	682b      	ldr	r3, [r5, #0]
60001c54:	2223      	movs	r2, #35	; 0x23
60001c56:	4940      	ldr	r1, [pc, #256]	; (60001d58 <CrashReportClass::printTo(Print&) const+0x704>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c5c:	4e3b      	ldr	r6, [pc, #236]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
60001c5e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c60:	4628      	mov	r0, r5
60001c62:	f000 fcd9 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c66:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001c6a:	2c00      	cmp	r4, #0
60001c6c:	f43f ae78 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x30c>
60001c70:	e731      	b.n	60001ad6 <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001c72:	682b      	ldr	r3, [r5, #0]
60001c74:	2221      	movs	r2, #33	; 0x21
60001c76:	4939      	ldr	r1, [pc, #228]	; (60001d5c <CrashReportClass::printTo(Print&) const+0x708>)
60001c78:	4628      	mov	r0, r5
60001c7a:	685b      	ldr	r3, [r3, #4]
60001c7c:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001c7e:	4933      	ldr	r1, [pc, #204]	; (60001d4c <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c80:	2300      	movs	r3, #0
60001c82:	2210      	movs	r2, #16
60001c84:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001c88:	4628      	mov	r0, r5
60001c8a:	f000 fcc9 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c8e:	4628      	mov	r0, r5
60001c90:	f000 fcc2 	bl	60002618 <___ZN5Print7printlnEv_veneer>
60001c94:	e7ad      	b.n	60001bf2 <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001c96:	682b      	ldr	r3, [r5, #0]
60001c98:	2228      	movs	r2, #40	; 0x28
60001c9a:	4931      	ldr	r1, [pc, #196]	; (60001d60 <CrashReportClass::printTo(Print&) const+0x70c>)
60001c9c:	e7dc      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001c9e:	682b      	ldr	r3, [r5, #0]
60001ca0:	221e      	movs	r2, #30
60001ca2:	4930      	ldr	r1, [pc, #192]	; (60001d64 <CrashReportClass::printTo(Print&) const+0x710>)
60001ca4:	4628      	mov	r0, r5
60001ca6:	685b      	ldr	r3, [r3, #4]
60001ca8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001caa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cae:	2300      	movs	r3, #0
60001cb0:	2210      	movs	r2, #16
60001cb2:	4628      	mov	r0, r5
60001cb4:	f000 fcb4 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb8:	682b      	ldr	r3, [r5, #0]
60001cba:	223e      	movs	r2, #62	; 0x3e
60001cbc:	492a      	ldr	r1, [pc, #168]	; (60001d68 <CrashReportClass::printTo(Print&) const+0x714>)
60001cbe:	685b      	ldr	r3, [r3, #4]
60001cc0:	4628      	mov	r0, r5
60001cc2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001cc8:	2300      	movs	r3, #0
60001cca:	2210      	movs	r2, #16
60001ccc:	4628      	mov	r0, r5
60001cce:	f000 fca7 	bl	60002620 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cd2:	682b      	ldr	r3, [r5, #0]
60001cd4:	221d      	movs	r2, #29
60001cd6:	4925      	ldr	r1, [pc, #148]	; (60001d6c <CrashReportClass::printTo(Print&) const+0x718>)
60001cd8:	685b      	ldr	r3, [r3, #4]
60001cda:	4628      	mov	r0, r5
60001cdc:	4798      	blx	r3
60001cde:	e7b4      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001ce0:	682b      	ldr	r3, [r5, #0]
60001ce2:	2229      	movs	r2, #41	; 0x29
60001ce4:	4922      	ldr	r1, [pc, #136]	; (60001d70 <CrashReportClass::printTo(Print&) const+0x71c>)
60001ce6:	e712      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001ce8:	682b      	ldr	r3, [r5, #0]
60001cea:	2244      	movs	r2, #68	; 0x44
60001cec:	4921      	ldr	r1, [pc, #132]	; (60001d74 <CrashReportClass::printTo(Print&) const+0x720>)
60001cee:	e778      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf0:	682b      	ldr	r3, [r5, #0]
60001cf2:	222c      	movs	r2, #44	; 0x2c
60001cf4:	4920      	ldr	r1, [pc, #128]	; (60001d78 <CrashReportClass::printTo(Print&) const+0x724>)
60001cf6:	e774      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001cf8:	682b      	ldr	r3, [r5, #0]
60001cfa:	2221      	movs	r2, #33	; 0x21
60001cfc:	491f      	ldr	r1, [pc, #124]	; (60001d7c <CrashReportClass::printTo(Print&) const+0x728>)
60001cfe:	e706      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d00:	682b      	ldr	r3, [r5, #0]
60001d02:	2232      	movs	r2, #50	; 0x32
60001d04:	491e      	ldr	r1, [pc, #120]	; (60001d80 <CrashReportClass::printTo(Print&) const+0x72c>)
60001d06:	e7a7      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d08:	682b      	ldr	r3, [r5, #0]
60001d0a:	2233      	movs	r2, #51	; 0x33
60001d0c:	491d      	ldr	r1, [pc, #116]	; (60001d84 <CrashReportClass::printTo(Print&) const+0x730>)
60001d0e:	e768      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d10:	682b      	ldr	r3, [r5, #0]
60001d12:	223f      	movs	r2, #63	; 0x3f
60001d14:	491c      	ldr	r1, [pc, #112]	; (60001d88 <CrashReportClass::printTo(Print&) const+0x734>)
60001d16:	e764      	b.n	60001be2 <CrashReportClass::printTo(Print&) const+0x58e>
60001d18:	682b      	ldr	r3, [r5, #0]
60001d1a:	2225      	movs	r2, #37	; 0x25
60001d1c:	491b      	ldr	r1, [pc, #108]	; (60001d8c <CrashReportClass::printTo(Print&) const+0x738>)
60001d1e:	e6f6      	b.n	60001b0e <CrashReportClass::printTo(Print&) const+0x4ba>
60001d20:	682b      	ldr	r3, [r5, #0]
60001d22:	2228      	movs	r2, #40	; 0x28
60001d24:	491a      	ldr	r1, [pc, #104]	; (60001d90 <CrashReportClass::printTo(Print&) const+0x73c>)
60001d26:	e797      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d28:	682b      	ldr	r3, [r5, #0]
60001d2a:	2216      	movs	r2, #22
60001d2c:	4919      	ldr	r1, [pc, #100]	; (60001d94 <CrashReportClass::printTo(Print&) const+0x740>)
60001d2e:	e793      	b.n	60001c58 <CrashReportClass::printTo(Print&) const+0x604>
60001d30:	682b      	ldr	r3, [r5, #0]
60001d32:	2241      	movs	r2, #65	; 0x41
60001d34:	4918      	ldr	r1, [pc, #96]	; (60001d98 <CrashReportClass::printTo(Print&) const+0x744>)
60001d36:	4628      	mov	r0, r5
60001d38:	685b      	ldr	r3, [r3, #4]
60001d3a:	4798      	blx	r3
60001d3c:	e785      	b.n	60001c4a <CrashReportClass::printTo(Print&) const+0x5f6>
60001d3e:	bf00      	nop
60001d40:	20007f94 	.word	0x20007f94
60001d44:	20007d3c 	.word	0x20007d3c
60001d48:	20007f6c 	.word	0x20007f6c
60001d4c:	2027ff00 	.word	0x2027ff00
60001d50:	20007c54 	.word	0x20007c54
60001d54:	200294e0 	.word	0x200294e0
60001d58:	20007ea4 	.word	0x20007ea4
60001d5c:	20007e80 	.word	0x20007e80
60001d60:	20007efc 	.word	0x20007efc
60001d64:	20007c78 	.word	0x20007c78
60001d68:	20007c98 	.word	0x20007c98
60001d6c:	20007cd8 	.word	0x20007cd8
60001d70:	20007bd4 	.word	0x20007bd4
60001d74:	20007d90 	.word	0x20007d90
60001d78:	20007d60 	.word	0x20007d60
60001d7c:	20007bb0 	.word	0x20007bb0
60001d80:	20007ec8 	.word	0x20007ec8
60001d84:	20007e18 	.word	0x20007e18
60001d88:	20007dd8 	.word	0x20007dd8
60001d8c:	20007c00 	.word	0x20007c00
60001d90:	20007f40 	.word	0x20007f40
60001d94:	20007f28 	.word	0x20007f28
60001d98:	20007cf8 	.word	0x20007cf8

60001d9c <CrashReportClass::clear()>:
	info->len = 0;
60001d9c:	4a0f      	ldr	r2, [pc, #60]	; (60001ddc <CrashReportClass::clear()+0x40>)
60001d9e:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001da0:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001da4:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001da8:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001dac:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001db4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001db8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001dbc:	4808      	ldr	r0, [pc, #32]	; (60001de0 <CrashReportClass::clear()+0x44>)
60001dbe:	4909      	ldr	r1, [pc, #36]	; (60001de4 <CrashReportClass::clear()+0x48>)
60001dc0:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001dc4:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001dc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001dcc:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001dd0:	4a05      	ldr	r2, [pc, #20]	; (60001de8 <CrashReportClass::clear()+0x4c>)
60001dd2:	6891      	ldr	r1, [r2, #8]
60001dd4:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dd6:	6313      	str	r3, [r2, #48]	; 0x30
}
60001dd8:	4770      	bx	lr
60001dda:	bf00      	nop
60001ddc:	2027ff00 	.word	0x2027ff00
60001de0:	2027ff80 	.word	0x2027ff80
60001de4:	2027ffa0 	.word	0x2027ffa0
60001de8:	400f8000 	.word	0x400f8000

60001dec <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001dec:	4b12      	ldr	r3, [pc, #72]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001df2:	2b0b      	cmp	r3, #11
60001df4:	d11e      	bne.n	60001e34 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001df6:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dfa:	4810      	ldr	r0, [pc, #64]	; (60001e3c <CrashReportClass::operator bool()+0x50>)
{
60001dfc:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001dfe:	4d10      	ldr	r5, [pc, #64]	; (60001e40 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e00:	4c10      	ldr	r4, [pc, #64]	; (60001e44 <CrashReportClass::operator bool()+0x58>)
60001e02:	e001      	b.n	60001e08 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e04:	686b      	ldr	r3, [r5, #4]
60001e06:	4675      	mov	r5, lr
60001e08:	f105 0e04 	add.w	lr, r5, #4
60001e0c:	405a      	eors	r2, r3
60001e0e:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e10:	f002 0301 	and.w	r3, r2, #1
60001e14:	3901      	subs	r1, #1
60001e16:	fb00 f303 	mul.w	r3, r0, r3
60001e1a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e1e:	d1f7      	bne.n	60001e10 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e20:	45a6      	cmp	lr, r4
60001e22:	d1ef      	bne.n	60001e04 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e24:	4b04      	ldr	r3, [pc, #16]	; (60001e38 <CrashReportClass::operator bool()+0x4c>)
60001e26:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e2a:	1a80      	subs	r0, r0, r2
60001e2c:	fab0 f080 	clz	r0, r0
60001e30:	0940      	lsrs	r0, r0, #5
}
60001e32:	bd30      	pop	{r4, r5, pc}
	return false;
60001e34:	2000      	movs	r0, #0
}
60001e36:	4770      	bx	lr
60001e38:	2027ff00 	.word	0x2027ff00
60001e3c:	edb88320 	.word	0xedb88320
60001e40:	2027ff80 	.word	0x2027ff80
60001e44:	2027ffa8 	.word	0x2027ffa8

60001e48 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e48:	4770      	bx	lr
60001e4a:	bf00      	nop

60001e4c <startup_default_middle_hook>:
60001e4c:	4770      	bx	lr
60001e4e:	bf00      	nop

60001e50 <startup_default_late_hook>:
60001e50:	4770      	bx	lr
60001e52:	bf00      	nop

60001e54 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e54:	bf00      	nop
60001e56:	4770      	bx	lr

60001e58 <configure_cache>:
{
60001e58:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5e:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e60:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e62:	482b      	ldr	r0, [pc, #172]	; (60001f10 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e64:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e68:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e6c:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e6e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e72:	4828      	ldr	r0, [pc, #160]	; (60001f14 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e74:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e78:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001e7a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e7e:	4826      	ldr	r0, [pc, #152]	; (60001f18 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001e80:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e84:	4a25      	ldr	r2, [pc, #148]	; (60001f1c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001e86:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e8a:	4c25      	ldr	r4, [pc, #148]	; (60001f20 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001e8c:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e90:	4824      	ldr	r0, [pc, #144]	; (60001f24 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001e92:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9a:	4c23      	ldr	r4, [pc, #140]	; (60001f28 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001e9c:	4823      	ldr	r0, [pc, #140]	; (60001f2c <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001e9e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ea6:	4c22      	ldr	r4, [pc, #136]	; (60001f30 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ea8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eac:	4821      	ldr	r0, [pc, #132]	; (60001f34 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eae:	4a22      	ldr	r2, [pc, #136]	; (60001f38 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001eb0:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001eb4:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001eb8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ebc:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec0:	4c1e      	ldr	r4, [pc, #120]	; (60001f3c <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ec2:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ec4:	481e      	ldr	r0, [pc, #120]	; (60001f40 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eca:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ece:	4a1d      	ldr	r2, [pc, #116]	; (60001f44 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ed0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ed4:	4c1c      	ldr	r4, [pc, #112]	; (60001f48 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ed6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001eda:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001edc:	481b      	ldr	r0, [pc, #108]	; (60001f4c <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001ede:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001ee2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001ee6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001eea:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001eee:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001ef2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001ef6:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001efa:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001efe:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f06:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f0e:	4770      	bx	lr
60001f10:	1000003f 	.word	0x1000003f
60001f14:	03080025 	.word	0x03080025
60001f18:	00100009 	.word	0x00100009
60001f1c:	200294e0 	.word	0x200294e0
60001f20:	00200013 	.word	0x00200013
60001f24:	07020021 	.word	0x07020021
60001f28:	20000014 	.word	0x20000014
60001f2c:	13080025 	.word	0x13080025
60001f30:	10000009 	.word	0x10000009
60001f34:	20200016 	.word	0x20200016
60001f38:	130b0027 	.word	0x130b0027
60001f3c:	40000017 	.word	0x40000017
60001f40:	60000018 	.word	0x60000018
60001f44:	070b002f 	.word	0x070b002f
60001f48:	70000019 	.word	0x70000019
60001f4c:	130b002f 	.word	0x130b002f

60001f50 <configure_external_ram>:
{
60001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f52:	4bb8      	ldr	r3, [pc, #736]	; (60002234 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f54:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f56:	4eb8      	ldr	r6, [pc, #736]	; (60002238 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f58:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f5a:	4fb8      	ldr	r7, [pc, #736]	; (6000223c <configure_external_ram+0x2ec>)
{
60001f5c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f5e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f62:	49b7      	ldr	r1, [pc, #732]	; (60002240 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f64:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f68:	4db6      	ldr	r5, [pc, #728]	; (60002244 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f6a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f6e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001f72:	4cb5      	ldr	r4, [pc, #724]	; (60002248 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001f74:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f78:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f80:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001f84:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001f88:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001f8e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001f90:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001f92:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001f94:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fa6:	4aa9      	ldr	r2, [pc, #676]	; (6000224c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fa8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fac:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001fb0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001fb4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001fb8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fbc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fbe:	4ba4      	ldr	r3, [pc, #656]	; (60002250 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fc0:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fc2:	48a4      	ldr	r0, [pc, #656]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fc4:	49a4      	ldr	r1, [pc, #656]	; (60002258 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001fc6:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	4aa4      	ldr	r2, [pc, #656]	; (6000225c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fca:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001fd0:	f043 030c 	orr.w	r3, r3, #12
60001fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001fd8:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001fdc:	6803      	ldr	r3, [r0, #0]
60001fde:	f043 0302 	orr.w	r3, r3, #2
60001fe2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001fe4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fe6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001fe8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fec:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001fee:	4b9c      	ldr	r3, [pc, #624]	; (60002260 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ff0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001ff2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ff6:	4c9b      	ldr	r4, [pc, #620]	; (60002264 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001ff8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ffa:	4a9b      	ldr	r2, [pc, #620]	; (60002268 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002000:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002002:	68c3      	ldr	r3, [r0, #12]
60002004:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002008:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000200a:	6a03      	ldr	r3, [r0, #32]
6000200c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000200e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002010:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002012:	6a03      	ldr	r3, [r0, #32]
60002014:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002016:	4a95      	ldr	r2, [pc, #596]	; (6000226c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002018:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000201a:	4c95      	ldr	r4, [pc, #596]	; (60002270 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000201c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000201e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002020:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002022:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002024:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000202c:	f043 0301 	orr.w	r3, r3, #1
60002030:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002034:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002038:	498e      	ldr	r1, [pc, #568]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000203e:	f043 0301 	orr.w	r3, r3, #1
60002042:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002046:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000204a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000204c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000204e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002050:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002054:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002056:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002058:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000205a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000205e:	6803      	ldr	r3, [r0, #0]
60002060:	f023 0302 	bic.w	r3, r3, #2
60002064:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002066:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002068:	4b83      	ldr	r3, [pc, #524]	; (60002278 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206a:	4984      	ldr	r1, [pc, #528]	; (6000227c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000206c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000206e:	f843 2b04 	str.w	r2, [r3], #4
60002072:	428b      	cmp	r3, r1
60002074:	d1fb      	bne.n	6000206e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002076:	4a77      	ldr	r2, [pc, #476]	; (60002254 <configure_external_ram+0x304>)
60002078:	6813      	ldr	r3, [r2, #0]
6000207a:	f043 0301 	orr.w	r3, r3, #1
6000207e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002080:	6813      	ldr	r3, [r2, #0]
60002082:	f013 0301 	ands.w	r3, r3, #1
60002086:	d1fb      	bne.n	60002080 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002088:	487a      	ldr	r0, [pc, #488]	; (60002274 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000208a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000208c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002090:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002092:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002096:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002098:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
6000209c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020a0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020a4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020a8:	4975      	ldr	r1, [pc, #468]	; (60002280 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020aa:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ae:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020b2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020b6:	4873      	ldr	r0, [pc, #460]	; (60002284 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020b8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020bc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020c0:	4c71      	ldr	r4, [pc, #452]	; (60002288 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020c2:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020c6:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600020ca:	4970      	ldr	r1, [pc, #448]	; (6000228c <configure_external_ram+0x33c>)
600020cc:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020d0:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600020d2:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600020d6:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020da:	485e      	ldr	r0, [pc, #376]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600020dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020e0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600020e4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020e8:	6943      	ldr	r3, [r0, #20]
600020ea:	07da      	lsls	r2, r3, #31
600020ec:	d5fc      	bpl.n	600020e8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020ee:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600020f0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600020f6:	4957      	ldr	r1, [pc, #348]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600020f8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600020fa:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600020fe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002102:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002106:	694b      	ldr	r3, [r1, #20]
60002108:	07db      	lsls	r3, r3, #31
6000210a:	d5fc      	bpl.n	60002106 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000210c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000210e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002110:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002114:	4a4f      	ldr	r2, [pc, #316]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002116:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002118:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000211c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002120:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002124:	6953      	ldr	r3, [r2, #20]
60002126:	07df      	lsls	r7, r3, #31
60002128:	d5fc      	bpl.n	60002124 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000212c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000212e:	4858      	ldr	r0, [pc, #352]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002130:	4948      	ldr	r1, [pc, #288]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002132:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002134:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002138:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000213c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002140:	694b      	ldr	r3, [r1, #20]
60002142:	07de      	lsls	r6, r3, #31
60002144:	d5fc      	bpl.n	60002140 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002146:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000214a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000214e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002150:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002152:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002154:	4293      	cmp	r3, r2
60002156:	d165      	bne.n	60002224 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002158:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000215e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002160:	483c      	ldr	r0, [pc, #240]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002162:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002166:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000216a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000216e:	6943      	ldr	r3, [r0, #20]
60002170:	07dd      	lsls	r5, r3, #31
60002172:	d5fc      	bpl.n	6000216e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002174:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002176:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000217a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000217c:	4a35      	ldr	r2, [pc, #212]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000217e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002180:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002184:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002188:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000218c:	6953      	ldr	r3, [r2, #20]
6000218e:	07dc      	lsls	r4, r3, #31
60002190:	d5fc      	bpl.n	6000218c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002192:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002194:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000219c:	492d      	ldr	r1, [pc, #180]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000219e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021a0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021a8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ac:	694b      	ldr	r3, [r1, #20]
600021ae:	07d8      	lsls	r0, r3, #31
600021b0:	d5fc      	bpl.n	600021ac <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a25      	ldr	r2, [pc, #148]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07d9      	lsls	r1, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021d8:	482d      	ldr	r0, [pc, #180]	; (60002290 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021da:	491e      	ldr	r1, [pc, #120]	; (60002254 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021dc:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021de:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021e2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ea:	694b      	ldr	r3, [r1, #20]
600021ec:	07da      	lsls	r2, r3, #31
600021ee:	d5fc      	bpl.n	600021ea <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600021f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021f4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021f8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600021fa:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600021fc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600021fe:	4293      	cmp	r3, r2
60002200:	d050      	beq.n	600022a4 <configure_external_ram+0x354>
60002202:	2508      	movs	r5, #8
60002204:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002208:	4922      	ldr	r1, [pc, #136]	; (60002294 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000220a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000220c:	4b22      	ldr	r3, [pc, #136]	; (60002298 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000220e:	4a23      	ldr	r2, [pc, #140]	; (6000229c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002210:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002212:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002214:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002216:	2301      	movs	r3, #1
60002218:	4821      	ldr	r0, [pc, #132]	; (600022a0 <configure_external_ram+0x350>)
6000221a:	4422      	add	r2, r4
6000221c:	f000 fa14 	bl	60002648 <__sm_set_pool_veneer>
}
60002220:	b003      	add	sp, #12
60002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002224:	4b1e      	ldr	r3, [pc, #120]	; (600022a0 <configure_external_ram+0x350>)
60002226:	2200      	movs	r2, #0
60002228:	e9c3 2200 	strd	r2, r2, [r3]
6000222c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002230:	b003      	add	sp, #12
60002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002234:	401f8000 	.word	0x401f8000
60002238:	0001b0f9 	.word	0x0001b0f9
6000223c:	000110f9 	.word	0x000110f9
60002240:	401f8400 	.word	0x401f8400
60002244:	000170f9 	.word	0x000170f9
60002248:	400fc000 	.word	0x400fc000
6000224c:	1ffffcff 	.word	0x1ffffcff
60002250:	a0000300 	.word	0xa0000300
60002254:	402a4000 	.word	0x402a4000
60002258:	402a8000 	.word	0x402a8000
6000225c:	ffff0012 	.word	0xffff0012
60002260:	00f737ff 	.word	0x00f737ff
60002264:	80000040 	.word	0x80000040
60002268:	7cf0ff00 	.word	0x7cf0ff00
6000226c:	830f00ff 	.word	0x830f00ff
60002270:	00020063 	.word	0x00020063
60002274:	5af05af0 	.word	0x5af05af0
60002278:	402a4200 	.word	0x402a4200
6000227c:	402a4300 	.word	0x402a4300
60002280:	3018049f 	.word	0x3018049f
60002284:	0a1806eb 	.word	0x0a1806eb
60002288:	0a180638 	.word	0x0a180638
6000228c:	26013206 	.word	0x26013206
60002290:	00030004 	.word	0x00030004
60002294:	70000000 	.word	0x70000000
60002298:	70000000 	.word	0x70000000
6000229c:	200294a3 	.word	0x200294a3
600022a0:	20028e40 	.word	0x20028e40
	FLEXSPI2_IPCR0 = addr;
600022a4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ac:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ae:	4808      	ldr	r0, [pc, #32]	; (600022d0 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022b0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022b4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022b8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022bc:	6943      	ldr	r3, [r0, #20]
600022be:	07db      	lsls	r3, r3, #31
600022c0:	d5fc      	bpl.n	600022bc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c2:	2301      	movs	r3, #1
600022c4:	2510      	movs	r5, #16
600022c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
600022ca:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
600022cc:	e79c      	b.n	60002208 <configure_external_ram+0x2b8>
600022ce:	bf00      	nop
600022d0:	402a4000 	.word	0x402a4000

600022d4 <usb_pll_start>:
{
600022d4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022d6:	4a15      	ldr	r2, [pc, #84]	; (6000232c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600022d8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600022da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600022de:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600022e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600022e6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600022ea:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600022ee:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600022f0:	f013 0f02 	tst.w	r3, #2
600022f4:	d10e      	bne.n	60002314 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600022f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600022fa:	d00f      	beq.n	6000231c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600022fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002300:	d00e      	beq.n	60002320 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002302:	2b00      	cmp	r3, #0
60002304:	daf3      	bge.n	600022ee <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000230a:	d10b      	bne.n	60002324 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000230c:	065b      	lsls	r3, r3, #25
6000230e:	d50b      	bpl.n	60002328 <usb_pll_start+0x54>
}
60002310:	bcf0      	pop	{r4, r5, r6, r7}
60002312:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002314:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002316:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002318:	6190      	str	r0, [r2, #24]
			continue;
6000231a:	e7e8      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000231c:	6155      	str	r5, [r2, #20]
			continue;
6000231e:	e7e6      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002320:	6156      	str	r6, [r2, #20]
			continue;
60002322:	e7e4      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002324:	6191      	str	r1, [r2, #24]
			continue;
60002326:	e7e2      	b.n	600022ee <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002328:	6157      	str	r7, [r2, #20]
			continue;
6000232a:	e7e0      	b.n	600022ee <usb_pll_start+0x1a>
6000232c:	400d8000 	.word	0x400d8000

60002330 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002330:	4a3f      	ldr	r2, [pc, #252]	; (60002430 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002332:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002334:	493f      	ldr	r1, [pc, #252]	; (60002434 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002336:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000233a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000233e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002342:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002438 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002346:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000234a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000243c <tempmon_init+0x10c>
{
6000234e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002354:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002358:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000235c:	4d38      	ldr	r5, [pc, #224]	; (60002440 <tempmon_init+0x110>)
6000235e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002360:	4c38      	ldr	r4, [pc, #224]	; (60002444 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002362:	4839      	ldr	r0, [pc, #228]	; (60002448 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002364:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002366:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000236a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000236c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002374:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002378:	ee07 1a10 	vmov	s14, r1
6000237c:	4b33      	ldr	r3, [pc, #204]	; (6000244c <tempmon_init+0x11c>)
6000237e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002382:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002384:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002388:	4931      	ldr	r1, [pc, #196]	; (60002450 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002392:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002396:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000239a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000239e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023a2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023aa:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ae:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023b6:	4827      	ldr	r0, [pc, #156]	; (60002454 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023b8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023bc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c0:	ee75 5a87 	vadd.f32	s11, s11, s14
600023c4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023cc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023d8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023e0:	ee16 3a10 	vmov	r3, s12
600023e4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023ec:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600023f0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023f6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
600023fe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002402:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002404:	4914      	ldr	r1, [pc, #80]	; (60002458 <tempmon_init+0x128>)
60002406:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000240a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000240e:	f043 0302 	orr.w	r3, r3, #2
60002412:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002416:	4b11      	ldr	r3, [pc, #68]	; (6000245c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002418:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000241c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002424:	2201      	movs	r2, #1
}
60002426:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000242c:	4770      	bx	lr
6000242e:	bf00      	nop
60002430:	400d8100 	.word	0x400d8100
60002434:	401f4400 	.word	0x401f4400
60002438:	42aa0000 	.word	0x42aa0000
6000243c:	42b40000 	.word	0x42b40000
60002440:	20028f90 	.word	0x20028f90
60002444:	20028f8c 	.word	0x20028f8c
60002448:	20028f94 	.word	0x20028f94
6000244c:	20028f98 	.word	0x20028f98
60002450:	0fff0000 	.word	0x0fff0000
60002454:	e000e400 	.word	0xe000e400
60002458:	20008c00 	.word	0x20008c00
6000245c:	000084b9 	.word	0x000084b9

60002460 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002460:	4b31      	ldr	r3, [pc, #196]	; (60002528 <usb_init+0xc8>)
60002462:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002466:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002468:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000246c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002470:	f000 f8e2 	bl	60002638 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002474:	4a2d      	ldr	r2, [pc, #180]	; (6000252c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002476:	492e      	ldr	r1, [pc, #184]	; (60002530 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002478:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000247c:	482d      	ldr	r0, [pc, #180]	; (60002534 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000247e:	f043 0303 	orr.w	r3, r3, #3
60002482:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002486:	4b2c      	ldr	r3, [pc, #176]	; (60002538 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002488:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000248c:	6802      	ldr	r2, [r0, #0]
6000248e:	421a      	tst	r2, r3
60002490:	d103      	bne.n	6000249a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60002492:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002496:	079a      	lsls	r2, r3, #30
60002498:	d01b      	beq.n	600024d2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000249a:	4a25      	ldr	r2, [pc, #148]	; (60002530 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000249c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024a0:	4b24      	ldr	r3, [pc, #144]	; (60002534 <usb_init+0xd4>)
600024a2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024a8:	f043 0302 	orr.w	r3, r3, #2
600024ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024b0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024b4:	079b      	lsls	r3, r3, #30
600024b6:	d4fb      	bmi.n	600024b0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024bc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024c0:	4b1c      	ldr	r3, [pc, #112]	; (60002534 <usb_init+0xd4>)
600024c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024c6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600024ca:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600024cc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600024ce:	f000 f8c3 	bl	60002658 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024d2:	4a18      	ldr	r2, [pc, #96]	; (60002534 <usb_init+0xd4>)
600024d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024d8:	4c15      	ldr	r4, [pc, #84]	; (60002530 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600024da:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600024dc:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024de:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e0:	4b16      	ldr	r3, [pc, #88]	; (6000253c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600024e2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024e4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600024e8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024ec:	4618      	mov	r0, r3
600024ee:	f000 f887 	bl	60002600 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600024f6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600024f8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600024fc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002500:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002502:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002506:	641a      	str	r2, [r3, #64]	; 0x40
60002508:	4b0d      	ldr	r3, [pc, #52]	; (60002540 <usb_init+0xe0>)
6000250a:	4a0e      	ldr	r2, [pc, #56]	; (60002544 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000250c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002514:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000251c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000251e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002522:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002526:	bd10      	pop	{r4, pc}
60002528:	400d8000 	.word	0x400d8000
6000252c:	400fc000 	.word	0x400fc000
60002530:	402e0000 	.word	0x402e0000
60002534:	400d9000 	.word	0x400d9000
60002538:	001e1c00 	.word	0x001e1c00
6000253c:	20000000 	.word	0x20000000
60002540:	20008c00 	.word	0x20008c00
60002544:	000086a1 	.word	0x000086a1

60002548 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002548:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000254a:	4b0e      	ldr	r3, [pc, #56]	; (60002584 <_reboot_Teensyduino_+0x3c>)
6000254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000254e:	079b      	lsls	r3, r3, #30
60002550:	d400      	bmi.n	60002554 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002552:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002554:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002556:	4b0c      	ldr	r3, [pc, #48]	; (60002588 <_reboot_Teensyduino_+0x40>)
60002558:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000255a:	4a0c      	ldr	r2, [pc, #48]	; (6000258c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000255c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002560:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002564:	490a      	ldr	r1, [pc, #40]	; (60002590 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002566:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000256a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000256c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000256e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002576:	4807      	ldr	r0, [pc, #28]	; (60002594 <_reboot_Teensyduino_+0x4c>)
60002578:	4a07      	ldr	r2, [pc, #28]	; (60002598 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
6000257c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000257e:	689b      	ldr	r3, [r3, #8]
60002580:	4798      	blx	r3
	}
	__builtin_unreachable();
60002582:	bf00      	nop
60002584:	401f4400 	.word	0x401f4400
60002588:	402e0000 	.word	0x402e0000
6000258c:	400ac000 	.word	0x400ac000
60002590:	00200003 	.word	0x00200003
60002594:	20208000 	.word	0x20208000
60002598:	eb120000 	.word	0xeb120000

6000259c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000259c:	4b10      	ldr	r3, [pc, #64]	; (600025e0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000259e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025a0:	4a10      	ldr	r2, [pc, #64]	; (600025e4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025a8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025aa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ac:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025b2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025b6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025b8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025ba:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025be:	061b      	lsls	r3, r3, #24
600025c0:	d4fc      	bmi.n	600025bc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025c2:	4a09      	ldr	r2, [pc, #36]	; (600025e8 <analog_init+0x4c>)
600025c4:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025c8:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600025ca:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600025cc:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600025ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600025d4:	d1fb      	bne.n	600025ce <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600025d6:	4a05      	ldr	r2, [pc, #20]	; (600025ec <analog_init+0x50>)
600025d8:	7013      	strb	r3, [r2, #0]
}
600025da:	f85d 4b04 	ldr.w	r4, [sp], #4
600025de:	4770      	bx	lr
600025e0:	400fc000 	.word	0x400fc000
600025e4:	400c4000 	.word	0x400c4000
600025e8:	400c8000 	.word	0x400c8000
600025ec:	200294a2 	.word	0x200294a2

600025f0 <_init>:
600025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600025f2:	bf00      	nop
600025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
600025f6:	bc08      	pop	{r3}
600025f8:	469e      	mov	lr, r3
600025fa:	4770      	bx	lr
600025fc:	0000      	movs	r0, r0
	...

60002600 <__memset_veneer>:
60002600:	f85f f000 	ldr.w	pc, [pc]	; 60002604 <__memset_veneer+0x4>
60002604:	0000ba6d 	.word	0x0000ba6d

60002608 <____libc_init_array_veneer>:
60002608:	f85f f000 	ldr.w	pc, [pc]	; 6000260c <____libc_init_array_veneer+0x4>
6000260c:	0000bce5 	.word	0x0000bce5

60002610 <__set_arm_clock_veneer>:
60002610:	f85f f000 	ldr.w	pc, [pc]	; 60002614 <__set_arm_clock_veneer+0x4>
60002614:	00007c15 	.word	0x00007c15

60002618 <___ZN5Print7printlnEv_veneer>:
60002618:	f85f f000 	ldr.w	pc, [pc]	; 6000261c <___ZN5Print7printlnEv_veneer+0x4>
6000261c:	000079a5 	.word	0x000079a5

60002620 <___ZN5Print11printNumberEmhh_veneer>:
60002620:	f85f f000 	ldr.w	pc, [pc]	; 60002624 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002624:	000079f9 	.word	0x000079f9

60002628 <__pwm_init_veneer>:
60002628:	f85f f000 	ldr.w	pc, [pc]	; 6000262c <__pwm_init_veneer+0x4>
6000262c:	0000972d 	.word	0x0000972d

60002630 <___ZN5Print5printEl_veneer>:
60002630:	f85f f000 	ldr.w	pc, [pc]	; 60002634 <___ZN5Print5printEl_veneer+0x4>
60002634:	0000798d 	.word	0x0000798d

60002638 <__usb_init_serialnumber_veneer>:
60002638:	f85f f000 	ldr.w	pc, [pc]	; 6000263c <__usb_init_serialnumber_veneer+0x4>
6000263c:	00008e11 	.word	0x00008e11

60002640 <___ZN5Print10printFloatEdh_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <___ZN5Print10printFloatEdh_veneer+0x4>
60002644:	00007a21 	.word	0x00007a21

60002648 <__sm_set_pool_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <__sm_set_pool_veneer+0x4>
6000264c:	00009871 	.word	0x00009871

60002650 <__main_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <__main_veneer+0x4>
60002654:	000080c5 	.word	0x000080c5

60002658 <__delay_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <__delay_veneer+0x4>
6000265c:	00007f05 	.word	0x00007f05

60002660 <__frame_dummy_init_array_entry>:
60002660:	00000045 00000815 000015ad 000074b9     E............t..
60002670:	000076ed                                .v..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	20008ec0 	.word	0x20008ec0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	20008ec0 	.word	0x20008ec0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags) {
    return m_fFile   ? m_fFile->ls(pr, flags)
           : m_xFile ? m_xFile->ls(pr, flags)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20028ed0 	.word	0x20028ed0
      64:	60020c00 	.word	0x60020c00

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
      6c:	4c83      	ldr	r4, [pc, #524]	; (27c <loop+0x214>)
      6e:	b08b      	sub	sp, #44	; 0x2c
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      70:	4d83      	ldr	r5, [pc, #524]	; (280 <loop+0x218>)
      72:	6823      	ldr	r3, [r4, #0]
      74:	3301      	adds	r3, #1
      76:	6023      	str	r3, [r4, #0]
      78:	f001 fae4 	bl	1644 <getDataCount()>
      7c:	882b      	ldrh	r3, [r5, #0]
  }
}
      7e:	4283      	cmp	r3, r0
    *m_xFile = *from.m_xFile;
      80:	4b80      	ldr	r3, [pc, #512]	; (284 <loop+0x21c>)
}
      82:	681a      	ldr	r2, [r3, #0]
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	bf38      	it	cc
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	07d2      	lsls	r2, r2, #31
}
      8a:	d513      	bpl.n	b4 <loop+0x4c>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	4f7e      	ldr	r7, [pc, #504]	; (288 <loop+0x220>)
      8e:	f009 f9af 	bl	93f0 <usb_serial_available>
      92:	b9f0      	cbnz	r0, d2 <loop+0x6a>
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	8838      	ldrh	r0, [r7, #0]
		buf[sizeof(buf) - 1] = '0';
      96:	4e7d      	ldr	r6, [pc, #500]	; (28c <loop+0x224>)
      98:	b200      	sxth	r0, r0
		i = sizeof(buf) - 1;
      9a:	f001 f9b9 	bl	1410 <saveData(short)>
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	4b7c      	ldr	r3, [pc, #496]	; (290 <loop+0x228>)
      a0:	8038      	strh	r0, [r7, #0]
      a2:	681f      	ldr	r7, [r3, #0]
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
      a4:	6833      	ldr	r3, [r6, #0]
      a6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
      aa:	42bb      	cmp	r3, r7
      ac:	d31b      	bcc.n	e6 <loop+0x7e>
      ae:	b00b      	add	sp, #44	; 0x2c
      b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b4:	4a77      	ldr	r2, [pc, #476]	; (294 <loop+0x22c>)
      b6:	4f74      	ldr	r7, [pc, #464]	; (288 <loop+0x220>)
      b8:	6812      	ldr	r2, [r2, #0]
      ba:	2a01      	cmp	r2, #1
  return str - name;

fail:
  *name = 0;
  return 0;
}
      bc:	f04f 32ff 	mov.w	r2, #4294967295
      c0:	bf18      	it	ne
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	2200      	movne	r2, #0
      c4:	803a      	strh	r2, [r7, #0]
      c6:	2201      	movs	r2, #1
      c8:	601a      	str	r2, [r3, #0]
      ca:	f009 f991 	bl	93f0 <usb_serial_available>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      ce:	2800      	cmp	r0, #0
}
      d0:	d0e0      	beq.n	94 <loop+0x2c>
	while (newdiv > 65535 && prescale < 7) {
      d2:	f009 f9d1 	bl	9478 <usb_serial_getchar>
      d6:	b2c0      	uxtb	r0, r0
      d8:	2873      	cmp	r0, #115	; 0x73
      da:	d026      	beq.n	12a <loop+0xc2>
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	2865      	cmp	r0, #101	; 0x65
      de:	d11c      	bne.n	11a <loop+0xb2>
      e0:	2304      	movs	r3, #4
    return 0; // zero returned if timeout
      e2:	803b      	strh	r3, [r7, #0]
      e4:	e7d6      	b.n	94 <loop+0x2c>
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	a808      	add	r0, sp, #32
      e8:	f001 fc70 	bl	19cc <rtc_get_datetime(datetime_t*)>
      ec:	4b6a      	ldr	r3, [pc, #424]	; (298 <loop+0x230>)
      ee:	f9b3 3000 	ldrsh.w	r3, [r3]
      f2:	b9eb      	cbnz	r3, 130 <loop+0xc8>
      f4:	4b69      	ldr	r3, [pc, #420]	; (29c <loop+0x234>)
      f6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2dc <loop+0x274>
      fa:	9306      	str	r3, [sp, #24]
      fc:	4b68      	ldr	r3, [pc, #416]	; (2a0 <loop+0x238>)
      fe:	9307      	str	r3, [sp, #28]
     100:	2300      	movs	r3, #0
     102:	9a06      	ldr	r2, [sp, #24]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	6037      	str	r7, [r6, #0]
     106:	6013      	str	r3, [r2, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
     108:	9a07      	ldr	r2, [sp, #28]
     10a:	6023      	str	r3, [r4, #0]
     10c:	f8cb 3000 	str.w	r3, [fp]
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	802b      	strh	r3, [r5, #0]
     112:	6013      	str	r3, [r2, #0]
     114:	b00b      	add	sp, #44	; 0x2c
     116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     11a:	286d      	cmp	r0, #109	; 0x6d
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	d17d      	bne.n	21a <loop+0x1b2>
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	4a5e      	ldr	r2, [pc, #376]	; (298 <loop+0x230>)
     120:	8813      	ldrh	r3, [r2, #0]
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f1c3 0301 	rsb	r3, r3, #1
     126:	8013      	strh	r3, [r2, #0]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	e7b4      	b.n	94 <loop+0x2c>
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	2300      	movs	r3, #0
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	803b      	strh	r3, [r7, #0]
     12e:	e7b1      	b.n	94 <loop+0x2c>
     130:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
	if (!wait_idle()) return 4;
     134:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
	return rxBufferLength;
}
     138:	9304      	str	r3, [sp, #16]
     13a:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     13e:	4959      	ldr	r1, [pc, #356]	; (2a4 <loop+0x23c>)
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	9303      	str	r3, [sp, #12]
     142:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     146:	4858      	ldr	r0, [pc, #352]	; (2a8 <loop+0x240>)
     148:	9302      	str	r3, [sp, #8]
     14a:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     14e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 2dc <loop+0x274>
     152:	9301      	str	r3, [sp, #4]
     154:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     158:	9300      	str	r3, [sp, #0]
     15a:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f007 fc3d 	bl	79dc <Print::printf(char const*, ...)>
     162:	2103      	movs	r1, #3
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	4851      	ldr	r0, [pc, #324]	; (2ac <loop+0x244>)
     166:	f009 f9ad 	bl	94c4 <usb_serial_write>
     16a:	2300      	movs	r3, #0
     16c:	220a      	movs	r2, #10
     16e:	6821      	ldr	r1, [r4, #0]
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	484d      	ldr	r0, [pc, #308]	; (2a8 <loop+0x240>)
     172:	f007 fc41 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     176:	2101      	movs	r1, #1
     178:	484d      	ldr	r0, [pc, #308]	; (2b0 <loop+0x248>)
     17a:	f009 f9a3 	bl	94c4 <usb_serial_write>
	n = __builtin_bswap32(n);
     17e:	4b47      	ldr	r3, [pc, #284]	; (29c <loop+0x234>)
     180:	220a      	movs	r2, #10
     182:	f8db 1000 	ldr.w	r1, [fp]
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     186:	9306      	str	r3, [sp, #24]
     188:	2300      	movs	r3, #0
     18a:	4847      	ldr	r0, [pc, #284]	; (2a8 <loop+0x240>)
     18c:	f007 fc34 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     190:	2101      	movs	r1, #1
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     192:	4847      	ldr	r0, [pc, #284]	; (2b0 <loop+0x248>)
     194:	f009 f996 	bl	94c4 <usb_serial_write>
     198:	9906      	ldr	r1, [sp, #24]
     19a:	2300      	movs	r3, #0
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     19c:	220a      	movs	r2, #10
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
     19e:	6809      	ldr	r1, [r1, #0]
     1a0:	4841      	ldr	r0, [pc, #260]	; (2a8 <loop+0x240>)
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a2:	f007 fc29 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	n = __builtin_bswap32(n);
     1a6:	2101      	movs	r1, #1
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
     1a8:	4841      	ldr	r0, [pc, #260]	; (2b0 <loop+0x248>)
     1aa:	f009 f98b 	bl	94c4 <usb_serial_write>
	if (priority(ch3) < priority(ch4)) swap(ch3, ch4);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
     1ae:	4b3c      	ldr	r3, [pc, #240]	; (2a0 <loop+0x238>)
     1b0:	882a      	ldrh	r2, [r5, #0]
	c = c1.channel;
     1b2:	4940      	ldr	r1, [pc, #256]	; (2b4 <loop+0x24c>)
	c1.channel = c2.channel;
     1b4:	483c      	ldr	r0, [pc, #240]	; (2a8 <loop+0x240>)
	c2.channel = c;
     1b6:	9307      	str	r3, [sp, #28]
	c1.TCD = c2.TCD;
     1b8:	f007 fc10 	bl	79dc <Print::printf(char const*, ...)>
     1bc:	2102      	movs	r1, #2
	c2.TCD = t;
     1be:	483e      	ldr	r0, [pc, #248]	; (2b8 <loop+0x250>)
}
     1c0:	f009 f980 	bl	94c4 <usb_serial_write>
     1c4:	9907      	ldr	r1, [sp, #28]
     1c6:	2300      	movs	r3, #0
     1c8:	220a      	movs	r2, #10
     1ca:	6809      	ldr	r1, [r1, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4836      	ldr	r0, [pc, #216]	; (2a8 <loop+0x240>)
     1ce:	f007 fc13 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  bool syncDevice() { return m_blockDev->syncDevice(); }
     1d2:	2104      	movs	r1, #4
     1d4:	4839      	ldr	r0, [pc, #228]	; (2bc <loop+0x254>)
     1d6:	f009 f975 	bl	94c4 <usb_serial_write>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1da:	4b39      	ldr	r3, [pc, #228]	; (2c0 <loop+0x258>)
     1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
     1e0:	bb5b      	cbnz	r3, 23a <loop+0x1d2>
     1e2:	4699      	mov	r9, r3
     1e4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2e0 <loop+0x278>
     1e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2a8 <loop+0x240>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ec:	4b35      	ldr	r3, [pc, #212]	; (2c4 <loop+0x25c>)
     1ee:	4651      	mov	r1, sl
     1f0:	4640      	mov	r0, r8
     1f2:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     1f6:	f109 0901 	add.w	r9, r9, #1

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fa:	f007 fbef 	bl	79dc <Print::printf(char const*, ...)>
			if (d > 2) {
     1fe:	f1b9 0f08 	cmp.w	r9, #8
				div = d-2;
     202:	d1f3      	bne.n	1ec <loop+0x184>
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	4b30      	ldr	r3, [pc, #192]	; (2c8 <loop+0x260>)
     206:	4931      	ldr	r1, [pc, #196]	; (2cc <loop+0x264>)
     208:	681a      	ldr	r2, [r3, #0]
     20a:	4827      	ldr	r0, [pc, #156]	; (2a8 <loop+0x240>)
     20c:	f007 fbe6 	bl	79dc <Print::printf(char const*, ...)>
     210:	2102      	movs	r1, #2
     212:	4829      	ldr	r0, [pc, #164]	; (2b8 <loop+0x250>)
     214:	f009 f956 	bl	94c4 <usb_serial_write>
     218:	e772      	b.n	100 <loop+0x98>
     21a:	283a      	cmp	r0, #58	; 0x3a
     21c:	d102      	bne.n	224 <loop+0x1bc>
     21e:	f001 fc97 	bl	1b50 <menu1()>
     222:	e737      	b.n	94 <loop+0x2c>
     224:	283f      	cmp	r0, #63	; 0x3f
     226:	d102      	bne.n	22e <loop+0x1c6>
     228:	f001 fc9c 	bl	1b64 <menu2()>
     22c:	e732      	b.n	94 <loop+0x2c>
     22e:	2821      	cmp	r0, #33	; 0x21
     230:	f47f af30 	bne.w	94 <loop+0x2c>
void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	f001 fd62 	bl	1cfc <menu3()>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     238:	e72c      	b.n	94 <loop+0x2c>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2e4 <loop+0x27c>
     23e:	4924      	ldr	r1, [pc, #144]	; (2d0 <loop+0x268>)
};
     240:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2a8 <loop+0x240>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     248:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     24c:	4648      	mov	r0, r9
     24e:	f007 fbc5 	bl	79dc <Print::printf(char const*, ...)>
     252:	491f      	ldr	r1, [pc, #124]	; (2d0 <loop+0x268>)
     254:	45d0      	cmp	r8, sl
     256:	d1f7      	bne.n	248 <loop+0x1e0>
     258:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2e8 <loop+0x280>
     25c:	491d      	ldr	r1, [pc, #116]	; (2d4 <loop+0x26c>)
     25e:	f8d8 2000 	ldr.w	r2, [r8]
     262:	4811      	ldr	r0, [pc, #68]	; (2a8 <loop+0x240>)
     264:	f007 fbba 	bl	79dc <Print::printf(char const*, ...)>
     268:	2260      	movs	r2, #96	; 0x60
     26a:	2100      	movs	r1, #0
     26c:	481a      	ldr	r0, [pc, #104]	; (2d8 <loop+0x270>)
     26e:	f00b fbfd 	bl	ba6c <memset>
     272:	2300      	movs	r3, #0
     274:	f8c8 3000 	str.w	r3, [r8]
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
        Serial.printf("%2d",max_stat);

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
     278:	e7c4      	b.n	204 <loop+0x19c>
     27a:	bf00      	nop
     27c:	200288b4 	.word	0x200288b4
     280:	20029488 	.word	0x20029488
     284:	2000c53c 	.word	0x2000c53c
     288:	2002948a 	.word	0x2002948a
     28c:	200288b0 	.word	0x200288b0
     290:	2002945c 	.word	0x2002945c
     294:	20029470 	.word	0x20029470
     298:	2002948c 	.word	0x2002948c
     29c:	20028eec 	.word	0x20028eec
     2a0:	20028e28 	.word	0x20028e28
     2a4:	20007a48 	.word	0x20007a48
     2a8:	200085d4 	.word	0x200085d4
     2ac:	20007a6c 	.word	0x20007a6c
     2b0:	20000440 	.word	0x20000440
     2b4:	20007a70 	.word	0x20007a70
     2b8:	20007a74 	.word	0x20007a74
     2bc:	20007a78 	.word	0x20007a78
     2c0:	20029490 	.word	0x20029490
     2c4:	20028ea8 	.word	0x20028ea8
     2c8:	20028e24 	.word	0x20028e24
     2cc:	20007a94 	.word	0x20007a94
     2d0:	20007a88 	.word	0x20007a88
     2d4:	20007a90 	.word	0x20007a90
     2d8:	20028ef0 	.word	0x20028ef0
     2dc:	20028ee8 	.word	0x20028ee8
     2e0:	20007a80 	.word	0x20007a80
     2e4:	20028eec 	.word	0x20028eec
     2e8:	20028ec8 	.word	0x20028ec8

000002ec <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2ec:	b510      	push	{r4, lr}
     2ee:	4c0b      	ldr	r4, [pc, #44]	; (31c <setup1()+0x30>)
     2f0:	6823      	ldr	r3, [r4, #0]
     2f2:	b92b      	cbnz	r3, 300 <setup1()+0x14>
     2f4:	2001      	movs	r0, #1
     2f6:	f007 fe05 	bl	7f04 <delay>
     2fa:	6823      	ldr	r3, [r4, #0]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d0f9      	beq.n	2f4 <setup1()+0x8>
  i2s_setup();
     300:	f000 f9dc 	bl	6bc <i2s_setup()>
  dma_setup();
     304:	f000 fa20 	bl	748 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     308:	210b      	movs	r1, #11
     30a:	4805      	ldr	r0, [pc, #20]	; (320 <setup1()+0x34>)
     30c:	f009 f8da 	bl	94c4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     310:	4804      	ldr	r0, [pc, #16]	; (324 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     316:	f007 bb45 	b.w	79a4 <Print::println()>
     31a:	bf00      	nop
     31c:	20028f50 	.word	0x20028f50
     320:	2000051c 	.word	0x2000051c
     324:	200085d4 	.word	0x200085d4

00000328 <setup>:
{
     328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     32c:	4d4c      	ldr	r5, [pc, #304]	; (460 <setup+0x138>)
     32e:	b087      	sub	sp, #28
     330:	4c4c      	ldr	r4, [pc, #304]	; (464 <setup+0x13c>)
				if (elapsed > 750) break;
     332:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     336:	4f4c      	ldr	r7, [pc, #304]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     338:	f8df 9154 	ldr.w	r9, [pc, #340]	; 490 <setup+0x168>
		uint32_t millis_begin = systick_millis_count;
     33c:	682e      	ldr	r6, [r5, #0]
		yield();
     33e:	f009 f93f 	bl	95c0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     342:	7823      	ldrb	r3, [r4, #0]
     344:	2b00      	cmp	r3, #0
     346:	d069      	beq.n	41c <setup+0xf4>
     348:	783b      	ldrb	r3, [r7, #0]
     34a:	07da      	lsls	r2, r3, #31
     34c:	d566      	bpl.n	41c <setup+0xf4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     34e:	682b      	ldr	r3, [r5, #0]
     350:	f8d9 2000 	ldr.w	r2, [r9]
     354:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     356:	2b0e      	cmp	r3, #14
     358:	d960      	bls.n	41c <setup+0xf4>
     35a:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     35c:	f242 760f 	movw	r6, #9999	; 0x270f
     360:	42b3      	cmp	r3, r6
     362:	d813      	bhi.n	38c <setup+0x64>
     364:	4f40      	ldr	r7, [pc, #256]	; (468 <setup+0x140>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     366:	f8df 8128 	ldr.w	r8, [pc, #296]	; 490 <setup+0x168>
		yield();
     36a:	f009 f929 	bl	95c0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     36e:	7823      	ldrb	r3, [r4, #0]
     370:	2b00      	cmp	r3, #0
     372:	d05d      	beq.n	430 <setup+0x108>
     374:	783b      	ldrb	r3, [r7, #0]
     376:	07db      	lsls	r3, r3, #31
     378:	d55a      	bpl.n	430 <setup+0x108>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     37a:	682b      	ldr	r3, [r5, #0]
     37c:	f8d8 2000 	ldr.w	r2, [r8]
     380:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     382:	2b0e      	cmp	r3, #14
     384:	d954      	bls.n	430 <setup+0x108>
     386:	4b39      	ldr	r3, [pc, #228]	; (46c <setup+0x144>)
     388:	2201      	movs	r2, #1
     38a:	601a      	str	r2, [r3, #0]
    if(CrashReport) Serial.print(CrashReport);
     38c:	4838      	ldr	r0, [pc, #224]	; (470 <setup+0x148>)
     38e:	f014 f8d3 	bl	14538 <___ZN16CrashReportClasscvbEv_veneer>
     392:	2800      	cmp	r0, #0
     394:	d154      	bne.n	440 <setup+0x118>
  rtc_setup();
     396:	2113      	movs	r1, #19
     398:	2012      	movs	r0, #18
     39a:	f001 fb15 	bl	19c8 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     39e:	2110      	movs	r1, #16
     3a0:	4834      	ldr	r0, [pc, #208]	; (474 <setup+0x14c>)
     3a2:	f009 f88f 	bl	94c4 <usb_serial_write>
     3a6:	4834      	ldr	r0, [pc, #208]	; (478 <setup+0x150>)
     3a8:	f007 fafc 	bl	79a4 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     3ac:	a804      	add	r0, sp, #16
     3ae:	f001 fb0d 	bl	19cc <rtc_get_datetime(datetime_t*)>
     3b2:	2800      	cmp	r0, #0
     3b4:	d04c      	beq.n	450 <setup+0x128>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3b6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     3ba:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     3be:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     3c2:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     3c6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3ce:	e9cd 0400 	strd	r0, r4, [sp]
     3d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  ready=1;
     3d6:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3d8:	4928      	ldr	r1, [pc, #160]	; (47c <setup+0x154>)
     3da:	4827      	ldr	r0, [pc, #156]	; (478 <setup+0x150>)
     3dc:	f007 fafe 	bl	79dc <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3e0:	4825      	ldr	r0, [pc, #148]	; (478 <setup+0x150>)
     3e2:	f007 fadf 	bl	79a4 <Print::println()>
     3e6:	210b      	movs	r1, #11
     3e8:	4825      	ldr	r0, [pc, #148]	; (480 <setup+0x158>)
     3ea:	f009 f86b 	bl	94c4 <usb_serial_write>
     3ee:	4822      	ldr	r0, [pc, #136]	; (478 <setup+0x150>)
     3f0:	f007 fad8 	bl	79a4 <Print::println()>
  filing_init();
     3f4:	f000 fc5e 	bl	cb4 <filing_init()>
     3f8:	210a      	movs	r1, #10
     3fa:	4822      	ldr	r0, [pc, #136]	; (484 <setup+0x15c>)
     3fc:	f009 f862 	bl	94c4 <usb_serial_write>
     400:	481d      	ldr	r0, [pc, #116]	; (478 <setup+0x150>)
     402:	f007 facf 	bl	79a4 <Print::println()>
  ready=1;
     406:	4b20      	ldr	r3, [pc, #128]	; (488 <setup+0x160>)
     408:	601c      	str	r4, [r3, #0]
    setup1();
     40a:	f7ff ff6f 	bl	2ec <setup1()>
    pinMode(13,OUTPUT);
     40e:	4621      	mov	r1, r4
     410:	200d      	movs	r0, #13
     412:	f007 fe1f 	bl	8054 <pinMode>
}
     416:	b007      	add	sp, #28
     418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     41c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     41e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     420:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     422:	b192      	cbz	r2, 44a <setup+0x122>
				if (elapsed > 2000) break;
     424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     428:	d897      	bhi.n	35a <setup+0x32>
			yield();
     42a:	f009 f8c9 	bl	95c0 <yield>
     42e:	e786      	b.n	33e <setup+0x16>
     430:	682b      	ldr	r3, [r5, #0]
  while(millis()<10000) if(Serial) { termon=1; break;}
     432:	42b3      	cmp	r3, r6
     434:	d999      	bls.n	36a <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     436:	480e      	ldr	r0, [pc, #56]	; (470 <setup+0x148>)
     438:	f014 f87e 	bl	14538 <___ZN16CrashReportClasscvbEv_veneer>
     43c:	2800      	cmp	r0, #0
     43e:	d0aa      	beq.n	396 <setup+0x6e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     440:	490d      	ldr	r1, [pc, #52]	; (478 <setup+0x150>)
     442:	480b      	ldr	r0, [pc, #44]	; (470 <setup+0x148>)
     444:	f014 f87c 	bl	14540 <___ZNK16CrashReportClass7printToER5Print_veneer>
     448:	e7a5      	b.n	396 <setup+0x6e>
				if (elapsed > 750) break;
     44a:	4543      	cmp	r3, r8
     44c:	d9ed      	bls.n	42a <setup+0x102>
     44e:	e784      	b.n	35a <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     450:	2114      	movs	r1, #20
     452:	480e      	ldr	r0, [pc, #56]	; (48c <setup+0x164>)
     454:	f009 f836 	bl	94c4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     458:	4807      	ldr	r0, [pc, #28]	; (478 <setup+0x150>)
     45a:	f007 faa3 	bl	79a4 <Print::println()>
     45e:	e7aa      	b.n	3b6 <setup+0x8e>
     460:	2002945c 	.word	0x2002945c
     464:	200294ab 	.word	0x200294ab
     468:	200294aa 	.word	0x200294aa
     46c:	20029470 	.word	0x20029470
     470:	200085c8 	.word	0x200085c8
     474:	20007aa8 	.word	0x20007aa8
     478:	200085d4 	.word	0x200085d4
     47c:	20007ad4 	.word	0x20007ad4
     480:	20007afc 	.word	0x20007afc
     484:	20007b08 	.word	0x20007b08
     488:	20028f50 	.word	0x20028f50
     48c:	20007abc 	.word	0x20007abc
     490:	2002947c 	.word	0x2002947c

00000494 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     494:	4b39      	ldr	r3, [pc, #228]	; (57c <acq_isr()+0xe8>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     496:	4a3a      	ldr	r2, [pc, #232]	; (580 <acq_isr()+0xec>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     498:	493a      	ldr	r1, [pc, #232]	; (584 <acq_isr()+0xf0>)
  {
     49a:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     49c:	681c      	ldr	r4, [r3, #0]
     49e:	7918      	ldrb	r0, [r3, #4]
     4a0:	6923      	ldr	r3, [r4, #16]
     4a2:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     4a4:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     4a6:	bf28      	it	cs
     4a8:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     4ac:	4611      	mov	r1, r2
	asm("dsb");
     4ae:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     4b2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
     4b6:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     4ba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
     4be:	4298      	cmp	r0, r3
     4c0:	bf34      	ite	cc
     4c2:	2001      	movcc	r0, #1
     4c4:	2020      	movcs	r0, #32
     4c6:	eb02 1040 	add.w	r0, r2, r0, lsl #5
	} while (location < end_addr);
     4ca:	4283      	cmp	r3, r0
		SCB_CACHE_DCIMVAC = location;
     4cc:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
     4d0:	461a      	mov	r2, r3
	} while (location < end_addr);
     4d2:	f103 0320 	add.w	r3, r3, #32
     4d6:	d1f8      	bne.n	4ca <acq_isr()+0x36>
	asm("dsb");
     4d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
     4dc:	f3bf 8f6f 	isb	sy
        arm_dcache_delete((void*)src, sizeof(i2s_buffer) / 2);
    #endif

    // extract data
    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     4e0:	4b29      	ldr	r3, [pc, #164]	; (588 <acq_isr()+0xf4>)
     4e2:	2200      	movs	r2, #0
     4e4:	4c29      	ldr	r4, [pc, #164]	; (58c <acq_isr()+0xf8>)
     4e6:	f9b3 0000 	ldrsh.w	r0, [r3]
     4ea:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
     4ee:	4423      	add	r3, r4
     4f0:	4103      	asrs	r3, r0
     4f2:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
     4f6:	3201      	adds	r2, #1
     4f8:	2a80      	cmp	r2, #128	; 0x80
     4fa:	d1f6      	bne.n	4ea <acq_isr()+0x56>

int32_t bias=0;

/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     4fc:	4c24      	ldr	r4, [pc, #144]	; (590 <acq_isr()+0xfc>)


  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];   
     4fe:	2200      	movs	r2, #0
     500:	4b24      	ldr	r3, [pc, #144]	; (594 <acq_isr()+0x100>)
{ procCount++;
     502:	6820      	ldr	r0, [r4, #0]
     504:	3001      	adds	r0, #1
     506:	6020      	str	r0, [r4, #0]
     508:	4618      	mov	r0, r3
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];   
     50a:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
     50e:	3201      	adds	r2, #1
     510:	2a80      	cmp	r2, #128	; 0x80
     512:	f840 4f04 	str.w	r4, [r0, #4]!
     516:	d1f8      	bne.n	50a <acq_isr()+0x76>
     518:	4c1f      	ldr	r4, [pc, #124]	; (598 <acq_isr()+0x104>)
     51a:	4619      	mov	r1, r3

  int32_t tmp=0;  
     51c:	2000      	movs	r0, #0
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp+=acqBuffer[ii]/NBUF_ACQ;
     51e:	f851 2f04 	ldr.w	r2, [r1, #4]!
     522:	2a00      	cmp	r2, #0
     524:	bfb8      	it	lt
     526:	327f      	addlt	r2, #127	; 0x7f
     528:	42a1      	cmp	r1, r4
     52a:	eb00 10e2 	add.w	r0, r0, r2, asr #7
     52e:	d1f6      	bne.n	51e <acq_isr()+0x8a>
  bias=bias+(tmp-bias)/(1<<10);
     530:	4a1a      	ldr	r2, [pc, #104]	; (59c <acq_isr()+0x108>)
     532:	6811      	ldr	r1, [r2, #0]
     534:	1a40      	subs	r0, r0, r1
     536:	bf48      	it	mi
     538:	f200 30ff 	addwmi	r0, r0, #1023	; 0x3ff
     53c:	eb01 21a0 	add.w	r1, r1, r0, asr #10
     540:	6011      	str	r1, [r2, #0]

//  bias=(bias>>10)<<10;

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= (acqBuffer[ii] - bias)>>SHIFT;   
     542:	f853 2f04 	ldr.w	r2, [r3, #4]!
     546:	1a52      	subs	r2, r2, r1
     548:	42a3      	cmp	r3, r4
     54a:	601a      	str	r2, [r3, #0]
     54c:	d1f9      	bne.n	542 <acq_isr()+0xae>
  acqBuffer[0] = acqBuffer[0] + data1;
  for(int ii=1; ii<NBUF_ACQ;ii++) acqBuffer[ii]= acqBuffer[ii] + acqBuffer[ii-1];
  data1=acqBuffer[NBUF_ACQ-1];
  */

  if(proc==0)
     54e:	4b14      	ldr	r3, [pc, #80]	; (5a0 <acq_isr()+0x10c>)
     550:	f9b3 3000 	ldrsh.w	r3, [r3]
     554:	b113      	cbz	r3, 55c <acq_isr()+0xc8>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     556:	2b01      	cmp	r3, #1
     558:	d00a      	beq.n	570 <acq_isr()+0xdc>
  }
     55a:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     55c:	4811      	ldr	r0, [pc, #68]	; (5a4 <acq_isr()+0x110>)
     55e:	f001 f885 	bl	166c <pushData(unsigned long*)>
     562:	2800      	cmp	r0, #0
     564:	d1f9      	bne.n	55a <acq_isr()+0xc6>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     566:	4a10      	ldr	r2, [pc, #64]	; (5a8 <acq_isr()+0x114>)
     568:	6813      	ldr	r3, [r2, #0]
     56a:	3301      	adds	r3, #1
     56c:	6013      	str	r3, [r2, #0]
  }
     56e:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     570:	480c      	ldr	r0, [pc, #48]	; (5a4 <acq_isr()+0x110>)
     572:	f000 f961 	bl	838 <compress(void*)>
     576:	2800      	cmp	r0, #0
     578:	d1ef      	bne.n	55a <acq_isr()+0xc6>
     57a:	e7f4      	b.n	566 <acq_isr()+0xd2>
     57c:	20027f4c 	.word	0x20027f4c
     580:	20200400 	.word	0x20200400
     584:	400e8000 	.word	0x400e8000
     588:	20029494 	.word	0x20029494
     58c:	0365c040 	.word	0x0365c040
     590:	20028ee8 	.word	0x20028ee8
     594:	20028c20 	.word	0x20028c20
     598:	20028e20 	.word	0x20028e20
     59c:	20028e24 	.word	0x20028e24
     5a0:	20029490 	.word	0x20029490
     5a4:	20028c24 	.word	0x20028c24
     5a8:	20028eec 	.word	0x20028eec

000005ac <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     5ac:	b510      	push	{r4, lr}
     5ae:	4604      	mov	r4, r0
		release();
     5b0:	f007 f918 	bl	77e4 <DMAChannel::release()>
	}
     5b4:	4620      	mov	r0, r4
     5b6:	bd10      	pop	{r4, pc}

000005b8 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5b8:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5bc:	4938      	ldr	r1, [pc, #224]	; (6a0 <setAudioFrequency(int)+0xe8>)
     5be:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5c0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     5c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     5c8:	4b36      	ldr	r3, [pc, #216]	; (6a4 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ca:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 688 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5ce:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     5d6:	1c4a      	adds	r2, r1, #1
     5d8:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     5e0:	ee27 7b03 	vmul.f64	d7, d7, d3
     5e4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 690 <setAudioFrequency(int)+0xd8>
  {
     5e8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5ea:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     5ee:	f242 7410 	movw	r4, #10000	; 0x2710
     5f2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 698 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5f6:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     5fa:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     5fe:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     602:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     60a:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     60e:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     612:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     616:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     618:	ee96 7b05 	vfnms.f64	d7, d6, d5
     61c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     620:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     624:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     62c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     636:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     63a:	2a00      	cmp	r2, #0
     63c:	dafc      	bge.n	638 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     63e:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     642:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     646:	4a18      	ldr	r2, [pc, #96]	; (6a8 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     648:	4818      	ldr	r0, [pc, #96]	; (6ac <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     64c:	4c18      	ldr	r4, [pc, #96]	; (6b0 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     64e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     658:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     65c:	4b15      	ldr	r3, [pc, #84]	; (6b4 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     65e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     666:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     668:	6a82      	ldr	r2, [r0, #40]	; 0x28
     66a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     66c:	4a12      	ldr	r2, [pc, #72]	; (6b8 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     66e:	430b      	orrs	r3, r1
     670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     674:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     676:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     678:	401a      	ands	r2, r3
     67a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     67e:	6062      	str	r2, [r4, #4]
  }
     680:	f85d 4b04 	ldr.w	r4, [sp], #4
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	00000000 	.word	0x00000000
     68c:	40700000 	.word	0x40700000
     690:	00000000 	.word	0x00000000
     694:	4176e360 	.word	0x4176e360
     698:	00000000 	.word	0x00000000
     69c:	40c38800 	.word	0x40c38800
     6a0:	269fb200 	.word	0x269fb200
     6a4:	400d8000 	.word	0x400d8000
     6a8:	ff7f7fff 	.word	0xff7f7fff
     6ac:	400fc000 	.word	0x400fc000
     6b0:	400ac000 	.word	0x400ac000
     6b4:	fffffe00 	.word	0xfffffe00
     6b8:	fff7fff8 	.word	0xfff7fff8

000006bc <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6bc:	4a19      	ldr	r2, [pc, #100]	; (724 <i2s_setup()+0x68>)
     6be:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     6c0:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6c6:	4c18      	ldr	r4, [pc, #96]	; (728 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     6c8:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     6ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     6ce:	2b00      	cmp	r3, #0
     6d0:	db27      	blt.n	722 <i2s_setup()+0x66>
    int fs = fsamp;
     6d2:	4b16      	ldr	r3, [pc, #88]	; (72c <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     6d4:	6818      	ldr	r0, [r3, #0]
     6d6:	f7ff ff6f 	bl	5b8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6da:	4b15      	ldr	r3, [pc, #84]	; (730 <i2s_setup()+0x74>)
     6dc:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6de:	4915      	ldr	r1, [pc, #84]	; (734 <i2s_setup()+0x78>)
     6e0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     6e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     6ea:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     6ee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     6f2:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6f4:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     6f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     6fc:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6fe:	480e      	ldr	r0, [pc, #56]	; (738 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     700:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     704:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     708:	490c      	ldr	r1, [pc, #48]	; (73c <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     70a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     70e:	4a0c      	ldr	r2, [pc, #48]	; (740 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     710:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     714:	4b0b      	ldr	r3, [pc, #44]	; (744 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     716:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     71a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     71e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     722:	bd10      	pop	{r4, pc}
     724:	400fc000 	.word	0x400fc000
     728:	40384000 	.word	0x40384000
     72c:	20008b94 	.word	0x20008b94
     730:	401f8000 	.word	0x401f8000
     734:	401f8400 	.word	0x401f8400
     738:	07000001 	.word	0x07000001
     73c:	00011f1b 	.word	0x00011f1b
     740:	1f1f1f00 	.word	0x1f1f1f00
     744:	92000001 	.word	0x92000001

00000748 <dma_setup()>:
  {
     748:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     74a:	4c1c      	ldr	r4, [pc, #112]	; (7bc <dma_setup()+0x74>)
     74c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     74e:	4d1c      	ldr	r5, [pc, #112]	; (7c0 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     750:	4620      	mov	r0, r4
     752:	f006 ffed 	bl	7730 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     756:	6823      	ldr	r3, [r4, #0]
     758:	481a      	ldr	r0, [pc, #104]	; (7c4 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     75a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     75e:	491a      	ldr	r1, [pc, #104]	; (7c8 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     760:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     762:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     764:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     766:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     768:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     76a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     76c:	4d17      	ldr	r5, [pc, #92]	; (7cc <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     76e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     770:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     772:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     774:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     776:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     778:	2204      	movs	r2, #4
     77a:	4915      	ldr	r1, [pc, #84]	; (7d0 <dma_setup()+0x88>)
     77c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     77e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     780:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     782:	4d14      	ldr	r5, [pc, #80]	; (7d4 <dma_setup()+0x8c>)
     784:	60da      	str	r2, [r3, #12]
		*mux = 0;
     786:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     78a:	4b13      	ldr	r3, [pc, #76]	; (7d8 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     78c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     790:	2101      	movs	r1, #1
     792:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     794:	4811      	ldr	r0, [pc, #68]	; (7dc <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     796:	f002 051f 	and.w	r5, r2, #31
     79a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     79e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7a2:	40a9      	lsls	r1, r5
     7a4:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     7a6:	4d0e      	ldr	r5, [pc, #56]	; (7e0 <dma_setup()+0x98>)
     7a8:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7ac:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     7ae:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b0:	490c      	ldr	r1, [pc, #48]	; (7e4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     7b4:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     7b6:	7922      	ldrb	r2, [r4, #4]
     7b8:	76da      	strb	r2, [r3, #27]
  }
     7ba:	bd38      	pop	{r3, r4, r5, pc}
     7bc:	20027f4c 	.word	0x20027f4c
     7c0:	02020000 	.word	0x02020000
     7c4:	403840a0 	.word	0x403840a0
     7c8:	20200000 	.word	0x20200000
     7cc:	fffff800 	.word	0xfffff800
     7d0:	400ec000 	.word	0x400ec000
     7d4:	80000013 	.word	0x80000013
     7d8:	38003840 	.word	0x38003840
     7dc:	20008c00 	.word	0x20008c00
     7e0:	00000495 	.word	0x00000495
     7e4:	e000e400 	.word	0xe000e400
     7e8:	400e8000 	.word	0x400e8000

000007ec <acqModifyFrequency(unsigned long)>:
  {
     7ec:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     7ee:	4c08      	ldr	r4, [pc, #32]	; (810 <acqModifyFrequency(unsigned long)+0x24>)
     7f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     7f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     7fc:	f7ff fedc 	bl	5b8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     800:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     804:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     808:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	40384000 	.word	0x40384000

00000814 <_GLOBAL__sub_I_procCount>:
		begin();
     814:	4805      	ldr	r0, [pc, #20]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
     816:	2100      	movs	r1, #0
  }
}
     818:	b508      	push	{r3, lr}
     81a:	f006 ff89 	bl	7730 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     81e:	4a04      	ldr	r2, [pc, #16]	; (830 <_GLOBAL__sub_I_procCount+0x1c>)
     820:	4904      	ldr	r1, [pc, #16]	; (834 <_GLOBAL__sub_I_procCount+0x20>)
     822:	4802      	ldr	r0, [pc, #8]	; (82c <_GLOBAL__sub_I_procCount+0x18>)
}
     824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     828:	f009 b864 	b.w	98f4 <__aeabi_atexit>
     82c:	20027f4c 	.word	0x20027f4c
     830:	200085f0 	.word	0x200085f0
     834:	000005ad 	.word	0x000005ad

00000838 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     83c:	b083      	sub	sp, #12
     83e:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     840:	f007 fd16 	bl	8270 <rtc_get>
     844:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     846:	f007 fbb1 	bl	7fac <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     84a:	49a1      	ldr	r1, [pc, #644]	; (ad0 <compress(void*)+0x298>)
     84c:	6822      	ldr	r2, [r4, #0]
     84e:	4623      	mov	r3, r4
     850:	680d      	ldr	r5, [r1, #0]
     852:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     856:	499f      	ldr	r1, [pc, #636]	; (ad4 <compress(void*)+0x29c>)
  t1 = micros();
     858:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     85a:	602a      	str	r2, [r5, #0]
     85c:	462c      	mov	r4, r5
     85e:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     860:	4629      	mov	r1, r5
     862:	4618      	mov	r0, r3
     864:	3304      	adds	r3, #4
     866:	e9d0 0200 	ldrd	r0, r2, [r0]
     86a:	42b3      	cmp	r3, r6
     86c:	eba2 0200 	sub.w	r2, r2, r0
     870:	f844 2f04 	str.w	r2, [r4, #4]!
     874:	d1f5      	bne.n	862 <compress(void*)+0x2a>
     876:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     87a:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     87c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     880:	2b00      	cmp	r3, #0
     882:	bfb8      	it	lt
     884:	425b      	neglt	r3, r3
     886:	429a      	cmp	r2, r3
     888:	bfb8      	it	lt
     88a:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     88c:	4281      	cmp	r1, r0
     88e:	d1f5      	bne.n	87c <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     890:	2702      	movs	r7, #2
     892:	2101      	movs	r1, #1
     894:	e003      	b.n	89e <compress(void*)+0x66>
     896:	3701      	adds	r7, #1
     898:	2f18      	cmp	r7, #24
     89a:	f000 8110 	beq.w	abe <compress(void*)+0x286>
     89e:	1e7c      	subs	r4, r7, #1
     8a0:	fa01 f304 	lsl.w	r3, r1, r4
     8a4:	4293      	cmp	r3, r2
     8a6:	ddf6      	ble.n	896 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     8a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     8ac:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     8ae:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     8b2:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     8b4:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     8b6:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     8ba:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     8be:	4986      	ldr	r1, [pc, #536]	; (ad8 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c0:	4d86      	ldr	r5, [pc, #536]	; (adc <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     8c2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     8c6:	3201      	adds	r2, #1
     8c8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     8cc:	682a      	ldr	r2, [r5, #0]
     8ce:	4c84      	ldr	r4, [pc, #528]	; (ae0 <compress(void*)+0x2a8>)
     8d0:	42ba      	cmp	r2, r7
     8d2:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     8d6:	46a3      	mov	fp, r4
     8d8:	4622      	mov	r2, r4
     8da:	bf38      	it	cc
     8dc:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8de:	f852 1f04 	ldr.w	r1, [r2, #4]!
     8e2:	4001      	ands	r1, r0
     8e4:	4296      	cmp	r6, r2
     8e6:	6011      	str	r1, [r2, #0]
     8e8:	d1f9      	bne.n	8de <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8ea:	4d7e      	ldr	r5, [pc, #504]	; (ae4 <compress(void*)+0x2ac>)
     8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
     8f0:	2100      	movs	r1, #0
     8f2:	9300      	str	r3, [sp, #0]
     8f4:	4628      	mov	r0, r5
     8f6:	f00b f8b9 	bl	ba6c <memset>
  *iptr++ = nb | shift<<16;
     8fa:	4a7b      	ldr	r2, [pc, #492]	; (ae8 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     8fc:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8fe:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     900:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     904:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     908:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     90a:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     90c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     910:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     912:	f8db 2000 	ldr.w	r2, [fp]
     916:	f8cb 1000 	str.w	r1, [fp]
     91a:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     91c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     920:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     922:	2201      	movs	r2, #1
  *iptr++ = t1;
     924:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     928:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     92a:	e00a      	b.n	942 <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     92c:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     930:	4694      	mov	ip, r2
     932:	ea41 010e 	orr.w	r1, r1, lr
     936:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     93a:	42a6      	cmp	r6, r4
     93c:	d018      	beq.n	970 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     93e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     942:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     946:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     948:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     94c:	dcee      	bgt.n	92c <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     94e:	eba7 0e0c 	sub.w	lr, r7, ip
     952:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     956:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     95a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     95e:	d12f      	bne.n	9c0 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     960:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     962:	42a6      	cmp	r6, r4
          nx=MBIT;
     964:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     968:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     96c:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     96e:	d1e6      	bne.n	93e <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     970:	4e5e      	ldr	r6, [pc, #376]	; (aec <compress(void*)+0x2b4>)
     972:	6834      	ldr	r4, [r6, #0]
     974:	eb04 0208 	add.w	r2, r4, r8
     978:	2a80      	cmp	r2, #128	; 0x80
     97a:	dc2d      	bgt.n	9d8 <compress(void*)+0x1a0>
     97c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     980:	4a5b      	ldr	r2, [pc, #364]	; (af0 <compress(void*)+0x2b8>)
     982:	4858      	ldr	r0, [pc, #352]	; (ae4 <compress(void*)+0x2ac>)
     984:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     988:	4423      	add	r3, r4
     98a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     98e:	2300      	movs	r3, #0
     990:	e001      	b.n	996 <compress(void*)+0x15e>
     992:	f850 1f04 	ldr.w	r1, [r0, #4]!
     996:	3301      	adds	r3, #1
     998:	f842 1f04 	str.w	r1, [r2, #4]!
     99c:	4543      	cmp	r3, r8
     99e:	dbf8      	blt.n	992 <compress(void*)+0x15a>
     9a0:	f1b8 0f00 	cmp.w	r8, #0
     9a4:	f108 33ff 	add.w	r3, r8, #4294967295
     9a8:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     9ac:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9b0:	bfd8      	it	le
     9b2:	2300      	movle	r3, #0
     9b4:	4423      	add	r3, r4
     9b6:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9b8:	4638      	mov	r0, r7
     9ba:	b003      	add	sp, #12
     9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c0:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     9c4:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9c8:	ea4e 0202 	orr.w	r2, lr, r2
     9cc:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     9d0:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     9d2:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     9d6:	e7b0      	b.n	93a <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     9d8:	2c7a      	cmp	r4, #122	; 0x7a
     9da:	dd22      	ble.n	a22 <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     9dc:	2c7f      	cmp	r4, #127	; 0x7f
     9de:	dc0a      	bgt.n	9f6 <compress(void*)+0x1be>
     9e0:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     9e4:	4842      	ldr	r0, [pc, #264]	; (af0 <compress(void*)+0x2b8>)
     9e6:	2100      	movs	r1, #0
     9e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9ec:	0092      	lsls	r2, r2, #2
     9ee:	f00b f83d 	bl	ba6c <memset>
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     9f6:	483e      	ldr	r0, [pc, #248]	; (af0 <compress(void*)+0x2b8>)
     9f8:	f000 fe38 	bl	166c <pushData(unsigned long*)>
     9fc:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9fe:	ea4f 0288 	mov.w	r2, r8, lsl #2
     a02:	4938      	ldr	r1, [pc, #224]	; (ae4 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     a04:	bf18      	it	ne
     a06:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     a08:	f1b8 0f00 	cmp.w	r8, #0
     a0c:	4838      	ldr	r0, [pc, #224]	; (af0 <compress(void*)+0x2b8>)
     a0e:	bfd8      	it	le
     a10:	2204      	movle	r2, #4
     a12:	f007 fb5f 	bl	80d4 <memcpy>
}
     a16:	4638      	mov	r0, r7
     a18:	f8c6 8000 	str.w	r8, [r6]
     a1c:	b003      	add	sp, #12
     a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     a22:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     a26:	4832      	ldr	r0, [pc, #200]	; (af0 <compress(void*)+0x2b8>)
     a28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     a2c:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     a30:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     a32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     a36:	4d2b      	ldr	r5, [pc, #172]	; (ae4 <compress(void*)+0x2ac>)
     a38:	4423      	add	r3, r4
     a3a:	4629      	mov	r1, r5
     a3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     a40:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     a44:	e001      	b.n	a4a <compress(void*)+0x212>
     a46:	f851 2f04 	ldr.w	r2, [r1, #4]!
     a4a:	f843 2f04 	str.w	r2, [r3, #4]!
     a4e:	4298      	cmp	r0, r3
     a50:	d1f9      	bne.n	a46 <compress(void*)+0x20e>
     a52:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     a54:	4826      	ldr	r0, [pc, #152]	; (af0 <compress(void*)+0x2b8>)
     a56:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     a5a:	6033      	str	r3, [r6, #0]
     a5c:	f000 fe06 	bl	166c <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a60:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     a62:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     a64:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a66:	4a23      	ldr	r2, [pc, #140]	; (af4 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     a68:	bf18      	it	ne
     a6a:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     a6c:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a70:	f8df e070 	ldr.w	lr, [pc, #112]	; ae4 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a74:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a76:	f8df c078 	ldr.w	ip, [pc, #120]	; af0 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     a7a:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a7c:	ea42 0203 	orr.w	r2, r2, r3
     a80:	f04f 0306 	mov.w	r3, #6
     a84:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a86:	6033      	str	r3, [r6, #0]
     a88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a90:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a94:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a98:	da8e      	bge.n	9b8 <compress(void*)+0x180>
     a9a:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a9e:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     aa2:	f10c 0008 	add.w	r0, ip, #8
     aa6:	4442      	add	r2, r8
     aa8:	0092      	lsls	r2, r2, #2
     aaa:	f007 fb13 	bl	80d4 <memcpy>
     aae:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     ab2:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     ab4:	4443      	add	r3, r8
     ab6:	6033      	str	r3, [r6, #0]
}
     ab8:	b003      	add	sp, #12
     aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     abe:	2267      	movs	r2, #103	; 0x67
     ac0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     ac4:	f04f 0868 	mov.w	r8, #104	; 0x68
     ac8:	2361      	movs	r3, #97	; 0x61
     aca:	2417      	movs	r4, #23
     acc:	9201      	str	r2, [sp, #4]
     ace:	e6f6      	b.n	8be <compress(void*)+0x86>
     ad0:	20008bdc 	.word	0x20008bdc
     ad4:	2002946c 	.word	0x2002946c
     ad8:	20028ef0 	.word	0x20028ef0
     adc:	20028ec8 	.word	0x20028ec8
     ae0:	20028664 	.word	0x20028664
     ae4:	20028214 	.word	0x20028214
     ae8:	20029494 	.word	0x20029494
     aec:	200288b8 	.word	0x200288b8
     af0:	20027f54 	.word	0x20027f54
     af4:	ffff0000 	.word	0xffff0000

00000af8 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     af8:	2000      	movs	r0, #0
     afa:	4770      	bx	lr

00000afc <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     afc:	4770      	bx	lr
     afe:	bf00      	nop

00000b00 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     b00:	b570      	push	{r4, r5, r6, lr}
     b02:	b082      	sub	sp, #8
     b04:	4606      	mov	r6, r0
     b06:	4614      	mov	r4, r2
     b08:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
     b0a:	4668      	mov	r0, sp
     b0c:	f000 ff5e 	bl	19cc <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     b10:	f89d 2002 	ldrb.w	r2, [sp, #2]
     b14:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     b18:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     b1c:	2a0c      	cmp	r2, #12
     b1e:	bf98      	it	ls
     b20:	f1bc 0f1f 	cmpls.w	ip, #31
     b24:	d804      	bhi.n	b30 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
     b26:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
     b2a:	b29b      	uxth	r3, r3
     b2c:	2b7f      	cmp	r3, #127	; 0x7f
     b2e:	d920      	bls.n	b72 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
                                              : year << 9 | month << 5 | day;
     b30:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b34:	f89d 2005 	ldrb.w	r2, [sp, #5]
     b38:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     b40:	2a17      	cmp	r2, #23
     b42:	bf98      	it	ls
     b44:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
     b46:	f8a6 c000 	strh.w	ip, [r6]
     b4a:	d801      	bhi.n	b50 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
     b4c:	293b      	cmp	r1, #59	; 0x3b
     b4e:	d905      	bls.n	b5c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     b50:	2300      	movs	r3, #0
    *ms10 = 0;
     b52:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b54:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b56:	7022      	strb	r2, [r4, #0]
}
     b58:	b002      	add	sp, #8
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	015b      	lsls	r3, r3, #5
     b5e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
     b62:	2200      	movs	r2, #0
     b64:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
     b68:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
     b6a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b6c:	7022      	strb	r2, [r4, #0]
}
     b6e:	b002      	add	sp, #8
     b70:	bd70      	pop	{r4, r5, r6, pc}
                                              : year << 9 | month << 5 | day;
     b72:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
     b76:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
     b7a:	fa1f fc8c 	uxth.w	ip, ip
     b7e:	e7d9      	b.n	b34 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00000b80 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b80:	4b04      	ldr	r3, [pc, #16]	; (b94 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b82:	b510      	push	{r4, lr}
     b84:	4604      	mov	r4, r0
     b86:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() { close(); }
     b8a:	f003 ff21 	bl	49d0 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b8e:	4620      	mov	r0, r4
     b90:	bd10      	pop	{r4, pc}
     b92:	bf00      	nop
     b94:	200006f8 	.word	0x200006f8

00000b98 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     b98:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     b9a:	b500      	push	{lr}
     b9c:	b083      	sub	sp, #12
     b9e:	b163      	cbz	r3, bba <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ba0:	2201      	movs	r2, #1
     ba2:	f10d 0107 	add.w	r1, sp, #7
     ba6:	4618      	mov	r0, r3
     ba8:	f002 fe8a 	bl	38c0 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     bac:	2801      	cmp	r0, #1
     bae:	d10c      	bne.n	bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
     bb4:	b003      	add	sp, #12
     bb6:	f85d fb04 	ldr.w	pc, [sp], #4
     bba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     bbc:	b128      	cbz	r0, bca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     bbe:	2201      	movs	r2, #1
     bc0:	f10d 0107 	add.w	r1, sp, #7
     bc4:	f001 f982 	bl	1ecc <ExFatFile::read(void*, unsigned int)>
     bc8:	e7f0      	b.n	bac <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     bca:	f04f 30ff 	mov.w	r0, #4294967295
     bce:	e7f1      	b.n	bb4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000bd0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bd2:	b113      	cbz	r3, bda <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     bd4:	4618      	mov	r0, r3
     bd6:	f002 bf47 	b.w	3a68 <FatFile::peek()>
     bda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     bdc:	b108      	cbz	r0, be2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     bde:	f001 ba45 	b.w	206c <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     be2:	f04f 30ff 	mov.w	r0, #4294967295
     be6:	4770      	bx	lr

00000be8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     be8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bea:	b153      	cbz	r3, c02 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     bec:	7818      	ldrb	r0, [r3, #0]
     bee:	f010 0008 	ands.w	r0, r0, #8
     bf2:	d00d      	beq.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     bf4:	69d8      	ldr	r0, [r3, #28]
     bf6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     bf8:	1ac0      	subs	r0, r0, r3
     bfa:	bf48      	it	mi
     bfc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     c00:	4770      	bx	lr
     c02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     c04:	b1a3      	cbz	r3, c30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     c06:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     c0a:	f010 0008 	ands.w	r0, r0, #8
     c0e:	d100      	bne.n	c12 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     c10:	4770      	bx	lr
     c12:	6918      	ldr	r0, [r3, #16]
     c14:	6819      	ldr	r1, [r3, #0]
     c16:	695a      	ldr	r2, [r3, #20]
     c18:	1a40      	subs	r0, r0, r1
     c1a:	685b      	ldr	r3, [r3, #4]
     c1c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     c20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     c24:	f173 0300 	sbcs.w	r3, r3, #0
     c28:	d3f2      	bcc.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     c2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     c2e:	4770      	bx	lr
     c30:	4618      	mov	r0, r3
     c32:	e7ed      	b.n	c10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000c34 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     c34:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c36:	b113      	cbz	r3, c3e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     c38:	4618      	mov	r0, r3
     c3a:	f003 b819 	b.w	3c70 <FatFile::sync()>
     c3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     c40:	b108      	cbz	r0, c46 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     c42:	f001 bdeb 	b.w	281c <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     c46:	4770      	bx	lr

00000c48 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     c48:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c4a:	b113      	cbz	r3, c52 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     c4c:	4618      	mov	r0, r3
     c4e:	f003 b815 	b.w	3c7c <FatFile::write(void const*, unsigned int)>
     c52:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c54:	b108      	cbz	r0, c5a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     c56:	f001 bf75 	b.w	2b44 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     c5a:	4770      	bx	lr

00000c5c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     c5c:	b500      	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     c5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c60:	b083      	sub	sp, #12
     c62:	f88d 1007 	strb.w	r1, [sp, #7]
     c66:	b143      	cbz	r3, c7a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     c68:	2201      	movs	r2, #1
     c6a:	f10d 0107 	add.w	r1, sp, #7
     c6e:	4618      	mov	r0, r3
     c70:	f003 f804 	bl	3c7c <FatFile::write(void const*, unsigned int)>
     c74:	b003      	add	sp, #12
     c76:	f85d fb04 	ldr.w	pc, [sp], #4
     c7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     c7c:	2800      	cmp	r0, #0
     c7e:	d0f9      	beq.n	c74 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c80:	2201      	movs	r2, #1
     c82:	f10d 0107 	add.w	r1, sp, #7
     c86:	f001 ff5d 	bl	2b44 <ExFatFile::write(void const*, unsigned int)>
     c8a:	b003      	add	sp, #12
     c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c90 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     c90:	b538      	push	{r3, r4, r5, lr}
     c92:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c94:	b149      	cbz	r1, caa <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     c96:	4608      	mov	r0, r1
     c98:	460d      	mov	r5, r1
     c9a:	f00b fa71 	bl	c180 <strlen>
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	4602      	mov	r2, r0
     ca2:	4629      	mov	r1, r5
     ca4:	685b      	ldr	r3, [r3, #4]
     ca6:	4620      	mov	r0, r4
     ca8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     caa:	4620      	mov	r0, r4
     cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cb0:	f006 be78 	b.w	79a4 <Print::println()>

00000cb4 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cb4:	4b26      	ldr	r3, [pc, #152]	; (d50 <filing_init()+0x9c>)
     cb6:	4a27      	ldr	r2, [pc, #156]	; (d54 <filing_init()+0xa0>)
     cb8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
     cbc:	4926      	ldr	r1, [pc, #152]	; (d58 <filing_init()+0xa4>)
     cbe:	4827      	ldr	r0, [pc, #156]	; (d5c <filing_init()+0xa8>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
     cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     cc8:	4f25      	ldr	r7, [pc, #148]	; (d60 <filing_init()+0xac>)
     cca:	b082      	sub	sp, #8
  FsDateTime::callback = dateTime;
     ccc:	2505      	movs	r5, #5
     cce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d74 <filing_init()+0xc0>
     cd2:	f207 468c 	addw	r6, r7, #1164	; 0x48c
     cd6:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     cd8:	6013      	str	r3, [r2, #0]
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     cda:	f04f 0100 	mov.w	r1, #0
     cde:	4630      	mov	r0, r6
     ce0:	f005 fb72 	bl	63c8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     ce4:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     ce6:	f8c7 6488 	str.w	r6, [r7, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     cea:	f004 fedf 	bl	5aac <SdioCard::errorCode() const>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cee:	2301      	movs	r3, #1
    return m_card && !m_card->errorCode();
     cf0:	4604      	mov	r4, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf2:	4638      	mov	r0, r7
     cf4:	461a      	mov	r2, r3
    return m_card && !m_card->errorCode();
     cf6:	b99c      	cbnz	r4, d20 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cf8:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
     cfc:	9400      	str	r4, [sp, #0]
     cfe:	f003 fed1 	bl	4aa4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
     d02:	b168      	cbz	r0, d20 <filing_init()+0x6c>
     d04:	2111      	movs	r1, #17
     d06:	4817      	ldr	r0, [pc, #92]	; (d64 <filing_init()+0xb0>)
     d08:	f008 fbdc 	bl	94c4 <usb_serial_write>
     d0c:	4816      	ldr	r0, [pc, #88]	; (d68 <filing_init()+0xb4>)
     d0e:	f006 fe49 	bl	79a4 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     d12:	2301      	movs	r3, #1
     d14:	4a15      	ldr	r2, [pc, #84]	; (d6c <filing_init()+0xb8>)
      return 1;
     d16:	4618      	mov	r0, r3
      haveStore=1;
     d18:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     d1a:	b002      	add	sp, #8
     d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d20:	210f      	movs	r1, #15
     d22:	4640      	mov	r0, r8
     d24:	f008 fbce 	bl	94c4 <usb_serial_write>
     d28:	480f      	ldr	r0, [pc, #60]	; (d68 <filing_init()+0xb4>)
     d2a:	f006 fe3b 	bl	79a4 <Print::println()>
      delay(100);
     d2e:	2064      	movs	r0, #100	; 0x64
     d30:	f007 f8e8 	bl	7f04 <delay>
  for(int ii=0; ii<5;ii++)
     d34:	3d01      	subs	r5, #1
     d36:	d1d0      	bne.n	cda <filing_init()+0x26>
     d38:	211b      	movs	r1, #27
     d3a:	480d      	ldr	r0, [pc, #52]	; (d70 <filing_init()+0xbc>)
     d3c:	f008 fbc2 	bl	94c4 <usb_serial_write>
     d40:	4809      	ldr	r0, [pc, #36]	; (d68 <filing_init()+0xb4>)
     d42:	f006 fe2f 	bl	79a4 <Print::println()>
  return 0;
     d46:	4628      	mov	r0, r5
}
     d48:	b002      	add	sp, #8
     d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d4e:	bf00      	nop
     d50:	401f4400 	.word	0x401f4400
     d54:	2000c178 	.word	0x2000c178
     d58:	2002886c 	.word	0x2002886c
     d5c:	00000b01 	.word	0x00000b01
     d60:	20028fa0 	.word	0x20028fa0
     d64:	200003cc 	.word	0x200003cc
     d68:	200085d4 	.word	0x200085d4
     d6c:	20028ea0 	.word	0x20028ea0
     d70:	200003f0 	.word	0x200003f0
     d74:	200003e0 	.word	0x200003e0

00000d78 <timeStamp()>:

char * timeStamp(void)
{
     d78:	b510      	push	{r4, lr}
     d7a:	b086      	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d7c:	4c0d      	ldr	r4, [pc, #52]	; (db4 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
     d7e:	a804      	add	r0, sp, #16
     d80:	f000 fe24 	bl	19cc <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d84:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     d88:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     d8c:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     d90:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     d94:	e9cd 3202 	strd	r3, r2, [sp, #8]
     d98:	e9cd 1000 	strd	r1, r0, [sp]
     d9c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     da0:	4620      	mov	r0, r4
     da2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     da6:	4904      	ldr	r1, [pc, #16]	; (db8 <timeStamp()+0x40>)
     da8:	f00a fcba 	bl	b720 <sprintf>
  return date_time;
}
     dac:	4620      	mov	r0, r4
     dae:	b006      	add	sp, #24
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	200288c4 	.word	0x200288c4
     db8:	20000558 	.word	0x20000558

00000dbc <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
     dbc:	2a00      	cmp	r2, #0
{
     dbe:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
     dc0:	bfb4      	ite	lt
     dc2:	1dd5      	addlt	r5, r2, #7
     dc4:	4615      	movge	r5, r2

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
     dc6:	4c22      	ldr	r4, [pc, #136]	; (e50 <headerInit(long, long, long, int)+0x94>)
{
     dc8:	b083      	sub	sp, #12
  int nbytes=nbits/8;
     dca:	10ed      	asrs	r5, r5, #3
  strcpy(wav_hdr.rId,"RIFF");
     dcc:	9301      	str	r3, [sp, #4]
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
     dce:	61a0      	str	r0, [r4, #24]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
     dd0:	fb11 fc05 	smulbb	ip, r1, r5
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
     dd4:	4b1f      	ldr	r3, [pc, #124]	; (e54 <headerInit(long, long, long, int)+0x98>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     dd6:	fb05 f000 	mul.w	r0, r5, r0
  wav_hdr.nBitsPerSamples=nbits;
     dda:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     ddc:	fb01 f500 	mul.w	r5, r1, r0
  wav_hdr.nBlockAlign=nchan*nbytes;
     de0:	f8a4 c020 	strh.w	ip, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     de4:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
     de6:	e893 0003 	ldmia.w	r3, {r0, r1}
  strcpy(wav_hdr.wId,"WAVE");
     dea:	4b1b      	ldr	r3, [pc, #108]	; (e58 <headerInit(long, long, long, int)+0x9c>)
  strcpy(&wav_hdr.info[0], MAGIC);
     dec:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  strcpy(wav_hdr.wId,"WAVE");
     df0:	60a3      	str	r3, [r4, #8]
  strcpy(wav_hdr.dId,"data");
     df2:	4b1a      	ldr	r3, [pc, #104]	; (e5c <headerInit(long, long, long, int)+0xa0>)
  strcpy(wav_hdr.rId,"RIFF");
     df4:	491a      	ldr	r1, [pc, #104]	; (e60 <headerInit(long, long, long, int)+0xa4>)
  strcpy(wav_hdr.dId,"data");
     df6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
     dfa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(&wav_hdr.info[0], MAGIC);
     dfe:	62e0      	str	r0, [r4, #44]	; 0x2c
  strcpy(wav_hdr.rId,"RIFF");
     e00:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
     e02:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
     e04:	2300      	movs	r3, #0
  strcpy(wav_hdr.fId,"fmt ");
     e06:	4817      	ldr	r0, [pc, #92]	; (e64 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");
     e08:	4917      	ldr	r1, [pc, #92]	; (e68 <headerInit(long, long, long, int)+0xac>)
  strcpy(wav_hdr.fId,"fmt ");
     e0a:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
     e0c:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  strcpy(wav_hdr.iId,"info");
     e10:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
     e12:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
     e14:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
     e18:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  wav_hdr.iLen = 512 - 13*4;
     e1c:	62a0      	str	r0, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
     e1e:	e9c4 1304 	strd	r1, r3, [r4, #16]
  strcpy(&wav_hdr.info[4], timeStamp());
     e22:	f7ff ffa9 	bl	d78 <timeStamp()>
     e26:	4601      	mov	r1, r0
     e28:	f104 0030 	add.w	r0, r4, #48	; 0x30
     e2c:	f00b f8f6 	bl	c01c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
     e30:	9a01      	ldr	r2, [sp, #4]
     e32:	490e      	ldr	r1, [pc, #56]	; (e6c <headerInit(long, long, long, int)+0xb0>)
     e34:	f104 0040 	add.w	r0, r4, #64	; 0x40
     e38:	f00a fc72 	bl	b720 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
     e3c:	4b0c      	ldr	r3, [pc, #48]	; (e70 <headerInit(long, long, long, int)+0xb4>)
     e3e:	6818      	ldr	r0, [r3, #0]
     e40:	791b      	ldrb	r3, [r3, #4]
     e42:	f8c4 004a 	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
     e46:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[30]," end");
     e48:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     e4c:	b003      	add	sp, #12
     e4e:	bd30      	pop	{r4, r5, pc}
     e50:	20028414 	.word	0x20028414
     e54:	20000398 	.word	0x20000398
     e58:	45564157 	.word	0x45564157
     e5c:	61746164 	.word	0x61746164
     e60:	46464952 	.word	0x46464952
     e64:	20746d66 	.word	0x20746d66
     e68:	6f666e69 	.word	0x6f666e69
     e6c:	200003a0 	.word	0x200003a0
     e70:	200003a8 	.word	0x200003a8

00000e74 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
     e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile   ? m_fFile->curPosition()
     e78:	4c1f      	ldr	r4, [pc, #124]	; (ef8 <writeHeader(char*)+0x84>)
     e7a:	4607      	mov	r7, r0
     e7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e7e:	b333      	cbz	r3, ece <writeHeader(char*)+0x5a>
  bool createContiguous(const char* path, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }

  /** \return The current position for a file or directory. */
  uint32_t curPosition() const { return m_curPosition; }
     e80:	695d      	ldr	r5, [r3, #20]
     e82:	462e      	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
     e84:	462a      	mov	r2, r5
     e86:	491d      	ldr	r1, [pc, #116]	; (efc <writeHeader(char*)+0x88>)
     e88:	481d      	ldr	r0, [pc, #116]	; (f00 <writeHeader(char*)+0x8c>)
     e8a:	f006 fda7 	bl	79dc <Print::printf(char const*, ...)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     e8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e90:	b1c8      	cbz	r0, ec6 <writeHeader(char*)+0x52>
     e92:	2100      	movs	r1, #0
     e94:	f002 fe1e 	bl	3ad4 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->write(buf, count)
     e98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e9a:	b160      	cbz	r0, eb6 <writeHeader(char*)+0x42>
     e9c:	4639      	mov	r1, r7
     e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
     ea2:	f002 feeb 	bl	3c7c <FatFile::write(void const*, unsigned int)>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ea8:	b1db      	cbz	r3, ee2 <writeHeader(char*)+0x6e>
     eaa:	4629      	mov	r1, r5
     eac:	4618      	mov	r0, r3
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
     eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eb2:	f002 be0f 	b.w	3ad4 <FatFile::seekSet(unsigned long)>
     eb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     eb8:	b138      	cbz	r0, eca <writeHeader(char*)+0x56>
     eba:	4639      	mov	r1, r7
     ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
     ec0:	f001 fe40 	bl	2b44 <ExFatFile::write(void const*, unsigned int)>
     ec4:	e7ef      	b.n	ea6 <writeHeader(char*)+0x32>
     ec6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->seekSet(pos)
     ec8:	b930      	cbnz	r0, ed8 <writeHeader(char*)+0x64>
     eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ece:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
     ed0:	b17e      	cbz	r6, ef2 <writeHeader(char*)+0x7e>
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const { return m_curPosition; }
     ed2:	6835      	ldr	r5, [r6, #0]
     ed4:	462e      	mov	r6, r5
     ed6:	e7d5      	b.n	e84 <writeHeader(char*)+0x10>
           : m_xFile ? m_xFile->seekSet(pos)
     ed8:	2200      	movs	r2, #0
     eda:	2300      	movs	r3, #0
     edc:	f001 f8dc 	bl	2098 <ExFatFile::seekSet(unsigned long long)>
     ee0:	e7da      	b.n	e98 <writeHeader(char*)+0x24>
     ee2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     ee4:	2800      	cmp	r0, #0
     ee6:	d0f0      	beq.n	eca <writeHeader(char*)+0x56>
     ee8:	4632      	mov	r2, r6
     eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     eee:	f001 b8d3 	b.w	2098 <ExFatFile::seekSet(unsigned long long)>
     ef2:	4635      	mov	r5, r6
     ef4:	e7c6      	b.n	e84 <writeHeader(char*)+0x10>
     ef6:	bf00      	nop
     ef8:	20028e50 	.word	0x20028e50
     efc:	20000438 	.word	0x20000438
     f00:	200085d4 	.word	0x200085d4

00000f04 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
     f04:	b530      	push	{r4, r5, lr}
     f06:	b089      	sub	sp, #36	; 0x24
     f08:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     f0a:	4d1d      	ldr	r5, [pc, #116]	; (f80 <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     f0c:	a806      	add	r0, sp, #24
     f0e:	f000 fd5d 	bl	19cc <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     f12:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     f16:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     f1a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     f1e:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     f22:	e9cd 3003 	strd	r3, r0, [sp, #12]
     f26:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     f2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     f2e:	9000      	str	r0, [sp, #0]
     f30:	4620      	mov	r0, r4
     f32:	e9cd 2101 	strd	r2, r1, [sp, #4]
     f36:	4a13      	ldr	r2, [pc, #76]	; (f84 <makeHeader(long*)+0x80>)
     f38:	4913      	ldr	r1, [pc, #76]	; (f88 <makeHeader(long*)+0x84>)
     f3a:	f00a fbf1 	bl	b720 <sprintf>
    header[10] = t_on;
     f3e:	4b13      	ldr	r3, [pc, #76]	; (f8c <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     f40:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     f42:	2001      	movs	r0, #1
    header[10] = t_on;
     f44:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     f46:	4a12      	ldr	r2, [pc, #72]	; (f90 <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     f48:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     f4a:	4b12      	ldr	r3, [pc, #72]	; (f94 <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     f4c:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     f4e:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     f50:	4911      	ldr	r1, [pc, #68]	; (f98 <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     f52:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     f54:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     f56:	4a11      	ldr	r2, [pc, #68]	; (f9c <makeHeader(long*)+0x98>)
    header[11] = t_off;
     f58:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     f5a:	4b11      	ldr	r3, [pc, #68]	; (fa0 <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     f5c:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     f5e:	2514      	movs	r5, #20
    header[13] = shift;
     f60:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     f64:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     f66:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     f6a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     f6e:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     f70:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     f72:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     f74:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     f78:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     f7a:	b009      	add	sp, #36	; 0x24
     f7c:	bd30      	pop	{r4, r5, pc}
     f7e:	bf00      	nop
     f80:	20008bd4 	.word	0x20008bd4
     f84:	20000398 	.word	0x20000398
     f88:	200003b0 	.word	0x200003b0
     f8c:	20008bd8 	.word	0x20008bd8
     f90:	2000c178 	.word	0x2000c178
     f94:	20029464 	.word	0x20029464
     f98:	20008b94 	.word	0x20008b94
     f9c:	20029490 	.word	0x20029490
     fa0:	20029494 	.word	0x20029494

00000fa4 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     fa4:	b530      	push	{r4, r5, lr}
     fa6:	b087      	sub	sp, #28
     fa8:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     faa:	a804      	add	r0, sp, #16
     fac:	f000 fd0e 	bl	19cc <rtc_get_datetime(datetime_t*)>

    if(t_acq<600)
     fb0:	4b23      	ldr	r3, [pc, #140]	; (1040 <newDirectory(char*)+0x9c>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
     fb8:	d218      	bcs.n	fec <newDirectory(char*)+0x48>
  if(h==ho) return 0;
     fba:	4922      	ldr	r1, [pc, #136]	; (1044 <newDirectory(char*)+0xa0>)
    {
      if(newFolder(t.hour))
     fbc:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     fc0:	680b      	ldr	r3, [r1, #0]
     fc2:	429a      	cmp	r2, r3
     fc4:	d038      	beq.n	1038 <newDirectory(char*)+0x94>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fc6:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     fca:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     fce:	4b1e      	ldr	r3, [pc, #120]	; (1048 <newDirectory(char*)+0xa4>)
     fd0:	e9cd 5202 	strd	r5, r2, [sp, #8]
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	9001      	str	r0, [sp, #4]
     fd8:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     fdc:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fde:	9000      	str	r0, [sp, #0]
     fe0:	4620      	mov	r0, r4
     fe2:	4a1a      	ldr	r2, [pc, #104]	; (104c <newDirectory(char*)+0xa8>)
     fe4:	491a      	ldr	r1, [pc, #104]	; (1050 <newDirectory(char*)+0xac>)
     fe6:	f00a fb9b 	bl	b720 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
     fea:	e014      	b.n	1016 <newDirectory(char*)+0x72>
  if(h==ho) return 0;
     fec:	4815      	ldr	r0, [pc, #84]	; (1044 <newDirectory(char*)+0xa0>)
          return 1;   // have new directory
      }
    }
    else
    {
      if(newFolder(t.day))
     fee:	f99d 1013 	ldrsb.w	r1, [sp, #19]
  if(h==ho) return 0;
     ff2:	6803      	ldr	r3, [r0, #0]
     ff4:	4299      	cmp	r1, r3
     ff6:	d01f      	beq.n	1038 <newDirectory(char*)+0x94>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
     ff8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     ffc:	f99d 5012 	ldrsb.w	r5, [sp, #18]
    1000:	4b11      	ldr	r3, [pc, #68]	; (1048 <newDirectory(char*)+0xa4>)
    1002:	e9cd 5101 	strd	r5, r1, [sp, #4]
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	9200      	str	r2, [sp, #0]
  ho=h;
    100a:	6001      	str	r1, [r0, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
    100c:	4620      	mov	r0, r4
    100e:	4a0f      	ldr	r2, [pc, #60]	; (104c <newDirectory(char*)+0xa8>)
    1010:	4910      	ldr	r1, [pc, #64]	; (1054 <newDirectory(char*)+0xb0>)
    1012:	f00a fb85 	bl	b720 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    1016:	4810      	ldr	r0, [pc, #64]	; (1058 <newDirectory(char*)+0xb4>)
    1018:	f006 fcc4 	bl	79a4 <Print::println()>
    101c:	2102      	movs	r1, #2
    101e:	480f      	ldr	r0, [pc, #60]	; (105c <newDirectory(char*)+0xb8>)
    1020:	f008 fa50 	bl	94c4 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1024:	4620      	mov	r0, r4
    1026:	f00b f8ab 	bl	c180 <strlen>
    102a:	4601      	mov	r1, r0
    102c:	4620      	mov	r0, r4
    102e:	f008 fa49 	bl	94c4 <usb_serial_write>
          return 1;   // have new directory
    1032:	2001      	movs	r0, #1
      }
    }
    return 0;       // keep old directory

}
    1034:	b007      	add	sp, #28
    1036:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    1038:	2000      	movs	r0, #0
}
    103a:	b007      	add	sp, #28
    103c:	bd30      	pop	{r4, r5, pc}
    103e:	bf00      	nop
    1040:	20008bd4 	.word	0x20008bd4
    1044:	200085e4 	.word	0x200085e4
    1048:	2000c178 	.word	0x2000c178
    104c:	20000444 	.word	0x20000444
    1050:	20000448 	.word	0x20000448
    1054:	20000468 	.word	0x20000468
    1058:	200085d4 	.word	0x200085d4
    105c:	20000464 	.word	0x20000464

00001060 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1060:	b510      	push	{r4, lr}
    1062:	b084      	sub	sp, #16
    1064:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1066:	a802      	add	r0, sp, #8
    1068:	f000 fcb0 	bl	19cc <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    106c:	4b15      	ldr	r3, [pc, #84]	; (10c4 <newFileName(char*)+0x64>)
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    106e:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    if(proc==0)
    1072:	f9b3 3000 	ldrsh.w	r3, [r3]
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    1076:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    if(proc==0)
    107a:	b9cb      	cbnz	r3, 10b0 <newFileName(char*)+0x50>
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    107c:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    1080:	4a11      	ldr	r2, [pc, #68]	; (10c8 <newFileName(char*)+0x68>)
    1082:	e9cd 1000 	strd	r1, r0, [sp]
    1086:	4911      	ldr	r1, [pc, #68]	; (10cc <newFileName(char*)+0x6c>)
    1088:	4620      	mov	r0, r4
    108a:	f00a fb49 	bl	b720 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    108e:	4810      	ldr	r0, [pc, #64]	; (10d0 <newFileName(char*)+0x70>)
    1090:	f006 fc88 	bl	79a4 <Print::println()>
    1094:	2102      	movs	r1, #2
    1096:	480f      	ldr	r0, [pc, #60]	; (10d4 <newFileName(char*)+0x74>)
    1098:	f008 fa14 	bl	94c4 <usb_serial_write>
    109c:	4620      	mov	r0, r4
    109e:	f00b f86f 	bl	c180 <strlen>
    10a2:	4601      	mov	r1, r0
    10a4:	4620      	mov	r0, r4
    10a6:	f008 fa0d 	bl	94c4 <usb_serial_write>
    return 1;
}
    10aa:	2001      	movs	r0, #1
    10ac:	b004      	add	sp, #16
    10ae:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    10b0:	e9cd 1000 	strd	r1, r0, [sp]
    10b4:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    10b8:	4620      	mov	r0, r4
    10ba:	4a03      	ldr	r2, [pc, #12]	; (10c8 <newFileName(char*)+0x68>)
    10bc:	4906      	ldr	r1, [pc, #24]	; (10d8 <newFileName(char*)+0x78>)
    10be:	f00a fb2f 	bl	b720 <sprintf>
    10c2:	e7e4      	b.n	108e <newFileName(char*)+0x2e>
    10c4:	20029490 	.word	0x20029490
    10c8:	2000040c 	.word	0x2000040c
    10cc:	20000410 	.word	0x20000410
    10d0:	200085d4 	.word	0x200085d4
    10d4:	20000464 	.word	0x20000464
    10d8:	20000424 	.word	0x20000424

000010dc <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    10de:	4604      	mov	r4, r0
{
    10e0:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    10e2:	2800      	cmp	r0, #0
    10e4:	d04a      	beq.n	117c <storeData(short)+0xa0>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    10e6:	2801      	cmp	r0, #1
    10e8:	d00a      	beq.n	1100 <storeData(short)+0x24>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    10ea:	2802      	cmp	r0, #2
    10ec:	f000 80c9 	beq.w	1282 <storeData(short)+0x1a6>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    10f0:	1ec3      	subs	r3, r0, #3
    10f2:	b29b      	uxth	r3, r3
    10f4:	2b01      	cmp	r3, #1
    10f6:	f240 8144 	bls.w	1382 <storeData(short)+0x2a6>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    10fa:	4620      	mov	r0, r4
    10fc:	b014      	add	sp, #80	; 0x50
    10fe:	bd70      	pop	{r4, r5, r6, pc}
    1100:	4dad      	ldr	r5, [pc, #692]	; (13b8 <storeData(short)+0x2dc>)
        if(proc==0)
    1102:	4bae      	ldr	r3, [pc, #696]	; (13bc <storeData(short)+0x2e0>)
    {   nbuf=0;
    1104:	2200      	movs	r2, #0
    1106:	4eae      	ldr	r6, [pc, #696]	; (13c0 <storeData(short)+0x2e4>)
        if(proc==0)
    1108:	f9b3 3000 	ldrsh.w	r3, [r3]
    {   nbuf=0;
    110c:	6032      	str	r2, [r6, #0]
        if(proc==0)
    110e:	2b00      	cmp	r3, #0
    1110:	f040 8084 	bne.w	121c <storeData(short)+0x140>
          hdr = headerInit(fsamp, NCH, NBITS, SerNum);
    1114:	49ab      	ldr	r1, [pc, #684]	; (13c4 <storeData(short)+0x2e8>)
    1116:	2220      	movs	r2, #32
    1118:	4bab      	ldr	r3, [pc, #684]	; (13c8 <storeData(short)+0x2ec>)
    111a:	6808      	ldr	r0, [r1, #0]
    111c:	2101      	movs	r1, #1
    111e:	681b      	ldr	r3, [r3, #0]
    1120:	f7ff fe4c 	bl	dbc <headerInit(long, long, long, int)>
    1124:	4601      	mov	r1, r0
    return m_fFile   ? m_fFile->write(buf, count)
    1126:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1128:	2800      	cmp	r0, #0
    112a:	d07e      	beq.n	122a <storeData(short)+0x14e>
    112c:	f44f 7200 	mov.w	r2, #512	; 0x200
    1130:	f002 fda4 	bl	3c7c <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1134:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1138:	f0c0 8083 	bcc.w	1242 <storeData(short)+0x166>
    113c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    113e:	2800      	cmp	r0, #0
    1140:	f000 8096 	beq.w	1270 <storeData(short)+0x194>
    1144:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    1148:	49a0      	ldr	r1, [pc, #640]	; (13cc <storeData(short)+0x2f0>)
    114a:	f002 fd97 	bl	3c7c <FatFile::write(void const*, unsigned int)>
    114e:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1150:	f5b4 5fc0 	cmp.w	r4, #6144	; 0x1800
    1154:	f0c0 8099 	bcc.w	128a <storeData(short)+0x1ae>
        disk_count++;
    1158:	499d      	ldr	r1, [pc, #628]	; (13d0 <storeData(short)+0x2f4>)
          nbuf++;
    115a:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    115c:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    115e:	3301      	adds	r3, #1
        disk_count++;
    1160:	3201      	adds	r2, #1
          nbuf++;
    1162:	6033      	str	r3, [r6, #0]
        disk_count++;
    1164:	600a      	str	r2, [r1, #0]
    1166:	499b      	ldr	r1, [pc, #620]	; (13d4 <storeData(short)+0x2f8>)
        if((nbuf % 1000)==0 ) file.flush();
    1168:	4a9b      	ldr	r2, [pc, #620]	; (13d8 <storeData(short)+0x2fc>)
        disk_count++;
    116a:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    116e:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    1172:	d275      	bcs.n	1260 <storeData(short)+0x184>
    1174:	2402      	movs	r4, #2
}
    1176:	4620      	mov	r0, r4
    1178:	b014      	add	sp, #80	; 0x50
    117a:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    117c:	4897      	ldr	r0, [pc, #604]	; (13dc <storeData(short)+0x300>)
    117e:	f7ff ff11 	bl	fa4 <newDirectory(char*)>
    1182:	b1d8      	cbz	r0, 11bc <storeData(short)+0xe0>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    1184:	4d96      	ldr	r5, [pc, #600]	; (13e0 <storeData(short)+0x304>)
    1186:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    118a:	2a00      	cmp	r2, #0
    118c:	f000 80bb 	beq.w	1306 <storeData(short)+0x22a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1190:	466e      	mov	r6, sp
    1192:	4611      	mov	r1, r2
    1194:	4623      	mov	r3, r4
    1196:	4a91      	ldr	r2, [pc, #580]	; (13dc <storeData(short)+0x300>)
    1198:	4630      	mov	r0, r6
  FatFile() {}
    119a:	9400      	str	r4, [sp, #0]
    119c:	f002 fb6c 	bl	3878 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    11a0:	2800      	cmp	r0, #0
    11a2:	f000 80bd 	beq.w	1320 <storeData(short)+0x244>
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    11a6:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    11aa:	2800      	cmp	r0, #0
    11ac:	f000 80cf 	beq.w	134e <storeData(short)+0x272>
    11b0:	498a      	ldr	r1, [pc, #552]	; (13dc <storeData(short)+0x300>)
    11b2:	f003 fb97 	bl	48e4 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    11b6:	2800      	cmp	r0, #0
    11b8:	f000 80d2 	beq.w	1360 <storeData(short)+0x284>
        if(newFileName(fileName))
    11bc:	4889      	ldr	r0, [pc, #548]	; (13e4 <storeData(short)+0x308>)
    11be:	f7ff ff4f 	bl	1060 <newFileName(char*)>
    11c2:	2800      	cmp	r0, #0
    11c4:	f000 80f5 	beq.w	13b2 <storeData(short)+0x2d6>
            file = sd.open(fileName, FILE_WRITE); 
    11c8:	f244 2302 	movw	r3, #16898	; 0x4202
    11cc:	4a85      	ldr	r2, [pc, #532]	; (13e4 <storeData(short)+0x308>)
    11ce:	4984      	ldr	r1, [pc, #528]	; (13e0 <storeData(short)+0x304>)
    11d0:	4668      	mov	r0, sp
    11d2:	f003 fcf1 	bl	4bb8 <FsVolume::open(char const*, int)>
class Print
    11d6:	4d78      	ldr	r5, [pc, #480]	; (13b8 <storeData(short)+0x2dc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    11dc:	f105 0010 	add.w	r0, r5, #16
    11e0:	732b      	strb	r3, [r5, #12]
    11e2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    11e6:	e9c5 1201 	strd	r1, r2, [r5, #4]
    11ea:	a904      	add	r1, sp, #16
    11ec:	f003 fba2 	bl	4934 <FsBaseFile::operator=(FsBaseFile const&)>
    11f0:	4b7d      	ldr	r3, [pc, #500]	; (13e8 <storeData(short)+0x30c>)
  ~FsBaseFile() { close(); }
    11f2:	a804      	add	r0, sp, #16
    11f4:	9300      	str	r3, [sp, #0]
    11f6:	f003 fbeb 	bl	49d0 <FsBaseFile::close()>
  bool isOpen() const { return m_fFile || m_xFile; }
    11fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
    11fc:	2b00      	cmp	r3, #0
    11fe:	d180      	bne.n	1102 <storeData(short)+0x26>
    1200:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1202:	2b00      	cmp	r3, #0
    1204:	f47f af7d 	bne.w	1102 <storeData(short)+0x26>
    1208:	2111      	movs	r1, #17
    120a:	4878      	ldr	r0, [pc, #480]	; (13ec <storeData(short)+0x310>)
    120c:	f008 f95a 	bl	94c4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1210:	4877      	ldr	r0, [pc, #476]	; (13f0 <storeData(short)+0x314>)
                return STOPPED; 
    1212:	f04f 34ff 	mov.w	r4, #4294967295
    1216:	f006 fbc5 	bl	79a4 <Print::println()>
    121a:	e76e      	b.n	10fa <storeData(short)+0x1e>
          makeHeader(fileHeader);
    121c:	4875      	ldr	r0, [pc, #468]	; (13f4 <storeData(short)+0x318>)
    121e:	f7ff fe71 	bl	f04 <makeHeader(long*)>
    return m_fFile   ? m_fFile->write(buf, count)
    1222:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    1224:	4973      	ldr	r1, [pc, #460]	; (13f4 <storeData(short)+0x318>)
    1226:	2800      	cmp	r0, #0
    1228:	d180      	bne.n	112c <storeData(short)+0x50>
    122a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    122c:	2800      	cmp	r0, #0
    122e:	f000 809e 	beq.w	136e <storeData(short)+0x292>
    1232:	f44f 7200 	mov.w	r2, #512	; 0x200
    1236:	f001 fc85 	bl	2b44 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    123a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    123e:	f4bf af7d 	bcs.w	113c <storeData(short)+0x60>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1242:	2400      	movs	r4, #0
  bool isOpen() const { return m_fFile || m_xFile; }
    1244:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1246:	2b00      	cmp	r3, #0
    1248:	d059      	beq.n	12fe <storeData(short)+0x222>
        {   if(proc==0)
    124a:	4b5c      	ldr	r3, [pc, #368]	; (13bc <storeData(short)+0x2e0>)
    124c:	f9b3 3000 	ldrsh.w	r3, [r3]
    1250:	2b00      	cmp	r3, #0
    1252:	d046      	beq.n	12e2 <storeData(short)+0x206>
            file.close();
    1254:	4868      	ldr	r0, [pc, #416]	; (13f8 <storeData(short)+0x31c>)
    1256:	f003 fbbb 	bl	49d0 <FsBaseFile::close()>
}
    125a:	4620      	mov	r0, r4
    125c:	b014      	add	sp, #80	; 0x50
    125e:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1260:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1262:	2800      	cmp	r0, #0
    1264:	f000 8085 	beq.w	1372 <storeData(short)+0x296>
    1268:	2402      	movs	r4, #2
    126a:	f002 fd01 	bl	3c70 <FatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    126e:	e744      	b.n	10fa <storeData(short)+0x1e>
    1270:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
    1272:	b148      	cbz	r0, 1288 <storeData(short)+0x1ac>
    1274:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    1278:	4954      	ldr	r1, [pc, #336]	; (13cc <storeData(short)+0x2f0>)
    127a:	f001 fc63 	bl	2b44 <ExFatFile::write(void const*, unsigned int)>
    127e:	4604      	mov	r4, r0
    1280:	e766      	b.n	1150 <storeData(short)+0x74>
    1282:	4d4d      	ldr	r5, [pc, #308]	; (13b8 <storeData(short)+0x2dc>)
    1284:	4e4e      	ldr	r6, [pc, #312]	; (13c0 <storeData(short)+0x2e4>)
    1286:	e759      	b.n	113c <storeData(short)+0x60>
    1288:	4604      	mov	r4, r0
    128a:	2101      	movs	r1, #1
    128c:	485b      	ldr	r0, [pc, #364]	; (13fc <storeData(short)+0x320>)
    128e:	f008 f919 	bl	94c4 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1292:	2300      	movs	r3, #0
    1294:	220a      	movs	r2, #10
    1296:	4621      	mov	r1, r4
    1298:	4855      	ldr	r0, [pc, #340]	; (13f0 <storeData(short)+0x314>)
    129a:	f006 fbad 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    129e:	2101      	movs	r1, #1
    12a0:	4857      	ldr	r0, [pc, #348]	; (1400 <storeData(short)+0x324>)
    12a2:	f008 f90f 	bl	94c4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    12a6:	2102      	movs	r1, #2
    12a8:	4851      	ldr	r0, [pc, #324]	; (13f0 <storeData(short)+0x314>)
    12aa:	f006 fb6f 	bl	798c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    12ae:	4850      	ldr	r0, [pc, #320]	; (13f0 <storeData(short)+0x314>)
    12b0:	f006 fb78 	bl	79a4 <Print::println()>
        disk_count++;
    12b4:	4946      	ldr	r1, [pc, #280]	; (13d0 <storeData(short)+0x2f4>)
    12b6:	4847      	ldr	r0, [pc, #284]	; (13d4 <storeData(short)+0x2f8>)
    12b8:	6833      	ldr	r3, [r6, #0]
    12ba:	680a      	ldr	r2, [r1, #0]
    12bc:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    12c0:	4845      	ldr	r0, [pc, #276]	; (13d8 <storeData(short)+0x2fc>)
        disk_count++;
    12c2:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    12c4:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    12c8:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    12ca:	d3ba      	bcc.n	1242 <storeData(short)+0x166>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    12cc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    12ce:	2800      	cmp	r0, #0
    12d0:	d059      	beq.n	1386 <storeData(short)+0x2aa>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    12d2:	2403      	movs	r4, #3
    12d4:	f002 fccc 	bl	3c70 <FatFile::sync()>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    12d8:	3c03      	subs	r4, #3
    12da:	bf18      	it	ne
    12dc:	f04f 34ff 	movne.w	r4, #4294967295
    12e0:	e7b0      	b.n	1244 <storeData(short)+0x168>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12e2:	4b37      	ldr	r3, [pc, #220]	; (13c0 <storeData(short)+0x2e4>)
  wav_hdr.dLen = nbytes;
    12e4:	4847      	ldr	r0, [pc, #284]	; (1404 <storeData(short)+0x328>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12e6:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    12e8:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    12ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    12ee:	02db      	lsls	r3, r3, #11
  wav_hdr.rLen += wav_hdr.dLen;
    12f0:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    12f2:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    12f6:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    12f8:	f7ff fdbc 	bl	e74 <writeHeader(char*)>
    12fc:	e7aa      	b.n	1254 <storeData(short)+0x178>
  bool isOpen() const { return m_fFile || m_xFile; }
    12fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1300:	2b00      	cmp	r3, #0
    1302:	d1a2      	bne.n	124a <storeData(short)+0x16e>
    1304:	e6f9      	b.n	10fa <storeData(short)+0x1e>
    1306:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->exists(path)
    130a:	b1c9      	cbz	r1, 1340 <storeData(short)+0x264>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    130c:	466e      	mov	r6, sp
    130e:	4613      	mov	r3, r2
  ExFatFile() {}
    1310:	920c      	str	r2, [sp, #48]	; 0x30
    1312:	4630      	mov	r0, r6
    1314:	4a31      	ldr	r2, [pc, #196]	; (13dc <storeData(short)+0x300>)
    1316:	f001 f993 	bl	2640 <ExFatFile::open(ExFatVolume*, char const*, int)>
    131a:	2800      	cmp	r0, #0
    131c:	f47f af43 	bne.w	11a6 <storeData(short)+0xca>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    1320:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1324:	2a00      	cmp	r2, #0
    1326:	d035      	beq.n	1394 <storeData(short)+0x2b8>
    1328:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    132a:	f202 4144 	addw	r1, r2, #1092	; 0x444
    132e:	2301      	movs	r3, #1
    1330:	4630      	mov	r0, r6
    1332:	4a2a      	ldr	r2, [pc, #168]	; (13dc <storeData(short)+0x300>)
    1334:	9400      	str	r4, [sp, #0]
    1336:	f002 f9b1 	bl	369c <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    133a:	2800      	cmp	r0, #0
    133c:	f47f af33 	bne.w	11a6 <storeData(short)+0xca>
    1340:	4931      	ldr	r1, [pc, #196]	; (1408 <storeData(short)+0x32c>)
    1342:	f04f 34ff 	mov.w	r4, #4294967295
    1346:	482a      	ldr	r0, [pc, #168]	; (13f0 <storeData(short)+0x314>)
    1348:	f7ff fca2 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    134c:	e6d5      	b.n	10fa <storeData(short)+0x1e>
    134e:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    1352:	b128      	cbz	r0, 1360 <storeData(short)+0x284>
    1354:	4921      	ldr	r1, [pc, #132]	; (13dc <storeData(short)+0x300>)
    1356:	f001 fff7 	bl	3348 <ExFatVolume::chdir(char const*)>
    135a:	2800      	cmp	r0, #0
    135c:	f47f af2e 	bne.w	11bc <storeData(short)+0xe0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1360:	492a      	ldr	r1, [pc, #168]	; (140c <storeData(short)+0x330>)
    1362:	f04f 34ff 	mov.w	r4, #4294967295
    1366:	4822      	ldr	r0, [pc, #136]	; (13f0 <storeData(short)+0x314>)
    1368:	f7ff fc92 	bl	c90 <Print::println(char const*) [clone .isra.0]>
    136c:	e6c5      	b.n	10fa <storeData(short)+0x1e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    136e:	2400      	movs	r4, #0
    1370:	e6c3      	b.n	10fa <storeData(short)+0x1e>
    1372:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1374:	2402      	movs	r4, #2
    1376:	2800      	cmp	r0, #0
    1378:	f43f aebf 	beq.w	10fa <storeData(short)+0x1e>
    137c:	f001 fa4e 	bl	281c <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1380:	e6bb      	b.n	10fa <storeData(short)+0x1e>
    1382:	4d0d      	ldr	r5, [pc, #52]	; (13b8 <storeData(short)+0x2dc>)
    1384:	e7a8      	b.n	12d8 <storeData(short)+0x1fc>
    1386:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1388:	2800      	cmp	r0, #0
    138a:	d0f0      	beq.n	136e <storeData(short)+0x292>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    138c:	2403      	movs	r4, #3
    138e:	f001 fa45 	bl	281c <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1392:	e7a1      	b.n	12d8 <storeData(short)+0x1fc>
    1394:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    1398:	2900      	cmp	r1, #0
    139a:	d0d1      	beq.n	1340 <storeData(short)+0x264>
    139c:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    139e:	2301      	movs	r3, #1
    13a0:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    13a4:	4630      	mov	r0, r6
    13a6:	4a0d      	ldr	r2, [pc, #52]	; (13dc <storeData(short)+0x300>)
    13a8:	f001 faf0 	bl	298c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    13ac:	2800      	cmp	r0, #0
    13ae:	d0c7      	beq.n	1340 <storeData(short)+0x264>
    13b0:	e6f9      	b.n	11a6 <storeData(short)+0xca>
        {  return STOPPED; // if file open fails: don't do anything
    13b2:	f04f 34ff 	mov.w	r4, #4294967295
    13b6:	e6a0      	b.n	10fa <storeData(short)+0x1e>
    13b8:	20028e50 	.word	0x20028e50
    13bc:	20029490 	.word	0x20029490
    13c0:	20028ecc 	.word	0x20028ecc
    13c4:	20008b94 	.word	0x20008b94
    13c8:	2000c178 	.word	0x2000c178
    13cc:	2000c540 	.word	0x2000c540
    13d0:	20028e28 	.word	0x20028e28
    13d4:	26e978d5 	.word	0x26e978d5
    13d8:	00418937 	.word	0x00418937
    13dc:	200281c4 	.word	0x200281c4
    13e0:	20028fa0 	.word	0x20028fa0
    13e4:	20028614 	.word	0x20028614
    13e8:	200006f8 	.word	0x200006f8
    13ec:	20000540 	.word	0x20000540
    13f0:	200085d4 	.word	0x200085d4
    13f4:	2000dd40 	.word	0x2000dd40
    13f8:	20028e60 	.word	0x20028e60
    13fc:	20000554 	.word	0x20000554
    1400:	20000440 	.word	0x20000440
    1404:	20028414 	.word	0x20028414
    1408:	20000528 	.word	0x20000528
    140c:	20000534 	.word	0x20000534

00001410 <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1414:	4606      	mov	r6, r0
    if(status==STOPPED) 
    1416:	3001      	adds	r0, #1
    1418:	d071      	beq.n	14fe <saveData(short)+0xee>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    141a:	4b54      	ldr	r3, [pc, #336]	; (156c <saveData(short)+0x15c>)
    141c:	2208      	movs	r2, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    141e:	2e00      	cmp	r6, #0
    1420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1424:	db7f      	blt.n	1526 <saveData(short)+0x116>
  tx=rtc_get();
    1426:	f006 ff23 	bl	8270 <rtc_get>
  tx = tx % t_acq;
    142a:	4b51      	ldr	r3, [pc, #324]	; (1570 <saveData(short)+0x160>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    142c:	2e01      	cmp	r6, #1
  tx = tx % t_acq;
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	fbb0 f2f3 	udiv	r2, r0, r3
    1434:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1438:	4b4e      	ldr	r3, [pc, #312]	; (1574 <saveData(short)+0x164>)
    143a:	dd05      	ble.n	1448 <saveData(short)+0x38>
    143c:	681a      	ldr	r2, [r3, #0]
    143e:	b11a      	cbz	r2, 1448 <saveData(short)+0x38>
    1440:	681a      	ldr	r2, [r3, #0]
    1442:	4290      	cmp	r0, r2
    1444:	bf38      	it	cc
    1446:	2603      	movcc	r6, #3
  tx_=tx;
    1448:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    144a:	f000 f8fb 	bl	1644 <getDataCount()>
    144e:	280b      	cmp	r0, #11
    1450:	d96c      	bls.n	152c <saveData(short)+0x11c>
    { 
      //digitalWriteFast(13,HIGH);
      if(proc==0)
    1452:	4b49      	ldr	r3, [pc, #292]	; (1578 <saveData(short)+0x168>)
    1454:	f9b3 3000 	ldrsh.w	r3, [r3]
    1458:	2b00      	cmp	r3, #0
    145a:	d16e      	bne.n	153a <saveData(short)+0x12a>
    145c:	4d47      	ldr	r5, [pc, #284]	; (157c <saveData(short)+0x16c>)
    145e:	f505 58c0 	add.w	r8, r5, #6144	; 0x1800
    1462:	46a9      	mov	r9, r5
    1464:	462f      	mov	r7, r5
      { 
        if(NBITS==32)
        {
          for(int ii=0; ii<NDBL; ii++)
          { while(queue_isBusy()); //wait if acq writes to queue
    1466:	f000 f8fb 	bl	1660 <queue_isBusy()>
    146a:	4604      	mov	r4, r0
    146c:	2800      	cmp	r0, #0
    146e:	d1fa      	bne.n	1466 <saveData(short)+0x56>
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
    1470:	4638      	mov	r0, r7
          for(int ii=0; ii<NDBL; ii++)
    1472:	f507 7700 	add.w	r7, r7, #512	; 0x200
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
    1476:	f000 f93b 	bl	16f0 <pullData(unsigned long*)>
          for(int ii=0; ii<NDBL; ii++)
    147a:	4547      	cmp	r7, r8
    147c:	d1f3      	bne.n	1466 <saveData(short)+0x56>
          }
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
    147e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 15a4 <saveData(short)+0x194>
    1482:	f8d9 2000 	ldr.w	r2, [r9]
    1486:	4f3e      	ldr	r7, [pc, #248]	; (1580 <saveData(short)+0x170>)
    1488:	f8d8 3000 	ldr.w	r3, [r8]
    148c:	483d      	ldr	r0, [pc, #244]	; (1584 <saveData(short)+0x174>)
    148e:	46b9      	mov	r9, r7
    1490:	eba2 0c03 	sub.w	ip, r2, r3
    1494:	4639      	mov	r1, r7
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
    1496:	4613      	mov	r3, r2
    1498:	f855 2f04 	ldr.w	r2, [r5, #4]!
    149c:	1ad3      	subs	r3, r2, r3
    149e:	4285      	cmp	r5, r0
    14a0:	f841 3f04 	str.w	r3, [r1, #4]!
    14a4:	d1f7      	bne.n	1496 <saveData(short)+0x86>
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    14a6:	4b38      	ldr	r3, [pc, #224]	; (1588 <saveData(short)+0x178>)
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
    14a8:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 15a8 <saveData(short)+0x198>
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    14ac:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
    14b0:	4836      	ldr	r0, [pc, #216]	; (158c <saveData(short)+0x17c>)
    14b2:	f8c8 3000 	str.w	r3, [r8]
          diskBuffer[0]=diskBuffer[0]+data1;
    14b6:	f8de 3000 	ldr.w	r3, [lr]
    14ba:	eb0c 0503 	add.w	r5, ip, r3
    14be:	4b30      	ldr	r3, [pc, #192]	; (1580 <saveData(short)+0x170>)
    14c0:	462a      	mov	r2, r5
    14c2:	f8c9 5000 	str.w	r5, [r9]
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=diskBuffer[ii]+diskBuffer[ii-1];
    14c6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14ca:	440a      	add	r2, r1
    14cc:	4298      	cmp	r0, r3
    14ce:	601a      	str	r2, [r3, #0]
    14d0:	d1f9      	bne.n	14c6 <saveData(short)+0xb6>
          data1=diskBuffer[MAX_DISK_BUFFER-1];
    14d2:	4b2f      	ldr	r3, [pc, #188]	; (1590 <saveData(short)+0x180>)
    14d4:	4a2f      	ldr	r2, [pc, #188]	; (1594 <saveData(short)+0x184>)
    14d6:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
    14da:	f8ce 3000 	str.w	r3, [lr]
          
          #
          for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    14de:	e001      	b.n	14e4 <saveData(short)+0xd4>
    14e0:	f857 5f04 	ldr.w	r5, [r7, #4]!
    14e4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    14e8:	3401      	adds	r4, #1
    14ea:	2c08      	cmp	r4, #8
    14ec:	d1f8      	bne.n	14e0 <saveData(short)+0xd0>
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData(&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    14ee:	4b2a      	ldr	r3, [pc, #168]	; (1598 <saveData(short)+0x188>)
    14f0:	681b      	ldr	r3, [r3, #0]
    14f2:	b1c3      	cbz	r3, 1526 <saveData(short)+0x116>
        status=storeData(status);
    14f4:	4630      	mov	r0, r6
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    14f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        status=storeData(status);
    14fa:	f7ff bdef 	b.w	10dc <storeData(short)>
      while(queue_isBusy()); //wait if acq writes to queue
    14fe:	f000 f8af 	bl	1660 <queue_isBusy()>
    1502:	4604      	mov	r4, r0
    1504:	2800      	cmp	r0, #0
    1506:	d1fa      	bne.n	14fe <saveData(short)+0xee>
      pullData(tempBuffer);
    1508:	481c      	ldr	r0, [pc, #112]	; (157c <saveData(short)+0x16c>)
    150a:	f000 f8f1 	bl	16f0 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer[ii];
    150e:	4b23      	ldr	r3, [pc, #140]	; (159c <saveData(short)+0x18c>)
    1510:	4a20      	ldr	r2, [pc, #128]	; (1594 <saveData(short)+0x184>)
    1512:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1516:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    151a:	3401      	adds	r4, #1
    151c:	2c08      	cmp	r4, #8
    151e:	d1f8      	bne.n	1512 <saveData(short)+0x102>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1520:	4b12      	ldr	r3, [pc, #72]	; (156c <saveData(short)+0x15c>)
    1522:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
    1526:	4630      	mov	r0, r6
    1528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    152c:	4b0f      	ldr	r3, [pc, #60]	; (156c <saveData(short)+0x15c>)
    152e:	2208      	movs	r2, #8
    1530:	4630      	mov	r0, r6
    1532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    153a:	4d11      	ldr	r5, [pc, #68]	; (1580 <saveData(short)+0x170>)
    153c:	f505 57c0 	add.w	r7, r5, #6144	; 0x1800
        { while(queue_isBusy()); //wait if acq writes to queue
    1540:	f000 f88e 	bl	1660 <queue_isBusy()>
    1544:	4604      	mov	r4, r0
    1546:	2800      	cmp	r0, #0
    1548:	d1fa      	bne.n	1540 <saveData(short)+0x130>
          pullData(&diskBuffer[ii*NBUF_ACQ]);
    154a:	4628      	mov	r0, r5
        for(int ii=0; ii<NDBL; ii++)
    154c:	f505 7500 	add.w	r5, r5, #512	; 0x200
          pullData(&diskBuffer[ii*NBUF_ACQ]);
    1550:	f000 f8ce 	bl	16f0 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1554:	42bd      	cmp	r5, r7
    1556:	d1f3      	bne.n	1540 <saveData(short)+0x130>
    1558:	4b11      	ldr	r3, [pc, #68]	; (15a0 <saveData(short)+0x190>)
    155a:	4a0e      	ldr	r2, [pc, #56]	; (1594 <saveData(short)+0x184>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    155c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1560:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    1564:	3401      	adds	r4, #1
    1566:	2c08      	cmp	r4, #8
    1568:	d1f8      	bne.n	155c <saveData(short)+0x14c>
    156a:	e7c0      	b.n	14ee <saveData(short)+0xde>
    156c:	42004000 	.word	0x42004000
    1570:	20008bd4 	.word	0x20008bd4
    1574:	200288ac 	.word	0x200288ac
    1578:	20029490 	.word	0x20029490
    157c:	2000df48 	.word	0x2000df48
    1580:	2000c540 	.word	0x2000c540
    1584:	2000f744 	.word	0x2000f744
    1588:	2000ef48 	.word	0x2000ef48
    158c:	2000dd3c 	.word	0x2000dd3c
    1590:	2000d540 	.word	0x2000d540
    1594:	20028ea8 	.word	0x20028ea8
    1598:	20028ea0 	.word	0x20028ea0
    159c:	2000df44 	.word	0x2000df44
    15a0:	2000c53c 	.word	0x2000c53c
    15a4:	200288bc 	.word	0x200288bc
    15a8:	200288c0 	.word	0x200288c0

000015ac <_GLOBAL__sub_I_t_acq>:
  FsVolume() = default;
    15ac:	481c      	ldr	r0, [pc, #112]	; (1620 <_GLOBAL__sub_I_t_acq+0x74>)
	SPISettings() : _clock(4000000) {
    15ae:	4b1d      	ldr	r3, [pc, #116]	; (1624 <_GLOBAL__sub_I_t_acq+0x78>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    15b0:	491d      	ldr	r1, [pc, #116]	; (1628 <_GLOBAL__sub_I_t_acq+0x7c>)
SdFs sd;
    15b2:	4a1e      	ldr	r2, [pc, #120]	; (162c <_GLOBAL__sub_I_t_acq+0x80>)
}
    15b4:	b510      	push	{r4, lr}
    15b6:	f8c0 34a0 	str.w	r3, [r0, #1184]	; 0x4a0
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    15ba:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    15be:	2400      	movs	r4, #0
    15c0:	f8c0 148c 	str.w	r1, [r0, #1164]	; 0x48c
    15c4:	f8c0 34a8 	str.w	r3, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    15c8:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    15ca:	4b19      	ldr	r3, [pc, #100]	; (1630 <_GLOBAL__sub_I_t_acq+0x84>)
    15cc:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    15d0:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    15d4:	f8c0 4488 	str.w	r4, [r0, #1160]	; 0x488
  SdioConfig() {}
    15d8:	f8a0 4494 	strh.w	r4, [r0, #1172]	; 0x494
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    15dc:	f8c0 449c 	str.w	r4, [r0, #1180]	; 0x49c
  SharedSpiCard() { initSharedSpiCard(); }
    15e0:	f8a0 44ac 	strh.w	r4, [r0, #1196]	; 0x4ac
    15e4:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
    m_type = 0;
    15e8:	f880 44ae 	strb.w	r4, [r0, #1198]	; 0x4ae
SdFs sd;
    15ec:	4911      	ldr	r1, [pc, #68]	; (1634 <_GLOBAL__sub_I_t_acq+0x88>)
  DedicatedSpiCard() = default;
    15ee:	f8c0 44b0 	str.w	r4, [r0, #1200]	; 0x4b0
    15f2:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    15f6:	f880 44b4 	strb.w	r4, [r0, #1204]	; 0x4b4
    15fa:	f008 f97b 	bl	98f4 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    15fe:	480e      	ldr	r0, [pc, #56]	; (1638 <_GLOBAL__sub_I_t_acq+0x8c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1604:	4b0d      	ldr	r3, [pc, #52]	; (163c <_GLOBAL__sub_I_t_acq+0x90>)
    1606:	7304      	strb	r4, [r0, #12]
FsFile file;
    1608:	4a08      	ldr	r2, [pc, #32]	; (162c <_GLOBAL__sub_I_t_acq+0x80>)
    160a:	6003      	str	r3, [r0, #0]
    160c:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() = default;
    1610:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1614:	490a      	ldr	r1, [pc, #40]	; (1640 <_GLOBAL__sub_I_t_acq+0x94>)
}
    1616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    161a:	f008 b96b 	b.w	98f4 <__aeabi_atexit>
    161e:	bf00      	nop
    1620:	20028fa0 	.word	0x20028fa0
    1624:	003d0900 	.word	0x003d0900
    1628:	2000080c 	.word	0x2000080c
    162c:	200085f0 	.word	0x200085f0
    1630:	20000728 	.word	0x20000728
    1634:	00000afd 	.word	0x00000afd
    1638:	20028e50 	.word	0x20028e50
    163c:	200007c4 	.word	0x200007c4
    1640:	00000b81 	.word	0x00000b81

00001644 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1644:	4a04      	ldr	r2, [pc, #16]	; (1658 <getDataCount()+0x14>)
    1646:	4b05      	ldr	r3, [pc, #20]	; (165c <getDataCount()+0x18>)
    1648:	6810      	ldr	r0, [r2, #0]
    164a:	681b      	ldr	r3, [r3, #0]
    164c:	1ac0      	subs	r0, r0, r3
    164e:	bf48      	it	mi
    1650:	30c0      	addmi	r0, #192	; 0xc0
    1652:	b280      	uxth	r0, r0
    1654:	4770      	bx	lr
    1656:	bf00      	nop
    1658:	20029468 	.word	0x20029468
    165c:	20028ea4 	.word	0x20028ea4

00001660 <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    1660:	4b01      	ldr	r3, [pc, #4]	; (1668 <queue_isBusy()+0x8>)
    1662:	6818      	ldr	r0, [r3, #0]
    1664:	4770      	bx	lr
    1666:	bf00      	nop
    1668:	2000df44 	.word	0x2000df44

0000166c <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    166c:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    166e:	4c1b      	ldr	r4, [pc, #108]	; (16dc <pushData(unsigned long*)+0x70>)
    1670:	4a1b      	ldr	r2, [pc, #108]	; (16e0 <pushData(unsigned long*)+0x74>)
    1672:	6823      	ldr	r3, [r4, #0]
    1674:	491b      	ldr	r1, [pc, #108]	; (16e4 <pushData(unsigned long*)+0x78>)
    1676:	3301      	adds	r3, #1
    1678:	680d      	ldr	r5, [r1, #0]
    167a:	fb82 2103 	smull	r2, r1, r2, r3
    167e:	17da      	asrs	r2, r3, #31
    1680:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    1684:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1688:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
    168c:	42ab      	cmp	r3, r5
    168e:	d021      	beq.n	16d4 <pushData(unsigned long*)+0x68>
    //while(busy); 
    queue_busy=1;
    1690:	4e15      	ldr	r6, [pc, #84]	; (16e8 <pushData(unsigned long*)+0x7c>)
    1692:	2201      	movs	r2, #1
    1694:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    1696:	2300      	movs	r3, #0
    1698:	4d14      	ldr	r5, [pc, #80]	; (16ec <pushData(unsigned long*)+0x80>)
    queue_busy=1;
    169a:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    169c:	6822      	ldr	r2, [r4, #0]
    169e:	f851 0f04 	ldr.w	r0, [r1, #4]!
    16a2:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    16a6:	3301      	adds	r3, #1
    16a8:	2b80      	cmp	r3, #128	; 0x80
    16aa:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    16ae:	d1f5      	bne.n	169c <pushData(unsigned long*)+0x30>
    tail = (tail+1)%MAXBUF;
    16b0:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    16b2:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    16b4:	490a      	ldr	r1, [pc, #40]	; (16e0 <pushData(unsigned long*)+0x74>)
    16b6:	3201      	adds	r2, #1
    16b8:	fb81 3102 	smull	r3, r1, r1, r2
    16bc:	17d3      	asrs	r3, r2, #31
    16be:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    16c2:	2100      	movs	r1, #0
    tail = (tail+1)%MAXBUF;
    16c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16c8:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    16cc:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    16ce:	6031      	str	r1, [r6, #0]
  }
    16d0:	bc70      	pop	{r4, r5, r6}
    16d2:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    16d4:	2000      	movs	r0, #0
  }
    16d6:	bc70      	pop	{r4, r5, r6}
    16d8:	4770      	bx	lr
    16da:	bf00      	nop
    16dc:	20029468 	.word	0x20029468
    16e0:	2aaaaaab 	.word	0x2aaaaaab
    16e4:	20028ea4 	.word	0x20028ea4
    16e8:	2000df44 	.word	0x2000df44
    16ec:	2000ff48 	.word	0x2000ff48

000016f0 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    16f0:	4b15      	ldr	r3, [pc, #84]	; (1748 <pullData(unsigned long*)+0x58>)
  {
    16f2:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    16f4:	4c15      	ldr	r4, [pc, #84]	; (174c <pullData(unsigned long*)+0x5c>)
    16f6:	6822      	ldr	r2, [r4, #0]
    16f8:	681b      	ldr	r3, [r3, #0]
    16fa:	429a      	cmp	r2, r3
    16fc:	d021      	beq.n	1742 <pullData(unsigned long*)+0x52>
    //while(busy); 
    queue_busy=1;
    16fe:	4d14      	ldr	r5, [pc, #80]	; (1750 <pullData(unsigned long*)+0x60>)
    1700:	2201      	movs	r2, #1
    1702:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1704:	2300      	movs	r3, #0
    1706:	4813      	ldr	r0, [pc, #76]	; (1754 <pullData(unsigned long*)+0x64>)
    queue_busy=1;
    1708:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    170a:	6822      	ldr	r2, [r4, #0]
    170c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    1710:	3301      	adds	r3, #1
    1712:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1716:	2b80      	cmp	r3, #128	; 0x80
    1718:	f841 2f04 	str.w	r2, [r1, #4]!
    171c:	d1f5      	bne.n	170a <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
    171e:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1;
    1720:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    1722:	490d      	ldr	r1, [pc, #52]	; (1758 <pullData(unsigned long*)+0x68>)
    1724:	3201      	adds	r2, #1
    1726:	fb81 3102 	smull	r3, r1, r1, r2
    172a:	17d3      	asrs	r3, r2, #31
    172c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    1730:	2100      	movs	r1, #0
    head = (head+1)%MAXBUF;
    1732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1736:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    173a:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    173c:	6029      	str	r1, [r5, #0]
  }
    173e:	bc30      	pop	{r4, r5}
    1740:	4770      	bx	lr
    if ( head==tail ) return 0;
    1742:	2000      	movs	r0, #0
  }
    1744:	bc30      	pop	{r4, r5}
    1746:	4770      	bx	lr
    1748:	20029468 	.word	0x20029468
    174c:	20028ea4 	.word	0x20028ea4
    1750:	2000df44 	.word	0x2000df44
    1754:	2000ff48 	.word	0x2000ff48
    1758:	2aaaaaab 	.word	0x2aaaaaab

0000175c <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    175c:	4a54      	ldr	r2, [pc, #336]	; (18b0 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    175e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1762:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1766:	f240 196d 	movw	r9, #365	; 0x16d
    176a:	4e52      	ldr	r6, [pc, #328]	; (18b4 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    176c:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    176e:	4f52      	ldr	r7, [pc, #328]	; (18b8 <time2date(unsigned long, datetime_t*)+0x15c>)
    1770:	f8df 8158 	ldr.w	r8, [pc, #344]	; 18cc <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    1774:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1778:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    177c:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    177e:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    1782:	4c4e      	ldr	r4, [pc, #312]	; (18bc <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    1784:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    1788:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    178c:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1790:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    1792:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1796:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1798:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    179c:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17a0:	4b47      	ldr	r3, [pc, #284]	; (18c0 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    17a2:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17a6:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    17aa:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    17ac:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17ae:	1ae2      	subs	r2, r4, r3
    17b0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    17b4:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    17b6:	089b      	lsrs	r3, r3, #2
    17b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    17bc:	1ae4      	subs	r4, r4, r3
    17be:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    17c0:	b2c3      	uxtb	r3, r0
    17c2:	f240 1c6d 	movw	ip, #365	; 0x16d
    17c6:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    17ca:	f013 0403 	ands.w	r4, r3, #3
    17ce:	fb06 f503 	mul.w	r5, r6, r3
    17d2:	d108      	bne.n	17e6 <time2date(unsigned long, datetime_t*)+0x8a>
    17d4:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    17d8:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    17dc:	d303      	bcc.n	17e6 <time2date(unsigned long, datetime_t*)+0x8a>
    17de:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    17e2:	bf38      	it	cc
    17e4:	46cc      	movcc	ip, r9
    17e6:	4462      	add	r2, ip
    17e8:	3001      	adds	r0, #1
    17ea:	4596      	cmp	lr, r2
    17ec:	d2e8      	bcs.n	17c0 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    17ee:	4d35      	ldr	r5, [pc, #212]	; (18c4 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    17f0:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    17f2:	fba5 0503 	umull	r0, r5, r5, r3
    17f6:	b3a4      	cbz	r4, 1862 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    17f8:	096e      	lsrs	r6, r5, #5
    17fa:	2764      	movs	r7, #100	; 0x64
    17fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1800:	09ed      	lsrs	r5, r5, #7
    1802:	fb07 3616 	mls	r6, r7, r6, r3
    1806:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    180a:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    180e:	ebae 0e02 	sub.w	lr, lr, r2
    1812:	2300      	movs	r3, #0
    1814:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    1816:	4f2c      	ldr	r7, [pc, #176]	; (18c8 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    1818:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    181a:	e00a      	b.n	1832 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    181c:	f813 c007 	ldrb.w	ip, [r3, r7]
    1820:	4584      	cmp	ip, r0
    1822:	d837      	bhi.n	1894 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    1824:	2a0c      	cmp	r2, #12
        time -= monthLength;
    1826:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    182a:	d012      	beq.n	1852 <time2date(unsigned long, datetime_t*)+0xf6>
    182c:	3201      	adds	r2, #1
    182e:	3301      	adds	r3, #1
    1830:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    1832:	2b01      	cmp	r3, #1
    1834:	fa5f fe83 	uxtb.w	lr, r3
    1838:	d1f0      	bne.n	181c <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    183a:	b91c      	cbnz	r4, 1844 <time2date(unsigned long, datetime_t*)+0xe8>
    183c:	b1f6      	cbz	r6, 187c <time2date(unsigned long, datetime_t*)+0x120>
    183e:	f04f 0c1d 	mov.w	ip, #29
    1842:	e001      	b.n	1848 <time2date(unsigned long, datetime_t*)+0xec>
    1844:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    1848:	4560      	cmp	r0, ip
    184a:	d32d      	bcc.n	18a8 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    184c:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1850:	e7ec      	b.n	182c <time2date(unsigned long, datetime_t*)+0xd0>
    1852:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    1856:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1858:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    185c:	70c8      	strb	r0, [r1, #3]
  }
    185e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    1862:	2064      	movs	r0, #100	; 0x64
    1864:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1866:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    1868:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    186c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1870:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1874:	b14e      	cbz	r6, 188a <time2date(unsigned long, datetime_t*)+0x12e>
    1876:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    187a:	e7c8      	b.n	180e <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    187c:	2d00      	cmp	r5, #0
    187e:	bf14      	ite	ne
    1880:	f04f 0c1c 	movne.w	ip, #28
    1884:	f04f 0c1d 	moveq.w	ip, #29
    1888:	e7de      	b.n	1848 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    188a:	2d00      	cmp	r5, #0
    188c:	d1bd      	bne.n	180a <time2date(unsigned long, datetime_t*)+0xae>
    188e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    1892:	e7bc      	b.n	180e <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    1894:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    1898:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    189a:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    189e:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    18a0:	f881 e002 	strb.w	lr, [r1, #2]
  }
    18a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    18a8:	f04f 0e02 	mov.w	lr, #2
    18ac:	e7d3      	b.n	1856 <time2date(unsigned long, datetime_t*)+0xfa>
    18ae:	bf00      	nop
    18b0:	88888889 	.word	0x88888889
    18b4:	c28f5c29 	.word	0xc28f5c29
    18b8:	028f5c28 	.word	0x028f5c28
    18bc:	aaaaaaab 	.word	0xaaaaaaab
    18c0:	24924925 	.word	0x24924925
    18c4:	51eb851f 	.word	0x51eb851f
    18c8:	20000580 	.word	0x20000580
    18cc:	00a3d70a 	.word	0x00a3d70a

000018d0 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    18d0:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    18d2:	4a35      	ldr	r2, [pc, #212]	; (19a8 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    18d4:	314e      	adds	r1, #78	; 0x4e
    18d6:	b2c9      	uxtb	r1, r1
  {
    18d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    18dc:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    18e0:	b1e1      	cbz	r1, 191c <date2time(datetime_t*)+0x4c>
    18e2:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    18e6:	f240 73b3 	movw	r3, #1971	; 0x7b3
    18ea:	4d30      	ldr	r5, [pc, #192]	; (19ac <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    18ec:	4e30      	ldr	r6, [pc, #192]	; (19b0 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    18ee:	4f31      	ldr	r7, [pc, #196]	; (19b4 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    18f0:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 19c0 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    18f4:	4563      	cmp	r3, ip
    18f6:	fb05 f403 	mul.w	r4, r5, r3
    18fa:	d00f      	beq.n	191c <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    18fc:	f013 0f03 	tst.w	r3, #3
    1900:	f103 0301 	add.w	r3, r3, #1
    1904:	d1f6      	bne.n	18f4 <date2time(datetime_t*)+0x24>
    1906:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    190a:	d302      	bcc.n	1912 <date2time(datetime_t*)+0x42>
    190c:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    1910:	d3f0      	bcc.n	18f4 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    1912:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1914:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    1916:	fb05 f403 	mul.w	r4, r5, r3
    191a:	d1ef      	bne.n	18fc <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    191c:	f990 e002 	ldrsb.w	lr, [r0, #2]
    1920:	f1be 0f01 	cmp.w	lr, #1
    1924:	dd29      	ble.n	197a <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1926:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    192a:	4e23      	ldr	r6, [pc, #140]	; (19b8 <date2time(datetime_t*)+0xe8>)
    192c:	2564      	movs	r5, #100	; 0x64
    192e:	f44f 74c8 	mov.w	r4, #400	; 0x190
    1932:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    1936:	f8df 808c 	ldr.w	r8, [pc, #140]	; 19c4 <date2time(datetime_t*)+0xf4>
    193a:	4920      	ldr	r1, [pc, #128]	; (19bc <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    193c:	0977      	lsrs	r7, r6, #5
    193e:	09f6      	lsrs	r6, r6, #7
    1940:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1944:	4d1b      	ldr	r5, [pc, #108]	; (19b4 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1946:	fb04 3616 	mls	r6, r4, r6, r3
    194a:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    194e:	2301      	movs	r3, #1
    1950:	e007      	b.n	1962 <date2time(datetime_t*)+0x92>
    1952:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1954:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    1958:	3101      	adds	r1, #1
    195a:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    195c:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1960:	d00b      	beq.n	197a <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1962:	2b02      	cmp	r3, #2
    1964:	d1f5      	bne.n	1952 <date2time(datetime_t*)+0x82>
    1966:	2c00      	cmp	r4, #0
    1968:	d1f3      	bne.n	1952 <date2time(datetime_t*)+0x82>
    196a:	b90f      	cbnz	r7, 1970 <date2time(datetime_t*)+0xa0>
    196c:	2e00      	cmp	r6, #0
    196e:	d1f0      	bne.n	1952 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    1970:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    1972:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    1974:	3101      	adds	r1, #1
    1976:	4573      	cmp	r3, lr
    1978:	d1f3      	bne.n	1962 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    197a:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    197e:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    1982:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    1986:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    198a:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    198e:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    1990:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    1994:	f990 1003 	ldrsb.w	r1, [r0, #3]
    1998:	4c06      	ldr	r4, [pc, #24]	; (19b4 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    199a:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    199c:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    199e:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    19a2:	4410      	add	r0, r2
    19a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19a8:	01e13380 	.word	0x01e13380
    19ac:	c28f5c29 	.word	0xc28f5c29
    19b0:	028f5c28 	.word	0x028f5c28
    19b4:	00015180 	.word	0x00015180
    19b8:	51eb851f 	.word	0x51eb851f
    19bc:	20000580 	.word	0x20000580
    19c0:	00a3d70a 	.word	0x00a3d70a
    19c4:	00263b80 	.word	0x00263b80

000019c8 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    19c8:	2001      	movs	r0, #1
    19ca:	4770      	bx	lr

000019cc <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    19cc:	b500      	push	{lr}
    19ce:	b083      	sub	sp, #12
    19d0:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    19d2:	f006 fc4d 	bl	8270 <rtc_get>
    19d6:	9901      	ldr	r1, [sp, #4]
    19d8:	f7ff fec0 	bl	175c <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    19dc:	2001      	movs	r0, #1
    19de:	b003      	add	sp, #12
    19e0:	f85d fb04 	ldr.w	pc, [sp], #4

000019e4 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	b082      	sub	sp, #8
    19e8:	4614      	mov	r4, r2
    19ea:	460d      	mov	r5, r1
    19ec:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    19ee:	f006 fc3f 	bl	8270 <rtc_get>
    19f2:	4669      	mov	r1, sp
    19f4:	f7ff feb2 	bl	175c <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    19f8:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    19fc:	4608      	mov	r0, r1
    t.month=month;
    19fe:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    1a02:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    1a06:	f7ff ff63 	bl	18d0 <date2time(datetime_t*)>
    1a0a:	f006 fc43 	bl	8294 <rtc_set>
    rtc_set_datetime(&t);
  }
    1a0e:	b002      	add	sp, #8
    1a10:	bd70      	pop	{r4, r5, r6, pc}
    1a12:	bf00      	nop

00001a14 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    1a14:	b570      	push	{r4, r5, r6, lr}
    1a16:	b082      	sub	sp, #8
    1a18:	4614      	mov	r4, r2
    1a1a:	460d      	mov	r5, r1
    1a1c:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1a1e:	f006 fc27 	bl	8270 <rtc_get>
    1a22:	4669      	mov	r1, sp
    1a24:	f7ff fe9a 	bl	175c <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    1a28:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    1a2c:	4608      	mov	r0, r1
    t.min=minutes;
    1a2e:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    1a32:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    1a36:	f7ff ff4b 	bl	18d0 <date2time(datetime_t*)>
    1a3a:	f006 fc2b 	bl	8294 <rtc_set>
    rtc_set_datetime(&t);
  }
    1a3e:	b002      	add	sp, #8
    1a40:	bd70      	pop	{r4, r5, r6, pc}
    1a42:	bf00      	nop

00001a44 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1a44:	b510      	push	{r4, lr}
    1a46:	4604      	mov	r4, r0
    1a48:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a4a:	f007 fcd1 	bl	93f0 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1a4e:	2800      	cmp	r0, #0
    1a50:	d0fb      	beq.n	1a4a <menuGetInt32(long*) [clone .isra.0]+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1a52:	210d      	movs	r1, #13
    1a54:	aa02      	add	r2, sp, #8
    1a56:	2328      	movs	r3, #40	; 0x28
    1a58:	480d      	ldr	r0, [pc, #52]	; (1a90 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a5a:	f006 f897 	bl	7b8c <Stream::readBytesUntil(char, char*, unsigned int)>
    1a5e:	4603      	mov	r3, r0
  buffer[count]=0;
    1a60:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1a62:	a802      	add	r0, sp, #8
    1a64:	3330      	adds	r3, #48	; 0x30
    1a66:	446b      	add	r3, sp
    1a68:	f803 2c28 	strb.w	r2, [r3, #-40]
    1a6c:	f00a fb88 	bl	c180 <strlen>
    1a70:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a72:	a802      	add	r0, sp, #8
    1a74:	f007 fd26 	bl	94c4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a78:	4805      	ldr	r0, [pc, #20]	; (1a90 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a7a:	f005 ff93 	bl	79a4 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1a7e:	aa01      	add	r2, sp, #4
    1a80:	4904      	ldr	r1, [pc, #16]	; (1a94 <menuGetInt32(long*) [clone .isra.0]+0x50>)
    1a82:	a802      	add	r0, sp, #8
    1a84:	f009 fe6c 	bl	b760 <sscanf>
    1a88:	9b01      	ldr	r3, [sp, #4]
    1a8a:	6023      	str	r3, [r4, #0]
  return 1;
}
    1a8c:	b00c      	add	sp, #48	; 0x30
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	200085d4 	.word	0x200085d4
    1a94:	2000057c 	.word	0x2000057c

00001a98 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1a98:	b510      	push	{r4, lr}
    1a9a:	4604      	mov	r4, r0
    1a9c:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a9e:	f007 fca7 	bl	93f0 <usb_serial_available>
  while(!Serial.available()) continue;
    1aa2:	2800      	cmp	r0, #0
    1aa4:	d0fb      	beq.n	1a9e <menuGetInt16(short*) [clone .isra.0]+0x6>
  count = Serial.readBytesUntil('\r',buffer,40);
    1aa6:	210d      	movs	r1, #13
    1aa8:	aa02      	add	r2, sp, #8
    1aaa:	2328      	movs	r3, #40	; 0x28
    1aac:	480d      	ldr	r0, [pc, #52]	; (1ae4 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1aae:	f006 f86d 	bl	7b8c <Stream::readBytesUntil(char, char*, unsigned int)>
    1ab2:	4603      	mov	r3, r0
  buffer[count]=0;
    1ab4:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1ab6:	a802      	add	r0, sp, #8
    1ab8:	3330      	adds	r3, #48	; 0x30
    1aba:	446b      	add	r3, sp
    1abc:	f803 2c28 	strb.w	r2, [r3, #-40]
    1ac0:	f00a fb5e 	bl	c180 <strlen>
    1ac4:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ac6:	a802      	add	r0, sp, #8
    1ac8:	f007 fcfc 	bl	94c4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1acc:	4805      	ldr	r0, [pc, #20]	; (1ae4 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1ace:	f005 ff69 	bl	79a4 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1ad2:	aa01      	add	r2, sp, #4
    1ad4:	4904      	ldr	r1, [pc, #16]	; (1ae8 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    1ad6:	a802      	add	r0, sp, #8
    1ad8:	f009 fe42 	bl	b760 <sscanf>
    1adc:	9b01      	ldr	r3, [sp, #4]
    1ade:	8023      	strh	r3, [r4, #0]
}
    1ae0:	b00c      	add	sp, #48	; 0x30
    1ae2:	bd10      	pop	{r4, pc}
    1ae4:	200085d4 	.word	0x200085d4
    1ae8:	2000057c 	.word	0x2000057c

00001aec <menuGet3Int(int*, int*, int*) [clone .isra.0]>:

static int menuGet3Int(int *val1, int *val2, int *val3)
    1aec:	b570      	push	{r4, r5, r6, lr}
    1aee:	4606      	mov	r6, r0
    1af0:	b090      	sub	sp, #64	; 0x40
    1af2:	460c      	mov	r4, r1
    1af4:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    1af6:	f007 fc7b 	bl	93f0 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1afa:	2800      	cmp	r0, #0
    1afc:	d0fb      	beq.n	1af6 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1afe:	aa06      	add	r2, sp, #24
    1b00:	210d      	movs	r1, #13
    1b02:	2328      	movs	r3, #40	; 0x28
    1b04:	4810      	ldr	r0, [pc, #64]	; (1b48 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1b06:	f006 f841 	bl	7b8c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1b0a:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1b0e:	eb0d 0003 	add.w	r0, sp, r3
    1b12:	2300      	movs	r3, #0
    1b14:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    1b18:	a806      	add	r0, sp, #24
    1b1a:	f00a fb31 	bl	c180 <strlen>
    1b1e:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b20:	a806      	add	r0, sp, #24
    1b22:	f007 fccf 	bl	94c4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b26:	4808      	ldr	r0, [pc, #32]	; (1b48 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1b28:	f005 ff3c 	bl	79a4 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1b2c:	f10d 0317 	add.w	r3, sp, #23
    1b30:	4632      	mov	r2, r6
    1b32:	4906      	ldr	r1, [pc, #24]	; (1b4c <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    1b34:	a806      	add	r0, sp, #24
    1b36:	9400      	str	r4, [sp, #0]
    1b38:	e9cd 3501 	strd	r3, r5, [sp, #4]
    1b3c:	f10d 0316 	add.w	r3, sp, #22
    1b40:	f009 fe0e 	bl	b760 <sscanf>
}
    1b44:	b010      	add	sp, #64	; 0x40
    1b46:	bd70      	pop	{r4, r5, r6, pc}
    1b48:	200085d4 	.word	0x200085d4
    1b4c:	20000574 	.word	0x20000574

00001b50 <menu1()>:

void menu1(void)
{   // have ':'
    1b50:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1b52:	f007 fc4d 	bl	93f0 <usb_serial_available>
    while(!Serial.available()) ;
    1b56:	2800      	cmp	r0, #0
    1b58:	d0fb      	beq.n	1b52 <menu1()+0x2>
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
    1b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    1b5e:	f007 bc8b 	b.w	9478 <usb_serial_getchar>
    1b62:	bf00      	nop

00001b64 <menu2()>:

void menu2(void)
{   // have '?'
    1b64:	b510      	push	{r4, lr}
    1b66:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1b68:	f007 fc42 	bl	93f0 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d0fb      	beq.n	1b68 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1b70:	f007 fc82 	bl	9478 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1b74:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1b76:	2870      	cmp	r0, #112	; 0x70
    1b78:	d018      	beq.n	1bac <menu2()+0x48>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    1b7a:	2864      	cmp	r0, #100	; 0x64
    1b7c:	d065      	beq.n	1c4a <menu2()+0xe6>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    1b7e:	3861      	subs	r0, #97	; 0x61
    1b80:	2813      	cmp	r0, #19
    1b82:	d80d      	bhi.n	1ba0 <menu2()+0x3c>
    1b84:	e8df f000 	tbb	[pc, r0]
    1b88:	0c530c70 	.word	0x0c530c70
    1b8c:	0c0c7f0c 	.word	0x0c0c7f0c
    1b90:	0c0c0c0c 	.word	0x0c0c0c0c
    1b94:	0c0c0c0c 	.word	0x0c0c0c0c
    1b98:	928c0c0c 	.word	0x928c0c0c
    1b9c:	f007 fc6c 	bl	9478 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1ba0:	f007 fc26 	bl	93f0 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1ba4:	2800      	cmp	r0, #0
    1ba6:	d1f9      	bne.n	1b9c <menu2()+0x38>

}
    1ba8:	b008      	add	sp, #32
    1baa:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1bac:	a806      	add	r0, sp, #24
    1bae:	f7ff ff0d 	bl	19cc <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1bb2:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1bb6:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1bba:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1bbe:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1bc2:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1bc6:	9000      	str	r0, [sp, #0]
    1bc8:	4840      	ldr	r0, [pc, #256]	; (1ccc <menu2()+0x168>)
    1bca:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1bce:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1bd2:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1bd6:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1bda:	493d      	ldr	r1, [pc, #244]	; (1cd0 <menu2()+0x16c>)
    1bdc:	f005 fefe 	bl	79dc <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1be0:	210c      	movs	r1, #12
    1be2:	483c      	ldr	r0, [pc, #240]	; (1cd4 <menu2()+0x170>)
    1be4:	f007 fc6e 	bl	94c4 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1be8:	493b      	ldr	r1, [pc, #236]	; (1cd8 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1bea:	220a      	movs	r2, #10
    1bec:	2300      	movs	r3, #0
    1bee:	6809      	ldr	r1, [r1, #0]
    1bf0:	4836      	ldr	r0, [pc, #216]	; (1ccc <menu2()+0x168>)
    1bf2:	f005 ff01 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1bf6:	4835      	ldr	r0, [pc, #212]	; (1ccc <menu2()+0x168>)
    1bf8:	f005 fed4 	bl	79a4 <Print::println()>
    1bfc:	210c      	movs	r1, #12
    1bfe:	4837      	ldr	r0, [pc, #220]	; (1cdc <menu2()+0x178>)
    1c00:	f007 fc60 	bl	94c4 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1c04:	4b36      	ldr	r3, [pc, #216]	; (1ce0 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1c06:	4831      	ldr	r0, [pc, #196]	; (1ccc <menu2()+0x168>)
    1c08:	6819      	ldr	r1, [r3, #0]
    1c0a:	f005 febf 	bl	798c <Print::print(long)>
    1c0e:	482f      	ldr	r0, [pc, #188]	; (1ccc <menu2()+0x168>)
    1c10:	f005 fec8 	bl	79a4 <Print::println()>
    1c14:	210c      	movs	r1, #12
    1c16:	4833      	ldr	r0, [pc, #204]	; (1ce4 <menu2()+0x180>)
    1c18:	f007 fc54 	bl	94c4 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1c1c:	4b32      	ldr	r3, [pc, #200]	; (1ce8 <menu2()+0x184>)
	size_t print(int n)				{ return print((long)n); }
    1c1e:	482b      	ldr	r0, [pc, #172]	; (1ccc <menu2()+0x168>)
    1c20:	f9b3 1000 	ldrsh.w	r1, [r3]
    1c24:	f005 feb2 	bl	798c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1c28:	4828      	ldr	r0, [pc, #160]	; (1ccc <menu2()+0x168>)
    1c2a:	f005 febb 	bl	79a4 <Print::println()>
    1c2e:	210c      	movs	r1, #12
    1c30:	482e      	ldr	r0, [pc, #184]	; (1cec <menu2()+0x188>)
    1c32:	f007 fc47 	bl	94c4 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1c36:	4b2e      	ldr	r3, [pc, #184]	; (1cf0 <menu2()+0x18c>)
	size_t print(int n)				{ return print((long)n); }
    1c38:	f9b3 1000 	ldrsh.w	r1, [r3]
    1c3c:	4823      	ldr	r0, [pc, #140]	; (1ccc <menu2()+0x168>)
    1c3e:	f005 fea5 	bl	798c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1c42:	4822      	ldr	r0, [pc, #136]	; (1ccc <menu2()+0x168>)
    1c44:	f005 feae 	bl	79a4 <Print::println()>
    1c48:	e7aa      	b.n	1ba0 <menu2()+0x3c>
      rtc_get_datetime(&t);
    1c4a:	a806      	add	r0, sp, #24
    1c4c:	f7ff febe 	bl	19cc <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1c50:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1c54:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1c58:	9000      	str	r0, [sp, #0]
    1c5a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1c5e:	4925      	ldr	r1, [pc, #148]	; (1cf4 <menu2()+0x190>)
    1c60:	481a      	ldr	r0, [pc, #104]	; (1ccc <menu2()+0x168>)
    1c62:	f005 febb 	bl	79dc <Print::printf(char const*, ...)>
    1c66:	e79b      	b.n	1ba0 <menu2()+0x3c>
    1c68:	210c      	movs	r1, #12
    1c6a:	481a      	ldr	r0, [pc, #104]	; (1cd4 <menu2()+0x170>)
    1c6c:	f007 fc2a 	bl	94c4 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1c70:	4919      	ldr	r1, [pc, #100]	; (1cd8 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1c72:	2300      	movs	r3, #0
    1c74:	220a      	movs	r2, #10
    1c76:	6809      	ldr	r1, [r1, #0]
    1c78:	4814      	ldr	r0, [pc, #80]	; (1ccc <menu2()+0x168>)
    1c7a:	f005 febd 	bl	79f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1c7e:	4813      	ldr	r0, [pc, #76]	; (1ccc <menu2()+0x168>)
    1c80:	f005 fe90 	bl	79a4 <Print::println()>
    1c84:	e78c      	b.n	1ba0 <menu2()+0x3c>
    1c86:	210c      	movs	r1, #12
    1c88:	4814      	ldr	r0, [pc, #80]	; (1cdc <menu2()+0x178>)
    1c8a:	f007 fc1b 	bl	94c4 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1c8e:	4b14      	ldr	r3, [pc, #80]	; (1ce0 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1c90:	480e      	ldr	r0, [pc, #56]	; (1ccc <menu2()+0x168>)
    1c92:	6819      	ldr	r1, [r3, #0]
    1c94:	f005 fe7a 	bl	798c <Print::print(long)>
    1c98:	480c      	ldr	r0, [pc, #48]	; (1ccc <menu2()+0x168>)
    1c9a:	f005 fe83 	bl	79a4 <Print::println()>
    1c9e:	e77f      	b.n	1ba0 <menu2()+0x3c>
    1ca0:	210c      	movs	r1, #12
    1ca2:	4810      	ldr	r0, [pc, #64]	; (1ce4 <menu2()+0x180>)
    1ca4:	f007 fc0e 	bl	94c4 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1ca8:	4b0f      	ldr	r3, [pc, #60]	; (1ce8 <menu2()+0x184>)
    1caa:	e7c5      	b.n	1c38 <menu2()+0xd4>
      rtc_get_datetime(&t);
    1cac:	a806      	add	r0, sp, #24
    1cae:	f7ff fe8d 	bl	19cc <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1cb2:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1cb6:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1cba:	9000      	str	r0, [sp, #0]
    1cbc:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1cc0:	490d      	ldr	r1, [pc, #52]	; (1cf8 <menu2()+0x194>)
    1cc2:	4802      	ldr	r0, [pc, #8]	; (1ccc <menu2()+0x168>)
    1cc4:	f005 fe8a 	bl	79dc <Print::printf(char const*, ...)>
    1cc8:	e76a      	b.n	1ba0 <menu2()+0x3c>
    1cca:	bf00      	nop
    1ccc:	200085d4 	.word	0x200085d4
    1cd0:	20000480 	.word	0x20000480
    1cd4:	200004a4 	.word	0x200004a4
    1cd8:	20008bd4 	.word	0x20008bd4
    1cdc:	200004b4 	.word	0x200004b4
    1ce0:	20008b94 	.word	0x20008b94
    1ce4:	200004c4 	.word	0x200004c4
    1ce8:	20029494 	.word	0x20029494
    1cec:	200004d4 	.word	0x200004d4
    1cf0:	20029490 	.word	0x20029490
    1cf4:	200004e4 	.word	0x200004e4
    1cf8:	20000500 	.word	0x20000500

00001cfc <menu3()>:

void menu3(void)
{   // have '!'
    1cfc:	b510      	push	{r4, lr}
    1cfe:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
    1d00:	f007 fb76 	bl	93f0 <usb_serial_available>

    while(!Serial.available()) ;
    1d04:	2800      	cmp	r0, #0
    1d06:	d0fb      	beq.n	1d00 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1d08:	f007 fbb6 	bl	9478 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1d0c:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1d0e:	2864      	cmp	r0, #100	; 0x64
    1d10:	d00e      	beq.n	1d30 <menu3()+0x34>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1d12:	3861      	subs	r0, #97	; 0x61
    1d14:	2813      	cmp	r0, #19
    1d16:	d815      	bhi.n	1d44 <menu3()+0x48>
    1d18:	e8df f000 	tbb	[pc, r0]
    1d1c:	14281422 	.word	0x14281422
    1d20:	14142e14 	.word	0x14142e14
    1d24:	14141414 	.word	0x14141414
    1d28:	14141414 	.word	0x14141414
    1d2c:	16381414 	.word	0x16381414
      menuGet3Int(&year,&month,&day);
    1d30:	aa03      	add	r2, sp, #12
    1d32:	a902      	add	r1, sp, #8
    1d34:	a801      	add	r0, sp, #4
    1d36:	f7ff fed9 	bl	1aec <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1d3a:	9801      	ldr	r0, [sp, #4]
    1d3c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1d40:	f7ff fe50 	bl	19e4 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1d44:	b004      	add	sp, #16
    1d46:	bd10      	pop	{r4, pc}
      menuGet3Int(&hour,&minutes,&seconds);
    1d48:	aa03      	add	r2, sp, #12
    1d4a:	a902      	add	r1, sp, #8
    1d4c:	a801      	add	r0, sp, #4
    1d4e:	f7ff fecd 	bl	1aec <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1d52:	9801      	ldr	r0, [sp, #4]
    1d54:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1d58:	f7ff fe5c 	bl	1a14 <rtcSetTime(int, int, int)>
}
    1d5c:	b004      	add	sp, #16
    1d5e:	bd10      	pop	{r4, pc}
      menuGetInt32((int32_t *)&t_acq);
    1d60:	4810      	ldr	r0, [pc, #64]	; (1da4 <menu3()+0xa8>)
}
    1d62:	b004      	add	sp, #16
    1d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_acq);
    1d68:	f7ff be6c 	b.w	1a44 <menuGetInt32(long*) [clone .isra.0]>
      menuGetInt16(&proc);
    1d6c:	480e      	ldr	r0, [pc, #56]	; (1da8 <menu3()+0xac>)
}
    1d6e:	b004      	add	sp, #16
    1d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1d74:	f7ff be90 	b.w	1a98 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt32(&fsamp);
    1d78:	4c0c      	ldr	r4, [pc, #48]	; (1dac <menu3()+0xb0>)
    1d7a:	4620      	mov	r0, r4
    1d7c:	f7ff fe62 	bl	1a44 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1d80:	6820      	ldr	r0, [r4, #0]
}
    1d82:	b004      	add	sp, #16
    1d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1d88:	f7fe bd30 	b.w	7ec <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1d8c:	4c08      	ldr	r4, [pc, #32]	; (1db0 <menu3()+0xb4>)
    1d8e:	4620      	mov	r0, r4
    1d90:	f7ff fe82 	bl	1a98 <menuGetInt16(short*) [clone .isra.0]>
    1d94:	f9b4 3000 	ldrsh.w	r3, [r4]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	dad3      	bge.n	1d44 <menu3()+0x48>
    1d9c:	2300      	movs	r3, #0
    1d9e:	8023      	strh	r3, [r4, #0]
    1da0:	e7d0      	b.n	1d44 <menu3()+0x48>
    1da2:	bf00      	nop
    1da4:	20008bd4 	.word	0x20008bd4
    1da8:	20029490 	.word	0x20029490
    1dac:	20008b94 	.word	0x20008b94
    1db0:	20029494 	.word	0x20029494

00001db4 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1db4:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1db6:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1dba:	b084      	sub	sp, #16
    1dbc:	468c      	mov	ip, r1
    1dbe:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1dc0:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1dc2:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1dc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1dc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    1dcc:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1dd0:	4629      	mov	r1, r5
    1dd2:	6a20      	ldr	r0, [r4, #32]
    1dd4:	f001 f952 	bl	307c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1dd8:	2801      	cmp	r0, #1
    1dda:	d106      	bne.n	1dea <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1ddc:	4632      	mov	r2, r6
    1dde:	4629      	mov	r1, r5
    1de0:	6a20      	ldr	r0, [r4, #32]
    1de2:	f001 f92f 	bl	3044 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1de6:	b004      	add	sp, #16
    1de8:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1dea:	2000      	movs	r0, #0
}
    1dec:	b004      	add	sp, #16
    1dee:	bd70      	pop	{r4, r5, r6, pc}

00001df0 <ExFatFile::close()>:
bool ExFatFile::close() {
    1df0:	b510      	push	{r4, lr}
    1df2:	4604      	mov	r4, r0
  bool rtn = sync();
    1df4:	f000 fd12 	bl	281c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1df8:	2300      	movs	r3, #0
    1dfa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1dfe:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1e02:	bd10      	pop	{r4, pc}

00001e04 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1e04:	b538      	push	{r3, r4, r5, lr}
    1e06:	460d      	mov	r5, r1
  if (isOpen()) {
    1e08:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1e0c:	b109      	cbz	r1, 1e12 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    1e0e:	2000      	movs	r0, #0
}
    1e10:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1e12:	2238      	movs	r2, #56	; 0x38
    1e14:	4604      	mov	r4, r0
    1e16:	f009 fe29 	bl	ba6c <memset>
  m_flags = FILE_FLAG_READ;
    1e1a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1e1c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1e1e:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1e20:	4618      	mov	r0, r3
    1e22:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1e26:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1e2a:	bd38      	pop	{r3, r4, r5, pc}

00001e2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    1e2c:	b4f0      	push	{r4, r5, r6, r7}
    1e2e:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1e30:	7809      	ldrb	r1, [r1, #0]
    1e32:	2920      	cmp	r1, #32
    1e34:	d103      	bne.n	1e3e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1e36:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1e3a:	2c20      	cmp	r4, #32
    1e3c:	d0fb      	beq.n	1e36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1e3e:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1e40:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1e42:	782c      	ldrb	r4, [r5, #0]
    1e44:	2c2f      	cmp	r4, #47	; 0x2f
    1e46:	d011      	beq.n	1e6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e48:	b184      	cbz	r4, 1e6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e4a:	1c6e      	adds	r6, r5, #1
    1e4c:	2c3c      	cmp	r4, #60	; 0x3c
    1e4e:	4f1e      	ldr	r7, [pc, #120]	; (1ec8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    1e50:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1e52:	d82a      	bhi.n	1eaa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1e54:	2c21      	cmp	r4, #33	; 0x21
    1e56:	d812      	bhi.n	1e7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1e58:	f104 3cff 	add.w	ip, r4, #4294967295
    1e5c:	f1bc 0f1e 	cmp.w	ip, #30
    1e60:	d816      	bhi.n	1e90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    1e62:	2000      	movs	r0, #0
    1e64:	bcf0      	pop	{r4, r5, r6, r7}
    1e66:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    1e68:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1e6c:	2c20      	cmp	r4, #32
    1e6e:	d0fb      	beq.n	1e68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1e70:	2c2f      	cmp	r4, #47	; 0x2f
    1e72:	d0f9      	beq.n	1e68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1e74:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1e76:	4611      	mov	r1, r2
}
    1e78:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1e7a:	f000 bfd5 	b.w	2e28 <ExFatFile::hashName(ExName_t*)>
    1e7e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1e82:	fa5f fc8c 	uxtb.w	ip, ip
    1e86:	fa27 fc0c 	lsr.w	ip, r7, ip
    1e8a:	f01c 0f01 	tst.w	ip, #1
    1e8e:	d1e8      	bne.n	1e62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1e90:	2c2e      	cmp	r4, #46	; 0x2e
    1e92:	d001      	beq.n	1e98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1e94:	2c20      	cmp	r4, #32
    1e96:	d10f      	bne.n	1eb8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    1e98:	f816 4b01 	ldrb.w	r4, [r6], #1
    1e9c:	2c00      	cmp	r4, #0
    1e9e:	d0e5      	beq.n	1e6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1ea0:	2c2f      	cmp	r4, #47	; 0x2f
    1ea2:	d0e3      	beq.n	1e6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1ea4:	2c3c      	cmp	r4, #60	; 0x3c
    1ea6:	4635      	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    1ea8:	d9d4      	bls.n	1e54 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1eaa:	2c5c      	cmp	r4, #92	; 0x5c
    1eac:	d0d9      	beq.n	1e62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1eae:	d905      	bls.n	1ebc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    1eb0:	2c7c      	cmp	r4, #124	; 0x7c
    1eb2:	d0d6      	beq.n	1e62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1eb4:	0621      	lsls	r1, r4, #24
    1eb6:	d4d4      	bmi.n	1e62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1eb8:	6096      	str	r6, [r2, #8]
    1eba:	e7ed      	b.n	1e98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1ebc:	3c3e      	subs	r4, #62	; 0x3e
    1ebe:	2c01      	cmp	r4, #1
    1ec0:	d8fa      	bhi.n	1eb8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    1ec2:	2000      	movs	r0, #0
    1ec4:	bcf0      	pop	{r4, r5, r6, r7}
    1ec6:	4770      	bx	lr
    1ec8:	05002101 	.word	0x05002101

00001ecc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    1ed0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1ed4:	b083      	sub	sp, #12
    1ed6:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1ed8:	07dc      	lsls	r4, r3, #31
    1eda:	d574      	bpl.n	1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1edc:	0658      	lsls	r0, r3, #25
    1ede:	460f      	mov	r7, r1
    1ee0:	4690      	mov	r8, r2
    1ee2:	f140 80b0 	bpl.w	2046 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1ee6:	e9d5 2300 	ldrd	r2, r3, [r5]
    1eea:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1eee:	eb18 0402 	adds.w	r4, r8, r2
    1ef2:	f143 0300 	adc.w	r3, r3, #0
    1ef6:	42a1      	cmp	r1, r4
    1ef8:	eb70 0303 	sbcs.w	r3, r0, r3
    1efc:	f0c0 80a9 	bcc.w	2052 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1f00:	f1b8 0f00 	cmp.w	r8, #0
    1f04:	d05b      	beq.n	1fbe <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1f06:	4646      	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1f08:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1f0c:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1f10:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1f14:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1f18:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1f1a:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1f1e:	2c00      	cmp	r4, #0
    1f20:	d170      	bne.n	2004 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1f22:	4313      	orrs	r3, r2
    1f24:	d170      	bne.n	2008 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1f26:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1f2a:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    1f2c:	bf4c      	ite	mi
    1f2e:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1f32:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1f34:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1f36:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1f3a:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1f3c:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1f40:	0a63      	lsrs	r3, r4, #9
    1f42:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1f44:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1f48:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    1f4a:	f1bb 0f00 	cmp.w	fp, #0
    1f4e:	d145      	bne.n	1fdc <ExFatFile::read(void*, unsigned int)+0x110>
    1f50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1f54:	d342      	bcc.n	1fdc <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    1f56:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
    1f5a:	4291      	cmp	r1, r2
    1f5c:	d03e      	beq.n	1fdc <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    1f5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1f62:	d358      	bcc.n	2016 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    1f64:	f04f 0b01 	mov.w	fp, #1
    1f68:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    1f6c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1f70:	0a73      	lsrs	r3, r6, #9
    1f72:	459b      	cmp	fp, r3
    1f74:	bf28      	it	cs
    1f76:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1f78:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1f7a:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1f7e:	d80a      	bhi.n	1f96 <ExFatFile::read(void*, unsigned int)+0xca>
    1f80:	eb01 030b 	add.w	r3, r1, fp
    1f84:	429a      	cmp	r2, r3
    1f86:	d206      	bcs.n	1f96 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1f88:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f8c:	9101      	str	r1, [sp, #4]
    1f8e:	f005 f8e9 	bl	7164 <FsCache::sync()>
    1f92:	9901      	ldr	r1, [sp, #4]
    1f94:	b1b8      	cbz	r0, 1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1f96:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1f9a:	465b      	mov	r3, fp
    1f9c:	6802      	ldr	r2, [r0, #0]
    1f9e:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1fa2:	463a      	mov	r2, r7
    1fa4:	47d0      	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1fa6:	b170      	cbz	r0, 1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1fa8:	4623      	mov	r3, r4
    dst += n;
    1faa:	4427      	add	r7, r4
    m_curPosition += n;
    1fac:	e9d5 1200 	ldrd	r1, r2, [r5]
    1fb0:	185b      	adds	r3, r3, r1
    1fb2:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1fb6:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1fb8:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1fbc:	d1a8      	bne.n	1f10 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1fbe:	4640      	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    1fc0:	b003      	add	sp, #12
    1fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1fc6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1fca:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1fce:	f043 0302 	orr.w	r3, r3, #2
    1fd2:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1fd6:	b003      	add	sp, #12
    1fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1fdc:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1fe0:	2200      	movs	r2, #0
    1fe2:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1fe6:	42b4      	cmp	r4, r6
    1fe8:	bf28      	it	cs
    1fea:	4634      	movcs	r4, r6
    1fec:	f005 f8e6 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d0e8      	beq.n	1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1ff4:	eb00 010b 	add.w	r1, r0, fp
    1ff8:	4622      	mov	r2, r4
    1ffa:	4638      	mov	r0, r7
    1ffc:	f006 f86a 	bl	80d4 <memcpy>
    m_curPosition += n;
    2000:	4623      	mov	r3, r4
    2002:	e7d2      	b.n	1faa <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    2004:	69aa      	ldr	r2, [r5, #24]
    2006:	e796      	b.n	1f36 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    2008:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    200c:	065b      	lsls	r3, r3, #25
    200e:	d50e      	bpl.n	202e <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    2010:	69aa      	ldr	r2, [r5, #24]
    2012:	3201      	adds	r2, #1
    2014:	e78e      	b.n	1f34 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    2016:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    201a:	463a      	mov	r2, r7
    201c:	6803      	ldr	r3, [r0, #0]
    201e:	691b      	ldr	r3, [r3, #16]
    2020:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    2022:	2800      	cmp	r0, #0
    2024:	d0cf      	beq.n	1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
    2026:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    202a:	461c      	mov	r4, r3
    202c:	e7bd      	b.n	1faa <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    202e:	464a      	mov	r2, r9
    2030:	4650      	mov	r0, sl
    2032:	69a9      	ldr	r1, [r5, #24]
    2034:	f001 f864 	bl	3100 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    2038:	2800      	cmp	r0, #0
    203a:	dbc4      	blt.n	1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    203c:	d00c      	beq.n	2058 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    203e:	f8d5 a020 	ldr.w	sl, [r5, #32]
    2042:	69aa      	ldr	r2, [r5, #24]
    2044:	e777      	b.n	1f36 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    2046:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    204a:	0719      	lsls	r1, r3, #28
    204c:	f57f af58 	bpl.w	1f00 <ExFatFile::read(void*, unsigned int)+0x34>
    2050:	e749      	b.n	1ee6 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    2052:	eba1 0802 	sub.w	r8, r1, r2
    2056:	e753      	b.n	1f00 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    2058:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    205c:	f013 0f50 	tst.w	r3, #80	; 0x50
    2060:	d0b1      	beq.n	1fc6 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    2062:	eba8 0806 	sub.w	r8, r8, r6
    2066:	4640      	mov	r0, r8
    2068:	e7aa      	b.n	1fc0 <ExFatFile::read(void*, unsigned int)+0xf4>
    206a:	bf00      	nop

0000206c <ExFatFile::peek()>:
int ExFatFile::peek() {
    206c:	b5f0      	push	{r4, r5, r6, r7, lr}
    206e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2070:	2201      	movs	r2, #1
    2072:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    2074:	6985      	ldr	r5, [r0, #24]
    2076:	f10d 0107 	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    207a:	e9d0 6700 	ldrd	r6, r7, [r0]
    207e:	f7ff ff25 	bl	1ecc <ExFatFile::read(void*, unsigned int)>
    2082:	2801      	cmp	r0, #1
  m_curCluster = saveCurCluster;
    2084:	61a5      	str	r5, [r4, #24]
    2086:	bf0c      	ite	eq
    2088:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    208c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    2090:	e9c4 6700 	strd	r6, r7, [r4]
}
    2094:	b003      	add	sp, #12
    2096:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002098 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    2098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    209c:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    209e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    20a2:	b083      	sub	sp, #12
    20a4:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    20a6:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    20aa:	2b00      	cmp	r3, #0
    20ac:	d051      	beq.n	2152 <ExFatFile::seekSet(unsigned long long)+0xba>
    20ae:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    20b0:	e9d0 1c00 	ldrd	r1, ip, [r0]
    20b4:	45bc      	cmp	ip, r7
    20b6:	bf08      	it	eq
    20b8:	4291      	cmpeq	r1, r2
    20ba:	d05c      	beq.n	2176 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    20bc:	ea56 0207 	orrs.w	r2, r6, r7
    20c0:	d04d      	beq.n	215e <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    20c2:	071d      	lsls	r5, r3, #28
    20c4:	d504      	bpl.n	20d0 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    20c6:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    20ca:	42b0      	cmp	r0, r6
    20cc:	41ba      	sbcs	r2, r7
    20ce:	d340      	bcc.n	2152 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    20d0:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    20d4:	1e75      	subs	r5, r6, #1
    20d6:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    20da:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    20dc:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    20e0:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    20e4:	3209      	adds	r2, #9
    20e6:	b2d2      	uxtb	r2, r2
    20e8:	f1c2 0e20 	rsb	lr, r2, #32
    20ec:	40d5      	lsrs	r5, r2
    20ee:	f1a2 0920 	sub.w	r9, r2, #32
    20f2:	fa00 fb0e 	lsl.w	fp, r0, lr
    20f6:	fa20 f009 	lsr.w	r0, r0, r9
    20fa:	ea45 050b 	orr.w	r5, r5, fp
    20fe:	4305      	orrs	r5, r0
  if (isContiguous()) {
    2100:	9801      	ldr	r0, [sp, #4]
    2102:	0640      	lsls	r0, r0, #25
    2104:	d433      	bmi.n	216e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2106:	1e48      	subs	r0, r1, #1
    2108:	fa20 f202 	lsr.w	r2, r0, r2
    210c:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    2110:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2114:	fa00 fe0e 	lsl.w	lr, r0, lr
    2118:	fa20 f009 	lsr.w	r0, r0, r9
    211c:	ea42 020e 	orr.w	r2, r2, lr
    2120:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    2124:	d001      	beq.n	212a <ExFatFile::seekSet(unsigned long long)+0x92>
    2126:	4295      	cmp	r5, r2
    2128:	d229      	bcs.n	217e <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    212a:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    212c:	bf4c      	ite	mi
    212e:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    2132:	69e3      	ldrpl	r3, [r4, #28]
    2134:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2136:	f104 0918 	add.w	r9, r4, #24
    213a:	e006      	b.n	214a <ExFatFile::seekSet(unsigned long long)+0xb2>
    213c:	69a1      	ldr	r1, [r4, #24]
    213e:	3d01      	subs	r5, #1
    2140:	6a20      	ldr	r0, [r4, #32]
    2142:	f000 ffdd 	bl	3100 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2146:	2800      	cmp	r0, #0
    2148:	dd03      	ble.n	2152 <ExFatFile::seekSet(unsigned long long)+0xba>
    214a:	464a      	mov	r2, r9
  while (nNew--) {
    214c:	2d00      	cmp	r5, #0
    214e:	d1f5      	bne.n	213c <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    2150:	e007      	b.n	2162 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    2152:	2000      	movs	r0, #0
  m_curCluster = tmp;
    2154:	f8c4 8018 	str.w	r8, [r4, #24]
}
    2158:	b003      	add	sp, #12
    215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    215e:	2300      	movs	r3, #0
    2160:	6183      	str	r3, [r0, #24]
  return true;
    2162:	2001      	movs	r0, #1
  m_curPosition = pos;
    2164:	e9c4 6700 	strd	r6, r7, [r4]
}
    2168:	b003      	add	sp, #12
    216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    216e:	69e3      	ldr	r3, [r4, #28]
    2170:	442b      	add	r3, r5
    2172:	61a3      	str	r3, [r4, #24]
    goto done;
    2174:	e7f5      	b.n	2162 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    2176:	2001      	movs	r0, #1
}
    2178:	b003      	add	sp, #12
    217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    217e:	1aad      	subs	r5, r5, r2
    2180:	e7d9      	b.n	2136 <ExFatFile::seekSet(unsigned long long)+0x9e>
    2182:	bf00      	nop

00002184 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2188:	4690      	mov	r8, r2
    218a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    218e:	b08f      	sub	sp, #60	; 0x3c
    2190:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    2192:	2a00      	cmp	r2, #0
    2194:	f040 80d6 	bne.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    2198:	468b      	mov	fp, r1
    219a:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    219e:	f011 0f50 	tst.w	r1, #80	; 0x50
    21a2:	f000 80cf 	beq.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    21a6:	f003 0103 	and.w	r1, r3, #3
    21aa:	469a      	mov	sl, r3
    21ac:	2903      	cmp	r1, #3
    21ae:	f000 80c9 	beq.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    21b2:	3101      	adds	r1, #1
    21b4:	f003 0008 	and.w	r0, r3, #8
    21b8:	ea41 0300 	orr.w	r3, r1, r0
    21bc:	9302      	str	r3, [sp, #8]
  if (fname) {
    21be:	f1b8 0f00 	cmp.w	r8, #0
    21c2:	f000 80c9 	beq.w	2358 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    21c6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    21ca:	f101 070e 	add.w	r7, r1, #14
    21ce:	49bd      	ldr	r1, [pc, #756]	; (24c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    21d0:	fba1 1707 	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    21d4:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    21d8:	08ff      	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    21da:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    21dc:	f107 0702 	add.w	r7, r7, #2
    21e0:	b2ff      	uxtb	r7, r7
  if (pos == m_curPosition) {
    21e2:	d005      	beq.n	21f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    21e4:	2000      	movs	r0, #0
    21e6:	2100      	movs	r1, #0
    m_curCluster = 0;
    21e8:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    21ec:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    21f0:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    21f2:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    21f4:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    21f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21fa:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    21fc:	2220      	movs	r2, #32
    21fe:	a906      	add	r1, sp, #24
    2200:	4658      	mov	r0, fp
    2202:	f7ff fe63 	bl	1ecc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2206:	b300      	cbz	r0, 224a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    2208:	2820      	cmp	r0, #32
    220a:	f040 809b 	bne.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    220e:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    2212:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2216:	2a00      	cmp	r2, #0
    2218:	f2c0 80a0 	blt.w	235c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    221c:	b934      	cbnz	r4, 222c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    221e:	f8db 2000 	ldr.w	r2, [fp]
    2222:	f1a2 0920 	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    2226:	f8db 2018 	ldr.w	r2, [fp, #24]
    222a:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    222c:	42bc      	cmp	r4, r7
    222e:	d201      	bcs.n	2234 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    2230:	3401      	adds	r4, #1
    2232:	b2e4      	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    2234:	2b00      	cmp	r3, #0
    2236:	f000 80f9 	beq.w	242c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    223a:	2220      	movs	r2, #32
    223c:	a906      	add	r1, sp, #24
    223e:	4658      	mov	r0, fp
      inSet = false;
    2240:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    2242:	f7ff fe43 	bl	1ecc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2246:	2800      	cmp	r0, #0
    2248:	d1de      	bne.n	2208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    224a:	f41a 7f00 	tst.w	sl, #512	; 0x200
    224e:	d079      	beq.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2250:	9b02      	ldr	r3, [sp, #8]
    2252:	079b      	lsls	r3, r3, #30
    2254:	d576      	bpl.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2256:	f1b8 0f00 	cmp.w	r8, #0
    225a:	d073      	beq.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    225c:	42bc      	cmp	r4, r7
    225e:	d217      	bcs.n	2290 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    2260:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2264:	2220      	movs	r2, #32
    2266:	a906      	add	r1, sp, #24
    2268:	4658      	mov	r0, fp
    226a:	f7ff fe2f 	bl	1ecc <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    226e:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    2270:	2800      	cmp	r0, #0
    2272:	d060      	beq.n	2336 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2274:	2820      	cmp	r0, #32
    2276:	d165      	bne.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    2278:	b92c      	cbnz	r4, 2286 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    227a:	f8db 2000 	ldr.w	r2, [fp]
    227e:	f8db a018 	ldr.w	sl, [fp, #24]
    2282:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    2286:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    2288:	42a7      	cmp	r7, r4
    228a:	d8eb      	bhi.n	2264 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    228c:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    2290:	2238      	movs	r2, #56	; 0x38
    2292:	2100      	movs	r1, #0
    2294:	4628      	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    2296:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    229a:	f009 fbe7 	bl	ba6c <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    229e:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    22a2:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    22a6:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    22a8:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    22aa:	2328      	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    22ac:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    22b0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    22b4:	f8d8 3000 	ldr.w	r3, [r8]
  m_dirPos = freePos;
    22b8:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    22bc:	f8c8 3004 	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    22c0:	b3a7      	cbz	r7, 232c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    22c2:	2400      	movs	r4, #0
      m_setCount = freeNeed - 1;
    22c4:	1e7e      	subs	r6, r7, #1
      if (FsDateTime::callback) {
    22c6:	f8df 9200 	ldr.w	r9, [pc, #512]	; 24c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    22ca:	b2f6      	uxtb	r6, r6
      if (FsDateTime::callback) {
    22cc:	46a2      	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    22ce:	2201      	movs	r2, #1
    22d0:	4651      	mov	r1, sl
    22d2:	4628      	mov	r0, r5
    22d4:	f7ff fd6e 	bl	1db4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    22d8:	4683      	mov	fp, r0
    22da:	b398      	cbz	r0, 2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    22dc:	f990 2000 	ldrsb.w	r2, [r0]
    22e0:	2a00      	cmp	r2, #0
    22e2:	db2f      	blt.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    22e4:	2220      	movs	r2, #32
    22e6:	2100      	movs	r1, #0
    22e8:	f009 fbc0 	bl	ba6c <memset>
    if (i == 0) {
    22ec:	2c00      	cmp	r4, #0
    22ee:	f000 80cb 	beq.w	2488 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    22f2:	f1ba 0f01 	cmp.w	sl, #1
    22f6:	f000 80e9 	beq.w	24cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    22fa:	23c1      	movs	r3, #193	; 0xc1
    22fc:	465a      	mov	r2, fp
    22fe:	f10b 0b20 	add.w	fp, fp, #32
    2302:	f802 3b02 	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    2306:	e9d8 3001 	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    230a:	4298      	cmp	r0, r3
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    230c:	f103 0301 	add.w	r3, r3, #1
    2310:	d007      	beq.n	2322 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2312:	f8c8 3004 	str.w	r3, [r8, #4]
    2316:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    231a:	f822 1b02 	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    231e:	4593      	cmp	fp, r2
    2320:	d1f3      	bne.n	230a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    2322:	3401      	adds	r4, #1
    2324:	fa5f fa84 	uxtb.w	sl, r4
    2328:	4557      	cmp	r7, sl
    232a:	d8d0      	bhi.n	22ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    232c:	4628      	mov	r0, r5
    232e:	f000 fa75 	bl	281c <ExFatFile::sync()>
    2332:	4606      	mov	r6, r0
    2334:	e00c      	b.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    2336:	4658      	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    2338:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    233c:	f000 fa9e 	bl	287c <ExFatFile::addDirCluster()>
    2340:	2800      	cmp	r0, #0
    2342:	d178      	bne.n	2436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    2344:	2300      	movs	r3, #0
  return false;
    2346:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    2348:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    234c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    2350:	4630      	mov	r0, r6
    2352:	b00f      	add	sp, #60	; 0x3c
    2354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    2358:	2703      	movs	r7, #3
    235a:	e749      	b.n	21f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    235c:	bb56      	cbnz	r6, 23b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    235e:	42bc      	cmp	r4, r7
    2360:	bf38      	it	cc
    2362:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2364:	2b85      	cmp	r3, #133	; 0x85
    2366:	f47f af49 	bne.w	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    236a:	4631      	mov	r1, r6
    236c:	2238      	movs	r2, #56	; 0x38
    236e:	4628      	mov	r0, r5
      inSet = true;
    2370:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    2372:	f009 fb7b 	bl	ba6c <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2376:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    237a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    237e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2382:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    2386:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    2388:	bf58      	it	pl
    238a:	f043 0308 	orrpl.w	r3, r3, #8
    238e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2392:	f8db 3000 	ldr.w	r3, [fp]
    2396:	f8db 2020 	ldr.w	r2, [fp, #32]
    239a:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    239c:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    239e:	f8db 2018 	ldr.w	r2, [fp, #24]
    23a2:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    23a6:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    23aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    23ae:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    23b2:	e723      	b.n	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    23b4:	2bc0      	cmp	r3, #192	; 0xc0
    23b6:	d00e      	beq.n	23d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    23b8:	2bc1      	cmp	r3, #193	; 0xc1
    23ba:	f47f af3e 	bne.w	223a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    23be:	4642      	mov	r2, r8
    23c0:	a906      	add	r1, sp, #24
    23c2:	4628      	mov	r0, r5
    23c4:	f000 fcfe 	bl	2dc4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    23c8:	b118      	cbz	r0, 23d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    23ca:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
    23ce:	429a      	cmp	r2, r3
    23d0:	d034      	beq.n	243c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    23d2:	4606      	mov	r6, r0
    23d4:	e712      	b.n	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    23d6:	9b02      	ldr	r3, [sp, #8]
    23d8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    23dc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    23e0:	079b      	lsls	r3, r3, #30
    23e2:	d502      	bpl.n	23ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    23e4:	9b03      	ldr	r3, [sp, #12]
    23e6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    23ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23ec:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    23ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    23f2:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    23f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    23fa:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    23fe:	f1b8 0f00 	cmp.w	r8, #0
    2402:	d01b      	beq.n	243c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    2404:	f8d8 3000 	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    2408:	f8d8 200c 	ldr.w	r2, [r8, #12]
    240c:	f8c8 3004 	str.w	r3, [r8, #4]
    2410:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2414:	429a      	cmp	r2, r3
    2416:	f47f af10 	bne.w	223a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    241a:	f8b8 6010 	ldrh.w	r6, [r8, #16]
    241e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2422:	1af6      	subs	r6, r6, r3
    2424:	fab6 f686 	clz	r6, r6
    2428:	0976      	lsrs	r6, r6, #5
    242a:	e6e7      	b.n	21fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    242c:	f1b8 0f00 	cmp.w	r8, #0
    2430:	f47f af0b 	bne.w	224a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    2434:	e786      	b.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    2436:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    243a:	e725      	b.n	2288 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    243c:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    2440:	d180      	bne.n	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    2442:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    2446:	d15d      	bne.n	2504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    2448:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    244c:	079f      	lsls	r7, r3, #30
    244e:	d459      	bmi.n	2504 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    2450:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2454:	f47f af76 	bne.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2458:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    245c:	f43f af78 	beq.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    2460:	4628      	mov	r0, r5
    2462:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    2466:	f7ff fe17 	bl	2098 <ExFatFile::seekSet(unsigned long long)>
    246a:	2800      	cmp	r0, #0
    246c:	f43f af6a 	beq.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    2470:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2474:	079a      	lsls	r2, r3, #30
    2476:	f57f af6b 	bpl.w	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    247a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    247e:	f043 0320 	orr.w	r3, r3, #32
    2482:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    2486:	e763      	b.n	2350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    2488:	2385      	movs	r3, #133	; 0x85
    248a:	f88b 3000 	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    248e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    2492:	f88b 6001 	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    2496:	f8d9 3000 	ldr.w	r3, [r9]
    249a:	b353      	cbz	r3, 24f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    249c:	f10d 0213 	add.w	r2, sp, #19
    24a0:	f10d 0116 	add.w	r1, sp, #22
    24a4:	a805      	add	r0, sp, #20
    24a6:	4798      	blx	r3
    24a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    24ac:	f8ab 300a 	strh.w	r3, [fp, #10]
    24b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    24b4:	f8ab 3008 	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    24b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    24bc:	f88b 3014 	strb.w	r3, [fp, #20]
    24c0:	e72f      	b.n	2322 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    24c2:	bf00      	nop
    24c4:	88888889 	.word	0x88888889
    24c8:	2002886c 	.word	0x2002886c
      dirStream->type = EXFAT_TYPE_STREAM;
    24cc:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    24ce:	f88b a001 	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    24d2:	f88b 3000 	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    24d6:	9b02      	ldr	r3, [sp, #8]
    24d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    24dc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    24e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    24e4:	f88b 3003 	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    24e8:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    24ec:	f8ab 3004 	strh.w	r3, [fp, #4]
}
    24f0:	e717      	b.n	2322 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    24f2:	f245 6321 	movw	r3, #22049	; 0x5621
    24f6:	f8ab 300a 	strh.w	r3, [fp, #10]
    24fa:	f8ab 300e 	strh.w	r3, [fp, #14]
    24fe:	f8ab 3012 	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    2502:	e70e      	b.n	2322 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    2504:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    2508:	06dc      	lsls	r4, r3, #27
    250a:	f53f af1b 	bmi.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    250e:	07d8      	lsls	r0, r3, #31
    2510:	f53f af18 	bmi.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    2514:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2518:	d013      	beq.n	2542 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    251a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    251e:	0799      	lsls	r1, r3, #30
    2520:	f57f af10 	bpl.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    2524:	2200      	movs	r2, #0
    2526:	2300      	movs	r3, #0
    2528:	4628      	mov	r0, r5
    252a:	f7ff fdb5 	bl	2098 <ExFatFile::seekSet(unsigned long long)>
    252e:	2800      	cmp	r0, #0
    2530:	f43f af08 	beq.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2534:	4628      	mov	r0, r5
    2536:	f000 fa93 	bl	2a60 <ExFatFile::truncate()>
    253a:	2800      	cmp	r0, #0
    253c:	f43f af02 	beq.w	2344 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    2540:	e796      	b.n	2470 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2542:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    2546:	d093      	beq.n	2470 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    2548:	e78a      	b.n	2460 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    254a:	bf00      	nop

0000254c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    254c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    2550:	2500      	movs	r5, #0
    2552:	b097      	sub	sp, #92	; 0x5c
    2554:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    2556:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    255a:	9201      	str	r2, [sp, #4]
    255c:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    255e:	2b00      	cmp	r3, #0
    2560:	d13e      	bne.n	25e0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    2562:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2566:	460f      	mov	r7, r1
    2568:	f013 0f50 	tst.w	r3, #80	; 0x50
    256c:	d038      	beq.n	25e0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    256e:	7813      	ldrb	r3, [r2, #0]
    2570:	4604      	mov	r4, r0
    2572:	4616      	mov	r6, r2
    2574:	2b2f      	cmp	r3, #47	; 0x2f
    2576:	d037      	beq.n	25e8 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2578:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    257c:	ab01      	add	r3, sp, #4
    257e:	aa03      	add	r2, sp, #12
    2580:	4631      	mov	r1, r6
    2582:	4620      	mov	r0, r4
    2584:	f7ff fc52 	bl	1e2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2588:	b350      	cbz	r0, 25e0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    258a:	9e01      	ldr	r6, [sp, #4]
    258c:	7833      	ldrb	r3, [r6, #0]
    258e:	2b00      	cmp	r3, #0
    2590:	d03e      	beq.n	2610 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2592:	2300      	movs	r3, #0
    2594:	aa03      	add	r2, sp, #12
    2596:	4639      	mov	r1, r7
    2598:	4620      	mov	r0, r4
    259a:	f7ff fdf3 	bl	2184 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    259e:	b1f8      	cbz	r0, 25e0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    25a0:	46a4      	mov	ip, r4
    25a2:	ad08      	add	r5, sp, #32
    25a4:	f104 0730 	add.w	r7, r4, #48	; 0x30
    25a8:	f8dc 0000 	ldr.w	r0, [ip]
    25ac:	f10c 0c10 	add.w	ip, ip, #16
    25b0:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    25b4:	46ae      	mov	lr, r5
    25b6:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    25ba:	3510      	adds	r5, #16
    25bc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    25c0:	45bc      	cmp	ip, r7
    25c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    25c6:	d1ef      	bne.n	25a8 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    25c8:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    25cc:	af08      	add	r7, sp, #32
    tmpDir = *this;
    25ce:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    25d0:	4620      	mov	r0, r4
    25d2:	f000 f923 	bl	281c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    25d6:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    25da:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    25de:	e7cd      	b.n	257c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    25e0:	2000      	movs	r0, #0
}
    25e2:	b017      	add	sp, #92	; 0x5c
    25e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    25e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    25ec:	292f      	cmp	r1, #47	; 0x2f
    25ee:	d0fb      	beq.n	25e8 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    25f0:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    25f2:	b9b1      	cbnz	r1, 2622 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    25f4:	2238      	movs	r2, #56	; 0x38
    25f6:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    25f8:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    25fa:	f009 fa37 	bl	ba6c <memset>
  m_flags = FILE_FLAG_READ;
    25fe:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    2600:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    2602:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    2604:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    2606:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    260a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    260e:	e7e8      	b.n	25e2 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    2610:	464b      	mov	r3, r9
    2612:	aa03      	add	r2, sp, #12
    2614:	4639      	mov	r1, r7
    2616:	4620      	mov	r0, r4
    2618:	f7ff fdb4 	bl	2184 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    261c:	b017      	add	sp, #92	; 0x5c
    261e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    2622:	2238      	movs	r2, #56	; 0x38
    2624:	2100      	movs	r1, #0
    2626:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2628:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    262a:	f009 fa1f 	bl	ba6c <memset>
  m_flags = FILE_FLAG_READ;
    262e:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    2630:	af08      	add	r7, sp, #32
  m_vol = vol;
    2632:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    2634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    2638:	2340      	movs	r3, #64	; 0x40
    263a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    263e:	e79b      	b.n	2578 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

00002640 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    2640:	b119      	cbz	r1, 264a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    2642:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    2646:	f7ff bf81 	b.w	254c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    264a:	4608      	mov	r0, r1
    264c:	4770      	bx	lr
    264e:	bf00      	nop

00002650 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2650:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    2652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2654:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2656:	6a00      	ldr	r0, [r0, #32]
    2658:	b101      	cbz	r1, 265c <ExFatFile::addCluster()+0xc>
    265a:	3101      	adds	r1, #1
    265c:	2201      	movs	r2, #1
    265e:	f000 fc15 	bl	2e8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    2662:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2664:	4605      	mov	r5, r0
  if (find < 2) {
    2666:	d932      	bls.n	26ce <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2668:	2301      	movs	r3, #1
    266a:	4601      	mov	r1, r0
    266c:	6a20      	ldr	r0, [r4, #32]
    266e:	461a      	mov	r2, r3
    2670:	f000 fc6c 	bl	2f4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2674:	4606      	mov	r6, r0
    2676:	b350      	cbz	r0, 26ce <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2678:	69a3      	ldr	r3, [r4, #24]
    267a:	b35b      	cbz	r3, 26d4 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    267c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    2680:	0651      	lsls	r1, r2, #25
    2682:	d512      	bpl.n	26aa <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2684:	1c59      	adds	r1, r3, #1
    2686:	42a9      	cmp	r1, r5
    2688:	d018      	beq.n	26bc <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    268a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    268e:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2690:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2694:	e005      	b.n	26a2 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    2696:	6a20      	ldr	r0, [r4, #32]
    2698:	f000 fd54 	bl	3144 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    269c:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    269e:	b1b0      	cbz	r0, 26ce <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26a0:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    26a2:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26a4:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    26a6:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    26a8:	d3f5      	bcc.n	2696 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    26aa:	f04f 32ff 	mov.w	r2, #4294967295
    26ae:	4629      	mov	r1, r5
    26b0:	6a20      	ldr	r0, [r4, #32]
    26b2:	f000 fd47 	bl	3144 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    26b6:	b150      	cbz	r0, 26ce <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    26b8:	69a1      	ldr	r1, [r4, #24]
    26ba:	b911      	cbnz	r1, 26c2 <ExFatFile::addCluster()+0x72>
}
    26bc:	4630      	mov	r0, r6
  m_curCluster = find;
    26be:	61a5      	str	r5, [r4, #24]
}
    26c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    26c2:	462a      	mov	r2, r5
    26c4:	6a20      	ldr	r0, [r4, #32]
    26c6:	f000 fd3d 	bl	3144 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    26ca:	2800      	cmp	r0, #0
    26cc:	d1f6      	bne.n	26bc <ExFatFile::addCluster()+0x6c>
  return false;
    26ce:	2600      	movs	r6, #0
}
    26d0:	4630      	mov	r0, r6
    26d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    26d4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    26d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26dc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    26e0:	e7ec      	b.n	26bc <ExFatFile::addCluster()+0x6c>
    26e2:	bf00      	nop

000026e4 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    26e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26e8:	f04f 0800 	mov.w	r8, #0
    26ec:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    26ee:	4f4a      	ldr	r7, [pc, #296]	; (2818 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    26f0:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    26f2:	4644      	mov	r4, r8
    26f4:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    26f6:	2200      	movs	r2, #0
    26f8:	4630      	mov	r0, r6
    26fa:	f7ff fb5b 	bl	1db4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    26fe:	4605      	mov	r5, r0
    2700:	b130      	cbz	r0, 2710 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    2702:	7801      	ldrb	r1, [r0, #0]
    2704:	29c0      	cmp	r1, #192	; 0xc0
    2706:	d069      	beq.n	27dc <ExFatFile::syncDir()+0xf8>
    2708:	29c1      	cmp	r1, #193	; 0xc1
    270a:	d02b      	beq.n	2764 <ExFatFile::syncDir()+0x80>
    270c:	2985      	cmp	r1, #133	; 0x85
    270e:	d009      	beq.n	2724 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    2710:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    2714:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2716:	f043 0301 	orr.w	r3, r3, #1
    271a:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    271e:	b002      	add	sp, #8
    2720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    2724:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    2728:	f003 0337 	and.w	r3, r3, #55	; 0x37
    272c:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    272e:	683b      	ldr	r3, [r7, #0]
    2730:	b183      	cbz	r3, 2754 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    2732:	f10d 0203 	add.w	r2, sp, #3
    2736:	f10d 0106 	add.w	r1, sp, #6
    273a:	a801      	add	r0, sp, #4
    273c:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    273e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2742:	81ab      	strh	r3, [r5, #12]
    2744:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    2746:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    274a:	81eb      	strh	r3, [r5, #14]
    274c:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    274e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2752:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    2754:	6a32      	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    2756:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    275a:	f043 0301 	orr.w	r3, r3, #1
    275e:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2762:	7829      	ldrb	r1, [r5, #0]
    2764:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2768:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    276a:	fab0 f080 	clz	r0, r0
    276e:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2770:	e001      	b.n	2776 <ExFatFile::syncDir()+0x92>
    2772:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2774:	5ca9      	ldrb	r1, [r5, r2]
    2776:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2778:	2a01      	cmp	r2, #1
    277a:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    277e:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    2782:	fa11 f383 	uxtah	r3, r1, r3
    2786:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2788:	d101      	bne.n	278e <ExFatFile::syncDir()+0xaa>
    278a:	2800      	cmp	r0, #0
    278c:	d1f1      	bne.n	2772 <ExFatFile::syncDir()+0x8e>
    278e:	2a1f      	cmp	r2, #31
    2790:	d9f0      	bls.n	2774 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    2792:	f108 0801 	add.w	r8, r8, #1
    2796:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    279a:	fa5f f188 	uxtb.w	r1, r8
    279e:	428b      	cmp	r3, r1
    27a0:	d2a9      	bcs.n	26f6 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    27a2:	2201      	movs	r2, #1
    27a4:	f106 0124 	add.w	r1, r6, #36	; 0x24
    27a8:	6a30      	ldr	r0, [r6, #32]
    27aa:	f000 fc4b 	bl	3044 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    27ae:	2800      	cmp	r0, #0
    27b0:	d0ae      	beq.n	2710 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    27b2:	6a35      	ldr	r5, [r6, #32]
    27b4:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27b6:	4628      	mov	r0, r5
    27b8:	f004 fcd4 	bl	7164 <FsCache::sync()>
    27bc:	2800      	cmp	r0, #0
    27be:	d0a7      	beq.n	2710 <ExFatFile::syncDir()+0x2c>
    27c0:	f505 7004 	add.w	r0, r5, #528	; 0x210
    27c4:	f004 fcce 	bl	7164 <FsCache::sync()>
    27c8:	2800      	cmp	r0, #0
    27ca:	d0a1      	beq.n	2710 <ExFatFile::syncDir()+0x2c>
    27cc:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    27d0:	6803      	ldr	r3, [r0, #0]
    27d2:	69db      	ldr	r3, [r3, #28]
    27d4:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27d6:	2800      	cmp	r0, #0
    27d8:	d1a1      	bne.n	271e <ExFatFile::syncDir()+0x3a>
    27da:	e799      	b.n	2710 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    27dc:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    27e0:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    27e4:	7843      	ldrb	r3, [r0, #1]
    27e6:	bf14      	ite	ne
    27e8:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    27ec:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    27f0:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    27f2:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    27f6:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    27fa:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    27fe:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    2802:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    2804:	e9c5 0106 	strd	r0, r1, [r5, #24]
    2808:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    280c:	f043 0301 	orr.w	r3, r3, #1
    2810:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2814:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    2816:	e7a5      	b.n	2764 <ExFatFile::syncDir()+0x80>
    2818:	2002886c 	.word	0x2002886c

0000281c <ExFatFile::sync()>:
bool ExFatFile::sync() {
    281c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    281e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2822:	b343      	cbz	r3, 2876 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2824:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    2828:	4604      	mov	r4, r0
    282a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    282e:	2a00      	cmp	r2, #0
    2830:	db0c      	blt.n	284c <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    2832:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2834:	4628      	mov	r0, r5
    2836:	f004 fc95 	bl	7164 <FsCache::sync()>
    283a:	b978      	cbnz	r0, 285c <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    283c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    2840:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2842:	f043 0301 	orr.w	r3, r3, #1
    2846:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    284a:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    284c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2850:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    2854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2858:	f7ff bf44 	b.w	26e4 <ExFatFile::syncDir()>
    285c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2860:	f004 fc80 	bl	7164 <FsCache::sync()>
    2864:	2800      	cmp	r0, #0
    2866:	d0e9      	beq.n	283c <ExFatFile::sync()+0x20>
    2868:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    286c:	6803      	ldr	r3, [r0, #0]
    286e:	69db      	ldr	r3, [r3, #28]
    2870:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2872:	2800      	cmp	r0, #0
    2874:	d0e2      	beq.n	283c <ExFatFile::sync()+0x20>
    return true;
    2876:	2001      	movs	r0, #1
}
    2878:	bd38      	pop	{r3, r4, r5, pc}
    287a:	bf00      	nop

0000287c <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    287c:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    287e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    2882:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2884:	065a      	lsls	r2, r3, #25
    2886:	d44c      	bmi.n	2922 <ExFatFile::addDirCluster()+0xa6>
    2888:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    288a:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    288c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    2890:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    2892:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    2896:	d301      	bcc.n	289c <ExFatFile::addDirCluster()+0x20>
}
    2898:	2000      	movs	r0, #0
    289a:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    289c:	4628      	mov	r0, r5
    289e:	f7ff fed7 	bl	2650 <ExFatFile::addCluster()>
    28a2:	2800      	cmp	r0, #0
    28a4:	d0f8      	beq.n	2898 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    28a6:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    28a8:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    28aa:	69ae      	ldr	r6, [r5, #24]
    28ac:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    28b0:	3e02      	subs	r6, #2
    28b2:	409e      	lsls	r6, r3
    28b4:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    28b8:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    28ba:	1931      	adds	r1, r6, r4
    28bc:	2205      	movs	r2, #5
    28be:	f500 7004 	add.w	r0, r0, #528	; 0x210
    28c2:	3401      	adds	r4, #1
    28c4:	f004 fc7a 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    28c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    28cc:	2100      	movs	r1, #0
    if (!cache) {
    28ce:	2800      	cmp	r0, #0
    28d0:	d0e2      	beq.n	2898 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    28d2:	f009 f8cb 	bl	ba6c <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    28d6:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    28d8:	2301      	movs	r3, #1
    28da:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    28de:	4093      	lsls	r3, r2
    28e0:	429c      	cmp	r4, r3
    28e2:	d3ea      	bcc.n	28ba <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    28e4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    28e8:	065b      	lsls	r3, r3, #25
    28ea:	d415      	bmi.n	2918 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    28ec:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    28f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    28f4:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    28f8:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    28fc:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    2900:	189b      	adds	r3, r3, r2
    2902:	f141 0000 	adc.w	r0, r1, #0
    2906:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    2908:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    290c:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    290e:	189b      	adds	r3, r3, r2
    2910:	f141 0100 	adc.w	r1, r1, #0
    2914:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    2918:	4628      	mov	r0, r5
}
    291a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    291e:	f7ff bf7d 	b.w	281c <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2922:	6a00      	ldr	r0, [r0, #32]
    2924:	f000 fd04 	bl	3330 <ExFatPartition::rootLength()>
    2928:	e7af      	b.n	288a <ExFatFile::addDirCluster()+0xe>
    292a:	bf00      	nop

0000292c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    292c:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    292e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2932:	f013 0f50 	tst.w	r3, #80	; 0x50
    2936:	d102      	bne.n	293e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    2938:	2500      	movs	r5, #0
}
    293a:	4628      	mov	r0, r5
    293c:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    293e:	f640 2302 	movw	r3, #2562	; 0xa02
    2942:	4604      	mov	r4, r0
    2944:	f7ff fc1e 	bl	2184 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2948:	2800      	cmp	r0, #0
    294a:	d0f5      	beq.n	2938 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    294c:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    294e:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    2950:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    2954:	f7ff ff92 	bl	287c <ExFatFile::addDirCluster()>
    2958:	4605      	mov	r5, r0
    295a:	2800      	cmp	r0, #0
    295c:	d0ec      	beq.n	2938 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    295e:	69a1      	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    2960:	2200      	movs	r2, #0
    2962:	2300      	movs	r3, #0
    2964:	4620      	mov	r0, r4
    2966:	61e1      	str	r1, [r4, #28]
    2968:	f7ff fb96 	bl	2098 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    296c:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    296e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2972:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    2976:	2b00      	cmp	r3, #0
    2978:	d0df      	beq.n	293a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    297a:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    297c:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    297e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2986:	f7ff bead 	b.w	26e4 <ExFatFile::syncDir()>
    298a:	bf00      	nop

0000298c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    298c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    298e:	2500      	movs	r5, #0
    2990:	b097      	sub	sp, #92	; 0x5c
    2992:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    2994:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2998:	9201      	str	r2, [sp, #4]
    299a:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    299c:	2b00      	cmp	r3, #0
    299e:	d146      	bne.n	2a2e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    29a0:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    29a4:	460e      	mov	r6, r1
    29a6:	f013 0f50 	tst.w	r3, #80	; 0x50
    29aa:	d040      	beq.n	2a2e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    29ac:	7813      	ldrb	r3, [r2, #0]
    29ae:	4604      	mov	r4, r0
    29b0:	4611      	mov	r1, r2
    29b2:	2b2f      	cmp	r3, #47	; 0x2f
    29b4:	d03e      	beq.n	2a34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    29b6:	ab01      	add	r3, sp, #4
    29b8:	aa03      	add	r2, sp, #12
    29ba:	4620      	mov	r0, r4
    29bc:	f7ff fa36 	bl	1e2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    29c0:	2800      	cmp	r0, #0
    29c2:	d034      	beq.n	2a2e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    29c4:	9b01      	ldr	r3, [sp, #4]
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d041      	beq.n	2a50 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    29cc:	2300      	movs	r3, #0
    29ce:	aa03      	add	r2, sp, #12
    29d0:	4631      	mov	r1, r6
    29d2:	4620      	mov	r0, r4
    29d4:	f7ff fbd6 	bl	2184 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    29d8:	b930      	cbnz	r0, 29e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    29da:	b347      	cbz	r7, 2a2e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    29dc:	aa03      	add	r2, sp, #12
    29de:	4631      	mov	r1, r6
    29e0:	4620      	mov	r0, r4
    29e2:	f7ff ffa3 	bl	292c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    29e6:	b310      	cbz	r0, 2a2e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    29e8:	46a4      	mov	ip, r4
    29ea:	ad08      	add	r5, sp, #32
    29ec:	f104 0630 	add.w	r6, r4, #48	; 0x30
    29f0:	f8dc 0000 	ldr.w	r0, [ip]
    29f4:	f10c 0c10 	add.w	ip, ip, #16
    29f8:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    29fc:	46ae      	mov	lr, r5
    29fe:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2a02:	3510      	adds	r5, #16
    2a04:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2a08:	45b4      	cmp	ip, r6
    2a0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2a0e:	d1ef      	bne.n	29f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    2a10:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    2a14:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    2a16:	6028      	str	r0, [r5, #0]
    close();
    2a18:	4620      	mov	r0, r4
    2a1a:	f7ff f9e9 	bl	1df0 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    2a1e:	9901      	ldr	r1, [sp, #4]
    2a20:	ab01      	add	r3, sp, #4
    2a22:	aa03      	add	r2, sp, #12
    2a24:	4620      	mov	r0, r4
    2a26:	f7ff fa01 	bl	1e2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2a2a:	2800      	cmp	r0, #0
    2a2c:	d1ca      	bne.n	29c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    2a2e:	2000      	movs	r0, #0
}
    2a30:	b017      	add	sp, #92	; 0x5c
    2a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    2a34:	3101      	adds	r1, #1
    2a36:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    2a38:	780b      	ldrb	r3, [r1, #0]
    2a3a:	2b2f      	cmp	r3, #47	; 0x2f
    2a3c:	d0fa      	beq.n	2a34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    2a3e:	6a31      	ldr	r1, [r6, #32]
    2a40:	a808      	add	r0, sp, #32
    2a42:	f7ff f9df 	bl	1e04 <ExFatFile::openRoot(ExFatVolume*)>
    2a46:	2800      	cmp	r0, #0
    2a48:	d0f1      	beq.n	2a2e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    2a4a:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    2a4c:	ae08      	add	r6, sp, #32
    2a4e:	e7b2      	b.n	29b6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    2a50:	aa03      	add	r2, sp, #12
    2a52:	4631      	mov	r1, r6
    2a54:	4620      	mov	r0, r4
    2a56:	f7ff ff69 	bl	292c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    2a5a:	b017      	add	sp, #92	; 0x5c
    2a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5e:	bf00      	nop

00002a60 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    2a60:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2a64:	079a      	lsls	r2, r3, #30
    2a66:	d562      	bpl.n	2b2e <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2a68:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2a6a:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2a6c:	b082      	sub	sp, #8
    2a6e:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    2a70:	b3a5      	cbz	r5, 2adc <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    2a72:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2a76:	d034      	beq.n	2ae2 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2a78:	6a00      	ldr	r0, [r0, #32]
    2a7a:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2a7c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2a80:	3a01      	subs	r2, #1
    2a82:	68e1      	ldr	r1, [r4, #12]
    2a84:	f10c 0c09 	add.w	ip, ip, #9
    2a88:	f141 31ff 	adc.w	r1, r1, #4294967295
    2a8c:	fa5f fc8c 	uxtb.w	ip, ip
    2a90:	f1cc 0e20 	rsb	lr, ip, #32
    2a94:	fa22 f20c 	lsr.w	r2, r2, ip
    2a98:	f1ac 0c20 	sub.w	ip, ip, #32
    2a9c:	fa01 fe0e 	lsl.w	lr, r1, lr
    2aa0:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2aa4:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2aa6:	ea42 020e 	orr.w	r2, r2, lr
    2aaa:	ea42 020c 	orr.w	r2, r2, ip
    2aae:	3201      	adds	r2, #1
    if (m_curCluster) {
    2ab0:	b319      	cbz	r1, 2afa <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2ab2:	3d01      	subs	r5, #1
    2ab4:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2ab6:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2ab8:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    2aba:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2abc:	bb72      	cbnz	r2, 2b1c <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2ac2:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2ac4:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2ac8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    2acc:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2ad0:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2ad4:	f7ff fea2 	bl	281c <ExFatFile::sync()>

fail:
  return false;
}
    2ad8:	b002      	add	sp, #8
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    return true;
    2adc:	2001      	movs	r0, #1
}
    2ade:	b002      	add	sp, #8
    2ae0:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2ae2:	6981      	ldr	r1, [r0, #24]
    2ae4:	b961      	cbnz	r1, 2b00 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2ae6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2ae8:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    2aea:	4629      	mov	r1, r5
    2aec:	6a20      	ldr	r0, [r4, #32]
    2aee:	f000 fb49 	bl	3184 <ExFatPartition::freeChain(unsigned long)>
    2af2:	b1c8      	cbz	r0, 2b28 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2af4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2af8:	e7e1      	b.n	2abe <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2afa:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2afc:	61e1      	str	r1, [r4, #28]
    2afe:	e7dd      	b.n	2abc <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2b00:	aa01      	add	r2, sp, #4
    2b02:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2b04:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2b06:	f000 fafb 	bl	3100 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2b0a:	2800      	cmp	r0, #0
    2b0c:	db0c      	blt.n	2b28 <ExFatFile::truncate()+0xc8>
      if (fg) {
    2b0e:	d110      	bne.n	2b32 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2b10:	9d01      	ldr	r5, [sp, #4]
    2b12:	2d00      	cmp	r5, #0
    2b14:	d1e9      	bne.n	2aea <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2b16:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b1a:	e7d0      	b.n	2abe <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2b1c:	2300      	movs	r3, #0
    2b1e:	9901      	ldr	r1, [sp, #4]
    2b20:	f000 fa14 	bl	2f4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2b24:	2800      	cmp	r0, #0
    2b26:	d1e5      	bne.n	2af4 <ExFatFile::truncate()+0x94>
  return false;
    2b28:	2000      	movs	r0, #0
}
    2b2a:	b002      	add	sp, #8
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2b2e:	2000      	movs	r0, #0
}
    2b30:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2b32:	f04f 32ff 	mov.w	r2, #4294967295
    2b36:	69a1      	ldr	r1, [r4, #24]
    2b38:	6a20      	ldr	r0, [r4, #32]
    2b3a:	f000 fb03 	bl	3144 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2b3e:	2800      	cmp	r0, #0
    2b40:	d1e6      	bne.n	2b10 <ExFatFile::truncate()+0xb0>
    2b42:	e7f1      	b.n	2b28 <ExFatFile::truncate()+0xc8>

00002b44 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b48:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2b4c:	b083      	sub	sp, #12
    2b4e:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2b50:	079d      	lsls	r5, r3, #30
    2b52:	f140 80a1 	bpl.w	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2b56:	4691      	mov	r9, r2
    2b58:	071a      	lsls	r2, r3, #28
    2b5a:	460e      	mov	r6, r1
    2b5c:	f100 8095 	bmi.w	2c8a <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2b60:	f1b9 0f00 	cmp.w	r9, #0
    2b64:	f000 8128 	beq.w	2db8 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2b68:	6823      	ldr	r3, [r4, #0]
    2b6a:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2b6c:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2b6e:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2b70:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2b74:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2b78:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2b7c:	f1b8 0f00 	cmp.w	r8, #0
    2b80:	f040 8094 	bne.w	2cac <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2b84:	2900      	cmp	r1, #0
    2b86:	f000 80d4 	beq.w	2d32 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2b8a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b8e:	065b      	lsls	r3, r3, #25
    2b90:	f140 80ec 	bpl.w	2d6c <ExFatFile::write(void const*, unsigned int)+0x228>
    2b94:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2b98:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2b9c:	f10c 0c09 	add.w	ip, ip, #9
    2ba0:	3b01      	subs	r3, #1
    2ba2:	fa5f fc8c 	uxtb.w	ip, ip
    2ba6:	f142 32ff 	adc.w	r2, r2, #4294967295
    2baa:	f1cc 0e20 	rsb	lr, ip, #32
    2bae:	fa23 f30c 	lsr.w	r3, r3, ip
    2bb2:	f1ac 0c20 	sub.w	ip, ip, #32
    2bb6:	fa02 fe0e 	lsl.w	lr, r2, lr
    2bba:	fa22 fc0c 	lsr.w	ip, r2, ip
    2bbe:	69e2      	ldr	r2, [r4, #28]
    2bc0:	ea43 030e 	orr.w	r3, r3, lr
    2bc4:	ea43 030c 	orr.w	r3, r3, ip
    2bc8:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2bca:	4299      	cmp	r1, r3
    2bcc:	f080 80d5 	bcs.w	2d7a <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2bd0:	3101      	adds	r1, #1
    2bd2:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2bd4:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2bd8:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2bda:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2bde:	4091      	lsls	r1, r2
    2be0:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2be2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2be6:	f0c0 808a 	bcc.w	2cfe <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    2bea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2bee:	f0c0 80a6 	bcc.w	2d3e <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2bf2:	2301      	movs	r3, #1
    2bf4:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2bf6:	0a6a      	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    2bf8:	eba3 0308 	sub.w	r3, r3, r8
    2bfc:	4293      	cmp	r3, r2
    2bfe:	bf28      	it	cs
    2c00:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2c02:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
    2c06:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2c08:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2c0c:	d309      	bcc.n	2c22 <ExFatFile::write(void const*, unsigned int)+0xde>
    2c0e:	185f      	adds	r7, r3, r1
    2c10:	42ba      	cmp	r2, r7
    2c12:	d206      	bcs.n	2c22 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2c14:	2200      	movs	r2, #0
    2c16:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2c1a:	f04f 32ff 	mov.w	r2, #4294967295
    2c1e:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    2c22:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2c26:	4632      	mov	r2, r6
    2c28:	6807      	ldr	r7, [r0, #0]
    2c2a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
    2c2c:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2c2e:	b398      	cbz	r0, 2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2c30:	4643      	mov	r3, r8
    src += n;
    2c32:	4446      	add	r6, r8
    toWrite -= n;
    2c34:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2c38:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2c3c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2c40:	19db      	adds	r3, r3, r7
    2c42:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2c46:	4298      	cmp	r0, r3
    2c48:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2c4a:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2c4e:	d207      	bcs.n	2c60 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2c50:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2c54:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2c58:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2c5c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2c60:	2d00      	cmp	r5, #0
    2c62:	d183      	bne.n	2b6c <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2c64:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2c68:	4298      	cmp	r0, r3
    2c6a:	4191      	sbcs	r1, r2
    2c6c:	f0c0 8096 	bcc.w	2d9c <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2c70:	4b53      	ldr	r3, [pc, #332]	; (2dc0 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2c72:	681b      	ldr	r3, [r3, #0]
    2c74:	2b00      	cmp	r3, #0
    2c76:	f000 809d 	beq.w	2db4 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c7a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2c7e:	4648      	mov	r0, r9
    2c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c84:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2c88:	e00d      	b.n	2ca6 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2c8a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2c8e:	f7ff fa03 	bl	2098 <ExFatFile::seekSet(unsigned long long)>
    2c92:	2800      	cmp	r0, #0
    2c94:	f47f af64 	bne.w	2b60 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2c98:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2c9c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2c9e:	f043 0301 	orr.w	r3, r3, #1
    2ca2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2ca6:	b003      	add	sp, #12
    2ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2cac:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2cb0:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2cb2:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2cb6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2cba:	4091      	lsls	r1, r2
    2cbc:	4441      	add	r1, r8
    2cbe:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2cc0:	2f00      	cmp	r7, #0
    2cc2:	d08e      	beq.n	2be2 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2cc4:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2cc8:	2201      	movs	r2, #1
    2cca:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2cce:	45a8      	cmp	r8, r5
    2cd0:	bf28      	it	cs
    2cd2:	46a8      	movcs	r8, r5
    2cd4:	f004 fa72 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2cd8:	2800      	cmp	r0, #0
    2cda:	d0dd      	beq.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2cdc:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2cde:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2ce0:	4642      	mov	r2, r8
    2ce2:	4631      	mov	r1, r6
    2ce4:	f005 f9f6 	bl	80d4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2ce8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2cec:	6a20      	ldr	r0, [r4, #32]
    2cee:	d19f      	bne.n	2c30 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    2cf0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2cf4:	f004 fa36 	bl	7164 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2cf8:	2800      	cmp	r0, #0
    2cfa:	d199      	bne.n	2c30 <ExFatFile::write(void const*, unsigned int)+0xec>
    2cfc:	e7cc      	b.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2cfe:	6862      	ldr	r2, [r4, #4]
    2d00:	6963      	ldr	r3, [r4, #20]
    2d02:	9200      	str	r2, [sp, #0]
    2d04:	9301      	str	r3, [sp, #4]
    2d06:	6922      	ldr	r2, [r4, #16]
    2d08:	6823      	ldr	r3, [r4, #0]
    2d0a:	4293      	cmp	r3, r2
    2d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
    2d10:	419a      	sbcs	r2, r3
    2d12:	d212      	bcs.n	2d3a <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2d14:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2d16:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2d1a:	f004 fa4f 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2d1e:	2800      	cmp	r0, #0
    2d20:	d0ba      	beq.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2d22:	462a      	mov	r2, r5
    2d24:	4631      	mov	r1, r6
    2d26:	4438      	add	r0, r7
    m_curPosition += n;
    2d28:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2d2a:	f005 f9d3 	bl	80d4 <memcpy>
    m_curPosition += n;
    2d2e:	462b      	mov	r3, r5
    2d30:	e77f      	b.n	2c32 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2d32:	69e1      	ldr	r1, [r4, #28]
    2d34:	b349      	cbz	r1, 2d8a <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2d36:	61a1      	str	r1, [r4, #24]
    2d38:	e74c      	b.n	2bd4 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2d3a:	2205      	movs	r2, #5
    2d3c:	e7eb      	b.n	2d16 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2d3e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    2d42:	428b      	cmp	r3, r1
    2d44:	d106      	bne.n	2d54 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2d46:	2300      	movs	r3, #0
    2d48:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2d4c:	f04f 33ff 	mov.w	r3, #4294967295
    2d50:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    2d54:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2d58:	4632      	mov	r2, r6
    2d5a:	6803      	ldr	r3, [r0, #0]
    2d5c:	6a1b      	ldr	r3, [r3, #32]
    2d5e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2d60:	2800      	cmp	r0, #0
    2d62:	d099      	beq.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
    2d64:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2d68:	4698      	mov	r8, r3
    2d6a:	e762      	b.n	2c32 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2d6c:	f104 0218 	add.w	r2, r4, #24
    2d70:	f000 f9c6 	bl	3100 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2d74:	2800      	cmp	r0, #0
    2d76:	db8f      	blt.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2d78:	d104      	bne.n	2d84 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2d7a:	4620      	mov	r0, r4
    2d7c:	f7ff fc68 	bl	2650 <ExFatFile::addCluster()>
    2d80:	2800      	cmp	r0, #0
    2d82:	d089      	beq.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d84:	69a1      	ldr	r1, [r4, #24]
    2d86:	6a20      	ldr	r0, [r4, #32]
    2d88:	e724      	b.n	2bd4 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2d8a:	4620      	mov	r0, r4
    2d8c:	f7ff fc60 	bl	2650 <ExFatFile::addCluster()>
    2d90:	2800      	cmp	r0, #0
    2d92:	d081      	beq.n	2c98 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2d94:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d96:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2d98:	61e1      	str	r1, [r4, #28]
    2d9a:	e71b      	b.n	2bd4 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2d9c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2da0:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2da2:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2da6:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2daa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2dae:	b003      	add	sp, #12
    2db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2db4:	4648      	mov	r0, r9
    2db6:	e776      	b.n	2ca6 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2db8:	e9d4 3200 	ldrd	r3, r2, [r4]
    2dbc:	e752      	b.n	2c64 <ExFatFile::write(void const*, unsigned int)+0x120>
    2dbe:	bf00      	nop
    2dc0:	2002886c 	.word	0x2002886c

00002dc4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool atEnd() { return next == end; }
    2dc8:	e9d2 3801 	ldrd	r3, r8, [r2, #4]
    2dcc:	f103 090f 	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    2dd0:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    if (fname->atEnd()) {
    2dd4:	4598      	cmp	r8, r3
  char getch() { return atEnd() ? 0 : *next++; }
    2dd6:	f103 0301 	add.w	r3, r3, #1
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2dda:	fa5f fc80 	uxtb.w	ip, r0
    if (fname->atEnd()) {
    2dde:	d01e      	beq.n	2e1e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    2de0:	6053      	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2de2:	287e      	cmp	r0, #126	; 0x7e
    2de4:	f813 ec01 	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2de8:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
    2dec:	f1ac 0620 	sub.w	r6, ip, #32
    2df0:	f1ae 0561 	sub.w	r5, lr, #97	; 0x61
    2df4:	f1ae 0720 	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2df8:	d80e      	bhi.n	2e18 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2dfa:	2d19      	cmp	r5, #25
    2dfc:	bf98      	it	ls
    2dfe:	fa5f fe87 	uxtbls.w	lr, r7
    2e02:	2c19      	cmp	r4, #25
    2e04:	bf98      	it	ls
    2e06:	fa5f fc86 	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2e0a:	45f4      	cmp	ip, lr
    2e0c:	d104      	bne.n	2e18 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    2e0e:	4599      	cmp	r9, r3
    2e10:	d1de      	bne.n	2dd0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2e12:	2001      	movs	r0, #1
}
    2e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    2e18:	2000      	movs	r0, #0
}
    2e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    2e1e:	fab0 f080 	clz	r0, r0
    2e22:	0940      	lsrs	r0, r0, #5
}
    2e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002e28 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2e28:	b530      	push	{r4, r5, lr}
  void reset() { next = begin; }
    2e2a:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    2e2c:	688c      	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    2e2e:	604d      	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2e30:	42ac      	cmp	r4, r5
    2e32:	d025      	beq.n	2e80 <ExFatFile::hashName(ExName_t*)+0x58>
    2e34:	462a      	mov	r2, r5
  uint16_t hash = 0;
    2e36:	2300      	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    2e38:	3201      	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    2e3a:	03d8      	lsls	r0, r3, #15
    2e3c:	604a      	str	r2, [r1, #4]
    2e3e:	ea40 0353 	orr.w	r3, r0, r3, lsr #1
    2e42:	f812 0c01 	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2e46:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
    2e4a:	f1a0 0e20 	sub.w	lr, r0, #32
    2e4e:	f1bc 0f19 	cmp.w	ip, #25
    2e52:	bf98      	it	ls
    2e54:	fa5f f08e 	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    2e58:	4294      	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    2e5a:	4403      	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    2e5c:	ea4f 30c3 	mov.w	r0, r3, lsl #15
    2e60:	f3c3 034e 	ubfx	r3, r3, #1, #15
    2e64:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    2e68:	ea43 0300 	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    2e6c:	d1e4      	bne.n	2e38 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    2e6e:	1b64      	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    2e70:	820b      	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2e72:	1e60      	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    2e74:	60cc      	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2e76:	28fe      	cmp	r0, #254	; 0xfe
    2e78:	bf8c      	ite	hi
    2e7a:	2000      	movhi	r0, #0
    2e7c:	2001      	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    2e7e:	bd30      	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    2e80:	2000      	movs	r0, #0
    2e82:	4604      	mov	r4, r0
  uint16_t hash = 0;
    2e84:	4603      	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    2e86:	60cc      	str	r4, [r1, #12]
  fname->nameHash = hash;
    2e88:	820b      	strh	r3, [r1, #16]
}
    2e8a:	bd30      	pop	{r4, r5, pc}

00002e8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e90:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e92:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e94:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e96:	2900      	cmp	r1, #0
    2e98:	d042      	beq.n	2f20 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2e9a:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2e9e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2ea2:	4543      	cmp	r3, r8
    2ea4:	d942      	bls.n	2f2c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2ea6:	f008 0307 	and.w	r3, r8, #7
    2eaa:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2eac:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2eb0:	409d      	lsls	r5, r3
    2eb2:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2eb4:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2eb6:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector =
    2eb8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2ebc:	2200      	movs	r2, #0
    2ebe:	4638      	mov	r0, r7
    2ec0:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2ec4:	f004 f97a 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2ec8:	b1e8      	cbz	r0, 2f06 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2eca:	f10b 3bff 	add.w	fp, fp, #4294967295
    2ece:	4483      	add	fp, r0
    2ed0:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2ed4:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2ed8:	e00a      	b.n	2ef0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2eda:	454a      	cmp	r2, r9
    2edc:	d02b      	beq.n	2f36 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2ede:	45a0      	cmp	r8, r4
    2ee0:	d010      	beq.n	2f04 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2ee2:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2ee6:	42a5      	cmp	r5, r4
    2ee8:	d914      	bls.n	2f14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2eea:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2eee:	d00c      	beq.n	2f0a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2ef0:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2ef2:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2ef4:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2ef8:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2efc:	d0ed      	beq.n	2eda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2efe:	45a0      	cmp	r8, r4
        endAlloc++;
    2f00:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2f02:	d1ee      	bne.n	2ee2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2f04:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2f0a:	4558      	cmp	r0, fp
      mask = 1;
    2f0c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2f10:	d1e0      	bne.n	2ed4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2f12:	e001      	b.n	2f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2f14:	2600      	movs	r6, #0
    2f16:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2f18:	2501      	movs	r5, #1
    i = 0;
    2f1a:	f04f 0b00 	mov.w	fp, #0
    2f1e:	e7cb      	b.n	2eb8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2f20:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2f24:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2f28:	4543      	cmp	r3, r8
    2f2a:	d8bc      	bhi.n	2ea6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2f2c:	f04f 0800 	mov.w	r8, #0
    2f30:	2501      	movs	r5, #1
    start = 0;
    2f32:	46c3      	mov	fp, r8
    2f34:	e7be      	b.n	2eb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2f36:	f1ba 0f00 	cmp.w	sl, #0
    2f3a:	d104      	bne.n	2f46 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2f3c:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2f40:	bf08      	it	eq
    2f42:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2f46:	1cb0      	adds	r0, r6, #2
}
    2f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002f4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f50:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2f52:	1e88      	subs	r0, r1, #2
                                  bool value) {
    2f54:	4615      	mov	r5, r2
    2f56:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2f58:	1883      	adds	r3, r0, r2
    2f5a:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2f5e:	4293      	cmp	r3, r2
    2f60:	d837      	bhi.n	2fd2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2f62:	bbce      	cbnz	r6, 2fd8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2f64:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2f68:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2f6a:	bf88      	it	hi
    2f6c:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2f70:	f000 0307 	and.w	r3, r0, #7
    2f74:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2f76:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    2f7a:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2f7e:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2f80:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2f84:	b2e4      	uxtb	r4, r4
    2f86:	2201      	movs	r2, #1
    2f88:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2f8a:	188f      	adds	r7, r1, r2
    2f8c:	f004 f916 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2f90:	b1f8      	cbz	r0, 2fd2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2f92:	f109 3eff 	add.w	lr, r9, #4294967295
    2f96:	4486      	add	lr, r0
    2f98:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2f9c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2fa0:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2fa4:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2fa8:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2fac:	bf14      	ite	ne
    2fae:	2201      	movne	r2, #1
    2fb0:	2200      	moveq	r2, #0
    2fb2:	42b2      	cmp	r2, r6
    2fb4:	d00d      	beq.n	2fd2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2fb6:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2fb8:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2fbc:	d018      	beq.n	2ff0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2fbe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2fc2:	d1ed      	bne.n	2fa0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2fc4:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2fc6:	46a1      	mov	r9, r4
    2fc8:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2fcc:	d1e6      	bne.n	2f9c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2fce:	4639      	mov	r1, r7
    2fd0:	e7d9      	b.n	2f86 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    2fd2:	2000      	movs	r0, #0
}
    2fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2fd8:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2fdc:	428b      	cmp	r3, r1
    2fde:	d9c7      	bls.n	2f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2fe0:	4281      	cmp	r1, r0
    2fe2:	d3c5      	bcc.n	2f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2fe4:	4293      	cmp	r3, r2
    2fe6:	bf28      	it	cs
    2fe8:	2300      	movcs	r3, #0
    2fea:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2fee:	e7bf      	b.n	2f70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2ff0:	2001      	movs	r0, #1
}
    2ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ff6:	bf00      	nop

00002ff8 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2ffa:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2ffe:	3301      	adds	r3, #1
    3000:	428b      	cmp	r3, r1
    3002:	d201      	bcs.n	3008 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    3004:	2000      	movs	r0, #0
}
    3006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3008:	4607      	mov	r7, r0
    300a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    300c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    3010:	2500      	movs	r5, #0
    3012:	e005      	b.n	3020 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    3014:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    3018:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    301a:	3301      	adds	r3, #1
    301c:	42a3      	cmp	r3, r4
    301e:	d3f1      	bcc.n	3004 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3020:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    3024:	2200      	movs	r2, #0
    3026:	4630      	mov	r0, r6
    3028:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    302c:	f004 f8c6 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3030:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    3032:	2800      	cmp	r0, #0
    3034:	d0e6      	beq.n	3004 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3036:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    303a:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    303c:	1c63      	adds	r3, r4, #1
    303e:	d1e9      	bne.n	3014 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    3040:	1c68      	adds	r0, r5, #1
}
    3042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003044 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    3044:	b538      	push	{r3, r4, r5, lr}
    3046:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    3048:	680b      	ldr	r3, [r1, #0]
    304a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    304e:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    3052:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    3056:	3b02      	subs	r3, #2
    3058:	6865      	ldr	r5, [r4, #4]
    305a:	fa03 f30c 	lsl.w	r3, r3, ip
    305e:	4029      	ands	r1, r5
    3060:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    3064:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    3068:	4419      	add	r1, r3
    306a:	f004 f8a7 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    306e:	b118      	cbz	r0, 3078 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    3070:	6863      	ldr	r3, [r4, #4]
    3072:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3076:	4418      	add	r0, r3
}
    3078:	bd38      	pop	{r3, r4, r5, pc}
    307a:	bf00      	nop

0000307c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3080:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    3082:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    3086:	6849      	ldr	r1, [r1, #4]
    3088:	400b      	ands	r3, r1
  pos->position += offset;
    308a:	4411      	add	r1, r2
    308c:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    308e:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3090:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    3094:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    3098:	b2d2      	uxtb	r2, r2
    309a:	40d3      	lsrs	r3, r2
  while (tmp--) {
    309c:	b32b      	cbz	r3, 30ea <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    309e:	4680      	mov	r8, r0
    30a0:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    30a2:	f500 7904 	add.w	r9, r0, #528	; 0x210
    30a6:	e005      	b.n	30b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    30a8:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    30aa:	3d01      	subs	r5, #1
      pos->cluster++;
    30ac:	f103 0301 	add.w	r3, r3, #1
    30b0:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    30b2:	d31a      	bcc.n	30ea <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    30b4:	7a26      	ldrb	r6, [r4, #8]
    30b6:	2e00      	cmp	r6, #0
    30b8:	d1f6      	bne.n	30a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    30ba:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    30be:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    30c0:	6827      	ldr	r7, [r4, #0]
    30c2:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    30c4:	3301      	adds	r3, #1
    30c6:	429f      	cmp	r7, r3
    30c8:	d812      	bhi.n	30f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    30ca:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    30ce:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    30d2:	f004 f873 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30d6:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    30d8:	b150      	cbz	r0, 30f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30da:	f3c7 0708 	ubfx	r7, r7, #0, #9
    30de:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    30e0:	1c5a      	adds	r2, r3, #1
    30e2:	d009      	beq.n	30f8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    30e4:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    30e6:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    30e8:	d2e4      	bcs.n	30b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    30ea:	2001      	movs	r0, #1
}
    30ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    30f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    30f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    30f8:	4630      	mov	r0, r6
}
    30fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30fe:	bf00      	nop

00003100 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    3100:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    3102:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3106:	3301      	adds	r3, #1
    3108:	428b      	cmp	r3, r1
    310a:	d202      	bcs.n	3112 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    310c:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    3110:	bd38      	pop	{r3, r4, r5, pc}
    3112:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3114:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    3118:	4615      	mov	r5, r2
    311a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    311e:	2200      	movs	r2, #0
    3120:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3124:	f004 f84a 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3128:	2800      	cmp	r0, #0
    312a:	d0ef      	beq.n	310c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    312c:	00a4      	lsls	r4, r4, #2
    312e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    3132:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    3134:	1c5a      	adds	r2, r3, #1
    3136:	d002      	beq.n	313e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    3138:	2001      	movs	r0, #1
  *value = next;
    313a:	602b      	str	r3, [r5, #0]
}
    313c:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    313e:	2000      	movs	r0, #0
}
    3140:	bd38      	pop	{r3, r4, r5, pc}
    3142:	bf00      	nop

00003144 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3144:	2901      	cmp	r1, #1
    3146:	d91b      	bls.n	3180 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    3148:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    314a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    314e:	460c      	mov	r4, r1
    3150:	3301      	adds	r3, #1
    3152:	428b      	cmp	r3, r1
    3154:	d201      	bcs.n	315a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    3156:	2000      	movs	r0, #0
}
    3158:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    315a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    315e:	4615      	mov	r5, r2
    3160:	f500 7004 	add.w	r0, r0, #528	; 0x210
    3164:	2201      	movs	r2, #1
    3166:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    316a:	f004 f827 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    316e:	4603      	mov	r3, r0
    3170:	2800      	cmp	r0, #0
    3172:	d0f0      	beq.n	3156 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3174:	00a4      	lsls	r4, r4, #2
  return true;
    3176:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    3178:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    317c:	511d      	str	r5, [r3, r4]
}
    317e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    3180:	2000      	movs	r0, #0
}
    3182:	4770      	bx	lr

00003184 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    3184:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3188:	3301      	adds	r3, #1
    318a:	4299      	cmp	r1, r3
    318c:	d901      	bls.n	3192 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    318e:	2000      	movs	r0, #0
    3190:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    3192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3196:	4605      	mov	r5, r0
    3198:	b083      	sub	sp, #12
    319a:	460c      	mov	r4, r1
    319c:	f500 7904 	add.w	r9, r0, #528	; 0x210
    31a0:	460f      	mov	r7, r1
    31a2:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    31a6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    31aa:	2200      	movs	r2, #0
    31ac:	4648      	mov	r0, r9
    31ae:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    31b2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    31b6:	f004 f801 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    31ba:	b190      	cbz	r0, 31e2 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    31bc:	00a3      	lsls	r3, r4, #2
    31be:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    31c2:	58c2      	ldr	r2, [r0, r3]
    31c4:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    31c6:	1c53      	adds	r3, r2, #1
    31c8:	bf16      	itet	ne
    31ca:	4616      	movne	r6, r2
    31cc:	f04f 0a00 	moveq.w	sl, #0
    31d0:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    31d4:	2c01      	cmp	r4, #1
    31d6:	d904      	bls.n	31e2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    31d8:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    31dc:	3201      	adds	r2, #1
    31de:	4294      	cmp	r4, r2
    31e0:	d903      	bls.n	31ea <ExFatPartition::freeChain(unsigned long)+0x66>
}
    31e2:	2000      	movs	r0, #0
    31e4:	b003      	add	sp, #12
    31e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    31ea:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    31ee:	2201      	movs	r2, #1
    31f0:	4648      	mov	r0, r9
    31f2:	4459      	add	r1, fp
    31f4:	f003 ffe2 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    31f8:	2800      	cmp	r0, #0
    31fa:	d0f2      	beq.n	31e2 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    31fc:	9b01      	ldr	r3, [sp, #4]
    31fe:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    3202:	f1ba 0f00 	cmp.w	sl, #0
    3206:	d012      	beq.n	322e <ExFatPartition::freeChain(unsigned long)+0xaa>
    3208:	3401      	adds	r4, #1
    320a:	42b4      	cmp	r4, r6
    320c:	d008      	beq.n	3220 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    320e:	2300      	movs	r3, #0
    3210:	1be2      	subs	r2, r4, r7
    3212:	4639      	mov	r1, r7
    3214:	4628      	mov	r0, r5
    3216:	f7ff fe99 	bl	2f4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    321a:	2800      	cmp	r0, #0
    321c:	d0e1      	beq.n	31e2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    321e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    3220:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    3224:	3301      	adds	r3, #1
    3226:	42b3      	cmp	r3, r6
    3228:	d3db      	bcc.n	31e2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    322a:	4634      	mov	r4, r6
    322c:	e7bb      	b.n	31a6 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    322e:	1c62      	adds	r2, r4, #1
    3230:	4653      	mov	r3, sl
    3232:	4639      	mov	r1, r7
    3234:	4628      	mov	r0, r5
    3236:	1bd2      	subs	r2, r2, r7
}
    3238:	b003      	add	sp, #12
    323a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    323e:	f7ff be85 	b.w	2f4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3242:	bf00      	nop

00003244 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    3244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    3246:	f04f 0c00 	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    324a:	4615      	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    324c:	f04f 32ff 	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    3250:	4604      	mov	r4, r0
  m_fatType = 0;
    3252:	f880 c444 	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    3256:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    325a:	6041      	str	r1, [r0, #4]
    325c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    3260:	f880 c000 	strb.w	ip, [r0]
    3264:	f880 c210 	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3268:	6082      	str	r2, [r0, #8]
    326a:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    326e:	b1e5      	cbz	r5, 32aa <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    3270:	2d04      	cmp	r5, #4
    3272:	d901      	bls.n	3278 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    3274:	2000      	movs	r0, #0
}
    3276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3278:	f500 7704 	add.w	r7, r0, #528	; 0x210
    327c:	4662      	mov	r2, ip
    327e:	4661      	mov	r1, ip
    3280:	4638      	mov	r0, r7
    3282:	f003 ff9b 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    3286:	2800      	cmp	r0, #0
    3288:	d0f4      	beq.n	3274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    328a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    328e:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    3292:	442b      	add	r3, r5
    3294:	0119      	lsls	r1, r3, #4
    3296:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    329a:	791a      	ldrb	r2, [r3, #4]
    329c:	2a00      	cmp	r2, #0
    329e:	d0e9      	beq.n	3274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    32a0:	5c42      	ldrb	r2, [r0, r1]
    32a2:	0652      	lsls	r2, r2, #25
    32a4:	d1e6      	bne.n	3274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    32a6:	689e      	ldr	r6, [r3, #8]
    32a8:	e002      	b.n	32b0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    32aa:	461e      	mov	r6, r3
    32ac:	f500 7704 	add.w	r7, r0, #528	; 0x210
    32b0:	2200      	movs	r2, #0
    32b2:	4631      	mov	r1, r6
    32b4:	4638      	mov	r0, r7
    32b6:	f003 ff81 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    32ba:	4605      	mov	r5, r0
    32bc:	2800      	cmp	r0, #0
    32be:	d0d9      	beq.n	3274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    32c0:	2205      	movs	r2, #5
    32c2:	491a      	ldr	r1, [pc, #104]	; (332c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    32c4:	3003      	adds	r0, #3
    32c6:	f008 fc23 	bl	bb10 <strncmp>
    32ca:	2800      	cmp	r0, #0
    32cc:	d1d2      	bne.n	3274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    32ce:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    32d2:	2b09      	cmp	r3, #9
    32d4:	d1ce      	bne.n	3274 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    32d6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    32d8:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    32da:	4433      	add	r3, r6
    32dc:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    32e0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    32e2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    32e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
    32e8:	4433      	add	r3, r6
    32ea:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    32ee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    32f0:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    32f4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    32f6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    32fa:	f895 206d 	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    32fe:	2501      	movs	r5, #1
  m_bitmapStart = 0;
    3300:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3304:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3306:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    330a:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    330e:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    3312:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3314:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3318:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    331c:	462a      	mov	r2, r5
    331e:	f7ff fdb5 	bl	2e8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3322:	2340      	movs	r3, #64	; 0x40
  return true;
    3324:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3326:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    332a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    332c:	2000058c 	.word	0x2000058c

00003330 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    3330:	b510      	push	{r4, lr}
    3332:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3334:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    3338:	f7ff fe5e 	bl	2ff8 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    333c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    3340:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    3342:	b2db      	uxtb	r3, r3
}
    3344:	4098      	lsls	r0, r3
    3346:	bd10      	pop	{r4, pc}

00003348 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    3348:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    334a:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    334e:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    3350:	2300      	movs	r3, #0
    3352:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    3354:	4668      	mov	r0, sp
    3356:	4621      	mov	r1, r4
    3358:	930c      	str	r3, [sp, #48]	; 0x30
    335a:	f7ff f8f7 	bl	254c <ExFatFile::open(ExFatFile*, char const*, int)>
    335e:	4605      	mov	r5, r0
    3360:	b1d8      	cbz	r0, 339a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    3362:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3366:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    336a:	d019      	beq.n	33a0 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    336c:	46ee      	mov	lr, sp
    336e:	46a4      	mov	ip, r4
    3370:	ae0c      	add	r6, sp, #48	; 0x30
    3372:	4674      	mov	r4, lr
    3374:	f10c 0c10 	add.w	ip, ip, #16
    3378:	f10e 0e10 	add.w	lr, lr, #16
    337c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    337e:	42b4      	cmp	r4, r6
    3380:	f84c 0c10 	str.w	r0, [ip, #-16]
    3384:	f84c 1c0c 	str.w	r1, [ip, #-12]
    3388:	f84c 2c08 	str.w	r2, [ip, #-8]
    338c:	f84c 3c04 	str.w	r3, [ip, #-4]
    3390:	d1ef      	bne.n	3372 <ExFatVolume::chdir(char const*)+0x2a>
    3392:	f8de 0000 	ldr.w	r0, [lr]
    3396:	f8cc 0000 	str.w	r0, [ip]
  return true;

fail:
  return false;
}
    339a:	4628      	mov	r0, r5
    339c:	b00e      	add	sp, #56	; 0x38
    339e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    33a0:	461d      	mov	r5, r3
}
    33a2:	4628      	mov	r0, r5
    33a4:	b00e      	add	sp, #56	; 0x38
    33a6:	bd70      	pop	{r4, r5, r6, pc}

000033a8 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    33a8:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    33aa:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    33ae:	b082      	sub	sp, #8
    33b0:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    33b2:	2b00      	cmp	r3, #0
    33b4:	db0d      	blt.n	33d2 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    33b6:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    33b8:	f105 0024 	add.w	r0, r5, #36	; 0x24
    33bc:	f003 fed2 	bl	7164 <FsCache::sync()>
    33c0:	2800      	cmp	r0, #0
    33c2:	d13f      	bne.n	3444 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    33c4:	7863      	ldrb	r3, [r4, #1]
  return false;
    33c6:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    33c8:	f043 0301 	orr.w	r3, r3, #1
    33cc:	7063      	strb	r3, [r4, #1]
}
    33ce:	b002      	add	sp, #8
    33d0:	bd70      	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    33d2:	6880      	ldr	r0, [r0, #8]
    33d4:	2201      	movs	r2, #1
    33d6:	69a1      	ldr	r1, [r4, #24]
    33d8:	3024      	adds	r0, #36	; 0x24
    33da:	f003 feef 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    33de:	2800      	cmp	r0, #0
    33e0:	d0f0      	beq.n	33c4 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    33e2:	88a5      	ldrh	r5, [r4, #4]
    33e4:	f005 050f 	and.w	r5, r5, #15
    33e8:	016b      	lsls	r3, r5, #5
    33ea:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    33ee:	5cc3      	ldrb	r3, [r0, r3]
    33f0:	2be5      	cmp	r3, #229	; 0xe5
    33f2:	d0e7      	beq.n	33c4 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    33f4:	7823      	ldrb	r3, [r4, #0]
    33f6:	f003 0337 	and.w	r3, r3, #55	; 0x37
    33fa:	72eb      	strb	r3, [r5, #11]
    if (isFile()) {
    33fc:	7823      	ldrb	r3, [r4, #0]
    33fe:	071b      	lsls	r3, r3, #28
    3400:	d501      	bpl.n	3406 <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    3402:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3404:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3406:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    3408:	4915      	ldr	r1, [pc, #84]	; (3460 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    340a:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    340c:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    340e:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3410:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    3412:	b166      	cbz	r6, 342e <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    3414:	f10d 0203 	add.w	r2, sp, #3
    3418:	f10d 0106 	add.w	r1, sp, #6
    341c:	a801      	add	r0, sp, #4
    341e:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    3420:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3424:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3428:	832b      	strh	r3, [r5, #24]
    342a:	826b      	strh	r3, [r5, #18]
    342c:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    342e:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    3430:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3436:	f105 0024 	add.w	r0, r5, #36	; 0x24
    343a:	70a3      	strb	r3, [r4, #2]
    343c:	f003 fe92 	bl	7164 <FsCache::sync()>
    3440:	2800      	cmp	r0, #0
    3442:	d0bf      	beq.n	33c4 <FatFile::sync() [clone .part.0]+0x1c>
    3444:	f505 700d 	add.w	r0, r5, #564	; 0x234
    3448:	f003 fe8c 	bl	7164 <FsCache::sync()>
    344c:	2800      	cmp	r0, #0
    344e:	d0b9      	beq.n	33c4 <FatFile::sync() [clone .part.0]+0x1c>
    3450:	6828      	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    3452:	6803      	ldr	r3, [r0, #0]
    3454:	69db      	ldr	r3, [r3, #28]
    3456:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3458:	2800      	cmp	r0, #0
    345a:	d0b3      	beq.n	33c4 <FatFile::sync() [clone .part.0]+0x1c>
    345c:	e7b7      	b.n	33ce <FatFile::sync() [clone .part.0]+0x26>
    345e:	bf00      	nop
    3460:	2002886c 	.word	0x2002886c

00003464 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    3464:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    3466:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    3468:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    346c:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    346e:	6880      	ldr	r0, [r0, #8]
    3470:	4629      	mov	r1, r5
    3472:	f001 f941 	bl	46f8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    3476:	b150      	cbz	r0, 348e <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    3478:	b155      	cbz	r5, 3490 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    347a:	6923      	ldr	r3, [r4, #16]
    347c:	3501      	adds	r5, #1
    347e:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3480:	78a3      	ldrb	r3, [r4, #2]
    3482:	bf18      	it	ne
    3484:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3488:	f063 037f 	orn	r3, r3, #127	; 0x7f
    348c:	70a3      	strb	r3, [r4, #2]
}
    348e:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3490:	78a3      	ldrb	r3, [r4, #2]
    3492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3496:	e7f7      	b.n	3488 <FatFile::addCluster()+0x24>

00003498 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    3498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    349a:	7804      	ldrb	r4, [r0, #0]
    349c:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    34a0:	d104      	bne.n	34ac <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    34a2:	4b1a      	ldr	r3, [pc, #104]	; (350c <FatFile::addDirCluster()+0x74>)
    34a4:	4605      	mov	r5, r0
    34a6:	6942      	ldr	r2, [r0, #20]
    34a8:	429a      	cmp	r2, r3
    34aa:	d302      	bcc.n	34b2 <FatFile::addDirCluster()+0x1a>
  return false;
    34ac:	2700      	movs	r7, #0
}
    34ae:	4638      	mov	r0, r7
    34b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    34b2:	f7ff ffd7 	bl	3464 <FatFile::addCluster()>
    34b6:	4607      	mov	r7, r0
    34b8:	2800      	cmp	r0, #0
    34ba:	d0f7      	beq.n	34ac <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    34bc:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    34be:	692e      	ldr	r6, [r5, #16]
    34c0:	7982      	ldrb	r2, [r0, #6]
    34c2:	3e02      	subs	r6, #2
    34c4:	6941      	ldr	r1, [r0, #20]
    34c6:	4096      	lsls	r6, r2
    34c8:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    34ca:	7901      	ldrb	r1, [r0, #4]
    34cc:	b1a9      	cbz	r1, 34fa <FatFile::addDirCluster()+0x62>
    34ce:	4621      	mov	r1, r4
    34d0:	e006      	b.n	34e0 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    34d2:	f008 facb 	bl	ba6c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    34d6:	68a8      	ldr	r0, [r5, #8]
    34d8:	b2e1      	uxtb	r1, r4
    34da:	7902      	ldrb	r2, [r0, #4]
    34dc:	428a      	cmp	r2, r1
    34de:	d90b      	bls.n	34f8 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    34e0:	4431      	add	r1, r6
    34e2:	2205      	movs	r2, #5
    34e4:	3024      	adds	r0, #36	; 0x24
    34e6:	3401      	adds	r4, #1
    34e8:	f003 fe68 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    34ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    34f0:	2100      	movs	r1, #0
    if (!pc) {
    34f2:	2800      	cmp	r0, #0
    34f4:	d1ed      	bne.n	34d2 <FatFile::addDirCluster()+0x3a>
    34f6:	e7d9      	b.n	34ac <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    34f8:	7982      	ldrb	r2, [r0, #6]
    34fa:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    34fe:	6969      	ldr	r1, [r5, #20]
}
    3500:	4638      	mov	r0, r7
    3502:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    3504:	fa11 f383 	uxtah	r3, r1, r3
    3508:	616b      	str	r3, [r5, #20]
}
    350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    350c:	001ffe00 	.word	0x001ffe00

00003510 <FatFile::close()>:
bool FatFile::close() {
    3510:	b510      	push	{r4, lr}
  if (!isOpen()) {
    3512:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    3514:	4604      	mov	r4, r0
  if (!isOpen()) {
    3516:	b12b      	cbz	r3, 3524 <FatFile::close()+0x14>
    3518:	f7ff ff46 	bl	33a8 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    351c:	2300      	movs	r3, #0
    351e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3520:	70a3      	strb	r3, [r4, #2]
}
    3522:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3524:	2300      	movs	r3, #0
    return true;
    3526:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    3528:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    352a:	70a3      	strb	r3, [r4, #2]
}
    352c:	bd10      	pop	{r4, pc}
    352e:	bf00      	nop

00003530 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    3530:	780b      	ldrb	r3, [r1, #0]
    3532:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3536:	d101      	bne.n	353c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    3538:	2000      	movs	r0, #0
    353a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    353c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    353e:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3542:	b089      	sub	sp, #36	; 0x24
    3544:	460d      	mov	r5, r1
    3546:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3548:	f000 fe70 	bl	422c <FatFile::open(FatFile*, FatLfn_t*, int)>
    354c:	b138      	cbz	r0, 355e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    354e:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    3550:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    3552:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    3554:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    3556:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    3558:	f7ff ff9e 	bl	3498 <FatFile::addDirCluster()>
    355c:	b910      	cbnz	r0, 3564 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    355e:	2000      	movs	r0, #0
    3560:	b009      	add	sp, #36	; 0x24
    3562:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    3564:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    3566:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    3568:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    356a:	b16b      	cbz	r3, 3588 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    356c:	6963      	ldr	r3, [r4, #20]
    356e:	b133      	cbz	r3, 357e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3570:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    3572:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3574:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    3578:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    357c:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    357e:	4620      	mov	r0, r4
    3580:	f7ff ff12 	bl	33a8 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    3584:	2800      	cmp	r0, #0
    3586:	d0ea      	beq.n	355e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    3588:	68a0      	ldr	r0, [r4, #8]
    358a:	2201      	movs	r2, #1
    358c:	69a1      	ldr	r1, [r4, #24]
    358e:	3024      	adds	r0, #36	; 0x24
    3590:	f003 fe14 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3594:	2800      	cmp	r0, #0
    3596:	d0e2      	beq.n	355e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    3598:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    359c:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    359e:	f00c 0c0f 	and.w	ip, ip, #15
    35a2:	ea4f 134c 	mov.w	r3, ip, lsl #5
    35a6:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    35aa:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    35ae:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    35b0:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    35b2:	6a23      	ldr	r3, [r4, #32]
    35b4:	f897 e006 	ldrb.w	lr, [r7, #6]
    35b8:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    35ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
    35be:	f8dc 2008 	ldr.w	r2, [ip, #8]
    35c2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    35c6:	fa06 f60e 	lsl.w	r6, r6, lr
    35ca:	46ee      	mov	lr, sp
    35cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    35d0:	f8dc 0010 	ldr.w	r0, [ip, #16]
    35d4:	f8dc 1014 	ldr.w	r1, [ip, #20]
    35d8:	f8dc 2018 	ldr.w	r2, [ip, #24]
    35dc:	f8dc 301c 	ldr.w	r3, [ip, #28]
    35e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    35e4:	697b      	ldr	r3, [r7, #20]
    35e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
    35ea:	2201      	movs	r2, #1
    35ec:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    35ee:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    35f2:	f8cd 3001 	str.w	r3, [sp, #1]
    35f6:	f8cd 3005 	str.w	r3, [sp, #5]
    35fa:	f8ad 3009 	strh.w	r3, [sp, #9]
    35fe:	f003 fddd 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3602:	4684      	mov	ip, r0
    3604:	2800      	cmp	r0, #0
    3606:	d0aa      	beq.n	355e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    3608:	272e      	movs	r7, #46	; 0x2e
    360a:	46ee      	mov	lr, sp
    360c:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    3610:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    3612:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3616:	f8cc 0000 	str.w	r0, [ip]
    361a:	f8cc 1004 	str.w	r1, [ip, #4]
    361e:	f8cc 2008 	str.w	r2, [ip, #8]
    3622:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    3626:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    362a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    362e:	f8cc 0010 	str.w	r0, [ip, #16]
    3632:	f8cc 1014 	str.w	r1, [ip, #20]
    3636:	f8cc 2018 	str.w	r2, [ip, #24]
    363a:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    363e:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    3640:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    3642:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    3646:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    364a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    364c:	f8cc 0020 	str.w	r0, [ip, #32]
    3650:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    3654:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    3658:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    365c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    365e:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    3662:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    3666:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    366a:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    366e:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3670:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3674:	f003 fd76 	bl	7164 <FsCache::sync()>
    3678:	2800      	cmp	r0, #0
    367a:	f43f af70 	beq.w	355e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    367e:	f504 700d 	add.w	r0, r4, #564	; 0x234
    3682:	f003 fd6f 	bl	7164 <FsCache::sync()>
    3686:	2800      	cmp	r0, #0
    3688:	f43f af69 	beq.w	355e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    368c:	6820      	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    368e:	6803      	ldr	r3, [r0, #0]
    3690:	69db      	ldr	r3, [r3, #28]
}
    3692:	b009      	add	sp, #36	; 0x24
    3694:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3698:	4718      	bx	r3
    369a:	bf00      	nop

0000369c <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    369c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36a0:	2600      	movs	r6, #0
    36a2:	b094      	sub	sp, #80	; 0x50
    36a4:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    36a6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    36a8:	9201      	str	r2, [sp, #4]
    36aa:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    36ac:	2b00      	cmp	r3, #0
    36ae:	d141      	bne.n	3734 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    36b0:	780b      	ldrb	r3, [r1, #0]
    36b2:	460d      	mov	r5, r1
    36b4:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    36b8:	d03c      	beq.n	3734 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    36ba:	7813      	ldrb	r3, [r2, #0]
    36bc:	4604      	mov	r4, r0
    36be:	4616      	mov	r6, r2
    36c0:	2b2f      	cmp	r3, #47	; 0x2f
    36c2:	d03b      	beq.n	373c <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    36c4:	2700      	movs	r7, #0
    36c6:	e028      	b.n	371a <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    36c8:	9e01      	ldr	r6, [sp, #4]
    36ca:	7836      	ldrb	r6, [r6, #0]
    36cc:	2e00      	cmp	r6, #0
    36ce:	d04e      	beq.n	376e <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    36d0:	f000 fdac 	bl	422c <FatFile::open(FatFile*, FatLfn_t*, int)>
    36d4:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    36d6:	aa03      	add	r2, sp, #12
    36d8:	4629      	mov	r1, r5
    36da:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    36dc:	b92b      	cbnz	r3, 36ea <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    36de:	f1b8 0f00 	cmp.w	r8, #0
    36e2:	d027      	beq.n	3734 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    36e4:	f7ff ff24 	bl	3530 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    36e8:	b320      	cbz	r0, 3734 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    36ea:	46a6      	mov	lr, r4
    36ec:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    36f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    36f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    36f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    36fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3700:	f8de 5000 	ldr.w	r5, [lr]
    3704:	4620      	mov	r0, r4
  if (!isOpen()) {
    3706:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    3708:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    370c:	b10b      	cbz	r3, 3712 <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    370e:	f7ff fe4b 	bl	33a8 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3712:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3714:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    3716:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3718:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    371a:	4631      	mov	r1, r6
    371c:	ab01      	add	r3, sp, #4
    371e:	aa03      	add	r2, sp, #12
    3720:	4620      	mov	r0, r4
    3722:	f000 fed3 	bl	44cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3726:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    3728:	aa03      	add	r2, sp, #12
    372a:	4629      	mov	r1, r5
    372c:	2300      	movs	r3, #0
    372e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3730:	2e00      	cmp	r6, #0
    3732:	d1c9      	bne.n	36c8 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    3734:	2000      	movs	r0, #0
}
    3736:	b014      	add	sp, #80	; 0x50
    3738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    373c:	3601      	adds	r6, #1
    373e:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    3740:	7833      	ldrb	r3, [r6, #0]
    3742:	2b2f      	cmp	r3, #47	; 0x2f
    3744:	d0fa      	beq.n	373c <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    3746:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    3748:	2224      	movs	r2, #36	; 0x24
    374a:	2100      	movs	r1, #0
    374c:	a80b      	add	r0, sp, #44	; 0x2c
    374e:	f008 f98d 	bl	ba6c <memset>
  m_vol = vol;
    3752:	950d      	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    3754:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3756:	2b10      	cmp	r3, #16
    3758:	d00f      	beq.n	377a <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    375a:	2b20      	cmp	r3, #32
    375c:	d1ea      	bne.n	3734 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    375e:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3760:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3764:	2301      	movs	r3, #1
    parent = &tmpDir;
    3766:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    3768:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    376c:	e7aa      	b.n	36c4 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    376e:	aa03      	add	r2, sp, #12
    3770:	f7ff fede 	bl	3530 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    3774:	b014      	add	sp, #80	; 0x50
    3776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    377a:	2340      	movs	r3, #64	; 0x40
    377c:	e7f0      	b.n	3760 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    377e:	bf00      	nop

00003780 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3784:	2500      	movs	r5, #0
    3786:	b094      	sub	sp, #80	; 0x50
    3788:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    378a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    378c:	9201      	str	r2, [sp, #4]
    378e:	950b      	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    3790:	2b00      	cmp	r3, #0
    3792:	d137      	bne.n	3804 <FatFile::open(FatFile*, char const*, int)+0x84>
    3794:	780b      	ldrb	r3, [r1, #0]
    3796:	460e      	mov	r6, r1
    3798:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    379c:	d032      	beq.n	3804 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    379e:	7813      	ldrb	r3, [r2, #0]
    37a0:	4604      	mov	r4, r0
    37a2:	4615      	mov	r5, r2
    37a4:	2b2f      	cmp	r3, #47	; 0x2f
    37a6:	d031      	beq.n	380c <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    37a8:	2700      	movs	r7, #0
    37aa:	e01e      	b.n	37ea <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    37ac:	9d01      	ldr	r5, [sp, #4]
    37ae:	782d      	ldrb	r5, [r5, #0]
    37b0:	2d00      	cmp	r5, #0
    37b2:	d042      	beq.n	383a <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    37b4:	f000 fd3a 	bl	422c <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    37b8:	46a6      	mov	lr, r4
    37ba:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    37be:	b308      	cbz	r0, 3804 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    37c0:	4666      	mov	r6, ip
  if (!isOpen()) {
    37c2:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    37c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37d4:	f8de 3000 	ldr.w	r3, [lr]
    37d8:	4620      	mov	r0, r4
    37da:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    37de:	b10d      	cbz	r5, 37e4 <FatFile::open(FatFile*, char const*, int)+0x64>
    37e0:	f7ff fde2 	bl	33a8 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    37e4:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    37e6:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    37e8:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    37ea:	4629      	mov	r1, r5
    37ec:	ab01      	add	r3, sp, #4
    37ee:	aa03      	add	r2, sp, #12
    37f0:	4620      	mov	r0, r4
    37f2:	f000 fe6b 	bl	44cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    37f6:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    37f8:	aa03      	add	r2, sp, #12
    37fa:	4631      	mov	r1, r6
    37fc:	2300      	movs	r3, #0
    37fe:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3800:	2d00      	cmp	r5, #0
    3802:	d1d3      	bne.n	37ac <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    3804:	2000      	movs	r0, #0
}
    3806:	b014      	add	sp, #80	; 0x50
    3808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    380c:	3501      	adds	r5, #1
    380e:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3810:	7829      	ldrb	r1, [r5, #0]
    3812:	292f      	cmp	r1, #47	; 0x2f
    3814:	d0fa      	beq.n	380c <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    3816:	b9b9      	cbnz	r1, 3848 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    3818:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    381a:	2224      	movs	r2, #36	; 0x24
    381c:	4620      	mov	r0, r4
    381e:	f008 f925 	bl	ba6c <memset>
  m_vol = vol;
    3822:	60a5      	str	r5, [r4, #8]
    3824:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3826:	2b10      	cmp	r3, #16
    3828:	d024      	beq.n	3874 <FatFile::open(FatFile*, char const*, int)+0xf4>
    382a:	2b20      	cmp	r3, #32
    382c:	d1ea      	bne.n	3804 <FatFile::open(FatFile*, char const*, int)+0x84>
    382e:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    3830:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3832:	7022      	strb	r2, [r4, #0]
  return true;
    3834:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3836:	70a3      	strb	r3, [r4, #2]
  return true;
    3838:	e7e5      	b.n	3806 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    383a:	4643      	mov	r3, r8
    383c:	aa03      	add	r2, sp, #12
    383e:	f000 fcf5 	bl	422c <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    3842:	b014      	add	sp, #80	; 0x50
    3844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3848:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    384a:	2224      	movs	r2, #36	; 0x24
    384c:	2100      	movs	r1, #0
    384e:	a80b      	add	r0, sp, #44	; 0x2c
    3850:	f008 f90c 	bl	ba6c <memset>
  m_vol = vol;
    3854:	960d      	str	r6, [sp, #52]	; 0x34
    3856:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3858:	2b10      	cmp	r3, #16
    385a:	d009      	beq.n	3870 <FatFile::open(FatFile*, char const*, int)+0xf0>
    385c:	2b20      	cmp	r3, #32
    385e:	d1d1      	bne.n	3804 <FatFile::open(FatFile*, char const*, int)+0x84>
    3860:	2380      	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3862:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3866:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    3868:	ae0b      	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    386a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    386e:	e79b      	b.n	37a8 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    3870:	2340      	movs	r3, #64	; 0x40
    3872:	e7f6      	b.n	3862 <FatFile::open(FatFile*, char const*, int)+0xe2>
    3874:	2240      	movs	r2, #64	; 0x40
    3876:	e7db      	b.n	3830 <FatFile::open(FatFile*, char const*, int)+0xb0>

00003878 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3878:	b119      	cbz	r1, 3882 <FatFile::open(FatVolume*, char const*, int)+0xa>
    387a:	f201 4144 	addw	r1, r1, #1092	; 0x444
    387e:	f7ff bf7f 	b.w	3780 <FatFile::open(FatFile*, char const*, int)>
}
    3882:	4608      	mov	r0, r1
    3884:	4770      	bx	lr
    3886:	bf00      	nop

00003888 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3888:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    388a:	7805      	ldrb	r5, [r0, #0]
    388c:	b10d      	cbz	r5, 3892 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    388e:	2000      	movs	r0, #0
}
    3890:	bd70      	pop	{r4, r5, r6, pc}
    3892:	460e      	mov	r6, r1
    3894:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    3896:	2224      	movs	r2, #36	; 0x24
    3898:	4629      	mov	r1, r5
    389a:	f008 f8e7 	bl	ba6c <memset>
  m_vol = vol;
    389e:	60a6      	str	r6, [r4, #8]
    38a0:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    38a2:	2b10      	cmp	r3, #16
    38a4:	d009      	beq.n	38ba <FatFile::openRoot(FatVolume*)+0x32>
    38a6:	2b20      	cmp	r3, #32
    38a8:	d105      	bne.n	38b6 <FatFile::openRoot(FatVolume*)+0x2e>
    38aa:	2280      	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    38ac:	2301      	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    38ae:	7022      	strb	r2, [r4, #0]
  return true;
    38b0:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    38b2:	70a3      	strb	r3, [r4, #2]
}
    38b4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    38b6:	4628      	mov	r0, r5
}
    38b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    38ba:	2240      	movs	r2, #64	; 0x40
    38bc:	e7f6      	b.n	38ac <FatFile::openRoot(FatVolume*)+0x24>
    38be:	bf00      	nop

000038c0 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    38c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38c4:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    38c8:	7883      	ldrb	r3, [r0, #2]
    38ca:	b083      	sub	sp, #12
    38cc:	4605      	mov	r5, r0
  if (!isReadable()) {
    38ce:	07df      	lsls	r7, r3, #31
    38d0:	f140 808c 	bpl.w	39ec <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    38d4:	4688      	mov	r8, r1
    38d6:	7801      	ldrb	r1, [r0, #0]
    38d8:	4692      	mov	sl, r2
  if (isFile()) {
    38da:	070e      	lsls	r6, r1, #28
    38dc:	f100 8091 	bmi.w	3a02 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    38e0:	064c      	lsls	r4, r1, #25
    38e2:	d508      	bpl.n	38f6 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    38e4:	6883      	ldr	r3, [r0, #8]
    38e6:	891a      	ldrh	r2, [r3, #8]
    38e8:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    38ea:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    38ee:	b29b      	uxth	r3, r3
    38f0:	459a      	cmp	sl, r3
    38f2:	bf28      	it	cs
    38f4:	469a      	movcs	sl, r3
  while (toRead) {
    38f6:	f1ba 0f00 	cmp.w	sl, #0
    38fa:	f000 80af 	beq.w	3a5c <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    38fe:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3900:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3904:	0648      	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3906:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    3908:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    390c:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3910:	68af      	ldr	r7, [r5, #8]
    3912:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    3916:	d53d      	bpl.n	3994 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    3918:	6a39      	ldr	r1, [r7, #32]
    391a:	eb01 2152 	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    391e:	f1bb 0f00 	cmp.w	fp, #0
    3922:	d151      	bne.n	39c8 <FatFile::read(void*, unsigned int)+0x108>
    3924:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3928:	d34e      	bcc.n	39c8 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    392a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    392c:	4291      	cmp	r1, r2
    392e:	d04b      	beq.n	39c8 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3930:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    3934:	f0c0 8082 	bcc.w	3a3c <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    3938:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    393a:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    393c:	0640      	lsls	r0, r0, #25
    393e:	d405      	bmi.n	394c <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    3940:	7938      	ldrb	r0, [r7, #4]
    3942:	eba0 0009 	sub.w	r0, r0, r9
    3946:	4283      	cmp	r3, r0
    3948:	bf28      	it	cs
    394a:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    394c:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    394e:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3952:	d80c      	bhi.n	396e <FatFile::read(void*, unsigned int)+0xae>
    3954:	18c8      	adds	r0, r1, r3
    3956:	4282      	cmp	r2, r0
    3958:	d209      	bcs.n	396e <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    395a:	f107 0024 	add.w	r0, r7, #36	; 0x24
    395e:	e9cd 1300 	strd	r1, r3, [sp]
    3962:	f003 fbff 	bl	7164 <FsCache::sync()>
    3966:	e9dd 1300 	ldrd	r1, r3, [sp]
    396a:	2800      	cmp	r0, #0
    396c:	d03e      	beq.n	39ec <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    396e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3970:	6802      	ldr	r2, [r0, #0]
    3972:	6957      	ldr	r7, [r2, #20]
    3974:	4642      	mov	r2, r8
    3976:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3978:	2800      	cmp	r0, #0
    397a:	d037      	beq.n	39ec <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    397c:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    397e:	1b36      	subs	r6, r6, r4
    dst += n;
    3980:	44a0      	add	r8, r4
    m_curPosition += n;
    3982:	4422      	add	r2, r4
    3984:	616a      	str	r2, [r5, #20]
  while (toRead) {
    3986:	d069      	beq.n	3a5c <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    3988:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    398a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    398e:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    3990:	0648      	lsls	r0, r1, #25
    3992:	d4c1      	bmi.n	3918 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3994:	f897 9005 	ldrb.w	r9, [r7, #5]
    3998:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    399c:	f1bb 0f00 	cmp.w	fp, #0
    39a0:	d136      	bne.n	3a10 <FatFile::read(void*, unsigned int)+0x150>
    39a2:	f1b9 0f00 	cmp.w	r9, #0
    39a6:	d133      	bne.n	3a10 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    39a8:	2a00      	cmp	r2, #0
    39aa:	d133      	bne.n	3a14 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    39ac:	060a      	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    39ae:	bf4c      	ite	mi
    39b0:	6a3a      	ldrmi	r2, [r7, #32]
    39b2:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    39b4:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    39b6:	3a02      	subs	r2, #2
    39b8:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    39ba:	6979      	ldr	r1, [r7, #20]
    39bc:	4082      	lsls	r2, r0
    39be:	4449      	add	r1, r9
    39c0:	4411      	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    39c2:	f1bb 0f00 	cmp.w	fp, #0
    39c6:	d0ad      	beq.n	3924 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    39c8:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    39cc:	2200      	movs	r2, #0
    39ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
    39d2:	42b4      	cmp	r4, r6
    39d4:	bf28      	it	cs
    39d6:	4634      	movcs	r4, r6
    39d8:	f003 fbf0 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    39dc:	b130      	cbz	r0, 39ec <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    39de:	eb00 010b 	add.w	r1, r0, fp
    39e2:	4622      	mov	r2, r4
    39e4:	4640      	mov	r0, r8
    39e6:	f004 fb75 	bl	80d4 <memcpy>
    39ea:	e7c7      	b.n	397c <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    39ec:	786b      	ldrb	r3, [r5, #1]
  return -1;
    39ee:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    39f2:	f043 0302 	orr.w	r3, r3, #2
    39f6:	706b      	strb	r3, [r5, #1]
}
    39f8:	b003      	add	sp, #12
    39fa:	ecbd 8b02 	vpop	{d8}
    39fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3a02:	69c3      	ldr	r3, [r0, #28]
    3a04:	6942      	ldr	r2, [r0, #20]
    3a06:	1a9b      	subs	r3, r3, r2
    3a08:	459a      	cmp	sl, r3
    3a0a:	bf28      	it	cs
    3a0c:	469a      	movcs	sl, r3
    3a0e:	e772      	b.n	38f6 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    3a10:	692a      	ldr	r2, [r5, #16]
    3a12:	e7d0      	b.n	39b6 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3a14:	070b      	lsls	r3, r1, #28
    3a16:	d505      	bpl.n	3a24 <FatFile::read(void*, unsigned int)+0x164>
    3a18:	78aa      	ldrb	r2, [r5, #2]
    3a1a:	0654      	lsls	r4, r2, #25
    3a1c:	d502      	bpl.n	3a24 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    3a1e:	692a      	ldr	r2, [r5, #16]
    3a20:	3201      	adds	r2, #1
    3a22:	e7c7      	b.n	39b4 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3a24:	ee18 2a10 	vmov	r2, s16
    3a28:	4638      	mov	r0, r7
    3a2a:	6929      	ldr	r1, [r5, #16]
    3a2c:	f000 fe1e 	bl	466c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3a30:	2800      	cmp	r0, #0
    3a32:	dbdb      	blt.n	39ec <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    3a34:	d00c      	beq.n	3a50 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3a36:	68af      	ldr	r7, [r5, #8]
    3a38:	692a      	ldr	r2, [r5, #16]
    3a3a:	e7bc      	b.n	39b6 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    3a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3a3e:	4642      	mov	r2, r8
    3a40:	6803      	ldr	r3, [r0, #0]
    3a42:	691b      	ldr	r3, [r3, #16]
    3a44:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3a46:	2800      	cmp	r0, #0
    3a48:	d0d0      	beq.n	39ec <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    3a4a:	f44f 7400 	mov.w	r4, #512	; 0x200
    3a4e:	e795      	b.n	397c <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    3a50:	782b      	ldrb	r3, [r5, #0]
    3a52:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    3a56:	d0c9      	beq.n	39ec <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    3a58:	ebaa 0a06 	sub.w	sl, sl, r6
    3a5c:	4650      	mov	r0, sl
}
    3a5e:	b003      	add	sp, #12
    3a60:	ecbd 8b02 	vpop	{d8}
    3a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003a68 <FatFile::peek()>:
int FatFile::peek() {
    3a68:	b570      	push	{r4, r5, r6, lr}
    3a6a:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3a6c:	2201      	movs	r2, #1
    3a6e:	4604      	mov	r4, r0
    3a70:	f10d 0107 	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    3a74:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    3a78:	f7ff ff22 	bl	38c0 <FatFile::read(void*, unsigned int)>
    3a7c:	2801      	cmp	r0, #1
    3a7e:	bf0c      	ite	eq
    3a80:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3a84:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    3a88:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3a8c:	b002      	add	sp, #8
    3a8e:	bd70      	pop	{r4, r5, r6, pc}

00003a90 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a90:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3a92:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3a96:	b530      	push	{r4, r5, lr}
    3a98:	4604      	mov	r4, r0
    3a9a:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a9c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3aa0:	d009      	beq.n	3ab6 <FatFile::readDirCache(bool)+0x26>
    3aa2:	2901      	cmp	r1, #1
    3aa4:	d107      	bne.n	3ab6 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    3aa6:	3320      	adds	r3, #32
    3aa8:	6143      	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    3aaa:	68a0      	ldr	r0, [r4, #8]
    3aac:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3aae:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3ab2:	b003      	add	sp, #12
    3ab4:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    3ab6:	2201      	movs	r2, #1
    3ab8:	f10d 0107 	add.w	r1, sp, #7
    3abc:	4620      	mov	r0, r4
    3abe:	f7ff feff 	bl	38c0 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    3ac2:	b240      	sxtb	r0, r0
    3ac4:	2801      	cmp	r0, #1
    3ac6:	d103      	bne.n	3ad0 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    3ac8:	6963      	ldr	r3, [r4, #20]
    3aca:	331f      	adds	r3, #31
    3acc:	6163      	str	r3, [r4, #20]
    3ace:	e7ec      	b.n	3aaa <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3ad0:	2000      	movs	r0, #0
    3ad2:	e7ee      	b.n	3ab2 <FatFile::readDirCache(bool)+0x22>

00003ad4 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    3ad8:	7803      	ldrb	r3, [r0, #0]
    3ada:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3adc:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d039      	beq.n	3b56 <FatFile::seekSet(unsigned long)+0x82>
    3ae2:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3ae4:	6941      	ldr	r1, [r0, #20]
    3ae6:	42a9      	cmp	r1, r5
    3ae8:	d042      	beq.n	3b70 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    3aea:	2d00      	cmp	r5, #0
    3aec:	d037      	beq.n	3b5e <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3aee:	0718      	lsls	r0, r3, #28
    3af0:	d52a      	bpl.n	3b48 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3af2:	69e2      	ldr	r2, [r4, #28]
    3af4:	42aa      	cmp	r2, r5
    3af6:	d32e      	bcc.n	3b56 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3af8:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3afc:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3afe:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3b00:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3b04:	f012 0f40 	tst.w	r2, #64	; 0x40
    3b08:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3b0c:	b2c0      	uxtb	r0, r0
    3b0e:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3b12:	d130      	bne.n	3b76 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3b14:	1e4a      	subs	r2, r1, #1
    3b16:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3b18:	b109      	cbz	r1, 3b1e <FatFile::seekSet(unsigned long)+0x4a>
    3b1a:	4296      	cmp	r6, r2
    3b1c:	d22f      	bcs.n	3b7e <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3b1e:	061b      	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    3b20:	bf4c      	ite	mi
    3b22:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3b26:	6a23      	ldrpl	r3, [r4, #32]
    3b28:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3b2a:	f104 0810 	add.w	r8, r4, #16
    3b2e:	e006      	b.n	3b3e <FatFile::seekSet(unsigned long)+0x6a>
    3b30:	6921      	ldr	r1, [r4, #16]
    3b32:	3e01      	subs	r6, #1
    3b34:	68a0      	ldr	r0, [r4, #8]
    3b36:	f000 fd99 	bl	466c <FatPartition::fatGet(unsigned long, unsigned long*)>
    3b3a:	2800      	cmp	r0, #0
    3b3c:	dd0b      	ble.n	3b56 <FatFile::seekSet(unsigned long)+0x82>
    3b3e:	4642      	mov	r2, r8
  while (nNew--) {
    3b40:	2e00      	cmp	r6, #0
    3b42:	d1f5      	bne.n	3b30 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b44:	78a2      	ldrb	r2, [r4, #2]
    3b46:	e00c      	b.n	3b62 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3b48:	065a      	lsls	r2, r3, #25
    3b4a:	d5d5      	bpl.n	3af8 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    3b4c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    3b4e:	891b      	ldrh	r3, [r3, #8]
    3b50:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3b54:	d9f6      	bls.n	3b44 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3b56:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3b58:	6127      	str	r7, [r4, #16]
}
    3b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b5e:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    3b60:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b62:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3b66:	2001      	movs	r0, #1
  m_curPosition = pos;
    3b68:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3b6a:	70a2      	strb	r2, [r4, #2]
}
    3b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3b70:	2001      	movs	r0, #1
}
    3b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3b76:	6a23      	ldr	r3, [r4, #32]
    3b78:	4433      	add	r3, r6
    3b7a:	6123      	str	r3, [r4, #16]
    goto done;
    3b7c:	e7f1      	b.n	3b62 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    3b7e:	1ab6      	subs	r6, r6, r2
    3b80:	e7d3      	b.n	3b2a <FatFile::seekSet(unsigned long)+0x56>
    3b82:	bf00      	nop

00003b84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b88:	460e      	mov	r6, r1
    3b8a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3b8c:	2100      	movs	r1, #0
    3b8e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3b90:	4604      	mov	r4, r0
    3b92:	4698      	mov	r8, r3
    3b94:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3b98:	f007 ff68 	bl	ba6c <memset>
  m_vol = dirFile->m_vol;
    3b9c:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3b9e:	6a33      	ldr	r3, [r6, #32]
    3ba0:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    3ba4:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3ba6:	f005 050f 	and.w	r5, r5, #15
    3baa:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3bae:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3bb2:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    3bb4:	070b      	lsls	r3, r1, #28
    3bb6:	d411      	bmi.n	3bdc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3bb8:	f001 0137 	and.w	r1, r1, #55	; 0x37
    3bbc:	7021      	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3bbe:	7ad3      	ldrb	r3, [r2, #11]
    3bc0:	f013 0f18 	tst.w	r3, #24
    3bc4:	d102      	bne.n	3bcc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3bc6:	f041 0108 	orr.w	r1, r1, #8
    3bca:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3bcc:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3bd0:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3bd2:	2b01      	cmp	r3, #1
    3bd4:	d03c      	beq.n	3c50 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    3bd6:	2b02      	cmp	r3, #2
    3bd8:	d006      	beq.n	3be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    3bda:	b313      	cbz	r3, 3c22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    3bdc:	2300      	movs	r3, #0
  return false;
    3bde:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3be0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3be2:	70a3      	strb	r3, [r4, #2]
}
    3be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3be8:	2303      	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3bea:	7821      	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    3bec:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    3bee:	06cd      	lsls	r5, r1, #27
    3bf0:	d4f4      	bmi.n	3bdc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3bf2:	07ce      	lsls	r6, r1, #31
    3bf4:	d4f2      	bmi.n	3bdc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3bf6:	f041 0120 	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    3bfa:	f418 6f80 	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3bfe:	7021      	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3c00:	f008 0108 	and.w	r1, r8, #8
    3c04:	ea43 0301 	orr.w	r3, r3, r1
    3c08:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    3c0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c0c:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3c0e:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3c10:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3c16:	d012      	beq.n	3c3e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3c18:	bb19      	cbnz	r1, 3c62 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c1e:	70a3      	strb	r3, [r4, #2]
    3c20:	e010      	b.n	3c44 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    3c22:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3c26:	d1d9      	bne.n	3bdc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3c28:	f008 0308 	and.w	r3, r8, #8
    3c2c:	f043 0301 	orr.w	r3, r3, #1
    3c30:	70a3      	strb	r3, [r4, #2]
    3c32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c34:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3c36:	61a1      	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    3c38:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    3c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3c3e:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3c40:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3c42:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3c44:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3c48:	d104      	bne.n	3c54 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    3c4a:	2001      	movs	r0, #1
}
    3c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3c50:	2302      	movs	r3, #2
    3c52:	e7ca      	b.n	3bea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3c54:	69e1      	ldr	r1, [r4, #28]
    3c56:	4620      	mov	r0, r4
    3c58:	f7ff ff3c 	bl	3ad4 <FatFile::seekSet(unsigned long)>
    3c5c:	2800      	cmp	r0, #0
    3c5e:	d1f4      	bne.n	3c4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    3c60:	e7bc      	b.n	3bdc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3c62:	f000 fd89 	bl	4778 <FatPartition::freeChain(unsigned long)>
    3c66:	2800      	cmp	r0, #0
    3c68:	d0b8      	beq.n	3bdc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3c6a:	78a3      	ldrb	r3, [r4, #2]
    3c6c:	e7d5      	b.n	3c1a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    3c6e:	bf00      	nop

00003c70 <FatFile::sync()>:
  if (!isOpen()) {
    3c70:	7803      	ldrb	r3, [r0, #0]
    3c72:	b10b      	cbz	r3, 3c78 <FatFile::sync()+0x8>
    3c74:	f7ff bb98 	b.w	33a8 <FatFile::sync() [clone .part.0]>
}
    3c78:	2001      	movs	r0, #1
    3c7a:	4770      	bx	lr

00003c7c <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    3c80:	7883      	ldrb	r3, [r0, #2]
    3c82:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3c84:	079c      	lsls	r4, r3, #30
    3c86:	d577      	bpl.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3c88:	4688      	mov	r8, r1
    3c8a:	0719      	lsls	r1, r3, #28
    3c8c:	4691      	mov	r9, r2
    3c8e:	f100 80b5 	bmi.w	3dfc <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3c92:	696b      	ldr	r3, [r5, #20]
    3c94:	eb13 0209 	adds.w	r2, r3, r9
    3c98:	d26e      	bcs.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3c9a:	f1b9 0f00 	cmp.w	r9, #0
    3c9e:	d040      	beq.n	3d22 <FatFile::write(void const*, unsigned int)+0xa6>
    3ca0:	464f      	mov	r7, r9
    m_status = 0;
    3ca2:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3ca6:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3ca8:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3cac:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3cae:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3cb0:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3cb4:	d13f      	bne.n	3d36 <FatFile::write(void const*, unsigned int)+0xba>
    3cb6:	2e00      	cmp	r6, #0
    3cb8:	d13d      	bne.n	3d36 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3cba:	2900      	cmp	r1, #0
    3cbc:	d06e      	beq.n	3d9c <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3cbe:	78aa      	ldrb	r2, [r5, #2]
    3cc0:	0652      	lsls	r2, r2, #25
    3cc2:	d576      	bpl.n	3db2 <FatFile::write(void const*, unsigned int)+0x136>
    3cc4:	69ea      	ldr	r2, [r5, #28]
    3cc6:	429a      	cmp	r2, r3
    3cc8:	d973      	bls.n	3db2 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3cca:	3101      	adds	r1, #1
    3ccc:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3cce:	3902      	subs	r1, #2
    3cd0:	7982      	ldrb	r2, [r0, #6]
    3cd2:	6943      	ldr	r3, [r0, #20]
    3cd4:	4091      	lsls	r1, r2
    3cd6:	4419      	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3cd8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3cdc:	d353      	bcc.n	3d86 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3cde:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3ce2:	d370      	bcc.n	3dc6 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3ce4:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3ce6:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3ce8:	1b1b      	subs	r3, r3, r4
    3cea:	4293      	cmp	r3, r2
    3cec:	bf28      	it	cs
    3cee:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3cf0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3cf2:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3cf4:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3cf8:	d307      	bcc.n	3d0a <FatFile::write(void const*, unsigned int)+0x8e>
    3cfa:	185e      	adds	r6, r3, r1
    3cfc:	42b2      	cmp	r2, r6
    3cfe:	d204      	bcs.n	3d0a <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3d00:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3d04:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3d08:	62c2      	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    3d0a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3d0c:	4642      	mov	r2, r8
    3d0e:	6806      	ldr	r6, [r0, #0]
    3d10:	6a76      	ldr	r6, [r6, #36]	; 0x24
    3d12:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3d14:	b380      	cbz	r0, 3d78 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3d16:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3d18:	1b3f      	subs	r7, r7, r4
    src += n;
    3d1a:	44a0      	add	r8, r4
    m_curPosition += n;
    3d1c:	4423      	add	r3, r4
    3d1e:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3d20:	d1c1      	bne.n	3ca6 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3d22:	69ea      	ldr	r2, [r5, #28]
    3d24:	429a      	cmp	r2, r3
    3d26:	d276      	bcs.n	3e16 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d28:	78aa      	ldrb	r2, [r5, #2]
    3d2a:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3d2c:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d2e:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3d32:	70ab      	strb	r3, [r5, #2]
    3d34:	e025      	b.n	3d82 <FatFile::write(void const*, unsigned int)+0x106>
    3d36:	7982      	ldrb	r2, [r0, #6]
    3d38:	3902      	subs	r1, #2
    3d3a:	6943      	ldr	r3, [r0, #20]
    3d3c:	4091      	lsls	r1, r2
    3d3e:	4419      	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3d40:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3d42:	2e00      	cmp	r6, #0
    3d44:	d0c8      	beq.n	3cd8 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3d46:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3d4a:	2201      	movs	r2, #1
    3d4c:	42bc      	cmp	r4, r7
    3d4e:	bf28      	it	cs
    3d50:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3d52:	3024      	adds	r0, #36	; 0x24
    3d54:	f003 fa32 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3d58:	b170      	cbz	r0, 3d78 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3d5a:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3d5c:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3d5e:	4622      	mov	r2, r4
    3d60:	4641      	mov	r1, r8
    3d62:	f004 f9b7 	bl	80d4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3d66:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3d6a:	68a8      	ldr	r0, [r5, #8]
    3d6c:	d1d3      	bne.n	3d16 <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    3d6e:	3024      	adds	r0, #36	; 0x24
    3d70:	f003 f9f8 	bl	7164 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3d74:	2800      	cmp	r0, #0
    3d76:	d1ce      	bne.n	3d16 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3d78:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3d7a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3d7c:	f043 0301 	orr.w	r3, r3, #1
    3d80:	706b      	strb	r3, [r5, #1]
}
    3d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d86:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3d8a:	696a      	ldr	r2, [r5, #20]
    3d8c:	69eb      	ldr	r3, [r5, #28]
    3d8e:	42bc      	cmp	r4, r7
    3d90:	bf28      	it	cs
    3d92:	463c      	movcs	r4, r7
    3d94:	429a      	cmp	r2, r3
    3d96:	d305      	bcc.n	3da4 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3d98:	2205      	movs	r2, #5
    3d9a:	e7da      	b.n	3d52 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3d9c:	6a29      	ldr	r1, [r5, #32]
    3d9e:	b321      	cbz	r1, 3dea <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3da0:	6129      	str	r1, [r5, #16]
    3da2:	e794      	b.n	3cce <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3da4:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3da6:	f013 0f20 	tst.w	r3, #32
    3daa:	bf14      	ite	ne
    3dac:	2205      	movne	r2, #5
    3dae:	2201      	moveq	r2, #1
    3db0:	e7cf      	b.n	3d52 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3db2:	f105 0210 	add.w	r2, r5, #16
    3db6:	f000 fc59 	bl	466c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3dba:	2800      	cmp	r0, #0
    3dbc:	dbdc      	blt.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3dbe:	d024      	beq.n	3e0a <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3dc0:	68a8      	ldr	r0, [r5, #8]
    3dc2:	6929      	ldr	r1, [r5, #16]
    3dc4:	e783      	b.n	3cce <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3dc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3dc8:	428b      	cmp	r3, r1
    3dca:	d104      	bne.n	3dd6 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3dcc:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3dd0:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3dd4:	62c3      	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    3dd6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3dd8:	4642      	mov	r2, r8
    3dda:	6803      	ldr	r3, [r0, #0]
    3ddc:	6a1b      	ldr	r3, [r3, #32]
    3dde:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3de0:	2800      	cmp	r0, #0
    3de2:	d0c9      	beq.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3de4:	f44f 7400 	mov.w	r4, #512	; 0x200
    3de8:	e795      	b.n	3d16 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3dea:	4628      	mov	r0, r5
    3dec:	f7ff fb3a 	bl	3464 <FatFile::addCluster()>
    3df0:	2800      	cmp	r0, #0
    3df2:	d0c1      	beq.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3df4:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3df6:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3df8:	6229      	str	r1, [r5, #32]
    3dfa:	e768      	b.n	3cce <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3dfc:	69c1      	ldr	r1, [r0, #28]
    3dfe:	f7ff fe69 	bl	3ad4 <FatFile::seekSet(unsigned long)>
    3e02:	2800      	cmp	r0, #0
    3e04:	f47f af45 	bne.w	3c92 <FatFile::write(void const*, unsigned int)+0x16>
    3e08:	e7b6      	b.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3e0a:	4628      	mov	r0, r5
    3e0c:	f7ff fb2a 	bl	3464 <FatFile::addCluster()>
    3e10:	2800      	cmp	r0, #0
    3e12:	d1d5      	bne.n	3dc0 <FatFile::write(void const*, unsigned int)+0x144>
    3e14:	e7b0      	b.n	3d78 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3e16:	4b05      	ldr	r3, [pc, #20]	; (3e2c <FatFile::write(void const*, unsigned int)+0x1b0>)
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	b12b      	cbz	r3, 3e28 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3e1c:	78ab      	ldrb	r3, [r5, #2]
    3e1e:	4648      	mov	r0, r9
    3e20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e24:	70ab      	strb	r3, [r5, #2]
    3e26:	e7ac      	b.n	3d82 <FatFile::write(void const*, unsigned int)+0x106>
    3e28:	4648      	mov	r0, r9
    3e2a:	e7aa      	b.n	3d82 <FatFile::write(void const*, unsigned int)+0x106>
    3e2c:	2002886c 	.word	0x2002886c

00003e30 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3e34:	4686      	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e36:	b08a      	sub	sp, #40	; 0x28
    3e38:	4615      	mov	r5, r2
  void reset() { next = begin; }
    3e3a:	6814      	ldr	r4, [r2, #0]
    3e3c:	4606      	mov	r6, r0
    3e3e:	4688      	mov	r8, r1
  FatFile dir = *this;
    3e40:	f10d 0c04 	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e44:	461f      	mov	r7, r3
  FatFile dir = *this;
    3e46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3e4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3e4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3e52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3e56:	f8de 3000 	ldr.w	r3, [lr]
    3e5a:	606c      	str	r4, [r5, #4]
    3e5c:	f8cc 3000 	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e60:	2f00      	cmp	r7, #0
    3e62:	d03b      	beq.n	3edc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    3e64:	f04f 0901 	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3e68:	eba8 0109 	sub.w	r1, r8, r9
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3e6c:	a801      	add	r0, sp, #4
    3e6e:	b289      	uxth	r1, r1
    3e70:	0149      	lsls	r1, r1, #5
    3e72:	f7ff fe2f 	bl	3ad4 <FatFile::seekSet(unsigned long)>
    3e76:	b398      	cbz	r0, 3ee0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3e78:	2100      	movs	r1, #0
    3e7a:	a801      	add	r0, sp, #4
    3e7c:	f7ff fe08 	bl	3a90 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3e80:	4682      	mov	sl, r0
    3e82:	b368      	cbz	r0, 3ee0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    3e84:	2400      	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    3e86:	b2e2      	uxtb	r2, r4
    3e88:	4651      	mov	r1, sl
    3e8a:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3e8c:	3401      	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    3e8e:	f000 fb75 	bl	457c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3e92:	b2c3      	uxtb	r3, r0
      if (fname->atEnd()) {
    3e94:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    3e98:	428a      	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    3e9a:	f101 0c01 	add.w	ip, r1, #1
    3e9e:	d023      	beq.n	3ee8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3ea0:	287f      	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3ea2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    3ea6:	f1a3 0e20 	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3eaa:	d819      	bhi.n	3ee0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    3eac:	2a19      	cmp	r2, #25
    3eae:	f8c5 c004 	str.w	ip, [r5, #4]
    3eb2:	780a      	ldrb	r2, [r1, #0]
    3eb4:	bf98      	it	ls
    3eb6:	fa5f f38e 	uxtbls.w	r3, lr
    3eba:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    3ebe:	f1a2 0020 	sub.w	r0, r2, #32
    3ec2:	2919      	cmp	r1, #25
    3ec4:	bf98      	it	ls
    3ec6:	b2c2      	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    3ec8:	429a      	cmp	r2, r3
    3eca:	d109      	bne.n	3ee0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    3ecc:	2c0d      	cmp	r4, #13
    3ece:	d1da      	bne.n	3e86 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3ed0:	f109 0901 	add.w	r9, r9, #1
    3ed4:	fa5f f989 	uxtb.w	r9, r9
    3ed8:	454f      	cmp	r7, r9
    3eda:	d2c5      	bcs.n	3e68 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    3edc:	2001      	movs	r0, #1
    3ede:	e000      	b.n	3ee2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    3ee0:	2000      	movs	r0, #0
}
    3ee2:	b00a      	add	sp, #40	; 0x28
    3ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    3ee8:	fab0 f080 	clz	r0, r0
    3eec:	0940      	lsrs	r0, r0, #5
}
    3eee:	b00a      	add	sp, #40	; 0x28
    3ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003ef4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    3ef8:	4686      	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3efa:	b08a      	sub	sp, #40	; 0x28
    3efc:	4614      	mov	r4, r2
    3efe:	4688      	mov	r8, r1
    3f00:	461e      	mov	r6, r3
  FatFile dir = *this;
    3f02:	f10d 0904 	add.w	r9, sp, #4
    3f06:	f102 0711 	add.w	r7, r2, #17
    3f0a:	f102 0c1c 	add.w	ip, r2, #28
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    3f0e:	2500      	movs	r5, #0
    3f10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3f14:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3f18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3f1c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
    3f20:	f8de 3000 	ldr.w	r3, [lr]
    3f24:	f8c9 3000 	str.w	r3, [r9]
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3f28:	01eb      	lsls	r3, r5, #7
    3f2a:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    3f2e:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3f32:	4567      	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3f34:	fa52 f383 	uxtab	r3, r2, r3
    3f38:	b2dd      	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    3f3a:	d1f5      	bne.n	3f28 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    3f3c:	6823      	ldr	r3, [r4, #0]
    3f3e:	6063      	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f40:	2e00      	cmp	r6, #0
    3f42:	d059      	beq.n	3ff8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    3f44:	f04f 0900 	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f48:	f04f 0a01 	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3f4c:	464f      	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3f4e:	eba8 010a 	sub.w	r1, r8, sl
    3f52:	a801      	add	r0, sp, #4
    3f54:	b289      	uxth	r1, r1
    3f56:	0149      	lsls	r1, r1, #5
    3f58:	f7ff fdbc 	bl	3ad4 <FatFile::seekSet(unsigned long)>
    3f5c:	2800      	cmp	r0, #0
    3f5e:	d053      	beq.n	4008 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3f60:	2100      	movs	r1, #0
    3f62:	a801      	add	r0, sp, #4
    3f64:	f7ff fd94 	bl	3a90 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3f68:	2800      	cmp	r0, #0
    3f6a:	d04d      	beq.n	4008 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3f6c:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f6e:	45b2      	cmp	sl, r6
  bool atEnd() { return next == end; }
    3f70:	f04f 0c01 	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    3f74:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    3f78:	f043 0301 	orr.w	r3, r3, #1
    3f7c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3f80:	bf0c      	ite	eq
    3f82:	f04a 0240 	orreq.w	r2, sl, #64	; 0x40
    3f86:	4652      	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f88:	230f      	movs	r3, #15
    ldir->mustBeZero1 = 0;
    3f8a:	7307      	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f8c:	7002      	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f8e:	1c42      	adds	r2, r0, #1
    3f90:	72c3      	strb	r3, [r0, #11]
    3f92:	2300      	movs	r3, #0
    ldir->checksum = checksum;
    3f94:	7345      	strb	r5, [r0, #13]
    3f96:	68a1      	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3f98:	8347      	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3f9a:	e006      	b.n	3faa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    3f9c:	8010      	strh	r0, [r2, #0]
    3f9e:	f10c 0c01 	add.w	ip, ip, #1
    3fa2:	3301      	adds	r3, #1
    3fa4:	3202      	adds	r2, #2
    3fa6:	fa5f fc8c 	uxtb.w	ip, ip
    3faa:	6860      	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    3fac:	4288      	cmp	r0, r1
    3fae:	d00e      	beq.n	3fce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3fb0:	f100 0e01 	add.w	lr, r0, #1
    3fb4:	f8c4 e004 	str.w	lr, [r4, #4]
    3fb8:	7800      	ldrb	r0, [r0, #0]
  if (i < 5) {
    3fba:	2b04      	cmp	r3, #4
    3fbc:	fa5f fe83 	uxtb.w	lr, r3
    3fc0:	d9ec      	bls.n	3f9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    3fc2:	f1be 0f0a 	cmp.w	lr, #10
    3fc6:	d80c      	bhi.n	3fe2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    3fc8:	f8a2 0003 	strh.w	r0, [r2, #3]
}
    3fcc:	e7e7      	b.n	3f9e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    3fce:	f1b9 0f00 	cmp.w	r9, #0
    3fd2:	d015      	beq.n	4000 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    3fd4:	f109 0901 	add.w	r9, r9, #1
    3fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3fdc:	fa5f f989 	uxtb.w	r9, r9
    3fe0:	e7eb      	b.n	3fba <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    3fe2:	f1bc 0f0d 	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3fe6:	f8a2 0005 	strh.w	r0, [r2, #5]
    3fea:	d1d8      	bne.n	3f9e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3fec:	f10a 0a01 	add.w	sl, sl, #1
    3ff0:	fa5f fa8a 	uxtb.w	sl, sl
    3ff4:	4556      	cmp	r6, sl
    3ff6:	d2aa      	bcs.n	3f4e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3ff8:	2001      	movs	r0, #1

fail:
  return false;
}
    3ffa:	b00a      	add	sp, #40	; 0x28
    3ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    4000:	4648      	mov	r0, r9
    4002:	f04f 0901 	mov.w	r9, #1
    4006:	e7d8      	b.n	3fba <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    4008:	2000      	movs	r0, #0
}
    400a:	b00a      	add	sp, #40	; 0x28
    400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004010 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    4010:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    4012:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    4016:	f852 3b12 	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    401a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    401e:	f8c0 1012 	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    4022:	4686      	mov	lr, r0
  const char* end = fname->end;
    4024:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    4026:	6051      	str	r1, [r2, #4]
    4028:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    402c:	781a      	ldrb	r2, [r3, #0]
    402e:	2a2e      	cmp	r2, #46	; 0x2e
    4030:	bf14      	ite	ne
    4032:	2001      	movne	r0, #1
    4034:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    4036:	d103      	bne.n	4040 <FatFile::makeSFN(FatLfn_t*)+0x30>
    4038:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    403c:	2a2e      	cmp	r2, #46	; 0x2e
    403e:	d0fb      	beq.n	4038 <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    4040:	1e61      	subs	r1, r4, #1
    4042:	4299      	cmp	r1, r3
    4044:	d90b      	bls.n	405e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    4046:	460a      	mov	r2, r1
    4048:	e002      	b.n	4050 <FatFile::makeSFN(FatLfn_t*)+0x40>
    404a:	4293      	cmp	r3, r2
    404c:	4611      	mov	r1, r2
    404e:	d006      	beq.n	405e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    4050:	4611      	mov	r1, r2
    4052:	3a01      	subs	r2, #1
    4054:	f891 c000 	ldrb.w	ip, [r1]
    4058:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    405c:	d1f5      	bne.n	404a <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    405e:	429c      	cmp	r4, r3
    4060:	f04f 0500 	mov.w	r5, #0
    4064:	f240 8086 	bls.w	4174 <FatFile::makeSFN(FatLfn_t*)+0x164>
    4068:	2607      	movs	r6, #7
    406a:	2708      	movs	r7, #8
    406c:	46a9      	mov	r9, r5
    406e:	46a8      	mov	r8, r5
    4070:	e006      	b.n	4080 <FatFile::makeSFN(FatLfn_t*)+0x70>
    4072:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    4074:	260a      	movs	r6, #10
      i = 8;                  // Place for extension.
    4076:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    407a:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    407c:	429c      	cmp	r4, r3
    407e:	d95b      	bls.n	4138 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    4080:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    4082:	2a2e      	cmp	r2, #46	; 0x2e
    4084:	bf08      	it	eq
    4086:	4299      	cmpeq	r1, r3
    4088:	d0f3      	beq.n	4072 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    408a:	2a22      	cmp	r2, #34	; 0x22
    408c:	d00d      	beq.n	40aa <FatFile::makeSFN(FatLfn_t*)+0x9a>
    408e:	2a7c      	cmp	r2, #124	; 0x7c
    4090:	d00b      	beq.n	40aa <FatFile::makeSFN(FatLfn_t*)+0x9a>
    4092:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    4096:	f1bc 0f02 	cmp.w	ip, #2
    409a:	d906      	bls.n	40aa <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    409c:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    40a0:	f1bc 0f05 	cmp.w	ip, #5
    40a4:	d821      	bhi.n	40ea <FatFile::makeSFN(FatLfn_t*)+0xda>
    40a6:	2a2d      	cmp	r2, #45	; 0x2d
    40a8:	d01f      	beq.n	40ea <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    40aa:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    40ae:	2a80      	cmp	r2, #128	; 0x80
    40b0:	d05d      	beq.n	416e <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    40b2:	454e      	cmp	r6, r9
    40b4:	d22f      	bcs.n	4116 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    40b6:	4299      	cmp	r1, r3
    40b8:	bf2c      	ite	cs
    40ba:	2000      	movcs	r0, #0
    40bc:	2001      	movcc	r0, #1
    40be:	2e0a      	cmp	r6, #10
    40c0:	bf08      	it	eq
    40c2:	f040 0001 	orreq.w	r0, r0, #1
    40c6:	2800      	cmp	r0, #0
    40c8:	d047      	beq.n	415a <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    40ca:	f89e 3012 	ldrb.w	r3, [lr, #18]
    40ce:	2b20      	cmp	r3, #32
    40d0:	d040      	beq.n	4154 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    40d2:	f89e 3010 	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    40d6:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    40d8:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    40da:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    40dc:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    40de:	f88e 0011 	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    40e2:	7499      	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    40e4:	74da      	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    40e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    40ea:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    40ee:	f1bc 0f05 	cmp.w	ip, #5
    40f2:	d9da      	bls.n	40aa <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    40f4:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    40f8:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    40fc:	d8d5      	bhi.n	40aa <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    40fe:	454e      	cmp	r6, r9
    4100:	d3d9      	bcc.n	40b6 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    4102:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    4106:	f1bc 0f19 	cmp.w	ip, #25
    410a:	d828      	bhi.n	415e <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    410c:	3a20      	subs	r2, #32
        lc |= bit;
    410e:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    4110:	b2d2      	uxtb	r2, r2
        lc |= bit;
    4112:	b2ed      	uxtb	r5, r5
    4114:	e001      	b.n	411a <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    4116:	2000      	movs	r0, #0
        c = '_';
    4118:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    411a:	f109 0c01 	add.w	ip, r9, #1
    411e:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    4120:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    4122:	f889 2012 	strb.w	r2, [r9, #18]
    4126:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    412a:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    412c:	4691      	mov	r9, r2
    412e:	bf98      	it	ls
    4130:	f88e 2010 	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    4134:	429c      	cmp	r4, r3
    4136:	d8a3      	bhi.n	4080 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    4138:	f89e 3012 	ldrb.w	r3, [lr, #18]
    413c:	2b20      	cmp	r3, #32
    413e:	d009      	beq.n	4154 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    4140:	2800      	cmp	r0, #0
    4142:	d0c6      	beq.n	40d2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    4144:	ea18 0f05 	tst.w	r8, r5
    4148:	bf18      	it	ne
    414a:	2502      	movne	r5, #2
    414c:	f88e 5011 	strb.w	r5, [lr, #17]
}
    4150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    4154:	2000      	movs	r0, #0
}
    4156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    415a:	460b      	mov	r3, r1
    415c:	e78e      	b.n	407c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    415e:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    4162:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    4166:	bf98      	it	ls
    4168:	ea47 0808 	orrls.w	r8, r7, r8
    416c:	e7d5      	b.n	411a <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    416e:	3301      	adds	r3, #1
        is83 = false;
    4170:	2000      	movs	r0, #0
    4172:	e783      	b.n	407c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    4174:	46a8      	mov	r8, r5
    4176:	e7df      	b.n	4138 <FatFile::makeSFN(FatLfn_t*)+0x128>

00004178 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    4178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    417c:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    4180:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    4182:	460f      	mov	r7, r1
    4184:	4604      	mov	r4, r0
    4186:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 4228 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    418a:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    418e:	f891 8010 	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4192:	f101 0612 	add.w	r6, r1, #18
	return systick_millis_count;
    4196:	f1b8 0f03 	cmp.w	r8, #3
    419a:	f8db 3000 	ldr.w	r3, [fp]
    419e:	bf28      	it	cs
    41a0:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    41a4:	442b      	add	r3, r5
    41a6:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    41a8:	f108 0304 	add.w	r3, r8, #4
    41ac:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    41ae:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    41b2:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    41b4:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    41b6:	2a09      	cmp	r2, #9
    41b8:	f102 0137 	add.w	r1, r2, #55	; 0x37
    41bc:	bf98      	it	ls
    41be:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    41c2:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    41c4:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    41c6:	7491      	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    41c8:	4598      	cmp	r8, r3
    41ca:	d1f0      	bne.n	41ae <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    41cc:	eb07 0308 	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    41d0:	2100      	movs	r1, #0
    41d2:	4620      	mov	r0, r4
    41d4:	f883 a012 	strb.w	sl, [r3, #18]
    41d8:	f7ff fc7c 	bl	3ad4 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    41dc:	2101      	movs	r1, #1
    41de:	4620      	mov	r0, r4
    41e0:	f7ff fc56 	bl	3a90 <FatFile::readDirCache(bool)>
    41e4:	4603      	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    41e6:	220b      	movs	r2, #11
    41e8:	4630      	mov	r0, r6
      if (!dir) {
    41ea:	b19b      	cbz	r3, 4214 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    41ec:	f893 c000 	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    41f0:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    41f2:	f1bc 0f00 	cmp.w	ip, #0
    41f6:	d013      	beq.n	4220 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    41f8:	7adb      	ldrb	r3, [r3, #11]
    41fa:	071b      	lsls	r3, r3, #28
    41fc:	d4ee      	bmi.n	41dc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    41fe:	f007 fb89 	bl	b914 <memcmp>
    4202:	2800      	cmp	r0, #0
    4204:	d1ea      	bne.n	41dc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    4206:	f109 39ff 	add.w	r9, r9, #4294967295
    420a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    420e:	d1c2      	bne.n	4196 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    4210:	4648      	mov	r0, r9
fail:
    4212:	e003      	b.n	421c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    4214:	7860      	ldrb	r0, [r4, #1]
    4216:	fab0 f080 	clz	r0, r0
    421a:	0940      	lsrs	r0, r0, #5

done:
  return true;
}
    421c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    4220:	2001      	movs	r0, #1
}
    4222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4226:	bf00      	nop
    4228:	2002945c 	.word	0x2002945c

0000422c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4230:	ed2d 8b02 	vpush	{d8}
    4234:	b08b      	sub	sp, #44	; 0x2c
    4236:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    423a:	688b      	ldr	r3, [r1, #8]
    423c:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    423e:	780b      	ldrb	r3, [r1, #0]
    4240:	f013 0fd0 	tst.w	r3, #208	; 0xd0
    4244:	d052      	beq.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  bool isOpen() const { return m_attributes; }
    4246:	9b02      	ldr	r3, [sp, #8]
    4248:	781b      	ldrb	r3, [r3, #0]
    424a:	2b00      	cmp	r3, #0
    424c:	d14e      	bne.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    424e:	68d3      	ldr	r3, [r2, #12]
    4250:	4690      	mov	r8, r2
    4252:	4a9c      	ldr	r2, [pc, #624]	; (44c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>)
    4254:	460e      	mov	r6, r1
    4256:	330c      	adds	r3, #12
    4258:	fba2 2303 	umull	r2, r3, r2, r3
    425c:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4260:	f898 3011 	ldrb.w	r3, [r8, #17]
    4264:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    4266:	9204      	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4268:	f000 80ab 	beq.w	43c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x196>
    426c:	1c57      	adds	r7, r2, #1
    426e:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    4270:	2300      	movs	r3, #0
  void rewind() { seekSet(0); }
    4272:	4630      	mov	r0, r6
    4274:	4619      	mov	r1, r3
    4276:	461c      	mov	r4, r3
    4278:	9306      	str	r3, [sp, #24]
    427a:	f7ff fc2b 	bl	3ad4 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    427e:	f108 0312 	add.w	r3, r8, #18
  uint8_t order = 0;
    4282:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    4284:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    4286:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4288:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    428c:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    428e:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    4290:	2100      	movs	r1, #0
    4292:	4630      	mov	r0, r6
    4294:	f7ff fbfc 	bl	3a90 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    4298:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    429c:	4603      	mov	r3, r0
    429e:	b318      	cbz	r0, 42e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    42a0:	7802      	ldrb	r2, [r0, #0]
    42a2:	2ae5      	cmp	r2, #229	; 0xe5
    42a4:	d028      	beq.n	42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
    42a6:	b33a      	cbz	r2, 42f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
        freeFound = 0;
    42a8:	42bc      	cmp	r4, r7
    42aa:	bf38      	it	cc
    42ac:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    42ae:	2a2e      	cmp	r2, #46	; 0x2e
    42b0:	d02a      	beq.n	4308 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    42b2:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    42b6:	f1bc 0f0f 	cmp.w	ip, #15
    42ba:	d057      	beq.n	436c <FatFile::open(FatFile*, FatLfn_t*, int)+0x140>
    } else if (isFatFileOrSubdir(dir)) {
    42bc:	f01c 0c08 	ands.w	ip, ip, #8
    42c0:	d122      	bne.n	4308 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
      if (lfnOrd) {
    42c2:	f1b9 0f00 	cmp.w	r9, #0
    42c6:	d17e      	bne.n	43c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x19a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    42c8:	220b      	movs	r2, #11
    42ca:	ee18 1a10 	vmov	r1, s16
    42ce:	f007 fb21 	bl	b914 <memcmp>
    42d2:	2800      	cmp	r0, #0
    42d4:	d1db      	bne.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    42d6:	f898 3011 	ldrb.w	r3, [r8, #17]
    42da:	f013 0301 	ands.w	r3, r3, #1
    42de:	f000 80e9 	beq.w	44b4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x288>
          goto found;
        }
        fnameFound = true;
    42e2:	2301      	movs	r3, #1
    42e4:	9305      	str	r3, [sp, #20]
    42e6:	e7d2      	b.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    42e8:	7873      	ldrb	r3, [r6, #1]
    42ea:	b183      	cbz	r3, 430e <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
    goto fail;
  }
  return true;

fail:
  return false;
    42ec:	2000      	movs	r0, #0
}
    42ee:	b00b      	add	sp, #44	; 0x2c
    42f0:	ecbd 8b02 	vpop	{d8}
    42f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    42f8:	2c00      	cmp	r4, #0
    42fa:	bf08      	it	eq
    42fc:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    42fe:	42bc      	cmp	r4, r7
    4300:	d201      	bcs.n	4306 <FatFile::open(FatFile*, FatLfn_t*, int)+0xda>
        freeFound++;
    4302:	3401      	adds	r4, #1
    4304:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    4306:	b112      	cbz	r2, 430e <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
      lfnOrd = 0;
    4308:	f04f 0900 	mov.w	r9, #0
    430c:	e7bf      	b.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    430e:	9b03      	ldr	r3, [sp, #12]
    4310:	059a      	lsls	r2, r3, #22
    4312:	d5eb      	bpl.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    4314:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    4318:	3b01      	subs	r3, #1
    431a:	2b01      	cmp	r3, #1
    431c:	d8e6      	bhi.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (freeFound == 0) {
    431e:	2c00      	cmp	r4, #0
    4320:	bf08      	it	eq
    4322:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    4324:	42bc      	cmp	r4, r7
    4326:	d303      	bcc.n	4330 <FatFile::open(FatFile*, FatLfn_t*, int)+0x104>
    4328:	e00c      	b.n	4344 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    freeFound++;
    432a:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    432c:	42a7      	cmp	r7, r4
    432e:	d009      	beq.n	4344 <FatFile::open(FatFile*, FatLfn_t*, int)+0x118>
    dir = dirFile->readDirCache();
    4330:	2100      	movs	r1, #0
    4332:	4630      	mov	r0, r6
    4334:	f7ff fbac 	bl	3a90 <FatFile::readDirCache(bool)>
    freeFound++;
    4338:	1c63      	adds	r3, r4, #1
    if (!dir) {
    433a:	2800      	cmp	r0, #0
    433c:	d1f5      	bne.n	432a <FatFile::open(FatFile*, FatLfn_t*, int)+0xfe>
      if (dirFile->getError()) {
    433e:	7873      	ldrb	r3, [r6, #1]
    4340:	2b00      	cmp	r3, #0
    4342:	d1d3      	bne.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  freeTotal = freeFound;
    4344:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    4346:	b2bd      	uxth	r5, r7
    4348:	42a7      	cmp	r7, r4
    434a:	d95e      	bls.n	440a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    434c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4350:	e006      	b.n	4360 <FatFile::open(FatFile*, FatLfn_t*, int)+0x134>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    4352:	f899 3004 	ldrb.w	r3, [r9, #4]
    freeTotal += vol->dirEntriesPerCluster();
    4356:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    435a:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
    435c:	42a5      	cmp	r5, r4
    435e:	d954      	bls.n	440a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1de>
    if (!dirFile->addDirCluster()) {
    4360:	4630      	mov	r0, r6
    4362:	f7ff f899 	bl	3498 <FatFile::addDirCluster()>
    4366:	2800      	cmp	r0, #0
    4368:	d1f3      	bne.n	4352 <FatFile::open(FatFile*, FatLfn_t*, int)+0x126>
    436a:	e7bf      	b.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      if (!lfnOrd) {
    436c:	f1b9 0f00 	cmp.w	r9, #0
    4370:	d11a      	bne.n	43a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
        order = ldir->order & 0X1F;
    4372:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    4376:	9904      	ldr	r1, [sp, #16]
    4378:	4559      	cmp	r1, fp
    437a:	d188      	bne.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    437c:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    4380:	d085      	beq.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    4382:	7b43      	ldrb	r3, [r0, #13]
    4384:	4689      	mov	r9, r1
    4386:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    4388:	f1bb 0f01 	cmp.w	fp, #1
    438c:	f47f af7f 	bne.w	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    4390:	1c69      	adds	r1, r5, #1
    4392:	464b      	mov	r3, r9
    4394:	4642      	mov	r2, r8
    4396:	4630      	mov	r0, r6
    4398:	b289      	uxth	r1, r1
    439a:	f7ff fd49 	bl	3e30 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    439e:	2800      	cmp	r0, #0
    43a0:	bf08      	it	eq
    43a2:	f04f 0900 	moveq.w	r9, #0
    43a6:	e772      	b.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    43a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    43ac:	fa5f fb8b 	uxtb.w	fp, fp
    43b0:	455a      	cmp	r2, fp
    43b2:	d1a9      	bne.n	4308 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
    43b4:	7b43      	ldrb	r3, [r0, #13]
    43b6:	9a06      	ldr	r2, [sp, #24]
    43b8:	4293      	cmp	r3, r2
    43ba:	d0e5      	beq.n	4388 <FatFile::open(FatFile*, FatLfn_t*, int)+0x15c>
      lfnOrd = 0;
    43bc:	f04f 0900 	mov.w	r9, #0
    43c0:	e765      	b.n	428e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    43c2:	2701      	movs	r7, #1
    43c4:	e754      	b.n	4270 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    43c6:	f1bb 0f01 	cmp.w	fp, #1
    43ca:	d18f      	bne.n	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    for (uint8_t i = 0; i < 11; i++) {
    43cc:	300a      	adds	r0, #10
    43ce:	e001      	b.n	43d4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a8>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    43d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    43d4:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    43d8:	4298      	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    43da:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    43de:	fa52 f281 	uxtab	r2, r2, r1
    43e2:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    43e6:	d1f3      	bne.n	43d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a4>
    43e8:	9b06      	ldr	r3, [sp, #24]
    43ea:	4563      	cmp	r3, ip
    43ec:	f47f af7e 	bne.w	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    43f0:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    43f2:	9b03      	ldr	r3, [sp, #12]
    43f4:	0519      	lsls	r1, r3, #20
    43f6:	f53f af79 	bmi.w	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    43fa:	9b03      	ldr	r3, [sp, #12]
    43fc:	462a      	mov	r2, r5
    43fe:	4631      	mov	r1, r6
    4400:	9802      	ldr	r0, [sp, #8]
    4402:	9700      	str	r7, [sp, #0]
    4404:	f7ff fbbe 	bl	3b84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4408:	e771      	b.n	42ee <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (fnameFound) {
    440a:	9b05      	ldr	r3, [sp, #20]
    440c:	b133      	cbz	r3, 441c <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f0>
    if (!dirFile->makeUniqueSfn(fname)) {
    440e:	4641      	mov	r1, r8
    4410:	4630      	mov	r0, r6
    4412:	f7ff feb1 	bl	4178 <FatFile::makeUniqueSfn(FatLfn_t*)>
    4416:	2800      	cmp	r0, #0
    4418:	f43f af68 	beq.w	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  lfnOrd = freeNeed - 1;
    441c:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    441e:	4642      	mov	r2, r8
    4420:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    4422:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    4424:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    4428:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    442a:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    442c:	4629      	mov	r1, r5
    442e:	f7ff fd61 	bl	3ef4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    4432:	2800      	cmp	r0, #0
    4434:	f43f af5a 	beq.w	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4438:	0169      	lsls	r1, r5, #5
    443a:	4630      	mov	r0, r6
    443c:	f7ff fb4a 	bl	3ad4 <FatFile::seekSet(unsigned long)>
    4440:	2800      	cmp	r0, #0
    4442:	f43f af53 	beq.w	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    4446:	2100      	movs	r1, #0
    4448:	4630      	mov	r0, r6
    444a:	f7ff fb21 	bl	3a90 <FatFile::readDirCache(bool)>
  if (!dir) {
    444e:	4604      	mov	r4, r0
    4450:	2800      	cmp	r0, #0
    4452:	f43f af4b 	beq.w	42ec <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  memset(dir, 0, sizeof(DirFat_t));
    4456:	2220      	movs	r2, #32
    4458:	2100      	movs	r1, #0
    445a:	f007 fb07 	bl	ba6c <memset>
  memcpy(dir->name, fname->sfn, 11);
    445e:	f8d8 2012 	ldr.w	r2, [r8, #18]
    4462:	f8d8 3016 	ldr.w	r3, [r8, #22]
    4466:	6022      	str	r2, [r4, #0]
    4468:	6063      	str	r3, [r4, #4]
    446a:	f898 301c 	ldrb.w	r3, [r8, #28]
    446e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
    4472:	72a3      	strb	r3, [r4, #10]
    4474:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4476:	f898 3011 	ldrb.w	r3, [r8, #17]
    447a:	f003 0318 	and.w	r3, r3, #24
    447e:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    4480:	4b11      	ldr	r3, [pc, #68]	; (44c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>)
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	b1c3      	cbz	r3, 44b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x28c>
    FsDateTime::callback(&date, &time, &ms10);
    4486:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    448a:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    448e:	a809      	add	r0, sp, #36	; 0x24
    4490:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    4492:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4496:	8223      	strh	r3, [r4, #16]
    4498:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    449c:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    449e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    44a2:	7363      	strb	r3, [r4, #13]
    44a4:	9a07      	ldr	r2, [sp, #28]
    44a6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    44aa:	f043 0301 	orr.w	r3, r3, #1
    44ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
    44b2:	e7a2      	b.n	43fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ce>
    44b4:	461f      	mov	r7, r3
    44b6:	e79c      	b.n	43f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
    44b8:	f245 6321 	movw	r3, #22049	; 0x5621
    44bc:	8223      	strh	r3, [r4, #16]
    44be:	8323      	strh	r3, [r4, #24]
    44c0:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    44c2:	e7ef      	b.n	44a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x278>
    44c4:	4ec4ec4f 	.word	0x4ec4ec4f
    44c8:	2002886c 	.word	0x2002886c

000044cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    44cc:	7808      	ldrb	r0, [r1, #0]
    44ce:	2820      	cmp	r0, #32
                            const char** ptr) {
    44d0:	b430      	push	{r4, r5}
  while (*path == ' ') {
    44d2:	d103      	bne.n	44dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    44d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    44d8:	2c20      	cmp	r4, #32
    44da:	d0fb      	beq.n	44d4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    44dc:	2500      	movs	r5, #0
  fname->begin = path;
    44de:	6011      	str	r1, [r2, #0]
  fname->len = 0;
    44e0:	60d5      	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    44e2:	780c      	ldrb	r4, [r1, #0]
    44e4:	2c2f      	cmp	r4, #47	; 0x2f
    44e6:	d00f      	beq.n	4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    44e8:	b174      	cbz	r4, 4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    44ea:	4823      	ldr	r0, [pc, #140]	; (4578 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    44ec:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    44f0:	f101 0101 	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    44f4:	d108      	bne.n	4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    44f6:	2c3c      	cmp	r4, #60	; 0x3c
    44f8:	d82f      	bhi.n	455a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    44fa:	2c21      	cmp	r4, #33	; 0x21
    44fc:	d807      	bhi.n	450e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    44fe:	f104 3cff 	add.w	ip, r4, #4294967295
    4502:	f1bc 0f1e 	cmp.w	ip, #30
    4506:	d80b      	bhi.n	4520 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    4508:	2000      	movs	r0, #0
    450a:	bc30      	pop	{r4, r5}
    450c:	4770      	bx	lr
    450e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    4512:	fa5f fc8c 	uxtb.w	ip, ip
    4516:	fa20 fc0c 	lsr.w	ip, r0, ip
    451a:	f01c 0f01 	tst.w	ip, #1
    451e:	d1f3      	bne.n	4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    4520:	2c2e      	cmp	r4, #46	; 0x2e
    len++;
    4522:	f105 0501 	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    4526:	d001      	beq.n	452c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    4528:	2c20      	cmp	r4, #32
    452a:	d11c      	bne.n	4566 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    452c:	780c      	ldrb	r4, [r1, #0]
    452e:	b10c      	cbz	r4, 4534 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    4530:	2c2f      	cmp	r4, #47	; 0x2f
    4532:	d1db      	bne.n	44ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    4534:	68d0      	ldr	r0, [r2, #12]
    4536:	3801      	subs	r0, #1
    4538:	28fe      	cmp	r0, #254	; 0xfe
    453a:	d8e5      	bhi.n	4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    453c:	2c20      	cmp	r4, #32
    453e:	d001      	beq.n	4544 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    4540:	2c2f      	cmp	r4, #47	; 0x2f
    4542:	d105      	bne.n	4550 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    4544:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4548:	2820      	cmp	r0, #32
    454a:	d0fb      	beq.n	4544 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    454c:	282f      	cmp	r0, #47	; 0x2f
    454e:	d0f9      	beq.n	4544 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    4550:	4610      	mov	r0, r2
  *ptr = path;
    4552:	6019      	str	r1, [r3, #0]
}
    4554:	bc30      	pop	{r4, r5}
  return makeSFN(fname);
    4556:	f7ff bd5b 	b.w	4010 <FatFile::makeSFN(FatLfn_t*)>
    455a:	2c5c      	cmp	r4, #92	; 0x5c
    455c:	d0d4      	beq.n	4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    455e:	d905      	bls.n	456c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    4560:	2c7c      	cmp	r4, #124	; 0x7c
    4562:	d0d1      	beq.n	4508 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    4564:	3501      	adds	r5, #1
      fname->end = path;
    4566:	e9c2 1502 	strd	r1, r5, [r2, #8]
    456a:	e7df      	b.n	452c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    456c:	3c3e      	subs	r4, #62	; 0x3e
    456e:	2c01      	cmp	r4, #1
    4570:	d8f8      	bhi.n	4564 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    4572:	2000      	movs	r0, #0
    4574:	bc30      	pop	{r4, r5}
    4576:	4770      	bx	lr
    4578:	05002101 	.word	0x05002101

0000457c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    457c:	2a04      	cmp	r2, #4
    457e:	d804      	bhi.n	458a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    4580:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4584:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    4588:	4770      	bx	lr
  } else if (i < 11) {
    458a:	2a0a      	cmp	r2, #10
    458c:	d803      	bhi.n	4596 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    458e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4592:	8890      	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    4594:	4770      	bx	lr
  } else if (i < 13) {
    4596:	2a0c      	cmp	r2, #12
    4598:	d803      	bhi.n	45a2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    459a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    459e:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    45a0:	4770      	bx	lr
  return 0;
    45a2:	2000      	movs	r0, #0
}
    45a4:	4770      	bx	lr
    45a6:	bf00      	nop

000045a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    45a8:	b570      	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    45aa:	79c3      	ldrb	r3, [r0, #7]
    45ac:	4605      	mov	r5, r0
    45ae:	460c      	mov	r4, r1
    45b0:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    45b2:	2b20      	cmp	r3, #32
    45b4:	d019      	beq.n	45ea <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    45b6:	2b10      	cmp	r3, #16
    45b8:	d002      	beq.n	45c0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    45ba:	f04f 30ff 	mov.w	r0, #4294967295
}
    45be:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    45c0:	6983      	ldr	r3, [r0, #24]
    45c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    45c6:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45ca:	2202      	movs	r2, #2
    45cc:	4419      	add	r1, r3
    45ce:	f002 fdf5 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45d2:	2800      	cmp	r0, #0
    45d4:	d0f1      	beq.n	45ba <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    45d6:	0061      	lsls	r1, r4, #1
  if (isEOC(next)) {
    45d8:	69ea      	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    45da:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    45de:	5a43      	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    45e0:	429a      	cmp	r2, r3
    45e2:	d313      	bcc.n	460c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    45e4:	2001      	movs	r0, #1
  *value = next;
    45e6:	6033      	str	r3, [r6, #0]
}
    45e8:	bd70      	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45ea:	6981      	ldr	r1, [r0, #24]
    45ec:	2202      	movs	r2, #2
    45ee:	f500 700d 	add.w	r0, r0, #564	; 0x234
    45f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    45f6:	f002 fde1 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45fa:	2800      	cmp	r0, #0
    45fc:	d0dd      	beq.n	45ba <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    45fe:	00a1      	lsls	r1, r4, #2
  if (isEOC(next)) {
    4600:	69ea      	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    4602:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    4606:	5843      	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    4608:	429a      	cmp	r2, r3
    460a:	d2eb      	bcs.n	45e4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    460c:	2000      	movs	r0, #0
}
    460e:	bd70      	pop	{r4, r5, r6, pc}

00004610 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4610:	b538      	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    4612:	79c3      	ldrb	r3, [r0, #7]
    4614:	460c      	mov	r4, r1
    4616:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    4618:	2b20      	cmp	r3, #32
    461a:	d015      	beq.n	4648 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    461c:	2b10      	cmp	r3, #16
    461e:	d001      	beq.n	4624 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    4620:	2000      	movs	r0, #0
}
    4622:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4624:	6983      	ldr	r3, [r0, #24]
    4626:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    462a:	f500 700d 	add.w	r0, r0, #564	; 0x234
    462e:	2203      	movs	r2, #3
    4630:	4419      	add	r1, r3
    4632:	f002 fdc3 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4636:	4603      	mov	r3, r0
    4638:	2800      	cmp	r0, #0
    463a:	d0f1      	beq.n	4620 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    463c:	0061      	lsls	r1, r4, #1
    return true;
    463e:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    4640:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
    4644:	525d      	strh	r5, [r3, r1]
}
    4646:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4648:	6981      	ldr	r1, [r0, #24]
    464a:	2203      	movs	r2, #3
    464c:	f500 700d 	add.w	r0, r0, #564	; 0x234
    4650:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4654:	f002 fdb2 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4658:	4603      	mov	r3, r0
    465a:	2800      	cmp	r0, #0
    465c:	d0e0      	beq.n	4620 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    465e:	00a1      	lsls	r1, r4, #2
    return true;
    4660:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4662:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4666:	505d      	str	r5, [r3, r1]
}
    4668:	bd38      	pop	{r3, r4, r5, pc}
    466a:	bf00      	nop

0000466c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    466c:	2901      	cmp	r1, #1
    466e:	d90c      	bls.n	468a <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4670:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    4672:	69c4      	ldr	r4, [r0, #28]
    4674:	428c      	cmp	r4, r1
    4676:	d303      	bcc.n	4680 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    4678:	f85d 4b04 	ldr.w	r4, [sp], #4
    467c:	f7ff bf94 	b.w	45a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    4680:	f04f 30ff 	mov.w	r0, #4294967295
    4684:	f85d 4b04 	ldr.w	r4, [sp], #4
    4688:	4770      	bx	lr
    468a:	f04f 30ff 	mov.w	r0, #4294967295
    468e:	4770      	bx	lr

00004690 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4690:	2901      	cmp	r1, #1
    4692:	d90c      	bls.n	46ae <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4694:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    4696:	69c3      	ldr	r3, [r0, #28]
    4698:	460c      	mov	r4, r1
    469a:	428b      	cmp	r3, r1
    469c:	d305      	bcc.n	46aa <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    469e:	79c3      	ldrb	r3, [r0, #7]
    46a0:	4615      	mov	r5, r2
  if (fatType() == 32) {
    46a2:	2b20      	cmp	r3, #32
    46a4:	d017      	beq.n	46d6 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    46a6:	2b10      	cmp	r3, #16
    46a8:	d003      	beq.n	46b2 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    46aa:	2000      	movs	r0, #0
}
    46ac:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    46ae:	2000      	movs	r0, #0
}
    46b0:	4770      	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    46b2:	6983      	ldr	r3, [r0, #24]
    46b4:	f3c1 2107 	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    46b8:	f500 700d 	add.w	r0, r0, #564	; 0x234
    46bc:	2203      	movs	r2, #3
    46be:	4419      	add	r1, r3
    46c0:	f002 fd7c 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    46c4:	4603      	mov	r3, r0
    46c6:	2800      	cmp	r0, #0
    46c8:	d0ef      	beq.n	46aa <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    46ca:	0064      	lsls	r4, r4, #1
    return true;
    46cc:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    46ce:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    46d2:	531d      	strh	r5, [r3, r4]
}
    46d4:	bd38      	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46d6:	6981      	ldr	r1, [r0, #24]
    46d8:	2203      	movs	r2, #3
    46da:	f500 700d 	add.w	r0, r0, #564	; 0x234
    46de:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    46e2:	f002 fd6b 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    46e6:	4603      	mov	r3, r0
    46e8:	2800      	cmp	r0, #0
    46ea:	d0de      	beq.n	46aa <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    46ec:	00a4      	lsls	r4, r4, #2
    return true;
    46ee:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    46f0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
    46f4:	511d      	str	r5, [r3, r4]
}
    46f6:	bd38      	pop	{r3, r4, r5, pc}

000046f8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    46f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    46fc:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    46fe:	b082      	sub	sp, #8
    4700:	4605      	mov	r5, r0
    4702:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    4704:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4706:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    4708:	d333      	bcc.n	4772 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    470a:	2701      	movs	r7, #1
    find++;
    470c:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    470e:	69eb      	ldr	r3, [r5, #28]
    4710:	aa01      	add	r2, sp, #4
    4712:	4628      	mov	r0, r5
    4714:	42a3      	cmp	r3, r4
    4716:	d205      	bcs.n	4724 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    4718:	bb37      	cbnz	r7, 4768 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    471a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    471c:	2701      	movs	r7, #1
    find++;
    471e:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    4720:	42a3      	cmp	r3, r4
    4722:	d321      	bcc.n	4768 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    4724:	42a6      	cmp	r6, r4
    4726:	bf18      	it	ne
    4728:	2c01      	cmpne	r4, #1
    472a:	4621      	mov	r1, r4
    472c:	d91c      	bls.n	4768 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    472e:	f7ff ff3b 	bl	45a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    4732:	2800      	cmp	r0, #0
    4734:	db18      	blt.n	4768 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    4736:	d0e9      	beq.n	470c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4738:	9b01      	ldr	r3, [sp, #4]
    473a:	2b00      	cmp	r3, #0
    473c:	d1e6      	bne.n	470c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    473e:	b107      	cbz	r7, 4742 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    4740:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    4742:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4746:	4621      	mov	r1, r4
    4748:	4628      	mov	r0, r5
    474a:	f7ff ffa1 	bl	4690 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    474e:	4607      	mov	r7, r0
    4750:	b150      	cbz	r0, 4768 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    4752:	b916      	cbnz	r6, 475a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    4754:	f8c8 4000 	str.w	r4, [r8]
  return true;
    4758:	e007      	b.n	476a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    475a:	4631      	mov	r1, r6
    475c:	4628      	mov	r0, r5
    475e:	4622      	mov	r2, r4
    4760:	f7ff ff96 	bl	4690 <FatPartition::fatPut(unsigned long, unsigned long)>
    4764:	2800      	cmp	r0, #0
    4766:	d1f5      	bne.n	4754 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    4768:	2700      	movs	r7, #0
}
    476a:	4638      	mov	r0, r7
    476c:	b002      	add	sp, #8
    476e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4772:	460c      	mov	r4, r1
    setStart = false;
    4774:	2700      	movs	r7, #0
    4776:	e7c9      	b.n	470c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00004778 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    4778:	b570      	push	{r4, r5, r6, lr}
    477a:	4605      	mov	r5, r0
    477c:	b082      	sub	sp, #8
    477e:	460c      	mov	r4, r1
    4780:	e017      	b.n	47b2 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    4782:	69eb      	ldr	r3, [r5, #28]
    4784:	429c      	cmp	r4, r3
    4786:	d819      	bhi.n	47bc <FatPartition::freeChain(unsigned long)+0x44>
    4788:	f7ff ff0e 	bl	45a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    478c:	4606      	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    478e:	4621      	mov	r1, r4
    4790:	2200      	movs	r2, #0
    4792:	2e00      	cmp	r6, #0
    4794:	4628      	mov	r0, r5
    4796:	db11      	blt.n	47bc <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    4798:	69eb      	ldr	r3, [r5, #28]
    479a:	429c      	cmp	r4, r3
    479c:	d80e      	bhi.n	47bc <FatPartition::freeChain(unsigned long)+0x44>
    479e:	f7ff ff37 	bl	4610 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    47a2:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    47a4:	b150      	cbz	r0, 47bc <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    47a6:	68eb      	ldr	r3, [r5, #12]
    47a8:	42a3      	cmp	r3, r4
    }
    cluster = next;
    47aa:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    47ac:	bf88      	it	hi
    47ae:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    47b0:	b12e      	cbz	r6, 47be <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    47b2:	2c01      	cmp	r4, #1
    47b4:	4621      	mov	r1, r4
    47b6:	aa01      	add	r2, sp, #4
    47b8:	4628      	mov	r0, r5
    47ba:	d8e2      	bhi.n	4782 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    47bc:	2000      	movs	r0, #0
}
    47be:	b002      	add	sp, #8
    47c0:	bd70      	pop	{r4, r5, r6, pc}
    47c2:	bf00      	nop

000047c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    47c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47c6:	461e      	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    47c8:	f04f 33ff 	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    47cc:	f04f 0c00 	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    47d0:	4604      	mov	r4, r0
    47d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    47d4:	f100 0724 	add.w	r7, r0, #36	; 0x24
    47d8:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    47dc:	2301      	movs	r3, #1
  m_blockDev = dev;
    47de:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
    47e0:	f880 c007 	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    47e4:	6281      	str	r1, [r0, #40]	; 0x28
    47e6:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    47ea:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
    47ee:	f880 c234 	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    47f2:	60c3      	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    47f4:	b1d2      	cbz	r2, 482c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    47f6:	2a04      	cmp	r2, #4
    47f8:	4615      	mov	r5, r2
    47fa:	d901      	bls.n	4800 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    47fc:	2000      	movs	r0, #0
}
    47fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    4800:	4662      	mov	r2, ip
    4802:	4661      	mov	r1, ip
    4804:	4638      	mov	r0, r7
    4806:	f002 fcd9 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    480a:	2800      	cmp	r0, #0
    480c:	d0f6      	beq.n	47fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    480e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4812:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    4816:	442b      	add	r3, r5
    4818:	0119      	lsls	r1, r3, #4
    481a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    481e:	791a      	ldrb	r2, [r3, #4]
    4820:	2a00      	cmp	r2, #0
    4822:	d0eb      	beq.n	47fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    4824:	5c42      	ldrb	r2, [r0, r1]
    4826:	0652      	lsls	r2, r2, #25
    4828:	d1e8      	bne.n	47fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    482a:	689e      	ldr	r6, [r3, #8]
    482c:	2200      	movs	r2, #0
    482e:	4631      	mov	r1, r6
    4830:	4638      	mov	r0, r7
    4832:	f002 fcc3 	bl	71bc <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4836:	2800      	cmp	r0, #0
    4838:	d0e0      	beq.n	47fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    483a:	7c03      	ldrb	r3, [r0, #16]
    483c:	2b02      	cmp	r3, #2
    483e:	d1dd      	bne.n	47fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    4840:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4848:	d1d8      	bne.n	47fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    484a:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    484c:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    484e:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4850:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4852:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    4854:	f04f 0300 	mov.w	r3, #0
    4858:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    485a:	d041      	beq.n	48e0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    485c:	2201      	movs	r2, #1
    485e:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    4860:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4862:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    4864:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4866:	4291      	cmp	r1, r2
    4868:	d004      	beq.n	4874 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    486a:	2b08      	cmp	r3, #8
    486c:	d1f7      	bne.n	485e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    486e:	2000      	movs	r0, #0
    4870:	71a3      	strb	r3, [r4, #6]
}
    4872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    4874:	461d      	mov	r5, r3
    4876:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    4878:	8ac1      	ldrh	r1, [r0, #22]
    487a:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    487c:	b909      	cbnz	r1, 4882 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    487e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    4880:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    4882:	89c3      	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    4884:	f8b0 2011 	ldrh.w	r2, [r0, #17]
    4888:	4433      	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    488a:	8122      	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    488c:	0152      	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    488e:	61a3      	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4890:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    4894:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4898:	6223      	str	r3, [r4, #32]
      m_rootDirStart +
    489a:	eb03 2352 	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    489e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    48a2:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    48a4:	b902      	cbnz	r2, 48a8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    48a6:	6a02      	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    48a8:	1af3      	subs	r3, r6, r3
    48aa:	4413      	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    48ac:	40eb      	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    48ae:	1c5a      	adds	r2, r3, #1
    48b0:	61e2      	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    48b2:	f640 72f4 	movw	r2, #4084	; 0xff4
    48b6:	4293      	cmp	r3, r2
    48b8:	d90c      	bls.n	48d4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    48ba:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    48be:	4293      	cmp	r3, r2
    48c0:	d90c      	bls.n	48dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    48c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    48c4:	2320      	movs	r3, #32
    48c6:	6222      	str	r2, [r4, #32]
  return true;
    48c8:	2001      	movs	r0, #1
    m_fatType = 16;
    48ca:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    48cc:	6321      	str	r1, [r4, #48]	; 0x30
    48ce:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    48d4:	230c      	movs	r3, #12
  return false;
    48d6:	2000      	movs	r0, #0
    m_fatType = 12;
    48d8:	71e3      	strb	r3, [r4, #7]
}
    48da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48dc:	2310      	movs	r3, #16
    48de:	e7f3      	b.n	48c8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    48e0:	461d      	mov	r5, r3
    48e2:	e7c9      	b.n	4878 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

000048e4 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    48e4:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    48e6:	f200 4444 	addw	r4, r0, #1092	; 0x444
    48ea:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    48ec:	2300      	movs	r3, #0
    48ee:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    48f0:	a801      	add	r0, sp, #4
    48f2:	4621      	mov	r1, r4
    48f4:	9301      	str	r3, [sp, #4]
    48f6:	f7fe ff43 	bl	3780 <FatFile::open(FatFile*, char const*, int)>
    48fa:	4605      	mov	r5, r0
    48fc:	b198      	cbz	r0, 4926 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    48fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4902:	f013 03d0 	ands.w	r3, r3, #208	; 0xd0
    4906:	d011      	beq.n	492c <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4908:	f10d 0e04 	add.w	lr, sp, #4
    490c:	46a4      	mov	ip, r4
    490e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4916:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    491a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    491e:	f8de 3000 	ldr.w	r3, [lr]
    4922:	f8cc 3000 	str.w	r3, [ip]
  return true;

fail:
  return false;
}
    4926:	4628      	mov	r0, r5
    4928:	b00b      	add	sp, #44	; 0x2c
    492a:	bd30      	pop	{r4, r5, pc}
  return false;
    492c:	461d      	mov	r5, r3
}
    492e:	4628      	mov	r0, r5
    4930:	b00b      	add	sp, #44	; 0x2c
    4932:	bd30      	pop	{r4, r5, pc}

00004934 <FsBaseFile::operator=(FsBaseFile const&)>:
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    4934:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4938:	4604      	mov	r4, r0
  if (this == &from) {
    493a:	d01b      	beq.n	4974 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    493c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    493e:	460d      	mov	r5, r1
    4940:	b1d0      	cbz	r0, 4978 <FsBaseFile::operator=(FsBaseFile const&)+0x44>
    4942:	f7fe fde5 	bl	3510 <FatFile::close()>
  m_fFile = nullptr;
    4946:	2600      	movs	r6, #0
    4948:	63a6      	str	r6, [r4, #56]	; 0x38
  if (from.m_fFile) {
    494a:	6baf      	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    494c:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    494e:	b1cf      	cbz	r7, 4984 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    4950:	4621      	mov	r1, r4
    4952:	2024      	movs	r0, #36	; 0x24
    4954:	f000 f8a4 	bl	4aa0 <operator new(unsigned int, unsigned long*)>
    4958:	8006      	strh	r6, [r0, #0]
    495a:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    495c:	4684      	mov	ip, r0
    m_fFile = new (m_fileMem) FatFile;
    495e:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4960:	6bad      	ldr	r5, [r5, #56]	; 0x38
    4962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    496a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    496e:	682b      	ldr	r3, [r5, #0]
    4970:	f8cc 3000 	str.w	r3, [ip]
}
    4974:	4620      	mov	r0, r4
    4976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4978:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    497a:	2800      	cmp	r0, #0
    497c:	d0e3      	beq.n	4946 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
    497e:	f7fd fa37 	bl	1df0 <ExFatFile::close()>
    4982:	e7e0      	b.n	4946 <FsBaseFile::operator=(FsBaseFile const&)+0x12>
  } else if (from.m_xFile) {
    4984:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4986:	2b00      	cmp	r3, #0
    4988:	d0f4      	beq.n	4974 <FsBaseFile::operator=(FsBaseFile const&)+0x40>
    m_xFile = new (m_fileMem) ExFatFile;
    498a:	4621      	mov	r1, r4
    498c:	2038      	movs	r0, #56	; 0x38
    498e:	f000 f887 	bl	4aa0 <operator new(unsigned int, unsigned long*)>
    4992:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
    4996:	8647      	strh	r7, [r0, #50]	; 0x32
    4998:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    499a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    499c:	f103 0730 	add.w	r7, r3, #48	; 0x30
    49a0:	681e      	ldr	r6, [r3, #0]
    49a2:	3310      	adds	r3, #16
    49a4:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    49a8:	3010      	adds	r0, #16
    49aa:	f853 1c08 	ldr.w	r1, [r3, #-8]
    49ae:	f853 2c04 	ldr.w	r2, [r3, #-4]
    49b2:	42bb      	cmp	r3, r7
    49b4:	f840 6c10 	str.w	r6, [r0, #-16]
    49b8:	f840 5c0c 	str.w	r5, [r0, #-12]
    49bc:	f840 1c08 	str.w	r1, [r0, #-8]
    49c0:	f840 2c04 	str.w	r2, [r0, #-4]
    49c4:	d1ec      	bne.n	49a0 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    49c6:	681b      	ldr	r3, [r3, #0]
    49c8:	6003      	str	r3, [r0, #0]
}
    49ca:	4620      	mov	r0, r4
    49cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ce:	bf00      	nop

000049d0 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    49d0:	b510      	push	{r4, lr}
    49d2:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    49d6:	b128      	cbz	r0, 49e4 <FsBaseFile::close()+0x14>
    49d8:	f7fe fd9a 	bl	3510 <FatFile::close()>
  m_fFile = nullptr;
    49dc:	2300      	movs	r3, #0
  m_xFile = nullptr;
    49de:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    49e2:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    49e6:	b128      	cbz	r0, 49f4 <FsBaseFile::close()+0x24>
    49e8:	f7fd fa02 	bl	1df0 <ExFatFile::close()>
  m_fFile = nullptr;
    49ec:	2300      	movs	r3, #0
  m_xFile = nullptr;
    49ee:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    49f2:	bd10      	pop	{r4, pc}
  m_fFile = nullptr;
    49f4:	2300      	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49f6:	2001      	movs	r0, #1
  m_xFile = nullptr;
    49f8:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
    49fc:	bd10      	pop	{r4, pc}
    49fe:	bf00      	nop

00004a00 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4a00:	2900      	cmp	r1, #0
    4a02:	d04b      	beq.n	4a9c <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a08:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4a0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4a0c:	460d      	mov	r5, r1
    4a0e:	4690      	mov	r8, r2
    4a10:	461f      	mov	r7, r3
    4a12:	b1d0      	cbz	r0, 4a4a <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    4a14:	f7fe fd7c 	bl	3510 <FatFile::close()>
  m_fFile = nullptr;
    4a18:	2600      	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    4a1a:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    4a1e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4a22:	f1b9 0f00 	cmp.w	r9, #0
    4a26:	d01d      	beq.n	4a64 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    4a28:	4621      	mov	r1, r4
    4a2a:	2024      	movs	r0, #36	; 0x24
    4a2c:	f000 f838 	bl	4aa0 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4a30:	463b      	mov	r3, r7
    4a32:	8006      	strh	r6, [r0, #0]
    4a34:	4642      	mov	r2, r8
    4a36:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    4a38:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4a3a:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    4a3e:	f7fe ff1b 	bl	3878 <FatFile::open(FatVolume*, char const*, int)>
    4a42:	bb40      	cbnz	r0, 4a96 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    4a44:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    4a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4a4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4a4c:	2800      	cmp	r0, #0
    4a4e:	d0e3      	beq.n	4a18 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    4a50:	f7fd f9ce 	bl	1df0 <ExFatFile::close()>
  m_fFile = nullptr;
    4a54:	2600      	movs	r6, #0
  if (vol->m_fVol) {
    4a56:	f8d5 9480 	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    4a5a:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4a5e:	f1b9 0f00 	cmp.w	r9, #0
    4a62:	d1e1      	bne.n	4a28 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    4a64:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4a68:	b193      	cbz	r3, 4a90 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    4a6a:	4621      	mov	r1, r4
    4a6c:	2038      	movs	r0, #56	; 0x38
    4a6e:	f000 f817 	bl	4aa0 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a72:	463b      	mov	r3, r7
    4a74:	f880 9031 	strb.w	r9, [r0, #49]	; 0x31
    4a78:	4642      	mov	r2, r8
    4a7a:	f8a0 9032 	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    4a7e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4a80:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    4a84:	f7fd fddc 	bl	2640 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4a88:	b928      	cbnz	r0, 4a96 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    4a8a:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    4a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    4a90:	2000      	movs	r0, #0
}
    4a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    4a96:	2001      	movs	r0, #1
}
    4a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    4a9c:	2000      	movs	r0, #0
}
    4a9e:	4770      	bx	lr

00004aa0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4aa0:	4608      	mov	r0, r1
    4aa2:	4770      	bx	lr

00004aa4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    4aa8:	2500      	movs	r5, #0
                     uint32_t volStart) {
    4aaa:	4606      	mov	r6, r0
    4aac:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    4aae:	4601      	mov	r1, r0
  m_fVol = nullptr;
    4ab0:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4ab4:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    4ab8:	4698      	mov	r8, r3
    4aba:	f8dd a020 	ldr.w	sl, [sp, #32]
    4abe:	4691      	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4ac0:	f7ff ffee 	bl	4aa0 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    4ac4:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    4ac8:	6045      	str	r5, [r0, #4]
    m_status = 0;
    4aca:	7005      	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    4acc:	4642      	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    4ace:	6083      	str	r3, [r0, #8]
    4ad0:	4639      	mov	r1, r7
    4ad2:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
    4ad6:	4653      	mov	r3, sl
    m_blockDev = blockDev;
    4ad8:	f8c0 5214 	str.w	r5, [r0, #532]	; 0x214
    4adc:	4604      	mov	r4, r0
    m_status = 0;
    4ade:	f880 5210 	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    4ae2:	f880 5444 	strb.w	r5, [r0, #1092]	; 0x444
    4ae6:	f880 5479 	strb.w	r5, [r0, #1145]	; 0x479
    4aea:	f8a0 547a 	strh.w	r5, [r0, #1146]	; 0x47a
    4aee:	f8c6 0484 	str.w	r0, [r6, #1156]	; 0x484
    4af2:	f7fe fba7 	bl	3244 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4af6:	2800      	cmp	r0, #0
    4af8:	d13e      	bne.n	4b78 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4afa:	2500      	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    4afc:	4631      	mov	r1, r6
    4afe:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    4b02:	f8c6 5484 	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4b06:	f7ff ffcb 	bl	4aa0 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    4b0a:	71c5      	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    4b0c:	6285      	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    4b0e:	4653      	mov	r3, sl
    m_status = 0;
    4b10:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    4b14:	4642      	mov	r2, r8
    m_blockDev = blockDev;
    4b16:	f8c0 5238 	str.w	r5, [r0, #568]	; 0x238
    4b1a:	4639      	mov	r1, r7
    m_status = 0;
    4b1c:	f880 5234 	strb.w	r5, [r0, #564]	; 0x234
    4b20:	4604      	mov	r4, r0
    4b22:	f8a0 5444 	strh.w	r5, [r0, #1092]	; 0x444
    4b26:	f880 5446 	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    4b2a:	f04f 35ff 	mov.w	r5, #4294967295
    4b2e:	62c5      	str	r5, [r0, #44]	; 0x2c
    4b30:	f8c0 523c 	str.w	r5, [r0, #572]	; 0x23c
    4b34:	f8c6 0480 	str.w	r0, [r6, #1152]	; 0x480
    4b38:	f7ff fe44 	bl	47c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4b3c:	b928      	cbnz	r0, 4b4a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4b3e:	2300      	movs	r3, #0
  return false;
    4b40:	4618      	mov	r0, r3
  m_fVol = nullptr;
    4b42:	f8c6 3480 	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4b4a:	f204 4544 	addw	r5, r4, #1092	; 0x444
    4b4e:	4628      	mov	r0, r5
    4b50:	f7fe fcde 	bl	3510 <FatFile::close()>
    return m_vwd.openRoot(this);
    4b54:	4621      	mov	r1, r4
    4b56:	4628      	mov	r0, r5
    4b58:	f7fe fe96 	bl	3888 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4b5c:	2800      	cmp	r0, #0
    4b5e:	d0ee      	beq.n	4b3e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    4b60:	4b12      	ldr	r3, [pc, #72]	; (4bac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    4b62:	681a      	ldr	r2, [r3, #0]
    4b64:	b9ba      	cbnz	r2, 4b96 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    4b66:	601c      	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    4b68:	4b11      	ldr	r3, [pc, #68]	; (4bb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4b6a:	f1b9 0f00 	cmp.w	r9, #0
    4b6e:	d016      	beq.n	4b9e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    4b70:	2001      	movs	r0, #1
    m_cwv = this;
    4b72:	601e      	str	r6, [r3, #0]
}
    4b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    4b78:	f504 6589 	add.w	r5, r4, #1096	; 0x448
    4b7c:	4628      	mov	r0, r5
    4b7e:	f7fd f937 	bl	1df0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4b82:	4621      	mov	r1, r4
    4b84:	4628      	mov	r0, r5
    4b86:	f7fd f93d 	bl	1e04 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4b8a:	2800      	cmp	r0, #0
    4b8c:	d0b5      	beq.n	4afa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    4b8e:	4b09      	ldr	r3, [pc, #36]	; (4bb4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    4b90:	681a      	ldr	r2, [r3, #0]
    4b92:	2a00      	cmp	r2, #0
    4b94:	d0e7      	beq.n	4b66 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    4b96:	4b06      	ldr	r3, [pc, #24]	; (4bb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4b98:	f1b9 0f00 	cmp.w	r9, #0
    4b9c:	d1e8      	bne.n	4b70 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    4b9e:	681a      	ldr	r2, [r3, #0]
    4ba0:	2a00      	cmp	r2, #0
    4ba2:	d0e5      	beq.n	4b70 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    4ba4:	2001      	movs	r0, #1
}
    4ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4baa:	bf00      	nop
    4bac:	200288a8 	.word	0x200288a8
    4bb0:	200288a4 	.word	0x200288a4
    4bb4:	20028870 	.word	0x20028870

00004bb8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4bb8:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4bba:	2500      	movs	r5, #0
    4bbc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4bc0:	4604      	mov	r4, r0
    4bc2:	6045      	str	r5, [r0, #4]
    4bc4:	7305      	strb	r5, [r0, #12]
    4bc6:	6086      	str	r6, [r0, #8]
    4bc8:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4bcc:	4d03      	ldr	r5, [pc, #12]	; (4bdc <FsVolume::open(char const*, int)+0x24>)
    4bce:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4bd2:	f7ff ff15 	bl	4a00 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4bd6:	4620      	mov	r0, r4
    4bd8:	bd70      	pop	{r4, r5, r6, pc}
    4bda:	bf00      	nop
    4bdc:	200007c4 	.word	0x200007c4

00004be0 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    4be0:	f04f 30ff 	mov.w	r0, #4294967295
    4be4:	4770      	bx	lr
    4be6:	bf00      	nop

00004be8 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    4be8:	7c80      	ldrb	r0, [r0, #18]
    4bea:	4770      	bx	lr

00004bec <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    4bec:	7d40      	ldrb	r0, [r0, #21]
    4bee:	4770      	bx	lr

00004bf0 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    4bf0:	7d80      	ldrb	r0, [r0, #22]
    4bf2:	4770      	bx	lr

00004bf4 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4bf4:	2001      	movs	r0, #1
    4bf6:	4770      	bx	lr

00004bf8 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4bf8:	7f00      	ldrb	r0, [r0, #28]
    4bfa:	4770      	bx	lr

00004bfc <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4bfc:	4770      	bx	lr
    4bfe:	bf00      	nop

00004c00 <DedicatedSpiCard::~DedicatedSpiCard()>:
    4c00:	b510      	push	{r4, lr}
    4c02:	4604      	mov	r4, r0
    4c04:	2120      	movs	r1, #32
    4c06:	f003 faff 	bl	8208 <operator delete(void*, unsigned int)>
    4c0a:	4620      	mov	r0, r4
    4c0c:	bd10      	pop	{r4, pc}
    4c0e:	bf00      	nop

00004c10 <SharedSpiCard::end()>:
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4c10:	b538      	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    4c12:	7c03      	ldrb	r3, [r0, #16]
    4c14:	b153      	cbz	r3, 4c2c <SharedSpiCard::end()+0x1c>
    syncDevice();
    4c16:	4605      	mov	r5, r0
    4c18:	4604      	mov	r4, r0
    4c1a:	f855 3b04 	ldr.w	r3, [r5], #4
    4c1e:	69db      	ldr	r3, [r3, #28]
    4c20:	4798      	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    4c22:	4628      	mov	r0, r5
    4c24:	f002 fa4a 	bl	70bc <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4c28:	2300      	movs	r3, #0
    4c2a:	7423      	strb	r3, [r4, #16]
  }
}
    4c2c:	bd38      	pop	{r3, r4, r5, pc}
    4c2e:	bf00      	nop

00004c30 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c34:	4e20      	ldr	r6, [pc, #128]	; (4cb8 <SharedSpiCard::writeStop()+0x88>)
    4c36:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4c38:	f100 0804 	add.w	r8, r0, #4
    4c3c:	6835      	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4c3e:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4c42:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4c44:	e003      	b.n	4c4e <SharedSpiCard::writeStop()+0x1e>
    4c46:	6833      	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4c48:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4c4a:	041b      	lsls	r3, r3, #16
    4c4c:	d410      	bmi.n	4c70 <SharedSpiCard::writeStop()+0x40>
    4c4e:	4640      	mov	r0, r8
    4c50:	f002 fa38 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4c54:	28ff      	cmp	r0, #255	; 0xff
    4c56:	4604      	mov	r4, r0
    4c58:	d1f5      	bne.n	4c46 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4c5a:	21fd      	movs	r1, #253	; 0xfd
    4c5c:	4640      	mov	r0, r8
    4c5e:	f002 fa4f 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4c62:	7cfb      	ldrb	r3, [r7, #19]
    4c64:	b9cb      	cbnz	r3, 4c9a <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4c66:	2300      	movs	r3, #0
    4c68:	2001      	movs	r0, #1
    4c6a:	753b      	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4c70:	231f      	movs	r3, #31
  if (m_spiActive) {
    4c72:	7cf8      	ldrb	r0, [r7, #19]
    4c74:	74bb      	strb	r3, [r7, #18]
    4c76:	2800      	cmp	r0, #0
    4c78:	d0f8      	beq.n	4c6c <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c7a:	7c78      	ldrb	r0, [r7, #17]
    4c7c:	2101      	movs	r1, #1
    4c7e:	f002 f961 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c82:	21ff      	movs	r1, #255	; 0xff
    4c84:	4640      	mov	r0, r8
    4c86:	f002 fa3b 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4c8a:	4640      	mov	r0, r8
    4c8c:	f002 f9ee 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c90:	2300      	movs	r3, #0
  return false;
    4c92:	4618      	mov	r0, r3
    m_spiActive = false;
    4c94:	74fb      	strb	r3, [r7, #19]
}
    4c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4c9a:	2101      	movs	r1, #1
    4c9c:	7c78      	ldrb	r0, [r7, #17]
    4c9e:	f002 f951 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ca2:	4621      	mov	r1, r4
    4ca4:	4640      	mov	r0, r8
    4ca6:	f002 fa2b 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4caa:	4640      	mov	r0, r8
    4cac:	f002 f9de 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cb0:	2300      	movs	r3, #0
    4cb2:	74fb      	strb	r3, [r7, #19]
}
    4cb4:	e7d7      	b.n	4c66 <SharedSpiCard::writeStop()+0x36>
    4cb6:	bf00      	nop
    4cb8:	2002945c 	.word	0x2002945c

00004cbc <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4cc0:	7d03      	ldrb	r3, [r0, #20]
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d035      	beq.n	4d32 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4cc6:	7cc6      	ldrb	r6, [r0, #19]
    4cc8:	4604      	mov	r4, r0
    4cca:	b14e      	cbz	r6, 4ce0 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4ccc:	3004      	adds	r0, #4
    4cce:	f002 f9f9 	bl	70c4 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4cd2:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4cd6:	bf18      	it	ne
    4cd8:	2501      	movne	r5, #1
}
    4cda:	4628      	mov	r0, r5
    4cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4ce0:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4ce2:	f04f 0801 	mov.w	r8, #1
    4ce6:	4638      	mov	r0, r7
    4ce8:	f002 f9b6 	bl	7058 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4cec:	4631      	mov	r1, r6
    4cee:	7c60      	ldrb	r0, [r4, #17]
    4cf0:	f884 8013 	strb.w	r8, [r4, #19]
    4cf4:	f002 f926 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cf8:	21ff      	movs	r1, #255	; 0xff
    4cfa:	4638      	mov	r0, r7
    4cfc:	f002 fa00 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4d00:	4638      	mov	r0, r7
    4d02:	f002 f9df 	bl	70c4 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4d06:	7ce3      	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    4d08:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4d0c:	bf18      	it	ne
    4d0e:	2501      	movne	r5, #1
  if (m_spiActive) {
    4d10:	2b00      	cmp	r3, #0
    4d12:	d0e2      	beq.n	4cda <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d14:	4641      	mov	r1, r8
    4d16:	7c60      	ldrb	r0, [r4, #17]
    4d18:	f002 f914 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d1c:	21ff      	movs	r1, #255	; 0xff
    4d1e:	4638      	mov	r0, r7
    4d20:	f002 f9ee 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d24:	4638      	mov	r0, r7
    4d26:	f002 f9a1 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    4d2a:	4628      	mov	r0, r5
    m_spiActive = false;
    4d2c:	74e6      	strb	r6, [r4, #19]
}
    4d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4d32:	2500      	movs	r5, #0
}
    4d34:	4628      	mov	r0, r5
    4d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d3a:	bf00      	nop

00004d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d40:	4f20      	ldr	r7, [pc, #128]	; (4dc4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4d42:	4604      	mov	r4, r0
    4d44:	4688      	mov	r8, r1
    4d46:	4691      	mov	r9, r2
    4d48:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4d4a:	1d06      	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4d4c:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4d50:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    4d52:	e003      	b.n	4d5c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4d54:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4d56:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4d58:	041b      	lsls	r3, r3, #16
    4d5a:	d40d      	bmi.n	4d78 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4d5c:	4630      	mov	r0, r6
    4d5e:	f002 f9b1 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4d62:	28ff      	cmp	r0, #255	; 0xff
    4d64:	7560      	strb	r0, [r4, #21]
    4d66:	d0f5      	beq.n	4d54 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4d68:	28fe      	cmp	r0, #254	; 0xfe
    4d6a:	d01a      	beq.n	4da2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4d6c:	2319      	movs	r3, #25
  if (m_spiActive) {
    4d6e:	7ce0      	ldrb	r0, [r4, #19]
    m_errorCode = code;
    4d70:	74a3      	strb	r3, [r4, #18]
    4d72:	b930      	cbnz	r0, 4d82 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d78:	231e      	movs	r3, #30
  if (m_spiActive) {
    4d7a:	7ce0      	ldrb	r0, [r4, #19]
    4d7c:	74a3      	strb	r3, [r4, #18]
    4d7e:	2800      	cmp	r0, #0
    4d80:	d0f8      	beq.n	4d74 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d82:	7c60      	ldrb	r0, [r4, #17]
    4d84:	2101      	movs	r1, #1
    4d86:	f002 f8dd 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d8a:	21ff      	movs	r1, #255	; 0xff
    4d8c:	4630      	mov	r0, r6
    4d8e:	f002 f9b7 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d92:	4630      	mov	r0, r6
    4d94:	f002 f96a 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4d98:	2300      	movs	r3, #0
  return false;
    4d9a:	4618      	mov	r0, r3
    m_spiActive = false;
    4d9c:	74e3      	strb	r3, [r4, #19]
}
    4d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4da2:	464a      	mov	r2, r9
    4da4:	4641      	mov	r1, r8
    4da6:	4630      	mov	r0, r6
    4da8:	f002 f998 	bl	70dc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4dac:	7560      	strb	r0, [r4, #21]
    4dae:	b938      	cbnz	r0, 4dc0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4db0:	4630      	mov	r0, r6
    4db2:	f002 f987 	bl	70c4 <SdSpiArduinoDriver::receive()>
    4db6:	4630      	mov	r0, r6
    4db8:	f002 f984 	bl	70c4 <SdSpiArduinoDriver::receive()>
  return true;
    4dbc:	2001      	movs	r0, #1
    4dbe:	e7d9      	b.n	4d74 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4dc0:	2326      	movs	r3, #38	; 0x26
    4dc2:	e7d4      	b.n	4d6e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4dc4:	2002945c 	.word	0x2002945c

00004dc8 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4dca:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4dcc:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4dce:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4dd0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4dd2:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4dd4:	7507      	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    4dd6:	f000 f83b 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4dda:	b9b0      	cbnz	r0, 4e0a <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4ddc:	7ce6      	ldrb	r6, [r4, #19]
    4dde:	b91e      	cbnz	r6, 4de8 <SharedSpiCard::readStop()+0x20>
  return true;
    4de0:	2601      	movs	r6, #1
}
    4de2:	4630      	mov	r0, r6
    4de4:	b003      	add	sp, #12
    4de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4de8:	4605      	mov	r5, r0
    4dea:	2101      	movs	r1, #1
    4dec:	7c60      	ldrb	r0, [r4, #17]
    4dee:	f002 f8a9 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4df2:	1d20      	adds	r0, r4, #4
    4df4:	21ff      	movs	r1, #255	; 0xff
    4df6:	9001      	str	r0, [sp, #4]
    4df8:	f002 f982 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4dfc:	9801      	ldr	r0, [sp, #4]
    4dfe:	f002 f935 	bl	706c <SdSpiArduinoDriver::deactivate()>
    4e02:	4630      	mov	r0, r6
    m_spiActive = false;
    4e04:	74e5      	strb	r5, [r4, #19]
}
    4e06:	b003      	add	sp, #12
    4e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4e0a:	2309      	movs	r3, #9
  if (m_spiActive) {
    4e0c:	7ce6      	ldrb	r6, [r4, #19]
    4e0e:	74a3      	strb	r3, [r4, #18]
    4e10:	2e00      	cmp	r6, #0
    4e12:	d0e6      	beq.n	4de2 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4e14:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4e16:	7c60      	ldrb	r0, [r4, #17]
    4e18:	2101      	movs	r1, #1
}
    4e1a:	463e      	mov	r6, r7
    4e1c:	f002 f892 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e20:	21ff      	movs	r1, #255	; 0xff
    4e22:	4628      	mov	r0, r5
    4e24:	f002 f96c 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e28:	4628      	mov	r0, r5
    4e2a:	f002 f91f 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    4e2e:	4630      	mov	r0, r6
    m_spiActive = false;
    4e30:	74e7      	strb	r7, [r4, #19]
}
    4e32:	b003      	add	sp, #12
    4e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e36:	bf00      	nop

00004e38 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4e38:	7d02      	ldrb	r2, [r0, #20]
    4e3a:	2a02      	cmp	r2, #2
    4e3c:	d003      	beq.n	4e46 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4e3e:	2a01      	cmp	r2, #1
    4e40:	d004      	beq.n	4e4c <SharedSpiCard::syncDevice()+0x14>
}
    4e42:	2001      	movs	r0, #1
    4e44:	4770      	bx	lr
    return writeStop();
    4e46:	6803      	ldr	r3, [r0, #0]
    4e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4e4a:	4718      	bx	r3
    return readStop();
    4e4c:	f7ff bfbc 	b.w	4dc8 <SharedSpiCard::readStop()>

00004e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4e54:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e56:	b082      	sub	sp, #8
    4e58:	460f      	mov	r7, r1
    4e5a:	4936      	ldr	r1, [pc, #216]	; (4f34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    4e5c:	9201      	str	r2, [sp, #4]
    4e5e:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4e60:	69da      	ldr	r2, [r3, #28]
    4e62:	428a      	cmp	r2, r1
    4e64:	d15d      	bne.n	4f22 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    4e66:	7d02      	ldrb	r2, [r0, #20]
    4e68:	2a02      	cmp	r2, #2
    4e6a:	d043      	beq.n	4ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    4e6c:	2a01      	cmp	r2, #1
    4e6e:	d05c      	beq.n	4f2a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    4e70:	7cf4      	ldrb	r4, [r6, #19]
    4e72:	2c00      	cmp	r4, #0
    4e74:	d046      	beq.n	4f04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    4e76:	1d35      	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4e78:	b19f      	cbz	r7, 4ea2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4e7a:	2f0c      	cmp	r7, #12
    4e7c:	d011      	beq.n	4ea2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    4e7e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4f38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    4e82:	f8d8 4000 	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4e86:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4e8a:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    4e8c:	e004      	b.n	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    4e8e:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    4e92:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4e94:	0419      	lsls	r1, r3, #16
    4e96:	d431      	bmi.n	4efc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    4e98:	4628      	mov	r0, r5
    4e9a:	f002 f913 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4e9e:	28ff      	cmp	r0, #255	; 0xff
    4ea0:	d1f5      	bne.n	4e8e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    4ea2:	f10d 0804 	add.w	r8, sp, #4
    4ea6:	ac02      	add	r4, sp, #8
    4ea8:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4eac:	4628      	mov	r0, r5
    4eae:	f002 f927 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
    4eb2:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4eb6:	4628      	mov	r0, r5
    4eb8:	f002 f922 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4ebc:	4544      	cmp	r4, r8
    4ebe:	d1f8      	bne.n	4eb2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4ec0:	2f00      	cmp	r7, #0
    4ec2:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4ec4:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4ec8:	bf0c      	ite	eq
    4eca:	2195      	moveq	r1, #149	; 0x95
    4ecc:	2187      	movne	r1, #135	; 0x87
    4ece:	f002 f917 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4ed2:	4628      	mov	r0, r5
    4ed4:	f002 f8f6 	bl	70c4 <SdSpiArduinoDriver::receive()>
    4ed8:	4628      	mov	r0, r5
    4eda:	f002 f8f3 	bl	70c4 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    4ede:	0602      	lsls	r2, r0, #24
    4ee0:	f104 33ff 	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    4ee4:	7570      	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    4ee6:	d502      	bpl.n	4eee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    4ee8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    4eec:	d1f4      	bne.n	4ed8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    4eee:	b002      	add	sp, #8
    4ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4ef6:	4798      	blx	r3
  if (!syncDevice()) {
    4ef8:	2800      	cmp	r0, #0
    4efa:	d1b9      	bne.n	4e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4efc:	20ff      	movs	r0, #255	; 0xff
}
    4efe:	b002      	add	sp, #8
    4f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    4f04:	1d35      	adds	r5, r6, #4
    4f06:	4628      	mov	r0, r5
    4f08:	f002 f8a6 	bl	7058 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    4f0c:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4f0e:	4621      	mov	r1, r4
    4f10:	7c70      	ldrb	r0, [r6, #17]
    4f12:	74f3      	strb	r3, [r6, #19]
    4f14:	f002 f816 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f18:	21ff      	movs	r1, #255	; 0xff
    4f1a:	4628      	mov	r0, r5
    4f1c:	f002 f8f0 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
}
    4f20:	e7aa      	b.n	4e78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4f22:	4790      	blx	r2
    4f24:	2800      	cmp	r0, #0
    4f26:	d0e9      	beq.n	4efc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4f28:	e7a2      	b.n	4e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    4f2a:	f7ff ff4d 	bl	4dc8 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4f2e:	2800      	cmp	r0, #0
    4f30:	d0e4      	beq.n	4efc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    4f32:	e79d      	b.n	4e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    4f34:	00004e39 	.word	0x00004e39
    4f38:	2002945c 	.word	0x2002945c

00004f3c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4f3c:	b570      	push	{r4, r5, r6, lr}
    4f3e:	460c      	mov	r4, r1
    4f40:	b082      	sub	sp, #8
    4f42:	4616      	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    4f44:	2106      	movs	r1, #6
    4f46:	4622      	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    4f48:	4604      	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    4f4a:	f7ff ff81 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f4e:	b1b0      	cbz	r0, 4f7e <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    4f50:	2304      	movs	r3, #4
    4f52:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    4f54:	7ce0      	ldrb	r0, [r4, #19]
    4f56:	b908      	cbnz	r0, 4f5c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    4f58:	b002      	add	sp, #8
    4f5a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4f5c:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f5e:	7c60      	ldrb	r0, [r4, #17]
    4f60:	2101      	movs	r1, #1
    4f62:	f001 ffef 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f66:	21ff      	movs	r1, #255	; 0xff
    4f68:	4628      	mov	r0, r5
    4f6a:	f002 f8c9 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4f6e:	4628      	mov	r0, r5
    4f70:	f002 f87c 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f74:	2300      	movs	r3, #0
  return false;
    4f76:	4618      	mov	r0, r3
    m_spiActive = false;
    4f78:	74e3      	strb	r3, [r4, #19]
}
    4f7a:	b002      	add	sp, #8
    4f7c:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    4f7e:	4605      	mov	r5, r0
    4f80:	2240      	movs	r2, #64	; 0x40
    4f82:	4631      	mov	r1, r6
    4f84:	4620      	mov	r0, r4
    4f86:	f7ff fed9 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4f8a:	2800      	cmp	r0, #0
    4f8c:	d0e2      	beq.n	4f54 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    4f8e:	7ce6      	ldrb	r6, [r4, #19]
    4f90:	2e00      	cmp	r6, #0
    4f92:	d0e1      	beq.n	4f58 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4f94:	7c60      	ldrb	r0, [r4, #17]
    4f96:	2101      	movs	r1, #1
    4f98:	f001 ffd4 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f9c:	1d20      	adds	r0, r4, #4
    4f9e:	21ff      	movs	r1, #255	; 0xff
    4fa0:	9001      	str	r0, [sp, #4]
    4fa2:	f002 f8ad 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4fa6:	9801      	ldr	r0, [sp, #4]
    4fa8:	f002 f860 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    4fac:	4630      	mov	r0, r6
    m_spiActive = false;
    4fae:	74e5      	strb	r5, [r4, #19]
}
    4fb0:	b002      	add	sp, #8
    4fb2:	bd70      	pop	{r4, r5, r6, pc}

00004fb4 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4fb6:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fb8:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4fba:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4fbc:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4fbe:	f7ff ff47 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fc2:	b9e0      	cbnz	r0, 4ffe <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    4fc4:	1d37      	adds	r7, r6, #4
    4fc6:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4fc8:	4638      	mov	r0, r7
    4fca:	f002 f87b 	bl	70c4 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4fce:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4fd2:	42a5      	cmp	r5, r4
    4fd4:	d1f8      	bne.n	4fc8 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4fd6:	7cf4      	ldrb	r4, [r6, #19]
    4fd8:	b914      	cbnz	r4, 4fe0 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4fda:	2401      	movs	r4, #1
}
    4fdc:	4620      	mov	r0, r4
    4fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4fe0:	7c70      	ldrb	r0, [r6, #17]
    4fe2:	2101      	movs	r1, #1
    4fe4:	f001 ffae 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fe8:	21ff      	movs	r1, #255	; 0xff
    4fea:	4638      	mov	r0, r7
    4fec:	f002 f888 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4ff0:	4638      	mov	r0, r7
    4ff2:	f002 f83b 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4ff6:	2300      	movs	r3, #0
}
    4ff8:	4620      	mov	r0, r4
    m_spiActive = false;
    4ffa:	74f3      	strb	r3, [r6, #19]
}
    4ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4ffe:	2312      	movs	r3, #18
  if (m_spiActive) {
    5000:	7cf4      	ldrb	r4, [r6, #19]
    5002:	74b3      	strb	r3, [r6, #18]
    5004:	2c00      	cmp	r4, #0
    5006:	d0e9      	beq.n	4fdc <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    5008:	1d34      	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    500a:	7c70      	ldrb	r0, [r6, #17]
    500c:	2101      	movs	r1, #1
    500e:	f001 ff99 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5012:	21ff      	movs	r1, #255	; 0xff
    5014:	4620      	mov	r0, r4
    5016:	f002 f873 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    501a:	4620      	mov	r0, r4
    501c:	f002 f826 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5020:	2300      	movs	r3, #0
  return false;
    5022:	461c      	mov	r4, r3
    m_spiActive = false;
    5024:	74f3      	strb	r3, [r6, #19]
}
    5026:	4620      	mov	r0, r4
    5028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    502a:	bf00      	nop

0000502c <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    502c:	b570      	push	{r4, r5, r6, lr}
    502e:	4616      	mov	r6, r2
    5030:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    5032:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5034:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    5036:	f7ff ff0b 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    503a:	b1b0      	cbz	r0, 506a <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    503c:	231c      	movs	r3, #28
    503e:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5040:	7ce0      	ldrb	r0, [r4, #19]
    5042:	b908      	cbnz	r0, 5048 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    5044:	b002      	add	sp, #8
    5046:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5048:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    504a:	7c60      	ldrb	r0, [r4, #17]
    504c:	2101      	movs	r1, #1
    504e:	f001 ff79 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5052:	21ff      	movs	r1, #255	; 0xff
    5054:	4628      	mov	r0, r5
    5056:	f002 f853 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    505a:	4628      	mov	r0, r5
    505c:	f002 f806 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5060:	2300      	movs	r3, #0
  return false;
    5062:	4618      	mov	r0, r3
    m_spiActive = false;
    5064:	74e3      	strb	r3, [r4, #19]
}
    5066:	b002      	add	sp, #8
    5068:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    506a:	4605      	mov	r5, r0
    506c:	2210      	movs	r2, #16
    506e:	4631      	mov	r1, r6
    5070:	4620      	mov	r0, r4
    5072:	f7ff fe63 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5076:	2800      	cmp	r0, #0
    5078:	d0e2      	beq.n	5040 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    507a:	7ce6      	ldrb	r6, [r4, #19]
    507c:	2e00      	cmp	r6, #0
    507e:	d0e1      	beq.n	5044 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5080:	7c60      	ldrb	r0, [r4, #17]
    5082:	2101      	movs	r1, #1
    5084:	f001 ff5e 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5088:	1d20      	adds	r0, r4, #4
    508a:	21ff      	movs	r1, #255	; 0xff
    508c:	9001      	str	r0, [sp, #4]
    508e:	f002 f837 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5092:	9801      	ldr	r0, [sp, #4]
    5094:	f001 ffea 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    5098:	4630      	mov	r0, r6
    m_spiActive = false;
    509a:	74e5      	strb	r5, [r4, #19]
}
    509c:	b002      	add	sp, #8
    509e:	bd70      	pop	{r4, r5, r6, pc}

000050a0 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    50a0:	6803      	ldr	r3, [r0, #0]
    50a2:	4a24      	ldr	r2, [pc, #144]	; (5134 <SharedSpiCard::sectorCount()+0x94>)
    50a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    50a6:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    50a8:	b500      	push	{lr}
    50aa:	b085      	sub	sp, #20
    50ac:	d10e      	bne.n	50cc <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    50ae:	466a      	mov	r2, sp
    50b0:	2109      	movs	r1, #9
    50b2:	f7ff ffbb 	bl	502c <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    50b6:	b130      	cbz	r0, 50c6 <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    50b8:	f89d 3000 	ldrb.w	r3, [sp]
    if (ver == 0) {
    50bc:	099b      	lsrs	r3, r3, #6
    50be:	d008      	beq.n	50d2 <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    50c0:	2b01      	cmp	r3, #1
    50c2:	d027      	beq.n	5114 <SharedSpiCard::sectorCount()+0x74>
    50c4:	2000      	movs	r0, #0
}
    50c6:	b005      	add	sp, #20
    50c8:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    50cc:	4669      	mov	r1, sp
    50ce:	4798      	blx	r3
    50d0:	e7f1      	b.n	50b6 <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    50d2:	f89d 3009 	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    50d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    50da:	f89d 0008 	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    50de:	005b      	lsls	r3, r3, #1
    50e0:	f89d 100a 	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    50e4:	0292      	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    50e6:	f89d c007 	ldrb.w	ip, [sp, #7]
    50ea:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    50ec:	f003 0306 	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    50f0:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    50f4:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    50f8:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    50fc:	f89d 1005 	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5100:	4310      	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5102:	f001 020f 	and.w	r2, r1, #15
    5106:	3001      	adds	r0, #1
    5108:	4413      	add	r3, r2
    510a:	3b07      	subs	r3, #7
    510c:	4098      	lsls	r0, r3
}
    510e:	b005      	add	sp, #20
    5110:	f85d fb04 	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5114:	f89d 3007 	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    5118:	f8bd 0008 	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    511c:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    511e:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5120:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5124:	b280      	uxth	r0, r0
    5126:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5128:	3001      	adds	r0, #1
    512a:	0280      	lsls	r0, r0, #10
    512c:	b005      	add	sp, #20
    512e:	f85d fb04 	ldr.w	pc, [sp], #4
    5132:	bf00      	nop
    5134:	00005505 	.word	0x00005505

00005138 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5138:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    513a:	460a      	mov	r2, r1
    513c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    5140:	b083      	sub	sp, #12
    5142:	4d16      	ldr	r5, [pc, #88]	; (519c <SharedSpiCard::readStart(unsigned long)+0x64>)
    5144:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5146:	42ab      	cmp	r3, r5
    5148:	d124      	bne.n	5194 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    514a:	7d80      	ldrb	r0, [r0, #22]
    514c:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    514e:	f04f 0112 	mov.w	r1, #18
    5152:	4620      	mov	r0, r4
    sector <<= 9;
    5154:	bf18      	it	ne
    5156:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    5158:	f7ff fe7a 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    515c:	b920      	cbnz	r0, 5168 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    515e:	2301      	movs	r3, #1
  return true;
    5160:	4618      	mov	r0, r3
  m_state = READ_STATE;
    5162:	7523      	strb	r3, [r4, #20]
}
    5164:	b003      	add	sp, #12
    5166:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5168:	230c      	movs	r3, #12
  if (m_spiActive) {
    516a:	7ce0      	ldrb	r0, [r4, #19]
    516c:	74a3      	strb	r3, [r4, #18]
    516e:	2800      	cmp	r0, #0
    5170:	d0f8      	beq.n	5164 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5172:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5174:	7c60      	ldrb	r0, [r4, #17]
    5176:	2101      	movs	r1, #1
    5178:	f001 fee4 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    517c:	21ff      	movs	r1, #255	; 0xff
    517e:	4628      	mov	r0, r5
    5180:	f001 ffbe 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5184:	4628      	mov	r0, r5
    5186:	f001 ff71 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    518a:	2300      	movs	r3, #0
}
    518c:	4618      	mov	r0, r3
    m_spiActive = false;
    518e:	74e3      	strb	r3, [r4, #19]
}
    5190:	b003      	add	sp, #12
    5192:	bd30      	pop	{r4, r5, pc}
    5194:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5196:	4798      	blx	r3
    5198:	9a01      	ldr	r2, [sp, #4]
    519a:	e7d7      	b.n	514c <SharedSpiCard::readStart(unsigned long)+0x14>
    519c:	00004bf1 	.word	0x00004bf1

000051a0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    51a0:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    51a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    51a6:	695f      	ldr	r7, [r3, #20]
    51a8:	4b16      	ldr	r3, [pc, #88]	; (5204 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    51aa:	429f      	cmp	r7, r3
    51ac:	d11f      	bne.n	51ee <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    51ae:	7d03      	ldrb	r3, [r0, #20]
    51b0:	4604      	mov	r4, r0
    51b2:	460d      	mov	r5, r1
    51b4:	4616      	mov	r6, r2
    51b6:	2b01      	cmp	r3, #1
    51b8:	d102      	bne.n	51c0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    51ba:	6983      	ldr	r3, [r0, #24]
    51bc:	4299      	cmp	r1, r3
    51be:	d005      	beq.n	51cc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    51c0:	4629      	mov	r1, r5
    51c2:	4620      	mov	r0, r4
    51c4:	f7ff ffb8 	bl	5138 <SharedSpiCard::readStart(unsigned long)>
    51c8:	b170      	cbz	r0, 51e8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    51ca:	61a5      	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    51cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    51d0:	4631      	mov	r1, r6
    51d2:	4620      	mov	r0, r4
    51d4:	f7ff fdb2 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    51d8:	b130      	cbz	r0, 51e8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    51da:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    51dc:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    51de:	3301      	adds	r3, #1
    51e0:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    51e2:	b148      	cbz	r0, 51f8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    51e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    51e8:	2000      	movs	r0, #0
}
    51ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    51ee:	46bc      	mov	ip, r7
    51f0:	2301      	movs	r3, #1
}
    51f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    51f6:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    51f8:	4620      	mov	r0, r4
}
    51fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    51fe:	f7ff bde3 	b.w	4dc8 <SharedSpiCard::readStop()>
    5202:	bf00      	nop
    5204:	0000557d 	.word	0x0000557d

00005208 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5208:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    520a:	460a      	mov	r2, r1
    520c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    5210:	b083      	sub	sp, #12
    5212:	4d16      	ldr	r5, [pc, #88]	; (526c <SharedSpiCard::writeStart(unsigned long)+0x64>)
    5214:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5216:	42ab      	cmp	r3, r5
    5218:	d124      	bne.n	5264 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    521a:	7d80      	ldrb	r0, [r0, #22]
    521c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    521e:	f04f 0119 	mov.w	r1, #25
    5222:	4620      	mov	r0, r4
    sector <<= 9;
    5224:	bf18      	it	ne
    5226:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    5228:	f7ff fe12 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    522c:	b920      	cbnz	r0, 5238 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    522e:	2302      	movs	r3, #2
  return true;
    5230:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    5232:	7523      	strb	r3, [r4, #20]
}
    5234:	b003      	add	sp, #12
    5236:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5238:	230e      	movs	r3, #14
  if (m_spiActive) {
    523a:	7ce0      	ldrb	r0, [r4, #19]
    523c:	74a3      	strb	r3, [r4, #18]
    523e:	2800      	cmp	r0, #0
    5240:	d0f8      	beq.n	5234 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5242:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5244:	7c60      	ldrb	r0, [r4, #17]
    5246:	2101      	movs	r1, #1
    5248:	f001 fe7c 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    524c:	21ff      	movs	r1, #255	; 0xff
    524e:	4628      	mov	r0, r5
    5250:	f001 ff56 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5254:	4628      	mov	r0, r5
    5256:	f001 ff09 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    525a:	2300      	movs	r3, #0
}
    525c:	4618      	mov	r0, r3
    m_spiActive = false;
    525e:	74e3      	strb	r3, [r4, #19]
}
    5260:	b003      	add	sp, #12
    5262:	bd30      	pop	{r4, r5, pc}
    5264:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5266:	4798      	blx	r3
    5268:	9a01      	ldr	r2, [sp, #4]
    526a:	e7d7      	b.n	521c <SharedSpiCard::writeStart(unsigned long)+0x14>
    526c:	00004bf1 	.word	0x00004bf1

00005270 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    5270:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    5276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5278:	4617      	mov	r7, r2
    527a:	4a41      	ldr	r2, [pc, #260]	; (5380 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    527c:	b085      	sub	sp, #20
    527e:	4604      	mov	r4, r0
    5280:	460e      	mov	r6, r1
    5282:	4293      	cmp	r3, r2
    5284:	d145      	bne.n	5312 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5286:	466a      	mov	r2, sp
    5288:	2109      	movs	r1, #9
    528a:	f7ff fecf 	bl	502c <SharedSpiCard::readRegister(unsigned char, void*)>
    528e:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    5290:	b1b5      	cbz	r5, 52c0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    5292:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    5296:	065a      	lsls	r2, r3, #25
    5298:	d518      	bpl.n	52cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    529a:	7da3      	ldrb	r3, [r4, #22]
    529c:	2b03      	cmp	r3, #3
    529e:	d001      	beq.n	52a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    52a0:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    52a2:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    52a4:	4632      	mov	r2, r6
    52a6:	2120      	movs	r1, #32
    52a8:	4620      	mov	r0, r4
    52aa:	f7ff fdd1 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52ae:	b928      	cbnz	r0, 52bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    52b0:	463a      	mov	r2, r7
    52b2:	2121      	movs	r1, #33	; 0x21
    52b4:	4620      	mov	r0, r4
    52b6:	f7ff fdcb 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52ba:	b370      	cbz	r0, 531a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    52bc:	2327      	movs	r3, #39	; 0x27
    52be:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    52c0:	7ce5      	ldrb	r5, [r4, #19]
    52c2:	b99d      	cbnz	r5, 52ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    52c4:	4628      	mov	r0, r5
    52c6:	b005      	add	sp, #20
    52c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    52cc:	005b      	lsls	r3, r3, #1
    52ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    52d2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    52d6:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    52da:	1c7a      	adds	r2, r7, #1
    52dc:	4332      	orrs	r2, r6
    52de:	4213      	tst	r3, r2
    52e0:	d0db      	beq.n	529a <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    52e2:	2328      	movs	r3, #40	; 0x28
  if (m_spiActive) {
    52e4:	7ce5      	ldrb	r5, [r4, #19]
    52e6:	74a3      	strb	r3, [r4, #18]
    52e8:	2d00      	cmp	r5, #0
    52ea:	d0eb      	beq.n	52c4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    52ec:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    52ee:	7c60      	ldrb	r0, [r4, #17]
    52f0:	2101      	movs	r1, #1
    52f2:	f001 fe27 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52f6:	21ff      	movs	r1, #255	; 0xff
    52f8:	4628      	mov	r0, r5
    52fa:	f001 ff01 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    52fe:	4628      	mov	r0, r5
    5300:	f001 feb4 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5304:	2300      	movs	r3, #0
  return false;
    5306:	461d      	mov	r5, r3
    m_spiActive = false;
    5308:	74e3      	strb	r3, [r4, #19]
}
    530a:	4628      	mov	r0, r5
    530c:	b005      	add	sp, #20
    530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    5312:	4669      	mov	r1, sp
    5314:	4798      	blx	r3
    5316:	4605      	mov	r5, r0
    5318:	e7ba      	b.n	5290 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    531a:	4602      	mov	r2, r0
    531c:	2126      	movs	r1, #38	; 0x26
    531e:	4620      	mov	r0, r4
    5320:	f7ff fd96 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5324:	2800      	cmp	r0, #0
    5326:	d1c9      	bne.n	52bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5328:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5384 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    532c:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    5330:	f104 0904 	add.w	r9, r4, #4
    5334:	f8d8 3000 	ldr.w	r3, [r8]
    5338:	441f      	add	r7, r3
    533a:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    533c:	e004      	b.n	5348 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    533e:	f8d8 3000 	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5342:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    5344:	041b      	lsls	r3, r3, #16
    5346:	d417      	bmi.n	5378 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    5348:	4648      	mov	r0, r9
    534a:	f001 febb 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    534e:	28ff      	cmp	r0, #255	; 0xff
    5350:	4606      	mov	r6, r0
    5352:	d1f4      	bne.n	533e <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    5354:	7ce3      	ldrb	r3, [r4, #19]
    5356:	2b00      	cmp	r3, #0
    5358:	d0b4      	beq.n	52c4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    535a:	2101      	movs	r1, #1
    535c:	7c60      	ldrb	r0, [r4, #17]
  return true;
    535e:	461d      	mov	r5, r3
    5360:	f001 fdf0 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5364:	4631      	mov	r1, r6
    5366:	4648      	mov	r0, r9
    5368:	f001 feca 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    536c:	4648      	mov	r0, r9
    536e:	f001 fe7d 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5372:	2300      	movs	r3, #0
    5374:	74e3      	strb	r3, [r4, #19]
}
    5376:	e7a5      	b.n	52c4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    5378:	2329      	movs	r3, #41	; 0x29
    537a:	74a3      	strb	r3, [r4, #18]
    goto fail;
    537c:	e7a0      	b.n	52c0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    537e:	bf00      	nop
    5380:	00005505 	.word	0x00005505
    5384:	2002945c 	.word	0x2002945c

00005388 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    5388:	b570      	push	{r4, r5, r6, lr}
    538a:	4604      	mov	r4, r0
    538c:	b082      	sub	sp, #8
    cardCommand(CMD55, 0);
    538e:	2200      	movs	r2, #0
    5390:	460e      	mov	r6, r1
    5392:	2137      	movs	r1, #55	; 0x37
    5394:	f7ff fd5c 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    5398:	2200      	movs	r2, #0
    539a:	2133      	movs	r1, #51	; 0x33
    539c:	4620      	mov	r0, r4
    539e:	f7ff fd57 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    53a2:	b1b0      	cbz	r0, 53d2 <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    53a4:	2318      	movs	r3, #24
    53a6:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    53a8:	7ce0      	ldrb	r0, [r4, #19]
    53aa:	b908      	cbnz	r0, 53b0 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    53ac:	b002      	add	sp, #8
    53ae:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    53b0:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53b2:	7c60      	ldrb	r0, [r4, #17]
    53b4:	2101      	movs	r1, #1
    53b6:	f001 fdc5 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53ba:	21ff      	movs	r1, #255	; 0xff
    53bc:	4628      	mov	r0, r5
    53be:	f001 fe9f 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53c2:	4628      	mov	r0, r5
    53c4:	f001 fe52 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53c8:	2300      	movs	r3, #0
  return false;
    53ca:	4618      	mov	r0, r3
    m_spiActive = false;
    53cc:	74e3      	strb	r3, [r4, #19]
}
    53ce:	b002      	add	sp, #8
    53d0:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    53d2:	4605      	mov	r5, r0
    53d4:	2208      	movs	r2, #8
    53d6:	4631      	mov	r1, r6
    53d8:	4620      	mov	r0, r4
    53da:	f7ff fcaf 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    53de:	2800      	cmp	r0, #0
    53e0:	d0e2      	beq.n	53a8 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    53e2:	7ce6      	ldrb	r6, [r4, #19]
    53e4:	2e00      	cmp	r6, #0
    53e6:	d0e1      	beq.n	53ac <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    53e8:	7c60      	ldrb	r0, [r4, #17]
    53ea:	2101      	movs	r1, #1
    53ec:	f001 fdaa 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53f0:	1d20      	adds	r0, r4, #4
    53f2:	21ff      	movs	r1, #255	; 0xff
    53f4:	9001      	str	r0, [sp, #4]
    53f6:	f001 fe83 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    53fa:	9801      	ldr	r0, [sp, #4]
    53fc:	f001 fe36 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    5400:	4630      	mov	r0, r6
    m_spiActive = false;
    5402:	74e5      	strb	r5, [r4, #19]
}
    5404:	b002      	add	sp, #8
    5406:	bd70      	pop	{r4, r5, r6, pc}

00005408 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    5408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    540a:	4604      	mov	r4, r0
    cardCommand(CMD55, 0);
    540c:	2200      	movs	r2, #0
    540e:	460d      	mov	r5, r1
    5410:	2137      	movs	r1, #55	; 0x37
    5412:	f7ff fd1d 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    5416:	2200      	movs	r2, #0
    5418:	210d      	movs	r1, #13
    541a:	4620      	mov	r0, r4
    541c:	f7ff fd18 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5420:	b1a0      	cbz	r0, 544c <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    5422:	2315      	movs	r3, #21
    5424:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    5426:	7ce0      	ldrb	r0, [r4, #19]
    5428:	b900      	cbnz	r0, 542c <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    542c:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    542e:	7c60      	ldrb	r0, [r4, #17]
    5430:	2101      	movs	r1, #1
    5432:	f001 fd87 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5436:	21ff      	movs	r1, #255	; 0xff
    5438:	4628      	mov	r0, r5
    543a:	f001 fe61 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    543e:	4628      	mov	r0, r5
    5440:	f001 fe14 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5444:	2300      	movs	r3, #0
  return false;
    5446:	4618      	mov	r0, r3
    m_spiActive = false;
    5448:	74e3      	strb	r3, [r4, #19]
}
    544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    544c:	1d27      	adds	r7, r4, #4
    544e:	4638      	mov	r0, r7
    5450:	f001 fe38 	bl	70c4 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5454:	4606      	mov	r6, r0
    5456:	2800      	cmp	r0, #0
    5458:	d1e3      	bne.n	5422 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    545a:	2240      	movs	r2, #64	; 0x40
    545c:	4629      	mov	r1, r5
    545e:	4620      	mov	r0, r4
    5460:	f7ff fc6c 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5464:	2800      	cmp	r0, #0
    5466:	d0de      	beq.n	5426 <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    5468:	7ce5      	ldrb	r5, [r4, #19]
    546a:	2d00      	cmp	r5, #0
    546c:	d0dd      	beq.n	542a <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    546e:	7c60      	ldrb	r0, [r4, #17]
    5470:	2101      	movs	r1, #1
    5472:	f001 fd67 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5476:	21ff      	movs	r1, #255	; 0xff
    5478:	4638      	mov	r0, r7
    547a:	f001 fe41 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    547e:	4638      	mov	r0, r7
    5480:	f001 fdf4 	bl	706c <SdSpiArduinoDriver::deactivate()>
  return true;
    5484:	4628      	mov	r0, r5
    m_spiActive = false;
    5486:	74e6      	strb	r6, [r4, #19]
}
    5488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    548a:	bf00      	nop

0000548c <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    548c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    548e:	2200      	movs	r2, #0
    5490:	b082      	sub	sp, #8
    5492:	460e      	mov	r6, r1
    5494:	210a      	movs	r1, #10
    5496:	4604      	mov	r4, r0
    5498:	f7ff fcda 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    549c:	b1b0      	cbz	r0, 54cc <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    549e:	231c      	movs	r3, #28
    54a0:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    54a2:	7ce0      	ldrb	r0, [r4, #19]
    54a4:	b908      	cbnz	r0, 54aa <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    54a6:	b002      	add	sp, #8
    54a8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    54aa:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54ac:	7c60      	ldrb	r0, [r4, #17]
    54ae:	2101      	movs	r1, #1
    54b0:	f001 fd48 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54b4:	21ff      	movs	r1, #255	; 0xff
    54b6:	4628      	mov	r0, r5
    54b8:	f001 fe22 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    54bc:	4628      	mov	r0, r5
    54be:	f001 fdd5 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    54c2:	2300      	movs	r3, #0
  return false;
    54c4:	4618      	mov	r0, r3
    m_spiActive = false;
    54c6:	74e3      	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    54c8:	b002      	add	sp, #8
    54ca:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    54cc:	4605      	mov	r5, r0
    54ce:	2210      	movs	r2, #16
    54d0:	4631      	mov	r1, r6
    54d2:	4620      	mov	r0, r4
    54d4:	f7ff fc32 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    54d8:	2800      	cmp	r0, #0
    54da:	d0e2      	beq.n	54a2 <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    54dc:	7ce6      	ldrb	r6, [r4, #19]
    54de:	2e00      	cmp	r6, #0
    54e0:	d0e1      	beq.n	54a6 <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    54e2:	7c60      	ldrb	r0, [r4, #17]
    54e4:	2101      	movs	r1, #1
    54e6:	f001 fd2d 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54ea:	1d20      	adds	r0, r4, #4
    54ec:	21ff      	movs	r1, #255	; 0xff
    54ee:	9001      	str	r0, [sp, #4]
    54f0:	f001 fe06 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    54f4:	9801      	ldr	r0, [sp, #4]
    54f6:	f001 fdb9 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    54fa:	4630      	mov	r0, r6
    m_spiActive = false;
    54fc:	74e5      	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    54fe:	b002      	add	sp, #8
    5500:	bd70      	pop	{r4, r5, r6, pc}
    5502:	bf00      	nop

00005504 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5504:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5506:	2200      	movs	r2, #0
    5508:	b082      	sub	sp, #8
    550a:	460e      	mov	r6, r1
    550c:	2109      	movs	r1, #9
    550e:	4604      	mov	r4, r0
    5510:	f7ff fc9e 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5514:	b1b0      	cbz	r0, 5544 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    5516:	231c      	movs	r3, #28
    5518:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    551a:	7ce0      	ldrb	r0, [r4, #19]
    551c:	b908      	cbnz	r0, 5522 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    551e:	b002      	add	sp, #8
    5520:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5522:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5524:	7c60      	ldrb	r0, [r4, #17]
    5526:	2101      	movs	r1, #1
    5528:	f001 fd0c 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    552c:	21ff      	movs	r1, #255	; 0xff
    552e:	4628      	mov	r0, r5
    5530:	f001 fde6 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5534:	4628      	mov	r0, r5
    5536:	f001 fd99 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    553a:	2300      	movs	r3, #0
  return false;
    553c:	4618      	mov	r0, r3
    m_spiActive = false;
    553e:	74e3      	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5540:	b002      	add	sp, #8
    5542:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5544:	4605      	mov	r5, r0
    5546:	2210      	movs	r2, #16
    5548:	4631      	mov	r1, r6
    554a:	4620      	mov	r0, r4
    554c:	f7ff fbf6 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5550:	2800      	cmp	r0, #0
    5552:	d0e2      	beq.n	551a <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    5554:	7ce6      	ldrb	r6, [r4, #19]
    5556:	2e00      	cmp	r6, #0
    5558:	d0e1      	beq.n	551e <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    555a:	7c60      	ldrb	r0, [r4, #17]
    555c:	2101      	movs	r1, #1
    555e:	f001 fcf1 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5562:	1d20      	adds	r0, r4, #4
    5564:	21ff      	movs	r1, #255	; 0xff
    5566:	9001      	str	r0, [sp, #4]
    5568:	f001 fdca 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    556c:	9801      	ldr	r0, [sp, #4]
    556e:	f001 fd7d 	bl	706c <SdSpiArduinoDriver::deactivate()>
}
    5572:	4630      	mov	r0, r6
    m_spiActive = false;
    5574:	74e5      	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5576:	b002      	add	sp, #8
    5578:	bd70      	pop	{r4, r5, r6, pc}
    557a:	bf00      	nop

0000557c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    557c:	b5f0      	push	{r4, r5, r6, r7, lr}
    557e:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    5580:	7d02      	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    5582:	b083      	sub	sp, #12
    5584:	4606      	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    5586:	2a01      	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    5588:	460d      	mov	r5, r1
    558a:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    558c:	d102      	bne.n	5594 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    558e:	6983      	ldr	r3, [r0, #24]
    5590:	428b      	cmp	r3, r1
    5592:	d005      	beq.n	55a0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    5594:	4629      	mov	r1, r5
    5596:	4630      	mov	r0, r6
    5598:	f7ff fdce 	bl	5138 <SharedSpiCard::readStart(unsigned long)>
    559c:	b180      	cbz	r0, 55c0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    559e:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    55a0:	b197      	cbz	r7, 55c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    55a2:	2500      	movs	r5, #0
    55a4:	e001      	b.n	55aa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    55a6:	42af      	cmp	r7, r5
    55a8:	d00e      	beq.n	55c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    55aa:	4621      	mov	r1, r4
    55ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    55b0:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    55b2:	3501      	adds	r5, #1
    55b4:	f504 7400 	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    55b8:	f7ff fbc0 	bl	4d3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    55bc:	2800      	cmp	r0, #0
    55be:	d1f2      	bne.n	55a6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    55c0:	2400      	movs	r4, #0
}
    55c2:	4620      	mov	r0, r4
    55c4:	b003      	add	sp, #12
    55c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    55c8:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    55ca:	7f34      	ldrb	r4, [r6, #28]
  m_curSector += ns;
    55cc:	443b      	add	r3, r7
    55ce:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    55d0:	b11c      	cbz	r4, 55da <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    55d2:	2401      	movs	r4, #1
}
    55d4:	4620      	mov	r0, r4
    55d6:	b003      	add	sp, #12
    55d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    55da:	4622      	mov	r2, r4
    55dc:	210c      	movs	r1, #12
    55de:	4630      	mov	r0, r6
  m_state = IDLE_STATE;
    55e0:	7534      	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    55e2:	f7ff fc35 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    55e6:	4605      	mov	r5, r0
    55e8:	b980      	cbnz	r0, 560c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    55ea:	7cf4      	ldrb	r4, [r6, #19]
    55ec:	2c00      	cmp	r4, #0
    55ee:	d0f0      	beq.n	55d2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    55f0:	2101      	movs	r1, #1
    55f2:	7c70      	ldrb	r0, [r6, #17]
    55f4:	f001 fca6 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55f8:	1d30      	adds	r0, r6, #4
    55fa:	21ff      	movs	r1, #255	; 0xff
    55fc:	9001      	str	r0, [sp, #4]
    55fe:	f001 fd7f 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5602:	9801      	ldr	r0, [sp, #4]
    5604:	f001 fd32 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5608:	74f5      	strb	r5, [r6, #19]
}
    560a:	e7da      	b.n	55c2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    560c:	2209      	movs	r2, #9
  if (m_spiActive) {
    560e:	7cf3      	ldrb	r3, [r6, #19]
    5610:	74b2      	strb	r2, [r6, #18]
    5612:	2b00      	cmp	r3, #0
    5614:	d0d4      	beq.n	55c0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    5616:	1d35      	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5618:	2101      	movs	r1, #1
    561a:	7c70      	ldrb	r0, [r6, #17]
    561c:	f001 fc92 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5620:	21ff      	movs	r1, #255	; 0xff
    5622:	4628      	mov	r0, r5
    5624:	f001 fd6c 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5628:	4628      	mov	r0, r5
    562a:	f001 fd1f 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    562e:	74f4      	strb	r4, [r6, #19]
}
    5630:	e7c7      	b.n	55c2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    5632:	bf00      	nop

00005634 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    5634:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    563a:	69da      	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    563c:	b082      	sub	sp, #8
    563e:	4d24      	ldr	r5, [pc, #144]	; (56d0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    5640:	4604      	mov	r4, r0
    5642:	460e      	mov	r6, r1
    5644:	42aa      	cmp	r2, r5
    5646:	d111      	bne.n	566c <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    5648:	7d05      	ldrb	r5, [r0, #20]
    564a:	2d02      	cmp	r5, #2
    564c:	d006      	beq.n	565c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    564e:	2d01      	cmp	r5, #1
    5650:	d00e      	beq.n	5670 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    5652:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    5654:	7726      	strb	r6, [r4, #28]
}
    5656:	b002      	add	sp, #8
    5658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    565c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    565e:	4798      	blx	r3
  if (!syncDevice()) {
    5660:	2800      	cmp	r0, #0
    5662:	d1f6      	bne.n	5652 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    5664:	2000      	movs	r0, #0
}
    5666:	b002      	add	sp, #8
    5668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    566c:	4790      	blx	r2
    566e:	e7f7      	b.n	5660 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    5670:	f04f 0800 	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    5674:	210c      	movs	r1, #12
    5676:	4642      	mov	r2, r8
  m_state = IDLE_STATE;
    5678:	f880 8014 	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    567c:	f7ff fbe8 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5680:	4607      	mov	r7, r0
    5682:	b980      	cbnz	r0, 56a6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    5684:	7ce3      	ldrb	r3, [r4, #19]
    5686:	2b00      	cmp	r3, #0
    5688:	d0e3      	beq.n	5652 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    568a:	4629      	mov	r1, r5
    568c:	7c60      	ldrb	r0, [r4, #17]
    568e:	f001 fc59 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5692:	1d20      	adds	r0, r4, #4
    5694:	21ff      	movs	r1, #255	; 0xff
    5696:	9001      	str	r0, [sp, #4]
    5698:	f001 fd32 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    569c:	9801      	ldr	r0, [sp, #4]
    569e:	f001 fce5 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    56a2:	74e7      	strb	r7, [r4, #19]
    56a4:	e7d5      	b.n	5652 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    56a6:	2209      	movs	r2, #9
  if (m_spiActive) {
    56a8:	7ce3      	ldrb	r3, [r4, #19]
    56aa:	74a2      	strb	r2, [r4, #18]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d0d9      	beq.n	5664 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    56b0:	1d26      	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    56b2:	4629      	mov	r1, r5
    56b4:	7c60      	ldrb	r0, [r4, #17]
    56b6:	f001 fc45 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    56ba:	21ff      	movs	r1, #255	; 0xff
    56bc:	4630      	mov	r0, r6
    56be:	f001 fd1f 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    56c2:	4630      	mov	r0, r6
    56c4:	f001 fcd2 	bl	706c <SdSpiArduinoDriver::deactivate()>
    return false;
    56c8:	4640      	mov	r0, r8
    m_spiActive = false;
    56ca:	f884 8013 	strb.w	r8, [r4, #19]
    56ce:	e7c2      	b.n	5656 <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    56d0:	00004e39 	.word	0x00004e39

000056d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    56d4:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    56d6:	1d05      	adds	r5, r0, #4
    56d8:	4616      	mov	r6, r2
    56da:	4604      	mov	r4, r0
    56dc:	4628      	mov	r0, r5
    56de:	f001 fd0f 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    56e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    56e6:	4631      	mov	r1, r6
    56e8:	4628      	mov	r0, r5
    56ea:	f001 fd13 	bl	7114 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    56ee:	21ff      	movs	r1, #255	; 0xff
    56f0:	4628      	mov	r0, r5
    56f2:	f001 fd05 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
    56f6:	21ff      	movs	r1, #255	; 0xff
    56f8:	4628      	mov	r0, r5
    56fa:	f001 fd01 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    56fe:	4628      	mov	r0, r5
    5700:	f001 fce0 	bl	70c4 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5704:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    5708:	7560      	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    570a:	2b05      	cmp	r3, #5
    570c:	d004      	beq.n	5718 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    570e:	2321      	movs	r3, #33	; 0x21
  if (m_spiActive) {
    5710:	7ce0      	ldrb	r0, [r4, #19]
    5712:	74a3      	strb	r3, [r4, #18]
    5714:	b910      	cbnz	r0, 571c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    5716:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5718:	2001      	movs	r0, #1
}
    571a:	bd70      	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    571c:	7c60      	ldrb	r0, [r4, #17]
    571e:	2101      	movs	r1, #1
    5720:	f001 fc10 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5724:	21ff      	movs	r1, #255	; 0xff
    5726:	4628      	mov	r0, r5
    5728:	f001 fcea 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    572c:	4628      	mov	r0, r5
    572e:	f001 fc9d 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5732:	2300      	movs	r3, #0
}
    5734:	4618      	mov	r0, r3
    m_spiActive = false;
    5736:	74e3      	strb	r3, [r4, #19]
}
    5738:	bd70      	pop	{r4, r5, r6, pc}
    573a:	bf00      	nop

0000573c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5740:	4d17      	ldr	r5, [pc, #92]	; (57a0 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    5742:	4606      	mov	r6, r0
    5744:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    5746:	f100 0804 	add.w	r8, r0, #4
    574a:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    574c:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5750:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    5752:	e003      	b.n	575c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    5754:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5756:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5758:	041b      	lsls	r3, r3, #16
    575a:	d40c      	bmi.n	5776 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    575c:	4640      	mov	r0, r8
    575e:	f001 fcb1 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5762:	28ff      	cmp	r0, #255	; 0xff
    5764:	d1f6      	bne.n	5754 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5766:	463a      	mov	r2, r7
    5768:	21fc      	movs	r1, #252	; 0xfc
    576a:	4630      	mov	r0, r6
    576c:	f7ff ffb2 	bl	56d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5770:	b118      	cbz	r0, 577a <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    5772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    5776:	2325      	movs	r3, #37	; 0x25
    5778:	74b3      	strb	r3, [r6, #18]
  if (m_spiActive) {
    577a:	7cf0      	ldrb	r0, [r6, #19]
    577c:	2800      	cmp	r0, #0
    577e:	d0f8      	beq.n	5772 <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5780:	7c70      	ldrb	r0, [r6, #17]
    5782:	2101      	movs	r1, #1
    5784:	f001 fbde 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5788:	21ff      	movs	r1, #255	; 0xff
    578a:	4640      	mov	r0, r8
    578c:	f001 fcb8 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5790:	4640      	mov	r0, r8
    5792:	f001 fc6b 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5796:	2300      	movs	r3, #0
}
    5798:	4618      	mov	r0, r3
    m_spiActive = false;
    579a:	74f3      	strb	r3, [r6, #19]
}
    579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57a0:	2002945c 	.word	0x2002945c

000057a4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    57a8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57aa:	4615      	mov	r5, r2
    57ac:	4a35      	ldr	r2, [pc, #212]	; (5884 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    57ae:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    57b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57b2:	460e      	mov	r6, r1
    57b4:	4293      	cmp	r3, r2
    57b6:	d15c      	bne.n	5872 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    57b8:	7d80      	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    57ba:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    57bc:	f04f 0118 	mov.w	r1, #24
    57c0:	4620      	mov	r0, r4
    sector <<= 9;
    57c2:	bf18      	it	ne
    57c4:	0276      	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    57c6:	4632      	mov	r2, r6
    57c8:	f7ff fb42 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    57cc:	b148      	cbz	r0, 57e2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    57ce:	230d      	movs	r3, #13
    57d0:	74a3      	strb	r3, [r4, #18]
  if (m_spiActive) {
    57d2:	f894 9013 	ldrb.w	r9, [r4, #19]
    57d6:	f1b9 0f00 	cmp.w	r9, #0
    57da:	d138      	bne.n	584e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    57dc:	4648      	mov	r0, r9
    57de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    57e2:	462a      	mov	r2, r5
    57e4:	21fe      	movs	r1, #254	; 0xfe
    57e6:	4620      	mov	r0, r4
    57e8:	f7ff ff74 	bl	56d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    57ec:	4681      	mov	r9, r0
    57ee:	2800      	cmp	r0, #0
    57f0:	d0ef      	beq.n	57d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    57f2:	4f25      	ldr	r7, [pc, #148]	; (5888 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    57f4:	f104 0804 	add.w	r8, r4, #4
    57f8:	683e      	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    57fa:	f506 7616 	add.w	r6, r6, #600	; 0x258
    57fe:	b2b6      	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    5800:	e003      	b.n	580a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    5802:	683b      	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5804:	1af3      	subs	r3, r6, r3
    if (timeout.timedOut()) {
    5806:	041b      	lsls	r3, r3, #16
    5808:	d438      	bmi.n	587c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    580a:	4640      	mov	r0, r8
    580c:	f001 fc5a 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5810:	28ff      	cmp	r0, #255	; 0xff
    5812:	4605      	mov	r5, r0
    5814:	d1f5      	bne.n	5802 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    5816:	2200      	movs	r2, #0
    5818:	210d      	movs	r1, #13
    581a:	4620      	mov	r0, r4
    581c:	f7ff fb18 	bl	4e50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5820:	bb48      	cbnz	r0, 5876 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    5822:	4640      	mov	r0, r8
    5824:	f001 fc4e 	bl	70c4 <SdSpiArduinoDriver::receive()>
    5828:	4606      	mov	r6, r0
    582a:	bb20      	cbnz	r0, 5876 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    582c:	7ce3      	ldrb	r3, [r4, #19]
    582e:	2b00      	cmp	r3, #0
    5830:	d0d4      	beq.n	57dc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5832:	2101      	movs	r1, #1
    5834:	7c60      	ldrb	r0, [r4, #17]
  return true;
    5836:	4699      	mov	r9, r3
    5838:	f001 fb84 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    583c:	4629      	mov	r1, r5
    583e:	4640      	mov	r0, r8
    5840:	f001 fc5e 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5844:	4640      	mov	r0, r8
    5846:	f001 fc11 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    584a:	74e6      	strb	r6, [r4, #19]
}
    584c:	e7c6      	b.n	57dc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    584e:	1d25      	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5850:	7c60      	ldrb	r0, [r4, #17]
    5852:	2101      	movs	r1, #1
    5854:	f001 fb76 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5858:	21ff      	movs	r1, #255	; 0xff
    585a:	4628      	mov	r0, r5
    585c:	f001 fc50 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5860:	4628      	mov	r0, r5
    5862:	f001 fc03 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5866:	2300      	movs	r3, #0
  return false;
    5868:	4699      	mov	r9, r3
    m_spiActive = false;
    586a:	74e3      	strb	r3, [r4, #19]
}
    586c:	4648      	mov	r0, r9
    586e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    5872:	4798      	blx	r3
    5874:	e7a1      	b.n	57ba <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    5876:	230a      	movs	r3, #10
    5878:	74a3      	strb	r3, [r4, #18]
    goto fail;
    587a:	e7aa      	b.n	57d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    587c:	2324      	movs	r3, #36	; 0x24
    587e:	74a3      	strb	r3, [r4, #18]
    goto fail;
    5880:	e7a7      	b.n	57d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    5882:	bf00      	nop
    5884:	00004bf1 	.word	0x00004bf1
    5888:	2002945c 	.word	0x2002945c

0000588c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    588c:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    588e:	7f04      	ldrb	r4, [r0, #28]
    5890:	b134      	cbz	r4, 58a0 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    5892:	6804      	ldr	r4, [r0, #0]
    5894:	2301      	movs	r3, #1
    5896:	6a64      	ldr	r4, [r4, #36]	; 0x24
    5898:	46a4      	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    589a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    589e:	4760      	bx	ip
}
    58a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    58a4:	f7ff bf7e 	b.w	57a4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000058a8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    58a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58ac:	469a      	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    58ae:	7d03      	ldrb	r3, [r0, #20]
                                    size_t ns) {
    58b0:	b081      	sub	sp, #4
    58b2:	4607      	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    58b4:	2b02      	cmp	r3, #2
                                    size_t ns) {
    58b6:	460c      	mov	r4, r1
    58b8:	4690      	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    58ba:	d059      	beq.n	5970 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    58bc:	683b      	ldr	r3, [r7, #0]
    58be:	4621      	mov	r1, r4
    58c0:	4638      	mov	r0, r7
    58c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    58c4:	4798      	blx	r3
    58c6:	2800      	cmp	r0, #0
    58c8:	d037      	beq.n	593a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    58ca:	61bc      	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    58cc:	f1ba 0f00 	cmp.w	sl, #0
    58d0:	d023      	beq.n	591a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    58d2:	f04f 0900 	mov.w	r9, #0
    58d6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 597c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    58da:	4d27      	ldr	r5, [pc, #156]	; (5978 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    58dc:	1d3e      	adds	r6, r7, #4
    if (!writeData(src)) {
    58de:	683b      	ldr	r3, [r7, #0]
    58e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    58e2:	455b      	cmp	r3, fp
    58e4:	d12d      	bne.n	5942 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    58e6:	682c      	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    58e8:	f504 7416 	add.w	r4, r4, #600	; 0x258
    58ec:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    58ee:	e003      	b.n	58f8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    58f0:	682b      	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    58f2:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    58f4:	041b      	lsls	r3, r3, #16
    58f6:	d41c      	bmi.n	5932 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    58f8:	4630      	mov	r0, r6
    58fa:	f001 fbe3 	bl	70c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    58fe:	28ff      	cmp	r0, #255	; 0xff
    5900:	d1f6      	bne.n	58f0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5902:	4642      	mov	r2, r8
    5904:	21fc      	movs	r1, #252	; 0xfc
    5906:	4638      	mov	r0, r7
    5908:	f7ff fee4 	bl	56d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    590c:	b198      	cbz	r0, 5936 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    590e:	f109 0901 	add.w	r9, r9, #1
    5912:	f508 7800 	add.w	r8, r8, #512	; 0x200
    5916:	45ca      	cmp	sl, r9
    5918:	d1e1      	bne.n	58de <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    591a:	69bb      	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    591c:	7f38      	ldrb	r0, [r7, #28]
  m_curSector += ns;
    591e:	4453      	add	r3, sl
    5920:	61bb      	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    5922:	b958      	cbnz	r0, 593c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    5924:	683b      	ldr	r3, [r7, #0]
    5926:	4638      	mov	r0, r7
    5928:	6e9b      	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    592a:	b001      	add	sp, #4
    592c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    5930:	4718      	bx	r3
    m_errorCode = code;
    5932:	2325      	movs	r3, #37	; 0x25
    5934:	74bb      	strb	r3, [r7, #18]
  if (m_spiActive) {
    5936:	7cfb      	ldrb	r3, [r7, #19]
    5938:	b94b      	cbnz	r3, 594e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    593a:	2000      	movs	r0, #0
}
    593c:	b001      	add	sp, #4
    593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    5942:	4641      	mov	r1, r8
    5944:	4638      	mov	r0, r7
    5946:	4798      	blx	r3
    5948:	2800      	cmp	r0, #0
    594a:	d1e0      	bne.n	590e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    594c:	e7f5      	b.n	593a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    594e:	7c78      	ldrb	r0, [r7, #17]
    5950:	2101      	movs	r1, #1
    5952:	f001 faf7 	bl	6f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5956:	21ff      	movs	r1, #255	; 0xff
    5958:	4630      	mov	r0, r6
    595a:	f001 fbd1 	bl	7100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    595e:	4630      	mov	r0, r6
    5960:	f001 fb84 	bl	706c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5964:	2300      	movs	r3, #0
  return false;
    5966:	4618      	mov	r0, r3
    m_spiActive = false;
    5968:	74fb      	strb	r3, [r7, #19]
}
    596a:	b001      	add	sp, #4
    596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5970:	6983      	ldr	r3, [r0, #24]
    5972:	428b      	cmp	r3, r1
    5974:	d1a2      	bne.n	58bc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    5976:	e7a9      	b.n	58cc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    5978:	2002945c 	.word	0x2002945c
    597c:	0000573d 	.word	0x0000573d

00005980 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    5980:	2000      	movs	r0, #0
    5982:	4770      	bx	lr

00005984 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    5984:	2000      	movs	r0, #0
    5986:	4770      	bx	lr

00005988 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    5988:	2000      	movs	r0, #0
    598a:	4770      	bx	lr

0000598c <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    598c:	4770      	bx	lr
    598e:	bf00      	nop

00005990 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    5990:	4b08      	ldr	r3, [pc, #32]	; (59b4 <sdIrs()+0x24>)
    5992:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5994:	4a08      	ldr	r2, [pc, #32]	; (59b8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    5996:	4809      	ldr	r0, [pc, #36]	; (59bc <sdIrs()+0x2c>)
static void sdIrs() {
    5998:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    599a:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    599c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    599e:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    59a0:	6812      	ldr	r2, [r2, #0]
}
    59a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    59a6:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    59a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    59aa:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    59ae:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    59b0:	7001      	strb	r1, [r0, #0]
}
    59b2:	4770      	bx	lr
    59b4:	402c0000 	.word	0x402c0000
    59b8:	20028868 	.word	0x20028868
    59bc:	2002949e 	.word	0x2002949e

000059c0 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    59c0:	4b03      	ldr	r3, [pc, #12]	; (59d0 <isBusyDat()+0x10>)
    59c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    59c4:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    59c8:	f3c0 6000 	ubfx	r0, r0, #24, #1
    59cc:	4770      	bx	lr
    59ce:	bf00      	nop
    59d0:	402c0000 	.word	0x402c0000

000059d4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    59d4:	4b01      	ldr	r3, [pc, #4]	; (59dc <isBusyDMA()+0x8>)
    59d6:	7818      	ldrb	r0, [r3, #0]
    59d8:	4770      	bx	lr
    59da:	bf00      	nop
    59dc:	2002949e 	.word	0x2002949e

000059e0 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59e0:	4a2b      	ldr	r2, [pc, #172]	; (5a90 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59e2:	4b2c      	ldr	r3, [pc, #176]	; (5a94 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    59ea:	492b      	ldr	r1, [pc, #172]	; (5a98 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59ec:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    59f4:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    59f6:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59f8:	4c28      	ldr	r4, [pc, #160]	; (5a9c <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    59fa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    59fe:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    5a02:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5a06:	089b      	lsrs	r3, r3, #2
    5a08:	fbb1 fef3 	udiv	lr, r1, r3
    5a0c:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a10:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    5a14:	d235      	bcs.n	5a82 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    5a16:	2301      	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    5a18:	461e      	mov	r6, r3
    5a1a:	005b      	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a1c:	011a      	lsls	r2, r3, #4
    5a1e:	fbbe f2f2 	udiv	r2, lr, r2
    5a22:	4282      	cmp	r2, r0
    5a24:	d901      	bls.n	5a2a <setSdclk(unsigned long)+0x4a>
    5a26:	2bff      	cmp	r3, #255	; 0xff
    5a28:	d9f6      	bls.n	5a18 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a2a:	fbbe f2f3 	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    5a2e:	0236      	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a30:	4290      	cmp	r0, r2
    5a32:	d22a      	bcs.n	5a8a <setSdclk(unsigned long)+0xaa>
    5a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5a38:	2201      	movs	r2, #1
    5a3a:	e000      	b.n	5a3e <setSdclk(unsigned long)+0x5e>
    5a3c:	46a4      	mov	ip, r4
    dvs++;
    5a3e:	4615      	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a40:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5a44:	3201      	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a46:	fbbe f1fc 	udiv	r1, lr, ip
    5a4a:	4281      	cmp	r1, r0
    5a4c:	d917      	bls.n	5a7e <setSdclk(unsigned long)+0x9e>
    5a4e:	2a10      	cmp	r2, #16
    5a50:	d1f4      	bne.n	5a3c <setSdclk(unsigned long)+0x5c>
    5a52:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    5a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5a58:	4911      	ldr	r1, [pc, #68]	; (5aa0 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    5a5a:	4a12      	ldr	r2, [pc, #72]	; (5aa4 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    5a5c:	fb03 fc0c 	mul.w	ip, r3, ip
    5a60:	fbbe f3fc 	udiv	r3, lr, ip
    5a64:	600b      	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    5a66:	4b10      	ldr	r3, [pc, #64]	; (5aa8 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    5a68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    5a6a:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5a6c:	432b      	orrs	r3, r5
    5a6e:	4333      	orrs	r3, r6
    5a70:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
    5a74:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5a76:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5a78:	071b      	lsls	r3, r3, #28
    5a7a:	d5fc      	bpl.n	5a76 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    5a7c:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5a7e:	012d      	lsls	r5, r5, #4
    5a80:	e7e8      	b.n	5a54 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5a82:	4672      	mov	r2, lr
    5a84:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    5a86:	2301      	movs	r3, #1
    5a88:	e7d2      	b.n	5a30 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5a8a:	469c      	mov	ip, r3
    5a8c:	2500      	movs	r5, #0
    5a8e:	e7e1      	b.n	5a54 <setSdclk(unsigned long)+0x74>
    5a90:	400fc000 	.word	0x400fc000
    5a94:	400d8000 	.word	0x400d8000
    5a98:	5e69ec00 	.word	0x5e69ec00
    5a9c:	aaaaaaab 	.word	0xaaaaaaab
    5aa0:	2000df40 	.word	0x2000df40
    5aa4:	402c0000 	.word	0x402c0000
    5aa8:	fff0000f 	.word	0xfff0000f

00005aac <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    5aac:	4b01      	ldr	r3, [pc, #4]	; (5ab4 <SdioCard::errorCode() const+0x8>)
    5aae:	7818      	ldrb	r0, [r3, #0]
    5ab0:	4770      	bx	lr
    5ab2:	bf00      	nop
    5ab4:	20008bf6 	.word	0x20008bf6

00005ab8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    5ab8:	4b01      	ldr	r3, [pc, #4]	; (5ac0 <SdioCard::errorData() const+0x8>)
    5aba:	6818      	ldr	r0, [r3, #0]
    5abc:	4770      	bx	lr
    5abe:	bf00      	nop
    5ac0:	20028868 	.word	0x20028868

00005ac4 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5ac4:	b410      	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    5ac6:	4c07      	ldr	r4, [pc, #28]	; (5ae4 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    5ac8:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5acc:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5ad0:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5ad2:	f8cc 1004 	str.w	r1, [ip, #4]
    5ad6:	f8cc 2008 	str.w	r2, [ip, #8]
    5ada:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5ade:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ae2:	4770      	bx	lr
    5ae4:	20028154 	.word	0x20028154

00005ae8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5ae8:	b410      	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    5aea:	4c07      	ldr	r4, [pc, #28]	; (5b08 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    5aec:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5af0:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5af4:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5af6:	f8cc 1004 	str.w	r1, [ip, #4]
    5afa:	f8cc 2008 	str.w	r2, [ip, #8]
    5afe:	f8cc 300c 	str.w	r3, [ip, #12]
}
    5b02:	f85d 4b04 	ldr.w	r4, [sp], #4
    5b06:	4770      	bx	lr
    5b08:	20028164 	.word	0x20028164

00005b0c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5b0c:	4b02      	ldr	r3, [pc, #8]	; (5b18 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    5b0e:	2001      	movs	r0, #1
  *ocr = m_ocr;
    5b10:	681b      	ldr	r3, [r3, #0]
    5b12:	600b      	str	r3, [r1, #0]
}
    5b14:	4770      	bx	lr
    5b16:	bf00      	nop
    5b18:	20028174 	.word	0x20028174

00005b1c <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    5b1c:	4a03      	ldr	r2, [pc, #12]	; (5b2c <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    5b1e:	460b      	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5b20:	ca03      	ldmia	r2!, {r0, r1}
    5b22:	6018      	str	r0, [r3, #0]
  return true;
}
    5b24:	2001      	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    5b26:	6059      	str	r1, [r3, #4]
}
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop
    5b2c:	2002817c 	.word	0x2002817c

00005b30 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    5b30:	b530      	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    5b32:	4c0b      	ldr	r4, [pc, #44]	; (5b60 <SdioCard::readSDS(sds_t*)+0x30>)
    5b34:	468c      	mov	ip, r1
    5b36:	f104 0540 	add.w	r5, r4, #64	; 0x40
    5b3a:	46a6      	mov	lr, r4
    5b3c:	f10c 0c10 	add.w	ip, ip, #16
    5b40:	3410      	adds	r4, #16
    5b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5b46:	45ae      	cmp	lr, r5
    5b48:	f84c 0c10 	str.w	r0, [ip, #-16]
    5b4c:	f84c 1c0c 	str.w	r1, [ip, #-12]
    5b50:	f84c 2c08 	str.w	r2, [ip, #-8]
    5b54:	f84c 3c04 	str.w	r3, [ip, #-4]
    5b58:	d1ef      	bne.n	5b3a <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    5b5a:	2001      	movs	r0, #1
    5b5c:	bd30      	pop	{r4, r5, pc}
    5b5e:	bf00      	nop
    5b60:	20028184 	.word	0x20028184

00005b64 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    5b64:	4770      	bx	lr
    5b66:	bf00      	nop

00005b68 <SdioCard::~SdioCard()>:
    5b68:	b510      	push	{r4, lr}
    5b6a:	4604      	mov	r4, r0
    5b6c:	210c      	movs	r1, #12
    5b6e:	f002 fb4b 	bl	8208 <operator delete(void*, unsigned int)>
    5b72:	4620      	mov	r0, r4
    5b74:	bd10      	pop	{r4, pc}
    5b76:	bf00      	nop

00005b78 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    5b78:	4b04      	ldr	r3, [pc, #16]	; (5b8c <SdioCard::type() const+0x14>)
    5b7a:	781b      	ldrb	r3, [r3, #0]
    5b7c:	b123      	cbz	r3, 5b88 <SdioCard::type() const+0x10>
    5b7e:	4b04      	ldr	r3, [pc, #16]	; (5b90 <SdioCard::type() const+0x18>)
    5b80:	7818      	ldrb	r0, [r3, #0]
    5b82:	3002      	adds	r0, #2
    5b84:	b2c0      	uxtb	r0, r0
    5b86:	4770      	bx	lr
    5b88:	2001      	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    5b8a:	4770      	bx	lr
    5b8c:	2002949b 	.word	0x2002949b
    5b90:	2002949c 	.word	0x2002949c

00005b94 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    5b94:	4a16      	ldr	r2, [pc, #88]	; (5bf0 <SdioCard::sectorCount()+0x5c>)
    5b96:	7813      	ldrb	r3, [r2, #0]
    if (ver == 0) {
    5b98:	099b      	lsrs	r3, r3, #6
    5b9a:	d00e      	beq.n	5bba <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    5b9c:	2b01      	cmp	r3, #1
    5b9e:	d001      	beq.n	5ba4 <SdioCard::sectorCount()+0x10>
      return 0;
    5ba0:	2000      	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5ba2:	4770      	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5ba4:	79d3      	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    5ba6:	8910      	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5ba8:	041b      	lsls	r3, r3, #16
      c_size |= csd[9];
    5baa:	ba40      	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5bac:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5bb0:	b280      	uxth	r0, r0
    5bb2:	4318      	orrs	r0, r3
      return (c_size + 1) << 10;
    5bb4:	3001      	adds	r0, #1
    5bb6:	0280      	lsls	r0, r0, #10
    5bb8:	4770      	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bba:	7a53      	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bbc:	7a10      	ldrb	r0, [r2, #8]
    5bbe:	f892 c007 	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bc2:	005b      	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5bc4:	7991      	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bc6:	0980      	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bc8:	f003 0306 	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5bcc:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5bd0:	f892 c00a 	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5bd4:	0289      	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    5bd6:	7952      	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5bd8:	ea43 13dc 	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5bdc:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5be0:	f002 020f 	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5be4:	4308      	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5be6:	4413      	add	r3, r2
    5be8:	3001      	adds	r0, #1
    5bea:	3b07      	subs	r3, #7
    5bec:	4098      	lsls	r0, r3
    5bee:	4770      	bx	lr
    5bf0:	20028164 	.word	0x20028164

00005bf4 <waitDmaStatus()>:
static bool waitDmaStatus() {
    5bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    5bf6:	4b13      	ldr	r3, [pc, #76]	; (5c44 <waitDmaStatus()+0x50>)
    5bf8:	4f13      	ldr	r7, [pc, #76]	; (5c48 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    5bfa:	4d14      	ldr	r5, [pc, #80]	; (5c4c <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    5bfc:	603b      	str	r3, [r7, #0]
  uint32_t m = micros();
    5bfe:	f002 f9d5 	bl	7fac <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    5c02:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5c04:	b17b      	cbz	r3, 5c26 <waitDmaStatus()+0x32>
    5c06:	4604      	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c08:	4e11      	ldr	r6, [pc, #68]	; (5c50 <waitDmaStatus()+0x5c>)
    5c0a:	e003      	b.n	5c14 <waitDmaStatus()+0x20>
    yield();
    5c0c:	f003 fcd8 	bl	95c0 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    5c10:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5c12:	b143      	cbz	r3, 5c26 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c14:	f002 f9ca 	bl	7fac <micros>
    5c18:	1b00      	subs	r0, r0, r4
    5c1a:	42b0      	cmp	r0, r6
    5c1c:	d9f6      	bls.n	5c0c <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    5c1e:	2300      	movs	r3, #0
    return false;  // Caller will set errorCode.
    5c20:	4618      	mov	r0, r3
      m_busyFcn = 0;
    5c22:	603b      	str	r3, [r7, #0]
}
    5c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5c26:	4b0b      	ldr	r3, [pc, #44]	; (5c54 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    5c28:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5c2a:	6818      	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    5c2c:	603a      	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5c2e:	f010 0002 	ands.w	r0, r0, #2
    5c32:	d0f7      	beq.n	5c24 <waitDmaStatus()+0x30>
    5c34:	681a      	ldr	r2, [r3, #0]
    5c36:	4b08      	ldr	r3, [pc, #32]	; (5c58 <waitDmaStatus()+0x64>)
    5c38:	421a      	tst	r2, r3
    5c3a:	bf0c      	ite	eq
    5c3c:	2001      	moveq	r0, #1
    5c3e:	2000      	movne	r0, #0
}
    5c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c42:	bf00      	nop
    5c44:	000059d5 	.word	0x000059d5
    5c48:	20028864 	.word	0x20028864
    5c4c:	2002949e 	.word	0x2002949e
    5c50:	000f4240 	.word	0x000f4240
    5c54:	20028868 	.word	0x20028868
    5c58:	117f0000 	.word	0x117f0000

00005c5c <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5c60:	f002 f9a4 	bl	7fac <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5c64:	4e17      	ldr	r6, [pc, #92]	; (5cc4 <waitTransferComplete() [clone .part.0]+0x68>)
    5c66:	4d18      	ldr	r5, [pc, #96]	; (5cc8 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5c68:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c6a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5ce0 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5c6e:	e004      	b.n	5c7a <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c70:	f002 f99c 	bl	7fac <micros>
    5c74:	1bc0      	subs	r0, r0, r7
    5c76:	4540      	cmp	r0, r8
    5c78:	d81b      	bhi.n	5cb2 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5c7a:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    5c7c:	402c      	ands	r4, r5
    5c7e:	d0f7      	beq.n	5c70 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5c80:	4a12      	ldr	r2, [pc, #72]	; (5ccc <waitTransferComplete() [clone .part.0]+0x70>)
    5c82:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5c84:	4b12      	ldr	r3, [pc, #72]	; (5cd0 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5c86:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5c88:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5c8a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c8c:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c8e:	4a11      	ldr	r2, [pc, #68]	; (5cd4 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5c90:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c92:	681b      	ldr	r3, [r3, #0]
    5c94:	4213      	tst	r3, r2
    5c96:	d009      	beq.n	5cac <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5c98:	490f      	ldr	r1, [pc, #60]	; (5cd8 <waitTransferComplete() [clone .part.0]+0x7c>)
    5c9a:	2420      	movs	r4, #32
  m_errorLine = line;
    5c9c:	4b0f      	ldr	r3, [pc, #60]	; (5cdc <waitTransferComplete() [clone .part.0]+0x80>)
    5c9e:	f240 22aa 	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5ca2:	2000      	movs	r0, #0
  m_errorCode = code;
    5ca4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ca6:	601a      	str	r2, [r3, #0]
}
    5ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5cac:	2001      	movs	r0, #1
}
    5cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5cb2:	4a06      	ldr	r2, [pc, #24]	; (5ccc <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5cb4:	4b06      	ldr	r3, [pc, #24]	; (5cd0 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5cb6:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5cb8:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5cba:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5cbc:	681b      	ldr	r3, [r3, #0]
    5cbe:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5cc0:	e7ea      	b.n	5c98 <waitTransferComplete() [clone .part.0]+0x3c>
    5cc2:	bf00      	nop
    5cc4:	402c0000 	.word	0x402c0000
    5cc8:	117f0002 	.word	0x117f0002
    5ccc:	2002949d 	.word	0x2002949d
    5cd0:	20028868 	.word	0x20028868
    5cd4:	117f0000 	.word	0x117f0000
    5cd8:	20008bf6 	.word	0x20008bf6
    5cdc:	20027f48 	.word	0x20027f48
    5ce0:	000f4240 	.word	0x000f4240

00005ce4 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5ce8:	4c26      	ldr	r4, [pc, #152]	; (5d84 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5cea:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5cec:	7823      	ldrb	r3, [r4, #0]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d138      	bne.n	5d64 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5cf2:	4b25      	ldr	r3, [pc, #148]	; (5d88 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5cf6:	05d2      	lsls	r2, r2, #23
    5cf8:	d52b      	bpl.n	5d52 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5cfa:	4d23      	ldr	r5, [pc, #140]	; (5d88 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cfc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5d94 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5d00:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5d06:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5d08:	f002 f950 	bl	7fac <micros>
    5d0c:	4606      	mov	r6, r0
  while (fcn()) {
    5d0e:	e004      	b.n	5d1a <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d10:	f002 f94c 	bl	7fac <micros>
    5d14:	1b80      	subs	r0, r0, r6
    5d16:	4540      	cmp	r0, r8
    5d18:	d82a      	bhi.n	5d70 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    5d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5d1c:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5d20:	d0f6      	beq.n	5d10 <SdioCard::writeData(unsigned char const*)+0x2c>
    5d22:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5d26:	4818      	ldr	r0, [pc, #96]	; (5d88 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5d28:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5d2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5d2e:	055b      	lsls	r3, r3, #21
    5d30:	d5fc      	bpl.n	5d2c <SdioCard::writeData(unsigned char const*)+0x48>
    5d32:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5d36:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5d3a:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5d3c:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5d3e:	d1fa      	bne.n	5d36 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5d40:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    5d44:	45bc      	cmp	ip, r7
    5d46:	d1f1      	bne.n	5d2c <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5d48:	2301      	movs	r3, #1
  return true;
    5d4a:	4618      	mov	r0, r3
  m_transferActive = true;
    5d4c:	7023      	strb	r3, [r4, #0]
}
    5d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5d58:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5d60:	629a      	str	r2, [r3, #40]	; 0x28
    5d62:	e7ca      	b.n	5cfa <SdioCard::writeData(unsigned char const*)+0x16>
    5d64:	f7ff ff7a 	bl	5c5c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5d68:	2800      	cmp	r0, #0
    5d6a:	d1c2      	bne.n	5cf2 <SdioCard::writeData(unsigned char const*)+0xe>
}
    5d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5d70:	4906      	ldr	r1, [pc, #24]	; (5d8c <SdioCard::writeData(unsigned char const*)+0xa8>)
    5d72:	2422      	movs	r4, #34	; 0x22
  m_errorLine = line;
    5d74:	4b06      	ldr	r3, [pc, #24]	; (5d90 <SdioCard::writeData(unsigned char const*)+0xac>)
    5d76:	f240 421f 	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5d7a:	4648      	mov	r0, r9
  m_errorCode = code;
    5d7c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5d7e:	601a      	str	r2, [r3, #0]
}
    5d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d84:	2002949d 	.word	0x2002949d
    5d88:	402c0000 	.word	0x402c0000
    5d8c:	20008bf6 	.word	0x20008bf6
    5d90:	20027f48 	.word	0x20027f48
    5d94:	000f4240 	.word	0x000f4240

00005d98 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d9c:	4607      	mov	r7, r0
    5d9e:	4688      	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5da0:	4c1f      	ldr	r4, [pc, #124]	; (5e20 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5da2:	f002 f903 	bl	7fac <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5da6:	4e1f      	ldr	r6, [pc, #124]	; (5e24 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5da8:	4605      	mov	r5, r0
  while (fcn()) {
    5daa:	e004      	b.n	5db6 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dac:	f002 f8fe 	bl	7fac <micros>
    5db0:	1b43      	subs	r3, r0, r5
    5db2:	42b3      	cmp	r3, r6
    5db4:	d824      	bhi.n	5e00 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5db8:	07d9      	lsls	r1, r3, #31
    5dba:	d4f7      	bmi.n	5dac <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5dbc:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5dbe:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5dc2:	d420      	bmi.n	5e06 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5dc4:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5dc8:	4c15      	ldr	r4, [pc, #84]	; (5e20 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5dca:	4e17      	ldr	r6, [pc, #92]	; (5e28 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5dcc:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5dce:	f002 f8ed 	bl	7fac <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dd2:	4f14      	ldr	r7, [pc, #80]	; (5e24 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5dd4:	4605      	mov	r5, r0
  while (fcn()) {
    5dd6:	e004      	b.n	5de2 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5dd8:	f002 f8e8 	bl	7fac <micros>
    5ddc:	1b40      	subs	r0, r0, r5
    5dde:	42b8      	cmp	r0, r7
    5de0:	d80e      	bhi.n	5e00 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5de4:	4233      	tst	r3, r6
    5de6:	d0f7      	beq.n	5dd8 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5de8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5dea:	4b10      	ldr	r3, [pc, #64]	; (5e2c <cardCommand(unsigned long, unsigned long)+0x94>)
    5dec:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5dee:	681a      	ldr	r2, [r3, #0]
    5df0:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5df2:	681a      	ldr	r2, [r3, #0]
    5df4:	07d2      	lsls	r2, r2, #31
    5df6:	d503      	bpl.n	5e00 <cardCommand(unsigned long, unsigned long)+0x68>
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5dfe:	d00b      	beq.n	5e18 <cardCommand(unsigned long, unsigned long)+0x80>
    5e00:	2000      	movs	r0, #0
}
    5e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5e06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5e08:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5e0e:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5e10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5e12:	4313      	orrs	r3, r2
    5e14:	64a3      	str	r3, [r4, #72]	; 0x48
    5e16:	e7d5      	b.n	5dc4 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5e18:	2001      	movs	r0, #1
}
    5e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e1e:	bf00      	nop
    5e20:	402c0000 	.word	0x402c0000
    5e24:	000f4240 	.word	0x000f4240
    5e28:	000f0001 	.word	0x000f0001
    5e2c:	20028868 	.word	0x20028868

00005e30 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5e30:	4b15      	ldr	r3, [pc, #84]	; (5e88 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5e32:	b530      	push	{r4, r5, lr}
    5e34:	460d      	mov	r5, r1
    5e36:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5e38:	6819      	ldr	r1, [r3, #0]
    5e3a:	f7ff ffad 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5e3e:	b308      	cbz	r0, 5e84 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5e40:	4b12      	ldr	r3, [pc, #72]	; (5e8c <readReg16(unsigned long, void*)+0x5c>)
    5e42:	f105 040f 	add.w	r4, r5, #15
    5e46:	691a      	ldr	r2, [r3, #16]
    5e48:	9200      	str	r2, [sp, #0]
    5e4a:	6959      	ldr	r1, [r3, #20]
    5e4c:	9101      	str	r1, [sp, #4]
    5e4e:	6999      	ldr	r1, [r3, #24]
    5e50:	9102      	str	r1, [sp, #8]
    5e52:	69db      	ldr	r3, [r3, #28]
    5e54:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5e56:	2300      	movs	r3, #0
    5e58:	e001      	b.n	5e5e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e5a:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5e5e:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5e62:	3301      	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5e68:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5e6c:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    5e6e:	fa22 f20c 	lsr.w	r2, r2, ip
    5e72:	f10e 0110 	add.w	r1, lr, #16
    5e76:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5e7a:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5e7e:	d1ec      	bne.n	5e5a <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5e80:	2300      	movs	r3, #0
    5e82:	73eb      	strb	r3, [r5, #15]
}
    5e84:	b005      	add	sp, #20
    5e86:	bd30      	pop	{r4, r5, pc}
    5e88:	20028178 	.word	0x20028178
    5e8c:	402c0000 	.word	0x402c0000

00005e90 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5e90:	b510      	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    5e92:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5e94:	07db      	lsls	r3, r3, #31
    5e96:	d505      	bpl.n	5ea4 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e98:	4b15      	ldr	r3, [pc, #84]	; (5ef0 <SdioCard::isBusy()+0x60>)
    5e9a:	681b      	ldr	r3, [r3, #0]
    5e9c:	b1b3      	cbz	r3, 5ecc <SdioCard::isBusy()+0x3c>
}
    5e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ea2:	4718      	bx	r3
    if (m_transferActive) {
    5ea4:	4b13      	ldr	r3, [pc, #76]	; (5ef4 <SdioCard::isBusy()+0x64>)
    5ea6:	781b      	ldrb	r3, [r3, #0]
    5ea8:	b93b      	cbnz	r3, 5eba <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5eaa:	4b13      	ldr	r3, [pc, #76]	; (5ef8 <SdioCard::isBusy()+0x68>)
    5eac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5eae:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5eb2:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5eb6:	4620      	mov	r0, r4
    5eb8:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5eba:	4b0f      	ldr	r3, [pc, #60]	; (5ef8 <SdioCard::isBusy()+0x68>)
    5ebc:	4c0f      	ldr	r4, [pc, #60]	; (5efc <SdioCard::isBusy()+0x6c>)
    5ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ec0:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5ec2:	fab4 f484 	clz	r4, r4
    5ec6:	0964      	lsrs	r4, r4, #5
}
    5ec8:	4620      	mov	r0, r4
    5eca:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ecc:	4b0c      	ldr	r3, [pc, #48]	; (5f00 <SdioCard::isBusy()+0x70>)
    5ece:	781c      	ldrb	r4, [r3, #0]
    5ed0:	2c00      	cmp	r4, #0
    5ed2:	d0f0      	beq.n	5eb6 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ed4:	4b0b      	ldr	r3, [pc, #44]	; (5f04 <SdioCard::isBusy()+0x74>)
    5ed6:	480c      	ldr	r0, [pc, #48]	; (5f08 <SdioCard::isBusy()+0x78>)
    5ed8:	6819      	ldr	r1, [r3, #0]
    5eda:	f7ff ff5d 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5ede:	2800      	cmp	r0, #0
    5ee0:	d0e9      	beq.n	5eb6 <SdioCard::isBusy()+0x26>
    5ee2:	4b05      	ldr	r3, [pc, #20]	; (5ef8 <SdioCard::isBusy()+0x68>)
    5ee4:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ee6:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5eea:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5eee:	e7e2      	b.n	5eb6 <SdioCard::isBusy()+0x26>
    5ef0:	20028864 	.word	0x20028864
    5ef4:	2002949d 	.word	0x2002949d
    5ef8:	402c0000 	.word	0x402c0000
    5efc:	117f0002 	.word	0x117f0002
    5f00:	2002949a 	.word	0x2002949a
    5f04:	20028178 	.word	0x20028178
    5f08:	0d1a0000 	.word	0x0d1a0000

00005f0c <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    5f0c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f0e:	4b04      	ldr	r3, [pc, #16]	; (5f20 <SdioCard::status()+0x14>)
    5f10:	4804      	ldr	r0, [pc, #16]	; (5f24 <SdioCard::status()+0x18>)
    5f12:	6819      	ldr	r1, [r3, #0]
    5f14:	f7ff ff40 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5f18:	b108      	cbz	r0, 5f1e <SdioCard::status()+0x12>
    5f1a:	4b03      	ldr	r3, [pc, #12]	; (5f28 <SdioCard::status()+0x1c>)
    5f1c:	6918      	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    5f1e:	bd08      	pop	{r3, pc}
    5f20:	20028178 	.word	0x20028178
    5f24:	0d1a0000 	.word	0x0d1a0000
    5f28:	402c0000 	.word	0x402c0000

00005f2c <isBusyCMD13()>:
static bool isBusyCMD13() {
    5f2c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f2e:	4b07      	ldr	r3, [pc, #28]	; (5f4c <isBusyCMD13()+0x20>)
    5f30:	4807      	ldr	r0, [pc, #28]	; (5f50 <isBusyCMD13()+0x24>)
    5f32:	6819      	ldr	r1, [r3, #0]
    5f34:	f7ff ff30 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5f38:	b130      	cbz	r0, 5f48 <isBusyCMD13()+0x1c>
    5f3a:	4b06      	ldr	r3, [pc, #24]	; (5f54 <isBusyCMD13()+0x28>)
    5f3c:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5f3e:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5f42:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5f46:	bd08      	pop	{r3, pc}
    5f48:	2001      	movs	r0, #1
    5f4a:	bd08      	pop	{r3, pc}
    5f4c:	20028178 	.word	0x20028178
    5f50:	0d1a0000 	.word	0x0d1a0000
    5f54:	402c0000 	.word	0x402c0000

00005f58 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5f5c:	4b29      	ldr	r3, [pc, #164]	; (6004 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5f5e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5f60:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6024 <SdioCard::writeStart(unsigned long)+0xcc>
    5f64:	4e28      	ldr	r6, [pc, #160]	; (6008 <SdioCard::writeStart(unsigned long)+0xb0>)
    5f66:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5f6a:	f002 f81f 	bl	7fac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f6e:	4d27      	ldr	r5, [pc, #156]	; (600c <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5f70:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f72:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6028 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f76:	4f26      	ldr	r7, [pc, #152]	; (6010 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5f78:	e006      	b.n	5f88 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f7a:	f002 f817 	bl	7fac <micros>
    5f7e:	1b00      	subs	r0, r0, r4
    5f80:	42b8      	cmp	r0, r7
    5f82:	d829      	bhi.n	5fd8 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5f84:	f003 fb1c 	bl	95c0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f88:	6831      	ldr	r1, [r6, #0]
    5f8a:	4628      	mov	r0, r5
    5f8c:	f7ff ff04 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5f90:	2800      	cmp	r0, #0
    5f92:	d0f2      	beq.n	5f7a <SdioCard::writeStart(unsigned long)+0x22>
    5f94:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5f98:	05db      	lsls	r3, r3, #23
    5f9a:	d5ee      	bpl.n	5f7a <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5f9c:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5fa2:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5fa6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5fae:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5fb2:	4b18      	ldr	r3, [pc, #96]	; (6014 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5fb4:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5fb8:	781b      	ldrb	r3, [r3, #0]
    5fba:	b1cb      	cbz	r3, 5ff0 <SdioCard::writeStart(unsigned long)+0x98>
    5fbc:	4649      	mov	r1, r9
    5fbe:	4816      	ldr	r0, [pc, #88]	; (6018 <SdioCard::writeStart(unsigned long)+0xc0>)
    5fc0:	f7ff feea 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5fc4:	b930      	cbnz	r0, 5fd4 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5fc6:	4915      	ldr	r1, [pc, #84]	; (601c <SdioCard::writeStart(unsigned long)+0xc4>)
    5fc8:	240e      	movs	r4, #14
  m_errorLine = line;
    5fca:	4b15      	ldr	r3, [pc, #84]	; (6020 <SdioCard::writeStart(unsigned long)+0xc8>)
    5fcc:	f240 427e 	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    5fd0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5fd2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5fd8:	4a10      	ldr	r2, [pc, #64]	; (601c <SdioCard::writeStart(unsigned long)+0xc4>)
    5fda:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5fdc:	2000      	movs	r0, #0
  m_errorLine = line;
    5fde:	4b10      	ldr	r3, [pc, #64]	; (6020 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5fe0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5fe2:	f240 4272 	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    5fe6:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5fea:	601a      	str	r2, [r3, #0]
}
    5fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5ff0:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5ff4:	4808      	ldr	r0, [pc, #32]	; (6018 <SdioCard::writeStart(unsigned long)+0xc0>)
    5ff6:	4649      	mov	r1, r9
    5ff8:	f7ff fece 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    5ffc:	2800      	cmp	r0, #0
    5ffe:	d1e9      	bne.n	5fd4 <SdioCard::writeStart(unsigned long)+0x7c>
    6000:	e7e1      	b.n	5fc6 <SdioCard::writeStart(unsigned long)+0x6e>
    6002:	bf00      	nop
    6004:	00005f2d 	.word	0x00005f2d
    6008:	20028178 	.word	0x20028178
    600c:	0d1a0000 	.word	0x0d1a0000
    6010:	000f4240 	.word	0x000f4240
    6014:	2002949c 	.word	0x2002949c
    6018:	193a0020 	.word	0x193a0020
    601c:	20008bf6 	.word	0x20008bf6
    6020:	20027f48 	.word	0x20027f48
    6024:	20028864 	.word	0x20028864
    6028:	402c0000 	.word	0x402c0000

0000602c <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6030:	468a      	mov	sl, r1
    6032:	4691      	mov	r9, r2
    6034:	4e24      	ldr	r6, [pc, #144]	; (60c8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    6036:	f001 ffb9 	bl	7fac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    603a:	4d24      	ldr	r5, [pc, #144]	; (60cc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    603c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    603e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 60f0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6042:	4f23      	ldr	r7, [pc, #140]	; (60d0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    6044:	e004      	b.n	6050 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6046:	f001 ffb1 	bl	7fac <micros>
    604a:	1b00      	subs	r0, r0, r4
    604c:	42b8      	cmp	r0, r7
    604e:	d825      	bhi.n	609c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6050:	6831      	ldr	r1, [r6, #0]
    6052:	4628      	mov	r0, r5
    6054:	f7ff fea0 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6058:	2800      	cmp	r0, #0
    605a:	d0f4      	beq.n	6046 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    605c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6060:	05db      	lsls	r3, r3, #23
    6062:	d5f0      	bpl.n	6046 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    6064:	4b1b      	ldr	r3, [pc, #108]	; (60d4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    6066:	2201      	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6068:	4651      	mov	r1, sl
    606a:	481b      	ldr	r0, [pc, #108]	; (60d8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    606c:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    606e:	2200      	movs	r2, #0
    6070:	4b1a      	ldr	r3, [pc, #104]	; (60dc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    6072:	601a      	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6074:	4a1a      	ldr	r2, [pc, #104]	; (60e0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6076:	4b1b      	ldr	r3, [pc, #108]	; (60e4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    6078:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    607c:	f8c8 2004 	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6080:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6084:	f7ff fe88 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6088:	b990      	cbnz	r0, 60b0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    608a:	4917      	ldr	r1, [pc, #92]	; (60e8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    608c:	2404      	movs	r4, #4
  m_errorLine = line;
    608e:	4b17      	ldr	r3, [pc, #92]	; (60ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    6090:	f240 321b 	movw	r2, #795	; 0x31b
  m_errorCode = code;
    6094:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6096:	601a      	str	r2, [r3, #0]
}
    6098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    609c:	4912      	ldr	r1, [pc, #72]	; (60e8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    609e:	240a      	movs	r4, #10
  m_errorLine = line;
    60a0:	4b12      	ldr	r3, [pc, #72]	; (60ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    60a2:	f44f 7245 	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    60a6:	2000      	movs	r0, #0
  m_errorCode = code;
    60a8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    60aa:	601a      	str	r2, [r3, #0]
}
    60ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    60b0:	f7ff fda0 	bl	5bf4 <waitDmaStatus()>
    60b4:	2800      	cmp	r0, #0
    60b6:	d1f9      	bne.n	60ac <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    60b8:	490b      	ldr	r1, [pc, #44]	; (60e8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    60ba:	2426      	movs	r4, #38	; 0x26
  m_errorLine = line;
    60bc:	4b0b      	ldr	r3, [pc, #44]	; (60ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    60be:	f240 321e 	movw	r2, #798	; 0x31e
  m_errorCode = code;
    60c2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    60c4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    60c6:	e7f1      	b.n	60ac <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    60c8:	20028178 	.word	0x20028178
    60cc:	0d1a0000 	.word	0x0d1a0000
    60d0:	000f4240 	.word	0x000f4240
    60d4:	2002949e 	.word	0x2002949e
    60d8:	063a0011 	.word	0x063a0011
    60dc:	20028868 	.word	0x20028868
    60e0:	00010040 	.word	0x00010040
    60e4:	117f0002 	.word	0x117f0002
    60e8:	20008bf6 	.word	0x20008bf6
    60ec:	20027f48 	.word	0x20027f48
    60f0:	402c0000 	.word	0x402c0000

000060f4 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    60f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    60f8:	4c25      	ldr	r4, [pc, #148]	; (6190 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    60fa:	2100      	movs	r1, #0
    60fc:	4825      	ldr	r0, [pc, #148]	; (6194 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    60fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6104:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6106:	f7ff fe47 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    610a:	4605      	mov	r5, r0
    610c:	b948      	cbnz	r0, 6122 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    610e:	4922      	ldr	r1, [pc, #136]	; (6198 <SdioCard::readStop()+0xa4>)
    6110:	2009      	movs	r0, #9
  m_errorLine = line;
    6112:	4b22      	ldr	r3, [pc, #136]	; (619c <SdioCard::readStop()+0xa8>)
    6114:	f240 226d 	movw	r2, #621	; 0x26d
  m_errorCode = code;
    6118:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    611a:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    611c:	4628      	mov	r0, r5
    611e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    6122:	4b1f      	ldr	r3, [pc, #124]	; (61a0 <SdioCard::readStop()+0xac>)
    6124:	f8df 8080 	ldr.w	r8, [pc, #128]	; 61a8 <SdioCard::readStop()+0xb4>
    6128:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    612c:	f001 ff3e 	bl	7fac <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6130:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6132:	4606      	mov	r6, r0
  while (fcn()) {
    6134:	01d8      	lsls	r0, r3, #7
    6136:	d418      	bmi.n	616a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6138:	4f1a      	ldr	r7, [pc, #104]	; (61a4 <SdioCard::readStop()+0xb0>)
    613a:	e004      	b.n	6146 <SdioCard::readStop()+0x52>
    yield();
    613c:	f003 fa40 	bl	95c0 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6140:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6142:	01d9      	lsls	r1, r3, #7
    6144:	d411      	bmi.n	616a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6146:	f001 ff31 	bl	7fac <micros>
    614a:	1b83      	subs	r3, r0, r6
    614c:	42bb      	cmp	r3, r7
    614e:	d9f5      	bls.n	613c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    6150:	4a11      	ldr	r2, [pc, #68]	; (6198 <SdioCard::readStop()+0xa4>)
    6152:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6154:	2500      	movs	r5, #0
  m_errorLine = line;
    6156:	4b11      	ldr	r3, [pc, #68]	; (619c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    6158:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    615a:	f44f 721c 	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    615e:	4628      	mov	r0, r5
      m_busyFcn = 0;
    6160:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    6164:	601a      	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    6166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    616a:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    616c:	4b08      	ldr	r3, [pc, #32]	; (6190 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    616e:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6174:	0792      	lsls	r2, r2, #30
    6176:	d5d1      	bpl.n	611c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    6178:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    617a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    617c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    617e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    6182:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    6186:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    6188:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    618a:	629a      	str	r2, [r3, #40]	; 0x28
    618c:	e7c6      	b.n	611c <SdioCard::readStop()+0x28>
    618e:	bf00      	nop
    6190:	402c0000 	.word	0x402c0000
    6194:	0cdb0000 	.word	0x0cdb0000
    6198:	20008bf6 	.word	0x20008bf6
    619c:	20027f48 	.word	0x20027f48
    61a0:	000059c1 	.word	0x000059c1
    61a4:	000f4240 	.word	0x000f4240
    61a8:	20028864 	.word	0x20028864

000061ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    61ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61b0:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    61b2:	f012 0203 	ands.w	r2, r2, #3
                        size_t n) {
    61b6:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    61b8:	bf18      	it	ne
    61ba:	2201      	movne	r2, #1
    61bc:	9301      	str	r3, [sp, #4]
    61be:	2b00      	cmp	r3, #0
    61c0:	bf08      	it	eq
    61c2:	f042 0201 	orreq.w	r2, r2, #1
    61c6:	b152      	cbz	r2, 61de <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    61c8:	492e      	ldr	r1, [pc, #184]	; (6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    61ca:	2026      	movs	r0, #38	; 0x26
  m_errorLine = line;
    61cc:	4b2e      	ldr	r3, [pc, #184]	; (6288 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    61ce:	f240 2223 	movw	r2, #547	; 0x223
  m_errorCode = code;
    61d2:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    61d4:	601a      	str	r2, [r3, #0]
}
    61d6:	2000      	movs	r0, #0
    61d8:	b003      	add	sp, #12
    61da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    61de:	4b2b      	ldr	r3, [pc, #172]	; (628c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    61e0:	4606      	mov	r6, r0
    61e2:	4a2b      	ldr	r2, [pc, #172]	; (6290 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    61e4:	460d      	mov	r5, r1
    61e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 62a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    61ea:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    61ec:	f001 fede 	bl	7fac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 62ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    61f4:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61f6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 62b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    61fa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 62b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    61fe:	e006      	b.n	620e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6200:	f001 fed4 	bl	7fac <micros>
    6204:	1bc0      	subs	r0, r0, r7
    6206:	4550      	cmp	r0, sl
    6208:	d82f      	bhi.n	626a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    620a:	f003 f9d9 	bl	95c0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    620e:	f8d9 1000 	ldr.w	r1, [r9]
    6212:	4640      	mov	r0, r8
    6214:	f7ff fdc0 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6218:	2800      	cmp	r0, #0
    621a:	d0f1      	beq.n	6200 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    621c:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6220:	05db      	lsls	r3, r3, #23
    6222:	d5ed      	bpl.n	6200 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6224:	9a01      	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    6226:	2001      	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6228:	4b1a      	ldr	r3, [pc, #104]	; (6294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    622a:	4919      	ldr	r1, [pc, #100]	; (6290 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    622c:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    6230:	2200      	movs	r2, #0
    6232:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    6238:	4917      	ldr	r1, [pc, #92]	; (6298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    623a:	7008      	strb	r0, [r1, #0]
  m_irqstat = 0;
    623c:	4917      	ldr	r1, [pc, #92]	; (629c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    623e:	600a      	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    6240:	f8cb 4000 	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6244:	f8cb 3004 	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6248:	4b15      	ldr	r3, [pc, #84]	; (62a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    624a:	4a16      	ldr	r2, [pc, #88]	; (62a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    624c:	781b      	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    624e:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6252:	b1ab      	cbz	r3, 6280 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    6254:	4629      	mov	r1, r5
    6256:	4630      	mov	r0, r6
    6258:	f7ff fd9e 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    625c:	2800      	cmp	r0, #0
    625e:	d0ba      	beq.n	61d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    6260:	b003      	add	sp, #12
    6262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    6266:	f7ff bcc5 	b.w	5bf4 <waitDmaStatus()>
  m_errorCode = code;
    626a:	4a06      	ldr	r2, [pc, #24]	; (6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    626c:	210a      	movs	r1, #10
      m_busyFcn = 0;
    626e:	2000      	movs	r0, #0
  m_errorLine = line;
    6270:	4b05      	ldr	r3, [pc, #20]	; (6288 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    6272:	4c07      	ldr	r4, [pc, #28]	; (6290 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    6274:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6276:	f240 2226 	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    627a:	6020      	str	r0, [r4, #0]
  m_errorLine = line;
    627c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    627e:	e7aa      	b.n	61d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6280:	026d      	lsls	r5, r5, #9
    6282:	e7e7      	b.n	6254 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    6284:	20008bf6 	.word	0x20008bf6
    6288:	20027f48 	.word	0x20027f48
    628c:	00005f2d 	.word	0x00005f2d
    6290:	20028864 	.word	0x20028864
    6294:	1fff0000 	.word	0x1fff0000
    6298:	2002949e 	.word	0x2002949e
    629c:	20028868 	.word	0x20028868
    62a0:	2002949c 	.word	0x2002949c
    62a4:	117f0002 	.word	0x117f0002
    62a8:	20028178 	.word	0x20028178
    62ac:	0d1a0000 	.word	0x0d1a0000
    62b0:	402c0000 	.word	0x402c0000
    62b4:	000f4240 	.word	0x000f4240

000062b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    62b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62ba:	4606      	mov	r6, r0
    62bc:	7a00      	ldrb	r0, [r0, #8]
    62be:	460c      	mov	r4, r1
    62c0:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    62c2:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    62c4:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    62c6:	d413      	bmi.n	62f0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    62c8:	b183      	cbz	r3, 62ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    62ca:	440f      	add	r7, r1
    62cc:	e001      	b.n	62d2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    62ce:	42bc      	cmp	r4, r7
    62d0:	d00c      	beq.n	62ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    62d2:	6833      	ldr	r3, [r6, #0]
    62d4:	462a      	mov	r2, r5
    62d6:	4621      	mov	r1, r4
    62d8:	4630      	mov	r0, r6
    62da:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    62dc:	3401      	adds	r4, #1
    62de:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    62e2:	4798      	blx	r3
    62e4:	2800      	cmp	r0, #0
    62e6:	d1f2      	bne.n	62ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    62e8:	2000      	movs	r0, #0
}
    62ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    62ec:	2001      	movs	r0, #1
}
    62ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    62f0:	0790      	lsls	r0, r2, #30
    62f2:	d012      	beq.n	631a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    62f4:	2b00      	cmp	r3, #0
    62f6:	d0f9      	beq.n	62ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    62f8:	440f      	add	r7, r1
    62fa:	e001      	b.n	6300 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    62fc:	42bc      	cmp	r4, r7
    62fe:	d0f5      	beq.n	62ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    6300:	6833      	ldr	r3, [r6, #0]
    6302:	462a      	mov	r2, r5
    6304:	4621      	mov	r1, r4
    6306:	4630      	mov	r0, r6
    6308:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    630a:	3401      	adds	r4, #1
    630c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    6310:	4798      	blx	r3
    6312:	2800      	cmp	r0, #0
    6314:	d1f2      	bne.n	62fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    6316:	2000      	movs	r0, #0
    6318:	e7e7      	b.n	62ea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    631a:	4806      	ldr	r0, [pc, #24]	; (6334 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    631c:	f7ff ff46 	bl	61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6320:	2800      	cmp	r0, #0
    6322:	d1e3      	bne.n	62ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6324:	4904      	ldr	r1, [pc, #16]	; (6338 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    6326:	240c      	movs	r4, #12
  m_errorLine = line;
    6328:	4b04      	ldr	r3, [pc, #16]	; (633c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    632a:	f240 32ce 	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    632e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6330:	601a      	str	r2, [r3, #0]
}
    6332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6334:	123a0037 	.word	0x123a0037
    6338:	20008bf6 	.word	0x20008bf6
    633c:	20027f48 	.word	0x20027f48

00006340 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6342:	4606      	mov	r6, r0
    6344:	7a00      	ldrb	r0, [r0, #8]
    6346:	460c      	mov	r4, r1
    6348:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    634a:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    634c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    634e:	d413      	bmi.n	6378 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6350:	b183      	cbz	r3, 6374 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6352:	440f      	add	r7, r1
    6354:	e001      	b.n	635a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    6356:	42bc      	cmp	r4, r7
    6358:	d00c      	beq.n	6374 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    635a:	6833      	ldr	r3, [r6, #0]
    635c:	462a      	mov	r2, r5
    635e:	4621      	mov	r1, r4
    6360:	4630      	mov	r0, r6
    6362:	6a1b      	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    6364:	3401      	adds	r4, #1
    6366:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    636a:	4798      	blx	r3
    636c:	2800      	cmp	r0, #0
    636e:	d1f2      	bne.n	6356 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    6370:	2000      	movs	r0, #0
}
    6372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6374:	2001      	movs	r0, #1
}
    6376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    6378:	0790      	lsls	r0, r2, #30
    637a:	d012      	beq.n	63a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    637c:	2b00      	cmp	r3, #0
    637e:	d0f9      	beq.n	6374 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6380:	440f      	add	r7, r1
    6382:	e001      	b.n	6388 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    6384:	42bc      	cmp	r4, r7
    6386:	d0f5      	beq.n	6374 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    6388:	6833      	ldr	r3, [r6, #0]
    638a:	462a      	mov	r2, r5
    638c:	4621      	mov	r1, r4
    638e:	4630      	mov	r0, r6
    6390:	6a1b      	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6392:	3401      	adds	r4, #1
    6394:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    6398:	4798      	blx	r3
    639a:	2800      	cmp	r0, #0
    639c:	d1f2      	bne.n	6384 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    639e:	2000      	movs	r0, #0
    63a0:	e7e7      	b.n	6372 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    63a2:	4806      	ldr	r0, [pc, #24]	; (63bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    63a4:	f7ff ff02 	bl	61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    63a8:	2800      	cmp	r0, #0
    63aa:	d1e3      	bne.n	6374 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    63ac:	4904      	ldr	r1, [pc, #16]	; (63c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    63ae:	240e      	movs	r4, #14
  m_errorLine = line;
    63b0:	4b04      	ldr	r3, [pc, #16]	; (63c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    63b2:	f240 4264 	movw	r2, #1124	; 0x464
  m_errorCode = code;
    63b6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    63b8:	601a      	str	r2, [r3, #0]
}
    63ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63bc:	193a0027 	.word	0x193a0027
    63c0:	20008bf6 	.word	0x20008bf6
    63c4:	20027f48 	.word	0x20027f48

000063c8 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    63c8:	2200      	movs	r2, #0
  m_initDone = false;
    63ca:	4bb1      	ldr	r3, [pc, #708]	; (6690 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    63cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    63d0:	701a      	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    63d2:	4606      	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63d4:	4baf      	ldr	r3, [pc, #700]	; (6694 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    63d6:	b093      	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    63d8:	4caf      	ldr	r4, [pc, #700]	; (6698 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    63da:	f8df a314 	ldr.w	sl, [pc, #788]	; 66f0 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    63de:	4faf      	ldr	r7, [pc, #700]	; (669c <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    63e0:	7022      	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    63e2:	7242      	strb	r2, [r0, #9]
  m_highCapacity = false;
    63e4:	f88a 2000 	strb.w	r2, [sl]
  m_version2 = false;
    63e8:	703a      	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    63ee:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    63f0:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    63f6:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 66b8 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    63fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    63fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6402:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    6406:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    640a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    640e:	f042 0218 	orr.w	r2, r2, #24
    6412:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6416:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    641a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    641e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6422:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6426:	4a9e      	ldr	r2, [pc, #632]	; (66a0 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6428:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    642c:	f040 000c 	orr.w	r0, r0, #12
    6430:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6434:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6436:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    643a:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    643c:	69d8      	ldr	r0, [r3, #28]
    643e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    6442:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6444:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6446:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    644a:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    644c:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6450:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6454:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6458:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    645c:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6460:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    6464:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6468:	4b8e      	ldr	r3, [pc, #568]	; (66a4 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    646a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    646e:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6472:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    6476:	4313      	orrs	r3, r2
    6478:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    647c:	f8d8 502c 	ldr.w	r5, [r8, #44]	; 0x2c
    6480:	f015 7580 	ands.w	r5, r5, #16777216	; 0x1000000
    6484:	d1fa      	bne.n	647c <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    6486:	f44f 70c8 	mov.w	r0, #400	; 0x190
    648a:	f7ff faa9 	bl	59e0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    648e:	4b84      	ldr	r3, [pc, #528]	; (66a0 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6490:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6494:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6498:	f8c3 51cc 	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    649c:	f8c3 51d0 	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    64a0:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    64a4:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    64a8:	f8c3 51c4 	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    64ac:	f8c3 51c8 	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    64b0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    64b4:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    64b8:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    64bc:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    64c0:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    64c4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    64c8:	4b77      	ldr	r3, [pc, #476]	; (66a8 <SdioCard::begin(SdioConfig)+0x2e0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    64ca:	4a78      	ldr	r2, [pc, #480]	; (66ac <SdioCard::begin(SdioConfig)+0x2e4>)
    64cc:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
    64d0:	4b77      	ldr	r3, [pc, #476]	; (66b0 <SdioCard::begin(SdioConfig)+0x2e8>)
    64d2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    64d6:	4b77      	ldr	r3, [pc, #476]	; (66b4 <SdioCard::begin(SdioConfig)+0x2ec>)
    64d8:	2260      	movs	r2, #96	; 0x60
    64da:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    64de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    64e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    64e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    64ea:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    64ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    64f2:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    64f6:	4b70      	ldr	r3, [pc, #448]	; (66b8 <SdioCard::begin(SdioConfig)+0x2f0>)
    64f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    64fa:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    64fe:	d1fb      	bne.n	64f8 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    6500:	4608      	mov	r0, r1
    6502:	f7ff fc49 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6506:	4683      	mov	fp, r0
    6508:	b948      	cbnz	r0, 651e <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    650a:	2101      	movs	r1, #1
  m_errorLine = line;
    650c:	4b6b      	ldr	r3, [pc, #428]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    650e:	f240 22be 	movw	r2, #702	; 0x2be
  m_errorCode = code;
    6512:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6514:	601a      	str	r2, [r3, #0]
}
    6516:	4658      	mov	r0, fp
    6518:	b013      	add	sp, #76	; 0x4c
    651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    651e:	f04f 0803 	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6522:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 66f4 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6526:	4d64      	ldr	r5, [pc, #400]	; (66b8 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6528:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    652c:	4648      	mov	r0, r9
    652e:	f7ff fc33 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6532:	2800      	cmp	r0, #0
    6534:	d14e      	bne.n	65d4 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6536:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    653c:	62eb      	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    653e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6540:	01db      	lsls	r3, r3, #7
    6542:	d4fc      	bmi.n	653e <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6544:	f1b8 0801 	subs.w	r8, r8, #1
    6548:	d1ee      	bne.n	6528 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    654a:	783b      	ldrb	r3, [r7, #0]
    654c:	2b00      	cmp	r3, #0
    654e:	4b5c      	ldr	r3, [pc, #368]	; (66c0 <SdioCard::begin(SdioConfig)+0x2f8>)
    6550:	bf0c      	ite	eq
    6552:	f44f 1940 	moveq.w	r9, #3145728	; 0x300000
    6556:	4699      	movne	r9, r3
  int m = micros();
    6558:	f001 fd28 	bl	7fac <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    655c:	4f59      	ldr	r7, [pc, #356]	; (66c4 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    655e:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6560:	f8df b194 	ldr.w	fp, [pc, #404]	; 66f8 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6564:	f8df 8194 	ldr.w	r8, [pc, #404]	; 66fc <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6568:	2100      	movs	r1, #0
    656a:	4638      	mov	r0, r7
    656c:	f7ff fc14 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6570:	b958      	cbnz	r0, 658a <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    6572:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6576:	2117      	movs	r1, #23
  m_errorLine = line;
    6578:	4b50      	ldr	r3, [pc, #320]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    657a:	f240 22d3 	movw	r2, #723	; 0x2d3
}
    657e:	4658      	mov	r0, fp
  m_errorCode = code;
    6580:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6582:	601a      	str	r2, [r3, #0]
}
    6584:	b013      	add	sp, #76	; 0x4c
    6586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    658a:	4649      	mov	r1, r9
    658c:	4658      	mov	r0, fp
    658e:	f7ff fc03 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6592:	2800      	cmp	r0, #0
    6594:	d0ed      	beq.n	6572 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6596:	f001 fd09 	bl	7fac <micros>
    659a:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    659c:	4b46      	ldr	r3, [pc, #280]	; (66b8 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    659e:	4540      	cmp	r0, r8
    65a0:	d8e7      	bhi.n	6572 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    65a2:	691a      	ldr	r2, [r3, #16]
    65a4:	2a00      	cmp	r2, #0
    65a6:	dadf      	bge.n	6568 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    65a8:	6919      	ldr	r1, [r3, #16]
    65aa:	4a47      	ldr	r2, [pc, #284]	; (66c8 <SdioCard::begin(SdioConfig)+0x300>)
    65ac:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    65ae:	691b      	ldr	r3, [r3, #16]
    65b0:	005d      	lsls	r5, r3, #1
    65b2:	d502      	bpl.n	65ba <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    65b4:	2301      	movs	r3, #1
    65b6:	f88a 3000 	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    65ba:	2100      	movs	r1, #0
    65bc:	4843      	ldr	r0, [pc, #268]	; (66cc <SdioCard::begin(SdioConfig)+0x304>)
    65be:	f7ff fbeb 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    65c2:	4683      	mov	fp, r0
    65c4:	b9c8      	cbnz	r0, 65fa <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    65c6:	2102      	movs	r1, #2
  m_errorLine = line;
    65c8:	4b3c      	ldr	r3, [pc, #240]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    65ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    65ce:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65d0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    65d2:	e7a0      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    65d4:	4b38      	ldr	r3, [pc, #224]	; (66b8 <SdioCard::begin(SdioConfig)+0x2f0>)
    65d6:	691b      	ldr	r3, [r3, #16]
    65d8:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    65dc:	d008      	beq.n	65f0 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    65de:	2106      	movs	r1, #6
  m_errorLine = line;
    65e0:	4b36      	ldr	r3, [pc, #216]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    65e2:	f44f 7231 	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    65e6:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    65ea:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65ec:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    65ee:	e792      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    65f0:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    65f2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 66c0 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    65f6:	703b      	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    65f8:	e7ae      	b.n	6558 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    65fa:	2100      	movs	r1, #0
    65fc:	4834      	ldr	r0, [pc, #208]	; (66d0 <SdioCard::begin(SdioConfig)+0x308>)
    65fe:	f7ff fbcb 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6602:	4683      	mov	fp, r0
    6604:	b930      	cbnz	r0, 6614 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    6606:	2103      	movs	r1, #3
  m_errorLine = line;
    6608:	4b2c      	ldr	r3, [pc, #176]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    660a:	f240 22df 	movw	r2, #735	; 0x2df
  m_errorCode = code;
    660e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6610:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    6612:	e780      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6614:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 66b8 <SdioCard::begin(SdioConfig)+0x2f0>
    6618:	4b2e      	ldr	r3, [pc, #184]	; (66d4 <SdioCard::begin(SdioConfig)+0x30c>)
    661a:	f8da 2010 	ldr.w	r2, [sl, #16]
    661e:	4d2e      	ldr	r5, [pc, #184]	; (66d8 <SdioCard::begin(SdioConfig)+0x310>)
    6620:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6622:	492e      	ldr	r1, [pc, #184]	; (66dc <SdioCard::begin(SdioConfig)+0x314>)
    6624:	482e      	ldr	r0, [pc, #184]	; (66e0 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6626:	602b      	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6628:	f7ff fc02 	bl	5e30 <readReg16(unsigned long, void*)>
    662c:	4683      	mov	fp, r0
    662e:	b930      	cbnz	r0, 663e <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    6630:	2107      	movs	r1, #7
  m_errorLine = line;
    6632:	4b22      	ldr	r3, [pc, #136]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    6634:	f44f 7239 	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    6638:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    663a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    663c:	e76b      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    663e:	4929      	ldr	r1, [pc, #164]	; (66e4 <SdioCard::begin(SdioConfig)+0x31c>)
    6640:	4829      	ldr	r0, [pc, #164]	; (66e8 <SdioCard::begin(SdioConfig)+0x320>)
    6642:	f7ff fbf5 	bl	5e30 <readReg16(unsigned long, void*)>
    6646:	4683      	mov	fp, r0
    6648:	b930      	cbnz	r0, 6658 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    664a:	2108      	movs	r1, #8
  m_errorLine = line;
    664c:	4b1b      	ldr	r3, [pc, #108]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    664e:	f240 22e7 	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    6652:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6654:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    6656:	e75e      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6658:	6829      	ldr	r1, [r5, #0]
    665a:	4824      	ldr	r0, [pc, #144]	; (66ec <SdioCard::begin(SdioConfig)+0x324>)
    665c:	f7ff fb9c 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6660:	4683      	mov	fp, r0
    6662:	b930      	cbnz	r0, 6672 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    6664:	2105      	movs	r1, #5
  m_errorLine = line;
    6666:	4b15      	ldr	r3, [pc, #84]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    6668:	f240 22ea 	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    666c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    666e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    6670:	e751      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6672:	6829      	ldr	r1, [r5, #0]
    6674:	4813      	ldr	r0, [pc, #76]	; (66c4 <SdioCard::begin(SdioConfig)+0x2fc>)
    6676:	f7ff fb8f 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    667a:	2800      	cmp	r0, #0
    667c:	d140      	bne.n	6700 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    667e:	2114      	movs	r1, #20
  m_errorLine = line;
    6680:	4b0e      	ldr	r3, [pc, #56]	; (66bc <SdioCard::begin(SdioConfig)+0x2f4>)
    6682:	f240 22ee 	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    6686:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    668a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    668c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    668e:	e742      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
    6690:	2002949a 	.word	0x2002949a
    6694:	400d8000 	.word	0x400d8000
    6698:	20008bf6 	.word	0x20008bf6
    669c:	2002949b 	.word	0x2002949b
    66a0:	401f8000 	.word	0x401f8000
    66a4:	01008000 	.word	0x01008000
    66a8:	117f000b 	.word	0x117f000b
    66ac:	00005991 	.word	0x00005991
    66b0:	20008c00 	.word	0x20008c00
    66b4:	e000e400 	.word	0xe000e400
    66b8:	402c0000 	.word	0x402c0000
    66bc:	20027f48 	.word	0x20027f48
    66c0:	40300000 	.word	0x40300000
    66c4:	371a0000 	.word	0x371a0000
    66c8:	20028174 	.word	0x20028174
    66cc:	02090000 	.word	0x02090000
    66d0:	031a0000 	.word	0x031a0000
    66d4:	ffff0000 	.word	0xffff0000
    66d8:	20028178 	.word	0x20028178
    66dc:	20028164 	.word	0x20028164
    66e0:	09090000 	.word	0x09090000
    66e4:	20028154 	.word	0x20028154
    66e8:	0a090000 	.word	0x0a090000
    66ec:	071b0000 	.word	0x071b0000
    66f0:	2002949c 	.word	0x2002949c
    66f4:	081a0000 	.word	0x081a0000
    66f8:	29020000 	.word	0x29020000
    66fc:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6700:	2102      	movs	r1, #2
    6702:	4886      	ldr	r0, [pc, #536]	; (691c <SdioCard::begin(SdioConfig)+0x554>)
    6704:	f7ff fb48 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6708:	2800      	cmp	r0, #0
    670a:	d0b8      	beq.n	667e <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    670c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6710:	f8df 9240 	ldr.w	r9, [pc, #576]	; 6954 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6714:	f023 0306 	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6718:	f8df 821c 	ldr.w	r8, [pc, #540]	; 6938 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    671c:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6720:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    6724:	f043 0302 	orr.w	r3, r3, #2
    6728:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    672c:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    6730:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    6734:	f001 fc3a 	bl	7fac <micros>
    6738:	4607      	mov	r7, r0
  while (fcn()) {
    673a:	e004      	b.n	6746 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    673c:	f001 fc36 	bl	7fac <micros>
    6740:	1bc0      	subs	r0, r0, r7
    6742:	4540      	cmp	r0, r8
    6744:	d82b      	bhi.n	679e <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6746:	6829      	ldr	r1, [r5, #0]
    6748:	4648      	mov	r0, r9
    674a:	f7ff fb25 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    674e:	2800      	cmp	r0, #0
    6750:	d0f4      	beq.n	673c <SdioCard::begin(SdioConfig)+0x374>
    6752:	f8da 3010 	ldr.w	r3, [sl, #16]
  while (fcn()) {
    6756:	05d8      	lsls	r0, r3, #23
    6758:	d5f0      	bpl.n	673c <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    675a:	2301      	movs	r3, #1
    675c:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 6958 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    6760:	4f6f      	ldr	r7, [pc, #444]	; (6920 <SdioCard::begin(SdioConfig)+0x558>)
    6762:	f04f 0b00 	mov.w	fp, #0
  m_dmaBusy = true;
    6766:	f888 3000 	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    676a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 695c <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    676e:	4b6d      	ldr	r3, [pc, #436]	; (6924 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    6770:	f8c7 b000 	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6774:	f8ca 9000 	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    6778:	f8ca 3004 	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    677c:	4b6a      	ldr	r3, [pc, #424]	; (6928 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    677e:	486b      	ldr	r0, [pc, #428]	; (692c <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6780:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6784:	6829      	ldr	r1, [r5, #0]
    6786:	f7ff fb07 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    678a:	b988      	cbnz	r0, 67b0 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    678c:	2118      	movs	r1, #24
  m_errorLine = line;
    678e:	4b68      	ldr	r3, [pc, #416]	; (6930 <SdioCard::begin(SdioConfig)+0x568>)
    6790:	f240 12d7 	movw	r2, #471	; 0x1d7
    return false;
    6794:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    6798:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    679a:	601a      	str	r2, [r3, #0]
  return false;
    679c:	e6bb      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    679e:	210a      	movs	r1, #10
  m_errorLine = line;
    67a0:	4b63      	ldr	r3, [pc, #396]	; (6930 <SdioCard::begin(SdioConfig)+0x568>)
    67a2:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    return false;
    67a6:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    67aa:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67ac:	601a      	str	r2, [r3, #0]
  return false;
    67ae:	e6b2      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    67b0:	4659      	mov	r1, fp
    67b2:	4860      	ldr	r0, [pc, #384]	; (6934 <SdioCard::begin(SdioConfig)+0x56c>)
    67b4:	f7ff faf0 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    67b8:	2800      	cmp	r0, #0
    67ba:	d0e7      	beq.n	678c <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    67bc:	f7ff fa1a 	bl	5bf4 <waitDmaStatus()>
    67c0:	4683      	mov	fp, r0
    67c2:	b930      	cbnz	r0, 67d2 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    67c4:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    67c6:	4b5a      	ldr	r3, [pc, #360]	; (6930 <SdioCard::begin(SdioConfig)+0x568>)
    67c8:	f44f 72ed 	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    67cc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    67ce:	601a      	str	r2, [r3, #0]
  return false;
    67d0:	e6a1      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    67d2:	f001 fbeb 	bl	7fac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    67d6:	f8df a17c 	ldr.w	sl, [pc, #380]	; 6954 <SdioCard::begin(SdioConfig)+0x58c>
    67da:	f8df b184 	ldr.w	fp, [pc, #388]	; 6960 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    67de:	9001      	str	r0, [sp, #4]
  while (fcn()) {
    67e0:	e006      	b.n	67f0 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67e2:	f001 fbe3 	bl	7fac <micros>
    67e6:	9b01      	ldr	r3, [sp, #4]
    67e8:	1ac0      	subs	r0, r0, r3
    67ea:	4b53      	ldr	r3, [pc, #332]	; (6938 <SdioCard::begin(SdioConfig)+0x570>)
    67ec:	4298      	cmp	r0, r3
    67ee:	d827      	bhi.n	6840 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    67f0:	6829      	ldr	r1, [r5, #0]
    67f2:	4650      	mov	r0, sl
    67f4:	f7ff fad0 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    67f8:	2800      	cmp	r0, #0
    67fa:	d0f2      	beq.n	67e2 <SdioCard::begin(SdioConfig)+0x41a>
    67fc:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    6800:	05d9      	lsls	r1, r3, #23
    6802:	d5ee      	bpl.n	67e2 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    6804:	2201      	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6806:	4849      	ldr	r0, [pc, #292]	; (692c <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    6808:	f888 2000 	strb.w	r2, [r8]
  m_irqstat = 0;
    680c:	f04f 0800 	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    6810:	4a4a      	ldr	r2, [pc, #296]	; (693c <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    6812:	f8c7 8000 	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    6816:	f8cb 2000 	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    681a:	4a49      	ldr	r2, [pc, #292]	; (6940 <SdioCard::begin(SdioConfig)+0x578>)
    681c:	f8cb 2004 	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6820:	4a41      	ldr	r2, [pc, #260]	; (6928 <SdioCard::begin(SdioConfig)+0x560>)
    6822:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6826:	6829      	ldr	r1, [r5, #0]
    6828:	f7ff fab6 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    682c:	b988      	cbnz	r0, 6852 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    682e:	2115      	movs	r1, #21
  m_errorLine = line;
    6830:	4b3f      	ldr	r3, [pc, #252]	; (6930 <SdioCard::begin(SdioConfig)+0x568>)
    6832:	f240 12c5 	movw	r2, #453	; 0x1c5
    return false;
    6836:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    683a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    683c:	601a      	str	r2, [r3, #0]
  return false;
    683e:	e66a      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    6840:	210a      	movs	r1, #10
  m_errorLine = line;
    6842:	4b3b      	ldr	r3, [pc, #236]	; (6930 <SdioCard::begin(SdioConfig)+0x568>)
    6844:	f44f 72df 	mov.w	r2, #446	; 0x1be
    return false;
    6848:	f04f 0b00 	mov.w	fp, #0
  m_errorCode = code;
    684c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    684e:	601a      	str	r2, [r3, #0]
  return false;
    6850:	e661      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6852:	4641      	mov	r1, r8
    6854:	483b      	ldr	r0, [pc, #236]	; (6944 <SdioCard::begin(SdioConfig)+0x57c>)
    6856:	f7ff fa9f 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    685a:	2800      	cmp	r0, #0
    685c:	d0e7      	beq.n	682e <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    685e:	f7ff f9c9 	bl	5bf4 <waitDmaStatus()>
    6862:	4683      	mov	fp, r0
    6864:	b930      	cbnz	r0, 6874 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    6866:	2126      	movs	r1, #38	; 0x26
  m_errorLine = line;
    6868:	4b31      	ldr	r3, [pc, #196]	; (6930 <SdioCard::begin(SdioConfig)+0x568>)
    686a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    686e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6870:	601a      	str	r2, [r3, #0]
  return false;
    6872:	e650      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    6874:	f899 3000 	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6878:	071a      	lsls	r2, r3, #28
    687a:	d018      	beq.n	68ae <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    687c:	6833      	ldr	r3, [r6, #0]
    687e:	aa02      	add	r2, sp, #8
    6880:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    6884:	4630      	mov	r0, r6
    6886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6888:	4798      	blx	r3
    688a:	b180      	cbz	r0, 68ae <SdioCard::begin(SdioConfig)+0x4e6>
    688c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6890:	079b      	lsls	r3, r3, #30
    6892:	d50c      	bpl.n	68ae <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6894:	6833      	ldr	r3, [r6, #0]
    6896:	aa02      	add	r2, sp, #8
    6898:	4630      	mov	r0, r6
    689a:	492b      	ldr	r1, [pc, #172]	; (6948 <SdioCard::begin(SdioConfig)+0x580>)
    689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    689e:	4798      	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    68a0:	b128      	cbz	r0, 68ae <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    68a2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    68a6:	f003 030f 	and.w	r3, r3, #15
    68aa:	2b01      	cmp	r3, #1
    68ac:	d032      	beq.n	6914 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    68ae:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    68b2:	4c26      	ldr	r4, [pc, #152]	; (694c <SdioCard::begin(SdioConfig)+0x584>)
    68b4:	2305      	movs	r3, #5
    68b6:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    68ba:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    68be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    68c2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    68c6:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    68ca:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    68ce:	f7ff f887 	bl	59e0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    68d2:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    68d4:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    68d8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    68dc:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    68e0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    68e4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    68e8:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    68ec:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    68f0:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    68f4:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    68f8:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    68fc:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6900:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    6904:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6906:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    690a:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    690e:	4a10      	ldr	r2, [pc, #64]	; (6950 <SdioCard::begin(SdioConfig)+0x588>)
    6910:	7013      	strb	r3, [r2, #0]
  return true;
    6912:	e600      	b.n	6516 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    6914:	f24c 3050 	movw	r0, #50000	; 0xc350
    6918:	e7cb      	b.n	68b2 <SdioCard::begin(SdioConfig)+0x4ea>
    691a:	bf00      	nop
    691c:	061a0000 	.word	0x061a0000
    6920:	20028868 	.word	0x20028868
    6924:	00010008 	.word	0x00010008
    6928:	117f0002 	.word	0x117f0002
    692c:	371a0000 	.word	0x371a0000
    6930:	20027f48 	.word	0x20027f48
    6934:	333a0011 	.word	0x333a0011
    6938:	000f4240 	.word	0x000f4240
    693c:	20028184 	.word	0x20028184
    6940:	00010040 	.word	0x00010040
    6944:	0d3a0011 	.word	0x0d3a0011
    6948:	80fffff1 	.word	0x80fffff1
    694c:	401f8000 	.word	0x401f8000
    6950:	2002949a 	.word	0x2002949a
    6954:	0d1a0000 	.word	0x0d1a0000
    6958:	2002949e 	.word	0x2002949e
    695c:	2002817c 	.word	0x2002817c
    6960:	402c0000 	.word	0x402c0000

00006964 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6964:	4b37      	ldr	r3, [pc, #220]	; (6a44 <SdioCard::readData(unsigned char*)+0xe0>)
    6966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6968:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    696a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    696e:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6970:	d40d      	bmi.n	698e <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6974:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    6978:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    697a:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    697c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    697e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    6982:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6986:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    698a:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    698c:	b662      	cpsie	i
  uint32_t m = micros();
    698e:	f001 fb0d 	bl	7fac <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    6992:	4e2c      	ldr	r6, [pc, #176]	; (6a44 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6994:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6a5c <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    6998:	4605      	mov	r5, r0
  while (fcn()) {
    699a:	e004      	b.n	69a6 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    699c:	f001 fb06 	bl	7fac <micros>
    69a0:	1b43      	subs	r3, r0, r5
    69a2:	4543      	cmp	r3, r8
    69a4:	d837      	bhi.n	6a16 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    69a6:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    69a8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    69ac:	d0f6      	beq.n	699c <SdioCard::readData(unsigned char*)+0x38>
    69ae:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    69b2:	4824      	ldr	r0, [pc, #144]	; (6a44 <SdioCard::readData(unsigned char*)+0xe0>)
    69b4:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    69b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    69ba:	051b      	lsls	r3, r3, #20
    69bc:	d5fc      	bpl.n	69b8 <SdioCard::readData(unsigned char*)+0x54>
    69be:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    69c2:	6a02      	ldr	r2, [r0, #32]
    69c4:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    69c8:	459c      	cmp	ip, r3
    69ca:	d1fa      	bne.n	69c2 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    69cc:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    69d0:	4567      	cmp	r7, ip
    69d2:	d1f1      	bne.n	69b8 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    69d4:	f001 faea 	bl	7fac <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    69d8:	4f1a      	ldr	r7, [pc, #104]	; (6a44 <SdioCard::readData(unsigned char*)+0xe0>)
    69da:	4d1b      	ldr	r5, [pc, #108]	; (6a48 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    69dc:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69de:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6a5c <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    69e2:	e004      	b.n	69ee <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69e4:	f001 fae2 	bl	7fac <micros>
    69e8:	1b83      	subs	r3, r0, r6
    69ea:	4543      	cmp	r3, r8
    69ec:	d81d      	bhi.n	6a2a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    69ee:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    69f0:	402c      	ands	r4, r5
    69f2:	d0f7      	beq.n	69e4 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    69f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    69f6:	4a15      	ldr	r2, [pc, #84]	; (6a4c <SdioCard::readData(unsigned char*)+0xe8>)
    69f8:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    69fa:	6813      	ldr	r3, [r2, #0]
    69fc:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    69fe:	6813      	ldr	r3, [r2, #0]
    6a00:	f013 0302 	ands.w	r3, r3, #2
    6a04:	d01b      	beq.n	6a3e <SdioCard::readData(unsigned char*)+0xda>
    6a06:	6812      	ldr	r2, [r2, #0]
    6a08:	4b11      	ldr	r3, [pc, #68]	; (6a50 <SdioCard::readData(unsigned char*)+0xec>)
    6a0a:	421a      	tst	r2, r3
    6a0c:	bf0c      	ite	eq
    6a0e:	2001      	moveq	r0, #1
    6a10:	2000      	movne	r0, #0
}
    6a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6a16:	490f      	ldr	r1, [pc, #60]	; (6a54 <SdioCard::readData(unsigned char*)+0xf0>)
    6a18:	251b      	movs	r5, #27
  m_errorLine = line;
    6a1a:	4b0f      	ldr	r3, [pc, #60]	; (6a58 <SdioCard::readData(unsigned char*)+0xf4>)
    6a1c:	f240 3279 	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    6a20:	4620      	mov	r0, r4
  m_errorCode = code;
    6a22:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6a24:	601a      	str	r2, [r3, #0]
}
    6a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6a2a:	490a      	ldr	r1, [pc, #40]	; (6a54 <SdioCard::readData(unsigned char*)+0xf0>)
    6a2c:	251e      	movs	r5, #30
  m_errorLine = line;
    6a2e:	4b0a      	ldr	r3, [pc, #40]	; (6a58 <SdioCard::readData(unsigned char*)+0xf4>)
    6a30:	f44f 7261 	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    6a34:	4620      	mov	r0, r4
  m_errorCode = code;
    6a36:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6a38:	601a      	str	r2, [r3, #0]
}
    6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6a3e:	4618      	mov	r0, r3
}
    6a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a44:	402c0000 	.word	0x402c0000
    6a48:	117f0002 	.word	0x117f0002
    6a4c:	20028868 	.word	0x20028868
    6a50:	117f0000 	.word	0x117f0000
    6a54:	20008bf6 	.word	0x20008bf6
    6a58:	20027f48 	.word	0x20027f48
    6a5c:	000f4240 	.word	0x000f4240

00006a60 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    6a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    6a64:	4b29      	ldr	r3, [pc, #164]	; (6b0c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    6a66:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    6a68:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6b2c <SdioCard::readStart(unsigned long)+0xcc>
    6a6c:	4e28      	ldr	r6, [pc, #160]	; (6b10 <SdioCard::readStart(unsigned long)+0xb0>)
    6a6e:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    6a72:	f001 fa9b 	bl	7fac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a76:	4d27      	ldr	r5, [pc, #156]	; (6b14 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    6a78:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a7a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6b30 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a7e:	4f26      	ldr	r7, [pc, #152]	; (6b18 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    6a80:	e006      	b.n	6a90 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6a82:	f001 fa93 	bl	7fac <micros>
    6a86:	1b00      	subs	r0, r0, r4
    6a88:	42b8      	cmp	r0, r7
    6a8a:	d829      	bhi.n	6ae0 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    6a8c:	f002 fd98 	bl	95c0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6a90:	6831      	ldr	r1, [r6, #0]
    6a92:	4628      	mov	r0, r5
    6a94:	f7ff f980 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6a98:	2800      	cmp	r0, #0
    6a9a:	d0f2      	beq.n	6a82 <SdioCard::readStart(unsigned long)+0x22>
    6a9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6aa0:	05db      	lsls	r3, r3, #23
    6aa2:	d5ee      	bpl.n	6a82 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    6aa4:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    6aaa:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6aae:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    6ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6ab6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6aba:	4b18      	ldr	r3, [pc, #96]	; (6b1c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6abc:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6ac0:	781b      	ldrb	r3, [r3, #0]
    6ac2:	b1cb      	cbz	r3, 6af8 <SdioCard::readStart(unsigned long)+0x98>
    6ac4:	4649      	mov	r1, r9
    6ac6:	4816      	ldr	r0, [pc, #88]	; (6b20 <SdioCard::readStart(unsigned long)+0xc0>)
    6ac8:	f7ff f966 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6acc:	b930      	cbnz	r0, 6adc <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    6ace:	4915      	ldr	r1, [pc, #84]	; (6b24 <SdioCard::readStart(unsigned long)+0xc4>)
    6ad0:	240c      	movs	r4, #12
  m_errorLine = line;
    6ad2:	4b15      	ldr	r3, [pc, #84]	; (6b28 <SdioCard::readStart(unsigned long)+0xc8>)
    6ad4:	f240 32ea 	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    6ad8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6ada:	601a      	str	r2, [r3, #0]
}
    6adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6ae0:	4a10      	ldr	r2, [pc, #64]	; (6b24 <SdioCard::readStart(unsigned long)+0xc4>)
    6ae2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6ae4:	2000      	movs	r0, #0
  m_errorLine = line;
    6ae6:	4b10      	ldr	r3, [pc, #64]	; (6b28 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6ae8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6aea:	f240 32de 	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    6aee:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    6af2:	601a      	str	r2, [r3, #0]
}
    6af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6af8:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6afc:	4808      	ldr	r0, [pc, #32]	; (6b20 <SdioCard::readStart(unsigned long)+0xc0>)
    6afe:	4649      	mov	r1, r9
    6b00:	f7ff f94a 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6b04:	2800      	cmp	r0, #0
    6b06:	d1e9      	bne.n	6adc <SdioCard::readStart(unsigned long)+0x7c>
    6b08:	e7e1      	b.n	6ace <SdioCard::readStart(unsigned long)+0x6e>
    6b0a:	bf00      	nop
    6b0c:	00005f2d 	.word	0x00005f2d
    6b10:	20028178 	.word	0x20028178
    6b14:	0d1a0000 	.word	0x0d1a0000
    6b18:	000f4240 	.word	0x000f4240
    6b1c:	2002949c 	.word	0x2002949c
    6b20:	123a0030 	.word	0x123a0030
    6b24:	20008bf6 	.word	0x20008bf6
    6b28:	20027f48 	.word	0x20027f48
    6b2c:	20028864 	.word	0x20028864
    6b30:	402c0000 	.word	0x402c0000

00006b34 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6b38:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6b3a:	4c1d      	ldr	r4, [pc, #116]	; (6bb0 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6b3c:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    6b3e:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6b40:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6b44:	481b      	ldr	r0, [pc, #108]	; (6bb4 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6b4a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6b4c:	f7ff f924 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6b50:	b940      	cbnz	r0, 6b64 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    6b52:	4919      	ldr	r1, [pc, #100]	; (6bb8 <SdioCard::stopTransmission(bool)+0x84>)
    6b54:	2409      	movs	r4, #9
  m_errorLine = line;
    6b56:	4b19      	ldr	r3, [pc, #100]	; (6bbc <SdioCard::stopTransmission(bool)+0x88>)
    6b58:	f240 32fa 	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    6b5c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6b5e:	601a      	str	r2, [r3, #0]
}
    6b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    6b64:	2d00      	cmp	r5, #0
    6b66:	d0fb      	beq.n	6b60 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    6b68:	4b15      	ldr	r3, [pc, #84]	; (6bc0 <SdioCard::stopTransmission(bool)+0x8c>)
    6b6a:	4e16      	ldr	r6, [pc, #88]	; (6bc4 <SdioCard::stopTransmission(bool)+0x90>)
    6b6c:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    6b6e:	f001 fa1d 	bl	7fac <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6b74:	4607      	mov	r7, r0
  while (fcn()) {
    6b76:	01da      	lsls	r2, r3, #7
    6b78:	d416      	bmi.n	6ba8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b7a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6bc8 <SdioCard::stopTransmission(bool)+0x94>
    6b7e:	e004      	b.n	6b8a <SdioCard::stopTransmission(bool)+0x56>
    yield();
    6b80:	f002 fd1e 	bl	95c0 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    6b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6b86:	01db      	lsls	r3, r3, #7
    6b88:	d40e      	bmi.n	6ba8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6b8a:	f001 fa0f 	bl	7fac <micros>
    6b8e:	1bc0      	subs	r0, r0, r7
    6b90:	4540      	cmp	r0, r8
    6b92:	d9f5      	bls.n	6b80 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    6b94:	4a08      	ldr	r2, [pc, #32]	; (6bb8 <SdioCard::stopTransmission(bool)+0x84>)
    6b96:	210a      	movs	r1, #10
      m_busyFcn = 0;
    6b98:	2000      	movs	r0, #0
  m_errorLine = line;
    6b9a:	4b08      	ldr	r3, [pc, #32]	; (6bbc <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    6b9c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6b9e:	f240 32fe 	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    6ba2:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    6ba4:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    6ba6:	e7db      	b.n	6b60 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    6ba8:	2300      	movs	r3, #0
  return true;
    6baa:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6bac:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6bae:	e7d7      	b.n	6b60 <SdioCard::stopTransmission(bool)+0x2c>
    6bb0:	402c0000 	.word	0x402c0000
    6bb4:	0cdb0000 	.word	0x0cdb0000
    6bb8:	20008bf6 	.word	0x20008bf6
    6bbc:	20027f48 	.word	0x20027f48
    6bc0:	000059c1 	.word	0x000059c1
    6bc4:	20028864 	.word	0x20028864
    6bc8:	000f4240 	.word	0x000f4240

00006bcc <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6bcc:	4b0a      	ldr	r3, [pc, #40]	; (6bf8 <SdioCard::syncDevice()+0x2c>)
    6bce:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6bd0:	b510      	push	{r4, lr}
    6bd2:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6bd4:	b91b      	cbnz	r3, 6bde <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6bd6:	7a63      	ldrb	r3, [r4, #9]
    6bd8:	b943      	cbnz	r3, 6bec <SdioCard::syncDevice()+0x20>
  return true;
    6bda:	2001      	movs	r0, #1
}
    6bdc:	bd10      	pop	{r4, pc}
    6bde:	f7ff f83d 	bl	5c5c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6be2:	2800      	cmp	r0, #0
    6be4:	d0fa      	beq.n	6bdc <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6be6:	7a63      	ldrb	r3, [r4, #9]
    6be8:	2b00      	cmp	r3, #0
    6bea:	d0f6      	beq.n	6bda <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6bec:	4620      	mov	r0, r4
    6bee:	2101      	movs	r1, #1
}
    6bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6bf4:	f7ff bf9e 	b.w	6b34 <SdioCard::stopTransmission(bool)>
    6bf8:	2002949d 	.word	0x2002949d

00006bfc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c00:	7a43      	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6c02:	460d      	mov	r5, r1
    6c04:	4616      	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c06:	b1bb      	cbz	r3, 6c38 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    6c08:	6803      	ldr	r3, [r0, #0]
    6c0a:	4604      	mov	r4, r0
    6c0c:	4a3f      	ldr	r2, [pc, #252]	; (6d0c <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    6c0e:	69db      	ldr	r3, [r3, #28]
    6c10:	4293      	cmp	r3, r2
    6c12:	d14a      	bne.n	6caa <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    6c14:	4b3e      	ldr	r3, [pc, #248]	; (6d10 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    6c16:	781b      	ldrb	r3, [r3, #0]
    6c18:	b93b      	cbnz	r3, 6c2a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    6c1a:	2101      	movs	r1, #1
    6c1c:	4620      	mov	r0, r4
    6c1e:	f7ff ff89 	bl	6b34 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6c22:	b948      	cbnz	r0, 6c38 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    6c24:	2000      	movs	r0, #0
}
    6c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c2a:	f7ff f817 	bl	5c5c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6c2e:	2800      	cmp	r0, #0
    6c30:	d0f8      	beq.n	6c24 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    6c32:	7a63      	ldrb	r3, [r4, #9]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d1f0      	bne.n	6c1a <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    6c38:	4c36      	ldr	r4, [pc, #216]	; (6d14 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    6c3a:	7aa3      	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    6c3c:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    6c40:	d112      	bne.n	6c68 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    6c42:	005b      	lsls	r3, r3, #1
    6c44:	7ae2      	ldrb	r2, [r4, #11]
    6c46:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6c4a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    6c4e:	1c72      	adds	r2, r6, #1
    6c50:	432a      	orrs	r2, r5
    6c52:	4213      	tst	r3, r2
    6c54:	d008      	beq.n	6c68 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    6c56:	4930      	ldr	r1, [pc, #192]	; (6d18 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c58:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    6c5a:	4b30      	ldr	r3, [pc, #192]	; (6d1c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c5c:	f240 322d 	movw	r2, #813	; 0x32d
  m_errorCode = code;
    6c60:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c62:	601a      	str	r2, [r3, #0]
}
    6c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    6c68:	4b2d      	ldr	r3, [pc, #180]	; (6d20 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    6c6a:	781b      	ldrb	r3, [r3, #0]
    6c6c:	b90b      	cbnz	r3, 6c72 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    6c6e:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    6c70:	0276      	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    6c72:	4629      	mov	r1, r5
    6c74:	482b      	ldr	r0, [pc, #172]	; (6d24 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    6c76:	f7ff f88f 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6c7a:	b940      	cbnz	r0, 6c8e <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    6c7c:	4926      	ldr	r1, [pc, #152]	; (6d18 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c7e:	240f      	movs	r4, #15
  m_errorLine = line;
    6c80:	4b26      	ldr	r3, [pc, #152]	; (6d1c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c82:	f240 3235 	movw	r2, #821	; 0x335
  m_errorCode = code;
    6c86:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6c88:	601a      	str	r2, [r3, #0]
}
    6c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    6c8e:	4631      	mov	r1, r6
    6c90:	4825      	ldr	r0, [pc, #148]	; (6d28 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    6c92:	f7ff f881 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6c96:	b960      	cbnz	r0, 6cb2 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    6c98:	491f      	ldr	r1, [pc, #124]	; (6d18 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6c9a:	2410      	movs	r4, #16
  m_errorLine = line;
    6c9c:	4b1f      	ldr	r3, [pc, #124]	; (6d1c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6c9e:	f44f 724e 	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    6ca2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6ca4:	601a      	str	r2, [r3, #0]
}
    6ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6caa:	4798      	blx	r3
    6cac:	2800      	cmp	r0, #0
    6cae:	d0b9      	beq.n	6c24 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    6cb0:	e7c2      	b.n	6c38 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    6cb2:	2100      	movs	r1, #0
    6cb4:	481d      	ldr	r0, [pc, #116]	; (6d2c <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    6cb6:	f7ff f86f 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6cba:	b938      	cbnz	r0, 6ccc <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    6cbc:	4916      	ldr	r1, [pc, #88]	; (6d18 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6cbe:	2411      	movs	r4, #17
  m_errorLine = line;
    6cc0:	4b16      	ldr	r3, [pc, #88]	; (6d1c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6cc2:	f240 323b 	movw	r2, #827	; 0x33b
  m_errorCode = code;
    6cc6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6cc8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    6cca:	e7cb      	b.n	6c64 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    6ccc:	f001 f96e 	bl	7fac <micros>
    6cd0:	4e17      	ldr	r6, [pc, #92]	; (6d30 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6cd2:	4d18      	ldr	r5, [pc, #96]	; (6d34 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    6cd4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6cd6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6d3c <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6cda:	4f17      	ldr	r7, [pc, #92]	; (6d38 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6cdc:	6831      	ldr	r1, [r6, #0]
    6cde:	4628      	mov	r0, r5
    6ce0:	f7ff f85a 	bl	5d98 <cardCommand(unsigned long, unsigned long)>
    6ce4:	b118      	cbz	r0, 6cee <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    6ce6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6cea:	05db      	lsls	r3, r3, #23
    6cec:	d4ba      	bmi.n	6c64 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6cee:	f001 f95d 	bl	7fac <micros>
    6cf2:	1b00      	subs	r0, r0, r4
    6cf4:	42b8      	cmp	r0, r7
    6cf6:	d9f1      	bls.n	6cdc <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    6cf8:	4907      	ldr	r1, [pc, #28]	; (6d18 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    6cfa:	2429      	movs	r4, #41	; 0x29
  m_errorLine = line;
    6cfc:	4b07      	ldr	r3, [pc, #28]	; (6d1c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    6cfe:	f240 323e 	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6d02:	2000      	movs	r0, #0
  m_errorCode = code;
    6d04:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6d06:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6d08:	e7ac      	b.n	6c64 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    6d0a:	bf00      	nop
    6d0c:	00006bcd 	.word	0x00006bcd
    6d10:	2002949d 	.word	0x2002949d
    6d14:	20028164 	.word	0x20028164
    6d18:	20008bf6 	.word	0x20008bf6
    6d1c:	20027f48 	.word	0x20027f48
    6d20:	2002949c 	.word	0x2002949c
    6d24:	201a0000 	.word	0x201a0000
    6d28:	211a0000 	.word	0x211a0000
    6d2c:	261b0000 	.word	0x261b0000
    6d30:	20028178 	.word	0x20028178
    6d34:	0d1a0000 	.word	0x0d1a0000
    6d38:	000f4240 	.word	0x000f4240
    6d3c:	402c0000 	.word	0x402c0000

00006d40 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d44:	4604      	mov	r4, r0
    6d46:	7a00      	ldrb	r0, [r0, #8]
    6d48:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6d4c:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6d4e:	f010 0501 	ands.w	r5, r0, #1
    6d52:	d013      	beq.n	6d7c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6d54:	0793      	lsls	r3, r2, #30
    6d56:	d03c      	beq.n	6dd2 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6d58:	2301      	movs	r3, #1
    6d5a:	4838      	ldr	r0, [pc, #224]	; (6e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6d5c:	466a      	mov	r2, sp
    6d5e:	f7ff fa25 	bl	61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6d62:	2800      	cmp	r0, #0
    6d64:	d03a      	beq.n	6ddc <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    6d66:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d6a:	4669      	mov	r1, sp
    6d6c:	4630      	mov	r0, r6
    6d6e:	f001 f9b1 	bl	80d4 <memcpy>
}
    6d72:	4628      	mov	r0, r5
    6d74:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6d7c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6e4c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6d80:	460f      	mov	r7, r1
    6d82:	f898 3000 	ldrb.w	r3, [r8]
    6d86:	2b00      	cmp	r3, #0
    6d88:	d135      	bne.n	6df6 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6d8a:	7a63      	ldrb	r3, [r4, #9]
    6d8c:	2b01      	cmp	r3, #1
    6d8e:	d039      	beq.n	6e04 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6d90:	6822      	ldr	r2, [r4, #0]
    6d92:	492b      	ldr	r1, [pc, #172]	; (6e40 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    6d94:	69d2      	ldr	r2, [r2, #28]
    6d96:	428a      	cmp	r2, r1
    6d98:	d14a      	bne.n	6e30 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6d9a:	f898 2000 	ldrb.w	r2, [r8]
    6d9e:	2a00      	cmp	r2, #0
    6da0:	d134      	bne.n	6e0c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    6da2:	2b00      	cmp	r3, #0
    6da4:	d139      	bne.n	6e1a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    6da6:	4639      	mov	r1, r7
    6da8:	4620      	mov	r0, r4
    6daa:	f7ff fe59 	bl	6a60 <SdioCard::readStart(unsigned long)>
    6dae:	b1e8      	cbz	r0, 6dec <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6db0:	2301      	movs	r3, #1
      m_curSector = sector;
    6db2:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6db4:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6db6:	4631      	mov	r1, r6
    6db8:	4620      	mov	r0, r4
    6dba:	f7ff fdd3 	bl	6964 <SdioCard::readData(unsigned char*)>
    6dbe:	b1a8      	cbz	r0, 6dec <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6dc0:	6863      	ldr	r3, [r4, #4]
  return true;
    6dc2:	4605      	mov	r5, r0
    m_curSector++;
    6dc4:	3301      	adds	r3, #1
}
    6dc6:	4628      	mov	r0, r5
    m_curSector++;
    6dc8:	6063      	str	r3, [r4, #4]
}
    6dca:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6dd2:	2301      	movs	r3, #1
    6dd4:	4819      	ldr	r0, [pc, #100]	; (6e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6dd6:	f7ff f9e9 	bl	61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6dda:	b938      	cbnz	r0, 6dec <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    6ddc:	4919      	ldr	r1, [pc, #100]	; (6e44 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    6dde:	200b      	movs	r0, #11
  m_errorLine = line;
    6de0:	4b19      	ldr	r3, [pc, #100]	; (6e48 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6de2:	f240 32a1 	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    6de6:	2500      	movs	r5, #0
  m_errorCode = code;
    6de8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6dea:	601a      	str	r2, [r3, #0]
}
    6dec:	4628      	mov	r0, r5
    6dee:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6df6:	f7fe ff31 	bl	5c5c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6dfa:	2800      	cmp	r0, #0
    6dfc:	d0f6      	beq.n	6dec <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6dfe:	7a63      	ldrb	r3, [r4, #9]
    6e00:	2b01      	cmp	r3, #1
    6e02:	d1c5      	bne.n	6d90 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6e04:	6862      	ldr	r2, [r4, #4]
    6e06:	42ba      	cmp	r2, r7
    6e08:	d1c2      	bne.n	6d90 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6e0a:	e7d4      	b.n	6db6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6e0c:	f7fe ff26 	bl	5c5c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6e10:	2800      	cmp	r0, #0
    6e12:	d0eb      	beq.n	6dec <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6e14:	7a63      	ldrb	r3, [r4, #9]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d0c5      	beq.n	6da6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6e1a:	2101      	movs	r1, #1
    6e1c:	4620      	mov	r0, r4
    6e1e:	f7ff fe89 	bl	6b34 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6e22:	2800      	cmp	r0, #0
    6e24:	d1bf      	bne.n	6da6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6e26:	4628      	mov	r0, r5
    6e28:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6e30:	4620      	mov	r0, r4
    6e32:	4790      	blx	r2
    6e34:	2800      	cmp	r0, #0
    6e36:	d0f6      	beq.n	6e26 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6e38:	e7b5      	b.n	6da6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6e3a:	bf00      	nop
    6e3c:	113a0011 	.word	0x113a0011
    6e40:	00006bcd 	.word	0x00006bcd
    6e44:	20008bf6 	.word	0x20008bf6
    6e48:	20027f48 	.word	0x20027f48
    6e4c:	2002949d 	.word	0x2002949d

00006e50 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e54:	7a04      	ldrb	r4, [r0, #8]
    6e56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6e5a:	460f      	mov	r7, r1
    6e5c:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6e5e:	f014 0401 	ands.w	r4, r4, #1
    6e62:	d01d      	beq.n	6ea0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6e64:	f012 0f03 	tst.w	r2, #3
    6e68:	d006      	beq.n	6e78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6e6a:	4668      	mov	r0, sp
    6e6c:	4611      	mov	r1, r2
    6e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6e72:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6e74:	f001 f92e 	bl	80d4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6e78:	2301      	movs	r3, #1
    6e7a:	4642      	mov	r2, r8
    6e7c:	4639      	mov	r1, r7
    6e7e:	482c      	ldr	r0, [pc, #176]	; (6f30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6e80:	f7ff f994 	bl	61ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6e84:	4604      	mov	r4, r0
    6e86:	b930      	cbnz	r0, 6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6e88:	492a      	ldr	r1, [pc, #168]	; (6f34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6e8a:	200d      	movs	r0, #13
  m_errorLine = line;
    6e8c:	4b2a      	ldr	r3, [pc, #168]	; (6f38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6e8e:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    6e92:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6e94:	601a      	str	r2, [r3, #0]
}
    6e96:	4620      	mov	r0, r4
    6e98:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6ea0:	4d26      	ldr	r5, [pc, #152]	; (6f3c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    6ea2:	4606      	mov	r6, r0
    6ea4:	782b      	ldrb	r3, [r5, #0]
    6ea6:	bb2b      	cbnz	r3, 6ef4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6ea8:	7a73      	ldrb	r3, [r6, #9]
    6eaa:	2b02      	cmp	r3, #2
    6eac:	d029      	beq.n	6f02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6eae:	6832      	ldr	r2, [r6, #0]
    6eb0:	4923      	ldr	r1, [pc, #140]	; (6f40 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6eb2:	69d2      	ldr	r2, [r2, #28]
    6eb4:	428a      	cmp	r2, r1
    6eb6:	d136      	bne.n	6f26 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6eb8:	782a      	ldrb	r2, [r5, #0]
    6eba:	bb32      	cbnz	r2, 6f0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d12b      	bne.n	6f18 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    6ec0:	6833      	ldr	r3, [r6, #0]
    6ec2:	4639      	mov	r1, r7
    6ec4:	4630      	mov	r0, r6
    6ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    6ec8:	4798      	blx	r3
    6eca:	2800      	cmp	r0, #0
    6ecc:	d0e3      	beq.n	6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6ece:	2302      	movs	r3, #2
      m_curSector = sector;
    6ed0:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6ed2:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6ed4:	6833      	ldr	r3, [r6, #0]
    6ed6:	4641      	mov	r1, r8
    6ed8:	4630      	mov	r0, r6
    6eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6edc:	4798      	blx	r3
    6ede:	2800      	cmp	r0, #0
    6ee0:	d0d9      	beq.n	6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6ee2:	6873      	ldr	r3, [r6, #4]
  return true;
    6ee4:	4604      	mov	r4, r0
    m_curSector++;
    6ee6:	3301      	adds	r3, #1
}
    6ee8:	4620      	mov	r0, r4
    m_curSector++;
    6eea:	6073      	str	r3, [r6, #4]
}
    6eec:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ef4:	f7fe feb2 	bl	5c5c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6ef8:	2800      	cmp	r0, #0
    6efa:	d0cc      	beq.n	6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6efc:	7a73      	ldrb	r3, [r6, #9]
    6efe:	2b02      	cmp	r3, #2
    6f00:	d1d5      	bne.n	6eae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6f02:	6872      	ldr	r2, [r6, #4]
    6f04:	42ba      	cmp	r2, r7
    6f06:	d1d2      	bne.n	6eae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6f08:	e7e4      	b.n	6ed4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6f0a:	f7fe fea7 	bl	5c5c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6f0e:	2800      	cmp	r0, #0
    6f10:	d0c1      	beq.n	6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6f12:	7a73      	ldrb	r3, [r6, #9]
    6f14:	2b00      	cmp	r3, #0
    6f16:	d0d3      	beq.n	6ec0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6f18:	2101      	movs	r1, #1
    6f1a:	4630      	mov	r0, r6
    6f1c:	f7ff fe0a 	bl	6b34 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6f20:	2800      	cmp	r0, #0
    6f22:	d0b8      	beq.n	6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6f24:	e7cc      	b.n	6ec0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6f26:	4630      	mov	r0, r6
    6f28:	4790      	blx	r2
    6f2a:	2800      	cmp	r0, #0
    6f2c:	d0b3      	beq.n	6e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6f2e:	e7c7      	b.n	6ec0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6f30:	183a0001 	.word	0x183a0001
    6f34:	20008bf6 	.word	0x20008bf6
    6f38:	20027f48 	.word	0x20027f48
    6f3c:	2002949d 	.word	0x2002949d
    6f40:	00006bcd 	.word	0x00006bcd

00006f44 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    6f44:	f001 b85c 	b.w	8000 <digitalWrite>

00006f48 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6f48:	b430      	push	{r4, r5}
    6f4a:	b082      	sub	sp, #8
    6f4c:	460c      	mov	r4, r1
    6f4e:	ab02      	add	r3, sp, #8
    6f50:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6f54:	7cc3      	ldrb	r3, [r0, #19]
    6f56:	2b00      	cmp	r3, #0
    6f58:	d030      	beq.n	6fbc <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6f5a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6f5c:	7cc3      	ldrb	r3, [r0, #19]
    6f5e:	07da      	lsls	r2, r3, #31
    6f60:	d508      	bpl.n	6f74 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6f62:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f66:	6945      	ldr	r5, [r0, #20]
    6f68:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6f6c:	402a      	ands	r2, r5
    6f6e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6f70:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6f74:	079d      	lsls	r5, r3, #30
    6f76:	d508      	bpl.n	6f8a <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6f78:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f7c:	6985      	ldr	r5, [r0, #24]
    6f7e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6f82:	402a      	ands	r2, r5
    6f84:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6f86:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6f8a:	0759      	lsls	r1, r3, #29
    6f8c:	d508      	bpl.n	6fa0 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6f8e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6f92:	69c5      	ldr	r5, [r0, #28]
    6f94:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6f98:	402a      	ands	r2, r5
    6f9a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6f9c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6fa0:	071a      	lsls	r2, r3, #28
    6fa2:	d508      	bpl.n	6fb6 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6fa4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6fa8:	6a05      	ldr	r5, [r0, #32]
    6faa:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6fae:	402a      	ands	r2, r5
    6fb0:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6fb2:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6fb6:	06db      	lsls	r3, r3, #27
    6fb8:	d42f      	bmi.n	701a <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6fba:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6fbc:	6883      	ldr	r3, [r0, #8]
    6fbe:	429c      	cmp	r4, r3
    6fc0:	d035      	beq.n	702e <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6fc2:	4b22      	ldr	r3, [pc, #136]	; (704c <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6fc4:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6fc6:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6fc8:	4a21      	ldr	r2, [pc, #132]	; (7050 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6fca:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6fce:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6fd2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6fd6:	3301      	adds	r3, #1
    6fd8:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6fdc:	b1cc      	cbz	r4, 7012 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6fde:	4294      	cmp	r4, r2
    6fe0:	d827      	bhi.n	7032 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6fe2:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6fe6:	fbb2 f2f3 	udiv	r2, r2, r3
    6fea:	4294      	cmp	r4, r2
    6fec:	d32c      	bcc.n	7048 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6fee:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6ff2:	d320      	bcc.n	7036 <SPIClass::beginTransaction(SPISettings)+0xee>
    6ff4:	4c17      	ldr	r4, [pc, #92]	; (7054 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6ff6:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6ff8:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6ffa:	2203      	movs	r2, #3
		port().CR = 0;
    6ffc:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6ffe:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    7000:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7002:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    7004:	2201      	movs	r2, #1
		port().CCR = _ccr;
    7006:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7008:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    700a:	611a      	str	r2, [r3, #16]
	}
    700c:	b002      	add	sp, #8
    700e:	bc30      	pop	{r4, r5}
    7010:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    7012:	4299      	cmp	r1, r3
    7014:	d3ef      	bcc.n	6ff6 <SPIClass::beginTransaction(SPISettings)+0xae>
    7016:	1c53      	adds	r3, r2, #1
    7018:	e7e9      	b.n	6fee <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    701a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    701e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7020:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    7024:	400b      	ands	r3, r1
    7026:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7028:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    702c:	e7c5      	b.n	6fba <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    702e:	68c4      	ldr	r4, [r0, #12]
    7030:	e7e2      	b.n	6ff8 <SPIClass::beginTransaction(SPISettings)+0xb0>
    7032:	2400      	movs	r4, #0
    7034:	e7df      	b.n	6ff6 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    7036:	2b02      	cmp	r3, #2
    7038:	d9fb      	bls.n	7032 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    703a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    703c:	085a      	lsrs	r2, r3, #1
    703e:	0214      	lsls	r4, r2, #8
    7040:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    7044:	431c      	orrs	r4, r3
    7046:	e7d6      	b.n	6ff6 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    7048:	461a      	mov	r2, r3
    704a:	e7e4      	b.n	7016 <SPIClass::beginTransaction(SPISettings)+0xce>
    704c:	400fc000 	.word	0x400fc000
    7050:	20000878 	.word	0x20000878
    7054:	007f7fff 	.word	0x007f7fff

00007058 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    7058:	b508      	push	{r3, lr}
    705a:	4603      	mov	r3, r0
    705c:	f853 0b04 	ldr.w	r0, [r3], #4
    7060:	e893 0006 	ldmia.w	r3, {r1, r2}
    7064:	f7ff ff70 	bl	6f48 <SPIClass::beginTransaction(SPISettings)>
    7068:	bd08      	pop	{r3, pc}
    706a:	bf00      	nop

0000706c <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    706c:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    706e:	7cd3      	ldrb	r3, [r2, #19]
    7070:	b313      	cbz	r3, 70b8 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7072:	07d8      	lsls	r0, r3, #31
    7074:	d504      	bpl.n	7080 <SdSpiArduinoDriver::deactivate()+0x14>
    7076:	6a90      	ldr	r0, [r2, #40]	; 0x28
    7078:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    707c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7080:	0799      	lsls	r1, r3, #30
    7082:	d504      	bpl.n	708e <SdSpiArduinoDriver::deactivate()+0x22>
    7084:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    7086:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    708a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    708e:	0758      	lsls	r0, r3, #29
    7090:	d504      	bpl.n	709c <SdSpiArduinoDriver::deactivate()+0x30>
    7092:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7094:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7098:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    709c:	0719      	lsls	r1, r3, #28
    709e:	d504      	bpl.n	70aa <SdSpiArduinoDriver::deactivate()+0x3e>
    70a0:	6b50      	ldr	r0, [r2, #52]	; 0x34
    70a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    70a6:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    70aa:	06db      	lsls	r3, r3, #27
    70ac:	d504      	bpl.n	70b8 <SdSpiArduinoDriver::deactivate()+0x4c>
    70ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
    70b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    70b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    70b8:	4770      	bx	lr
    70ba:	bf00      	nop

000070bc <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    70bc:	6800      	ldr	r0, [r0, #0]
    70be:	f000 b9d7 	b.w	7470 <SPIClass::end()>
    70c2:	bf00      	nop

000070c4 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70c4:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    70c6:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70c8:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    70ca:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    70cc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    70ce:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    70d2:	d0fb      	beq.n	70cc <SdSpiArduinoDriver::receive()+0x8>
    70d4:	6f50      	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    70d6:	b2c0      	uxtb	r0, r0
    70d8:	4770      	bx	lr
    70da:	bf00      	nop

000070dc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    70dc:	b530      	push	{r4, r5, lr}
    70de:	460c      	mov	r4, r1
    70e0:	b083      	sub	sp, #12
    70e2:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    70e4:	21ff      	movs	r1, #255	; 0xff
    70e6:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    70e8:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    70ea:	f004 fcbf 	bl	ba6c <memset>
		transfer(buf, buf, count);
    70ee:	6828      	ldr	r0, [r5, #0]
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	4622      	mov	r2, r4
    70f4:	4621      	mov	r1, r4
    70f6:	f000 f9b7 	bl	7468 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    70fa:	2000      	movs	r0, #0
    70fc:	b003      	add	sp, #12
    70fe:	bd30      	pop	{r4, r5, pc}

00007100 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7100:	6803      	ldr	r3, [r0, #0]
    7102:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    7104:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7106:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7108:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    710c:	d0fb      	beq.n	7106 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    710e:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    7110:	4770      	bx	lr
    7112:	bf00      	nop

00007114 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    7114:	1e53      	subs	r3, r2, #1
    7116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    711a:	b530      	push	{r4, r5, lr}
    711c:	4614      	mov	r4, r2
    711e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    7122:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    7124:	d311      	bcc.n	714a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    7126:	b16a      	cbz	r2, 7144 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7128:	6803      	ldr	r3, [r0, #0]
    712a:	1e48      	subs	r0, r1, #1
    712c:	6819      	ldr	r1, [r3, #0]
    712e:	1882      	adds	r2, r0, r2
		port().TDR = data;
    7130:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7134:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7136:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7138:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    713c:	d0fb      	beq.n	7136 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    713e:	4290      	cmp	r0, r2
    7140:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    7142:	d1f5      	bne.n	7130 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    7144:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    7148:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    714a:	4668      	mov	r0, sp
    714c:	f000 ffc2 	bl	80d4 <memcpy>
		transfer(buf, buf, count);
    7150:	466a      	mov	r2, sp
    7152:	4623      	mov	r3, r4
    7154:	6828      	ldr	r0, [r5, #0]
    7156:	4611      	mov	r1, r2
    7158:	f000 f986 	bl	7468 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    715c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    7160:	bd30      	pop	{r4, r5, pc}
    7162:	bf00      	nop

00007164 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    7164:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    7166:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    7168:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    716a:	07dc      	lsls	r4, r3, #31
    716c:	d51d      	bpl.n	71aa <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    716e:	4604      	mov	r4, r0
    7170:	6840      	ldr	r0, [r0, #4]
    7172:	f104 0210 	add.w	r2, r4, #16
    7176:	6803      	ldr	r3, [r0, #0]
    7178:	68a1      	ldr	r1, [r4, #8]
    717a:	9201      	str	r2, [sp, #4]
    717c:	6a1b      	ldr	r3, [r3, #32]
    717e:	4798      	blx	r3
    7180:	9a01      	ldr	r2, [sp, #4]
    7182:	4605      	mov	r5, r0
    7184:	b1a8      	cbz	r0, 71b2 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    7186:	7823      	ldrb	r3, [r4, #0]
    7188:	0799      	lsls	r1, r3, #30
    718a:	d508      	bpl.n	719e <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    718c:	68e3      	ldr	r3, [r4, #12]
    718e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    7192:	4419      	add	r1, r3
    7194:	6803      	ldr	r3, [r0, #0]
    7196:	6a1b      	ldr	r3, [r3, #32]
    7198:	4798      	blx	r3
    719a:	b150      	cbz	r0, 71b2 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    719c:	7823      	ldrb	r3, [r4, #0]
    719e:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    71a2:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    71a4:	7023      	strb	r3, [r4, #0]
}
    71a6:	b003      	add	sp, #12
    71a8:	bd30      	pop	{r4, r5, pc}
  return true;
    71aa:	2501      	movs	r5, #1
}
    71ac:	4628      	mov	r0, r5
    71ae:	b003      	add	sp, #12
    71b0:	bd30      	pop	{r4, r5, pc}
  return false;
    71b2:	2500      	movs	r5, #0
}
    71b4:	4628      	mov	r0, r5
    71b6:	b003      	add	sp, #12
    71b8:	bd30      	pop	{r4, r5, pc}
    71ba:	bf00      	nop

000071bc <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    71bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    71be:	6843      	ldr	r3, [r0, #4]
    71c0:	b30b      	cbz	r3, 7206 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    71c2:	6883      	ldr	r3, [r0, #8]
    71c4:	4604      	mov	r4, r0
    71c6:	460f      	mov	r7, r1
    71c8:	4615      	mov	r5, r2
    71ca:	428b      	cmp	r3, r1
    71cc:	d106      	bne.n	71dc <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    71ce:	f810 3b10 	ldrb.w	r3, [r0], #16
    71d2:	f005 0503 	and.w	r5, r5, #3
    71d6:	432b      	orrs	r3, r5
    71d8:	7023      	strb	r3, [r4, #0]
}
    71da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    71dc:	f7ff ffc2 	bl	7164 <FsCache::sync()>
    71e0:	b188      	cbz	r0, 7206 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    71e2:	076b      	lsls	r3, r5, #29
    71e4:	d505      	bpl.n	71f2 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    71e6:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    71ea:	4630      	mov	r0, r6
    m_sector = sector;
    71ec:	2300      	movs	r3, #0
    71ee:	60a7      	str	r7, [r4, #8]
    71f0:	e7ef      	b.n	71d2 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    71f2:	6860      	ldr	r0, [r4, #4]
    71f4:	f104 0610 	add.w	r6, r4, #16
    71f8:	4639      	mov	r1, r7
    71fa:	6803      	ldr	r3, [r0, #0]
    71fc:	4632      	mov	r2, r6
    71fe:	691b      	ldr	r3, [r3, #16]
    7200:	4798      	blx	r3
    7202:	2800      	cmp	r0, #0
    7204:	d1f1      	bne.n	71ea <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    7206:	2000      	movs	r0, #0
}
    7208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    720a:	bf00      	nop

0000720c <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    720c:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    7210:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    7212:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    7216:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7218:	d101      	bne.n	721e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    721a:	6883      	ldr	r3, [r0, #8]
    721c:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    721e:	f000 bafb 	b.w	7818 <EventResponder::triggerEventNotImmediate()>
    7222:	bf00      	nop

00007224 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7224:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7226:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7228:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    722c:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    722e:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    7230:	b1a3      	cbz	r3, 725c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7232:	b321      	cbz	r1, 727e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    7234:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    7238:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    723a:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    723c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    723e:	07af      	lsls	r7, r5, #30
    7240:	d407      	bmi.n	7252 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    7242:	4615      	mov	r5, r2
				count_read--;
    7244:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7246:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    7248:	b11a      	cbz	r2, 7252 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    724a:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    724e:	462a      	mov	r2, r5
    7250:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    7252:	6965      	ldr	r5, [r4, #20]
    7254:	07ed      	lsls	r5, r5, #31
    7256:	d5f1      	bpl.n	723c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    7258:	2b00      	cmp	r3, #0
    725a:	d1ea      	bne.n	7232 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    725c:	b16e      	cbz	r6, 727a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    725e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7260:	6f19      	ldr	r1, [r3, #112]	; 0x70
    7262:	0789      	lsls	r1, r1, #30
    7264:	d4fa      	bmi.n	725c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    7266:	4611      	mov	r1, r2
			count_read--;
    7268:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    726a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    726c:	2a00      	cmp	r2, #0
    726e:	d0f5      	beq.n	725c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7270:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    7274:	460a      	mov	r2, r1
	while (count_read) {
    7276:	2e00      	cmp	r6, #0
    7278:	d1f1      	bne.n	725e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    727a:	bcf0      	pop	{r4, r5, r6, r7}
    727c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    727e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    7282:	e7d9      	b.n	7238 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00007284 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7284:	4b32      	ldr	r3, [pc, #200]	; (7350 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    7286:	4933      	ldr	r1, [pc, #204]	; (7354 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7288:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    728a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    728e:	7920      	ldrb	r0, [r4, #4]
    7290:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    7292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7294:	f895 c004 	ldrb.w	ip, [r5, #4]
    7298:	f881 c01c 	strb.w	ip, [r1, #28]
    729c:	7708      	strb	r0, [r1, #28]
    729e:	b152      	cbz	r2, 72b6 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    72a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    72a4:	d323      	bcc.n	72ee <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    72a6:	492c      	ldr	r1, [pc, #176]	; (7358 <_spi_dma_rxISR1()+0xd4>)
    72a8:	4411      	add	r1, r2
		DMA_SERQ = channel;
    72aa:	4a2a      	ldr	r2, [pc, #168]	; (7354 <_spi_dma_rxISR1()+0xd0>)
    72ac:	6419      	str	r1, [r3, #64]	; 0x40
    72ae:	76d0      	strb	r0, [r2, #27]
    72b0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72b4:	bd30      	pop	{r4, r5, pc}
    72b6:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    72b8:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    72ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    72bc:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    72be:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    72c2:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    72c4:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    72c6:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    72ca:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72cc:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    72ce:	6804      	ldr	r4, [r0, #0]
    72d0:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72d2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    72d6:	4b21      	ldr	r3, [pc, #132]	; (735c <_spi_dma_rxISR1()+0xd8>)
    72d8:	429c      	cmp	r4, r3
    72da:	d126      	bne.n	732a <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    72dc:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    72de:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    72e0:	2b02      	cmp	r3, #2
		_data = data;
    72e2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    72e4:	d126      	bne.n	7334 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    72e6:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    72ec:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    72ee:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    72f0:	8be9      	ldrh	r1, [r5, #30]
    72f2:	0409      	lsls	r1, r1, #16
    72f4:	d422      	bmi.n	733c <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    72f6:	b292      	uxth	r2, r2
    72f8:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    72fa:	6821      	ldr	r1, [r4, #0]
    72fc:	8bec      	ldrh	r4, [r5, #30]
    72fe:	b2a4      	uxth	r4, r4
    7300:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7302:	8bcc      	ldrh	r4, [r1, #30]
    7304:	0424      	lsls	r4, r4, #16
    7306:	d505      	bpl.n	7314 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7308:	8bcc      	ldrh	r4, [r1, #30]
    730a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    730e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    7312:	4322      	orrs	r2, r4
    7314:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7316:	8bca      	ldrh	r2, [r1, #30]
    7318:	b292      	uxth	r2, r2
    731a:	82ca      	strh	r2, [r1, #22]
    731c:	2100      	movs	r1, #0
    731e:	4a0d      	ldr	r2, [pc, #52]	; (7354 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    7320:	6419      	str	r1, [r3, #64]	; 0x40
    7322:	76d0      	strb	r0, [r2, #27]
    7324:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7328:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    732a:	4623      	mov	r3, r4
    732c:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    732e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    7332:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7338:	f000 ba6e 	b.w	7818 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    733c:	8be9      	ldrh	r1, [r5, #30]
    733e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    7342:	b292      	uxth	r2, r2
    7344:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7348:	ea41 010e 	orr.w	r1, r1, lr
    734c:	83e9      	strh	r1, [r5, #30]
    734e:	e7d4      	b.n	72fa <_spi_dma_rxISR1()+0x76>
    7350:	2000c0d8 	.word	0x2000c0d8
    7354:	400e8000 	.word	0x400e8000
    7358:	ffff8001 	.word	0xffff8001
    735c:	0000720d 	.word	0x0000720d

00007360 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    7360:	4b32      	ldr	r3, [pc, #200]	; (742c <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    7362:	4933      	ldr	r1, [pc, #204]	; (7430 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7364:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    7366:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    736a:	7920      	ldrb	r0, [r4, #4]
    736c:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    736e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    7370:	f895 c004 	ldrb.w	ip, [r5, #4]
    7374:	f881 c01c 	strb.w	ip, [r1, #28]
    7378:	7708      	strb	r0, [r1, #28]
    737a:	b152      	cbz	r2, 7392 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    737c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    7380:	d323      	bcc.n	73ca <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    7382:	492c      	ldr	r1, [pc, #176]	; (7434 <_spi_dma_rxISR0()+0xd4>)
    7384:	4411      	add	r1, r2
		DMA_SERQ = channel;
    7386:	4a2a      	ldr	r2, [pc, #168]	; (7430 <_spi_dma_rxISR0()+0xd0>)
    7388:	6419      	str	r1, [r3, #64]	; 0x40
    738a:	76d0      	strb	r0, [r2, #27]
    738c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7390:	bd30      	pop	{r4, r5, pc}
    7392:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7394:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    7396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7398:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    739a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    739e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    73a0:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    73a2:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    73a6:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    73a8:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    73aa:	6804      	ldr	r4, [r0, #0]
    73ac:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    73ae:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    73b2:	4b21      	ldr	r3, [pc, #132]	; (7438 <_spi_dma_rxISR0()+0xd8>)
    73b4:	429c      	cmp	r4, r3
    73b6:	d126      	bne.n	7406 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    73b8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    73ba:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    73bc:	2b02      	cmp	r3, #2
		_data = data;
    73be:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    73c0:	d126      	bne.n	7410 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    73c2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    73c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    73c8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    73ca:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    73cc:	8be9      	ldrh	r1, [r5, #30]
    73ce:	0409      	lsls	r1, r1, #16
    73d0:	d422      	bmi.n	7418 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    73d2:	b292      	uxth	r2, r2
    73d4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    73d6:	6821      	ldr	r1, [r4, #0]
    73d8:	8bec      	ldrh	r4, [r5, #30]
    73da:	b2a4      	uxth	r4, r4
    73dc:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    73de:	8bcc      	ldrh	r4, [r1, #30]
    73e0:	0424      	lsls	r4, r4, #16
    73e2:	d505      	bpl.n	73f0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    73e4:	8bcc      	ldrh	r4, [r1, #30]
    73e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    73ea:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    73ee:	4322      	orrs	r2, r4
    73f0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    73f2:	8bca      	ldrh	r2, [r1, #30]
    73f4:	b292      	uxth	r2, r2
    73f6:	82ca      	strh	r2, [r1, #22]
    73f8:	2100      	movs	r1, #0
    73fa:	4a0d      	ldr	r2, [pc, #52]	; (7430 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    73fc:	6419      	str	r1, [r3, #64]	; 0x40
    73fe:	76d0      	strb	r0, [r2, #27]
    7400:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7404:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    7406:	4623      	mov	r3, r4
    7408:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    740a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    740e:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7414:	f000 ba00 	b.w	7818 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7418:	8be9      	ldrh	r1, [r5, #30]
    741a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    741e:	b292      	uxth	r2, r2
    7420:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7424:	ea41 010e 	orr.w	r1, r1, lr
    7428:	83e9      	strh	r1, [r5, #30]
    742a:	e7d4      	b.n	73d6 <_spi_dma_rxISR0()+0x76>
    742c:	2000c088 	.word	0x2000c088
    7430:	400e8000 	.word	0x400e8000
    7434:	ffff8001 	.word	0xffff8001
    7438:	0000720d 	.word	0x0000720d

0000743c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    743c:	2300      	movs	r3, #0
    743e:	e9c0 1200 	strd	r1, r2, [r0]
    7442:	e9c0 3302 	strd	r3, r3, [r0, #8]
    7446:	e9c0 3304 	strd	r3, r3, [r0, #16]
    744a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    744e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    7452:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    7456:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    745a:	6383      	str	r3, [r0, #56]	; 0x38
    745c:	8783      	strh	r3, [r0, #60]	; 0x3c
    745e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    7462:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    7466:	4770      	bx	lr

00007468 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    7468:	b10b      	cbz	r3, 746e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    746a:	f7ff bedb 	b.w	7224 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    746e:	4770      	bx	lr

00007470 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7470:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7472:	e9d3 1200 	ldrd	r1, r2, [r3]
    7476:	6809      	ldr	r1, [r1, #0]
    7478:	4211      	tst	r1, r2
    747a:	d100      	bne.n	747e <SPIClass::end()+0xe>
    747c:	4770      	bx	lr
void SPIClass::end() {
    747e:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7480:	6802      	ldr	r2, [r0, #0]
    7482:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    7484:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7486:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    7488:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    748a:	7c22      	ldrb	r2, [r4, #16]
    748c:	4413      	add	r3, r2
    748e:	7c18      	ldrb	r0, [r3, #16]
    7490:	f000 fde0 	bl	8054 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    7494:	7c62      	ldrb	r2, [r4, #17]
    7496:	6863      	ldr	r3, [r4, #4]
    7498:	2105      	movs	r1, #5
    749a:	4413      	add	r3, r2
    749c:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    74a0:	f000 fdd8 	bl	8054 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    74a4:	6863      	ldr	r3, [r4, #4]
    74a6:	7ca2      	ldrb	r2, [r4, #18]
    74a8:	2105      	movs	r1, #5
    74aa:	4413      	add	r3, r2
}
    74ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    74b0:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    74b4:	f000 bdce 	b.w	8054 <pinMode>

000074b8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    74b8:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    74ba:	4a08      	ldr	r2, [pc, #32]	; (74dc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    74bc:	4908      	ldr	r1, [pc, #32]	; (74e0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    74be:	4809      	ldr	r0, [pc, #36]	; (74e4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    74c0:	f7ff ffbc 	bl	743c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    74c4:	4a08      	ldr	r2, [pc, #32]	; (74e8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    74c6:	4909      	ldr	r1, [pc, #36]	; (74ec <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    74c8:	4809      	ldr	r0, [pc, #36]	; (74f0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    74ca:	f7ff ffb7 	bl	743c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    74ce:	4a09      	ldr	r2, [pc, #36]	; (74f4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    74d0:	4909      	ldr	r1, [pc, #36]	; (74f8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    74d2:	480a      	ldr	r0, [pc, #40]	; (74fc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    74d4:	f7ff ffb2 	bl	743c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    74d8:	bd08      	pop	{r3, pc}
    74da:	bf00      	nop
    74dc:	20000680 	.word	0x20000680
    74e0:	403a0000 	.word	0x403a0000
    74e4:	2000c088 	.word	0x2000c088
    74e8:	20000610 	.word	0x20000610
    74ec:	4039c000 	.word	0x4039c000
    74f0:	2000c0d8 	.word	0x2000c0d8
    74f4:	200005a0 	.word	0x200005a0
    74f8:	40394000 	.word	0x40394000
    74fc:	2000c128 	.word	0x2000c128

00007500 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    7500:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7504:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    7508:	1a10      	subs	r0, r2, r0
    750a:	4770      	bx	lr

0000750c <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    750c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7510:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7514:	429a      	cmp	r2, r3
    7516:	d905      	bls.n	7524 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    7518:	1c5a      	adds	r2, r3, #1
    751a:	4403      	add	r3, r0
    751c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    7520:	7e98      	ldrb	r0, [r3, #26]
    7522:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7524:	f04f 30ff 	mov.w	r0, #4294967295
	}
    7528:	4770      	bx	lr
    752a:	bf00      	nop

0000752c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    752c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7530:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7534:	429a      	cmp	r2, r3
    7536:	d902      	bls.n	753e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    7538:	4418      	add	r0, r3
    753a:	7e80      	ldrb	r0, [r0, #26]
    753c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    753e:	f04f 30ff 	mov.w	r0, #4294967295
	}
    7542:	4770      	bx	lr

00007544 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    7544:	4770      	bx	lr
    7546:	bf00      	nop

00007548 <TwoWire::write(unsigned char)>:
{
    7548:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    754a:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    754e:	b178      	cbz	r0, 7570 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    7550:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    7554:	2a88      	cmp	r2, #136	; 0x88
    7556:	d903      	bls.n	7560 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7558:	2201      	movs	r2, #1
			return 0;
    755a:	2000      	movs	r0, #0
    755c:	605a      	str	r2, [r3, #4]
    755e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    7560:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    7564:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    7566:	441a      	add	r2, r3
    7568:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    756c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    7570:	4770      	bx	lr
    7572:	bf00      	nop

00007574 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    7574:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    7576:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    757a:	b90c      	cbnz	r4, 7580 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    757c:	4620      	mov	r0, r4
    757e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    7580:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    7584:	4605      	mov	r5, r0
    7586:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    758a:	42a2      	cmp	r2, r4
    758c:	d80d      	bhi.n	75aa <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    758e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    7590:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    7594:	4622      	mov	r2, r4
    7596:	4418      	add	r0, r3
    7598:	f000 fd9c 	bl	80d4 <memcpy>
		txBufferLength += quantity;
    759c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    75a0:	4620      	mov	r0, r4
		txBufferLength += quantity;
    75a2:	4423      	add	r3, r4
    75a4:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    75a8:	bd38      	pop	{r3, r4, r5, pc}
    75aa:	2201      	movs	r2, #1
    75ac:	6042      	str	r2, [r0, #4]
    75ae:	e7ef      	b.n	7590 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000075b0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    75b0:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    75b2:	2500      	movs	r5, #0
    75b4:	4613      	mov	r3, r2
    75b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    75ba:	4604      	mov	r4, r0
    75bc:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    75c0:	4815      	ldr	r0, [pc, #84]	; (7618 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    75c2:	2288      	movs	r2, #136	; 0x88
    75c4:	6121      	str	r1, [r4, #16]
    75c6:	4629      	mov	r1, r5
    75c8:	6020      	str	r0, [r4, #0]
    75ca:	f104 001a 	add.w	r0, r4, #26
    75ce:	6163      	str	r3, [r4, #20]
    75d0:	7325      	strb	r5, [r4, #12]
    75d2:	7625      	strb	r5, [r4, #24]
    75d4:	7665      	strb	r5, [r4, #25]
    75d6:	f004 fa49 	bl	ba6c <memset>
    75da:	2289      	movs	r2, #137	; 0x89
    75dc:	4629      	mov	r1, r5
    75de:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    75e2:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    75e6:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    75ea:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    75ee:	f004 fa3d 	bl	ba6c <memset>
	}
    75f2:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    75f4:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    75f8:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    75fc:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    7600:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    7604:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    7608:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    760c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    7610:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    7614:	bd38      	pop	{r3, r4, r5, pc}
    7616:	bf00      	nop
    7618:	200007e8 	.word	0x200007e8

0000761c <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    761c:	6903      	ldr	r3, [r0, #16]
{
    761e:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    7620:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    7624:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    7626:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    762a:	d001      	beq.n	7630 <TwoWire::isr()+0x14>
    762c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    7630:	07ae      	lsls	r6, r5, #30
    7632:	d50b      	bpl.n	764c <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    7634:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    7638:	0408      	lsls	r0, r1, #16
    763a:	d53e      	bpl.n	76ba <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    763c:	2200      	movs	r2, #0
    763e:	2001      	movs	r0, #1
    7640:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    7644:	4422      	add	r2, r4
    7646:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    764a:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    764c:	07ea      	lsls	r2, r5, #31
    764e:	d510      	bpl.n	7672 <TwoWire::isr()+0x56>
		if (!transmitting) {
    7650:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    7654:	b1f6      	cbz	r6, 7694 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    7656:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    765a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    765e:	42b2      	cmp	r2, r6
    7660:	d927      	bls.n	76b2 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    7662:	1c72      	adds	r2, r6, #1
    7664:	4426      	add	r6, r4
    7666:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    766a:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    766e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    7672:	05ab      	lsls	r3, r5, #22
    7674:	d50d      	bpl.n	7692 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    7676:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    767a:	b118      	cbz	r0, 7684 <TwoWire::isr()+0x68>
    767c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7680:	b103      	cbz	r3, 7684 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    7682:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    7684:	2300      	movs	r3, #0
    7686:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    768a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    768e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    7692:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    7694:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    7698:	b10a      	cbz	r2, 769e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    769a:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    769c:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    769e:	2200      	movs	r2, #0
    76a0:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    76a4:	2201      	movs	r2, #1
    76a6:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    76aa:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    76ae:	42b2      	cmp	r2, r6
    76b0:	d8d7      	bhi.n	7662 <TwoWire::isr()+0x46>
			port->STDR = 0;
    76b2:	2200      	movs	r2, #0
    76b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    76b8:	e7db      	b.n	7672 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    76ba:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    76be:	2a87      	cmp	r2, #135	; 0x87
    76c0:	d8c4      	bhi.n	764c <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    76c2:	1c50      	adds	r0, r2, #1
    76c4:	b2c0      	uxtb	r0, r0
    76c6:	e7bd      	b.n	7644 <TwoWire::isr()+0x28>

000076c8 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    76c8:	4801      	ldr	r0, [pc, #4]	; (76d0 <lpi2c1_isr()+0x8>)
    76ca:	f7ff bfa7 	b.w	761c <TwoWire::isr()>
    76ce:	bf00      	nop
    76d0:	2000c17c 	.word	0x2000c17c

000076d4 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    76d4:	4801      	ldr	r0, [pc, #4]	; (76dc <lpi2c3_isr()+0x8>)
    76d6:	f7ff bfa1 	b.w	761c <TwoWire::isr()>
    76da:	bf00      	nop
    76dc:	2000c2bc 	.word	0x2000c2bc

000076e0 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    76e0:	4801      	ldr	r0, [pc, #4]	; (76e8 <lpi2c4_isr()+0x8>)
    76e2:	f7ff bf9b 	b.w	761c <TwoWire::isr()>
    76e6:	bf00      	nop
    76e8:	2000c3fc 	.word	0x2000c3fc

000076ec <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    76ec:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    76ee:	4c09      	ldr	r4, [pc, #36]	; (7714 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    76f0:	4909      	ldr	r1, [pc, #36]	; (7718 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    76f2:	4622      	mov	r2, r4
    76f4:	4809      	ldr	r0, [pc, #36]	; (771c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    76f6:	f7ff ff5b 	bl	75b0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    76fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
    76fe:	4908      	ldr	r1, [pc, #32]	; (7720 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    7700:	4808      	ldr	r0, [pc, #32]	; (7724 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    7702:	f7ff ff55 	bl	75b0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    7706:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    770a:	4907      	ldr	r1, [pc, #28]	; (7728 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    770c:	4807      	ldr	r0, [pc, #28]	; (772c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    770e:	f7ff ff4f 	bl	75b0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    7712:	bd10      	pop	{r4, pc}
    7714:	60002674 	.word	0x60002674
    7718:	403f0000 	.word	0x403f0000
    771c:	2000c17c 	.word	0x2000c17c
    7720:	403f8000 	.word	0x403f8000
    7724:	2000c2bc 	.word	0x2000c2bc
    7728:	403fc000 	.word	0x403fc000
    772c:	2000c3fc 	.word	0x2000c3fc

00007730 <DMAChannel::begin(bool)>:
{
    7730:	b430      	push	{r4, r5}
	__disable_irq();
    7732:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    7734:	b921      	cbnz	r1, 7740 <DMAChannel::begin(bool)+0x10>
    7736:	6803      	ldr	r3, [r0, #0]
    7738:	b113      	cbz	r3, 7740 <DMAChannel::begin(bool)+0x10>
    773a:	7902      	ldrb	r2, [r0, #4]
    773c:	2a0f      	cmp	r2, #15
    773e:	d93b      	bls.n	77b8 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    7740:	4c24      	ldr	r4, [pc, #144]	; (77d4 <DMAChannel::begin(bool)+0xa4>)
    7742:	8821      	ldrh	r1, [r4, #0]
{
    7744:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    7746:	fa41 f203 	asr.w	r2, r1, r3
    774a:	f012 0201 	ands.w	r2, r2, #1
    774e:	d008      	beq.n	7762 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    7750:	3301      	adds	r3, #1
    7752:	2b10      	cmp	r3, #16
    7754:	d1f7      	bne.n	7746 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    7756:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    7758:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    775a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    775c:	6002      	str	r2, [r0, #0]
}
    775e:	bc30      	pop	{r4, r5}
    7760:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    7762:	f04f 0c01 	mov.w	ip, #1
    7766:	fa0c fc03 	lsl.w	ip, ip, r3
    776a:	ea41 010c 	orr.w	r1, r1, ip
    776e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    7770:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7772:	4919      	ldr	r1, [pc, #100]	; (77d8 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7774:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7778:	4c18      	ldr	r4, [pc, #96]	; (77dc <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    777a:	4419      	add	r1, r3
	channel = ch;
    777c:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7780:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7782:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    7784:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    7788:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    778a:	f240 4482 	movw	r4, #1154	; 0x482
    778e:	4914      	ldr	r1, [pc, #80]	; (77e0 <DMAChannel::begin(bool)+0xb0>)
    7790:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    7792:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    7796:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    779a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    779e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    77a2:	6003      	str	r3, [r0, #0]
}
    77a4:	bc30      	pop	{r4, r5}
	*p++ = 0;
    77a6:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    77aa:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    77ae:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    77b2:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    77b6:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    77b8:	4c06      	ldr	r4, [pc, #24]	; (77d4 <DMAChannel::begin(bool)+0xa4>)
    77ba:	8821      	ldrh	r1, [r4, #0]
    77bc:	fa41 f502 	asr.w	r5, r1, r2
    77c0:	07ed      	lsls	r5, r5, #31
    77c2:	d5bf      	bpl.n	7744 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    77c4:	4d04      	ldr	r5, [pc, #16]	; (77d8 <DMAChannel::begin(bool)+0xa8>)
    77c6:	4415      	add	r5, r2
    77c8:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    77cc:	d1ba      	bne.n	7744 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    77ce:	b662      	cpsie	i
		return;
    77d0:	e7c5      	b.n	775e <DMAChannel::begin(bool)+0x2e>
    77d2:	bf00      	nop
    77d4:	2002948e 	.word	0x2002948e
    77d8:	02007480 	.word	0x02007480
    77dc:	400fc000 	.word	0x400fc000
    77e0:	400e8000 	.word	0x400e8000

000077e4 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    77e4:	7903      	ldrb	r3, [r0, #4]
    77e6:	2b0f      	cmp	r3, #15
    77e8:	d811      	bhi.n	780e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    77ea:	4a09      	ldr	r2, [pc, #36]	; (7810 <DMAChannel::release()+0x2c>)
    77ec:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    77ee:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    77f0:	4908      	ldr	r1, [pc, #32]	; (7814 <DMAChannel::release()+0x30>)
    77f2:	2201      	movs	r2, #1
    77f4:	f890 c004 	ldrb.w	ip, [r0, #4]
    77f8:	880b      	ldrh	r3, [r1, #0]
    77fa:	fa02 f20c 	lsl.w	r2, r2, ip
    77fe:	ea23 0302 	bic.w	r3, r3, r2
    7802:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7804:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    7806:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    7808:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    780a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    780c:	6003      	str	r3, [r0, #0]
}
    780e:	4770      	bx	lr
    7810:	400e8000 	.word	0x400e8000
    7814:	2002948e 	.word	0x2002948e

00007818 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7818:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    781c:	b672      	cpsid	i
	if (_triggered == false) {
    781e:	7f43      	ldrb	r3, [r0, #29]
    7820:	b95b      	cbnz	r3, 783a <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    7822:	7f01      	ldrb	r1, [r0, #28]
    7824:	2901      	cmp	r1, #1
{
    7826:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    7828:	d00b      	beq.n	7842 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    782a:	2903      	cmp	r1, #3
    782c:	d013      	beq.n	7856 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    782e:	2301      	movs	r3, #1
    7830:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7832:	b902      	cbnz	r2, 7836 <EventResponder::triggerEventNotImmediate()+0x1e>
    7834:	b662      	cpsie	i
}
    7836:	bc30      	pop	{r4, r5}
    7838:	4770      	bx	lr
    783a:	b90a      	cbnz	r2, 7840 <EventResponder::triggerEventNotImmediate()+0x28>
    783c:	b662      	cpsie	i
    783e:	4770      	bx	lr
    7840:	4770      	bx	lr
			if (firstYield == nullptr) {
    7842:	4c12      	ldr	r4, [pc, #72]	; (788c <EventResponder::triggerEventNotImmediate()+0x74>)
    7844:	6821      	ldr	r1, [r4, #0]
    7846:	b1b1      	cbz	r1, 7876 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    7848:	4911      	ldr	r1, [pc, #68]	; (7890 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    784a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    784c:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    784e:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    7850:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7852:	6158      	str	r0, [r3, #20]
				lastYield = this;
    7854:	e7eb      	b.n	782e <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    7856:	4d0f      	ldr	r5, [pc, #60]	; (7894 <EventResponder::triggerEventNotImmediate()+0x7c>)
    7858:	490f      	ldr	r1, [pc, #60]	; (7898 <EventResponder::triggerEventNotImmediate()+0x80>)
    785a:	682c      	ldr	r4, [r5, #0]
    785c:	b18c      	cbz	r4, 7882 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    785e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    7860:	680b      	ldr	r3, [r1, #0]
    7862:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7864:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7866:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    786a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    786e:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7870:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    7874:	e7db      	b.n	782e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    7876:	4b06      	ldr	r3, [pc, #24]	; (7890 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    7878:	6020      	str	r0, [r4, #0]
				lastYield = this;
    787a:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    787c:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    7880:	e7d5      	b.n	782e <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    7882:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    7886:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    7888:	e7ed      	b.n	7866 <EventResponder::triggerEventNotImmediate()+0x4e>
    788a:	bf00      	nop
    788c:	20028874 	.word	0x20028874
    7890:	20028880 	.word	0x20028880
    7894:	2002887c 	.word	0x2002887c
    7898:	20028878 	.word	0x20028878

0000789c <EventResponder::runFromInterrupt()>:
{
    789c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    789e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    78a2:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    78a4:	4c0c      	ldr	r4, [pc, #48]	; (78d8 <EventResponder::runFromInterrupt()+0x3c>)
    78a6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    78a8:	b180      	cbz	r0, 78cc <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    78aa:	4e0c      	ldr	r6, [pc, #48]	; (78dc <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    78ac:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    78ae:	6943      	ldr	r3, [r0, #20]
    78b0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    78b2:	b173      	cbz	r3, 78d2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    78b4:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    78b6:	b902      	cbnz	r2, 78ba <EventResponder::runFromInterrupt()+0x1e>
    78b8:	b662      	cpsie	i
			(*(first->_function))(*first);
    78ba:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    78bc:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    78be:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    78c0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    78c4:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    78c6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    78c8:	2800      	cmp	r0, #0
    78ca:	d1f0      	bne.n	78ae <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    78cc:	b902      	cbnz	r2, 78d0 <EventResponder::runFromInterrupt()+0x34>
    78ce:	b662      	cpsie	i
}
    78d0:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    78d2:	6033      	str	r3, [r6, #0]
    78d4:	e7ef      	b.n	78b6 <EventResponder::runFromInterrupt()+0x1a>
    78d6:	bf00      	nop
    78d8:	2002887c 	.word	0x2002887c
    78dc:	20028878 	.word	0x20028878

000078e0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    78e0:	f7ff bfdc 	b.w	789c <EventResponder::runFromInterrupt()>

000078e4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    78e4:	4904      	ldr	r1, [pc, #16]	; (78f8 <systick_isr+0x14>)
	systick_millis_count++;
    78e6:	4a05      	ldr	r2, [pc, #20]	; (78fc <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    78e8:	6849      	ldr	r1, [r1, #4]
    78ea:	4b05      	ldr	r3, [pc, #20]	; (7900 <systick_isr+0x1c>)
    78ec:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    78ee:	6813      	ldr	r3, [r2, #0]
    78f0:	3301      	adds	r3, #1
    78f2:	6013      	str	r3, [r2, #0]
}
    78f4:	4770      	bx	lr
    78f6:	bf00      	nop
    78f8:	e0001000 	.word	0xe0001000
    78fc:	2002945c 	.word	0x2002945c
    7900:	20029458 	.word	0x20029458

00007904 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7904:	4608      	mov	r0, r1
    7906:	f001 bdc7 	b.w	9498 <usb_serial_putchar>
    790a:	bf00      	nop

0000790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
    790c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    790e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7910:	bf08      	it	eq
    7912:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7914:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
    7916:	b391      	cbz	r1, 797e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
    7918:	f04f 0e21 	mov.w	lr, #33	; 0x21
    791c:	e001      	b.n	7922 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
    791e:	fa5f fe86 	uxtb.w	lr, r6
    7922:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    7926:	fbb1 f5f2 	udiv	r5, r1, r2
    792a:	fb02 1415 	mls	r4, r2, r5, r1
    792e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7932:	2c09      	cmp	r4, #9
    7934:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    7938:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    793c:	bf98      	it	ls
    793e:	fa5f f48c 	uxtbls.w	r4, ip
    7942:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    7946:	bf88      	it	hi
    7948:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    794a:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    794c:	44ec      	add	ip, sp
			n /= base;
    794e:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7950:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    7954:	d2e3      	bcs.n	791e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
    7956:	b14b      	cbz	r3, 796c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    7958:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    795c:	222d      	movs	r2, #45	; 0x2d
		i--;
    795e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    7962:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    7966:	446b      	add	r3, sp
    7968:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    796c:	6803      	ldr	r3, [r0, #0]
    796e:	a901      	add	r1, sp, #4
    7970:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7974:	685b      	ldr	r3, [r3, #4]
    7976:	4471      	add	r1, lr
    7978:	4798      	blx	r3
}
    797a:	b00a      	add	sp, #40	; 0x28
    797c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    797e:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7980:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7984:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7988:	e7e5      	b.n	7956 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    798a:	bf00      	nop

0000798c <Print::print(long)>:
	if (n < 0) {
    798c:	2900      	cmp	r1, #0
    798e:	db03      	blt.n	7998 <Print::print(long)+0xc>
	uint8_t sign=0;
    7990:	2300      	movs	r3, #0
	if (base == 0) {
    7992:	220a      	movs	r2, #10
    7994:	f7ff bfba 	b.w	790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    7998:	4249      	negs	r1, r1
		sign = '-';
    799a:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    799c:	220a      	movs	r2, #10
    799e:	f7ff bfb5 	b.w	790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    79a2:	bf00      	nop

000079a4 <Print::println()>:
{
    79a4:	b500      	push	{lr}
	return write(buf, 2);
    79a6:	6803      	ldr	r3, [r0, #0]
{
    79a8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    79aa:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    79ae:	2202      	movs	r2, #2
    79b0:	a901      	add	r1, sp, #4
    79b2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    79b4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    79b8:	4798      	blx	r3
}
    79ba:	b003      	add	sp, #12
    79bc:	f85d fb04 	ldr.w	pc, [sp], #4

000079c0 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    79c0:	4b05      	ldr	r3, [pc, #20]	; (79d8 <_write+0x18>)
    79c2:	2802      	cmp	r0, #2
    79c4:	bf88      	it	hi
    79c6:	4603      	movhi	r3, r0
{
    79c8:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    79ca:	681c      	ldr	r4, [r3, #0]
    79cc:	4618      	mov	r0, r3
    79ce:	6863      	ldr	r3, [r4, #4]
}
    79d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    79d4:	4718      	bx	r3
    79d6:	bf00      	nop
    79d8:	200085d4 	.word	0x200085d4

000079dc <Print::printf(char const*, ...)>:
{
    79dc:	b40e      	push	{r1, r2, r3}
    79de:	b500      	push	{lr}
    79e0:	b082      	sub	sp, #8
    79e2:	aa03      	add	r2, sp, #12
    79e4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    79e8:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    79ea:	f003 ff53 	bl	b894 <vdprintf>
}
    79ee:	b002      	add	sp, #8
    79f0:	f85d eb04 	ldr.w	lr, [sp], #4
    79f4:	b003      	add	sp, #12
    79f6:	4770      	bx	lr

000079f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    79f8:	b95a      	cbnz	r2, 7a12 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    79fa:	6803      	ldr	r3, [r0, #0]
    79fc:	b2c9      	uxtb	r1, r1
    79fe:	4a07      	ldr	r2, [pc, #28]	; (7a1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7a00:	681b      	ldr	r3, [r3, #0]
    7a02:	4293      	cmp	r3, r2
{
    7a04:	b500      	push	{lr}
    7a06:	d106      	bne.n	7a16 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    7a08:	4608      	mov	r0, r1
}
    7a0a:	f85d eb04 	ldr.w	lr, [sp], #4
    7a0e:	f001 bd43 	b.w	9498 <usb_serial_putchar>
    7a12:	f7ff bf7b 	b.w	790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7a16:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    7a1a:	4718      	bx	r3
    7a1c:	00007905 	.word	0x00007905

00007a20 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    7a20:	eeb4 0b40 	vcmp.f64	d0, d0
{
    7a24:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    7a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    7a2a:	4605      	mov	r5, r0
    7a2c:	ed2d 8b02 	vpush	{d8}
    7a30:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    7a32:	d67c      	bvs.n	7b2e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    7a34:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    7a38:	ed9f 6b47 	vldr	d6, [pc, #284]	; 7b58 <Print::printFloat(double, unsigned char)+0x138>
    7a3c:	eeb4 7b46 	vcmp.f64	d7, d6
    7a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a44:	dc6b      	bgt.n	7b1e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    7a46:	ed9f 7b46 	vldr	d7, [pc, #280]	; 7b60 <Print::printFloat(double, unsigned char)+0x140>
    7a4a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a52:	dc5a      	bgt.n	7b0a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    7a54:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7b68 <Print::printFloat(double, unsigned char)+0x148>
    7a58:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a60:	d453      	bmi.n	7b0a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    7a62:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    7a66:	460c      	mov	r4, r1
    7a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a6c:	d45b      	bmi.n	7b26 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7a6e:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7a70:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    7a74:	2c00      	cmp	r4, #0
    7a76:	d05e      	beq.n	7b36 <Print::printFloat(double, unsigned char)+0x116>
    7a78:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7a7c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7b70 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7a80:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    7a84:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7a88:	fa5f f28c 	uxtb.w	r2, ip
    7a8c:	42a2      	cmp	r2, r4
    7a8e:	d3f7      	bcc.n	7a80 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7a90:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    7a94:	220a      	movs	r2, #10
    7a96:	4628      	mov	r0, r5
    7a98:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7a9c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7aa0:	ee17 1a90 	vmov	r1, s15
    7aa4:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7aa8:	f7ff ff30 	bl	790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7aac:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7aae:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    7ab2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    7ab6:	4606      	mov	r6, r0
		buf[0] = '.';
    7ab8:	bf28      	it	cs
    7aba:	240f      	movcs	r4, #15
    7abc:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7ac0:	f10d 0309 	add.w	r3, sp, #9
    7ac4:	aa02      	add	r2, sp, #8
    7ac6:	1e61      	subs	r1, r4, #1
    7ac8:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7acc:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7ad0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7ad4:	edcd 7a01 	vstr	s15, [sp, #4]
    7ad8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7adc:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7ae0:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7ae2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7ae6:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7aea:	4291      	cmp	r1, r2
			remainder -= n; 
    7aec:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7af0:	d1ec      	bne.n	7acc <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7af2:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7af4:	3401      	adds	r4, #1
		count += write(buf, count);
    7af6:	a902      	add	r1, sp, #8
    7af8:	4628      	mov	r0, r5
    7afa:	685b      	ldr	r3, [r3, #4]
    7afc:	b2e2      	uxtb	r2, r4
    7afe:	4798      	blx	r3
	}
	return count;
}
    7b00:	4630      	mov	r0, r6
    7b02:	b006      	add	sp, #24
    7b04:	ecbd 8b02 	vpop	{d8}
    7b08:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7b0a:	682b      	ldr	r3, [r5, #0]
    7b0c:	2203      	movs	r2, #3
    7b0e:	491a      	ldr	r1, [pc, #104]	; (7b78 <Print::printFloat(double, unsigned char)+0x158>)
    7b10:	685b      	ldr	r3, [r3, #4]
    7b12:	b006      	add	sp, #24
    7b14:	ecbd 8b02 	vpop	{d8}
    7b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b1c:	4718      	bx	r3
    7b1e:	6803      	ldr	r3, [r0, #0]
    7b20:	2203      	movs	r2, #3
    7b22:	4916      	ldr	r1, [pc, #88]	; (7b7c <Print::printFloat(double, unsigned char)+0x15c>)
    7b24:	e7f4      	b.n	7b10 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7b26:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    7b2a:	2301      	movs	r3, #1
    7b2c:	e7a0      	b.n	7a70 <Print::printFloat(double, unsigned char)+0x50>
    7b2e:	6803      	ldr	r3, [r0, #0]
    7b30:	2203      	movs	r2, #3
    7b32:	4913      	ldr	r1, [pc, #76]	; (7b80 <Print::printFloat(double, unsigned char)+0x160>)
    7b34:	e7ec      	b.n	7b10 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7b36:	ee30 0b07 	vadd.f64	d0, d0, d7
    7b3a:	220a      	movs	r2, #10
    7b3c:	4628      	mov	r0, r5
    7b3e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7b42:	ee17 1a90 	vmov	r1, s15
}
    7b46:	b006      	add	sp, #24
    7b48:	ecbd 8b02 	vpop	{d8}
    7b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b50:	f7ff bedc 	b.w	790c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7b54:	f3af 8000 	nop.w
    7b58:	ffffffff 	.word	0xffffffff
    7b5c:	7fefffff 	.word	0x7fefffff
    7b60:	e0000000 	.word	0xe0000000
    7b64:	41efffff 	.word	0x41efffff
    7b68:	e0000000 	.word	0xe0000000
    7b6c:	c1efffff 	.word	0xc1efffff
    7b70:	9999999a 	.word	0x9999999a
    7b74:	3fb99999 	.word	0x3fb99999
    7b78:	2000059c 	.word	0x2000059c
    7b7c:	20000598 	.word	0x20000598
    7b80:	20000594 	.word	0x20000594

00007b84 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7b84:	f001 bc78 	b.w	9478 <usb_serial_getchar>

00007b88 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7b88:	f001 bc10 	b.w	93ac <usb_serial_peekchar>

00007b8c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7b90:	b392      	cbz	r2, 7bf8 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    7b92:	4617      	mov	r7, r2
    7b94:	fab3 f283 	clz	r2, r3
    7b98:	0952      	lsrs	r2, r2, #5
    7b9a:	b36b      	cbz	r3, 7bf8 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7b9c:	f1b3 0801 	subs.w	r8, r3, #1
    7ba0:	d025      	beq.n	7bee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7ba2:	eb07 0a08 	add.w	sl, r7, r8
    7ba6:	4683      	mov	fp, r0
    7ba8:	4689      	mov	r9, r1
	size_t index = 0;
    7baa:	4690      	mov	r8, r2
    7bac:	4c17      	ldr	r4, [pc, #92]	; (7c0c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7bae:	4e18      	ldr	r6, [pc, #96]	; (7c10 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7bb0:	6825      	ldr	r5, [r4, #0]
    7bb2:	e00b      	b.n	7bcc <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7bb4:	f001 fc60 	bl	9478 <usb_serial_getchar>
    if (c >= 0) return c;
    7bb8:	2800      	cmp	r0, #0
    7bba:	da10      	bge.n	7bde <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7bbc:	f001 fd00 	bl	95c0 <yield>
    7bc0:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7bc2:	f8db 2008 	ldr.w	r2, [fp, #8]
    7bc6:	1b5b      	subs	r3, r3, r5
    7bc8:	4293      	cmp	r3, r2
    7bca:	d21a      	bcs.n	7c02 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7bcc:	f8db 3000 	ldr.w	r3, [fp]
    7bd0:	695b      	ldr	r3, [r3, #20]
    7bd2:	42b3      	cmp	r3, r6
    7bd4:	d0ee      	beq.n	7bb4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7bd6:	4658      	mov	r0, fp
    7bd8:	4798      	blx	r3
    if (c >= 0) return c;
    7bda:	2800      	cmp	r0, #0
    7bdc:	dbee      	blt.n	7bbc <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7bde:	4548      	cmp	r0, r9
    7be0:	d005      	beq.n	7bee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7be2:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7be6:	45ba      	cmp	sl, r7
		index++;
    7be8:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7bec:	d1e0      	bne.n	7bb0 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7bee:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7bf0:	4640      	mov	r0, r8
	*buffer = 0;
    7bf2:	703b      	strb	r3, [r7, #0]
}
    7bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7bf8:	f04f 0800 	mov.w	r8, #0
}
    7bfc:	4640      	mov	r0, r8
    7bfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7c02:	2301      	movs	r3, #1
    7c04:	f88b 300c 	strb.w	r3, [fp, #12]
    7c08:	e7f1      	b.n	7bee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7c0a:	bf00      	nop
    7c0c:	2002945c 	.word	0x2002945c
    7c10:	00007b85 	.word	0x00007b85

00007c14 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7c14:	49a2      	ldr	r1, [pc, #648]	; (7ea0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7c16:	4ba3      	ldr	r3, [pc, #652]	; (7ea4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7c18:	4288      	cmp	r0, r1
{
    7c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7c1e:	4ca2      	ldr	r4, [pc, #648]	; (7ea8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7c20:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7c22:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7c24:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7c28:	d91b      	bls.n	7c62 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7c2a:	4ba0      	ldr	r3, [pc, #640]	; (7eac <set_arm_clock+0x298>)
    7c2c:	4298      	cmp	r0, r3
    7c2e:	f240 8102 	bls.w	7e36 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7c32:	1ac3      	subs	r3, r0, r3
    7c34:	499e      	ldr	r1, [pc, #632]	; (7eb0 <set_arm_clock+0x29c>)
    7c36:	0a1b      	lsrs	r3, r3, #8
    7c38:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c3c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7c40:	09db      	lsrs	r3, r3, #7
    7c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7c46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7c4a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c4e:	428b      	cmp	r3, r1
    7c50:	bf28      	it	cs
    7c52:	460b      	movcs	r3, r1
    7c54:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7c58:	4b96      	ldr	r3, [pc, #600]	; (7eb4 <set_arm_clock+0x2a0>)
    7c5a:	fba3 3707 	umull	r3, r7, r3, r7
    7c5e:	08ff      	lsrs	r7, r7, #3
    7c60:	e004      	b.n	7c6c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7c62:	4f95      	ldr	r7, [pc, #596]	; (7eb8 <set_arm_clock+0x2a4>)
    7c64:	42b8      	cmp	r0, r7
    7c66:	bf8c      	ite	hi
    7c68:	270e      	movhi	r7, #14
    7c6a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c6c:	498d      	ldr	r1, [pc, #564]	; (7ea4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c6e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c72:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c76:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7c7c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c80:	d20c      	bcs.n	7c9c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7c82:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7c86:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7c8a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7c8e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7c92:	680b      	ldr	r3, [r1, #0]
    7c94:	2b00      	cmp	r3, #0
    7c96:	dafc      	bge.n	7c92 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7c98:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7c9c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7ca0:	d124      	bne.n	7cec <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7ca2:	4986      	ldr	r1, [pc, #536]	; (7ebc <set_arm_clock+0x2a8>)
    7ca4:	690c      	ldr	r4, [r1, #16]
    7ca6:	4986      	ldr	r1, [pc, #536]	; (7ec0 <set_arm_clock+0x2ac>)
    7ca8:	43a1      	bics	r1, r4
    7caa:	f000 80ea 	beq.w	7e82 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7cae:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7cb2:	4634      	mov	r4, r6
    7cb4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7cb8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7cbc:	d004      	beq.n	7cc8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7cbe:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7cc2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7cc4:	4b77      	ldr	r3, [pc, #476]	; (7ea4 <set_arm_clock+0x290>)
    7cc6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7cc8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7ccc:	d007      	beq.n	7cde <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7cce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7cd2:	4974      	ldr	r1, [pc, #464]	; (7ea4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7cd4:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7cd6:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7cd8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7cda:	071a      	lsls	r2, r3, #28
    7cdc:	d4fc      	bmi.n	7cd8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7cde:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7ce2:	4a70      	ldr	r2, [pc, #448]	; (7ea4 <set_arm_clock+0x290>)
    7ce4:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7ce6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7ce8:	069b      	lsls	r3, r3, #26
    7cea:	d4fc      	bmi.n	7ce6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7cec:	4c75      	ldr	r4, [pc, #468]	; (7ec4 <set_arm_clock+0x2b0>)
    7cee:	42a0      	cmp	r0, r4
    7cf0:	f200 80ce 	bhi.w	7e90 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7cf4:	f04f 0c01 	mov.w	ip, #1
    7cf8:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7cfa:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7cfc:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7d00:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7d04:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7d08:	42a2      	cmp	r2, r4
    7d0a:	d818      	bhi.n	7d3e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7d0c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7d10:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7d14:	f040 808d 	bne.w	7e32 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7d18:	f1bc 0f04 	cmp.w	ip, #4
    7d1c:	f200 8091 	bhi.w	7e42 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7d20:	180a      	adds	r2, r1, r0
    7d22:	42a2      	cmp	r2, r4
    7d24:	f200 80a4 	bhi.w	7e70 <set_arm_clock+0x25c>
    7d28:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7d2c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7d2e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7d32:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7d36:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7d3a:	42a2      	cmp	r2, r4
    7d3c:	d9e6      	bls.n	7d0c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d3e:	f10c 31ff 	add.w	r1, ip, #4294967295
    7d42:	028c      	lsls	r4, r1, #10
    7d44:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7d48:	485f      	ldr	r0, [pc, #380]	; (7ec8 <set_arm_clock+0x2b4>)
    7d4a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7d4c:	4a5f      	ldr	r2, [pc, #380]	; (7ecc <set_arm_clock+0x2b8>)
    7d4e:	4290      	cmp	r0, r2
    7d50:	d97f      	bls.n	7e52 <set_arm_clock+0x23e>
    7d52:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7ef8 <set_arm_clock+0x2e4>
    7d56:	226c      	movs	r2, #108	; 0x6c
    7d58:	485d      	ldr	r0, [pc, #372]	; (7ed0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d5a:	4d58      	ldr	r5, [pc, #352]	; (7ebc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7d5c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d60:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7d64:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7d68:	f8df c190 	ldr.w	ip, [pc, #400]	; 7efc <set_arm_clock+0x2e8>
    7d6c:	ea0e 0c0c 	and.w	ip, lr, ip
    7d70:	45d4      	cmp	ip, sl
    7d72:	d009      	beq.n	7d88 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7d78:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7d7c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7d80:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7d82:	682a      	ldr	r2, [r5, #0]
    7d84:	2a00      	cmp	r2, #0
    7d86:	dafc      	bge.n	7d82 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7d88:	4a46      	ldr	r2, [pc, #280]	; (7ea4 <set_arm_clock+0x290>)
    7d8a:	6915      	ldr	r5, [r2, #16]
    7d8c:	f005 0507 	and.w	r5, r5, #7
    7d90:	429d      	cmp	r5, r3
    7d92:	d003      	beq.n	7d9c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7d94:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7d96:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7d98:	03dd      	lsls	r5, r3, #15
    7d9a:	d4fc      	bmi.n	7d96 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7d9c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7da0:	d009      	beq.n	7db6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7da2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7da6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7daa:	4a3e      	ldr	r2, [pc, #248]	; (7ea4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7dac:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7dae:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7db0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7db2:	0799      	lsls	r1, r3, #30
    7db4:	d4fc      	bmi.n	7db0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7db6:	4947      	ldr	r1, [pc, #284]	; (7ed4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7db8:	4a47      	ldr	r2, [pc, #284]	; (7ed8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7dba:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7dbc:	4291      	cmp	r1, r2
    7dbe:	d83c      	bhi.n	7e3a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7dc0:	4b46      	ldr	r3, [pc, #280]	; (7edc <set_arm_clock+0x2c8>)
    7dc2:	09c9      	lsrs	r1, r1, #7
    7dc4:	fba3 3101 	umull	r3, r1, r3, r1
    7dc8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7dca:	1e4b      	subs	r3, r1, #1
    7dcc:	021b      	lsls	r3, r3, #8
    7dce:	ea86 0203 	eor.w	r2, r6, r3
    7dd2:	f412 7f40 	tst.w	r2, #768	; 0x300
    7dd6:	d006      	beq.n	7de6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7dd8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7de0:	4a30      	ldr	r2, [pc, #192]	; (7ea4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7de2:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    7de4:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7de6:	4a2f      	ldr	r2, [pc, #188]	; (7ea4 <set_arm_clock+0x290>)
    7de8:	6953      	ldr	r3, [r2, #20]
    7dea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7dee:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7df0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7df2:	069b      	lsls	r3, r3, #26
    7df4:	d4fc      	bmi.n	7df0 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7df6:	4b3a      	ldr	r3, [pc, #232]	; (7ee0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7df8:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7dfa:	fba3 2300 	umull	r2, r3, r3, r0
    7dfe:	f04f 32ff 	mov.w	r2, #4294967295
    7e02:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    7e06:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7e0a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    7e0e:	4a35      	ldr	r2, [pc, #212]	; (7ee4 <set_arm_clock+0x2d0>)
    7e10:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    7e12:	4a35      	ldr	r2, [pc, #212]	; (7ee8 <set_arm_clock+0x2d4>)
    7e14:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7e16:	4a35      	ldr	r2, [pc, #212]	; (7eec <set_arm_clock+0x2d8>)
    7e18:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e1a:	d208      	bcs.n	7e2e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7e1c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7e20:	4a21      	ldr	r2, [pc, #132]	; (7ea8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7e22:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    7e26:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7e28:	6813      	ldr	r3, [r2, #0]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	dafc      	bge.n	7e28 <set_arm_clock+0x214>
	}

	return frequency;
}
    7e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e32:	4673      	mov	r3, lr
    7e34:	e762      	b.n	7cfc <set_arm_clock+0xe8>
    7e36:	2712      	movs	r7, #18
    7e38:	e718      	b.n	7c6c <set_arm_clock+0x58>
    7e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    7e3e:	2104      	movs	r1, #4
    7e40:	e7c5      	b.n	7dce <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e42:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e46:	4820      	ldr	r0, [pc, #128]	; (7ec8 <set_arm_clock+0x2b4>)
    7e48:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e4a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e4c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e4e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e52:	4a27      	ldr	r2, [pc, #156]	; (7ef0 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e54:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7f00 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e58:	fba2 2000 	umull	r2, r0, r2, r0
    7e5c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    7e5e:	4825      	ldr	r0, [pc, #148]	; (7ef4 <set_arm_clock+0x2e0>)
    7e60:	2a36      	cmp	r2, #54	; 0x36
    7e62:	bf38      	it	cc
    7e64:	2236      	movcc	r2, #54	; 0x36
    7e66:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e6a:	ea42 0a0a 	orr.w	sl, r2, sl
    7e6e:	e774      	b.n	7d5a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e70:	ea4f 248c 	mov.w	r4, ip, lsl #10
    7e74:	2300      	movs	r3, #0
    7e76:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7e7a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7e7e:	46ac      	mov	ip, r5
    7e80:	e762      	b.n	7d48 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7e82:	461d      	mov	r5, r3
    7e84:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7e88:	4611      	mov	r1, r2
    7e8a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7e8e:	e713      	b.n	7cb8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7e90:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    7e92:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7e96:	4602      	mov	r2, r0
    7e98:	4631      	mov	r1, r6
    7e9a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7e9c:	46e6      	mov	lr, ip
    7e9e:	e753      	b.n	7d48 <set_arm_clock+0x134>
    7ea0:	1f78a400 	.word	0x1f78a400
    7ea4:	400fc000 	.word	0x400fc000
    7ea8:	40080000 	.word	0x40080000
    7eac:	23c34600 	.word	0x23c34600
    7eb0:	004cb223 	.word	0x004cb223
    7eb4:	51eb851f 	.word	0x51eb851f
    7eb8:	016e3600 	.word	0x016e3600
    7ebc:	400d8000 	.word	0x400d8000
    7ec0:	80003040 	.word	0x80003040
    7ec4:	269fb1ff 	.word	0x269fb1ff
    7ec8:	005b8d80 	.word	0x005b8d80
    7ecc:	4df67eff 	.word	0x4df67eff
    7ed0:	4d3f6400 	.word	0x4d3f6400
    7ed4:	08f0d17f 	.word	0x08f0d17f
    7ed8:	2cb4177f 	.word	0x2cb4177f
    7edc:	00e5109f 	.word	0x00e5109f
    7ee0:	431bde83 	.word	0x431bde83
    7ee4:	200085d0 	.word	0x200085d0
    7ee8:	200085cc 	.word	0x200085cc
    7eec:	20028f9c 	.word	0x20028f9c
    7ef0:	165e9f81 	.word	0x165e9f81
    7ef4:	00b71b00 	.word	0x00b71b00
    7ef8:	8000206c 	.word	0x8000206c
    7efc:	8001307f 	.word	0x8001307f
    7f00:	80002000 	.word	0x80002000

00007f04 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7f04:	b900      	cbnz	r0, 7f08 <delay+0x4>
    7f06:	4770      	bx	lr
{
    7f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f0c:	2101      	movs	r1, #1
    7f0e:	4681      	mov	r9, r0
    7f10:	4c21      	ldr	r4, [pc, #132]	; (7f98 <delay+0x94>)
    7f12:	4d22      	ldr	r5, [pc, #136]	; (7f9c <delay+0x98>)
    7f14:	4e22      	ldr	r6, [pc, #136]	; (7fa0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7f16:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7f1a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7f1c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f1e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7f22:	2b00      	cmp	r3, #0
    7f24:	d1f7      	bne.n	7f16 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7f26:	491f      	ldr	r1, [pc, #124]	; (7fa4 <delay+0xa0>)
    7f28:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7f2a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f2e:	f8df a078 	ldr.w	sl, [pc, #120]	; 7fa8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    7f32:	1a1b      	subs	r3, r3, r0
    7f34:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    7f36:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f3a:	f8da 2000 	ldr.w	r2, [sl]
    7f3e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    7f42:	455a      	cmp	r2, fp
    7f44:	bf94      	ite	ls
    7f46:	4490      	addls	r8, r2
    7f48:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7f4a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    7f4e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7f50:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7f52:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7f56:	2b00      	cmp	r3, #0
    7f58:	d1f7      	bne.n	7f4a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7f5a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f5c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    7f60:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    7f62:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f66:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    7f6a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    7f6e:	bf94      	ite	ls
    7f70:	4462      	addls	r2, ip
    7f72:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    7f76:	eba2 0208 	sub.w	r2, r2, r8
    7f7a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7f7e:	d306      	bcc.n	7f8e <delay+0x8a>
			if (--msec == 0) return;
    7f80:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    7f84:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7f88:	d1df      	bne.n	7f4a <delay+0x46>
}
    7f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7f8e:	f001 fb17 	bl	95c0 <yield>
		while ((micros() - start) >= 1000) {
    7f92:	4904      	ldr	r1, [pc, #16]	; (7fa4 <delay+0xa0>)
    7f94:	e7d9      	b.n	7f4a <delay+0x46>
    7f96:	bf00      	nop
    7f98:	20029460 	.word	0x20029460
    7f9c:	2002945c 	.word	0x2002945c
    7fa0:	20029458 	.word	0x20029458
    7fa4:	e0001000 	.word	0xe0001000
    7fa8:	20028f9c 	.word	0x20028f9c

00007fac <micros>:
{
    7fac:	b430      	push	{r4, r5}
    7fae:	4b0f      	ldr	r3, [pc, #60]	; (7fec <micros+0x40>)
    7fb0:	f04f 0c01 	mov.w	ip, #1
    7fb4:	4d0e      	ldr	r5, [pc, #56]	; (7ff0 <micros+0x44>)
    7fb6:	4c0f      	ldr	r4, [pc, #60]	; (7ff4 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7fb8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7fbc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7fbe:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7fc0:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    7fc4:	2a00      	cmp	r2, #0
    7fc6:	d1f7      	bne.n	7fb8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7fc8:	4b0b      	ldr	r3, [pc, #44]	; (7ff8 <micros+0x4c>)
    7fca:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7fcc:	4a0b      	ldr	r2, [pc, #44]	; (7ffc <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7fce:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7fd4:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    7fd6:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7fda:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7fde:	bc30      	pop	{r4, r5}
    7fe0:	428a      	cmp	r2, r1
    7fe2:	bf94      	ite	ls
    7fe4:	1880      	addls	r0, r0, r2
    7fe6:	1840      	addhi	r0, r0, r1
    7fe8:	4770      	bx	lr
    7fea:	bf00      	nop
    7fec:	20029460 	.word	0x20029460
    7ff0:	2002945c 	.word	0x2002945c
    7ff4:	20029458 	.word	0x20029458
    7ff8:	e0001000 	.word	0xe0001000
    7ffc:	20028f9c 	.word	0x20028f9c

00008000 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    8000:	2836      	cmp	r0, #54	; 0x36
    8002:	d816      	bhi.n	8032 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    8004:	0102      	lsls	r2, r0, #4
    8006:	4b10      	ldr	r3, [pc, #64]	; (8048 <digitalWrite+0x48>)
    8008:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    800c:	589b      	ldr	r3, [r3, r2]
{
    800e:	b410      	push	{r4}
	mask = p->mask;
    8010:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    8012:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    8014:	4214      	tst	r4, r2
    8016:	d005      	beq.n	8024 <digitalWrite+0x24>
		if (val) {
    8018:	b961      	cbnz	r1, 8034 <digitalWrite+0x34>
		}
	}
}
    801a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    801e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    8022:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8024:	6883      	ldr	r3, [r0, #8]
		if (val) {
    8026:	b151      	cbz	r1, 803e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8028:	4a08      	ldr	r2, [pc, #32]	; (804c <digitalWrite+0x4c>)
}
    802a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    802e:	601a      	str	r2, [r3, #0]
}
    8030:	4770      	bx	lr
    8032:	4770      	bx	lr
    8034:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    8038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    803c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    803e:	4a04      	ldr	r2, [pc, #16]	; (8050 <digitalWrite+0x50>)
}
    8040:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8044:	601a      	str	r2, [r3, #0]
}
    8046:	4770      	bx	lr
    8048:	200076b0 	.word	0x200076b0
    804c:	0001f038 	.word	0x0001f038
    8050:	00013038 	.word	0x00013038

00008054 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8054:	2836      	cmp	r0, #54	; 0x36
    8056:	d829      	bhi.n	80ac <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8058:	4b16      	ldr	r3, [pc, #88]	; (80b4 <pinMode+0x60>)
    805a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    805c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    805e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8062:	589a      	ldr	r2, [r3, r2]
{
    8064:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8066:	6853      	ldr	r3, [r2, #4]
    8068:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    806a:	d00e      	beq.n	808a <pinMode+0x36>
    806c:	2904      	cmp	r1, #4
    806e:	d00c      	beq.n	808a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8070:	ea23 0304 	bic.w	r3, r3, r4
    8074:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8076:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8078:	b1a9      	cbz	r1, 80a6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    807a:	2902      	cmp	r1, #2
    807c:	d017      	beq.n	80ae <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    807e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8080:	bf0c      	ite	eq
    8082:	4a0d      	ldreq	r2, [pc, #52]	; (80b8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8084:	4a0d      	ldrne	r2, [pc, #52]	; (80bc <pinMode+0x68>)
    8086:	601a      	str	r2, [r3, #0]
    8088:	e007      	b.n	809a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    808a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    808c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    808e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8090:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    8092:	d008      	beq.n	80a6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8094:	f640 0238 	movw	r2, #2104	; 0x838
    8098:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    809a:	6843      	ldr	r3, [r0, #4]
    809c:	2215      	movs	r2, #21
}
    809e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    80a2:	601a      	str	r2, [r3, #0]
}
    80a4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    80a6:	2238      	movs	r2, #56	; 0x38
    80a8:	601a      	str	r2, [r3, #0]
    80aa:	e7f6      	b.n	809a <pinMode+0x46>
    80ac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    80ae:	4a04      	ldr	r2, [pc, #16]	; (80c0 <pinMode+0x6c>)
    80b0:	601a      	str	r2, [r3, #0]
    80b2:	e7f2      	b.n	809a <pinMode+0x46>
    80b4:	200076b0 	.word	0x200076b0
    80b8:	00013038 	.word	0x00013038
    80bc:	00010038 	.word	0x00010038
    80c0:	0001f038 	.word	0x0001f038

000080c4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    80c4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    80c6:	f7f8 f92f 	bl	328 <setup>
	while (1) {
		loop();
    80ca:	f7f7 ffcd 	bl	68 <loop>
		yield();
    80ce:	f001 fa77 	bl	95c0 <yield>
	while (1) {
    80d2:	e7fa      	b.n	80ca <main+0x6>

000080d4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    80d4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    80d6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    80da:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    80de:	d16d      	bne.n	81bc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    80e0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    80e2:	d341      	bcc.n	8168 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    80e4:	f851 3b04 	ldr.w	r3, [r1], #4
    80e8:	f840 3b04 	str.w	r3, [r0], #4
    80ec:	f851 3b04 	ldr.w	r3, [r1], #4
    80f0:	f840 3b04 	str.w	r3, [r0], #4
    80f4:	f851 3b04 	ldr.w	r3, [r1], #4
    80f8:	f840 3b04 	str.w	r3, [r0], #4
    80fc:	f851 3b04 	ldr.w	r3, [r1], #4
    8100:	f840 3b04 	str.w	r3, [r0], #4
    8104:	f851 3b04 	ldr.w	r3, [r1], #4
    8108:	f840 3b04 	str.w	r3, [r0], #4
    810c:	f851 3b04 	ldr.w	r3, [r1], #4
    8110:	f840 3b04 	str.w	r3, [r0], #4
    8114:	f851 3b04 	ldr.w	r3, [r1], #4
    8118:	f840 3b04 	str.w	r3, [r0], #4
    811c:	f851 3b04 	ldr.w	r3, [r1], #4
    8120:	f840 3b04 	str.w	r3, [r0], #4
    8124:	f851 3b04 	ldr.w	r3, [r1], #4
    8128:	f840 3b04 	str.w	r3, [r0], #4
    812c:	f851 3b04 	ldr.w	r3, [r1], #4
    8130:	f840 3b04 	str.w	r3, [r0], #4
    8134:	f851 3b04 	ldr.w	r3, [r1], #4
    8138:	f840 3b04 	str.w	r3, [r0], #4
    813c:	f851 3b04 	ldr.w	r3, [r1], #4
    8140:	f840 3b04 	str.w	r3, [r0], #4
    8144:	f851 3b04 	ldr.w	r3, [r1], #4
    8148:	f840 3b04 	str.w	r3, [r0], #4
    814c:	f851 3b04 	ldr.w	r3, [r1], #4
    8150:	f840 3b04 	str.w	r3, [r0], #4
    8154:	f851 3b04 	ldr.w	r3, [r1], #4
    8158:	f840 3b04 	str.w	r3, [r0], #4
    815c:	f851 3b04 	ldr.w	r3, [r1], #4
    8160:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8164:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8166:	d2bd      	bcs.n	80e4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8168:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    816a:	d311      	bcc.n	8190 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    816c:	f851 3b04 	ldr.w	r3, [r1], #4
    8170:	f840 3b04 	str.w	r3, [r0], #4
    8174:	f851 3b04 	ldr.w	r3, [r1], #4
    8178:	f840 3b04 	str.w	r3, [r0], #4
    817c:	f851 3b04 	ldr.w	r3, [r1], #4
    8180:	f840 3b04 	str.w	r3, [r0], #4
    8184:	f851 3b04 	ldr.w	r3, [r1], #4
    8188:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    818c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    818e:	d2ed      	bcs.n	816c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8190:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8192:	d305      	bcc.n	81a0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8194:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8198:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    819c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    819e:	d2f9      	bcs.n	8194 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    81a0:	3204      	adds	r2, #4
	beq	.Ldone
    81a2:	d008      	beq.n	81b6 <memcpy+0xe2>

	lsls	r2, r2, #31
    81a4:	07d2      	lsls	r2, r2, #31
	itt ne
    81a6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    81a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    81ac:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    81b0:	d301      	bcc.n	81b6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    81b2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    81b4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    81b6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    81b8:	4770      	bx	lr
    81ba:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    81bc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    81be:	d313      	bcc.n	81e8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    81c0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    81c2:	d08d      	beq.n	80e0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    81c4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    81c8:	d08a      	beq.n	80e0 <memcpy+0xc>

	rsb	r3, #4
    81ca:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    81ce:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    81d0:	07db      	lsls	r3, r3, #31
	itt ne
    81d2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    81d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    81d8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    81dc:	d380      	bcc.n	80e0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    81de:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    81e2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    81e6:	e77b      	b.n	80e0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    81e8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    81ea:	d3d9      	bcc.n	81a0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    81ec:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    81ee:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    81f2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    81f6:	d2f9      	bcs.n	81ec <memcpy+0x118>

	ldrb	r3, [r1]
    81f8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    81fa:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    81fc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    81fe:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8200:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8202:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8204:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8206:	4770      	bx	lr

00008208 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    8208:	f001 bd00 	b.w	9c0c <free>

0000820c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    820c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8210:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    8212:	4666      	mov	r6, ip
	int i=0, j;
    8214:	2400      	movs	r4, #0
    8216:	e000      	b.n	821a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8218:	3401      	adds	r4, #1
		digit = val % radix;
    821a:	fbb0 f5f2 	udiv	r5, r0, r2
    821e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8222:	2b09      	cmp	r3, #9
    8224:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8228:	f103 0330 	add.w	r3, r3, #48	; 0x30
    822c:	fa5f fe8e 	uxtb.w	lr, lr
    8230:	bf98      	it	ls
    8232:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    8236:	4290      	cmp	r0, r2
		val /= radix;
    8238:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    823a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    823e:	d2eb      	bcs.n	8218 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    8240:	1c63      	adds	r3, r4, #1
    8242:	2200      	movs	r2, #0
    8244:	18c8      	adds	r0, r1, r3
    8246:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    8248:	b17c      	cbz	r4, 826a <ultoa+0x5e>
		t = buf[j];
    824a:	4662      	mov	r2, ip
    824c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8250:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8254:	eba1 030c 	sub.w	r3, r1, ip
    8258:	3202      	adds	r2, #2
		buf[j] = buf[i];
    825a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    825e:	3b01      	subs	r3, #1
    8260:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    8262:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8264:	4423      	add	r3, r4
    8266:	429a      	cmp	r2, r3
    8268:	dbef      	blt.n	824a <ultoa+0x3e>
	}
	return buf;
}
    826a:	4608      	mov	r0, r1
    826c:	bd70      	pop	{r4, r5, r6, pc}
    826e:	bf00      	nop

00008270 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    8270:	4a07      	ldr	r2, [pc, #28]	; (8290 <rtc_get+0x20>)
    8272:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8274:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    8276:	4619      	mov	r1, r3
    8278:	4684      	mov	ip, r0
    827a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    827c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    827e:	4299      	cmp	r1, r3
    8280:	d1f9      	bne.n	8276 <rtc_get+0x6>
    8282:	4584      	cmp	ip, r0
    8284:	d1f7      	bne.n	8276 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    8286:	0bdb      	lsrs	r3, r3, #15
}
    8288:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    828c:	4770      	bx	lr
    828e:	bf00      	nop
    8290:	400d4000 	.word	0x400d4000

00008294 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    8294:	4910      	ldr	r1, [pc, #64]	; (82d8 <rtc_set+0x44>)
    8296:	688b      	ldr	r3, [r1, #8]
    8298:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    829c:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    829e:	688b      	ldr	r3, [r1, #8]
    82a0:	07db      	lsls	r3, r3, #31
    82a2:	d4fc      	bmi.n	829e <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    82a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    82a6:	4a0c      	ldr	r2, [pc, #48]	; (82d8 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    82a8:	f023 0301 	bic.w	r3, r3, #1
    82ac:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    82ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
    82b0:	07d9      	lsls	r1, r3, #31
    82b2:	d4fc      	bmi.n	82ae <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    82b4:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    82b6:	4908      	ldr	r1, [pc, #32]	; (82d8 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    82b8:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    82ba:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    82bc:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    82be:	6b93      	ldr	r3, [r2, #56]	; 0x38
    82c0:	f043 0301 	orr.w	r3, r3, #1
    82c4:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    82c6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    82c8:	07db      	lsls	r3, r3, #31
    82ca:	d5fc      	bpl.n	82c6 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    82cc:	688b      	ldr	r3, [r1, #8]
    82ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    82d2:	608b      	str	r3, [r1, #8]
}
    82d4:	4770      	bx	lr
    82d6:	bf00      	nop
    82d8:	400d4000 	.word	0x400d4000

000082dc <unused_interrupt_vector>:
	__disable_irq();
    82dc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    82de:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    82e2:	4c4f      	ldr	r4, [pc, #316]	; (8420 <unused_interrupt_vector+0x144>)
    82e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    82e8:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    82ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    82f0:	4e4c      	ldr	r6, [pc, #304]	; (8424 <unused_interrupt_vector+0x148>)
	while (p < end) {
    82f2:	4d4d      	ldr	r5, [pc, #308]	; (8428 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    82f4:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    82f8:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    82fc:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8300:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8304:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8308:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    830c:	6993      	ldr	r3, [r2, #24]
    830e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8312:	69d3      	ldr	r3, [r2, #28]
    8314:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8318:	f000 f8d0 	bl	84bc <tempmonGetTemp>
    831c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8320:	f7ff ffa6 	bl	8270 <rtc_get>
	info->len = sizeof(*info) / 4;
    8324:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    8326:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    832a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    832e:	460b      	mov	r3, r1
    8330:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8334:	493d      	ldr	r1, [pc, #244]	; (842c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    8336:	1d30      	adds	r0, r6, #4
    8338:	405a      	eors	r2, r3
    833a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    833c:	f002 0301 	and.w	r3, r2, #1
    8340:	3c01      	subs	r4, #1
    8342:	fb01 f303 	mul.w	r3, r1, r3
    8346:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    834a:	d1f7      	bne.n	833c <unused_interrupt_vector+0x60>
	while (p < end) {
    834c:	42a8      	cmp	r0, r5
    834e:	d002      	beq.n	8356 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    8350:	6873      	ldr	r3, [r6, #4]
    8352:	4606      	mov	r6, r0
    8354:	e7ef      	b.n	8336 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    8356:	4b32      	ldr	r3, [pc, #200]	; (8420 <unused_interrupt_vector+0x144>)
    8358:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    835c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8360:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8364:	492f      	ldr	r1, [pc, #188]	; (8424 <unused_interrupt_vector+0x148>)
    8366:	4a32      	ldr	r2, [pc, #200]	; (8430 <unused_interrupt_vector+0x154>)
    8368:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    836c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    8370:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8374:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8378:	4a2e      	ldr	r2, [pc, #184]	; (8434 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    837a:	2502      	movs	r5, #2
    837c:	482e      	ldr	r0, [pc, #184]	; (8438 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    837e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8380:	492e      	ldr	r1, [pc, #184]	; (843c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8382:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8386:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8388:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    838a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    838c:	482c      	ldr	r0, [pc, #176]	; (8440 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    838e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8396:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8398:	680b      	ldr	r3, [r1, #0]
    839a:	4283      	cmp	r3, r0
    839c:	d83d      	bhi.n	841a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    839e:	4d26      	ldr	r5, [pc, #152]	; (8438 <unused_interrupt_vector+0x15c>)
    83a0:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    83a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    83a6:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    83aa:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    83ac:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    83ae:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    83b2:	4924      	ldr	r1, [pc, #144]	; (8444 <unused_interrupt_vector+0x168>)
    83b4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    83b8:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    83bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    83c0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    83c4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    83c8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    83cc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    83d0:	e001      	b.n	83d6 <unused_interrupt_vector+0xfa>
		usb_isr();
    83d2:	f000 f965 	bl	86a0 <usb_isr>
		if (PIT_TFLG0) {
    83d6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    83da:	2b00      	cmp	r3, #0
    83dc:	d0f9      	beq.n	83d2 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    83de:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    83e0:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    83e4:	2c4f      	cmp	r4, #79	; 0x4f
    83e6:	d9f4      	bls.n	83d2 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    83e8:	4b17      	ldr	r3, [pc, #92]	; (8448 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    83ea:	2002      	movs	r0, #2
    83ec:	4917      	ldr	r1, [pc, #92]	; (844c <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    83ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    83f2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    83f6:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    83f8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    83fc:	b93b      	cbnz	r3, 840e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    83fe:	4814      	ldr	r0, [pc, #80]	; (8450 <unused_interrupt_vector+0x174>)
    8400:	4914      	ldr	r1, [pc, #80]	; (8454 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8402:	4a0d      	ldr	r2, [pc, #52]	; (8438 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8404:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8406:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    840a:	2b00      	cmp	r3, #0
    840c:	d0fa      	beq.n	8404 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    840e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8412:	4a11      	ldr	r2, [pc, #68]	; (8458 <unused_interrupt_vector+0x17c>)
    8414:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8418:	e7fe      	b.n	8418 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    841a:	f7ff fbfb 	bl	7c14 <set_arm_clock>
    841e:	e7be      	b.n	839e <unused_interrupt_vector+0xc2>
    8420:	2027ff00 	.word	0x2027ff00
    8424:	2027ff80 	.word	0x2027ff80
    8428:	2027ffa8 	.word	0x2027ffa8
    842c:	edb88320 	.word	0xedb88320
    8430:	2027ffa0 	.word	0x2027ffa0
    8434:	400fc000 	.word	0x400fc000
    8438:	40084000 	.word	0x40084000
    843c:	200085d0 	.word	0x200085d0
    8440:	0bcd3d80 	.word	0x0bcd3d80
    8444:	00249f00 	.word	0x00249f00
    8448:	400d9000 	.word	0x400d9000
    844c:	402e0000 	.word	0x402e0000
    8450:	400f8000 	.word	0x400f8000
    8454:	0bad00f1 	.word	0x0bad00f1
    8458:	05fa0004 	.word	0x05fa0004

0000845c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    845c:	490a      	ldr	r1, [pc, #40]	; (8488 <_sbrk+0x2c>)
    845e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8460:	b138      	cbz	r0, 8472 <_sbrk+0x16>
{
    8462:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8464:	1813      	adds	r3, r2, r0
    8466:	4809      	ldr	r0, [pc, #36]	; (848c <_sbrk+0x30>)
    8468:	4283      	cmp	r3, r0
    846a:	d804      	bhi.n	8476 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    846c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    846e:	600b      	str	r3, [r1, #0]
}
    8470:	bd08      	pop	{r3, pc}
    8472:	4610      	mov	r0, r2
    8474:	4770      	bx	lr
                        errno = ENOMEM;
    8476:	f003 fc2f 	bl	bcd8 <__errno>
    847a:	230c      	movs	r3, #12
                        return (void *)-1;
    847c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    8480:	6003      	str	r3, [r0, #0]
}
    8482:	4610      	mov	r0, r2
    8484:	bd08      	pop	{r3, pc}
    8486:	bf00      	nop
    8488:	200085ec 	.word	0x200085ec
    848c:	20280000 	.word	0x20280000

00008490 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    8490:	2000      	movs	r0, #0
    8492:	4770      	bx	lr

00008494 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    8494:	f04f 30ff 	mov.w	r0, #4294967295
    8498:	4770      	bx	lr
    849a:	bf00      	nop

0000849c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    849c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    84a0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    84a2:	604b      	str	r3, [r1, #4]
}
    84a4:	4770      	bx	lr
    84a6:	bf00      	nop

000084a8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    84a8:	2001      	movs	r0, #1
    84aa:	4770      	bx	lr

000084ac <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    84ac:	f04f 30ff 	mov.w	r0, #4294967295
    84b0:	4770      	bx	lr
    84b2:	bf00      	nop

000084b4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    84b4:	bf30      	wfi
    84b6:	e7fd      	b.n	84b4 <abort>

000084b8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    84b8:	f7ff bf10 	b.w	82dc <unused_interrupt_vector>

000084bc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    84bc:	4a12      	ldr	r2, [pc, #72]	; (8508 <tempmonGetTemp+0x4c>)
    84be:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    84c2:	075b      	lsls	r3, r3, #29
    84c4:	d5fb      	bpl.n	84be <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    84c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    84ca:	4810      	ldr	r0, [pc, #64]	; (850c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    84cc:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    84d0:	490f      	ldr	r1, [pc, #60]	; (8510 <tempmonGetTemp+0x54>)
    84d2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    84d6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    84da:	ed91 6a00 	vldr	s12, [r1]
    84de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    84e2:	4a0c      	ldr	r2, [pc, #48]	; (8514 <tempmonGetTemp+0x58>)
    84e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    84e8:	4b0b      	ldr	r3, [pc, #44]	; (8518 <tempmonGetTemp+0x5c>)
    84ea:	edd2 6a00 	vldr	s13, [r2]
    84ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
    84f2:	ed93 7a00 	vldr	s14, [r3]
    84f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    84fa:	ee67 7a86 	vmul.f32	s15, s15, s12
    84fe:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    8502:	ee37 0a40 	vsub.f32	s0, s14, s0
    8506:	4770      	bx	lr
    8508:	400d8100 	.word	0x400d8100
    850c:	20028f8c 	.word	0x20028f8c
    8510:	20028f94 	.word	0x20028f94
    8514:	20028f98 	.word	0x20028f98
    8518:	20028f90 	.word	0x20028f90

0000851c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    851c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    851e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8520:	b11b      	cbz	r3, 852a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8522:	6853      	ldr	r3, [r2, #4]
    8524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8528:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    852a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    852c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    852e:	b33c      	cbz	r4, 8580 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8530:	4b1a      	ldr	r3, [pc, #104]	; (859c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    8532:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8534:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8538:	420c      	tst	r4, r1
    853a:	d11d      	bne.n	8578 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    853c:	4e18      	ldr	r6, [pc, #96]	; (85a0 <schedule_transfer+0x84>)
    853e:	6877      	ldr	r7, [r6, #4]
    8540:	e004      	b.n	854c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8542:	6874      	ldr	r4, [r6, #4]
    8544:	1be4      	subs	r4, r4, r7
    8546:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    854a:	d20b      	bcs.n	8564 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    854c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8550:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    8554:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8558:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    855c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8560:	0464      	lsls	r4, r4, #17
    8562:	d5ee      	bpl.n	8542 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8564:	400d      	ands	r5, r1
    8566:	d107      	bne.n	8578 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8568:	4c0c      	ldr	r4, [pc, #48]	; (859c <schedule_transfer+0x80>)
		endpoint->status = 0;
    856a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    856e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8572:	430b      	orrs	r3, r1
    8574:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8578:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    857a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    857c:	bcf0      	pop	{r4, r5, r6, r7}
    857e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8580:	4d06      	ldr	r5, [pc, #24]	; (859c <schedule_transfer+0x80>)
	endpoint->status = 0;
    8582:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    8586:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    858a:	430b      	orrs	r3, r1
    858c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8590:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    8592:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8594:	b662      	cpsie	i
}
    8596:	bcf0      	pop	{r4, r5, r6, r7}
    8598:	4770      	bx	lr
    859a:	bf00      	nop
    859c:	402e0000 	.word	0x402e0000
    85a0:	e0001000 	.word	0xe0001000

000085a4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    85a4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    85a6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    85a8:	b19d      	cbz	r5, 85d2 <run_callbacks+0x2e>
    85aa:	4606      	mov	r6, r0
    85ac:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    85ae:	2400      	movs	r4, #0
    85b0:	e003      	b.n	85ba <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    85b2:	6812      	ldr	r2, [r2, #0]
		count++;
    85b4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    85b6:	2a01      	cmp	r2, #1
    85b8:	d00c      	beq.n	85d4 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    85ba:	6853      	ldr	r3, [r2, #4]
    85bc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    85c0:	d0f7      	beq.n	85b2 <run_callbacks+0xe>
			ep->first_transfer = t;
    85c2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    85c4:	b12c      	cbz	r4, 85d2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    85c6:	4628      	mov	r0, r5
		ep->callback_function(first);
    85c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    85ca:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    85cc:	4798      	blx	r3
	while (count) {
    85ce:	3c01      	subs	r4, #1
    85d0:	d1f9      	bne.n	85c6 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    85d2:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    85d4:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    85d8:	e7f4      	b.n	85c4 <run_callbacks+0x20>
    85da:	bf00      	nop

000085dc <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    85dc:	b430      	push	{r4, r5}
	if (len > 0) {
    85de:	b9d9      	cbnz	r1, 8618 <endpoint0_transmit.constprop.0+0x3c>
    85e0:	4c1f      	ldr	r4, [pc, #124]	; (8660 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    85e2:	4b20      	ldr	r3, [pc, #128]	; (8664 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    85e4:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    85e6:	4a20      	ldr	r2, [pc, #128]	; (8668 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    85e8:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    85ea:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    85ee:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    85f0:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    85f2:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    85f6:	2480      	movs	r4, #128	; 0x80
    85f8:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    85fa:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    85fe:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8602:	481a      	ldr	r0, [pc, #104]	; (866c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8604:	432b      	orrs	r3, r5
    8606:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    860a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    860c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8610:	2b00      	cmp	r3, #0
    8612:	d1fb      	bne.n	860c <endpoint0_transmit.constprop.0+0x30>
}
    8614:	bc30      	pop	{r4, r5}
    8616:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8618:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    861a:	4b15      	ldr	r3, [pc, #84]	; (8670 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    861c:	4c10      	ldr	r4, [pc, #64]	; (8660 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    861e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8620:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8624:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8626:	4a10      	ldr	r2, [pc, #64]	; (8668 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8628:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    862a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    862e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8630:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8632:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8636:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8638:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    863a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    863e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8642:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    8644:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8646:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8648:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    864a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    864e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8652:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8656:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    865a:	2b00      	cmp	r3, #0
    865c:	d1fb      	bne.n	8656 <endpoint0_transmit.constprop.0+0x7a>
    865e:	e7c0      	b.n	85e2 <endpoint0_transmit.constprop.0+0x6>
    8660:	20000000 	.word	0x20000000
    8664:	20008ec0 	.word	0x20008ec0
    8668:	402e0000 	.word	0x402e0000
    866c:	20028e34 	.word	0x20028e34
    8670:	20008ee0 	.word	0x20008ee0

00008674 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    8674:	4908      	ldr	r1, [pc, #32]	; (8698 <usb_stop_sof_interrupts+0x24>)
    8676:	2201      	movs	r2, #1
    8678:	780b      	ldrb	r3, [r1, #0]
    867a:	fa02 f000 	lsl.w	r0, r2, r0
    867e:	ea23 0000 	bic.w	r0, r3, r0
    8682:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    8684:	b930      	cbnz	r0, 8694 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8686:	4a05      	ldr	r2, [pc, #20]	; (869c <usb_stop_sof_interrupts+0x28>)
    8688:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    868c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8690:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    8694:	4770      	bx	lr
    8696:	bf00      	nop
    8698:	200294a6 	.word	0x200294a6
    869c:	402e0000 	.word	0x402e0000

000086a0 <usb_isr>:
{
    86a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    86a4:	4c97      	ldr	r4, [pc, #604]	; (8904 <usb_isr+0x264>)
{
    86a6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    86a8:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    86ac:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    86ae:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    86b2:	d553      	bpl.n	875c <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    86b4:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    86b8:	2a00      	cmp	r2, #0
    86ba:	d04a      	beq.n	8752 <usb_isr+0xb2>
    86bc:	4e92      	ldr	r6, [pc, #584]	; (8908 <usb_isr+0x268>)
    86be:	f8df a260 	ldr.w	sl, [pc, #608]	; 8920 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    86c2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8938 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    86c6:	f8df b274 	ldr.w	fp, [pc, #628]	; 893c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    86ca:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8940 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    86ce:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    86d2:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    86d6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    86da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    86de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    86e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    86e6:	049d      	lsls	r5, r3, #18
    86e8:	d5f5      	bpl.n	86d6 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    86ea:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    86ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    86f2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    86f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    86fa:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    86fe:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    8702:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    8706:	d1fa      	bne.n	86fe <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    8708:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    870a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    870c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    8710:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    8714:	f000 81cf 	beq.w	8ab6 <usb_isr+0x416>
    8718:	f200 80db 	bhi.w	88d2 <usb_isr+0x232>
    871c:	f240 3102 	movw	r1, #770	; 0x302
    8720:	428b      	cmp	r3, r1
    8722:	f000 81e7 	beq.w	8af4 <usb_isr+0x454>
    8726:	f200 809a 	bhi.w	885e <usb_isr+0x1be>
    872a:	2b82      	cmp	r3, #130	; 0x82
    872c:	f000 81cb 	beq.w	8ac6 <usb_isr+0x426>
    8730:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8734:	f040 808a 	bne.w	884c <usb_isr+0x1ac>
		if (endpoint > 7) break;
    8738:	f010 0f78 	tst.w	r0, #120	; 0x78
    873c:	b283      	uxth	r3, r0
    873e:	f000 8203 	beq.w	8b48 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8742:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8746:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    874a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    874e:	2a00      	cmp	r2, #0
    8750:	d1bd      	bne.n	86ce <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8752:	4a6c      	ldr	r2, [pc, #432]	; (8904 <usb_isr+0x264>)
    8754:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8758:	2b00      	cmp	r3, #0
    875a:	d142      	bne.n	87e2 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    875c:	067e      	lsls	r6, r7, #25
    875e:	d516      	bpl.n	878e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8760:	4b68      	ldr	r3, [pc, #416]	; (8904 <usb_isr+0x264>)
    8762:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    8766:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    876a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    876e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8772:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8776:	2c00      	cmp	r4, #0
    8778:	d1fb      	bne.n	8772 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    877a:	f04f 32ff 	mov.w	r2, #4294967295
    877e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8782:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    8786:	f000 fd29 	bl	91dc <usb_serial_reset>
		endpointN_notify_mask = 0;
    878a:	4b60      	ldr	r3, [pc, #384]	; (890c <usb_isr+0x26c>)
    878c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    878e:	01fc      	lsls	r4, r7, #7
    8790:	d503      	bpl.n	879a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8792:	4b5f      	ldr	r3, [pc, #380]	; (8910 <usb_isr+0x270>)
    8794:	681b      	ldr	r3, [r3, #0]
    8796:	b103      	cbz	r3, 879a <usb_isr+0xfa>
    8798:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    879a:	01b8      	lsls	r0, r7, #6
    879c:	d503      	bpl.n	87a6 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    879e:	4b5d      	ldr	r3, [pc, #372]	; (8914 <usb_isr+0x274>)
    87a0:	681b      	ldr	r3, [r3, #0]
    87a2:	b103      	cbz	r3, 87a6 <usb_isr+0x106>
    87a4:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    87a6:	0779      	lsls	r1, r7, #29
    87a8:	d508      	bpl.n	87bc <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    87aa:	4b56      	ldr	r3, [pc, #344]	; (8904 <usb_isr+0x264>)
    87ac:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    87b0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    87b4:	d047      	beq.n	8846 <usb_isr+0x1a6>
			usb_high_speed = 1;
    87b6:	4b58      	ldr	r3, [pc, #352]	; (8918 <usb_isr+0x278>)
    87b8:	2201      	movs	r2, #1
    87ba:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    87bc:	4b51      	ldr	r3, [pc, #324]	; (8904 <usb_isr+0x264>)
    87be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    87c2:	061a      	lsls	r2, r3, #24
    87c4:	d50a      	bpl.n	87dc <usb_isr+0x13c>
    87c6:	063b      	lsls	r3, r7, #24
    87c8:	d508      	bpl.n	87dc <usb_isr+0x13c>
		if (usb_reboot_timer) {
    87ca:	4a54      	ldr	r2, [pc, #336]	; (891c <usb_isr+0x27c>)
    87cc:	7813      	ldrb	r3, [r2, #0]
    87ce:	b12b      	cbz	r3, 87dc <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    87d0:	3b01      	subs	r3, #1
    87d2:	b2db      	uxtb	r3, r3
    87d4:	7013      	strb	r3, [r2, #0]
    87d6:	2b00      	cmp	r3, #0
    87d8:	f000 8272 	beq.w	8cc0 <usb_isr+0x620>
}
    87dc:	b003      	add	sp, #12
    87de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    87e2:	494f      	ldr	r1, [pc, #316]	; (8920 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    87e4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    87e8:	6808      	ldr	r0, [r1, #0]
    87ea:	4203      	tst	r3, r0
    87ec:	f040 81d1 	bne.w	8b92 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    87f0:	4a46      	ldr	r2, [pc, #280]	; (890c <usb_isr+0x26c>)
    87f2:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    87f4:	401c      	ands	r4, r3
    87f6:	d0b1      	beq.n	875c <usb_isr+0xbc>
				while (tx) {
    87f8:	ea5f 4814 	movs.w	r8, r4, lsr #16
    87fc:	d010      	beq.n	8820 <usb_isr+0x180>
    87fe:	4e42      	ldr	r6, [pc, #264]	; (8908 <usb_isr+0x268>)
					tx &= ~(1<<p);
    8800:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8804:	fa98 f5a8 	rbit	r5, r8
    8808:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    880c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    8810:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8814:	3040      	adds	r0, #64	; 0x40
    8816:	f7ff fec5 	bl	85a4 <run_callbacks>
				while (tx) {
    881a:	ea38 0805 	bics.w	r8, r8, r5
    881e:	d1f1      	bne.n	8804 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    8820:	b2a4      	uxth	r4, r4
				while(rx) {
    8822:	2c00      	cmp	r4, #0
    8824:	d09a      	beq.n	875c <usb_isr+0xbc>
    8826:	4e38      	ldr	r6, [pc, #224]	; (8908 <usb_isr+0x268>)
					rx &= ~(1<<p);
    8828:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    882c:	fa94 f5a4 	rbit	r5, r4
    8830:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    8834:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    8838:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    883c:	f7ff feb2 	bl	85a4 <run_callbacks>
				while(rx) {
    8840:	43ac      	bics	r4, r5
    8842:	d1f3      	bne.n	882c <usb_isr+0x18c>
    8844:	e78a      	b.n	875c <usb_isr+0xbc>
			usb_high_speed = 0;
    8846:	4a34      	ldr	r2, [pc, #208]	; (8918 <usb_isr+0x278>)
    8848:	7013      	strb	r3, [r2, #0]
    884a:	e7b7      	b.n	87bc <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    884c:	2b80      	cmp	r3, #128	; 0x80
    884e:	f47f af78 	bne.w	8742 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    8852:	4834      	ldr	r0, [pc, #208]	; (8924 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    8854:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    8856:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8858:	f7ff fec0 	bl	85dc <endpoint0_transmit.constprop.0>
		return;
    885c:	e775      	b.n	874a <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    885e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    8862:	f000 810b 	beq.w	8a7c <usb_isr+0x3dc>
    8866:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    886a:	2b01      	cmp	r3, #1
    886c:	f63f af69 	bhi.w	8742 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8870:	4b2d      	ldr	r3, [pc, #180]	; (8928 <usb_isr+0x288>)
    8872:	685d      	ldr	r5, [r3, #4]
    8874:	2d00      	cmp	r5, #0
    8876:	f43f af64 	beq.w	8742 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    887a:	fa1f fc8c 	uxth.w	ip, ip
    887e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8882:	e004      	b.n	888e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8884:	691d      	ldr	r5, [r3, #16]
    8886:	330c      	adds	r3, #12
    8888:	2d00      	cmp	r5, #0
    888a:	f43f af5a 	beq.w	8742 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    888e:	881a      	ldrh	r2, [r3, #0]
    8890:	4572      	cmp	r2, lr
    8892:	d1f7      	bne.n	8884 <usb_isr+0x1e4>
    8894:	885a      	ldrh	r2, [r3, #2]
    8896:	4562      	cmp	r2, ip
    8898:	d1f4      	bne.n	8884 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    889a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    889e:	2a03      	cmp	r2, #3
    88a0:	f000 81a5 	beq.w	8bee <usb_isr+0x54e>
					datalen = list->length;
    88a4:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    88a6:	0c00      	lsrs	r0, r0, #16
    88a8:	4282      	cmp	r2, r0
    88aa:	bf28      	it	cs
    88ac:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    88ae:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    88b2:	f040 81a1 	bne.w	8bf8 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    88b6:	4b18      	ldr	r3, [pc, #96]	; (8918 <usb_isr+0x278>)
    88b8:	491c      	ldr	r1, [pc, #112]	; (892c <usb_isr+0x28c>)
    88ba:	7818      	ldrb	r0, [r3, #0]
    88bc:	4b1c      	ldr	r3, [pc, #112]	; (8930 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    88be:	9201      	str	r2, [sp, #4]
    88c0:	2800      	cmp	r0, #0
    88c2:	bf18      	it	ne
    88c4:	4619      	movne	r1, r3
    88c6:	481b      	ldr	r0, [pc, #108]	; (8934 <usb_isr+0x294>)
    88c8:	f7ff fc04 	bl	80d4 <memcpy>
    88cc:	4d19      	ldr	r5, [pc, #100]	; (8934 <usb_isr+0x294>)
    88ce:	9a01      	ldr	r2, [sp, #4]
    88d0:	e1e1      	b.n	8c96 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    88d2:	f242 2121 	movw	r1, #8737	; 0x2221
    88d6:	428b      	cmp	r3, r1
    88d8:	d07c      	beq.n	89d4 <usb_isr+0x334>
    88da:	d933      	bls.n	8944 <usb_isr+0x2a4>
    88dc:	f242 3121 	movw	r1, #8993	; 0x2321
    88e0:	428b      	cmp	r3, r1
    88e2:	f000 8081 	beq.w	89e8 <usb_isr+0x348>
    88e6:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    88ea:	428b      	cmp	r3, r1
    88ec:	f47f af29 	bne.w	8742 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    88f0:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    88f4:	b283      	uxth	r3, r0
    88f6:	f47f af24 	bne.w	8742 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    88fa:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    88fe:	f363 0c0f 	bfi	ip, r3, #0, #16
    8902:	e7b5      	b.n	8870 <usb_isr+0x1d0>
    8904:	402e0000 	.word	0x402e0000
    8908:	20000000 	.word	0x20000000
    890c:	20028e38 	.word	0x20028e38
    8910:	20029480 	.word	0x20029480
    8914:	20029484 	.word	0x20029484
    8918:	200294ac 	.word	0x200294ac
    891c:	200294ad 	.word	0x200294ad
    8920:	20028e34 	.word	0x20028e34
    8924:	20028f54 	.word	0x20028f54
    8928:	20008404 	.word	0x20008404
    892c:	6000279c 	.word	0x6000279c
    8930:	60002800 	.word	0x60002800
    8934:	20200800 	.word	0x20200800
    8938:	20028e2c 	.word	0x20028e2c
    893c:	b8c6cf5d 	.word	0xb8c6cf5d
    8940:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    8944:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8948:	d066      	beq.n	8a18 <usb_isr+0x378>
    894a:	f242 0121 	movw	r1, #8225	; 0x2021
    894e:	428b      	cmp	r3, r1
    8950:	f47f aef7 	bne.w	8742 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    8954:	0c03      	lsrs	r3, r0, #16
    8956:	2b07      	cmp	r3, #7
    8958:	f47f aef3 	bne.w	8742 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    895c:	4bb2      	ldr	r3, [pc, #712]	; (8c28 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    895e:	49b3      	ldr	r1, [pc, #716]	; (8c2c <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    8960:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8962:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    8964:	49b2      	ldr	r1, [pc, #712]	; (8c30 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8966:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8968:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    896c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    8970:	2201      	movs	r2, #1
    8972:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8974:	4aaf      	ldr	r2, [pc, #700]	; (8c34 <usb_isr+0x594>)
    8976:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8978:	4aaf      	ldr	r2, [pc, #700]	; (8c38 <usb_isr+0x598>)
    897a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    897c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    8980:	f041 0101 	orr.w	r1, r1, #1
    8984:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8988:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    898c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8990:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8992:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    8994:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8998:	2b00      	cmp	r3, #0
    899a:	d1fb      	bne.n	8994 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    899c:	4aa7      	ldr	r2, [pc, #668]	; (8c3c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    899e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    89a0:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    89a2:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89a4:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    89a6:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89a8:	f248 0380 	movw	r3, #32896	; 0x8080
    89ac:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    89b2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    89b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    89be:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    89c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    89c6:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    89ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    89ce:	2b00      	cmp	r3, #0
    89d0:	d1fb      	bne.n	89ca <usb_isr+0x32a>
    89d2:	e6ba      	b.n	874a <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    89d4:	b280      	uxth	r0, r0
    89d6:	b938      	cbnz	r0, 89e8 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    89d8:	4b99      	ldr	r3, [pc, #612]	; (8c40 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    89da:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    89de:	6819      	ldr	r1, [r3, #0]
    89e0:	4b98      	ldr	r3, [pc, #608]	; (8c44 <usb_isr+0x5a4>)
    89e2:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    89e4:	4b98      	ldr	r3, [pc, #608]	; (8c48 <usb_isr+0x5a8>)
    89e6:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    89e8:	4b94      	ldr	r3, [pc, #592]	; (8c3c <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    89ea:	2200      	movs	r2, #0
    89ec:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    89ee:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    89f0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    89f2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    89f4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    89f6:	2280      	movs	r2, #128	; 0x80
    89f8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    89fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    89fe:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a02:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a0a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8a0e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a12:	2b00      	cmp	r3, #0
    8a14:	d1fb      	bne.n	8a0e <usb_isr+0x36e>
    8a16:	e698      	b.n	874a <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    8a18:	f3c2 4207 	ubfx	r2, r2, #16, #8
    8a1c:	4b8b      	ldr	r3, [pc, #556]	; (8c4c <usb_isr+0x5ac>)
    8a1e:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8a20:	4b8b      	ldr	r3, [pc, #556]	; (8c50 <usb_isr+0x5b0>)
    8a22:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8a26:	4b8b      	ldr	r3, [pc, #556]	; (8c54 <usb_isr+0x5b4>)
    8a28:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8a2c:	4b8a      	ldr	r3, [pc, #552]	; (8c58 <usb_isr+0x5b8>)
    8a2e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    8a32:	f000 fbd5 	bl	91e0 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    8a36:	2280      	movs	r2, #128	; 0x80
    8a38:	4629      	mov	r1, r5
    8a3a:	4888      	ldr	r0, [pc, #544]	; (8c5c <usb_isr+0x5bc>)
    8a3c:	f003 f816 	bl	ba6c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    8a40:	4b87      	ldr	r3, [pc, #540]	; (8c60 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a42:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    8a44:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    8a48:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    8a4c:	4b7b      	ldr	r3, [pc, #492]	; (8c3c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8a4e:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a50:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    8a52:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a54:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    8a56:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8a58:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a5a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a5e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a6a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8a6e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    8a72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a76:	2b00      	cmp	r3, #0
    8a78:	d1fb      	bne.n	8a72 <usb_isr+0x3d2>
    8a7a:	e666      	b.n	874a <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    8a7c:	4b6f      	ldr	r3, [pc, #444]	; (8c3c <usb_isr+0x59c>)
    8a7e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8a80:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8a82:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a84:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8a86:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a88:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a8a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a8c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a90:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a94:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a9c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8aa0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d1fb      	bne.n	8aa0 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8aa8:	0c13      	lsrs	r3, r2, #16
    8aaa:	065b      	lsls	r3, r3, #25
    8aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8ab0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    8ab4:	e649      	b.n	874a <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    8ab6:	4b65      	ldr	r3, [pc, #404]	; (8c4c <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8ab8:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8aba:	486a      	ldr	r0, [pc, #424]	; (8c64 <usb_isr+0x5c4>)
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8ac0:	f7ff fd8c 	bl	85dc <endpoint0_transmit.constprop.0>
		return;
    8ac4:	e641      	b.n	874a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8ac6:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8ac8:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8acc:	f47f ae39 	bne.w	8742 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8ad4:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8ad8:	4a62      	ldr	r2, [pc, #392]	; (8c64 <usb_isr+0x5c4>)
    8ada:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8adc:	0618      	lsls	r0, r3, #24
    8ade:	f100 809e 	bmi.w	8c1e <usb_isr+0x57e>
    8ae2:	07cb      	lsls	r3, r1, #31
    8ae4:	d501      	bpl.n	8aea <usb_isr+0x44a>
			reply_buffer[0] = 1;
    8ae6:	2301      	movs	r3, #1
    8ae8:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8aea:	2102      	movs	r1, #2
    8aec:	485d      	ldr	r0, [pc, #372]	; (8c64 <usb_isr+0x5c4>)
    8aee:	f7ff fd75 	bl	85dc <endpoint0_transmit.constprop.0>
		return;
    8af2:	e62a      	b.n	874a <usb_isr+0xaa>
		if (endpoint > 7) break;
    8af4:	f010 0f78 	tst.w	r0, #120	; 0x78
    8af8:	b283      	uxth	r3, r0
    8afa:	f47f ae22 	bne.w	8742 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    8afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8b02:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8b06:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8b0a:	bf14      	ite	ne
    8b0c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8b10:	f043 0301 	orreq.w	r3, r3, #1
    8b14:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8b18:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8b1a:	4b48      	ldr	r3, [pc, #288]	; (8c3c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8b1c:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8b1e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8b20:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8b22:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8b24:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b26:	2280      	movs	r2, #128	; 0x80
    8b28:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b2a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b2e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8b32:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b3a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8b3e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b42:	2b00      	cmp	r3, #0
    8b44:	d1fb      	bne.n	8b3e <usb_isr+0x49e>
    8b46:	e600      	b.n	874a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    8b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8b4c:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8b50:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8b54:	bf14      	ite	ne
    8b56:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8b5a:	f023 0301 	biceq.w	r3, r3, #1
    8b5e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8b62:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8b64:	4b35      	ldr	r3, [pc, #212]	; (8c3c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    8b66:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8b68:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8b6a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8b6c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8b6e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8b70:	2280      	movs	r2, #128	; 0x80
    8b72:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8b74:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b78:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8b7c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8b84:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8b88:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d1fb      	bne.n	8b88 <usb_isr+0x4e8>
    8b90:	e5db      	b.n	874a <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    8b92:	2000      	movs	r0, #0
    8b94:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8b96:	4926      	ldr	r1, [pc, #152]	; (8c30 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8b98:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8b9a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8b9c:	f242 0121 	movw	r1, #8225	; 0x2021
    8ba0:	428c      	cmp	r4, r1
    8ba2:	f47f ae25 	bne.w	87f0 <usb_isr+0x150>
    8ba6:	b280      	uxth	r0, r0
    8ba8:	2800      	cmp	r0, #0
    8baa:	f47f ae21 	bne.w	87f0 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8bae:	492e      	ldr	r1, [pc, #184]	; (8c68 <usb_isr+0x5c8>)
    8bb0:	4c2e      	ldr	r4, [pc, #184]	; (8c6c <usb_isr+0x5cc>)
    8bb2:	c903      	ldmia	r1, {r0, r1}
    8bb4:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    8bb6:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8bb8:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8bbc:	6020      	str	r0, [r4, #0]
    8bbe:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8bc0:	f47f ae16 	bne.w	87f0 <usb_isr+0x150>
	__disable_irq();
    8bc4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    8bc6:	482a      	ldr	r0, [pc, #168]	; (8c70 <usb_isr+0x5d0>)
    8bc8:	7801      	ldrb	r1, [r0, #0]
    8bca:	f041 0108 	orr.w	r1, r1, #8
    8bce:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8bd0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8bd4:	060d      	lsls	r5, r1, #24
    8bd6:	d405      	bmi.n	8be4 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8bd8:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8bda:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8bdc:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8be0:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    8be4:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    8be6:	4a23      	ldr	r2, [pc, #140]	; (8c74 <usb_isr+0x5d4>)
    8be8:	2150      	movs	r1, #80	; 0x50
    8bea:	7011      	strb	r1, [r2, #0]
    8bec:	e600      	b.n	87f0 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8bee:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8bf0:	782a      	ldrb	r2, [r5, #0]
    8bf2:	4282      	cmp	r2, r0
    8bf4:	bf28      	it	cs
    8bf6:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    8bf8:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8bfc:	d144      	bne.n	8c88 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8bfe:	4b1e      	ldr	r3, [pc, #120]	; (8c78 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8c00:	4d1e      	ldr	r5, [pc, #120]	; (8c7c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    8c02:	7818      	ldrb	r0, [r3, #0]
    8c04:	491e      	ldr	r1, [pc, #120]	; (8c80 <usb_isr+0x5e0>)
    8c06:	4b1f      	ldr	r3, [pc, #124]	; (8c84 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8c08:	9201      	str	r2, [sp, #4]
    8c0a:	2800      	cmp	r0, #0
    8c0c:	bf18      	it	ne
    8c0e:	4619      	movne	r1, r3
    8c10:	4628      	mov	r0, r5
    8c12:	f7ff fa5f 	bl	80d4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    8c16:	2307      	movs	r3, #7
    8c18:	706b      	strb	r3, [r5, #1]
    8c1a:	9a01      	ldr	r2, [sp, #4]
    8c1c:	e03b      	b.n	8c96 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8c1e:	03c9      	lsls	r1, r1, #15
    8c20:	f53f af61 	bmi.w	8ae6 <usb_isr+0x446>
    8c24:	e761      	b.n	8aea <usb_isr+0x44a>
    8c26:	bf00      	nop
    8c28:	20008ee0 	.word	0x20008ee0
    8c2c:	20029e2c 	.word	0x20029e2c
    8c30:	2000c080 	.word	0x2000c080
    8c34:	00070080 	.word	0x00070080
    8c38:	2002ae2c 	.word	0x2002ae2c
    8c3c:	20008ec0 	.word	0x20008ec0
    8c40:	2002945c 	.word	0x2002945c
    8c44:	2002947c 	.word	0x2002947c
    8c48:	200294aa 	.word	0x200294aa
    8c4c:	200294ab 	.word	0x200294ab
    8c50:	00cc0002 	.word	0x00cc0002
    8c54:	000200c8 	.word	0x000200c8
    8c58:	00c80002 	.word	0x00c80002
    8c5c:	20000080 	.word	0x20000080
    8c60:	74d59319 	.word	0x74d59319
    8c64:	20028f54 	.word	0x20028f54
    8c68:	20028e2c 	.word	0x20028e2c
    8c6c:	20029474 	.word	0x20029474
    8c70:	200294a6 	.word	0x200294a6
    8c74:	200294ad 	.word	0x200294ad
    8c78:	200294ac 	.word	0x200294ac
    8c7c:	20200800 	.word	0x20200800
    8c80:	60002800 	.word	0x60002800
    8c84:	6000279c 	.word	0x6000279c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8c88:	4629      	mov	r1, r5
    8c8a:	4d10      	ldr	r5, [pc, #64]	; (8ccc <usb_isr+0x62c>)
    8c8c:	9201      	str	r2, [sp, #4]
    8c8e:	4628      	mov	r0, r5
    8c90:	f7ff fa20 	bl	80d4 <memcpy>
    8c94:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8c96:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8c9a:	4415      	add	r5, r2
	asm("dsb");
    8c9c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8ca0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8ca4:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    8ca8:	3320      	adds	r3, #32
	} while (location < end_addr);
    8caa:	429d      	cmp	r5, r3
    8cac:	d8fa      	bhi.n	8ca4 <usb_isr+0x604>
	asm("dsb");
    8cae:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8cb2:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8cb6:	4805      	ldr	r0, [pc, #20]	; (8ccc <usb_isr+0x62c>)
    8cb8:	4611      	mov	r1, r2
    8cba:	f7ff fc8f 	bl	85dc <endpoint0_transmit.constprop.0>
				return;
    8cbe:	e544      	b.n	874a <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8cc0:	2003      	movs	r0, #3
    8cc2:	f7ff fcd7 	bl	8674 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    8cc6:	f00b fc43 	bl	14550 <___reboot_Teensyduino__veneer>
    8cca:	bf00      	nop
    8ccc:	20200800 	.word	0x20200800

00008cd0 <usb_config_rx>:
{
    8cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cd4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8cd6:	1e83      	subs	r3, r0, #2
    8cd8:	2b02      	cmp	r3, #2
    8cda:	d901      	bls.n	8ce0 <usb_config_rx+0x10>
}
    8cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8ce0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8d30 <usb_config_rx+0x60>
    8ce4:	4615      	mov	r5, r2
    8ce6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8ce8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8cea:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8cee:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8cf0:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8cf4:	2100      	movs	r1, #0
    8cf6:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8cfa:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8cfc:	f002 feb6 	bl	ba6c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d00:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    8d04:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d06:	0952      	lsrs	r2, r2, #5
    8d08:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8d0c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    8d10:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8d14:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    8d18:	2f00      	cmp	r7, #0
    8d1a:	d0df      	beq.n	8cdc <usb_config_rx+0xc>
    8d1c:	4a03      	ldr	r2, [pc, #12]	; (8d2c <usb_config_rx+0x5c>)
    8d1e:	40b3      	lsls	r3, r6
    8d20:	6811      	ldr	r1, [r2, #0]
    8d22:	430b      	orrs	r3, r1
    8d24:	6013      	str	r3, [r2, #0]
}
    8d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d2a:	bf00      	nop
    8d2c:	20028e38 	.word	0x20028e38
    8d30:	20000000 	.word	0x20000000

00008d34 <usb_config_tx>:
{
    8d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d38:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8d3a:	1e81      	subs	r1, r0, #2
    8d3c:	2902      	cmp	r1, #2
    8d3e:	d901      	bls.n	8d44 <usb_config_tx+0x10>
}
    8d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8d44:	01c7      	lsls	r7, r0, #7
    8d46:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8d94 <usb_config_tx+0x60>
    8d4a:	4692      	mov	sl, r2
    8d4c:	4604      	mov	r4, r0
    8d4e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    8d50:	223c      	movs	r2, #60	; 0x3c
    8d52:	2100      	movs	r1, #0
    8d54:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8d56:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d5a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    8d5c:	f108 0004 	add.w	r0, r8, #4
    8d60:	f002 fe84 	bl	ba6c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8d64:	faba f28a 	clz	r2, sl
    8d68:	0952      	lsrs	r2, r2, #5
    8d6a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    8d6e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    8d72:	2201      	movs	r2, #1
	qh->callback_function = callback;
    8d74:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8d78:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8d7c:	2e00      	cmp	r6, #0
    8d7e:	d0df      	beq.n	8d40 <usb_config_tx+0xc>
    8d80:	4b03      	ldr	r3, [pc, #12]	; (8d90 <usb_config_tx+0x5c>)
    8d82:	3410      	adds	r4, #16
    8d84:	6819      	ldr	r1, [r3, #0]
    8d86:	40a2      	lsls	r2, r4
    8d88:	430a      	orrs	r2, r1
    8d8a:	601a      	str	r2, [r3, #0]
}
    8d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d90:	20028e38 	.word	0x20028e38
    8d94:	20000000 	.word	0x20000000

00008d98 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    8d98:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    8d9a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    8d9c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    8d9e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    8da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    8da6:	b410      	push	{r4}
	transfer->next = 1;
    8da8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    8daa:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    8dac:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    8db0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    8db2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    8db6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    8dba:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    8dbc:	6181      	str	r1, [r0, #24]
}
    8dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    8dc2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    8dc6:	4770      	bx	lr

00008dc8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8dc8:	1e83      	subs	r3, r0, #2
{
    8dca:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8dcc:	2b02      	cmp	r3, #2
    8dce:	d900      	bls.n	8dd2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    8dd0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8dd2:	4b06      	ldr	r3, [pc, #24]	; (8dec <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    8dd4:	f100 0110 	add.w	r1, r0, #16
    8dd8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8ddc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    8de0:	fa0c f101 	lsl.w	r1, ip, r1
    8de4:	3040      	adds	r0, #64	; 0x40
    8de6:	f7ff bb99 	b.w	851c <schedule_transfer>
    8dea:	bf00      	nop
    8dec:	20000000 	.word	0x20000000

00008df0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8df0:	1e83      	subs	r3, r0, #2
{
    8df2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8df4:	2b02      	cmp	r3, #2
    8df6:	d900      	bls.n	8dfa <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8df8:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8dfa:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8dfc:	4b02      	ldr	r3, [pc, #8]	; (8e08 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    8dfe:	4081      	lsls	r1, r0
    8e00:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    8e04:	f7ff bb8a 	b.w	851c <schedule_transfer>
    8e08:	20000000 	.word	0x20000000

00008e0c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    8e0c:	6840      	ldr	r0, [r0, #4]
#endif
}
    8e0e:	4770      	bx	lr

00008e10 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8e10:	4a12      	ldr	r2, [pc, #72]	; (8e5c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8e12:	4b13      	ldr	r3, [pc, #76]	; (8e60 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8e14:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    8e18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    8e1c:	4298      	cmp	r0, r3
{
    8e1e:	b510      	push	{r4, lr}
    8e20:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    8e22:	d202      	bcs.n	8e2a <usb_init_serialnumber+0x1a>
    8e24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8e28:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    8e2a:	4c0e      	ldr	r4, [pc, #56]	; (8e64 <usb_init_serialnumber+0x54>)
    8e2c:	a901      	add	r1, sp, #4
    8e2e:	220a      	movs	r2, #10
    8e30:	f7ff f9ec 	bl	820c <ultoa>
	for (i=0; i<10; i++) {
    8e34:	a901      	add	r1, sp, #4
    8e36:	2300      	movs	r3, #0
    8e38:	4620      	mov	r0, r4
		char c = buf[i];
    8e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    8e3e:	3301      	adds	r3, #1
		if (!c) break;
    8e40:	b13a      	cbz	r2, 8e52 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    8e42:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8e44:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8e48:	d1f7      	bne.n	8e3a <usb_init_serialnumber+0x2a>
    8e4a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8e4c:	7023      	strb	r3, [r4, #0]
}
    8e4e:	b004      	add	sp, #16
    8e50:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8e52:	005b      	lsls	r3, r3, #1
    8e54:	b2db      	uxtb	r3, r3
    8e56:	7023      	strb	r3, [r4, #0]
}
    8e58:	b004      	add	sp, #16
    8e5a:	bd10      	pop	{r4, pc}
    8e5c:	401f4400 	.word	0x401f4400
    8e60:	00989680 	.word	0x00989680
    8e64:	20008be0 	.word	0x20008be0

00008e68 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    8e68:	f000 bace 	b.w	9408 <usb_serial_flush_input>

00008e6c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    8e6c:	f000 bac0 	b.w	93f0 <usb_serial_available>

00008e70 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8e70:	f000 bb5c 	b.w	952c <usb_serial_flush_output>

00008e74 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8e74:	f000 bb32 	b.w	94dc <usb_serial_write_buffer_free>

00008e78 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8e78:	4608      	mov	r0, r1
    8e7a:	4611      	mov	r1, r2
    8e7c:	f000 bb22 	b.w	94c4 <usb_serial_write>

00008e80 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8e82:	4c14      	ldr	r4, [pc, #80]	; (8ed4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e84:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e88:	4e13      	ldr	r6, [pc, #76]	; (8ed8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8e8e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e92:	4f12      	ldr	r7, [pc, #72]	; (8edc <rx_queue_transfer+0x5c>)
    8e94:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8e98:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e9a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e9e:	4621      	mov	r1, r4
    8ea0:	883a      	ldrh	r2, [r7, #0]
    8ea2:	4630      	mov	r0, r6
    8ea4:	f7ff ff78 	bl	8d98 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8ea8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8eaa:	4423      	add	r3, r4
	asm("dsb");
    8eac:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8eb0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    8eb4:	3420      	adds	r4, #32
	} while (location < end_addr);
    8eb6:	42a3      	cmp	r3, r4
    8eb8:	d8fa      	bhi.n	8eb0 <rx_queue_transfer+0x30>
	asm("dsb");
    8eba:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8ebe:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8ec2:	2003      	movs	r0, #3
    8ec4:	4631      	mov	r1, r6
    8ec6:	f7ff ff93 	bl	8df0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8ece:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    8ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ed4:	20008f00 	.word	0x20008f00
    8ed8:	20009f00 	.word	0x20009f00
    8edc:	20029492 	.word	0x20029492

00008ee0 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8ee0:	4b24      	ldr	r3, [pc, #144]	; (8f74 <rx_event+0x94>)
{
    8ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8ee6:	881c      	ldrh	r4, [r3, #0]
    8ee8:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8eea:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8eec:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8ef0:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8ef2:	2c00      	cmp	r4, #0
    8ef4:	dd24      	ble.n	8f40 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    8ef6:	4920      	ldr	r1, [pc, #128]	; (8f78 <rx_event+0x98>)
		if (head != rx_tail) {
    8ef8:	4820      	ldr	r0, [pc, #128]	; (8f7c <rx_event+0x9c>)
		uint32_t head = rx_head;
    8efa:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8efc:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8efe:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8f00:	4e1f      	ldr	r6, [pc, #124]	; (8f80 <rx_event+0xa0>)
		if (head != rx_tail) {
    8f02:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    8f04:	481f      	ldr	r0, [pc, #124]	; (8f84 <rx_event+0xa4>)
		if (head != rx_tail) {
    8f06:	d007      	beq.n	8f18 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8f08:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8f0c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8f10:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    8f14:	4294      	cmp	r4, r2
    8f16:	d918      	bls.n	8f4a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8f18:	3301      	adds	r3, #1
		rx_index[i] = 0;
    8f1a:	2200      	movs	r2, #0
		rx_count[i] = len;
    8f1c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    8f20:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    8f22:	4e19      	ldr	r6, [pc, #100]	; (8f88 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8f24:	bf88      	it	hi
    8f26:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    8f28:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    8f2c:	bf98      	it	ls
    8f2e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    8f30:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    8f32:	4b16      	ldr	r3, [pc, #88]	; (8f8c <rx_event+0xac>)
		rx_head = head;
    8f34:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    8f36:	681a      	ldr	r2, [r3, #0]
    8f38:	4414      	add	r4, r2
    8f3a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    8f40:	4628      	mov	r0, r5
}
    8f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    8f46:	f7ff bf9b 	b.w	8e80 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8f4a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    8f4e:	4910      	ldr	r1, [pc, #64]	; (8f90 <rx_event+0xb0>)
    8f50:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    8f52:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8f54:	4408      	add	r0, r1
    8f56:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    8f5a:	f7ff f8bb 	bl	80d4 <memcpy>
				rx_available += len;
    8f5e:	4a0b      	ldr	r2, [pc, #44]	; (8f8c <rx_event+0xac>)
				rx_queue_transfer(i);
    8f60:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    8f62:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8f66:	6813      	ldr	r3, [r2, #0]
    8f68:	4423      	add	r3, r4
}
    8f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    8f6e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    8f70:	f7ff bf86 	b.w	8e80 <rx_queue_transfer>
    8f74:	20029492 	.word	0x20029492
    8f78:	200294a4 	.word	0x200294a4
    8f7c:	200294a5 	.word	0x200294a5
    8f80:	20028f60 	.word	0x20028f60
    8f84:	20028f80 	.word	0x20028f80
    8f88:	20028f70 	.word	0x20028f70
    8f8c:	20028f5c 	.word	0x20028f5c
    8f90:	20008f00 	.word	0x20008f00

00008f94 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8f94:	4b1d      	ldr	r3, [pc, #116]	; (900c <usb_serial_flush_callback+0x78>)
    8f96:	781a      	ldrb	r2, [r3, #0]
    8f98:	2a00      	cmp	r2, #0
    8f9a:	d136      	bne.n	900a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8f9c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8fa0:	4a1b      	ldr	r2, [pc, #108]	; (9010 <usb_serial_flush_callback+0x7c>)
    8fa2:	7812      	ldrb	r2, [r2, #0]
    8fa4:	b38a      	cbz	r2, 900a <usb_serial_flush_callback+0x76>
{
    8fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8faa:	4d1a      	ldr	r5, [pc, #104]	; (9014 <usb_serial_flush_callback+0x80>)
    8fac:	882a      	ldrh	r2, [r5, #0]
    8fae:	b352      	cbz	r2, 9006 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8fb0:	4e19      	ldr	r6, [pc, #100]	; (9018 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8fb2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8fb6:	4f19      	ldr	r7, [pc, #100]	; (901c <usb_serial_flush_callback+0x88>)
    8fb8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8fba:	4c19      	ldr	r4, [pc, #100]	; (9020 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8fbc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8fc0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8fc4:	4642      	mov	r2, r8
    8fc6:	4638      	mov	r0, r7
    8fc8:	4621      	mov	r1, r4
    8fca:	f7ff fee5 	bl	8d98 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8fce:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    8fd2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8fda:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8fde:	3420      	adds	r4, #32
	} while (location < end_addr);
    8fe0:	42a2      	cmp	r2, r4
    8fe2:	d8fa      	bhi.n	8fda <usb_serial_flush_callback+0x46>
	asm("dsb");
    8fe4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8fe8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8fec:	2004      	movs	r0, #4
    8fee:	4639      	mov	r1, r7
    8ff0:	f7ff feea 	bl	8dc8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8ff4:	7833      	ldrb	r3, [r6, #0]
    8ff6:	3301      	adds	r3, #1
    8ff8:	b2db      	uxtb	r3, r3
    8ffa:	2b03      	cmp	r3, #3
    8ffc:	bf88      	it	hi
    8ffe:	2300      	movhi	r3, #0
    9000:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9002:	2300      	movs	r3, #0
    9004:	802b      	strh	r3, [r5, #0]
}
    9006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    900a:	4770      	bx	lr
    900c:	200294a9 	.word	0x200294a9
    9010:	200294ab 	.word	0x200294ab
    9014:	20029496 	.word	0x20029496
    9018:	200294a8 	.word	0x200294a8
    901c:	2000a000 	.word	0x2000a000
    9020:	2000a080 	.word	0x2000a080

00009024 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9028:	b085      	sub	sp, #20
	while (size > 0) {
    902a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    902e:	2900      	cmp	r1, #0
    9030:	f000 80bf 	beq.w	91b2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9034:	2300      	movs	r3, #0
    9036:	4c60      	ldr	r4, [pc, #384]	; (91b8 <usb_serial_write.part.0+0x194>)
    9038:	f8df 8198 	ldr.w	r8, [pc, #408]	; 91d4 <usb_serial_write.part.0+0x1b0>
    903c:	f8df a198 	ldr.w	sl, [pc, #408]	; 91d8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9040:	4f5e      	ldr	r7, [pc, #376]	; (91bc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9042:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9044:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9046:	4a5e      	ldr	r2, [pc, #376]	; (91c0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9048:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    904a:	4b5e      	ldr	r3, [pc, #376]	; (91c4 <usb_serial_write.part.0+0x1a0>)
    904c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    904e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9052:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9056:	2b00      	cmp	r3, #0
    9058:	f040 80a7 	bne.w	91aa <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    905c:	461e      	mov	r6, r3
		int waiting=0;
    905e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9060:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9062:	4648      	mov	r0, r9
    9064:	f7ff fed2 	bl	8e0c <usb_transfer_status>
			if (!(status & 0x80)) {
    9068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    906c:	f000 808c 	beq.w	9188 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9070:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9074:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9078:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    907c:	b905      	cbnz	r5, 9080 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    907e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9080:	2b00      	cmp	r3, #0
    9082:	d17d      	bne.n	9180 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9084:	683b      	ldr	r3, [r7, #0]
    9086:	1b9b      	subs	r3, r3, r6
    9088:	2b78      	cmp	r3, #120	; 0x78
    908a:	f200 8087 	bhi.w	919c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    908e:	4b4e      	ldr	r3, [pc, #312]	; (91c8 <usb_serial_write.part.0+0x1a4>)
    9090:	781b      	ldrb	r3, [r3, #0]
    9092:	2b00      	cmp	r3, #0
    9094:	d074      	beq.n	9180 <usb_serial_write.part.0+0x15c>
			yield();
    9096:	f000 fa93 	bl	95c0 <yield>
			tx_noautoflush = 1;
    909a:	2201      	movs	r2, #1
		while (!tx_available) {
    909c:	f8b8 3000 	ldrh.w	r3, [r8]
    90a0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    90a2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    90a4:	2b00      	cmp	r3, #0
    90a6:	d0dc      	beq.n	9062 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90a8:	4a46      	ldr	r2, [pc, #280]	; (91c4 <usb_serial_write.part.0+0x1a0>)
    90aa:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    90ae:	7811      	ldrb	r1, [r2, #0]
    90b0:	461a      	mov	r2, r3
    90b2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    90b6:	4d45      	ldr	r5, [pc, #276]	; (91cc <usb_serial_write.part.0+0x1a8>)
    90b8:	02c9      	lsls	r1, r1, #11
    90ba:	4428      	add	r0, r5
		if (size >= tx_available) {
    90bc:	9d01      	ldr	r5, [sp, #4]
    90be:	4295      	cmp	r5, r2
    90c0:	d217      	bcs.n	90f2 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    90c2:	9303      	str	r3, [sp, #12]
    90c4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    90c8:	462a      	mov	r2, r5
    90ca:	f7ff f803 	bl	80d4 <memcpy>
			tx_available -= size;
    90ce:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    90d0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    90d4:	1b5b      	subs	r3, r3, r5
    90d6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    90da:	4b3d      	ldr	r3, [pc, #244]	; (91d0 <usb_serial_write.part.0+0x1ac>)
    90dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    90e0:	f3bf 8f4f 	dsb	sy
			sent += size;
    90e4:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    90e6:	2300      	movs	r3, #0
			sent += size;
    90e8:	4428      	add	r0, r5
		tx_noautoflush = 0;
    90ea:	7023      	strb	r3, [r4, #0]
}
    90ec:	b005      	add	sp, #20
    90ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    90f2:	4b36      	ldr	r3, [pc, #216]	; (91cc <usb_serial_write.part.0+0x1a8>)
    90f4:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    90f6:	9902      	ldr	r1, [sp, #8]
    90f8:	f7fe ffec 	bl	80d4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    90fc:	2300      	movs	r3, #0
    90fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9102:	4629      	mov	r1, r5
    9104:	4648      	mov	r0, r9
    9106:	f7ff fe47 	bl	8d98 <usb_prepare_transfer>
	asm("dsb");
    910a:	f3bf 8f4f 	dsb	sy
    910e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9112:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9116:	4293      	cmp	r3, r2
    9118:	bf34      	ite	cc
    911a:	2301      	movcc	r3, #1
    911c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    911e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9122:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9126:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    912a:	3520      	adds	r5, #32
	} while (location < end_addr);
    912c:	42ab      	cmp	r3, r5
    912e:	d1fa      	bne.n	9126 <usb_serial_write.part.0+0x102>
	asm("dsb");
    9130:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9134:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9138:	2004      	movs	r0, #4
    913a:	4649      	mov	r1, r9
    913c:	f7ff fe44 	bl	8dc8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9140:	4a20      	ldr	r2, [pc, #128]	; (91c4 <usb_serial_write.part.0+0x1a0>)
    9142:	7813      	ldrb	r3, [r2, #0]
    9144:	3301      	adds	r3, #1
    9146:	b2db      	uxtb	r3, r3
    9148:	2b03      	cmp	r3, #3
    914a:	bf84      	itt	hi
    914c:	2300      	movhi	r3, #0
    914e:	4a1d      	ldrhi	r2, [pc, #116]	; (91c4 <usb_serial_write.part.0+0x1a0>)
    9150:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9152:	f8b8 3000 	ldrh.w	r3, [r8]
    9156:	9a01      	ldr	r2, [sp, #4]
    9158:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    915a:	9a00      	ldr	r2, [sp, #0]
    915c:	441a      	add	r2, r3
			size -= tx_available;
    915e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9160:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9162:	9a02      	ldr	r2, [sp, #8]
    9164:	441a      	add	r2, r3
			tx_available = 0;
    9166:	2300      	movs	r3, #0
			data += tx_available;
    9168:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    916a:	4a19      	ldr	r2, [pc, #100]	; (91d0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    916c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9170:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9174:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9178:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    917a:	2900      	cmp	r1, #0
    917c:	f47f af62 	bne.w	9044 <usb_serial_write.part.0+0x20>
	return sent;
    9180:	9800      	ldr	r0, [sp, #0]
}
    9182:	b005      	add	sp, #20
    9184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9188:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    918c:	4b0d      	ldr	r3, [pc, #52]	; (91c4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    918e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9192:	7819      	ldrb	r1, [r3, #0]
				break;
    9194:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9196:	f8a8 2000 	strh.w	r2, [r8]
				break;
    919a:	e78a      	b.n	90b2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    919c:	2301      	movs	r3, #1
				return sent;
    919e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    91a0:	f88a 3000 	strb.w	r3, [sl]
}
    91a4:	b005      	add	sp, #20
    91a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    91aa:	461a      	mov	r2, r3
    91ac:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    91b0:	e77f      	b.n	90b2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    91b2:	9801      	ldr	r0, [sp, #4]
	return sent;
    91b4:	e7e5      	b.n	9182 <usb_serial_write.part.0+0x15e>
    91b6:	bf00      	nop
    91b8:	200294a9 	.word	0x200294a9
    91bc:	2002945c 	.word	0x2002945c
    91c0:	2000a000 	.word	0x2000a000
    91c4:	200294a8 	.word	0x200294a8
    91c8:	200294ab 	.word	0x200294ab
    91cc:	2000a080 	.word	0x2000a080
    91d0:	402e0000 	.word	0x402e0000
    91d4:	20029496 	.word	0x20029496
    91d8:	200294a7 	.word	0x200294a7

000091dc <usb_serial_reset>:
}
    91dc:	4770      	bx	lr
    91de:	bf00      	nop

000091e0 <usb_serial_configure>:
	if (usb_high_speed) {
    91e0:	4b2a      	ldr	r3, [pc, #168]	; (928c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    91e2:	2100      	movs	r1, #0
    91e4:	2280      	movs	r2, #128	; 0x80
    91e6:	482a      	ldr	r0, [pc, #168]	; (9290 <usb_serial_configure+0xb0>)
{
    91e8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    91ea:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    91ec:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    91ee:	4d29      	ldr	r5, [pc, #164]	; (9294 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    91f0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    91f2:	4e29      	ldr	r6, [pc, #164]	; (9298 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    91f4:	bf0c      	ite	eq
    91f6:	2340      	moveq	r3, #64	; 0x40
    91f8:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    91fc:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    91fe:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9200:	f002 fc34 	bl	ba6c <memset>
	tx_head = 0;
    9204:	4a25      	ldr	r2, [pc, #148]	; (929c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9206:	4621      	mov	r1, r4
	tx_available = 0;
    9208:	4b25      	ldr	r3, [pc, #148]	; (92a0 <usb_serial_configure+0xc0>)
	tx_head = 0;
    920a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    920c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9210:	4824      	ldr	r0, [pc, #144]	; (92a4 <usb_serial_configure+0xc4>)
	tx_available = 0;
    9212:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9214:	f002 fc2a 	bl	ba6c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9218:	4a23      	ldr	r2, [pc, #140]	; (92a8 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    921a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    921c:	4b23      	ldr	r3, [pc, #140]	; (92ac <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    921e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9220:	e9c2 4400 	strd	r4, r4, [r2]
    9224:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9228:	4a21      	ldr	r2, [pc, #132]	; (92b0 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    922a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    922e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9230:	4a20      	ldr	r2, [pc, #128]	; (92b4 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    9232:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    9236:	4b20      	ldr	r3, [pc, #128]	; (92b8 <usb_serial_configure+0xd8>)
    9238:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    923a:	4623      	mov	r3, r4
	rx_available = 0;
    923c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    923e:	4622      	mov	r2, r4
    9240:	f7ff fd78 	bl	8d34 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9244:	4622      	mov	r2, r4
    9246:	8831      	ldrh	r1, [r6, #0]
    9248:	2003      	movs	r0, #3
    924a:	4b1c      	ldr	r3, [pc, #112]	; (92bc <usb_serial_configure+0xdc>)
    924c:	f7ff fd40 	bl	8cd0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9250:	4623      	mov	r3, r4
    9252:	2201      	movs	r2, #1
    9254:	8829      	ldrh	r1, [r5, #0]
    9256:	2004      	movs	r0, #4
    9258:	f7ff fd6c 	bl	8d34 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    925c:	4620      	mov	r0, r4
    925e:	3401      	adds	r4, #1
    9260:	f7ff fe0e 	bl	8e80 <rx_queue_transfer>
    9264:	2c08      	cmp	r4, #8
    9266:	d1f9      	bne.n	925c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9268:	4b15      	ldr	r3, [pc, #84]	; (92c0 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    926a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    926c:	4815      	ldr	r0, [pc, #84]	; (92c4 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    926e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    9270:	4c15      	ldr	r4, [pc, #84]	; (92c8 <usb_serial_configure+0xe8>)
    9272:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9274:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    927c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9280:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    9284:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    9288:	bd70      	pop	{r4, r5, r6, pc}
    928a:	bf00      	nop
    928c:	200294ac 	.word	0x200294ac
    9290:	2000a000 	.word	0x2000a000
    9294:	20029498 	.word	0x20029498
    9298:	20029492 	.word	0x20029492
    929c:	200294a8 	.word	0x200294a8
    92a0:	20029496 	.word	0x20029496
    92a4:	20009f00 	.word	0x20009f00
    92a8:	20028f60 	.word	0x20028f60
    92ac:	20028f70 	.word	0x20028f70
    92b0:	200294a4 	.word	0x200294a4
    92b4:	20028f5c 	.word	0x20028f5c
    92b8:	200294a5 	.word	0x200294a5
    92bc:	00008ee1 	.word	0x00008ee1
    92c0:	402e0000 	.word	0x402e0000
    92c4:	20029480 	.word	0x20029480
    92c8:	00008f95 	.word	0x00008f95

000092cc <usb_serial_read>:
{
    92cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    92d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    92d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    92d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 93a4 <usb_serial_read+0xd8>
{
    92dc:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    92de:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    92e2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    92e4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    92e8:	2900      	cmp	r1, #0
    92ea:	d04f      	beq.n	938c <usb_serial_read+0xc0>
    92ec:	4680      	mov	r8, r0
    92ee:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    92f0:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    92f2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 93a8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    92f6:	4b26      	ldr	r3, [pc, #152]	; (9390 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    92f8:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    92fc:	4925      	ldr	r1, [pc, #148]	; (9394 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    92fe:	781b      	ldrb	r3, [r3, #0]
    9300:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    9302:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    9306:	d03f      	beq.n	9388 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    9308:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    930a:	4b23      	ldr	r3, [pc, #140]	; (9398 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    930c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    930e:	bf28      	it	cs
    9310:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9312:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    9314:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9318:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    931c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    931e:	4b1f      	ldr	r3, [pc, #124]	; (939c <usb_serial_read+0xd0>)
    9320:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    9324:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    9328:	42aa      	cmp	r2, r5
    932a:	d21c      	bcs.n	9366 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    932c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    9330:	4918      	ldr	r1, [pc, #96]	; (9394 <usb_serial_read+0xc8>)
			rx_available -= len;
    9332:	4c1b      	ldr	r4, [pc, #108]	; (93a0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9334:	4461      	add	r1, ip
    9336:	9201      	str	r2, [sp, #4]
    9338:	f7fe fecc 	bl	80d4 <memcpy>
			rx_available -= len;
    933c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    933e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    9342:	4658      	mov	r0, fp
			rx_index[i] += len;
    9344:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    9346:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    934a:	442a      	add	r2, r5
			rx_available -= len;
    934c:	4439      	add	r1, r7
			rx_index[i] += len;
    934e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    9352:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    935c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    9360:	b003      	add	sp, #12
    9362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9366:	462a      	mov	r2, r5
			count += avail;
    9368:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    936a:	f7fe feb3 	bl	80d4 <memcpy>
			rx_available -= avail;
    936e:	490c      	ldr	r1, [pc, #48]	; (93a0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    9370:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    9372:	4630      	mov	r0, r6
			rx_available -= avail;
    9374:	680a      	ldr	r2, [r1, #0]
			p += avail;
    9376:	44a8      	add	r8, r5
			rx_available -= avail;
    9378:	1b52      	subs	r2, r2, r5
    937a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    937c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    9380:	f7ff fd7e 	bl	8e80 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    9384:	45bb      	cmp	fp, r7
    9386:	d8b6      	bhi.n	92f6 <usb_serial_read+0x2a>
	return count;
    9388:	4638      	mov	r0, r7
    938a:	e7e3      	b.n	9354 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    938c:	4608      	mov	r0, r1
    938e:	e7e1      	b.n	9354 <usb_serial_read+0x88>
    9390:	200294a4 	.word	0x200294a4
    9394:	20008f00 	.word	0x20008f00
    9398:	20028f80 	.word	0x20028f80
    939c:	20028f60 	.word	0x20028f60
    93a0:	20028f5c 	.word	0x20028f5c
    93a4:	200294a5 	.word	0x200294a5
    93a8:	20028f70 	.word	0x20028f70

000093ac <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    93ac:	4b0b      	ldr	r3, [pc, #44]	; (93dc <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    93ae:	4a0c      	ldr	r2, [pc, #48]	; (93e0 <usb_serial_peekchar+0x34>)
    93b0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    93b2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    93b4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    93b6:	428a      	cmp	r2, r1
    93b8:	d00d      	beq.n	93d6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    93ba:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    93bc:	4809      	ldr	r0, [pc, #36]	; (93e4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    93be:	4a0a      	ldr	r2, [pc, #40]	; (93e8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    93c0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    93c2:	490a      	ldr	r1, [pc, #40]	; (93ec <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    93c4:	bf28      	it	cs
    93c6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    93c8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    93ca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    93ce:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    93d2:	5c58      	ldrb	r0, [r3, r1]
    93d4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    93d6:	f04f 30ff 	mov.w	r0, #4294967295
}
    93da:	4770      	bx	lr
    93dc:	200294a4 	.word	0x200294a4
    93e0:	200294a5 	.word	0x200294a5
    93e4:	20028f80 	.word	0x20028f80
    93e8:	20008f00 	.word	0x20008f00
    93ec:	20028f70 	.word	0x20028f70

000093f0 <usb_serial_available>:
	uint32_t n = rx_available;
    93f0:	4b04      	ldr	r3, [pc, #16]	; (9404 <usb_serial_available+0x14>)
{
    93f2:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    93f4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    93f6:	b10c      	cbz	r4, 93fc <usb_serial_available+0xc>
}
    93f8:	4620      	mov	r0, r4
    93fa:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    93fc:	f000 f8e0 	bl	95c0 <yield>
}
    9400:	4620      	mov	r0, r4
    9402:	bd10      	pop	{r4, pc}
    9404:	20028f5c 	.word	0x20028f5c

00009408 <usb_serial_flush_input>:
{
    9408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    940c:	4e14      	ldr	r6, [pc, #80]	; (9460 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    940e:	4d15      	ldr	r5, [pc, #84]	; (9464 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    9410:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    9412:	782a      	ldrb	r2, [r5, #0]
    9414:	4293      	cmp	r3, r2
    9416:	d021      	beq.n	945c <usb_serial_flush_input+0x54>
    9418:	b2dc      	uxtb	r4, r3
    941a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 946c <usb_serial_flush_input+0x64>
    941e:	f8df b050 	ldr.w	fp, [pc, #80]	; 9470 <usb_serial_flush_input+0x68>
    9422:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9474 <usb_serial_flush_input+0x6c>
    9426:	4f10      	ldr	r7, [pc, #64]	; (9468 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    9428:	3401      	adds	r4, #1
    942a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    942c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    9430:	d901      	bls.n	9436 <usb_serial_flush_input+0x2e>
    9432:	2400      	movs	r4, #0
    9434:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    9436:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    943a:	f8db 3000 	ldr.w	r3, [fp]
    943e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    9442:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    9446:	1a52      	subs	r2, r2, r1
    9448:	1a9b      	subs	r3, r3, r2
    944a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    944e:	f7ff fd17 	bl	8e80 <rx_queue_transfer>
		rx_tail = tail;
    9452:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    9456:	782b      	ldrb	r3, [r5, #0]
    9458:	42a3      	cmp	r3, r4
    945a:	d1e5      	bne.n	9428 <usb_serial_flush_input+0x20>
}
    945c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9460:	200294a5 	.word	0x200294a5
    9464:	200294a4 	.word	0x200294a4
    9468:	20028f70 	.word	0x20028f70
    946c:	20028f80 	.word	0x20028f80
    9470:	20028f5c 	.word	0x20028f5c
    9474:	20028f60 	.word	0x20028f60

00009478 <usb_serial_getchar>:
{
    9478:	b500      	push	{lr}
    947a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    947c:	2101      	movs	r1, #1
    947e:	f10d 0007 	add.w	r0, sp, #7
    9482:	f7ff ff23 	bl	92cc <usb_serial_read>
    9486:	b120      	cbz	r0, 9492 <usb_serial_getchar+0x1a>
    9488:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    948c:	b003      	add	sp, #12
    948e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    9492:	f04f 30ff 	mov.w	r0, #4294967295
    9496:	e7f9      	b.n	948c <usb_serial_getchar+0x14>

00009498 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    9498:	4b09      	ldr	r3, [pc, #36]	; (94c0 <usb_serial_putchar+0x28>)
{
    949a:	b500      	push	{lr}
    949c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    949e:	781b      	ldrb	r3, [r3, #0]
{
    94a0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    94a4:	b13b      	cbz	r3, 94b6 <usb_serial_putchar+0x1e>
    94a6:	2101      	movs	r1, #1
    94a8:	f10d 0007 	add.w	r0, sp, #7
    94ac:	f7ff fdba 	bl	9024 <usb_serial_write.part.0>
}
    94b0:	b003      	add	sp, #12
    94b2:	f85d fb04 	ldr.w	pc, [sp], #4
    94b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    94ba:	b003      	add	sp, #12
    94bc:	f85d fb04 	ldr.w	pc, [sp], #4
    94c0:	200294ab 	.word	0x200294ab

000094c4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    94c4:	4b04      	ldr	r3, [pc, #16]	; (94d8 <usb_serial_write+0x14>)
    94c6:	781b      	ldrb	r3, [r3, #0]
    94c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    94cc:	b10b      	cbz	r3, 94d2 <usb_serial_write+0xe>
    94ce:	f7ff bda9 	b.w	9024 <usb_serial_write.part.0>
}
    94d2:	4610      	mov	r0, r2
    94d4:	4770      	bx	lr
    94d6:	bf00      	nop
    94d8:	200294ab 	.word	0x200294ab

000094dc <usb_serial_write_buffer_free>:
{
    94dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    94e0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    94e2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9528 <usb_serial_write_buffer_free+0x4c>
    94e6:	2301      	movs	r3, #1
    94e8:	4d0d      	ldr	r5, [pc, #52]	; (9520 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    94ea:	4627      	mov	r7, r4
    94ec:	4e0d      	ldr	r6, [pc, #52]	; (9524 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    94ee:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    94f2:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    94f4:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    94f6:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    94f8:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    94fa:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    94fe:	d005      	beq.n	950c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9500:	f7ff fc84 	bl	8e0c <usb_transfer_status>
    9504:	0603      	lsls	r3, r0, #24
    9506:	bf58      	it	pl
    9508:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    950c:	2c04      	cmp	r4, #4
    950e:	d1f0      	bne.n	94f2 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    9510:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9514:	2300      	movs	r3, #0
}
    9516:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    9518:	f888 3000 	strb.w	r3, [r8]
}
    951c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9520:	2000a000 	.word	0x2000a000
    9524:	200294a8 	.word	0x200294a8
    9528:	200294a9 	.word	0x200294a9

0000952c <usb_serial_flush_output>:
{
    952c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9530:	4b1d      	ldr	r3, [pc, #116]	; (95a8 <usb_serial_flush_output+0x7c>)
    9532:	781b      	ldrb	r3, [r3, #0]
    9534:	b113      	cbz	r3, 953c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    9536:	4d1d      	ldr	r5, [pc, #116]	; (95ac <usb_serial_flush_output+0x80>)
    9538:	882a      	ldrh	r2, [r5, #0]
    953a:	b90a      	cbnz	r2, 9540 <usb_serial_flush_output+0x14>
}
    953c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    9540:	4e1b      	ldr	r6, [pc, #108]	; (95b0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    9542:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9546:	491b      	ldr	r1, [pc, #108]	; (95b4 <usb_serial_flush_output+0x88>)
    9548:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    954a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    954c:	4c1a      	ldr	r4, [pc, #104]	; (95b8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    954e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    9552:	4f1a      	ldr	r7, [pc, #104]	; (95bc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9554:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    9558:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    955a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    955c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    955e:	4621      	mov	r1, r4
    9560:	2300      	movs	r3, #0
    9562:	f7ff fc19 	bl	8d98 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9566:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    956a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    956e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9572:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9576:	3420      	adds	r4, #32
	} while (location < end_addr);
    9578:	42a2      	cmp	r2, r4
    957a:	d8fa      	bhi.n	9572 <usb_serial_flush_output+0x46>
	asm("dsb");
    957c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9580:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9584:	2004      	movs	r0, #4
    9586:	4641      	mov	r1, r8
    9588:	f7ff fc1e 	bl	8dc8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    958c:	7833      	ldrb	r3, [r6, #0]
    958e:	3301      	adds	r3, #1
    9590:	b2db      	uxtb	r3, r3
    9592:	2b03      	cmp	r3, #3
    9594:	bf88      	it	hi
    9596:	2300      	movhi	r3, #0
    9598:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    959a:	2300      	movs	r3, #0
    959c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    959e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    95a2:	703b      	strb	r3, [r7, #0]
}
    95a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    95a8:	200294ab 	.word	0x200294ab
    95ac:	20029496 	.word	0x20029496
    95b0:	200294a8 	.word	0x200294a8
    95b4:	2000a000 	.word	0x2000a000
    95b8:	2000a080 	.word	0x2000a080
    95bc:	200294a9 	.word	0x200294a9

000095c0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    95c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    95c4:	4e32      	ldr	r6, [pc, #200]	; (9690 <yield+0xd0>)
    95c6:	7833      	ldrb	r3, [r6, #0]
    95c8:	b163      	cbz	r3, 95e4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    95ca:	4f32      	ldr	r7, [pc, #200]	; (9694 <yield+0xd4>)
    95cc:	783a      	ldrb	r2, [r7, #0]
    95ce:	b94a      	cbnz	r2, 95e4 <yield+0x24>
	running = 1;
    95d0:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    95d2:	07d9      	lsls	r1, r3, #31
	running = 1;
    95d4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    95d6:	d444      	bmi.n	9662 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    95d8:	079a      	lsls	r2, r3, #30
    95da:	d426      	bmi.n	962a <yield+0x6a>

	running = 0;
    95dc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    95de:	075b      	lsls	r3, r3, #29
	running = 0;
    95e0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    95e2:	d401      	bmi.n	95e8 <yield+0x28>
	
};
    95e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    95e8:	4b2b      	ldr	r3, [pc, #172]	; (9698 <yield+0xd8>)
    95ea:	681a      	ldr	r2, [r3, #0]
    95ec:	2a00      	cmp	r2, #0
    95ee:	d0f9      	beq.n	95e4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    95f0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    95f4:	2a00      	cmp	r2, #0
    95f6:	d1f5      	bne.n	95e4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    95f8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    95fc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    95fe:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9600:	2800      	cmp	r0, #0
    9602:	d03b      	beq.n	967c <yield+0xbc>
		if (runningFromYield) {
    9604:	4c25      	ldr	r4, [pc, #148]	; (969c <yield+0xdc>)
    9606:	7821      	ldrb	r1, [r4, #0]
    9608:	2900      	cmp	r1, #0
    960a:	d137      	bne.n	967c <yield+0xbc>
		runningFromYield = true;
    960c:	2201      	movs	r2, #1
    960e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    9610:	6942      	ldr	r2, [r0, #20]
    9612:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    9614:	2a00      	cmp	r2, #0
    9616:	d038      	beq.n	968a <yield+0xca>
			firstYield->_prev = nullptr;
    9618:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    961a:	b905      	cbnz	r5, 961e <yield+0x5e>
    961c:	b662      	cpsie	i
		first->_triggered = false;
    961e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    9620:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    9622:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9624:	4798      	blx	r3
		runningFromYield = false;
    9626:	7025      	strb	r5, [r4, #0]
    9628:	e7dc      	b.n	95e4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    962a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 96a8 <yield+0xe8>
    962e:	f898 2000 	ldrb.w	r2, [r8]
    9632:	2a00      	cmp	r2, #0
    9634:	d0d2      	beq.n	95dc <yield+0x1c>
    9636:	2500      	movs	r5, #0
    9638:	f8df 9070 	ldr.w	r9, [pc, #112]	; 96ac <yield+0xec>
    963c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    963e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9642:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9644:	6823      	ldr	r3, [r4, #0]
    9646:	4620      	mov	r0, r4
    9648:	691b      	ldr	r3, [r3, #16]
    964a:	4798      	blx	r3
    964c:	b110      	cbz	r0, 9654 <yield+0x94>
    964e:	6963      	ldr	r3, [r4, #20]
    9650:	689b      	ldr	r3, [r3, #8]
    9652:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9654:	f898 2000 	ldrb.w	r2, [r8]
    9658:	b2eb      	uxtb	r3, r5
    965a:	429a      	cmp	r2, r3
    965c:	d8ef      	bhi.n	963e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    965e:	7833      	ldrb	r3, [r6, #0]
    9660:	e7bc      	b.n	95dc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    9662:	f7ff fec5 	bl	93f0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    9666:	b968      	cbnz	r0, 9684 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9668:	4b0d      	ldr	r3, [pc, #52]	; (96a0 <yield+0xe0>)
    966a:	781b      	ldrb	r3, [r3, #0]
    966c:	b90b      	cbnz	r3, 9672 <yield+0xb2>
    966e:	7833      	ldrb	r3, [r6, #0]
    9670:	e7b2      	b.n	95d8 <yield+0x18>
    9672:	7833      	ldrb	r3, [r6, #0]
    9674:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9678:	7033      	strb	r3, [r6, #0]
    967a:	e7ad      	b.n	95d8 <yield+0x18>
		if (doit) __enable_irq();
    967c:	2d00      	cmp	r5, #0
    967e:	d1b1      	bne.n	95e4 <yield+0x24>
    9680:	b662      	cpsie	i
    9682:	e7af      	b.n	95e4 <yield+0x24>
		if (Serial.available()) serialEvent();
    9684:	f000 f8cc 	bl	9820 <serialEvent()>
    9688:	e7ee      	b.n	9668 <yield+0xa8>
			lastYield = nullptr;
    968a:	4b06      	ldr	r3, [pc, #24]	; (96a4 <yield+0xe4>)
    968c:	601a      	str	r2, [r3, #0]
    968e:	e7c4      	b.n	961a <yield+0x5a>
    9690:	20008bf7 	.word	0x20008bf7
    9694:	200294a1 	.word	0x200294a1
    9698:	20028874 	.word	0x20028874
    969c:	2002949f 	.word	0x2002949f
    96a0:	60002766 	.word	0x60002766
    96a4:	20028880 	.word	0x20028880
    96a8:	200294a0 	.word	0x200294a0
    96ac:	20028884 	.word	0x20028884

000096b0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    96b0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    96b2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    96b4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    96b8:	4619      	mov	r1, r3
{
    96ba:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96bc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    96c0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96c4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96c8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    96cc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    96d0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    96d2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    96d6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    96da:	b29b      	uxth	r3, r3
    96dc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    96e0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96e4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    96e8:	3101      	adds	r1, #1
    96ea:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    96ee:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96f0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    96f2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    96f6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    96f8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    96fa:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    96fc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    96fe:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    9702:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9704:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9706:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9708:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    970a:	d1eb      	bne.n	96e4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    970c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    9710:	b29b      	uxth	r3, r3
    9712:	f043 030f 	orr.w	r3, r3, #15
    9716:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    971a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    971e:	b29b      	uxth	r3, r3
    9720:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    9724:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    9728:	bd10      	pop	{r4, pc}
    972a:	bf00      	nop

0000972c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    972c:	4b37      	ldr	r3, [pc, #220]	; (980c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    972e:	4a38      	ldr	r2, [pc, #224]	; (9810 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9730:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    9732:	4838      	ldr	r0, [pc, #224]	; (9814 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9734:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    9738:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    973a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    973c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9740:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9744:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9748:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    974c:	430a      	orrs	r2, r1
    974e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    9752:	f7ff ffad 	bl	96b0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    9756:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    975a:	f7ff ffa9 	bl	96b0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    975e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    9762:	f7ff ffa5 	bl	96b0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    9766:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    976a:	f7ff ffa1 	bl	96b0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    976e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9770:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9774:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    9778:	4611      	mov	r1, r2
    977a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    977e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9782:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9784:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9786:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9788:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    978a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    978e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9790:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9792:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9796:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9798:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    979a:	d1ee      	bne.n	977a <pwm_init+0x4e>
    979c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    979e:	481e      	ldr	r0, [pc, #120]	; (9818 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97a0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97a4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    97a8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97aa:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97ae:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    97b2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    97b6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    97ba:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    97bc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    97be:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    97c0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97c2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97c6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97c8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    97ca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    97ce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97d0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    97d2:	d1ee      	bne.n	97b2 <pwm_init+0x86>
    97d4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    97d6:	4811      	ldr	r0, [pc, #68]	; (981c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97d8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97da:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    97de:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97e0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    97e4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    97e8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    97ec:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    97f0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    97f2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    97f4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    97f6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    97f8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    97fa:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    97fc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    97fe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9802:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9804:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    9808:	d1ee      	bne.n	97e8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    980a:	bd70      	pop	{r4, r5, r6, pc}
    980c:	400fc000 	.word	0x400fc000
    9810:	fc030000 	.word	0xfc030000
    9814:	403dc000 	.word	0x403dc000
    9818:	401e0000 	.word	0x401e0000
    981c:	401e4000 	.word	0x401e4000

00009820 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    9820:	4770      	bx	lr
    9822:	bf00      	nop

00009824 <sm_align_pool>:
{
    9824:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    9826:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    982a:	b15b      	cbz	r3, 9844 <sm_align_pool+0x20>
    982c:	b1ba      	cbz	r2, 985e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    982e:	4b0f      	ldr	r3, [pc, #60]	; (986c <sm_align_pool+0x48>)
    9830:	fba3 1302 	umull	r1, r3, r3, r2
    9834:	08db      	lsrs	r3, r3, #3
    9836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    983a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    983e:	d10a      	bne.n	9856 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    9840:	2001      	movs	r0, #1
}
    9842:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    9844:	4b09      	ldr	r3, [pc, #36]	; (986c <sm_align_pool+0x48>)
    9846:	fba3 1302 	umull	r1, r3, r3, r2
    984a:	08db      	lsrs	r3, r3, #3
    984c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    9850:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    9854:	d001      	beq.n	985a <sm_align_pool+0x36>
    9856:	1ad2      	subs	r2, r2, r3
    9858:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    985a:	2af0      	cmp	r2, #240	; 0xf0
    985c:	d8f0      	bhi.n	9840 <sm_align_pool+0x1c>
		errno = ENOSPC;
    985e:	f002 fa3b 	bl	bcd8 <__errno>
    9862:	221c      	movs	r2, #28
    9864:	4603      	mov	r3, r0
    9866:	2000      	movs	r0, #0
    9868:	601a      	str	r2, [r3, #0]
}
    986a:	bd08      	pop	{r3, pc}
    986c:	aaaaaaab 	.word	0xaaaaaaab

00009870 <sm_set_pool>:
{
    9870:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    9872:	4604      	mov	r4, r0
    9874:	b338      	cbz	r0, 98c6 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    9876:	b119      	cbz	r1, 9880 <sm_set_pool+0x10>
    9878:	fab2 f682 	clz	r6, r2
    987c:	0976      	lsrs	r6, r6, #5
    987e:	b9a2      	cbnz	r2, 98aa <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    9880:	6820      	ldr	r0, [r4, #0]
    9882:	b300      	cbz	r0, 98c6 <sm_set_pool+0x56>
    9884:	6862      	ldr	r2, [r4, #4]
    9886:	b1f2      	cbz	r2, 98c6 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    9888:	4b18      	ldr	r3, [pc, #96]	; (98ec <sm_set_pool+0x7c>)
    988a:	4919      	ldr	r1, [pc, #100]	; (98f0 <sm_set_pool+0x80>)
    988c:	fb02 f303 	mul.w	r3, r2, r3
    9890:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    9894:	d317      	bcc.n	98c6 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    9896:	68a3      	ldr	r3, [r4, #8]
    9898:	b9e3      	cbnz	r3, 98d4 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    989a:	2200      	movs	r2, #0
			return 1;
    989c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    989e:	6022      	str	r2, [r4, #0]
    98a0:	6062      	str	r2, [r4, #4]
    98a2:	60a2      	str	r2, [r4, #8]
    98a4:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    98a6:	4618      	mov	r0, r3
    98a8:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    98aa:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    98ac:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    98ae:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    98b2:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    98b4:	f7ff ffb6 	bl	9824 <sm_align_pool>
    98b8:	4603      	mov	r3, r0
    98ba:	2800      	cmp	r0, #0
    98bc:	d0f3      	beq.n	98a6 <sm_set_pool+0x36>
	if (do_zero) {
    98be:	b96d      	cbnz	r5, 98dc <sm_set_pool+0x6c>
	return 1;
    98c0:	2301      	movs	r3, #1
}
    98c2:	4618      	mov	r0, r3
    98c4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    98c6:	f002 fa07 	bl	bcd8 <__errno>
    98ca:	2216      	movs	r2, #22
		return 0;
    98cc:	2300      	movs	r3, #0
		errno = EINVAL;
    98ce:	6002      	str	r2, [r0, #0]
}
    98d0:	4618      	mov	r0, r3
    98d2:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    98d4:	2100      	movs	r1, #0
    98d6:	f002 f8c9 	bl	ba6c <memset>
    98da:	e7de      	b.n	989a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    98dc:	6862      	ldr	r2, [r4, #4]
    98de:	4631      	mov	r1, r6
    98e0:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    98e2:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    98e4:	f002 f8c2 	bl	ba6c <memset>
	return 1;
    98e8:	2301      	movs	r3, #1
    98ea:	e7dc      	b.n	98a6 <sm_set_pool+0x36>
    98ec:	aaaaaaab 	.word	0xaaaaaaab
    98f0:	15555555 	.word	0x15555555

000098f4 <__aeabi_atexit>:
    98f4:	4603      	mov	r3, r0
    98f6:	4608      	mov	r0, r1
    98f8:	4619      	mov	r1, r3
    98fa:	f001 be27 	b.w	b54c <__cxa_atexit>
    98fe:	bf00      	nop

00009900 <__aeabi_uldivmod>:
    9900:	b953      	cbnz	r3, 9918 <__aeabi_uldivmod+0x18>
    9902:	b94a      	cbnz	r2, 9918 <__aeabi_uldivmod+0x18>
    9904:	2900      	cmp	r1, #0
    9906:	bf08      	it	eq
    9908:	2800      	cmpeq	r0, #0
    990a:	bf1c      	itt	ne
    990c:	f04f 31ff 	movne.w	r1, #4294967295
    9910:	f04f 30ff 	movne.w	r0, #4294967295
    9914:	f000 b970 	b.w	9bf8 <__aeabi_idiv0>
    9918:	f1ad 0c08 	sub.w	ip, sp, #8
    991c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    9920:	f000 f806 	bl	9930 <__udivmoddi4>
    9924:	f8dd e004 	ldr.w	lr, [sp, #4]
    9928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    992c:	b004      	add	sp, #16
    992e:	4770      	bx	lr

00009930 <__udivmoddi4>:
    9930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9934:	9e08      	ldr	r6, [sp, #32]
    9936:	460d      	mov	r5, r1
    9938:	4604      	mov	r4, r0
    993a:	460f      	mov	r7, r1
    993c:	2b00      	cmp	r3, #0
    993e:	d14a      	bne.n	99d6 <__udivmoddi4+0xa6>
    9940:	428a      	cmp	r2, r1
    9942:	4694      	mov	ip, r2
    9944:	d965      	bls.n	9a12 <__udivmoddi4+0xe2>
    9946:	fab2 f382 	clz	r3, r2
    994a:	b143      	cbz	r3, 995e <__udivmoddi4+0x2e>
    994c:	fa02 fc03 	lsl.w	ip, r2, r3
    9950:	f1c3 0220 	rsb	r2, r3, #32
    9954:	409f      	lsls	r7, r3
    9956:	fa20 f202 	lsr.w	r2, r0, r2
    995a:	4317      	orrs	r7, r2
    995c:	409c      	lsls	r4, r3
    995e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    9962:	fa1f f58c 	uxth.w	r5, ip
    9966:	fbb7 f1fe 	udiv	r1, r7, lr
    996a:	0c22      	lsrs	r2, r4, #16
    996c:	fb0e 7711 	mls	r7, lr, r1, r7
    9970:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    9974:	fb01 f005 	mul.w	r0, r1, r5
    9978:	4290      	cmp	r0, r2
    997a:	d90a      	bls.n	9992 <__udivmoddi4+0x62>
    997c:	eb1c 0202 	adds.w	r2, ip, r2
    9980:	f101 37ff 	add.w	r7, r1, #4294967295
    9984:	f080 811c 	bcs.w	9bc0 <__udivmoddi4+0x290>
    9988:	4290      	cmp	r0, r2
    998a:	f240 8119 	bls.w	9bc0 <__udivmoddi4+0x290>
    998e:	3902      	subs	r1, #2
    9990:	4462      	add	r2, ip
    9992:	1a12      	subs	r2, r2, r0
    9994:	b2a4      	uxth	r4, r4
    9996:	fbb2 f0fe 	udiv	r0, r2, lr
    999a:	fb0e 2210 	mls	r2, lr, r0, r2
    999e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    99a2:	fb00 f505 	mul.w	r5, r0, r5
    99a6:	42a5      	cmp	r5, r4
    99a8:	d90a      	bls.n	99c0 <__udivmoddi4+0x90>
    99aa:	eb1c 0404 	adds.w	r4, ip, r4
    99ae:	f100 32ff 	add.w	r2, r0, #4294967295
    99b2:	f080 8107 	bcs.w	9bc4 <__udivmoddi4+0x294>
    99b6:	42a5      	cmp	r5, r4
    99b8:	f240 8104 	bls.w	9bc4 <__udivmoddi4+0x294>
    99bc:	4464      	add	r4, ip
    99be:	3802      	subs	r0, #2
    99c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    99c4:	1b64      	subs	r4, r4, r5
    99c6:	2100      	movs	r1, #0
    99c8:	b11e      	cbz	r6, 99d2 <__udivmoddi4+0xa2>
    99ca:	40dc      	lsrs	r4, r3
    99cc:	2300      	movs	r3, #0
    99ce:	e9c6 4300 	strd	r4, r3, [r6]
    99d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99d6:	428b      	cmp	r3, r1
    99d8:	d908      	bls.n	99ec <__udivmoddi4+0xbc>
    99da:	2e00      	cmp	r6, #0
    99dc:	f000 80ed 	beq.w	9bba <__udivmoddi4+0x28a>
    99e0:	2100      	movs	r1, #0
    99e2:	e9c6 0500 	strd	r0, r5, [r6]
    99e6:	4608      	mov	r0, r1
    99e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99ec:	fab3 f183 	clz	r1, r3
    99f0:	2900      	cmp	r1, #0
    99f2:	d149      	bne.n	9a88 <__udivmoddi4+0x158>
    99f4:	42ab      	cmp	r3, r5
    99f6:	d302      	bcc.n	99fe <__udivmoddi4+0xce>
    99f8:	4282      	cmp	r2, r0
    99fa:	f200 80f8 	bhi.w	9bee <__udivmoddi4+0x2be>
    99fe:	1a84      	subs	r4, r0, r2
    9a00:	eb65 0203 	sbc.w	r2, r5, r3
    9a04:	2001      	movs	r0, #1
    9a06:	4617      	mov	r7, r2
    9a08:	2e00      	cmp	r6, #0
    9a0a:	d0e2      	beq.n	99d2 <__udivmoddi4+0xa2>
    9a0c:	e9c6 4700 	strd	r4, r7, [r6]
    9a10:	e7df      	b.n	99d2 <__udivmoddi4+0xa2>
    9a12:	b902      	cbnz	r2, 9a16 <__udivmoddi4+0xe6>
    9a14:	deff      	udf	#255	; 0xff
    9a16:	fab2 f382 	clz	r3, r2
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	f040 8090 	bne.w	9b40 <__udivmoddi4+0x210>
    9a20:	1a8a      	subs	r2, r1, r2
    9a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9a26:	fa1f fe8c 	uxth.w	lr, ip
    9a2a:	2101      	movs	r1, #1
    9a2c:	fbb2 f5f7 	udiv	r5, r2, r7
    9a30:	fb07 2015 	mls	r0, r7, r5, r2
    9a34:	0c22      	lsrs	r2, r4, #16
    9a36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    9a3a:	fb0e f005 	mul.w	r0, lr, r5
    9a3e:	4290      	cmp	r0, r2
    9a40:	d908      	bls.n	9a54 <__udivmoddi4+0x124>
    9a42:	eb1c 0202 	adds.w	r2, ip, r2
    9a46:	f105 38ff 	add.w	r8, r5, #4294967295
    9a4a:	d202      	bcs.n	9a52 <__udivmoddi4+0x122>
    9a4c:	4290      	cmp	r0, r2
    9a4e:	f200 80cb 	bhi.w	9be8 <__udivmoddi4+0x2b8>
    9a52:	4645      	mov	r5, r8
    9a54:	1a12      	subs	r2, r2, r0
    9a56:	b2a4      	uxth	r4, r4
    9a58:	fbb2 f0f7 	udiv	r0, r2, r7
    9a5c:	fb07 2210 	mls	r2, r7, r0, r2
    9a60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9a64:	fb0e fe00 	mul.w	lr, lr, r0
    9a68:	45a6      	cmp	lr, r4
    9a6a:	d908      	bls.n	9a7e <__udivmoddi4+0x14e>
    9a6c:	eb1c 0404 	adds.w	r4, ip, r4
    9a70:	f100 32ff 	add.w	r2, r0, #4294967295
    9a74:	d202      	bcs.n	9a7c <__udivmoddi4+0x14c>
    9a76:	45a6      	cmp	lr, r4
    9a78:	f200 80bb 	bhi.w	9bf2 <__udivmoddi4+0x2c2>
    9a7c:	4610      	mov	r0, r2
    9a7e:	eba4 040e 	sub.w	r4, r4, lr
    9a82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    9a86:	e79f      	b.n	99c8 <__udivmoddi4+0x98>
    9a88:	f1c1 0720 	rsb	r7, r1, #32
    9a8c:	408b      	lsls	r3, r1
    9a8e:	fa22 fc07 	lsr.w	ip, r2, r7
    9a92:	ea4c 0c03 	orr.w	ip, ip, r3
    9a96:	fa05 f401 	lsl.w	r4, r5, r1
    9a9a:	fa20 f307 	lsr.w	r3, r0, r7
    9a9e:	40fd      	lsrs	r5, r7
    9aa0:	ea4f 491c 	mov.w	r9, ip, lsr #16
    9aa4:	4323      	orrs	r3, r4
    9aa6:	fbb5 f8f9 	udiv	r8, r5, r9
    9aaa:	fa1f fe8c 	uxth.w	lr, ip
    9aae:	fb09 5518 	mls	r5, r9, r8, r5
    9ab2:	0c1c      	lsrs	r4, r3, #16
    9ab4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9ab8:	fb08 f50e 	mul.w	r5, r8, lr
    9abc:	42a5      	cmp	r5, r4
    9abe:	fa02 f201 	lsl.w	r2, r2, r1
    9ac2:	fa00 f001 	lsl.w	r0, r0, r1
    9ac6:	d90b      	bls.n	9ae0 <__udivmoddi4+0x1b0>
    9ac8:	eb1c 0404 	adds.w	r4, ip, r4
    9acc:	f108 3aff 	add.w	sl, r8, #4294967295
    9ad0:	f080 8088 	bcs.w	9be4 <__udivmoddi4+0x2b4>
    9ad4:	42a5      	cmp	r5, r4
    9ad6:	f240 8085 	bls.w	9be4 <__udivmoddi4+0x2b4>
    9ada:	f1a8 0802 	sub.w	r8, r8, #2
    9ade:	4464      	add	r4, ip
    9ae0:	1b64      	subs	r4, r4, r5
    9ae2:	b29d      	uxth	r5, r3
    9ae4:	fbb4 f3f9 	udiv	r3, r4, r9
    9ae8:	fb09 4413 	mls	r4, r9, r3, r4
    9aec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9af0:	fb03 fe0e 	mul.w	lr, r3, lr
    9af4:	45a6      	cmp	lr, r4
    9af6:	d908      	bls.n	9b0a <__udivmoddi4+0x1da>
    9af8:	eb1c 0404 	adds.w	r4, ip, r4
    9afc:	f103 35ff 	add.w	r5, r3, #4294967295
    9b00:	d26c      	bcs.n	9bdc <__udivmoddi4+0x2ac>
    9b02:	45a6      	cmp	lr, r4
    9b04:	d96a      	bls.n	9bdc <__udivmoddi4+0x2ac>
    9b06:	3b02      	subs	r3, #2
    9b08:	4464      	add	r4, ip
    9b0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9b0e:	fba3 9502 	umull	r9, r5, r3, r2
    9b12:	eba4 040e 	sub.w	r4, r4, lr
    9b16:	42ac      	cmp	r4, r5
    9b18:	46c8      	mov	r8, r9
    9b1a:	46ae      	mov	lr, r5
    9b1c:	d356      	bcc.n	9bcc <__udivmoddi4+0x29c>
    9b1e:	d053      	beq.n	9bc8 <__udivmoddi4+0x298>
    9b20:	b156      	cbz	r6, 9b38 <__udivmoddi4+0x208>
    9b22:	ebb0 0208 	subs.w	r2, r0, r8
    9b26:	eb64 040e 	sbc.w	r4, r4, lr
    9b2a:	fa04 f707 	lsl.w	r7, r4, r7
    9b2e:	40ca      	lsrs	r2, r1
    9b30:	40cc      	lsrs	r4, r1
    9b32:	4317      	orrs	r7, r2
    9b34:	e9c6 7400 	strd	r7, r4, [r6]
    9b38:	4618      	mov	r0, r3
    9b3a:	2100      	movs	r1, #0
    9b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b40:	f1c3 0120 	rsb	r1, r3, #32
    9b44:	fa02 fc03 	lsl.w	ip, r2, r3
    9b48:	fa20 f201 	lsr.w	r2, r0, r1
    9b4c:	fa25 f101 	lsr.w	r1, r5, r1
    9b50:	409d      	lsls	r5, r3
    9b52:	432a      	orrs	r2, r5
    9b54:	ea4f 471c 	mov.w	r7, ip, lsr #16
    9b58:	fa1f fe8c 	uxth.w	lr, ip
    9b5c:	fbb1 f0f7 	udiv	r0, r1, r7
    9b60:	fb07 1510 	mls	r5, r7, r0, r1
    9b64:	0c11      	lsrs	r1, r2, #16
    9b66:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    9b6a:	fb00 f50e 	mul.w	r5, r0, lr
    9b6e:	428d      	cmp	r5, r1
    9b70:	fa04 f403 	lsl.w	r4, r4, r3
    9b74:	d908      	bls.n	9b88 <__udivmoddi4+0x258>
    9b76:	eb1c 0101 	adds.w	r1, ip, r1
    9b7a:	f100 38ff 	add.w	r8, r0, #4294967295
    9b7e:	d22f      	bcs.n	9be0 <__udivmoddi4+0x2b0>
    9b80:	428d      	cmp	r5, r1
    9b82:	d92d      	bls.n	9be0 <__udivmoddi4+0x2b0>
    9b84:	3802      	subs	r0, #2
    9b86:	4461      	add	r1, ip
    9b88:	1b49      	subs	r1, r1, r5
    9b8a:	b292      	uxth	r2, r2
    9b8c:	fbb1 f5f7 	udiv	r5, r1, r7
    9b90:	fb07 1115 	mls	r1, r7, r5, r1
    9b94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9b98:	fb05 f10e 	mul.w	r1, r5, lr
    9b9c:	4291      	cmp	r1, r2
    9b9e:	d908      	bls.n	9bb2 <__udivmoddi4+0x282>
    9ba0:	eb1c 0202 	adds.w	r2, ip, r2
    9ba4:	f105 38ff 	add.w	r8, r5, #4294967295
    9ba8:	d216      	bcs.n	9bd8 <__udivmoddi4+0x2a8>
    9baa:	4291      	cmp	r1, r2
    9bac:	d914      	bls.n	9bd8 <__udivmoddi4+0x2a8>
    9bae:	3d02      	subs	r5, #2
    9bb0:	4462      	add	r2, ip
    9bb2:	1a52      	subs	r2, r2, r1
    9bb4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9bb8:	e738      	b.n	9a2c <__udivmoddi4+0xfc>
    9bba:	4631      	mov	r1, r6
    9bbc:	4630      	mov	r0, r6
    9bbe:	e708      	b.n	99d2 <__udivmoddi4+0xa2>
    9bc0:	4639      	mov	r1, r7
    9bc2:	e6e6      	b.n	9992 <__udivmoddi4+0x62>
    9bc4:	4610      	mov	r0, r2
    9bc6:	e6fb      	b.n	99c0 <__udivmoddi4+0x90>
    9bc8:	4548      	cmp	r0, r9
    9bca:	d2a9      	bcs.n	9b20 <__udivmoddi4+0x1f0>
    9bcc:	ebb9 0802 	subs.w	r8, r9, r2
    9bd0:	eb65 0e0c 	sbc.w	lr, r5, ip
    9bd4:	3b01      	subs	r3, #1
    9bd6:	e7a3      	b.n	9b20 <__udivmoddi4+0x1f0>
    9bd8:	4645      	mov	r5, r8
    9bda:	e7ea      	b.n	9bb2 <__udivmoddi4+0x282>
    9bdc:	462b      	mov	r3, r5
    9bde:	e794      	b.n	9b0a <__udivmoddi4+0x1da>
    9be0:	4640      	mov	r0, r8
    9be2:	e7d1      	b.n	9b88 <__udivmoddi4+0x258>
    9be4:	46d0      	mov	r8, sl
    9be6:	e77b      	b.n	9ae0 <__udivmoddi4+0x1b0>
    9be8:	3d02      	subs	r5, #2
    9bea:	4462      	add	r2, ip
    9bec:	e732      	b.n	9a54 <__udivmoddi4+0x124>
    9bee:	4608      	mov	r0, r1
    9bf0:	e70a      	b.n	9a08 <__udivmoddi4+0xd8>
    9bf2:	4464      	add	r4, ip
    9bf4:	3802      	subs	r0, #2
    9bf6:	e742      	b.n	9a7e <__udivmoddi4+0x14e>

00009bf8 <__aeabi_idiv0>:
    9bf8:	4770      	bx	lr
    9bfa:	bf00      	nop

00009bfc <malloc>:
    9bfc:	4b02      	ldr	r3, [pc, #8]	; (9c08 <malloc+0xc>)
    9bfe:	4601      	mov	r1, r0
    9c00:	6818      	ldr	r0, [r3, #0]
    9c02:	f000 b80b 	b.w	9c1c <_malloc_r>
    9c06:	bf00      	nop
    9c08:	20008b7c 	.word	0x20008b7c

00009c0c <free>:
    9c0c:	4b02      	ldr	r3, [pc, #8]	; (9c18 <free+0xc>)
    9c0e:	4601      	mov	r1, r0
    9c10:	6818      	ldr	r0, [r3, #0]
    9c12:	f002 bbc7 	b.w	c3a4 <_free_r>
    9c16:	bf00      	nop
    9c18:	20008b7c 	.word	0x20008b7c

00009c1c <_malloc_r>:
    9c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c20:	f101 060b 	add.w	r6, r1, #11
    9c24:	2e16      	cmp	r6, #22
    9c26:	b083      	sub	sp, #12
    9c28:	4604      	mov	r4, r0
    9c2a:	d824      	bhi.n	9c76 <_malloc_r+0x5a>
    9c2c:	2910      	cmp	r1, #16
    9c2e:	f200 80ba 	bhi.w	9da6 <_malloc_r+0x18a>
    9c32:	f000 faa3 	bl	a17c <__malloc_lock>
    9c36:	2610      	movs	r6, #16
    9c38:	2218      	movs	r2, #24
    9c3a:	2002      	movs	r0, #2
    9c3c:	4fb5      	ldr	r7, [pc, #724]	; (9f14 <_malloc_r+0x2f8>)
    9c3e:	443a      	add	r2, r7
    9c40:	f1a2 0108 	sub.w	r1, r2, #8
    9c44:	6853      	ldr	r3, [r2, #4]
    9c46:	428b      	cmp	r3, r1
    9c48:	f000 80ba 	beq.w	9dc0 <_malloc_r+0x1a4>
    9c4c:	685a      	ldr	r2, [r3, #4]
    9c4e:	68d9      	ldr	r1, [r3, #12]
    9c50:	f022 0203 	bic.w	r2, r2, #3
    9c54:	441a      	add	r2, r3
    9c56:	689d      	ldr	r5, [r3, #8]
    9c58:	60e9      	str	r1, [r5, #12]
    9c5a:	608d      	str	r5, [r1, #8]
    9c5c:	6851      	ldr	r1, [r2, #4]
    9c5e:	f041 0101 	orr.w	r1, r1, #1
    9c62:	4620      	mov	r0, r4
    9c64:	6051      	str	r1, [r2, #4]
    9c66:	f103 0508 	add.w	r5, r3, #8
    9c6a:	f000 fa8d 	bl	a188 <__malloc_unlock>
    9c6e:	4628      	mov	r0, r5
    9c70:	b003      	add	sp, #12
    9c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c76:	f036 0607 	bics.w	r6, r6, #7
    9c7a:	f100 8094 	bmi.w	9da6 <_malloc_r+0x18a>
    9c7e:	42b1      	cmp	r1, r6
    9c80:	f200 8091 	bhi.w	9da6 <_malloc_r+0x18a>
    9c84:	f000 fa7a 	bl	a17c <__malloc_lock>
    9c88:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    9c8c:	f0c0 819a 	bcc.w	9fc4 <_malloc_r+0x3a8>
    9c90:	0a73      	lsrs	r3, r6, #9
    9c92:	f000 808f 	beq.w	9db4 <_malloc_r+0x198>
    9c96:	2b04      	cmp	r3, #4
    9c98:	f200 816f 	bhi.w	9f7a <_malloc_r+0x35e>
    9c9c:	09b3      	lsrs	r3, r6, #6
    9c9e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9ca2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    9ca6:	00c3      	lsls	r3, r0, #3
    9ca8:	4f9a      	ldr	r7, [pc, #616]	; (9f14 <_malloc_r+0x2f8>)
    9caa:	443b      	add	r3, r7
    9cac:	f1a3 0508 	sub.w	r5, r3, #8
    9cb0:	685b      	ldr	r3, [r3, #4]
    9cb2:	429d      	cmp	r5, r3
    9cb4:	d106      	bne.n	9cc4 <_malloc_r+0xa8>
    9cb6:	e00c      	b.n	9cd2 <_malloc_r+0xb6>
    9cb8:	2900      	cmp	r1, #0
    9cba:	f280 8127 	bge.w	9f0c <_malloc_r+0x2f0>
    9cbe:	68db      	ldr	r3, [r3, #12]
    9cc0:	429d      	cmp	r5, r3
    9cc2:	d006      	beq.n	9cd2 <_malloc_r+0xb6>
    9cc4:	685a      	ldr	r2, [r3, #4]
    9cc6:	f022 0203 	bic.w	r2, r2, #3
    9cca:	1b91      	subs	r1, r2, r6
    9ccc:	290f      	cmp	r1, #15
    9cce:	ddf3      	ble.n	9cb8 <_malloc_r+0x9c>
    9cd0:	4660      	mov	r0, ip
    9cd2:	693d      	ldr	r5, [r7, #16]
    9cd4:	f8df c250 	ldr.w	ip, [pc, #592]	; 9f28 <_malloc_r+0x30c>
    9cd8:	4565      	cmp	r5, ip
    9cda:	d07c      	beq.n	9dd6 <_malloc_r+0x1ba>
    9cdc:	686a      	ldr	r2, [r5, #4]
    9cde:	f022 0203 	bic.w	r2, r2, #3
    9ce2:	1b93      	subs	r3, r2, r6
    9ce4:	2b0f      	cmp	r3, #15
    9ce6:	f300 817b 	bgt.w	9fe0 <_malloc_r+0x3c4>
    9cea:	2b00      	cmp	r3, #0
    9cec:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9cf0:	f280 816c 	bge.w	9fcc <_malloc_r+0x3b0>
    9cf4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9cf8:	f080 811a 	bcs.w	9f30 <_malloc_r+0x314>
    9cfc:	08d3      	lsrs	r3, r2, #3
    9cfe:	6879      	ldr	r1, [r7, #4]
    9d00:	3301      	adds	r3, #1
    9d02:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    9d06:	2201      	movs	r2, #1
    9d08:	fa02 f20e 	lsl.w	r2, r2, lr
    9d0c:	430a      	orrs	r2, r1
    9d0e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    9d12:	f8c5 e008 	str.w	lr, [r5, #8]
    9d16:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    9d1a:	3908      	subs	r1, #8
    9d1c:	60e9      	str	r1, [r5, #12]
    9d1e:	607a      	str	r2, [r7, #4]
    9d20:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    9d24:	f8ce 500c 	str.w	r5, [lr, #12]
    9d28:	1083      	asrs	r3, r0, #2
    9d2a:	2101      	movs	r1, #1
    9d2c:	4099      	lsls	r1, r3
    9d2e:	4291      	cmp	r1, r2
    9d30:	d857      	bhi.n	9de2 <_malloc_r+0x1c6>
    9d32:	4211      	tst	r1, r2
    9d34:	d106      	bne.n	9d44 <_malloc_r+0x128>
    9d36:	f020 0003 	bic.w	r0, r0, #3
    9d3a:	0049      	lsls	r1, r1, #1
    9d3c:	4211      	tst	r1, r2
    9d3e:	f100 0004 	add.w	r0, r0, #4
    9d42:	d0fa      	beq.n	9d3a <_malloc_r+0x11e>
    9d44:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    9d48:	464d      	mov	r5, r9
    9d4a:	4686      	mov	lr, r0
    9d4c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    9d50:	4545      	cmp	r5, r8
    9d52:	d108      	bne.n	9d66 <_malloc_r+0x14a>
    9d54:	e11d      	b.n	9f92 <_malloc_r+0x376>
    9d56:	2b00      	cmp	r3, #0
    9d58:	f280 8124 	bge.w	9fa4 <_malloc_r+0x388>
    9d5c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    9d60:	4545      	cmp	r5, r8
    9d62:	f000 8116 	beq.w	9f92 <_malloc_r+0x376>
    9d66:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9d6a:	f022 0203 	bic.w	r2, r2, #3
    9d6e:	1b93      	subs	r3, r2, r6
    9d70:	2b0f      	cmp	r3, #15
    9d72:	ddf0      	ble.n	9d56 <_malloc_r+0x13a>
    9d74:	4620      	mov	r0, r4
    9d76:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    9d7a:	eb08 0106 	add.w	r1, r8, r6
    9d7e:	f046 0601 	orr.w	r6, r6, #1
    9d82:	f8c8 6004 	str.w	r6, [r8, #4]
    9d86:	60ec      	str	r4, [r5, #12]
    9d88:	60a5      	str	r5, [r4, #8]
    9d8a:	f043 0401 	orr.w	r4, r3, #1
    9d8e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9d92:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9d96:	604c      	str	r4, [r1, #4]
    9d98:	f848 3002 	str.w	r3, [r8, r2]
    9d9c:	f000 f9f4 	bl	a188 <__malloc_unlock>
    9da0:	f108 0508 	add.w	r5, r8, #8
    9da4:	e002      	b.n	9dac <_malloc_r+0x190>
    9da6:	230c      	movs	r3, #12
    9da8:	6023      	str	r3, [r4, #0]
    9daa:	2500      	movs	r5, #0
    9dac:	4628      	mov	r0, r5
    9dae:	b003      	add	sp, #12
    9db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9db4:	f44f 7300 	mov.w	r3, #512	; 0x200
    9db8:	2040      	movs	r0, #64	; 0x40
    9dba:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    9dbe:	e773      	b.n	9ca8 <_malloc_r+0x8c>
    9dc0:	68d3      	ldr	r3, [r2, #12]
    9dc2:	429a      	cmp	r2, r3
    9dc4:	bf08      	it	eq
    9dc6:	3002      	addeq	r0, #2
    9dc8:	f47f af40 	bne.w	9c4c <_malloc_r+0x30>
    9dcc:	693d      	ldr	r5, [r7, #16]
    9dce:	f8df c158 	ldr.w	ip, [pc, #344]	; 9f28 <_malloc_r+0x30c>
    9dd2:	4565      	cmp	r5, ip
    9dd4:	d182      	bne.n	9cdc <_malloc_r+0xc0>
    9dd6:	687a      	ldr	r2, [r7, #4]
    9dd8:	1083      	asrs	r3, r0, #2
    9dda:	2101      	movs	r1, #1
    9ddc:	4099      	lsls	r1, r3
    9dde:	4291      	cmp	r1, r2
    9de0:	d9a7      	bls.n	9d32 <_malloc_r+0x116>
    9de2:	68bd      	ldr	r5, [r7, #8]
    9de4:	686b      	ldr	r3, [r5, #4]
    9de6:	f023 0903 	bic.w	r9, r3, #3
    9dea:	454e      	cmp	r6, r9
    9dec:	d803      	bhi.n	9df6 <_malloc_r+0x1da>
    9dee:	eba9 0306 	sub.w	r3, r9, r6
    9df2:	2b0f      	cmp	r3, #15
    9df4:	dc7a      	bgt.n	9eec <_malloc_r+0x2d0>
    9df6:	f8df b134 	ldr.w	fp, [pc, #308]	; 9f2c <_malloc_r+0x310>
    9dfa:	4b47      	ldr	r3, [pc, #284]	; (9f18 <_malloc_r+0x2fc>)
    9dfc:	f8db 2000 	ldr.w	r2, [fp]
    9e00:	681b      	ldr	r3, [r3, #0]
    9e02:	3201      	adds	r2, #1
    9e04:	4433      	add	r3, r6
    9e06:	eb05 0a09 	add.w	sl, r5, r9
    9e0a:	f000 8133 	beq.w	a074 <_malloc_r+0x458>
    9e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    9e12:	330f      	adds	r3, #15
    9e14:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    9e18:	f028 080f 	bic.w	r8, r8, #15
    9e1c:	4641      	mov	r1, r8
    9e1e:	4620      	mov	r0, r4
    9e20:	f001 ff32 	bl	bc88 <_sbrk_r>
    9e24:	1c41      	adds	r1, r0, #1
    9e26:	4602      	mov	r2, r0
    9e28:	f000 80f3 	beq.w	a012 <_malloc_r+0x3f6>
    9e2c:	4582      	cmp	sl, r0
    9e2e:	f200 80ee 	bhi.w	a00e <_malloc_r+0x3f2>
    9e32:	4b3a      	ldr	r3, [pc, #232]	; (9f1c <_malloc_r+0x300>)
    9e34:	6819      	ldr	r1, [r3, #0]
    9e36:	4441      	add	r1, r8
    9e38:	6019      	str	r1, [r3, #0]
    9e3a:	4608      	mov	r0, r1
    9e3c:	f000 814e 	beq.w	a0dc <_malloc_r+0x4c0>
    9e40:	f8db 1000 	ldr.w	r1, [fp]
    9e44:	9301      	str	r3, [sp, #4]
    9e46:	3101      	adds	r1, #1
    9e48:	bf1b      	ittet	ne
    9e4a:	eba2 010a 	subne.w	r1, r2, sl
    9e4e:	1809      	addne	r1, r1, r0
    9e50:	f8cb 2000 	streq.w	r2, [fp]
    9e54:	6019      	strne	r1, [r3, #0]
    9e56:	f012 0b07 	ands.w	fp, r2, #7
    9e5a:	f000 8117 	beq.w	a08c <_malloc_r+0x470>
    9e5e:	f1cb 0108 	rsb	r1, fp, #8
    9e62:	440a      	add	r2, r1
    9e64:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    9e68:	4490      	add	r8, r2
    9e6a:	3108      	adds	r1, #8
    9e6c:	eba1 0108 	sub.w	r1, r1, r8
    9e70:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9e74:	4651      	mov	r1, sl
    9e76:	4620      	mov	r0, r4
    9e78:	9200      	str	r2, [sp, #0]
    9e7a:	f001 ff05 	bl	bc88 <_sbrk_r>
    9e7e:	1c42      	adds	r2, r0, #1
    9e80:	e9dd 2300 	ldrd	r2, r3, [sp]
    9e84:	f000 814f 	beq.w	a126 <_malloc_r+0x50a>
    9e88:	1a80      	subs	r0, r0, r2
    9e8a:	eb00 080a 	add.w	r8, r0, sl
    9e8e:	6819      	ldr	r1, [r3, #0]
    9e90:	60ba      	str	r2, [r7, #8]
    9e92:	f048 0001 	orr.w	r0, r8, #1
    9e96:	4451      	add	r1, sl
    9e98:	42bd      	cmp	r5, r7
    9e9a:	6050      	str	r0, [r2, #4]
    9e9c:	6019      	str	r1, [r3, #0]
    9e9e:	f000 8129 	beq.w	a0f4 <_malloc_r+0x4d8>
    9ea2:	f1b9 0f0f 	cmp.w	r9, #15
    9ea6:	f240 8127 	bls.w	a0f8 <_malloc_r+0x4dc>
    9eaa:	6868      	ldr	r0, [r5, #4]
    9eac:	f1a9 0c0c 	sub.w	ip, r9, #12
    9eb0:	f02c 0c07 	bic.w	ip, ip, #7
    9eb4:	f000 0001 	and.w	r0, r0, #1
    9eb8:	ea40 000c 	orr.w	r0, r0, ip
    9ebc:	6068      	str	r0, [r5, #4]
    9ebe:	f04f 0e05 	mov.w	lr, #5
    9ec2:	eb05 000c 	add.w	r0, r5, ip
    9ec6:	f1bc 0f0f 	cmp.w	ip, #15
    9eca:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9ece:	f200 8132 	bhi.w	a136 <_malloc_r+0x51a>
    9ed2:	6850      	ldr	r0, [r2, #4]
    9ed4:	4615      	mov	r5, r2
    9ed6:	4b12      	ldr	r3, [pc, #72]	; (9f20 <_malloc_r+0x304>)
    9ed8:	681a      	ldr	r2, [r3, #0]
    9eda:	428a      	cmp	r2, r1
    9edc:	bf38      	it	cc
    9ede:	6019      	strcc	r1, [r3, #0]
    9ee0:	4b10      	ldr	r3, [pc, #64]	; (9f24 <_malloc_r+0x308>)
    9ee2:	681a      	ldr	r2, [r3, #0]
    9ee4:	428a      	cmp	r2, r1
    9ee6:	bf38      	it	cc
    9ee8:	6019      	strcc	r1, [r3, #0]
    9eea:	e094      	b.n	a016 <_malloc_r+0x3fa>
    9eec:	19aa      	adds	r2, r5, r6
    9eee:	f043 0301 	orr.w	r3, r3, #1
    9ef2:	f046 0601 	orr.w	r6, r6, #1
    9ef6:	606e      	str	r6, [r5, #4]
    9ef8:	4620      	mov	r0, r4
    9efa:	60ba      	str	r2, [r7, #8]
    9efc:	6053      	str	r3, [r2, #4]
    9efe:	f000 f943 	bl	a188 <__malloc_unlock>
    9f02:	3508      	adds	r5, #8
    9f04:	4628      	mov	r0, r5
    9f06:	b003      	add	sp, #12
    9f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f0c:	68d9      	ldr	r1, [r3, #12]
    9f0e:	441a      	add	r2, r3
    9f10:	e6a1      	b.n	9c56 <_malloc_r+0x3a>
    9f12:	bf00      	nop
    9f14:	20008760 	.word	0x20008760
    9f18:	20028ae4 	.word	0x20028ae4
    9f1c:	20028ab4 	.word	0x20028ab4
    9f20:	20028adc 	.word	0x20028adc
    9f24:	20028ae0 	.word	0x20028ae0
    9f28:	20008768 	.word	0x20008768
    9f2c:	20008b68 	.word	0x20008b68
    9f30:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    9f34:	ea4f 2352 	mov.w	r3, r2, lsr #9
    9f38:	d363      	bcc.n	a002 <_malloc_r+0x3e6>
    9f3a:	2b14      	cmp	r3, #20
    9f3c:	f200 80b7 	bhi.w	a0ae <_malloc_r+0x492>
    9f40:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    9f44:	00c9      	lsls	r1, r1, #3
    9f46:	335b      	adds	r3, #91	; 0x5b
    9f48:	eb07 0e01 	add.w	lr, r7, r1
    9f4c:	5879      	ldr	r1, [r7, r1]
    9f4e:	f1ae 0e08 	sub.w	lr, lr, #8
    9f52:	458e      	cmp	lr, r1
    9f54:	f000 8091 	beq.w	a07a <_malloc_r+0x45e>
    9f58:	684b      	ldr	r3, [r1, #4]
    9f5a:	f023 0303 	bic.w	r3, r3, #3
    9f5e:	4293      	cmp	r3, r2
    9f60:	d902      	bls.n	9f68 <_malloc_r+0x34c>
    9f62:	6889      	ldr	r1, [r1, #8]
    9f64:	458e      	cmp	lr, r1
    9f66:	d1f7      	bne.n	9f58 <_malloc_r+0x33c>
    9f68:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    9f6c:	687a      	ldr	r2, [r7, #4]
    9f6e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    9f72:	f8ce 5008 	str.w	r5, [lr, #8]
    9f76:	60cd      	str	r5, [r1, #12]
    9f78:	e6d6      	b.n	9d28 <_malloc_r+0x10c>
    9f7a:	2b14      	cmp	r3, #20
    9f7c:	d959      	bls.n	a032 <_malloc_r+0x416>
    9f7e:	2b54      	cmp	r3, #84	; 0x54
    9f80:	f200 809d 	bhi.w	a0be <_malloc_r+0x4a2>
    9f84:	0b33      	lsrs	r3, r6, #12
    9f86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9f8a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9f8e:	00c3      	lsls	r3, r0, #3
    9f90:	e68a      	b.n	9ca8 <_malloc_r+0x8c>
    9f92:	f10e 0e01 	add.w	lr, lr, #1
    9f96:	f01e 0f03 	tst.w	lr, #3
    9f9a:	f105 0508 	add.w	r5, r5, #8
    9f9e:	f47f aed5 	bne.w	9d4c <_malloc_r+0x130>
    9fa2:	e051      	b.n	a048 <_malloc_r+0x42c>
    9fa4:	4442      	add	r2, r8
    9fa6:	4645      	mov	r5, r8
    9fa8:	6853      	ldr	r3, [r2, #4]
    9faa:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9fae:	f043 0301 	orr.w	r3, r3, #1
    9fb2:	6053      	str	r3, [r2, #4]
    9fb4:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9fb8:	4620      	mov	r0, r4
    9fba:	60d9      	str	r1, [r3, #12]
    9fbc:	608b      	str	r3, [r1, #8]
    9fbe:	f000 f8e3 	bl	a188 <__malloc_unlock>
    9fc2:	e6f3      	b.n	9dac <_malloc_r+0x190>
    9fc4:	08f0      	lsrs	r0, r6, #3
    9fc6:	f106 0208 	add.w	r2, r6, #8
    9fca:	e637      	b.n	9c3c <_malloc_r+0x20>
    9fcc:	442a      	add	r2, r5
    9fce:	4620      	mov	r0, r4
    9fd0:	6853      	ldr	r3, [r2, #4]
    9fd2:	f043 0301 	orr.w	r3, r3, #1
    9fd6:	6053      	str	r3, [r2, #4]
    9fd8:	3508      	adds	r5, #8
    9fda:	f000 f8d5 	bl	a188 <__malloc_unlock>
    9fde:	e6e5      	b.n	9dac <_malloc_r+0x190>
    9fe0:	19a9      	adds	r1, r5, r6
    9fe2:	4620      	mov	r0, r4
    9fe4:	f046 0601 	orr.w	r6, r6, #1
    9fe8:	f043 0401 	orr.w	r4, r3, #1
    9fec:	606e      	str	r6, [r5, #4]
    9fee:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9ff2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9ff6:	604c      	str	r4, [r1, #4]
    9ff8:	50ab      	str	r3, [r5, r2]
    9ffa:	f000 f8c5 	bl	a188 <__malloc_unlock>
    9ffe:	3508      	adds	r5, #8
    a000:	e6d4      	b.n	9dac <_malloc_r+0x190>
    a002:	0993      	lsrs	r3, r2, #6
    a004:	f103 0139 	add.w	r1, r3, #57	; 0x39
    a008:	00c9      	lsls	r1, r1, #3
    a00a:	3338      	adds	r3, #56	; 0x38
    a00c:	e79c      	b.n	9f48 <_malloc_r+0x32c>
    a00e:	42bd      	cmp	r5, r7
    a010:	d05f      	beq.n	a0d2 <_malloc_r+0x4b6>
    a012:	68bd      	ldr	r5, [r7, #8]
    a014:	6868      	ldr	r0, [r5, #4]
    a016:	f020 0803 	bic.w	r8, r0, #3
    a01a:	4546      	cmp	r6, r8
    a01c:	eba8 0306 	sub.w	r3, r8, r6
    a020:	d802      	bhi.n	a028 <_malloc_r+0x40c>
    a022:	2b0f      	cmp	r3, #15
    a024:	f73f af62 	bgt.w	9eec <_malloc_r+0x2d0>
    a028:	4620      	mov	r0, r4
    a02a:	f000 f8ad 	bl	a188 <__malloc_unlock>
    a02e:	2500      	movs	r5, #0
    a030:	e6bc      	b.n	9dac <_malloc_r+0x190>
    a032:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    a036:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    a03a:	00c3      	lsls	r3, r0, #3
    a03c:	e634      	b.n	9ca8 <_malloc_r+0x8c>
    a03e:	f859 3908 	ldr.w	r3, [r9], #-8
    a042:	454b      	cmp	r3, r9
    a044:	f040 8096 	bne.w	a174 <_malloc_r+0x558>
    a048:	f010 0f03 	tst.w	r0, #3
    a04c:	f100 30ff 	add.w	r0, r0, #4294967295
    a050:	d1f5      	bne.n	a03e <_malloc_r+0x422>
    a052:	687b      	ldr	r3, [r7, #4]
    a054:	ea23 0301 	bic.w	r3, r3, r1
    a058:	607b      	str	r3, [r7, #4]
    a05a:	0049      	lsls	r1, r1, #1
    a05c:	4299      	cmp	r1, r3
    a05e:	f63f aec0 	bhi.w	9de2 <_malloc_r+0x1c6>
    a062:	b919      	cbnz	r1, a06c <_malloc_r+0x450>
    a064:	e6bd      	b.n	9de2 <_malloc_r+0x1c6>
    a066:	0049      	lsls	r1, r1, #1
    a068:	f10e 0e04 	add.w	lr, lr, #4
    a06c:	4219      	tst	r1, r3
    a06e:	d0fa      	beq.n	a066 <_malloc_r+0x44a>
    a070:	4670      	mov	r0, lr
    a072:	e667      	b.n	9d44 <_malloc_r+0x128>
    a074:	f103 0810 	add.w	r8, r3, #16
    a078:	e6d0      	b.n	9e1c <_malloc_r+0x200>
    a07a:	109a      	asrs	r2, r3, #2
    a07c:	f04f 0801 	mov.w	r8, #1
    a080:	687b      	ldr	r3, [r7, #4]
    a082:	fa08 f202 	lsl.w	r2, r8, r2
    a086:	431a      	orrs	r2, r3
    a088:	607a      	str	r2, [r7, #4]
    a08a:	e770      	b.n	9f6e <_malloc_r+0x352>
    a08c:	eb02 0108 	add.w	r1, r2, r8
    a090:	4249      	negs	r1, r1
    a092:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    a096:	4651      	mov	r1, sl
    a098:	4620      	mov	r0, r4
    a09a:	9200      	str	r2, [sp, #0]
    a09c:	f001 fdf4 	bl	bc88 <_sbrk_r>
    a0a0:	1c43      	adds	r3, r0, #1
    a0a2:	e9dd 2300 	ldrd	r2, r3, [sp]
    a0a6:	f47f aeef 	bne.w	9e88 <_malloc_r+0x26c>
    a0aa:	46da      	mov	sl, fp
    a0ac:	e6ef      	b.n	9e8e <_malloc_r+0x272>
    a0ae:	2b54      	cmp	r3, #84	; 0x54
    a0b0:	d825      	bhi.n	a0fe <_malloc_r+0x4e2>
    a0b2:	0b13      	lsrs	r3, r2, #12
    a0b4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    a0b8:	00c9      	lsls	r1, r1, #3
    a0ba:	336e      	adds	r3, #110	; 0x6e
    a0bc:	e744      	b.n	9f48 <_malloc_r+0x32c>
    a0be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a0c2:	d825      	bhi.n	a110 <_malloc_r+0x4f4>
    a0c4:	0bf3      	lsrs	r3, r6, #15
    a0c6:	f103 0078 	add.w	r0, r3, #120	; 0x78
    a0ca:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    a0ce:	00c3      	lsls	r3, r0, #3
    a0d0:	e5ea      	b.n	9ca8 <_malloc_r+0x8c>
    a0d2:	4b29      	ldr	r3, [pc, #164]	; (a178 <_malloc_r+0x55c>)
    a0d4:	6818      	ldr	r0, [r3, #0]
    a0d6:	4440      	add	r0, r8
    a0d8:	6018      	str	r0, [r3, #0]
    a0da:	e6b1      	b.n	9e40 <_malloc_r+0x224>
    a0dc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    a0e0:	f1bc 0f00 	cmp.w	ip, #0
    a0e4:	f47f aeac 	bne.w	9e40 <_malloc_r+0x224>
    a0e8:	68bd      	ldr	r5, [r7, #8]
    a0ea:	44c8      	add	r8, r9
    a0ec:	f048 0001 	orr.w	r0, r8, #1
    a0f0:	6068      	str	r0, [r5, #4]
    a0f2:	e6f0      	b.n	9ed6 <_malloc_r+0x2ba>
    a0f4:	4615      	mov	r5, r2
    a0f6:	e6ee      	b.n	9ed6 <_malloc_r+0x2ba>
    a0f8:	2301      	movs	r3, #1
    a0fa:	6053      	str	r3, [r2, #4]
    a0fc:	e794      	b.n	a028 <_malloc_r+0x40c>
    a0fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a102:	d823      	bhi.n	a14c <_malloc_r+0x530>
    a104:	0bd3      	lsrs	r3, r2, #15
    a106:	f103 0178 	add.w	r1, r3, #120	; 0x78
    a10a:	00c9      	lsls	r1, r1, #3
    a10c:	3377      	adds	r3, #119	; 0x77
    a10e:	e71b      	b.n	9f48 <_malloc_r+0x32c>
    a110:	f240 5254 	movw	r2, #1364	; 0x554
    a114:	4293      	cmp	r3, r2
    a116:	d823      	bhi.n	a160 <_malloc_r+0x544>
    a118:	0cb3      	lsrs	r3, r6, #18
    a11a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    a11e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    a122:	00c3      	lsls	r3, r0, #3
    a124:	e5c0      	b.n	9ca8 <_malloc_r+0x8c>
    a126:	f1ab 0b08 	sub.w	fp, fp, #8
    a12a:	44d8      	add	r8, fp
    a12c:	eba8 0802 	sub.w	r8, r8, r2
    a130:	f04f 0a00 	mov.w	sl, #0
    a134:	e6ab      	b.n	9e8e <_malloc_r+0x272>
    a136:	f105 0108 	add.w	r1, r5, #8
    a13a:	4620      	mov	r0, r4
    a13c:	9300      	str	r3, [sp, #0]
    a13e:	f002 f931 	bl	c3a4 <_free_r>
    a142:	68bd      	ldr	r5, [r7, #8]
    a144:	9b00      	ldr	r3, [sp, #0]
    a146:	6868      	ldr	r0, [r5, #4]
    a148:	6819      	ldr	r1, [r3, #0]
    a14a:	e6c4      	b.n	9ed6 <_malloc_r+0x2ba>
    a14c:	f240 5154 	movw	r1, #1364	; 0x554
    a150:	428b      	cmp	r3, r1
    a152:	d80b      	bhi.n	a16c <_malloc_r+0x550>
    a154:	0c93      	lsrs	r3, r2, #18
    a156:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    a15a:	00c9      	lsls	r1, r1, #3
    a15c:	337c      	adds	r3, #124	; 0x7c
    a15e:	e6f3      	b.n	9f48 <_malloc_r+0x32c>
    a160:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    a164:	207f      	movs	r0, #127	; 0x7f
    a166:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    a16a:	e59d      	b.n	9ca8 <_malloc_r+0x8c>
    a16c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    a170:	237e      	movs	r3, #126	; 0x7e
    a172:	e6e9      	b.n	9f48 <_malloc_r+0x32c>
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	e770      	b.n	a05a <_malloc_r+0x43e>
    a178:	20028ab4 	.word	0x20028ab4

0000a17c <__malloc_lock>:
    a17c:	4801      	ldr	r0, [pc, #4]	; (a184 <__malloc_lock+0x8>)
    a17e:	f001 bdd9 	b.w	bd34 <__retarget_lock_acquire_recursive>
    a182:	bf00      	nop
    a184:	20028aac 	.word	0x20028aac

0000a188 <__malloc_unlock>:
    a188:	4801      	ldr	r0, [pc, #4]	; (a190 <__malloc_unlock+0x8>)
    a18a:	f001 bdd5 	b.w	bd38 <__retarget_lock_release_recursive>
    a18e:	bf00      	nop
    a190:	20028aac 	.word	0x20028aac

0000a194 <realloc>:
    a194:	b410      	push	{r4}
    a196:	4c04      	ldr	r4, [pc, #16]	; (a1a8 <realloc+0x14>)
    a198:	4603      	mov	r3, r0
    a19a:	460a      	mov	r2, r1
    a19c:	6820      	ldr	r0, [r4, #0]
    a19e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a1a2:	4619      	mov	r1, r3
    a1a4:	f000 b802 	b.w	a1ac <_realloc_r>
    a1a8:	20008b7c 	.word	0x20008b7c

0000a1ac <_realloc_r>:
    a1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1b0:	4617      	mov	r7, r2
    a1b2:	2900      	cmp	r1, #0
    a1b4:	f000 8098 	beq.w	a2e8 <_realloc_r+0x13c>
    a1b8:	460c      	mov	r4, r1
    a1ba:	f107 050b 	add.w	r5, r7, #11
    a1be:	4680      	mov	r8, r0
    a1c0:	f7ff ffdc 	bl	a17c <__malloc_lock>
    a1c4:	2d16      	cmp	r5, #22
    a1c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    a1ca:	d85b      	bhi.n	a284 <_realloc_r+0xd8>
    a1cc:	2510      	movs	r5, #16
    a1ce:	462a      	mov	r2, r5
    a1d0:	42af      	cmp	r7, r5
    a1d2:	d85c      	bhi.n	a28e <_realloc_r+0xe2>
    a1d4:	f021 0603 	bic.w	r6, r1, #3
    a1d8:	4296      	cmp	r6, r2
    a1da:	f1a4 0908 	sub.w	r9, r4, #8
    a1de:	da62      	bge.n	a2a6 <_realloc_r+0xfa>
    a1e0:	4bbc      	ldr	r3, [pc, #752]	; (a4d4 <_realloc_r+0x328>)
    a1e2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    a1e6:	eb09 0006 	add.w	r0, r9, r6
    a1ea:	4584      	cmp	ip, r0
    a1ec:	f000 8097 	beq.w	a31e <_realloc_r+0x172>
    a1f0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a1f4:	f02c 0301 	bic.w	r3, ip, #1
    a1f8:	4403      	add	r3, r0
    a1fa:	685b      	ldr	r3, [r3, #4]
    a1fc:	07db      	lsls	r3, r3, #31
    a1fe:	d468      	bmi.n	a2d2 <_realloc_r+0x126>
    a200:	f02c 0c03 	bic.w	ip, ip, #3
    a204:	eb06 030c 	add.w	r3, r6, ip
    a208:	4293      	cmp	r3, r2
    a20a:	da47      	bge.n	a29c <_realloc_r+0xf0>
    a20c:	07cb      	lsls	r3, r1, #31
    a20e:	d410      	bmi.n	a232 <_realloc_r+0x86>
    a210:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a214:	eba9 0a03 	sub.w	sl, r9, r3
    a218:	f8da 3004 	ldr.w	r3, [sl, #4]
    a21c:	f023 0103 	bic.w	r1, r3, #3
    a220:	448c      	add	ip, r1
    a222:	44b4      	add	ip, r6
    a224:	4594      	cmp	ip, r2
    a226:	f280 8111 	bge.w	a44c <_realloc_r+0x2a0>
    a22a:	1873      	adds	r3, r6, r1
    a22c:	4293      	cmp	r3, r2
    a22e:	f280 80e8 	bge.w	a402 <_realloc_r+0x256>
    a232:	4639      	mov	r1, r7
    a234:	4640      	mov	r0, r8
    a236:	f7ff fcf1 	bl	9c1c <_malloc_r>
    a23a:	4607      	mov	r7, r0
    a23c:	b1e0      	cbz	r0, a278 <_realloc_r+0xcc>
    a23e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a242:	f023 0301 	bic.w	r3, r3, #1
    a246:	444b      	add	r3, r9
    a248:	f1a0 0208 	sub.w	r2, r0, #8
    a24c:	4293      	cmp	r3, r2
    a24e:	f000 80d2 	beq.w	a3f6 <_realloc_r+0x24a>
    a252:	1f32      	subs	r2, r6, #4
    a254:	2a24      	cmp	r2, #36	; 0x24
    a256:	f200 80f5 	bhi.w	a444 <_realloc_r+0x298>
    a25a:	2a13      	cmp	r2, #19
    a25c:	f200 80ac 	bhi.w	a3b8 <_realloc_r+0x20c>
    a260:	4603      	mov	r3, r0
    a262:	4622      	mov	r2, r4
    a264:	6811      	ldr	r1, [r2, #0]
    a266:	6019      	str	r1, [r3, #0]
    a268:	6851      	ldr	r1, [r2, #4]
    a26a:	6059      	str	r1, [r3, #4]
    a26c:	6892      	ldr	r2, [r2, #8]
    a26e:	609a      	str	r2, [r3, #8]
    a270:	4621      	mov	r1, r4
    a272:	4640      	mov	r0, r8
    a274:	f002 f896 	bl	c3a4 <_free_r>
    a278:	4640      	mov	r0, r8
    a27a:	f7ff ff85 	bl	a188 <__malloc_unlock>
    a27e:	4638      	mov	r0, r7
    a280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a284:	f025 0507 	bic.w	r5, r5, #7
    a288:	2d00      	cmp	r5, #0
    a28a:	462a      	mov	r2, r5
    a28c:	daa0      	bge.n	a1d0 <_realloc_r+0x24>
    a28e:	230c      	movs	r3, #12
    a290:	f8c8 3000 	str.w	r3, [r8]
    a294:	2700      	movs	r7, #0
    a296:	4638      	mov	r0, r7
    a298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a29c:	461e      	mov	r6, r3
    a29e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    a2a2:	60d3      	str	r3, [r2, #12]
    a2a4:	609a      	str	r2, [r3, #8]
    a2a6:	1b73      	subs	r3, r6, r5
    a2a8:	2b0f      	cmp	r3, #15
    a2aa:	d822      	bhi.n	a2f2 <_realloc_r+0x146>
    a2ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a2b0:	f003 0301 	and.w	r3, r3, #1
    a2b4:	4333      	orrs	r3, r6
    a2b6:	444e      	add	r6, r9
    a2b8:	f8c9 3004 	str.w	r3, [r9, #4]
    a2bc:	6873      	ldr	r3, [r6, #4]
    a2be:	f043 0301 	orr.w	r3, r3, #1
    a2c2:	6073      	str	r3, [r6, #4]
    a2c4:	4640      	mov	r0, r8
    a2c6:	4627      	mov	r7, r4
    a2c8:	f7ff ff5e 	bl	a188 <__malloc_unlock>
    a2cc:	4638      	mov	r0, r7
    a2ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2d2:	07c9      	lsls	r1, r1, #31
    a2d4:	d4ad      	bmi.n	a232 <_realloc_r+0x86>
    a2d6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a2da:	eba9 0a03 	sub.w	sl, r9, r3
    a2de:	f8da 1004 	ldr.w	r1, [sl, #4]
    a2e2:	f021 0103 	bic.w	r1, r1, #3
    a2e6:	e7a0      	b.n	a22a <_realloc_r+0x7e>
    a2e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2ec:	4611      	mov	r1, r2
    a2ee:	f7ff bc95 	b.w	9c1c <_malloc_r>
    a2f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a2f6:	eb09 0105 	add.w	r1, r9, r5
    a2fa:	f002 0201 	and.w	r2, r2, #1
    a2fe:	444e      	add	r6, r9
    a300:	f043 0301 	orr.w	r3, r3, #1
    a304:	432a      	orrs	r2, r5
    a306:	f8c9 2004 	str.w	r2, [r9, #4]
    a30a:	604b      	str	r3, [r1, #4]
    a30c:	6873      	ldr	r3, [r6, #4]
    a30e:	f043 0301 	orr.w	r3, r3, #1
    a312:	3108      	adds	r1, #8
    a314:	6073      	str	r3, [r6, #4]
    a316:	4640      	mov	r0, r8
    a318:	f002 f844 	bl	c3a4 <_free_r>
    a31c:	e7d2      	b.n	a2c4 <_realloc_r+0x118>
    a31e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    a322:	f020 0b03 	bic.w	fp, r0, #3
    a326:	eb06 0c0b 	add.w	ip, r6, fp
    a32a:	f105 0010 	add.w	r0, r5, #16
    a32e:	4584      	cmp	ip, r0
    a330:	da4d      	bge.n	a3ce <_realloc_r+0x222>
    a332:	07c9      	lsls	r1, r1, #31
    a334:	f53f af7d 	bmi.w	a232 <_realloc_r+0x86>
    a338:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a33c:	eba9 0a01 	sub.w	sl, r9, r1
    a340:	f8da 1004 	ldr.w	r1, [sl, #4]
    a344:	f021 0103 	bic.w	r1, r1, #3
    a348:	448b      	add	fp, r1
    a34a:	44b3      	add	fp, r6
    a34c:	4558      	cmp	r0, fp
    a34e:	f73f af6c 	bgt.w	a22a <_realloc_r+0x7e>
    a352:	4657      	mov	r7, sl
    a354:	f8da 100c 	ldr.w	r1, [sl, #12]
    a358:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a35c:	1f32      	subs	r2, r6, #4
    a35e:	2a24      	cmp	r2, #36	; 0x24
    a360:	60c1      	str	r1, [r0, #12]
    a362:	6088      	str	r0, [r1, #8]
    a364:	f200 80db 	bhi.w	a51e <_realloc_r+0x372>
    a368:	2a13      	cmp	r2, #19
    a36a:	f240 80d6 	bls.w	a51a <_realloc_r+0x36e>
    a36e:	6821      	ldr	r1, [r4, #0]
    a370:	f8ca 1008 	str.w	r1, [sl, #8]
    a374:	6861      	ldr	r1, [r4, #4]
    a376:	f8ca 100c 	str.w	r1, [sl, #12]
    a37a:	2a1b      	cmp	r2, #27
    a37c:	f200 80df 	bhi.w	a53e <_realloc_r+0x392>
    a380:	3408      	adds	r4, #8
    a382:	f10a 0210 	add.w	r2, sl, #16
    a386:	6821      	ldr	r1, [r4, #0]
    a388:	6011      	str	r1, [r2, #0]
    a38a:	6861      	ldr	r1, [r4, #4]
    a38c:	6051      	str	r1, [r2, #4]
    a38e:	68a1      	ldr	r1, [r4, #8]
    a390:	6091      	str	r1, [r2, #8]
    a392:	eb0a 0105 	add.w	r1, sl, r5
    a396:	ebab 0205 	sub.w	r2, fp, r5
    a39a:	f042 0201 	orr.w	r2, r2, #1
    a39e:	6099      	str	r1, [r3, #8]
    a3a0:	604a      	str	r2, [r1, #4]
    a3a2:	f8da 3004 	ldr.w	r3, [sl, #4]
    a3a6:	f003 0301 	and.w	r3, r3, #1
    a3aa:	432b      	orrs	r3, r5
    a3ac:	4640      	mov	r0, r8
    a3ae:	f8ca 3004 	str.w	r3, [sl, #4]
    a3b2:	f7ff fee9 	bl	a188 <__malloc_unlock>
    a3b6:	e76e      	b.n	a296 <_realloc_r+0xea>
    a3b8:	6823      	ldr	r3, [r4, #0]
    a3ba:	6003      	str	r3, [r0, #0]
    a3bc:	6863      	ldr	r3, [r4, #4]
    a3be:	6043      	str	r3, [r0, #4]
    a3c0:	2a1b      	cmp	r2, #27
    a3c2:	d868      	bhi.n	a496 <_realloc_r+0x2ea>
    a3c4:	f104 0208 	add.w	r2, r4, #8
    a3c8:	f100 0308 	add.w	r3, r0, #8
    a3cc:	e74a      	b.n	a264 <_realloc_r+0xb8>
    a3ce:	eb09 0205 	add.w	r2, r9, r5
    a3d2:	609a      	str	r2, [r3, #8]
    a3d4:	ebac 0305 	sub.w	r3, ip, r5
    a3d8:	f043 0301 	orr.w	r3, r3, #1
    a3dc:	6053      	str	r3, [r2, #4]
    a3de:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a3e2:	f003 0301 	and.w	r3, r3, #1
    a3e6:	432b      	orrs	r3, r5
    a3e8:	4640      	mov	r0, r8
    a3ea:	f844 3c04 	str.w	r3, [r4, #-4]
    a3ee:	f7ff fecb 	bl	a188 <__malloc_unlock>
    a3f2:	4627      	mov	r7, r4
    a3f4:	e74f      	b.n	a296 <_realloc_r+0xea>
    a3f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a3fa:	f023 0303 	bic.w	r3, r3, #3
    a3fe:	441e      	add	r6, r3
    a400:	e751      	b.n	a2a6 <_realloc_r+0xfa>
    a402:	4657      	mov	r7, sl
    a404:	f8da 100c 	ldr.w	r1, [sl, #12]
    a408:	f857 0f08 	ldr.w	r0, [r7, #8]!
    a40c:	1f32      	subs	r2, r6, #4
    a40e:	2a24      	cmp	r2, #36	; 0x24
    a410:	60c1      	str	r1, [r0, #12]
    a412:	6088      	str	r0, [r1, #8]
    a414:	d84c      	bhi.n	a4b0 <_realloc_r+0x304>
    a416:	2a13      	cmp	r2, #19
    a418:	d948      	bls.n	a4ac <_realloc_r+0x300>
    a41a:	6821      	ldr	r1, [r4, #0]
    a41c:	f8ca 1008 	str.w	r1, [sl, #8]
    a420:	6861      	ldr	r1, [r4, #4]
    a422:	f8ca 100c 	str.w	r1, [sl, #12]
    a426:	2a1b      	cmp	r2, #27
    a428:	d856      	bhi.n	a4d8 <_realloc_r+0x32c>
    a42a:	3408      	adds	r4, #8
    a42c:	f10a 0210 	add.w	r2, sl, #16
    a430:	461e      	mov	r6, r3
    a432:	6823      	ldr	r3, [r4, #0]
    a434:	6013      	str	r3, [r2, #0]
    a436:	6863      	ldr	r3, [r4, #4]
    a438:	6053      	str	r3, [r2, #4]
    a43a:	68a3      	ldr	r3, [r4, #8]
    a43c:	6093      	str	r3, [r2, #8]
    a43e:	46d1      	mov	r9, sl
    a440:	463c      	mov	r4, r7
    a442:	e730      	b.n	a2a6 <_realloc_r+0xfa>
    a444:	4621      	mov	r1, r4
    a446:	f001 fa95 	bl	b974 <memmove>
    a44a:	e711      	b.n	a270 <_realloc_r+0xc4>
    a44c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    a450:	4657      	mov	r7, sl
    a452:	60cb      	str	r3, [r1, #12]
    a454:	6099      	str	r1, [r3, #8]
    a456:	f857 1f08 	ldr.w	r1, [r7, #8]!
    a45a:	f8da 300c 	ldr.w	r3, [sl, #12]
    a45e:	60cb      	str	r3, [r1, #12]
    a460:	1f32      	subs	r2, r6, #4
    a462:	2a24      	cmp	r2, #36	; 0x24
    a464:	6099      	str	r1, [r3, #8]
    a466:	d82d      	bhi.n	a4c4 <_realloc_r+0x318>
    a468:	2a13      	cmp	r2, #19
    a46a:	d929      	bls.n	a4c0 <_realloc_r+0x314>
    a46c:	6823      	ldr	r3, [r4, #0]
    a46e:	f8ca 3008 	str.w	r3, [sl, #8]
    a472:	6863      	ldr	r3, [r4, #4]
    a474:	f8ca 300c 	str.w	r3, [sl, #12]
    a478:	2a1b      	cmp	r2, #27
    a47a:	d842      	bhi.n	a502 <_realloc_r+0x356>
    a47c:	3408      	adds	r4, #8
    a47e:	f10a 0310 	add.w	r3, sl, #16
    a482:	6822      	ldr	r2, [r4, #0]
    a484:	601a      	str	r2, [r3, #0]
    a486:	6862      	ldr	r2, [r4, #4]
    a488:	605a      	str	r2, [r3, #4]
    a48a:	68a2      	ldr	r2, [r4, #8]
    a48c:	609a      	str	r2, [r3, #8]
    a48e:	4666      	mov	r6, ip
    a490:	46d1      	mov	r9, sl
    a492:	463c      	mov	r4, r7
    a494:	e707      	b.n	a2a6 <_realloc_r+0xfa>
    a496:	68a3      	ldr	r3, [r4, #8]
    a498:	6083      	str	r3, [r0, #8]
    a49a:	68e3      	ldr	r3, [r4, #12]
    a49c:	60c3      	str	r3, [r0, #12]
    a49e:	2a24      	cmp	r2, #36	; 0x24
    a4a0:	d026      	beq.n	a4f0 <_realloc_r+0x344>
    a4a2:	f104 0210 	add.w	r2, r4, #16
    a4a6:	f100 0310 	add.w	r3, r0, #16
    a4aa:	e6db      	b.n	a264 <_realloc_r+0xb8>
    a4ac:	463a      	mov	r2, r7
    a4ae:	e7bf      	b.n	a430 <_realloc_r+0x284>
    a4b0:	4621      	mov	r1, r4
    a4b2:	4638      	mov	r0, r7
    a4b4:	461e      	mov	r6, r3
    a4b6:	46d1      	mov	r9, sl
    a4b8:	f001 fa5c 	bl	b974 <memmove>
    a4bc:	463c      	mov	r4, r7
    a4be:	e6f2      	b.n	a2a6 <_realloc_r+0xfa>
    a4c0:	463b      	mov	r3, r7
    a4c2:	e7de      	b.n	a482 <_realloc_r+0x2d6>
    a4c4:	4621      	mov	r1, r4
    a4c6:	4638      	mov	r0, r7
    a4c8:	4666      	mov	r6, ip
    a4ca:	46d1      	mov	r9, sl
    a4cc:	f001 fa52 	bl	b974 <memmove>
    a4d0:	463c      	mov	r4, r7
    a4d2:	e6e8      	b.n	a2a6 <_realloc_r+0xfa>
    a4d4:	20008760 	.word	0x20008760
    a4d8:	68a1      	ldr	r1, [r4, #8]
    a4da:	f8ca 1010 	str.w	r1, [sl, #16]
    a4de:	68e1      	ldr	r1, [r4, #12]
    a4e0:	f8ca 1014 	str.w	r1, [sl, #20]
    a4e4:	2a24      	cmp	r2, #36	; 0x24
    a4e6:	d020      	beq.n	a52a <_realloc_r+0x37e>
    a4e8:	3410      	adds	r4, #16
    a4ea:	f10a 0218 	add.w	r2, sl, #24
    a4ee:	e79f      	b.n	a430 <_realloc_r+0x284>
    a4f0:	6923      	ldr	r3, [r4, #16]
    a4f2:	6103      	str	r3, [r0, #16]
    a4f4:	6961      	ldr	r1, [r4, #20]
    a4f6:	6141      	str	r1, [r0, #20]
    a4f8:	f104 0218 	add.w	r2, r4, #24
    a4fc:	f100 0318 	add.w	r3, r0, #24
    a500:	e6b0      	b.n	a264 <_realloc_r+0xb8>
    a502:	68a3      	ldr	r3, [r4, #8]
    a504:	f8ca 3010 	str.w	r3, [sl, #16]
    a508:	68e3      	ldr	r3, [r4, #12]
    a50a:	f8ca 3014 	str.w	r3, [sl, #20]
    a50e:	2a24      	cmp	r2, #36	; 0x24
    a510:	d021      	beq.n	a556 <_realloc_r+0x3aa>
    a512:	3410      	adds	r4, #16
    a514:	f10a 0318 	add.w	r3, sl, #24
    a518:	e7b3      	b.n	a482 <_realloc_r+0x2d6>
    a51a:	463a      	mov	r2, r7
    a51c:	e733      	b.n	a386 <_realloc_r+0x1da>
    a51e:	4621      	mov	r1, r4
    a520:	4638      	mov	r0, r7
    a522:	f001 fa27 	bl	b974 <memmove>
    a526:	4b16      	ldr	r3, [pc, #88]	; (a580 <_realloc_r+0x3d4>)
    a528:	e733      	b.n	a392 <_realloc_r+0x1e6>
    a52a:	6922      	ldr	r2, [r4, #16]
    a52c:	f8ca 2018 	str.w	r2, [sl, #24]
    a530:	6962      	ldr	r2, [r4, #20]
    a532:	f8ca 201c 	str.w	r2, [sl, #28]
    a536:	3418      	adds	r4, #24
    a538:	f10a 0220 	add.w	r2, sl, #32
    a53c:	e778      	b.n	a430 <_realloc_r+0x284>
    a53e:	68a1      	ldr	r1, [r4, #8]
    a540:	f8ca 1010 	str.w	r1, [sl, #16]
    a544:	68e1      	ldr	r1, [r4, #12]
    a546:	f8ca 1014 	str.w	r1, [sl, #20]
    a54a:	2a24      	cmp	r2, #36	; 0x24
    a54c:	d00d      	beq.n	a56a <_realloc_r+0x3be>
    a54e:	3410      	adds	r4, #16
    a550:	f10a 0218 	add.w	r2, sl, #24
    a554:	e717      	b.n	a386 <_realloc_r+0x1da>
    a556:	6923      	ldr	r3, [r4, #16]
    a558:	f8ca 3018 	str.w	r3, [sl, #24]
    a55c:	6963      	ldr	r3, [r4, #20]
    a55e:	f8ca 301c 	str.w	r3, [sl, #28]
    a562:	3418      	adds	r4, #24
    a564:	f10a 0320 	add.w	r3, sl, #32
    a568:	e78b      	b.n	a482 <_realloc_r+0x2d6>
    a56a:	6922      	ldr	r2, [r4, #16]
    a56c:	f8ca 2018 	str.w	r2, [sl, #24]
    a570:	6962      	ldr	r2, [r4, #20]
    a572:	f8ca 201c 	str.w	r2, [sl, #28]
    a576:	3418      	adds	r4, #24
    a578:	f10a 0220 	add.w	r2, sl, #32
    a57c:	e703      	b.n	a386 <_realloc_r+0x1da>
    a57e:	bf00      	nop
    a580:	20008760 	.word	0x20008760
    a584:	00000000 	.word	0x00000000

0000a588 <_strtod_l>:
    a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a58c:	ed2d 8b10 	vpush	{d8-d15}
    a590:	b097      	sub	sp, #92	; 0x5c
    a592:	468a      	mov	sl, r1
    a594:	2100      	movs	r1, #0
    a596:	9207      	str	r2, [sp, #28]
    a598:	9112      	str	r1, [sp, #72]	; 0x48
    a59a:	2200      	movs	r2, #0
    a59c:	2100      	movs	r1, #0
    a59e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    a5a2:	4680      	mov	r8, r0
    a5a4:	4651      	mov	r1, sl
    a5a6:	9111      	str	r1, [sp, #68]	; 0x44
    a5a8:	460f      	mov	r7, r1
    a5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
    a5ae:	2a2d      	cmp	r2, #45	; 0x2d
    a5b0:	d85e      	bhi.n	a670 <_strtod_l+0xe8>
    a5b2:	a001      	add	r0, pc, #4	; (adr r0, a5b8 <_strtod_l+0x30>)
    a5b4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a5b8:	0000a759 	.word	0x0000a759
    a5bc:	0000a671 	.word	0x0000a671
    a5c0:	0000a671 	.word	0x0000a671
    a5c4:	0000a671 	.word	0x0000a671
    a5c8:	0000a671 	.word	0x0000a671
    a5cc:	0000a671 	.word	0x0000a671
    a5d0:	0000a671 	.word	0x0000a671
    a5d4:	0000a671 	.word	0x0000a671
    a5d8:	0000a671 	.word	0x0000a671
    a5dc:	0000a5a7 	.word	0x0000a5a7
    a5e0:	0000a5a7 	.word	0x0000a5a7
    a5e4:	0000a5a7 	.word	0x0000a5a7
    a5e8:	0000a5a7 	.word	0x0000a5a7
    a5ec:	0000a5a7 	.word	0x0000a5a7
    a5f0:	0000a671 	.word	0x0000a671
    a5f4:	0000a671 	.word	0x0000a671
    a5f8:	0000a671 	.word	0x0000a671
    a5fc:	0000a671 	.word	0x0000a671
    a600:	0000a671 	.word	0x0000a671
    a604:	0000a671 	.word	0x0000a671
    a608:	0000a671 	.word	0x0000a671
    a60c:	0000a671 	.word	0x0000a671
    a610:	0000a671 	.word	0x0000a671
    a614:	0000a671 	.word	0x0000a671
    a618:	0000a671 	.word	0x0000a671
    a61c:	0000a671 	.word	0x0000a671
    a620:	0000a671 	.word	0x0000a671
    a624:	0000a671 	.word	0x0000a671
    a628:	0000a671 	.word	0x0000a671
    a62c:	0000a671 	.word	0x0000a671
    a630:	0000a671 	.word	0x0000a671
    a634:	0000a671 	.word	0x0000a671
    a638:	0000a5a7 	.word	0x0000a5a7
    a63c:	0000a671 	.word	0x0000a671
    a640:	0000a671 	.word	0x0000a671
    a644:	0000a671 	.word	0x0000a671
    a648:	0000a671 	.word	0x0000a671
    a64c:	0000a671 	.word	0x0000a671
    a650:	0000a671 	.word	0x0000a671
    a654:	0000a671 	.word	0x0000a671
    a658:	0000a671 	.word	0x0000a671
    a65c:	0000a671 	.word	0x0000a671
    a660:	0000a671 	.word	0x0000a671
    a664:	0000ad93 	.word	0x0000ad93
    a668:	0000a671 	.word	0x0000a671
    a66c:	0000ad7f 	.word	0x0000ad7f
    a670:	2100      	movs	r1, #0
    a672:	9109      	str	r1, [sp, #36]	; 0x24
    a674:	2a30      	cmp	r2, #48	; 0x30
    a676:	d07d      	beq.n	a774 <_strtod_l+0x1ec>
    a678:	2300      	movs	r3, #0
    a67a:	9308      	str	r3, [sp, #32]
    a67c:	2a2f      	cmp	r2, #47	; 0x2f
    a67e:	4614      	mov	r4, r2
    a680:	f240 84cd 	bls.w	b01e <_strtod_l+0xa96>
    a684:	f04f 0900 	mov.w	r9, #0
    a688:	4638      	mov	r0, r7
    a68a:	464e      	mov	r6, r9
    a68c:	464d      	mov	r5, r9
    a68e:	e012      	b.n	a6b6 <_strtod_l+0x12e>
    a690:	3001      	adds	r0, #1
    a692:	2d08      	cmp	r5, #8
    a694:	9011      	str	r0, [sp, #68]	; 0x44
    a696:	bfc8      	it	gt
    a698:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a69c:	7804      	ldrb	r4, [r0, #0]
    a69e:	bfc6      	itte	gt
    a6a0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a6a4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a6a8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a6ac:	2c2f      	cmp	r4, #47	; 0x2f
    a6ae:	f105 0501 	add.w	r5, r5, #1
    a6b2:	4622      	mov	r2, r4
    a6b4:	dd6f      	ble.n	a796 <_strtod_l+0x20e>
    a6b6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a6ba:	2c39      	cmp	r4, #57	; 0x39
    a6bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a6c0:	dde6      	ble.n	a690 <_strtod_l+0x108>
    a6c2:	499f      	ldr	r1, [pc, #636]	; (a940 <_strtod_l+0x3b8>)
    a6c4:	2201      	movs	r2, #1
    a6c6:	f001 fa23 	bl	bb10 <strncmp>
    a6ca:	2800      	cmp	r0, #0
    a6cc:	d137      	bne.n	a73e <_strtod_l+0x1b6>
    a6ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6d0:	461a      	mov	r2, r3
    a6d2:	3301      	adds	r3, #1
    a6d4:	9311      	str	r3, [sp, #68]	; 0x44
    a6d6:	7854      	ldrb	r4, [r2, #1]
    a6d8:	2d00      	cmp	r5, #0
    a6da:	f040 8543 	bne.w	b164 <_strtod_l+0xbdc>
    a6de:	2c30      	cmp	r4, #48	; 0x30
    a6e0:	f040 8524 	bne.w	b12c <_strtod_l+0xba4>
    a6e4:	f1c3 0201 	rsb	r2, r3, #1
    a6e8:	1898      	adds	r0, r3, r2
    a6ea:	3301      	adds	r3, #1
    a6ec:	9311      	str	r3, [sp, #68]	; 0x44
    a6ee:	781c      	ldrb	r4, [r3, #0]
    a6f0:	2c30      	cmp	r4, #48	; 0x30
    a6f2:	d0f9      	beq.n	a6e8 <_strtod_l+0x160>
    a6f4:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a6f8:	2b08      	cmp	r3, #8
    a6fa:	f200 8301 	bhi.w	ad00 <_strtod_l+0x778>
    a6fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a700:	1c43      	adds	r3, r0, #1
    a702:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a706:	930b      	str	r3, [sp, #44]	; 0x2c
    a708:	2501      	movs	r5, #1
    a70a:	46bc      	mov	ip, r7
    a70c:	f04f 0e00 	mov.w	lr, #0
    a710:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a714:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a718:	2000      	movs	r0, #0
    a71a:	f10c 0301 	add.w	r3, ip, #1
    a71e:	9311      	str	r3, [sp, #68]	; 0x44
    a720:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a724:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a728:	2909      	cmp	r1, #9
    a72a:	f200 82bb 	bhi.w	aca4 <_strtod_l+0x71c>
    a72e:	3001      	adds	r0, #1
    a730:	468b      	mov	fp, r1
    a732:	2900      	cmp	r1, #0
    a734:	f040 844f 	bne.w	afd6 <_strtod_l+0xa4e>
    a738:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a73c:	e7ed      	b.n	a71a <_strtod_l+0x192>
    a73e:	2000      	movs	r0, #0
    a740:	2c65      	cmp	r4, #101	; 0x65
    a742:	46ae      	mov	lr, r5
    a744:	900b      	str	r0, [sp, #44]	; 0x2c
    a746:	4684      	mov	ip, r0
    a748:	d001      	beq.n	a74e <_strtod_l+0x1c6>
    a74a:	2c45      	cmp	r4, #69	; 0x45
    a74c:	d130      	bne.n	a7b0 <_strtod_l+0x228>
    a74e:	2d00      	cmp	r5, #0
    a750:	d16b      	bne.n	a82a <_strtod_l+0x2a2>
    a752:	9b08      	ldr	r3, [sp, #32]
    a754:	4303      	orrs	r3, r0
    a756:	d167      	bne.n	a828 <_strtod_l+0x2a0>
    a758:	9b07      	ldr	r3, [sp, #28]
    a75a:	ed9f 8b77 	vldr	d8, [pc, #476]	; a938 <_strtod_l+0x3b0>
    a75e:	b113      	cbz	r3, a766 <_strtod_l+0x1de>
    a760:	9b07      	ldr	r3, [sp, #28]
    a762:	f8c3 a000 	str.w	sl, [r3]
    a766:	eeb0 0b48 	vmov.f64	d0, d8
    a76a:	b017      	add	sp, #92	; 0x5c
    a76c:	ecbd 8b10 	vpop	{d8-d15}
    a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a774:	787a      	ldrb	r2, [r7, #1]
    a776:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a77a:	2a58      	cmp	r2, #88	; 0x58
    a77c:	f000 840c 	beq.w	af98 <_strtod_l+0xa10>
    a780:	3701      	adds	r7, #1
    a782:	9711      	str	r7, [sp, #68]	; 0x44
    a784:	783a      	ldrb	r2, [r7, #0]
    a786:	2a30      	cmp	r2, #48	; 0x30
    a788:	d0fa      	beq.n	a780 <_strtod_l+0x1f8>
    a78a:	2a00      	cmp	r2, #0
    a78c:	f000 80b7 	beq.w	a8fe <_strtod_l+0x376>
    a790:	2301      	movs	r3, #1
    a792:	9308      	str	r3, [sp, #32]
    a794:	e772      	b.n	a67c <_strtod_l+0xf4>
    a796:	496a      	ldr	r1, [pc, #424]	; (a940 <_strtod_l+0x3b8>)
    a798:	2201      	movs	r2, #1
    a79a:	f001 f9b9 	bl	bb10 <strncmp>
    a79e:	2800      	cmp	r0, #0
    a7a0:	f000 80c0 	beq.w	a924 <_strtod_l+0x39c>
    a7a4:	46ae      	mov	lr, r5
    a7a6:	f04f 0c00 	mov.w	ip, #0
    a7aa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a7ae:	4660      	mov	r0, ip
    a7b0:	f04f 0b00 	mov.w	fp, #0
    a7b4:	2d00      	cmp	r5, #0
    a7b6:	d07e      	beq.n	a8b6 <_strtod_l+0x32e>
    a7b8:	ee07 6a90 	vmov	s15, r6
    a7bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a7c2:	ebab 0303 	sub.w	r3, fp, r3
    a7c6:	f1be 0f00 	cmp.w	lr, #0
    a7ca:	bf08      	it	eq
    a7cc:	46ae      	moveq	lr, r5
    a7ce:	2d10      	cmp	r5, #16
    a7d0:	930a      	str	r3, [sp, #40]	; 0x28
    a7d2:	462b      	mov	r3, r5
    a7d4:	bfa8      	it	ge
    a7d6:	2310      	movge	r3, #16
    a7d8:	2d09      	cmp	r5, #9
    a7da:	ed8d 7b04 	vstr	d7, [sp, #16]
    a7de:	dd0c      	ble.n	a7fa <_strtod_l+0x272>
    a7e0:	4a58      	ldr	r2, [pc, #352]	; (a944 <_strtod_l+0x3bc>)
    a7e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a7e6:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a7ea:	ee06 9a90 	vmov	s13, r9
    a7ee:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a7f2:	eea7 6b05 	vfma.f64	d6, d7, d5
    a7f6:	ed8d 6b04 	vstr	d6, [sp, #16]
    a7fa:	2d0f      	cmp	r5, #15
    a7fc:	f300 80a8 	bgt.w	a950 <_strtod_l+0x3c8>
    a800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a802:	2a00      	cmp	r2, #0
    a804:	f000 83e4 	beq.w	afd0 <_strtod_l+0xa48>
    a808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a80a:	f340 833c 	ble.w	ae86 <_strtod_l+0x8fe>
    a80e:	2a16      	cmp	r2, #22
    a810:	f340 8498 	ble.w	b144 <_strtod_l+0xbbc>
    a814:	990a      	ldr	r1, [sp, #40]	; 0x28
    a816:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a81a:	428a      	cmp	r2, r1
    a81c:	f280 84a6 	bge.w	b16c <_strtod_l+0xbe4>
    a820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a822:	1aeb      	subs	r3, r5, r3
    a824:	4413      	add	r3, r2
    a826:	e099      	b.n	a95c <_strtod_l+0x3d4>
    a828:	2500      	movs	r5, #0
    a82a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a82e:	f10a 0301 	add.w	r3, sl, #1
    a832:	9311      	str	r3, [sp, #68]	; 0x44
    a834:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a838:	2c2b      	cmp	r4, #43	; 0x2b
    a83a:	f000 825e 	beq.w	acfa <_strtod_l+0x772>
    a83e:	2c2d      	cmp	r4, #45	; 0x2d
    a840:	f000 81f7 	beq.w	ac32 <_strtod_l+0x6aa>
    a844:	2300      	movs	r3, #0
    a846:	930a      	str	r3, [sp, #40]	; 0x28
    a848:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a84c:	2b09      	cmp	r3, #9
    a84e:	f200 81eb 	bhi.w	ac28 <_strtod_l+0x6a0>
    a852:	2c30      	cmp	r4, #48	; 0x30
    a854:	d105      	bne.n	a862 <_strtod_l+0x2da>
    a856:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a858:	3301      	adds	r3, #1
    a85a:	9311      	str	r3, [sp, #68]	; 0x44
    a85c:	781c      	ldrb	r4, [r3, #0]
    a85e:	2c30      	cmp	r4, #48	; 0x30
    a860:	d0fa      	beq.n	a858 <_strtod_l+0x2d0>
    a862:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a866:	2b08      	cmp	r3, #8
    a868:	d8a2      	bhi.n	a7b0 <_strtod_l+0x228>
    a86a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a86c:	920c      	str	r2, [sp, #48]	; 0x30
    a86e:	1c53      	adds	r3, r2, #1
    a870:	9311      	str	r3, [sp, #68]	; 0x44
    a872:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a876:	7854      	ldrb	r4, [r2, #1]
    a878:	2c2f      	cmp	r4, #47	; 0x2f
    a87a:	dc07      	bgt.n	a88c <_strtod_l+0x304>
    a87c:	e3de      	b.n	b03c <_strtod_l+0xab4>
    a87e:	3301      	adds	r3, #1
    a880:	9311      	str	r3, [sp, #68]	; 0x44
    a882:	784c      	ldrb	r4, [r1, #1]
    a884:	2c2f      	cmp	r4, #47	; 0x2f
    a886:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a88a:	dd06      	ble.n	a89a <_strtod_l+0x312>
    a88c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a890:	2c39      	cmp	r4, #57	; 0x39
    a892:	4619      	mov	r1, r3
    a894:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a898:	ddf1      	ble.n	a87e <_strtod_l+0x2f6>
    a89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a89c:	1a9b      	subs	r3, r3, r2
    a89e:	2b08      	cmp	r3, #8
    a8a0:	f340 83cc 	ble.w	b03c <_strtod_l+0xab4>
    a8a4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d082      	beq.n	a7b4 <_strtod_l+0x22c>
    a8ae:	f1cb 0b00 	rsb	fp, fp, #0
    a8b2:	2d00      	cmp	r5, #0
    a8b4:	d180      	bne.n	a7b8 <_strtod_l+0x230>
    a8b6:	9b08      	ldr	r3, [sp, #32]
    a8b8:	4303      	orrs	r3, r0
    a8ba:	d120      	bne.n	a8fe <_strtod_l+0x376>
    a8bc:	f1bc 0f00 	cmp.w	ip, #0
    a8c0:	f47f af4a 	bne.w	a758 <_strtod_l+0x1d0>
    a8c4:	2c69      	cmp	r4, #105	; 0x69
    a8c6:	f000 83cf 	beq.w	b068 <_strtod_l+0xae0>
    a8ca:	f300 82f3 	bgt.w	aeb4 <_strtod_l+0x92c>
    a8ce:	2c49      	cmp	r4, #73	; 0x49
    a8d0:	f000 83ca 	beq.w	b068 <_strtod_l+0xae0>
    a8d4:	2c4e      	cmp	r4, #78	; 0x4e
    a8d6:	f47f af3f 	bne.w	a758 <_strtod_l+0x1d0>
    a8da:	491b      	ldr	r1, [pc, #108]	; (a948 <_strtod_l+0x3c0>)
    a8dc:	a811      	add	r0, sp, #68	; 0x44
    a8de:	f002 f983 	bl	cbe8 <__match>
    a8e2:	2800      	cmp	r0, #0
    a8e4:	f43f af38 	beq.w	a758 <_strtod_l+0x1d0>
    a8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	2b28      	cmp	r3, #40	; 0x28
    a8ee:	f000 84f2 	beq.w	b2d6 <_strtod_l+0xd4e>
    a8f2:	4816      	ldr	r0, [pc, #88]	; (a94c <_strtod_l+0x3c4>)
    a8f4:	f001 fcb4 	bl	c260 <nan>
    a8f8:	eeb0 8b40 	vmov.f64	d8, d0
    a8fc:	e001      	b.n	a902 <_strtod_l+0x37a>
    a8fe:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a938 <_strtod_l+0x3b0>
    a902:	9a07      	ldr	r2, [sp, #28]
    a904:	b10a      	cbz	r2, a90a <_strtod_l+0x382>
    a906:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a908:	6013      	str	r3, [r2, #0]
    a90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a90c:	2b00      	cmp	r3, #0
    a90e:	f43f af2a 	beq.w	a766 <_strtod_l+0x1de>
    a912:	eeb1 8b48 	vneg.f64	d8, d8
    a916:	eeb0 0b48 	vmov.f64	d0, d8
    a91a:	b017      	add	sp, #92	; 0x5c
    a91c:	ecbd 8b10 	vpop	{d8-d15}
    a920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a924:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a926:	900b      	str	r0, [sp, #44]	; 0x2c
    a928:	1c5a      	adds	r2, r3, #1
    a92a:	9211      	str	r2, [sp, #68]	; 0x44
    a92c:	785c      	ldrb	r4, [r3, #1]
    a92e:	46ae      	mov	lr, r5
    a930:	e6f8      	b.n	a724 <_strtod_l+0x19c>
    a932:	bf00      	nop
    a934:	f3af 8000 	nop.w
	...
    a940:	20007d38 	.word	0x20007d38
    a944:	200002a8 	.word	0x200002a8
    a948:	20000c34 	.word	0x20000c34
    a94c:	20008028 	.word	0x20008028
    a950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a952:	1aeb      	subs	r3, r5, r3
    a954:	4413      	add	r3, r2
    a956:	2b00      	cmp	r3, #0
    a958:	f340 82b0 	ble.w	aebc <_strtod_l+0x934>
    a95c:	f013 010f 	ands.w	r1, r3, #15
    a960:	d00a      	beq.n	a978 <_strtod_l+0x3f0>
    a962:	4ac3      	ldr	r2, [pc, #780]	; (ac70 <_strtod_l+0x6e8>)
    a964:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a968:	ed9d 6b04 	vldr	d6, [sp, #16]
    a96c:	ed92 7b00 	vldr	d7, [r2]
    a970:	ee27 7b06 	vmul.f64	d7, d7, d6
    a974:	ed8d 7b04 	vstr	d7, [sp, #16]
    a978:	f033 020f 	bics.w	r2, r3, #15
    a97c:	f040 8238 	bne.w	adf0 <_strtod_l+0x868>
    a980:	2300      	movs	r3, #0
    a982:	9308      	str	r3, [sp, #32]
    a984:	9600      	str	r6, [sp, #0]
    a986:	462b      	mov	r3, r5
    a988:	4672      	mov	r2, lr
    a98a:	4639      	mov	r1, r7
    a98c:	4640      	mov	r0, r8
    a98e:	f002 fab7 	bl	cf00 <__s2b>
    a992:	4681      	mov	r9, r0
    a994:	2800      	cmp	r0, #0
    a996:	f000 82e1 	beq.w	af5c <_strtod_l+0x9d4>
    a99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a99c:	eba3 0b0b 	sub.w	fp, r3, fp
    a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9a2:	ed9f eba9 	vldr	d14, [pc, #676]	; ac48 <_strtod_l+0x6c0>
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	ed9f cba9 	vldr	d12, [pc, #676]	; ac50 <_strtod_l+0x6c8>
    a9ac:	ed9f dbaa 	vldr	d13, [pc, #680]	; ac58 <_strtod_l+0x6d0>
    a9b0:	ed9f bbab 	vldr	d11, [pc, #684]	; ac60 <_strtod_l+0x6d8>
    a9b4:	bfb4      	ite	lt
    a9b6:	465a      	movlt	r2, fp
    a9b8:	2200      	movge	r2, #0
    a9ba:	f04f 0a00 	mov.w	sl, #0
    a9be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a9c2:	920b      	str	r2, [sp, #44]	; 0x2c
    a9c4:	930c      	str	r3, [sp, #48]	; 0x30
    a9c6:	4654      	mov	r4, sl
    a9c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a9cc:	4640      	mov	r0, r8
    a9ce:	f002 fa15 	bl	cdfc <_Balloc>
    a9d2:	4606      	mov	r6, r0
    a9d4:	2800      	cmp	r0, #0
    a9d6:	f000 810e 	beq.w	abf6 <_strtod_l+0x66e>
    a9da:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a9de:	ed9d 8b04 	vldr	d8, [sp, #16]
    a9e2:	3202      	adds	r2, #2
    a9e4:	0092      	lsls	r2, r2, #2
    a9e6:	f109 010c 	add.w	r1, r9, #12
    a9ea:	300c      	adds	r0, #12
    a9ec:	f7fd fb72 	bl	80d4 <memcpy>
    a9f0:	eeb0 0b48 	vmov.f64	d0, d8
    a9f4:	aa14      	add	r2, sp, #80	; 0x50
    a9f6:	a913      	add	r1, sp, #76	; 0x4c
    a9f8:	4640      	mov	r0, r8
    a9fa:	f002 fe3d 	bl	d678 <__d2b>
    a9fe:	9012      	str	r0, [sp, #72]	; 0x48
    aa00:	2800      	cmp	r0, #0
    aa02:	f000 80e4 	beq.w	abce <_strtod_l+0x646>
    aa06:	2101      	movs	r1, #1
    aa08:	4640      	mov	r0, r8
    aa0a:	f002 fb21 	bl	d050 <__i2b>
    aa0e:	4604      	mov	r4, r0
    aa10:	2800      	cmp	r0, #0
    aa12:	f000 80f0 	beq.w	abf6 <_strtod_l+0x66e>
    aa16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    aa18:	2a00      	cmp	r2, #0
    aa1a:	f2c0 80de 	blt.w	abda <_strtod_l+0x652>
    aa1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    aa22:	eb02 0b03 	add.w	fp, r2, r3
    aa26:	9b08      	ldr	r3, [sp, #32]
    aa28:	9d14      	ldr	r5, [sp, #80]	; 0x50
    aa2a:	1ad2      	subs	r2, r2, r3
    aa2c:	442a      	add	r2, r5
    aa2e:	4b91      	ldr	r3, [pc, #580]	; (ac74 <_strtod_l+0x6ec>)
    aa30:	3a01      	subs	r2, #1
    aa32:	429a      	cmp	r2, r3
    aa34:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    aa38:	f280 8098 	bge.w	ab6c <_strtod_l+0x5e4>
    aa3c:	1a99      	subs	r1, r3, r2
    aa3e:	291f      	cmp	r1, #31
    aa40:	eba5 0501 	sub.w	r5, r5, r1
    aa44:	f300 80e3 	bgt.w	ac0e <_strtod_l+0x686>
    aa48:	2201      	movs	r2, #1
    aa4a:	fa02 f301 	lsl.w	r3, r2, r1
    aa4e:	930d      	str	r3, [sp, #52]	; 0x34
    aa50:	2300      	movs	r3, #0
    aa52:	930e      	str	r3, [sp, #56]	; 0x38
    aa54:	442f      	add	r7, r5
    aa56:	9b08      	ldr	r3, [sp, #32]
    aa58:	445d      	add	r5, fp
    aa5a:	45ab      	cmp	fp, r5
    aa5c:	465a      	mov	r2, fp
    aa5e:	441f      	add	r7, r3
    aa60:	bfa8      	it	ge
    aa62:	462a      	movge	r2, r5
    aa64:	42ba      	cmp	r2, r7
    aa66:	bfa8      	it	ge
    aa68:	463a      	movge	r2, r7
    aa6a:	2a00      	cmp	r2, #0
    aa6c:	dd03      	ble.n	aa76 <_strtod_l+0x4ee>
    aa6e:	1aad      	subs	r5, r5, r2
    aa70:	1abf      	subs	r7, r7, r2
    aa72:	ebab 0b02 	sub.w	fp, fp, r2
    aa76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa78:	2b00      	cmp	r3, #0
    aa7a:	f300 8088 	bgt.w	ab8e <_strtod_l+0x606>
    aa7e:	2d00      	cmp	r5, #0
    aa80:	f300 809c 	bgt.w	abbc <_strtod_l+0x634>
    aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa86:	2b00      	cmp	r3, #0
    aa88:	f300 80b7 	bgt.w	abfa <_strtod_l+0x672>
    aa8c:	2f00      	cmp	r7, #0
    aa8e:	f300 80a9 	bgt.w	abe4 <_strtod_l+0x65c>
    aa92:	f1bb 0f00 	cmp.w	fp, #0
    aa96:	dd08      	ble.n	aaaa <_strtod_l+0x522>
    aa98:	4621      	mov	r1, r4
    aa9a:	465a      	mov	r2, fp
    aa9c:	4640      	mov	r0, r8
    aa9e:	f002 fc13 	bl	d2c8 <__lshift>
    aaa2:	4604      	mov	r4, r0
    aaa4:	2800      	cmp	r0, #0
    aaa6:	f000 80a6 	beq.w	abf6 <_strtod_l+0x66e>
    aaaa:	9912      	ldr	r1, [sp, #72]	; 0x48
    aaac:	4632      	mov	r2, r6
    aaae:	4640      	mov	r0, r8
    aab0:	f002 fca4 	bl	d3fc <__mdiff>
    aab4:	4682      	mov	sl, r0
    aab6:	2800      	cmp	r0, #0
    aab8:	f000 809d 	beq.w	abf6 <_strtod_l+0x66e>
    aabc:	2300      	movs	r3, #0
    aabe:	68c5      	ldr	r5, [r0, #12]
    aac0:	60c3      	str	r3, [r0, #12]
    aac2:	4621      	mov	r1, r4
    aac4:	f002 fc78 	bl	d3b8 <__mcmp>
    aac8:	2800      	cmp	r0, #0
    aaca:	f2c0 83c7 	blt.w	b25c <_strtod_l+0xcd4>
    aace:	f000 8361 	beq.w	b194 <_strtod_l+0xc0c>
    aad2:	4621      	mov	r1, r4
    aad4:	4650      	mov	r0, sl
    aad6:	f002 fe39 	bl	d74c <__ratio>
    aada:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    aade:	eeb4 0bc7 	vcmpe.f64	d0, d7
    aae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aae6:	d846      	bhi.n	ab76 <_strtod_l+0x5ee>
    aae8:	2d00      	cmp	r5, #0
    aaea:	f000 80cb 	beq.w	ac84 <_strtod_l+0x6fc>
    aaee:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    aaf2:	9805      	ldr	r0, [sp, #20]
    aaf4:	4b60      	ldr	r3, [pc, #384]	; (ac78 <_strtod_l+0x6f0>)
    aaf6:	2200      	movs	r2, #0
    aaf8:	4960      	ldr	r1, [pc, #384]	; (ac7c <_strtod_l+0x6f4>)
    aafa:	f8df c184 	ldr.w	ip, [pc, #388]	; ac80 <_strtod_l+0x6f8>
    aafe:	ea00 0701 	and.w	r7, r0, r1
    ab02:	4567      	cmp	r7, ip
    ab04:	f000 80d4 	beq.w	acb0 <_strtod_l+0x728>
    ab08:	9908      	ldr	r1, [sp, #32]
    ab0a:	b159      	cbz	r1, ab24 <_strtod_l+0x59c>
    ab0c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    ab10:	d808      	bhi.n	ab24 <_strtod_l+0x59c>
    ab12:	eeb4 9bcb 	vcmpe.f64	d9, d11
    ab16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ab1a:	f240 8156 	bls.w	adca <_strtod_l+0x842>
    ab1e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    ab22:	1bcb      	subs	r3, r1, r7
    ab24:	eeb0 0b48 	vmov.f64	d0, d8
    ab28:	ec43 2b1a 	vmov	d10, r2, r3
    ab2c:	f002 fd10 	bl	d550 <__ulp>
    ab30:	eeaa 8b00 	vfma.f64	d8, d10, d0
    ab34:	ed8d 8b04 	vstr	d8, [sp, #16]
    ab38:	ee18 3a90 	vmov	r3, s17
    ab3c:	9a08      	ldr	r2, [sp, #32]
    ab3e:	b922      	cbnz	r2, ab4a <_strtod_l+0x5c2>
    ab40:	4a4e      	ldr	r2, [pc, #312]	; (ac7c <_strtod_l+0x6f4>)
    ab42:	401a      	ands	r2, r3
    ab44:	4297      	cmp	r7, r2
    ab46:	f000 80e4 	beq.w	ad12 <_strtod_l+0x78a>
    ab4a:	9912      	ldr	r1, [sp, #72]	; 0x48
    ab4c:	4640      	mov	r0, r8
    ab4e:	f002 f97b 	bl	ce48 <_Bfree>
    ab52:	4631      	mov	r1, r6
    ab54:	4640      	mov	r0, r8
    ab56:	f002 f977 	bl	ce48 <_Bfree>
    ab5a:	4621      	mov	r1, r4
    ab5c:	4640      	mov	r0, r8
    ab5e:	f002 f973 	bl	ce48 <_Bfree>
    ab62:	4651      	mov	r1, sl
    ab64:	4640      	mov	r0, r8
    ab66:	f002 f96f 	bl	ce48 <_Bfree>
    ab6a:	e72d      	b.n	a9c8 <_strtod_l+0x440>
    ab6c:	2301      	movs	r3, #1
    ab6e:	2100      	movs	r1, #0
    ab70:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    ab74:	e76e      	b.n	aa54 <_strtod_l+0x4cc>
    ab76:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ab7a:	ee20 9b09 	vmul.f64	d9, d0, d9
    ab7e:	2d00      	cmp	r5, #0
    ab80:	d15f      	bne.n	ac42 <_strtod_l+0x6ba>
    ab82:	eeb1 7b49 	vneg.f64	d7, d9
    ab86:	9805      	ldr	r0, [sp, #20]
    ab88:	ec53 2b17 	vmov	r2, r3, d7
    ab8c:	e7b4      	b.n	aaf8 <_strtod_l+0x570>
    ab8e:	4621      	mov	r1, r4
    ab90:	461a      	mov	r2, r3
    ab92:	4640      	mov	r0, r8
    ab94:	f002 fb38 	bl	d208 <__pow5mult>
    ab98:	4604      	mov	r4, r0
    ab9a:	b360      	cbz	r0, abf6 <_strtod_l+0x66e>
    ab9c:	4601      	mov	r1, r0
    ab9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aba0:	4640      	mov	r0, r8
    aba2:	f002 fa83 	bl	d0ac <__multiply>
    aba6:	b330      	cbz	r0, abf6 <_strtod_l+0x66e>
    aba8:	900f      	str	r0, [sp, #60]	; 0x3c
    abaa:	9912      	ldr	r1, [sp, #72]	; 0x48
    abac:	4640      	mov	r0, r8
    abae:	f002 f94b 	bl	ce48 <_Bfree>
    abb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    abb4:	9212      	str	r2, [sp, #72]	; 0x48
    abb6:	2d00      	cmp	r5, #0
    abb8:	f77f af64 	ble.w	aa84 <_strtod_l+0x4fc>
    abbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    abbe:	462a      	mov	r2, r5
    abc0:	4640      	mov	r0, r8
    abc2:	f002 fb81 	bl	d2c8 <__lshift>
    abc6:	9012      	str	r0, [sp, #72]	; 0x48
    abc8:	2800      	cmp	r0, #0
    abca:	f47f af5b 	bne.w	aa84 <_strtod_l+0x4fc>
    abce:	2322      	movs	r3, #34	; 0x22
    abd0:	ed9f 8b25 	vldr	d8, [pc, #148]	; ac68 <_strtod_l+0x6e0>
    abd4:	f8c8 3000 	str.w	r3, [r8]
    abd8:	e0bc      	b.n	ad54 <_strtod_l+0x7cc>
    abda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abdc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    abe0:	1a9f      	subs	r7, r3, r2
    abe2:	e720      	b.n	aa26 <_strtod_l+0x49e>
    abe4:	4631      	mov	r1, r6
    abe6:	463a      	mov	r2, r7
    abe8:	4640      	mov	r0, r8
    abea:	f002 fb6d 	bl	d2c8 <__lshift>
    abee:	4606      	mov	r6, r0
    abf0:	2800      	cmp	r0, #0
    abf2:	f47f af4e 	bne.w	aa92 <_strtod_l+0x50a>
    abf6:	9812      	ldr	r0, [sp, #72]	; 0x48
    abf8:	e7e9      	b.n	abce <_strtod_l+0x646>
    abfa:	4631      	mov	r1, r6
    abfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    abfe:	4640      	mov	r0, r8
    ac00:	f002 fb02 	bl	d208 <__pow5mult>
    ac04:	4606      	mov	r6, r0
    ac06:	2800      	cmp	r0, #0
    ac08:	f47f af40 	bne.w	aa8c <_strtod_l+0x504>
    ac0c:	e7f3      	b.n	abf6 <_strtod_l+0x66e>
    ac0e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    ac12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    ac16:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    ac1a:	2101      	movs	r1, #1
    ac1c:	32e2      	adds	r2, #226	; 0xe2
    ac1e:	fa01 f302 	lsl.w	r3, r1, r2
    ac22:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    ac26:	e715      	b.n	aa54 <_strtod_l+0x4cc>
    ac28:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    ac2c:	f04f 0b00 	mov.w	fp, #0
    ac30:	e5c0      	b.n	a7b4 <_strtod_l+0x22c>
    ac32:	2301      	movs	r3, #1
    ac34:	930a      	str	r3, [sp, #40]	; 0x28
    ac36:	f10a 0302 	add.w	r3, sl, #2
    ac3a:	9311      	str	r3, [sp, #68]	; 0x44
    ac3c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    ac40:	e602      	b.n	a848 <_strtod_l+0x2c0>
    ac42:	eeb0 7b49 	vmov.f64	d7, d9
    ac46:	e79e      	b.n	ab86 <_strtod_l+0x5fe>
    ac48:	94a03595 	.word	0x94a03595
    ac4c:	3fcfffff 	.word	0x3fcfffff
    ac50:	94a03595 	.word	0x94a03595
    ac54:	3fdfffff 	.word	0x3fdfffff
    ac58:	35afe535 	.word	0x35afe535
    ac5c:	3fe00000 	.word	0x3fe00000
    ac60:	ffc00000 	.word	0xffc00000
    ac64:	41dfffff 	.word	0x41dfffff
    ac68:	00000000 	.word	0x00000000
    ac6c:	7ff00000 	.word	0x7ff00000
    ac70:	200002a8 	.word	0x200002a8
    ac74:	fffffc02 	.word	0xfffffc02
    ac78:	3ff00000 	.word	0x3ff00000
    ac7c:	7ff00000 	.word	0x7ff00000
    ac80:	7fe00000 	.word	0x7fe00000
    ac84:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ac88:	2900      	cmp	r1, #0
    ac8a:	f000 8085 	beq.w	ad98 <_strtod_l+0x810>
    ac8e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ac92:	2901      	cmp	r1, #1
    ac94:	f000 81d8 	beq.w	b048 <_strtod_l+0xac0>
    ac98:	4610      	mov	r0, r2
    ac9a:	4bb7      	ldr	r3, [pc, #732]	; (af78 <_strtod_l+0x9f0>)
    ac9c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    aca0:	2200      	movs	r2, #0
    aca2:	e729      	b.n	aaf8 <_strtod_l+0x570>
    aca4:	2c65      	cmp	r4, #101	; 0x65
    aca6:	f04f 0c01 	mov.w	ip, #1
    acaa:	f43f adbe 	beq.w	a82a <_strtod_l+0x2a2>
    acae:	e54c      	b.n	a74a <_strtod_l+0x1c2>
    acb0:	ec43 2b1a 	vmov	d10, r2, r3
    acb4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    acb8:	9305      	str	r3, [sp, #20]
    acba:	ed9d fb04 	vldr	d15, [sp, #16]
    acbe:	eeb0 0b4f 	vmov.f64	d0, d15
    acc2:	f002 fc45 	bl	d550 <__ulp>
    acc6:	49ad      	ldr	r1, [pc, #692]	; (af7c <_strtod_l+0x9f4>)
    acc8:	eeaa fb00 	vfma.f64	d15, d10, d0
    accc:	ee1f 3a90 	vmov	r3, s31
    acd0:	4aab      	ldr	r2, [pc, #684]	; (af80 <_strtod_l+0x9f8>)
    acd2:	4019      	ands	r1, r3
    acd4:	4291      	cmp	r1, r2
    acd6:	ed8d fb04 	vstr	d15, [sp, #16]
    acda:	d972      	bls.n	adc2 <_strtod_l+0x83a>
    acdc:	4ba9      	ldr	r3, [pc, #676]	; (af84 <_strtod_l+0x9fc>)
    acde:	ee18 2a90 	vmov	r2, s17
    ace2:	429a      	cmp	r2, r3
    ace4:	d103      	bne.n	acee <_strtod_l+0x766>
    ace6:	ee18 3a10 	vmov	r3, s16
    acea:	3301      	adds	r3, #1
    acec:	d083      	beq.n	abf6 <_strtod_l+0x66e>
    acee:	4aa5      	ldr	r2, [pc, #660]	; (af84 <_strtod_l+0x9fc>)
    acf0:	f04f 33ff 	mov.w	r3, #4294967295
    acf4:	e9cd 3204 	strd	r3, r2, [sp, #16]
    acf8:	e727      	b.n	ab4a <_strtod_l+0x5c2>
    acfa:	2300      	movs	r3, #0
    acfc:	930a      	str	r3, [sp, #40]	; 0x28
    acfe:	e79a      	b.n	ac36 <_strtod_l+0x6ae>
    ad00:	2c65      	cmp	r4, #101	; 0x65
    ad02:	f000 80d0 	beq.w	aea6 <_strtod_l+0x91e>
    ad06:	2c45      	cmp	r4, #69	; 0x45
    ad08:	f000 80cd 	beq.w	aea6 <_strtod_l+0x91e>
    ad0c:	f04f 0c01 	mov.w	ip, #1
    ad10:	e5d1      	b.n	a8b6 <_strtod_l+0x32e>
    ad12:	ec51 0b19 	vmov	r0, r1, d9
    ad16:	930d      	str	r3, [sp, #52]	; 0x34
    ad18:	f009 fbd4 	bl	144c4 <__aeabi_d2lz>
    ad1c:	f009 fba4 	bl	14468 <__aeabi_l2d>
    ad20:	9b04      	ldr	r3, [sp, #16]
    ad22:	431d      	orrs	r5, r3
    ad24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ad26:	ec41 0b17 	vmov	d7, r0, r1
    ad2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ad2e:	431d      	orrs	r5, r3
    ad30:	ee39 9b47 	vsub.f64	d9, d9, d7
    ad34:	f000 80a0 	beq.w	ae78 <_strtod_l+0x8f0>
    ad38:	eeb4 9bcc 	vcmpe.f64	d9, d12
    ad3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad40:	d405      	bmi.n	ad4e <_strtod_l+0x7c6>
    ad42:	eeb4 9bcd 	vcmpe.f64	d9, d13
    ad46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad4a:	f77f aefe 	ble.w	ab4a <_strtod_l+0x5c2>
    ad4e:	ed9d 8b04 	vldr	d8, [sp, #16]
    ad52:	9812      	ldr	r0, [sp, #72]	; 0x48
    ad54:	4601      	mov	r1, r0
    ad56:	4640      	mov	r0, r8
    ad58:	f002 f876 	bl	ce48 <_Bfree>
    ad5c:	4631      	mov	r1, r6
    ad5e:	4640      	mov	r0, r8
    ad60:	f002 f872 	bl	ce48 <_Bfree>
    ad64:	4621      	mov	r1, r4
    ad66:	4640      	mov	r0, r8
    ad68:	f002 f86e 	bl	ce48 <_Bfree>
    ad6c:	4649      	mov	r1, r9
    ad6e:	4640      	mov	r0, r8
    ad70:	f002 f86a 	bl	ce48 <_Bfree>
    ad74:	4651      	mov	r1, sl
    ad76:	4640      	mov	r0, r8
    ad78:	f002 f866 	bl	ce48 <_Bfree>
    ad7c:	e5c1      	b.n	a902 <_strtod_l+0x37a>
    ad7e:	2201      	movs	r2, #1
    ad80:	9209      	str	r2, [sp, #36]	; 0x24
    ad82:	1c79      	adds	r1, r7, #1
    ad84:	9111      	str	r1, [sp, #68]	; 0x44
    ad86:	787a      	ldrb	r2, [r7, #1]
    ad88:	2a00      	cmp	r2, #0
    ad8a:	f43f ace5 	beq.w	a758 <_strtod_l+0x1d0>
    ad8e:	460f      	mov	r7, r1
    ad90:	e470      	b.n	a674 <_strtod_l+0xec>
    ad92:	2200      	movs	r2, #0
    ad94:	9209      	str	r2, [sp, #36]	; 0x24
    ad96:	e7f4      	b.n	ad82 <_strtod_l+0x7fa>
    ad98:	f3c2 0313 	ubfx	r3, r2, #0, #20
    ad9c:	4610      	mov	r0, r2
    ad9e:	2b00      	cmp	r3, #0
    ada0:	f47f af7b 	bne.w	ac9a <_strtod_l+0x712>
    ada4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    ada8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    adac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adb0:	f100 81d3 	bmi.w	b15a <_strtod_l+0xbd2>
    adb4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    adb8:	ee20 9b09 	vmul.f64	d9, d0, d9
    adbc:	eeb1 7b49 	vneg.f64	d7, d9
    adc0:	e6e2      	b.n	ab88 <_strtod_l+0x600>
    adc2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    adc6:	9305      	str	r3, [sp, #20]
    adc8:	e6b8      	b.n	ab3c <_strtod_l+0x5b4>
    adca:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    adce:	ee19 3a10 	vmov	r3, s18
    add2:	2b01      	cmp	r3, #1
    add4:	bf38      	it	cc
    add6:	2301      	movcc	r3, #1
    add8:	ee09 3a10 	vmov	s18, r3
    addc:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    ade0:	2d00      	cmp	r5, #0
    ade2:	f040 813e 	bne.w	b062 <_strtod_l+0xada>
    ade6:	eeb1 7b49 	vneg.f64	d7, d9
    adea:	ec53 2b17 	vmov	r2, r3, d7
    adee:	e696      	b.n	ab1e <_strtod_l+0x596>
    adf0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    adf4:	f300 80b2 	bgt.w	af5c <_strtod_l+0x9d4>
    adf8:	2a10      	cmp	r2, #16
    adfa:	ea4f 1322 	mov.w	r3, r2, asr #4
    adfe:	f340 8286 	ble.w	b30e <_strtod_l+0xd86>
    ae02:	4c61      	ldr	r4, [pc, #388]	; (af88 <_strtod_l+0xa00>)
    ae04:	ed9d 7b04 	vldr	d7, [sp, #16]
    ae08:	2000      	movs	r0, #0
    ae0a:	4622      	mov	r2, r4
    ae0c:	4601      	mov	r1, r0
    ae0e:	f013 0f01 	tst.w	r3, #1
    ae12:	f101 0101 	add.w	r1, r1, #1
    ae16:	ea4f 0363 	mov.w	r3, r3, asr #1
    ae1a:	d004      	beq.n	ae26 <_strtod_l+0x89e>
    ae1c:	ed92 6b00 	vldr	d6, [r2]
    ae20:	2001      	movs	r0, #1
    ae22:	ee27 7b06 	vmul.f64	d7, d7, d6
    ae26:	2b01      	cmp	r3, #1
    ae28:	f102 0208 	add.w	r2, r2, #8
    ae2c:	d1ef      	bne.n	ae0e <_strtod_l+0x886>
    ae2e:	b108      	cbz	r0, ae34 <_strtod_l+0x8ac>
    ae30:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae34:	9b05      	ldr	r3, [sp, #20]
    ae36:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    ae3a:	9305      	str	r3, [sp, #20]
    ae3c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    ae40:	ed9d 6b04 	vldr	d6, [sp, #16]
    ae44:	ed94 7b00 	vldr	d7, [r4]
    ae48:	4b4c      	ldr	r3, [pc, #304]	; (af7c <_strtod_l+0x9f4>)
    ae4a:	ee27 7b06 	vmul.f64	d7, d7, d6
    ae4e:	ee17 2a90 	vmov	r2, s15
    ae52:	494e      	ldr	r1, [pc, #312]	; (af8c <_strtod_l+0xa04>)
    ae54:	4013      	ands	r3, r2
    ae56:	428b      	cmp	r3, r1
    ae58:	ed8d 7b04 	vstr	d7, [sp, #16]
    ae5c:	d87e      	bhi.n	af5c <_strtod_l+0x9d4>
    ae5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    ae62:	428b      	cmp	r3, r1
    ae64:	f240 81d6 	bls.w	b214 <_strtod_l+0xc8c>
    ae68:	4c46      	ldr	r4, [pc, #280]	; (af84 <_strtod_l+0x9fc>)
    ae6a:	f04f 33ff 	mov.w	r3, #4294967295
    ae6e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ae72:	2300      	movs	r3, #0
    ae74:	9308      	str	r3, [sp, #32]
    ae76:	e585      	b.n	a984 <_strtod_l+0x3fc>
    ae78:	eeb4 9bce 	vcmpe.f64	d9, d14
    ae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae80:	f57f ae63 	bpl.w	ab4a <_strtod_l+0x5c2>
    ae84:	e763      	b.n	ad4e <_strtod_l+0x7c6>
    ae86:	3216      	adds	r2, #22
    ae88:	f6ff ad62 	blt.w	a950 <_strtod_l+0x3c8>
    ae8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae8e:	eba3 0b0b 	sub.w	fp, r3, fp
    ae92:	4b3f      	ldr	r3, [pc, #252]	; (af90 <_strtod_l+0xa08>)
    ae94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    ae98:	ed93 7b00 	vldr	d7, [r3]
    ae9c:	ed9d 6b04 	vldr	d6, [sp, #16]
    aea0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    aea4:	e52d      	b.n	a902 <_strtod_l+0x37a>
    aea6:	f04f 0e00 	mov.w	lr, #0
    aeaa:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    aeae:	f04f 0c01 	mov.w	ip, #1
    aeb2:	e44e      	b.n	a752 <_strtod_l+0x1ca>
    aeb4:	2c6e      	cmp	r4, #110	; 0x6e
    aeb6:	f43f ad10 	beq.w	a8da <_strtod_l+0x352>
    aeba:	e44d      	b.n	a758 <_strtod_l+0x1d0>
    aebc:	f43f ad60 	beq.w	a980 <_strtod_l+0x3f8>
    aec0:	425b      	negs	r3, r3
    aec2:	f013 010f 	ands.w	r1, r3, #15
    aec6:	d00a      	beq.n	aede <_strtod_l+0x956>
    aec8:	4a31      	ldr	r2, [pc, #196]	; (af90 <_strtod_l+0xa08>)
    aeca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    aece:	ed9d 6b04 	vldr	d6, [sp, #16]
    aed2:	ed92 7b00 	vldr	d7, [r2]
    aed6:	ee86 7b07 	vdiv.f64	d7, d6, d7
    aeda:	ed8d 7b04 	vstr	d7, [sp, #16]
    aede:	111b      	asrs	r3, r3, #4
    aee0:	f43f ad4e 	beq.w	a980 <_strtod_l+0x3f8>
    aee4:	2b1f      	cmp	r3, #31
    aee6:	dc33      	bgt.n	af50 <_strtod_l+0x9c8>
    aee8:	f013 0210 	ands.w	r2, r3, #16
    aeec:	bf18      	it	ne
    aeee:	226a      	movne	r2, #106	; 0x6a
    aef0:	ed9d 7b04 	vldr	d7, [sp, #16]
    aef4:	9208      	str	r2, [sp, #32]
    aef6:	4a27      	ldr	r2, [pc, #156]	; (af94 <_strtod_l+0xa0c>)
    aef8:	2100      	movs	r1, #0
    aefa:	07d8      	lsls	r0, r3, #31
    aefc:	d504      	bpl.n	af08 <_strtod_l+0x980>
    aefe:	ed92 6b00 	vldr	d6, [r2]
    af02:	2101      	movs	r1, #1
    af04:	ee27 7b06 	vmul.f64	d7, d7, d6
    af08:	105b      	asrs	r3, r3, #1
    af0a:	f102 0208 	add.w	r2, r2, #8
    af0e:	d1f4      	bne.n	aefa <_strtod_l+0x972>
    af10:	b109      	cbz	r1, af16 <_strtod_l+0x98e>
    af12:	ed8d 7b04 	vstr	d7, [sp, #16]
    af16:	9b08      	ldr	r3, [sp, #32]
    af18:	b193      	cbz	r3, af40 <_strtod_l+0x9b8>
    af1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    af22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    af26:	2b00      	cmp	r3, #0
    af28:	dd0a      	ble.n	af40 <_strtod_l+0x9b8>
    af2a:	2b1f      	cmp	r3, #31
    af2c:	f340 822f 	ble.w	b38e <_strtod_l+0xe06>
    af30:	2000      	movs	r0, #0
    af32:	2b34      	cmp	r3, #52	; 0x34
    af34:	9004      	str	r0, [sp, #16]
    af36:	f340 8240 	ble.w	b3ba <_strtod_l+0xe32>
    af3a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    af3e:	9305      	str	r3, [sp, #20]
    af40:	ed9d 7b04 	vldr	d7, [sp, #16]
    af44:	eeb5 7b40 	vcmp.f64	d7, #0.0
    af48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af4c:	f47f ad1a 	bne.w	a984 <_strtod_l+0x3fc>
    af50:	2322      	movs	r3, #34	; 0x22
    af52:	ed9f 8b05 	vldr	d8, [pc, #20]	; af68 <_strtod_l+0x9e0>
    af56:	f8c8 3000 	str.w	r3, [r8]
    af5a:	e4d2      	b.n	a902 <_strtod_l+0x37a>
    af5c:	2322      	movs	r3, #34	; 0x22
    af5e:	ed9f 8b04 	vldr	d8, [pc, #16]	; af70 <_strtod_l+0x9e8>
    af62:	f8c8 3000 	str.w	r3, [r8]
    af66:	e4cc      	b.n	a902 <_strtod_l+0x37a>
	...
    af74:	7ff00000 	.word	0x7ff00000
    af78:	bff00000 	.word	0xbff00000
    af7c:	7ff00000 	.word	0x7ff00000
    af80:	7c9fffff 	.word	0x7c9fffff
    af84:	7fefffff 	.word	0x7fefffff
    af88:	20000280 	.word	0x20000280
    af8c:	7ca00000 	.word	0x7ca00000
    af90:	200002a8 	.word	0x200002a8
    af94:	20000370 	.word	0x20000370
    af98:	9302      	str	r3, [sp, #8]
    af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af9c:	9301      	str	r3, [sp, #4]
    af9e:	ab12      	add	r3, sp, #72	; 0x48
    afa0:	9300      	str	r3, [sp, #0]
    afa2:	4aa7      	ldr	r2, [pc, #668]	; (b240 <_strtod_l+0xcb8>)
    afa4:	ab13      	add	r3, sp, #76	; 0x4c
    afa6:	a911      	add	r1, sp, #68	; 0x44
    afa8:	4640      	mov	r0, r8
    afaa:	f001 fb53 	bl	c654 <__gethex>
    afae:	f010 050f 	ands.w	r5, r0, #15
    afb2:	4604      	mov	r4, r0
    afb4:	f43f aca3 	beq.w	a8fe <_strtod_l+0x376>
    afb8:	2d06      	cmp	r5, #6
    afba:	d174      	bne.n	b0a6 <_strtod_l+0xb1e>
    afbc:	9b07      	ldr	r3, [sp, #28]
    afbe:	ed9f 8b9a 	vldr	d8, [pc, #616]	; b228 <_strtod_l+0xca0>
    afc2:	3701      	adds	r7, #1
    afc4:	2b00      	cmp	r3, #0
    afc6:	f43f abce 	beq.w	a766 <_strtod_l+0x1de>
    afca:	601f      	str	r7, [r3, #0]
    afcc:	f7ff bbcb 	b.w	a766 <_strtod_l+0x1de>
    afd0:	ed9d 8b04 	vldr	d8, [sp, #16]
    afd4:	e495      	b.n	a902 <_strtod_l+0x37a>
    afd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    afd8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    afdc:	4403      	add	r3, r0
    afde:	930b      	str	r3, [sp, #44]	; 0x2c
    afe0:	2801      	cmp	r0, #1
    afe2:	f105 0301 	add.w	r3, r5, #1
    afe6:	461a      	mov	r2, r3
    afe8:	d014      	beq.n	b014 <_strtod_l+0xa8c>
    afea:	4428      	add	r0, r5
    afec:	1e44      	subs	r4, r0, #1
    afee:	e003      	b.n	aff8 <_strtod_l+0xa70>
    aff0:	0046      	lsls	r6, r0, #1
    aff2:	429c      	cmp	r4, r3
    aff4:	d00d      	beq.n	b012 <_strtod_l+0xa8a>
    aff6:	3301      	adds	r3, #1
    aff8:	462a      	mov	r2, r5
    affa:	2a08      	cmp	r2, #8
    affc:	461d      	mov	r5, r3
    affe:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    b002:	d9f5      	bls.n	aff0 <_strtod_l+0xa68>
    b004:	2b10      	cmp	r3, #16
    b006:	bfdc      	itt	le
    b008:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    b00c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    b010:	e7ef      	b.n	aff2 <_strtod_l+0xa6a>
    b012:	3202      	adds	r2, #2
    b014:	2d08      	cmp	r5, #8
    b016:	dc3c      	bgt.n	b092 <_strtod_l+0xb0a>
    b018:	4615      	mov	r5, r2
    b01a:	f7ff bb79 	b.w	a710 <_strtod_l+0x188>
    b01e:	4989      	ldr	r1, [pc, #548]	; (b244 <_strtod_l+0xcbc>)
    b020:	2201      	movs	r2, #1
    b022:	4638      	mov	r0, r7
    b024:	f000 fd74 	bl	bb10 <strncmp>
    b028:	2800      	cmp	r0, #0
    b02a:	f000 8082 	beq.w	b132 <_strtod_l+0xbaa>
    b02e:	f04f 0e00 	mov.w	lr, #0
    b032:	46f1      	mov	r9, lr
    b034:	4676      	mov	r6, lr
    b036:	4675      	mov	r5, lr
    b038:	f7ff bbb5 	b.w	a7a6 <_strtod_l+0x21e>
    b03c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    b040:	459b      	cmp	fp, r3
    b042:	bfa8      	it	ge
    b044:	469b      	movge	fp, r3
    b046:	e42f      	b.n	a8a8 <_strtod_l+0x320>
    b048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b04c:	4618      	mov	r0, r3
    b04e:	2b00      	cmp	r3, #0
    b050:	f47f ae23 	bne.w	ac9a <_strtod_l+0x712>
    b054:	2322      	movs	r3, #34	; 0x22
    b056:	ed9f 8b74 	vldr	d8, [pc, #464]	; b228 <_strtod_l+0xca0>
    b05a:	9812      	ldr	r0, [sp, #72]	; 0x48
    b05c:	f8c8 3000 	str.w	r3, [r8]
    b060:	e678      	b.n	ad54 <_strtod_l+0x7cc>
    b062:	eeb0 7b49 	vmov.f64	d7, d9
    b066:	e6c0      	b.n	adea <_strtod_l+0x862>
    b068:	4977      	ldr	r1, [pc, #476]	; (b248 <_strtod_l+0xcc0>)
    b06a:	a811      	add	r0, sp, #68	; 0x44
    b06c:	f001 fdbc 	bl	cbe8 <__match>
    b070:	2800      	cmp	r0, #0
    b072:	f43f ab71 	beq.w	a758 <_strtod_l+0x1d0>
    b076:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b078:	4974      	ldr	r1, [pc, #464]	; (b24c <_strtod_l+0xcc4>)
    b07a:	3b01      	subs	r3, #1
    b07c:	a811      	add	r0, sp, #68	; 0x44
    b07e:	9311      	str	r3, [sp, #68]	; 0x44
    b080:	f001 fdb2 	bl	cbe8 <__match>
    b084:	b910      	cbnz	r0, b08c <_strtod_l+0xb04>
    b086:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b088:	3301      	adds	r3, #1
    b08a:	9311      	str	r3, [sp, #68]	; 0x44
    b08c:	ed9f 8b68 	vldr	d8, [pc, #416]	; b230 <_strtod_l+0xca8>
    b090:	e437      	b.n	a902 <_strtod_l+0x37a>
    b092:	2a10      	cmp	r2, #16
    b094:	bfdc      	itt	le
    b096:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    b09a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    b09e:	4615      	mov	r5, r2
    b0a0:	2000      	movs	r0, #0
    b0a2:	f7ff bb3a 	b.w	a71a <_strtod_l+0x192>
    b0a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b0a8:	b13a      	cbz	r2, b0ba <_strtod_l+0xb32>
    b0aa:	2135      	movs	r1, #53	; 0x35
    b0ac:	a814      	add	r0, sp, #80	; 0x50
    b0ae:	f002 fb7f 	bl	d7b0 <__copybits>
    b0b2:	9912      	ldr	r1, [sp, #72]	; 0x48
    b0b4:	4640      	mov	r0, r8
    b0b6:	f001 fec7 	bl	ce48 <_Bfree>
    b0ba:	3d01      	subs	r5, #1
    b0bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b0be:	2d04      	cmp	r5, #4
    b0c0:	f200 818f 	bhi.w	b3e2 <_strtod_l+0xe5a>
    b0c4:	e8df f005 	tbb	[pc, r5]
    b0c8:	1f2a2d03 	.word	0x1f2a2d03
    b0cc:	03          	.byte	0x03
    b0cd:	00          	.byte	0x00
    b0ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b0d0:	9204      	str	r2, [sp, #16]
    b0d2:	f203 4233 	addw	r2, r3, #1075	; 0x433
    b0d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b0d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    b0dc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    b0e0:	9305      	str	r3, [sp, #20]
    b0e2:	05e5      	lsls	r5, r4, #23
    b0e4:	d502      	bpl.n	b0ec <_strtod_l+0xb64>
    b0e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b0ea:	9305      	str	r3, [sp, #20]
    b0ec:	4a58      	ldr	r2, [pc, #352]	; (b250 <_strtod_l+0xcc8>)
    b0ee:	401a      	ands	r2, r3
    b0f0:	ed9d 8b04 	vldr	d8, [sp, #16]
    b0f4:	2a00      	cmp	r2, #0
    b0f6:	f47f ac04 	bne.w	a902 <_strtod_l+0x37a>
    b0fa:	f000 fded 	bl	bcd8 <__errno>
    b0fe:	2322      	movs	r3, #34	; 0x22
    b100:	6003      	str	r3, [r0, #0]
    b102:	f7ff bbfe 	b.w	a902 <_strtod_l+0x37a>
    b106:	f04f 33ff 	mov.w	r3, #4294967295
    b10a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    b10e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    b112:	05e3      	lsls	r3, r4, #23
    b114:	f57f af5c 	bpl.w	afd0 <_strtod_l+0xa48>
    b118:	9b05      	ldr	r3, [sp, #20]
    b11a:	e7e4      	b.n	b0e6 <_strtod_l+0xb5e>
    b11c:	4b4c      	ldr	r3, [pc, #304]	; (b250 <_strtod_l+0xcc8>)
    b11e:	9305      	str	r3, [sp, #20]
    b120:	e7f7      	b.n	b112 <_strtod_l+0xb8a>
    b122:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b124:	9304      	str	r3, [sp, #16]
    b126:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b128:	9305      	str	r3, [sp, #20]
    b12a:	e7da      	b.n	b0e2 <_strtod_l+0xb5a>
    b12c:	2000      	movs	r0, #0
    b12e:	f7ff bae1 	b.w	a6f4 <_strtod_l+0x16c>
    b132:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b134:	461a      	mov	r2, r3
    b136:	3301      	adds	r3, #1
    b138:	9311      	str	r3, [sp, #68]	; 0x44
    b13a:	7854      	ldrb	r4, [r2, #1]
    b13c:	4606      	mov	r6, r0
    b13e:	4681      	mov	r9, r0
    b140:	f7ff bacd 	b.w	a6de <_strtod_l+0x156>
    b144:	4b43      	ldr	r3, [pc, #268]	; (b254 <_strtod_l+0xccc>)
    b146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b14a:	ed93 8b00 	vldr	d8, [r3]
    b14e:	ed9d 7b04 	vldr	d7, [sp, #16]
    b152:	ee28 8b07 	vmul.f64	d8, d8, d7
    b156:	f7ff bbd4 	b.w	a902 <_strtod_l+0x37a>
    b15a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    b15e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    b162:	e511      	b.n	ab88 <_strtod_l+0x600>
    b164:	46ae      	mov	lr, r5
    b166:	900b      	str	r0, [sp, #44]	; 0x2c
    b168:	f7ff badc 	b.w	a724 <_strtod_l+0x19c>
    b16c:	4b39      	ldr	r3, [pc, #228]	; (b254 <_strtod_l+0xccc>)
    b16e:	f1c5 050f 	rsb	r5, r5, #15
    b172:	1b4a      	subs	r2, r1, r5
    b174:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b17c:	ed95 8b00 	vldr	d8, [r5]
    b180:	ed93 7b00 	vldr	d7, [r3]
    b184:	ed9d 6b04 	vldr	d6, [sp, #16]
    b188:	ee28 8b06 	vmul.f64	d8, d8, d6
    b18c:	ee28 8b07 	vmul.f64	d8, d8, d7
    b190:	f7ff bbb7 	b.w	a902 <_strtod_l+0x37a>
    b194:	2d00      	cmp	r5, #0
    b196:	f000 8095 	beq.w	b2c4 <_strtod_l+0xd3c>
    b19a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    b19e:	4b2e      	ldr	r3, [pc, #184]	; (b258 <_strtod_l+0xcd0>)
    b1a0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    b1a4:	4299      	cmp	r1, r3
    b1a6:	4662      	mov	r2, ip
    b1a8:	f000 80d2 	beq.w	b350 <_strtod_l+0xdc8>
    b1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	f000 80a5 	beq.w	b2fe <_strtod_l+0xd76>
    b1b4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b1b8:	4213      	tst	r3, r2
    b1ba:	4617      	mov	r7, r2
    b1bc:	d01a      	beq.n	b1f4 <_strtod_l+0xc6c>
    b1be:	eeb0 0b48 	vmov.f64	d0, d8
    b1c2:	2d00      	cmp	r5, #0
    b1c4:	f000 80a6 	beq.w	b314 <_strtod_l+0xd8c>
    b1c8:	f002 f9c2 	bl	d550 <__ulp>
    b1cc:	9b08      	ldr	r3, [sp, #32]
    b1ce:	b17b      	cbz	r3, b1f0 <_strtod_l+0xc68>
    b1d0:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b1d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b1d8:	2b00      	cmp	r3, #0
    b1da:	dd09      	ble.n	b1f0 <_strtod_l+0xc68>
    b1dc:	051b      	lsls	r3, r3, #20
    b1de:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b1e2:	2000      	movs	r0, #0
    b1e4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b1e8:	ec41 0b17 	vmov	d7, r0, r1
    b1ec:	ee20 0b07 	vmul.f64	d0, d0, d7
    b1f0:	ee38 8b00 	vadd.f64	d8, d8, d0
    b1f4:	9b08      	ldr	r3, [sp, #32]
    b1f6:	b15b      	cbz	r3, b210 <_strtod_l+0xc88>
    b1f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b238 <_strtod_l+0xcb0>
    b1fc:	4b14      	ldr	r3, [pc, #80]	; (b250 <_strtod_l+0xcc8>)
    b1fe:	ee28 8b07 	vmul.f64	d8, d8, d7
    b202:	ee18 2a90 	vmov	r2, s17
    b206:	4013      	ands	r3, r2
    b208:	b913      	cbnz	r3, b210 <_strtod_l+0xc88>
    b20a:	2322      	movs	r3, #34	; 0x22
    b20c:	f8c8 3000 	str.w	r3, [r8]
    b210:	9812      	ldr	r0, [sp, #72]	; 0x48
    b212:	e59f      	b.n	ad54 <_strtod_l+0x7cc>
    b214:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    b218:	9305      	str	r3, [sp, #20]
    b21a:	2300      	movs	r3, #0
    b21c:	9308      	str	r3, [sp, #32]
    b21e:	f7ff bbb1 	b.w	a984 <_strtod_l+0x3fc>
    b222:	bf00      	nop
    b224:	f3af 8000 	nop.w
	...
    b234:	7ff00000 	.word	0x7ff00000
    b238:	00000000 	.word	0x00000000
    b23c:	39500000 	.word	0x39500000
    b240:	20007a20 	.word	0x20007a20
    b244:	20007d38 	.word	0x20007d38
    b248:	20000c28 	.word	0x20000c28
    b24c:	20000c2c 	.word	0x20000c2c
    b250:	7ff00000 	.word	0x7ff00000
    b254:	200002a8 	.word	0x200002a8
    b258:	000fffff 	.word	0x000fffff
    b25c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b260:	430d      	orrs	r5, r1
    b262:	d1c7      	bne.n	b1f4 <_strtod_l+0xc6c>
    b264:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b268:	4617      	mov	r7, r2
    b26a:	2b00      	cmp	r3, #0
    b26c:	d1c2      	bne.n	b1f4 <_strtod_l+0xc6c>
    b26e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    b272:	0d1b      	lsrs	r3, r3, #20
    b274:	051b      	lsls	r3, r3, #20
    b276:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b27a:	d9bb      	bls.n	b1f4 <_strtod_l+0xc6c>
    b27c:	f8da 3014 	ldr.w	r3, [sl, #20]
    b280:	b91b      	cbnz	r3, b28a <_strtod_l+0xd02>
    b282:	f8da 3010 	ldr.w	r3, [sl, #16]
    b286:	2b01      	cmp	r3, #1
    b288:	ddb4      	ble.n	b1f4 <_strtod_l+0xc6c>
    b28a:	4651      	mov	r1, sl
    b28c:	2201      	movs	r2, #1
    b28e:	4640      	mov	r0, r8
    b290:	f002 f81a 	bl	d2c8 <__lshift>
    b294:	4621      	mov	r1, r4
    b296:	4682      	mov	sl, r0
    b298:	f002 f88e 	bl	d3b8 <__mcmp>
    b29c:	2800      	cmp	r0, #0
    b29e:	dda9      	ble.n	b1f4 <_strtod_l+0xc6c>
    b2a0:	9b08      	ldr	r3, [sp, #32]
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	d17e      	bne.n	b3a4 <_strtod_l+0xe1c>
    b2a6:	4b50      	ldr	r3, [pc, #320]	; (b3e8 <_strtod_l+0xe60>)
    b2a8:	403b      	ands	r3, r7
    b2aa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    b2ae:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    b2b2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    b2b6:	9305      	str	r3, [sp, #20]
    b2b8:	f04f 33ff 	mov.w	r3, #4294967295
    b2bc:	9304      	str	r3, [sp, #16]
    b2be:	ed9d 8b04 	vldr	d8, [sp, #16]
    b2c2:	e797      	b.n	b1f4 <_strtod_l+0xc6c>
    b2c4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    b2c8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    b2cc:	430b      	orrs	r3, r1
    b2ce:	4617      	mov	r7, r2
    b2d0:	f47f af6c 	bne.w	b1ac <_strtod_l+0xc24>
    b2d4:	e7e4      	b.n	b2a0 <_strtod_l+0xd18>
    b2d6:	4945      	ldr	r1, [pc, #276]	; (b3ec <_strtod_l+0xe64>)
    b2d8:	a811      	add	r0, sp, #68	; 0x44
    b2da:	aa14      	add	r2, sp, #80	; 0x50
    b2dc:	f001 fca0 	bl	cc20 <__hexnan>
    b2e0:	2805      	cmp	r0, #5
    b2e2:	f47f ab06 	bne.w	a8f2 <_strtod_l+0x36a>
    b2e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b2e8:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    b2ec:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    b2f0:	9305      	str	r3, [sp, #20]
    b2f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b2f4:	9304      	str	r3, [sp, #16]
    b2f6:	ed9d 8b04 	vldr	d8, [sp, #16]
    b2fa:	f7ff bb02 	b.w	a902 <_strtod_l+0x37a>
    b2fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b304:	4203      	tst	r3, r0
    b306:	f43f af75 	beq.w	b1f4 <_strtod_l+0xc6c>
    b30a:	460f      	mov	r7, r1
    b30c:	e757      	b.n	b1be <_strtod_l+0xc36>
    b30e:	4c38      	ldr	r4, [pc, #224]	; (b3f0 <_strtod_l+0xe68>)
    b310:	2100      	movs	r1, #0
    b312:	e58f      	b.n	ae34 <_strtod_l+0x8ac>
    b314:	f002 f91c 	bl	d550 <__ulp>
    b318:	9b08      	ldr	r3, [sp, #32]
    b31a:	2b00      	cmp	r3, #0
    b31c:	d055      	beq.n	b3ca <_strtod_l+0xe42>
    b31e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    b322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b326:	2b00      	cmp	r3, #0
    b328:	dd09      	ble.n	b33e <_strtod_l+0xdb6>
    b32a:	051b      	lsls	r3, r3, #20
    b32c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    b330:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    b334:	4628      	mov	r0, r5
    b336:	ec41 0b17 	vmov	d7, r0, r1
    b33a:	ee20 0b07 	vmul.f64	d0, d0, d7
    b33e:	ee38 8b40 	vsub.f64	d8, d8, d0
    b342:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b34a:	f47f af55 	bne.w	b1f8 <_strtod_l+0xc70>
    b34e:	e681      	b.n	b054 <_strtod_l+0xacc>
    b350:	9b08      	ldr	r3, [sp, #32]
    b352:	9904      	ldr	r1, [sp, #16]
    b354:	b31b      	cbz	r3, b39e <_strtod_l+0xe16>
    b356:	4b24      	ldr	r3, [pc, #144]	; (b3e8 <_strtod_l+0xe60>)
    b358:	4013      	ands	r3, r2
    b35a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    b35e:	d81e      	bhi.n	b39e <_strtod_l+0xe16>
    b360:	0d1b      	lsrs	r3, r3, #20
    b362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    b366:	f04f 30ff 	mov.w	r0, #4294967295
    b36a:	fa00 f303 	lsl.w	r3, r0, r3
    b36e:	4299      	cmp	r1, r3
    b370:	f47f af1c 	bne.w	b1ac <_strtod_l+0xc24>
    b374:	4b1f      	ldr	r3, [pc, #124]	; (b3f4 <_strtod_l+0xe6c>)
    b376:	429a      	cmp	r2, r3
    b378:	d030      	beq.n	b3dc <_strtod_l+0xe54>
    b37a:	4b1b      	ldr	r3, [pc, #108]	; (b3e8 <_strtod_l+0xe60>)
    b37c:	4013      	ands	r3, r2
    b37e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    b382:	9305      	str	r3, [sp, #20]
    b384:	2300      	movs	r3, #0
    b386:	9304      	str	r3, [sp, #16]
    b388:	ed9d 8b04 	vldr	d8, [sp, #16]
    b38c:	e732      	b.n	b1f4 <_strtod_l+0xc6c>
    b38e:	f04f 32ff 	mov.w	r2, #4294967295
    b392:	fa02 f303 	lsl.w	r3, r2, r3
    b396:	9a04      	ldr	r2, [sp, #16]
    b398:	401a      	ands	r2, r3
    b39a:	9204      	str	r2, [sp, #16]
    b39c:	e5d0      	b.n	af40 <_strtod_l+0x9b8>
    b39e:	f04f 33ff 	mov.w	r3, #4294967295
    b3a2:	e7e4      	b.n	b36e <_strtod_l+0xde6>
    b3a4:	4b10      	ldr	r3, [pc, #64]	; (b3e8 <_strtod_l+0xe60>)
    b3a6:	403b      	ands	r3, r7
    b3a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    b3ac:	f73f af7d 	bgt.w	b2aa <_strtod_l+0xd22>
    b3b0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    b3b4:	f73f af20 	bgt.w	b1f8 <_strtod_l+0xc70>
    b3b8:	e64c      	b.n	b054 <_strtod_l+0xacc>
    b3ba:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    b3be:	f04f 33ff 	mov.w	r3, #4294967295
    b3c2:	4093      	lsls	r3, r2
    b3c4:	400b      	ands	r3, r1
    b3c6:	9305      	str	r3, [sp, #20]
    b3c8:	e5ba      	b.n	af40 <_strtod_l+0x9b8>
    b3ca:	ee38 8b40 	vsub.f64	d8, d8, d0
    b3ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b3d6:	f47f af1b 	bne.w	b210 <_strtod_l+0xc88>
    b3da:	e63b      	b.n	b054 <_strtod_l+0xacc>
    b3dc:	3101      	adds	r1, #1
    b3de:	d1cc      	bne.n	b37a <_strtod_l+0xdf2>
    b3e0:	e409      	b.n	abf6 <_strtod_l+0x66e>
    b3e2:	2300      	movs	r3, #0
    b3e4:	e67d      	b.n	b0e2 <_strtod_l+0xb5a>
    b3e6:	bf00      	nop
    b3e8:	7ff00000 	.word	0x7ff00000
    b3ec:	20007a34 	.word	0x20007a34
    b3f0:	20000280 	.word	0x20000280
    b3f4:	7fefffff 	.word	0x7fefffff

0000b3f8 <_strtod_r>:
    b3f8:	4b01      	ldr	r3, [pc, #4]	; (b400 <_strtod_r+0x8>)
    b3fa:	f7ff b8c5 	b.w	a588 <_strtod_l>
    b3fe:	bf00      	nop
    b400:	200085f4 	.word	0x200085f4

0000b404 <_strtol_l.constprop.0>:
    b404:	2b01      	cmp	r3, #1
    b406:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b40a:	d040      	beq.n	b48e <_strtol_l.constprop.0+0x8a>
    b40c:	2b24      	cmp	r3, #36	; 0x24
    b40e:	4698      	mov	r8, r3
    b410:	d83d      	bhi.n	b48e <_strtol_l.constprop.0+0x8a>
    b412:	4d4c      	ldr	r5, [pc, #304]	; (b544 <_strtol_l.constprop.0+0x140>)
    b414:	468e      	mov	lr, r1
    b416:	4676      	mov	r6, lr
    b418:	f81e bb01 	ldrb.w	fp, [lr], #1
    b41c:	f815 400b 	ldrb.w	r4, [r5, fp]
    b420:	f014 0408 	ands.w	r4, r4, #8
    b424:	d1f7      	bne.n	b416 <_strtol_l.constprop.0+0x12>
    b426:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b42a:	d072      	beq.n	b512 <_strtol_l.constprop.0+0x10e>
    b42c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b430:	bf08      	it	eq
    b432:	f89e b000 	ldrbeq.w	fp, [lr]
    b436:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b43a:	bf08      	it	eq
    b43c:	f106 0e02 	addeq.w	lr, r6, #2
    b440:	2b00      	cmp	r3, #0
    b442:	d042      	beq.n	b4ca <_strtol_l.constprop.0+0xc6>
    b444:	2b10      	cmp	r3, #16
    b446:	d057      	beq.n	b4f8 <_strtol_l.constprop.0+0xf4>
    b448:	fbb9 f7f8 	udiv	r7, r9, r8
    b44c:	2500      	movs	r5, #0
    b44e:	462e      	mov	r6, r5
    b450:	fb08 9a17 	mls	sl, r8, r7, r9
    b454:	e005      	b.n	b462 <_strtol_l.constprop.0+0x5e>
    b456:	d033      	beq.n	b4c0 <_strtol_l.constprop.0+0xbc>
    b458:	fb08 c606 	mla	r6, r8, r6, ip
    b45c:	2501      	movs	r5, #1
    b45e:	f81e bb01 	ldrb.w	fp, [lr], #1
    b462:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b466:	f1bc 0f09 	cmp.w	ip, #9
    b46a:	d906      	bls.n	b47a <_strtol_l.constprop.0+0x76>
    b46c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b470:	f1bc 0f19 	cmp.w	ip, #25
    b474:	d812      	bhi.n	b49c <_strtol_l.constprop.0+0x98>
    b476:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b47a:	4563      	cmp	r3, ip
    b47c:	dd17      	ble.n	b4ae <_strtol_l.constprop.0+0xaa>
    b47e:	f1b5 3fff 	cmp.w	r5, #4294967295
    b482:	d0ec      	beq.n	b45e <_strtol_l.constprop.0+0x5a>
    b484:	42b7      	cmp	r7, r6
    b486:	d2e6      	bcs.n	b456 <_strtol_l.constprop.0+0x52>
    b488:	f04f 35ff 	mov.w	r5, #4294967295
    b48c:	e7e7      	b.n	b45e <_strtol_l.constprop.0+0x5a>
    b48e:	f000 fc23 	bl	bcd8 <__errno>
    b492:	2316      	movs	r3, #22
    b494:	6003      	str	r3, [r0, #0]
    b496:	2000      	movs	r0, #0
    b498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b49c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b4a0:	f1bc 0f19 	cmp.w	ip, #25
    b4a4:	d803      	bhi.n	b4ae <_strtol_l.constprop.0+0xaa>
    b4a6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b4aa:	4563      	cmp	r3, ip
    b4ac:	dce7      	bgt.n	b47e <_strtol_l.constprop.0+0x7a>
    b4ae:	1c6b      	adds	r3, r5, #1
    b4b0:	d027      	beq.n	b502 <_strtol_l.constprop.0+0xfe>
    b4b2:	b98c      	cbnz	r4, b4d8 <_strtol_l.constprop.0+0xd4>
    b4b4:	b10a      	cbz	r2, b4ba <_strtol_l.constprop.0+0xb6>
    b4b6:	bba5      	cbnz	r5, b522 <_strtol_l.constprop.0+0x11e>
    b4b8:	6011      	str	r1, [r2, #0]
    b4ba:	4630      	mov	r0, r6
    b4bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4c0:	45e2      	cmp	sl, ip
    b4c2:	dac9      	bge.n	b458 <_strtol_l.constprop.0+0x54>
    b4c4:	f04f 35ff 	mov.w	r5, #4294967295
    b4c8:	e7c9      	b.n	b45e <_strtol_l.constprop.0+0x5a>
    b4ca:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b4ce:	d005      	beq.n	b4dc <_strtol_l.constprop.0+0xd8>
    b4d0:	f04f 080a 	mov.w	r8, #10
    b4d4:	4643      	mov	r3, r8
    b4d6:	e7b7      	b.n	b448 <_strtol_l.constprop.0+0x44>
    b4d8:	4276      	negs	r6, r6
    b4da:	e7eb      	b.n	b4b4 <_strtol_l.constprop.0+0xb0>
    b4dc:	f89e 3000 	ldrb.w	r3, [lr]
    b4e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b4e4:	2b58      	cmp	r3, #88	; 0x58
    b4e6:	d121      	bne.n	b52c <_strtol_l.constprop.0+0x128>
    b4e8:	f04f 0810 	mov.w	r8, #16
    b4ec:	f89e b001 	ldrb.w	fp, [lr, #1]
    b4f0:	4643      	mov	r3, r8
    b4f2:	f10e 0e02 	add.w	lr, lr, #2
    b4f6:	e7a7      	b.n	b448 <_strtol_l.constprop.0+0x44>
    b4f8:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b4fc:	d01a      	beq.n	b534 <_strtol_l.constprop.0+0x130>
    b4fe:	4698      	mov	r8, r3
    b500:	e7a2      	b.n	b448 <_strtol_l.constprop.0+0x44>
    b502:	2322      	movs	r3, #34	; 0x22
    b504:	6003      	str	r3, [r0, #0]
    b506:	b172      	cbz	r2, b526 <_strtol_l.constprop.0+0x122>
    b508:	f10e 31ff 	add.w	r1, lr, #4294967295
    b50c:	464e      	mov	r6, r9
    b50e:	6011      	str	r1, [r2, #0]
    b510:	e7d3      	b.n	b4ba <_strtol_l.constprop.0+0xb6>
    b512:	f89e b000 	ldrb.w	fp, [lr]
    b516:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b51a:	f106 0e02 	add.w	lr, r6, #2
    b51e:	2401      	movs	r4, #1
    b520:	e78e      	b.n	b440 <_strtol_l.constprop.0+0x3c>
    b522:	46b1      	mov	r9, r6
    b524:	e7f0      	b.n	b508 <_strtol_l.constprop.0+0x104>
    b526:	464e      	mov	r6, r9
    b528:	4630      	mov	r0, r6
    b52a:	e7c7      	b.n	b4bc <_strtol_l.constprop.0+0xb8>
    b52c:	f04f 0808 	mov.w	r8, #8
    b530:	4643      	mov	r3, r8
    b532:	e789      	b.n	b448 <_strtol_l.constprop.0+0x44>
    b534:	f89e 5000 	ldrb.w	r5, [lr]
    b538:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b53c:	2d58      	cmp	r5, #88	; 0x58
    b53e:	d0d3      	beq.n	b4e8 <_strtol_l.constprop.0+0xe4>
    b540:	4698      	mov	r8, r3
    b542:	e781      	b.n	b448 <_strtol_l.constprop.0+0x44>
    b544:	20000aa5 	.word	0x20000aa5

0000b548 <_strtol_r>:
    b548:	f7ff bf5c 	b.w	b404 <_strtol_l.constprop.0>

0000b54c <__cxa_atexit>:
    b54c:	4613      	mov	r3, r2
    b54e:	460a      	mov	r2, r1
    b550:	4601      	mov	r1, r0
    b552:	2002      	movs	r0, #2
    b554:	f000 be92 	b.w	c27c <__register_exitproc>

0000b558 <stdio_exit_handler>:
    b558:	4a02      	ldr	r2, [pc, #8]	; (b564 <stdio_exit_handler+0xc>)
    b55a:	4903      	ldr	r1, [pc, #12]	; (b568 <stdio_exit_handler+0x10>)
    b55c:	4803      	ldr	r0, [pc, #12]	; (b56c <stdio_exit_handler+0x14>)
    b55e:	f000 b8bb 	b.w	b6d8 <_fwalk_sglue>
    b562:	bf00      	nop
    b564:	20008b70 	.word	0x20008b70
    b568:	00010c25 	.word	0x00010c25
    b56c:	200084a8 	.word	0x200084a8

0000b570 <cleanup_stdio>:
    b570:	4b0c      	ldr	r3, [pc, #48]	; (b5a4 <cleanup_stdio+0x34>)
    b572:	6841      	ldr	r1, [r0, #4]
    b574:	4299      	cmp	r1, r3
    b576:	b510      	push	{r4, lr}
    b578:	4604      	mov	r4, r0
    b57a:	d001      	beq.n	b580 <cleanup_stdio+0x10>
    b57c:	f005 fb52 	bl	10c24 <_fclose_r>
    b580:	68a1      	ldr	r1, [r4, #8]
    b582:	4b09      	ldr	r3, [pc, #36]	; (b5a8 <cleanup_stdio+0x38>)
    b584:	4299      	cmp	r1, r3
    b586:	d002      	beq.n	b58e <cleanup_stdio+0x1e>
    b588:	4620      	mov	r0, r4
    b58a:	f005 fb4b 	bl	10c24 <_fclose_r>
    b58e:	68e1      	ldr	r1, [r4, #12]
    b590:	4b06      	ldr	r3, [pc, #24]	; (b5ac <cleanup_stdio+0x3c>)
    b592:	4299      	cmp	r1, r3
    b594:	d004      	beq.n	b5a0 <cleanup_stdio+0x30>
    b596:	4620      	mov	r0, r4
    b598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b59c:	f005 bb42 	b.w	10c24 <_fclose_r>
    b5a0:	bd10      	pop	{r4, pc}
    b5a2:	bf00      	nop
    b5a4:	20028ae8 	.word	0x20028ae8
    b5a8:	20028b50 	.word	0x20028b50
    b5ac:	20028bb8 	.word	0x20028bb8

0000b5b0 <global_stdio_init.part.0>:
    b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b5b4:	4c2a      	ldr	r4, [pc, #168]	; (b660 <global_stdio_init.part.0+0xb0>)
    b5b6:	4b2b      	ldr	r3, [pc, #172]	; (b664 <global_stdio_init.part.0+0xb4>)
    b5b8:	482b      	ldr	r0, [pc, #172]	; (b668 <global_stdio_init.part.0+0xb8>)
    b5ba:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b67c <global_stdio_init.part.0+0xcc>
    b5be:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b680 <global_stdio_init.part.0+0xd0>
    b5c2:	4f2a      	ldr	r7, [pc, #168]	; (b66c <global_stdio_init.part.0+0xbc>)
    b5c4:	6018      	str	r0, [r3, #0]
    b5c6:	2500      	movs	r5, #0
    b5c8:	2304      	movs	r3, #4
    b5ca:	2208      	movs	r2, #8
    b5cc:	4629      	mov	r1, r5
    b5ce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b5d2:	4e27      	ldr	r6, [pc, #156]	; (b670 <global_stdio_init.part.0+0xc0>)
    b5d4:	6665      	str	r5, [r4, #100]	; 0x64
    b5d6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b5da:	e9c4 5500 	strd	r5, r5, [r4]
    b5de:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b5e2:	61a5      	str	r5, [r4, #24]
    b5e4:	f000 fa42 	bl	ba6c <memset>
    b5e8:	4b22      	ldr	r3, [pc, #136]	; (b674 <global_stdio_init.part.0+0xc4>)
    b5ea:	6763      	str	r3, [r4, #116]	; 0x74
    b5ec:	2208      	movs	r2, #8
    b5ee:	4629      	mov	r1, r5
    b5f0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b5f4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b5f8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b5fc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b600:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b604:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b608:	6725      	str	r5, [r4, #112]	; 0x70
    b60a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b60e:	62e6      	str	r6, [r4, #44]	; 0x2c
    b610:	f000 fa2c 	bl	ba6c <memset>
    b614:	4b18      	ldr	r3, [pc, #96]	; (b678 <global_stdio_init.part.0+0xc8>)
    b616:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b61a:	4629      	mov	r1, r5
    b61c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b620:	2208      	movs	r2, #8
    b622:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b626:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b62a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b62e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b632:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b636:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b63a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b63e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b642:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b646:	f000 fa11 	bl	ba6c <memset>
    b64a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b64e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b652:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b656:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b65e:	bf00      	nop
    b660:	20028ae8 	.word	0x20028ae8
    b664:	20028c20 	.word	0x20028c20
    b668:	0000b559 	.word	0x0000b559
    b66c:	0000b821 	.word	0x0000b821
    b670:	0000b841 	.word	0x0000b841
    b674:	00010009 	.word	0x00010009
    b678:	00020012 	.word	0x00020012
    b67c:	0000b7b9 	.word	0x0000b7b9
    b680:	0000b7e1 	.word	0x0000b7e1

0000b684 <__sinit>:
    b684:	b510      	push	{r4, lr}
    b686:	4604      	mov	r4, r0
    b688:	480a      	ldr	r0, [pc, #40]	; (b6b4 <__sinit+0x30>)
    b68a:	f000 fb53 	bl	bd34 <__retarget_lock_acquire_recursive>
    b68e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b690:	b923      	cbnz	r3, b69c <__sinit+0x18>
    b692:	4b09      	ldr	r3, [pc, #36]	; (b6b8 <__sinit+0x34>)
    b694:	4a09      	ldr	r2, [pc, #36]	; (b6bc <__sinit+0x38>)
    b696:	681b      	ldr	r3, [r3, #0]
    b698:	6362      	str	r2, [r4, #52]	; 0x34
    b69a:	b123      	cbz	r3, b6a6 <__sinit+0x22>
    b69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6a0:	4804      	ldr	r0, [pc, #16]	; (b6b4 <__sinit+0x30>)
    b6a2:	f000 bb49 	b.w	bd38 <__retarget_lock_release_recursive>
    b6a6:	f7ff ff83 	bl	b5b0 <global_stdio_init.part.0>
    b6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6ae:	4801      	ldr	r0, [pc, #4]	; (b6b4 <__sinit+0x30>)
    b6b0:	f000 bb42 	b.w	bd38 <__retarget_lock_release_recursive>
    b6b4:	20028ab0 	.word	0x20028ab0
    b6b8:	20028c20 	.word	0x20028c20
    b6bc:	0000b571 	.word	0x0000b571

0000b6c0 <__sfp_lock_acquire>:
    b6c0:	4801      	ldr	r0, [pc, #4]	; (b6c8 <__sfp_lock_acquire+0x8>)
    b6c2:	f000 bb37 	b.w	bd34 <__retarget_lock_acquire_recursive>
    b6c6:	bf00      	nop
    b6c8:	20028ab0 	.word	0x20028ab0

0000b6cc <__sfp_lock_release>:
    b6cc:	4801      	ldr	r0, [pc, #4]	; (b6d4 <__sfp_lock_release+0x8>)
    b6ce:	f000 bb33 	b.w	bd38 <__retarget_lock_release_recursive>
    b6d2:	bf00      	nop
    b6d4:	20028ab0 	.word	0x20028ab0

0000b6d8 <_fwalk_sglue>:
    b6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b6dc:	4680      	mov	r8, r0
    b6de:	460f      	mov	r7, r1
    b6e0:	4616      	mov	r6, r2
    b6e2:	f04f 0900 	mov.w	r9, #0
    b6e6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b6ea:	3d01      	subs	r5, #1
    b6ec:	d411      	bmi.n	b712 <_fwalk_sglue+0x3a>
    b6ee:	89a3      	ldrh	r3, [r4, #12]
    b6f0:	2b01      	cmp	r3, #1
    b6f2:	f105 35ff 	add.w	r5, r5, #4294967295
    b6f6:	d908      	bls.n	b70a <_fwalk_sglue+0x32>
    b6f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b6fc:	3301      	adds	r3, #1
    b6fe:	4621      	mov	r1, r4
    b700:	d003      	beq.n	b70a <_fwalk_sglue+0x32>
    b702:	4640      	mov	r0, r8
    b704:	47b8      	blx	r7
    b706:	ea49 0900 	orr.w	r9, r9, r0
    b70a:	1c6b      	adds	r3, r5, #1
    b70c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b710:	d1ed      	bne.n	b6ee <_fwalk_sglue+0x16>
    b712:	6836      	ldr	r6, [r6, #0]
    b714:	2e00      	cmp	r6, #0
    b716:	d1e6      	bne.n	b6e6 <_fwalk_sglue+0xe>
    b718:	4648      	mov	r0, r9
    b71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b71e:	bf00      	nop

0000b720 <sprintf>:
    b720:	b40e      	push	{r1, r2, r3}
    b722:	b510      	push	{r4, lr}
    b724:	b09d      	sub	sp, #116	; 0x74
    b726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b72a:	ab1f      	add	r3, sp, #124	; 0x7c
    b72c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b730:	9104      	str	r1, [sp, #16]
    b732:	4909      	ldr	r1, [pc, #36]	; (b758 <sprintf+0x38>)
    b734:	f853 2b04 	ldr.w	r2, [r3], #4
    b738:	9002      	str	r0, [sp, #8]
    b73a:	4c08      	ldr	r4, [pc, #32]	; (b75c <sprintf+0x3c>)
    b73c:	6808      	ldr	r0, [r1, #0]
    b73e:	9301      	str	r3, [sp, #4]
    b740:	a902      	add	r1, sp, #8
    b742:	9405      	str	r4, [sp, #20]
    b744:	f002 f8a4 	bl	d890 <_svfprintf_r>
    b748:	9b02      	ldr	r3, [sp, #8]
    b74a:	2200      	movs	r2, #0
    b74c:	701a      	strb	r2, [r3, #0]
    b74e:	b01d      	add	sp, #116	; 0x74
    b750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b754:	b003      	add	sp, #12
    b756:	4770      	bx	lr
    b758:	20008b7c 	.word	0x20008b7c
    b75c:	ffff0208 	.word	0xffff0208

0000b760 <sscanf>:
    b760:	b40e      	push	{r1, r2, r3}
    b762:	b510      	push	{r4, lr}
    b764:	b09f      	sub	sp, #124	; 0x7c
    b766:	ac21      	add	r4, sp, #132	; 0x84
    b768:	f44f 7101 	mov.w	r1, #516	; 0x204
    b76c:	f854 2b04 	ldr.w	r2, [r4], #4
    b770:	9201      	str	r2, [sp, #4]
    b772:	f8ad 101c 	strh.w	r1, [sp, #28]
    b776:	9004      	str	r0, [sp, #16]
    b778:	9008      	str	r0, [sp, #32]
    b77a:	f000 fd01 	bl	c180 <strlen>
    b77e:	9005      	str	r0, [sp, #20]
    b780:	9009      	str	r0, [sp, #36]	; 0x24
    b782:	480b      	ldr	r0, [pc, #44]	; (b7b0 <sscanf+0x50>)
    b784:	490b      	ldr	r1, [pc, #44]	; (b7b4 <sscanf+0x54>)
    b786:	910c      	str	r1, [sp, #48]	; 0x30
    b788:	2300      	movs	r3, #0
    b78a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b78e:	9310      	str	r3, [sp, #64]	; 0x40
    b790:	9315      	str	r3, [sp, #84]	; 0x54
    b792:	9a01      	ldr	r2, [sp, #4]
    b794:	6800      	ldr	r0, [r0, #0]
    b796:	f8ad c01e 	strh.w	ip, [sp, #30]
    b79a:	4623      	mov	r3, r4
    b79c:	a904      	add	r1, sp, #16
    b79e:	9403      	str	r4, [sp, #12]
    b7a0:	f003 fe18 	bl	f3d4 <__ssvfscanf_r>
    b7a4:	b01f      	add	sp, #124	; 0x7c
    b7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7aa:	b003      	add	sp, #12
    b7ac:	4770      	bx	lr
    b7ae:	bf00      	nop
    b7b0:	20008b7c 	.word	0x20008b7c
    b7b4:	0000b7dd 	.word	0x0000b7dd

0000b7b8 <__sread>:
    b7b8:	b510      	push	{r4, lr}
    b7ba:	460c      	mov	r4, r1
    b7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b7c0:	f000 fa4c 	bl	bc5c <_read_r>
    b7c4:	2800      	cmp	r0, #0
    b7c6:	db03      	blt.n	b7d0 <__sread+0x18>
    b7c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b7ca:	4403      	add	r3, r0
    b7cc:	6523      	str	r3, [r4, #80]	; 0x50
    b7ce:	bd10      	pop	{r4, pc}
    b7d0:	89a3      	ldrh	r3, [r4, #12]
    b7d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b7d6:	81a3      	strh	r3, [r4, #12]
    b7d8:	bd10      	pop	{r4, pc}
    b7da:	bf00      	nop

0000b7dc <__seofread>:
    b7dc:	2000      	movs	r0, #0
    b7de:	4770      	bx	lr

0000b7e0 <__swrite>:
    b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7e4:	460c      	mov	r4, r1
    b7e6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b7ea:	461f      	mov	r7, r3
    b7ec:	05cb      	lsls	r3, r1, #23
    b7ee:	4605      	mov	r5, r0
    b7f0:	4616      	mov	r6, r2
    b7f2:	d40b      	bmi.n	b80c <__swrite+0x2c>
    b7f4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b7f8:	81a1      	strh	r1, [r4, #12]
    b7fa:	463b      	mov	r3, r7
    b7fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b800:	4632      	mov	r2, r6
    b802:	4628      	mov	r0, r5
    b804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b808:	f000 ba50 	b.w	bcac <_write_r>
    b80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b810:	2302      	movs	r3, #2
    b812:	2200      	movs	r2, #0
    b814:	f000 fa0c 	bl	bc30 <_lseek_r>
    b818:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b81c:	e7ea      	b.n	b7f4 <__swrite+0x14>
    b81e:	bf00      	nop

0000b820 <__sseek>:
    b820:	b510      	push	{r4, lr}
    b822:	460c      	mov	r4, r1
    b824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b828:	f000 fa02 	bl	bc30 <_lseek_r>
    b82c:	89a3      	ldrh	r3, [r4, #12]
    b82e:	1c42      	adds	r2, r0, #1
    b830:	bf0e      	itee	eq
    b832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b83a:	6520      	strne	r0, [r4, #80]	; 0x50
    b83c:	81a3      	strh	r3, [r4, #12]
    b83e:	bd10      	pop	{r4, pc}

0000b840 <__sclose>:
    b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b844:	f000 b9e2 	b.w	bc0c <_close_r>

0000b848 <_vdprintf_r>:
    b848:	b5f0      	push	{r4, r5, r6, r7, lr}
    b84a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b84e:	af04      	add	r7, sp, #16
    b850:	9300      	str	r3, [sp, #0]
    b852:	4613      	mov	r3, r2
    b854:	f44f 7200 	mov.w	r2, #512	; 0x200
    b858:	460e      	mov	r6, r1
    b85a:	9203      	str	r2, [sp, #12]
    b85c:	4639      	mov	r1, r7
    b85e:	aa03      	add	r2, sp, #12
    b860:	4605      	mov	r5, r0
    b862:	f000 f825 	bl	b8b0 <_vasnprintf_r>
    b866:	b188      	cbz	r0, b88c <_vdprintf_r+0x44>
    b868:	4604      	mov	r4, r0
    b86a:	4602      	mov	r2, r0
    b86c:	9b03      	ldr	r3, [sp, #12]
    b86e:	4631      	mov	r1, r6
    b870:	4628      	mov	r0, r5
    b872:	f000 fa1b 	bl	bcac <_write_r>
    b876:	42bc      	cmp	r4, r7
    b878:	9003      	str	r0, [sp, #12]
    b87a:	d004      	beq.n	b886 <_vdprintf_r+0x3e>
    b87c:	4628      	mov	r0, r5
    b87e:	4621      	mov	r1, r4
    b880:	f000 fd90 	bl	c3a4 <_free_r>
    b884:	9803      	ldr	r0, [sp, #12]
    b886:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b88c:	f04f 30ff 	mov.w	r0, #4294967295
    b890:	e7f9      	b.n	b886 <_vdprintf_r+0x3e>
    b892:	bf00      	nop

0000b894 <vdprintf>:
    b894:	b410      	push	{r4}
    b896:	4c05      	ldr	r4, [pc, #20]	; (b8ac <vdprintf+0x18>)
    b898:	4684      	mov	ip, r0
    b89a:	4613      	mov	r3, r2
    b89c:	6820      	ldr	r0, [r4, #0]
    b89e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b8a2:	460a      	mov	r2, r1
    b8a4:	4661      	mov	r1, ip
    b8a6:	f7ff bfcf 	b.w	b848 <_vdprintf_r>
    b8aa:	bf00      	nop
    b8ac:	20008b7c 	.word	0x20008b7c

0000b8b0 <_vasnprintf_r>:
    b8b0:	b530      	push	{r4, r5, lr}
    b8b2:	6814      	ldr	r4, [r2, #0]
    b8b4:	4615      	mov	r5, r2
    b8b6:	b09b      	sub	sp, #108	; 0x6c
    b8b8:	461a      	mov	r2, r3
    b8ba:	b109      	cbz	r1, b8c0 <_vasnprintf_r+0x10>
    b8bc:	2c00      	cmp	r4, #0
    b8be:	d119      	bne.n	b8f4 <_vasnprintf_r+0x44>
    b8c0:	2100      	movs	r1, #0
    b8c2:	f44f 7322 	mov.w	r3, #648	; 0x288
    b8c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    b8ca:	9100      	str	r1, [sp, #0]
    b8cc:	9104      	str	r1, [sp, #16]
    b8ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b8d2:	9102      	str	r1, [sp, #8]
    b8d4:	9105      	str	r1, [sp, #20]
    b8d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    b8da:	4669      	mov	r1, sp
    b8dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b8de:	f001 ffd7 	bl	d890 <_svfprintf_r>
    b8e2:	2800      	cmp	r0, #0
    b8e4:	db13      	blt.n	b90e <_vasnprintf_r+0x5e>
    b8e6:	9b00      	ldr	r3, [sp, #0]
    b8e8:	6028      	str	r0, [r5, #0]
    b8ea:	2200      	movs	r2, #0
    b8ec:	701a      	strb	r2, [r3, #0]
    b8ee:	9804      	ldr	r0, [sp, #16]
    b8f0:	b01b      	add	sp, #108	; 0x6c
    b8f2:	bd30      	pop	{r4, r5, pc}
    b8f4:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b8f8:	9100      	str	r1, [sp, #0]
    b8fa:	9104      	str	r1, [sp, #16]
    b8fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    b900:	4621      	mov	r1, r4
    b902:	dae4      	bge.n	b8ce <_vasnprintf_r+0x1e>
    b904:	238b      	movs	r3, #139	; 0x8b
    b906:	6003      	str	r3, [r0, #0]
    b908:	2000      	movs	r0, #0
    b90a:	b01b      	add	sp, #108	; 0x6c
    b90c:	bd30      	pop	{r4, r5, pc}
    b90e:	2000      	movs	r0, #0
    b910:	e7ee      	b.n	b8f0 <_vasnprintf_r+0x40>
    b912:	bf00      	nop

0000b914 <memcmp>:
    b914:	2a03      	cmp	r2, #3
    b916:	b570      	push	{r4, r5, r6, lr}
    b918:	d914      	bls.n	b944 <memcmp+0x30>
    b91a:	ea40 0301 	orr.w	r3, r0, r1
    b91e:	079b      	lsls	r3, r3, #30
    b920:	d122      	bne.n	b968 <memcmp+0x54>
    b922:	4604      	mov	r4, r0
    b924:	460b      	mov	r3, r1
    b926:	4619      	mov	r1, r3
    b928:	4620      	mov	r0, r4
    b92a:	680e      	ldr	r6, [r1, #0]
    b92c:	6805      	ldr	r5, [r0, #0]
    b92e:	42b5      	cmp	r5, r6
    b930:	f104 0404 	add.w	r4, r4, #4
    b934:	f103 0304 	add.w	r3, r3, #4
    b938:	d116      	bne.n	b968 <memcmp+0x54>
    b93a:	3a04      	subs	r2, #4
    b93c:	2a03      	cmp	r2, #3
    b93e:	4620      	mov	r0, r4
    b940:	4619      	mov	r1, r3
    b942:	d8f0      	bhi.n	b926 <memcmp+0x12>
    b944:	1e54      	subs	r4, r2, #1
    b946:	b19a      	cbz	r2, b970 <memcmp+0x5c>
    b948:	1e42      	subs	r2, r0, #1
    b94a:	3901      	subs	r1, #1
    b94c:	e001      	b.n	b952 <memcmp+0x3e>
    b94e:	18c3      	adds	r3, r0, r3
    b950:	d00c      	beq.n	b96c <memcmp+0x58>
    b952:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b956:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b95a:	45e6      	cmp	lr, ip
    b95c:	eba4 0302 	sub.w	r3, r4, r2
    b960:	d0f5      	beq.n	b94e <memcmp+0x3a>
    b962:	ebae 000c 	sub.w	r0, lr, ip
    b966:	bd70      	pop	{r4, r5, r6, pc}
    b968:	1e54      	subs	r4, r2, #1
    b96a:	e7ed      	b.n	b948 <memcmp+0x34>
    b96c:	4618      	mov	r0, r3
    b96e:	bd70      	pop	{r4, r5, r6, pc}
    b970:	4610      	mov	r0, r2
    b972:	bd70      	pop	{r4, r5, r6, pc}

0000b974 <memmove>:
    b974:	4288      	cmp	r0, r1
    b976:	d90d      	bls.n	b994 <memmove+0x20>
    b978:	188b      	adds	r3, r1, r2
    b97a:	4283      	cmp	r3, r0
    b97c:	d90a      	bls.n	b994 <memmove+0x20>
    b97e:	eb00 0c02 	add.w	ip, r0, r2
    b982:	b1ba      	cbz	r2, b9b4 <memmove+0x40>
    b984:	4662      	mov	r2, ip
    b986:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b98a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b98e:	4299      	cmp	r1, r3
    b990:	d1f9      	bne.n	b986 <memmove+0x12>
    b992:	4770      	bx	lr
    b994:	2a0f      	cmp	r2, #15
    b996:	d80e      	bhi.n	b9b6 <memmove+0x42>
    b998:	4603      	mov	r3, r0
    b99a:	f102 3cff 	add.w	ip, r2, #4294967295
    b99e:	b14a      	cbz	r2, b9b4 <memmove+0x40>
    b9a0:	f10c 0c01 	add.w	ip, ip, #1
    b9a4:	3b01      	subs	r3, #1
    b9a6:	448c      	add	ip, r1
    b9a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    b9ac:	f803 2f01 	strb.w	r2, [r3, #1]!
    b9b0:	4561      	cmp	r1, ip
    b9b2:	d1f9      	bne.n	b9a8 <memmove+0x34>
    b9b4:	4770      	bx	lr
    b9b6:	ea40 0301 	orr.w	r3, r0, r1
    b9ba:	079b      	lsls	r3, r3, #30
    b9bc:	d150      	bne.n	ba60 <memmove+0xec>
    b9be:	f1a2 0310 	sub.w	r3, r2, #16
    b9c2:	b570      	push	{r4, r5, r6, lr}
    b9c4:	f101 0c20 	add.w	ip, r1, #32
    b9c8:	f023 050f 	bic.w	r5, r3, #15
    b9cc:	f101 0e10 	add.w	lr, r1, #16
    b9d0:	f100 0410 	add.w	r4, r0, #16
    b9d4:	44ac      	add	ip, r5
    b9d6:	091b      	lsrs	r3, r3, #4
    b9d8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b9dc:	f844 5c10 	str.w	r5, [r4, #-16]
    b9e0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b9e4:	f844 5c0c 	str.w	r5, [r4, #-12]
    b9e8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b9ec:	f844 5c08 	str.w	r5, [r4, #-8]
    b9f0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b9f4:	f844 5c04 	str.w	r5, [r4, #-4]
    b9f8:	f10e 0e10 	add.w	lr, lr, #16
    b9fc:	45e6      	cmp	lr, ip
    b9fe:	f104 0410 	add.w	r4, r4, #16
    ba02:	d1e9      	bne.n	b9d8 <memmove+0x64>
    ba04:	3301      	adds	r3, #1
    ba06:	f012 0f0c 	tst.w	r2, #12
    ba0a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    ba0e:	f002 040f 	and.w	r4, r2, #15
    ba12:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    ba16:	d027      	beq.n	ba68 <memmove+0xf4>
    ba18:	3c04      	subs	r4, #4
    ba1a:	f024 0603 	bic.w	r6, r4, #3
    ba1e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    ba22:	441e      	add	r6, r3
    ba24:	1f1c      	subs	r4, r3, #4
    ba26:	468e      	mov	lr, r1
    ba28:	f85e 5b04 	ldr.w	r5, [lr], #4
    ba2c:	f844 5f04 	str.w	r5, [r4, #4]!
    ba30:	42b4      	cmp	r4, r6
    ba32:	d1f9      	bne.n	ba28 <memmove+0xb4>
    ba34:	f10c 0401 	add.w	r4, ip, #1
    ba38:	f002 0203 	and.w	r2, r2, #3
    ba3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ba40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    ba44:	f102 3cff 	add.w	ip, r2, #4294967295
    ba48:	b14a      	cbz	r2, ba5e <memmove+0xea>
    ba4a:	f10c 0c01 	add.w	ip, ip, #1
    ba4e:	3b01      	subs	r3, #1
    ba50:	448c      	add	ip, r1
    ba52:	f811 2b01 	ldrb.w	r2, [r1], #1
    ba56:	f803 2f01 	strb.w	r2, [r3, #1]!
    ba5a:	4561      	cmp	r1, ip
    ba5c:	d1f9      	bne.n	ba52 <memmove+0xde>
    ba5e:	bd70      	pop	{r4, r5, r6, pc}
    ba60:	f102 3cff 	add.w	ip, r2, #4294967295
    ba64:	4603      	mov	r3, r0
    ba66:	e79b      	b.n	b9a0 <memmove+0x2c>
    ba68:	4622      	mov	r2, r4
    ba6a:	e7eb      	b.n	ba44 <memmove+0xd0>

0000ba6c <memset>:
    ba6c:	0783      	lsls	r3, r0, #30
    ba6e:	b530      	push	{r4, r5, lr}
    ba70:	d048      	beq.n	bb04 <memset+0x98>
    ba72:	1e54      	subs	r4, r2, #1
    ba74:	2a00      	cmp	r2, #0
    ba76:	d03f      	beq.n	baf8 <memset+0x8c>
    ba78:	b2ca      	uxtb	r2, r1
    ba7a:	4603      	mov	r3, r0
    ba7c:	e001      	b.n	ba82 <memset+0x16>
    ba7e:	3c01      	subs	r4, #1
    ba80:	d33a      	bcc.n	baf8 <memset+0x8c>
    ba82:	f803 2b01 	strb.w	r2, [r3], #1
    ba86:	079d      	lsls	r5, r3, #30
    ba88:	d1f9      	bne.n	ba7e <memset+0x12>
    ba8a:	2c03      	cmp	r4, #3
    ba8c:	d92d      	bls.n	baea <memset+0x7e>
    ba8e:	b2cd      	uxtb	r5, r1
    ba90:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ba94:	2c0f      	cmp	r4, #15
    ba96:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ba9a:	d936      	bls.n	bb0a <memset+0x9e>
    ba9c:	f1a4 0210 	sub.w	r2, r4, #16
    baa0:	f022 0c0f 	bic.w	ip, r2, #15
    baa4:	f103 0e20 	add.w	lr, r3, #32
    baa8:	44e6      	add	lr, ip
    baaa:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    baae:	f103 0210 	add.w	r2, r3, #16
    bab2:	e942 5504 	strd	r5, r5, [r2, #-16]
    bab6:	e942 5502 	strd	r5, r5, [r2, #-8]
    baba:	3210      	adds	r2, #16
    babc:	4572      	cmp	r2, lr
    babe:	d1f8      	bne.n	bab2 <memset+0x46>
    bac0:	f10c 0201 	add.w	r2, ip, #1
    bac4:	f014 0f0c 	tst.w	r4, #12
    bac8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    bacc:	f004 0c0f 	and.w	ip, r4, #15
    bad0:	d013      	beq.n	bafa <memset+0x8e>
    bad2:	f1ac 0304 	sub.w	r3, ip, #4
    bad6:	f023 0303 	bic.w	r3, r3, #3
    bada:	3304      	adds	r3, #4
    badc:	4413      	add	r3, r2
    bade:	f842 5b04 	str.w	r5, [r2], #4
    bae2:	4293      	cmp	r3, r2
    bae4:	d1fb      	bne.n	bade <memset+0x72>
    bae6:	f00c 0403 	and.w	r4, ip, #3
    baea:	b12c      	cbz	r4, baf8 <memset+0x8c>
    baec:	b2c9      	uxtb	r1, r1
    baee:	441c      	add	r4, r3
    baf0:	f803 1b01 	strb.w	r1, [r3], #1
    baf4:	429c      	cmp	r4, r3
    baf6:	d1fb      	bne.n	baf0 <memset+0x84>
    baf8:	bd30      	pop	{r4, r5, pc}
    bafa:	4664      	mov	r4, ip
    bafc:	4613      	mov	r3, r2
    bafe:	2c00      	cmp	r4, #0
    bb00:	d1f4      	bne.n	baec <memset+0x80>
    bb02:	e7f9      	b.n	baf8 <memset+0x8c>
    bb04:	4603      	mov	r3, r0
    bb06:	4614      	mov	r4, r2
    bb08:	e7bf      	b.n	ba8a <memset+0x1e>
    bb0a:	461a      	mov	r2, r3
    bb0c:	46a4      	mov	ip, r4
    bb0e:	e7e0      	b.n	bad2 <memset+0x66>

0000bb10 <strncmp>:
    bb10:	2a00      	cmp	r2, #0
    bb12:	d03e      	beq.n	bb92 <strncmp+0x82>
    bb14:	ea40 0301 	orr.w	r3, r0, r1
    bb18:	079b      	lsls	r3, r3, #30
    bb1a:	b530      	push	{r4, r5, lr}
    bb1c:	4684      	mov	ip, r0
    bb1e:	d12f      	bne.n	bb80 <strncmp+0x70>
    bb20:	2a03      	cmp	r2, #3
    bb22:	d92d      	bls.n	bb80 <strncmp+0x70>
    bb24:	460b      	mov	r3, r1
    bb26:	e008      	b.n	bb3a <strncmp+0x2a>
    bb28:	3a04      	subs	r2, #4
    bb2a:	4684      	mov	ip, r0
    bb2c:	4619      	mov	r1, r3
    bb2e:	d025      	beq.n	bb7c <strncmp+0x6c>
    bb30:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    bb34:	d122      	bne.n	bb7c <strncmp+0x6c>
    bb36:	2a03      	cmp	r2, #3
    bb38:	d922      	bls.n	bb80 <strncmp+0x70>
    bb3a:	6804      	ldr	r4, [r0, #0]
    bb3c:	4619      	mov	r1, r3
    bb3e:	f853 5b04 	ldr.w	r5, [r3], #4
    bb42:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    bb46:	42ac      	cmp	r4, r5
    bb48:	4684      	mov	ip, r0
    bb4a:	ea2e 0e04 	bic.w	lr, lr, r4
    bb4e:	f100 0004 	add.w	r0, r0, #4
    bb52:	d0e9      	beq.n	bb28 <strncmp+0x18>
    bb54:	f89c 0000 	ldrb.w	r0, [ip]
    bb58:	780c      	ldrb	r4, [r1, #0]
    bb5a:	42a0      	cmp	r0, r4
    bb5c:	d11b      	bne.n	bb96 <strncmp+0x86>
    bb5e:	46e6      	mov	lr, ip
    bb60:	b168      	cbz	r0, bb7e <strncmp+0x6e>
    bb62:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    bb66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb6a:	eba2 030e 	sub.w	r3, r2, lr
    bb6e:	42a0      	cmp	r0, r4
    bb70:	f103 33ff 	add.w	r3, r3, #4294967295
    bb74:	d10f      	bne.n	bb96 <strncmp+0x86>
    bb76:	eb1c 0303 	adds.w	r3, ip, r3
    bb7a:	d1f1      	bne.n	bb60 <strncmp+0x50>
    bb7c:	2000      	movs	r0, #0
    bb7e:	bd30      	pop	{r4, r5, pc}
    bb80:	f89c 0000 	ldrb.w	r0, [ip]
    bb84:	780c      	ldrb	r4, [r1, #0]
    bb86:	4284      	cmp	r4, r0
    bb88:	d105      	bne.n	bb96 <strncmp+0x86>
    bb8a:	2a01      	cmp	r2, #1
    bb8c:	d0f6      	beq.n	bb7c <strncmp+0x6c>
    bb8e:	46e6      	mov	lr, ip
    bb90:	e7e6      	b.n	bb60 <strncmp+0x50>
    bb92:	4610      	mov	r0, r2
    bb94:	4770      	bx	lr
    bb96:	1b00      	subs	r0, r0, r4
    bb98:	bd30      	pop	{r4, r5, pc}
    bb9a:	bf00      	nop

0000bb9c <strncpy>:
    bb9c:	ea40 0301 	orr.w	r3, r0, r1
    bba0:	079b      	lsls	r3, r3, #30
    bba2:	b530      	push	{r4, r5, lr}
    bba4:	d101      	bne.n	bbaa <strncpy+0xe>
    bba6:	2a03      	cmp	r2, #3
    bba8:	d80f      	bhi.n	bbca <strncpy+0x2e>
    bbaa:	4684      	mov	ip, r0
    bbac:	f101 3eff 	add.w	lr, r1, #4294967295
    bbb0:	e007      	b.n	bbc2 <strncpy+0x26>
    bbb2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bbb6:	f803 1b01 	strb.w	r1, [r3], #1
    bbba:	1e54      	subs	r4, r2, #1
    bbbc:	b1c1      	cbz	r1, bbf0 <strncpy+0x54>
    bbbe:	469c      	mov	ip, r3
    bbc0:	4622      	mov	r2, r4
    bbc2:	4663      	mov	r3, ip
    bbc4:	2a00      	cmp	r2, #0
    bbc6:	d1f4      	bne.n	bbb2 <strncpy+0x16>
    bbc8:	bd30      	pop	{r4, r5, pc}
    bbca:	460b      	mov	r3, r1
    bbcc:	4684      	mov	ip, r0
    bbce:	4619      	mov	r1, r3
    bbd0:	f853 5b04 	ldr.w	r5, [r3], #4
    bbd4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bbd8:	ea24 0405 	bic.w	r4, r4, r5
    bbdc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bbe0:	d1e4      	bne.n	bbac <strncpy+0x10>
    bbe2:	3a04      	subs	r2, #4
    bbe4:	2a03      	cmp	r2, #3
    bbe6:	f84c 5b04 	str.w	r5, [ip], #4
    bbea:	4619      	mov	r1, r3
    bbec:	d8ef      	bhi.n	bbce <strncpy+0x32>
    bbee:	e7dd      	b.n	bbac <strncpy+0x10>
    bbf0:	4494      	add	ip, r2
    bbf2:	2c00      	cmp	r4, #0
    bbf4:	d0e8      	beq.n	bbc8 <strncpy+0x2c>
    bbf6:	f803 1b01 	strb.w	r1, [r3], #1
    bbfa:	4563      	cmp	r3, ip
    bbfc:	d1fb      	bne.n	bbf6 <strncpy+0x5a>
    bbfe:	bd30      	pop	{r4, r5, pc}

0000bc00 <__locale_mb_cur_max>:
    bc00:	4b01      	ldr	r3, [pc, #4]	; (bc08 <__locale_mb_cur_max+0x8>)
    bc02:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bc06:	4770      	bx	lr
    bc08:	200085f4 	.word	0x200085f4

0000bc0c <_close_r>:
    bc0c:	b538      	push	{r3, r4, r5, lr}
    bc0e:	4d07      	ldr	r5, [pc, #28]	; (bc2c <_close_r+0x20>)
    bc10:	2200      	movs	r2, #0
    bc12:	4604      	mov	r4, r0
    bc14:	4608      	mov	r0, r1
    bc16:	602a      	str	r2, [r5, #0]
    bc18:	f7fc fc3c 	bl	8494 <_close>
    bc1c:	1c43      	adds	r3, r0, #1
    bc1e:	d000      	beq.n	bc22 <_close_r+0x16>
    bc20:	bd38      	pop	{r3, r4, r5, pc}
    bc22:	682b      	ldr	r3, [r5, #0]
    bc24:	2b00      	cmp	r3, #0
    bc26:	d0fb      	beq.n	bc20 <_close_r+0x14>
    bc28:	6023      	str	r3, [r4, #0]
    bc2a:	bd38      	pop	{r3, r4, r5, pc}
    bc2c:	20028e3c 	.word	0x20028e3c

0000bc30 <_lseek_r>:
    bc30:	b538      	push	{r3, r4, r5, lr}
    bc32:	460c      	mov	r4, r1
    bc34:	4d08      	ldr	r5, [pc, #32]	; (bc58 <_lseek_r+0x28>)
    bc36:	4684      	mov	ip, r0
    bc38:	4611      	mov	r1, r2
    bc3a:	4620      	mov	r0, r4
    bc3c:	461a      	mov	r2, r3
    bc3e:	2300      	movs	r3, #0
    bc40:	602b      	str	r3, [r5, #0]
    bc42:	4664      	mov	r4, ip
    bc44:	f7fc fc32 	bl	84ac <_lseek>
    bc48:	1c43      	adds	r3, r0, #1
    bc4a:	d000      	beq.n	bc4e <_lseek_r+0x1e>
    bc4c:	bd38      	pop	{r3, r4, r5, pc}
    bc4e:	682b      	ldr	r3, [r5, #0]
    bc50:	2b00      	cmp	r3, #0
    bc52:	d0fb      	beq.n	bc4c <_lseek_r+0x1c>
    bc54:	6023      	str	r3, [r4, #0]
    bc56:	bd38      	pop	{r3, r4, r5, pc}
    bc58:	20028e3c 	.word	0x20028e3c

0000bc5c <_read_r>:
    bc5c:	b538      	push	{r3, r4, r5, lr}
    bc5e:	460c      	mov	r4, r1
    bc60:	4d08      	ldr	r5, [pc, #32]	; (bc84 <_read_r+0x28>)
    bc62:	4684      	mov	ip, r0
    bc64:	4611      	mov	r1, r2
    bc66:	4620      	mov	r0, r4
    bc68:	461a      	mov	r2, r3
    bc6a:	2300      	movs	r3, #0
    bc6c:	602b      	str	r3, [r5, #0]
    bc6e:	4664      	mov	r4, ip
    bc70:	f7fc fc0e 	bl	8490 <_read>
    bc74:	1c43      	adds	r3, r0, #1
    bc76:	d000      	beq.n	bc7a <_read_r+0x1e>
    bc78:	bd38      	pop	{r3, r4, r5, pc}
    bc7a:	682b      	ldr	r3, [r5, #0]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d0fb      	beq.n	bc78 <_read_r+0x1c>
    bc80:	6023      	str	r3, [r4, #0]
    bc82:	bd38      	pop	{r3, r4, r5, pc}
    bc84:	20028e3c 	.word	0x20028e3c

0000bc88 <_sbrk_r>:
    bc88:	b538      	push	{r3, r4, r5, lr}
    bc8a:	4d07      	ldr	r5, [pc, #28]	; (bca8 <_sbrk_r+0x20>)
    bc8c:	2200      	movs	r2, #0
    bc8e:	4604      	mov	r4, r0
    bc90:	4608      	mov	r0, r1
    bc92:	602a      	str	r2, [r5, #0]
    bc94:	f7fc fbe2 	bl	845c <_sbrk>
    bc98:	1c43      	adds	r3, r0, #1
    bc9a:	d000      	beq.n	bc9e <_sbrk_r+0x16>
    bc9c:	bd38      	pop	{r3, r4, r5, pc}
    bc9e:	682b      	ldr	r3, [r5, #0]
    bca0:	2b00      	cmp	r3, #0
    bca2:	d0fb      	beq.n	bc9c <_sbrk_r+0x14>
    bca4:	6023      	str	r3, [r4, #0]
    bca6:	bd38      	pop	{r3, r4, r5, pc}
    bca8:	20028e3c 	.word	0x20028e3c

0000bcac <_write_r>:
    bcac:	b538      	push	{r3, r4, r5, lr}
    bcae:	460c      	mov	r4, r1
    bcb0:	4d08      	ldr	r5, [pc, #32]	; (bcd4 <_write_r+0x28>)
    bcb2:	4684      	mov	ip, r0
    bcb4:	4611      	mov	r1, r2
    bcb6:	4620      	mov	r0, r4
    bcb8:	461a      	mov	r2, r3
    bcba:	2300      	movs	r3, #0
    bcbc:	602b      	str	r3, [r5, #0]
    bcbe:	4664      	mov	r4, ip
    bcc0:	f7fb fe7e 	bl	79c0 <_write>
    bcc4:	1c43      	adds	r3, r0, #1
    bcc6:	d000      	beq.n	bcca <_write_r+0x1e>
    bcc8:	bd38      	pop	{r3, r4, r5, pc}
    bcca:	682b      	ldr	r3, [r5, #0]
    bccc:	2b00      	cmp	r3, #0
    bcce:	d0fb      	beq.n	bcc8 <_write_r+0x1c>
    bcd0:	6023      	str	r3, [r4, #0]
    bcd2:	bd38      	pop	{r3, r4, r5, pc}
    bcd4:	20028e3c 	.word	0x20028e3c

0000bcd8 <__errno>:
    bcd8:	4b01      	ldr	r3, [pc, #4]	; (bce0 <__errno+0x8>)
    bcda:	6818      	ldr	r0, [r3, #0]
    bcdc:	4770      	bx	lr
    bcde:	bf00      	nop
    bce0:	20008b7c 	.word	0x20008b7c

0000bce4 <__libc_init_array>:
    bce4:	b570      	push	{r4, r5, r6, lr}
    bce6:	4e0d      	ldr	r6, [pc, #52]	; (bd1c <__libc_init_array+0x38>)
    bce8:	4d0d      	ldr	r5, [pc, #52]	; (bd20 <__libc_init_array+0x3c>)
    bcea:	1b76      	subs	r6, r6, r5
    bcec:	10b6      	asrs	r6, r6, #2
    bcee:	d006      	beq.n	bcfe <__libc_init_array+0x1a>
    bcf0:	2400      	movs	r4, #0
    bcf2:	f855 3b04 	ldr.w	r3, [r5], #4
    bcf6:	3401      	adds	r4, #1
    bcf8:	4798      	blx	r3
    bcfa:	42a6      	cmp	r6, r4
    bcfc:	d1f9      	bne.n	bcf2 <__libc_init_array+0xe>
    bcfe:	4e09      	ldr	r6, [pc, #36]	; (bd24 <__libc_init_array+0x40>)
    bd00:	4d09      	ldr	r5, [pc, #36]	; (bd28 <__libc_init_array+0x44>)
    bd02:	1b76      	subs	r6, r6, r5
    bd04:	f008 fc20 	bl	14548 <___init_veneer>
    bd08:	10b6      	asrs	r6, r6, #2
    bd0a:	d006      	beq.n	bd1a <__libc_init_array+0x36>
    bd0c:	2400      	movs	r4, #0
    bd0e:	f855 3b04 	ldr.w	r3, [r5], #4
    bd12:	3401      	adds	r4, #1
    bd14:	4798      	blx	r3
    bd16:	42a6      	cmp	r6, r4
    bd18:	d1f9      	bne.n	bd0e <__libc_init_array+0x2a>
    bd1a:	bd70      	pop	{r4, r5, r6, pc}
    bd1c:	60002660 	.word	0x60002660
    bd20:	60002660 	.word	0x60002660
    bd24:	60002674 	.word	0x60002674
    bd28:	60002660 	.word	0x60002660

0000bd2c <__retarget_lock_init_recursive>:
    bd2c:	4770      	bx	lr
    bd2e:	bf00      	nop

0000bd30 <__retarget_lock_close_recursive>:
    bd30:	4770      	bx	lr
    bd32:	bf00      	nop

0000bd34 <__retarget_lock_acquire_recursive>:
    bd34:	4770      	bx	lr
    bd36:	bf00      	nop

0000bd38 <__retarget_lock_release_recursive>:
    bd38:	4770      	bx	lr
    bd3a:	bf00      	nop
    bd3c:	0000      	movs	r0, r0
    bd3e:	0000      	movs	r0, r0
    bd40:	eba2 0003 	sub.w	r0, r2, r3
    bd44:	4770      	bx	lr
    bd46:	bf00      	nop

0000bd48 <strcmp>:
    bd48:	7802      	ldrb	r2, [r0, #0]
    bd4a:	780b      	ldrb	r3, [r1, #0]
    bd4c:	2a01      	cmp	r2, #1
    bd4e:	bf28      	it	cs
    bd50:	429a      	cmpcs	r2, r3
    bd52:	d1f5      	bne.n	bd40 <__retarget_lock_release_recursive+0x8>
    bd54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bd58:	ea40 0401 	orr.w	r4, r0, r1
    bd5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bd60:	f06f 0c00 	mvn.w	ip, #0
    bd64:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bd68:	b312      	cbz	r2, bdb0 <strcmp+0x68>
    bd6a:	ea80 0401 	eor.w	r4, r0, r1
    bd6e:	f014 0f07 	tst.w	r4, #7
    bd72:	d16a      	bne.n	be4a <strcmp+0x102>
    bd74:	f000 0407 	and.w	r4, r0, #7
    bd78:	f020 0007 	bic.w	r0, r0, #7
    bd7c:	f004 0503 	and.w	r5, r4, #3
    bd80:	f021 0107 	bic.w	r1, r1, #7
    bd84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bd88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bd8c:	f014 0f04 	tst.w	r4, #4
    bd90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bd94:	fa0c f405 	lsl.w	r4, ip, r5
    bd98:	ea62 0204 	orn	r2, r2, r4
    bd9c:	ea66 0604 	orn	r6, r6, r4
    bda0:	d00a      	beq.n	bdb8 <strcmp+0x70>
    bda2:	ea63 0304 	orn	r3, r3, r4
    bda6:	4662      	mov	r2, ip
    bda8:	ea67 0704 	orn	r7, r7, r4
    bdac:	4666      	mov	r6, ip
    bdae:	e003      	b.n	bdb8 <strcmp+0x70>
    bdb0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bdb4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bdb8:	fa82 f54c 	uadd8	r5, r2, ip
    bdbc:	ea82 0406 	eor.w	r4, r2, r6
    bdc0:	faa4 f48c 	sel	r4, r4, ip
    bdc4:	bb6c      	cbnz	r4, be22 <strcmp+0xda>
    bdc6:	fa83 f54c 	uadd8	r5, r3, ip
    bdca:	ea83 0507 	eor.w	r5, r3, r7
    bdce:	faa5 f58c 	sel	r5, r5, ip
    bdd2:	b995      	cbnz	r5, bdfa <strcmp+0xb2>
    bdd4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bdd8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bddc:	fa82 f54c 	uadd8	r5, r2, ip
    bde0:	ea82 0406 	eor.w	r4, r2, r6
    bde4:	faa4 f48c 	sel	r4, r4, ip
    bde8:	fa83 f54c 	uadd8	r5, r3, ip
    bdec:	ea83 0507 	eor.w	r5, r3, r7
    bdf0:	faa5 f58c 	sel	r5, r5, ip
    bdf4:	4325      	orrs	r5, r4
    bdf6:	d0db      	beq.n	bdb0 <strcmp+0x68>
    bdf8:	b99c      	cbnz	r4, be22 <strcmp+0xda>
    bdfa:	ba2d      	rev	r5, r5
    bdfc:	fab5 f485 	clz	r4, r5
    be00:	f024 0407 	bic.w	r4, r4, #7
    be04:	fa27 f104 	lsr.w	r1, r7, r4
    be08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    be0c:	fa23 f304 	lsr.w	r3, r3, r4
    be10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    be14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be1c:	eba0 0001 	sub.w	r0, r0, r1
    be20:	4770      	bx	lr
    be22:	ba24      	rev	r4, r4
    be24:	fab4 f484 	clz	r4, r4
    be28:	f024 0407 	bic.w	r4, r4, #7
    be2c:	fa26 f104 	lsr.w	r1, r6, r4
    be30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    be34:	fa22 f204 	lsr.w	r2, r2, r4
    be38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    be3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    be44:	eba0 0001 	sub.w	r0, r0, r1
    be48:	4770      	bx	lr
    be4a:	f014 0f03 	tst.w	r4, #3
    be4e:	d13c      	bne.n	beca <strcmp+0x182>
    be50:	f010 0403 	ands.w	r4, r0, #3
    be54:	d128      	bne.n	bea8 <strcmp+0x160>
    be56:	f850 2b08 	ldr.w	r2, [r0], #8
    be5a:	f851 3b08 	ldr.w	r3, [r1], #8
    be5e:	fa82 f54c 	uadd8	r5, r2, ip
    be62:	ea82 0503 	eor.w	r5, r2, r3
    be66:	faa5 f58c 	sel	r5, r5, ip
    be6a:	b95d      	cbnz	r5, be84 <strcmp+0x13c>
    be6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    be70:	f851 3c04 	ldr.w	r3, [r1, #-4]
    be74:	fa82 f54c 	uadd8	r5, r2, ip
    be78:	ea82 0503 	eor.w	r5, r2, r3
    be7c:	faa5 f58c 	sel	r5, r5, ip
    be80:	2d00      	cmp	r5, #0
    be82:	d0e8      	beq.n	be56 <strcmp+0x10e>
    be84:	ba2d      	rev	r5, r5
    be86:	fab5 f485 	clz	r4, r5
    be8a:	f024 0407 	bic.w	r4, r4, #7
    be8e:	fa23 f104 	lsr.w	r1, r3, r4
    be92:	fa22 f204 	lsr.w	r2, r2, r4
    be96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    be9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bea2:	eba0 0001 	sub.w	r0, r0, r1
    bea6:	4770      	bx	lr
    bea8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    beac:	f020 0003 	bic.w	r0, r0, #3
    beb0:	f850 2b08 	ldr.w	r2, [r0], #8
    beb4:	f021 0103 	bic.w	r1, r1, #3
    beb8:	f851 3b08 	ldr.w	r3, [r1], #8
    bebc:	fa0c f404 	lsl.w	r4, ip, r4
    bec0:	ea62 0204 	orn	r2, r2, r4
    bec4:	ea63 0304 	orn	r3, r3, r4
    bec8:	e7c9      	b.n	be5e <strcmp+0x116>
    beca:	f010 0403 	ands.w	r4, r0, #3
    bece:	d01a      	beq.n	bf06 <strcmp+0x1be>
    bed0:	eba1 0104 	sub.w	r1, r1, r4
    bed4:	f020 0003 	bic.w	r0, r0, #3
    bed8:	07e4      	lsls	r4, r4, #31
    beda:	f850 2b04 	ldr.w	r2, [r0], #4
    bede:	d006      	beq.n	beee <strcmp+0x1a6>
    bee0:	d20f      	bcs.n	bf02 <strcmp+0x1ba>
    bee2:	788b      	ldrb	r3, [r1, #2]
    bee4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    bee8:	1ae4      	subs	r4, r4, r3
    beea:	d106      	bne.n	befa <strcmp+0x1b2>
    beec:	b12b      	cbz	r3, befa <strcmp+0x1b2>
    beee:	78cb      	ldrb	r3, [r1, #3]
    bef0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    bef4:	1ae4      	subs	r4, r4, r3
    bef6:	d100      	bne.n	befa <strcmp+0x1b2>
    bef8:	b91b      	cbnz	r3, bf02 <strcmp+0x1ba>
    befa:	4620      	mov	r0, r4
    befc:	f85d 4b10 	ldr.w	r4, [sp], #16
    bf00:	4770      	bx	lr
    bf02:	f101 0104 	add.w	r1, r1, #4
    bf06:	f850 2b04 	ldr.w	r2, [r0], #4
    bf0a:	07cc      	lsls	r4, r1, #31
    bf0c:	f021 0103 	bic.w	r1, r1, #3
    bf10:	f851 3b04 	ldr.w	r3, [r1], #4
    bf14:	d848      	bhi.n	bfa8 <strcmp+0x260>
    bf16:	d224      	bcs.n	bf62 <strcmp+0x21a>
    bf18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    bf1c:	fa82 f54c 	uadd8	r5, r2, ip
    bf20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    bf24:	faa5 f58c 	sel	r5, r5, ip
    bf28:	d10a      	bne.n	bf40 <strcmp+0x1f8>
    bf2a:	b965      	cbnz	r5, bf46 <strcmp+0x1fe>
    bf2c:	f851 3b04 	ldr.w	r3, [r1], #4
    bf30:	ea84 0402 	eor.w	r4, r4, r2
    bf34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    bf38:	d10e      	bne.n	bf58 <strcmp+0x210>
    bf3a:	f850 2b04 	ldr.w	r2, [r0], #4
    bf3e:	e7eb      	b.n	bf18 <strcmp+0x1d0>
    bf40:	ea4f 2313 	mov.w	r3, r3, lsr #8
    bf44:	e055      	b.n	bff2 <strcmp+0x2aa>
    bf46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    bf4a:	d14d      	bne.n	bfe8 <strcmp+0x2a0>
    bf4c:	7808      	ldrb	r0, [r1, #0]
    bf4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bf52:	f1c0 0000 	rsb	r0, r0, #0
    bf56:	4770      	bx	lr
    bf58:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bf5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bf60:	e047      	b.n	bff2 <strcmp+0x2aa>
    bf62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bf66:	fa82 f54c 	uadd8	r5, r2, ip
    bf6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    bf6e:	faa5 f58c 	sel	r5, r5, ip
    bf72:	d10a      	bne.n	bf8a <strcmp+0x242>
    bf74:	b965      	cbnz	r5, bf90 <strcmp+0x248>
    bf76:	f851 3b04 	ldr.w	r3, [r1], #4
    bf7a:	ea84 0402 	eor.w	r4, r4, r2
    bf7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bf82:	d10c      	bne.n	bf9e <strcmp+0x256>
    bf84:	f850 2b04 	ldr.w	r2, [r0], #4
    bf88:	e7eb      	b.n	bf62 <strcmp+0x21a>
    bf8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bf8e:	e030      	b.n	bff2 <strcmp+0x2aa>
    bf90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bf94:	d128      	bne.n	bfe8 <strcmp+0x2a0>
    bf96:	880b      	ldrh	r3, [r1, #0]
    bf98:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bf9c:	e029      	b.n	bff2 <strcmp+0x2aa>
    bf9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bfa2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bfa6:	e024      	b.n	bff2 <strcmp+0x2aa>
    bfa8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    bfac:	fa82 f54c 	uadd8	r5, r2, ip
    bfb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bfb4:	faa5 f58c 	sel	r5, r5, ip
    bfb8:	d10a      	bne.n	bfd0 <strcmp+0x288>
    bfba:	b965      	cbnz	r5, bfd6 <strcmp+0x28e>
    bfbc:	f851 3b04 	ldr.w	r3, [r1], #4
    bfc0:	ea84 0402 	eor.w	r4, r4, r2
    bfc4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bfc8:	d109      	bne.n	bfde <strcmp+0x296>
    bfca:	f850 2b04 	ldr.w	r2, [r0], #4
    bfce:	e7eb      	b.n	bfa8 <strcmp+0x260>
    bfd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    bfd4:	e00d      	b.n	bff2 <strcmp+0x2aa>
    bfd6:	f015 0fff 	tst.w	r5, #255	; 0xff
    bfda:	d105      	bne.n	bfe8 <strcmp+0x2a0>
    bfdc:	680b      	ldr	r3, [r1, #0]
    bfde:	ea4f 2212 	mov.w	r2, r2, lsr #8
    bfe2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bfe6:	e004      	b.n	bff2 <strcmp+0x2aa>
    bfe8:	f04f 0000 	mov.w	r0, #0
    bfec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bff0:	4770      	bx	lr
    bff2:	ba12      	rev	r2, r2
    bff4:	ba1b      	rev	r3, r3
    bff6:	fa82 f44c 	uadd8	r4, r2, ip
    bffa:	ea82 0403 	eor.w	r4, r2, r3
    bffe:	faa4 f58c 	sel	r5, r4, ip
    c002:	fab5 f485 	clz	r4, r5
    c006:	fa02 f204 	lsl.w	r2, r2, r4
    c00a:	fa03 f304 	lsl.w	r3, r3, r4
    c00e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    c012:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c016:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    c01a:	4770      	bx	lr

0000c01c <strcpy>:
    c01c:	ea80 0201 	eor.w	r2, r0, r1
    c020:	4684      	mov	ip, r0
    c022:	f012 0f03 	tst.w	r2, #3
    c026:	d14f      	bne.n	c0c8 <strcpy+0xac>
    c028:	f011 0f03 	tst.w	r1, #3
    c02c:	d132      	bne.n	c094 <strcpy+0x78>
    c02e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    c032:	f011 0f04 	tst.w	r1, #4
    c036:	f851 3b04 	ldr.w	r3, [r1], #4
    c03a:	d00b      	beq.n	c054 <strcpy+0x38>
    c03c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c040:	439a      	bics	r2, r3
    c042:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c046:	bf04      	itt	eq
    c048:	f84c 3b04 	streq.w	r3, [ip], #4
    c04c:	f851 3b04 	ldreq.w	r3, [r1], #4
    c050:	d116      	bne.n	c080 <strcpy+0x64>
    c052:	bf00      	nop
    c054:	f851 4b04 	ldr.w	r4, [r1], #4
    c058:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c05c:	439a      	bics	r2, r3
    c05e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c062:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c066:	d10b      	bne.n	c080 <strcpy+0x64>
    c068:	f84c 3b04 	str.w	r3, [ip], #4
    c06c:	43a2      	bics	r2, r4
    c06e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c072:	bf04      	itt	eq
    c074:	f851 3b04 	ldreq.w	r3, [r1], #4
    c078:	f84c 4b04 	streq.w	r4, [ip], #4
    c07c:	d0ea      	beq.n	c054 <strcpy+0x38>
    c07e:	4623      	mov	r3, r4
    c080:	f80c 3b01 	strb.w	r3, [ip], #1
    c084:	f013 0fff 	tst.w	r3, #255	; 0xff
    c088:	ea4f 2333 	mov.w	r3, r3, ror #8
    c08c:	d1f8      	bne.n	c080 <strcpy+0x64>
    c08e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c092:	4770      	bx	lr
    c094:	f011 0f01 	tst.w	r1, #1
    c098:	d006      	beq.n	c0a8 <strcpy+0x8c>
    c09a:	f811 2b01 	ldrb.w	r2, [r1], #1
    c09e:	f80c 2b01 	strb.w	r2, [ip], #1
    c0a2:	2a00      	cmp	r2, #0
    c0a4:	bf08      	it	eq
    c0a6:	4770      	bxeq	lr
    c0a8:	f011 0f02 	tst.w	r1, #2
    c0ac:	d0bf      	beq.n	c02e <strcpy+0x12>
    c0ae:	f831 2b02 	ldrh.w	r2, [r1], #2
    c0b2:	f012 0fff 	tst.w	r2, #255	; 0xff
    c0b6:	bf16      	itet	ne
    c0b8:	f82c 2b02 	strhne.w	r2, [ip], #2
    c0bc:	f88c 2000 	strbeq.w	r2, [ip]
    c0c0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c0c4:	d1b3      	bne.n	c02e <strcpy+0x12>
    c0c6:	4770      	bx	lr
    c0c8:	f811 2b01 	ldrb.w	r2, [r1], #1
    c0cc:	f80c 2b01 	strb.w	r2, [ip], #1
    c0d0:	2a00      	cmp	r2, #0
    c0d2:	d1f9      	bne.n	c0c8 <strcpy+0xac>
    c0d4:	4770      	bx	lr
    c0d6:	bf00      	nop
	...

0000c0e0 <memchr>:
    c0e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c0e4:	2a10      	cmp	r2, #16
    c0e6:	db2b      	blt.n	c140 <memchr+0x60>
    c0e8:	f010 0f07 	tst.w	r0, #7
    c0ec:	d008      	beq.n	c100 <memchr+0x20>
    c0ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    c0f2:	3a01      	subs	r2, #1
    c0f4:	428b      	cmp	r3, r1
    c0f6:	d02d      	beq.n	c154 <memchr+0x74>
    c0f8:	f010 0f07 	tst.w	r0, #7
    c0fc:	b342      	cbz	r2, c150 <memchr+0x70>
    c0fe:	d1f6      	bne.n	c0ee <memchr+0xe>
    c100:	b4f0      	push	{r4, r5, r6, r7}
    c102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c10a:	f022 0407 	bic.w	r4, r2, #7
    c10e:	f07f 0700 	mvns.w	r7, #0
    c112:	2300      	movs	r3, #0
    c114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    c118:	3c08      	subs	r4, #8
    c11a:	ea85 0501 	eor.w	r5, r5, r1
    c11e:	ea86 0601 	eor.w	r6, r6, r1
    c122:	fa85 f547 	uadd8	r5, r5, r7
    c126:	faa3 f587 	sel	r5, r3, r7
    c12a:	fa86 f647 	uadd8	r6, r6, r7
    c12e:	faa5 f687 	sel	r6, r5, r7
    c132:	b98e      	cbnz	r6, c158 <memchr+0x78>
    c134:	d1ee      	bne.n	c114 <memchr+0x34>
    c136:	bcf0      	pop	{r4, r5, r6, r7}
    c138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c13c:	f002 0207 	and.w	r2, r2, #7
    c140:	b132      	cbz	r2, c150 <memchr+0x70>
    c142:	f810 3b01 	ldrb.w	r3, [r0], #1
    c146:	3a01      	subs	r2, #1
    c148:	ea83 0301 	eor.w	r3, r3, r1
    c14c:	b113      	cbz	r3, c154 <memchr+0x74>
    c14e:	d1f8      	bne.n	c142 <memchr+0x62>
    c150:	2000      	movs	r0, #0
    c152:	4770      	bx	lr
    c154:	3801      	subs	r0, #1
    c156:	4770      	bx	lr
    c158:	2d00      	cmp	r5, #0
    c15a:	bf06      	itte	eq
    c15c:	4635      	moveq	r5, r6
    c15e:	3803      	subeq	r0, #3
    c160:	3807      	subne	r0, #7
    c162:	f015 0f01 	tst.w	r5, #1
    c166:	d107      	bne.n	c178 <memchr+0x98>
    c168:	3001      	adds	r0, #1
    c16a:	f415 7f80 	tst.w	r5, #256	; 0x100
    c16e:	bf02      	ittt	eq
    c170:	3001      	addeq	r0, #1
    c172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    c176:	3001      	addeq	r0, #1
    c178:	bcf0      	pop	{r4, r5, r6, r7}
    c17a:	3801      	subs	r0, #1
    c17c:	4770      	bx	lr
    c17e:	bf00      	nop

0000c180 <strlen>:
    c180:	f890 f000 	pld	[r0]
    c184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c188:	f020 0107 	bic.w	r1, r0, #7
    c18c:	f06f 0c00 	mvn.w	ip, #0
    c190:	f010 0407 	ands.w	r4, r0, #7
    c194:	f891 f020 	pld	[r1, #32]
    c198:	f040 8049 	bne.w	c22e <strlen+0xae>
    c19c:	f04f 0400 	mov.w	r4, #0
    c1a0:	f06f 0007 	mvn.w	r0, #7
    c1a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    c1a8:	f891 f040 	pld	[r1, #64]	; 0x40
    c1ac:	f100 0008 	add.w	r0, r0, #8
    c1b0:	fa82 f24c 	uadd8	r2, r2, ip
    c1b4:	faa4 f28c 	sel	r2, r4, ip
    c1b8:	fa83 f34c 	uadd8	r3, r3, ip
    c1bc:	faa2 f38c 	sel	r3, r2, ip
    c1c0:	bb4b      	cbnz	r3, c216 <strlen+0x96>
    c1c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c1c6:	fa82 f24c 	uadd8	r2, r2, ip
    c1ca:	f100 0008 	add.w	r0, r0, #8
    c1ce:	faa4 f28c 	sel	r2, r4, ip
    c1d2:	fa83 f34c 	uadd8	r3, r3, ip
    c1d6:	faa2 f38c 	sel	r3, r2, ip
    c1da:	b9e3      	cbnz	r3, c216 <strlen+0x96>
    c1dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c1e0:	fa82 f24c 	uadd8	r2, r2, ip
    c1e4:	f100 0008 	add.w	r0, r0, #8
    c1e8:	faa4 f28c 	sel	r2, r4, ip
    c1ec:	fa83 f34c 	uadd8	r3, r3, ip
    c1f0:	faa2 f38c 	sel	r3, r2, ip
    c1f4:	b97b      	cbnz	r3, c216 <strlen+0x96>
    c1f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c1fa:	f101 0120 	add.w	r1, r1, #32
    c1fe:	fa82 f24c 	uadd8	r2, r2, ip
    c202:	f100 0008 	add.w	r0, r0, #8
    c206:	faa4 f28c 	sel	r2, r4, ip
    c20a:	fa83 f34c 	uadd8	r3, r3, ip
    c20e:	faa2 f38c 	sel	r3, r2, ip
    c212:	2b00      	cmp	r3, #0
    c214:	d0c6      	beq.n	c1a4 <strlen+0x24>
    c216:	2a00      	cmp	r2, #0
    c218:	bf04      	itt	eq
    c21a:	3004      	addeq	r0, #4
    c21c:	461a      	moveq	r2, r3
    c21e:	ba12      	rev	r2, r2
    c220:	fab2 f282 	clz	r2, r2
    c224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c22c:	4770      	bx	lr
    c22e:	e9d1 2300 	ldrd	r2, r3, [r1]
    c232:	f004 0503 	and.w	r5, r4, #3
    c236:	f1c4 0000 	rsb	r0, r4, #0
    c23a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c23e:	f014 0f04 	tst.w	r4, #4
    c242:	f891 f040 	pld	[r1, #64]	; 0x40
    c246:	fa0c f505 	lsl.w	r5, ip, r5
    c24a:	ea62 0205 	orn	r2, r2, r5
    c24e:	bf1c      	itt	ne
    c250:	ea63 0305 	ornne	r3, r3, r5
    c254:	4662      	movne	r2, ip
    c256:	f04f 0400 	mov.w	r4, #0
    c25a:	e7a9      	b.n	c1b0 <strlen+0x30>
    c25c:	0000      	movs	r0, r0
	...

0000c260 <nan>:
    c260:	ed9f 0b01 	vldr	d0, [pc, #4]	; c268 <nan+0x8>
    c264:	4770      	bx	lr
    c266:	bf00      	nop
    c268:	00000000 	.word	0x00000000
    c26c:	7ff80000 	.word	0x7ff80000

0000c270 <nanf>:
    c270:	ed9f 0a01 	vldr	s0, [pc, #4]	; c278 <nanf+0x8>
    c274:	4770      	bx	lr
    c276:	bf00      	nop
    c278:	7fc00000 	.word	0x7fc00000

0000c27c <__register_exitproc>:
    c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c280:	f8df a07c 	ldr.w	sl, [pc, #124]	; c300 <__register_exitproc+0x84>
    c284:	4606      	mov	r6, r0
    c286:	f8da 0000 	ldr.w	r0, [sl]
    c28a:	4698      	mov	r8, r3
    c28c:	460f      	mov	r7, r1
    c28e:	4691      	mov	r9, r2
    c290:	f7ff fd50 	bl	bd34 <__retarget_lock_acquire_recursive>
    c294:	4b18      	ldr	r3, [pc, #96]	; (c2f8 <__register_exitproc+0x7c>)
    c296:	681c      	ldr	r4, [r3, #0]
    c298:	b324      	cbz	r4, c2e4 <__register_exitproc+0x68>
    c29a:	6865      	ldr	r5, [r4, #4]
    c29c:	2d1f      	cmp	r5, #31
    c29e:	dc24      	bgt.n	c2ea <__register_exitproc+0x6e>
    c2a0:	b95e      	cbnz	r6, c2ba <__register_exitproc+0x3e>
    c2a2:	1c6b      	adds	r3, r5, #1
    c2a4:	3502      	adds	r5, #2
    c2a6:	f8da 0000 	ldr.w	r0, [sl]
    c2aa:	6063      	str	r3, [r4, #4]
    c2ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c2b0:	f7ff fd42 	bl	bd38 <__retarget_lock_release_recursive>
    c2b4:	2000      	movs	r0, #0
    c2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c2be:	2301      	movs	r3, #1
    c2c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c2c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c2c8:	40ab      	lsls	r3, r5
    c2ca:	431a      	orrs	r2, r3
    c2cc:	2e02      	cmp	r6, #2
    c2ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c2d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c2d6:	d1e4      	bne.n	c2a2 <__register_exitproc+0x26>
    c2d8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c2dc:	431a      	orrs	r2, r3
    c2de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c2e2:	e7de      	b.n	c2a2 <__register_exitproc+0x26>
    c2e4:	4c05      	ldr	r4, [pc, #20]	; (c2fc <__register_exitproc+0x80>)
    c2e6:	601c      	str	r4, [r3, #0]
    c2e8:	e7d7      	b.n	c29a <__register_exitproc+0x1e>
    c2ea:	f8da 0000 	ldr.w	r0, [sl]
    c2ee:	f7ff fd23 	bl	bd38 <__retarget_lock_release_recursive>
    c2f2:	f04f 30ff 	mov.w	r0, #4294967295
    c2f6:	e7de      	b.n	c2b6 <__register_exitproc+0x3a>
    c2f8:	20028914 	.word	0x20028914
    c2fc:	20028918 	.word	0x20028918
    c300:	200085e8 	.word	0x200085e8

0000c304 <_malloc_trim_r>:
    c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c306:	4f24      	ldr	r7, [pc, #144]	; (c398 <_malloc_trim_r+0x94>)
    c308:	460c      	mov	r4, r1
    c30a:	4606      	mov	r6, r0
    c30c:	f7fd ff36 	bl	a17c <__malloc_lock>
    c310:	68bb      	ldr	r3, [r7, #8]
    c312:	685d      	ldr	r5, [r3, #4]
    c314:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c318:	310f      	adds	r1, #15
    c31a:	f025 0503 	bic.w	r5, r5, #3
    c31e:	194b      	adds	r3, r1, r5
    c320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c324:	f023 030f 	bic.w	r3, r3, #15
    c328:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c32c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c330:	db07      	blt.n	c342 <_malloc_trim_r+0x3e>
    c332:	2100      	movs	r1, #0
    c334:	4630      	mov	r0, r6
    c336:	f7ff fca7 	bl	bc88 <_sbrk_r>
    c33a:	68bb      	ldr	r3, [r7, #8]
    c33c:	442b      	add	r3, r5
    c33e:	4298      	cmp	r0, r3
    c340:	d004      	beq.n	c34c <_malloc_trim_r+0x48>
    c342:	4630      	mov	r0, r6
    c344:	f7fd ff20 	bl	a188 <__malloc_unlock>
    c348:	2000      	movs	r0, #0
    c34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c34c:	4261      	negs	r1, r4
    c34e:	4630      	mov	r0, r6
    c350:	f7ff fc9a 	bl	bc88 <_sbrk_r>
    c354:	3001      	adds	r0, #1
    c356:	d00d      	beq.n	c374 <_malloc_trim_r+0x70>
    c358:	4a10      	ldr	r2, [pc, #64]	; (c39c <_malloc_trim_r+0x98>)
    c35a:	68bb      	ldr	r3, [r7, #8]
    c35c:	1b2d      	subs	r5, r5, r4
    c35e:	f045 0501 	orr.w	r5, r5, #1
    c362:	605d      	str	r5, [r3, #4]
    c364:	6813      	ldr	r3, [r2, #0]
    c366:	4630      	mov	r0, r6
    c368:	1b1b      	subs	r3, r3, r4
    c36a:	6013      	str	r3, [r2, #0]
    c36c:	f7fd ff0c 	bl	a188 <__malloc_unlock>
    c370:	2001      	movs	r0, #1
    c372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c374:	2100      	movs	r1, #0
    c376:	4630      	mov	r0, r6
    c378:	f7ff fc86 	bl	bc88 <_sbrk_r>
    c37c:	68ba      	ldr	r2, [r7, #8]
    c37e:	1a83      	subs	r3, r0, r2
    c380:	2b0f      	cmp	r3, #15
    c382:	ddde      	ble.n	c342 <_malloc_trim_r+0x3e>
    c384:	f043 0301 	orr.w	r3, r3, #1
    c388:	6053      	str	r3, [r2, #4]
    c38a:	4b05      	ldr	r3, [pc, #20]	; (c3a0 <_malloc_trim_r+0x9c>)
    c38c:	4903      	ldr	r1, [pc, #12]	; (c39c <_malloc_trim_r+0x98>)
    c38e:	681b      	ldr	r3, [r3, #0]
    c390:	1ac0      	subs	r0, r0, r3
    c392:	6008      	str	r0, [r1, #0]
    c394:	e7d5      	b.n	c342 <_malloc_trim_r+0x3e>
    c396:	bf00      	nop
    c398:	20008760 	.word	0x20008760
    c39c:	20028ab4 	.word	0x20028ab4
    c3a0:	20008b68 	.word	0x20008b68

0000c3a4 <_free_r>:
    c3a4:	2900      	cmp	r1, #0
    c3a6:	d061      	beq.n	c46c <_free_r+0xc8>
    c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3aa:	460c      	mov	r4, r1
    c3ac:	4606      	mov	r6, r0
    c3ae:	f7fd fee5 	bl	a17c <__malloc_lock>
    c3b2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c3b6:	4f7b      	ldr	r7, [pc, #492]	; (c5a4 <_free_r+0x200>)
    c3b8:	f1a4 0508 	sub.w	r5, r4, #8
    c3bc:	f022 0101 	bic.w	r1, r2, #1
    c3c0:	eb05 0c01 	add.w	ip, r5, r1
    c3c4:	68b8      	ldr	r0, [r7, #8]
    c3c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c3ca:	4560      	cmp	r0, ip
    c3cc:	f023 0303 	bic.w	r3, r3, #3
    c3d0:	f000 808b 	beq.w	c4ea <_free_r+0x146>
    c3d4:	07d2      	lsls	r2, r2, #31
    c3d6:	f8cc 3004 	str.w	r3, [ip, #4]
    c3da:	d432      	bmi.n	c442 <_free_r+0x9e>
    c3dc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c3e0:	1aad      	subs	r5, r5, r2
    c3e2:	4411      	add	r1, r2
    c3e4:	68aa      	ldr	r2, [r5, #8]
    c3e6:	f107 0008 	add.w	r0, r7, #8
    c3ea:	4282      	cmp	r2, r0
    c3ec:	d06a      	beq.n	c4c4 <_free_r+0x120>
    c3ee:	eb0c 0403 	add.w	r4, ip, r3
    c3f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c3f6:	68ec      	ldr	r4, [r5, #12]
    c3f8:	60d4      	str	r4, [r2, #12]
    c3fa:	f01e 0f01 	tst.w	lr, #1
    c3fe:	60a2      	str	r2, [r4, #8]
    c400:	f000 8097 	beq.w	c532 <_free_r+0x18e>
    c404:	f041 0301 	orr.w	r3, r1, #1
    c408:	606b      	str	r3, [r5, #4]
    c40a:	f8cc 1000 	str.w	r1, [ip]
    c40e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c412:	d235      	bcs.n	c480 <_free_r+0xdc>
    c414:	6878      	ldr	r0, [r7, #4]
    c416:	08cb      	lsrs	r3, r1, #3
    c418:	2201      	movs	r2, #1
    c41a:	0949      	lsrs	r1, r1, #5
    c41c:	3301      	adds	r3, #1
    c41e:	408a      	lsls	r2, r1
    c420:	4302      	orrs	r2, r0
    c422:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c426:	607a      	str	r2, [r7, #4]
    c428:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c42c:	3a08      	subs	r2, #8
    c42e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c432:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c436:	60cd      	str	r5, [r1, #12]
    c438:	4630      	mov	r0, r6
    c43a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c43e:	f7fd bea3 	b.w	a188 <__malloc_unlock>
    c442:	eb0c 0203 	add.w	r2, ip, r3
    c446:	6852      	ldr	r2, [r2, #4]
    c448:	07d0      	lsls	r0, r2, #31
    c44a:	d410      	bmi.n	c46e <_free_r+0xca>
    c44c:	4419      	add	r1, r3
    c44e:	f107 0008 	add.w	r0, r7, #8
    c452:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c456:	4283      	cmp	r3, r0
    c458:	d073      	beq.n	c542 <_free_r+0x19e>
    c45a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c45e:	60da      	str	r2, [r3, #12]
    c460:	6093      	str	r3, [r2, #8]
    c462:	f041 0301 	orr.w	r3, r1, #1
    c466:	606b      	str	r3, [r5, #4]
    c468:	5069      	str	r1, [r5, r1]
    c46a:	e7d0      	b.n	c40e <_free_r+0x6a>
    c46c:	4770      	bx	lr
    c46e:	f041 0301 	orr.w	r3, r1, #1
    c472:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c476:	f844 3c04 	str.w	r3, [r4, #-4]
    c47a:	f8cc 1000 	str.w	r1, [ip]
    c47e:	d3c9      	bcc.n	c414 <_free_r+0x70>
    c480:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c484:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c488:	d248      	bcs.n	c51c <_free_r+0x178>
    c48a:	098b      	lsrs	r3, r1, #6
    c48c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c490:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c494:	00c3      	lsls	r3, r0, #3
    c496:	18f8      	adds	r0, r7, r3
    c498:	58fb      	ldr	r3, [r7, r3]
    c49a:	3808      	subs	r0, #8
    c49c:	4298      	cmp	r0, r3
    c49e:	d059      	beq.n	c554 <_free_r+0x1b0>
    c4a0:	685a      	ldr	r2, [r3, #4]
    c4a2:	f022 0203 	bic.w	r2, r2, #3
    c4a6:	428a      	cmp	r2, r1
    c4a8:	d902      	bls.n	c4b0 <_free_r+0x10c>
    c4aa:	689b      	ldr	r3, [r3, #8]
    c4ac:	4298      	cmp	r0, r3
    c4ae:	d1f7      	bne.n	c4a0 <_free_r+0xfc>
    c4b0:	68d8      	ldr	r0, [r3, #12]
    c4b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c4b6:	6085      	str	r5, [r0, #8]
    c4b8:	60dd      	str	r5, [r3, #12]
    c4ba:	4630      	mov	r0, r6
    c4bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c4c0:	f7fd be62 	b.w	a188 <__malloc_unlock>
    c4c4:	eb0c 0203 	add.w	r2, ip, r3
    c4c8:	6852      	ldr	r2, [r2, #4]
    c4ca:	07d2      	lsls	r2, r2, #31
    c4cc:	d463      	bmi.n	c596 <_free_r+0x1f2>
    c4ce:	440b      	add	r3, r1
    c4d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c4d4:	60ca      	str	r2, [r1, #12]
    c4d6:	6091      	str	r1, [r2, #8]
    c4d8:	f043 0201 	orr.w	r2, r3, #1
    c4dc:	606a      	str	r2, [r5, #4]
    c4de:	4630      	mov	r0, r6
    c4e0:	50eb      	str	r3, [r5, r3]
    c4e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c4e6:	f7fd be4f 	b.w	a188 <__malloc_unlock>
    c4ea:	440b      	add	r3, r1
    c4ec:	07d1      	lsls	r1, r2, #31
    c4ee:	d407      	bmi.n	c500 <_free_r+0x15c>
    c4f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c4f4:	1aad      	subs	r5, r5, r2
    c4f6:	4413      	add	r3, r2
    c4f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c4fc:	60ca      	str	r2, [r1, #12]
    c4fe:	6091      	str	r1, [r2, #8]
    c500:	f043 0201 	orr.w	r2, r3, #1
    c504:	606a      	str	r2, [r5, #4]
    c506:	4a28      	ldr	r2, [pc, #160]	; (c5a8 <_free_r+0x204>)
    c508:	60bd      	str	r5, [r7, #8]
    c50a:	6812      	ldr	r2, [r2, #0]
    c50c:	429a      	cmp	r2, r3
    c50e:	d893      	bhi.n	c438 <_free_r+0x94>
    c510:	4b26      	ldr	r3, [pc, #152]	; (c5ac <_free_r+0x208>)
    c512:	4630      	mov	r0, r6
    c514:	6819      	ldr	r1, [r3, #0]
    c516:	f7ff fef5 	bl	c304 <_malloc_trim_r>
    c51a:	e78d      	b.n	c438 <_free_r+0x94>
    c51c:	2b14      	cmp	r3, #20
    c51e:	d90a      	bls.n	c536 <_free_r+0x192>
    c520:	2b54      	cmp	r3, #84	; 0x54
    c522:	d81f      	bhi.n	c564 <_free_r+0x1c0>
    c524:	0b0b      	lsrs	r3, r1, #12
    c526:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c52a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c52e:	00c3      	lsls	r3, r0, #3
    c530:	e7b1      	b.n	c496 <_free_r+0xf2>
    c532:	4419      	add	r1, r3
    c534:	e78d      	b.n	c452 <_free_r+0xae>
    c536:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c53a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c53e:	00c3      	lsls	r3, r0, #3
    c540:	e7a9      	b.n	c496 <_free_r+0xf2>
    c542:	f041 0301 	orr.w	r3, r1, #1
    c546:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c54a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c54e:	606b      	str	r3, [r5, #4]
    c550:	5069      	str	r1, [r5, r1]
    c552:	e771      	b.n	c438 <_free_r+0x94>
    c554:	6879      	ldr	r1, [r7, #4]
    c556:	1092      	asrs	r2, r2, #2
    c558:	2401      	movs	r4, #1
    c55a:	fa04 f202 	lsl.w	r2, r4, r2
    c55e:	430a      	orrs	r2, r1
    c560:	607a      	str	r2, [r7, #4]
    c562:	e7a6      	b.n	c4b2 <_free_r+0x10e>
    c564:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c568:	d806      	bhi.n	c578 <_free_r+0x1d4>
    c56a:	0bcb      	lsrs	r3, r1, #15
    c56c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c570:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c574:	00c3      	lsls	r3, r0, #3
    c576:	e78e      	b.n	c496 <_free_r+0xf2>
    c578:	f240 5254 	movw	r2, #1364	; 0x554
    c57c:	4293      	cmp	r3, r2
    c57e:	d806      	bhi.n	c58e <_free_r+0x1ea>
    c580:	0c8b      	lsrs	r3, r1, #18
    c582:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c586:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c58a:	00c3      	lsls	r3, r0, #3
    c58c:	e783      	b.n	c496 <_free_r+0xf2>
    c58e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c592:	227e      	movs	r2, #126	; 0x7e
    c594:	e77f      	b.n	c496 <_free_r+0xf2>
    c596:	f041 0301 	orr.w	r3, r1, #1
    c59a:	606b      	str	r3, [r5, #4]
    c59c:	f8cc 1000 	str.w	r1, [ip]
    c5a0:	e74a      	b.n	c438 <_free_r+0x94>
    c5a2:	bf00      	nop
    c5a4:	20008760 	.word	0x20008760
    c5a8:	20008b6c 	.word	0x20008b6c
    c5ac:	20028ae4 	.word	0x20028ae4

0000c5b0 <rshift>:
    c5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5b4:	6904      	ldr	r4, [r0, #16]
    c5b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    c5ba:	dd2f      	ble.n	c61c <rshift+0x6c>
    c5bc:	f100 0e14 	add.w	lr, r0, #20
    c5c0:	114e      	asrs	r6, r1, #5
    c5c2:	f011 0c1f 	ands.w	ip, r1, #31
    c5c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    c5ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    c5ce:	d02b      	beq.n	c628 <rshift+0x78>
    c5d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    c5d4:	3304      	adds	r3, #4
    c5d6:	429d      	cmp	r5, r3
    c5d8:	fa21 f10c 	lsr.w	r1, r1, ip
    c5dc:	f1cc 0820 	rsb	r8, ip, #32
    c5e0:	d918      	bls.n	c614 <rshift+0x64>
    c5e2:	4677      	mov	r7, lr
    c5e4:	681a      	ldr	r2, [r3, #0]
    c5e6:	fa02 f208 	lsl.w	r2, r2, r8
    c5ea:	430a      	orrs	r2, r1
    c5ec:	f847 2b04 	str.w	r2, [r7], #4
    c5f0:	f853 1b04 	ldr.w	r1, [r3], #4
    c5f4:	429d      	cmp	r5, r3
    c5f6:	fa21 f10c 	lsr.w	r1, r1, ip
    c5fa:	d8f3      	bhi.n	c5e4 <rshift+0x34>
    c5fc:	1ba3      	subs	r3, r4, r6
    c5fe:	009b      	lsls	r3, r3, #2
    c600:	3b05      	subs	r3, #5
    c602:	089b      	lsrs	r3, r3, #2
    c604:	3301      	adds	r3, #1
    c606:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    c60a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    c60e:	b1c9      	cbz	r1, c644 <rshift+0x94>
    c610:	3404      	adds	r4, #4
    c612:	e017      	b.n	c644 <rshift+0x94>
    c614:	6141      	str	r1, [r0, #20]
    c616:	4674      	mov	r4, lr
    c618:	2900      	cmp	r1, #0
    c61a:	d1f9      	bne.n	c610 <rshift+0x60>
    c61c:	2300      	movs	r3, #0
    c61e:	6103      	str	r3, [r0, #16]
    c620:	2300      	movs	r3, #0
    c622:	6143      	str	r3, [r0, #20]
    c624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c628:	429d      	cmp	r5, r3
    c62a:	bf88      	it	hi
    c62c:	f100 0210 	addhi.w	r2, r0, #16
    c630:	d9f4      	bls.n	c61c <rshift+0x6c>
    c632:	f853 1b04 	ldr.w	r1, [r3], #4
    c636:	f842 1f04 	str.w	r1, [r2, #4]!
    c63a:	429d      	cmp	r5, r3
    c63c:	d8f9      	bhi.n	c632 <rshift+0x82>
    c63e:	1ba4      	subs	r4, r4, r6
    c640:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    c644:	eba4 030e 	sub.w	r3, r4, lr
    c648:	109b      	asrs	r3, r3, #2
    c64a:	4574      	cmp	r4, lr
    c64c:	6103      	str	r3, [r0, #16]
    c64e:	d0e7      	beq.n	c620 <rshift+0x70>
    c650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c654 <__gethex>:
    c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c658:	ed2d 8b02 	vpush	{d8}
    c65c:	680c      	ldr	r4, [r1, #0]
    c65e:	468b      	mov	fp, r1
    c660:	78a1      	ldrb	r1, [r4, #2]
    c662:	b085      	sub	sp, #20
    c664:	2930      	cmp	r1, #48	; 0x30
    c666:	ee08 0a10 	vmov	s16, r0
    c66a:	4692      	mov	sl, r2
    c66c:	9302      	str	r3, [sp, #8]
    c66e:	f040 81ce 	bne.w	ca0e <__gethex+0x3ba>
    c672:	f06f 0001 	mvn.w	r0, #1
    c676:	1b00      	subs	r0, r0, r4
    c678:	1ce2      	adds	r2, r4, #3
    c67a:	1883      	adds	r3, r0, r2
    c67c:	4614      	mov	r4, r2
    c67e:	f812 1b01 	ldrb.w	r1, [r2], #1
    c682:	2930      	cmp	r1, #48	; 0x30
    c684:	d0f9      	beq.n	c67a <__gethex+0x26>
    c686:	f8df 8300 	ldr.w	r8, [pc, #768]	; c988 <__gethex+0x334>
    c68a:	f818 2001 	ldrb.w	r2, [r8, r1]
    c68e:	2a00      	cmp	r2, #0
    c690:	f000 80e5 	beq.w	c85e <__gethex+0x20a>
    c694:	7822      	ldrb	r2, [r4, #0]
    c696:	2700      	movs	r7, #0
    c698:	f818 2002 	ldrb.w	r2, [r8, r2]
    c69c:	463d      	mov	r5, r7
    c69e:	4626      	mov	r6, r4
    c6a0:	b12a      	cbz	r2, c6ae <__gethex+0x5a>
    c6a2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c6a6:	f818 2002 	ldrb.w	r2, [r8, r2]
    c6aa:	2a00      	cmp	r2, #0
    c6ac:	d1f9      	bne.n	c6a2 <__gethex+0x4e>
    c6ae:	49b5      	ldr	r1, [pc, #724]	; (c984 <__gethex+0x330>)
    c6b0:	9301      	str	r3, [sp, #4]
    c6b2:	2201      	movs	r2, #1
    c6b4:	4630      	mov	r0, r6
    c6b6:	f7ff fa2b 	bl	bb10 <strncmp>
    c6ba:	9b01      	ldr	r3, [sp, #4]
    c6bc:	4681      	mov	r9, r0
    c6be:	2800      	cmp	r0, #0
    c6c0:	d04d      	beq.n	c75e <__gethex+0x10a>
    c6c2:	2d00      	cmp	r5, #0
    c6c4:	d14e      	bne.n	c764 <__gethex+0x110>
    c6c6:	7832      	ldrb	r2, [r6, #0]
    c6c8:	46a9      	mov	r9, r5
    c6ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c6ce:	2a50      	cmp	r2, #80	; 0x50
    c6d0:	4635      	mov	r5, r6
    c6d2:	d050      	beq.n	c776 <__gethex+0x122>
    c6d4:	f8cb 6000 	str.w	r6, [fp]
    c6d8:	2f00      	cmp	r7, #0
    c6da:	d169      	bne.n	c7b0 <__gethex+0x15c>
    c6dc:	1b2b      	subs	r3, r5, r4
    c6de:	3b01      	subs	r3, #1
    c6e0:	2b07      	cmp	r3, #7
    c6e2:	4639      	mov	r1, r7
    c6e4:	dd04      	ble.n	c6f0 <__gethex+0x9c>
    c6e6:	105b      	asrs	r3, r3, #1
    c6e8:	2b07      	cmp	r3, #7
    c6ea:	f101 0101 	add.w	r1, r1, #1
    c6ee:	dcfa      	bgt.n	c6e6 <__gethex+0x92>
    c6f0:	ee18 0a10 	vmov	r0, s16
    c6f4:	f000 fb82 	bl	cdfc <_Balloc>
    c6f8:	4683      	mov	fp, r0
    c6fa:	2800      	cmp	r0, #0
    c6fc:	f000 8266 	beq.w	cbcc <__gethex+0x578>
    c700:	f100 0614 	add.w	r6, r0, #20
    c704:	42ac      	cmp	r4, r5
    c706:	9601      	str	r6, [sp, #4]
    c708:	f080 81d2 	bcs.w	cab0 <__gethex+0x45c>
    c70c:	2700      	movs	r7, #0
    c70e:	f8cd 900c 	str.w	r9, [sp, #12]
    c712:	499c      	ldr	r1, [pc, #624]	; (c984 <__gethex+0x330>)
    c714:	46a1      	mov	r9, r4
    c716:	463c      	mov	r4, r7
    c718:	e00c      	b.n	c734 <__gethex+0xe0>
    c71a:	2f20      	cmp	r7, #32
    c71c:	d019      	beq.n	c752 <__gethex+0xfe>
    c71e:	4638      	mov	r0, r7
    c720:	3704      	adds	r7, #4
    c722:	782a      	ldrb	r2, [r5, #0]
    c724:	f818 2002 	ldrb.w	r2, [r8, r2]
    c728:	f002 020f 	and.w	r2, r2, #15
    c72c:	4082      	lsls	r2, r0
    c72e:	4314      	orrs	r4, r2
    c730:	454d      	cmp	r5, r9
    c732:	d047      	beq.n	c7c4 <__gethex+0x170>
    c734:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c738:	2a2e      	cmp	r2, #46	; 0x2e
    c73a:	d1ee      	bne.n	c71a <__gethex+0xc6>
    c73c:	454d      	cmp	r5, r9
    c73e:	d3ec      	bcc.n	c71a <__gethex+0xc6>
    c740:	2201      	movs	r2, #1
    c742:	4628      	mov	r0, r5
    c744:	f7ff f9e4 	bl	bb10 <strncmp>
    c748:	498e      	ldr	r1, [pc, #568]	; (c984 <__gethex+0x330>)
    c74a:	2800      	cmp	r0, #0
    c74c:	d0f0      	beq.n	c730 <__gethex+0xdc>
    c74e:	2f20      	cmp	r7, #32
    c750:	d1e5      	bne.n	c71e <__gethex+0xca>
    c752:	2000      	movs	r0, #0
    c754:	f846 4b04 	str.w	r4, [r6], #4
    c758:	2704      	movs	r7, #4
    c75a:	4604      	mov	r4, r0
    c75c:	e7e1      	b.n	c722 <__gethex+0xce>
    c75e:	2d00      	cmp	r5, #0
    c760:	f000 8142 	beq.w	c9e8 <__gethex+0x394>
    c764:	7832      	ldrb	r2, [r6, #0]
    c766:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c76a:	1bad      	subs	r5, r5, r6
    c76c:	2a50      	cmp	r2, #80	; 0x50
    c76e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c772:	4635      	mov	r5, r6
    c774:	d1ae      	bne.n	c6d4 <__gethex+0x80>
    c776:	786a      	ldrb	r2, [r5, #1]
    c778:	2a2b      	cmp	r2, #43	; 0x2b
    c77a:	f000 8125 	beq.w	c9c8 <__gethex+0x374>
    c77e:	2a2d      	cmp	r2, #45	; 0x2d
    c780:	f000 80a5 	beq.w	c8ce <__gethex+0x27a>
    c784:	1c6e      	adds	r6, r5, #1
    c786:	2000      	movs	r0, #0
    c788:	f818 1002 	ldrb.w	r1, [r8, r2]
    c78c:	1e4a      	subs	r2, r1, #1
    c78e:	2a18      	cmp	r2, #24
    c790:	f200 809b 	bhi.w	c8ca <__gethex+0x276>
    c794:	7872      	ldrb	r2, [r6, #1]
    c796:	f818 2002 	ldrb.w	r2, [r8, r2]
    c79a:	3910      	subs	r1, #16
    c79c:	3601      	adds	r6, #1
    c79e:	2a00      	cmp	r2, #0
    c7a0:	d15a      	bne.n	c858 <__gethex+0x204>
    c7a2:	b100      	cbz	r0, c7a6 <__gethex+0x152>
    c7a4:	4249      	negs	r1, r1
    c7a6:	4489      	add	r9, r1
    c7a8:	f8cb 6000 	str.w	r6, [fp]
    c7ac:	2f00      	cmp	r7, #0
    c7ae:	d095      	beq.n	c6dc <__gethex+0x88>
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	bf14      	ite	ne
    c7b4:	2500      	movne	r5, #0
    c7b6:	2506      	moveq	r5, #6
    c7b8:	4628      	mov	r0, r5
    c7ba:	b005      	add	sp, #20
    c7bc:	ecbd 8b02 	vpop	{d8}
    c7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c7c8:	4623      	mov	r3, r4
    c7ca:	f846 3b04 	str.w	r3, [r6], #4
    c7ce:	4618      	mov	r0, r3
    c7d0:	9b01      	ldr	r3, [sp, #4]
    c7d2:	1af6      	subs	r6, r6, r3
    c7d4:	10b6      	asrs	r6, r6, #2
    c7d6:	f8cb 6010 	str.w	r6, [fp, #16]
    c7da:	f000 fbe9 	bl	cfb0 <__hi0bits>
    c7de:	0176      	lsls	r6, r6, #5
    c7e0:	f8da 4000 	ldr.w	r4, [sl]
    c7e4:	1a30      	subs	r0, r6, r0
    c7e6:	42a0      	cmp	r0, r4
    c7e8:	dc75      	bgt.n	c8d6 <__gethex+0x282>
    c7ea:	f2c0 80ef 	blt.w	c9cc <__gethex+0x378>
    c7ee:	2700      	movs	r7, #0
    c7f0:	f8da 3008 	ldr.w	r3, [sl, #8]
    c7f4:	454b      	cmp	r3, r9
    c7f6:	f2c0 8151 	blt.w	ca9c <__gethex+0x448>
    c7fa:	f8da 3004 	ldr.w	r3, [sl, #4]
    c7fe:	454b      	cmp	r3, r9
    c800:	dd4a      	ble.n	c898 <__gethex+0x244>
    c802:	eba3 0909 	sub.w	r9, r3, r9
    c806:	454c      	cmp	r4, r9
    c808:	f300 8082 	bgt.w	c910 <__gethex+0x2bc>
    c80c:	f8da 200c 	ldr.w	r2, [sl, #12]
    c810:	2a02      	cmp	r2, #2
    c812:	f000 8165 	beq.w	cae0 <__gethex+0x48c>
    c816:	2a03      	cmp	r2, #3
    c818:	f000 8181 	beq.w	cb1e <__gethex+0x4ca>
    c81c:	2a01      	cmp	r2, #1
    c81e:	f000 816f 	beq.w	cb00 <__gethex+0x4ac>
    c822:	ee18 0a10 	vmov	r0, s16
    c826:	4659      	mov	r1, fp
    c828:	f000 fb0e 	bl	ce48 <_Bfree>
    c82c:	2550      	movs	r5, #80	; 0x50
    c82e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c830:	2300      	movs	r3, #0
    c832:	4628      	mov	r0, r5
    c834:	6013      	str	r3, [r2, #0]
    c836:	b005      	add	sp, #20
    c838:	ecbd 8b02 	vpop	{d8}
    c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c840:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c844:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c848:	f1a2 0110 	sub.w	r1, r2, #16
    c84c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c850:	f818 2002 	ldrb.w	r2, [r8, r2]
    c854:	2a00      	cmp	r2, #0
    c856:	d0a4      	beq.n	c7a2 <__gethex+0x14e>
    c858:	2a19      	cmp	r2, #25
    c85a:	ddf1      	ble.n	c840 <__gethex+0x1ec>
    c85c:	e7a1      	b.n	c7a2 <__gethex+0x14e>
    c85e:	4949      	ldr	r1, [pc, #292]	; (c984 <__gethex+0x330>)
    c860:	9301      	str	r3, [sp, #4]
    c862:	2201      	movs	r2, #1
    c864:	4620      	mov	r0, r4
    c866:	f7ff f953 	bl	bb10 <strncmp>
    c86a:	9b01      	ldr	r3, [sp, #4]
    c86c:	2800      	cmp	r0, #0
    c86e:	d16d      	bne.n	c94c <__gethex+0x2f8>
    c870:	7861      	ldrb	r1, [r4, #1]
    c872:	f818 2001 	ldrb.w	r2, [r8, r1]
    c876:	1c65      	adds	r5, r4, #1
    c878:	2a00      	cmp	r2, #0
    c87a:	d069      	beq.n	c950 <__gethex+0x2fc>
    c87c:	2930      	cmp	r1, #48	; 0x30
    c87e:	462c      	mov	r4, r5
    c880:	d105      	bne.n	c88e <__gethex+0x23a>
    c882:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c886:	2b30      	cmp	r3, #48	; 0x30
    c888:	d0fb      	beq.n	c882 <__gethex+0x22e>
    c88a:	f818 2003 	ldrb.w	r2, [r8, r3]
    c88e:	fab2 f782 	clz	r7, r2
    c892:	097f      	lsrs	r7, r7, #5
    c894:	2301      	movs	r3, #1
    c896:	e702      	b.n	c69e <__gethex+0x4a>
    c898:	2501      	movs	r5, #1
    c89a:	b157      	cbz	r7, c8b2 <__gethex+0x25e>
    c89c:	f8da 300c 	ldr.w	r3, [sl, #12]
    c8a0:	2b02      	cmp	r3, #2
    c8a2:	d05d      	beq.n	c960 <__gethex+0x30c>
    c8a4:	2b03      	cmp	r3, #3
    c8a6:	d05f      	beq.n	c968 <__gethex+0x314>
    c8a8:	2b01      	cmp	r3, #1
    c8aa:	f000 8084 	beq.w	c9b6 <__gethex+0x362>
    c8ae:	f045 0510 	orr.w	r5, r5, #16
    c8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8b4:	f8c3 b000 	str.w	fp, [r3]
    c8b8:	9b02      	ldr	r3, [sp, #8]
    c8ba:	4628      	mov	r0, r5
    c8bc:	f8c3 9000 	str.w	r9, [r3]
    c8c0:	b005      	add	sp, #20
    c8c2:	ecbd 8b02 	vpop	{d8}
    c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8ca:	462e      	mov	r6, r5
    c8cc:	e702      	b.n	c6d4 <__gethex+0x80>
    c8ce:	2001      	movs	r0, #1
    c8d0:	78aa      	ldrb	r2, [r5, #2]
    c8d2:	1cae      	adds	r6, r5, #2
    c8d4:	e758      	b.n	c788 <__gethex+0x134>
    c8d6:	1b06      	subs	r6, r0, r4
    c8d8:	4631      	mov	r1, r6
    c8da:	4658      	mov	r0, fp
    c8dc:	f000 ff96 	bl	d80c <__any_on>
    c8e0:	4607      	mov	r7, r0
    c8e2:	b178      	cbz	r0, c904 <__gethex+0x2b0>
    c8e4:	1e72      	subs	r2, r6, #1
    c8e6:	1153      	asrs	r3, r2, #5
    c8e8:	9901      	ldr	r1, [sp, #4]
    c8ea:	2701      	movs	r7, #1
    c8ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c8f0:	f002 031f 	and.w	r3, r2, #31
    c8f4:	fa07 f303 	lsl.w	r3, r7, r3
    c8f8:	420b      	tst	r3, r1
    c8fa:	d003      	beq.n	c904 <__gethex+0x2b0>
    c8fc:	42ba      	cmp	r2, r7
    c8fe:	f300 80e2 	bgt.w	cac6 <__gethex+0x472>
    c902:	2702      	movs	r7, #2
    c904:	4631      	mov	r1, r6
    c906:	4658      	mov	r0, fp
    c908:	44b1      	add	r9, r6
    c90a:	f7ff fe51 	bl	c5b0 <rshift>
    c90e:	e76f      	b.n	c7f0 <__gethex+0x19c>
    c910:	f109 35ff 	add.w	r5, r9, #4294967295
    c914:	2f00      	cmp	r7, #0
    c916:	f040 80ce 	bne.w	cab6 <__gethex+0x462>
    c91a:	2d00      	cmp	r5, #0
    c91c:	f040 80cd 	bne.w	caba <__gethex+0x466>
    c920:	116b      	asrs	r3, r5, #5
    c922:	9a01      	ldr	r2, [sp, #4]
    c924:	f005 051f 	and.w	r5, r5, #31
    c928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c92c:	2301      	movs	r3, #1
    c92e:	40ab      	lsls	r3, r5
    c930:	4213      	tst	r3, r2
    c932:	4649      	mov	r1, r9
    c934:	4658      	mov	r0, fp
    c936:	bf18      	it	ne
    c938:	f047 0702 	orrne.w	r7, r7, #2
    c93c:	eba4 0409 	sub.w	r4, r4, r9
    c940:	f7ff fe36 	bl	c5b0 <rshift>
    c944:	2502      	movs	r5, #2
    c946:	f8da 9004 	ldr.w	r9, [sl, #4]
    c94a:	e7a6      	b.n	c89a <__gethex+0x246>
    c94c:	7821      	ldrb	r1, [r4, #0]
    c94e:	4625      	mov	r5, r4
    c950:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c954:	2950      	cmp	r1, #80	; 0x50
    c956:	f000 80bf 	beq.w	cad8 <__gethex+0x484>
    c95a:	f8cb 5000 	str.w	r5, [fp]
    c95e:	e727      	b.n	c7b0 <__gethex+0x15c>
    c960:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c962:	f1c3 0301 	rsb	r3, r3, #1
    c966:	9311      	str	r3, [sp, #68]	; 0x44
    c968:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c96a:	2b00      	cmp	r3, #0
    c96c:	d09f      	beq.n	c8ae <__gethex+0x25a>
    c96e:	f8db 7010 	ldr.w	r7, [fp, #16]
    c972:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c976:	00ba      	lsls	r2, r7, #2
    c978:	4643      	mov	r3, r8
    c97a:	9201      	str	r2, [sp, #4]
    c97c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c980:	2100      	movs	r1, #0
    c982:	e007      	b.n	c994 <__gethex+0x340>
    c984:	20007d38 	.word	0x20007d38
    c988:	20000940 	.word	0x20000940
    c98c:	4298      	cmp	r0, r3
    c98e:	f843 1c04 	str.w	r1, [r3, #-4]
    c992:	d93f      	bls.n	ca14 <__gethex+0x3c0>
    c994:	461e      	mov	r6, r3
    c996:	f853 2b04 	ldr.w	r2, [r3], #4
    c99a:	f1b2 3fff 	cmp.w	r2, #4294967295
    c99e:	d0f5      	beq.n	c98c <__gethex+0x338>
    c9a0:	3201      	adds	r2, #1
    c9a2:	2d02      	cmp	r5, #2
    c9a4:	6032      	str	r2, [r6, #0]
    c9a6:	f000 80bf 	beq.w	cb28 <__gethex+0x4d4>
    c9aa:	f014 041f 	ands.w	r4, r4, #31
    c9ae:	f040 80e7 	bne.w	cb80 <__gethex+0x52c>
    c9b2:	2521      	movs	r5, #33	; 0x21
    c9b4:	e77d      	b.n	c8b2 <__gethex+0x25e>
    c9b6:	07ba      	lsls	r2, r7, #30
    c9b8:	f57f af79 	bpl.w	c8ae <__gethex+0x25a>
    c9bc:	9b01      	ldr	r3, [sp, #4]
    c9be:	681b      	ldr	r3, [r3, #0]
    c9c0:	431f      	orrs	r7, r3
    c9c2:	07fb      	lsls	r3, r7, #31
    c9c4:	d4d3      	bmi.n	c96e <__gethex+0x31a>
    c9c6:	e772      	b.n	c8ae <__gethex+0x25a>
    c9c8:	2000      	movs	r0, #0
    c9ca:	e781      	b.n	c8d0 <__gethex+0x27c>
    c9cc:	1a22      	subs	r2, r4, r0
    c9ce:	4659      	mov	r1, fp
    c9d0:	ee18 0a10 	vmov	r0, s16
    c9d4:	eba9 0902 	sub.w	r9, r9, r2
    c9d8:	f000 fc76 	bl	d2c8 <__lshift>
    c9dc:	f100 0314 	add.w	r3, r0, #20
    c9e0:	4683      	mov	fp, r0
    c9e2:	9301      	str	r3, [sp, #4]
    c9e4:	2700      	movs	r7, #0
    c9e6:	e703      	b.n	c7f0 <__gethex+0x19c>
    c9e8:	7872      	ldrb	r2, [r6, #1]
    c9ea:	f818 0002 	ldrb.w	r0, [r8, r2]
    c9ee:	1c71      	adds	r1, r6, #1
    c9f0:	2800      	cmp	r0, #0
    c9f2:	f000 80a0 	beq.w	cb36 <__gethex+0x4e2>
    c9f6:	460d      	mov	r5, r1
    c9f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    c9fc:	f818 0002 	ldrb.w	r0, [r8, r2]
    ca00:	2800      	cmp	r0, #0
    ca02:	d1f8      	bne.n	c9f6 <__gethex+0x3a2>
    ca04:	1b75      	subs	r5, r6, r5
    ca06:	ea4f 0985 	mov.w	r9, r5, lsl #2
    ca0a:	460e      	mov	r6, r1
    ca0c:	e65d      	b.n	c6ca <__gethex+0x76>
    ca0e:	3402      	adds	r4, #2
    ca10:	2300      	movs	r3, #0
    ca12:	e638      	b.n	c686 <__gethex+0x32>
    ca14:	f8db 3008 	ldr.w	r3, [fp, #8]
    ca18:	429f      	cmp	r7, r3
    ca1a:	f280 808e 	bge.w	cb3a <__gethex+0x4e6>
    ca1e:	463b      	mov	r3, r7
    ca20:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    ca24:	2101      	movs	r1, #1
    ca26:	3301      	adds	r3, #1
    ca28:	2d02      	cmp	r5, #2
    ca2a:	f8cb 3010 	str.w	r3, [fp, #16]
    ca2e:	6151      	str	r1, [r2, #20]
    ca30:	d07a      	beq.n	cb28 <__gethex+0x4d4>
    ca32:	429f      	cmp	r7, r3
    ca34:	dab9      	bge.n	c9aa <__gethex+0x356>
    ca36:	2b00      	cmp	r3, #0
    ca38:	f340 809b 	ble.w	cb72 <__gethex+0x51e>
    ca3c:	f8db 2014 	ldr.w	r2, [fp, #20]
    ca40:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    ca44:	f10b 0018 	add.w	r0, fp, #24
    ca48:	4283      	cmp	r3, r0
    ca4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    ca4e:	f240 80b1 	bls.w	cbb4 <__gethex+0x560>
    ca52:	4644      	mov	r4, r8
    ca54:	6801      	ldr	r1, [r0, #0]
    ca56:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    ca5a:	f844 2b04 	str.w	r2, [r4], #4
    ca5e:	f850 2b04 	ldr.w	r2, [r0], #4
    ca62:	4283      	cmp	r3, r0
    ca64:	ea4f 0252 	mov.w	r2, r2, lsr #1
    ca68:	d8f4      	bhi.n	ca54 <__gethex+0x400>
    ca6a:	eba3 030b 	sub.w	r3, r3, fp
    ca6e:	3b19      	subs	r3, #25
    ca70:	089b      	lsrs	r3, r3, #2
    ca72:	3301      	adds	r3, #1
    ca74:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    ca78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    ca7c:	2a00      	cmp	r2, #0
    ca7e:	f040 809d 	bne.w	cbbc <__gethex+0x568>
    ca82:	eba3 0208 	sub.w	r2, r3, r8
    ca86:	1092      	asrs	r2, r2, #2
    ca88:	4543      	cmp	r3, r8
    ca8a:	f8cb 2010 	str.w	r2, [fp, #16]
    ca8e:	d073      	beq.n	cb78 <__gethex+0x524>
    ca90:	f8da 3008 	ldr.w	r3, [sl, #8]
    ca94:	f109 0901 	add.w	r9, r9, #1
    ca98:	454b      	cmp	r3, r9
    ca9a:	da8a      	bge.n	c9b2 <__gethex+0x35e>
    ca9c:	ee18 0a10 	vmov	r0, s16
    caa0:	4659      	mov	r1, fp
    caa2:	f000 f9d1 	bl	ce48 <_Bfree>
    caa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    caa8:	2300      	movs	r3, #0
    caaa:	6013      	str	r3, [r2, #0]
    caac:	25a3      	movs	r5, #163	; 0xa3
    caae:	e683      	b.n	c7b8 <__gethex+0x164>
    cab0:	9e01      	ldr	r6, [sp, #4]
    cab2:	2300      	movs	r3, #0
    cab4:	e689      	b.n	c7ca <__gethex+0x176>
    cab6:	2701      	movs	r7, #1
    cab8:	e732      	b.n	c920 <__gethex+0x2cc>
    caba:	4629      	mov	r1, r5
    cabc:	4658      	mov	r0, fp
    cabe:	f000 fea5 	bl	d80c <__any_on>
    cac2:	4607      	mov	r7, r0
    cac4:	e72c      	b.n	c920 <__gethex+0x2cc>
    cac6:	1eb1      	subs	r1, r6, #2
    cac8:	4658      	mov	r0, fp
    caca:	f000 fe9f 	bl	d80c <__any_on>
    cace:	2800      	cmp	r0, #0
    cad0:	f43f af17 	beq.w	c902 <__gethex+0x2ae>
    cad4:	2703      	movs	r7, #3
    cad6:	e715      	b.n	c904 <__gethex+0x2b0>
    cad8:	f04f 0900 	mov.w	r9, #0
    cadc:	2701      	movs	r7, #1
    cade:	e64a      	b.n	c776 <__gethex+0x122>
    cae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cae2:	2a00      	cmp	r2, #0
    cae4:	f47f ae9d 	bne.w	c822 <__gethex+0x1ce>
    cae8:	9902      	ldr	r1, [sp, #8]
    caea:	600b      	str	r3, [r1, #0]
    caec:	9b01      	ldr	r3, [sp, #4]
    caee:	2201      	movs	r2, #1
    caf0:	f8cb 2010 	str.w	r2, [fp, #16]
    caf4:	601a      	str	r2, [r3, #0]
    caf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    caf8:	2562      	movs	r5, #98	; 0x62
    cafa:	f8c3 b000 	str.w	fp, [r3]
    cafe:	e65b      	b.n	c7b8 <__gethex+0x164>
    cb00:	454c      	cmp	r4, r9
    cb02:	f47f ae8e 	bne.w	c822 <__gethex+0x1ce>
    cb06:	2c01      	cmp	r4, #1
    cb08:	d0ee      	beq.n	cae8 <__gethex+0x494>
    cb0a:	1e61      	subs	r1, r4, #1
    cb0c:	4658      	mov	r0, fp
    cb0e:	f000 fe7d 	bl	d80c <__any_on>
    cb12:	2800      	cmp	r0, #0
    cb14:	f43f ae85 	beq.w	c822 <__gethex+0x1ce>
    cb18:	f8da 3004 	ldr.w	r3, [sl, #4]
    cb1c:	e7e4      	b.n	cae8 <__gethex+0x494>
    cb1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cb20:	2a00      	cmp	r2, #0
    cb22:	f43f ae7e 	beq.w	c822 <__gethex+0x1ce>
    cb26:	e7df      	b.n	cae8 <__gethex+0x494>
    cb28:	f8da 3000 	ldr.w	r3, [sl]
    cb2c:	3b01      	subs	r3, #1
    cb2e:	42a3      	cmp	r3, r4
    cb30:	d034      	beq.n	cb9c <__gethex+0x548>
    cb32:	2522      	movs	r5, #34	; 0x22
    cb34:	e6bd      	b.n	c8b2 <__gethex+0x25e>
    cb36:	460e      	mov	r6, r1
    cb38:	e5c7      	b.n	c6ca <__gethex+0x76>
    cb3a:	f8db 1004 	ldr.w	r1, [fp, #4]
    cb3e:	ee18 0a10 	vmov	r0, s16
    cb42:	3101      	adds	r1, #1
    cb44:	f000 f95a 	bl	cdfc <_Balloc>
    cb48:	4606      	mov	r6, r0
    cb4a:	b3c8      	cbz	r0, cbc0 <__gethex+0x56c>
    cb4c:	f8db 3010 	ldr.w	r3, [fp, #16]
    cb50:	3302      	adds	r3, #2
    cb52:	009a      	lsls	r2, r3, #2
    cb54:	f10b 010c 	add.w	r1, fp, #12
    cb58:	300c      	adds	r0, #12
    cb5a:	f7fb fabb 	bl	80d4 <memcpy>
    cb5e:	4659      	mov	r1, fp
    cb60:	ee18 0a10 	vmov	r0, s16
    cb64:	f000 f970 	bl	ce48 <_Bfree>
    cb68:	f106 0814 	add.w	r8, r6, #20
    cb6c:	6933      	ldr	r3, [r6, #16]
    cb6e:	46b3      	mov	fp, r6
    cb70:	e756      	b.n	ca20 <__gethex+0x3cc>
    cb72:	2300      	movs	r3, #0
    cb74:	f8cb 3010 	str.w	r3, [fp, #16]
    cb78:	2300      	movs	r3, #0
    cb7a:	f8cb 3014 	str.w	r3, [fp, #20]
    cb7e:	e787      	b.n	ca90 <__gethex+0x43c>
    cb80:	9b01      	ldr	r3, [sp, #4]
    cb82:	4443      	add	r3, r8
    cb84:	f1c4 0420 	rsb	r4, r4, #32
    cb88:	f853 0c04 	ldr.w	r0, [r3, #-4]
    cb8c:	f000 fa10 	bl	cfb0 <__hi0bits>
    cb90:	42a0      	cmp	r0, r4
    cb92:	f6bf af0e 	bge.w	c9b2 <__gethex+0x35e>
    cb96:	f8db 3010 	ldr.w	r3, [fp, #16]
    cb9a:	e74c      	b.n	ca36 <__gethex+0x3e2>
    cb9c:	1163      	asrs	r3, r4, #5
    cb9e:	f004 041f 	and.w	r4, r4, #31
    cba2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    cba6:	2301      	movs	r3, #1
    cba8:	40a3      	lsls	r3, r4
    cbaa:	4213      	tst	r3, r2
    cbac:	bf0c      	ite	eq
    cbae:	2522      	moveq	r5, #34	; 0x22
    cbb0:	2521      	movne	r5, #33	; 0x21
    cbb2:	e67e      	b.n	c8b2 <__gethex+0x25e>
    cbb4:	f8c8 2000 	str.w	r2, [r8]
    cbb8:	4643      	mov	r3, r8
    cbba:	b16a      	cbz	r2, cbd8 <__gethex+0x584>
    cbbc:	3304      	adds	r3, #4
    cbbe:	e760      	b.n	ca82 <__gethex+0x42e>
    cbc0:	4b07      	ldr	r3, [pc, #28]	; (cbe0 <__gethex+0x58c>)
    cbc2:	4808      	ldr	r0, [pc, #32]	; (cbe4 <__gethex+0x590>)
    cbc4:	4632      	mov	r2, r6
    cbc6:	2184      	movs	r1, #132	; 0x84
    cbc8:	f004 fa0a 	bl	10fe0 <__assert_func>
    cbcc:	4b04      	ldr	r3, [pc, #16]	; (cbe0 <__gethex+0x58c>)
    cbce:	4805      	ldr	r0, [pc, #20]	; (cbe4 <__gethex+0x590>)
    cbd0:	465a      	mov	r2, fp
    cbd2:	21e4      	movs	r1, #228	; 0xe4
    cbd4:	f004 fa04 	bl	10fe0 <__assert_func>
    cbd8:	f8cb 2010 	str.w	r2, [fp, #16]
    cbdc:	e7cc      	b.n	cb78 <__gethex+0x524>
    cbde:	bf00      	nop
    cbe0:	200008c8 	.word	0x200008c8
    cbe4:	200008dc 	.word	0x200008dc

0000cbe8 <__match>:
    cbe8:	b410      	push	{r4}
    cbea:	6804      	ldr	r4, [r0, #0]
    cbec:	e009      	b.n	cc02 <__match+0x1a>
    cbee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cbf2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    cbf6:	f1bc 0f19 	cmp.w	ip, #25
    cbfa:	bf98      	it	ls
    cbfc:	3320      	addls	r3, #32
    cbfe:	4293      	cmp	r3, r2
    cc00:	d109      	bne.n	cc16 <__match+0x2e>
    cc02:	f811 2b01 	ldrb.w	r2, [r1], #1
    cc06:	2a00      	cmp	r2, #0
    cc08:	d1f1      	bne.n	cbee <__match+0x6>
    cc0a:	3401      	adds	r4, #1
    cc0c:	6004      	str	r4, [r0, #0]
    cc0e:	2001      	movs	r0, #1
    cc10:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc14:	4770      	bx	lr
    cc16:	2000      	movs	r0, #0
    cc18:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc1c:	4770      	bx	lr
    cc1e:	bf00      	nop

0000cc20 <__hexnan>:
    cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc24:	6809      	ldr	r1, [r1, #0]
    cc26:	b085      	sub	sp, #20
    cc28:	114b      	asrs	r3, r1, #5
    cc2a:	f011 011f 	ands.w	r1, r1, #31
    cc2e:	9002      	str	r0, [sp, #8]
    cc30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cc34:	9103      	str	r1, [sp, #12]
    cc36:	f040 808f 	bne.w	cd58 <__hexnan+0x138>
    cc3a:	1f1d      	subs	r5, r3, #4
    cc3c:	9301      	str	r3, [sp, #4]
    cc3e:	9b02      	ldr	r3, [sp, #8]
    cc40:	9901      	ldr	r1, [sp, #4]
    cc42:	681c      	ldr	r4, [r3, #0]
    cc44:	2300      	movs	r3, #0
    cc46:	f841 3c04 	str.w	r3, [r1, #-4]
    cc4a:	7861      	ldrb	r1, [r4, #1]
    cc4c:	3401      	adds	r4, #1
    cc4e:	2900      	cmp	r1, #0
    cc50:	f000 8098 	beq.w	cd84 <__hexnan+0x164>
    cc54:	f8df 9174 	ldr.w	r9, [pc, #372]	; cdcc <__hexnan+0x1ac>
    cc58:	46a8      	mov	r8, r5
    cc5a:	46ac      	mov	ip, r5
    cc5c:	469a      	mov	sl, r3
    cc5e:	461e      	mov	r6, r3
    cc60:	e00e      	b.n	cc80 <__hexnan+0x60>
    cc62:	2920      	cmp	r1, #32
    cc64:	f200 808c 	bhi.w	cd80 <__hexnan+0x160>
    cc68:	4556      	cmp	r6, sl
    cc6a:	dd06      	ble.n	cc7a <__hexnan+0x5a>
    cc6c:	45c4      	cmp	ip, r8
    cc6e:	d201      	bcs.n	cc74 <__hexnan+0x54>
    cc70:	2b07      	cmp	r3, #7
    cc72:	dd5b      	ble.n	cd2c <__hexnan+0x10c>
    cc74:	4562      	cmp	r2, ip
    cc76:	d351      	bcc.n	cd1c <__hexnan+0xfc>
    cc78:	2308      	movs	r3, #8
    cc7a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cc7e:	b1a1      	cbz	r1, ccaa <__hexnan+0x8a>
    cc80:	f819 0001 	ldrb.w	r0, [r9, r1]
    cc84:	2800      	cmp	r0, #0
    cc86:	d0ec      	beq.n	cc62 <__hexnan+0x42>
    cc88:	3301      	adds	r3, #1
    cc8a:	2b08      	cmp	r3, #8
    cc8c:	f106 0601 	add.w	r6, r6, #1
    cc90:	dc3a      	bgt.n	cd08 <__hexnan+0xe8>
    cc92:	f8dc 1000 	ldr.w	r1, [ip]
    cc96:	0109      	lsls	r1, r1, #4
    cc98:	f000 000f 	and.w	r0, r0, #15
    cc9c:	4308      	orrs	r0, r1
    cc9e:	f8cc 0000 	str.w	r0, [ip]
    cca2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    cca6:	2900      	cmp	r1, #0
    cca8:	d1ea      	bne.n	cc80 <__hexnan+0x60>
    ccaa:	2e00      	cmp	r6, #0
    ccac:	d06a      	beq.n	cd84 <__hexnan+0x164>
    ccae:	45c4      	cmp	ip, r8
    ccb0:	d201      	bcs.n	ccb6 <__hexnan+0x96>
    ccb2:	2b07      	cmp	r3, #7
    ccb4:	dd74      	ble.n	cda0 <__hexnan+0x180>
    ccb6:	4562      	cmp	r2, ip
    ccb8:	d252      	bcs.n	cd60 <__hexnan+0x140>
    ccba:	1f11      	subs	r1, r2, #4
    ccbc:	4663      	mov	r3, ip
    ccbe:	f853 0b04 	ldr.w	r0, [r3], #4
    ccc2:	f841 0f04 	str.w	r0, [r1, #4]!
    ccc6:	42ab      	cmp	r3, r5
    ccc8:	d9f9      	bls.n	ccbe <__hexnan+0x9e>
    ccca:	eba5 030c 	sub.w	r3, r5, ip
    ccce:	f023 0303 	bic.w	r3, r3, #3
    ccd2:	1c69      	adds	r1, r5, #1
    ccd4:	3304      	adds	r3, #4
    ccd6:	f10c 0c01 	add.w	ip, ip, #1
    ccda:	4561      	cmp	r1, ip
    ccdc:	bf38      	it	cc
    ccde:	2304      	movcc	r3, #4
    cce0:	4413      	add	r3, r2
    cce2:	2100      	movs	r1, #0
    cce4:	f843 1b04 	str.w	r1, [r3], #4
    cce8:	42ab      	cmp	r3, r5
    ccea:	d9fb      	bls.n	cce4 <__hexnan+0xc4>
    ccec:	9b01      	ldr	r3, [sp, #4]
    ccee:	f853 3c04 	ldr.w	r3, [r3, #-4]
    ccf2:	b92b      	cbnz	r3, cd00 <__hexnan+0xe0>
    ccf4:	42aa      	cmp	r2, r5
    ccf6:	d049      	beq.n	cd8c <__hexnan+0x16c>
    ccf8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d0f9      	beq.n	ccf4 <__hexnan+0xd4>
    cd00:	2005      	movs	r0, #5
    cd02:	b005      	add	sp, #20
    cd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd08:	4562      	cmp	r2, ip
    cd0a:	d2b6      	bcs.n	cc7a <__hexnan+0x5a>
    cd0c:	2300      	movs	r3, #0
    cd0e:	f84c 3c04 	str.w	r3, [ip, #-4]
    cd12:	4619      	mov	r1, r3
    cd14:	f1ac 0c04 	sub.w	ip, ip, #4
    cd18:	2301      	movs	r3, #1
    cd1a:	e7bd      	b.n	cc98 <__hexnan+0x78>
    cd1c:	2300      	movs	r3, #0
    cd1e:	f1ac 0804 	sub.w	r8, ip, #4
    cd22:	f84c 3c04 	str.w	r3, [ip, #-4]
    cd26:	46b2      	mov	sl, r6
    cd28:	46c4      	mov	ip, r8
    cd2a:	e7a6      	b.n	cc7a <__hexnan+0x5a>
    cd2c:	f1c3 0108 	rsb	r1, r3, #8
    cd30:	f8dc 3000 	ldr.w	r3, [ip]
    cd34:	0089      	lsls	r1, r1, #2
    cd36:	f1c1 0e20 	rsb	lr, r1, #32
    cd3a:	4660      	mov	r0, ip
    cd3c:	469b      	mov	fp, r3
    cd3e:	6847      	ldr	r7, [r0, #4]
    cd40:	fa07 f30e 	lsl.w	r3, r7, lr
    cd44:	ea43 030b 	orr.w	r3, r3, fp
    cd48:	fa27 fb01 	lsr.w	fp, r7, r1
    cd4c:	6003      	str	r3, [r0, #0]
    cd4e:	f840 bf04 	str.w	fp, [r0, #4]!
    cd52:	4540      	cmp	r0, r8
    cd54:	d3f3      	bcc.n	cd3e <__hexnan+0x11e>
    cd56:	e78d      	b.n	cc74 <__hexnan+0x54>
    cd58:	1d19      	adds	r1, r3, #4
    cd5a:	9101      	str	r1, [sp, #4]
    cd5c:	461d      	mov	r5, r3
    cd5e:	e76e      	b.n	cc3e <__hexnan+0x1e>
    cd60:	9b03      	ldr	r3, [sp, #12]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d0c2      	beq.n	ccec <__hexnan+0xcc>
    cd66:	9b03      	ldr	r3, [sp, #12]
    cd68:	9801      	ldr	r0, [sp, #4]
    cd6a:	f1c3 0120 	rsb	r1, r3, #32
    cd6e:	f04f 33ff 	mov.w	r3, #4294967295
    cd72:	40cb      	lsrs	r3, r1
    cd74:	f850 1c04 	ldr.w	r1, [r0, #-4]
    cd78:	400b      	ands	r3, r1
    cd7a:	f840 3c04 	str.w	r3, [r0, #-4]
    cd7e:	e7b8      	b.n	ccf2 <__hexnan+0xd2>
    cd80:	2929      	cmp	r1, #41	; 0x29
    cd82:	d009      	beq.n	cd98 <__hexnan+0x178>
    cd84:	2004      	movs	r0, #4
    cd86:	b005      	add	sp, #20
    cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd8c:	2301      	movs	r3, #1
    cd8e:	2005      	movs	r0, #5
    cd90:	602b      	str	r3, [r5, #0]
    cd92:	b005      	add	sp, #20
    cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd98:	9902      	ldr	r1, [sp, #8]
    cd9a:	3401      	adds	r4, #1
    cd9c:	600c      	str	r4, [r1, #0]
    cd9e:	e784      	b.n	ccaa <__hexnan+0x8a>
    cda0:	f8dc 1000 	ldr.w	r1, [ip]
    cda4:	f1c3 0308 	rsb	r3, r3, #8
    cda8:	009b      	lsls	r3, r3, #2
    cdaa:	f1c3 0720 	rsb	r7, r3, #32
    cdae:	4664      	mov	r4, ip
    cdb0:	4608      	mov	r0, r1
    cdb2:	6866      	ldr	r6, [r4, #4]
    cdb4:	fa06 f107 	lsl.w	r1, r6, r7
    cdb8:	4301      	orrs	r1, r0
    cdba:	fa26 f003 	lsr.w	r0, r6, r3
    cdbe:	6021      	str	r1, [r4, #0]
    cdc0:	f844 0f04 	str.w	r0, [r4, #4]!
    cdc4:	4544      	cmp	r4, r8
    cdc6:	d3f4      	bcc.n	cdb2 <__hexnan+0x192>
    cdc8:	e775      	b.n	ccb6 <__hexnan+0x96>
    cdca:	bf00      	nop
    cdcc:	20000940 	.word	0x20000940

0000cdd0 <__ascii_mbtowc>:
    cdd0:	b082      	sub	sp, #8
    cdd2:	b149      	cbz	r1, cde8 <__ascii_mbtowc+0x18>
    cdd4:	b15a      	cbz	r2, cdee <__ascii_mbtowc+0x1e>
    cdd6:	b16b      	cbz	r3, cdf4 <__ascii_mbtowc+0x24>
    cdd8:	7813      	ldrb	r3, [r2, #0]
    cdda:	600b      	str	r3, [r1, #0]
    cddc:	7812      	ldrb	r2, [r2, #0]
    cdde:	1e10      	subs	r0, r2, #0
    cde0:	bf18      	it	ne
    cde2:	2001      	movne	r0, #1
    cde4:	b002      	add	sp, #8
    cde6:	4770      	bx	lr
    cde8:	a901      	add	r1, sp, #4
    cdea:	2a00      	cmp	r2, #0
    cdec:	d1f3      	bne.n	cdd6 <__ascii_mbtowc+0x6>
    cdee:	4610      	mov	r0, r2
    cdf0:	b002      	add	sp, #8
    cdf2:	4770      	bx	lr
    cdf4:	f06f 0001 	mvn.w	r0, #1
    cdf8:	e7f4      	b.n	cde4 <__ascii_mbtowc+0x14>
    cdfa:	bf00      	nop

0000cdfc <_Balloc>:
    cdfc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cdfe:	b570      	push	{r4, r5, r6, lr}
    ce00:	4605      	mov	r5, r0
    ce02:	460c      	mov	r4, r1
    ce04:	b14b      	cbz	r3, ce1a <_Balloc+0x1e>
    ce06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ce0a:	b180      	cbz	r0, ce2e <_Balloc+0x32>
    ce0c:	6802      	ldr	r2, [r0, #0]
    ce0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    ce12:	2300      	movs	r3, #0
    ce14:	e9c0 3303 	strd	r3, r3, [r0, #12]
    ce18:	bd70      	pop	{r4, r5, r6, pc}
    ce1a:	2221      	movs	r2, #33	; 0x21
    ce1c:	2104      	movs	r1, #4
    ce1e:	f004 f8ff 	bl	11020 <_calloc_r>
    ce22:	4603      	mov	r3, r0
    ce24:	6468      	str	r0, [r5, #68]	; 0x44
    ce26:	2800      	cmp	r0, #0
    ce28:	d1ed      	bne.n	ce06 <_Balloc+0xa>
    ce2a:	2000      	movs	r0, #0
    ce2c:	bd70      	pop	{r4, r5, r6, pc}
    ce2e:	2101      	movs	r1, #1
    ce30:	fa01 f604 	lsl.w	r6, r1, r4
    ce34:	1d72      	adds	r2, r6, #5
    ce36:	0092      	lsls	r2, r2, #2
    ce38:	4628      	mov	r0, r5
    ce3a:	f004 f8f1 	bl	11020 <_calloc_r>
    ce3e:	2800      	cmp	r0, #0
    ce40:	d0f3      	beq.n	ce2a <_Balloc+0x2e>
    ce42:	e9c0 4601 	strd	r4, r6, [r0, #4]
    ce46:	e7e4      	b.n	ce12 <_Balloc+0x16>

0000ce48 <_Bfree>:
    ce48:	b131      	cbz	r1, ce58 <_Bfree+0x10>
    ce4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ce4c:	684a      	ldr	r2, [r1, #4]
    ce4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ce52:	6008      	str	r0, [r1, #0]
    ce54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ce58:	4770      	bx	lr
    ce5a:	bf00      	nop

0000ce5c <__multadd>:
    ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce60:	690e      	ldr	r6, [r1, #16]
    ce62:	4680      	mov	r8, r0
    ce64:	460f      	mov	r7, r1
    ce66:	461d      	mov	r5, r3
    ce68:	f101 0e14 	add.w	lr, r1, #20
    ce6c:	2000      	movs	r0, #0
    ce6e:	f8de 1000 	ldr.w	r1, [lr]
    ce72:	b28c      	uxth	r4, r1
    ce74:	fb02 5304 	mla	r3, r2, r4, r5
    ce78:	0c09      	lsrs	r1, r1, #16
    ce7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ce7e:	fb02 cc01 	mla	ip, r2, r1, ip
    ce82:	3001      	adds	r0, #1
    ce84:	b29c      	uxth	r4, r3
    ce86:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    ce8a:	4286      	cmp	r6, r0
    ce8c:	f84e 4b04 	str.w	r4, [lr], #4
    ce90:	ea4f 451c 	mov.w	r5, ip, lsr #16
    ce94:	dceb      	bgt.n	ce6e <__multadd+0x12>
    ce96:	b13d      	cbz	r5, cea8 <__multadd+0x4c>
    ce98:	68bb      	ldr	r3, [r7, #8]
    ce9a:	42b3      	cmp	r3, r6
    ce9c:	dd07      	ble.n	ceae <__multadd+0x52>
    ce9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cea2:	3601      	adds	r6, #1
    cea4:	615d      	str	r5, [r3, #20]
    cea6:	613e      	str	r6, [r7, #16]
    cea8:	4638      	mov	r0, r7
    ceaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceae:	6879      	ldr	r1, [r7, #4]
    ceb0:	4640      	mov	r0, r8
    ceb2:	3101      	adds	r1, #1
    ceb4:	f7ff ffa2 	bl	cdfc <_Balloc>
    ceb8:	4604      	mov	r4, r0
    ceba:	b1b0      	cbz	r0, ceea <__multadd+0x8e>
    cebc:	693a      	ldr	r2, [r7, #16]
    cebe:	3202      	adds	r2, #2
    cec0:	f107 010c 	add.w	r1, r7, #12
    cec4:	0092      	lsls	r2, r2, #2
    cec6:	300c      	adds	r0, #12
    cec8:	f7fb f904 	bl	80d4 <memcpy>
    cecc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ced0:	687a      	ldr	r2, [r7, #4]
    ced2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ced6:	6039      	str	r1, [r7, #0]
    ced8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    cedc:	4627      	mov	r7, r4
    cede:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    cee2:	3601      	adds	r6, #1
    cee4:	615d      	str	r5, [r3, #20]
    cee6:	613e      	str	r6, [r7, #16]
    cee8:	e7de      	b.n	cea8 <__multadd+0x4c>
    ceea:	4b03      	ldr	r3, [pc, #12]	; (cef8 <__multadd+0x9c>)
    ceec:	4803      	ldr	r0, [pc, #12]	; (cefc <__multadd+0xa0>)
    ceee:	4622      	mov	r2, r4
    cef0:	21ba      	movs	r1, #186	; 0xba
    cef2:	f004 f875 	bl	10fe0 <__assert_func>
    cef6:	bf00      	nop
    cef8:	200008c8 	.word	0x200008c8
    cefc:	20000a40 	.word	0x20000a40

0000cf00 <__s2b>:
    cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf04:	4617      	mov	r7, r2
    cf06:	4a27      	ldr	r2, [pc, #156]	; (cfa4 <__s2b+0xa4>)
    cf08:	461e      	mov	r6, r3
    cf0a:	3308      	adds	r3, #8
    cf0c:	460c      	mov	r4, r1
    cf0e:	2e09      	cmp	r6, #9
    cf10:	fb82 1203 	smull	r1, r2, r2, r3
    cf14:	ea4f 73e3 	mov.w	r3, r3, asr #31
    cf18:	4605      	mov	r5, r0
    cf1a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    cf1e:	dd39      	ble.n	cf94 <__s2b+0x94>
    cf20:	f04f 0c01 	mov.w	ip, #1
    cf24:	2100      	movs	r1, #0
    cf26:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    cf2a:	4563      	cmp	r3, ip
    cf2c:	f101 0101 	add.w	r1, r1, #1
    cf30:	dcf9      	bgt.n	cf26 <__s2b+0x26>
    cf32:	4628      	mov	r0, r5
    cf34:	f7ff ff62 	bl	cdfc <_Balloc>
    cf38:	4601      	mov	r1, r0
    cf3a:	b368      	cbz	r0, cf98 <__s2b+0x98>
    cf3c:	9b08      	ldr	r3, [sp, #32]
    cf3e:	6143      	str	r3, [r0, #20]
    cf40:	2f09      	cmp	r7, #9
    cf42:	f04f 0301 	mov.w	r3, #1
    cf46:	6103      	str	r3, [r0, #16]
    cf48:	dc12      	bgt.n	cf70 <__s2b+0x70>
    cf4a:	340a      	adds	r4, #10
    cf4c:	2709      	movs	r7, #9
    cf4e:	42be      	cmp	r6, r7
    cf50:	dd0b      	ble.n	cf6a <__s2b+0x6a>
    cf52:	1bf2      	subs	r2, r6, r7
    cf54:	18a6      	adds	r6, r4, r2
    cf56:	f814 3b01 	ldrb.w	r3, [r4], #1
    cf5a:	220a      	movs	r2, #10
    cf5c:	3b30      	subs	r3, #48	; 0x30
    cf5e:	4628      	mov	r0, r5
    cf60:	f7ff ff7c 	bl	ce5c <__multadd>
    cf64:	42a6      	cmp	r6, r4
    cf66:	4601      	mov	r1, r0
    cf68:	d1f5      	bne.n	cf56 <__s2b+0x56>
    cf6a:	4608      	mov	r0, r1
    cf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cf70:	f104 0909 	add.w	r9, r4, #9
    cf74:	46c8      	mov	r8, r9
    cf76:	443c      	add	r4, r7
    cf78:	f818 3b01 	ldrb.w	r3, [r8], #1
    cf7c:	220a      	movs	r2, #10
    cf7e:	3b30      	subs	r3, #48	; 0x30
    cf80:	4628      	mov	r0, r5
    cf82:	f7ff ff6b 	bl	ce5c <__multadd>
    cf86:	45a0      	cmp	r8, r4
    cf88:	4601      	mov	r1, r0
    cf8a:	d1f5      	bne.n	cf78 <__s2b+0x78>
    cf8c:	f1a7 0408 	sub.w	r4, r7, #8
    cf90:	444c      	add	r4, r9
    cf92:	e7dc      	b.n	cf4e <__s2b+0x4e>
    cf94:	2100      	movs	r1, #0
    cf96:	e7cc      	b.n	cf32 <__s2b+0x32>
    cf98:	460a      	mov	r2, r1
    cf9a:	4b03      	ldr	r3, [pc, #12]	; (cfa8 <__s2b+0xa8>)
    cf9c:	4803      	ldr	r0, [pc, #12]	; (cfac <__s2b+0xac>)
    cf9e:	21d3      	movs	r1, #211	; 0xd3
    cfa0:	f004 f81e 	bl	10fe0 <__assert_func>
    cfa4:	38e38e39 	.word	0x38e38e39
    cfa8:	200008c8 	.word	0x200008c8
    cfac:	20000a40 	.word	0x20000a40

0000cfb0 <__hi0bits>:
    cfb0:	0c03      	lsrs	r3, r0, #16
    cfb2:	041b      	lsls	r3, r3, #16
    cfb4:	b9d3      	cbnz	r3, cfec <__hi0bits+0x3c>
    cfb6:	0400      	lsls	r0, r0, #16
    cfb8:	2310      	movs	r3, #16
    cfba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cfbe:	bf04      	itt	eq
    cfc0:	0200      	lsleq	r0, r0, #8
    cfc2:	3308      	addeq	r3, #8
    cfc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    cfc8:	bf04      	itt	eq
    cfca:	0100      	lsleq	r0, r0, #4
    cfcc:	3304      	addeq	r3, #4
    cfce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    cfd2:	bf04      	itt	eq
    cfd4:	0080      	lsleq	r0, r0, #2
    cfd6:	3302      	addeq	r3, #2
    cfd8:	2800      	cmp	r0, #0
    cfda:	db05      	blt.n	cfe8 <__hi0bits+0x38>
    cfdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    cfe0:	f103 0301 	add.w	r3, r3, #1
    cfe4:	bf08      	it	eq
    cfe6:	2320      	moveq	r3, #32
    cfe8:	4618      	mov	r0, r3
    cfea:	4770      	bx	lr
    cfec:	2300      	movs	r3, #0
    cfee:	e7e4      	b.n	cfba <__hi0bits+0xa>

0000cff0 <__lo0bits>:
    cff0:	6803      	ldr	r3, [r0, #0]
    cff2:	f013 0207 	ands.w	r2, r3, #7
    cff6:	d008      	beq.n	d00a <__lo0bits+0x1a>
    cff8:	07d9      	lsls	r1, r3, #31
    cffa:	d41f      	bmi.n	d03c <__lo0bits+0x4c>
    cffc:	079a      	lsls	r2, r3, #30
    cffe:	d522      	bpl.n	d046 <__lo0bits+0x56>
    d000:	085b      	lsrs	r3, r3, #1
    d002:	6003      	str	r3, [r0, #0]
    d004:	2201      	movs	r2, #1
    d006:	4610      	mov	r0, r2
    d008:	4770      	bx	lr
    d00a:	b299      	uxth	r1, r3
    d00c:	b909      	cbnz	r1, d012 <__lo0bits+0x22>
    d00e:	0c1b      	lsrs	r3, r3, #16
    d010:	2210      	movs	r2, #16
    d012:	b2d9      	uxtb	r1, r3
    d014:	b909      	cbnz	r1, d01a <__lo0bits+0x2a>
    d016:	3208      	adds	r2, #8
    d018:	0a1b      	lsrs	r3, r3, #8
    d01a:	0719      	lsls	r1, r3, #28
    d01c:	bf04      	itt	eq
    d01e:	091b      	lsreq	r3, r3, #4
    d020:	3204      	addeq	r2, #4
    d022:	0799      	lsls	r1, r3, #30
    d024:	bf04      	itt	eq
    d026:	089b      	lsreq	r3, r3, #2
    d028:	3202      	addeq	r2, #2
    d02a:	07d9      	lsls	r1, r3, #31
    d02c:	d403      	bmi.n	d036 <__lo0bits+0x46>
    d02e:	085b      	lsrs	r3, r3, #1
    d030:	f102 0201 	add.w	r2, r2, #1
    d034:	d005      	beq.n	d042 <__lo0bits+0x52>
    d036:	6003      	str	r3, [r0, #0]
    d038:	4610      	mov	r0, r2
    d03a:	4770      	bx	lr
    d03c:	2200      	movs	r2, #0
    d03e:	4610      	mov	r0, r2
    d040:	4770      	bx	lr
    d042:	2220      	movs	r2, #32
    d044:	e7df      	b.n	d006 <__lo0bits+0x16>
    d046:	089b      	lsrs	r3, r3, #2
    d048:	2202      	movs	r2, #2
    d04a:	6003      	str	r3, [r0, #0]
    d04c:	4610      	mov	r0, r2
    d04e:	4770      	bx	lr

0000d050 <__i2b>:
    d050:	b538      	push	{r3, r4, r5, lr}
    d052:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d054:	4604      	mov	r4, r0
    d056:	460d      	mov	r5, r1
    d058:	b14b      	cbz	r3, d06e <__i2b+0x1e>
    d05a:	6858      	ldr	r0, [r3, #4]
    d05c:	b1b0      	cbz	r0, d08c <__i2b+0x3c>
    d05e:	6802      	ldr	r2, [r0, #0]
    d060:	605a      	str	r2, [r3, #4]
    d062:	2200      	movs	r2, #0
    d064:	2301      	movs	r3, #1
    d066:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d06a:	60c2      	str	r2, [r0, #12]
    d06c:	bd38      	pop	{r3, r4, r5, pc}
    d06e:	2221      	movs	r2, #33	; 0x21
    d070:	2104      	movs	r1, #4
    d072:	f003 ffd5 	bl	11020 <_calloc_r>
    d076:	4603      	mov	r3, r0
    d078:	6460      	str	r0, [r4, #68]	; 0x44
    d07a:	2800      	cmp	r0, #0
    d07c:	d1ed      	bne.n	d05a <__i2b+0xa>
    d07e:	4b09      	ldr	r3, [pc, #36]	; (d0a4 <__i2b+0x54>)
    d080:	4809      	ldr	r0, [pc, #36]	; (d0a8 <__i2b+0x58>)
    d082:	2200      	movs	r2, #0
    d084:	f240 1145 	movw	r1, #325	; 0x145
    d088:	f003 ffaa 	bl	10fe0 <__assert_func>
    d08c:	221c      	movs	r2, #28
    d08e:	2101      	movs	r1, #1
    d090:	4620      	mov	r0, r4
    d092:	f003 ffc5 	bl	11020 <_calloc_r>
    d096:	2800      	cmp	r0, #0
    d098:	d0f1      	beq.n	d07e <__i2b+0x2e>
    d09a:	2201      	movs	r2, #1
    d09c:	2302      	movs	r3, #2
    d09e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d0a2:	e7de      	b.n	d062 <__i2b+0x12>
    d0a4:	200008c8 	.word	0x200008c8
    d0a8:	20000a40 	.word	0x20000a40

0000d0ac <__multiply>:
    d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0b0:	690e      	ldr	r6, [r1, #16]
    d0b2:	6915      	ldr	r5, [r2, #16]
    d0b4:	42ae      	cmp	r6, r5
    d0b6:	b085      	sub	sp, #20
    d0b8:	4688      	mov	r8, r1
    d0ba:	4614      	mov	r4, r2
    d0bc:	db05      	blt.n	d0ca <__multiply+0x1e>
    d0be:	462a      	mov	r2, r5
    d0c0:	4623      	mov	r3, r4
    d0c2:	4635      	mov	r5, r6
    d0c4:	460c      	mov	r4, r1
    d0c6:	4616      	mov	r6, r2
    d0c8:	4698      	mov	r8, r3
    d0ca:	68a3      	ldr	r3, [r4, #8]
    d0cc:	6861      	ldr	r1, [r4, #4]
    d0ce:	19af      	adds	r7, r5, r6
    d0d0:	42bb      	cmp	r3, r7
    d0d2:	bfb8      	it	lt
    d0d4:	3101      	addlt	r1, #1
    d0d6:	f7ff fe91 	bl	cdfc <_Balloc>
    d0da:	9001      	str	r0, [sp, #4]
    d0dc:	2800      	cmp	r0, #0
    d0de:	f000 8087 	beq.w	d1f0 <__multiply+0x144>
    d0e2:	9b01      	ldr	r3, [sp, #4]
    d0e4:	f103 0914 	add.w	r9, r3, #20
    d0e8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d0ec:	45d1      	cmp	r9, sl
    d0ee:	d205      	bcs.n	d0fc <__multiply+0x50>
    d0f0:	464b      	mov	r3, r9
    d0f2:	2200      	movs	r2, #0
    d0f4:	f843 2b04 	str.w	r2, [r3], #4
    d0f8:	459a      	cmp	sl, r3
    d0fa:	d8fb      	bhi.n	d0f4 <__multiply+0x48>
    d0fc:	f108 0814 	add.w	r8, r8, #20
    d100:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d104:	f104 0314 	add.w	r3, r4, #20
    d108:	45d8      	cmp	r8, fp
    d10a:	461a      	mov	r2, r3
    d10c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d110:	d25f      	bcs.n	d1d2 <__multiply+0x126>
    d112:	1b2b      	subs	r3, r5, r4
    d114:	3b15      	subs	r3, #21
    d116:	f023 0303 	bic.w	r3, r3, #3
    d11a:	3304      	adds	r3, #4
    d11c:	3415      	adds	r4, #21
    d11e:	42a5      	cmp	r5, r4
    d120:	bf38      	it	cc
    d122:	2304      	movcc	r3, #4
    d124:	e9cd a702 	strd	sl, r7, [sp, #8]
    d128:	46ac      	mov	ip, r5
    d12a:	461f      	mov	r7, r3
    d12c:	4692      	mov	sl, r2
    d12e:	e005      	b.n	d13c <__multiply+0x90>
    d130:	0c09      	lsrs	r1, r1, #16
    d132:	d129      	bne.n	d188 <__multiply+0xdc>
    d134:	45c3      	cmp	fp, r8
    d136:	f109 0904 	add.w	r9, r9, #4
    d13a:	d948      	bls.n	d1ce <__multiply+0x122>
    d13c:	f858 1b04 	ldr.w	r1, [r8], #4
    d140:	b28d      	uxth	r5, r1
    d142:	2d00      	cmp	r5, #0
    d144:	d0f4      	beq.n	d130 <__multiply+0x84>
    d146:	4656      	mov	r6, sl
    d148:	464c      	mov	r4, r9
    d14a:	2300      	movs	r3, #0
    d14c:	f856 1b04 	ldr.w	r1, [r6], #4
    d150:	6822      	ldr	r2, [r4, #0]
    d152:	fa1f fe81 	uxth.w	lr, r1
    d156:	b290      	uxth	r0, r2
    d158:	0c09      	lsrs	r1, r1, #16
    d15a:	fb05 000e 	mla	r0, r5, lr, r0
    d15e:	0c12      	lsrs	r2, r2, #16
    d160:	4403      	add	r3, r0
    d162:	fb05 2201 	mla	r2, r5, r1, r2
    d166:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d16a:	b29b      	uxth	r3, r3
    d16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d170:	45b4      	cmp	ip, r6
    d172:	f844 3b04 	str.w	r3, [r4], #4
    d176:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d17a:	d8e7      	bhi.n	d14c <__multiply+0xa0>
    d17c:	f849 3007 	str.w	r3, [r9, r7]
    d180:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d184:	0c09      	lsrs	r1, r1, #16
    d186:	d0d5      	beq.n	d134 <__multiply+0x88>
    d188:	f8d9 3000 	ldr.w	r3, [r9]
    d18c:	4650      	mov	r0, sl
    d18e:	461a      	mov	r2, r3
    d190:	464c      	mov	r4, r9
    d192:	2600      	movs	r6, #0
    d194:	8805      	ldrh	r5, [r0, #0]
    d196:	0c12      	lsrs	r2, r2, #16
    d198:	fb01 2205 	mla	r2, r1, r5, r2
    d19c:	4416      	add	r6, r2
    d19e:	b29b      	uxth	r3, r3
    d1a0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d1a4:	f844 3b04 	str.w	r3, [r4], #4
    d1a8:	f850 5b04 	ldr.w	r5, [r0], #4
    d1ac:	6822      	ldr	r2, [r4, #0]
    d1ae:	0c2d      	lsrs	r5, r5, #16
    d1b0:	b293      	uxth	r3, r2
    d1b2:	fb01 3305 	mla	r3, r1, r5, r3
    d1b6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d1ba:	4584      	cmp	ip, r0
    d1bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d1c0:	d8e8      	bhi.n	d194 <__multiply+0xe8>
    d1c2:	45c3      	cmp	fp, r8
    d1c4:	f849 3007 	str.w	r3, [r9, r7]
    d1c8:	f109 0904 	add.w	r9, r9, #4
    d1cc:	d8b6      	bhi.n	d13c <__multiply+0x90>
    d1ce:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d1d2:	2f00      	cmp	r7, #0
    d1d4:	dc02      	bgt.n	d1dc <__multiply+0x130>
    d1d6:	e005      	b.n	d1e4 <__multiply+0x138>
    d1d8:	3f01      	subs	r7, #1
    d1da:	d003      	beq.n	d1e4 <__multiply+0x138>
    d1dc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d0f9      	beq.n	d1d8 <__multiply+0x12c>
    d1e4:	9b01      	ldr	r3, [sp, #4]
    d1e6:	4618      	mov	r0, r3
    d1e8:	611f      	str	r7, [r3, #16]
    d1ea:	b005      	add	sp, #20
    d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1f0:	4b03      	ldr	r3, [pc, #12]	; (d200 <__multiply+0x154>)
    d1f2:	4804      	ldr	r0, [pc, #16]	; (d204 <__multiply+0x158>)
    d1f4:	9a01      	ldr	r2, [sp, #4]
    d1f6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d1fa:	f003 fef1 	bl	10fe0 <__assert_func>
    d1fe:	bf00      	nop
    d200:	200008c8 	.word	0x200008c8
    d204:	20000a40 	.word	0x20000a40

0000d208 <__pow5mult>:
    d208:	f012 0303 	ands.w	r3, r2, #3
    d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d210:	4614      	mov	r4, r2
    d212:	4606      	mov	r6, r0
    d214:	d132      	bne.n	d27c <__pow5mult+0x74>
    d216:	460d      	mov	r5, r1
    d218:	10a4      	asrs	r4, r4, #2
    d21a:	d020      	beq.n	d25e <__pow5mult+0x56>
    d21c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d220:	f1b8 0f00 	cmp.w	r8, #0
    d224:	d033      	beq.n	d28e <__pow5mult+0x86>
    d226:	07e3      	lsls	r3, r4, #31
    d228:	f04f 0700 	mov.w	r7, #0
    d22c:	d407      	bmi.n	d23e <__pow5mult+0x36>
    d22e:	1064      	asrs	r4, r4, #1
    d230:	d015      	beq.n	d25e <__pow5mult+0x56>
    d232:	f8d8 0000 	ldr.w	r0, [r8]
    d236:	b1a8      	cbz	r0, d264 <__pow5mult+0x5c>
    d238:	4680      	mov	r8, r0
    d23a:	07e3      	lsls	r3, r4, #31
    d23c:	d5f7      	bpl.n	d22e <__pow5mult+0x26>
    d23e:	4642      	mov	r2, r8
    d240:	4629      	mov	r1, r5
    d242:	4630      	mov	r0, r6
    d244:	f7ff ff32 	bl	d0ac <__multiply>
    d248:	b1b5      	cbz	r5, d278 <__pow5mult+0x70>
    d24a:	6869      	ldr	r1, [r5, #4]
    d24c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d24e:	1064      	asrs	r4, r4, #1
    d250:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d254:	602a      	str	r2, [r5, #0]
    d256:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d25a:	4605      	mov	r5, r0
    d25c:	d1e9      	bne.n	d232 <__pow5mult+0x2a>
    d25e:	4628      	mov	r0, r5
    d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d264:	4642      	mov	r2, r8
    d266:	4641      	mov	r1, r8
    d268:	4630      	mov	r0, r6
    d26a:	f7ff ff1f 	bl	d0ac <__multiply>
    d26e:	f8c8 0000 	str.w	r0, [r8]
    d272:	6007      	str	r7, [r0, #0]
    d274:	4680      	mov	r8, r0
    d276:	e7e0      	b.n	d23a <__pow5mult+0x32>
    d278:	4605      	mov	r5, r0
    d27a:	e7d8      	b.n	d22e <__pow5mult+0x26>
    d27c:	3b01      	subs	r3, #1
    d27e:	4a0f      	ldr	r2, [pc, #60]	; (d2bc <__pow5mult+0xb4>)
    d280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d284:	2300      	movs	r3, #0
    d286:	f7ff fde9 	bl	ce5c <__multadd>
    d28a:	4605      	mov	r5, r0
    d28c:	e7c4      	b.n	d218 <__pow5mult+0x10>
    d28e:	2101      	movs	r1, #1
    d290:	4630      	mov	r0, r6
    d292:	f7ff fdb3 	bl	cdfc <_Balloc>
    d296:	4680      	mov	r8, r0
    d298:	b140      	cbz	r0, d2ac <__pow5mult+0xa4>
    d29a:	2301      	movs	r3, #1
    d29c:	f240 2271 	movw	r2, #625	; 0x271
    d2a0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d2a4:	2300      	movs	r3, #0
    d2a6:	6430      	str	r0, [r6, #64]	; 0x40
    d2a8:	6003      	str	r3, [r0, #0]
    d2aa:	e7bc      	b.n	d226 <__pow5mult+0x1e>
    d2ac:	4b04      	ldr	r3, [pc, #16]	; (d2c0 <__pow5mult+0xb8>)
    d2ae:	4805      	ldr	r0, [pc, #20]	; (d2c4 <__pow5mult+0xbc>)
    d2b0:	4642      	mov	r2, r8
    d2b2:	f240 1145 	movw	r1, #325	; 0x145
    d2b6:	f003 fe93 	bl	10fe0 <__assert_func>
    d2ba:	bf00      	nop
    d2bc:	20007a9c 	.word	0x20007a9c
    d2c0:	200008c8 	.word	0x200008c8
    d2c4:	20000a40 	.word	0x20000a40

0000d2c8 <__lshift>:
    d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2cc:	460d      	mov	r5, r1
    d2ce:	4614      	mov	r4, r2
    d2d0:	692f      	ldr	r7, [r5, #16]
    d2d2:	68ab      	ldr	r3, [r5, #8]
    d2d4:	6849      	ldr	r1, [r1, #4]
    d2d6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    d2da:	1c7e      	adds	r6, r7, #1
    d2dc:	429e      	cmp	r6, r3
    d2de:	4680      	mov	r8, r0
    d2e0:	ea4f 1962 	mov.w	r9, r2, asr #5
    d2e4:	dd04      	ble.n	d2f0 <__lshift+0x28>
    d2e6:	005b      	lsls	r3, r3, #1
    d2e8:	429e      	cmp	r6, r3
    d2ea:	f101 0101 	add.w	r1, r1, #1
    d2ee:	dcfa      	bgt.n	d2e6 <__lshift+0x1e>
    d2f0:	4640      	mov	r0, r8
    d2f2:	f7ff fd83 	bl	cdfc <_Balloc>
    d2f6:	4684      	mov	ip, r0
    d2f8:	2800      	cmp	r0, #0
    d2fa:	d052      	beq.n	d3a2 <__lshift+0xda>
    d2fc:	f1b9 0f00 	cmp.w	r9, #0
    d300:	f100 0214 	add.w	r2, r0, #20
    d304:	dd0e      	ble.n	d324 <__lshift+0x5c>
    d306:	f109 0105 	add.w	r1, r9, #5
    d30a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    d30e:	4613      	mov	r3, r2
    d310:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d314:	2000      	movs	r0, #0
    d316:	f843 0b04 	str.w	r0, [r3], #4
    d31a:	428b      	cmp	r3, r1
    d31c:	d1fb      	bne.n	d316 <__lshift+0x4e>
    d31e:	f1ae 0314 	sub.w	r3, lr, #20
    d322:	441a      	add	r2, r3
    d324:	6929      	ldr	r1, [r5, #16]
    d326:	f105 0314 	add.w	r3, r5, #20
    d32a:	f014 0e1f 	ands.w	lr, r4, #31
    d32e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d332:	d02e      	beq.n	d392 <__lshift+0xca>
    d334:	f1ce 0920 	rsb	r9, lr, #32
    d338:	4610      	mov	r0, r2
    d33a:	f04f 0a00 	mov.w	sl, #0
    d33e:	681c      	ldr	r4, [r3, #0]
    d340:	fa04 f40e 	lsl.w	r4, r4, lr
    d344:	ea44 040a 	orr.w	r4, r4, sl
    d348:	f840 4b04 	str.w	r4, [r0], #4
    d34c:	f853 4b04 	ldr.w	r4, [r3], #4
    d350:	4299      	cmp	r1, r3
    d352:	fa24 fa09 	lsr.w	sl, r4, r9
    d356:	d8f2      	bhi.n	d33e <__lshift+0x76>
    d358:	1b4b      	subs	r3, r1, r5
    d35a:	3b15      	subs	r3, #21
    d35c:	f023 0303 	bic.w	r3, r3, #3
    d360:	3304      	adds	r3, #4
    d362:	f105 0015 	add.w	r0, r5, #21
    d366:	4281      	cmp	r1, r0
    d368:	bf38      	it	cc
    d36a:	2304      	movcc	r3, #4
    d36c:	f1ba 0f00 	cmp.w	sl, #0
    d370:	bf18      	it	ne
    d372:	4637      	movne	r7, r6
    d374:	f842 a003 	str.w	sl, [r2, r3]
    d378:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d37c:	686a      	ldr	r2, [r5, #4]
    d37e:	f8cc 7010 	str.w	r7, [ip, #16]
    d382:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d386:	6029      	str	r1, [r5, #0]
    d388:	4660      	mov	r0, ip
    d38a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    d38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d392:	3a04      	subs	r2, #4
    d394:	f853 0b04 	ldr.w	r0, [r3], #4
    d398:	f842 0f04 	str.w	r0, [r2, #4]!
    d39c:	4299      	cmp	r1, r3
    d39e:	d8f9      	bhi.n	d394 <__lshift+0xcc>
    d3a0:	e7ea      	b.n	d378 <__lshift+0xb0>
    d3a2:	4b03      	ldr	r3, [pc, #12]	; (d3b0 <__lshift+0xe8>)
    d3a4:	4803      	ldr	r0, [pc, #12]	; (d3b4 <__lshift+0xec>)
    d3a6:	4662      	mov	r2, ip
    d3a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d3ac:	f003 fe18 	bl	10fe0 <__assert_func>
    d3b0:	200008c8 	.word	0x200008c8
    d3b4:	20000a40 	.word	0x20000a40

0000d3b8 <__mcmp>:
    d3b8:	690b      	ldr	r3, [r1, #16]
    d3ba:	4684      	mov	ip, r0
    d3bc:	6900      	ldr	r0, [r0, #16]
    d3be:	1ac0      	subs	r0, r0, r3
    d3c0:	d116      	bne.n	d3f0 <__mcmp+0x38>
    d3c2:	f10c 0c14 	add.w	ip, ip, #20
    d3c6:	3114      	adds	r1, #20
    d3c8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d3cc:	b410      	push	{r4}
    d3ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d3d2:	e001      	b.n	d3d8 <__mcmp+0x20>
    d3d4:	4594      	cmp	ip, r2
    d3d6:	d208      	bcs.n	d3ea <__mcmp+0x32>
    d3d8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d3dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d3e0:	428c      	cmp	r4, r1
    d3e2:	d0f7      	beq.n	d3d4 <__mcmp+0x1c>
    d3e4:	d205      	bcs.n	d3f2 <__mcmp+0x3a>
    d3e6:	f04f 30ff 	mov.w	r0, #4294967295
    d3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    d3ee:	4770      	bx	lr
    d3f0:	4770      	bx	lr
    d3f2:	2001      	movs	r0, #1
    d3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    d3f8:	4770      	bx	lr
    d3fa:	bf00      	nop

0000d3fc <__mdiff>:
    d3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d400:	690f      	ldr	r7, [r1, #16]
    d402:	6913      	ldr	r3, [r2, #16]
    d404:	1aff      	subs	r7, r7, r3
    d406:	2f00      	cmp	r7, #0
    d408:	460e      	mov	r6, r1
    d40a:	4690      	mov	r8, r2
    d40c:	d17f      	bne.n	d50e <__mdiff+0x112>
    d40e:	f101 0514 	add.w	r5, r1, #20
    d412:	3214      	adds	r2, #20
    d414:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d418:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d41c:	e001      	b.n	d422 <__mdiff+0x26>
    d41e:	429d      	cmp	r5, r3
    d420:	d278      	bcs.n	d514 <__mdiff+0x118>
    d422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d426:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d42a:	42a1      	cmp	r1, r4
    d42c:	d0f7      	beq.n	d41e <__mdiff+0x22>
    d42e:	d369      	bcc.n	d504 <__mdiff+0x108>
    d430:	6871      	ldr	r1, [r6, #4]
    d432:	f7ff fce3 	bl	cdfc <_Balloc>
    d436:	4681      	mov	r9, r0
    d438:	2800      	cmp	r0, #0
    d43a:	d077      	beq.n	d52c <__mdiff+0x130>
    d43c:	6935      	ldr	r5, [r6, #16]
    d43e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d442:	60c7      	str	r7, [r0, #12]
    d444:	f108 0e14 	add.w	lr, r8, #20
    d448:	f106 0014 	add.w	r0, r6, #20
    d44c:	f109 0a14 	add.w	sl, r9, #20
    d450:	f106 0110 	add.w	r1, r6, #16
    d454:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d458:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d45c:	4656      	mov	r6, sl
    d45e:	f04f 0c00 	mov.w	ip, #0
    d462:	f85e 4b04 	ldr.w	r4, [lr], #4
    d466:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d46a:	b2a3      	uxth	r3, r4
    d46c:	fa1c fc8b 	uxtah	ip, ip, fp
    d470:	ebac 0303 	sub.w	r3, ip, r3
    d474:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d478:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d47c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d480:	b29b      	uxth	r3, r3
    d482:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d486:	4572      	cmp	r2, lr
    d488:	f846 3b04 	str.w	r3, [r6], #4
    d48c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d490:	d8e7      	bhi.n	d462 <__mdiff+0x66>
    d492:	eba2 0108 	sub.w	r1, r2, r8
    d496:	3915      	subs	r1, #21
    d498:	f108 0815 	add.w	r8, r8, #21
    d49c:	4542      	cmp	r2, r8
    d49e:	f021 0403 	bic.w	r4, r1, #3
    d4a2:	f104 0404 	add.w	r4, r4, #4
    d4a6:	bf38      	it	cc
    d4a8:	2404      	movcc	r4, #4
    d4aa:	4420      	add	r0, r4
    d4ac:	f021 0203 	bic.w	r2, r1, #3
    d4b0:	bf38      	it	cc
    d4b2:	2200      	movcc	r2, #0
    d4b4:	4287      	cmp	r7, r0
    d4b6:	4452      	add	r2, sl
    d4b8:	4454      	add	r4, sl
    d4ba:	d918      	bls.n	d4ee <__mdiff+0xf2>
    d4bc:	4626      	mov	r6, r4
    d4be:	4601      	mov	r1, r0
    d4c0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4c4:	fa1c fc83 	uxtah	ip, ip, r3
    d4c8:	ea4f 422c 	mov.w	r2, ip, asr #16
    d4cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d4d0:	fa1f fc8c 	uxth.w	ip, ip
    d4d4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d4d8:	428f      	cmp	r7, r1
    d4da:	f846 3b04 	str.w	r3, [r6], #4
    d4de:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d4e2:	d8ed      	bhi.n	d4c0 <__mdiff+0xc4>
    d4e4:	3f01      	subs	r7, #1
    d4e6:	1a3f      	subs	r7, r7, r0
    d4e8:	f027 0703 	bic.w	r7, r7, #3
    d4ec:	19e2      	adds	r2, r4, r7
    d4ee:	b923      	cbnz	r3, d4fa <__mdiff+0xfe>
    d4f0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d4f4:	3d01      	subs	r5, #1
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d0fa      	beq.n	d4f0 <__mdiff+0xf4>
    d4fa:	f8c9 5010 	str.w	r5, [r9, #16]
    d4fe:	4648      	mov	r0, r9
    d500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d504:	4633      	mov	r3, r6
    d506:	2701      	movs	r7, #1
    d508:	4646      	mov	r6, r8
    d50a:	4698      	mov	r8, r3
    d50c:	e790      	b.n	d430 <__mdiff+0x34>
    d50e:	dbf9      	blt.n	d504 <__mdiff+0x108>
    d510:	2700      	movs	r7, #0
    d512:	e78d      	b.n	d430 <__mdiff+0x34>
    d514:	2100      	movs	r1, #0
    d516:	f7ff fc71 	bl	cdfc <_Balloc>
    d51a:	4681      	mov	r9, r0
    d51c:	b168      	cbz	r0, d53a <__mdiff+0x13e>
    d51e:	2201      	movs	r2, #1
    d520:	2300      	movs	r3, #0
    d522:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d526:	4648      	mov	r0, r9
    d528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d52c:	4b06      	ldr	r3, [pc, #24]	; (d548 <__mdiff+0x14c>)
    d52e:	4807      	ldr	r0, [pc, #28]	; (d54c <__mdiff+0x150>)
    d530:	464a      	mov	r2, r9
    d532:	f240 2145 	movw	r1, #581	; 0x245
    d536:	f003 fd53 	bl	10fe0 <__assert_func>
    d53a:	4b03      	ldr	r3, [pc, #12]	; (d548 <__mdiff+0x14c>)
    d53c:	4803      	ldr	r0, [pc, #12]	; (d54c <__mdiff+0x150>)
    d53e:	464a      	mov	r2, r9
    d540:	f240 2137 	movw	r1, #567	; 0x237
    d544:	f003 fd4c 	bl	10fe0 <__assert_func>
    d548:	200008c8 	.word	0x200008c8
    d54c:	20000a40 	.word	0x20000a40

0000d550 <__ulp>:
    d550:	b082      	sub	sp, #8
    d552:	ed8d 0b00 	vstr	d0, [sp]
    d556:	4b16      	ldr	r3, [pc, #88]	; (d5b0 <__ulp+0x60>)
    d558:	9a01      	ldr	r2, [sp, #4]
    d55a:	4013      	ands	r3, r2
    d55c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d560:	2b00      	cmp	r3, #0
    d562:	dd06      	ble.n	d572 <__ulp+0x22>
    d564:	2200      	movs	r2, #0
    d566:	4619      	mov	r1, r3
    d568:	4610      	mov	r0, r2
    d56a:	ec41 0b10 	vmov	d0, r0, r1
    d56e:	b002      	add	sp, #8
    d570:	4770      	bx	lr
    d572:	425b      	negs	r3, r3
    d574:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d578:	ea4f 5223 	mov.w	r2, r3, asr #20
    d57c:	da09      	bge.n	d592 <__ulp+0x42>
    d57e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d582:	4113      	asrs	r3, r2
    d584:	2200      	movs	r2, #0
    d586:	4619      	mov	r1, r3
    d588:	4610      	mov	r0, r2
    d58a:	ec41 0b10 	vmov	d0, r0, r1
    d58e:	b002      	add	sp, #8
    d590:	4770      	bx	lr
    d592:	f1a2 0314 	sub.w	r3, r2, #20
    d596:	2b1e      	cmp	r3, #30
    d598:	bfda      	itte	le
    d59a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d59e:	40da      	lsrle	r2, r3
    d5a0:	2201      	movgt	r2, #1
    d5a2:	2300      	movs	r3, #0
    d5a4:	4619      	mov	r1, r3
    d5a6:	4610      	mov	r0, r2
    d5a8:	ec41 0b10 	vmov	d0, r0, r1
    d5ac:	b002      	add	sp, #8
    d5ae:	4770      	bx	lr
    d5b0:	7ff00000 	.word	0x7ff00000

0000d5b4 <__b2d>:
    d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5b6:	6904      	ldr	r4, [r0, #16]
    d5b8:	f100 0614 	add.w	r6, r0, #20
    d5bc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d5c0:	1f27      	subs	r7, r4, #4
    d5c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d5c6:	4628      	mov	r0, r5
    d5c8:	f7ff fcf2 	bl	cfb0 <__hi0bits>
    d5cc:	f1c0 0320 	rsb	r3, r0, #32
    d5d0:	280a      	cmp	r0, #10
    d5d2:	600b      	str	r3, [r1, #0]
    d5d4:	dd1b      	ble.n	d60e <__b2d+0x5a>
    d5d6:	42be      	cmp	r6, r7
    d5d8:	d20b      	bcs.n	d5f2 <__b2d+0x3e>
    d5da:	380b      	subs	r0, #11
    d5dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d5e0:	d12e      	bne.n	d640 <__b2d+0x8c>
    d5e2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d5e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d5ea:	460a      	mov	r2, r1
    d5ec:	ec43 2b10 	vmov	d0, r2, r3
    d5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5f2:	f1b0 010b 	subs.w	r1, r0, #11
    d5f6:	d0f4      	beq.n	d5e2 <__b2d+0x2e>
    d5f8:	fa05 f101 	lsl.w	r1, r5, r1
    d5fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d600:	2100      	movs	r1, #0
    d602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d606:	460a      	mov	r2, r1
    d608:	ec43 2b10 	vmov	d0, r2, r3
    d60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d60e:	f1c0 0c0b 	rsb	ip, r0, #11
    d612:	fa25 f10c 	lsr.w	r1, r5, ip
    d616:	42be      	cmp	r6, r7
    d618:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d61c:	bf38      	it	cc
    d61e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d622:	f100 0015 	add.w	r0, r0, #21
    d626:	bf34      	ite	cc
    d628:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d62c:	2100      	movcs	r1, #0
    d62e:	fa05 f000 	lsl.w	r0, r5, r0
    d632:	4301      	orrs	r1, r0
    d634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d638:	460a      	mov	r2, r1
    d63a:	ec43 2b10 	vmov	d0, r2, r3
    d63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d640:	f1c0 0c20 	rsb	ip, r0, #32
    d644:	4085      	lsls	r5, r0
    d646:	fa21 f30c 	lsr.w	r3, r1, ip
    d64a:	ea45 0703 	orr.w	r7, r5, r3
    d64e:	f1a4 0508 	sub.w	r5, r4, #8
    d652:	42ae      	cmp	r6, r5
    d654:	fa01 f100 	lsl.w	r1, r1, r0
    d658:	bf3c      	itt	cc
    d65a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d65e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d662:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d666:	bf38      	it	cc
    d668:	4301      	orrcc	r1, r0
    d66a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d66e:	460a      	mov	r2, r1
    d670:	ec43 2b10 	vmov	d0, r2, r3
    d674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d676:	bf00      	nop

0000d678 <__d2b>:
    d678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d67c:	4688      	mov	r8, r1
    d67e:	b083      	sub	sp, #12
    d680:	2101      	movs	r1, #1
    d682:	ec57 6b10 	vmov	r6, r7, d0
    d686:	4615      	mov	r5, r2
    d688:	f7ff fbb8 	bl	cdfc <_Balloc>
    d68c:	4604      	mov	r4, r0
    d68e:	2800      	cmp	r0, #0
    d690:	d051      	beq.n	d736 <__d2b+0xbe>
    d692:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d696:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d69a:	f1b9 0f00 	cmp.w	r9, #0
    d69e:	d001      	beq.n	d6a4 <__d2b+0x2c>
    d6a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d6a4:	2e00      	cmp	r6, #0
    d6a6:	9301      	str	r3, [sp, #4]
    d6a8:	d118      	bne.n	d6dc <__d2b+0x64>
    d6aa:	a801      	add	r0, sp, #4
    d6ac:	f7ff fca0 	bl	cff0 <__lo0bits>
    d6b0:	9a01      	ldr	r2, [sp, #4]
    d6b2:	6162      	str	r2, [r4, #20]
    d6b4:	2201      	movs	r2, #1
    d6b6:	f100 0320 	add.w	r3, r0, #32
    d6ba:	6122      	str	r2, [r4, #16]
    d6bc:	f1b9 0f00 	cmp.w	r9, #0
    d6c0:	d025      	beq.n	d70e <__d2b+0x96>
    d6c2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d6c6:	eb09 0203 	add.w	r2, r9, r3
    d6ca:	4620      	mov	r0, r4
    d6cc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d6d0:	f8c8 2000 	str.w	r2, [r8]
    d6d4:	602b      	str	r3, [r5, #0]
    d6d6:	b003      	add	sp, #12
    d6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d6dc:	4668      	mov	r0, sp
    d6de:	9600      	str	r6, [sp, #0]
    d6e0:	f7ff fc86 	bl	cff0 <__lo0bits>
    d6e4:	4603      	mov	r3, r0
    d6e6:	b310      	cbz	r0, d72e <__d2b+0xb6>
    d6e8:	e9dd 0200 	ldrd	r0, r2, [sp]
    d6ec:	f1c3 0120 	rsb	r1, r3, #32
    d6f0:	fa02 f101 	lsl.w	r1, r2, r1
    d6f4:	4301      	orrs	r1, r0
    d6f6:	40da      	lsrs	r2, r3
    d6f8:	6161      	str	r1, [r4, #20]
    d6fa:	9201      	str	r2, [sp, #4]
    d6fc:	2a00      	cmp	r2, #0
    d6fe:	61a2      	str	r2, [r4, #24]
    d700:	bf14      	ite	ne
    d702:	2202      	movne	r2, #2
    d704:	2201      	moveq	r2, #1
    d706:	6122      	str	r2, [r4, #16]
    d708:	f1b9 0f00 	cmp.w	r9, #0
    d70c:	d1d9      	bne.n	d6c2 <__d2b+0x4a>
    d70e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d712:	f8c8 3000 	str.w	r3, [r8]
    d716:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d71a:	6918      	ldr	r0, [r3, #16]
    d71c:	f7ff fc48 	bl	cfb0 <__hi0bits>
    d720:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d724:	4620      	mov	r0, r4
    d726:	602b      	str	r3, [r5, #0]
    d728:	b003      	add	sp, #12
    d72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d72e:	9a00      	ldr	r2, [sp, #0]
    d730:	6162      	str	r2, [r4, #20]
    d732:	9a01      	ldr	r2, [sp, #4]
    d734:	e7e2      	b.n	d6fc <__d2b+0x84>
    d736:	4b03      	ldr	r3, [pc, #12]	; (d744 <__d2b+0xcc>)
    d738:	4803      	ldr	r0, [pc, #12]	; (d748 <__d2b+0xd0>)
    d73a:	4622      	mov	r2, r4
    d73c:	f240 310f 	movw	r1, #783	; 0x30f
    d740:	f003 fc4e 	bl	10fe0 <__assert_func>
    d744:	200008c8 	.word	0x200008c8
    d748:	20000a40 	.word	0x20000a40

0000d74c <__ratio>:
    d74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d74e:	b083      	sub	sp, #12
    d750:	460e      	mov	r6, r1
    d752:	4669      	mov	r1, sp
    d754:	4607      	mov	r7, r0
    d756:	f7ff ff2d 	bl	d5b4 <__b2d>
    d75a:	a901      	add	r1, sp, #4
    d75c:	4630      	mov	r0, r6
    d75e:	ec55 4b10 	vmov	r4, r5, d0
    d762:	eeb0 7b40 	vmov.f64	d7, d0
    d766:	f7ff ff25 	bl	d5b4 <__b2d>
    d76a:	6933      	ldr	r3, [r6, #16]
    d76c:	693a      	ldr	r2, [r7, #16]
    d76e:	1ad2      	subs	r2, r2, r3
    d770:	e9dd 3100 	ldrd	r3, r1, [sp]
    d774:	1a5b      	subs	r3, r3, r1
    d776:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d77a:	2b00      	cmp	r3, #0
    d77c:	dd09      	ble.n	d792 <__ratio+0x46>
    d77e:	ee17 2a90 	vmov	r2, s15
    d782:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d786:	ec45 4b17 	vmov	d7, r4, r5
    d78a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d78e:	b003      	add	sp, #12
    d790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d792:	ee10 2a90 	vmov	r2, s1
    d796:	ec51 0b10 	vmov	r0, r1, d0
    d79a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d79e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d7a2:	ec41 0b10 	vmov	d0, r0, r1
    d7a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d7aa:	b003      	add	sp, #12
    d7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7ae:	bf00      	nop

0000d7b0 <__copybits>:
    d7b0:	3901      	subs	r1, #1
    d7b2:	1149      	asrs	r1, r1, #5
    d7b4:	f101 0c01 	add.w	ip, r1, #1
    d7b8:	6911      	ldr	r1, [r2, #16]
    d7ba:	f102 0314 	add.w	r3, r2, #20
    d7be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d7c2:	428b      	cmp	r3, r1
    d7c4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d7c8:	d217      	bcs.n	d7fa <__copybits+0x4a>
    d7ca:	b510      	push	{r4, lr}
    d7cc:	f1a0 0e04 	sub.w	lr, r0, #4
    d7d0:	f853 4b04 	ldr.w	r4, [r3], #4
    d7d4:	f84e 4f04 	str.w	r4, [lr, #4]!
    d7d8:	4299      	cmp	r1, r3
    d7da:	d8f9      	bhi.n	d7d0 <__copybits+0x20>
    d7dc:	1a8a      	subs	r2, r1, r2
    d7de:	f1a2 0315 	sub.w	r3, r2, #21
    d7e2:	f023 0303 	bic.w	r3, r3, #3
    d7e6:	3304      	adds	r3, #4
    d7e8:	4418      	add	r0, r3
    d7ea:	4584      	cmp	ip, r0
    d7ec:	d904      	bls.n	d7f8 <__copybits+0x48>
    d7ee:	2300      	movs	r3, #0
    d7f0:	f840 3b04 	str.w	r3, [r0], #4
    d7f4:	4584      	cmp	ip, r0
    d7f6:	d8fb      	bhi.n	d7f0 <__copybits+0x40>
    d7f8:	bd10      	pop	{r4, pc}
    d7fa:	4584      	cmp	ip, r0
    d7fc:	d905      	bls.n	d80a <__copybits+0x5a>
    d7fe:	2300      	movs	r3, #0
    d800:	f840 3b04 	str.w	r3, [r0], #4
    d804:	4584      	cmp	ip, r0
    d806:	d8fb      	bhi.n	d800 <__copybits+0x50>
    d808:	4770      	bx	lr
    d80a:	4770      	bx	lr

0000d80c <__any_on>:
    d80c:	6903      	ldr	r3, [r0, #16]
    d80e:	114a      	asrs	r2, r1, #5
    d810:	4293      	cmp	r3, r2
    d812:	f100 0014 	add.w	r0, r0, #20
    d816:	da09      	bge.n	d82c <__any_on+0x20>
    d818:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d81c:	e002      	b.n	d824 <__any_on+0x18>
    d81e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d822:	b9c2      	cbnz	r2, d856 <__any_on+0x4a>
    d824:	4283      	cmp	r3, r0
    d826:	d8fa      	bhi.n	d81e <__any_on+0x12>
    d828:	2000      	movs	r0, #0
    d82a:	4770      	bx	lr
    d82c:	dd10      	ble.n	d850 <__any_on+0x44>
    d82e:	f011 011f 	ands.w	r1, r1, #31
    d832:	d00d      	beq.n	d850 <__any_on+0x44>
    d834:	b410      	push	{r4}
    d836:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d83a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d83e:	fa24 f201 	lsr.w	r2, r4, r1
    d842:	408a      	lsls	r2, r1
    d844:	4294      	cmp	r4, r2
    d846:	d00c      	beq.n	d862 <__any_on+0x56>
    d848:	2001      	movs	r0, #1
    d84a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d84e:	4770      	bx	lr
    d850:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d854:	e7e6      	b.n	d824 <__any_on+0x18>
    d856:	2001      	movs	r0, #1
    d858:	4770      	bx	lr
    d85a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d85e:	2a00      	cmp	r2, #0
    d860:	d1f2      	bne.n	d848 <__any_on+0x3c>
    d862:	4283      	cmp	r3, r0
    d864:	d8f9      	bhi.n	d85a <__any_on+0x4e>
    d866:	2000      	movs	r0, #0
    d868:	f85d 4b04 	ldr.w	r4, [sp], #4
    d86c:	4770      	bx	lr
    d86e:	bf00      	nop

0000d870 <__ascii_wctomb>:
    d870:	b149      	cbz	r1, d886 <__ascii_wctomb+0x16>
    d872:	2aff      	cmp	r2, #255	; 0xff
    d874:	d802      	bhi.n	d87c <__ascii_wctomb+0xc>
    d876:	700a      	strb	r2, [r1, #0]
    d878:	2001      	movs	r0, #1
    d87a:	4770      	bx	lr
    d87c:	238a      	movs	r3, #138	; 0x8a
    d87e:	6003      	str	r3, [r0, #0]
    d880:	f04f 30ff 	mov.w	r0, #4294967295
    d884:	4770      	bx	lr
    d886:	4608      	mov	r0, r1
    d888:	4770      	bx	lr
    d88a:	bf00      	nop
    d88c:	0000      	movs	r0, r0
	...

0000d890 <_svfprintf_r>:
    d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d894:	ed2d 8b08 	vpush	{d8-d11}
    d898:	b0d1      	sub	sp, #324	; 0x144
    d89a:	460c      	mov	r4, r1
    d89c:	ee0b 1a10 	vmov	s22, r1
    d8a0:	4690      	mov	r8, r2
    d8a2:	9308      	str	r3, [sp, #32]
    d8a4:	4683      	mov	fp, r0
    d8a6:	f003 fb59 	bl	10f5c <_localeconv_r>
    d8aa:	6803      	ldr	r3, [r0, #0]
    d8ac:	9312      	str	r3, [sp, #72]	; 0x48
    d8ae:	4618      	mov	r0, r3
    d8b0:	f7fe fc66 	bl	c180 <strlen>
    d8b4:	af20      	add	r7, sp, #128	; 0x80
    d8b6:	9010      	str	r0, [sp, #64]	; 0x40
    d8b8:	2208      	movs	r2, #8
    d8ba:	2100      	movs	r1, #0
    d8bc:	4638      	mov	r0, r7
    d8be:	f7fe f8d5 	bl	ba6c <memset>
    d8c2:	89a3      	ldrh	r3, [r4, #12]
    d8c4:	061b      	lsls	r3, r3, #24
    d8c6:	d503      	bpl.n	d8d0 <_svfprintf_r+0x40>
    d8c8:	6923      	ldr	r3, [r4, #16]
    d8ca:	2b00      	cmp	r3, #0
    d8cc:	f000 8755 	beq.w	e77a <_svfprintf_r+0xeea>
    d8d0:	2300      	movs	r3, #0
    d8d2:	ed9f 8b83 	vldr	d8, [pc, #524]	; dae0 <_svfprintf_r+0x250>
    d8d6:	ed9f 9b84 	vldr	d9, [pc, #528]	; dae8 <_svfprintf_r+0x258>
    d8da:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d8de:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d8e2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d8e6:	aa27      	add	r2, sp, #156	; 0x9c
    d8e8:	930e      	str	r3, [sp, #56]	; 0x38
    d8ea:	9224      	str	r2, [sp, #144]	; 0x90
    d8ec:	4692      	mov	sl, r2
    d8ee:	9311      	str	r3, [sp, #68]	; 0x44
    d8f0:	9304      	str	r3, [sp, #16]
    d8f2:	4644      	mov	r4, r8
    d8f4:	46a1      	mov	r9, r4
    d8f6:	4b7e      	ldr	r3, [pc, #504]	; (daf0 <_svfprintf_r+0x260>)
    d8f8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d8fc:	f7fe f980 	bl	bc00 <__locale_mb_cur_max>
    d900:	464a      	mov	r2, r9
    d902:	4603      	mov	r3, r0
    d904:	a91c      	add	r1, sp, #112	; 0x70
    d906:	9700      	str	r7, [sp, #0]
    d908:	4658      	mov	r0, fp
    d90a:	47a8      	blx	r5
    d90c:	2800      	cmp	r0, #0
    d90e:	f000 80b0 	beq.w	da72 <_svfprintf_r+0x1e2>
    d912:	f2c0 80a6 	blt.w	da62 <_svfprintf_r+0x1d2>
    d916:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d918:	2a25      	cmp	r2, #37	; 0x25
    d91a:	4603      	mov	r3, r0
    d91c:	d001      	beq.n	d922 <_svfprintf_r+0x92>
    d91e:	4499      	add	r9, r3
    d920:	e7e9      	b.n	d8f6 <_svfprintf_r+0x66>
    d922:	ebb9 0504 	subs.w	r5, r9, r4
    d926:	4606      	mov	r6, r0
    d928:	f040 80a7 	bne.w	da7a <_svfprintf_r+0x1ea>
    d92c:	2300      	movs	r3, #0
    d92e:	f04f 32ff 	mov.w	r2, #4294967295
    d932:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d936:	4698      	mov	r8, r3
    d938:	9306      	str	r3, [sp, #24]
    d93a:	f109 0901 	add.w	r9, r9, #1
    d93e:	f899 3000 	ldrb.w	r3, [r9]
    d942:	9203      	str	r2, [sp, #12]
    d944:	252b      	movs	r5, #43	; 0x2b
    d946:	2620      	movs	r6, #32
    d948:	f109 0901 	add.w	r9, r9, #1
    d94c:	f1a3 0220 	sub.w	r2, r3, #32
    d950:	2a5a      	cmp	r2, #90	; 0x5a
    d952:	f200 80cf 	bhi.w	daf4 <_svfprintf_r+0x264>
    d956:	e8df f012 	tbh	[pc, r2, lsl #1]
    d95a:	02e8      	.short	0x02e8
    d95c:	00cd00cd 	.word	0x00cd00cd
    d960:	00cd02e3 	.word	0x00cd02e3
    d964:	00cd00cd 	.word	0x00cd00cd
    d968:	00cd006a 	.word	0x00cd006a
    d96c:	020500cd 	.word	0x020500cd
    d970:	00cd0284 	.word	0x00cd0284
    d974:	02c90210 	.word	0x02c90210
    d978:	02bd00cd 	.word	0x02bd00cd
    d97c:	005b005b 	.word	0x005b005b
    d980:	005b005b 	.word	0x005b005b
    d984:	005b005b 	.word	0x005b005b
    d988:	005b005b 	.word	0x005b005b
    d98c:	00cd005b 	.word	0x00cd005b
    d990:	00cd00cd 	.word	0x00cd00cd
    d994:	00cd00cd 	.word	0x00cd00cd
    d998:	00cd00cd 	.word	0x00cd00cd
    d99c:	00cd0153 	.word	0x00cd0153
    d9a0:	021a0183 	.word	0x021a0183
    d9a4:	01530153 	.word	0x01530153
    d9a8:	00cd0153 	.word	0x00cd0153
    d9ac:	00cd00cd 	.word	0x00cd00cd
    d9b0:	021500cd 	.word	0x021500cd
    d9b4:	00cd00cd 	.word	0x00cd00cd
    d9b8:	00cd0296 	.word	0x00cd0296
    d9bc:	00cd00cd 	.word	0x00cd00cd
    d9c0:	00cd01ab 	.word	0x00cd01ab
    d9c4:	00cd02aa 	.word	0x00cd02aa
    d9c8:	06e300cd 	.word	0x06e300cd
    d9cc:	00cd00cd 	.word	0x00cd00cd
    d9d0:	00cd00cd 	.word	0x00cd00cd
    d9d4:	00cd00cd 	.word	0x00cd00cd
    d9d8:	00cd00cd 	.word	0x00cd00cd
    d9dc:	00cd0153 	.word	0x00cd0153
    d9e0:	01de0183 	.word	0x01de0183
    d9e4:	01530153 	.word	0x01530153
    d9e8:	02770153 	.word	0x02770153
    d9ec:	007f01de 	.word	0x007f01de
    d9f0:	028900cd 	.word	0x028900cd
    d9f4:	025f00cd 	.word	0x025f00cd
    d9f8:	022f06e0 	.word	0x022f06e0
    d9fc:	00cd007f 	.word	0x00cd007f
    da00:	007c01ab 	.word	0x007c01ab
    da04:	00cd06b8 	.word	0x00cd06b8
    da08:	06bd00cd 	.word	0x06bd00cd
    da0c:	007c00cd 	.word	0x007c00cd
    da10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    da14:	2100      	movs	r1, #0
    da16:	f819 3b01 	ldrb.w	r3, [r9], #1
    da1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    da1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    da22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    da26:	2a09      	cmp	r2, #9
    da28:	d9f5      	bls.n	da16 <_svfprintf_r+0x186>
    da2a:	9106      	str	r1, [sp, #24]
    da2c:	e78e      	b.n	d94c <_svfprintf_r+0xbc>
    da2e:	4658      	mov	r0, fp
    da30:	f003 fa94 	bl	10f5c <_localeconv_r>
    da34:	6843      	ldr	r3, [r0, #4]
    da36:	9315      	str	r3, [sp, #84]	; 0x54
    da38:	4618      	mov	r0, r3
    da3a:	f7fe fba1 	bl	c180 <strlen>
    da3e:	9016      	str	r0, [sp, #88]	; 0x58
    da40:	4658      	mov	r0, fp
    da42:	f003 fa8b 	bl	10f5c <_localeconv_r>
    da46:	6883      	ldr	r3, [r0, #8]
    da48:	9313      	str	r3, [sp, #76]	; 0x4c
    da4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da4c:	2b00      	cmp	r3, #0
    da4e:	f040 862d 	bne.w	e6ac <_svfprintf_r+0xe1c>
    da52:	f899 3000 	ldrb.w	r3, [r9]
    da56:	e777      	b.n	d948 <_svfprintf_r+0xb8>
    da58:	f899 3000 	ldrb.w	r3, [r9]
    da5c:	f048 0820 	orr.w	r8, r8, #32
    da60:	e772      	b.n	d948 <_svfprintf_r+0xb8>
    da62:	2208      	movs	r2, #8
    da64:	2100      	movs	r1, #0
    da66:	4638      	mov	r0, r7
    da68:	f7fe f800 	bl	ba6c <memset>
    da6c:	2301      	movs	r3, #1
    da6e:	4499      	add	r9, r3
    da70:	e741      	b.n	d8f6 <_svfprintf_r+0x66>
    da72:	ebb9 0504 	subs.w	r5, r9, r4
    da76:	4606      	mov	r6, r0
    da78:	d011      	beq.n	da9e <_svfprintf_r+0x20e>
    da7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    da7c:	442b      	add	r3, r5
    da7e:	9326      	str	r3, [sp, #152]	; 0x98
    da80:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da82:	3301      	adds	r3, #1
    da84:	2b07      	cmp	r3, #7
    da86:	e9ca 4500 	strd	r4, r5, [sl]
    da8a:	9325      	str	r3, [sp, #148]	; 0x94
    da8c:	dc1c      	bgt.n	dac8 <_svfprintf_r+0x238>
    da8e:	f10a 0a08 	add.w	sl, sl, #8
    da92:	9b04      	ldr	r3, [sp, #16]
    da94:	442b      	add	r3, r5
    da96:	9304      	str	r3, [sp, #16]
    da98:	2e00      	cmp	r6, #0
    da9a:	f47f af47 	bne.w	d92c <_svfprintf_r+0x9c>
    da9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    daa0:	2b00      	cmp	r3, #0
    daa2:	f041 820b 	bne.w	eebc <_svfprintf_r+0x162c>
    daa6:	ee1b 3a10 	vmov	r3, s22
    daaa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    daae:	f013 0f40 	tst.w	r3, #64	; 0x40
    dab2:	9b04      	ldr	r3, [sp, #16]
    dab4:	bf18      	it	ne
    dab6:	f04f 33ff 	movne.w	r3, #4294967295
    daba:	9304      	str	r3, [sp, #16]
    dabc:	9804      	ldr	r0, [sp, #16]
    dabe:	b051      	add	sp, #324	; 0x144
    dac0:	ecbd 8b08 	vpop	{d8-d11}
    dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dac8:	ee1b 1a10 	vmov	r1, s22
    dacc:	aa24      	add	r2, sp, #144	; 0x90
    dace:	4658      	mov	r0, fp
    dad0:	f004 fd6a 	bl	125a8 <__ssprint_r>
    dad4:	2800      	cmp	r0, #0
    dad6:	d1e6      	bne.n	daa6 <_svfprintf_r+0x216>
    dad8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dadc:	e7d9      	b.n	da92 <_svfprintf_r+0x202>
    dade:	bf00      	nop
	...
    dae8:	ffffffff 	.word	0xffffffff
    daec:	7fefffff 	.word	0x7fefffff
    daf0:	200085f4 	.word	0x200085f4
    daf4:	930b      	str	r3, [sp, #44]	; 0x2c
    daf6:	2b00      	cmp	r3, #0
    daf8:	d0d1      	beq.n	da9e <_svfprintf_r+0x20e>
    dafa:	2100      	movs	r1, #0
    dafc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    db00:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    db04:	2301      	movs	r3, #1
    db06:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    db0a:	9302      	str	r3, [sp, #8]
    db0c:	9107      	str	r1, [sp, #28]
    db0e:	9305      	str	r3, [sp, #20]
    db10:	9103      	str	r1, [sp, #12]
    db12:	910f      	str	r1, [sp, #60]	; 0x3c
    db14:	ac37      	add	r4, sp, #220	; 0xdc
    db16:	f018 0302 	ands.w	r3, r8, #2
    db1a:	9309      	str	r3, [sp, #36]	; 0x24
    db1c:	d002      	beq.n	db24 <_svfprintf_r+0x294>
    db1e:	9b02      	ldr	r3, [sp, #8]
    db20:	3302      	adds	r3, #2
    db22:	9302      	str	r3, [sp, #8]
    db24:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    db28:	930a      	str	r3, [sp, #40]	; 0x28
    db2a:	d105      	bne.n	db38 <_svfprintf_r+0x2a8>
    db2c:	9b06      	ldr	r3, [sp, #24]
    db2e:	9a02      	ldr	r2, [sp, #8]
    db30:	1a9d      	subs	r5, r3, r2
    db32:	2d00      	cmp	r5, #0
    db34:	f300 8369 	bgt.w	e20a <_svfprintf_r+0x97a>
    db38:	9a26      	ldr	r2, [sp, #152]	; 0x98
    db3a:	b189      	cbz	r1, db60 <_svfprintf_r+0x2d0>
    db3c:	9925      	ldr	r1, [sp, #148]	; 0x94
    db3e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    db42:	3101      	adds	r1, #1
    db44:	3201      	adds	r2, #1
    db46:	f8ca 0000 	str.w	r0, [sl]
    db4a:	2907      	cmp	r1, #7
    db4c:	f04f 0001 	mov.w	r0, #1
    db50:	9226      	str	r2, [sp, #152]	; 0x98
    db52:	9125      	str	r1, [sp, #148]	; 0x94
    db54:	f8ca 0004 	str.w	r0, [sl, #4]
    db58:	f300 83a2 	bgt.w	e2a0 <_svfprintf_r+0xa10>
    db5c:	f10a 0a08 	add.w	sl, sl, #8
    db60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db62:	b183      	cbz	r3, db86 <_svfprintf_r+0x2f6>
    db64:	9b25      	ldr	r3, [sp, #148]	; 0x94
    db66:	a91a      	add	r1, sp, #104	; 0x68
    db68:	3301      	adds	r3, #1
    db6a:	3202      	adds	r2, #2
    db6c:	f8ca 1000 	str.w	r1, [sl]
    db70:	2b07      	cmp	r3, #7
    db72:	f04f 0102 	mov.w	r1, #2
    db76:	9226      	str	r2, [sp, #152]	; 0x98
    db78:	9325      	str	r3, [sp, #148]	; 0x94
    db7a:	f8ca 1004 	str.w	r1, [sl, #4]
    db7e:	f300 83a3 	bgt.w	e2c8 <_svfprintf_r+0xa38>
    db82:	f10a 0a08 	add.w	sl, sl, #8
    db86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    db88:	2b80      	cmp	r3, #128	; 0x80
    db8a:	f000 826c 	beq.w	e066 <_svfprintf_r+0x7d6>
    db8e:	9b03      	ldr	r3, [sp, #12]
    db90:	9905      	ldr	r1, [sp, #20]
    db92:	1a5d      	subs	r5, r3, r1
    db94:	2d00      	cmp	r5, #0
    db96:	f300 82a5 	bgt.w	e0e4 <_svfprintf_r+0x854>
    db9a:	f418 7f80 	tst.w	r8, #256	; 0x100
    db9e:	f040 820d 	bne.w	dfbc <_svfprintf_r+0x72c>
    dba2:	9b05      	ldr	r3, [sp, #20]
    dba4:	f8ca 3004 	str.w	r3, [sl, #4]
    dba8:	441a      	add	r2, r3
    dbaa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbac:	f8ca 4000 	str.w	r4, [sl]
    dbb0:	3301      	adds	r3, #1
    dbb2:	2b07      	cmp	r3, #7
    dbb4:	9226      	str	r2, [sp, #152]	; 0x98
    dbb6:	9325      	str	r3, [sp, #148]	; 0x94
    dbb8:	f300 831b 	bgt.w	e1f2 <_svfprintf_r+0x962>
    dbbc:	f10a 0a08 	add.w	sl, sl, #8
    dbc0:	f018 0f04 	tst.w	r8, #4
    dbc4:	d005      	beq.n	dbd2 <_svfprintf_r+0x342>
    dbc6:	9b06      	ldr	r3, [sp, #24]
    dbc8:	9902      	ldr	r1, [sp, #8]
    dbca:	1a5c      	subs	r4, r3, r1
    dbcc:	2c00      	cmp	r4, #0
    dbce:	f300 8388 	bgt.w	e2e2 <_svfprintf_r+0xa52>
    dbd2:	9b04      	ldr	r3, [sp, #16]
    dbd4:	9906      	ldr	r1, [sp, #24]
    dbd6:	9802      	ldr	r0, [sp, #8]
    dbd8:	4281      	cmp	r1, r0
    dbda:	bfac      	ite	ge
    dbdc:	185b      	addge	r3, r3, r1
    dbde:	181b      	addlt	r3, r3, r0
    dbe0:	9304      	str	r3, [sp, #16]
    dbe2:	2a00      	cmp	r2, #0
    dbe4:	f040 82b0 	bne.w	e148 <_svfprintf_r+0x8b8>
    dbe8:	2300      	movs	r3, #0
    dbea:	9325      	str	r3, [sp, #148]	; 0x94
    dbec:	9b07      	ldr	r3, [sp, #28]
    dbee:	b11b      	cbz	r3, dbf8 <_svfprintf_r+0x368>
    dbf0:	9907      	ldr	r1, [sp, #28]
    dbf2:	4658      	mov	r0, fp
    dbf4:	f7fe fbd6 	bl	c3a4 <_free_r>
    dbf8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dbfc:	464c      	mov	r4, r9
    dbfe:	e679      	b.n	d8f4 <_svfprintf_r+0x64>
    dc00:	930b      	str	r3, [sp, #44]	; 0x2c
    dc02:	9b08      	ldr	r3, [sp, #32]
    dc04:	3307      	adds	r3, #7
    dc06:	f023 0307 	bic.w	r3, r3, #7
    dc0a:	ecb3 8b02 	vldmia	r3!, {d8}
    dc0e:	eeb0 7bc8 	vabs.f64	d7, d8
    dc12:	eeb4 7b49 	vcmp.f64	d7, d9
    dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc1a:	9308      	str	r3, [sp, #32]
    dc1c:	f340 84e9 	ble.w	e5f2 <_svfprintf_r+0xd62>
    dc20:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    dc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc28:	f101 8059 	bmi.w	ecde <_svfprintf_r+0x144e>
    dc2c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dc30:	4cab      	ldr	r4, [pc, #684]	; (dee0 <_svfprintf_r+0x650>)
    dc32:	4bac      	ldr	r3, [pc, #688]	; (dee4 <_svfprintf_r+0x654>)
    dc34:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    dc38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc3a:	2a47      	cmp	r2, #71	; 0x47
    dc3c:	bfc8      	it	gt
    dc3e:	461c      	movgt	r4, r3
    dc40:	2300      	movs	r3, #0
    dc42:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dc46:	2203      	movs	r2, #3
    dc48:	9307      	str	r3, [sp, #28]
    dc4a:	9202      	str	r2, [sp, #8]
    dc4c:	9205      	str	r2, [sp, #20]
    dc4e:	9303      	str	r3, [sp, #12]
    dc50:	930f      	str	r3, [sp, #60]	; 0x3c
    dc52:	2900      	cmp	r1, #0
    dc54:	f43f af5f 	beq.w	db16 <_svfprintf_r+0x286>
    dc58:	9b02      	ldr	r3, [sp, #8]
    dc5a:	3301      	adds	r3, #1
    dc5c:	9302      	str	r3, [sp, #8]
    dc5e:	e75a      	b.n	db16 <_svfprintf_r+0x286>
    dc60:	2b43      	cmp	r3, #67	; 0x43
    dc62:	930b      	str	r3, [sp, #44]	; 0x2c
    dc64:	d003      	beq.n	dc6e <_svfprintf_r+0x3de>
    dc66:	f018 0f10 	tst.w	r8, #16
    dc6a:	f000 855d 	beq.w	e728 <_svfprintf_r+0xe98>
    dc6e:	9d08      	ldr	r5, [sp, #32]
    dc70:	2208      	movs	r2, #8
    dc72:	2100      	movs	r1, #0
    dc74:	a822      	add	r0, sp, #136	; 0x88
    dc76:	ac37      	add	r4, sp, #220	; 0xdc
    dc78:	f7fd fef8 	bl	ba6c <memset>
    dc7c:	ab22      	add	r3, sp, #136	; 0x88
    dc7e:	f855 2b04 	ldr.w	r2, [r5], #4
    dc82:	4621      	mov	r1, r4
    dc84:	4658      	mov	r0, fp
    dc86:	f004 fb65 	bl	12354 <_wcrtomb_r>
    dc8a:	4603      	mov	r3, r0
    dc8c:	3301      	adds	r3, #1
    dc8e:	9005      	str	r0, [sp, #20]
    dc90:	f001 82ee 	beq.w	f270 <_svfprintf_r+0x19e0>
    dc94:	9b05      	ldr	r3, [sp, #20]
    dc96:	9508      	str	r5, [sp, #32]
    dc98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dc9c:	9302      	str	r3, [sp, #8]
    dc9e:	2100      	movs	r1, #0
    dca0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    dca4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    dca8:	9107      	str	r1, [sp, #28]
    dcaa:	9103      	str	r1, [sp, #12]
    dcac:	910f      	str	r1, [sp, #60]	; 0x3c
    dcae:	e732      	b.n	db16 <_svfprintf_r+0x286>
    dcb0:	930b      	str	r3, [sp, #44]	; 0x2c
    dcb2:	9b08      	ldr	r3, [sp, #32]
    dcb4:	461a      	mov	r2, r3
    dcb6:	2300      	movs	r3, #0
    dcb8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    dcbc:	4613      	mov	r3, r2
    dcbe:	f853 4b04 	ldr.w	r4, [r3], #4
    dcc2:	9308      	str	r3, [sp, #32]
    dcc4:	2c00      	cmp	r4, #0
    dcc6:	f000 8548 	beq.w	e75a <_svfprintf_r+0xeca>
    dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dccc:	2b53      	cmp	r3, #83	; 0x53
    dcce:	f000 86ec 	beq.w	eaaa <_svfprintf_r+0x121a>
    dcd2:	f018 0310 	ands.w	r3, r8, #16
    dcd6:	930c      	str	r3, [sp, #48]	; 0x30
    dcd8:	f040 86e7 	bne.w	eaaa <_svfprintf_r+0x121a>
    dcdc:	9b03      	ldr	r3, [sp, #12]
    dcde:	1c5d      	adds	r5, r3, #1
    dce0:	f001 80e5 	beq.w	eeae <_svfprintf_r+0x161e>
    dce4:	990c      	ldr	r1, [sp, #48]	; 0x30
    dce6:	461a      	mov	r2, r3
    dce8:	4620      	mov	r0, r4
    dcea:	f7fe f9f9 	bl	c0e0 <memchr>
    dcee:	9007      	str	r0, [sp, #28]
    dcf0:	2800      	cmp	r0, #0
    dcf2:	f001 8328 	beq.w	f346 <_svfprintf_r+0x1ab6>
    dcf6:	9b07      	ldr	r3, [sp, #28]
    dcf8:	1b1a      	subs	r2, r3, r4
    dcfa:	9205      	str	r2, [sp, #20]
    dcfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dcfe:	9303      	str	r3, [sp, #12]
    dd00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dd04:	930f      	str	r3, [sp, #60]	; 0x3c
    dd06:	930d      	str	r3, [sp, #52]	; 0x34
    dd08:	9307      	str	r3, [sp, #28]
    dd0a:	2373      	movs	r3, #115	; 0x73
    dd0c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dd10:	9202      	str	r2, [sp, #8]
    dd12:	930b      	str	r3, [sp, #44]	; 0x2c
    dd14:	e79d      	b.n	dc52 <_svfprintf_r+0x3c2>
    dd16:	f018 0f20 	tst.w	r8, #32
    dd1a:	930b      	str	r3, [sp, #44]	; 0x2c
    dd1c:	9b08      	ldr	r3, [sp, #32]
    dd1e:	d03d      	beq.n	dd9c <_svfprintf_r+0x50c>
    dd20:	3307      	adds	r3, #7
    dd22:	f023 0307 	bic.w	r3, r3, #7
    dd26:	461a      	mov	r2, r3
    dd28:	4611      	mov	r1, r2
    dd2a:	685b      	ldr	r3, [r3, #4]
    dd2c:	f851 2b08 	ldr.w	r2, [r1], #8
    dd30:	9108      	str	r1, [sp, #32]
    dd32:	4619      	mov	r1, r3
    dd34:	2b00      	cmp	r3, #0
    dd36:	f2c0 840c 	blt.w	e552 <_svfprintf_r+0xcc2>
    dd3a:	9b03      	ldr	r3, [sp, #12]
    dd3c:	3301      	adds	r3, #1
    dd3e:	f000 829e 	beq.w	e27e <_svfprintf_r+0x9ee>
    dd42:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    dd46:	ea52 0301 	orrs.w	r3, r2, r1
    dd4a:	9002      	str	r0, [sp, #8]
    dd4c:	f040 8299 	bne.w	e282 <_svfprintf_r+0x9f2>
    dd50:	9b03      	ldr	r3, [sp, #12]
    dd52:	2b00      	cmp	r3, #0
    dd54:	f040 829a 	bne.w	e28c <_svfprintf_r+0x9fc>
    dd58:	4680      	mov	r8, r0
    dd5a:	2300      	movs	r3, #0
    dd5c:	9303      	str	r3, [sp, #12]
    dd5e:	9305      	str	r3, [sp, #20]
    dd60:	ac50      	add	r4, sp, #320	; 0x140
    dd62:	e106      	b.n	df72 <_svfprintf_r+0x6e2>
    dd64:	9b08      	ldr	r3, [sp, #32]
    dd66:	f853 2b04 	ldr.w	r2, [r3], #4
    dd6a:	9206      	str	r2, [sp, #24]
    dd6c:	2a00      	cmp	r2, #0
    dd6e:	f280 8419 	bge.w	e5a4 <_svfprintf_r+0xd14>
    dd72:	9a06      	ldr	r2, [sp, #24]
    dd74:	9308      	str	r3, [sp, #32]
    dd76:	4252      	negs	r2, r2
    dd78:	9206      	str	r2, [sp, #24]
    dd7a:	f899 3000 	ldrb.w	r3, [r9]
    dd7e:	f048 0804 	orr.w	r8, r8, #4
    dd82:	e5e1      	b.n	d948 <_svfprintf_r+0xb8>
    dd84:	f899 3000 	ldrb.w	r3, [r9]
    dd88:	f048 0808 	orr.w	r8, r8, #8
    dd8c:	e5dc      	b.n	d948 <_svfprintf_r+0xb8>
    dd8e:	f048 0810 	orr.w	r8, r8, #16
    dd92:	f018 0f20 	tst.w	r8, #32
    dd96:	930b      	str	r3, [sp, #44]	; 0x2c
    dd98:	9b08      	ldr	r3, [sp, #32]
    dd9a:	d1c1      	bne.n	dd20 <_svfprintf_r+0x490>
    dd9c:	f018 0f10 	tst.w	r8, #16
    dda0:	f040 840b 	bne.w	e5ba <_svfprintf_r+0xd2a>
    dda4:	f018 0f40 	tst.w	r8, #64	; 0x40
    dda8:	f000 8403 	beq.w	e5b2 <_svfprintf_r+0xd22>
    ddac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    ddb0:	9308      	str	r3, [sp, #32]
    ddb2:	17d1      	asrs	r1, r2, #31
    ddb4:	460b      	mov	r3, r1
    ddb6:	e7bd      	b.n	dd34 <_svfprintf_r+0x4a4>
    ddb8:	9b08      	ldr	r3, [sp, #32]
    ddba:	f048 0202 	orr.w	r2, r8, #2
    ddbe:	9202      	str	r2, [sp, #8]
    ddc0:	f853 2b04 	ldr.w	r2, [r3], #4
    ddc4:	9308      	str	r3, [sp, #32]
    ddc6:	f647 0330 	movw	r3, #30768	; 0x7830
    ddca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    ddce:	2078      	movs	r0, #120	; 0x78
    ddd0:	4b45      	ldr	r3, [pc, #276]	; (dee8 <_svfprintf_r+0x658>)
    ddd2:	9311      	str	r3, [sp, #68]	; 0x44
    ddd4:	2100      	movs	r1, #0
    ddd6:	2302      	movs	r3, #2
    ddd8:	900b      	str	r0, [sp, #44]	; 0x2c
    ddda:	2000      	movs	r0, #0
    dddc:	9c03      	ldr	r4, [sp, #12]
    ddde:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    dde2:	1c60      	adds	r0, r4, #1
    dde4:	f000 80ad 	beq.w	df42 <_svfprintf_r+0x6b2>
    dde8:	9802      	ldr	r0, [sp, #8]
    ddea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    ddee:	ea52 0001 	orrs.w	r0, r2, r1
    ddf2:	f040 80a4 	bne.w	df3e <_svfprintf_r+0x6ae>
    ddf6:	2c00      	cmp	r4, #0
    ddf8:	f040 86ae 	bne.w	eb58 <_svfprintf_r+0x12c8>
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d1ac      	bne.n	dd5a <_svfprintf_r+0x4ca>
    de00:	9b02      	ldr	r3, [sp, #8]
    de02:	f013 0301 	ands.w	r3, r3, #1
    de06:	9305      	str	r3, [sp, #20]
    de08:	f000 83d1 	beq.w	e5ae <_svfprintf_r+0xd1e>
    de0c:	2330      	movs	r3, #48	; 0x30
    de0e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    de12:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    de16:	e0ac      	b.n	df72 <_svfprintf_r+0x6e2>
    de18:	f018 0f20 	tst.w	r8, #32
    de1c:	f040 83d4 	bne.w	e5c8 <_svfprintf_r+0xd38>
    de20:	f018 0f10 	tst.w	r8, #16
    de24:	f040 869f 	bne.w	eb66 <_svfprintf_r+0x12d6>
    de28:	f018 0f40 	tst.w	r8, #64	; 0x40
    de2c:	f040 8797 	bne.w	ed5e <_svfprintf_r+0x14ce>
    de30:	f418 7f00 	tst.w	r8, #512	; 0x200
    de34:	f000 8697 	beq.w	eb66 <_svfprintf_r+0x12d6>
    de38:	9b08      	ldr	r3, [sp, #32]
    de3a:	9904      	ldr	r1, [sp, #16]
    de3c:	f853 2b04 	ldr.w	r2, [r3], #4
    de40:	9308      	str	r3, [sp, #32]
    de42:	7011      	strb	r1, [r2, #0]
    de44:	464c      	mov	r4, r9
    de46:	e555      	b.n	d8f4 <_svfprintf_r+0x64>
    de48:	f899 3000 	ldrb.w	r3, [r9]
    de4c:	2b68      	cmp	r3, #104	; 0x68
    de4e:	bf03      	ittte	eq
    de50:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    de54:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    de58:	f109 0901 	addeq.w	r9, r9, #1
    de5c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    de60:	e572      	b.n	d948 <_svfprintf_r+0xb8>
    de62:	f899 3000 	ldrb.w	r3, [r9]
    de66:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    de6a:	e56d      	b.n	d948 <_svfprintf_r+0xb8>
    de6c:	f899 3000 	ldrb.w	r3, [r9]
    de70:	2b6c      	cmp	r3, #108	; 0x6c
    de72:	bf03      	ittte	eq
    de74:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    de78:	f048 0820 	orreq.w	r8, r8, #32
    de7c:	f109 0901 	addeq.w	r9, r9, #1
    de80:	f048 0810 	orrne.w	r8, r8, #16
    de84:	e560      	b.n	d948 <_svfprintf_r+0xb8>
    de86:	930b      	str	r3, [sp, #44]	; 0x2c
    de88:	f048 0810 	orr.w	r8, r8, #16
    de8c:	f018 0120 	ands.w	r1, r8, #32
    de90:	f000 8351 	beq.w	e536 <_svfprintf_r+0xca6>
    de94:	9b08      	ldr	r3, [sp, #32]
    de96:	3307      	adds	r3, #7
    de98:	f023 0307 	bic.w	r3, r3, #7
    de9c:	6859      	ldr	r1, [r3, #4]
    de9e:	f853 2b08 	ldr.w	r2, [r3], #8
    dea2:	9308      	str	r3, [sp, #32]
    dea4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dea8:	9302      	str	r3, [sp, #8]
    deaa:	2300      	movs	r3, #0
    deac:	e795      	b.n	ddda <_svfprintf_r+0x54a>
    deae:	930b      	str	r3, [sp, #44]	; 0x2c
    deb0:	f048 0310 	orr.w	r3, r8, #16
    deb4:	9302      	str	r3, [sp, #8]
    deb6:	9b02      	ldr	r3, [sp, #8]
    deb8:	f013 0120 	ands.w	r1, r3, #32
    debc:	f000 8329 	beq.w	e512 <_svfprintf_r+0xc82>
    dec0:	9b08      	ldr	r3, [sp, #32]
    dec2:	3307      	adds	r3, #7
    dec4:	f023 0307 	bic.w	r3, r3, #7
    dec8:	6859      	ldr	r1, [r3, #4]
    deca:	f853 2b08 	ldr.w	r2, [r3], #8
    dece:	9308      	str	r3, [sp, #32]
    ded0:	2301      	movs	r3, #1
    ded2:	e782      	b.n	ddda <_svfprintf_r+0x54a>
    ded4:	f899 3000 	ldrb.w	r3, [r9]
    ded8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    dedc:	e534      	b.n	d948 <_svfprintf_r+0xb8>
    dede:	bf00      	nop
    dee0:	20000c38 	.word	0x20000c38
    dee4:	20000598 	.word	0x20000598
    dee8:	20000c40 	.word	0x20000c40
    deec:	4649      	mov	r1, r9
    deee:	f811 3b01 	ldrb.w	r3, [r1], #1
    def2:	2b2a      	cmp	r3, #42	; 0x2a
    def4:	f001 8249 	beq.w	f38a <_svfprintf_r+0x1afa>
    def8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    defc:	2a09      	cmp	r2, #9
    defe:	4689      	mov	r9, r1
    df00:	bf98      	it	ls
    df02:	2100      	movls	r1, #0
    df04:	f201 8144 	bhi.w	f190 <_svfprintf_r+0x1900>
    df08:	f819 3b01 	ldrb.w	r3, [r9], #1
    df0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    df10:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    df14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    df18:	2a09      	cmp	r2, #9
    df1a:	d9f5      	bls.n	df08 <_svfprintf_r+0x678>
    df1c:	9103      	str	r1, [sp, #12]
    df1e:	e515      	b.n	d94c <_svfprintf_r+0xbc>
    df20:	f899 3000 	ldrb.w	r3, [r9]
    df24:	f048 0801 	orr.w	r8, r8, #1
    df28:	e50e      	b.n	d948 <_svfprintf_r+0xb8>
    df2a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    df2e:	2b00      	cmp	r3, #0
    df30:	f47f ad8f 	bne.w	da52 <_svfprintf_r+0x1c2>
    df34:	f899 3000 	ldrb.w	r3, [r9]
    df38:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    df3c:	e504      	b.n	d948 <_svfprintf_r+0xb8>
    df3e:	f8cd 8008 	str.w	r8, [sp, #8]
    df42:	2b01      	cmp	r3, #1
    df44:	f000 819d 	beq.w	e282 <_svfprintf_r+0x9f2>
    df48:	2b02      	cmp	r3, #2
    df4a:	ac50      	add	r4, sp, #320	; 0x140
    df4c:	d120      	bne.n	df90 <_svfprintf_r+0x700>
    df4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    df50:	f002 030f 	and.w	r3, r2, #15
    df54:	0912      	lsrs	r2, r2, #4
    df56:	5cc3      	ldrb	r3, [r0, r3]
    df58:	f804 3d01 	strb.w	r3, [r4, #-1]!
    df5c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    df60:	0909      	lsrs	r1, r1, #4
    df62:	ea52 0301 	orrs.w	r3, r2, r1
    df66:	d1f3      	bne.n	df50 <_svfprintf_r+0x6c0>
    df68:	ab50      	add	r3, sp, #320	; 0x140
    df6a:	1b1b      	subs	r3, r3, r4
    df6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    df70:	9305      	str	r3, [sp, #20]
    df72:	9a05      	ldr	r2, [sp, #20]
    df74:	9803      	ldr	r0, [sp, #12]
    df76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    df7a:	4282      	cmp	r2, r0
    df7c:	f04f 0300 	mov.w	r3, #0
    df80:	bfb8      	it	lt
    df82:	4602      	movlt	r2, r0
    df84:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    df88:	9307      	str	r3, [sp, #28]
    df8a:	9202      	str	r2, [sp, #8]
    df8c:	930f      	str	r3, [sp, #60]	; 0x3c
    df8e:	e660      	b.n	dc52 <_svfprintf_r+0x3c2>
    df90:	f002 0307 	and.w	r3, r2, #7
    df94:	08d2      	lsrs	r2, r2, #3
    df96:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    df9a:	08c9      	lsrs	r1, r1, #3
    df9c:	3330      	adds	r3, #48	; 0x30
    df9e:	ea52 0501 	orrs.w	r5, r2, r1
    dfa2:	4620      	mov	r0, r4
    dfa4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    dfa8:	d1f2      	bne.n	df90 <_svfprintf_r+0x700>
    dfaa:	9a02      	ldr	r2, [sp, #8]
    dfac:	07d1      	lsls	r1, r2, #31
    dfae:	f100 824d 	bmi.w	e44c <_svfprintf_r+0xbbc>
    dfb2:	ab50      	add	r3, sp, #320	; 0x140
    dfb4:	1b1b      	subs	r3, r3, r4
    dfb6:	4690      	mov	r8, r2
    dfb8:	9305      	str	r3, [sp, #20]
    dfba:	e7da      	b.n	df72 <_svfprintf_r+0x6e2>
    dfbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dfbe:	2b65      	cmp	r3, #101	; 0x65
    dfc0:	f340 80d4 	ble.w	e16c <_svfprintf_r+0x8dc>
    dfc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    dfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dfcc:	f040 81c1 	bne.w	e352 <_svfprintf_r+0xac2>
    dfd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfd2:	49ba      	ldr	r1, [pc, #744]	; (e2bc <_svfprintf_r+0xa2c>)
    dfd4:	f8ca 1000 	str.w	r1, [sl]
    dfd8:	3301      	adds	r3, #1
    dfda:	3201      	adds	r2, #1
    dfdc:	2101      	movs	r1, #1
    dfde:	2b07      	cmp	r3, #7
    dfe0:	9226      	str	r2, [sp, #152]	; 0x98
    dfe2:	9325      	str	r3, [sp, #148]	; 0x94
    dfe4:	f8ca 1004 	str.w	r1, [sl, #4]
    dfe8:	f300 8551 	bgt.w	ea8e <_svfprintf_r+0x11fe>
    dfec:	f10a 0a08 	add.w	sl, sl, #8
    dff0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dff2:	990e      	ldr	r1, [sp, #56]	; 0x38
    dff4:	428b      	cmp	r3, r1
    dff6:	f280 82d0 	bge.w	e59a <_svfprintf_r+0xd0a>
    dffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dffc:	9912      	ldr	r1, [sp, #72]	; 0x48
    dffe:	441a      	add	r2, r3
    e000:	e9ca 1300 	strd	r1, r3, [sl]
    e004:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e006:	9226      	str	r2, [sp, #152]	; 0x98
    e008:	3301      	adds	r3, #1
    e00a:	2b07      	cmp	r3, #7
    e00c:	9325      	str	r3, [sp, #148]	; 0x94
    e00e:	f300 8397 	bgt.w	e740 <_svfprintf_r+0xeb0>
    e012:	f10a 0a08 	add.w	sl, sl, #8
    e016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e018:	1e5c      	subs	r4, r3, #1
    e01a:	2c00      	cmp	r4, #0
    e01c:	f77f add0 	ble.w	dbc0 <_svfprintf_r+0x330>
    e020:	2c10      	cmp	r4, #16
    e022:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e024:	f340 856e 	ble.w	eb04 <_svfprintf_r+0x1274>
    e028:	ee1b 6a10 	vmov	r6, s22
    e02c:	2510      	movs	r5, #16
    e02e:	e005      	b.n	e03c <_svfprintf_r+0x7ac>
    e030:	f10a 0a08 	add.w	sl, sl, #8
    e034:	3c10      	subs	r4, #16
    e036:	2c10      	cmp	r4, #16
    e038:	f340 8564 	ble.w	eb04 <_svfprintf_r+0x1274>
    e03c:	3301      	adds	r3, #1
    e03e:	49a0      	ldr	r1, [pc, #640]	; (e2c0 <_svfprintf_r+0xa30>)
    e040:	3210      	adds	r2, #16
    e042:	2b07      	cmp	r3, #7
    e044:	e9ca 1500 	strd	r1, r5, [sl]
    e048:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e04c:	ddf0      	ble.n	e030 <_svfprintf_r+0x7a0>
    e04e:	aa24      	add	r2, sp, #144	; 0x90
    e050:	4631      	mov	r1, r6
    e052:	4658      	mov	r0, fp
    e054:	f004 faa8 	bl	125a8 <__ssprint_r>
    e058:	2800      	cmp	r0, #0
    e05a:	d17e      	bne.n	e15a <_svfprintf_r+0x8ca>
    e05c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e060:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e064:	e7e6      	b.n	e034 <_svfprintf_r+0x7a4>
    e066:	9b06      	ldr	r3, [sp, #24]
    e068:	9902      	ldr	r1, [sp, #8]
    e06a:	1a5d      	subs	r5, r3, r1
    e06c:	2d00      	cmp	r5, #0
    e06e:	f77f ad8e 	ble.w	db8e <_svfprintf_r+0x2fe>
    e072:	2d10      	cmp	r5, #16
    e074:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e076:	dd21      	ble.n	e0bc <_svfprintf_r+0x82c>
    e078:	9409      	str	r4, [sp, #36]	; 0x24
    e07a:	2610      	movs	r6, #16
    e07c:	ee1b 4a10 	vmov	r4, s22
    e080:	e004      	b.n	e08c <_svfprintf_r+0x7fc>
    e082:	3d10      	subs	r5, #16
    e084:	2d10      	cmp	r5, #16
    e086:	f10a 0a08 	add.w	sl, sl, #8
    e08a:	dd16      	ble.n	e0ba <_svfprintf_r+0x82a>
    e08c:	3301      	adds	r3, #1
    e08e:	498c      	ldr	r1, [pc, #560]	; (e2c0 <_svfprintf_r+0xa30>)
    e090:	3210      	adds	r2, #16
    e092:	2b07      	cmp	r3, #7
    e094:	e9ca 1600 	strd	r1, r6, [sl]
    e098:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e09c:	ddf1      	ble.n	e082 <_svfprintf_r+0x7f2>
    e09e:	aa24      	add	r2, sp, #144	; 0x90
    e0a0:	4621      	mov	r1, r4
    e0a2:	4658      	mov	r0, fp
    e0a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0a8:	f004 fa7e 	bl	125a8 <__ssprint_r>
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d154      	bne.n	e15a <_svfprintf_r+0x8ca>
    e0b0:	3d10      	subs	r5, #16
    e0b2:	2d10      	cmp	r5, #16
    e0b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0b8:	dce8      	bgt.n	e08c <_svfprintf_r+0x7fc>
    e0ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e0bc:	4980      	ldr	r1, [pc, #512]	; (e2c0 <_svfprintf_r+0xa30>)
    e0be:	f8ca 5004 	str.w	r5, [sl, #4]
    e0c2:	3301      	adds	r3, #1
    e0c4:	442a      	add	r2, r5
    e0c6:	2b07      	cmp	r3, #7
    e0c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0cc:	f8ca 1000 	str.w	r1, [sl]
    e0d0:	f300 8526 	bgt.w	eb20 <_svfprintf_r+0x1290>
    e0d4:	9b03      	ldr	r3, [sp, #12]
    e0d6:	9905      	ldr	r1, [sp, #20]
    e0d8:	1a5d      	subs	r5, r3, r1
    e0da:	2d00      	cmp	r5, #0
    e0dc:	f10a 0a08 	add.w	sl, sl, #8
    e0e0:	f77f ad5b 	ble.w	db9a <_svfprintf_r+0x30a>
    e0e4:	2d10      	cmp	r5, #16
    e0e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e0e8:	dd1f      	ble.n	e12a <_svfprintf_r+0x89a>
    e0ea:	4651      	mov	r1, sl
    e0ec:	2610      	movs	r6, #16
    e0ee:	ee1b aa10 	vmov	sl, s22
    e0f2:	e004      	b.n	e0fe <_svfprintf_r+0x86e>
    e0f4:	3d10      	subs	r5, #16
    e0f6:	2d10      	cmp	r5, #16
    e0f8:	f101 0108 	add.w	r1, r1, #8
    e0fc:	dd14      	ble.n	e128 <_svfprintf_r+0x898>
    e0fe:	3301      	adds	r3, #1
    e100:	486f      	ldr	r0, [pc, #444]	; (e2c0 <_svfprintf_r+0xa30>)
    e102:	3210      	adds	r2, #16
    e104:	2b07      	cmp	r3, #7
    e106:	e9c1 0600 	strd	r0, r6, [r1]
    e10a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e10e:	ddf1      	ble.n	e0f4 <_svfprintf_r+0x864>
    e110:	aa24      	add	r2, sp, #144	; 0x90
    e112:	4651      	mov	r1, sl
    e114:	4658      	mov	r0, fp
    e116:	f004 fa47 	bl	125a8 <__ssprint_r>
    e11a:	b9f0      	cbnz	r0, e15a <_svfprintf_r+0x8ca>
    e11c:	3d10      	subs	r5, #16
    e11e:	2d10      	cmp	r5, #16
    e120:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e124:	a927      	add	r1, sp, #156	; 0x9c
    e126:	dcea      	bgt.n	e0fe <_svfprintf_r+0x86e>
    e128:	468a      	mov	sl, r1
    e12a:	3301      	adds	r3, #1
    e12c:	4964      	ldr	r1, [pc, #400]	; (e2c0 <_svfprintf_r+0xa30>)
    e12e:	f8ca 5004 	str.w	r5, [sl, #4]
    e132:	442a      	add	r2, r5
    e134:	2b07      	cmp	r3, #7
    e136:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e13a:	f8ca 1000 	str.w	r1, [sl]
    e13e:	f300 81da 	bgt.w	e4f6 <_svfprintf_r+0xc66>
    e142:	f10a 0a08 	add.w	sl, sl, #8
    e146:	e528      	b.n	db9a <_svfprintf_r+0x30a>
    e148:	ee1b 1a10 	vmov	r1, s22
    e14c:	aa24      	add	r2, sp, #144	; 0x90
    e14e:	4658      	mov	r0, fp
    e150:	f004 fa2a 	bl	125a8 <__ssprint_r>
    e154:	2800      	cmp	r0, #0
    e156:	f43f ad47 	beq.w	dbe8 <_svfprintf_r+0x358>
    e15a:	9b07      	ldr	r3, [sp, #28]
    e15c:	2b00      	cmp	r3, #0
    e15e:	f43f aca2 	beq.w	daa6 <_svfprintf_r+0x216>
    e162:	9907      	ldr	r1, [sp, #28]
    e164:	4658      	mov	r0, fp
    e166:	f7fe f91d 	bl	c3a4 <_free_r>
    e16a:	e49c      	b.n	daa6 <_svfprintf_r+0x216>
    e16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e16e:	2b01      	cmp	r3, #1
    e170:	f340 817a 	ble.w	e468 <_svfprintf_r+0xbd8>
    e174:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e176:	f8ca 4000 	str.w	r4, [sl]
    e17a:	3301      	adds	r3, #1
    e17c:	3201      	adds	r2, #1
    e17e:	2101      	movs	r1, #1
    e180:	2b07      	cmp	r3, #7
    e182:	9226      	str	r2, [sp, #152]	; 0x98
    e184:	9325      	str	r3, [sp, #148]	; 0x94
    e186:	f8ca 1004 	str.w	r1, [sl, #4]
    e18a:	f300 81f8 	bgt.w	e57e <_svfprintf_r+0xcee>
    e18e:	f10a 0a08 	add.w	sl, sl, #8
    e192:	9910      	ldr	r1, [sp, #64]	; 0x40
    e194:	9812      	ldr	r0, [sp, #72]	; 0x48
    e196:	3301      	adds	r3, #1
    e198:	440a      	add	r2, r1
    e19a:	2b07      	cmp	r3, #7
    e19c:	e9ca 0100 	strd	r0, r1, [sl]
    e1a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1a4:	f300 81dd 	bgt.w	e562 <_svfprintf_r+0xcd2>
    e1a8:	f10a 0a08 	add.w	sl, sl, #8
    e1ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e1b4:	f000 8177 	beq.w	e4a6 <_svfprintf_r+0xc16>
    e1b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e1ba:	3301      	adds	r3, #1
    e1bc:	3901      	subs	r1, #1
    e1be:	3401      	adds	r4, #1
    e1c0:	440a      	add	r2, r1
    e1c2:	2b07      	cmp	r3, #7
    e1c4:	f8ca 4000 	str.w	r4, [sl]
    e1c8:	9325      	str	r3, [sp, #148]	; 0x94
    e1ca:	f8ca 1004 	str.w	r1, [sl, #4]
    e1ce:	9226      	str	r2, [sp, #152]	; 0x98
    e1d0:	f300 815b 	bgt.w	e48a <_svfprintf_r+0xbfa>
    e1d4:	f10a 0a08 	add.w	sl, sl, #8
    e1d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    e1da:	f8ca 1004 	str.w	r1, [sl, #4]
    e1de:	3301      	adds	r3, #1
    e1e0:	440a      	add	r2, r1
    e1e2:	2b07      	cmp	r3, #7
    e1e4:	a91e      	add	r1, sp, #120	; 0x78
    e1e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1ea:	f8ca 1000 	str.w	r1, [sl]
    e1ee:	f77f ace5 	ble.w	dbbc <_svfprintf_r+0x32c>
    e1f2:	ee1b 1a10 	vmov	r1, s22
    e1f6:	aa24      	add	r2, sp, #144	; 0x90
    e1f8:	4658      	mov	r0, fp
    e1fa:	f004 f9d5 	bl	125a8 <__ssprint_r>
    e1fe:	2800      	cmp	r0, #0
    e200:	d1ab      	bne.n	e15a <_svfprintf_r+0x8ca>
    e202:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e204:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e208:	e4da      	b.n	dbc0 <_svfprintf_r+0x330>
    e20a:	2d10      	cmp	r5, #16
    e20c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e210:	4e2c      	ldr	r6, [pc, #176]	; (e2c4 <_svfprintf_r+0xa34>)
    e212:	dd24      	ble.n	e25e <_svfprintf_r+0x9ce>
    e214:	9417      	str	r4, [sp, #92]	; 0x5c
    e216:	2310      	movs	r3, #16
    e218:	ee1b 4a10 	vmov	r4, s22
    e21c:	4608      	mov	r0, r1
    e21e:	e004      	b.n	e22a <_svfprintf_r+0x99a>
    e220:	3d10      	subs	r5, #16
    e222:	2d10      	cmp	r5, #16
    e224:	f10a 0a08 	add.w	sl, sl, #8
    e228:	dd17      	ble.n	e25a <_svfprintf_r+0x9ca>
    e22a:	3001      	adds	r0, #1
    e22c:	3210      	adds	r2, #16
    e22e:	2807      	cmp	r0, #7
    e230:	e9ca 6300 	strd	r6, r3, [sl]
    e234:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e238:	ddf2      	ble.n	e220 <_svfprintf_r+0x990>
    e23a:	aa24      	add	r2, sp, #144	; 0x90
    e23c:	4621      	mov	r1, r4
    e23e:	4658      	mov	r0, fp
    e240:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e244:	f004 f9b0 	bl	125a8 <__ssprint_r>
    e248:	2800      	cmp	r0, #0
    e24a:	d186      	bne.n	e15a <_svfprintf_r+0x8ca>
    e24c:	3d10      	subs	r5, #16
    e24e:	2d10      	cmp	r5, #16
    e250:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e254:	f04f 0310 	mov.w	r3, #16
    e258:	dce7      	bgt.n	e22a <_svfprintf_r+0x99a>
    e25a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e25c:	4601      	mov	r1, r0
    e25e:	3101      	adds	r1, #1
    e260:	442a      	add	r2, r5
    e262:	2907      	cmp	r1, #7
    e264:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e268:	f8ca 6000 	str.w	r6, [sl]
    e26c:	f8ca 5004 	str.w	r5, [sl, #4]
    e270:	f300 83bd 	bgt.w	e9ee <_svfprintf_r+0x115e>
    e274:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e278:	f10a 0a08 	add.w	sl, sl, #8
    e27c:	e45d      	b.n	db3a <_svfprintf_r+0x2aa>
    e27e:	f8cd 8008 	str.w	r8, [sp, #8]
    e282:	2a0a      	cmp	r2, #10
    e284:	f171 0300 	sbcs.w	r3, r1, #0
    e288:	f080 8345 	bcs.w	e916 <_svfprintf_r+0x1086>
    e28c:	3230      	adds	r2, #48	; 0x30
    e28e:	2301      	movs	r3, #1
    e290:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e294:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e298:	9305      	str	r3, [sp, #20]
    e29a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e29e:	e668      	b.n	df72 <_svfprintf_r+0x6e2>
    e2a0:	ee1b 1a10 	vmov	r1, s22
    e2a4:	aa24      	add	r2, sp, #144	; 0x90
    e2a6:	4658      	mov	r0, fp
    e2a8:	f004 f97e 	bl	125a8 <__ssprint_r>
    e2ac:	2800      	cmp	r0, #0
    e2ae:	f47f af54 	bne.w	e15a <_svfprintf_r+0x8ca>
    e2b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e2b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2b8:	e452      	b.n	db60 <_svfprintf_r+0x2d0>
    e2ba:	bf00      	nop
    e2bc:	20000c70 	.word	0x20000c70
    e2c0:	20008488 	.word	0x20008488
    e2c4:	200026ec 	.word	0x200026ec
    e2c8:	ee1b 1a10 	vmov	r1, s22
    e2cc:	aa24      	add	r2, sp, #144	; 0x90
    e2ce:	4658      	mov	r0, fp
    e2d0:	f004 f96a 	bl	125a8 <__ssprint_r>
    e2d4:	2800      	cmp	r0, #0
    e2d6:	f47f af40 	bne.w	e15a <_svfprintf_r+0x8ca>
    e2da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e2dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2e0:	e451      	b.n	db86 <_svfprintf_r+0x2f6>
    e2e2:	2c10      	cmp	r4, #16
    e2e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e2e6:	4ebe      	ldr	r6, [pc, #760]	; (e5e0 <_svfprintf_r+0xd50>)
    e2e8:	dd1f      	ble.n	e32a <_svfprintf_r+0xa9a>
    e2ea:	ee1b 8a10 	vmov	r8, s22
    e2ee:	2510      	movs	r5, #16
    e2f0:	e004      	b.n	e2fc <_svfprintf_r+0xa6c>
    e2f2:	3c10      	subs	r4, #16
    e2f4:	2c10      	cmp	r4, #16
    e2f6:	f10a 0a08 	add.w	sl, sl, #8
    e2fa:	dd16      	ble.n	e32a <_svfprintf_r+0xa9a>
    e2fc:	3301      	adds	r3, #1
    e2fe:	3210      	adds	r2, #16
    e300:	2b07      	cmp	r3, #7
    e302:	e9ca 6500 	strd	r6, r5, [sl]
    e306:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e30a:	ddf2      	ble.n	e2f2 <_svfprintf_r+0xa62>
    e30c:	aa24      	add	r2, sp, #144	; 0x90
    e30e:	4641      	mov	r1, r8
    e310:	4658      	mov	r0, fp
    e312:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e316:	f004 f947 	bl	125a8 <__ssprint_r>
    e31a:	2800      	cmp	r0, #0
    e31c:	f47f af1d 	bne.w	e15a <_svfprintf_r+0x8ca>
    e320:	3c10      	subs	r4, #16
    e322:	2c10      	cmp	r4, #16
    e324:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e328:	dce8      	bgt.n	e2fc <_svfprintf_r+0xa6c>
    e32a:	3301      	adds	r3, #1
    e32c:	4422      	add	r2, r4
    e32e:	2b07      	cmp	r3, #7
    e330:	e9ca 6400 	strd	r6, r4, [sl]
    e334:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e338:	f77f ac4b 	ble.w	dbd2 <_svfprintf_r+0x342>
    e33c:	ee1b 1a10 	vmov	r1, s22
    e340:	aa24      	add	r2, sp, #144	; 0x90
    e342:	4658      	mov	r0, fp
    e344:	f004 f930 	bl	125a8 <__ssprint_r>
    e348:	2800      	cmp	r0, #0
    e34a:	f47f af06 	bne.w	e15a <_svfprintf_r+0x8ca>
    e34e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e350:	e43f      	b.n	dbd2 <_svfprintf_r+0x342>
    e352:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e354:	2900      	cmp	r1, #0
    e356:	f340 835a 	ble.w	ea0e <_svfprintf_r+0x117e>
    e35a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e35e:	429e      	cmp	r6, r3
    e360:	bfa8      	it	ge
    e362:	461e      	movge	r6, r3
    e364:	2e00      	cmp	r6, #0
    e366:	dd0b      	ble.n	e380 <_svfprintf_r+0xaf0>
    e368:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e36a:	3301      	adds	r3, #1
    e36c:	4432      	add	r2, r6
    e36e:	2b07      	cmp	r3, #7
    e370:	e9ca 4600 	strd	r4, r6, [sl]
    e374:	9226      	str	r2, [sp, #152]	; 0x98
    e376:	9325      	str	r3, [sp, #148]	; 0x94
    e378:	f300 8689 	bgt.w	f08e <_svfprintf_r+0x17fe>
    e37c:	f10a 0a08 	add.w	sl, sl, #8
    e380:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e382:	2e00      	cmp	r6, #0
    e384:	bfa8      	it	ge
    e386:	1bad      	subge	r5, r5, r6
    e388:	2d00      	cmp	r5, #0
    e38a:	f300 8203 	bgt.w	e794 <_svfprintf_r+0xf04>
    e38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e390:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e394:	4423      	add	r3, r4
    e396:	9305      	str	r3, [sp, #20]
    e398:	f040 821f 	bne.w	e7da <_svfprintf_r+0xf4a>
    e39c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e39e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e3a0:	428b      	cmp	r3, r1
    e3a2:	db03      	blt.n	e3ac <_svfprintf_r+0xb1c>
    e3a4:	f018 0f01 	tst.w	r8, #1
    e3a8:	f000 84cf 	beq.w	ed4a <_svfprintf_r+0x14ba>
    e3ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    e3ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    e3b0:	440a      	add	r2, r1
    e3b2:	e9ca 0100 	strd	r0, r1, [sl]
    e3b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    e3b8:	9226      	str	r2, [sp, #152]	; 0x98
    e3ba:	3101      	adds	r1, #1
    e3bc:	2907      	cmp	r1, #7
    e3be:	9125      	str	r1, [sp, #148]	; 0x94
    e3c0:	f300 86a5 	bgt.w	f10e <_svfprintf_r+0x187e>
    e3c4:	f10a 0a08 	add.w	sl, sl, #8
    e3c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e3ca:	1865      	adds	r5, r4, r1
    e3cc:	1acc      	subs	r4, r1, r3
    e3ce:	9b05      	ldr	r3, [sp, #20]
    e3d0:	1aed      	subs	r5, r5, r3
    e3d2:	42a5      	cmp	r5, r4
    e3d4:	bfa8      	it	ge
    e3d6:	4625      	movge	r5, r4
    e3d8:	2d00      	cmp	r5, #0
    e3da:	dd0d      	ble.n	e3f8 <_svfprintf_r+0xb68>
    e3dc:	f8ca 3000 	str.w	r3, [sl]
    e3e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e3e2:	f8ca 5004 	str.w	r5, [sl, #4]
    e3e6:	3301      	adds	r3, #1
    e3e8:	442a      	add	r2, r5
    e3ea:	2b07      	cmp	r3, #7
    e3ec:	9226      	str	r2, [sp, #152]	; 0x98
    e3ee:	9325      	str	r3, [sp, #148]	; 0x94
    e3f0:	f300 86bb 	bgt.w	f16a <_svfprintf_r+0x18da>
    e3f4:	f10a 0a08 	add.w	sl, sl, #8
    e3f8:	2d00      	cmp	r5, #0
    e3fa:	bfa8      	it	ge
    e3fc:	1b64      	subge	r4, r4, r5
    e3fe:	2c00      	cmp	r4, #0
    e400:	f77f abde 	ble.w	dbc0 <_svfprintf_r+0x330>
    e404:	2c10      	cmp	r4, #16
    e406:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e408:	f340 837c 	ble.w	eb04 <_svfprintf_r+0x1274>
    e40c:	ee1b 6a10 	vmov	r6, s22
    e410:	2510      	movs	r5, #16
    e412:	e005      	b.n	e420 <_svfprintf_r+0xb90>
    e414:	f10a 0a08 	add.w	sl, sl, #8
    e418:	3c10      	subs	r4, #16
    e41a:	2c10      	cmp	r4, #16
    e41c:	f340 8372 	ble.w	eb04 <_svfprintf_r+0x1274>
    e420:	3301      	adds	r3, #1
    e422:	4970      	ldr	r1, [pc, #448]	; (e5e4 <_svfprintf_r+0xd54>)
    e424:	3210      	adds	r2, #16
    e426:	2b07      	cmp	r3, #7
    e428:	e9ca 1500 	strd	r1, r5, [sl]
    e42c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e430:	ddf0      	ble.n	e414 <_svfprintf_r+0xb84>
    e432:	aa24      	add	r2, sp, #144	; 0x90
    e434:	4631      	mov	r1, r6
    e436:	4658      	mov	r0, fp
    e438:	f004 f8b6 	bl	125a8 <__ssprint_r>
    e43c:	2800      	cmp	r0, #0
    e43e:	f47f ae8c 	bne.w	e15a <_svfprintf_r+0x8ca>
    e442:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e446:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e44a:	e7e5      	b.n	e418 <_svfprintf_r+0xb88>
    e44c:	2b30      	cmp	r3, #48	; 0x30
    e44e:	f43f ad8b 	beq.w	df68 <_svfprintf_r+0x6d8>
    e452:	2330      	movs	r3, #48	; 0x30
    e454:	3802      	subs	r0, #2
    e456:	f804 3c01 	strb.w	r3, [r4, #-1]
    e45a:	ab50      	add	r3, sp, #320	; 0x140
    e45c:	1a1b      	subs	r3, r3, r0
    e45e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e462:	9305      	str	r3, [sp, #20]
    e464:	4604      	mov	r4, r0
    e466:	e584      	b.n	df72 <_svfprintf_r+0x6e2>
    e468:	f018 0f01 	tst.w	r8, #1
    e46c:	f47f ae82 	bne.w	e174 <_svfprintf_r+0x8e4>
    e470:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e472:	f8ca 4000 	str.w	r4, [sl]
    e476:	3301      	adds	r3, #1
    e478:	3201      	adds	r2, #1
    e47a:	2101      	movs	r1, #1
    e47c:	2b07      	cmp	r3, #7
    e47e:	9226      	str	r2, [sp, #152]	; 0x98
    e480:	9325      	str	r3, [sp, #148]	; 0x94
    e482:	f8ca 1004 	str.w	r1, [sl, #4]
    e486:	f77f aea5 	ble.w	e1d4 <_svfprintf_r+0x944>
    e48a:	ee1b 1a10 	vmov	r1, s22
    e48e:	aa24      	add	r2, sp, #144	; 0x90
    e490:	4658      	mov	r0, fp
    e492:	f004 f889 	bl	125a8 <__ssprint_r>
    e496:	2800      	cmp	r0, #0
    e498:	f47f ae5f 	bne.w	e15a <_svfprintf_r+0x8ca>
    e49c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4a4:	e698      	b.n	e1d8 <_svfprintf_r+0x948>
    e4a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    e4a8:	1e4c      	subs	r4, r1, #1
    e4aa:	2c00      	cmp	r4, #0
    e4ac:	f77f ae94 	ble.w	e1d8 <_svfprintf_r+0x948>
    e4b0:	2c10      	cmp	r4, #16
    e4b2:	f340 8361 	ble.w	eb78 <_svfprintf_r+0x12e8>
    e4b6:	ee1b 6a10 	vmov	r6, s22
    e4ba:	2510      	movs	r5, #16
    e4bc:	e005      	b.n	e4ca <_svfprintf_r+0xc3a>
    e4be:	f10a 0a08 	add.w	sl, sl, #8
    e4c2:	3c10      	subs	r4, #16
    e4c4:	2c10      	cmp	r4, #16
    e4c6:	f340 8357 	ble.w	eb78 <_svfprintf_r+0x12e8>
    e4ca:	3301      	adds	r3, #1
    e4cc:	4945      	ldr	r1, [pc, #276]	; (e5e4 <_svfprintf_r+0xd54>)
    e4ce:	3210      	adds	r2, #16
    e4d0:	2b07      	cmp	r3, #7
    e4d2:	e9ca 1500 	strd	r1, r5, [sl]
    e4d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e4da:	ddf0      	ble.n	e4be <_svfprintf_r+0xc2e>
    e4dc:	aa24      	add	r2, sp, #144	; 0x90
    e4de:	4631      	mov	r1, r6
    e4e0:	4658      	mov	r0, fp
    e4e2:	f004 f861 	bl	125a8 <__ssprint_r>
    e4e6:	2800      	cmp	r0, #0
    e4e8:	f47f ae37 	bne.w	e15a <_svfprintf_r+0x8ca>
    e4ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4f4:	e7e5      	b.n	e4c2 <_svfprintf_r+0xc32>
    e4f6:	ee1b 1a10 	vmov	r1, s22
    e4fa:	aa24      	add	r2, sp, #144	; 0x90
    e4fc:	4658      	mov	r0, fp
    e4fe:	f004 f853 	bl	125a8 <__ssprint_r>
    e502:	2800      	cmp	r0, #0
    e504:	f47f ae29 	bne.w	e15a <_svfprintf_r+0x8ca>
    e508:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e50a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e50e:	f7ff bb44 	b.w	db9a <_svfprintf_r+0x30a>
    e512:	9b02      	ldr	r3, [sp, #8]
    e514:	f013 0310 	ands.w	r3, r3, #16
    e518:	f040 80c1 	bne.w	e69e <_svfprintf_r+0xe0e>
    e51c:	9a02      	ldr	r2, [sp, #8]
    e51e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e522:	f000 837a 	beq.w	ec1a <_svfprintf_r+0x138a>
    e526:	9808      	ldr	r0, [sp, #32]
    e528:	f850 2b04 	ldr.w	r2, [r0], #4
    e52c:	9008      	str	r0, [sp, #32]
    e52e:	4619      	mov	r1, r3
    e530:	b292      	uxth	r2, r2
    e532:	2301      	movs	r3, #1
    e534:	e451      	b.n	ddda <_svfprintf_r+0x54a>
    e536:	f018 0310 	ands.w	r3, r8, #16
    e53a:	d155      	bne.n	e5e8 <_svfprintf_r+0xd58>
    e53c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e540:	f000 835d 	beq.w	ebfe <_svfprintf_r+0x136e>
    e544:	9808      	ldr	r0, [sp, #32]
    e546:	f850 2b04 	ldr.w	r2, [r0], #4
    e54a:	9008      	str	r0, [sp, #32]
    e54c:	4619      	mov	r1, r3
    e54e:	b292      	uxth	r2, r2
    e550:	e4a8      	b.n	dea4 <_svfprintf_r+0x614>
    e552:	4252      	negs	r2, r2
    e554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e558:	f8cd 8008 	str.w	r8, [sp, #8]
    e55c:	202d      	movs	r0, #45	; 0x2d
    e55e:	2301      	movs	r3, #1
    e560:	e43c      	b.n	dddc <_svfprintf_r+0x54c>
    e562:	ee1b 1a10 	vmov	r1, s22
    e566:	aa24      	add	r2, sp, #144	; 0x90
    e568:	4658      	mov	r0, fp
    e56a:	f004 f81d 	bl	125a8 <__ssprint_r>
    e56e:	2800      	cmp	r0, #0
    e570:	f47f adf3 	bne.w	e15a <_svfprintf_r+0x8ca>
    e574:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e578:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e57c:	e616      	b.n	e1ac <_svfprintf_r+0x91c>
    e57e:	ee1b 1a10 	vmov	r1, s22
    e582:	aa24      	add	r2, sp, #144	; 0x90
    e584:	4658      	mov	r0, fp
    e586:	f004 f80f 	bl	125a8 <__ssprint_r>
    e58a:	2800      	cmp	r0, #0
    e58c:	f47f ade5 	bne.w	e15a <_svfprintf_r+0x8ca>
    e590:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e594:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e598:	e5fb      	b.n	e192 <_svfprintf_r+0x902>
    e59a:	f018 0f01 	tst.w	r8, #1
    e59e:	f43f ab0f 	beq.w	dbc0 <_svfprintf_r+0x330>
    e5a2:	e52a      	b.n	dffa <_svfprintf_r+0x76a>
    e5a4:	9308      	str	r3, [sp, #32]
    e5a6:	f899 3000 	ldrb.w	r3, [r9]
    e5aa:	f7ff b9cd 	b.w	d948 <_svfprintf_r+0xb8>
    e5ae:	ac50      	add	r4, sp, #320	; 0x140
    e5b0:	e4df      	b.n	df72 <_svfprintf_r+0x6e2>
    e5b2:	f418 7f00 	tst.w	r8, #512	; 0x200
    e5b6:	f040 83db 	bne.w	ed70 <_svfprintf_r+0x14e0>
    e5ba:	f853 2b04 	ldr.w	r2, [r3], #4
    e5be:	9308      	str	r3, [sp, #32]
    e5c0:	17d1      	asrs	r1, r2, #31
    e5c2:	460b      	mov	r3, r1
    e5c4:	f7ff bbb6 	b.w	dd34 <_svfprintf_r+0x4a4>
    e5c8:	9b08      	ldr	r3, [sp, #32]
    e5ca:	9804      	ldr	r0, [sp, #16]
    e5cc:	f853 1b04 	ldr.w	r1, [r3], #4
    e5d0:	9308      	str	r3, [sp, #32]
    e5d2:	17c2      	asrs	r2, r0, #31
    e5d4:	e9c1 0200 	strd	r0, r2, [r1]
    e5d8:	464c      	mov	r4, r9
    e5da:	f7ff b98b 	b.w	d8f4 <_svfprintf_r+0x64>
    e5de:	bf00      	nop
    e5e0:	200026ec 	.word	0x200026ec
    e5e4:	20008488 	.word	0x20008488
    e5e8:	9b08      	ldr	r3, [sp, #32]
    e5ea:	f853 2b04 	ldr.w	r2, [r3], #4
    e5ee:	9308      	str	r3, [sp, #32]
    e5f0:	e458      	b.n	dea4 <_svfprintf_r+0x614>
    e5f2:	eeb4 8b48 	vcmp.f64	d8, d8
    e5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5fa:	f180 8694 	bvs.w	f326 <_svfprintf_r+0x1a96>
    e5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e600:	2b61      	cmp	r3, #97	; 0x61
    e602:	f000 8552 	beq.w	f0aa <_svfprintf_r+0x181a>
    e606:	2b41      	cmp	r3, #65	; 0x41
    e608:	f000 85c0 	beq.w	f18c <_svfprintf_r+0x18fc>
    e60c:	9b03      	ldr	r3, [sp, #12]
    e60e:	3301      	adds	r3, #1
    e610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e612:	f023 0520 	bic.w	r5, r3, #32
    e616:	f000 8480 	beq.w	ef1a <_svfprintf_r+0x168a>
    e61a:	2d47      	cmp	r5, #71	; 0x47
    e61c:	d104      	bne.n	e628 <_svfprintf_r+0xd98>
    e61e:	9b03      	ldr	r3, [sp, #12]
    e620:	2b00      	cmp	r3, #0
    e622:	bf08      	it	eq
    e624:	2301      	moveq	r3, #1
    e626:	9303      	str	r3, [sp, #12]
    e628:	ee18 3a90 	vmov	r3, s17
    e62c:	2b00      	cmp	r3, #0
    e62e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    e632:	4646      	mov	r6, r8
    e634:	f2c0 8618 	blt.w	f268 <_svfprintf_r+0x19d8>
    e638:	eeb0 ab48 	vmov.f64	d10, d8
    e63c:	2300      	movs	r3, #0
    e63e:	4690      	mov	r8, r2
    e640:	9309      	str	r3, [sp, #36]	; 0x24
    e642:	9307      	str	r3, [sp, #28]
    e644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e646:	3b41      	subs	r3, #65	; 0x41
    e648:	2b25      	cmp	r3, #37	; 0x25
    e64a:	f200 8398 	bhi.w	ed7e <_svfprintf_r+0x14ee>
    e64e:	e8df f013 	tbh	[pc, r3, lsl #1]
    e652:	046f      	.short	0x046f
    e654:	03960396 	.word	0x03960396
    e658:	04680396 	.word	0x04680396
    e65c:	0396046c 	.word	0x0396046c
    e660:	03960396 	.word	0x03960396
    e664:	03960396 	.word	0x03960396
    e668:	03960396 	.word	0x03960396
    e66c:	03960396 	.word	0x03960396
    e670:	03960396 	.word	0x03960396
    e674:	03960396 	.word	0x03960396
    e678:	03960396 	.word	0x03960396
    e67c:	03960396 	.word	0x03960396
    e680:	03960396 	.word	0x03960396
    e684:	03960396 	.word	0x03960396
    e688:	03960396 	.word	0x03960396
    e68c:	03960396 	.word	0x03960396
    e690:	03960396 	.word	0x03960396
    e694:	03960396 	.word	0x03960396
    e698:	04680396 	.word	0x04680396
    e69c:	046c      	.short	0x046c
    e69e:	9b08      	ldr	r3, [sp, #32]
    e6a0:	f853 2b04 	ldr.w	r2, [r3], #4
    e6a4:	9308      	str	r3, [sp, #32]
    e6a6:	2301      	movs	r3, #1
    e6a8:	f7ff bb97 	b.w	ddda <_svfprintf_r+0x54a>
    e6ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e6ae:	2b00      	cmp	r3, #0
    e6b0:	f43f a9cf 	beq.w	da52 <_svfprintf_r+0x1c2>
    e6b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e6b6:	781b      	ldrb	r3, [r3, #0]
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	f43f a9ca 	beq.w	da52 <_svfprintf_r+0x1c2>
    e6be:	f899 3000 	ldrb.w	r3, [r9]
    e6c2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    e6c6:	f7ff b93f 	b.w	d948 <_svfprintf_r+0xb8>
    e6ca:	930b      	str	r3, [sp, #44]	; 0x2c
    e6cc:	f8cd 8008 	str.w	r8, [sp, #8]
    e6d0:	f7ff bbf1 	b.w	deb6 <_svfprintf_r+0x626>
    e6d4:	930b      	str	r3, [sp, #44]	; 0x2c
    e6d6:	4b9a      	ldr	r3, [pc, #616]	; (e940 <_svfprintf_r+0x10b0>)
    e6d8:	9311      	str	r3, [sp, #68]	; 0x44
    e6da:	f018 0120 	ands.w	r1, r8, #32
    e6de:	f000 8105 	beq.w	e8ec <_svfprintf_r+0x105c>
    e6e2:	9b08      	ldr	r3, [sp, #32]
    e6e4:	3307      	adds	r3, #7
    e6e6:	f023 0307 	bic.w	r3, r3, #7
    e6ea:	6859      	ldr	r1, [r3, #4]
    e6ec:	f853 2b08 	ldr.w	r2, [r3], #8
    e6f0:	9308      	str	r3, [sp, #32]
    e6f2:	f018 0f01 	tst.w	r8, #1
    e6f6:	d00a      	beq.n	e70e <_svfprintf_r+0xe7e>
    e6f8:	ea52 0301 	orrs.w	r3, r2, r1
    e6fc:	d007      	beq.n	e70e <_svfprintf_r+0xe7e>
    e6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e700:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e704:	2330      	movs	r3, #48	; 0x30
    e706:	f048 0802 	orr.w	r8, r8, #2
    e70a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e70e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e712:	9302      	str	r3, [sp, #8]
    e714:	2302      	movs	r3, #2
    e716:	f7ff bb60 	b.w	ddda <_svfprintf_r+0x54a>
    e71a:	930b      	str	r3, [sp, #44]	; 0x2c
    e71c:	f7ff bbb6 	b.w	de8c <_svfprintf_r+0x5fc>
    e720:	930b      	str	r3, [sp, #44]	; 0x2c
    e722:	4b88      	ldr	r3, [pc, #544]	; (e944 <_svfprintf_r+0x10b4>)
    e724:	9311      	str	r3, [sp, #68]	; 0x44
    e726:	e7d8      	b.n	e6da <_svfprintf_r+0xe4a>
    e728:	9b08      	ldr	r3, [sp, #32]
    e72a:	2101      	movs	r1, #1
    e72c:	f853 2b04 	ldr.w	r2, [r3], #4
    e730:	9102      	str	r1, [sp, #8]
    e732:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e736:	9308      	str	r3, [sp, #32]
    e738:	9105      	str	r1, [sp, #20]
    e73a:	ac37      	add	r4, sp, #220	; 0xdc
    e73c:	f7ff baaf 	b.w	dc9e <_svfprintf_r+0x40e>
    e740:	ee1b 1a10 	vmov	r1, s22
    e744:	aa24      	add	r2, sp, #144	; 0x90
    e746:	4658      	mov	r0, fp
    e748:	f003 ff2e 	bl	125a8 <__ssprint_r>
    e74c:	2800      	cmp	r0, #0
    e74e:	f47f ad04 	bne.w	e15a <_svfprintf_r+0x8ca>
    e752:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e754:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e758:	e45d      	b.n	e016 <_svfprintf_r+0x786>
    e75a:	9b03      	ldr	r3, [sp, #12]
    e75c:	9407      	str	r4, [sp, #28]
    e75e:	2b06      	cmp	r3, #6
    e760:	4622      	mov	r2, r4
    e762:	bf28      	it	cs
    e764:	2306      	movcs	r3, #6
    e766:	9403      	str	r4, [sp, #12]
    e768:	4621      	mov	r1, r4
    e76a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e76e:	4c76      	ldr	r4, [pc, #472]	; (e948 <_svfprintf_r+0x10b8>)
    e770:	9302      	str	r3, [sp, #8]
    e772:	9305      	str	r3, [sp, #20]
    e774:	920f      	str	r2, [sp, #60]	; 0x3c
    e776:	f7ff ba6c 	b.w	dc52 <_svfprintf_r+0x3c2>
    e77a:	2140      	movs	r1, #64	; 0x40
    e77c:	4658      	mov	r0, fp
    e77e:	f7fb fa4d 	bl	9c1c <_malloc_r>
    e782:	6020      	str	r0, [r4, #0]
    e784:	6120      	str	r0, [r4, #16]
    e786:	2800      	cmp	r0, #0
    e788:	f000 860f 	beq.w	f3aa <_svfprintf_r+0x1b1a>
    e78c:	2340      	movs	r3, #64	; 0x40
    e78e:	6163      	str	r3, [r4, #20]
    e790:	f7ff b89e 	b.w	d8d0 <_svfprintf_r+0x40>
    e794:	2d10      	cmp	r5, #16
    e796:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e798:	f340 825d 	ble.w	ec56 <_svfprintf_r+0x13c6>
    e79c:	4651      	mov	r1, sl
    e79e:	2610      	movs	r6, #16
    e7a0:	ee1b aa10 	vmov	sl, s22
    e7a4:	e004      	b.n	e7b0 <_svfprintf_r+0xf20>
    e7a6:	3108      	adds	r1, #8
    e7a8:	3d10      	subs	r5, #16
    e7aa:	2d10      	cmp	r5, #16
    e7ac:	f340 8252 	ble.w	ec54 <_svfprintf_r+0x13c4>
    e7b0:	3301      	adds	r3, #1
    e7b2:	4866      	ldr	r0, [pc, #408]	; (e94c <_svfprintf_r+0x10bc>)
    e7b4:	3210      	adds	r2, #16
    e7b6:	2b07      	cmp	r3, #7
    e7b8:	e9c1 0600 	strd	r0, r6, [r1]
    e7bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7c0:	ddf1      	ble.n	e7a6 <_svfprintf_r+0xf16>
    e7c2:	aa24      	add	r2, sp, #144	; 0x90
    e7c4:	4651      	mov	r1, sl
    e7c6:	4658      	mov	r0, fp
    e7c8:	f003 feee 	bl	125a8 <__ssprint_r>
    e7cc:	2800      	cmp	r0, #0
    e7ce:	f47f acc4 	bne.w	e15a <_svfprintf_r+0x8ca>
    e7d2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e7d6:	a927      	add	r1, sp, #156	; 0x9c
    e7d8:	e7e6      	b.n	e7a8 <_svfprintf_r+0xf18>
    e7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e7dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e7e0:	18e3      	adds	r3, r4, r3
    e7e2:	9303      	str	r3, [sp, #12]
    e7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e7e6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e7ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e7ec:	9d05      	ldr	r5, [sp, #20]
    e7ee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e7f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e7f6:	940b      	str	r4, [sp, #44]	; 0x2c
    e7f8:	ee1b 1a10 	vmov	r1, s22
    e7fc:	4650      	mov	r0, sl
    e7fe:	2b00      	cmp	r3, #0
    e800:	d034      	beq.n	e86c <_svfprintf_r+0xfdc>
    e802:	f1b8 0f00 	cmp.w	r8, #0
    e806:	d135      	bne.n	e874 <_svfprintf_r+0xfe4>
    e808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e80a:	3b01      	subs	r3, #1
    e80c:	3e01      	subs	r6, #1
    e80e:	930d      	str	r3, [sp, #52]	; 0x34
    e810:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e812:	e9c0 3900 	strd	r3, r9, [r0]
    e816:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e818:	3301      	adds	r3, #1
    e81a:	444a      	add	r2, r9
    e81c:	2b07      	cmp	r3, #7
    e81e:	9226      	str	r2, [sp, #152]	; 0x98
    e820:	9325      	str	r3, [sp, #148]	; 0x94
    e822:	dc6c      	bgt.n	e8fe <_svfprintf_r+0x106e>
    e824:	3008      	adds	r0, #8
    e826:	9b03      	ldr	r3, [sp, #12]
    e828:	f896 c000 	ldrb.w	ip, [r6]
    e82c:	1b5b      	subs	r3, r3, r5
    e82e:	4563      	cmp	r3, ip
    e830:	bfa8      	it	ge
    e832:	4663      	movge	r3, ip
    e834:	2b00      	cmp	r3, #0
    e836:	469a      	mov	sl, r3
    e838:	dd0c      	ble.n	e854 <_svfprintf_r+0xfc4>
    e83a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e83c:	3401      	adds	r4, #1
    e83e:	441a      	add	r2, r3
    e840:	2c07      	cmp	r4, #7
    e842:	e9c0 5300 	strd	r5, r3, [r0]
    e846:	9226      	str	r2, [sp, #152]	; 0x98
    e848:	9425      	str	r4, [sp, #148]	; 0x94
    e84a:	f300 8177 	bgt.w	eb3c <_svfprintf_r+0x12ac>
    e84e:	f896 c000 	ldrb.w	ip, [r6]
    e852:	3008      	adds	r0, #8
    e854:	f1ba 0f00 	cmp.w	sl, #0
    e858:	bfac      	ite	ge
    e85a:	ebac 040a 	subge.w	r4, ip, sl
    e85e:	4664      	movlt	r4, ip
    e860:	2c00      	cmp	r4, #0
    e862:	dc0a      	bgt.n	e87a <_svfprintf_r+0xfea>
    e864:	4465      	add	r5, ip
    e866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e868:	2b00      	cmp	r3, #0
    e86a:	d1ca      	bne.n	e802 <_svfprintf_r+0xf72>
    e86c:	f1b8 0f00 	cmp.w	r8, #0
    e870:	f000 83ac 	beq.w	efcc <_svfprintf_r+0x173c>
    e874:	f108 38ff 	add.w	r8, r8, #4294967295
    e878:	e7ca      	b.n	e810 <_svfprintf_r+0xf80>
    e87a:	2c10      	cmp	r4, #16
    e87c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e880:	dd24      	ble.n	e8cc <_svfprintf_r+0x103c>
    e882:	9505      	str	r5, [sp, #20]
    e884:	f04f 0a10 	mov.w	sl, #16
    e888:	4663      	mov	r3, ip
    e88a:	460d      	mov	r5, r1
    e88c:	e004      	b.n	e898 <_svfprintf_r+0x1008>
    e88e:	3c10      	subs	r4, #16
    e890:	2c10      	cmp	r4, #16
    e892:	f100 0008 	add.w	r0, r0, #8
    e896:	dd16      	ble.n	e8c6 <_svfprintf_r+0x1036>
    e898:	3301      	adds	r3, #1
    e89a:	492c      	ldr	r1, [pc, #176]	; (e94c <_svfprintf_r+0x10bc>)
    e89c:	3210      	adds	r2, #16
    e89e:	2b07      	cmp	r3, #7
    e8a0:	e9c0 1a00 	strd	r1, sl, [r0]
    e8a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e8a8:	ddf1      	ble.n	e88e <_svfprintf_r+0xffe>
    e8aa:	aa24      	add	r2, sp, #144	; 0x90
    e8ac:	4629      	mov	r1, r5
    e8ae:	4658      	mov	r0, fp
    e8b0:	f003 fe7a 	bl	125a8 <__ssprint_r>
    e8b4:	2800      	cmp	r0, #0
    e8b6:	f47f ac50 	bne.w	e15a <_svfprintf_r+0x8ca>
    e8ba:	3c10      	subs	r4, #16
    e8bc:	2c10      	cmp	r4, #16
    e8be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e8c2:	a827      	add	r0, sp, #156	; 0x9c
    e8c4:	dce8      	bgt.n	e898 <_svfprintf_r+0x1008>
    e8c6:	4629      	mov	r1, r5
    e8c8:	9d05      	ldr	r5, [sp, #20]
    e8ca:	469c      	mov	ip, r3
    e8cc:	f10c 0301 	add.w	r3, ip, #1
    e8d0:	4422      	add	r2, r4
    e8d2:	6044      	str	r4, [r0, #4]
    e8d4:	2b07      	cmp	r3, #7
    e8d6:	4c1d      	ldr	r4, [pc, #116]	; (e94c <_svfprintf_r+0x10bc>)
    e8d8:	6004      	str	r4, [r0, #0]
    e8da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e8de:	f300 83c6 	bgt.w	f06e <_svfprintf_r+0x17de>
    e8e2:	f896 c000 	ldrb.w	ip, [r6]
    e8e6:	3008      	adds	r0, #8
    e8e8:	4465      	add	r5, ip
    e8ea:	e7bc      	b.n	e866 <_svfprintf_r+0xfd6>
    e8ec:	f018 0310 	ands.w	r3, r8, #16
    e8f0:	f000 80c2 	beq.w	ea78 <_svfprintf_r+0x11e8>
    e8f4:	9b08      	ldr	r3, [sp, #32]
    e8f6:	f853 2b04 	ldr.w	r2, [r3], #4
    e8fa:	9308      	str	r3, [sp, #32]
    e8fc:	e6f9      	b.n	e6f2 <_svfprintf_r+0xe62>
    e8fe:	aa24      	add	r2, sp, #144	; 0x90
    e900:	4658      	mov	r0, fp
    e902:	9105      	str	r1, [sp, #20]
    e904:	f003 fe50 	bl	125a8 <__ssprint_r>
    e908:	2800      	cmp	r0, #0
    e90a:	f47f ac26 	bne.w	e15a <_svfprintf_r+0x8ca>
    e90e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e910:	9905      	ldr	r1, [sp, #20]
    e912:	a827      	add	r0, sp, #156	; 0x9c
    e914:	e787      	b.n	e826 <_svfprintf_r+0xf96>
    e916:	9802      	ldr	r0, [sp, #8]
    e918:	f8cd a01c 	str.w	sl, [sp, #28]
    e91c:	ac50      	add	r4, sp, #320	; 0x140
    e91e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e922:	2500      	movs	r5, #0
    e924:	ee0a ba10 	vmov	s20, fp
    e928:	4b09      	ldr	r3, [pc, #36]	; (e950 <_svfprintf_r+0x10c0>)
    e92a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e92e:	f8cd 9014 	str.w	r9, [sp, #20]
    e932:	46a3      	mov	fp, r4
    e934:	f04f 0805 	mov.w	r8, #5
    e938:	46ac      	mov	ip, r5
    e93a:	4604      	mov	r4, r0
    e93c:	e010      	b.n	e960 <_svfprintf_r+0x10d0>
    e93e:	bf00      	nop
    e940:	20000c40 	.word	0x20000c40
    e944:	20000c54 	.word	0x20000c54
    e948:	20000c68 	.word	0x20000c68
    e94c:	20008488 	.word	0x20008488
    e950:	cccccccd 	.word	0xcccccccd
    e954:	2a0a      	cmp	r2, #10
    e956:	f171 0100 	sbcs.w	r1, r1, #0
    e95a:	d336      	bcc.n	e9ca <_svfprintf_r+0x113a>
    e95c:	464a      	mov	r2, r9
    e95e:	4631      	mov	r1, r6
    e960:	1850      	adds	r0, r2, r1
    e962:	f140 0000 	adc.w	r0, r0, #0
    e966:	fba3 5600 	umull	r5, r6, r3, r0
    e96a:	f026 0503 	bic.w	r5, r6, #3
    e96e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e972:	1b40      	subs	r0, r0, r5
    e974:	1a15      	subs	r5, r2, r0
    e976:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e97a:	f161 0e00 	sbc.w	lr, r1, #0
    e97e:	fb06 f605 	mul.w	r6, r6, r5
    e982:	fba5 9503 	umull	r9, r5, r5, r3
    e986:	fb03 660e 	mla	r6, r3, lr, r6
    e98a:	f009 0e01 	and.w	lr, r9, #1
    e98e:	442e      	add	r6, r5
    e990:	fbae 5e08 	umull	r5, lr, lr, r8
    e994:	182d      	adds	r5, r5, r0
    e996:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e99a:	3530      	adds	r5, #48	; 0x30
    e99c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e9a0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e9a4:	f10c 0c01 	add.w	ip, ip, #1
    e9a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    e9ac:	0876      	lsrs	r6, r6, #1
    e9ae:	2c00      	cmp	r4, #0
    e9b0:	d0d0      	beq.n	e954 <_svfprintf_r+0x10c4>
    e9b2:	f89a 0000 	ldrb.w	r0, [sl]
    e9b6:	4584      	cmp	ip, r0
    e9b8:	d1cc      	bne.n	e954 <_svfprintf_r+0x10c4>
    e9ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e9be:	d0c9      	beq.n	e954 <_svfprintf_r+0x10c4>
    e9c0:	2a0a      	cmp	r2, #10
    e9c2:	f171 0100 	sbcs.w	r1, r1, #0
    e9c6:	f080 818f 	bcs.w	ece8 <_svfprintf_r+0x1458>
    e9ca:	465c      	mov	r4, fp
    e9cc:	ab50      	add	r3, sp, #320	; 0x140
    e9ce:	1b1b      	subs	r3, r3, r4
    e9d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e9d4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e9d8:	ee1a ba10 	vmov	fp, s20
    e9dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e9e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e9e4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e9e8:	9305      	str	r3, [sp, #20]
    e9ea:	f7ff bac2 	b.w	df72 <_svfprintf_r+0x6e2>
    e9ee:	ee1b 1a10 	vmov	r1, s22
    e9f2:	aa24      	add	r2, sp, #144	; 0x90
    e9f4:	4658      	mov	r0, fp
    e9f6:	f003 fdd7 	bl	125a8 <__ssprint_r>
    e9fa:	2800      	cmp	r0, #0
    e9fc:	f47f abad 	bne.w	e15a <_svfprintf_r+0x8ca>
    ea00:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ea04:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea06:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea0a:	f7ff b896 	b.w	db3a <_svfprintf_r+0x2aa>
    ea0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea10:	48be      	ldr	r0, [pc, #760]	; (ed0c <_svfprintf_r+0x147c>)
    ea12:	f8ca 0000 	str.w	r0, [sl]
    ea16:	3301      	adds	r3, #1
    ea18:	3201      	adds	r2, #1
    ea1a:	2001      	movs	r0, #1
    ea1c:	2b07      	cmp	r3, #7
    ea1e:	9226      	str	r2, [sp, #152]	; 0x98
    ea20:	9325      	str	r3, [sp, #148]	; 0x94
    ea22:	f8ca 0004 	str.w	r0, [sl, #4]
    ea26:	f300 8177 	bgt.w	ed18 <_svfprintf_r+0x1488>
    ea2a:	f10a 0a08 	add.w	sl, sl, #8
    ea2e:	2900      	cmp	r1, #0
    ea30:	f040 80af 	bne.w	eb92 <_svfprintf_r+0x1302>
    ea34:	990e      	ldr	r1, [sp, #56]	; 0x38
    ea36:	f008 0301 	and.w	r3, r8, #1
    ea3a:	430b      	orrs	r3, r1
    ea3c:	f43f a8c0 	beq.w	dbc0 <_svfprintf_r+0x330>
    ea40:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea42:	9912      	ldr	r1, [sp, #72]	; 0x48
    ea44:	441a      	add	r2, r3
    ea46:	e9ca 1300 	strd	r1, r3, [sl]
    ea4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea4c:	9226      	str	r2, [sp, #152]	; 0x98
    ea4e:	3301      	adds	r3, #1
    ea50:	2b07      	cmp	r3, #7
    ea52:	9325      	str	r3, [sp, #148]	; 0x94
    ea54:	f300 8252 	bgt.w	eefc <_svfprintf_r+0x166c>
    ea58:	f10a 0a08 	add.w	sl, sl, #8
    ea5c:	990e      	ldr	r1, [sp, #56]	; 0x38
    ea5e:	f8ca 4000 	str.w	r4, [sl]
    ea62:	3301      	adds	r3, #1
    ea64:	440a      	add	r2, r1
    ea66:	2b07      	cmp	r3, #7
    ea68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea6c:	f8ca 1004 	str.w	r1, [sl, #4]
    ea70:	f77f a8a4 	ble.w	dbbc <_svfprintf_r+0x32c>
    ea74:	f7ff bbbd 	b.w	e1f2 <_svfprintf_r+0x962>
    ea78:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ea7c:	f000 80dd 	beq.w	ec3a <_svfprintf_r+0x13aa>
    ea80:	9808      	ldr	r0, [sp, #32]
    ea82:	f850 2b04 	ldr.w	r2, [r0], #4
    ea86:	9008      	str	r0, [sp, #32]
    ea88:	4619      	mov	r1, r3
    ea8a:	b292      	uxth	r2, r2
    ea8c:	e631      	b.n	e6f2 <_svfprintf_r+0xe62>
    ea8e:	ee1b 1a10 	vmov	r1, s22
    ea92:	aa24      	add	r2, sp, #144	; 0x90
    ea94:	4658      	mov	r0, fp
    ea96:	f003 fd87 	bl	125a8 <__ssprint_r>
    ea9a:	2800      	cmp	r0, #0
    ea9c:	f47f ab5d 	bne.w	e15a <_svfprintf_r+0x8ca>
    eaa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eaa2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eaa6:	f7ff baa3 	b.w	dff0 <_svfprintf_r+0x760>
    eaaa:	ae22      	add	r6, sp, #136	; 0x88
    eaac:	2208      	movs	r2, #8
    eaae:	2100      	movs	r1, #0
    eab0:	4630      	mov	r0, r6
    eab2:	941d      	str	r4, [sp, #116]	; 0x74
    eab4:	f7fc ffda 	bl	ba6c <memset>
    eab8:	9b03      	ldr	r3, [sp, #12]
    eaba:	1c5a      	adds	r2, r3, #1
    eabc:	f000 80db 	beq.w	ec76 <_svfprintf_r+0x13e6>
    eac0:	2500      	movs	r5, #0
    eac2:	f8cd 9008 	str.w	r9, [sp, #8]
    eac6:	f8cd 801c 	str.w	r8, [sp, #28]
    eaca:	4699      	mov	r9, r3
    eacc:	46a8      	mov	r8, r5
    eace:	e00c      	b.n	eaea <_svfprintf_r+0x125a>
    ead0:	a937      	add	r1, sp, #220	; 0xdc
    ead2:	4658      	mov	r0, fp
    ead4:	f003 fc3e 	bl	12354 <_wcrtomb_r>
    ead8:	1c43      	adds	r3, r0, #1
    eada:	4440      	add	r0, r8
    eadc:	f000 83c8 	beq.w	f270 <_svfprintf_r+0x19e0>
    eae0:	4548      	cmp	r0, r9
    eae2:	dc08      	bgt.n	eaf6 <_svfprintf_r+0x1266>
    eae4:	f000 8418 	beq.w	f318 <_svfprintf_r+0x1a88>
    eae8:	4680      	mov	r8, r0
    eaea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    eaec:	5952      	ldr	r2, [r2, r5]
    eaee:	4633      	mov	r3, r6
    eaf0:	3504      	adds	r5, #4
    eaf2:	2a00      	cmp	r2, #0
    eaf4:	d1ec      	bne.n	ead0 <_svfprintf_r+0x1240>
    eaf6:	f8cd 8014 	str.w	r8, [sp, #20]
    eafa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    eafe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    eb02:	e0c5      	b.n	ec90 <_svfprintf_r+0x1400>
    eb04:	3301      	adds	r3, #1
    eb06:	4982      	ldr	r1, [pc, #520]	; (ed10 <_svfprintf_r+0x1480>)
    eb08:	f8ca 4004 	str.w	r4, [sl, #4]
    eb0c:	4422      	add	r2, r4
    eb0e:	2b07      	cmp	r3, #7
    eb10:	f8ca 1000 	str.w	r1, [sl]
    eb14:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eb18:	f77f a850 	ble.w	dbbc <_svfprintf_r+0x32c>
    eb1c:	f7ff bb69 	b.w	e1f2 <_svfprintf_r+0x962>
    eb20:	ee1b 1a10 	vmov	r1, s22
    eb24:	aa24      	add	r2, sp, #144	; 0x90
    eb26:	4658      	mov	r0, fp
    eb28:	f003 fd3e 	bl	125a8 <__ssprint_r>
    eb2c:	2800      	cmp	r0, #0
    eb2e:	f47f ab14 	bne.w	e15a <_svfprintf_r+0x8ca>
    eb32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eb34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb38:	f7ff b829 	b.w	db8e <_svfprintf_r+0x2fe>
    eb3c:	aa24      	add	r2, sp, #144	; 0x90
    eb3e:	4658      	mov	r0, fp
    eb40:	9105      	str	r1, [sp, #20]
    eb42:	f003 fd31 	bl	125a8 <__ssprint_r>
    eb46:	2800      	cmp	r0, #0
    eb48:	f47f ab07 	bne.w	e15a <_svfprintf_r+0x8ca>
    eb4c:	f896 c000 	ldrb.w	ip, [r6]
    eb50:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eb52:	9905      	ldr	r1, [sp, #20]
    eb54:	a827      	add	r0, sp, #156	; 0x9c
    eb56:	e67d      	b.n	e854 <_svfprintf_r+0xfc4>
    eb58:	2b01      	cmp	r3, #1
    eb5a:	f8cd 8008 	str.w	r8, [sp, #8]
    eb5e:	f47f a9f3 	bne.w	df48 <_svfprintf_r+0x6b8>
    eb62:	f7ff bb93 	b.w	e28c <_svfprintf_r+0x9fc>
    eb66:	9b08      	ldr	r3, [sp, #32]
    eb68:	9904      	ldr	r1, [sp, #16]
    eb6a:	f853 2b04 	ldr.w	r2, [r3], #4
    eb6e:	464c      	mov	r4, r9
    eb70:	6011      	str	r1, [r2, #0]
    eb72:	9308      	str	r3, [sp, #32]
    eb74:	f7fe bebe 	b.w	d8f4 <_svfprintf_r+0x64>
    eb78:	3301      	adds	r3, #1
    eb7a:	4965      	ldr	r1, [pc, #404]	; (ed10 <_svfprintf_r+0x1480>)
    eb7c:	f8ca 4004 	str.w	r4, [sl, #4]
    eb80:	4422      	add	r2, r4
    eb82:	2b07      	cmp	r3, #7
    eb84:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eb88:	f8ca 1000 	str.w	r1, [sl]
    eb8c:	f77f ab22 	ble.w	e1d4 <_svfprintf_r+0x944>
    eb90:	e47b      	b.n	e48a <_svfprintf_r+0xbfa>
    eb92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eb94:	9812      	ldr	r0, [sp, #72]	; 0x48
    eb96:	441a      	add	r2, r3
    eb98:	e9ca 0300 	strd	r0, r3, [sl]
    eb9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eb9e:	9226      	str	r2, [sp, #152]	; 0x98
    eba0:	3301      	adds	r3, #1
    eba2:	2b07      	cmp	r3, #7
    eba4:	9325      	str	r3, [sp, #148]	; 0x94
    eba6:	f300 81a9 	bgt.w	eefc <_svfprintf_r+0x166c>
    ebaa:	f10a 0a08 	add.w	sl, sl, #8
    ebae:	2900      	cmp	r1, #0
    ebb0:	f6bf af54 	bge.w	ea5c <_svfprintf_r+0x11cc>
    ebb4:	424d      	negs	r5, r1
    ebb6:	3110      	adds	r1, #16
    ebb8:	f280 830f 	bge.w	f1da <_svfprintf_r+0x194a>
    ebbc:	ee1b 1a10 	vmov	r1, s22
    ebc0:	2610      	movs	r6, #16
    ebc2:	e005      	b.n	ebd0 <_svfprintf_r+0x1340>
    ebc4:	f10a 0a08 	add.w	sl, sl, #8
    ebc8:	3d10      	subs	r5, #16
    ebca:	2d10      	cmp	r5, #16
    ebcc:	f340 8305 	ble.w	f1da <_svfprintf_r+0x194a>
    ebd0:	3301      	adds	r3, #1
    ebd2:	484f      	ldr	r0, [pc, #316]	; (ed10 <_svfprintf_r+0x1480>)
    ebd4:	3210      	adds	r2, #16
    ebd6:	2b07      	cmp	r3, #7
    ebd8:	e9ca 0600 	strd	r0, r6, [sl]
    ebdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ebe0:	ddf0      	ble.n	ebc4 <_svfprintf_r+0x1334>
    ebe2:	aa24      	add	r2, sp, #144	; 0x90
    ebe4:	4658      	mov	r0, fp
    ebe6:	9103      	str	r1, [sp, #12]
    ebe8:	f003 fcde 	bl	125a8 <__ssprint_r>
    ebec:	2800      	cmp	r0, #0
    ebee:	f47f aab4 	bne.w	e15a <_svfprintf_r+0x8ca>
    ebf2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ebf6:	9903      	ldr	r1, [sp, #12]
    ebf8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ebfc:	e7e4      	b.n	ebc8 <_svfprintf_r+0x1338>
    ebfe:	9b08      	ldr	r3, [sp, #32]
    ec00:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ec04:	bf1a      	itte	ne
    ec06:	4611      	movne	r1, r2
    ec08:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec0c:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec10:	9308      	str	r3, [sp, #32]
    ec12:	bf18      	it	ne
    ec14:	b2d2      	uxtbne	r2, r2
    ec16:	f7ff b945 	b.w	dea4 <_svfprintf_r+0x614>
    ec1a:	9b02      	ldr	r3, [sp, #8]
    ec1c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    ec20:	9b08      	ldr	r3, [sp, #32]
    ec22:	bf1a      	itte	ne
    ec24:	4611      	movne	r1, r2
    ec26:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec2a:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec2e:	9308      	str	r3, [sp, #32]
    ec30:	bf18      	it	ne
    ec32:	b2d2      	uxtbne	r2, r2
    ec34:	2301      	movs	r3, #1
    ec36:	f7ff b8d0 	b.w	ddda <_svfprintf_r+0x54a>
    ec3a:	9b08      	ldr	r3, [sp, #32]
    ec3c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ec40:	bf1a      	itte	ne
    ec42:	4611      	movne	r1, r2
    ec44:	f853 2b04 	ldrne.w	r2, [r3], #4
    ec48:	f853 2b04 	ldreq.w	r2, [r3], #4
    ec4c:	9308      	str	r3, [sp, #32]
    ec4e:	bf18      	it	ne
    ec50:	b2d2      	uxtbne	r2, r2
    ec52:	e54e      	b.n	e6f2 <_svfprintf_r+0xe62>
    ec54:	468a      	mov	sl, r1
    ec56:	3301      	adds	r3, #1
    ec58:	492d      	ldr	r1, [pc, #180]	; (ed10 <_svfprintf_r+0x1480>)
    ec5a:	f8ca 5004 	str.w	r5, [sl, #4]
    ec5e:	442a      	add	r2, r5
    ec60:	2b07      	cmp	r3, #7
    ec62:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ec66:	f8ca 1000 	str.w	r1, [sl]
    ec6a:	f300 8139 	bgt.w	eee0 <_svfprintf_r+0x1650>
    ec6e:	f10a 0a08 	add.w	sl, sl, #8
    ec72:	f7ff bb8c 	b.w	e38e <_svfprintf_r+0xafe>
    ec76:	2300      	movs	r3, #0
    ec78:	4619      	mov	r1, r3
    ec7a:	9600      	str	r6, [sp, #0]
    ec7c:	aa1d      	add	r2, sp, #116	; 0x74
    ec7e:	4658      	mov	r0, fp
    ec80:	f003 fb8e 	bl	123a0 <_wcsrtombs_r>
    ec84:	4603      	mov	r3, r0
    ec86:	3301      	adds	r3, #1
    ec88:	9005      	str	r0, [sp, #20]
    ec8a:	f000 82f1 	beq.w	f270 <_svfprintf_r+0x19e0>
    ec8e:	941d      	str	r4, [sp, #116]	; 0x74
    ec90:	9b05      	ldr	r3, [sp, #20]
    ec92:	2b00      	cmp	r3, #0
    ec94:	d04e      	beq.n	ed34 <_svfprintf_r+0x14a4>
    ec96:	2b63      	cmp	r3, #99	; 0x63
    ec98:	f300 8118 	bgt.w	eecc <_svfprintf_r+0x163c>
    ec9c:	2300      	movs	r3, #0
    ec9e:	9307      	str	r3, [sp, #28]
    eca0:	ac37      	add	r4, sp, #220	; 0xdc
    eca2:	2208      	movs	r2, #8
    eca4:	2100      	movs	r1, #0
    eca6:	4630      	mov	r0, r6
    eca8:	f7fc fee0 	bl	ba6c <memset>
    ecac:	9d05      	ldr	r5, [sp, #20]
    ecae:	9600      	str	r6, [sp, #0]
    ecb0:	462b      	mov	r3, r5
    ecb2:	aa1d      	add	r2, sp, #116	; 0x74
    ecb4:	4621      	mov	r1, r4
    ecb6:	4658      	mov	r0, fp
    ecb8:	f003 fb72 	bl	123a0 <_wcsrtombs_r>
    ecbc:	4285      	cmp	r5, r0
    ecbe:	f040 837c 	bne.w	f3ba <_svfprintf_r+0x1b2a>
    ecc2:	9a05      	ldr	r2, [sp, #20]
    ecc4:	2300      	movs	r3, #0
    ecc6:	54a3      	strb	r3, [r4, r2]
    ecc8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    eccc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ecd0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ecd4:	9303      	str	r3, [sp, #12]
    ecd6:	9202      	str	r2, [sp, #8]
    ecd8:	930f      	str	r3, [sp, #60]	; 0x3c
    ecda:	f7fe bfba 	b.w	dc52 <_svfprintf_r+0x3c2>
    ecde:	212d      	movs	r1, #45	; 0x2d
    ece0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ece4:	f7fe bfa4 	b.w	dc30 <_svfprintf_r+0x3a0>
    ece8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ecea:	9915      	ldr	r1, [sp, #84]	; 0x54
    ecec:	ebab 0b03 	sub.w	fp, fp, r3
    ecf0:	461a      	mov	r2, r3
    ecf2:	4658      	mov	r0, fp
    ecf4:	f7fc ff52 	bl	bb9c <strncpy>
    ecf8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    ecfc:	4b05      	ldr	r3, [pc, #20]	; (ed14 <_svfprintf_r+0x1484>)
    ecfe:	b10a      	cbz	r2, ed04 <_svfprintf_r+0x1474>
    ed00:	f10a 0a01 	add.w	sl, sl, #1
    ed04:	f04f 0c00 	mov.w	ip, #0
    ed08:	e628      	b.n	e95c <_svfprintf_r+0x10cc>
    ed0a:	bf00      	nop
    ed0c:	20000c70 	.word	0x20000c70
    ed10:	20008488 	.word	0x20008488
    ed14:	cccccccd 	.word	0xcccccccd
    ed18:	ee1b 1a10 	vmov	r1, s22
    ed1c:	aa24      	add	r2, sp, #144	; 0x90
    ed1e:	4658      	mov	r0, fp
    ed20:	f003 fc42 	bl	125a8 <__ssprint_r>
    ed24:	2800      	cmp	r0, #0
    ed26:	f47f aa18 	bne.w	e15a <_svfprintf_r+0x8ca>
    ed2a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ed2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ed2e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed32:	e67c      	b.n	ea2e <_svfprintf_r+0x119e>
    ed34:	9b05      	ldr	r3, [sp, #20]
    ed36:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ed3a:	930f      	str	r3, [sp, #60]	; 0x3c
    ed3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ed40:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ed44:	9307      	str	r3, [sp, #28]
    ed46:	f7fe bf84 	b.w	dc52 <_svfprintf_r+0x3c2>
    ed4a:	990e      	ldr	r1, [sp, #56]	; 0x38
    ed4c:	9805      	ldr	r0, [sp, #20]
    ed4e:	1865      	adds	r5, r4, r1
    ed50:	1a2d      	subs	r5, r5, r0
    ed52:	1acc      	subs	r4, r1, r3
    ed54:	42a5      	cmp	r5, r4
    ed56:	bfa8      	it	ge
    ed58:	4625      	movge	r5, r4
    ed5a:	f7ff bb4d 	b.w	e3f8 <_svfprintf_r+0xb68>
    ed5e:	9b08      	ldr	r3, [sp, #32]
    ed60:	9904      	ldr	r1, [sp, #16]
    ed62:	f853 2b04 	ldr.w	r2, [r3], #4
    ed66:	9308      	str	r3, [sp, #32]
    ed68:	8011      	strh	r1, [r2, #0]
    ed6a:	464c      	mov	r4, r9
    ed6c:	f7fe bdc2 	b.w	d8f4 <_svfprintf_r+0x64>
    ed70:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ed74:	9308      	str	r3, [sp, #32]
    ed76:	17d1      	asrs	r1, r2, #31
    ed78:	460b      	mov	r3, r1
    ed7a:	f7fe bfdb 	b.w	dd34 <_svfprintf_r+0x4a4>
    ed7e:	9a03      	ldr	r2, [sp, #12]
    ed80:	2102      	movs	r1, #2
    ed82:	ab22      	add	r3, sp, #136	; 0x88
    ed84:	9301      	str	r3, [sp, #4]
    ed86:	ab1d      	add	r3, sp, #116	; 0x74
    ed88:	9300      	str	r3, [sp, #0]
    ed8a:	4658      	mov	r0, fp
    ed8c:	ab1b      	add	r3, sp, #108	; 0x6c
    ed8e:	eeb0 0b4a 	vmov.f64	d0, d10
    ed92:	9202      	str	r2, [sp, #8]
    ed94:	f002 fa14 	bl	111c0 <_dtoa_r>
    ed98:	2d47      	cmp	r5, #71	; 0x47
    ed9a:	9a02      	ldr	r2, [sp, #8]
    ed9c:	4604      	mov	r4, r0
    ed9e:	f000 8161 	beq.w	f064 <_svfprintf_r+0x17d4>
    eda2:	2d46      	cmp	r5, #70	; 0x46
    eda4:	4410      	add	r0, r2
    eda6:	d105      	bne.n	edb4 <_svfprintf_r+0x1524>
    eda8:	7823      	ldrb	r3, [r4, #0]
    edaa:	2b30      	cmp	r3, #48	; 0x30
    edac:	f000 826f 	beq.w	f28e <_svfprintf_r+0x19fe>
    edb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    edb2:	4410      	add	r0, r2
    edb4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    edb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edbc:	f040 8146 	bne.w	f04c <_svfprintf_r+0x17bc>
    edc0:	4603      	mov	r3, r0
    edc2:	1b1b      	subs	r3, r3, r4
    edc4:	930e      	str	r3, [sp, #56]	; 0x38
    edc6:	2d47      	cmp	r5, #71	; 0x47
    edc8:	f000 8110 	beq.w	efec <_svfprintf_r+0x175c>
    edcc:	2d46      	cmp	r5, #70	; 0x46
    edce:	f000 81b5 	beq.w	f13c <_svfprintf_r+0x18ac>
    edd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    edd4:	930c      	str	r3, [sp, #48]	; 0x30
    edd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    edd8:	2d41      	cmp	r5, #65	; 0x41
    edda:	f103 33ff 	add.w	r3, r3, #4294967295
    edde:	931b      	str	r3, [sp, #108]	; 0x6c
    ede0:	f000 81e5 	beq.w	f1ae <_svfprintf_r+0x191e>
    ede4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    ede8:	2100      	movs	r1, #0
    edea:	2b00      	cmp	r3, #0
    edec:	bfb8      	it	lt
    edee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    edf0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    edf4:	bfba      	itte	lt
    edf6:	f1c3 0301 	rsblt	r3, r3, #1
    edfa:	222d      	movlt	r2, #45	; 0x2d
    edfc:	222b      	movge	r2, #43	; 0x2b
    edfe:	2b09      	cmp	r3, #9
    ee00:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    ee04:	f340 81da 	ble.w	f1bc <_svfprintf_r+0x192c>
    ee08:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    ee0c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f22c <_svfprintf_r+0x199c>
    ee10:	462a      	mov	r2, r5
    ee12:	4610      	mov	r0, r2
    ee14:	fb8c 2103 	smull	r2, r1, ip, r3
    ee18:	17da      	asrs	r2, r3, #31
    ee1a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    ee1e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    ee22:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    ee26:	3130      	adds	r1, #48	; 0x30
    ee28:	f800 1c01 	strb.w	r1, [r0, #-1]
    ee2c:	4619      	mov	r1, r3
    ee2e:	2963      	cmp	r1, #99	; 0x63
    ee30:	4613      	mov	r3, r2
    ee32:	f100 32ff 	add.w	r2, r0, #4294967295
    ee36:	dcec      	bgt.n	ee12 <_svfprintf_r+0x1582>
    ee38:	3330      	adds	r3, #48	; 0x30
    ee3a:	b2d9      	uxtb	r1, r3
    ee3c:	1e83      	subs	r3, r0, #2
    ee3e:	429d      	cmp	r5, r3
    ee40:	f802 1c01 	strb.w	r1, [r2, #-1]
    ee44:	f240 828b 	bls.w	f35e <_svfprintf_r+0x1ace>
    ee48:	4613      	mov	r3, r2
    ee4a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ee4e:	e001      	b.n	ee54 <_svfprintf_r+0x15c4>
    ee50:	f813 1b01 	ldrb.w	r1, [r3], #1
    ee54:	f802 1b01 	strb.w	r1, [r2], #1
    ee58:	429d      	cmp	r5, r3
    ee5a:	d1f9      	bne.n	ee50 <_svfprintf_r+0x15c0>
    ee5c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    ee60:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ee64:	1a1b      	subs	r3, r3, r0
    ee66:	4413      	add	r3, r2
    ee68:	aa1e      	add	r2, sp, #120	; 0x78
    ee6a:	1a9b      	subs	r3, r3, r2
    ee6c:	9314      	str	r3, [sp, #80]	; 0x50
    ee6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ee72:	2b01      	cmp	r3, #1
    ee74:	441a      	add	r2, r3
    ee76:	9205      	str	r2, [sp, #20]
    ee78:	f340 8203 	ble.w	f282 <_svfprintf_r+0x19f2>
    ee7c:	9b05      	ldr	r3, [sp, #20]
    ee7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ee80:	4413      	add	r3, r2
    ee82:	9305      	str	r3, [sp, #20]
    ee84:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ee88:	9a05      	ldr	r2, [sp, #20]
    ee8a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ee8e:	2300      	movs	r3, #0
    ee90:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ee94:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ee98:	930f      	str	r3, [sp, #60]	; 0x3c
    ee9a:	9202      	str	r2, [sp, #8]
    ee9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee9e:	2b00      	cmp	r3, #0
    eea0:	f040 80b1 	bne.w	f006 <_svfprintf_r+0x1776>
    eea4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    eea8:	9303      	str	r3, [sp, #12]
    eeaa:	f7fe bed2 	b.w	dc52 <_svfprintf_r+0x3c2>
    eeae:	4620      	mov	r0, r4
    eeb0:	f7fd f966 	bl	c180 <strlen>
    eeb4:	4602      	mov	r2, r0
    eeb6:	9005      	str	r0, [sp, #20]
    eeb8:	f7fe bf20 	b.w	dcfc <_svfprintf_r+0x46c>
    eebc:	ee1b 1a10 	vmov	r1, s22
    eec0:	aa24      	add	r2, sp, #144	; 0x90
    eec2:	4658      	mov	r0, fp
    eec4:	f003 fb70 	bl	125a8 <__ssprint_r>
    eec8:	f7fe bded 	b.w	daa6 <_svfprintf_r+0x216>
    eecc:	1c59      	adds	r1, r3, #1
    eece:	4658      	mov	r0, fp
    eed0:	f7fa fea4 	bl	9c1c <_malloc_r>
    eed4:	4604      	mov	r4, r0
    eed6:	2800      	cmp	r0, #0
    eed8:	f000 81ca 	beq.w	f270 <_svfprintf_r+0x19e0>
    eedc:	9007      	str	r0, [sp, #28]
    eede:	e6e0      	b.n	eca2 <_svfprintf_r+0x1412>
    eee0:	ee1b 1a10 	vmov	r1, s22
    eee4:	aa24      	add	r2, sp, #144	; 0x90
    eee6:	4658      	mov	r0, fp
    eee8:	f003 fb5e 	bl	125a8 <__ssprint_r>
    eeec:	2800      	cmp	r0, #0
    eeee:	f47f a934 	bne.w	e15a <_svfprintf_r+0x8ca>
    eef2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eef4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eef8:	f7ff ba49 	b.w	e38e <_svfprintf_r+0xafe>
    eefc:	ee1b 1a10 	vmov	r1, s22
    ef00:	aa24      	add	r2, sp, #144	; 0x90
    ef02:	4658      	mov	r0, fp
    ef04:	f003 fb50 	bl	125a8 <__ssprint_r>
    ef08:	2800      	cmp	r0, #0
    ef0a:	f47f a926 	bne.w	e15a <_svfprintf_r+0x8ca>
    ef0e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ef12:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ef14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef18:	e649      	b.n	ebae <_svfprintf_r+0x131e>
    ef1a:	2306      	movs	r3, #6
    ef1c:	9303      	str	r3, [sp, #12]
    ef1e:	f7ff bb83 	b.w	e628 <_svfprintf_r+0xd98>
    ef22:	9b03      	ldr	r3, [sp, #12]
    ef24:	2102      	movs	r1, #2
    ef26:	1c5a      	adds	r2, r3, #1
    ef28:	e72b      	b.n	ed82 <_svfprintf_r+0x14f2>
    ef2a:	9a03      	ldr	r2, [sp, #12]
    ef2c:	2103      	movs	r1, #3
    ef2e:	e728      	b.n	ed82 <_svfprintf_r+0x14f2>
    ef30:	a81b      	add	r0, sp, #108	; 0x6c
    ef32:	eeb0 0b4a 	vmov.f64	d0, d10
    ef36:	f002 f817 	bl	10f68 <frexp>
    ef3a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    ef3e:	ee20 0b07 	vmul.f64	d0, d0, d7
    ef42:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ef46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef4a:	d101      	bne.n	ef50 <_svfprintf_r+0x16c0>
    ef4c:	2301      	movs	r3, #1
    ef4e:	931b      	str	r3, [sp, #108]	; 0x6c
    ef50:	48b3      	ldr	r0, [pc, #716]	; (f220 <_svfprintf_r+0x1990>)
    ef52:	9b03      	ldr	r3, [sp, #12]
    ef54:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    ef58:	3b01      	subs	r3, #1
    ef5a:	4622      	mov	r2, r4
    ef5c:	e004      	b.n	ef68 <_svfprintf_r+0x16d8>
    ef5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef66:	d013      	beq.n	ef90 <_svfprintf_r+0x1700>
    ef68:	ee20 0b05 	vmul.f64	d0, d0, d5
    ef6c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    ef70:	f1b3 3fff 	cmp.w	r3, #4294967295
    ef74:	ee17 1a90 	vmov	r1, s15
    ef78:	5c41      	ldrb	r1, [r0, r1]
    ef7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    ef7e:	4694      	mov	ip, r2
    ef80:	ee30 0b46 	vsub.f64	d0, d0, d6
    ef84:	f802 1b01 	strb.w	r1, [r2], #1
    ef88:	4619      	mov	r1, r3
    ef8a:	f103 33ff 	add.w	r3, r3, #4294967295
    ef8e:	d1e6      	bne.n	ef5e <_svfprintf_r+0x16ce>
    ef90:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ef94:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ef98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef9c:	f300 8148 	bgt.w	f230 <_svfprintf_r+0x19a0>
    efa0:	eeb4 0b46 	vcmp.f64	d0, d6
    efa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efa8:	d104      	bne.n	efb4 <_svfprintf_r+0x1724>
    efaa:	ee17 3a90 	vmov	r3, s15
    efae:	07db      	lsls	r3, r3, #31
    efb0:	f100 813e 	bmi.w	f230 <_svfprintf_r+0x19a0>
    efb4:	2900      	cmp	r1, #0
    efb6:	db06      	blt.n	efc6 <_svfprintf_r+0x1736>
    efb8:	1c4b      	adds	r3, r1, #1
    efba:	4413      	add	r3, r2
    efbc:	2130      	movs	r1, #48	; 0x30
    efbe:	f802 1b01 	strb.w	r1, [r2], #1
    efc2:	4293      	cmp	r3, r2
    efc4:	d1fb      	bne.n	efbe <_svfprintf_r+0x172e>
    efc6:	1b13      	subs	r3, r2, r4
    efc8:	930e      	str	r3, [sp, #56]	; 0x38
    efca:	e6fc      	b.n	edc6 <_svfprintf_r+0x1536>
    efcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    efce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    efd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    efd4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    efd8:	9613      	str	r6, [sp, #76]	; 0x4c
    efda:	18e3      	adds	r3, r4, r3
    efdc:	429d      	cmp	r5, r3
    efde:	4629      	mov	r1, r5
    efe0:	bf28      	it	cs
    efe2:	4619      	movcs	r1, r3
    efe4:	4682      	mov	sl, r0
    efe6:	9105      	str	r1, [sp, #20]
    efe8:	f7ff b9d8 	b.w	e39c <_svfprintf_r+0xb0c>
    efec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    efee:	930c      	str	r3, [sp, #48]	; 0x30
    eff0:	1cda      	adds	r2, r3, #3
    eff2:	db02      	blt.n	effa <_svfprintf_r+0x176a>
    eff4:	9a03      	ldr	r2, [sp, #12]
    eff6:	4293      	cmp	r3, r2
    eff8:	dd0c      	ble.n	f014 <_svfprintf_r+0x1784>
    effa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    effc:	3b02      	subs	r3, #2
    effe:	930b      	str	r3, [sp, #44]	; 0x2c
    f000:	f023 0520 	bic.w	r5, r3, #32
    f004:	e6e7      	b.n	edd6 <_svfprintf_r+0x1546>
    f006:	212d      	movs	r1, #45	; 0x2d
    f008:	2300      	movs	r3, #0
    f00a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f00e:	9303      	str	r3, [sp, #12]
    f010:	f7fe be22 	b.w	dc58 <_svfprintf_r+0x3c8>
    f014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f018:	4293      	cmp	r3, r2
    f01a:	f2c0 80bd 	blt.w	f198 <_svfprintf_r+0x1908>
    f01e:	07f0      	lsls	r0, r6, #31
    f020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f022:	f140 8132 	bpl.w	f28a <_svfprintf_r+0x19fa>
    f026:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f028:	4413      	add	r3, r2
    f02a:	9305      	str	r3, [sp, #20]
    f02c:	0571      	lsls	r1, r6, #21
    f02e:	d503      	bpl.n	f038 <_svfprintf_r+0x17a8>
    f030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f032:	2b00      	cmp	r3, #0
    f034:	f300 8135 	bgt.w	f2a2 <_svfprintf_r+0x1a12>
    f038:	9b05      	ldr	r3, [sp, #20]
    f03a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f03e:	9302      	str	r3, [sp, #8]
    f040:	2367      	movs	r3, #103	; 0x67
    f042:	930b      	str	r3, [sp, #44]	; 0x2c
    f044:	2300      	movs	r3, #0
    f046:	930f      	str	r3, [sp, #60]	; 0x3c
    f048:	930d      	str	r3, [sp, #52]	; 0x34
    f04a:	e727      	b.n	ee9c <_svfprintf_r+0x160c>
    f04c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f04e:	4283      	cmp	r3, r0
    f050:	f4bf aeb7 	bcs.w	edc2 <_svfprintf_r+0x1532>
    f054:	2130      	movs	r1, #48	; 0x30
    f056:	1c5a      	adds	r2, r3, #1
    f058:	9222      	str	r2, [sp, #136]	; 0x88
    f05a:	7019      	strb	r1, [r3, #0]
    f05c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f05e:	4298      	cmp	r0, r3
    f060:	d8f9      	bhi.n	f056 <_svfprintf_r+0x17c6>
    f062:	e6ae      	b.n	edc2 <_svfprintf_r+0x1532>
    f064:	07f3      	lsls	r3, r6, #31
    f066:	f100 80a7 	bmi.w	f1b8 <_svfprintf_r+0x1928>
    f06a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f06c:	e6a9      	b.n	edc2 <_svfprintf_r+0x1532>
    f06e:	aa24      	add	r2, sp, #144	; 0x90
    f070:	4658      	mov	r0, fp
    f072:	9105      	str	r1, [sp, #20]
    f074:	f003 fa98 	bl	125a8 <__ssprint_r>
    f078:	2800      	cmp	r0, #0
    f07a:	f47f a86e 	bne.w	e15a <_svfprintf_r+0x8ca>
    f07e:	f896 c000 	ldrb.w	ip, [r6]
    f082:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f084:	9905      	ldr	r1, [sp, #20]
    f086:	a827      	add	r0, sp, #156	; 0x9c
    f088:	4465      	add	r5, ip
    f08a:	f7ff bbec 	b.w	e866 <_svfprintf_r+0xfd6>
    f08e:	ee1b 1a10 	vmov	r1, s22
    f092:	aa24      	add	r2, sp, #144	; 0x90
    f094:	4658      	mov	r0, fp
    f096:	f003 fa87 	bl	125a8 <__ssprint_r>
    f09a:	2800      	cmp	r0, #0
    f09c:	f47f a85d 	bne.w	e15a <_svfprintf_r+0x8ca>
    f0a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f0a6:	f7ff b96b 	b.w	e380 <_svfprintf_r+0xaf0>
    f0aa:	2378      	movs	r3, #120	; 0x78
    f0ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f0b0:	2330      	movs	r3, #48	; 0x30
    f0b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f0b6:	9b03      	ldr	r3, [sp, #12]
    f0b8:	2b63      	cmp	r3, #99	; 0x63
    f0ba:	f048 0602 	orr.w	r6, r8, #2
    f0be:	f300 80a6 	bgt.w	f20e <_svfprintf_r+0x197e>
    f0c2:	2300      	movs	r3, #0
    f0c4:	9307      	str	r3, [sp, #28]
    f0c6:	ac37      	add	r4, sp, #220	; 0xdc
    f0c8:	ee18 3a90 	vmov	r3, s17
    f0cc:	2b00      	cmp	r3, #0
    f0ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f0d2:	db2b      	blt.n	f12c <_svfprintf_r+0x189c>
    f0d4:	eeb0 ab48 	vmov.f64	d10, d8
    f0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0da:	f023 0520 	bic.w	r5, r3, #32
    f0de:	2300      	movs	r3, #0
    f0e0:	9309      	str	r3, [sp, #36]	; 0x24
    f0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0e4:	2b61      	cmp	r3, #97	; 0x61
    f0e6:	f47f aaad 	bne.w	e644 <_svfprintf_r+0xdb4>
    f0ea:	eeb0 0b4a 	vmov.f64	d0, d10
    f0ee:	a81b      	add	r0, sp, #108	; 0x6c
    f0f0:	f001 ff3a 	bl	10f68 <frexp>
    f0f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f0f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    f0fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f104:	d101      	bne.n	f10a <_svfprintf_r+0x187a>
    f106:	2301      	movs	r3, #1
    f108:	931b      	str	r3, [sp, #108]	; 0x6c
    f10a:	4846      	ldr	r0, [pc, #280]	; (f224 <_svfprintf_r+0x1994>)
    f10c:	e721      	b.n	ef52 <_svfprintf_r+0x16c2>
    f10e:	ee1b 1a10 	vmov	r1, s22
    f112:	aa24      	add	r2, sp, #144	; 0x90
    f114:	4658      	mov	r0, fp
    f116:	f003 fa47 	bl	125a8 <__ssprint_r>
    f11a:	2800      	cmp	r0, #0
    f11c:	f47f a81d 	bne.w	e15a <_svfprintf_r+0x8ca>
    f120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f122:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f124:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f128:	f7ff b94e 	b.w	e3c8 <_svfprintf_r+0xb38>
    f12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f12e:	f023 0520 	bic.w	r5, r3, #32
    f132:	232d      	movs	r3, #45	; 0x2d
    f134:	9309      	str	r3, [sp, #36]	; 0x24
    f136:	eeb1 ab48 	vneg.f64	d10, d8
    f13a:	e7d2      	b.n	f0e2 <_svfprintf_r+0x1852>
    f13c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f13e:	920c      	str	r2, [sp, #48]	; 0x30
    f140:	2a00      	cmp	r2, #0
    f142:	f006 0301 	and.w	r3, r6, #1
    f146:	f340 810d 	ble.w	f364 <_svfprintf_r+0x1ad4>
    f14a:	9903      	ldr	r1, [sp, #12]
    f14c:	430b      	orrs	r3, r1
    f14e:	f040 80cf 	bne.w	f2f0 <_svfprintf_r+0x1a60>
    f152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f154:	9305      	str	r3, [sp, #20]
    f156:	2366      	movs	r3, #102	; 0x66
    f158:	930b      	str	r3, [sp, #44]	; 0x2c
    f15a:	0572      	lsls	r2, r6, #21
    f15c:	f100 80a3 	bmi.w	f2a6 <_svfprintf_r+0x1a16>
    f160:	9b05      	ldr	r3, [sp, #20]
    f162:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f166:	9302      	str	r3, [sp, #8]
    f168:	e76c      	b.n	f044 <_svfprintf_r+0x17b4>
    f16a:	ee1b 1a10 	vmov	r1, s22
    f16e:	aa24      	add	r2, sp, #144	; 0x90
    f170:	4658      	mov	r0, fp
    f172:	f003 fa19 	bl	125a8 <__ssprint_r>
    f176:	2800      	cmp	r0, #0
    f178:	f47e afef 	bne.w	e15a <_svfprintf_r+0x8ca>
    f17c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    f17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f180:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f182:	1b1c      	subs	r4, r3, r4
    f184:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f188:	f7ff b936 	b.w	e3f8 <_svfprintf_r+0xb68>
    f18c:	2358      	movs	r3, #88	; 0x58
    f18e:	e78d      	b.n	f0ac <_svfprintf_r+0x181c>
    f190:	2200      	movs	r2, #0
    f192:	9203      	str	r2, [sp, #12]
    f194:	f7fe bbda 	b.w	d94c <_svfprintf_r+0xbc>
    f198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f19a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f19c:	189a      	adds	r2, r3, r2
    f19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1a0:	9205      	str	r2, [sp, #20]
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	f340 80ab 	ble.w	f2fe <_svfprintf_r+0x1a6e>
    f1a8:	2367      	movs	r3, #103	; 0x67
    f1aa:	930b      	str	r3, [sp, #44]	; 0x2c
    f1ac:	e7d5      	b.n	f15a <_svfprintf_r+0x18ca>
    f1ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f1b0:	320f      	adds	r2, #15
    f1b2:	b2d2      	uxtb	r2, r2
    f1b4:	2101      	movs	r1, #1
    f1b6:	e618      	b.n	edea <_svfprintf_r+0x155a>
    f1b8:	18a0      	adds	r0, r4, r2
    f1ba:	e5fb      	b.n	edb4 <_svfprintf_r+0x1524>
    f1bc:	2900      	cmp	r1, #0
    f1be:	f040 80a8 	bne.w	f312 <_svfprintf_r+0x1a82>
    f1c2:	2230      	movs	r2, #48	; 0x30
    f1c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f1c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f1cc:	3330      	adds	r3, #48	; 0x30
    f1ce:	f802 3b01 	strb.w	r3, [r2], #1
    f1d2:	ab1e      	add	r3, sp, #120	; 0x78
    f1d4:	1ad3      	subs	r3, r2, r3
    f1d6:	9314      	str	r3, [sp, #80]	; 0x50
    f1d8:	e649      	b.n	ee6e <_svfprintf_r+0x15de>
    f1da:	3301      	adds	r3, #1
    f1dc:	4912      	ldr	r1, [pc, #72]	; (f228 <_svfprintf_r+0x1998>)
    f1de:	f8ca 5004 	str.w	r5, [sl, #4]
    f1e2:	442a      	add	r2, r5
    f1e4:	2b07      	cmp	r3, #7
    f1e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f1ea:	f8ca 1000 	str.w	r1, [sl]
    f1ee:	f77f ac33 	ble.w	ea58 <_svfprintf_r+0x11c8>
    f1f2:	ee1b 1a10 	vmov	r1, s22
    f1f6:	aa24      	add	r2, sp, #144	; 0x90
    f1f8:	4658      	mov	r0, fp
    f1fa:	f003 f9d5 	bl	125a8 <__ssprint_r>
    f1fe:	2800      	cmp	r0, #0
    f200:	f47e afab 	bne.w	e15a <_svfprintf_r+0x8ca>
    f204:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f208:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f20c:	e426      	b.n	ea5c <_svfprintf_r+0x11cc>
    f20e:	1c59      	adds	r1, r3, #1
    f210:	4658      	mov	r0, fp
    f212:	f7fa fd03 	bl	9c1c <_malloc_r>
    f216:	4604      	mov	r4, r0
    f218:	b350      	cbz	r0, f270 <_svfprintf_r+0x19e0>
    f21a:	9007      	str	r0, [sp, #28]
    f21c:	e754      	b.n	f0c8 <_svfprintf_r+0x1838>
    f21e:	bf00      	nop
    f220:	20000c54 	.word	0x20000c54
    f224:	20000c40 	.word	0x20000c40
    f228:	20008488 	.word	0x20008488
    f22c:	66666667 	.word	0x66666667
    f230:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f234:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f238:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f23c:	4561      	cmp	r1, ip
    f23e:	4613      	mov	r3, r2
    f240:	d10a      	bne.n	f258 <_svfprintf_r+0x19c8>
    f242:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f246:	f803 ec01 	strb.w	lr, [r3, #-1]
    f24a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f24c:	1e59      	subs	r1, r3, #1
    f24e:	9122      	str	r1, [sp, #136]	; 0x88
    f250:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f254:	458c      	cmp	ip, r1
    f256:	d0f6      	beq.n	f246 <_svfprintf_r+0x19b6>
    f258:	2939      	cmp	r1, #57	; 0x39
    f25a:	bf16      	itet	ne
    f25c:	3101      	addne	r1, #1
    f25e:	7a81      	ldrbeq	r1, [r0, #10]
    f260:	b2c9      	uxtbne	r1, r1
    f262:	f803 1c01 	strb.w	r1, [r3, #-1]
    f266:	e6ae      	b.n	efc6 <_svfprintf_r+0x1736>
    f268:	2300      	movs	r3, #0
    f26a:	4690      	mov	r8, r2
    f26c:	9307      	str	r3, [sp, #28]
    f26e:	e760      	b.n	f132 <_svfprintf_r+0x18a2>
    f270:	ee1b 2a10 	vmov	r2, s22
    f274:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f27c:	8193      	strh	r3, [r2, #12]
    f27e:	f7fe bc16 	b.w	daae <_svfprintf_r+0x21e>
    f282:	07f5      	lsls	r5, r6, #31
    f284:	f57f adfe 	bpl.w	ee84 <_svfprintf_r+0x15f4>
    f288:	e5f8      	b.n	ee7c <_svfprintf_r+0x15ec>
    f28a:	9305      	str	r3, [sp, #20]
    f28c:	e6ce      	b.n	f02c <_svfprintf_r+0x179c>
    f28e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f296:	f43f ad8b 	beq.w	edb0 <_svfprintf_r+0x1520>
    f29a:	f1c2 0201 	rsb	r2, r2, #1
    f29e:	921b      	str	r2, [sp, #108]	; 0x6c
    f2a0:	e587      	b.n	edb2 <_svfprintf_r+0x1522>
    f2a2:	2367      	movs	r3, #103	; 0x67
    f2a4:	930b      	str	r3, [sp, #44]	; 0x2c
    f2a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f2a8:	780b      	ldrb	r3, [r1, #0]
    f2aa:	2bff      	cmp	r3, #255	; 0xff
    f2ac:	d079      	beq.n	f3a2 <_svfprintf_r+0x1b12>
    f2ae:	2500      	movs	r5, #0
    f2b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f2b2:	4628      	mov	r0, r5
    f2b4:	e003      	b.n	f2be <_svfprintf_r+0x1a2e>
    f2b6:	3001      	adds	r0, #1
    f2b8:	3101      	adds	r1, #1
    f2ba:	2bff      	cmp	r3, #255	; 0xff
    f2bc:	d008      	beq.n	f2d0 <_svfprintf_r+0x1a40>
    f2be:	4293      	cmp	r3, r2
    f2c0:	da06      	bge.n	f2d0 <_svfprintf_r+0x1a40>
    f2c2:	1ad2      	subs	r2, r2, r3
    f2c4:	784b      	ldrb	r3, [r1, #1]
    f2c6:	2b00      	cmp	r3, #0
    f2c8:	d1f5      	bne.n	f2b6 <_svfprintf_r+0x1a26>
    f2ca:	780b      	ldrb	r3, [r1, #0]
    f2cc:	3501      	adds	r5, #1
    f2ce:	e7f4      	b.n	f2ba <_svfprintf_r+0x1a2a>
    f2d0:	920c      	str	r2, [sp, #48]	; 0x30
    f2d2:	9113      	str	r1, [sp, #76]	; 0x4c
    f2d4:	900d      	str	r0, [sp, #52]	; 0x34
    f2d6:	950f      	str	r5, [sp, #60]	; 0x3c
    f2d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    f2de:	4413      	add	r3, r2
    f2e0:	9a05      	ldr	r2, [sp, #20]
    f2e2:	fb01 2303 	mla	r3, r1, r3, r2
    f2e6:	9305      	str	r3, [sp, #20]
    f2e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f2ec:	9302      	str	r3, [sp, #8]
    f2ee:	e5d5      	b.n	ee9c <_svfprintf_r+0x160c>
    f2f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2f2:	18d3      	adds	r3, r2, r3
    f2f4:	4419      	add	r1, r3
    f2f6:	2366      	movs	r3, #102	; 0x66
    f2f8:	9105      	str	r1, [sp, #20]
    f2fa:	930b      	str	r3, [sp, #44]	; 0x2c
    f2fc:	e72d      	b.n	f15a <_svfprintf_r+0x18ca>
    f2fe:	f1c3 0301 	rsb	r3, r3, #1
    f302:	441a      	add	r2, r3
    f304:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f308:	9302      	str	r3, [sp, #8]
    f30a:	2367      	movs	r3, #103	; 0x67
    f30c:	9205      	str	r2, [sp, #20]
    f30e:	930b      	str	r3, [sp, #44]	; 0x2c
    f310:	e698      	b.n	f044 <_svfprintf_r+0x17b4>
    f312:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f316:	e759      	b.n	f1cc <_svfprintf_r+0x193c>
    f318:	9b03      	ldr	r3, [sp, #12]
    f31a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f31e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f322:	9305      	str	r3, [sp, #20]
    f324:	e4b4      	b.n	ec90 <_svfprintf_r+0x1400>
    f326:	ee18 3a90 	vmov	r3, s17
    f32a:	2b00      	cmp	r3, #0
    f32c:	bfb4      	ite	lt
    f32e:	212d      	movlt	r1, #45	; 0x2d
    f330:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f334:	4c25      	ldr	r4, [pc, #148]	; (f3cc <_svfprintf_r+0x1b3c>)
    f336:	4b26      	ldr	r3, [pc, #152]	; (f3d0 <_svfprintf_r+0x1b40>)
    f338:	bfb8      	it	lt
    f33a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f33e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f342:	f7fe bc79 	b.w	dc38 <_svfprintf_r+0x3a8>
    f346:	9b03      	ldr	r3, [sp, #12]
    f348:	9302      	str	r3, [sp, #8]
    f34a:	9305      	str	r3, [sp, #20]
    f34c:	2373      	movs	r3, #115	; 0x73
    f34e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f352:	9003      	str	r0, [sp, #12]
    f354:	900f      	str	r0, [sp, #60]	; 0x3c
    f356:	900d      	str	r0, [sp, #52]	; 0x34
    f358:	930b      	str	r3, [sp, #44]	; 0x2c
    f35a:	f7fe bc7a 	b.w	dc52 <_svfprintf_r+0x3c2>
    f35e:	2302      	movs	r3, #2
    f360:	9314      	str	r3, [sp, #80]	; 0x50
    f362:	e584      	b.n	ee6e <_svfprintf_r+0x15de>
    f364:	9a03      	ldr	r2, [sp, #12]
    f366:	4313      	orrs	r3, r2
    f368:	d105      	bne.n	f376 <_svfprintf_r+0x1ae6>
    f36a:	2301      	movs	r3, #1
    f36c:	2266      	movs	r2, #102	; 0x66
    f36e:	9302      	str	r3, [sp, #8]
    f370:	920b      	str	r2, [sp, #44]	; 0x2c
    f372:	9305      	str	r3, [sp, #20]
    f374:	e666      	b.n	f044 <_svfprintf_r+0x17b4>
    f376:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f378:	3301      	adds	r3, #1
    f37a:	441a      	add	r2, r3
    f37c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f380:	9302      	str	r3, [sp, #8]
    f382:	2366      	movs	r3, #102	; 0x66
    f384:	9205      	str	r2, [sp, #20]
    f386:	930b      	str	r3, [sp, #44]	; 0x2c
    f388:	e65c      	b.n	f044 <_svfprintf_r+0x17b4>
    f38a:	9a08      	ldr	r2, [sp, #32]
    f38c:	f899 3001 	ldrb.w	r3, [r9, #1]
    f390:	4689      	mov	r9, r1
    f392:	f852 1b04 	ldr.w	r1, [r2], #4
    f396:	9208      	str	r2, [sp, #32]
    f398:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f39c:	9103      	str	r1, [sp, #12]
    f39e:	f7fe bad3 	b.w	d948 <_svfprintf_r+0xb8>
    f3a2:	2300      	movs	r3, #0
    f3a4:	930f      	str	r3, [sp, #60]	; 0x3c
    f3a6:	930d      	str	r3, [sp, #52]	; 0x34
    f3a8:	e796      	b.n	f2d8 <_svfprintf_r+0x1a48>
    f3aa:	230c      	movs	r3, #12
    f3ac:	f8cb 3000 	str.w	r3, [fp]
    f3b0:	f04f 33ff 	mov.w	r3, #4294967295
    f3b4:	9304      	str	r3, [sp, #16]
    f3b6:	f7fe bb81 	b.w	dabc <_svfprintf_r+0x22c>
    f3ba:	ee1b 2a10 	vmov	r2, s22
    f3be:	8993      	ldrh	r3, [r2, #12]
    f3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f3c4:	8193      	strh	r3, [r2, #12]
    f3c6:	f7fe bec8 	b.w	e15a <_svfprintf_r+0x8ca>
    f3ca:	bf00      	nop
    f3cc:	20000c3c 	.word	0x20000c3c
    f3d0:	20000594 	.word	0x20000594

0000f3d4 <__ssvfscanf_r>:
    f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3d8:	ed2d 8b02 	vpush	{d8}
    f3dc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    f3e0:	468b      	mov	fp, r1
    f3e2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    f3e6:	af02      	add	r7, sp, #8
    f3e8:	048c      	lsls	r4, r1, #18
    f3ea:	4681      	mov	r9, r0
    f3ec:	64fa      	str	r2, [r7, #76]	; 0x4c
    f3ee:	633b      	str	r3, [r7, #48]	; 0x30
    f3f0:	d409      	bmi.n	f406 <__ssvfscanf_r+0x32>
    f3f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    f3f6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f3fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f3fe:	f8ab 100c 	strh.w	r1, [fp, #12]
    f402:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    f406:	2300      	movs	r3, #0
    f408:	461c      	mov	r4, r3
    f40a:	2208      	movs	r2, #8
    f40c:	4619      	mov	r1, r3
    f40e:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f412:	62fb      	str	r3, [r7, #44]	; 0x2c
    f414:	46a2      	mov	sl, r4
    f416:	f7fc fb29 	bl	ba6c <memset>
    f41a:	643c      	str	r4, [r7, #64]	; 0x40
    f41c:	627c      	str	r4, [r7, #36]	; 0x24
    f41e:	63bc      	str	r4, [r7, #56]	; 0x38
    f420:	647c      	str	r4, [r7, #68]	; 0x44
    f422:	4b83      	ldr	r3, [pc, #524]	; (f630 <__ssvfscanf_r+0x25c>)
    f424:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f428:	f7fc fbea 	bl	bc00 <__locale_mb_cur_max>
    f42c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    f430:	4603      	mov	r3, r0
    f432:	9200      	str	r2, [sp, #0]
    f434:	f107 0154 	add.w	r1, r7, #84	; 0x54
    f438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    f43a:	4648      	mov	r0, r9
    f43c:	47a0      	blx	r4
    f43e:	1e05      	subs	r5, r0, #0
    f440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f442:	db33      	blt.n	f4ac <__ssvfscanf_r+0xd8>
    f444:	442b      	add	r3, r5
    f446:	64fb      	str	r3, [r7, #76]	; 0x4c
    f448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f44a:	462e      	mov	r6, r5
    f44c:	2b00      	cmp	r3, #0
    f44e:	f000 80b6 	beq.w	f5be <__ssvfscanf_r+0x1ea>
    f452:	2d01      	cmp	r5, #1
    f454:	d038      	beq.n	f4c8 <__ssvfscanf_r+0xf4>
    f456:	2b25      	cmp	r3, #37	; 0x25
    f458:	d040      	beq.n	f4dc <__ssvfscanf_r+0x108>
    f45a:	2d00      	cmp	r5, #0
    f45c:	d0e1      	beq.n	f422 <__ssvfscanf_r+0x4e>
    f45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f460:	1b9e      	subs	r6, r3, r6
    f462:	f8db 3004 	ldr.w	r3, [fp, #4]
    f466:	1e74      	subs	r4, r6, #1
    f468:	2b00      	cmp	r3, #0
    f46a:	f340 8098 	ble.w	f59e <__ssvfscanf_r+0x1ca>
    f46e:	f8db 1000 	ldr.w	r1, [fp]
    f472:	f894 c001 	ldrb.w	ip, [r4, #1]
    f476:	f891 e000 	ldrb.w	lr, [r1]
    f47a:	1ca3      	adds	r3, r4, #2
    f47c:	eb0a 0003 	add.w	r0, sl, r3
    f480:	45e6      	cmp	lr, ip
    f482:	f101 0101 	add.w	r1, r1, #1
    f486:	eba3 0206 	sub.w	r2, r3, r6
    f48a:	f104 0401 	add.w	r4, r4, #1
    f48e:	eba0 0006 	sub.w	r0, r0, r6
    f492:	f040 8094 	bne.w	f5be <__ssvfscanf_r+0x1ea>
    f496:	f8db 3004 	ldr.w	r3, [fp, #4]
    f49a:	f8cb 1000 	str.w	r1, [fp]
    f49e:	3b01      	subs	r3, #1
    f4a0:	42aa      	cmp	r2, r5
    f4a2:	f8cb 3004 	str.w	r3, [fp, #4]
    f4a6:	dbdf      	blt.n	f468 <__ssvfscanf_r+0x94>
    f4a8:	4682      	mov	sl, r0
    f4aa:	e7ba      	b.n	f422 <__ssvfscanf_r+0x4e>
    f4ac:	3301      	adds	r3, #1
    f4ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    f4b0:	2208      	movs	r2, #8
    f4b2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f4b6:	2100      	movs	r1, #0
    f4b8:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f4bc:	657b      	str	r3, [r7, #84]	; 0x54
    f4be:	f7fc fad5 	bl	ba6c <memset>
    f4c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d07a      	beq.n	f5be <__ssvfscanf_r+0x1ea>
    f4c8:	4e5a      	ldr	r6, [pc, #360]	; (f634 <__ssvfscanf_r+0x260>)
    f4ca:	5cf2      	ldrb	r2, [r6, r3]
    f4cc:	0710      	lsls	r0, r2, #28
    f4ce:	f100 851c 	bmi.w	ff0a <__ssvfscanf_r+0xb36>
    f4d2:	2b25      	cmp	r3, #37	; 0x25
    f4d4:	f040 8086 	bne.w	f5e4 <__ssvfscanf_r+0x210>
    f4d8:	2501      	movs	r5, #1
    f4da:	462e      	mov	r6, r5
    f4dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f4de:	2400      	movs	r4, #0
    f4e0:	7802      	ldrb	r2, [r0, #0]
    f4e2:	46a0      	mov	r8, r4
    f4e4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    f4e8:	1c41      	adds	r1, r0, #1
    f4ea:	2b55      	cmp	r3, #85	; 0x55
    f4ec:	d867      	bhi.n	f5be <__ssvfscanf_r+0x1ea>
    f4ee:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4f2:	070a      	.short	0x070a
    f4f4:	00660066 	.word	0x00660066
    f4f8:	00660066 	.word	0x00660066
    f4fc:	00660701 	.word	0x00660701
    f500:	00660066 	.word	0x00660066
    f504:	00660066 	.word	0x00660066
    f508:	060c060c 	.word	0x060c060c
    f50c:	060c060c 	.word	0x060c060c
    f510:	060c060c 	.word	0x060c060c
    f514:	060c060c 	.word	0x060c060c
    f518:	060c060c 	.word	0x060c060c
    f51c:	00660066 	.word	0x00660066
    f520:	00660066 	.word	0x00660066
    f524:	00660066 	.word	0x00660066
    f528:	06180066 	.word	0x06180066
    f52c:	048e0066 	.word	0x048e0066
    f530:	061804c9 	.word	0x061804c9
    f534:	06180618 	.word	0x06180618
    f538:	00660066 	.word	0x00660066
    f53c:	00660066 	.word	0x00660066
    f540:	00660082 	.word	0x00660082
    f544:	04bf0066 	.word	0x04bf0066
    f548:	00660066 	.word	0x00660066
    f54c:	00890066 	.word	0x00890066
    f550:	00660066 	.word	0x00660066
    f554:	00660066 	.word	0x00660066
    f558:	0066066b 	.word	0x0066066b
    f55c:	06dd0066 	.word	0x06dd0066
    f560:	00660066 	.word	0x00660066
    f564:	00660066 	.word	0x00660066
    f568:	06180066 	.word	0x06180066
    f56c:	04900066 	.word	0x04900066
    f570:	061804cb 	.word	0x061804cb
    f574:	06180618 	.word	0x06180618
    f578:	06d206be 	.word	0x06d206be
    f57c:	00660082 	.word	0x00660082
    f580:	06f306e7 	.word	0x06f306e7
    f584:	04c106ac 	.word	0x04c106ac
    f588:	006606da 	.word	0x006606da
    f58c:	008b0066 	.word	0x008b0066
    f590:	06ca007d 	.word	0x06ca007d
    f594:	00660066 	.word	0x00660066
    f598:	0066066b 	.word	0x0066066b
    f59c:	007d      	.short	0x007d
    f59e:	4659      	mov	r1, fp
    f5a0:	4648      	mov	r0, r9
    f5a2:	f003 f8c1 	bl	12728 <__ssrefill_r>
    f5a6:	2800      	cmp	r0, #0
    f5a8:	f43f af61 	beq.w	f46e <__ssvfscanf_r+0x9a>
    f5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f5ae:	2b00      	cmp	r3, #0
    f5b0:	f001 8052 	beq.w	10658 <__ssvfscanf_r+0x1284>
    f5b4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f5b8:	065a      	lsls	r2, r3, #25
    f5ba:	f101 804d 	bmi.w	10658 <__ssvfscanf_r+0x1284>
    f5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f5c0:	b143      	cbz	r3, f5d4 <__ssvfscanf_r+0x200>
    f5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f5c4:	f8d3 8000 	ldr.w	r8, [r3]
    f5c8:	f1b8 0f00 	cmp.w	r8, #0
    f5cc:	d002      	beq.n	f5d4 <__ssvfscanf_r+0x200>
    f5ce:	4640      	mov	r0, r8
    f5d0:	f7fa fb1c 	bl	9c0c <free>
    f5d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f5d6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    f5da:	46bd      	mov	sp, r7
    f5dc:	ecbd 8b02 	vpop	{d8}
    f5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f5e6:	2501      	movs	r5, #1
    f5e8:	1e5e      	subs	r6, r3, #1
    f5ea:	e73a      	b.n	f462 <__ssvfscanf_r+0x8e>
    f5ec:	0723      	lsls	r3, r4, #28
    f5ee:	d1e6      	bne.n	f5be <__ssvfscanf_r+0x1ea>
    f5f0:	7842      	ldrb	r2, [r0, #1]
    f5f2:	4608      	mov	r0, r1
    f5f4:	e776      	b.n	f4e4 <__ssvfscanf_r+0x110>
    f5f6:	0722      	lsls	r2, r4, #28
    f5f8:	d1e1      	bne.n	f5be <__ssvfscanf_r+0x1ea>
    f5fa:	7842      	ldrb	r2, [r0, #1]
    f5fc:	f044 0402 	orr.w	r4, r4, #2
    f600:	4608      	mov	r0, r1
    f602:	e76f      	b.n	f4e4 <__ssvfscanf_r+0x110>
    f604:	f044 0401 	orr.w	r4, r4, #1
    f608:	64f9      	str	r1, [r7, #76]	; 0x4c
    f60a:	2502      	movs	r5, #2
    f60c:	f8db 3004 	ldr.w	r3, [fp, #4]
    f610:	2b00      	cmp	r3, #0
    f612:	f340 8408 	ble.w	fe26 <__ssvfscanf_r+0xa52>
    f616:	0660      	lsls	r0, r4, #25
    f618:	f140 840f 	bpl.w	fe3a <__ssvfscanf_r+0xa66>
    f61c:	1e6b      	subs	r3, r5, #1
    f61e:	2b03      	cmp	r3, #3
    f620:	f201 80eb 	bhi.w	107fa <__ssvfscanf_r+0x1426>
    f624:	e8df f013 	tbh	[pc, r3, lsl #1]
    f628:	01f1027b 	.word	0x01f1027b
    f62c:	0008014b 	.word	0x0008014b
    f630:	200085f4 	.word	0x200085f4
    f634:	20000aa5 	.word	0x20000aa5
    f638:	4648      	mov	r0, r9
    f63a:	f001 fc8f 	bl	10f5c <_localeconv_r>
    f63e:	6803      	ldr	r3, [r0, #0]
    f640:	623b      	str	r3, [r7, #32]
    f642:	f108 33ff 	add.w	r3, r8, #4294967295
    f646:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f64a:	f240 855a 	bls.w	10102 <__ssvfscanf_r+0xd2e>
    f64e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    f652:	eb08 0305 	add.w	r3, r8, r5
    f656:	613b      	str	r3, [r7, #16]
    f658:	f240 185d 	movw	r8, #349	; 0x15d
    f65c:	2600      	movs	r6, #0
    f65e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f662:	ee08 9a10 	vmov	s16, r9
    f666:	e9c7 6605 	strd	r6, r6, [r7, #20]
    f66a:	63fe      	str	r6, [r7, #60]	; 0x3c
    f66c:	637e      	str	r6, [r7, #52]	; 0x34
    f66e:	61fe      	str	r6, [r7, #28]
    f670:	64be      	str	r6, [r7, #72]	; 0x48
    f672:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    f676:	62bb      	str	r3, [r7, #40]	; 0x28
    f678:	461d      	mov	r5, r3
    f67a:	4646      	mov	r6, r8
    f67c:	f8db 1000 	ldr.w	r1, [fp]
    f680:	780a      	ldrb	r2, [r1, #0]
    f682:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    f686:	2b4e      	cmp	r3, #78	; 0x4e
    f688:	d850      	bhi.n	f72c <__ssvfscanf_r+0x358>
    f68a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f68e:	037e      	.short	0x037e
    f690:	037e004f 	.word	0x037e004f
    f694:	004f004f 	.word	0x004f004f
    f698:	00a600a3 	.word	0x00a600a3
    f69c:	00a600a6 	.word	0x00a600a6
    f6a0:	00a600a6 	.word	0x00a600a6
    f6a4:	00a600a6 	.word	0x00a600a6
    f6a8:	00a600a6 	.word	0x00a600a6
    f6ac:	004f004f 	.word	0x004f004f
    f6b0:	004f004f 	.word	0x004f004f
    f6b4:	004f004f 	.word	0x004f004f
    f6b8:	0374004f 	.word	0x0374004f
    f6bc:	030b030b 	.word	0x030b030b
    f6c0:	039e030b 	.word	0x039e030b
    f6c4:	004f0394 	.word	0x004f0394
    f6c8:	0384004f 	.word	0x0384004f
    f6cc:	004f004f 	.word	0x004f004f
    f6d0:	004f004f 	.word	0x004f004f
    f6d4:	004f035d 	.word	0x004f035d
    f6d8:	004f033a 	.word	0x004f033a
    f6dc:	004f004f 	.word	0x004f004f
    f6e0:	004f0333 	.word	0x004f0333
    f6e4:	004f004f 	.word	0x004f004f
    f6e8:	036d031e 	.word	0x036d031e
    f6ec:	004f004f 	.word	0x004f004f
    f6f0:	004f004f 	.word	0x004f004f
    f6f4:	004f004f 	.word	0x004f004f
    f6f8:	0374004f 	.word	0x0374004f
    f6fc:	030b030b 	.word	0x030b030b
    f700:	039e030b 	.word	0x039e030b
    f704:	004f0394 	.word	0x004f0394
    f708:	0384004f 	.word	0x0384004f
    f70c:	004f004f 	.word	0x004f004f
    f710:	004f004f 	.word	0x004f004f
    f714:	004f035d 	.word	0x004f035d
    f718:	004f033a 	.word	0x004f033a
    f71c:	004f004f 	.word	0x004f004f
    f720:	004f0333 	.word	0x004f0333
    f724:	004f004f 	.word	0x004f004f
    f728:	036d031e 	.word	0x036d031e
    f72c:	05a0      	lsls	r0, r4, #22
    f72e:	d56f      	bpl.n	f810 <__ssvfscanf_r+0x43c>
    f730:	6a38      	ldr	r0, [r7, #32]
    f732:	7803      	ldrb	r3, [r0, #0]
    f734:	4293      	cmp	r3, r2
    f736:	d16b      	bne.n	f810 <__ssvfscanf_r+0x43c>
    f738:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f73c:	607e      	str	r6, [r7, #4]
    f73e:	4681      	mov	r9, r0
    f740:	ee18 6a10 	vmov	r6, s16
    f744:	f04f 0800 	mov.w	r8, #0
    f748:	465c      	mov	r4, fp
    f74a:	e007      	b.n	f75c <__ssvfscanf_r+0x388>
    f74c:	6021      	str	r1, [r4, #0]
    f74e:	f891 e000 	ldrb.w	lr, [r1]
    f752:	f899 0000 	ldrb.w	r0, [r9]
    f756:	4586      	cmp	lr, r0
    f758:	d11c      	bne.n	f794 <__ssvfscanf_r+0x3c0>
    f75a:	46da      	mov	sl, fp
    f75c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f760:	4645      	mov	r5, r8
    f762:	f10a 0b01 	add.w	fp, sl, #1
    f766:	3101      	adds	r1, #1
    f768:	f108 0801 	add.w	r8, r8, #1
    f76c:	2800      	cmp	r0, #0
    f76e:	f000 8664 	beq.w	1043a <__ssvfscanf_r+0x1066>
    f772:	6860      	ldr	r0, [r4, #4]
    f774:	3801      	subs	r0, #1
    f776:	2800      	cmp	r0, #0
    f778:	6060      	str	r0, [r4, #4]
    f77a:	dce7      	bgt.n	f74c <__ssvfscanf_r+0x378>
    f77c:	4621      	mov	r1, r4
    f77e:	4630      	mov	r0, r6
    f780:	f002 ffd2 	bl	12728 <__ssrefill_r>
    f784:	b930      	cbnz	r0, f794 <__ssvfscanf_r+0x3c0>
    f786:	6821      	ldr	r1, [r4, #0]
    f788:	f899 0000 	ldrb.w	r0, [r9]
    f78c:	f891 e000 	ldrb.w	lr, [r1]
    f790:	4586      	cmp	lr, r0
    f792:	d0e2      	beq.n	f75a <__ssvfscanf_r+0x386>
    f794:	46a3      	mov	fp, r4
    f796:	6a3a      	ldr	r2, [r7, #32]
    f798:	68bc      	ldr	r4, [r7, #8]
    f79a:	613d      	str	r5, [r7, #16]
    f79c:	462b      	mov	r3, r5
    f79e:	46b1      	mov	r9, r6
    f7a0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f7a2:	68fd      	ldr	r5, [r7, #12]
    f7a4:	64bd      	str	r5, [r7, #72]	; 0x48
    f7a6:	3301      	adds	r3, #1
    f7a8:	465d      	mov	r5, fp
    f7aa:	eb02 0803 	add.w	r8, r2, r3
    f7ae:	46b3      	mov	fp, r6
    f7b0:	4626      	mov	r6, r4
    f7b2:	4614      	mov	r4, r2
    f7b4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f7b8:	462a      	mov	r2, r5
    f7ba:	4648      	mov	r0, r9
    f7bc:	f002 ff74 	bl	126a8 <_sungetc_r>
    f7c0:	4544      	cmp	r4, r8
    f7c2:	d1f7      	bne.n	f7b4 <__ssvfscanf_r+0x3e0>
    f7c4:	693b      	ldr	r3, [r7, #16]
    f7c6:	4634      	mov	r4, r6
    f7c8:	ebaa 0a03 	sub.w	sl, sl, r3
    f7cc:	465e      	mov	r6, fp
    f7ce:	46ab      	mov	fp, r5
    f7d0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f7d2:	e020      	b.n	f816 <__ssvfscanf_r+0x442>
    f7d4:	05e0      	lsls	r0, r4, #23
    f7d6:	f100 8501 	bmi.w	101dc <__ssvfscanf_r+0xe08>
    f7da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f7dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f7de:	42d9      	cmn	r1, r3
    f7e0:	d116      	bne.n	f810 <__ssvfscanf_r+0x43c>
    f7e2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f7e6:	f805 2b01 	strb.w	r2, [r5], #1
    f7ea:	3e01      	subs	r6, #1
    f7ec:	f8db 3004 	ldr.w	r3, [fp, #4]
    f7f0:	3b01      	subs	r3, #1
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	f10a 0a01 	add.w	sl, sl, #1
    f7f8:	f8cb 3004 	str.w	r3, [fp, #4]
    f7fc:	f340 836f 	ble.w	fede <__ssvfscanf_r+0xb0a>
    f800:	f8db 3000 	ldr.w	r3, [fp]
    f804:	3301      	adds	r3, #1
    f806:	f8cb 3000 	str.w	r3, [fp]
    f80a:	2e00      	cmp	r6, #0
    f80c:	f47f af36 	bne.w	f67c <__ssvfscanf_r+0x2a8>
    f810:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f812:	ee18 9a10 	vmov	r9, s16
    f816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f818:	2b00      	cmp	r3, #0
    f81a:	f040 82dc 	bne.w	fdd6 <__ssvfscanf_r+0xa02>
    f81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f820:	3b01      	subs	r3, #1
    f822:	2b01      	cmp	r3, #1
    f824:	f241 8016 	bls.w	10854 <__ssvfscanf_r+0x1480>
    f828:	1e73      	subs	r3, r6, #1
    f82a:	2b06      	cmp	r3, #6
    f82c:	f240 8627 	bls.w	1047e <__ssvfscanf_r+0x10aa>
    f830:	05e3      	lsls	r3, r4, #23
    f832:	d51b      	bpl.n	f86c <__ssvfscanf_r+0x498>
    f834:	0566      	lsls	r6, r4, #21
    f836:	f101 80b5 	bmi.w	109a4 <__ssvfscanf_r+0x15d0>
    f83a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f83e:	2965      	cmp	r1, #101	; 0x65
    f840:	f105 33ff 	add.w	r3, r5, #4294967295
    f844:	f10a 36ff 	add.w	r6, sl, #4294967295
    f848:	d00a      	beq.n	f860 <__ssvfscanf_r+0x48c>
    f84a:	2945      	cmp	r1, #69	; 0x45
    f84c:	d008      	beq.n	f860 <__ssvfscanf_r+0x48c>
    f84e:	465a      	mov	r2, fp
    f850:	4648      	mov	r0, r9
    f852:	f002 ff29 	bl	126a8 <_sungetc_r>
    f856:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f85a:	f1aa 0602 	sub.w	r6, sl, #2
    f85e:	1eab      	subs	r3, r5, #2
    f860:	465a      	mov	r2, fp
    f862:	4648      	mov	r0, r9
    f864:	46b2      	mov	sl, r6
    f866:	461d      	mov	r5, r3
    f868:	f002 ff1e 	bl	126a8 <_sungetc_r>
    f86c:	f014 0210 	ands.w	r2, r4, #16
    f870:	f47f add7 	bne.w	f422 <__ssvfscanf_r+0x4e>
    f874:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f87c:	702a      	strb	r2, [r5, #0]
    f87e:	f000 84d2 	beq.w	10226 <__ssvfscanf_r+0xe52>
    f882:	69bb      	ldr	r3, [r7, #24]
    f884:	2b00      	cmp	r3, #0
    f886:	f040 872c 	bne.w	106e2 <__ssvfscanf_r+0x130e>
    f88a:	4648      	mov	r0, r9
    f88c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f88e:	2200      	movs	r2, #0
    f890:	f7fb fdb2 	bl	b3f8 <_strtod_r>
    f894:	07e0      	lsls	r0, r4, #31
    f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f898:	f100 85c9 	bmi.w	1042e <__ssvfscanf_r+0x105a>
    f89c:	07a1      	lsls	r1, r4, #30
    f89e:	f100 85c6 	bmi.w	1042e <__ssvfscanf_r+0x105a>
    f8a2:	eeb4 0b40 	vcmp.f64	d0, d0
    f8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8aa:	f853 4b04 	ldr.w	r4, [r3], #4
    f8ae:	f180 86f4 	bvs.w	1069a <__ssvfscanf_r+0x12c6>
    f8b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f8b6:	633b      	str	r3, [r7, #48]	; 0x30
    f8b8:	ed84 0a00 	vstr	s0, [r4]
    f8bc:	e3a2      	b.n	10004 <__ssvfscanf_r+0xc30>
    f8be:	f108 33ff 	add.w	r3, r8, #4294967295
    f8c2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f8c6:	f240 83a2 	bls.w	1000e <__ssvfscanf_r+0xc3a>
    f8ca:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f8ce:	eb08 0302 	add.w	r3, r8, r2
    f8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    f8d4:	f240 185d 	movw	r8, #349	; 0x15d
    f8d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f8dc:	2200      	movs	r2, #0
    f8de:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f8e0:	62bb      	str	r3, [r7, #40]	; 0x28
    f8e2:	4659      	mov	r1, fp
    f8e4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f8e8:	46d3      	mov	fp, sl
    f8ea:	461d      	mov	r5, r3
    f8ec:	4692      	mov	sl, r2
    f8ee:	680a      	ldr	r2, [r1, #0]
    f8f0:	7810      	ldrb	r0, [r2, #0]
    f8f2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f8f6:	2b4d      	cmp	r3, #77	; 0x4d
    f8f8:	d860      	bhi.n	f9bc <__ssvfscanf_r+0x5e8>
    f8fa:	e8df f013 	tbh	[pc, r3, lsl #1]
    f8fe:	0282      	.short	0x0282
    f900:	0282005f 	.word	0x0282005f
    f904:	005f005f 	.word	0x005f005f
    f908:	01e002cd 	.word	0x01e002cd
    f90c:	01e001e0 	.word	0x01e001e0
    f910:	01e001e0 	.word	0x01e001e0
    f914:	01e001e0 	.word	0x01e001e0
    f918:	026f026f 	.word	0x026f026f
    f91c:	005f005f 	.word	0x005f005f
    f920:	005f005f 	.word	0x005f005f
    f924:	005f005f 	.word	0x005f005f
    f928:	004e005f 	.word	0x004e005f
    f92c:	004e004e 	.word	0x004e004e
    f930:	004e004e 	.word	0x004e004e
    f934:	005f004e 	.word	0x005f004e
    f938:	005f005f 	.word	0x005f005f
    f93c:	005f005f 	.word	0x005f005f
    f940:	005f005f 	.word	0x005f005f
    f944:	005f005f 	.word	0x005f005f
    f948:	005f005f 	.word	0x005f005f
    f94c:	005f005f 	.word	0x005f005f
    f950:	005f005f 	.word	0x005f005f
    f954:	005f005f 	.word	0x005f005f
    f958:	005f0276 	.word	0x005f0276
    f95c:	005f005f 	.word	0x005f005f
    f960:	005f005f 	.word	0x005f005f
    f964:	005f005f 	.word	0x005f005f
    f968:	004e005f 	.word	0x004e005f
    f96c:	004e004e 	.word	0x004e004e
    f970:	004e004e 	.word	0x004e004e
    f974:	005f004e 	.word	0x005f004e
    f978:	005f005f 	.word	0x005f005f
    f97c:	005f005f 	.word	0x005f005f
    f980:	005f005f 	.word	0x005f005f
    f984:	005f005f 	.word	0x005f005f
    f988:	005f005f 	.word	0x005f005f
    f98c:	005f005f 	.word	0x005f005f
    f990:	005f005f 	.word	0x005f005f
    f994:	005f005f 	.word	0x005f005f
    f998:	0276      	.short	0x0276
    f99a:	2e0a      	cmp	r6, #10
    f99c:	dd0e      	ble.n	f9bc <__ssvfscanf_r+0x5e8>
    f99e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f9a2:	684b      	ldr	r3, [r1, #4]
    f9a4:	f805 0b01 	strb.w	r0, [r5], #1
    f9a8:	3b01      	subs	r3, #1
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	604b      	str	r3, [r1, #4]
    f9ae:	f340 828d 	ble.w	fecc <__ssvfscanf_r+0xaf8>
    f9b2:	3201      	adds	r2, #1
    f9b4:	600a      	str	r2, [r1, #0]
    f9b6:	f1b8 0801 	subs.w	r8, r8, #1
    f9ba:	d198      	bne.n	f8ee <__ssvfscanf_r+0x51a>
    f9bc:	05e0      	lsls	r0, r4, #23
    f9be:	46d0      	mov	r8, sl
    f9c0:	63be      	str	r6, [r7, #56]	; 0x38
    f9c2:	46da      	mov	sl, fp
    f9c4:	468b      	mov	fp, r1
    f9c6:	d507      	bpl.n	f9d8 <__ssvfscanf_r+0x604>
    f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9ca:	429d      	cmp	r5, r3
    f9cc:	f200 8422 	bhi.w	10214 <__ssvfscanf_r+0xe40>
    f9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9d2:	429d      	cmp	r5, r3
    f9d4:	f43f adf3 	beq.w	f5be <__ssvfscanf_r+0x1ea>
    f9d8:	f014 0210 	ands.w	r2, r4, #16
    f9dc:	d110      	bne.n	fa00 <__ssvfscanf_r+0x62c>
    f9de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f9e2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    f9e4:	702a      	strb	r2, [r5, #0]
    f9e6:	4648      	mov	r0, r9
    f9e8:	47b0      	blx	r6
    f9ea:	06a1      	lsls	r1, r4, #26
    f9ec:	f140 8408 	bpl.w	10200 <__ssvfscanf_r+0xe2c>
    f9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f9f2:	f853 2b04 	ldr.w	r2, [r3], #4
    f9f6:	6010      	str	r0, [r2, #0]
    f9f8:	633b      	str	r3, [r7, #48]	; 0x30
    f9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f9fc:	3301      	adds	r3, #1
    f9fe:	647b      	str	r3, [r7, #68]	; 0x44
    fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa02:	1aed      	subs	r5, r5, r3
    fa04:	4445      	add	r5, r8
    fa06:	44aa      	add	sl, r5
    fa08:	e50b      	b.n	f422 <__ssvfscanf_r+0x4e>
    fa0a:	f1b8 0f00 	cmp.w	r8, #0
    fa0e:	bf08      	it	eq
    fa10:	f04f 38ff 	moveq.w	r8, #4294967295
    fa14:	07e0      	lsls	r0, r4, #31
    fa16:	f140 8295 	bpl.w	ff44 <__ssvfscanf_r+0xb70>
    fa1a:	f014 0310 	ands.w	r3, r4, #16
    fa1e:	637b      	str	r3, [r7, #52]	; 0x34
    fa20:	f040 8474 	bne.w	1030c <__ssvfscanf_r+0xf38>
    fa24:	0621      	lsls	r1, r4, #24
    fa26:	f140 8666 	bpl.w	106f6 <__ssvfscanf_r+0x1322>
    fa2a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fa2c:	f854 3b04 	ldr.w	r3, [r4], #4
    fa30:	63fb      	str	r3, [r7, #60]	; 0x3c
    fa32:	2b00      	cmp	r3, #0
    fa34:	f43f adc3 	beq.w	f5be <__ssvfscanf_r+0x1ea>
    fa38:	2080      	movs	r0, #128	; 0x80
    fa3a:	f7fa f8df 	bl	9bfc <malloc>
    fa3e:	64b8      	str	r0, [r7, #72]	; 0x48
    fa40:	2800      	cmp	r0, #0
    fa42:	f000 8778 	beq.w	10936 <__ssvfscanf_r+0x1562>
    fa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa48:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fa4a:	601a      	str	r2, [r3, #0]
    fa4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fa4e:	88d5      	ldrh	r5, [r2, #6]
    fa50:	8893      	ldrh	r3, [r2, #4]
    fa52:	429d      	cmp	r5, r3
    fa54:	f080 8552 	bcs.w	104fc <__ssvfscanf_r+0x1128>
    fa58:	6810      	ldr	r0, [r2, #0]
    fa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa5c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    fa60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fa62:	633c      	str	r4, [r7, #48]	; 0x30
    fa64:	3501      	adds	r5, #1
    fa66:	80dd      	strh	r5, [r3, #6]
    fa68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa6a:	62bb      	str	r3, [r7, #40]	; 0x28
    fa6c:	2320      	movs	r3, #32
    fa6e:	623b      	str	r3, [r7, #32]
    fa70:	f8db 3000 	ldr.w	r3, [fp]
    fa74:	4eb1      	ldr	r6, [pc, #708]	; (fd3c <__ssvfscanf_r+0x968>)
    fa76:	781b      	ldrb	r3, [r3, #0]
    fa78:	5cf3      	ldrb	r3, [r6, r3]
    fa7a:	f013 0308 	ands.w	r3, r3, #8
    fa7e:	f040 84bb 	bne.w	103f8 <__ssvfscanf_r+0x1024>
    fa82:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    fa84:	627e      	str	r6, [r7, #36]	; 0x24
    fa86:	461d      	mov	r5, r3
    fa88:	f7fc f8ba 	bl	bc00 <__locale_mb_cur_max>
    fa8c:	42a8      	cmp	r0, r5
    fa8e:	f43f ad8d 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
    fa92:	e9db 3200 	ldrd	r3, r2, [fp]
    fa96:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fa9a:	f813 1b01 	ldrb.w	r1, [r3], #1
    fa9e:	5541      	strb	r1, [r0, r5]
    faa0:	3a01      	subs	r2, #1
    faa2:	2c03      	cmp	r4, #3
    faa4:	e9cb 3200 	strd	r3, r2, [fp]
    faa8:	f105 0501 	add.w	r5, r5, #1
    faac:	f107 0668 	add.w	r6, r7, #104	; 0x68
    fab0:	d102      	bne.n	fab8 <__ssvfscanf_r+0x6e4>
    fab2:	6833      	ldr	r3, [r6, #0]
    fab4:	2b04      	cmp	r3, #4
    fab6:	d004      	beq.n	fac2 <__ssvfscanf_r+0x6ee>
    fab8:	2208      	movs	r2, #8
    faba:	2100      	movs	r1, #0
    fabc:	4630      	mov	r0, r6
    fabe:	f7fb ffd5 	bl	ba6c <memset>
    fac2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fac6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fac8:	9600      	str	r6, [sp, #0]
    faca:	462b      	mov	r3, r5
    facc:	4648      	mov	r0, r9
    face:	f002 fc17 	bl	12300 <_mbrtowc_r>
    fad2:	1c42      	adds	r2, r0, #1
    fad4:	4604      	mov	r4, r0
    fad6:	f43f ad69 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
    fada:	2800      	cmp	r0, #0
    fadc:	f040 8478 	bne.w	103d0 <__ssvfscanf_r+0xffc>
    fae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fae2:	6018      	str	r0, [r3, #0]
    fae4:	f002 fc68 	bl	123b8 <iswspace>
    fae8:	2800      	cmp	r0, #0
    faea:	f040 865c 	bne.w	107a6 <__ssvfscanf_r+0x13d2>
    faee:	44aa      	add	sl, r5
    faf0:	f108 38ff 	add.w	r8, r8, #4294967295
    faf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    faf6:	2b00      	cmp	r3, #0
    faf8:	f040 8633 	bne.w	10762 <__ssvfscanf_r+0x138e>
    fafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fafe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fb00:	3304      	adds	r3, #4
    fb02:	64bb      	str	r3, [r7, #72]	; 0x48
    fb04:	2a00      	cmp	r2, #0
    fb06:	f000 862c 	beq.w	10762 <__ssvfscanf_r+0x138e>
    fb0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fb0c:	1a9d      	subs	r5, r3, r2
    fb0e:	6a3b      	ldr	r3, [r7, #32]
    fb10:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    fb14:	f240 8756 	bls.w	109c4 <__ssvfscanf_r+0x15f0>
    fb18:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    fb1a:	f000 bc5c 	b.w	103d6 <__ssvfscanf_r+0x1002>
    fb1e:	f1b8 0f00 	cmp.w	r8, #0
    fb22:	bf08      	it	eq
    fb24:	f04f 38ff 	moveq.w	r8, #4294967295
    fb28:	07e0      	lsls	r0, r4, #31
    fb2a:	f140 827b 	bpl.w	10024 <__ssvfscanf_r+0xc50>
    fb2e:	f014 0310 	ands.w	r3, r4, #16
    fb32:	62bb      	str	r3, [r7, #40]	; 0x28
    fb34:	f040 83f3 	bne.w	1031e <__ssvfscanf_r+0xf4a>
    fb38:	0621      	lsls	r1, r4, #24
    fb3a:	f140 85ed 	bpl.w	10718 <__ssvfscanf_r+0x1344>
    fb3e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    fb40:	f856 3b04 	ldr.w	r3, [r6], #4
    fb44:	623b      	str	r3, [r7, #32]
    fb46:	2b00      	cmp	r3, #0
    fb48:	f43f ad39 	beq.w	f5be <__ssvfscanf_r+0x1ea>
    fb4c:	2080      	movs	r0, #128	; 0x80
    fb4e:	f7fa f855 	bl	9bfc <malloc>
    fb52:	4604      	mov	r4, r0
    fb54:	2800      	cmp	r0, #0
    fb56:	f000 86ee 	beq.w	10936 <__ssvfscanf_r+0x1562>
    fb5a:	6a3b      	ldr	r3, [r7, #32]
    fb5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fb5e:	6018      	str	r0, [r3, #0]
    fb60:	88d5      	ldrh	r5, [r2, #6]
    fb62:	8893      	ldrh	r3, [r2, #4]
    fb64:	429d      	cmp	r5, r3
    fb66:	f080 84dd 	bcs.w	10524 <__ssvfscanf_r+0x1150>
    fb6a:	6810      	ldr	r0, [r2, #0]
    fb6c:	6a3b      	ldr	r3, [r7, #32]
    fb6e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    fb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fb74:	633e      	str	r6, [r7, #48]	; 0x30
    fb76:	3501      	adds	r5, #1
    fb78:	80dd      	strh	r5, [r3, #6]
    fb7a:	2320      	movs	r3, #32
    fb7c:	61fc      	str	r4, [r7, #28]
    fb7e:	61bb      	str	r3, [r7, #24]
    fb80:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    fb82:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    fb86:	2500      	movs	r5, #0
    fb88:	46c2      	mov	sl, r8
    fb8a:	46a0      	mov	r8, r4
    fb8c:	f7fc f838 	bl	bc00 <__locale_mb_cur_max>
    fb90:	42a8      	cmp	r0, r5
    fb92:	f43f ad0b 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
    fb96:	e9db 3200 	ldrd	r3, r2, [fp]
    fb9a:	f813 1b01 	ldrb.w	r1, [r3], #1
    fb9e:	3a01      	subs	r2, #1
    fba0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    fba4:	e9cb 3200 	strd	r3, r2, [fp]
    fba8:	2e03      	cmp	r6, #3
    fbaa:	f105 0301 	add.w	r3, r5, #1
    fbae:	5541      	strb	r1, [r0, r5]
    fbb0:	64bb      	str	r3, [r7, #72]	; 0x48
    fbb2:	f107 0460 	add.w	r4, r7, #96	; 0x60
    fbb6:	d102      	bne.n	fbbe <__ssvfscanf_r+0x7ea>
    fbb8:	6823      	ldr	r3, [r4, #0]
    fbba:	2b04      	cmp	r3, #4
    fbbc:	d004      	beq.n	fbc8 <__ssvfscanf_r+0x7f4>
    fbbe:	2208      	movs	r2, #8
    fbc0:	2100      	movs	r1, #0
    fbc2:	4620      	mov	r0, r4
    fbc4:	f7fb ff52 	bl	ba6c <memset>
    fbc8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    fbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fbce:	9400      	str	r4, [sp, #0]
    fbd0:	4641      	mov	r1, r8
    fbd2:	4648      	mov	r0, r9
    fbd4:	f002 fb94 	bl	12300 <_mbrtowc_r>
    fbd8:	1c42      	adds	r2, r0, #1
    fbda:	4606      	mov	r6, r0
    fbdc:	f43f ace6 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
    fbe0:	2800      	cmp	r0, #0
    fbe2:	f040 82ca 	bne.w	1017a <__ssvfscanf_r+0xda6>
    fbe6:	f8c8 0000 	str.w	r0, [r8]
    fbea:	4605      	mov	r5, r0
    fbec:	f107 0368 	add.w	r3, r7, #104	; 0x68
    fbf0:	2208      	movs	r2, #8
    fbf2:	2100      	movs	r1, #0
    fbf4:	4618      	mov	r0, r3
    fbf6:	637b      	str	r3, [r7, #52]	; 0x34
    fbf8:	f7fb ff38 	bl	ba6c <memset>
    fbfc:	4950      	ldr	r1, [pc, #320]	; (fd40 <__ssvfscanf_r+0x96c>)
    fbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fc00:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    fc04:	462a      	mov	r2, r5
    fc06:	4648      	mov	r0, r9
    fc08:	460d      	mov	r5, r1
    fc0a:	f107 0150 	add.w	r1, r7, #80	; 0x50
    fc0e:	47a8      	blx	r5
    fc10:	2801      	cmp	r0, #1
    fc12:	f000 83d5 	beq.w	103c0 <__ssvfscanf_r+0xfec>
    fc16:	2200      	movs	r2, #0
    fc18:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fc1c:	5c9b      	ldrb	r3, [r3, r2]
    fc1e:	2b00      	cmp	r3, #0
    fc20:	f000 85a1 	beq.w	10766 <__ssvfscanf_r+0x1392>
    fc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fc26:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fc28:	2e03      	cmp	r6, #3
    fc2a:	4413      	add	r3, r2
    fc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    fc2e:	f000 83ca 	beq.w	103c6 <__ssvfscanf_r+0xff2>
    fc32:	f10a 3aff 	add.w	sl, sl, #4294967295
    fc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc38:	b95b      	cbnz	r3, fc52 <__ssvfscanf_r+0x87e>
    fc3a:	6a3b      	ldr	r3, [r7, #32]
    fc3c:	f108 0804 	add.w	r8, r8, #4
    fc40:	b13b      	cbz	r3, fc52 <__ssvfscanf_r+0x87e>
    fc42:	69fb      	ldr	r3, [r7, #28]
    fc44:	eba8 0403 	sub.w	r4, r8, r3
    fc48:	69bb      	ldr	r3, [r7, #24]
    fc4a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    fc4e:	f240 8405 	bls.w	1045c <__ssvfscanf_r+0x1088>
    fc52:	f8db 3004 	ldr.w	r3, [fp, #4]
    fc56:	2b00      	cmp	r3, #0
    fc58:	f04f 0500 	mov.w	r5, #0
    fc5c:	f340 8296 	ble.w	1018c <__ssvfscanf_r+0xdb8>
    fc60:	f1ba 0f00 	cmp.w	sl, #0
    fc64:	d192      	bne.n	fb8c <__ssvfscanf_r+0x7b8>
    fc66:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fc6a:	627e      	str	r6, [r7, #36]	; 0x24
    fc6c:	4644      	mov	r4, r8
    fc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc70:	2b00      	cmp	r3, #0
    fc72:	f47f abd6 	bne.w	f422 <__ssvfscanf_r+0x4e>
    fc76:	6023      	str	r3, [r4, #0]
    fc78:	6a3b      	ldr	r3, [r7, #32]
    fc7a:	2b00      	cmp	r3, #0
    fc7c:	f000 81c2 	beq.w	10004 <__ssvfscanf_r+0xc30>
    fc80:	69fb      	ldr	r3, [r7, #28]
    fc82:	69ba      	ldr	r2, [r7, #24]
    fc84:	1ae1      	subs	r1, r4, r3
    fc86:	108b      	asrs	r3, r1, #2
    fc88:	3301      	adds	r3, #1
    fc8a:	429a      	cmp	r2, r3
    fc8c:	f240 81ba 	bls.w	10004 <__ssvfscanf_r+0xc30>
    fc90:	6a3c      	ldr	r4, [r7, #32]
    fc92:	3104      	adds	r1, #4
    fc94:	6820      	ldr	r0, [r4, #0]
    fc96:	f7fa fa7d 	bl	a194 <realloc>
    fc9a:	2800      	cmp	r0, #0
    fc9c:	f000 81b2 	beq.w	10004 <__ssvfscanf_r+0xc30>
    fca0:	6020      	str	r0, [r4, #0]
    fca2:	e1af      	b.n	10004 <__ssvfscanf_r+0xc30>
    fca4:	0521      	lsls	r1, r4, #20
    fca6:	f57f adb3 	bpl.w	f810 <__ssvfscanf_r+0x43c>
    fcaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fcac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fcae:	185b      	adds	r3, r3, r1
    fcb0:	f47f adae 	bne.w	f810 <__ssvfscanf_r+0x43c>
    fcb4:	64bb      	str	r3, [r7, #72]	; 0x48
    fcb6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    fcba:	63fb      	str	r3, [r7, #60]	; 0x3c
    fcbc:	e593      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fcbe:	4b21      	ldr	r3, [pc, #132]	; (fd44 <__ssvfscanf_r+0x970>)
    fcc0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    fcc4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fcc8:	e66b      	b.n	f9a2 <__ssvfscanf_r+0x5ce>
    fcca:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    fcce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fcd2:	f47f ad9d 	bne.w	f810 <__ssvfscanf_r+0x43c>
    fcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fcd8:	2b01      	cmp	r3, #1
    fcda:	f47f ad99 	bne.w	f810 <__ssvfscanf_r+0x43c>
    fcde:	2330      	movs	r3, #48	; 0x30
    fce0:	f805 3b01 	strb.w	r3, [r5], #1
    fce4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fce8:	2300      	movs	r3, #0
    fcea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    fcee:	3e01      	subs	r6, #1
    fcf0:	637b      	str	r3, [r7, #52]	; 0x34
    fcf2:	e578      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fcf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcf6:	2b06      	cmp	r3, #6
    fcf8:	f040 8574 	bne.w	107e4 <__ssvfscanf_r+0x1410>
    fcfc:	2307      	movs	r3, #7
    fcfe:	64bb      	str	r3, [r7, #72]	; 0x48
    fd00:	e571      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fd02:	0523      	lsls	r3, r4, #20
    fd04:	f57f ad84 	bpl.w	f810 <__ssvfscanf_r+0x43c>
    fd08:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    fd0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fd10:	d005      	beq.n	fd1e <__ssvfscanf_r+0x94a>
    fd12:	0561      	lsls	r1, r4, #21
    fd14:	f57f ad7c 	bpl.w	f810 <__ssvfscanf_r+0x43c>
    fd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd1a:	2b00      	cmp	r3, #0
    fd1c:	d047      	beq.n	fdae <__ssvfscanf_r+0x9da>
    fd1e:	05a3      	lsls	r3, r4, #22
    fd20:	d404      	bmi.n	fd2c <__ssvfscanf_r+0x958>
    fd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd24:	69f9      	ldr	r1, [r7, #28]
    fd26:	1a5b      	subs	r3, r3, r1
    fd28:	e9c7 5305 	strd	r5, r3, [r7, #20]
    fd2c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    fd30:	2300      	movs	r3, #0
    fd32:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    fd36:	637b      	str	r3, [r7, #52]	; 0x34
    fd38:	e555      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fd3a:	bf00      	nop
    fd3c:	20000aa5 	.word	0x20000aa5
    fd40:	200085f4 	.word	0x200085f4
    fd44:	200026c8 	.word	0x200026c8
    fd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	f000 81ff 	beq.w	1014e <__ssvfscanf_r+0xd7a>
    fd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd52:	2b02      	cmp	r3, #2
    fd54:	f000 83b0 	beq.w	104b8 <__ssvfscanf_r+0x10e4>
    fd58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd5a:	2b01      	cmp	r3, #1
    fd5c:	f000 81f1 	beq.w	10142 <__ssvfscanf_r+0xd6e>
    fd60:	2b04      	cmp	r3, #4
    fd62:	f000 81ee 	beq.w	10142 <__ssvfscanf_r+0xd6e>
    fd66:	e553      	b.n	f810 <__ssvfscanf_r+0x43c>
    fd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd6a:	2b07      	cmp	r3, #7
    fd6c:	f040 853a 	bne.w	107e4 <__ssvfscanf_r+0x1410>
    fd70:	2308      	movs	r3, #8
    fd72:	64bb      	str	r3, [r7, #72]	; 0x48
    fd74:	e537      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fd76:	0520      	lsls	r0, r4, #20
    fd78:	f100 81f9 	bmi.w	1016e <__ssvfscanf_r+0xd9a>
    fd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd7e:	2b01      	cmp	r3, #1
    fd80:	f47f ad46 	bne.w	f810 <__ssvfscanf_r+0x43c>
    fd84:	2302      	movs	r3, #2
    fd86:	63fb      	str	r3, [r7, #60]	; 0x3c
    fd88:	e52d      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fd8a:	0623      	lsls	r3, r4, #24
    fd8c:	f57f ad40 	bpl.w	f810 <__ssvfscanf_r+0x43c>
    fd90:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fd94:	e527      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fd96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd98:	2b00      	cmp	r3, #0
    fd9a:	f040 81cc 	bne.w	10136 <__ssvfscanf_r+0xd62>
    fd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fda0:	b9b3      	cbnz	r3, fdd0 <__ssvfscanf_r+0x9fc>
    fda2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fda6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fdaa:	f000 8520 	beq.w	107ee <__ssvfscanf_r+0x141a>
    fdae:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fdb0:	ee18 9a10 	vmov	r9, s16
    fdb4:	e533      	b.n	f81e <__ssvfscanf_r+0x44a>
    fdb6:	0521      	lsls	r1, r4, #20
    fdb8:	f100 81b7 	bmi.w	1012a <__ssvfscanf_r+0xd56>
    fdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fdbe:	2b02      	cmp	r3, #2
    fdc0:	f040 8510 	bne.w	107e4 <__ssvfscanf_r+0x1410>
    fdc4:	2303      	movs	r3, #3
    fdc6:	64bb      	str	r3, [r7, #72]	; 0x48
    fdc8:	e50d      	b.n	f7e6 <__ssvfscanf_r+0x412>
    fdca:	0520      	lsls	r0, r4, #20
    fdcc:	d59c      	bpl.n	fd08 <__ssvfscanf_r+0x934>
    fdce:	e76c      	b.n	fcaa <__ssvfscanf_r+0x8d6>
    fdd0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    fdd2:	ee18 9a10 	vmov	r9, s16
    fdd6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    fdda:	e520      	b.n	f81e <__ssvfscanf_r+0x44a>
    fddc:	4b8d      	ldr	r3, [pc, #564]	; (10014 <__ssvfscanf_r+0xc40>)
    fdde:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    fde2:	2e08      	cmp	r6, #8
    fde4:	f73f addb 	bgt.w	f99e <__ssvfscanf_r+0x5ca>
    fde8:	e5e8      	b.n	f9bc <__ssvfscanf_r+0x5e8>
    fdea:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    fdee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fdf2:	f47f ade3 	bne.w	f9bc <__ssvfscanf_r+0x5e8>
    fdf6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    fdfa:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    fdfe:	2610      	movs	r6, #16
    fe00:	e5cf      	b.n	f9a2 <__ssvfscanf_r+0x5ce>
    fe02:	0623      	lsls	r3, r4, #24
    fe04:	f57f adda 	bpl.w	f9bc <__ssvfscanf_r+0x5e8>
    fe08:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fe0c:	e5c9      	b.n	f9a2 <__ssvfscanf_r+0x5ce>
    fe0e:	f044 0401 	orr.w	r4, r4, #1
    fe12:	f8db 3004 	ldr.w	r3, [fp, #4]
    fe16:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe18:	2b00      	cmp	r3, #0
    fe1a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fe1e:	f04f 0500 	mov.w	r5, #0
    fe22:	f73f abf8 	bgt.w	f616 <__ssvfscanf_r+0x242>
    fe26:	4659      	mov	r1, fp
    fe28:	4648      	mov	r0, r9
    fe2a:	f002 fc7d 	bl	12728 <__ssrefill_r>
    fe2e:	2800      	cmp	r0, #0
    fe30:	f47f abbc 	bne.w	f5ac <__ssvfscanf_r+0x1d8>
    fe34:	0660      	lsls	r0, r4, #25
    fe36:	f53f abf1 	bmi.w	f61c <__ssvfscanf_r+0x248>
    fe3a:	f8db 2000 	ldr.w	r2, [fp]
    fe3e:	4e76      	ldr	r6, [pc, #472]	; (10018 <__ssvfscanf_r+0xc44>)
    fe40:	7813      	ldrb	r3, [r2, #0]
    fe42:	5cf3      	ldrb	r3, [r6, r3]
    fe44:	0719      	lsls	r1, r3, #28
    fe46:	f57f abe9 	bpl.w	f61c <__ssvfscanf_r+0x248>
    fe4a:	f8db 3004 	ldr.w	r3, [fp, #4]
    fe4e:	3b01      	subs	r3, #1
    fe50:	2b00      	cmp	r3, #0
    fe52:	f10a 0a01 	add.w	sl, sl, #1
    fe56:	f8cb 3004 	str.w	r3, [fp, #4]
    fe5a:	f102 0201 	add.w	r2, r2, #1
    fe5e:	dd4a      	ble.n	fef6 <__ssvfscanf_r+0xb22>
    fe60:	f8cb 2000 	str.w	r2, [fp]
    fe64:	7813      	ldrb	r3, [r2, #0]
    fe66:	5cf3      	ldrb	r3, [r6, r3]
    fe68:	0719      	lsls	r1, r3, #28
    fe6a:	f57f abd7 	bpl.w	f61c <__ssvfscanf_r+0x248>
    fe6e:	e7ec      	b.n	fe4a <__ssvfscanf_r+0xa76>
    fe70:	f044 0401 	orr.w	r4, r4, #1
    fe74:	4b69      	ldr	r3, [pc, #420]	; (1001c <__ssvfscanf_r+0xc48>)
    fe76:	62fb      	str	r3, [r7, #44]	; 0x2c
    fe78:	2308      	movs	r3, #8
    fe7a:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe7c:	63bb      	str	r3, [r7, #56]	; 0x38
    fe7e:	2503      	movs	r5, #3
    fe80:	f7ff bbc4 	b.w	f60c <__ssvfscanf_r+0x238>
    fe84:	f044 0401 	orr.w	r4, r4, #1
    fe88:	4b65      	ldr	r3, [pc, #404]	; (10020 <__ssvfscanf_r+0xc4c>)
    fe8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    fe8c:	230a      	movs	r3, #10
    fe8e:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe90:	63bb      	str	r3, [r7, #56]	; 0x38
    fe92:	2503      	movs	r5, #3
    fe94:	f7ff bbba 	b.w	f60c <__ssvfscanf_r+0x238>
    fe98:	0523      	lsls	r3, r4, #20
    fe9a:	f57f ad82 	bpl.w	f9a2 <__ssvfscanf_r+0x5ce>
    fe9e:	b916      	cbnz	r6, fea6 <__ssvfscanf_r+0xad2>
    fea0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fea4:	2608      	movs	r6, #8
    fea6:	0563      	lsls	r3, r4, #21
    fea8:	f100 81a6 	bmi.w	101f8 <__ssvfscanf_r+0xe24>
    feac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    feae:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    feb2:	b11b      	cbz	r3, febc <__ssvfscanf_r+0xae8>
    feb4:	3b01      	subs	r3, #1
    feb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    feb8:	f108 0801 	add.w	r8, r8, #1
    febc:	684b      	ldr	r3, [r1, #4]
    febe:	3b01      	subs	r3, #1
    fec0:	2b00      	cmp	r3, #0
    fec2:	f10a 0a01 	add.w	sl, sl, #1
    fec6:	604b      	str	r3, [r1, #4]
    fec8:	f73f ad73 	bgt.w	f9b2 <__ssvfscanf_r+0x5de>
    fecc:	4648      	mov	r0, r9
    fece:	64b9      	str	r1, [r7, #72]	; 0x48
    fed0:	f002 fc2a 	bl	12728 <__ssrefill_r>
    fed4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fed6:	2800      	cmp	r0, #0
    fed8:	f43f ad6d 	beq.w	f9b6 <__ssvfscanf_r+0x5e2>
    fedc:	e56e      	b.n	f9bc <__ssvfscanf_r+0x5e8>
    fede:	ee18 0a10 	vmov	r0, s16
    fee2:	4659      	mov	r1, fp
    fee4:	f002 fc20 	bl	12728 <__ssrefill_r>
    fee8:	2800      	cmp	r0, #0
    feea:	f47f ac91 	bne.w	f810 <__ssvfscanf_r+0x43c>
    feee:	2e00      	cmp	r6, #0
    fef0:	f47f abc4 	bne.w	f67c <__ssvfscanf_r+0x2a8>
    fef4:	e48c      	b.n	f810 <__ssvfscanf_r+0x43c>
    fef6:	4659      	mov	r1, fp
    fef8:	4648      	mov	r0, r9
    fefa:	f002 fc15 	bl	12728 <__ssrefill_r>
    fefe:	2800      	cmp	r0, #0
    ff00:	f47f ab54 	bne.w	f5ac <__ssvfscanf_r+0x1d8>
    ff04:	f8db 2000 	ldr.w	r2, [fp]
    ff08:	e79a      	b.n	fe40 <__ssvfscanf_r+0xa6c>
    ff0a:	f8db 2004 	ldr.w	r2, [fp, #4]
    ff0e:	e00f      	b.n	ff30 <__ssvfscanf_r+0xb5c>
    ff10:	f8db 3000 	ldr.w	r3, [fp]
    ff14:	781a      	ldrb	r2, [r3, #0]
    ff16:	5cb2      	ldrb	r2, [r6, r2]
    ff18:	0711      	lsls	r1, r2, #28
    ff1a:	f103 0301 	add.w	r3, r3, #1
    ff1e:	f57f aa80 	bpl.w	f422 <__ssvfscanf_r+0x4e>
    ff22:	f8db 2004 	ldr.w	r2, [fp, #4]
    ff26:	3a01      	subs	r2, #1
    ff28:	e9cb 3200 	strd	r3, r2, [fp]
    ff2c:	f10a 0a01 	add.w	sl, sl, #1
    ff30:	2a00      	cmp	r2, #0
    ff32:	dced      	bgt.n	ff10 <__ssvfscanf_r+0xb3c>
    ff34:	4659      	mov	r1, fp
    ff36:	4648      	mov	r0, r9
    ff38:	f002 fbf6 	bl	12728 <__ssrefill_r>
    ff3c:	2800      	cmp	r0, #0
    ff3e:	d0e7      	beq.n	ff10 <__ssvfscanf_r+0xb3c>
    ff40:	f7ff ba6f 	b.w	f422 <__ssvfscanf_r+0x4e>
    ff44:	06e1      	lsls	r1, r4, #27
    ff46:	f100 8349 	bmi.w	105dc <__ssvfscanf_r+0x1208>
    ff4a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    ff4e:	f000 83ab 	beq.w	106a8 <__ssvfscanf_r+0x12d4>
    ff52:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    ff54:	f854 6b04 	ldr.w	r6, [r4], #4
    ff58:	64be      	str	r6, [r7, #72]	; 0x48
    ff5a:	2e00      	cmp	r6, #0
    ff5c:	f43f ab2f 	beq.w	f5be <__ssvfscanf_r+0x1ea>
    ff60:	2020      	movs	r0, #32
    ff62:	f7f9 fe4b 	bl	9bfc <malloc>
    ff66:	4605      	mov	r5, r0
    ff68:	2800      	cmp	r0, #0
    ff6a:	f000 8462 	beq.w	10832 <__ssvfscanf_r+0x145e>
    ff6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ff70:	6030      	str	r0, [r6, #0]
    ff72:	8893      	ldrh	r3, [r2, #4]
    ff74:	88d6      	ldrh	r6, [r2, #6]
    ff76:	429e      	cmp	r6, r3
    ff78:	f080 82a8 	bcs.w	104cc <__ssvfscanf_r+0x10f8>
    ff7c:	6810      	ldr	r0, [r2, #0]
    ff7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ff80:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    ff84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff86:	633c      	str	r4, [r7, #48]	; 0x30
    ff88:	3601      	adds	r6, #1
    ff8a:	80de      	strh	r6, [r3, #6]
    ff8c:	2320      	movs	r3, #32
    ff8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ff90:	f8db 2000 	ldr.w	r2, [fp]
    ff94:	4e20      	ldr	r6, [pc, #128]	; (10018 <__ssvfscanf_r+0xc44>)
    ff96:	7811      	ldrb	r1, [r2, #0]
    ff98:	5c71      	ldrb	r1, [r6, r1]
    ff9a:	0708      	lsls	r0, r1, #28
    ff9c:	f100 82ac 	bmi.w	104f8 <__ssvfscanf_r+0x1124>
    ffa0:	4633      	mov	r3, r6
    ffa2:	462c      	mov	r4, r5
    ffa4:	4610      	mov	r0, r2
    ffa6:	462e      	mov	r6, r5
    ffa8:	f8db 1004 	ldr.w	r1, [fp, #4]
    ffac:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ffae:	3901      	subs	r1, #1
    ffb0:	f8cb 1004 	str.w	r1, [fp, #4]
    ffb4:	1c41      	adds	r1, r0, #1
    ffb6:	f8cb 1000 	str.w	r1, [fp]
    ffba:	4635      	mov	r5, r6
    ffbc:	7801      	ldrb	r1, [r0, #0]
    ffbe:	f805 1b01 	strb.w	r1, [r5], #1
    ffc2:	b122      	cbz	r2, ffce <__ssvfscanf_r+0xbfa>
    ffc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ffc6:	1b2e      	subs	r6, r5, r4
    ffc8:	4296      	cmp	r6, r2
    ffca:	f080 837a 	bcs.w	106c2 <__ssvfscanf_r+0x12ee>
    ffce:	f1b8 0801 	subs.w	r8, r8, #1
    ffd2:	d00b      	beq.n	ffec <__ssvfscanf_r+0xc18>
    ffd4:	f8db 1004 	ldr.w	r1, [fp, #4]
    ffd8:	2900      	cmp	r1, #0
    ffda:	462e      	mov	r6, r5
    ffdc:	f340 83ae 	ble.w	1073c <__ssvfscanf_r+0x1368>
    ffe0:	f8db 0000 	ldr.w	r0, [fp]
    ffe4:	7801      	ldrb	r1, [r0, #0]
    ffe6:	5c59      	ldrb	r1, [r3, r1]
    ffe8:	0709      	lsls	r1, r1, #28
    ffea:	d5dd      	bpl.n	ffa8 <__ssvfscanf_r+0xbd4>
    ffec:	1b29      	subs	r1, r5, r4
    ffee:	448a      	add	sl, r1
    fff0:	3101      	adds	r1, #1
    fff2:	f04f 0300 	mov.w	r3, #0
    fff6:	702b      	strb	r3, [r5, #0]
    fff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fffa:	b11b      	cbz	r3, 10004 <__ssvfscanf_r+0xc30>
    fffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fffe:	428b      	cmp	r3, r1
   10000:	f200 8394 	bhi.w	1072c <__ssvfscanf_r+0x1358>
   10004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10006:	3301      	adds	r3, #1
   10008:	647b      	str	r3, [r7, #68]	; 0x44
   1000a:	f7ff ba0a 	b.w	f422 <__ssvfscanf_r+0x4e>
   1000e:	2300      	movs	r3, #0
   10010:	63fb      	str	r3, [r7, #60]	; 0x3c
   10012:	e461      	b.n	f8d8 <__ssvfscanf_r+0x504>
   10014:	200026c8 	.word	0x200026c8
   10018:	20000aa5 	.word	0x20000aa5
   1001c:	00011fed 	.word	0x00011fed
   10020:	0000b549 	.word	0x0000b549
   10024:	06e6      	lsls	r6, r4, #27
   10026:	f100 8181 	bmi.w	1032c <__ssvfscanf_r+0xf58>
   1002a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   1002e:	f000 836d 	beq.w	1070c <__ssvfscanf_r+0x1338>
   10032:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10034:	f854 6b04 	ldr.w	r6, [r4], #4
   10038:	64be      	str	r6, [r7, #72]	; 0x48
   1003a:	2e00      	cmp	r6, #0
   1003c:	f43f aabf 	beq.w	f5be <__ssvfscanf_r+0x1ea>
   10040:	2020      	movs	r0, #32
   10042:	f7f9 fddb 	bl	9bfc <malloc>
   10046:	4605      	mov	r5, r0
   10048:	2800      	cmp	r0, #0
   1004a:	f000 83f2 	beq.w	10832 <__ssvfscanf_r+0x145e>
   1004e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10050:	6030      	str	r0, [r6, #0]
   10052:	8893      	ldrh	r3, [r2, #4]
   10054:	88d6      	ldrh	r6, [r2, #6]
   10056:	429e      	cmp	r6, r3
   10058:	f080 827a 	bcs.w	10550 <__ssvfscanf_r+0x117c>
   1005c:	6810      	ldr	r0, [r2, #0]
   1005e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10060:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10066:	633c      	str	r4, [r7, #48]	; 0x30
   10068:	3601      	adds	r6, #1
   1006a:	80de      	strh	r6, [r3, #6]
   1006c:	2420      	movs	r4, #32
   1006e:	f8db 2000 	ldr.w	r2, [fp]
   10072:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10076:	4619      	mov	r1, r3
   10078:	7813      	ldrb	r3, [r2, #0]
   1007a:	5ccb      	ldrb	r3, [r1, r3]
   1007c:	2b00      	cmp	r3, #0
   1007e:	f43f aa9e 	beq.w	f5be <__ssvfscanf_r+0x1ea>
   10082:	ee08 9a10 	vmov	s16, r9
   10086:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1008a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1008e:	462e      	mov	r6, r5
   10090:	46a2      	mov	sl, r4
   10092:	4610      	mov	r0, r2
   10094:	460c      	mov	r4, r1
   10096:	f8db 1004 	ldr.w	r1, [fp, #4]
   1009a:	1c43      	adds	r3, r0, #1
   1009c:	3901      	subs	r1, #1
   1009e:	e9cb 3100 	strd	r3, r1, [fp]
   100a2:	4629      	mov	r1, r5
   100a4:	7800      	ldrb	r0, [r0, #0]
   100a6:	f801 0b01 	strb.w	r0, [r1], #1
   100aa:	f1b9 0f00 	cmp.w	r9, #0
   100ae:	d002      	beq.n	100b6 <__ssvfscanf_r+0xce2>
   100b0:	1b8d      	subs	r5, r1, r6
   100b2:	4555      	cmp	r5, sl
   100b4:	d27a      	bcs.n	101ac <__ssvfscanf_r+0xdd8>
   100b6:	460d      	mov	r5, r1
   100b8:	f1b8 0801 	subs.w	r8, r8, #1
   100bc:	d00a      	beq.n	100d4 <__ssvfscanf_r+0xd00>
   100be:	f8db 1004 	ldr.w	r1, [fp, #4]
   100c2:	2900      	cmp	r1, #0
   100c4:	f340 816a 	ble.w	1039c <__ssvfscanf_r+0xfc8>
   100c8:	f8db 0000 	ldr.w	r0, [fp]
   100cc:	7801      	ldrb	r1, [r0, #0]
   100ce:	5c61      	ldrb	r1, [r4, r1]
   100d0:	2900      	cmp	r1, #0
   100d2:	d1e0      	bne.n	10096 <__ssvfscanf_r+0xcc2>
   100d4:	4654      	mov	r4, sl
   100d6:	ee18 9a10 	vmov	r9, s16
   100da:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   100de:	1bae      	subs	r6, r5, r6
   100e0:	f43f aa6d 	beq.w	f5be <__ssvfscanf_r+0x1ea>
   100e4:	f04f 0300 	mov.w	r3, #0
   100e8:	702b      	strb	r3, [r5, #0]
   100ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   100ec:	b11b      	cbz	r3, 100f6 <__ssvfscanf_r+0xd22>
   100ee:	1c71      	adds	r1, r6, #1
   100f0:	428c      	cmp	r4, r1
   100f2:	f200 832d 	bhi.w	10750 <__ssvfscanf_r+0x137c>
   100f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   100f8:	3301      	adds	r3, #1
   100fa:	44b2      	add	sl, r6
   100fc:	647b      	str	r3, [r7, #68]	; 0x44
   100fe:	f7ff b990 	b.w	f422 <__ssvfscanf_r+0x4e>
   10102:	2300      	movs	r3, #0
   10104:	613b      	str	r3, [r7, #16]
   10106:	f7ff baa9 	b.w	f65c <__ssvfscanf_r+0x288>
   1010a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   1010e:	f47f aa56 	bne.w	f5be <__ssvfscanf_r+0x1ea>
   10112:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10116:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1011a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1011e:	f7ff ba67 	b.w	f5f0 <__ssvfscanf_r+0x21c>
   10122:	64f9      	str	r1, [r7, #76]	; 0x4c
   10124:	2504      	movs	r5, #4
   10126:	f7ff ba71 	b.w	f60c <__ssvfscanf_r+0x238>
   1012a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1012c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1012e:	185b      	adds	r3, r3, r1
   10130:	f47f ae44 	bne.w	fdbc <__ssvfscanf_r+0x9e8>
   10134:	e5be      	b.n	fcb4 <__ssvfscanf_r+0x8e0>
   10136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10138:	2b03      	cmp	r3, #3
   1013a:	d002      	beq.n	10142 <__ssvfscanf_r+0xd6e>
   1013c:	2b05      	cmp	r3, #5
   1013e:	f47f ab67 	bne.w	f810 <__ssvfscanf_r+0x43c>
   10142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10144:	3301      	adds	r3, #1
   10146:	b2db      	uxtb	r3, r3
   10148:	64bb      	str	r3, [r7, #72]	; 0x48
   1014a:	f7ff bb4c 	b.w	f7e6 <__ssvfscanf_r+0x412>
   1014e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10150:	2b00      	cmp	r3, #0
   10152:	f47f ae01 	bne.w	fd58 <__ssvfscanf_r+0x984>
   10156:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1015a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1015e:	f47f adfb 	bne.w	fd58 <__ssvfscanf_r+0x984>
   10162:	2301      	movs	r3, #1
   10164:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10168:	63fb      	str	r3, [r7, #60]	; 0x3c
   1016a:	f7ff bb3c 	b.w	f7e6 <__ssvfscanf_r+0x412>
   1016e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10170:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10172:	185b      	adds	r3, r3, r1
   10174:	f47f ae02 	bne.w	fd7c <__ssvfscanf_r+0x9a8>
   10178:	e59c      	b.n	fcb4 <__ssvfscanf_r+0x8e0>
   1017a:	1c83      	adds	r3, r0, #2
   1017c:	f040 845b 	bne.w	10a36 <__ssvfscanf_r+0x1662>
   10180:	f8db 3004 	ldr.w	r3, [fp, #4]
   10184:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10186:	2b00      	cmp	r3, #0
   10188:	f73f ad00 	bgt.w	fb8c <__ssvfscanf_r+0x7b8>
   1018c:	4659      	mov	r1, fp
   1018e:	4648      	mov	r0, r9
   10190:	f002 faca 	bl	12728 <__ssrefill_r>
   10194:	2800      	cmp	r0, #0
   10196:	f43f ad63 	beq.w	fc60 <__ssvfscanf_r+0x88c>
   1019a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1019e:	627e      	str	r6, [r7, #36]	; 0x24
   101a0:	4644      	mov	r4, r8
   101a2:	2d00      	cmp	r5, #0
   101a4:	f43f ad63 	beq.w	fc6e <__ssvfscanf_r+0x89a>
   101a8:	f7ff ba00 	b.w	f5ac <__ssvfscanf_r+0x1d8>
   101ac:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   101b0:	4630      	mov	r0, r6
   101b2:	4651      	mov	r1, sl
   101b4:	f7f9 ffee 	bl	a194 <realloc>
   101b8:	4606      	mov	r6, r0
   101ba:	2800      	cmp	r0, #0
   101bc:	f000 8339 	beq.w	10832 <__ssvfscanf_r+0x145e>
   101c0:	4405      	add	r5, r0
   101c2:	f8c9 0000 	str.w	r0, [r9]
   101c6:	e777      	b.n	100b8 <__ssvfscanf_r+0xce4>
   101c8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   101cc:	4bbc      	ldr	r3, [pc, #752]	; (104c0 <__ssvfscanf_r+0x10ec>)
   101ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   101d0:	2310      	movs	r3, #16
   101d2:	64f9      	str	r1, [r7, #76]	; 0x4c
   101d4:	63bb      	str	r3, [r7, #56]	; 0x38
   101d6:	2503      	movs	r5, #3
   101d8:	f7ff ba18 	b.w	f60c <__ssvfscanf_r+0x238>
   101dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   101de:	3301      	adds	r3, #1
   101e0:	637b      	str	r3, [r7, #52]	; 0x34
   101e2:	693b      	ldr	r3, [r7, #16]
   101e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   101e8:	2b00      	cmp	r3, #0
   101ea:	f43f aafe 	beq.w	f7ea <__ssvfscanf_r+0x416>
   101ee:	693b      	ldr	r3, [r7, #16]
   101f0:	3b01      	subs	r3, #1
   101f2:	613b      	str	r3, [r7, #16]
   101f4:	f7ff bafa 	b.w	f7ec <__ssvfscanf_r+0x418>
   101f8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   101fc:	f7ff bbd1 	b.w	f9a2 <__ssvfscanf_r+0x5ce>
   10200:	0722      	lsls	r2, r4, #28
   10202:	f140 81c7 	bpl.w	10594 <__ssvfscanf_r+0x11c0>
   10206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10208:	f853 2b04 	ldr.w	r2, [r3], #4
   1020c:	633b      	str	r3, [r7, #48]	; 0x30
   1020e:	7010      	strb	r0, [r2, #0]
   10210:	f7ff bbf3 	b.w	f9fa <__ssvfscanf_r+0x626>
   10214:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   10218:	465a      	mov	r2, fp
   1021a:	4648      	mov	r0, r9
   1021c:	3d01      	subs	r5, #1
   1021e:	f002 fa43 	bl	126a8 <_sungetc_r>
   10222:	f7ff bbd5 	b.w	f9d0 <__ssvfscanf_r+0x5fc>
   10226:	69fb      	ldr	r3, [r7, #28]
   10228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1022a:	4293      	cmp	r3, r2
   1022c:	f43f ab2d 	beq.w	f88a <__ssvfscanf_r+0x4b6>
   10230:	1a9a      	subs	r2, r3, r2
   10232:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   10236:	429d      	cmp	r5, r3
   10238:	bf28      	it	cs
   1023a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   1023e:	49a1      	ldr	r1, [pc, #644]	; (104c4 <__ssvfscanf_r+0x10f0>)
   10240:	4628      	mov	r0, r5
   10242:	f7fb fa6d 	bl	b720 <sprintf>
   10246:	f7ff bb20 	b.w	f88a <__ssvfscanf_r+0x4b6>
   1024a:	06e2      	lsls	r2, r4, #27
   1024c:	f100 8131 	bmi.w	104b2 <__ssvfscanf_r+0x10de>
   10250:	0723      	lsls	r3, r4, #28
   10252:	f100 81ba 	bmi.w	105ca <__ssvfscanf_r+0x11f6>
   10256:	0766      	lsls	r6, r4, #29
   10258:	f140 82b4 	bpl.w	107c4 <__ssvfscanf_r+0x13f0>
   1025c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1025e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10260:	f853 2b04 	ldr.w	r2, [r3], #4
   10264:	633b      	str	r3, [r7, #48]	; 0x30
   10266:	f8a2 a000 	strh.w	sl, [r2]
   1026a:	f7ff b8da 	b.w	f422 <__ssvfscanf_r+0x4e>
   1026e:	0723      	lsls	r3, r4, #28
   10270:	f47f a9a5 	bne.w	f5be <__ssvfscanf_r+0x1ea>
   10274:	7842      	ldrb	r2, [r0, #1]
   10276:	2a68      	cmp	r2, #104	; 0x68
   10278:	f000 8186 	beq.w	10588 <__ssvfscanf_r+0x11b4>
   1027c:	f044 0404 	orr.w	r4, r4, #4
   10280:	4608      	mov	r0, r1
   10282:	f7ff b92f 	b.w	f4e4 <__ssvfscanf_r+0x110>
   10286:	4b8e      	ldr	r3, [pc, #568]	; (104c0 <__ssvfscanf_r+0x10ec>)
   10288:	62fb      	str	r3, [r7, #44]	; 0x2c
   1028a:	230a      	movs	r3, #10
   1028c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1028e:	63bb      	str	r3, [r7, #56]	; 0x38
   10290:	2503      	movs	r5, #3
   10292:	f7ff b9bb 	b.w	f60c <__ssvfscanf_r+0x238>
   10296:	4b8c      	ldr	r3, [pc, #560]	; (104c8 <__ssvfscanf_r+0x10f4>)
   10298:	62fb      	str	r3, [r7, #44]	; 0x2c
   1029a:	2300      	movs	r3, #0
   1029c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1029e:	63bb      	str	r3, [r7, #56]	; 0x38
   102a0:	2503      	movs	r5, #3
   102a2:	f7ff b9b3 	b.w	f60c <__ssvfscanf_r+0x238>
   102a6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   102aa:	e78f      	b.n	101cc <__ssvfscanf_r+0xdf8>
   102ac:	f107 0070 	add.w	r0, r7, #112	; 0x70
   102b0:	f000 fdde 	bl	10e70 <__sccl>
   102b4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   102b8:	64f8      	str	r0, [r7, #76]	; 0x4c
   102ba:	2501      	movs	r5, #1
   102bc:	f7ff b9a6 	b.w	f60c <__ssvfscanf_r+0x238>
   102c0:	0722      	lsls	r2, r4, #28
   102c2:	f47f a97c 	bne.w	f5be <__ssvfscanf_r+0x1ea>
   102c6:	7842      	ldrb	r2, [r0, #1]
   102c8:	2a6c      	cmp	r2, #108	; 0x6c
   102ca:	f000 8157 	beq.w	1057c <__ssvfscanf_r+0x11a8>
   102ce:	f044 0401 	orr.w	r4, r4, #1
   102d2:	4608      	mov	r0, r1
   102d4:	f7ff b906 	b.w	f4e4 <__ssvfscanf_r+0x110>
   102d8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   102dc:	f47f a96f 	bne.w	f5be <__ssvfscanf_r+0x1ea>
   102e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   102e2:	2a00      	cmp	r2, #0
   102e4:	f000 81e7 	beq.w	106b6 <__ssvfscanf_r+0x12e2>
   102e8:	7842      	ldrb	r2, [r0, #1]
   102ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   102ee:	4608      	mov	r0, r1
   102f0:	f7ff b8f8 	b.w	f4e4 <__ssvfscanf_r+0x110>
   102f4:	ea58 0804 	orrs.w	r8, r8, r4
   102f8:	f47f a961 	bne.w	f5be <__ssvfscanf_r+0x1ea>
   102fc:	7842      	ldrb	r2, [r0, #1]
   102fe:	2410      	movs	r4, #16
   10300:	4608      	mov	r0, r1
   10302:	f7ff b8ef 	b.w	f4e4 <__ssvfscanf_r+0x110>
   10306:	64f9      	str	r1, [r7, #76]	; 0x4c
   10308:	f7ff b8a7 	b.w	f45a <__ssvfscanf_r+0x86>
   1030c:	2300      	movs	r3, #0
   1030e:	623b      	str	r3, [r7, #32]
   10310:	62bb      	str	r3, [r7, #40]	; 0x28
   10312:	63fb      	str	r3, [r7, #60]	; 0x3c
   10314:	f107 0354 	add.w	r3, r7, #84	; 0x54
   10318:	64bb      	str	r3, [r7, #72]	; 0x48
   1031a:	f7ff bba9 	b.w	fa70 <__ssvfscanf_r+0x69c>
   1031e:	2300      	movs	r3, #0
   10320:	e9c7 3306 	strd	r3, r3, [r7, #24]
   10324:	623b      	str	r3, [r7, #32]
   10326:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1032a:	e429      	b.n	fb80 <__ssvfscanf_r+0x7ac>
   1032c:	f8db 3000 	ldr.w	r3, [fp]
   10330:	f107 0270 	add.w	r2, r7, #112	; 0x70
   10334:	4611      	mov	r1, r2
   10336:	781a      	ldrb	r2, [r3, #0]
   10338:	5c8a      	ldrb	r2, [r1, r2]
   1033a:	2a00      	cmp	r2, #0
   1033c:	f43f a93f 	beq.w	f5be <__ssvfscanf_r+0x1ea>
   10340:	3301      	adds	r3, #1
   10342:	f8cb 3000 	str.w	r3, [fp]
   10346:	f8db 3004 	ldr.w	r3, [fp, #4]
   1034a:	f1b8 0f01 	cmp.w	r8, #1
   1034e:	f103 33ff 	add.w	r3, r3, #4294967295
   10352:	f8cb 3004 	str.w	r3, [fp, #4]
   10356:	bf18      	it	ne
   10358:	460c      	movne	r4, r1
   1035a:	d114      	bne.n	10386 <__ssvfscanf_r+0xfb2>
   1035c:	f7ff bb53 	b.w	fa06 <__ssvfscanf_r+0x632>
   10360:	f8db 3000 	ldr.w	r3, [fp]
   10364:	781a      	ldrb	r2, [r3, #0]
   10366:	5ca2      	ldrb	r2, [r4, r2]
   10368:	3301      	adds	r3, #1
   1036a:	2a00      	cmp	r2, #0
   1036c:	f43f ab4b 	beq.w	fa06 <__ssvfscanf_r+0x632>
   10370:	f8cb 3000 	str.w	r3, [fp]
   10374:	f8db 3004 	ldr.w	r3, [fp, #4]
   10378:	3501      	adds	r5, #1
   1037a:	3b01      	subs	r3, #1
   1037c:	4545      	cmp	r5, r8
   1037e:	f8cb 3004 	str.w	r3, [fp, #4]
   10382:	f43f ab40 	beq.w	fa06 <__ssvfscanf_r+0x632>
   10386:	2b00      	cmp	r3, #0
   10388:	dcea      	bgt.n	10360 <__ssvfscanf_r+0xf8c>
   1038a:	4659      	mov	r1, fp
   1038c:	4648      	mov	r0, r9
   1038e:	f002 f9cb 	bl	12728 <__ssrefill_r>
   10392:	2800      	cmp	r0, #0
   10394:	d0e4      	beq.n	10360 <__ssvfscanf_r+0xf8c>
   10396:	44aa      	add	sl, r5
   10398:	f7ff b843 	b.w	f422 <__ssvfscanf_r+0x4e>
   1039c:	ee18 0a10 	vmov	r0, s16
   103a0:	4659      	mov	r1, fp
   103a2:	f002 f9c1 	bl	12728 <__ssrefill_r>
   103a6:	2800      	cmp	r0, #0
   103a8:	f43f ae8e 	beq.w	100c8 <__ssvfscanf_r+0xcf4>
   103ac:	42b5      	cmp	r5, r6
   103ae:	4654      	mov	r4, sl
   103b0:	ee18 9a10 	vmov	r9, s16
   103b4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   103b8:	f47f ae91 	bne.w	100de <__ssvfscanf_r+0xd0a>
   103bc:	f7ff b8f6 	b.w	f5ac <__ssvfscanf_r+0x1d8>
   103c0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   103c4:	e428      	b.n	fc18 <__ssvfscanf_r+0x844>
   103c6:	6823      	ldr	r3, [r4, #0]
   103c8:	2b04      	cmp	r3, #4
   103ca:	f47f ac32 	bne.w	fc32 <__ssvfscanf_r+0x85e>
   103ce:	e432      	b.n	fc36 <__ssvfscanf_r+0x862>
   103d0:	1c83      	adds	r3, r0, #2
   103d2:	f040 8339 	bne.w	10a48 <__ssvfscanf_r+0x1674>
   103d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   103da:	2b00      	cmp	r3, #0
   103dc:	f340 81d7 	ble.w	1078e <__ssvfscanf_r+0x13ba>
   103e0:	f8db 3000 	ldr.w	r3, [fp]
   103e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   103e6:	781b      	ldrb	r3, [r3, #0]
   103e8:	5cd3      	ldrb	r3, [r2, r3]
   103ea:	0718      	lsls	r0, r3, #28
   103ec:	d403      	bmi.n	103f6 <__ssvfscanf_r+0x1022>
   103ee:	f1b8 0f00 	cmp.w	r8, #0
   103f2:	f47f ab49 	bne.w	fa88 <__ssvfscanf_r+0x6b4>
   103f6:	627c      	str	r4, [r7, #36]	; 0x24
   103f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   103fa:	2b00      	cmp	r3, #0
   103fc:	f47f a811 	bne.w	f422 <__ssvfscanf_r+0x4e>
   10400:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10402:	6013      	str	r3, [r2, #0]
   10404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10406:	2b00      	cmp	r3, #0
   10408:	f43f adfc 	beq.w	10004 <__ssvfscanf_r+0xc30>
   1040c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1040e:	1ad1      	subs	r1, r2, r3
   10410:	108b      	asrs	r3, r1, #2
   10412:	6a3a      	ldr	r2, [r7, #32]
   10414:	3301      	adds	r3, #1
   10416:	429a      	cmp	r2, r3
   10418:	f67f adf4 	bls.w	10004 <__ssvfscanf_r+0xc30>
   1041c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1041e:	3104      	adds	r1, #4
   10420:	6820      	ldr	r0, [r4, #0]
   10422:	f7f9 feb7 	bl	a194 <realloc>
   10426:	2800      	cmp	r0, #0
   10428:	f47f ac3a 	bne.w	fca0 <__ssvfscanf_r+0x8cc>
   1042c:	e5ea      	b.n	10004 <__ssvfscanf_r+0xc30>
   1042e:	f853 2b04 	ldr.w	r2, [r3], #4
   10432:	ed82 0b00 	vstr	d0, [r2]
   10436:	633b      	str	r3, [r7, #48]	; 0x30
   10438:	e5e4      	b.n	10004 <__ssvfscanf_r+0xc30>
   1043a:	68fd      	ldr	r5, [r7, #12]
   1043c:	6a39      	ldr	r1, [r7, #32]
   1043e:	687e      	ldr	r6, [r7, #4]
   10440:	4628      	mov	r0, r5
   10442:	4642      	mov	r2, r8
   10444:	46a3      	mov	fp, r4
   10446:	68bc      	ldr	r4, [r7, #8]
   10448:	f000 fd56 	bl	10ef8 <stpncpy>
   1044c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1044e:	61fb      	str	r3, [r7, #28]
   10450:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   10454:	3e01      	subs	r6, #1
   10456:	4605      	mov	r5, r0
   10458:	f7ff b9c8 	b.w	f7ec <__ssvfscanf_r+0x418>
   1045c:	69f8      	ldr	r0, [r7, #28]
   1045e:	00d9      	lsls	r1, r3, #3
   10460:	461d      	mov	r5, r3
   10462:	f7f9 fe97 	bl	a194 <realloc>
   10466:	61f8      	str	r0, [r7, #28]
   10468:	2800      	cmp	r0, #0
   1046a:	f000 8264 	beq.w	10936 <__ssvfscanf_r+0x1562>
   1046e:	6a3a      	ldr	r2, [r7, #32]
   10470:	006b      	lsls	r3, r5, #1
   10472:	eb00 0804 	add.w	r8, r0, r4
   10476:	6010      	str	r0, [r2, #0]
   10478:	61bb      	str	r3, [r7, #24]
   1047a:	f7ff bbea 	b.w	fc52 <__ssvfscanf_r+0x87e>
   1047e:	2e02      	cmp	r6, #2
   10480:	f240 82c4 	bls.w	10a0c <__ssvfscanf_r+0x1638>
   10484:	2e03      	cmp	r6, #3
   10486:	f43f a9d3 	beq.w	f830 <__ssvfscanf_r+0x45c>
   1048a:	3e04      	subs	r6, #4
   1048c:	fa5f f886 	uxtb.w	r8, r6
   10490:	ea6f 0308 	mvn.w	r3, r8
   10494:	18ee      	adds	r6, r5, r3
   10496:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1049a:	465a      	mov	r2, fp
   1049c:	4648      	mov	r0, r9
   1049e:	f002 f903 	bl	126a8 <_sungetc_r>
   104a2:	42ae      	cmp	r6, r5
   104a4:	d1f7      	bne.n	10496 <__ssvfscanf_r+0x10c2>
   104a6:	f10a 3aff 	add.w	sl, sl, #4294967295
   104aa:	ebaa 0a08 	sub.w	sl, sl, r8
   104ae:	f7ff b9bf 	b.w	f830 <__ssvfscanf_r+0x45c>
   104b2:	64f9      	str	r1, [r7, #76]	; 0x4c
   104b4:	f7fe bfb5 	b.w	f422 <__ssvfscanf_r+0x4e>
   104b8:	2303      	movs	r3, #3
   104ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   104bc:	f7ff b993 	b.w	f7e6 <__ssvfscanf_r+0x412>
   104c0:	00011fed 	.word	0x00011fed
   104c4:	20000a9c 	.word	0x20000a9c
   104c8:	0000b549 	.word	0x0000b549
   104cc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   104d0:	4293      	cmp	r3, r2
   104d2:	f200 8297 	bhi.w	10a04 <__ssvfscanf_r+0x1630>
   104d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104d8:	3308      	adds	r3, #8
   104da:	b29b      	uxth	r3, r3
   104dc:	6810      	ldr	r0, [r2, #0]
   104de:	63f8      	str	r0, [r7, #60]	; 0x3c
   104e0:	0099      	lsls	r1, r3, #2
   104e2:	637b      	str	r3, [r7, #52]	; 0x34
   104e4:	f7f9 fe56 	bl	a194 <realloc>
   104e8:	2800      	cmp	r0, #0
   104ea:	f000 827b 	beq.w	109e4 <__ssvfscanf_r+0x1610>
   104ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104f2:	8093      	strh	r3, [r2, #4]
   104f4:	6010      	str	r0, [r2, #0]
   104f6:	e542      	b.n	ff7e <__ssvfscanf_r+0xbaa>
   104f8:	2101      	movs	r1, #1
   104fa:	e57a      	b.n	fff2 <__ssvfscanf_r+0xc1e>
   104fc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10500:	4293      	cmp	r3, r2
   10502:	f200 8293 	bhi.w	10a2c <__ssvfscanf_r+0x1658>
   10506:	3308      	adds	r3, #8
   10508:	b29e      	uxth	r6, r3
   1050a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1050c:	00b1      	lsls	r1, r6, #2
   1050e:	6818      	ldr	r0, [r3, #0]
   10510:	f7f9 fe40 	bl	a194 <realloc>
   10514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10516:	2800      	cmp	r0, #0
   10518:	f000 823e 	beq.w	10998 <__ssvfscanf_r+0x15c4>
   1051c:	809e      	strh	r6, [r3, #4]
   1051e:	6018      	str	r0, [r3, #0]
   10520:	f7ff ba9b 	b.w	fa5a <__ssvfscanf_r+0x686>
   10524:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10528:	4293      	cmp	r3, r2
   1052a:	f200 827f 	bhi.w	10a2c <__ssvfscanf_r+0x1658>
   1052e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10530:	3308      	adds	r3, #8
   10532:	b29b      	uxth	r3, r3
   10534:	0099      	lsls	r1, r3, #2
   10536:	6810      	ldr	r0, [r2, #0]
   10538:	64bb      	str	r3, [r7, #72]	; 0x48
   1053a:	f7f9 fe2b 	bl	a194 <realloc>
   1053e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10540:	2800      	cmp	r0, #0
   10542:	f000 8228 	beq.w	10996 <__ssvfscanf_r+0x15c2>
   10546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10548:	8093      	strh	r3, [r2, #4]
   1054a:	6010      	str	r0, [r2, #0]
   1054c:	f7ff bb0e 	b.w	fb6c <__ssvfscanf_r+0x798>
   10550:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10554:	4293      	cmp	r3, r2
   10556:	f200 8255 	bhi.w	10a04 <__ssvfscanf_r+0x1630>
   1055a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1055c:	3308      	adds	r3, #8
   1055e:	b29b      	uxth	r3, r3
   10560:	6810      	ldr	r0, [r2, #0]
   10562:	63f8      	str	r0, [r7, #60]	; 0x3c
   10564:	0099      	lsls	r1, r3, #2
   10566:	637b      	str	r3, [r7, #52]	; 0x34
   10568:	f7f9 fe14 	bl	a194 <realloc>
   1056c:	2800      	cmp	r0, #0
   1056e:	f000 8239 	beq.w	109e4 <__ssvfscanf_r+0x1610>
   10572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10576:	8093      	strh	r3, [r2, #4]
   10578:	6010      	str	r0, [r2, #0]
   1057a:	e570      	b.n	1005e <__ssvfscanf_r+0xc8a>
   1057c:	7882      	ldrb	r2, [r0, #2]
   1057e:	f044 0402 	orr.w	r4, r4, #2
   10582:	3002      	adds	r0, #2
   10584:	f7fe bfae 	b.w	f4e4 <__ssvfscanf_r+0x110>
   10588:	7882      	ldrb	r2, [r0, #2]
   1058a:	f044 0408 	orr.w	r4, r4, #8
   1058e:	3002      	adds	r0, #2
   10590:	f7fe bfa8 	b.w	f4e4 <__ssvfscanf_r+0x110>
   10594:	0763      	lsls	r3, r4, #29
   10596:	d458      	bmi.n	1064a <__ssvfscanf_r+0x1276>
   10598:	f014 0201 	ands.w	r2, r4, #1
   1059c:	f47f aa28 	bne.w	f9f0 <__ssvfscanf_r+0x61c>
   105a0:	07a6      	lsls	r6, r4, #30
   105a2:	f57f aa25 	bpl.w	f9f0 <__ssvfscanf_r+0x61c>
   105a6:	4bb3      	ldr	r3, [pc, #716]	; (10874 <__ssvfscanf_r+0x14a0>)
   105a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   105aa:	4299      	cmp	r1, r3
   105ac:	4648      	mov	r0, r9
   105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   105b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   105b2:	f000 823d 	beq.w	10a30 <__ssvfscanf_r+0x165c>
   105b6:	f001 fdd1 	bl	1215c <_strtoll_r>
   105ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   105bc:	f853 2b04 	ldr.w	r2, [r3], #4
   105c0:	633b      	str	r3, [r7, #48]	; 0x30
   105c2:	e9c2 0100 	strd	r0, r1, [r2]
   105c6:	f7ff ba18 	b.w	f9fa <__ssvfscanf_r+0x626>
   105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   105cc:	64f9      	str	r1, [r7, #76]	; 0x4c
   105ce:	f853 2b04 	ldr.w	r2, [r3], #4
   105d2:	633b      	str	r3, [r7, #48]	; 0x30
   105d4:	f882 a000 	strb.w	sl, [r2]
   105d8:	f7fe bf23 	b.w	f422 <__ssvfscanf_r+0x4e>
   105dc:	f8db 3000 	ldr.w	r3, [fp]
   105e0:	4ea5      	ldr	r6, [pc, #660]	; (10878 <__ssvfscanf_r+0x14a4>)
   105e2:	781a      	ldrb	r2, [r3, #0]
   105e4:	5cb2      	ldrb	r2, [r6, r2]
   105e6:	0712      	lsls	r2, r2, #28
   105e8:	f53e af1b 	bmi.w	f422 <__ssvfscanf_r+0x4e>
   105ec:	3301      	adds	r3, #1
   105ee:	f8cb 3000 	str.w	r3, [fp]
   105f2:	f8db 3004 	ldr.w	r3, [fp, #4]
   105f6:	f1b8 0f01 	cmp.w	r8, #1
   105fa:	f103 33ff 	add.w	r3, r3, #4294967295
   105fe:	f8cb 3004 	str.w	r3, [fp, #4]
   10602:	bf08      	it	eq
   10604:	f10a 0a01 	addeq.w	sl, sl, #1
   10608:	f43e af0b 	beq.w	f422 <__ssvfscanf_r+0x4e>
   1060c:	2401      	movs	r4, #1
   1060e:	e011      	b.n	10634 <__ssvfscanf_r+0x1260>
   10610:	f8db 3000 	ldr.w	r3, [fp]
   10614:	781a      	ldrb	r2, [r3, #0]
   10616:	5cb2      	ldrb	r2, [r6, r2]
   10618:	0715      	lsls	r5, r2, #28
   1061a:	f103 0301 	add.w	r3, r3, #1
   1061e:	d411      	bmi.n	10644 <__ssvfscanf_r+0x1270>
   10620:	f8cb 3000 	str.w	r3, [fp]
   10624:	f8db 3004 	ldr.w	r3, [fp, #4]
   10628:	3401      	adds	r4, #1
   1062a:	3b01      	subs	r3, #1
   1062c:	4544      	cmp	r4, r8
   1062e:	f8cb 3004 	str.w	r3, [fp, #4]
   10632:	d007      	beq.n	10644 <__ssvfscanf_r+0x1270>
   10634:	2b00      	cmp	r3, #0
   10636:	dceb      	bgt.n	10610 <__ssvfscanf_r+0x123c>
   10638:	4659      	mov	r1, fp
   1063a:	4648      	mov	r0, r9
   1063c:	f002 f874 	bl	12728 <__ssrefill_r>
   10640:	2800      	cmp	r0, #0
   10642:	d0e5      	beq.n	10610 <__ssvfscanf_r+0x123c>
   10644:	44a2      	add	sl, r4
   10646:	f7fe beec 	b.w	f422 <__ssvfscanf_r+0x4e>
   1064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1064c:	f853 2b04 	ldr.w	r2, [r3], #4
   10650:	633b      	str	r3, [r7, #48]	; 0x30
   10652:	8010      	strh	r0, [r2, #0]
   10654:	f7ff b9d1 	b.w	f9fa <__ssvfscanf_r+0x626>
   10658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1065a:	2b00      	cmp	r3, #0
   1065c:	f000 816e 	beq.w	1093c <__ssvfscanf_r+0x1568>
   10660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10662:	f8d3 8000 	ldr.w	r8, [r3]
   10666:	88de      	ldrh	r6, [r3, #6]
   10668:	b176      	cbz	r6, 10688 <__ssvfscanf_r+0x12b4>
   1066a:	2400      	movs	r4, #0
   1066c:	f1a8 0504 	sub.w	r5, r8, #4
   10670:	46a1      	mov	r9, r4
   10672:	f855 3f04 	ldr.w	r3, [r5, #4]!
   10676:	6818      	ldr	r0, [r3, #0]
   10678:	f7f9 fac8 	bl	9c0c <free>
   1067c:	3401      	adds	r4, #1
   1067e:	682b      	ldr	r3, [r5, #0]
   10680:	42a6      	cmp	r6, r4
   10682:	f8c3 9000 	str.w	r9, [r3]
   10686:	d1f4      	bne.n	10672 <__ssvfscanf_r+0x129e>
   10688:	f04f 33ff 	mov.w	r3, #4294967295
   1068c:	647b      	str	r3, [r7, #68]	; 0x44
   1068e:	f1b8 0f00 	cmp.w	r8, #0
   10692:	f47e af9c 	bne.w	f5ce <__ssvfscanf_r+0x1fa>
   10696:	f7fe bf9d 	b.w	f5d4 <__ssvfscanf_r+0x200>
   1069a:	4878      	ldr	r0, [pc, #480]	; (1087c <__ssvfscanf_r+0x14a8>)
   1069c:	633b      	str	r3, [r7, #48]	; 0x30
   1069e:	f7fb fde7 	bl	c270 <nanf>
   106a2:	ed84 0a00 	vstr	s0, [r4]
   106a6:	e4ad      	b.n	10004 <__ssvfscanf_r+0xc30>
   106a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   106aa:	63fc      	str	r4, [r7, #60]	; 0x3c
   106ac:	f852 5b04 	ldr.w	r5, [r2], #4
   106b0:	633a      	str	r2, [r7, #48]	; 0x30
   106b2:	64bc      	str	r4, [r7, #72]	; 0x48
   106b4:	e46c      	b.n	ff90 <__ssvfscanf_r+0xbbc>
   106b6:	b082      	sub	sp, #8
   106b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   106bc:	ab02      	add	r3, sp, #8
   106be:	643b      	str	r3, [r7, #64]	; 0x40
   106c0:	e612      	b.n	102e8 <__ssvfscanf_r+0xf14>
   106c2:	637b      	str	r3, [r7, #52]	; 0x34
   106c4:	0053      	lsls	r3, r2, #1
   106c6:	4620      	mov	r0, r4
   106c8:	4619      	mov	r1, r3
   106ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   106cc:	f7f9 fd62 	bl	a194 <realloc>
   106d0:	4604      	mov	r4, r0
   106d2:	2800      	cmp	r0, #0
   106d4:	f000 80ad 	beq.w	10832 <__ssvfscanf_r+0x145e>
   106d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   106da:	1985      	adds	r5, r0, r6
   106dc:	6018      	str	r0, [r3, #0]
   106de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106e0:	e475      	b.n	ffce <__ssvfscanf_r+0xbfa>
   106e2:	697d      	ldr	r5, [r7, #20]
   106e4:	4629      	mov	r1, r5
   106e6:	230a      	movs	r3, #10
   106e8:	3101      	adds	r1, #1
   106ea:	4648      	mov	r0, r9
   106ec:	f7fa ff2c 	bl	b548 <_strtol_r>
   106f0:	69bb      	ldr	r3, [r7, #24]
   106f2:	1ac2      	subs	r2, r0, r3
   106f4:	e59d      	b.n	10232 <__ssvfscanf_r+0xe5e>
   106f6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   106fa:	f853 1b04 	ldr.w	r1, [r3], #4
   106fe:	623a      	str	r2, [r7, #32]
   10700:	64b9      	str	r1, [r7, #72]	; 0x48
   10702:	633b      	str	r3, [r7, #48]	; 0x30
   10704:	62ba      	str	r2, [r7, #40]	; 0x28
   10706:	63fa      	str	r2, [r7, #60]	; 0x3c
   10708:	f7ff b9b2 	b.w	fa70 <__ssvfscanf_r+0x69c>
   1070c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1070e:	64bc      	str	r4, [r7, #72]	; 0x48
   10710:	f853 5b04 	ldr.w	r5, [r3], #4
   10714:	633b      	str	r3, [r7, #48]	; 0x30
   10716:	e4aa      	b.n	1006e <__ssvfscanf_r+0xc9a>
   10718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1071c:	f853 4b04 	ldr.w	r4, [r3], #4
   10720:	61ba      	str	r2, [r7, #24]
   10722:	e9c7 2207 	strd	r2, r2, [r7, #28]
   10726:	633b      	str	r3, [r7, #48]	; 0x30
   10728:	f7ff ba2a 	b.w	fb80 <__ssvfscanf_r+0x7ac>
   1072c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1072e:	6820      	ldr	r0, [r4, #0]
   10730:	f7f9 fd30 	bl	a194 <realloc>
   10734:	2800      	cmp	r0, #0
   10736:	f47f aab3 	bne.w	fca0 <__ssvfscanf_r+0x8cc>
   1073a:	e463      	b.n	10004 <__ssvfscanf_r+0xc30>
   1073c:	4659      	mov	r1, fp
   1073e:	4648      	mov	r0, r9
   10740:	637b      	str	r3, [r7, #52]	; 0x34
   10742:	f001 fff1 	bl	12728 <__ssrefill_r>
   10746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10748:	2800      	cmp	r0, #0
   1074a:	f43f ac49 	beq.w	ffe0 <__ssvfscanf_r+0xc0c>
   1074e:	e44d      	b.n	ffec <__ssvfscanf_r+0xc18>
   10750:	6818      	ldr	r0, [r3, #0]
   10752:	461c      	mov	r4, r3
   10754:	f7f9 fd1e 	bl	a194 <realloc>
   10758:	2800      	cmp	r0, #0
   1075a:	f43f accc 	beq.w	100f6 <__ssvfscanf_r+0xd22>
   1075e:	6020      	str	r0, [r4, #0]
   10760:	e4c9      	b.n	100f6 <__ssvfscanf_r+0xd22>
   10762:	2500      	movs	r5, #0
   10764:	e637      	b.n	103d6 <__ssvfscanf_r+0x1002>
   10766:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10768:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1076c:	627e      	str	r6, [r7, #36]	; 0x24
   1076e:	4644      	mov	r4, r8
   10770:	2d00      	cmp	r5, #0
   10772:	f43f aa7c 	beq.w	fc6e <__ssvfscanf_r+0x89a>
   10776:	3d01      	subs	r5, #1
   10778:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1077c:	465a      	mov	r2, fp
   1077e:	5d59      	ldrb	r1, [r3, r5]
   10780:	4648      	mov	r0, r9
   10782:	f001 ff91 	bl	126a8 <_sungetc_r>
   10786:	2d00      	cmp	r5, #0
   10788:	d1f5      	bne.n	10776 <__ssvfscanf_r+0x13a2>
   1078a:	f7ff ba70 	b.w	fc6e <__ssvfscanf_r+0x89a>
   1078e:	4659      	mov	r1, fp
   10790:	4648      	mov	r0, r9
   10792:	f001 ffc9 	bl	12728 <__ssrefill_r>
   10796:	2800      	cmp	r0, #0
   10798:	f43f ae22 	beq.w	103e0 <__ssvfscanf_r+0x100c>
   1079c:	627c      	str	r4, [r7, #36]	; 0x24
   1079e:	2d00      	cmp	r5, #0
   107a0:	f47e af04 	bne.w	f5ac <__ssvfscanf_r+0x1d8>
   107a4:	e628      	b.n	103f8 <__ssvfscanf_r+0x1024>
   107a6:	627c      	str	r4, [r7, #36]	; 0x24
   107a8:	2d00      	cmp	r5, #0
   107aa:	f43f ae25 	beq.w	103f8 <__ssvfscanf_r+0x1024>
   107ae:	3d01      	subs	r5, #1
   107b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   107b4:	465a      	mov	r2, fp
   107b6:	5d59      	ldrb	r1, [r3, r5]
   107b8:	4648      	mov	r0, r9
   107ba:	f001 ff75 	bl	126a8 <_sungetc_r>
   107be:	2d00      	cmp	r5, #0
   107c0:	d1f5      	bne.n	107ae <__ssvfscanf_r+0x13da>
   107c2:	e619      	b.n	103f8 <__ssvfscanf_r+0x1024>
   107c4:	07e5      	lsls	r5, r4, #31
   107c6:	d43c      	bmi.n	10842 <__ssvfscanf_r+0x146e>
   107c8:	07a4      	lsls	r4, r4, #30
   107ca:	d53a      	bpl.n	10842 <__ssvfscanf_r+0x146e>
   107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   107ce:	64f9      	str	r1, [r7, #76]	; 0x4c
   107d0:	f853 2b04 	ldr.w	r2, [r3], #4
   107d4:	633b      	str	r3, [r7, #48]	; 0x30
   107d6:	ea4f 73ea 	mov.w	r3, sl, asr #31
   107da:	f8c2 a000 	str.w	sl, [r2]
   107de:	6053      	str	r3, [r2, #4]
   107e0:	f7fe be1f 	b.w	f422 <__ssvfscanf_r+0x4e>
   107e4:	ee18 9a10 	vmov	r9, s16
   107e8:	461e      	mov	r6, r3
   107ea:	f7ff b814 	b.w	f816 <__ssvfscanf_r+0x442>
   107ee:	2301      	movs	r3, #1
   107f0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   107f4:	64bb      	str	r3, [r7, #72]	; 0x48
   107f6:	f7fe bff6 	b.w	f7e6 <__ssvfscanf_r+0x412>
   107fa:	f1b8 0f01 	cmp.w	r8, #1
   107fe:	bf38      	it	cc
   10800:	f04f 0801 	movcc.w	r8, #1
   10804:	f014 0301 	ands.w	r3, r4, #1
   10808:	d13a      	bne.n	10880 <__ssvfscanf_r+0x14ac>
   1080a:	06e5      	lsls	r5, r4, #27
   1080c:	f100 8136 	bmi.w	10a7c <__ssvfscanf_r+0x16a8>
   10810:	0624      	lsls	r4, r4, #24
   10812:	f140 814c 	bpl.w	10aae <__ssvfscanf_r+0x16da>
   10816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10818:	f853 5b04 	ldr.w	r5, [r3], #4
   1081c:	64bb      	str	r3, [r7, #72]	; 0x48
   1081e:	2d00      	cmp	r5, #0
   10820:	f43e aecd 	beq.w	f5be <__ssvfscanf_r+0x1ea>
   10824:	4640      	mov	r0, r8
   10826:	f7f9 f9e9 	bl	9bfc <malloc>
   1082a:	4603      	mov	r3, r0
   1082c:	2800      	cmp	r0, #0
   1082e:	f040 80dc 	bne.w	109ea <__ssvfscanf_r+0x1616>
   10832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10834:	2b00      	cmp	r3, #0
   10836:	f000 8081 	beq.w	1093c <__ssvfscanf_r+0x1568>
   1083a:	f8d3 8000 	ldr.w	r8, [r3]
   1083e:	88de      	ldrh	r6, [r3, #6]
   10840:	e712      	b.n	10668 <__ssvfscanf_r+0x1294>
   10842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10844:	64f9      	str	r1, [r7, #76]	; 0x4c
   10846:	f853 2b04 	ldr.w	r2, [r3], #4
   1084a:	f8c2 a000 	str.w	sl, [r2]
   1084e:	633b      	str	r3, [r7, #48]	; 0x30
   10850:	f7fe bde7 	b.w	f422 <__ssvfscanf_r+0x4e>
   10854:	462b      	mov	r3, r5
   10856:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10858:	42ab      	cmp	r3, r5
   1085a:	f67e aeb0 	bls.w	f5be <__ssvfscanf_r+0x1ea>
   1085e:	461c      	mov	r4, r3
   10860:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10864:	465a      	mov	r2, fp
   10866:	4648      	mov	r0, r9
   10868:	f001 ff1e 	bl	126a8 <_sungetc_r>
   1086c:	42ac      	cmp	r4, r5
   1086e:	d1f7      	bne.n	10860 <__ssvfscanf_r+0x148c>
   10870:	f7fe bea5 	b.w	f5be <__ssvfscanf_r+0x1ea>
   10874:	00011fed 	.word	0x00011fed
   10878:	20000aa5 	.word	0x20000aa5
   1087c:	20008028 	.word	0x20008028
   10880:	f014 0310 	ands.w	r3, r4, #16
   10884:	637b      	str	r3, [r7, #52]	; 0x34
   10886:	d05e      	beq.n	10946 <__ssvfscanf_r+0x1572>
   10888:	2500      	movs	r5, #0
   1088a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1088c:	64bd      	str	r5, [r7, #72]	; 0x48
   1088e:	462e      	mov	r6, r5
   10890:	2400      	movs	r4, #0
   10892:	464b      	mov	r3, r9
   10894:	46c1      	mov	r9, r8
   10896:	46a8      	mov	r8, r5
   10898:	4625      	mov	r5, r4
   1089a:	461c      	mov	r4, r3
   1089c:	f7fb f9b0 	bl	bc00 <__locale_mb_cur_max>
   108a0:	42a8      	cmp	r0, r5
   108a2:	f43e ae83 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
   108a6:	e9db 3200 	ldrd	r3, r2, [fp]
   108aa:	f813 1b01 	ldrb.w	r1, [r3], #1
   108ae:	3a01      	subs	r2, #1
   108b0:	e9cb 3200 	strd	r3, r2, [fp]
   108b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108b6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   108ba:	2a03      	cmp	r2, #3
   108bc:	5541      	strb	r1, [r0, r5]
   108be:	f105 0301 	add.w	r3, r5, #1
   108c2:	f107 0568 	add.w	r5, r7, #104	; 0x68
   108c6:	d102      	bne.n	108ce <__ssvfscanf_r+0x14fa>
   108c8:	682a      	ldr	r2, [r5, #0]
   108ca:	2a04      	cmp	r2, #4
   108cc:	d006      	beq.n	108dc <__ssvfscanf_r+0x1508>
   108ce:	2208      	movs	r2, #8
   108d0:	2100      	movs	r1, #0
   108d2:	4628      	mov	r0, r5
   108d4:	62bb      	str	r3, [r7, #40]	; 0x28
   108d6:	f7fb f8c9 	bl	ba6c <memset>
   108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108dc:	9500      	str	r5, [sp, #0]
   108de:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   108e2:	4631      	mov	r1, r6
   108e4:	4620      	mov	r0, r4
   108e6:	62bb      	str	r3, [r7, #40]	; 0x28
   108e8:	f001 fd0a 	bl	12300 <_mbrtowc_r>
   108ec:	1c43      	adds	r3, r0, #1
   108ee:	6278      	str	r0, [r7, #36]	; 0x24
   108f0:	f43e ae5c 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
   108f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108f6:	2800      	cmp	r0, #0
   108f8:	f040 8147 	bne.w	10b8a <__ssvfscanf_r+0x17b6>
   108fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   108fe:	b902      	cbnz	r2, 10902 <__ssvfscanf_r+0x152e>
   10900:	6032      	str	r2, [r6, #0]
   10902:	449a      	add	sl, r3
   10904:	f109 39ff 	add.w	r9, r9, #4294967295
   10908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1090a:	2b00      	cmp	r3, #0
   1090c:	f040 8175 	bne.w	10bfa <__ssvfscanf_r+0x1826>
   10910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10912:	2b00      	cmp	r3, #0
   10914:	f000 8170 	beq.w	10bf8 <__ssvfscanf_r+0x1824>
   10918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1091a:	1af5      	subs	r5, r6, r3
   1091c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   10920:	f200 816a 	bhi.w	10bf8 <__ssvfscanf_r+0x1824>
   10924:	4618      	mov	r0, r3
   10926:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1092a:	f7f9 fc33 	bl	a194 <realloc>
   1092e:	63f8      	str	r0, [r7, #60]	; 0x3c
   10930:	2800      	cmp	r0, #0
   10932:	f040 815c 	bne.w	10bee <__ssvfscanf_r+0x181a>
   10936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10938:	2b00      	cmp	r3, #0
   1093a:	d12d      	bne.n	10998 <__ssvfscanf_r+0x15c4>
   1093c:	f04f 33ff 	mov.w	r3, #4294967295
   10940:	647b      	str	r3, [r7, #68]	; 0x44
   10942:	f7fe be47 	b.w	f5d4 <__ssvfscanf_r+0x200>
   10946:	0622      	lsls	r2, r4, #24
   10948:	f140 808f 	bpl.w	10a6a <__ssvfscanf_r+0x1696>
   1094c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1094e:	f854 3b04 	ldr.w	r3, [r4], #4
   10952:	64bb      	str	r3, [r7, #72]	; 0x48
   10954:	2b00      	cmp	r3, #0
   10956:	f43e ae32 	beq.w	f5be <__ssvfscanf_r+0x1ea>
   1095a:	2080      	movs	r0, #128	; 0x80
   1095c:	f7f9 f94e 	bl	9bfc <malloc>
   10960:	4606      	mov	r6, r0
   10962:	2800      	cmp	r0, #0
   10964:	d0e7      	beq.n	10936 <__ssvfscanf_r+0x1562>
   10966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10968:	6018      	str	r0, [r3, #0]
   1096a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1096c:	88dd      	ldrh	r5, [r3, #6]
   1096e:	889a      	ldrh	r2, [r3, #4]
   10970:	4295      	cmp	r5, r2
   10972:	f0c0 80b3 	bcc.w	10adc <__ssvfscanf_r+0x1708>
   10976:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1097a:	428a      	cmp	r2, r1
   1097c:	d856      	bhi.n	10a2c <__ssvfscanf_r+0x1658>
   1097e:	3208      	adds	r2, #8
   10980:	b293      	uxth	r3, r2
   10982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10984:	63fb      	str	r3, [r7, #60]	; 0x3c
   10986:	0099      	lsls	r1, r3, #2
   10988:	6810      	ldr	r0, [r2, #0]
   1098a:	f7f9 fc03 	bl	a194 <realloc>
   1098e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10990:	2800      	cmp	r0, #0
   10992:	f040 80ae 	bne.w	10af2 <__ssvfscanf_r+0x171e>
   10996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10998:	88db      	ldrh	r3, [r3, #6]
   1099a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1099c:	461e      	mov	r6, r3
   1099e:	f8d2 8000 	ldr.w	r8, [r2]
   109a2:	e661      	b.n	10668 <__ssvfscanf_r+0x1294>
   109a4:	462b      	mov	r3, r5
   109a6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   109a8:	42ab      	cmp	r3, r5
   109aa:	f67e ae08 	bls.w	f5be <__ssvfscanf_r+0x1ea>
   109ae:	461c      	mov	r4, r3
   109b0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   109b4:	465a      	mov	r2, fp
   109b6:	4648      	mov	r0, r9
   109b8:	f001 fe76 	bl	126a8 <_sungetc_r>
   109bc:	42ac      	cmp	r4, r5
   109be:	d1f7      	bne.n	109b0 <__ssvfscanf_r+0x15dc>
   109c0:	f7fe bdfd 	b.w	f5be <__ssvfscanf_r+0x1ea>
   109c4:	4610      	mov	r0, r2
   109c6:	00d9      	lsls	r1, r3, #3
   109c8:	461e      	mov	r6, r3
   109ca:	f7f9 fbe3 	bl	a194 <realloc>
   109ce:	62b8      	str	r0, [r7, #40]	; 0x28
   109d0:	2800      	cmp	r0, #0
   109d2:	d0b0      	beq.n	10936 <__ssvfscanf_r+0x1562>
   109d4:	1942      	adds	r2, r0, r5
   109d6:	64ba      	str	r2, [r7, #72]	; 0x48
   109d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   109da:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   109dc:	6010      	str	r0, [r2, #0]
   109de:	0073      	lsls	r3, r6, #1
   109e0:	623b      	str	r3, [r7, #32]
   109e2:	e4f8      	b.n	103d6 <__ssvfscanf_r+0x1002>
   109e4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   109e8:	e63e      	b.n	10668 <__ssvfscanf_r+0x1294>
   109ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
   109ec:	6028      	str	r0, [r5, #0]
   109ee:	88ce      	ldrh	r6, [r1, #6]
   109f0:	888a      	ldrh	r2, [r1, #4]
   109f2:	4296      	cmp	r6, r2
   109f4:	f0c0 808e 	bcc.w	10b14 <__ssvfscanf_r+0x1740>
   109f8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   109fc:	428a      	cmp	r2, r1
   109fe:	6338      	str	r0, [r7, #48]	; 0x30
   10a00:	f240 80a5 	bls.w	10b4e <__ssvfscanf_r+0x177a>
   10a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a06:	f8d3 8000 	ldr.w	r8, [r3]
   10a0a:	e62d      	b.n	10668 <__ssvfscanf_r+0x1294>
   10a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10a0e:	4295      	cmp	r5, r2
   10a10:	f67e add5 	bls.w	f5be <__ssvfscanf_r+0x1ea>
   10a14:	462c      	mov	r4, r5
   10a16:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10a18:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10a1c:	465a      	mov	r2, fp
   10a1e:	4648      	mov	r0, r9
   10a20:	f001 fe42 	bl	126a8 <_sungetc_r>
   10a24:	42ac      	cmp	r4, r5
   10a26:	d1f7      	bne.n	10a18 <__ssvfscanf_r+0x1644>
   10a28:	f7fe bdc9 	b.w	f5be <__ssvfscanf_r+0x1ea>
   10a2c:	462b      	mov	r3, r5
   10a2e:	e7b4      	b.n	1099a <__ssvfscanf_r+0x15c6>
   10a30:	f001 fc64 	bl	122fc <_strtoull_r>
   10a34:	e5c1      	b.n	105ba <__ssvfscanf_r+0x11e6>
   10a36:	f8d8 3000 	ldr.w	r3, [r8]
   10a3a:	461d      	mov	r5, r3
   10a3c:	3301      	adds	r3, #1
   10a3e:	f47f a8d5 	bne.w	fbec <__ssvfscanf_r+0x818>
   10a42:	462a      	mov	r2, r5
   10a44:	f7ff b8e8 	b.w	fc18 <__ssvfscanf_r+0x844>
   10a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a4a:	6818      	ldr	r0, [r3, #0]
   10a4c:	f001 fcb4 	bl	123b8 <iswspace>
   10a50:	2800      	cmp	r0, #0
   10a52:	f47f aea8 	bne.w	107a6 <__ssvfscanf_r+0x13d2>
   10a56:	2c03      	cmp	r4, #3
   10a58:	44aa      	add	sl, r5
   10a5a:	f47f a849 	bne.w	faf0 <__ssvfscanf_r+0x71c>
   10a5e:	6833      	ldr	r3, [r6, #0]
   10a60:	2b04      	cmp	r3, #4
   10a62:	f47f a845 	bne.w	faf0 <__ssvfscanf_r+0x71c>
   10a66:	f7ff b845 	b.w	faf4 <__ssvfscanf_r+0x720>
   10a6a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   10a6e:	f853 6b04 	ldr.w	r6, [r3], #4
   10a72:	633b      	str	r3, [r7, #48]	; 0x30
   10a74:	4615      	mov	r5, r2
   10a76:	63fa      	str	r2, [r7, #60]	; 0x3c
   10a78:	64ba      	str	r2, [r7, #72]	; 0x48
   10a7a:	e709      	b.n	10890 <__ssvfscanf_r+0x14bc>
   10a7c:	461c      	mov	r4, r3
   10a7e:	f8db 3004 	ldr.w	r3, [fp, #4]
   10a82:	4598      	cmp	r8, r3
   10a84:	dd39      	ble.n	10afa <__ssvfscanf_r+0x1726>
   10a86:	f8db 2000 	ldr.w	r2, [fp]
   10a8a:	441a      	add	r2, r3
   10a8c:	f8cb 2000 	str.w	r2, [fp]
   10a90:	4659      	mov	r1, fp
   10a92:	4648      	mov	r0, r9
   10a94:	441c      	add	r4, r3
   10a96:	eba8 0803 	sub.w	r8, r8, r3
   10a9a:	f001 fe45 	bl	12728 <__ssrefill_r>
   10a9e:	2800      	cmp	r0, #0
   10aa0:	d0ed      	beq.n	10a7e <__ssvfscanf_r+0x16aa>
   10aa2:	2c00      	cmp	r4, #0
   10aa4:	f43e ad82 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
   10aa8:	44a2      	add	sl, r4
   10aaa:	f7fe bcba 	b.w	f422 <__ssvfscanf_r+0x4e>
   10aae:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   10ab0:	4643      	mov	r3, r8
   10ab2:	6829      	ldr	r1, [r5, #0]
   10ab4:	f8cd b000 	str.w	fp, [sp]
   10ab8:	2201      	movs	r2, #1
   10aba:	4648      	mov	r0, r9
   10abc:	f001 fe52 	bl	12764 <_sfread_r>
   10ac0:	4604      	mov	r4, r0
   10ac2:	2800      	cmp	r0, #0
   10ac4:	f43e ad72 	beq.w	f5ac <__ssvfscanf_r+0x1d8>
   10ac8:	3504      	adds	r5, #4
   10aca:	64bd      	str	r5, [r7, #72]	; 0x48
   10acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10ace:	3301      	adds	r3, #1
   10ad0:	647b      	str	r3, [r7, #68]	; 0x44
   10ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10ad4:	633b      	str	r3, [r7, #48]	; 0x30
   10ad6:	44a2      	add	sl, r4
   10ad8:	f7fe bca3 	b.w	f422 <__ssvfscanf_r+0x4e>
   10adc:	6818      	ldr	r0, [r3, #0]
   10ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10ae0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10ae6:	633c      	str	r4, [r7, #48]	; 0x30
   10ae8:	3501      	adds	r5, #1
   10aea:	80dd      	strh	r5, [r3, #6]
   10aec:	63fe      	str	r6, [r7, #60]	; 0x3c
   10aee:	2520      	movs	r5, #32
   10af0:	e6ce      	b.n	10890 <__ssvfscanf_r+0x14bc>
   10af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10af4:	8093      	strh	r3, [r2, #4]
   10af6:	6010      	str	r0, [r2, #0]
   10af8:	e7f1      	b.n	10ade <__ssvfscanf_r+0x170a>
   10afa:	eba3 0308 	sub.w	r3, r3, r8
   10afe:	f8cb 3004 	str.w	r3, [fp, #4]
   10b02:	f8db 3000 	ldr.w	r3, [fp]
   10b06:	4444      	add	r4, r8
   10b08:	4443      	add	r3, r8
   10b0a:	f8cb 3000 	str.w	r3, [fp]
   10b0e:	44a2      	add	sl, r4
   10b10:	f7fe bc87 	b.w	f422 <__ssvfscanf_r+0x4e>
   10b14:	680a      	ldr	r2, [r1, #0]
   10b16:	63fa      	str	r2, [r7, #60]	; 0x3c
   10b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10b1a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   10b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10b20:	3601      	adds	r6, #1
   10b22:	b2b6      	uxth	r6, r6
   10b24:	80d6      	strh	r6, [r2, #6]
   10b26:	4619      	mov	r1, r3
   10b28:	f8cd b000 	str.w	fp, [sp]
   10b2c:	4643      	mov	r3, r8
   10b2e:	2201      	movs	r2, #1
   10b30:	4648      	mov	r0, r9
   10b32:	f001 fe17 	bl	12764 <_sfread_r>
   10b36:	4604      	mov	r4, r0
   10b38:	b1d8      	cbz	r0, 10b72 <__ssvfscanf_r+0x179e>
   10b3a:	4580      	cmp	r8, r0
   10b3c:	d9c6      	bls.n	10acc <__ssvfscanf_r+0x16f8>
   10b3e:	6828      	ldr	r0, [r5, #0]
   10b40:	4621      	mov	r1, r4
   10b42:	f7f9 fb27 	bl	a194 <realloc>
   10b46:	2800      	cmp	r0, #0
   10b48:	d0c0      	beq.n	10acc <__ssvfscanf_r+0x16f8>
   10b4a:	6028      	str	r0, [r5, #0]
   10b4c:	e7be      	b.n	10acc <__ssvfscanf_r+0x16f8>
   10b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b50:	3208      	adds	r2, #8
   10b52:	b294      	uxth	r4, r2
   10b54:	681a      	ldr	r2, [r3, #0]
   10b56:	637a      	str	r2, [r7, #52]	; 0x34
   10b58:	4610      	mov	r0, r2
   10b5a:	00a1      	lsls	r1, r4, #2
   10b5c:	f7f9 fb1a 	bl	a194 <realloc>
   10b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10b62:	63f8      	str	r0, [r7, #60]	; 0x3c
   10b64:	2800      	cmp	r0, #0
   10b66:	d05b      	beq.n	10c20 <__ssvfscanf_r+0x184c>
   10b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b6a:	809c      	strh	r4, [r3, #4]
   10b6c:	6018      	str	r0, [r3, #0]
   10b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10b70:	e7d2      	b.n	10b18 <__ssvfscanf_r+0x1744>
   10b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10b74:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10b78:	2b00      	cmp	r3, #0
   10b7a:	f43f ad75 	beq.w	10668 <__ssvfscanf_r+0x1294>
   10b7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10b82:	065b      	lsls	r3, r3, #25
   10b84:	f57e ad1d 	bpl.w	f5c2 <__ssvfscanf_r+0x1ee>
   10b88:	e56a      	b.n	10660 <__ssvfscanf_r+0x128c>
   10b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b8c:	3202      	adds	r2, #2
   10b8e:	d11d      	bne.n	10bcc <__ssvfscanf_r+0x17f8>
   10b90:	f8db 2004 	ldr.w	r2, [fp, #4]
   10b94:	2a00      	cmp	r2, #0
   10b96:	461d      	mov	r5, r3
   10b98:	f73f ae80 	bgt.w	1089c <__ssvfscanf_r+0x14c8>
   10b9c:	4659      	mov	r1, fp
   10b9e:	4620      	mov	r0, r4
   10ba0:	f001 fdc2 	bl	12728 <__ssrefill_r>
   10ba4:	b9e0      	cbnz	r0, 10be0 <__ssvfscanf_r+0x180c>
   10ba6:	f1b9 0f00 	cmp.w	r9, #0
   10baa:	f47f ae77 	bne.w	1089c <__ssvfscanf_r+0x14c8>
   10bae:	4645      	mov	r5, r8
   10bb0:	46a1      	mov	r9, r4
   10bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10bb4:	b123      	cbz	r3, 10bc0 <__ssvfscanf_r+0x17ec>
   10bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bb8:	1af1      	subs	r1, r6, r3
   10bba:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   10bbe:	d827      	bhi.n	10c10 <__ssvfscanf_r+0x183c>
   10bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	f47e ac2d 	bne.w	f422 <__ssvfscanf_r+0x4e>
   10bc8:	f7ff ba1c 	b.w	10004 <__ssvfscanf_r+0xc30>
   10bcc:	449a      	add	sl, r3
   10bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10bd0:	2b03      	cmp	r3, #3
   10bd2:	f47f ae97 	bne.w	10904 <__ssvfscanf_r+0x1530>
   10bd6:	682b      	ldr	r3, [r5, #0]
   10bd8:	2b04      	cmp	r3, #4
   10bda:	f47f ae93 	bne.w	10904 <__ssvfscanf_r+0x1530>
   10bde:	e693      	b.n	10908 <__ssvfscanf_r+0x1534>
   10be0:	46a1      	mov	r9, r4
   10be2:	462c      	mov	r4, r5
   10be4:	4645      	mov	r5, r8
   10be6:	2c00      	cmp	r4, #0
   10be8:	d0e3      	beq.n	10bb2 <__ssvfscanf_r+0x17de>
   10bea:	f7fe bcdf 	b.w	f5ac <__ssvfscanf_r+0x1d8>
   10bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10bf0:	1946      	adds	r6, r0, r5
   10bf2:	6010      	str	r0, [r2, #0]
   10bf4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10bf8:	3604      	adds	r6, #4
   10bfa:	f8db 3004 	ldr.w	r3, [fp, #4]
   10bfe:	2b00      	cmp	r3, #0
   10c00:	f04f 0500 	mov.w	r5, #0
   10c04:	ddca      	ble.n	10b9c <__ssvfscanf_r+0x17c8>
   10c06:	f1b9 0f00 	cmp.w	r9, #0
   10c0a:	f47f ae47 	bne.w	1089c <__ssvfscanf_r+0x14c8>
   10c0e:	e7ce      	b.n	10bae <__ssvfscanf_r+0x17da>
   10c10:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   10c12:	6820      	ldr	r0, [r4, #0]
   10c14:	f7f9 fabe 	bl	a194 <realloc>
   10c18:	2800      	cmp	r0, #0
   10c1a:	d0d1      	beq.n	10bc0 <__ssvfscanf_r+0x17ec>
   10c1c:	6020      	str	r0, [r4, #0]
   10c1e:	e7cf      	b.n	10bc0 <__ssvfscanf_r+0x17ec>
   10c20:	4690      	mov	r8, r2
   10c22:	e521      	b.n	10668 <__ssvfscanf_r+0x1294>

00010c24 <_fclose_r>:
   10c24:	b570      	push	{r4, r5, r6, lr}
   10c26:	2900      	cmp	r1, #0
   10c28:	d04b      	beq.n	10cc2 <_fclose_r+0x9e>
   10c2a:	4606      	mov	r6, r0
   10c2c:	460c      	mov	r4, r1
   10c2e:	b110      	cbz	r0, 10c36 <_fclose_r+0x12>
   10c30:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10c32:	2b00      	cmp	r3, #0
   10c34:	d048      	beq.n	10cc8 <_fclose_r+0xa4>
   10c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c38:	07d8      	lsls	r0, r3, #31
   10c3a:	d534      	bpl.n	10ca6 <_fclose_r+0x82>
   10c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10c40:	2b00      	cmp	r3, #0
   10c42:	d03e      	beq.n	10cc2 <_fclose_r+0x9e>
   10c44:	4621      	mov	r1, r4
   10c46:	4630      	mov	r0, r6
   10c48:	f000 f850 	bl	10cec <__sflush_r>
   10c4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10c4e:	4605      	mov	r5, r0
   10c50:	b133      	cbz	r3, 10c60 <_fclose_r+0x3c>
   10c52:	69e1      	ldr	r1, [r4, #28]
   10c54:	4630      	mov	r0, r6
   10c56:	4798      	blx	r3
   10c58:	2800      	cmp	r0, #0
   10c5a:	bfb8      	it	lt
   10c5c:	f04f 35ff 	movlt.w	r5, #4294967295
   10c60:	89a3      	ldrh	r3, [r4, #12]
   10c62:	061a      	lsls	r2, r3, #24
   10c64:	d43c      	bmi.n	10ce0 <_fclose_r+0xbc>
   10c66:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10c68:	b141      	cbz	r1, 10c7c <_fclose_r+0x58>
   10c6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10c6e:	4299      	cmp	r1, r3
   10c70:	d002      	beq.n	10c78 <_fclose_r+0x54>
   10c72:	4630      	mov	r0, r6
   10c74:	f7fb fb96 	bl	c3a4 <_free_r>
   10c78:	2300      	movs	r3, #0
   10c7a:	6323      	str	r3, [r4, #48]	; 0x30
   10c7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10c7e:	b121      	cbz	r1, 10c8a <_fclose_r+0x66>
   10c80:	4630      	mov	r0, r6
   10c82:	f7fb fb8f 	bl	c3a4 <_free_r>
   10c86:	2300      	movs	r3, #0
   10c88:	6463      	str	r3, [r4, #68]	; 0x44
   10c8a:	f7fa fd19 	bl	b6c0 <__sfp_lock_acquire>
   10c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c90:	2200      	movs	r2, #0
   10c92:	07db      	lsls	r3, r3, #31
   10c94:	81a2      	strh	r2, [r4, #12]
   10c96:	d51f      	bpl.n	10cd8 <_fclose_r+0xb4>
   10c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c9a:	f7fb f849 	bl	bd30 <__retarget_lock_close_recursive>
   10c9e:	f7fa fd15 	bl	b6cc <__sfp_lock_release>
   10ca2:	4628      	mov	r0, r5
   10ca4:	bd70      	pop	{r4, r5, r6, pc}
   10ca6:	89a3      	ldrh	r3, [r4, #12]
   10ca8:	0599      	lsls	r1, r3, #22
   10caa:	d4cb      	bmi.n	10c44 <_fclose_r+0x20>
   10cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10cae:	f7fb f841 	bl	bd34 <__retarget_lock_acquire_recursive>
   10cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cb6:	2b00      	cmp	r3, #0
   10cb8:	d1c4      	bne.n	10c44 <_fclose_r+0x20>
   10cba:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10cbc:	f015 0501 	ands.w	r5, r5, #1
   10cc0:	d005      	beq.n	10cce <_fclose_r+0xaa>
   10cc2:	2500      	movs	r5, #0
   10cc4:	4628      	mov	r0, r5
   10cc6:	bd70      	pop	{r4, r5, r6, pc}
   10cc8:	f7fa fcdc 	bl	b684 <__sinit>
   10ccc:	e7b3      	b.n	10c36 <_fclose_r+0x12>
   10cce:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10cd0:	f7fb f832 	bl	bd38 <__retarget_lock_release_recursive>
   10cd4:	4628      	mov	r0, r5
   10cd6:	bd70      	pop	{r4, r5, r6, pc}
   10cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10cda:	f7fb f82d 	bl	bd38 <__retarget_lock_release_recursive>
   10cde:	e7db      	b.n	10c98 <_fclose_r+0x74>
   10ce0:	6921      	ldr	r1, [r4, #16]
   10ce2:	4630      	mov	r0, r6
   10ce4:	f7fb fb5e 	bl	c3a4 <_free_r>
   10ce8:	e7bd      	b.n	10c66 <_fclose_r+0x42>
   10cea:	bf00      	nop

00010cec <__sflush_r>:
   10cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cf4:	460c      	mov	r4, r1
   10cf6:	0711      	lsls	r1, r2, #28
   10cf8:	4680      	mov	r8, r0
   10cfa:	d447      	bmi.n	10d8c <__sflush_r+0xa0>
   10cfc:	6863      	ldr	r3, [r4, #4]
   10cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10d02:	2b00      	cmp	r3, #0
   10d04:	81a2      	strh	r2, [r4, #12]
   10d06:	dd5e      	ble.n	10dc6 <__sflush_r+0xda>
   10d08:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10d0a:	2d00      	cmp	r5, #0
   10d0c:	d058      	beq.n	10dc0 <__sflush_r+0xd4>
   10d0e:	2300      	movs	r3, #0
   10d10:	f8d8 6000 	ldr.w	r6, [r8]
   10d14:	f8c8 3000 	str.w	r3, [r8]
   10d18:	b293      	uxth	r3, r2
   10d1a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10d1e:	d156      	bne.n	10dce <__sflush_r+0xe2>
   10d20:	2301      	movs	r3, #1
   10d22:	69e1      	ldr	r1, [r4, #28]
   10d24:	4640      	mov	r0, r8
   10d26:	47a8      	blx	r5
   10d28:	1c43      	adds	r3, r0, #1
   10d2a:	d067      	beq.n	10dfc <__sflush_r+0x110>
   10d2c:	89a3      	ldrh	r3, [r4, #12]
   10d2e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10d30:	075f      	lsls	r7, r3, #29
   10d32:	d505      	bpl.n	10d40 <__sflush_r+0x54>
   10d34:	6863      	ldr	r3, [r4, #4]
   10d36:	1ac0      	subs	r0, r0, r3
   10d38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10d3a:	b10b      	cbz	r3, 10d40 <__sflush_r+0x54>
   10d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10d3e:	1ac0      	subs	r0, r0, r3
   10d40:	69e1      	ldr	r1, [r4, #28]
   10d42:	4602      	mov	r2, r0
   10d44:	2300      	movs	r3, #0
   10d46:	4640      	mov	r0, r8
   10d48:	47a8      	blx	r5
   10d4a:	1c41      	adds	r1, r0, #1
   10d4c:	d141      	bne.n	10dd2 <__sflush_r+0xe6>
   10d4e:	f8d8 3000 	ldr.w	r3, [r8]
   10d52:	2b00      	cmp	r3, #0
   10d54:	d03d      	beq.n	10dd2 <__sflush_r+0xe6>
   10d56:	2b1d      	cmp	r3, #29
   10d58:	d001      	beq.n	10d5e <__sflush_r+0x72>
   10d5a:	2b16      	cmp	r3, #22
   10d5c:	d156      	bne.n	10e0c <__sflush_r+0x120>
   10d5e:	89a3      	ldrh	r3, [r4, #12]
   10d60:	6922      	ldr	r2, [r4, #16]
   10d62:	6022      	str	r2, [r4, #0]
   10d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10d68:	2100      	movs	r1, #0
   10d6a:	6061      	str	r1, [r4, #4]
   10d6c:	81a3      	strh	r3, [r4, #12]
   10d6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10d70:	f8c8 6000 	str.w	r6, [r8]
   10d74:	b321      	cbz	r1, 10dc0 <__sflush_r+0xd4>
   10d76:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10d7a:	4299      	cmp	r1, r3
   10d7c:	d002      	beq.n	10d84 <__sflush_r+0x98>
   10d7e:	4640      	mov	r0, r8
   10d80:	f7fb fb10 	bl	c3a4 <_free_r>
   10d84:	2000      	movs	r0, #0
   10d86:	6320      	str	r0, [r4, #48]	; 0x30
   10d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d8c:	6926      	ldr	r6, [r4, #16]
   10d8e:	b1be      	cbz	r6, 10dc0 <__sflush_r+0xd4>
   10d90:	b293      	uxth	r3, r2
   10d92:	6825      	ldr	r5, [r4, #0]
   10d94:	6026      	str	r6, [r4, #0]
   10d96:	079a      	lsls	r2, r3, #30
   10d98:	bf0c      	ite	eq
   10d9a:	6963      	ldreq	r3, [r4, #20]
   10d9c:	2300      	movne	r3, #0
   10d9e:	1bad      	subs	r5, r5, r6
   10da0:	60a3      	str	r3, [r4, #8]
   10da2:	e00b      	b.n	10dbc <__sflush_r+0xd0>
   10da4:	462b      	mov	r3, r5
   10da6:	4632      	mov	r2, r6
   10da8:	69e1      	ldr	r1, [r4, #28]
   10daa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10dac:	4640      	mov	r0, r8
   10dae:	47b8      	blx	r7
   10db0:	f1b0 0c00 	subs.w	ip, r0, #0
   10db4:	eba5 050c 	sub.w	r5, r5, ip
   10db8:	4466      	add	r6, ip
   10dba:	dd17      	ble.n	10dec <__sflush_r+0x100>
   10dbc:	2d00      	cmp	r5, #0
   10dbe:	dcf1      	bgt.n	10da4 <__sflush_r+0xb8>
   10dc0:	2000      	movs	r0, #0
   10dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10dc8:	2b00      	cmp	r3, #0
   10dca:	dc9d      	bgt.n	10d08 <__sflush_r+0x1c>
   10dcc:	e7f8      	b.n	10dc0 <__sflush_r+0xd4>
   10dce:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10dd0:	e7ae      	b.n	10d30 <__sflush_r+0x44>
   10dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10dd6:	6922      	ldr	r2, [r4, #16]
   10dd8:	6022      	str	r2, [r4, #0]
   10dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10dde:	81a3      	strh	r3, [r4, #12]
   10de0:	2200      	movs	r2, #0
   10de2:	04db      	lsls	r3, r3, #19
   10de4:	6062      	str	r2, [r4, #4]
   10de6:	d5c2      	bpl.n	10d6e <__sflush_r+0x82>
   10de8:	6520      	str	r0, [r4, #80]	; 0x50
   10dea:	e7c0      	b.n	10d6e <__sflush_r+0x82>
   10dec:	89a3      	ldrh	r3, [r4, #12]
   10dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10df2:	f04f 30ff 	mov.w	r0, #4294967295
   10df6:	81a3      	strh	r3, [r4, #12]
   10df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dfc:	f8d8 3000 	ldr.w	r3, [r8]
   10e00:	2b00      	cmp	r3, #0
   10e02:	d093      	beq.n	10d2c <__sflush_r+0x40>
   10e04:	2b1d      	cmp	r3, #29
   10e06:	d006      	beq.n	10e16 <__sflush_r+0x12a>
   10e08:	2b16      	cmp	r3, #22
   10e0a:	d004      	beq.n	10e16 <__sflush_r+0x12a>
   10e0c:	89a3      	ldrh	r3, [r4, #12]
   10e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e12:	81a3      	strh	r3, [r4, #12]
   10e14:	e7d5      	b.n	10dc2 <__sflush_r+0xd6>
   10e16:	f8c8 6000 	str.w	r6, [r8]
   10e1a:	e7d1      	b.n	10dc0 <__sflush_r+0xd4>

00010e1c <_fflush_r>:
   10e1c:	b538      	push	{r3, r4, r5, lr}
   10e1e:	460c      	mov	r4, r1
   10e20:	4605      	mov	r5, r0
   10e22:	b108      	cbz	r0, 10e28 <_fflush_r+0xc>
   10e24:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10e26:	b303      	cbz	r3, 10e6a <_fflush_r+0x4e>
   10e28:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10e2c:	b188      	cbz	r0, 10e52 <_fflush_r+0x36>
   10e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e30:	07db      	lsls	r3, r3, #31
   10e32:	d401      	bmi.n	10e38 <_fflush_r+0x1c>
   10e34:	0581      	lsls	r1, r0, #22
   10e36:	d50f      	bpl.n	10e58 <_fflush_r+0x3c>
   10e38:	4628      	mov	r0, r5
   10e3a:	4621      	mov	r1, r4
   10e3c:	f7ff ff56 	bl	10cec <__sflush_r>
   10e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e42:	07da      	lsls	r2, r3, #31
   10e44:	4605      	mov	r5, r0
   10e46:	d402      	bmi.n	10e4e <_fflush_r+0x32>
   10e48:	89a3      	ldrh	r3, [r4, #12]
   10e4a:	059b      	lsls	r3, r3, #22
   10e4c:	d508      	bpl.n	10e60 <_fflush_r+0x44>
   10e4e:	4628      	mov	r0, r5
   10e50:	bd38      	pop	{r3, r4, r5, pc}
   10e52:	4605      	mov	r5, r0
   10e54:	4628      	mov	r0, r5
   10e56:	bd38      	pop	{r3, r4, r5, pc}
   10e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e5a:	f7fa ff6b 	bl	bd34 <__retarget_lock_acquire_recursive>
   10e5e:	e7eb      	b.n	10e38 <_fflush_r+0x1c>
   10e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e62:	f7fa ff69 	bl	bd38 <__retarget_lock_release_recursive>
   10e66:	4628      	mov	r0, r5
   10e68:	bd38      	pop	{r3, r4, r5, pc}
   10e6a:	f7fa fc0b 	bl	b684 <__sinit>
   10e6e:	e7db      	b.n	10e28 <_fflush_r+0xc>

00010e70 <__sccl>:
   10e70:	b570      	push	{r4, r5, r6, lr}
   10e72:	780c      	ldrb	r4, [r1, #0]
   10e74:	2c5e      	cmp	r4, #94	; 0x5e
   10e76:	4686      	mov	lr, r0
   10e78:	d01e      	beq.n	10eb8 <__sccl+0x48>
   10e7a:	2200      	movs	r2, #0
   10e7c:	1c48      	adds	r0, r1, #1
   10e7e:	4694      	mov	ip, r2
   10e80:	f10e 33ff 	add.w	r3, lr, #4294967295
   10e84:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10e88:	f803 2f01 	strb.w	r2, [r3, #1]!
   10e8c:	428b      	cmp	r3, r1
   10e8e:	d1fb      	bne.n	10e88 <__sccl+0x18>
   10e90:	b184      	cbz	r4, 10eb4 <__sccl+0x44>
   10e92:	f08c 0101 	eor.w	r1, ip, #1
   10e96:	f80e 1004 	strb.w	r1, [lr, r4]
   10e9a:	1c45      	adds	r5, r0, #1
   10e9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10ea0:	2b2d      	cmp	r3, #45	; 0x2d
   10ea2:	d00e      	beq.n	10ec2 <__sccl+0x52>
   10ea4:	2b5d      	cmp	r3, #93	; 0x5d
   10ea6:	d003      	beq.n	10eb0 <__sccl+0x40>
   10ea8:	b11b      	cbz	r3, 10eb2 <__sccl+0x42>
   10eaa:	461c      	mov	r4, r3
   10eac:	4628      	mov	r0, r5
   10eae:	e7f2      	b.n	10e96 <__sccl+0x26>
   10eb0:	4628      	mov	r0, r5
   10eb2:	bd70      	pop	{r4, r5, r6, pc}
   10eb4:	3801      	subs	r0, #1
   10eb6:	bd70      	pop	{r4, r5, r6, pc}
   10eb8:	2201      	movs	r2, #1
   10eba:	784c      	ldrb	r4, [r1, #1]
   10ebc:	1c88      	adds	r0, r1, #2
   10ebe:	4694      	mov	ip, r2
   10ec0:	e7de      	b.n	10e80 <__sccl+0x10>
   10ec2:	f890 c001 	ldrb.w	ip, [r0, #1]
   10ec6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10eca:	d0ee      	beq.n	10eaa <__sccl+0x3a>
   10ecc:	4564      	cmp	r4, ip
   10ece:	dcec      	bgt.n	10eaa <__sccl+0x3a>
   10ed0:	1c66      	adds	r6, r4, #1
   10ed2:	3002      	adds	r0, #2
   10ed4:	eb0e 0206 	add.w	r2, lr, r6
   10ed8:	f802 1b01 	strb.w	r1, [r2], #1
   10edc:	eba2 030e 	sub.w	r3, r2, lr
   10ee0:	3b01      	subs	r3, #1
   10ee2:	459c      	cmp	ip, r3
   10ee4:	dcf8      	bgt.n	10ed8 <__sccl+0x68>
   10ee6:	ebac 0304 	sub.w	r3, ip, r4
   10eea:	3b01      	subs	r3, #1
   10eec:	4564      	cmp	r4, ip
   10eee:	bfa8      	it	ge
   10ef0:	2300      	movge	r3, #0
   10ef2:	3502      	adds	r5, #2
   10ef4:	199c      	adds	r4, r3, r6
   10ef6:	e7d1      	b.n	10e9c <__sccl+0x2c>

00010ef8 <stpncpy>:
   10ef8:	ea41 0300 	orr.w	r3, r1, r0
   10efc:	079b      	lsls	r3, r3, #30
   10efe:	b430      	push	{r4, r5}
   10f00:	d101      	bne.n	10f06 <stpncpy+0xe>
   10f02:	2a03      	cmp	r2, #3
   10f04:	d80f      	bhi.n	10f26 <stpncpy+0x2e>
   10f06:	f101 3cff 	add.w	ip, r1, #4294967295
   10f0a:	e007      	b.n	10f1c <stpncpy+0x24>
   10f0c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10f10:	f803 1b01 	strb.w	r1, [r3], #1
   10f14:	1e54      	subs	r4, r2, #1
   10f16:	b1c1      	cbz	r1, 10f4a <stpncpy+0x52>
   10f18:	4622      	mov	r2, r4
   10f1a:	4618      	mov	r0, r3
   10f1c:	4603      	mov	r3, r0
   10f1e:	2a00      	cmp	r2, #0
   10f20:	d1f4      	bne.n	10f0c <stpncpy+0x14>
   10f22:	bc30      	pop	{r4, r5}
   10f24:	4770      	bx	lr
   10f26:	460b      	mov	r3, r1
   10f28:	4619      	mov	r1, r3
   10f2a:	f853 5b04 	ldr.w	r5, [r3], #4
   10f2e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10f32:	ea24 0405 	bic.w	r4, r4, r5
   10f36:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10f3a:	d1e4      	bne.n	10f06 <stpncpy+0xe>
   10f3c:	3a04      	subs	r2, #4
   10f3e:	2a03      	cmp	r2, #3
   10f40:	f840 5b04 	str.w	r5, [r0], #4
   10f44:	4619      	mov	r1, r3
   10f46:	d8ef      	bhi.n	10f28 <stpncpy+0x30>
   10f48:	e7dd      	b.n	10f06 <stpncpy+0xe>
   10f4a:	4402      	add	r2, r0
   10f4c:	2c00      	cmp	r4, #0
   10f4e:	d0e8      	beq.n	10f22 <stpncpy+0x2a>
   10f50:	f803 1b01 	strb.w	r1, [r3], #1
   10f54:	4293      	cmp	r3, r2
   10f56:	d1fb      	bne.n	10f50 <stpncpy+0x58>
   10f58:	bc30      	pop	{r4, r5}
   10f5a:	4770      	bx	lr

00010f5c <_localeconv_r>:
   10f5c:	4800      	ldr	r0, [pc, #0]	; (10f60 <_localeconv_r+0x4>)
   10f5e:	4770      	bx	lr
   10f60:	200086e4 	.word	0x200086e4
   10f64:	00000000 	.word	0x00000000

00010f68 <frexp>:
   10f68:	b430      	push	{r4, r5}
   10f6a:	b082      	sub	sp, #8
   10f6c:	ed8d 0b00 	vstr	d0, [sp]
   10f70:	9a01      	ldr	r2, [sp, #4]
   10f72:	4c19      	ldr	r4, [pc, #100]	; (10fd8 <frexp+0x70>)
   10f74:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10f78:	2100      	movs	r1, #0
   10f7a:	42a3      	cmp	r3, r4
   10f7c:	6001      	str	r1, [r0, #0]
   10f7e:	dc21      	bgt.n	10fc4 <frexp+0x5c>
   10f80:	9c00      	ldr	r4, [sp, #0]
   10f82:	431c      	orrs	r4, r3
   10f84:	d01e      	beq.n	10fc4 <frexp+0x5c>
   10f86:	4c15      	ldr	r4, [pc, #84]	; (10fdc <frexp+0x74>)
   10f88:	4014      	ands	r4, r2
   10f8a:	b954      	cbnz	r4, 10fa2 <frexp+0x3a>
   10f8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 10fd0 <frexp+0x68>
   10f90:	ee20 7b07 	vmul.f64	d7, d0, d7
   10f94:	ed8d 7b00 	vstr	d7, [sp]
   10f98:	9a01      	ldr	r2, [sp, #4]
   10f9a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   10f9e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10fa2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10fa6:	e9dd 4500 	ldrd	r4, r5, [sp]
   10faa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10fae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10fb2:	151b      	asrs	r3, r3, #20
   10fb4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10fb8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10fbc:	e9cd 4500 	strd	r4, r5, [sp]
   10fc0:	440b      	add	r3, r1
   10fc2:	6003      	str	r3, [r0, #0]
   10fc4:	ed9d 0b00 	vldr	d0, [sp]
   10fc8:	b002      	add	sp, #8
   10fca:	bc30      	pop	{r4, r5}
   10fcc:	4770      	bx	lr
   10fce:	bf00      	nop
   10fd0:	00000000 	.word	0x00000000
   10fd4:	43500000 	.word	0x43500000
   10fd8:	7fefffff 	.word	0x7fefffff
   10fdc:	7ff00000 	.word	0x7ff00000

00010fe0 <__assert_func>:
   10fe0:	b500      	push	{lr}
   10fe2:	4c0b      	ldr	r4, [pc, #44]	; (11010 <__assert_func+0x30>)
   10fe4:	6825      	ldr	r5, [r4, #0]
   10fe6:	4614      	mov	r4, r2
   10fe8:	68ee      	ldr	r6, [r5, #12]
   10fea:	461a      	mov	r2, r3
   10fec:	b085      	sub	sp, #20
   10fee:	4603      	mov	r3, r0
   10ff0:	460d      	mov	r5, r1
   10ff2:	b14c      	cbz	r4, 11008 <__assert_func+0x28>
   10ff4:	4907      	ldr	r1, [pc, #28]	; (11014 <__assert_func+0x34>)
   10ff6:	9500      	str	r5, [sp, #0]
   10ff8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10ffc:	4630      	mov	r0, r6
   10ffe:	4906      	ldr	r1, [pc, #24]	; (11018 <__assert_func+0x38>)
   11000:	f001 fabe 	bl	12580 <fiprintf>
   11004:	f7f7 fa56 	bl	84b4 <abort>
   11008:	4904      	ldr	r1, [pc, #16]	; (1101c <__assert_func+0x3c>)
   1100a:	460c      	mov	r4, r1
   1100c:	e7f3      	b.n	10ff6 <__assert_func+0x16>
   1100e:	bf00      	nop
   11010:	20008b7c 	.word	0x20008b7c
   11014:	20000888 	.word	0x20000888
   11018:	20000898 	.word	0x20000898
   1101c:	20008028 	.word	0x20008028

00011020 <_calloc_r>:
   11020:	b538      	push	{r3, r4, r5, lr}
   11022:	fba1 1402 	umull	r1, r4, r1, r2
   11026:	bb8c      	cbnz	r4, 1108c <_calloc_r+0x6c>
   11028:	f7f8 fdf8 	bl	9c1c <_malloc_r>
   1102c:	4605      	mov	r5, r0
   1102e:	b1e0      	cbz	r0, 1106a <_calloc_r+0x4a>
   11030:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11034:	f022 0203 	bic.w	r2, r2, #3
   11038:	3a04      	subs	r2, #4
   1103a:	2a24      	cmp	r2, #36	; 0x24
   1103c:	d817      	bhi.n	1106e <_calloc_r+0x4e>
   1103e:	2a13      	cmp	r2, #19
   11040:	d91a      	bls.n	11078 <_calloc_r+0x58>
   11042:	2a1b      	cmp	r2, #27
   11044:	e9c0 4400 	strd	r4, r4, [r0]
   11048:	d91d      	bls.n	11086 <_calloc_r+0x66>
   1104a:	2a24      	cmp	r2, #36	; 0x24
   1104c:	bf14      	ite	ne
   1104e:	f100 0210 	addne.w	r2, r0, #16
   11052:	f100 0218 	addeq.w	r2, r0, #24
   11056:	f04f 0300 	mov.w	r3, #0
   1105a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1105e:	bf04      	itt	eq
   11060:	6104      	streq	r4, [r0, #16]
   11062:	6144      	streq	r4, [r0, #20]
   11064:	e9c2 3300 	strd	r3, r3, [r2]
   11068:	6093      	str	r3, [r2, #8]
   1106a:	4628      	mov	r0, r5
   1106c:	bd38      	pop	{r3, r4, r5, pc}
   1106e:	4621      	mov	r1, r4
   11070:	f7fa fcfc 	bl	ba6c <memset>
   11074:	4628      	mov	r0, r5
   11076:	bd38      	pop	{r3, r4, r5, pc}
   11078:	4602      	mov	r2, r0
   1107a:	2300      	movs	r3, #0
   1107c:	e9c2 3300 	strd	r3, r3, [r2]
   11080:	6093      	str	r3, [r2, #8]
   11082:	4628      	mov	r0, r5
   11084:	bd38      	pop	{r3, r4, r5, pc}
   11086:	f100 0208 	add.w	r2, r0, #8
   1108a:	e7f6      	b.n	1107a <_calloc_r+0x5a>
   1108c:	f7fa fe24 	bl	bcd8 <__errno>
   11090:	230c      	movs	r3, #12
   11092:	2500      	movs	r5, #0
   11094:	6003      	str	r3, [r0, #0]
   11096:	e7e8      	b.n	1106a <_calloc_r+0x4a>

00011098 <quorem>:
   11098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1109c:	6903      	ldr	r3, [r0, #16]
   1109e:	690c      	ldr	r4, [r1, #16]
   110a0:	42a3      	cmp	r3, r4
   110a2:	b083      	sub	sp, #12
   110a4:	f2c0 8087 	blt.w	111b6 <quorem+0x11e>
   110a8:	3c01      	subs	r4, #1
   110aa:	f101 0514 	add.w	r5, r1, #20
   110ae:	00a3      	lsls	r3, r4, #2
   110b0:	f100 0814 	add.w	r8, r0, #20
   110b4:	9300      	str	r3, [sp, #0]
   110b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   110ba:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   110be:	3301      	adds	r3, #1
   110c0:	4681      	mov	r9, r0
   110c2:	429a      	cmp	r2, r3
   110c4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   110c8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   110cc:	9001      	str	r0, [sp, #4]
   110ce:	fbb2 f6f3 	udiv	r6, r2, r3
   110d2:	d33b      	bcc.n	1114c <quorem+0xb4>
   110d4:	f04f 0c00 	mov.w	ip, #0
   110d8:	46ae      	mov	lr, r5
   110da:	4640      	mov	r0, r8
   110dc:	46e2      	mov	sl, ip
   110de:	4663      	mov	r3, ip
   110e0:	f85e bb04 	ldr.w	fp, [lr], #4
   110e4:	6802      	ldr	r2, [r0, #0]
   110e6:	fa1f fc8b 	uxth.w	ip, fp
   110ea:	fb06 330c 	mla	r3, r6, ip, r3
   110ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   110f2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   110f6:	fb06 cc0b 	mla	ip, r6, fp, ip
   110fa:	b29b      	uxth	r3, r3
   110fc:	ebaa 0303 	sub.w	r3, sl, r3
   11100:	fa1f fa8c 	uxth.w	sl, ip
   11104:	fa13 f382 	uxtah	r3, r3, r2
   11108:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1110c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11110:	b29b      	uxth	r3, r3
   11112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11116:	4577      	cmp	r7, lr
   11118:	f840 3b04 	str.w	r3, [r0], #4
   1111c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11120:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11124:	d2dc      	bcs.n	110e0 <quorem+0x48>
   11126:	9b00      	ldr	r3, [sp, #0]
   11128:	f858 3003 	ldr.w	r3, [r8, r3]
   1112c:	b973      	cbnz	r3, 1114c <quorem+0xb4>
   1112e:	9b01      	ldr	r3, [sp, #4]
   11130:	3b04      	subs	r3, #4
   11132:	4598      	cmp	r8, r3
   11134:	d304      	bcc.n	11140 <quorem+0xa8>
   11136:	e007      	b.n	11148 <quorem+0xb0>
   11138:	4598      	cmp	r8, r3
   1113a:	f104 34ff 	add.w	r4, r4, #4294967295
   1113e:	d203      	bcs.n	11148 <quorem+0xb0>
   11140:	f853 2904 	ldr.w	r2, [r3], #-4
   11144:	2a00      	cmp	r2, #0
   11146:	d0f7      	beq.n	11138 <quorem+0xa0>
   11148:	f8c9 4010 	str.w	r4, [r9, #16]
   1114c:	4648      	mov	r0, r9
   1114e:	f7fc f933 	bl	d3b8 <__mcmp>
   11152:	2800      	cmp	r0, #0
   11154:	db2b      	blt.n	111ae <quorem+0x116>
   11156:	3601      	adds	r6, #1
   11158:	4641      	mov	r1, r8
   1115a:	2300      	movs	r3, #0
   1115c:	f855 0b04 	ldr.w	r0, [r5], #4
   11160:	f8d1 c000 	ldr.w	ip, [r1]
   11164:	b282      	uxth	r2, r0
   11166:	1a9a      	subs	r2, r3, r2
   11168:	0c03      	lsrs	r3, r0, #16
   1116a:	fa12 f28c 	uxtah	r2, r2, ip
   1116e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   11172:	eb03 4322 	add.w	r3, r3, r2, asr #16
   11176:	b292      	uxth	r2, r2
   11178:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1117c:	42af      	cmp	r7, r5
   1117e:	f841 2b04 	str.w	r2, [r1], #4
   11182:	ea4f 4323 	mov.w	r3, r3, asr #16
   11186:	d2e9      	bcs.n	1115c <quorem+0xc4>
   11188:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1118c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11190:	b96a      	cbnz	r2, 111ae <quorem+0x116>
   11192:	3b04      	subs	r3, #4
   11194:	4598      	cmp	r8, r3
   11196:	d304      	bcc.n	111a2 <quorem+0x10a>
   11198:	e007      	b.n	111aa <quorem+0x112>
   1119a:	4598      	cmp	r8, r3
   1119c:	f104 34ff 	add.w	r4, r4, #4294967295
   111a0:	d203      	bcs.n	111aa <quorem+0x112>
   111a2:	f853 2904 	ldr.w	r2, [r3], #-4
   111a6:	2a00      	cmp	r2, #0
   111a8:	d0f7      	beq.n	1119a <quorem+0x102>
   111aa:	f8c9 4010 	str.w	r4, [r9, #16]
   111ae:	4630      	mov	r0, r6
   111b0:	b003      	add	sp, #12
   111b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111b6:	2000      	movs	r0, #0
   111b8:	b003      	add	sp, #12
   111ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111be:	bf00      	nop

000111c0 <_dtoa_r>:
   111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111c4:	ed2d 8b02 	vpush	{d8}
   111c8:	b08f      	sub	sp, #60	; 0x3c
   111ca:	ed8d 0b02 	vstr	d0, [sp, #8]
   111ce:	9101      	str	r1, [sp, #4]
   111d0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   111d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   111d4:	9305      	str	r3, [sp, #20]
   111d6:	ec57 6b10 	vmov	r6, r7, d0
   111da:	4604      	mov	r4, r0
   111dc:	4693      	mov	fp, r2
   111de:	b141      	cbz	r1, 111f2 <_dtoa_r+0x32>
   111e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   111e2:	604a      	str	r2, [r1, #4]
   111e4:	2301      	movs	r3, #1
   111e6:	4093      	lsls	r3, r2
   111e8:	608b      	str	r3, [r1, #8]
   111ea:	f7fb fe2d 	bl	ce48 <_Bfree>
   111ee:	2300      	movs	r3, #0
   111f0:	63a3      	str	r3, [r4, #56]	; 0x38
   111f2:	f1b7 0800 	subs.w	r8, r7, #0
   111f6:	bfb4      	ite	lt
   111f8:	2301      	movlt	r3, #1
   111fa:	2300      	movge	r3, #0
   111fc:	602b      	str	r3, [r5, #0]
   111fe:	4bbe      	ldr	r3, [pc, #760]	; (114f8 <_dtoa_r+0x338>)
   11200:	bfbc      	itt	lt
   11202:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11206:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1120a:	ea33 0308 	bics.w	r3, r3, r8
   1120e:	f000 809f 	beq.w	11350 <_dtoa_r+0x190>
   11212:	ed9d 8b02 	vldr	d8, [sp, #8]
   11216:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1121e:	d111      	bne.n	11244 <_dtoa_r+0x84>
   11220:	9a05      	ldr	r2, [sp, #20]
   11222:	2301      	movs	r3, #1
   11224:	6013      	str	r3, [r2, #0]
   11226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11228:	2b00      	cmp	r3, #0
   1122a:	f000 823f 	beq.w	116ac <_dtoa_r+0x4ec>
   1122e:	4bb3      	ldr	r3, [pc, #716]	; (114fc <_dtoa_r+0x33c>)
   11230:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11232:	6013      	str	r3, [r2, #0]
   11234:	3b01      	subs	r3, #1
   11236:	9300      	str	r3, [sp, #0]
   11238:	9800      	ldr	r0, [sp, #0]
   1123a:	b00f      	add	sp, #60	; 0x3c
   1123c:	ecbd 8b02 	vpop	{d8}
   11240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11244:	aa0c      	add	r2, sp, #48	; 0x30
   11246:	a90d      	add	r1, sp, #52	; 0x34
   11248:	4620      	mov	r0, r4
   1124a:	eeb0 0b48 	vmov.f64	d0, d8
   1124e:	f7fc fa13 	bl	d678 <__d2b>
   11252:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11256:	4605      	mov	r5, r0
   11258:	f040 8092 	bne.w	11380 <_dtoa_r+0x1c0>
   1125c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   11260:	440b      	add	r3, r1
   11262:	f203 4232 	addw	r2, r3, #1074	; 0x432
   11266:	2a20      	cmp	r2, #32
   11268:	f340 82fa 	ble.w	11860 <_dtoa_r+0x6a0>
   1126c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   11270:	fa08 f802 	lsl.w	r8, r8, r2
   11274:	f203 4212 	addw	r2, r3, #1042	; 0x412
   11278:	40d6      	lsrs	r6, r2
   1127a:	ea48 0206 	orr.w	r2, r8, r6
   1127e:	ee07 2a10 	vmov	s14, r2
   11282:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   11286:	1e58      	subs	r0, r3, #1
   11288:	ee17 6a90 	vmov	r6, s15
   1128c:	ec53 2b17 	vmov	r2, r3, d7
   11290:	f04f 0a01 	mov.w	sl, #1
   11294:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11298:	ed9f 3b91 	vldr	d3, [pc, #580]	; 114e0 <_dtoa_r+0x320>
   1129c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 114e8 <_dtoa_r+0x328>
   112a0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 114f0 <_dtoa_r+0x330>
   112a4:	ee06 0a90 	vmov	s13, r0
   112a8:	ec43 2b12 	vmov	d2, r2, r3
   112ac:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   112b0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   112b4:	ee32 6b46 	vsub.f64	d6, d2, d6
   112b8:	eea6 7b03 	vfma.f64	d7, d6, d3
   112bc:	eea4 7b05 	vfma.f64	d7, d4, d5
   112c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   112c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   112c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112cc:	ee16 7a90 	vmov	r7, s13
   112d0:	d508      	bpl.n	112e4 <_dtoa_r+0x124>
   112d2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   112d6:	eeb4 6b47 	vcmp.f64	d6, d7
   112da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112de:	bf18      	it	ne
   112e0:	f107 37ff 	addne.w	r7, r7, #4294967295
   112e4:	2f16      	cmp	r7, #22
   112e6:	f200 8145 	bhi.w	11574 <_dtoa_r+0x3b4>
   112ea:	4b85      	ldr	r3, [pc, #532]	; (11500 <_dtoa_r+0x340>)
   112ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   112f0:	ed93 7b00 	vldr	d7, [r3]
   112f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112fc:	d557      	bpl.n	113ae <_dtoa_r+0x1ee>
   112fe:	1a09      	subs	r1, r1, r0
   11300:	2300      	movs	r3, #0
   11302:	f1b1 0801 	subs.w	r8, r1, #1
   11306:	f107 37ff 	add.w	r7, r7, #4294967295
   1130a:	930a      	str	r3, [sp, #40]	; 0x28
   1130c:	f100 8139 	bmi.w	11582 <_dtoa_r+0x3c2>
   11310:	2300      	movs	r3, #0
   11312:	9306      	str	r3, [sp, #24]
   11314:	2f00      	cmp	r7, #0
   11316:	da52      	bge.n	113be <_dtoa_r+0x1fe>
   11318:	9b06      	ldr	r3, [sp, #24]
   1131a:	9704      	str	r7, [sp, #16]
   1131c:	1bdb      	subs	r3, r3, r7
   1131e:	9306      	str	r3, [sp, #24]
   11320:	427b      	negs	r3, r7
   11322:	9308      	str	r3, [sp, #32]
   11324:	9b01      	ldr	r3, [sp, #4]
   11326:	2b09      	cmp	r3, #9
   11328:	f04f 0700 	mov.w	r7, #0
   1132c:	d84e      	bhi.n	113cc <_dtoa_r+0x20c>
   1132e:	2b05      	cmp	r3, #5
   11330:	f340 829d 	ble.w	1186e <_dtoa_r+0x6ae>
   11334:	3b04      	subs	r3, #4
   11336:	9301      	str	r3, [sp, #4]
   11338:	2600      	movs	r6, #0
   1133a:	9b01      	ldr	r3, [sp, #4]
   1133c:	1e9a      	subs	r2, r3, #2
   1133e:	2a03      	cmp	r2, #3
   11340:	f200 8125 	bhi.w	1158e <_dtoa_r+0x3ce>
   11344:	e8df f012 	tbh	[pc, r2, lsl #1]
   11348:	03a703aa 	.word	0x03a703aa
   1134c:	037e039d 	.word	0x037e039d
   11350:	9a05      	ldr	r2, [sp, #20]
   11352:	f3c8 0813 	ubfx	r8, r8, #0, #20
   11356:	f242 730f 	movw	r3, #9999	; 0x270f
   1135a:	ea58 0806 	orrs.w	r8, r8, r6
   1135e:	6013      	str	r3, [r2, #0]
   11360:	d11e      	bne.n	113a0 <_dtoa_r+0x1e0>
   11362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11364:	2b00      	cmp	r3, #0
   11366:	f000 8591 	beq.w	11e8c <_dtoa_r+0xccc>
   1136a:	4b66      	ldr	r3, [pc, #408]	; (11504 <_dtoa_r+0x344>)
   1136c:	9300      	str	r3, [sp, #0]
   1136e:	3308      	adds	r3, #8
   11370:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11372:	9800      	ldr	r0, [sp, #0]
   11374:	6013      	str	r3, [r2, #0]
   11376:	b00f      	add	sp, #60	; 0x3c
   11378:	ecbd 8b02 	vpop	{d8}
   1137c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11380:	ee18 6a90 	vmov	r6, s17
   11384:	f3c6 0613 	ubfx	r6, r6, #0, #20
   11388:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1138c:	ec53 2b18 	vmov	r2, r3, d8
   11390:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11394:	990c      	ldr	r1, [sp, #48]	; 0x30
   11396:	f04f 0a00 	mov.w	sl, #0
   1139a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1139e:	e77b      	b.n	11298 <_dtoa_r+0xd8>
   113a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   113a2:	2b00      	cmp	r3, #0
   113a4:	f040 833b 	bne.w	11a1e <_dtoa_r+0x85e>
   113a8:	4b57      	ldr	r3, [pc, #348]	; (11508 <_dtoa_r+0x348>)
   113aa:	9300      	str	r3, [sp, #0]
   113ac:	e744      	b.n	11238 <_dtoa_r+0x78>
   113ae:	1a09      	subs	r1, r1, r0
   113b0:	2300      	movs	r3, #0
   113b2:	f1b1 0801 	subs.w	r8, r1, #1
   113b6:	930a      	str	r3, [sp, #40]	; 0x28
   113b8:	f100 80e3 	bmi.w	11582 <_dtoa_r+0x3c2>
   113bc:	9306      	str	r3, [sp, #24]
   113be:	2300      	movs	r3, #0
   113c0:	9308      	str	r3, [sp, #32]
   113c2:	9b01      	ldr	r3, [sp, #4]
   113c4:	9704      	str	r7, [sp, #16]
   113c6:	2b09      	cmp	r3, #9
   113c8:	44b8      	add	r8, r7
   113ca:	d9b0      	bls.n	1132e <_dtoa_r+0x16e>
   113cc:	2300      	movs	r3, #0
   113ce:	2601      	movs	r6, #1
   113d0:	9301      	str	r3, [sp, #4]
   113d2:	9607      	str	r6, [sp, #28]
   113d4:	f04f 39ff 	mov.w	r9, #4294967295
   113d8:	469b      	mov	fp, r3
   113da:	2100      	movs	r1, #0
   113dc:	63e1      	str	r1, [r4, #60]	; 0x3c
   113de:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   113e2:	4620      	mov	r0, r4
   113e4:	f7fb fd0a 	bl	cdfc <_Balloc>
   113e8:	9000      	str	r0, [sp, #0]
   113ea:	2800      	cmp	r0, #0
   113ec:	f000 8540 	beq.w	11e70 <_dtoa_r+0xcb0>
   113f0:	9b00      	ldr	r3, [sp, #0]
   113f2:	63a3      	str	r3, [r4, #56]	; 0x38
   113f4:	f1b9 0f0e 	cmp.w	r9, #14
   113f8:	f200 80dc 	bhi.w	115b4 <_dtoa_r+0x3f4>
   113fc:	2e00      	cmp	r6, #0
   113fe:	f000 80d9 	beq.w	115b4 <_dtoa_r+0x3f4>
   11402:	9b04      	ldr	r3, [sp, #16]
   11404:	2b00      	cmp	r3, #0
   11406:	f340 83de 	ble.w	11bc6 <_dtoa_r+0xa06>
   1140a:	4a3d      	ldr	r2, [pc, #244]	; (11500 <_dtoa_r+0x340>)
   1140c:	f003 010f 	and.w	r1, r3, #15
   11410:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11414:	ed92 7b00 	vldr	d7, [r2]
   11418:	111a      	asrs	r2, r3, #4
   1141a:	05db      	lsls	r3, r3, #23
   1141c:	f140 8382 	bpl.w	11b24 <_dtoa_r+0x964>
   11420:	493a      	ldr	r1, [pc, #232]	; (1150c <_dtoa_r+0x34c>)
   11422:	ed91 6b08 	vldr	d6, [r1, #32]
   11426:	f002 020f 	and.w	r2, r2, #15
   1142a:	2003      	movs	r0, #3
   1142c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   11430:	b15a      	cbz	r2, 1144a <_dtoa_r+0x28a>
   11432:	4936      	ldr	r1, [pc, #216]	; (1150c <_dtoa_r+0x34c>)
   11434:	07d6      	lsls	r6, r2, #31
   11436:	d504      	bpl.n	11442 <_dtoa_r+0x282>
   11438:	ed91 6b00 	vldr	d6, [r1]
   1143c:	3001      	adds	r0, #1
   1143e:	ee27 7b06 	vmul.f64	d7, d7, d6
   11442:	1052      	asrs	r2, r2, #1
   11444:	f101 0108 	add.w	r1, r1, #8
   11448:	d1f4      	bne.n	11434 <_dtoa_r+0x274>
   1144a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1144e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11450:	b13b      	cbz	r3, 11462 <_dtoa_r+0x2a2>
   11452:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11456:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1145e:	f100 84ae 	bmi.w	11dbe <_dtoa_r+0xbfe>
   11462:	ee07 0a90 	vmov	s15, r0
   11466:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1146a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1146e:	eea5 7b06 	vfma.f64	d7, d5, d6
   11472:	ee17 2a90 	vmov	r2, s15
   11476:	ec51 0b17 	vmov	r0, r1, d7
   1147a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1147e:	f1b9 0f00 	cmp.w	r9, #0
   11482:	f000 8388 	beq.w	11b96 <_dtoa_r+0x9d6>
   11486:	9e04      	ldr	r6, [sp, #16]
   11488:	464a      	mov	r2, r9
   1148a:	9b07      	ldr	r3, [sp, #28]
   1148c:	2b00      	cmp	r3, #0
   1148e:	f000 8447 	beq.w	11d20 <_dtoa_r+0xb60>
   11492:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   11496:	4b1a      	ldr	r3, [pc, #104]	; (11500 <_dtoa_r+0x340>)
   11498:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1149c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   114a0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   114a4:	ee36 7b47 	vsub.f64	d7, d6, d7
   114a8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   114ac:	ee83 5b06 	vdiv.f64	d5, d3, d6
   114b0:	ec41 0b16 	vmov	d6, r0, r1
   114b4:	ee14 0a90 	vmov	r0, s9
   114b8:	ee35 5b46 	vsub.f64	d5, d5, d6
   114bc:	9900      	ldr	r1, [sp, #0]
   114be:	eeb4 5bc7 	vcmpe.f64	d5, d7
   114c2:	3030      	adds	r0, #48	; 0x30
   114c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   114c8:	f801 0b01 	strb.w	r0, [r1], #1
   114cc:	f300 84ac 	bgt.w	11e28 <_dtoa_r+0xc68>
   114d0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   114d4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   114d8:	f04f 0c00 	mov.w	ip, #0
   114dc:	e031      	b.n	11542 <_dtoa_r+0x382>
   114de:	bf00      	nop
   114e0:	636f4361 	.word	0x636f4361
   114e4:	3fd287a7 	.word	0x3fd287a7
   114e8:	8b60c8b3 	.word	0x8b60c8b3
   114ec:	3fc68a28 	.word	0x3fc68a28
   114f0:	509f79fb 	.word	0x509f79fb
   114f4:	3fd34413 	.word	0x3fd34413
   114f8:	7ff00000 	.word	0x7ff00000
   114fc:	20000c71 	.word	0x20000c71
   11500:	200002a8 	.word	0x200002a8
   11504:	20000ba8 	.word	0x20000ba8
   11508:	20000bb4 	.word	0x20000bb4
   1150c:	20000280 	.word	0x20000280
   11510:	f10c 0c01 	add.w	ip, ip, #1
   11514:	4594      	cmp	ip, r2
   11516:	da4d      	bge.n	115b4 <_dtoa_r+0x3f4>
   11518:	ee27 7b04 	vmul.f64	d7, d7, d4
   1151c:	ee25 5b04 	vmul.f64	d5, d5, d4
   11520:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11524:	ee16 3a90 	vmov	r3, s13
   11528:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1152c:	3330      	adds	r3, #48	; 0x30
   1152e:	ee37 7b43 	vsub.f64	d7, d7, d3
   11532:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1153a:	f801 3b01 	strb.w	r3, [r1], #1
   1153e:	f100 8473 	bmi.w	11e28 <_dtoa_r+0xc68>
   11542:	ee32 6b47 	vsub.f64	d6, d2, d7
   11546:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1154e:	d5df      	bpl.n	11510 <_dtoa_r+0x350>
   11550:	9a00      	ldr	r2, [sp, #0]
   11552:	9604      	str	r6, [sp, #16]
   11554:	e002      	b.n	1155c <_dtoa_r+0x39c>
   11556:	428a      	cmp	r2, r1
   11558:	f000 8450 	beq.w	11dfc <_dtoa_r+0xc3c>
   1155c:	4689      	mov	r9, r1
   1155e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11562:	2b39      	cmp	r3, #57	; 0x39
   11564:	d0f7      	beq.n	11556 <_dtoa_r+0x396>
   11566:	3301      	adds	r3, #1
   11568:	b2db      	uxtb	r3, r3
   1156a:	700b      	strb	r3, [r1, #0]
   1156c:	9b04      	ldr	r3, [sp, #16]
   1156e:	3301      	adds	r3, #1
   11570:	9304      	str	r3, [sp, #16]
   11572:	e155      	b.n	11820 <_dtoa_r+0x660>
   11574:	1a09      	subs	r1, r1, r0
   11576:	2301      	movs	r3, #1
   11578:	f1b1 0801 	subs.w	r8, r1, #1
   1157c:	930a      	str	r3, [sp, #40]	; 0x28
   1157e:	f57f aec7 	bpl.w	11310 <_dtoa_r+0x150>
   11582:	f1c1 0301 	rsb	r3, r1, #1
   11586:	9306      	str	r3, [sp, #24]
   11588:	f04f 0800 	mov.w	r8, #0
   1158c:	e6c2      	b.n	11314 <_dtoa_r+0x154>
   1158e:	2600      	movs	r6, #0
   11590:	63e6      	str	r6, [r4, #60]	; 0x3c
   11592:	4631      	mov	r1, r6
   11594:	4620      	mov	r0, r4
   11596:	f7fb fc31 	bl	cdfc <_Balloc>
   1159a:	9000      	str	r0, [sp, #0]
   1159c:	2800      	cmp	r0, #0
   1159e:	f000 8467 	beq.w	11e70 <_dtoa_r+0xcb0>
   115a2:	9b00      	ldr	r3, [sp, #0]
   115a4:	63a3      	str	r3, [r4, #56]	; 0x38
   115a6:	f04f 33ff 	mov.w	r3, #4294967295
   115aa:	930b      	str	r3, [sp, #44]	; 0x2c
   115ac:	4699      	mov	r9, r3
   115ae:	2301      	movs	r3, #1
   115b0:	46b3      	mov	fp, r6
   115b2:	9307      	str	r3, [sp, #28]
   115b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   115b6:	2a00      	cmp	r2, #0
   115b8:	db55      	blt.n	11666 <_dtoa_r+0x4a6>
   115ba:	9904      	ldr	r1, [sp, #16]
   115bc:	290e      	cmp	r1, #14
   115be:	dc52      	bgt.n	11666 <_dtoa_r+0x4a6>
   115c0:	4bb7      	ldr	r3, [pc, #732]	; (118a0 <_dtoa_r+0x6e0>)
   115c2:	f1bb 0f00 	cmp.w	fp, #0
   115c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   115ca:	ed93 6b00 	vldr	d6, [r3]
   115ce:	da15      	bge.n	115fc <_dtoa_r+0x43c>
   115d0:	f1b9 0f00 	cmp.w	r9, #0
   115d4:	dc12      	bgt.n	115fc <_dtoa_r+0x43c>
   115d6:	f040 82f2 	bne.w	11bbe <_dtoa_r+0x9fe>
   115da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   115de:	ee26 7b07 	vmul.f64	d7, d6, d7
   115e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   115e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   115ea:	46ca      	mov	sl, r9
   115ec:	464e      	mov	r6, r9
   115ee:	f200 826d 	bhi.w	11acc <_dtoa_r+0x90c>
   115f2:	f8dd 8000 	ldr.w	r8, [sp]
   115f6:	ea6f 0b0b 	mvn.w	fp, fp
   115fa:	e270      	b.n	11ade <_dtoa_r+0x91e>
   115fc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   11600:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11604:	9900      	ldr	r1, [sp, #0]
   11606:	ee17 3a10 	vmov	r3, s14
   1160a:	f1b9 0f01 	cmp.w	r9, #1
   1160e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11612:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11616:	f801 3b01 	strb.w	r3, [r1], #1
   1161a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1161e:	f000 8334 	beq.w	11c8a <_dtoa_r+0xaca>
   11622:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11626:	2301      	movs	r3, #1
   11628:	e011      	b.n	1164e <_dtoa_r+0x48e>
   1162a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1162e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   11632:	3301      	adds	r3, #1
   11634:	ee17 2a10 	vmov	r2, s14
   11638:	454b      	cmp	r3, r9
   1163a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1163e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11642:	f801 2b01 	strb.w	r2, [r1], #1
   11646:	eea5 8b46 	vfms.f64	d8, d5, d6
   1164a:	f000 831e 	beq.w	11c8a <_dtoa_r+0xaca>
   1164e:	ee28 8b04 	vmul.f64	d8, d8, d4
   11652:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1165a:	d1e6      	bne.n	1162a <_dtoa_r+0x46a>
   1165c:	9b04      	ldr	r3, [sp, #16]
   1165e:	3301      	adds	r3, #1
   11660:	9304      	str	r3, [sp, #16]
   11662:	4689      	mov	r9, r1
   11664:	e0dc      	b.n	11820 <_dtoa_r+0x660>
   11666:	9b07      	ldr	r3, [sp, #28]
   11668:	b343      	cbz	r3, 116bc <_dtoa_r+0x4fc>
   1166a:	9b01      	ldr	r3, [sp, #4]
   1166c:	2b01      	cmp	r3, #1
   1166e:	f340 8276 	ble.w	11b5e <_dtoa_r+0x99e>
   11672:	9b08      	ldr	r3, [sp, #32]
   11674:	f109 3aff 	add.w	sl, r9, #4294967295
   11678:	4553      	cmp	r3, sl
   1167a:	f280 823f 	bge.w	11afc <_dtoa_r+0x93c>
   1167e:	9b08      	ldr	r3, [sp, #32]
   11680:	f8cd a020 	str.w	sl, [sp, #32]
   11684:	ebaa 0203 	sub.w	r2, sl, r3
   11688:	4417      	add	r7, r2
   1168a:	f04f 0a00 	mov.w	sl, #0
   1168e:	f1b9 0f00 	cmp.w	r9, #0
   11692:	f2c0 8325 	blt.w	11ce0 <_dtoa_r+0xb20>
   11696:	9b06      	ldr	r3, [sp, #24]
   11698:	9309      	str	r3, [sp, #36]	; 0x24
   1169a:	444b      	add	r3, r9
   1169c:	44c8      	add	r8, r9
   1169e:	9306      	str	r3, [sp, #24]
   116a0:	2101      	movs	r1, #1
   116a2:	4620      	mov	r0, r4
   116a4:	f7fb fcd4 	bl	d050 <__i2b>
   116a8:	4606      	mov	r6, r0
   116aa:	e00c      	b.n	116c6 <_dtoa_r+0x506>
   116ac:	4b7d      	ldr	r3, [pc, #500]	; (118a4 <_dtoa_r+0x6e4>)
   116ae:	9300      	str	r3, [sp, #0]
   116b0:	9800      	ldr	r0, [sp, #0]
   116b2:	b00f      	add	sp, #60	; 0x3c
   116b4:	ecbd 8b02 	vpop	{d8}
   116b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116bc:	9b06      	ldr	r3, [sp, #24]
   116be:	f8dd a020 	ldr.w	sl, [sp, #32]
   116c2:	9e07      	ldr	r6, [sp, #28]
   116c4:	9309      	str	r3, [sp, #36]	; 0x24
   116c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116c8:	b16b      	cbz	r3, 116e6 <_dtoa_r+0x526>
   116ca:	f1b8 0f00 	cmp.w	r8, #0
   116ce:	dd0a      	ble.n	116e6 <_dtoa_r+0x526>
   116d0:	4543      	cmp	r3, r8
   116d2:	9906      	ldr	r1, [sp, #24]
   116d4:	461a      	mov	r2, r3
   116d6:	bfa8      	it	ge
   116d8:	4642      	movge	r2, r8
   116da:	1a89      	subs	r1, r1, r2
   116dc:	1a9b      	subs	r3, r3, r2
   116de:	9106      	str	r1, [sp, #24]
   116e0:	9309      	str	r3, [sp, #36]	; 0x24
   116e2:	eba8 0802 	sub.w	r8, r8, r2
   116e6:	9b08      	ldr	r3, [sp, #32]
   116e8:	b163      	cbz	r3, 11704 <_dtoa_r+0x544>
   116ea:	9b07      	ldr	r3, [sp, #28]
   116ec:	2b00      	cmp	r3, #0
   116ee:	f000 82a7 	beq.w	11c40 <_dtoa_r+0xa80>
   116f2:	f1ba 0f00 	cmp.w	sl, #0
   116f6:	f300 8204 	bgt.w	11b02 <_dtoa_r+0x942>
   116fa:	9b08      	ldr	r3, [sp, #32]
   116fc:	ebb3 020a 	subs.w	r2, r3, sl
   11700:	f040 82ff 	bne.w	11d02 <_dtoa_r+0xb42>
   11704:	2101      	movs	r1, #1
   11706:	4620      	mov	r0, r4
   11708:	f7fb fca2 	bl	d050 <__i2b>
   1170c:	2f00      	cmp	r7, #0
   1170e:	4682      	mov	sl, r0
   11710:	f300 80af 	bgt.w	11872 <_dtoa_r+0x6b2>
   11714:	9b01      	ldr	r3, [sp, #4]
   11716:	2b01      	cmp	r3, #1
   11718:	f340 8187 	ble.w	11a2a <_dtoa_r+0x86a>
   1171c:	2300      	movs	r3, #0
   1171e:	9308      	str	r3, [sp, #32]
   11720:	2001      	movs	r0, #1
   11722:	2f00      	cmp	r7, #0
   11724:	f040 80b1 	bne.w	1188a <_dtoa_r+0x6ca>
   11728:	4440      	add	r0, r8
   1172a:	f010 001f 	ands.w	r0, r0, #31
   1172e:	f000 817a 	beq.w	11a26 <_dtoa_r+0x866>
   11732:	f1c0 0220 	rsb	r2, r0, #32
   11736:	2a04      	cmp	r2, #4
   11738:	f300 8088 	bgt.w	1184c <_dtoa_r+0x68c>
   1173c:	f040 81f6 	bne.w	11b2c <_dtoa_r+0x96c>
   11740:	9b06      	ldr	r3, [sp, #24]
   11742:	2b00      	cmp	r3, #0
   11744:	dd05      	ble.n	11752 <_dtoa_r+0x592>
   11746:	4629      	mov	r1, r5
   11748:	461a      	mov	r2, r3
   1174a:	4620      	mov	r0, r4
   1174c:	f7fb fdbc 	bl	d2c8 <__lshift>
   11750:	4605      	mov	r5, r0
   11752:	f1b8 0f00 	cmp.w	r8, #0
   11756:	dd05      	ble.n	11764 <_dtoa_r+0x5a4>
   11758:	4651      	mov	r1, sl
   1175a:	4642      	mov	r2, r8
   1175c:	4620      	mov	r0, r4
   1175e:	f7fb fdb3 	bl	d2c8 <__lshift>
   11762:	4682      	mov	sl, r0
   11764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11766:	2b00      	cmp	r3, #0
   11768:	f040 813f 	bne.w	119ea <_dtoa_r+0x82a>
   1176c:	f1b9 0f00 	cmp.w	r9, #0
   11770:	f340 8125 	ble.w	119be <_dtoa_r+0x7fe>
   11774:	9b07      	ldr	r3, [sp, #28]
   11776:	2b00      	cmp	r3, #0
   11778:	f040 80a3 	bne.w	118c2 <_dtoa_r+0x702>
   1177c:	9b04      	ldr	r3, [sp, #16]
   1177e:	3301      	adds	r3, #1
   11780:	9304      	str	r3, [sp, #16]
   11782:	f8dd 8000 	ldr.w	r8, [sp]
   11786:	2701      	movs	r7, #1
   11788:	e007      	b.n	1179a <_dtoa_r+0x5da>
   1178a:	4629      	mov	r1, r5
   1178c:	2300      	movs	r3, #0
   1178e:	220a      	movs	r2, #10
   11790:	4620      	mov	r0, r4
   11792:	f7fb fb63 	bl	ce5c <__multadd>
   11796:	3701      	adds	r7, #1
   11798:	4605      	mov	r5, r0
   1179a:	4651      	mov	r1, sl
   1179c:	4628      	mov	r0, r5
   1179e:	f7ff fc7b 	bl	11098 <quorem>
   117a2:	45b9      	cmp	r9, r7
   117a4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   117a8:	f808 0b01 	strb.w	r0, [r8], #1
   117ac:	dced      	bgt.n	1178a <_dtoa_r+0x5ca>
   117ae:	f1b9 0f00 	cmp.w	r9, #0
   117b2:	9a00      	ldr	r2, [sp, #0]
   117b4:	bfcc      	ite	gt
   117b6:	46cb      	movgt	fp, r9
   117b8:	f04f 0b01 	movle.w	fp, #1
   117bc:	4603      	mov	r3, r0
   117be:	4493      	add	fp, r2
   117c0:	2700      	movs	r7, #0
   117c2:	4629      	mov	r1, r5
   117c4:	2201      	movs	r2, #1
   117c6:	4620      	mov	r0, r4
   117c8:	9301      	str	r3, [sp, #4]
   117ca:	f7fb fd7d 	bl	d2c8 <__lshift>
   117ce:	4651      	mov	r1, sl
   117d0:	4605      	mov	r5, r0
   117d2:	f7fb fdf1 	bl	d3b8 <__mcmp>
   117d6:	2800      	cmp	r0, #0
   117d8:	f340 81af 	ble.w	11b3a <_dtoa_r+0x97a>
   117dc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   117e0:	9a00      	ldr	r2, [sp, #0]
   117e2:	f10b 3bff 	add.w	fp, fp, #4294967295
   117e6:	e004      	b.n	117f2 <_dtoa_r+0x632>
   117e8:	455a      	cmp	r2, fp
   117ea:	f000 81b1 	beq.w	11b50 <_dtoa_r+0x990>
   117ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   117f2:	2b39      	cmp	r3, #57	; 0x39
   117f4:	f10b 0901 	add.w	r9, fp, #1
   117f8:	d0f6      	beq.n	117e8 <_dtoa_r+0x628>
   117fa:	3301      	adds	r3, #1
   117fc:	f88b 3000 	strb.w	r3, [fp]
   11800:	4651      	mov	r1, sl
   11802:	4620      	mov	r0, r4
   11804:	f7fb fb20 	bl	ce48 <_Bfree>
   11808:	b156      	cbz	r6, 11820 <_dtoa_r+0x660>
   1180a:	b12f      	cbz	r7, 11818 <_dtoa_r+0x658>
   1180c:	42b7      	cmp	r7, r6
   1180e:	d003      	beq.n	11818 <_dtoa_r+0x658>
   11810:	4639      	mov	r1, r7
   11812:	4620      	mov	r0, r4
   11814:	f7fb fb18 	bl	ce48 <_Bfree>
   11818:	4631      	mov	r1, r6
   1181a:	4620      	mov	r0, r4
   1181c:	f7fb fb14 	bl	ce48 <_Bfree>
   11820:	4629      	mov	r1, r5
   11822:	4620      	mov	r0, r4
   11824:	f7fb fb10 	bl	ce48 <_Bfree>
   11828:	2300      	movs	r3, #0
   1182a:	f889 3000 	strb.w	r3, [r9]
   1182e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11832:	601a      	str	r2, [r3, #0]
   11834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11836:	2b00      	cmp	r3, #0
   11838:	f43f acfe 	beq.w	11238 <_dtoa_r+0x78>
   1183c:	9800      	ldr	r0, [sp, #0]
   1183e:	f8c3 9000 	str.w	r9, [r3]
   11842:	b00f      	add	sp, #60	; 0x3c
   11844:	ecbd 8b02 	vpop	{d8}
   11848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1184c:	f1c0 001c 	rsb	r0, r0, #28
   11850:	9b06      	ldr	r3, [sp, #24]
   11852:	4403      	add	r3, r0
   11854:	9306      	str	r3, [sp, #24]
   11856:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11858:	4403      	add	r3, r0
   1185a:	9309      	str	r3, [sp, #36]	; 0x24
   1185c:	4480      	add	r8, r0
   1185e:	e76f      	b.n	11740 <_dtoa_r+0x580>
   11860:	f1c2 0220 	rsb	r2, r2, #32
   11864:	fa06 f202 	lsl.w	r2, r6, r2
   11868:	ee07 2a10 	vmov	s14, r2
   1186c:	e509      	b.n	11282 <_dtoa_r+0xc2>
   1186e:	2601      	movs	r6, #1
   11870:	e563      	b.n	1133a <_dtoa_r+0x17a>
   11872:	4601      	mov	r1, r0
   11874:	463a      	mov	r2, r7
   11876:	4620      	mov	r0, r4
   11878:	f7fb fcc6 	bl	d208 <__pow5mult>
   1187c:	9b01      	ldr	r3, [sp, #4]
   1187e:	2b01      	cmp	r3, #1
   11880:	4682      	mov	sl, r0
   11882:	f340 81c5 	ble.w	11c10 <_dtoa_r+0xa50>
   11886:	2300      	movs	r3, #0
   11888:	9308      	str	r3, [sp, #32]
   1188a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1188e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   11892:	6910      	ldr	r0, [r2, #16]
   11894:	f7fb fb8c 	bl	cfb0 <__hi0bits>
   11898:	f1c0 0020 	rsb	r0, r0, #32
   1189c:	e744      	b.n	11728 <_dtoa_r+0x568>
   1189e:	bf00      	nop
   118a0:	200002a8 	.word	0x200002a8
   118a4:	20000c70 	.word	0x20000c70
   118a8:	4631      	mov	r1, r6
   118aa:	2300      	movs	r3, #0
   118ac:	220a      	movs	r2, #10
   118ae:	4620      	mov	r0, r4
   118b0:	f7fb fad4 	bl	ce5c <__multadd>
   118b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   118b6:	2b00      	cmp	r3, #0
   118b8:	4606      	mov	r6, r0
   118ba:	f340 82ce 	ble.w	11e5a <_dtoa_r+0xc9a>
   118be:	9704      	str	r7, [sp, #16]
   118c0:	4699      	mov	r9, r3
   118c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118c4:	2b00      	cmp	r3, #0
   118c6:	dd05      	ble.n	118d4 <_dtoa_r+0x714>
   118c8:	4631      	mov	r1, r6
   118ca:	461a      	mov	r2, r3
   118cc:	4620      	mov	r0, r4
   118ce:	f7fb fcfb 	bl	d2c8 <__lshift>
   118d2:	4606      	mov	r6, r0
   118d4:	9b08      	ldr	r3, [sp, #32]
   118d6:	2b00      	cmp	r3, #0
   118d8:	f040 81eb 	bne.w	11cb2 <_dtoa_r+0xaf2>
   118dc:	46b0      	mov	r8, r6
   118de:	9b02      	ldr	r3, [sp, #8]
   118e0:	9f00      	ldr	r7, [sp, #0]
   118e2:	f003 0201 	and.w	r2, r3, #1
   118e6:	1e7b      	subs	r3, r7, #1
   118e8:	444b      	add	r3, r9
   118ea:	9308      	str	r3, [sp, #32]
   118ec:	9b01      	ldr	r3, [sp, #4]
   118ee:	920a      	str	r2, [sp, #40]	; 0x28
   118f0:	4313      	orrs	r3, r2
   118f2:	9309      	str	r3, [sp, #36]	; 0x24
   118f4:	4651      	mov	r1, sl
   118f6:	4628      	mov	r0, r5
   118f8:	f7ff fbce 	bl	11098 <quorem>
   118fc:	4631      	mov	r1, r6
   118fe:	4683      	mov	fp, r0
   11900:	4628      	mov	r0, r5
   11902:	f7fb fd59 	bl	d3b8 <__mcmp>
   11906:	4642      	mov	r2, r8
   11908:	4651      	mov	r1, sl
   1190a:	4681      	mov	r9, r0
   1190c:	4620      	mov	r0, r4
   1190e:	f7fb fd75 	bl	d3fc <__mdiff>
   11912:	68c2      	ldr	r2, [r0, #12]
   11914:	4601      	mov	r1, r0
   11916:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1191a:	2a00      	cmp	r2, #0
   1191c:	d142      	bne.n	119a4 <_dtoa_r+0x7e4>
   1191e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   11922:	4628      	mov	r0, r5
   11924:	f7fb fd48 	bl	d3b8 <__mcmp>
   11928:	9906      	ldr	r1, [sp, #24]
   1192a:	9002      	str	r0, [sp, #8]
   1192c:	4620      	mov	r0, r4
   1192e:	f7fb fa8b 	bl	ce48 <_Bfree>
   11932:	9a02      	ldr	r2, [sp, #8]
   11934:	9b07      	ldr	r3, [sp, #28]
   11936:	b91a      	cbnz	r2, 11940 <_dtoa_r+0x780>
   11938:	9909      	ldr	r1, [sp, #36]	; 0x24
   1193a:	2900      	cmp	r1, #0
   1193c:	f000 827e 	beq.w	11e3c <_dtoa_r+0xc7c>
   11940:	f1b9 0f00 	cmp.w	r9, #0
   11944:	f2c0 8183 	blt.w	11c4e <_dtoa_r+0xa8e>
   11948:	9901      	ldr	r1, [sp, #4]
   1194a:	ea49 0901 	orr.w	r9, r9, r1
   1194e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11950:	ea51 0909 	orrs.w	r9, r1, r9
   11954:	f000 817b 	beq.w	11c4e <_dtoa_r+0xa8e>
   11958:	2a00      	cmp	r2, #0
   1195a:	f300 81c6 	bgt.w	11cea <_dtoa_r+0xb2a>
   1195e:	9a08      	ldr	r2, [sp, #32]
   11960:	703b      	strb	r3, [r7, #0]
   11962:	f107 0901 	add.w	r9, r7, #1
   11966:	4297      	cmp	r7, r2
   11968:	46cb      	mov	fp, r9
   1196a:	f000 81c4 	beq.w	11cf6 <_dtoa_r+0xb36>
   1196e:	4629      	mov	r1, r5
   11970:	2300      	movs	r3, #0
   11972:	220a      	movs	r2, #10
   11974:	4620      	mov	r0, r4
   11976:	f7fb fa71 	bl	ce5c <__multadd>
   1197a:	4546      	cmp	r6, r8
   1197c:	4605      	mov	r5, r0
   1197e:	4631      	mov	r1, r6
   11980:	f04f 0300 	mov.w	r3, #0
   11984:	f04f 020a 	mov.w	r2, #10
   11988:	4620      	mov	r0, r4
   1198a:	d012      	beq.n	119b2 <_dtoa_r+0x7f2>
   1198c:	f7fb fa66 	bl	ce5c <__multadd>
   11990:	4641      	mov	r1, r8
   11992:	4606      	mov	r6, r0
   11994:	2300      	movs	r3, #0
   11996:	220a      	movs	r2, #10
   11998:	4620      	mov	r0, r4
   1199a:	f7fb fa5f 	bl	ce5c <__multadd>
   1199e:	464f      	mov	r7, r9
   119a0:	4680      	mov	r8, r0
   119a2:	e7a7      	b.n	118f4 <_dtoa_r+0x734>
   119a4:	4620      	mov	r0, r4
   119a6:	9302      	str	r3, [sp, #8]
   119a8:	f7fb fa4e 	bl	ce48 <_Bfree>
   119ac:	9b02      	ldr	r3, [sp, #8]
   119ae:	2201      	movs	r2, #1
   119b0:	e7c6      	b.n	11940 <_dtoa_r+0x780>
   119b2:	f7fb fa53 	bl	ce5c <__multadd>
   119b6:	464f      	mov	r7, r9
   119b8:	4606      	mov	r6, r0
   119ba:	4680      	mov	r8, r0
   119bc:	e79a      	b.n	118f4 <_dtoa_r+0x734>
   119be:	9b01      	ldr	r3, [sp, #4]
   119c0:	2b02      	cmp	r3, #2
   119c2:	dc71      	bgt.n	11aa8 <_dtoa_r+0x8e8>
   119c4:	9b07      	ldr	r3, [sp, #28]
   119c6:	2b00      	cmp	r3, #0
   119c8:	f47f af7b 	bne.w	118c2 <_dtoa_r+0x702>
   119cc:	9b04      	ldr	r3, [sp, #16]
   119ce:	4651      	mov	r1, sl
   119d0:	3301      	adds	r3, #1
   119d2:	4628      	mov	r0, r5
   119d4:	9304      	str	r3, [sp, #16]
   119d6:	f7ff fb5f 	bl	11098 <quorem>
   119da:	f8dd b000 	ldr.w	fp, [sp]
   119de:	f100 0330 	add.w	r3, r0, #48	; 0x30
   119e2:	f80b 3b01 	strb.w	r3, [fp], #1
   119e6:	2700      	movs	r7, #0
   119e8:	e6eb      	b.n	117c2 <_dtoa_r+0x602>
   119ea:	4651      	mov	r1, sl
   119ec:	4628      	mov	r0, r5
   119ee:	f7fb fce3 	bl	d3b8 <__mcmp>
   119f2:	2800      	cmp	r0, #0
   119f4:	f6bf aeba 	bge.w	1176c <_dtoa_r+0x5ac>
   119f8:	4629      	mov	r1, r5
   119fa:	2300      	movs	r3, #0
   119fc:	220a      	movs	r2, #10
   119fe:	4620      	mov	r0, r4
   11a00:	f7fb fa2c 	bl	ce5c <__multadd>
   11a04:	9b04      	ldr	r3, [sp, #16]
   11a06:	1e5f      	subs	r7, r3, #1
   11a08:	9b07      	ldr	r3, [sp, #28]
   11a0a:	4605      	mov	r5, r0
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	f47f af4b 	bne.w	118a8 <_dtoa_r+0x6e8>
   11a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a14:	2b00      	cmp	r3, #0
   11a16:	f340 8218 	ble.w	11e4a <_dtoa_r+0xc8a>
   11a1a:	4699      	mov	r9, r3
   11a1c:	e6b1      	b.n	11782 <_dtoa_r+0x5c2>
   11a1e:	4bbc      	ldr	r3, [pc, #752]	; (11d10 <_dtoa_r+0xb50>)
   11a20:	9300      	str	r3, [sp, #0]
   11a22:	3303      	adds	r3, #3
   11a24:	e4a4      	b.n	11370 <_dtoa_r+0x1b0>
   11a26:	201c      	movs	r0, #28
   11a28:	e712      	b.n	11850 <_dtoa_r+0x690>
   11a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11a2e:	2800      	cmp	r0, #0
   11a30:	f47f ae74 	bne.w	1171c <_dtoa_r+0x55c>
   11a34:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11a38:	2a00      	cmp	r2, #0
   11a3a:	f000 80f4 	beq.w	11c26 <_dtoa_r+0xa66>
   11a3e:	9b02      	ldr	r3, [sp, #8]
   11a40:	9308      	str	r3, [sp, #32]
   11a42:	e66d      	b.n	11720 <_dtoa_r+0x560>
   11a44:	2301      	movs	r3, #1
   11a46:	9307      	str	r3, [sp, #28]
   11a48:	9b04      	ldr	r3, [sp, #16]
   11a4a:	445b      	add	r3, fp
   11a4c:	f103 0901 	add.w	r9, r3, #1
   11a50:	f1b9 0f01 	cmp.w	r9, #1
   11a54:	46cc      	mov	ip, r9
   11a56:	930b      	str	r3, [sp, #44]	; 0x2c
   11a58:	bfb8      	it	lt
   11a5a:	f04f 0c01 	movlt.w	ip, #1
   11a5e:	2100      	movs	r1, #0
   11a60:	f1bc 0f17 	cmp.w	ip, #23
   11a64:	63e1      	str	r1, [r4, #60]	; 0x3c
   11a66:	f77f acbc 	ble.w	113e2 <_dtoa_r+0x222>
   11a6a:	2001      	movs	r0, #1
   11a6c:	2204      	movs	r2, #4
   11a6e:	0052      	lsls	r2, r2, #1
   11a70:	f102 0314 	add.w	r3, r2, #20
   11a74:	4563      	cmp	r3, ip
   11a76:	4601      	mov	r1, r0
   11a78:	f100 0001 	add.w	r0, r0, #1
   11a7c:	d9f7      	bls.n	11a6e <_dtoa_r+0x8ae>
   11a7e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11a80:	e4af      	b.n	113e2 <_dtoa_r+0x222>
   11a82:	2301      	movs	r3, #1
   11a84:	9307      	str	r3, [sp, #28]
   11a86:	f1bb 0f00 	cmp.w	fp, #0
   11a8a:	dd52      	ble.n	11b32 <_dtoa_r+0x972>
   11a8c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11a90:	46d9      	mov	r9, fp
   11a92:	46dc      	mov	ip, fp
   11a94:	e7e3      	b.n	11a5e <_dtoa_r+0x89e>
   11a96:	2300      	movs	r3, #0
   11a98:	9307      	str	r3, [sp, #28]
   11a9a:	e7d5      	b.n	11a48 <_dtoa_r+0x888>
   11a9c:	2300      	movs	r3, #0
   11a9e:	9307      	str	r3, [sp, #28]
   11aa0:	e7f1      	b.n	11a86 <_dtoa_r+0x8c6>
   11aa2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11aa6:	9704      	str	r7, [sp, #16]
   11aa8:	f1b9 0f00 	cmp.w	r9, #0
   11aac:	f47f ada1 	bne.w	115f2 <_dtoa_r+0x432>
   11ab0:	4651      	mov	r1, sl
   11ab2:	464b      	mov	r3, r9
   11ab4:	2205      	movs	r2, #5
   11ab6:	4620      	mov	r0, r4
   11ab8:	f7fb f9d0 	bl	ce5c <__multadd>
   11abc:	4601      	mov	r1, r0
   11abe:	4682      	mov	sl, r0
   11ac0:	4628      	mov	r0, r5
   11ac2:	f7fb fc79 	bl	d3b8 <__mcmp>
   11ac6:	2800      	cmp	r0, #0
   11ac8:	f77f ad93 	ble.w	115f2 <_dtoa_r+0x432>
   11acc:	9b04      	ldr	r3, [sp, #16]
   11ace:	f103 0b01 	add.w	fp, r3, #1
   11ad2:	9b00      	ldr	r3, [sp, #0]
   11ad4:	2231      	movs	r2, #49	; 0x31
   11ad6:	4698      	mov	r8, r3
   11ad8:	f803 2b01 	strb.w	r2, [r3], #1
   11adc:	9300      	str	r3, [sp, #0]
   11ade:	4651      	mov	r1, sl
   11ae0:	4620      	mov	r0, r4
   11ae2:	f7fb f9b1 	bl	ce48 <_Bfree>
   11ae6:	f10b 0301 	add.w	r3, fp, #1
   11aea:	f8dd 9000 	ldr.w	r9, [sp]
   11aee:	9304      	str	r3, [sp, #16]
   11af0:	f8cd 8000 	str.w	r8, [sp]
   11af4:	2e00      	cmp	r6, #0
   11af6:	f47f ae8f 	bne.w	11818 <_dtoa_r+0x658>
   11afa:	e691      	b.n	11820 <_dtoa_r+0x660>
   11afc:	eba3 0a0a 	sub.w	sl, r3, sl
   11b00:	e5c5      	b.n	1168e <_dtoa_r+0x4ce>
   11b02:	4631      	mov	r1, r6
   11b04:	4652      	mov	r2, sl
   11b06:	4620      	mov	r0, r4
   11b08:	f7fb fb7e 	bl	d208 <__pow5mult>
   11b0c:	462a      	mov	r2, r5
   11b0e:	4601      	mov	r1, r0
   11b10:	4606      	mov	r6, r0
   11b12:	4620      	mov	r0, r4
   11b14:	f7fb faca 	bl	d0ac <__multiply>
   11b18:	4629      	mov	r1, r5
   11b1a:	4605      	mov	r5, r0
   11b1c:	4620      	mov	r0, r4
   11b1e:	f7fb f993 	bl	ce48 <_Bfree>
   11b22:	e5ea      	b.n	116fa <_dtoa_r+0x53a>
   11b24:	2002      	movs	r0, #2
   11b26:	eeb0 5b48 	vmov.f64	d5, d8
   11b2a:	e481      	b.n	11430 <_dtoa_r+0x270>
   11b2c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11b30:	e68e      	b.n	11850 <_dtoa_r+0x690>
   11b32:	f04f 0b01 	mov.w	fp, #1
   11b36:	46d9      	mov	r9, fp
   11b38:	e44f      	b.n	113da <_dtoa_r+0x21a>
   11b3a:	d103      	bne.n	11b44 <_dtoa_r+0x984>
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	07db      	lsls	r3, r3, #31
   11b40:	f53f ae4c 	bmi.w	117dc <_dtoa_r+0x61c>
   11b44:	46d9      	mov	r9, fp
   11b46:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11b4a:	2b30      	cmp	r3, #48	; 0x30
   11b4c:	d0fa      	beq.n	11b44 <_dtoa_r+0x984>
   11b4e:	e657      	b.n	11800 <_dtoa_r+0x640>
   11b50:	9b04      	ldr	r3, [sp, #16]
   11b52:	9a00      	ldr	r2, [sp, #0]
   11b54:	3301      	adds	r3, #1
   11b56:	9304      	str	r3, [sp, #16]
   11b58:	2331      	movs	r3, #49	; 0x31
   11b5a:	7013      	strb	r3, [r2, #0]
   11b5c:	e650      	b.n	11800 <_dtoa_r+0x640>
   11b5e:	f1ba 0f00 	cmp.w	sl, #0
   11b62:	f000 8123 	beq.w	11dac <_dtoa_r+0xbec>
   11b66:	f202 4233 	addw	r2, r2, #1075	; 0x433
   11b6a:	9b06      	ldr	r3, [sp, #24]
   11b6c:	9309      	str	r3, [sp, #36]	; 0x24
   11b6e:	4413      	add	r3, r2
   11b70:	f8dd a020 	ldr.w	sl, [sp, #32]
   11b74:	9306      	str	r3, [sp, #24]
   11b76:	4490      	add	r8, r2
   11b78:	e592      	b.n	116a0 <_dtoa_r+0x4e0>
   11b7a:	ee07 0a90 	vmov	s15, r0
   11b7e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11b82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11b86:	eea6 5b07 	vfma.f64	d5, d6, d7
   11b8a:	ee15 2a90 	vmov	r2, s11
   11b8e:	ec51 0b15 	vmov	r0, r1, d5
   11b92:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11b96:	ec41 0b15 	vmov	d5, r0, r1
   11b9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   11b9e:	ee36 7b47 	vsub.f64	d7, d6, d7
   11ba2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11baa:	f300 8137 	bgt.w	11e1c <_dtoa_r+0xc5c>
   11bae:	eeb1 5b45 	vneg.f64	d5, d5
   11bb2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11bba:	f57f acfb 	bpl.w	115b4 <_dtoa_r+0x3f4>
   11bbe:	f04f 0a00 	mov.w	sl, #0
   11bc2:	4656      	mov	r6, sl
   11bc4:	e515      	b.n	115f2 <_dtoa_r+0x432>
   11bc6:	f000 80f5 	beq.w	11db4 <_dtoa_r+0xbf4>
   11bca:	9b04      	ldr	r3, [sp, #16]
   11bcc:	4951      	ldr	r1, [pc, #324]	; (11d14 <_dtoa_r+0xb54>)
   11bce:	425a      	negs	r2, r3
   11bd0:	f002 000f 	and.w	r0, r2, #15
   11bd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11bd8:	ed91 6b00 	vldr	d6, [r1]
   11bdc:	1112      	asrs	r2, r2, #4
   11bde:	ee28 6b06 	vmul.f64	d6, d8, d6
   11be2:	f000 8142 	beq.w	11e6a <_dtoa_r+0xcaa>
   11be6:	eeb0 7b46 	vmov.f64	d7, d6
   11bea:	494b      	ldr	r1, [pc, #300]	; (11d18 <_dtoa_r+0xb58>)
   11bec:	2600      	movs	r6, #0
   11bee:	2002      	movs	r0, #2
   11bf0:	07d3      	lsls	r3, r2, #31
   11bf2:	d505      	bpl.n	11c00 <_dtoa_r+0xa40>
   11bf4:	ed91 5b00 	vldr	d5, [r1]
   11bf8:	3001      	adds	r0, #1
   11bfa:	2601      	movs	r6, #1
   11bfc:	ee27 7b05 	vmul.f64	d7, d7, d5
   11c00:	1052      	asrs	r2, r2, #1
   11c02:	f101 0108 	add.w	r1, r1, #8
   11c06:	d1f3      	bne.n	11bf0 <_dtoa_r+0xa30>
   11c08:	2e00      	cmp	r6, #0
   11c0a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   11c0e:	e41e      	b.n	1144e <_dtoa_r+0x28e>
   11c10:	9b02      	ldr	r3, [sp, #8]
   11c12:	2b00      	cmp	r3, #0
   11c14:	f47f ae37 	bne.w	11886 <_dtoa_r+0x6c6>
   11c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11c1c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   11c20:	2a00      	cmp	r2, #0
   11c22:	f040 8137 	bne.w	11e94 <_dtoa_r+0xcd4>
   11c26:	4a3d      	ldr	r2, [pc, #244]	; (11d1c <_dtoa_r+0xb5c>)
   11c28:	400a      	ands	r2, r1
   11c2a:	2a00      	cmp	r2, #0
   11c2c:	f000 80fa 	beq.w	11e24 <_dtoa_r+0xc64>
   11c30:	9b06      	ldr	r3, [sp, #24]
   11c32:	3301      	adds	r3, #1
   11c34:	9306      	str	r3, [sp, #24]
   11c36:	2301      	movs	r3, #1
   11c38:	f108 0801 	add.w	r8, r8, #1
   11c3c:	9308      	str	r3, [sp, #32]
   11c3e:	e56f      	b.n	11720 <_dtoa_r+0x560>
   11c40:	4629      	mov	r1, r5
   11c42:	9a08      	ldr	r2, [sp, #32]
   11c44:	4620      	mov	r0, r4
   11c46:	f7fb fadf 	bl	d208 <__pow5mult>
   11c4a:	4605      	mov	r5, r0
   11c4c:	e55a      	b.n	11704 <_dtoa_r+0x544>
   11c4e:	2a00      	cmp	r2, #0
   11c50:	dd12      	ble.n	11c78 <_dtoa_r+0xab8>
   11c52:	4629      	mov	r1, r5
   11c54:	2201      	movs	r2, #1
   11c56:	4620      	mov	r0, r4
   11c58:	9301      	str	r3, [sp, #4]
   11c5a:	f7fb fb35 	bl	d2c8 <__lshift>
   11c5e:	4651      	mov	r1, sl
   11c60:	4605      	mov	r5, r0
   11c62:	f7fb fba9 	bl	d3b8 <__mcmp>
   11c66:	2800      	cmp	r0, #0
   11c68:	9b01      	ldr	r3, [sp, #4]
   11c6a:	f340 80e1 	ble.w	11e30 <_dtoa_r+0xc70>
   11c6e:	2b39      	cmp	r3, #57	; 0x39
   11c70:	f000 80ca 	beq.w	11e08 <_dtoa_r+0xc48>
   11c74:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11c78:	46b9      	mov	r9, r7
   11c7a:	f809 3b01 	strb.w	r3, [r9], #1
   11c7e:	9b04      	ldr	r3, [sp, #16]
   11c80:	3301      	adds	r3, #1
   11c82:	4637      	mov	r7, r6
   11c84:	9304      	str	r3, [sp, #16]
   11c86:	4646      	mov	r6, r8
   11c88:	e5ba      	b.n	11800 <_dtoa_r+0x640>
   11c8a:	ee38 8b08 	vadd.f64	d8, d8, d8
   11c8e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c96:	dc0a      	bgt.n	11cae <_dtoa_r+0xaee>
   11c98:	eeb4 8b46 	vcmp.f64	d8, d6
   11c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ca0:	f47f acdc 	bne.w	1165c <_dtoa_r+0x49c>
   11ca4:	ee17 3a10 	vmov	r3, s14
   11ca8:	07d8      	lsls	r0, r3, #31
   11caa:	f57f acd7 	bpl.w	1165c <_dtoa_r+0x49c>
   11cae:	9a00      	ldr	r2, [sp, #0]
   11cb0:	e454      	b.n	1155c <_dtoa_r+0x39c>
   11cb2:	6871      	ldr	r1, [r6, #4]
   11cb4:	4620      	mov	r0, r4
   11cb6:	f7fb f8a1 	bl	cdfc <_Balloc>
   11cba:	4607      	mov	r7, r0
   11cbc:	2800      	cmp	r0, #0
   11cbe:	f000 80de 	beq.w	11e7e <_dtoa_r+0xcbe>
   11cc2:	6933      	ldr	r3, [r6, #16]
   11cc4:	3302      	adds	r3, #2
   11cc6:	009a      	lsls	r2, r3, #2
   11cc8:	f106 010c 	add.w	r1, r6, #12
   11ccc:	300c      	adds	r0, #12
   11cce:	f7f6 fa01 	bl	80d4 <memcpy>
   11cd2:	4639      	mov	r1, r7
   11cd4:	2201      	movs	r2, #1
   11cd6:	4620      	mov	r0, r4
   11cd8:	f7fb faf6 	bl	d2c8 <__lshift>
   11cdc:	4680      	mov	r8, r0
   11cde:	e5fe      	b.n	118de <_dtoa_r+0x71e>
   11ce0:	9b06      	ldr	r3, [sp, #24]
   11ce2:	eba3 0309 	sub.w	r3, r3, r9
   11ce6:	9309      	str	r3, [sp, #36]	; 0x24
   11ce8:	e4da      	b.n	116a0 <_dtoa_r+0x4e0>
   11cea:	2b39      	cmp	r3, #57	; 0x39
   11cec:	f000 808c 	beq.w	11e08 <_dtoa_r+0xc48>
   11cf0:	46b9      	mov	r9, r7
   11cf2:	3301      	adds	r3, #1
   11cf4:	e7c1      	b.n	11c7a <_dtoa_r+0xaba>
   11cf6:	9a04      	ldr	r2, [sp, #16]
   11cf8:	3201      	adds	r2, #1
   11cfa:	4637      	mov	r7, r6
   11cfc:	9204      	str	r2, [sp, #16]
   11cfe:	4646      	mov	r6, r8
   11d00:	e55f      	b.n	117c2 <_dtoa_r+0x602>
   11d02:	4629      	mov	r1, r5
   11d04:	4620      	mov	r0, r4
   11d06:	f7fb fa7f 	bl	d208 <__pow5mult>
   11d0a:	4605      	mov	r5, r0
   11d0c:	e4fa      	b.n	11704 <_dtoa_r+0x544>
   11d0e:	bf00      	nop
   11d10:	20000bb4 	.word	0x20000bb4
   11d14:	200002a8 	.word	0x200002a8
   11d18:	20000280 	.word	0x20000280
   11d1c:	7ff00000 	.word	0x7ff00000
   11d20:	4b5e      	ldr	r3, [pc, #376]	; (11e9c <_dtoa_r+0xcdc>)
   11d22:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   11d26:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11d2a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   11d2e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   11d32:	ee36 7b47 	vsub.f64	d7, d6, d7
   11d36:	ec41 0b16 	vmov	d6, r0, r1
   11d3a:	ee15 1a90 	vmov	r1, s11
   11d3e:	ee23 3b06 	vmul.f64	d3, d3, d6
   11d42:	9800      	ldr	r0, [sp, #0]
   11d44:	3130      	adds	r1, #48	; 0x30
   11d46:	2a01      	cmp	r2, #1
   11d48:	f800 1b01 	strb.w	r1, [r0], #1
   11d4c:	f000 8083 	beq.w	11e56 <_dtoa_r+0xc96>
   11d50:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11d54:	9b00      	ldr	r3, [sp, #0]
   11d56:	1899      	adds	r1, r3, r2
   11d58:	ee27 7b04 	vmul.f64	d7, d7, d4
   11d5c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11d60:	ee16 3a90 	vmov	r3, s13
   11d64:	3330      	adds	r3, #48	; 0x30
   11d66:	f800 3b01 	strb.w	r3, [r0], #1
   11d6a:	4281      	cmp	r1, r0
   11d6c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11d70:	ee37 7b45 	vsub.f64	d7, d7, d5
   11d74:	d1f0      	bne.n	11d58 <_dtoa_r+0xb98>
   11d76:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   11d7a:	ee33 5b06 	vadd.f64	d5, d3, d6
   11d7e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11d86:	f53f abe3 	bmi.w	11550 <_dtoa_r+0x390>
   11d8a:	ee36 6b43 	vsub.f64	d6, d6, d3
   11d8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11d96:	f77f ac0d 	ble.w	115b4 <_dtoa_r+0x3f4>
   11d9a:	4689      	mov	r9, r1
   11d9c:	3901      	subs	r1, #1
   11d9e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11da2:	2b30      	cmp	r3, #48	; 0x30
   11da4:	d0f9      	beq.n	11d9a <_dtoa_r+0xbda>
   11da6:	1c73      	adds	r3, r6, #1
   11da8:	9304      	str	r3, [sp, #16]
   11daa:	e539      	b.n	11820 <_dtoa_r+0x660>
   11dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11dae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11db2:	e6da      	b.n	11b6a <_dtoa_r+0x9aa>
   11db4:	2002      	movs	r0, #2
   11db6:	eeb0 6b48 	vmov.f64	d6, d8
   11dba:	f7ff bb48 	b.w	1144e <_dtoa_r+0x28e>
   11dbe:	f1b9 0f00 	cmp.w	r9, #0
   11dc2:	f43f aeda 	beq.w	11b7a <_dtoa_r+0x9ba>
   11dc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11dc8:	2a00      	cmp	r2, #0
   11dca:	f77f abf3 	ble.w	115b4 <_dtoa_r+0x3f4>
   11dce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11dd2:	ee26 6b04 	vmul.f64	d6, d6, d4
   11dd6:	3001      	adds	r0, #1
   11dd8:	ee07 0a90 	vmov	s15, r0
   11ddc:	9b04      	ldr	r3, [sp, #16]
   11dde:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   11de2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   11de6:	eea6 7b05 	vfma.f64	d7, d6, d5
   11dea:	ee17 ca90 	vmov	ip, s15
   11dee:	ec51 0b17 	vmov	r0, r1, d7
   11df2:	1e5e      	subs	r6, r3, #1
   11df4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   11df8:	f7ff bb47 	b.w	1148a <_dtoa_r+0x2ca>
   11dfc:	9b04      	ldr	r3, [sp, #16]
   11dfe:	3301      	adds	r3, #1
   11e00:	9304      	str	r3, [sp, #16]
   11e02:	2331      	movs	r3, #49	; 0x31
   11e04:	f7ff bbb1 	b.w	1156a <_dtoa_r+0x3aa>
   11e08:	9b04      	ldr	r3, [sp, #16]
   11e0a:	46bb      	mov	fp, r7
   11e0c:	3301      	adds	r3, #1
   11e0e:	9304      	str	r3, [sp, #16]
   11e10:	2339      	movs	r3, #57	; 0x39
   11e12:	4637      	mov	r7, r6
   11e14:	f80b 3b01 	strb.w	r3, [fp], #1
   11e18:	4646      	mov	r6, r8
   11e1a:	e4e1      	b.n	117e0 <_dtoa_r+0x620>
   11e1c:	f04f 0a00 	mov.w	sl, #0
   11e20:	4656      	mov	r6, sl
   11e22:	e653      	b.n	11acc <_dtoa_r+0x90c>
   11e24:	9208      	str	r2, [sp, #32]
   11e26:	e47b      	b.n	11720 <_dtoa_r+0x560>
   11e28:	1c73      	adds	r3, r6, #1
   11e2a:	9304      	str	r3, [sp, #16]
   11e2c:	4689      	mov	r9, r1
   11e2e:	e4f7      	b.n	11820 <_dtoa_r+0x660>
   11e30:	f47f af22 	bne.w	11c78 <_dtoa_r+0xab8>
   11e34:	07da      	lsls	r2, r3, #31
   11e36:	f57f af1f 	bpl.w	11c78 <_dtoa_r+0xab8>
   11e3a:	e718      	b.n	11c6e <_dtoa_r+0xaae>
   11e3c:	2b39      	cmp	r3, #57	; 0x39
   11e3e:	d0e3      	beq.n	11e08 <_dtoa_r+0xc48>
   11e40:	f1b9 0f00 	cmp.w	r9, #0
   11e44:	f73f af16 	bgt.w	11c74 <_dtoa_r+0xab4>
   11e48:	e716      	b.n	11c78 <_dtoa_r+0xab8>
   11e4a:	9b01      	ldr	r3, [sp, #4]
   11e4c:	2b02      	cmp	r3, #2
   11e4e:	f73f ae28 	bgt.w	11aa2 <_dtoa_r+0x8e2>
   11e52:	9704      	str	r7, [sp, #16]
   11e54:	e5ba      	b.n	119cc <_dtoa_r+0x80c>
   11e56:	4601      	mov	r1, r0
   11e58:	e78d      	b.n	11d76 <_dtoa_r+0xbb6>
   11e5a:	9b01      	ldr	r3, [sp, #4]
   11e5c:	2b02      	cmp	r3, #2
   11e5e:	f73f ae20 	bgt.w	11aa2 <_dtoa_r+0x8e2>
   11e62:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11e66:	9704      	str	r7, [sp, #16]
   11e68:	e52b      	b.n	118c2 <_dtoa_r+0x702>
   11e6a:	2002      	movs	r0, #2
   11e6c:	f7ff baef 	b.w	1144e <_dtoa_r+0x28e>
   11e70:	4b0b      	ldr	r3, [pc, #44]	; (11ea0 <_dtoa_r+0xce0>)
   11e72:	480c      	ldr	r0, [pc, #48]	; (11ea4 <_dtoa_r+0xce4>)
   11e74:	2200      	movs	r2, #0
   11e76:	f240 11af 	movw	r1, #431	; 0x1af
   11e7a:	f7ff f8b1 	bl	10fe0 <__assert_func>
   11e7e:	4b08      	ldr	r3, [pc, #32]	; (11ea0 <_dtoa_r+0xce0>)
   11e80:	4808      	ldr	r0, [pc, #32]	; (11ea4 <_dtoa_r+0xce4>)
   11e82:	463a      	mov	r2, r7
   11e84:	f240 21ef 	movw	r1, #751	; 0x2ef
   11e88:	f7ff f8aa 	bl	10fe0 <__assert_func>
   11e8c:	4b06      	ldr	r3, [pc, #24]	; (11ea8 <_dtoa_r+0xce8>)
   11e8e:	9300      	str	r3, [sp, #0]
   11e90:	f7ff b9d2 	b.w	11238 <_dtoa_r+0x78>
   11e94:	9b02      	ldr	r3, [sp, #8]
   11e96:	9308      	str	r3, [sp, #32]
   11e98:	e4f7      	b.n	1188a <_dtoa_r+0x6ca>
   11e9a:	bf00      	nop
   11e9c:	200002a8 	.word	0x200002a8
   11ea0:	200008c8 	.word	0x200008c8
   11ea4:	20000bb8 	.word	0x20000bb8
   11ea8:	20000ba8 	.word	0x20000ba8

00011eac <_strtoul_l.constprop.0>:
   11eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11eb0:	4607      	mov	r7, r0
   11eb2:	484c      	ldr	r0, [pc, #304]	; (11fe4 <_strtoul_l.constprop.0+0x138>)
   11eb4:	460e      	mov	r6, r1
   11eb6:	4635      	mov	r5, r6
   11eb8:	f816 eb01 	ldrb.w	lr, [r6], #1
   11ebc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11ec0:	f01c 0c08 	ands.w	ip, ip, #8
   11ec4:	d1f7      	bne.n	11eb6 <_strtoul_l.constprop.0+0xa>
   11ec6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   11eca:	d05a      	beq.n	11f82 <_strtoul_l.constprop.0+0xd6>
   11ecc:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11ed0:	bf03      	ittte	eq
   11ed2:	f896 e000 	ldrbeq.w	lr, [r6]
   11ed6:	4664      	moveq	r4, ip
   11ed8:	1cae      	addeq	r6, r5, #2
   11eda:	4664      	movne	r4, ip
   11edc:	b15b      	cbz	r3, 11ef6 <_strtoul_l.constprop.0+0x4a>
   11ede:	2b10      	cmp	r3, #16
   11ee0:	d054      	beq.n	11f8c <_strtoul_l.constprop.0+0xe0>
   11ee2:	f04f 38ff 	mov.w	r8, #4294967295
   11ee6:	fbb8 f8f3 	udiv	r8, r8, r3
   11eea:	fb03 fa08 	mul.w	sl, r3, r8
   11eee:	ea6f 0a0a 	mvn.w	sl, sl
   11ef2:	4699      	mov	r9, r3
   11ef4:	e008      	b.n	11f08 <_strtoul_l.constprop.0+0x5c>
   11ef6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11efa:	d05a      	beq.n	11fb2 <_strtoul_l.constprop.0+0x106>
   11efc:	230a      	movs	r3, #10
   11efe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 11fe8 <_strtoul_l.constprop.0+0x13c>
   11f02:	f04f 0a05 	mov.w	sl, #5
   11f06:	4699      	mov	r9, r3
   11f08:	2500      	movs	r5, #0
   11f0a:	4628      	mov	r0, r5
   11f0c:	e005      	b.n	11f1a <_strtoul_l.constprop.0+0x6e>
   11f0e:	d02c      	beq.n	11f6a <_strtoul_l.constprop.0+0xbe>
   11f10:	fb09 c000 	mla	r0, r9, r0, ip
   11f14:	2501      	movs	r5, #1
   11f16:	f816 eb01 	ldrb.w	lr, [r6], #1
   11f1a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   11f1e:	f1bc 0f09 	cmp.w	ip, #9
   11f22:	d906      	bls.n	11f32 <_strtoul_l.constprop.0+0x86>
   11f24:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11f28:	f1bc 0f19 	cmp.w	ip, #25
   11f2c:	d80b      	bhi.n	11f46 <_strtoul_l.constprop.0+0x9a>
   11f2e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11f32:	4563      	cmp	r3, ip
   11f34:	dd10      	ble.n	11f58 <_strtoul_l.constprop.0+0xac>
   11f36:	f1b5 3fff 	cmp.w	r5, #4294967295
   11f3a:	d0ec      	beq.n	11f16 <_strtoul_l.constprop.0+0x6a>
   11f3c:	4540      	cmp	r0, r8
   11f3e:	d9e6      	bls.n	11f0e <_strtoul_l.constprop.0+0x62>
   11f40:	f04f 35ff 	mov.w	r5, #4294967295
   11f44:	e7e7      	b.n	11f16 <_strtoul_l.constprop.0+0x6a>
   11f46:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   11f4a:	f1bc 0f19 	cmp.w	ip, #25
   11f4e:	d803      	bhi.n	11f58 <_strtoul_l.constprop.0+0xac>
   11f50:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11f54:	4563      	cmp	r3, ip
   11f56:	dcee      	bgt.n	11f36 <_strtoul_l.constprop.0+0x8a>
   11f58:	1c6b      	adds	r3, r5, #1
   11f5a:	d00b      	beq.n	11f74 <_strtoul_l.constprop.0+0xc8>
   11f5c:	b104      	cbz	r4, 11f60 <_strtoul_l.constprop.0+0xb4>
   11f5e:	4240      	negs	r0, r0
   11f60:	b10a      	cbz	r2, 11f66 <_strtoul_l.constprop.0+0xba>
   11f62:	b965      	cbnz	r5, 11f7e <_strtoul_l.constprop.0+0xd2>
   11f64:	6011      	str	r1, [r2, #0]
   11f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f6a:	45d4      	cmp	ip, sl
   11f6c:	ddd0      	ble.n	11f10 <_strtoul_l.constprop.0+0x64>
   11f6e:	f04f 35ff 	mov.w	r5, #4294967295
   11f72:	e7d0      	b.n	11f16 <_strtoul_l.constprop.0+0x6a>
   11f74:	2322      	movs	r3, #34	; 0x22
   11f76:	603b      	str	r3, [r7, #0]
   11f78:	4628      	mov	r0, r5
   11f7a:	2a00      	cmp	r2, #0
   11f7c:	d0f3      	beq.n	11f66 <_strtoul_l.constprop.0+0xba>
   11f7e:	1e71      	subs	r1, r6, #1
   11f80:	e7f0      	b.n	11f64 <_strtoul_l.constprop.0+0xb8>
   11f82:	f896 e000 	ldrb.w	lr, [r6]
   11f86:	2401      	movs	r4, #1
   11f88:	1cae      	adds	r6, r5, #2
   11f8a:	e7a7      	b.n	11edc <_strtoul_l.constprop.0+0x30>
   11f8c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11f90:	d121      	bne.n	11fd6 <_strtoul_l.constprop.0+0x12a>
   11f92:	7830      	ldrb	r0, [r6, #0]
   11f94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11f98:	2858      	cmp	r0, #88	; 0x58
   11f9a:	d116      	bne.n	11fca <_strtoul_l.constprop.0+0x11e>
   11f9c:	f04f 0910 	mov.w	r9, #16
   11fa0:	f896 e001 	ldrb.w	lr, [r6, #1]
   11fa4:	f04f 0a0f 	mov.w	sl, #15
   11fa8:	3602      	adds	r6, #2
   11faa:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11fae:	464b      	mov	r3, r9
   11fb0:	e7aa      	b.n	11f08 <_strtoul_l.constprop.0+0x5c>
   11fb2:	7833      	ldrb	r3, [r6, #0]
   11fb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11fb8:	2b58      	cmp	r3, #88	; 0x58
   11fba:	d0ef      	beq.n	11f9c <_strtoul_l.constprop.0+0xf0>
   11fbc:	2308      	movs	r3, #8
   11fbe:	f04f 0a07 	mov.w	sl, #7
   11fc2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11fc6:	4699      	mov	r9, r3
   11fc8:	e79e      	b.n	11f08 <_strtoul_l.constprop.0+0x5c>
   11fca:	4699      	mov	r9, r3
   11fcc:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11fd0:	f04f 0a0f 	mov.w	sl, #15
   11fd4:	e798      	b.n	11f08 <_strtoul_l.constprop.0+0x5c>
   11fd6:	f04f 0a0f 	mov.w	sl, #15
   11fda:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11fde:	4699      	mov	r9, r3
   11fe0:	e792      	b.n	11f08 <_strtoul_l.constprop.0+0x5c>
   11fe2:	bf00      	nop
   11fe4:	20000aa5 	.word	0x20000aa5
   11fe8:	19999999 	.word	0x19999999

00011fec <_strtoul_r>:
   11fec:	f7ff bf5e 	b.w	11eac <_strtoul_l.constprop.0>

00011ff0 <_strtoll_l.constprop.0>:
   11ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff4:	b085      	sub	sp, #20
   11ff6:	461f      	mov	r7, r3
   11ff8:	4b57      	ldr	r3, [pc, #348]	; (12158 <_strtoll_l.constprop.0+0x168>)
   11ffa:	9003      	str	r0, [sp, #12]
   11ffc:	468a      	mov	sl, r1
   11ffe:	9200      	str	r2, [sp, #0]
   12000:	460d      	mov	r5, r1
   12002:	462a      	mov	r2, r5
   12004:	f815 4b01 	ldrb.w	r4, [r5], #1
   12008:	5d1e      	ldrb	r6, [r3, r4]
   1200a:	f016 0608 	ands.w	r6, r6, #8
   1200e:	d1f8      	bne.n	12002 <_strtoll_l.constprop.0+0x12>
   12010:	2c2d      	cmp	r4, #45	; 0x2d
   12012:	d075      	beq.n	12100 <_strtoll_l.constprop.0+0x110>
   12014:	2c2b      	cmp	r4, #43	; 0x2b
   12016:	bf05      	ittet	eq
   12018:	782c      	ldrbeq	r4, [r5, #0]
   1201a:	9602      	streq	r6, [sp, #8]
   1201c:	9602      	strne	r6, [sp, #8]
   1201e:	1c95      	addeq	r5, r2, #2
   12020:	f04f 36ff 	mov.w	r6, #4294967295
   12024:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   12028:	b12f      	cbz	r7, 12036 <_strtoll_l.constprop.0+0x46>
   1202a:	2f10      	cmp	r7, #16
   1202c:	d06f      	beq.n	1210e <_strtoll_l.constprop.0+0x11e>
   1202e:	46b8      	mov	r8, r7
   12030:	ea4f 79e7 	mov.w	r9, r7, asr #31
   12034:	e005      	b.n	12042 <_strtoll_l.constprop.0+0x52>
   12036:	2c30      	cmp	r4, #48	; 0x30
   12038:	d074      	beq.n	12124 <_strtoll_l.constprop.0+0x134>
   1203a:	f04f 080a 	mov.w	r8, #10
   1203e:	46b9      	mov	r9, r7
   12040:	4647      	mov	r7, r8
   12042:	4642      	mov	r2, r8
   12044:	464b      	mov	r3, r9
   12046:	4630      	mov	r0, r6
   12048:	4659      	mov	r1, fp
   1204a:	f7f7 fc59 	bl	9900 <__aeabi_uldivmod>
   1204e:	2300      	movs	r3, #0
   12050:	9201      	str	r2, [sp, #4]
   12052:	4684      	mov	ip, r0
   12054:	460a      	mov	r2, r1
   12056:	4618      	mov	r0, r3
   12058:	4619      	mov	r1, r3
   1205a:	e011      	b.n	12080 <_strtoll_l.constprop.0+0x90>
   1205c:	428a      	cmp	r2, r1
   1205e:	bf08      	it	eq
   12060:	4584      	cmpeq	ip, r0
   12062:	d03d      	beq.n	120e0 <_strtoll_l.constprop.0+0xf0>
   12064:	fb00 f309 	mul.w	r3, r0, r9
   12068:	fb08 3301 	mla	r3, r8, r1, r3
   1206c:	fba0 0108 	umull	r0, r1, r0, r8
   12070:	440b      	add	r3, r1
   12072:	eb1e 0000 	adds.w	r0, lr, r0
   12076:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   1207a:	2301      	movs	r3, #1
   1207c:	f815 4b01 	ldrb.w	r4, [r5], #1
   12080:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   12084:	f1be 0f09 	cmp.w	lr, #9
   12088:	d906      	bls.n	12098 <_strtoll_l.constprop.0+0xa8>
   1208a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1208e:	f1be 0f19 	cmp.w	lr, #25
   12092:	d80c      	bhi.n	120ae <_strtoll_l.constprop.0+0xbe>
   12094:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   12098:	4577      	cmp	r7, lr
   1209a:	dd11      	ble.n	120c0 <_strtoll_l.constprop.0+0xd0>
   1209c:	1c5c      	adds	r4, r3, #1
   1209e:	d0ed      	beq.n	1207c <_strtoll_l.constprop.0+0x8c>
   120a0:	4584      	cmp	ip, r0
   120a2:	eb72 0301 	sbcs.w	r3, r2, r1
   120a6:	d2d9      	bcs.n	1205c <_strtoll_l.constprop.0+0x6c>
   120a8:	f04f 33ff 	mov.w	r3, #4294967295
   120ac:	e7e6      	b.n	1207c <_strtoll_l.constprop.0+0x8c>
   120ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   120b2:	f1be 0f19 	cmp.w	lr, #25
   120b6:	d803      	bhi.n	120c0 <_strtoll_l.constprop.0+0xd0>
   120b8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   120bc:	4577      	cmp	r7, lr
   120be:	dced      	bgt.n	1209c <_strtoll_l.constprop.0+0xac>
   120c0:	1c5a      	adds	r2, r3, #1
   120c2:	d013      	beq.n	120ec <_strtoll_l.constprop.0+0xfc>
   120c4:	9a02      	ldr	r2, [sp, #8]
   120c6:	b112      	cbz	r2, 120ce <_strtoll_l.constprop.0+0xde>
   120c8:	4240      	negs	r0, r0
   120ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   120ce:	9a00      	ldr	r2, [sp, #0]
   120d0:	b11a      	cbz	r2, 120da <_strtoll_l.constprop.0+0xea>
   120d2:	bba3      	cbnz	r3, 1213e <_strtoll_l.constprop.0+0x14e>
   120d4:	9b00      	ldr	r3, [sp, #0]
   120d6:	f8c3 a000 	str.w	sl, [r3]
   120da:	b005      	add	sp, #20
   120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e0:	9b01      	ldr	r3, [sp, #4]
   120e2:	4573      	cmp	r3, lr
   120e4:	dabe      	bge.n	12064 <_strtoll_l.constprop.0+0x74>
   120e6:	f04f 33ff 	mov.w	r3, #4294967295
   120ea:	e7c7      	b.n	1207c <_strtoll_l.constprop.0+0x8c>
   120ec:	9a03      	ldr	r2, [sp, #12]
   120ee:	2322      	movs	r3, #34	; 0x22
   120f0:	6013      	str	r3, [r2, #0]
   120f2:	9b00      	ldr	r3, [sp, #0]
   120f4:	b333      	cbz	r3, 12144 <_strtoll_l.constprop.0+0x154>
   120f6:	f105 3aff 	add.w	sl, r5, #4294967295
   120fa:	4630      	mov	r0, r6
   120fc:	4659      	mov	r1, fp
   120fe:	e7e9      	b.n	120d4 <_strtoll_l.constprop.0+0xe4>
   12100:	2301      	movs	r3, #1
   12102:	782c      	ldrb	r4, [r5, #0]
   12104:	9302      	str	r3, [sp, #8]
   12106:	1c95      	adds	r5, r2, #2
   12108:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   1210c:	e78c      	b.n	12028 <_strtoll_l.constprop.0+0x38>
   1210e:	2c30      	cmp	r4, #48	; 0x30
   12110:	d104      	bne.n	1211c <_strtoll_l.constprop.0+0x12c>
   12112:	782b      	ldrb	r3, [r5, #0]
   12114:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12118:	2b58      	cmp	r3, #88	; 0x58
   1211a:	d008      	beq.n	1212e <_strtoll_l.constprop.0+0x13e>
   1211c:	46b8      	mov	r8, r7
   1211e:	f04f 0900 	mov.w	r9, #0
   12122:	e78e      	b.n	12042 <_strtoll_l.constprop.0+0x52>
   12124:	782b      	ldrb	r3, [r5, #0]
   12126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1212a:	2b58      	cmp	r3, #88	; 0x58
   1212c:	d10f      	bne.n	1214e <_strtoll_l.constprop.0+0x15e>
   1212e:	f04f 0810 	mov.w	r8, #16
   12132:	786c      	ldrb	r4, [r5, #1]
   12134:	f04f 0900 	mov.w	r9, #0
   12138:	3502      	adds	r5, #2
   1213a:	4647      	mov	r7, r8
   1213c:	e781      	b.n	12042 <_strtoll_l.constprop.0+0x52>
   1213e:	4606      	mov	r6, r0
   12140:	468b      	mov	fp, r1
   12142:	e7d8      	b.n	120f6 <_strtoll_l.constprop.0+0x106>
   12144:	4630      	mov	r0, r6
   12146:	4659      	mov	r1, fp
   12148:	b005      	add	sp, #20
   1214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1214e:	f04f 0808 	mov.w	r8, #8
   12152:	46b9      	mov	r9, r7
   12154:	4647      	mov	r7, r8
   12156:	e774      	b.n	12042 <_strtoll_l.constprop.0+0x52>
   12158:	20000aa5 	.word	0x20000aa5

0001215c <_strtoll_r>:
   1215c:	f7ff bf48 	b.w	11ff0 <_strtoll_l.constprop.0>

00012160 <_strtoull_l.constprop.0>:
   12160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12164:	b085      	sub	sp, #20
   12166:	468b      	mov	fp, r1
   12168:	9201      	str	r2, [sp, #4]
   1216a:	4a62      	ldr	r2, [pc, #392]	; (122f4 <_strtoull_l.constprop.0+0x194>)
   1216c:	9003      	str	r0, [sp, #12]
   1216e:	461e      	mov	r6, r3
   12170:	460d      	mov	r5, r1
   12172:	4629      	mov	r1, r5
   12174:	f815 4b01 	ldrb.w	r4, [r5], #1
   12178:	5d13      	ldrb	r3, [r2, r4]
   1217a:	f013 0308 	ands.w	r3, r3, #8
   1217e:	d1f8      	bne.n	12172 <_strtoull_l.constprop.0+0x12>
   12180:	2c2d      	cmp	r4, #45	; 0x2d
   12182:	f000 8082 	beq.w	1228a <_strtoull_l.constprop.0+0x12a>
   12186:	2c2b      	cmp	r4, #43	; 0x2b
   12188:	bf03      	ittte	eq
   1218a:	782c      	ldrbeq	r4, [r5, #0]
   1218c:	9302      	streq	r3, [sp, #8]
   1218e:	1c8d      	addeq	r5, r1, #2
   12190:	9302      	strne	r3, [sp, #8]
   12192:	b1be      	cbz	r6, 121c4 <_strtoull_l.constprop.0+0x64>
   12194:	2e10      	cmp	r6, #16
   12196:	d07d      	beq.n	12294 <_strtoull_l.constprop.0+0x134>
   12198:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   1219c:	4632      	mov	r2, r6
   1219e:	4653      	mov	r3, sl
   121a0:	f04f 30ff 	mov.w	r0, #4294967295
   121a4:	f04f 31ff 	mov.w	r1, #4294967295
   121a8:	f7f7 fbaa 	bl	9900 <__aeabi_uldivmod>
   121ac:	4632      	mov	r2, r6
   121ae:	4607      	mov	r7, r0
   121b0:	4688      	mov	r8, r1
   121b2:	4653      	mov	r3, sl
   121b4:	f04f 30ff 	mov.w	r0, #4294967295
   121b8:	f04f 31ff 	mov.w	r1, #4294967295
   121bc:	46b1      	mov	r9, r6
   121be:	f7f7 fb9f 	bl	9900 <__aeabi_uldivmod>
   121c2:	e00a      	b.n	121da <_strtoull_l.constprop.0+0x7a>
   121c4:	2c30      	cmp	r4, #48	; 0x30
   121c6:	d079      	beq.n	122bc <_strtoull_l.constprop.0+0x15c>
   121c8:	f04f 090a 	mov.w	r9, #10
   121cc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 122f8 <_strtoull_l.constprop.0+0x198>
   121d0:	46b2      	mov	sl, r6
   121d2:	2205      	movs	r2, #5
   121d4:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   121d8:	464e      	mov	r6, r9
   121da:	f04f 0c00 	mov.w	ip, #0
   121de:	4660      	mov	r0, ip
   121e0:	4661      	mov	r1, ip
   121e2:	e011      	b.n	12208 <_strtoull_l.constprop.0+0xa8>
   121e4:	4541      	cmp	r1, r8
   121e6:	bf08      	it	eq
   121e8:	42b8      	cmpeq	r0, r7
   121ea:	d03e      	beq.n	1226a <_strtoull_l.constprop.0+0x10a>
   121ec:	fb00 f40a 	mul.w	r4, r0, sl
   121f0:	fb09 4101 	mla	r1, r9, r1, r4
   121f4:	fba0 0409 	umull	r0, r4, r0, r9
   121f8:	4421      	add	r1, r4
   121fa:	1818      	adds	r0, r3, r0
   121fc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12200:	f04f 0c01 	mov.w	ip, #1
   12204:	f815 4b01 	ldrb.w	r4, [r5], #1
   12208:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1220c:	2b09      	cmp	r3, #9
   1220e:	d905      	bls.n	1221c <_strtoull_l.constprop.0+0xbc>
   12210:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12214:	2b19      	cmp	r3, #25
   12216:	d80d      	bhi.n	12234 <_strtoull_l.constprop.0+0xd4>
   12218:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1221c:	429e      	cmp	r6, r3
   1221e:	dd11      	ble.n	12244 <_strtoull_l.constprop.0+0xe4>
   12220:	f1bc 3fff 	cmp.w	ip, #4294967295
   12224:	d0ee      	beq.n	12204 <_strtoull_l.constprop.0+0xa4>
   12226:	4287      	cmp	r7, r0
   12228:	eb78 0401 	sbcs.w	r4, r8, r1
   1222c:	d2da      	bcs.n	121e4 <_strtoull_l.constprop.0+0x84>
   1222e:	f04f 3cff 	mov.w	ip, #4294967295
   12232:	e7e7      	b.n	12204 <_strtoull_l.constprop.0+0xa4>
   12234:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   12238:	2b19      	cmp	r3, #25
   1223a:	d803      	bhi.n	12244 <_strtoull_l.constprop.0+0xe4>
   1223c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12240:	429e      	cmp	r6, r3
   12242:	dced      	bgt.n	12220 <_strtoull_l.constprop.0+0xc0>
   12244:	f1bc 3fff 	cmp.w	ip, #4294967295
   12248:	d014      	beq.n	12274 <_strtoull_l.constprop.0+0x114>
   1224a:	9b02      	ldr	r3, [sp, #8]
   1224c:	b113      	cbz	r3, 12254 <_strtoull_l.constprop.0+0xf4>
   1224e:	4240      	negs	r0, r0
   12250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12254:	9b01      	ldr	r3, [sp, #4]
   12256:	b12b      	cbz	r3, 12264 <_strtoull_l.constprop.0+0x104>
   12258:	f1bc 0f00 	cmp.w	ip, #0
   1225c:	d112      	bne.n	12284 <_strtoull_l.constprop.0+0x124>
   1225e:	9b01      	ldr	r3, [sp, #4]
   12260:	f8c3 b000 	str.w	fp, [r3]
   12264:	b005      	add	sp, #20
   12266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1226a:	4293      	cmp	r3, r2
   1226c:	ddbe      	ble.n	121ec <_strtoull_l.constprop.0+0x8c>
   1226e:	f04f 3cff 	mov.w	ip, #4294967295
   12272:	e7c7      	b.n	12204 <_strtoull_l.constprop.0+0xa4>
   12274:	9a03      	ldr	r2, [sp, #12]
   12276:	2322      	movs	r3, #34	; 0x22
   12278:	6013      	str	r3, [r2, #0]
   1227a:	9b01      	ldr	r3, [sp, #4]
   1227c:	4660      	mov	r0, ip
   1227e:	4661      	mov	r1, ip
   12280:	2b00      	cmp	r3, #0
   12282:	d0ef      	beq.n	12264 <_strtoull_l.constprop.0+0x104>
   12284:	f105 3bff 	add.w	fp, r5, #4294967295
   12288:	e7e9      	b.n	1225e <_strtoull_l.constprop.0+0xfe>
   1228a:	2301      	movs	r3, #1
   1228c:	782c      	ldrb	r4, [r5, #0]
   1228e:	9302      	str	r3, [sp, #8]
   12290:	1c8d      	adds	r5, r1, #2
   12292:	e77e      	b.n	12192 <_strtoull_l.constprop.0+0x32>
   12294:	2c30      	cmp	r4, #48	; 0x30
   12296:	d123      	bne.n	122e0 <_strtoull_l.constprop.0+0x180>
   12298:	782b      	ldrb	r3, [r5, #0]
   1229a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1229e:	2b58      	cmp	r3, #88	; 0x58
   122a0:	d11b      	bne.n	122da <_strtoull_l.constprop.0+0x17a>
   122a2:	f04f 0910 	mov.w	r9, #16
   122a6:	786c      	ldrb	r4, [r5, #1]
   122a8:	220f      	movs	r2, #15
   122aa:	3502      	adds	r5, #2
   122ac:	f04f 37ff 	mov.w	r7, #4294967295
   122b0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   122b4:	f04f 0a00 	mov.w	sl, #0
   122b8:	464e      	mov	r6, r9
   122ba:	e78e      	b.n	121da <_strtoull_l.constprop.0+0x7a>
   122bc:	782b      	ldrb	r3, [r5, #0]
   122be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   122c2:	2b58      	cmp	r3, #88	; 0x58
   122c4:	d0ed      	beq.n	122a2 <_strtoull_l.constprop.0+0x142>
   122c6:	f04f 0908 	mov.w	r9, #8
   122ca:	46b2      	mov	sl, r6
   122cc:	2207      	movs	r2, #7
   122ce:	f04f 37ff 	mov.w	r7, #4294967295
   122d2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   122d6:	464e      	mov	r6, r9
   122d8:	e77f      	b.n	121da <_strtoull_l.constprop.0+0x7a>
   122da:	f04f 0a00 	mov.w	sl, #0
   122de:	e75d      	b.n	1219c <_strtoull_l.constprop.0+0x3c>
   122e0:	220f      	movs	r2, #15
   122e2:	f04f 37ff 	mov.w	r7, #4294967295
   122e6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   122ea:	46b1      	mov	r9, r6
   122ec:	f04f 0a00 	mov.w	sl, #0
   122f0:	e773      	b.n	121da <_strtoull_l.constprop.0+0x7a>
   122f2:	bf00      	nop
   122f4:	20000aa5 	.word	0x20000aa5
   122f8:	19999999 	.word	0x19999999

000122fc <_strtoull_r>:
   122fc:	f7ff bf30 	b.w	12160 <_strtoull_l.constprop.0>

00012300 <_mbrtowc_r>:
   12300:	b570      	push	{r4, r5, r6, lr}
   12302:	b082      	sub	sp, #8
   12304:	4604      	mov	r4, r0
   12306:	9d06      	ldr	r5, [sp, #24]
   12308:	b155      	cbz	r5, 12320 <_mbrtowc_r+0x20>
   1230a:	b16a      	cbz	r2, 12328 <_mbrtowc_r+0x28>
   1230c:	480f      	ldr	r0, [pc, #60]	; (1234c <_mbrtowc_r+0x4c>)
   1230e:	9500      	str	r5, [sp, #0]
   12310:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   12314:	4620      	mov	r0, r4
   12316:	47b0      	blx	r6
   12318:	1c43      	adds	r3, r0, #1
   1231a:	d010      	beq.n	1233e <_mbrtowc_r+0x3e>
   1231c:	b002      	add	sp, #8
   1231e:	bd70      	pop	{r4, r5, r6, pc}
   12320:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   12324:	2a00      	cmp	r2, #0
   12326:	d1f1      	bne.n	1230c <_mbrtowc_r+0xc>
   12328:	4b08      	ldr	r3, [pc, #32]	; (1234c <_mbrtowc_r+0x4c>)
   1232a:	9500      	str	r5, [sp, #0]
   1232c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   12330:	4611      	mov	r1, r2
   12332:	2301      	movs	r3, #1
   12334:	4a06      	ldr	r2, [pc, #24]	; (12350 <_mbrtowc_r+0x50>)
   12336:	4620      	mov	r0, r4
   12338:	47b0      	blx	r6
   1233a:	1c43      	adds	r3, r0, #1
   1233c:	d1ee      	bne.n	1231c <_mbrtowc_r+0x1c>
   1233e:	2200      	movs	r2, #0
   12340:	238a      	movs	r3, #138	; 0x8a
   12342:	602a      	str	r2, [r5, #0]
   12344:	6023      	str	r3, [r4, #0]
   12346:	b002      	add	sp, #8
   12348:	bd70      	pop	{r4, r5, r6, pc}
   1234a:	bf00      	nop
   1234c:	200085f4 	.word	0x200085f4
   12350:	20008028 	.word	0x20008028

00012354 <_wcrtomb_r>:
   12354:	b570      	push	{r4, r5, r6, lr}
   12356:	4605      	mov	r5, r0
   12358:	b084      	sub	sp, #16
   1235a:	b15b      	cbz	r3, 12374 <_wcrtomb_r+0x20>
   1235c:	461c      	mov	r4, r3
   1235e:	b169      	cbz	r1, 1237c <_wcrtomb_r+0x28>
   12360:	4b0e      	ldr	r3, [pc, #56]	; (1239c <_wcrtomb_r+0x48>)
   12362:	4628      	mov	r0, r5
   12364:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   12368:	4623      	mov	r3, r4
   1236a:	47b0      	blx	r6
   1236c:	1c43      	adds	r3, r0, #1
   1236e:	d00f      	beq.n	12390 <_wcrtomb_r+0x3c>
   12370:	b004      	add	sp, #16
   12372:	bd70      	pop	{r4, r5, r6, pc}
   12374:	f500 7482 	add.w	r4, r0, #260	; 0x104
   12378:	2900      	cmp	r1, #0
   1237a:	d1f1      	bne.n	12360 <_wcrtomb_r+0xc>
   1237c:	4a07      	ldr	r2, [pc, #28]	; (1239c <_wcrtomb_r+0x48>)
   1237e:	4623      	mov	r3, r4
   12380:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   12384:	4628      	mov	r0, r5
   12386:	460a      	mov	r2, r1
   12388:	a901      	add	r1, sp, #4
   1238a:	47b0      	blx	r6
   1238c:	1c43      	adds	r3, r0, #1
   1238e:	d1ef      	bne.n	12370 <_wcrtomb_r+0x1c>
   12390:	2200      	movs	r2, #0
   12392:	238a      	movs	r3, #138	; 0x8a
   12394:	6022      	str	r2, [r4, #0]
   12396:	602b      	str	r3, [r5, #0]
   12398:	b004      	add	sp, #16
   1239a:	bd70      	pop	{r4, r5, r6, pc}
   1239c:	200085f4 	.word	0x200085f4

000123a0 <_wcsrtombs_r>:
   123a0:	b510      	push	{r4, lr}
   123a2:	b082      	sub	sp, #8
   123a4:	9c04      	ldr	r4, [sp, #16]
   123a6:	e9cd 3400 	strd	r3, r4, [sp]
   123aa:	f04f 33ff 	mov.w	r3, #4294967295
   123ae:	f001 fd9f 	bl	13ef0 <_wcsnrtombs_r>
   123b2:	b002      	add	sp, #8
   123b4:	bd10      	pop	{r4, pc}
   123b6:	bf00      	nop

000123b8 <iswspace>:
   123b8:	2100      	movs	r1, #0
   123ba:	f000 b801 	b.w	123c0 <iswspace_l>
   123be:	bf00      	nop

000123c0 <iswspace_l>:
   123c0:	b510      	push	{r4, lr}
   123c2:	f000 f8ab 	bl	1251c <_jp2uc_l>
   123c6:	4604      	mov	r4, r0
   123c8:	f001 fda4 	bl	13f14 <category>
   123cc:	f1a0 031a 	sub.w	r3, r0, #26
   123d0:	b2db      	uxtb	r3, r3
   123d2:	2b02      	cmp	r3, #2
   123d4:	d906      	bls.n	123e4 <iswspace_l+0x24>
   123d6:	f1a4 0009 	sub.w	r0, r4, #9
   123da:	2804      	cmp	r0, #4
   123dc:	bf8c      	ite	hi
   123de:	2000      	movhi	r0, #0
   123e0:	2001      	movls	r0, #1
   123e2:	bd10      	pop	{r4, pc}
   123e4:	2001      	movs	r0, #1
   123e6:	bd10      	pop	{r4, pc}

000123e8 <__jp2uc>:
   123e8:	2902      	cmp	r1, #2
   123ea:	d032      	beq.n	12452 <__jp2uc+0x6a>
   123ec:	2903      	cmp	r1, #3
   123ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
   123f2:	bf1d      	ittte	ne
   123f4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   123f8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   123fc:	b2d2      	uxtbne	r2, r2
   123fe:	b2c2      	uxtbeq	r2, r0
   12400:	f103 0150 	add.w	r1, r3, #80	; 0x50
   12404:	b2c9      	uxtb	r1, r1
   12406:	291f      	cmp	r1, #31
   12408:	d806      	bhi.n	12418 <__jp2uc+0x30>
   1240a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1240e:	4288      	cmp	r0, r1
   12410:	d969      	bls.n	124e6 <__jp2uc+0xfe>
   12412:	f04f 30ff 	mov.w	r0, #4294967295
   12416:	4770      	bx	lr
   12418:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1241c:	b2c9      	uxtb	r1, r1
   1241e:	2924      	cmp	r1, #36	; 0x24
   12420:	d80e      	bhi.n	12440 <__jp2uc+0x58>
   12422:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   12426:	4288      	cmp	r0, r1
   12428:	d8f3      	bhi.n	12412 <__jp2uc+0x2a>
   1242a:	3bd0      	subs	r3, #208	; 0xd0
   1242c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   12430:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12434:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12438:	4a30      	ldr	r2, [pc, #192]	; (124fc <__jp2uc+0x114>)
   1243a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1243e:	4770      	bx	lr
   12440:	3ba1      	subs	r3, #161	; 0xa1
   12442:	2b07      	cmp	r3, #7
   12444:	d8e5      	bhi.n	12412 <__jp2uc+0x2a>
   12446:	e8df f003 	tbb	[pc, r3]
   1244a:	3e48      	.short	0x3e48
   1244c:	25292e34 	.word	0x25292e34
   12450:	1921      	.short	0x1921
   12452:	b2c2      	uxtb	r2, r0
   12454:	2a9e      	cmp	r2, #158	; 0x9e
   12456:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1245a:	d90b      	bls.n	12474 <__jp2uc+0x8c>
   1245c:	3223      	adds	r2, #35	; 0x23
   1245e:	b2d2      	uxtb	r2, r2
   12460:	2380      	movs	r3, #128	; 0x80
   12462:	299f      	cmp	r1, #159	; 0x9f
   12464:	bf94      	ite	ls
   12466:	3970      	subls	r1, #112	; 0x70
   12468:	3150      	addhi	r1, #80	; 0x50
   1246a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1246e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12472:	e7c5      	b.n	12400 <__jp2uc+0x18>
   12474:	3a7e      	subs	r2, #126	; 0x7e
   12476:	b2d2      	uxtb	r2, r2
   12478:	237f      	movs	r3, #127	; 0x7f
   1247a:	e7f2      	b.n	12462 <__jp2uc+0x7a>
   1247c:	2ac0      	cmp	r2, #192	; 0xc0
   1247e:	d8c8      	bhi.n	12412 <__jp2uc+0x2a>
   12480:	4b1f      	ldr	r3, [pc, #124]	; (12500 <__jp2uc+0x118>)
   12482:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12486:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1248a:	4770      	bx	lr
   1248c:	2af1      	cmp	r2, #241	; 0xf1
   1248e:	d8c0      	bhi.n	12412 <__jp2uc+0x2a>
   12490:	4b1c      	ldr	r3, [pc, #112]	; (12504 <__jp2uc+0x11c>)
   12492:	e019      	b.n	124c8 <__jp2uc+0xe0>
   12494:	2ad8      	cmp	r2, #216	; 0xd8
   12496:	d8bc      	bhi.n	12412 <__jp2uc+0x2a>
   12498:	4b1b      	ldr	r3, [pc, #108]	; (12508 <__jp2uc+0x120>)
   1249a:	e015      	b.n	124c8 <__jp2uc+0xe0>
   1249c:	2af6      	cmp	r2, #246	; 0xf6
   1249e:	d8b8      	bhi.n	12412 <__jp2uc+0x2a>
   124a0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   124a4:	4770      	bx	lr
   124a6:	2af3      	cmp	r2, #243	; 0xf3
   124a8:	d8b3      	bhi.n	12412 <__jp2uc+0x2a>
   124aa:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   124ae:	3020      	adds	r0, #32
   124b0:	4770      	bx	lr
   124b2:	4b16      	ldr	r3, [pc, #88]	; (1250c <__jp2uc+0x124>)
   124b4:	4413      	add	r3, r2
   124b6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   124ba:	2b00      	cmp	r3, #0
   124bc:	d0a9      	beq.n	12412 <__jp2uc+0x2a>
   124be:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   124c2:	3060      	adds	r0, #96	; 0x60
   124c4:	4770      	bx	lr
   124c6:	4b12      	ldr	r3, [pc, #72]	; (12510 <__jp2uc+0x128>)
   124c8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   124cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   124d0:	2800      	cmp	r0, #0
   124d2:	bf08      	it	eq
   124d4:	f04f 30ff 	moveq.w	r0, #4294967295
   124d8:	4770      	bx	lr
   124da:	4b0e      	ldr	r3, [pc, #56]	; (12514 <__jp2uc+0x12c>)
   124dc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   124e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   124e4:	4770      	bx	lr
   124e6:	3bb0      	subs	r3, #176	; 0xb0
   124e8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   124ec:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   124f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   124f4:	4a08      	ldr	r2, [pc, #32]	; (12518 <__jp2uc+0x130>)
   124f6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   124fa:	4770      	bx	lr
   124fc:	20005c34 	.word	0x20005c34
   12500:	20000f5c 	.word	0x20000f5c
   12504:	20000eb8 	.word	0x20000eb8
   12508:	20000e48 	.word	0x20000e48
   1250c:	20000dec 	.word	0x20000dec
   12510:	20000d30 	.word	0x20000d30
   12514:	20000c74 	.word	0x20000c74
   12518:	20000f9c 	.word	0x20000f9c

0001251c <_jp2uc_l>:
   1251c:	b538      	push	{r3, r4, r5, lr}
   1251e:	4605      	mov	r5, r0
   12520:	b1b9      	cbz	r1, 12552 <_jp2uc_l+0x36>
   12522:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   12526:	4912      	ldr	r1, [pc, #72]	; (12570 <_jp2uc_l+0x54>)
   12528:	4620      	mov	r0, r4
   1252a:	f7f9 fc0d 	bl	bd48 <strcmp>
   1252e:	b928      	cbnz	r0, 1253c <_jp2uc_l+0x20>
   12530:	4628      	mov	r0, r5
   12532:	2101      	movs	r1, #1
   12534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12538:	f7ff bf56 	b.w	123e8 <__jp2uc>
   1253c:	490d      	ldr	r1, [pc, #52]	; (12574 <_jp2uc_l+0x58>)
   1253e:	4620      	mov	r0, r4
   12540:	f7f9 fc02 	bl	bd48 <strcmp>
   12544:	b938      	cbnz	r0, 12556 <_jp2uc_l+0x3a>
   12546:	4628      	mov	r0, r5
   12548:	2102      	movs	r1, #2
   1254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1254e:	f7ff bf4b 	b.w	123e8 <__jp2uc>
   12552:	4c09      	ldr	r4, [pc, #36]	; (12578 <_jp2uc_l+0x5c>)
   12554:	e7e7      	b.n	12526 <_jp2uc_l+0xa>
   12556:	4909      	ldr	r1, [pc, #36]	; (1257c <_jp2uc_l+0x60>)
   12558:	4620      	mov	r0, r4
   1255a:	f7f9 fbf5 	bl	bd48 <strcmp>
   1255e:	b928      	cbnz	r0, 1256c <_jp2uc_l+0x50>
   12560:	4628      	mov	r0, r5
   12562:	2103      	movs	r1, #3
   12564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12568:	f7ff bf3e 	b.w	123e8 <__jp2uc>
   1256c:	4628      	mov	r0, r5
   1256e:	bd38      	pop	{r3, r4, r5, pc}
   12570:	20000c14 	.word	0x20000c14
   12574:	20000c18 	.word	0x20000c18
   12578:	2000871e 	.word	0x2000871e
   1257c:	20000c20 	.word	0x20000c20

00012580 <fiprintf>:
   12580:	b40e      	push	{r1, r2, r3}
   12582:	b510      	push	{r4, lr}
   12584:	b083      	sub	sp, #12
   12586:	ab05      	add	r3, sp, #20
   12588:	4c06      	ldr	r4, [pc, #24]	; (125a4 <fiprintf+0x24>)
   1258a:	f853 2b04 	ldr.w	r2, [r3], #4
   1258e:	9301      	str	r3, [sp, #4]
   12590:	4601      	mov	r1, r0
   12592:	6820      	ldr	r0, [r4, #0]
   12594:	f000 f97c 	bl	12890 <_vfiprintf_r>
   12598:	b003      	add	sp, #12
   1259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1259e:	b003      	add	sp, #12
   125a0:	4770      	bx	lr
   125a2:	bf00      	nop
   125a4:	20008b7c 	.word	0x20008b7c

000125a8 <__ssprint_r>:
   125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125ac:	6893      	ldr	r3, [r2, #8]
   125ae:	6817      	ldr	r7, [r2, #0]
   125b0:	b083      	sub	sp, #12
   125b2:	4692      	mov	sl, r2
   125b4:	2b00      	cmp	r3, #0
   125b6:	d070      	beq.n	1269a <__ssprint_r+0xf2>
   125b8:	4681      	mov	r9, r0
   125ba:	688a      	ldr	r2, [r1, #8]
   125bc:	6808      	ldr	r0, [r1, #0]
   125be:	460c      	mov	r4, r1
   125c0:	3708      	adds	r7, #8
   125c2:	e043      	b.n	1264c <__ssprint_r+0xa4>
   125c4:	89a3      	ldrh	r3, [r4, #12]
   125c6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   125ca:	d02e      	beq.n	1262a <__ssprint_r+0x82>
   125cc:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   125d0:	eba0 0801 	sub.w	r8, r0, r1
   125d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   125d8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   125dc:	f108 0001 	add.w	r0, r8, #1
   125e0:	1076      	asrs	r6, r6, #1
   125e2:	4428      	add	r0, r5
   125e4:	42b0      	cmp	r0, r6
   125e6:	4632      	mov	r2, r6
   125e8:	bf84      	itt	hi
   125ea:	4606      	movhi	r6, r0
   125ec:	4632      	movhi	r2, r6
   125ee:	055b      	lsls	r3, r3, #21
   125f0:	d537      	bpl.n	12662 <__ssprint_r+0xba>
   125f2:	4611      	mov	r1, r2
   125f4:	4648      	mov	r0, r9
   125f6:	f7f7 fb11 	bl	9c1c <_malloc_r>
   125fa:	9001      	str	r0, [sp, #4]
   125fc:	2800      	cmp	r0, #0
   125fe:	d03a      	beq.n	12676 <__ssprint_r+0xce>
   12600:	4642      	mov	r2, r8
   12602:	6921      	ldr	r1, [r4, #16]
   12604:	f7f5 fd66 	bl	80d4 <memcpy>
   12608:	89a2      	ldrh	r2, [r4, #12]
   1260a:	9b01      	ldr	r3, [sp, #4]
   1260c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12610:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12614:	81a2      	strh	r2, [r4, #12]
   12616:	eba6 0208 	sub.w	r2, r6, r8
   1261a:	eb03 0008 	add.w	r0, r3, r8
   1261e:	6166      	str	r6, [r4, #20]
   12620:	60a2      	str	r2, [r4, #8]
   12622:	6123      	str	r3, [r4, #16]
   12624:	6020      	str	r0, [r4, #0]
   12626:	462e      	mov	r6, r5
   12628:	46a8      	mov	r8, r5
   1262a:	4642      	mov	r2, r8
   1262c:	4659      	mov	r1, fp
   1262e:	f7f9 f9a1 	bl	b974 <memmove>
   12632:	f8da 3008 	ldr.w	r3, [sl, #8]
   12636:	68a2      	ldr	r2, [r4, #8]
   12638:	6820      	ldr	r0, [r4, #0]
   1263a:	1b92      	subs	r2, r2, r6
   1263c:	4440      	add	r0, r8
   1263e:	1b5b      	subs	r3, r3, r5
   12640:	60a2      	str	r2, [r4, #8]
   12642:	6020      	str	r0, [r4, #0]
   12644:	f8ca 3008 	str.w	r3, [sl, #8]
   12648:	b33b      	cbz	r3, 1269a <__ssprint_r+0xf2>
   1264a:	3708      	adds	r7, #8
   1264c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12650:	2d00      	cmp	r5, #0
   12652:	d0fa      	beq.n	1264a <__ssprint_r+0xa2>
   12654:	42aa      	cmp	r2, r5
   12656:	4616      	mov	r6, r2
   12658:	4690      	mov	r8, r2
   1265a:	d9b3      	bls.n	125c4 <__ssprint_r+0x1c>
   1265c:	462e      	mov	r6, r5
   1265e:	46a8      	mov	r8, r5
   12660:	e7e3      	b.n	1262a <__ssprint_r+0x82>
   12662:	4648      	mov	r0, r9
   12664:	f7f7 fda2 	bl	a1ac <_realloc_r>
   12668:	4603      	mov	r3, r0
   1266a:	2800      	cmp	r0, #0
   1266c:	d1d3      	bne.n	12616 <__ssprint_r+0x6e>
   1266e:	6921      	ldr	r1, [r4, #16]
   12670:	4648      	mov	r0, r9
   12672:	f7f9 fe97 	bl	c3a4 <_free_r>
   12676:	89a3      	ldrh	r3, [r4, #12]
   12678:	220c      	movs	r2, #12
   1267a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1267e:	f8c9 2000 	str.w	r2, [r9]
   12682:	f04f 30ff 	mov.w	r0, #4294967295
   12686:	81a3      	strh	r3, [r4, #12]
   12688:	2200      	movs	r2, #0
   1268a:	2300      	movs	r3, #0
   1268c:	f8ca 2008 	str.w	r2, [sl, #8]
   12690:	f8ca 3004 	str.w	r3, [sl, #4]
   12694:	b003      	add	sp, #12
   12696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1269a:	2000      	movs	r0, #0
   1269c:	2300      	movs	r3, #0
   1269e:	f8ca 3004 	str.w	r3, [sl, #4]
   126a2:	b003      	add	sp, #12
   126a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000126a8 <_sungetc_r>:
   126a8:	b538      	push	{r3, r4, r5, lr}
   126aa:	1c4b      	adds	r3, r1, #1
   126ac:	d01a      	beq.n	126e4 <_sungetc_r+0x3c>
   126ae:	8993      	ldrh	r3, [r2, #12]
   126b0:	4614      	mov	r4, r2
   126b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   126b4:	f023 0320 	bic.w	r3, r3, #32
   126b8:	81a3      	strh	r3, [r4, #12]
   126ba:	b2cd      	uxtb	r5, r1
   126bc:	b1aa      	cbz	r2, 126ea <_sungetc_r+0x42>
   126be:	6862      	ldr	r2, [r4, #4]
   126c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   126c2:	429a      	cmp	r2, r3
   126c4:	da09      	bge.n	126da <_sungetc_r+0x32>
   126c6:	6823      	ldr	r3, [r4, #0]
   126c8:	1e5a      	subs	r2, r3, #1
   126ca:	6022      	str	r2, [r4, #0]
   126cc:	f803 5c01 	strb.w	r5, [r3, #-1]
   126d0:	6863      	ldr	r3, [r4, #4]
   126d2:	3301      	adds	r3, #1
   126d4:	6063      	str	r3, [r4, #4]
   126d6:	4628      	mov	r0, r5
   126d8:	bd38      	pop	{r3, r4, r5, pc}
   126da:	4621      	mov	r1, r4
   126dc:	f001 fa58 	bl	13b90 <__submore>
   126e0:	2800      	cmp	r0, #0
   126e2:	d0f0      	beq.n	126c6 <_sungetc_r+0x1e>
   126e4:	f04f 35ff 	mov.w	r5, #4294967295
   126e8:	e7f5      	b.n	126d6 <_sungetc_r+0x2e>
   126ea:	6923      	ldr	r3, [r4, #16]
   126ec:	6822      	ldr	r2, [r4, #0]
   126ee:	b12b      	cbz	r3, 126fc <_sungetc_r+0x54>
   126f0:	4293      	cmp	r3, r2
   126f2:	d203      	bcs.n	126fc <_sungetc_r+0x54>
   126f4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   126f8:	42ab      	cmp	r3, r5
   126fa:	d00f      	beq.n	1271c <_sungetc_r+0x74>
   126fc:	6861      	ldr	r1, [r4, #4]
   126fe:	63e1      	str	r1, [r4, #60]	; 0x3c
   12700:	4623      	mov	r3, r4
   12702:	63a2      	str	r2, [r4, #56]	; 0x38
   12704:	f104 0140 	add.w	r1, r4, #64	; 0x40
   12708:	2203      	movs	r2, #3
   1270a:	6362      	str	r2, [r4, #52]	; 0x34
   1270c:	6321      	str	r1, [r4, #48]	; 0x30
   1270e:	f803 5f42 	strb.w	r5, [r3, #66]!
   12712:	2201      	movs	r2, #1
   12714:	e9c4 3200 	strd	r3, r2, [r4]
   12718:	4628      	mov	r0, r5
   1271a:	bd38      	pop	{r3, r4, r5, pc}
   1271c:	6863      	ldr	r3, [r4, #4]
   1271e:	3a01      	subs	r2, #1
   12720:	3301      	adds	r3, #1
   12722:	e9c4 2300 	strd	r2, r3, [r4]
   12726:	e7d6      	b.n	126d6 <_sungetc_r+0x2e>

00012728 <__ssrefill_r>:
   12728:	b510      	push	{r4, lr}
   1272a:	460c      	mov	r4, r1
   1272c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1272e:	b169      	cbz	r1, 1274c <__ssrefill_r+0x24>
   12730:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12734:	4299      	cmp	r1, r3
   12736:	d001      	beq.n	1273c <__ssrefill_r+0x14>
   12738:	f7f9 fe34 	bl	c3a4 <_free_r>
   1273c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1273e:	6063      	str	r3, [r4, #4]
   12740:	2000      	movs	r0, #0
   12742:	6320      	str	r0, [r4, #48]	; 0x30
   12744:	b113      	cbz	r3, 1274c <__ssrefill_r+0x24>
   12746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12748:	6023      	str	r3, [r4, #0]
   1274a:	bd10      	pop	{r4, pc}
   1274c:	89a3      	ldrh	r3, [r4, #12]
   1274e:	6921      	ldr	r1, [r4, #16]
   12750:	2200      	movs	r2, #0
   12752:	f043 0320 	orr.w	r3, r3, #32
   12756:	e9c4 1200 	strd	r1, r2, [r4]
   1275a:	81a3      	strh	r3, [r4, #12]
   1275c:	f04f 30ff 	mov.w	r0, #4294967295
   12760:	bd10      	pop	{r4, pc}
   12762:	bf00      	nop

00012764 <_sfread_r>:
   12764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12768:	b085      	sub	sp, #20
   1276a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1276e:	fb02 f303 	mul.w	r3, r2, r3
   12772:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   12774:	9301      	str	r3, [sp, #4]
   12776:	b3a3      	cbz	r3, 127e2 <_sfread_r+0x7e>
   12778:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1277c:	9b01      	ldr	r3, [sp, #4]
   1277e:	4553      	cmp	r3, sl
   12780:	468b      	mov	fp, r1
   12782:	d946      	bls.n	12812 <_sfread_r+0xae>
   12784:	46a0      	mov	r8, r4
   12786:	9d01      	ldr	r5, [sp, #4]
   12788:	f858 1b40 	ldr.w	r1, [r8], #64
   1278c:	4607      	mov	r7, r0
   1278e:	2600      	movs	r6, #0
   12790:	4652      	mov	r2, sl
   12792:	4658      	mov	r0, fp
   12794:	f7f5 fc9e 	bl	80d4 <memcpy>
   12798:	6823      	ldr	r3, [r4, #0]
   1279a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1279c:	4453      	add	r3, sl
   1279e:	46a9      	mov	r9, r5
   127a0:	e9c4 3600 	strd	r3, r6, [r4]
   127a4:	4611      	mov	r1, r2
   127a6:	4638      	mov	r0, r7
   127a8:	44d3      	add	fp, sl
   127aa:	eba5 050a 	sub.w	r5, r5, sl
   127ae:	b1e2      	cbz	r2, 127ea <_sfread_r+0x86>
   127b0:	4542      	cmp	r2, r8
   127b2:	d001      	beq.n	127b8 <_sfread_r+0x54>
   127b4:	f7f9 fdf6 	bl	c3a4 <_free_r>
   127b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   127ba:	6326      	str	r6, [r4, #48]	; 0x30
   127bc:	6063      	str	r3, [r4, #4]
   127be:	b1a3      	cbz	r3, 127ea <_sfread_r+0x86>
   127c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   127c2:	6021      	str	r1, [r4, #0]
   127c4:	42ab      	cmp	r3, r5
   127c6:	469a      	mov	sl, r3
   127c8:	d3e2      	bcc.n	12790 <_sfread_r+0x2c>
   127ca:	9b02      	ldr	r3, [sp, #8]
   127cc:	9301      	str	r3, [sp, #4]
   127ce:	462a      	mov	r2, r5
   127d0:	4658      	mov	r0, fp
   127d2:	f7f5 fc7f 	bl	80d4 <memcpy>
   127d6:	e9d4 3200 	ldrd	r3, r2, [r4]
   127da:	1b52      	subs	r2, r2, r5
   127dc:	442b      	add	r3, r5
   127de:	e9c4 3200 	strd	r3, r2, [r4]
   127e2:	9801      	ldr	r0, [sp, #4]
   127e4:	b005      	add	sp, #20
   127e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ea:	9a01      	ldr	r2, [sp, #4]
   127ec:	9b03      	ldr	r3, [sp, #12]
   127ee:	4452      	add	r2, sl
   127f0:	eba2 0209 	sub.w	r2, r2, r9
   127f4:	fbb2 f3f3 	udiv	r3, r2, r3
   127f8:	9301      	str	r3, [sp, #4]
   127fa:	89a3      	ldrh	r3, [r4, #12]
   127fc:	6922      	ldr	r2, [r4, #16]
   127fe:	9801      	ldr	r0, [sp, #4]
   12800:	f043 0320 	orr.w	r3, r3, #32
   12804:	81a3      	strh	r3, [r4, #12]
   12806:	2300      	movs	r3, #0
   12808:	e9c4 2300 	strd	r2, r3, [r4]
   1280c:	b005      	add	sp, #20
   1280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12812:	6821      	ldr	r1, [r4, #0]
   12814:	461d      	mov	r5, r3
   12816:	e7d8      	b.n	127ca <_sfread_r+0x66>

00012818 <__sprint_r.part.0>:
   12818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1281c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1281e:	049c      	lsls	r4, r3, #18
   12820:	4690      	mov	r8, r2
   12822:	d52d      	bpl.n	12880 <__sprint_r.part.0+0x68>
   12824:	6893      	ldr	r3, [r2, #8]
   12826:	6812      	ldr	r2, [r2, #0]
   12828:	b343      	cbz	r3, 1287c <__sprint_r.part.0+0x64>
   1282a:	468b      	mov	fp, r1
   1282c:	4606      	mov	r6, r0
   1282e:	f102 0908 	add.w	r9, r2, #8
   12832:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12836:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1283a:	d015      	beq.n	12868 <__sprint_r.part.0+0x50>
   1283c:	3d04      	subs	r5, #4
   1283e:	2400      	movs	r4, #0
   12840:	e001      	b.n	12846 <__sprint_r.part.0+0x2e>
   12842:	42a7      	cmp	r7, r4
   12844:	d00e      	beq.n	12864 <__sprint_r.part.0+0x4c>
   12846:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1284a:	465a      	mov	r2, fp
   1284c:	4630      	mov	r0, r6
   1284e:	f001 fa97 	bl	13d80 <_fputwc_r>
   12852:	1c43      	adds	r3, r0, #1
   12854:	f104 0401 	add.w	r4, r4, #1
   12858:	d1f3      	bne.n	12842 <__sprint_r.part.0+0x2a>
   1285a:	2300      	movs	r3, #0
   1285c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12864:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12868:	f02a 0a03 	bic.w	sl, sl, #3
   1286c:	eba3 030a 	sub.w	r3, r3, sl
   12870:	f8c8 3008 	str.w	r3, [r8, #8]
   12874:	f109 0908 	add.w	r9, r9, #8
   12878:	2b00      	cmp	r3, #0
   1287a:	d1da      	bne.n	12832 <__sprint_r.part.0+0x1a>
   1287c:	2000      	movs	r0, #0
   1287e:	e7ec      	b.n	1285a <__sprint_r.part.0+0x42>
   12880:	f001 f80c 	bl	1389c <__sfvwrite_r>
   12884:	2300      	movs	r3, #0
   12886:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1288a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1288e:	bf00      	nop

00012890 <_vfiprintf_r>:
   12890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12894:	ed2d 8b02 	vpush	{d8}
   12898:	b0c5      	sub	sp, #276	; 0x114
   1289a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1289e:	4683      	mov	fp, r0
   128a0:	ee08 1a10 	vmov	s16, r1
   128a4:	4616      	mov	r6, r2
   128a6:	2100      	movs	r1, #0
   128a8:	2208      	movs	r2, #8
   128aa:	4650      	mov	r0, sl
   128ac:	461c      	mov	r4, r3
   128ae:	9307      	str	r3, [sp, #28]
   128b0:	f7f9 f8dc 	bl	ba6c <memset>
   128b4:	f1bb 0f00 	cmp.w	fp, #0
   128b8:	d004      	beq.n	128c4 <_vfiprintf_r+0x34>
   128ba:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   128be:	2b00      	cmp	r3, #0
   128c0:	f000 86a0 	beq.w	13604 <_vfiprintf_r+0xd74>
   128c4:	ee18 2a10 	vmov	r2, s16
   128c8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   128ca:	07db      	lsls	r3, r3, #31
   128cc:	f140 8513 	bpl.w	132f6 <_vfiprintf_r+0xa66>
   128d0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   128d4:	b28a      	uxth	r2, r1
   128d6:	0495      	lsls	r5, r2, #18
   128d8:	d40b      	bmi.n	128f2 <_vfiprintf_r+0x62>
   128da:	ee18 3a10 	vmov	r3, s16
   128de:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   128e2:	8199      	strh	r1, [r3, #12]
   128e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   128e6:	b28a      	uxth	r2, r1
   128e8:	ee18 1a10 	vmov	r1, s16
   128ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   128f0:	664b      	str	r3, [r1, #100]	; 0x64
   128f2:	0710      	lsls	r0, r2, #28
   128f4:	f140 8105 	bpl.w	12b02 <_vfiprintf_r+0x272>
   128f8:	ee18 3a10 	vmov	r3, s16
   128fc:	691b      	ldr	r3, [r3, #16]
   128fe:	2b00      	cmp	r3, #0
   12900:	f000 80ff 	beq.w	12b02 <_vfiprintf_r+0x272>
   12904:	f002 031a 	and.w	r3, r2, #26
   12908:	2b0a      	cmp	r3, #10
   1290a:	f000 810a 	beq.w	12b22 <_vfiprintf_r+0x292>
   1290e:	2300      	movs	r3, #0
   12910:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12914:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12918:	aa1b      	add	r2, sp, #108	; 0x6c
   1291a:	930c      	str	r3, [sp, #48]	; 0x30
   1291c:	9218      	str	r2, [sp, #96]	; 0x60
   1291e:	4691      	mov	r9, r2
   12920:	930b      	str	r3, [sp, #44]	; 0x2c
   12922:	9305      	str	r3, [sp, #20]
   12924:	46b0      	mov	r8, r6
   12926:	4644      	mov	r4, r8
   12928:	4ba8      	ldr	r3, [pc, #672]	; (12bcc <_vfiprintf_r+0x33c>)
   1292a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1292e:	f7f9 f967 	bl	bc00 <__locale_mb_cur_max>
   12932:	4622      	mov	r2, r4
   12934:	4603      	mov	r3, r0
   12936:	a912      	add	r1, sp, #72	; 0x48
   12938:	f8cd a000 	str.w	sl, [sp]
   1293c:	4658      	mov	r0, fp
   1293e:	47a8      	blx	r5
   12940:	2800      	cmp	r0, #0
   12942:	f000 8145 	beq.w	12bd0 <_vfiprintf_r+0x340>
   12946:	f2c0 8139 	blt.w	12bbc <_vfiprintf_r+0x32c>
   1294a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1294c:	2a25      	cmp	r2, #37	; 0x25
   1294e:	4603      	mov	r3, r0
   12950:	d001      	beq.n	12956 <_vfiprintf_r+0xc6>
   12952:	441c      	add	r4, r3
   12954:	e7e8      	b.n	12928 <_vfiprintf_r+0x98>
   12956:	ebb4 0608 	subs.w	r6, r4, r8
   1295a:	4605      	mov	r5, r0
   1295c:	f040 813c 	bne.w	12bd8 <_vfiprintf_r+0x348>
   12960:	2300      	movs	r3, #0
   12962:	7861      	ldrb	r1, [r4, #1]
   12964:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12968:	f104 0801 	add.w	r8, r4, #1
   1296c:	9306      	str	r3, [sp, #24]
   1296e:	f04f 37ff 	mov.w	r7, #4294967295
   12972:	461e      	mov	r6, r3
   12974:	242b      	movs	r4, #43	; 0x2b
   12976:	f108 0801 	add.w	r8, r8, #1
   1297a:	f1a1 0320 	sub.w	r3, r1, #32
   1297e:	2b5a      	cmp	r3, #90	; 0x5a
   12980:	f200 8178 	bhi.w	12c74 <_vfiprintf_r+0x3e4>
   12984:	e8df f013 	tbh	[pc, r3, lsl #1]
   12988:	017602b5 	.word	0x017602b5
   1298c:	02b00176 	.word	0x02b00176
   12990:	01760176 	.word	0x01760176
   12994:	006a0176 	.word	0x006a0176
   12998:	01760176 	.word	0x01760176
   1299c:	028d027d 	.word	0x028d027d
   129a0:	02880176 	.word	0x02880176
   129a4:	01760297 	.word	0x01760297
   129a8:	005b0292 	.word	0x005b0292
   129ac:	005b005b 	.word	0x005b005b
   129b0:	005b005b 	.word	0x005b005b
   129b4:	005b005b 	.word	0x005b005b
   129b8:	005b005b 	.word	0x005b005b
   129bc:	01760176 	.word	0x01760176
   129c0:	01760176 	.word	0x01760176
   129c4:	01760176 	.word	0x01760176
   129c8:	01760176 	.word	0x01760176
   129cc:	025c0176 	.word	0x025c0176
   129d0:	01760084 	.word	0x01760084
   129d4:	01760176 	.word	0x01760176
   129d8:	01760176 	.word	0x01760176
   129dc:	01760176 	.word	0x01760176
   129e0:	01760176 	.word	0x01760176
   129e4:	00e80176 	.word	0x00e80176
   129e8:	01760176 	.word	0x01760176
   129ec:	02330176 	.word	0x02330176
   129f0:	02da0176 	.word	0x02da0176
   129f4:	01760176 	.word	0x01760176
   129f8:	0176058b 	.word	0x0176058b
   129fc:	01760176 	.word	0x01760176
   12a00:	01760176 	.word	0x01760176
   12a04:	01760176 	.word	0x01760176
   12a08:	01760176 	.word	0x01760176
   12a0c:	025c0176 	.word	0x025c0176
   12a10:	01760086 	.word	0x01760086
   12a14:	01760176 	.word	0x01760176
   12a18:	008602cd 	.word	0x008602cd
   12a1c:	0176007f 	.word	0x0176007f
   12a20:	017602c0 	.word	0x017602c0
   12a24:	00ea02fd 	.word	0x00ea02fd
   12a28:	007f02ed 	.word	0x007f02ed
   12a2c:	02330176 	.word	0x02330176
   12a30:	0569007c 	.word	0x0569007c
   12a34:	01760176 	.word	0x01760176
   12a38:	0176056b 	.word	0x0176056b
   12a3c:	007c      	.short	0x007c
   12a3e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a42:	2200      	movs	r2, #0
   12a44:	f818 1b01 	ldrb.w	r1, [r8], #1
   12a48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12a4c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12a50:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a54:	2b09      	cmp	r3, #9
   12a56:	d9f5      	bls.n	12a44 <_vfiprintf_r+0x1b4>
   12a58:	9206      	str	r2, [sp, #24]
   12a5a:	e78e      	b.n	1297a <_vfiprintf_r+0xea>
   12a5c:	4658      	mov	r0, fp
   12a5e:	f7fe fa7d 	bl	10f5c <_localeconv_r>
   12a62:	6843      	ldr	r3, [r0, #4]
   12a64:	930d      	str	r3, [sp, #52]	; 0x34
   12a66:	4618      	mov	r0, r3
   12a68:	f7f9 fb8a 	bl	c180 <strlen>
   12a6c:	900e      	str	r0, [sp, #56]	; 0x38
   12a6e:	4605      	mov	r5, r0
   12a70:	4658      	mov	r0, fp
   12a72:	f7fe fa73 	bl	10f5c <_localeconv_r>
   12a76:	6883      	ldr	r3, [r0, #8]
   12a78:	930b      	str	r3, [sp, #44]	; 0x2c
   12a7a:	2d00      	cmp	r5, #0
   12a7c:	f040 84d6 	bne.w	1342c <_vfiprintf_r+0xb9c>
   12a80:	f898 1000 	ldrb.w	r1, [r8]
   12a84:	e777      	b.n	12976 <_vfiprintf_r+0xe6>
   12a86:	f898 1000 	ldrb.w	r1, [r8]
   12a8a:	f046 0620 	orr.w	r6, r6, #32
   12a8e:	e772      	b.n	12976 <_vfiprintf_r+0xe6>
   12a90:	f046 0610 	orr.w	r6, r6, #16
   12a94:	06b4      	lsls	r4, r6, #26
   12a96:	f140 818e 	bpl.w	12db6 <_vfiprintf_r+0x526>
   12a9a:	9b07      	ldr	r3, [sp, #28]
   12a9c:	3307      	adds	r3, #7
   12a9e:	f023 0307 	bic.w	r3, r3, #7
   12aa2:	461a      	mov	r2, r3
   12aa4:	6859      	ldr	r1, [r3, #4]
   12aa6:	f852 3b08 	ldr.w	r3, [r2], #8
   12aaa:	9207      	str	r2, [sp, #28]
   12aac:	460a      	mov	r2, r1
   12aae:	2900      	cmp	r1, #0
   12ab0:	f2c0 8470 	blt.w	13394 <_vfiprintf_r+0xb04>
   12ab4:	1c79      	adds	r1, r7, #1
   12ab6:	f000 85a2 	beq.w	135fe <_vfiprintf_r+0xd6e>
   12aba:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12abe:	9103      	str	r1, [sp, #12]
   12ac0:	ea53 0102 	orrs.w	r1, r3, r2
   12ac4:	f000 843f 	beq.w	13346 <_vfiprintf_r+0xab6>
   12ac8:	2b0a      	cmp	r3, #10
   12aca:	f172 0100 	sbcs.w	r1, r2, #0
   12ace:	f080 8541 	bcs.w	13554 <_vfiprintf_r+0xcc4>
   12ad2:	3330      	adds	r3, #48	; 0x30
   12ad4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12ad8:	9e03      	ldr	r6, [sp, #12]
   12ada:	2301      	movs	r3, #1
   12adc:	9304      	str	r3, [sp, #16]
   12ade:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12ae2:	9b04      	ldr	r3, [sp, #16]
   12ae4:	42bb      	cmp	r3, r7
   12ae6:	bfb8      	it	lt
   12ae8:	463b      	movlt	r3, r7
   12aea:	9303      	str	r3, [sp, #12]
   12aec:	2300      	movs	r3, #0
   12aee:	9308      	str	r3, [sp, #32]
   12af0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12af4:	2b00      	cmp	r3, #0
   12af6:	f000 80cb 	beq.w	12c90 <_vfiprintf_r+0x400>
   12afa:	9b03      	ldr	r3, [sp, #12]
   12afc:	3301      	adds	r3, #1
   12afe:	9303      	str	r3, [sp, #12]
   12b00:	e0c6      	b.n	12c90 <_vfiprintf_r+0x400>
   12b02:	ee18 1a10 	vmov	r1, s16
   12b06:	4658      	mov	r0, fp
   12b08:	ee18 5a10 	vmov	r5, s16
   12b0c:	f001 f87c 	bl	13c08 <__swsetup_r>
   12b10:	2800      	cmp	r0, #0
   12b12:	f040 8652 	bne.w	137ba <_vfiprintf_r+0xf2a>
   12b16:	89aa      	ldrh	r2, [r5, #12]
   12b18:	f002 031a 	and.w	r3, r2, #26
   12b1c:	2b0a      	cmp	r3, #10
   12b1e:	f47f aef6 	bne.w	1290e <_vfiprintf_r+0x7e>
   12b22:	ee18 1a10 	vmov	r1, s16
   12b26:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12b2a:	2b00      	cmp	r3, #0
   12b2c:	f6ff aeef 	blt.w	1290e <_vfiprintf_r+0x7e>
   12b30:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12b32:	07db      	lsls	r3, r3, #31
   12b34:	d402      	bmi.n	12b3c <_vfiprintf_r+0x2ac>
   12b36:	0597      	lsls	r7, r2, #22
   12b38:	f140 8612 	bpl.w	13760 <_vfiprintf_r+0xed0>
   12b3c:	ee18 1a10 	vmov	r1, s16
   12b40:	4623      	mov	r3, r4
   12b42:	4632      	mov	r2, r6
   12b44:	4658      	mov	r0, fp
   12b46:	f000 fe69 	bl	1381c <__sbprintf>
   12b4a:	9005      	str	r0, [sp, #20]
   12b4c:	9805      	ldr	r0, [sp, #20]
   12b4e:	b045      	add	sp, #276	; 0x114
   12b50:	ecbd 8b02 	vpop	{d8}
   12b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b58:	f046 0610 	orr.w	r6, r6, #16
   12b5c:	f016 0220 	ands.w	r2, r6, #32
   12b60:	f000 8136 	beq.w	12dd0 <_vfiprintf_r+0x540>
   12b64:	9b07      	ldr	r3, [sp, #28]
   12b66:	3307      	adds	r3, #7
   12b68:	f023 0307 	bic.w	r3, r3, #7
   12b6c:	4619      	mov	r1, r3
   12b6e:	685a      	ldr	r2, [r3, #4]
   12b70:	f851 3b08 	ldr.w	r3, [r1], #8
   12b74:	9107      	str	r1, [sp, #28]
   12b76:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12b7a:	9103      	str	r1, [sp, #12]
   12b7c:	2100      	movs	r1, #0
   12b7e:	2000      	movs	r0, #0
   12b80:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12b84:	1c78      	adds	r0, r7, #1
   12b86:	f000 8210 	beq.w	12faa <_vfiprintf_r+0x71a>
   12b8a:	9803      	ldr	r0, [sp, #12]
   12b8c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12b90:	ea53 0002 	orrs.w	r0, r3, r2
   12b94:	f040 8208 	bne.w	12fa8 <_vfiprintf_r+0x718>
   12b98:	2f00      	cmp	r7, #0
   12b9a:	f040 8538 	bne.w	1360e <_vfiprintf_r+0xd7e>
   12b9e:	2900      	cmp	r1, #0
   12ba0:	f040 83d5 	bne.w	1334e <_vfiprintf_r+0xabe>
   12ba4:	9b03      	ldr	r3, [sp, #12]
   12ba6:	f013 0301 	ands.w	r3, r3, #1
   12baa:	9304      	str	r3, [sp, #16]
   12bac:	f000 8411 	beq.w	133d2 <_vfiprintf_r+0xb42>
   12bb0:	2330      	movs	r3, #48	; 0x30
   12bb2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12bb6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12bba:	e792      	b.n	12ae2 <_vfiprintf_r+0x252>
   12bbc:	2208      	movs	r2, #8
   12bbe:	2100      	movs	r1, #0
   12bc0:	4650      	mov	r0, sl
   12bc2:	f7f8 ff53 	bl	ba6c <memset>
   12bc6:	2301      	movs	r3, #1
   12bc8:	441c      	add	r4, r3
   12bca:	e6ad      	b.n	12928 <_vfiprintf_r+0x98>
   12bcc:	200085f4 	.word	0x200085f4
   12bd0:	ebb4 0608 	subs.w	r6, r4, r8
   12bd4:	4605      	mov	r5, r0
   12bd6:	d01b      	beq.n	12c10 <_vfiprintf_r+0x380>
   12bd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12bda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12bdc:	3301      	adds	r3, #1
   12bde:	4432      	add	r2, r6
   12be0:	2b07      	cmp	r3, #7
   12be2:	e9c9 8600 	strd	r8, r6, [r9]
   12be6:	921a      	str	r2, [sp, #104]	; 0x68
   12be8:	9319      	str	r3, [sp, #100]	; 0x64
   12bea:	dd1c      	ble.n	12c26 <_vfiprintf_r+0x396>
   12bec:	2a00      	cmp	r2, #0
   12bee:	f000 83a6 	beq.w	1333e <_vfiprintf_r+0xaae>
   12bf2:	ee18 1a10 	vmov	r1, s16
   12bf6:	aa18      	add	r2, sp, #96	; 0x60
   12bf8:	4658      	mov	r0, fp
   12bfa:	f7ff fe0d 	bl	12818 <__sprint_r.part.0>
   12bfe:	bb20      	cbnz	r0, 12c4a <_vfiprintf_r+0x3ba>
   12c00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c04:	9b05      	ldr	r3, [sp, #20]
   12c06:	4433      	add	r3, r6
   12c08:	9305      	str	r3, [sp, #20]
   12c0a:	2d00      	cmp	r5, #0
   12c0c:	f47f aea8 	bne.w	12960 <_vfiprintf_r+0xd0>
   12c10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12c12:	2b00      	cmp	r3, #0
   12c14:	f040 85c1 	bne.w	1379a <_vfiprintf_r+0xf0a>
   12c18:	ee18 3a10 	vmov	r3, s16
   12c1c:	2200      	movs	r2, #0
   12c1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12c22:	9219      	str	r2, [sp, #100]	; 0x64
   12c24:	e015      	b.n	12c52 <_vfiprintf_r+0x3c2>
   12c26:	f109 0908 	add.w	r9, r9, #8
   12c2a:	e7eb      	b.n	12c04 <_vfiprintf_r+0x374>
   12c2c:	ee18 1a10 	vmov	r1, s16
   12c30:	aa18      	add	r2, sp, #96	; 0x60
   12c32:	4658      	mov	r0, fp
   12c34:	f7ff fdf0 	bl	12818 <__sprint_r.part.0>
   12c38:	2800      	cmp	r0, #0
   12c3a:	f000 80a6 	beq.w	12d8a <_vfiprintf_r+0x4fa>
   12c3e:	9b08      	ldr	r3, [sp, #32]
   12c40:	b11b      	cbz	r3, 12c4a <_vfiprintf_r+0x3ba>
   12c42:	9908      	ldr	r1, [sp, #32]
   12c44:	4658      	mov	r0, fp
   12c46:	f7f9 fbad 	bl	c3a4 <_free_r>
   12c4a:	ee18 3a10 	vmov	r3, s16
   12c4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12c52:	ee18 2a10 	vmov	r2, s16
   12c56:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12c58:	f012 0f01 	tst.w	r2, #1
   12c5c:	b29a      	uxth	r2, r3
   12c5e:	f000 80a0 	beq.w	12da2 <_vfiprintf_r+0x512>
   12c62:	0650      	lsls	r0, r2, #25
   12c64:	f100 85b2 	bmi.w	137cc <_vfiprintf_r+0xf3c>
   12c68:	9805      	ldr	r0, [sp, #20]
   12c6a:	b045      	add	sp, #276	; 0x114
   12c6c:	ecbd 8b02 	vpop	{d8}
   12c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c74:	2900      	cmp	r1, #0
   12c76:	d0cb      	beq.n	12c10 <_vfiprintf_r+0x380>
   12c78:	2300      	movs	r3, #0
   12c7a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c7e:	2301      	movs	r3, #1
   12c80:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12c84:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12c88:	ac2b      	add	r4, sp, #172	; 0xac
   12c8a:	2300      	movs	r3, #0
   12c8c:	9308      	str	r3, [sp, #32]
   12c8e:	461f      	mov	r7, r3
   12c90:	f016 0302 	ands.w	r3, r6, #2
   12c94:	9309      	str	r3, [sp, #36]	; 0x24
   12c96:	d002      	beq.n	12c9e <_vfiprintf_r+0x40e>
   12c98:	9b03      	ldr	r3, [sp, #12]
   12c9a:	3302      	adds	r3, #2
   12c9c:	9303      	str	r3, [sp, #12]
   12c9e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12ca2:	930a      	str	r3, [sp, #40]	; 0x28
   12ca4:	d105      	bne.n	12cb2 <_vfiprintf_r+0x422>
   12ca6:	9b06      	ldr	r3, [sp, #24]
   12ca8:	9a03      	ldr	r2, [sp, #12]
   12caa:	1a9d      	subs	r5, r3, r2
   12cac:	2d00      	cmp	r5, #0
   12cae:	f300 827b 	bgt.w	131a8 <_vfiprintf_r+0x918>
   12cb2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12cb6:	1c41      	adds	r1, r0, #1
   12cb8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12cbc:	b182      	cbz	r2, 12ce0 <_vfiprintf_r+0x450>
   12cbe:	2201      	movs	r2, #1
   12cc0:	3301      	adds	r3, #1
   12cc2:	f8c9 2004 	str.w	r2, [r9, #4]
   12cc6:	2907      	cmp	r1, #7
   12cc8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12ccc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12cd0:	f8c9 2000 	str.w	r2, [r9]
   12cd4:	f300 824a 	bgt.w	1316c <_vfiprintf_r+0x8dc>
   12cd8:	4608      	mov	r0, r1
   12cda:	f109 0908 	add.w	r9, r9, #8
   12cde:	3101      	adds	r1, #1
   12ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12ce2:	b1e2      	cbz	r2, 12d1e <_vfiprintf_r+0x48e>
   12ce4:	aa11      	add	r2, sp, #68	; 0x44
   12ce6:	3302      	adds	r3, #2
   12ce8:	f8c9 2000 	str.w	r2, [r9]
   12cec:	2907      	cmp	r1, #7
   12cee:	f04f 0202 	mov.w	r2, #2
   12cf2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12cf6:	f8c9 2004 	str.w	r2, [r9, #4]
   12cfa:	f340 8250 	ble.w	1319e <_vfiprintf_r+0x90e>
   12cfe:	2b00      	cmp	r3, #0
   12d00:	f000 8343 	beq.w	1338a <_vfiprintf_r+0xafa>
   12d04:	ee18 1a10 	vmov	r1, s16
   12d08:	aa18      	add	r2, sp, #96	; 0x60
   12d0a:	4658      	mov	r0, fp
   12d0c:	f7ff fd84 	bl	12818 <__sprint_r.part.0>
   12d10:	2800      	cmp	r0, #0
   12d12:	d194      	bne.n	12c3e <_vfiprintf_r+0x3ae>
   12d14:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12d18:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d1c:	1c41      	adds	r1, r0, #1
   12d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12d20:	2a80      	cmp	r2, #128	; 0x80
   12d22:	f000 8184 	beq.w	1302e <_vfiprintf_r+0x79e>
   12d26:	9a04      	ldr	r2, [sp, #16]
   12d28:	1abd      	subs	r5, r7, r2
   12d2a:	2d00      	cmp	r5, #0
   12d2c:	f300 81d7 	bgt.w	130de <_vfiprintf_r+0x84e>
   12d30:	9a04      	ldr	r2, [sp, #16]
   12d32:	f8c9 4000 	str.w	r4, [r9]
   12d36:	4413      	add	r3, r2
   12d38:	2907      	cmp	r1, #7
   12d3a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12d3e:	f8c9 2004 	str.w	r2, [r9, #4]
   12d42:	f340 816e 	ble.w	13022 <_vfiprintf_r+0x792>
   12d46:	2b00      	cmp	r3, #0
   12d48:	f000 8275 	beq.w	13236 <_vfiprintf_r+0x9a6>
   12d4c:	ee18 1a10 	vmov	r1, s16
   12d50:	aa18      	add	r2, sp, #96	; 0x60
   12d52:	4658      	mov	r0, fp
   12d54:	f7ff fd60 	bl	12818 <__sprint_r.part.0>
   12d58:	2800      	cmp	r0, #0
   12d5a:	f47f af70 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   12d5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12d60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d64:	0775      	lsls	r5, r6, #29
   12d66:	d505      	bpl.n	12d74 <_vfiprintf_r+0x4e4>
   12d68:	9a06      	ldr	r2, [sp, #24]
   12d6a:	9903      	ldr	r1, [sp, #12]
   12d6c:	1a54      	subs	r4, r2, r1
   12d6e:	2c00      	cmp	r4, #0
   12d70:	f300 826b 	bgt.w	1324a <_vfiprintf_r+0x9ba>
   12d74:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12d78:	9803      	ldr	r0, [sp, #12]
   12d7a:	4281      	cmp	r1, r0
   12d7c:	bfac      	ite	ge
   12d7e:	1852      	addge	r2, r2, r1
   12d80:	1812      	addlt	r2, r2, r0
   12d82:	9205      	str	r2, [sp, #20]
   12d84:	2b00      	cmp	r3, #0
   12d86:	f47f af51 	bne.w	12c2c <_vfiprintf_r+0x39c>
   12d8a:	9908      	ldr	r1, [sp, #32]
   12d8c:	2300      	movs	r3, #0
   12d8e:	9319      	str	r3, [sp, #100]	; 0x64
   12d90:	2900      	cmp	r1, #0
   12d92:	f000 8149 	beq.w	13028 <_vfiprintf_r+0x798>
   12d96:	4658      	mov	r0, fp
   12d98:	f7f9 fb04 	bl	c3a4 <_free_r>
   12d9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12da0:	e5c1      	b.n	12926 <_vfiprintf_r+0x96>
   12da2:	059c      	lsls	r4, r3, #22
   12da4:	f53f af5d 	bmi.w	12c62 <_vfiprintf_r+0x3d2>
   12da8:	ee18 4a10 	vmov	r4, s16
   12dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12dae:	f7f8 ffc3 	bl	bd38 <__retarget_lock_release_recursive>
   12db2:	89a2      	ldrh	r2, [r4, #12]
   12db4:	e755      	b.n	12c62 <_vfiprintf_r+0x3d2>
   12db6:	06f0      	lsls	r0, r6, #27
   12db8:	9a07      	ldr	r2, [sp, #28]
   12dba:	f100 831f 	bmi.w	133fc <_vfiprintf_r+0xb6c>
   12dbe:	0671      	lsls	r1, r6, #25
   12dc0:	f140 8319 	bpl.w	133f6 <_vfiprintf_r+0xb66>
   12dc4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12dc8:	9207      	str	r2, [sp, #28]
   12dca:	17da      	asrs	r2, r3, #31
   12dcc:	4611      	mov	r1, r2
   12dce:	e66e      	b.n	12aae <_vfiprintf_r+0x21e>
   12dd0:	f016 0310 	ands.w	r3, r6, #16
   12dd4:	9907      	ldr	r1, [sp, #28]
   12dd6:	f040 8309 	bne.w	133ec <_vfiprintf_r+0xb5c>
   12dda:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12dde:	f000 8301 	beq.w	133e4 <_vfiprintf_r+0xb54>
   12de2:	461a      	mov	r2, r3
   12de4:	f851 3b04 	ldr.w	r3, [r1], #4
   12de8:	9107      	str	r1, [sp, #28]
   12dea:	b29b      	uxth	r3, r3
   12dec:	e6c3      	b.n	12b76 <_vfiprintf_r+0x2e6>
   12dee:	9b07      	ldr	r3, [sp, #28]
   12df0:	461a      	mov	r2, r3
   12df2:	2300      	movs	r3, #0
   12df4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12df8:	4613      	mov	r3, r2
   12dfa:	f853 4b04 	ldr.w	r4, [r3], #4
   12dfe:	9303      	str	r3, [sp, #12]
   12e00:	2c00      	cmp	r4, #0
   12e02:	f000 8412 	beq.w	1362a <_vfiprintf_r+0xd9a>
   12e06:	2953      	cmp	r1, #83	; 0x53
   12e08:	f000 8365 	beq.w	134d6 <_vfiprintf_r+0xc46>
   12e0c:	f016 0510 	ands.w	r5, r6, #16
   12e10:	f040 8361 	bne.w	134d6 <_vfiprintf_r+0xc46>
   12e14:	1c7b      	adds	r3, r7, #1
   12e16:	f000 84b3 	beq.w	13780 <_vfiprintf_r+0xef0>
   12e1a:	463a      	mov	r2, r7
   12e1c:	4629      	mov	r1, r5
   12e1e:	4620      	mov	r0, r4
   12e20:	f7f9 f95e 	bl	c0e0 <memchr>
   12e24:	9008      	str	r0, [sp, #32]
   12e26:	2800      	cmp	r0, #0
   12e28:	f000 849f 	beq.w	1376a <_vfiprintf_r+0xeda>
   12e2c:	1b03      	subs	r3, r0, r4
   12e2e:	9a03      	ldr	r2, [sp, #12]
   12e30:	9304      	str	r3, [sp, #16]
   12e32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12e36:	462f      	mov	r7, r5
   12e38:	9207      	str	r2, [sp, #28]
   12e3a:	9303      	str	r3, [sp, #12]
   12e3c:	9508      	str	r5, [sp, #32]
   12e3e:	e657      	b.n	12af0 <_vfiprintf_r+0x260>
   12e40:	2943      	cmp	r1, #67	; 0x43
   12e42:	d002      	beq.n	12e4a <_vfiprintf_r+0x5ba>
   12e44:	06f5      	lsls	r5, r6, #27
   12e46:	f140 832d 	bpl.w	134a4 <_vfiprintf_r+0xc14>
   12e4a:	9d07      	ldr	r5, [sp, #28]
   12e4c:	2208      	movs	r2, #8
   12e4e:	2100      	movs	r1, #0
   12e50:	a816      	add	r0, sp, #88	; 0x58
   12e52:	ac2b      	add	r4, sp, #172	; 0xac
   12e54:	f7f8 fe0a 	bl	ba6c <memset>
   12e58:	ab16      	add	r3, sp, #88	; 0x58
   12e5a:	f855 2b04 	ldr.w	r2, [r5], #4
   12e5e:	4621      	mov	r1, r4
   12e60:	4658      	mov	r0, fp
   12e62:	f7ff fa77 	bl	12354 <_wcrtomb_r>
   12e66:	4603      	mov	r3, r0
   12e68:	3301      	adds	r3, #1
   12e6a:	9004      	str	r0, [sp, #16]
   12e6c:	f000 84b3 	beq.w	137d6 <_vfiprintf_r+0xf46>
   12e70:	9b04      	ldr	r3, [sp, #16]
   12e72:	9507      	str	r5, [sp, #28]
   12e74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12e78:	9303      	str	r3, [sp, #12]
   12e7a:	2300      	movs	r3, #0
   12e7c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e80:	e703      	b.n	12c8a <_vfiprintf_r+0x3fa>
   12e82:	9b07      	ldr	r3, [sp, #28]
   12e84:	f853 2b04 	ldr.w	r2, [r3], #4
   12e88:	9206      	str	r2, [sp, #24]
   12e8a:	2a00      	cmp	r2, #0
   12e8c:	f280 829c 	bge.w	133c8 <_vfiprintf_r+0xb38>
   12e90:	9a06      	ldr	r2, [sp, #24]
   12e92:	4252      	negs	r2, r2
   12e94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12e98:	f898 1000 	ldrb.w	r1, [r8]
   12e9c:	f046 0604 	orr.w	r6, r6, #4
   12ea0:	e569      	b.n	12976 <_vfiprintf_r+0xe6>
   12ea2:	f898 1000 	ldrb.w	r1, [r8]
   12ea6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12eaa:	e564      	b.n	12976 <_vfiprintf_r+0xe6>
   12eac:	f898 1000 	ldrb.w	r1, [r8]
   12eb0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12eb4:	e55f      	b.n	12976 <_vfiprintf_r+0xe6>
   12eb6:	4642      	mov	r2, r8
   12eb8:	f812 1b01 	ldrb.w	r1, [r2], #1
   12ebc:	292a      	cmp	r1, #42	; 0x2a
   12ebe:	f000 8496 	beq.w	137ee <_vfiprintf_r+0xf5e>
   12ec2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12ec6:	2b09      	cmp	r3, #9
   12ec8:	4690      	mov	r8, r2
   12eca:	f04f 0700 	mov.w	r7, #0
   12ece:	f63f ad54 	bhi.w	1297a <_vfiprintf_r+0xea>
   12ed2:	f818 1b01 	ldrb.w	r1, [r8], #1
   12ed6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12eda:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12ede:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12ee2:	2b09      	cmp	r3, #9
   12ee4:	d9f5      	bls.n	12ed2 <_vfiprintf_r+0x642>
   12ee6:	e548      	b.n	1297a <_vfiprintf_r+0xea>
   12ee8:	f898 1000 	ldrb.w	r1, [r8]
   12eec:	f046 0601 	orr.w	r6, r6, #1
   12ef0:	e541      	b.n	12976 <_vfiprintf_r+0xe6>
   12ef2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	f47f adc2 	bne.w	12a80 <_vfiprintf_r+0x1f0>
   12efc:	2320      	movs	r3, #32
   12efe:	f898 1000 	ldrb.w	r1, [r8]
   12f02:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12f06:	e536      	b.n	12976 <_vfiprintf_r+0xe6>
   12f08:	f898 1000 	ldrb.w	r1, [r8]
   12f0c:	296c      	cmp	r1, #108	; 0x6c
   12f0e:	bf03      	ittte	eq
   12f10:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12f14:	f046 0620 	orreq.w	r6, r6, #32
   12f18:	f108 0801 	addeq.w	r8, r8, #1
   12f1c:	f046 0610 	orrne.w	r6, r6, #16
   12f20:	e529      	b.n	12976 <_vfiprintf_r+0xe6>
   12f22:	f898 1000 	ldrb.w	r1, [r8]
   12f26:	2968      	cmp	r1, #104	; 0x68
   12f28:	bf03      	ittte	eq
   12f2a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12f2e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12f32:	f108 0801 	addeq.w	r8, r8, #1
   12f36:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12f3a:	e51c      	b.n	12976 <_vfiprintf_r+0xe6>
   12f3c:	f046 0310 	orr.w	r3, r6, #16
   12f40:	9303      	str	r3, [sp, #12]
   12f42:	9b03      	ldr	r3, [sp, #12]
   12f44:	f013 0220 	ands.w	r2, r3, #32
   12f48:	f000 8206 	beq.w	13358 <_vfiprintf_r+0xac8>
   12f4c:	9b07      	ldr	r3, [sp, #28]
   12f4e:	3307      	adds	r3, #7
   12f50:	f023 0307 	bic.w	r3, r3, #7
   12f54:	4619      	mov	r1, r3
   12f56:	685a      	ldr	r2, [r3, #4]
   12f58:	f851 3b08 	ldr.w	r3, [r1], #8
   12f5c:	9107      	str	r1, [sp, #28]
   12f5e:	2101      	movs	r1, #1
   12f60:	e60d      	b.n	12b7e <_vfiprintf_r+0x2ee>
   12f62:	9a07      	ldr	r2, [sp, #28]
   12f64:	f046 0302 	orr.w	r3, r6, #2
   12f68:	9303      	str	r3, [sp, #12]
   12f6a:	f852 3b04 	ldr.w	r3, [r2], #4
   12f6e:	9207      	str	r2, [sp, #28]
   12f70:	f647 0230 	movw	r2, #30768	; 0x7830
   12f74:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12f78:	4ab8      	ldr	r2, [pc, #736]	; (1325c <_vfiprintf_r+0x9cc>)
   12f7a:	920c      	str	r2, [sp, #48]	; 0x30
   12f7c:	2102      	movs	r1, #2
   12f7e:	2200      	movs	r2, #0
   12f80:	e5fd      	b.n	12b7e <_vfiprintf_r+0x2ee>
   12f82:	06b7      	lsls	r7, r6, #26
   12f84:	f100 8248 	bmi.w	13418 <_vfiprintf_r+0xb88>
   12f88:	06f5      	lsls	r5, r6, #27
   12f8a:	f100 8346 	bmi.w	1361a <_vfiprintf_r+0xd8a>
   12f8e:	0674      	lsls	r4, r6, #25
   12f90:	f100 83d5 	bmi.w	1373e <_vfiprintf_r+0xeae>
   12f94:	05b0      	lsls	r0, r6, #22
   12f96:	f140 8340 	bpl.w	1361a <_vfiprintf_r+0xd8a>
   12f9a:	9b07      	ldr	r3, [sp, #28]
   12f9c:	9905      	ldr	r1, [sp, #20]
   12f9e:	f853 2b04 	ldr.w	r2, [r3], #4
   12fa2:	9307      	str	r3, [sp, #28]
   12fa4:	7011      	strb	r1, [r2, #0]
   12fa6:	e4be      	b.n	12926 <_vfiprintf_r+0x96>
   12fa8:	9603      	str	r6, [sp, #12]
   12faa:	2901      	cmp	r1, #1
   12fac:	f43f ad8c 	beq.w	12ac8 <_vfiprintf_r+0x238>
   12fb0:	2902      	cmp	r1, #2
   12fb2:	ac44      	add	r4, sp, #272	; 0x110
   12fb4:	d111      	bne.n	12fda <_vfiprintf_r+0x74a>
   12fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
   12fb8:	f003 010f 	and.w	r1, r3, #15
   12fbc:	091b      	lsrs	r3, r3, #4
   12fbe:	5c41      	ldrb	r1, [r0, r1]
   12fc0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12fc4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12fc8:	0912      	lsrs	r2, r2, #4
   12fca:	ea53 0102 	orrs.w	r1, r3, r2
   12fce:	d1f3      	bne.n	12fb8 <_vfiprintf_r+0x728>
   12fd0:	9e03      	ldr	r6, [sp, #12]
   12fd2:	ab44      	add	r3, sp, #272	; 0x110
   12fd4:	1b1b      	subs	r3, r3, r4
   12fd6:	9304      	str	r3, [sp, #16]
   12fd8:	e583      	b.n	12ae2 <_vfiprintf_r+0x252>
   12fda:	f003 0107 	and.w	r1, r3, #7
   12fde:	08db      	lsrs	r3, r3, #3
   12fe0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12fe4:	08d2      	lsrs	r2, r2, #3
   12fe6:	3130      	adds	r1, #48	; 0x30
   12fe8:	ea53 0502 	orrs.w	r5, r3, r2
   12fec:	4620      	mov	r0, r4
   12fee:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12ff2:	d1f2      	bne.n	12fda <_vfiprintf_r+0x74a>
   12ff4:	9e03      	ldr	r6, [sp, #12]
   12ff6:	07f3      	lsls	r3, r6, #31
   12ff8:	d5eb      	bpl.n	12fd2 <_vfiprintf_r+0x742>
   12ffa:	2930      	cmp	r1, #48	; 0x30
   12ffc:	d0e8      	beq.n	12fd0 <_vfiprintf_r+0x740>
   12ffe:	2330      	movs	r3, #48	; 0x30
   13000:	3802      	subs	r0, #2
   13002:	f804 3c01 	strb.w	r3, [r4, #-1]
   13006:	ab44      	add	r3, sp, #272	; 0x110
   13008:	1a1b      	subs	r3, r3, r0
   1300a:	9e03      	ldr	r6, [sp, #12]
   1300c:	9304      	str	r3, [sp, #16]
   1300e:	4604      	mov	r4, r0
   13010:	e567      	b.n	12ae2 <_vfiprintf_r+0x252>
   13012:	9b04      	ldr	r3, [sp, #16]
   13014:	941b      	str	r4, [sp, #108]	; 0x6c
   13016:	2201      	movs	r2, #1
   13018:	931c      	str	r3, [sp, #112]	; 0x70
   1301a:	931a      	str	r3, [sp, #104]	; 0x68
   1301c:	9219      	str	r2, [sp, #100]	; 0x64
   1301e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13022:	f109 0908 	add.w	r9, r9, #8
   13026:	e69d      	b.n	12d64 <_vfiprintf_r+0x4d4>
   13028:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1302c:	e47b      	b.n	12926 <_vfiprintf_r+0x96>
   1302e:	9a06      	ldr	r2, [sp, #24]
   13030:	9d03      	ldr	r5, [sp, #12]
   13032:	1b55      	subs	r5, r2, r5
   13034:	2d00      	cmp	r5, #0
   13036:	f77f ae76 	ble.w	12d26 <_vfiprintf_r+0x496>
   1303a:	2d10      	cmp	r5, #16
   1303c:	f340 83bb 	ble.w	137b6 <_vfiprintf_r+0xf26>
   13040:	9409      	str	r4, [sp, #36]	; 0x24
   13042:	ee18 4a10 	vmov	r4, s16
   13046:	e007      	b.n	13058 <_vfiprintf_r+0x7c8>
   13048:	f100 0c02 	add.w	ip, r0, #2
   1304c:	f109 0908 	add.w	r9, r9, #8
   13050:	4610      	mov	r0, r2
   13052:	3d10      	subs	r5, #16
   13054:	2d10      	cmp	r5, #16
   13056:	dd1e      	ble.n	13096 <_vfiprintf_r+0x806>
   13058:	4981      	ldr	r1, [pc, #516]	; (13260 <_vfiprintf_r+0x9d0>)
   1305a:	f8c9 1000 	str.w	r1, [r9]
   1305e:	1c42      	adds	r2, r0, #1
   13060:	3310      	adds	r3, #16
   13062:	2110      	movs	r1, #16
   13064:	2a07      	cmp	r2, #7
   13066:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1306a:	f8c9 1004 	str.w	r1, [r9, #4]
   1306e:	ddeb      	ble.n	13048 <_vfiprintf_r+0x7b8>
   13070:	aa18      	add	r2, sp, #96	; 0x60
   13072:	2b00      	cmp	r3, #0
   13074:	d074      	beq.n	13160 <_vfiprintf_r+0x8d0>
   13076:	4621      	mov	r1, r4
   13078:	4658      	mov	r0, fp
   1307a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1307e:	f7ff fbcb 	bl	12818 <__sprint_r.part.0>
   13082:	2800      	cmp	r0, #0
   13084:	f47f addb 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   13088:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1308c:	3d10      	subs	r5, #16
   1308e:	2d10      	cmp	r5, #16
   13090:	f100 0c01 	add.w	ip, r0, #1
   13094:	dce0      	bgt.n	13058 <_vfiprintf_r+0x7c8>
   13096:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13098:	4a71      	ldr	r2, [pc, #452]	; (13260 <_vfiprintf_r+0x9d0>)
   1309a:	f8c9 5004 	str.w	r5, [r9, #4]
   1309e:	442b      	add	r3, r5
   130a0:	f1bc 0f07 	cmp.w	ip, #7
   130a4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   130a8:	f8c9 2000 	str.w	r2, [r9]
   130ac:	f340 8194 	ble.w	133d8 <_vfiprintf_r+0xb48>
   130b0:	2b00      	cmp	r3, #0
   130b2:	f000 831f 	beq.w	136f4 <_vfiprintf_r+0xe64>
   130b6:	ee18 1a10 	vmov	r1, s16
   130ba:	aa18      	add	r2, sp, #96	; 0x60
   130bc:	4658      	mov	r0, fp
   130be:	f7ff fbab 	bl	12818 <__sprint_r.part.0>
   130c2:	2800      	cmp	r0, #0
   130c4:	f47f adbb 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   130c8:	9a04      	ldr	r2, [sp, #16]
   130ca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   130ce:	1abd      	subs	r5, r7, r2
   130d0:	2d00      	cmp	r5, #0
   130d2:	f100 0101 	add.w	r1, r0, #1
   130d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130da:	f77f ae29 	ble.w	12d30 <_vfiprintf_r+0x4a0>
   130de:	2d10      	cmp	r5, #16
   130e0:	dd29      	ble.n	13136 <_vfiprintf_r+0x8a6>
   130e2:	9409      	str	r4, [sp, #36]	; 0x24
   130e4:	2710      	movs	r7, #16
   130e6:	ee18 4a10 	vmov	r4, s16
   130ea:	e007      	b.n	130fc <_vfiprintf_r+0x86c>
   130ec:	f100 0c02 	add.w	ip, r0, #2
   130f0:	f109 0908 	add.w	r9, r9, #8
   130f4:	4610      	mov	r0, r2
   130f6:	3d10      	subs	r5, #16
   130f8:	2d10      	cmp	r5, #16
   130fa:	dd1a      	ble.n	13132 <_vfiprintf_r+0x8a2>
   130fc:	1c42      	adds	r2, r0, #1
   130fe:	4958      	ldr	r1, [pc, #352]	; (13260 <_vfiprintf_r+0x9d0>)
   13100:	3310      	adds	r3, #16
   13102:	2a07      	cmp	r2, #7
   13104:	e9c9 1700 	strd	r1, r7, [r9]
   13108:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1310c:	ddee      	ble.n	130ec <_vfiprintf_r+0x85c>
   1310e:	aa18      	add	r2, sp, #96	; 0x60
   13110:	b303      	cbz	r3, 13154 <_vfiprintf_r+0x8c4>
   13112:	4621      	mov	r1, r4
   13114:	4658      	mov	r0, fp
   13116:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1311a:	f7ff fb7d 	bl	12818 <__sprint_r.part.0>
   1311e:	2800      	cmp	r0, #0
   13120:	f47f ad8d 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   13124:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13128:	3d10      	subs	r5, #16
   1312a:	2d10      	cmp	r5, #16
   1312c:	f100 0c01 	add.w	ip, r0, #1
   13130:	dce4      	bgt.n	130fc <_vfiprintf_r+0x86c>
   13132:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13134:	4661      	mov	r1, ip
   13136:	4a4a      	ldr	r2, [pc, #296]	; (13260 <_vfiprintf_r+0x9d0>)
   13138:	f8c9 5004 	str.w	r5, [r9, #4]
   1313c:	442b      	add	r3, r5
   1313e:	2907      	cmp	r1, #7
   13140:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13144:	f8c9 2000 	str.w	r2, [r9]
   13148:	f300 80e7 	bgt.w	1331a <_vfiprintf_r+0xa8a>
   1314c:	f109 0908 	add.w	r9, r9, #8
   13150:	3101      	adds	r1, #1
   13152:	e5ed      	b.n	12d30 <_vfiprintf_r+0x4a0>
   13154:	f04f 0c01 	mov.w	ip, #1
   13158:	4618      	mov	r0, r3
   1315a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1315e:	e7ca      	b.n	130f6 <_vfiprintf_r+0x866>
   13160:	f04f 0c01 	mov.w	ip, #1
   13164:	4618      	mov	r0, r3
   13166:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1316a:	e772      	b.n	13052 <_vfiprintf_r+0x7c2>
   1316c:	2b00      	cmp	r3, #0
   1316e:	f000 8104 	beq.w	1337a <_vfiprintf_r+0xaea>
   13172:	ee18 1a10 	vmov	r1, s16
   13176:	aa18      	add	r2, sp, #96	; 0x60
   13178:	4658      	mov	r0, fp
   1317a:	f7ff fb4d 	bl	12818 <__sprint_r.part.0>
   1317e:	2800      	cmp	r0, #0
   13180:	f47f ad5d 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   13184:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13188:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1318c:	1c41      	adds	r1, r0, #1
   1318e:	e5a7      	b.n	12ce0 <_vfiprintf_r+0x450>
   13190:	2302      	movs	r3, #2
   13192:	aa11      	add	r2, sp, #68	; 0x44
   13194:	931c      	str	r3, [sp, #112]	; 0x70
   13196:	921b      	str	r2, [sp, #108]	; 0x6c
   13198:	2101      	movs	r1, #1
   1319a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1319e:	4608      	mov	r0, r1
   131a0:	f109 0908 	add.w	r9, r9, #8
   131a4:	1c41      	adds	r1, r0, #1
   131a6:	e5ba      	b.n	12d1e <_vfiprintf_r+0x48e>
   131a8:	2d10      	cmp	r5, #16
   131aa:	f340 82e5 	ble.w	13778 <_vfiprintf_r+0xee8>
   131ae:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   131b2:	940f      	str	r4, [sp, #60]	; 0x3c
   131b4:	4608      	mov	r0, r1
   131b6:	ee18 4a10 	vmov	r4, s16
   131ba:	e007      	b.n	131cc <_vfiprintf_r+0x93c>
   131bc:	f100 0c02 	add.w	ip, r0, #2
   131c0:	f109 0908 	add.w	r9, r9, #8
   131c4:	4610      	mov	r0, r2
   131c6:	3d10      	subs	r5, #16
   131c8:	2d10      	cmp	r5, #16
   131ca:	dd1d      	ble.n	13208 <_vfiprintf_r+0x978>
   131cc:	4925      	ldr	r1, [pc, #148]	; (13264 <_vfiprintf_r+0x9d4>)
   131ce:	f8c9 1000 	str.w	r1, [r9]
   131d2:	1c42      	adds	r2, r0, #1
   131d4:	3310      	adds	r3, #16
   131d6:	2110      	movs	r1, #16
   131d8:	2a07      	cmp	r2, #7
   131da:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   131de:	f8c9 1004 	str.w	r1, [r9, #4]
   131e2:	ddeb      	ble.n	131bc <_vfiprintf_r+0x92c>
   131e4:	aa18      	add	r2, sp, #96	; 0x60
   131e6:	b303      	cbz	r3, 1322a <_vfiprintf_r+0x99a>
   131e8:	4621      	mov	r1, r4
   131ea:	4658      	mov	r0, fp
   131ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131f0:	f7ff fb12 	bl	12818 <__sprint_r.part.0>
   131f4:	2800      	cmp	r0, #0
   131f6:	f47f ad22 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   131fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   131fe:	3d10      	subs	r5, #16
   13200:	2d10      	cmp	r5, #16
   13202:	f100 0c01 	add.w	ip, r0, #1
   13206:	dce1      	bgt.n	131cc <_vfiprintf_r+0x93c>
   13208:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1320a:	4660      	mov	r0, ip
   1320c:	4a15      	ldr	r2, [pc, #84]	; (13264 <_vfiprintf_r+0x9d4>)
   1320e:	f8c9 5004 	str.w	r5, [r9, #4]
   13212:	442b      	add	r3, r5
   13214:	2807      	cmp	r0, #7
   13216:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1321a:	f8c9 2000 	str.w	r2, [r9]
   1321e:	f300 80c1 	bgt.w	133a4 <_vfiprintf_r+0xb14>
   13222:	f109 0908 	add.w	r9, r9, #8
   13226:	1c41      	adds	r1, r0, #1
   13228:	e546      	b.n	12cb8 <_vfiprintf_r+0x428>
   1322a:	4618      	mov	r0, r3
   1322c:	f04f 0c01 	mov.w	ip, #1
   13230:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13234:	e7c7      	b.n	131c6 <_vfiprintf_r+0x936>
   13236:	0776      	lsls	r6, r6, #29
   13238:	9319      	str	r3, [sp, #100]	; 0x64
   1323a:	d553      	bpl.n	132e4 <_vfiprintf_r+0xa54>
   1323c:	9a06      	ldr	r2, [sp, #24]
   1323e:	9903      	ldr	r1, [sp, #12]
   13240:	1a54      	subs	r4, r2, r1
   13242:	2c00      	cmp	r4, #0
   13244:	dd4e      	ble.n	132e4 <_vfiprintf_r+0xa54>
   13246:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1324a:	2c10      	cmp	r4, #16
   1324c:	f340 82b0 	ble.w	137b0 <_vfiprintf_r+0xf20>
   13250:	9919      	ldr	r1, [sp, #100]	; 0x64
   13252:	ee18 6a10 	vmov	r6, s16
   13256:	2510      	movs	r5, #16
   13258:	e00d      	b.n	13276 <_vfiprintf_r+0x9e6>
   1325a:	bf00      	nop
   1325c:	20000c40 	.word	0x20000c40
   13260:	20008498 	.word	0x20008498
   13264:	200026fc 	.word	0x200026fc
   13268:	1c88      	adds	r0, r1, #2
   1326a:	f109 0908 	add.w	r9, r9, #8
   1326e:	4611      	mov	r1, r2
   13270:	3c10      	subs	r4, #16
   13272:	2c10      	cmp	r4, #16
   13274:	dd1a      	ble.n	132ac <_vfiprintf_r+0xa1c>
   13276:	1c4a      	adds	r2, r1, #1
   13278:	48b3      	ldr	r0, [pc, #716]	; (13548 <_vfiprintf_r+0xcb8>)
   1327a:	3310      	adds	r3, #16
   1327c:	2a07      	cmp	r2, #7
   1327e:	e9c9 0500 	strd	r0, r5, [r9]
   13282:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13286:	ddef      	ble.n	13268 <_vfiprintf_r+0x9d8>
   13288:	aa18      	add	r2, sp, #96	; 0x60
   1328a:	b333      	cbz	r3, 132da <_vfiprintf_r+0xa4a>
   1328c:	4631      	mov	r1, r6
   1328e:	4658      	mov	r0, fp
   13290:	f7ff fac2 	bl	12818 <__sprint_r.part.0>
   13294:	2800      	cmp	r0, #0
   13296:	f47f acd2 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   1329a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1329e:	3c10      	subs	r4, #16
   132a0:	2c10      	cmp	r4, #16
   132a2:	f101 0001 	add.w	r0, r1, #1
   132a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132aa:	dce4      	bgt.n	13276 <_vfiprintf_r+0x9e6>
   132ac:	4aa6      	ldr	r2, [pc, #664]	; (13548 <_vfiprintf_r+0xcb8>)
   132ae:	f8c9 4004 	str.w	r4, [r9, #4]
   132b2:	4423      	add	r3, r4
   132b4:	2807      	cmp	r0, #7
   132b6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   132ba:	f8c9 2000 	str.w	r2, [r9]
   132be:	f77f ad59 	ble.w	12d74 <_vfiprintf_r+0x4e4>
   132c2:	b17b      	cbz	r3, 132e4 <_vfiprintf_r+0xa54>
   132c4:	ee18 1a10 	vmov	r1, s16
   132c8:	aa18      	add	r2, sp, #96	; 0x60
   132ca:	4658      	mov	r0, fp
   132cc:	f7ff faa4 	bl	12818 <__sprint_r.part.0>
   132d0:	2800      	cmp	r0, #0
   132d2:	f47f acb4 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   132d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   132d8:	e54c      	b.n	12d74 <_vfiprintf_r+0x4e4>
   132da:	2001      	movs	r0, #1
   132dc:	4619      	mov	r1, r3
   132de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132e2:	e7c5      	b.n	13270 <_vfiprintf_r+0x9e0>
   132e4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   132e8:	9903      	ldr	r1, [sp, #12]
   132ea:	428a      	cmp	r2, r1
   132ec:	bfac      	ite	ge
   132ee:	189b      	addge	r3, r3, r2
   132f0:	185b      	addlt	r3, r3, r1
   132f2:	9305      	str	r3, [sp, #20]
   132f4:	e549      	b.n	12d8a <_vfiprintf_r+0x4fa>
   132f6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   132fa:	058f      	lsls	r7, r1, #22
   132fc:	ee18 3a10 	vmov	r3, s16
   13300:	b28a      	uxth	r2, r1
   13302:	f53f aae8 	bmi.w	128d6 <_vfiprintf_r+0x46>
   13306:	ee18 5a10 	vmov	r5, s16
   1330a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1330c:	f7f8 fd12 	bl	bd34 <__retarget_lock_acquire_recursive>
   13310:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13314:	b28a      	uxth	r2, r1
   13316:	f7ff bade 	b.w	128d6 <_vfiprintf_r+0x46>
   1331a:	2b00      	cmp	r3, #0
   1331c:	f43f ae79 	beq.w	13012 <_vfiprintf_r+0x782>
   13320:	ee18 1a10 	vmov	r1, s16
   13324:	aa18      	add	r2, sp, #96	; 0x60
   13326:	4658      	mov	r0, fp
   13328:	f7ff fa76 	bl	12818 <__sprint_r.part.0>
   1332c:	2800      	cmp	r0, #0
   1332e:	f47f ac86 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   13332:	9919      	ldr	r1, [sp, #100]	; 0x64
   13334:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13336:	3101      	adds	r1, #1
   13338:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1333c:	e4f8      	b.n	12d30 <_vfiprintf_r+0x4a0>
   1333e:	9219      	str	r2, [sp, #100]	; 0x64
   13340:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13344:	e45e      	b.n	12c04 <_vfiprintf_r+0x374>
   13346:	2f00      	cmp	r7, #0
   13348:	f47f abc3 	bne.w	12ad2 <_vfiprintf_r+0x242>
   1334c:	9e03      	ldr	r6, [sp, #12]
   1334e:	2700      	movs	r7, #0
   13350:	9704      	str	r7, [sp, #16]
   13352:	ac44      	add	r4, sp, #272	; 0x110
   13354:	f7ff bbc5 	b.w	12ae2 <_vfiprintf_r+0x252>
   13358:	9b03      	ldr	r3, [sp, #12]
   1335a:	f013 0310 	ands.w	r3, r3, #16
   1335e:	d154      	bne.n	1340a <_vfiprintf_r+0xb7a>
   13360:	9a03      	ldr	r2, [sp, #12]
   13362:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13366:	f000 816b 	beq.w	13640 <_vfiprintf_r+0xdb0>
   1336a:	9907      	ldr	r1, [sp, #28]
   1336c:	461a      	mov	r2, r3
   1336e:	f851 3b04 	ldr.w	r3, [r1], #4
   13372:	9107      	str	r1, [sp, #28]
   13374:	b29b      	uxth	r3, r3
   13376:	2101      	movs	r1, #1
   13378:	e401      	b.n	12b7e <_vfiprintf_r+0x2ee>
   1337a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1337c:	2a00      	cmp	r2, #0
   1337e:	d164      	bne.n	1344a <_vfiprintf_r+0xbba>
   13380:	4618      	mov	r0, r3
   13382:	2101      	movs	r1, #1
   13384:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13388:	e4c9      	b.n	12d1e <_vfiprintf_r+0x48e>
   1338a:	2101      	movs	r1, #1
   1338c:	4618      	mov	r0, r3
   1338e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13392:	e4c4      	b.n	12d1e <_vfiprintf_r+0x48e>
   13394:	425b      	negs	r3, r3
   13396:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1339a:	9603      	str	r6, [sp, #12]
   1339c:	202d      	movs	r0, #45	; 0x2d
   1339e:	2101      	movs	r1, #1
   133a0:	f7ff bbee 	b.w	12b80 <_vfiprintf_r+0x2f0>
   133a4:	2b00      	cmp	r3, #0
   133a6:	f000 8088 	beq.w	134ba <_vfiprintf_r+0xc2a>
   133aa:	ee18 1a10 	vmov	r1, s16
   133ae:	aa18      	add	r2, sp, #96	; 0x60
   133b0:	4658      	mov	r0, fp
   133b2:	f7ff fa31 	bl	12818 <__sprint_r.part.0>
   133b6:	2800      	cmp	r0, #0
   133b8:	f47f ac41 	bne.w	12c3e <_vfiprintf_r+0x3ae>
   133bc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   133c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133c4:	1c41      	adds	r1, r0, #1
   133c6:	e477      	b.n	12cb8 <_vfiprintf_r+0x428>
   133c8:	f898 1000 	ldrb.w	r1, [r8]
   133cc:	9307      	str	r3, [sp, #28]
   133ce:	f7ff bad2 	b.w	12976 <_vfiprintf_r+0xe6>
   133d2:	ac44      	add	r4, sp, #272	; 0x110
   133d4:	f7ff bb85 	b.w	12ae2 <_vfiprintf_r+0x252>
   133d8:	f109 0908 	add.w	r9, r9, #8
   133dc:	f10c 0101 	add.w	r1, ip, #1
   133e0:	4660      	mov	r0, ip
   133e2:	e4a0      	b.n	12d26 <_vfiprintf_r+0x496>
   133e4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   133e8:	f040 8197 	bne.w	1371a <_vfiprintf_r+0xe8a>
   133ec:	f851 3b04 	ldr.w	r3, [r1], #4
   133f0:	9107      	str	r1, [sp, #28]
   133f2:	f7ff bbc0 	b.w	12b76 <_vfiprintf_r+0x2e6>
   133f6:	05b3      	lsls	r3, r6, #22
   133f8:	f100 8188 	bmi.w	1370c <_vfiprintf_r+0xe7c>
   133fc:	f852 3b04 	ldr.w	r3, [r2], #4
   13400:	9207      	str	r2, [sp, #28]
   13402:	17da      	asrs	r2, r3, #31
   13404:	4611      	mov	r1, r2
   13406:	f7ff bb52 	b.w	12aae <_vfiprintf_r+0x21e>
   1340a:	9907      	ldr	r1, [sp, #28]
   1340c:	f851 3b04 	ldr.w	r3, [r1], #4
   13410:	9107      	str	r1, [sp, #28]
   13412:	2101      	movs	r1, #1
   13414:	f7ff bbb3 	b.w	12b7e <_vfiprintf_r+0x2ee>
   13418:	9b07      	ldr	r3, [sp, #28]
   1341a:	9805      	ldr	r0, [sp, #20]
   1341c:	f853 1b04 	ldr.w	r1, [r3], #4
   13420:	9307      	str	r3, [sp, #28]
   13422:	17c2      	asrs	r2, r0, #31
   13424:	e9c1 0200 	strd	r0, r2, [r1]
   13428:	f7ff ba7d 	b.w	12926 <_vfiprintf_r+0x96>
   1342c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1342e:	2b00      	cmp	r3, #0
   13430:	f43f ab26 	beq.w	12a80 <_vfiprintf_r+0x1f0>
   13434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13436:	781b      	ldrb	r3, [r3, #0]
   13438:	2b00      	cmp	r3, #0
   1343a:	f43f ab21 	beq.w	12a80 <_vfiprintf_r+0x1f0>
   1343e:	f898 1000 	ldrb.w	r1, [r8]
   13442:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13446:	f7ff ba96 	b.w	12976 <_vfiprintf_r+0xe6>
   1344a:	2302      	movs	r3, #2
   1344c:	aa11      	add	r2, sp, #68	; 0x44
   1344e:	931c      	str	r3, [sp, #112]	; 0x70
   13450:	921b      	str	r2, [sp, #108]	; 0x6c
   13452:	2001      	movs	r0, #1
   13454:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13458:	e6a2      	b.n	131a0 <_vfiprintf_r+0x910>
   1345a:	9603      	str	r6, [sp, #12]
   1345c:	e571      	b.n	12f42 <_vfiprintf_r+0x6b2>
   1345e:	4b3b      	ldr	r3, [pc, #236]	; (1354c <_vfiprintf_r+0xcbc>)
   13460:	930c      	str	r3, [sp, #48]	; 0x30
   13462:	f016 0220 	ands.w	r2, r6, #32
   13466:	d059      	beq.n	1351c <_vfiprintf_r+0xc8c>
   13468:	9b07      	ldr	r3, [sp, #28]
   1346a:	3307      	adds	r3, #7
   1346c:	f023 0307 	bic.w	r3, r3, #7
   13470:	4618      	mov	r0, r3
   13472:	685a      	ldr	r2, [r3, #4]
   13474:	f850 3b08 	ldr.w	r3, [r0], #8
   13478:	9007      	str	r0, [sp, #28]
   1347a:	07f4      	lsls	r4, r6, #31
   1347c:	d509      	bpl.n	13492 <_vfiprintf_r+0xc02>
   1347e:	ea53 0002 	orrs.w	r0, r3, r2
   13482:	d006      	beq.n	13492 <_vfiprintf_r+0xc02>
   13484:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13488:	2130      	movs	r1, #48	; 0x30
   1348a:	f046 0602 	orr.w	r6, r6, #2
   1348e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13492:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13496:	9103      	str	r1, [sp, #12]
   13498:	2102      	movs	r1, #2
   1349a:	f7ff bb70 	b.w	12b7e <_vfiprintf_r+0x2ee>
   1349e:	4b2c      	ldr	r3, [pc, #176]	; (13550 <_vfiprintf_r+0xcc0>)
   134a0:	930c      	str	r3, [sp, #48]	; 0x30
   134a2:	e7de      	b.n	13462 <_vfiprintf_r+0xbd2>
   134a4:	9b07      	ldr	r3, [sp, #28]
   134a6:	2101      	movs	r1, #1
   134a8:	f853 2b04 	ldr.w	r2, [r3], #4
   134ac:	9103      	str	r1, [sp, #12]
   134ae:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   134b2:	9307      	str	r3, [sp, #28]
   134b4:	9104      	str	r1, [sp, #16]
   134b6:	ac2b      	add	r4, sp, #172	; 0xac
   134b8:	e4df      	b.n	12e7a <_vfiprintf_r+0x5ea>
   134ba:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   134be:	2a00      	cmp	r2, #0
   134c0:	f040 8132 	bne.w	13728 <_vfiprintf_r+0xe98>
   134c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   134c6:	2a00      	cmp	r2, #0
   134c8:	f47f ae62 	bne.w	13190 <_vfiprintf_r+0x900>
   134cc:	4618      	mov	r0, r3
   134ce:	2101      	movs	r1, #1
   134d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   134d4:	e427      	b.n	12d26 <_vfiprintf_r+0x496>
   134d6:	2100      	movs	r1, #0
   134d8:	2208      	movs	r2, #8
   134da:	a816      	add	r0, sp, #88	; 0x58
   134dc:	9413      	str	r4, [sp, #76]	; 0x4c
   134de:	f7f8 fac5 	bl	ba6c <memset>
   134e2:	1c79      	adds	r1, r7, #1
   134e4:	f000 80bc 	beq.w	13660 <_vfiprintf_r+0xdd0>
   134e8:	2500      	movs	r5, #0
   134ea:	9407      	str	r4, [sp, #28]
   134ec:	462c      	mov	r4, r5
   134ee:	e00c      	b.n	1350a <_vfiprintf_r+0xc7a>
   134f0:	a92b      	add	r1, sp, #172	; 0xac
   134f2:	4658      	mov	r0, fp
   134f4:	f7fe ff2e 	bl	12354 <_wcrtomb_r>
   134f8:	1c42      	adds	r2, r0, #1
   134fa:	4420      	add	r0, r4
   134fc:	f000 816b 	beq.w	137d6 <_vfiprintf_r+0xf46>
   13500:	42b8      	cmp	r0, r7
   13502:	dc08      	bgt.n	13516 <_vfiprintf_r+0xc86>
   13504:	f000 8170 	beq.w	137e8 <_vfiprintf_r+0xf58>
   13508:	4604      	mov	r4, r0
   1350a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1350c:	5952      	ldr	r2, [r2, r5]
   1350e:	ab16      	add	r3, sp, #88	; 0x58
   13510:	3504      	adds	r5, #4
   13512:	2a00      	cmp	r2, #0
   13514:	d1ec      	bne.n	134f0 <_vfiprintf_r+0xc60>
   13516:	9404      	str	r4, [sp, #16]
   13518:	9c07      	ldr	r4, [sp, #28]
   1351a:	e0af      	b.n	1367c <_vfiprintf_r+0xdec>
   1351c:	f016 0310 	ands.w	r3, r6, #16
   13520:	9807      	ldr	r0, [sp, #28]
   13522:	d10c      	bne.n	1353e <_vfiprintf_r+0xcae>
   13524:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13528:	d005      	beq.n	13536 <_vfiprintf_r+0xca6>
   1352a:	461a      	mov	r2, r3
   1352c:	f850 3b04 	ldr.w	r3, [r0], #4
   13530:	9007      	str	r0, [sp, #28]
   13532:	b29b      	uxth	r3, r3
   13534:	e7a1      	b.n	1347a <_vfiprintf_r+0xbea>
   13536:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1353a:	f040 80e1 	bne.w	13700 <_vfiprintf_r+0xe70>
   1353e:	f850 3b04 	ldr.w	r3, [r0], #4
   13542:	9007      	str	r0, [sp, #28]
   13544:	e799      	b.n	1347a <_vfiprintf_r+0xbea>
   13546:	bf00      	nop
   13548:	200026fc 	.word	0x200026fc
   1354c:	20000c40 	.word	0x20000c40
   13550:	20000c54 	.word	0x20000c54
   13554:	9903      	ldr	r1, [sp, #12]
   13556:	9704      	str	r7, [sp, #16]
   13558:	ac44      	add	r4, sp, #272	; 0x110
   1355a:	469e      	mov	lr, r3
   1355c:	ee08 ba90 	vmov	s17, fp
   13560:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13564:	f04f 0c00 	mov.w	ip, #0
   13568:	4623      	mov	r3, r4
   1356a:	e006      	b.n	1357a <_vfiprintf_r+0xcea>
   1356c:	f1be 0f0a 	cmp.w	lr, #10
   13570:	f172 0200 	sbcs.w	r2, r2, #0
   13574:	d339      	bcc.n	135ea <_vfiprintf_r+0xd5a>
   13576:	46a6      	mov	lr, r4
   13578:	462a      	mov	r2, r5
   1357a:	49a6      	ldr	r1, [pc, #664]	; (13814 <_vfiprintf_r+0xf84>)
   1357c:	eb1e 0002 	adds.w	r0, lr, r2
   13580:	f140 0000 	adc.w	r0, r0, #0
   13584:	460f      	mov	r7, r1
   13586:	fba1 1400 	umull	r1, r4, r1, r0
   1358a:	f024 0103 	bic.w	r1, r4, #3
   1358e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13592:	1a40      	subs	r0, r0, r1
   13594:	ebbe 0100 	subs.w	r1, lr, r0
   13598:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1359c:	f162 0400 	sbc.w	r4, r2, #0
   135a0:	fb05 f501 	mul.w	r5, r5, r1
   135a4:	fb07 5504 	mla	r5, r7, r4, r5
   135a8:	fba1 4107 	umull	r4, r1, r1, r7
   135ac:	440d      	add	r5, r1
   135ae:	2705      	movs	r7, #5
   135b0:	f004 0101 	and.w	r1, r4, #1
   135b4:	fba1 1b07 	umull	r1, fp, r1, r7
   135b8:	1809      	adds	r1, r1, r0
   135ba:	0864      	lsrs	r4, r4, #1
   135bc:	3130      	adds	r1, #48	; 0x30
   135be:	f803 1c01 	strb.w	r1, [r3, #-1]
   135c2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   135c6:	f10c 0c01 	add.w	ip, ip, #1
   135ca:	3b01      	subs	r3, #1
   135cc:	086d      	lsrs	r5, r5, #1
   135ce:	2e00      	cmp	r6, #0
   135d0:	d0cc      	beq.n	1356c <_vfiprintf_r+0xcdc>
   135d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   135d4:	7809      	ldrb	r1, [r1, #0]
   135d6:	4561      	cmp	r1, ip
   135d8:	d1c8      	bne.n	1356c <_vfiprintf_r+0xcdc>
   135da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   135de:	d0c5      	beq.n	1356c <_vfiprintf_r+0xcdc>
   135e0:	f1be 0f0a 	cmp.w	lr, #10
   135e4:	f172 0200 	sbcs.w	r2, r2, #0
   135e8:	d26c      	bcs.n	136c4 <_vfiprintf_r+0xe34>
   135ea:	461c      	mov	r4, r3
   135ec:	ab44      	add	r3, sp, #272	; 0x110
   135ee:	1b1b      	subs	r3, r3, r4
   135f0:	9f04      	ldr	r7, [sp, #16]
   135f2:	9e03      	ldr	r6, [sp, #12]
   135f4:	9304      	str	r3, [sp, #16]
   135f6:	ee18 ba90 	vmov	fp, s17
   135fa:	f7ff ba72 	b.w	12ae2 <_vfiprintf_r+0x252>
   135fe:	9603      	str	r6, [sp, #12]
   13600:	f7ff ba62 	b.w	12ac8 <_vfiprintf_r+0x238>
   13604:	4658      	mov	r0, fp
   13606:	f7f8 f83d 	bl	b684 <__sinit>
   1360a:	f7ff b95b 	b.w	128c4 <_vfiprintf_r+0x34>
   1360e:	2901      	cmp	r1, #1
   13610:	9603      	str	r6, [sp, #12]
   13612:	f47f accd 	bne.w	12fb0 <_vfiprintf_r+0x720>
   13616:	f7ff ba5c 	b.w	12ad2 <_vfiprintf_r+0x242>
   1361a:	9b07      	ldr	r3, [sp, #28]
   1361c:	9905      	ldr	r1, [sp, #20]
   1361e:	f853 2b04 	ldr.w	r2, [r3], #4
   13622:	6011      	str	r1, [r2, #0]
   13624:	9307      	str	r3, [sp, #28]
   13626:	f7ff b97e 	b.w	12926 <_vfiprintf_r+0x96>
   1362a:	2f06      	cmp	r7, #6
   1362c:	463b      	mov	r3, r7
   1362e:	9a03      	ldr	r2, [sp, #12]
   13630:	4c79      	ldr	r4, [pc, #484]	; (13818 <_vfiprintf_r+0xf88>)
   13632:	9207      	str	r2, [sp, #28]
   13634:	bf28      	it	cs
   13636:	2306      	movcs	r3, #6
   13638:	9304      	str	r3, [sp, #16]
   1363a:	9303      	str	r3, [sp, #12]
   1363c:	f7ff bb25 	b.w	12c8a <_vfiprintf_r+0x3fa>
   13640:	9b03      	ldr	r3, [sp, #12]
   13642:	9907      	ldr	r1, [sp, #28]
   13644:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13648:	bf14      	ite	ne
   1364a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1364e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13652:	9107      	str	r1, [sp, #28]
   13654:	bf1c      	itt	ne
   13656:	4602      	movne	r2, r0
   13658:	b2db      	uxtbne	r3, r3
   1365a:	2101      	movs	r1, #1
   1365c:	f7ff ba8f 	b.w	12b7e <_vfiprintf_r+0x2ee>
   13660:	ab16      	add	r3, sp, #88	; 0x58
   13662:	9300      	str	r3, [sp, #0]
   13664:	2300      	movs	r3, #0
   13666:	4619      	mov	r1, r3
   13668:	aa13      	add	r2, sp, #76	; 0x4c
   1366a:	4658      	mov	r0, fp
   1366c:	f7fe fe98 	bl	123a0 <_wcsrtombs_r>
   13670:	4603      	mov	r3, r0
   13672:	3301      	adds	r3, #1
   13674:	9004      	str	r0, [sp, #16]
   13676:	f000 80ae 	beq.w	137d6 <_vfiprintf_r+0xf46>
   1367a:	9413      	str	r4, [sp, #76]	; 0x4c
   1367c:	9b04      	ldr	r3, [sp, #16]
   1367e:	2b00      	cmp	r3, #0
   13680:	d030      	beq.n	136e4 <_vfiprintf_r+0xe54>
   13682:	2b63      	cmp	r3, #99	; 0x63
   13684:	dc63      	bgt.n	1374e <_vfiprintf_r+0xebe>
   13686:	2300      	movs	r3, #0
   13688:	9308      	str	r3, [sp, #32]
   1368a:	ac2b      	add	r4, sp, #172	; 0xac
   1368c:	2208      	movs	r2, #8
   1368e:	2100      	movs	r1, #0
   13690:	a816      	add	r0, sp, #88	; 0x58
   13692:	f7f8 f9eb 	bl	ba6c <memset>
   13696:	9d04      	ldr	r5, [sp, #16]
   13698:	ab16      	add	r3, sp, #88	; 0x58
   1369a:	9300      	str	r3, [sp, #0]
   1369c:	aa13      	add	r2, sp, #76	; 0x4c
   1369e:	462b      	mov	r3, r5
   136a0:	4621      	mov	r1, r4
   136a2:	4658      	mov	r0, fp
   136a4:	f7fe fe7c 	bl	123a0 <_wcsrtombs_r>
   136a8:	4285      	cmp	r5, r0
   136aa:	f040 80ab 	bne.w	13804 <_vfiprintf_r+0xf74>
   136ae:	9b03      	ldr	r3, [sp, #12]
   136b0:	9a04      	ldr	r2, [sp, #16]
   136b2:	9307      	str	r3, [sp, #28]
   136b4:	2300      	movs	r3, #0
   136b6:	54a3      	strb	r3, [r4, r2]
   136b8:	461f      	mov	r7, r3
   136ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   136be:	9303      	str	r3, [sp, #12]
   136c0:	f7ff ba16 	b.w	12af0 <_vfiprintf_r+0x260>
   136c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   136c6:	990d      	ldr	r1, [sp, #52]	; 0x34
   136c8:	1a9b      	subs	r3, r3, r2
   136ca:	4618      	mov	r0, r3
   136cc:	9308      	str	r3, [sp, #32]
   136ce:	f7f8 fa65 	bl	bb9c <strncpy>
   136d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   136d4:	9b08      	ldr	r3, [sp, #32]
   136d6:	784a      	ldrb	r2, [r1, #1]
   136d8:	b10a      	cbz	r2, 136de <_vfiprintf_r+0xe4e>
   136da:	3101      	adds	r1, #1
   136dc:	910b      	str	r1, [sp, #44]	; 0x2c
   136de:	f04f 0c00 	mov.w	ip, #0
   136e2:	e748      	b.n	13576 <_vfiprintf_r+0xce6>
   136e4:	9b03      	ldr	r3, [sp, #12]
   136e6:	9307      	str	r3, [sp, #28]
   136e8:	9b04      	ldr	r3, [sp, #16]
   136ea:	9303      	str	r3, [sp, #12]
   136ec:	461f      	mov	r7, r3
   136ee:	9308      	str	r3, [sp, #32]
   136f0:	f7ff b9fe 	b.w	12af0 <_vfiprintf_r+0x260>
   136f4:	2101      	movs	r1, #1
   136f6:	4618      	mov	r0, r3
   136f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136fc:	f7ff bb13 	b.w	12d26 <_vfiprintf_r+0x496>
   13700:	f850 3b04 	ldr.w	r3, [r0], #4
   13704:	9007      	str	r0, [sp, #28]
   13706:	4622      	mov	r2, r4
   13708:	b2db      	uxtb	r3, r3
   1370a:	e6b6      	b.n	1347a <_vfiprintf_r+0xbea>
   1370c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13710:	9207      	str	r2, [sp, #28]
   13712:	17da      	asrs	r2, r3, #31
   13714:	4611      	mov	r1, r2
   13716:	f7ff b9ca 	b.w	12aae <_vfiprintf_r+0x21e>
   1371a:	f851 3b04 	ldr.w	r3, [r1], #4
   1371e:	9107      	str	r1, [sp, #28]
   13720:	4602      	mov	r2, r0
   13722:	b2db      	uxtb	r3, r3
   13724:	f7ff ba27 	b.w	12b76 <_vfiprintf_r+0x2e6>
   13728:	2301      	movs	r3, #1
   1372a:	931c      	str	r3, [sp, #112]	; 0x70
   1372c:	2101      	movs	r1, #1
   1372e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13732:	931b      	str	r3, [sp, #108]	; 0x6c
   13734:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13738:	460b      	mov	r3, r1
   1373a:	f7ff bacd 	b.w	12cd8 <_vfiprintf_r+0x448>
   1373e:	9b07      	ldr	r3, [sp, #28]
   13740:	9905      	ldr	r1, [sp, #20]
   13742:	f853 2b04 	ldr.w	r2, [r3], #4
   13746:	9307      	str	r3, [sp, #28]
   13748:	8011      	strh	r1, [r2, #0]
   1374a:	f7ff b8ec 	b.w	12926 <_vfiprintf_r+0x96>
   1374e:	1c59      	adds	r1, r3, #1
   13750:	4658      	mov	r0, fp
   13752:	f7f6 fa63 	bl	9c1c <_malloc_r>
   13756:	4604      	mov	r4, r0
   13758:	2800      	cmp	r0, #0
   1375a:	d03c      	beq.n	137d6 <_vfiprintf_r+0xf46>
   1375c:	9008      	str	r0, [sp, #32]
   1375e:	e795      	b.n	1368c <_vfiprintf_r+0xdfc>
   13760:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13762:	f7f8 fae9 	bl	bd38 <__retarget_lock_release_recursive>
   13766:	f7ff b9e9 	b.w	12b3c <_vfiprintf_r+0x2ac>
   1376a:	9b03      	ldr	r3, [sp, #12]
   1376c:	9307      	str	r3, [sp, #28]
   1376e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13772:	9f08      	ldr	r7, [sp, #32]
   13774:	f7ff b9bc 	b.w	12af0 <_vfiprintf_r+0x260>
   13778:	9819      	ldr	r0, [sp, #100]	; 0x64
   1377a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1377c:	3001      	adds	r0, #1
   1377e:	e545      	b.n	1320c <_vfiprintf_r+0x97c>
   13780:	9b03      	ldr	r3, [sp, #12]
   13782:	9307      	str	r3, [sp, #28]
   13784:	4620      	mov	r0, r4
   13786:	f7f8 fcfb 	bl	c180 <strlen>
   1378a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1378e:	462f      	mov	r7, r5
   13790:	9004      	str	r0, [sp, #16]
   13792:	9303      	str	r3, [sp, #12]
   13794:	9508      	str	r5, [sp, #32]
   13796:	f7ff b9ab 	b.w	12af0 <_vfiprintf_r+0x260>
   1379a:	ee18 1a10 	vmov	r1, s16
   1379e:	aa18      	add	r2, sp, #96	; 0x60
   137a0:	4658      	mov	r0, fp
   137a2:	f7ff f839 	bl	12818 <__sprint_r.part.0>
   137a6:	2800      	cmp	r0, #0
   137a8:	f43f aa36 	beq.w	12c18 <_vfiprintf_r+0x388>
   137ac:	f7ff ba4d 	b.w	12c4a <_vfiprintf_r+0x3ba>
   137b0:	9819      	ldr	r0, [sp, #100]	; 0x64
   137b2:	3001      	adds	r0, #1
   137b4:	e57a      	b.n	132ac <_vfiprintf_r+0xa1c>
   137b6:	468c      	mov	ip, r1
   137b8:	e46e      	b.n	13098 <_vfiprintf_r+0x808>
   137ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   137bc:	07d9      	lsls	r1, r3, #31
   137be:	d405      	bmi.n	137cc <_vfiprintf_r+0xf3c>
   137c0:	89ab      	ldrh	r3, [r5, #12]
   137c2:	059a      	lsls	r2, r3, #22
   137c4:	d402      	bmi.n	137cc <_vfiprintf_r+0xf3c>
   137c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   137c8:	f7f8 fab6 	bl	bd38 <__retarget_lock_release_recursive>
   137cc:	f04f 33ff 	mov.w	r3, #4294967295
   137d0:	9305      	str	r3, [sp, #20]
   137d2:	f7ff ba49 	b.w	12c68 <_vfiprintf_r+0x3d8>
   137d6:	ee18 2a10 	vmov	r2, s16
   137da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   137de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137e2:	8193      	strh	r3, [r2, #12]
   137e4:	f7ff ba35 	b.w	12c52 <_vfiprintf_r+0x3c2>
   137e8:	9c07      	ldr	r4, [sp, #28]
   137ea:	9704      	str	r7, [sp, #16]
   137ec:	e746      	b.n	1367c <_vfiprintf_r+0xdec>
   137ee:	9b07      	ldr	r3, [sp, #28]
   137f0:	f898 1001 	ldrb.w	r1, [r8, #1]
   137f4:	f853 7b04 	ldr.w	r7, [r3], #4
   137f8:	9307      	str	r3, [sp, #28]
   137fa:	4690      	mov	r8, r2
   137fc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13800:	f7ff b8b9 	b.w	12976 <_vfiprintf_r+0xe6>
   13804:	ee18 2a10 	vmov	r2, s16
   13808:	8993      	ldrh	r3, [r2, #12]
   1380a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1380e:	8193      	strh	r3, [r2, #12]
   13810:	f7ff ba15 	b.w	12c3e <_vfiprintf_r+0x3ae>
   13814:	cccccccd 	.word	0xcccccccd
   13818:	20000c68 	.word	0x20000c68

0001381c <__sbprintf>:
   1381c:	b570      	push	{r4, r5, r6, lr}
   1381e:	460c      	mov	r4, r1
   13820:	8989      	ldrh	r1, [r1, #12]
   13822:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13826:	f021 0102 	bic.w	r1, r1, #2
   1382a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1382e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13830:	911b      	str	r1, [sp, #108]	; 0x6c
   13832:	89e1      	ldrh	r1, [r4, #14]
   13834:	f8ad 1016 	strh.w	r1, [sp, #22]
   13838:	69e1      	ldr	r1, [r4, #28]
   1383a:	9109      	str	r1, [sp, #36]	; 0x24
   1383c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1383e:	910b      	str	r1, [sp, #44]	; 0x2c
   13840:	a91c      	add	r1, sp, #112	; 0x70
   13842:	9102      	str	r1, [sp, #8]
   13844:	9106      	str	r1, [sp, #24]
   13846:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1384a:	4606      	mov	r6, r0
   1384c:	9104      	str	r1, [sp, #16]
   1384e:	9107      	str	r1, [sp, #28]
   13850:	a818      	add	r0, sp, #96	; 0x60
   13852:	2100      	movs	r1, #0
   13854:	e9cd 3200 	strd	r3, r2, [sp]
   13858:	9108      	str	r1, [sp, #32]
   1385a:	f7f8 fa67 	bl	bd2c <__retarget_lock_init_recursive>
   1385e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13862:	a902      	add	r1, sp, #8
   13864:	4630      	mov	r0, r6
   13866:	f7ff f813 	bl	12890 <_vfiprintf_r>
   1386a:	1e05      	subs	r5, r0, #0
   1386c:	db07      	blt.n	1387e <__sbprintf+0x62>
   1386e:	a902      	add	r1, sp, #8
   13870:	4630      	mov	r0, r6
   13872:	f7fd fad3 	bl	10e1c <_fflush_r>
   13876:	2800      	cmp	r0, #0
   13878:	bf18      	it	ne
   1387a:	f04f 35ff 	movne.w	r5, #4294967295
   1387e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13882:	065b      	lsls	r3, r3, #25
   13884:	d503      	bpl.n	1388e <__sbprintf+0x72>
   13886:	89a3      	ldrh	r3, [r4, #12]
   13888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1388c:	81a3      	strh	r3, [r4, #12]
   1388e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13890:	f7f8 fa4e 	bl	bd30 <__retarget_lock_close_recursive>
   13894:	4628      	mov	r0, r5
   13896:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1389a:	bd70      	pop	{r4, r5, r6, pc}

0001389c <__sfvwrite_r>:
   1389c:	6893      	ldr	r3, [r2, #8]
   1389e:	2b00      	cmp	r3, #0
   138a0:	f000 8085 	beq.w	139ae <__sfvwrite_r+0x112>
   138a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   138ac:	460c      	mov	r4, r1
   138ae:	0719      	lsls	r1, r3, #28
   138b0:	4680      	mov	r8, r0
   138b2:	b083      	sub	sp, #12
   138b4:	4617      	mov	r7, r2
   138b6:	b298      	uxth	r0, r3
   138b8:	d525      	bpl.n	13906 <__sfvwrite_r+0x6a>
   138ba:	6923      	ldr	r3, [r4, #16]
   138bc:	b31b      	cbz	r3, 13906 <__sfvwrite_r+0x6a>
   138be:	f010 0302 	ands.w	r3, r0, #2
   138c2:	683d      	ldr	r5, [r7, #0]
   138c4:	d02d      	beq.n	13922 <__sfvwrite_r+0x86>
   138c6:	f04f 0a00 	mov.w	sl, #0
   138ca:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 13b8c <__sfvwrite_r+0x2f0>
   138ce:	4656      	mov	r6, sl
   138d0:	46b9      	mov	r9, r7
   138d2:	455e      	cmp	r6, fp
   138d4:	4633      	mov	r3, r6
   138d6:	4652      	mov	r2, sl
   138d8:	bf28      	it	cs
   138da:	465b      	movcs	r3, fp
   138dc:	4640      	mov	r0, r8
   138de:	2e00      	cmp	r6, #0
   138e0:	d052      	beq.n	13988 <__sfvwrite_r+0xec>
   138e2:	69e1      	ldr	r1, [r4, #28]
   138e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   138e6:	47b8      	blx	r7
   138e8:	2800      	cmp	r0, #0
   138ea:	dd56      	ble.n	1399a <__sfvwrite_r+0xfe>
   138ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
   138f0:	1a1b      	subs	r3, r3, r0
   138f2:	4482      	add	sl, r0
   138f4:	1a36      	subs	r6, r6, r0
   138f6:	f8c9 3008 	str.w	r3, [r9, #8]
   138fa:	2b00      	cmp	r3, #0
   138fc:	d1e9      	bne.n	138d2 <__sfvwrite_r+0x36>
   138fe:	2000      	movs	r0, #0
   13900:	b003      	add	sp, #12
   13902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13906:	4621      	mov	r1, r4
   13908:	4640      	mov	r0, r8
   1390a:	f000 f97d 	bl	13c08 <__swsetup_r>
   1390e:	2800      	cmp	r0, #0
   13910:	f040 8138 	bne.w	13b84 <__sfvwrite_r+0x2e8>
   13914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13918:	683d      	ldr	r5, [r7, #0]
   1391a:	b298      	uxth	r0, r3
   1391c:	f010 0302 	ands.w	r3, r0, #2
   13920:	d1d1      	bne.n	138c6 <__sfvwrite_r+0x2a>
   13922:	f010 0901 	ands.w	r9, r0, #1
   13926:	d144      	bne.n	139b2 <__sfvwrite_r+0x116>
   13928:	464e      	mov	r6, r9
   1392a:	9700      	str	r7, [sp, #0]
   1392c:	b346      	cbz	r6, 13980 <__sfvwrite_r+0xe4>
   1392e:	0582      	lsls	r2, r0, #22
   13930:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13934:	f140 8085 	bpl.w	13a42 <__sfvwrite_r+0x1a6>
   13938:	45b3      	cmp	fp, r6
   1393a:	465a      	mov	r2, fp
   1393c:	f200 80b4 	bhi.w	13aa8 <__sfvwrite_r+0x20c>
   13940:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13944:	f040 80c1 	bne.w	13aca <__sfvwrite_r+0x22e>
   13948:	6820      	ldr	r0, [r4, #0]
   1394a:	9201      	str	r2, [sp, #4]
   1394c:	4649      	mov	r1, r9
   1394e:	f7f8 f811 	bl	b974 <memmove>
   13952:	68a3      	ldr	r3, [r4, #8]
   13954:	9a01      	ldr	r2, [sp, #4]
   13956:	eba3 010b 	sub.w	r1, r3, fp
   1395a:	6823      	ldr	r3, [r4, #0]
   1395c:	60a1      	str	r1, [r4, #8]
   1395e:	4413      	add	r3, r2
   13960:	46b2      	mov	sl, r6
   13962:	6023      	str	r3, [r4, #0]
   13964:	2600      	movs	r6, #0
   13966:	9a00      	ldr	r2, [sp, #0]
   13968:	6893      	ldr	r3, [r2, #8]
   1396a:	eba3 030a 	sub.w	r3, r3, sl
   1396e:	44d1      	add	r9, sl
   13970:	6093      	str	r3, [r2, #8]
   13972:	2b00      	cmp	r3, #0
   13974:	d0c3      	beq.n	138fe <__sfvwrite_r+0x62>
   13976:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1397a:	b280      	uxth	r0, r0
   1397c:	2e00      	cmp	r6, #0
   1397e:	d1d6      	bne.n	1392e <__sfvwrite_r+0x92>
   13980:	e9d5 9600 	ldrd	r9, r6, [r5]
   13984:	3508      	adds	r5, #8
   13986:	e7d1      	b.n	1392c <__sfvwrite_r+0x90>
   13988:	e9d5 a600 	ldrd	sl, r6, [r5]
   1398c:	3508      	adds	r5, #8
   1398e:	e7a0      	b.n	138d2 <__sfvwrite_r+0x36>
   13990:	4621      	mov	r1, r4
   13992:	4640      	mov	r0, r8
   13994:	f7fd fa42 	bl	10e1c <_fflush_r>
   13998:	b388      	cbz	r0, 139fe <__sfvwrite_r+0x162>
   1399a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139a2:	f04f 30ff 	mov.w	r0, #4294967295
   139a6:	81a3      	strh	r3, [r4, #12]
   139a8:	b003      	add	sp, #12
   139aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139ae:	2000      	movs	r0, #0
   139b0:	4770      	bx	lr
   139b2:	461e      	mov	r6, r3
   139b4:	46ba      	mov	sl, r7
   139b6:	4699      	mov	r9, r3
   139b8:	4618      	mov	r0, r3
   139ba:	9500      	str	r5, [sp, #0]
   139bc:	461f      	mov	r7, r3
   139be:	b366      	cbz	r6, 13a1a <__sfvwrite_r+0x17e>
   139c0:	2800      	cmp	r0, #0
   139c2:	d032      	beq.n	13a2a <__sfvwrite_r+0x18e>
   139c4:	464a      	mov	r2, r9
   139c6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   139ca:	6820      	ldr	r0, [r4, #0]
   139cc:	68a5      	ldr	r5, [r4, #8]
   139ce:	42b2      	cmp	r2, r6
   139d0:	bf28      	it	cs
   139d2:	4632      	movcs	r2, r6
   139d4:	4288      	cmp	r0, r1
   139d6:	d904      	bls.n	139e2 <__sfvwrite_r+0x146>
   139d8:	eb05 0b03 	add.w	fp, r5, r3
   139dc:	455a      	cmp	r2, fp
   139de:	f300 80a7 	bgt.w	13b30 <__sfvwrite_r+0x294>
   139e2:	4293      	cmp	r3, r2
   139e4:	dc64      	bgt.n	13ab0 <__sfvwrite_r+0x214>
   139e6:	69e1      	ldr	r1, [r4, #28]
   139e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   139ea:	463a      	mov	r2, r7
   139ec:	4640      	mov	r0, r8
   139ee:	47a8      	blx	r5
   139f0:	f1b0 0b00 	subs.w	fp, r0, #0
   139f4:	ddd1      	ble.n	1399a <__sfvwrite_r+0xfe>
   139f6:	ebb9 090b 	subs.w	r9, r9, fp
   139fa:	d0c9      	beq.n	13990 <__sfvwrite_r+0xf4>
   139fc:	2001      	movs	r0, #1
   139fe:	f8da 3008 	ldr.w	r3, [sl, #8]
   13a02:	eba3 030b 	sub.w	r3, r3, fp
   13a06:	445f      	add	r7, fp
   13a08:	eba6 060b 	sub.w	r6, r6, fp
   13a0c:	f8ca 3008 	str.w	r3, [sl, #8]
   13a10:	2b00      	cmp	r3, #0
   13a12:	f43f af74 	beq.w	138fe <__sfvwrite_r+0x62>
   13a16:	2e00      	cmp	r6, #0
   13a18:	d1d2      	bne.n	139c0 <__sfvwrite_r+0x124>
   13a1a:	9a00      	ldr	r2, [sp, #0]
   13a1c:	6856      	ldr	r6, [r2, #4]
   13a1e:	4613      	mov	r3, r2
   13a20:	3208      	adds	r2, #8
   13a22:	9200      	str	r2, [sp, #0]
   13a24:	2e00      	cmp	r6, #0
   13a26:	d0f8      	beq.n	13a1a <__sfvwrite_r+0x17e>
   13a28:	681f      	ldr	r7, [r3, #0]
   13a2a:	4632      	mov	r2, r6
   13a2c:	210a      	movs	r1, #10
   13a2e:	4638      	mov	r0, r7
   13a30:	f7f8 fb56 	bl	c0e0 <memchr>
   13a34:	2800      	cmp	r0, #0
   13a36:	f000 809c 	beq.w	13b72 <__sfvwrite_r+0x2d6>
   13a3a:	3001      	adds	r0, #1
   13a3c:	eba0 0907 	sub.w	r9, r0, r7
   13a40:	e7c0      	b.n	139c4 <__sfvwrite_r+0x128>
   13a42:	6820      	ldr	r0, [r4, #0]
   13a44:	6923      	ldr	r3, [r4, #16]
   13a46:	4298      	cmp	r0, r3
   13a48:	d816      	bhi.n	13a78 <__sfvwrite_r+0x1dc>
   13a4a:	6962      	ldr	r2, [r4, #20]
   13a4c:	42b2      	cmp	r2, r6
   13a4e:	d813      	bhi.n	13a78 <__sfvwrite_r+0x1dc>
   13a50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13a54:	42b3      	cmp	r3, r6
   13a56:	bf28      	it	cs
   13a58:	4633      	movcs	r3, r6
   13a5a:	69e1      	ldr	r1, [r4, #28]
   13a5c:	fb93 f3f2 	sdiv	r3, r3, r2
   13a60:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13a62:	fb02 f303 	mul.w	r3, r2, r3
   13a66:	4640      	mov	r0, r8
   13a68:	464a      	mov	r2, r9
   13a6a:	47b8      	blx	r7
   13a6c:	f1b0 0a00 	subs.w	sl, r0, #0
   13a70:	dd93      	ble.n	1399a <__sfvwrite_r+0xfe>
   13a72:	eba6 060a 	sub.w	r6, r6, sl
   13a76:	e776      	b.n	13966 <__sfvwrite_r+0xca>
   13a78:	45b3      	cmp	fp, r6
   13a7a:	46da      	mov	sl, fp
   13a7c:	bf28      	it	cs
   13a7e:	46b2      	movcs	sl, r6
   13a80:	4652      	mov	r2, sl
   13a82:	4649      	mov	r1, r9
   13a84:	f7f7 ff76 	bl	b974 <memmove>
   13a88:	68a3      	ldr	r3, [r4, #8]
   13a8a:	6822      	ldr	r2, [r4, #0]
   13a8c:	eba3 030a 	sub.w	r3, r3, sl
   13a90:	4452      	add	r2, sl
   13a92:	60a3      	str	r3, [r4, #8]
   13a94:	6022      	str	r2, [r4, #0]
   13a96:	2b00      	cmp	r3, #0
   13a98:	d1eb      	bne.n	13a72 <__sfvwrite_r+0x1d6>
   13a9a:	4621      	mov	r1, r4
   13a9c:	4640      	mov	r0, r8
   13a9e:	f7fd f9bd 	bl	10e1c <_fflush_r>
   13aa2:	2800      	cmp	r0, #0
   13aa4:	d0e5      	beq.n	13a72 <__sfvwrite_r+0x1d6>
   13aa6:	e778      	b.n	1399a <__sfvwrite_r+0xfe>
   13aa8:	6820      	ldr	r0, [r4, #0]
   13aaa:	46b3      	mov	fp, r6
   13aac:	4632      	mov	r2, r6
   13aae:	e74c      	b.n	1394a <__sfvwrite_r+0xae>
   13ab0:	4639      	mov	r1, r7
   13ab2:	9201      	str	r2, [sp, #4]
   13ab4:	f7f7 ff5e 	bl	b974 <memmove>
   13ab8:	9a01      	ldr	r2, [sp, #4]
   13aba:	68a3      	ldr	r3, [r4, #8]
   13abc:	1a9b      	subs	r3, r3, r2
   13abe:	60a3      	str	r3, [r4, #8]
   13ac0:	6823      	ldr	r3, [r4, #0]
   13ac2:	4413      	add	r3, r2
   13ac4:	6023      	str	r3, [r4, #0]
   13ac6:	4693      	mov	fp, r2
   13ac8:	e795      	b.n	139f6 <__sfvwrite_r+0x15a>
   13aca:	6823      	ldr	r3, [r4, #0]
   13acc:	6921      	ldr	r1, [r4, #16]
   13ace:	eba3 0b01 	sub.w	fp, r3, r1
   13ad2:	6963      	ldr	r3, [r4, #20]
   13ad4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13ad8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13adc:	f10b 0301 	add.w	r3, fp, #1
   13ae0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13ae4:	4433      	add	r3, r6
   13ae6:	4553      	cmp	r3, sl
   13ae8:	4652      	mov	r2, sl
   13aea:	bf84      	itt	hi
   13aec:	469a      	movhi	sl, r3
   13aee:	4652      	movhi	r2, sl
   13af0:	0543      	lsls	r3, r0, #21
   13af2:	d52c      	bpl.n	13b4e <__sfvwrite_r+0x2b2>
   13af4:	4611      	mov	r1, r2
   13af6:	4640      	mov	r0, r8
   13af8:	f7f6 f890 	bl	9c1c <_malloc_r>
   13afc:	2800      	cmp	r0, #0
   13afe:	d03b      	beq.n	13b78 <__sfvwrite_r+0x2dc>
   13b00:	465a      	mov	r2, fp
   13b02:	6921      	ldr	r1, [r4, #16]
   13b04:	9001      	str	r0, [sp, #4]
   13b06:	f7f4 fae5 	bl	80d4 <memcpy>
   13b0a:	89a2      	ldrh	r2, [r4, #12]
   13b0c:	9b01      	ldr	r3, [sp, #4]
   13b0e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13b12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13b16:	81a2      	strh	r2, [r4, #12]
   13b18:	eb03 000b 	add.w	r0, r3, fp
   13b1c:	6123      	str	r3, [r4, #16]
   13b1e:	ebaa 030b 	sub.w	r3, sl, fp
   13b22:	f8c4 a014 	str.w	sl, [r4, #20]
   13b26:	60a3      	str	r3, [r4, #8]
   13b28:	6020      	str	r0, [r4, #0]
   13b2a:	46b3      	mov	fp, r6
   13b2c:	4632      	mov	r2, r6
   13b2e:	e70c      	b.n	1394a <__sfvwrite_r+0xae>
   13b30:	4639      	mov	r1, r7
   13b32:	465a      	mov	r2, fp
   13b34:	f7f7 ff1e 	bl	b974 <memmove>
   13b38:	6823      	ldr	r3, [r4, #0]
   13b3a:	445b      	add	r3, fp
   13b3c:	6023      	str	r3, [r4, #0]
   13b3e:	4621      	mov	r1, r4
   13b40:	4640      	mov	r0, r8
   13b42:	f7fd f96b 	bl	10e1c <_fflush_r>
   13b46:	2800      	cmp	r0, #0
   13b48:	f43f af55 	beq.w	139f6 <__sfvwrite_r+0x15a>
   13b4c:	e725      	b.n	1399a <__sfvwrite_r+0xfe>
   13b4e:	4640      	mov	r0, r8
   13b50:	f7f6 fb2c 	bl	a1ac <_realloc_r>
   13b54:	4603      	mov	r3, r0
   13b56:	2800      	cmp	r0, #0
   13b58:	d1de      	bne.n	13b18 <__sfvwrite_r+0x27c>
   13b5a:	6921      	ldr	r1, [r4, #16]
   13b5c:	4640      	mov	r0, r8
   13b5e:	f7f8 fc21 	bl	c3a4 <_free_r>
   13b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b66:	220c      	movs	r2, #12
   13b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13b6c:	f8c8 2000 	str.w	r2, [r8]
   13b70:	e715      	b.n	1399e <__sfvwrite_r+0x102>
   13b72:	1c72      	adds	r2, r6, #1
   13b74:	4691      	mov	r9, r2
   13b76:	e726      	b.n	139c6 <__sfvwrite_r+0x12a>
   13b78:	220c      	movs	r2, #12
   13b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b7e:	f8c8 2000 	str.w	r2, [r8]
   13b82:	e70c      	b.n	1399e <__sfvwrite_r+0x102>
   13b84:	f04f 30ff 	mov.w	r0, #4294967295
   13b88:	e6ba      	b.n	13900 <__sfvwrite_r+0x64>
   13b8a:	bf00      	nop
   13b8c:	7ffffc00 	.word	0x7ffffc00

00013b90 <__submore>:
   13b90:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b98:	460c      	mov	r4, r1
   13b9a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   13b9c:	4299      	cmp	r1, r3
   13b9e:	d014      	beq.n	13bca <__submore+0x3a>
   13ba0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13ba2:	0077      	lsls	r7, r6, #1
   13ba4:	463a      	mov	r2, r7
   13ba6:	f7f6 fb01 	bl	a1ac <_realloc_r>
   13baa:	4605      	mov	r5, r0
   13bac:	b340      	cbz	r0, 13c00 <__submore+0x70>
   13bae:	eb00 0806 	add.w	r8, r0, r6
   13bb2:	4601      	mov	r1, r0
   13bb4:	4632      	mov	r2, r6
   13bb6:	4640      	mov	r0, r8
   13bb8:	f7f4 fa8c 	bl	80d4 <memcpy>
   13bbc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   13bc0:	f8c4 8000 	str.w	r8, [r4]
   13bc4:	2000      	movs	r0, #0
   13bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13bce:	f7f6 f825 	bl	9c1c <_malloc_r>
   13bd2:	b1a8      	cbz	r0, 13c00 <__submore+0x70>
   13bd4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13bdc:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   13be0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   13be4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   13be8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   13bec:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   13bf0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   13bf4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   13bf8:	6023      	str	r3, [r4, #0]
   13bfa:	2000      	movs	r0, #0
   13bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c00:	f04f 30ff 	mov.w	r0, #4294967295
   13c04:	e7df      	b.n	13bc6 <__submore+0x36>
   13c06:	bf00      	nop

00013c08 <__swsetup_r>:
   13c08:	b538      	push	{r3, r4, r5, lr}
   13c0a:	4b31      	ldr	r3, [pc, #196]	; (13cd0 <__swsetup_r+0xc8>)
   13c0c:	681b      	ldr	r3, [r3, #0]
   13c0e:	4605      	mov	r5, r0
   13c10:	460c      	mov	r4, r1
   13c12:	b113      	cbz	r3, 13c1a <__swsetup_r+0x12>
   13c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13c16:	2a00      	cmp	r2, #0
   13c18:	d04e      	beq.n	13cb8 <__swsetup_r+0xb0>
   13c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c1e:	0718      	lsls	r0, r3, #28
   13c20:	b29a      	uxth	r2, r3
   13c22:	d51c      	bpl.n	13c5e <__swsetup_r+0x56>
   13c24:	6921      	ldr	r1, [r4, #16]
   13c26:	b329      	cbz	r1, 13c74 <__swsetup_r+0x6c>
   13c28:	f012 0001 	ands.w	r0, r2, #1
   13c2c:	d007      	beq.n	13c3e <__swsetup_r+0x36>
   13c2e:	2000      	movs	r0, #0
   13c30:	60a0      	str	r0, [r4, #8]
   13c32:	6960      	ldr	r0, [r4, #20]
   13c34:	4240      	negs	r0, r0
   13c36:	61a0      	str	r0, [r4, #24]
   13c38:	b139      	cbz	r1, 13c4a <__swsetup_r+0x42>
   13c3a:	2000      	movs	r0, #0
   13c3c:	bd38      	pop	{r3, r4, r5, pc}
   13c3e:	0795      	lsls	r5, r2, #30
   13c40:	bf58      	it	pl
   13c42:	6960      	ldrpl	r0, [r4, #20]
   13c44:	60a0      	str	r0, [r4, #8]
   13c46:	2900      	cmp	r1, #0
   13c48:	d1f7      	bne.n	13c3a <__swsetup_r+0x32>
   13c4a:	0612      	lsls	r2, r2, #24
   13c4c:	bf58      	it	pl
   13c4e:	4608      	movpl	r0, r1
   13c50:	d5f4      	bpl.n	13c3c <__swsetup_r+0x34>
   13c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c56:	81a3      	strh	r3, [r4, #12]
   13c58:	f04f 30ff 	mov.w	r0, #4294967295
   13c5c:	bd38      	pop	{r3, r4, r5, pc}
   13c5e:	06d1      	lsls	r1, r2, #27
   13c60:	d52e      	bpl.n	13cc0 <__swsetup_r+0xb8>
   13c62:	0752      	lsls	r2, r2, #29
   13c64:	d414      	bmi.n	13c90 <__swsetup_r+0x88>
   13c66:	6921      	ldr	r1, [r4, #16]
   13c68:	f043 0308 	orr.w	r3, r3, #8
   13c6c:	81a3      	strh	r3, [r4, #12]
   13c6e:	b29a      	uxth	r2, r3
   13c70:	2900      	cmp	r1, #0
   13c72:	d1d9      	bne.n	13c28 <__swsetup_r+0x20>
   13c74:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13c78:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13c7c:	d0d4      	beq.n	13c28 <__swsetup_r+0x20>
   13c7e:	4621      	mov	r1, r4
   13c80:	4628      	mov	r0, r5
   13c82:	f000 f977 	bl	13f74 <__smakebuf_r>
   13c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c8a:	6921      	ldr	r1, [r4, #16]
   13c8c:	b29a      	uxth	r2, r3
   13c8e:	e7cb      	b.n	13c28 <__swsetup_r+0x20>
   13c90:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13c92:	b151      	cbz	r1, 13caa <__swsetup_r+0xa2>
   13c94:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13c98:	4291      	cmp	r1, r2
   13c9a:	d004      	beq.n	13ca6 <__swsetup_r+0x9e>
   13c9c:	4628      	mov	r0, r5
   13c9e:	f7f8 fb81 	bl	c3a4 <_free_r>
   13ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ca6:	2200      	movs	r2, #0
   13ca8:	6322      	str	r2, [r4, #48]	; 0x30
   13caa:	6921      	ldr	r1, [r4, #16]
   13cac:	2200      	movs	r2, #0
   13cae:	e9c4 1200 	strd	r1, r2, [r4]
   13cb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13cb6:	e7d7      	b.n	13c68 <__swsetup_r+0x60>
   13cb8:	4618      	mov	r0, r3
   13cba:	f7f7 fce3 	bl	b684 <__sinit>
   13cbe:	e7ac      	b.n	13c1a <__swsetup_r+0x12>
   13cc0:	2209      	movs	r2, #9
   13cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13cc6:	602a      	str	r2, [r5, #0]
   13cc8:	f04f 30ff 	mov.w	r0, #4294967295
   13ccc:	81a3      	strh	r3, [r4, #12]
   13cce:	bd38      	pop	{r3, r4, r5, pc}
   13cd0:	20008b7c 	.word	0x20008b7c

00013cd4 <__fputwc>:
   13cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13cd8:	b082      	sub	sp, #8
   13cda:	4682      	mov	sl, r0
   13cdc:	4688      	mov	r8, r1
   13cde:	4614      	mov	r4, r2
   13ce0:	f7f7 ff8e 	bl	bc00 <__locale_mb_cur_max>
   13ce4:	2801      	cmp	r0, #1
   13ce6:	d103      	bne.n	13cf0 <__fputwc+0x1c>
   13ce8:	f108 33ff 	add.w	r3, r8, #4294967295
   13cec:	2bfe      	cmp	r3, #254	; 0xfe
   13cee:	d936      	bls.n	13d5e <__fputwc+0x8a>
   13cf0:	f10d 0904 	add.w	r9, sp, #4
   13cf4:	4642      	mov	r2, r8
   13cf6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13cfa:	4649      	mov	r1, r9
   13cfc:	4650      	mov	r0, sl
   13cfe:	f7fe fb29 	bl	12354 <_wcrtomb_r>
   13d02:	1c42      	adds	r2, r0, #1
   13d04:	4606      	mov	r6, r0
   13d06:	d032      	beq.n	13d6e <__fputwc+0x9a>
   13d08:	b320      	cbz	r0, 13d54 <__fputwc+0x80>
   13d0a:	f89d c004 	ldrb.w	ip, [sp, #4]
   13d0e:	2500      	movs	r5, #0
   13d10:	e009      	b.n	13d26 <__fputwc+0x52>
   13d12:	6823      	ldr	r3, [r4, #0]
   13d14:	1c5a      	adds	r2, r3, #1
   13d16:	6022      	str	r2, [r4, #0]
   13d18:	f883 c000 	strb.w	ip, [r3]
   13d1c:	3501      	adds	r5, #1
   13d1e:	42b5      	cmp	r5, r6
   13d20:	d218      	bcs.n	13d54 <__fputwc+0x80>
   13d22:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13d26:	68a3      	ldr	r3, [r4, #8]
   13d28:	3b01      	subs	r3, #1
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	60a3      	str	r3, [r4, #8]
   13d2e:	daf0      	bge.n	13d12 <__fputwc+0x3e>
   13d30:	69a7      	ldr	r7, [r4, #24]
   13d32:	42bb      	cmp	r3, r7
   13d34:	4661      	mov	r1, ip
   13d36:	4622      	mov	r2, r4
   13d38:	4650      	mov	r0, sl
   13d3a:	db02      	blt.n	13d42 <__fputwc+0x6e>
   13d3c:	f1bc 0f0a 	cmp.w	ip, #10
   13d40:	d1e7      	bne.n	13d12 <__fputwc+0x3e>
   13d42:	f000 f983 	bl	1404c <__swbuf_r>
   13d46:	1c43      	adds	r3, r0, #1
   13d48:	d1e8      	bne.n	13d1c <__fputwc+0x48>
   13d4a:	4606      	mov	r6, r0
   13d4c:	4630      	mov	r0, r6
   13d4e:	b002      	add	sp, #8
   13d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d54:	4646      	mov	r6, r8
   13d56:	4630      	mov	r0, r6
   13d58:	b002      	add	sp, #8
   13d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d5e:	fa5f fc88 	uxtb.w	ip, r8
   13d62:	f88d c004 	strb.w	ip, [sp, #4]
   13d66:	4606      	mov	r6, r0
   13d68:	f10d 0904 	add.w	r9, sp, #4
   13d6c:	e7cf      	b.n	13d0e <__fputwc+0x3a>
   13d6e:	89a3      	ldrh	r3, [r4, #12]
   13d70:	4630      	mov	r0, r6
   13d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d76:	81a3      	strh	r3, [r4, #12]
   13d78:	b002      	add	sp, #8
   13d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d7e:	bf00      	nop

00013d80 <_fputwc_r>:
   13d80:	b530      	push	{r4, r5, lr}
   13d82:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13d84:	f013 0f01 	tst.w	r3, #1
   13d88:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13d8c:	4614      	mov	r4, r2
   13d8e:	b083      	sub	sp, #12
   13d90:	4605      	mov	r5, r0
   13d92:	b29a      	uxth	r2, r3
   13d94:	d101      	bne.n	13d9a <_fputwc_r+0x1a>
   13d96:	0598      	lsls	r0, r3, #22
   13d98:	d51c      	bpl.n	13dd4 <_fputwc_r+0x54>
   13d9a:	0490      	lsls	r0, r2, #18
   13d9c:	d406      	bmi.n	13dac <_fputwc_r+0x2c>
   13d9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13da8:	81a3      	strh	r3, [r4, #12]
   13daa:	6662      	str	r2, [r4, #100]	; 0x64
   13dac:	4622      	mov	r2, r4
   13dae:	4628      	mov	r0, r5
   13db0:	f7ff ff90 	bl	13cd4 <__fputwc>
   13db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13db6:	07da      	lsls	r2, r3, #31
   13db8:	4605      	mov	r5, r0
   13dba:	d402      	bmi.n	13dc2 <_fputwc_r+0x42>
   13dbc:	89a3      	ldrh	r3, [r4, #12]
   13dbe:	059b      	lsls	r3, r3, #22
   13dc0:	d502      	bpl.n	13dc8 <_fputwc_r+0x48>
   13dc2:	4628      	mov	r0, r5
   13dc4:	b003      	add	sp, #12
   13dc6:	bd30      	pop	{r4, r5, pc}
   13dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13dca:	f7f7 ffb5 	bl	bd38 <__retarget_lock_release_recursive>
   13dce:	4628      	mov	r0, r5
   13dd0:	b003      	add	sp, #12
   13dd2:	bd30      	pop	{r4, r5, pc}
   13dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13dd6:	9101      	str	r1, [sp, #4]
   13dd8:	f7f7 ffac 	bl	bd34 <__retarget_lock_acquire_recursive>
   13ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13de0:	9901      	ldr	r1, [sp, #4]
   13de2:	b29a      	uxth	r2, r3
   13de4:	e7d9      	b.n	13d9a <_fputwc_r+0x1a>
   13de6:	bf00      	nop

00013de8 <_wcsnrtombs_l>:
   13de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dec:	b08b      	sub	sp, #44	; 0x2c
   13dee:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   13df2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   13df4:	9103      	str	r1, [sp, #12]
   13df6:	4681      	mov	r9, r0
   13df8:	9205      	str	r2, [sp, #20]
   13dfa:	461e      	mov	r6, r3
   13dfc:	f1b8 0f00 	cmp.w	r8, #0
   13e00:	d05c      	beq.n	13ebc <_wcsnrtombs_l+0xd4>
   13e02:	9b03      	ldr	r3, [sp, #12]
   13e04:	2b00      	cmp	r3, #0
   13e06:	d05e      	beq.n	13ec6 <_wcsnrtombs_l+0xde>
   13e08:	9b05      	ldr	r3, [sp, #20]
   13e0a:	681d      	ldr	r5, [r3, #0]
   13e0c:	2f00      	cmp	r7, #0
   13e0e:	d06a      	beq.n	13ee6 <_wcsnrtombs_l+0xfe>
   13e10:	1e74      	subs	r4, r6, #1
   13e12:	b34e      	cbz	r6, 13e68 <_wcsnrtombs_l+0x80>
   13e14:	9b03      	ldr	r3, [sp, #12]
   13e16:	9304      	str	r3, [sp, #16]
   13e18:	3d04      	subs	r5, #4
   13e1a:	2600      	movs	r6, #0
   13e1c:	9501      	str	r5, [sp, #4]
   13e1e:	e00b      	b.n	13e38 <_wcsnrtombs_l+0x50>
   13e20:	9b03      	ldr	r3, [sp, #12]
   13e22:	bb2b      	cbnz	r3, 13e70 <_wcsnrtombs_l+0x88>
   13e24:	9b01      	ldr	r3, [sp, #4]
   13e26:	681a      	ldr	r2, [r3, #0]
   13e28:	2a00      	cmp	r2, #0
   13e2a:	d03a      	beq.n	13ea2 <_wcsnrtombs_l+0xba>
   13e2c:	45bc      	cmp	ip, r7
   13e2e:	d25c      	bcs.n	13eea <_wcsnrtombs_l+0x102>
   13e30:	3c01      	subs	r4, #1
   13e32:	1c63      	adds	r3, r4, #1
   13e34:	4666      	mov	r6, ip
   13e36:	d017      	beq.n	13e68 <_wcsnrtombs_l+0x80>
   13e38:	f8d8 3000 	ldr.w	r3, [r8]
   13e3c:	9302      	str	r3, [sp, #8]
   13e3e:	9b01      	ldr	r3, [sp, #4]
   13e40:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13e44:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13e48:	9301      	str	r3, [sp, #4]
   13e4a:	a907      	add	r1, sp, #28
   13e4c:	4643      	mov	r3, r8
   13e4e:	4648      	mov	r0, r9
   13e50:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13e54:	47a8      	blx	r5
   13e56:	1c42      	adds	r2, r0, #1
   13e58:	d03a      	beq.n	13ed0 <_wcsnrtombs_l+0xe8>
   13e5a:	eb00 0c06 	add.w	ip, r0, r6
   13e5e:	45bc      	cmp	ip, r7
   13e60:	d9de      	bls.n	13e20 <_wcsnrtombs_l+0x38>
   13e62:	9b02      	ldr	r3, [sp, #8]
   13e64:	e9c8 3b00 	strd	r3, fp, [r8]
   13e68:	4630      	mov	r0, r6
   13e6a:	b00b      	add	sp, #44	; 0x2c
   13e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e70:	2800      	cmp	r0, #0
   13e72:	dd0e      	ble.n	13e92 <_wcsnrtombs_l+0xaa>
   13e74:	9b04      	ldr	r3, [sp, #16]
   13e76:	9d01      	ldr	r5, [sp, #4]
   13e78:	4418      	add	r0, r3
   13e7a:	1e5a      	subs	r2, r3, #1
   13e7c:	a907      	add	r1, sp, #28
   13e7e:	f100 3eff 	add.w	lr, r0, #4294967295
   13e82:	f811 3b01 	ldrb.w	r3, [r1], #1
   13e86:	f802 3f01 	strb.w	r3, [r2, #1]!
   13e8a:	4572      	cmp	r2, lr
   13e8c:	d1f9      	bne.n	13e82 <_wcsnrtombs_l+0x9a>
   13e8e:	9501      	str	r5, [sp, #4]
   13e90:	9004      	str	r0, [sp, #16]
   13e92:	9b05      	ldr	r3, [sp, #20]
   13e94:	681a      	ldr	r2, [r3, #0]
   13e96:	3204      	adds	r2, #4
   13e98:	601a      	str	r2, [r3, #0]
   13e9a:	9b01      	ldr	r3, [sp, #4]
   13e9c:	681a      	ldr	r2, [r3, #0]
   13e9e:	2a00      	cmp	r2, #0
   13ea0:	d1c4      	bne.n	13e2c <_wcsnrtombs_l+0x44>
   13ea2:	9b03      	ldr	r3, [sp, #12]
   13ea4:	b10b      	cbz	r3, 13eaa <_wcsnrtombs_l+0xc2>
   13ea6:	9b05      	ldr	r3, [sp, #20]
   13ea8:	601a      	str	r2, [r3, #0]
   13eaa:	f10c 36ff 	add.w	r6, ip, #4294967295
   13eae:	2200      	movs	r2, #0
   13eb0:	4630      	mov	r0, r6
   13eb2:	f8c8 2000 	str.w	r2, [r8]
   13eb6:	b00b      	add	sp, #44	; 0x2c
   13eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ebc:	9b03      	ldr	r3, [sp, #12]
   13ebe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13ec2:	2b00      	cmp	r3, #0
   13ec4:	d1a0      	bne.n	13e08 <_wcsnrtombs_l+0x20>
   13ec6:	9b05      	ldr	r3, [sp, #20]
   13ec8:	f04f 37ff 	mov.w	r7, #4294967295
   13ecc:	681d      	ldr	r5, [r3, #0]
   13ece:	e79f      	b.n	13e10 <_wcsnrtombs_l+0x28>
   13ed0:	4606      	mov	r6, r0
   13ed2:	218a      	movs	r1, #138	; 0x8a
   13ed4:	2200      	movs	r2, #0
   13ed6:	4630      	mov	r0, r6
   13ed8:	f8c9 1000 	str.w	r1, [r9]
   13edc:	f8c8 2000 	str.w	r2, [r8]
   13ee0:	b00b      	add	sp, #44	; 0x2c
   13ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee6:	463e      	mov	r6, r7
   13ee8:	e7be      	b.n	13e68 <_wcsnrtombs_l+0x80>
   13eea:	4666      	mov	r6, ip
   13eec:	e7bc      	b.n	13e68 <_wcsnrtombs_l+0x80>
   13eee:	bf00      	nop

00013ef0 <_wcsnrtombs_r>:
   13ef0:	b510      	push	{r4, lr}
   13ef2:	b084      	sub	sp, #16
   13ef4:	4c05      	ldr	r4, [pc, #20]	; (13f0c <_wcsnrtombs_r+0x1c>)
   13ef6:	9806      	ldr	r0, [sp, #24]
   13ef8:	9000      	str	r0, [sp, #0]
   13efa:	9807      	ldr	r0, [sp, #28]
   13efc:	9001      	str	r0, [sp, #4]
   13efe:	4804      	ldr	r0, [pc, #16]	; (13f10 <_wcsnrtombs_r+0x20>)
   13f00:	6800      	ldr	r0, [r0, #0]
   13f02:	9402      	str	r4, [sp, #8]
   13f04:	f7ff ff70 	bl	13de8 <_wcsnrtombs_l>
   13f08:	b004      	add	sp, #16
   13f0a:	bd10      	pop	{r4, pc}
   13f0c:	200085f4 	.word	0x200085f4
   13f10:	20008b7c 	.word	0x20008b7c

00013f14 <category>:
   13f14:	4b15      	ldr	r3, [pc, #84]	; (13f6c <category+0x58>)
   13f16:	4298      	cmp	r0, r3
   13f18:	d823      	bhi.n	13f62 <category+0x4e>
   13f1a:	b570      	push	{r4, r5, r6, lr}
   13f1c:	4e14      	ldr	r6, [pc, #80]	; (13f70 <category+0x5c>)
   13f1e:	f04f 0e00 	mov.w	lr, #0
   13f22:	f640 04db 	movw	r4, #2267	; 0x8db
   13f26:	e003      	b.n	13f30 <category+0x1c>
   13f28:	f102 0e01 	add.w	lr, r2, #1
   13f2c:	45a6      	cmp	lr, r4
   13f2e:	dc16      	bgt.n	13f5e <category+0x4a>
   13f30:	eb04 020e 	add.w	r2, r4, lr
   13f34:	f022 0301 	bic.w	r3, r2, #1
   13f38:	eb03 0362 	add.w	r3, r3, r2, asr #1
   13f3c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13f40:	1052      	asrs	r2, r2, #1
   13f42:	7859      	ldrb	r1, [r3, #1]
   13f44:	885d      	ldrh	r5, [r3, #2]
   13f46:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   13f4a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13f4e:	448c      	add	ip, r1
   13f50:	4560      	cmp	r0, ip
   13f52:	d8e9      	bhi.n	13f28 <category+0x14>
   13f54:	4288      	cmp	r0, r1
   13f56:	d206      	bcs.n	13f66 <category+0x52>
   13f58:	1e54      	subs	r4, r2, #1
   13f5a:	45a6      	cmp	lr, r4
   13f5c:	dde8      	ble.n	13f30 <category+0x1c>
   13f5e:	20ff      	movs	r0, #255	; 0xff
   13f60:	bd70      	pop	{r4, r5, r6, pc}
   13f62:	20ff      	movs	r0, #255	; 0xff
   13f64:	4770      	bx	lr
   13f66:	7818      	ldrb	r0, [r3, #0]
   13f68:	bd70      	pop	{r4, r5, r6, pc}
   13f6a:	bf00      	nop
   13f6c:	000e01ef 	.word	0x000e01ef
   13f70:	2000270c 	.word	0x2000270c

00013f74 <__smakebuf_r>:
   13f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f78:	898b      	ldrh	r3, [r1, #12]
   13f7a:	460c      	mov	r4, r1
   13f7c:	0799      	lsls	r1, r3, #30
   13f7e:	b096      	sub	sp, #88	; 0x58
   13f80:	d508      	bpl.n	13f94 <__smakebuf_r+0x20>
   13f82:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13f86:	2201      	movs	r2, #1
   13f88:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13f8c:	6023      	str	r3, [r4, #0]
   13f8e:	b016      	add	sp, #88	; 0x58
   13f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13f98:	2900      	cmp	r1, #0
   13f9a:	4606      	mov	r6, r0
   13f9c:	db25      	blt.n	13fea <__smakebuf_r+0x76>
   13f9e:	466a      	mov	r2, sp
   13fa0:	f000 f8ac 	bl	140fc <_fstat_r>
   13fa4:	2800      	cmp	r0, #0
   13fa6:	db1f      	blt.n	13fe8 <__smakebuf_r+0x74>
   13fa8:	9d01      	ldr	r5, [sp, #4]
   13faa:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13fae:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13fb2:	fab5 f585 	clz	r5, r5
   13fb6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13fba:	096d      	lsrs	r5, r5, #5
   13fbc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13fc0:	4641      	mov	r1, r8
   13fc2:	4630      	mov	r0, r6
   13fc4:	f7f5 fe2a 	bl	9c1c <_malloc_r>
   13fc8:	b1e0      	cbz	r0, 14004 <__smakebuf_r+0x90>
   13fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13fce:	f8c4 8014 	str.w	r8, [r4, #20]
   13fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13fd6:	6020      	str	r0, [r4, #0]
   13fd8:	6120      	str	r0, [r4, #16]
   13fda:	81a3      	strh	r3, [r4, #12]
   13fdc:	bb35      	cbnz	r5, 1402c <__smakebuf_r+0xb8>
   13fde:	433b      	orrs	r3, r7
   13fe0:	81a3      	strh	r3, [r4, #12]
   13fe2:	b016      	add	sp, #88	; 0x58
   13fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fe8:	89a3      	ldrh	r3, [r4, #12]
   13fea:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13fee:	d019      	beq.n	14024 <__smakebuf_r+0xb0>
   13ff0:	f04f 0840 	mov.w	r8, #64	; 0x40
   13ff4:	2500      	movs	r5, #0
   13ff6:	4641      	mov	r1, r8
   13ff8:	4630      	mov	r0, r6
   13ffa:	462f      	mov	r7, r5
   13ffc:	f7f5 fe0e 	bl	9c1c <_malloc_r>
   14000:	2800      	cmp	r0, #0
   14002:	d1e2      	bne.n	13fca <__smakebuf_r+0x56>
   14004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14008:	059a      	lsls	r2, r3, #22
   1400a:	d4c0      	bmi.n	13f8e <__smakebuf_r+0x1a>
   1400c:	f023 0303 	bic.w	r3, r3, #3
   14010:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14014:	f043 0302 	orr.w	r3, r3, #2
   14018:	2101      	movs	r1, #1
   1401a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1401e:	81a3      	strh	r3, [r4, #12]
   14020:	6022      	str	r2, [r4, #0]
   14022:	e7b4      	b.n	13f8e <__smakebuf_r+0x1a>
   14024:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14028:	462f      	mov	r7, r5
   1402a:	e7c9      	b.n	13fc0 <__smakebuf_r+0x4c>
   1402c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14030:	4630      	mov	r0, r6
   14032:	f000 f879 	bl	14128 <_isatty_r>
   14036:	b910      	cbnz	r0, 1403e <__smakebuf_r+0xca>
   14038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1403c:	e7cf      	b.n	13fde <__smakebuf_r+0x6a>
   1403e:	89a3      	ldrh	r3, [r4, #12]
   14040:	f023 0303 	bic.w	r3, r3, #3
   14044:	f043 0301 	orr.w	r3, r3, #1
   14048:	b21b      	sxth	r3, r3
   1404a:	e7c8      	b.n	13fde <__smakebuf_r+0x6a>

0001404c <__swbuf_r>:
   1404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1404e:	460d      	mov	r5, r1
   14050:	4614      	mov	r4, r2
   14052:	4606      	mov	r6, r0
   14054:	b110      	cbz	r0, 1405c <__swbuf_r+0x10>
   14056:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14058:	2b00      	cmp	r3, #0
   1405a:	d04c      	beq.n	140f6 <__swbuf_r+0xaa>
   1405c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14060:	69a3      	ldr	r3, [r4, #24]
   14062:	60a3      	str	r3, [r4, #8]
   14064:	0717      	lsls	r7, r2, #28
   14066:	b290      	uxth	r0, r2
   14068:	d51b      	bpl.n	140a2 <__swbuf_r+0x56>
   1406a:	6923      	ldr	r3, [r4, #16]
   1406c:	b1cb      	cbz	r3, 140a2 <__swbuf_r+0x56>
   1406e:	b2ed      	uxtb	r5, r5
   14070:	0481      	lsls	r1, r0, #18
   14072:	462f      	mov	r7, r5
   14074:	d522      	bpl.n	140bc <__swbuf_r+0x70>
   14076:	6822      	ldr	r2, [r4, #0]
   14078:	6961      	ldr	r1, [r4, #20]
   1407a:	1ad3      	subs	r3, r2, r3
   1407c:	4299      	cmp	r1, r3
   1407e:	dd29      	ble.n	140d4 <__swbuf_r+0x88>
   14080:	3301      	adds	r3, #1
   14082:	68a1      	ldr	r1, [r4, #8]
   14084:	3901      	subs	r1, #1
   14086:	60a1      	str	r1, [r4, #8]
   14088:	1c51      	adds	r1, r2, #1
   1408a:	6021      	str	r1, [r4, #0]
   1408c:	7015      	strb	r5, [r2, #0]
   1408e:	6962      	ldr	r2, [r4, #20]
   14090:	429a      	cmp	r2, r3
   14092:	d027      	beq.n	140e4 <__swbuf_r+0x98>
   14094:	89a3      	ldrh	r3, [r4, #12]
   14096:	07db      	lsls	r3, r3, #31
   14098:	d501      	bpl.n	1409e <__swbuf_r+0x52>
   1409a:	2d0a      	cmp	r5, #10
   1409c:	d022      	beq.n	140e4 <__swbuf_r+0x98>
   1409e:	4638      	mov	r0, r7
   140a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140a2:	4621      	mov	r1, r4
   140a4:	4630      	mov	r0, r6
   140a6:	f7ff fdaf 	bl	13c08 <__swsetup_r>
   140aa:	bb08      	cbnz	r0, 140f0 <__swbuf_r+0xa4>
   140ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   140b0:	6923      	ldr	r3, [r4, #16]
   140b2:	b290      	uxth	r0, r2
   140b4:	b2ed      	uxtb	r5, r5
   140b6:	0481      	lsls	r1, r0, #18
   140b8:	462f      	mov	r7, r5
   140ba:	d4dc      	bmi.n	14076 <__swbuf_r+0x2a>
   140bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   140c0:	81a2      	strh	r2, [r4, #12]
   140c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   140c4:	6961      	ldr	r1, [r4, #20]
   140c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   140ca:	6662      	str	r2, [r4, #100]	; 0x64
   140cc:	6822      	ldr	r2, [r4, #0]
   140ce:	1ad3      	subs	r3, r2, r3
   140d0:	4299      	cmp	r1, r3
   140d2:	dcd5      	bgt.n	14080 <__swbuf_r+0x34>
   140d4:	4621      	mov	r1, r4
   140d6:	4630      	mov	r0, r6
   140d8:	f7fc fea0 	bl	10e1c <_fflush_r>
   140dc:	b940      	cbnz	r0, 140f0 <__swbuf_r+0xa4>
   140de:	6822      	ldr	r2, [r4, #0]
   140e0:	2301      	movs	r3, #1
   140e2:	e7ce      	b.n	14082 <__swbuf_r+0x36>
   140e4:	4621      	mov	r1, r4
   140e6:	4630      	mov	r0, r6
   140e8:	f7fc fe98 	bl	10e1c <_fflush_r>
   140ec:	2800      	cmp	r0, #0
   140ee:	d0d6      	beq.n	1409e <__swbuf_r+0x52>
   140f0:	f04f 37ff 	mov.w	r7, #4294967295
   140f4:	e7d3      	b.n	1409e <__swbuf_r+0x52>
   140f6:	f7f7 fac5 	bl	b684 <__sinit>
   140fa:	e7af      	b.n	1405c <__swbuf_r+0x10>

000140fc <_fstat_r>:
   140fc:	b570      	push	{r4, r5, r6, lr}
   140fe:	460c      	mov	r4, r1
   14100:	4d08      	ldr	r5, [pc, #32]	; (14124 <_fstat_r+0x28>)
   14102:	4603      	mov	r3, r0
   14104:	2600      	movs	r6, #0
   14106:	4620      	mov	r0, r4
   14108:	4611      	mov	r1, r2
   1410a:	461c      	mov	r4, r3
   1410c:	602e      	str	r6, [r5, #0]
   1410e:	f7f4 f9c5 	bl	849c <_fstat>
   14112:	1c43      	adds	r3, r0, #1
   14114:	d000      	beq.n	14118 <_fstat_r+0x1c>
   14116:	bd70      	pop	{r4, r5, r6, pc}
   14118:	682b      	ldr	r3, [r5, #0]
   1411a:	2b00      	cmp	r3, #0
   1411c:	d0fb      	beq.n	14116 <_fstat_r+0x1a>
   1411e:	6023      	str	r3, [r4, #0]
   14120:	bd70      	pop	{r4, r5, r6, pc}
   14122:	bf00      	nop
   14124:	20028e3c 	.word	0x20028e3c

00014128 <_isatty_r>:
   14128:	b538      	push	{r3, r4, r5, lr}
   1412a:	4d07      	ldr	r5, [pc, #28]	; (14148 <_isatty_r+0x20>)
   1412c:	2200      	movs	r2, #0
   1412e:	4604      	mov	r4, r0
   14130:	4608      	mov	r0, r1
   14132:	602a      	str	r2, [r5, #0]
   14134:	f7f4 f9b8 	bl	84a8 <_isatty>
   14138:	1c43      	adds	r3, r0, #1
   1413a:	d000      	beq.n	1413e <_isatty_r+0x16>
   1413c:	bd38      	pop	{r3, r4, r5, pc}
   1413e:	682b      	ldr	r3, [r5, #0]
   14140:	2b00      	cmp	r3, #0
   14142:	d0fb      	beq.n	1413c <_isatty_r+0x14>
   14144:	6023      	str	r3, [r4, #0]
   14146:	bd38      	pop	{r3, r4, r5, pc}
   14148:	20028e3c 	.word	0x20028e3c

0001414c <__aeabi_drsub>:
   1414c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   14150:	e002      	b.n	14158 <__adddf3>
   14152:	bf00      	nop

00014154 <__aeabi_dsub>:
   14154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00014158 <__adddf3>:
   14158:	b530      	push	{r4, r5, lr}
   1415a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1415e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   14162:	ea94 0f05 	teq	r4, r5
   14166:	bf08      	it	eq
   14168:	ea90 0f02 	teqeq	r0, r2
   1416c:	bf1f      	itttt	ne
   1416e:	ea54 0c00 	orrsne.w	ip, r4, r0
   14172:	ea55 0c02 	orrsne.w	ip, r5, r2
   14176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1417a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1417e:	f000 80e2 	beq.w	14346 <__adddf3+0x1ee>
   14182:	ea4f 5454 	mov.w	r4, r4, lsr #21
   14186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1418a:	bfb8      	it	lt
   1418c:	426d      	neglt	r5, r5
   1418e:	dd0c      	ble.n	141aa <__adddf3+0x52>
   14190:	442c      	add	r4, r5
   14192:	ea80 0202 	eor.w	r2, r0, r2
   14196:	ea81 0303 	eor.w	r3, r1, r3
   1419a:	ea82 0000 	eor.w	r0, r2, r0
   1419e:	ea83 0101 	eor.w	r1, r3, r1
   141a2:	ea80 0202 	eor.w	r2, r0, r2
   141a6:	ea81 0303 	eor.w	r3, r1, r3
   141aa:	2d36      	cmp	r5, #54	; 0x36
   141ac:	bf88      	it	hi
   141ae:	bd30      	pophi	{r4, r5, pc}
   141b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   141b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   141b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   141bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   141c0:	d002      	beq.n	141c8 <__adddf3+0x70>
   141c2:	4240      	negs	r0, r0
   141c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   141c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   141cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   141d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   141d4:	d002      	beq.n	141dc <__adddf3+0x84>
   141d6:	4252      	negs	r2, r2
   141d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   141dc:	ea94 0f05 	teq	r4, r5
   141e0:	f000 80a7 	beq.w	14332 <__adddf3+0x1da>
   141e4:	f1a4 0401 	sub.w	r4, r4, #1
   141e8:	f1d5 0e20 	rsbs	lr, r5, #32
   141ec:	db0d      	blt.n	1420a <__adddf3+0xb2>
   141ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   141f2:	fa22 f205 	lsr.w	r2, r2, r5
   141f6:	1880      	adds	r0, r0, r2
   141f8:	f141 0100 	adc.w	r1, r1, #0
   141fc:	fa03 f20e 	lsl.w	r2, r3, lr
   14200:	1880      	adds	r0, r0, r2
   14202:	fa43 f305 	asr.w	r3, r3, r5
   14206:	4159      	adcs	r1, r3
   14208:	e00e      	b.n	14228 <__adddf3+0xd0>
   1420a:	f1a5 0520 	sub.w	r5, r5, #32
   1420e:	f10e 0e20 	add.w	lr, lr, #32
   14212:	2a01      	cmp	r2, #1
   14214:	fa03 fc0e 	lsl.w	ip, r3, lr
   14218:	bf28      	it	cs
   1421a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1421e:	fa43 f305 	asr.w	r3, r3, r5
   14222:	18c0      	adds	r0, r0, r3
   14224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   14228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1422c:	d507      	bpl.n	1423e <__adddf3+0xe6>
   1422e:	f04f 0e00 	mov.w	lr, #0
   14232:	f1dc 0c00 	rsbs	ip, ip, #0
   14236:	eb7e 0000 	sbcs.w	r0, lr, r0
   1423a:	eb6e 0101 	sbc.w	r1, lr, r1
   1423e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14242:	d31b      	bcc.n	1427c <__adddf3+0x124>
   14244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14248:	d30c      	bcc.n	14264 <__adddf3+0x10c>
   1424a:	0849      	lsrs	r1, r1, #1
   1424c:	ea5f 0030 	movs.w	r0, r0, rrx
   14250:	ea4f 0c3c 	mov.w	ip, ip, rrx
   14254:	f104 0401 	add.w	r4, r4, #1
   14258:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1425c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   14260:	f080 809a 	bcs.w	14398 <__adddf3+0x240>
   14264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   14268:	bf08      	it	eq
   1426a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1426e:	f150 0000 	adcs.w	r0, r0, #0
   14272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14276:	ea41 0105 	orr.w	r1, r1, r5
   1427a:	bd30      	pop	{r4, r5, pc}
   1427c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   14280:	4140      	adcs	r0, r0
   14282:	eb41 0101 	adc.w	r1, r1, r1
   14286:	3c01      	subs	r4, #1
   14288:	bf28      	it	cs
   1428a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1428e:	d2e9      	bcs.n	14264 <__adddf3+0x10c>
   14290:	f091 0f00 	teq	r1, #0
   14294:	bf04      	itt	eq
   14296:	4601      	moveq	r1, r0
   14298:	2000      	moveq	r0, #0
   1429a:	fab1 f381 	clz	r3, r1
   1429e:	bf08      	it	eq
   142a0:	3320      	addeq	r3, #32
   142a2:	f1a3 030b 	sub.w	r3, r3, #11
   142a6:	f1b3 0220 	subs.w	r2, r3, #32
   142aa:	da0c      	bge.n	142c6 <__adddf3+0x16e>
   142ac:	320c      	adds	r2, #12
   142ae:	dd08      	ble.n	142c2 <__adddf3+0x16a>
   142b0:	f102 0c14 	add.w	ip, r2, #20
   142b4:	f1c2 020c 	rsb	r2, r2, #12
   142b8:	fa01 f00c 	lsl.w	r0, r1, ip
   142bc:	fa21 f102 	lsr.w	r1, r1, r2
   142c0:	e00c      	b.n	142dc <__adddf3+0x184>
   142c2:	f102 0214 	add.w	r2, r2, #20
   142c6:	bfd8      	it	le
   142c8:	f1c2 0c20 	rsble	ip, r2, #32
   142cc:	fa01 f102 	lsl.w	r1, r1, r2
   142d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   142d4:	bfdc      	itt	le
   142d6:	ea41 010c 	orrle.w	r1, r1, ip
   142da:	4090      	lslle	r0, r2
   142dc:	1ae4      	subs	r4, r4, r3
   142de:	bfa2      	ittt	ge
   142e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   142e4:	4329      	orrge	r1, r5
   142e6:	bd30      	popge	{r4, r5, pc}
   142e8:	ea6f 0404 	mvn.w	r4, r4
   142ec:	3c1f      	subs	r4, #31
   142ee:	da1c      	bge.n	1432a <__adddf3+0x1d2>
   142f0:	340c      	adds	r4, #12
   142f2:	dc0e      	bgt.n	14312 <__adddf3+0x1ba>
   142f4:	f104 0414 	add.w	r4, r4, #20
   142f8:	f1c4 0220 	rsb	r2, r4, #32
   142fc:	fa20 f004 	lsr.w	r0, r0, r4
   14300:	fa01 f302 	lsl.w	r3, r1, r2
   14304:	ea40 0003 	orr.w	r0, r0, r3
   14308:	fa21 f304 	lsr.w	r3, r1, r4
   1430c:	ea45 0103 	orr.w	r1, r5, r3
   14310:	bd30      	pop	{r4, r5, pc}
   14312:	f1c4 040c 	rsb	r4, r4, #12
   14316:	f1c4 0220 	rsb	r2, r4, #32
   1431a:	fa20 f002 	lsr.w	r0, r0, r2
   1431e:	fa01 f304 	lsl.w	r3, r1, r4
   14322:	ea40 0003 	orr.w	r0, r0, r3
   14326:	4629      	mov	r1, r5
   14328:	bd30      	pop	{r4, r5, pc}
   1432a:	fa21 f004 	lsr.w	r0, r1, r4
   1432e:	4629      	mov	r1, r5
   14330:	bd30      	pop	{r4, r5, pc}
   14332:	f094 0f00 	teq	r4, #0
   14336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1433a:	bf06      	itte	eq
   1433c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   14340:	3401      	addeq	r4, #1
   14342:	3d01      	subne	r5, #1
   14344:	e74e      	b.n	141e4 <__adddf3+0x8c>
   14346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1434a:	bf18      	it	ne
   1434c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   14350:	d029      	beq.n	143a6 <__adddf3+0x24e>
   14352:	ea94 0f05 	teq	r4, r5
   14356:	bf08      	it	eq
   14358:	ea90 0f02 	teqeq	r0, r2
   1435c:	d005      	beq.n	1436a <__adddf3+0x212>
   1435e:	ea54 0c00 	orrs.w	ip, r4, r0
   14362:	bf04      	itt	eq
   14364:	4619      	moveq	r1, r3
   14366:	4610      	moveq	r0, r2
   14368:	bd30      	pop	{r4, r5, pc}
   1436a:	ea91 0f03 	teq	r1, r3
   1436e:	bf1e      	ittt	ne
   14370:	2100      	movne	r1, #0
   14372:	2000      	movne	r0, #0
   14374:	bd30      	popne	{r4, r5, pc}
   14376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1437a:	d105      	bne.n	14388 <__adddf3+0x230>
   1437c:	0040      	lsls	r0, r0, #1
   1437e:	4149      	adcs	r1, r1
   14380:	bf28      	it	cs
   14382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   14386:	bd30      	pop	{r4, r5, pc}
   14388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1438c:	bf3c      	itt	cc
   1438e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   14392:	bd30      	popcc	{r4, r5, pc}
   14394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1439c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   143a0:	f04f 0000 	mov.w	r0, #0
   143a4:	bd30      	pop	{r4, r5, pc}
   143a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   143aa:	bf1a      	itte	ne
   143ac:	4619      	movne	r1, r3
   143ae:	4610      	movne	r0, r2
   143b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   143b4:	bf1c      	itt	ne
   143b6:	460b      	movne	r3, r1
   143b8:	4602      	movne	r2, r0
   143ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   143be:	bf06      	itte	eq
   143c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   143c4:	ea91 0f03 	teqeq	r1, r3
   143c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   143cc:	bd30      	pop	{r4, r5, pc}
   143ce:	bf00      	nop

000143d0 <__aeabi_ui2d>:
   143d0:	f090 0f00 	teq	r0, #0
   143d4:	bf04      	itt	eq
   143d6:	2100      	moveq	r1, #0
   143d8:	4770      	bxeq	lr
   143da:	b530      	push	{r4, r5, lr}
   143dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   143e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   143e4:	f04f 0500 	mov.w	r5, #0
   143e8:	f04f 0100 	mov.w	r1, #0
   143ec:	e750      	b.n	14290 <__adddf3+0x138>
   143ee:	bf00      	nop

000143f0 <__aeabi_i2d>:
   143f0:	f090 0f00 	teq	r0, #0
   143f4:	bf04      	itt	eq
   143f6:	2100      	moveq	r1, #0
   143f8:	4770      	bxeq	lr
   143fa:	b530      	push	{r4, r5, lr}
   143fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14400:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   14408:	bf48      	it	mi
   1440a:	4240      	negmi	r0, r0
   1440c:	f04f 0100 	mov.w	r1, #0
   14410:	e73e      	b.n	14290 <__adddf3+0x138>
   14412:	bf00      	nop

00014414 <__aeabi_f2d>:
   14414:	0042      	lsls	r2, r0, #1
   14416:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1441a:	ea4f 0131 	mov.w	r1, r1, rrx
   1441e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   14422:	bf1f      	itttt	ne
   14424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   14428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1442c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   14430:	4770      	bxne	lr
   14432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   14436:	bf08      	it	eq
   14438:	4770      	bxeq	lr
   1443a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1443e:	bf04      	itt	eq
   14440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   14444:	4770      	bxeq	lr
   14446:	b530      	push	{r4, r5, lr}
   14448:	f44f 7460 	mov.w	r4, #896	; 0x380
   1444c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14454:	e71c      	b.n	14290 <__adddf3+0x138>
   14456:	bf00      	nop

00014458 <__aeabi_ul2d>:
   14458:	ea50 0201 	orrs.w	r2, r0, r1
   1445c:	bf08      	it	eq
   1445e:	4770      	bxeq	lr
   14460:	b530      	push	{r4, r5, lr}
   14462:	f04f 0500 	mov.w	r5, #0
   14466:	e00a      	b.n	1447e <__aeabi_l2d+0x16>

00014468 <__aeabi_l2d>:
   14468:	ea50 0201 	orrs.w	r2, r0, r1
   1446c:	bf08      	it	eq
   1446e:	4770      	bxeq	lr
   14470:	b530      	push	{r4, r5, lr}
   14472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   14476:	d502      	bpl.n	1447e <__aeabi_l2d+0x16>
   14478:	4240      	negs	r0, r0
   1447a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1447e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14482:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1448a:	f43f aed8 	beq.w	1423e <__adddf3+0xe6>
   1448e:	f04f 0203 	mov.w	r2, #3
   14492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   14496:	bf18      	it	ne
   14498:	3203      	addne	r2, #3
   1449a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1449e:	bf18      	it	ne
   144a0:	3203      	addne	r2, #3
   144a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   144a6:	f1c2 0320 	rsb	r3, r2, #32
   144aa:	fa00 fc03 	lsl.w	ip, r0, r3
   144ae:	fa20 f002 	lsr.w	r0, r0, r2
   144b2:	fa01 fe03 	lsl.w	lr, r1, r3
   144b6:	ea40 000e 	orr.w	r0, r0, lr
   144ba:	fa21 f102 	lsr.w	r1, r1, r2
   144be:	4414      	add	r4, r2
   144c0:	e6bd      	b.n	1423e <__adddf3+0xe6>
   144c2:	bf00      	nop

000144c4 <__aeabi_d2lz>:
   144c4:	b508      	push	{r3, lr}
   144c6:	4602      	mov	r2, r0
   144c8:	460b      	mov	r3, r1
   144ca:	ec43 2b17 	vmov	d7, r2, r3
   144ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   144d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   144d6:	d403      	bmi.n	144e0 <__aeabi_d2lz+0x1c>
   144d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   144dc:	f000 b80c 	b.w	144f8 <__aeabi_d2ulz>
   144e0:	eeb1 7b47 	vneg.f64	d7, d7
   144e4:	ec51 0b17 	vmov	r0, r1, d7
   144e8:	f000 f806 	bl	144f8 <__aeabi_d2ulz>
   144ec:	4240      	negs	r0, r0
   144ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   144f2:	bd08      	pop	{r3, pc}
   144f4:	0000      	movs	r0, r0
	...

000144f8 <__aeabi_d2ulz>:
   144f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 14528 <__aeabi_d2ulz+0x30>
   144fc:	ec41 0b17 	vmov	d7, r0, r1
   14500:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 14530 <__aeabi_d2ulz+0x38>
   14504:	ee27 6b06 	vmul.f64	d6, d7, d6
   14508:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1450c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   14510:	eea4 7b45 	vfms.f64	d7, d4, d5
   14514:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   14518:	ee16 1a10 	vmov	r1, s12
   1451c:	ee17 0a90 	vmov	r0, s15
   14520:	4770      	bx	lr
   14522:	bf00      	nop
   14524:	f3af 8000 	nop.w
   14528:	00000000 	.word	0x00000000
   1452c:	3df00000 	.word	0x3df00000
   14530:	00000000 	.word	0x00000000
   14534:	41f00000 	.word	0x41f00000

00014538 <___ZN16CrashReportClasscvbEv_veneer>:
   14538:	f85f f000 	ldr.w	pc, [pc]	; 1453c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1453c:	60001ded 	.word	0x60001ded

00014540 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   14540:	f85f f000 	ldr.w	pc, [pc]	; 14544 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   14544:	60001655 	.word	0x60001655

00014548 <___init_veneer>:
   14548:	f85f f000 	ldr.w	pc, [pc]	; 1454c <___init_veneer+0x4>
   1454c:	600025f1 	.word	0x600025f1

00014550 <___reboot_Teensyduino__veneer>:
   14550:	f85f f000 	ldr.w	pc, [pc]	; 14554 <___reboot_Teensyduino__veneer+0x4>
   14554:	60002549 	.word	0x60002549
	...

Disassembly of section .fini:

00014560 <_fini>:
   14560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14562:	bf00      	nop

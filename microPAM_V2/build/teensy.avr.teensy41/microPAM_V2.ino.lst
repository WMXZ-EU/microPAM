
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200092c0 	.word	0x200092c0
6000142c:	20027520 	.word	0x20027520

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fd16 	bl	60001e70 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fcb4 	bl	60001e80 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fee2 	bl	60002314 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f875 	bl	60002650 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fcf0 	bl	60001f90 <configure_external_ram>
	analog_init();
600015b0:	f001 f814 	bl	600025dc <analog_init>
	pwm_init();
600015b4:	f001 f860 	bl	60002678 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 feda 	bl	60002370 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fc5a 	bl	60001e74 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 ff6b 	bl	600024a0 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fc53 	bl	60001e7c <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fc4f 	bl	60001e78 <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f845 	bl	60002668 <____libc_init_array_veneer>
	main();
600015de:	f001 f82f 	bl	60002640 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00014128 	.word	0x00014128
600015f0:	600027d4 	.word	0x600027d4
600015f4:	00000000 	.word	0x00000000
600015f8:	200092c0 	.word	0x200092c0
600015fc:	60016900 	.word	0x60016900
60001600:	20000000 	.word	0x20000000
60001604:	20009000 	.word	0x20009000
60001608:	00007c75 	.word	0x00007c75
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00007279 	.word	0x00007279
6000161c:	20027490 	.word	0x20027490
60001620:	0000727d 	.word	0x0000727d
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20027494 	.word	0x20027494
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaabf 	.word	0xaaaaaabf
6000166c:	00200007 	.word	0x00200007
60001670:	20068000 	.word	0x20068000

60001674 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001674:	4b20      	ldr	r3, [pc, #128]	; (600016f8 <CrashReportClass::clear()+0x84>)
60001676:	2000      	movs	r0, #0
{
60001678:	b430      	push	{r4, r5}
	info->ipsr  = 0;
6000167a:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000167e:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001682:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001686:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
6000168a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000168e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001692:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001696:	4919      	ldr	r1, [pc, #100]	; (600016fc <CrashReportClass::clear()+0x88>)
60001698:	4a19      	ldr	r2, [pc, #100]	; (60001700 <CrashReportClass::clear()+0x8c>)
6000169a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
6000169e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600016a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016a6:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600016aa:	4b16      	ldr	r3, [pc, #88]	; (60001704 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
600016ac:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600016ae:	4c16      	ldr	r4, [pc, #88]	; (60001708 <CrashReportClass::clear()+0x94>)
600016b0:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600016b2:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
600016b4:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
600016b8:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
600016ba:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
600016bc:	4b13      	ldr	r3, [pc, #76]	; (6000170c <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600016be:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
600016c2:	4618      	mov	r0, r3
600016c4:	3302      	adds	r3, #2
600016c6:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
600016c8:	42a3      	cmp	r3, r4
			a += *p++;
600016ca:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
600016ce:	4411      	add	r1, r2
		while (len > 0) {
600016d0:	d1f7      	bne.n	600016c2 <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
600016d2:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
600016d4:	4b0c      	ldr	r3, [pc, #48]	; (60001708 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
600016d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
600016da:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
600016de:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600016e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016e6:	4a09      	ldr	r2, [pc, #36]	; (6000170c <CrashReportClass::clear()+0x98>)
600016e8:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600016ec:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016f0:	f3bf 8f6f 	isb	sy
}
600016f4:	bc30      	pop	{r4, r5}
600016f6:	4770      	bx	lr
600016f8:	2027ff00 	.word	0x2027ff00
600016fc:	2027ff80 	.word	0x2027ff80
60001700:	2027ffa0 	.word	0x2027ffa0
60001704:	400f8000 	.word	0x400f8000
60001708:	2027f000 	.word	0x2027f000
6000170c:	2027ffc0 	.word	0x2027ffc0

60001710 <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
60001710:	4bb2      	ldr	r3, [pc, #712]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
60001712:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001716:	2a0b      	cmp	r2, #11
{
60001718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000171c:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000171e:	d11b      	bne.n	60001758 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
60001720:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001724:	49ae      	ldr	r1, [pc, #696]	; (600019e0 <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001726:	4baf      	ldr	r3, [pc, #700]	; (600019e4 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
60001728:	4eaf      	ldr	r6, [pc, #700]	; (600019e8 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
6000172a:	f101 0c04 	add.w	ip, r1, #4
6000172e:	4050      	eors	r0, r2
60001730:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001732:	f000 0201 	and.w	r2, r0, #1
60001736:	3c01      	subs	r4, #1
60001738:	fb03 f202 	mul.w	r2, r3, r2
6000173c:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001740:	d1f7      	bne.n	60001732 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001742:	45b4      	cmp	ip, r6
60001744:	d002      	beq.n	6000174c <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001746:	684a      	ldr	r2, [r1, #4]
60001748:	4661      	mov	r1, ip
6000174a:	e7ee      	b.n	6000172a <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
6000174c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 600019dc <CrashReportClass::printTo(Print&) const+0x2cc>
60001750:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001754:	4298      	cmp	r0, r3
60001756:	d079      	beq.n	6000184c <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001758:	682b      	ldr	r3, [r5, #0]
6000175a:	2217      	movs	r2, #23
6000175c:	49a3      	ldr	r1, [pc, #652]	; (600019ec <CrashReportClass::printTo(Print&) const+0x2dc>)
6000175e:	4628      	mov	r0, r5
60001760:	685b      	ldr	r3, [r3, #4]
60001762:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001764:	4628      	mov	r0, r5
60001766:	f000 ff77 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000176a:	682b      	ldr	r3, [r5, #0]
6000176c:	2248      	movs	r2, #72	; 0x48
6000176e:	49a0      	ldr	r1, [pc, #640]	; (600019f0 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001770:	685b      	ldr	r3, [r3, #4]
60001772:	4628      	mov	r0, r5
60001774:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001776:	4628      	mov	r0, r5
60001778:	f000 ff6e 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000177c:	682b      	ldr	r3, [r5, #0]
6000177e:	2249      	movs	r2, #73	; 0x49
60001780:	499c      	ldr	r1, [pc, #624]	; (600019f4 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001782:	685b      	ldr	r3, [r3, #4]
60001784:	4628      	mov	r0, r5
60001786:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001788:	4628      	mov	r0, r5
6000178a:	f000 ff65 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000178e:	682b      	ldr	r3, [r5, #0]
60001790:	2224      	movs	r2, #36	; 0x24
60001792:	4999      	ldr	r1, [pc, #612]	; (600019f8 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001794:	685b      	ldr	r3, [r3, #4]
60001796:	4628      	mov	r0, r5
60001798:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000179a:	4628      	mov	r0, r5
6000179c:	f000 ff5c 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017a0:	682b      	ldr	r3, [r5, #0]
600017a2:	2247      	movs	r2, #71	; 0x47
600017a4:	4995      	ldr	r1, [pc, #596]	; (600019fc <CrashReportClass::printTo(Print&) const+0x2ec>)
600017a6:	685b      	ldr	r3, [r3, #4]
600017a8:	4628      	mov	r0, r5
600017aa:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017ac:	4628      	mov	r0, r5
600017ae:	f000 ff53 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b2:	682b      	ldr	r3, [r5, #0]
600017b4:	223f      	movs	r2, #63	; 0x3f
600017b6:	4992      	ldr	r1, [pc, #584]	; (60001a00 <CrashReportClass::printTo(Print&) const+0x2f0>)
600017b8:	685b      	ldr	r3, [r3, #4]
600017ba:	4628      	mov	r0, r5
600017bc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017be:	4628      	mov	r0, r5
600017c0:	f000 ff4a 	bl	60002658 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600017c4:	4b8f      	ldr	r3, [pc, #572]	; (60001a04 <CrashReportClass::printTo(Print&) const+0x2f4>)
600017c6:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600017c8:	07a2      	lsls	r2, r4, #30
600017ca:	d50d      	bpl.n	600017e8 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
600017cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600017ce:	4b8e      	ldr	r3, [pc, #568]	; (60001a08 <CrashReportClass::printTo(Print&) const+0x2f8>)
600017d0:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	f000 8174 	beq.w	60001ac0 <CrashReportClass::printTo(Print&) const+0x3b0>
600017d8:	2240      	movs	r2, #64	; 0x40
600017da:	498c      	ldr	r1, [pc, #560]	; (60001a0c <CrashReportClass::printTo(Print&) const+0x2fc>)
600017dc:	685b      	ldr	r3, [r3, #4]
600017de:	4628      	mov	r0, r5
600017e0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017e2:	4628      	mov	r0, r5
600017e4:	f000 ff38 	bl	60002658 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600017e8:	0767      	lsls	r7, r4, #29
600017ea:	f100 815f 	bmi.w	60001aac <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600017ee:	0726      	lsls	r6, r4, #28
600017f0:	f100 8152 	bmi.w	60001a98 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600017f4:	06e0      	lsls	r0, r4, #27
600017f6:	f100 8145 	bmi.w	60001a84 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
600017fa:	06a1      	lsls	r1, r4, #26
600017fc:	f100 8138 	bmi.w	60001a70 <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001800:	0662      	lsls	r2, r4, #25
60001802:	f100 812b 	bmi.w	60001a5c <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001806:	0623      	lsls	r3, r4, #24
60001808:	f100 80dd 	bmi.w	600019c6 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000180c:	f414 7480 	ands.w	r4, r4, #256	; 0x100
60001810:	f040 80ad 	bne.w	6000196e <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001814:	4b71      	ldr	r3, [pc, #452]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
60001816:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
6000181a:	b196      	cbz	r6, 60001842 <CrashReportClass::printTo(Print&) const+0x132>
6000181c:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001820:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001822:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60001824:	487a      	ldr	r0, [pc, #488]	; (60001a10 <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
60001826:	4619      	mov	r1, r3
60001828:	3302      	adds	r3, #2
6000182a:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
6000182c:	4283      	cmp	r3, r0
			a += *p++;
6000182e:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60001832:	4414      	add	r4, r2
		while (len > 0) {
60001834:	d1f7      	bne.n	60001826 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
60001836:	b293      	uxth	r3, r2
		return a | (b << 16);
60001838:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
6000183c:	429f      	cmp	r7, r3
6000183e:	f000 817c 	beq.w	60001b3a <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
60001842:	f7ff ff17 	bl	60001674 <CrashReportClass::clear()>
}
60001846:	2001      	movs	r0, #1
60001848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
6000184c:	682b      	ldr	r3, [r5, #0]
6000184e:	220c      	movs	r2, #12
60001850:	4970      	ldr	r1, [pc, #448]	; (60001a14 <CrashReportClass::printTo(Print&) const+0x304>)
60001852:	4628      	mov	r0, r5
60001854:	685b      	ldr	r3, [r3, #4]
60001856:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001858:	4628      	mov	r0, r5
6000185a:	f000 fefd 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000185e:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001860:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001864:	4628      	mov	r0, r5
    info->time /= 60;
60001866:	4b6c      	ldr	r3, [pc, #432]	; (60001a18 <CrashReportClass::printTo(Print&) const+0x308>)
60001868:	f8d2 a004 	ldr.w	sl, [r2, #4]
6000186c:	fba3 2709 	umull	r2, r7, r3, r9
60001870:	496a      	ldr	r1, [pc, #424]	; (60001a1c <CrashReportClass::printTo(Print&) const+0x30c>)
60001872:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001874:	fba3 2307 	umull	r2, r3, r3, r7
60001878:	2226      	movs	r2, #38	; 0x26
6000187a:	095e      	lsrs	r6, r3, #5
6000187c:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001880:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001882:	4967      	ldr	r1, [pc, #412]	; (60001a20 <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001884:	220a      	movs	r2, #10
60001886:	4628      	mov	r0, r5
60001888:	fba1 3106 	umull	r3, r1, r1, r6
6000188c:	4623      	mov	r3, r4
6000188e:	0909      	lsrs	r1, r1, #4
60001890:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001894:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001898:	f000 fefa 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000189c:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
6000189e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018a2:	2201      	movs	r2, #1
600018a4:	685b      	ldr	r3, [r3, #4]
600018a6:	4628      	mov	r0, r5
600018a8:	495e      	ldr	r1, [pc, #376]	; (60001a24 <CrashReportClass::printTo(Print&) const+0x314>)
600018aa:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018ac:	4623      	mov	r3, r4
600018ae:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018b2:	220a      	movs	r2, #10
600018b4:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
600018b6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
600018ba:	f000 fee9 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018be:	682b      	ldr	r3, [r5, #0]
600018c0:	2201      	movs	r2, #1
600018c2:	4958      	ldr	r1, [pc, #352]	; (60001a24 <CrashReportClass::printTo(Print&) const+0x314>)
600018c4:	685b      	ldr	r3, [r3, #4]
600018c6:	4628      	mov	r0, r5
600018c8:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018ca:	4623      	mov	r3, r4
600018cc:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	f000 fedc 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
600018d8:	4628      	mov	r0, r5
600018da:	f000 febd 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018de:	682b      	ldr	r3, [r5, #0]
600018e0:	2224      	movs	r2, #36	; 0x24
600018e2:	4951      	ldr	r1, [pc, #324]	; (60001a28 <CrashReportClass::printTo(Print&) const+0x318>)
600018e4:	685b      	ldr	r3, [r3, #4]
600018e6:	4628      	mov	r0, r5
600018e8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600018ea:	4623      	mov	r3, r4
600018ec:	2210      	movs	r2, #16
600018ee:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
600018f2:	4628      	mov	r0, r5
600018f4:	f000 fecc 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
600018f8:	4628      	mov	r0, r5
600018fa:	f000 fead 	bl	60002658 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
600018fe:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001902:	2e00      	cmp	r6, #0
60001904:	f040 80df 	bne.w	60001ac6 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001908:	4e34      	ldr	r6, [pc, #208]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
6000190a:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000190e:	2c00      	cmp	r4, #0
60001910:	f040 80fa 	bne.w	60001b08 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001914:	682b      	ldr	r3, [r5, #0]
60001916:	2222      	movs	r2, #34	; 0x22
60001918:	4944      	ldr	r1, [pc, #272]	; (60001a2c <CrashReportClass::printTo(Print&) const+0x31c>)
6000191a:	4628      	mov	r0, r5
6000191c:	685b      	ldr	r3, [r3, #4]
6000191e:	4798      	blx	r3
    p.print(info->temp);
60001920:	4b2e      	ldr	r3, [pc, #184]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001922:	2102      	movs	r1, #2
60001924:	4628      	mov	r0, r5
60001926:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
6000192a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000192e:	f000 fe8b 	bl	60002648 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001932:	682b      	ldr	r3, [r5, #0]
60001934:	2205      	movs	r2, #5
60001936:	493e      	ldr	r1, [pc, #248]	; (60001a30 <CrashReportClass::printTo(Print&) const+0x320>)
60001938:	685b      	ldr	r3, [r3, #4]
6000193a:	4628      	mov	r0, r5
6000193c:	4798      	blx	r3
6000193e:	682b      	ldr	r3, [r5, #0]
60001940:	221d      	movs	r2, #29
60001942:	493c      	ldr	r1, [pc, #240]	; (60001a34 <CrashReportClass::printTo(Print&) const+0x324>)
60001944:	685b      	ldr	r3, [r3, #4]
60001946:	4628      	mov	r0, r5
60001948:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
6000194a:	4a3b      	ldr	r2, [pc, #236]	; (60001a38 <CrashReportClass::printTo(Print&) const+0x328>)
6000194c:	483b      	ldr	r0, [pc, #236]	; (60001a3c <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000194e:	2300      	movs	r3, #0
60001950:	6811      	ldr	r1, [r2, #0]
60001952:	220a      	movs	r2, #10
60001954:	fba0 0101 	umull	r0, r1, r0, r1
60001958:	4628      	mov	r0, r5
6000195a:	0c89      	lsrs	r1, r1, #18
6000195c:	f000 fe98 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2204      	movs	r2, #4
60001964:	4936      	ldr	r1, [pc, #216]	; (60001a40 <CrashReportClass::printTo(Print&) const+0x330>)
60001966:	685b      	ldr	r3, [r3, #4]
60001968:	4628      	mov	r0, r5
6000196a:	4798      	blx	r3
6000196c:	e72a      	b.n	600017c4 <CrashReportClass::printTo(Print&) const+0xb4>
6000196e:	682b      	ldr	r3, [r5, #0]
60001970:	2229      	movs	r2, #41	; 0x29
60001972:	4934      	ldr	r1, [pc, #208]	; (60001a44 <CrashReportClass::printTo(Print&) const+0x334>)
60001974:	4628      	mov	r0, r5
60001976:	685b      	ldr	r3, [r3, #4]
60001978:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000197a:	4628      	mov	r0, r5
6000197c:	f000 fe6c 	bl	60002658 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001980:	4920      	ldr	r1, [pc, #128]	; (60001a04 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001982:	6828      	ldr	r0, [r5, #0]
60001984:	2221      	movs	r2, #33	; 0x21
60001986:	688b      	ldr	r3, [r1, #8]
60001988:	6844      	ldr	r4, [r0, #4]
6000198a:	4628      	mov	r0, r5
6000198c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001990:	608b      	str	r3, [r1, #8]
60001992:	492d      	ldr	r1, [pc, #180]	; (60001a48 <CrashReportClass::printTo(Print&) const+0x338>)
60001994:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001996:	4628      	mov	r0, r5
60001998:	f000 fe5e 	bl	60002658 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000199c:	682b      	ldr	r3, [r5, #0]
6000199e:	2242      	movs	r2, #66	; 0x42
600019a0:	492a      	ldr	r1, [pc, #168]	; (60001a4c <CrashReportClass::printTo(Print&) const+0x33c>)
600019a2:	685b      	ldr	r3, [r3, #4]
600019a4:	4628      	mov	r0, r5
600019a6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019a8:	4628      	mov	r0, r5
600019aa:	f000 fe55 	bl	60002658 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600019ae:	4a28      	ldr	r2, [pc, #160]	; (60001a50 <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
600019b0:	4b28      	ldr	r3, [pc, #160]	; (60001a54 <CrashReportClass::printTo(Print&) const+0x344>)
600019b2:	2107      	movs	r1, #7
600019b4:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600019b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
600019b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600019bc:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
600019be:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
600019c2:	bf30      	wfi
600019c4:	e7fd      	b.n	600019c2 <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
600019c6:	682b      	ldr	r3, [r5, #0]
600019c8:	2221      	movs	r2, #33	; 0x21
600019ca:	4923      	ldr	r1, [pc, #140]	; (60001a58 <CrashReportClass::printTo(Print&) const+0x348>)
600019cc:	4628      	mov	r0, r5
600019ce:	685b      	ldr	r3, [r3, #4]
600019d0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019d2:	4628      	mov	r0, r5
600019d4:	f000 fe40 	bl	60002658 <___ZN5Print7printlnEv_veneer>
600019d8:	e718      	b.n	6000180c <CrashReportClass::printTo(Print&) const+0xfc>
600019da:	bf00      	nop
600019dc:	2027ff00 	.word	0x2027ff00
600019e0:	2027ff80 	.word	0x2027ff80
600019e4:	edb88320 	.word	0xedb88320
600019e8:	2027ffa8 	.word	0x2027ffa8
600019ec:	2000812c 	.word	0x2000812c
600019f0:	20008144 	.word	0x20008144
600019f4:	20008190 	.word	0x20008190
600019f8:	200081dc 	.word	0x200081dc
600019fc:	20008204 	.word	0x20008204
60001a00:	2000824c 	.word	0x2000824c
60001a04:	400f8000 	.word	0x400f8000
60001a08:	0bad00f1 	.word	0x0bad00f1
60001a0c:	200082d8 	.word	0x200082d8
60001a10:	2027ffdc 	.word	0x2027ffdc
60001a14:	20007c14 	.word	0x20007c14
60001a18:	88888889 	.word	0x88888889
60001a1c:	20007c24 	.word	0x20007c24
60001a20:	aaaaaaab 	.word	0xaaaaaaab
60001a24:	20007c4c 	.word	0x20007c4c
60001a28:	20007c50 	.word	0x20007c50
60001a2c:	200080d8 	.word	0x200080d8
60001a30:	200080fc 	.word	0x200080fc
60001a34:	20008104 	.word	0x20008104
60001a38:	200086c8 	.word	0x200086c8
60001a3c:	431bde83 	.word	0x431bde83
60001a40:	20008124 	.word	0x20008124
60001a44:	2000840c 	.word	0x2000840c
60001a48:	20008438 	.word	0x20008438
60001a4c:	2000845c 	.word	0x2000845c
60001a50:	400d4000 	.word	0x400d4000
60001a54:	400ac000 	.word	0x400ac000
60001a58:	200083e8 	.word	0x200083e8
							  return write((const uint8_t *)str, strlen(str)); }
60001a5c:	682b      	ldr	r3, [r5, #0]
60001a5e:	2221      	movs	r2, #33	; 0x21
60001a60:	499c      	ldr	r1, [pc, #624]	; (60001cd4 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001a62:	4628      	mov	r0, r5
60001a64:	685b      	ldr	r3, [r3, #4]
60001a66:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a68:	4628      	mov	r0, r5
60001a6a:	f000 fdf5 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a6e:	e6ca      	b.n	60001806 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a70:	682b      	ldr	r3, [r5, #0]
60001a72:	2229      	movs	r2, #41	; 0x29
60001a74:	4998      	ldr	r1, [pc, #608]	; (60001cd8 <CrashReportClass::printTo(Print&) const+0x5c8>)
60001a76:	4628      	mov	r0, r5
60001a78:	685b      	ldr	r3, [r3, #4]
60001a7a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a7c:	4628      	mov	r0, r5
60001a7e:	f000 fdeb 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a82:	e6bd      	b.n	60001800 <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a84:	682b      	ldr	r3, [r5, #0]
60001a86:	2226      	movs	r2, #38	; 0x26
60001a88:	4994      	ldr	r1, [pc, #592]	; (60001cdc <CrashReportClass::printTo(Print&) const+0x5cc>)
60001a8a:	4628      	mov	r0, r5
60001a8c:	685b      	ldr	r3, [r3, #4]
60001a8e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a90:	4628      	mov	r0, r5
60001a92:	f000 fde1 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001a96:	e6b0      	b.n	600017fa <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001a98:	682b      	ldr	r3, [r5, #0]
60001a9a:	222a      	movs	r2, #42	; 0x2a
60001a9c:	4990      	ldr	r1, [pc, #576]	; (60001ce0 <CrashReportClass::printTo(Print&) const+0x5d0>)
60001a9e:	4628      	mov	r0, r5
60001aa0:	685b      	ldr	r3, [r3, #4]
60001aa2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001aa4:	4628      	mov	r0, r5
60001aa6:	f000 fdd7 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001aaa:	e6a3      	b.n	600017f4 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001aac:	682b      	ldr	r3, [r5, #0]
60001aae:	2227      	movs	r2, #39	; 0x27
60001ab0:	498c      	ldr	r1, [pc, #560]	; (60001ce4 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001ab2:	4628      	mov	r0, r5
60001ab4:	685b      	ldr	r3, [r3, #4]
60001ab6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ab8:	4628      	mov	r0, r5
60001aba:	f000 fdcd 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001abe:	e696      	b.n	600017ee <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001ac0:	2248      	movs	r2, #72	; 0x48
60001ac2:	4989      	ldr	r1, [pc, #548]	; (60001ce8 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001ac4:	e68a      	b.n	600017dc <CrashReportClass::printTo(Print&) const+0xcc>
60001ac6:	682b      	ldr	r3, [r5, #0]
60001ac8:	2208      	movs	r2, #8
60001aca:	4988      	ldr	r1, [pc, #544]	; (60001cec <CrashReportClass::printTo(Print&) const+0x5dc>)
60001acc:	4628      	mov	r0, r5
60001ace:	685b      	ldr	r3, [r3, #4]
60001ad0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ad2:	4623      	mov	r3, r4
60001ad4:	2210      	movs	r2, #16
60001ad6:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001ada:	4628      	mov	r0, r5
60001adc:	f000 fdd8 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001ae0:	4628      	mov	r0, r5
60001ae2:	f000 fdb9 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ae6:	07f4      	lsls	r4, r6, #31
60001ae8:	d469      	bmi.n	60001bbe <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001aea:	07b0      	lsls	r0, r6, #30
60001aec:	f100 8153 	bmi.w	60001d96 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001af0:	0731      	lsls	r1, r6, #28
60001af2:	f100 8144 	bmi.w	60001d7e <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001af6:	06f2      	lsls	r2, r6, #27
60001af8:	f100 815d 	bmi.w	60001db6 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001afc:	06b3      	lsls	r3, r6, #26
60001afe:	d567      	bpl.n	60001bd0 <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	222a      	movs	r2, #42	; 0x2a
60001b04:	497a      	ldr	r1, [pc, #488]	; (60001cf0 <CrashReportClass::printTo(Print&) const+0x5e0>)
60001b06:	e05d      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2208      	movs	r2, #8
60001b0c:	4979      	ldr	r1, [pc, #484]	; (60001cf4 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001b0e:	4628      	mov	r0, r5
60001b10:	685b      	ldr	r3, [r3, #4]
60001b12:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b14:	2300      	movs	r3, #0
60001b16:	2210      	movs	r2, #16
60001b18:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001b1c:	4628      	mov	r0, r5
60001b1e:	f000 fdb7 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b22:	4628      	mov	r0, r5
60001b24:	f000 fd98 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001b28:	07a0      	lsls	r0, r4, #30
60001b2a:	d467      	bmi.n	60001bfc <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001b2c:	0061      	lsls	r1, r4, #1
60001b2e:	f57f aef1 	bpl.w	60001914 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001b32:	682b      	ldr	r3, [r5, #0]
60001b34:	221b      	movs	r2, #27
60001b36:	4970      	ldr	r1, [pc, #448]	; (60001cf8 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001b38:	e063      	b.n	60001c02 <CrashReportClass::printTo(Print&) const+0x4f2>
60001b3a:	2401      	movs	r4, #1
60001b3c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001d34 <CrashReportClass::printTo(Print&) const+0x624>
60001b40:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001d38 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001b44:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001d1c <CrashReportClass::printTo(Print&) const+0x60c>
60001b48:	e005      	b.n	60001b56 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001b4a:	3401      	adds	r4, #1
60001b4c:	2c07      	cmp	r4, #7
60001b4e:	f43f ae78 	beq.w	60001842 <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001b52:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001b56:	1e63      	subs	r3, r4, #1
60001b58:	2701      	movs	r7, #1
60001b5a:	fa07 f203 	lsl.w	r2, r7, r3
60001b5e:	4232      	tst	r2, r6
60001b60:	d0f3      	beq.n	60001b4a <CrashReportClass::printTo(Print&) const+0x43a>
60001b62:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001b66:	682b      	ldr	r3, [r5, #0]
60001b68:	220e      	movs	r2, #14
60001b6a:	4651      	mov	r1, sl
60001b6c:	685b      	ldr	r3, [r3, #4]
60001b6e:	4628      	mov	r0, r5
60001b70:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001b72:	4621      	mov	r1, r4
60001b74:	4628      	mov	r0, r5
60001b76:	f000 fd87 	bl	60002688 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b7a:	682b      	ldr	r3, [r5, #0]
60001b7c:	2205      	movs	r2, #5
60001b7e:	495f      	ldr	r1, [pc, #380]	; (60001cfc <CrashReportClass::printTo(Print&) const+0x5ec>)
60001b80:	685b      	ldr	r3, [r3, #4]
60001b82:	4628      	mov	r0, r5
60001b84:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001b86:	6871      	ldr	r1, [r6, #4]
60001b88:	2300      	movs	r3, #0
60001b8a:	220a      	movs	r2, #10
60001b8c:	4628      	mov	r0, r5
60001b8e:	f000 fd7f 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b92:	682b      	ldr	r3, [r5, #0]
60001b94:	2204      	movs	r2, #4
60001b96:	495a      	ldr	r1, [pc, #360]	; (60001d00 <CrashReportClass::printTo(Print&) const+0x5f0>)
60001b98:	685b      	ldr	r3, [r3, #4]
60001b9a:	4628      	mov	r0, r5
60001b9c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b9e:	6871      	ldr	r1, [r6, #4]
60001ba0:	2300      	movs	r3, #0
60001ba2:	2210      	movs	r2, #16
60001ba4:	4628      	mov	r0, r5
60001ba6:	f000 fd73 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001baa:	682b      	ldr	r3, [r5, #0]
60001bac:	463a      	mov	r2, r7
60001bae:	4955      	ldr	r1, [pc, #340]	; (60001d04 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001bb0:	685b      	ldr	r3, [r3, #4]
60001bb2:	4628      	mov	r0, r5
60001bb4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bb6:	4628      	mov	r0, r5
60001bb8:	f000 fd4e 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001bbc:	e7c5      	b.n	60001b4a <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001bbe:	682b      	ldr	r3, [r5, #0]
60001bc0:	2228      	movs	r2, #40	; 0x28
60001bc2:	4951      	ldr	r1, [pc, #324]	; (60001d08 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001bc4:	685b      	ldr	r3, [r3, #4]
60001bc6:	4628      	mov	r0, r5
60001bc8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bca:	4628      	mov	r0, r5
60001bcc:	f000 fd44 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001bd0:	0637      	lsls	r7, r6, #24
60001bd2:	d43c      	bmi.n	60001c4e <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001bd4:	05f4      	lsls	r4, r6, #23
60001bd6:	d41b      	bmi.n	60001c10 <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001bd8:	05b0      	lsls	r0, r6, #22
60001bda:	f100 80d8 	bmi.w	60001d8e <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001bde:	0571      	lsls	r1, r6, #21
60001be0:	f100 80d1 	bmi.w	60001d86 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001be4:	0532      	lsls	r2, r6, #20
60001be6:	f100 80e2 	bmi.w	60001dae <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001bea:	04f3      	lsls	r3, r6, #19
60001bec:	f100 80db 	bmi.w	60001da6 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001bf0:	04b7      	lsls	r7, r6, #18
60001bf2:	d516      	bpl.n	60001c22 <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001bf4:	682b      	ldr	r3, [r5, #0]
60001bf6:	2231      	movs	r2, #49	; 0x31
60001bf8:	4944      	ldr	r1, [pc, #272]	; (60001d0c <CrashReportClass::printTo(Print&) const+0x5fc>)
60001bfa:	e00c      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001bfc:	682b      	ldr	r3, [r5, #0]
60001bfe:	2226      	movs	r2, #38	; 0x26
60001c00:	4943      	ldr	r1, [pc, #268]	; (60001d10 <CrashReportClass::printTo(Print&) const+0x600>)
60001c02:	4628      	mov	r0, r5
60001c04:	685b      	ldr	r3, [r3, #4]
60001c06:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c08:	4628      	mov	r0, r5
60001c0a:	f000 fd25 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001c0e:	e681      	b.n	60001914 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001c10:	682b      	ldr	r3, [r5, #0]
60001c12:	2220      	movs	r2, #32
60001c14:	493f      	ldr	r1, [pc, #252]	; (60001d14 <CrashReportClass::printTo(Print&) const+0x604>)
60001c16:	685b      	ldr	r3, [r3, #4]
60001c18:	4628      	mov	r0, r5
60001c1a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c1c:	4628      	mov	r0, r5
60001c1e:	f000 fd1b 	bl	60002658 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001c22:	0434      	lsls	r4, r6, #16
60001c24:	d440      	bmi.n	60001ca8 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001c26:	03f0      	lsls	r0, r6, #15
60001c28:	d42e      	bmi.n	60001c88 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001c2a:	03b1      	lsls	r1, r6, #14
60001c2c:	f100 80b7 	bmi.w	60001d9e <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001c30:	0372      	lsls	r2, r6, #13
60001c32:	d44b      	bmi.n	60001ccc <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c34:	0333      	lsls	r3, r6, #12
60001c36:	f100 80c6 	bmi.w	60001dc6 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c3a:	01f7      	lsls	r7, r6, #7
60001c3c:	f100 80bf 	bmi.w	60001dbe <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c40:	01b4      	lsls	r4, r6, #6
60001c42:	f57f ae61 	bpl.w	60001908 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001c46:	682b      	ldr	r3, [r5, #0]
60001c48:	221b      	movs	r2, #27
60001c4a:	4933      	ldr	r1, [pc, #204]	; (60001d18 <CrashReportClass::printTo(Print&) const+0x608>)
60001c4c:	e01f      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001c4e:	682b      	ldr	r3, [r5, #0]
60001c50:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c52:	4c32      	ldr	r4, [pc, #200]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x60c>)
60001c54:	4628      	mov	r0, r5
60001c56:	4932      	ldr	r1, [pc, #200]	; (60001d20 <CrashReportClass::printTo(Print&) const+0x610>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c5c:	2210      	movs	r2, #16
60001c5e:	2300      	movs	r3, #0
60001c60:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c64:	4628      	mov	r0, r5
60001c66:	f000 fd13 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c6e:	2a1f      	cmp	r2, #31
60001c70:	d964      	bls.n	60001d3c <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c72:	4b2c      	ldr	r3, [pc, #176]	; (60001d24 <CrashReportClass::printTo(Print&) const+0x614>)
60001c74:	429a      	cmp	r2, r3
60001c76:	d303      	bcc.n	60001c80 <CrashReportClass::printTo(Print&) const+0x570>
60001c78:	3320      	adds	r3, #32
60001c7a:	429a      	cmp	r2, r3
60001c7c:	f0c0 80a7 	bcc.w	60001dce <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001c80:	4628      	mov	r0, r5
60001c82:	f000 fce9 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001c86:	e7a5      	b.n	60001bd4 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c88:	682b      	ldr	r3, [r5, #0]
60001c8a:	2223      	movs	r2, #35	; 0x23
60001c8c:	4926      	ldr	r1, [pc, #152]	; (60001d28 <CrashReportClass::printTo(Print&) const+0x618>)
60001c8e:	685b      	ldr	r3, [r3, #4]
60001c90:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c92:	4e22      	ldr	r6, [pc, #136]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x60c>)
60001c94:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c96:	4628      	mov	r0, r5
60001c98:	f000 fcde 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001c9c:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001ca0:	2c00      	cmp	r4, #0
60001ca2:	f43f ae37 	beq.w	60001914 <CrashReportClass::printTo(Print&) const+0x204>
60001ca6:	e72f      	b.n	60001b08 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001ca8:	682b      	ldr	r3, [r5, #0]
60001caa:	2221      	movs	r2, #33	; 0x21
60001cac:	491f      	ldr	r1, [pc, #124]	; (60001d2c <CrashReportClass::printTo(Print&) const+0x61c>)
60001cae:	4628      	mov	r0, r5
60001cb0:	685b      	ldr	r3, [r3, #4]
60001cb2:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001cb4:	4919      	ldr	r1, [pc, #100]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cb6:	2300      	movs	r3, #0
60001cb8:	2210      	movs	r2, #16
60001cba:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001cbe:	4628      	mov	r0, r5
60001cc0:	f000 fce6 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001cc4:	4628      	mov	r0, r5
60001cc6:	f000 fcc7 	bl	60002658 <___ZN5Print7printlnEv_veneer>
60001cca:	e7ac      	b.n	60001c26 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001ccc:	682b      	ldr	r3, [r5, #0]
60001cce:	2228      	movs	r2, #40	; 0x28
60001cd0:	4917      	ldr	r1, [pc, #92]	; (60001d30 <CrashReportClass::printTo(Print&) const+0x620>)
60001cd2:	e7dc      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001cd4:	200083c4 	.word	0x200083c4
60001cd8:	20008398 	.word	0x20008398
60001cdc:	20008370 	.word	0x20008370
60001ce0:	20008344 	.word	0x20008344
60001ce4:	2000831c 	.word	0x2000831c
60001ce8:	2000828c 	.word	0x2000828c
60001cec:	20007c78 	.word	0x20007c78
60001cf0:	20007d28 	.word	0x20007d28
60001cf4:	20008088 	.word	0x20008088
60001cf8:	200080bc 	.word	0x200080bc
60001cfc:	200084b0 	.word	0x200084b0
60001d00:	200084b8 	.word	0x200084b8
60001d04:	200081d8 	.word	0x200081d8
60001d08:	20007c84 	.word	0x20007c84
60001d0c:	20007f4c 	.word	0x20007f4c
60001d10:	20008094 	.word	0x20008094
60001d14:	20007e3c 	.word	0x20007e3c
60001d18:	2000806c 	.word	0x2000806c
60001d1c:	2027ff00 	.word	0x2027ff00
60001d20:	20007d54 	.word	0x20007d54
60001d24:	20027520 	.word	0x20027520
60001d28:	20007fa4 	.word	0x20007fa4
60001d2c:	20007f80 	.word	0x20007f80
60001d30:	20007ffc 	.word	0x20007ffc
60001d34:	200084a0 	.word	0x200084a0
60001d38:	2027ffc0 	.word	0x2027ffc0
60001d3c:	682b      	ldr	r3, [r5, #0]
60001d3e:	221e      	movs	r2, #30
60001d40:	4926      	ldr	r1, [pc, #152]	; (60001ddc <CrashReportClass::printTo(Print&) const+0x6cc>)
60001d42:	4628      	mov	r0, r5
60001d44:	685b      	ldr	r3, [r3, #4]
60001d46:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d48:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d4c:	2300      	movs	r3, #0
60001d4e:	2210      	movs	r2, #16
60001d50:	4628      	mov	r0, r5
60001d52:	f000 fc9d 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d56:	682b      	ldr	r3, [r5, #0]
60001d58:	223e      	movs	r2, #62	; 0x3e
60001d5a:	4921      	ldr	r1, [pc, #132]	; (60001de0 <CrashReportClass::printTo(Print&) const+0x6d0>)
60001d5c:	685b      	ldr	r3, [r3, #4]
60001d5e:	4628      	mov	r0, r5
60001d60:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d62:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d66:	2300      	movs	r3, #0
60001d68:	2210      	movs	r2, #16
60001d6a:	4628      	mov	r0, r5
60001d6c:	f000 fc90 	bl	60002690 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d70:	682b      	ldr	r3, [r5, #0]
60001d72:	221d      	movs	r2, #29
60001d74:	491b      	ldr	r1, [pc, #108]	; (60001de4 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001d76:	685b      	ldr	r3, [r3, #4]
60001d78:	4628      	mov	r0, r5
60001d7a:	4798      	blx	r3
60001d7c:	e780      	b.n	60001c80 <CrashReportClass::printTo(Print&) const+0x570>
60001d7e:	682b      	ldr	r3, [r5, #0]
60001d80:	2229      	movs	r2, #41	; 0x29
60001d82:	4919      	ldr	r1, [pc, #100]	; (60001de8 <CrashReportClass::printTo(Print&) const+0x6d8>)
60001d84:	e71e      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001d86:	682b      	ldr	r3, [r5, #0]
60001d88:	2244      	movs	r2, #68	; 0x44
60001d8a:	4918      	ldr	r1, [pc, #96]	; (60001dec <CrashReportClass::printTo(Print&) const+0x6dc>)
60001d8c:	e743      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001d8e:	682b      	ldr	r3, [r5, #0]
60001d90:	222c      	movs	r2, #44	; 0x2c
60001d92:	4917      	ldr	r1, [pc, #92]	; (60001df0 <CrashReportClass::printTo(Print&) const+0x6e0>)
60001d94:	e73f      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001d96:	682b      	ldr	r3, [r5, #0]
60001d98:	2221      	movs	r2, #33	; 0x21
60001d9a:	4916      	ldr	r1, [pc, #88]	; (60001df4 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001d9c:	e712      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001d9e:	682b      	ldr	r3, [r5, #0]
60001da0:	2232      	movs	r2, #50	; 0x32
60001da2:	4915      	ldr	r1, [pc, #84]	; (60001df8 <CrashReportClass::printTo(Print&) const+0x6e8>)
60001da4:	e773      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001da6:	682b      	ldr	r3, [r5, #0]
60001da8:	2233      	movs	r2, #51	; 0x33
60001daa:	4914      	ldr	r1, [pc, #80]	; (60001dfc <CrashReportClass::printTo(Print&) const+0x6ec>)
60001dac:	e733      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001dae:	682b      	ldr	r3, [r5, #0]
60001db0:	223f      	movs	r2, #63	; 0x3f
60001db2:	4913      	ldr	r1, [pc, #76]	; (60001e00 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001db4:	e72f      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001db6:	682b      	ldr	r3, [r5, #0]
60001db8:	2225      	movs	r2, #37	; 0x25
60001dba:	4912      	ldr	r1, [pc, #72]	; (60001e04 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001dbc:	e702      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001dbe:	682b      	ldr	r3, [r5, #0]
60001dc0:	2228      	movs	r2, #40	; 0x28
60001dc2:	4911      	ldr	r1, [pc, #68]	; (60001e08 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001dc4:	e763      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001dc6:	682b      	ldr	r3, [r5, #0]
60001dc8:	2216      	movs	r2, #22
60001dca:	4910      	ldr	r1, [pc, #64]	; (60001e0c <CrashReportClass::printTo(Print&) const+0x6fc>)
60001dcc:	e75f      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001dce:	682b      	ldr	r3, [r5, #0]
60001dd0:	2241      	movs	r2, #65	; 0x41
60001dd2:	490f      	ldr	r1, [pc, #60]	; (60001e10 <CrashReportClass::printTo(Print&) const+0x700>)
60001dd4:	4628      	mov	r0, r5
60001dd6:	685b      	ldr	r3, [r3, #4]
60001dd8:	4798      	blx	r3
60001dda:	e751      	b.n	60001c80 <CrashReportClass::printTo(Print&) const+0x570>
60001ddc:	20007d78 	.word	0x20007d78
60001de0:	20007d98 	.word	0x20007d98
60001de4:	20007dd8 	.word	0x20007dd8
60001de8:	20007cd4 	.word	0x20007cd4
60001dec:	20007e90 	.word	0x20007e90
60001df0:	20007e60 	.word	0x20007e60
60001df4:	20007cb0 	.word	0x20007cb0
60001df8:	20007fc8 	.word	0x20007fc8
60001dfc:	20007f18 	.word	0x20007f18
60001e00:	20007ed8 	.word	0x20007ed8
60001e04:	20007d00 	.word	0x20007d00
60001e08:	20008040 	.word	0x20008040
60001e0c:	20008028 	.word	0x20008028
60001e10:	20007df8 	.word	0x20007df8

60001e14 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001e14:	4b12      	ldr	r3, [pc, #72]	; (60001e60 <CrashReportClass::operator bool()+0x4c>)
60001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001e1a:	2b0b      	cmp	r3, #11
60001e1c:	d11e      	bne.n	60001e5c <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001e1e:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e22:	4810      	ldr	r0, [pc, #64]	; (60001e64 <CrashReportClass::operator bool()+0x50>)
{
60001e24:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001e26:	4d10      	ldr	r5, [pc, #64]	; (60001e68 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e28:	4c10      	ldr	r4, [pc, #64]	; (60001e6c <CrashReportClass::operator bool()+0x58>)
60001e2a:	e001      	b.n	60001e30 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e2c:	686b      	ldr	r3, [r5, #4]
60001e2e:	4675      	mov	r5, lr
60001e30:	f105 0e04 	add.w	lr, r5, #4
60001e34:	405a      	eors	r2, r3
60001e36:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e38:	f002 0301 	and.w	r3, r2, #1
60001e3c:	3901      	subs	r1, #1
60001e3e:	fb00 f303 	mul.w	r3, r0, r3
60001e42:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e46:	d1f7      	bne.n	60001e38 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e48:	45a6      	cmp	lr, r4
60001e4a:	d1ef      	bne.n	60001e2c <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e4c:	4b04      	ldr	r3, [pc, #16]	; (60001e60 <CrashReportClass::operator bool()+0x4c>)
60001e4e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e52:	1a80      	subs	r0, r0, r2
60001e54:	fab0 f080 	clz	r0, r0
60001e58:	0940      	lsrs	r0, r0, #5
}
60001e5a:	bd30      	pop	{r4, r5, pc}
	return false;
60001e5c:	2000      	movs	r0, #0
}
60001e5e:	4770      	bx	lr
60001e60:	2027ff00 	.word	0x2027ff00
60001e64:	edb88320 	.word	0xedb88320
60001e68:	2027ff80 	.word	0x2027ff80
60001e6c:	2027ffa8 	.word	0x2027ffa8

60001e70 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e70:	4770      	bx	lr
60001e72:	bf00      	nop

60001e74 <startup_default_middle_hook>:
60001e74:	4770      	bx	lr
60001e76:	bf00      	nop

60001e78 <startup_default_late_hook>:
60001e78:	4770      	bx	lr
60001e7a:	bf00      	nop

60001e7c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e7c:	bf00      	nop
60001e7e:	4770      	bx	lr

60001e80 <configure_cache>:
{
60001e80:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e86:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e88:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e8a:	4831      	ldr	r0, [pc, #196]	; (60001f50 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e8c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e90:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e94:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001e9a:	482e      	ldr	r0, [pc, #184]	; (60001f54 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e9c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001ea0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001ea6:	482c      	ldr	r0, [pc, #176]	; (60001f58 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001ea8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001eac:	4a2b      	ldr	r2, [pc, #172]	; (60001f5c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001eae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001eb2:	4c2b      	ldr	r4, [pc, #172]	; (60001f60 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001eb4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001eb8:	482a      	ldr	r0, [pc, #168]	; (60001f64 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001eba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001ebe:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001ec2:	4c29      	ldr	r4, [pc, #164]	; (60001f68 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ec4:	4829      	ldr	r0, [pc, #164]	; (60001f6c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001eca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ece:	4c28      	ldr	r4, [pc, #160]	; (60001f70 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ed0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001ed4:	4827      	ldr	r0, [pc, #156]	; (60001f74 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001ed6:	4a28      	ldr	r2, [pc, #160]	; (60001f78 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ed8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001edc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001ee0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ee4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ee8:	4c24      	ldr	r4, [pc, #144]	; (60001f7c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001eec:	4824      	ldr	r0, [pc, #144]	; (60001f80 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001eee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ef2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ef6:	4a23      	ldr	r2, [pc, #140]	; (60001f84 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ef8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001efc:	4c22      	ldr	r4, [pc, #136]	; (60001f88 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001efe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001f02:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f06:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001f0a:	4820      	ldr	r0, [pc, #128]	; (60001f8c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001f0c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001f10:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001f12:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001f16:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001f1a:	bf00      	nop
	asm("nop");
60001f1c:	bf00      	nop
	asm("nop");
60001f1e:	bf00      	nop
	asm("nop");
60001f20:	bf00      	nop
	asm("nop");
60001f22:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001f24:	2201      	movs	r2, #1
60001f26:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001f2a:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001f2e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001f32:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001f36:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001f3a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f3e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f42:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f46:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f4a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f4e:	4770      	bx	lr
60001f50:	1000003f 	.word	0x1000003f
60001f54:	07080025 	.word	0x07080025
60001f58:	00100009 	.word	0x00100009
60001f5c:	20027520 	.word	0x20027520
60001f60:	00200013 	.word	0x00200013
60001f64:	07020021 	.word	0x07020021
60001f68:	20000014 	.word	0x20000014
60001f6c:	13080025 	.word	0x13080025
60001f70:	10000009 	.word	0x10000009
60001f74:	20200016 	.word	0x20200016
60001f78:	130b0027 	.word	0x130b0027
60001f7c:	40000017 	.word	0x40000017
60001f80:	60000018 	.word	0x60000018
60001f84:	070b002f 	.word	0x070b002f
60001f88:	70000019 	.word	0x70000019
60001f8c:	8000001a 	.word	0x8000001a

60001f90 <configure_external_ram>:
{
60001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f92:	4bb8      	ldr	r3, [pc, #736]	; (60002274 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f94:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f96:	4eb8      	ldr	r6, [pc, #736]	; (60002278 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f98:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f9a:	4fb8      	ldr	r7, [pc, #736]	; (6000227c <configure_external_ram+0x2ec>)
{
60001f9c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f9e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	49b7      	ldr	r1, [pc, #732]	; (60002280 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001fa4:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fa8:	4db6      	ldr	r5, [pc, #728]	; (60002284 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001faa:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001fae:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fb2:	4cb5      	ldr	r4, [pc, #724]	; (60002288 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001fb4:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fb8:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fbc:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fc0:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fc4:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001fcc:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001fce:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001fd0:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001fd2:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001fd4:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fe2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fe6:	4aa9      	ldr	r2, [pc, #676]	; (6000228c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fe8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fec:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ff0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ff4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ff8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ffc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ffe:	4ba4      	ldr	r3, [pc, #656]	; (60002290 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002000:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002002:	48a4      	ldr	r0, [pc, #656]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002004:	49a4      	ldr	r1, [pc, #656]	; (60002298 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002006:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002008:	4aa4      	ldr	r2, [pc, #656]	; (6000229c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000200a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000200c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60002010:	f043 030c 	orr.w	r3, r3, #12
60002014:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002018:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000201c:	6803      	ldr	r3, [r0, #0]
6000201e:	f043 0302 	orr.w	r3, r3, #2
60002022:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002024:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002026:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002028:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000202c:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000202e:	4b9c      	ldr	r3, [pc, #624]	; (600022a0 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002030:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002032:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002034:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002036:	4c9b      	ldr	r4, [pc, #620]	; (600022a4 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002038:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000203a:	4a9b      	ldr	r2, [pc, #620]	; (600022a8 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000203c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002040:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002042:	68c3      	ldr	r3, [r0, #12]
60002044:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002048:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000204a:	6a03      	ldr	r3, [r0, #32]
6000204c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000204e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002050:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002052:	6a03      	ldr	r3, [r0, #32]
60002054:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002056:	4a95      	ldr	r2, [pc, #596]	; (600022ac <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002058:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000205a:	4c95      	ldr	r4, [pc, #596]	; (600022b0 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000205c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000205e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002060:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002062:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002064:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000206c:	f043 0301 	orr.w	r3, r3, #1
60002070:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002074:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002078:	498e      	ldr	r1, [pc, #568]	; (600022b4 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000207a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000207e:	f043 0301 	orr.w	r3, r3, #1
60002082:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002086:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000208a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000208c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000208e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002090:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002094:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002096:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002098:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000209a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000209e:	6803      	ldr	r3, [r0, #0]
600020a0:	f023 0302 	bic.w	r3, r3, #2
600020a4:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020a6:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020a8:	4b83      	ldr	r3, [pc, #524]	; (600022b8 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600020aa:	4984      	ldr	r1, [pc, #528]	; (600022bc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020ac:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600020ae:	f843 2b04 	str.w	r2, [r3], #4
600020b2:	428b      	cmp	r3, r1
600020b4:	d1fb      	bne.n	600020ae <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600020b6:	4a77      	ldr	r2, [pc, #476]	; (60002294 <configure_external_ram+0x304>)
600020b8:	6813      	ldr	r3, [r2, #0]
600020ba:	f043 0301 	orr.w	r3, r3, #1
600020be:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600020c0:	6813      	ldr	r3, [r2, #0]
600020c2:	f013 0301 	ands.w	r3, r3, #1
600020c6:	d1fb      	bne.n	600020c0 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020c8:	487a      	ldr	r0, [pc, #488]	; (600022b4 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020ca:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600020cc:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020d0:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020d2:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020d6:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020d8:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600020dc:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020e0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020e4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020e8:	4975      	ldr	r1, [pc, #468]	; (600022c0 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020ea:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ee:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020f2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020f6:	4873      	ldr	r0, [pc, #460]	; (600022c4 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020f8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020fc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002100:	4c71      	ldr	r4, [pc, #452]	; (600022c8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60002102:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002106:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000210a:	4970      	ldr	r1, [pc, #448]	; (600022cc <configure_external_ram+0x33c>)
6000210c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002110:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002112:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002116:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000211a:	485e      	ldr	r0, [pc, #376]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000211c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002120:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002124:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002128:	6943      	ldr	r3, [r0, #20]
6000212a:	07da      	lsls	r2, r3, #31
6000212c:	d5fc      	bpl.n	60002128 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002130:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002136:	4957      	ldr	r1, [pc, #348]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002138:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000213a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000213e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002142:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002146:	694b      	ldr	r3, [r1, #20]
60002148:	07db      	lsls	r3, r3, #31
6000214a:	d5fc      	bpl.n	60002146 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000214c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000214e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002150:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002154:	4a4f      	ldr	r2, [pc, #316]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002156:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002158:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002160:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002164:	6953      	ldr	r3, [r2, #20]
60002166:	07df      	lsls	r7, r3, #31
60002168:	d5fc      	bpl.n	60002164 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000216a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000216c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000216e:	4858      	ldr	r0, [pc, #352]	; (600022d0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002170:	4948      	ldr	r1, [pc, #288]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002172:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002174:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002178:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000217c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002180:	694b      	ldr	r3, [r1, #20]
60002182:	07de      	lsls	r6, r3, #31
60002184:	d5fc      	bpl.n	60002180 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002186:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000218a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000218e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002190:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002192:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002194:	4293      	cmp	r3, r2
60002196:	d165      	bne.n	60002264 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002198:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000219a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000219e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021a0:	483c      	ldr	r0, [pc, #240]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600021a2:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a6:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021aa:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ae:	6943      	ldr	r3, [r0, #20]
600021b0:	07dd      	lsls	r5, r3, #31
600021b2:	d5fc      	bpl.n	600021ae <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b6:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021ba:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a35      	ldr	r2, [pc, #212]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07dc      	lsls	r4, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021dc:	492d      	ldr	r1, [pc, #180]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021de:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021e0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021e4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ec:	694b      	ldr	r3, [r1, #20]
600021ee:	07d8      	lsls	r0, r3, #31
600021f0:	d5fc      	bpl.n	600021ec <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021f2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021f4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021fc:	4a25      	ldr	r2, [pc, #148]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021fe:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002200:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002204:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002208:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000220c:	6953      	ldr	r3, [r2, #20]
6000220e:	07d9      	lsls	r1, r3, #31
60002210:	d5fc      	bpl.n	6000220c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002212:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002214:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002218:	482d      	ldr	r0, [pc, #180]	; (600022d0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000221a:	491e      	ldr	r1, [pc, #120]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000221c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000221e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002222:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002226:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000222a:	694b      	ldr	r3, [r1, #20]
6000222c:	07da      	lsls	r2, r3, #31
6000222e:	d5fc      	bpl.n	6000222a <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60002230:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60002234:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002238:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000223a:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000223c:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000223e:	4293      	cmp	r3, r2
60002240:	d050      	beq.n	600022e4 <configure_external_ram+0x354>
60002242:	2508      	movs	r5, #8
60002244:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002248:	4922      	ldr	r1, [pc, #136]	; (600022d4 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000224a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000224c:	4b22      	ldr	r3, [pc, #136]	; (600022d8 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000224e:	4a23      	ldr	r2, [pc, #140]	; (600022dc <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002250:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002252:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002254:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002256:	2301      	movs	r3, #1
60002258:	4821      	ldr	r0, [pc, #132]	; (600022e0 <configure_external_ram+0x350>)
6000225a:	4422      	add	r2, r4
6000225c:	f000 fa10 	bl	60002680 <__sm_set_pool_veneer>
}
60002260:	b003      	add	sp, #12
60002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002264:	4b1e      	ldr	r3, [pc, #120]	; (600022e0 <configure_external_ram+0x350>)
60002266:	2200      	movs	r2, #0
60002268:	e9c3 2200 	strd	r2, r2, [r3]
6000226c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002270:	b003      	add	sp, #12
60002272:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002274:	401f8000 	.word	0x401f8000
60002278:	0001b0f9 	.word	0x0001b0f9
6000227c:	000110f9 	.word	0x000110f9
60002280:	401f8400 	.word	0x401f8400
60002284:	000170f9 	.word	0x000170f9
60002288:	400fc000 	.word	0x400fc000
6000228c:	1ffffcff 	.word	0x1ffffcff
60002290:	a0000300 	.word	0xa0000300
60002294:	402a4000 	.word	0x402a4000
60002298:	402a8000 	.word	0x402a8000
6000229c:	ffff0012 	.word	0xffff0012
600022a0:	00f737ff 	.word	0x00f737ff
600022a4:	80000040 	.word	0x80000040
600022a8:	7cf0ff00 	.word	0x7cf0ff00
600022ac:	830f00ff 	.word	0x830f00ff
600022b0:	00020063 	.word	0x00020063
600022b4:	5af05af0 	.word	0x5af05af0
600022b8:	402a4200 	.word	0x402a4200
600022bc:	402a4300 	.word	0x402a4300
600022c0:	3018049f 	.word	0x3018049f
600022c4:	0a1806eb 	.word	0x0a1806eb
600022c8:	0a180638 	.word	0x0a180638
600022cc:	26013206 	.word	0x26013206
600022d0:	00030004 	.word	0x00030004
600022d4:	70000000 	.word	0x70000000
600022d8:	70000000 	.word	0x70000000
600022dc:	200274df 	.word	0x200274df
600022e0:	20026e44 	.word	0x20026e44
	FLEXSPI2_IPCR0 = addr;
600022e4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ec:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ee:	4808      	ldr	r0, [pc, #32]	; (60002310 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022f0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022f4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022f8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022fc:	6943      	ldr	r3, [r0, #20]
600022fe:	07db      	lsls	r3, r3, #31
60002300:	d5fc      	bpl.n	600022fc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002302:	2301      	movs	r3, #1
60002304:	2510      	movs	r5, #16
60002306:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
6000230a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
6000230c:	e79c      	b.n	60002248 <configure_external_ram+0x2b8>
6000230e:	bf00      	nop
60002310:	402a4000 	.word	0x402a4000

60002314 <usb_pll_start>:
{
60002314:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002316:	4a15      	ldr	r2, [pc, #84]	; (6000236c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002318:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000231a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000231e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60002322:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002326:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000232a:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000232e:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60002330:	f013 0f02 	tst.w	r3, #2
60002334:	d10e      	bne.n	60002354 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60002336:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000233a:	d00f      	beq.n	6000235c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000233c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002340:	d00e      	beq.n	60002360 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002342:	2b00      	cmp	r3, #0
60002344:	daf3      	bge.n	6000232e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002346:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000234a:	d10b      	bne.n	60002364 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000234c:	065b      	lsls	r3, r3, #25
6000234e:	d50b      	bpl.n	60002368 <usb_pll_start+0x54>
}
60002350:	bcf0      	pop	{r4, r5, r6, r7}
60002352:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002354:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002356:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002358:	6190      	str	r0, [r2, #24]
			continue;
6000235a:	e7e8      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000235c:	6155      	str	r5, [r2, #20]
			continue;
6000235e:	e7e6      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002360:	6156      	str	r6, [r2, #20]
			continue;
60002362:	e7e4      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002364:	6191      	str	r1, [r2, #24]
			continue;
60002366:	e7e2      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002368:	6157      	str	r7, [r2, #20]
			continue;
6000236a:	e7e0      	b.n	6000232e <usb_pll_start+0x1a>
6000236c:	400d8000 	.word	0x400d8000

60002370 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002370:	4a3f      	ldr	r2, [pc, #252]	; (60002470 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002372:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002374:	493f      	ldr	r1, [pc, #252]	; (60002474 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002376:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000237a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000237e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002382:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002478 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002386:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000247c <tempmon_init+0x10c>
{
6000238e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002394:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002398:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000239c:	4d38      	ldr	r5, [pc, #224]	; (60002480 <tempmon_init+0x110>)
6000239e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600023a0:	4c38      	ldr	r4, [pc, #224]	; (60002484 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023a2:	4839      	ldr	r0, [pc, #228]	; (60002488 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600023a4:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023a6:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600023aa:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600023ac:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600023b4:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023b8:	ee07 1a10 	vmov	s14, r1
600023bc:	4b33      	ldr	r3, [pc, #204]	; (6000248c <tempmon_init+0x11c>)
600023be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600023c2:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023c8:	4931      	ldr	r1, [pc, #196]	; (60002490 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ca:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ce:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023d2:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023d6:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023da:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023de:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ea:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ee:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023f6:	4827      	ldr	r0, [pc, #156]	; (60002494 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023fc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002400:	ee75 5a87 	vadd.f32	s11, s11, s14
60002404:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002408:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000240c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002410:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002414:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002418:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000241c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002420:	ee16 3a10 	vmov	r3, s12
60002424:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000242c:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60002430:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002432:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002436:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000243e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002442:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002444:	4914      	ldr	r1, [pc, #80]	; (60002498 <tempmon_init+0x128>)
60002446:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000244a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000244e:	f043 0302 	orr.w	r3, r3, #2
60002452:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002456:	4b11      	ldr	r3, [pc, #68]	; (6000249c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002458:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000245c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002464:	2201      	movs	r2, #1
}
60002466:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002468:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000246c:	4770      	bx	lr
6000246e:	bf00      	nop
60002470:	400d8100 	.word	0x400d8100
60002474:	401f4400 	.word	0x401f4400
60002478:	42aa0000 	.word	0x42aa0000
6000247c:	42b40000 	.word	0x42b40000
60002480:	20026fb4 	.word	0x20026fb4
60002484:	20026fb0 	.word	0x20026fb0
60002488:	20026fb8 	.word	0x20026fb8
6000248c:	20026fbc 	.word	0x20026fbc
60002490:	0fff0000 	.word	0x0fff0000
60002494:	e000e400 	.word	0xe000e400
60002498:	20009000 	.word	0x20009000
6000249c:	00007e5d 	.word	0x00007e5d

600024a0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600024a0:	4b31      	ldr	r3, [pc, #196]	; (60002568 <usb_init+0xc8>)
600024a2:	f640 7261 	movw	r2, #3937	; 0xf61
{
600024a6:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600024a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600024ac:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
600024b0:	f000 f8f2 	bl	60002698 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600024b4:	4a2d      	ldr	r2, [pc, #180]	; (6000256c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
600024b6:	492e      	ldr	r1, [pc, #184]	; (60002570 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600024b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600024bc:	482d      	ldr	r0, [pc, #180]	; (60002574 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600024be:	f043 0303 	orr.w	r3, r3, #3
600024c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600024c6:	4b2c      	ldr	r3, [pc, #176]	; (60002578 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
600024c8:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600024cc:	6802      	ldr	r2, [r0, #0]
600024ce:	421a      	tst	r2, r3
600024d0:	d103      	bne.n	600024da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600024d2:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600024d6:	079a      	lsls	r2, r3, #30
600024d8:	d01b      	beq.n	60002512 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024da:	4a25      	ldr	r2, [pc, #148]	; (60002570 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600024dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024e0:	4b24      	ldr	r3, [pc, #144]	; (60002574 <usb_init+0xd4>)
600024e2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024e4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024e8:	f043 0302 	orr.w	r3, r3, #2
600024ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024f0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024f4:	079b      	lsls	r3, r3, #30
600024f6:	d4fb      	bmi.n	600024f0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024fc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002500:	4b1c      	ldr	r3, [pc, #112]	; (60002574 <usb_init+0xd4>)
60002502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002506:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000250a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000250c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000250e:	f000 f8a7 	bl	60002660 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002512:	4a18      	ldr	r2, [pc, #96]	; (60002574 <usb_init+0xd4>)
60002514:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002518:	4c15      	ldr	r4, [pc, #84]	; (60002570 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
6000251a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000251c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000251e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002520:	4b16      	ldr	r3, [pc, #88]	; (6000257c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60002522:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002524:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002528:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000252c:	4618      	mov	r0, r3
6000252e:	f000 f89f 	bl	60002670 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60002532:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002536:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002538:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000253c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002540:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002542:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002546:	641a      	str	r2, [r3, #64]	; 0x40
60002548:	4b0d      	ldr	r3, [pc, #52]	; (60002580 <usb_init+0xe0>)
6000254a:	4a0e      	ldr	r2, [pc, #56]	; (60002584 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000254c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002550:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002554:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002558:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000255c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000255e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002562:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002566:	bd10      	pop	{r4, pc}
60002568:	400d8000 	.word	0x400d8000
6000256c:	400fc000 	.word	0x400fc000
60002570:	402e0000 	.word	0x402e0000
60002574:	400d9000 	.word	0x400d9000
60002578:	001e1c00 	.word	0x001e1c00
6000257c:	20000000 	.word	0x20000000
60002580:	20009000 	.word	0x20009000
60002584:	0000810d 	.word	0x0000810d

60002588 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60002588:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000258a:	4b0e      	ldr	r3, [pc, #56]	; (600025c4 <_reboot_Teensyduino_+0x3c>)
6000258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000258e:	079b      	lsls	r3, r3, #30
60002590:	d400      	bmi.n	60002594 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002592:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002594:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002596:	4b0c      	ldr	r3, [pc, #48]	; (600025c8 <_reboot_Teensyduino_+0x40>)
60002598:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000259a:	4a0c      	ldr	r2, [pc, #48]	; (600025cc <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000259c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600025a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
600025a4:	490a      	ldr	r1, [pc, #40]	; (600025d0 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600025a6:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
600025aa:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600025ac:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600025ae:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600025b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
600025b6:	4807      	ldr	r0, [pc, #28]	; (600025d4 <_reboot_Teensyduino_+0x4c>)
600025b8:	4a07      	ldr	r2, [pc, #28]	; (600025d8 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600025ba:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
600025bc:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600025be:	689b      	ldr	r3, [r3, #8]
600025c0:	4798      	blx	r3
	}
	__builtin_unreachable();
600025c2:	bf00      	nop
600025c4:	401f4400 	.word	0x401f4400
600025c8:	402e0000 	.word	0x402e0000
600025cc:	400ac000 	.word	0x400ac000
600025d0:	00200003 	.word	0x00200003
600025d4:	20208000 	.word	0x20208000
600025d8:	eb120000 	.word	0xeb120000

600025dc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025dc:	4b10      	ldr	r3, [pc, #64]	; (60002620 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025de:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025e0:	4a10      	ldr	r2, [pc, #64]	; (60002624 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025e4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025e8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025ea:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ec:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025f2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025f6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025f8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025fa:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025fe:	061b      	lsls	r3, r3, #24
60002600:	d4fc      	bmi.n	600025fc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002602:	4a09      	ldr	r2, [pc, #36]	; (60002628 <analog_init+0x4c>)
60002604:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002608:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000260a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000260c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000260e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002610:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002614:	d1fb      	bne.n	6000260e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002616:	4a05      	ldr	r2, [pc, #20]	; (6000262c <analog_init+0x50>)
60002618:	7013      	strb	r3, [r2, #0]
}
6000261a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000261e:	4770      	bx	lr
60002620:	400fc000 	.word	0x400fc000
60002624:	400c4000 	.word	0x400c4000
60002628:	400c8000 	.word	0x400c8000
6000262c:	200274de 	.word	0x200274de

60002630 <_init>:
60002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002632:	bf00      	nop
60002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
60002636:	bc08      	pop	{r3}
60002638:	469e      	mov	lr, r3
6000263a:	4770      	bx	lr
6000263c:	0000      	movs	r0, r0
	...

60002640 <__main_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <__main_veneer+0x4>
60002644:	00007a5d 	.word	0x00007a5d

60002648 <___ZN5Print10printFloatEdh_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <___ZN5Print10printFloatEdh_veneer+0x4>
6000264c:	000073b9 	.word	0x000073b9

60002650 <__set_arm_clock_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <__set_arm_clock_veneer+0x4>
60002654:	000075ad 	.word	0x000075ad

60002658 <___ZN5Print7printlnEv_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <___ZN5Print7printlnEv_veneer+0x4>
6000265c:	0000733d 	.word	0x0000733d

60002660 <__delay_veneer>:
60002660:	f85f f000 	ldr.w	pc, [pc]	; 60002664 <__delay_veneer+0x4>
60002664:	0000789d 	.word	0x0000789d

60002668 <____libc_init_array_veneer>:
60002668:	f85f f000 	ldr.w	pc, [pc]	; 6000266c <____libc_init_array_veneer+0x4>
6000266c:	0000b885 	.word	0x0000b885

60002670 <__memset_veneer>:
60002670:	f85f f000 	ldr.w	pc, [pc]	; 60002674 <__memset_veneer+0x4>
60002674:	0000b60d 	.word	0x0000b60d

60002678 <__pwm_init_veneer>:
60002678:	f85f f000 	ldr.w	pc, [pc]	; 6000267c <__pwm_init_veneer+0x4>
6000267c:	000092d1 	.word	0x000092d1

60002680 <__sm_set_pool_veneer>:
60002680:	f85f f000 	ldr.w	pc, [pc]	; 60002684 <__sm_set_pool_veneer+0x4>
60002684:	00009411 	.word	0x00009411

60002688 <___ZN5Print5printEl_veneer>:
60002688:	f85f f000 	ldr.w	pc, [pc]	; 6000268c <___ZN5Print5printEl_veneer+0x4>
6000268c:	00007325 	.word	0x00007325

60002690 <___ZN5Print11printNumberEmhh_veneer>:
60002690:	f85f f000 	ldr.w	pc, [pc]	; 60002694 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002694:	00007391 	.word	0x00007391

60002698 <__usb_init_serialnumber_veneer>:
60002698:	f85f f000 	ldr.w	pc, [pc]	; 6000269c <__usb_init_serialnumber_veneer+0x4>
6000269c:	00008851 	.word	0x00008851

600026a0 <__frame_dummy_init_array_entry>:
600026a0:	00000045 000007d5 00001571              E.......q...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;  // ref manual 20.3.3.1.3 page 1231
		uint32_t lo2 = SNVS_HPRTCLR;
		if (lo1 == lo2 && hi1 == hi2) {
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      2c:	1049      	asrs	r1, r1, #1
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
			tv->tv_sec = (hi2 << 17) | (lo2 >> 15);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
			tv->tv_usec = ((lo2 & 0x7FFF) * 15625) >> 9;
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	4770      	bx	lr
      38:	200092c0 	.word	0x200092c0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	200092c0 	.word	0x200092c0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20026ed8 	.word	0x20026ed8
      64:	60020800 	.word	0x60020800

00000068 <loop>:
      68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	4c87      	ldr	r4, [pc, #540]	; (28c <loop+0x224>)
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
    *--str = 'U';
      6e:	b08b      	sub	sp, #44	; 0x2c
    *--str = 'C';
      70:	4d87      	ldr	r5, [pc, #540]	; (290 <loop+0x228>)
    *--str = 'T';
      72:	6823      	ldr	r3, [r4, #0]
    *--str = 'U';
      74:	3301      	adds	r3, #1
    *--str = 'C';
      76:	6023      	str	r3, [r4, #0]
    *--str = 'T';
      78:	f001 fac0 	bl	15fc <getDataCount()>
  }
  return str;
}
      7c:	882b      	ldrh	r3, [r5, #0]
    *--str = '0';
      7e:	4283      	cmp	r3, r0
      80:	4b84      	ldr	r3, [pc, #528]	; (294 <loop+0x22c>)
      82:	681a      	ldr	r2, [r3, #0]
      84:	bf38      	it	cc
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	07d1      	lsls	r1, r2, #31
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openRoot(FsVolume* vol) {
  if (!vol) {
    return false;
      8a:	d51f      	bpl.n	cc <loop+0x64>
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
      8c:	4e82      	ldr	r6, [pc, #520]	; (298 <loop+0x230>)
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f008 ff8d 	bl	8fac <usb_serial_available>
      92:	bb50      	cbnz	r0, ea <loop+0x82>
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      94:	8833      	ldrh	r3, [r6, #0]
      96:	b21b      	sxth	r3, r3
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      98:	2b00      	cmp	r3, #0
      9a:	dd03      	ble.n	a4 <loop+0x3c>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      9c:	2101      	movs	r1, #1
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      9e:	200d      	movs	r0, #13
    }
    return str;

   fail:
    return nullptr;
      a0:	f007 fc7a 	bl	7998 <digitalWrite>
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
      a4:	8830      	ldrh	r0, [r6, #0]
      a6:	b200      	sxth	r0, r0
}
      a8:	f001 f988 	bl	13bc <saveData(short)>
      ac:	8030      	strh	r0, [r6, #0]
      ae:	4e7b      	ldr	r6, [pc, #492]	; (29c <loop+0x234>)
}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
      b0:	2100      	movs	r1, #0
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b2:	200d      	movs	r0, #13
      b4:	f007 fc70 	bl	7998 <digitalWrite>
      b8:	4a79      	ldr	r2, [pc, #484]	; (2a0 <loop+0x238>)
      ba:	6833      	ldr	r3, [r6, #0]
  return str - name;

 fail:
  *name = 0;
  return 0;
}
      bc:	6817      	ldr	r7, [r2, #0]
      be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	42bb      	cmp	r3, r7
      c4:	d31e      	bcc.n	104 <loop+0x9c>
      c6:	b00b      	add	sp, #44	; 0x2c
      c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	4a75      	ldr	r2, [pc, #468]	; (2a4 <loop+0x23c>)
      ce:	4e72      	ldr	r6, [pc, #456]	; (298 <loop+0x230>)
}
      d0:	6812      	ldr	r2, [r2, #0]
	while (newdiv > 65535 && prescale < 7) {
      d2:	2a01      	cmp	r2, #1
      d4:	f04f 32ff 	mov.w	r2, #4294967295
      d8:	bf18      	it	ne
      da:	2200      	movne	r2, #0
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
      dc:	8032      	strh	r2, [r6, #0]
      de:	2201      	movs	r2, #1
      e0:	601a      	str	r2, [r3, #0]
      e2:	f008 ff63 	bl	8fac <usb_serial_available>
      e6:	2800      	cmp	r0, #0
      e8:	d0d4      	beq.n	94 <loop+0x2c>
      ea:	f008 ffa3 	bl	9034 <usb_serial_getchar>
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
      ee:	b2c0      	uxtb	r0, r0
      f0:	2873      	cmp	r0, #115	; 0x73
      f2:	d029      	beq.n	148 <loop+0xe0>
      f4:	2865      	cmp	r0, #101	; 0x65
      f6:	d11f      	bne.n	138 <loop+0xd0>
      f8:	8833      	ldrh	r3, [r6, #0]
      fa:	041b      	lsls	r3, r3, #16
      fc:	d4ca      	bmi.n	94 <loop+0x2c>
      fe:	2304      	movs	r3, #4
     100:	8033      	strh	r3, [r6, #0]
     102:	e7c7      	b.n	94 <loop+0x2c>
     104:	a808      	add	r0, sp, #32
     106:	f001 fc3d 	bl	1984 <rtc_get_datetime(datetime_t*)>
    return m_blockDev->syncDevice();
     10a:	4b67      	ldr	r3, [pc, #412]	; (2a8 <loop+0x240>)
     10c:	f9b3 3000 	ldrsh.w	r3, [r3]
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	bb03      	cbnz	r3, 154 <loop+0xec>
     112:	4b66      	ldr	r3, [pc, #408]	; (2ac <loop+0x244>)
     114:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 2e4 <loop+0x27c>
     118:	9307      	str	r3, [sp, #28]
     11a:	4b65      	ldr	r3, [pc, #404]	; (2b0 <loop+0x248>)
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
     11c:	9306      	str	r3, [sp, #24]
     11e:	2300      	movs	r3, #0
     120:	9a07      	ldr	r2, [sp, #28]
     122:	6037      	str	r7, [r6, #0]
     124:	6013      	str	r3, [r2, #0]
     126:	9a06      	ldr	r2, [sp, #24]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     128:	6023      	str	r3, [r4, #0]
	mask = p->mask;
	if (pinmode & mask) {
     12a:	f8cb 3000 	str.w	r3, [fp]
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	802b      	strh	r3, [r5, #0]
     130:	6013      	str	r3, [r2, #0]
	pinmode = *(p->reg + 1);
     132:	b00b      	add	sp, #44	; 0x2c
	mask = p->mask;
     134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (pinmode & mask) {
     138:	286d      	cmp	r0, #109	; 0x6d
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	d176      	bne.n	22a <loop+0x1c2>
     13c:	4a5a      	ldr	r2, [pc, #360]	; (2a8 <loop+0x240>)
     13e:	8813      	ldrh	r3, [r2, #0]
     140:	f1c3 0301 	rsb	r3, r3, #1
     144:	8013      	strh	r3, [r2, #0]
     146:	e7a5      	b.n	94 <loop+0x2c>
     148:	8833      	ldrh	r3, [r6, #0]
     14a:	041a      	lsls	r2, r3, #16
     14c:	d5a2      	bpl.n	94 <loop+0x2c>
     14e:	2300      	movs	r3, #0
     150:	8033      	strh	r3, [r6, #0]
     152:	e79f      	b.n	94 <loop+0x2c>
     154:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     158:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
        if (flags & T_ACCESS) {
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
     15c:	9304      	str	r3, [sp, #16]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     162:	4954      	ldr	r1, [pc, #336]	; (2b4 <loop+0x24c>)
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	9303      	str	r3, [sp, #12]
     166:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     16a:	4853      	ldr	r0, [pc, #332]	; (2b8 <loop+0x250>)
     16c:	9302      	str	r3, [sp, #8]
     16e:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
  bool skip = data[0] == EXFAT_TYPE_FILE;
     172:	f8df b170 	ldr.w	fp, [pc, #368]	; 2e4 <loop+0x27c>
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     176:	9301      	str	r3, [sp, #4]
     178:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     17c:	9300      	str	r3, [sp, #0]
     17e:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     182:	f007 f8f7 	bl	7374 <Print::printf(char const*, ...)>
}
     186:	2103      	movs	r1, #3
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     188:	484c      	ldr	r0, [pc, #304]	; (2bc <loop+0x254>)
     18a:	f008 ff79 	bl	9080 <usb_serial_write>
    writeMsg("Bad cluster count\r\n");
     18e:	2300      	movs	r3, #0
     190:	220a      	movs	r2, #10
     192:	6821      	ldr	r1, [r4, #0]
     194:	4848      	ldr	r0, [pc, #288]	; (2b8 <loop+0x250>)
     196:	f007 f8fb 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     19a:	2101      	movs	r1, #1
     19c:	4848      	ldr	r0, [pc, #288]	; (2c0 <loop+0x258>)
}
     19e:	f008 ff6f 	bl	9080 <usb_serial_write>
     1a2:	4b42      	ldr	r3, [pc, #264]	; (2ac <loop+0x244>)
     1a4:	220a      	movs	r2, #10
     1a6:	f8db 1000 	ldr.w	r1, [fp]
     1aa:	9307      	str	r3, [sp, #28]
     1ac:	2300      	movs	r3, #0
     1ae:	4842      	ldr	r0, [pc, #264]	; (2b8 <loop+0x250>)
     1b0:	f007 f8ee 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     1b4:	2101      	movs	r1, #1
     1b6:	4842      	ldr	r0, [pc, #264]	; (2c0 <loop+0x258>)
     1b8:	f008 ff62 	bl	9080 <usb_serial_write>
     1bc:	9907      	ldr	r1, [sp, #28]
     1be:	2300      	movs	r3, #0
     1c0:	220a      	movs	r2, #10
     1c2:	6809      	ldr	r1, [r1, #0]
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
     1c4:	483c      	ldr	r0, [pc, #240]	; (2b8 <loop+0x250>)
     1c6:	f007 f8e3 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
     1ca:	2101      	movs	r1, #1
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	483c      	ldr	r0, [pc, #240]	; (2c0 <loop+0x258>)
     1ce:	f008 ff57 	bl	9080 <usb_serial_write>
    return m_blockDev->syncDevice();
     1d2:	4b37      	ldr	r3, [pc, #220]	; (2b0 <loop+0x248>)
     1d4:	882a      	ldrh	r2, [r5, #0]
     1d6:	493b      	ldr	r1, [pc, #236]	; (2c4 <loop+0x25c>)
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1d8:	4837      	ldr	r0, [pc, #220]	; (2b8 <loop+0x250>)
     1da:	9306      	str	r3, [sp, #24]
     1dc:	f007 f8ca 	bl	7374 <Print::printf(char const*, ...)>
     1e0:	2102      	movs	r1, #2
     1e2:	4839      	ldr	r0, [pc, #228]	; (2c8 <loop+0x260>)
     1e4:	f008 ff4c 	bl	9080 <usb_serial_write>
     1e8:	9906      	ldr	r1, [sp, #24]
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ea:	2300      	movs	r3, #0
     1ec:	220a      	movs	r2, #10
     1ee:	6809      	ldr	r1, [r1, #0]
     1f0:	4831      	ldr	r0, [pc, #196]	; (2b8 <loop+0x250>)
     1f2:	f007 f8cd 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
     1f6:	2104      	movs	r1, #4
     1f8:	4834      	ldr	r0, [pc, #208]	; (2cc <loop+0x264>)

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fa:	f008 ff41 	bl	9080 <usb_serial_write>
			if (d > 2) {
     1fe:	4b34      	ldr	r3, [pc, #208]	; (2d0 <loop+0x268>)
     200:	f9b3 3000 	ldrsh.w	r3, [r3]
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	bb0b      	cbnz	r3, 24a <loop+0x1e2>
     206:	4699      	mov	r9, r3
     208:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 2e8 <loop+0x280>
     20c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2b8 <loop+0x250>
     210:	4b30      	ldr	r3, [pc, #192]	; (2d4 <loop+0x26c>)
     212:	4651      	mov	r1, sl
     214:	4640      	mov	r0, r8
     216:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     21a:	f109 0901 	add.w	r9, r9, #1
     21e:	f007 f8a9 	bl	7374 <Print::printf(char const*, ...)>
     222:	f1b9 0f08 	cmp.w	r9, #8
     226:	d1f3      	bne.n	210 <loop+0x1a8>
     228:	e779      	b.n	11e <loop+0xb6>
     22a:	283a      	cmp	r0, #58	; 0x3a
     22c:	d102      	bne.n	234 <loop+0x1cc>
     22e:	f001 fc6b 	bl	1b08 <menu1()>
     232:	e72f      	b.n	94 <loop+0x2c>
    char ch=Serial.read();
    if(ch=='s') if(status<CLOSED) status=CLOSED;
    if(ch=='e') if(status>STOPPED) status=MUSTSTOP;
    if(ch=='m') monitor=1-monitor;
    if(ch==':') menu1(); // returns only when menu1 gets not handled character
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
     234:	283f      	cmp	r0, #63	; 0x3f
     236:	d102      	bne.n	23e <loop+0x1d6>
     238:	f001 fc70 	bl	1b1c <menu2()>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
     23c:	e72a      	b.n	94 <loop+0x2c>
     23e:	2821      	cmp	r0, #33	; 0x21
     240:	f47f af28 	bne.w	94 <loop+0x2c>
     244:	f001 fd36 	bl	1cb4 <menu3()>
     248:	e724      	b.n	94 <loop+0x2c>
     24a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2ec <loop+0x284>
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     24e:	4922      	ldr	r1, [pc, #136]	; (2d8 <loop+0x270>)
     250:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2b8 <loop+0x250>
     254:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     258:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     25c:	4648      	mov	r0, r9
     25e:	f007 f889 	bl	7374 <Print::printf(char const*, ...)>
     262:	491d      	ldr	r1, [pc, #116]	; (2d8 <loop+0x270>)
     264:	45d0      	cmp	r8, sl
     266:	d1f7      	bne.n	258 <loop+0x1f0>
        Serial.printf("%2d",max_stat);
     268:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2f0 <loop+0x288>
     26c:	491b      	ldr	r1, [pc, #108]	; (2dc <loop+0x274>)
     26e:	f8d8 2000 	ldr.w	r2, [r8]
     272:	4811      	ldr	r0, [pc, #68]	; (2b8 <loop+0x250>)
     274:	f007 f87e 	bl	7374 <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     278:	2260      	movs	r2, #96	; 0x60
     27a:	2100      	movs	r1, #0
     27c:	4818      	ldr	r0, [pc, #96]	; (2e0 <loop+0x278>)
     27e:	f00b f9c5 	bl	b60c <memset>
        max_stat=0;        
     282:	2300      	movs	r3, #0
     284:	f8c8 3000 	str.w	r3, [r8]
     288:	e749      	b.n	11e <loop+0xb6>
     28a:	bf00      	nop
     28c:	200268bc 	.word	0x200268bc
     290:	200274c0 	.word	0x200274c0
     294:	2000958c 	.word	0x2000958c
     298:	200274c2 	.word	0x200274c2
     29c:	200268b8 	.word	0x200268b8
     2a0:	20027494 	.word	0x20027494
     2a4:	200274a8 	.word	0x200274a8
     2a8:	200274c4 	.word	0x200274c4
     2ac:	20026ef4 	.word	0x20026ef4
     2b0:	20026e2c 	.word	0x20026e2c
     2b4:	20007b50 	.word	0x20007b50
     2b8:	200086cc 	.word	0x200086cc
     2bc:	20007b74 	.word	0x20007b74
     2c0:	200004dc 	.word	0x200004dc
     2c4:	20007b78 	.word	0x20007b78
     2c8:	20007b7c 	.word	0x20007b7c
     2cc:	20007b80 	.word	0x20007b80
     2d0:	200274c8 	.word	0x200274c8
     2d4:	20026eac 	.word	0x20026eac
     2d8:	20007b90 	.word	0x20007b90
     2dc:	20007b98 	.word	0x20007b98
     2e0:	20026ef8 	.word	0x20026ef8
     2e4:	20026ef0 	.word	0x20026ef0
     2e8:	20007b88 	.word	0x20007b88
     2ec:	20026ef4 	.word	0x20026ef4
     2f0:	20026ecc 	.word	0x20026ecc

000002f4 <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(100);} // wait for setup() to finish
     2f4:	b510      	push	{r4, lr}
     2f6:	4c0b      	ldr	r4, [pc, #44]	; (324 <setup1()+0x30>)
     2f8:	6823      	ldr	r3, [r4, #0]
     2fa:	b92b      	cbnz	r3, 308 <setup1()+0x14>
     2fc:	2064      	movs	r0, #100	; 0x64
     2fe:	f007 facd 	bl	789c <delay>
     302:	6823      	ldr	r3, [r4, #0]
     304:	2b00      	cmp	r3, #0
     306:	d0f9      	beq.n	2fc <setup1()+0x8>
  i2s_setup();
     308:	f000 f9b8 	bl	67c <i2s_setup()>
  //adc_setup();
  dma_setup();
     30c:	f000 f9fc 	bl	708 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     310:	210b      	movs	r1, #11
     312:	4805      	ldr	r0, [pc, #20]	; (328 <setup1()+0x34>)
     314:	f008 feb4 	bl	9080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     318:	4804      	ldr	r0, [pc, #16]	; (32c <setup1()+0x38>)
     31a:	f007 f80f 	bl	733c <Print::println()>

  Serial.println("Setup1 done");
  ready=0;
     31e:	2300      	movs	r3, #0
     320:	6023      	str	r3, [r4, #0]
}
     322:	bd10      	pop	{r4, pc}
     324:	20026f58 	.word	0x20026f58
     328:	200005a0 	.word	0x200005a0
     32c:	200086cc 	.word	0x200086cc

00000330 <setup>:
{
     330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     334:	4d52      	ldr	r5, [pc, #328]	; (480 <setup+0x150>)
     336:	b087      	sub	sp, #28
     338:	4c52      	ldr	r4, [pc, #328]	; (484 <setup+0x154>)
				if (elapsed > 750) break;
     33a:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     33e:	4f52      	ldr	r7, [pc, #328]	; (488 <setup+0x158>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     340:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4b0 <setup+0x180>
		uint32_t millis_begin = systick_millis_count;
     344:	682e      	ldr	r6, [r5, #0]
		yield();
     346:	f008 ff19 	bl	917c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     34a:	7823      	ldrb	r3, [r4, #0]
     34c:	2b00      	cmp	r3, #0
     34e:	d074      	beq.n	43a <setup+0x10a>
     350:	783b      	ldrb	r3, [r7, #0]
     352:	07da      	lsls	r2, r3, #31
     354:	d571      	bpl.n	43a <setup+0x10a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     356:	682b      	ldr	r3, [r5, #0]
     358:	f8d9 2000 	ldr.w	r2, [r9]
     35c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     35e:	2b0e      	cmp	r3, #14
     360:	d96b      	bls.n	43a <setup+0x10a>
     362:	682b      	ldr	r3, [r5, #0]
  while(millis()<3000) if(Serial) { termon=1; break;}
     364:	f640 36b7 	movw	r6, #2999	; 0xbb7
     368:	42b3      	cmp	r3, r6
     36a:	d813      	bhi.n	394 <setup+0x64>
     36c:	4f46      	ldr	r7, [pc, #280]	; (488 <setup+0x158>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     36e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 4b0 <setup+0x180>
		yield();
     372:	f008 ff03 	bl	917c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     376:	7823      	ldrb	r3, [r4, #0]
     378:	2b00      	cmp	r3, #0
     37a:	d068      	beq.n	44e <setup+0x11e>
     37c:	783b      	ldrb	r3, [r7, #0]
     37e:	07db      	lsls	r3, r3, #31
     380:	d565      	bpl.n	44e <setup+0x11e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     382:	682b      	ldr	r3, [r5, #0]
     384:	f8d8 2000 	ldr.w	r2, [r8]
     388:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     38a:	2b0e      	cmp	r3, #14
     38c:	d95f      	bls.n	44e <setup+0x11e>
     38e:	4b3f      	ldr	r3, [pc, #252]	; (48c <setup+0x15c>)
     390:	2201      	movs	r2, #1
     392:	601a      	str	r2, [r3, #0]
    if(CrashReport) Serial.print(CrashReport);
     394:	483e      	ldr	r0, [pc, #248]	; (490 <setup+0x160>)
     396:	f013 feb7 	bl	14108 <___ZN16CrashReportClasscvbEv_veneer>
     39a:	2800      	cmp	r0, #0
     39c:	d15f      	bne.n	45e <setup+0x12e>
  rtc_setup();
     39e:	2113      	movs	r1, #19
     3a0:	2012      	movs	r0, #18
     3a2:	f001 faed 	bl	1980 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3a6:	2110      	movs	r1, #16
     3a8:	483a      	ldr	r0, [pc, #232]	; (494 <setup+0x164>)
     3aa:	f008 fe69 	bl	9080 <usb_serial_write>
     3ae:	483a      	ldr	r0, [pc, #232]	; (498 <setup+0x168>)
     3b0:	f006 ffc4 	bl	733c <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     3b4:	a804      	add	r0, sp, #16
     3b6:	f001 fae5 	bl	1984 <rtc_get_datetime(datetime_t*)>
     3ba:	2800      	cmp	r0, #0
     3bc:	d057      	beq.n	46e <setup+0x13e>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     3be:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     3c2:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     3c6:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     3ca:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     3ce:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     3d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
     3d6:	e9cd 0400 	strd	r0, r4, [sp]
     3da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     3de:	492f      	ldr	r1, [pc, #188]	; (49c <setup+0x16c>)
     3e0:	482d      	ldr	r0, [pc, #180]	; (498 <setup+0x168>)
     3e2:	f006 ffc7 	bl	7374 <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     3e6:	482c      	ldr	r0, [pc, #176]	; (498 <setup+0x168>)
     3e8:	f006 ffa8 	bl	733c <Print::println()>
     3ec:	210b      	movs	r1, #11
     3ee:	482c      	ldr	r0, [pc, #176]	; (4a0 <setup+0x170>)
     3f0:	f008 fe46 	bl	9080 <usb_serial_write>
     3f4:	4828      	ldr	r0, [pc, #160]	; (498 <setup+0x168>)
     3f6:	f006 ffa1 	bl	733c <Print::println()>
  ready=1;
     3fa:	4c2a      	ldr	r4, [pc, #168]	; (4a4 <setup+0x174>)
  filing_init();
     3fc:	f000 fc3a 	bl	c74 <filing_init()>
     400:	210a      	movs	r1, #10
     402:	4829      	ldr	r0, [pc, #164]	; (4a8 <setup+0x178>)
     404:	f008 fe3c 	bl	9080 <usb_serial_write>
     408:	4823      	ldr	r0, [pc, #140]	; (498 <setup+0x168>)
     40a:	f006 ff97 	bl	733c <Print::println()>
  ready=1;
     40e:	2301      	movs	r3, #1
     410:	6023      	str	r3, [r4, #0]
    setup1();
     412:	f7ff ff6f 	bl	2f4 <setup1()>
  while(ready) {Serial.print('-'); delay(100);} // wait for setup1() to finish
     416:	6823      	ldr	r3, [r4, #0]
     418:	b143      	cbz	r3, 42c <setup+0xfc>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     41a:	202d      	movs	r0, #45	; 0x2d
     41c:	f008 fe1a 	bl	9054 <usb_serial_putchar>
     420:	2064      	movs	r0, #100	; 0x64
     422:	f007 fa3b 	bl	789c <delay>
     426:	6823      	ldr	r3, [r4, #0]
     428:	2b00      	cmp	r3, #0
     42a:	d1f6      	bne.n	41a <setup+0xea>
  pinMode(LED_BUILTIN,OUTPUT);
     42c:	2101      	movs	r1, #1
     42e:	200d      	movs	r0, #13
     430:	f007 fadc 	bl	79ec <pinMode>
}
     434:	b007      	add	sp, #28
     436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     43a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     43c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     43e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     440:	b192      	cbz	r2, 468 <setup+0x138>
				if (elapsed > 2000) break;
     442:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     446:	d88c      	bhi.n	362 <setup+0x32>
			yield();
     448:	f008 fe98 	bl	917c <yield>
     44c:	e77b      	b.n	346 <setup+0x16>
     44e:	682b      	ldr	r3, [r5, #0]
  while(millis()<3000) if(Serial) { termon=1; break;}
     450:	42b3      	cmp	r3, r6
     452:	d98e      	bls.n	372 <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     454:	480e      	ldr	r0, [pc, #56]	; (490 <setup+0x160>)
     456:	f013 fe57 	bl	14108 <___ZN16CrashReportClasscvbEv_veneer>
     45a:	2800      	cmp	r0, #0
     45c:	d09f      	beq.n	39e <setup+0x6e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     45e:	490e      	ldr	r1, [pc, #56]	; (498 <setup+0x168>)
     460:	480b      	ldr	r0, [pc, #44]	; (490 <setup+0x160>)
     462:	f013 fe55 	bl	14110 <___ZNK16CrashReportClass7printToER5Print_veneer>
     466:	e79a      	b.n	39e <setup+0x6e>
				if (elapsed > 750) break;
     468:	4543      	cmp	r3, r8
     46a:	d9ed      	bls.n	448 <setup+0x118>
     46c:	e779      	b.n	362 <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     46e:	2114      	movs	r1, #20
     470:	480e      	ldr	r0, [pc, #56]	; (4ac <setup+0x17c>)
     472:	f008 fe05 	bl	9080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     476:	4808      	ldr	r0, [pc, #32]	; (498 <setup+0x168>)
     478:	f006 ff60 	bl	733c <Print::println()>
     47c:	e79f      	b.n	3be <setup+0x8e>
     47e:	bf00      	nop
     480:	20027494 	.word	0x20027494
     484:	200274ea 	.word	0x200274ea
     488:	200274e9 	.word	0x200274e9
     48c:	200274a8 	.word	0x200274a8
     490:	200086c0 	.word	0x200086c0
     494:	20007ba8 	.word	0x20007ba8
     498:	200086cc 	.word	0x200086cc
     49c:	20007bd4 	.word	0x20007bd4
     4a0:	20007bfc 	.word	0x20007bfc
     4a4:	20026f58 	.word	0x20026f58
     4a8:	20007c08 	.word	0x20007c08
     4ac:	20007bbc 	.word	0x20007bbc
     4b0:	200274b4 	.word	0x200274b4

000004b4 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     4b4:	4b24      	ldr	r3, [pc, #144]	; (548 <acq_isr()+0x94>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     4b6:	4a25      	ldr	r2, [pc, #148]	; (54c <acq_isr()+0x98>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     4b8:	4925      	ldr	r1, [pc, #148]	; (550 <acq_isr()+0x9c>)
  {
     4ba:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     4bc:	681c      	ldr	r4, [r3, #0]
     4be:	7918      	ldrb	r0, [r3, #4]
     4c0:	6923      	ldr	r3, [r4, #16]
     4c2:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     4c4:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     4c6:	bf28      	it	cs
     4c8:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     4cc:	4610      	mov	r0, r2
	asm("dsb");
     4ce:	f3bf 8f4f 	dsb	sy
     4d2:	f102 0320 	add.w	r3, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
     4d6:	f502 6180 	add.w	r1, r2, #1024	; 0x400
		SCB_CACHE_DCIMVAC = location;
     4da:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
     4de:	428b      	cmp	r3, r1
     4e0:	bf8c      	ite	hi
     4e2:	2101      	movhi	r1, #1
     4e4:	2120      	movls	r1, #32
     4e6:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
     4ea:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
     4ec:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
     4f0:	461a      	mov	r2, r3
	} while (location < end_addr);
     4f2:	f103 0320 	add.w	r3, r3, #32
     4f6:	d1f8      	bne.n	4ea <acq_isr()+0x36>
	asm("dsb");
     4f8:	f3bf 8f4f 	dsb	sy
	asm("isb");
     4fc:	f3bf 8f6f 	isb	sy

//int32_t bias=0;

/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     500:	4c14      	ldr	r4, [pc, #80]	; (554 <acq_isr()+0xa0>)

  // extract data
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH]>>SHIFT;   
     502:	2300      	movs	r3, #0
     504:	4a14      	ldr	r2, [pc, #80]	; (558 <acq_isr()+0xa4>)
{ procCount++;
     506:	6821      	ldr	r1, [r4, #0]
     508:	3101      	adds	r1, #1
     50a:	6021      	str	r1, [r4, #0]
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH]>>SHIFT;   
     50c:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
     510:	3301      	adds	r3, #1
     512:	2b80      	cmp	r3, #128	; 0x80
     514:	f842 1f04 	str.w	r1, [r2, #4]!
     518:	d1f8      	bne.n	50c <acq_isr()+0x58>
  if(proc==0)
     51a:	4b10      	ldr	r3, [pc, #64]	; (55c <acq_isr()+0xa8>)
     51c:	f9b3 3000 	ldrsh.w	r3, [r3]
     520:	b113      	cbz	r3, 528 <acq_isr()+0x74>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     522:	2b01      	cmp	r3, #1
     524:	d00a      	beq.n	53c <acq_isr()+0x88>
  }
     526:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     528:	480d      	ldr	r0, [pc, #52]	; (560 <acq_isr()+0xac>)
     52a:	f001 f87b 	bl	1624 <pushData(unsigned long*)>
     52e:	2800      	cmp	r0, #0
     530:	d1f9      	bne.n	526 <acq_isr()+0x72>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     532:	4a0c      	ldr	r2, [pc, #48]	; (564 <acq_isr()+0xb0>)
     534:	6813      	ldr	r3, [r2, #0]
     536:	3301      	adds	r3, #1
     538:	6013      	str	r3, [r2, #0]
  }
     53a:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     53c:	4808      	ldr	r0, [pc, #32]	; (560 <acq_isr()+0xac>)
     53e:	f000 f95b 	bl	7f8 <compress(void*)>
     542:	2800      	cmp	r0, #0
     544:	d1ef      	bne.n	526 <acq_isr()+0x72>
     546:	e7f4      	b.n	532 <acq_isr()+0x7e>
     548:	20025f9c 	.word	0x20025f9c
     54c:	20200400 	.word	0x20200400
     550:	400e8000 	.word	0x400e8000
     554:	20026ef0 	.word	0x20026ef0
     558:	20026c28 	.word	0x20026c28
     55c:	200274c8 	.word	0x200274c8
     560:	20026c2c 	.word	0x20026c2c
     564:	20026ef4 	.word	0x20026ef4

00000568 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     568:	b510      	push	{r4, lr}
     56a:	4604      	mov	r4, r0
		release();
     56c:	f006 fe48 	bl	7200 <DMAChannel::release()>
	}
     570:	4620      	mov	r0, r4
     572:	bd10      	pop	{r4, pc}
     574:	0000      	movs	r0, r0
	...

00000578 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     578:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     57c:	4938      	ldr	r1, [pc, #224]	; (660 <setAudioFrequency(int)+0xe8>)
     57e:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     580:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     584:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     588:	4b36      	ldr	r3, [pc, #216]	; (664 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     58a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 648 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     58e:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     592:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     596:	1c4a      	adds	r2, r1, #1
     598:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     59c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     5a0:	ee27 7b03 	vmul.f64	d7, d7, d3
     5a4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 650 <setAudioFrequency(int)+0xd8>
  {
     5a8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5aa:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     5ae:	f242 7410 	movw	r4, #10000	; 0x2710
     5b2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 658 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     5b6:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     5ba:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     5be:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     5c2:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     5c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     5ca:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     5ce:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     5d2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     5d6:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     5d8:	ee96 7b05 	vfnms.f64	d7, d6, d5
     5dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     5e0:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     5e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     5e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     5ec:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     5f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     5f6:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     5f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     5fa:	2a00      	cmp	r2, #0
     5fc:	dafc      	bge.n	5f8 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     5fe:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     602:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     606:	4a18      	ldr	r2, [pc, #96]	; (668 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     608:	4818      	ldr	r0, [pc, #96]	; (66c <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     60a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     60c:	4c18      	ldr	r4, [pc, #96]	; (670 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     60e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     614:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     618:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     61a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     61c:	4b15      	ldr	r3, [pc, #84]	; (674 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     61e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     626:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     628:	6a82      	ldr	r2, [r0, #40]	; 0x28
     62a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     62c:	4a12      	ldr	r2, [pc, #72]	; (678 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     62e:	430b      	orrs	r3, r1
     630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     634:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     636:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     638:	401a      	ands	r2, r3
     63a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     63e:	6062      	str	r2, [r4, #4]
  }
     640:	f85d 4b04 	ldr.w	r4, [sp], #4
     644:	4770      	bx	lr
     646:	bf00      	nop
     648:	00000000 	.word	0x00000000
     64c:	40700000 	.word	0x40700000
     650:	00000000 	.word	0x00000000
     654:	4176e360 	.word	0x4176e360
     658:	00000000 	.word	0x00000000
     65c:	40c38800 	.word	0x40c38800
     660:	269fb200 	.word	0x269fb200
     664:	400d8000 	.word	0x400d8000
     668:	ff7f7fff 	.word	0xff7f7fff
     66c:	400fc000 	.word	0x400fc000
     670:	400ac000 	.word	0x400ac000
     674:	fffffe00 	.word	0xfffffe00
     678:	fff7fff8 	.word	0xfff7fff8

0000067c <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     67c:	4a19      	ldr	r2, [pc, #100]	; (6e4 <i2s_setup()+0x68>)
     67e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     680:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     682:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     686:	4c18      	ldr	r4, [pc, #96]	; (6e8 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     688:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     68a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     68e:	2b00      	cmp	r3, #0
     690:	db27      	blt.n	6e2 <i2s_setup()+0x66>
    int fs = fsamp;
     692:	4b16      	ldr	r3, [pc, #88]	; (6ec <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     694:	6818      	ldr	r0, [r3, #0]
     696:	f7ff ff6f 	bl	578 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     69a:	4b15      	ldr	r3, [pc, #84]	; (6f0 <i2s_setup()+0x74>)
     69c:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     69e:	4915      	ldr	r1, [pc, #84]	; (6f4 <i2s_setup()+0x78>)
     6a0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     6a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     6a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     6aa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     6ae:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     6b2:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     6b4:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     6b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     6bc:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6be:	480e      	ldr	r0, [pc, #56]	; (6f8 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     6c0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     6c4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     6c8:	490c      	ldr	r1, [pc, #48]	; (6fc <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     6ca:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     6ce:	4a0c      	ldr	r2, [pc, #48]	; (700 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     6d0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     6d4:	4b0b      	ldr	r3, [pc, #44]	; (704 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     6d6:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     6da:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     6de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     6e2:	bd10      	pop	{r4, pc}
     6e4:	400fc000 	.word	0x400fc000
     6e8:	40384000 	.word	0x40384000
     6ec:	20008c90 	.word	0x20008c90
     6f0:	401f8000 	.word	0x401f8000
     6f4:	401f8400 	.word	0x401f8400
     6f8:	07000001 	.word	0x07000001
     6fc:	00011f1b 	.word	0x00011f1b
     700:	1f1f1f00 	.word	0x1f1f1f00
     704:	92000001 	.word	0x92000001

00000708 <dma_setup()>:
  {
     708:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     70a:	4c1c      	ldr	r4, [pc, #112]	; (77c <dma_setup()+0x74>)
     70c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     70e:	4d1c      	ldr	r5, [pc, #112]	; (780 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     710:	4620      	mov	r0, r4
     712:	f006 fd1b 	bl	714c <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     716:	6823      	ldr	r3, [r4, #0]
     718:	481a      	ldr	r0, [pc, #104]	; (784 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     71a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     71e:	491a      	ldr	r1, [pc, #104]	; (788 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     720:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     722:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     724:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     726:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     728:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     72a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     72c:	4d17      	ldr	r5, [pc, #92]	; (78c <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     72e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     730:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     732:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     734:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     736:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     738:	2204      	movs	r2, #4
     73a:	4915      	ldr	r1, [pc, #84]	; (790 <dma_setup()+0x88>)
     73c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     73e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     740:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     742:	4d14      	ldr	r5, [pc, #80]	; (794 <dma_setup()+0x8c>)
     744:	60da      	str	r2, [r3, #12]
		*mux = 0;
     746:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     74a:	4b13      	ldr	r3, [pc, #76]	; (798 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     74c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     750:	2101      	movs	r1, #1
     752:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     754:	4811      	ldr	r0, [pc, #68]	; (79c <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     756:	f002 051f 	and.w	r5, r2, #31
     75a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     75e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     762:	40a9      	lsls	r1, r5
     764:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     766:	4d0e      	ldr	r5, [pc, #56]	; (7a0 <dma_setup()+0x98>)
     768:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     76c:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     76e:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     770:	490c      	ldr	r1, [pc, #48]	; (7a4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     772:	4b0d      	ldr	r3, [pc, #52]	; (7a8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     774:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     776:	7922      	ldrb	r2, [r4, #4]
     778:	76da      	strb	r2, [r3, #27]
  }
     77a:	bd38      	pop	{r3, r4, r5, pc}
     77c:	20025f9c 	.word	0x20025f9c
     780:	02020000 	.word	0x02020000
     784:	403840a0 	.word	0x403840a0
     788:	20200000 	.word	0x20200000
     78c:	fffff800 	.word	0xfffff800
     790:	400ec000 	.word	0x400ec000
     794:	80000013 	.word	0x80000013
     798:	38003840 	.word	0x38003840
     79c:	20009000 	.word	0x20009000
     7a0:	000004b5 	.word	0x000004b5
     7a4:	e000e400 	.word	0xe000e400
     7a8:	400e8000 	.word	0x400e8000

000007ac <acqModifyFrequency(unsigned long)>:
  {
     7ac:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     7ae:	4c08      	ldr	r4, [pc, #32]	; (7d0 <acqModifyFrequency(unsigned long)+0x24>)
     7b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     7b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     7bc:	f7ff fedc 	bl	578 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     7c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7c4:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     7c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     7cc:	bd10      	pop	{r4, pc}
     7ce:	bf00      	nop
     7d0:	40384000 	.word	0x40384000

000007d4 <_GLOBAL__sub_I_procCount>:
		begin();
     7d4:	4805      	ldr	r0, [pc, #20]	; (7ec <_GLOBAL__sub_I_procCount+0x18>)
     7d6:	2100      	movs	r1, #0
  }
}
     7d8:	b508      	push	{r3, lr}
     7da:	f006 fcb7 	bl	714c <DMAChannel::begin(bool)>
  static DMAChannel dma;
     7de:	4a04      	ldr	r2, [pc, #16]	; (7f0 <_GLOBAL__sub_I_procCount+0x1c>)
     7e0:	4904      	ldr	r1, [pc, #16]	; (7f4 <_GLOBAL__sub_I_procCount+0x20>)
     7e2:	4802      	ldr	r0, [pc, #8]	; (7ec <_GLOBAL__sub_I_procCount+0x18>)
}
     7e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     7e8:	f008 be54 	b.w	9494 <__aeabi_atexit>
     7ec:	20025f9c 	.word	0x20025f9c
     7f0:	200086ec 	.word	0x200086ec
     7f4:	00000569 	.word	0x00000569

000007f8 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7fc:	b083      	sub	sp, #12
     7fe:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     800:	f007 fa02 	bl	7c08 <rtc_get>
     804:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     806:	f007 f89d 	bl	7944 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     80a:	49a1      	ldr	r1, [pc, #644]	; (a90 <compress(void*)+0x298>)
     80c:	6822      	ldr	r2, [r4, #0]
     80e:	4623      	mov	r3, r4
     810:	680d      	ldr	r5, [r1, #0]
     812:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     816:	499f      	ldr	r1, [pc, #636]	; (a94 <compress(void*)+0x29c>)
  t1 = micros();
     818:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     81a:	602a      	str	r2, [r5, #0]
     81c:	462c      	mov	r4, r5
     81e:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     820:	4629      	mov	r1, r5
     822:	4618      	mov	r0, r3
     824:	3304      	adds	r3, #4
     826:	e9d0 0200 	ldrd	r0, r2, [r0]
     82a:	42b3      	cmp	r3, r6
     82c:	eba2 0200 	sub.w	r2, r2, r0
     830:	f844 2f04 	str.w	r2, [r4, #4]!
     834:	d1f5      	bne.n	822 <compress(void*)+0x2a>
     836:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     83a:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     83c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     840:	2b00      	cmp	r3, #0
     842:	bfb8      	it	lt
     844:	425b      	neglt	r3, r3
     846:	429a      	cmp	r2, r3
     848:	bfb8      	it	lt
     84a:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     84c:	4281      	cmp	r1, r0
     84e:	d1f5      	bne.n	83c <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     850:	2702      	movs	r7, #2
     852:	2101      	movs	r1, #1
     854:	e003      	b.n	85e <compress(void*)+0x66>
     856:	3701      	adds	r7, #1
     858:	2f18      	cmp	r7, #24
     85a:	f000 8110 	beq.w	a7e <compress(void*)+0x286>
     85e:	1e7c      	subs	r4, r7, #1
     860:	fa01 f304 	lsl.w	r3, r1, r4
     864:	4293      	cmp	r3, r2
     866:	ddf6      	ble.n	856 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     868:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     86c:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     86e:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     872:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     874:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     876:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     87a:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     87e:	4986      	ldr	r1, [pc, #536]	; (a98 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     880:	4d86      	ldr	r5, [pc, #536]	; (a9c <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     882:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     886:	3201      	adds	r2, #1
     888:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     88c:	682a      	ldr	r2, [r5, #0]
     88e:	4c84      	ldr	r4, [pc, #528]	; (aa0 <compress(void*)+0x2a8>)
     890:	42ba      	cmp	r2, r7
     892:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     896:	46a3      	mov	fp, r4
     898:	4622      	mov	r2, r4
     89a:	bf38      	it	cc
     89c:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     89e:	f852 1f04 	ldr.w	r1, [r2, #4]!
     8a2:	4001      	ands	r1, r0
     8a4:	4296      	cmp	r6, r2
     8a6:	6011      	str	r1, [r2, #0]
     8a8:	d1f9      	bne.n	89e <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8aa:	4d7e      	ldr	r5, [pc, #504]	; (aa4 <compress(void*)+0x2ac>)
     8ac:	f44f 7200 	mov.w	r2, #512	; 0x200
     8b0:	2100      	movs	r1, #0
     8b2:	9300      	str	r3, [sp, #0]
     8b4:	4628      	mov	r0, r5
     8b6:	f00a fea9 	bl	b60c <memset>
  *iptr++ = nb | shift<<16;
     8ba:	4a7b      	ldr	r2, [pc, #492]	; (aa8 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     8bc:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8be:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     8c0:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     8c4:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8c8:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     8ca:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     8cc:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     8d0:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8d2:	f8db 2000 	ldr.w	r2, [fp]
     8d6:	f8cb 1000 	str.w	r1, [fp]
     8da:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     8dc:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     8e0:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     8e2:	2201      	movs	r2, #1
  *iptr++ = t1;
     8e4:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     8e8:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     8ea:	e00a      	b.n	902 <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     8ec:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     8f0:	4694      	mov	ip, r2
     8f2:	ea41 010e 	orr.w	r1, r1, lr
     8f6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     8fa:	42a6      	cmp	r6, r4
     8fc:	d018      	beq.n	930 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     8fe:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     902:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     906:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     908:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     90c:	dcee      	bgt.n	8ec <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     90e:	eba7 0e0c 	sub.w	lr, r7, ip
     912:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     916:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     91a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     91e:	d12f      	bne.n	980 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     920:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     922:	42a6      	cmp	r6, r4
          nx=MBIT;
     924:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     928:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     92c:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     92e:	d1e6      	bne.n	8fe <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     930:	4e5e      	ldr	r6, [pc, #376]	; (aac <compress(void*)+0x2b4>)
     932:	6834      	ldr	r4, [r6, #0]
     934:	eb04 0208 	add.w	r2, r4, r8
     938:	2a80      	cmp	r2, #128	; 0x80
     93a:	dc2d      	bgt.n	998 <compress(void*)+0x1a0>
     93c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     940:	4a5b      	ldr	r2, [pc, #364]	; (ab0 <compress(void*)+0x2b8>)
     942:	4858      	ldr	r0, [pc, #352]	; (aa4 <compress(void*)+0x2ac>)
     944:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     948:	4423      	add	r3, r4
     94a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     94e:	2300      	movs	r3, #0
     950:	e001      	b.n	956 <compress(void*)+0x15e>
     952:	f850 1f04 	ldr.w	r1, [r0, #4]!
     956:	3301      	adds	r3, #1
     958:	f842 1f04 	str.w	r1, [r2, #4]!
     95c:	4543      	cmp	r3, r8
     95e:	dbf8      	blt.n	952 <compress(void*)+0x15a>
     960:	f1b8 0f00 	cmp.w	r8, #0
     964:	f108 33ff 	add.w	r3, r8, #4294967295
     968:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     96c:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     970:	bfd8      	it	le
     972:	2300      	movle	r3, #0
     974:	4423      	add	r3, r4
     976:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     978:	4638      	mov	r0, r7
     97a:	b003      	add	sp, #12
     97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     980:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     984:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     988:	ea4e 0202 	orr.w	r2, lr, r2
     98c:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     990:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     992:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     996:	e7b0      	b.n	8fa <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     998:	2c7a      	cmp	r4, #122	; 0x7a
     99a:	dd22      	ble.n	9e2 <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     99c:	2c7f      	cmp	r4, #127	; 0x7f
     99e:	dc0a      	bgt.n	9b6 <compress(void*)+0x1be>
     9a0:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     9a4:	4842      	ldr	r0, [pc, #264]	; (ab0 <compress(void*)+0x2b8>)
     9a6:	2100      	movs	r1, #0
     9a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9ac:	0092      	lsls	r2, r2, #2
     9ae:	f00a fe2d 	bl	b60c <memset>
     9b2:	2380      	movs	r3, #128	; 0x80
     9b4:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     9b6:	483e      	ldr	r0, [pc, #248]	; (ab0 <compress(void*)+0x2b8>)
     9b8:	f000 fe34 	bl	1624 <pushData(unsigned long*)>
     9bc:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9be:	ea4f 0288 	mov.w	r2, r8, lsl #2
     9c2:	4938      	ldr	r1, [pc, #224]	; (aa4 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     9c4:	bf18      	it	ne
     9c6:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9c8:	f1b8 0f00 	cmp.w	r8, #0
     9cc:	4838      	ldr	r0, [pc, #224]	; (ab0 <compress(void*)+0x2b8>)
     9ce:	bfd8      	it	le
     9d0:	2204      	movle	r2, #4
     9d2:	f007 f84b 	bl	7a6c <memcpy>
}
     9d6:	4638      	mov	r0, r7
     9d8:	f8c6 8000 	str.w	r8, [r6]
     9dc:	b003      	add	sp, #12
     9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     9e2:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     9e6:	4832      	ldr	r0, [pc, #200]	; (ab0 <compress(void*)+0x2b8>)
     9e8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     9ec:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     9f0:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     9f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     9f6:	4d2b      	ldr	r5, [pc, #172]	; (aa4 <compress(void*)+0x2ac>)
     9f8:	4423      	add	r3, r4
     9fa:	4629      	mov	r1, r5
     9fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     a00:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     a04:	e001      	b.n	a0a <compress(void*)+0x212>
     a06:	f851 2f04 	ldr.w	r2, [r1, #4]!
     a0a:	f843 2f04 	str.w	r2, [r3, #4]!
     a0e:	4298      	cmp	r0, r3
     a10:	d1f9      	bne.n	a06 <compress(void*)+0x20e>
     a12:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     a14:	4826      	ldr	r0, [pc, #152]	; (ab0 <compress(void*)+0x2b8>)
     a16:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     a1a:	6033      	str	r3, [r6, #0]
     a1c:	f000 fe02 	bl	1624 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a20:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     a22:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     a24:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a26:	4a23      	ldr	r2, [pc, #140]	; (ab4 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     a28:	bf18      	it	ne
     a2a:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     a2c:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a30:	f8df e070 	ldr.w	lr, [pc, #112]	; aa4 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a34:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a36:	f8df c078 	ldr.w	ip, [pc, #120]	; ab0 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     a3a:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a3c:	ea42 0203 	orr.w	r2, r2, r3
     a40:	f04f 0306 	mov.w	r3, #6
     a44:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a46:	6033      	str	r3, [r6, #0]
     a48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     a50:	e89e 0003 	ldmia.w	lr, {r0, r1}
     a54:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     a58:	da8e      	bge.n	978 <compress(void*)+0x180>
     a5a:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     a5e:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     a62:	f10c 0008 	add.w	r0, ip, #8
     a66:	4442      	add	r2, r8
     a68:	0092      	lsls	r2, r2, #2
     a6a:	f006 ffff 	bl	7a6c <memcpy>
     a6e:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     a72:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     a74:	4443      	add	r3, r8
     a76:	6033      	str	r3, [r6, #0]
}
     a78:	b003      	add	sp, #12
     a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a7e:	2267      	movs	r2, #103	; 0x67
     a80:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     a84:	f04f 0868 	mov.w	r8, #104	; 0x68
     a88:	2361      	movs	r3, #97	; 0x61
     a8a:	2417      	movs	r4, #23
     a8c:	9201      	str	r2, [sp, #4]
     a8e:	e6f6      	b.n	87e <compress(void*)+0x86>
     a90:	20008c9c 	.word	0x20008c9c
     a94:	200274a4 	.word	0x200274a4
     a98:	20026ef8 	.word	0x20026ef8
     a9c:	20026ecc 	.word	0x20026ecc
     aa0:	2002666c 	.word	0x2002666c
     aa4:	2002621c 	.word	0x2002621c
     aa8:	200274ce 	.word	0x200274ce
     aac:	200268c0 	.word	0x200268c0
     ab0:	20025fa4 	.word	0x20025fa4
     ab4:	ffff0000 	.word	0xffff0000

00000ab8 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     ab8:	2000      	movs	r0, #0
     aba:	4770      	bx	lr

00000abc <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     abc:	4770      	bx	lr
     abe:	bf00      	nop

00000ac0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     ac0:	b570      	push	{r4, r5, r6, lr}
     ac2:	b082      	sub	sp, #8
     ac4:	4606      	mov	r6, r0
     ac6:	4614      	mov	r4, r2
     ac8:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
     aca:	4668      	mov	r0, sp
     acc:	f000 ff5a 	bl	1984 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     ad0:	f89d 2002 	ldrb.w	r2, [sp, #2]
     ad4:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     ad8:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
     adc:	2a0c      	cmp	r2, #12
     ade:	bf98      	it	ls
     ae0:	f1bc 0f1f 	cmpls.w	ip, #31
     ae4:	d804      	bhi.n	af0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
     ae6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
     aea:	b29b      	uxth	r3, r3
     aec:	2b7f      	cmp	r3, #127	; 0x7f
     aee:	d920      	bls.n	b32 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
     af0:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     af4:	f89d 2005 	ldrb.w	r2, [sp, #5]
     af8:	f89d 3006 	ldrb.w	r3, [sp, #6]
     afc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     b00:	2a17      	cmp	r2, #23
     b02:	bf98      	it	ls
     b04:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
     b06:	f8a6 c000 	strh.w	ip, [r6]
     b0a:	d801      	bhi.n	b10 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
     b0c:	293b      	cmp	r1, #59	; 0x3b
     b0e:	d905      	bls.n	b1c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
     b10:	2300      	movs	r3, #0
    *ms10 = 0;
     b12:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
     b14:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b16:	7022      	strb	r2, [r4, #0]
}
     b18:	b002      	add	sp, #8
     b1a:	bd70      	pop	{r4, r5, r6, pc}
     b1c:	015b      	lsls	r3, r3, #5
     b1e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
     b22:	2200      	movs	r2, #0
     b24:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
     b28:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
     b2a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
     b2c:	7022      	strb	r2, [r4, #0]
}
     b2e:	b002      	add	sp, #8
     b30:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
     b32:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
     b36:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
     b3a:	fa1f fc8c 	uxth.w	ip, ip
     b3e:	e7d9      	b.n	af4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00000b40 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b40:	4b04      	ldr	r3, [pc, #16]	; (b54 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b42:	b510      	push	{r4, lr}
     b44:	4604      	mov	r4, r0
     b46:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     b4a:	f003 ffdb 	bl	4b04 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b4e:	4620      	mov	r0, r4
     b50:	bd10      	pop	{r4, pc}
     b52:	bf00      	nop
     b54:	2000082c 	.word	0x2000082c

00000b58 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     b58:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     b5a:	b500      	push	{lr}
     b5c:	b083      	sub	sp, #12
     b5e:	b163      	cbz	r3, b7a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     b60:	2201      	movs	r2, #1
     b62:	f10d 0107 	add.w	r1, sp, #7
     b66:	4618      	mov	r0, r3
     b68:	f002 fe6a 	bl	3840 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     b6c:	2801      	cmp	r0, #1
     b6e:	d10c      	bne.n	b8a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b70:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     b74:	b003      	add	sp, #12
     b76:	f85d fb04 	ldr.w	pc, [sp], #4
     b7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     b7c:	b128      	cbz	r0, b8a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b7e:	2201      	movs	r2, #1
     b80:	f10d 0107 	add.w	r1, sp, #7
     b84:	f001 f97c 	bl	1e80 <ExFatFile::read(void*, unsigned int)>
     b88:	e7f0      	b.n	b6c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     b8a:	f04f 30ff 	mov.w	r0, #4294967295
     b8e:	e7f1      	b.n	b74 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000b90 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     b90:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b92:	b113      	cbz	r3, b9a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     b94:	4618      	mov	r0, r3
     b96:	f002 bf27 	b.w	39e8 <FatFile::peek()>
     b9a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     b9c:	b108      	cbz	r0, ba2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     b9e:	f001 ba3f 	b.w	2020 <ExFatFile::peek()>
  }
     ba2:	f04f 30ff 	mov.w	r0, #4294967295
     ba6:	4770      	bx	lr

00000ba8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     ba8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     baa:	b153      	cbz	r3, bc2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     bac:	7818      	ldrb	r0, [r3, #0]
     bae:	f010 0008 	ands.w	r0, r0, #8
     bb2:	d00d      	beq.n	bd0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     bb4:	69d8      	ldr	r0, [r3, #28]
     bb6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     bb8:	1ac0      	subs	r0, r0, r3
     bba:	bf48      	it	mi
     bbc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     bc0:	4770      	bx	lr
     bc2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     bc4:	b1a3      	cbz	r3, bf0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     bc6:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     bca:	f010 0008 	ands.w	r0, r0, #8
     bce:	d100      	bne.n	bd2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     bd0:	4770      	bx	lr
     bd2:	6918      	ldr	r0, [r3, #16]
     bd4:	6819      	ldr	r1, [r3, #0]
     bd6:	695a      	ldr	r2, [r3, #20]
     bd8:	1a40      	subs	r0, r0, r1
     bda:	685b      	ldr	r3, [r3, #4]
     bdc:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     be0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     be4:	f173 0300 	sbcs.w	r3, r3, #0
     be8:	d3f2      	bcc.n	bd0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     bea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     bee:	4770      	bx	lr
     bf0:	4618      	mov	r0, r3
    return BaseFile::available();
     bf2:	e7ed      	b.n	bd0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000bf4 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     bf4:	6c83      	ldr	r3, [r0, #72]	; 0x48
     bf6:	b113      	cbz	r3, bfe <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     bf8:	4618      	mov	r0, r3
     bfa:	f002 bff5 	b.w	3be8 <FatFile::sync()>
     bfe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     c00:	b108      	cbz	r0, c06 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     c02:	f001 bdcf 	b.w	27a4 <ExFatFile::sync()>
  }
     c06:	4770      	bx	lr

00000c08 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     c08:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c0a:	b113      	cbz	r3, c12 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     c0c:	4618      	mov	r0, r3
     c0e:	f002 bff1 	b.w	3bf4 <FatFile::write(void const*, unsigned int)>
     c12:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     c14:	b108      	cbz	r0, c1a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     c16:	f001 bf5b 	b.w	2ad0 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     c1a:	4770      	bx	lr

00000c1c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     c1c:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     c1e:	6c83      	ldr	r3, [r0, #72]	; 0x48
     c20:	b083      	sub	sp, #12
     c22:	f88d 1007 	strb.w	r1, [sp, #7]
     c26:	b143      	cbz	r3, c3a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     c28:	2201      	movs	r2, #1
     c2a:	f10d 0107 	add.w	r1, sp, #7
     c2e:	4618      	mov	r0, r3
     c30:	f002 ffe0 	bl	3bf4 <FatFile::write(void const*, unsigned int)>
  }
     c34:	b003      	add	sp, #12
     c36:	f85d fb04 	ldr.w	pc, [sp], #4
     c3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     c3c:	2800      	cmp	r0, #0
     c3e:	d0f9      	beq.n	c34 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     c40:	2201      	movs	r2, #1
     c42:	f10d 0107 	add.w	r1, sp, #7
     c46:	f001 ff43 	bl	2ad0 <ExFatFile::write(void const*, unsigned int)>
     c4a:	b003      	add	sp, #12
     c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c50 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     c50:	b538      	push	{r3, r4, r5, lr}
     c52:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c54:	b149      	cbz	r1, c6a <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     c56:	4608      	mov	r0, r1
     c58:	460d      	mov	r5, r1
     c5a:	f00b f871 	bl	bd40 <strlen>
     c5e:	6823      	ldr	r3, [r4, #0]
     c60:	4602      	mov	r2, r0
     c62:	4629      	mov	r1, r5
     c64:	685b      	ldr	r3, [r3, #4]
     c66:	4620      	mov	r0, r4
     c68:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     c6a:	4620      	mov	r0, r4
     c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     c70:	f006 bb64 	b.w	733c <Print::println()>

00000c74 <filing_init()>:
    SPI.transfer16(0xFF);  // Insure MISO goes to low Z.
    
    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     c74:	4b2a      	ldr	r3, [pc, #168]	; (d20 <filing_init()+0xac>)
     c76:	4a2b      	ldr	r2, [pc, #172]	; (d24 <filing_init()+0xb0>)
     c78:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
     c7c:	492a      	ldr	r1, [pc, #168]	; (d28 <filing_init()+0xb4>)
     c7e:	482b      	ldr	r0, [pc, #172]	; (d2c <filing_init()+0xb8>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     c80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
     c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c88:	4c29      	ldr	r4, [pc, #164]	; (d30 <filing_init()+0xbc>)
  FsDateTime::callback = dateTime;
     c8a:	2505      	movs	r5, #5
     c8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d48 <filing_init()+0xd4>
     c90:	f504 6692 	add.w	r6, r4, #1168	; 0x490
     c94:	4f27      	ldr	r7, [pc, #156]	; (d34 <filing_init()+0xc0>)
     c96:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     c98:	6013      	str	r3, [r2, #0]
     c9a:	2109      	movs	r1, #9
     c9c:	4640      	mov	r0, r8
     c9e:	f008 f9ef 	bl	9080 <usb_serial_write>
     ca2:	4638      	mov	r0, r7
     ca4:	f006 fb4a 	bl	733c <Print::println()>
    sdioConfigBackup = sdioConfig;
     ca8:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     caa:	22ff      	movs	r2, #255	; 0xff
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     cac:	4630      	mov	r0, r6
     cae:	4619      	mov	r1, r3
    sdioConfigBackup = sdioConfig;
     cb0:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
    spiConfigBackupPin = 255;
     cb4:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
     cb8:	f005 fc04 	bl	64c4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     cbc:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     cbe:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     cc2:	f004 fe61 	bl	5988 <SdioCard::errorCode() const>
     cc6:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cc8:	2301      	movs	r3, #1
     cca:	4819      	ldr	r0, [pc, #100]	; (d30 <filing_init()+0xbc>)
    return m_card && !m_card->errorCode();
     ccc:	b992      	cbnz	r2, cf4 <filing_init()+0x80>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     cce:	461a      	mov	r2, r3
     cd0:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     cd4:	f003 ff84 	bl	4be0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     cd8:	b160      	cbz	r0, cf4 <filing_init()+0x80>
     cda:	2111      	movs	r1, #17
     cdc:	4816      	ldr	r0, [pc, #88]	; (d38 <filing_init()+0xc4>)
     cde:	f008 f9cf 	bl	9080 <usb_serial_write>
     ce2:	4814      	ldr	r0, [pc, #80]	; (d34 <filing_init()+0xc0>)
     ce4:	f006 fb2a 	bl	733c <Print::println()>
  
  for(int ii=0; ii<5;ii++)
  { Serial.println("sd-config");
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     ce8:	2301      	movs	r3, #1
     cea:	4a14      	ldr	r2, [pc, #80]	; (d3c <filing_init()+0xc8>)
      return 1;
     cec:	4618      	mov	r0, r3
      haveStore=1;
     cee:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cf4:	210f      	movs	r1, #15
     cf6:	4812      	ldr	r0, [pc, #72]	; (d40 <filing_init()+0xcc>)
     cf8:	f008 f9c2 	bl	9080 <usb_serial_write>
     cfc:	4638      	mov	r0, r7
     cfe:	f006 fb1d 	bl	733c <Print::println()>
      delay(100);
     d02:	2064      	movs	r0, #100	; 0x64
     d04:	f006 fdca 	bl	789c <delay>
  for(int ii=0; ii<5;ii++)
     d08:	3d01      	subs	r5, #1
     d0a:	d1c6      	bne.n	c9a <filing_init()+0x26>
     d0c:	211b      	movs	r1, #27
     d0e:	480d      	ldr	r0, [pc, #52]	; (d44 <filing_init()+0xd0>)
     d10:	f008 f9b6 	bl	9080 <usb_serial_write>
     d14:	4807      	ldr	r0, [pc, #28]	; (d34 <filing_init()+0xc0>)
     d16:	f006 fb11 	bl	733c <Print::println()>
  return 0;
     d1a:	4628      	mov	r0, r5
}
     d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d20:	401f4400 	.word	0x401f4400
     d24:	20009588 	.word	0x20009588
     d28:	20026874 	.word	0x20026874
     d2c:	00000ac1 	.word	0x00000ac1
     d30:	20026fc4 	.word	0x20026fc4
     d34:	200086cc 	.word	0x200086cc
     d38:	20000458 	.word	0x20000458
     d3c:	20026ea4 	.word	0x20026ea4
     d40:	2000046c 	.word	0x2000046c
     d44:	2000047c 	.word	0x2000047c
     d48:	2000044c 	.word	0x2000044c

00000d4c <timeStamp()>:

char * timeStamp(void)
{
     d4c:	b510      	push	{r4, lr}
     d4e:	b086      	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d50:	4c0d      	ldr	r4, [pc, #52]	; (d88 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
     d52:	a804      	add	r0, sp, #16
     d54:	f000 fe16 	bl	1984 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
     d58:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     d5c:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     d60:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     d64:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     d68:	e9cd 3202 	strd	r3, r2, [sp, #8]
     d6c:	e9cd 1000 	strd	r1, r0, [sp]
     d70:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     d74:	4620      	mov	r0, r4
     d76:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     d7a:	4904      	ldr	r1, [pc, #16]	; (d8c <timeStamp()+0x40>)
     d7c:	f00a faa0 	bl	b2c0 <sprintf>
  return date_time;
}
     d80:	4620      	mov	r0, r4
     d82:	b006      	add	sp, #24
     d84:	bd10      	pop	{r4, pc}
     d86:	bf00      	nop
     d88:	200268cc 	.word	0x200268cc
     d8c:	200005dc 	.word	0x200005dc

00000d90 <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
     d90:	2a00      	cmp	r2, #0
{
     d92:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
     d94:	bfb4      	ite	lt
     d96:	1dd5      	addlt	r5, r2, #7
     d98:	4615      	movge	r5, r2

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
     d9a:	4c22      	ldr	r4, [pc, #136]	; (e24 <headerInit(long, long, long, int)+0x94>)
{
     d9c:	b083      	sub	sp, #12
  int nbytes=nbits/8;
     d9e:	10ed      	asrs	r5, r5, #3
  strcpy(wav_hdr.rId,"RIFF");
     da0:	9301      	str	r3, [sp, #4]
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
     da2:	61a0      	str	r0, [r4, #24]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
     da4:	fb11 fc05 	smulbb	ip, r1, r5
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
     da8:	4b1f      	ldr	r3, [pc, #124]	; (e28 <headerInit(long, long, long, int)+0x98>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     daa:	fb05 f000 	mul.w	r0, r5, r0
  wav_hdr.nBitsPerSamples=nbits;
     dae:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     db0:	fb01 f500 	mul.w	r5, r1, r0
  wav_hdr.nBlockAlign=nchan*nbytes;
     db4:	f8a4 c020 	strh.w	ip, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
     db8:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
     dba:	e893 0003 	ldmia.w	r3, {r0, r1}
  strcpy(wav_hdr.wId,"WAVE");
     dbe:	4b1b      	ldr	r3, [pc, #108]	; (e2c <headerInit(long, long, long, int)+0x9c>)
  strcpy(&wav_hdr.info[0], MAGIC);
     dc0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  strcpy(wav_hdr.wId,"WAVE");
     dc4:	60a3      	str	r3, [r4, #8]
  strcpy(wav_hdr.dId,"data");
     dc6:	4b1a      	ldr	r3, [pc, #104]	; (e30 <headerInit(long, long, long, int)+0xa0>)
  strcpy(wav_hdr.rId,"RIFF");
     dc8:	491a      	ldr	r1, [pc, #104]	; (e34 <headerInit(long, long, long, int)+0xa4>)
  strcpy(wav_hdr.dId,"data");
     dca:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
     dce:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(&wav_hdr.info[0], MAGIC);
     dd2:	62e0      	str	r0, [r4, #44]	; 0x2c
  strcpy(wav_hdr.rId,"RIFF");
     dd4:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
     dd6:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
     dd8:	2300      	movs	r3, #0
  strcpy(wav_hdr.fId,"fmt ");
     dda:	4817      	ldr	r0, [pc, #92]	; (e38 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");
     ddc:	4917      	ldr	r1, [pc, #92]	; (e3c <headerInit(long, long, long, int)+0xac>)
  strcpy(wav_hdr.fId,"fmt ");
     dde:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
     de0:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  strcpy(wav_hdr.iId,"info");
     de4:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
     de6:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
     de8:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
     dec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  wav_hdr.iLen = 512 - 13*4;
     df0:	62a0      	str	r0, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
     df2:	e9c4 1304 	strd	r1, r3, [r4, #16]
  strcpy(&wav_hdr.info[4], timeStamp());
     df6:	f7ff ffa9 	bl	d4c <timeStamp()>
     dfa:	4601      	mov	r1, r0
     dfc:	f104 0030 	add.w	r0, r4, #48	; 0x30
     e00:	f00a fedc 	bl	bbbc <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
     e04:	9a01      	ldr	r2, [sp, #4]
     e06:	490e      	ldr	r1, [pc, #56]	; (e40 <headerInit(long, long, long, int)+0xb0>)
     e08:	f104 0040 	add.w	r0, r4, #64	; 0x40
     e0c:	f00a fa58 	bl	b2c0 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
     e10:	4b0c      	ldr	r3, [pc, #48]	; (e44 <headerInit(long, long, long, int)+0xb4>)
     e12:	6818      	ldr	r0, [r3, #0]
     e14:	791b      	ldrb	r3, [r3, #4]
     e16:	f8c4 004a 	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
     e1a:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[30]," end");
     e1c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     e20:	b003      	add	sp, #12
     e22:	bd30      	pop	{r4, r5, pc}
     e24:	2002641c 	.word	0x2002641c
     e28:	20000418 	.word	0x20000418
     e2c:	45564157 	.word	0x45564157
     e30:	61746164 	.word	0x61746164
     e34:	46464952 	.word	0x46464952
     e38:	20746d66 	.word	0x20746d66
     e3c:	6f666e69 	.word	0x6f666e69
     e40:	20000420 	.word	0x20000420
     e44:	20000428 	.word	0x20000428

00000e48 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
     e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
     e4c:	4c1f      	ldr	r4, [pc, #124]	; (ecc <writeHeader(char*)+0x84>)
     e4e:	4607      	mov	r7, r0
     e50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e52:	b333      	cbz	r3, ea2 <writeHeader(char*)+0x5a>
  uint32_t curPosition() const {return m_curPosition;}
     e54:	695d      	ldr	r5, [r3, #20]
     e56:	462e      	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
     e58:	462a      	mov	r2, r5
     e5a:	491d      	ldr	r1, [pc, #116]	; (ed0 <writeHeader(char*)+0x88>)
     e5c:	481d      	ldr	r0, [pc, #116]	; (ed4 <writeHeader(char*)+0x8c>)
     e5e:	f006 fa89 	bl	7374 <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e64:	b1c8      	cbz	r0, e9a <writeHeader(char*)+0x52>
     e66:	2100      	movs	r1, #0
     e68:	f002 fdf4 	bl	3a54 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
     e6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     e6e:	b160      	cbz	r0, e8a <writeHeader(char*)+0x42>
     e70:	4639      	mov	r1, r7
     e72:	f44f 7200 	mov.w	r2, #512	; 0x200
     e76:	f002 febd 	bl	3bf4 <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e7c:	b1db      	cbz	r3, eb6 <writeHeader(char*)+0x6e>
     e7e:	4629      	mov	r1, r5
     e80:	4618      	mov	r0, r3
  file.seek(0);
  file.write((const uint8_t*)wav_hdr,512);
  file.seek(fpos);
}
     e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     e86:	f002 bde5 	b.w	3a54 <FatFile::seekSet(unsigned long)>
     e8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     e8c:	b138      	cbz	r0, e9e <writeHeader(char*)+0x56>
     e8e:	4639      	mov	r1, r7
     e90:	f44f 7200 	mov.w	r2, #512	; 0x200
     e94:	f001 fe1c 	bl	2ad0 <ExFatFile::write(void const*, unsigned int)>
     e98:	e7ef      	b.n	e7a <writeHeader(char*)+0x32>
     e9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
     e9c:	b930      	cbnz	r0, eac <writeHeader(char*)+0x64>
     e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ea2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
     ea4:	b17e      	cbz	r6, ec6 <writeHeader(char*)+0x7e>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     ea6:	6835      	ldr	r5, [r6, #0]
     ea8:	462e      	mov	r6, r5
     eaa:	e7d5      	b.n	e58 <writeHeader(char*)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     eac:	2200      	movs	r2, #0
     eae:	2300      	movs	r3, #0
     eb0:	f001 f8cc 	bl	204c <ExFatFile::seekSet(unsigned long long)>
     eb4:	e7da      	b.n	e6c <writeHeader(char*)+0x24>
     eb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     eb8:	2800      	cmp	r0, #0
     eba:	d0f0      	beq.n	e9e <writeHeader(char*)+0x56>
     ebc:	4632      	mov	r2, r6
     ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     ec2:	f001 b8c3 	b.w	204c <ExFatFile::seekSet(unsigned long long)>
     ec6:	4635      	mov	r5, r6
     ec8:	e7c6      	b.n	e58 <writeHeader(char*)+0x10>
     eca:	bf00      	nop
     ecc:	20026e54 	.word	0x20026e54
     ed0:	200004d4 	.word	0x200004d4
     ed4:	200086cc 	.word	0x200086cc

00000ed8 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
     ed8:	b530      	push	{r4, r5, lr}
     eda:	b089      	sub	sp, #36	; 0x24
     edc:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
     ede:	4d1d      	ldr	r5, [pc, #116]	; (f54 <makeHeader(long*)+0x7c>)
    rtc_get_datetime(&t);
     ee0:	a806      	add	r0, sp, #24
     ee2:	f000 fd4f 	bl	1984 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     ee6:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     eea:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     eee:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     ef2:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     ef6:	e9cd 3003 	strd	r3, r0, [sp, #12]
     efa:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     efe:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     f02:	9000      	str	r0, [sp, #0]
     f04:	4620      	mov	r0, r4
     f06:	e9cd 2101 	strd	r2, r1, [sp, #4]
     f0a:	4a13      	ldr	r2, [pc, #76]	; (f58 <makeHeader(long*)+0x80>)
     f0c:	4913      	ldr	r1, [pc, #76]	; (f5c <makeHeader(long*)+0x84>)
     f0e:	f00a f9d7 	bl	b2c0 <sprintf>
    header[10] = t_on;
     f12:	4b13      	ldr	r3, [pc, #76]	; (f60 <makeHeader(long*)+0x88>)
    header[9] = t_acq;
     f14:	682d      	ldr	r5, [r5, #0]
    header[8] = NCH;
     f16:	2001      	movs	r0, #1
    header[10] = t_on;
     f18:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     f1a:	4a12      	ldr	r2, [pc, #72]	; (f64 <makeHeader(long*)+0x8c>)
    header[10] = t_on;
     f1c:	62a3      	str	r3, [r4, #40]	; 0x28
    header[11] = t_off;
     f1e:	4b12      	ldr	r3, [pc, #72]	; (f68 <makeHeader(long*)+0x90>)
    header[6] = SerNum;      // serial number
     f20:	6812      	ldr	r2, [r2, #0]
    header[11] = t_off;
     f22:	681b      	ldr	r3, [r3, #0]
    header[7] = fsamp;
     f24:	4911      	ldr	r1, [pc, #68]	; (f6c <makeHeader(long*)+0x94>)
    header[6] = SerNum;      // serial number
     f26:	61a2      	str	r2, [r4, #24]
    header[7] = fsamp;
     f28:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
     f2a:	4a11      	ldr	r2, [pc, #68]	; (f70 <makeHeader(long*)+0x98>)
    header[11] = t_off;
     f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
    header[13] = shift;
     f2e:	4b11      	ldr	r3, [pc, #68]	; (f74 <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
     f30:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     f32:	2514      	movs	r5, #20
    header[13] = shift;
     f34:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[7] = fsamp;
     f38:	61e1      	str	r1, [r4, #28]
    header[12] = proc;
     f3a:	f9b2 1000 	ldrsh.w	r1, [r2]

    header[127]=0x55555555;
     f3e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
     f42:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     f44:	6220      	str	r0, [r4, #32]
    header[12] = proc;
     f46:	6321      	str	r1, [r4, #48]	; 0x30
    header[127]=0x55555555;
     f48:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     f4c:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     f4e:	b009      	add	sp, #36	; 0x24
     f50:	bd30      	pop	{r4, r5, pc}
     f52:	bf00      	nop
     f54:	20008c94 	.word	0x20008c94
     f58:	20000418 	.word	0x20000418
     f5c:	20000430 	.word	0x20000430
     f60:	20008c98 	.word	0x20008c98
     f64:	20009588 	.word	0x20009588
     f68:	2002749c 	.word	0x2002749c
     f6c:	20008c90 	.word	0x20008c90
     f70:	200274c8 	.word	0x200274c8
     f74:	200274ce 	.word	0x200274ce

00000f78 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     f78:	b530      	push	{r4, r5, lr}
     f7a:	b087      	sub	sp, #28
     f7c:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     f7e:	a804      	add	r0, sp, #16
     f80:	f000 fd00 	bl	1984 <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
     f84:	4915      	ldr	r1, [pc, #84]	; (fdc <newDirectory(char*)+0x64>)

    if(HourDir)
    {
      if(newFolder(t.hour))
     f86:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
     f8a:	680b      	ldr	r3, [r1, #0]
     f8c:	429a      	cmp	r2, r3
     f8e:	d022      	beq.n	fd6 <newDirectory(char*)+0x5e>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     f90:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     f94:	f99d 5013 	ldrsb.w	r5, [sp, #19]
     f98:	4b11      	ldr	r3, [pc, #68]	; (fe0 <newDirectory(char*)+0x68>)
     f9a:	e9cd 5202 	strd	r5, r2, [sp, #8]
     f9e:	681b      	ldr	r3, [r3, #0]
     fa0:	9001      	str	r0, [sp, #4]
     fa2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
     fa6:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     fa8:	4a0e      	ldr	r2, [pc, #56]	; (fe4 <newDirectory(char*)+0x6c>)
     faa:	490f      	ldr	r1, [pc, #60]	; (fe8 <newDirectory(char*)+0x70>)
     fac:	9000      	str	r0, [sp, #0]
     fae:	4620      	mov	r0, r4
     fb0:	f00a f986 	bl	b2c0 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
     fb4:	480d      	ldr	r0, [pc, #52]	; (fec <newDirectory(char*)+0x74>)
     fb6:	f006 f9c1 	bl	733c <Print::println()>
     fba:	2102      	movs	r1, #2
     fbc:	480c      	ldr	r0, [pc, #48]	; (ff0 <newDirectory(char*)+0x78>)
     fbe:	f008 f85f 	bl	9080 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
     fc2:	4620      	mov	r0, r4
     fc4:	f00a febc 	bl	bd40 <strlen>
     fc8:	4601      	mov	r1, r0
     fca:	4620      	mov	r0, r4
     fcc:	f008 f858 	bl	9080 <usb_serial_write>
          return 1;   // have new directory
     fd0:	2001      	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
     fd2:	b007      	add	sp, #28
     fd4:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
     fd6:	2000      	movs	r0, #0
}
     fd8:	b007      	add	sp, #28
     fda:	bd30      	pop	{r4, r5, pc}
     fdc:	200086e0 	.word	0x200086e0
     fe0:	20009588 	.word	0x20009588
     fe4:	200004e0 	.word	0x200004e0
     fe8:	200004e4 	.word	0x200004e4
     fec:	200086cc 	.word	0x200086cc
     ff0:	20000500 	.word	0x20000500

00000ff4 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
     ff4:	b510      	push	{r4, lr}
     ff6:	b088      	sub	sp, #32
     ff8:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
     ffa:	a806      	add	r0, sp, #24
     ffc:	f000 fcc2 	bl	1984 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1000:	4b1b      	ldr	r3, [pc, #108]	; (1070 <newFileName(char*)+0x7c>)
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1002:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    1006:	f9b3 3000 	ldrsh.w	r3, [r3]
    100a:	bb23      	cbnz	r3, 1056 <newFileName(char*)+0x62>
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    100c:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1010:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1014:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1018:	e9cd 3003 	strd	r3, r0, [sp, #12]
    101c:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1020:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1024:	9000      	str	r0, [sp, #0]
    1026:	4620      	mov	r0, r4
    1028:	e9cd 2101 	strd	r2, r1, [sp, #4]
    102c:	4a11      	ldr	r2, [pc, #68]	; (1074 <newFileName(char*)+0x80>)
    102e:	4912      	ldr	r1, [pc, #72]	; (1078 <newFileName(char*)+0x84>)
    1030:	f00a f946 	bl	b2c0 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1034:	4811      	ldr	r0, [pc, #68]	; (107c <newFileName(char*)+0x88>)
    1036:	f006 f981 	bl	733c <Print::println()>
    103a:	2102      	movs	r1, #2
    103c:	4810      	ldr	r0, [pc, #64]	; (1080 <newFileName(char*)+0x8c>)
    103e:	f008 f81f 	bl	9080 <usb_serial_write>
    1042:	4620      	mov	r0, r4
    1044:	f00a fe7c 	bl	bd40 <strlen>
    1048:	4601      	mov	r1, r0
    104a:	4620      	mov	r0, r4
    104c:	f008 f818 	bl	9080 <usb_serial_write>
    return 1;
}
    1050:	2001      	movs	r0, #1
    1052:	b008      	add	sp, #32
    1054:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    1056:	f99d 101e 	ldrsb.w	r1, [sp, #30]
    105a:	f99d 301d 	ldrsb.w	r3, [sp, #29]
    105e:	4a05      	ldr	r2, [pc, #20]	; (1074 <newFileName(char*)+0x80>)
    1060:	e9cd 1000 	strd	r1, r0, [sp]
    1064:	4907      	ldr	r1, [pc, #28]	; (1084 <newFileName(char*)+0x90>)
    1066:	4620      	mov	r0, r4
    1068:	f00a f92a 	bl	b2c0 <sprintf>
    106c:	e7e2      	b.n	1034 <newFileName(char*)+0x40>
    106e:	bf00      	nop
    1070:	200274c8 	.word	0x200274c8
    1074:	20000498 	.word	0x20000498
    1078:	2000049c 	.word	0x2000049c
    107c:	200086cc 	.word	0x200086cc
    1080:	20000500 	.word	0x20000500
    1084:	200004c0 	.word	0x200004c0

00001088 <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    1088:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    108a:	4604      	mov	r4, r0
{
    108c:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    108e:	2800      	cmp	r0, #0
    1090:	d04a      	beq.n	1128 <storeData(short)+0xa0>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    1092:	2801      	cmp	r0, #1
    1094:	d00a      	beq.n	10ac <storeData(short)+0x24>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    1096:	2802      	cmp	r0, #2
    1098:	f000 80c9 	beq.w	122e <storeData(short)+0x1a6>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    109c:	1ec3      	subs	r3, r0, #3
    109e:	b29b      	uxth	r3, r3
    10a0:	2b01      	cmp	r3, #1
    10a2:	f240 8144 	bls.w	132e <storeData(short)+0x2a6>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    10a6:	4620      	mov	r0, r4
    10a8:	b014      	add	sp, #80	; 0x50
    10aa:	bd70      	pop	{r4, r5, r6, pc}
    10ac:	4dad      	ldr	r5, [pc, #692]	; (1364 <storeData(short)+0x2dc>)
        if(proc==0)
    10ae:	4bae      	ldr	r3, [pc, #696]	; (1368 <storeData(short)+0x2e0>)
    {   nbuf=0;
    10b0:	2200      	movs	r2, #0
    10b2:	4eae      	ldr	r6, [pc, #696]	; (136c <storeData(short)+0x2e4>)
        if(proc==0)
    10b4:	f9b3 3000 	ldrsh.w	r3, [r3]
    {   nbuf=0;
    10b8:	6032      	str	r2, [r6, #0]
        if(proc==0)
    10ba:	2b00      	cmp	r3, #0
    10bc:	f040 8084 	bne.w	11c8 <storeData(short)+0x140>
          hdr = headerInit(fsamp, NCH, NBITS_WAV, SerNum);
    10c0:	49ab      	ldr	r1, [pc, #684]	; (1370 <storeData(short)+0x2e8>)
    10c2:	2220      	movs	r2, #32
    10c4:	4bab      	ldr	r3, [pc, #684]	; (1374 <storeData(short)+0x2ec>)
    10c6:	6808      	ldr	r0, [r1, #0]
    10c8:	2101      	movs	r1, #1
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	f7ff fe60 	bl	d90 <headerInit(long, long, long, int)>
    10d0:	4601      	mov	r1, r0
    return m_fFile ? m_fFile->write(buf, count) :
    10d2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    10d4:	2800      	cmp	r0, #0
    10d6:	d07e      	beq.n	11d6 <storeData(short)+0x14e>
    10d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    10dc:	f002 fd8a 	bl	3bf4 <FatFile::write(void const*, unsigned int)>
        if(file.write((const uint8_t*)hdr,512) < 512) 
    10e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    10e4:	f0c0 8083 	bcc.w	11ee <storeData(short)+0x166>
    10e8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    10ea:	2800      	cmp	r0, #0
    10ec:	f000 8096 	beq.w	121c <storeData(short)+0x194>
    10f0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    10f4:	49a0      	ldr	r1, [pc, #640]	; (1378 <storeData(short)+0x2f0>)
    10f6:	f002 fd7d 	bl	3bf4 <FatFile::write(void const*, unsigned int)>
    10fa:	4604      	mov	r4, r0
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    10fc:	f5b4 5fc0 	cmp.w	r4, #6144	; 0x1800
    1100:	f0c0 8099 	bcc.w	1236 <storeData(short)+0x1ae>
        disk_count++;
    1104:	499d      	ldr	r1, [pc, #628]	; (137c <storeData(short)+0x2f4>)
          nbuf++;
    1106:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1108:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    110a:	3301      	adds	r3, #1
        disk_count++;
    110c:	3201      	adds	r2, #1
          nbuf++;
    110e:	6033      	str	r3, [r6, #0]
        disk_count++;
    1110:	600a      	str	r2, [r1, #0]
    1112:	499b      	ldr	r1, [pc, #620]	; (1380 <storeData(short)+0x2f8>)
        if((nbuf % 1000)==0 ) file.flush();
    1114:	4a9b      	ldr	r2, [pc, #620]	; (1384 <storeData(short)+0x2fc>)
        disk_count++;
    1116:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    111a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    111e:	d275      	bcs.n	120c <storeData(short)+0x184>
    1120:	2402      	movs	r4, #2
}
    1122:	4620      	mov	r0, r4
    1124:	b014      	add	sp, #80	; 0x50
    1126:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1128:	4897      	ldr	r0, [pc, #604]	; (1388 <storeData(short)+0x300>)
    112a:	f7ff ff25 	bl	f78 <newDirectory(char*)>
    112e:	b1d8      	cbz	r0, 1168 <storeData(short)+0xe0>
    return m_fVol ? m_fVol->exists(path) :
    1130:	4d96      	ldr	r5, [pc, #600]	; (138c <storeData(short)+0x304>)
    1132:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1136:	2a00      	cmp	r2, #0
    1138:	f000 80bb 	beq.w	12b2 <storeData(short)+0x22a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    113c:	466e      	mov	r6, sp
    113e:	4611      	mov	r1, r2
    1140:	4623      	mov	r3, r4
    1142:	4a91      	ldr	r2, [pc, #580]	; (1388 <storeData(short)+0x300>)
    1144:	4630      	mov	r0, r6
  FatFile() {}
    1146:	9400      	str	r4, [sp, #0]
    1148:	f002 fb54 	bl	37f4 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    114c:	2800      	cmp	r0, #0
    114e:	f000 80bd 	beq.w	12cc <storeData(short)+0x244>
    return m_fVol ? m_fVol->chdir(path) :
    1152:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    1156:	2800      	cmp	r0, #0
    1158:	f000 80cf 	beq.w	12fa <storeData(short)+0x272>
    115c:	498a      	ldr	r1, [pc, #552]	; (1388 <storeData(short)+0x300>)
    115e:	f003 fc4f 	bl	4a00 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1162:	2800      	cmp	r0, #0
    1164:	f000 80d2 	beq.w	130c <storeData(short)+0x284>
        if(newFileName(fileName))
    1168:	4889      	ldr	r0, [pc, #548]	; (1390 <storeData(short)+0x308>)
    116a:	f7ff ff43 	bl	ff4 <newFileName(char*)>
    116e:	2800      	cmp	r0, #0
    1170:	f000 80f5 	beq.w	135e <storeData(short)+0x2d6>
            file = sd.open(fileName, FILE_WRITE); 
    1174:	f244 2302 	movw	r3, #16898	; 0x4202
    1178:	4a85      	ldr	r2, [pc, #532]	; (1390 <storeData(short)+0x308>)
    117a:	4984      	ldr	r1, [pc, #528]	; (138c <storeData(short)+0x304>)
    117c:	4668      	mov	r0, sp
    117e:	f003 fda1 	bl	4cc4 <FsVolume::open(char const*, int)>
class Print
    1182:	4d78      	ldr	r5, [pc, #480]	; (1364 <storeData(short)+0x2dc>)
#include <inttypes.h>
#include "Print.h"

enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
    1184:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    1188:	f105 0010 	add.w	r0, r5, #16
    118c:	732b      	strb	r3, [r5, #12]
    118e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1192:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1196:	a904      	add	r1, sp, #16
    1198:	f003 fc5a 	bl	4a50 <FsBaseFile::operator=(FsBaseFile const&)>
    119c:	4b7d      	ldr	r3, [pc, #500]	; (1394 <storeData(short)+0x30c>)
  ~FsBaseFile() {close();}
    119e:	a804      	add	r0, sp, #16
    11a0:	9300      	str	r3, [sp, #0]
    11a2:	f003 fcaf 	bl	4b04 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    11a6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    11a8:	2b00      	cmp	r3, #0
    11aa:	d180      	bne.n	10ae <storeData(short)+0x26>
    11ac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    11ae:	2b00      	cmp	r3, #0
    11b0:	f47f af7d 	bne.w	10ae <storeData(short)+0x26>
    11b4:	2111      	movs	r1, #17
    11b6:	4878      	ldr	r0, [pc, #480]	; (1398 <storeData(short)+0x310>)
    11b8:	f007 ff62 	bl	9080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11bc:	4877      	ldr	r0, [pc, #476]	; (139c <storeData(short)+0x314>)
                return STOPPED; 
    11be:	f04f 34ff 	mov.w	r4, #4294967295
    11c2:	f006 f8bb 	bl	733c <Print::println()>
    11c6:	e76e      	b.n	10a6 <storeData(short)+0x1e>
          makeHeader(fileHeader);
    11c8:	4875      	ldr	r0, [pc, #468]	; (13a0 <storeData(short)+0x318>)
    11ca:	f7ff fe85 	bl	ed8 <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    11ce:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    11d0:	4973      	ldr	r1, [pc, #460]	; (13a0 <storeData(short)+0x318>)
    11d2:	2800      	cmp	r0, #0
    11d4:	d180      	bne.n	10d8 <storeData(short)+0x50>
    11d6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    11d8:	2800      	cmp	r0, #0
    11da:	f000 809e 	beq.w	131a <storeData(short)+0x292>
    11de:	f44f 7200 	mov.w	r2, #512	; 0x200
    11e2:	f001 fc75 	bl	2ad0 <ExFatFile::write(void const*, unsigned int)>
        if(file.write((const uint8_t*)hdr,512) < 512) 
    11e6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    11ea:	f4bf af7d 	bcs.w	10e8 <storeData(short)+0x60>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    11ee:	2400      	movs	r4, #0
  bool isOpen() const {return m_fFile || m_xFile;}
    11f0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    11f2:	2b00      	cmp	r3, #0
    11f4:	d059      	beq.n	12aa <storeData(short)+0x222>
        {   if(proc==0)
    11f6:	4b5c      	ldr	r3, [pc, #368]	; (1368 <storeData(short)+0x2e0>)
    11f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d046      	beq.n	128e <storeData(short)+0x206>
            file.close();
    1200:	4868      	ldr	r0, [pc, #416]	; (13a4 <storeData(short)+0x31c>)
    1202:	f003 fc7f 	bl	4b04 <FsBaseFile::close()>
}
    1206:	4620      	mov	r0, r4
    1208:	b014      	add	sp, #80	; 0x50
    120a:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() :
    120c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    120e:	2800      	cmp	r0, #0
    1210:	f000 8085 	beq.w	131e <storeData(short)+0x296>
    1214:	2402      	movs	r4, #2
    1216:	f002 fce7 	bl	3be8 <FatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    121a:	e744      	b.n	10a6 <storeData(short)+0x1e>
    121c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    121e:	b148      	cbz	r0, 1234 <storeData(short)+0x1ac>
    1220:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    1224:	4954      	ldr	r1, [pc, #336]	; (1378 <storeData(short)+0x2f0>)
    1226:	f001 fc53 	bl	2ad0 <ExFatFile::write(void const*, unsigned int)>
    122a:	4604      	mov	r4, r0
    122c:	e766      	b.n	10fc <storeData(short)+0x74>
    122e:	4d4d      	ldr	r5, [pc, #308]	; (1364 <storeData(short)+0x2dc>)
    1230:	4e4e      	ldr	r6, [pc, #312]	; (136c <storeData(short)+0x2e4>)
    1232:	e759      	b.n	10e8 <storeData(short)+0x60>
    1234:	4604      	mov	r4, r0
    1236:	2101      	movs	r1, #1
    1238:	485b      	ldr	r0, [pc, #364]	; (13a8 <storeData(short)+0x320>)
    123a:	f007 ff21 	bl	9080 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    123e:	2300      	movs	r3, #0
    1240:	220a      	movs	r2, #10
    1242:	4621      	mov	r1, r4
    1244:	4855      	ldr	r0, [pc, #340]	; (139c <storeData(short)+0x314>)
    1246:	f006 f8a3 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    124a:	2101      	movs	r1, #1
    124c:	4857      	ldr	r0, [pc, #348]	; (13ac <storeData(short)+0x324>)
    124e:	f007 ff17 	bl	9080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1252:	2102      	movs	r1, #2
    1254:	4851      	ldr	r0, [pc, #324]	; (139c <storeData(short)+0x314>)
    1256:	f006 f865 	bl	7324 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    125a:	4850      	ldr	r0, [pc, #320]	; (139c <storeData(short)+0x314>)
    125c:	f006 f86e 	bl	733c <Print::println()>
        disk_count++;
    1260:	4946      	ldr	r1, [pc, #280]	; (137c <storeData(short)+0x2f4>)
    1262:	4847      	ldr	r0, [pc, #284]	; (1380 <storeData(short)+0x2f8>)
    1264:	6833      	ldr	r3, [r6, #0]
    1266:	680a      	ldr	r2, [r1, #0]
    1268:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    126c:	4845      	ldr	r0, [pc, #276]	; (1384 <storeData(short)+0x2fc>)
        disk_count++;
    126e:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1270:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1274:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1276:	d3ba      	bcc.n	11ee <storeData(short)+0x166>
    return m_fFile ? m_fFile->sync() :
    1278:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    127a:	2800      	cmp	r0, #0
    127c:	d059      	beq.n	1332 <storeData(short)+0x2aa>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    127e:	2403      	movs	r4, #3
    1280:	f002 fcb2 	bl	3be8 <FatFile::sync()>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    1284:	3c03      	subs	r4, #3
    1286:	bf18      	it	ne
    1288:	f04f 34ff 	movne.w	r4, #4294967295
    128c:	e7b0      	b.n	11f0 <storeData(short)+0x168>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    128e:	4b37      	ldr	r3, [pc, #220]	; (136c <storeData(short)+0x2e4>)
  wav_hdr.dLen = nbytes;
    1290:	4847      	ldr	r0, [pc, #284]	; (13b0 <storeData(short)+0x328>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1292:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    1294:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    129a:	02db      	lsls	r3, r3, #11
  wav_hdr.rLen += wav_hdr.dLen;
    129c:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    129e:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    12a2:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    12a4:	f7ff fdd0 	bl	e48 <writeHeader(char*)>
    12a8:	e7aa      	b.n	1200 <storeData(short)+0x178>
  bool isOpen() const {return m_fFile || m_xFile;}
    12aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    12ac:	2b00      	cmp	r3, #0
    12ae:	d1a2      	bne.n	11f6 <storeData(short)+0x16e>
    12b0:	e6f9      	b.n	10a6 <storeData(short)+0x1e>
    12b2:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    12b6:	b1c9      	cbz	r1, 12ec <storeData(short)+0x264>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    12b8:	466e      	mov	r6, sp
    12ba:	4613      	mov	r3, r2
  ExFatFile() {}
    12bc:	920c      	str	r2, [sp, #48]	; 0x30
    12be:	4630      	mov	r0, r6
    12c0:	4a31      	ldr	r2, [pc, #196]	; (1388 <storeData(short)+0x300>)
    12c2:	f001 f981 	bl	25c8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    12c6:	2800      	cmp	r0, #0
    12c8:	f47f af43 	bne.w	1152 <storeData(short)+0xca>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    12cc:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    12d0:	2a00      	cmp	r2, #0
    12d2:	d035      	beq.n	1340 <storeData(short)+0x2b8>
    12d4:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12d6:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    12da:	2301      	movs	r3, #1
    12dc:	4630      	mov	r0, r6
    12de:	4a2a      	ldr	r2, [pc, #168]	; (1388 <storeData(short)+0x300>)
    12e0:	9400      	str	r4, [sp, #0]
    12e2:	f002 f98f 	bl	3604 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    12e6:	2800      	cmp	r0, #0
    12e8:	f47f af33 	bne.w	1152 <storeData(short)+0xca>
    12ec:	4931      	ldr	r1, [pc, #196]	; (13b4 <storeData(short)+0x32c>)
    12ee:	f04f 34ff 	mov.w	r4, #4294967295
    12f2:	482a      	ldr	r0, [pc, #168]	; (139c <storeData(short)+0x314>)
    12f4:	f7ff fcac 	bl	c50 <Print::println(char const*) [clone .isra.0]>
    12f8:	e6d5      	b.n	10a6 <storeData(short)+0x1e>
    12fa:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    12fe:	b128      	cbz	r0, 130c <storeData(short)+0x284>
    1300:	4921      	ldr	r1, [pc, #132]	; (1388 <storeData(short)+0x300>)
    1302:	f001 ffd9 	bl	32b8 <ExFatVolume::chdir(char const*)>
    1306:	2800      	cmp	r0, #0
    1308:	f47f af2e 	bne.w	1168 <storeData(short)+0xe0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    130c:	492a      	ldr	r1, [pc, #168]	; (13b8 <storeData(short)+0x330>)
    130e:	f04f 34ff 	mov.w	r4, #4294967295
    1312:	4822      	ldr	r0, [pc, #136]	; (139c <storeData(short)+0x314>)
    1314:	f7ff fc9c 	bl	c50 <Print::println(char const*) [clone .isra.0]>
    1318:	e6c5      	b.n	10a6 <storeData(short)+0x1e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    131a:	2400      	movs	r4, #0
    131c:	e6c3      	b.n	10a6 <storeData(short)+0x1e>
    131e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1320:	2402      	movs	r4, #2
    1322:	2800      	cmp	r0, #0
    1324:	f43f aebf 	beq.w	10a6 <storeData(short)+0x1e>
    1328:	f001 fa3c 	bl	27a4 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    132c:	e6bb      	b.n	10a6 <storeData(short)+0x1e>
    132e:	4d0d      	ldr	r5, [pc, #52]	; (1364 <storeData(short)+0x2dc>)
    1330:	e7a8      	b.n	1284 <storeData(short)+0x1fc>
    1332:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1334:	2800      	cmp	r0, #0
    1336:	d0f0      	beq.n	131a <storeData(short)+0x292>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    1338:	2403      	movs	r4, #3
    133a:	f001 fa33 	bl	27a4 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    133e:	e7a1      	b.n	1284 <storeData(short)+0x1fc>
    1340:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1344:	2900      	cmp	r1, #0
    1346:	d0d1      	beq.n	12ec <storeData(short)+0x264>
    1348:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    134a:	2301      	movs	r3, #1
    134c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1350:	4630      	mov	r0, r6
    1352:	4a0d      	ldr	r2, [pc, #52]	; (1388 <storeData(short)+0x300>)
    1354:	f001 fade 	bl	2914 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1358:	2800      	cmp	r0, #0
    135a:	d0c7      	beq.n	12ec <storeData(short)+0x264>
    135c:	e6f9      	b.n	1152 <storeData(short)+0xca>
        {  return STOPPED; // if file open fails: don't do anything
    135e:	f04f 34ff 	mov.w	r4, #4294967295
    1362:	e6a0      	b.n	10a6 <storeData(short)+0x1e>
    1364:	20026e54 	.word	0x20026e54
    1368:	200274c8 	.word	0x200274c8
    136c:	20026ed4 	.word	0x20026ed4
    1370:	20008c90 	.word	0x20008c90
    1374:	20009588 	.word	0x20009588
    1378:	20009590 	.word	0x20009590
    137c:	20026e2c 	.word	0x20026e2c
    1380:	26e978d5 	.word	0x26e978d5
    1384:	00418937 	.word	0x00418937
    1388:	200261cc 	.word	0x200261cc
    138c:	20026fc4 	.word	0x20026fc4
    1390:	2002661c 	.word	0x2002661c
    1394:	2000082c 	.word	0x2000082c
    1398:	200005c4 	.word	0x200005c4
    139c:	200086cc 	.word	0x200086cc
    13a0:	2000ad90 	.word	0x2000ad90
    13a4:	20026e64 	.word	0x20026e64
    13a8:	200005d8 	.word	0x200005d8
    13ac:	200004dc 	.word	0x200004dc
    13b0:	2002641c 	.word	0x2002641c
    13b4:	200005ac 	.word	0x200005ac
    13b8:	200005b8 	.word	0x200005b8

000013bc <saveData(short)>:
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    13bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(status==STOPPED) 
    13c0:	1c43      	adds	r3, r0, #1
    13c2:	f000 8083 	beq.w	14cc <saveData(short)+0x110>
      while(queue_isBusy()); //wait if acq writes to queue
      pullData((uint32_t*)tempBuffer1);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer1[ii];
    }

    if(status<CLOSED) return status; // we are stopped: don't do anything
    13c6:	2800      	cmp	r0, #0
    13c8:	4606      	mov	r6, r0
    13ca:	f2c0 8092 	blt.w	14f2 <saveData(short)+0x136>
  tx=rtc_get();
    13ce:	f006 fc1b 	bl	7c08 <rtc_get>
  tx = tx % t_acq;
    13d2:	4b56      	ldr	r3, [pc, #344]	; (152c <saveData(short)+0x170>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    13d4:	2e01      	cmp	r6, #1
  tx = tx % t_acq;
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	fbb0 f2f3 	udiv	r2, r0, r3
    13dc:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    13e0:	4b53      	ldr	r3, [pc, #332]	; (1530 <saveData(short)+0x174>)
    13e2:	dd05      	ble.n	13f0 <saveData(short)+0x34>
    13e4:	681a      	ldr	r2, [r3, #0]
    13e6:	b11a      	cbz	r2, 13f0 <saveData(short)+0x34>
    13e8:	681a      	ldr	r2, [r3, #0]
    13ea:	4290      	cmp	r0, r2
    13ec:	bf38      	it	cc
    13ee:	2603      	movcc	r6, #3
  tx_=tx;
    13f0:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=nblocks)
    13f2:	f000 f903 	bl	15fc <getDataCount()>
    13f6:	280b      	cmp	r0, #11
    13f8:	d97b      	bls.n	14f2 <saveData(short)+0x136>
    { 
      if(proc==0)
    13fa:	4b4e      	ldr	r3, [pc, #312]	; (1534 <saveData(short)+0x178>)
    13fc:	f9b3 3000 	ldrsh.w	r3, [r3]
    1400:	2b00      	cmp	r3, #0
    1402:	d179      	bne.n	14f8 <saveData(short)+0x13c>
    1404:	4d4c      	ldr	r5, [pc, #304]	; (1538 <saveData(short)+0x17c>)
    1406:	f505 58c0 	add.w	r8, r5, #6144	; 0x1800
    140a:	46a9      	mov	r9, r5
    140c:	462f      	mov	r7, r5
      { 
        for(int ii=0; ii<nblocks; ii++)
        { while(queue_isBusy()); //wait if acq writes to queue
    140e:	f000 f903 	bl	1618 <queue_isBusy()>
    1412:	4604      	mov	r4, r0
    1414:	2800      	cmp	r0, #0
    1416:	d1fa      	bne.n	140e <saveData(short)+0x52>
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1418:	4638      	mov	r0, r7
        for(int ii=0; ii<nblocks; ii++)
    141a:	f507 7700 	add.w	r7, r7, #512	; 0x200
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    141e:	f000 f943 	bl	16a8 <pullData(unsigned long*)>
        for(int ii=0; ii<nblocks; ii++)
    1422:	4547      	cmp	r7, r8
    1424:	d1f3      	bne.n	140e <saveData(short)+0x52>
        }

        // differentiate
        static int32_t data0=0;
        tempBuffer1[0] =tempBuffer0[0]-data0;
    1426:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1560 <saveData(short)+0x1a4>
    142a:	4844      	ldr	r0, [pc, #272]	; (153c <saveData(short)+0x180>)
    142c:	f8d9 2000 	ldr.w	r2, [r9]
    1430:	f8d8 3000 	ldr.w	r3, [r8]
    1434:	4607      	mov	r7, r0
    1436:	f8df c12c 	ldr.w	ip, [pc, #300]	; 1564 <saveData(short)+0x1a8>
    143a:	4601      	mov	r1, r0
    143c:	eba2 0e03 	sub.w	lr, r2, r3
        for(int ii=1;ii<MAX_TEMP_BUFFER; ii++) tempBuffer1[ii]=tempBuffer0[ii]-tempBuffer0[ii-1];
    1440:	4613      	mov	r3, r2
    1442:	f855 2f04 	ldr.w	r2, [r5, #4]!
    1446:	1ad3      	subs	r3, r2, r3
    1448:	4565      	cmp	r5, ip
    144a:	f841 3f04 	str.w	r3, [r1, #4]!
    144e:	d1f7      	bne.n	1440 <saveData(short)+0x84>
        data0=tempBuffer0[MAX_TEMP_BUFFER-1];
    1450:	4b3b      	ldr	r3, [pc, #236]	; (1540 <saveData(short)+0x184>)
    1452:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
    1456:	f8c8 3000 	str.w	r3, [r8]

        // remove initial offset
        static int first=1; if(first)  { tempBuffer1[0]=0; first=0;} 
    145a:	4b3a      	ldr	r3, [pc, #232]	; (1544 <saveData(short)+0x188>)
    145c:	681a      	ldr	r2, [r3, #0]
    145e:	b112      	cbz	r2, 1466 <saveData(short)+0xaa>
    1460:	2200      	movs	r2, #0
    1462:	4696      	mov	lr, r2
    1464:	601a      	str	r2, [r3, #0]

        // integrate
        static int32_t data1=0;
        tempBuffer1[0]=tempBuffer1[0]+data1;
    1466:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1568 <saveData(short)+0x1ac>
    146a:	f8df c100 	ldr.w	ip, [pc, #256]	; 156c <saveData(short)+0x1b0>
    146e:	f8d8 1000 	ldr.w	r1, [r8]
    1472:	4b32      	ldr	r3, [pc, #200]	; (153c <saveData(short)+0x180>)
    1474:	4471      	add	r1, lr
    1476:	460a      	mov	r2, r1
    1478:	6039      	str	r1, [r7, #0]
        for(int ii=1;ii<MAX_TEMP_BUFFER; ii++) tempBuffer1[ii] += tempBuffer1[ii-1];
    147a:	f853 5f04 	ldr.w	r5, [r3, #4]!
    147e:	442a      	add	r2, r5
    1480:	4563      	cmp	r3, ip
    1482:	601a      	str	r2, [r3, #0]
    1484:	d1f9      	bne.n	147a <saveData(short)+0xbe>
        data1=tempBuffer1[MAX_TEMP_BUFFER-1];        
    1486:	4b30      	ldr	r3, [pc, #192]	; (1548 <saveData(short)+0x18c>)
    1488:	460f      	mov	r7, r1
    148a:	4a30      	ldr	r2, [pc, #192]	; (154c <saveData(short)+0x190>)
    148c:	f8d3 57fc 	ldr.w	r5, [r3, #2044]	; 0x7fc
    1490:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    1494:	f8c8 5000 	str.w	r5, [r8]

        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer1[ii];
    1498:	e001      	b.n	149e <saveData(short)+0xe2>
    149a:	f853 7f04 	ldr.w	r7, [r3, #4]!
    149e:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
    14a2:	3401      	adds	r4, #1
    14a4:	2c08      	cmp	r4, #8
    14a6:	d1f8      	bne.n	149a <saveData(short)+0xde>
    14a8:	4b29      	ldr	r3, [pc, #164]	; (1550 <saveData(short)+0x194>)
    14aa:	f503 52c0 	add.w	r2, r3, #6144	; 0x1800
    14ae:	e001      	b.n	14b4 <saveData(short)+0xf8>

        if(NBITS_WAV==32)
        {// wav mode; store original 32 bits
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++) 
          { diskBuffer[ii]=tempBuffer1[ii];
    14b0:	f850 1f04 	ldr.w	r1, [r0, #4]!
    14b4:	f843 1f04 	str.w	r1, [r3, #4]!
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++) 
    14b8:	4293      	cmp	r3, r2
    14ba:	d1f9      	bne.n	14b0 <saveData(short)+0xf4>
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    14bc:	4b25      	ldr	r3, [pc, #148]	; (1554 <saveData(short)+0x198>)
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	b1bb      	cbz	r3, 14f2 <saveData(short)+0x136>
        status=storeData(status);
    14c2:	4630      	mov	r0, r6
    }

    return status;
}
    14c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        status=storeData(status);
    14c8:	f7ff bdde 	b.w	1088 <storeData(short)>
      while(queue_isBusy()); //wait if acq writes to queue
    14cc:	f000 f8a4 	bl	1618 <queue_isBusy()>
    14d0:	4604      	mov	r4, r0
    14d2:	2800      	cmp	r0, #0
    14d4:	d1fa      	bne.n	14cc <saveData(short)+0x110>
      pullData((uint32_t*)tempBuffer1);
    14d6:	4819      	ldr	r0, [pc, #100]	; (153c <saveData(short)+0x180>)
    14d8:	f000 f8e6 	bl	16a8 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer1[ii];
    14dc:	4b1e      	ldr	r3, [pc, #120]	; (1558 <saveData(short)+0x19c>)
    14de:	4a1b      	ldr	r2, [pc, #108]	; (154c <saveData(short)+0x190>)
    14e0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    14e8:	3401      	adds	r4, #1
    14ea:	2c08      	cmp	r4, #8
    14ec:	d1f8      	bne.n	14e0 <saveData(short)+0x124>
    14ee:	f04f 36ff 	mov.w	r6, #4294967295
}
    14f2:	4630      	mov	r0, r6
    14f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14f8:	4d18      	ldr	r5, [pc, #96]	; (155c <saveData(short)+0x1a0>)
    14fa:	f505 57c0 	add.w	r7, r5, #6144	; 0x1800
        { while(queue_isBusy()); //wait if acq writes to queue
    14fe:	f000 f88b 	bl	1618 <queue_isBusy()>
    1502:	4604      	mov	r4, r0
    1504:	2800      	cmp	r0, #0
    1506:	d1fa      	bne.n	14fe <saveData(short)+0x142>
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1508:	4628      	mov	r0, r5
        for(int ii=0; ii<NDBL; ii++)
    150a:	f505 7500 	add.w	r5, r5, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    150e:	f000 f8cb 	bl	16a8 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1512:	42bd      	cmp	r5, r7
    1514:	d1f3      	bne.n	14fe <saveData(short)+0x142>
    1516:	4b0e      	ldr	r3, [pc, #56]	; (1550 <saveData(short)+0x194>)
    1518:	4a0c      	ldr	r2, [pc, #48]	; (154c <saveData(short)+0x190>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    151a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    151e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    1522:	3401      	adds	r4, #1
    1524:	2c08      	cmp	r4, #8
    1526:	d1f8      	bne.n	151a <saveData(short)+0x15e>
    1528:	e7c8      	b.n	14bc <saveData(short)+0x100>
    152a:	bf00      	nop
    152c:	20008c94 	.word	0x20008c94
    1530:	200268b4 	.word	0x200268b4
    1534:	200274c8 	.word	0x200274c8
    1538:	20022f9c 	.word	0x20022f9c
    153c:	2002479c 	.word	0x2002479c
    1540:	20023f9c 	.word	0x20023f9c
    1544:	200086dc 	.word	0x200086dc
    1548:	2002579c 	.word	0x2002579c
    154c:	20026eac 	.word	0x20026eac
    1550:	2000958c 	.word	0x2000958c
    1554:	20026ea4 	.word	0x20026ea4
    1558:	20024798 	.word	0x20024798
    155c:	20009590 	.word	0x20009590
    1560:	200268c4 	.word	0x200268c4
    1564:	20024798 	.word	0x20024798
    1568:	200268c8 	.word	0x200268c8
    156c:	20025f98 	.word	0x20025f98

00001570 <_GLOBAL__sub_I_t_acq>:
  FsVolume() {}
    1570:	4819      	ldr	r0, [pc, #100]	; (15d8 <_GLOBAL__sub_I_t_acq+0x68>)
	SPISettings() : _clock(4000000) {
    1572:	4b1a      	ldr	r3, [pc, #104]	; (15dc <_GLOBAL__sub_I_t_acq+0x6c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1574:	491a      	ldr	r1, [pc, #104]	; (15e0 <_GLOBAL__sub_I_t_acq+0x70>)
SdFs sd;
    1576:	4a1b      	ldr	r2, [pc, #108]	; (15e4 <_GLOBAL__sub_I_t_acq+0x74>)
}
    1578:	b510      	push	{r4, lr}
    157a:	f8c0 34a4 	str.w	r3, [r0, #1188]	; 0x4a4
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    157e:	2329      	movs	r3, #41	; 0x29
    1580:	2400      	movs	r4, #0
    1582:	f8c0 1490 	str.w	r1, [r0, #1168]	; 0x490
    1586:	f880 34ad 	strb.w	r3, [r0, #1197]	; 0x4ad
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    158a:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    158c:	4b16      	ldr	r3, [pc, #88]	; (15e8 <_GLOBAL__sub_I_t_acq+0x78>)
    158e:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    1592:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    1596:	f8c0 448c 	str.w	r4, [r0, #1164]	; 0x48c
  SdioConfig() {}
    159a:	f8a0 4498 	strh.w	r4, [r0, #1176]	; 0x498
  SharedSpiCard() {}
    159e:	f880 44b1 	strb.w	r4, [r0, #1201]	; 0x4b1
  DedicatedSpiCard() {}
    15a2:	f880 44b8 	strb.w	r4, [r0, #1208]	; 0x4b8
    15a6:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    15aa:	f880 44c8 	strb.w	r4, [r0, #1224]	; 0x4c8
SdFs sd;
    15ae:	490f      	ldr	r1, [pc, #60]	; (15ec <_GLOBAL__sub_I_t_acq+0x7c>)
    15b0:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    15b4:	f007 ff6e 	bl	9494 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    15b8:	480d      	ldr	r0, [pc, #52]	; (15f0 <_GLOBAL__sub_I_t_acq+0x80>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15be:	4b0d      	ldr	r3, [pc, #52]	; (15f4 <_GLOBAL__sub_I_t_acq+0x84>)
    15c0:	7304      	strb	r4, [r0, #12]
FsFile file;
    15c2:	4a08      	ldr	r2, [pc, #32]	; (15e4 <_GLOBAL__sub_I_t_acq+0x74>)
    15c4:	6003      	str	r3, [r0, #0]
    15c6:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() {}
    15ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    15ce:	490a      	ldr	r1, [pc, #40]	; (15f8 <_GLOBAL__sub_I_t_acq+0x88>)
}
    15d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    15d4:	f007 bf5e 	b.w	9494 <__aeabi_atexit>
    15d8:	20026fc4 	.word	0x20026fc4
    15dc:	003d0900 	.word	0x003d0900
    15e0:	20000918 	.word	0x20000918
    15e4:	200086ec 	.word	0x200086ec
    15e8:	2000085c 	.word	0x2000085c
    15ec:	00000abd 	.word	0x00000abd
    15f0:	20026e54 	.word	0x20026e54
    15f4:	200008f4 	.word	0x200008f4
    15f8:	00000b41 	.word	0x00000b41

000015fc <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    15fc:	4a04      	ldr	r2, [pc, #16]	; (1610 <getDataCount()+0x14>)
    15fe:	4b05      	ldr	r3, [pc, #20]	; (1614 <getDataCount()+0x18>)
    1600:	6810      	ldr	r0, [r2, #0]
    1602:	681b      	ldr	r3, [r3, #0]
    1604:	1ac0      	subs	r0, r0, r3
    1606:	bf48      	it	mi
    1608:	30c0      	addmi	r0, #192	; 0xc0
    160a:	b280      	uxth	r0, r0
    160c:	4770      	bx	lr
    160e:	bf00      	nop
    1610:	200274a0 	.word	0x200274a0
    1614:	20026ea8 	.word	0x20026ea8

00001618 <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    1618:	4b01      	ldr	r3, [pc, #4]	; (1620 <queue_isBusy()+0x8>)
    161a:	6818      	ldr	r0, [r3, #0]
    161c:	4770      	bx	lr
    161e:	bf00      	nop
    1620:	2000af94 	.word	0x2000af94

00001624 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    1624:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    1626:	4c1b      	ldr	r4, [pc, #108]	; (1694 <pushData(unsigned long*)+0x70>)
    1628:	4a1b      	ldr	r2, [pc, #108]	; (1698 <pushData(unsigned long*)+0x74>)
    162a:	6823      	ldr	r3, [r4, #0]
    162c:	491b      	ldr	r1, [pc, #108]	; (169c <pushData(unsigned long*)+0x78>)
    162e:	3301      	adds	r3, #1
    1630:	680d      	ldr	r5, [r1, #0]
    1632:	fb82 2103 	smull	r2, r1, r2, r3
    1636:	17da      	asrs	r2, r3, #31
    1638:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    163c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1640:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
    1644:	42ab      	cmp	r3, r5
    1646:	d021      	beq.n	168c <pushData(unsigned long*)+0x68>
    //while(busy); 
    queue_busy=1;
    1648:	4e15      	ldr	r6, [pc, #84]	; (16a0 <pushData(unsigned long*)+0x7c>)
    164a:	2201      	movs	r2, #1
    164c:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    164e:	2300      	movs	r3, #0
    1650:	4d14      	ldr	r5, [pc, #80]	; (16a4 <pushData(unsigned long*)+0x80>)
    queue_busy=1;
    1652:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    1654:	6822      	ldr	r2, [r4, #0]
    1656:	f851 0f04 	ldr.w	r0, [r1, #4]!
    165a:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    165e:	3301      	adds	r3, #1
    1660:	2b80      	cmp	r3, #128	; 0x80
    1662:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    1666:	d1f5      	bne.n	1654 <pushData(unsigned long*)+0x30>
    tail = (tail+1)%MAXBUF;
    1668:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    166a:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    166c:	490a      	ldr	r1, [pc, #40]	; (1698 <pushData(unsigned long*)+0x74>)
    166e:	3201      	adds	r2, #1
    1670:	fb81 3102 	smull	r3, r1, r1, r2
    1674:	17d3      	asrs	r3, r2, #31
    1676:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    167a:	2100      	movs	r1, #0
    tail = (tail+1)%MAXBUF;
    167c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1680:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    1684:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    1686:	6031      	str	r1, [r6, #0]
  }
    1688:	bc70      	pop	{r4, r5, r6}
    168a:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    168c:	2000      	movs	r0, #0
  }
    168e:	bc70      	pop	{r4, r5, r6}
    1690:	4770      	bx	lr
    1692:	bf00      	nop
    1694:	200274a0 	.word	0x200274a0
    1698:	2aaaaaab 	.word	0x2aaaaaab
    169c:	20026ea8 	.word	0x20026ea8
    16a0:	2000af94 	.word	0x2000af94
    16a4:	2000af98 	.word	0x2000af98

000016a8 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    16a8:	4b15      	ldr	r3, [pc, #84]	; (1700 <pullData(unsigned long*)+0x58>)
  {
    16aa:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    16ac:	4c15      	ldr	r4, [pc, #84]	; (1704 <pullData(unsigned long*)+0x5c>)
    16ae:	6822      	ldr	r2, [r4, #0]
    16b0:	681b      	ldr	r3, [r3, #0]
    16b2:	429a      	cmp	r2, r3
    16b4:	d021      	beq.n	16fa <pullData(unsigned long*)+0x52>
    //while(busy); 
    queue_busy=1;
    16b6:	4d14      	ldr	r5, [pc, #80]	; (1708 <pullData(unsigned long*)+0x60>)
    16b8:	2201      	movs	r2, #1
    16ba:	1f01      	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    16bc:	2300      	movs	r3, #0
    16be:	4813      	ldr	r0, [pc, #76]	; (170c <pullData(unsigned long*)+0x64>)
    queue_busy=1;
    16c0:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    16c2:	6822      	ldr	r2, [r4, #0]
    16c4:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    16c8:	3301      	adds	r3, #1
    16ca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    16ce:	2b80      	cmp	r3, #128	; 0x80
    16d0:	f841 2f04 	str.w	r2, [r1, #4]!
    16d4:	d1f5      	bne.n	16c2 <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
    16d6:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1;
    16d8:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    16da:	490d      	ldr	r1, [pc, #52]	; (1710 <pullData(unsigned long*)+0x68>)
    16dc:	3201      	adds	r2, #1
    16de:	fb81 3102 	smull	r3, r1, r1, r2
    16e2:	17d3      	asrs	r3, r2, #31
    16e4:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    queue_busy=0;
    16e8:	2100      	movs	r1, #0
    head = (head+1)%MAXBUF;
    16ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16ee:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    16f2:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    16f4:	6029      	str	r1, [r5, #0]
  }
    16f6:	bc30      	pop	{r4, r5}
    16f8:	4770      	bx	lr
    if ( head==tail ) return 0;
    16fa:	2000      	movs	r0, #0
  }
    16fc:	bc30      	pop	{r4, r5}
    16fe:	4770      	bx	lr
    1700:	200274a0 	.word	0x200274a0
    1704:	20026ea8 	.word	0x20026ea8
    1708:	2000af94 	.word	0x2000af94
    170c:	2000af98 	.word	0x2000af98
    1710:	2aaaaaab 	.word	0x2aaaaaab

00001714 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    1714:	4a54      	ldr	r2, [pc, #336]	; (1868 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    1716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    171a:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    171e:	f240 196d 	movw	r9, #365	; 0x16d
    1722:	4e52      	ldr	r6, [pc, #328]	; (186c <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1724:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1726:	4f52      	ldr	r7, [pc, #328]	; (1870 <time2date(unsigned long, datetime_t*)+0x15c>)
    1728:	f8df 8158 	ldr.w	r8, [pc, #344]	; 1884 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    172c:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1730:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1734:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1736:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    173a:	4c4e      	ldr	r4, [pc, #312]	; (1874 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    173c:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    1740:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    1744:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1748:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    174a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    174e:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1750:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    1754:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1758:	4b47      	ldr	r3, [pc, #284]	; (1878 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    175a:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    175e:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1762:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    1764:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1766:	1ae2      	subs	r2, r4, r3
    1768:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    176c:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    176e:	089b      	lsrs	r3, r3, #2
    1770:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1774:	1ae4      	subs	r4, r4, r3
    1776:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1778:	b2c3      	uxtb	r3, r0
    177a:	f240 1c6d 	movw	ip, #365	; 0x16d
    177e:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    1782:	f013 0403 	ands.w	r4, r3, #3
    1786:	fb06 f503 	mul.w	r5, r6, r3
    178a:	d108      	bne.n	179e <time2date(unsigned long, datetime_t*)+0x8a>
    178c:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    1790:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    1794:	d303      	bcc.n	179e <time2date(unsigned long, datetime_t*)+0x8a>
    1796:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    179a:	bf38      	it	cc
    179c:	46cc      	movcc	ip, r9
    179e:	4462      	add	r2, ip
    17a0:	3001      	adds	r0, #1
    17a2:	4596      	cmp	lr, r2
    17a4:	d2e8      	bcs.n	1778 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    17a6:	4d35      	ldr	r5, [pc, #212]	; (187c <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    17a8:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    17aa:	fba5 0503 	umull	r0, r5, r5, r3
    17ae:	b3a4      	cbz	r4, 181a <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    17b0:	096e      	lsrs	r6, r5, #5
    17b2:	2764      	movs	r7, #100	; 0x64
    17b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    17b8:	09ed      	lsrs	r5, r5, #7
    17ba:	fb07 3616 	mls	r6, r7, r6, r3
    17be:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    17c2:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    17c6:	ebae 0e02 	sub.w	lr, lr, r2
    17ca:	2300      	movs	r3, #0
    17cc:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    17ce:	4f2c      	ldr	r7, [pc, #176]	; (1880 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    17d0:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    17d2:	e00a      	b.n	17ea <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    17d4:	f813 c007 	ldrb.w	ip, [r3, r7]
    17d8:	4584      	cmp	ip, r0
    17da:	d837      	bhi.n	184c <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    17dc:	2a0c      	cmp	r2, #12
        time -= monthLength;
    17de:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    17e2:	d012      	beq.n	180a <time2date(unsigned long, datetime_t*)+0xf6>
    17e4:	3201      	adds	r2, #1
    17e6:	3301      	adds	r3, #1
    17e8:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    17ea:	2b01      	cmp	r3, #1
    17ec:	fa5f fe83 	uxtb.w	lr, r3
    17f0:	d1f0      	bne.n	17d4 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    17f2:	b91c      	cbnz	r4, 17fc <time2date(unsigned long, datetime_t*)+0xe8>
    17f4:	b1f6      	cbz	r6, 1834 <time2date(unsigned long, datetime_t*)+0x120>
    17f6:	f04f 0c1d 	mov.w	ip, #29
    17fa:	e001      	b.n	1800 <time2date(unsigned long, datetime_t*)+0xec>
    17fc:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    1800:	4560      	cmp	r0, ip
    1802:	d32d      	bcc.n	1860 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    1804:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1808:	e7ec      	b.n	17e4 <time2date(unsigned long, datetime_t*)+0xd0>
    180a:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    180e:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1810:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    1814:	70c8      	strb	r0, [r1, #3]
  }
    1816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    181a:	2064      	movs	r0, #100	; 0x64
    181c:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    181e:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    1820:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1824:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1828:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    182c:	b14e      	cbz	r6, 1842 <time2date(unsigned long, datetime_t*)+0x12e>
    182e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    1832:	e7c8      	b.n	17c6 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    1834:	2d00      	cmp	r5, #0
    1836:	bf14      	ite	ne
    1838:	f04f 0c1c 	movne.w	ip, #28
    183c:	f04f 0c1d 	moveq.w	ip, #29
    1840:	e7de      	b.n	1800 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    1842:	2d00      	cmp	r5, #0
    1844:	d1bd      	bne.n	17c2 <time2date(unsigned long, datetime_t*)+0xae>
    1846:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    184a:	e7bc      	b.n	17c6 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    184c:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    1850:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1852:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    1856:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    1858:	f881 e002 	strb.w	lr, [r1, #2]
  }
    185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    1860:	f04f 0e02 	mov.w	lr, #2
    1864:	e7d3      	b.n	180e <time2date(unsigned long, datetime_t*)+0xfa>
    1866:	bf00      	nop
    1868:	88888889 	.word	0x88888889
    186c:	c28f5c29 	.word	0xc28f5c29
    1870:	028f5c28 	.word	0x028f5c28
    1874:	aaaaaaab 	.word	0xaaaaaaab
    1878:	24924925 	.word	0x24924925
    187c:	51eb851f 	.word	0x51eb851f
    1880:	20000804 	.word	0x20000804
    1884:	00a3d70a 	.word	0x00a3d70a

00001888 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    1888:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    188a:	4a35      	ldr	r2, [pc, #212]	; (1960 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    188c:	314e      	adds	r1, #78	; 0x4e
    188e:	b2c9      	uxtb	r1, r1
  {
    1890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    1894:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    1898:	b1e1      	cbz	r1, 18d4 <date2time(datetime_t*)+0x4c>
    189a:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    189e:	f240 73b3 	movw	r3, #1971	; 0x7b3
    18a2:	4d30      	ldr	r5, [pc, #192]	; (1964 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    18a4:	4e30      	ldr	r6, [pc, #192]	; (1968 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    18a6:	4f31      	ldr	r7, [pc, #196]	; (196c <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    18a8:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 1978 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    18ac:	4563      	cmp	r3, ip
    18ae:	fb05 f403 	mul.w	r4, r5, r3
    18b2:	d00f      	beq.n	18d4 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    18b4:	f013 0f03 	tst.w	r3, #3
    18b8:	f103 0301 	add.w	r3, r3, #1
    18bc:	d1f6      	bne.n	18ac <date2time(datetime_t*)+0x24>
    18be:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    18c2:	d302      	bcc.n	18ca <date2time(datetime_t*)+0x42>
    18c4:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    18c8:	d3f0      	bcc.n	18ac <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    18ca:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    18cc:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    18ce:	fb05 f403 	mul.w	r4, r5, r3
    18d2:	d1ef      	bne.n	18b4 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    18d4:	f990 e002 	ldrsb.w	lr, [r0, #2]
    18d8:	f1be 0f01 	cmp.w	lr, #1
    18dc:	dd29      	ble.n	1932 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    18de:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    18e2:	4e23      	ldr	r6, [pc, #140]	; (1970 <date2time(datetime_t*)+0xe8>)
    18e4:	2564      	movs	r5, #100	; 0x64
    18e6:	f44f 74c8 	mov.w	r4, #400	; 0x190
    18ea:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    18ee:	f8df 808c 	ldr.w	r8, [pc, #140]	; 197c <date2time(datetime_t*)+0xf4>
    18f2:	4920      	ldr	r1, [pc, #128]	; (1974 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    18f4:	0977      	lsrs	r7, r6, #5
    18f6:	09f6      	lsrs	r6, r6, #7
    18f8:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    18fc:	4d1b      	ldr	r5, [pc, #108]	; (196c <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    18fe:	fb04 3616 	mls	r6, r4, r6, r3
    1902:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    1906:	2301      	movs	r3, #1
    1908:	e007      	b.n	191a <date2time(datetime_t*)+0x92>
    190a:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    190c:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    1910:	3101      	adds	r1, #1
    1912:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1914:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1918:	d00b      	beq.n	1932 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    191a:	2b02      	cmp	r3, #2
    191c:	d1f5      	bne.n	190a <date2time(datetime_t*)+0x82>
    191e:	2c00      	cmp	r4, #0
    1920:	d1f3      	bne.n	190a <date2time(datetime_t*)+0x82>
    1922:	b90f      	cbnz	r7, 1928 <date2time(datetime_t*)+0xa0>
    1924:	2e00      	cmp	r6, #0
    1926:	d1f0      	bne.n	190a <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    1928:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    192a:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    192c:	3101      	adds	r1, #1
    192e:	4573      	cmp	r3, lr
    1930:	d1f3      	bne.n	191a <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    1932:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    1936:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    193a:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    193e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    1942:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    1946:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    1948:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    194c:	f990 1003 	ldrsb.w	r1, [r0, #3]
    1950:	4c06      	ldr	r4, [pc, #24]	; (196c <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    1952:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    1954:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    1956:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    195a:	4410      	add	r0, r2
    195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1960:	01e13380 	.word	0x01e13380
    1964:	c28f5c29 	.word	0xc28f5c29
    1968:	028f5c28 	.word	0x028f5c28
    196c:	00015180 	.word	0x00015180
    1970:	51eb851f 	.word	0x51eb851f
    1974:	20000804 	.word	0x20000804
    1978:	00a3d70a 	.word	0x00a3d70a
    197c:	00263b80 	.word	0x00263b80

00001980 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    1980:	2001      	movs	r0, #1
    1982:	4770      	bx	lr

00001984 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    1984:	b500      	push	{lr}
    1986:	b083      	sub	sp, #12
    1988:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    198a:	f006 f93d 	bl	7c08 <rtc_get>
    198e:	9901      	ldr	r1, [sp, #4]
    1990:	f7ff fec0 	bl	1714 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    1994:	2001      	movs	r0, #1
    1996:	b003      	add	sp, #12
    1998:	f85d fb04 	ldr.w	pc, [sp], #4

0000199c <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	b082      	sub	sp, #8
    19a0:	4614      	mov	r4, r2
    19a2:	460d      	mov	r5, r1
    19a4:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    19a6:	f006 f92f 	bl	7c08 <rtc_get>
    19aa:	4669      	mov	r1, sp
    19ac:	f7ff feb2 	bl	1714 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    19b0:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    19b4:	4608      	mov	r0, r1
    t.month=month;
    19b6:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    19ba:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    19be:	f7ff ff63 	bl	1888 <date2time(datetime_t*)>
    19c2:	f006 f933 	bl	7c2c <rtc_set>
    rtc_set_datetime(&t);
  }
    19c6:	b002      	add	sp, #8
    19c8:	bd70      	pop	{r4, r5, r6, pc}
    19ca:	bf00      	nop

000019cc <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    19cc:	b570      	push	{r4, r5, r6, lr}
    19ce:	b082      	sub	sp, #8
    19d0:	4614      	mov	r4, r2
    19d2:	460d      	mov	r5, r1
    19d4:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    19d6:	f006 f917 	bl	7c08 <rtc_get>
    19da:	4669      	mov	r1, sp
    19dc:	f7ff fe9a 	bl	1714 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    19e0:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    19e4:	4608      	mov	r0, r1
    t.min=minutes;
    19e6:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    19ea:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    19ee:	f7ff ff4b 	bl	1888 <date2time(datetime_t*)>
    19f2:	f006 f91b 	bl	7c2c <rtc_set>
    rtc_set_datetime(&t);
  }
    19f6:	b002      	add	sp, #8
    19f8:	bd70      	pop	{r4, r5, r6, pc}
    19fa:	bf00      	nop

000019fc <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    19fc:	b510      	push	{r4, lr}
    19fe:	4604      	mov	r4, r0
    1a00:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a02:	f007 fad3 	bl	8fac <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1a06:	2800      	cmp	r0, #0
    1a08:	d0fb      	beq.n	1a02 <menuGetInt32(long*) [clone .isra.0]+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1a0a:	210d      	movs	r1, #13
    1a0c:	aa02      	add	r2, sp, #8
    1a0e:	2328      	movs	r3, #40	; 0x28
    1a10:	480d      	ldr	r0, [pc, #52]	; (1a48 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a12:	f005 fd87 	bl	7524 <Stream::readBytesUntil(char, char*, unsigned int)>
    1a16:	4603      	mov	r3, r0
  buffer[count]=0;
    1a18:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1a1a:	a802      	add	r0, sp, #8
    1a1c:	3330      	adds	r3, #48	; 0x30
    1a1e:	446b      	add	r3, sp
    1a20:	f803 2c28 	strb.w	r2, [r3, #-40]
    1a24:	f00a f98c 	bl	bd40 <strlen>
    1a28:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a2a:	a802      	add	r0, sp, #8
    1a2c:	f007 fb28 	bl	9080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a30:	4805      	ldr	r0, [pc, #20]	; (1a48 <menuGetInt32(long*) [clone .isra.0]+0x4c>)
    1a32:	f005 fc83 	bl	733c <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1a36:	aa01      	add	r2, sp, #4
    1a38:	4904      	ldr	r1, [pc, #16]	; (1a4c <menuGetInt32(long*) [clone .isra.0]+0x50>)
    1a3a:	a802      	add	r0, sp, #8
    1a3c:	f009 fc60 	bl	b300 <sscanf>
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	6023      	str	r3, [r4, #0]
  return 1;
}
    1a44:	b00c      	add	sp, #48	; 0x30
    1a46:	bd10      	pop	{r4, pc}
    1a48:	200086cc 	.word	0x200086cc
    1a4c:	2000072c 	.word	0x2000072c

00001a50 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1a50:	b510      	push	{r4, lr}
    1a52:	4604      	mov	r4, r0
    1a54:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a56:	f007 faa9 	bl	8fac <usb_serial_available>
  while(!Serial.available()) continue;
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d0fb      	beq.n	1a56 <menuGetInt16(short*) [clone .isra.0]+0x6>
  count = Serial.readBytesUntil('\r',buffer,40);
    1a5e:	210d      	movs	r1, #13
    1a60:	aa02      	add	r2, sp, #8
    1a62:	2328      	movs	r3, #40	; 0x28
    1a64:	480d      	ldr	r0, [pc, #52]	; (1a9c <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1a66:	f005 fd5d 	bl	7524 <Stream::readBytesUntil(char, char*, unsigned int)>
    1a6a:	4603      	mov	r3, r0
  buffer[count]=0;
    1a6c:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1a6e:	a802      	add	r0, sp, #8
    1a70:	3330      	adds	r3, #48	; 0x30
    1a72:	446b      	add	r3, sp
    1a74:	f803 2c28 	strb.w	r2, [r3, #-40]
    1a78:	f00a f962 	bl	bd40 <strlen>
    1a7c:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a7e:	a802      	add	r0, sp, #8
    1a80:	f007 fafe 	bl	9080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a84:	4805      	ldr	r0, [pc, #20]	; (1a9c <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    1a86:	f005 fc59 	bl	733c <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1a8a:	aa01      	add	r2, sp, #4
    1a8c:	4904      	ldr	r1, [pc, #16]	; (1aa0 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    1a8e:	a802      	add	r0, sp, #8
    1a90:	f009 fc36 	bl	b300 <sscanf>
    1a94:	9b01      	ldr	r3, [sp, #4]
    1a96:	8023      	strh	r3, [r4, #0]
}
    1a98:	b00c      	add	sp, #48	; 0x30
    1a9a:	bd10      	pop	{r4, pc}
    1a9c:	200086cc 	.word	0x200086cc
    1aa0:	2000072c 	.word	0x2000072c

00001aa4 <menuGet3Int(int*, int*, int*) [clone .isra.0]>:

static int menuGet3Int(int *val1, int *val2, int *val3)
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	4606      	mov	r6, r0
    1aa8:	b090      	sub	sp, #64	; 0x40
    1aaa:	460c      	mov	r4, r1
    1aac:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    1aae:	f007 fa7d 	bl	8fac <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d0fb      	beq.n	1aae <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1ab6:	aa06      	add	r2, sp, #24
    1ab8:	210d      	movs	r1, #13
    1aba:	2328      	movs	r3, #40	; 0x28
    1abc:	4810      	ldr	r0, [pc, #64]	; (1b00 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1abe:	f005 fd31 	bl	7524 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1ac2:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1ac6:	eb0d 0003 	add.w	r0, sp, r3
    1aca:	2300      	movs	r3, #0
    1acc:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    1ad0:	a806      	add	r0, sp, #24
    1ad2:	f00a f935 	bl	bd40 <strlen>
    1ad6:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ad8:	a806      	add	r0, sp, #24
    1ada:	f007 fad1 	bl	9080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ade:	4808      	ldr	r0, [pc, #32]	; (1b00 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1ae0:	f005 fc2c 	bl	733c <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1ae4:	f10d 0317 	add.w	r3, sp, #23
    1ae8:	4632      	mov	r2, r6
    1aea:	4906      	ldr	r1, [pc, #24]	; (1b04 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    1aec:	a806      	add	r0, sp, #24
    1aee:	9400      	str	r4, [sp, #0]
    1af0:	e9cd 3501 	strd	r3, r5, [sp, #4]
    1af4:	f10d 0316 	add.w	r3, sp, #22
    1af8:	f009 fc02 	bl	b300 <sscanf>
}
    1afc:	b010      	add	sp, #64	; 0x40
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	200086cc 	.word	0x200086cc
    1b04:	20000724 	.word	0x20000724

00001b08 <menu1()>:

void menu1(void)
{   // have ':'
    1b08:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1b0a:	f007 fa4f 	bl	8fac <usb_serial_available>
    while(!Serial.available()) ;
    1b0e:	2800      	cmp	r0, #0
    1b10:	d0fb      	beq.n	1b0a <menu1()+0x2>
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
    1b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    1b16:	f007 ba8d 	b.w	9034 <usb_serial_getchar>
    1b1a:	bf00      	nop

00001b1c <menu2()>:

void menu2(void)
{   // have '?'
    1b1c:	b510      	push	{r4, lr}
    1b1e:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1b20:	f007 fa44 	bl	8fac <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1b24:	2800      	cmp	r0, #0
    1b26:	d0fb      	beq.n	1b20 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1b28:	f007 fa84 	bl	9034 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1b2c:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1b2e:	2870      	cmp	r0, #112	; 0x70
    1b30:	d018      	beq.n	1b64 <menu2()+0x48>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    1b32:	2864      	cmp	r0, #100	; 0x64
    1b34:	d065      	beq.n	1c02 <menu2()+0xe6>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    1b36:	3861      	subs	r0, #97	; 0x61
    1b38:	2813      	cmp	r0, #19
    1b3a:	d80d      	bhi.n	1b58 <menu2()+0x3c>
    1b3c:	e8df f000 	tbb	[pc, r0]
    1b40:	0c530c70 	.word	0x0c530c70
    1b44:	0c0c7f0c 	.word	0x0c0c7f0c
    1b48:	0c0c0c0c 	.word	0x0c0c0c0c
    1b4c:	0c0c0c0c 	.word	0x0c0c0c0c
    1b50:	928c0c0c 	.word	0x928c0c0c
    1b54:	f007 fa6e 	bl	9034 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1b58:	f007 fa28 	bl	8fac <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1b5c:	2800      	cmp	r0, #0
    1b5e:	d1f9      	bne.n	1b54 <menu2()+0x38>

}
    1b60:	b008      	add	sp, #32
    1b62:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    1b64:	a806      	add	r0, sp, #24
    1b66:	f7ff ff0d 	bl	1984 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1b6a:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1b6e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1b72:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1b76:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1b7a:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1b7e:	9000      	str	r0, [sp, #0]
    1b80:	4840      	ldr	r0, [pc, #256]	; (1c84 <menu2()+0x168>)
    1b82:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1b86:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1b8a:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1b8e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1b92:	493d      	ldr	r1, [pc, #244]	; (1c88 <menu2()+0x16c>)
    1b94:	f005 fbee 	bl	7374 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b98:	210c      	movs	r1, #12
    1b9a:	483c      	ldr	r0, [pc, #240]	; (1c8c <menu2()+0x170>)
    1b9c:	f007 fa70 	bl	9080 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1ba0:	493b      	ldr	r1, [pc, #236]	; (1c90 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1ba2:	220a      	movs	r2, #10
    1ba4:	2300      	movs	r3, #0
    1ba6:	6809      	ldr	r1, [r1, #0]
    1ba8:	4836      	ldr	r0, [pc, #216]	; (1c84 <menu2()+0x168>)
    1baa:	f005 fbf1 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1bae:	4835      	ldr	r0, [pc, #212]	; (1c84 <menu2()+0x168>)
    1bb0:	f005 fbc4 	bl	733c <Print::println()>
    1bb4:	210c      	movs	r1, #12
    1bb6:	4837      	ldr	r0, [pc, #220]	; (1c94 <menu2()+0x178>)
    1bb8:	f007 fa62 	bl	9080 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1bbc:	4b36      	ldr	r3, [pc, #216]	; (1c98 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1bbe:	4831      	ldr	r0, [pc, #196]	; (1c84 <menu2()+0x168>)
    1bc0:	6819      	ldr	r1, [r3, #0]
    1bc2:	f005 fbaf 	bl	7324 <Print::print(long)>
    1bc6:	482f      	ldr	r0, [pc, #188]	; (1c84 <menu2()+0x168>)
    1bc8:	f005 fbb8 	bl	733c <Print::println()>
    1bcc:	210c      	movs	r1, #12
    1bce:	4833      	ldr	r0, [pc, #204]	; (1c9c <menu2()+0x180>)
    1bd0:	f007 fa56 	bl	9080 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1bd4:	4b32      	ldr	r3, [pc, #200]	; (1ca0 <menu2()+0x184>)
	size_t print(int n)				{ return print((long)n); }
    1bd6:	482b      	ldr	r0, [pc, #172]	; (1c84 <menu2()+0x168>)
    1bd8:	f9b3 1000 	ldrsh.w	r1, [r3]
    1bdc:	f005 fba2 	bl	7324 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1be0:	4828      	ldr	r0, [pc, #160]	; (1c84 <menu2()+0x168>)
    1be2:	f005 fbab 	bl	733c <Print::println()>
    1be6:	210c      	movs	r1, #12
    1be8:	482e      	ldr	r0, [pc, #184]	; (1ca4 <menu2()+0x188>)
    1bea:	f007 fa49 	bl	9080 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1bee:	4b2e      	ldr	r3, [pc, #184]	; (1ca8 <menu2()+0x18c>)
	size_t print(int n)				{ return print((long)n); }
    1bf0:	f9b3 1000 	ldrsh.w	r1, [r3]
    1bf4:	4823      	ldr	r0, [pc, #140]	; (1c84 <menu2()+0x168>)
    1bf6:	f005 fb95 	bl	7324 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1bfa:	4822      	ldr	r0, [pc, #136]	; (1c84 <menu2()+0x168>)
    1bfc:	f005 fb9e 	bl	733c <Print::println()>
    1c00:	e7aa      	b.n	1b58 <menu2()+0x3c>
      rtc_get_datetime(&t);
    1c02:	a806      	add	r0, sp, #24
    1c04:	f7ff febe 	bl	1984 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1c08:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1c0c:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1c10:	9000      	str	r0, [sp, #0]
    1c12:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1c16:	4925      	ldr	r1, [pc, #148]	; (1cac <menu2()+0x190>)
    1c18:	481a      	ldr	r0, [pc, #104]	; (1c84 <menu2()+0x168>)
    1c1a:	f005 fbab 	bl	7374 <Print::printf(char const*, ...)>
    1c1e:	e79b      	b.n	1b58 <menu2()+0x3c>
    1c20:	210c      	movs	r1, #12
    1c22:	481a      	ldr	r0, [pc, #104]	; (1c8c <menu2()+0x170>)
    1c24:	f007 fa2c 	bl	9080 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    1c28:	4919      	ldr	r1, [pc, #100]	; (1c90 <menu2()+0x174>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1c2a:	2300      	movs	r3, #0
    1c2c:	220a      	movs	r2, #10
    1c2e:	6809      	ldr	r1, [r1, #0]
    1c30:	4814      	ldr	r0, [pc, #80]	; (1c84 <menu2()+0x168>)
    1c32:	f005 fbad 	bl	7390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1c36:	4813      	ldr	r0, [pc, #76]	; (1c84 <menu2()+0x168>)
    1c38:	f005 fb80 	bl	733c <Print::println()>
    1c3c:	e78c      	b.n	1b58 <menu2()+0x3c>
    1c3e:	210c      	movs	r1, #12
    1c40:	4814      	ldr	r0, [pc, #80]	; (1c94 <menu2()+0x178>)
    1c42:	f007 fa1d 	bl	9080 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1c46:	4b14      	ldr	r3, [pc, #80]	; (1c98 <menu2()+0x17c>)
	size_t println(long n)				{ return print(n) + println(); }
    1c48:	480e      	ldr	r0, [pc, #56]	; (1c84 <menu2()+0x168>)
    1c4a:	6819      	ldr	r1, [r3, #0]
    1c4c:	f005 fb6a 	bl	7324 <Print::print(long)>
    1c50:	480c      	ldr	r0, [pc, #48]	; (1c84 <menu2()+0x168>)
    1c52:	f005 fb73 	bl	733c <Print::println()>
    1c56:	e77f      	b.n	1b58 <menu2()+0x3c>
    1c58:	210c      	movs	r1, #12
    1c5a:	4810      	ldr	r0, [pc, #64]	; (1c9c <menu2()+0x180>)
    1c5c:	f007 fa10 	bl	9080 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1c60:	4b0f      	ldr	r3, [pc, #60]	; (1ca0 <menu2()+0x184>)
    1c62:	e7c5      	b.n	1bf0 <menu2()+0xd4>
      rtc_get_datetime(&t);
    1c64:	a806      	add	r0, sp, #24
    1c66:	f7ff fe8d 	bl	1984 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1c6a:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1c6e:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1c72:	9000      	str	r0, [sp, #0]
    1c74:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1c78:	490d      	ldr	r1, [pc, #52]	; (1cb0 <menu2()+0x194>)
    1c7a:	4802      	ldr	r0, [pc, #8]	; (1c84 <menu2()+0x168>)
    1c7c:	f005 fb7a 	bl	7374 <Print::printf(char const*, ...)>
    1c80:	e76a      	b.n	1b58 <menu2()+0x3c>
    1c82:	bf00      	nop
    1c84:	200086cc 	.word	0x200086cc
    1c88:	20000504 	.word	0x20000504
    1c8c:	20000528 	.word	0x20000528
    1c90:	20008c94 	.word	0x20008c94
    1c94:	20000538 	.word	0x20000538
    1c98:	20008c90 	.word	0x20008c90
    1c9c:	20000548 	.word	0x20000548
    1ca0:	200274ce 	.word	0x200274ce
    1ca4:	20000558 	.word	0x20000558
    1ca8:	200274c8 	.word	0x200274c8
    1cac:	20000568 	.word	0x20000568
    1cb0:	20000584 	.word	0x20000584

00001cb4 <menu3()>:

void menu3(void)
{   // have '!'
    1cb4:	b510      	push	{r4, lr}
    1cb6:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
    1cb8:	f007 f978 	bl	8fac <usb_serial_available>

    while(!Serial.available()) ;
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0fb      	beq.n	1cb8 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1cc0:	f007 f9b8 	bl	9034 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1cc4:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1cc6:	2864      	cmp	r0, #100	; 0x64
    1cc8:	d00e      	beq.n	1ce8 <menu3()+0x34>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1cca:	3861      	subs	r0, #97	; 0x61
    1ccc:	2813      	cmp	r0, #19
    1cce:	d815      	bhi.n	1cfc <menu3()+0x48>
    1cd0:	e8df f000 	tbb	[pc, r0]
    1cd4:	14281422 	.word	0x14281422
    1cd8:	14142e14 	.word	0x14142e14
    1cdc:	14141414 	.word	0x14141414
    1ce0:	14141414 	.word	0x14141414
    1ce4:	16381414 	.word	0x16381414
      menuGet3Int(&year,&month,&day);
    1ce8:	aa03      	add	r2, sp, #12
    1cea:	a902      	add	r1, sp, #8
    1cec:	a801      	add	r0, sp, #4
    1cee:	f7ff fed9 	bl	1aa4 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1cf2:	9801      	ldr	r0, [sp, #4]
    1cf4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1cf8:	f7ff fe50 	bl	199c <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1cfc:	b004      	add	sp, #16
    1cfe:	bd10      	pop	{r4, pc}
      menuGet3Int(&hour,&minutes,&seconds);
    1d00:	aa03      	add	r2, sp, #12
    1d02:	a902      	add	r1, sp, #8
    1d04:	a801      	add	r0, sp, #4
    1d06:	f7ff fecd 	bl	1aa4 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1d0a:	9801      	ldr	r0, [sp, #4]
    1d0c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    1d10:	f7ff fe5c 	bl	19cc <rtcSetTime(int, int, int)>
}
    1d14:	b004      	add	sp, #16
    1d16:	bd10      	pop	{r4, pc}
      menuGetInt32((int32_t *)&t_acq);
    1d18:	4810      	ldr	r0, [pc, #64]	; (1d5c <menu3()+0xa8>)
}
    1d1a:	b004      	add	sp, #16
    1d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_acq);
    1d20:	f7ff be6c 	b.w	19fc <menuGetInt32(long*) [clone .isra.0]>
      menuGetInt16(&proc);
    1d24:	480e      	ldr	r0, [pc, #56]	; (1d60 <menu3()+0xac>)
}
    1d26:	b004      	add	sp, #16
    1d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1d2c:	f7ff be90 	b.w	1a50 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt32(&fsamp);
    1d30:	4c0c      	ldr	r4, [pc, #48]	; (1d64 <menu3()+0xb0>)
    1d32:	4620      	mov	r0, r4
    1d34:	f7ff fe62 	bl	19fc <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1d38:	6820      	ldr	r0, [r4, #0]
}
    1d3a:	b004      	add	sp, #16
    1d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1d40:	f7fe bd34 	b.w	7ac <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1d44:	4c08      	ldr	r4, [pc, #32]	; (1d68 <menu3()+0xb4>)
    1d46:	4620      	mov	r0, r4
    1d48:	f7ff fe82 	bl	1a50 <menuGetInt16(short*) [clone .isra.0]>
    1d4c:	f9b4 3000 	ldrsh.w	r3, [r4]
    1d50:	2b00      	cmp	r3, #0
    1d52:	dad3      	bge.n	1cfc <menu3()+0x48>
    1d54:	2300      	movs	r3, #0
    1d56:	8023      	strh	r3, [r4, #0]
    1d58:	e7d0      	b.n	1cfc <menu3()+0x48>
    1d5a:	bf00      	nop
    1d5c:	20008c94 	.word	0x20008c94
    1d60:	200274c8 	.word	0x200274c8
    1d64:	20008c90 	.word	0x20008c90
    1d68:	200274ce 	.word	0x200274ce

00001d6c <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1d6c:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1d6e:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1d72:	b084      	sub	sp, #16
    1d74:	468c      	mov	ip, r1
    1d76:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1d78:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1d7a:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1d7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1d80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    1d84:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1d88:	4629      	mov	r1, r5
    1d8a:	6a20      	ldr	r0, [r4, #32]
    1d8c:	f001 f934 	bl	2ff8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1d90:	2801      	cmp	r0, #1
    1d92:	d106      	bne.n	1da2 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1d94:	4632      	mov	r2, r6
    1d96:	4629      	mov	r1, r5
    1d98:	6a20      	ldr	r0, [r4, #32]
    1d9a:	f001 f911 	bl	2fc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1d9e:	b004      	add	sp, #16
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1da2:	2000      	movs	r0, #0
}
    1da4:	b004      	add	sp, #16
    1da6:	bd70      	pop	{r4, r5, r6, pc}

00001da8 <ExFatFile::close()>:
bool ExFatFile::close() {
    1da8:	b510      	push	{r4, lr}
    1daa:	4604      	mov	r4, r0
  bool rtn = sync();
    1dac:	f000 fcfa 	bl	27a4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1db0:	2300      	movs	r3, #0
    1db2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1db6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1dba:	bd10      	pop	{r4, pc}

00001dbc <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1dbc:	b538      	push	{r3, r4, r5, lr}
    1dbe:	460d      	mov	r5, r1
  if (isOpen()) {
    1dc0:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1dc4:	b109      	cbz	r1, 1dca <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    1dc6:	2000      	movs	r0, #0
}
    1dc8:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1dca:	2238      	movs	r2, #56	; 0x38
    1dcc:	4604      	mov	r4, r0
    1dce:	f009 fc1d 	bl	b60c <memset>
  m_flags = FILE_FLAG_READ;
    1dd2:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1dd4:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1dd6:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1dd8:	4618      	mov	r0, r3
    1dda:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1dde:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1de2:	bd38      	pop	{r3, r4, r5, pc}

00001de4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    1de4:	b4f0      	push	{r4, r5, r6, r7}
    1de6:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1de8:	7809      	ldrb	r1, [r1, #0]
    1dea:	2920      	cmp	r1, #32
    1dec:	d103      	bne.n	1df6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1dee:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1df2:	2c20      	cmp	r4, #32
    1df4:	d0fb      	beq.n	1dee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1df6:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1df8:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1dfa:	782c      	ldrb	r4, [r5, #0]
    1dfc:	2c2f      	cmp	r4, #47	; 0x2f
    1dfe:	d011      	beq.n	1e24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e00:	b184      	cbz	r4, 1e24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e02:	1c6e      	adds	r6, r5, #1
    1e04:	2c3c      	cmp	r4, #60	; 0x3c
    1e06:	4f1d      	ldr	r7, [pc, #116]	; (1e7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    1e08:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1e0a:	d82a      	bhi.n	1e62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1e0c:	2c21      	cmp	r4, #33	; 0x21
    1e0e:	d812      	bhi.n	1e36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1e10:	f104 3cff 	add.w	ip, r4, #4294967295
    1e14:	f1bc 0f1e 	cmp.w	ip, #30
    1e18:	d816      	bhi.n	1e48 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    1e1a:	2000      	movs	r0, #0
    1e1c:	bcf0      	pop	{r4, r5, r6, r7}
    1e1e:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    1e20:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1e24:	2c20      	cmp	r4, #32
    1e26:	d0fb      	beq.n	1e20 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1e28:	2c2f      	cmp	r4, #47	; 0x2f
    1e2a:	d0f9      	beq.n	1e20 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1e2c:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1e2e:	4611      	mov	r1, r2
}
    1e30:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1e32:	f000 bfb3 	b.w	2d9c <ExFatFile::hashName(ExName_t*)>
    1e36:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1e3a:	fa5f fc8c 	uxtb.w	ip, ip
    1e3e:	fa27 fc0c 	lsr.w	ip, r7, ip
    1e42:	f01c 0f01 	tst.w	ip, #1
    1e46:	d1e8      	bne.n	1e1a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1e48:	2c2e      	cmp	r4, #46	; 0x2e
    1e4a:	d001      	beq.n	1e50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1e4c:	2c20      	cmp	r4, #32
    1e4e:	d10d      	bne.n	1e6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    1e50:	f816 4b01 	ldrb.w	r4, [r6], #1
    1e54:	2c00      	cmp	r4, #0
    1e56:	d0e5      	beq.n	1e24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1e58:	2c2f      	cmp	r4, #47	; 0x2f
    1e5a:	d0e3      	beq.n	1e24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1e5c:	2c3c      	cmp	r4, #60	; 0x3c
    1e5e:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1e60:	d9d4      	bls.n	1e0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1e62:	2c5c      	cmp	r4, #92	; 0x5c
    1e64:	d0d9      	beq.n	1e1a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1e66:	d903      	bls.n	1e70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    1e68:	2c7c      	cmp	r4, #124	; 0x7c
    1e6a:	d0d6      	beq.n	1e1a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1e6c:	6096      	str	r6, [r2, #8]
    1e6e:	e7ef      	b.n	1e50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1e70:	3c3e      	subs	r4, #62	; 0x3e
    1e72:	2c01      	cmp	r4, #1
    1e74:	d8fa      	bhi.n	1e6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    1e76:	2000      	movs	r0, #0
    1e78:	bcf0      	pop	{r4, r5, r6, r7}
    1e7a:	4770      	bx	lr
    1e7c:	05002101 	.word	0x05002101

00001e80 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    1e84:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1e88:	b083      	sub	sp, #12
    1e8a:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1e8c:	07dc      	lsls	r4, r3, #31
    1e8e:	d574      	bpl.n	1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1e90:	0658      	lsls	r0, r3, #25
    1e92:	460f      	mov	r7, r1
    1e94:	4690      	mov	r8, r2
    1e96:	f140 80b0 	bpl.w	1ffa <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1e9a:	e9d5 2300 	ldrd	r2, r3, [r5]
    1e9e:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1ea2:	eb18 0402 	adds.w	r4, r8, r2
    1ea6:	f143 0300 	adc.w	r3, r3, #0
    1eaa:	42a1      	cmp	r1, r4
    1eac:	eb70 0303 	sbcs.w	r3, r0, r3
    1eb0:	f0c0 80a9 	bcc.w	2006 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1eb4:	f1b8 0f00 	cmp.w	r8, #0
    1eb8:	d05b      	beq.n	1f72 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1eba:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1ebc:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1ec0:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1ec4:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1ec8:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1ecc:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1ece:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1ed2:	2c00      	cmp	r4, #0
    1ed4:	d170      	bne.n	1fb8 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1ed6:	4313      	orrs	r3, r2
    1ed8:	d170      	bne.n	1fbc <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1eda:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1ede:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1ee0:	bf4c      	ite	mi
    1ee2:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1ee6:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1ee8:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1eea:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1eee:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1ef0:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1ef4:	0a63      	lsrs	r3, r4, #9
    1ef6:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1ef8:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1efc:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    1efe:	f1bb 0f00 	cmp.w	fp, #0
    1f02:	d145      	bne.n	1f90 <ExFatFile::read(void*, unsigned int)+0x110>
    1f04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1f08:	d342      	bcc.n	1f90 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    1f0a:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    1f0e:	4291      	cmp	r1, r2
    1f10:	d03e      	beq.n	1f90 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    1f12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1f16:	d358      	bcc.n	1fca <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    1f18:	f04f 0b01 	mov.w	fp, #1
    1f1c:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1f20:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1f24:	0a73      	lsrs	r3, r6, #9
    1f26:	459b      	cmp	fp, r3
    1f28:	bf28      	it	cs
    1f2a:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1f2c:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1f2e:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1f32:	d80a      	bhi.n	1f4a <ExFatFile::read(void*, unsigned int)+0xca>
    1f34:	eb01 030b 	add.w	r3, r1, fp
    1f38:	429a      	cmp	r2, r3
    1f3a:	d206      	bcs.n	1f4a <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1f3c:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f40:	9101      	str	r1, [sp, #4]
    1f42:	f004 ff89 	bl	6e58 <FsCache::sync()>
    1f46:	9901      	ldr	r1, [sp, #4]
    1f48:	b1b8      	cbz	r0, 1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1f4a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1f4e:	465b      	mov	r3, fp
    1f50:	6802      	ldr	r2, [r0, #0]
    1f52:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1f56:	463a      	mov	r2, r7
    1f58:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1f5a:	b170      	cbz	r0, 1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1f5c:	4623      	mov	r3, r4
    dst += n;
    1f5e:	4427      	add	r7, r4
    m_curPosition += n;
    1f60:	e9d5 1200 	ldrd	r1, r2, [r5]
    1f64:	185b      	adds	r3, r3, r1
    1f66:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1f6a:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1f6c:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1f70:	d1a8      	bne.n	1ec4 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1f72:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    1f74:	b003      	add	sp, #12
    1f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1f7a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1f7e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1f82:	f043 0302 	orr.w	r3, r3, #2
    1f86:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1f8a:	b003      	add	sp, #12
    1f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1f90:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1f94:	2200      	movs	r2, #0
    1f96:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1f9a:	42b4      	cmp	r4, r6
    1f9c:	bf28      	it	cs
    1f9e:	4634      	movcs	r4, r6
    1fa0:	f004 ff86 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1fa4:	2800      	cmp	r0, #0
    1fa6:	d0e8      	beq.n	1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1fa8:	eb00 010b 	add.w	r1, r0, fp
    1fac:	4622      	mov	r2, r4
    1fae:	4638      	mov	r0, r7
    1fb0:	f005 fd5c 	bl	7a6c <memcpy>
    m_curPosition += n;
    1fb4:	4623      	mov	r3, r4
    1fb6:	e7d2      	b.n	1f5e <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1fb8:	69aa      	ldr	r2, [r5, #24]
    1fba:	e796      	b.n	1eea <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1fbc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1fc0:	065b      	lsls	r3, r3, #25
    1fc2:	d50e      	bpl.n	1fe2 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1fc4:	69aa      	ldr	r2, [r5, #24]
    1fc6:	3201      	adds	r2, #1
    1fc8:	e78e      	b.n	1ee8 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1fca:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1fce:	463a      	mov	r2, r7
    1fd0:	6803      	ldr	r3, [r0, #0]
    1fd2:	691b      	ldr	r3, [r3, #16]
    1fd4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d0cf      	beq.n	1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
    1fda:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1fde:	461c      	mov	r4, r3
    1fe0:	e7bd      	b.n	1f5e <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1fe2:	464a      	mov	r2, r9
    1fe4:	4650      	mov	r0, sl
    1fe6:	69a9      	ldr	r1, [r5, #24]
    1fe8:	f001 f848 	bl	307c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1fec:	2800      	cmp	r0, #0
    1fee:	dbc4      	blt.n	1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1ff0:	d00c      	beq.n	200c <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1ff2:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1ff6:	69aa      	ldr	r2, [r5, #24]
    1ff8:	e777      	b.n	1eea <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1ffa:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1ffe:	0719      	lsls	r1, r3, #28
    2000:	f57f af58 	bpl.w	1eb4 <ExFatFile::read(void*, unsigned int)+0x34>
    2004:	e749      	b.n	1e9a <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    2006:	eba1 0802 	sub.w	r8, r1, r2
    200a:	e753      	b.n	1eb4 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    200c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2010:	f013 0f50 	tst.w	r3, #80	; 0x50
    2014:	d0b1      	beq.n	1f7a <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    2016:	eba8 0806 	sub.w	r8, r8, r6
    201a:	4640      	mov	r0, r8
    201c:	e7aa      	b.n	1f74 <ExFatFile::read(void*, unsigned int)+0xf4>
    201e:	bf00      	nop

00002020 <ExFatFile::peek()>:
int ExFatFile::peek() {
    2020:	b5f0      	push	{r4, r5, r6, r7, lr}
    2022:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2024:	2201      	movs	r2, #1
    2026:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    2028:	6985      	ldr	r5, [r0, #24]
    202a:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    202e:	e9d0 6700 	ldrd	r6, r7, [r0]
    2032:	f7ff ff25 	bl	1e80 <ExFatFile::read(void*, unsigned int)>
    2036:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    2038:	61a5      	str	r5, [r4, #24]
    203a:	bf0c      	ite	eq
    203c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    2040:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    2044:	e9c4 6700 	strd	r6, r7, [r4]
}
    2048:	b003      	add	sp, #12
    204a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000204c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2050:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    2052:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2056:	b083      	sub	sp, #12
    2058:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    205a:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    205e:	2b00      	cmp	r3, #0
    2060:	d051      	beq.n	2106 <ExFatFile::seekSet(unsigned long long)+0xba>
    2062:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2064:	e9d0 1c00 	ldrd	r1, ip, [r0]
    2068:	45bc      	cmp	ip, r7
    206a:	bf08      	it	eq
    206c:	4291      	cmpeq	r1, r2
    206e:	d05c      	beq.n	212a <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    2070:	ea56 0207 	orrs.w	r2, r6, r7
    2074:	d04d      	beq.n	2112 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    2076:	071d      	lsls	r5, r3, #28
    2078:	d504      	bpl.n	2084 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    207a:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    207e:	42b0      	cmp	r0, r6
    2080:	41ba      	sbcs	r2, r7
    2082:	d340      	bcc.n	2106 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    2084:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2088:	1e75      	subs	r5, r6, #1
    208a:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    208e:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2090:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2094:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    2098:	3209      	adds	r2, #9
    209a:	b2d2      	uxtb	r2, r2
    209c:	f1c2 0e20 	rsb	lr, r2, #32
    20a0:	40d5      	lsrs	r5, r2
    20a2:	f1a2 0920 	sub.w	r9, r2, #32
    20a6:	fa00 fb0e 	lsl.w	fp, r0, lr
    20aa:	fa20 f009 	lsr.w	r0, r0, r9
    20ae:	ea45 050b 	orr.w	r5, r5, fp
    20b2:	4305      	orrs	r5, r0
  if (isContiguous()) {
    20b4:	9801      	ldr	r0, [sp, #4]
    20b6:	0640      	lsls	r0, r0, #25
    20b8:	d433      	bmi.n	2122 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    20ba:	1e48      	subs	r0, r1, #1
    20bc:	fa20 f202 	lsr.w	r2, r0, r2
    20c0:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    20c4:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    20c8:	fa00 fe0e 	lsl.w	lr, r0, lr
    20cc:	fa20 f009 	lsr.w	r0, r0, r9
    20d0:	ea42 020e 	orr.w	r2, r2, lr
    20d4:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    20d8:	d001      	beq.n	20de <ExFatFile::seekSet(unsigned long long)+0x92>
    20da:	4295      	cmp	r5, r2
    20dc:	d229      	bcs.n	2132 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    20de:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    20e0:	bf4c      	ite	mi
    20e2:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    20e6:	69e3      	ldrpl	r3, [r4, #28]
    20e8:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    20ea:	f104 0918 	add.w	r9, r4, #24
    20ee:	e006      	b.n	20fe <ExFatFile::seekSet(unsigned long long)+0xb2>
    20f0:	69a1      	ldr	r1, [r4, #24]
    20f2:	3d01      	subs	r5, #1
    20f4:	6a20      	ldr	r0, [r4, #32]
    20f6:	f000 ffc1 	bl	307c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    20fa:	2800      	cmp	r0, #0
    20fc:	dd03      	ble.n	2106 <ExFatFile::seekSet(unsigned long long)+0xba>
    20fe:	464a      	mov	r2, r9
  while (nNew--) {
    2100:	2d00      	cmp	r5, #0
    2102:	d1f5      	bne.n	20f0 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    2104:	e007      	b.n	2116 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    2106:	2000      	movs	r0, #0
  m_curCluster = tmp;
    2108:	f8c4 8018 	str.w	r8, [r4, #24]
}
    210c:	b003      	add	sp, #12
    210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    2112:	2300      	movs	r3, #0
    2114:	6183      	str	r3, [r0, #24]
  return true;
    2116:	2001      	movs	r0, #1
  m_curPosition = pos;
    2118:	e9c4 6700 	strd	r6, r7, [r4]
}
    211c:	b003      	add	sp, #12
    211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    2122:	69e3      	ldr	r3, [r4, #28]
    2124:	442b      	add	r3, r5
    2126:	61a3      	str	r3, [r4, #24]
    goto done;
    2128:	e7f5      	b.n	2116 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    212a:	2001      	movs	r0, #1
}
    212c:	b003      	add	sp, #12
    212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    2132:	1aad      	subs	r5, r5, r2
    2134:	e7d9      	b.n	20ea <ExFatFile::seekSet(unsigned long long)+0x9e>
    2136:	bf00      	nop

00002138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    213c:	4617      	mov	r7, r2
    213e:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    2142:	b08f      	sub	sp, #60	; 0x3c
    2144:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    2146:	2a00      	cmp	r2, #0
    2148:	f040 80d7 	bne.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    214c:	468b      	mov	fp, r1
    214e:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    2152:	f011 0f50 	tst.w	r1, #80	; 0x50
    2156:	f000 80d0 	beq.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    215a:	f003 0103 	and.w	r1, r3, #3
    215e:	469a      	mov	sl, r3
    2160:	2903      	cmp	r1, #3
    2162:	f000 80ca 	beq.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2166:	3101      	adds	r1, #1
    2168:	f003 0008 	and.w	r0, r3, #8
    216c:	ea41 0300 	orr.w	r3, r1, r0
    2170:	9302      	str	r3, [sp, #8]
  if (fname) {
    2172:	2f00      	cmp	r7, #0
    2174:	f000 80cb 	beq.w	230e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    2178:	6939      	ldr	r1, [r7, #16]
    217a:	f101 080e 	add.w	r8, r1, #14
    217e:	49b6      	ldr	r1, [pc, #728]	; (2458 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    2180:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    2184:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    2188:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    218c:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    218e:	f108 0802 	add.w	r8, r8, #2
    2192:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    2196:	d005      	beq.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    2198:	2000      	movs	r0, #0
    219a:	2100      	movs	r1, #0
    m_curCluster = 0;
    219c:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    21a0:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    21a4:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    21a6:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    21a8:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    21aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21ae:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    21b0:	2220      	movs	r2, #32
    21b2:	a906      	add	r1, sp, #24
    21b4:	4658      	mov	r0, fp
    21b6:	f7ff fe63 	bl	1e80 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    21ba:	b300      	cbz	r0, 21fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    21bc:	2820      	cmp	r0, #32
    21be:	f040 809c 	bne.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    21c2:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    21c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    21ca:	2a00      	cmp	r2, #0
    21cc:	f2c0 80a2 	blt.w	2314 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    21d0:	b934      	cbnz	r4, 21e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    21d2:	f8db 2000 	ldr.w	r2, [fp]
    21d6:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    21da:	f8db 2018 	ldr.w	r2, [fp, #24]
    21de:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    21e0:	4544      	cmp	r4, r8
    21e2:	d201      	bcs.n	21e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    21e4:	3401      	adds	r4, #1
    21e6:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    21e8:	2b00      	cmp	r3, #0
    21ea:	f000 8113 	beq.w	2414 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    21ee:	2220      	movs	r2, #32
    21f0:	a906      	add	r1, sp, #24
    21f2:	4658      	mov	r0, fp
      inSet = false;
    21f4:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    21f6:	f7ff fe43 	bl	1e80 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    21fa:	2800      	cmp	r0, #0
    21fc:	d1de      	bne.n	21bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    21fe:	f41a 7f00 	tst.w	sl, #512	; 0x200
    2202:	d07a      	beq.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2204:	9b02      	ldr	r3, [sp, #8]
    2206:	079b      	lsls	r3, r3, #30
    2208:	d577      	bpl.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    220a:	2f00      	cmp	r7, #0
    220c:	d075      	beq.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    220e:	4544      	cmp	r4, r8
    2210:	d217      	bcs.n	2242 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    2212:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2216:	2220      	movs	r2, #32
    2218:	a906      	add	r1, sp, #24
    221a:	4658      	mov	r0, fp
    221c:	f7ff fe30 	bl	1e80 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    2220:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    2222:	2800      	cmp	r0, #0
    2224:	d061      	beq.n	22ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2226:	2820      	cmp	r0, #32
    2228:	d167      	bne.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    222a:	b92c      	cbnz	r4, 2238 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    222c:	f8db 2000 	ldr.w	r2, [fp]
    2230:	f8db a018 	ldr.w	sl, [fp, #24]
    2234:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    2238:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    223a:	45a0      	cmp	r8, r4
    223c:	d8eb      	bhi.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    223e:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    2242:	2238      	movs	r2, #56	; 0x38
    2244:	2100      	movs	r1, #0
    2246:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2248:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    224c:	f009 f9de 	bl	b60c <memset>
  ExFatVolume* volume() const {return m_vol;}
    2250:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    2254:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    2258:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    225a:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    225c:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    225e:	2600      	movs	r6, #0
  m_dirPos = freePos;
    2260:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    2264:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    2268:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    226a:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    226e:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    2270:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    2272:	f1b8 0f00 	cmp.w	r8, #0
    2276:	d033      	beq.n	22e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    2278:	f108 39ff 	add.w	r9, r8, #4294967295
    227c:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    227e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 245c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    2282:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    2286:	2201      	movs	r2, #1
    2288:	4659      	mov	r1, fp
    228a:	4628      	mov	r0, r5
    228c:	f7ff fd6e 	bl	1d6c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    2290:	4604      	mov	r4, r0
    2292:	b390      	cbz	r0, 22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2294:	f990 2000 	ldrsb.w	r2, [r0]
    2298:	2a00      	cmp	r2, #0
    229a:	db2e      	blt.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    229c:	2220      	movs	r2, #32
    229e:	2100      	movs	r1, #0
    22a0:	f009 f9b4 	bl	b60c <memset>
    if (i == 0) {
    22a4:	2e00      	cmp	r6, #0
    22a6:	f000 80bc 	beq.w	2422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    22aa:	f1bb 0f01 	cmp.w	fp, #1
    22ae:	f000 80d7 	beq.w	2460 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    22b2:	23c1      	movs	r3, #193	; 0xc1
    22b4:	46a3      	mov	fp, r4
    22b6:	341e      	adds	r4, #30
    22b8:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    22bc:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    22be:	4638      	mov	r0, r7
    22c0:	b91b      	cbnz	r3, 22ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    22c2:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    22c6:	429a      	cmp	r2, r3
    22c8:	d005      	beq.n	22d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    22ca:	f004 fe19 	bl	6f00 <FsName::get16()>
    22ce:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    22d2:	45a3      	cmp	fp, r4
    22d4:	d1f2      	bne.n	22bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    22d6:	3601      	adds	r6, #1
    22d8:	fa5f fb86 	uxtb.w	fp, r6
    22dc:	45d8      	cmp	r8, fp
    22de:	d8d2      	bhi.n	2286 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    22e0:	4628      	mov	r0, r5
    22e2:	f000 fa5f 	bl	27a4 <ExFatFile::sync()>
    22e6:	4606      	mov	r6, r0
    22e8:	e00d      	b.n	2306 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    22ea:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    22ec:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    22f0:	f000 fa88 	bl	2804 <ExFatFile::addDirCluster()>
    22f4:	2800      	cmp	r0, #0
    22f6:	f040 8091 	bne.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    22fa:	2300      	movs	r3, #0
  return false;
    22fc:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    22fe:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    2302:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    2306:	4630      	mov	r0, r6
    2308:	b00f      	add	sp, #60	; 0x3c
    230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    230e:	f04f 0803 	mov.w	r8, #3
    2312:	e747      	b.n	21a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2314:	bb56      	cbnz	r6, 236c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    2316:	4544      	cmp	r4, r8
    2318:	bf38      	it	cc
    231a:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    231c:	2b85      	cmp	r3, #133	; 0x85
    231e:	f47f af47 	bne.w	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    2322:	4631      	mov	r1, r6
    2324:	2238      	movs	r2, #56	; 0x38
    2326:	4628      	mov	r0, r5
      inSet = true;
    2328:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    232a:	f009 f96f 	bl	b60c <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    232e:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    2332:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2336:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    233a:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    233e:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    2340:	bf58      	it	pl
    2342:	f043 0308 	orrpl.w	r3, r3, #8
    2346:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    234a:	f8db 3000 	ldr.w	r3, [fp]
    234e:	f8db 2020 	ldr.w	r2, [fp, #32]
    2352:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    2354:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    2356:	f8db 2018 	ldr.w	r2, [fp, #24]
    235a:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    235e:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    2362:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    2366:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    236a:	e721      	b.n	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    236c:	2bc0      	cmp	r3, #192	; 0xc0
    236e:	d028      	beq.n	23c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    2370:	2bc1      	cmp	r3, #193	; 0xc1
    2372:	f47f af3c 	bne.w	21ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    2376:	463a      	mov	r2, r7
    2378:	a906      	add	r1, sp, #24
    237a:	4628      	mov	r0, r5
    237c:	f000 fce8 	bl	2d50 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    2380:	b1e8      	cbz	r0, 23be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    2382:	89bb      	ldrh	r3, [r7, #12]
    2384:	b9db      	cbnz	r3, 23be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    2386:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    238a:	429a      	cmp	r2, r3
    238c:	d117      	bne.n	23be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    238e:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    2392:	d1b2      	bne.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    2394:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    2398:	d170      	bne.n	247c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    239a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    239e:	0798      	lsls	r0, r3, #30
    23a0:	d46c      	bmi.n	247c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    23a2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    23a6:	d1a8      	bne.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    23a8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    23ac:	d0ab      	beq.n	2306 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    23ae:	4628      	mov	r0, r5
    23b0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    23b4:	f7ff fe4a 	bl	204c <ExFatFile::seekSet(unsigned long long)>
    23b8:	2800      	cmp	r0, #0
    23ba:	d1a4      	bne.n	2306 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    23bc:	e79d      	b.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    23be:	4606      	mov	r6, r0
    23c0:	e6f6      	b.n	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    23c2:	9b02      	ldr	r3, [sp, #8]
    23c4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    23c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    23cc:	079b      	lsls	r3, r3, #30
    23ce:	d502      	bpl.n	23d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    23d0:	9b03      	ldr	r3, [sp, #12]
    23d2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    23d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23d8:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    23da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    23de:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    23e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    23e6:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    23ea:	2f00      	cmp	r7, #0
    23ec:	d0cf      	beq.n	238e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    23ee:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    23f2:	693a      	ldr	r2, [r7, #16]
    23f4:	81bb      	strh	r3, [r7, #12]
    next = begin;
    23f6:	683b      	ldr	r3, [r7, #0]
    23f8:	607b      	str	r3, [r7, #4]
    23fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
    23fe:	429a      	cmp	r2, r3
    2400:	f47f aef5 	bne.w	21ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    2404:	8abe      	ldrh	r6, [r7, #20]
    2406:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    240a:	1af6      	subs	r6, r6, r3
    240c:	fab6 f686 	clz	r6, r6
    2410:	0976      	lsrs	r6, r6, #5
    2412:	e6cd      	b.n	21b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2414:	2f00      	cmp	r7, #0
    2416:	f47f aef2 	bne.w	21fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    241a:	e76e      	b.n	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    241c:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    2420:	e70b      	b.n	223a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    2422:	2385      	movs	r3, #133	; 0x85
    2424:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    2426:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    242a:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    242e:	f8da 3000 	ldr.w	r3, [sl]
    2432:	2b00      	cmp	r3, #0
    2434:	d046      	beq.n	24c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    2436:	f10d 0213 	add.w	r2, sp, #19
    243a:	f10d 0116 	add.w	r1, sp, #22
    243e:	a805      	add	r0, sp, #20
    2440:	4798      	blx	r3
    2442:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    2446:	8163      	strh	r3, [r4, #10]
    2448:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    244c:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    244e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2452:	7523      	strb	r3, [r4, #20]
    2454:	e73f      	b.n	22d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2456:	bf00      	nop
    2458:	88888889 	.word	0x88888889
    245c:	20026874 	.word	0x20026874
      dirStream->type = EXFAT_TYPE_STREAM;
    2460:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    2462:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    2466:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2468:	9b02      	ldr	r3, [sp, #8]
    246a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    246e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2472:	693b      	ldr	r3, [r7, #16]
    2474:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2476:	8abb      	ldrh	r3, [r7, #20]
    2478:	80a3      	strh	r3, [r4, #4]
}
    247a:	e72c      	b.n	22d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    247c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    2480:	06d9      	lsls	r1, r3, #27
    2482:	f53f af3a 	bmi.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2486:	f013 0101 	ands.w	r1, r3, #1
    248a:	f47f af36 	bne.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    248e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2492:	d089      	beq.n	23a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    2494:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    2498:	0792      	lsls	r2, r2, #30
    249a:	f57f af2e 	bpl.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    249e:	2b00      	cmp	r3, #0
    24a0:	f43f af2b 	beq.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    24a4:	e9d5 3200 	ldrd	r3, r2, [r5]
    24a8:	4313      	orrs	r3, r2
    24aa:	d004      	beq.n	24b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    24ac:	2200      	movs	r2, #0
    24ae:	2300      	movs	r3, #0
    m_curCluster = 0;
    24b0:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    24b2:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    24b6:	4628      	mov	r0, r5
    24b8:	f000 fa98 	bl	29ec <ExFatFile::truncate()>
    24bc:	2800      	cmp	r0, #0
    24be:	f43f af1c 	beq.w	22fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    24c2:	e720      	b.n	2306 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    24c4:	f645 0321 	movw	r3, #22561	; 0x5821
    24c8:	8163      	strh	r3, [r4, #10]
    24ca:	81e3      	strh	r3, [r4, #14]
    24cc:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    24ce:	e702      	b.n	22d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000024d0 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    24d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    24d4:	2500      	movs	r5, #0
    24d6:	b097      	sub	sp, #92	; 0x5c
    24d8:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    24da:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    24de:	9201      	str	r2, [sp, #4]
    24e0:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    24e2:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    24e6:	2b00      	cmp	r3, #0
    24e8:	d13e      	bne.n	2568 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    24ea:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    24ee:	460f      	mov	r7, r1
    24f0:	f013 0f50 	tst.w	r3, #80	; 0x50
    24f4:	d038      	beq.n	2568 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    24f6:	7813      	ldrb	r3, [r2, #0]
    24f8:	4604      	mov	r4, r0
    24fa:	4616      	mov	r6, r2
    24fc:	2b2f      	cmp	r3, #47	; 0x2f
    24fe:	d037      	beq.n	2570 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2500:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    2504:	ab01      	add	r3, sp, #4
    2506:	aa02      	add	r2, sp, #8
    2508:	4631      	mov	r1, r6
    250a:	4620      	mov	r0, r4
    250c:	f7ff fc6a 	bl	1de4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2510:	b350      	cbz	r0, 2568 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    2512:	9e01      	ldr	r6, [sp, #4]
    2514:	7833      	ldrb	r3, [r6, #0]
    2516:	2b00      	cmp	r3, #0
    2518:	d03e      	beq.n	2598 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    251a:	2300      	movs	r3, #0
    251c:	aa02      	add	r2, sp, #8
    251e:	4639      	mov	r1, r7
    2520:	4620      	mov	r0, r4
    2522:	f7ff fe09 	bl	2138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2526:	b1f8      	cbz	r0, 2568 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    2528:	46a4      	mov	ip, r4
    252a:	ad08      	add	r5, sp, #32
    252c:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2530:	f8dc 0000 	ldr.w	r0, [ip]
    2534:	f10c 0c10 	add.w	ip, ip, #16
    2538:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    253c:	46ae      	mov	lr, r5
    253e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2542:	3510      	adds	r5, #16
    2544:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2548:	45bc      	cmp	ip, r7
    254a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    254e:	d1ef      	bne.n	2530 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    2550:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    2554:	af08      	add	r7, sp, #32
    tmpDir = *this;
    2556:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    2558:	4620      	mov	r0, r4
    255a:	f000 f923 	bl	27a4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    255e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    2562:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    2566:	e7cd      	b.n	2504 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    2568:	2000      	movs	r0, #0
}
    256a:	b017      	add	sp, #92	; 0x5c
    256c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    2570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2574:	292f      	cmp	r1, #47	; 0x2f
    2576:	d0fb      	beq.n	2570 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    2578:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    257a:	b9b1      	cbnz	r1, 25aa <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    257c:	2238      	movs	r2, #56	; 0x38
    257e:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    2580:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    2582:	f009 f843 	bl	b60c <memset>
  m_flags = FILE_FLAG_READ;
    2586:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    2588:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    258a:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    258c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    258e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    2592:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    2596:	e7e8      	b.n	256a <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    2598:	464b      	mov	r3, r9
    259a:	aa02      	add	r2, sp, #8
    259c:	4639      	mov	r1, r7
    259e:	4620      	mov	r0, r4
    25a0:	f7ff fdca 	bl	2138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    25a4:	b017      	add	sp, #92	; 0x5c
    25a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    25aa:	2238      	movs	r2, #56	; 0x38
    25ac:	2100      	movs	r1, #0
    25ae:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    25b0:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    25b2:	f009 f82b 	bl	b60c <memset>
  m_flags = FILE_FLAG_READ;
    25b6:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    25b8:	af08      	add	r7, sp, #32
  m_vol = vol;
    25ba:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    25bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    25c0:	2340      	movs	r3, #64	; 0x40
    25c2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    25c6:	e79b      	b.n	2500 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000025c8 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    25c8:	b119      	cbz	r1, 25d2 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    25ca:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    25ce:	f7ff bf7f 	b.w	24d0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    25d2:	4608      	mov	r0, r1
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop

000025d8 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    25d8:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    25da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25dc:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    25de:	6a00      	ldr	r0, [r0, #32]
    25e0:	b101      	cbz	r1, 25e4 <ExFatFile::addCluster()+0xc>
    25e2:	3101      	adds	r1, #1
    25e4:	2201      	movs	r2, #1
    25e6:	f000 fc0f 	bl	2e08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    25ea:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    25ec:	4605      	mov	r5, r0
  if (find < 2) {
    25ee:	d932      	bls.n	2656 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    25f0:	2301      	movs	r3, #1
    25f2:	4601      	mov	r1, r0
    25f4:	6a20      	ldr	r0, [r4, #32]
    25f6:	461a      	mov	r2, r3
    25f8:	f000 fc66 	bl	2ec8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    25fc:	4606      	mov	r6, r0
    25fe:	b350      	cbz	r0, 2656 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2600:	69a3      	ldr	r3, [r4, #24]
    2602:	b35b      	cbz	r3, 265c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2604:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    2608:	0651      	lsls	r1, r2, #25
    260a:	d512      	bpl.n	2632 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    260c:	1c59      	adds	r1, r3, #1
    260e:	42a9      	cmp	r1, r5
    2610:	d018      	beq.n	2644 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2616:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2618:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    261c:	e005      	b.n	262a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    261e:	6a20      	ldr	r0, [r4, #32]
    2620:	f000 fd4e 	bl	30c0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2624:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    2626:	b1b0      	cbz	r0, 2656 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2628:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    262a:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    262c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    262e:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2630:	d3f5      	bcc.n	261e <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2632:	f04f 32ff 	mov.w	r2, #4294967295
    2636:	4629      	mov	r1, r5
    2638:	6a20      	ldr	r0, [r4, #32]
    263a:	f000 fd41 	bl	30c0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    263e:	b150      	cbz	r0, 2656 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2640:	69a1      	ldr	r1, [r4, #24]
    2642:	b911      	cbnz	r1, 264a <ExFatFile::addCluster()+0x72>
}
    2644:	4630      	mov	r0, r6
  m_curCluster = find;
    2646:	61a5      	str	r5, [r4, #24]
}
    2648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    264a:	462a      	mov	r2, r5
    264c:	6a20      	ldr	r0, [r4, #32]
    264e:	f000 fd37 	bl	30c0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2652:	2800      	cmp	r0, #0
    2654:	d1f6      	bne.n	2644 <ExFatFile::addCluster()+0x6c>
  return false;
    2656:	2600      	movs	r6, #0
}
    2658:	4630      	mov	r0, r6
    265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    265c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2664:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    2668:	e7ec      	b.n	2644 <ExFatFile::addCluster()+0x6c>
    266a:	bf00      	nop

0000266c <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2670:	f04f 0800 	mov.w	r8, #0
    2674:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    2676:	4f4a      	ldr	r7, [pc, #296]	; (27a0 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    2678:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    267a:	4644      	mov	r4, r8
    267c:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    267e:	2200      	movs	r2, #0
    2680:	4630      	mov	r0, r6
    2682:	f7ff fb73 	bl	1d6c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    2686:	4605      	mov	r5, r0
    2688:	b130      	cbz	r0, 2698 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    268a:	7801      	ldrb	r1, [r0, #0]
    268c:	29c0      	cmp	r1, #192	; 0xc0
    268e:	d069      	beq.n	2764 <ExFatFile::syncDir()+0xf8>
    2690:	29c1      	cmp	r1, #193	; 0xc1
    2692:	d02b      	beq.n	26ec <ExFatFile::syncDir()+0x80>
    2694:	2985      	cmp	r1, #133	; 0x85
    2696:	d009      	beq.n	26ac <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    2698:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    269c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    269e:	f043 0301 	orr.w	r3, r3, #1
    26a2:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    26a6:	b002      	add	sp, #8
    26a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    26ac:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    26b0:	f003 0337 	and.w	r3, r3, #55	; 0x37
    26b4:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    26b6:	683b      	ldr	r3, [r7, #0]
    26b8:	b183      	cbz	r3, 26dc <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    26ba:	f10d 0203 	add.w	r2, sp, #3
    26be:	f10d 0106 	add.w	r1, sp, #6
    26c2:	a801      	add	r0, sp, #4
    26c4:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    26c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    26ca:	81ab      	strh	r3, [r5, #12]
    26cc:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    26ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    26d2:	81eb      	strh	r3, [r5, #14]
    26d4:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    26d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    26da:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    26dc:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    26de:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    26e2:	f043 0301 	orr.w	r3, r3, #1
    26e6:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    26ea:	7829      	ldrb	r1, [r5, #0]
    26ec:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    26f0:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    26f2:	fab0 f080 	clz	r0, r0
    26f6:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    26f8:	e001      	b.n	26fe <ExFatFile::syncDir()+0x92>
    26fa:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    26fc:	5ca9      	ldrb	r1, [r5, r2]
    26fe:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2700:	2a01      	cmp	r2, #1
    2702:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2706:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    270a:	fa11 f383 	uxtah	r3, r1, r3
    270e:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2710:	d101      	bne.n	2716 <ExFatFile::syncDir()+0xaa>
    2712:	2800      	cmp	r0, #0
    2714:	d1f1      	bne.n	26fa <ExFatFile::syncDir()+0x8e>
    2716:	2a1f      	cmp	r2, #31
    2718:	d9f0      	bls.n	26fc <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    271a:	f108 0801 	add.w	r8, r8, #1
    271e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    2722:	fa5f f188 	uxtb.w	r1, r8
    2726:	428b      	cmp	r3, r1
    2728:	d2a9      	bcs.n	267e <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    272a:	2201      	movs	r2, #1
    272c:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2730:	6a30      	ldr	r0, [r6, #32]
    2732:	f000 fc45 	bl	2fc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2736:	2800      	cmp	r0, #0
    2738:	d0ae      	beq.n	2698 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    273a:	6a35      	ldr	r5, [r6, #32]
    273c:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    273e:	4628      	mov	r0, r5
    2740:	f004 fb8a 	bl	6e58 <FsCache::sync()>
    2744:	2800      	cmp	r0, #0
    2746:	d0a7      	beq.n	2698 <ExFatFile::syncDir()+0x2c>
    2748:	f505 7004 	add.w	r0, r5, #528	; 0x210
    274c:	f004 fb84 	bl	6e58 <FsCache::sync()>
    2750:	2800      	cmp	r0, #0
    2752:	d0a1      	beq.n	2698 <ExFatFile::syncDir()+0x2c>
    2754:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    2758:	6803      	ldr	r3, [r0, #0]
    275a:	6a1b      	ldr	r3, [r3, #32]
    275c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    275e:	2800      	cmp	r0, #0
    2760:	d1a1      	bne.n	26a6 <ExFatFile::syncDir()+0x3a>
    2762:	e799      	b.n	2698 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    2764:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    2768:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    276c:	7843      	ldrb	r3, [r0, #1]
    276e:	bf14      	ite	ne
    2770:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    2774:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    2778:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    277a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    277e:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2782:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    2786:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    278a:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    278c:	e9c5 0106 	strd	r0, r1, [r5, #24]
    2790:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2794:	f043 0301 	orr.w	r3, r3, #1
    2798:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    279c:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    279e:	e7a5      	b.n	26ec <ExFatFile::syncDir()+0x80>
    27a0:	20026874 	.word	0x20026874

000027a4 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    27a4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    27a6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    27aa:	b343      	cbz	r3, 27fe <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    27ac:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    27b0:	4604      	mov	r4, r0
    27b2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    27b6:	2a00      	cmp	r2, #0
    27b8:	db0c      	blt.n	27d4 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    27ba:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27bc:	4628      	mov	r0, r5
    27be:	f004 fb4b 	bl	6e58 <FsCache::sync()>
    27c2:	b978      	cbnz	r0, 27e4 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    27c4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    27c8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    27ca:	f043 0301 	orr.w	r3, r3, #1
    27ce:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    27d2:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    27d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27d8:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    27dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    27e0:	f7ff bf44 	b.w	266c <ExFatFile::syncDir()>
    27e4:	f505 7004 	add.w	r0, r5, #528	; 0x210
    27e8:	f004 fb36 	bl	6e58 <FsCache::sync()>
    27ec:	2800      	cmp	r0, #0
    27ee:	d0e9      	beq.n	27c4 <ExFatFile::sync()+0x20>
    27f0:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    27f4:	6803      	ldr	r3, [r0, #0]
    27f6:	6a1b      	ldr	r3, [r3, #32]
    27f8:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    27fa:	2800      	cmp	r0, #0
    27fc:	d0e2      	beq.n	27c4 <ExFatFile::sync()+0x20>
    return true;
    27fe:	2001      	movs	r0, #1
}
    2800:	bd38      	pop	{r3, r4, r5, pc}
    2802:	bf00      	nop

00002804 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    2804:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2806:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    280a:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    280c:	065a      	lsls	r2, r3, #25
    280e:	d44c      	bmi.n	28aa <ExFatFile::addDirCluster()+0xa6>
    2810:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    2812:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2814:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    2818:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    281a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    281e:	d301      	bcc.n	2824 <ExFatFile::addDirCluster()+0x20>
}
    2820:	2000      	movs	r0, #0
    2822:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    2824:	4628      	mov	r0, r5
    2826:	f7ff fed7 	bl	25d8 <ExFatFile::addCluster()>
    282a:	2800      	cmp	r0, #0
    282c:	d0f8      	beq.n	2820 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    282e:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2830:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    2832:	69ae      	ldr	r6, [r5, #24]
    2834:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    2838:	3e02      	subs	r6, #2
    283a:	409e      	lsls	r6, r3
    283c:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2840:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    2842:	1931      	adds	r1, r6, r4
    2844:	2205      	movs	r2, #5
    2846:	f500 7004 	add.w	r0, r0, #528	; 0x210
    284a:	3401      	adds	r4, #1
    284c:	f004 fb30 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    2850:	f44f 7200 	mov.w	r2, #512	; 0x200
    2854:	2100      	movs	r1, #0
    if (!cache) {
    2856:	2800      	cmp	r0, #0
    2858:	d0e2      	beq.n	2820 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    285a:	f008 fed7 	bl	b60c <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    285e:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2860:	2301      	movs	r3, #1
    2862:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2866:	4093      	lsls	r3, r2
    2868:	429c      	cmp	r4, r3
    286a:	d3ea      	bcc.n	2842 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    286c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2870:	065b      	lsls	r3, r3, #25
    2872:	d415      	bmi.n	28a0 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2874:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    2878:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    287c:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2880:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    2884:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    2888:	189b      	adds	r3, r3, r2
    288a:	f141 0000 	adc.w	r0, r1, #0
    288e:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    2890:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    2894:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    2896:	189b      	adds	r3, r3, r2
    2898:	f141 0100 	adc.w	r1, r1, #0
    289c:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    28a0:	4628      	mov	r0, r5
}
    28a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    28a6:	f7ff bf7d 	b.w	27a4 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    28aa:	6a00      	ldr	r0, [r0, #32]
    28ac:	f000 fcf8 	bl	32a0 <ExFatPartition::rootLength()>
    28b0:	e7af      	b.n	2812 <ExFatFile::addDirCluster()+0xe>
    28b2:	bf00      	nop

000028b4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    28b4:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    28b6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    28ba:	f013 0f50 	tst.w	r3, #80	; 0x50
    28be:	d102      	bne.n	28c6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    28c0:	2500      	movs	r5, #0
}
    28c2:	4628      	mov	r0, r5
    28c4:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    28c6:	f640 2302 	movw	r3, #2562	; 0xa02
    28ca:	4604      	mov	r4, r0
    28cc:	f7ff fc34 	bl	2138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    28d0:	2800      	cmp	r0, #0
    28d2:	d0f5      	beq.n	28c0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    28d4:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    28d6:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    28d8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    28dc:	f7ff ff92 	bl	2804 <ExFatFile::addDirCluster()>
    28e0:	4605      	mov	r5, r0
    28e2:	2800      	cmp	r0, #0
    28e4:	d0ec      	beq.n	28c0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    28e6:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    28e8:	2200      	movs	r2, #0
    28ea:	2300      	movs	r3, #0
    28ec:	4620      	mov	r0, r4
    28ee:	61e1      	str	r1, [r4, #28]
    28f0:	f7ff fbac 	bl	204c <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    28f4:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    28f6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    28fa:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    28fe:	2b00      	cmp	r3, #0
    2900:	d0df      	beq.n	28c2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2902:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    2904:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2906:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    290a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    290e:	f7ff bead 	b.w	266c <ExFatFile::syncDir()>
    2912:	bf00      	nop

00002914 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2914:	b5f0      	push	{r4, r5, r6, r7, lr}
    2916:	2500      	movs	r5, #0
    2918:	b097      	sub	sp, #92	; 0x5c
    291a:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    291c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2920:	9201      	str	r2, [sp, #4]
    2922:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    2926:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    2928:	2b00      	cmp	r3, #0
    292a:	d146      	bne.n	29ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    292c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2930:	460e      	mov	r6, r1
    2932:	f013 0f50 	tst.w	r3, #80	; 0x50
    2936:	d040      	beq.n	29ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    2938:	7813      	ldrb	r3, [r2, #0]
    293a:	4604      	mov	r4, r0
    293c:	4611      	mov	r1, r2
    293e:	2b2f      	cmp	r3, #47	; 0x2f
    2940:	d03e      	beq.n	29c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    2942:	ab01      	add	r3, sp, #4
    2944:	aa02      	add	r2, sp, #8
    2946:	4620      	mov	r0, r4
    2948:	f7ff fa4c 	bl	1de4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    294c:	2800      	cmp	r0, #0
    294e:	d034      	beq.n	29ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    2950:	9b01      	ldr	r3, [sp, #4]
    2952:	781b      	ldrb	r3, [r3, #0]
    2954:	2b00      	cmp	r3, #0
    2956:	d041      	beq.n	29dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    2958:	2300      	movs	r3, #0
    295a:	aa02      	add	r2, sp, #8
    295c:	4631      	mov	r1, r6
    295e:	4620      	mov	r0, r4
    2960:	f7ff fbea 	bl	2138 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2964:	b930      	cbnz	r0, 2974 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    2966:	b347      	cbz	r7, 29ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    2968:	aa02      	add	r2, sp, #8
    296a:	4631      	mov	r1, r6
    296c:	4620      	mov	r0, r4
    296e:	f7ff ffa1 	bl	28b4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    2972:	b310      	cbz	r0, 29ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    2974:	46a4      	mov	ip, r4
    2976:	ad08      	add	r5, sp, #32
    2978:	f104 0630 	add.w	r6, r4, #48	; 0x30
    297c:	f8dc 0000 	ldr.w	r0, [ip]
    2980:	f10c 0c10 	add.w	ip, ip, #16
    2984:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2988:	46ae      	mov	lr, r5
    298a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    298e:	3510      	adds	r5, #16
    2990:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2994:	45b4      	cmp	ip, r6
    2996:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    299a:	d1ef      	bne.n	297c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    299c:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    29a0:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    29a2:	6028      	str	r0, [r5, #0]
    close();
    29a4:	4620      	mov	r0, r4
    29a6:	f7ff f9ff 	bl	1da8 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    29aa:	9901      	ldr	r1, [sp, #4]
    29ac:	ab01      	add	r3, sp, #4
    29ae:	aa02      	add	r2, sp, #8
    29b0:	4620      	mov	r0, r4
    29b2:	f7ff fa17 	bl	1de4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    29b6:	2800      	cmp	r0, #0
    29b8:	d1ca      	bne.n	2950 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    29ba:	2000      	movs	r0, #0
}
    29bc:	b017      	add	sp, #92	; 0x5c
    29be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    29c0:	3101      	adds	r1, #1
    29c2:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    29c4:	780b      	ldrb	r3, [r1, #0]
    29c6:	2b2f      	cmp	r3, #47	; 0x2f
    29c8:	d0fa      	beq.n	29c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    29ca:	6a31      	ldr	r1, [r6, #32]
    29cc:	a808      	add	r0, sp, #32
    29ce:	f7ff f9f5 	bl	1dbc <ExFatFile::openRoot(ExFatVolume*)>
    29d2:	2800      	cmp	r0, #0
    29d4:	d0f1      	beq.n	29ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    29d6:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    29d8:	ae08      	add	r6, sp, #32
    29da:	e7b2      	b.n	2942 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    29dc:	aa02      	add	r2, sp, #8
    29de:	4631      	mov	r1, r6
    29e0:	4620      	mov	r0, r4
    29e2:	f7ff ff67 	bl	28b4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    29e6:	b017      	add	sp, #92	; 0x5c
    29e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ea:	bf00      	nop

000029ec <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    29ec:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    29f0:	079a      	lsls	r2, r3, #30
    29f2:	d562      	bpl.n	2aba <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    29f4:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    29f6:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    29f8:	b082      	sub	sp, #8
    29fa:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    29fc:	b3a5      	cbz	r5, 2a68 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    29fe:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2a02:	d034      	beq.n	2a6e <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2a04:	6a00      	ldr	r0, [r0, #32]
    2a06:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2a08:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2a0c:	3a01      	subs	r2, #1
    2a0e:	68e1      	ldr	r1, [r4, #12]
    2a10:	f10c 0c09 	add.w	ip, ip, #9
    2a14:	f141 31ff 	adc.w	r1, r1, #4294967295
    2a18:	fa5f fc8c 	uxtb.w	ip, ip
    2a1c:	f1cc 0e20 	rsb	lr, ip, #32
    2a20:	fa22 f20c 	lsr.w	r2, r2, ip
    2a24:	f1ac 0c20 	sub.w	ip, ip, #32
    2a28:	fa01 fe0e 	lsl.w	lr, r1, lr
    2a2c:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2a30:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2a32:	ea42 020e 	orr.w	r2, r2, lr
    2a36:	ea42 020c 	orr.w	r2, r2, ip
    2a3a:	3201      	adds	r2, #1
    if (m_curCluster) {
    2a3c:	b319      	cbz	r1, 2a86 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2a3e:	3d01      	subs	r5, #1
    2a40:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2a42:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2a44:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    2a46:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2a48:	bb72      	cbnz	r2, 2aa8 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2a4e:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2a50:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a54:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    2a58:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2a5c:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2a60:	f7ff fea0 	bl	27a4 <ExFatFile::sync()>

 fail:
  return false;
}
    2a64:	b002      	add	sp, #8
    2a66:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    2a68:	2001      	movs	r0, #1
}
    2a6a:	b002      	add	sp, #8
    2a6c:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2a6e:	6981      	ldr	r1, [r0, #24]
    2a70:	b961      	cbnz	r1, 2a8c <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2a72:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2a74:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    2a76:	4629      	mov	r1, r5
    2a78:	6a20      	ldr	r0, [r4, #32]
    2a7a:	f000 fb41 	bl	3100 <ExFatPartition::freeChain(unsigned long)>
    2a7e:	b1c8      	cbz	r0, 2ab4 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2a80:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2a84:	e7e1      	b.n	2a4a <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    2a86:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2a88:	61e1      	str	r1, [r4, #28]
    2a8a:	e7dd      	b.n	2a48 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2a8c:	aa01      	add	r2, sp, #4
    2a8e:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2a90:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2a92:	f000 faf3 	bl	307c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    2a96:	2800      	cmp	r0, #0
    2a98:	db0c      	blt.n	2ab4 <ExFatFile::truncate()+0xc8>
      if (fg) {
    2a9a:	d110      	bne.n	2abe <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2a9c:	9d01      	ldr	r5, [sp, #4]
    2a9e:	2d00      	cmp	r5, #0
    2aa0:	d1e9      	bne.n	2a76 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2aa2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2aa6:	e7d0      	b.n	2a4a <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2aa8:	2300      	movs	r3, #0
    2aaa:	9901      	ldr	r1, [sp, #4]
    2aac:	f000 fa0c 	bl	2ec8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2ab0:	2800      	cmp	r0, #0
    2ab2:	d1e5      	bne.n	2a80 <ExFatFile::truncate()+0x94>
  return false;
    2ab4:	2000      	movs	r0, #0
}
    2ab6:	b002      	add	sp, #8
    2ab8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2aba:	2000      	movs	r0, #0
}
    2abc:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2abe:	f04f 32ff 	mov.w	r2, #4294967295
    2ac2:	69a1      	ldr	r1, [r4, #24]
    2ac4:	6a20      	ldr	r0, [r4, #32]
    2ac6:	f000 fafb 	bl	30c0 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2aca:	2800      	cmp	r0, #0
    2acc:	d1e6      	bne.n	2a9c <ExFatFile::truncate()+0xb0>
    2ace:	e7f1      	b.n	2ab4 <ExFatFile::truncate()+0xc8>

00002ad0 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ad4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2ad8:	b083      	sub	sp, #12
    2ada:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2adc:	079d      	lsls	r5, r3, #30
    2ade:	f140 80a1 	bpl.w	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2ae2:	4691      	mov	r9, r2
    2ae4:	071a      	lsls	r2, r3, #28
    2ae6:	460e      	mov	r6, r1
    2ae8:	f100 8095 	bmi.w	2c16 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    2aec:	f1b9 0f00 	cmp.w	r9, #0
    2af0:	f000 8128 	beq.w	2d44 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2af4:	6823      	ldr	r3, [r4, #0]
    2af6:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2af8:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    2afa:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2afc:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2b00:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2b04:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2b08:	f1b8 0f00 	cmp.w	r8, #0
    2b0c:	f040 8094 	bne.w	2c38 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2b10:	2900      	cmp	r1, #0
    2b12:	f000 80d4 	beq.w	2cbe <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2b16:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2b1a:	065b      	lsls	r3, r3, #25
    2b1c:	f140 80ec 	bpl.w	2cf8 <ExFatFile::write(void const*, unsigned int)+0x228>
    2b20:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2b24:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2b28:	f10c 0c09 	add.w	ip, ip, #9
    2b2c:	3b01      	subs	r3, #1
    2b2e:	fa5f fc8c 	uxtb.w	ip, ip
    2b32:	f142 32ff 	adc.w	r2, r2, #4294967295
    2b36:	f1cc 0e20 	rsb	lr, ip, #32
    2b3a:	fa23 f30c 	lsr.w	r3, r3, ip
    2b3e:	f1ac 0c20 	sub.w	ip, ip, #32
    2b42:	fa02 fe0e 	lsl.w	lr, r2, lr
    2b46:	fa22 fc0c 	lsr.w	ip, r2, ip
    2b4a:	69e2      	ldr	r2, [r4, #28]
    2b4c:	ea43 030e 	orr.w	r3, r3, lr
    2b50:	ea43 030c 	orr.w	r3, r3, ip
    2b54:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2b56:	4299      	cmp	r1, r3
    2b58:	f080 80d5 	bcs.w	2d06 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2b5c:	3101      	adds	r1, #1
    2b5e:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2b60:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2b64:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b66:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2b6a:	4091      	lsls	r1, r2
    2b6c:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2b6e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2b72:	f0c0 808a 	bcc.w	2c8a <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    2b76:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2b7a:	f0c0 80a6 	bcc.w	2cca <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2b7e:	2301      	movs	r3, #1
    2b80:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2b82:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    2b84:	eba3 0308 	sub.w	r3, r3, r8
    2b88:	4293      	cmp	r3, r2
    2b8a:	bf28      	it	cs
    2b8c:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2b8e:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    2b92:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2b94:	ea4f 2843 	mov.w	r8, r3, lsl #9
    2b98:	d309      	bcc.n	2bae <ExFatFile::write(void const*, unsigned int)+0xde>
    2b9a:	185f      	adds	r7, r3, r1
    2b9c:	42ba      	cmp	r2, r7
    2b9e:	d206      	bcs.n	2bae <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2ba0:	2200      	movs	r2, #0
    2ba2:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2ba6:	f04f 32ff 	mov.w	r2, #4294967295
    2baa:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    2bae:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2bb2:	4632      	mov	r2, r6
    2bb4:	6807      	ldr	r7, [r0, #0]
    2bb6:	6abf      	ldr	r7, [r7, #40]	; 0x28
    2bb8:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    2bba:	b398      	cbz	r0, 2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    2bbc:	4643      	mov	r3, r8
    src += n;
    2bbe:	4446      	add	r6, r8
    toWrite -= n;
    2bc0:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2bc4:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2bc8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2bcc:	19db      	adds	r3, r3, r7
    2bce:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2bd2:	4298      	cmp	r0, r3
    2bd4:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2bd6:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2bda:	d207      	bcs.n	2bec <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2bdc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2be0:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2be4:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2be8:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2bec:	2d00      	cmp	r5, #0
    2bee:	d183      	bne.n	2af8 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2bf0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2bf4:	4298      	cmp	r0, r3
    2bf6:	4191      	sbcs	r1, r2
    2bf8:	f0c0 8096 	bcc.w	2d28 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2bfc:	4b53      	ldr	r3, [pc, #332]	; (2d4c <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	2b00      	cmp	r3, #0
    2c02:	f000 809d 	beq.w	2d40 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c06:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2c0a:	4648      	mov	r0, r9
    2c0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c10:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2c14:	e00d      	b.n	2c32 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2c16:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2c1a:	f7ff fa17 	bl	204c <ExFatFile::seekSet(unsigned long long)>
    2c1e:	2800      	cmp	r0, #0
    2c20:	f47f af64 	bne.w	2aec <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2c24:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2c28:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2c2a:	f043 0301 	orr.w	r3, r3, #1
    2c2e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2c32:	b003      	add	sp, #12
    2c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2c38:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2c3c:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2c3e:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2c42:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2c46:	4091      	lsls	r1, r2
    2c48:	4441      	add	r1, r8
    2c4a:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2c4c:	2f00      	cmp	r7, #0
    2c4e:	d08e      	beq.n	2b6e <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2c50:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2c54:	2201      	movs	r2, #1
    2c56:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2c5a:	45a8      	cmp	r8, r5
    2c5c:	bf28      	it	cs
    2c5e:	46a8      	movcs	r8, r5
    2c60:	f004 f926 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2c64:	2800      	cmp	r0, #0
    2c66:	d0dd      	beq.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2c68:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2c6a:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2c6c:	4642      	mov	r2, r8
    2c6e:	4631      	mov	r1, r6
    2c70:	f004 fefc 	bl	7a6c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2c74:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2c78:	6a20      	ldr	r0, [r4, #32]
    2c7a:	d19f      	bne.n	2bbc <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    2c7c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2c80:	f004 f8ea 	bl	6e58 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2c84:	2800      	cmp	r0, #0
    2c86:	d199      	bne.n	2bbc <ExFatFile::write(void const*, unsigned int)+0xec>
    2c88:	e7cc      	b.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2c8a:	6862      	ldr	r2, [r4, #4]
    2c8c:	6963      	ldr	r3, [r4, #20]
    2c8e:	9200      	str	r2, [sp, #0]
    2c90:	9301      	str	r3, [sp, #4]
    2c92:	6922      	ldr	r2, [r4, #16]
    2c94:	6823      	ldr	r3, [r4, #0]
    2c96:	4293      	cmp	r3, r2
    2c98:	e9dd 2300 	ldrd	r2, r3, [sp]
    2c9c:	419a      	sbcs	r2, r3
    2c9e:	d212      	bcs.n	2cc6 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2ca0:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2ca2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2ca6:	f004 f903 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2caa:	2800      	cmp	r0, #0
    2cac:	d0ba      	beq.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2cae:	462a      	mov	r2, r5
    2cb0:	4631      	mov	r1, r6
    2cb2:	4438      	add	r0, r7
    m_curPosition += n;
    2cb4:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2cb6:	f004 fed9 	bl	7a6c <memcpy>
    m_curPosition += n;
    2cba:	462b      	mov	r3, r5
    2cbc:	e77f      	b.n	2bbe <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2cbe:	69e1      	ldr	r1, [r4, #28]
    2cc0:	b349      	cbz	r1, 2d16 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2cc2:	61a1      	str	r1, [r4, #24]
    2cc4:	e74c      	b.n	2b60 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2cc6:	2205      	movs	r2, #5
    2cc8:	e7eb      	b.n	2ca2 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2cca:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    2cce:	428b      	cmp	r3, r1
    2cd0:	d106      	bne.n	2ce0 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2cd2:	2300      	movs	r3, #0
    2cd4:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2cd8:	f04f 33ff 	mov.w	r3, #4294967295
    2cdc:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    2ce0:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2ce4:	4632      	mov	r2, r6
    2ce6:	6803      	ldr	r3, [r0, #0]
    2ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2cea:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2cec:	2800      	cmp	r0, #0
    2cee:	d099      	beq.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
    2cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2cf4:	4698      	mov	r8, r3
    2cf6:	e762      	b.n	2bbe <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2cf8:	f104 0218 	add.w	r2, r4, #24
    2cfc:	f000 f9be 	bl	307c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2d00:	2800      	cmp	r0, #0
    2d02:	db8f      	blt.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2d04:	d104      	bne.n	2d10 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2d06:	4620      	mov	r0, r4
    2d08:	f7ff fc66 	bl	25d8 <ExFatFile::addCluster()>
    2d0c:	2800      	cmp	r0, #0
    2d0e:	d089      	beq.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d10:	69a1      	ldr	r1, [r4, #24]
    2d12:	6a20      	ldr	r0, [r4, #32]
    2d14:	e724      	b.n	2b60 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2d16:	4620      	mov	r0, r4
    2d18:	f7ff fc5e 	bl	25d8 <ExFatFile::addCluster()>
    2d1c:	2800      	cmp	r0, #0
    2d1e:	d081      	beq.n	2c24 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2d20:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2d22:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2d24:	61e1      	str	r1, [r4, #28]
    2d26:	e71b      	b.n	2b60 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2d28:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2d2c:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2d2e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2d32:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2d36:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2d3a:	b003      	add	sp, #12
    2d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d40:	4648      	mov	r0, r9
    2d42:	e776      	b.n	2c32 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2d44:	e9d4 3200 	ldrd	r3, r2, [r4]
    2d48:	e752      	b.n	2bf0 <ExFatFile::write(void const*, unsigned int)+0x120>
    2d4a:	bf00      	nop
    2d4c:	20026874 	.word	0x20026874

00002d50 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d54:	460c      	mov	r4, r1
    2d56:	4615      	mov	r5, r2
    2d58:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    2d5c:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    2d5e:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    2d60:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    2d64:	b91b      	cbnz	r3, 2d6e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    2d66:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    2d6a:	429a      	cmp	r2, r3
    2d6c:	d00e      	beq.n	2d8c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    2d6e:	f004 f8c7 	bl	6f00 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    2d72:	f004 f937 	bl	6fe4 <toUpcase(unsigned short)>
    2d76:	4606      	mov	r6, r0
    2d78:	4638      	mov	r0, r7
    2d7a:	f004 f933 	bl	6fe4 <toUpcase(unsigned short)>
    2d7e:	4286      	cmp	r6, r0
    2d80:	d109      	bne.n	2d96 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    2d82:	4544      	cmp	r4, r8
    2d84:	d1ea      	bne.n	2d5c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2d86:	2001      	movs	r0, #1
}
    2d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    2d8c:	fab7 f087 	clz	r0, r7
    2d90:	0940      	lsrs	r0, r0, #5
}
    2d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    2d96:	2000      	movs	r0, #0
}
    2d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002d9c <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2d9c:	b570      	push	{r4, r5, r6, lr}
    2d9e:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    2da0:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    2da2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    2da6:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    2da8:	4619      	mov	r1, r3
  uint16_t hash = 0;
    2daa:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    2dac:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    2dae:	6123      	str	r3, [r4, #16]
    next = begin;
    2db0:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    2db2:	e017      	b.n	2de4 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    2db4:	f004 f8a4 	bl	6f00 <FsName::get16()>
    if (u == 0XFFFF) {
    2db8:	42a8      	cmp	r0, r5
    2dba:	d022      	beq.n	2e02 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    2dbc:	f004 f912 	bl	6fe4 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    2dc0:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2dc2:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    2dc4:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    2dc6:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2dc8:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2dcc:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    2dce:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2dd0:	fa52 f080 	uxtab	r0, r2, r0
    2dd4:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2dd6:	f3c0 004e 	ubfx	r0, r0, #1, #15
    2dda:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    2dde:	fa16 f080 	uxtah	r0, r6, r0
    2de2:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    2de4:	4620      	mov	r0, r4
    2de6:	2900      	cmp	r1, #0
    2de8:	d1e4      	bne.n	2db4 <ExFatFile::hashName(ExName_t*)+0x18>
    2dea:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    2dee:	429a      	cmp	r2, r3
    2df0:	d1e0      	bne.n	2db4 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2df2:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    2df4:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2df6:	3801      	subs	r0, #1
    2df8:	28fe      	cmp	r0, #254	; 0xfe
    2dfa:	bf8c      	ite	hi
    2dfc:	2000      	movhi	r0, #0
    2dfe:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    2e00:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2e02:	2000      	movs	r0, #0
}
    2e04:	bd70      	pop	{r4, r5, r6, pc}
    2e06:	bf00      	nop

00002e08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e0c:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e0e:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2e10:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e12:	2900      	cmp	r1, #0
    2e14:	d042      	beq.n	2e9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2e16:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2e1a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2e1e:	4543      	cmp	r3, r8
    2e20:	d942      	bls.n	2ea8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2e22:	f008 0307 	and.w	r3, r8, #7
    2e26:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2e28:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2e2c:	409d      	lsls	r5, r3
    2e2e:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2e30:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2e32:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    2e34:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2e38:	2200      	movs	r2, #0
    2e3a:	4638      	mov	r0, r7
    2e3c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2e40:	f004 f836 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2e44:	b1e8      	cbz	r0, 2e82 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2e46:	f10b 3bff 	add.w	fp, fp, #4294967295
    2e4a:	4483      	add	fp, r0
    2e4c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2e50:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2e54:	e00a      	b.n	2e6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2e56:	454a      	cmp	r2, r9
    2e58:	d02b      	beq.n	2eb2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2e5a:	45a0      	cmp	r8, r4
    2e5c:	d010      	beq.n	2e80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2e5e:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2e62:	42a5      	cmp	r5, r4
    2e64:	d914      	bls.n	2e90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2e66:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2e6a:	d00c      	beq.n	2e86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2e6c:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2e6e:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2e70:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2e74:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2e78:	d0ed      	beq.n	2e56 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2e7a:	45a0      	cmp	r8, r4
        endAlloc++;
    2e7c:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2e7e:	d1ee      	bne.n	2e5e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2e80:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2e86:	4558      	cmp	r0, fp
      mask = 1;
    2e88:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2e8c:	d1e0      	bne.n	2e50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2e8e:	e001      	b.n	2e94 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2e90:	2600      	movs	r6, #0
    2e92:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2e94:	2501      	movs	r5, #1
    i = 0;
    2e96:	f04f 0b00 	mov.w	fp, #0
    2e9a:	e7cb      	b.n	2e34 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2e9c:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2ea0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2ea4:	4543      	cmp	r3, r8
    2ea6:	d8bc      	bhi.n	2e22 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2ea8:	f04f 0800 	mov.w	r8, #0
    2eac:	2501      	movs	r5, #1
    start = 0;
    2eae:	46c3      	mov	fp, r8
    2eb0:	e7be      	b.n	2e30 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2eb2:	f1ba 0f00 	cmp.w	sl, #0
    2eb6:	d104      	bne.n	2ec2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2eb8:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2ebc:	bf08      	it	eq
    2ebe:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2ec2:	1cb0      	adds	r0, r6, #2
}
    2ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002ec8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    2ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ecc:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2ece:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    2ed0:	4615      	mov	r5, r2
    2ed2:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2ed4:	1883      	adds	r3, r0, r2
    2ed6:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2eda:	4293      	cmp	r3, r2
    2edc:	d837      	bhi.n	2f4e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2ede:	bbce      	cbnz	r6, 2f54 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2ee0:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2ee4:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2ee6:	bf88      	it	hi
    2ee8:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2eec:	f000 0307 	and.w	r3, r0, #7
    2ef0:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    2ef2:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    2ef6:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2efa:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    2efc:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2f00:	b2e4      	uxtb	r4, r4
    2f02:	2201      	movs	r2, #1
    2f04:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2f06:	188f      	adds	r7, r1, r2
    2f08:	f003 ffd2 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2f0c:	b1f8      	cbz	r0, 2f4e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2f0e:	f109 3eff 	add.w	lr, r9, #4294967295
    2f12:	4486      	add	lr, r0
    2f14:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2f18:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2f1c:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2f20:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2f24:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2f28:	bf14      	ite	ne
    2f2a:	2201      	movne	r2, #1
    2f2c:	2200      	moveq	r2, #0
    2f2e:	42b2      	cmp	r2, r6
    2f30:	d00d      	beq.n	2f4e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2f32:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2f34:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2f38:	d018      	beq.n	2f6c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2f3a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2f3e:	d1ed      	bne.n	2f1c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2f40:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2f42:	46a1      	mov	r9, r4
    2f44:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2f48:	d1e6      	bne.n	2f18 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2f4a:	4639      	mov	r1, r7
    2f4c:	e7d9      	b.n	2f02 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    2f4e:	2000      	movs	r0, #0
}
    2f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2f54:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2f58:	428b      	cmp	r3, r1
    2f5a:	d9c7      	bls.n	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2f5c:	4281      	cmp	r1, r0
    2f5e:	d3c5      	bcc.n	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2f60:	4293      	cmp	r3, r2
    2f62:	bf28      	it	cs
    2f64:	2300      	movcs	r3, #0
    2f66:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2f6a:	e7bf      	b.n	2eec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2f6c:	2001      	movs	r0, #1
}
    2f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f72:	bf00      	nop

00002f74 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2f76:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f7a:	3301      	adds	r3, #1
    2f7c:	428b      	cmp	r3, r1
    2f7e:	d201      	bcs.n	2f84 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2f80:	2000      	movs	r0, #0
}
    2f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f84:	4607      	mov	r7, r0
    2f86:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2f88:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2f8c:	2500      	movs	r5, #0
    2f8e:	e005      	b.n	2f9c <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2f90:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2f94:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2f96:	3301      	adds	r3, #1
    2f98:	42a3      	cmp	r3, r4
    2f9a:	d3f1      	bcc.n	2f80 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f9c:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2fa0:	2200      	movs	r2, #0
    2fa2:	4630      	mov	r0, r6
    2fa4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2fa8:	f003 ff82 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2fac:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2fae:	2800      	cmp	r0, #0
    2fb0:	d0e6      	beq.n	2f80 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2fb2:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2fb6:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2fb8:	1c63      	adds	r3, r4, #1
    2fba:	d1e9      	bne.n	2f90 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2fbc:	1c68      	adds	r0, r5, #1
}
    2fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002fc0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2fc0:	b538      	push	{r3, r4, r5, lr}
    2fc2:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2fc4:	680b      	ldr	r3, [r1, #0]
    2fc6:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2fca:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2fce:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2fd2:	3b02      	subs	r3, #2
    2fd4:	6865      	ldr	r5, [r4, #4]
    2fd6:	fa03 f30c 	lsl.w	r3, r3, ip
    2fda:	4029      	ands	r1, r5
    2fdc:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2fe0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2fe4:	4419      	add	r1, r3
    2fe6:	f003 ff63 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2fea:	b118      	cbz	r0, 2ff4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2fec:	6863      	ldr	r3, [r4, #4]
    2fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2ff2:	4418      	add	r0, r3
}
    2ff4:	bd38      	pop	{r3, r4, r5, pc}
    2ff6:	bf00      	nop

00002ff8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ffc:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2ffe:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    3002:	6849      	ldr	r1, [r1, #4]
    3004:	400b      	ands	r3, r1
  pos->position += offset;
    3006:	4411      	add	r1, r2
    3008:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    300a:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    300c:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    3010:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    3014:	b2d2      	uxtb	r2, r2
    3016:	40d3      	lsrs	r3, r2
  while (tmp--) {
    3018:	b32b      	cbz	r3, 3066 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    301a:	4680      	mov	r8, r0
    301c:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    301e:	f500 7904 	add.w	r9, r0, #528	; 0x210
    3022:	e005      	b.n	3030 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    3024:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    3026:	3d01      	subs	r5, #1
      pos->cluster++;
    3028:	f103 0301 	add.w	r3, r3, #1
    302c:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    302e:	d31a      	bcc.n	3066 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    3030:	7a26      	ldrb	r6, [r4, #8]
    3032:	2e00      	cmp	r6, #0
    3034:	d1f6      	bne.n	3024 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    3036:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    303a:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    303c:	6827      	ldr	r7, [r4, #0]
    303e:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    3040:	3301      	adds	r3, #1
    3042:	429f      	cmp	r7, r3
    3044:	d812      	bhi.n	306c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3046:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    304a:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    304e:	f003 ff2f 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3052:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    3054:	b150      	cbz	r0, 306c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3056:	f3c7 0708 	ubfx	r7, r7, #0, #9
    305a:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    305c:	1c5a      	adds	r2, r3, #1
    305e:	d009      	beq.n	3074 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    3060:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    3062:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    3064:	d2e4      	bcs.n	3030 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    3066:	2001      	movs	r0, #1
}
    3068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    306c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    3074:	4630      	mov	r0, r6
}
    3076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    307a:	bf00      	nop

0000307c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    307c:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    307e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3082:	3301      	adds	r3, #1
    3084:	428b      	cmp	r3, r1
    3086:	d202      	bcs.n	308e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    3088:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    308c:	bd38      	pop	{r3, r4, r5, pc}
    308e:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3090:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    3094:	4615      	mov	r5, r2
    3096:	f500 7004 	add.w	r0, r0, #528	; 0x210
    309a:	2200      	movs	r2, #0
    309c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    30a0:	f003 ff06 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    30a4:	2800      	cmp	r0, #0
    30a6:	d0ef      	beq.n	3088 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    30a8:	00a4      	lsls	r4, r4, #2
    30aa:	f3c4 0408 	ubfx	r4, r4, #0, #9
    30ae:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    30b0:	1c5a      	adds	r2, r3, #1
    30b2:	d002      	beq.n	30ba <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    30b4:	2001      	movs	r0, #1
  *value = next;
    30b6:	602b      	str	r3, [r5, #0]
}
    30b8:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    30ba:	2000      	movs	r0, #0
}
    30bc:	bd38      	pop	{r3, r4, r5, pc}
    30be:	bf00      	nop

000030c0 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    30c0:	2901      	cmp	r1, #1
    30c2:	d91b      	bls.n	30fc <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    30c4:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    30c6:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    30ca:	460c      	mov	r4, r1
    30cc:	3301      	adds	r3, #1
    30ce:	428b      	cmp	r3, r1
    30d0:	d201      	bcs.n	30d6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    30d2:	2000      	movs	r0, #0
}
    30d4:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    30d6:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    30da:	4615      	mov	r5, r2
    30dc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    30e0:	2201      	movs	r2, #1
    30e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    30e6:	f003 fee3 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    30ea:	4603      	mov	r3, r0
    30ec:	2800      	cmp	r0, #0
    30ee:	d0f0      	beq.n	30d2 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    30f0:	00a4      	lsls	r4, r4, #2
  return true;
    30f2:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    30f4:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    30f8:	511d      	str	r5, [r3, r4]
}
    30fa:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    30fc:	2000      	movs	r0, #0
}
    30fe:	4770      	bx	lr

00003100 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    3100:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    3104:	3301      	adds	r3, #1
    3106:	4299      	cmp	r1, r3
    3108:	d901      	bls.n	310e <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    310a:	2000      	movs	r0, #0
    310c:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    310e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3112:	4605      	mov	r5, r0
    3114:	b083      	sub	sp, #12
    3116:	460c      	mov	r4, r1
    3118:	f500 7904 	add.w	r9, r0, #528	; 0x210
    311c:	460f      	mov	r7, r1
    311e:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3122:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    3126:	2200      	movs	r2, #0
    3128:	4648      	mov	r0, r9
    312a:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    312e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    3132:	f003 febd 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3136:	b190      	cbz	r0, 315e <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    3138:	00a3      	lsls	r3, r4, #2
    313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    313e:	58c2      	ldr	r2, [r0, r3]
    3140:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    3142:	1c53      	adds	r3, r2, #1
    3144:	bf16      	itet	ne
    3146:	4616      	movne	r6, r2
    3148:	f04f 0a00 	moveq.w	sl, #0
    314c:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    3150:	2c01      	cmp	r4, #1
    3152:	d904      	bls.n	315e <ExFatPartition::freeChain(unsigned long)+0x5e>
    3154:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    3158:	3201      	adds	r2, #1
    315a:	4294      	cmp	r4, r2
    315c:	d903      	bls.n	3166 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    315e:	2000      	movs	r0, #0
    3160:	b003      	add	sp, #12
    3162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    3166:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    316a:	2201      	movs	r2, #1
    316c:	4648      	mov	r0, r9
    316e:	4459      	add	r1, fp
    3170:	f003 fe9e 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    3174:	2800      	cmp	r0, #0
    3176:	d0f2      	beq.n	315e <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3178:	9b01      	ldr	r3, [sp, #4]
    317a:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    317e:	f1ba 0f00 	cmp.w	sl, #0
    3182:	d012      	beq.n	31aa <ExFatPartition::freeChain(unsigned long)+0xaa>
    3184:	3401      	adds	r4, #1
    3186:	42b4      	cmp	r4, r6
    3188:	d008      	beq.n	319c <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    318a:	2300      	movs	r3, #0
    318c:	1be2      	subs	r2, r4, r7
    318e:	4639      	mov	r1, r7
    3190:	4628      	mov	r0, r5
    3192:	f7ff fe99 	bl	2ec8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3196:	2800      	cmp	r0, #0
    3198:	d0e1      	beq.n	315e <ExFatPartition::freeChain(unsigned long)+0x5e>
    319a:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    319c:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    31a0:	3301      	adds	r3, #1
    31a2:	42b3      	cmp	r3, r6
    31a4:	d3db      	bcc.n	315e <ExFatPartition::freeChain(unsigned long)+0x5e>
    31a6:	4634      	mov	r4, r6
    31a8:	e7bb      	b.n	3122 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    31aa:	1c62      	adds	r2, r4, #1
    31ac:	4653      	mov	r3, sl
    31ae:	4639      	mov	r1, r7
    31b0:	4628      	mov	r0, r5
    31b2:	1bd2      	subs	r2, r2, r7
}
    31b4:	b003      	add	sp, #12
    31b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    31ba:	f7ff be85 	b.w	2ec8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    31be:	bf00      	nop

000031c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    31c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    31c2:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    31c4:	f04f 36ff 	mov.w	r6, #4294967295
    31c8:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    31cc:	4615      	mov	r5, r2
  m_blockDev = dev;
    31ce:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    31d2:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    31d4:	6041      	str	r1, [r0, #4]
    31d6:	461a      	mov	r2, r3
    31d8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    31dc:	4619      	mov	r1, r3
  m_fatType = 0;
    31de:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    31e2:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    31e4:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    31e6:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    31ea:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    31ee:	4638      	mov	r0, r7
    31f0:	f003 fe5e 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    31f4:	2d04      	cmp	r5, #4
    31f6:	d80d      	bhi.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    31f8:	4606      	mov	r6, r0
    31fa:	b158      	cbz	r0, 3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    31fc:	b1bd      	cbz	r5, 322e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    31fe:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    3200:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    3204:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    3208:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    320c:	d102      	bne.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    320e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    3212:	b90b      	cbnz	r3, 3218 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3214:	2000      	movs	r0, #0
}
    3216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    3218:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    321c:	4638      	mov	r0, r7
    321e:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    3222:	4629      	mov	r1, r5
    3224:	f003 fe44 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3228:	4606      	mov	r6, r0
    322a:	2800      	cmp	r0, #0
    322c:	d0f2      	beq.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    322e:	2205      	movs	r2, #5
    3230:	491a      	ldr	r1, [pc, #104]	; (329c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    3232:	1cf0      	adds	r0, r6, #3
    3234:	f008 fa3c 	bl	b6b0 <strncmp>
    3238:	2800      	cmp	r0, #0
    323a:	d1eb      	bne.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    323c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    3240:	2b09      	cmp	r3, #9
    3242:	d1e7      	bne.n	3214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3244:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    3246:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3248:	442b      	add	r3, r5
    324a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    324e:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3250:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3254:	6db3      	ldr	r3, [r6, #88]	; 0x58
    3256:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3258:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    325a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    325e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3260:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3264:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3266:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    326a:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    326e:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3272:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3274:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3278:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    327c:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    3280:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3282:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    3286:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    328a:	462a      	mov	r2, r5
    328c:	f7ff fdbc 	bl	2e08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3290:	2340      	movs	r3, #64	; 0x40
  return true;
    3292:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3294:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    3298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    329a:	bf00      	nop
    329c:	20000810 	.word	0x20000810

000032a0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    32a0:	b510      	push	{r4, lr}
    32a2:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    32a4:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    32a8:	f7ff fe64 	bl	2f74 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    32ac:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    32b0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    32b2:	b2db      	uxtb	r3, r3
}
    32b4:	4098      	lsls	r0, r3
    32b6:	bd10      	pop	{r4, pc}

000032b8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    32b8:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    32ba:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    32be:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    32c0:	2300      	movs	r3, #0
    32c2:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    32c4:	4668      	mov	r0, sp
    32c6:	4621      	mov	r1, r4
    32c8:	930c      	str	r3, [sp, #48]	; 0x30
    32ca:	f7ff f901 	bl	24d0 <ExFatFile::open(ExFatFile*, char const*, int)>
    32ce:	4605      	mov	r5, r0
    32d0:	b1d8      	cbz	r0, 330a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    32d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    32d6:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    32da:	d019      	beq.n	3310 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    32dc:	46ee      	mov	lr, sp
    32de:	46a4      	mov	ip, r4
    32e0:	ae0c      	add	r6, sp, #48	; 0x30
    32e2:	4674      	mov	r4, lr
    32e4:	f10c 0c10 	add.w	ip, ip, #16
    32e8:	f10e 0e10 	add.w	lr, lr, #16
    32ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    32ee:	42b4      	cmp	r4, r6
    32f0:	f84c 0c10 	str.w	r0, [ip, #-16]
    32f4:	f84c 1c0c 	str.w	r1, [ip, #-12]
    32f8:	f84c 2c08 	str.w	r2, [ip, #-8]
    32fc:	f84c 3c04 	str.w	r3, [ip, #-4]
    3300:	d1ef      	bne.n	32e2 <ExFatVolume::chdir(char const*)+0x2a>
    3302:	f8de 0000 	ldr.w	r0, [lr]
    3306:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    330a:	4628      	mov	r0, r5
    330c:	b00e      	add	sp, #56	; 0x38
    330e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    3310:	461d      	mov	r5, r3
}
    3312:	4628      	mov	r0, r5
    3314:	b00e      	add	sp, #56	; 0x38
    3316:	bd70      	pop	{r4, r5, r6, pc}

00003318 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    3318:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    331a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    331e:	b082      	sub	sp, #8
    3320:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3322:	2b00      	cmp	r3, #0
    3324:	db0d      	blt.n	3342 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    3326:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3328:	f105 0028 	add.w	r0, r5, #40	; 0x28
    332c:	f003 fd94 	bl	6e58 <FsCache::sync()>
    3330:	2800      	cmp	r0, #0
    3332:	d13b      	bne.n	33ac <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    3334:	7863      	ldrb	r3, [r4, #1]
  return false;
    3336:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3338:	f043 0301 	orr.w	r3, r3, #1
    333c:	7063      	strb	r3, [r4, #1]
}
    333e:	b002      	add	sp, #8
    3340:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3342:	6880      	ldr	r0, [r0, #8]
    3344:	2201      	movs	r2, #1
    3346:	69a1      	ldr	r1, [r4, #24]
    3348:	3028      	adds	r0, #40	; 0x28
    334a:	f003 fdb1 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    334e:	2800      	cmp	r0, #0
    3350:	d0f0      	beq.n	3334 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3352:	88a5      	ldrh	r5, [r4, #4]
    3354:	f005 050f 	and.w	r5, r5, #15
    3358:	016b      	lsls	r3, r5, #5
    335a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    335e:	5cc3      	ldrb	r3, [r0, r3]
    3360:	2be5      	cmp	r3, #229	; 0xe5
    3362:	d0e7      	beq.n	3334 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    3364:	7823      	ldrb	r3, [r4, #0]
    3366:	071b      	lsls	r3, r3, #28
    3368:	d501      	bpl.n	336e <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    336a:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    336c:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    336e:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    3370:	4915      	ldr	r1, [pc, #84]	; (33c8 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3372:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3374:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    3376:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3378:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    337a:	b166      	cbz	r6, 3396 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    337c:	f10d 0203 	add.w	r2, sp, #3
    3380:	f10d 0106 	add.w	r1, sp, #6
    3384:	a801      	add	r0, sp, #4
    3386:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    3388:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    338c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3390:	832b      	strh	r3, [r5, #24]
    3392:	826b      	strh	r3, [r5, #18]
    3394:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3396:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    3398:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    339e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    33a2:	70a3      	strb	r3, [r4, #2]
    33a4:	f003 fd58 	bl	6e58 <FsCache::sync()>
    33a8:	2800      	cmp	r0, #0
    33aa:	d0c3      	beq.n	3334 <FatFile::sync() [clone .part.0]+0x1c>
    33ac:	f505 700e 	add.w	r0, r5, #568	; 0x238
    33b0:	f003 fd52 	bl	6e58 <FsCache::sync()>
    33b4:	2800      	cmp	r0, #0
    33b6:	d0bd      	beq.n	3334 <FatFile::sync() [clone .part.0]+0x1c>
    33b8:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    33ba:	6803      	ldr	r3, [r0, #0]
    33bc:	6a1b      	ldr	r3, [r3, #32]
    33be:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    33c0:	2800      	cmp	r0, #0
    33c2:	d0b7      	beq.n	3334 <FatFile::sync() [clone .part.0]+0x1c>
    33c4:	e7bb      	b.n	333e <FatFile::sync() [clone .part.0]+0x26>
    33c6:	bf00      	nop
    33c8:	20026874 	.word	0x20026874

000033cc <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    33cc:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    33ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    33d0:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    33d4:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    33d6:	6880      	ldr	r0, [r0, #8]
    33d8:	4629      	mov	r1, r5
    33da:	f001 f9f3 	bl	47c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    33de:	b150      	cbz	r0, 33f6 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    33e0:	b155      	cbz	r5, 33f8 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    33e2:	6923      	ldr	r3, [r4, #16]
    33e4:	3501      	adds	r5, #1
    33e6:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    33e8:	78a3      	ldrb	r3, [r4, #2]
    33ea:	bf18      	it	ne
    33ec:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    33f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33f4:	70a3      	strb	r3, [r4, #2]
}
    33f6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    33f8:	78a3      	ldrb	r3, [r4, #2]
    33fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33fe:	e7f7      	b.n	33f0 <FatFile::addCluster()+0x24>

00003400 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    3400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    3402:	7804      	ldrb	r4, [r0, #0]
    3404:	f014 0420 	ands.w	r4, r4, #32
    3408:	d104      	bne.n	3414 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    340a:	4b1a      	ldr	r3, [pc, #104]	; (3474 <FatFile::addDirCluster()+0x74>)
    340c:	4605      	mov	r5, r0
    340e:	6942      	ldr	r2, [r0, #20]
    3410:	429a      	cmp	r2, r3
    3412:	d302      	bcc.n	341a <FatFile::addDirCluster()+0x1a>
  return false;
    3414:	2700      	movs	r7, #0
}
    3416:	4638      	mov	r0, r7
    3418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    341a:	f7ff ffd7 	bl	33cc <FatFile::addCluster()>
    341e:	4607      	mov	r7, r0
    3420:	2800      	cmp	r0, #0
    3422:	d0f7      	beq.n	3414 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    3424:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3426:	692e      	ldr	r6, [r5, #16]
    3428:	7982      	ldrb	r2, [r0, #6]
    342a:	3e02      	subs	r6, #2
    342c:	6941      	ldr	r1, [r0, #20]
    342e:	4096      	lsls	r6, r2
    3430:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3432:	7901      	ldrb	r1, [r0, #4]
    3434:	b1a9      	cbz	r1, 3462 <FatFile::addDirCluster()+0x62>
    3436:	4621      	mov	r1, r4
    3438:	e006      	b.n	3448 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    343a:	f008 f8e7 	bl	b60c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    343e:	68a8      	ldr	r0, [r5, #8]
    3440:	b2e1      	uxtb	r1, r4
    3442:	7902      	ldrb	r2, [r0, #4]
    3444:	428a      	cmp	r2, r1
    3446:	d90b      	bls.n	3460 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    3448:	4431      	add	r1, r6
    344a:	2205      	movs	r2, #5
    344c:	3028      	adds	r0, #40	; 0x28
    344e:	3401      	adds	r4, #1
    3450:	f003 fd2e 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    3454:	f44f 7200 	mov.w	r2, #512	; 0x200
    3458:	2100      	movs	r1, #0
    if (!pc) {
    345a:	2800      	cmp	r0, #0
    345c:	d1ed      	bne.n	343a <FatFile::addDirCluster()+0x3a>
    345e:	e7d9      	b.n	3414 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3460:	7982      	ldrb	r2, [r0, #6]
    3462:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    3466:	6969      	ldr	r1, [r5, #20]
}
    3468:	4638      	mov	r0, r7
    346a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    346c:	fa11 f383 	uxtah	r3, r1, r3
    3470:	616b      	str	r3, [r5, #20]
}
    3472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3474:	001ffe00 	.word	0x001ffe00

00003478 <FatFile::close()>:
bool FatFile::close() {
    3478:	b510      	push	{r4, lr}
  if (!isOpen()) {
    347a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    347c:	4604      	mov	r4, r0
  if (!isOpen()) {
    347e:	b12b      	cbz	r3, 348c <FatFile::close()+0x14>
    3480:	f7ff ff4a 	bl	3318 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    3484:	2300      	movs	r3, #0
    3486:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3488:	70a3      	strb	r3, [r4, #2]
}
    348a:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    348c:	2300      	movs	r3, #0
    return true;
    348e:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    3490:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3492:	70a3      	strb	r3, [r4, #2]
}
    3494:	bd10      	pop	{r4, pc}
    3496:	bf00      	nop

00003498 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    3498:	780b      	ldrb	r3, [r1, #0]
    349a:	f013 0f70 	tst.w	r3, #112	; 0x70
    349e:	d101      	bne.n	34a4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    34a0:	2000      	movs	r0, #0
    34a2:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    34a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    34a6:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    34aa:	b089      	sub	sp, #36	; 0x24
    34ac:	460d      	mov	r5, r1
    34ae:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    34b0:	f000 fe78 	bl	41a4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    34b4:	b138      	cbz	r0, 34c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    34b6:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    34b8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    34ba:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    34bc:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    34be:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    34c0:	f7ff ff9e 	bl	3400 <FatFile::addDirCluster()>
    34c4:	b910      	cbnz	r0, 34cc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    34c6:	2000      	movs	r0, #0
    34c8:	b009      	add	sp, #36	; 0x24
    34ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    34cc:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    34ce:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    34d0:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    34d2:	b16b      	cbz	r3, 34f0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    34d4:	6963      	ldr	r3, [r4, #20]
    34d6:	b133      	cbz	r3, 34e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    34d8:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    34da:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    34dc:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    34e0:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    34e4:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    34e6:	4620      	mov	r0, r4
    34e8:	f7ff ff16 	bl	3318 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    34ec:	2800      	cmp	r0, #0
    34ee:	d0ea      	beq.n	34c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    34f0:	68a0      	ldr	r0, [r4, #8]
    34f2:	2201      	movs	r2, #1
    34f4:	69a1      	ldr	r1, [r4, #24]
    34f6:	3028      	adds	r0, #40	; 0x28
    34f8:	f003 fcda 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    34fc:	2800      	cmp	r0, #0
    34fe:	d0e2      	beq.n	34c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    3500:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3504:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    3506:	f00c 0c0f 	and.w	ip, ip, #15
    350a:	ea4f 134c 	mov.w	r3, ip, lsl #5
    350e:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3512:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    3516:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    3518:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    351a:	6a23      	ldr	r3, [r4, #32]
    351c:	f897 e006 	ldrb.w	lr, [r7, #6]
    3520:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    3522:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3526:	f8dc 2008 	ldr.w	r2, [ip, #8]
    352a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    352e:	fa06 f60e 	lsl.w	r6, r6, lr
    3532:	46ee      	mov	lr, sp
    3534:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3538:	f8dc 0010 	ldr.w	r0, [ip, #16]
    353c:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3540:	f8dc 2018 	ldr.w	r2, [ip, #24]
    3544:	f8dc 301c 	ldr.w	r3, [ip, #28]
    3548:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    354c:	697b      	ldr	r3, [r7, #20]
    354e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3552:	2201      	movs	r2, #1
    3554:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    3556:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    355a:	f8cd 3001 	str.w	r3, [sp, #1]
    355e:	f8cd 3005 	str.w	r3, [sp, #5]
    3562:	f8ad 3009 	strh.w	r3, [sp, #9]
    3566:	f003 fca3 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    356a:	4684      	mov	ip, r0
    356c:	2800      	cmp	r0, #0
    356e:	d0aa      	beq.n	34c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    3570:	272e      	movs	r7, #46	; 0x2e
    3572:	46ee      	mov	lr, sp
    3574:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    3578:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    357a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    357e:	f8cc 0000 	str.w	r0, [ip]
    3582:	f8cc 1004 	str.w	r1, [ip, #4]
    3586:	f8cc 2008 	str.w	r2, [ip, #8]
    358a:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    358e:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    3592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3596:	f8cc 0010 	str.w	r0, [ip, #16]
    359a:	f8cc 1014 	str.w	r1, [ip, #20]
    359e:	f8cc 2018 	str.w	r2, [ip, #24]
    35a2:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    35a6:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    35a8:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    35aa:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    35ae:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    35b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    35b4:	f8cc 0020 	str.w	r0, [ip, #32]
    35b8:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    35bc:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    35c0:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    35c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    35c6:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    35ca:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    35ce:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    35d2:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    35d6:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    35d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    35dc:	f003 fc3c 	bl	6e58 <FsCache::sync()>
    35e0:	2800      	cmp	r0, #0
    35e2:	f43f af70 	beq.w	34c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    35e6:	f504 700e 	add.w	r0, r4, #568	; 0x238
    35ea:	f003 fc35 	bl	6e58 <FsCache::sync()>
    35ee:	2800      	cmp	r0, #0
    35f0:	f43f af69 	beq.w	34c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    35f4:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    35f6:	6803      	ldr	r3, [r0, #0]
    35f8:	6a1b      	ldr	r3, [r3, #32]
}
    35fa:	b009      	add	sp, #36	; 0x24
    35fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3600:	4718      	bx	r3
    3602:	bf00      	nop

00003604 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    3608:	2600      	movs	r6, #0
    360a:	b094      	sub	sp, #80	; 0x50
    360c:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    360e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3610:	9201      	str	r2, [sp, #4]
    3612:	f8ad 6014 	strh.w	r6, [sp, #20]
    3616:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    3618:	2b00      	cmp	r3, #0
    361a:	d141      	bne.n	36a0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    361c:	780b      	ldrb	r3, [r1, #0]
    361e:	460d      	mov	r5, r1
    3620:	f013 0f70 	tst.w	r3, #112	; 0x70
    3624:	d03c      	beq.n	36a0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    3626:	7813      	ldrb	r3, [r2, #0]
    3628:	4604      	mov	r4, r0
    362a:	4616      	mov	r6, r2
    362c:	2b2f      	cmp	r3, #47	; 0x2f
    362e:	d03b      	beq.n	36a8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    3630:	2700      	movs	r7, #0
    3632:	e028      	b.n	3686 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    3634:	9e01      	ldr	r6, [sp, #4]
    3636:	7836      	ldrb	r6, [r6, #0]
    3638:	2e00      	cmp	r6, #0
    363a:	d050      	beq.n	36de <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    363c:	f000 fdb2 	bl	41a4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3640:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    3642:	aa02      	add	r2, sp, #8
    3644:	4629      	mov	r1, r5
    3646:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    3648:	b92b      	cbnz	r3, 3656 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    364a:	f1b8 0f00 	cmp.w	r8, #0
    364e:	d027      	beq.n	36a0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3650:	f7ff ff22 	bl	3498 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3654:	b320      	cbz	r0, 36a0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    3656:	46a6      	mov	lr, r4
    3658:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    365c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3660:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3664:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    366c:	f8de 5000 	ldr.w	r5, [lr]
    3670:	4620      	mov	r0, r4
  if (!isOpen()) {
    3672:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    3674:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    3678:	b10b      	cbz	r3, 367e <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    367a:	f7ff fe4d 	bl	3318 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    367e:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3680:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    3682:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3684:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    3686:	4631      	mov	r1, r6
    3688:	ab01      	add	r3, sp, #4
    368a:	aa02      	add	r2, sp, #8
    368c:	4620      	mov	r0, r4
    368e:	f000 fed5 	bl	443c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3692:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    3694:	aa02      	add	r2, sp, #8
    3696:	4629      	mov	r1, r5
    3698:	2300      	movs	r3, #0
    369a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    369c:	2e00      	cmp	r6, #0
    369e:	d1c9      	bne.n	3634 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    36a0:	2000      	movs	r0, #0
}
    36a2:	b014      	add	sp, #80	; 0x50
    36a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    36a8:	3601      	adds	r6, #1
    36aa:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    36ac:	7833      	ldrb	r3, [r6, #0]
    36ae:	2b2f      	cmp	r3, #47	; 0x2f
    36b0:	d0fa      	beq.n	36a8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    36b2:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    36b4:	2224      	movs	r2, #36	; 0x24
    36b6:	2100      	movs	r1, #0
    36b8:	a80b      	add	r0, sp, #44	; 0x2c
    36ba:	f007 ffa7 	bl	b60c <memset>
  m_vol = vol;
    36be:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    36c0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    36c2:	2b10      	cmp	r3, #16
    36c4:	d003      	beq.n	36ce <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    36c6:	2b20      	cmp	r3, #32
    36c8:	d00f      	beq.n	36ea <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    36ca:	2b0c      	cmp	r3, #12
    36cc:	d1e8      	bne.n	36a0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    36ce:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    36d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    36d4:	2301      	movs	r3, #1
    parent = &tmpDir;
    36d6:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    36d8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    36dc:	e7a8      	b.n	3630 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    36de:	aa02      	add	r2, sp, #8
    36e0:	f7ff feda 	bl	3498 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    36e4:	b014      	add	sp, #80	; 0x50
    36e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    36ea:	2340      	movs	r3, #64	; 0x40
    36ec:	e7f0      	b.n	36d0 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    36ee:	bf00      	nop

000036f0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    36f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36f4:	2500      	movs	r5, #0
    36f6:	b094      	sub	sp, #80	; 0x50
    36f8:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    36fa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    36fc:	9201      	str	r2, [sp, #4]
    36fe:	9502      	str	r5, [sp, #8]
    3700:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    3704:	2b00      	cmp	r3, #0
    3706:	d137      	bne.n	3778 <FatFile::open(FatFile*, char const*, int)+0x88>
    3708:	780b      	ldrb	r3, [r1, #0]
    370a:	460e      	mov	r6, r1
    370c:	f013 0f70 	tst.w	r3, #112	; 0x70
    3710:	d032      	beq.n	3778 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    3712:	7813      	ldrb	r3, [r2, #0]
    3714:	4604      	mov	r4, r0
    3716:	4615      	mov	r5, r2
    3718:	2b2f      	cmp	r3, #47	; 0x2f
    371a:	d031      	beq.n	3780 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    371c:	2700      	movs	r7, #0
    371e:	e01e      	b.n	375e <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    3720:	9d01      	ldr	r5, [sp, #4]
    3722:	782d      	ldrb	r5, [r5, #0]
    3724:	2d00      	cmp	r5, #0
    3726:	d040      	beq.n	37aa <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3728:	f000 fd3c 	bl	41a4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    372c:	46a6      	mov	lr, r4
    372e:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    3732:	b308      	cbz	r0, 3778 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    3734:	4666      	mov	r6, ip
  if (!isOpen()) {
    3736:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    3738:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    373c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3740:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3748:	f8de 3000 	ldr.w	r3, [lr]
    374c:	4620      	mov	r0, r4
    374e:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    3752:	b10d      	cbz	r5, 3758 <FatFile::open(FatFile*, char const*, int)+0x68>
    3754:	f7ff fde0 	bl	3318 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3758:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    375a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    375c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    375e:	4629      	mov	r1, r5
    3760:	ab01      	add	r3, sp, #4
    3762:	aa0b      	add	r2, sp, #44	; 0x2c
    3764:	4620      	mov	r0, r4
    3766:	f000 fe69 	bl	443c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    376a:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    376c:	aa0b      	add	r2, sp, #44	; 0x2c
    376e:	4631      	mov	r1, r6
    3770:	2300      	movs	r3, #0
    3772:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3774:	2d00      	cmp	r5, #0
    3776:	d1d3      	bne.n	3720 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    3778:	2000      	movs	r0, #0
}
    377a:	b014      	add	sp, #80	; 0x50
    377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3780:	3501      	adds	r5, #1
    3782:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3784:	7829      	ldrb	r1, [r5, #0]
    3786:	292f      	cmp	r1, #47	; 0x2f
    3788:	d0fa      	beq.n	3780 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    378a:	b9a9      	cbnz	r1, 37b8 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    378c:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    378e:	2224      	movs	r2, #36	; 0x24
    3790:	4620      	mov	r0, r4
    3792:	f007 ff3b 	bl	b60c <memset>
  m_vol = vol;
    3796:	60a5      	str	r5, [r4, #8]
    3798:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    379a:	2b10      	cmp	r3, #16
    379c:	d003      	beq.n	37a6 <FatFile::open(FatFile*, char const*, int)+0xb6>
    379e:	2b20      	cmp	r3, #32
    37a0:	d022      	beq.n	37e8 <FatFile::open(FatFile*, char const*, int)+0xf8>
    37a2:	2b0c      	cmp	r3, #12
    37a4:	d1e8      	bne.n	3778 <FatFile::open(FatFile*, char const*, int)+0x88>
    37a6:	2220      	movs	r2, #32
    37a8:	e01f      	b.n	37ea <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    37aa:	4643      	mov	r3, r8
    37ac:	aa0b      	add	r2, sp, #44	; 0x2c
    37ae:	f000 fcf9 	bl	41a4 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    37b2:	b014      	add	sp, #80	; 0x50
    37b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    37b8:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    37ba:	2224      	movs	r2, #36	; 0x24
    37bc:	2100      	movs	r1, #0
    37be:	a802      	add	r0, sp, #8
    37c0:	f007 ff24 	bl	b60c <memset>
  m_vol = vol;
    37c4:	9604      	str	r6, [sp, #16]
    37c6:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    37c8:	2b10      	cmp	r3, #16
    37ca:	d003      	beq.n	37d4 <FatFile::open(FatFile*, char const*, int)+0xe4>
    37cc:	2b20      	cmp	r3, #32
    37ce:	d003      	beq.n	37d8 <FatFile::open(FatFile*, char const*, int)+0xe8>
    37d0:	2b0c      	cmp	r3, #12
    37d2:	d1d1      	bne.n	3778 <FatFile::open(FatFile*, char const*, int)+0x88>
    37d4:	2320      	movs	r3, #32
    37d6:	e000      	b.n	37da <FatFile::open(FatFile*, char const*, int)+0xea>
    37d8:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    37da:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    37de:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    37e0:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    37e2:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    37e6:	e799      	b.n	371c <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    37e8:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    37ea:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    37ec:	7022      	strb	r2, [r4, #0]
  return true;
    37ee:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    37f0:	70a3      	strb	r3, [r4, #2]
  return true;
    37f2:	e7c2      	b.n	377a <FatFile::open(FatFile*, char const*, int)+0x8a>

000037f4 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    37f4:	b119      	cbz	r1, 37fe <FatFile::open(FatVolume*, char const*, int)+0xa>
    37f6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    37fa:	f7ff bf79 	b.w	36f0 <FatFile::open(FatFile*, char const*, int)>
}
    37fe:	4608      	mov	r0, r1
    3800:	4770      	bx	lr
    3802:	bf00      	nop

00003804 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3804:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    3806:	7805      	ldrb	r5, [r0, #0]
    3808:	b10d      	cbz	r5, 380e <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    380a:	2000      	movs	r0, #0
}
    380c:	bd70      	pop	{r4, r5, r6, pc}
    380e:	460e      	mov	r6, r1
    3810:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    3812:	2224      	movs	r2, #36	; 0x24
    3814:	4629      	mov	r1, r5
    3816:	f007 fef9 	bl	b60c <memset>
  m_vol = vol;
    381a:	60a6      	str	r6, [r4, #8]
    381c:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    381e:	2b10      	cmp	r3, #16
    3820:	d00b      	beq.n	383a <FatFile::openRoot(FatVolume*)+0x36>
    3822:	2b20      	cmp	r3, #32
    3824:	d003      	beq.n	382e <FatFile::openRoot(FatVolume*)+0x2a>
    3826:	2b0c      	cmp	r3, #12
    3828:	d007      	beq.n	383a <FatFile::openRoot(FatVolume*)+0x36>
    382a:	4628      	mov	r0, r5
}
    382c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    382e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    3830:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3832:	7022      	strb	r2, [r4, #0]
  return true;
    3834:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3836:	70a3      	strb	r3, [r4, #2]
}
    3838:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    383a:	2220      	movs	r2, #32
    383c:	e7f8      	b.n	3830 <FatFile::openRoot(FatVolume*)+0x2c>
    383e:	bf00      	nop

00003840 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    3840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3844:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    3848:	7883      	ldrb	r3, [r0, #2]
    384a:	b083      	sub	sp, #12
    384c:	4605      	mov	r5, r0
  if (!isReadable()) {
    384e:	07df      	lsls	r7, r3, #31
    3850:	f140 808c 	bpl.w	396c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    3854:	4688      	mov	r8, r1
    3856:	7801      	ldrb	r1, [r0, #0]
    3858:	4692      	mov	sl, r2
  if (isFile()) {
    385a:	070e      	lsls	r6, r1, #28
    385c:	f100 8091 	bmi.w	3982 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    3860:	068c      	lsls	r4, r1, #26
    3862:	d508      	bpl.n	3876 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3864:	6883      	ldr	r3, [r0, #8]
    3866:	895a      	ldrh	r2, [r3, #10]
    3868:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    386a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    386e:	b29b      	uxth	r3, r3
    3870:	459a      	cmp	sl, r3
    3872:	bf28      	it	cs
    3874:	469a      	movcs	sl, r3
  while (toRead) {
    3876:	f1ba 0f00 	cmp.w	sl, #0
    387a:	f000 80af 	beq.w	39dc <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    387e:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3880:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3884:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3886:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    3888:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    388c:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3890:	68af      	ldr	r7, [r5, #8]
    3892:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    3896:	d53d      	bpl.n	3914 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    3898:	6a39      	ldr	r1, [r7, #32]
    389a:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    389e:	f1bb 0f00 	cmp.w	fp, #0
    38a2:	d151      	bne.n	3948 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    38a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    38a8:	d34e      	bcc.n	3948 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    38aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    38ac:	4291      	cmp	r1, r2
    38ae:	d04b      	beq.n	3948 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    38b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    38b4:	f0c0 8082 	bcc.w	39bc <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    38b8:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    38ba:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    38bc:	0680      	lsls	r0, r0, #26
    38be:	d405      	bmi.n	38cc <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    38c0:	7938      	ldrb	r0, [r7, #4]
    38c2:	eba0 0009 	sub.w	r0, r0, r9
    38c6:	4283      	cmp	r3, r0
    38c8:	bf28      	it	cs
    38ca:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    38cc:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    38ce:	ea4f 2443 	mov.w	r4, r3, lsl #9
    38d2:	d80c      	bhi.n	38ee <FatFile::read(void*, unsigned int)+0xae>
    38d4:	18c8      	adds	r0, r1, r3
    38d6:	4282      	cmp	r2, r0
    38d8:	d209      	bcs.n	38ee <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    38da:	f107 0028 	add.w	r0, r7, #40	; 0x28
    38de:	e9cd 1300 	strd	r1, r3, [sp]
    38e2:	f003 fab9 	bl	6e58 <FsCache::sync()>
    38e6:	e9dd 1300 	ldrd	r1, r3, [sp]
    38ea:	2800      	cmp	r0, #0
    38ec:	d03e      	beq.n	396c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    38ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    38f0:	6802      	ldr	r2, [r0, #0]
    38f2:	6957      	ldr	r7, [r2, #20]
    38f4:	4642      	mov	r2, r8
    38f6:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    38f8:	2800      	cmp	r0, #0
    38fa:	d037      	beq.n	396c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    38fc:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    38fe:	1b36      	subs	r6, r6, r4
    dst += n;
    3900:	44a0      	add	r8, r4
    m_curPosition += n;
    3902:	4422      	add	r2, r4
    3904:	616a      	str	r2, [r5, #20]
  while (toRead) {
    3906:	d069      	beq.n	39dc <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    3908:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    390a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    390e:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    3910:	0688      	lsls	r0, r1, #26
    3912:	d4c1      	bmi.n	3898 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3914:	f897 9005 	ldrb.w	r9, [r7, #5]
    3918:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    391c:	f1bb 0f00 	cmp.w	fp, #0
    3920:	d136      	bne.n	3990 <FatFile::read(void*, unsigned int)+0x150>
    3922:	f1b9 0f00 	cmp.w	r9, #0
    3926:	d133      	bne.n	3990 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    3928:	2a00      	cmp	r2, #0
    392a:	d133      	bne.n	3994 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    392c:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    392e:	bf4c      	ite	mi
    3930:	6a3a      	ldrmi	r2, [r7, #32]
    3932:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    3934:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3936:	3a02      	subs	r2, #2
    3938:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    393a:	6979      	ldr	r1, [r7, #20]
    393c:	4082      	lsls	r2, r0
    393e:	4449      	add	r1, r9
    3940:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    3942:	f1bb 0f00 	cmp.w	fp, #0
    3946:	d0ad      	beq.n	38a4 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    3948:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    394c:	2200      	movs	r2, #0
    394e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3952:	42b4      	cmp	r4, r6
    3954:	bf28      	it	cs
    3956:	4634      	movcs	r4, r6
    3958:	f003 faaa 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    395c:	b130      	cbz	r0, 396c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    395e:	eb00 010b 	add.w	r1, r0, fp
    3962:	4622      	mov	r2, r4
    3964:	4640      	mov	r0, r8
    3966:	f004 f881 	bl	7a6c <memcpy>
    396a:	e7c7      	b.n	38fc <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    396c:	786b      	ldrb	r3, [r5, #1]
  return -1;
    396e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3972:	f043 0302 	orr.w	r3, r3, #2
    3976:	706b      	strb	r3, [r5, #1]
}
    3978:	b003      	add	sp, #12
    397a:	ecbd 8b02 	vpop	{d8}
    397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3982:	69c3      	ldr	r3, [r0, #28]
    3984:	6942      	ldr	r2, [r0, #20]
    3986:	1a9b      	subs	r3, r3, r2
    3988:	459a      	cmp	sl, r3
    398a:	bf28      	it	cs
    398c:	469a      	movcs	sl, r3
    398e:	e772      	b.n	3876 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    3990:	692a      	ldr	r2, [r5, #16]
    3992:	e7d0      	b.n	3936 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3994:	070b      	lsls	r3, r1, #28
    3996:	d505      	bpl.n	39a4 <FatFile::read(void*, unsigned int)+0x164>
    3998:	78aa      	ldrb	r2, [r5, #2]
    399a:	0654      	lsls	r4, r2, #25
    399c:	d502      	bpl.n	39a4 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    399e:	692a      	ldr	r2, [r5, #16]
    39a0:	3201      	adds	r2, #1
    39a2:	e7c7      	b.n	3934 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    39a4:	ee18 2a10 	vmov	r2, s16
    39a8:	4638      	mov	r0, r7
    39aa:	6929      	ldr	r1, [r5, #16]
    39ac:	f000 ff58 	bl	4860 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    39b0:	2800      	cmp	r0, #0
    39b2:	dbdb      	blt.n	396c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    39b4:	d00c      	beq.n	39d0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    39b6:	68af      	ldr	r7, [r5, #8]
    39b8:	692a      	ldr	r2, [r5, #16]
    39ba:	e7bc      	b.n	3936 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    39bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    39be:	4642      	mov	r2, r8
    39c0:	6803      	ldr	r3, [r0, #0]
    39c2:	691b      	ldr	r3, [r3, #16]
    39c4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    39c6:	2800      	cmp	r0, #0
    39c8:	d0d0      	beq.n	396c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    39ca:	f44f 7400 	mov.w	r4, #512	; 0x200
    39ce:	e795      	b.n	38fc <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    39d0:	782b      	ldrb	r3, [r5, #0]
    39d2:	f013 0f70 	tst.w	r3, #112	; 0x70
    39d6:	d0c9      	beq.n	396c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    39d8:	ebaa 0a06 	sub.w	sl, sl, r6
    39dc:	4650      	mov	r0, sl
}
    39de:	b003      	add	sp, #12
    39e0:	ecbd 8b02 	vpop	{d8}
    39e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000039e8 <FatFile::peek()>:
int FatFile::peek() {
    39e8:	b570      	push	{r4, r5, r6, lr}
    39ea:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    39ec:	2201      	movs	r2, #1
    39ee:	4604      	mov	r4, r0
    39f0:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    39f4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    39f8:	f7ff ff22 	bl	3840 <FatFile::read(void*, unsigned int)>
    39fc:	2801      	cmp	r0, #1
    39fe:	bf0c      	ite	eq
    3a00:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3a04:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    3a08:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3a0c:	b002      	add	sp, #8
    3a0e:	bd70      	pop	{r4, r5, r6, pc}

00003a10 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a10:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3a12:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3a16:	b530      	push	{r4, r5, lr}
    3a18:	4604      	mov	r4, r0
    3a1a:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3a1c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3a20:	d009      	beq.n	3a36 <FatFile::readDirCache(bool)+0x26>
    3a22:	2901      	cmp	r1, #1
    3a24:	d107      	bne.n	3a36 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    3a26:	3320      	adds	r3, #32
    3a28:	6143      	str	r3, [r0, #20]
    return m_buffer;
    3a2a:	68a0      	ldr	r0, [r4, #8]
    3a2c:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3a2e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3a32:	b003      	add	sp, #12
    3a34:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    3a36:	2201      	movs	r2, #1
    3a38:	f10d 0107 	add.w	r1, sp, #7
    3a3c:	4620      	mov	r0, r4
    3a3e:	f7ff feff 	bl	3840 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    3a42:	b240      	sxtb	r0, r0
    3a44:	2801      	cmp	r0, #1
    3a46:	d103      	bne.n	3a50 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    3a48:	6963      	ldr	r3, [r4, #20]
    3a4a:	331f      	adds	r3, #31
    3a4c:	6163      	str	r3, [r4, #20]
    3a4e:	e7ec      	b.n	3a2a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3a50:	2000      	movs	r0, #0
    3a52:	e7ee      	b.n	3a32 <FatFile::readDirCache(bool)+0x22>

00003a54 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    3a58:	7803      	ldrb	r3, [r0, #0]
    3a5a:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3a5c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d039      	beq.n	3ad6 <FatFile::seekSet(unsigned long)+0x82>
    3a62:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3a64:	6941      	ldr	r1, [r0, #20]
    3a66:	42a9      	cmp	r1, r5
    3a68:	d042      	beq.n	3af0 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    3a6a:	2d00      	cmp	r5, #0
    3a6c:	d037      	beq.n	3ade <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3a6e:	0718      	lsls	r0, r3, #28
    3a70:	d52a      	bpl.n	3ac8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3a72:	69e2      	ldr	r2, [r4, #28]
    3a74:	42aa      	cmp	r2, r5
    3a76:	d32e      	bcc.n	3ad6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3a78:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3a7c:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    3a7e:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3a80:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3a84:	f012 0f40 	tst.w	r2, #64	; 0x40
    3a88:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3a8c:	b2c0      	uxtb	r0, r0
    3a8e:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3a92:	d130      	bne.n	3af6 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3a94:	1e4a      	subs	r2, r1, #1
    3a96:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3a98:	b109      	cbz	r1, 3a9e <FatFile::seekSet(unsigned long)+0x4a>
    3a9a:	4296      	cmp	r6, r2
    3a9c:	d22f      	bcs.n	3afe <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3a9e:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    3aa0:	bf4c      	ite	mi
    3aa2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    3aa6:	6a23      	ldrpl	r3, [r4, #32]
    3aa8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3aaa:	f104 0810 	add.w	r8, r4, #16
    3aae:	e006      	b.n	3abe <FatFile::seekSet(unsigned long)+0x6a>
    3ab0:	6921      	ldr	r1, [r4, #16]
    3ab2:	3e01      	subs	r6, #1
    3ab4:	68a0      	ldr	r0, [r4, #8]
    3ab6:	f000 fed3 	bl	4860 <FatPartition::fatGet(unsigned long, unsigned long*)>
    3aba:	2800      	cmp	r0, #0
    3abc:	dd0b      	ble.n	3ad6 <FatFile::seekSet(unsigned long)+0x82>
    3abe:	4642      	mov	r2, r8
  while (nNew--) {
    3ac0:	2e00      	cmp	r6, #0
    3ac2:	d1f5      	bne.n	3ab0 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3ac4:	78a2      	ldrb	r2, [r4, #2]
    3ac6:	e00c      	b.n	3ae2 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3ac8:	069a      	lsls	r2, r3, #26
    3aca:	d5d5      	bpl.n	3a78 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    3acc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    3ace:	895b      	ldrh	r3, [r3, #10]
    3ad0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3ad4:	d9f6      	bls.n	3ac4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3ad6:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3ad8:	6127      	str	r7, [r4, #16]
}
    3ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ade:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    3ae0:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3ae2:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3ae6:	2001      	movs	r0, #1
  m_curPosition = pos;
    3ae8:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3aea:	70a2      	strb	r2, [r4, #2]
}
    3aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3af0:	2001      	movs	r0, #1
}
    3af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3af6:	6a23      	ldr	r3, [r4, #32]
    3af8:	4433      	add	r3, r6
    3afa:	6123      	str	r3, [r4, #16]
    goto done;
    3afc:	e7f1      	b.n	3ae2 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    3afe:	1ab6      	subs	r6, r6, r2
    3b00:	e7d3      	b.n	3aaa <FatFile::seekSet(unsigned long)+0x56>
    3b02:	bf00      	nop

00003b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b08:	460e      	mov	r6, r1
    3b0a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3b0c:	2100      	movs	r1, #0
    3b0e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3b10:	4604      	mov	r4, r0
    3b12:	4698      	mov	r8, r3
    3b14:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3b18:	f007 fd78 	bl	b60c <memset>
  m_vol = dirFile->m_vol;
    3b1c:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3b1e:	6a33      	ldr	r3, [r6, #32]
    3b20:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    3b24:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3b26:	f005 050f 	and.w	r5, r5, #15
    3b2a:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3b2e:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3b32:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    3b34:	070b      	lsls	r3, r1, #28
    3b36:	d411      	bmi.n	3b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    3b38:	f001 0117 	and.w	r1, r1, #23
    3b3c:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    3b3e:	7ad3      	ldrb	r3, [r2, #11]
    3b40:	f013 0f18 	tst.w	r3, #24
    3b44:	d102      	bne.n	3b4c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3b46:	f041 0108 	orr.w	r1, r1, #8
    3b4a:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3b4c:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3b50:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3b52:	2b01      	cmp	r3, #1
    3b54:	d038      	beq.n	3bc8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    3b56:	2b02      	cmp	r3, #2
    3b58:	d006      	beq.n	3b68 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    3b5a:	b1f3      	cbz	r3, 3b9a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    3b5c:	2300      	movs	r3, #0
  return false;
    3b5e:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3b60:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3b62:	70a3      	strb	r3, [r4, #2]
}
    3b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3b68:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    3b6a:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    3b6c:	06cd      	lsls	r5, r1, #27
    3b6e:	d4f5      	bmi.n	3b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3b70:	07ce      	lsls	r6, r1, #31
    3b72:	d4f3      	bmi.n	3b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3b74:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    3b78:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3b7c:	ea43 0301 	orr.w	r3, r3, r1
    3b80:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    3b82:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3b84:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3b86:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    3b88:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3b8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3b8e:	d012      	beq.n	3bb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3b90:	bb19      	cbnz	r1, 3bda <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b96:	70a3      	strb	r3, [r4, #2]
    3b98:	e010      	b.n	3bbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    3b9a:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3b9e:	d1dd      	bne.n	3b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3ba0:	f008 0308 	and.w	r3, r8, #8
    3ba4:	f043 0301 	orr.w	r3, r3, #1
    3ba8:	70a3      	strb	r3, [r4, #2]
    3baa:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3bac:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    3bae:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    3bb0:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3bb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    3bb6:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    3bb8:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3bba:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3bbc:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3bc0:	d104      	bne.n	3bcc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    3bc2:	2001      	movs	r0, #1
}
    3bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3bc8:	2302      	movs	r3, #2
    3bca:	e7ce      	b.n	3b6a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3bcc:	69e1      	ldr	r1, [r4, #28]
    3bce:	4620      	mov	r0, r4
    3bd0:	f7ff ff40 	bl	3a54 <FatFile::seekSet(unsigned long)>
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d1f4      	bne.n	3bc2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    3bd8:	e7c0      	b.n	3b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3bda:	f000 fe53 	bl	4884 <FatPartition::freeChain(unsigned long)>
    3bde:	2800      	cmp	r0, #0
    3be0:	d0bc      	beq.n	3b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3be2:	78a3      	ldrb	r3, [r4, #2]
    3be4:	e7d5      	b.n	3b92 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    3be6:	bf00      	nop

00003be8 <FatFile::sync()>:
  if (!isOpen()) {
    3be8:	7803      	ldrb	r3, [r0, #0]
    3bea:	b10b      	cbz	r3, 3bf0 <FatFile::sync()+0x8>
    3bec:	f7ff bb94 	b.w	3318 <FatFile::sync() [clone .part.0]>
}
    3bf0:	2001      	movs	r0, #1
    3bf2:	4770      	bx	lr

00003bf4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    3bf8:	7883      	ldrb	r3, [r0, #2]
    3bfa:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3bfc:	079c      	lsls	r4, r3, #30
    3bfe:	d577      	bpl.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3c00:	4688      	mov	r8, r1
    3c02:	0719      	lsls	r1, r3, #28
    3c04:	4691      	mov	r9, r2
    3c06:	f100 80b5 	bmi.w	3d74 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3c0a:	696b      	ldr	r3, [r5, #20]
    3c0c:	eb13 0209 	adds.w	r2, r3, r9
    3c10:	d26e      	bcs.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3c12:	f1b9 0f00 	cmp.w	r9, #0
    3c16:	d040      	beq.n	3c9a <FatFile::write(void const*, unsigned int)+0xa6>
    3c18:	464f      	mov	r7, r9
    m_status = 0;
    3c1a:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3c1e:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3c20:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3c24:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3c26:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3c28:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3c2c:	d13f      	bne.n	3cae <FatFile::write(void const*, unsigned int)+0xba>
    3c2e:	2e00      	cmp	r6, #0
    3c30:	d13d      	bne.n	3cae <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3c32:	2900      	cmp	r1, #0
    3c34:	d06e      	beq.n	3d14 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3c36:	78aa      	ldrb	r2, [r5, #2]
    3c38:	0652      	lsls	r2, r2, #25
    3c3a:	d576      	bpl.n	3d2a <FatFile::write(void const*, unsigned int)+0x136>
    3c3c:	69ea      	ldr	r2, [r5, #28]
    3c3e:	429a      	cmp	r2, r3
    3c40:	d973      	bls.n	3d2a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3c42:	3101      	adds	r1, #1
    3c44:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3c46:	3902      	subs	r1, #2
    3c48:	7982      	ldrb	r2, [r0, #6]
    3c4a:	6943      	ldr	r3, [r0, #20]
    3c4c:	4091      	lsls	r1, r2
    3c4e:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3c50:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3c54:	d353      	bcc.n	3cfe <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    3c56:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3c5a:	d370      	bcc.n	3d3e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3c5c:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3c5e:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3c60:	1b1b      	subs	r3, r3, r4
    3c62:	4293      	cmp	r3, r2
    3c64:	bf28      	it	cs
    3c66:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3c68:	6b42      	ldr	r2, [r0, #52]	; 0x34
    3c6a:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3c6c:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3c70:	d307      	bcc.n	3c82 <FatFile::write(void const*, unsigned int)+0x8e>
    3c72:	185e      	adds	r6, r3, r1
    3c74:	42b2      	cmp	r2, r6
    3c76:	d204      	bcs.n	3c82 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3c78:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3c7c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3c80:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    3c82:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3c84:	4642      	mov	r2, r8
    3c86:	6806      	ldr	r6, [r0, #0]
    3c88:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    3c8a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3c8c:	b380      	cbz	r0, 3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3c8e:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3c90:	1b3f      	subs	r7, r7, r4
    src += n;
    3c92:	44a0      	add	r8, r4
    m_curPosition += n;
    3c94:	4423      	add	r3, r4
    3c96:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3c98:	d1c1      	bne.n	3c1e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3c9a:	69ea      	ldr	r2, [r5, #28]
    3c9c:	429a      	cmp	r2, r3
    3c9e:	d276      	bcs.n	3d8e <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3ca0:	78aa      	ldrb	r2, [r5, #2]
    3ca2:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3ca4:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3ca6:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3caa:	70ab      	strb	r3, [r5, #2]
    3cac:	e025      	b.n	3cfa <FatFile::write(void const*, unsigned int)+0x106>
    3cae:	7982      	ldrb	r2, [r0, #6]
    3cb0:	3902      	subs	r1, #2
    3cb2:	6943      	ldr	r3, [r0, #20]
    3cb4:	4091      	lsls	r1, r2
    3cb6:	4419      	add	r1, r3
                      + sectorOfCluster;
    3cb8:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3cba:	2e00      	cmp	r6, #0
    3cbc:	d0c8      	beq.n	3c50 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3cbe:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3cc2:	2201      	movs	r2, #1
    3cc4:	42bc      	cmp	r4, r7
    3cc6:	bf28      	it	cs
    3cc8:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3cca:	3028      	adds	r0, #40	; 0x28
    3ccc:	f003 f8f0 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3cd0:	b170      	cbz	r0, 3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3cd2:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3cd4:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3cd6:	4622      	mov	r2, r4
    3cd8:	4641      	mov	r1, r8
    3cda:	f003 fec7 	bl	7a6c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3cde:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3ce2:	68a8      	ldr	r0, [r5, #8]
    3ce4:	d1d3      	bne.n	3c8e <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    3ce6:	3028      	adds	r0, #40	; 0x28
    3ce8:	f003 f8b6 	bl	6e58 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3cec:	2800      	cmp	r0, #0
    3cee:	d1ce      	bne.n	3c8e <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3cf0:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3cf2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3cf4:	f043 0301 	orr.w	r3, r3, #1
    3cf8:	706b      	strb	r3, [r5, #1]
}
    3cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3cfe:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3d02:	696a      	ldr	r2, [r5, #20]
    3d04:	69eb      	ldr	r3, [r5, #28]
    3d06:	42bc      	cmp	r4, r7
    3d08:	bf28      	it	cs
    3d0a:	463c      	movcs	r4, r7
    3d0c:	429a      	cmp	r2, r3
    3d0e:	d305      	bcc.n	3d1c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3d10:	2205      	movs	r2, #5
    3d12:	e7da      	b.n	3cca <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3d14:	6a29      	ldr	r1, [r5, #32]
    3d16:	b321      	cbz	r1, 3d62 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3d18:	6129      	str	r1, [r5, #16]
    3d1a:	e794      	b.n	3c46 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3d1c:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3d1e:	f013 0f20 	tst.w	r3, #32
    3d22:	bf14      	ite	ne
    3d24:	2205      	movne	r2, #5
    3d26:	2201      	moveq	r2, #1
    3d28:	e7cf      	b.n	3cca <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3d2a:	f105 0210 	add.w	r2, r5, #16
    3d2e:	f000 fd97 	bl	4860 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3d32:	2800      	cmp	r0, #0
    3d34:	dbdc      	blt.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3d36:	d024      	beq.n	3d82 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3d38:	68a8      	ldr	r0, [r5, #8]
    3d3a:	6929      	ldr	r1, [r5, #16]
    3d3c:	e783      	b.n	3c46 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3d3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3d40:	428b      	cmp	r3, r1
    3d42:	d104      	bne.n	3d4e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3d44:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3d48:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3d4c:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    3d4e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3d50:	4642      	mov	r2, r8
    3d52:	6803      	ldr	r3, [r0, #0]
    3d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d56:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3d58:	2800      	cmp	r0, #0
    3d5a:	d0c9      	beq.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3d5c:	f44f 7400 	mov.w	r4, #512	; 0x200
    3d60:	e795      	b.n	3c8e <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3d62:	4628      	mov	r0, r5
    3d64:	f7ff fb32 	bl	33cc <FatFile::addCluster()>
    3d68:	2800      	cmp	r0, #0
    3d6a:	d0c1      	beq.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3d6c:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3d6e:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3d70:	6229      	str	r1, [r5, #32]
    3d72:	e768      	b.n	3c46 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3d74:	69c1      	ldr	r1, [r0, #28]
    3d76:	f7ff fe6d 	bl	3a54 <FatFile::seekSet(unsigned long)>
    3d7a:	2800      	cmp	r0, #0
    3d7c:	f47f af45 	bne.w	3c0a <FatFile::write(void const*, unsigned int)+0x16>
    3d80:	e7b6      	b.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3d82:	4628      	mov	r0, r5
    3d84:	f7ff fb22 	bl	33cc <FatFile::addCluster()>
    3d88:	2800      	cmp	r0, #0
    3d8a:	d1d5      	bne.n	3d38 <FatFile::write(void const*, unsigned int)+0x144>
    3d8c:	e7b0      	b.n	3cf0 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3d8e:	4b05      	ldr	r3, [pc, #20]	; (3da4 <FatFile::write(void const*, unsigned int)+0x1b0>)
    3d90:	681b      	ldr	r3, [r3, #0]
    3d92:	b12b      	cbz	r3, 3da0 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d94:	78ab      	ldrb	r3, [r5, #2]
    3d96:	4648      	mov	r0, r9
    3d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d9c:	70ab      	strb	r3, [r5, #2]
    3d9e:	e7ac      	b.n	3cfa <FatFile::write(void const*, unsigned int)+0x106>
    3da0:	4648      	mov	r0, r9
    3da2:	e7aa      	b.n	3cfa <FatFile::write(void const*, unsigned int)+0x106>
    3da4:	20026874 	.word	0x20026874

00003da8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3dac:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3dae:	b08d      	sub	sp, #52	; 0x34
    3db0:	4614      	mov	r4, r2
    next = begin;
    3db2:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3db4:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3db6:	4606      	mov	r6, r0
    3db8:	4689      	mov	r9, r1
  FatFile dir = *this;
    3dba:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3dbc:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    3dbe:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    3dc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3dc6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3dc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3dcc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3dce:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    3dd2:	6065      	str	r5, [r4, #4]
    3dd4:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3dd6:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    3dd8:	f8a4 e00c 	strh.w	lr, [r4, #12]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d03f      	beq.n	3e60 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    3de0:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3de4:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3de8:	a803      	add	r0, sp, #12
    3dea:	b289      	uxth	r1, r1
    3dec:	0149      	lsls	r1, r1, #5
    3dee:	f7ff fe31 	bl	3a54 <FatFile::seekSet(unsigned long)>
    3df2:	b350      	cbz	r0, 3e4a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3df4:	2100      	movs	r1, #0
    3df6:	a803      	add	r0, sp, #12
    3df8:	f7ff fe0a 	bl	3a10 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3dfc:	4607      	mov	r7, r0
    3dfe:	b320      	cbz	r0, 3e4a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3e00:	2500      	movs	r5, #0
    3e02:	e00d      	b.n	3e20 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    3e04:	f003 f87c 	bl	6f00 <FsName::get16()>
    3e08:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    3e0a:	4658      	mov	r0, fp
    3e0c:	f003 f8ea 	bl	6fe4 <toUpcase(unsigned short)>
    3e10:	4683      	mov	fp, r0
    3e12:	4640      	mov	r0, r8
    3e14:	f003 f8e6 	bl	6fe4 <toUpcase(unsigned short)>
    3e18:	4583      	cmp	fp, r0
    3e1a:	d116      	bne.n	3e4a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    3e1c:	2d0d      	cmp	r5, #13
    3e1e:	d018      	beq.n	3e52 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    3e20:	b2ea      	uxtb	r2, r5
    3e22:	4639      	mov	r1, r7
    3e24:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3e26:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    3e28:	f000 fb90 	bl	454c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    3e2c:	89a3      	ldrh	r3, [r4, #12]
    3e2e:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    3e30:	4620      	mov	r0, r4
    3e32:	2b00      	cmp	r3, #0
    3e34:	d1e6      	bne.n	3e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    3e36:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3e3a:	4293      	cmp	r3, r2
    3e3c:	d1e2      	bne.n	3e04 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    3e3e:	fabb f08b 	clz	r0, fp
    3e42:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    3e44:	b00d      	add	sp, #52	; 0x34
    3e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    3e4a:	2000      	movs	r0, #0
}
    3e4c:	b00d      	add	sp, #52	; 0x34
    3e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3e52:	f10a 0a01 	add.w	sl, sl, #1
    3e56:	9b01      	ldr	r3, [sp, #4]
    3e58:	fa5f fa8a 	uxtb.w	sl, sl
    3e5c:	4553      	cmp	r3, sl
    3e5e:	d2c1      	bcs.n	3de4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    3e60:	2001      	movs	r0, #1
    3e62:	e7ef      	b.n	3e44 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00003e64 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3e68:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e6a:	b08d      	sub	sp, #52	; 0x34
    3e6c:	4616      	mov	r6, r2
    3e6e:	469a      	mov	sl, r3
  FatFile dir = *this;
    3e70:	f10d 0c0c 	add.w	ip, sp, #12
    3e74:	f102 0415 	add.w	r4, r2, #21
    3e78:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3e7c:	9101      	str	r1, [sp, #4]
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    3e7e:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    3e82:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3e88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3e8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3e8e:	683b      	ldr	r3, [r7, #0]
    3e90:	f8cc 3000 	str.w	r3, [ip]
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3e94:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    3e98:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    3e9c:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3ea0:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3ea2:	fa52 f383 	uxtab	r3, r2, r3
    3ea6:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    3eaa:	d1f3      	bne.n	3e94 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    3eac:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    3eae:	f04f 0800 	mov.w	r8, #0
    next = begin;
    3eb2:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    3eb4:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3eb8:	f1ba 0f00 	cmp.w	sl, #0
    3ebc:	d04e      	beq.n	3f5c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    3ebe:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3ec0:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3ec2:	a803      	add	r0, sp, #12
    3ec4:	1bd9      	subs	r1, r3, r7
    3ec6:	b289      	uxth	r1, r1
    3ec8:	0149      	lsls	r1, r1, #5
    3eca:	f7ff fdc3 	bl	3a54 <FatFile::seekSet(unsigned long)>
    3ece:	2800      	cmp	r0, #0
    3ed0:	d055      	beq.n	3f7e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    3ed2:	2100      	movs	r1, #0
    3ed4:	a803      	add	r0, sp, #12
    3ed6:	f7ff fd9b 	bl	3a10 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3eda:	2800      	cmp	r0, #0
    3edc:	d04f      	beq.n	3f7e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3ede:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3ee0:	4557      	cmp	r7, sl
    3ee2:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ee6:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    3eea:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    3eee:	f04f 0500 	mov.w	r5, #0
    3ef2:	f043 0301 	orr.w	r3, r3, #1
    3ef6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3efa:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3efe:	bf0c      	ite	eq
    3f00:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    3f04:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3f06:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    3f08:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3f0c:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    3f0e:	7303      	strb	r3, [r0, #12]
    3f10:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    3f14:	f880 900d 	strb.w	r9, [r0, #13]
    3f18:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3f1a:	e006      	b.n	3f2a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    3f1c:	f8ab 0000 	strh.w	r0, [fp]
    3f20:	3401      	adds	r4, #1
    3f22:	3501      	adds	r5, #1
    3f24:	f10b 0b02 	add.w	fp, fp, #2
    3f28:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    3f2a:	89b0      	ldrh	r0, [r6, #12]
    3f2c:	b918      	cbnz	r0, 3f36 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    3f2e:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    3f32:	429a      	cmp	r2, r3
    3f34:	d016      	beq.n	3f64 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    3f36:	4630      	mov	r0, r6
    3f38:	f002 ffe2 	bl	6f00 <FsName::get16()>
  if (i < 5) {
    3f3c:	2d04      	cmp	r5, #4
    3f3e:	b2eb      	uxtb	r3, r5
    3f40:	d9ec      	bls.n	3f1c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    3f42:	2b0a      	cmp	r3, #10
    3f44:	d802      	bhi.n	3f4c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    3f46:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    3f4a:	e7e9      	b.n	3f20 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    3f4c:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3f4e:	f8ab 0005 	strh.w	r0, [fp, #5]
    3f52:	d1e5      	bne.n	3f20 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3f54:	3701      	adds	r7, #1
    3f56:	b2ff      	uxtb	r7, r7
    3f58:	45ba      	cmp	sl, r7
    3f5a:	d2b1      	bcs.n	3ec0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3f5c:	2001      	movs	r0, #1

 fail:
  return false;
}
    3f5e:	b00d      	add	sp, #52	; 0x34
    3f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    3f64:	f1b8 0f00 	cmp.w	r8, #0
    3f68:	d006      	beq.n	3f78 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3f6a:	f108 0801 	add.w	r8, r8, #1
    3f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3f72:	fa5f f888 	uxtb.w	r8, r8
    3f76:	e7e1      	b.n	3f3c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    3f78:	f04f 0801 	mov.w	r8, #1
    3f7c:	e7de      	b.n	3f3c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    3f7e:	2000      	movs	r0, #0
}
    3f80:	b00d      	add	sp, #52	; 0x34
    3f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f86:	bf00      	nop

00003f88 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3f88:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3f8a:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3f8e:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    3f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3f96:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3f9a:	4686      	mov	lr, r0
  const char* end = fname->end;
    3f9c:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3f9e:	6051      	str	r1, [r2, #4]
    3fa0:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3fa4:	781a      	ldrb	r2, [r3, #0]
    3fa6:	2a2e      	cmp	r2, #46	; 0x2e
    3fa8:	bf14      	ite	ne
    3faa:	2001      	movne	r0, #1
    3fac:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    3fae:	d103      	bne.n	3fb8 <FatFile::makeSFN(FatLfn_t*)+0x30>
    3fb0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3fb4:	2a2e      	cmp	r2, #46	; 0x2e
    3fb6:	d0fb      	beq.n	3fb0 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    3fb8:	1e61      	subs	r1, r4, #1
    3fba:	4299      	cmp	r1, r3
    3fbc:	d90b      	bls.n	3fd6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3fbe:	460a      	mov	r2, r1
    3fc0:	e002      	b.n	3fc8 <FatFile::makeSFN(FatLfn_t*)+0x40>
    3fc2:	4293      	cmp	r3, r2
    3fc4:	4611      	mov	r1, r2
    3fc6:	d006      	beq.n	3fd6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3fc8:	4611      	mov	r1, r2
    3fca:	3a01      	subs	r2, #1
    3fcc:	f891 c000 	ldrb.w	ip, [r1]
    3fd0:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3fd4:	d1f5      	bne.n	3fc2 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    3fd6:	429c      	cmp	r4, r3
    3fd8:	f04f 0500 	mov.w	r5, #0
    3fdc:	f240 8086 	bls.w	40ec <FatFile::makeSFN(FatLfn_t*)+0x164>
    3fe0:	2607      	movs	r6, #7
    3fe2:	2708      	movs	r7, #8
    3fe4:	46a9      	mov	r9, r5
    3fe6:	46a8      	mov	r8, r5
    3fe8:	e006      	b.n	3ff8 <FatFile::makeSFN(FatLfn_t*)+0x70>
    3fea:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    3fec:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    3fee:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3ff2:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3ff4:	429c      	cmp	r4, r3
    3ff6:	d95b      	bls.n	40b0 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3ff8:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3ffa:	2a2e      	cmp	r2, #46	; 0x2e
    3ffc:	bf08      	it	eq
    3ffe:	4299      	cmpeq	r1, r3
    4000:	d0f3      	beq.n	3fea <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    4002:	2a22      	cmp	r2, #34	; 0x22
    4004:	d00d      	beq.n	4022 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    4006:	2a7c      	cmp	r2, #124	; 0x7c
    4008:	d00b      	beq.n	4022 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    400a:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    400e:	f1bc 0f02 	cmp.w	ip, #2
    4012:	d906      	bls.n	4022 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    4014:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    4018:	f1bc 0f05 	cmp.w	ip, #5
    401c:	d821      	bhi.n	4062 <FatFile::makeSFN(FatLfn_t*)+0xda>
    401e:	2a2d      	cmp	r2, #45	; 0x2d
    4020:	d01f      	beq.n	4062 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    4022:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    4026:	2a80      	cmp	r2, #128	; 0x80
    4028:	d05d      	beq.n	40e6 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    402a:	454e      	cmp	r6, r9
    402c:	d22f      	bcs.n	408e <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    402e:	4299      	cmp	r1, r3
    4030:	bf2c      	ite	cs
    4032:	2000      	movcs	r0, #0
    4034:	2001      	movcc	r0, #1
    4036:	2e0a      	cmp	r6, #10
    4038:	bf08      	it	eq
    403a:	f040 0001 	orreq.w	r0, r0, #1
    403e:	2800      	cmp	r0, #0
    4040:	d047      	beq.n	40d2 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    4042:	f89e 3016 	ldrb.w	r3, [lr, #22]
    4046:	2b20      	cmp	r3, #32
    4048:	d040      	beq.n	40cc <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    404a:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    404e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    4050:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    4052:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    4054:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4056:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    405a:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    405c:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    405e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4062:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    4066:	f1bc 0f05 	cmp.w	ip, #5
    406a:	d9da      	bls.n	4022 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    406c:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    4070:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    4074:	d8d5      	bhi.n	4022 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    4076:	454e      	cmp	r6, r9
    4078:	d3d9      	bcc.n	402e <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    407a:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    407e:	f1bc 0f19 	cmp.w	ip, #25
    4082:	d828      	bhi.n	40d6 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    4084:	3a20      	subs	r2, #32
        lc |= bit;
    4086:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    4088:	b2d2      	uxtb	r2, r2
        lc |= bit;
    408a:	b2ed      	uxtb	r5, r5
    408c:	e001      	b.n	4092 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    408e:	2000      	movs	r0, #0
        c = '_';
    4090:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    4092:	f109 0c01 	add.w	ip, r9, #1
    4096:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    4098:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    409a:	f889 2016 	strb.w	r2, [r9, #22]
    409e:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    40a2:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    40a4:	4691      	mov	r9, r2
    40a6:	bf98      	it	ls
    40a8:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    40ac:	429c      	cmp	r4, r3
    40ae:	d8a3      	bhi.n	3ff8 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    40b0:	f89e 3016 	ldrb.w	r3, [lr, #22]
    40b4:	2b20      	cmp	r3, #32
    40b6:	d009      	beq.n	40cc <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    40b8:	2800      	cmp	r0, #0
    40ba:	d0c6      	beq.n	404a <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    40bc:	ea18 0f05 	tst.w	r8, r5
    40c0:	bf18      	it	ne
    40c2:	2502      	movne	r5, #2
    40c4:	f88e 5015 	strb.w	r5, [lr, #21]
}
    40c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    40cc:	2000      	movs	r0, #0
}
    40ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    40d2:	460b      	mov	r3, r1
    40d4:	e78e      	b.n	3ff4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    40d6:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    40da:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    40de:	bf98      	it	ls
    40e0:	ea47 0808 	orrls.w	r8, r7, r8
    40e4:	e7d5      	b.n	4092 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    40e6:	3301      	adds	r3, #1
        is83 = false;
    40e8:	2000      	movs	r0, #0
    40ea:	e783      	b.n	3ff4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    40ec:	46a8      	mov	r8, r5
    40ee:	e7df      	b.n	40b0 <FatFile::makeSFN(FatLfn_t*)+0x128>

000040f0 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    40f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    40f4:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    40f8:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    40fa:	460f      	mov	r7, r1
    40fc:	4604      	mov	r4, r0
    40fe:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 41a0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    4102:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    4106:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    410a:	f101 0616 	add.w	r6, r1, #22
    410e:	f1b8 0f03 	cmp.w	r8, #3
    4112:	f8db 3000 	ldr.w	r3, [fp]
    4116:	bf28      	it	cs
    4118:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    411c:	442b      	add	r3, r5
    411e:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    4120:	f108 0304 	add.w	r3, r8, #4
    4124:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    4126:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    412a:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    412c:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    412e:	2a09      	cmp	r2, #9
    4130:	f102 0137 	add.w	r1, r2, #55	; 0x37
    4134:	bf98      	it	ls
    4136:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    413a:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    413c:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    413e:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    4140:	4598      	cmp	r8, r3
    4142:	d1f0      	bne.n	4126 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    4144:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    4148:	2100      	movs	r1, #0
    414a:	4620      	mov	r0, r4
    414c:	f883 a016 	strb.w	sl, [r3, #22]
    4150:	f7ff fc80 	bl	3a54 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    4154:	2101      	movs	r1, #1
    4156:	4620      	mov	r0, r4
    4158:	f7ff fc5a 	bl	3a10 <FatFile::readDirCache(bool)>
    415c:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    415e:	220b      	movs	r2, #11
    4160:	4630      	mov	r0, r6
      if (!dir) {
    4162:	b19b      	cbz	r3, 418c <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    4164:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4168:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    416a:	f1bc 0f00 	cmp.w	ip, #0
    416e:	d013      	beq.n	4198 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4170:	7adb      	ldrb	r3, [r3, #11]
    4172:	071b      	lsls	r3, r3, #28
    4174:	d4ee      	bmi.n	4154 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    4176:	f007 f99d 	bl	b4b4 <memcmp>
    417a:	2800      	cmp	r0, #0
    417c:	d1ea      	bne.n	4154 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    417e:	f109 39ff 	add.w	r9, r9, #4294967295
    4182:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    4186:	d1c2      	bne.n	410e <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    4188:	4648      	mov	r0, r9
 fail:
    418a:	e003      	b.n	4194 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    418c:	7860      	ldrb	r0, [r4, #1]
    418e:	fab0 f080 	clz	r0, r0
    4192:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    4194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    4198:	2001      	movs	r0, #1
}
    419a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    419e:	bf00      	nop
    41a0:	20027494 	.word	0x20027494

000041a4 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    41a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41a8:	ed2d 8b02 	vpush	{d8}
    41ac:	b08b      	sub	sp, #44	; 0x2c
    41ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    41b2:	688b      	ldr	r3, [r1, #8]
    41b4:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    41b6:	780b      	ldrb	r3, [r1, #0]
    41b8:	f013 0f70 	tst.w	r3, #112	; 0x70
    41bc:	d053      	beq.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    41be:	9b02      	ldr	r3, [sp, #8]
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d14f      	bne.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    41c6:	6913      	ldr	r3, [r2, #16]
    41c8:	4690      	mov	r8, r2
    41ca:	4a9a      	ldr	r2, [pc, #616]	; (4434 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    41cc:	460e      	mov	r6, r1
    41ce:	330c      	adds	r3, #12
    41d0:	fba2 2303 	umull	r2, r3, r2, r3
    41d4:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    41d8:	f898 3015 	ldrb.w	r3, [r8, #21]
    41dc:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    41de:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    41e0:	f000 80a7 	beq.w	4332 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    41e4:	1c57      	adds	r7, r2, #1
    41e6:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    41e8:	2300      	movs	r3, #0
    seekSet(0);
    41ea:	4630      	mov	r0, r6
    41ec:	4619      	mov	r1, r3
    41ee:	461c      	mov	r4, r3
    41f0:	9306      	str	r3, [sp, #24]
    41f2:	f7ff fc2f 	bl	3a54 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    41f6:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    41fa:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    41fc:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    41fe:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4200:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    4204:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4206:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    4208:	2100      	movs	r1, #0
    420a:	4630      	mov	r0, r6
    420c:	f7ff fc00 	bl	3a10 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4210:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    4214:	4603      	mov	r3, r0
    4216:	b320      	cbz	r0, 4262 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    4218:	7802      	ldrb	r2, [r0, #0]
    421a:	2ae5      	cmp	r2, #229	; 0xe5
    421c:	d029      	beq.n	4272 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    421e:	b342      	cbz	r2, 4272 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    4220:	42bc      	cmp	r4, r7
    4222:	bf38      	it	cc
    4224:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    4226:	2a2e      	cmp	r2, #46	; 0x2e
    4228:	d02b      	beq.n	4282 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    422a:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    422e:	f1bc 0f0f 	cmp.w	ip, #15
    4232:	d054      	beq.n	42de <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    4234:	f01c 0c08 	ands.w	ip, ip, #8
    4238:	d123      	bne.n	4282 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    423a:	f1b9 0f00 	cmp.w	r9, #0
    423e:	f040 80d5 	bne.w	43ec <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4242:	220b      	movs	r2, #11
    4244:	ee18 1a10 	vmov	r1, s16
    4248:	f007 f934 	bl	b4b4 <memcmp>
    424c:	2800      	cmp	r0, #0
    424e:	d1da      	bne.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    4250:	f898 3015 	ldrb.w	r3, [r8, #21]
    4254:	f013 0301 	ands.w	r3, r3, #1
    4258:	f000 80e4 	beq.w	4424 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    425c:	2301      	movs	r3, #1
    425e:	9305      	str	r3, [sp, #20]
    4260:	e7d1      	b.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    4262:	7873      	ldrb	r3, [r6, #1]
    4264:	b183      	cbz	r3, 4288 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    4266:	2000      	movs	r0, #0
}
    4268:	b00b      	add	sp, #44	; 0x2c
    426a:	ecbd 8b02 	vpop	{d8}
    426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4272:	2c00      	cmp	r4, #0
    4274:	bf08      	it	eq
    4276:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    4278:	42bc      	cmp	r4, r7
    427a:	d201      	bcs.n	4280 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    427c:	3401      	adds	r4, #1
    427e:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    4280:	b112      	cbz	r2, 4288 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    4282:	f04f 0900 	mov.w	r9, #0
    4286:	e7be      	b.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    4288:	9b03      	ldr	r3, [sp, #12]
    428a:	059a      	lsls	r2, r3, #22
    428c:	d5eb      	bpl.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    428e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    4292:	3b01      	subs	r3, #1
    4294:	2b01      	cmp	r3, #1
    4296:	d8e6      	bhi.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    4298:	2c00      	cmp	r4, #0
    429a:	bf08      	it	eq
    429c:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    429e:	42bc      	cmp	r4, r7
    42a0:	d303      	bcc.n	42aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    42a2:	e048      	b.n	4336 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    42a4:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    42a6:	42a7      	cmp	r7, r4
    42a8:	d045      	beq.n	4336 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    42aa:	2100      	movs	r1, #0
    42ac:	4630      	mov	r0, r6
    42ae:	f7ff fbaf 	bl	3a10 <FatFile::readDirCache(bool)>
    freeFound++;
    42b2:	1c63      	adds	r3, r4, #1
    if (!dir) {
    42b4:	2800      	cmp	r0, #0
    42b6:	d1f5      	bne.n	42a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    42b8:	7873      	ldrb	r3, [r6, #1]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d1d3      	bne.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    42be:	42a7      	cmp	r7, r4
    42c0:	d939      	bls.n	4336 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    42c2:	9d07      	ldr	r5, [sp, #28]
    42c4:	e005      	b.n	42d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    42c6:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    42c8:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    42cc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    42ce:	42a7      	cmp	r7, r4
    42d0:	d931      	bls.n	4336 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    42d2:	4630      	mov	r0, r6
    42d4:	f7ff f894 	bl	3400 <FatFile::addDirCluster()>
    42d8:	2800      	cmp	r0, #0
    42da:	d1f4      	bne.n	42c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    42dc:	e7c3      	b.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    42de:	f1b9 0f00 	cmp.w	r9, #0
    42e2:	d119      	bne.n	4318 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    42e4:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    42e8:	9904      	ldr	r1, [sp, #16]
    42ea:	4559      	cmp	r1, fp
    42ec:	d18b      	bne.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    42ee:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    42f2:	d088      	beq.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    42f4:	7b43      	ldrb	r3, [r0, #13]
    42f6:	4689      	mov	r9, r1
    42f8:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    42fa:	f1bb 0f01 	cmp.w	fp, #1
    42fe:	d182      	bne.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    4300:	1c69      	adds	r1, r5, #1
    4302:	464b      	mov	r3, r9
    4304:	4642      	mov	r2, r8
    4306:	4630      	mov	r0, r6
    4308:	b289      	uxth	r1, r1
    430a:	f7ff fd4d 	bl	3da8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    430e:	2800      	cmp	r0, #0
    4310:	bf08      	it	eq
    4312:	f04f 0900 	moveq.w	r9, #0
    4316:	e776      	b.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    4318:	f10b 3bff 	add.w	fp, fp, #4294967295
    431c:	fa5f fb8b 	uxtb.w	fp, fp
    4320:	455a      	cmp	r2, fp
    4322:	d1ae      	bne.n	4282 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    4324:	7b43      	ldrb	r3, [r0, #13]
    4326:	9a06      	ldr	r2, [sp, #24]
    4328:	4293      	cmp	r3, r2
    432a:	d0e6      	beq.n	42fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    432c:	f04f 0900 	mov.w	r9, #0
    4330:	e769      	b.n	4206 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    4332:	2701      	movs	r7, #1
    4334:	e758      	b.n	41e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    4336:	9b05      	ldr	r3, [sp, #20]
    4338:	b12b      	cbz	r3, 4346 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    433a:	4641      	mov	r1, r8
    433c:	4630      	mov	r0, r6
    433e:	f7ff fed7 	bl	40f0 <FatFile::makeUniqueSfn(FatLfn_t*)>
    4342:	2800      	cmp	r0, #0
    4344:	d08f      	beq.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    4346:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4348:	4642      	mov	r2, r8
    434a:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    434c:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    434e:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    4352:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    4354:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4356:	4629      	mov	r1, r5
    4358:	f7ff fd84 	bl	3e64 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    435c:	2800      	cmp	r0, #0
    435e:	d082      	beq.n	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4360:	0169      	lsls	r1, r5, #5
    4362:	4630      	mov	r0, r6
    4364:	f7ff fb76 	bl	3a54 <FatFile::seekSet(unsigned long)>
    4368:	2800      	cmp	r0, #0
    436a:	f43f af7c 	beq.w	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    436e:	2100      	movs	r1, #0
    4370:	4630      	mov	r0, r6
    4372:	f7ff fb4d 	bl	3a10 <FatFile::readDirCache(bool)>
  if (!dir) {
    4376:	4604      	mov	r4, r0
    4378:	2800      	cmp	r0, #0
    437a:	f43f af74 	beq.w	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    437e:	2220      	movs	r2, #32
    4380:	2100      	movs	r1, #0
    4382:	f007 f943 	bl	b60c <memset>
  memcpy(dir->name, fname->sfn, 11);
    4386:	f8d8 2016 	ldr.w	r2, [r8, #22]
    438a:	f8d8 301a 	ldr.w	r3, [r8, #26]
    438e:	6022      	str	r2, [r4, #0]
    4390:	6063      	str	r3, [r4, #4]
    4392:	f898 3020 	ldrb.w	r3, [r8, #32]
    4396:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    439a:	72a3      	strb	r3, [r4, #10]
    439c:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    439e:	f898 3015 	ldrb.w	r3, [r8, #21]
    43a2:	f003 0318 	and.w	r3, r3, #24
    43a6:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    43a8:	4b23      	ldr	r3, [pc, #140]	; (4438 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	2b00      	cmp	r3, #0
    43ae:	d03b      	beq.n	4428 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    43b0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    43b4:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    43b8:	a809      	add	r0, sp, #36	; 0x24
    43ba:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    43bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    43c0:	8223      	strh	r3, [r4, #16]
    43c2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    43c6:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    43c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    43cc:	7363      	strb	r3, [r4, #13]
    43ce:	9a07      	ldr	r2, [sp, #28]
    43d0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    43d4:	f043 0301 	orr.w	r3, r3, #1
    43d8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    43dc:	9b03      	ldr	r3, [sp, #12]
    43de:	462a      	mov	r2, r5
    43e0:	4631      	mov	r1, r6
    43e2:	9802      	ldr	r0, [sp, #8]
    43e4:	9700      	str	r7, [sp, #0]
    43e6:	f7ff fb8d 	bl	3b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    43ea:	e73d      	b.n	4268 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    43ec:	f1bb 0f01 	cmp.w	fp, #1
    43f0:	f47f af39 	bne.w	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    43f4:	300a      	adds	r0, #10
    43f6:	e001      	b.n	43fc <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    43f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    43fc:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    4400:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4402:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    4406:	fa52 f281 	uxtab	r2, r2, r1
    440a:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    440e:	d1f3      	bne.n	43f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    4410:	9b06      	ldr	r3, [sp, #24]
    4412:	4563      	cmp	r3, ip
    4414:	f47f af27 	bne.w	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4418:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    441a:	9b03      	ldr	r3, [sp, #12]
    441c:	0519      	lsls	r1, r3, #20
    441e:	f53f af22 	bmi.w	4266 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4422:	e7db      	b.n	43dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    4424:	461f      	mov	r7, r3
    4426:	e7f8      	b.n	441a <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    4428:	f645 0321 	movw	r3, #22561	; 0x5821
    442c:	8223      	strh	r3, [r4, #16]
    442e:	8323      	strh	r3, [r4, #24]
    4430:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    4432:	e7cc      	b.n	43ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    4434:	4ec4ec4f 	.word	0x4ec4ec4f
    4438:	20026874 	.word	0x20026874

0000443c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4440:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    4442:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    4444:	b082      	sub	sp, #8
    4446:	460c      	mov	r4, r1
  while (*path == ' ') {
    4448:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    444a:	4615      	mov	r5, r2
  while (*path == ' ') {
    444c:	d103      	bne.n	4456 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    444e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4452:	2b20      	cmp	r3, #32
    4454:	d0fb      	beq.n	444e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    4456:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    4458:	7823      	ldrb	r3, [r4, #0]
    445a:	b363      	cbz	r3, 44b6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    445c:	2b2f      	cmp	r3, #47	; 0x2f
    445e:	d02a      	beq.n	44b6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    4460:	f04f 0800 	mov.w	r8, #0
    4464:	4e29      	ldr	r6, [pc, #164]	; (450c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    4466:	1d21      	adds	r1, r4, #4
    4468:	4620      	mov	r0, r4
    446a:	aa01      	add	r2, sp, #4
    446c:	f002 fd6e 	bl	6f4c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    4470:	4604      	mov	r4, r0
    4472:	b170      	cbz	r0, 4492 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    4474:	9b01      	ldr	r3, [sp, #4]
    4476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    447a:	d240      	bcs.n	44fe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    447c:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    447e:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    4482:	d831      	bhi.n	44e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    4484:	2b3c      	cmp	r3, #60	; 0x3c
    4486:	b2d9      	uxtb	r1, r3
    4488:	d829      	bhi.n	44de <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    448a:	2921      	cmp	r1, #33	; 0x21
    448c:	d805      	bhi.n	449a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    448e:	291f      	cmp	r1, #31
    4490:	d809      	bhi.n	44a6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    4492:	2000      	movs	r0, #0
    4494:	b002      	add	sp, #8
    4496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    449a:	3922      	subs	r1, #34	; 0x22
    449c:	b2c9      	uxtb	r1, r1
    449e:	fa26 f101 	lsr.w	r1, r6, r1
    44a2:	07ca      	lsls	r2, r1, #31
    44a4:	d4f5      	bmi.n	4492 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    44a6:	2b2e      	cmp	r3, #46	; 0x2e
    44a8:	d001      	beq.n	44ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    44aa:	2b20      	cmp	r3, #32
    44ac:	d11c      	bne.n	44e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    44ae:	7823      	ldrb	r3, [r4, #0]
    44b0:	b10b      	cbz	r3, 44b6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    44b2:	2b2f      	cmp	r3, #47	; 0x2f
    44b4:	d1d7      	bne.n	4466 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    44b6:	692b      	ldr	r3, [r5, #16]
    44b8:	3b01      	subs	r3, #1
    44ba:	2bfe      	cmp	r3, #254	; 0xfe
    44bc:	d8e9      	bhi.n	4492 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    44be:	7823      	ldrb	r3, [r4, #0]
    44c0:	2b20      	cmp	r3, #32
    44c2:	d103      	bne.n	44cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    44c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    44c8:	2b20      	cmp	r3, #32
    44ca:	d0fb      	beq.n	44c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    44cc:	2b2f      	cmp	r3, #47	; 0x2f
    44ce:	d0f9      	beq.n	44c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    44d0:	4628      	mov	r0, r5
  *ptr = path;
    44d2:	603c      	str	r4, [r7, #0]
}
    44d4:	b002      	add	sp, #8
    44d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    44da:	f7ff bd55 	b.w	3f88 <FatFile::makeSFN(FatLfn_t*)>
    44de:	295c      	cmp	r1, #92	; 0x5c
    44e0:	d0d7      	beq.n	4492 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    44e2:	d905      	bls.n	44f0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    44e4:	297c      	cmp	r1, #124	; 0x7c
    44e6:	d0d4      	beq.n	4492 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    44e8:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    44ec:	60ac      	str	r4, [r5, #8]
    44ee:	e7de      	b.n	44ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    44f0:	393e      	subs	r1, #62	; 0x3e
    44f2:	2901      	cmp	r1, #1
    44f4:	d8f8      	bhi.n	44e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    44f6:	2000      	movs	r0, #0
    44f8:	b002      	add	sp, #8
    44fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    44fe:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    4502:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    4504:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    4508:	e7d1      	b.n	44ae <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    450a:	bf00      	nop
    450c:	05002101 	.word	0x05002101

00004510 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    4510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4514:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    4518:	b1a2      	cbz	r2, 4544 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    451a:	4605      	mov	r5, r0
    451c:	460c      	mov	r4, r1
    451e:	4698      	mov	r8, r3
    4520:	1857      	adds	r7, r2, r1
    4522:	e001      	b.n	4528 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    4524:	42bc      	cmp	r4, r7
    4526:	d00d      	beq.n	4544 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    4528:	682b      	ldr	r3, [r5, #0]
    452a:	4620      	mov	r0, r4
    452c:	4649      	mov	r1, r9
    452e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    4530:	47c0      	blx	r8
    4532:	4621      	mov	r1, r4
    4534:	4602      	mov	r2, r0
    4536:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    4538:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    453a:	47b0      	blx	r6
    453c:	2800      	cmp	r0, #0
    453e:	d1f1      	bne.n	4524 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    4540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    4544:	2001      	movs	r0, #1
  }
    4546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    454a:	bf00      	nop

0000454c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    454c:	2a04      	cmp	r2, #4
    454e:	d804      	bhi.n	455a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    4550:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4554:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    4558:	4770      	bx	lr
  } else if (i < 11) {
    455a:	2a0a      	cmp	r2, #10
    455c:	d803      	bhi.n	4566 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    455e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4562:	8890      	ldrh	r0, [r2, #4]
    4564:	4770      	bx	lr
  } else if (i < 13) {
    4566:	2a0c      	cmp	r2, #12
    4568:	d803      	bhi.n	4572 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    456a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    456e:	88c8      	ldrh	r0, [r1, #6]
    4570:	4770      	bx	lr
  return 0;
    4572:	2000      	movs	r0, #0
}
    4574:	4770      	bx	lr
    4576:	bf00      	nop

00004578 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    4578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    457c:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    4580:	b1c3      	cbz	r3, 45b4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    4582:	4681      	mov	r9, r0
    4584:	460c      	mov	r4, r1
    4586:	4615      	mov	r5, r2
    4588:	185e      	adds	r6, r3, r1
    458a:	e002      	b.n	4592 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    458c:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    458e:	42b4      	cmp	r4, r6
    4590:	d010      	beq.n	45b4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    4592:	f8d9 3000 	ldr.w	r3, [r9]
    4596:	4621      	mov	r1, r4
    4598:	462a      	mov	r2, r5
    459a:	4648      	mov	r0, r9
    459c:	691b      	ldr	r3, [r3, #16]
    459e:	4798      	blx	r3
    45a0:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    45a2:	463a      	mov	r2, r7
    45a4:	4620      	mov	r0, r4
    45a6:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    45a8:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    45aa:	2b00      	cmp	r3, #0
    45ac:	d1ee      	bne.n	458c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    45ae:	4618      	mov	r0, r3
    45b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    45b4:	2301      	movs	r3, #1
  }
    45b6:	4618      	mov	r0, r3
    45b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000045bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    45bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    45c0:	79c3      	ldrb	r3, [r0, #7]
    45c2:	4604      	mov	r4, r0
    45c4:	460d      	mov	r5, r1
    45c6:	4617      	mov	r7, r2
  if (fatType() == 32) {
    45c8:	2b20      	cmp	r3, #32
    45ca:	d059      	beq.n	4680 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    45cc:	2b10      	cmp	r3, #16
    45ce:	d030      	beq.n	4632 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    45d0:	2b0c      	cmp	r3, #12
    45d2:	d151      	bne.n	4678 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45d4:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    45d6:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    45da:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    45dc:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    45e0:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45e4:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    45e8:	4648      	mov	r0, r9
    45ea:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45ec:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    45f0:	f3c1 2146 	ubfx	r1, r1, #9, #7
    45f4:	0952      	lsrs	r2, r2, #5
    45f6:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    45fa:	0052      	lsls	r2, r2, #1
    45fc:	4641      	mov	r1, r8
    45fe:	f002 fc57 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4602:	2800      	cmp	r0, #0
    4604:	d038      	beq.n	4678 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    4606:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    460a:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    460c:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    460e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4612:	d023      	beq.n	465c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    4614:	4418      	add	r0, r3
    4616:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4618:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    461a:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    461c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4620:	bf4c      	ite	mi
    4622:	091b      	lsrmi	r3, r3, #4
    4624:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    4628:	429a      	cmp	r2, r3
    462a:	d240      	bcs.n	46ae <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    462c:	2000      	movs	r0, #0
}
    462e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4632:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    4634:	f3c1 2107 	ubfx	r1, r1, #8, #8
    4638:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    463a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    463e:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4642:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4644:	fab2 f282 	clz	r2, r2
    4648:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    464a:	0052      	lsls	r2, r2, #1
    464c:	f002 fc30 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4650:	b190      	cbz	r0, 4678 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4652:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    4654:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    4658:	5b43      	ldrh	r3, [r0, r5]
    465a:	e025      	b.n	46a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    465c:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    465e:	f108 0101 	add.w	r1, r8, #1
    4662:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4664:	f1a2 0202 	sub.w	r2, r2, #2
    4668:	fab2 f282 	clz	r2, r2
    466c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    466e:	0052      	lsls	r2, r2, #1
    4670:	f002 fc1e 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4674:	2800      	cmp	r0, #0
    4676:	d1ce      	bne.n	4616 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    4678:	f04f 30ff 	mov.w	r0, #4294967295
}
    467c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4680:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4682:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4684:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4688:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    468c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4690:	fab2 f282 	clz	r2, r2
    4694:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    4696:	0052      	lsls	r2, r2, #1
    4698:	f002 fc0a 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    469c:	2800      	cmp	r0, #0
    469e:	d0eb      	beq.n	4678 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    46a0:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    46a2:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    46a6:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    46a8:	69e2      	ldr	r2, [r4, #28]
    46aa:	429a      	cmp	r2, r3
    46ac:	d3be      	bcc.n	462c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    46ae:	2001      	movs	r0, #1
  *value = next;
    46b0:	603b      	str	r3, [r7, #0]
}
    46b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46b6:	bf00      	nop

000046b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    46b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    46bc:	79c3      	ldrb	r3, [r0, #7]
    46be:	4605      	mov	r5, r0
    46c0:	460c      	mov	r4, r1
    46c2:	4616      	mov	r6, r2
  if (fatType() == 32) {
    46c4:	2b20      	cmp	r3, #32
    46c6:	d048      	beq.n	475a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    46c8:	2b10      	cmp	r3, #16
    46ca:	d02d      	beq.n	4728 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    46cc:	2b0c      	cmp	r3, #12
    46ce:	d141      	bne.n	4754 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    46d0:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    46d4:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    46d6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    46da:	fa11 f184 	uxtah	r1, r1, r4
    46de:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    46e2:	f3c1 2146 	ubfx	r1, r1, #9, #7
    46e6:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    46e8:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    46ea:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    46ec:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    46ee:	4639      	mov	r1, r7
    46f0:	bf14      	ite	ne
    46f2:	2201      	movne	r2, #1
    46f4:	2203      	moveq	r2, #3
    46f6:	f002 fbdb 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    46fa:	b358      	cbz	r0, 4754 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    46fc:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    4700:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    4704:	d03f      	beq.n	4786 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    4706:	5cc2      	ldrb	r2, [r0, r3]
    4708:	f002 020f 	and.w	r2, r2, #15
    470c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    4710:	54c2      	strb	r2, [r0, r3]
    index++;
    4712:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    4714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4718:	d03a      	beq.n	4790 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    471a:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    471e:	4403      	add	r3, r0
    return true;
    4720:	2001      	movs	r0, #1
    pc[index] = tmp;
    4722:	701a      	strb	r2, [r3, #0]
}
    4724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4728:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    472a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    472e:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4730:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4734:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    4736:	4419      	add	r1, r3
    4738:	bf14      	ite	ne
    473a:	2201      	movne	r2, #1
    473c:	2203      	moveq	r2, #3
    473e:	f002 fbb7 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4742:	4603      	mov	r3, r0
    4744:	b130      	cbz	r0, 4754 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4746:	0064      	lsls	r4, r4, #1
    return true;
    4748:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    474a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    474e:	531e      	strh	r6, [r3, r4]
}
    4750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    4754:	2000      	movs	r0, #0
}
    4756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    475a:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    475c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    475e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4762:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    4764:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    4768:	bf14      	ite	ne
    476a:	2201      	movne	r2, #1
    476c:	2203      	moveq	r2, #3
    476e:	f002 fb9f 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4772:	4603      	mov	r3, r0
    4774:	2800      	cmp	r0, #0
    4776:	d0ed      	beq.n	4754 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4778:	00a4      	lsls	r4, r4, #2
    return true;
    477a:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    477c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4780:	511e      	str	r6, [r3, r4]
}
    4782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    4786:	54c6      	strb	r6, [r0, r3]
    index++;
    4788:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    478a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    478e:	d115      	bne.n	47bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4790:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    4792:	1c79      	adds	r1, r7, #1
    4794:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4796:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    4798:	bf14      	ite	ne
    479a:	2201      	movne	r2, #1
    479c:	2203      	moveq	r2, #3
    479e:	f002 fb87 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    47a2:	4603      	mov	r3, r0
    47a4:	2800      	cmp	r0, #0
    47a6:	d0d5      	beq.n	4754 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    47a8:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    47ac:	2c00      	cmp	r4, #0
    47ae:	d1b7      	bne.n	4720 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    47b0:	7819      	ldrb	r1, [r3, #0]
    47b2:	f021 010f 	bic.w	r1, r1, #15
    47b6:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    47ba:	e7b1      	b.n	4720 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    47bc:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    47c0:	4403      	add	r3, r0
    47c2:	e7f5      	b.n	47b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

000047c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    47c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    47c8:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    47ca:	b082      	sub	sp, #8
    47cc:	4605      	mov	r5, r0
    47ce:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    47d0:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    47d2:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    47d4:	d340      	bcc.n	4858 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    47d6:	2701      	movs	r7, #1
    find++;
    47d8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    47da:	69eb      	ldr	r3, [r5, #28]
    47dc:	aa01      	add	r2, sp, #4
    47de:	4628      	mov	r0, r5
    47e0:	42a3      	cmp	r3, r4
    47e2:	d205      	bcs.n	47f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    47e4:	bb9f      	cbnz	r7, 484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    47e6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    47e8:	2701      	movs	r7, #1
    find++;
    47ea:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    47ec:	42a3      	cmp	r3, r4
    47ee:	d32e      	bcc.n	484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    47f0:	42a6      	cmp	r6, r4
    47f2:	bf18      	it	ne
    47f4:	2c01      	cmpne	r4, #1
    47f6:	4621      	mov	r1, r4
    47f8:	d929      	bls.n	484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    47fa:	f7ff fedf 	bl	45bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    47fe:	2800      	cmp	r0, #0
    4800:	db25      	blt.n	484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    4802:	d0e9      	beq.n	47d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4804:	9b01      	ldr	r3, [sp, #4]
    4806:	2b00      	cmp	r3, #0
    4808:	d1e6      	bne.n	47d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    480a:	b107      	cbz	r7, 480e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    480c:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    480e:	69eb      	ldr	r3, [r5, #28]
    4810:	42a3      	cmp	r3, r4
    4812:	d31c      	bcc.n	484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4814:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4818:	4621      	mov	r1, r4
    481a:	4628      	mov	r0, r5
    481c:	f7ff ff4c 	bl	46b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    4820:	4607      	mov	r7, r0
    4822:	b1a0      	cbz	r0, 484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    4824:	b93e      	cbnz	r6, 4836 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    4826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4828:	2b00      	cmp	r3, #0
    482a:	db01      	blt.n	4830 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    482c:	3b01      	subs	r3, #1
    482e:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    4830:	f8c8 4000 	str.w	r4, [r8]
  return true;
    4834:	e00c      	b.n	4850 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    4836:	2e01      	cmp	r6, #1
    4838:	d009      	beq.n	484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    483a:	69eb      	ldr	r3, [r5, #28]
    483c:	429e      	cmp	r6, r3
    483e:	d806      	bhi.n	484e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4840:	4631      	mov	r1, r6
    4842:	4622      	mov	r2, r4
    4844:	4628      	mov	r0, r5
    4846:	f7ff ff37 	bl	46b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    484a:	2800      	cmp	r0, #0
    484c:	d1eb      	bne.n	4826 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    484e:	2700      	movs	r7, #0
}
    4850:	4638      	mov	r0, r7
    4852:	b002      	add	sp, #8
    4854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4858:	460c      	mov	r4, r1
    setStart = false;
    485a:	2700      	movs	r7, #0
    485c:	e7bc      	b.n	47d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    485e:	bf00      	nop

00004860 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4860:	2901      	cmp	r1, #1
    4862:	d90c      	bls.n	487e <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4864:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    4866:	69c4      	ldr	r4, [r0, #28]
    4868:	428c      	cmp	r4, r1
    486a:	d303      	bcc.n	4874 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    486c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4870:	f7ff bea4 	b.w	45bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    4874:	f04f 30ff 	mov.w	r0, #4294967295
    4878:	f85d 4b04 	ldr.w	r4, [sp], #4
    487c:	4770      	bx	lr
    487e:	f04f 30ff 	mov.w	r0, #4294967295
    4882:	4770      	bx	lr

00004884 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    4884:	b570      	push	{r4, r5, r6, lr}
    4886:	4605      	mov	r5, r0
    4888:	b082      	sub	sp, #8
    488a:	460c      	mov	r4, r1
    488c:	e01d      	b.n	48ca <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    488e:	69eb      	ldr	r3, [r5, #28]
    4890:	429c      	cmp	r4, r3
    4892:	d81f      	bhi.n	48d4 <FatPartition::freeChain(unsigned long)+0x50>
    4894:	f7ff fe92 	bl	45bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    4898:	4606      	mov	r6, r0
    if (fg < 0) {
    489a:	4621      	mov	r1, r4
    489c:	2200      	movs	r2, #0
    489e:	2e00      	cmp	r6, #0
    48a0:	4628      	mov	r0, r5
    48a2:	db17      	blt.n	48d4 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    48a4:	69eb      	ldr	r3, [r5, #28]
    48a6:	429c      	cmp	r4, r3
    48a8:	d814      	bhi.n	48d4 <FatPartition::freeChain(unsigned long)+0x50>
    48aa:	f7ff ff05 	bl	46b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    48ae:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    48b0:	b180      	cbz	r0, 48d4 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    48b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    48b4:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    48b6:	f103 0301 	add.w	r3, r3, #1
    48ba:	bfa8      	it	ge
    48bc:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    48be:	68eb      	ldr	r3, [r5, #12]
    48c0:	42a3      	cmp	r3, r4
    cluster = next;
    48c2:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    48c4:	bf88      	it	hi
    48c6:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    48c8:	b12e      	cbz	r6, 48d6 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    48ca:	2c01      	cmp	r4, #1
    48cc:	4621      	mov	r1, r4
    48ce:	aa01      	add	r2, sp, #4
    48d0:	4628      	mov	r0, r5
    48d2:	d8dc      	bhi.n	488e <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    48d4:	2000      	movs	r0, #0
}
    48d6:	b002      	add	sp, #8
    48d8:	bd70      	pop	{r4, r5, r6, pc}
    48da:	bf00      	nop

000048dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    48dc:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    48de:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    48e0:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    48e2:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    48e4:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    48e6:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    48ea:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    48ee:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    48f0:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    48f2:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    48f4:	62e1      	str	r1, [r4, #44]	; 0x2c
    48f6:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    48fa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    48fe:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    4902:	6362      	str	r2, [r4, #52]	; 0x34
    4904:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    4908:	b1cd      	cbz	r5, 493e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    490a:	2d04      	cmp	r5, #4
    490c:	d901      	bls.n	4912 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    490e:	2000      	movs	r0, #0
}
    4910:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    4912:	461a      	mov	r2, r3
    4914:	4619      	mov	r1, r3
    4916:	4630      	mov	r0, r6
    4918:	f002 faca 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    491c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4920:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    4924:	442b      	add	r3, r5
    4926:	011d      	lsls	r5, r3, #4
    4928:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    492c:	2800      	cmp	r0, #0
    492e:	d0ee      	beq.n	490e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4930:	7919      	ldrb	r1, [r3, #4]
    4932:	2900      	cmp	r1, #0
    4934:	d0eb      	beq.n	490e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4936:	5d52      	ldrb	r2, [r2, r5]
    4938:	0652      	lsls	r2, r2, #25
    493a:	d1e8      	bne.n	490e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    493c:	689d      	ldr	r5, [r3, #8]
    493e:	2200      	movs	r2, #0
    4940:	4629      	mov	r1, r5
    4942:	4630      	mov	r0, r6
    4944:	f002 fab4 	bl	6eb0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    4948:	2800      	cmp	r0, #0
    494a:	d0e0      	beq.n	490e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    494c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4954:	d1db      	bne.n	490e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    4956:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    4958:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    495a:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    495c:	2a01      	cmp	r2, #1
    495e:	d8d6      	bhi.n	490e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4960:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4962:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4964:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4966:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4968:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    496a:	f04f 0300 	mov.w	r3, #0
    496e:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4970:	d044      	beq.n	49fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    4972:	2201      	movs	r2, #1
    4974:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    4976:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4978:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    497a:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    497c:	4291      	cmp	r1, r2
    497e:	d004      	beq.n	498a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    4980:	2b08      	cmp	r3, #8
    4982:	d1f7      	bne.n	4974 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    4984:	2000      	movs	r0, #0
    4986:	71a3      	strb	r3, [r4, #6]
}
    4988:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    498a:	461e      	mov	r6, r3
    498c:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    498e:	8ac1      	ldrh	r1, [r0, #22]
    4990:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    4992:	b909      	cbnz	r1, 4998 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    4994:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    4996:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    4998:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    499a:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    499e:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    49a0:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    49a2:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    49a4:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    49a6:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    49aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    49ae:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    49b2:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    49b6:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    49b8:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    49bc:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    49be:	b902      	cbnz	r2, 49c2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    49c0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    49c2:	1aed      	subs	r5, r5, r3
    49c4:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    49c6:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    49c8:	1c5a      	adds	r2, r3, #1
    49ca:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    49cc:	f04f 32ff 	mov.w	r2, #4294967295
    49d0:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    49d2:	f640 72f4 	movw	r2, #4084	; 0xff4
    49d6:	4293      	cmp	r3, r2
    49d8:	d90c      	bls.n	49f4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    49da:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    49de:	4293      	cmp	r3, r2
    49e0:	d90a      	bls.n	49f8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    49e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    49e4:	2320      	movs	r3, #32
    49e6:	6222      	str	r2, [r4, #32]
  return true;
    49e8:	2001      	movs	r0, #1
    m_fatType = 12;
    49ea:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    49ec:	6321      	str	r1, [r4, #48]	; 0x30
    49ee:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    49f2:	bd70      	pop	{r4, r5, r6, pc}
    49f4:	230c      	movs	r3, #12
    49f6:	e7f7      	b.n	49e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    49f8:	2310      	movs	r3, #16
    49fa:	e7f5      	b.n	49e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    49fc:	461e      	mov	r6, r3
    49fe:	e7c6      	b.n	498e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00004a00 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    4a00:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4a02:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    4a06:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    4a08:	2300      	movs	r3, #0
    4a0a:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4a0c:	a801      	add	r0, sp, #4
    4a0e:	4621      	mov	r1, r4
    4a10:	9301      	str	r3, [sp, #4]
    4a12:	f7fe fe6d 	bl	36f0 <FatFile::open(FatFile*, char const*, int)>
    4a16:	4605      	mov	r5, r0
    4a18:	b198      	cbz	r0, 4a42 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    4a1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4a1e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    4a22:	d011      	beq.n	4a48 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4a24:	f10d 0e04 	add.w	lr, sp, #4
    4a28:	46a4      	mov	ip, r4
    4a2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4a2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4a32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4a36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4a3a:	f8de 3000 	ldr.w	r3, [lr]
    4a3e:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    4a42:	4628      	mov	r0, r5
    4a44:	b00b      	add	sp, #44	; 0x2c
    4a46:	bd30      	pop	{r4, r5, pc}
  return false;
    4a48:	461d      	mov	r5, r3
}
    4a4a:	4628      	mov	r0, r5
    4a4c:	b00b      	add	sp, #44	; 0x2c
    4a4e:	bd30      	pop	{r4, r5, pc}

00004a50 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    4a50:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4a52:	b570      	push	{r4, r5, r6, lr}
    4a54:	4604      	mov	r4, r0
  if (this == &from) return *this;
    4a56:	d021      	beq.n	4a9c <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  if (m_fFile && m_fFile->close()) {
    4a58:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4a5a:	460d      	mov	r5, r1
    4a5c:	b118      	cbz	r0, 4a66 <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    4a5e:	f7fe fd0b 	bl	3478 <FatFile::close()>
    4a62:	2800      	cmp	r0, #0
    4a64:	d141      	bne.n	4aea <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
  if (m_xFile && m_xFile->close()) {
    4a66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4a68:	b118      	cbz	r0, 4a72 <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    4a6a:	f7fd f99d 	bl	1da8 <ExFatFile::close()>
    4a6e:	2800      	cmp	r0, #0
    4a70:	d141      	bne.n	4af6 <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    4a72:	6bae      	ldr	r6, [r5, #56]	; 0x38
    4a74:	b1a6      	cbz	r6, 4aa0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    4a76:	4621      	mov	r1, r4
    4a78:	2024      	movs	r0, #36	; 0x24
    4a7a:	f000 f8af 	bl	4bdc <operator new(unsigned int, unsigned long*)>
    4a7e:	2300      	movs	r3, #0
    4a80:	4684      	mov	ip, r0
    4a82:	8003      	strh	r3, [r0, #0]
    4a84:	7083      	strb	r3, [r0, #2]
    4a86:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4a88:	6bad      	ldr	r5, [r5, #56]	; 0x38
    4a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4a92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4a96:	682b      	ldr	r3, [r5, #0]
    4a98:	f8cc 3000 	str.w	r3, [ip]
}
    4a9c:	4620      	mov	r0, r4
    4a9e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    4aa0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d0fa      	beq.n	4a9c <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    4aa6:	4621      	mov	r1, r4
    4aa8:	2038      	movs	r0, #56	; 0x38
    4aaa:	f000 f897 	bl	4bdc <operator new(unsigned int, unsigned long*)>
    4aae:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    4ab2:	8646      	strh	r6, [r0, #50]	; 0x32
    4ab4:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    4ab6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4ab8:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    4abc:	681e      	ldr	r6, [r3, #0]
    4abe:	3310      	adds	r3, #16
    4ac0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    4ac4:	3010      	adds	r0, #16
    4ac6:	f853 1c08 	ldr.w	r1, [r3, #-8]
    4aca:	f853 2c04 	ldr.w	r2, [r3, #-4]
    4ace:	4563      	cmp	r3, ip
    4ad0:	f840 6c10 	str.w	r6, [r0, #-16]
    4ad4:	f840 5c0c 	str.w	r5, [r0, #-12]
    4ad8:	f840 1c08 	str.w	r1, [r0, #-8]
    4adc:	f840 2c04 	str.w	r2, [r0, #-4]
    4ae0:	d1ec      	bne.n	4abc <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	6003      	str	r3, [r0, #0]
}
    4ae6:	4620      	mov	r0, r4
    4ae8:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    4aea:	2300      	movs	r3, #0
    4aec:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    4aee:	6bae      	ldr	r6, [r5, #56]	; 0x38
    4af0:	2e00      	cmp	r6, #0
    4af2:	d1c0      	bne.n	4a76 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4af4:	e7d4      	b.n	4aa0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    4af6:	2300      	movs	r3, #0
  if (from.m_fFile) {
    4af8:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    4afa:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    4afc:	2e00      	cmp	r6, #0
    4afe:	d1ba      	bne.n	4a76 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4b00:	e7ce      	b.n	4aa0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    4b02:	bf00      	nop

00004b04 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    4b04:	b510      	push	{r4, lr}
    4b06:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    4b08:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4b0a:	b110      	cbz	r0, 4b12 <FsBaseFile::close()+0xe>
    4b0c:	f7fe fcb4 	bl	3478 <FatFile::close()>
    4b10:	b930      	cbnz	r0, 4b20 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    4b12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4b14:	b110      	cbz	r0, 4b1c <FsBaseFile::close()+0x18>
    4b16:	f7fd f947 	bl	1da8 <ExFatFile::close()>
    4b1a:	b920      	cbnz	r0, 4b26 <FsBaseFile::close()+0x22>
  return false;
    4b1c:	2000      	movs	r0, #0
}
    4b1e:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    4b20:	2300      	movs	r3, #0
    4b22:	63a3      	str	r3, [r4, #56]	; 0x38
}
    4b24:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    4b26:	2300      	movs	r3, #0
    4b28:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    4b2a:	bd10      	pop	{r4, pc}

00004b2c <FsBaseFile::open(FsVolume*, char const*, int)>:
  if (!vol) {
    4b2c:	2900      	cmp	r1, #0
    4b2e:	d052      	beq.n	4bd6 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b34:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    4b36:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4b38:	460d      	mov	r5, r1
    4b3a:	4617      	mov	r7, r2
    4b3c:	461e      	mov	r6, r3
    4b3e:	b110      	cbz	r0, 4b46 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    4b40:	f7fe fc9a 	bl	3478 <FatFile::close()>
    4b44:	bba0      	cbnz	r0, 4bb0 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    4b46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4b48:	b110      	cbz	r0, 4b50 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    4b4a:	f7fd f92d 	bl	1da8 <ExFatFile::close()>
    4b4e:	bbb8      	cbnz	r0, 4bc0 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
  if (vol->m_fVol) {
    4b50:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    4b54:	f1b8 0f00 	cmp.w	r8, #0
    4b58:	d011      	beq.n	4b7e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    4b5a:	4621      	mov	r1, r4
    4b5c:	2024      	movs	r0, #36	; 0x24
    4b5e:	f000 f83d 	bl	4bdc <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4b62:	4633      	mov	r3, r6
    4b64:	2600      	movs	r6, #0
    4b66:	463a      	mov	r2, r7
    4b68:	8006      	strh	r6, [r0, #0]
    4b6a:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    4b6c:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4b6e:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    4b72:	f7fe fe3f 	bl	37f4 <FatFile::open(FatVolume*, char const*, int)>
    4b76:	bb58      	cbnz	r0, 4bd0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_fFile = nullptr;
    4b78:	63a0      	str	r0, [r4, #56]	; 0x38
}
    4b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    4b7e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4b82:	b193      	cbz	r3, 4baa <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    4b84:	4621      	mov	r1, r4
    4b86:	2038      	movs	r0, #56	; 0x38
    4b88:	f000 f828 	bl	4bdc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4b8c:	4633      	mov	r3, r6
    4b8e:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    4b92:	463a      	mov	r2, r7
    4b94:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    4b98:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4b9a:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    4b9e:	f7fd fd13 	bl	25c8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4ba2:	b9a8      	cbnz	r0, 4bd0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    4ba4:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    4ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4baa:	2000      	movs	r0, #0
}
    4bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    4bb0:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    4bb2:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    4bb6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    4bb8:	f1b8 0f00 	cmp.w	r8, #0
    4bbc:	d1cd      	bne.n	4b5a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    4bbe:	e7de      	b.n	4b7e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    4bc0:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    4bc2:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    4bc6:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    4bc8:	f1b8 0f00 	cmp.w	r8, #0
    4bcc:	d1c5      	bne.n	4b5a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    4bce:	e7d6      	b.n	4b7e <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    4bd0:	2001      	movs	r0, #1
}
    4bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4bd6:	2000      	movs	r0, #0
}
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop

00004bdc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4bdc:	4608      	mov	r0, r1
    4bde:	4770      	bx	lr

00004be0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    4be4:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4be6:	4604      	mov	r4, r0
    4be8:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    4bea:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    4bee:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4bf2:	4601      	mov	r1, r0
    4bf4:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4bf8:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4bfa:	f7ff ffef 	bl	4bdc <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    4bfe:	4642      	mov	r2, r8
  ExFatPartition() {}
    4c00:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    4c04:	4605      	mov	r5, r0
    4c06:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    4c0a:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    4c0e:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    4c12:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4c16:	f7fe fad3 	bl	31c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4c1a:	bba0      	cbnz	r0, 4c86 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    4c1c:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    4c1e:	4621      	mov	r1, r4
    4c20:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    4c24:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4c28:	f7ff ffd8 	bl	4bdc <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    4c2c:	2302      	movs	r3, #2
    4c2e:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    4c30:	4642      	mov	r2, r8
    4c32:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    4c36:	4605      	mov	r5, r0
    4c38:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    4c3c:	7203      	strb	r3, [r0, #8]
    4c3e:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    4c42:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4c46:	f7ff fe49 	bl	48dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4c4a:	b938      	cbnz	r0, 4c5c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    4c4c:	2300      	movs	r3, #0
    4c4e:	4a1a      	ldr	r2, [pc, #104]	; (4cb8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    4c50:	4618      	mov	r0, r3
  m_cwv = nullptr;
    4c52:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    4c54:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4c5c:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4c60:	4630      	mov	r0, r6
    4c62:	f7fe fc09 	bl	3478 <FatFile::close()>
    return m_vwd.openRoot(this);
    4c66:	4629      	mov	r1, r5
    4c68:	4630      	mov	r0, r6
    4c6a:	f7fe fdcb 	bl	3804 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4c6e:	2800      	cmp	r0, #0
    4c70:	d0ec      	beq.n	4c4c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    4c72:	4b12      	ldr	r3, [pc, #72]	; (4cbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    4c74:	681a      	ldr	r2, [r3, #0]
    4c76:	b9aa      	cbnz	r2, 4ca4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    4c78:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    4c7a:	4b0f      	ldr	r3, [pc, #60]	; (4cb8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4c7c:	b1af      	cbz	r7, 4caa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    4c7e:	2001      	movs	r0, #1
    m_cwv = this;
    4c80:	601c      	str	r4, [r3, #0]
}
    4c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4c86:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4c8a:	4630      	mov	r0, r6
    4c8c:	f7fd f88c 	bl	1da8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4c90:	4629      	mov	r1, r5
    4c92:	4630      	mov	r0, r6
    4c94:	f7fd f892 	bl	1dbc <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4c98:	2800      	cmp	r0, #0
    4c9a:	d0bf      	beq.n	4c1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    4c9c:	4b08      	ldr	r3, [pc, #32]	; (4cc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    4c9e:	681a      	ldr	r2, [r3, #0]
    4ca0:	2a00      	cmp	r2, #0
    4ca2:	d0e9      	beq.n	4c78 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    4ca4:	4b04      	ldr	r3, [pc, #16]	; (4cb8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4ca6:	2f00      	cmp	r7, #0
    4ca8:	d1e9      	bne.n	4c7e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    4caa:	681a      	ldr	r2, [r3, #0]
    4cac:	2a00      	cmp	r2, #0
    4cae:	d0e6      	beq.n	4c7e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    4cb0:	2001      	movs	r0, #1
}
    4cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cb6:	bf00      	nop
    4cb8:	200268ac 	.word	0x200268ac
    4cbc:	200268b0 	.word	0x200268b0
    4cc0:	20026878 	.word	0x20026878

00004cc4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    4cc4:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4cc6:	2500      	movs	r5, #0
    4cc8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4ccc:	4604      	mov	r4, r0
    4cce:	6045      	str	r5, [r0, #4]
    4cd0:	7305      	strb	r5, [r0, #12]
    4cd2:	6086      	str	r6, [r0, #8]
    4cd4:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4cd8:	4d03      	ldr	r5, [pc, #12]	; (4ce8 <FsVolume::open(char const*, int)+0x24>)
    4cda:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4cde:	f7ff ff25 	bl	4b2c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4ce2:	4620      	mov	r0, r4
    4ce4:	bd70      	pop	{r4, r5, r6, pc}
    4ce6:	bf00      	nop
    4ce8:	200008f4 	.word	0x200008f4

00004cec <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    4cec:	f04f 30ff 	mov.w	r0, #4294967295
    4cf0:	4770      	bx	lr
    4cf2:	bf00      	nop

00004cf4 <SharedSpiCard::errorCode() const>:
  }
    4cf4:	7c40      	ldrb	r0, [r0, #17]
    4cf6:	4770      	bx	lr

00004cf8 <SharedSpiCard::errorData() const>:
  }
    4cf8:	7d00      	ldrb	r0, [r0, #20]
    4cfa:	4770      	bx	lr

00004cfc <SharedSpiCard::type() const>:
  }
    4cfc:	7d40      	ldrb	r0, [r0, #21]
    4cfe:	4770      	bx	lr

00004d00 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    4d00:	2001      	movs	r0, #1
    4d02:	4770      	bx	lr

00004d04 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    4d04:	7f00      	ldrb	r0, [r0, #28]
    4d06:	4770      	bx	lr

00004d08 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d0c:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d0e:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4d10:	4605      	mov	r5, r0
    4d12:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d14:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4d16:	4691      	mov	r9, r2
    4d18:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d1a:	d028      	beq.n	4d6e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    4d1c:	682b      	ldr	r3, [r5, #0]
    4d1e:	4621      	mov	r1, r4
    4d20:	4628      	mov	r0, r5
    4d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4d24:	4798      	blx	r3
    4d26:	b198      	cbz	r0, 4d50 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    4d28:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    4d2a:	f1b9 0f00 	cmp.w	r9, #0
    4d2e:	d012      	beq.n	4d56 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    4d30:	eb04 0809 	add.w	r8, r4, r9
    4d34:	e001      	b.n	4d3a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    4d36:	45a0      	cmp	r8, r4
    4d38:	d00d      	beq.n	4d56 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    4d3a:	4639      	mov	r1, r7
    4d3c:	4620      	mov	r0, r4
    4d3e:	47b0      	blx	r6
    if (!writeData(src)) {
    4d40:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    4d42:	4601      	mov	r1, r0
    if (!writeData(src)) {
    4d44:	4628      	mov	r0, r5
    4d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    4d48:	3401      	adds	r4, #1
    if (!writeData(src)) {
    4d4a:	4798      	blx	r3
    4d4c:	2800      	cmp	r0, #0
    4d4e:	d1f2      	bne.n	4d36 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    4d50:	2000      	movs	r0, #0
}
    4d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    4d56:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4d58:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4d5a:	444b      	add	r3, r9
    4d5c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4d5e:	2800      	cmp	r0, #0
    4d60:	d1f7      	bne.n	4d52 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    4d62:	682b      	ldr	r3, [r5, #0]
    4d64:	4628      	mov	r0, r5
    4d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4d68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    4d6c:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d6e:	6983      	ldr	r3, [r0, #24]
    4d70:	428b      	cmp	r3, r1
    4d72:	d1d3      	bne.n	4d1c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    4d74:	e7d9      	b.n	4d2a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    4d76:	bf00      	nop

00004d78 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4d78:	4770      	bx	lr
    4d7a:	bf00      	nop

00004d7c <SharedSpiCard::end()>:
    m_spiDriver.end();
    4d7c:	3004      	adds	r0, #4
    4d7e:	f002 b817 	b.w	6db0 <SdSpiArduinoDriver::end()>
    4d82:	bf00      	nop

00004d84 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4d84:	b510      	push	{r4, lr}
    4d86:	4604      	mov	r4, r0
    4d88:	2120      	movs	r1, #32
    4d8a:	f002 ff09 	bl	7ba0 <operator delete(void*, unsigned int)>
    4d8e:	4620      	mov	r0, r4
    4d90:	bd10      	pop	{r4, pc}
    4d92:	bf00      	nop

00004d94 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    4d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d98:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d9a:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    4d9c:	4605      	mov	r5, r0
    4d9e:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4da0:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    4da2:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4da4:	d024      	beq.n	4df0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    4da6:	682b      	ldr	r3, [r5, #0]
    4da8:	4631      	mov	r1, r6
    4daa:	4628      	mov	r0, r5
    4dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4dae:	4798      	blx	r3
    4db0:	b178      	cbz	r0, 4dd2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    4db2:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    4db4:	b187      	cbz	r7, 4dd8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    4db6:	2600      	movs	r6, #0
    4db8:	e001      	b.n	4dbe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    4dba:	42b7      	cmp	r7, r6
    4dbc:	d00c      	beq.n	4dd8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    4dbe:	682a      	ldr	r2, [r5, #0]
    4dc0:	4621      	mov	r1, r4
    4dc2:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    4dc4:	3601      	adds	r6, #1
    if (!writeData(src)) {
    4dc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    4dc8:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    4dcc:	4790      	blx	r2
    4dce:	2800      	cmp	r0, #0
    4dd0:	d1f3      	bne.n	4dba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    4dd2:	2000      	movs	r0, #0
}
    4dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    4dd8:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4dda:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4ddc:	443b      	add	r3, r7
    4dde:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4de0:	2800      	cmp	r0, #0
    4de2:	d1f7      	bne.n	4dd4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    4de4:	682b      	ldr	r3, [r5, #0]
    4de6:	4628      	mov	r0, r5
    4de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    4dee:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4df0:	6983      	ldr	r3, [r0, #24]
    4df2:	428b      	cmp	r3, r1
    4df4:	d1d7      	bne.n	4da6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    4df6:	e7dd      	b.n	4db4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00004df8 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    4df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dfc:	4e20      	ldr	r6, [pc, #128]	; (4e80 <SharedSpiCard::writeStop()+0x88>)
    4dfe:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4e00:	f100 0804 	add.w	r8, r0, #4
    4e04:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    4e06:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4e0a:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4e0c:	e003      	b.n	4e16 <SharedSpiCard::writeStop()+0x1e>
    4e0e:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4e10:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4e12:	041b      	lsls	r3, r3, #16
    4e14:	d410      	bmi.n	4e38 <SharedSpiCard::writeStop()+0x40>
    4e16:	4640      	mov	r0, r8
    4e18:	f001 ffce 	bl	6db8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4e1c:	28ff      	cmp	r0, #255	; 0xff
    4e1e:	4604      	mov	r4, r0
    4e20:	d1f5      	bne.n	4e0e <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4e22:	21fd      	movs	r1, #253	; 0xfd
    4e24:	4640      	mov	r0, r8
    4e26:	f001 ffe5 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4e2a:	7cbb      	ldrb	r3, [r7, #18]
    4e2c:	b9cb      	cbnz	r3, 4e62 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    4e2e:	2300      	movs	r3, #0
    4e30:	2001      	movs	r0, #1
    4e32:	74fb      	strb	r3, [r7, #19]
}
    4e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4e38:	231e      	movs	r3, #30
  if (m_spiActive) {
    4e3a:	7cb8      	ldrb	r0, [r7, #18]
    4e3c:	747b      	strb	r3, [r7, #17]
    4e3e:	2800      	cmp	r0, #0
    4e40:	d0f8      	beq.n	4e34 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    4e42:	7c38      	ldrb	r0, [r7, #16]
    4e44:	2101      	movs	r1, #1
    4e46:	f001 fef7 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e4a:	21ff      	movs	r1, #255	; 0xff
    4e4c:	4640      	mov	r0, r8
    4e4e:	f001 ffd1 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e52:	4640      	mov	r0, r8
    4e54:	f001 ff84 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4e58:	2300      	movs	r3, #0
  return false;
    4e5a:	4618      	mov	r0, r3
    m_spiActive = false;
    4e5c:	74bb      	strb	r3, [r7, #18]
}
    4e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    4e62:	2101      	movs	r1, #1
    4e64:	7c38      	ldrb	r0, [r7, #16]
    4e66:	f001 fee7 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e6a:	4621      	mov	r1, r4
    4e6c:	4640      	mov	r0, r8
    4e6e:	f001 ffc1 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e72:	4640      	mov	r0, r8
    4e74:	f001 ff74 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4e78:	2300      	movs	r3, #0
    4e7a:	74bb      	strb	r3, [r7, #18]
}
    4e7c:	e7d7      	b.n	4e2e <SharedSpiCard::writeStop()+0x36>
    4e7e:	bf00      	nop
    4e80:	20027494 	.word	0x20027494

00004e84 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4e88:	7cc3      	ldrb	r3, [r0, #19]
    4e8a:	2b01      	cmp	r3, #1
    4e8c:	d035      	beq.n	4efa <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4e8e:	7c86      	ldrb	r6, [r0, #18]
    4e90:	4604      	mov	r4, r0
    4e92:	b14e      	cbz	r6, 4ea8 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4e94:	3004      	adds	r0, #4
    4e96:	f001 ff8f 	bl	6db8 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4e9a:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4e9e:	bf18      	it	ne
    4ea0:	2501      	movne	r5, #1
}
    4ea2:	4628      	mov	r0, r5
    4ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    4ea8:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4eaa:	f04f 0801 	mov.w	r8, #1
    4eae:	4638      	mov	r0, r7
    4eb0:	f001 ff4c 	bl	6d4c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4eb4:	4631      	mov	r1, r6
    4eb6:	7c20      	ldrb	r0, [r4, #16]
    4eb8:	f001 febe 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ebc:	21ff      	movs	r1, #255	; 0xff
    4ebe:	4638      	mov	r0, r7
    4ec0:	f001 ff98 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4ec4:	4638      	mov	r0, r7
    4ec6:	f884 8012 	strb.w	r8, [r4, #18]
    4eca:	f001 ff75 	bl	6db8 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4ece:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    4ed0:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4ed4:	bf18      	it	ne
    4ed6:	2501      	movne	r5, #1
  if (m_spiActive) {
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d0e2      	beq.n	4ea2 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    4edc:	4641      	mov	r1, r8
    4ede:	7c20      	ldrb	r0, [r4, #16]
    4ee0:	f001 feaa 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ee4:	21ff      	movs	r1, #255	; 0xff
    4ee6:	4638      	mov	r0, r7
    4ee8:	f001 ff84 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4eec:	4638      	mov	r0, r7
    4eee:	f001 ff37 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
}
    4ef2:	4628      	mov	r0, r5
    m_spiActive = false;
    4ef4:	74a6      	strb	r6, [r4, #18]
}
    4ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4efa:	2500      	movs	r5, #0
}
    4efc:	4628      	mov	r0, r5
    4efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f02:	bf00      	nop

00004f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f08:	4f20      	ldr	r7, [pc, #128]	; (4f8c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4f0a:	4604      	mov	r4, r0
    4f0c:	4688      	mov	r8, r1
    4f0e:	4691      	mov	r9, r2
    4f10:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4f12:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    4f14:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4f18:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4f1a:	e003      	b.n	4f24 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4f1c:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4f1e:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4f20:	041b      	lsls	r3, r3, #16
    4f22:	d40d      	bmi.n	4f40 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4f24:	4630      	mov	r0, r6
    4f26:	f001 ff47 	bl	6db8 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4f2a:	28ff      	cmp	r0, #255	; 0xff
    4f2c:	7520      	strb	r0, [r4, #20]
    4f2e:	d0f5      	beq.n	4f1c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4f30:	28fe      	cmp	r0, #254	; 0xfe
    4f32:	d01a      	beq.n	4f6a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4f34:	2318      	movs	r3, #24
  if (m_spiActive) {
    4f36:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    4f38:	7463      	strb	r3, [r4, #17]
    4f3a:	b930      	cbnz	r0, 4f4a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f40:	231d      	movs	r3, #29
  if (m_spiActive) {
    4f42:	7ca0      	ldrb	r0, [r4, #18]
    4f44:	7463      	strb	r3, [r4, #17]
    4f46:	2800      	cmp	r0, #0
    4f48:	d0f8      	beq.n	4f3c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    4f4a:	7c20      	ldrb	r0, [r4, #16]
    4f4c:	2101      	movs	r1, #1
    4f4e:	f001 fe73 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f52:	21ff      	movs	r1, #255	; 0xff
    4f54:	4630      	mov	r0, r6
    4f56:	f001 ff4d 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4f5a:	4630      	mov	r0, r6
    4f5c:	f001 ff00 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f60:	2300      	movs	r3, #0
  return false;
    4f62:	4618      	mov	r0, r3
    m_spiActive = false;
    4f64:	74a3      	strb	r3, [r4, #18]
}
    4f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4f6a:	464a      	mov	r2, r9
    4f6c:	4641      	mov	r1, r8
    4f6e:	4630      	mov	r0, r6
    4f70:	f001 ff2e 	bl	6dd0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4f74:	7520      	strb	r0, [r4, #20]
    4f76:	b938      	cbnz	r0, 4f88 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4f78:	4630      	mov	r0, r6
    4f7a:	f001 ff1d 	bl	6db8 <SdSpiArduinoDriver::receive()>
    4f7e:	4630      	mov	r0, r6
    4f80:	f001 ff1a 	bl	6db8 <SdSpiArduinoDriver::receive()>
  return true;
    4f84:	2001      	movs	r0, #1
    4f86:	e7d9      	b.n	4f3c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4f88:	2325      	movs	r3, #37	; 0x25
    4f8a:	e7d4      	b.n	4f36 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4f8c:	20027494 	.word	0x20027494

00004f90 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4f92:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4f94:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4f96:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4f98:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4f9a:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4f9c:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    4f9e:	f000 f85b 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fa2:	b9b0      	cbnz	r0, 4fd2 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4fa4:	7ca6      	ldrb	r6, [r4, #18]
    4fa6:	b91e      	cbnz	r6, 4fb0 <SharedSpiCard::readStop()+0x20>
  return true;
    4fa8:	2601      	movs	r6, #1
}
    4faa:	4630      	mov	r0, r6
    4fac:	b003      	add	sp, #12
    4fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4fb0:	4605      	mov	r5, r0
    4fb2:	2101      	movs	r1, #1
    4fb4:	7c20      	ldrb	r0, [r4, #16]
    4fb6:	f001 fe3f 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fba:	1d20      	adds	r0, r4, #4
    4fbc:	21ff      	movs	r1, #255	; 0xff
    4fbe:	9001      	str	r0, [sp, #4]
    4fc0:	f001 ff18 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4fc4:	9801      	ldr	r0, [sp, #4]
    4fc6:	f001 fecb 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    4fca:	4630      	mov	r0, r6
    m_spiActive = false;
    4fcc:	74a5      	strb	r5, [r4, #18]
}
    4fce:	b003      	add	sp, #12
    4fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4fd2:	2309      	movs	r3, #9
  if (m_spiActive) {
    4fd4:	7ca6      	ldrb	r6, [r4, #18]
    4fd6:	7463      	strb	r3, [r4, #17]
    4fd8:	2e00      	cmp	r6, #0
    4fda:	d0e6      	beq.n	4faa <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4fdc:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4fde:	7c20      	ldrb	r0, [r4, #16]
    4fe0:	2101      	movs	r1, #1
}
    4fe2:	463e      	mov	r6, r7
    4fe4:	f001 fe28 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fe8:	21ff      	movs	r1, #255	; 0xff
    4fea:	4628      	mov	r0, r5
    4fec:	f001 ff02 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4ff0:	4628      	mov	r0, r5
    4ff2:	f001 feb5 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
}
    4ff6:	4630      	mov	r0, r6
    m_spiActive = false;
    4ff8:	74a7      	strb	r7, [r4, #18]
}
    4ffa:	b003      	add	sp, #12
    4ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ffe:	bf00      	nop

00005000 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    5000:	7cc2      	ldrb	r2, [r0, #19]
    5002:	2a02      	cmp	r2, #2
    5004:	d003      	beq.n	500e <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    5006:	2a01      	cmp	r2, #1
    5008:	d004      	beq.n	5014 <SharedSpiCard::syncDevice()+0x14>
}
    500a:	2001      	movs	r0, #1
    500c:	4770      	bx	lr
    return writeStop();
    500e:	6803      	ldr	r3, [r0, #0]
    5010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5012:	4718      	bx	r3
    return readStop();
    5014:	f7ff bfbc 	b.w	4f90 <SharedSpiCard::readStop()>

00005018 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5018:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    501a:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    501c:	460d      	mov	r5, r1
    501e:	490d      	ldr	r1, [pc, #52]	; (5054 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    5020:	4604      	mov	r4, r0
  if (!syncDevice()) {
    5022:	6a1a      	ldr	r2, [r3, #32]
    5024:	428a      	cmp	r2, r1
    5026:	d10c      	bne.n	5042 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    5028:	7cc2      	ldrb	r2, [r0, #19]
    502a:	2a02      	cmp	r2, #2
    502c:	d004      	beq.n	5038 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    502e:	2a01      	cmp	r2, #1
    5030:	d00b      	beq.n	504a <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    5032:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    5034:	7725      	strb	r5, [r4, #28]
}
    5036:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    5038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    503a:	4798      	blx	r3
  if (!syncDevice()) {
    503c:	2800      	cmp	r0, #0
    503e:	d1f8      	bne.n	5032 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    5040:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    5042:	4790      	blx	r2
    5044:	2800      	cmp	r0, #0
    5046:	d0fb      	beq.n	5040 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    5048:	e7f3      	b.n	5032 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    504a:	f7ff ffa1 	bl	4f90 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    504e:	2800      	cmp	r0, #0
    5050:	d0f6      	beq.n	5040 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    5052:	e7ee      	b.n	5032 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    5054:	00005001 	.word	0x00005001

00005058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    5058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    505c:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    505e:	b082      	sub	sp, #8
    5060:	460f      	mov	r7, r1
    5062:	4935      	ldr	r1, [pc, #212]	; (5138 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    5064:	9201      	str	r2, [sp, #4]
    5066:	4606      	mov	r6, r0
  if (!syncDevice()) {
    5068:	6a1a      	ldr	r2, [r3, #32]
    506a:	428a      	cmp	r2, r1
    506c:	d15e      	bne.n	512c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    506e:	7cc2      	ldrb	r2, [r0, #19]
    5070:	2a02      	cmp	r2, #2
    5072:	d041      	beq.n	50f8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    5074:	2a01      	cmp	r2, #1
    5076:	d05b      	beq.n	5130 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    5078:	7cb4      	ldrb	r4, [r6, #18]
    507a:	2c00      	cmp	r4, #0
    507c:	d047      	beq.n	510e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    507e:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    5080:	2f0c      	cmp	r7, #12
    5082:	d011      	beq.n	50a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    5084:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 513c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    5088:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    508c:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5090:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    5092:	e004      	b.n	509e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    5094:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    5098:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    509a:	041a      	lsls	r2, r3, #16
    509c:	d434      	bmi.n	5108 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    509e:	4628      	mov	r0, r5
    50a0:	f001 fe8a 	bl	6db8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    50a4:	28ff      	cmp	r0, #255	; 0xff
    50a6:	d1f5      	bne.n	5094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    50a8:	f10d 0804 	add.w	r8, sp, #4
    50ac:	ac02      	add	r4, sp, #8
    50ae:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    50b2:	4628      	mov	r0, r5
    50b4:	f001 fe9e 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    50b8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    50bc:	4628      	mov	r0, r5
    50be:	f001 fe99 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    50c2:	45a0      	cmp	r8, r4
    50c4:	d1f8      	bne.n	50b8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    50c6:	2f00      	cmp	r7, #0
    50c8:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    50ca:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    50ce:	bf0c      	ite	eq
    50d0:	2195      	moveq	r1, #149	; 0x95
    50d2:	2187      	movne	r1, #135	; 0x87
    50d4:	f001 fe8e 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    50d8:	4628      	mov	r0, r5
    50da:	f001 fe6d 	bl	6db8 <SdSpiArduinoDriver::receive()>
    50de:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    50e0:	3c01      	subs	r4, #1
    50e2:	f001 fe69 	bl	6db8 <SdSpiArduinoDriver::receive()>
    50e6:	0603      	lsls	r3, r0, #24
    50e8:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    50ea:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    50ec:	d501      	bpl.n	50f2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    50ee:	2c00      	cmp	r4, #0
    50f0:	d1f5      	bne.n	50de <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    50f2:	b002      	add	sp, #8
    50f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    50f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    50fa:	4798      	blx	r3
  if (!syncDevice()) {
    50fc:	2800      	cmp	r0, #0
    50fe:	d1bb      	bne.n	5078 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    5100:	20ff      	movs	r0, #255	; 0xff
}
    5102:	b002      	add	sp, #8
    5104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    5108:	2f00      	cmp	r7, #0
    510a:	d0cd      	beq.n	50a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    510c:	e7f8      	b.n	5100 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    510e:	1d35      	adds	r5, r6, #4
    5110:	4628      	mov	r0, r5
    5112:	f001 fe1b 	bl	6d4c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    5116:	4621      	mov	r1, r4
    5118:	7c30      	ldrb	r0, [r6, #16]
    511a:	f001 fd8d 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    511e:	21ff      	movs	r1, #255	; 0xff
    5120:	4628      	mov	r0, r5
    5122:	f001 fe67 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    5126:	2301      	movs	r3, #1
    5128:	74b3      	strb	r3, [r6, #18]
}
    512a:	e7a9      	b.n	5080 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    512c:	4790      	blx	r2
    512e:	e7e5      	b.n	50fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    5130:	f7ff ff2e 	bl	4f90 <SharedSpiCard::readStop()>
    5134:	e7e2      	b.n	50fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    5136:	bf00      	nop
    5138:	00005001 	.word	0x00005001
    513c:	20027494 	.word	0x20027494

00005140 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    5140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    5142:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    5144:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    5146:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    5148:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    514a:	f7ff ff85 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    514e:	b9e0      	cbnz	r0, 518a <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    5150:	1d37      	adds	r7, r6, #4
    5152:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    5154:	4638      	mov	r0, r7
    5156:	f001 fe2f 	bl	6db8 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    515a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    515e:	42a5      	cmp	r5, r4
    5160:	d1f8      	bne.n	5154 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    5162:	7cb4      	ldrb	r4, [r6, #18]
    5164:	b914      	cbnz	r4, 516c <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    5166:	2401      	movs	r4, #1
}
    5168:	4620      	mov	r0, r4
    516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    516c:	7c30      	ldrb	r0, [r6, #16]
    516e:	2101      	movs	r1, #1
    5170:	f001 fd62 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5174:	21ff      	movs	r1, #255	; 0xff
    5176:	4638      	mov	r0, r7
    5178:	f001 fe3c 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    517c:	4638      	mov	r0, r7
    517e:	f001 fdef 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5182:	2300      	movs	r3, #0
}
    5184:	4620      	mov	r0, r4
    m_spiActive = false;
    5186:	74b3      	strb	r3, [r6, #18]
}
    5188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    518a:	2312      	movs	r3, #18
  if (m_spiActive) {
    518c:	7cb4      	ldrb	r4, [r6, #18]
    518e:	7473      	strb	r3, [r6, #17]
    5190:	2c00      	cmp	r4, #0
    5192:	d0e9      	beq.n	5168 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    5194:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    5196:	7c30      	ldrb	r0, [r6, #16]
    5198:	2101      	movs	r1, #1
    519a:	f001 fd4d 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    519e:	21ff      	movs	r1, #255	; 0xff
    51a0:	4620      	mov	r0, r4
    51a2:	f001 fe27 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    51a6:	4620      	mov	r0, r4
    51a8:	f001 fdda 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    51ac:	2300      	movs	r3, #0
  return false;
    51ae:	461c      	mov	r4, r3
    m_spiActive = false;
    51b0:	74b3      	strb	r3, [r6, #18]
}
    51b2:	4620      	mov	r0, r4
    51b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51b6:	bf00      	nop

000051b8 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	4616      	mov	r6, r2
    51bc:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    51be:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    51c0:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    51c2:	f7ff ff49 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    51c6:	b1b0      	cbz	r0, 51f6 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    51c8:	231b      	movs	r3, #27
    51ca:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    51cc:	7ca0      	ldrb	r0, [r4, #18]
    51ce:	b908      	cbnz	r0, 51d4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    51d0:	b002      	add	sp, #8
    51d2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    51d4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    51d6:	7c20      	ldrb	r0, [r4, #16]
    51d8:	2101      	movs	r1, #1
    51da:	f001 fd2d 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    51de:	21ff      	movs	r1, #255	; 0xff
    51e0:	4628      	mov	r0, r5
    51e2:	f001 fe07 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    51e6:	4628      	mov	r0, r5
    51e8:	f001 fdba 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    51ec:	2300      	movs	r3, #0
  return false;
    51ee:	4618      	mov	r0, r3
    m_spiActive = false;
    51f0:	74a3      	strb	r3, [r4, #18]
}
    51f2:	b002      	add	sp, #8
    51f4:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    51f6:	4605      	mov	r5, r0
    51f8:	2210      	movs	r2, #16
    51fa:	4631      	mov	r1, r6
    51fc:	4620      	mov	r0, r4
    51fe:	f7ff fe81 	bl	4f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5202:	2800      	cmp	r0, #0
    5204:	d0e2      	beq.n	51cc <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    5206:	7ca6      	ldrb	r6, [r4, #18]
    5208:	2e00      	cmp	r6, #0
    520a:	d0e1      	beq.n	51d0 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    520c:	7c20      	ldrb	r0, [r4, #16]
    520e:	2101      	movs	r1, #1
    5210:	f001 fd12 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5214:	1d20      	adds	r0, r4, #4
    5216:	21ff      	movs	r1, #255	; 0xff
    5218:	9001      	str	r0, [sp, #4]
    521a:	f001 fdeb 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    521e:	9801      	ldr	r0, [sp, #4]
    5220:	f001 fd9e 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
}
    5224:	4630      	mov	r0, r6
    m_spiActive = false;
    5226:	74a5      	strb	r5, [r4, #18]
}
    5228:	b002      	add	sp, #8
    522a:	bd70      	pop	{r4, r5, r6, pc}

0000522c <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    522c:	6803      	ldr	r3, [r0, #0]
    522e:	4a25      	ldr	r2, [pc, #148]	; (52c4 <SharedSpiCard::sectorCount()+0x98>)
    5230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5232:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    5234:	b500      	push	{lr}
    5236:	b085      	sub	sp, #20
    5238:	d10f      	bne.n	525a <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    523a:	466a      	mov	r2, sp
    523c:	2109      	movs	r1, #9
    523e:	f7ff ffbb 	bl	51b8 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    5242:	b138      	cbz	r0, 5254 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    5244:	f89d 3000 	ldrb.w	r3, [sp]
    5248:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    524c:	d008      	beq.n	5260 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    524e:	2b40      	cmp	r3, #64	; 0x40
    5250:	d027      	beq.n	52a2 <SharedSpiCard::sectorCount()+0x76>
    5252:	2000      	movs	r0, #0
}
    5254:	b005      	add	sp, #20
    5256:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    525a:	4669      	mov	r1, sp
    525c:	4798      	blx	r3
    525e:	e7f0      	b.n	5242 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5260:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    5264:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5268:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    526c:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5270:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    5274:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5276:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    527a:	0080      	lsls	r0, r0, #2
    527c:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5280:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    5284:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5288:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    528c:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5290:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5294:	4413      	add	r3, r2
    5296:	3001      	adds	r0, #1
    5298:	3b07      	subs	r3, #7
    529a:	4098      	lsls	r0, r3
}
    529c:	b005      	add	sp, #20
    529e:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    52a2:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    52a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    52aa:	3001      	adds	r0, #1
    52ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    52b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    52b4:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    52b8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    52bc:	0280      	lsls	r0, r0, #10
    52be:	b005      	add	sp, #20
    52c0:	f85d fb04 	ldr.w	pc, [sp], #4
    52c4:	000055e9 	.word	0x000055e9

000052c8 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    52c8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    52ca:	460a      	mov	r2, r1
    52cc:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    52ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    52d0:	b083      	sub	sp, #12
    52d2:	4d16      	ldr	r5, [pc, #88]	; (532c <SharedSpiCard::readStart(unsigned long)+0x64>)
    52d4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    52d6:	42ab      	cmp	r3, r5
    52d8:	d124      	bne.n	5324 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    52da:	7d40      	ldrb	r0, [r0, #21]
    52dc:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    52de:	f04f 0112 	mov.w	r1, #18
    52e2:	4620      	mov	r0, r4
    sector <<= 9;
    52e4:	bf18      	it	ne
    52e6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    52e8:	f7ff feb6 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52ec:	b920      	cbnz	r0, 52f8 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    52ee:	2301      	movs	r3, #1
  return true;
    52f0:	4618      	mov	r0, r3
  m_state = READ_STATE;
    52f2:	74e3      	strb	r3, [r4, #19]
}
    52f4:	b003      	add	sp, #12
    52f6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    52f8:	230c      	movs	r3, #12
  if (m_spiActive) {
    52fa:	7ca0      	ldrb	r0, [r4, #18]
    52fc:	7463      	strb	r3, [r4, #17]
    52fe:	2800      	cmp	r0, #0
    5300:	d0f8      	beq.n	52f4 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5302:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5304:	7c20      	ldrb	r0, [r4, #16]
    5306:	2101      	movs	r1, #1
    5308:	f001 fc96 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    530c:	21ff      	movs	r1, #255	; 0xff
    530e:	4628      	mov	r0, r5
    5310:	f001 fd70 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5314:	4628      	mov	r0, r5
    5316:	f001 fd23 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    531a:	2300      	movs	r3, #0
}
    531c:	4618      	mov	r0, r3
    m_spiActive = false;
    531e:	74a3      	strb	r3, [r4, #18]
}
    5320:	b003      	add	sp, #12
    5322:	bd30      	pop	{r4, r5, pc}
    5324:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5326:	4798      	blx	r3
    5328:	9a01      	ldr	r2, [sp, #4]
    532a:	e7d7      	b.n	52dc <SharedSpiCard::readStart(unsigned long)+0x14>
    532c:	00004cfd 	.word	0x00004cfd

00005330 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    5330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5332:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    5334:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    5336:	4606      	mov	r6, r0
    5338:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    533a:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    533c:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    533e:	d102      	bne.n	5346 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    5340:	6983      	ldr	r3, [r0, #24]
    5342:	428b      	cmp	r3, r1
    5344:	d005      	beq.n	5352 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    5346:	4629      	mov	r1, r5
    5348:	4630      	mov	r0, r6
    534a:	f7ff ffbd 	bl	52c8 <SharedSpiCard::readStart(unsigned long)>
    534e:	b180      	cbz	r0, 5372 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    5350:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5352:	b187      	cbz	r7, 5376 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    5354:	2500      	movs	r5, #0
    5356:	e001      	b.n	535c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5358:	42af      	cmp	r7, r5
    535a:	d00c      	beq.n	5376 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    535c:	4621      	mov	r1, r4
    535e:	f44f 7200 	mov.w	r2, #512	; 0x200
    5362:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5364:	3501      	adds	r5, #1
    5366:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    536a:	f7ff fdcb 	bl	4f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    536e:	2800      	cmp	r0, #0
    5370:	d1f2      	bne.n	5358 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    5372:	2000      	movs	r0, #0
}
    5374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    5376:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5378:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    537a:	443b      	add	r3, r7
    537c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    537e:	2800      	cmp	r0, #0
    5380:	d1f8      	bne.n	5374 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    5382:	4630      	mov	r0, r6
}
    5384:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    5388:	f7ff be02 	b.w	4f90 <SharedSpiCard::readStop()>

0000538c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    538c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5390:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    5392:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    5394:	4606      	mov	r6, r0
    5396:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    5398:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    539a:	4615      	mov	r5, r2
    539c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    53a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    53a4:	d102      	bne.n	53ac <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    53a6:	6983      	ldr	r3, [r0, #24]
    53a8:	428b      	cmp	r3, r1
    53aa:	d005      	beq.n	53b8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    53ac:	4621      	mov	r1, r4
    53ae:	4630      	mov	r0, r6
    53b0:	f7ff ff8a 	bl	52c8 <SharedSpiCard::readStart(unsigned long)>
    53b4:	b1b0      	cbz	r0, 53e4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    53b6:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    53b8:	f1bb 0f00 	cmp.w	fp, #0
    53bc:	d015      	beq.n	53ea <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    53be:	eb04 0a0b 	add.w	sl, r4, fp
    53c2:	e002      	b.n	53ca <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    53c4:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    53c6:	45a2      	cmp	sl, r4
    53c8:	d00f      	beq.n	53ea <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    53ca:	f44f 7200 	mov.w	r2, #512	; 0x200
    53ce:	4629      	mov	r1, r5
    53d0:	4630      	mov	r0, r6
    53d2:	f7ff fd97 	bl	4f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    53d6:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    53d8:	4642      	mov	r2, r8
    53da:	4620      	mov	r0, r4
    53dc:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    53de:	3401      	adds	r4, #1
    if (readData(dst)) {
    53e0:	2f00      	cmp	r7, #0
    53e2:	d1ef      	bne.n	53c4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    53e4:	2000      	movs	r0, #0
}
    53e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    53ea:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    53ec:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    53ee:	445b      	add	r3, fp
    53f0:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    53f2:	2800      	cmp	r0, #0
    53f4:	d1f7      	bne.n	53e6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    53f6:	4630      	mov	r0, r6
}
    53f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    53fc:	f7ff bdc8 	b.w	4f90 <SharedSpiCard::readStop()>

00005400 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    5400:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    5402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5406:	695f      	ldr	r7, [r3, #20]
    5408:	4b16      	ldr	r3, [pc, #88]	; (5464 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    540a:	429f      	cmp	r7, r3
    540c:	d11f      	bne.n	544e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    540e:	7cc3      	ldrb	r3, [r0, #19]
    5410:	4604      	mov	r4, r0
    5412:	460d      	mov	r5, r1
    5414:	4616      	mov	r6, r2
    5416:	2b01      	cmp	r3, #1
    5418:	d102      	bne.n	5420 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    541a:	6983      	ldr	r3, [r0, #24]
    541c:	4299      	cmp	r1, r3
    541e:	d005      	beq.n	542c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    5420:	4629      	mov	r1, r5
    5422:	4620      	mov	r0, r4
    5424:	f7ff ff50 	bl	52c8 <SharedSpiCard::readStart(unsigned long)>
    5428:	b170      	cbz	r0, 5448 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    542a:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    542c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5430:	4631      	mov	r1, r6
    5432:	4620      	mov	r0, r4
    5434:	f7ff fd66 	bl	4f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    5438:	b130      	cbz	r0, 5448 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    543a:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    543c:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    543e:	3301      	adds	r3, #1
    5440:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5442:	b148      	cbz	r0, 5458 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    5444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    5448:	2000      	movs	r0, #0
}
    544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    544e:	46bc      	mov	ip, r7
    5450:	2301      	movs	r3, #1
}
    5452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5456:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    5458:	4620      	mov	r0, r4
}
    545a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    545e:	f7ff bd97 	b.w	4f90 <SharedSpiCard::readStop()>
    5462:	bf00      	nop
    5464:	00005331 	.word	0x00005331

00005468 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5468:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    546a:	460a      	mov	r2, r1
    546c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    5470:	b083      	sub	sp, #12
    5472:	4d16      	ldr	r5, [pc, #88]	; (54cc <SharedSpiCard::writeStart(unsigned long)+0x64>)
    5474:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5476:	42ab      	cmp	r3, r5
    5478:	d124      	bne.n	54c4 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    547a:	7d40      	ldrb	r0, [r0, #21]
    547c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    547e:	f04f 0119 	mov.w	r1, #25
    5482:	4620      	mov	r0, r4
    sector <<= 9;
    5484:	bf18      	it	ne
    5486:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    5488:	f7ff fde6 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    548c:	b920      	cbnz	r0, 5498 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    548e:	2302      	movs	r3, #2
  return true;
    5490:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    5492:	74e3      	strb	r3, [r4, #19]
}
    5494:	b003      	add	sp, #12
    5496:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5498:	230e      	movs	r3, #14
  if (m_spiActive) {
    549a:	7ca0      	ldrb	r0, [r4, #18]
    549c:	7463      	strb	r3, [r4, #17]
    549e:	2800      	cmp	r0, #0
    54a0:	d0f8      	beq.n	5494 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    54a2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    54a4:	7c20      	ldrb	r0, [r4, #16]
    54a6:	2101      	movs	r1, #1
    54a8:	f001 fbc6 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54ac:	21ff      	movs	r1, #255	; 0xff
    54ae:	4628      	mov	r0, r5
    54b0:	f001 fca0 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    54b4:	4628      	mov	r0, r5
    54b6:	f001 fc53 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    54ba:	2300      	movs	r3, #0
}
    54bc:	4618      	mov	r0, r3
    m_spiActive = false;
    54be:	74a3      	strb	r3, [r4, #18]
}
    54c0:	b003      	add	sp, #12
    54c2:	bd30      	pop	{r4, r5, pc}
    54c4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    54c6:	4798      	blx	r3
    54c8:	9a01      	ldr	r2, [sp, #4]
    54ca:	e7d7      	b.n	547c <SharedSpiCard::writeStart(unsigned long)+0x14>
    54cc:	00004cfd 	.word	0x00004cfd

000054d0 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    54d0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    54d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    54d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    54d8:	4617      	mov	r7, r2
    54da:	4a41      	ldr	r2, [pc, #260]	; (55e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    54dc:	b085      	sub	sp, #20
    54de:	4604      	mov	r4, r0
    54e0:	460e      	mov	r6, r1
    54e2:	4293      	cmp	r3, r2
    54e4:	d145      	bne.n	5572 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    54e6:	466a      	mov	r2, sp
    54e8:	2109      	movs	r1, #9
    54ea:	f7ff fe65 	bl	51b8 <SharedSpiCard::readRegister(unsigned char, void*)>
    54ee:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    54f0:	b1b5      	cbz	r5, 5520 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    54f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    54f6:	065a      	lsls	r2, r3, #25
    54f8:	d518      	bpl.n	552c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    54fa:	7d63      	ldrb	r3, [r4, #21]
    54fc:	2b03      	cmp	r3, #3
    54fe:	d001      	beq.n	5504 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5500:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    5502:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    5504:	4632      	mov	r2, r6
    5506:	2120      	movs	r1, #32
    5508:	4620      	mov	r0, r4
    550a:	f7ff fda5 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    550e:	b928      	cbnz	r0, 551c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    5510:	463a      	mov	r2, r7
    5512:	2121      	movs	r1, #33	; 0x21
    5514:	4620      	mov	r0, r4
    5516:	f7ff fd9f 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    551a:	b370      	cbz	r0, 557a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    551c:	2326      	movs	r3, #38	; 0x26
    551e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5520:	7ca5      	ldrb	r5, [r4, #18]
    5522:	b99d      	cbnz	r5, 554c <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    5524:	4628      	mov	r0, r5
    5526:	b005      	add	sp, #20
    5528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5530:	f89d 200b 	ldrb.w	r2, [sp, #11]
    5534:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5536:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    553a:	1c7a      	adds	r2, r7, #1
    553c:	4332      	orrs	r2, r6
    553e:	4213      	tst	r3, r2
    5540:	d0db      	beq.n	54fa <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5542:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    5544:	7ca5      	ldrb	r5, [r4, #18]
    5546:	7463      	strb	r3, [r4, #17]
    5548:	2d00      	cmp	r5, #0
    554a:	d0eb      	beq.n	5524 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    554c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    554e:	7c20      	ldrb	r0, [r4, #16]
    5550:	2101      	movs	r1, #1
    5552:	f001 fb71 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5556:	21ff      	movs	r1, #255	; 0xff
    5558:	4628      	mov	r0, r5
    555a:	f001 fc4b 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    555e:	4628      	mov	r0, r5
    5560:	f001 fbfe 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5564:	2300      	movs	r3, #0
  return false;
    5566:	461d      	mov	r5, r3
    m_spiActive = false;
    5568:	74a3      	strb	r3, [r4, #18]
}
    556a:	4628      	mov	r0, r5
    556c:	b005      	add	sp, #20
    556e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    5572:	4669      	mov	r1, sp
    5574:	4798      	blx	r3
    5576:	4605      	mov	r5, r0
    5578:	e7ba      	b.n	54f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    557a:	4602      	mov	r2, r0
    557c:	2126      	movs	r1, #38	; 0x26
    557e:	4620      	mov	r0, r4
    5580:	f7ff fd6a 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5584:	2800      	cmp	r0, #0
    5586:	d1c9      	bne.n	551c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    5588:	f8df 8058 	ldr.w	r8, [pc, #88]	; 55e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    558c:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    5590:	f104 0904 	add.w	r9, r4, #4
    5594:	f8d8 3000 	ldr.w	r3, [r8]
    5598:	441f      	add	r7, r3
    559a:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    559c:	e004      	b.n	55a8 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    559e:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    55a2:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    55a4:	041b      	lsls	r3, r3, #16
    55a6:	d417      	bmi.n	55d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    55a8:	4648      	mov	r0, r9
    55aa:	f001 fc05 	bl	6db8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    55ae:	28ff      	cmp	r0, #255	; 0xff
    55b0:	4606      	mov	r6, r0
    55b2:	d1f4      	bne.n	559e <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    55b4:	7ca3      	ldrb	r3, [r4, #18]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d0b4      	beq.n	5524 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    55ba:	2101      	movs	r1, #1
    55bc:	7c20      	ldrb	r0, [r4, #16]
  return true;
    55be:	461d      	mov	r5, r3
    55c0:	f001 fb3a 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55c4:	4631      	mov	r1, r6
    55c6:	4648      	mov	r0, r9
    55c8:	f001 fc14 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    55cc:	4648      	mov	r0, r9
    55ce:	f001 fbc7 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55d2:	2300      	movs	r3, #0
    55d4:	74a3      	strb	r3, [r4, #18]
}
    55d6:	e7a5      	b.n	5524 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    55d8:	2328      	movs	r3, #40	; 0x28
    55da:	7463      	strb	r3, [r4, #17]
    goto fail;
    55dc:	e7a0      	b.n	5520 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    55de:	bf00      	nop
    55e0:	000055e9 	.word	0x000055e9
    55e4:	20027494 	.word	0x20027494

000055e8 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    55e8:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    55ea:	2200      	movs	r2, #0
    55ec:	b082      	sub	sp, #8
    55ee:	460e      	mov	r6, r1
    55f0:	2109      	movs	r1, #9
    55f2:	4604      	mov	r4, r0
    55f4:	f7ff fd30 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    55f8:	b1b0      	cbz	r0, 5628 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    55fa:	231b      	movs	r3, #27
    55fc:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    55fe:	7ca0      	ldrb	r0, [r4, #18]
    5600:	b908      	cbnz	r0, 5606 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    5602:	b002      	add	sp, #8
    5604:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5606:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5608:	7c20      	ldrb	r0, [r4, #16]
    560a:	2101      	movs	r1, #1
    560c:	f001 fb14 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5610:	21ff      	movs	r1, #255	; 0xff
    5612:	4628      	mov	r0, r5
    5614:	f001 fbee 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5618:	4628      	mov	r0, r5
    561a:	f001 fba1 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    561e:	2300      	movs	r3, #0
  return false;
    5620:	4618      	mov	r0, r3
    m_spiActive = false;
    5622:	74a3      	strb	r3, [r4, #18]
  }
    5624:	b002      	add	sp, #8
    5626:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5628:	4605      	mov	r5, r0
    562a:	2210      	movs	r2, #16
    562c:	4631      	mov	r1, r6
    562e:	4620      	mov	r0, r4
    5630:	f7ff fc68 	bl	4f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5634:	2800      	cmp	r0, #0
    5636:	d0e2      	beq.n	55fe <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    5638:	7ca6      	ldrb	r6, [r4, #18]
    563a:	2e00      	cmp	r6, #0
    563c:	d0e1      	beq.n	5602 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    563e:	7c20      	ldrb	r0, [r4, #16]
    5640:	2101      	movs	r1, #1
    5642:	f001 faf9 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5646:	1d20      	adds	r0, r4, #4
    5648:	21ff      	movs	r1, #255	; 0xff
    564a:	9001      	str	r0, [sp, #4]
    564c:	f001 fbd2 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5650:	9801      	ldr	r0, [sp, #4]
    5652:	f001 fb85 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
}
    5656:	4630      	mov	r0, r6
    m_spiActive = false;
    5658:	74a5      	strb	r5, [r4, #18]
  }
    565a:	b002      	add	sp, #8
    565c:	bd70      	pop	{r4, r5, r6, pc}
    565e:	bf00      	nop

00005660 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    5660:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5662:	2200      	movs	r2, #0
    5664:	b082      	sub	sp, #8
    5666:	460e      	mov	r6, r1
    5668:	210a      	movs	r1, #10
    566a:	4604      	mov	r4, r0
    566c:	f7ff fcf4 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5670:	b1b0      	cbz	r0, 56a0 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    5672:	231b      	movs	r3, #27
    5674:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5676:	7ca0      	ldrb	r0, [r4, #18]
    5678:	b908      	cbnz	r0, 567e <SharedSpiCard::readCID(CID*)+0x1e>
  }
    567a:	b002      	add	sp, #8
    567c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    567e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5680:	7c20      	ldrb	r0, [r4, #16]
    5682:	2101      	movs	r1, #1
    5684:	f001 fad8 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5688:	21ff      	movs	r1, #255	; 0xff
    568a:	4628      	mov	r0, r5
    568c:	f001 fbb2 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5690:	4628      	mov	r0, r5
    5692:	f001 fb65 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5696:	2300      	movs	r3, #0
  return false;
    5698:	4618      	mov	r0, r3
    m_spiActive = false;
    569a:	74a3      	strb	r3, [r4, #18]
  }
    569c:	b002      	add	sp, #8
    569e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    56a0:	4605      	mov	r5, r0
    56a2:	2210      	movs	r2, #16
    56a4:	4631      	mov	r1, r6
    56a6:	4620      	mov	r0, r4
    56a8:	f7ff fc2c 	bl	4f04 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    56ac:	2800      	cmp	r0, #0
    56ae:	d0e2      	beq.n	5676 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    56b0:	7ca6      	ldrb	r6, [r4, #18]
    56b2:	2e00      	cmp	r6, #0
    56b4:	d0e1      	beq.n	567a <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    56b6:	7c20      	ldrb	r0, [r4, #16]
    56b8:	2101      	movs	r1, #1
    56ba:	f001 fabd 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    56be:	1d20      	adds	r0, r4, #4
    56c0:	21ff      	movs	r1, #255	; 0xff
    56c2:	9001      	str	r0, [sp, #4]
    56c4:	f001 fb96 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    56c8:	9801      	ldr	r0, [sp, #4]
    56ca:	f001 fb49 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
}
    56ce:	4630      	mov	r0, r6
    m_spiActive = false;
    56d0:	74a5      	strb	r5, [r4, #18]
  }
    56d2:	b002      	add	sp, #8
    56d4:	bd70      	pop	{r4, r5, r6, pc}
    56d6:	bf00      	nop

000056d8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    56d8:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    56da:	1d05      	adds	r5, r0, #4
    56dc:	4616      	mov	r6, r2
    56de:	4604      	mov	r4, r0
    56e0:	4628      	mov	r0, r5
    56e2:	f001 fb87 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    56e6:	f44f 7200 	mov.w	r2, #512	; 0x200
    56ea:	4631      	mov	r1, r6
    56ec:	4628      	mov	r0, r5
    56ee:	f001 fb8b 	bl	6e08 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    56f2:	21ff      	movs	r1, #255	; 0xff
    56f4:	4628      	mov	r0, r5
    56f6:	f001 fb7d 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    56fa:	21ff      	movs	r1, #255	; 0xff
    56fc:	4628      	mov	r0, r5
    56fe:	f001 fb79 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    5702:	4628      	mov	r0, r5
    5704:	f001 fb58 	bl	6db8 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5708:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    570c:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    570e:	2b05      	cmp	r3, #5
    5710:	d004      	beq.n	571c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    5712:	2320      	movs	r3, #32
  if (m_spiActive) {
    5714:	7ca0      	ldrb	r0, [r4, #18]
    5716:	7463      	strb	r3, [r4, #17]
    5718:	b910      	cbnz	r0, 5720 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    571a:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    571c:	2001      	movs	r0, #1
}
    571e:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    5720:	7c20      	ldrb	r0, [r4, #16]
    5722:	2101      	movs	r1, #1
    5724:	f001 fa88 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5728:	21ff      	movs	r1, #255	; 0xff
    572a:	4628      	mov	r0, r5
    572c:	f001 fb62 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5730:	4628      	mov	r0, r5
    5732:	f001 fb15 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5736:	2300      	movs	r3, #0
}
    5738:	4618      	mov	r0, r3
    m_spiActive = false;
    573a:	74a3      	strb	r3, [r4, #18]
}
    573c:	bd70      	pop	{r4, r5, r6, pc}
    573e:	bf00      	nop

00005740 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    5740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5744:	4d17      	ldr	r5, [pc, #92]	; (57a4 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    5746:	4606      	mov	r6, r0
    5748:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    574a:	f100 0804 	add.w	r8, r0, #4
    574e:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    5750:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5754:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    5756:	e003      	b.n	5760 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    5758:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    575a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    575c:	041b      	lsls	r3, r3, #16
    575e:	d40c      	bmi.n	577a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    5760:	4640      	mov	r0, r8
    5762:	f001 fb29 	bl	6db8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5766:	28ff      	cmp	r0, #255	; 0xff
    5768:	d1f6      	bne.n	5758 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    576a:	463a      	mov	r2, r7
    576c:	21fc      	movs	r1, #252	; 0xfc
    576e:	4630      	mov	r0, r6
    5770:	f7ff ffb2 	bl	56d8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5774:	b118      	cbz	r0, 577e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    5776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    577a:	2324      	movs	r3, #36	; 0x24
    577c:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    577e:	7cb0      	ldrb	r0, [r6, #18]
    5780:	2800      	cmp	r0, #0
    5782:	d0f8      	beq.n	5776 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    5784:	7c30      	ldrb	r0, [r6, #16]
    5786:	2101      	movs	r1, #1
    5788:	f001 fa56 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    578c:	21ff      	movs	r1, #255	; 0xff
    578e:	4640      	mov	r0, r8
    5790:	f001 fb30 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5794:	4640      	mov	r0, r8
    5796:	f001 fae3 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    579a:	2300      	movs	r3, #0
}
    579c:	4618      	mov	r0, r3
    m_spiActive = false;
    579e:	74b3      	strb	r3, [r6, #18]
}
    57a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57a4:	20027494 	.word	0x20027494

000057a8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    57a8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57aa:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    57ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    57ae:	4616      	mov	r6, r2
    57b0:	4a22      	ldr	r2, [pc, #136]	; (583c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    57b2:	b082      	sub	sp, #8
    57b4:	4604      	mov	r4, r0
    57b6:	460d      	mov	r5, r1
    57b8:	4293      	cmp	r3, r2
    57ba:	d13c      	bne.n	5836 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    57bc:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    57be:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    57c0:	f04f 0118 	mov.w	r1, #24
    57c4:	4620      	mov	r0, r4
    sector <<= 9;
    57c6:	bf18      	it	ne
    57c8:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    57ca:	462a      	mov	r2, r5
    57cc:	f7ff fc44 	bl	5058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    57d0:	4605      	mov	r5, r0
    57d2:	b1b0      	cbz	r0, 5802 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    57d4:	230d      	movs	r3, #13
    57d6:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    57d8:	7ca0      	ldrb	r0, [r4, #18]
    57da:	b908      	cbnz	r0, 57e0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    57dc:	b002      	add	sp, #8
    57de:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    57e0:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    57e2:	7c20      	ldrb	r0, [r4, #16]
    57e4:	2101      	movs	r1, #1
    57e6:	f001 fa27 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    57ea:	21ff      	movs	r1, #255	; 0xff
    57ec:	4628      	mov	r0, r5
    57ee:	f001 fb01 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    57f2:	4628      	mov	r0, r5
    57f4:	f001 fab4 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    57f8:	2300      	movs	r3, #0
  return false;
    57fa:	4618      	mov	r0, r3
    m_spiActive = false;
    57fc:	74a3      	strb	r3, [r4, #18]
}
    57fe:	b002      	add	sp, #8
    5800:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    5802:	4632      	mov	r2, r6
    5804:	21fe      	movs	r1, #254	; 0xfe
    5806:	4620      	mov	r0, r4
    5808:	f7ff ff66 	bl	56d8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    580c:	2800      	cmp	r0, #0
    580e:	d0e3      	beq.n	57d8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    5810:	7ca6      	ldrb	r6, [r4, #18]
    5812:	2e00      	cmp	r6, #0
    5814:	d0e2      	beq.n	57dc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    5816:	7c20      	ldrb	r0, [r4, #16]
    5818:	2101      	movs	r1, #1
    581a:	f001 fa0d 	bl	6c38 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    581e:	1d20      	adds	r0, r4, #4
    5820:	21ff      	movs	r1, #255	; 0xff
    5822:	9001      	str	r0, [sp, #4]
    5824:	f001 fae6 	bl	6df4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5828:	9801      	ldr	r0, [sp, #4]
    582a:	f001 fa99 	bl	6d60 <SdSpiArduinoDriver::deactivate()>
  return true;
    582e:	4630      	mov	r0, r6
    m_spiActive = false;
    5830:	74a5      	strb	r5, [r4, #18]
}
    5832:	b002      	add	sp, #8
    5834:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    5836:	4798      	blx	r3
    5838:	e7c1      	b.n	57be <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    583a:	bf00      	nop
    583c:	00004cfd 	.word	0x00004cfd

00005840 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5840:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    5842:	7f04      	ldrb	r4, [r0, #28]
    5844:	b134      	cbz	r4, 5854 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    5846:	6804      	ldr	r4, [r0, #0]
    5848:	2301      	movs	r3, #1
    584a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    584c:	46a4      	mov	ip, r4
}
    584e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    5852:	4760      	bx	ip
}
    5854:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    5858:	f7ff bfa6 	b.w	57a8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000585c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    585c:	2000      	movs	r0, #0
    585e:	4770      	bx	lr

00005860 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    5860:	2000      	movs	r0, #0
    5862:	4770      	bx	lr

00005864 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    5864:	2000      	movs	r0, #0
    5866:	4770      	bx	lr

00005868 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    5868:	4770      	bx	lr
    586a:	bf00      	nop

0000586c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    586c:	4b08      	ldr	r3, [pc, #32]	; (5890 <sdIrs()+0x24>)
    586e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5870:	4a08      	ldr	r2, [pc, #32]	; (5894 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    5872:	4809      	ldr	r0, [pc, #36]	; (5898 <sdIrs()+0x2c>)
static void sdIrs() {
    5874:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    5876:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    5878:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    587a:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    587c:	6812      	ldr	r2, [r2, #0]
}
    587e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    5882:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    5884:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    5886:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    588a:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    588c:	7001      	strb	r1, [r0, #0]
}
    588e:	4770      	bx	lr
    5890:	402c0000 	.word	0x402c0000
    5894:	20026870 	.word	0x20026870
    5898:	200274da 	.word	0x200274da

0000589c <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    589c:	4b03      	ldr	r3, [pc, #12]	; (58ac <isBusyDat()+0x10>)
    589e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    58a0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    58a4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    58a8:	4770      	bx	lr
    58aa:	bf00      	nop
    58ac:	402c0000 	.word	0x402c0000

000058b0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    58b0:	4b01      	ldr	r3, [pc, #4]	; (58b8 <isBusyDMA()+0x8>)
    58b2:	7818      	ldrb	r0, [r3, #0]
}
    58b4:	4770      	bx	lr
    58b6:	bf00      	nop
    58b8:	200274da 	.word	0x200274da

000058bc <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    58bc:	4a2b      	ldr	r2, [pc, #172]	; (596c <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    58be:	4b2c      	ldr	r3, [pc, #176]	; (5970 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    58c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    58c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    58c6:	492b      	ldr	r1, [pc, #172]	; (5974 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    58c8:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    58cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    58d0:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    58d2:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    58d4:	4c28      	ldr	r4, [pc, #160]	; (5978 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    58d6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    58da:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    58de:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    58e2:	089b      	lsrs	r3, r3, #2
    58e4:	fbb1 fef3 	udiv	lr, r1, r3
    58e8:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    58ec:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    58f0:	d235      	bcs.n	595e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    58f2:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    58f4:	461e      	mov	r6, r3
    58f6:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    58f8:	011a      	lsls	r2, r3, #4
    58fa:	fbbe f2f2 	udiv	r2, lr, r2
    58fe:	4282      	cmp	r2, r0
    5900:	d901      	bls.n	5906 <setSdclk(unsigned long)+0x4a>
    5902:	2bff      	cmp	r3, #255	; 0xff
    5904:	d9f6      	bls.n	58f4 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5906:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    590a:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    590c:	4290      	cmp	r0, r2
    590e:	d22a      	bcs.n	5966 <setSdclk(unsigned long)+0xaa>
    5910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5914:	2201      	movs	r2, #1
    5916:	e000      	b.n	591a <setSdclk(unsigned long)+0x5e>
    5918:	46a4      	mov	ip, r4
    dvs++;
    591a:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    591c:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5920:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5922:	fbbe f1fc 	udiv	r1, lr, ip
    5926:	4281      	cmp	r1, r0
    5928:	d917      	bls.n	595a <setSdclk(unsigned long)+0x9e>
    592a:	2a10      	cmp	r2, #16
    592c:	d1f4      	bne.n	5918 <setSdclk(unsigned long)+0x5c>
    592e:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    5930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5934:	4911      	ldr	r1, [pc, #68]	; (597c <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    5936:	4a12      	ldr	r2, [pc, #72]	; (5980 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    5938:	fb03 fc0c 	mul.w	ip, r3, ip
    593c:	fbbe f3fc 	udiv	r3, lr, ip
    5940:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    5942:	4b10      	ldr	r3, [pc, #64]	; (5984 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    5944:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    5946:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    5948:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    594a:	4333      	orrs	r3, r6
    594c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    5950:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5952:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5954:	071b      	lsls	r3, r3, #28
    5956:	d5fc      	bpl.n	5952 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    5958:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    595a:	012d      	lsls	r5, r5, #4
    595c:	e7e8      	b.n	5930 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    595e:	4672      	mov	r2, lr
    5960:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    5962:	2301      	movs	r3, #1
    5964:	e7d2      	b.n	590c <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5966:	469c      	mov	ip, r3
    5968:	2500      	movs	r5, #0
    596a:	e7e1      	b.n	5930 <setSdclk(unsigned long)+0x74>
    596c:	400fc000 	.word	0x400fc000
    5970:	400d8000 	.word	0x400d8000
    5974:	5e69ec00 	.word	0x5e69ec00
    5978:	aaaaaaab 	.word	0xaaaaaaab
    597c:	2000af90 	.word	0x2000af90
    5980:	402c0000 	.word	0x402c0000
    5984:	fff0000f 	.word	0xfff0000f

00005988 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    5988:	4b01      	ldr	r3, [pc, #4]	; (5990 <SdioCard::errorCode() const+0x8>)
}
    598a:	7818      	ldrb	r0, [r3, #0]
    598c:	4770      	bx	lr
    598e:	bf00      	nop
    5990:	20008cb6 	.word	0x20008cb6

00005994 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    5994:	4b01      	ldr	r3, [pc, #4]	; (599c <SdioCard::errorData() const+0x8>)
    5996:	6818      	ldr	r0, [r3, #0]
}
    5998:	4770      	bx	lr
    599a:	bf00      	nop
    599c:	20026870 	.word	0x20026870

000059a0 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    59a0:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    59a2:	4c07      	ldr	r4, [pc, #28]	; (59c0 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    59a4:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    59a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    59a8:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    59ac:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    59ae:	f8cc 1004 	str.w	r1, [ip, #4]
    59b2:	f8cc 2008 	str.w	r2, [ip, #8]
    59b6:	f8cc 300c 	str.w	r3, [ip, #12]
}
    59ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    59be:	4770      	bx	lr
    59c0:	200261a4 	.word	0x200261a4

000059c4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    59c4:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    59c6:	4c07      	ldr	r4, [pc, #28]	; (59e4 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    59c8:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    59ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    59cc:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    59d0:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    59d2:	f8cc 1004 	str.w	r1, [ip, #4]
    59d6:	f8cc 2008 	str.w	r2, [ip, #8]
    59da:	f8cc 300c 	str.w	r3, [ip, #12]
}
    59de:	f85d 4b04 	ldr.w	r4, [sp], #4
    59e2:	4770      	bx	lr
    59e4:	200261b4 	.word	0x200261b4

000059e8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    59e8:	4b02      	ldr	r3, [pc, #8]	; (59f4 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    59ea:	2001      	movs	r0, #1
  *ocr = m_ocr;
    59ec:	681b      	ldr	r3, [r3, #0]
    59ee:	600b      	str	r3, [r1, #0]
}
    59f0:	4770      	bx	lr
    59f2:	bf00      	nop
    59f4:	200261c4 	.word	0x200261c4

000059f8 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    59f8:	4770      	bx	lr
    59fa:	bf00      	nop

000059fc <SdioCard::~SdioCard()>:
    59fc:	b510      	push	{r4, lr}
    59fe:	4604      	mov	r4, r0
    5a00:	210c      	movs	r1, #12
    5a02:	f002 f8cd 	bl	7ba0 <operator delete(void*, unsigned int)>
    5a06:	4620      	mov	r0, r4
    5a08:	bd10      	pop	{r4, pc}
    5a0a:	bf00      	nop

00005a0c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    5a0c:	4b04      	ldr	r3, [pc, #16]	; (5a20 <SdioCard::type() const+0x14>)
    5a0e:	781b      	ldrb	r3, [r3, #0]
    5a10:	b123      	cbz	r3, 5a1c <SdioCard::type() const+0x10>
    5a12:	4b04      	ldr	r3, [pc, #16]	; (5a24 <SdioCard::type() const+0x18>)
    5a14:	7818      	ldrb	r0, [r3, #0]
    5a16:	3002      	adds	r0, #2
    5a18:	b2c0      	uxtb	r0, r0
    5a1a:	4770      	bx	lr
    5a1c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    5a1e:	4770      	bx	lr
    5a20:	200274d7 	.word	0x200274d7
    5a24:	200274d8 	.word	0x200274d8

00005a28 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    5a28:	4b18      	ldr	r3, [pc, #96]	; (5a8c <SdioCard::sectorCount()+0x64>)
    5a2a:	781a      	ldrb	r2, [r3, #0]
    5a2c:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    5a30:	d00f      	beq.n	5a52 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    5a32:	2a40      	cmp	r2, #64	; 0x40
    5a34:	d001      	beq.n	5a3a <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    5a36:	2000      	movs	r0, #0
}
    5a38:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5a3a:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5a3c:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5a3e:	7a19      	ldrb	r1, [r3, #8]
    5a40:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5a42:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5a46:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    5a4a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    5a4e:	0280      	lsls	r0, r0, #10
    5a50:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5a52:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5a54:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5a56:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5a58:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5a5c:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5a60:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5a64:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    5a66:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5a68:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    5a6c:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    5a6e:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5a72:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    5a76:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5a78:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    5a7c:	3001      	adds	r0, #1
    5a7e:	f003 030f 	and.w	r3, r3, #15
    5a82:	4413      	add	r3, r2
    5a84:	3b07      	subs	r3, #7
    5a86:	4098      	lsls	r0, r3
}
    5a88:	f85d fb04 	ldr.w	pc, [sp], #4
    5a8c:	200261b4 	.word	0x200261b4

00005a90 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5a90:	4a40      	ldr	r2, [pc, #256]	; (5b94 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5a92:	2005      	movs	r0, #5
    5a94:	4940      	ldr	r1, [pc, #256]	; (5b98 <initSDHC()+0x108>)
static void initSDHC() {
    5a96:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5a98:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    5a9c:	4b3f      	ldr	r3, [pc, #252]	; (5b9c <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5a9e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    5aa2:	4d3f      	ldr	r5, [pc, #252]	; (5ba0 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5aa4:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    5aa8:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    5aac:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    5ab0:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    5ab4:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    5ab8:	f044 0418 	orr.w	r4, r4, #24
    5abc:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    5ac0:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    5ac4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    5ac8:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    5acc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5ad0:	f042 020c 	orr.w	r2, r2, #12
    5ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    5ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5ada:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    5ade:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    5ae0:	69da      	ldr	r2, [r3, #28]
    5ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    5ae6:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    5ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5aee:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5af0:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    5af4:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    5af8:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    5afc:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    5b00:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    5b04:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    5b08:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5b0a:	4b26      	ldr	r3, [pc, #152]	; (5ba4 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    5b0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5b10:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5b12:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    5b14:	4313      	orrs	r3, r2
    5b16:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    5b18:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    5b1a:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    5b1e:	d1fb      	bne.n	5b18 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    5b20:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5b24:	f7ff feca 	bl	58bc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5b28:	4b1b      	ldr	r3, [pc, #108]	; (5b98 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5b2a:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    5b2e:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5b32:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    5b36:	481c      	ldr	r0, [pc, #112]	; (5ba8 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    5b38:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    5b3c:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    5b40:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    5b44:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    5b48:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5b4c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    5b50:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    5b54:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    5b58:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    5b5c:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    5b60:	4912      	ldr	r1, [pc, #72]	; (5bac <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    5b62:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    5b66:	4b12      	ldr	r3, [pc, #72]	; (5bb0 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    5b68:	6368      	str	r0, [r5, #52]	; 0x34
    5b6a:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    5b6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    5b76:	490f      	ldr	r1, [pc, #60]	; (5bb4 <initSDHC()+0x124>)
    5b78:	2060      	movs	r0, #96	; 0x60
    5b7a:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    5b7e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    5b82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    5b84:	4a06      	ldr	r2, [pc, #24]	; (5ba0 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    5b86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    5b8a:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    5b8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5b8e:	011b      	lsls	r3, r3, #4
    5b90:	d4fc      	bmi.n	5b8c <initSDHC()+0xfc>
}
    5b92:	bd38      	pop	{r3, r4, r5, pc}
    5b94:	400d8000 	.word	0x400d8000
    5b98:	401f8000 	.word	0x401f8000
    5b9c:	400fc000 	.word	0x400fc000
    5ba0:	402c0000 	.word	0x402c0000
    5ba4:	01008000 	.word	0x01008000
    5ba8:	117f000b 	.word	0x117f000b
    5bac:	20009000 	.word	0x20009000
    5bb0:	0000586d 	.word	0x0000586d
    5bb4:	e000e400 	.word	0xe000e400

00005bb8 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5bbc:	f001 fec2 	bl	7944 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5bc0:	4e17      	ldr	r6, [pc, #92]	; (5c20 <waitTransferComplete() [clone .part.0]+0x68>)
    5bc2:	4d18      	ldr	r5, [pc, #96]	; (5c24 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5bc4:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5bc6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5c3c <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5bca:	e004      	b.n	5bd6 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5bcc:	f001 feba 	bl	7944 <micros>
    5bd0:	1bc0      	subs	r0, r0, r7
    5bd2:	4540      	cmp	r0, r8
    5bd4:	d81b      	bhi.n	5c0e <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5bd6:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    5bd8:	402c      	ands	r4, r5
    5bda:	d0f7      	beq.n	5bcc <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    5bdc:	4a12      	ldr	r2, [pc, #72]	; (5c28 <waitTransferComplete() [clone .part.0]+0x70>)
    5bde:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5be0:	4b12      	ldr	r3, [pc, #72]	; (5c2c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5be2:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5be4:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5be6:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5be8:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5bea:	4a11      	ldr	r2, [pc, #68]	; (5c30 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5bec:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	4213      	tst	r3, r2
    5bf2:	d009      	beq.n	5c08 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    5bf4:	490f      	ldr	r1, [pc, #60]	; (5c34 <waitTransferComplete() [clone .part.0]+0x7c>)
    5bf6:	241f      	movs	r4, #31
  m_errorLine = line;
    5bf8:	4b0f      	ldr	r3, [pc, #60]	; (5c38 <waitTransferComplete() [clone .part.0]+0x80>)
    5bfa:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5bfe:	2000      	movs	r0, #0
  m_errorCode = code;
    5c00:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5c02:	601a      	str	r2, [r3, #0]
}
    5c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5c08:	2001      	movs	r0, #1
}
    5c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5c0e:	4a06      	ldr	r2, [pc, #24]	; (5c28 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5c10:	4b06      	ldr	r3, [pc, #24]	; (5c2c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    5c12:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    5c14:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5c16:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c1c:	e7ea      	b.n	5bf4 <waitTransferComplete() [clone .part.0]+0x3c>
    5c1e:	bf00      	nop
    5c20:	402c0000 	.word	0x402c0000
    5c24:	117f0002 	.word	0x117f0002
    5c28:	200274d9 	.word	0x200274d9
    5c2c:	20026870 	.word	0x20026870
    5c30:	117f0000 	.word	0x117f0000
    5c34:	20008cb6 	.word	0x20008cb6
    5c38:	20022f98 	.word	0x20022f98
    5c3c:	000f4240 	.word	0x000f4240

00005c40 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5c44:	4c26      	ldr	r4, [pc, #152]	; (5ce0 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5c46:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5c48:	7823      	ldrb	r3, [r4, #0]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d138      	bne.n	5cc0 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5c4e:	4b25      	ldr	r3, [pc, #148]	; (5ce4 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5c52:	05d2      	lsls	r2, r2, #23
    5c54:	d52b      	bpl.n	5cae <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5c56:	4d23      	ldr	r5, [pc, #140]	; (5ce4 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c58:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5cf0 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5c5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5c62:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5c64:	f001 fe6e 	bl	7944 <micros>
    5c68:	4606      	mov	r6, r0
  while (fcn()) {
    5c6a:	e004      	b.n	5c76 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c6c:	f001 fe6a 	bl	7944 <micros>
    5c70:	1b80      	subs	r0, r0, r6
    5c72:	4540      	cmp	r0, r8
    5c74:	d82a      	bhi.n	5ccc <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    5c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5c78:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5c7c:	d0f6      	beq.n	5c6c <SdioCard::writeData(unsigned char const*)+0x2c>
    5c7e:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5c82:	4818      	ldr	r0, [pc, #96]	; (5ce4 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5c84:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5c88:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5c8a:	055b      	lsls	r3, r3, #21
    5c8c:	d5fc      	bpl.n	5c88 <SdioCard::writeData(unsigned char const*)+0x48>
    5c8e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5c92:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5c96:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5c98:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5c9a:	d1fa      	bne.n	5c92 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    5c9c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    5ca0:	45bc      	cmp	ip, r7
    5ca2:	d1f1      	bne.n	5c88 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5ca4:	2301      	movs	r3, #1
  return true;
    5ca6:	4618      	mov	r0, r3
  m_transferActive = true;
    5ca8:	7023      	strb	r3, [r4, #0]
}
    5caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5cb4:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5cbc:	629a      	str	r2, [r3, #40]	; 0x28
    5cbe:	e7ca      	b.n	5c56 <SdioCard::writeData(unsigned char const*)+0x16>
    5cc0:	f7ff ff7a 	bl	5bb8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5cc4:	2800      	cmp	r0, #0
    5cc6:	d1c2      	bne.n	5c4e <SdioCard::writeData(unsigned char const*)+0xe>
}
    5cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5ccc:	4906      	ldr	r1, [pc, #24]	; (5ce8 <SdioCard::writeData(unsigned char const*)+0xa8>)
    5cce:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    5cd0:	4b06      	ldr	r3, [pc, #24]	; (5cec <SdioCard::writeData(unsigned char const*)+0xac>)
    5cd2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5cd6:	4648      	mov	r0, r9
  m_errorCode = code;
    5cd8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5cda:	601a      	str	r2, [r3, #0]
}
    5cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ce0:	200274d9 	.word	0x200274d9
    5ce4:	402c0000 	.word	0x402c0000
    5ce8:	20008cb6 	.word	0x20008cb6
    5cec:	20022f98 	.word	0x20022f98
    5cf0:	000f4240 	.word	0x000f4240

00005cf4 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf8:	4607      	mov	r7, r0
    5cfa:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    5cfc:	4c1f      	ldr	r4, [pc, #124]	; (5d7c <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5cfe:	f001 fe21 	bl	7944 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d02:	4e1f      	ldr	r6, [pc, #124]	; (5d80 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5d04:	4605      	mov	r5, r0
  while (fcn()) {
    5d06:	e004      	b.n	5d12 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d08:	f001 fe1c 	bl	7944 <micros>
    5d0c:	1b43      	subs	r3, r0, r5
    5d0e:	42b3      	cmp	r3, r6
    5d10:	d824      	bhi.n	5d5c <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    5d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5d14:	07d9      	lsls	r1, r3, #31
    5d16:	d4f7      	bmi.n	5d08 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5d18:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5d1a:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5d1e:	d420      	bmi.n	5d62 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5d20:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5d24:	4c15      	ldr	r4, [pc, #84]	; (5d7c <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5d26:	4e17      	ldr	r6, [pc, #92]	; (5d84 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5d28:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5d2a:	f001 fe0b 	bl	7944 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d2e:	4f14      	ldr	r7, [pc, #80]	; (5d80 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5d30:	4605      	mov	r5, r0
  while (fcn()) {
    5d32:	e004      	b.n	5d3e <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d34:	f001 fe06 	bl	7944 <micros>
    5d38:	1b40      	subs	r0, r0, r5
    5d3a:	42b8      	cmp	r0, r7
    5d3c:	d80e      	bhi.n	5d5c <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5d40:	4233      	tst	r3, r6
    5d42:	d0f7      	beq.n	5d34 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5d44:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5d46:	4b10      	ldr	r3, [pc, #64]	; (5d88 <cardCommand(unsigned long, unsigned long)+0x94>)
    5d48:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5d4a:	681a      	ldr	r2, [r3, #0]
    5d4c:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5d4e:	681a      	ldr	r2, [r3, #0]
    5d50:	07d2      	lsls	r2, r2, #31
    5d52:	d503      	bpl.n	5d5c <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5d54:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5d56:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5d5a:	d00b      	beq.n	5d74 <cardCommand(unsigned long, unsigned long)+0x80>
    5d5c:	2000      	movs	r0, #0
}
    5d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5d62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5d64:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5d66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5d6a:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5d6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5d6e:	4313      	orrs	r3, r2
    5d70:	64a3      	str	r3, [r4, #72]	; 0x48
    5d72:	e7d5      	b.n	5d20 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5d74:	2001      	movs	r0, #1
}
    5d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d7a:	bf00      	nop
    5d7c:	402c0000 	.word	0x402c0000
    5d80:	000f4240 	.word	0x000f4240
    5d84:	000f0001 	.word	0x000f0001
    5d88:	20026870 	.word	0x20026870

00005d8c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5d8c:	4b15      	ldr	r3, [pc, #84]	; (5de4 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5d8e:	b530      	push	{r4, r5, lr}
    5d90:	460d      	mov	r5, r1
    5d92:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5d94:	6819      	ldr	r1, [r3, #0]
    5d96:	f7ff ffad 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5d9a:	b308      	cbz	r0, 5de0 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5d9c:	4b12      	ldr	r3, [pc, #72]	; (5de8 <readReg16(unsigned long, void*)+0x5c>)
    5d9e:	f105 040f 	add.w	r4, r5, #15
    5da2:	691a      	ldr	r2, [r3, #16]
    5da4:	9200      	str	r2, [sp, #0]
    5da6:	6959      	ldr	r1, [r3, #20]
    5da8:	9101      	str	r1, [sp, #4]
    5daa:	6999      	ldr	r1, [r3, #24]
    5dac:	9102      	str	r1, [sp, #8]
    5dae:	69db      	ldr	r3, [r3, #28]
    5db0:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5db2:	2300      	movs	r3, #0
    5db4:	e001      	b.n	5dba <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5db6:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5dba:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5dbe:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5dc0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5dc4:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5dc8:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5dca:	fa22 f20c 	lsr.w	r2, r2, ip
    5dce:	f10e 0110 	add.w	r1, lr, #16
    5dd2:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5dd6:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5dda:	d1ec      	bne.n	5db6 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5ddc:	2300      	movs	r3, #0
    5dde:	73eb      	strb	r3, [r5, #15]
}
    5de0:	b005      	add	sp, #20
    5de2:	bd30      	pop	{r4, r5, pc}
    5de4:	200261c8 	.word	0x200261c8
    5de8:	402c0000 	.word	0x402c0000

00005dec <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5dec:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    5dee:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5df0:	07db      	lsls	r3, r3, #31
    5df2:	d505      	bpl.n	5e00 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5df4:	4b15      	ldr	r3, [pc, #84]	; (5e4c <SdioCard::isBusy()+0x60>)
    5df6:	681b      	ldr	r3, [r3, #0]
    5df8:	b1b3      	cbz	r3, 5e28 <SdioCard::isBusy()+0x3c>
}
    5dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5dfe:	4718      	bx	r3
    if (m_transferActive) {
    5e00:	4b13      	ldr	r3, [pc, #76]	; (5e50 <SdioCard::isBusy()+0x64>)
    5e02:	781b      	ldrb	r3, [r3, #0]
    5e04:	b93b      	cbnz	r3, 5e16 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5e06:	4b13      	ldr	r3, [pc, #76]	; (5e54 <SdioCard::isBusy()+0x68>)
    5e08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5e0a:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5e0e:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5e12:	4620      	mov	r0, r4
    5e14:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5e16:	4b0f      	ldr	r3, [pc, #60]	; (5e54 <SdioCard::isBusy()+0x68>)
    5e18:	4c0f      	ldr	r4, [pc, #60]	; (5e58 <SdioCard::isBusy()+0x6c>)
    5e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5e1c:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5e1e:	fab4 f484 	clz	r4, r4
    5e22:	0964      	lsrs	r4, r4, #5
}
    5e24:	4620      	mov	r0, r4
    5e26:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e28:	4b0c      	ldr	r3, [pc, #48]	; (5e5c <SdioCard::isBusy()+0x70>)
    5e2a:	781c      	ldrb	r4, [r3, #0]
    5e2c:	2c00      	cmp	r4, #0
    5e2e:	d0f0      	beq.n	5e12 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e30:	4b0b      	ldr	r3, [pc, #44]	; (5e60 <SdioCard::isBusy()+0x74>)
    5e32:	480c      	ldr	r0, [pc, #48]	; (5e64 <SdioCard::isBusy()+0x78>)
    5e34:	6819      	ldr	r1, [r3, #0]
    5e36:	f7ff ff5d 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5e3a:	2800      	cmp	r0, #0
    5e3c:	d0e9      	beq.n	5e12 <SdioCard::isBusy()+0x26>
    5e3e:	4b05      	ldr	r3, [pc, #20]	; (5e54 <SdioCard::isBusy()+0x68>)
    5e40:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5e42:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5e46:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5e4a:	e7e2      	b.n	5e12 <SdioCard::isBusy()+0x26>
    5e4c:	2002686c 	.word	0x2002686c
    5e50:	200274d9 	.word	0x200274d9
    5e54:	402c0000 	.word	0x402c0000
    5e58:	117f0002 	.word	0x117f0002
    5e5c:	200274d6 	.word	0x200274d6
    5e60:	200261c8 	.word	0x200261c8
    5e64:	0d1a0000 	.word	0x0d1a0000

00005e68 <SdioCard::status()>:
uint32_t SdioCard::status() {
    5e68:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e6a:	4b04      	ldr	r3, [pc, #16]	; (5e7c <SdioCard::status()+0x14>)
    5e6c:	4804      	ldr	r0, [pc, #16]	; (5e80 <SdioCard::status()+0x18>)
    5e6e:	6819      	ldr	r1, [r3, #0]
    5e70:	f7ff ff40 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5e74:	b108      	cbz	r0, 5e7a <SdioCard::status()+0x12>
    5e76:	4b03      	ldr	r3, [pc, #12]	; (5e84 <SdioCard::status()+0x1c>)
    5e78:	6918      	ldr	r0, [r3, #16]
}
    5e7a:	bd08      	pop	{r3, pc}
    5e7c:	200261c8 	.word	0x200261c8
    5e80:	0d1a0000 	.word	0x0d1a0000
    5e84:	402c0000 	.word	0x402c0000

00005e88 <isBusyCMD13()>:
static bool isBusyCMD13() {
    5e88:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5e8a:	4b07      	ldr	r3, [pc, #28]	; (5ea8 <isBusyCMD13()+0x20>)
    5e8c:	4807      	ldr	r0, [pc, #28]	; (5eac <isBusyCMD13()+0x24>)
    5e8e:	6819      	ldr	r1, [r3, #0]
    5e90:	f7ff ff30 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5e94:	b130      	cbz	r0, 5ea4 <isBusyCMD13()+0x1c>
    5e96:	4b06      	ldr	r3, [pc, #24]	; (5eb0 <isBusyCMD13()+0x28>)
    5e98:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5e9a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5e9e:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5ea2:	bd08      	pop	{r3, pc}
    5ea4:	2001      	movs	r0, #1
    5ea6:	bd08      	pop	{r3, pc}
    5ea8:	200261c8 	.word	0x200261c8
    5eac:	0d1a0000 	.word	0x0d1a0000
    5eb0:	402c0000 	.word	0x402c0000

00005eb4 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5eb8:	4b29      	ldr	r3, [pc, #164]	; (5f60 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5eba:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5ebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5f80 <SdioCard::writeStart(unsigned long)+0xcc>
    5ec0:	4e28      	ldr	r6, [pc, #160]	; (5f64 <SdioCard::writeStart(unsigned long)+0xb0>)
    5ec2:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5ec6:	f001 fd3d 	bl	7944 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5eca:	4d27      	ldr	r5, [pc, #156]	; (5f68 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5ecc:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ece:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5f84 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ed2:	4f26      	ldr	r7, [pc, #152]	; (5f6c <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5ed4:	e006      	b.n	5ee4 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ed6:	f001 fd35 	bl	7944 <micros>
    5eda:	1b00      	subs	r0, r0, r4
    5edc:	42b8      	cmp	r0, r7
    5ede:	d829      	bhi.n	5f34 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5ee0:	f003 f94c 	bl	917c <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ee4:	6831      	ldr	r1, [r6, #0]
    5ee6:	4628      	mov	r0, r5
    5ee8:	f7ff ff04 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5eec:	2800      	cmp	r0, #0
    5eee:	d0f2      	beq.n	5ed6 <SdioCard::writeStart(unsigned long)+0x22>
    5ef0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5ef4:	05db      	lsls	r3, r3, #23
    5ef6:	d5ee      	bpl.n	5ed6 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5ef8:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5efa:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5efe:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5f02:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5f0a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f0e:	4b18      	ldr	r3, [pc, #96]	; (5f70 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5f10:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	b1cb      	cbz	r3, 5f4c <SdioCard::writeStart(unsigned long)+0x98>
    5f18:	4649      	mov	r1, r9
    5f1a:	4816      	ldr	r0, [pc, #88]	; (5f74 <SdioCard::writeStart(unsigned long)+0xc0>)
    5f1c:	f7ff feea 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5f20:	b930      	cbnz	r0, 5f30 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5f22:	4915      	ldr	r1, [pc, #84]	; (5f78 <SdioCard::writeStart(unsigned long)+0xc4>)
    5f24:	240e      	movs	r4, #14
  m_errorLine = line;
    5f26:	4b15      	ldr	r3, [pc, #84]	; (5f7c <SdioCard::writeStart(unsigned long)+0xc8>)
    5f28:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    5f2c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f2e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5f34:	4a10      	ldr	r2, [pc, #64]	; (5f78 <SdioCard::writeStart(unsigned long)+0xc4>)
    5f36:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5f38:	2000      	movs	r0, #0
  m_errorLine = line;
    5f3a:	4b10      	ldr	r3, [pc, #64]	; (5f7c <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5f3c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5f3e:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    5f42:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5f46:	601a      	str	r2, [r3, #0]
}
    5f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f4c:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5f50:	4808      	ldr	r0, [pc, #32]	; (5f74 <SdioCard::writeStart(unsigned long)+0xc0>)
    5f52:	4649      	mov	r1, r9
    5f54:	f7ff fece 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5f58:	2800      	cmp	r0, #0
    5f5a:	d1e9      	bne.n	5f30 <SdioCard::writeStart(unsigned long)+0x7c>
    5f5c:	e7e1      	b.n	5f22 <SdioCard::writeStart(unsigned long)+0x6e>
    5f5e:	bf00      	nop
    5f60:	00005e89 	.word	0x00005e89
    5f64:	200261c8 	.word	0x200261c8
    5f68:	0d1a0000 	.word	0x0d1a0000
    5f6c:	000f4240 	.word	0x000f4240
    5f70:	200274d8 	.word	0x200274d8
    5f74:	193a0020 	.word	0x193a0020
    5f78:	20008cb6 	.word	0x20008cb6
    5f7c:	20022f98 	.word	0x20022f98
    5f80:	2002686c 	.word	0x2002686c
    5f84:	402c0000 	.word	0x402c0000

00005f88 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    5f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5f8c:	4c25      	ldr	r4, [pc, #148]	; (6024 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5f8e:	2100      	movs	r1, #0
    5f90:	4825      	ldr	r0, [pc, #148]	; (6028 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5f92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5f98:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5f9a:	f7ff feab 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    5f9e:	4605      	mov	r5, r0
    5fa0:	b948      	cbnz	r0, 5fb6 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    5fa2:	4922      	ldr	r1, [pc, #136]	; (602c <SdioCard::readStop()+0xa4>)
    5fa4:	2009      	movs	r0, #9
  m_errorLine = line;
    5fa6:	4b22      	ldr	r3, [pc, #136]	; (6030 <SdioCard::readStop()+0xa8>)
    5fa8:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    5fac:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5fae:	601a      	str	r2, [r3, #0]
}
    5fb0:	4628      	mov	r0, r5
    5fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    5fb6:	4b1f      	ldr	r3, [pc, #124]	; (6034 <SdioCard::readStop()+0xac>)
    5fb8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 603c <SdioCard::readStop()+0xb4>
    5fbc:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    5fc0:	f001 fcc0 	bl	7944 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    5fc6:	4606      	mov	r6, r0
  while (fcn()) {
    5fc8:	01d8      	lsls	r0, r3, #7
    5fca:	d418      	bmi.n	5ffe <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fcc:	4f1a      	ldr	r7, [pc, #104]	; (6038 <SdioCard::readStop()+0xb0>)
    5fce:	e004      	b.n	5fda <SdioCard::readStop()+0x52>
    yield();
    5fd0:	f003 f8d4 	bl	917c <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5fd6:	01d9      	lsls	r1, r3, #7
    5fd8:	d411      	bmi.n	5ffe <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fda:	f001 fcb3 	bl	7944 <micros>
    5fde:	1b83      	subs	r3, r0, r6
    5fe0:	42bb      	cmp	r3, r7
    5fe2:	d9f5      	bls.n	5fd0 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    5fe4:	4a11      	ldr	r2, [pc, #68]	; (602c <SdioCard::readStop()+0xa4>)
    5fe6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5fe8:	2500      	movs	r5, #0
  m_errorLine = line;
    5fea:	4b11      	ldr	r3, [pc, #68]	; (6030 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    5fec:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5fee:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    5ff2:	4628      	mov	r0, r5
      m_busyFcn = 0;
    5ff4:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    5ff8:	601a      	str	r2, [r3, #0]
}
    5ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    5ffe:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6000:	4b08      	ldr	r3, [pc, #32]	; (6024 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    6002:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    6006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6008:	0792      	lsls	r2, r2, #30
    600a:	d5d1      	bpl.n	5fb0 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    600c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    600e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    6010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    6012:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    6016:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    601a:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    601c:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    601e:	629a      	str	r2, [r3, #40]	; 0x28
    6020:	e7c6      	b.n	5fb0 <SdioCard::readStop()+0x28>
    6022:	bf00      	nop
    6024:	402c0000 	.word	0x402c0000
    6028:	0cdb0000 	.word	0x0cdb0000
    602c:	20008cb6 	.word	0x20008cb6
    6030:	20022f98 	.word	0x20022f98
    6034:	0000589d 	.word	0x0000589d
    6038:	000f4240 	.word	0x000f4240
    603c:	2002686c 	.word	0x2002686c

00006040 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    6040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6044:	4682      	mov	sl, r0
    6046:	4689      	mov	r9, r1
    6048:	4e36      	ldr	r6, [pc, #216]	; (6124 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    604a:	f001 fc7b 	bl	7944 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    604e:	4d36      	ldr	r5, [pc, #216]	; (6128 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    6050:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6052:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6154 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6056:	4f35      	ldr	r7, [pc, #212]	; (612c <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    6058:	e004      	b.n	6064 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    605a:	f001 fc73 	bl	7944 <micros>
    605e:	1b03      	subs	r3, r0, r4
    6060:	42bb      	cmp	r3, r7
    6062:	d827      	bhi.n	60b4 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6064:	6831      	ldr	r1, [r6, #0]
    6066:	4628      	mov	r0, r5
    6068:	f7ff fe44 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    606c:	2800      	cmp	r0, #0
    606e:	d0f4      	beq.n	605a <cardCMD6(unsigned long, unsigned char*)+0x1a>
    6070:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    6074:	05da      	lsls	r2, r3, #23
    6076:	d5f0      	bpl.n	605a <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    6078:	2301      	movs	r3, #1
    607a:	4d2d      	ldr	r5, [pc, #180]	; (6130 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    607c:	4f2d      	ldr	r7, [pc, #180]	; (6134 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    607e:	4651      	mov	r1, sl
  m_dmaBusy = true;
    6080:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    6082:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6084:	482c      	ldr	r0, [pc, #176]	; (6138 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    6086:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6088:	4b2c      	ldr	r3, [pc, #176]	; (613c <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    608a:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    608e:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6092:	4b2b      	ldr	r3, [pc, #172]	; (6140 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    6094:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6098:	f7ff fe2c 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    609c:	4604      	mov	r4, r0
    609e:	b9a0      	cbnz	r0, 60ca <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    60a0:	4928      	ldr	r1, [pc, #160]	; (6144 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    60a2:	2004      	movs	r0, #4
  m_errorLine = line;
    60a4:	4b28      	ldr	r3, [pc, #160]	; (6148 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    60a6:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    60aa:	7008      	strb	r0, [r1, #0]
}
    60ac:	4620      	mov	r0, r4
  m_errorLine = line;
    60ae:	601a      	str	r2, [r3, #0]
}
    60b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    60b4:	4923      	ldr	r1, [pc, #140]	; (6144 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    60b6:	200a      	movs	r0, #10
  m_errorLine = line;
    60b8:	4b23      	ldr	r3, [pc, #140]	; (6148 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    60ba:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    60be:	2400      	movs	r4, #0
  m_errorCode = code;
    60c0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    60c2:	601a      	str	r2, [r3, #0]
}
    60c4:	4620      	mov	r0, r4
    60c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    60ca:	4b20      	ldr	r3, [pc, #128]	; (614c <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    60cc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 6158 <cardCMD6(unsigned long, unsigned char*)+0x118>
    60d0:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    60d4:	f001 fc36 	bl	7944 <micros>
  return m_dmaBusy;
    60d8:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    60da:	4606      	mov	r6, r0
  while (fcn()) {
    60dc:	b1bb      	cbz	r3, 610e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    60de:	f8df 804c 	ldr.w	r8, [pc, #76]	; 612c <cardCMD6(unsigned long, unsigned char*)+0xec>
    60e2:	e003      	b.n	60ec <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    60e4:	f003 f84a 	bl	917c <yield>
  return m_dmaBusy;
    60e8:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    60ea:	b183      	cbz	r3, 610e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    60ec:	f001 fc2a 	bl	7944 <micros>
    60f0:	1b83      	subs	r3, r0, r6
    60f2:	4543      	cmp	r3, r8
    60f4:	d9f6      	bls.n	60e4 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    60f6:	2300      	movs	r3, #0
    60f8:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    60fc:	4911      	ldr	r1, [pc, #68]	; (6144 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    60fe:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    6100:	4b11      	ldr	r3, [pc, #68]	; (6148 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    6102:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    6106:	2400      	movs	r4, #0
  m_errorCode = code;
    6108:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    610a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    610c:	e7da      	b.n	60c4 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    610e:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    6110:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6112:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    6114:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6118:	d5f0      	bpl.n	60fc <cardCMD6(unsigned long, unsigned char*)+0xbc>
    611a:	683a      	ldr	r2, [r7, #0]
    611c:	4b0c      	ldr	r3, [pc, #48]	; (6150 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    611e:	421a      	tst	r2, r3
    6120:	d0d0      	beq.n	60c4 <cardCMD6(unsigned long, unsigned char*)+0x84>
    6122:	e7eb      	b.n	60fc <cardCMD6(unsigned long, unsigned char*)+0xbc>
    6124:	200261c8 	.word	0x200261c8
    6128:	0d1a0000 	.word	0x0d1a0000
    612c:	000f4240 	.word	0x000f4240
    6130:	200274da 	.word	0x200274da
    6134:	20026870 	.word	0x20026870
    6138:	063a0011 	.word	0x063a0011
    613c:	00010040 	.word	0x00010040
    6140:	117f0002 	.word	0x117f0002
    6144:	20008cb6 	.word	0x20008cb6
    6148:	20022f98 	.word	0x20022f98
    614c:	000058b1 	.word	0x000058b1
    6150:	117f0000 	.word	0x117f0000
    6154:	402c0000 	.word	0x402c0000
    6158:	2002686c 	.word	0x2002686c

0000615c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    6160:	4d32      	ldr	r5, [pc, #200]	; (622c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6162:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    6164:	7aab      	ldrb	r3, [r5, #10]
    6166:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    616a:	d112      	bne.n	6192 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    616c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6170:	7aea      	ldrb	r2, [r5, #11]
    6172:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6174:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    6178:	1c62      	adds	r2, r4, #1
    617a:	430a      	orrs	r2, r1
    617c:	4213      	tst	r3, r2
    617e:	d008      	beq.n	6192 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    6180:	492b      	ldr	r1, [pc, #172]	; (6230 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    6182:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    6184:	4b2b      	ldr	r3, [pc, #172]	; (6234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    6186:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    618a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    618c:	601a      	str	r2, [r3, #0]
}
    618e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    6192:	4b29      	ldr	r3, [pc, #164]	; (6238 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    6194:	781b      	ldrb	r3, [r3, #0]
    6196:	b90b      	cbnz	r3, 619c <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    6198:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    619a:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    619c:	4827      	ldr	r0, [pc, #156]	; (623c <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    619e:	f7ff fda9 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    61a2:	b940      	cbnz	r0, 61b6 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    61a4:	4922      	ldr	r1, [pc, #136]	; (6230 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    61a6:	240f      	movs	r4, #15
  m_errorLine = line;
    61a8:	4b22      	ldr	r3, [pc, #136]	; (6234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    61aa:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    61ae:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    61b0:	601a      	str	r2, [r3, #0]
}
    61b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    61b6:	4621      	mov	r1, r4
    61b8:	4821      	ldr	r0, [pc, #132]	; (6240 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    61ba:	f7ff fd9b 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    61be:	b940      	cbnz	r0, 61d2 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    61c0:	491b      	ldr	r1, [pc, #108]	; (6230 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    61c2:	2410      	movs	r4, #16
  m_errorLine = line;
    61c4:	4b1b      	ldr	r3, [pc, #108]	; (6234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    61c6:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    61ca:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    61cc:	601a      	str	r2, [r3, #0]
}
    61ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    61d2:	2100      	movs	r1, #0
    61d4:	481b      	ldr	r0, [pc, #108]	; (6244 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    61d6:	f7ff fd8d 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    61da:	b938      	cbnz	r0, 61ec <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    61dc:	4914      	ldr	r1, [pc, #80]	; (6230 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    61de:	2411      	movs	r4, #17
  m_errorLine = line;
    61e0:	4b14      	ldr	r3, [pc, #80]	; (6234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    61e2:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    61e6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    61e8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    61ea:	e7e2      	b.n	61b2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    61ec:	f001 fbaa 	bl	7944 <micros>
    61f0:	4e15      	ldr	r6, [pc, #84]	; (6248 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61f2:	4d16      	ldr	r5, [pc, #88]	; (624c <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    61f4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61f6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6254 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    61fa:	4f15      	ldr	r7, [pc, #84]	; (6250 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    61fc:	6831      	ldr	r1, [r6, #0]
    61fe:	4628      	mov	r0, r5
    6200:	f7ff fd78 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6204:	b118      	cbz	r0, 620e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    6206:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    620a:	05db      	lsls	r3, r3, #23
    620c:	d4d1      	bmi.n	61b2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    620e:	f001 fb99 	bl	7944 <micros>
    6212:	1b00      	subs	r0, r0, r4
    6214:	42b8      	cmp	r0, r7
    6216:	d9f1      	bls.n	61fc <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    6218:	4905      	ldr	r1, [pc, #20]	; (6230 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    621a:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    621c:	4b05      	ldr	r3, [pc, #20]	; (6234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    621e:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6222:	2000      	movs	r0, #0
  m_errorCode = code;
    6224:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6226:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    6228:	e7c3      	b.n	61b2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    622a:	bf00      	nop
    622c:	200261b4 	.word	0x200261b4
    6230:	20008cb6 	.word	0x20008cb6
    6234:	20022f98 	.word	0x20022f98
    6238:	200274d8 	.word	0x200274d8
    623c:	201a0000 	.word	0x201a0000
    6240:	211a0000 	.word	0x211a0000
    6244:	261b0000 	.word	0x261b0000
    6248:	200261c8 	.word	0x200261c8
    624c:	0d1a0000 	.word	0x0d1a0000
    6250:	000f4240 	.word	0x000f4240
    6254:	402c0000 	.word	0x402c0000

00006258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    6258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    625c:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    6260:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    6262:	bf18      	it	ne
    6264:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    6266:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    6268:	9300      	str	r3, [sp, #0]
    626a:	2b00      	cmp	r3, #0
    626c:	bf08      	it	eq
    626e:	f044 0401 	orreq.w	r4, r4, #1
    6272:	b15c      	cbz	r4, 628c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6274:	4940      	ldr	r1, [pc, #256]	; (6378 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    6276:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    6278:	4b40      	ldr	r3, [pc, #256]	; (637c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    627a:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    627e:	2400      	movs	r4, #0
  m_errorCode = code;
    6280:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6282:	601a      	str	r2, [r3, #0]
}
    6284:	4620      	mov	r0, r4
    6286:	b003      	add	sp, #12
    6288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    628c:	4b3c      	ldr	r3, [pc, #240]	; (6380 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    628e:	4615      	mov	r5, r2
    6290:	4a3c      	ldr	r2, [pc, #240]	; (6384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6292:	460e      	mov	r6, r1
    6294:	f8df 910c 	ldr.w	r9, [pc, #268]	; 63a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    6298:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    629a:	f001 fb53 	bl	7944 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    629e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 63a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    62a2:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    62a4:	f8df b104 	ldr.w	fp, [pc, #260]	; 63ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    62a8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 639c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    62ac:	e006      	b.n	62bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    62ae:	f001 fb49 	bl	7944 <micros>
    62b2:	1bc0      	subs	r0, r0, r7
    62b4:	4550      	cmp	r0, sl
    62b6:	d844      	bhi.n	6342 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    62b8:	f002 ff60 	bl	917c <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    62bc:	f8d9 1000 	ldr.w	r1, [r9]
    62c0:	4640      	mov	r0, r8
    62c2:	f7ff fd17 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    62c6:	2800      	cmp	r0, #0
    62c8:	d0f1      	beq.n	62ae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    62ca:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    62ce:	05da      	lsls	r2, r3, #23
    62d0:	d5ed      	bpl.n	62ae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    62d2:	9a00      	ldr	r2, [sp, #0]
    62d4:	4b2c      	ldr	r3, [pc, #176]	; (6388 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    62d6:	492b      	ldr	r1, [pc, #172]	; (6384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    62d8:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    62dc:	2200      	movs	r2, #0
  m_dmaBusy = true;
    62de:	4f2b      	ldr	r7, [pc, #172]	; (638c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    62e0:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    62e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    62e6:	2101      	movs	r1, #1
  m_irqstat = 0;
    62e8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 63b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    62ec:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    62ee:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    62f2:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    62f6:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    62fa:	4b25      	ldr	r3, [pc, #148]	; (6390 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    62fc:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    6300:	4b24      	ldr	r3, [pc, #144]	; (6394 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    6302:	781b      	ldrb	r3, [r3, #0]
    6304:	b343      	cbz	r3, 6358 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    6306:	4631      	mov	r1, r6
    6308:	9801      	ldr	r0, [sp, #4]
    630a:	f7ff fcf3 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    630e:	4681      	mov	r9, r0
    6310:	2800      	cmp	r0, #0
    6312:	d0b7      	beq.n	6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    6314:	4b20      	ldr	r3, [pc, #128]	; (6398 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    6316:	4a1b      	ldr	r2, [pc, #108]	; (6384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6318:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    631a:	f001 fb13 	bl	7944 <micros>
  return m_dmaBusy;
    631e:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    6320:	4605      	mov	r5, r0
  while (fcn()) {
    6322:	b1db      	cbz	r3, 635c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6324:	4e1d      	ldr	r6, [pc, #116]	; (639c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    6326:	e003      	b.n	6330 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    6328:	f002 ff28 	bl	917c <yield>
  return m_dmaBusy;
    632c:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    632e:	b1ab      	cbz	r3, 635c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6330:	f001 fb08 	bl	7944 <micros>
    6334:	1b40      	subs	r0, r0, r5
    6336:	42b0      	cmp	r0, r6
    6338:	d9f6      	bls.n	6328 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    633a:	2300      	movs	r3, #0
    633c:	4a11      	ldr	r2, [pc, #68]	; (6384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    633e:	6013      	str	r3, [r2, #0]
      return true;
    6340:	e7a0      	b.n	6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    6342:	4b0d      	ldr	r3, [pc, #52]	; (6378 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    6344:	220a      	movs	r2, #10
      m_busyFcn = 0;
    6346:	2100      	movs	r1, #0
    6348:	480e      	ldr	r0, [pc, #56]	; (6384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    634a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    634c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    6350:	4b0a      	ldr	r3, [pc, #40]	; (637c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    6352:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    6354:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    6356:	e795      	b.n	6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    6358:	0276      	lsls	r6, r6, #9
    635a:	e7d4      	b.n	6306 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    635c:	2300      	movs	r3, #0
    635e:	4a09      	ldr	r2, [pc, #36]	; (6384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6360:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6362:	f8d8 3000 	ldr.w	r3, [r8]
    6366:	079b      	lsls	r3, r3, #30
    6368:	d58c      	bpl.n	6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    636a:	f8d8 2000 	ldr.w	r2, [r8]
    636e:	4b0c      	ldr	r3, [pc, #48]	; (63a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    6370:	421a      	tst	r2, r3
    6372:	bf08      	it	eq
    6374:	464c      	moveq	r4, r9
    6376:	e785      	b.n	6284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    6378:	20008cb6 	.word	0x20008cb6
    637c:	20022f98 	.word	0x20022f98
    6380:	00005e89 	.word	0x00005e89
    6384:	2002686c 	.word	0x2002686c
    6388:	1fff0000 	.word	0x1fff0000
    638c:	200274da 	.word	0x200274da
    6390:	117f0002 	.word	0x117f0002
    6394:	200274d8 	.word	0x200274d8
    6398:	000058b1 	.word	0x000058b1
    639c:	000f4240 	.word	0x000f4240
    63a0:	117f0000 	.word	0x117f0000
    63a4:	200261c8 	.word	0x200261c8
    63a8:	0d1a0000 	.word	0x0d1a0000
    63ac:	402c0000 	.word	0x402c0000
    63b0:	20026870 	.word	0x20026870

000063b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    63b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63b6:	4606      	mov	r6, r0
    63b8:	7a00      	ldrb	r0, [r0, #8]
    63ba:	460c      	mov	r4, r1
    63bc:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    63be:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    63c0:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    63c2:	d413      	bmi.n	63ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    63c4:	b183      	cbz	r3, 63e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    63c6:	440f      	add	r7, r1
    63c8:	e001      	b.n	63ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    63ca:	42bc      	cmp	r4, r7
    63cc:	d00c      	beq.n	63e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    63ce:	6833      	ldr	r3, [r6, #0]
    63d0:	462a      	mov	r2, r5
    63d2:	4621      	mov	r1, r4
    63d4:	4630      	mov	r0, r6
    63d6:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    63d8:	3401      	adds	r4, #1
    63da:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    63de:	4798      	blx	r3
    63e0:	2800      	cmp	r0, #0
    63e2:	d1f2      	bne.n	63ca <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    63e4:	2000      	movs	r0, #0
}
    63e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    63e8:	2001      	movs	r0, #1
}
    63ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    63ec:	0790      	lsls	r0, r2, #30
    63ee:	d012      	beq.n	6416 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    63f0:	2b00      	cmp	r3, #0
    63f2:	d0f9      	beq.n	63e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    63f4:	440f      	add	r7, r1
    63f6:	e001      	b.n	63fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    63f8:	42bc      	cmp	r4, r7
    63fa:	d0f5      	beq.n	63e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    63fc:	6833      	ldr	r3, [r6, #0]
    63fe:	462a      	mov	r2, r5
    6400:	4621      	mov	r1, r4
    6402:	4630      	mov	r0, r6
    6404:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6406:	3401      	adds	r4, #1
    6408:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    640c:	4798      	blx	r3
    640e:	2800      	cmp	r0, #0
    6410:	d1f2      	bne.n	63f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    6412:	2000      	movs	r0, #0
    6414:	e7e7      	b.n	63e6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    6416:	4806      	ldr	r0, [pc, #24]	; (6430 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    6418:	f7ff ff1e 	bl	6258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    641c:	2800      	cmp	r0, #0
    641e:	d1e3      	bne.n	63e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6420:	4904      	ldr	r1, [pc, #16]	; (6434 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    6422:	240c      	movs	r4, #12
  m_errorLine = line;
    6424:	4b04      	ldr	r3, [pc, #16]	; (6438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    6426:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    642a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    642c:	601a      	str	r2, [r3, #0]
}
    642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6430:	123a0037 	.word	0x123a0037
    6434:	20008cb6 	.word	0x20008cb6
    6438:	20022f98 	.word	0x20022f98

0000643c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    643e:	4606      	mov	r6, r0
    6440:	7a00      	ldrb	r0, [r0, #8]
    6442:	460c      	mov	r4, r1
    6444:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6446:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6448:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    644a:	d413      	bmi.n	6474 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    644c:	b183      	cbz	r3, 6470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    644e:	440f      	add	r7, r1
    6450:	e001      	b.n	6456 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    6452:	42bc      	cmp	r4, r7
    6454:	d00c      	beq.n	6470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    6456:	6833      	ldr	r3, [r6, #0]
    6458:	462a      	mov	r2, r5
    645a:	4621      	mov	r1, r4
    645c:	4630      	mov	r0, r6
    645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    6460:	3401      	adds	r4, #1
    6462:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    6466:	4798      	blx	r3
    6468:	2800      	cmp	r0, #0
    646a:	d1f2      	bne.n	6452 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    646c:	2000      	movs	r0, #0
}
    646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6470:	2001      	movs	r0, #1
}
    6472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    6474:	0790      	lsls	r0, r2, #30
    6476:	d012      	beq.n	649e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6478:	2b00      	cmp	r3, #0
    647a:	d0f9      	beq.n	6470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    647c:	440f      	add	r7, r1
    647e:	e001      	b.n	6484 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    6480:	42bc      	cmp	r4, r7
    6482:	d0f5      	beq.n	6470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    6484:	6833      	ldr	r3, [r6, #0]
    6486:	462a      	mov	r2, r5
    6488:	4621      	mov	r1, r4
    648a:	4630      	mov	r0, r6
    648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    648e:	3401      	adds	r4, #1
    6490:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    6494:	4798      	blx	r3
    6496:	2800      	cmp	r0, #0
    6498:	d1f2      	bne.n	6480 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    649a:	2000      	movs	r0, #0
    649c:	e7e7      	b.n	646e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    649e:	4806      	ldr	r0, [pc, #24]	; (64b8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    64a0:	f7ff feda 	bl	6258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    64a4:	2800      	cmp	r0, #0
    64a6:	d1e3      	bne.n	6470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    64a8:	4904      	ldr	r1, [pc, #16]	; (64bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    64aa:	240e      	movs	r4, #14
  m_errorLine = line;
    64ac:	4b04      	ldr	r3, [pc, #16]	; (64c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    64ae:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    64b2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    64b4:	601a      	str	r2, [r3, #0]
}
    64b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64b8:	193a0027 	.word	0x193a0027
    64bc:	20008cb6 	.word	0x20008cb6
    64c0:	20022f98 	.word	0x20022f98

000064c4 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    64c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    64c8:	2500      	movs	r5, #0
  m_initDone = false;
    64ca:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 678c <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    64ce:	4c9b      	ldr	r4, [pc, #620]	; (673c <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    64d0:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    64d2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 6790 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    64d6:	4e9a      	ldr	r6, [pc, #616]	; (6740 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    64d8:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    64da:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    64dc:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    64e0:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    64e2:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    64e6:	7035      	strb	r5, [r6, #0]
  initSDHC();
    64e8:	f7ff fad2 	bl	5a90 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    64ec:	4629      	mov	r1, r5
    64ee:	4628      	mov	r0, r5
    64f0:	f7ff fc00 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    64f4:	b950      	cbnz	r0, 650c <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    64f6:	2101      	movs	r1, #1
  m_errorLine = line;
    64f8:	4b92      	ldr	r3, [pc, #584]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    64fa:	f240 228e 	movw	r2, #654	; 0x28e
    64fe:	4605      	mov	r5, r0
  m_errorCode = code;
    6500:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6502:	601a      	str	r2, [r3, #0]
}
    6504:	4628      	mov	r0, r5
    6506:	b011      	add	sp, #68	; 0x44
    6508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    650c:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    650e:	4f8e      	ldr	r7, [pc, #568]	; (6748 <SdioCard::begin(SdioConfig)+0x284>)
    6510:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    6514:	4638      	mov	r0, r7
    6516:	f7ff fbed 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    651a:	2800      	cmp	r0, #0
    651c:	d14e      	bne.n	65bc <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    651e:	3d01      	subs	r5, #1
    6520:	d1f6      	bne.n	6510 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    6522:	7833      	ldrb	r3, [r6, #0]
    6524:	2b00      	cmp	r3, #0
    6526:	d03d      	beq.n	65a4 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6528:	f8df b268 	ldr.w	fp, [pc, #616]	; 6794 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    652c:	f001 fa0a 	bl	7944 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6530:	4e86      	ldr	r6, [pc, #536]	; (674c <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    6532:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6534:	f8df a260 	ldr.w	sl, [pc, #608]	; 6798 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6538:	4f85      	ldr	r7, [pc, #532]	; (6750 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    653a:	2100      	movs	r1, #0
    653c:	4630      	mov	r0, r6
    653e:	f7ff fbd9 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6542:	b950      	cbnz	r0, 655a <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    6544:	2500      	movs	r5, #0
  m_errorCode = code;
    6546:	2117      	movs	r1, #23
  m_errorLine = line;
    6548:	4b7e      	ldr	r3, [pc, #504]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    654a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    654e:	4628      	mov	r0, r5
  m_errorCode = code;
    6550:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6552:	601a      	str	r2, [r3, #0]
}
    6554:	b011      	add	sp, #68	; 0x44
    6556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    655a:	4659      	mov	r1, fp
    655c:	4650      	mov	r0, sl
    655e:	f7ff fbc9 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6562:	2800      	cmp	r0, #0
    6564:	d0ee      	beq.n	6544 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6566:	f001 f9ed 	bl	7944 <micros>
    656a:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    656c:	4b79      	ldr	r3, [pc, #484]	; (6754 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    656e:	42b8      	cmp	r0, r7
    6570:	d8e8      	bhi.n	6544 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6572:	691a      	ldr	r2, [r3, #16]
    6574:	2a00      	cmp	r2, #0
    6576:	dae0      	bge.n	653a <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    6578:	6919      	ldr	r1, [r3, #16]
    657a:	4a77      	ldr	r2, [pc, #476]	; (6758 <SdioCard::begin(SdioConfig)+0x294>)
    657c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    657e:	691b      	ldr	r3, [r3, #16]
    6580:	005a      	lsls	r2, r3, #1
    6582:	d502      	bpl.n	658a <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    6584:	2301      	movs	r3, #1
    6586:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    658a:	2100      	movs	r1, #0
    658c:	4873      	ldr	r0, [pc, #460]	; (675c <SdioCard::begin(SdioConfig)+0x298>)
    658e:	f7ff fbb1 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6592:	4605      	mov	r5, r0
    6594:	bb10      	cbnz	r0, 65dc <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    6596:	2102      	movs	r1, #2
  m_errorLine = line;
    6598:	4b6a      	ldr	r3, [pc, #424]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    659a:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    659e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65a0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    65a2:	e7af      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    65a4:	f7ff fa74 	bl	5a90 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    65a8:	4629      	mov	r1, r5
    65aa:	4628      	mov	r0, r5
    65ac:	f7ff fba2 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    65b0:	7833      	ldrb	r3, [r6, #0]
    65b2:	2b00      	cmp	r3, #0
    65b4:	d1b8      	bne.n	6528 <SdioCard::begin(SdioConfig)+0x64>
    65b6:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    65ba:	e7b7      	b.n	652c <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    65bc:	4b65      	ldr	r3, [pc, #404]	; (6754 <SdioCard::begin(SdioConfig)+0x290>)
    65be:	691b      	ldr	r3, [r3, #16]
    65c0:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    65c4:	d007      	beq.n	65d6 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    65c6:	2106      	movs	r1, #6
  m_errorLine = line;
    65c8:	4b5e      	ldr	r3, [pc, #376]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    65ca:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    65ce:	2500      	movs	r5, #0
  m_errorCode = code;
    65d0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65d2:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    65d4:	e796      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    65d6:	2301      	movs	r3, #1
    65d8:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    65da:	e7a5      	b.n	6528 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    65dc:	2100      	movs	r1, #0
    65de:	4860      	ldr	r0, [pc, #384]	; (6760 <SdioCard::begin(SdioConfig)+0x29c>)
    65e0:	f7ff fb88 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    65e4:	4605      	mov	r5, r0
    65e6:	b930      	cbnz	r0, 65f6 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    65e8:	2103      	movs	r1, #3
  m_errorLine = line;
    65ea:	4b56      	ldr	r3, [pc, #344]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    65ec:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    65f0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    65f2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    65f4:	e786      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    65f6:	4e57      	ldr	r6, [pc, #348]	; (6754 <SdioCard::begin(SdioConfig)+0x290>)
    65f8:	4b5a      	ldr	r3, [pc, #360]	; (6764 <SdioCard::begin(SdioConfig)+0x2a0>)
    65fa:	6932      	ldr	r2, [r6, #16]
    65fc:	4f5a      	ldr	r7, [pc, #360]	; (6768 <SdioCard::begin(SdioConfig)+0x2a4>)
    65fe:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6600:	495a      	ldr	r1, [pc, #360]	; (676c <SdioCard::begin(SdioConfig)+0x2a8>)
    6602:	485b      	ldr	r0, [pc, #364]	; (6770 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6604:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6606:	f7ff fbc1 	bl	5d8c <readReg16(unsigned long, void*)>
    660a:	4605      	mov	r5, r0
    660c:	b930      	cbnz	r0, 661c <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    660e:	2107      	movs	r1, #7
  m_errorLine = line;
    6610:	4b4c      	ldr	r3, [pc, #304]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    6612:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    6616:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6618:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    661a:	e773      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    661c:	4955      	ldr	r1, [pc, #340]	; (6774 <SdioCard::begin(SdioConfig)+0x2b0>)
    661e:	4856      	ldr	r0, [pc, #344]	; (6778 <SdioCard::begin(SdioConfig)+0x2b4>)
    6620:	f7ff fbb4 	bl	5d8c <readReg16(unsigned long, void*)>
    6624:	4605      	mov	r5, r0
    6626:	b930      	cbnz	r0, 6636 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    6628:	2108      	movs	r1, #8
  m_errorLine = line;
    662a:	4b46      	ldr	r3, [pc, #280]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    662c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    6630:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6632:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    6634:	e766      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6636:	6839      	ldr	r1, [r7, #0]
    6638:	4850      	ldr	r0, [pc, #320]	; (677c <SdioCard::begin(SdioConfig)+0x2b8>)
    663a:	f7ff fb5b 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    663e:	4605      	mov	r5, r0
    6640:	b930      	cbnz	r0, 6650 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    6642:	2105      	movs	r1, #5
  m_errorLine = line;
    6644:	4b3f      	ldr	r3, [pc, #252]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    6646:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    664a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    664c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    664e:	e759      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6650:	6839      	ldr	r1, [r7, #0]
    6652:	483e      	ldr	r0, [pc, #248]	; (674c <SdioCard::begin(SdioConfig)+0x288>)
    6654:	f7ff fb4e 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6658:	b938      	cbnz	r0, 666a <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    665a:	2114      	movs	r1, #20
  m_errorLine = line;
    665c:	4b39      	ldr	r3, [pc, #228]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    665e:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    6662:	2500      	movs	r5, #0
  m_errorCode = code;
    6664:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    6666:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    6668:	e74c      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    666a:	2102      	movs	r1, #2
    666c:	4844      	ldr	r0, [pc, #272]	; (6780 <SdioCard::begin(SdioConfig)+0x2bc>)
    666e:	f7ff fb41 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6672:	4605      	mov	r5, r0
    6674:	2800      	cmp	r0, #0
    6676:	d0f0      	beq.n	665a <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6678:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    667a:	4669      	mov	r1, sp
    667c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6680:	f023 0306 	bic.w	r3, r3, #6
    6684:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6686:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6688:	f043 0302 	orr.w	r3, r3, #2
    668c:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    668e:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    6692:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    6694:	f7ff fcd4 	bl	6040 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    6698:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    669c:	079b      	lsls	r3, r3, #30
    669e:	d543      	bpl.n	6728 <SdioCard::begin(SdioConfig)+0x264>
    66a0:	2800      	cmp	r0, #0
    66a2:	d041      	beq.n	6728 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    66a4:	4e27      	ldr	r6, [pc, #156]	; (6744 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    66a6:	4669      	mov	r1, sp
    66a8:	4836      	ldr	r0, [pc, #216]	; (6784 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    66aa:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    66ae:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    66b0:	f7ff fcc6 	bl	6040 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    66b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    66b8:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    66bc:	2b01      	cmp	r3, #1
    66be:	d136      	bne.n	672e <SdioCard::begin(SdioConfig)+0x26a>
    66c0:	b3a8      	cbz	r0, 672e <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    66c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    66c6:	4c30      	ldr	r4, [pc, #192]	; (6788 <SdioCard::begin(SdioConfig)+0x2c4>)
    66c8:	2305      	movs	r3, #5
    66ca:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    66ce:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    66d2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    66d6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    66da:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    66de:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    66e2:	f7ff f8eb 	bl	58bc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    66e6:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    66e8:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    66ec:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    66f0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    66f4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    66f8:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    66fc:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6700:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6704:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6708:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    670c:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    6710:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6714:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    6718:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    671a:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    671e:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    6722:	f889 3000 	strb.w	r3, [r9]
  return true;
    6726:	e6ed      	b.n	6504 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    6728:	f246 10a8 	movw	r0, #25000	; 0x61a8
    672c:	e7cb      	b.n	66c6 <SdioCard::begin(SdioConfig)+0x202>
    672e:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    6732:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    6736:	6037      	str	r7, [r6, #0]
    6738:	e7c5      	b.n	66c6 <SdioCard::begin(SdioConfig)+0x202>
    673a:	bf00      	nop
    673c:	20008cb6 	.word	0x20008cb6
    6740:	200274d7 	.word	0x200274d7
    6744:	20022f98 	.word	0x20022f98
    6748:	081a0000 	.word	0x081a0000
    674c:	371a0000 	.word	0x371a0000
    6750:	000f4240 	.word	0x000f4240
    6754:	402c0000 	.word	0x402c0000
    6758:	200261c4 	.word	0x200261c4
    675c:	02090000 	.word	0x02090000
    6760:	031a0000 	.word	0x031a0000
    6764:	ffff0000 	.word	0xffff0000
    6768:	200261c8 	.word	0x200261c8
    676c:	200261b4 	.word	0x200261b4
    6770:	09090000 	.word	0x09090000
    6774:	200261a4 	.word	0x200261a4
    6778:	0a090000 	.word	0x0a090000
    677c:	071b0000 	.word	0x071b0000
    6780:	061a0000 	.word	0x061a0000
    6784:	80fffff1 	.word	0x80fffff1
    6788:	401f8000 	.word	0x401f8000
    678c:	200274d6 	.word	0x200274d6
    6790:	200274d8 	.word	0x200274d8
    6794:	40300000 	.word	0x40300000
    6798:	29020000 	.word	0x29020000

0000679c <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    679c:	4b37      	ldr	r3, [pc, #220]	; (687c <SdioCard::readData(unsigned char*)+0xe0>)
    679e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    67a0:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    67a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67a6:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    67a8:	d40d      	bmi.n	67c6 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    67aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    67b0:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    67b2:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    67b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    67ba:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    67bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    67c2:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    67c4:	b662      	cpsie	i
  uint32_t m = micros();
    67c6:	f001 f8bd 	bl	7944 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    67ca:	4e2c      	ldr	r6, [pc, #176]	; (687c <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67cc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6894 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    67d0:	4605      	mov	r5, r0
  while (fcn()) {
    67d2:	e004      	b.n	67de <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67d4:	f001 f8b6 	bl	7944 <micros>
    67d8:	1b43      	subs	r3, r0, r5
    67da:	4543      	cmp	r3, r8
    67dc:	d837      	bhi.n	684e <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    67de:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    67e0:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    67e4:	d0f6      	beq.n	67d4 <SdioCard::readData(unsigned char*)+0x38>
    67e6:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    67ea:	4824      	ldr	r0, [pc, #144]	; (687c <SdioCard::readData(unsigned char*)+0xe0>)
    67ec:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    67f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    67f2:	051b      	lsls	r3, r3, #20
    67f4:	d5fc      	bpl.n	67f0 <SdioCard::readData(unsigned char*)+0x54>
    67f6:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    67fa:	6a02      	ldr	r2, [r0, #32]
    67fc:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6800:	459c      	cmp	ip, r3
    6802:	d1fa      	bne.n	67fa <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    6804:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    6808:	4567      	cmp	r7, ip
    680a:	d1f1      	bne.n	67f0 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    680c:	f001 f89a 	bl	7944 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6810:	4f1a      	ldr	r7, [pc, #104]	; (687c <SdioCard::readData(unsigned char*)+0xe0>)
    6812:	4d1b      	ldr	r5, [pc, #108]	; (6880 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    6814:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6816:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6894 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    681a:	e004      	b.n	6826 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    681c:	f001 f892 	bl	7944 <micros>
    6820:	1b83      	subs	r3, r0, r6
    6822:	4543      	cmp	r3, r8
    6824:	d81d      	bhi.n	6862 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6826:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    6828:	402c      	ands	r4, r5
    682a:	d0f7      	beq.n	681c <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    682e:	4a15      	ldr	r2, [pc, #84]	; (6884 <SdioCard::readData(unsigned char*)+0xe8>)
    6830:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    6832:	6813      	ldr	r3, [r2, #0]
    6834:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6836:	6813      	ldr	r3, [r2, #0]
    6838:	f013 0302 	ands.w	r3, r3, #2
    683c:	d01b      	beq.n	6876 <SdioCard::readData(unsigned char*)+0xda>
    683e:	6812      	ldr	r2, [r2, #0]
    6840:	4b11      	ldr	r3, [pc, #68]	; (6888 <SdioCard::readData(unsigned char*)+0xec>)
    6842:	421a      	tst	r2, r3
    6844:	bf0c      	ite	eq
    6846:	2001      	moveq	r0, #1
    6848:	2000      	movne	r0, #0
}
    684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    684e:	490f      	ldr	r1, [pc, #60]	; (688c <SdioCard::readData(unsigned char*)+0xf0>)
    6850:	251a      	movs	r5, #26
  m_errorLine = line;
    6852:	4b0f      	ldr	r3, [pc, #60]	; (6890 <SdioCard::readData(unsigned char*)+0xf4>)
    6854:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    6858:	4620      	mov	r0, r4
  m_errorCode = code;
    685a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    685c:	601a      	str	r2, [r3, #0]
}
    685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6862:	490a      	ldr	r1, [pc, #40]	; (688c <SdioCard::readData(unsigned char*)+0xf0>)
    6864:	251d      	movs	r5, #29
  m_errorLine = line;
    6866:	4b0a      	ldr	r3, [pc, #40]	; (6890 <SdioCard::readData(unsigned char*)+0xf4>)
    6868:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    686c:	4620      	mov	r0, r4
  m_errorCode = code;
    686e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6870:	601a      	str	r2, [r3, #0]
}
    6872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6876:	4618      	mov	r0, r3
}
    6878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    687c:	402c0000 	.word	0x402c0000
    6880:	117f0002 	.word	0x117f0002
    6884:	20026870 	.word	0x20026870
    6888:	117f0000 	.word	0x117f0000
    688c:	20008cb6 	.word	0x20008cb6
    6890:	20022f98 	.word	0x20022f98
    6894:	000f4240 	.word	0x000f4240

00006898 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    6898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    689c:	4b29      	ldr	r3, [pc, #164]	; (6944 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    689e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    68a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6964 <SdioCard::readStart(unsigned long)+0xcc>
    68a4:	4e28      	ldr	r6, [pc, #160]	; (6948 <SdioCard::readStart(unsigned long)+0xb0>)
    68a6:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    68aa:	f001 f84b 	bl	7944 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    68ae:	4d27      	ldr	r5, [pc, #156]	; (694c <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    68b0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    68b2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6968 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    68b6:	4f26      	ldr	r7, [pc, #152]	; (6950 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    68b8:	e006      	b.n	68c8 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    68ba:	f001 f843 	bl	7944 <micros>
    68be:	1b00      	subs	r0, r0, r4
    68c0:	42b8      	cmp	r0, r7
    68c2:	d829      	bhi.n	6918 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    68c4:	f002 fc5a 	bl	917c <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    68c8:	6831      	ldr	r1, [r6, #0]
    68ca:	4628      	mov	r0, r5
    68cc:	f7ff fa12 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    68d0:	2800      	cmp	r0, #0
    68d2:	d0f2      	beq.n	68ba <SdioCard::readStart(unsigned long)+0x22>
    68d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    68d8:	05db      	lsls	r3, r3, #23
    68da:	d5ee      	bpl.n	68ba <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    68dc:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    68de:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    68e2:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    68e6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    68ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    68ee:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    68f2:	4b18      	ldr	r3, [pc, #96]	; (6954 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    68f4:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    68f8:	781b      	ldrb	r3, [r3, #0]
    68fa:	b1cb      	cbz	r3, 6930 <SdioCard::readStart(unsigned long)+0x98>
    68fc:	4649      	mov	r1, r9
    68fe:	4816      	ldr	r0, [pc, #88]	; (6958 <SdioCard::readStart(unsigned long)+0xc0>)
    6900:	f7ff f9f8 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6904:	b930      	cbnz	r0, 6914 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    6906:	4915      	ldr	r1, [pc, #84]	; (695c <SdioCard::readStart(unsigned long)+0xc4>)
    6908:	240c      	movs	r4, #12
  m_errorLine = line;
    690a:	4b15      	ldr	r3, [pc, #84]	; (6960 <SdioCard::readStart(unsigned long)+0xc8>)
    690c:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    6910:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6912:	601a      	str	r2, [r3, #0]
}
    6914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6918:	4a10      	ldr	r2, [pc, #64]	; (695c <SdioCard::readStart(unsigned long)+0xc4>)
    691a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    691c:	2000      	movs	r0, #0
  m_errorLine = line;
    691e:	4b10      	ldr	r3, [pc, #64]	; (6960 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6920:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6922:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    6926:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    692a:	601a      	str	r2, [r3, #0]
}
    692c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6930:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6934:	4808      	ldr	r0, [pc, #32]	; (6958 <SdioCard::readStart(unsigned long)+0xc0>)
    6936:	4649      	mov	r1, r9
    6938:	f7ff f9dc 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    693c:	2800      	cmp	r0, #0
    693e:	d1e9      	bne.n	6914 <SdioCard::readStart(unsigned long)+0x7c>
    6940:	e7e1      	b.n	6906 <SdioCard::readStart(unsigned long)+0x6e>
    6942:	bf00      	nop
    6944:	00005e89 	.word	0x00005e89
    6948:	200261c8 	.word	0x200261c8
    694c:	0d1a0000 	.word	0x0d1a0000
    6950:	000f4240 	.word	0x000f4240
    6954:	200274d8 	.word	0x200274d8
    6958:	123a0030 	.word	0x123a0030
    695c:	20008cb6 	.word	0x20008cb6
    6960:	20022f98 	.word	0x20022f98
    6964:	2002686c 	.word	0x2002686c
    6968:	402c0000 	.word	0x402c0000

0000696c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6970:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6972:	4c1d      	ldr	r4, [pc, #116]	; (69e8 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6974:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    6976:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6978:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    697a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    697c:	481b      	ldr	r0, [pc, #108]	; (69ec <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6982:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6984:	f7ff f9b6 	bl	5cf4 <cardCommand(unsigned long, unsigned long)>
    6988:	b940      	cbnz	r0, 699c <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    698a:	4919      	ldr	r1, [pc, #100]	; (69f0 <SdioCard::stopTransmission(bool)+0x84>)
    698c:	2409      	movs	r4, #9
  m_errorLine = line;
    698e:	4b19      	ldr	r3, [pc, #100]	; (69f4 <SdioCard::stopTransmission(bool)+0x88>)
    6990:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    6994:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6996:	601a      	str	r2, [r3, #0]
}
    6998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    699c:	2d00      	cmp	r5, #0
    699e:	d0fb      	beq.n	6998 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    69a0:	4b15      	ldr	r3, [pc, #84]	; (69f8 <SdioCard::stopTransmission(bool)+0x8c>)
    69a2:	4e16      	ldr	r6, [pc, #88]	; (69fc <SdioCard::stopTransmission(bool)+0x90>)
    69a4:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    69a6:	f000 ffcd 	bl	7944 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    69aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    69ac:	4607      	mov	r7, r0
  while (fcn()) {
    69ae:	01da      	lsls	r2, r3, #7
    69b0:	d416      	bmi.n	69e0 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69b2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6a00 <SdioCard::stopTransmission(bool)+0x94>
    69b6:	e004      	b.n	69c2 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    69b8:	f002 fbe0 	bl	917c <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    69bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    69be:	01db      	lsls	r3, r3, #7
    69c0:	d40e      	bmi.n	69e0 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    69c2:	f000 ffbf 	bl	7944 <micros>
    69c6:	1bc0      	subs	r0, r0, r7
    69c8:	4540      	cmp	r0, r8
    69ca:	d9f5      	bls.n	69b8 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    69cc:	4a08      	ldr	r2, [pc, #32]	; (69f0 <SdioCard::stopTransmission(bool)+0x84>)
    69ce:	210a      	movs	r1, #10
      m_busyFcn = 0;
    69d0:	2000      	movs	r0, #0
  m_errorLine = line;
    69d2:	4b08      	ldr	r3, [pc, #32]	; (69f4 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    69d4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    69d6:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    69da:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    69dc:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    69de:	e7db      	b.n	6998 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    69e0:	2300      	movs	r3, #0
  return true;
    69e2:	4628      	mov	r0, r5
  m_busyFcn = 0;
    69e4:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    69e6:	e7d7      	b.n	6998 <SdioCard::stopTransmission(bool)+0x2c>
    69e8:	402c0000 	.word	0x402c0000
    69ec:	0cdb0000 	.word	0x0cdb0000
    69f0:	20008cb6 	.word	0x20008cb6
    69f4:	20022f98 	.word	0x20022f98
    69f8:	0000589d 	.word	0x0000589d
    69fc:	2002686c 	.word	0x2002686c
    6a00:	000f4240 	.word	0x000f4240

00006a04 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6a04:	4b0a      	ldr	r3, [pc, #40]	; (6a30 <SdioCard::syncDevice()+0x2c>)
    6a06:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6a08:	b510      	push	{r4, lr}
    6a0a:	4604      	mov	r4, r0
  if (!m_transferActive) {
    6a0c:	b91b      	cbnz	r3, 6a16 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    6a0e:	7a63      	ldrb	r3, [r4, #9]
    6a10:	b943      	cbnz	r3, 6a24 <SdioCard::syncDevice()+0x20>
  return true;
    6a12:	2001      	movs	r0, #1
}
    6a14:	bd10      	pop	{r4, pc}
    6a16:	f7ff f8cf 	bl	5bb8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d0fa      	beq.n	6a14 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    6a1e:	7a63      	ldrb	r3, [r4, #9]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d0f6      	beq.n	6a12 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6a24:	4620      	mov	r0, r4
    6a26:	2101      	movs	r1, #1
}
    6a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6a2c:	f7ff bf9e 	b.w	696c <SdioCard::stopTransmission(bool)>
    6a30:	200274d9 	.word	0x200274d9

00006a34 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a38:	4604      	mov	r4, r0
    6a3a:	7a00      	ldrb	r0, [r0, #8]
    6a3c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6a40:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6a42:	f010 0501 	ands.w	r5, r0, #1
    6a46:	d013      	beq.n	6a70 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6a48:	0793      	lsls	r3, r2, #30
    6a4a:	d03c      	beq.n	6ac6 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6a4c:	2301      	movs	r3, #1
    6a4e:	4838      	ldr	r0, [pc, #224]	; (6b30 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6a50:	466a      	mov	r2, sp
    6a52:	f7ff fc01 	bl	6258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6a56:	2800      	cmp	r0, #0
    6a58:	d03a      	beq.n	6ad0 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    6a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6a5e:	4669      	mov	r1, sp
    6a60:	4630      	mov	r0, r6
    6a62:	f001 f803 	bl	7a6c <memcpy>
}
    6a66:	4628      	mov	r0, r5
    6a68:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6a70:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6b40 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6a74:	460f      	mov	r7, r1
    6a76:	f898 3000 	ldrb.w	r3, [r8]
    6a7a:	2b00      	cmp	r3, #0
    6a7c:	d135      	bne.n	6aea <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6a7e:	7a63      	ldrb	r3, [r4, #9]
    6a80:	2b01      	cmp	r3, #1
    6a82:	d039      	beq.n	6af8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6a84:	6822      	ldr	r2, [r4, #0]
    6a86:	492b      	ldr	r1, [pc, #172]	; (6b34 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    6a88:	6a12      	ldr	r2, [r2, #32]
    6a8a:	428a      	cmp	r2, r1
    6a8c:	d14a      	bne.n	6b24 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6a8e:	f898 2000 	ldrb.w	r2, [r8]
    6a92:	2a00      	cmp	r2, #0
    6a94:	d134      	bne.n	6b00 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    6a96:	2b00      	cmp	r3, #0
    6a98:	d139      	bne.n	6b0e <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    6a9a:	4639      	mov	r1, r7
    6a9c:	4620      	mov	r0, r4
    6a9e:	f7ff fefb 	bl	6898 <SdioCard::readStart(unsigned long)>
    6aa2:	b1e8      	cbz	r0, 6ae0 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6aa4:	2301      	movs	r3, #1
      m_curSector = sector;
    6aa6:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    6aa8:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    6aaa:	4631      	mov	r1, r6
    6aac:	4620      	mov	r0, r4
    6aae:	f7ff fe75 	bl	679c <SdioCard::readData(unsigned char*)>
    6ab2:	b1a8      	cbz	r0, 6ae0 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6ab4:	6863      	ldr	r3, [r4, #4]
  return true;
    6ab6:	4605      	mov	r5, r0
    m_curSector++;
    6ab8:	3301      	adds	r3, #1
}
    6aba:	4628      	mov	r0, r5
    m_curSector++;
    6abc:	6063      	str	r3, [r4, #4]
}
    6abe:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6ac6:	2301      	movs	r3, #1
    6ac8:	4819      	ldr	r0, [pc, #100]	; (6b30 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6aca:	f7ff fbc5 	bl	6258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6ace:	b938      	cbnz	r0, 6ae0 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    6ad0:	4919      	ldr	r1, [pc, #100]	; (6b38 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    6ad2:	200b      	movs	r0, #11
  m_errorLine = line;
    6ad4:	4b19      	ldr	r3, [pc, #100]	; (6b3c <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    6ad6:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    6ada:	2500      	movs	r5, #0
  m_errorCode = code;
    6adc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6ade:	601a      	str	r2, [r3, #0]
}
    6ae0:	4628      	mov	r0, r5
    6ae2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6aea:	f7ff f865 	bl	5bb8 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6aee:	2800      	cmp	r0, #0
    6af0:	d0f6      	beq.n	6ae0 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6af2:	7a63      	ldrb	r3, [r4, #9]
    6af4:	2b01      	cmp	r3, #1
    6af6:	d1c5      	bne.n	6a84 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6af8:	6862      	ldr	r2, [r4, #4]
    6afa:	42ba      	cmp	r2, r7
    6afc:	d1c2      	bne.n	6a84 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6afe:	e7d4      	b.n	6aaa <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6b00:	f7ff f85a 	bl	5bb8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6b04:	2800      	cmp	r0, #0
    6b06:	d0eb      	beq.n	6ae0 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6b08:	7a63      	ldrb	r3, [r4, #9]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d0c5      	beq.n	6a9a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    6b0e:	2101      	movs	r1, #1
    6b10:	4620      	mov	r0, r4
    6b12:	f7ff ff2b 	bl	696c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6b16:	2800      	cmp	r0, #0
    6b18:	d1bf      	bne.n	6a9a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    6b1a:	4628      	mov	r0, r5
    6b1c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6b24:	4620      	mov	r0, r4
    6b26:	4790      	blx	r2
    6b28:	2800      	cmp	r0, #0
    6b2a:	d0f6      	beq.n	6b1a <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6b2c:	e7b5      	b.n	6a9a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6b2e:	bf00      	nop
    6b30:	113a0011 	.word	0x113a0011
    6b34:	00006a05 	.word	0x00006a05
    6b38:	20008cb6 	.word	0x20008cb6
    6b3c:	20022f98 	.word	0x20022f98
    6b40:	200274d9 	.word	0x200274d9

00006b44 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b48:	7a04      	ldrb	r4, [r0, #8]
    6b4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6b4e:	460f      	mov	r7, r1
    6b50:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6b52:	f014 0401 	ands.w	r4, r4, #1
    6b56:	d01d      	beq.n	6b94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6b58:	f012 0f03 	tst.w	r2, #3
    6b5c:	d006      	beq.n	6b6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6b5e:	4668      	mov	r0, sp
    6b60:	4611      	mov	r1, r2
    6b62:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6b66:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6b68:	f000 ff80 	bl	7a6c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6b6c:	2301      	movs	r3, #1
    6b6e:	4642      	mov	r2, r8
    6b70:	4639      	mov	r1, r7
    6b72:	482c      	ldr	r0, [pc, #176]	; (6c24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6b74:	f7ff fb70 	bl	6258 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6b78:	4604      	mov	r4, r0
    6b7a:	b930      	cbnz	r0, 6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6b7c:	492a      	ldr	r1, [pc, #168]	; (6c28 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6b7e:	200d      	movs	r0, #13
  m_errorLine = line;
    6b80:	4b2a      	ldr	r3, [pc, #168]	; (6c2c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6b82:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    6b86:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    6b88:	601a      	str	r2, [r3, #0]
}
    6b8a:	4620      	mov	r0, r4
    6b8c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6b94:	4d26      	ldr	r5, [pc, #152]	; (6c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    6b96:	4606      	mov	r6, r0
    6b98:	782b      	ldrb	r3, [r5, #0]
    6b9a:	bb2b      	cbnz	r3, 6be8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6b9c:	7a73      	ldrb	r3, [r6, #9]
    6b9e:	2b02      	cmp	r3, #2
    6ba0:	d029      	beq.n	6bf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6ba2:	6832      	ldr	r2, [r6, #0]
    6ba4:	4923      	ldr	r1, [pc, #140]	; (6c34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    6ba6:	6a12      	ldr	r2, [r2, #32]
    6ba8:	428a      	cmp	r2, r1
    6baa:	d136      	bne.n	6c1a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6bac:	782a      	ldrb	r2, [r5, #0]
    6bae:	bb32      	cbnz	r2, 6bfe <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	d12b      	bne.n	6c0c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    6bb4:	6833      	ldr	r3, [r6, #0]
    6bb6:	4639      	mov	r1, r7
    6bb8:	4630      	mov	r0, r6
    6bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6bbc:	4798      	blx	r3
    6bbe:	2800      	cmp	r0, #0
    6bc0:	d0e3      	beq.n	6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6bc2:	2302      	movs	r3, #2
      m_curSector = sector;
    6bc4:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    6bc6:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    6bc8:	6833      	ldr	r3, [r6, #0]
    6bca:	4641      	mov	r1, r8
    6bcc:	4630      	mov	r0, r6
    6bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6bd0:	4798      	blx	r3
    6bd2:	2800      	cmp	r0, #0
    6bd4:	d0d9      	beq.n	6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    6bd6:	6873      	ldr	r3, [r6, #4]
  return true;
    6bd8:	4604      	mov	r4, r0
    m_curSector++;
    6bda:	3301      	adds	r3, #1
}
    6bdc:	4620      	mov	r0, r4
    m_curSector++;
    6bde:	6073      	str	r3, [r6, #4]
}
    6be0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6be8:	f7fe ffe6 	bl	5bb8 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6bec:	2800      	cmp	r0, #0
    6bee:	d0cc      	beq.n	6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6bf0:	7a73      	ldrb	r3, [r6, #9]
    6bf2:	2b02      	cmp	r3, #2
    6bf4:	d1d5      	bne.n	6ba2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6bf6:	6872      	ldr	r2, [r6, #4]
    6bf8:	42ba      	cmp	r2, r7
    6bfa:	d1d2      	bne.n	6ba2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6bfc:	e7e4      	b.n	6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6bfe:	f7fe ffdb 	bl	5bb8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6c02:	2800      	cmp	r0, #0
    6c04:	d0c1      	beq.n	6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6c06:	7a73      	ldrb	r3, [r6, #9]
    6c08:	2b00      	cmp	r3, #0
    6c0a:	d0d3      	beq.n	6bb4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6c0c:	2101      	movs	r1, #1
    6c0e:	4630      	mov	r0, r6
    6c10:	f7ff feac 	bl	696c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6c14:	2800      	cmp	r0, #0
    6c16:	d0b8      	beq.n	6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6c18:	e7cc      	b.n	6bb4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6c1a:	4630      	mov	r0, r6
    6c1c:	4790      	blx	r2
    6c1e:	2800      	cmp	r0, #0
    6c20:	d0b3      	beq.n	6b8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6c22:	e7c7      	b.n	6bb4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6c24:	183a0001 	.word	0x183a0001
    6c28:	20008cb6 	.word	0x20008cb6
    6c2c:	20022f98 	.word	0x20022f98
    6c30:	200274d9 	.word	0x200274d9
    6c34:	00006a05 	.word	0x00006a05

00006c38 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    6c38:	f000 beae 	b.w	7998 <digitalWrite>

00006c3c <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6c3c:	b430      	push	{r4, r5}
    6c3e:	b082      	sub	sp, #8
    6c40:	460c      	mov	r4, r1
    6c42:	ab02      	add	r3, sp, #8
    6c44:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6c48:	7cc3      	ldrb	r3, [r0, #19]
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d030      	beq.n	6cb0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6c4e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6c50:	7cc3      	ldrb	r3, [r0, #19]
    6c52:	07da      	lsls	r2, r3, #31
    6c54:	d508      	bpl.n	6c68 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6c56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6c5a:	6945      	ldr	r5, [r0, #20]
    6c5c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6c60:	402a      	ands	r2, r5
    6c62:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6c64:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6c68:	079d      	lsls	r5, r3, #30
    6c6a:	d508      	bpl.n	6c7e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6c6c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6c70:	6985      	ldr	r5, [r0, #24]
    6c72:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6c76:	402a      	ands	r2, r5
    6c78:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6c7a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6c7e:	0759      	lsls	r1, r3, #29
    6c80:	d508      	bpl.n	6c94 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6c82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6c86:	69c5      	ldr	r5, [r0, #28]
    6c88:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6c8c:	402a      	ands	r2, r5
    6c8e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6c90:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6c94:	071a      	lsls	r2, r3, #28
    6c96:	d508      	bpl.n	6caa <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6c98:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6c9c:	6a05      	ldr	r5, [r0, #32]
    6c9e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6ca2:	402a      	ands	r2, r5
    6ca4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6ca6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6caa:	06db      	lsls	r3, r3, #27
    6cac:	d42f      	bmi.n	6d0e <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6cae:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6cb0:	6883      	ldr	r3, [r0, #8]
    6cb2:	429c      	cmp	r4, r3
    6cb4:	d035      	beq.n	6d22 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6cb6:	4b22      	ldr	r3, [pc, #136]	; (6d40 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6cb8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6cba:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6cbc:	4a21      	ldr	r2, [pc, #132]	; (6d44 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6cbe:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6cc2:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6cc6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6cca:	3301      	adds	r3, #1
    6ccc:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6cd0:	b1cc      	cbz	r4, 6d06 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6cd2:	4294      	cmp	r4, r2
    6cd4:	d827      	bhi.n	6d26 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6cd6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6cda:	fbb2 f2f3 	udiv	r2, r2, r3
    6cde:	4294      	cmp	r4, r2
    6ce0:	d32c      	bcc.n	6d3c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6ce2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6ce6:	d320      	bcc.n	6d2a <SPIClass::beginTransaction(SPISettings)+0xee>
    6ce8:	4c17      	ldr	r4, [pc, #92]	; (6d48 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6cea:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6cec:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6cee:	2203      	movs	r2, #3
		port().CR = 0;
    6cf0:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6cf2:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6cf4:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6cf6:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6cf8:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6cfa:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6cfc:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6cfe:	611a      	str	r2, [r3, #16]
	}
    6d00:	b002      	add	sp, #8
    6d02:	bc30      	pop	{r4, r5}
    6d04:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6d06:	4299      	cmp	r1, r3
    6d08:	d3ef      	bcc.n	6cea <SPIClass::beginTransaction(SPISettings)+0xae>
    6d0a:	1c53      	adds	r3, r2, #1
    6d0c:	e7e9      	b.n	6ce2 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6d0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6d12:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6d14:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6d18:	400b      	ands	r3, r1
    6d1a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6d1c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6d20:	e7c5      	b.n	6cae <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6d22:	68c4      	ldr	r4, [r0, #12]
    6d24:	e7e2      	b.n	6cec <SPIClass::beginTransaction(SPISettings)+0xb0>
    6d26:	2400      	movs	r4, #0
    6d28:	e7df      	b.n	6cea <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6d2a:	2b02      	cmp	r3, #2
    6d2c:	d9fb      	bls.n	6d26 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6d2e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6d30:	085a      	lsrs	r2, r3, #1
    6d32:	0214      	lsls	r4, r2, #8
    6d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6d38:	431c      	orrs	r4, r3
    6d3a:	e7d6      	b.n	6cea <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6d3c:	461a      	mov	r2, r3
    6d3e:	e7e4      	b.n	6d0a <SPIClass::beginTransaction(SPISettings)+0xce>
    6d40:	400fc000 	.word	0x400fc000
    6d44:	20000980 	.word	0x20000980
    6d48:	007f7fff 	.word	0x007f7fff

00006d4c <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    6d4c:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    6d4e:	4603      	mov	r3, r0
    6d50:	f853 0b04 	ldr.w	r0, [r3], #4
    6d54:	e893 0006 	ldmia.w	r3, {r1, r2}
    6d58:	f7ff ff70 	bl	6c3c <SPIClass::beginTransaction(SPISettings)>
}
    6d5c:	bd08      	pop	{r3, pc}
    6d5e:	bf00      	nop

00006d60 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    6d60:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6d62:	7cd3      	ldrb	r3, [r2, #19]
    6d64:	b313      	cbz	r3, 6dac <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6d66:	07d8      	lsls	r0, r3, #31
    6d68:	d504      	bpl.n	6d74 <SdSpiArduinoDriver::deactivate()+0x14>
    6d6a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6d6c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6d70:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6d74:	0799      	lsls	r1, r3, #30
    6d76:	d504      	bpl.n	6d82 <SdSpiArduinoDriver::deactivate()+0x22>
    6d78:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6d7a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6d7e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6d82:	0758      	lsls	r0, r3, #29
    6d84:	d504      	bpl.n	6d90 <SdSpiArduinoDriver::deactivate()+0x30>
    6d86:	6b10      	ldr	r0, [r2, #48]	; 0x30
    6d88:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6d8c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6d90:	0719      	lsls	r1, r3, #28
    6d92:	d504      	bpl.n	6d9e <SdSpiArduinoDriver::deactivate()+0x3e>
    6d94:	6b50      	ldr	r0, [r2, #52]	; 0x34
    6d96:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6d9a:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6d9e:	06db      	lsls	r3, r3, #27
    6da0:	d504      	bpl.n	6dac <SdSpiArduinoDriver::deactivate()+0x4c>
    6da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6da8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    6dac:	4770      	bx	lr
    6dae:	bf00      	nop

00006db0 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    6db0:	6800      	ldr	r0, [r0, #0]
    6db2:	f000 b9a7 	b.w	7104 <SPIClass::end()>
    6db6:	bf00      	nop

00006db8 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6db8:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    6dba:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6dbc:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    6dbe:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6dc0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6dc2:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6dc6:	d0fb      	beq.n	6dc0 <SdSpiArduinoDriver::receive()+0x8>
    6dc8:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    6dca:	b2c0      	uxtb	r0, r0
    6dcc:	4770      	bx	lr
    6dce:	bf00      	nop

00006dd0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6dd0:	b530      	push	{r4, r5, lr}
    6dd2:	460c      	mov	r4, r1
    6dd4:	b083      	sub	sp, #12
    6dd6:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6dd8:	21ff      	movs	r1, #255	; 0xff
    6dda:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6ddc:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    6dde:	f004 fc15 	bl	b60c <memset>
		transfer(buf, buf, count);
    6de2:	6828      	ldr	r0, [r5, #0]
    6de4:	9b01      	ldr	r3, [sp, #4]
    6de6:	4622      	mov	r2, r4
    6de8:	4621      	mov	r1, r4
    6dea:	f000 f987 	bl	70fc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    6dee:	2000      	movs	r0, #0
    6df0:	b003      	add	sp, #12
    6df2:	bd30      	pop	{r4, r5, pc}

00006df4 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6df4:	6803      	ldr	r3, [r0, #0]
    6df6:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    6df8:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6dfa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6dfc:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6e00:	d0fb      	beq.n	6dfa <SdSpiArduinoDriver::send(unsigned char)+0x6>
    6e02:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    6e04:	4770      	bx	lr
    6e06:	bf00      	nop

00006e08 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6e08:	1e53      	subs	r3, r2, #1
    6e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    6e0e:	b530      	push	{r4, r5, lr}
    6e10:	4614      	mov	r4, r2
    6e12:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    6e16:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    6e18:	d311      	bcc.n	6e3e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6e1a:	b16a      	cbz	r2, 6e38 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6e1c:	6803      	ldr	r3, [r0, #0]
    6e1e:	1e48      	subs	r0, r1, #1
    6e20:	6819      	ldr	r1, [r3, #0]
    6e22:	1882      	adds	r2, r0, r2
		port().TDR = data;
    6e24:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6e28:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6e2a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6e2c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6e30:	d0fb      	beq.n	6e2a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    6e32:	4290      	cmp	r0, r2
    6e34:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    6e36:	d1f5      	bne.n	6e24 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    6e38:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6e3c:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    6e3e:	4668      	mov	r0, sp
    6e40:	f000 fe14 	bl	7a6c <memcpy>
		transfer(buf, buf, count);
    6e44:	466a      	mov	r2, sp
    6e46:	4623      	mov	r3, r4
    6e48:	6828      	ldr	r0, [r5, #0]
    6e4a:	4611      	mov	r1, r2
    6e4c:	f000 f956 	bl	70fc <SPIClass::transfer(void const*, void*, unsigned int)>
}
    6e50:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6e54:	bd30      	pop	{r4, r5, pc}
    6e56:	bf00      	nop

00006e58 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6e58:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    6e5a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    6e5c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    6e5e:	07dc      	lsls	r4, r3, #31
    6e60:	d51d      	bpl.n	6e9e <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    6e62:	4604      	mov	r4, r0
    6e64:	6840      	ldr	r0, [r0, #4]
    6e66:	f104 0210 	add.w	r2, r4, #16
    6e6a:	6803      	ldr	r3, [r0, #0]
    6e6c:	68e1      	ldr	r1, [r4, #12]
    6e6e:	9201      	str	r2, [sp, #4]
    6e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e72:	4798      	blx	r3
    6e74:	9a01      	ldr	r2, [sp, #4]
    6e76:	4605      	mov	r5, r0
    6e78:	b1a8      	cbz	r0, 6ea6 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6e7a:	7823      	ldrb	r3, [r4, #0]
    6e7c:	0799      	lsls	r1, r3, #30
    6e7e:	d508      	bpl.n	6e92 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6e80:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    6e82:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6e86:	4419      	add	r1, r3
    6e88:	6803      	ldr	r3, [r0, #0]
    6e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e8c:	4798      	blx	r3
    6e8e:	b150      	cbz	r0, 6ea6 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6e90:	7823      	ldrb	r3, [r4, #0]
    6e92:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    6e96:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    6e98:	7023      	strb	r3, [r4, #0]
}
    6e9a:	b003      	add	sp, #12
    6e9c:	bd30      	pop	{r4, r5, pc}
  return true;
    6e9e:	2501      	movs	r5, #1
}
    6ea0:	4628      	mov	r0, r5
    6ea2:	b003      	add	sp, #12
    6ea4:	bd30      	pop	{r4, r5, pc}
  return false;
    6ea6:	2500      	movs	r5, #0
}
    6ea8:	4628      	mov	r0, r5
    6eaa:	b003      	add	sp, #12
    6eac:	bd30      	pop	{r4, r5, pc}
    6eae:	bf00      	nop

00006eb0 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    6eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    6eb2:	6843      	ldr	r3, [r0, #4]
    6eb4:	b30b      	cbz	r3, 6efa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    6eb6:	68c3      	ldr	r3, [r0, #12]
    6eb8:	4604      	mov	r4, r0
    6eba:	460f      	mov	r7, r1
    6ebc:	4615      	mov	r5, r2
    6ebe:	428b      	cmp	r3, r1
    6ec0:	d106      	bne.n	6ed0 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    6ec2:	f810 3b10 	ldrb.w	r3, [r0], #16
    6ec6:	f005 0503 	and.w	r5, r5, #3
    6eca:	432b      	orrs	r3, r5
    6ecc:	7023      	strb	r3, [r4, #0]
}
    6ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    6ed0:	f7ff ffc2 	bl	6e58 <FsCache::sync()>
    6ed4:	b188      	cbz	r0, 6efa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    6ed6:	076b      	lsls	r3, r5, #29
    6ed8:	d505      	bpl.n	6ee6 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    6eda:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6ede:	4630      	mov	r0, r6
    m_sector = sector;
    6ee0:	2300      	movs	r3, #0
    6ee2:	60e7      	str	r7, [r4, #12]
    6ee4:	e7ef      	b.n	6ec6 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6ee6:	6860      	ldr	r0, [r4, #4]
    6ee8:	f104 0610 	add.w	r6, r4, #16
    6eec:	4639      	mov	r1, r7
    6eee:	6803      	ldr	r3, [r0, #0]
    6ef0:	4632      	mov	r2, r6
    6ef2:	691b      	ldr	r3, [r3, #16]
    6ef4:	4798      	blx	r3
    6ef6:	2800      	cmp	r0, #0
    6ef8:	d1f1      	bne.n	6ede <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    6efa:	2000      	movs	r0, #0
}
    6efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6efe:	bf00      	nop

00006f00 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    6f00:	b510      	push	{r4, lr}
    6f02:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    6f04:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    6f06:	b082      	sub	sp, #8
  if (ls) {
    6f08:	b118      	cbz	r0, 6f12 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    6f0a:	2300      	movs	r3, #0
    6f0c:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    6f0e:	b002      	add	sp, #8
    6f10:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    6f12:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6f16:	428b      	cmp	r3, r1
    6f18:	d2f9      	bcs.n	6f0e <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    6f1a:	aa01      	add	r2, sp, #4
    6f1c:	4618      	mov	r0, r3
    6f1e:	f000 f815 	bl	6f4c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    6f22:	b180      	cbz	r0, 6f46 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    6f24:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    6f26:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    6f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6f2c:	d201      	bcs.n	6f32 <FsName::get16()+0x32>
      rtn = cp;
    6f2e:	b298      	uxth	r0, r3
    6f30:	e7ed      	b.n	6f0e <FsName::get16()+0xe>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6f32:	0a98      	lsrs	r0, r3, #10
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
    6f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6f38:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    6f3c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6f40:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    6f42:	81a3      	strh	r3, [r4, #12]
    6f44:	e7e3      	b.n	6f0e <FsName::get16()+0xe>
  return 0XFFFF;
    6f46:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6f4a:	e7e0      	b.n	6f0e <FsName::get16()+0xe>

00006f4c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    6f4c:	4288      	cmp	r0, r1
    6f4e:	d23d      	bcs.n	6fcc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    6f50:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    6f52:	b410      	push	{r4}
      return nullptr;
    }
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
    6f54:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    6f58:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    6f5a:	2800      	cmp	r0, #0
    6f5c:	da2d      	bge.n	6fba <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    6f5e:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    6f62:	28c0      	cmp	r0, #192	; 0xc0
    6f64:	d034      	beq.n	6fd0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    6f66:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    6f6a:	28e0      	cmp	r0, #224	; 0xe0
    6f6c:	d034      	beq.n	6fd8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    6f6e:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    6f72:	28f0      	cmp	r0, #240	; 0xf0
    6f74:	d126      	bne.n	6fc4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    6f76:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    6f7a:	2004      	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    6f7c:	4418      	add	r0, r3
    6f7e:	4288      	cmp	r0, r1
    6f80:	d820      	bhi.n	6fc4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    6f82:	3301      	adds	r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    6f84:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    6f88:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    6f8c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    6f90:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    6f94:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    6f98:	d114      	bne.n	6fc4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    6f9a:	4283      	cmp	r3, r0
    6f9c:	d1f2      	bne.n	6f84 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    6f9e:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    6fa2:	4b0f      	ldr	r3, [pc, #60]	; (6fe0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    6fa4:	4299      	cmp	r1, r3
    6fa6:	d80d      	bhi.n	6fc4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    6fa8:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    6fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6fb0:	d308      	bcc.n	6fc4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      return nullptr;
    }
    *rtn = cp;
    6fb2:	6014      	str	r4, [r2, #0]
    return str + n;
  }
    6fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    6fb8:	4770      	bx	lr
      return str + 1;
    6fba:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    6fbc:	6014      	str	r4, [r2, #0]
  }
    6fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    6fc2:	4770      	bx	lr
      return nullptr;
    6fc4:	2000      	movs	r0, #0
  }
    6fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
    6fca:	4770      	bx	lr
      return nullptr;
    6fcc:	2000      	movs	r0, #0
  }
    6fce:	4770      	bx	lr
      cp = ch & 0X1F;
    6fd0:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    6fd4:	2002      	movs	r0, #2
    6fd6:	e7d1      	b.n	6f7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    6fd8:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    6fdc:	2003      	movs	r0, #3
    6fde:	e7cd      	b.n	6f7c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    6fe0:	0010ff7f 	.word	0x0010ff7f

00006fe4 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    6fe4:	287e      	cmp	r0, #126	; 0x7e
    6fe6:	d93e      	bls.n	7066 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    6fe8:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    6fec:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    6fee:	b430      	push	{r4, r5}
    6ff0:	4c28      	ldr	r4, [pc, #160]	; (7094 <toUpcase(unsigned short)+0xb0>)
    6ff2:	e004      	b.n	6ffe <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    6ff4:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    6ff8:	4282      	cmp	r2, r0
    6ffa:	d820      	bhi.n	703e <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    6ffc:	460b      	mov	r3, r1
  while (right - left > 1) {
    6ffe:	ebac 0203 	sub.w	r2, ip, r3
    7002:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    7004:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    7008:	d8f4      	bhi.n	6ff4 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    700a:	b29b      	uxth	r3, r3
    700c:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    7010:	4290      	cmp	r0, r2
    7012:	d216      	bcs.n	7042 <toUpcase(unsigned short)+0x5e>
    7014:	244b      	movs	r4, #75	; 0x4b
    7016:	2300      	movs	r3, #0
    7018:	4d1f      	ldr	r5, [pc, #124]	; (7098 <toUpcase(unsigned short)+0xb4>)
    701a:	e004      	b.n	7026 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    701c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    7020:	4282      	cmp	r2, r0
    7022:	d81e      	bhi.n	7062 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    7024:	460b      	mov	r3, r1
  while (right - left > 1) {
    7026:	1ae2      	subs	r2, r4, r3
    7028:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    702a:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    702e:	d8f5      	bhi.n	701c <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    7030:	b29b      	uxth	r3, r3
    7032:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    7036:	4282      	cmp	r2, r0
    7038:	d01f      	beq.n	707a <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    703a:	bc30      	pop	{r4, r5}
    703c:	4770      	bx	lr
    mid = left + (right - left)/2;
    703e:	468c      	mov	ip, r1
    7040:	e7dd      	b.n	6ffe <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    7042:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7046:	1a82      	subs	r2, r0, r2
    7048:	78e3      	ldrb	r3, [r4, #3]
    704a:	429a      	cmp	r2, r3
    704c:	dae2      	bge.n	7014 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    704e:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    7052:	2b01      	cmp	r3, #1
    7054:	d016      	beq.n	7084 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    7056:	b1d3      	cbz	r3, 708e <toUpcase(unsigned short)+0xaa>
    7058:	b29b      	uxth	r3, r3
    705a:	4403      	add	r3, r0
}
    705c:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    705e:	b298      	uxth	r0, r3
}
    7060:	4770      	bx	lr
    mid = left + (right - left)/2;
    7062:	460c      	mov	r4, r1
    7064:	e7df      	b.n	7026 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    7066:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    706a:	2b19      	cmp	r3, #25
    706c:	bf8c      	ite	hi
    706e:	2300      	movhi	r3, #0
    7070:	2301      	movls	r3, #1
    7072:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    7076:	b298      	uxth	r0, r3
}
    7078:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    707a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    707e:	8868      	ldrh	r0, [r5, #2]
}
    7080:	bc30      	pop	{r4, r5}
    7082:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    7084:	f002 0201 	and.w	r2, r2, #1
    7088:	1a83      	subs	r3, r0, r2
    708a:	b298      	uxth	r0, r3
    708c:	e7d5      	b.n	703a <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    708e:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    7092:	e7e2      	b.n	705a <toUpcase(unsigned short)+0x76>
    7094:	20000730 	.word	0x20000730
    7098:	200005f8 	.word	0x200005f8

0000709c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    709c:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    709e:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    70a0:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    70a4:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    70a6:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    70a8:	b1a3      	cbz	r3, 70d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    70aa:	b321      	cbz	r1, 70f6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    70ac:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    70b0:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    70b2:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    70b4:	6f25      	ldr	r5, [r4, #112]	; 0x70
    70b6:	07af      	lsls	r7, r5, #30
    70b8:	d407      	bmi.n	70ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    70ba:	4615      	mov	r5, r2
				count_read--;
    70bc:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    70be:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    70c0:	b11a      	cbz	r2, 70ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    70c2:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    70c6:	462a      	mov	r2, r5
    70c8:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    70ca:	6965      	ldr	r5, [r4, #20]
    70cc:	07ed      	lsls	r5, r5, #31
    70ce:	d5f1      	bpl.n	70b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    70d0:	2b00      	cmp	r3, #0
    70d2:	d1ea      	bne.n	70aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    70d4:	b16e      	cbz	r6, 70f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    70d6:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    70d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
    70da:	0789      	lsls	r1, r1, #30
    70dc:	d4fa      	bmi.n	70d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    70de:	4611      	mov	r1, r2
			count_read--;
    70e0:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    70e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    70e4:	2a00      	cmp	r2, #0
    70e6:	d0f5      	beq.n	70d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    70e8:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    70ec:	460a      	mov	r2, r1
	while (count_read) {
    70ee:	2e00      	cmp	r6, #0
    70f0:	d1f1      	bne.n	70d6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    70f2:	bcf0      	pop	{r4, r5, r6, r7}
    70f4:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    70f6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    70fa:	e7d9      	b.n	70b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000070fc <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    70fc:	b10b      	cbz	r3, 7102 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    70fe:	f7ff bfcd 	b.w	709c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    7102:	4770      	bx	lr

00007104 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7104:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7106:	e9d3 1200 	ldrd	r1, r2, [r3]
    710a:	6809      	ldr	r1, [r1, #0]
    710c:	4211      	tst	r1, r2
    710e:	d100      	bne.n	7112 <SPIClass::end()+0xe>
    7110:	4770      	bx	lr
void SPIClass::end() {
    7112:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7114:	6802      	ldr	r2, [r0, #0]
    7116:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    7118:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    711a:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    711c:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    711e:	7c22      	ldrb	r2, [r4, #16]
    7120:	4413      	add	r3, r2
    7122:	7c18      	ldrb	r0, [r3, #16]
    7124:	f000 fc62 	bl	79ec <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    7128:	7c62      	ldrb	r2, [r4, #17]
    712a:	6863      	ldr	r3, [r4, #4]
    712c:	2105      	movs	r1, #5
    712e:	4413      	add	r3, r2
    7130:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    7134:	f000 fc5a 	bl	79ec <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7138:	6863      	ldr	r3, [r4, #4]
    713a:	7ca2      	ldrb	r2, [r4, #18]
    713c:	2105      	movs	r1, #5
    713e:	4413      	add	r3, r2
	}
}
    7140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7144:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    7148:	f000 bc50 	b.w	79ec <pinMode>

0000714c <DMAChannel::begin(bool)>:
{
    714c:	b430      	push	{r4, r5}
	__disable_irq();
    714e:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    7150:	b921      	cbnz	r1, 715c <DMAChannel::begin(bool)+0x10>
    7152:	6803      	ldr	r3, [r0, #0]
    7154:	b113      	cbz	r3, 715c <DMAChannel::begin(bool)+0x10>
    7156:	7902      	ldrb	r2, [r0, #4]
    7158:	2a0f      	cmp	r2, #15
    715a:	d93b      	bls.n	71d4 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    715c:	4c24      	ldr	r4, [pc, #144]	; (71f0 <DMAChannel::begin(bool)+0xa4>)
    715e:	8821      	ldrh	r1, [r4, #0]
{
    7160:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    7162:	fa41 f203 	asr.w	r2, r1, r3
    7166:	f012 0201 	ands.w	r2, r2, #1
    716a:	d008      	beq.n	717e <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    716c:	3301      	adds	r3, #1
    716e:	2b10      	cmp	r3, #16
    7170:	d1f7      	bne.n	7162 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    7172:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    7174:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    7176:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    7178:	6002      	str	r2, [r0, #0]
}
    717a:	bc30      	pop	{r4, r5}
    717c:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    717e:	f04f 0c01 	mov.w	ip, #1
    7182:	fa0c fc03 	lsl.w	ip, ip, r3
    7186:	ea41 010c 	orr.w	r1, r1, ip
    718a:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    718c:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    718e:	4919      	ldr	r1, [pc, #100]	; (71f4 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7190:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7194:	4c18      	ldr	r4, [pc, #96]	; (71f8 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7196:	4419      	add	r1, r3
	channel = ch;
    7198:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    719c:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    719e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    71a0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    71a4:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    71a6:	f240 4482 	movw	r4, #1154	; 0x482
    71aa:	4914      	ldr	r1, [pc, #80]	; (71fc <DMAChannel::begin(bool)+0xb0>)
    71ac:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    71ae:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    71b2:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    71b6:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    71ba:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    71be:	6003      	str	r3, [r0, #0]
}
    71c0:	bc30      	pop	{r4, r5}
	*p++ = 0;
    71c2:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    71c6:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    71ca:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    71ce:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    71d2:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    71d4:	4c06      	ldr	r4, [pc, #24]	; (71f0 <DMAChannel::begin(bool)+0xa4>)
    71d6:	8821      	ldrh	r1, [r4, #0]
    71d8:	fa41 f502 	asr.w	r5, r1, r2
    71dc:	07ed      	lsls	r5, r5, #31
    71de:	d5bf      	bpl.n	7160 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    71e0:	4d04      	ldr	r5, [pc, #16]	; (71f4 <DMAChannel::begin(bool)+0xa8>)
    71e2:	4415      	add	r5, r2
    71e4:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    71e8:	d1ba      	bne.n	7160 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    71ea:	b662      	cpsie	i
		return;
    71ec:	e7c5      	b.n	717a <DMAChannel::begin(bool)+0x2e>
    71ee:	bf00      	nop
    71f0:	200274c6 	.word	0x200274c6
    71f4:	02007480 	.word	0x02007480
    71f8:	400fc000 	.word	0x400fc000
    71fc:	400e8000 	.word	0x400e8000

00007200 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7200:	7903      	ldrb	r3, [r0, #4]
    7202:	2b0f      	cmp	r3, #15
    7204:	d811      	bhi.n	722a <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    7206:	4a09      	ldr	r2, [pc, #36]	; (722c <DMAChannel::release()+0x2c>)
    7208:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    720a:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    720c:	4908      	ldr	r1, [pc, #32]	; (7230 <DMAChannel::release()+0x30>)
    720e:	2201      	movs	r2, #1
    7210:	f890 c004 	ldrb.w	ip, [r0, #4]
    7214:	880b      	ldrh	r3, [r1, #0]
    7216:	fa02 f20c 	lsl.w	r2, r2, ip
    721a:	ea23 0302 	bic.w	r3, r3, r2
    721e:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7220:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    7222:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    7224:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    7226:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    7228:	6003      	str	r3, [r0, #0]
}
    722a:	4770      	bx	lr
    722c:	400e8000 	.word	0x400e8000
    7230:	200274c6 	.word	0x200274c6

00007234 <EventResponder::runFromInterrupt()>:
{
    7234:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7236:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    723a:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    723c:	4c0c      	ldr	r4, [pc, #48]	; (7270 <EventResponder::runFromInterrupt()+0x3c>)
    723e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7240:	b180      	cbz	r0, 7264 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    7242:	4e0c      	ldr	r6, [pc, #48]	; (7274 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    7244:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    7246:	6943      	ldr	r3, [r0, #20]
    7248:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    724a:	b173      	cbz	r3, 726a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    724c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    724e:	b902      	cbnz	r2, 7252 <EventResponder::runFromInterrupt()+0x1e>
    7250:	b662      	cpsie	i
			(*(first->_function))(*first);
    7252:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    7254:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    7256:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7258:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    725c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    725e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7260:	2800      	cmp	r0, #0
    7262:	d1f0      	bne.n	7246 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    7264:	b902      	cbnz	r2, 7268 <EventResponder::runFromInterrupt()+0x34>
    7266:	b662      	cpsie	i
}
    7268:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    726a:	6033      	str	r3, [r6, #0]
    726c:	e7ef      	b.n	724e <EventResponder::runFromInterrupt()+0x1a>
    726e:	bf00      	nop
    7270:	20026884 	.word	0x20026884
    7274:	20026880 	.word	0x20026880

00007278 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7278:	f7ff bfdc 	b.w	7234 <EventResponder::runFromInterrupt()>

0000727c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    727c:	4904      	ldr	r1, [pc, #16]	; (7290 <systick_isr+0x14>)
	systick_millis_count++;
    727e:	4a05      	ldr	r2, [pc, #20]	; (7294 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    7280:	6849      	ldr	r1, [r1, #4]
    7282:	4b05      	ldr	r3, [pc, #20]	; (7298 <systick_isr+0x1c>)
    7284:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    7286:	6813      	ldr	r3, [r2, #0]
    7288:	3301      	adds	r3, #1
    728a:	6013      	str	r3, [r2, #0]
}
    728c:	4770      	bx	lr
    728e:	bf00      	nop
    7290:	e0001000 	.word	0xe0001000
    7294:	20027494 	.word	0x20027494
    7298:	20027490 	.word	0x20027490

0000729c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    729c:	4608      	mov	r0, r1
    729e:	f001 bed9 	b.w	9054 <usb_serial_putchar>
    72a2:	bf00      	nop

000072a4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    72a4:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    72a6:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    72a8:	bf08      	it	eq
    72aa:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    72ac:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    72ae:	b391      	cbz	r1, 7316 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    72b0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    72b4:	e001      	b.n	72ba <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    72b6:	fa5f fe86 	uxtb.w	lr, r6
    72ba:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    72be:	fbb1 f5f2 	udiv	r5, r1, r2
    72c2:	fb02 1415 	mls	r4, r2, r5, r1
    72c6:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    72ca:	2c09      	cmp	r4, #9
    72cc:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    72d0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    72d4:	bf98      	it	ls
    72d6:	fa5f f48c 	uxtbls.w	r4, ip
    72da:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    72de:	bf88      	it	hi
    72e0:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    72e2:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    72e4:	44ec      	add	ip, sp
			n /= base;
    72e6:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    72e8:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    72ec:	d2e3      	bcs.n	72b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    72ee:	b14b      	cbz	r3, 7304 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    72f0:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    72f4:	222d      	movs	r2, #45	; 0x2d
		i--;
    72f6:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    72fa:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    72fe:	446b      	add	r3, sp
    7300:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    7304:	6803      	ldr	r3, [r0, #0]
    7306:	a901      	add	r1, sp, #4
    7308:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    730c:	685b      	ldr	r3, [r3, #4]
    730e:	4471      	add	r1, lr
    7310:	4798      	blx	r3
}
    7312:	b00a      	add	sp, #40	; 0x28
    7314:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    7316:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7318:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    731c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7320:	e7e5      	b.n	72ee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    7322:	bf00      	nop

00007324 <Print::print(long)>:
	if (n < 0) {
    7324:	2900      	cmp	r1, #0
    7326:	db03      	blt.n	7330 <Print::print(long)+0xc>
	uint8_t sign=0;
    7328:	2300      	movs	r3, #0
	if (base == 0) {
    732a:	220a      	movs	r2, #10
    732c:	f7ff bfba 	b.w	72a4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    7330:	4249      	negs	r1, r1
		sign = '-';
    7332:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    7334:	220a      	movs	r2, #10
    7336:	f7ff bfb5 	b.w	72a4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    733a:	bf00      	nop

0000733c <Print::println()>:
{
    733c:	b500      	push	{lr}
	return write(buf, 2);
    733e:	6803      	ldr	r3, [r0, #0]
{
    7340:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    7342:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    7346:	2202      	movs	r2, #2
    7348:	a901      	add	r1, sp, #4
    734a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    734c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    7350:	4798      	blx	r3
}
    7352:	b003      	add	sp, #12
    7354:	f85d fb04 	ldr.w	pc, [sp], #4

00007358 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7358:	4b05      	ldr	r3, [pc, #20]	; (7370 <_write+0x18>)
    735a:	2802      	cmp	r0, #2
    735c:	bf88      	it	hi
    735e:	4603      	movhi	r3, r0
{
    7360:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7362:	681c      	ldr	r4, [r3, #0]
    7364:	4618      	mov	r0, r3
    7366:	6863      	ldr	r3, [r4, #4]
}
    7368:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    736c:	4718      	bx	r3
    736e:	bf00      	nop
    7370:	200086cc 	.word	0x200086cc

00007374 <Print::printf(char const*, ...)>:
{
    7374:	b40e      	push	{r1, r2, r3}
    7376:	b500      	push	{lr}
    7378:	b082      	sub	sp, #8
    737a:	aa03      	add	r2, sp, #12
    737c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    7380:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    7382:	f004 f857 	bl	b434 <vdprintf>
}
    7386:	b002      	add	sp, #8
    7388:	f85d eb04 	ldr.w	lr, [sp], #4
    738c:	b003      	add	sp, #12
    738e:	4770      	bx	lr

00007390 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7390:	b95a      	cbnz	r2, 73aa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    7392:	6803      	ldr	r3, [r0, #0]
    7394:	b2c9      	uxtb	r1, r1
    7396:	4a07      	ldr	r2, [pc, #28]	; (73b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7398:	681b      	ldr	r3, [r3, #0]
    739a:	4293      	cmp	r3, r2
{
    739c:	b500      	push	{lr}
    739e:	d106      	bne.n	73ae <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    73a0:	4608      	mov	r0, r1
}
    73a2:	f85d eb04 	ldr.w	lr, [sp], #4
    73a6:	f001 be55 	b.w	9054 <usb_serial_putchar>
    73aa:	f7ff bf7b 	b.w	72a4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    73ae:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    73b2:	4718      	bx	r3
    73b4:	0000729d 	.word	0x0000729d

000073b8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    73b8:	eeb4 0b40 	vcmp.f64	d0, d0
{
    73bc:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    73be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    73c2:	4605      	mov	r5, r0
    73c4:	ed2d 8b02 	vpush	{d8}
    73c8:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    73ca:	d67c      	bvs.n	74c6 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    73cc:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    73d0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 74f0 <Print::printFloat(double, unsigned char)+0x138>
    73d4:	eeb4 7b46 	vcmp.f64	d7, d6
    73d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73dc:	dc6b      	bgt.n	74b6 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    73de:	ed9f 7b46 	vldr	d7, [pc, #280]	; 74f8 <Print::printFloat(double, unsigned char)+0x140>
    73e2:	eeb4 0bc7 	vcmpe.f64	d0, d7
    73e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73ea:	dc5a      	bgt.n	74a2 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    73ec:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7500 <Print::printFloat(double, unsigned char)+0x148>
    73f0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    73f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73f8:	d453      	bmi.n	74a2 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    73fa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    73fe:	460c      	mov	r4, r1
    7400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7404:	d45b      	bmi.n	74be <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7406:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7408:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    740c:	2c00      	cmp	r4, #0
    740e:	d05e      	beq.n	74ce <Print::printFloat(double, unsigned char)+0x116>
    7410:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7414:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7508 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7418:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    741c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7420:	fa5f f28c 	uxtb.w	r2, ip
    7424:	42a2      	cmp	r2, r4
    7426:	d3f7      	bcc.n	7418 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7428:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    742c:	220a      	movs	r2, #10
    742e:	4628      	mov	r0, r5
    7430:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7434:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7438:	ee17 1a90 	vmov	r1, s15
    743c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7440:	f7ff ff30 	bl	72a4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7444:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7446:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    744a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    744e:	4606      	mov	r6, r0
		buf[0] = '.';
    7450:	bf28      	it	cs
    7452:	240f      	movcs	r4, #15
    7454:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7458:	f10d 0309 	add.w	r3, sp, #9
    745c:	aa02      	add	r2, sp, #8
    745e:	1e61      	subs	r1, r4, #1
    7460:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7464:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7468:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    746c:	edcd 7a01 	vstr	s15, [sp, #4]
    7470:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7474:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7478:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    747a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    747e:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7482:	4291      	cmp	r1, r2
			remainder -= n; 
    7484:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7488:	d1ec      	bne.n	7464 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    748a:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    748c:	3401      	adds	r4, #1
		count += write(buf, count);
    748e:	a902      	add	r1, sp, #8
    7490:	4628      	mov	r0, r5
    7492:	685b      	ldr	r3, [r3, #4]
    7494:	b2e2      	uxtb	r2, r4
    7496:	4798      	blx	r3
	}
	return count;
}
    7498:	4630      	mov	r0, r6
    749a:	b006      	add	sp, #24
    749c:	ecbd 8b02 	vpop	{d8}
    74a0:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    74a2:	682b      	ldr	r3, [r5, #0]
    74a4:	2203      	movs	r2, #3
    74a6:	491a      	ldr	r1, [pc, #104]	; (7510 <Print::printFloat(double, unsigned char)+0x158>)
    74a8:	685b      	ldr	r3, [r3, #4]
    74aa:	b006      	add	sp, #24
    74ac:	ecbd 8b02 	vpop	{d8}
    74b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74b4:	4718      	bx	r3
    74b6:	6803      	ldr	r3, [r0, #0]
    74b8:	2203      	movs	r2, #3
    74ba:	4916      	ldr	r1, [pc, #88]	; (7514 <Print::printFloat(double, unsigned char)+0x15c>)
    74bc:	e7f4      	b.n	74a8 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    74be:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    74c2:	2301      	movs	r3, #1
    74c4:	e7a0      	b.n	7408 <Print::printFloat(double, unsigned char)+0x50>
    74c6:	6803      	ldr	r3, [r0, #0]
    74c8:	2203      	movs	r2, #3
    74ca:	4913      	ldr	r1, [pc, #76]	; (7518 <Print::printFloat(double, unsigned char)+0x160>)
    74cc:	e7ec      	b.n	74a8 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    74ce:	ee30 0b07 	vadd.f64	d0, d0, d7
    74d2:	220a      	movs	r2, #10
    74d4:	4628      	mov	r0, r5
    74d6:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    74da:	ee17 1a90 	vmov	r1, s15
}
    74de:	b006      	add	sp, #24
    74e0:	ecbd 8b02 	vpop	{d8}
    74e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74e8:	f7ff bedc 	b.w	72a4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    74ec:	f3af 8000 	nop.w
    74f0:	ffffffff 	.word	0xffffffff
    74f4:	7fefffff 	.word	0x7fefffff
    74f8:	e0000000 	.word	0xe0000000
    74fc:	41efffff 	.word	0x41efffff
    7500:	e0000000 	.word	0xe0000000
    7504:	c1efffff 	.word	0xc1efffff
    7508:	9999999a 	.word	0x9999999a
    750c:	3fb99999 	.word	0x3fb99999
    7510:	20000820 	.word	0x20000820
    7514:	2000081c 	.word	0x2000081c
    7518:	20000818 	.word	0x20000818

0000751c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    751c:	f001 bd8a 	b.w	9034 <usb_serial_getchar>

00007520 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7520:	f001 bd22 	b.w	8f68 <usb_serial_peekchar>

00007524 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7528:	b392      	cbz	r2, 7590 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    752a:	4617      	mov	r7, r2
    752c:	fab3 f283 	clz	r2, r3
    7530:	0952      	lsrs	r2, r2, #5
    7532:	b36b      	cbz	r3, 7590 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7534:	f1b3 0801 	subs.w	r8, r3, #1
    7538:	d025      	beq.n	7586 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    753a:	eb07 0a08 	add.w	sl, r7, r8
    753e:	4683      	mov	fp, r0
    7540:	4689      	mov	r9, r1
	size_t index = 0;
    7542:	4690      	mov	r8, r2
    7544:	4c17      	ldr	r4, [pc, #92]	; (75a4 <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7546:	4e18      	ldr	r6, [pc, #96]	; (75a8 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7548:	6825      	ldr	r5, [r4, #0]
    754a:	e00b      	b.n	7564 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    754c:	f001 fd72 	bl	9034 <usb_serial_getchar>
    if (c >= 0) return c;
    7550:	2800      	cmp	r0, #0
    7552:	da10      	bge.n	7576 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7554:	f001 fe12 	bl	917c <yield>
    7558:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    755a:	f8db 2008 	ldr.w	r2, [fp, #8]
    755e:	1b5b      	subs	r3, r3, r5
    7560:	4293      	cmp	r3, r2
    7562:	d21a      	bcs.n	759a <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7564:	f8db 3000 	ldr.w	r3, [fp]
    7568:	695b      	ldr	r3, [r3, #20]
    756a:	42b3      	cmp	r3, r6
    756c:	d0ee      	beq.n	754c <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    756e:	4658      	mov	r0, fp
    7570:	4798      	blx	r3
    if (c >= 0) return c;
    7572:	2800      	cmp	r0, #0
    7574:	dbee      	blt.n	7554 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7576:	4548      	cmp	r0, r9
    7578:	d005      	beq.n	7586 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    757a:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    757e:	45ba      	cmp	sl, r7
		index++;
    7580:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7584:	d1e0      	bne.n	7548 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7586:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7588:	4640      	mov	r0, r8
	*buffer = 0;
    758a:	703b      	strb	r3, [r7, #0]
}
    758c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7590:	f04f 0800 	mov.w	r8, #0
}
    7594:	4640      	mov	r0, r8
    7596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    759a:	2301      	movs	r3, #1
    759c:	f88b 300c 	strb.w	r3, [fp, #12]
    75a0:	e7f1      	b.n	7586 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    75a2:	bf00      	nop
    75a4:	20027494 	.word	0x20027494
    75a8:	0000751d 	.word	0x0000751d

000075ac <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    75ac:	49a2      	ldr	r1, [pc, #648]	; (7838 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    75ae:	4ba3      	ldr	r3, [pc, #652]	; (783c <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    75b0:	4288      	cmp	r0, r1
{
    75b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    75b6:	4ca2      	ldr	r4, [pc, #648]	; (7840 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    75b8:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    75ba:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    75bc:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    75c0:	d91b      	bls.n	75fa <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    75c2:	4ba0      	ldr	r3, [pc, #640]	; (7844 <set_arm_clock+0x298>)
    75c4:	4298      	cmp	r0, r3
    75c6:	f240 8102 	bls.w	77ce <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    75ca:	1ac3      	subs	r3, r0, r3
    75cc:	499e      	ldr	r1, [pc, #632]	; (7848 <set_arm_clock+0x29c>)
    75ce:	0a1b      	lsrs	r3, r3, #8
    75d0:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    75d4:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    75d8:	09db      	lsrs	r3, r3, #7
    75da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75e2:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    75e6:	428b      	cmp	r3, r1
    75e8:	bf28      	it	cs
    75ea:	460b      	movcs	r3, r1
    75ec:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    75f0:	4b96      	ldr	r3, [pc, #600]	; (784c <set_arm_clock+0x2a0>)
    75f2:	fba3 3707 	umull	r3, r7, r3, r7
    75f6:	08ff      	lsrs	r7, r7, #3
    75f8:	e004      	b.n	7604 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    75fa:	4f95      	ldr	r7, [pc, #596]	; (7850 <set_arm_clock+0x2a4>)
    75fc:	42b8      	cmp	r0, r7
    75fe:	bf8c      	ite	hi
    7600:	270e      	movhi	r7, #14
    7602:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7604:	498d      	ldr	r1, [pc, #564]	; (783c <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7606:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    760a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    760e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7614:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7618:	d20c      	bcs.n	7634 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    761a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    761e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7622:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7626:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    762a:	680b      	ldr	r3, [r1, #0]
    762c:	2b00      	cmp	r3, #0
    762e:	dafc      	bge.n	762a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7630:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7634:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7638:	d124      	bne.n	7684 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    763a:	4986      	ldr	r1, [pc, #536]	; (7854 <set_arm_clock+0x2a8>)
    763c:	690c      	ldr	r4, [r1, #16]
    763e:	4986      	ldr	r1, [pc, #536]	; (7858 <set_arm_clock+0x2ac>)
    7640:	43a1      	bics	r1, r4
    7642:	f000 80ea 	beq.w	781a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7646:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    764a:	4634      	mov	r4, r6
    764c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7650:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7654:	d004      	beq.n	7660 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7656:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    765a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    765c:	4b77      	ldr	r3, [pc, #476]	; (783c <set_arm_clock+0x290>)
    765e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7660:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7664:	d007      	beq.n	7676 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7666:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    766a:	4974      	ldr	r1, [pc, #464]	; (783c <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    766c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    766e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7670:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7672:	071a      	lsls	r2, r3, #28
    7674:	d4fc      	bmi.n	7670 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7676:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    767a:	4a70      	ldr	r2, [pc, #448]	; (783c <set_arm_clock+0x290>)
    767c:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    767e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7680:	069b      	lsls	r3, r3, #26
    7682:	d4fc      	bmi.n	767e <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7684:	4c75      	ldr	r4, [pc, #468]	; (785c <set_arm_clock+0x2b0>)
    7686:	42a0      	cmp	r0, r4
    7688:	f200 80ce 	bhi.w	7828 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    768c:	f04f 0c01 	mov.w	ip, #1
    7690:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7692:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7694:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7698:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    769c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    76a0:	42a2      	cmp	r2, r4
    76a2:	d818      	bhi.n	76d6 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    76a4:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    76a8:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    76ac:	f040 808d 	bne.w	77ca <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    76b0:	f1bc 0f04 	cmp.w	ip, #4
    76b4:	f200 8091 	bhi.w	77da <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    76b8:	180a      	adds	r2, r1, r0
    76ba:	42a2      	cmp	r2, r4
    76bc:	f200 80a4 	bhi.w	7808 <set_arm_clock+0x25c>
    76c0:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    76c4:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    76c6:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    76ca:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    76ce:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    76d2:	42a2      	cmp	r2, r4
    76d4:	d9e6      	bls.n	76a4 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    76d6:	f10c 31ff 	add.w	r1, ip, #4294967295
    76da:	028c      	lsls	r4, r1, #10
    76dc:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    76e0:	485f      	ldr	r0, [pc, #380]	; (7860 <set_arm_clock+0x2b4>)
    76e2:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    76e4:	4a5f      	ldr	r2, [pc, #380]	; (7864 <set_arm_clock+0x2b8>)
    76e6:	4290      	cmp	r0, r2
    76e8:	d97f      	bls.n	77ea <set_arm_clock+0x23e>
    76ea:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 7890 <set_arm_clock+0x2e4>
    76ee:	226c      	movs	r2, #108	; 0x6c
    76f0:	485d      	ldr	r0, [pc, #372]	; (7868 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    76f2:	4d58      	ldr	r5, [pc, #352]	; (7854 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    76f4:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    76f8:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    76fc:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7700:	f8df c190 	ldr.w	ip, [pc, #400]	; 7894 <set_arm_clock+0x2e8>
    7704:	ea0e 0c0c 	and.w	ip, lr, ip
    7708:	45d4      	cmp	ip, sl
    770a:	d009      	beq.n	7720 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    770c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7710:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7714:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7718:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    771a:	682a      	ldr	r2, [r5, #0]
    771c:	2a00      	cmp	r2, #0
    771e:	dafc      	bge.n	771a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7720:	4a46      	ldr	r2, [pc, #280]	; (783c <set_arm_clock+0x290>)
    7722:	6915      	ldr	r5, [r2, #16]
    7724:	f005 0507 	and.w	r5, r5, #7
    7728:	429d      	cmp	r5, r3
    772a:	d003      	beq.n	7734 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    772c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    772e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7730:	03dd      	lsls	r5, r3, #15
    7732:	d4fc      	bmi.n	772e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7734:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7738:	d009      	beq.n	774e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    773a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    773e:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7742:	4a3e      	ldr	r2, [pc, #248]	; (783c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7744:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7746:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7748:	6c93      	ldr	r3, [r2, #72]	; 0x48
    774a:	0799      	lsls	r1, r3, #30
    774c:	d4fc      	bmi.n	7748 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    774e:	4947      	ldr	r1, [pc, #284]	; (786c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7750:	4a47      	ldr	r2, [pc, #284]	; (7870 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7752:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7754:	4291      	cmp	r1, r2
    7756:	d83c      	bhi.n	77d2 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7758:	4b46      	ldr	r3, [pc, #280]	; (7874 <set_arm_clock+0x2c8>)
    775a:	09c9      	lsrs	r1, r1, #7
    775c:	fba3 3101 	umull	r3, r1, r3, r1
    7760:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7762:	1e4b      	subs	r3, r1, #1
    7764:	021b      	lsls	r3, r3, #8
    7766:	ea86 0203 	eor.w	r2, r6, r3
    776a:	f412 7f40 	tst.w	r2, #768	; 0x300
    776e:	d006      	beq.n	777e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7770:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7774:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7778:	4a30      	ldr	r2, [pc, #192]	; (783c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    777a:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    777c:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    777e:	4a2f      	ldr	r2, [pc, #188]	; (783c <set_arm_clock+0x290>)
    7780:	6953      	ldr	r3, [r2, #20]
    7782:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7786:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7788:	6c93      	ldr	r3, [r2, #72]	; 0x48
    778a:	069b      	lsls	r3, r3, #26
    778c:	d4fc      	bmi.n	7788 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    778e:	4b3a      	ldr	r3, [pc, #232]	; (7878 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7790:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7792:	fba3 2300 	umull	r2, r3, r3, r0
    7796:	f04f 32ff 	mov.w	r2, #4294967295
    779a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    779e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    77a2:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    77a6:	4a35      	ldr	r2, [pc, #212]	; (787c <set_arm_clock+0x2d0>)
    77a8:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    77aa:	4a35      	ldr	r2, [pc, #212]	; (7880 <set_arm_clock+0x2d4>)
    77ac:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    77ae:	4a35      	ldr	r2, [pc, #212]	; (7884 <set_arm_clock+0x2d8>)
    77b0:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    77b2:	d208      	bcs.n	77c6 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    77b4:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    77b8:	4a21      	ldr	r2, [pc, #132]	; (7840 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    77ba:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    77be:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    77c0:	6813      	ldr	r3, [r2, #0]
    77c2:	2b00      	cmp	r3, #0
    77c4:	dafc      	bge.n	77c0 <set_arm_clock+0x214>
	}

	return frequency;
}
    77c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77ca:	4673      	mov	r3, lr
    77cc:	e762      	b.n	7694 <set_arm_clock+0xe8>
    77ce:	2712      	movs	r7, #18
    77d0:	e718      	b.n	7604 <set_arm_clock+0x58>
    77d2:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    77d6:	2104      	movs	r1, #4
    77d8:	e7c5      	b.n	7766 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77da:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77de:	4820      	ldr	r0, [pc, #128]	; (7860 <set_arm_clock+0x2b4>)
    77e0:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77e2:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77e4:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    77e6:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77ea:	4a27      	ldr	r2, [pc, #156]	; (7888 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    77ec:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7898 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    77f0:	fba2 2000 	umull	r2, r0, r2, r0
    77f4:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    77f6:	4825      	ldr	r0, [pc, #148]	; (788c <set_arm_clock+0x2e0>)
    77f8:	2a36      	cmp	r2, #54	; 0x36
    77fa:	bf38      	it	cc
    77fc:	2236      	movcc	r2, #54	; 0x36
    77fe:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7802:	ea42 0a0a 	orr.w	sl, r2, sl
    7806:	e774      	b.n	76f2 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7808:	ea4f 248c 	mov.w	r4, ip, lsl #10
    780c:	2300      	movs	r3, #0
    780e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    7812:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    7816:	46ac      	mov	ip, r5
    7818:	e762      	b.n	76e0 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    781a:	461d      	mov	r5, r3
    781c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    7820:	4611      	mov	r1, r2
    7822:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    7826:	e713      	b.n	7650 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    7828:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    782a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    782e:	4602      	mov	r2, r0
    7830:	4631      	mov	r1, r6
    7832:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    7834:	46e6      	mov	lr, ip
    7836:	e753      	b.n	76e0 <set_arm_clock+0x134>
    7838:	1f78a400 	.word	0x1f78a400
    783c:	400fc000 	.word	0x400fc000
    7840:	40080000 	.word	0x40080000
    7844:	23c34600 	.word	0x23c34600
    7848:	004cb223 	.word	0x004cb223
    784c:	51eb851f 	.word	0x51eb851f
    7850:	016e3600 	.word	0x016e3600
    7854:	400d8000 	.word	0x400d8000
    7858:	80003040 	.word	0x80003040
    785c:	269fb1ff 	.word	0x269fb1ff
    7860:	005b8d80 	.word	0x005b8d80
    7864:	4df67eff 	.word	0x4df67eff
    7868:	4d3f6400 	.word	0x4d3f6400
    786c:	08f0d17f 	.word	0x08f0d17f
    7870:	2cb4177f 	.word	0x2cb4177f
    7874:	00e5109f 	.word	0x00e5109f
    7878:	431bde83 	.word	0x431bde83
    787c:	200086c8 	.word	0x200086c8
    7880:	200086c4 	.word	0x200086c4
    7884:	20026fc0 	.word	0x20026fc0
    7888:	165e9f81 	.word	0x165e9f81
    788c:	00b71b00 	.word	0x00b71b00
    7890:	8000206c 	.word	0x8000206c
    7894:	8001307f 	.word	0x8001307f
    7898:	80002000 	.word	0x80002000

0000789c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    789c:	b900      	cbnz	r0, 78a0 <delay+0x4>
    789e:	4770      	bx	lr
{
    78a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    78a4:	2101      	movs	r1, #1
    78a6:	4681      	mov	r9, r0
    78a8:	4c21      	ldr	r4, [pc, #132]	; (7930 <delay+0x94>)
    78aa:	4d22      	ldr	r5, [pc, #136]	; (7934 <delay+0x98>)
    78ac:	4e22      	ldr	r6, [pc, #136]	; (7938 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    78ae:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    78b2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    78b4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    78b6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    78ba:	2b00      	cmp	r3, #0
    78bc:	d1f7      	bne.n	78ae <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    78be:	491f      	ldr	r1, [pc, #124]	; (793c <delay+0xa0>)
    78c0:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    78c2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78c6:	f8df a078 	ldr.w	sl, [pc, #120]	; 7940 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    78ca:	1a1b      	subs	r3, r3, r0
    78cc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    78ce:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78d2:	f8da 2000 	ldr.w	r2, [sl]
    78d6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    78da:	455a      	cmp	r2, fp
    78dc:	bf94      	ite	ls
    78de:	4490      	addls	r8, r2
    78e0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    78e2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    78e6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    78e8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    78ea:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    78ee:	2b00      	cmp	r3, #0
    78f0:	d1f7      	bne.n	78e2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    78f2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78f4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    78f8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    78fa:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    78fe:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    7902:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    7906:	bf94      	ite	ls
    7908:	4462      	addls	r2, ip
    790a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    790e:	eba2 0208 	sub.w	r2, r2, r8
    7912:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    7916:	d306      	bcc.n	7926 <delay+0x8a>
			if (--msec == 0) return;
    7918:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    791c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    7920:	d1df      	bne.n	78e2 <delay+0x46>
}
    7922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    7926:	f001 fc29 	bl	917c <yield>
		while ((micros() - start) >= 1000) {
    792a:	4904      	ldr	r1, [pc, #16]	; (793c <delay+0xa0>)
    792c:	e7d9      	b.n	78e2 <delay+0x46>
    792e:	bf00      	nop
    7930:	20027498 	.word	0x20027498
    7934:	20027494 	.word	0x20027494
    7938:	20027490 	.word	0x20027490
    793c:	e0001000 	.word	0xe0001000
    7940:	20026fc0 	.word	0x20026fc0

00007944 <micros>:
{
    7944:	b430      	push	{r4, r5}
    7946:	4b0f      	ldr	r3, [pc, #60]	; (7984 <micros+0x40>)
    7948:	f04f 0c01 	mov.w	ip, #1
    794c:	4d0e      	ldr	r5, [pc, #56]	; (7988 <micros+0x44>)
    794e:	4c0f      	ldr	r4, [pc, #60]	; (798c <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7950:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    7954:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7956:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7958:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    795c:	2a00      	cmp	r2, #0
    795e:	d1f7      	bne.n	7950 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7960:	4b0b      	ldr	r3, [pc, #44]	; (7990 <micros+0x4c>)
    7962:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7964:	4a0b      	ldr	r2, [pc, #44]	; (7994 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    7966:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    7968:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    796c:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    796e:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7972:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    7976:	bc30      	pop	{r4, r5}
    7978:	428a      	cmp	r2, r1
    797a:	bf94      	ite	ls
    797c:	1880      	addls	r0, r0, r2
    797e:	1840      	addhi	r0, r0, r1
    7980:	4770      	bx	lr
    7982:	bf00      	nop
    7984:	20027498 	.word	0x20027498
    7988:	20027494 	.word	0x20027494
    798c:	20027490 	.word	0x20027490
    7990:	e0001000 	.word	0xe0001000
    7994:	20026fc0 	.word	0x20026fc0

00007998 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    7998:	2836      	cmp	r0, #54	; 0x36
    799a:	d816      	bhi.n	79ca <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    799c:	0102      	lsls	r2, r0, #4
    799e:	4b10      	ldr	r3, [pc, #64]	; (79e0 <digitalWrite+0x48>)
    79a0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    79a4:	589b      	ldr	r3, [r3, r2]
{
    79a6:	b410      	push	{r4}
	mask = p->mask;
    79a8:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    79aa:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    79ac:	4214      	tst	r4, r2
    79ae:	d005      	beq.n	79bc <digitalWrite+0x24>
		if (val) {
    79b0:	b961      	cbnz	r1, 79cc <digitalWrite+0x34>
		}
	}
}
    79b2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    79b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    79ba:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    79bc:	6883      	ldr	r3, [r0, #8]
		if (val) {
    79be:	b151      	cbz	r1, 79d6 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    79c0:	4a08      	ldr	r2, [pc, #32]	; (79e4 <digitalWrite+0x4c>)
}
    79c2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    79c6:	601a      	str	r2, [r3, #0]
}
    79c8:	4770      	bx	lr
    79ca:	4770      	bx	lr
    79cc:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    79d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    79d4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    79d6:	4a04      	ldr	r2, [pc, #16]	; (79e8 <digitalWrite+0x50>)
}
    79d8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    79dc:	601a      	str	r2, [r3, #0]
}
    79de:	4770      	bx	lr
    79e0:	200077b8 	.word	0x200077b8
    79e4:	0001f038 	.word	0x0001f038
    79e8:	00013038 	.word	0x00013038

000079ec <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    79ec:	2836      	cmp	r0, #54	; 0x36
    79ee:	d829      	bhi.n	7a44 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    79f0:	4b16      	ldr	r3, [pc, #88]	; (7a4c <pinMode+0x60>)
    79f2:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    79f4:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    79f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    79fa:	589a      	ldr	r2, [r3, r2]
{
    79fc:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    79fe:	6853      	ldr	r3, [r2, #4]
    7a00:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    7a02:	d00e      	beq.n	7a22 <pinMode+0x36>
    7a04:	2904      	cmp	r1, #4
    7a06:	d00c      	beq.n	7a22 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    7a08:	ea23 0304 	bic.w	r3, r3, r4
    7a0c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7a0e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    7a10:	b1a9      	cbz	r1, 7a3e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    7a12:	2902      	cmp	r1, #2
    7a14:	d017      	beq.n	7a46 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    7a16:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    7a18:	bf0c      	ite	eq
    7a1a:	4a0d      	ldreq	r2, [pc, #52]	; (7a50 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    7a1c:	4a0d      	ldrne	r2, [pc, #52]	; (7a54 <pinMode+0x68>)
    7a1e:	601a      	str	r2, [r3, #0]
    7a20:	e007      	b.n	7a32 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7a22:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    7a24:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    7a26:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7a28:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    7a2a:	d008      	beq.n	7a3e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    7a2c:	f640 0238 	movw	r2, #2104	; 0x838
    7a30:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    7a32:	6843      	ldr	r3, [r0, #4]
    7a34:	2215      	movs	r2, #21
}
    7a36:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    7a3a:	601a      	str	r2, [r3, #0]
}
    7a3c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    7a3e:	2238      	movs	r2, #56	; 0x38
    7a40:	601a      	str	r2, [r3, #0]
    7a42:	e7f6      	b.n	7a32 <pinMode+0x46>
    7a44:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    7a46:	4a04      	ldr	r2, [pc, #16]	; (7a58 <pinMode+0x6c>)
    7a48:	601a      	str	r2, [r3, #0]
    7a4a:	e7f2      	b.n	7a32 <pinMode+0x46>
    7a4c:	200077b8 	.word	0x200077b8
    7a50:	00013038 	.word	0x00013038
    7a54:	00010038 	.word	0x00010038
    7a58:	0001f038 	.word	0x0001f038

00007a5c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    7a5c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    7a5e:	f7f8 fc67 	bl	330 <setup>
	while (1) {
		loop();
    7a62:	f7f8 fb01 	bl	68 <loop>
		yield();
    7a66:	f001 fb89 	bl	917c <yield>
	while (1) {
    7a6a:	e7fa      	b.n	7a62 <main+0x6>

00007a6c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7a6c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7a6e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7a72:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7a76:	d16d      	bne.n	7b54 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7a78:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    7a7a:	d341      	bcc.n	7b00 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7a7c:	f851 3b04 	ldr.w	r3, [r1], #4
    7a80:	f840 3b04 	str.w	r3, [r0], #4
    7a84:	f851 3b04 	ldr.w	r3, [r1], #4
    7a88:	f840 3b04 	str.w	r3, [r0], #4
    7a8c:	f851 3b04 	ldr.w	r3, [r1], #4
    7a90:	f840 3b04 	str.w	r3, [r0], #4
    7a94:	f851 3b04 	ldr.w	r3, [r1], #4
    7a98:	f840 3b04 	str.w	r3, [r0], #4
    7a9c:	f851 3b04 	ldr.w	r3, [r1], #4
    7aa0:	f840 3b04 	str.w	r3, [r0], #4
    7aa4:	f851 3b04 	ldr.w	r3, [r1], #4
    7aa8:	f840 3b04 	str.w	r3, [r0], #4
    7aac:	f851 3b04 	ldr.w	r3, [r1], #4
    7ab0:	f840 3b04 	str.w	r3, [r0], #4
    7ab4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ab8:	f840 3b04 	str.w	r3, [r0], #4
    7abc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ac0:	f840 3b04 	str.w	r3, [r0], #4
    7ac4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ac8:	f840 3b04 	str.w	r3, [r0], #4
    7acc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ad0:	f840 3b04 	str.w	r3, [r0], #4
    7ad4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ad8:	f840 3b04 	str.w	r3, [r0], #4
    7adc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ae0:	f840 3b04 	str.w	r3, [r0], #4
    7ae4:	f851 3b04 	ldr.w	r3, [r1], #4
    7ae8:	f840 3b04 	str.w	r3, [r0], #4
    7aec:	f851 3b04 	ldr.w	r3, [r1], #4
    7af0:	f840 3b04 	str.w	r3, [r0], #4
    7af4:	f851 3b04 	ldr.w	r3, [r1], #4
    7af8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7afc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    7afe:	d2bd      	bcs.n	7a7c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    7b00:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    7b02:	d311      	bcc.n	7b28 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7b04:	f851 3b04 	ldr.w	r3, [r1], #4
    7b08:	f840 3b04 	str.w	r3, [r0], #4
    7b0c:	f851 3b04 	ldr.w	r3, [r1], #4
    7b10:	f840 3b04 	str.w	r3, [r0], #4
    7b14:	f851 3b04 	ldr.w	r3, [r1], #4
    7b18:	f840 3b04 	str.w	r3, [r0], #4
    7b1c:	f851 3b04 	ldr.w	r3, [r1], #4
    7b20:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    7b24:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    7b26:	d2ed      	bcs.n	7b04 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    7b28:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    7b2a:	d305      	bcc.n	7b38 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    7b2c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    7b30:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    7b34:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    7b36:	d2f9      	bcs.n	7b2c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    7b38:	3204      	adds	r2, #4
	beq	.Ldone
    7b3a:	d008      	beq.n	7b4e <memcpy+0xe2>

	lsls	r2, r2, #31
    7b3c:	07d2      	lsls	r2, r2, #31
	itt ne
    7b3e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    7b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7b44:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    7b48:	d301      	bcc.n	7b4e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    7b4a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    7b4c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7b4e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7b50:	4770      	bx	lr
    7b52:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    7b54:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    7b56:	d313      	bcc.n	7b80 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    7b58:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    7b5a:	d08d      	beq.n	7a78 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    7b5c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    7b60:	d08a      	beq.n	7a78 <memcpy+0xc>

	rsb	r3, #4
    7b62:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    7b66:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    7b68:	07db      	lsls	r3, r3, #31
	itt ne
    7b6a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    7b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7b70:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    7b74:	d380      	bcc.n	7a78 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    7b76:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    7b7a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    7b7e:	e77b      	b.n	7a78 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    7b80:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    7b82:	d3d9      	bcc.n	7b38 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    7b84:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    7b86:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    7b8a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    7b8e:	d2f9      	bcs.n	7b84 <memcpy+0x118>

	ldrb	r3, [r1]
    7b90:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    7b92:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    7b94:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    7b96:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    7b98:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    7b9a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7b9c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7b9e:	4770      	bx	lr

00007ba0 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    7ba0:	f001 be04 	b.w	97ac <free>

00007ba4 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    7ba4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    7ba8:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    7baa:	4666      	mov	r6, ip
	int i=0, j;
    7bac:	2400      	movs	r4, #0
    7bae:	e000      	b.n	7bb2 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    7bb0:	3401      	adds	r4, #1
		digit = val % radix;
    7bb2:	fbb0 f5f2 	udiv	r5, r0, r2
    7bb6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7bba:	2b09      	cmp	r3, #9
    7bbc:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    7bc0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7bc4:	fa5f fe8e 	uxtb.w	lr, lr
    7bc8:	bf98      	it	ls
    7bca:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    7bce:	4290      	cmp	r0, r2
		val /= radix;
    7bd0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7bd2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    7bd6:	d2eb      	bcs.n	7bb0 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    7bd8:	1c63      	adds	r3, r4, #1
    7bda:	2200      	movs	r2, #0
    7bdc:	18c8      	adds	r0, r1, r3
    7bde:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    7be0:	b17c      	cbz	r4, 7c02 <ultoa+0x5e>
		t = buf[j];
    7be2:	4662      	mov	r2, ip
    7be4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    7be8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    7bec:	eba1 030c 	sub.w	r3, r1, ip
    7bf0:	3202      	adds	r2, #2
		buf[j] = buf[i];
    7bf2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    7bf6:	3b01      	subs	r3, #1
    7bf8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    7bfa:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    7bfc:	4423      	add	r3, r4
    7bfe:	429a      	cmp	r2, r3
    7c00:	dbef      	blt.n	7be2 <ultoa+0x3e>
	}
	return buf;
}
    7c02:	4608      	mov	r0, r1
    7c04:	bd70      	pop	{r4, r5, r6, pc}
    7c06:	bf00      	nop

00007c08 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    7c08:	4a07      	ldr	r2, [pc, #28]	; (7c28 <rtc_get+0x20>)
    7c0a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    7c0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    7c0e:	4619      	mov	r1, r3
    7c10:	4684      	mov	ip, r0
    7c12:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    7c14:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    7c16:	4299      	cmp	r1, r3
    7c18:	d1f9      	bne.n	7c0e <rtc_get+0x6>
    7c1a:	4584      	cmp	ip, r0
    7c1c:	d1f7      	bne.n	7c0e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    7c1e:	0bdb      	lsrs	r3, r3, #15
}
    7c20:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    7c24:	4770      	bx	lr
    7c26:	bf00      	nop
    7c28:	400d4000 	.word	0x400d4000

00007c2c <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    7c2c:	4910      	ldr	r1, [pc, #64]	; (7c70 <rtc_set+0x44>)
    7c2e:	688b      	ldr	r3, [r1, #8]
    7c30:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    7c34:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    7c36:	688b      	ldr	r3, [r1, #8]
    7c38:	07db      	lsls	r3, r3, #31
    7c3a:	d4fc      	bmi.n	7c36 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    7c3c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    7c3e:	4a0c      	ldr	r2, [pc, #48]	; (7c70 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    7c40:	f023 0301 	bic.w	r3, r3, #1
    7c44:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    7c46:	6b93      	ldr	r3, [r2, #56]	; 0x38
    7c48:	07d9      	lsls	r1, r3, #31
    7c4a:	d4fc      	bmi.n	7c46 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    7c4c:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    7c4e:	4908      	ldr	r1, [pc, #32]	; (7c70 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    7c50:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    7c52:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    7c54:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    7c56:	6b93      	ldr	r3, [r2, #56]	; 0x38
    7c58:	f043 0301 	orr.w	r3, r3, #1
    7c5c:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    7c5e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7c60:	07db      	lsls	r3, r3, #31
    7c62:	d5fc      	bpl.n	7c5e <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    7c64:	688b      	ldr	r3, [r1, #8]
    7c66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    7c6a:	608b      	str	r3, [r1, #8]
}
    7c6c:	4770      	bx	lr
    7c6e:	bf00      	nop
    7c70:	400d4000 	.word	0x400d4000

00007c74 <unused_interrupt_vector>:
	__disable_irq();
    7c74:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    7c76:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    7c7a:	4c52      	ldr	r4, [pc, #328]	; (7dc4 <unused_interrupt_vector+0x150>)
    7c7c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    7c80:	f01e 0f04 	tst.w	lr, #4
    7c84:	bf0c      	ite	eq
    7c86:	f3ef 8208 	mrseq	r2, MSP
    7c8a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    7c8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    7c92:	4e4d      	ldr	r6, [pc, #308]	; (7dc8 <unused_interrupt_vector+0x154>)
	while (p < end) {
    7c94:	4d4d      	ldr	r5, [pc, #308]	; (7dcc <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    7c96:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    7c9a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    7c9e:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    7ca2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    7ca6:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    7caa:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    7cae:	6993      	ldr	r3, [r2, #24]
    7cb0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    7cb4:	69d3      	ldr	r3, [r2, #28]
    7cb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    7cba:	f000 f8d1 	bl	7e60 <tempmonGetTemp>
    7cbe:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    7cc2:	f7ff ffa1 	bl	7c08 <rtc_get>
	info->len = sizeof(*info) / 4;
    7cc6:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    7cc8:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    7ccc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    7cd0:	460b      	mov	r3, r1
    7cd2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7cd6:	493e      	ldr	r1, [pc, #248]	; (7dd0 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    7cd8:	1d30      	adds	r0, r6, #4
    7cda:	405a      	eors	r2, r3
    7cdc:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7cde:	f002 0301 	and.w	r3, r2, #1
    7ce2:	3c01      	subs	r4, #1
    7ce4:	fb01 f303 	mul.w	r3, r1, r3
    7ce8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    7cec:	d1f7      	bne.n	7cde <unused_interrupt_vector+0x6a>
	while (p < end) {
    7cee:	42a8      	cmp	r0, r5
    7cf0:	d002      	beq.n	7cf8 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    7cf2:	6873      	ldr	r3, [r6, #4]
    7cf4:	4606      	mov	r6, r0
    7cf6:	e7ef      	b.n	7cd8 <unused_interrupt_vector+0x64>
	info->crc = crc;
    7cf8:	4b32      	ldr	r3, [pc, #200]	; (7dc4 <unused_interrupt_vector+0x150>)
    7cfa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    7cfe:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7d02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7d06:	4930      	ldr	r1, [pc, #192]	; (7dc8 <unused_interrupt_vector+0x154>)
    7d08:	4a32      	ldr	r2, [pc, #200]	; (7dd4 <unused_interrupt_vector+0x160>)
    7d0a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    7d0e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    7d12:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7d16:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7d1a:	4a2f      	ldr	r2, [pc, #188]	; (7dd8 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    7d1c:	2502      	movs	r5, #2
    7d1e:	482f      	ldr	r0, [pc, #188]	; (7ddc <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7d20:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7d22:	492f      	ldr	r1, [pc, #188]	; (7de0 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7d24:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    7d28:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    7d2a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    7d2c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7d2e:	482d      	ldr	r0, [pc, #180]	; (7de4 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    7d30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7d38:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7d3a:	680b      	ldr	r3, [r1, #0]
    7d3c:	4283      	cmp	r3, r0
    7d3e:	d83d      	bhi.n	7dbc <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    7d40:	4d26      	ldr	r5, [pc, #152]	; (7ddc <unused_interrupt_vector+0x168>)
    7d42:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    7d44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7d48:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    7d4c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7d4e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    7d50:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    7d54:	4924      	ldr	r1, [pc, #144]	; (7de8 <unused_interrupt_vector+0x174>)
    7d56:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7d5a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    7d5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    7d62:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    7d66:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    7d6a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    7d6e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    7d72:	e001      	b.n	7d78 <unused_interrupt_vector+0x104>
		usb_isr();
    7d74:	f000 f9ca 	bl	810c <usb_isr>
		if (PIT_TFLG0) {
    7d78:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	d0f9      	beq.n	7d74 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    7d80:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    7d82:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    7d86:	2c4f      	cmp	r4, #79	; 0x4f
    7d88:	d9f4      	bls.n	7d74 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7d8a:	4b18      	ldr	r3, [pc, #96]	; (7dec <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    7d8c:	2002      	movs	r0, #2
    7d8e:	4918      	ldr	r1, [pc, #96]	; (7df0 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7d90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    7d94:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7d98:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7d9a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7d9e:	b93b      	cbnz	r3, 7db0 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    7da0:	4814      	ldr	r0, [pc, #80]	; (7df4 <unused_interrupt_vector+0x180>)
    7da2:	4915      	ldr	r1, [pc, #84]	; (7df8 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7da4:	4a0d      	ldr	r2, [pc, #52]	; (7ddc <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    7da6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7da8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    7dac:	2b00      	cmp	r3, #0
    7dae:	d0fa      	beq.n	7da6 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    7db0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7db4:	4a11      	ldr	r2, [pc, #68]	; (7dfc <unused_interrupt_vector+0x188>)
    7db6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    7dba:	e7fe      	b.n	7dba <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7dbc:	f7ff fbf6 	bl	75ac <set_arm_clock>
    7dc0:	e7be      	b.n	7d40 <unused_interrupt_vector+0xcc>
    7dc2:	bf00      	nop
    7dc4:	2027ff00 	.word	0x2027ff00
    7dc8:	2027ff80 	.word	0x2027ff80
    7dcc:	2027ffa8 	.word	0x2027ffa8
    7dd0:	edb88320 	.word	0xedb88320
    7dd4:	2027ffa0 	.word	0x2027ffa0
    7dd8:	400fc000 	.word	0x400fc000
    7ddc:	40084000 	.word	0x40084000
    7de0:	200086c8 	.word	0x200086c8
    7de4:	0bcd3d80 	.word	0x0bcd3d80
    7de8:	00249f00 	.word	0x00249f00
    7dec:	400d9000 	.word	0x400d9000
    7df0:	402e0000 	.word	0x402e0000
    7df4:	400f8000 	.word	0x400f8000
    7df8:	0bad00f1 	.word	0x0bad00f1
    7dfc:	05fa0004 	.word	0x05fa0004

00007e00 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    7e00:	490a      	ldr	r1, [pc, #40]	; (7e2c <_sbrk+0x2c>)
    7e02:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    7e04:	b138      	cbz	r0, 7e16 <_sbrk+0x16>
{
    7e06:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    7e08:	1813      	adds	r3, r2, r0
    7e0a:	4809      	ldr	r0, [pc, #36]	; (7e30 <_sbrk+0x30>)
    7e0c:	4283      	cmp	r3, r0
    7e0e:	d804      	bhi.n	7e1a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    7e10:	4610      	mov	r0, r2
                __brkval = prev + incr;
    7e12:	600b      	str	r3, [r1, #0]
}
    7e14:	bd08      	pop	{r3, pc}
    7e16:	4610      	mov	r0, r2
    7e18:	4770      	bx	lr
                        errno = ENOMEM;
    7e1a:	f003 fd2d 	bl	b878 <__errno>
    7e1e:	230c      	movs	r3, #12
                        return (void *)-1;
    7e20:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    7e24:	6003      	str	r3, [r0, #0]
}
    7e26:	4610      	mov	r0, r2
    7e28:	bd08      	pop	{r3, pc}
    7e2a:	bf00      	nop
    7e2c:	200086e8 	.word	0x200086e8
    7e30:	20280000 	.word	0x20280000

00007e34 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    7e34:	2000      	movs	r0, #0
    7e36:	4770      	bx	lr

00007e38 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    7e38:	f04f 30ff 	mov.w	r0, #4294967295
    7e3c:	4770      	bx	lr
    7e3e:	bf00      	nop

00007e40 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    7e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    7e44:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    7e46:	604b      	str	r3, [r1, #4]
}
    7e48:	4770      	bx	lr
    7e4a:	bf00      	nop

00007e4c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    7e4c:	2001      	movs	r0, #1
    7e4e:	4770      	bx	lr

00007e50 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    7e50:	f04f 30ff 	mov.w	r0, #4294967295
    7e54:	4770      	bx	lr
    7e56:	bf00      	nop

00007e58 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    7e58:	bf30      	wfi
    7e5a:	e7fd      	b.n	7e58 <abort>

00007e5c <Panic_Temp_isr>:
  unused_interrupt_vector();
    7e5c:	f7ff bf0a 	b.w	7c74 <unused_interrupt_vector>

00007e60 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    7e60:	4a12      	ldr	r2, [pc, #72]	; (7eac <tempmonGetTemp+0x4c>)
    7e62:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    7e66:	075b      	lsls	r3, r3, #29
    7e68:	d5fb      	bpl.n	7e62 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7e6a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7e6e:	4810      	ldr	r0, [pc, #64]	; (7eb0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7e70:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7e74:	490f      	ldr	r1, [pc, #60]	; (7eb4 <tempmonGetTemp+0x54>)
    7e76:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7e7a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7e7e:	ed91 6a00 	vldr	s12, [r1]
    7e82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    7e86:	4a0c      	ldr	r2, [pc, #48]	; (7eb8 <tempmonGetTemp+0x58>)
    7e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7e8c:	4b0b      	ldr	r3, [pc, #44]	; (7ebc <tempmonGetTemp+0x5c>)
    7e8e:	edd2 6a00 	vldr	s13, [r2]
    7e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7e96:	ed93 7a00 	vldr	s14, [r3]
    7e9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    7e9e:	ee67 7a86 	vmul.f32	s15, s15, s12
    7ea2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    7ea6:	ee37 0a40 	vsub.f32	s0, s14, s0
    7eaa:	4770      	bx	lr
    7eac:	400d8100 	.word	0x400d8100
    7eb0:	20026fb0 	.word	0x20026fb0
    7eb4:	20026fb8 	.word	0x20026fb8
    7eb8:	20026fbc 	.word	0x20026fbc
    7ebc:	20026fb4 	.word	0x20026fb4

00007ec0 <endpoint0_receive>:
{
    7ec0:	b430      	push	{r4, r5}
	if (len > 0) {
    7ec2:	2900      	cmp	r1, #0
    7ec4:	d131      	bne.n	7f2a <endpoint0_receive+0x6a>
    7ec6:	4c2b      	ldr	r4, [pc, #172]	; (7f74 <endpoint0_receive+0xb4>)
	endpoint0_transfer_ack.next = 1;
    7ec8:	4b2b      	ldr	r3, [pc, #172]	; (7f78 <endpoint0_receive+0xb8>)
    7eca:	2101      	movs	r1, #1
    7ecc:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7ece:	b1da      	cbz	r2, 7f08 <endpoint0_receive+0x48>
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7ed0:	492a      	ldr	r1, [pc, #168]	; (7f7c <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    7ed2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7ed4:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7ed8:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    7edc:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7ede:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    7ee0:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7ee4:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7ee8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    7eec:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    7ef0:	4313      	orrs	r3, r2
    7ef2:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7ef6:	4b22      	ldr	r3, [pc, #136]	; (7f80 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    7ef8:	4920      	ldr	r1, [pc, #128]	; (7f7c <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7efa:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    7efc:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    7f00:	2b00      	cmp	r3, #0
    7f02:	d1fb      	bne.n	7efc <endpoint0_receive+0x3c>
}
    7f04:	bc30      	pop	{r4, r5}
    7f06:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7f08:	491c      	ldr	r1, [pc, #112]	; (7f7c <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7f0a:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7f0c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    7f10:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7f12:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    7f14:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7f18:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7f1c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    7f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7f24:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7f28:	e7e5      	b.n	7ef6 <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7f2a:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    7f2c:	4b15      	ldr	r3, [pc, #84]	; (7f84 <endpoint0_receive+0xc4>)
    7f2e:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    7f30:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7f32:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    7f36:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    7f38:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7f3a:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7f3c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    7f40:	4c0c      	ldr	r4, [pc, #48]	; (7f74 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7f42:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7f44:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    7f48:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7f4a:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7f4c:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7f50:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    7f54:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7f56:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    7f58:	4908      	ldr	r1, [pc, #32]	; (7f7c <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7f5a:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    7f5c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    7f60:	f043 0301 	orr.w	r3, r3, #1
    7f64:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    7f68:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    7f6c:	2b00      	cmp	r3, #0
    7f6e:	d1fb      	bne.n	7f68 <endpoint0_receive+0xa8>
    7f70:	e7aa      	b.n	7ec8 <endpoint0_receive+0x8>
    7f72:	bf00      	nop
    7f74:	20000000 	.word	0x20000000
    7f78:	200092c0 	.word	0x200092c0
    7f7c:	402e0000 	.word	0x402e0000
    7f80:	20026e38 	.word	0x20026e38
    7f84:	200092e0 	.word	0x200092e0

00007f88 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    7f88:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    7f8a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    7f8c:	b11b      	cbz	r3, 7f96 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    7f8e:	6853      	ldr	r3, [r2, #4]
    7f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7f94:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    7f96:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    7f98:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    7f9a:	b33c      	cbz	r4, 7fec <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    7f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    7f9e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    7fa0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    7fa4:	420c      	tst	r4, r1
    7fa6:	d11d      	bne.n	7fe4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    7fa8:	4e18      	ldr	r6, [pc, #96]	; (800c <schedule_transfer+0x84>)
    7faa:	6877      	ldr	r7, [r6, #4]
    7fac:	e004      	b.n	7fb8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    7fae:	6874      	ldr	r4, [r6, #4]
    7fb0:	1be4      	subs	r4, r4, r7
    7fb2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    7fb6:	d20b      	bcs.n	7fd0 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    7fb8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    7fbc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    7fc0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    7fc4:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    7fc8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    7fcc:	0464      	lsls	r4, r4, #17
    7fce:	d5ee      	bpl.n	7fae <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    7fd0:	400d      	ands	r5, r1
    7fd2:	d107      	bne.n	7fe4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    7fd4:	4c0c      	ldr	r4, [pc, #48]	; (8008 <schedule_transfer+0x80>)
		endpoint->status = 0;
    7fd6:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    7fda:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7fde:	430b      	orrs	r3, r1
    7fe0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    7fe4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7fe6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    7fe8:	bcf0      	pop	{r4, r5, r6, r7}
    7fea:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    7fec:	4d06      	ldr	r5, [pc, #24]	; (8008 <schedule_transfer+0x80>)
	endpoint->status = 0;
    7fee:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    7ff2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    7ff6:	430b      	orrs	r3, r1
    7ff8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    7ffc:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    7ffe:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8000:	b662      	cpsie	i
}
    8002:	bcf0      	pop	{r4, r5, r6, r7}
    8004:	4770      	bx	lr
    8006:	bf00      	nop
    8008:	402e0000 	.word	0x402e0000
    800c:	e0001000 	.word	0xe0001000

00008010 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8010:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8012:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    8014:	b19d      	cbz	r5, 803e <run_callbacks+0x2e>
    8016:	4606      	mov	r6, r0
    8018:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    801a:	2400      	movs	r4, #0
    801c:	e003      	b.n	8026 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    801e:	6812      	ldr	r2, [r2, #0]
		count++;
    8020:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    8022:	2a01      	cmp	r2, #1
    8024:	d00c      	beq.n	8040 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    8026:	6853      	ldr	r3, [r2, #4]
    8028:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    802c:	d0f7      	beq.n	801e <run_callbacks+0xe>
			ep->first_transfer = t;
    802e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8030:	b12c      	cbz	r4, 803e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    8032:	4628      	mov	r0, r5
		ep->callback_function(first);
    8034:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    8036:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    8038:	4798      	blx	r3
	while (count) {
    803a:	3c01      	subs	r4, #1
    803c:	d1f9      	bne.n	8032 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    803e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    8040:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    8044:	e7f4      	b.n	8030 <run_callbacks+0x20>
    8046:	bf00      	nop

00008048 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8048:	b430      	push	{r4, r5}
	if (len > 0) {
    804a:	b9d9      	cbnz	r1, 8084 <endpoint0_transmit.constprop.0+0x3c>
    804c:	4c1f      	ldr	r4, [pc, #124]	; (80cc <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    804e:	4b20      	ldr	r3, [pc, #128]	; (80d0 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    8050:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8052:	4a20      	ldr	r2, [pc, #128]	; (80d4 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    8054:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8056:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    805a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    805c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    805e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8062:	2480      	movs	r4, #128	; 0x80
    8064:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8066:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    806a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    806e:	481a      	ldr	r0, [pc, #104]	; (80d8 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8070:	432b      	orrs	r3, r5
    8072:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8076:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    8078:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    807c:	2b00      	cmp	r3, #0
    807e:	d1fb      	bne.n	8078 <endpoint0_transmit.constprop.0+0x30>
}
    8080:	bc30      	pop	{r4, r5}
    8082:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8084:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    8086:	4b15      	ldr	r3, [pc, #84]	; (80dc <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8088:	4c10      	ldr	r4, [pc, #64]	; (80cc <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    808a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    808c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8090:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8092:	4a10      	ldr	r2, [pc, #64]	; (80d4 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8094:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8096:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    809a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    809c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    809e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    80a2:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    80a4:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    80a6:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    80aa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    80ae:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    80b0:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    80b2:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    80b4:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    80b6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    80ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    80be:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    80c2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    80c6:	2b00      	cmp	r3, #0
    80c8:	d1fb      	bne.n	80c2 <endpoint0_transmit.constprop.0+0x7a>
    80ca:	e7c0      	b.n	804e <endpoint0_transmit.constprop.0+0x6>
    80cc:	20000000 	.word	0x20000000
    80d0:	200092c0 	.word	0x200092c0
    80d4:	402e0000 	.word	0x402e0000
    80d8:	20026e38 	.word	0x20026e38
    80dc:	200092e0 	.word	0x200092e0

000080e0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    80e0:	4908      	ldr	r1, [pc, #32]	; (8104 <usb_stop_sof_interrupts+0x24>)
    80e2:	2201      	movs	r2, #1
    80e4:	780b      	ldrb	r3, [r1, #0]
    80e6:	fa02 f000 	lsl.w	r0, r2, r0
    80ea:	ea23 0000 	bic.w	r0, r3, r0
    80ee:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    80f0:	b930      	cbnz	r0, 8100 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    80f2:	4a05      	ldr	r2, [pc, #20]	; (8108 <usb_stop_sof_interrupts+0x28>)
    80f4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    80f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    80fc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    8100:	4770      	bx	lr
    8102:	bf00      	nop
    8104:	200274e4 	.word	0x200274e4
    8108:	402e0000 	.word	0x402e0000

0000810c <usb_isr>:
{
    810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    8110:	4caa      	ldr	r4, [pc, #680]	; (83bc <usb_isr+0x2b0>)
{
    8112:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    8114:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8118:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    811a:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    811e:	d54f      	bpl.n	81c0 <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8120:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8124:	2b00      	cmp	r3, #0
    8126:	d046      	beq.n	81b6 <usb_isr+0xaa>
    8128:	4da5      	ldr	r5, [pc, #660]	; (83c0 <usb_isr+0x2b4>)
    812a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 83dc <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    812e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 83f8 <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8132:	4fa4      	ldr	r7, [pc, #656]	; (83c4 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    8134:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    8138:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    813c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    8144:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8148:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    814c:	049b      	lsls	r3, r3, #18
    814e:	d5f5      	bpl.n	813c <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8150:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    815c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8160:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8164:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    8168:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    816c:	d1fa      	bne.n	8164 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    816e:	b291      	uxth	r1, r2
    8170:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    8174:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    8178:	f000 81b8 	beq.w	84ec <usb_isr+0x3e0>
    817c:	f200 80f3 	bhi.w	8366 <usb_isr+0x25a>
    8180:	f240 3c02 	movw	ip, #770	; 0x302
    8184:	4561      	cmp	r1, ip
    8186:	f000 81cf 	beq.w	8528 <usb_isr+0x41c>
    818a:	f200 809a 	bhi.w	82c2 <usb_isr+0x1b6>
    818e:	2982      	cmp	r1, #130	; 0x82
    8190:	f000 81b4 	beq.w	84fc <usb_isr+0x3f0>
    8194:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    8198:	f040 808a 	bne.w	82b0 <usb_isr+0x1a4>
		if (endpoint > 7) break;
    819c:	f010 0f78 	tst.w	r0, #120	; 0x78
    81a0:	b283      	uxth	r3, r0
    81a2:	f000 81f4 	beq.w	858e <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    81a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    81aa:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    81ae:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    81b2:	2b00      	cmp	r3, #0
    81b4:	d1be      	bne.n	8134 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    81b6:	4a81      	ldr	r2, [pc, #516]	; (83bc <usb_isr+0x2b0>)
    81b8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    81bc:	2b00      	cmp	r3, #0
    81be:	d142      	bne.n	8246 <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    81c0:	0672      	lsls	r2, r6, #25
    81c2:	d516      	bpl.n	81f2 <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    81c4:	4b7d      	ldr	r3, [pc, #500]	; (83bc <usb_isr+0x2b0>)
    81c6:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    81ca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    81ce:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    81d2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    81d6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    81da:	2c00      	cmp	r4, #0
    81dc:	d1fb      	bne.n	81d6 <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    81de:	f04f 32ff 	mov.w	r2, #4294967295
    81e2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    81e6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    81ea:	f000 fdcb 	bl	8d84 <usb_serial_reset>
		endpointN_notify_mask = 0;
    81ee:	4b76      	ldr	r3, [pc, #472]	; (83c8 <usb_isr+0x2bc>)
    81f0:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    81f2:	01f4      	lsls	r4, r6, #7
    81f4:	d503      	bpl.n	81fe <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    81f6:	4b75      	ldr	r3, [pc, #468]	; (83cc <usb_isr+0x2c0>)
    81f8:	681b      	ldr	r3, [r3, #0]
    81fa:	b103      	cbz	r3, 81fe <usb_isr+0xf2>
    81fc:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    81fe:	01b0      	lsls	r0, r6, #6
    8200:	d503      	bpl.n	820a <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8202:	4b73      	ldr	r3, [pc, #460]	; (83d0 <usb_isr+0x2c4>)
    8204:	681b      	ldr	r3, [r3, #0]
    8206:	b103      	cbz	r3, 820a <usb_isr+0xfe>
    8208:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    820a:	0771      	lsls	r1, r6, #29
    820c:	d508      	bpl.n	8220 <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    820e:	4b6b      	ldr	r3, [pc, #428]	; (83bc <usb_isr+0x2b0>)
    8210:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8214:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    8218:	d047      	beq.n	82aa <usb_isr+0x19e>
			usb_high_speed = 1;
    821a:	4b6e      	ldr	r3, [pc, #440]	; (83d4 <usb_isr+0x2c8>)
    821c:	2201      	movs	r2, #1
    821e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8220:	4b66      	ldr	r3, [pc, #408]	; (83bc <usb_isr+0x2b0>)
    8222:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8226:	061a      	lsls	r2, r3, #24
    8228:	d50a      	bpl.n	8240 <usb_isr+0x134>
    822a:	0633      	lsls	r3, r6, #24
    822c:	d508      	bpl.n	8240 <usb_isr+0x134>
		if (usb_reboot_timer) {
    822e:	4a6a      	ldr	r2, [pc, #424]	; (83d8 <usb_isr+0x2cc>)
    8230:	7813      	ldrb	r3, [r2, #0]
    8232:	b12b      	cbz	r3, 8240 <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    8234:	3b01      	subs	r3, #1
    8236:	b2db      	uxtb	r3, r3
    8238:	7013      	strb	r3, [r2, #0]
    823a:	2b00      	cmp	r3, #0
    823c:	f000 8230 	beq.w	86a0 <usb_isr+0x594>
}
    8240:	b003      	add	sp, #12
    8242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    8246:	4965      	ldr	r1, [pc, #404]	; (83dc <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    8248:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    824c:	6808      	ldr	r0, [r1, #0]
    824e:	4203      	tst	r3, r0
    8250:	f040 81c2 	bne.w	85d8 <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    8254:	4a5c      	ldr	r2, [pc, #368]	; (83c8 <usb_isr+0x2bc>)
    8256:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    8258:	401c      	ands	r4, r3
    825a:	d0b1      	beq.n	81c0 <usb_isr+0xb4>
				while (tx) {
    825c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    8260:	d010      	beq.n	8284 <usb_isr+0x178>
    8262:	4d57      	ldr	r5, [pc, #348]	; (83c0 <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    8264:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8268:	fa98 f7a8 	rbit	r7, r8
    826c:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8270:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    8274:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8278:	3040      	adds	r0, #64	; 0x40
    827a:	f7ff fec9 	bl	8010 <run_callbacks>
				while (tx) {
    827e:	ea38 0807 	bics.w	r8, r8, r7
    8282:	d1f1      	bne.n	8268 <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    8284:	b2a4      	uxth	r4, r4
				while(rx) {
    8286:	2c00      	cmp	r4, #0
    8288:	d09a      	beq.n	81c0 <usb_isr+0xb4>
    828a:	4d4d      	ldr	r5, [pc, #308]	; (83c0 <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    828c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    8290:	fa94 f7a4 	rbit	r7, r4
    8294:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8298:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    829c:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    82a0:	f7ff feb6 	bl	8010 <run_callbacks>
				while(rx) {
    82a4:	43bc      	bics	r4, r7
    82a6:	d1f3      	bne.n	8290 <usb_isr+0x184>
    82a8:	e78a      	b.n	81c0 <usb_isr+0xb4>
			usb_high_speed = 0;
    82aa:	4a4a      	ldr	r2, [pc, #296]	; (83d4 <usb_isr+0x2c8>)
    82ac:	7013      	strb	r3, [r2, #0]
    82ae:	e7b7      	b.n	8220 <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    82b0:	2980      	cmp	r1, #128	; 0x80
    82b2:	f47f af78 	bne.w	81a6 <usb_isr+0x9a>
		reply_buffer[0] = 0;
    82b6:	484a      	ldr	r0, [pc, #296]	; (83e0 <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    82b8:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    82ba:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    82bc:	f7ff fec4 	bl	8048 <endpoint0_transmit.constprop.0>
		return;
    82c0:	e775      	b.n	81ae <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    82c2:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    82c6:	f000 80f4 	beq.w	84b2 <usb_isr+0x3a6>
    82ca:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    82ce:	2901      	cmp	r1, #1
    82d0:	f63f af69 	bhi.w	81a6 <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    82d4:	4b43      	ldr	r3, [pc, #268]	; (83e4 <usb_isr+0x2d8>)
    82d6:	6859      	ldr	r1, [r3, #4]
    82d8:	2900      	cmp	r1, #0
    82da:	f43f af64 	beq.w	81a6 <usb_isr+0x9a>
    82de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    82e2:	fa1f fa80 	uxth.w	sl, r0
    82e6:	e004      	b.n	82f2 <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    82e8:	6919      	ldr	r1, [r3, #16]
    82ea:	330c      	adds	r3, #12
    82ec:	2900      	cmp	r1, #0
    82ee:	f43f af5a 	beq.w	81a6 <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    82f2:	f8b3 c000 	ldrh.w	ip, [r3]
    82f6:	45f4      	cmp	ip, lr
    82f8:	d1f6      	bne.n	82e8 <usb_isr+0x1dc>
    82fa:	885a      	ldrh	r2, [r3, #2]
    82fc:	4552      	cmp	r2, sl
    82fe:	d1f3      	bne.n	82e8 <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    8300:	ea4f 221e 	mov.w	r2, lr, lsr #8
    8304:	2a03      	cmp	r2, #3
    8306:	f000 8185 	beq.w	8614 <usb_isr+0x508>
					datalen = list->length;
    830a:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    830e:	0c00      	lsrs	r0, r0, #16
    8310:	4582      	cmp	sl, r0
    8312:	bf28      	it	cs
    8314:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    8316:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    831a:	f040 8181 	bne.w	8620 <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    831e:	4b2d      	ldr	r3, [pc, #180]	; (83d4 <usb_isr+0x2c8>)
    8320:	4a31      	ldr	r2, [pc, #196]	; (83e8 <usb_isr+0x2dc>)
    8322:	7819      	ldrb	r1, [r3, #0]
    8324:	4b31      	ldr	r3, [pc, #196]	; (83ec <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8326:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 83f0 <usb_isr+0x2e4>
    832a:	2900      	cmp	r1, #0
    832c:	bf0c      	ite	eq
    832e:	4611      	moveq	r1, r2
    8330:	4619      	movne	r1, r3
    8332:	482f      	ldr	r0, [pc, #188]	; (83f0 <usb_isr+0x2e4>)
    8334:	4652      	mov	r2, sl
    8336:	f7ff fb99 	bl	7a6c <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    833a:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    833e:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    8342:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8346:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    834a:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    834e:	3320      	adds	r3, #32
	} while (location < end_addr);
    8350:	429a      	cmp	r2, r3
    8352:	d8fa      	bhi.n	834a <usb_isr+0x23e>
	asm("dsb");
    8354:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8358:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    835c:	4824      	ldr	r0, [pc, #144]	; (83f0 <usb_isr+0x2e4>)
    835e:	4651      	mov	r1, sl
    8360:	f7ff fe72 	bl	8048 <endpoint0_transmit.constprop.0>
				return;
    8364:	e723      	b.n	81ae <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    8366:	f242 3c21 	movw	ip, #8993	; 0x2321
    836a:	4561      	cmp	r1, ip
    836c:	d00d      	beq.n	838a <usb_isr+0x27e>
    836e:	d877      	bhi.n	8460 <usb_isr+0x354>
    8370:	f242 0c21 	movw	ip, #8225	; 0x2021
    8374:	4561      	cmp	r1, ip
    8376:	f000 808b 	beq.w	8490 <usb_isr+0x384>
    837a:	f242 2c21 	movw	ip, #8737	; 0x2221
    837e:	4561      	cmp	r1, ip
    8380:	d13c      	bne.n	83fc <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8382:	b280      	uxth	r0, r0
    8384:	2800      	cmp	r0, #0
    8386:	f000 80f9 	beq.w	857c <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    838a:	4b1a      	ldr	r3, [pc, #104]	; (83f4 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    838c:	2200      	movs	r2, #0
    838e:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    8390:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8392:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8394:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8396:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8398:	2280      	movs	r2, #128	; 0x80
    839a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    839c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    83a0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    83a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    83a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    83ac:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    83b0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    83b4:	2b00      	cmp	r3, #0
    83b6:	d1fb      	bne.n	83b0 <usb_isr+0x2a4>
    83b8:	e6f9      	b.n	81ae <usb_isr+0xa2>
    83ba:	bf00      	nop
    83bc:	402e0000 	.word	0x402e0000
    83c0:	20000000 	.word	0x20000000
    83c4:	402e01c0 	.word	0x402e01c0
    83c8:	20026e3c 	.word	0x20026e3c
    83cc:	200274b8 	.word	0x200274b8
    83d0:	200274bc 	.word	0x200274bc
    83d4:	200274eb 	.word	0x200274eb
    83d8:	200274ec 	.word	0x200274ec
    83dc:	20026e38 	.word	0x20026e38
    83e0:	20026f5c 	.word	0x20026f5c
    83e4:	20008504 	.word	0x20008504
    83e8:	600026f0 	.word	0x600026f0
    83ec:	6000275c 	.word	0x6000275c
    83f0:	20200800 	.word	0x20200800
    83f4:	200092c0 	.word	0x200092c0
    83f8:	200274ea 	.word	0x200274ea
	switch (setup.wRequestAndType) {
    83fc:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    8400:	f47f aed1 	bne.w	81a6 <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    8404:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8408:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    840c:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    840e:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8412:	4aa6      	ldr	r2, [pc, #664]	; (86ac <usb_isr+0x5a0>)
    8414:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8418:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    841c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8420:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    8424:	f000 fcb0 	bl	8d88 <usb_serial_configure>
		usb_mtp_configure();
    8428:	f000 faaa 	bl	8980 <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    842c:	4aa0      	ldr	r2, [pc, #640]	; (86b0 <usb_isr+0x5a4>)
    842e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8430:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8432:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8434:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8436:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8438:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    843a:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    843c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    8440:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8442:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8446:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    844a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    844e:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8452:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    8456:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    845a:	2b00      	cmp	r3, #0
    845c:	d1fb      	bne.n	8456 <usb_isr+0x34a>
    845e:	e6a6      	b.n	81ae <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    8460:	f246 4321 	movw	r3, #25633	; 0x6421
    8464:	4299      	cmp	r1, r3
    8466:	d01f      	beq.n	84a8 <usb_isr+0x39c>
    8468:	f246 73a1 	movw	r3, #26529	; 0x67a1
    846c:	4299      	cmp	r1, r3
    846e:	f47f ae9a 	bne.w	81a6 <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    8472:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    8476:	f4ff ae96 	bcc.w	81a6 <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    847a:	4b8e      	ldr	r3, [pc, #568]	; (86b4 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    847c:	2104      	movs	r1, #4
    847e:	488e      	ldr	r0, [pc, #568]	; (86b8 <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    8480:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    8482:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    8484:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    8486:	2320      	movs	r3, #32
    8488:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    848a:	f7ff fddd 	bl	8048 <endpoint0_transmit.constprop.0>
			return;
    848e:	e68e      	b.n	81ae <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    8490:	0c01      	lsrs	r1, r0, #16
    8492:	2907      	cmp	r1, #7
    8494:	f47f ae87 	bne.w	81a6 <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    8498:	4b88      	ldr	r3, [pc, #544]	; (86bc <usb_isr+0x5b0>)
    849a:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    849e:	2201      	movs	r2, #1
    84a0:	4885      	ldr	r0, [pc, #532]	; (86b8 <usb_isr+0x5ac>)
    84a2:	f7ff fd0d 	bl	7ec0 <endpoint0_receive>
			return;
    84a6:	e682      	b.n	81ae <usb_isr+0xa2>
		if (setup.wLength == 6) {
    84a8:	0c01      	lsrs	r1, r0, #16
    84aa:	2906      	cmp	r1, #6
    84ac:	f47f ae7b 	bne.w	81a6 <usb_isr+0x9a>
    84b0:	e7f2      	b.n	8498 <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    84b2:	497f      	ldr	r1, [pc, #508]	; (86b0 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    84b4:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    84b6:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    84b8:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    84ba:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    84bc:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    84be:	2380      	movs	r3, #128	; 0x80
    84c0:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    84c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    84c6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    84ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    84ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    84d2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    84d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    84da:	2b00      	cmp	r3, #0
    84dc:	d1fb      	bne.n	84d6 <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    84de:	0c13      	lsrs	r3, r2, #16
    84e0:	065b      	lsls	r3, r3, #25
    84e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    84e6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    84ea:	e660      	b.n	81ae <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    84ec:	4874      	ldr	r0, [pc, #464]	; (86c0 <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    84ee:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    84f0:	f898 3000 	ldrb.w	r3, [r8]
    84f4:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    84f6:	f7ff fda7 	bl	8048 <endpoint0_transmit.constprop.0>
		return;
    84fa:	e658      	b.n	81ae <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    84fc:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    84fe:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8502:	f47f ae50 	bne.w	81a6 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    8506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    850a:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    850e:	4a6c      	ldr	r2, [pc, #432]	; (86c0 <usb_isr+0x5b4>)
    8510:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8512:	0618      	lsls	r0, r3, #24
    8514:	d47b      	bmi.n	860e <usb_isr+0x502>
    8516:	07cb      	lsls	r3, r1, #31
    8518:	d501      	bpl.n	851e <usb_isr+0x412>
			reply_buffer[0] = 1;
    851a:	2301      	movs	r3, #1
    851c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    851e:	2102      	movs	r1, #2
    8520:	4867      	ldr	r0, [pc, #412]	; (86c0 <usb_isr+0x5b4>)
    8522:	f7ff fd91 	bl	8048 <endpoint0_transmit.constprop.0>
		return;
    8526:	e642      	b.n	81ae <usb_isr+0xa2>
		if (endpoint > 7) break;
    8528:	f010 0f78 	tst.w	r0, #120	; 0x78
    852c:	b283      	uxth	r3, r0
    852e:	f47f ae3a 	bne.w	81a6 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    8532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8536:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    853a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    853e:	bf14      	ite	ne
    8540:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8544:	f043 0301 	orreq.w	r3, r3, #1
    8548:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    854c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    854e:	4b58      	ldr	r3, [pc, #352]	; (86b0 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    8550:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8552:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8554:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8556:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8558:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    855a:	2280      	movs	r2, #128	; 0x80
    855c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    855e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8562:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8566:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    856a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    856e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8572:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8576:	2b00      	cmp	r3, #0
    8578:	d1fb      	bne.n	8572 <usb_isr+0x466>
    857a:	e618      	b.n	81ae <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    857c:	4b51      	ldr	r3, [pc, #324]	; (86c4 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    857e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8582:	6819      	ldr	r1, [r3, #0]
    8584:	4b50      	ldr	r3, [pc, #320]	; (86c8 <usb_isr+0x5bc>)
    8586:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8588:	4b50      	ldr	r3, [pc, #320]	; (86cc <usb_isr+0x5c0>)
    858a:	701a      	strb	r2, [r3, #0]
    858c:	e6fd      	b.n	838a <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    858e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8592:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8596:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    859a:	bf14      	ite	ne
    859c:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    85a0:	f023 0301 	biceq.w	r3, r3, #1
    85a4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    85a8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    85aa:	4b41      	ldr	r3, [pc, #260]	; (86b0 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    85ac:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    85ae:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    85b0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    85b2:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    85b4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    85b6:	2280      	movs	r2, #128	; 0x80
    85b8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    85ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    85be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    85c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    85c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    85ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    85ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    85d2:	2b00      	cmp	r3, #0
    85d4:	d1fb      	bne.n	85ce <usb_isr+0x4c2>
    85d6:	e5ea      	b.n	81ae <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    85d8:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    85da:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    85de:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    85e0:	4936      	ldr	r1, [pc, #216]	; (86bc <usb_isr+0x5b0>)
    85e2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    85e4:	8809      	ldrh	r1, [r1, #0]
    85e6:	42a1      	cmp	r1, r4
    85e8:	d02f      	beq.n	864a <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    85ea:	f246 4221 	movw	r2, #25633	; 0x6421
    85ee:	4291      	cmp	r1, r2
    85f0:	f47f ae30 	bne.w	8254 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    85f4:	4a30      	ldr	r2, [pc, #192]	; (86b8 <usb_isr+0x5ac>)
    85f6:	7811      	ldrb	r1, [r2, #0]
    85f8:	2901      	cmp	r1, #1
    85fa:	f47f ae2b 	bne.w	8254 <usb_isr+0x148>
    85fe:	7852      	ldrb	r2, [r2, #1]
    8600:	2a40      	cmp	r2, #64	; 0x40
    8602:	f47f ae27 	bne.w	8254 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    8606:	4a2b      	ldr	r2, [pc, #172]	; (86b4 <usb_isr+0x5a8>)
    8608:	2119      	movs	r1, #25
    860a:	7011      	strb	r1, [r2, #0]
    860c:	e622      	b.n	8254 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    860e:	03c9      	lsls	r1, r1, #15
    8610:	d483      	bmi.n	851a <usb_isr+0x40e>
    8612:	e784      	b.n	851e <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    8614:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    8616:	f891 a000 	ldrb.w	sl, [r1]
    861a:	4582      	cmp	sl, r0
    861c:	bf28      	it	cs
    861e:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    8620:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    8624:	d135      	bne.n	8692 <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8626:	4b2a      	ldr	r3, [pc, #168]	; (86d0 <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8628:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 86e8 <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    862c:	7819      	ldrb	r1, [r3, #0]
    862e:	4a29      	ldr	r2, [pc, #164]	; (86d4 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8630:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    8632:	4b29      	ldr	r3, [pc, #164]	; (86d8 <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8634:	2900      	cmp	r1, #0
    8636:	bf0c      	ite	eq
    8638:	4611      	moveq	r1, r2
    863a:	4619      	movne	r1, r3
    863c:	4652      	mov	r2, sl
    863e:	f7ff fa15 	bl	7a6c <memcpy>
					usb_descriptor_buffer[1] = 7;
    8642:	2307      	movs	r3, #7
    8644:	f88b 3001 	strb.w	r3, [fp, #1]
    8648:	e677      	b.n	833a <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    864a:	b280      	uxth	r0, r0
    864c:	2800      	cmp	r0, #0
    864e:	f47f ae01 	bne.w	8254 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8652:	4919      	ldr	r1, [pc, #100]	; (86b8 <usb_isr+0x5ac>)
    8654:	4c21      	ldr	r4, [pc, #132]	; (86dc <usb_isr+0x5d0>)
    8656:	c903      	ldmia	r1, {r0, r1}
    8658:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    865a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    865c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8660:	6020      	str	r0, [r4, #0]
    8662:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8664:	f47f adf6 	bne.w	8254 <usb_isr+0x148>
	__disable_irq();
    8668:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    866a:	481d      	ldr	r0, [pc, #116]	; (86e0 <usb_isr+0x5d4>)
    866c:	7801      	ldrb	r1, [r0, #0]
    866e:	f041 0108 	orr.w	r1, r1, #8
    8672:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    8674:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    8678:	060d      	lsls	r5, r1, #24
    867a:	d405      	bmi.n	8688 <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    867c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    867e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    8680:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    8684:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    8688:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    868a:	4a16      	ldr	r2, [pc, #88]	; (86e4 <usb_isr+0x5d8>)
    868c:	2150      	movs	r1, #80	; 0x50
    868e:	7011      	strb	r1, [r2, #0]
    8690:	e5e0      	b.n	8254 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8692:	f8df b054 	ldr.w	fp, [pc, #84]	; 86e8 <usb_isr+0x5dc>
    8696:	4652      	mov	r2, sl
    8698:	4658      	mov	r0, fp
    869a:	f7ff f9e7 	bl	7a6c <memcpy>
    869e:	e64c      	b.n	833a <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    86a0:	2003      	movs	r0, #3
    86a2:	f7ff fd1d 	bl	80e0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    86a6:	f00b fd2b 	bl	14100 <___reboot_Teensyduino__veneer>
    86aa:	bf00      	nop
    86ac:	00cc0002 	.word	0x00cc0002
    86b0:	200092c0 	.word	0x200092c0
    86b4:	20008cb7 	.word	0x20008cb7
    86b8:	20026e30 	.word	0x20026e30
    86bc:	20009580 	.word	0x20009580
    86c0:	20026f5c 	.word	0x20026f5c
    86c4:	20027494 	.word	0x20027494
    86c8:	200274b4 	.word	0x200274b4
    86cc:	200274e9 	.word	0x200274e9
    86d0:	200274eb 	.word	0x200274eb
    86d4:	6000275c 	.word	0x6000275c
    86d8:	600026f0 	.word	0x600026f0
    86dc:	200274ac 	.word	0x200274ac
    86e0:	200274e4 	.word	0x200274e4
    86e4:	200274ec 	.word	0x200274ec
    86e8:	20200800 	.word	0x20200800

000086ec <usb_config_rx>:
{
    86ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86f0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    86f2:	1e83      	subs	r3, r0, #2
    86f4:	2b03      	cmp	r3, #3
    86f6:	d901      	bls.n	86fc <usb_config_rx+0x10>
}
    86f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    86fc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 874c <usb_config_rx+0x60>
    8700:	4615      	mov	r5, r2
    8702:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    8704:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8706:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    870a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    870c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    8710:	2100      	movs	r1, #0
    8712:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8716:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    8718:	f002 ff78 	bl	b60c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    871c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    8720:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8722:	0952      	lsrs	r2, r2, #5
    8724:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    8728:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    872c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8730:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    8734:	2f00      	cmp	r7, #0
    8736:	d0df      	beq.n	86f8 <usb_config_rx+0xc>
    8738:	4a03      	ldr	r2, [pc, #12]	; (8748 <usb_config_rx+0x5c>)
    873a:	40b3      	lsls	r3, r6
    873c:	6811      	ldr	r1, [r2, #0]
    873e:	430b      	orrs	r3, r1
    8740:	6013      	str	r3, [r2, #0]
}
    8742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8746:	bf00      	nop
    8748:	20026e3c 	.word	0x20026e3c
    874c:	20000000 	.word	0x20000000

00008750 <usb_config_tx>:
{
    8750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8754:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8756:	1e81      	subs	r1, r0, #2
    8758:	2903      	cmp	r1, #3
    875a:	d901      	bls.n	8760 <usb_config_tx+0x10>
}
    875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8760:	01c7      	lsls	r7, r0, #7
    8762:	f8df 904c 	ldr.w	r9, [pc, #76]	; 87b0 <usb_config_tx+0x60>
    8766:	4692      	mov	sl, r2
    8768:	4604      	mov	r4, r0
    876a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    876c:	223c      	movs	r2, #60	; 0x3c
    876e:	2100      	movs	r1, #0
    8770:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8772:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8776:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    8778:	f108 0004 	add.w	r0, r8, #4
    877c:	f002 ff46 	bl	b60c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8780:	faba f28a 	clz	r2, sl
    8784:	0952      	lsrs	r2, r2, #5
    8786:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    878a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    878e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    8790:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    8794:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8798:	2e00      	cmp	r6, #0
    879a:	d0df      	beq.n	875c <usb_config_tx+0xc>
    879c:	4b03      	ldr	r3, [pc, #12]	; (87ac <usb_config_tx+0x5c>)
    879e:	3410      	adds	r4, #16
    87a0:	6819      	ldr	r1, [r3, #0]
    87a2:	40a2      	lsls	r2, r4
    87a4:	430a      	orrs	r2, r1
    87a6:	601a      	str	r2, [r3, #0]
}
    87a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87ac:	20026e3c 	.word	0x20026e3c
    87b0:	20000000 	.word	0x20000000

000087b4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    87b4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    87b6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    87b8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    87ba:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    87be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    87c2:	b410      	push	{r4}
	transfer->next = 1;
    87c4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    87c6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    87c8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    87cc:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    87ce:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    87d2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    87d6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    87d8:	6181      	str	r1, [r0, #24]
}
    87da:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    87de:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    87e2:	4770      	bx	lr

000087e4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    87e4:	1e83      	subs	r3, r0, #2
{
    87e6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    87e8:	2b03      	cmp	r3, #3
    87ea:	d900      	bls.n	87ee <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    87ec:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    87ee:	4b06      	ldr	r3, [pc, #24]	; (8808 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    87f0:	f100 0110 	add.w	r1, r0, #16
    87f4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    87f8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    87fc:	fa0c f101 	lsl.w	r1, ip, r1
    8800:	3040      	adds	r0, #64	; 0x40
    8802:	f7ff bbc1 	b.w	7f88 <schedule_transfer>
    8806:	bf00      	nop
    8808:	20000000 	.word	0x20000000

0000880c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    880c:	1e83      	subs	r3, r0, #2
{
    880e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8810:	2b03      	cmp	r3, #3
    8812:	d900      	bls.n	8816 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    8814:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    8816:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    8818:	4b02      	ldr	r3, [pc, #8]	; (8824 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    881a:	4081      	lsls	r1, r0
    881c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    8820:	f7ff bbb2 	b.w	7f88 <schedule_transfer>
    8824:	20000000 	.word	0x20000000

00008828 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    8828:	4a08      	ldr	r2, [pc, #32]	; (884c <usb_transfer_status+0x24>)
    882a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    882e:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    8830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8834:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    8838:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    883a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    883e:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    8840:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    8844:	d0f3      	beq.n	882e <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    8846:	4608      	mov	r0, r1
    8848:	4770      	bx	lr
    884a:	bf00      	nop
    884c:	402e0000 	.word	0x402e0000

00008850 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8850:	4a12      	ldr	r2, [pc, #72]	; (889c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8852:	4b13      	ldr	r3, [pc, #76]	; (88a0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8854:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    8858:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    885c:	4298      	cmp	r0, r3
{
    885e:	b510      	push	{r4, lr}
    8860:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    8862:	d202      	bcs.n	886a <usb_init_serialnumber+0x1a>
    8864:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8868:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    886a:	4c0e      	ldr	r4, [pc, #56]	; (88a4 <usb_init_serialnumber+0x54>)
    886c:	a901      	add	r1, sp, #4
    886e:	220a      	movs	r2, #10
    8870:	f7ff f998 	bl	7ba4 <ultoa>
	for (i=0; i<10; i++) {
    8874:	a901      	add	r1, sp, #4
    8876:	2300      	movs	r3, #0
    8878:	4620      	mov	r0, r4
		char c = buf[i];
    887a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    887e:	3301      	adds	r3, #1
		if (!c) break;
    8880:	b13a      	cbz	r2, 8892 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    8882:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    8884:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    8888:	d1f7      	bne.n	887a <usb_init_serialnumber+0x2a>
    888a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    888c:	7023      	strb	r3, [r4, #0]
}
    888e:	b004      	add	sp, #16
    8890:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    8892:	005b      	lsls	r3, r3, #1
    8894:	b2db      	uxtb	r3, r3
    8896:	7023      	strb	r3, [r4, #0]
}
    8898:	b004      	add	sp, #16
    889a:	bd10      	pop	{r4, pc}
    889c:	401f4400 	.word	0x401f4400
    88a0:	00989680 	.word	0x00989680
    88a4:	20008ca0 	.word	0x20008ca0

000088a8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    88a8:	f000 bb8c 	b.w	8fc4 <usb_serial_flush_input>

000088ac <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    88ac:	f000 bb7e 	b.w	8fac <usb_serial_available>

000088b0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    88b0:	f000 bc1a 	b.w	90e8 <usb_serial_flush_output>

000088b4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    88b4:	f000 bbf0 	b.w	9098 <usb_serial_write_buffer_free>

000088b8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    88b8:	4608      	mov	r0, r1
    88ba:	4611      	mov	r1, r2
    88bc:	f000 bbe0 	b.w	9080 <usb_serial_write>

000088c0 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    88c0:	4a02      	ldr	r2, [pc, #8]	; (88cc <txEvent_event+0xc>)
    88c2:	6813      	ldr	r3, [r2, #0]
    88c4:	3301      	adds	r3, #1
    88c6:	6013      	str	r3, [r2, #0]
    88c8:	4770      	bx	lr
    88ca:	bf00      	nop
    88cc:	20026ed0 	.word	0x20026ed0

000088d0 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    88d0:	4a0e      	ldr	r2, [pc, #56]	; (890c <rx_event+0x3c>)
{
    88d2:	b410      	push	{r4}
	uint32_t head = rx_head;
    88d4:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    88d6:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    88d8:	3301      	adds	r3, #1
    88da:	2b04      	cmp	r3, #4
    88dc:	d811      	bhi.n	8902 <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    88de:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    88e2:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    88e4:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    88e8:	4a09      	ldr	r2, [pc, #36]	; (8910 <rx_event+0x40>)
    88ea:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    88ee:	4809      	ldr	r0, [pc, #36]	; (8914 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    88f0:	8812      	ldrh	r2, [r2, #0]
    88f2:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    88f4:	4908      	ldr	r1, [pc, #32]	; (8918 <rx_event+0x48>)
    88f6:	54cc      	strb	r4, [r1, r3]
}
    88f8:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    88fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    8900:	4770      	bx	lr
    8902:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    8906:	4663      	mov	r3, ip
    8908:	e7eb      	b.n	88e2 <rx_event+0x12>
    890a:	bf00      	nop
    890c:	200274e0 	.word	0x200274e0
    8910:	200274ca 	.word	0x200274ca
    8914:	20026f9c 	.word	0x20026f9c
    8918:	20026f88 	.word	0x20026f88

0000891c <rx_queue_transfer>:
{
    891c:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    891e:	4915      	ldr	r1, [pc, #84]	; (8974 <rx_queue_transfer+0x58>)
{
    8920:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    8922:	4d15      	ldr	r5, [pc, #84]	; (8978 <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    8924:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    8928:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    892c:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    892e:	448c      	add	ip, r1
	asm("dsb");
    8930:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8934:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    8938:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    893c:	3220      	adds	r2, #32
	} while (location < end_addr);
    893e:	4594      	cmp	ip, r2
    8940:	d8fa      	bhi.n	8938 <rx_queue_transfer+0x1c>
	asm("dsb");
    8942:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8946:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    894a:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    894c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8950:	4d0a      	ldr	r5, [pc, #40]	; (897c <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8952:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8956:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    895a:	4628      	mov	r0, r5
    895c:	f7ff ff2a 	bl	87b4 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    8960:	4629      	mov	r1, r5
    8962:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8964:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    8968:	f7ff ff50 	bl	880c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    896c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    8970:	bd70      	pop	{r4, r5, r6, pc}
    8972:	bf00      	nop
    8974:	20200880 	.word	0x20200880
    8978:	200274ca 	.word	0x200274ca
    897c:	20009300 	.word	0x20009300

00008980 <usb_mtp_configure>:
	if (usb_high_speed) {
    8980:	4b1f      	ldr	r3, [pc, #124]	; (8a00 <usb_mtp_configure+0x80>)
{
    8982:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    8984:	781b      	ldrb	r3, [r3, #0]
    8986:	2b00      	cmp	r3, #0
    8988:	d037      	beq.n	89fa <usb_mtp_configure+0x7a>
    898a:	f44f 7300 	mov.w	r3, #512	; 0x200
    898e:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    8990:	491c      	ldr	r1, [pc, #112]	; (8a04 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8992:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    8994:	4d1c      	ldr	r5, [pc, #112]	; (8a08 <usb_mtp_configure+0x88>)
	tx_head = 0;
    8996:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    8998:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    899a:	2100      	movs	r1, #0
    899c:	481b      	ldr	r0, [pc, #108]	; (8a0c <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    899e:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    89a0:	f002 fe34 	bl	b60c <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    89a4:	2280      	movs	r2, #128	; 0x80
    89a6:	2100      	movs	r1, #0
    89a8:	4819      	ldr	r0, [pc, #100]	; (8a10 <usb_mtp_configure+0x90>)
    89aa:	f002 fe2f 	bl	b60c <memset>
	rx_head = 0;
    89ae:	4b19      	ldr	r3, [pc, #100]	; (8a14 <usb_mtp_configure+0x94>)
	tx_head = 0;
    89b0:	4a19      	ldr	r2, [pc, #100]	; (8a18 <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    89b2:	4631      	mov	r1, r6
	rx_head = 0;
    89b4:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    89b6:	2004      	movs	r0, #4
	rx_tail = 0;
    89b8:	4b18      	ldr	r3, [pc, #96]	; (8a1c <usb_mtp_configure+0x9c>)
	tx_head = 0;
    89ba:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    89bc:	4622      	mov	r2, r4
	rx_tail = 0;
    89be:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    89c0:	4623      	mov	r3, r4
    89c2:	f7ff fec5 	bl	8750 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    89c6:	4622      	mov	r2, r4
    89c8:	8829      	ldrh	r1, [r5, #0]
    89ca:	2004      	movs	r0, #4
    89cc:	4b14      	ldr	r3, [pc, #80]	; (8a20 <usb_mtp_configure+0xa0>)
    89ce:	f7ff fe8d 	bl	86ec <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    89d2:	4622      	mov	r2, r4
    89d4:	4b13      	ldr	r3, [pc, #76]	; (8a24 <usb_mtp_configure+0xa4>)
    89d6:	2120      	movs	r1, #32
    89d8:	2005      	movs	r0, #5
    89da:	f7ff feb9 	bl	8750 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    89de:	4620      	mov	r0, r4
    89e0:	f7ff ff9c 	bl	891c <rx_queue_transfer>
    89e4:	2001      	movs	r0, #1
    89e6:	f7ff ff99 	bl	891c <rx_queue_transfer>
    89ea:	2002      	movs	r0, #2
    89ec:	f7ff ff96 	bl	891c <rx_queue_transfer>
    89f0:	2003      	movs	r0, #3
}
    89f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    89f6:	f7ff bf91 	b.w	891c <rx_queue_transfer>
    89fa:	2340      	movs	r3, #64	; 0x40
    89fc:	461e      	mov	r6, r3
    89fe:	e7c7      	b.n	8990 <usb_mtp_configure+0x10>
    8a00:	200274eb 	.word	0x200274eb
    8a04:	200274d2 	.word	0x200274d2
    8a08:	200274ca 	.word	0x200274ca
    8a0c:	20009480 	.word	0x20009480
    8a10:	20009300 	.word	0x20009300
    8a14:	200274e0 	.word	0x200274e0
    8a18:	200274e6 	.word	0x200274e6
    8a1c:	200274e2 	.word	0x200274e2
    8a20:	000088d1 	.word	0x000088d1
    8a24:	000088c1 	.word	0x000088c1

00008a28 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8a2a:	4c14      	ldr	r4, [pc, #80]	; (8a7c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8a2c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8a30:	4e13      	ldr	r6, [pc, #76]	; (8a80 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8a36:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8a3a:	4f12      	ldr	r7, [pc, #72]	; (8a84 <rx_queue_transfer+0x5c>)
    8a3c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    8a40:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8a42:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8a46:	4621      	mov	r1, r4
    8a48:	883a      	ldrh	r2, [r7, #0]
    8a4a:	4630      	mov	r0, r6
    8a4c:	f7ff feb2 	bl	87b4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8a50:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8a52:	4423      	add	r3, r4
	asm("dsb");
    8a54:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8a58:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    8a5c:	3420      	adds	r4, #32
	} while (location < end_addr);
    8a5e:	42a3      	cmp	r3, r4
    8a60:	d8fa      	bhi.n	8a58 <rx_queue_transfer+0x30>
	asm("dsb");
    8a62:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8a66:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8a6a:	2003      	movs	r0, #3
    8a6c:	4631      	mov	r1, r6
    8a6e:	f7ff fecd 	bl	880c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8a76:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    8a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a7c:	20201880 	.word	0x20201880
    8a80:	20009380 	.word	0x20009380
    8a84:	200274cc 	.word	0x200274cc

00008a88 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8a88:	4b24      	ldr	r3, [pc, #144]	; (8b1c <rx_event+0x94>)
{
    8a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8a8e:	881c      	ldrh	r4, [r3, #0]
    8a90:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    8a92:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8a94:	f3c3 430e 	ubfx	r3, r3, #16, #15
    8a98:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8a9a:	2c00      	cmp	r4, #0
    8a9c:	dd24      	ble.n	8ae8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    8a9e:	4920      	ldr	r1, [pc, #128]	; (8b20 <rx_event+0x98>)
		if (head != rx_tail) {
    8aa0:	4820      	ldr	r0, [pc, #128]	; (8b24 <rx_event+0x9c>)
		uint32_t head = rx_head;
    8aa2:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    8aa4:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    8aa6:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    8aa8:	4e1f      	ldr	r6, [pc, #124]	; (8b28 <rx_event+0xa0>)
		if (head != rx_tail) {
    8aaa:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    8aac:	481f      	ldr	r0, [pc, #124]	; (8b2c <rx_event+0xa4>)
		if (head != rx_tail) {
    8aae:	d007      	beq.n	8ac0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    8ab0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8ab4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8ab8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    8abc:	4294      	cmp	r4, r2
    8abe:	d918      	bls.n	8af2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8ac0:	3301      	adds	r3, #1
		rx_index[i] = 0;
    8ac2:	2200      	movs	r2, #0
		rx_count[i] = len;
    8ac4:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    8ac8:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    8aca:	4e19      	ldr	r6, [pc, #100]	; (8b30 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8acc:	bf88      	it	hi
    8ace:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    8ad0:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    8ad4:	bf98      	it	ls
    8ad6:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    8ad8:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    8ada:	4b16      	ldr	r3, [pc, #88]	; (8b34 <rx_event+0xac>)
		rx_head = head;
    8adc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    8ade:	681a      	ldr	r2, [r3, #0]
    8ae0:	4414      	add	r4, r2
    8ae2:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    8ae8:	4628      	mov	r0, r5
}
    8aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    8aee:	f7ff bf9b 	b.w	8a28 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8af2:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    8af6:	4910      	ldr	r1, [pc, #64]	; (8b38 <rx_event+0xb0>)
    8af8:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    8afa:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8afc:	4408      	add	r0, r1
    8afe:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    8b02:	f7fe ffb3 	bl	7a6c <memcpy>
				rx_available += len;
    8b06:	4a0b      	ldr	r2, [pc, #44]	; (8b34 <rx_event+0xac>)
				rx_queue_transfer(i);
    8b08:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    8b0a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8b0e:	6813      	ldr	r3, [r2, #0]
    8b10:	4423      	add	r3, r4
}
    8b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    8b16:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    8b18:	f7ff bf86 	b.w	8a28 <rx_queue_transfer>
    8b1c:	200274cc 	.word	0x200274cc
    8b20:	200274e1 	.word	0x200274e1
    8b24:	200274e3 	.word	0x200274e3
    8b28:	20026f68 	.word	0x20026f68
    8b2c:	20026f90 	.word	0x20026f90
    8b30:	20026f78 	.word	0x20026f78
    8b34:	20026f64 	.word	0x20026f64
    8b38:	20201880 	.word	0x20201880

00008b3c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8b3c:	4b1d      	ldr	r3, [pc, #116]	; (8bb4 <usb_serial_flush_callback+0x78>)
    8b3e:	781a      	ldrb	r2, [r3, #0]
    8b40:	2a00      	cmp	r2, #0
    8b42:	d136      	bne.n	8bb2 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    8b44:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    8b48:	4a1b      	ldr	r2, [pc, #108]	; (8bb8 <usb_serial_flush_callback+0x7c>)
    8b4a:	7812      	ldrb	r2, [r2, #0]
    8b4c:	b38a      	cbz	r2, 8bb2 <usb_serial_flush_callback+0x76>
{
    8b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    8b52:	4d1a      	ldr	r5, [pc, #104]	; (8bbc <usb_serial_flush_callback+0x80>)
    8b54:	882a      	ldrh	r2, [r5, #0]
    8b56:	b352      	cbz	r2, 8bae <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8b58:	4e19      	ldr	r6, [pc, #100]	; (8bc0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8b5a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    8b5e:	4f19      	ldr	r7, [pc, #100]	; (8bc4 <usb_serial_flush_callback+0x88>)
    8b60:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8b62:	4c19      	ldr	r4, [pc, #100]	; (8bc8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    8b64:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8b68:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8b6c:	4642      	mov	r2, r8
    8b6e:	4638      	mov	r0, r7
    8b70:	4621      	mov	r1, r4
    8b72:	f7ff fe1f 	bl	87b4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    8b76:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    8b7a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8b7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8b82:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8b86:	3420      	adds	r4, #32
	} while (location < end_addr);
    8b88:	42a2      	cmp	r2, r4
    8b8a:	d8fa      	bhi.n	8b82 <usb_serial_flush_callback+0x46>
	asm("dsb");
    8b8c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8b90:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8b94:	2003      	movs	r0, #3
    8b96:	4639      	mov	r1, r7
    8b98:	f7ff fe24 	bl	87e4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8b9c:	7833      	ldrb	r3, [r6, #0]
    8b9e:	3301      	adds	r3, #1
    8ba0:	b2db      	uxtb	r3, r3
    8ba2:	2b03      	cmp	r3, #3
    8ba4:	bf88      	it	hi
    8ba6:	2300      	movhi	r3, #0
    8ba8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    8baa:	2300      	movs	r3, #0
    8bac:	802b      	strh	r3, [r5, #0]
}
    8bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bb2:	4770      	bx	lr
    8bb4:	200274e8 	.word	0x200274e8
    8bb8:	200274ea 	.word	0x200274ea
    8bbc:	200274d0 	.word	0x200274d0
    8bc0:	200274e7 	.word	0x200274e7
    8bc4:	20009500 	.word	0x20009500
    8bc8:	20202880 	.word	0x20202880

00008bcc <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    8bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bd0:	b085      	sub	sp, #20
	while (size > 0) {
    8bd2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8bd6:	2900      	cmp	r1, #0
    8bd8:	f000 80bf 	beq.w	8d5a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    8bdc:	2300      	movs	r3, #0
    8bde:	4c60      	ldr	r4, [pc, #384]	; (8d60 <usb_serial_write.part.0+0x194>)
    8be0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8d7c <usb_serial_write.part.0+0x1b0>
    8be4:	f8df a198 	ldr.w	sl, [pc, #408]	; 8d80 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    8be8:	4f5e      	ldr	r7, [pc, #376]	; (8d64 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    8bea:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    8bec:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    8bee:	4a5e      	ldr	r2, [pc, #376]	; (8d68 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    8bf0:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    8bf2:	4b5e      	ldr	r3, [pc, #376]	; (8d6c <usb_serial_write.part.0+0x1a0>)
    8bf4:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    8bf6:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    8bfa:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    8bfe:	2b00      	cmp	r3, #0
    8c00:	f040 80a7 	bne.w	8d52 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    8c04:	461e      	mov	r6, r3
		int waiting=0;
    8c06:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    8c08:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    8c0a:	4648      	mov	r0, r9
    8c0c:	f7ff fe0c 	bl	8828 <usb_transfer_status>
			if (!(status & 0x80)) {
    8c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    8c14:	f000 808c 	beq.w	8d30 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    8c18:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    8c1c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    8c20:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    8c24:	b905      	cbnz	r5, 8c28 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    8c26:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d17d      	bne.n	8d28 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8c2c:	683b      	ldr	r3, [r7, #0]
    8c2e:	1b9b      	subs	r3, r3, r6
    8c30:	2b78      	cmp	r3, #120	; 0x78
    8c32:	f200 8087 	bhi.w	8d44 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    8c36:	4b4e      	ldr	r3, [pc, #312]	; (8d70 <usb_serial_write.part.0+0x1a4>)
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d074      	beq.n	8d28 <usb_serial_write.part.0+0x15c>
			yield();
    8c3e:	f000 fa9d 	bl	917c <yield>
			tx_noautoflush = 1;
    8c42:	2201      	movs	r2, #1
		while (!tx_available) {
    8c44:	f8b8 3000 	ldrh.w	r3, [r8]
    8c48:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    8c4a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	d0dc      	beq.n	8c0a <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8c50:	4a46      	ldr	r2, [pc, #280]	; (8d6c <usb_serial_write.part.0+0x1a0>)
    8c52:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8c56:	7811      	ldrb	r1, [r2, #0]
    8c58:	461a      	mov	r2, r3
    8c5a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    8c5e:	4d45      	ldr	r5, [pc, #276]	; (8d74 <usb_serial_write.part.0+0x1a8>)
    8c60:	02c9      	lsls	r1, r1, #11
    8c62:	4428      	add	r0, r5
		if (size >= tx_available) {
    8c64:	9d01      	ldr	r5, [sp, #4]
    8c66:	4295      	cmp	r5, r2
    8c68:	d217      	bcs.n	8c9a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    8c6a:	9303      	str	r3, [sp, #12]
    8c6c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    8c70:	462a      	mov	r2, r5
    8c72:	f7fe fefb 	bl	7a6c <memcpy>
			tx_available -= size;
    8c76:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8c78:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    8c7c:	1b5b      	subs	r3, r3, r5
    8c7e:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8c82:	4b3d      	ldr	r3, [pc, #244]	; (8d78 <usb_serial_write.part.0+0x1ac>)
    8c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    8c88:	f3bf 8f4f 	dsb	sy
			sent += size;
    8c8c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    8c8e:	2300      	movs	r3, #0
			sent += size;
    8c90:	4428      	add	r0, r5
		tx_noautoflush = 0;
    8c92:	7023      	strb	r3, [r4, #0]
}
    8c94:	b005      	add	sp, #20
    8c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8c9a:	4b36      	ldr	r3, [pc, #216]	; (8d74 <usb_serial_write.part.0+0x1a8>)
    8c9c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    8c9e:	9902      	ldr	r1, [sp, #8]
    8ca0:	f7fe fee4 	bl	7a6c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    8ca4:	2300      	movs	r3, #0
    8ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8caa:	4629      	mov	r1, r5
    8cac:	4648      	mov	r0, r9
    8cae:	f7ff fd81 	bl	87b4 <usb_prepare_transfer>
	asm("dsb");
    8cb2:	f3bf 8f4f 	dsb	sy
    8cb6:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    8cba:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    8cbe:	4293      	cmp	r3, r2
    8cc0:	bf34      	ite	cc
    8cc2:	2301      	movcc	r3, #1
    8cc4:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    8cc6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    8cca:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    8cce:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    8cd2:	3520      	adds	r5, #32
	} while (location < end_addr);
    8cd4:	42ab      	cmp	r3, r5
    8cd6:	d1fa      	bne.n	8cce <usb_serial_write.part.0+0x102>
	asm("dsb");
    8cd8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8cdc:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8ce0:	2003      	movs	r0, #3
    8ce2:	4649      	mov	r1, r9
    8ce4:	f7ff fd7e 	bl	87e4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8ce8:	4a20      	ldr	r2, [pc, #128]	; (8d6c <usb_serial_write.part.0+0x1a0>)
    8cea:	7813      	ldrb	r3, [r2, #0]
    8cec:	3301      	adds	r3, #1
    8cee:	b2db      	uxtb	r3, r3
    8cf0:	2b03      	cmp	r3, #3
    8cf2:	bf84      	itt	hi
    8cf4:	2300      	movhi	r3, #0
    8cf6:	4a1d      	ldrhi	r2, [pc, #116]	; (8d6c <usb_serial_write.part.0+0x1a0>)
    8cf8:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    8cfa:	f8b8 3000 	ldrh.w	r3, [r8]
    8cfe:	9a01      	ldr	r2, [sp, #4]
    8d00:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    8d02:	9a00      	ldr	r2, [sp, #0]
    8d04:	441a      	add	r2, r3
			size -= tx_available;
    8d06:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    8d08:	9200      	str	r2, [sp, #0]
			data += tx_available;
    8d0a:	9a02      	ldr	r2, [sp, #8]
    8d0c:	441a      	add	r2, r3
			tx_available = 0;
    8d0e:	2300      	movs	r3, #0
			data += tx_available;
    8d10:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    8d12:	4a19      	ldr	r2, [pc, #100]	; (8d78 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    8d14:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    8d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    8d1c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    8d20:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    8d22:	2900      	cmp	r1, #0
    8d24:	f47f af62 	bne.w	8bec <usb_serial_write.part.0+0x20>
	return sent;
    8d28:	9800      	ldr	r0, [sp, #0]
}
    8d2a:	b005      	add	sp, #20
    8d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    8d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8d34:	4b0d      	ldr	r3, [pc, #52]	; (8d6c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    8d36:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8d3a:	7819      	ldrb	r1, [r3, #0]
				break;
    8d3c:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    8d3e:	f8a8 2000 	strh.w	r2, [r8]
				break;
    8d42:	e78a      	b.n	8c5a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    8d44:	2301      	movs	r3, #1
				return sent;
    8d46:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    8d48:	f88a 3000 	strb.w	r3, [sl]
}
    8d4c:	b005      	add	sp, #20
    8d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8d52:	461a      	mov	r2, r3
    8d54:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8d58:	e77f      	b.n	8c5a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    8d5a:	9801      	ldr	r0, [sp, #4]
	return sent;
    8d5c:	e7e5      	b.n	8d2a <usb_serial_write.part.0+0x15e>
    8d5e:	bf00      	nop
    8d60:	200274e8 	.word	0x200274e8
    8d64:	20027494 	.word	0x20027494
    8d68:	20009500 	.word	0x20009500
    8d6c:	200274e7 	.word	0x200274e7
    8d70:	200274ea 	.word	0x200274ea
    8d74:	20202880 	.word	0x20202880
    8d78:	402e0000 	.word	0x402e0000
    8d7c:	200274d0 	.word	0x200274d0
    8d80:	200274e5 	.word	0x200274e5

00008d84 <usb_serial_reset>:
}
    8d84:	4770      	bx	lr
    8d86:	bf00      	nop

00008d88 <usb_serial_configure>:
	if (usb_high_speed) {
    8d88:	4b2d      	ldr	r3, [pc, #180]	; (8e40 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8d8a:	2100      	movs	r1, #0
    8d8c:	2280      	movs	r2, #128	; 0x80
    8d8e:	482d      	ldr	r0, [pc, #180]	; (8e44 <usb_serial_configure+0xbc>)
{
    8d90:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    8d92:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    8d94:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    8d96:	4d2c      	ldr	r5, [pc, #176]	; (8e48 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    8d98:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    8d9a:	4e2c      	ldr	r6, [pc, #176]	; (8e4c <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    8d9c:	bf0c      	ite	eq
    8d9e:	2340      	moveq	r3, #64	; 0x40
    8da0:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    8da4:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    8da6:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8da8:	f002 fc30 	bl	b60c <memset>
	tx_head = 0;
    8dac:	4a28      	ldr	r2, [pc, #160]	; (8e50 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8dae:	4621      	mov	r1, r4
	tx_available = 0;
    8db0:	4b28      	ldr	r3, [pc, #160]	; (8e54 <usb_serial_configure+0xcc>)
	tx_head = 0;
    8db2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8db4:	f44f 7280 	mov.w	r2, #256	; 0x100
    8db8:	4827      	ldr	r0, [pc, #156]	; (8e58 <usb_serial_configure+0xd0>)
	tx_available = 0;
    8dba:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8dbc:	f002 fc26 	bl	b60c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8dc0:	4a26      	ldr	r2, [pc, #152]	; (8e5c <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8dc2:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    8dc4:	4b26      	ldr	r3, [pc, #152]	; (8e60 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8dc6:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    8dc8:	e9c2 4400 	strd	r4, r4, [r2]
    8dcc:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    8dd0:	4a24      	ldr	r2, [pc, #144]	; (8e64 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    8dd2:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    8dd6:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    8dd8:	4a23      	ldr	r2, [pc, #140]	; (8e68 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    8dda:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    8dde:	4b23      	ldr	r3, [pc, #140]	; (8e6c <usb_serial_configure+0xe4>)
    8de0:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8de2:	4623      	mov	r3, r4
	rx_available = 0;
    8de4:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8de6:	4622      	mov	r2, r4
    8de8:	f7ff fcb2 	bl	8750 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    8dec:	4622      	mov	r2, r4
    8dee:	8831      	ldrh	r1, [r6, #0]
    8df0:	2003      	movs	r0, #3
    8df2:	4b1f      	ldr	r3, [pc, #124]	; (8e70 <usb_serial_configure+0xe8>)
    8df4:	f7ff fc7a 	bl	86ec <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    8df8:	4623      	mov	r3, r4
    8dfa:	2201      	movs	r2, #1
    8dfc:	8829      	ldrh	r1, [r5, #0]
    8dfe:	2003      	movs	r0, #3
    8e00:	f7ff fca6 	bl	8750 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8e04:	4620      	mov	r0, r4
    8e06:	3401      	adds	r4, #1
    8e08:	f7ff fe0e 	bl	8a28 <rx_queue_transfer>
    8e0c:	2c08      	cmp	r4, #8
    8e0e:	d1f9      	bne.n	8e04 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    8e10:	4b18      	ldr	r3, [pc, #96]	; (8e74 <usb_serial_configure+0xec>)
    8e12:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    8e14:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    8e16:	4818      	ldr	r0, [pc, #96]	; (8e78 <usb_serial_configure+0xf0>)
    8e18:	4c18      	ldr	r4, [pc, #96]	; (8e7c <usb_serial_configure+0xf4>)
    8e1a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    8e1c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8e24:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    8e28:	4915      	ldr	r1, [pc, #84]	; (8e80 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8e2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    8e2e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    8e32:	b121      	cbz	r1, 8e3e <usb_serial_configure+0xb6>
    8e34:	4a13      	ldr	r2, [pc, #76]	; (8e84 <usb_serial_configure+0xfc>)
    8e36:	7813      	ldrb	r3, [r2, #0]
    8e38:	f043 0301 	orr.w	r3, r3, #1
    8e3c:	7013      	strb	r3, [r2, #0]
}
    8e3e:	bd70      	pop	{r4, r5, r6, pc}
    8e40:	200274eb 	.word	0x200274eb
    8e44:	20009500 	.word	0x20009500
    8e48:	200274d4 	.word	0x200274d4
    8e4c:	200274cc 	.word	0x200274cc
    8e50:	200274e7 	.word	0x200274e7
    8e54:	200274d0 	.word	0x200274d0
    8e58:	20009380 	.word	0x20009380
    8e5c:	20026f68 	.word	0x20026f68
    8e60:	20026f78 	.word	0x20026f78
    8e64:	200274e1 	.word	0x200274e1
    8e68:	20026f64 	.word	0x20026f64
    8e6c:	200274e3 	.word	0x200274e3
    8e70:	00008a89 	.word	0x00008a89
    8e74:	402e0000 	.word	0x402e0000
    8e78:	200274b8 	.word	0x200274b8
    8e7c:	00008b3d 	.word	0x00008b3d
    8e80:	00000000 	.word	0x00000000
    8e84:	200274ed 	.word	0x200274ed

00008e88 <usb_serial_read>:
{
    8e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    8e94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8f60 <usb_serial_read+0xd8>
{
    8e98:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e9a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    8e9e:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    8ea0:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    8ea4:	2900      	cmp	r1, #0
    8ea6:	d04f      	beq.n	8f48 <usb_serial_read+0xc0>
    8ea8:	4680      	mov	r8, r0
    8eaa:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    8eac:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    8eae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8f64 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    8eb2:	4b26      	ldr	r3, [pc, #152]	; (8f4c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    8eb4:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8eb8:	4925      	ldr	r1, [pc, #148]	; (8f50 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    8eba:	781b      	ldrb	r3, [r3, #0]
    8ebc:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    8ebe:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    8ec2:	d03f      	beq.n	8f44 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    8ec4:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    8ec6:	4b23      	ldr	r3, [pc, #140]	; (8f54 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8ec8:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    8eca:	bf28      	it	cs
    8ecc:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    8ece:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    8ed0:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8ed4:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    8ed8:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    8eda:	4b1f      	ldr	r3, [pc, #124]	; (8f58 <usb_serial_read+0xd0>)
    8edc:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    8ee0:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    8ee4:	42aa      	cmp	r2, r5
    8ee6:	d21c      	bcs.n	8f22 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8ee8:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    8eec:	4918      	ldr	r1, [pc, #96]	; (8f50 <usb_serial_read+0xc8>)
			rx_available -= len;
    8eee:	4c1b      	ldr	r4, [pc, #108]	; (8f5c <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8ef0:	4461      	add	r1, ip
    8ef2:	9201      	str	r2, [sp, #4]
    8ef4:	f7fe fdba 	bl	7a6c <memcpy>
			rx_available -= len;
    8ef8:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    8efa:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    8efe:	4658      	mov	r0, fp
			rx_index[i] += len;
    8f00:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    8f02:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    8f06:	442a      	add	r2, r5
			rx_available -= len;
    8f08:	4439      	add	r1, r7
			rx_index[i] += len;
    8f0a:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    8f0e:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8f10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8f14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8f18:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    8f1c:	b003      	add	sp, #12
    8f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8f22:	462a      	mov	r2, r5
			count += avail;
    8f24:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8f26:	f7fe fda1 	bl	7a6c <memcpy>
			rx_available -= avail;
    8f2a:	490c      	ldr	r1, [pc, #48]	; (8f5c <usb_serial_read+0xd4>)
			rx_tail = tail;
    8f2c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    8f2e:	4630      	mov	r0, r6
			rx_available -= avail;
    8f30:	680a      	ldr	r2, [r1, #0]
			p += avail;
    8f32:	44a8      	add	r8, r5
			rx_available -= avail;
    8f34:	1b52      	subs	r2, r2, r5
    8f36:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    8f38:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    8f3c:	f7ff fd74 	bl	8a28 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    8f40:	45bb      	cmp	fp, r7
    8f42:	d8b6      	bhi.n	8eb2 <usb_serial_read+0x2a>
	return count;
    8f44:	4638      	mov	r0, r7
    8f46:	e7e3      	b.n	8f10 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    8f48:	4608      	mov	r0, r1
    8f4a:	e7e1      	b.n	8f10 <usb_serial_read+0x88>
    8f4c:	200274e1 	.word	0x200274e1
    8f50:	20201880 	.word	0x20201880
    8f54:	20026f90 	.word	0x20026f90
    8f58:	20026f68 	.word	0x20026f68
    8f5c:	20026f64 	.word	0x20026f64
    8f60:	200274e3 	.word	0x200274e3
    8f64:	20026f78 	.word	0x20026f78

00008f68 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    8f68:	4b0b      	ldr	r3, [pc, #44]	; (8f98 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    8f6a:	4a0c      	ldr	r2, [pc, #48]	; (8f9c <usb_serial_peekchar+0x34>)
    8f6c:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    8f6e:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    8f70:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    8f72:	428a      	cmp	r2, r1
    8f74:	d00d      	beq.n	8f92 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8f76:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    8f78:	4809      	ldr	r0, [pc, #36]	; (8fa0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8f7a:	4a0a      	ldr	r2, [pc, #40]	; (8fa4 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    8f7c:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8f7e:	490a      	ldr	r1, [pc, #40]	; (8fa8 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    8f80:	bf28      	it	cs
    8f82:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8f84:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8f86:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    8f8a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    8f8e:	5c58      	ldrb	r0, [r3, r1]
    8f90:	4770      	bx	lr
	if (tail == rx_head) return -1;
    8f92:	f04f 30ff 	mov.w	r0, #4294967295
}
    8f96:	4770      	bx	lr
    8f98:	200274e1 	.word	0x200274e1
    8f9c:	200274e3 	.word	0x200274e3
    8fa0:	20026f90 	.word	0x20026f90
    8fa4:	20201880 	.word	0x20201880
    8fa8:	20026f78 	.word	0x20026f78

00008fac <usb_serial_available>:
	uint32_t n = rx_available;
    8fac:	4b04      	ldr	r3, [pc, #16]	; (8fc0 <usb_serial_available+0x14>)
{
    8fae:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    8fb0:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    8fb2:	b10c      	cbz	r4, 8fb8 <usb_serial_available+0xc>
}
    8fb4:	4620      	mov	r0, r4
    8fb6:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    8fb8:	f000 f8e0 	bl	917c <yield>
}
    8fbc:	4620      	mov	r0, r4
    8fbe:	bd10      	pop	{r4, pc}
    8fc0:	20026f64 	.word	0x20026f64

00008fc4 <usb_serial_flush_input>:
{
    8fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8fc8:	4e14      	ldr	r6, [pc, #80]	; (901c <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    8fca:	4d15      	ldr	r5, [pc, #84]	; (9020 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    8fcc:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    8fce:	782a      	ldrb	r2, [r5, #0]
    8fd0:	4293      	cmp	r3, r2
    8fd2:	d021      	beq.n	9018 <usb_serial_flush_input+0x54>
    8fd4:	b2dc      	uxtb	r4, r3
    8fd6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9028 <usb_serial_flush_input+0x64>
    8fda:	f8df b050 	ldr.w	fp, [pc, #80]	; 902c <usb_serial_flush_input+0x68>
    8fde:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9030 <usb_serial_flush_input+0x6c>
    8fe2:	4f10      	ldr	r7, [pc, #64]	; (9024 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    8fe4:	3401      	adds	r4, #1
    8fe6:	2c08      	cmp	r4, #8
		rx_tail = tail;
    8fe8:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    8fec:	d901      	bls.n	8ff2 <usb_serial_flush_input+0x2e>
    8fee:	2400      	movs	r4, #0
    8ff0:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    8ff2:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8ff6:	f8db 3000 	ldr.w	r3, [fp]
    8ffa:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    8ffe:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    9002:	1a52      	subs	r2, r2, r1
    9004:	1a9b      	subs	r3, r3, r2
    9006:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    900a:	f7ff fd0d 	bl	8a28 <rx_queue_transfer>
		rx_tail = tail;
    900e:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    9012:	782b      	ldrb	r3, [r5, #0]
    9014:	42a3      	cmp	r3, r4
    9016:	d1e5      	bne.n	8fe4 <usb_serial_flush_input+0x20>
}
    9018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    901c:	200274e3 	.word	0x200274e3
    9020:	200274e1 	.word	0x200274e1
    9024:	20026f78 	.word	0x20026f78
    9028:	20026f90 	.word	0x20026f90
    902c:	20026f64 	.word	0x20026f64
    9030:	20026f68 	.word	0x20026f68

00009034 <usb_serial_getchar>:
{
    9034:	b500      	push	{lr}
    9036:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    9038:	2101      	movs	r1, #1
    903a:	f10d 0007 	add.w	r0, sp, #7
    903e:	f7ff ff23 	bl	8e88 <usb_serial_read>
    9042:	b120      	cbz	r0, 904e <usb_serial_getchar+0x1a>
    9044:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    9048:	b003      	add	sp, #12
    904a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    904e:	f04f 30ff 	mov.w	r0, #4294967295
    9052:	e7f9      	b.n	9048 <usb_serial_getchar+0x14>

00009054 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    9054:	4b09      	ldr	r3, [pc, #36]	; (907c <usb_serial_putchar+0x28>)
{
    9056:	b500      	push	{lr}
    9058:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    905a:	781b      	ldrb	r3, [r3, #0]
{
    905c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    9060:	b13b      	cbz	r3, 9072 <usb_serial_putchar+0x1e>
    9062:	2101      	movs	r1, #1
    9064:	f10d 0007 	add.w	r0, sp, #7
    9068:	f7ff fdb0 	bl	8bcc <usb_serial_write.part.0>
}
    906c:	b003      	add	sp, #12
    906e:	f85d fb04 	ldr.w	pc, [sp], #4
    9072:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9076:	b003      	add	sp, #12
    9078:	f85d fb04 	ldr.w	pc, [sp], #4
    907c:	200274ea 	.word	0x200274ea

00009080 <usb_serial_write>:
	if (!usb_configuration) return 0;
    9080:	4b04      	ldr	r3, [pc, #16]	; (9094 <usb_serial_write+0x14>)
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    9088:	b10b      	cbz	r3, 908e <usb_serial_write+0xe>
    908a:	f7ff bd9f 	b.w	8bcc <usb_serial_write.part.0>
}
    908e:	4610      	mov	r0, r2
    9090:	4770      	bx	lr
    9092:	bf00      	nop
    9094:	200274ea 	.word	0x200274ea

00009098 <usb_serial_write_buffer_free>:
{
    9098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    909c:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    909e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 90e4 <usb_serial_write_buffer_free+0x4c>
    90a2:	2301      	movs	r3, #1
    90a4:	4d0d      	ldr	r5, [pc, #52]	; (90dc <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    90a6:	4627      	mov	r7, r4
    90a8:	4e0d      	ldr	r6, [pc, #52]	; (90e0 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    90aa:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    90ae:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    90b0:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    90b2:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    90b4:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    90b6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    90ba:	d005      	beq.n	90c8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    90bc:	f7ff fbb4 	bl	8828 <usb_transfer_status>
    90c0:	0603      	lsls	r3, r0, #24
    90c2:	bf58      	it	pl
    90c4:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    90c8:	2c04      	cmp	r4, #4
    90ca:	d1f0      	bne.n	90ae <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    90cc:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    90d0:	2300      	movs	r3, #0
}
    90d2:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    90d4:	f888 3000 	strb.w	r3, [r8]
}
    90d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90dc:	20009500 	.word	0x20009500
    90e0:	200274e7 	.word	0x200274e7
    90e4:	200274e8 	.word	0x200274e8

000090e8 <usb_serial_flush_output>:
{
    90e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    90ec:	4b1d      	ldr	r3, [pc, #116]	; (9164 <usb_serial_flush_output+0x7c>)
    90ee:	781b      	ldrb	r3, [r3, #0]
    90f0:	b113      	cbz	r3, 90f8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    90f2:	4d1d      	ldr	r5, [pc, #116]	; (9168 <usb_serial_flush_output+0x80>)
    90f4:	882a      	ldrh	r2, [r5, #0]
    90f6:	b90a      	cbnz	r2, 90fc <usb_serial_flush_output+0x14>
}
    90f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    90fc:	4e1b      	ldr	r6, [pc, #108]	; (916c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    90fe:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9102:	491b      	ldr	r1, [pc, #108]	; (9170 <usb_serial_flush_output+0x88>)
    9104:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9106:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9108:	4c1a      	ldr	r4, [pc, #104]	; (9174 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    910a:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    910e:	4f1a      	ldr	r7, [pc, #104]	; (9178 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9110:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    9114:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9116:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    9118:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    911a:	4621      	mov	r1, r4
    911c:	2300      	movs	r3, #0
    911e:	f7ff fb49 	bl	87b4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9122:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    9126:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    912a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    912e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9132:	3420      	adds	r4, #32
	} while (location < end_addr);
    9134:	42a2      	cmp	r2, r4
    9136:	d8fa      	bhi.n	912e <usb_serial_flush_output+0x46>
	asm("dsb");
    9138:	f3bf 8f4f 	dsb	sy
	asm("isb");
    913c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9140:	2003      	movs	r0, #3
    9142:	4641      	mov	r1, r8
    9144:	f7ff fb4e 	bl	87e4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9148:	7833      	ldrb	r3, [r6, #0]
    914a:	3301      	adds	r3, #1
    914c:	b2db      	uxtb	r3, r3
    914e:	2b03      	cmp	r3, #3
    9150:	bf88      	it	hi
    9152:	2300      	movhi	r3, #0
    9154:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9156:	2300      	movs	r3, #0
    9158:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    915a:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    915e:	703b      	strb	r3, [r7, #0]
}
    9160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9164:	200274ea 	.word	0x200274ea
    9168:	200274d0 	.word	0x200274d0
    916c:	200274e7 	.word	0x200274e7
    9170:	20009500 	.word	0x20009500
    9174:	20202880 	.word	0x20202880
    9178:	200274e8 	.word	0x200274e8

0000917c <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    917c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    9180:	4b2d      	ldr	r3, [pc, #180]	; (9238 <yield+0xbc>)
    9182:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    9184:	b166      	cbz	r6, 91a0 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    9186:	4f2d      	ldr	r7, [pc, #180]	; (923c <yield+0xc0>)
    9188:	783b      	ldrb	r3, [r7, #0]
    918a:	b94b      	cbnz	r3, 91a0 <yield+0x24>
	running = 1;
    918c:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    918e:	07f1      	lsls	r1, r6, #31
	running = 1;
    9190:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    9192:	d443      	bmi.n	921c <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    9194:	07b2      	lsls	r2, r6, #30
    9196:	d426      	bmi.n	91e6 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    9198:	2300      	movs	r3, #0
    919a:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    919c:	0773      	lsls	r3, r6, #29
    919e:	d401      	bmi.n	91a4 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    91a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    91a4:	4b26      	ldr	r3, [pc, #152]	; (9240 <yield+0xc4>)
    91a6:	681a      	ldr	r2, [r3, #0]
    91a8:	2a00      	cmp	r2, #0
    91aa:	d0f9      	beq.n	91a0 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    91ac:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    91b0:	2a00      	cmp	r2, #0
    91b2:	d1f5      	bne.n	91a0 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    91b4:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    91b8:	b672      	cpsid	i
		EventResponder *first = firstYield;
    91ba:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    91bc:	2800      	cmp	r0, #0
    91be:	d034      	beq.n	922a <yield+0xae>
		if (runningFromYield) {
    91c0:	4c20      	ldr	r4, [pc, #128]	; (9244 <yield+0xc8>)
    91c2:	7821      	ldrb	r1, [r4, #0]
    91c4:	2900      	cmp	r1, #0
    91c6:	d130      	bne.n	922a <yield+0xae>
		runningFromYield = true;
    91c8:	2201      	movs	r2, #1
    91ca:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    91cc:	6942      	ldr	r2, [r0, #20]
    91ce:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    91d0:	2a00      	cmp	r2, #0
    91d2:	d02e      	beq.n	9232 <yield+0xb6>
			firstYield->_prev = nullptr;
    91d4:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    91d6:	b905      	cbnz	r5, 91da <yield+0x5e>
    91d8:	b662      	cpsie	i
		first->_triggered = false;
    91da:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    91dc:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    91de:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    91e0:	4798      	blx	r3
		runningFromYield = false;
    91e2:	7025      	strb	r5, [r4, #0]
    91e4:	e7dc      	b.n	91a0 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    91e6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 924c <yield+0xd0>
    91ea:	f898 3000 	ldrb.w	r3, [r8]
    91ee:	2b00      	cmp	r3, #0
    91f0:	d0d2      	beq.n	9198 <yield+0x1c>
    91f2:	2500      	movs	r5, #0
    91f4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 9250 <yield+0xd4>
    91f8:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    91fa:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    91fe:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9200:	6823      	ldr	r3, [r4, #0]
    9202:	4620      	mov	r0, r4
    9204:	691b      	ldr	r3, [r3, #16]
    9206:	4798      	blx	r3
    9208:	b110      	cbz	r0, 9210 <yield+0x94>
    920a:	6963      	ldr	r3, [r4, #20]
    920c:	689b      	ldr	r3, [r3, #8]
    920e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9210:	f898 2000 	ldrb.w	r2, [r8]
    9214:	b2eb      	uxtb	r3, r5
    9216:	429a      	cmp	r2, r3
    9218:	d8ef      	bhi.n	91fa <yield+0x7e>
    921a:	e7bd      	b.n	9198 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    921c:	f7ff fec6 	bl	8fac <usb_serial_available>
		if (Serial.available()) serialEvent();
    9220:	2800      	cmp	r0, #0
    9222:	d0b7      	beq.n	9194 <yield+0x18>
    9224:	f3af 8000 	nop.w
    9228:	e7b4      	b.n	9194 <yield+0x18>
		if (doit) __enable_irq();
    922a:	2d00      	cmp	r5, #0
    922c:	d1b8      	bne.n	91a0 <yield+0x24>
    922e:	b662      	cpsie	i
    9230:	e7b6      	b.n	91a0 <yield+0x24>
			lastYield = nullptr;
    9232:	4b05      	ldr	r3, [pc, #20]	; (9248 <yield+0xcc>)
    9234:	601a      	str	r2, [r3, #0]
    9236:	e7ce      	b.n	91d6 <yield+0x5a>
    9238:	200274ed 	.word	0x200274ed
    923c:	200274dd 	.word	0x200274dd
    9240:	2002687c 	.word	0x2002687c
    9244:	200274db 	.word	0x200274db
    9248:	20026888 	.word	0x20026888
    924c:	200274dc 	.word	0x200274dc
    9250:	2002688c 	.word	0x2002688c

00009254 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9254:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    9256:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9258:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    925c:	4619      	mov	r1, r3
{
    925e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9260:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9264:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9268:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    926c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    9270:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    9274:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    9276:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    927a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    927e:	b29b      	uxth	r3, r3
    9280:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    9284:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9288:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    928c:	3101      	adds	r1, #1
    928e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    9292:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9294:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9296:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    929a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    929c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    929e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    92a0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    92a2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    92a6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    92a8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    92aa:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    92ac:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    92ae:	d1eb      	bne.n	9288 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    92b0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    92b4:	b29b      	uxth	r3, r3
    92b6:	f043 030f 	orr.w	r3, r3, #15
    92ba:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    92be:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    92c2:	b29b      	uxth	r3, r3
    92c4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    92c8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    92cc:	bd10      	pop	{r4, pc}
    92ce:	bf00      	nop

000092d0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    92d0:	4b37      	ldr	r3, [pc, #220]	; (93b0 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    92d2:	4a38      	ldr	r2, [pc, #224]	; (93b4 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    92d4:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    92d6:	4838      	ldr	r0, [pc, #224]	; (93b8 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    92d8:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    92dc:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    92de:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    92e0:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    92e4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    92e8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    92ec:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    92f0:	430a      	orrs	r2, r1
    92f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    92f6:	f7ff ffad 	bl	9254 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    92fa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    92fe:	f7ff ffa9 	bl	9254 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    9302:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    9306:	f7ff ffa5 	bl	9254 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    930a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    930e:	f7ff ffa1 	bl	9254 <flexpwm_init>
	for (i=0; i < 4; i++) {
    9312:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9314:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9318:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    931c:	4611      	mov	r1, r2
    931e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9322:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9326:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9328:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    932a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    932c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    932e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9332:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9334:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9336:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    933a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    933c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    933e:	d1ee      	bne.n	931e <pwm_init+0x4e>
    9340:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    9342:	481e      	ldr	r0, [pc, #120]	; (93bc <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9344:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9348:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    934c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    934e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9352:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    9356:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    935a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    935e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9360:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9362:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    9364:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9366:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    936a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    936c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    936e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    9372:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9374:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    9376:	d1ee      	bne.n	9356 <pwm_init+0x86>
    9378:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    937a:	4811      	ldr	r0, [pc, #68]	; (93c0 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    937c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    937e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    9382:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9384:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9388:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    938c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    9390:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    9394:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9396:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    9398:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    939a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    939c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    939e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    93a0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    93a2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    93a6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    93a8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    93ac:	d1ee      	bne.n	938c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    93ae:	bd70      	pop	{r4, r5, r6, pc}
    93b0:	400fc000 	.word	0x400fc000
    93b4:	fc030000 	.word	0xfc030000
    93b8:	403dc000 	.word	0x403dc000
    93bc:	401e0000 	.word	0x401e0000
    93c0:	401e4000 	.word	0x401e4000

000093c4 <sm_align_pool>:
{
    93c4:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    93c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    93ca:	b15b      	cbz	r3, 93e4 <sm_align_pool+0x20>
    93cc:	b1ba      	cbz	r2, 93fe <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    93ce:	4b0f      	ldr	r3, [pc, #60]	; (940c <sm_align_pool+0x48>)
    93d0:	fba3 1302 	umull	r1, r3, r3, r2
    93d4:	08db      	lsrs	r3, r3, #3
    93d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    93da:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    93de:	d10a      	bne.n	93f6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    93e0:	2001      	movs	r0, #1
}
    93e2:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    93e4:	4b09      	ldr	r3, [pc, #36]	; (940c <sm_align_pool+0x48>)
    93e6:	fba3 1302 	umull	r1, r3, r3, r2
    93ea:	08db      	lsrs	r3, r3, #3
    93ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    93f0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    93f4:	d001      	beq.n	93fa <sm_align_pool+0x36>
    93f6:	1ad2      	subs	r2, r2, r3
    93f8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    93fa:	2af0      	cmp	r2, #240	; 0xf0
    93fc:	d8f0      	bhi.n	93e0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    93fe:	f002 fa3b 	bl	b878 <__errno>
    9402:	221c      	movs	r2, #28
    9404:	4603      	mov	r3, r0
    9406:	2000      	movs	r0, #0
    9408:	601a      	str	r2, [r3, #0]
}
    940a:	bd08      	pop	{r3, pc}
    940c:	aaaaaaab 	.word	0xaaaaaaab

00009410 <sm_set_pool>:
{
    9410:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    9412:	4604      	mov	r4, r0
    9414:	b338      	cbz	r0, 9466 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    9416:	b119      	cbz	r1, 9420 <sm_set_pool+0x10>
    9418:	fab2 f682 	clz	r6, r2
    941c:	0976      	lsrs	r6, r6, #5
    941e:	b9a2      	cbnz	r2, 944a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    9420:	6820      	ldr	r0, [r4, #0]
    9422:	b300      	cbz	r0, 9466 <sm_set_pool+0x56>
    9424:	6862      	ldr	r2, [r4, #4]
    9426:	b1f2      	cbz	r2, 9466 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    9428:	4b18      	ldr	r3, [pc, #96]	; (948c <sm_set_pool+0x7c>)
    942a:	4919      	ldr	r1, [pc, #100]	; (9490 <sm_set_pool+0x80>)
    942c:	fb02 f303 	mul.w	r3, r2, r3
    9430:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    9434:	d317      	bcc.n	9466 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    9436:	68a3      	ldr	r3, [r4, #8]
    9438:	b9e3      	cbnz	r3, 9474 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    943a:	2200      	movs	r2, #0
			return 1;
    943c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    943e:	6022      	str	r2, [r4, #0]
    9440:	6062      	str	r2, [r4, #4]
    9442:	60a2      	str	r2, [r4, #8]
    9444:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    9446:	4618      	mov	r0, r3
    9448:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    944a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    944c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    944e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    9452:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    9454:	f7ff ffb6 	bl	93c4 <sm_align_pool>
    9458:	4603      	mov	r3, r0
    945a:	2800      	cmp	r0, #0
    945c:	d0f3      	beq.n	9446 <sm_set_pool+0x36>
	if (do_zero) {
    945e:	b96d      	cbnz	r5, 947c <sm_set_pool+0x6c>
	return 1;
    9460:	2301      	movs	r3, #1
}
    9462:	4618      	mov	r0, r3
    9464:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    9466:	f002 fa07 	bl	b878 <__errno>
    946a:	2216      	movs	r2, #22
		return 0;
    946c:	2300      	movs	r3, #0
		errno = EINVAL;
    946e:	6002      	str	r2, [r0, #0]
}
    9470:	4618      	mov	r0, r3
    9472:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    9474:	2100      	movs	r1, #0
    9476:	f002 f8c9 	bl	b60c <memset>
    947a:	e7de      	b.n	943a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    947c:	6862      	ldr	r2, [r4, #4]
    947e:	4631      	mov	r1, r6
    9480:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    9482:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    9484:	f002 f8c2 	bl	b60c <memset>
	return 1;
    9488:	2301      	movs	r3, #1
    948a:	e7dc      	b.n	9446 <sm_set_pool+0x36>
    948c:	aaaaaaab 	.word	0xaaaaaaab
    9490:	15555555 	.word	0x15555555

00009494 <__aeabi_atexit>:
    9494:	4603      	mov	r3, r0
    9496:	4608      	mov	r0, r1
    9498:	4619      	mov	r1, r3
    949a:	f001 be27 	b.w	b0ec <__cxa_atexit>
    949e:	bf00      	nop

000094a0 <__aeabi_uldivmod>:
    94a0:	b953      	cbnz	r3, 94b8 <__aeabi_uldivmod+0x18>
    94a2:	b94a      	cbnz	r2, 94b8 <__aeabi_uldivmod+0x18>
    94a4:	2900      	cmp	r1, #0
    94a6:	bf08      	it	eq
    94a8:	2800      	cmpeq	r0, #0
    94aa:	bf1c      	itt	ne
    94ac:	f04f 31ff 	movne.w	r1, #4294967295
    94b0:	f04f 30ff 	movne.w	r0, #4294967295
    94b4:	f000 b970 	b.w	9798 <__aeabi_idiv0>
    94b8:	f1ad 0c08 	sub.w	ip, sp, #8
    94bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    94c0:	f000 f806 	bl	94d0 <__udivmoddi4>
    94c4:	f8dd e004 	ldr.w	lr, [sp, #4]
    94c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    94cc:	b004      	add	sp, #16
    94ce:	4770      	bx	lr

000094d0 <__udivmoddi4>:
    94d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94d4:	9e08      	ldr	r6, [sp, #32]
    94d6:	460d      	mov	r5, r1
    94d8:	4604      	mov	r4, r0
    94da:	460f      	mov	r7, r1
    94dc:	2b00      	cmp	r3, #0
    94de:	d14a      	bne.n	9576 <__udivmoddi4+0xa6>
    94e0:	428a      	cmp	r2, r1
    94e2:	4694      	mov	ip, r2
    94e4:	d965      	bls.n	95b2 <__udivmoddi4+0xe2>
    94e6:	fab2 f382 	clz	r3, r2
    94ea:	b143      	cbz	r3, 94fe <__udivmoddi4+0x2e>
    94ec:	fa02 fc03 	lsl.w	ip, r2, r3
    94f0:	f1c3 0220 	rsb	r2, r3, #32
    94f4:	409f      	lsls	r7, r3
    94f6:	fa20 f202 	lsr.w	r2, r0, r2
    94fa:	4317      	orrs	r7, r2
    94fc:	409c      	lsls	r4, r3
    94fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    9502:	fa1f f58c 	uxth.w	r5, ip
    9506:	fbb7 f1fe 	udiv	r1, r7, lr
    950a:	0c22      	lsrs	r2, r4, #16
    950c:	fb0e 7711 	mls	r7, lr, r1, r7
    9510:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    9514:	fb01 f005 	mul.w	r0, r1, r5
    9518:	4290      	cmp	r0, r2
    951a:	d90a      	bls.n	9532 <__udivmoddi4+0x62>
    951c:	eb1c 0202 	adds.w	r2, ip, r2
    9520:	f101 37ff 	add.w	r7, r1, #4294967295
    9524:	f080 811c 	bcs.w	9760 <__udivmoddi4+0x290>
    9528:	4290      	cmp	r0, r2
    952a:	f240 8119 	bls.w	9760 <__udivmoddi4+0x290>
    952e:	3902      	subs	r1, #2
    9530:	4462      	add	r2, ip
    9532:	1a12      	subs	r2, r2, r0
    9534:	b2a4      	uxth	r4, r4
    9536:	fbb2 f0fe 	udiv	r0, r2, lr
    953a:	fb0e 2210 	mls	r2, lr, r0, r2
    953e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9542:	fb00 f505 	mul.w	r5, r0, r5
    9546:	42a5      	cmp	r5, r4
    9548:	d90a      	bls.n	9560 <__udivmoddi4+0x90>
    954a:	eb1c 0404 	adds.w	r4, ip, r4
    954e:	f100 32ff 	add.w	r2, r0, #4294967295
    9552:	f080 8107 	bcs.w	9764 <__udivmoddi4+0x294>
    9556:	42a5      	cmp	r5, r4
    9558:	f240 8104 	bls.w	9764 <__udivmoddi4+0x294>
    955c:	4464      	add	r4, ip
    955e:	3802      	subs	r0, #2
    9560:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    9564:	1b64      	subs	r4, r4, r5
    9566:	2100      	movs	r1, #0
    9568:	b11e      	cbz	r6, 9572 <__udivmoddi4+0xa2>
    956a:	40dc      	lsrs	r4, r3
    956c:	2300      	movs	r3, #0
    956e:	e9c6 4300 	strd	r4, r3, [r6]
    9572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9576:	428b      	cmp	r3, r1
    9578:	d908      	bls.n	958c <__udivmoddi4+0xbc>
    957a:	2e00      	cmp	r6, #0
    957c:	f000 80ed 	beq.w	975a <__udivmoddi4+0x28a>
    9580:	2100      	movs	r1, #0
    9582:	e9c6 0500 	strd	r0, r5, [r6]
    9586:	4608      	mov	r0, r1
    9588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    958c:	fab3 f183 	clz	r1, r3
    9590:	2900      	cmp	r1, #0
    9592:	d149      	bne.n	9628 <__udivmoddi4+0x158>
    9594:	42ab      	cmp	r3, r5
    9596:	d302      	bcc.n	959e <__udivmoddi4+0xce>
    9598:	4282      	cmp	r2, r0
    959a:	f200 80f8 	bhi.w	978e <__udivmoddi4+0x2be>
    959e:	1a84      	subs	r4, r0, r2
    95a0:	eb65 0203 	sbc.w	r2, r5, r3
    95a4:	2001      	movs	r0, #1
    95a6:	4617      	mov	r7, r2
    95a8:	2e00      	cmp	r6, #0
    95aa:	d0e2      	beq.n	9572 <__udivmoddi4+0xa2>
    95ac:	e9c6 4700 	strd	r4, r7, [r6]
    95b0:	e7df      	b.n	9572 <__udivmoddi4+0xa2>
    95b2:	b902      	cbnz	r2, 95b6 <__udivmoddi4+0xe6>
    95b4:	deff      	udf	#255	; 0xff
    95b6:	fab2 f382 	clz	r3, r2
    95ba:	2b00      	cmp	r3, #0
    95bc:	f040 8090 	bne.w	96e0 <__udivmoddi4+0x210>
    95c0:	1a8a      	subs	r2, r1, r2
    95c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    95c6:	fa1f fe8c 	uxth.w	lr, ip
    95ca:	2101      	movs	r1, #1
    95cc:	fbb2 f5f7 	udiv	r5, r2, r7
    95d0:	fb07 2015 	mls	r0, r7, r5, r2
    95d4:	0c22      	lsrs	r2, r4, #16
    95d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    95da:	fb0e f005 	mul.w	r0, lr, r5
    95de:	4290      	cmp	r0, r2
    95e0:	d908      	bls.n	95f4 <__udivmoddi4+0x124>
    95e2:	eb1c 0202 	adds.w	r2, ip, r2
    95e6:	f105 38ff 	add.w	r8, r5, #4294967295
    95ea:	d202      	bcs.n	95f2 <__udivmoddi4+0x122>
    95ec:	4290      	cmp	r0, r2
    95ee:	f200 80cb 	bhi.w	9788 <__udivmoddi4+0x2b8>
    95f2:	4645      	mov	r5, r8
    95f4:	1a12      	subs	r2, r2, r0
    95f6:	b2a4      	uxth	r4, r4
    95f8:	fbb2 f0f7 	udiv	r0, r2, r7
    95fc:	fb07 2210 	mls	r2, r7, r0, r2
    9600:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    9604:	fb0e fe00 	mul.w	lr, lr, r0
    9608:	45a6      	cmp	lr, r4
    960a:	d908      	bls.n	961e <__udivmoddi4+0x14e>
    960c:	eb1c 0404 	adds.w	r4, ip, r4
    9610:	f100 32ff 	add.w	r2, r0, #4294967295
    9614:	d202      	bcs.n	961c <__udivmoddi4+0x14c>
    9616:	45a6      	cmp	lr, r4
    9618:	f200 80bb 	bhi.w	9792 <__udivmoddi4+0x2c2>
    961c:	4610      	mov	r0, r2
    961e:	eba4 040e 	sub.w	r4, r4, lr
    9622:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    9626:	e79f      	b.n	9568 <__udivmoddi4+0x98>
    9628:	f1c1 0720 	rsb	r7, r1, #32
    962c:	408b      	lsls	r3, r1
    962e:	fa22 fc07 	lsr.w	ip, r2, r7
    9632:	ea4c 0c03 	orr.w	ip, ip, r3
    9636:	fa05 f401 	lsl.w	r4, r5, r1
    963a:	fa20 f307 	lsr.w	r3, r0, r7
    963e:	40fd      	lsrs	r5, r7
    9640:	ea4f 491c 	mov.w	r9, ip, lsr #16
    9644:	4323      	orrs	r3, r4
    9646:	fbb5 f8f9 	udiv	r8, r5, r9
    964a:	fa1f fe8c 	uxth.w	lr, ip
    964e:	fb09 5518 	mls	r5, r9, r8, r5
    9652:	0c1c      	lsrs	r4, r3, #16
    9654:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    9658:	fb08 f50e 	mul.w	r5, r8, lr
    965c:	42a5      	cmp	r5, r4
    965e:	fa02 f201 	lsl.w	r2, r2, r1
    9662:	fa00 f001 	lsl.w	r0, r0, r1
    9666:	d90b      	bls.n	9680 <__udivmoddi4+0x1b0>
    9668:	eb1c 0404 	adds.w	r4, ip, r4
    966c:	f108 3aff 	add.w	sl, r8, #4294967295
    9670:	f080 8088 	bcs.w	9784 <__udivmoddi4+0x2b4>
    9674:	42a5      	cmp	r5, r4
    9676:	f240 8085 	bls.w	9784 <__udivmoddi4+0x2b4>
    967a:	f1a8 0802 	sub.w	r8, r8, #2
    967e:	4464      	add	r4, ip
    9680:	1b64      	subs	r4, r4, r5
    9682:	b29d      	uxth	r5, r3
    9684:	fbb4 f3f9 	udiv	r3, r4, r9
    9688:	fb09 4413 	mls	r4, r9, r3, r4
    968c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    9690:	fb03 fe0e 	mul.w	lr, r3, lr
    9694:	45a6      	cmp	lr, r4
    9696:	d908      	bls.n	96aa <__udivmoddi4+0x1da>
    9698:	eb1c 0404 	adds.w	r4, ip, r4
    969c:	f103 35ff 	add.w	r5, r3, #4294967295
    96a0:	d26c      	bcs.n	977c <__udivmoddi4+0x2ac>
    96a2:	45a6      	cmp	lr, r4
    96a4:	d96a      	bls.n	977c <__udivmoddi4+0x2ac>
    96a6:	3b02      	subs	r3, #2
    96a8:	4464      	add	r4, ip
    96aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    96ae:	fba3 9502 	umull	r9, r5, r3, r2
    96b2:	eba4 040e 	sub.w	r4, r4, lr
    96b6:	42ac      	cmp	r4, r5
    96b8:	46c8      	mov	r8, r9
    96ba:	46ae      	mov	lr, r5
    96bc:	d356      	bcc.n	976c <__udivmoddi4+0x29c>
    96be:	d053      	beq.n	9768 <__udivmoddi4+0x298>
    96c0:	b156      	cbz	r6, 96d8 <__udivmoddi4+0x208>
    96c2:	ebb0 0208 	subs.w	r2, r0, r8
    96c6:	eb64 040e 	sbc.w	r4, r4, lr
    96ca:	fa04 f707 	lsl.w	r7, r4, r7
    96ce:	40ca      	lsrs	r2, r1
    96d0:	40cc      	lsrs	r4, r1
    96d2:	4317      	orrs	r7, r2
    96d4:	e9c6 7400 	strd	r7, r4, [r6]
    96d8:	4618      	mov	r0, r3
    96da:	2100      	movs	r1, #0
    96dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    96e0:	f1c3 0120 	rsb	r1, r3, #32
    96e4:	fa02 fc03 	lsl.w	ip, r2, r3
    96e8:	fa20 f201 	lsr.w	r2, r0, r1
    96ec:	fa25 f101 	lsr.w	r1, r5, r1
    96f0:	409d      	lsls	r5, r3
    96f2:	432a      	orrs	r2, r5
    96f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    96f8:	fa1f fe8c 	uxth.w	lr, ip
    96fc:	fbb1 f0f7 	udiv	r0, r1, r7
    9700:	fb07 1510 	mls	r5, r7, r0, r1
    9704:	0c11      	lsrs	r1, r2, #16
    9706:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    970a:	fb00 f50e 	mul.w	r5, r0, lr
    970e:	428d      	cmp	r5, r1
    9710:	fa04 f403 	lsl.w	r4, r4, r3
    9714:	d908      	bls.n	9728 <__udivmoddi4+0x258>
    9716:	eb1c 0101 	adds.w	r1, ip, r1
    971a:	f100 38ff 	add.w	r8, r0, #4294967295
    971e:	d22f      	bcs.n	9780 <__udivmoddi4+0x2b0>
    9720:	428d      	cmp	r5, r1
    9722:	d92d      	bls.n	9780 <__udivmoddi4+0x2b0>
    9724:	3802      	subs	r0, #2
    9726:	4461      	add	r1, ip
    9728:	1b49      	subs	r1, r1, r5
    972a:	b292      	uxth	r2, r2
    972c:	fbb1 f5f7 	udiv	r5, r1, r7
    9730:	fb07 1115 	mls	r1, r7, r5, r1
    9734:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9738:	fb05 f10e 	mul.w	r1, r5, lr
    973c:	4291      	cmp	r1, r2
    973e:	d908      	bls.n	9752 <__udivmoddi4+0x282>
    9740:	eb1c 0202 	adds.w	r2, ip, r2
    9744:	f105 38ff 	add.w	r8, r5, #4294967295
    9748:	d216      	bcs.n	9778 <__udivmoddi4+0x2a8>
    974a:	4291      	cmp	r1, r2
    974c:	d914      	bls.n	9778 <__udivmoddi4+0x2a8>
    974e:	3d02      	subs	r5, #2
    9750:	4462      	add	r2, ip
    9752:	1a52      	subs	r2, r2, r1
    9754:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    9758:	e738      	b.n	95cc <__udivmoddi4+0xfc>
    975a:	4631      	mov	r1, r6
    975c:	4630      	mov	r0, r6
    975e:	e708      	b.n	9572 <__udivmoddi4+0xa2>
    9760:	4639      	mov	r1, r7
    9762:	e6e6      	b.n	9532 <__udivmoddi4+0x62>
    9764:	4610      	mov	r0, r2
    9766:	e6fb      	b.n	9560 <__udivmoddi4+0x90>
    9768:	4548      	cmp	r0, r9
    976a:	d2a9      	bcs.n	96c0 <__udivmoddi4+0x1f0>
    976c:	ebb9 0802 	subs.w	r8, r9, r2
    9770:	eb65 0e0c 	sbc.w	lr, r5, ip
    9774:	3b01      	subs	r3, #1
    9776:	e7a3      	b.n	96c0 <__udivmoddi4+0x1f0>
    9778:	4645      	mov	r5, r8
    977a:	e7ea      	b.n	9752 <__udivmoddi4+0x282>
    977c:	462b      	mov	r3, r5
    977e:	e794      	b.n	96aa <__udivmoddi4+0x1da>
    9780:	4640      	mov	r0, r8
    9782:	e7d1      	b.n	9728 <__udivmoddi4+0x258>
    9784:	46d0      	mov	r8, sl
    9786:	e77b      	b.n	9680 <__udivmoddi4+0x1b0>
    9788:	3d02      	subs	r5, #2
    978a:	4462      	add	r2, ip
    978c:	e732      	b.n	95f4 <__udivmoddi4+0x124>
    978e:	4608      	mov	r0, r1
    9790:	e70a      	b.n	95a8 <__udivmoddi4+0xd8>
    9792:	4464      	add	r4, ip
    9794:	3802      	subs	r0, #2
    9796:	e742      	b.n	961e <__udivmoddi4+0x14e>

00009798 <__aeabi_idiv0>:
    9798:	4770      	bx	lr
    979a:	bf00      	nop

0000979c <malloc>:
    979c:	4b02      	ldr	r3, [pc, #8]	; (97a8 <malloc+0xc>)
    979e:	4601      	mov	r1, r0
    97a0:	6818      	ldr	r0, [r3, #0]
    97a2:	f000 b80b 	b.w	97bc <_malloc_r>
    97a6:	bf00      	nop
    97a8:	20008c78 	.word	0x20008c78

000097ac <free>:
    97ac:	4b02      	ldr	r3, [pc, #8]	; (97b8 <free+0xc>)
    97ae:	4601      	mov	r1, r0
    97b0:	6818      	ldr	r0, [r3, #0]
    97b2:	f002 bbd7 	b.w	bf64 <_free_r>
    97b6:	bf00      	nop
    97b8:	20008c78 	.word	0x20008c78

000097bc <_malloc_r>:
    97bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97c0:	f101 060b 	add.w	r6, r1, #11
    97c4:	2e16      	cmp	r6, #22
    97c6:	b083      	sub	sp, #12
    97c8:	4604      	mov	r4, r0
    97ca:	d824      	bhi.n	9816 <_malloc_r+0x5a>
    97cc:	2910      	cmp	r1, #16
    97ce:	f200 80ba 	bhi.w	9946 <_malloc_r+0x18a>
    97d2:	f000 faa3 	bl	9d1c <__malloc_lock>
    97d6:	2610      	movs	r6, #16
    97d8:	2218      	movs	r2, #24
    97da:	2002      	movs	r0, #2
    97dc:	4fb5      	ldr	r7, [pc, #724]	; (9ab4 <_malloc_r+0x2f8>)
    97de:	443a      	add	r2, r7
    97e0:	f1a2 0108 	sub.w	r1, r2, #8
    97e4:	6853      	ldr	r3, [r2, #4]
    97e6:	428b      	cmp	r3, r1
    97e8:	f000 80ba 	beq.w	9960 <_malloc_r+0x1a4>
    97ec:	685a      	ldr	r2, [r3, #4]
    97ee:	68d9      	ldr	r1, [r3, #12]
    97f0:	f022 0203 	bic.w	r2, r2, #3
    97f4:	441a      	add	r2, r3
    97f6:	689d      	ldr	r5, [r3, #8]
    97f8:	60e9      	str	r1, [r5, #12]
    97fa:	608d      	str	r5, [r1, #8]
    97fc:	6851      	ldr	r1, [r2, #4]
    97fe:	f041 0101 	orr.w	r1, r1, #1
    9802:	4620      	mov	r0, r4
    9804:	6051      	str	r1, [r2, #4]
    9806:	f103 0508 	add.w	r5, r3, #8
    980a:	f000 fa8d 	bl	9d28 <__malloc_unlock>
    980e:	4628      	mov	r0, r5
    9810:	b003      	add	sp, #12
    9812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9816:	f036 0607 	bics.w	r6, r6, #7
    981a:	f100 8094 	bmi.w	9946 <_malloc_r+0x18a>
    981e:	42b1      	cmp	r1, r6
    9820:	f200 8091 	bhi.w	9946 <_malloc_r+0x18a>
    9824:	f000 fa7a 	bl	9d1c <__malloc_lock>
    9828:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    982c:	f0c0 819a 	bcc.w	9b64 <_malloc_r+0x3a8>
    9830:	0a73      	lsrs	r3, r6, #9
    9832:	f000 808f 	beq.w	9954 <_malloc_r+0x198>
    9836:	2b04      	cmp	r3, #4
    9838:	f200 816f 	bhi.w	9b1a <_malloc_r+0x35e>
    983c:	09b3      	lsrs	r3, r6, #6
    983e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    9842:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    9846:	00c3      	lsls	r3, r0, #3
    9848:	4f9a      	ldr	r7, [pc, #616]	; (9ab4 <_malloc_r+0x2f8>)
    984a:	443b      	add	r3, r7
    984c:	f1a3 0508 	sub.w	r5, r3, #8
    9850:	685b      	ldr	r3, [r3, #4]
    9852:	429d      	cmp	r5, r3
    9854:	d106      	bne.n	9864 <_malloc_r+0xa8>
    9856:	e00c      	b.n	9872 <_malloc_r+0xb6>
    9858:	2900      	cmp	r1, #0
    985a:	f280 8127 	bge.w	9aac <_malloc_r+0x2f0>
    985e:	68db      	ldr	r3, [r3, #12]
    9860:	429d      	cmp	r5, r3
    9862:	d006      	beq.n	9872 <_malloc_r+0xb6>
    9864:	685a      	ldr	r2, [r3, #4]
    9866:	f022 0203 	bic.w	r2, r2, #3
    986a:	1b91      	subs	r1, r2, r6
    986c:	290f      	cmp	r1, #15
    986e:	ddf3      	ble.n	9858 <_malloc_r+0x9c>
    9870:	4660      	mov	r0, ip
    9872:	693d      	ldr	r5, [r7, #16]
    9874:	f8df c250 	ldr.w	ip, [pc, #592]	; 9ac8 <_malloc_r+0x30c>
    9878:	4565      	cmp	r5, ip
    987a:	d07c      	beq.n	9976 <_malloc_r+0x1ba>
    987c:	686a      	ldr	r2, [r5, #4]
    987e:	f022 0203 	bic.w	r2, r2, #3
    9882:	1b93      	subs	r3, r2, r6
    9884:	2b0f      	cmp	r3, #15
    9886:	f300 817b 	bgt.w	9b80 <_malloc_r+0x3c4>
    988a:	2b00      	cmp	r3, #0
    988c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    9890:	f280 816c 	bge.w	9b6c <_malloc_r+0x3b0>
    9894:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9898:	f080 811a 	bcs.w	9ad0 <_malloc_r+0x314>
    989c:	08d3      	lsrs	r3, r2, #3
    989e:	6879      	ldr	r1, [r7, #4]
    98a0:	3301      	adds	r3, #1
    98a2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    98a6:	2201      	movs	r2, #1
    98a8:	fa02 f20e 	lsl.w	r2, r2, lr
    98ac:	430a      	orrs	r2, r1
    98ae:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    98b2:	f8c5 e008 	str.w	lr, [r5, #8]
    98b6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    98ba:	3908      	subs	r1, #8
    98bc:	60e9      	str	r1, [r5, #12]
    98be:	607a      	str	r2, [r7, #4]
    98c0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    98c4:	f8ce 500c 	str.w	r5, [lr, #12]
    98c8:	1083      	asrs	r3, r0, #2
    98ca:	2101      	movs	r1, #1
    98cc:	4099      	lsls	r1, r3
    98ce:	4291      	cmp	r1, r2
    98d0:	d857      	bhi.n	9982 <_malloc_r+0x1c6>
    98d2:	4211      	tst	r1, r2
    98d4:	d106      	bne.n	98e4 <_malloc_r+0x128>
    98d6:	f020 0003 	bic.w	r0, r0, #3
    98da:	0049      	lsls	r1, r1, #1
    98dc:	4211      	tst	r1, r2
    98de:	f100 0004 	add.w	r0, r0, #4
    98e2:	d0fa      	beq.n	98da <_malloc_r+0x11e>
    98e4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    98e8:	464d      	mov	r5, r9
    98ea:	4686      	mov	lr, r0
    98ec:	f8d5 800c 	ldr.w	r8, [r5, #12]
    98f0:	4545      	cmp	r5, r8
    98f2:	d108      	bne.n	9906 <_malloc_r+0x14a>
    98f4:	e11d      	b.n	9b32 <_malloc_r+0x376>
    98f6:	2b00      	cmp	r3, #0
    98f8:	f280 8124 	bge.w	9b44 <_malloc_r+0x388>
    98fc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    9900:	4545      	cmp	r5, r8
    9902:	f000 8116 	beq.w	9b32 <_malloc_r+0x376>
    9906:	f8d8 2004 	ldr.w	r2, [r8, #4]
    990a:	f022 0203 	bic.w	r2, r2, #3
    990e:	1b93      	subs	r3, r2, r6
    9910:	2b0f      	cmp	r3, #15
    9912:	ddf0      	ble.n	98f6 <_malloc_r+0x13a>
    9914:	4620      	mov	r0, r4
    9916:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    991a:	eb08 0106 	add.w	r1, r8, r6
    991e:	f046 0601 	orr.w	r6, r6, #1
    9922:	f8c8 6004 	str.w	r6, [r8, #4]
    9926:	60ec      	str	r4, [r5, #12]
    9928:	60a5      	str	r5, [r4, #8]
    992a:	f043 0401 	orr.w	r4, r3, #1
    992e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9932:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9936:	604c      	str	r4, [r1, #4]
    9938:	f848 3002 	str.w	r3, [r8, r2]
    993c:	f000 f9f4 	bl	9d28 <__malloc_unlock>
    9940:	f108 0508 	add.w	r5, r8, #8
    9944:	e002      	b.n	994c <_malloc_r+0x190>
    9946:	230c      	movs	r3, #12
    9948:	6023      	str	r3, [r4, #0]
    994a:	2500      	movs	r5, #0
    994c:	4628      	mov	r0, r5
    994e:	b003      	add	sp, #12
    9950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9954:	f44f 7300 	mov.w	r3, #512	; 0x200
    9958:	2040      	movs	r0, #64	; 0x40
    995a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    995e:	e773      	b.n	9848 <_malloc_r+0x8c>
    9960:	68d3      	ldr	r3, [r2, #12]
    9962:	429a      	cmp	r2, r3
    9964:	bf08      	it	eq
    9966:	3002      	addeq	r0, #2
    9968:	f47f af40 	bne.w	97ec <_malloc_r+0x30>
    996c:	693d      	ldr	r5, [r7, #16]
    996e:	f8df c158 	ldr.w	ip, [pc, #344]	; 9ac8 <_malloc_r+0x30c>
    9972:	4565      	cmp	r5, ip
    9974:	d182      	bne.n	987c <_malloc_r+0xc0>
    9976:	687a      	ldr	r2, [r7, #4]
    9978:	1083      	asrs	r3, r0, #2
    997a:	2101      	movs	r1, #1
    997c:	4099      	lsls	r1, r3
    997e:	4291      	cmp	r1, r2
    9980:	d9a7      	bls.n	98d2 <_malloc_r+0x116>
    9982:	68bd      	ldr	r5, [r7, #8]
    9984:	686b      	ldr	r3, [r5, #4]
    9986:	f023 0903 	bic.w	r9, r3, #3
    998a:	454e      	cmp	r6, r9
    998c:	d803      	bhi.n	9996 <_malloc_r+0x1da>
    998e:	eba9 0306 	sub.w	r3, r9, r6
    9992:	2b0f      	cmp	r3, #15
    9994:	dc7a      	bgt.n	9a8c <_malloc_r+0x2d0>
    9996:	f8df b134 	ldr.w	fp, [pc, #308]	; 9acc <_malloc_r+0x310>
    999a:	4b47      	ldr	r3, [pc, #284]	; (9ab8 <_malloc_r+0x2fc>)
    999c:	f8db 2000 	ldr.w	r2, [fp]
    99a0:	681b      	ldr	r3, [r3, #0]
    99a2:	3201      	adds	r2, #1
    99a4:	4433      	add	r3, r6
    99a6:	eb05 0a09 	add.w	sl, r5, r9
    99aa:	f000 8133 	beq.w	9c14 <_malloc_r+0x458>
    99ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    99b2:	330f      	adds	r3, #15
    99b4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    99b8:	f028 080f 	bic.w	r8, r8, #15
    99bc:	4641      	mov	r1, r8
    99be:	4620      	mov	r0, r4
    99c0:	f001 ff32 	bl	b828 <_sbrk_r>
    99c4:	1c41      	adds	r1, r0, #1
    99c6:	4602      	mov	r2, r0
    99c8:	f000 80f3 	beq.w	9bb2 <_malloc_r+0x3f6>
    99cc:	4582      	cmp	sl, r0
    99ce:	f200 80ee 	bhi.w	9bae <_malloc_r+0x3f2>
    99d2:	4b3a      	ldr	r3, [pc, #232]	; (9abc <_malloc_r+0x300>)
    99d4:	6819      	ldr	r1, [r3, #0]
    99d6:	4441      	add	r1, r8
    99d8:	6019      	str	r1, [r3, #0]
    99da:	4608      	mov	r0, r1
    99dc:	f000 814e 	beq.w	9c7c <_malloc_r+0x4c0>
    99e0:	f8db 1000 	ldr.w	r1, [fp]
    99e4:	9301      	str	r3, [sp, #4]
    99e6:	3101      	adds	r1, #1
    99e8:	bf1b      	ittet	ne
    99ea:	eba2 010a 	subne.w	r1, r2, sl
    99ee:	1809      	addne	r1, r1, r0
    99f0:	f8cb 2000 	streq.w	r2, [fp]
    99f4:	6019      	strne	r1, [r3, #0]
    99f6:	f012 0b07 	ands.w	fp, r2, #7
    99fa:	f000 8117 	beq.w	9c2c <_malloc_r+0x470>
    99fe:	f1cb 0108 	rsb	r1, fp, #8
    9a02:	440a      	add	r2, r1
    9a04:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    9a08:	4490      	add	r8, r2
    9a0a:	3108      	adds	r1, #8
    9a0c:	eba1 0108 	sub.w	r1, r1, r8
    9a10:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9a14:	4651      	mov	r1, sl
    9a16:	4620      	mov	r0, r4
    9a18:	9200      	str	r2, [sp, #0]
    9a1a:	f001 ff05 	bl	b828 <_sbrk_r>
    9a1e:	1c42      	adds	r2, r0, #1
    9a20:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a24:	f000 814f 	beq.w	9cc6 <_malloc_r+0x50a>
    9a28:	1a80      	subs	r0, r0, r2
    9a2a:	eb00 080a 	add.w	r8, r0, sl
    9a2e:	6819      	ldr	r1, [r3, #0]
    9a30:	60ba      	str	r2, [r7, #8]
    9a32:	f048 0001 	orr.w	r0, r8, #1
    9a36:	4451      	add	r1, sl
    9a38:	42bd      	cmp	r5, r7
    9a3a:	6050      	str	r0, [r2, #4]
    9a3c:	6019      	str	r1, [r3, #0]
    9a3e:	f000 8129 	beq.w	9c94 <_malloc_r+0x4d8>
    9a42:	f1b9 0f0f 	cmp.w	r9, #15
    9a46:	f240 8127 	bls.w	9c98 <_malloc_r+0x4dc>
    9a4a:	6868      	ldr	r0, [r5, #4]
    9a4c:	f1a9 0c0c 	sub.w	ip, r9, #12
    9a50:	f02c 0c07 	bic.w	ip, ip, #7
    9a54:	f000 0001 	and.w	r0, r0, #1
    9a58:	ea40 000c 	orr.w	r0, r0, ip
    9a5c:	6068      	str	r0, [r5, #4]
    9a5e:	f04f 0e05 	mov.w	lr, #5
    9a62:	eb05 000c 	add.w	r0, r5, ip
    9a66:	f1bc 0f0f 	cmp.w	ip, #15
    9a6a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    9a6e:	f200 8132 	bhi.w	9cd6 <_malloc_r+0x51a>
    9a72:	6850      	ldr	r0, [r2, #4]
    9a74:	4615      	mov	r5, r2
    9a76:	4b12      	ldr	r3, [pc, #72]	; (9ac0 <_malloc_r+0x304>)
    9a78:	681a      	ldr	r2, [r3, #0]
    9a7a:	428a      	cmp	r2, r1
    9a7c:	bf38      	it	cc
    9a7e:	6019      	strcc	r1, [r3, #0]
    9a80:	4b10      	ldr	r3, [pc, #64]	; (9ac4 <_malloc_r+0x308>)
    9a82:	681a      	ldr	r2, [r3, #0]
    9a84:	428a      	cmp	r2, r1
    9a86:	bf38      	it	cc
    9a88:	6019      	strcc	r1, [r3, #0]
    9a8a:	e094      	b.n	9bb6 <_malloc_r+0x3fa>
    9a8c:	19aa      	adds	r2, r5, r6
    9a8e:	f043 0301 	orr.w	r3, r3, #1
    9a92:	f046 0601 	orr.w	r6, r6, #1
    9a96:	606e      	str	r6, [r5, #4]
    9a98:	4620      	mov	r0, r4
    9a9a:	60ba      	str	r2, [r7, #8]
    9a9c:	6053      	str	r3, [r2, #4]
    9a9e:	f000 f943 	bl	9d28 <__malloc_unlock>
    9aa2:	3508      	adds	r5, #8
    9aa4:	4628      	mov	r0, r5
    9aa6:	b003      	add	sp, #12
    9aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9aac:	68d9      	ldr	r1, [r3, #12]
    9aae:	441a      	add	r2, r3
    9ab0:	e6a1      	b.n	97f6 <_malloc_r+0x3a>
    9ab2:	bf00      	nop
    9ab4:	2000885c 	.word	0x2000885c
    9ab8:	20026aec 	.word	0x20026aec
    9abc:	20026abc 	.word	0x20026abc
    9ac0:	20026ae4 	.word	0x20026ae4
    9ac4:	20026ae8 	.word	0x20026ae8
    9ac8:	20008864 	.word	0x20008864
    9acc:	20008c64 	.word	0x20008c64
    9ad0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    9ad4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    9ad8:	d363      	bcc.n	9ba2 <_malloc_r+0x3e6>
    9ada:	2b14      	cmp	r3, #20
    9adc:	f200 80b7 	bhi.w	9c4e <_malloc_r+0x492>
    9ae0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    9ae4:	00c9      	lsls	r1, r1, #3
    9ae6:	335b      	adds	r3, #91	; 0x5b
    9ae8:	eb07 0e01 	add.w	lr, r7, r1
    9aec:	5879      	ldr	r1, [r7, r1]
    9aee:	f1ae 0e08 	sub.w	lr, lr, #8
    9af2:	458e      	cmp	lr, r1
    9af4:	f000 8091 	beq.w	9c1a <_malloc_r+0x45e>
    9af8:	684b      	ldr	r3, [r1, #4]
    9afa:	f023 0303 	bic.w	r3, r3, #3
    9afe:	4293      	cmp	r3, r2
    9b00:	d902      	bls.n	9b08 <_malloc_r+0x34c>
    9b02:	6889      	ldr	r1, [r1, #8]
    9b04:	458e      	cmp	lr, r1
    9b06:	d1f7      	bne.n	9af8 <_malloc_r+0x33c>
    9b08:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    9b0c:	687a      	ldr	r2, [r7, #4]
    9b0e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    9b12:	f8ce 5008 	str.w	r5, [lr, #8]
    9b16:	60cd      	str	r5, [r1, #12]
    9b18:	e6d6      	b.n	98c8 <_malloc_r+0x10c>
    9b1a:	2b14      	cmp	r3, #20
    9b1c:	d959      	bls.n	9bd2 <_malloc_r+0x416>
    9b1e:	2b54      	cmp	r3, #84	; 0x54
    9b20:	f200 809d 	bhi.w	9c5e <_malloc_r+0x4a2>
    9b24:	0b33      	lsrs	r3, r6, #12
    9b26:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    9b2a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    9b2e:	00c3      	lsls	r3, r0, #3
    9b30:	e68a      	b.n	9848 <_malloc_r+0x8c>
    9b32:	f10e 0e01 	add.w	lr, lr, #1
    9b36:	f01e 0f03 	tst.w	lr, #3
    9b3a:	f105 0508 	add.w	r5, r5, #8
    9b3e:	f47f aed5 	bne.w	98ec <_malloc_r+0x130>
    9b42:	e051      	b.n	9be8 <_malloc_r+0x42c>
    9b44:	4442      	add	r2, r8
    9b46:	4645      	mov	r5, r8
    9b48:	6853      	ldr	r3, [r2, #4]
    9b4a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9b4e:	f043 0301 	orr.w	r3, r3, #1
    9b52:	6053      	str	r3, [r2, #4]
    9b54:	f855 3f08 	ldr.w	r3, [r5, #8]!
    9b58:	4620      	mov	r0, r4
    9b5a:	60d9      	str	r1, [r3, #12]
    9b5c:	608b      	str	r3, [r1, #8]
    9b5e:	f000 f8e3 	bl	9d28 <__malloc_unlock>
    9b62:	e6f3      	b.n	994c <_malloc_r+0x190>
    9b64:	08f0      	lsrs	r0, r6, #3
    9b66:	f106 0208 	add.w	r2, r6, #8
    9b6a:	e637      	b.n	97dc <_malloc_r+0x20>
    9b6c:	442a      	add	r2, r5
    9b6e:	4620      	mov	r0, r4
    9b70:	6853      	ldr	r3, [r2, #4]
    9b72:	f043 0301 	orr.w	r3, r3, #1
    9b76:	6053      	str	r3, [r2, #4]
    9b78:	3508      	adds	r5, #8
    9b7a:	f000 f8d5 	bl	9d28 <__malloc_unlock>
    9b7e:	e6e5      	b.n	994c <_malloc_r+0x190>
    9b80:	19a9      	adds	r1, r5, r6
    9b82:	4620      	mov	r0, r4
    9b84:	f046 0601 	orr.w	r6, r6, #1
    9b88:	f043 0401 	orr.w	r4, r3, #1
    9b8c:	606e      	str	r6, [r5, #4]
    9b8e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    9b92:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    9b96:	604c      	str	r4, [r1, #4]
    9b98:	50ab      	str	r3, [r5, r2]
    9b9a:	f000 f8c5 	bl	9d28 <__malloc_unlock>
    9b9e:	3508      	adds	r5, #8
    9ba0:	e6d4      	b.n	994c <_malloc_r+0x190>
    9ba2:	0993      	lsrs	r3, r2, #6
    9ba4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    9ba8:	00c9      	lsls	r1, r1, #3
    9baa:	3338      	adds	r3, #56	; 0x38
    9bac:	e79c      	b.n	9ae8 <_malloc_r+0x32c>
    9bae:	42bd      	cmp	r5, r7
    9bb0:	d05f      	beq.n	9c72 <_malloc_r+0x4b6>
    9bb2:	68bd      	ldr	r5, [r7, #8]
    9bb4:	6868      	ldr	r0, [r5, #4]
    9bb6:	f020 0803 	bic.w	r8, r0, #3
    9bba:	4546      	cmp	r6, r8
    9bbc:	eba8 0306 	sub.w	r3, r8, r6
    9bc0:	d802      	bhi.n	9bc8 <_malloc_r+0x40c>
    9bc2:	2b0f      	cmp	r3, #15
    9bc4:	f73f af62 	bgt.w	9a8c <_malloc_r+0x2d0>
    9bc8:	4620      	mov	r0, r4
    9bca:	f000 f8ad 	bl	9d28 <__malloc_unlock>
    9bce:	2500      	movs	r5, #0
    9bd0:	e6bc      	b.n	994c <_malloc_r+0x190>
    9bd2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    9bd6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    9bda:	00c3      	lsls	r3, r0, #3
    9bdc:	e634      	b.n	9848 <_malloc_r+0x8c>
    9bde:	f859 3908 	ldr.w	r3, [r9], #-8
    9be2:	454b      	cmp	r3, r9
    9be4:	f040 8096 	bne.w	9d14 <_malloc_r+0x558>
    9be8:	f010 0f03 	tst.w	r0, #3
    9bec:	f100 30ff 	add.w	r0, r0, #4294967295
    9bf0:	d1f5      	bne.n	9bde <_malloc_r+0x422>
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	ea23 0301 	bic.w	r3, r3, r1
    9bf8:	607b      	str	r3, [r7, #4]
    9bfa:	0049      	lsls	r1, r1, #1
    9bfc:	4299      	cmp	r1, r3
    9bfe:	f63f aec0 	bhi.w	9982 <_malloc_r+0x1c6>
    9c02:	b919      	cbnz	r1, 9c0c <_malloc_r+0x450>
    9c04:	e6bd      	b.n	9982 <_malloc_r+0x1c6>
    9c06:	0049      	lsls	r1, r1, #1
    9c08:	f10e 0e04 	add.w	lr, lr, #4
    9c0c:	4219      	tst	r1, r3
    9c0e:	d0fa      	beq.n	9c06 <_malloc_r+0x44a>
    9c10:	4670      	mov	r0, lr
    9c12:	e667      	b.n	98e4 <_malloc_r+0x128>
    9c14:	f103 0810 	add.w	r8, r3, #16
    9c18:	e6d0      	b.n	99bc <_malloc_r+0x200>
    9c1a:	109a      	asrs	r2, r3, #2
    9c1c:	f04f 0801 	mov.w	r8, #1
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	fa08 f202 	lsl.w	r2, r8, r2
    9c26:	431a      	orrs	r2, r3
    9c28:	607a      	str	r2, [r7, #4]
    9c2a:	e770      	b.n	9b0e <_malloc_r+0x352>
    9c2c:	eb02 0108 	add.w	r1, r2, r8
    9c30:	4249      	negs	r1, r1
    9c32:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    9c36:	4651      	mov	r1, sl
    9c38:	4620      	mov	r0, r4
    9c3a:	9200      	str	r2, [sp, #0]
    9c3c:	f001 fdf4 	bl	b828 <_sbrk_r>
    9c40:	1c43      	adds	r3, r0, #1
    9c42:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c46:	f47f aeef 	bne.w	9a28 <_malloc_r+0x26c>
    9c4a:	46da      	mov	sl, fp
    9c4c:	e6ef      	b.n	9a2e <_malloc_r+0x272>
    9c4e:	2b54      	cmp	r3, #84	; 0x54
    9c50:	d825      	bhi.n	9c9e <_malloc_r+0x4e2>
    9c52:	0b13      	lsrs	r3, r2, #12
    9c54:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    9c58:	00c9      	lsls	r1, r1, #3
    9c5a:	336e      	adds	r3, #110	; 0x6e
    9c5c:	e744      	b.n	9ae8 <_malloc_r+0x32c>
    9c5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9c62:	d825      	bhi.n	9cb0 <_malloc_r+0x4f4>
    9c64:	0bf3      	lsrs	r3, r6, #15
    9c66:	f103 0078 	add.w	r0, r3, #120	; 0x78
    9c6a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    9c6e:	00c3      	lsls	r3, r0, #3
    9c70:	e5ea      	b.n	9848 <_malloc_r+0x8c>
    9c72:	4b29      	ldr	r3, [pc, #164]	; (9d18 <_malloc_r+0x55c>)
    9c74:	6818      	ldr	r0, [r3, #0]
    9c76:	4440      	add	r0, r8
    9c78:	6018      	str	r0, [r3, #0]
    9c7a:	e6b1      	b.n	99e0 <_malloc_r+0x224>
    9c7c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    9c80:	f1bc 0f00 	cmp.w	ip, #0
    9c84:	f47f aeac 	bne.w	99e0 <_malloc_r+0x224>
    9c88:	68bd      	ldr	r5, [r7, #8]
    9c8a:	44c8      	add	r8, r9
    9c8c:	f048 0001 	orr.w	r0, r8, #1
    9c90:	6068      	str	r0, [r5, #4]
    9c92:	e6f0      	b.n	9a76 <_malloc_r+0x2ba>
    9c94:	4615      	mov	r5, r2
    9c96:	e6ee      	b.n	9a76 <_malloc_r+0x2ba>
    9c98:	2301      	movs	r3, #1
    9c9a:	6053      	str	r3, [r2, #4]
    9c9c:	e794      	b.n	9bc8 <_malloc_r+0x40c>
    9c9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9ca2:	d823      	bhi.n	9cec <_malloc_r+0x530>
    9ca4:	0bd3      	lsrs	r3, r2, #15
    9ca6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    9caa:	00c9      	lsls	r1, r1, #3
    9cac:	3377      	adds	r3, #119	; 0x77
    9cae:	e71b      	b.n	9ae8 <_malloc_r+0x32c>
    9cb0:	f240 5254 	movw	r2, #1364	; 0x554
    9cb4:	4293      	cmp	r3, r2
    9cb6:	d823      	bhi.n	9d00 <_malloc_r+0x544>
    9cb8:	0cb3      	lsrs	r3, r6, #18
    9cba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    9cbe:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    9cc2:	00c3      	lsls	r3, r0, #3
    9cc4:	e5c0      	b.n	9848 <_malloc_r+0x8c>
    9cc6:	f1ab 0b08 	sub.w	fp, fp, #8
    9cca:	44d8      	add	r8, fp
    9ccc:	eba8 0802 	sub.w	r8, r8, r2
    9cd0:	f04f 0a00 	mov.w	sl, #0
    9cd4:	e6ab      	b.n	9a2e <_malloc_r+0x272>
    9cd6:	f105 0108 	add.w	r1, r5, #8
    9cda:	4620      	mov	r0, r4
    9cdc:	9300      	str	r3, [sp, #0]
    9cde:	f002 f941 	bl	bf64 <_free_r>
    9ce2:	68bd      	ldr	r5, [r7, #8]
    9ce4:	9b00      	ldr	r3, [sp, #0]
    9ce6:	6868      	ldr	r0, [r5, #4]
    9ce8:	6819      	ldr	r1, [r3, #0]
    9cea:	e6c4      	b.n	9a76 <_malloc_r+0x2ba>
    9cec:	f240 5154 	movw	r1, #1364	; 0x554
    9cf0:	428b      	cmp	r3, r1
    9cf2:	d80b      	bhi.n	9d0c <_malloc_r+0x550>
    9cf4:	0c93      	lsrs	r3, r2, #18
    9cf6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    9cfa:	00c9      	lsls	r1, r1, #3
    9cfc:	337c      	adds	r3, #124	; 0x7c
    9cfe:	e6f3      	b.n	9ae8 <_malloc_r+0x32c>
    9d00:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    9d04:	207f      	movs	r0, #127	; 0x7f
    9d06:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    9d0a:	e59d      	b.n	9848 <_malloc_r+0x8c>
    9d0c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    9d10:	237e      	movs	r3, #126	; 0x7e
    9d12:	e6e9      	b.n	9ae8 <_malloc_r+0x32c>
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	e770      	b.n	9bfa <_malloc_r+0x43e>
    9d18:	20026abc 	.word	0x20026abc

00009d1c <__malloc_lock>:
    9d1c:	4801      	ldr	r0, [pc, #4]	; (9d24 <__malloc_lock+0x8>)
    9d1e:	f001 bdd9 	b.w	b8d4 <__retarget_lock_acquire_recursive>
    9d22:	bf00      	nop
    9d24:	20026ab4 	.word	0x20026ab4

00009d28 <__malloc_unlock>:
    9d28:	4801      	ldr	r0, [pc, #4]	; (9d30 <__malloc_unlock+0x8>)
    9d2a:	f001 bdd5 	b.w	b8d8 <__retarget_lock_release_recursive>
    9d2e:	bf00      	nop
    9d30:	20026ab4 	.word	0x20026ab4

00009d34 <realloc>:
    9d34:	b410      	push	{r4}
    9d36:	4c04      	ldr	r4, [pc, #16]	; (9d48 <realloc+0x14>)
    9d38:	4603      	mov	r3, r0
    9d3a:	460a      	mov	r2, r1
    9d3c:	6820      	ldr	r0, [r4, #0]
    9d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9d42:	4619      	mov	r1, r3
    9d44:	f000 b802 	b.w	9d4c <_realloc_r>
    9d48:	20008c78 	.word	0x20008c78

00009d4c <_realloc_r>:
    9d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d50:	4617      	mov	r7, r2
    9d52:	2900      	cmp	r1, #0
    9d54:	f000 8098 	beq.w	9e88 <_realloc_r+0x13c>
    9d58:	460c      	mov	r4, r1
    9d5a:	f107 050b 	add.w	r5, r7, #11
    9d5e:	4680      	mov	r8, r0
    9d60:	f7ff ffdc 	bl	9d1c <__malloc_lock>
    9d64:	2d16      	cmp	r5, #22
    9d66:	f854 1c04 	ldr.w	r1, [r4, #-4]
    9d6a:	d85b      	bhi.n	9e24 <_realloc_r+0xd8>
    9d6c:	2510      	movs	r5, #16
    9d6e:	462a      	mov	r2, r5
    9d70:	42af      	cmp	r7, r5
    9d72:	d85c      	bhi.n	9e2e <_realloc_r+0xe2>
    9d74:	f021 0603 	bic.w	r6, r1, #3
    9d78:	4296      	cmp	r6, r2
    9d7a:	f1a4 0908 	sub.w	r9, r4, #8
    9d7e:	da62      	bge.n	9e46 <_realloc_r+0xfa>
    9d80:	4bbc      	ldr	r3, [pc, #752]	; (a074 <_realloc_r+0x328>)
    9d82:	f8d3 c008 	ldr.w	ip, [r3, #8]
    9d86:	eb09 0006 	add.w	r0, r9, r6
    9d8a:	4584      	cmp	ip, r0
    9d8c:	f000 8097 	beq.w	9ebe <_realloc_r+0x172>
    9d90:	f8d0 c004 	ldr.w	ip, [r0, #4]
    9d94:	f02c 0301 	bic.w	r3, ip, #1
    9d98:	4403      	add	r3, r0
    9d9a:	685b      	ldr	r3, [r3, #4]
    9d9c:	07db      	lsls	r3, r3, #31
    9d9e:	d468      	bmi.n	9e72 <_realloc_r+0x126>
    9da0:	f02c 0c03 	bic.w	ip, ip, #3
    9da4:	eb06 030c 	add.w	r3, r6, ip
    9da8:	4293      	cmp	r3, r2
    9daa:	da47      	bge.n	9e3c <_realloc_r+0xf0>
    9dac:	07cb      	lsls	r3, r1, #31
    9dae:	d410      	bmi.n	9dd2 <_realloc_r+0x86>
    9db0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9db4:	eba9 0a03 	sub.w	sl, r9, r3
    9db8:	f8da 3004 	ldr.w	r3, [sl, #4]
    9dbc:	f023 0103 	bic.w	r1, r3, #3
    9dc0:	448c      	add	ip, r1
    9dc2:	44b4      	add	ip, r6
    9dc4:	4594      	cmp	ip, r2
    9dc6:	f280 8111 	bge.w	9fec <_realloc_r+0x2a0>
    9dca:	1873      	adds	r3, r6, r1
    9dcc:	4293      	cmp	r3, r2
    9dce:	f280 80e8 	bge.w	9fa2 <_realloc_r+0x256>
    9dd2:	4639      	mov	r1, r7
    9dd4:	4640      	mov	r0, r8
    9dd6:	f7ff fcf1 	bl	97bc <_malloc_r>
    9dda:	4607      	mov	r7, r0
    9ddc:	b1e0      	cbz	r0, 9e18 <_realloc_r+0xcc>
    9dde:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9de2:	f023 0301 	bic.w	r3, r3, #1
    9de6:	444b      	add	r3, r9
    9de8:	f1a0 0208 	sub.w	r2, r0, #8
    9dec:	4293      	cmp	r3, r2
    9dee:	f000 80d2 	beq.w	9f96 <_realloc_r+0x24a>
    9df2:	1f32      	subs	r2, r6, #4
    9df4:	2a24      	cmp	r2, #36	; 0x24
    9df6:	f200 80f5 	bhi.w	9fe4 <_realloc_r+0x298>
    9dfa:	2a13      	cmp	r2, #19
    9dfc:	f200 80ac 	bhi.w	9f58 <_realloc_r+0x20c>
    9e00:	4603      	mov	r3, r0
    9e02:	4622      	mov	r2, r4
    9e04:	6811      	ldr	r1, [r2, #0]
    9e06:	6019      	str	r1, [r3, #0]
    9e08:	6851      	ldr	r1, [r2, #4]
    9e0a:	6059      	str	r1, [r3, #4]
    9e0c:	6892      	ldr	r2, [r2, #8]
    9e0e:	609a      	str	r2, [r3, #8]
    9e10:	4621      	mov	r1, r4
    9e12:	4640      	mov	r0, r8
    9e14:	f002 f8a6 	bl	bf64 <_free_r>
    9e18:	4640      	mov	r0, r8
    9e1a:	f7ff ff85 	bl	9d28 <__malloc_unlock>
    9e1e:	4638      	mov	r0, r7
    9e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e24:	f025 0507 	bic.w	r5, r5, #7
    9e28:	2d00      	cmp	r5, #0
    9e2a:	462a      	mov	r2, r5
    9e2c:	daa0      	bge.n	9d70 <_realloc_r+0x24>
    9e2e:	230c      	movs	r3, #12
    9e30:	f8c8 3000 	str.w	r3, [r8]
    9e34:	2700      	movs	r7, #0
    9e36:	4638      	mov	r0, r7
    9e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e3c:	461e      	mov	r6, r3
    9e3e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    9e42:	60d3      	str	r3, [r2, #12]
    9e44:	609a      	str	r2, [r3, #8]
    9e46:	1b73      	subs	r3, r6, r5
    9e48:	2b0f      	cmp	r3, #15
    9e4a:	d822      	bhi.n	9e92 <_realloc_r+0x146>
    9e4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9e50:	f003 0301 	and.w	r3, r3, #1
    9e54:	4333      	orrs	r3, r6
    9e56:	444e      	add	r6, r9
    9e58:	f8c9 3004 	str.w	r3, [r9, #4]
    9e5c:	6873      	ldr	r3, [r6, #4]
    9e5e:	f043 0301 	orr.w	r3, r3, #1
    9e62:	6073      	str	r3, [r6, #4]
    9e64:	4640      	mov	r0, r8
    9e66:	4627      	mov	r7, r4
    9e68:	f7ff ff5e 	bl	9d28 <__malloc_unlock>
    9e6c:	4638      	mov	r0, r7
    9e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e72:	07c9      	lsls	r1, r1, #31
    9e74:	d4ad      	bmi.n	9dd2 <_realloc_r+0x86>
    9e76:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9e7a:	eba9 0a03 	sub.w	sl, r9, r3
    9e7e:	f8da 1004 	ldr.w	r1, [sl, #4]
    9e82:	f021 0103 	bic.w	r1, r1, #3
    9e86:	e7a0      	b.n	9dca <_realloc_r+0x7e>
    9e88:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e8c:	4611      	mov	r1, r2
    9e8e:	f7ff bc95 	b.w	97bc <_malloc_r>
    9e92:	f8d9 2004 	ldr.w	r2, [r9, #4]
    9e96:	eb09 0105 	add.w	r1, r9, r5
    9e9a:	f002 0201 	and.w	r2, r2, #1
    9e9e:	444e      	add	r6, r9
    9ea0:	f043 0301 	orr.w	r3, r3, #1
    9ea4:	432a      	orrs	r2, r5
    9ea6:	f8c9 2004 	str.w	r2, [r9, #4]
    9eaa:	604b      	str	r3, [r1, #4]
    9eac:	6873      	ldr	r3, [r6, #4]
    9eae:	f043 0301 	orr.w	r3, r3, #1
    9eb2:	3108      	adds	r1, #8
    9eb4:	6073      	str	r3, [r6, #4]
    9eb6:	4640      	mov	r0, r8
    9eb8:	f002 f854 	bl	bf64 <_free_r>
    9ebc:	e7d2      	b.n	9e64 <_realloc_r+0x118>
    9ebe:	f8dc 0004 	ldr.w	r0, [ip, #4]
    9ec2:	f020 0b03 	bic.w	fp, r0, #3
    9ec6:	eb06 0c0b 	add.w	ip, r6, fp
    9eca:	f105 0010 	add.w	r0, r5, #16
    9ece:	4584      	cmp	ip, r0
    9ed0:	da4d      	bge.n	9f6e <_realloc_r+0x222>
    9ed2:	07c9      	lsls	r1, r1, #31
    9ed4:	f53f af7d 	bmi.w	9dd2 <_realloc_r+0x86>
    9ed8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    9edc:	eba9 0a01 	sub.w	sl, r9, r1
    9ee0:	f8da 1004 	ldr.w	r1, [sl, #4]
    9ee4:	f021 0103 	bic.w	r1, r1, #3
    9ee8:	448b      	add	fp, r1
    9eea:	44b3      	add	fp, r6
    9eec:	4558      	cmp	r0, fp
    9eee:	f73f af6c 	bgt.w	9dca <_realloc_r+0x7e>
    9ef2:	4657      	mov	r7, sl
    9ef4:	f8da 100c 	ldr.w	r1, [sl, #12]
    9ef8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9efc:	1f32      	subs	r2, r6, #4
    9efe:	2a24      	cmp	r2, #36	; 0x24
    9f00:	60c1      	str	r1, [r0, #12]
    9f02:	6088      	str	r0, [r1, #8]
    9f04:	f200 80db 	bhi.w	a0be <_realloc_r+0x372>
    9f08:	2a13      	cmp	r2, #19
    9f0a:	f240 80d6 	bls.w	a0ba <_realloc_r+0x36e>
    9f0e:	6821      	ldr	r1, [r4, #0]
    9f10:	f8ca 1008 	str.w	r1, [sl, #8]
    9f14:	6861      	ldr	r1, [r4, #4]
    9f16:	f8ca 100c 	str.w	r1, [sl, #12]
    9f1a:	2a1b      	cmp	r2, #27
    9f1c:	f200 80df 	bhi.w	a0de <_realloc_r+0x392>
    9f20:	3408      	adds	r4, #8
    9f22:	f10a 0210 	add.w	r2, sl, #16
    9f26:	6821      	ldr	r1, [r4, #0]
    9f28:	6011      	str	r1, [r2, #0]
    9f2a:	6861      	ldr	r1, [r4, #4]
    9f2c:	6051      	str	r1, [r2, #4]
    9f2e:	68a1      	ldr	r1, [r4, #8]
    9f30:	6091      	str	r1, [r2, #8]
    9f32:	eb0a 0105 	add.w	r1, sl, r5
    9f36:	ebab 0205 	sub.w	r2, fp, r5
    9f3a:	f042 0201 	orr.w	r2, r2, #1
    9f3e:	6099      	str	r1, [r3, #8]
    9f40:	604a      	str	r2, [r1, #4]
    9f42:	f8da 3004 	ldr.w	r3, [sl, #4]
    9f46:	f003 0301 	and.w	r3, r3, #1
    9f4a:	432b      	orrs	r3, r5
    9f4c:	4640      	mov	r0, r8
    9f4e:	f8ca 3004 	str.w	r3, [sl, #4]
    9f52:	f7ff fee9 	bl	9d28 <__malloc_unlock>
    9f56:	e76e      	b.n	9e36 <_realloc_r+0xea>
    9f58:	6823      	ldr	r3, [r4, #0]
    9f5a:	6003      	str	r3, [r0, #0]
    9f5c:	6863      	ldr	r3, [r4, #4]
    9f5e:	6043      	str	r3, [r0, #4]
    9f60:	2a1b      	cmp	r2, #27
    9f62:	d868      	bhi.n	a036 <_realloc_r+0x2ea>
    9f64:	f104 0208 	add.w	r2, r4, #8
    9f68:	f100 0308 	add.w	r3, r0, #8
    9f6c:	e74a      	b.n	9e04 <_realloc_r+0xb8>
    9f6e:	eb09 0205 	add.w	r2, r9, r5
    9f72:	609a      	str	r2, [r3, #8]
    9f74:	ebac 0305 	sub.w	r3, ip, r5
    9f78:	f043 0301 	orr.w	r3, r3, #1
    9f7c:	6053      	str	r3, [r2, #4]
    9f7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9f82:	f003 0301 	and.w	r3, r3, #1
    9f86:	432b      	orrs	r3, r5
    9f88:	4640      	mov	r0, r8
    9f8a:	f844 3c04 	str.w	r3, [r4, #-4]
    9f8e:	f7ff fecb 	bl	9d28 <__malloc_unlock>
    9f92:	4627      	mov	r7, r4
    9f94:	e74f      	b.n	9e36 <_realloc_r+0xea>
    9f96:	f850 3c04 	ldr.w	r3, [r0, #-4]
    9f9a:	f023 0303 	bic.w	r3, r3, #3
    9f9e:	441e      	add	r6, r3
    9fa0:	e751      	b.n	9e46 <_realloc_r+0xfa>
    9fa2:	4657      	mov	r7, sl
    9fa4:	f8da 100c 	ldr.w	r1, [sl, #12]
    9fa8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9fac:	1f32      	subs	r2, r6, #4
    9fae:	2a24      	cmp	r2, #36	; 0x24
    9fb0:	60c1      	str	r1, [r0, #12]
    9fb2:	6088      	str	r0, [r1, #8]
    9fb4:	d84c      	bhi.n	a050 <_realloc_r+0x304>
    9fb6:	2a13      	cmp	r2, #19
    9fb8:	d948      	bls.n	a04c <_realloc_r+0x300>
    9fba:	6821      	ldr	r1, [r4, #0]
    9fbc:	f8ca 1008 	str.w	r1, [sl, #8]
    9fc0:	6861      	ldr	r1, [r4, #4]
    9fc2:	f8ca 100c 	str.w	r1, [sl, #12]
    9fc6:	2a1b      	cmp	r2, #27
    9fc8:	d856      	bhi.n	a078 <_realloc_r+0x32c>
    9fca:	3408      	adds	r4, #8
    9fcc:	f10a 0210 	add.w	r2, sl, #16
    9fd0:	461e      	mov	r6, r3
    9fd2:	6823      	ldr	r3, [r4, #0]
    9fd4:	6013      	str	r3, [r2, #0]
    9fd6:	6863      	ldr	r3, [r4, #4]
    9fd8:	6053      	str	r3, [r2, #4]
    9fda:	68a3      	ldr	r3, [r4, #8]
    9fdc:	6093      	str	r3, [r2, #8]
    9fde:	46d1      	mov	r9, sl
    9fe0:	463c      	mov	r4, r7
    9fe2:	e730      	b.n	9e46 <_realloc_r+0xfa>
    9fe4:	4621      	mov	r1, r4
    9fe6:	f001 fa95 	bl	b514 <memmove>
    9fea:	e711      	b.n	9e10 <_realloc_r+0xc4>
    9fec:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    9ff0:	4657      	mov	r7, sl
    9ff2:	60cb      	str	r3, [r1, #12]
    9ff4:	6099      	str	r1, [r3, #8]
    9ff6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    9ffa:	f8da 300c 	ldr.w	r3, [sl, #12]
    9ffe:	60cb      	str	r3, [r1, #12]
    a000:	1f32      	subs	r2, r6, #4
    a002:	2a24      	cmp	r2, #36	; 0x24
    a004:	6099      	str	r1, [r3, #8]
    a006:	d82d      	bhi.n	a064 <_realloc_r+0x318>
    a008:	2a13      	cmp	r2, #19
    a00a:	d929      	bls.n	a060 <_realloc_r+0x314>
    a00c:	6823      	ldr	r3, [r4, #0]
    a00e:	f8ca 3008 	str.w	r3, [sl, #8]
    a012:	6863      	ldr	r3, [r4, #4]
    a014:	f8ca 300c 	str.w	r3, [sl, #12]
    a018:	2a1b      	cmp	r2, #27
    a01a:	d842      	bhi.n	a0a2 <_realloc_r+0x356>
    a01c:	3408      	adds	r4, #8
    a01e:	f10a 0310 	add.w	r3, sl, #16
    a022:	6822      	ldr	r2, [r4, #0]
    a024:	601a      	str	r2, [r3, #0]
    a026:	6862      	ldr	r2, [r4, #4]
    a028:	605a      	str	r2, [r3, #4]
    a02a:	68a2      	ldr	r2, [r4, #8]
    a02c:	609a      	str	r2, [r3, #8]
    a02e:	4666      	mov	r6, ip
    a030:	46d1      	mov	r9, sl
    a032:	463c      	mov	r4, r7
    a034:	e707      	b.n	9e46 <_realloc_r+0xfa>
    a036:	68a3      	ldr	r3, [r4, #8]
    a038:	6083      	str	r3, [r0, #8]
    a03a:	68e3      	ldr	r3, [r4, #12]
    a03c:	60c3      	str	r3, [r0, #12]
    a03e:	2a24      	cmp	r2, #36	; 0x24
    a040:	d026      	beq.n	a090 <_realloc_r+0x344>
    a042:	f104 0210 	add.w	r2, r4, #16
    a046:	f100 0310 	add.w	r3, r0, #16
    a04a:	e6db      	b.n	9e04 <_realloc_r+0xb8>
    a04c:	463a      	mov	r2, r7
    a04e:	e7bf      	b.n	9fd0 <_realloc_r+0x284>
    a050:	4621      	mov	r1, r4
    a052:	4638      	mov	r0, r7
    a054:	461e      	mov	r6, r3
    a056:	46d1      	mov	r9, sl
    a058:	f001 fa5c 	bl	b514 <memmove>
    a05c:	463c      	mov	r4, r7
    a05e:	e6f2      	b.n	9e46 <_realloc_r+0xfa>
    a060:	463b      	mov	r3, r7
    a062:	e7de      	b.n	a022 <_realloc_r+0x2d6>
    a064:	4621      	mov	r1, r4
    a066:	4638      	mov	r0, r7
    a068:	4666      	mov	r6, ip
    a06a:	46d1      	mov	r9, sl
    a06c:	f001 fa52 	bl	b514 <memmove>
    a070:	463c      	mov	r4, r7
    a072:	e6e8      	b.n	9e46 <_realloc_r+0xfa>
    a074:	2000885c 	.word	0x2000885c
    a078:	68a1      	ldr	r1, [r4, #8]
    a07a:	f8ca 1010 	str.w	r1, [sl, #16]
    a07e:	68e1      	ldr	r1, [r4, #12]
    a080:	f8ca 1014 	str.w	r1, [sl, #20]
    a084:	2a24      	cmp	r2, #36	; 0x24
    a086:	d020      	beq.n	a0ca <_realloc_r+0x37e>
    a088:	3410      	adds	r4, #16
    a08a:	f10a 0218 	add.w	r2, sl, #24
    a08e:	e79f      	b.n	9fd0 <_realloc_r+0x284>
    a090:	6923      	ldr	r3, [r4, #16]
    a092:	6103      	str	r3, [r0, #16]
    a094:	6961      	ldr	r1, [r4, #20]
    a096:	6141      	str	r1, [r0, #20]
    a098:	f104 0218 	add.w	r2, r4, #24
    a09c:	f100 0318 	add.w	r3, r0, #24
    a0a0:	e6b0      	b.n	9e04 <_realloc_r+0xb8>
    a0a2:	68a3      	ldr	r3, [r4, #8]
    a0a4:	f8ca 3010 	str.w	r3, [sl, #16]
    a0a8:	68e3      	ldr	r3, [r4, #12]
    a0aa:	f8ca 3014 	str.w	r3, [sl, #20]
    a0ae:	2a24      	cmp	r2, #36	; 0x24
    a0b0:	d021      	beq.n	a0f6 <_realloc_r+0x3aa>
    a0b2:	3410      	adds	r4, #16
    a0b4:	f10a 0318 	add.w	r3, sl, #24
    a0b8:	e7b3      	b.n	a022 <_realloc_r+0x2d6>
    a0ba:	463a      	mov	r2, r7
    a0bc:	e733      	b.n	9f26 <_realloc_r+0x1da>
    a0be:	4621      	mov	r1, r4
    a0c0:	4638      	mov	r0, r7
    a0c2:	f001 fa27 	bl	b514 <memmove>
    a0c6:	4b16      	ldr	r3, [pc, #88]	; (a120 <_realloc_r+0x3d4>)
    a0c8:	e733      	b.n	9f32 <_realloc_r+0x1e6>
    a0ca:	6922      	ldr	r2, [r4, #16]
    a0cc:	f8ca 2018 	str.w	r2, [sl, #24]
    a0d0:	6962      	ldr	r2, [r4, #20]
    a0d2:	f8ca 201c 	str.w	r2, [sl, #28]
    a0d6:	3418      	adds	r4, #24
    a0d8:	f10a 0220 	add.w	r2, sl, #32
    a0dc:	e778      	b.n	9fd0 <_realloc_r+0x284>
    a0de:	68a1      	ldr	r1, [r4, #8]
    a0e0:	f8ca 1010 	str.w	r1, [sl, #16]
    a0e4:	68e1      	ldr	r1, [r4, #12]
    a0e6:	f8ca 1014 	str.w	r1, [sl, #20]
    a0ea:	2a24      	cmp	r2, #36	; 0x24
    a0ec:	d00d      	beq.n	a10a <_realloc_r+0x3be>
    a0ee:	3410      	adds	r4, #16
    a0f0:	f10a 0218 	add.w	r2, sl, #24
    a0f4:	e717      	b.n	9f26 <_realloc_r+0x1da>
    a0f6:	6923      	ldr	r3, [r4, #16]
    a0f8:	f8ca 3018 	str.w	r3, [sl, #24]
    a0fc:	6963      	ldr	r3, [r4, #20]
    a0fe:	f8ca 301c 	str.w	r3, [sl, #28]
    a102:	3418      	adds	r4, #24
    a104:	f10a 0320 	add.w	r3, sl, #32
    a108:	e78b      	b.n	a022 <_realloc_r+0x2d6>
    a10a:	6922      	ldr	r2, [r4, #16]
    a10c:	f8ca 2018 	str.w	r2, [sl, #24]
    a110:	6962      	ldr	r2, [r4, #20]
    a112:	f8ca 201c 	str.w	r2, [sl, #28]
    a116:	3418      	adds	r4, #24
    a118:	f10a 0220 	add.w	r2, sl, #32
    a11c:	e703      	b.n	9f26 <_realloc_r+0x1da>
    a11e:	bf00      	nop
    a120:	2000885c 	.word	0x2000885c
    a124:	00000000 	.word	0x00000000

0000a128 <_strtod_l>:
    a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a12c:	ed2d 8b10 	vpush	{d8-d15}
    a130:	b097      	sub	sp, #92	; 0x5c
    a132:	468a      	mov	sl, r1
    a134:	2100      	movs	r1, #0
    a136:	9207      	str	r2, [sp, #28]
    a138:	9112      	str	r1, [sp, #72]	; 0x48
    a13a:	2200      	movs	r2, #0
    a13c:	2100      	movs	r1, #0
    a13e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    a142:	4680      	mov	r8, r0
    a144:	4651      	mov	r1, sl
    a146:	9111      	str	r1, [sp, #68]	; 0x44
    a148:	460f      	mov	r7, r1
    a14a:	f811 2b01 	ldrb.w	r2, [r1], #1
    a14e:	2a2d      	cmp	r2, #45	; 0x2d
    a150:	d85e      	bhi.n	a210 <_strtod_l+0xe8>
    a152:	a001      	add	r0, pc, #4	; (adr r0, a158 <_strtod_l+0x30>)
    a154:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    a158:	0000a2f9 	.word	0x0000a2f9
    a15c:	0000a211 	.word	0x0000a211
    a160:	0000a211 	.word	0x0000a211
    a164:	0000a211 	.word	0x0000a211
    a168:	0000a211 	.word	0x0000a211
    a16c:	0000a211 	.word	0x0000a211
    a170:	0000a211 	.word	0x0000a211
    a174:	0000a211 	.word	0x0000a211
    a178:	0000a211 	.word	0x0000a211
    a17c:	0000a147 	.word	0x0000a147
    a180:	0000a147 	.word	0x0000a147
    a184:	0000a147 	.word	0x0000a147
    a188:	0000a147 	.word	0x0000a147
    a18c:	0000a147 	.word	0x0000a147
    a190:	0000a211 	.word	0x0000a211
    a194:	0000a211 	.word	0x0000a211
    a198:	0000a211 	.word	0x0000a211
    a19c:	0000a211 	.word	0x0000a211
    a1a0:	0000a211 	.word	0x0000a211
    a1a4:	0000a211 	.word	0x0000a211
    a1a8:	0000a211 	.word	0x0000a211
    a1ac:	0000a211 	.word	0x0000a211
    a1b0:	0000a211 	.word	0x0000a211
    a1b4:	0000a211 	.word	0x0000a211
    a1b8:	0000a211 	.word	0x0000a211
    a1bc:	0000a211 	.word	0x0000a211
    a1c0:	0000a211 	.word	0x0000a211
    a1c4:	0000a211 	.word	0x0000a211
    a1c8:	0000a211 	.word	0x0000a211
    a1cc:	0000a211 	.word	0x0000a211
    a1d0:	0000a211 	.word	0x0000a211
    a1d4:	0000a211 	.word	0x0000a211
    a1d8:	0000a147 	.word	0x0000a147
    a1dc:	0000a211 	.word	0x0000a211
    a1e0:	0000a211 	.word	0x0000a211
    a1e4:	0000a211 	.word	0x0000a211
    a1e8:	0000a211 	.word	0x0000a211
    a1ec:	0000a211 	.word	0x0000a211
    a1f0:	0000a211 	.word	0x0000a211
    a1f4:	0000a211 	.word	0x0000a211
    a1f8:	0000a211 	.word	0x0000a211
    a1fc:	0000a211 	.word	0x0000a211
    a200:	0000a211 	.word	0x0000a211
    a204:	0000a933 	.word	0x0000a933
    a208:	0000a211 	.word	0x0000a211
    a20c:	0000a91f 	.word	0x0000a91f
    a210:	2100      	movs	r1, #0
    a212:	9109      	str	r1, [sp, #36]	; 0x24
    a214:	2a30      	cmp	r2, #48	; 0x30
    a216:	d07d      	beq.n	a314 <_strtod_l+0x1ec>
    a218:	2300      	movs	r3, #0
    a21a:	9308      	str	r3, [sp, #32]
    a21c:	2a2f      	cmp	r2, #47	; 0x2f
    a21e:	4614      	mov	r4, r2
    a220:	f240 84cd 	bls.w	abbe <_strtod_l+0xa96>
    a224:	f04f 0900 	mov.w	r9, #0
    a228:	4638      	mov	r0, r7
    a22a:	464e      	mov	r6, r9
    a22c:	464d      	mov	r5, r9
    a22e:	e012      	b.n	a256 <_strtod_l+0x12e>
    a230:	3001      	adds	r0, #1
    a232:	2d08      	cmp	r5, #8
    a234:	9011      	str	r0, [sp, #68]	; 0x44
    a236:	bfc8      	it	gt
    a238:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    a23c:	7804      	ldrb	r4, [r0, #0]
    a23e:	bfc6      	itte	gt
    a240:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    a244:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    a248:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    a24c:	2c2f      	cmp	r4, #47	; 0x2f
    a24e:	f105 0501 	add.w	r5, r5, #1
    a252:	4622      	mov	r2, r4
    a254:	dd6f      	ble.n	a336 <_strtod_l+0x20e>
    a256:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    a25a:	2c39      	cmp	r4, #57	; 0x39
    a25c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a260:	dde6      	ble.n	a230 <_strtod_l+0x108>
    a262:	499f      	ldr	r1, [pc, #636]	; (a4e0 <_strtod_l+0x3b8>)
    a264:	2201      	movs	r2, #1
    a266:	f001 fa23 	bl	b6b0 <strncmp>
    a26a:	2800      	cmp	r0, #0
    a26c:	d137      	bne.n	a2de <_strtod_l+0x1b6>
    a26e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a270:	461a      	mov	r2, r3
    a272:	3301      	adds	r3, #1
    a274:	9311      	str	r3, [sp, #68]	; 0x44
    a276:	7854      	ldrb	r4, [r2, #1]
    a278:	2d00      	cmp	r5, #0
    a27a:	f040 8543 	bne.w	ad04 <_strtod_l+0xbdc>
    a27e:	2c30      	cmp	r4, #48	; 0x30
    a280:	f040 8524 	bne.w	accc <_strtod_l+0xba4>
    a284:	f1c3 0201 	rsb	r2, r3, #1
    a288:	1898      	adds	r0, r3, r2
    a28a:	3301      	adds	r3, #1
    a28c:	9311      	str	r3, [sp, #68]	; 0x44
    a28e:	781c      	ldrb	r4, [r3, #0]
    a290:	2c30      	cmp	r4, #48	; 0x30
    a292:	d0f9      	beq.n	a288 <_strtod_l+0x160>
    a294:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a298:	2b08      	cmp	r3, #8
    a29a:	f200 8301 	bhi.w	a8a0 <_strtod_l+0x778>
    a29e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a2a0:	1c43      	adds	r3, r0, #1
    a2a2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a2a6:	930b      	str	r3, [sp, #44]	; 0x2c
    a2a8:	2501      	movs	r5, #1
    a2aa:	46bc      	mov	ip, r7
    a2ac:	f04f 0e00 	mov.w	lr, #0
    a2b0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a2b4:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    a2b8:	2000      	movs	r0, #0
    a2ba:	f10c 0301 	add.w	r3, ip, #1
    a2be:	9311      	str	r3, [sp, #68]	; 0x44
    a2c0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a2c4:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    a2c8:	2909      	cmp	r1, #9
    a2ca:	f200 82bb 	bhi.w	a844 <_strtod_l+0x71c>
    a2ce:	3001      	adds	r0, #1
    a2d0:	468b      	mov	fp, r1
    a2d2:	2900      	cmp	r1, #0
    a2d4:	f040 844f 	bne.w	ab76 <_strtod_l+0xa4e>
    a2d8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    a2dc:	e7ed      	b.n	a2ba <_strtod_l+0x192>
    a2de:	2000      	movs	r0, #0
    a2e0:	2c65      	cmp	r4, #101	; 0x65
    a2e2:	46ae      	mov	lr, r5
    a2e4:	900b      	str	r0, [sp, #44]	; 0x2c
    a2e6:	4684      	mov	ip, r0
    a2e8:	d001      	beq.n	a2ee <_strtod_l+0x1c6>
    a2ea:	2c45      	cmp	r4, #69	; 0x45
    a2ec:	d130      	bne.n	a350 <_strtod_l+0x228>
    a2ee:	2d00      	cmp	r5, #0
    a2f0:	d16b      	bne.n	a3ca <_strtod_l+0x2a2>
    a2f2:	9b08      	ldr	r3, [sp, #32]
    a2f4:	4303      	orrs	r3, r0
    a2f6:	d167      	bne.n	a3c8 <_strtod_l+0x2a0>
    a2f8:	9b07      	ldr	r3, [sp, #28]
    a2fa:	ed9f 8b77 	vldr	d8, [pc, #476]	; a4d8 <_strtod_l+0x3b0>
    a2fe:	b113      	cbz	r3, a306 <_strtod_l+0x1de>
    a300:	9b07      	ldr	r3, [sp, #28]
    a302:	f8c3 a000 	str.w	sl, [r3]
    a306:	eeb0 0b48 	vmov.f64	d0, d8
    a30a:	b017      	add	sp, #92	; 0x5c
    a30c:	ecbd 8b10 	vpop	{d8-d15}
    a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a314:	787a      	ldrb	r2, [r7, #1]
    a316:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    a31a:	2a58      	cmp	r2, #88	; 0x58
    a31c:	f000 840c 	beq.w	ab38 <_strtod_l+0xa10>
    a320:	3701      	adds	r7, #1
    a322:	9711      	str	r7, [sp, #68]	; 0x44
    a324:	783a      	ldrb	r2, [r7, #0]
    a326:	2a30      	cmp	r2, #48	; 0x30
    a328:	d0fa      	beq.n	a320 <_strtod_l+0x1f8>
    a32a:	2a00      	cmp	r2, #0
    a32c:	f000 80b7 	beq.w	a49e <_strtod_l+0x376>
    a330:	2301      	movs	r3, #1
    a332:	9308      	str	r3, [sp, #32]
    a334:	e772      	b.n	a21c <_strtod_l+0xf4>
    a336:	496a      	ldr	r1, [pc, #424]	; (a4e0 <_strtod_l+0x3b8>)
    a338:	2201      	movs	r2, #1
    a33a:	f001 f9b9 	bl	b6b0 <strncmp>
    a33e:	2800      	cmp	r0, #0
    a340:	f000 80c0 	beq.w	a4c4 <_strtod_l+0x39c>
    a344:	46ae      	mov	lr, r5
    a346:	f04f 0c00 	mov.w	ip, #0
    a34a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    a34e:	4660      	mov	r0, ip
    a350:	f04f 0b00 	mov.w	fp, #0
    a354:	2d00      	cmp	r5, #0
    a356:	d07e      	beq.n	a456 <_strtod_l+0x32e>
    a358:	ee07 6a90 	vmov	s15, r6
    a35c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a35e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    a362:	ebab 0303 	sub.w	r3, fp, r3
    a366:	f1be 0f00 	cmp.w	lr, #0
    a36a:	bf08      	it	eq
    a36c:	46ae      	moveq	lr, r5
    a36e:	2d10      	cmp	r5, #16
    a370:	930a      	str	r3, [sp, #40]	; 0x28
    a372:	462b      	mov	r3, r5
    a374:	bfa8      	it	ge
    a376:	2310      	movge	r3, #16
    a378:	2d09      	cmp	r5, #9
    a37a:	ed8d 7b04 	vstr	d7, [sp, #16]
    a37e:	dd0c      	ble.n	a39a <_strtod_l+0x272>
    a380:	4a58      	ldr	r2, [pc, #352]	; (a4e4 <_strtod_l+0x3bc>)
    a382:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a386:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    a38a:	ee06 9a90 	vmov	s13, r9
    a38e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a392:	eea7 6b05 	vfma.f64	d6, d7, d5
    a396:	ed8d 6b04 	vstr	d6, [sp, #16]
    a39a:	2d0f      	cmp	r5, #15
    a39c:	f300 80a8 	bgt.w	a4f0 <_strtod_l+0x3c8>
    a3a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a3a2:	2a00      	cmp	r2, #0
    a3a4:	f000 83e4 	beq.w	ab70 <_strtod_l+0xa48>
    a3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a3aa:	f340 833c 	ble.w	aa26 <_strtod_l+0x8fe>
    a3ae:	2a16      	cmp	r2, #22
    a3b0:	f340 8498 	ble.w	ace4 <_strtod_l+0xbbc>
    a3b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    a3b6:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    a3ba:	428a      	cmp	r2, r1
    a3bc:	f280 84a6 	bge.w	ad0c <_strtod_l+0xbe4>
    a3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a3c2:	1aeb      	subs	r3, r5, r3
    a3c4:	4413      	add	r3, r2
    a3c6:	e099      	b.n	a4fc <_strtod_l+0x3d4>
    a3c8:	2500      	movs	r5, #0
    a3ca:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    a3ce:	f10a 0301 	add.w	r3, sl, #1
    a3d2:	9311      	str	r3, [sp, #68]	; 0x44
    a3d4:	f89a 4001 	ldrb.w	r4, [sl, #1]
    a3d8:	2c2b      	cmp	r4, #43	; 0x2b
    a3da:	f000 825e 	beq.w	a89a <_strtod_l+0x772>
    a3de:	2c2d      	cmp	r4, #45	; 0x2d
    a3e0:	f000 81f7 	beq.w	a7d2 <_strtod_l+0x6aa>
    a3e4:	2300      	movs	r3, #0
    a3e6:	930a      	str	r3, [sp, #40]	; 0x28
    a3e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    a3ec:	2b09      	cmp	r3, #9
    a3ee:	f200 81eb 	bhi.w	a7c8 <_strtod_l+0x6a0>
    a3f2:	2c30      	cmp	r4, #48	; 0x30
    a3f4:	d105      	bne.n	a402 <_strtod_l+0x2da>
    a3f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a3f8:	3301      	adds	r3, #1
    a3fa:	9311      	str	r3, [sp, #68]	; 0x44
    a3fc:	781c      	ldrb	r4, [r3, #0]
    a3fe:	2c30      	cmp	r4, #48	; 0x30
    a400:	d0fa      	beq.n	a3f8 <_strtod_l+0x2d0>
    a402:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    a406:	2b08      	cmp	r3, #8
    a408:	d8a2      	bhi.n	a350 <_strtod_l+0x228>
    a40a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a40c:	920c      	str	r2, [sp, #48]	; 0x30
    a40e:	1c53      	adds	r3, r2, #1
    a410:	9311      	str	r3, [sp, #68]	; 0x44
    a412:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    a416:	7854      	ldrb	r4, [r2, #1]
    a418:	2c2f      	cmp	r4, #47	; 0x2f
    a41a:	dc07      	bgt.n	a42c <_strtod_l+0x304>
    a41c:	e3de      	b.n	abdc <_strtod_l+0xab4>
    a41e:	3301      	adds	r3, #1
    a420:	9311      	str	r3, [sp, #68]	; 0x44
    a422:	784c      	ldrb	r4, [r1, #1]
    a424:	2c2f      	cmp	r4, #47	; 0x2f
    a426:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    a42a:	dd06      	ble.n	a43a <_strtod_l+0x312>
    a42c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    a430:	2c39      	cmp	r4, #57	; 0x39
    a432:	4619      	mov	r1, r3
    a434:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    a438:	ddf1      	ble.n	a41e <_strtod_l+0x2f6>
    a43a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a43c:	1a9b      	subs	r3, r3, r2
    a43e:	2b08      	cmp	r3, #8
    a440:	f340 83cc 	ble.w	abdc <_strtod_l+0xab4>
    a444:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a44a:	2b00      	cmp	r3, #0
    a44c:	d082      	beq.n	a354 <_strtod_l+0x22c>
    a44e:	f1cb 0b00 	rsb	fp, fp, #0
    a452:	2d00      	cmp	r5, #0
    a454:	d180      	bne.n	a358 <_strtod_l+0x230>
    a456:	9b08      	ldr	r3, [sp, #32]
    a458:	4303      	orrs	r3, r0
    a45a:	d120      	bne.n	a49e <_strtod_l+0x376>
    a45c:	f1bc 0f00 	cmp.w	ip, #0
    a460:	f47f af4a 	bne.w	a2f8 <_strtod_l+0x1d0>
    a464:	2c69      	cmp	r4, #105	; 0x69
    a466:	f000 83cf 	beq.w	ac08 <_strtod_l+0xae0>
    a46a:	f300 82f3 	bgt.w	aa54 <_strtod_l+0x92c>
    a46e:	2c49      	cmp	r4, #73	; 0x49
    a470:	f000 83ca 	beq.w	ac08 <_strtod_l+0xae0>
    a474:	2c4e      	cmp	r4, #78	; 0x4e
    a476:	f47f af3f 	bne.w	a2f8 <_strtod_l+0x1d0>
    a47a:	491b      	ldr	r1, [pc, #108]	; (a4e8 <_strtod_l+0x3c0>)
    a47c:	a811      	add	r0, sp, #68	; 0x44
    a47e:	f002 f993 	bl	c7a8 <__match>
    a482:	2800      	cmp	r0, #0
    a484:	f43f af38 	beq.w	a2f8 <_strtod_l+0x1d0>
    a488:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	2b28      	cmp	r3, #40	; 0x28
    a48e:	f000 84f2 	beq.w	ae76 <_strtod_l+0xd4e>
    a492:	4816      	ldr	r0, [pc, #88]	; (a4ec <_strtod_l+0x3c4>)
    a494:	f001 fcc4 	bl	be20 <nan>
    a498:	eeb0 8b40 	vmov.f64	d8, d0
    a49c:	e001      	b.n	a4a2 <_strtod_l+0x37a>
    a49e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; a4d8 <_strtod_l+0x3b0>
    a4a2:	9a07      	ldr	r2, [sp, #28]
    a4a4:	b10a      	cbz	r2, a4aa <_strtod_l+0x382>
    a4a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a4a8:	6013      	str	r3, [r2, #0]
    a4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	f43f af2a 	beq.w	a306 <_strtod_l+0x1de>
    a4b2:	eeb1 8b48 	vneg.f64	d8, d8
    a4b6:	eeb0 0b48 	vmov.f64	d0, d8
    a4ba:	b017      	add	sp, #92	; 0x5c
    a4bc:	ecbd 8b10 	vpop	{d8-d15}
    a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a4c6:	900b      	str	r0, [sp, #44]	; 0x2c
    a4c8:	1c5a      	adds	r2, r3, #1
    a4ca:	9211      	str	r2, [sp, #68]	; 0x44
    a4cc:	785c      	ldrb	r4, [r3, #1]
    a4ce:	46ae      	mov	lr, r5
    a4d0:	e6f8      	b.n	a2c4 <_strtod_l+0x19c>
    a4d2:	bf00      	nop
    a4d4:	f3af 8000 	nop.w
	...
    a4e0:	20007e38 	.word	0x20007e38
    a4e4:	20000328 	.word	0x20000328
    a4e8:	20000d3c 	.word	0x20000d3c
    a4ec:	20008128 	.word	0x20008128
    a4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a4f2:	1aeb      	subs	r3, r5, r3
    a4f4:	4413      	add	r3, r2
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	f340 82b0 	ble.w	aa5c <_strtod_l+0x934>
    a4fc:	f013 010f 	ands.w	r1, r3, #15
    a500:	d00a      	beq.n	a518 <_strtod_l+0x3f0>
    a502:	4ac3      	ldr	r2, [pc, #780]	; (a810 <_strtod_l+0x6e8>)
    a504:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a508:	ed9d 6b04 	vldr	d6, [sp, #16]
    a50c:	ed92 7b00 	vldr	d7, [r2]
    a510:	ee27 7b06 	vmul.f64	d7, d7, d6
    a514:	ed8d 7b04 	vstr	d7, [sp, #16]
    a518:	f033 020f 	bics.w	r2, r3, #15
    a51c:	f040 8238 	bne.w	a990 <_strtod_l+0x868>
    a520:	2300      	movs	r3, #0
    a522:	9308      	str	r3, [sp, #32]
    a524:	9600      	str	r6, [sp, #0]
    a526:	462b      	mov	r3, r5
    a528:	4672      	mov	r2, lr
    a52a:	4639      	mov	r1, r7
    a52c:	4640      	mov	r0, r8
    a52e:	f002 fac7 	bl	cac0 <__s2b>
    a532:	4681      	mov	r9, r0
    a534:	2800      	cmp	r0, #0
    a536:	f000 82e1 	beq.w	aafc <_strtod_l+0x9d4>
    a53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a53c:	eba3 0b0b 	sub.w	fp, r3, fp
    a540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a542:	ed9f eba9 	vldr	d14, [pc, #676]	; a7e8 <_strtod_l+0x6c0>
    a546:	2b00      	cmp	r3, #0
    a548:	ed9f cba9 	vldr	d12, [pc, #676]	; a7f0 <_strtod_l+0x6c8>
    a54c:	ed9f dbaa 	vldr	d13, [pc, #680]	; a7f8 <_strtod_l+0x6d0>
    a550:	ed9f bbab 	vldr	d11, [pc, #684]	; a800 <_strtod_l+0x6d8>
    a554:	bfb4      	ite	lt
    a556:	465a      	movlt	r2, fp
    a558:	2200      	movge	r2, #0
    a55a:	f04f 0a00 	mov.w	sl, #0
    a55e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a562:	920b      	str	r2, [sp, #44]	; 0x2c
    a564:	930c      	str	r3, [sp, #48]	; 0x30
    a566:	4654      	mov	r4, sl
    a568:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a56c:	4640      	mov	r0, r8
    a56e:	f002 fa25 	bl	c9bc <_Balloc>
    a572:	4606      	mov	r6, r0
    a574:	2800      	cmp	r0, #0
    a576:	f000 810e 	beq.w	a796 <_strtod_l+0x66e>
    a57a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a57e:	ed9d 8b04 	vldr	d8, [sp, #16]
    a582:	3202      	adds	r2, #2
    a584:	0092      	lsls	r2, r2, #2
    a586:	f109 010c 	add.w	r1, r9, #12
    a58a:	300c      	adds	r0, #12
    a58c:	f7fd fa6e 	bl	7a6c <memcpy>
    a590:	eeb0 0b48 	vmov.f64	d0, d8
    a594:	aa14      	add	r2, sp, #80	; 0x50
    a596:	a913      	add	r1, sp, #76	; 0x4c
    a598:	4640      	mov	r0, r8
    a59a:	f002 fe4d 	bl	d238 <__d2b>
    a59e:	9012      	str	r0, [sp, #72]	; 0x48
    a5a0:	2800      	cmp	r0, #0
    a5a2:	f000 80e4 	beq.w	a76e <_strtod_l+0x646>
    a5a6:	2101      	movs	r1, #1
    a5a8:	4640      	mov	r0, r8
    a5aa:	f002 fb31 	bl	cc10 <__i2b>
    a5ae:	4604      	mov	r4, r0
    a5b0:	2800      	cmp	r0, #0
    a5b2:	f000 80f0 	beq.w	a796 <_strtod_l+0x66e>
    a5b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a5b8:	2a00      	cmp	r2, #0
    a5ba:	f2c0 80de 	blt.w	a77a <_strtod_l+0x652>
    a5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a5c2:	eb02 0b03 	add.w	fp, r2, r3
    a5c6:	9b08      	ldr	r3, [sp, #32]
    a5c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    a5ca:	1ad2      	subs	r2, r2, r3
    a5cc:	442a      	add	r2, r5
    a5ce:	4b91      	ldr	r3, [pc, #580]	; (a814 <_strtod_l+0x6ec>)
    a5d0:	3a01      	subs	r2, #1
    a5d2:	429a      	cmp	r2, r3
    a5d4:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    a5d8:	f280 8098 	bge.w	a70c <_strtod_l+0x5e4>
    a5dc:	1a99      	subs	r1, r3, r2
    a5de:	291f      	cmp	r1, #31
    a5e0:	eba5 0501 	sub.w	r5, r5, r1
    a5e4:	f300 80e3 	bgt.w	a7ae <_strtod_l+0x686>
    a5e8:	2201      	movs	r2, #1
    a5ea:	fa02 f301 	lsl.w	r3, r2, r1
    a5ee:	930d      	str	r3, [sp, #52]	; 0x34
    a5f0:	2300      	movs	r3, #0
    a5f2:	930e      	str	r3, [sp, #56]	; 0x38
    a5f4:	442f      	add	r7, r5
    a5f6:	9b08      	ldr	r3, [sp, #32]
    a5f8:	445d      	add	r5, fp
    a5fa:	45ab      	cmp	fp, r5
    a5fc:	465a      	mov	r2, fp
    a5fe:	441f      	add	r7, r3
    a600:	bfa8      	it	ge
    a602:	462a      	movge	r2, r5
    a604:	42ba      	cmp	r2, r7
    a606:	bfa8      	it	ge
    a608:	463a      	movge	r2, r7
    a60a:	2a00      	cmp	r2, #0
    a60c:	dd03      	ble.n	a616 <_strtod_l+0x4ee>
    a60e:	1aad      	subs	r5, r5, r2
    a610:	1abf      	subs	r7, r7, r2
    a612:	ebab 0b02 	sub.w	fp, fp, r2
    a616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a618:	2b00      	cmp	r3, #0
    a61a:	f300 8088 	bgt.w	a72e <_strtod_l+0x606>
    a61e:	2d00      	cmp	r5, #0
    a620:	f300 809c 	bgt.w	a75c <_strtod_l+0x634>
    a624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a626:	2b00      	cmp	r3, #0
    a628:	f300 80b7 	bgt.w	a79a <_strtod_l+0x672>
    a62c:	2f00      	cmp	r7, #0
    a62e:	f300 80a9 	bgt.w	a784 <_strtod_l+0x65c>
    a632:	f1bb 0f00 	cmp.w	fp, #0
    a636:	dd08      	ble.n	a64a <_strtod_l+0x522>
    a638:	4621      	mov	r1, r4
    a63a:	465a      	mov	r2, fp
    a63c:	4640      	mov	r0, r8
    a63e:	f002 fc23 	bl	ce88 <__lshift>
    a642:	4604      	mov	r4, r0
    a644:	2800      	cmp	r0, #0
    a646:	f000 80a6 	beq.w	a796 <_strtod_l+0x66e>
    a64a:	9912      	ldr	r1, [sp, #72]	; 0x48
    a64c:	4632      	mov	r2, r6
    a64e:	4640      	mov	r0, r8
    a650:	f002 fcb4 	bl	cfbc <__mdiff>
    a654:	4682      	mov	sl, r0
    a656:	2800      	cmp	r0, #0
    a658:	f000 809d 	beq.w	a796 <_strtod_l+0x66e>
    a65c:	2300      	movs	r3, #0
    a65e:	68c5      	ldr	r5, [r0, #12]
    a660:	60c3      	str	r3, [r0, #12]
    a662:	4621      	mov	r1, r4
    a664:	f002 fc88 	bl	cf78 <__mcmp>
    a668:	2800      	cmp	r0, #0
    a66a:	f2c0 83c7 	blt.w	adfc <_strtod_l+0xcd4>
    a66e:	f000 8361 	beq.w	ad34 <_strtod_l+0xc0c>
    a672:	4621      	mov	r1, r4
    a674:	4650      	mov	r0, sl
    a676:	f002 fe49 	bl	d30c <__ratio>
    a67a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    a67e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a686:	d846      	bhi.n	a716 <_strtod_l+0x5ee>
    a688:	2d00      	cmp	r5, #0
    a68a:	f000 80cb 	beq.w	a824 <_strtod_l+0x6fc>
    a68e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    a692:	9805      	ldr	r0, [sp, #20]
    a694:	4b60      	ldr	r3, [pc, #384]	; (a818 <_strtod_l+0x6f0>)
    a696:	2200      	movs	r2, #0
    a698:	4960      	ldr	r1, [pc, #384]	; (a81c <_strtod_l+0x6f4>)
    a69a:	f8df c184 	ldr.w	ip, [pc, #388]	; a820 <_strtod_l+0x6f8>
    a69e:	ea00 0701 	and.w	r7, r0, r1
    a6a2:	4567      	cmp	r7, ip
    a6a4:	f000 80d4 	beq.w	a850 <_strtod_l+0x728>
    a6a8:	9908      	ldr	r1, [sp, #32]
    a6aa:	b159      	cbz	r1, a6c4 <_strtod_l+0x59c>
    a6ac:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    a6b0:	d808      	bhi.n	a6c4 <_strtod_l+0x59c>
    a6b2:	eeb4 9bcb 	vcmpe.f64	d9, d11
    a6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6ba:	f240 8156 	bls.w	a96a <_strtod_l+0x842>
    a6be:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    a6c2:	1bcb      	subs	r3, r1, r7
    a6c4:	eeb0 0b48 	vmov.f64	d0, d8
    a6c8:	ec43 2b1a 	vmov	d10, r2, r3
    a6cc:	f002 fd20 	bl	d110 <__ulp>
    a6d0:	eeaa 8b00 	vfma.f64	d8, d10, d0
    a6d4:	ed8d 8b04 	vstr	d8, [sp, #16]
    a6d8:	ee18 3a90 	vmov	r3, s17
    a6dc:	9a08      	ldr	r2, [sp, #32]
    a6de:	b922      	cbnz	r2, a6ea <_strtod_l+0x5c2>
    a6e0:	4a4e      	ldr	r2, [pc, #312]	; (a81c <_strtod_l+0x6f4>)
    a6e2:	401a      	ands	r2, r3
    a6e4:	4297      	cmp	r7, r2
    a6e6:	f000 80e4 	beq.w	a8b2 <_strtod_l+0x78a>
    a6ea:	9912      	ldr	r1, [sp, #72]	; 0x48
    a6ec:	4640      	mov	r0, r8
    a6ee:	f002 f98b 	bl	ca08 <_Bfree>
    a6f2:	4631      	mov	r1, r6
    a6f4:	4640      	mov	r0, r8
    a6f6:	f002 f987 	bl	ca08 <_Bfree>
    a6fa:	4621      	mov	r1, r4
    a6fc:	4640      	mov	r0, r8
    a6fe:	f002 f983 	bl	ca08 <_Bfree>
    a702:	4651      	mov	r1, sl
    a704:	4640      	mov	r0, r8
    a706:	f002 f97f 	bl	ca08 <_Bfree>
    a70a:	e72d      	b.n	a568 <_strtod_l+0x440>
    a70c:	2301      	movs	r3, #1
    a70e:	2100      	movs	r1, #0
    a710:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    a714:	e76e      	b.n	a5f4 <_strtod_l+0x4cc>
    a716:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    a71a:	ee20 9b09 	vmul.f64	d9, d0, d9
    a71e:	2d00      	cmp	r5, #0
    a720:	d15f      	bne.n	a7e2 <_strtod_l+0x6ba>
    a722:	eeb1 7b49 	vneg.f64	d7, d9
    a726:	9805      	ldr	r0, [sp, #20]
    a728:	ec53 2b17 	vmov	r2, r3, d7
    a72c:	e7b4      	b.n	a698 <_strtod_l+0x570>
    a72e:	4621      	mov	r1, r4
    a730:	461a      	mov	r2, r3
    a732:	4640      	mov	r0, r8
    a734:	f002 fb48 	bl	cdc8 <__pow5mult>
    a738:	4604      	mov	r4, r0
    a73a:	b360      	cbz	r0, a796 <_strtod_l+0x66e>
    a73c:	4601      	mov	r1, r0
    a73e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a740:	4640      	mov	r0, r8
    a742:	f002 fa93 	bl	cc6c <__multiply>
    a746:	b330      	cbz	r0, a796 <_strtod_l+0x66e>
    a748:	900f      	str	r0, [sp, #60]	; 0x3c
    a74a:	9912      	ldr	r1, [sp, #72]	; 0x48
    a74c:	4640      	mov	r0, r8
    a74e:	f002 f95b 	bl	ca08 <_Bfree>
    a752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a754:	9212      	str	r2, [sp, #72]	; 0x48
    a756:	2d00      	cmp	r5, #0
    a758:	f77f af64 	ble.w	a624 <_strtod_l+0x4fc>
    a75c:	9912      	ldr	r1, [sp, #72]	; 0x48
    a75e:	462a      	mov	r2, r5
    a760:	4640      	mov	r0, r8
    a762:	f002 fb91 	bl	ce88 <__lshift>
    a766:	9012      	str	r0, [sp, #72]	; 0x48
    a768:	2800      	cmp	r0, #0
    a76a:	f47f af5b 	bne.w	a624 <_strtod_l+0x4fc>
    a76e:	2322      	movs	r3, #34	; 0x22
    a770:	ed9f 8b25 	vldr	d8, [pc, #148]	; a808 <_strtod_l+0x6e0>
    a774:	f8c8 3000 	str.w	r3, [r8]
    a778:	e0bc      	b.n	a8f4 <_strtod_l+0x7cc>
    a77a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a77c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    a780:	1a9f      	subs	r7, r3, r2
    a782:	e720      	b.n	a5c6 <_strtod_l+0x49e>
    a784:	4631      	mov	r1, r6
    a786:	463a      	mov	r2, r7
    a788:	4640      	mov	r0, r8
    a78a:	f002 fb7d 	bl	ce88 <__lshift>
    a78e:	4606      	mov	r6, r0
    a790:	2800      	cmp	r0, #0
    a792:	f47f af4e 	bne.w	a632 <_strtod_l+0x50a>
    a796:	9812      	ldr	r0, [sp, #72]	; 0x48
    a798:	e7e9      	b.n	a76e <_strtod_l+0x646>
    a79a:	4631      	mov	r1, r6
    a79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a79e:	4640      	mov	r0, r8
    a7a0:	f002 fb12 	bl	cdc8 <__pow5mult>
    a7a4:	4606      	mov	r6, r0
    a7a6:	2800      	cmp	r0, #0
    a7a8:	f47f af40 	bne.w	a62c <_strtod_l+0x504>
    a7ac:	e7f3      	b.n	a796 <_strtod_l+0x66e>
    a7ae:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    a7b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    a7b6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    a7ba:	2101      	movs	r1, #1
    a7bc:	32e2      	adds	r2, #226	; 0xe2
    a7be:	fa01 f302 	lsl.w	r3, r1, r2
    a7c2:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    a7c6:	e715      	b.n	a5f4 <_strtod_l+0x4cc>
    a7c8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    a7cc:	f04f 0b00 	mov.w	fp, #0
    a7d0:	e5c0      	b.n	a354 <_strtod_l+0x22c>
    a7d2:	2301      	movs	r3, #1
    a7d4:	930a      	str	r3, [sp, #40]	; 0x28
    a7d6:	f10a 0302 	add.w	r3, sl, #2
    a7da:	9311      	str	r3, [sp, #68]	; 0x44
    a7dc:	f89a 4002 	ldrb.w	r4, [sl, #2]
    a7e0:	e602      	b.n	a3e8 <_strtod_l+0x2c0>
    a7e2:	eeb0 7b49 	vmov.f64	d7, d9
    a7e6:	e79e      	b.n	a726 <_strtod_l+0x5fe>
    a7e8:	94a03595 	.word	0x94a03595
    a7ec:	3fcfffff 	.word	0x3fcfffff
    a7f0:	94a03595 	.word	0x94a03595
    a7f4:	3fdfffff 	.word	0x3fdfffff
    a7f8:	35afe535 	.word	0x35afe535
    a7fc:	3fe00000 	.word	0x3fe00000
    a800:	ffc00000 	.word	0xffc00000
    a804:	41dfffff 	.word	0x41dfffff
    a808:	00000000 	.word	0x00000000
    a80c:	7ff00000 	.word	0x7ff00000
    a810:	20000328 	.word	0x20000328
    a814:	fffffc02 	.word	0xfffffc02
    a818:	3ff00000 	.word	0x3ff00000
    a81c:	7ff00000 	.word	0x7ff00000
    a820:	7fe00000 	.word	0x7fe00000
    a824:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    a828:	2900      	cmp	r1, #0
    a82a:	f000 8085 	beq.w	a938 <_strtod_l+0x810>
    a82e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    a832:	2901      	cmp	r1, #1
    a834:	f000 81d8 	beq.w	abe8 <_strtod_l+0xac0>
    a838:	4610      	mov	r0, r2
    a83a:	4bb7      	ldr	r3, [pc, #732]	; (ab18 <_strtod_l+0x9f0>)
    a83c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    a840:	2200      	movs	r2, #0
    a842:	e729      	b.n	a698 <_strtod_l+0x570>
    a844:	2c65      	cmp	r4, #101	; 0x65
    a846:	f04f 0c01 	mov.w	ip, #1
    a84a:	f43f adbe 	beq.w	a3ca <_strtod_l+0x2a2>
    a84e:	e54c      	b.n	a2ea <_strtod_l+0x1c2>
    a850:	ec43 2b1a 	vmov	d10, r2, r3
    a854:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    a858:	9305      	str	r3, [sp, #20]
    a85a:	ed9d fb04 	vldr	d15, [sp, #16]
    a85e:	eeb0 0b4f 	vmov.f64	d0, d15
    a862:	f002 fc55 	bl	d110 <__ulp>
    a866:	49ad      	ldr	r1, [pc, #692]	; (ab1c <_strtod_l+0x9f4>)
    a868:	eeaa fb00 	vfma.f64	d15, d10, d0
    a86c:	ee1f 3a90 	vmov	r3, s31
    a870:	4aab      	ldr	r2, [pc, #684]	; (ab20 <_strtod_l+0x9f8>)
    a872:	4019      	ands	r1, r3
    a874:	4291      	cmp	r1, r2
    a876:	ed8d fb04 	vstr	d15, [sp, #16]
    a87a:	d972      	bls.n	a962 <_strtod_l+0x83a>
    a87c:	4ba9      	ldr	r3, [pc, #676]	; (ab24 <_strtod_l+0x9fc>)
    a87e:	ee18 2a90 	vmov	r2, s17
    a882:	429a      	cmp	r2, r3
    a884:	d103      	bne.n	a88e <_strtod_l+0x766>
    a886:	ee18 3a10 	vmov	r3, s16
    a88a:	3301      	adds	r3, #1
    a88c:	d083      	beq.n	a796 <_strtod_l+0x66e>
    a88e:	4aa5      	ldr	r2, [pc, #660]	; (ab24 <_strtod_l+0x9fc>)
    a890:	f04f 33ff 	mov.w	r3, #4294967295
    a894:	e9cd 3204 	strd	r3, r2, [sp, #16]
    a898:	e727      	b.n	a6ea <_strtod_l+0x5c2>
    a89a:	2300      	movs	r3, #0
    a89c:	930a      	str	r3, [sp, #40]	; 0x28
    a89e:	e79a      	b.n	a7d6 <_strtod_l+0x6ae>
    a8a0:	2c65      	cmp	r4, #101	; 0x65
    a8a2:	f000 80d0 	beq.w	aa46 <_strtod_l+0x91e>
    a8a6:	2c45      	cmp	r4, #69	; 0x45
    a8a8:	f000 80cd 	beq.w	aa46 <_strtod_l+0x91e>
    a8ac:	f04f 0c01 	mov.w	ip, #1
    a8b0:	e5d1      	b.n	a456 <_strtod_l+0x32e>
    a8b2:	ec51 0b19 	vmov	r0, r1, d9
    a8b6:	930d      	str	r3, [sp, #52]	; 0x34
    a8b8:	f009 fbe4 	bl	14084 <__aeabi_d2lz>
    a8bc:	f009 fbb4 	bl	14028 <__aeabi_l2d>
    a8c0:	9b04      	ldr	r3, [sp, #16]
    a8c2:	431d      	orrs	r5, r3
    a8c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8c6:	ec41 0b17 	vmov	d7, r0, r1
    a8ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a8ce:	431d      	orrs	r5, r3
    a8d0:	ee39 9b47 	vsub.f64	d9, d9, d7
    a8d4:	f000 80a0 	beq.w	aa18 <_strtod_l+0x8f0>
    a8d8:	eeb4 9bcc 	vcmpe.f64	d9, d12
    a8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8e0:	d405      	bmi.n	a8ee <_strtod_l+0x7c6>
    a8e2:	eeb4 9bcd 	vcmpe.f64	d9, d13
    a8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8ea:	f77f aefe 	ble.w	a6ea <_strtod_l+0x5c2>
    a8ee:	ed9d 8b04 	vldr	d8, [sp, #16]
    a8f2:	9812      	ldr	r0, [sp, #72]	; 0x48
    a8f4:	4601      	mov	r1, r0
    a8f6:	4640      	mov	r0, r8
    a8f8:	f002 f886 	bl	ca08 <_Bfree>
    a8fc:	4631      	mov	r1, r6
    a8fe:	4640      	mov	r0, r8
    a900:	f002 f882 	bl	ca08 <_Bfree>
    a904:	4621      	mov	r1, r4
    a906:	4640      	mov	r0, r8
    a908:	f002 f87e 	bl	ca08 <_Bfree>
    a90c:	4649      	mov	r1, r9
    a90e:	4640      	mov	r0, r8
    a910:	f002 f87a 	bl	ca08 <_Bfree>
    a914:	4651      	mov	r1, sl
    a916:	4640      	mov	r0, r8
    a918:	f002 f876 	bl	ca08 <_Bfree>
    a91c:	e5c1      	b.n	a4a2 <_strtod_l+0x37a>
    a91e:	2201      	movs	r2, #1
    a920:	9209      	str	r2, [sp, #36]	; 0x24
    a922:	1c79      	adds	r1, r7, #1
    a924:	9111      	str	r1, [sp, #68]	; 0x44
    a926:	787a      	ldrb	r2, [r7, #1]
    a928:	2a00      	cmp	r2, #0
    a92a:	f43f ace5 	beq.w	a2f8 <_strtod_l+0x1d0>
    a92e:	460f      	mov	r7, r1
    a930:	e470      	b.n	a214 <_strtod_l+0xec>
    a932:	2200      	movs	r2, #0
    a934:	9209      	str	r2, [sp, #36]	; 0x24
    a936:	e7f4      	b.n	a922 <_strtod_l+0x7fa>
    a938:	f3c2 0313 	ubfx	r3, r2, #0, #20
    a93c:	4610      	mov	r0, r2
    a93e:	2b00      	cmp	r3, #0
    a940:	f47f af7b 	bne.w	a83a <_strtod_l+0x712>
    a944:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a948:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a950:	f100 81d3 	bmi.w	acfa <_strtod_l+0xbd2>
    a954:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    a958:	ee20 9b09 	vmul.f64	d9, d0, d9
    a95c:	eeb1 7b49 	vneg.f64	d7, d9
    a960:	e6e2      	b.n	a728 <_strtod_l+0x600>
    a962:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    a966:	9305      	str	r3, [sp, #20]
    a968:	e6b8      	b.n	a6dc <_strtod_l+0x5b4>
    a96a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    a96e:	ee19 3a10 	vmov	r3, s18
    a972:	2b01      	cmp	r3, #1
    a974:	bf38      	it	cc
    a976:	2301      	movcc	r3, #1
    a978:	ee09 3a10 	vmov	s18, r3
    a97c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    a980:	2d00      	cmp	r5, #0
    a982:	f040 813e 	bne.w	ac02 <_strtod_l+0xada>
    a986:	eeb1 7b49 	vneg.f64	d7, d9
    a98a:	ec53 2b17 	vmov	r2, r3, d7
    a98e:	e696      	b.n	a6be <_strtod_l+0x596>
    a990:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    a994:	f300 80b2 	bgt.w	aafc <_strtod_l+0x9d4>
    a998:	2a10      	cmp	r2, #16
    a99a:	ea4f 1322 	mov.w	r3, r2, asr #4
    a99e:	f340 8286 	ble.w	aeae <_strtod_l+0xd86>
    a9a2:	4c61      	ldr	r4, [pc, #388]	; (ab28 <_strtod_l+0xa00>)
    a9a4:	ed9d 7b04 	vldr	d7, [sp, #16]
    a9a8:	2000      	movs	r0, #0
    a9aa:	4622      	mov	r2, r4
    a9ac:	4601      	mov	r1, r0
    a9ae:	f013 0f01 	tst.w	r3, #1
    a9b2:	f101 0101 	add.w	r1, r1, #1
    a9b6:	ea4f 0363 	mov.w	r3, r3, asr #1
    a9ba:	d004      	beq.n	a9c6 <_strtod_l+0x89e>
    a9bc:	ed92 6b00 	vldr	d6, [r2]
    a9c0:	2001      	movs	r0, #1
    a9c2:	ee27 7b06 	vmul.f64	d7, d7, d6
    a9c6:	2b01      	cmp	r3, #1
    a9c8:	f102 0208 	add.w	r2, r2, #8
    a9cc:	d1ef      	bne.n	a9ae <_strtod_l+0x886>
    a9ce:	b108      	cbz	r0, a9d4 <_strtod_l+0x8ac>
    a9d0:	ed8d 7b04 	vstr	d7, [sp, #16]
    a9d4:	9b05      	ldr	r3, [sp, #20]
    a9d6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    a9da:	9305      	str	r3, [sp, #20]
    a9dc:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    a9e0:	ed9d 6b04 	vldr	d6, [sp, #16]
    a9e4:	ed94 7b00 	vldr	d7, [r4]
    a9e8:	4b4c      	ldr	r3, [pc, #304]	; (ab1c <_strtod_l+0x9f4>)
    a9ea:	ee27 7b06 	vmul.f64	d7, d7, d6
    a9ee:	ee17 2a90 	vmov	r2, s15
    a9f2:	494e      	ldr	r1, [pc, #312]	; (ab2c <_strtod_l+0xa04>)
    a9f4:	4013      	ands	r3, r2
    a9f6:	428b      	cmp	r3, r1
    a9f8:	ed8d 7b04 	vstr	d7, [sp, #16]
    a9fc:	d87e      	bhi.n	aafc <_strtod_l+0x9d4>
    a9fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    aa02:	428b      	cmp	r3, r1
    aa04:	f240 81d6 	bls.w	adb4 <_strtod_l+0xc8c>
    aa08:	4c46      	ldr	r4, [pc, #280]	; (ab24 <_strtod_l+0x9fc>)
    aa0a:	f04f 33ff 	mov.w	r3, #4294967295
    aa0e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    aa12:	2300      	movs	r3, #0
    aa14:	9308      	str	r3, [sp, #32]
    aa16:	e585      	b.n	a524 <_strtod_l+0x3fc>
    aa18:	eeb4 9bce 	vcmpe.f64	d9, d14
    aa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aa20:	f57f ae63 	bpl.w	a6ea <_strtod_l+0x5c2>
    aa24:	e763      	b.n	a8ee <_strtod_l+0x7c6>
    aa26:	3216      	adds	r2, #22
    aa28:	f6ff ad62 	blt.w	a4f0 <_strtod_l+0x3c8>
    aa2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa2e:	eba3 0b0b 	sub.w	fp, r3, fp
    aa32:	4b3f      	ldr	r3, [pc, #252]	; (ab30 <_strtod_l+0xa08>)
    aa34:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    aa38:	ed93 7b00 	vldr	d7, [r3]
    aa3c:	ed9d 6b04 	vldr	d6, [sp, #16]
    aa40:	ee86 8b07 	vdiv.f64	d8, d6, d7
    aa44:	e52d      	b.n	a4a2 <_strtod_l+0x37a>
    aa46:	f04f 0e00 	mov.w	lr, #0
    aa4a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    aa4e:	f04f 0c01 	mov.w	ip, #1
    aa52:	e44e      	b.n	a2f2 <_strtod_l+0x1ca>
    aa54:	2c6e      	cmp	r4, #110	; 0x6e
    aa56:	f43f ad10 	beq.w	a47a <_strtod_l+0x352>
    aa5a:	e44d      	b.n	a2f8 <_strtod_l+0x1d0>
    aa5c:	f43f ad60 	beq.w	a520 <_strtod_l+0x3f8>
    aa60:	425b      	negs	r3, r3
    aa62:	f013 010f 	ands.w	r1, r3, #15
    aa66:	d00a      	beq.n	aa7e <_strtod_l+0x956>
    aa68:	4a31      	ldr	r2, [pc, #196]	; (ab30 <_strtod_l+0xa08>)
    aa6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    aa6e:	ed9d 6b04 	vldr	d6, [sp, #16]
    aa72:	ed92 7b00 	vldr	d7, [r2]
    aa76:	ee86 7b07 	vdiv.f64	d7, d6, d7
    aa7a:	ed8d 7b04 	vstr	d7, [sp, #16]
    aa7e:	111b      	asrs	r3, r3, #4
    aa80:	f43f ad4e 	beq.w	a520 <_strtod_l+0x3f8>
    aa84:	2b1f      	cmp	r3, #31
    aa86:	dc33      	bgt.n	aaf0 <_strtod_l+0x9c8>
    aa88:	f013 0210 	ands.w	r2, r3, #16
    aa8c:	bf18      	it	ne
    aa8e:	226a      	movne	r2, #106	; 0x6a
    aa90:	ed9d 7b04 	vldr	d7, [sp, #16]
    aa94:	9208      	str	r2, [sp, #32]
    aa96:	4a27      	ldr	r2, [pc, #156]	; (ab34 <_strtod_l+0xa0c>)
    aa98:	2100      	movs	r1, #0
    aa9a:	07d8      	lsls	r0, r3, #31
    aa9c:	d504      	bpl.n	aaa8 <_strtod_l+0x980>
    aa9e:	ed92 6b00 	vldr	d6, [r2]
    aaa2:	2101      	movs	r1, #1
    aaa4:	ee27 7b06 	vmul.f64	d7, d7, d6
    aaa8:	105b      	asrs	r3, r3, #1
    aaaa:	f102 0208 	add.w	r2, r2, #8
    aaae:	d1f4      	bne.n	aa9a <_strtod_l+0x972>
    aab0:	b109      	cbz	r1, aab6 <_strtod_l+0x98e>
    aab2:	ed8d 7b04 	vstr	d7, [sp, #16]
    aab6:	9b08      	ldr	r3, [sp, #32]
    aab8:	b193      	cbz	r3, aae0 <_strtod_l+0x9b8>
    aaba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aabe:	f3c1 520a 	ubfx	r2, r1, #20, #11
    aac2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    aac6:	2b00      	cmp	r3, #0
    aac8:	dd0a      	ble.n	aae0 <_strtod_l+0x9b8>
    aaca:	2b1f      	cmp	r3, #31
    aacc:	f340 822f 	ble.w	af2e <_strtod_l+0xe06>
    aad0:	2000      	movs	r0, #0
    aad2:	2b34      	cmp	r3, #52	; 0x34
    aad4:	9004      	str	r0, [sp, #16]
    aad6:	f340 8240 	ble.w	af5a <_strtod_l+0xe32>
    aada:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    aade:	9305      	str	r3, [sp, #20]
    aae0:	ed9d 7b04 	vldr	d7, [sp, #16]
    aae4:	eeb5 7b40 	vcmp.f64	d7, #0.0
    aae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aaec:	f47f ad1a 	bne.w	a524 <_strtod_l+0x3fc>
    aaf0:	2322      	movs	r3, #34	; 0x22
    aaf2:	ed9f 8b05 	vldr	d8, [pc, #20]	; ab08 <_strtod_l+0x9e0>
    aaf6:	f8c8 3000 	str.w	r3, [r8]
    aafa:	e4d2      	b.n	a4a2 <_strtod_l+0x37a>
    aafc:	2322      	movs	r3, #34	; 0x22
    aafe:	ed9f 8b04 	vldr	d8, [pc, #16]	; ab10 <_strtod_l+0x9e8>
    ab02:	f8c8 3000 	str.w	r3, [r8]
    ab06:	e4cc      	b.n	a4a2 <_strtod_l+0x37a>
	...
    ab14:	7ff00000 	.word	0x7ff00000
    ab18:	bff00000 	.word	0xbff00000
    ab1c:	7ff00000 	.word	0x7ff00000
    ab20:	7c9fffff 	.word	0x7c9fffff
    ab24:	7fefffff 	.word	0x7fefffff
    ab28:	20000300 	.word	0x20000300
    ab2c:	7ca00000 	.word	0x7ca00000
    ab30:	20000328 	.word	0x20000328
    ab34:	200003f0 	.word	0x200003f0
    ab38:	9302      	str	r3, [sp, #8]
    ab3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab3c:	9301      	str	r3, [sp, #4]
    ab3e:	ab12      	add	r3, sp, #72	; 0x48
    ab40:	9300      	str	r3, [sp, #0]
    ab42:	4aa7      	ldr	r2, [pc, #668]	; (ade0 <_strtod_l+0xcb8>)
    ab44:	ab13      	add	r3, sp, #76	; 0x4c
    ab46:	a911      	add	r1, sp, #68	; 0x44
    ab48:	4640      	mov	r0, r8
    ab4a:	f001 fb63 	bl	c214 <__gethex>
    ab4e:	f010 050f 	ands.w	r5, r0, #15
    ab52:	4604      	mov	r4, r0
    ab54:	f43f aca3 	beq.w	a49e <_strtod_l+0x376>
    ab58:	2d06      	cmp	r5, #6
    ab5a:	d174      	bne.n	ac46 <_strtod_l+0xb1e>
    ab5c:	9b07      	ldr	r3, [sp, #28]
    ab5e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; adc8 <_strtod_l+0xca0>
    ab62:	3701      	adds	r7, #1
    ab64:	2b00      	cmp	r3, #0
    ab66:	f43f abce 	beq.w	a306 <_strtod_l+0x1de>
    ab6a:	601f      	str	r7, [r3, #0]
    ab6c:	f7ff bbcb 	b.w	a306 <_strtod_l+0x1de>
    ab70:	ed9d 8b04 	vldr	d8, [sp, #16]
    ab74:	e495      	b.n	a4a2 <_strtod_l+0x37a>
    ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab78:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    ab7c:	4403      	add	r3, r0
    ab7e:	930b      	str	r3, [sp, #44]	; 0x2c
    ab80:	2801      	cmp	r0, #1
    ab82:	f105 0301 	add.w	r3, r5, #1
    ab86:	461a      	mov	r2, r3
    ab88:	d014      	beq.n	abb4 <_strtod_l+0xa8c>
    ab8a:	4428      	add	r0, r5
    ab8c:	1e44      	subs	r4, r0, #1
    ab8e:	e003      	b.n	ab98 <_strtod_l+0xa70>
    ab90:	0046      	lsls	r6, r0, #1
    ab92:	429c      	cmp	r4, r3
    ab94:	d00d      	beq.n	abb2 <_strtod_l+0xa8a>
    ab96:	3301      	adds	r3, #1
    ab98:	462a      	mov	r2, r5
    ab9a:	2a08      	cmp	r2, #8
    ab9c:	461d      	mov	r5, r3
    ab9e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    aba2:	d9f5      	bls.n	ab90 <_strtod_l+0xa68>
    aba4:	2b10      	cmp	r3, #16
    aba6:	bfdc      	itt	le
    aba8:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    abac:	ea4f 0949 	movle.w	r9, r9, lsl #1
    abb0:	e7ef      	b.n	ab92 <_strtod_l+0xa6a>
    abb2:	3202      	adds	r2, #2
    abb4:	2d08      	cmp	r5, #8
    abb6:	dc3c      	bgt.n	ac32 <_strtod_l+0xb0a>
    abb8:	4615      	mov	r5, r2
    abba:	f7ff bb79 	b.w	a2b0 <_strtod_l+0x188>
    abbe:	4989      	ldr	r1, [pc, #548]	; (ade4 <_strtod_l+0xcbc>)
    abc0:	2201      	movs	r2, #1
    abc2:	4638      	mov	r0, r7
    abc4:	f000 fd74 	bl	b6b0 <strncmp>
    abc8:	2800      	cmp	r0, #0
    abca:	f000 8082 	beq.w	acd2 <_strtod_l+0xbaa>
    abce:	f04f 0e00 	mov.w	lr, #0
    abd2:	46f1      	mov	r9, lr
    abd4:	4676      	mov	r6, lr
    abd6:	4675      	mov	r5, lr
    abd8:	f7ff bbb5 	b.w	a346 <_strtod_l+0x21e>
    abdc:	f644 631f 	movw	r3, #19999	; 0x4e1f
    abe0:	459b      	cmp	fp, r3
    abe2:	bfa8      	it	ge
    abe4:	469b      	movge	fp, r3
    abe6:	e42f      	b.n	a448 <_strtod_l+0x320>
    abe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    abec:	4618      	mov	r0, r3
    abee:	2b00      	cmp	r3, #0
    abf0:	f47f ae23 	bne.w	a83a <_strtod_l+0x712>
    abf4:	2322      	movs	r3, #34	; 0x22
    abf6:	ed9f 8b74 	vldr	d8, [pc, #464]	; adc8 <_strtod_l+0xca0>
    abfa:	9812      	ldr	r0, [sp, #72]	; 0x48
    abfc:	f8c8 3000 	str.w	r3, [r8]
    ac00:	e678      	b.n	a8f4 <_strtod_l+0x7cc>
    ac02:	eeb0 7b49 	vmov.f64	d7, d9
    ac06:	e6c0      	b.n	a98a <_strtod_l+0x862>
    ac08:	4977      	ldr	r1, [pc, #476]	; (ade8 <_strtod_l+0xcc0>)
    ac0a:	a811      	add	r0, sp, #68	; 0x44
    ac0c:	f001 fdcc 	bl	c7a8 <__match>
    ac10:	2800      	cmp	r0, #0
    ac12:	f43f ab71 	beq.w	a2f8 <_strtod_l+0x1d0>
    ac16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ac18:	4974      	ldr	r1, [pc, #464]	; (adec <_strtod_l+0xcc4>)
    ac1a:	3b01      	subs	r3, #1
    ac1c:	a811      	add	r0, sp, #68	; 0x44
    ac1e:	9311      	str	r3, [sp, #68]	; 0x44
    ac20:	f001 fdc2 	bl	c7a8 <__match>
    ac24:	b910      	cbnz	r0, ac2c <_strtod_l+0xb04>
    ac26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ac28:	3301      	adds	r3, #1
    ac2a:	9311      	str	r3, [sp, #68]	; 0x44
    ac2c:	ed9f 8b68 	vldr	d8, [pc, #416]	; add0 <_strtod_l+0xca8>
    ac30:	e437      	b.n	a4a2 <_strtod_l+0x37a>
    ac32:	2a10      	cmp	r2, #16
    ac34:	bfdc      	itt	le
    ac36:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    ac3a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    ac3e:	4615      	mov	r5, r2
    ac40:	2000      	movs	r0, #0
    ac42:	f7ff bb3a 	b.w	a2ba <_strtod_l+0x192>
    ac46:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ac48:	b13a      	cbz	r2, ac5a <_strtod_l+0xb32>
    ac4a:	2135      	movs	r1, #53	; 0x35
    ac4c:	a814      	add	r0, sp, #80	; 0x50
    ac4e:	f002 fb8f 	bl	d370 <__copybits>
    ac52:	9912      	ldr	r1, [sp, #72]	; 0x48
    ac54:	4640      	mov	r0, r8
    ac56:	f001 fed7 	bl	ca08 <_Bfree>
    ac5a:	3d01      	subs	r5, #1
    ac5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ac5e:	2d04      	cmp	r5, #4
    ac60:	f200 818f 	bhi.w	af82 <_strtod_l+0xe5a>
    ac64:	e8df f005 	tbb	[pc, r5]
    ac68:	1f2a2d03 	.word	0x1f2a2d03
    ac6c:	03          	.byte	0x03
    ac6d:	00          	.byte	0x00
    ac6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ac70:	9204      	str	r2, [sp, #16]
    ac72:	f203 4233 	addw	r2, r3, #1075	; 0x433
    ac76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    ac7c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    ac80:	9305      	str	r3, [sp, #20]
    ac82:	05e5      	lsls	r5, r4, #23
    ac84:	d502      	bpl.n	ac8c <_strtod_l+0xb64>
    ac86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ac8a:	9305      	str	r3, [sp, #20]
    ac8c:	4a58      	ldr	r2, [pc, #352]	; (adf0 <_strtod_l+0xcc8>)
    ac8e:	401a      	ands	r2, r3
    ac90:	ed9d 8b04 	vldr	d8, [sp, #16]
    ac94:	2a00      	cmp	r2, #0
    ac96:	f47f ac04 	bne.w	a4a2 <_strtod_l+0x37a>
    ac9a:	f000 fded 	bl	b878 <__errno>
    ac9e:	2322      	movs	r3, #34	; 0x22
    aca0:	6003      	str	r3, [r0, #0]
    aca2:	f7ff bbfe 	b.w	a4a2 <_strtod_l+0x37a>
    aca6:	f04f 33ff 	mov.w	r3, #4294967295
    acaa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    acae:	e9cd 3604 	strd	r3, r6, [sp, #16]
    acb2:	05e3      	lsls	r3, r4, #23
    acb4:	f57f af5c 	bpl.w	ab70 <_strtod_l+0xa48>
    acb8:	9b05      	ldr	r3, [sp, #20]
    acba:	e7e4      	b.n	ac86 <_strtod_l+0xb5e>
    acbc:	4b4c      	ldr	r3, [pc, #304]	; (adf0 <_strtod_l+0xcc8>)
    acbe:	9305      	str	r3, [sp, #20]
    acc0:	e7f7      	b.n	acb2 <_strtod_l+0xb8a>
    acc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    acc4:	9304      	str	r3, [sp, #16]
    acc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    acc8:	9305      	str	r3, [sp, #20]
    acca:	e7da      	b.n	ac82 <_strtod_l+0xb5a>
    accc:	2000      	movs	r0, #0
    acce:	f7ff bae1 	b.w	a294 <_strtod_l+0x16c>
    acd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    acd4:	461a      	mov	r2, r3
    acd6:	3301      	adds	r3, #1
    acd8:	9311      	str	r3, [sp, #68]	; 0x44
    acda:	7854      	ldrb	r4, [r2, #1]
    acdc:	4606      	mov	r6, r0
    acde:	4681      	mov	r9, r0
    ace0:	f7ff bacd 	b.w	a27e <_strtod_l+0x156>
    ace4:	4b43      	ldr	r3, [pc, #268]	; (adf4 <_strtod_l+0xccc>)
    ace6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    acea:	ed93 8b00 	vldr	d8, [r3]
    acee:	ed9d 7b04 	vldr	d7, [sp, #16]
    acf2:	ee28 8b07 	vmul.f64	d8, d8, d7
    acf6:	f7ff bbd4 	b.w	a4a2 <_strtod_l+0x37a>
    acfa:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    acfe:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    ad02:	e511      	b.n	a728 <_strtod_l+0x600>
    ad04:	46ae      	mov	lr, r5
    ad06:	900b      	str	r0, [sp, #44]	; 0x2c
    ad08:	f7ff badc 	b.w	a2c4 <_strtod_l+0x19c>
    ad0c:	4b39      	ldr	r3, [pc, #228]	; (adf4 <_strtod_l+0xccc>)
    ad0e:	f1c5 050f 	rsb	r5, r5, #15
    ad12:	1b4a      	subs	r2, r1, r5
    ad14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    ad18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ad1c:	ed95 8b00 	vldr	d8, [r5]
    ad20:	ed93 7b00 	vldr	d7, [r3]
    ad24:	ed9d 6b04 	vldr	d6, [sp, #16]
    ad28:	ee28 8b06 	vmul.f64	d8, d8, d6
    ad2c:	ee28 8b07 	vmul.f64	d8, d8, d7
    ad30:	f7ff bbb7 	b.w	a4a2 <_strtod_l+0x37a>
    ad34:	2d00      	cmp	r5, #0
    ad36:	f000 8095 	beq.w	ae64 <_strtod_l+0xd3c>
    ad3a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    ad3e:	4b2e      	ldr	r3, [pc, #184]	; (adf8 <_strtod_l+0xcd0>)
    ad40:	f3cc 0113 	ubfx	r1, ip, #0, #20
    ad44:	4299      	cmp	r1, r3
    ad46:	4662      	mov	r2, ip
    ad48:	f000 80d2 	beq.w	aef0 <_strtod_l+0xdc8>
    ad4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad4e:	2b00      	cmp	r3, #0
    ad50:	f000 80a5 	beq.w	ae9e <_strtod_l+0xd76>
    ad54:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ad58:	4213      	tst	r3, r2
    ad5a:	4617      	mov	r7, r2
    ad5c:	d01a      	beq.n	ad94 <_strtod_l+0xc6c>
    ad5e:	eeb0 0b48 	vmov.f64	d0, d8
    ad62:	2d00      	cmp	r5, #0
    ad64:	f000 80a6 	beq.w	aeb4 <_strtod_l+0xd8c>
    ad68:	f002 f9d2 	bl	d110 <__ulp>
    ad6c:	9b08      	ldr	r3, [sp, #32]
    ad6e:	b17b      	cbz	r3, ad90 <_strtod_l+0xc68>
    ad70:	f3c7 530a 	ubfx	r3, r7, #20, #11
    ad74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    ad78:	2b00      	cmp	r3, #0
    ad7a:	dd09      	ble.n	ad90 <_strtod_l+0xc68>
    ad7c:	051b      	lsls	r3, r3, #20
    ad7e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    ad82:	2000      	movs	r0, #0
    ad84:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    ad88:	ec41 0b17 	vmov	d7, r0, r1
    ad8c:	ee20 0b07 	vmul.f64	d0, d0, d7
    ad90:	ee38 8b00 	vadd.f64	d8, d8, d0
    ad94:	9b08      	ldr	r3, [sp, #32]
    ad96:	b15b      	cbz	r3, adb0 <_strtod_l+0xc88>
    ad98:	ed9f 7b0f 	vldr	d7, [pc, #60]	; add8 <_strtod_l+0xcb0>
    ad9c:	4b14      	ldr	r3, [pc, #80]	; (adf0 <_strtod_l+0xcc8>)
    ad9e:	ee28 8b07 	vmul.f64	d8, d8, d7
    ada2:	ee18 2a90 	vmov	r2, s17
    ada6:	4013      	ands	r3, r2
    ada8:	b913      	cbnz	r3, adb0 <_strtod_l+0xc88>
    adaa:	2322      	movs	r3, #34	; 0x22
    adac:	f8c8 3000 	str.w	r3, [r8]
    adb0:	9812      	ldr	r0, [sp, #72]	; 0x48
    adb2:	e59f      	b.n	a8f4 <_strtod_l+0x7cc>
    adb4:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    adb8:	9305      	str	r3, [sp, #20]
    adba:	2300      	movs	r3, #0
    adbc:	9308      	str	r3, [sp, #32]
    adbe:	f7ff bbb1 	b.w	a524 <_strtod_l+0x3fc>
    adc2:	bf00      	nop
    adc4:	f3af 8000 	nop.w
	...
    add4:	7ff00000 	.word	0x7ff00000
    add8:	00000000 	.word	0x00000000
    addc:	39500000 	.word	0x39500000
    ade0:	20007b28 	.word	0x20007b28
    ade4:	20007e38 	.word	0x20007e38
    ade8:	20000d30 	.word	0x20000d30
    adec:	20000d34 	.word	0x20000d34
    adf0:	7ff00000 	.word	0x7ff00000
    adf4:	20000328 	.word	0x20000328
    adf8:	000fffff 	.word	0x000fffff
    adfc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ae00:	430d      	orrs	r5, r1
    ae02:	d1c7      	bne.n	ad94 <_strtod_l+0xc6c>
    ae04:	f3c2 0313 	ubfx	r3, r2, #0, #20
    ae08:	4617      	mov	r7, r2
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d1c2      	bne.n	ad94 <_strtod_l+0xc6c>
    ae0e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    ae12:	0d1b      	lsrs	r3, r3, #20
    ae14:	051b      	lsls	r3, r3, #20
    ae16:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    ae1a:	d9bb      	bls.n	ad94 <_strtod_l+0xc6c>
    ae1c:	f8da 3014 	ldr.w	r3, [sl, #20]
    ae20:	b91b      	cbnz	r3, ae2a <_strtod_l+0xd02>
    ae22:	f8da 3010 	ldr.w	r3, [sl, #16]
    ae26:	2b01      	cmp	r3, #1
    ae28:	ddb4      	ble.n	ad94 <_strtod_l+0xc6c>
    ae2a:	4651      	mov	r1, sl
    ae2c:	2201      	movs	r2, #1
    ae2e:	4640      	mov	r0, r8
    ae30:	f002 f82a 	bl	ce88 <__lshift>
    ae34:	4621      	mov	r1, r4
    ae36:	4682      	mov	sl, r0
    ae38:	f002 f89e 	bl	cf78 <__mcmp>
    ae3c:	2800      	cmp	r0, #0
    ae3e:	dda9      	ble.n	ad94 <_strtod_l+0xc6c>
    ae40:	9b08      	ldr	r3, [sp, #32]
    ae42:	2b00      	cmp	r3, #0
    ae44:	d17e      	bne.n	af44 <_strtod_l+0xe1c>
    ae46:	4b50      	ldr	r3, [pc, #320]	; (af88 <_strtod_l+0xe60>)
    ae48:	403b      	ands	r3, r7
    ae4a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    ae4e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    ae52:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    ae56:	9305      	str	r3, [sp, #20]
    ae58:	f04f 33ff 	mov.w	r3, #4294967295
    ae5c:	9304      	str	r3, [sp, #16]
    ae5e:	ed9d 8b04 	vldr	d8, [sp, #16]
    ae62:	e797      	b.n	ad94 <_strtod_l+0xc6c>
    ae64:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ae68:	f3c2 0313 	ubfx	r3, r2, #0, #20
    ae6c:	430b      	orrs	r3, r1
    ae6e:	4617      	mov	r7, r2
    ae70:	f47f af6c 	bne.w	ad4c <_strtod_l+0xc24>
    ae74:	e7e4      	b.n	ae40 <_strtod_l+0xd18>
    ae76:	4945      	ldr	r1, [pc, #276]	; (af8c <_strtod_l+0xe64>)
    ae78:	a811      	add	r0, sp, #68	; 0x44
    ae7a:	aa14      	add	r2, sp, #80	; 0x50
    ae7c:	f001 fcb0 	bl	c7e0 <__hexnan>
    ae80:	2805      	cmp	r0, #5
    ae82:	f47f ab06 	bne.w	a492 <_strtod_l+0x36a>
    ae86:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ae88:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    ae8c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    ae90:	9305      	str	r3, [sp, #20]
    ae92:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ae94:	9304      	str	r3, [sp, #16]
    ae96:	ed9d 8b04 	vldr	d8, [sp, #16]
    ae9a:	f7ff bb02 	b.w	a4a2 <_strtod_l+0x37a>
    ae9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aea4:	4203      	tst	r3, r0
    aea6:	f43f af75 	beq.w	ad94 <_strtod_l+0xc6c>
    aeaa:	460f      	mov	r7, r1
    aeac:	e757      	b.n	ad5e <_strtod_l+0xc36>
    aeae:	4c38      	ldr	r4, [pc, #224]	; (af90 <_strtod_l+0xe68>)
    aeb0:	2100      	movs	r1, #0
    aeb2:	e58f      	b.n	a9d4 <_strtod_l+0x8ac>
    aeb4:	f002 f92c 	bl	d110 <__ulp>
    aeb8:	9b08      	ldr	r3, [sp, #32]
    aeba:	2b00      	cmp	r3, #0
    aebc:	d055      	beq.n	af6a <_strtod_l+0xe42>
    aebe:	f3c7 530a 	ubfx	r3, r7, #20, #11
    aec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    aec6:	2b00      	cmp	r3, #0
    aec8:	dd09      	ble.n	aede <_strtod_l+0xdb6>
    aeca:	051b      	lsls	r3, r3, #20
    aecc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    aed0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    aed4:	4628      	mov	r0, r5
    aed6:	ec41 0b17 	vmov	d7, r0, r1
    aeda:	ee20 0b07 	vmul.f64	d0, d0, d7
    aede:	ee38 8b40 	vsub.f64	d8, d8, d0
    aee2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    aee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aeea:	f47f af55 	bne.w	ad98 <_strtod_l+0xc70>
    aeee:	e681      	b.n	abf4 <_strtod_l+0xacc>
    aef0:	9b08      	ldr	r3, [sp, #32]
    aef2:	9904      	ldr	r1, [sp, #16]
    aef4:	b31b      	cbz	r3, af3e <_strtod_l+0xe16>
    aef6:	4b24      	ldr	r3, [pc, #144]	; (af88 <_strtod_l+0xe60>)
    aef8:	4013      	ands	r3, r2
    aefa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    aefe:	d81e      	bhi.n	af3e <_strtod_l+0xe16>
    af00:	0d1b      	lsrs	r3, r3, #20
    af02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    af06:	f04f 30ff 	mov.w	r0, #4294967295
    af0a:	fa00 f303 	lsl.w	r3, r0, r3
    af0e:	4299      	cmp	r1, r3
    af10:	f47f af1c 	bne.w	ad4c <_strtod_l+0xc24>
    af14:	4b1f      	ldr	r3, [pc, #124]	; (af94 <_strtod_l+0xe6c>)
    af16:	429a      	cmp	r2, r3
    af18:	d030      	beq.n	af7c <_strtod_l+0xe54>
    af1a:	4b1b      	ldr	r3, [pc, #108]	; (af88 <_strtod_l+0xe60>)
    af1c:	4013      	ands	r3, r2
    af1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    af22:	9305      	str	r3, [sp, #20]
    af24:	2300      	movs	r3, #0
    af26:	9304      	str	r3, [sp, #16]
    af28:	ed9d 8b04 	vldr	d8, [sp, #16]
    af2c:	e732      	b.n	ad94 <_strtod_l+0xc6c>
    af2e:	f04f 32ff 	mov.w	r2, #4294967295
    af32:	fa02 f303 	lsl.w	r3, r2, r3
    af36:	9a04      	ldr	r2, [sp, #16]
    af38:	401a      	ands	r2, r3
    af3a:	9204      	str	r2, [sp, #16]
    af3c:	e5d0      	b.n	aae0 <_strtod_l+0x9b8>
    af3e:	f04f 33ff 	mov.w	r3, #4294967295
    af42:	e7e4      	b.n	af0e <_strtod_l+0xde6>
    af44:	4b10      	ldr	r3, [pc, #64]	; (af88 <_strtod_l+0xe60>)
    af46:	403b      	ands	r3, r7
    af48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    af4c:	f73f af7d 	bgt.w	ae4a <_strtod_l+0xd22>
    af50:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    af54:	f73f af20 	bgt.w	ad98 <_strtod_l+0xc70>
    af58:	e64c      	b.n	abf4 <_strtod_l+0xacc>
    af5a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    af5e:	f04f 33ff 	mov.w	r3, #4294967295
    af62:	4093      	lsls	r3, r2
    af64:	400b      	ands	r3, r1
    af66:	9305      	str	r3, [sp, #20]
    af68:	e5ba      	b.n	aae0 <_strtod_l+0x9b8>
    af6a:	ee38 8b40 	vsub.f64	d8, d8, d0
    af6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    af72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af76:	f47f af1b 	bne.w	adb0 <_strtod_l+0xc88>
    af7a:	e63b      	b.n	abf4 <_strtod_l+0xacc>
    af7c:	3101      	adds	r1, #1
    af7e:	d1cc      	bne.n	af1a <_strtod_l+0xdf2>
    af80:	e409      	b.n	a796 <_strtod_l+0x66e>
    af82:	2300      	movs	r3, #0
    af84:	e67d      	b.n	ac82 <_strtod_l+0xb5a>
    af86:	bf00      	nop
    af88:	7ff00000 	.word	0x7ff00000
    af8c:	20007b3c 	.word	0x20007b3c
    af90:	20000300 	.word	0x20000300
    af94:	7fefffff 	.word	0x7fefffff

0000af98 <_strtod_r>:
    af98:	4b01      	ldr	r3, [pc, #4]	; (afa0 <_strtod_r+0x8>)
    af9a:	f7ff b8c5 	b.w	a128 <_strtod_l>
    af9e:	bf00      	nop
    afa0:	200086f0 	.word	0x200086f0

0000afa4 <_strtol_l.constprop.0>:
    afa4:	2b01      	cmp	r3, #1
    afa6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afaa:	d040      	beq.n	b02e <_strtol_l.constprop.0+0x8a>
    afac:	2b24      	cmp	r3, #36	; 0x24
    afae:	4698      	mov	r8, r3
    afb0:	d83d      	bhi.n	b02e <_strtol_l.constprop.0+0x8a>
    afb2:	4d4c      	ldr	r5, [pc, #304]	; (b0e4 <_strtol_l.constprop.0+0x140>)
    afb4:	468e      	mov	lr, r1
    afb6:	4676      	mov	r6, lr
    afb8:	f81e bb01 	ldrb.w	fp, [lr], #1
    afbc:	f815 400b 	ldrb.w	r4, [r5, fp]
    afc0:	f014 0408 	ands.w	r4, r4, #8
    afc4:	d1f7      	bne.n	afb6 <_strtol_l.constprop.0+0x12>
    afc6:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    afca:	d072      	beq.n	b0b2 <_strtol_l.constprop.0+0x10e>
    afcc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    afd0:	bf08      	it	eq
    afd2:	f89e b000 	ldrbeq.w	fp, [lr]
    afd6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    afda:	bf08      	it	eq
    afdc:	f106 0e02 	addeq.w	lr, r6, #2
    afe0:	2b00      	cmp	r3, #0
    afe2:	d042      	beq.n	b06a <_strtol_l.constprop.0+0xc6>
    afe4:	2b10      	cmp	r3, #16
    afe6:	d057      	beq.n	b098 <_strtol_l.constprop.0+0xf4>
    afe8:	fbb9 f7f8 	udiv	r7, r9, r8
    afec:	2500      	movs	r5, #0
    afee:	462e      	mov	r6, r5
    aff0:	fb08 9a17 	mls	sl, r8, r7, r9
    aff4:	e005      	b.n	b002 <_strtol_l.constprop.0+0x5e>
    aff6:	d033      	beq.n	b060 <_strtol_l.constprop.0+0xbc>
    aff8:	fb08 c606 	mla	r6, r8, r6, ip
    affc:	2501      	movs	r5, #1
    affe:	f81e bb01 	ldrb.w	fp, [lr], #1
    b002:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b006:	f1bc 0f09 	cmp.w	ip, #9
    b00a:	d906      	bls.n	b01a <_strtol_l.constprop.0+0x76>
    b00c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b010:	f1bc 0f19 	cmp.w	ip, #25
    b014:	d812      	bhi.n	b03c <_strtol_l.constprop.0+0x98>
    b016:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b01a:	4563      	cmp	r3, ip
    b01c:	dd17      	ble.n	b04e <_strtol_l.constprop.0+0xaa>
    b01e:	f1b5 3fff 	cmp.w	r5, #4294967295
    b022:	d0ec      	beq.n	affe <_strtol_l.constprop.0+0x5a>
    b024:	42b7      	cmp	r7, r6
    b026:	d2e6      	bcs.n	aff6 <_strtol_l.constprop.0+0x52>
    b028:	f04f 35ff 	mov.w	r5, #4294967295
    b02c:	e7e7      	b.n	affe <_strtol_l.constprop.0+0x5a>
    b02e:	f000 fc23 	bl	b878 <__errno>
    b032:	2316      	movs	r3, #22
    b034:	6003      	str	r3, [r0, #0]
    b036:	2000      	movs	r0, #0
    b038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b03c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b040:	f1bc 0f19 	cmp.w	ip, #25
    b044:	d803      	bhi.n	b04e <_strtol_l.constprop.0+0xaa>
    b046:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b04a:	4563      	cmp	r3, ip
    b04c:	dce7      	bgt.n	b01e <_strtol_l.constprop.0+0x7a>
    b04e:	1c6b      	adds	r3, r5, #1
    b050:	d027      	beq.n	b0a2 <_strtol_l.constprop.0+0xfe>
    b052:	b98c      	cbnz	r4, b078 <_strtol_l.constprop.0+0xd4>
    b054:	b10a      	cbz	r2, b05a <_strtol_l.constprop.0+0xb6>
    b056:	bba5      	cbnz	r5, b0c2 <_strtol_l.constprop.0+0x11e>
    b058:	6011      	str	r1, [r2, #0]
    b05a:	4630      	mov	r0, r6
    b05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b060:	45e2      	cmp	sl, ip
    b062:	dac9      	bge.n	aff8 <_strtol_l.constprop.0+0x54>
    b064:	f04f 35ff 	mov.w	r5, #4294967295
    b068:	e7c9      	b.n	affe <_strtol_l.constprop.0+0x5a>
    b06a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b06e:	d005      	beq.n	b07c <_strtol_l.constprop.0+0xd8>
    b070:	f04f 080a 	mov.w	r8, #10
    b074:	4643      	mov	r3, r8
    b076:	e7b7      	b.n	afe8 <_strtol_l.constprop.0+0x44>
    b078:	4276      	negs	r6, r6
    b07a:	e7eb      	b.n	b054 <_strtol_l.constprop.0+0xb0>
    b07c:	f89e 3000 	ldrb.w	r3, [lr]
    b080:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b084:	2b58      	cmp	r3, #88	; 0x58
    b086:	d121      	bne.n	b0cc <_strtol_l.constprop.0+0x128>
    b088:	f04f 0810 	mov.w	r8, #16
    b08c:	f89e b001 	ldrb.w	fp, [lr, #1]
    b090:	4643      	mov	r3, r8
    b092:	f10e 0e02 	add.w	lr, lr, #2
    b096:	e7a7      	b.n	afe8 <_strtol_l.constprop.0+0x44>
    b098:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b09c:	d01a      	beq.n	b0d4 <_strtol_l.constprop.0+0x130>
    b09e:	4698      	mov	r8, r3
    b0a0:	e7a2      	b.n	afe8 <_strtol_l.constprop.0+0x44>
    b0a2:	2322      	movs	r3, #34	; 0x22
    b0a4:	6003      	str	r3, [r0, #0]
    b0a6:	b172      	cbz	r2, b0c6 <_strtol_l.constprop.0+0x122>
    b0a8:	f10e 31ff 	add.w	r1, lr, #4294967295
    b0ac:	464e      	mov	r6, r9
    b0ae:	6011      	str	r1, [r2, #0]
    b0b0:	e7d3      	b.n	b05a <_strtol_l.constprop.0+0xb6>
    b0b2:	f89e b000 	ldrb.w	fp, [lr]
    b0b6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b0ba:	f106 0e02 	add.w	lr, r6, #2
    b0be:	2401      	movs	r4, #1
    b0c0:	e78e      	b.n	afe0 <_strtol_l.constprop.0+0x3c>
    b0c2:	46b1      	mov	r9, r6
    b0c4:	e7f0      	b.n	b0a8 <_strtol_l.constprop.0+0x104>
    b0c6:	464e      	mov	r6, r9
    b0c8:	4630      	mov	r0, r6
    b0ca:	e7c7      	b.n	b05c <_strtol_l.constprop.0+0xb8>
    b0cc:	f04f 0808 	mov.w	r8, #8
    b0d0:	4643      	mov	r3, r8
    b0d2:	e789      	b.n	afe8 <_strtol_l.constprop.0+0x44>
    b0d4:	f89e 5000 	ldrb.w	r5, [lr]
    b0d8:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b0dc:	2d58      	cmp	r5, #88	; 0x58
    b0de:	d0d3      	beq.n	b088 <_strtol_l.constprop.0+0xe4>
    b0e0:	4698      	mov	r8, r3
    b0e2:	e781      	b.n	afe8 <_strtol_l.constprop.0+0x44>
    b0e4:	20000bad 	.word	0x20000bad

0000b0e8 <_strtol_r>:
    b0e8:	f7ff bf5c 	b.w	afa4 <_strtol_l.constprop.0>

0000b0ec <__cxa_atexit>:
    b0ec:	4613      	mov	r3, r2
    b0ee:	460a      	mov	r2, r1
    b0f0:	4601      	mov	r1, r0
    b0f2:	2002      	movs	r0, #2
    b0f4:	f000 bea2 	b.w	be3c <__register_exitproc>

0000b0f8 <stdio_exit_handler>:
    b0f8:	4a02      	ldr	r2, [pc, #8]	; (b104 <stdio_exit_handler+0xc>)
    b0fa:	4903      	ldr	r1, [pc, #12]	; (b108 <stdio_exit_handler+0x10>)
    b0fc:	4803      	ldr	r0, [pc, #12]	; (b10c <stdio_exit_handler+0x14>)
    b0fe:	f000 b8bb 	b.w	b278 <_fwalk_sglue>
    b102:	bf00      	nop
    b104:	20008c6c 	.word	0x20008c6c
    b108:	000107e5 	.word	0x000107e5
    b10c:	200085a0 	.word	0x200085a0

0000b110 <cleanup_stdio>:
    b110:	4b0c      	ldr	r3, [pc, #48]	; (b144 <cleanup_stdio+0x34>)
    b112:	6841      	ldr	r1, [r0, #4]
    b114:	4299      	cmp	r1, r3
    b116:	b510      	push	{r4, lr}
    b118:	4604      	mov	r4, r0
    b11a:	d001      	beq.n	b120 <cleanup_stdio+0x10>
    b11c:	f005 fb62 	bl	107e4 <_fclose_r>
    b120:	68a1      	ldr	r1, [r4, #8]
    b122:	4b09      	ldr	r3, [pc, #36]	; (b148 <cleanup_stdio+0x38>)
    b124:	4299      	cmp	r1, r3
    b126:	d002      	beq.n	b12e <cleanup_stdio+0x1e>
    b128:	4620      	mov	r0, r4
    b12a:	f005 fb5b 	bl	107e4 <_fclose_r>
    b12e:	68e1      	ldr	r1, [r4, #12]
    b130:	4b06      	ldr	r3, [pc, #24]	; (b14c <cleanup_stdio+0x3c>)
    b132:	4299      	cmp	r1, r3
    b134:	d004      	beq.n	b140 <cleanup_stdio+0x30>
    b136:	4620      	mov	r0, r4
    b138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b13c:	f005 bb52 	b.w	107e4 <_fclose_r>
    b140:	bd10      	pop	{r4, pc}
    b142:	bf00      	nop
    b144:	20026af0 	.word	0x20026af0
    b148:	20026b58 	.word	0x20026b58
    b14c:	20026bc0 	.word	0x20026bc0

0000b150 <global_stdio_init.part.0>:
    b150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b154:	4c2a      	ldr	r4, [pc, #168]	; (b200 <global_stdio_init.part.0+0xb0>)
    b156:	4b2b      	ldr	r3, [pc, #172]	; (b204 <global_stdio_init.part.0+0xb4>)
    b158:	482b      	ldr	r0, [pc, #172]	; (b208 <global_stdio_init.part.0+0xb8>)
    b15a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b21c <global_stdio_init.part.0+0xcc>
    b15e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b220 <global_stdio_init.part.0+0xd0>
    b162:	4f2a      	ldr	r7, [pc, #168]	; (b20c <global_stdio_init.part.0+0xbc>)
    b164:	6018      	str	r0, [r3, #0]
    b166:	2500      	movs	r5, #0
    b168:	2304      	movs	r3, #4
    b16a:	2208      	movs	r2, #8
    b16c:	4629      	mov	r1, r5
    b16e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b172:	4e27      	ldr	r6, [pc, #156]	; (b210 <global_stdio_init.part.0+0xc0>)
    b174:	6665      	str	r5, [r4, #100]	; 0x64
    b176:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b17a:	e9c4 5500 	strd	r5, r5, [r4]
    b17e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b182:	61a5      	str	r5, [r4, #24]
    b184:	f000 fa42 	bl	b60c <memset>
    b188:	4b22      	ldr	r3, [pc, #136]	; (b214 <global_stdio_init.part.0+0xc4>)
    b18a:	6763      	str	r3, [r4, #116]	; 0x74
    b18c:	2208      	movs	r2, #8
    b18e:	4629      	mov	r1, r5
    b190:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b194:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b198:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b19c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b1a0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b1a4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b1a8:	6725      	str	r5, [r4, #112]	; 0x70
    b1aa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b1ae:	62e6      	str	r6, [r4, #44]	; 0x2c
    b1b0:	f000 fa2c 	bl	b60c <memset>
    b1b4:	4b18      	ldr	r3, [pc, #96]	; (b218 <global_stdio_init.part.0+0xc8>)
    b1b6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b1ba:	4629      	mov	r1, r5
    b1bc:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b1c0:	2208      	movs	r2, #8
    b1c2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b1c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b1ca:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b1ce:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b1d2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b1d6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b1da:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b1de:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b1e2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b1e6:	f000 fa11 	bl	b60c <memset>
    b1ea:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b1ee:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b1f2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b1f6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b1fe:	bf00      	nop
    b200:	20026af0 	.word	0x20026af0
    b204:	20026c28 	.word	0x20026c28
    b208:	0000b0f9 	.word	0x0000b0f9
    b20c:	0000b3c1 	.word	0x0000b3c1
    b210:	0000b3e1 	.word	0x0000b3e1
    b214:	00010009 	.word	0x00010009
    b218:	00020012 	.word	0x00020012
    b21c:	0000b359 	.word	0x0000b359
    b220:	0000b381 	.word	0x0000b381

0000b224 <__sinit>:
    b224:	b510      	push	{r4, lr}
    b226:	4604      	mov	r4, r0
    b228:	480a      	ldr	r0, [pc, #40]	; (b254 <__sinit+0x30>)
    b22a:	f000 fb53 	bl	b8d4 <__retarget_lock_acquire_recursive>
    b22e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b230:	b923      	cbnz	r3, b23c <__sinit+0x18>
    b232:	4b09      	ldr	r3, [pc, #36]	; (b258 <__sinit+0x34>)
    b234:	4a09      	ldr	r2, [pc, #36]	; (b25c <__sinit+0x38>)
    b236:	681b      	ldr	r3, [r3, #0]
    b238:	6362      	str	r2, [r4, #52]	; 0x34
    b23a:	b123      	cbz	r3, b246 <__sinit+0x22>
    b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b240:	4804      	ldr	r0, [pc, #16]	; (b254 <__sinit+0x30>)
    b242:	f000 bb49 	b.w	b8d8 <__retarget_lock_release_recursive>
    b246:	f7ff ff83 	bl	b150 <global_stdio_init.part.0>
    b24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b24e:	4801      	ldr	r0, [pc, #4]	; (b254 <__sinit+0x30>)
    b250:	f000 bb42 	b.w	b8d8 <__retarget_lock_release_recursive>
    b254:	20026ab8 	.word	0x20026ab8
    b258:	20026c28 	.word	0x20026c28
    b25c:	0000b111 	.word	0x0000b111

0000b260 <__sfp_lock_acquire>:
    b260:	4801      	ldr	r0, [pc, #4]	; (b268 <__sfp_lock_acquire+0x8>)
    b262:	f000 bb37 	b.w	b8d4 <__retarget_lock_acquire_recursive>
    b266:	bf00      	nop
    b268:	20026ab8 	.word	0x20026ab8

0000b26c <__sfp_lock_release>:
    b26c:	4801      	ldr	r0, [pc, #4]	; (b274 <__sfp_lock_release+0x8>)
    b26e:	f000 bb33 	b.w	b8d8 <__retarget_lock_release_recursive>
    b272:	bf00      	nop
    b274:	20026ab8 	.word	0x20026ab8

0000b278 <_fwalk_sglue>:
    b278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b27c:	4680      	mov	r8, r0
    b27e:	460f      	mov	r7, r1
    b280:	4616      	mov	r6, r2
    b282:	f04f 0900 	mov.w	r9, #0
    b286:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b28a:	3d01      	subs	r5, #1
    b28c:	d411      	bmi.n	b2b2 <_fwalk_sglue+0x3a>
    b28e:	89a3      	ldrh	r3, [r4, #12]
    b290:	2b01      	cmp	r3, #1
    b292:	f105 35ff 	add.w	r5, r5, #4294967295
    b296:	d908      	bls.n	b2aa <_fwalk_sglue+0x32>
    b298:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b29c:	3301      	adds	r3, #1
    b29e:	4621      	mov	r1, r4
    b2a0:	d003      	beq.n	b2aa <_fwalk_sglue+0x32>
    b2a2:	4640      	mov	r0, r8
    b2a4:	47b8      	blx	r7
    b2a6:	ea49 0900 	orr.w	r9, r9, r0
    b2aa:	1c6b      	adds	r3, r5, #1
    b2ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b2b0:	d1ed      	bne.n	b28e <_fwalk_sglue+0x16>
    b2b2:	6836      	ldr	r6, [r6, #0]
    b2b4:	2e00      	cmp	r6, #0
    b2b6:	d1e6      	bne.n	b286 <_fwalk_sglue+0xe>
    b2b8:	4648      	mov	r0, r9
    b2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b2be:	bf00      	nop

0000b2c0 <sprintf>:
    b2c0:	b40e      	push	{r1, r2, r3}
    b2c2:	b510      	push	{r4, lr}
    b2c4:	b09d      	sub	sp, #116	; 0x74
    b2c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b2ca:	ab1f      	add	r3, sp, #124	; 0x7c
    b2cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b2d0:	9104      	str	r1, [sp, #16]
    b2d2:	4909      	ldr	r1, [pc, #36]	; (b2f8 <sprintf+0x38>)
    b2d4:	f853 2b04 	ldr.w	r2, [r3], #4
    b2d8:	9002      	str	r0, [sp, #8]
    b2da:	4c08      	ldr	r4, [pc, #32]	; (b2fc <sprintf+0x3c>)
    b2dc:	6808      	ldr	r0, [r1, #0]
    b2de:	9301      	str	r3, [sp, #4]
    b2e0:	a902      	add	r1, sp, #8
    b2e2:	9405      	str	r4, [sp, #20]
    b2e4:	f002 f8b4 	bl	d450 <_svfprintf_r>
    b2e8:	9b02      	ldr	r3, [sp, #8]
    b2ea:	2200      	movs	r2, #0
    b2ec:	701a      	strb	r2, [r3, #0]
    b2ee:	b01d      	add	sp, #116	; 0x74
    b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2f4:	b003      	add	sp, #12
    b2f6:	4770      	bx	lr
    b2f8:	20008c78 	.word	0x20008c78
    b2fc:	ffff0208 	.word	0xffff0208

0000b300 <sscanf>:
    b300:	b40e      	push	{r1, r2, r3}
    b302:	b510      	push	{r4, lr}
    b304:	b09f      	sub	sp, #124	; 0x7c
    b306:	ac21      	add	r4, sp, #132	; 0x84
    b308:	f44f 7101 	mov.w	r1, #516	; 0x204
    b30c:	f854 2b04 	ldr.w	r2, [r4], #4
    b310:	9201      	str	r2, [sp, #4]
    b312:	f8ad 101c 	strh.w	r1, [sp, #28]
    b316:	9004      	str	r0, [sp, #16]
    b318:	9008      	str	r0, [sp, #32]
    b31a:	f000 fd11 	bl	bd40 <strlen>
    b31e:	9005      	str	r0, [sp, #20]
    b320:	9009      	str	r0, [sp, #36]	; 0x24
    b322:	480b      	ldr	r0, [pc, #44]	; (b350 <sscanf+0x50>)
    b324:	490b      	ldr	r1, [pc, #44]	; (b354 <sscanf+0x54>)
    b326:	910c      	str	r1, [sp, #48]	; 0x30
    b328:	2300      	movs	r3, #0
    b32a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    b32e:	9310      	str	r3, [sp, #64]	; 0x40
    b330:	9315      	str	r3, [sp, #84]	; 0x54
    b332:	9a01      	ldr	r2, [sp, #4]
    b334:	6800      	ldr	r0, [r0, #0]
    b336:	f8ad c01e 	strh.w	ip, [sp, #30]
    b33a:	4623      	mov	r3, r4
    b33c:	a904      	add	r1, sp, #16
    b33e:	9403      	str	r4, [sp, #12]
    b340:	f003 fe28 	bl	ef94 <__ssvfscanf_r>
    b344:	b01f      	add	sp, #124	; 0x7c
    b346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b34a:	b003      	add	sp, #12
    b34c:	4770      	bx	lr
    b34e:	bf00      	nop
    b350:	20008c78 	.word	0x20008c78
    b354:	0000b37d 	.word	0x0000b37d

0000b358 <__sread>:
    b358:	b510      	push	{r4, lr}
    b35a:	460c      	mov	r4, r1
    b35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b360:	f000 fa4c 	bl	b7fc <_read_r>
    b364:	2800      	cmp	r0, #0
    b366:	db03      	blt.n	b370 <__sread+0x18>
    b368:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b36a:	4403      	add	r3, r0
    b36c:	6523      	str	r3, [r4, #80]	; 0x50
    b36e:	bd10      	pop	{r4, pc}
    b370:	89a3      	ldrh	r3, [r4, #12]
    b372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b376:	81a3      	strh	r3, [r4, #12]
    b378:	bd10      	pop	{r4, pc}
    b37a:	bf00      	nop

0000b37c <__seofread>:
    b37c:	2000      	movs	r0, #0
    b37e:	4770      	bx	lr

0000b380 <__swrite>:
    b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b384:	460c      	mov	r4, r1
    b386:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b38a:	461f      	mov	r7, r3
    b38c:	05cb      	lsls	r3, r1, #23
    b38e:	4605      	mov	r5, r0
    b390:	4616      	mov	r6, r2
    b392:	d40b      	bmi.n	b3ac <__swrite+0x2c>
    b394:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b398:	81a1      	strh	r1, [r4, #12]
    b39a:	463b      	mov	r3, r7
    b39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b3a0:	4632      	mov	r2, r6
    b3a2:	4628      	mov	r0, r5
    b3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b3a8:	f000 ba50 	b.w	b84c <_write_r>
    b3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b3b0:	2302      	movs	r3, #2
    b3b2:	2200      	movs	r2, #0
    b3b4:	f000 fa0c 	bl	b7d0 <_lseek_r>
    b3b8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b3bc:	e7ea      	b.n	b394 <__swrite+0x14>
    b3be:	bf00      	nop

0000b3c0 <__sseek>:
    b3c0:	b510      	push	{r4, lr}
    b3c2:	460c      	mov	r4, r1
    b3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b3c8:	f000 fa02 	bl	b7d0 <_lseek_r>
    b3cc:	89a3      	ldrh	r3, [r4, #12]
    b3ce:	1c42      	adds	r2, r0, #1
    b3d0:	bf0e      	itee	eq
    b3d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b3d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b3da:	6520      	strne	r0, [r4, #80]	; 0x50
    b3dc:	81a3      	strh	r3, [r4, #12]
    b3de:	bd10      	pop	{r4, pc}

0000b3e0 <__sclose>:
    b3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b3e4:	f000 b9e2 	b.w	b7ac <_close_r>

0000b3e8 <_vdprintf_r>:
    b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3ea:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    b3ee:	af04      	add	r7, sp, #16
    b3f0:	9300      	str	r3, [sp, #0]
    b3f2:	4613      	mov	r3, r2
    b3f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    b3f8:	460e      	mov	r6, r1
    b3fa:	9203      	str	r2, [sp, #12]
    b3fc:	4639      	mov	r1, r7
    b3fe:	aa03      	add	r2, sp, #12
    b400:	4605      	mov	r5, r0
    b402:	f000 f825 	bl	b450 <_vasnprintf_r>
    b406:	b188      	cbz	r0, b42c <_vdprintf_r+0x44>
    b408:	4604      	mov	r4, r0
    b40a:	4602      	mov	r2, r0
    b40c:	9b03      	ldr	r3, [sp, #12]
    b40e:	4631      	mov	r1, r6
    b410:	4628      	mov	r0, r5
    b412:	f000 fa1b 	bl	b84c <_write_r>
    b416:	42bc      	cmp	r4, r7
    b418:	9003      	str	r0, [sp, #12]
    b41a:	d004      	beq.n	b426 <_vdprintf_r+0x3e>
    b41c:	4628      	mov	r0, r5
    b41e:	4621      	mov	r1, r4
    b420:	f000 fda0 	bl	bf64 <_free_r>
    b424:	9803      	ldr	r0, [sp, #12]
    b426:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    b42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b42c:	f04f 30ff 	mov.w	r0, #4294967295
    b430:	e7f9      	b.n	b426 <_vdprintf_r+0x3e>
    b432:	bf00      	nop

0000b434 <vdprintf>:
    b434:	b410      	push	{r4}
    b436:	4c05      	ldr	r4, [pc, #20]	; (b44c <vdprintf+0x18>)
    b438:	4684      	mov	ip, r0
    b43a:	4613      	mov	r3, r2
    b43c:	6820      	ldr	r0, [r4, #0]
    b43e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b442:	460a      	mov	r2, r1
    b444:	4661      	mov	r1, ip
    b446:	f7ff bfcf 	b.w	b3e8 <_vdprintf_r>
    b44a:	bf00      	nop
    b44c:	20008c78 	.word	0x20008c78

0000b450 <_vasnprintf_r>:
    b450:	b530      	push	{r4, r5, lr}
    b452:	6814      	ldr	r4, [r2, #0]
    b454:	4615      	mov	r5, r2
    b456:	b09b      	sub	sp, #108	; 0x6c
    b458:	461a      	mov	r2, r3
    b45a:	b109      	cbz	r1, b460 <_vasnprintf_r+0x10>
    b45c:	2c00      	cmp	r4, #0
    b45e:	d119      	bne.n	b494 <_vasnprintf_r+0x44>
    b460:	2100      	movs	r1, #0
    b462:	f44f 7322 	mov.w	r3, #648	; 0x288
    b466:	f8ad 300c 	strh.w	r3, [sp, #12]
    b46a:	9100      	str	r1, [sp, #0]
    b46c:	9104      	str	r1, [sp, #16]
    b46e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b472:	9102      	str	r1, [sp, #8]
    b474:	9105      	str	r1, [sp, #20]
    b476:	f8ad 300e 	strh.w	r3, [sp, #14]
    b47a:	4669      	mov	r1, sp
    b47c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b47e:	f001 ffe7 	bl	d450 <_svfprintf_r>
    b482:	2800      	cmp	r0, #0
    b484:	db13      	blt.n	b4ae <_vasnprintf_r+0x5e>
    b486:	9b00      	ldr	r3, [sp, #0]
    b488:	6028      	str	r0, [r5, #0]
    b48a:	2200      	movs	r2, #0
    b48c:	701a      	strb	r2, [r3, #0]
    b48e:	9804      	ldr	r0, [sp, #16]
    b490:	b01b      	add	sp, #108	; 0x6c
    b492:	bd30      	pop	{r4, r5, pc}
    b494:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    b498:	9100      	str	r1, [sp, #0]
    b49a:	9104      	str	r1, [sp, #16]
    b49c:	f8ad 300c 	strh.w	r3, [sp, #12]
    b4a0:	4621      	mov	r1, r4
    b4a2:	dae4      	bge.n	b46e <_vasnprintf_r+0x1e>
    b4a4:	238b      	movs	r3, #139	; 0x8b
    b4a6:	6003      	str	r3, [r0, #0]
    b4a8:	2000      	movs	r0, #0
    b4aa:	b01b      	add	sp, #108	; 0x6c
    b4ac:	bd30      	pop	{r4, r5, pc}
    b4ae:	2000      	movs	r0, #0
    b4b0:	e7ee      	b.n	b490 <_vasnprintf_r+0x40>
    b4b2:	bf00      	nop

0000b4b4 <memcmp>:
    b4b4:	2a03      	cmp	r2, #3
    b4b6:	b570      	push	{r4, r5, r6, lr}
    b4b8:	d914      	bls.n	b4e4 <memcmp+0x30>
    b4ba:	ea40 0301 	orr.w	r3, r0, r1
    b4be:	079b      	lsls	r3, r3, #30
    b4c0:	d122      	bne.n	b508 <memcmp+0x54>
    b4c2:	4604      	mov	r4, r0
    b4c4:	460b      	mov	r3, r1
    b4c6:	4619      	mov	r1, r3
    b4c8:	4620      	mov	r0, r4
    b4ca:	680e      	ldr	r6, [r1, #0]
    b4cc:	6805      	ldr	r5, [r0, #0]
    b4ce:	42b5      	cmp	r5, r6
    b4d0:	f104 0404 	add.w	r4, r4, #4
    b4d4:	f103 0304 	add.w	r3, r3, #4
    b4d8:	d116      	bne.n	b508 <memcmp+0x54>
    b4da:	3a04      	subs	r2, #4
    b4dc:	2a03      	cmp	r2, #3
    b4de:	4620      	mov	r0, r4
    b4e0:	4619      	mov	r1, r3
    b4e2:	d8f0      	bhi.n	b4c6 <memcmp+0x12>
    b4e4:	1e54      	subs	r4, r2, #1
    b4e6:	b19a      	cbz	r2, b510 <memcmp+0x5c>
    b4e8:	1e42      	subs	r2, r0, #1
    b4ea:	3901      	subs	r1, #1
    b4ec:	e001      	b.n	b4f2 <memcmp+0x3e>
    b4ee:	18c3      	adds	r3, r0, r3
    b4f0:	d00c      	beq.n	b50c <memcmp+0x58>
    b4f2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    b4f6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b4fa:	45e6      	cmp	lr, ip
    b4fc:	eba4 0302 	sub.w	r3, r4, r2
    b500:	d0f5      	beq.n	b4ee <memcmp+0x3a>
    b502:	ebae 000c 	sub.w	r0, lr, ip
    b506:	bd70      	pop	{r4, r5, r6, pc}
    b508:	1e54      	subs	r4, r2, #1
    b50a:	e7ed      	b.n	b4e8 <memcmp+0x34>
    b50c:	4618      	mov	r0, r3
    b50e:	bd70      	pop	{r4, r5, r6, pc}
    b510:	4610      	mov	r0, r2
    b512:	bd70      	pop	{r4, r5, r6, pc}

0000b514 <memmove>:
    b514:	4288      	cmp	r0, r1
    b516:	d90d      	bls.n	b534 <memmove+0x20>
    b518:	188b      	adds	r3, r1, r2
    b51a:	4283      	cmp	r3, r0
    b51c:	d90a      	bls.n	b534 <memmove+0x20>
    b51e:	eb00 0c02 	add.w	ip, r0, r2
    b522:	b1ba      	cbz	r2, b554 <memmove+0x40>
    b524:	4662      	mov	r2, ip
    b526:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b52a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b52e:	4299      	cmp	r1, r3
    b530:	d1f9      	bne.n	b526 <memmove+0x12>
    b532:	4770      	bx	lr
    b534:	2a0f      	cmp	r2, #15
    b536:	d80e      	bhi.n	b556 <memmove+0x42>
    b538:	4603      	mov	r3, r0
    b53a:	f102 3cff 	add.w	ip, r2, #4294967295
    b53e:	b14a      	cbz	r2, b554 <memmove+0x40>
    b540:	f10c 0c01 	add.w	ip, ip, #1
    b544:	3b01      	subs	r3, #1
    b546:	448c      	add	ip, r1
    b548:	f811 2b01 	ldrb.w	r2, [r1], #1
    b54c:	f803 2f01 	strb.w	r2, [r3, #1]!
    b550:	4561      	cmp	r1, ip
    b552:	d1f9      	bne.n	b548 <memmove+0x34>
    b554:	4770      	bx	lr
    b556:	ea40 0301 	orr.w	r3, r0, r1
    b55a:	079b      	lsls	r3, r3, #30
    b55c:	d150      	bne.n	b600 <memmove+0xec>
    b55e:	f1a2 0310 	sub.w	r3, r2, #16
    b562:	b570      	push	{r4, r5, r6, lr}
    b564:	f101 0c20 	add.w	ip, r1, #32
    b568:	f023 050f 	bic.w	r5, r3, #15
    b56c:	f101 0e10 	add.w	lr, r1, #16
    b570:	f100 0410 	add.w	r4, r0, #16
    b574:	44ac      	add	ip, r5
    b576:	091b      	lsrs	r3, r3, #4
    b578:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b57c:	f844 5c10 	str.w	r5, [r4, #-16]
    b580:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b584:	f844 5c0c 	str.w	r5, [r4, #-12]
    b588:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b58c:	f844 5c08 	str.w	r5, [r4, #-8]
    b590:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b594:	f844 5c04 	str.w	r5, [r4, #-4]
    b598:	f10e 0e10 	add.w	lr, lr, #16
    b59c:	45e6      	cmp	lr, ip
    b59e:	f104 0410 	add.w	r4, r4, #16
    b5a2:	d1e9      	bne.n	b578 <memmove+0x64>
    b5a4:	3301      	adds	r3, #1
    b5a6:	f012 0f0c 	tst.w	r2, #12
    b5aa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b5ae:	f002 040f 	and.w	r4, r2, #15
    b5b2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b5b6:	d027      	beq.n	b608 <memmove+0xf4>
    b5b8:	3c04      	subs	r4, #4
    b5ba:	f024 0603 	bic.w	r6, r4, #3
    b5be:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b5c2:	441e      	add	r6, r3
    b5c4:	1f1c      	subs	r4, r3, #4
    b5c6:	468e      	mov	lr, r1
    b5c8:	f85e 5b04 	ldr.w	r5, [lr], #4
    b5cc:	f844 5f04 	str.w	r5, [r4, #4]!
    b5d0:	42b4      	cmp	r4, r6
    b5d2:	d1f9      	bne.n	b5c8 <memmove+0xb4>
    b5d4:	f10c 0401 	add.w	r4, ip, #1
    b5d8:	f002 0203 	and.w	r2, r2, #3
    b5dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b5e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b5e4:	f102 3cff 	add.w	ip, r2, #4294967295
    b5e8:	b14a      	cbz	r2, b5fe <memmove+0xea>
    b5ea:	f10c 0c01 	add.w	ip, ip, #1
    b5ee:	3b01      	subs	r3, #1
    b5f0:	448c      	add	ip, r1
    b5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
    b5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
    b5fa:	4561      	cmp	r1, ip
    b5fc:	d1f9      	bne.n	b5f2 <memmove+0xde>
    b5fe:	bd70      	pop	{r4, r5, r6, pc}
    b600:	f102 3cff 	add.w	ip, r2, #4294967295
    b604:	4603      	mov	r3, r0
    b606:	e79b      	b.n	b540 <memmove+0x2c>
    b608:	4622      	mov	r2, r4
    b60a:	e7eb      	b.n	b5e4 <memmove+0xd0>

0000b60c <memset>:
    b60c:	0783      	lsls	r3, r0, #30
    b60e:	b530      	push	{r4, r5, lr}
    b610:	d048      	beq.n	b6a4 <memset+0x98>
    b612:	1e54      	subs	r4, r2, #1
    b614:	2a00      	cmp	r2, #0
    b616:	d03f      	beq.n	b698 <memset+0x8c>
    b618:	b2ca      	uxtb	r2, r1
    b61a:	4603      	mov	r3, r0
    b61c:	e001      	b.n	b622 <memset+0x16>
    b61e:	3c01      	subs	r4, #1
    b620:	d33a      	bcc.n	b698 <memset+0x8c>
    b622:	f803 2b01 	strb.w	r2, [r3], #1
    b626:	079d      	lsls	r5, r3, #30
    b628:	d1f9      	bne.n	b61e <memset+0x12>
    b62a:	2c03      	cmp	r4, #3
    b62c:	d92d      	bls.n	b68a <memset+0x7e>
    b62e:	b2cd      	uxtb	r5, r1
    b630:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b634:	2c0f      	cmp	r4, #15
    b636:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b63a:	d936      	bls.n	b6aa <memset+0x9e>
    b63c:	f1a4 0210 	sub.w	r2, r4, #16
    b640:	f022 0c0f 	bic.w	ip, r2, #15
    b644:	f103 0e20 	add.w	lr, r3, #32
    b648:	44e6      	add	lr, ip
    b64a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    b64e:	f103 0210 	add.w	r2, r3, #16
    b652:	e942 5504 	strd	r5, r5, [r2, #-16]
    b656:	e942 5502 	strd	r5, r5, [r2, #-8]
    b65a:	3210      	adds	r2, #16
    b65c:	4572      	cmp	r2, lr
    b65e:	d1f8      	bne.n	b652 <memset+0x46>
    b660:	f10c 0201 	add.w	r2, ip, #1
    b664:	f014 0f0c 	tst.w	r4, #12
    b668:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b66c:	f004 0c0f 	and.w	ip, r4, #15
    b670:	d013      	beq.n	b69a <memset+0x8e>
    b672:	f1ac 0304 	sub.w	r3, ip, #4
    b676:	f023 0303 	bic.w	r3, r3, #3
    b67a:	3304      	adds	r3, #4
    b67c:	4413      	add	r3, r2
    b67e:	f842 5b04 	str.w	r5, [r2], #4
    b682:	4293      	cmp	r3, r2
    b684:	d1fb      	bne.n	b67e <memset+0x72>
    b686:	f00c 0403 	and.w	r4, ip, #3
    b68a:	b12c      	cbz	r4, b698 <memset+0x8c>
    b68c:	b2c9      	uxtb	r1, r1
    b68e:	441c      	add	r4, r3
    b690:	f803 1b01 	strb.w	r1, [r3], #1
    b694:	429c      	cmp	r4, r3
    b696:	d1fb      	bne.n	b690 <memset+0x84>
    b698:	bd30      	pop	{r4, r5, pc}
    b69a:	4664      	mov	r4, ip
    b69c:	4613      	mov	r3, r2
    b69e:	2c00      	cmp	r4, #0
    b6a0:	d1f4      	bne.n	b68c <memset+0x80>
    b6a2:	e7f9      	b.n	b698 <memset+0x8c>
    b6a4:	4603      	mov	r3, r0
    b6a6:	4614      	mov	r4, r2
    b6a8:	e7bf      	b.n	b62a <memset+0x1e>
    b6aa:	461a      	mov	r2, r3
    b6ac:	46a4      	mov	ip, r4
    b6ae:	e7e0      	b.n	b672 <memset+0x66>

0000b6b0 <strncmp>:
    b6b0:	2a00      	cmp	r2, #0
    b6b2:	d03e      	beq.n	b732 <strncmp+0x82>
    b6b4:	ea40 0301 	orr.w	r3, r0, r1
    b6b8:	079b      	lsls	r3, r3, #30
    b6ba:	b530      	push	{r4, r5, lr}
    b6bc:	4684      	mov	ip, r0
    b6be:	d12f      	bne.n	b720 <strncmp+0x70>
    b6c0:	2a03      	cmp	r2, #3
    b6c2:	d92d      	bls.n	b720 <strncmp+0x70>
    b6c4:	460b      	mov	r3, r1
    b6c6:	e008      	b.n	b6da <strncmp+0x2a>
    b6c8:	3a04      	subs	r2, #4
    b6ca:	4684      	mov	ip, r0
    b6cc:	4619      	mov	r1, r3
    b6ce:	d025      	beq.n	b71c <strncmp+0x6c>
    b6d0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    b6d4:	d122      	bne.n	b71c <strncmp+0x6c>
    b6d6:	2a03      	cmp	r2, #3
    b6d8:	d922      	bls.n	b720 <strncmp+0x70>
    b6da:	6804      	ldr	r4, [r0, #0]
    b6dc:	4619      	mov	r1, r3
    b6de:	f853 5b04 	ldr.w	r5, [r3], #4
    b6e2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    b6e6:	42ac      	cmp	r4, r5
    b6e8:	4684      	mov	ip, r0
    b6ea:	ea2e 0e04 	bic.w	lr, lr, r4
    b6ee:	f100 0004 	add.w	r0, r0, #4
    b6f2:	d0e9      	beq.n	b6c8 <strncmp+0x18>
    b6f4:	f89c 0000 	ldrb.w	r0, [ip]
    b6f8:	780c      	ldrb	r4, [r1, #0]
    b6fa:	42a0      	cmp	r0, r4
    b6fc:	d11b      	bne.n	b736 <strncmp+0x86>
    b6fe:	46e6      	mov	lr, ip
    b700:	b168      	cbz	r0, b71e <strncmp+0x6e>
    b702:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    b706:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b70a:	eba2 030e 	sub.w	r3, r2, lr
    b70e:	42a0      	cmp	r0, r4
    b710:	f103 33ff 	add.w	r3, r3, #4294967295
    b714:	d10f      	bne.n	b736 <strncmp+0x86>
    b716:	eb1c 0303 	adds.w	r3, ip, r3
    b71a:	d1f1      	bne.n	b700 <strncmp+0x50>
    b71c:	2000      	movs	r0, #0
    b71e:	bd30      	pop	{r4, r5, pc}
    b720:	f89c 0000 	ldrb.w	r0, [ip]
    b724:	780c      	ldrb	r4, [r1, #0]
    b726:	4284      	cmp	r4, r0
    b728:	d105      	bne.n	b736 <strncmp+0x86>
    b72a:	2a01      	cmp	r2, #1
    b72c:	d0f6      	beq.n	b71c <strncmp+0x6c>
    b72e:	46e6      	mov	lr, ip
    b730:	e7e6      	b.n	b700 <strncmp+0x50>
    b732:	4610      	mov	r0, r2
    b734:	4770      	bx	lr
    b736:	1b00      	subs	r0, r0, r4
    b738:	bd30      	pop	{r4, r5, pc}
    b73a:	bf00      	nop

0000b73c <strncpy>:
    b73c:	ea40 0301 	orr.w	r3, r0, r1
    b740:	079b      	lsls	r3, r3, #30
    b742:	b530      	push	{r4, r5, lr}
    b744:	d101      	bne.n	b74a <strncpy+0xe>
    b746:	2a03      	cmp	r2, #3
    b748:	d80f      	bhi.n	b76a <strncpy+0x2e>
    b74a:	4684      	mov	ip, r0
    b74c:	f101 3eff 	add.w	lr, r1, #4294967295
    b750:	e007      	b.n	b762 <strncpy+0x26>
    b752:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    b756:	f803 1b01 	strb.w	r1, [r3], #1
    b75a:	1e54      	subs	r4, r2, #1
    b75c:	b1c1      	cbz	r1, b790 <strncpy+0x54>
    b75e:	469c      	mov	ip, r3
    b760:	4622      	mov	r2, r4
    b762:	4663      	mov	r3, ip
    b764:	2a00      	cmp	r2, #0
    b766:	d1f4      	bne.n	b752 <strncpy+0x16>
    b768:	bd30      	pop	{r4, r5, pc}
    b76a:	460b      	mov	r3, r1
    b76c:	4684      	mov	ip, r0
    b76e:	4619      	mov	r1, r3
    b770:	f853 5b04 	ldr.w	r5, [r3], #4
    b774:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b778:	ea24 0405 	bic.w	r4, r4, r5
    b77c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b780:	d1e4      	bne.n	b74c <strncpy+0x10>
    b782:	3a04      	subs	r2, #4
    b784:	2a03      	cmp	r2, #3
    b786:	f84c 5b04 	str.w	r5, [ip], #4
    b78a:	4619      	mov	r1, r3
    b78c:	d8ef      	bhi.n	b76e <strncpy+0x32>
    b78e:	e7dd      	b.n	b74c <strncpy+0x10>
    b790:	4494      	add	ip, r2
    b792:	2c00      	cmp	r4, #0
    b794:	d0e8      	beq.n	b768 <strncpy+0x2c>
    b796:	f803 1b01 	strb.w	r1, [r3], #1
    b79a:	4563      	cmp	r3, ip
    b79c:	d1fb      	bne.n	b796 <strncpy+0x5a>
    b79e:	bd30      	pop	{r4, r5, pc}

0000b7a0 <__locale_mb_cur_max>:
    b7a0:	4b01      	ldr	r3, [pc, #4]	; (b7a8 <__locale_mb_cur_max+0x8>)
    b7a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    b7a6:	4770      	bx	lr
    b7a8:	200086f0 	.word	0x200086f0

0000b7ac <_close_r>:
    b7ac:	b538      	push	{r3, r4, r5, lr}
    b7ae:	4d07      	ldr	r5, [pc, #28]	; (b7cc <_close_r+0x20>)
    b7b0:	2200      	movs	r2, #0
    b7b2:	4604      	mov	r4, r0
    b7b4:	4608      	mov	r0, r1
    b7b6:	602a      	str	r2, [r5, #0]
    b7b8:	f7fc fb3e 	bl	7e38 <_close>
    b7bc:	1c43      	adds	r3, r0, #1
    b7be:	d000      	beq.n	b7c2 <_close_r+0x16>
    b7c0:	bd38      	pop	{r3, r4, r5, pc}
    b7c2:	682b      	ldr	r3, [r5, #0]
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d0fb      	beq.n	b7c0 <_close_r+0x14>
    b7c8:	6023      	str	r3, [r4, #0]
    b7ca:	bd38      	pop	{r3, r4, r5, pc}
    b7cc:	20026e40 	.word	0x20026e40

0000b7d0 <_lseek_r>:
    b7d0:	b538      	push	{r3, r4, r5, lr}
    b7d2:	460c      	mov	r4, r1
    b7d4:	4d08      	ldr	r5, [pc, #32]	; (b7f8 <_lseek_r+0x28>)
    b7d6:	4684      	mov	ip, r0
    b7d8:	4611      	mov	r1, r2
    b7da:	4620      	mov	r0, r4
    b7dc:	461a      	mov	r2, r3
    b7de:	2300      	movs	r3, #0
    b7e0:	602b      	str	r3, [r5, #0]
    b7e2:	4664      	mov	r4, ip
    b7e4:	f7fc fb34 	bl	7e50 <_lseek>
    b7e8:	1c43      	adds	r3, r0, #1
    b7ea:	d000      	beq.n	b7ee <_lseek_r+0x1e>
    b7ec:	bd38      	pop	{r3, r4, r5, pc}
    b7ee:	682b      	ldr	r3, [r5, #0]
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d0fb      	beq.n	b7ec <_lseek_r+0x1c>
    b7f4:	6023      	str	r3, [r4, #0]
    b7f6:	bd38      	pop	{r3, r4, r5, pc}
    b7f8:	20026e40 	.word	0x20026e40

0000b7fc <_read_r>:
    b7fc:	b538      	push	{r3, r4, r5, lr}
    b7fe:	460c      	mov	r4, r1
    b800:	4d08      	ldr	r5, [pc, #32]	; (b824 <_read_r+0x28>)
    b802:	4684      	mov	ip, r0
    b804:	4611      	mov	r1, r2
    b806:	4620      	mov	r0, r4
    b808:	461a      	mov	r2, r3
    b80a:	2300      	movs	r3, #0
    b80c:	602b      	str	r3, [r5, #0]
    b80e:	4664      	mov	r4, ip
    b810:	f7fc fb10 	bl	7e34 <_read>
    b814:	1c43      	adds	r3, r0, #1
    b816:	d000      	beq.n	b81a <_read_r+0x1e>
    b818:	bd38      	pop	{r3, r4, r5, pc}
    b81a:	682b      	ldr	r3, [r5, #0]
    b81c:	2b00      	cmp	r3, #0
    b81e:	d0fb      	beq.n	b818 <_read_r+0x1c>
    b820:	6023      	str	r3, [r4, #0]
    b822:	bd38      	pop	{r3, r4, r5, pc}
    b824:	20026e40 	.word	0x20026e40

0000b828 <_sbrk_r>:
    b828:	b538      	push	{r3, r4, r5, lr}
    b82a:	4d07      	ldr	r5, [pc, #28]	; (b848 <_sbrk_r+0x20>)
    b82c:	2200      	movs	r2, #0
    b82e:	4604      	mov	r4, r0
    b830:	4608      	mov	r0, r1
    b832:	602a      	str	r2, [r5, #0]
    b834:	f7fc fae4 	bl	7e00 <_sbrk>
    b838:	1c43      	adds	r3, r0, #1
    b83a:	d000      	beq.n	b83e <_sbrk_r+0x16>
    b83c:	bd38      	pop	{r3, r4, r5, pc}
    b83e:	682b      	ldr	r3, [r5, #0]
    b840:	2b00      	cmp	r3, #0
    b842:	d0fb      	beq.n	b83c <_sbrk_r+0x14>
    b844:	6023      	str	r3, [r4, #0]
    b846:	bd38      	pop	{r3, r4, r5, pc}
    b848:	20026e40 	.word	0x20026e40

0000b84c <_write_r>:
    b84c:	b538      	push	{r3, r4, r5, lr}
    b84e:	460c      	mov	r4, r1
    b850:	4d08      	ldr	r5, [pc, #32]	; (b874 <_write_r+0x28>)
    b852:	4684      	mov	ip, r0
    b854:	4611      	mov	r1, r2
    b856:	4620      	mov	r0, r4
    b858:	461a      	mov	r2, r3
    b85a:	2300      	movs	r3, #0
    b85c:	602b      	str	r3, [r5, #0]
    b85e:	4664      	mov	r4, ip
    b860:	f7fb fd7a 	bl	7358 <_write>
    b864:	1c43      	adds	r3, r0, #1
    b866:	d000      	beq.n	b86a <_write_r+0x1e>
    b868:	bd38      	pop	{r3, r4, r5, pc}
    b86a:	682b      	ldr	r3, [r5, #0]
    b86c:	2b00      	cmp	r3, #0
    b86e:	d0fb      	beq.n	b868 <_write_r+0x1c>
    b870:	6023      	str	r3, [r4, #0]
    b872:	bd38      	pop	{r3, r4, r5, pc}
    b874:	20026e40 	.word	0x20026e40

0000b878 <__errno>:
    b878:	4b01      	ldr	r3, [pc, #4]	; (b880 <__errno+0x8>)
    b87a:	6818      	ldr	r0, [r3, #0]
    b87c:	4770      	bx	lr
    b87e:	bf00      	nop
    b880:	20008c78 	.word	0x20008c78

0000b884 <__libc_init_array>:
    b884:	b570      	push	{r4, r5, r6, lr}
    b886:	4e0d      	ldr	r6, [pc, #52]	; (b8bc <__libc_init_array+0x38>)
    b888:	4d0d      	ldr	r5, [pc, #52]	; (b8c0 <__libc_init_array+0x3c>)
    b88a:	1b76      	subs	r6, r6, r5
    b88c:	10b6      	asrs	r6, r6, #2
    b88e:	d006      	beq.n	b89e <__libc_init_array+0x1a>
    b890:	2400      	movs	r4, #0
    b892:	f855 3b04 	ldr.w	r3, [r5], #4
    b896:	3401      	adds	r4, #1
    b898:	4798      	blx	r3
    b89a:	42a6      	cmp	r6, r4
    b89c:	d1f9      	bne.n	b892 <__libc_init_array+0xe>
    b89e:	4e09      	ldr	r6, [pc, #36]	; (b8c4 <__libc_init_array+0x40>)
    b8a0:	4d09      	ldr	r5, [pc, #36]	; (b8c8 <__libc_init_array+0x44>)
    b8a2:	1b76      	subs	r6, r6, r5
    b8a4:	f008 fc28 	bl	140f8 <___init_veneer>
    b8a8:	10b6      	asrs	r6, r6, #2
    b8aa:	d006      	beq.n	b8ba <__libc_init_array+0x36>
    b8ac:	2400      	movs	r4, #0
    b8ae:	f855 3b04 	ldr.w	r3, [r5], #4
    b8b2:	3401      	adds	r4, #1
    b8b4:	4798      	blx	r3
    b8b6:	42a6      	cmp	r6, r4
    b8b8:	d1f9      	bne.n	b8ae <__libc_init_array+0x2a>
    b8ba:	bd70      	pop	{r4, r5, r6, pc}
    b8bc:	600026a0 	.word	0x600026a0
    b8c0:	600026a0 	.word	0x600026a0
    b8c4:	600026ac 	.word	0x600026ac
    b8c8:	600026a0 	.word	0x600026a0

0000b8cc <__retarget_lock_init_recursive>:
    b8cc:	4770      	bx	lr
    b8ce:	bf00      	nop

0000b8d0 <__retarget_lock_close_recursive>:
    b8d0:	4770      	bx	lr
    b8d2:	bf00      	nop

0000b8d4 <__retarget_lock_acquire_recursive>:
    b8d4:	4770      	bx	lr
    b8d6:	bf00      	nop

0000b8d8 <__retarget_lock_release_recursive>:
    b8d8:	4770      	bx	lr
    b8da:	bf00      	nop
    b8dc:	0000      	movs	r0, r0
    b8de:	0000      	movs	r0, r0
    b8e0:	eba2 0003 	sub.w	r0, r2, r3
    b8e4:	4770      	bx	lr
    b8e6:	bf00      	nop

0000b8e8 <strcmp>:
    b8e8:	7802      	ldrb	r2, [r0, #0]
    b8ea:	780b      	ldrb	r3, [r1, #0]
    b8ec:	2a01      	cmp	r2, #1
    b8ee:	bf28      	it	cs
    b8f0:	429a      	cmpcs	r2, r3
    b8f2:	d1f5      	bne.n	b8e0 <__retarget_lock_release_recursive+0x8>
    b8f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    b8f8:	ea40 0401 	orr.w	r4, r0, r1
    b8fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    b900:	f06f 0c00 	mvn.w	ip, #0
    b904:	ea4f 7244 	mov.w	r2, r4, lsl #29
    b908:	b312      	cbz	r2, b950 <strcmp+0x68>
    b90a:	ea80 0401 	eor.w	r4, r0, r1
    b90e:	f014 0f07 	tst.w	r4, #7
    b912:	d16a      	bne.n	b9ea <strcmp+0x102>
    b914:	f000 0407 	and.w	r4, r0, #7
    b918:	f020 0007 	bic.w	r0, r0, #7
    b91c:	f004 0503 	and.w	r5, r4, #3
    b920:	f021 0107 	bic.w	r1, r1, #7
    b924:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    b928:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    b92c:	f014 0f04 	tst.w	r4, #4
    b930:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    b934:	fa0c f405 	lsl.w	r4, ip, r5
    b938:	ea62 0204 	orn	r2, r2, r4
    b93c:	ea66 0604 	orn	r6, r6, r4
    b940:	d00a      	beq.n	b958 <strcmp+0x70>
    b942:	ea63 0304 	orn	r3, r3, r4
    b946:	4662      	mov	r2, ip
    b948:	ea67 0704 	orn	r7, r7, r4
    b94c:	4666      	mov	r6, ip
    b94e:	e003      	b.n	b958 <strcmp+0x70>
    b950:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    b954:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    b958:	fa82 f54c 	uadd8	r5, r2, ip
    b95c:	ea82 0406 	eor.w	r4, r2, r6
    b960:	faa4 f48c 	sel	r4, r4, ip
    b964:	bb6c      	cbnz	r4, b9c2 <strcmp+0xda>
    b966:	fa83 f54c 	uadd8	r5, r3, ip
    b96a:	ea83 0507 	eor.w	r5, r3, r7
    b96e:	faa5 f58c 	sel	r5, r5, ip
    b972:	b995      	cbnz	r5, b99a <strcmp+0xb2>
    b974:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    b978:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    b97c:	fa82 f54c 	uadd8	r5, r2, ip
    b980:	ea82 0406 	eor.w	r4, r2, r6
    b984:	faa4 f48c 	sel	r4, r4, ip
    b988:	fa83 f54c 	uadd8	r5, r3, ip
    b98c:	ea83 0507 	eor.w	r5, r3, r7
    b990:	faa5 f58c 	sel	r5, r5, ip
    b994:	4325      	orrs	r5, r4
    b996:	d0db      	beq.n	b950 <strcmp+0x68>
    b998:	b99c      	cbnz	r4, b9c2 <strcmp+0xda>
    b99a:	ba2d      	rev	r5, r5
    b99c:	fab5 f485 	clz	r4, r5
    b9a0:	f024 0407 	bic.w	r4, r4, #7
    b9a4:	fa27 f104 	lsr.w	r1, r7, r4
    b9a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    b9ac:	fa23 f304 	lsr.w	r3, r3, r4
    b9b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b9b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b9b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b9bc:	eba0 0001 	sub.w	r0, r0, r1
    b9c0:	4770      	bx	lr
    b9c2:	ba24      	rev	r4, r4
    b9c4:	fab4 f484 	clz	r4, r4
    b9c8:	f024 0407 	bic.w	r4, r4, #7
    b9cc:	fa26 f104 	lsr.w	r1, r6, r4
    b9d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    b9d4:	fa22 f204 	lsr.w	r2, r2, r4
    b9d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    b9dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b9e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b9e4:	eba0 0001 	sub.w	r0, r0, r1
    b9e8:	4770      	bx	lr
    b9ea:	f014 0f03 	tst.w	r4, #3
    b9ee:	d13c      	bne.n	ba6a <strcmp+0x182>
    b9f0:	f010 0403 	ands.w	r4, r0, #3
    b9f4:	d128      	bne.n	ba48 <strcmp+0x160>
    b9f6:	f850 2b08 	ldr.w	r2, [r0], #8
    b9fa:	f851 3b08 	ldr.w	r3, [r1], #8
    b9fe:	fa82 f54c 	uadd8	r5, r2, ip
    ba02:	ea82 0503 	eor.w	r5, r2, r3
    ba06:	faa5 f58c 	sel	r5, r5, ip
    ba0a:	b95d      	cbnz	r5, ba24 <strcmp+0x13c>
    ba0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ba10:	f851 3c04 	ldr.w	r3, [r1, #-4]
    ba14:	fa82 f54c 	uadd8	r5, r2, ip
    ba18:	ea82 0503 	eor.w	r5, r2, r3
    ba1c:	faa5 f58c 	sel	r5, r5, ip
    ba20:	2d00      	cmp	r5, #0
    ba22:	d0e8      	beq.n	b9f6 <strcmp+0x10e>
    ba24:	ba2d      	rev	r5, r5
    ba26:	fab5 f485 	clz	r4, r5
    ba2a:	f024 0407 	bic.w	r4, r4, #7
    ba2e:	fa23 f104 	lsr.w	r1, r3, r4
    ba32:	fa22 f204 	lsr.w	r2, r2, r4
    ba36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    ba3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ba3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    ba42:	eba0 0001 	sub.w	r0, r0, r1
    ba46:	4770      	bx	lr
    ba48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    ba4c:	f020 0003 	bic.w	r0, r0, #3
    ba50:	f850 2b08 	ldr.w	r2, [r0], #8
    ba54:	f021 0103 	bic.w	r1, r1, #3
    ba58:	f851 3b08 	ldr.w	r3, [r1], #8
    ba5c:	fa0c f404 	lsl.w	r4, ip, r4
    ba60:	ea62 0204 	orn	r2, r2, r4
    ba64:	ea63 0304 	orn	r3, r3, r4
    ba68:	e7c9      	b.n	b9fe <strcmp+0x116>
    ba6a:	f010 0403 	ands.w	r4, r0, #3
    ba6e:	d01a      	beq.n	baa6 <strcmp+0x1be>
    ba70:	eba1 0104 	sub.w	r1, r1, r4
    ba74:	f020 0003 	bic.w	r0, r0, #3
    ba78:	07e4      	lsls	r4, r4, #31
    ba7a:	f850 2b04 	ldr.w	r2, [r0], #4
    ba7e:	d006      	beq.n	ba8e <strcmp+0x1a6>
    ba80:	d20f      	bcs.n	baa2 <strcmp+0x1ba>
    ba82:	788b      	ldrb	r3, [r1, #2]
    ba84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    ba88:	1ae4      	subs	r4, r4, r3
    ba8a:	d106      	bne.n	ba9a <strcmp+0x1b2>
    ba8c:	b12b      	cbz	r3, ba9a <strcmp+0x1b2>
    ba8e:	78cb      	ldrb	r3, [r1, #3]
    ba90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    ba94:	1ae4      	subs	r4, r4, r3
    ba96:	d100      	bne.n	ba9a <strcmp+0x1b2>
    ba98:	b91b      	cbnz	r3, baa2 <strcmp+0x1ba>
    ba9a:	4620      	mov	r0, r4
    ba9c:	f85d 4b10 	ldr.w	r4, [sp], #16
    baa0:	4770      	bx	lr
    baa2:	f101 0104 	add.w	r1, r1, #4
    baa6:	f850 2b04 	ldr.w	r2, [r0], #4
    baaa:	07cc      	lsls	r4, r1, #31
    baac:	f021 0103 	bic.w	r1, r1, #3
    bab0:	f851 3b04 	ldr.w	r3, [r1], #4
    bab4:	d848      	bhi.n	bb48 <strcmp+0x260>
    bab6:	d224      	bcs.n	bb02 <strcmp+0x21a>
    bab8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    babc:	fa82 f54c 	uadd8	r5, r2, ip
    bac0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    bac4:	faa5 f58c 	sel	r5, r5, ip
    bac8:	d10a      	bne.n	bae0 <strcmp+0x1f8>
    baca:	b965      	cbnz	r5, bae6 <strcmp+0x1fe>
    bacc:	f851 3b04 	ldr.w	r3, [r1], #4
    bad0:	ea84 0402 	eor.w	r4, r4, r2
    bad4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    bad8:	d10e      	bne.n	baf8 <strcmp+0x210>
    bada:	f850 2b04 	ldr.w	r2, [r0], #4
    bade:	e7eb      	b.n	bab8 <strcmp+0x1d0>
    bae0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    bae4:	e055      	b.n	bb92 <strcmp+0x2aa>
    bae6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    baea:	d14d      	bne.n	bb88 <strcmp+0x2a0>
    baec:	7808      	ldrb	r0, [r1, #0]
    baee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    baf2:	f1c0 0000 	rsb	r0, r0, #0
    baf6:	4770      	bx	lr
    baf8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bafc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bb00:	e047      	b.n	bb92 <strcmp+0x2aa>
    bb02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bb06:	fa82 f54c 	uadd8	r5, r2, ip
    bb0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    bb0e:	faa5 f58c 	sel	r5, r5, ip
    bb12:	d10a      	bne.n	bb2a <strcmp+0x242>
    bb14:	b965      	cbnz	r5, bb30 <strcmp+0x248>
    bb16:	f851 3b04 	ldr.w	r3, [r1], #4
    bb1a:	ea84 0402 	eor.w	r4, r4, r2
    bb1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bb22:	d10c      	bne.n	bb3e <strcmp+0x256>
    bb24:	f850 2b04 	ldr.w	r2, [r0], #4
    bb28:	e7eb      	b.n	bb02 <strcmp+0x21a>
    bb2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bb2e:	e030      	b.n	bb92 <strcmp+0x2aa>
    bb30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bb34:	d128      	bne.n	bb88 <strcmp+0x2a0>
    bb36:	880b      	ldrh	r3, [r1, #0]
    bb38:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bb3c:	e029      	b.n	bb92 <strcmp+0x2aa>
    bb3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bb42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bb46:	e024      	b.n	bb92 <strcmp+0x2aa>
    bb48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    bb4c:	fa82 f54c 	uadd8	r5, r2, ip
    bb50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bb54:	faa5 f58c 	sel	r5, r5, ip
    bb58:	d10a      	bne.n	bb70 <strcmp+0x288>
    bb5a:	b965      	cbnz	r5, bb76 <strcmp+0x28e>
    bb5c:	f851 3b04 	ldr.w	r3, [r1], #4
    bb60:	ea84 0402 	eor.w	r4, r4, r2
    bb64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bb68:	d109      	bne.n	bb7e <strcmp+0x296>
    bb6a:	f850 2b04 	ldr.w	r2, [r0], #4
    bb6e:	e7eb      	b.n	bb48 <strcmp+0x260>
    bb70:	ea4f 6313 	mov.w	r3, r3, lsr #24
    bb74:	e00d      	b.n	bb92 <strcmp+0x2aa>
    bb76:	f015 0fff 	tst.w	r5, #255	; 0xff
    bb7a:	d105      	bne.n	bb88 <strcmp+0x2a0>
    bb7c:	680b      	ldr	r3, [r1, #0]
    bb7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    bb82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb86:	e004      	b.n	bb92 <strcmp+0x2aa>
    bb88:	f04f 0000 	mov.w	r0, #0
    bb8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bb90:	4770      	bx	lr
    bb92:	ba12      	rev	r2, r2
    bb94:	ba1b      	rev	r3, r3
    bb96:	fa82 f44c 	uadd8	r4, r2, ip
    bb9a:	ea82 0403 	eor.w	r4, r2, r3
    bb9e:	faa4 f58c 	sel	r5, r4, ip
    bba2:	fab5 f485 	clz	r4, r5
    bba6:	fa02 f204 	lsl.w	r2, r2, r4
    bbaa:	fa03 f304 	lsl.w	r3, r3, r4
    bbae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    bbb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bbb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    bbba:	4770      	bx	lr

0000bbbc <strcpy>:
    bbbc:	ea80 0201 	eor.w	r2, r0, r1
    bbc0:	4684      	mov	ip, r0
    bbc2:	f012 0f03 	tst.w	r2, #3
    bbc6:	d14f      	bne.n	bc68 <strcpy+0xac>
    bbc8:	f011 0f03 	tst.w	r1, #3
    bbcc:	d132      	bne.n	bc34 <strcpy+0x78>
    bbce:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bbd2:	f011 0f04 	tst.w	r1, #4
    bbd6:	f851 3b04 	ldr.w	r3, [r1], #4
    bbda:	d00b      	beq.n	bbf4 <strcpy+0x38>
    bbdc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bbe0:	439a      	bics	r2, r3
    bbe2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bbe6:	bf04      	itt	eq
    bbe8:	f84c 3b04 	streq.w	r3, [ip], #4
    bbec:	f851 3b04 	ldreq.w	r3, [r1], #4
    bbf0:	d116      	bne.n	bc20 <strcpy+0x64>
    bbf2:	bf00      	nop
    bbf4:	f851 4b04 	ldr.w	r4, [r1], #4
    bbf8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bbfc:	439a      	bics	r2, r3
    bbfe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bc02:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bc06:	d10b      	bne.n	bc20 <strcpy+0x64>
    bc08:	f84c 3b04 	str.w	r3, [ip], #4
    bc0c:	43a2      	bics	r2, r4
    bc0e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bc12:	bf04      	itt	eq
    bc14:	f851 3b04 	ldreq.w	r3, [r1], #4
    bc18:	f84c 4b04 	streq.w	r4, [ip], #4
    bc1c:	d0ea      	beq.n	bbf4 <strcpy+0x38>
    bc1e:	4623      	mov	r3, r4
    bc20:	f80c 3b01 	strb.w	r3, [ip], #1
    bc24:	f013 0fff 	tst.w	r3, #255	; 0xff
    bc28:	ea4f 2333 	mov.w	r3, r3, ror #8
    bc2c:	d1f8      	bne.n	bc20 <strcpy+0x64>
    bc2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    bc32:	4770      	bx	lr
    bc34:	f011 0f01 	tst.w	r1, #1
    bc38:	d006      	beq.n	bc48 <strcpy+0x8c>
    bc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
    bc3e:	f80c 2b01 	strb.w	r2, [ip], #1
    bc42:	2a00      	cmp	r2, #0
    bc44:	bf08      	it	eq
    bc46:	4770      	bxeq	lr
    bc48:	f011 0f02 	tst.w	r1, #2
    bc4c:	d0bf      	beq.n	bbce <strcpy+0x12>
    bc4e:	f831 2b02 	ldrh.w	r2, [r1], #2
    bc52:	f012 0fff 	tst.w	r2, #255	; 0xff
    bc56:	bf16      	itet	ne
    bc58:	f82c 2b02 	strhne.w	r2, [ip], #2
    bc5c:	f88c 2000 	strbeq.w	r2, [ip]
    bc60:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    bc64:	d1b3      	bne.n	bbce <strcpy+0x12>
    bc66:	4770      	bx	lr
    bc68:	f811 2b01 	ldrb.w	r2, [r1], #1
    bc6c:	f80c 2b01 	strb.w	r2, [ip], #1
    bc70:	2a00      	cmp	r2, #0
    bc72:	d1f9      	bne.n	bc68 <strcpy+0xac>
    bc74:	4770      	bx	lr
    bc76:	bf00      	nop
	...

0000bc80 <memchr>:
    bc80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bc84:	2a10      	cmp	r2, #16
    bc86:	db2b      	blt.n	bce0 <memchr+0x60>
    bc88:	f010 0f07 	tst.w	r0, #7
    bc8c:	d008      	beq.n	bca0 <memchr+0x20>
    bc8e:	f810 3b01 	ldrb.w	r3, [r0], #1
    bc92:	3a01      	subs	r2, #1
    bc94:	428b      	cmp	r3, r1
    bc96:	d02d      	beq.n	bcf4 <memchr+0x74>
    bc98:	f010 0f07 	tst.w	r0, #7
    bc9c:	b342      	cbz	r2, bcf0 <memchr+0x70>
    bc9e:	d1f6      	bne.n	bc8e <memchr+0xe>
    bca0:	b4f0      	push	{r4, r5, r6, r7}
    bca2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bca6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    bcaa:	f022 0407 	bic.w	r4, r2, #7
    bcae:	f07f 0700 	mvns.w	r7, #0
    bcb2:	2300      	movs	r3, #0
    bcb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    bcb8:	3c08      	subs	r4, #8
    bcba:	ea85 0501 	eor.w	r5, r5, r1
    bcbe:	ea86 0601 	eor.w	r6, r6, r1
    bcc2:	fa85 f547 	uadd8	r5, r5, r7
    bcc6:	faa3 f587 	sel	r5, r3, r7
    bcca:	fa86 f647 	uadd8	r6, r6, r7
    bcce:	faa5 f687 	sel	r6, r5, r7
    bcd2:	b98e      	cbnz	r6, bcf8 <memchr+0x78>
    bcd4:	d1ee      	bne.n	bcb4 <memchr+0x34>
    bcd6:	bcf0      	pop	{r4, r5, r6, r7}
    bcd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bcdc:	f002 0207 	and.w	r2, r2, #7
    bce0:	b132      	cbz	r2, bcf0 <memchr+0x70>
    bce2:	f810 3b01 	ldrb.w	r3, [r0], #1
    bce6:	3a01      	subs	r2, #1
    bce8:	ea83 0301 	eor.w	r3, r3, r1
    bcec:	b113      	cbz	r3, bcf4 <memchr+0x74>
    bcee:	d1f8      	bne.n	bce2 <memchr+0x62>
    bcf0:	2000      	movs	r0, #0
    bcf2:	4770      	bx	lr
    bcf4:	3801      	subs	r0, #1
    bcf6:	4770      	bx	lr
    bcf8:	2d00      	cmp	r5, #0
    bcfa:	bf06      	itte	eq
    bcfc:	4635      	moveq	r5, r6
    bcfe:	3803      	subeq	r0, #3
    bd00:	3807      	subne	r0, #7
    bd02:	f015 0f01 	tst.w	r5, #1
    bd06:	d107      	bne.n	bd18 <memchr+0x98>
    bd08:	3001      	adds	r0, #1
    bd0a:	f415 7f80 	tst.w	r5, #256	; 0x100
    bd0e:	bf02      	ittt	eq
    bd10:	3001      	addeq	r0, #1
    bd12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bd16:	3001      	addeq	r0, #1
    bd18:	bcf0      	pop	{r4, r5, r6, r7}
    bd1a:	3801      	subs	r0, #1
    bd1c:	4770      	bx	lr
    bd1e:	bf00      	nop
	...

0000bd40 <strlen>:
    bd40:	f890 f000 	pld	[r0]
    bd44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    bd48:	f020 0107 	bic.w	r1, r0, #7
    bd4c:	f06f 0c00 	mvn.w	ip, #0
    bd50:	f010 0407 	ands.w	r4, r0, #7
    bd54:	f891 f020 	pld	[r1, #32]
    bd58:	f040 8049 	bne.w	bdee <strlen+0xae>
    bd5c:	f04f 0400 	mov.w	r4, #0
    bd60:	f06f 0007 	mvn.w	r0, #7
    bd64:	e9d1 2300 	ldrd	r2, r3, [r1]
    bd68:	f891 f040 	pld	[r1, #64]	; 0x40
    bd6c:	f100 0008 	add.w	r0, r0, #8
    bd70:	fa82 f24c 	uadd8	r2, r2, ip
    bd74:	faa4 f28c 	sel	r2, r4, ip
    bd78:	fa83 f34c 	uadd8	r3, r3, ip
    bd7c:	faa2 f38c 	sel	r3, r2, ip
    bd80:	bb4b      	cbnz	r3, bdd6 <strlen+0x96>
    bd82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    bd86:	fa82 f24c 	uadd8	r2, r2, ip
    bd8a:	f100 0008 	add.w	r0, r0, #8
    bd8e:	faa4 f28c 	sel	r2, r4, ip
    bd92:	fa83 f34c 	uadd8	r3, r3, ip
    bd96:	faa2 f38c 	sel	r3, r2, ip
    bd9a:	b9e3      	cbnz	r3, bdd6 <strlen+0x96>
    bd9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    bda0:	fa82 f24c 	uadd8	r2, r2, ip
    bda4:	f100 0008 	add.w	r0, r0, #8
    bda8:	faa4 f28c 	sel	r2, r4, ip
    bdac:	fa83 f34c 	uadd8	r3, r3, ip
    bdb0:	faa2 f38c 	sel	r3, r2, ip
    bdb4:	b97b      	cbnz	r3, bdd6 <strlen+0x96>
    bdb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    bdba:	f101 0120 	add.w	r1, r1, #32
    bdbe:	fa82 f24c 	uadd8	r2, r2, ip
    bdc2:	f100 0008 	add.w	r0, r0, #8
    bdc6:	faa4 f28c 	sel	r2, r4, ip
    bdca:	fa83 f34c 	uadd8	r3, r3, ip
    bdce:	faa2 f38c 	sel	r3, r2, ip
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d0c6      	beq.n	bd64 <strlen+0x24>
    bdd6:	2a00      	cmp	r2, #0
    bdd8:	bf04      	itt	eq
    bdda:	3004      	addeq	r0, #4
    bddc:	461a      	moveq	r2, r3
    bdde:	ba12      	rev	r2, r2
    bde0:	fab2 f282 	clz	r2, r2
    bde4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    bde8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    bdec:	4770      	bx	lr
    bdee:	e9d1 2300 	ldrd	r2, r3, [r1]
    bdf2:	f004 0503 	and.w	r5, r4, #3
    bdf6:	f1c4 0000 	rsb	r0, r4, #0
    bdfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bdfe:	f014 0f04 	tst.w	r4, #4
    be02:	f891 f040 	pld	[r1, #64]	; 0x40
    be06:	fa0c f505 	lsl.w	r5, ip, r5
    be0a:	ea62 0205 	orn	r2, r2, r5
    be0e:	bf1c      	itt	ne
    be10:	ea63 0305 	ornne	r3, r3, r5
    be14:	4662      	movne	r2, ip
    be16:	f04f 0400 	mov.w	r4, #0
    be1a:	e7a9      	b.n	bd70 <strlen+0x30>
    be1c:	0000      	movs	r0, r0
	...

0000be20 <nan>:
    be20:	ed9f 0b01 	vldr	d0, [pc, #4]	; be28 <nan+0x8>
    be24:	4770      	bx	lr
    be26:	bf00      	nop
    be28:	00000000 	.word	0x00000000
    be2c:	7ff80000 	.word	0x7ff80000

0000be30 <nanf>:
    be30:	ed9f 0a01 	vldr	s0, [pc, #4]	; be38 <nanf+0x8>
    be34:	4770      	bx	lr
    be36:	bf00      	nop
    be38:	7fc00000 	.word	0x7fc00000

0000be3c <__register_exitproc>:
    be3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be40:	f8df a07c 	ldr.w	sl, [pc, #124]	; bec0 <__register_exitproc+0x84>
    be44:	4606      	mov	r6, r0
    be46:	f8da 0000 	ldr.w	r0, [sl]
    be4a:	4698      	mov	r8, r3
    be4c:	460f      	mov	r7, r1
    be4e:	4691      	mov	r9, r2
    be50:	f7ff fd40 	bl	b8d4 <__retarget_lock_acquire_recursive>
    be54:	4b18      	ldr	r3, [pc, #96]	; (beb8 <__register_exitproc+0x7c>)
    be56:	681c      	ldr	r4, [r3, #0]
    be58:	b324      	cbz	r4, bea4 <__register_exitproc+0x68>
    be5a:	6865      	ldr	r5, [r4, #4]
    be5c:	2d1f      	cmp	r5, #31
    be5e:	dc24      	bgt.n	beaa <__register_exitproc+0x6e>
    be60:	b95e      	cbnz	r6, be7a <__register_exitproc+0x3e>
    be62:	1c6b      	adds	r3, r5, #1
    be64:	3502      	adds	r5, #2
    be66:	f8da 0000 	ldr.w	r0, [sl]
    be6a:	6063      	str	r3, [r4, #4]
    be6c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    be70:	f7ff fd32 	bl	b8d8 <__retarget_lock_release_recursive>
    be74:	2000      	movs	r0, #0
    be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be7a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    be7e:	2301      	movs	r3, #1
    be80:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    be84:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    be88:	40ab      	lsls	r3, r5
    be8a:	431a      	orrs	r2, r3
    be8c:	2e02      	cmp	r6, #2
    be8e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    be92:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    be96:	d1e4      	bne.n	be62 <__register_exitproc+0x26>
    be98:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    be9c:	431a      	orrs	r2, r3
    be9e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    bea2:	e7de      	b.n	be62 <__register_exitproc+0x26>
    bea4:	4c05      	ldr	r4, [pc, #20]	; (bebc <__register_exitproc+0x80>)
    bea6:	601c      	str	r4, [r3, #0]
    bea8:	e7d7      	b.n	be5a <__register_exitproc+0x1e>
    beaa:	f8da 0000 	ldr.w	r0, [sl]
    beae:	f7ff fd13 	bl	b8d8 <__retarget_lock_release_recursive>
    beb2:	f04f 30ff 	mov.w	r0, #4294967295
    beb6:	e7de      	b.n	be76 <__register_exitproc+0x3a>
    beb8:	2002691c 	.word	0x2002691c
    bebc:	20026920 	.word	0x20026920
    bec0:	200086e4 	.word	0x200086e4

0000bec4 <_malloc_trim_r>:
    bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bec6:	4f24      	ldr	r7, [pc, #144]	; (bf58 <_malloc_trim_r+0x94>)
    bec8:	460c      	mov	r4, r1
    beca:	4606      	mov	r6, r0
    becc:	f7fd ff26 	bl	9d1c <__malloc_lock>
    bed0:	68bb      	ldr	r3, [r7, #8]
    bed2:	685d      	ldr	r5, [r3, #4]
    bed4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    bed8:	310f      	adds	r1, #15
    beda:	f025 0503 	bic.w	r5, r5, #3
    bede:	194b      	adds	r3, r1, r5
    bee0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    bee4:	f023 030f 	bic.w	r3, r3, #15
    bee8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    beec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    bef0:	db07      	blt.n	bf02 <_malloc_trim_r+0x3e>
    bef2:	2100      	movs	r1, #0
    bef4:	4630      	mov	r0, r6
    bef6:	f7ff fc97 	bl	b828 <_sbrk_r>
    befa:	68bb      	ldr	r3, [r7, #8]
    befc:	442b      	add	r3, r5
    befe:	4298      	cmp	r0, r3
    bf00:	d004      	beq.n	bf0c <_malloc_trim_r+0x48>
    bf02:	4630      	mov	r0, r6
    bf04:	f7fd ff10 	bl	9d28 <__malloc_unlock>
    bf08:	2000      	movs	r0, #0
    bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf0c:	4261      	negs	r1, r4
    bf0e:	4630      	mov	r0, r6
    bf10:	f7ff fc8a 	bl	b828 <_sbrk_r>
    bf14:	3001      	adds	r0, #1
    bf16:	d00d      	beq.n	bf34 <_malloc_trim_r+0x70>
    bf18:	4a10      	ldr	r2, [pc, #64]	; (bf5c <_malloc_trim_r+0x98>)
    bf1a:	68bb      	ldr	r3, [r7, #8]
    bf1c:	1b2d      	subs	r5, r5, r4
    bf1e:	f045 0501 	orr.w	r5, r5, #1
    bf22:	605d      	str	r5, [r3, #4]
    bf24:	6813      	ldr	r3, [r2, #0]
    bf26:	4630      	mov	r0, r6
    bf28:	1b1b      	subs	r3, r3, r4
    bf2a:	6013      	str	r3, [r2, #0]
    bf2c:	f7fd fefc 	bl	9d28 <__malloc_unlock>
    bf30:	2001      	movs	r0, #1
    bf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf34:	2100      	movs	r1, #0
    bf36:	4630      	mov	r0, r6
    bf38:	f7ff fc76 	bl	b828 <_sbrk_r>
    bf3c:	68ba      	ldr	r2, [r7, #8]
    bf3e:	1a83      	subs	r3, r0, r2
    bf40:	2b0f      	cmp	r3, #15
    bf42:	ddde      	ble.n	bf02 <_malloc_trim_r+0x3e>
    bf44:	f043 0301 	orr.w	r3, r3, #1
    bf48:	6053      	str	r3, [r2, #4]
    bf4a:	4b05      	ldr	r3, [pc, #20]	; (bf60 <_malloc_trim_r+0x9c>)
    bf4c:	4903      	ldr	r1, [pc, #12]	; (bf5c <_malloc_trim_r+0x98>)
    bf4e:	681b      	ldr	r3, [r3, #0]
    bf50:	1ac0      	subs	r0, r0, r3
    bf52:	6008      	str	r0, [r1, #0]
    bf54:	e7d5      	b.n	bf02 <_malloc_trim_r+0x3e>
    bf56:	bf00      	nop
    bf58:	2000885c 	.word	0x2000885c
    bf5c:	20026abc 	.word	0x20026abc
    bf60:	20008c64 	.word	0x20008c64

0000bf64 <_free_r>:
    bf64:	2900      	cmp	r1, #0
    bf66:	d061      	beq.n	c02c <_free_r+0xc8>
    bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf6a:	460c      	mov	r4, r1
    bf6c:	4606      	mov	r6, r0
    bf6e:	f7fd fed5 	bl	9d1c <__malloc_lock>
    bf72:	f854 2c04 	ldr.w	r2, [r4, #-4]
    bf76:	4f7b      	ldr	r7, [pc, #492]	; (c164 <_free_r+0x200>)
    bf78:	f1a4 0508 	sub.w	r5, r4, #8
    bf7c:	f022 0101 	bic.w	r1, r2, #1
    bf80:	eb05 0c01 	add.w	ip, r5, r1
    bf84:	68b8      	ldr	r0, [r7, #8]
    bf86:	f8dc 3004 	ldr.w	r3, [ip, #4]
    bf8a:	4560      	cmp	r0, ip
    bf8c:	f023 0303 	bic.w	r3, r3, #3
    bf90:	f000 808b 	beq.w	c0aa <_free_r+0x146>
    bf94:	07d2      	lsls	r2, r2, #31
    bf96:	f8cc 3004 	str.w	r3, [ip, #4]
    bf9a:	d432      	bmi.n	c002 <_free_r+0x9e>
    bf9c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    bfa0:	1aad      	subs	r5, r5, r2
    bfa2:	4411      	add	r1, r2
    bfa4:	68aa      	ldr	r2, [r5, #8]
    bfa6:	f107 0008 	add.w	r0, r7, #8
    bfaa:	4282      	cmp	r2, r0
    bfac:	d06a      	beq.n	c084 <_free_r+0x120>
    bfae:	eb0c 0403 	add.w	r4, ip, r3
    bfb2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    bfb6:	68ec      	ldr	r4, [r5, #12]
    bfb8:	60d4      	str	r4, [r2, #12]
    bfba:	f01e 0f01 	tst.w	lr, #1
    bfbe:	60a2      	str	r2, [r4, #8]
    bfc0:	f000 8097 	beq.w	c0f2 <_free_r+0x18e>
    bfc4:	f041 0301 	orr.w	r3, r1, #1
    bfc8:	606b      	str	r3, [r5, #4]
    bfca:	f8cc 1000 	str.w	r1, [ip]
    bfce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    bfd2:	d235      	bcs.n	c040 <_free_r+0xdc>
    bfd4:	6878      	ldr	r0, [r7, #4]
    bfd6:	08cb      	lsrs	r3, r1, #3
    bfd8:	2201      	movs	r2, #1
    bfda:	0949      	lsrs	r1, r1, #5
    bfdc:	3301      	adds	r3, #1
    bfde:	408a      	lsls	r2, r1
    bfe0:	4302      	orrs	r2, r0
    bfe2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    bfe6:	607a      	str	r2, [r7, #4]
    bfe8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    bfec:	3a08      	subs	r2, #8
    bfee:	e9c5 1202 	strd	r1, r2, [r5, #8]
    bff2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    bff6:	60cd      	str	r5, [r1, #12]
    bff8:	4630      	mov	r0, r6
    bffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bffe:	f7fd be93 	b.w	9d28 <__malloc_unlock>
    c002:	eb0c 0203 	add.w	r2, ip, r3
    c006:	6852      	ldr	r2, [r2, #4]
    c008:	07d0      	lsls	r0, r2, #31
    c00a:	d410      	bmi.n	c02e <_free_r+0xca>
    c00c:	4419      	add	r1, r3
    c00e:	f107 0008 	add.w	r0, r7, #8
    c012:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c016:	4283      	cmp	r3, r0
    c018:	d073      	beq.n	c102 <_free_r+0x19e>
    c01a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c01e:	60da      	str	r2, [r3, #12]
    c020:	6093      	str	r3, [r2, #8]
    c022:	f041 0301 	orr.w	r3, r1, #1
    c026:	606b      	str	r3, [r5, #4]
    c028:	5069      	str	r1, [r5, r1]
    c02a:	e7d0      	b.n	bfce <_free_r+0x6a>
    c02c:	4770      	bx	lr
    c02e:	f041 0301 	orr.w	r3, r1, #1
    c032:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c036:	f844 3c04 	str.w	r3, [r4, #-4]
    c03a:	f8cc 1000 	str.w	r1, [ip]
    c03e:	d3c9      	bcc.n	bfd4 <_free_r+0x70>
    c040:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c044:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c048:	d248      	bcs.n	c0dc <_free_r+0x178>
    c04a:	098b      	lsrs	r3, r1, #6
    c04c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c050:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c054:	00c3      	lsls	r3, r0, #3
    c056:	18f8      	adds	r0, r7, r3
    c058:	58fb      	ldr	r3, [r7, r3]
    c05a:	3808      	subs	r0, #8
    c05c:	4298      	cmp	r0, r3
    c05e:	d059      	beq.n	c114 <_free_r+0x1b0>
    c060:	685a      	ldr	r2, [r3, #4]
    c062:	f022 0203 	bic.w	r2, r2, #3
    c066:	428a      	cmp	r2, r1
    c068:	d902      	bls.n	c070 <_free_r+0x10c>
    c06a:	689b      	ldr	r3, [r3, #8]
    c06c:	4298      	cmp	r0, r3
    c06e:	d1f7      	bne.n	c060 <_free_r+0xfc>
    c070:	68d8      	ldr	r0, [r3, #12]
    c072:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c076:	6085      	str	r5, [r0, #8]
    c078:	60dd      	str	r5, [r3, #12]
    c07a:	4630      	mov	r0, r6
    c07c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c080:	f7fd be52 	b.w	9d28 <__malloc_unlock>
    c084:	eb0c 0203 	add.w	r2, ip, r3
    c088:	6852      	ldr	r2, [r2, #4]
    c08a:	07d2      	lsls	r2, r2, #31
    c08c:	d463      	bmi.n	c156 <_free_r+0x1f2>
    c08e:	440b      	add	r3, r1
    c090:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c094:	60ca      	str	r2, [r1, #12]
    c096:	6091      	str	r1, [r2, #8]
    c098:	f043 0201 	orr.w	r2, r3, #1
    c09c:	606a      	str	r2, [r5, #4]
    c09e:	4630      	mov	r0, r6
    c0a0:	50eb      	str	r3, [r5, r3]
    c0a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c0a6:	f7fd be3f 	b.w	9d28 <__malloc_unlock>
    c0aa:	440b      	add	r3, r1
    c0ac:	07d1      	lsls	r1, r2, #31
    c0ae:	d407      	bmi.n	c0c0 <_free_r+0x15c>
    c0b0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c0b4:	1aad      	subs	r5, r5, r2
    c0b6:	4413      	add	r3, r2
    c0b8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c0bc:	60ca      	str	r2, [r1, #12]
    c0be:	6091      	str	r1, [r2, #8]
    c0c0:	f043 0201 	orr.w	r2, r3, #1
    c0c4:	606a      	str	r2, [r5, #4]
    c0c6:	4a28      	ldr	r2, [pc, #160]	; (c168 <_free_r+0x204>)
    c0c8:	60bd      	str	r5, [r7, #8]
    c0ca:	6812      	ldr	r2, [r2, #0]
    c0cc:	429a      	cmp	r2, r3
    c0ce:	d893      	bhi.n	bff8 <_free_r+0x94>
    c0d0:	4b26      	ldr	r3, [pc, #152]	; (c16c <_free_r+0x208>)
    c0d2:	4630      	mov	r0, r6
    c0d4:	6819      	ldr	r1, [r3, #0]
    c0d6:	f7ff fef5 	bl	bec4 <_malloc_trim_r>
    c0da:	e78d      	b.n	bff8 <_free_r+0x94>
    c0dc:	2b14      	cmp	r3, #20
    c0de:	d90a      	bls.n	c0f6 <_free_r+0x192>
    c0e0:	2b54      	cmp	r3, #84	; 0x54
    c0e2:	d81f      	bhi.n	c124 <_free_r+0x1c0>
    c0e4:	0b0b      	lsrs	r3, r1, #12
    c0e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c0ea:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c0ee:	00c3      	lsls	r3, r0, #3
    c0f0:	e7b1      	b.n	c056 <_free_r+0xf2>
    c0f2:	4419      	add	r1, r3
    c0f4:	e78d      	b.n	c012 <_free_r+0xae>
    c0f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c0fa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c0fe:	00c3      	lsls	r3, r0, #3
    c100:	e7a9      	b.n	c056 <_free_r+0xf2>
    c102:	f041 0301 	orr.w	r3, r1, #1
    c106:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c10a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c10e:	606b      	str	r3, [r5, #4]
    c110:	5069      	str	r1, [r5, r1]
    c112:	e771      	b.n	bff8 <_free_r+0x94>
    c114:	6879      	ldr	r1, [r7, #4]
    c116:	1092      	asrs	r2, r2, #2
    c118:	2401      	movs	r4, #1
    c11a:	fa04 f202 	lsl.w	r2, r4, r2
    c11e:	430a      	orrs	r2, r1
    c120:	607a      	str	r2, [r7, #4]
    c122:	e7a6      	b.n	c072 <_free_r+0x10e>
    c124:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c128:	d806      	bhi.n	c138 <_free_r+0x1d4>
    c12a:	0bcb      	lsrs	r3, r1, #15
    c12c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c130:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c134:	00c3      	lsls	r3, r0, #3
    c136:	e78e      	b.n	c056 <_free_r+0xf2>
    c138:	f240 5254 	movw	r2, #1364	; 0x554
    c13c:	4293      	cmp	r3, r2
    c13e:	d806      	bhi.n	c14e <_free_r+0x1ea>
    c140:	0c8b      	lsrs	r3, r1, #18
    c142:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c146:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c14a:	00c3      	lsls	r3, r0, #3
    c14c:	e783      	b.n	c056 <_free_r+0xf2>
    c14e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c152:	227e      	movs	r2, #126	; 0x7e
    c154:	e77f      	b.n	c056 <_free_r+0xf2>
    c156:	f041 0301 	orr.w	r3, r1, #1
    c15a:	606b      	str	r3, [r5, #4]
    c15c:	f8cc 1000 	str.w	r1, [ip]
    c160:	e74a      	b.n	bff8 <_free_r+0x94>
    c162:	bf00      	nop
    c164:	2000885c 	.word	0x2000885c
    c168:	20008c68 	.word	0x20008c68
    c16c:	20026aec 	.word	0x20026aec

0000c170 <rshift>:
    c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c174:	6904      	ldr	r4, [r0, #16]
    c176:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    c17a:	dd2f      	ble.n	c1dc <rshift+0x6c>
    c17c:	f100 0e14 	add.w	lr, r0, #20
    c180:	114e      	asrs	r6, r1, #5
    c182:	f011 0c1f 	ands.w	ip, r1, #31
    c186:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    c18a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    c18e:	d02b      	beq.n	c1e8 <rshift+0x78>
    c190:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    c194:	3304      	adds	r3, #4
    c196:	429d      	cmp	r5, r3
    c198:	fa21 f10c 	lsr.w	r1, r1, ip
    c19c:	f1cc 0820 	rsb	r8, ip, #32
    c1a0:	d918      	bls.n	c1d4 <rshift+0x64>
    c1a2:	4677      	mov	r7, lr
    c1a4:	681a      	ldr	r2, [r3, #0]
    c1a6:	fa02 f208 	lsl.w	r2, r2, r8
    c1aa:	430a      	orrs	r2, r1
    c1ac:	f847 2b04 	str.w	r2, [r7], #4
    c1b0:	f853 1b04 	ldr.w	r1, [r3], #4
    c1b4:	429d      	cmp	r5, r3
    c1b6:	fa21 f10c 	lsr.w	r1, r1, ip
    c1ba:	d8f3      	bhi.n	c1a4 <rshift+0x34>
    c1bc:	1ba3      	subs	r3, r4, r6
    c1be:	009b      	lsls	r3, r3, #2
    c1c0:	3b05      	subs	r3, #5
    c1c2:	089b      	lsrs	r3, r3, #2
    c1c4:	3301      	adds	r3, #1
    c1c6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    c1ca:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    c1ce:	b1c9      	cbz	r1, c204 <rshift+0x94>
    c1d0:	3404      	adds	r4, #4
    c1d2:	e017      	b.n	c204 <rshift+0x94>
    c1d4:	6141      	str	r1, [r0, #20]
    c1d6:	4674      	mov	r4, lr
    c1d8:	2900      	cmp	r1, #0
    c1da:	d1f9      	bne.n	c1d0 <rshift+0x60>
    c1dc:	2300      	movs	r3, #0
    c1de:	6103      	str	r3, [r0, #16]
    c1e0:	2300      	movs	r3, #0
    c1e2:	6143      	str	r3, [r0, #20]
    c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1e8:	429d      	cmp	r5, r3
    c1ea:	bf88      	it	hi
    c1ec:	f100 0210 	addhi.w	r2, r0, #16
    c1f0:	d9f4      	bls.n	c1dc <rshift+0x6c>
    c1f2:	f853 1b04 	ldr.w	r1, [r3], #4
    c1f6:	f842 1f04 	str.w	r1, [r2, #4]!
    c1fa:	429d      	cmp	r5, r3
    c1fc:	d8f9      	bhi.n	c1f2 <rshift+0x82>
    c1fe:	1ba4      	subs	r4, r4, r6
    c200:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    c204:	eba4 030e 	sub.w	r3, r4, lr
    c208:	109b      	asrs	r3, r3, #2
    c20a:	4574      	cmp	r4, lr
    c20c:	6103      	str	r3, [r0, #16]
    c20e:	d0e7      	beq.n	c1e0 <rshift+0x70>
    c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c214 <__gethex>:
    c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c218:	ed2d 8b02 	vpush	{d8}
    c21c:	680c      	ldr	r4, [r1, #0]
    c21e:	468b      	mov	fp, r1
    c220:	78a1      	ldrb	r1, [r4, #2]
    c222:	b085      	sub	sp, #20
    c224:	2930      	cmp	r1, #48	; 0x30
    c226:	ee08 0a10 	vmov	s16, r0
    c22a:	4692      	mov	sl, r2
    c22c:	9302      	str	r3, [sp, #8]
    c22e:	f040 81ce 	bne.w	c5ce <__gethex+0x3ba>
    c232:	f06f 0001 	mvn.w	r0, #1
    c236:	1b00      	subs	r0, r0, r4
    c238:	1ce2      	adds	r2, r4, #3
    c23a:	1883      	adds	r3, r0, r2
    c23c:	4614      	mov	r4, r2
    c23e:	f812 1b01 	ldrb.w	r1, [r2], #1
    c242:	2930      	cmp	r1, #48	; 0x30
    c244:	d0f9      	beq.n	c23a <__gethex+0x26>
    c246:	f8df 8300 	ldr.w	r8, [pc, #768]	; c548 <__gethex+0x334>
    c24a:	f818 2001 	ldrb.w	r2, [r8, r1]
    c24e:	2a00      	cmp	r2, #0
    c250:	f000 80e5 	beq.w	c41e <__gethex+0x20a>
    c254:	7822      	ldrb	r2, [r4, #0]
    c256:	2700      	movs	r7, #0
    c258:	f818 2002 	ldrb.w	r2, [r8, r2]
    c25c:	463d      	mov	r5, r7
    c25e:	4626      	mov	r6, r4
    c260:	b12a      	cbz	r2, c26e <__gethex+0x5a>
    c262:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c266:	f818 2002 	ldrb.w	r2, [r8, r2]
    c26a:	2a00      	cmp	r2, #0
    c26c:	d1f9      	bne.n	c262 <__gethex+0x4e>
    c26e:	49b5      	ldr	r1, [pc, #724]	; (c544 <__gethex+0x330>)
    c270:	9301      	str	r3, [sp, #4]
    c272:	2201      	movs	r2, #1
    c274:	4630      	mov	r0, r6
    c276:	f7ff fa1b 	bl	b6b0 <strncmp>
    c27a:	9b01      	ldr	r3, [sp, #4]
    c27c:	4681      	mov	r9, r0
    c27e:	2800      	cmp	r0, #0
    c280:	d04d      	beq.n	c31e <__gethex+0x10a>
    c282:	2d00      	cmp	r5, #0
    c284:	d14e      	bne.n	c324 <__gethex+0x110>
    c286:	7832      	ldrb	r2, [r6, #0]
    c288:	46a9      	mov	r9, r5
    c28a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c28e:	2a50      	cmp	r2, #80	; 0x50
    c290:	4635      	mov	r5, r6
    c292:	d050      	beq.n	c336 <__gethex+0x122>
    c294:	f8cb 6000 	str.w	r6, [fp]
    c298:	2f00      	cmp	r7, #0
    c29a:	d169      	bne.n	c370 <__gethex+0x15c>
    c29c:	1b2b      	subs	r3, r5, r4
    c29e:	3b01      	subs	r3, #1
    c2a0:	2b07      	cmp	r3, #7
    c2a2:	4639      	mov	r1, r7
    c2a4:	dd04      	ble.n	c2b0 <__gethex+0x9c>
    c2a6:	105b      	asrs	r3, r3, #1
    c2a8:	2b07      	cmp	r3, #7
    c2aa:	f101 0101 	add.w	r1, r1, #1
    c2ae:	dcfa      	bgt.n	c2a6 <__gethex+0x92>
    c2b0:	ee18 0a10 	vmov	r0, s16
    c2b4:	f000 fb82 	bl	c9bc <_Balloc>
    c2b8:	4683      	mov	fp, r0
    c2ba:	2800      	cmp	r0, #0
    c2bc:	f000 8266 	beq.w	c78c <__gethex+0x578>
    c2c0:	f100 0614 	add.w	r6, r0, #20
    c2c4:	42ac      	cmp	r4, r5
    c2c6:	9601      	str	r6, [sp, #4]
    c2c8:	f080 81d2 	bcs.w	c670 <__gethex+0x45c>
    c2cc:	2700      	movs	r7, #0
    c2ce:	f8cd 900c 	str.w	r9, [sp, #12]
    c2d2:	499c      	ldr	r1, [pc, #624]	; (c544 <__gethex+0x330>)
    c2d4:	46a1      	mov	r9, r4
    c2d6:	463c      	mov	r4, r7
    c2d8:	e00c      	b.n	c2f4 <__gethex+0xe0>
    c2da:	2f20      	cmp	r7, #32
    c2dc:	d019      	beq.n	c312 <__gethex+0xfe>
    c2de:	4638      	mov	r0, r7
    c2e0:	3704      	adds	r7, #4
    c2e2:	782a      	ldrb	r2, [r5, #0]
    c2e4:	f818 2002 	ldrb.w	r2, [r8, r2]
    c2e8:	f002 020f 	and.w	r2, r2, #15
    c2ec:	4082      	lsls	r2, r0
    c2ee:	4314      	orrs	r4, r2
    c2f0:	454d      	cmp	r5, r9
    c2f2:	d047      	beq.n	c384 <__gethex+0x170>
    c2f4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    c2f8:	2a2e      	cmp	r2, #46	; 0x2e
    c2fa:	d1ee      	bne.n	c2da <__gethex+0xc6>
    c2fc:	454d      	cmp	r5, r9
    c2fe:	d3ec      	bcc.n	c2da <__gethex+0xc6>
    c300:	2201      	movs	r2, #1
    c302:	4628      	mov	r0, r5
    c304:	f7ff f9d4 	bl	b6b0 <strncmp>
    c308:	498e      	ldr	r1, [pc, #568]	; (c544 <__gethex+0x330>)
    c30a:	2800      	cmp	r0, #0
    c30c:	d0f0      	beq.n	c2f0 <__gethex+0xdc>
    c30e:	2f20      	cmp	r7, #32
    c310:	d1e5      	bne.n	c2de <__gethex+0xca>
    c312:	2000      	movs	r0, #0
    c314:	f846 4b04 	str.w	r4, [r6], #4
    c318:	2704      	movs	r7, #4
    c31a:	4604      	mov	r4, r0
    c31c:	e7e1      	b.n	c2e2 <__gethex+0xce>
    c31e:	2d00      	cmp	r5, #0
    c320:	f000 8142 	beq.w	c5a8 <__gethex+0x394>
    c324:	7832      	ldrb	r2, [r6, #0]
    c326:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    c32a:	1bad      	subs	r5, r5, r6
    c32c:	2a50      	cmp	r2, #80	; 0x50
    c32e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c332:	4635      	mov	r5, r6
    c334:	d1ae      	bne.n	c294 <__gethex+0x80>
    c336:	786a      	ldrb	r2, [r5, #1]
    c338:	2a2b      	cmp	r2, #43	; 0x2b
    c33a:	f000 8125 	beq.w	c588 <__gethex+0x374>
    c33e:	2a2d      	cmp	r2, #45	; 0x2d
    c340:	f000 80a5 	beq.w	c48e <__gethex+0x27a>
    c344:	1c6e      	adds	r6, r5, #1
    c346:	2000      	movs	r0, #0
    c348:	f818 1002 	ldrb.w	r1, [r8, r2]
    c34c:	1e4a      	subs	r2, r1, #1
    c34e:	2a18      	cmp	r2, #24
    c350:	f200 809b 	bhi.w	c48a <__gethex+0x276>
    c354:	7872      	ldrb	r2, [r6, #1]
    c356:	f818 2002 	ldrb.w	r2, [r8, r2]
    c35a:	3910      	subs	r1, #16
    c35c:	3601      	adds	r6, #1
    c35e:	2a00      	cmp	r2, #0
    c360:	d15a      	bne.n	c418 <__gethex+0x204>
    c362:	b100      	cbz	r0, c366 <__gethex+0x152>
    c364:	4249      	negs	r1, r1
    c366:	4489      	add	r9, r1
    c368:	f8cb 6000 	str.w	r6, [fp]
    c36c:	2f00      	cmp	r7, #0
    c36e:	d095      	beq.n	c29c <__gethex+0x88>
    c370:	2b00      	cmp	r3, #0
    c372:	bf14      	ite	ne
    c374:	2500      	movne	r5, #0
    c376:	2506      	moveq	r5, #6
    c378:	4628      	mov	r0, r5
    c37a:	b005      	add	sp, #20
    c37c:	ecbd 8b02 	vpop	{d8}
    c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c384:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c388:	4623      	mov	r3, r4
    c38a:	f846 3b04 	str.w	r3, [r6], #4
    c38e:	4618      	mov	r0, r3
    c390:	9b01      	ldr	r3, [sp, #4]
    c392:	1af6      	subs	r6, r6, r3
    c394:	10b6      	asrs	r6, r6, #2
    c396:	f8cb 6010 	str.w	r6, [fp, #16]
    c39a:	f000 fbe9 	bl	cb70 <__hi0bits>
    c39e:	0176      	lsls	r6, r6, #5
    c3a0:	f8da 4000 	ldr.w	r4, [sl]
    c3a4:	1a30      	subs	r0, r6, r0
    c3a6:	42a0      	cmp	r0, r4
    c3a8:	dc75      	bgt.n	c496 <__gethex+0x282>
    c3aa:	f2c0 80ef 	blt.w	c58c <__gethex+0x378>
    c3ae:	2700      	movs	r7, #0
    c3b0:	f8da 3008 	ldr.w	r3, [sl, #8]
    c3b4:	454b      	cmp	r3, r9
    c3b6:	f2c0 8151 	blt.w	c65c <__gethex+0x448>
    c3ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    c3be:	454b      	cmp	r3, r9
    c3c0:	dd4a      	ble.n	c458 <__gethex+0x244>
    c3c2:	eba3 0909 	sub.w	r9, r3, r9
    c3c6:	454c      	cmp	r4, r9
    c3c8:	f300 8082 	bgt.w	c4d0 <__gethex+0x2bc>
    c3cc:	f8da 200c 	ldr.w	r2, [sl, #12]
    c3d0:	2a02      	cmp	r2, #2
    c3d2:	f000 8165 	beq.w	c6a0 <__gethex+0x48c>
    c3d6:	2a03      	cmp	r2, #3
    c3d8:	f000 8181 	beq.w	c6de <__gethex+0x4ca>
    c3dc:	2a01      	cmp	r2, #1
    c3de:	f000 816f 	beq.w	c6c0 <__gethex+0x4ac>
    c3e2:	ee18 0a10 	vmov	r0, s16
    c3e6:	4659      	mov	r1, fp
    c3e8:	f000 fb0e 	bl	ca08 <_Bfree>
    c3ec:	2550      	movs	r5, #80	; 0x50
    c3ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3f0:	2300      	movs	r3, #0
    c3f2:	4628      	mov	r0, r5
    c3f4:	6013      	str	r3, [r2, #0]
    c3f6:	b005      	add	sp, #20
    c3f8:	ecbd 8b02 	vpop	{d8}
    c3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c400:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c404:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    c408:	f1a2 0110 	sub.w	r1, r2, #16
    c40c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    c410:	f818 2002 	ldrb.w	r2, [r8, r2]
    c414:	2a00      	cmp	r2, #0
    c416:	d0a4      	beq.n	c362 <__gethex+0x14e>
    c418:	2a19      	cmp	r2, #25
    c41a:	ddf1      	ble.n	c400 <__gethex+0x1ec>
    c41c:	e7a1      	b.n	c362 <__gethex+0x14e>
    c41e:	4949      	ldr	r1, [pc, #292]	; (c544 <__gethex+0x330>)
    c420:	9301      	str	r3, [sp, #4]
    c422:	2201      	movs	r2, #1
    c424:	4620      	mov	r0, r4
    c426:	f7ff f943 	bl	b6b0 <strncmp>
    c42a:	9b01      	ldr	r3, [sp, #4]
    c42c:	2800      	cmp	r0, #0
    c42e:	d16d      	bne.n	c50c <__gethex+0x2f8>
    c430:	7861      	ldrb	r1, [r4, #1]
    c432:	f818 2001 	ldrb.w	r2, [r8, r1]
    c436:	1c65      	adds	r5, r4, #1
    c438:	2a00      	cmp	r2, #0
    c43a:	d069      	beq.n	c510 <__gethex+0x2fc>
    c43c:	2930      	cmp	r1, #48	; 0x30
    c43e:	462c      	mov	r4, r5
    c440:	d105      	bne.n	c44e <__gethex+0x23a>
    c442:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c446:	2b30      	cmp	r3, #48	; 0x30
    c448:	d0fb      	beq.n	c442 <__gethex+0x22e>
    c44a:	f818 2003 	ldrb.w	r2, [r8, r3]
    c44e:	fab2 f782 	clz	r7, r2
    c452:	097f      	lsrs	r7, r7, #5
    c454:	2301      	movs	r3, #1
    c456:	e702      	b.n	c25e <__gethex+0x4a>
    c458:	2501      	movs	r5, #1
    c45a:	b157      	cbz	r7, c472 <__gethex+0x25e>
    c45c:	f8da 300c 	ldr.w	r3, [sl, #12]
    c460:	2b02      	cmp	r3, #2
    c462:	d05d      	beq.n	c520 <__gethex+0x30c>
    c464:	2b03      	cmp	r3, #3
    c466:	d05f      	beq.n	c528 <__gethex+0x314>
    c468:	2b01      	cmp	r3, #1
    c46a:	f000 8084 	beq.w	c576 <__gethex+0x362>
    c46e:	f045 0510 	orr.w	r5, r5, #16
    c472:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c474:	f8c3 b000 	str.w	fp, [r3]
    c478:	9b02      	ldr	r3, [sp, #8]
    c47a:	4628      	mov	r0, r5
    c47c:	f8c3 9000 	str.w	r9, [r3]
    c480:	b005      	add	sp, #20
    c482:	ecbd 8b02 	vpop	{d8}
    c486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c48a:	462e      	mov	r6, r5
    c48c:	e702      	b.n	c294 <__gethex+0x80>
    c48e:	2001      	movs	r0, #1
    c490:	78aa      	ldrb	r2, [r5, #2]
    c492:	1cae      	adds	r6, r5, #2
    c494:	e758      	b.n	c348 <__gethex+0x134>
    c496:	1b06      	subs	r6, r0, r4
    c498:	4631      	mov	r1, r6
    c49a:	4658      	mov	r0, fp
    c49c:	f000 ff96 	bl	d3cc <__any_on>
    c4a0:	4607      	mov	r7, r0
    c4a2:	b178      	cbz	r0, c4c4 <__gethex+0x2b0>
    c4a4:	1e72      	subs	r2, r6, #1
    c4a6:	1153      	asrs	r3, r2, #5
    c4a8:	9901      	ldr	r1, [sp, #4]
    c4aa:	2701      	movs	r7, #1
    c4ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    c4b0:	f002 031f 	and.w	r3, r2, #31
    c4b4:	fa07 f303 	lsl.w	r3, r7, r3
    c4b8:	420b      	tst	r3, r1
    c4ba:	d003      	beq.n	c4c4 <__gethex+0x2b0>
    c4bc:	42ba      	cmp	r2, r7
    c4be:	f300 80e2 	bgt.w	c686 <__gethex+0x472>
    c4c2:	2702      	movs	r7, #2
    c4c4:	4631      	mov	r1, r6
    c4c6:	4658      	mov	r0, fp
    c4c8:	44b1      	add	r9, r6
    c4ca:	f7ff fe51 	bl	c170 <rshift>
    c4ce:	e76f      	b.n	c3b0 <__gethex+0x19c>
    c4d0:	f109 35ff 	add.w	r5, r9, #4294967295
    c4d4:	2f00      	cmp	r7, #0
    c4d6:	f040 80ce 	bne.w	c676 <__gethex+0x462>
    c4da:	2d00      	cmp	r5, #0
    c4dc:	f040 80cd 	bne.w	c67a <__gethex+0x466>
    c4e0:	116b      	asrs	r3, r5, #5
    c4e2:	9a01      	ldr	r2, [sp, #4]
    c4e4:	f005 051f 	and.w	r5, r5, #31
    c4e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c4ec:	2301      	movs	r3, #1
    c4ee:	40ab      	lsls	r3, r5
    c4f0:	4213      	tst	r3, r2
    c4f2:	4649      	mov	r1, r9
    c4f4:	4658      	mov	r0, fp
    c4f6:	bf18      	it	ne
    c4f8:	f047 0702 	orrne.w	r7, r7, #2
    c4fc:	eba4 0409 	sub.w	r4, r4, r9
    c500:	f7ff fe36 	bl	c170 <rshift>
    c504:	2502      	movs	r5, #2
    c506:	f8da 9004 	ldr.w	r9, [sl, #4]
    c50a:	e7a6      	b.n	c45a <__gethex+0x246>
    c50c:	7821      	ldrb	r1, [r4, #0]
    c50e:	4625      	mov	r5, r4
    c510:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    c514:	2950      	cmp	r1, #80	; 0x50
    c516:	f000 80bf 	beq.w	c698 <__gethex+0x484>
    c51a:	f8cb 5000 	str.w	r5, [fp]
    c51e:	e727      	b.n	c370 <__gethex+0x15c>
    c520:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c522:	f1c3 0301 	rsb	r3, r3, #1
    c526:	9311      	str	r3, [sp, #68]	; 0x44
    c528:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c52a:	2b00      	cmp	r3, #0
    c52c:	d09f      	beq.n	c46e <__gethex+0x25a>
    c52e:	f8db 7010 	ldr.w	r7, [fp, #16]
    c532:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c536:	00ba      	lsls	r2, r7, #2
    c538:	4643      	mov	r3, r8
    c53a:	9201      	str	r2, [sp, #4]
    c53c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    c540:	2100      	movs	r1, #0
    c542:	e007      	b.n	c554 <__gethex+0x340>
    c544:	20007e38 	.word	0x20007e38
    c548:	20000a48 	.word	0x20000a48
    c54c:	4298      	cmp	r0, r3
    c54e:	f843 1c04 	str.w	r1, [r3, #-4]
    c552:	d93f      	bls.n	c5d4 <__gethex+0x3c0>
    c554:	461e      	mov	r6, r3
    c556:	f853 2b04 	ldr.w	r2, [r3], #4
    c55a:	f1b2 3fff 	cmp.w	r2, #4294967295
    c55e:	d0f5      	beq.n	c54c <__gethex+0x338>
    c560:	3201      	adds	r2, #1
    c562:	2d02      	cmp	r5, #2
    c564:	6032      	str	r2, [r6, #0]
    c566:	f000 80bf 	beq.w	c6e8 <__gethex+0x4d4>
    c56a:	f014 041f 	ands.w	r4, r4, #31
    c56e:	f040 80e7 	bne.w	c740 <__gethex+0x52c>
    c572:	2521      	movs	r5, #33	; 0x21
    c574:	e77d      	b.n	c472 <__gethex+0x25e>
    c576:	07ba      	lsls	r2, r7, #30
    c578:	f57f af79 	bpl.w	c46e <__gethex+0x25a>
    c57c:	9b01      	ldr	r3, [sp, #4]
    c57e:	681b      	ldr	r3, [r3, #0]
    c580:	431f      	orrs	r7, r3
    c582:	07fb      	lsls	r3, r7, #31
    c584:	d4d3      	bmi.n	c52e <__gethex+0x31a>
    c586:	e772      	b.n	c46e <__gethex+0x25a>
    c588:	2000      	movs	r0, #0
    c58a:	e781      	b.n	c490 <__gethex+0x27c>
    c58c:	1a22      	subs	r2, r4, r0
    c58e:	4659      	mov	r1, fp
    c590:	ee18 0a10 	vmov	r0, s16
    c594:	eba9 0902 	sub.w	r9, r9, r2
    c598:	f000 fc76 	bl	ce88 <__lshift>
    c59c:	f100 0314 	add.w	r3, r0, #20
    c5a0:	4683      	mov	fp, r0
    c5a2:	9301      	str	r3, [sp, #4]
    c5a4:	2700      	movs	r7, #0
    c5a6:	e703      	b.n	c3b0 <__gethex+0x19c>
    c5a8:	7872      	ldrb	r2, [r6, #1]
    c5aa:	f818 0002 	ldrb.w	r0, [r8, r2]
    c5ae:	1c71      	adds	r1, r6, #1
    c5b0:	2800      	cmp	r0, #0
    c5b2:	f000 80a0 	beq.w	c6f6 <__gethex+0x4e2>
    c5b6:	460d      	mov	r5, r1
    c5b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    c5bc:	f818 0002 	ldrb.w	r0, [r8, r2]
    c5c0:	2800      	cmp	r0, #0
    c5c2:	d1f8      	bne.n	c5b6 <__gethex+0x3a2>
    c5c4:	1b75      	subs	r5, r6, r5
    c5c6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    c5ca:	460e      	mov	r6, r1
    c5cc:	e65d      	b.n	c28a <__gethex+0x76>
    c5ce:	3402      	adds	r4, #2
    c5d0:	2300      	movs	r3, #0
    c5d2:	e638      	b.n	c246 <__gethex+0x32>
    c5d4:	f8db 3008 	ldr.w	r3, [fp, #8]
    c5d8:	429f      	cmp	r7, r3
    c5da:	f280 808e 	bge.w	c6fa <__gethex+0x4e6>
    c5de:	463b      	mov	r3, r7
    c5e0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    c5e4:	2101      	movs	r1, #1
    c5e6:	3301      	adds	r3, #1
    c5e8:	2d02      	cmp	r5, #2
    c5ea:	f8cb 3010 	str.w	r3, [fp, #16]
    c5ee:	6151      	str	r1, [r2, #20]
    c5f0:	d07a      	beq.n	c6e8 <__gethex+0x4d4>
    c5f2:	429f      	cmp	r7, r3
    c5f4:	dab9      	bge.n	c56a <__gethex+0x356>
    c5f6:	2b00      	cmp	r3, #0
    c5f8:	f340 809b 	ble.w	c732 <__gethex+0x51e>
    c5fc:	f8db 2014 	ldr.w	r2, [fp, #20]
    c600:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c604:	f10b 0018 	add.w	r0, fp, #24
    c608:	4283      	cmp	r3, r0
    c60a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c60e:	f240 80b1 	bls.w	c774 <__gethex+0x560>
    c612:	4644      	mov	r4, r8
    c614:	6801      	ldr	r1, [r0, #0]
    c616:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c61a:	f844 2b04 	str.w	r2, [r4], #4
    c61e:	f850 2b04 	ldr.w	r2, [r0], #4
    c622:	4283      	cmp	r3, r0
    c624:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c628:	d8f4      	bhi.n	c614 <__gethex+0x400>
    c62a:	eba3 030b 	sub.w	r3, r3, fp
    c62e:	3b19      	subs	r3, #25
    c630:	089b      	lsrs	r3, r3, #2
    c632:	3301      	adds	r3, #1
    c634:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    c638:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c63c:	2a00      	cmp	r2, #0
    c63e:	f040 809d 	bne.w	c77c <__gethex+0x568>
    c642:	eba3 0208 	sub.w	r2, r3, r8
    c646:	1092      	asrs	r2, r2, #2
    c648:	4543      	cmp	r3, r8
    c64a:	f8cb 2010 	str.w	r2, [fp, #16]
    c64e:	d073      	beq.n	c738 <__gethex+0x524>
    c650:	f8da 3008 	ldr.w	r3, [sl, #8]
    c654:	f109 0901 	add.w	r9, r9, #1
    c658:	454b      	cmp	r3, r9
    c65a:	da8a      	bge.n	c572 <__gethex+0x35e>
    c65c:	ee18 0a10 	vmov	r0, s16
    c660:	4659      	mov	r1, fp
    c662:	f000 f9d1 	bl	ca08 <_Bfree>
    c666:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c668:	2300      	movs	r3, #0
    c66a:	6013      	str	r3, [r2, #0]
    c66c:	25a3      	movs	r5, #163	; 0xa3
    c66e:	e683      	b.n	c378 <__gethex+0x164>
    c670:	9e01      	ldr	r6, [sp, #4]
    c672:	2300      	movs	r3, #0
    c674:	e689      	b.n	c38a <__gethex+0x176>
    c676:	2701      	movs	r7, #1
    c678:	e732      	b.n	c4e0 <__gethex+0x2cc>
    c67a:	4629      	mov	r1, r5
    c67c:	4658      	mov	r0, fp
    c67e:	f000 fea5 	bl	d3cc <__any_on>
    c682:	4607      	mov	r7, r0
    c684:	e72c      	b.n	c4e0 <__gethex+0x2cc>
    c686:	1eb1      	subs	r1, r6, #2
    c688:	4658      	mov	r0, fp
    c68a:	f000 fe9f 	bl	d3cc <__any_on>
    c68e:	2800      	cmp	r0, #0
    c690:	f43f af17 	beq.w	c4c2 <__gethex+0x2ae>
    c694:	2703      	movs	r7, #3
    c696:	e715      	b.n	c4c4 <__gethex+0x2b0>
    c698:	f04f 0900 	mov.w	r9, #0
    c69c:	2701      	movs	r7, #1
    c69e:	e64a      	b.n	c336 <__gethex+0x122>
    c6a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c6a2:	2a00      	cmp	r2, #0
    c6a4:	f47f ae9d 	bne.w	c3e2 <__gethex+0x1ce>
    c6a8:	9902      	ldr	r1, [sp, #8]
    c6aa:	600b      	str	r3, [r1, #0]
    c6ac:	9b01      	ldr	r3, [sp, #4]
    c6ae:	2201      	movs	r2, #1
    c6b0:	f8cb 2010 	str.w	r2, [fp, #16]
    c6b4:	601a      	str	r2, [r3, #0]
    c6b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c6b8:	2562      	movs	r5, #98	; 0x62
    c6ba:	f8c3 b000 	str.w	fp, [r3]
    c6be:	e65b      	b.n	c378 <__gethex+0x164>
    c6c0:	454c      	cmp	r4, r9
    c6c2:	f47f ae8e 	bne.w	c3e2 <__gethex+0x1ce>
    c6c6:	2c01      	cmp	r4, #1
    c6c8:	d0ee      	beq.n	c6a8 <__gethex+0x494>
    c6ca:	1e61      	subs	r1, r4, #1
    c6cc:	4658      	mov	r0, fp
    c6ce:	f000 fe7d 	bl	d3cc <__any_on>
    c6d2:	2800      	cmp	r0, #0
    c6d4:	f43f ae85 	beq.w	c3e2 <__gethex+0x1ce>
    c6d8:	f8da 3004 	ldr.w	r3, [sl, #4]
    c6dc:	e7e4      	b.n	c6a8 <__gethex+0x494>
    c6de:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c6e0:	2a00      	cmp	r2, #0
    c6e2:	f43f ae7e 	beq.w	c3e2 <__gethex+0x1ce>
    c6e6:	e7df      	b.n	c6a8 <__gethex+0x494>
    c6e8:	f8da 3000 	ldr.w	r3, [sl]
    c6ec:	3b01      	subs	r3, #1
    c6ee:	42a3      	cmp	r3, r4
    c6f0:	d034      	beq.n	c75c <__gethex+0x548>
    c6f2:	2522      	movs	r5, #34	; 0x22
    c6f4:	e6bd      	b.n	c472 <__gethex+0x25e>
    c6f6:	460e      	mov	r6, r1
    c6f8:	e5c7      	b.n	c28a <__gethex+0x76>
    c6fa:	f8db 1004 	ldr.w	r1, [fp, #4]
    c6fe:	ee18 0a10 	vmov	r0, s16
    c702:	3101      	adds	r1, #1
    c704:	f000 f95a 	bl	c9bc <_Balloc>
    c708:	4606      	mov	r6, r0
    c70a:	b3c8      	cbz	r0, c780 <__gethex+0x56c>
    c70c:	f8db 3010 	ldr.w	r3, [fp, #16]
    c710:	3302      	adds	r3, #2
    c712:	009a      	lsls	r2, r3, #2
    c714:	f10b 010c 	add.w	r1, fp, #12
    c718:	300c      	adds	r0, #12
    c71a:	f7fb f9a7 	bl	7a6c <memcpy>
    c71e:	4659      	mov	r1, fp
    c720:	ee18 0a10 	vmov	r0, s16
    c724:	f000 f970 	bl	ca08 <_Bfree>
    c728:	f106 0814 	add.w	r8, r6, #20
    c72c:	6933      	ldr	r3, [r6, #16]
    c72e:	46b3      	mov	fp, r6
    c730:	e756      	b.n	c5e0 <__gethex+0x3cc>
    c732:	2300      	movs	r3, #0
    c734:	f8cb 3010 	str.w	r3, [fp, #16]
    c738:	2300      	movs	r3, #0
    c73a:	f8cb 3014 	str.w	r3, [fp, #20]
    c73e:	e787      	b.n	c650 <__gethex+0x43c>
    c740:	9b01      	ldr	r3, [sp, #4]
    c742:	4443      	add	r3, r8
    c744:	f1c4 0420 	rsb	r4, r4, #32
    c748:	f853 0c04 	ldr.w	r0, [r3, #-4]
    c74c:	f000 fa10 	bl	cb70 <__hi0bits>
    c750:	42a0      	cmp	r0, r4
    c752:	f6bf af0e 	bge.w	c572 <__gethex+0x35e>
    c756:	f8db 3010 	ldr.w	r3, [fp, #16]
    c75a:	e74c      	b.n	c5f6 <__gethex+0x3e2>
    c75c:	1163      	asrs	r3, r4, #5
    c75e:	f004 041f 	and.w	r4, r4, #31
    c762:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    c766:	2301      	movs	r3, #1
    c768:	40a3      	lsls	r3, r4
    c76a:	4213      	tst	r3, r2
    c76c:	bf0c      	ite	eq
    c76e:	2522      	moveq	r5, #34	; 0x22
    c770:	2521      	movne	r5, #33	; 0x21
    c772:	e67e      	b.n	c472 <__gethex+0x25e>
    c774:	f8c8 2000 	str.w	r2, [r8]
    c778:	4643      	mov	r3, r8
    c77a:	b16a      	cbz	r2, c798 <__gethex+0x584>
    c77c:	3304      	adds	r3, #4
    c77e:	e760      	b.n	c642 <__gethex+0x42e>
    c780:	4b07      	ldr	r3, [pc, #28]	; (c7a0 <__gethex+0x58c>)
    c782:	4808      	ldr	r0, [pc, #32]	; (c7a4 <__gethex+0x590>)
    c784:	4632      	mov	r2, r6
    c786:	2184      	movs	r1, #132	; 0x84
    c788:	f004 fa0a 	bl	10ba0 <__assert_func>
    c78c:	4b04      	ldr	r3, [pc, #16]	; (c7a0 <__gethex+0x58c>)
    c78e:	4805      	ldr	r0, [pc, #20]	; (c7a4 <__gethex+0x590>)
    c790:	465a      	mov	r2, fp
    c792:	21e4      	movs	r1, #228	; 0xe4
    c794:	f004 fa04 	bl	10ba0 <__assert_func>
    c798:	f8cb 2010 	str.w	r2, [fp, #16]
    c79c:	e7cc      	b.n	c738 <__gethex+0x524>
    c79e:	bf00      	nop
    c7a0:	200009d0 	.word	0x200009d0
    c7a4:	200009e4 	.word	0x200009e4

0000c7a8 <__match>:
    c7a8:	b410      	push	{r4}
    c7aa:	6804      	ldr	r4, [r0, #0]
    c7ac:	e009      	b.n	c7c2 <__match+0x1a>
    c7ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    c7b2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    c7b6:	f1bc 0f19 	cmp.w	ip, #25
    c7ba:	bf98      	it	ls
    c7bc:	3320      	addls	r3, #32
    c7be:	4293      	cmp	r3, r2
    c7c0:	d109      	bne.n	c7d6 <__match+0x2e>
    c7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
    c7c6:	2a00      	cmp	r2, #0
    c7c8:	d1f1      	bne.n	c7ae <__match+0x6>
    c7ca:	3401      	adds	r4, #1
    c7cc:	6004      	str	r4, [r0, #0]
    c7ce:	2001      	movs	r0, #1
    c7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    c7d4:	4770      	bx	lr
    c7d6:	2000      	movs	r0, #0
    c7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    c7dc:	4770      	bx	lr
    c7de:	bf00      	nop

0000c7e0 <__hexnan>:
    c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7e4:	6809      	ldr	r1, [r1, #0]
    c7e6:	b085      	sub	sp, #20
    c7e8:	114b      	asrs	r3, r1, #5
    c7ea:	f011 011f 	ands.w	r1, r1, #31
    c7ee:	9002      	str	r0, [sp, #8]
    c7f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c7f4:	9103      	str	r1, [sp, #12]
    c7f6:	f040 808f 	bne.w	c918 <__hexnan+0x138>
    c7fa:	1f1d      	subs	r5, r3, #4
    c7fc:	9301      	str	r3, [sp, #4]
    c7fe:	9b02      	ldr	r3, [sp, #8]
    c800:	9901      	ldr	r1, [sp, #4]
    c802:	681c      	ldr	r4, [r3, #0]
    c804:	2300      	movs	r3, #0
    c806:	f841 3c04 	str.w	r3, [r1, #-4]
    c80a:	7861      	ldrb	r1, [r4, #1]
    c80c:	3401      	adds	r4, #1
    c80e:	2900      	cmp	r1, #0
    c810:	f000 8098 	beq.w	c944 <__hexnan+0x164>
    c814:	f8df 9174 	ldr.w	r9, [pc, #372]	; c98c <__hexnan+0x1ac>
    c818:	46a8      	mov	r8, r5
    c81a:	46ac      	mov	ip, r5
    c81c:	469a      	mov	sl, r3
    c81e:	461e      	mov	r6, r3
    c820:	e00e      	b.n	c840 <__hexnan+0x60>
    c822:	2920      	cmp	r1, #32
    c824:	f200 808c 	bhi.w	c940 <__hexnan+0x160>
    c828:	4556      	cmp	r6, sl
    c82a:	dd06      	ble.n	c83a <__hexnan+0x5a>
    c82c:	45c4      	cmp	ip, r8
    c82e:	d201      	bcs.n	c834 <__hexnan+0x54>
    c830:	2b07      	cmp	r3, #7
    c832:	dd5b      	ble.n	c8ec <__hexnan+0x10c>
    c834:	4562      	cmp	r2, ip
    c836:	d351      	bcc.n	c8dc <__hexnan+0xfc>
    c838:	2308      	movs	r3, #8
    c83a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    c83e:	b1a1      	cbz	r1, c86a <__hexnan+0x8a>
    c840:	f819 0001 	ldrb.w	r0, [r9, r1]
    c844:	2800      	cmp	r0, #0
    c846:	d0ec      	beq.n	c822 <__hexnan+0x42>
    c848:	3301      	adds	r3, #1
    c84a:	2b08      	cmp	r3, #8
    c84c:	f106 0601 	add.w	r6, r6, #1
    c850:	dc3a      	bgt.n	c8c8 <__hexnan+0xe8>
    c852:	f8dc 1000 	ldr.w	r1, [ip]
    c856:	0109      	lsls	r1, r1, #4
    c858:	f000 000f 	and.w	r0, r0, #15
    c85c:	4308      	orrs	r0, r1
    c85e:	f8cc 0000 	str.w	r0, [ip]
    c862:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    c866:	2900      	cmp	r1, #0
    c868:	d1ea      	bne.n	c840 <__hexnan+0x60>
    c86a:	2e00      	cmp	r6, #0
    c86c:	d06a      	beq.n	c944 <__hexnan+0x164>
    c86e:	45c4      	cmp	ip, r8
    c870:	d201      	bcs.n	c876 <__hexnan+0x96>
    c872:	2b07      	cmp	r3, #7
    c874:	dd74      	ble.n	c960 <__hexnan+0x180>
    c876:	4562      	cmp	r2, ip
    c878:	d252      	bcs.n	c920 <__hexnan+0x140>
    c87a:	1f11      	subs	r1, r2, #4
    c87c:	4663      	mov	r3, ip
    c87e:	f853 0b04 	ldr.w	r0, [r3], #4
    c882:	f841 0f04 	str.w	r0, [r1, #4]!
    c886:	42ab      	cmp	r3, r5
    c888:	d9f9      	bls.n	c87e <__hexnan+0x9e>
    c88a:	eba5 030c 	sub.w	r3, r5, ip
    c88e:	f023 0303 	bic.w	r3, r3, #3
    c892:	1c69      	adds	r1, r5, #1
    c894:	3304      	adds	r3, #4
    c896:	f10c 0c01 	add.w	ip, ip, #1
    c89a:	4561      	cmp	r1, ip
    c89c:	bf38      	it	cc
    c89e:	2304      	movcc	r3, #4
    c8a0:	4413      	add	r3, r2
    c8a2:	2100      	movs	r1, #0
    c8a4:	f843 1b04 	str.w	r1, [r3], #4
    c8a8:	42ab      	cmp	r3, r5
    c8aa:	d9fb      	bls.n	c8a4 <__hexnan+0xc4>
    c8ac:	9b01      	ldr	r3, [sp, #4]
    c8ae:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c8b2:	b92b      	cbnz	r3, c8c0 <__hexnan+0xe0>
    c8b4:	42aa      	cmp	r2, r5
    c8b6:	d049      	beq.n	c94c <__hexnan+0x16c>
    c8b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    c8bc:	2b00      	cmp	r3, #0
    c8be:	d0f9      	beq.n	c8b4 <__hexnan+0xd4>
    c8c0:	2005      	movs	r0, #5
    c8c2:	b005      	add	sp, #20
    c8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8c8:	4562      	cmp	r2, ip
    c8ca:	d2b6      	bcs.n	c83a <__hexnan+0x5a>
    c8cc:	2300      	movs	r3, #0
    c8ce:	f84c 3c04 	str.w	r3, [ip, #-4]
    c8d2:	4619      	mov	r1, r3
    c8d4:	f1ac 0c04 	sub.w	ip, ip, #4
    c8d8:	2301      	movs	r3, #1
    c8da:	e7bd      	b.n	c858 <__hexnan+0x78>
    c8dc:	2300      	movs	r3, #0
    c8de:	f1ac 0804 	sub.w	r8, ip, #4
    c8e2:	f84c 3c04 	str.w	r3, [ip, #-4]
    c8e6:	46b2      	mov	sl, r6
    c8e8:	46c4      	mov	ip, r8
    c8ea:	e7a6      	b.n	c83a <__hexnan+0x5a>
    c8ec:	f1c3 0108 	rsb	r1, r3, #8
    c8f0:	f8dc 3000 	ldr.w	r3, [ip]
    c8f4:	0089      	lsls	r1, r1, #2
    c8f6:	f1c1 0e20 	rsb	lr, r1, #32
    c8fa:	4660      	mov	r0, ip
    c8fc:	469b      	mov	fp, r3
    c8fe:	6847      	ldr	r7, [r0, #4]
    c900:	fa07 f30e 	lsl.w	r3, r7, lr
    c904:	ea43 030b 	orr.w	r3, r3, fp
    c908:	fa27 fb01 	lsr.w	fp, r7, r1
    c90c:	6003      	str	r3, [r0, #0]
    c90e:	f840 bf04 	str.w	fp, [r0, #4]!
    c912:	4540      	cmp	r0, r8
    c914:	d3f3      	bcc.n	c8fe <__hexnan+0x11e>
    c916:	e78d      	b.n	c834 <__hexnan+0x54>
    c918:	1d19      	adds	r1, r3, #4
    c91a:	9101      	str	r1, [sp, #4]
    c91c:	461d      	mov	r5, r3
    c91e:	e76e      	b.n	c7fe <__hexnan+0x1e>
    c920:	9b03      	ldr	r3, [sp, #12]
    c922:	2b00      	cmp	r3, #0
    c924:	d0c2      	beq.n	c8ac <__hexnan+0xcc>
    c926:	9b03      	ldr	r3, [sp, #12]
    c928:	9801      	ldr	r0, [sp, #4]
    c92a:	f1c3 0120 	rsb	r1, r3, #32
    c92e:	f04f 33ff 	mov.w	r3, #4294967295
    c932:	40cb      	lsrs	r3, r1
    c934:	f850 1c04 	ldr.w	r1, [r0, #-4]
    c938:	400b      	ands	r3, r1
    c93a:	f840 3c04 	str.w	r3, [r0, #-4]
    c93e:	e7b8      	b.n	c8b2 <__hexnan+0xd2>
    c940:	2929      	cmp	r1, #41	; 0x29
    c942:	d009      	beq.n	c958 <__hexnan+0x178>
    c944:	2004      	movs	r0, #4
    c946:	b005      	add	sp, #20
    c948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c94c:	2301      	movs	r3, #1
    c94e:	2005      	movs	r0, #5
    c950:	602b      	str	r3, [r5, #0]
    c952:	b005      	add	sp, #20
    c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c958:	9902      	ldr	r1, [sp, #8]
    c95a:	3401      	adds	r4, #1
    c95c:	600c      	str	r4, [r1, #0]
    c95e:	e784      	b.n	c86a <__hexnan+0x8a>
    c960:	f8dc 1000 	ldr.w	r1, [ip]
    c964:	f1c3 0308 	rsb	r3, r3, #8
    c968:	009b      	lsls	r3, r3, #2
    c96a:	f1c3 0720 	rsb	r7, r3, #32
    c96e:	4664      	mov	r4, ip
    c970:	4608      	mov	r0, r1
    c972:	6866      	ldr	r6, [r4, #4]
    c974:	fa06 f107 	lsl.w	r1, r6, r7
    c978:	4301      	orrs	r1, r0
    c97a:	fa26 f003 	lsr.w	r0, r6, r3
    c97e:	6021      	str	r1, [r4, #0]
    c980:	f844 0f04 	str.w	r0, [r4, #4]!
    c984:	4544      	cmp	r4, r8
    c986:	d3f4      	bcc.n	c972 <__hexnan+0x192>
    c988:	e775      	b.n	c876 <__hexnan+0x96>
    c98a:	bf00      	nop
    c98c:	20000a48 	.word	0x20000a48

0000c990 <__ascii_mbtowc>:
    c990:	b082      	sub	sp, #8
    c992:	b149      	cbz	r1, c9a8 <__ascii_mbtowc+0x18>
    c994:	b15a      	cbz	r2, c9ae <__ascii_mbtowc+0x1e>
    c996:	b16b      	cbz	r3, c9b4 <__ascii_mbtowc+0x24>
    c998:	7813      	ldrb	r3, [r2, #0]
    c99a:	600b      	str	r3, [r1, #0]
    c99c:	7812      	ldrb	r2, [r2, #0]
    c99e:	1e10      	subs	r0, r2, #0
    c9a0:	bf18      	it	ne
    c9a2:	2001      	movne	r0, #1
    c9a4:	b002      	add	sp, #8
    c9a6:	4770      	bx	lr
    c9a8:	a901      	add	r1, sp, #4
    c9aa:	2a00      	cmp	r2, #0
    c9ac:	d1f3      	bne.n	c996 <__ascii_mbtowc+0x6>
    c9ae:	4610      	mov	r0, r2
    c9b0:	b002      	add	sp, #8
    c9b2:	4770      	bx	lr
    c9b4:	f06f 0001 	mvn.w	r0, #1
    c9b8:	e7f4      	b.n	c9a4 <__ascii_mbtowc+0x14>
    c9ba:	bf00      	nop

0000c9bc <_Balloc>:
    c9bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c9be:	b570      	push	{r4, r5, r6, lr}
    c9c0:	4605      	mov	r5, r0
    c9c2:	460c      	mov	r4, r1
    c9c4:	b14b      	cbz	r3, c9da <_Balloc+0x1e>
    c9c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c9ca:	b180      	cbz	r0, c9ee <_Balloc+0x32>
    c9cc:	6802      	ldr	r2, [r0, #0]
    c9ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c9d2:	2300      	movs	r3, #0
    c9d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c9d8:	bd70      	pop	{r4, r5, r6, pc}
    c9da:	2221      	movs	r2, #33	; 0x21
    c9dc:	2104      	movs	r1, #4
    c9de:	f004 f8ff 	bl	10be0 <_calloc_r>
    c9e2:	4603      	mov	r3, r0
    c9e4:	6468      	str	r0, [r5, #68]	; 0x44
    c9e6:	2800      	cmp	r0, #0
    c9e8:	d1ed      	bne.n	c9c6 <_Balloc+0xa>
    c9ea:	2000      	movs	r0, #0
    c9ec:	bd70      	pop	{r4, r5, r6, pc}
    c9ee:	2101      	movs	r1, #1
    c9f0:	fa01 f604 	lsl.w	r6, r1, r4
    c9f4:	1d72      	adds	r2, r6, #5
    c9f6:	0092      	lsls	r2, r2, #2
    c9f8:	4628      	mov	r0, r5
    c9fa:	f004 f8f1 	bl	10be0 <_calloc_r>
    c9fe:	2800      	cmp	r0, #0
    ca00:	d0f3      	beq.n	c9ea <_Balloc+0x2e>
    ca02:	e9c0 4601 	strd	r4, r6, [r0, #4]
    ca06:	e7e4      	b.n	c9d2 <_Balloc+0x16>

0000ca08 <_Bfree>:
    ca08:	b131      	cbz	r1, ca18 <_Bfree+0x10>
    ca0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ca0c:	684a      	ldr	r2, [r1, #4]
    ca0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ca12:	6008      	str	r0, [r1, #0]
    ca14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ca18:	4770      	bx	lr
    ca1a:	bf00      	nop

0000ca1c <__multadd>:
    ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca20:	690e      	ldr	r6, [r1, #16]
    ca22:	4680      	mov	r8, r0
    ca24:	460f      	mov	r7, r1
    ca26:	461d      	mov	r5, r3
    ca28:	f101 0e14 	add.w	lr, r1, #20
    ca2c:	2000      	movs	r0, #0
    ca2e:	f8de 1000 	ldr.w	r1, [lr]
    ca32:	b28c      	uxth	r4, r1
    ca34:	fb02 5304 	mla	r3, r2, r4, r5
    ca38:	0c09      	lsrs	r1, r1, #16
    ca3a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ca3e:	fb02 cc01 	mla	ip, r2, r1, ip
    ca42:	3001      	adds	r0, #1
    ca44:	b29c      	uxth	r4, r3
    ca46:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    ca4a:	4286      	cmp	r6, r0
    ca4c:	f84e 4b04 	str.w	r4, [lr], #4
    ca50:	ea4f 451c 	mov.w	r5, ip, lsr #16
    ca54:	dceb      	bgt.n	ca2e <__multadd+0x12>
    ca56:	b13d      	cbz	r5, ca68 <__multadd+0x4c>
    ca58:	68bb      	ldr	r3, [r7, #8]
    ca5a:	42b3      	cmp	r3, r6
    ca5c:	dd07      	ble.n	ca6e <__multadd+0x52>
    ca5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ca62:	3601      	adds	r6, #1
    ca64:	615d      	str	r5, [r3, #20]
    ca66:	613e      	str	r6, [r7, #16]
    ca68:	4638      	mov	r0, r7
    ca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca6e:	6879      	ldr	r1, [r7, #4]
    ca70:	4640      	mov	r0, r8
    ca72:	3101      	adds	r1, #1
    ca74:	f7ff ffa2 	bl	c9bc <_Balloc>
    ca78:	4604      	mov	r4, r0
    ca7a:	b1b0      	cbz	r0, caaa <__multadd+0x8e>
    ca7c:	693a      	ldr	r2, [r7, #16]
    ca7e:	3202      	adds	r2, #2
    ca80:	f107 010c 	add.w	r1, r7, #12
    ca84:	0092      	lsls	r2, r2, #2
    ca86:	300c      	adds	r0, #12
    ca88:	f7fa fff0 	bl	7a6c <memcpy>
    ca8c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ca90:	687a      	ldr	r2, [r7, #4]
    ca92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ca96:	6039      	str	r1, [r7, #0]
    ca98:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ca9c:	4627      	mov	r7, r4
    ca9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    caa2:	3601      	adds	r6, #1
    caa4:	615d      	str	r5, [r3, #20]
    caa6:	613e      	str	r6, [r7, #16]
    caa8:	e7de      	b.n	ca68 <__multadd+0x4c>
    caaa:	4b03      	ldr	r3, [pc, #12]	; (cab8 <__multadd+0x9c>)
    caac:	4803      	ldr	r0, [pc, #12]	; (cabc <__multadd+0xa0>)
    caae:	4622      	mov	r2, r4
    cab0:	21ba      	movs	r1, #186	; 0xba
    cab2:	f004 f875 	bl	10ba0 <__assert_func>
    cab6:	bf00      	nop
    cab8:	200009d0 	.word	0x200009d0
    cabc:	20000b48 	.word	0x20000b48

0000cac0 <__s2b>:
    cac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cac4:	4617      	mov	r7, r2
    cac6:	4a27      	ldr	r2, [pc, #156]	; (cb64 <__s2b+0xa4>)
    cac8:	461e      	mov	r6, r3
    caca:	3308      	adds	r3, #8
    cacc:	460c      	mov	r4, r1
    cace:	2e09      	cmp	r6, #9
    cad0:	fb82 1203 	smull	r1, r2, r2, r3
    cad4:	ea4f 73e3 	mov.w	r3, r3, asr #31
    cad8:	4605      	mov	r5, r0
    cada:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    cade:	dd39      	ble.n	cb54 <__s2b+0x94>
    cae0:	f04f 0c01 	mov.w	ip, #1
    cae4:	2100      	movs	r1, #0
    cae6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    caea:	4563      	cmp	r3, ip
    caec:	f101 0101 	add.w	r1, r1, #1
    caf0:	dcf9      	bgt.n	cae6 <__s2b+0x26>
    caf2:	4628      	mov	r0, r5
    caf4:	f7ff ff62 	bl	c9bc <_Balloc>
    caf8:	4601      	mov	r1, r0
    cafa:	b368      	cbz	r0, cb58 <__s2b+0x98>
    cafc:	9b08      	ldr	r3, [sp, #32]
    cafe:	6143      	str	r3, [r0, #20]
    cb00:	2f09      	cmp	r7, #9
    cb02:	f04f 0301 	mov.w	r3, #1
    cb06:	6103      	str	r3, [r0, #16]
    cb08:	dc12      	bgt.n	cb30 <__s2b+0x70>
    cb0a:	340a      	adds	r4, #10
    cb0c:	2709      	movs	r7, #9
    cb0e:	42be      	cmp	r6, r7
    cb10:	dd0b      	ble.n	cb2a <__s2b+0x6a>
    cb12:	1bf2      	subs	r2, r6, r7
    cb14:	18a6      	adds	r6, r4, r2
    cb16:	f814 3b01 	ldrb.w	r3, [r4], #1
    cb1a:	220a      	movs	r2, #10
    cb1c:	3b30      	subs	r3, #48	; 0x30
    cb1e:	4628      	mov	r0, r5
    cb20:	f7ff ff7c 	bl	ca1c <__multadd>
    cb24:	42a6      	cmp	r6, r4
    cb26:	4601      	mov	r1, r0
    cb28:	d1f5      	bne.n	cb16 <__s2b+0x56>
    cb2a:	4608      	mov	r0, r1
    cb2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb30:	f104 0909 	add.w	r9, r4, #9
    cb34:	46c8      	mov	r8, r9
    cb36:	443c      	add	r4, r7
    cb38:	f818 3b01 	ldrb.w	r3, [r8], #1
    cb3c:	220a      	movs	r2, #10
    cb3e:	3b30      	subs	r3, #48	; 0x30
    cb40:	4628      	mov	r0, r5
    cb42:	f7ff ff6b 	bl	ca1c <__multadd>
    cb46:	45a0      	cmp	r8, r4
    cb48:	4601      	mov	r1, r0
    cb4a:	d1f5      	bne.n	cb38 <__s2b+0x78>
    cb4c:	f1a7 0408 	sub.w	r4, r7, #8
    cb50:	444c      	add	r4, r9
    cb52:	e7dc      	b.n	cb0e <__s2b+0x4e>
    cb54:	2100      	movs	r1, #0
    cb56:	e7cc      	b.n	caf2 <__s2b+0x32>
    cb58:	460a      	mov	r2, r1
    cb5a:	4b03      	ldr	r3, [pc, #12]	; (cb68 <__s2b+0xa8>)
    cb5c:	4803      	ldr	r0, [pc, #12]	; (cb6c <__s2b+0xac>)
    cb5e:	21d3      	movs	r1, #211	; 0xd3
    cb60:	f004 f81e 	bl	10ba0 <__assert_func>
    cb64:	38e38e39 	.word	0x38e38e39
    cb68:	200009d0 	.word	0x200009d0
    cb6c:	20000b48 	.word	0x20000b48

0000cb70 <__hi0bits>:
    cb70:	0c03      	lsrs	r3, r0, #16
    cb72:	041b      	lsls	r3, r3, #16
    cb74:	b9d3      	cbnz	r3, cbac <__hi0bits+0x3c>
    cb76:	0400      	lsls	r0, r0, #16
    cb78:	2310      	movs	r3, #16
    cb7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cb7e:	bf04      	itt	eq
    cb80:	0200      	lsleq	r0, r0, #8
    cb82:	3308      	addeq	r3, #8
    cb84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    cb88:	bf04      	itt	eq
    cb8a:	0100      	lsleq	r0, r0, #4
    cb8c:	3304      	addeq	r3, #4
    cb8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    cb92:	bf04      	itt	eq
    cb94:	0080      	lsleq	r0, r0, #2
    cb96:	3302      	addeq	r3, #2
    cb98:	2800      	cmp	r0, #0
    cb9a:	db05      	blt.n	cba8 <__hi0bits+0x38>
    cb9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    cba0:	f103 0301 	add.w	r3, r3, #1
    cba4:	bf08      	it	eq
    cba6:	2320      	moveq	r3, #32
    cba8:	4618      	mov	r0, r3
    cbaa:	4770      	bx	lr
    cbac:	2300      	movs	r3, #0
    cbae:	e7e4      	b.n	cb7a <__hi0bits+0xa>

0000cbb0 <__lo0bits>:
    cbb0:	6803      	ldr	r3, [r0, #0]
    cbb2:	f013 0207 	ands.w	r2, r3, #7
    cbb6:	d008      	beq.n	cbca <__lo0bits+0x1a>
    cbb8:	07d9      	lsls	r1, r3, #31
    cbba:	d41f      	bmi.n	cbfc <__lo0bits+0x4c>
    cbbc:	079a      	lsls	r2, r3, #30
    cbbe:	d522      	bpl.n	cc06 <__lo0bits+0x56>
    cbc0:	085b      	lsrs	r3, r3, #1
    cbc2:	6003      	str	r3, [r0, #0]
    cbc4:	2201      	movs	r2, #1
    cbc6:	4610      	mov	r0, r2
    cbc8:	4770      	bx	lr
    cbca:	b299      	uxth	r1, r3
    cbcc:	b909      	cbnz	r1, cbd2 <__lo0bits+0x22>
    cbce:	0c1b      	lsrs	r3, r3, #16
    cbd0:	2210      	movs	r2, #16
    cbd2:	b2d9      	uxtb	r1, r3
    cbd4:	b909      	cbnz	r1, cbda <__lo0bits+0x2a>
    cbd6:	3208      	adds	r2, #8
    cbd8:	0a1b      	lsrs	r3, r3, #8
    cbda:	0719      	lsls	r1, r3, #28
    cbdc:	bf04      	itt	eq
    cbde:	091b      	lsreq	r3, r3, #4
    cbe0:	3204      	addeq	r2, #4
    cbe2:	0799      	lsls	r1, r3, #30
    cbe4:	bf04      	itt	eq
    cbe6:	089b      	lsreq	r3, r3, #2
    cbe8:	3202      	addeq	r2, #2
    cbea:	07d9      	lsls	r1, r3, #31
    cbec:	d403      	bmi.n	cbf6 <__lo0bits+0x46>
    cbee:	085b      	lsrs	r3, r3, #1
    cbf0:	f102 0201 	add.w	r2, r2, #1
    cbf4:	d005      	beq.n	cc02 <__lo0bits+0x52>
    cbf6:	6003      	str	r3, [r0, #0]
    cbf8:	4610      	mov	r0, r2
    cbfa:	4770      	bx	lr
    cbfc:	2200      	movs	r2, #0
    cbfe:	4610      	mov	r0, r2
    cc00:	4770      	bx	lr
    cc02:	2220      	movs	r2, #32
    cc04:	e7df      	b.n	cbc6 <__lo0bits+0x16>
    cc06:	089b      	lsrs	r3, r3, #2
    cc08:	2202      	movs	r2, #2
    cc0a:	6003      	str	r3, [r0, #0]
    cc0c:	4610      	mov	r0, r2
    cc0e:	4770      	bx	lr

0000cc10 <__i2b>:
    cc10:	b538      	push	{r3, r4, r5, lr}
    cc12:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cc14:	4604      	mov	r4, r0
    cc16:	460d      	mov	r5, r1
    cc18:	b14b      	cbz	r3, cc2e <__i2b+0x1e>
    cc1a:	6858      	ldr	r0, [r3, #4]
    cc1c:	b1b0      	cbz	r0, cc4c <__i2b+0x3c>
    cc1e:	6802      	ldr	r2, [r0, #0]
    cc20:	605a      	str	r2, [r3, #4]
    cc22:	2200      	movs	r2, #0
    cc24:	2301      	movs	r3, #1
    cc26:	e9c0 3504 	strd	r3, r5, [r0, #16]
    cc2a:	60c2      	str	r2, [r0, #12]
    cc2c:	bd38      	pop	{r3, r4, r5, pc}
    cc2e:	2221      	movs	r2, #33	; 0x21
    cc30:	2104      	movs	r1, #4
    cc32:	f003 ffd5 	bl	10be0 <_calloc_r>
    cc36:	4603      	mov	r3, r0
    cc38:	6460      	str	r0, [r4, #68]	; 0x44
    cc3a:	2800      	cmp	r0, #0
    cc3c:	d1ed      	bne.n	cc1a <__i2b+0xa>
    cc3e:	4b09      	ldr	r3, [pc, #36]	; (cc64 <__i2b+0x54>)
    cc40:	4809      	ldr	r0, [pc, #36]	; (cc68 <__i2b+0x58>)
    cc42:	2200      	movs	r2, #0
    cc44:	f240 1145 	movw	r1, #325	; 0x145
    cc48:	f003 ffaa 	bl	10ba0 <__assert_func>
    cc4c:	221c      	movs	r2, #28
    cc4e:	2101      	movs	r1, #1
    cc50:	4620      	mov	r0, r4
    cc52:	f003 ffc5 	bl	10be0 <_calloc_r>
    cc56:	2800      	cmp	r0, #0
    cc58:	d0f1      	beq.n	cc3e <__i2b+0x2e>
    cc5a:	2201      	movs	r2, #1
    cc5c:	2302      	movs	r3, #2
    cc5e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    cc62:	e7de      	b.n	cc22 <__i2b+0x12>
    cc64:	200009d0 	.word	0x200009d0
    cc68:	20000b48 	.word	0x20000b48

0000cc6c <__multiply>:
    cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc70:	690e      	ldr	r6, [r1, #16]
    cc72:	6915      	ldr	r5, [r2, #16]
    cc74:	42ae      	cmp	r6, r5
    cc76:	b085      	sub	sp, #20
    cc78:	4688      	mov	r8, r1
    cc7a:	4614      	mov	r4, r2
    cc7c:	db05      	blt.n	cc8a <__multiply+0x1e>
    cc7e:	462a      	mov	r2, r5
    cc80:	4623      	mov	r3, r4
    cc82:	4635      	mov	r5, r6
    cc84:	460c      	mov	r4, r1
    cc86:	4616      	mov	r6, r2
    cc88:	4698      	mov	r8, r3
    cc8a:	68a3      	ldr	r3, [r4, #8]
    cc8c:	6861      	ldr	r1, [r4, #4]
    cc8e:	19af      	adds	r7, r5, r6
    cc90:	42bb      	cmp	r3, r7
    cc92:	bfb8      	it	lt
    cc94:	3101      	addlt	r1, #1
    cc96:	f7ff fe91 	bl	c9bc <_Balloc>
    cc9a:	9001      	str	r0, [sp, #4]
    cc9c:	2800      	cmp	r0, #0
    cc9e:	f000 8087 	beq.w	cdb0 <__multiply+0x144>
    cca2:	9b01      	ldr	r3, [sp, #4]
    cca4:	f103 0914 	add.w	r9, r3, #20
    cca8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    ccac:	45d1      	cmp	r9, sl
    ccae:	d205      	bcs.n	ccbc <__multiply+0x50>
    ccb0:	464b      	mov	r3, r9
    ccb2:	2200      	movs	r2, #0
    ccb4:	f843 2b04 	str.w	r2, [r3], #4
    ccb8:	459a      	cmp	sl, r3
    ccba:	d8fb      	bhi.n	ccb4 <__multiply+0x48>
    ccbc:	f108 0814 	add.w	r8, r8, #20
    ccc0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    ccc4:	f104 0314 	add.w	r3, r4, #20
    ccc8:	45d8      	cmp	r8, fp
    ccca:	461a      	mov	r2, r3
    cccc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    ccd0:	d25f      	bcs.n	cd92 <__multiply+0x126>
    ccd2:	1b2b      	subs	r3, r5, r4
    ccd4:	3b15      	subs	r3, #21
    ccd6:	f023 0303 	bic.w	r3, r3, #3
    ccda:	3304      	adds	r3, #4
    ccdc:	3415      	adds	r4, #21
    ccde:	42a5      	cmp	r5, r4
    cce0:	bf38      	it	cc
    cce2:	2304      	movcc	r3, #4
    cce4:	e9cd a702 	strd	sl, r7, [sp, #8]
    cce8:	46ac      	mov	ip, r5
    ccea:	461f      	mov	r7, r3
    ccec:	4692      	mov	sl, r2
    ccee:	e005      	b.n	ccfc <__multiply+0x90>
    ccf0:	0c09      	lsrs	r1, r1, #16
    ccf2:	d129      	bne.n	cd48 <__multiply+0xdc>
    ccf4:	45c3      	cmp	fp, r8
    ccf6:	f109 0904 	add.w	r9, r9, #4
    ccfa:	d948      	bls.n	cd8e <__multiply+0x122>
    ccfc:	f858 1b04 	ldr.w	r1, [r8], #4
    cd00:	b28d      	uxth	r5, r1
    cd02:	2d00      	cmp	r5, #0
    cd04:	d0f4      	beq.n	ccf0 <__multiply+0x84>
    cd06:	4656      	mov	r6, sl
    cd08:	464c      	mov	r4, r9
    cd0a:	2300      	movs	r3, #0
    cd0c:	f856 1b04 	ldr.w	r1, [r6], #4
    cd10:	6822      	ldr	r2, [r4, #0]
    cd12:	fa1f fe81 	uxth.w	lr, r1
    cd16:	b290      	uxth	r0, r2
    cd18:	0c09      	lsrs	r1, r1, #16
    cd1a:	fb05 000e 	mla	r0, r5, lr, r0
    cd1e:	0c12      	lsrs	r2, r2, #16
    cd20:	4403      	add	r3, r0
    cd22:	fb05 2201 	mla	r2, r5, r1, r2
    cd26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cd2a:	b29b      	uxth	r3, r3
    cd2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cd30:	45b4      	cmp	ip, r6
    cd32:	f844 3b04 	str.w	r3, [r4], #4
    cd36:	ea4f 4312 	mov.w	r3, r2, lsr #16
    cd3a:	d8e7      	bhi.n	cd0c <__multiply+0xa0>
    cd3c:	f849 3007 	str.w	r3, [r9, r7]
    cd40:	f858 1c04 	ldr.w	r1, [r8, #-4]
    cd44:	0c09      	lsrs	r1, r1, #16
    cd46:	d0d5      	beq.n	ccf4 <__multiply+0x88>
    cd48:	f8d9 3000 	ldr.w	r3, [r9]
    cd4c:	4650      	mov	r0, sl
    cd4e:	461a      	mov	r2, r3
    cd50:	464c      	mov	r4, r9
    cd52:	2600      	movs	r6, #0
    cd54:	8805      	ldrh	r5, [r0, #0]
    cd56:	0c12      	lsrs	r2, r2, #16
    cd58:	fb01 2205 	mla	r2, r1, r5, r2
    cd5c:	4416      	add	r6, r2
    cd5e:	b29b      	uxth	r3, r3
    cd60:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    cd64:	f844 3b04 	str.w	r3, [r4], #4
    cd68:	f850 5b04 	ldr.w	r5, [r0], #4
    cd6c:	6822      	ldr	r2, [r4, #0]
    cd6e:	0c2d      	lsrs	r5, r5, #16
    cd70:	b293      	uxth	r3, r2
    cd72:	fb01 3305 	mla	r3, r1, r5, r3
    cd76:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    cd7a:	4584      	cmp	ip, r0
    cd7c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    cd80:	d8e8      	bhi.n	cd54 <__multiply+0xe8>
    cd82:	45c3      	cmp	fp, r8
    cd84:	f849 3007 	str.w	r3, [r9, r7]
    cd88:	f109 0904 	add.w	r9, r9, #4
    cd8c:	d8b6      	bhi.n	ccfc <__multiply+0x90>
    cd8e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    cd92:	2f00      	cmp	r7, #0
    cd94:	dc02      	bgt.n	cd9c <__multiply+0x130>
    cd96:	e005      	b.n	cda4 <__multiply+0x138>
    cd98:	3f01      	subs	r7, #1
    cd9a:	d003      	beq.n	cda4 <__multiply+0x138>
    cd9c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    cda0:	2b00      	cmp	r3, #0
    cda2:	d0f9      	beq.n	cd98 <__multiply+0x12c>
    cda4:	9b01      	ldr	r3, [sp, #4]
    cda6:	4618      	mov	r0, r3
    cda8:	611f      	str	r7, [r3, #16]
    cdaa:	b005      	add	sp, #20
    cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdb0:	4b03      	ldr	r3, [pc, #12]	; (cdc0 <__multiply+0x154>)
    cdb2:	4804      	ldr	r0, [pc, #16]	; (cdc4 <__multiply+0x158>)
    cdb4:	9a01      	ldr	r2, [sp, #4]
    cdb6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    cdba:	f003 fef1 	bl	10ba0 <__assert_func>
    cdbe:	bf00      	nop
    cdc0:	200009d0 	.word	0x200009d0
    cdc4:	20000b48 	.word	0x20000b48

0000cdc8 <__pow5mult>:
    cdc8:	f012 0303 	ands.w	r3, r2, #3
    cdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdd0:	4614      	mov	r4, r2
    cdd2:	4606      	mov	r6, r0
    cdd4:	d132      	bne.n	ce3c <__pow5mult+0x74>
    cdd6:	460d      	mov	r5, r1
    cdd8:	10a4      	asrs	r4, r4, #2
    cdda:	d020      	beq.n	ce1e <__pow5mult+0x56>
    cddc:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    cde0:	f1b8 0f00 	cmp.w	r8, #0
    cde4:	d033      	beq.n	ce4e <__pow5mult+0x86>
    cde6:	07e3      	lsls	r3, r4, #31
    cde8:	f04f 0700 	mov.w	r7, #0
    cdec:	d407      	bmi.n	cdfe <__pow5mult+0x36>
    cdee:	1064      	asrs	r4, r4, #1
    cdf0:	d015      	beq.n	ce1e <__pow5mult+0x56>
    cdf2:	f8d8 0000 	ldr.w	r0, [r8]
    cdf6:	b1a8      	cbz	r0, ce24 <__pow5mult+0x5c>
    cdf8:	4680      	mov	r8, r0
    cdfa:	07e3      	lsls	r3, r4, #31
    cdfc:	d5f7      	bpl.n	cdee <__pow5mult+0x26>
    cdfe:	4642      	mov	r2, r8
    ce00:	4629      	mov	r1, r5
    ce02:	4630      	mov	r0, r6
    ce04:	f7ff ff32 	bl	cc6c <__multiply>
    ce08:	b1b5      	cbz	r5, ce38 <__pow5mult+0x70>
    ce0a:	6869      	ldr	r1, [r5, #4]
    ce0c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    ce0e:	1064      	asrs	r4, r4, #1
    ce10:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    ce14:	602a      	str	r2, [r5, #0]
    ce16:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    ce1a:	4605      	mov	r5, r0
    ce1c:	d1e9      	bne.n	cdf2 <__pow5mult+0x2a>
    ce1e:	4628      	mov	r0, r5
    ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce24:	4642      	mov	r2, r8
    ce26:	4641      	mov	r1, r8
    ce28:	4630      	mov	r0, r6
    ce2a:	f7ff ff1f 	bl	cc6c <__multiply>
    ce2e:	f8c8 0000 	str.w	r0, [r8]
    ce32:	6007      	str	r7, [r0, #0]
    ce34:	4680      	mov	r8, r0
    ce36:	e7e0      	b.n	cdfa <__pow5mult+0x32>
    ce38:	4605      	mov	r5, r0
    ce3a:	e7d8      	b.n	cdee <__pow5mult+0x26>
    ce3c:	3b01      	subs	r3, #1
    ce3e:	4a0f      	ldr	r2, [pc, #60]	; (ce7c <__pow5mult+0xb4>)
    ce40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ce44:	2300      	movs	r3, #0
    ce46:	f7ff fde9 	bl	ca1c <__multadd>
    ce4a:	4605      	mov	r5, r0
    ce4c:	e7c4      	b.n	cdd8 <__pow5mult+0x10>
    ce4e:	2101      	movs	r1, #1
    ce50:	4630      	mov	r0, r6
    ce52:	f7ff fdb3 	bl	c9bc <_Balloc>
    ce56:	4680      	mov	r8, r0
    ce58:	b140      	cbz	r0, ce6c <__pow5mult+0xa4>
    ce5a:	2301      	movs	r3, #1
    ce5c:	f240 2271 	movw	r2, #625	; 0x271
    ce60:	e9c0 3204 	strd	r3, r2, [r0, #16]
    ce64:	2300      	movs	r3, #0
    ce66:	6430      	str	r0, [r6, #64]	; 0x40
    ce68:	6003      	str	r3, [r0, #0]
    ce6a:	e7bc      	b.n	cde6 <__pow5mult+0x1e>
    ce6c:	4b04      	ldr	r3, [pc, #16]	; (ce80 <__pow5mult+0xb8>)
    ce6e:	4805      	ldr	r0, [pc, #20]	; (ce84 <__pow5mult+0xbc>)
    ce70:	4642      	mov	r2, r8
    ce72:	f240 1145 	movw	r1, #325	; 0x145
    ce76:	f003 fe93 	bl	10ba0 <__assert_func>
    ce7a:	bf00      	nop
    ce7c:	20007b9c 	.word	0x20007b9c
    ce80:	200009d0 	.word	0x200009d0
    ce84:	20000b48 	.word	0x20000b48

0000ce88 <__lshift>:
    ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce8c:	460d      	mov	r5, r1
    ce8e:	4614      	mov	r4, r2
    ce90:	692f      	ldr	r7, [r5, #16]
    ce92:	68ab      	ldr	r3, [r5, #8]
    ce94:	6849      	ldr	r1, [r1, #4]
    ce96:	eb07 1762 	add.w	r7, r7, r2, asr #5
    ce9a:	1c7e      	adds	r6, r7, #1
    ce9c:	429e      	cmp	r6, r3
    ce9e:	4680      	mov	r8, r0
    cea0:	ea4f 1962 	mov.w	r9, r2, asr #5
    cea4:	dd04      	ble.n	ceb0 <__lshift+0x28>
    cea6:	005b      	lsls	r3, r3, #1
    cea8:	429e      	cmp	r6, r3
    ceaa:	f101 0101 	add.w	r1, r1, #1
    ceae:	dcfa      	bgt.n	cea6 <__lshift+0x1e>
    ceb0:	4640      	mov	r0, r8
    ceb2:	f7ff fd83 	bl	c9bc <_Balloc>
    ceb6:	4684      	mov	ip, r0
    ceb8:	2800      	cmp	r0, #0
    ceba:	d052      	beq.n	cf62 <__lshift+0xda>
    cebc:	f1b9 0f00 	cmp.w	r9, #0
    cec0:	f100 0214 	add.w	r2, r0, #20
    cec4:	dd0e      	ble.n	cee4 <__lshift+0x5c>
    cec6:	f109 0105 	add.w	r1, r9, #5
    ceca:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    cece:	4613      	mov	r3, r2
    ced0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ced4:	2000      	movs	r0, #0
    ced6:	f843 0b04 	str.w	r0, [r3], #4
    ceda:	428b      	cmp	r3, r1
    cedc:	d1fb      	bne.n	ced6 <__lshift+0x4e>
    cede:	f1ae 0314 	sub.w	r3, lr, #20
    cee2:	441a      	add	r2, r3
    cee4:	6929      	ldr	r1, [r5, #16]
    cee6:	f105 0314 	add.w	r3, r5, #20
    ceea:	f014 0e1f 	ands.w	lr, r4, #31
    ceee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cef2:	d02e      	beq.n	cf52 <__lshift+0xca>
    cef4:	f1ce 0920 	rsb	r9, lr, #32
    cef8:	4610      	mov	r0, r2
    cefa:	f04f 0a00 	mov.w	sl, #0
    cefe:	681c      	ldr	r4, [r3, #0]
    cf00:	fa04 f40e 	lsl.w	r4, r4, lr
    cf04:	ea44 040a 	orr.w	r4, r4, sl
    cf08:	f840 4b04 	str.w	r4, [r0], #4
    cf0c:	f853 4b04 	ldr.w	r4, [r3], #4
    cf10:	4299      	cmp	r1, r3
    cf12:	fa24 fa09 	lsr.w	sl, r4, r9
    cf16:	d8f2      	bhi.n	cefe <__lshift+0x76>
    cf18:	1b4b      	subs	r3, r1, r5
    cf1a:	3b15      	subs	r3, #21
    cf1c:	f023 0303 	bic.w	r3, r3, #3
    cf20:	3304      	adds	r3, #4
    cf22:	f105 0015 	add.w	r0, r5, #21
    cf26:	4281      	cmp	r1, r0
    cf28:	bf38      	it	cc
    cf2a:	2304      	movcc	r3, #4
    cf2c:	f1ba 0f00 	cmp.w	sl, #0
    cf30:	bf18      	it	ne
    cf32:	4637      	movne	r7, r6
    cf34:	f842 a003 	str.w	sl, [r2, r3]
    cf38:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    cf3c:	686a      	ldr	r2, [r5, #4]
    cf3e:	f8cc 7010 	str.w	r7, [ip, #16]
    cf42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    cf46:	6029      	str	r1, [r5, #0]
    cf48:	4660      	mov	r0, ip
    cf4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    cf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf52:	3a04      	subs	r2, #4
    cf54:	f853 0b04 	ldr.w	r0, [r3], #4
    cf58:	f842 0f04 	str.w	r0, [r2, #4]!
    cf5c:	4299      	cmp	r1, r3
    cf5e:	d8f9      	bhi.n	cf54 <__lshift+0xcc>
    cf60:	e7ea      	b.n	cf38 <__lshift+0xb0>
    cf62:	4b03      	ldr	r3, [pc, #12]	; (cf70 <__lshift+0xe8>)
    cf64:	4803      	ldr	r0, [pc, #12]	; (cf74 <__lshift+0xec>)
    cf66:	4662      	mov	r2, ip
    cf68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    cf6c:	f003 fe18 	bl	10ba0 <__assert_func>
    cf70:	200009d0 	.word	0x200009d0
    cf74:	20000b48 	.word	0x20000b48

0000cf78 <__mcmp>:
    cf78:	690b      	ldr	r3, [r1, #16]
    cf7a:	4684      	mov	ip, r0
    cf7c:	6900      	ldr	r0, [r0, #16]
    cf7e:	1ac0      	subs	r0, r0, r3
    cf80:	d116      	bne.n	cfb0 <__mcmp+0x38>
    cf82:	f10c 0c14 	add.w	ip, ip, #20
    cf86:	3114      	adds	r1, #20
    cf88:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    cf8c:	b410      	push	{r4}
    cf8e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    cf92:	e001      	b.n	cf98 <__mcmp+0x20>
    cf94:	4594      	cmp	ip, r2
    cf96:	d208      	bcs.n	cfaa <__mcmp+0x32>
    cf98:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cf9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cfa0:	428c      	cmp	r4, r1
    cfa2:	d0f7      	beq.n	cf94 <__mcmp+0x1c>
    cfa4:	d205      	bcs.n	cfb2 <__mcmp+0x3a>
    cfa6:	f04f 30ff 	mov.w	r0, #4294967295
    cfaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    cfae:	4770      	bx	lr
    cfb0:	4770      	bx	lr
    cfb2:	2001      	movs	r0, #1
    cfb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop

0000cfbc <__mdiff>:
    cfbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfc0:	690f      	ldr	r7, [r1, #16]
    cfc2:	6913      	ldr	r3, [r2, #16]
    cfc4:	1aff      	subs	r7, r7, r3
    cfc6:	2f00      	cmp	r7, #0
    cfc8:	460e      	mov	r6, r1
    cfca:	4690      	mov	r8, r2
    cfcc:	d17f      	bne.n	d0ce <__mdiff+0x112>
    cfce:	f101 0514 	add.w	r5, r1, #20
    cfd2:	3214      	adds	r2, #20
    cfd4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    cfd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    cfdc:	e001      	b.n	cfe2 <__mdiff+0x26>
    cfde:	429d      	cmp	r5, r3
    cfe0:	d278      	bcs.n	d0d4 <__mdiff+0x118>
    cfe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cfe6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cfea:	42a1      	cmp	r1, r4
    cfec:	d0f7      	beq.n	cfde <__mdiff+0x22>
    cfee:	d369      	bcc.n	d0c4 <__mdiff+0x108>
    cff0:	6871      	ldr	r1, [r6, #4]
    cff2:	f7ff fce3 	bl	c9bc <_Balloc>
    cff6:	4681      	mov	r9, r0
    cff8:	2800      	cmp	r0, #0
    cffa:	d077      	beq.n	d0ec <__mdiff+0x130>
    cffc:	6935      	ldr	r5, [r6, #16]
    cffe:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d002:	60c7      	str	r7, [r0, #12]
    d004:	f108 0e14 	add.w	lr, r8, #20
    d008:	f106 0014 	add.w	r0, r6, #20
    d00c:	f109 0a14 	add.w	sl, r9, #20
    d010:	f106 0110 	add.w	r1, r6, #16
    d014:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d018:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d01c:	4656      	mov	r6, sl
    d01e:	f04f 0c00 	mov.w	ip, #0
    d022:	f85e 4b04 	ldr.w	r4, [lr], #4
    d026:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d02a:	b2a3      	uxth	r3, r4
    d02c:	fa1c fc8b 	uxtah	ip, ip, fp
    d030:	ebac 0303 	sub.w	r3, ip, r3
    d034:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d038:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d03c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d040:	b29b      	uxth	r3, r3
    d042:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d046:	4572      	cmp	r2, lr
    d048:	f846 3b04 	str.w	r3, [r6], #4
    d04c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d050:	d8e7      	bhi.n	d022 <__mdiff+0x66>
    d052:	eba2 0108 	sub.w	r1, r2, r8
    d056:	3915      	subs	r1, #21
    d058:	f108 0815 	add.w	r8, r8, #21
    d05c:	4542      	cmp	r2, r8
    d05e:	f021 0403 	bic.w	r4, r1, #3
    d062:	f104 0404 	add.w	r4, r4, #4
    d066:	bf38      	it	cc
    d068:	2404      	movcc	r4, #4
    d06a:	4420      	add	r0, r4
    d06c:	f021 0203 	bic.w	r2, r1, #3
    d070:	bf38      	it	cc
    d072:	2200      	movcc	r2, #0
    d074:	4287      	cmp	r7, r0
    d076:	4452      	add	r2, sl
    d078:	4454      	add	r4, sl
    d07a:	d918      	bls.n	d0ae <__mdiff+0xf2>
    d07c:	4626      	mov	r6, r4
    d07e:	4601      	mov	r1, r0
    d080:	f851 3b04 	ldr.w	r3, [r1], #4
    d084:	fa1c fc83 	uxtah	ip, ip, r3
    d088:	ea4f 422c 	mov.w	r2, ip, asr #16
    d08c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d090:	fa1f fc8c 	uxth.w	ip, ip
    d094:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    d098:	428f      	cmp	r7, r1
    d09a:	f846 3b04 	str.w	r3, [r6], #4
    d09e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    d0a2:	d8ed      	bhi.n	d080 <__mdiff+0xc4>
    d0a4:	3f01      	subs	r7, #1
    d0a6:	1a3f      	subs	r7, r7, r0
    d0a8:	f027 0703 	bic.w	r7, r7, #3
    d0ac:	19e2      	adds	r2, r4, r7
    d0ae:	b923      	cbnz	r3, d0ba <__mdiff+0xfe>
    d0b0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    d0b4:	3d01      	subs	r5, #1
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d0fa      	beq.n	d0b0 <__mdiff+0xf4>
    d0ba:	f8c9 5010 	str.w	r5, [r9, #16]
    d0be:	4648      	mov	r0, r9
    d0c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0c4:	4633      	mov	r3, r6
    d0c6:	2701      	movs	r7, #1
    d0c8:	4646      	mov	r6, r8
    d0ca:	4698      	mov	r8, r3
    d0cc:	e790      	b.n	cff0 <__mdiff+0x34>
    d0ce:	dbf9      	blt.n	d0c4 <__mdiff+0x108>
    d0d0:	2700      	movs	r7, #0
    d0d2:	e78d      	b.n	cff0 <__mdiff+0x34>
    d0d4:	2100      	movs	r1, #0
    d0d6:	f7ff fc71 	bl	c9bc <_Balloc>
    d0da:	4681      	mov	r9, r0
    d0dc:	b168      	cbz	r0, d0fa <__mdiff+0x13e>
    d0de:	2201      	movs	r2, #1
    d0e0:	2300      	movs	r3, #0
    d0e2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    d0e6:	4648      	mov	r0, r9
    d0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0ec:	4b06      	ldr	r3, [pc, #24]	; (d108 <__mdiff+0x14c>)
    d0ee:	4807      	ldr	r0, [pc, #28]	; (d10c <__mdiff+0x150>)
    d0f0:	464a      	mov	r2, r9
    d0f2:	f240 2145 	movw	r1, #581	; 0x245
    d0f6:	f003 fd53 	bl	10ba0 <__assert_func>
    d0fa:	4b03      	ldr	r3, [pc, #12]	; (d108 <__mdiff+0x14c>)
    d0fc:	4803      	ldr	r0, [pc, #12]	; (d10c <__mdiff+0x150>)
    d0fe:	464a      	mov	r2, r9
    d100:	f240 2137 	movw	r1, #567	; 0x237
    d104:	f003 fd4c 	bl	10ba0 <__assert_func>
    d108:	200009d0 	.word	0x200009d0
    d10c:	20000b48 	.word	0x20000b48

0000d110 <__ulp>:
    d110:	b082      	sub	sp, #8
    d112:	ed8d 0b00 	vstr	d0, [sp]
    d116:	4b16      	ldr	r3, [pc, #88]	; (d170 <__ulp+0x60>)
    d118:	9a01      	ldr	r2, [sp, #4]
    d11a:	4013      	ands	r3, r2
    d11c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d120:	2b00      	cmp	r3, #0
    d122:	dd06      	ble.n	d132 <__ulp+0x22>
    d124:	2200      	movs	r2, #0
    d126:	4619      	mov	r1, r3
    d128:	4610      	mov	r0, r2
    d12a:	ec41 0b10 	vmov	d0, r0, r1
    d12e:	b002      	add	sp, #8
    d130:	4770      	bx	lr
    d132:	425b      	negs	r3, r3
    d134:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    d138:	ea4f 5223 	mov.w	r2, r3, asr #20
    d13c:	da09      	bge.n	d152 <__ulp+0x42>
    d13e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    d142:	4113      	asrs	r3, r2
    d144:	2200      	movs	r2, #0
    d146:	4619      	mov	r1, r3
    d148:	4610      	mov	r0, r2
    d14a:	ec41 0b10 	vmov	d0, r0, r1
    d14e:	b002      	add	sp, #8
    d150:	4770      	bx	lr
    d152:	f1a2 0314 	sub.w	r3, r2, #20
    d156:	2b1e      	cmp	r3, #30
    d158:	bfda      	itte	le
    d15a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    d15e:	40da      	lsrle	r2, r3
    d160:	2201      	movgt	r2, #1
    d162:	2300      	movs	r3, #0
    d164:	4619      	mov	r1, r3
    d166:	4610      	mov	r0, r2
    d168:	ec41 0b10 	vmov	d0, r0, r1
    d16c:	b002      	add	sp, #8
    d16e:	4770      	bx	lr
    d170:	7ff00000 	.word	0x7ff00000

0000d174 <__b2d>:
    d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d176:	6904      	ldr	r4, [r0, #16]
    d178:	f100 0614 	add.w	r6, r0, #20
    d17c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    d180:	1f27      	subs	r7, r4, #4
    d182:	f854 5c04 	ldr.w	r5, [r4, #-4]
    d186:	4628      	mov	r0, r5
    d188:	f7ff fcf2 	bl	cb70 <__hi0bits>
    d18c:	f1c0 0320 	rsb	r3, r0, #32
    d190:	280a      	cmp	r0, #10
    d192:	600b      	str	r3, [r1, #0]
    d194:	dd1b      	ble.n	d1ce <__b2d+0x5a>
    d196:	42be      	cmp	r6, r7
    d198:	d20b      	bcs.n	d1b2 <__b2d+0x3e>
    d19a:	380b      	subs	r0, #11
    d19c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d1a0:	d12e      	bne.n	d200 <__b2d+0x8c>
    d1a2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    d1a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d1aa:	460a      	mov	r2, r1
    d1ac:	ec43 2b10 	vmov	d0, r2, r3
    d1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1b2:	f1b0 010b 	subs.w	r1, r0, #11
    d1b6:	d0f4      	beq.n	d1a2 <__b2d+0x2e>
    d1b8:	fa05 f101 	lsl.w	r1, r5, r1
    d1bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d1c0:	2100      	movs	r1, #0
    d1c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d1c6:	460a      	mov	r2, r1
    d1c8:	ec43 2b10 	vmov	d0, r2, r3
    d1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1ce:	f1c0 0c0b 	rsb	ip, r0, #11
    d1d2:	fa25 f10c 	lsr.w	r1, r5, ip
    d1d6:	42be      	cmp	r6, r7
    d1d8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    d1dc:	bf38      	it	cc
    d1de:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    d1e2:	f100 0015 	add.w	r0, r0, #21
    d1e6:	bf34      	ite	cc
    d1e8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    d1ec:	2100      	movcs	r1, #0
    d1ee:	fa05 f000 	lsl.w	r0, r5, r0
    d1f2:	4301      	orrs	r1, r0
    d1f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d1f8:	460a      	mov	r2, r1
    d1fa:	ec43 2b10 	vmov	d0, r2, r3
    d1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d200:	f1c0 0c20 	rsb	ip, r0, #32
    d204:	4085      	lsls	r5, r0
    d206:	fa21 f30c 	lsr.w	r3, r1, ip
    d20a:	ea45 0703 	orr.w	r7, r5, r3
    d20e:	f1a4 0508 	sub.w	r5, r4, #8
    d212:	42ae      	cmp	r6, r5
    d214:	fa01 f100 	lsl.w	r1, r1, r0
    d218:	bf3c      	itt	cc
    d21a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    d21e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    d222:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    d226:	bf38      	it	cc
    d228:	4301      	orrcc	r1, r0
    d22a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d22e:	460a      	mov	r2, r1
    d230:	ec43 2b10 	vmov	d0, r2, r3
    d234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d236:	bf00      	nop

0000d238 <__d2b>:
    d238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d23c:	4688      	mov	r8, r1
    d23e:	b083      	sub	sp, #12
    d240:	2101      	movs	r1, #1
    d242:	ec57 6b10 	vmov	r6, r7, d0
    d246:	4615      	mov	r5, r2
    d248:	f7ff fbb8 	bl	c9bc <_Balloc>
    d24c:	4604      	mov	r4, r0
    d24e:	2800      	cmp	r0, #0
    d250:	d051      	beq.n	d2f6 <__d2b+0xbe>
    d252:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d256:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d25a:	f1b9 0f00 	cmp.w	r9, #0
    d25e:	d001      	beq.n	d264 <__d2b+0x2c>
    d260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d264:	2e00      	cmp	r6, #0
    d266:	9301      	str	r3, [sp, #4]
    d268:	d118      	bne.n	d29c <__d2b+0x64>
    d26a:	a801      	add	r0, sp, #4
    d26c:	f7ff fca0 	bl	cbb0 <__lo0bits>
    d270:	9a01      	ldr	r2, [sp, #4]
    d272:	6162      	str	r2, [r4, #20]
    d274:	2201      	movs	r2, #1
    d276:	f100 0320 	add.w	r3, r0, #32
    d27a:	6122      	str	r2, [r4, #16]
    d27c:	f1b9 0f00 	cmp.w	r9, #0
    d280:	d025      	beq.n	d2ce <__d2b+0x96>
    d282:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d286:	eb09 0203 	add.w	r2, r9, r3
    d28a:	4620      	mov	r0, r4
    d28c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d290:	f8c8 2000 	str.w	r2, [r8]
    d294:	602b      	str	r3, [r5, #0]
    d296:	b003      	add	sp, #12
    d298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d29c:	4668      	mov	r0, sp
    d29e:	9600      	str	r6, [sp, #0]
    d2a0:	f7ff fc86 	bl	cbb0 <__lo0bits>
    d2a4:	4603      	mov	r3, r0
    d2a6:	b310      	cbz	r0, d2ee <__d2b+0xb6>
    d2a8:	e9dd 0200 	ldrd	r0, r2, [sp]
    d2ac:	f1c3 0120 	rsb	r1, r3, #32
    d2b0:	fa02 f101 	lsl.w	r1, r2, r1
    d2b4:	4301      	orrs	r1, r0
    d2b6:	40da      	lsrs	r2, r3
    d2b8:	6161      	str	r1, [r4, #20]
    d2ba:	9201      	str	r2, [sp, #4]
    d2bc:	2a00      	cmp	r2, #0
    d2be:	61a2      	str	r2, [r4, #24]
    d2c0:	bf14      	ite	ne
    d2c2:	2202      	movne	r2, #2
    d2c4:	2201      	moveq	r2, #1
    d2c6:	6122      	str	r2, [r4, #16]
    d2c8:	f1b9 0f00 	cmp.w	r9, #0
    d2cc:	d1d9      	bne.n	d282 <__d2b+0x4a>
    d2ce:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d2d2:	f8c8 3000 	str.w	r3, [r8]
    d2d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d2da:	6918      	ldr	r0, [r3, #16]
    d2dc:	f7ff fc48 	bl	cb70 <__hi0bits>
    d2e0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d2e4:	4620      	mov	r0, r4
    d2e6:	602b      	str	r3, [r5, #0]
    d2e8:	b003      	add	sp, #12
    d2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d2ee:	9a00      	ldr	r2, [sp, #0]
    d2f0:	6162      	str	r2, [r4, #20]
    d2f2:	9a01      	ldr	r2, [sp, #4]
    d2f4:	e7e2      	b.n	d2bc <__d2b+0x84>
    d2f6:	4b03      	ldr	r3, [pc, #12]	; (d304 <__d2b+0xcc>)
    d2f8:	4803      	ldr	r0, [pc, #12]	; (d308 <__d2b+0xd0>)
    d2fa:	4622      	mov	r2, r4
    d2fc:	f240 310f 	movw	r1, #783	; 0x30f
    d300:	f003 fc4e 	bl	10ba0 <__assert_func>
    d304:	200009d0 	.word	0x200009d0
    d308:	20000b48 	.word	0x20000b48

0000d30c <__ratio>:
    d30c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d30e:	b083      	sub	sp, #12
    d310:	460e      	mov	r6, r1
    d312:	4669      	mov	r1, sp
    d314:	4607      	mov	r7, r0
    d316:	f7ff ff2d 	bl	d174 <__b2d>
    d31a:	a901      	add	r1, sp, #4
    d31c:	4630      	mov	r0, r6
    d31e:	ec55 4b10 	vmov	r4, r5, d0
    d322:	eeb0 7b40 	vmov.f64	d7, d0
    d326:	f7ff ff25 	bl	d174 <__b2d>
    d32a:	6933      	ldr	r3, [r6, #16]
    d32c:	693a      	ldr	r2, [r7, #16]
    d32e:	1ad2      	subs	r2, r2, r3
    d330:	e9dd 3100 	ldrd	r3, r1, [sp]
    d334:	1a5b      	subs	r3, r3, r1
    d336:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    d33a:	2b00      	cmp	r3, #0
    d33c:	dd09      	ble.n	d352 <__ratio+0x46>
    d33e:	ee17 2a90 	vmov	r2, s15
    d342:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    d346:	ec45 4b17 	vmov	d7, r4, r5
    d34a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d34e:	b003      	add	sp, #12
    d350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d352:	ee10 2a90 	vmov	r2, s1
    d356:	ec51 0b10 	vmov	r0, r1, d0
    d35a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    d35e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    d362:	ec41 0b10 	vmov	d0, r0, r1
    d366:	ee87 0b00 	vdiv.f64	d0, d7, d0
    d36a:	b003      	add	sp, #12
    d36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d36e:	bf00      	nop

0000d370 <__copybits>:
    d370:	3901      	subs	r1, #1
    d372:	1149      	asrs	r1, r1, #5
    d374:	f101 0c01 	add.w	ip, r1, #1
    d378:	6911      	ldr	r1, [r2, #16]
    d37a:	f102 0314 	add.w	r3, r2, #20
    d37e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d382:	428b      	cmp	r3, r1
    d384:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    d388:	d217      	bcs.n	d3ba <__copybits+0x4a>
    d38a:	b510      	push	{r4, lr}
    d38c:	f1a0 0e04 	sub.w	lr, r0, #4
    d390:	f853 4b04 	ldr.w	r4, [r3], #4
    d394:	f84e 4f04 	str.w	r4, [lr, #4]!
    d398:	4299      	cmp	r1, r3
    d39a:	d8f9      	bhi.n	d390 <__copybits+0x20>
    d39c:	1a8a      	subs	r2, r1, r2
    d39e:	f1a2 0315 	sub.w	r3, r2, #21
    d3a2:	f023 0303 	bic.w	r3, r3, #3
    d3a6:	3304      	adds	r3, #4
    d3a8:	4418      	add	r0, r3
    d3aa:	4584      	cmp	ip, r0
    d3ac:	d904      	bls.n	d3b8 <__copybits+0x48>
    d3ae:	2300      	movs	r3, #0
    d3b0:	f840 3b04 	str.w	r3, [r0], #4
    d3b4:	4584      	cmp	ip, r0
    d3b6:	d8fb      	bhi.n	d3b0 <__copybits+0x40>
    d3b8:	bd10      	pop	{r4, pc}
    d3ba:	4584      	cmp	ip, r0
    d3bc:	d905      	bls.n	d3ca <__copybits+0x5a>
    d3be:	2300      	movs	r3, #0
    d3c0:	f840 3b04 	str.w	r3, [r0], #4
    d3c4:	4584      	cmp	ip, r0
    d3c6:	d8fb      	bhi.n	d3c0 <__copybits+0x50>
    d3c8:	4770      	bx	lr
    d3ca:	4770      	bx	lr

0000d3cc <__any_on>:
    d3cc:	6903      	ldr	r3, [r0, #16]
    d3ce:	114a      	asrs	r2, r1, #5
    d3d0:	4293      	cmp	r3, r2
    d3d2:	f100 0014 	add.w	r0, r0, #20
    d3d6:	da09      	bge.n	d3ec <__any_on+0x20>
    d3d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d3dc:	e002      	b.n	d3e4 <__any_on+0x18>
    d3de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d3e2:	b9c2      	cbnz	r2, d416 <__any_on+0x4a>
    d3e4:	4283      	cmp	r3, r0
    d3e6:	d8fa      	bhi.n	d3de <__any_on+0x12>
    d3e8:	2000      	movs	r0, #0
    d3ea:	4770      	bx	lr
    d3ec:	dd10      	ble.n	d410 <__any_on+0x44>
    d3ee:	f011 011f 	ands.w	r1, r1, #31
    d3f2:	d00d      	beq.n	d410 <__any_on+0x44>
    d3f4:	b410      	push	{r4}
    d3f6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    d3fa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d3fe:	fa24 f201 	lsr.w	r2, r4, r1
    d402:	408a      	lsls	r2, r1
    d404:	4294      	cmp	r4, r2
    d406:	d00c      	beq.n	d422 <__any_on+0x56>
    d408:	2001      	movs	r0, #1
    d40a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d40e:	4770      	bx	lr
    d410:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d414:	e7e6      	b.n	d3e4 <__any_on+0x18>
    d416:	2001      	movs	r0, #1
    d418:	4770      	bx	lr
    d41a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    d41e:	2a00      	cmp	r2, #0
    d420:	d1f2      	bne.n	d408 <__any_on+0x3c>
    d422:	4283      	cmp	r3, r0
    d424:	d8f9      	bhi.n	d41a <__any_on+0x4e>
    d426:	2000      	movs	r0, #0
    d428:	f85d 4b04 	ldr.w	r4, [sp], #4
    d42c:	4770      	bx	lr
    d42e:	bf00      	nop

0000d430 <__ascii_wctomb>:
    d430:	b149      	cbz	r1, d446 <__ascii_wctomb+0x16>
    d432:	2aff      	cmp	r2, #255	; 0xff
    d434:	d802      	bhi.n	d43c <__ascii_wctomb+0xc>
    d436:	700a      	strb	r2, [r1, #0]
    d438:	2001      	movs	r0, #1
    d43a:	4770      	bx	lr
    d43c:	238a      	movs	r3, #138	; 0x8a
    d43e:	6003      	str	r3, [r0, #0]
    d440:	f04f 30ff 	mov.w	r0, #4294967295
    d444:	4770      	bx	lr
    d446:	4608      	mov	r0, r1
    d448:	4770      	bx	lr
    d44a:	bf00      	nop
    d44c:	0000      	movs	r0, r0
	...

0000d450 <_svfprintf_r>:
    d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d454:	ed2d 8b08 	vpush	{d8-d11}
    d458:	b0d1      	sub	sp, #324	; 0x144
    d45a:	460c      	mov	r4, r1
    d45c:	ee0b 1a10 	vmov	s22, r1
    d460:	4690      	mov	r8, r2
    d462:	9308      	str	r3, [sp, #32]
    d464:	4683      	mov	fp, r0
    d466:	f003 fb59 	bl	10b1c <_localeconv_r>
    d46a:	6803      	ldr	r3, [r0, #0]
    d46c:	9312      	str	r3, [sp, #72]	; 0x48
    d46e:	4618      	mov	r0, r3
    d470:	f7fe fc66 	bl	bd40 <strlen>
    d474:	af20      	add	r7, sp, #128	; 0x80
    d476:	9010      	str	r0, [sp, #64]	; 0x40
    d478:	2208      	movs	r2, #8
    d47a:	2100      	movs	r1, #0
    d47c:	4638      	mov	r0, r7
    d47e:	f7fe f8c5 	bl	b60c <memset>
    d482:	89a3      	ldrh	r3, [r4, #12]
    d484:	061b      	lsls	r3, r3, #24
    d486:	d503      	bpl.n	d490 <_svfprintf_r+0x40>
    d488:	6923      	ldr	r3, [r4, #16]
    d48a:	2b00      	cmp	r3, #0
    d48c:	f000 8755 	beq.w	e33a <_svfprintf_r+0xeea>
    d490:	2300      	movs	r3, #0
    d492:	ed9f 8b83 	vldr	d8, [pc, #524]	; d6a0 <_svfprintf_r+0x250>
    d496:	ed9f 9b84 	vldr	d9, [pc, #528]	; d6a8 <_svfprintf_r+0x258>
    d49a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d49e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d4a2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d4a6:	aa27      	add	r2, sp, #156	; 0x9c
    d4a8:	930e      	str	r3, [sp, #56]	; 0x38
    d4aa:	9224      	str	r2, [sp, #144]	; 0x90
    d4ac:	4692      	mov	sl, r2
    d4ae:	9311      	str	r3, [sp, #68]	; 0x44
    d4b0:	9304      	str	r3, [sp, #16]
    d4b2:	4644      	mov	r4, r8
    d4b4:	46a1      	mov	r9, r4
    d4b6:	4b7e      	ldr	r3, [pc, #504]	; (d6b0 <_svfprintf_r+0x260>)
    d4b8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d4bc:	f7fe f970 	bl	b7a0 <__locale_mb_cur_max>
    d4c0:	464a      	mov	r2, r9
    d4c2:	4603      	mov	r3, r0
    d4c4:	a91c      	add	r1, sp, #112	; 0x70
    d4c6:	9700      	str	r7, [sp, #0]
    d4c8:	4658      	mov	r0, fp
    d4ca:	47a8      	blx	r5
    d4cc:	2800      	cmp	r0, #0
    d4ce:	f000 80b0 	beq.w	d632 <_svfprintf_r+0x1e2>
    d4d2:	f2c0 80a6 	blt.w	d622 <_svfprintf_r+0x1d2>
    d4d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d4d8:	2a25      	cmp	r2, #37	; 0x25
    d4da:	4603      	mov	r3, r0
    d4dc:	d001      	beq.n	d4e2 <_svfprintf_r+0x92>
    d4de:	4499      	add	r9, r3
    d4e0:	e7e9      	b.n	d4b6 <_svfprintf_r+0x66>
    d4e2:	ebb9 0504 	subs.w	r5, r9, r4
    d4e6:	4606      	mov	r6, r0
    d4e8:	f040 80a7 	bne.w	d63a <_svfprintf_r+0x1ea>
    d4ec:	2300      	movs	r3, #0
    d4ee:	f04f 32ff 	mov.w	r2, #4294967295
    d4f2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d4f6:	4698      	mov	r8, r3
    d4f8:	9306      	str	r3, [sp, #24]
    d4fa:	f109 0901 	add.w	r9, r9, #1
    d4fe:	f899 3000 	ldrb.w	r3, [r9]
    d502:	9203      	str	r2, [sp, #12]
    d504:	252b      	movs	r5, #43	; 0x2b
    d506:	2620      	movs	r6, #32
    d508:	f109 0901 	add.w	r9, r9, #1
    d50c:	f1a3 0220 	sub.w	r2, r3, #32
    d510:	2a5a      	cmp	r2, #90	; 0x5a
    d512:	f200 80cf 	bhi.w	d6b4 <_svfprintf_r+0x264>
    d516:	e8df f012 	tbh	[pc, r2, lsl #1]
    d51a:	02e8      	.short	0x02e8
    d51c:	00cd00cd 	.word	0x00cd00cd
    d520:	00cd02e3 	.word	0x00cd02e3
    d524:	00cd00cd 	.word	0x00cd00cd
    d528:	00cd006a 	.word	0x00cd006a
    d52c:	020500cd 	.word	0x020500cd
    d530:	00cd0284 	.word	0x00cd0284
    d534:	02c90210 	.word	0x02c90210
    d538:	02bd00cd 	.word	0x02bd00cd
    d53c:	005b005b 	.word	0x005b005b
    d540:	005b005b 	.word	0x005b005b
    d544:	005b005b 	.word	0x005b005b
    d548:	005b005b 	.word	0x005b005b
    d54c:	00cd005b 	.word	0x00cd005b
    d550:	00cd00cd 	.word	0x00cd00cd
    d554:	00cd00cd 	.word	0x00cd00cd
    d558:	00cd00cd 	.word	0x00cd00cd
    d55c:	00cd0153 	.word	0x00cd0153
    d560:	021a0183 	.word	0x021a0183
    d564:	01530153 	.word	0x01530153
    d568:	00cd0153 	.word	0x00cd0153
    d56c:	00cd00cd 	.word	0x00cd00cd
    d570:	021500cd 	.word	0x021500cd
    d574:	00cd00cd 	.word	0x00cd00cd
    d578:	00cd0296 	.word	0x00cd0296
    d57c:	00cd00cd 	.word	0x00cd00cd
    d580:	00cd01ab 	.word	0x00cd01ab
    d584:	00cd02aa 	.word	0x00cd02aa
    d588:	06e300cd 	.word	0x06e300cd
    d58c:	00cd00cd 	.word	0x00cd00cd
    d590:	00cd00cd 	.word	0x00cd00cd
    d594:	00cd00cd 	.word	0x00cd00cd
    d598:	00cd00cd 	.word	0x00cd00cd
    d59c:	00cd0153 	.word	0x00cd0153
    d5a0:	01de0183 	.word	0x01de0183
    d5a4:	01530153 	.word	0x01530153
    d5a8:	02770153 	.word	0x02770153
    d5ac:	007f01de 	.word	0x007f01de
    d5b0:	028900cd 	.word	0x028900cd
    d5b4:	025f00cd 	.word	0x025f00cd
    d5b8:	022f06e0 	.word	0x022f06e0
    d5bc:	00cd007f 	.word	0x00cd007f
    d5c0:	007c01ab 	.word	0x007c01ab
    d5c4:	00cd06b8 	.word	0x00cd06b8
    d5c8:	06bd00cd 	.word	0x06bd00cd
    d5cc:	007c00cd 	.word	0x007c00cd
    d5d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d5d4:	2100      	movs	r1, #0
    d5d6:	f819 3b01 	ldrb.w	r3, [r9], #1
    d5da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d5de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d5e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d5e6:	2a09      	cmp	r2, #9
    d5e8:	d9f5      	bls.n	d5d6 <_svfprintf_r+0x186>
    d5ea:	9106      	str	r1, [sp, #24]
    d5ec:	e78e      	b.n	d50c <_svfprintf_r+0xbc>
    d5ee:	4658      	mov	r0, fp
    d5f0:	f003 fa94 	bl	10b1c <_localeconv_r>
    d5f4:	6843      	ldr	r3, [r0, #4]
    d5f6:	9315      	str	r3, [sp, #84]	; 0x54
    d5f8:	4618      	mov	r0, r3
    d5fa:	f7fe fba1 	bl	bd40 <strlen>
    d5fe:	9016      	str	r0, [sp, #88]	; 0x58
    d600:	4658      	mov	r0, fp
    d602:	f003 fa8b 	bl	10b1c <_localeconv_r>
    d606:	6883      	ldr	r3, [r0, #8]
    d608:	9313      	str	r3, [sp, #76]	; 0x4c
    d60a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d60c:	2b00      	cmp	r3, #0
    d60e:	f040 862d 	bne.w	e26c <_svfprintf_r+0xe1c>
    d612:	f899 3000 	ldrb.w	r3, [r9]
    d616:	e777      	b.n	d508 <_svfprintf_r+0xb8>
    d618:	f899 3000 	ldrb.w	r3, [r9]
    d61c:	f048 0820 	orr.w	r8, r8, #32
    d620:	e772      	b.n	d508 <_svfprintf_r+0xb8>
    d622:	2208      	movs	r2, #8
    d624:	2100      	movs	r1, #0
    d626:	4638      	mov	r0, r7
    d628:	f7fd fff0 	bl	b60c <memset>
    d62c:	2301      	movs	r3, #1
    d62e:	4499      	add	r9, r3
    d630:	e741      	b.n	d4b6 <_svfprintf_r+0x66>
    d632:	ebb9 0504 	subs.w	r5, r9, r4
    d636:	4606      	mov	r6, r0
    d638:	d011      	beq.n	d65e <_svfprintf_r+0x20e>
    d63a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d63c:	442b      	add	r3, r5
    d63e:	9326      	str	r3, [sp, #152]	; 0x98
    d640:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d642:	3301      	adds	r3, #1
    d644:	2b07      	cmp	r3, #7
    d646:	e9ca 4500 	strd	r4, r5, [sl]
    d64a:	9325      	str	r3, [sp, #148]	; 0x94
    d64c:	dc1c      	bgt.n	d688 <_svfprintf_r+0x238>
    d64e:	f10a 0a08 	add.w	sl, sl, #8
    d652:	9b04      	ldr	r3, [sp, #16]
    d654:	442b      	add	r3, r5
    d656:	9304      	str	r3, [sp, #16]
    d658:	2e00      	cmp	r6, #0
    d65a:	f47f af47 	bne.w	d4ec <_svfprintf_r+0x9c>
    d65e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d660:	2b00      	cmp	r3, #0
    d662:	f041 820b 	bne.w	ea7c <_svfprintf_r+0x162c>
    d666:	ee1b 3a10 	vmov	r3, s22
    d66a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d66e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d672:	9b04      	ldr	r3, [sp, #16]
    d674:	bf18      	it	ne
    d676:	f04f 33ff 	movne.w	r3, #4294967295
    d67a:	9304      	str	r3, [sp, #16]
    d67c:	9804      	ldr	r0, [sp, #16]
    d67e:	b051      	add	sp, #324	; 0x144
    d680:	ecbd 8b08 	vpop	{d8-d11}
    d684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d688:	ee1b 1a10 	vmov	r1, s22
    d68c:	aa24      	add	r2, sp, #144	; 0x90
    d68e:	4658      	mov	r0, fp
    d690:	f004 fd6a 	bl	12168 <__ssprint_r>
    d694:	2800      	cmp	r0, #0
    d696:	d1e6      	bne.n	d666 <_svfprintf_r+0x216>
    d698:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d69c:	e7d9      	b.n	d652 <_svfprintf_r+0x202>
    d69e:	bf00      	nop
	...
    d6a8:	ffffffff 	.word	0xffffffff
    d6ac:	7fefffff 	.word	0x7fefffff
    d6b0:	200086f0 	.word	0x200086f0
    d6b4:	930b      	str	r3, [sp, #44]	; 0x2c
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d0d1      	beq.n	d65e <_svfprintf_r+0x20e>
    d6ba:	2100      	movs	r1, #0
    d6bc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d6c0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    d6c4:	2301      	movs	r3, #1
    d6c6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d6ca:	9302      	str	r3, [sp, #8]
    d6cc:	9107      	str	r1, [sp, #28]
    d6ce:	9305      	str	r3, [sp, #20]
    d6d0:	9103      	str	r1, [sp, #12]
    d6d2:	910f      	str	r1, [sp, #60]	; 0x3c
    d6d4:	ac37      	add	r4, sp, #220	; 0xdc
    d6d6:	f018 0302 	ands.w	r3, r8, #2
    d6da:	9309      	str	r3, [sp, #36]	; 0x24
    d6dc:	d002      	beq.n	d6e4 <_svfprintf_r+0x294>
    d6de:	9b02      	ldr	r3, [sp, #8]
    d6e0:	3302      	adds	r3, #2
    d6e2:	9302      	str	r3, [sp, #8]
    d6e4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    d6e8:	930a      	str	r3, [sp, #40]	; 0x28
    d6ea:	d105      	bne.n	d6f8 <_svfprintf_r+0x2a8>
    d6ec:	9b06      	ldr	r3, [sp, #24]
    d6ee:	9a02      	ldr	r2, [sp, #8]
    d6f0:	1a9d      	subs	r5, r3, r2
    d6f2:	2d00      	cmp	r5, #0
    d6f4:	f300 8369 	bgt.w	ddca <_svfprintf_r+0x97a>
    d6f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d6fa:	b189      	cbz	r1, d720 <_svfprintf_r+0x2d0>
    d6fc:	9925      	ldr	r1, [sp, #148]	; 0x94
    d6fe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    d702:	3101      	adds	r1, #1
    d704:	3201      	adds	r2, #1
    d706:	f8ca 0000 	str.w	r0, [sl]
    d70a:	2907      	cmp	r1, #7
    d70c:	f04f 0001 	mov.w	r0, #1
    d710:	9226      	str	r2, [sp, #152]	; 0x98
    d712:	9125      	str	r1, [sp, #148]	; 0x94
    d714:	f8ca 0004 	str.w	r0, [sl, #4]
    d718:	f300 83a2 	bgt.w	de60 <_svfprintf_r+0xa10>
    d71c:	f10a 0a08 	add.w	sl, sl, #8
    d720:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d722:	b183      	cbz	r3, d746 <_svfprintf_r+0x2f6>
    d724:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d726:	a91a      	add	r1, sp, #104	; 0x68
    d728:	3301      	adds	r3, #1
    d72a:	3202      	adds	r2, #2
    d72c:	f8ca 1000 	str.w	r1, [sl]
    d730:	2b07      	cmp	r3, #7
    d732:	f04f 0102 	mov.w	r1, #2
    d736:	9226      	str	r2, [sp, #152]	; 0x98
    d738:	9325      	str	r3, [sp, #148]	; 0x94
    d73a:	f8ca 1004 	str.w	r1, [sl, #4]
    d73e:	f300 83a3 	bgt.w	de88 <_svfprintf_r+0xa38>
    d742:	f10a 0a08 	add.w	sl, sl, #8
    d746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d748:	2b80      	cmp	r3, #128	; 0x80
    d74a:	f000 826c 	beq.w	dc26 <_svfprintf_r+0x7d6>
    d74e:	9b03      	ldr	r3, [sp, #12]
    d750:	9905      	ldr	r1, [sp, #20]
    d752:	1a5d      	subs	r5, r3, r1
    d754:	2d00      	cmp	r5, #0
    d756:	f300 82a5 	bgt.w	dca4 <_svfprintf_r+0x854>
    d75a:	f418 7f80 	tst.w	r8, #256	; 0x100
    d75e:	f040 820d 	bne.w	db7c <_svfprintf_r+0x72c>
    d762:	9b05      	ldr	r3, [sp, #20]
    d764:	f8ca 3004 	str.w	r3, [sl, #4]
    d768:	441a      	add	r2, r3
    d76a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d76c:	f8ca 4000 	str.w	r4, [sl]
    d770:	3301      	adds	r3, #1
    d772:	2b07      	cmp	r3, #7
    d774:	9226      	str	r2, [sp, #152]	; 0x98
    d776:	9325      	str	r3, [sp, #148]	; 0x94
    d778:	f300 831b 	bgt.w	ddb2 <_svfprintf_r+0x962>
    d77c:	f10a 0a08 	add.w	sl, sl, #8
    d780:	f018 0f04 	tst.w	r8, #4
    d784:	d005      	beq.n	d792 <_svfprintf_r+0x342>
    d786:	9b06      	ldr	r3, [sp, #24]
    d788:	9902      	ldr	r1, [sp, #8]
    d78a:	1a5c      	subs	r4, r3, r1
    d78c:	2c00      	cmp	r4, #0
    d78e:	f300 8388 	bgt.w	dea2 <_svfprintf_r+0xa52>
    d792:	9b04      	ldr	r3, [sp, #16]
    d794:	9906      	ldr	r1, [sp, #24]
    d796:	9802      	ldr	r0, [sp, #8]
    d798:	4281      	cmp	r1, r0
    d79a:	bfac      	ite	ge
    d79c:	185b      	addge	r3, r3, r1
    d79e:	181b      	addlt	r3, r3, r0
    d7a0:	9304      	str	r3, [sp, #16]
    d7a2:	2a00      	cmp	r2, #0
    d7a4:	f040 82b0 	bne.w	dd08 <_svfprintf_r+0x8b8>
    d7a8:	2300      	movs	r3, #0
    d7aa:	9325      	str	r3, [sp, #148]	; 0x94
    d7ac:	9b07      	ldr	r3, [sp, #28]
    d7ae:	b11b      	cbz	r3, d7b8 <_svfprintf_r+0x368>
    d7b0:	9907      	ldr	r1, [sp, #28]
    d7b2:	4658      	mov	r0, fp
    d7b4:	f7fe fbd6 	bl	bf64 <_free_r>
    d7b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d7bc:	464c      	mov	r4, r9
    d7be:	e679      	b.n	d4b4 <_svfprintf_r+0x64>
    d7c0:	930b      	str	r3, [sp, #44]	; 0x2c
    d7c2:	9b08      	ldr	r3, [sp, #32]
    d7c4:	3307      	adds	r3, #7
    d7c6:	f023 0307 	bic.w	r3, r3, #7
    d7ca:	ecb3 8b02 	vldmia	r3!, {d8}
    d7ce:	eeb0 7bc8 	vabs.f64	d7, d8
    d7d2:	eeb4 7b49 	vcmp.f64	d7, d9
    d7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d7da:	9308      	str	r3, [sp, #32]
    d7dc:	f340 84e9 	ble.w	e1b2 <_svfprintf_r+0xd62>
    d7e0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    d7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d7e8:	f101 8059 	bmi.w	e89e <_svfprintf_r+0x144e>
    d7ec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d7f0:	4cab      	ldr	r4, [pc, #684]	; (daa0 <_svfprintf_r+0x650>)
    d7f2:	4bac      	ldr	r3, [pc, #688]	; (daa4 <_svfprintf_r+0x654>)
    d7f4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    d7f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d7fa:	2a47      	cmp	r2, #71	; 0x47
    d7fc:	bfc8      	it	gt
    d7fe:	461c      	movgt	r4, r3
    d800:	2300      	movs	r3, #0
    d802:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d806:	2203      	movs	r2, #3
    d808:	9307      	str	r3, [sp, #28]
    d80a:	9202      	str	r2, [sp, #8]
    d80c:	9205      	str	r2, [sp, #20]
    d80e:	9303      	str	r3, [sp, #12]
    d810:	930f      	str	r3, [sp, #60]	; 0x3c
    d812:	2900      	cmp	r1, #0
    d814:	f43f af5f 	beq.w	d6d6 <_svfprintf_r+0x286>
    d818:	9b02      	ldr	r3, [sp, #8]
    d81a:	3301      	adds	r3, #1
    d81c:	9302      	str	r3, [sp, #8]
    d81e:	e75a      	b.n	d6d6 <_svfprintf_r+0x286>
    d820:	2b43      	cmp	r3, #67	; 0x43
    d822:	930b      	str	r3, [sp, #44]	; 0x2c
    d824:	d003      	beq.n	d82e <_svfprintf_r+0x3de>
    d826:	f018 0f10 	tst.w	r8, #16
    d82a:	f000 855d 	beq.w	e2e8 <_svfprintf_r+0xe98>
    d82e:	9d08      	ldr	r5, [sp, #32]
    d830:	2208      	movs	r2, #8
    d832:	2100      	movs	r1, #0
    d834:	a822      	add	r0, sp, #136	; 0x88
    d836:	ac37      	add	r4, sp, #220	; 0xdc
    d838:	f7fd fee8 	bl	b60c <memset>
    d83c:	ab22      	add	r3, sp, #136	; 0x88
    d83e:	f855 2b04 	ldr.w	r2, [r5], #4
    d842:	4621      	mov	r1, r4
    d844:	4658      	mov	r0, fp
    d846:	f004 fb65 	bl	11f14 <_wcrtomb_r>
    d84a:	4603      	mov	r3, r0
    d84c:	3301      	adds	r3, #1
    d84e:	9005      	str	r0, [sp, #20]
    d850:	f001 82ee 	beq.w	ee30 <_svfprintf_r+0x19e0>
    d854:	9b05      	ldr	r3, [sp, #20]
    d856:	9508      	str	r5, [sp, #32]
    d858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d85c:	9302      	str	r3, [sp, #8]
    d85e:	2100      	movs	r1, #0
    d860:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d864:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d868:	9107      	str	r1, [sp, #28]
    d86a:	9103      	str	r1, [sp, #12]
    d86c:	910f      	str	r1, [sp, #60]	; 0x3c
    d86e:	e732      	b.n	d6d6 <_svfprintf_r+0x286>
    d870:	930b      	str	r3, [sp, #44]	; 0x2c
    d872:	9b08      	ldr	r3, [sp, #32]
    d874:	461a      	mov	r2, r3
    d876:	2300      	movs	r3, #0
    d878:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d87c:	4613      	mov	r3, r2
    d87e:	f853 4b04 	ldr.w	r4, [r3], #4
    d882:	9308      	str	r3, [sp, #32]
    d884:	2c00      	cmp	r4, #0
    d886:	f000 8548 	beq.w	e31a <_svfprintf_r+0xeca>
    d88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d88c:	2b53      	cmp	r3, #83	; 0x53
    d88e:	f000 86ec 	beq.w	e66a <_svfprintf_r+0x121a>
    d892:	f018 0310 	ands.w	r3, r8, #16
    d896:	930c      	str	r3, [sp, #48]	; 0x30
    d898:	f040 86e7 	bne.w	e66a <_svfprintf_r+0x121a>
    d89c:	9b03      	ldr	r3, [sp, #12]
    d89e:	1c5d      	adds	r5, r3, #1
    d8a0:	f001 80e5 	beq.w	ea6e <_svfprintf_r+0x161e>
    d8a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    d8a6:	461a      	mov	r2, r3
    d8a8:	4620      	mov	r0, r4
    d8aa:	f7fe f9e9 	bl	bc80 <memchr>
    d8ae:	9007      	str	r0, [sp, #28]
    d8b0:	2800      	cmp	r0, #0
    d8b2:	f001 8328 	beq.w	ef06 <_svfprintf_r+0x1ab6>
    d8b6:	9b07      	ldr	r3, [sp, #28]
    d8b8:	1b1a      	subs	r2, r3, r4
    d8ba:	9205      	str	r2, [sp, #20]
    d8bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d8be:	9303      	str	r3, [sp, #12]
    d8c0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d8c4:	930f      	str	r3, [sp, #60]	; 0x3c
    d8c6:	930d      	str	r3, [sp, #52]	; 0x34
    d8c8:	9307      	str	r3, [sp, #28]
    d8ca:	2373      	movs	r3, #115	; 0x73
    d8cc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d8d0:	9202      	str	r2, [sp, #8]
    d8d2:	930b      	str	r3, [sp, #44]	; 0x2c
    d8d4:	e79d      	b.n	d812 <_svfprintf_r+0x3c2>
    d8d6:	f018 0f20 	tst.w	r8, #32
    d8da:	930b      	str	r3, [sp, #44]	; 0x2c
    d8dc:	9b08      	ldr	r3, [sp, #32]
    d8de:	d03d      	beq.n	d95c <_svfprintf_r+0x50c>
    d8e0:	3307      	adds	r3, #7
    d8e2:	f023 0307 	bic.w	r3, r3, #7
    d8e6:	461a      	mov	r2, r3
    d8e8:	4611      	mov	r1, r2
    d8ea:	685b      	ldr	r3, [r3, #4]
    d8ec:	f851 2b08 	ldr.w	r2, [r1], #8
    d8f0:	9108      	str	r1, [sp, #32]
    d8f2:	4619      	mov	r1, r3
    d8f4:	2b00      	cmp	r3, #0
    d8f6:	f2c0 840c 	blt.w	e112 <_svfprintf_r+0xcc2>
    d8fa:	9b03      	ldr	r3, [sp, #12]
    d8fc:	3301      	adds	r3, #1
    d8fe:	f000 829e 	beq.w	de3e <_svfprintf_r+0x9ee>
    d902:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    d906:	ea52 0301 	orrs.w	r3, r2, r1
    d90a:	9002      	str	r0, [sp, #8]
    d90c:	f040 8299 	bne.w	de42 <_svfprintf_r+0x9f2>
    d910:	9b03      	ldr	r3, [sp, #12]
    d912:	2b00      	cmp	r3, #0
    d914:	f040 829a 	bne.w	de4c <_svfprintf_r+0x9fc>
    d918:	4680      	mov	r8, r0
    d91a:	2300      	movs	r3, #0
    d91c:	9303      	str	r3, [sp, #12]
    d91e:	9305      	str	r3, [sp, #20]
    d920:	ac50      	add	r4, sp, #320	; 0x140
    d922:	e106      	b.n	db32 <_svfprintf_r+0x6e2>
    d924:	9b08      	ldr	r3, [sp, #32]
    d926:	f853 2b04 	ldr.w	r2, [r3], #4
    d92a:	9206      	str	r2, [sp, #24]
    d92c:	2a00      	cmp	r2, #0
    d92e:	f280 8419 	bge.w	e164 <_svfprintf_r+0xd14>
    d932:	9a06      	ldr	r2, [sp, #24]
    d934:	9308      	str	r3, [sp, #32]
    d936:	4252      	negs	r2, r2
    d938:	9206      	str	r2, [sp, #24]
    d93a:	f899 3000 	ldrb.w	r3, [r9]
    d93e:	f048 0804 	orr.w	r8, r8, #4
    d942:	e5e1      	b.n	d508 <_svfprintf_r+0xb8>
    d944:	f899 3000 	ldrb.w	r3, [r9]
    d948:	f048 0808 	orr.w	r8, r8, #8
    d94c:	e5dc      	b.n	d508 <_svfprintf_r+0xb8>
    d94e:	f048 0810 	orr.w	r8, r8, #16
    d952:	f018 0f20 	tst.w	r8, #32
    d956:	930b      	str	r3, [sp, #44]	; 0x2c
    d958:	9b08      	ldr	r3, [sp, #32]
    d95a:	d1c1      	bne.n	d8e0 <_svfprintf_r+0x490>
    d95c:	f018 0f10 	tst.w	r8, #16
    d960:	f040 840b 	bne.w	e17a <_svfprintf_r+0xd2a>
    d964:	f018 0f40 	tst.w	r8, #64	; 0x40
    d968:	f000 8403 	beq.w	e172 <_svfprintf_r+0xd22>
    d96c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    d970:	9308      	str	r3, [sp, #32]
    d972:	17d1      	asrs	r1, r2, #31
    d974:	460b      	mov	r3, r1
    d976:	e7bd      	b.n	d8f4 <_svfprintf_r+0x4a4>
    d978:	9b08      	ldr	r3, [sp, #32]
    d97a:	f048 0202 	orr.w	r2, r8, #2
    d97e:	9202      	str	r2, [sp, #8]
    d980:	f853 2b04 	ldr.w	r2, [r3], #4
    d984:	9308      	str	r3, [sp, #32]
    d986:	f647 0330 	movw	r3, #30768	; 0x7830
    d98a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    d98e:	2078      	movs	r0, #120	; 0x78
    d990:	4b45      	ldr	r3, [pc, #276]	; (daa8 <_svfprintf_r+0x658>)
    d992:	9311      	str	r3, [sp, #68]	; 0x44
    d994:	2100      	movs	r1, #0
    d996:	2302      	movs	r3, #2
    d998:	900b      	str	r0, [sp, #44]	; 0x2c
    d99a:	2000      	movs	r0, #0
    d99c:	9c03      	ldr	r4, [sp, #12]
    d99e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    d9a2:	1c60      	adds	r0, r4, #1
    d9a4:	f000 80ad 	beq.w	db02 <_svfprintf_r+0x6b2>
    d9a8:	9802      	ldr	r0, [sp, #8]
    d9aa:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    d9ae:	ea52 0001 	orrs.w	r0, r2, r1
    d9b2:	f040 80a4 	bne.w	dafe <_svfprintf_r+0x6ae>
    d9b6:	2c00      	cmp	r4, #0
    d9b8:	f040 86ae 	bne.w	e718 <_svfprintf_r+0x12c8>
    d9bc:	2b00      	cmp	r3, #0
    d9be:	d1ac      	bne.n	d91a <_svfprintf_r+0x4ca>
    d9c0:	9b02      	ldr	r3, [sp, #8]
    d9c2:	f013 0301 	ands.w	r3, r3, #1
    d9c6:	9305      	str	r3, [sp, #20]
    d9c8:	f000 83d1 	beq.w	e16e <_svfprintf_r+0xd1e>
    d9cc:	2330      	movs	r3, #48	; 0x30
    d9ce:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    d9d2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d9d6:	e0ac      	b.n	db32 <_svfprintf_r+0x6e2>
    d9d8:	f018 0f20 	tst.w	r8, #32
    d9dc:	f040 83d4 	bne.w	e188 <_svfprintf_r+0xd38>
    d9e0:	f018 0f10 	tst.w	r8, #16
    d9e4:	f040 869f 	bne.w	e726 <_svfprintf_r+0x12d6>
    d9e8:	f018 0f40 	tst.w	r8, #64	; 0x40
    d9ec:	f040 8797 	bne.w	e91e <_svfprintf_r+0x14ce>
    d9f0:	f418 7f00 	tst.w	r8, #512	; 0x200
    d9f4:	f000 8697 	beq.w	e726 <_svfprintf_r+0x12d6>
    d9f8:	9b08      	ldr	r3, [sp, #32]
    d9fa:	9904      	ldr	r1, [sp, #16]
    d9fc:	f853 2b04 	ldr.w	r2, [r3], #4
    da00:	9308      	str	r3, [sp, #32]
    da02:	7011      	strb	r1, [r2, #0]
    da04:	464c      	mov	r4, r9
    da06:	e555      	b.n	d4b4 <_svfprintf_r+0x64>
    da08:	f899 3000 	ldrb.w	r3, [r9]
    da0c:	2b68      	cmp	r3, #104	; 0x68
    da0e:	bf03      	ittte	eq
    da10:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    da14:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    da18:	f109 0901 	addeq.w	r9, r9, #1
    da1c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    da20:	e572      	b.n	d508 <_svfprintf_r+0xb8>
    da22:	f899 3000 	ldrb.w	r3, [r9]
    da26:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    da2a:	e56d      	b.n	d508 <_svfprintf_r+0xb8>
    da2c:	f899 3000 	ldrb.w	r3, [r9]
    da30:	2b6c      	cmp	r3, #108	; 0x6c
    da32:	bf03      	ittte	eq
    da34:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    da38:	f048 0820 	orreq.w	r8, r8, #32
    da3c:	f109 0901 	addeq.w	r9, r9, #1
    da40:	f048 0810 	orrne.w	r8, r8, #16
    da44:	e560      	b.n	d508 <_svfprintf_r+0xb8>
    da46:	930b      	str	r3, [sp, #44]	; 0x2c
    da48:	f048 0810 	orr.w	r8, r8, #16
    da4c:	f018 0120 	ands.w	r1, r8, #32
    da50:	f000 8351 	beq.w	e0f6 <_svfprintf_r+0xca6>
    da54:	9b08      	ldr	r3, [sp, #32]
    da56:	3307      	adds	r3, #7
    da58:	f023 0307 	bic.w	r3, r3, #7
    da5c:	6859      	ldr	r1, [r3, #4]
    da5e:	f853 2b08 	ldr.w	r2, [r3], #8
    da62:	9308      	str	r3, [sp, #32]
    da64:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    da68:	9302      	str	r3, [sp, #8]
    da6a:	2300      	movs	r3, #0
    da6c:	e795      	b.n	d99a <_svfprintf_r+0x54a>
    da6e:	930b      	str	r3, [sp, #44]	; 0x2c
    da70:	f048 0310 	orr.w	r3, r8, #16
    da74:	9302      	str	r3, [sp, #8]
    da76:	9b02      	ldr	r3, [sp, #8]
    da78:	f013 0120 	ands.w	r1, r3, #32
    da7c:	f000 8329 	beq.w	e0d2 <_svfprintf_r+0xc82>
    da80:	9b08      	ldr	r3, [sp, #32]
    da82:	3307      	adds	r3, #7
    da84:	f023 0307 	bic.w	r3, r3, #7
    da88:	6859      	ldr	r1, [r3, #4]
    da8a:	f853 2b08 	ldr.w	r2, [r3], #8
    da8e:	9308      	str	r3, [sp, #32]
    da90:	2301      	movs	r3, #1
    da92:	e782      	b.n	d99a <_svfprintf_r+0x54a>
    da94:	f899 3000 	ldrb.w	r3, [r9]
    da98:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    da9c:	e534      	b.n	d508 <_svfprintf_r+0xb8>
    da9e:	bf00      	nop
    daa0:	20000d40 	.word	0x20000d40
    daa4:	2000081c 	.word	0x2000081c
    daa8:	20000d48 	.word	0x20000d48
    daac:	4649      	mov	r1, r9
    daae:	f811 3b01 	ldrb.w	r3, [r1], #1
    dab2:	2b2a      	cmp	r3, #42	; 0x2a
    dab4:	f001 8249 	beq.w	ef4a <_svfprintf_r+0x1afa>
    dab8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dabc:	2a09      	cmp	r2, #9
    dabe:	4689      	mov	r9, r1
    dac0:	bf98      	it	ls
    dac2:	2100      	movls	r1, #0
    dac4:	f201 8144 	bhi.w	ed50 <_svfprintf_r+0x1900>
    dac8:	f819 3b01 	ldrb.w	r3, [r9], #1
    dacc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    dad0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    dad4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dad8:	2a09      	cmp	r2, #9
    dada:	d9f5      	bls.n	dac8 <_svfprintf_r+0x678>
    dadc:	9103      	str	r1, [sp, #12]
    dade:	e515      	b.n	d50c <_svfprintf_r+0xbc>
    dae0:	f899 3000 	ldrb.w	r3, [r9]
    dae4:	f048 0801 	orr.w	r8, r8, #1
    dae8:	e50e      	b.n	d508 <_svfprintf_r+0xb8>
    daea:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    daee:	2b00      	cmp	r3, #0
    daf0:	f47f ad8f 	bne.w	d612 <_svfprintf_r+0x1c2>
    daf4:	f899 3000 	ldrb.w	r3, [r9]
    daf8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    dafc:	e504      	b.n	d508 <_svfprintf_r+0xb8>
    dafe:	f8cd 8008 	str.w	r8, [sp, #8]
    db02:	2b01      	cmp	r3, #1
    db04:	f000 819d 	beq.w	de42 <_svfprintf_r+0x9f2>
    db08:	2b02      	cmp	r3, #2
    db0a:	ac50      	add	r4, sp, #320	; 0x140
    db0c:	d120      	bne.n	db50 <_svfprintf_r+0x700>
    db0e:	9811      	ldr	r0, [sp, #68]	; 0x44
    db10:	f002 030f 	and.w	r3, r2, #15
    db14:	0912      	lsrs	r2, r2, #4
    db16:	5cc3      	ldrb	r3, [r0, r3]
    db18:	f804 3d01 	strb.w	r3, [r4, #-1]!
    db1c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    db20:	0909      	lsrs	r1, r1, #4
    db22:	ea52 0301 	orrs.w	r3, r2, r1
    db26:	d1f3      	bne.n	db10 <_svfprintf_r+0x6c0>
    db28:	ab50      	add	r3, sp, #320	; 0x140
    db2a:	1b1b      	subs	r3, r3, r4
    db2c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    db30:	9305      	str	r3, [sp, #20]
    db32:	9a05      	ldr	r2, [sp, #20]
    db34:	9803      	ldr	r0, [sp, #12]
    db36:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    db3a:	4282      	cmp	r2, r0
    db3c:	f04f 0300 	mov.w	r3, #0
    db40:	bfb8      	it	lt
    db42:	4602      	movlt	r2, r0
    db44:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    db48:	9307      	str	r3, [sp, #28]
    db4a:	9202      	str	r2, [sp, #8]
    db4c:	930f      	str	r3, [sp, #60]	; 0x3c
    db4e:	e660      	b.n	d812 <_svfprintf_r+0x3c2>
    db50:	f002 0307 	and.w	r3, r2, #7
    db54:	08d2      	lsrs	r2, r2, #3
    db56:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    db5a:	08c9      	lsrs	r1, r1, #3
    db5c:	3330      	adds	r3, #48	; 0x30
    db5e:	ea52 0501 	orrs.w	r5, r2, r1
    db62:	4620      	mov	r0, r4
    db64:	f804 3d01 	strb.w	r3, [r4, #-1]!
    db68:	d1f2      	bne.n	db50 <_svfprintf_r+0x700>
    db6a:	9a02      	ldr	r2, [sp, #8]
    db6c:	07d1      	lsls	r1, r2, #31
    db6e:	f100 824d 	bmi.w	e00c <_svfprintf_r+0xbbc>
    db72:	ab50      	add	r3, sp, #320	; 0x140
    db74:	1b1b      	subs	r3, r3, r4
    db76:	4690      	mov	r8, r2
    db78:	9305      	str	r3, [sp, #20]
    db7a:	e7da      	b.n	db32 <_svfprintf_r+0x6e2>
    db7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db7e:	2b65      	cmp	r3, #101	; 0x65
    db80:	f340 80d4 	ble.w	dd2c <_svfprintf_r+0x8dc>
    db84:	eeb5 8b40 	vcmp.f64	d8, #0.0
    db88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db8c:	f040 81c1 	bne.w	df12 <_svfprintf_r+0xac2>
    db90:	9b25      	ldr	r3, [sp, #148]	; 0x94
    db92:	49ba      	ldr	r1, [pc, #744]	; (de7c <_svfprintf_r+0xa2c>)
    db94:	f8ca 1000 	str.w	r1, [sl]
    db98:	3301      	adds	r3, #1
    db9a:	3201      	adds	r2, #1
    db9c:	2101      	movs	r1, #1
    db9e:	2b07      	cmp	r3, #7
    dba0:	9226      	str	r2, [sp, #152]	; 0x98
    dba2:	9325      	str	r3, [sp, #148]	; 0x94
    dba4:	f8ca 1004 	str.w	r1, [sl, #4]
    dba8:	f300 8551 	bgt.w	e64e <_svfprintf_r+0x11fe>
    dbac:	f10a 0a08 	add.w	sl, sl, #8
    dbb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dbb2:	990e      	ldr	r1, [sp, #56]	; 0x38
    dbb4:	428b      	cmp	r3, r1
    dbb6:	f280 82d0 	bge.w	e15a <_svfprintf_r+0xd0a>
    dbba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dbbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    dbbe:	441a      	add	r2, r3
    dbc0:	e9ca 1300 	strd	r1, r3, [sl]
    dbc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbc6:	9226      	str	r2, [sp, #152]	; 0x98
    dbc8:	3301      	adds	r3, #1
    dbca:	2b07      	cmp	r3, #7
    dbcc:	9325      	str	r3, [sp, #148]	; 0x94
    dbce:	f300 8397 	bgt.w	e300 <_svfprintf_r+0xeb0>
    dbd2:	f10a 0a08 	add.w	sl, sl, #8
    dbd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dbd8:	1e5c      	subs	r4, r3, #1
    dbda:	2c00      	cmp	r4, #0
    dbdc:	f77f add0 	ble.w	d780 <_svfprintf_r+0x330>
    dbe0:	2c10      	cmp	r4, #16
    dbe2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbe4:	f340 856e 	ble.w	e6c4 <_svfprintf_r+0x1274>
    dbe8:	ee1b 6a10 	vmov	r6, s22
    dbec:	2510      	movs	r5, #16
    dbee:	e005      	b.n	dbfc <_svfprintf_r+0x7ac>
    dbf0:	f10a 0a08 	add.w	sl, sl, #8
    dbf4:	3c10      	subs	r4, #16
    dbf6:	2c10      	cmp	r4, #16
    dbf8:	f340 8564 	ble.w	e6c4 <_svfprintf_r+0x1274>
    dbfc:	3301      	adds	r3, #1
    dbfe:	49a0      	ldr	r1, [pc, #640]	; (de80 <_svfprintf_r+0xa30>)
    dc00:	3210      	adds	r2, #16
    dc02:	2b07      	cmp	r3, #7
    dc04:	e9ca 1500 	strd	r1, r5, [sl]
    dc08:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dc0c:	ddf0      	ble.n	dbf0 <_svfprintf_r+0x7a0>
    dc0e:	aa24      	add	r2, sp, #144	; 0x90
    dc10:	4631      	mov	r1, r6
    dc12:	4658      	mov	r0, fp
    dc14:	f004 faa8 	bl	12168 <__ssprint_r>
    dc18:	2800      	cmp	r0, #0
    dc1a:	d17e      	bne.n	dd1a <_svfprintf_r+0x8ca>
    dc1c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dc20:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dc24:	e7e6      	b.n	dbf4 <_svfprintf_r+0x7a4>
    dc26:	9b06      	ldr	r3, [sp, #24]
    dc28:	9902      	ldr	r1, [sp, #8]
    dc2a:	1a5d      	subs	r5, r3, r1
    dc2c:	2d00      	cmp	r5, #0
    dc2e:	f77f ad8e 	ble.w	d74e <_svfprintf_r+0x2fe>
    dc32:	2d10      	cmp	r5, #16
    dc34:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dc36:	dd21      	ble.n	dc7c <_svfprintf_r+0x82c>
    dc38:	9409      	str	r4, [sp, #36]	; 0x24
    dc3a:	2610      	movs	r6, #16
    dc3c:	ee1b 4a10 	vmov	r4, s22
    dc40:	e004      	b.n	dc4c <_svfprintf_r+0x7fc>
    dc42:	3d10      	subs	r5, #16
    dc44:	2d10      	cmp	r5, #16
    dc46:	f10a 0a08 	add.w	sl, sl, #8
    dc4a:	dd16      	ble.n	dc7a <_svfprintf_r+0x82a>
    dc4c:	3301      	adds	r3, #1
    dc4e:	498c      	ldr	r1, [pc, #560]	; (de80 <_svfprintf_r+0xa30>)
    dc50:	3210      	adds	r2, #16
    dc52:	2b07      	cmp	r3, #7
    dc54:	e9ca 1600 	strd	r1, r6, [sl]
    dc58:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dc5c:	ddf1      	ble.n	dc42 <_svfprintf_r+0x7f2>
    dc5e:	aa24      	add	r2, sp, #144	; 0x90
    dc60:	4621      	mov	r1, r4
    dc62:	4658      	mov	r0, fp
    dc64:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dc68:	f004 fa7e 	bl	12168 <__ssprint_r>
    dc6c:	2800      	cmp	r0, #0
    dc6e:	d154      	bne.n	dd1a <_svfprintf_r+0x8ca>
    dc70:	3d10      	subs	r5, #16
    dc72:	2d10      	cmp	r5, #16
    dc74:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dc78:	dce8      	bgt.n	dc4c <_svfprintf_r+0x7fc>
    dc7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dc7c:	4980      	ldr	r1, [pc, #512]	; (de80 <_svfprintf_r+0xa30>)
    dc7e:	f8ca 5004 	str.w	r5, [sl, #4]
    dc82:	3301      	adds	r3, #1
    dc84:	442a      	add	r2, r5
    dc86:	2b07      	cmp	r3, #7
    dc88:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dc8c:	f8ca 1000 	str.w	r1, [sl]
    dc90:	f300 8526 	bgt.w	e6e0 <_svfprintf_r+0x1290>
    dc94:	9b03      	ldr	r3, [sp, #12]
    dc96:	9905      	ldr	r1, [sp, #20]
    dc98:	1a5d      	subs	r5, r3, r1
    dc9a:	2d00      	cmp	r5, #0
    dc9c:	f10a 0a08 	add.w	sl, sl, #8
    dca0:	f77f ad5b 	ble.w	d75a <_svfprintf_r+0x30a>
    dca4:	2d10      	cmp	r5, #16
    dca6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dca8:	dd1f      	ble.n	dcea <_svfprintf_r+0x89a>
    dcaa:	4651      	mov	r1, sl
    dcac:	2610      	movs	r6, #16
    dcae:	ee1b aa10 	vmov	sl, s22
    dcb2:	e004      	b.n	dcbe <_svfprintf_r+0x86e>
    dcb4:	3d10      	subs	r5, #16
    dcb6:	2d10      	cmp	r5, #16
    dcb8:	f101 0108 	add.w	r1, r1, #8
    dcbc:	dd14      	ble.n	dce8 <_svfprintf_r+0x898>
    dcbe:	3301      	adds	r3, #1
    dcc0:	486f      	ldr	r0, [pc, #444]	; (de80 <_svfprintf_r+0xa30>)
    dcc2:	3210      	adds	r2, #16
    dcc4:	2b07      	cmp	r3, #7
    dcc6:	e9c1 0600 	strd	r0, r6, [r1]
    dcca:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dcce:	ddf1      	ble.n	dcb4 <_svfprintf_r+0x864>
    dcd0:	aa24      	add	r2, sp, #144	; 0x90
    dcd2:	4651      	mov	r1, sl
    dcd4:	4658      	mov	r0, fp
    dcd6:	f004 fa47 	bl	12168 <__ssprint_r>
    dcda:	b9f0      	cbnz	r0, dd1a <_svfprintf_r+0x8ca>
    dcdc:	3d10      	subs	r5, #16
    dcde:	2d10      	cmp	r5, #16
    dce0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dce4:	a927      	add	r1, sp, #156	; 0x9c
    dce6:	dcea      	bgt.n	dcbe <_svfprintf_r+0x86e>
    dce8:	468a      	mov	sl, r1
    dcea:	3301      	adds	r3, #1
    dcec:	4964      	ldr	r1, [pc, #400]	; (de80 <_svfprintf_r+0xa30>)
    dcee:	f8ca 5004 	str.w	r5, [sl, #4]
    dcf2:	442a      	add	r2, r5
    dcf4:	2b07      	cmp	r3, #7
    dcf6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dcfa:	f8ca 1000 	str.w	r1, [sl]
    dcfe:	f300 81da 	bgt.w	e0b6 <_svfprintf_r+0xc66>
    dd02:	f10a 0a08 	add.w	sl, sl, #8
    dd06:	e528      	b.n	d75a <_svfprintf_r+0x30a>
    dd08:	ee1b 1a10 	vmov	r1, s22
    dd0c:	aa24      	add	r2, sp, #144	; 0x90
    dd0e:	4658      	mov	r0, fp
    dd10:	f004 fa2a 	bl	12168 <__ssprint_r>
    dd14:	2800      	cmp	r0, #0
    dd16:	f43f ad47 	beq.w	d7a8 <_svfprintf_r+0x358>
    dd1a:	9b07      	ldr	r3, [sp, #28]
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	f43f aca2 	beq.w	d666 <_svfprintf_r+0x216>
    dd22:	9907      	ldr	r1, [sp, #28]
    dd24:	4658      	mov	r0, fp
    dd26:	f7fe f91d 	bl	bf64 <_free_r>
    dd2a:	e49c      	b.n	d666 <_svfprintf_r+0x216>
    dd2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd2e:	2b01      	cmp	r3, #1
    dd30:	f340 817a 	ble.w	e028 <_svfprintf_r+0xbd8>
    dd34:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dd36:	f8ca 4000 	str.w	r4, [sl]
    dd3a:	3301      	adds	r3, #1
    dd3c:	3201      	adds	r2, #1
    dd3e:	2101      	movs	r1, #1
    dd40:	2b07      	cmp	r3, #7
    dd42:	9226      	str	r2, [sp, #152]	; 0x98
    dd44:	9325      	str	r3, [sp, #148]	; 0x94
    dd46:	f8ca 1004 	str.w	r1, [sl, #4]
    dd4a:	f300 81f8 	bgt.w	e13e <_svfprintf_r+0xcee>
    dd4e:	f10a 0a08 	add.w	sl, sl, #8
    dd52:	9910      	ldr	r1, [sp, #64]	; 0x40
    dd54:	9812      	ldr	r0, [sp, #72]	; 0x48
    dd56:	3301      	adds	r3, #1
    dd58:	440a      	add	r2, r1
    dd5a:	2b07      	cmp	r3, #7
    dd5c:	e9ca 0100 	strd	r0, r1, [sl]
    dd60:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dd64:	f300 81dd 	bgt.w	e122 <_svfprintf_r+0xcd2>
    dd68:	f10a 0a08 	add.w	sl, sl, #8
    dd6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    dd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dd74:	f000 8177 	beq.w	e066 <_svfprintf_r+0xc16>
    dd78:	990e      	ldr	r1, [sp, #56]	; 0x38
    dd7a:	3301      	adds	r3, #1
    dd7c:	3901      	subs	r1, #1
    dd7e:	3401      	adds	r4, #1
    dd80:	440a      	add	r2, r1
    dd82:	2b07      	cmp	r3, #7
    dd84:	f8ca 4000 	str.w	r4, [sl]
    dd88:	9325      	str	r3, [sp, #148]	; 0x94
    dd8a:	f8ca 1004 	str.w	r1, [sl, #4]
    dd8e:	9226      	str	r2, [sp, #152]	; 0x98
    dd90:	f300 815b 	bgt.w	e04a <_svfprintf_r+0xbfa>
    dd94:	f10a 0a08 	add.w	sl, sl, #8
    dd98:	9914      	ldr	r1, [sp, #80]	; 0x50
    dd9a:	f8ca 1004 	str.w	r1, [sl, #4]
    dd9e:	3301      	adds	r3, #1
    dda0:	440a      	add	r2, r1
    dda2:	2b07      	cmp	r3, #7
    dda4:	a91e      	add	r1, sp, #120	; 0x78
    dda6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ddaa:	f8ca 1000 	str.w	r1, [sl]
    ddae:	f77f ace5 	ble.w	d77c <_svfprintf_r+0x32c>
    ddb2:	ee1b 1a10 	vmov	r1, s22
    ddb6:	aa24      	add	r2, sp, #144	; 0x90
    ddb8:	4658      	mov	r0, fp
    ddba:	f004 f9d5 	bl	12168 <__ssprint_r>
    ddbe:	2800      	cmp	r0, #0
    ddc0:	d1ab      	bne.n	dd1a <_svfprintf_r+0x8ca>
    ddc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ddc4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ddc8:	e4da      	b.n	d780 <_svfprintf_r+0x330>
    ddca:	2d10      	cmp	r5, #16
    ddcc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    ddd0:	4e2c      	ldr	r6, [pc, #176]	; (de84 <_svfprintf_r+0xa34>)
    ddd2:	dd24      	ble.n	de1e <_svfprintf_r+0x9ce>
    ddd4:	9417      	str	r4, [sp, #92]	; 0x5c
    ddd6:	2310      	movs	r3, #16
    ddd8:	ee1b 4a10 	vmov	r4, s22
    dddc:	4608      	mov	r0, r1
    ddde:	e004      	b.n	ddea <_svfprintf_r+0x99a>
    dde0:	3d10      	subs	r5, #16
    dde2:	2d10      	cmp	r5, #16
    dde4:	f10a 0a08 	add.w	sl, sl, #8
    dde8:	dd17      	ble.n	de1a <_svfprintf_r+0x9ca>
    ddea:	3001      	adds	r0, #1
    ddec:	3210      	adds	r2, #16
    ddee:	2807      	cmp	r0, #7
    ddf0:	e9ca 6300 	strd	r6, r3, [sl]
    ddf4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    ddf8:	ddf2      	ble.n	dde0 <_svfprintf_r+0x990>
    ddfa:	aa24      	add	r2, sp, #144	; 0x90
    ddfc:	4621      	mov	r1, r4
    ddfe:	4658      	mov	r0, fp
    de00:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de04:	f004 f9b0 	bl	12168 <__ssprint_r>
    de08:	2800      	cmp	r0, #0
    de0a:	d186      	bne.n	dd1a <_svfprintf_r+0x8ca>
    de0c:	3d10      	subs	r5, #16
    de0e:	2d10      	cmp	r5, #16
    de10:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    de14:	f04f 0310 	mov.w	r3, #16
    de18:	dce7      	bgt.n	ddea <_svfprintf_r+0x99a>
    de1a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    de1c:	4601      	mov	r1, r0
    de1e:	3101      	adds	r1, #1
    de20:	442a      	add	r2, r5
    de22:	2907      	cmp	r1, #7
    de24:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    de28:	f8ca 6000 	str.w	r6, [sl]
    de2c:	f8ca 5004 	str.w	r5, [sl, #4]
    de30:	f300 83bd 	bgt.w	e5ae <_svfprintf_r+0x115e>
    de34:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    de38:	f10a 0a08 	add.w	sl, sl, #8
    de3c:	e45d      	b.n	d6fa <_svfprintf_r+0x2aa>
    de3e:	f8cd 8008 	str.w	r8, [sp, #8]
    de42:	2a0a      	cmp	r2, #10
    de44:	f171 0300 	sbcs.w	r3, r1, #0
    de48:	f080 8345 	bcs.w	e4d6 <_svfprintf_r+0x1086>
    de4c:	3230      	adds	r2, #48	; 0x30
    de4e:	2301      	movs	r3, #1
    de50:	f8dd 8008 	ldr.w	r8, [sp, #8]
    de54:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    de58:	9305      	str	r3, [sp, #20]
    de5a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    de5e:	e668      	b.n	db32 <_svfprintf_r+0x6e2>
    de60:	ee1b 1a10 	vmov	r1, s22
    de64:	aa24      	add	r2, sp, #144	; 0x90
    de66:	4658      	mov	r0, fp
    de68:	f004 f97e 	bl	12168 <__ssprint_r>
    de6c:	2800      	cmp	r0, #0
    de6e:	f47f af54 	bne.w	dd1a <_svfprintf_r+0x8ca>
    de72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    de74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de78:	e452      	b.n	d720 <_svfprintf_r+0x2d0>
    de7a:	bf00      	nop
    de7c:	20000d78 	.word	0x20000d78
    de80:	2000857c 	.word	0x2000857c
    de84:	200027f4 	.word	0x200027f4
    de88:	ee1b 1a10 	vmov	r1, s22
    de8c:	aa24      	add	r2, sp, #144	; 0x90
    de8e:	4658      	mov	r0, fp
    de90:	f004 f96a 	bl	12168 <__ssprint_r>
    de94:	2800      	cmp	r0, #0
    de96:	f47f af40 	bne.w	dd1a <_svfprintf_r+0x8ca>
    de9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    de9c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dea0:	e451      	b.n	d746 <_svfprintf_r+0x2f6>
    dea2:	2c10      	cmp	r4, #16
    dea4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dea6:	4ebe      	ldr	r6, [pc, #760]	; (e1a0 <_svfprintf_r+0xd50>)
    dea8:	dd1f      	ble.n	deea <_svfprintf_r+0xa9a>
    deaa:	ee1b 8a10 	vmov	r8, s22
    deae:	2510      	movs	r5, #16
    deb0:	e004      	b.n	debc <_svfprintf_r+0xa6c>
    deb2:	3c10      	subs	r4, #16
    deb4:	2c10      	cmp	r4, #16
    deb6:	f10a 0a08 	add.w	sl, sl, #8
    deba:	dd16      	ble.n	deea <_svfprintf_r+0xa9a>
    debc:	3301      	adds	r3, #1
    debe:	3210      	adds	r2, #16
    dec0:	2b07      	cmp	r3, #7
    dec2:	e9ca 6500 	strd	r6, r5, [sl]
    dec6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    deca:	ddf2      	ble.n	deb2 <_svfprintf_r+0xa62>
    decc:	aa24      	add	r2, sp, #144	; 0x90
    dece:	4641      	mov	r1, r8
    ded0:	4658      	mov	r0, fp
    ded2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ded6:	f004 f947 	bl	12168 <__ssprint_r>
    deda:	2800      	cmp	r0, #0
    dedc:	f47f af1d 	bne.w	dd1a <_svfprintf_r+0x8ca>
    dee0:	3c10      	subs	r4, #16
    dee2:	2c10      	cmp	r4, #16
    dee4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dee8:	dce8      	bgt.n	debc <_svfprintf_r+0xa6c>
    deea:	3301      	adds	r3, #1
    deec:	4422      	add	r2, r4
    deee:	2b07      	cmp	r3, #7
    def0:	e9ca 6400 	strd	r6, r4, [sl]
    def4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    def8:	f77f ac4b 	ble.w	d792 <_svfprintf_r+0x342>
    defc:	ee1b 1a10 	vmov	r1, s22
    df00:	aa24      	add	r2, sp, #144	; 0x90
    df02:	4658      	mov	r0, fp
    df04:	f004 f930 	bl	12168 <__ssprint_r>
    df08:	2800      	cmp	r0, #0
    df0a:	f47f af06 	bne.w	dd1a <_svfprintf_r+0x8ca>
    df0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    df10:	e43f      	b.n	d792 <_svfprintf_r+0x342>
    df12:	991b      	ldr	r1, [sp, #108]	; 0x6c
    df14:	2900      	cmp	r1, #0
    df16:	f340 835a 	ble.w	e5ce <_svfprintf_r+0x117e>
    df1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    df1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df1e:	429e      	cmp	r6, r3
    df20:	bfa8      	it	ge
    df22:	461e      	movge	r6, r3
    df24:	2e00      	cmp	r6, #0
    df26:	dd0b      	ble.n	df40 <_svfprintf_r+0xaf0>
    df28:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df2a:	3301      	adds	r3, #1
    df2c:	4432      	add	r2, r6
    df2e:	2b07      	cmp	r3, #7
    df30:	e9ca 4600 	strd	r4, r6, [sl]
    df34:	9226      	str	r2, [sp, #152]	; 0x98
    df36:	9325      	str	r3, [sp, #148]	; 0x94
    df38:	f300 8689 	bgt.w	ec4e <_svfprintf_r+0x17fe>
    df3c:	f10a 0a08 	add.w	sl, sl, #8
    df40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    df42:	2e00      	cmp	r6, #0
    df44:	bfa8      	it	ge
    df46:	1bad      	subge	r5, r5, r6
    df48:	2d00      	cmp	r5, #0
    df4a:	f300 8203 	bgt.w	e354 <_svfprintf_r+0xf04>
    df4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df50:	f418 6f80 	tst.w	r8, #1024	; 0x400
    df54:	4423      	add	r3, r4
    df56:	9305      	str	r3, [sp, #20]
    df58:	f040 821f 	bne.w	e39a <_svfprintf_r+0xf4a>
    df5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    df5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    df60:	428b      	cmp	r3, r1
    df62:	db03      	blt.n	df6c <_svfprintf_r+0xb1c>
    df64:	f018 0f01 	tst.w	r8, #1
    df68:	f000 84cf 	beq.w	e90a <_svfprintf_r+0x14ba>
    df6c:	9910      	ldr	r1, [sp, #64]	; 0x40
    df6e:	9812      	ldr	r0, [sp, #72]	; 0x48
    df70:	440a      	add	r2, r1
    df72:	e9ca 0100 	strd	r0, r1, [sl]
    df76:	9925      	ldr	r1, [sp, #148]	; 0x94
    df78:	9226      	str	r2, [sp, #152]	; 0x98
    df7a:	3101      	adds	r1, #1
    df7c:	2907      	cmp	r1, #7
    df7e:	9125      	str	r1, [sp, #148]	; 0x94
    df80:	f300 86a5 	bgt.w	ecce <_svfprintf_r+0x187e>
    df84:	f10a 0a08 	add.w	sl, sl, #8
    df88:	990e      	ldr	r1, [sp, #56]	; 0x38
    df8a:	1865      	adds	r5, r4, r1
    df8c:	1acc      	subs	r4, r1, r3
    df8e:	9b05      	ldr	r3, [sp, #20]
    df90:	1aed      	subs	r5, r5, r3
    df92:	42a5      	cmp	r5, r4
    df94:	bfa8      	it	ge
    df96:	4625      	movge	r5, r4
    df98:	2d00      	cmp	r5, #0
    df9a:	dd0d      	ble.n	dfb8 <_svfprintf_r+0xb68>
    df9c:	f8ca 3000 	str.w	r3, [sl]
    dfa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfa2:	f8ca 5004 	str.w	r5, [sl, #4]
    dfa6:	3301      	adds	r3, #1
    dfa8:	442a      	add	r2, r5
    dfaa:	2b07      	cmp	r3, #7
    dfac:	9226      	str	r2, [sp, #152]	; 0x98
    dfae:	9325      	str	r3, [sp, #148]	; 0x94
    dfb0:	f300 86bb 	bgt.w	ed2a <_svfprintf_r+0x18da>
    dfb4:	f10a 0a08 	add.w	sl, sl, #8
    dfb8:	2d00      	cmp	r5, #0
    dfba:	bfa8      	it	ge
    dfbc:	1b64      	subge	r4, r4, r5
    dfbe:	2c00      	cmp	r4, #0
    dfc0:	f77f abde 	ble.w	d780 <_svfprintf_r+0x330>
    dfc4:	2c10      	cmp	r4, #16
    dfc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfc8:	f340 837c 	ble.w	e6c4 <_svfprintf_r+0x1274>
    dfcc:	ee1b 6a10 	vmov	r6, s22
    dfd0:	2510      	movs	r5, #16
    dfd2:	e005      	b.n	dfe0 <_svfprintf_r+0xb90>
    dfd4:	f10a 0a08 	add.w	sl, sl, #8
    dfd8:	3c10      	subs	r4, #16
    dfda:	2c10      	cmp	r4, #16
    dfdc:	f340 8372 	ble.w	e6c4 <_svfprintf_r+0x1274>
    dfe0:	3301      	adds	r3, #1
    dfe2:	4970      	ldr	r1, [pc, #448]	; (e1a4 <_svfprintf_r+0xd54>)
    dfe4:	3210      	adds	r2, #16
    dfe6:	2b07      	cmp	r3, #7
    dfe8:	e9ca 1500 	strd	r1, r5, [sl]
    dfec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dff0:	ddf0      	ble.n	dfd4 <_svfprintf_r+0xb84>
    dff2:	aa24      	add	r2, sp, #144	; 0x90
    dff4:	4631      	mov	r1, r6
    dff6:	4658      	mov	r0, fp
    dff8:	f004 f8b6 	bl	12168 <__ssprint_r>
    dffc:	2800      	cmp	r0, #0
    dffe:	f47f ae8c 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e002:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e006:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e00a:	e7e5      	b.n	dfd8 <_svfprintf_r+0xb88>
    e00c:	2b30      	cmp	r3, #48	; 0x30
    e00e:	f43f ad8b 	beq.w	db28 <_svfprintf_r+0x6d8>
    e012:	2330      	movs	r3, #48	; 0x30
    e014:	3802      	subs	r0, #2
    e016:	f804 3c01 	strb.w	r3, [r4, #-1]
    e01a:	ab50      	add	r3, sp, #320	; 0x140
    e01c:	1a1b      	subs	r3, r3, r0
    e01e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e022:	9305      	str	r3, [sp, #20]
    e024:	4604      	mov	r4, r0
    e026:	e584      	b.n	db32 <_svfprintf_r+0x6e2>
    e028:	f018 0f01 	tst.w	r8, #1
    e02c:	f47f ae82 	bne.w	dd34 <_svfprintf_r+0x8e4>
    e030:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e032:	f8ca 4000 	str.w	r4, [sl]
    e036:	3301      	adds	r3, #1
    e038:	3201      	adds	r2, #1
    e03a:	2101      	movs	r1, #1
    e03c:	2b07      	cmp	r3, #7
    e03e:	9226      	str	r2, [sp, #152]	; 0x98
    e040:	9325      	str	r3, [sp, #148]	; 0x94
    e042:	f8ca 1004 	str.w	r1, [sl, #4]
    e046:	f77f aea5 	ble.w	dd94 <_svfprintf_r+0x944>
    e04a:	ee1b 1a10 	vmov	r1, s22
    e04e:	aa24      	add	r2, sp, #144	; 0x90
    e050:	4658      	mov	r0, fp
    e052:	f004 f889 	bl	12168 <__ssprint_r>
    e056:	2800      	cmp	r0, #0
    e058:	f47f ae5f 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e05c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e060:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e064:	e698      	b.n	dd98 <_svfprintf_r+0x948>
    e066:	990e      	ldr	r1, [sp, #56]	; 0x38
    e068:	1e4c      	subs	r4, r1, #1
    e06a:	2c00      	cmp	r4, #0
    e06c:	f77f ae94 	ble.w	dd98 <_svfprintf_r+0x948>
    e070:	2c10      	cmp	r4, #16
    e072:	f340 8361 	ble.w	e738 <_svfprintf_r+0x12e8>
    e076:	ee1b 6a10 	vmov	r6, s22
    e07a:	2510      	movs	r5, #16
    e07c:	e005      	b.n	e08a <_svfprintf_r+0xc3a>
    e07e:	f10a 0a08 	add.w	sl, sl, #8
    e082:	3c10      	subs	r4, #16
    e084:	2c10      	cmp	r4, #16
    e086:	f340 8357 	ble.w	e738 <_svfprintf_r+0x12e8>
    e08a:	3301      	adds	r3, #1
    e08c:	4945      	ldr	r1, [pc, #276]	; (e1a4 <_svfprintf_r+0xd54>)
    e08e:	3210      	adds	r2, #16
    e090:	2b07      	cmp	r3, #7
    e092:	e9ca 1500 	strd	r1, r5, [sl]
    e096:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e09a:	ddf0      	ble.n	e07e <_svfprintf_r+0xc2e>
    e09c:	aa24      	add	r2, sp, #144	; 0x90
    e09e:	4631      	mov	r1, r6
    e0a0:	4658      	mov	r0, fp
    e0a2:	f004 f861 	bl	12168 <__ssprint_r>
    e0a6:	2800      	cmp	r0, #0
    e0a8:	f47f ae37 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e0ac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0b4:	e7e5      	b.n	e082 <_svfprintf_r+0xc32>
    e0b6:	ee1b 1a10 	vmov	r1, s22
    e0ba:	aa24      	add	r2, sp, #144	; 0x90
    e0bc:	4658      	mov	r0, fp
    e0be:	f004 f853 	bl	12168 <__ssprint_r>
    e0c2:	2800      	cmp	r0, #0
    e0c4:	f47f ae29 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e0c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e0ca:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0ce:	f7ff bb44 	b.w	d75a <_svfprintf_r+0x30a>
    e0d2:	9b02      	ldr	r3, [sp, #8]
    e0d4:	f013 0310 	ands.w	r3, r3, #16
    e0d8:	f040 80c1 	bne.w	e25e <_svfprintf_r+0xe0e>
    e0dc:	9a02      	ldr	r2, [sp, #8]
    e0de:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e0e2:	f000 837a 	beq.w	e7da <_svfprintf_r+0x138a>
    e0e6:	9808      	ldr	r0, [sp, #32]
    e0e8:	f850 2b04 	ldr.w	r2, [r0], #4
    e0ec:	9008      	str	r0, [sp, #32]
    e0ee:	4619      	mov	r1, r3
    e0f0:	b292      	uxth	r2, r2
    e0f2:	2301      	movs	r3, #1
    e0f4:	e451      	b.n	d99a <_svfprintf_r+0x54a>
    e0f6:	f018 0310 	ands.w	r3, r8, #16
    e0fa:	d155      	bne.n	e1a8 <_svfprintf_r+0xd58>
    e0fc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e100:	f000 835d 	beq.w	e7be <_svfprintf_r+0x136e>
    e104:	9808      	ldr	r0, [sp, #32]
    e106:	f850 2b04 	ldr.w	r2, [r0], #4
    e10a:	9008      	str	r0, [sp, #32]
    e10c:	4619      	mov	r1, r3
    e10e:	b292      	uxth	r2, r2
    e110:	e4a8      	b.n	da64 <_svfprintf_r+0x614>
    e112:	4252      	negs	r2, r2
    e114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e118:	f8cd 8008 	str.w	r8, [sp, #8]
    e11c:	202d      	movs	r0, #45	; 0x2d
    e11e:	2301      	movs	r3, #1
    e120:	e43c      	b.n	d99c <_svfprintf_r+0x54c>
    e122:	ee1b 1a10 	vmov	r1, s22
    e126:	aa24      	add	r2, sp, #144	; 0x90
    e128:	4658      	mov	r0, fp
    e12a:	f004 f81d 	bl	12168 <__ssprint_r>
    e12e:	2800      	cmp	r0, #0
    e130:	f47f adf3 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e134:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e138:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e13c:	e616      	b.n	dd6c <_svfprintf_r+0x91c>
    e13e:	ee1b 1a10 	vmov	r1, s22
    e142:	aa24      	add	r2, sp, #144	; 0x90
    e144:	4658      	mov	r0, fp
    e146:	f004 f80f 	bl	12168 <__ssprint_r>
    e14a:	2800      	cmp	r0, #0
    e14c:	f47f ade5 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e150:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e154:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e158:	e5fb      	b.n	dd52 <_svfprintf_r+0x902>
    e15a:	f018 0f01 	tst.w	r8, #1
    e15e:	f43f ab0f 	beq.w	d780 <_svfprintf_r+0x330>
    e162:	e52a      	b.n	dbba <_svfprintf_r+0x76a>
    e164:	9308      	str	r3, [sp, #32]
    e166:	f899 3000 	ldrb.w	r3, [r9]
    e16a:	f7ff b9cd 	b.w	d508 <_svfprintf_r+0xb8>
    e16e:	ac50      	add	r4, sp, #320	; 0x140
    e170:	e4df      	b.n	db32 <_svfprintf_r+0x6e2>
    e172:	f418 7f00 	tst.w	r8, #512	; 0x200
    e176:	f040 83db 	bne.w	e930 <_svfprintf_r+0x14e0>
    e17a:	f853 2b04 	ldr.w	r2, [r3], #4
    e17e:	9308      	str	r3, [sp, #32]
    e180:	17d1      	asrs	r1, r2, #31
    e182:	460b      	mov	r3, r1
    e184:	f7ff bbb6 	b.w	d8f4 <_svfprintf_r+0x4a4>
    e188:	9b08      	ldr	r3, [sp, #32]
    e18a:	9804      	ldr	r0, [sp, #16]
    e18c:	f853 1b04 	ldr.w	r1, [r3], #4
    e190:	9308      	str	r3, [sp, #32]
    e192:	17c2      	asrs	r2, r0, #31
    e194:	e9c1 0200 	strd	r0, r2, [r1]
    e198:	464c      	mov	r4, r9
    e19a:	f7ff b98b 	b.w	d4b4 <_svfprintf_r+0x64>
    e19e:	bf00      	nop
    e1a0:	200027f4 	.word	0x200027f4
    e1a4:	2000857c 	.word	0x2000857c
    e1a8:	9b08      	ldr	r3, [sp, #32]
    e1aa:	f853 2b04 	ldr.w	r2, [r3], #4
    e1ae:	9308      	str	r3, [sp, #32]
    e1b0:	e458      	b.n	da64 <_svfprintf_r+0x614>
    e1b2:	eeb4 8b48 	vcmp.f64	d8, d8
    e1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e1ba:	f180 8694 	bvs.w	eee6 <_svfprintf_r+0x1a96>
    e1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e1c0:	2b61      	cmp	r3, #97	; 0x61
    e1c2:	f000 8552 	beq.w	ec6a <_svfprintf_r+0x181a>
    e1c6:	2b41      	cmp	r3, #65	; 0x41
    e1c8:	f000 85c0 	beq.w	ed4c <_svfprintf_r+0x18fc>
    e1cc:	9b03      	ldr	r3, [sp, #12]
    e1ce:	3301      	adds	r3, #1
    e1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e1d2:	f023 0520 	bic.w	r5, r3, #32
    e1d6:	f000 8480 	beq.w	eada <_svfprintf_r+0x168a>
    e1da:	2d47      	cmp	r5, #71	; 0x47
    e1dc:	d104      	bne.n	e1e8 <_svfprintf_r+0xd98>
    e1de:	9b03      	ldr	r3, [sp, #12]
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	bf08      	it	eq
    e1e4:	2301      	moveq	r3, #1
    e1e6:	9303      	str	r3, [sp, #12]
    e1e8:	ee18 3a90 	vmov	r3, s17
    e1ec:	2b00      	cmp	r3, #0
    e1ee:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    e1f2:	4646      	mov	r6, r8
    e1f4:	f2c0 8618 	blt.w	ee28 <_svfprintf_r+0x19d8>
    e1f8:	eeb0 ab48 	vmov.f64	d10, d8
    e1fc:	2300      	movs	r3, #0
    e1fe:	4690      	mov	r8, r2
    e200:	9309      	str	r3, [sp, #36]	; 0x24
    e202:	9307      	str	r3, [sp, #28]
    e204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e206:	3b41      	subs	r3, #65	; 0x41
    e208:	2b25      	cmp	r3, #37	; 0x25
    e20a:	f200 8398 	bhi.w	e93e <_svfprintf_r+0x14ee>
    e20e:	e8df f013 	tbh	[pc, r3, lsl #1]
    e212:	046f      	.short	0x046f
    e214:	03960396 	.word	0x03960396
    e218:	04680396 	.word	0x04680396
    e21c:	0396046c 	.word	0x0396046c
    e220:	03960396 	.word	0x03960396
    e224:	03960396 	.word	0x03960396
    e228:	03960396 	.word	0x03960396
    e22c:	03960396 	.word	0x03960396
    e230:	03960396 	.word	0x03960396
    e234:	03960396 	.word	0x03960396
    e238:	03960396 	.word	0x03960396
    e23c:	03960396 	.word	0x03960396
    e240:	03960396 	.word	0x03960396
    e244:	03960396 	.word	0x03960396
    e248:	03960396 	.word	0x03960396
    e24c:	03960396 	.word	0x03960396
    e250:	03960396 	.word	0x03960396
    e254:	03960396 	.word	0x03960396
    e258:	04680396 	.word	0x04680396
    e25c:	046c      	.short	0x046c
    e25e:	9b08      	ldr	r3, [sp, #32]
    e260:	f853 2b04 	ldr.w	r2, [r3], #4
    e264:	9308      	str	r3, [sp, #32]
    e266:	2301      	movs	r3, #1
    e268:	f7ff bb97 	b.w	d99a <_svfprintf_r+0x54a>
    e26c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e26e:	2b00      	cmp	r3, #0
    e270:	f43f a9cf 	beq.w	d612 <_svfprintf_r+0x1c2>
    e274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e276:	781b      	ldrb	r3, [r3, #0]
    e278:	2b00      	cmp	r3, #0
    e27a:	f43f a9ca 	beq.w	d612 <_svfprintf_r+0x1c2>
    e27e:	f899 3000 	ldrb.w	r3, [r9]
    e282:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    e286:	f7ff b93f 	b.w	d508 <_svfprintf_r+0xb8>
    e28a:	930b      	str	r3, [sp, #44]	; 0x2c
    e28c:	f8cd 8008 	str.w	r8, [sp, #8]
    e290:	f7ff bbf1 	b.w	da76 <_svfprintf_r+0x626>
    e294:	930b      	str	r3, [sp, #44]	; 0x2c
    e296:	4b9a      	ldr	r3, [pc, #616]	; (e500 <_svfprintf_r+0x10b0>)
    e298:	9311      	str	r3, [sp, #68]	; 0x44
    e29a:	f018 0120 	ands.w	r1, r8, #32
    e29e:	f000 8105 	beq.w	e4ac <_svfprintf_r+0x105c>
    e2a2:	9b08      	ldr	r3, [sp, #32]
    e2a4:	3307      	adds	r3, #7
    e2a6:	f023 0307 	bic.w	r3, r3, #7
    e2aa:	6859      	ldr	r1, [r3, #4]
    e2ac:	f853 2b08 	ldr.w	r2, [r3], #8
    e2b0:	9308      	str	r3, [sp, #32]
    e2b2:	f018 0f01 	tst.w	r8, #1
    e2b6:	d00a      	beq.n	e2ce <_svfprintf_r+0xe7e>
    e2b8:	ea52 0301 	orrs.w	r3, r2, r1
    e2bc:	d007      	beq.n	e2ce <_svfprintf_r+0xe7e>
    e2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e2c0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e2c4:	2330      	movs	r3, #48	; 0x30
    e2c6:	f048 0802 	orr.w	r8, r8, #2
    e2ca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e2ce:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e2d2:	9302      	str	r3, [sp, #8]
    e2d4:	2302      	movs	r3, #2
    e2d6:	f7ff bb60 	b.w	d99a <_svfprintf_r+0x54a>
    e2da:	930b      	str	r3, [sp, #44]	; 0x2c
    e2dc:	f7ff bbb6 	b.w	da4c <_svfprintf_r+0x5fc>
    e2e0:	930b      	str	r3, [sp, #44]	; 0x2c
    e2e2:	4b88      	ldr	r3, [pc, #544]	; (e504 <_svfprintf_r+0x10b4>)
    e2e4:	9311      	str	r3, [sp, #68]	; 0x44
    e2e6:	e7d8      	b.n	e29a <_svfprintf_r+0xe4a>
    e2e8:	9b08      	ldr	r3, [sp, #32]
    e2ea:	2101      	movs	r1, #1
    e2ec:	f853 2b04 	ldr.w	r2, [r3], #4
    e2f0:	9102      	str	r1, [sp, #8]
    e2f2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    e2f6:	9308      	str	r3, [sp, #32]
    e2f8:	9105      	str	r1, [sp, #20]
    e2fa:	ac37      	add	r4, sp, #220	; 0xdc
    e2fc:	f7ff baaf 	b.w	d85e <_svfprintf_r+0x40e>
    e300:	ee1b 1a10 	vmov	r1, s22
    e304:	aa24      	add	r2, sp, #144	; 0x90
    e306:	4658      	mov	r0, fp
    e308:	f003 ff2e 	bl	12168 <__ssprint_r>
    e30c:	2800      	cmp	r0, #0
    e30e:	f47f ad04 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e312:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e314:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e318:	e45d      	b.n	dbd6 <_svfprintf_r+0x786>
    e31a:	9b03      	ldr	r3, [sp, #12]
    e31c:	9407      	str	r4, [sp, #28]
    e31e:	2b06      	cmp	r3, #6
    e320:	4622      	mov	r2, r4
    e322:	bf28      	it	cs
    e324:	2306      	movcs	r3, #6
    e326:	9403      	str	r4, [sp, #12]
    e328:	4621      	mov	r1, r4
    e32a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    e32e:	4c76      	ldr	r4, [pc, #472]	; (e508 <_svfprintf_r+0x10b8>)
    e330:	9302      	str	r3, [sp, #8]
    e332:	9305      	str	r3, [sp, #20]
    e334:	920f      	str	r2, [sp, #60]	; 0x3c
    e336:	f7ff ba6c 	b.w	d812 <_svfprintf_r+0x3c2>
    e33a:	2140      	movs	r1, #64	; 0x40
    e33c:	4658      	mov	r0, fp
    e33e:	f7fb fa3d 	bl	97bc <_malloc_r>
    e342:	6020      	str	r0, [r4, #0]
    e344:	6120      	str	r0, [r4, #16]
    e346:	2800      	cmp	r0, #0
    e348:	f000 860f 	beq.w	ef6a <_svfprintf_r+0x1b1a>
    e34c:	2340      	movs	r3, #64	; 0x40
    e34e:	6163      	str	r3, [r4, #20]
    e350:	f7ff b89e 	b.w	d490 <_svfprintf_r+0x40>
    e354:	2d10      	cmp	r5, #16
    e356:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e358:	f340 825d 	ble.w	e816 <_svfprintf_r+0x13c6>
    e35c:	4651      	mov	r1, sl
    e35e:	2610      	movs	r6, #16
    e360:	ee1b aa10 	vmov	sl, s22
    e364:	e004      	b.n	e370 <_svfprintf_r+0xf20>
    e366:	3108      	adds	r1, #8
    e368:	3d10      	subs	r5, #16
    e36a:	2d10      	cmp	r5, #16
    e36c:	f340 8252 	ble.w	e814 <_svfprintf_r+0x13c4>
    e370:	3301      	adds	r3, #1
    e372:	4866      	ldr	r0, [pc, #408]	; (e50c <_svfprintf_r+0x10bc>)
    e374:	3210      	adds	r2, #16
    e376:	2b07      	cmp	r3, #7
    e378:	e9c1 0600 	strd	r0, r6, [r1]
    e37c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e380:	ddf1      	ble.n	e366 <_svfprintf_r+0xf16>
    e382:	aa24      	add	r2, sp, #144	; 0x90
    e384:	4651      	mov	r1, sl
    e386:	4658      	mov	r0, fp
    e388:	f003 feee 	bl	12168 <__ssprint_r>
    e38c:	2800      	cmp	r0, #0
    e38e:	f47f acc4 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e392:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e396:	a927      	add	r1, sp, #156	; 0x9c
    e398:	e7e6      	b.n	e368 <_svfprintf_r+0xf18>
    e39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e39c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e3a0:	18e3      	adds	r3, r4, r3
    e3a2:	9303      	str	r3, [sp, #12]
    e3a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e3a6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e3aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e3ac:	9d05      	ldr	r5, [sp, #20]
    e3ae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e3b2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e3b6:	940b      	str	r4, [sp, #44]	; 0x2c
    e3b8:	ee1b 1a10 	vmov	r1, s22
    e3bc:	4650      	mov	r0, sl
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d034      	beq.n	e42c <_svfprintf_r+0xfdc>
    e3c2:	f1b8 0f00 	cmp.w	r8, #0
    e3c6:	d135      	bne.n	e434 <_svfprintf_r+0xfe4>
    e3c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e3ca:	3b01      	subs	r3, #1
    e3cc:	3e01      	subs	r6, #1
    e3ce:	930d      	str	r3, [sp, #52]	; 0x34
    e3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e3d2:	e9c0 3900 	strd	r3, r9, [r0]
    e3d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e3d8:	3301      	adds	r3, #1
    e3da:	444a      	add	r2, r9
    e3dc:	2b07      	cmp	r3, #7
    e3de:	9226      	str	r2, [sp, #152]	; 0x98
    e3e0:	9325      	str	r3, [sp, #148]	; 0x94
    e3e2:	dc6c      	bgt.n	e4be <_svfprintf_r+0x106e>
    e3e4:	3008      	adds	r0, #8
    e3e6:	9b03      	ldr	r3, [sp, #12]
    e3e8:	f896 c000 	ldrb.w	ip, [r6]
    e3ec:	1b5b      	subs	r3, r3, r5
    e3ee:	4563      	cmp	r3, ip
    e3f0:	bfa8      	it	ge
    e3f2:	4663      	movge	r3, ip
    e3f4:	2b00      	cmp	r3, #0
    e3f6:	469a      	mov	sl, r3
    e3f8:	dd0c      	ble.n	e414 <_svfprintf_r+0xfc4>
    e3fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e3fc:	3401      	adds	r4, #1
    e3fe:	441a      	add	r2, r3
    e400:	2c07      	cmp	r4, #7
    e402:	e9c0 5300 	strd	r5, r3, [r0]
    e406:	9226      	str	r2, [sp, #152]	; 0x98
    e408:	9425      	str	r4, [sp, #148]	; 0x94
    e40a:	f300 8177 	bgt.w	e6fc <_svfprintf_r+0x12ac>
    e40e:	f896 c000 	ldrb.w	ip, [r6]
    e412:	3008      	adds	r0, #8
    e414:	f1ba 0f00 	cmp.w	sl, #0
    e418:	bfac      	ite	ge
    e41a:	ebac 040a 	subge.w	r4, ip, sl
    e41e:	4664      	movlt	r4, ip
    e420:	2c00      	cmp	r4, #0
    e422:	dc0a      	bgt.n	e43a <_svfprintf_r+0xfea>
    e424:	4465      	add	r5, ip
    e426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e428:	2b00      	cmp	r3, #0
    e42a:	d1ca      	bne.n	e3c2 <_svfprintf_r+0xf72>
    e42c:	f1b8 0f00 	cmp.w	r8, #0
    e430:	f000 83ac 	beq.w	eb8c <_svfprintf_r+0x173c>
    e434:	f108 38ff 	add.w	r8, r8, #4294967295
    e438:	e7ca      	b.n	e3d0 <_svfprintf_r+0xf80>
    e43a:	2c10      	cmp	r4, #16
    e43c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e440:	dd24      	ble.n	e48c <_svfprintf_r+0x103c>
    e442:	9505      	str	r5, [sp, #20]
    e444:	f04f 0a10 	mov.w	sl, #16
    e448:	4663      	mov	r3, ip
    e44a:	460d      	mov	r5, r1
    e44c:	e004      	b.n	e458 <_svfprintf_r+0x1008>
    e44e:	3c10      	subs	r4, #16
    e450:	2c10      	cmp	r4, #16
    e452:	f100 0008 	add.w	r0, r0, #8
    e456:	dd16      	ble.n	e486 <_svfprintf_r+0x1036>
    e458:	3301      	adds	r3, #1
    e45a:	492c      	ldr	r1, [pc, #176]	; (e50c <_svfprintf_r+0x10bc>)
    e45c:	3210      	adds	r2, #16
    e45e:	2b07      	cmp	r3, #7
    e460:	e9c0 1a00 	strd	r1, sl, [r0]
    e464:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e468:	ddf1      	ble.n	e44e <_svfprintf_r+0xffe>
    e46a:	aa24      	add	r2, sp, #144	; 0x90
    e46c:	4629      	mov	r1, r5
    e46e:	4658      	mov	r0, fp
    e470:	f003 fe7a 	bl	12168 <__ssprint_r>
    e474:	2800      	cmp	r0, #0
    e476:	f47f ac50 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e47a:	3c10      	subs	r4, #16
    e47c:	2c10      	cmp	r4, #16
    e47e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e482:	a827      	add	r0, sp, #156	; 0x9c
    e484:	dce8      	bgt.n	e458 <_svfprintf_r+0x1008>
    e486:	4629      	mov	r1, r5
    e488:	9d05      	ldr	r5, [sp, #20]
    e48a:	469c      	mov	ip, r3
    e48c:	f10c 0301 	add.w	r3, ip, #1
    e490:	4422      	add	r2, r4
    e492:	6044      	str	r4, [r0, #4]
    e494:	2b07      	cmp	r3, #7
    e496:	4c1d      	ldr	r4, [pc, #116]	; (e50c <_svfprintf_r+0x10bc>)
    e498:	6004      	str	r4, [r0, #0]
    e49a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e49e:	f300 83c6 	bgt.w	ec2e <_svfprintf_r+0x17de>
    e4a2:	f896 c000 	ldrb.w	ip, [r6]
    e4a6:	3008      	adds	r0, #8
    e4a8:	4465      	add	r5, ip
    e4aa:	e7bc      	b.n	e426 <_svfprintf_r+0xfd6>
    e4ac:	f018 0310 	ands.w	r3, r8, #16
    e4b0:	f000 80c2 	beq.w	e638 <_svfprintf_r+0x11e8>
    e4b4:	9b08      	ldr	r3, [sp, #32]
    e4b6:	f853 2b04 	ldr.w	r2, [r3], #4
    e4ba:	9308      	str	r3, [sp, #32]
    e4bc:	e6f9      	b.n	e2b2 <_svfprintf_r+0xe62>
    e4be:	aa24      	add	r2, sp, #144	; 0x90
    e4c0:	4658      	mov	r0, fp
    e4c2:	9105      	str	r1, [sp, #20]
    e4c4:	f003 fe50 	bl	12168 <__ssprint_r>
    e4c8:	2800      	cmp	r0, #0
    e4ca:	f47f ac26 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e4ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e4d0:	9905      	ldr	r1, [sp, #20]
    e4d2:	a827      	add	r0, sp, #156	; 0x9c
    e4d4:	e787      	b.n	e3e6 <_svfprintf_r+0xf96>
    e4d6:	9802      	ldr	r0, [sp, #8]
    e4d8:	f8cd a01c 	str.w	sl, [sp, #28]
    e4dc:	ac50      	add	r4, sp, #320	; 0x140
    e4de:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e4e2:	2500      	movs	r5, #0
    e4e4:	ee0a ba10 	vmov	s20, fp
    e4e8:	4b09      	ldr	r3, [pc, #36]	; (e510 <_svfprintf_r+0x10c0>)
    e4ea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e4ee:	f8cd 9014 	str.w	r9, [sp, #20]
    e4f2:	46a3      	mov	fp, r4
    e4f4:	f04f 0805 	mov.w	r8, #5
    e4f8:	46ac      	mov	ip, r5
    e4fa:	4604      	mov	r4, r0
    e4fc:	e010      	b.n	e520 <_svfprintf_r+0x10d0>
    e4fe:	bf00      	nop
    e500:	20000d48 	.word	0x20000d48
    e504:	20000d5c 	.word	0x20000d5c
    e508:	20000d70 	.word	0x20000d70
    e50c:	2000857c 	.word	0x2000857c
    e510:	cccccccd 	.word	0xcccccccd
    e514:	2a0a      	cmp	r2, #10
    e516:	f171 0100 	sbcs.w	r1, r1, #0
    e51a:	d336      	bcc.n	e58a <_svfprintf_r+0x113a>
    e51c:	464a      	mov	r2, r9
    e51e:	4631      	mov	r1, r6
    e520:	1850      	adds	r0, r2, r1
    e522:	f140 0000 	adc.w	r0, r0, #0
    e526:	fba3 5600 	umull	r5, r6, r3, r0
    e52a:	f026 0503 	bic.w	r5, r6, #3
    e52e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e532:	1b40      	subs	r0, r0, r5
    e534:	1a15      	subs	r5, r2, r0
    e536:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e53a:	f161 0e00 	sbc.w	lr, r1, #0
    e53e:	fb06 f605 	mul.w	r6, r6, r5
    e542:	fba5 9503 	umull	r9, r5, r5, r3
    e546:	fb03 660e 	mla	r6, r3, lr, r6
    e54a:	f009 0e01 	and.w	lr, r9, #1
    e54e:	442e      	add	r6, r5
    e550:	fbae 5e08 	umull	r5, lr, lr, r8
    e554:	182d      	adds	r5, r5, r0
    e556:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e55a:	3530      	adds	r5, #48	; 0x30
    e55c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e560:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e564:	f10c 0c01 	add.w	ip, ip, #1
    e568:	f10b 3bff 	add.w	fp, fp, #4294967295
    e56c:	0876      	lsrs	r6, r6, #1
    e56e:	2c00      	cmp	r4, #0
    e570:	d0d0      	beq.n	e514 <_svfprintf_r+0x10c4>
    e572:	f89a 0000 	ldrb.w	r0, [sl]
    e576:	4584      	cmp	ip, r0
    e578:	d1cc      	bne.n	e514 <_svfprintf_r+0x10c4>
    e57a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e57e:	d0c9      	beq.n	e514 <_svfprintf_r+0x10c4>
    e580:	2a0a      	cmp	r2, #10
    e582:	f171 0100 	sbcs.w	r1, r1, #0
    e586:	f080 818f 	bcs.w	e8a8 <_svfprintf_r+0x1458>
    e58a:	465c      	mov	r4, fp
    e58c:	ab50      	add	r3, sp, #320	; 0x140
    e58e:	1b1b      	subs	r3, r3, r4
    e590:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e594:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e598:	ee1a ba10 	vmov	fp, s20
    e59c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e5a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e5a4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e5a8:	9305      	str	r3, [sp, #20]
    e5aa:	f7ff bac2 	b.w	db32 <_svfprintf_r+0x6e2>
    e5ae:	ee1b 1a10 	vmov	r1, s22
    e5b2:	aa24      	add	r2, sp, #144	; 0x90
    e5b4:	4658      	mov	r0, fp
    e5b6:	f003 fdd7 	bl	12168 <__ssprint_r>
    e5ba:	2800      	cmp	r0, #0
    e5bc:	f47f abad 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e5c0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e5c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e5c6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e5ca:	f7ff b896 	b.w	d6fa <_svfprintf_r+0x2aa>
    e5ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e5d0:	48be      	ldr	r0, [pc, #760]	; (e8cc <_svfprintf_r+0x147c>)
    e5d2:	f8ca 0000 	str.w	r0, [sl]
    e5d6:	3301      	adds	r3, #1
    e5d8:	3201      	adds	r2, #1
    e5da:	2001      	movs	r0, #1
    e5dc:	2b07      	cmp	r3, #7
    e5de:	9226      	str	r2, [sp, #152]	; 0x98
    e5e0:	9325      	str	r3, [sp, #148]	; 0x94
    e5e2:	f8ca 0004 	str.w	r0, [sl, #4]
    e5e6:	f300 8177 	bgt.w	e8d8 <_svfprintf_r+0x1488>
    e5ea:	f10a 0a08 	add.w	sl, sl, #8
    e5ee:	2900      	cmp	r1, #0
    e5f0:	f040 80af 	bne.w	e752 <_svfprintf_r+0x1302>
    e5f4:	990e      	ldr	r1, [sp, #56]	; 0x38
    e5f6:	f008 0301 	and.w	r3, r8, #1
    e5fa:	430b      	orrs	r3, r1
    e5fc:	f43f a8c0 	beq.w	d780 <_svfprintf_r+0x330>
    e600:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e602:	9912      	ldr	r1, [sp, #72]	; 0x48
    e604:	441a      	add	r2, r3
    e606:	e9ca 1300 	strd	r1, r3, [sl]
    e60a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e60c:	9226      	str	r2, [sp, #152]	; 0x98
    e60e:	3301      	adds	r3, #1
    e610:	2b07      	cmp	r3, #7
    e612:	9325      	str	r3, [sp, #148]	; 0x94
    e614:	f300 8252 	bgt.w	eabc <_svfprintf_r+0x166c>
    e618:	f10a 0a08 	add.w	sl, sl, #8
    e61c:	990e      	ldr	r1, [sp, #56]	; 0x38
    e61e:	f8ca 4000 	str.w	r4, [sl]
    e622:	3301      	adds	r3, #1
    e624:	440a      	add	r2, r1
    e626:	2b07      	cmp	r3, #7
    e628:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e62c:	f8ca 1004 	str.w	r1, [sl, #4]
    e630:	f77f a8a4 	ble.w	d77c <_svfprintf_r+0x32c>
    e634:	f7ff bbbd 	b.w	ddb2 <_svfprintf_r+0x962>
    e638:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e63c:	f000 80dd 	beq.w	e7fa <_svfprintf_r+0x13aa>
    e640:	9808      	ldr	r0, [sp, #32]
    e642:	f850 2b04 	ldr.w	r2, [r0], #4
    e646:	9008      	str	r0, [sp, #32]
    e648:	4619      	mov	r1, r3
    e64a:	b292      	uxth	r2, r2
    e64c:	e631      	b.n	e2b2 <_svfprintf_r+0xe62>
    e64e:	ee1b 1a10 	vmov	r1, s22
    e652:	aa24      	add	r2, sp, #144	; 0x90
    e654:	4658      	mov	r0, fp
    e656:	f003 fd87 	bl	12168 <__ssprint_r>
    e65a:	2800      	cmp	r0, #0
    e65c:	f47f ab5d 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e660:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e662:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e666:	f7ff baa3 	b.w	dbb0 <_svfprintf_r+0x760>
    e66a:	ae22      	add	r6, sp, #136	; 0x88
    e66c:	2208      	movs	r2, #8
    e66e:	2100      	movs	r1, #0
    e670:	4630      	mov	r0, r6
    e672:	941d      	str	r4, [sp, #116]	; 0x74
    e674:	f7fc ffca 	bl	b60c <memset>
    e678:	9b03      	ldr	r3, [sp, #12]
    e67a:	1c5a      	adds	r2, r3, #1
    e67c:	f000 80db 	beq.w	e836 <_svfprintf_r+0x13e6>
    e680:	2500      	movs	r5, #0
    e682:	f8cd 9008 	str.w	r9, [sp, #8]
    e686:	f8cd 801c 	str.w	r8, [sp, #28]
    e68a:	4699      	mov	r9, r3
    e68c:	46a8      	mov	r8, r5
    e68e:	e00c      	b.n	e6aa <_svfprintf_r+0x125a>
    e690:	a937      	add	r1, sp, #220	; 0xdc
    e692:	4658      	mov	r0, fp
    e694:	f003 fc3e 	bl	11f14 <_wcrtomb_r>
    e698:	1c43      	adds	r3, r0, #1
    e69a:	4440      	add	r0, r8
    e69c:	f000 83c8 	beq.w	ee30 <_svfprintf_r+0x19e0>
    e6a0:	4548      	cmp	r0, r9
    e6a2:	dc08      	bgt.n	e6b6 <_svfprintf_r+0x1266>
    e6a4:	f000 8418 	beq.w	eed8 <_svfprintf_r+0x1a88>
    e6a8:	4680      	mov	r8, r0
    e6aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e6ac:	5952      	ldr	r2, [r2, r5]
    e6ae:	4633      	mov	r3, r6
    e6b0:	3504      	adds	r5, #4
    e6b2:	2a00      	cmp	r2, #0
    e6b4:	d1ec      	bne.n	e690 <_svfprintf_r+0x1240>
    e6b6:	f8cd 8014 	str.w	r8, [sp, #20]
    e6ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e6be:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e6c2:	e0c5      	b.n	e850 <_svfprintf_r+0x1400>
    e6c4:	3301      	adds	r3, #1
    e6c6:	4982      	ldr	r1, [pc, #520]	; (e8d0 <_svfprintf_r+0x1480>)
    e6c8:	f8ca 4004 	str.w	r4, [sl, #4]
    e6cc:	4422      	add	r2, r4
    e6ce:	2b07      	cmp	r3, #7
    e6d0:	f8ca 1000 	str.w	r1, [sl]
    e6d4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e6d8:	f77f a850 	ble.w	d77c <_svfprintf_r+0x32c>
    e6dc:	f7ff bb69 	b.w	ddb2 <_svfprintf_r+0x962>
    e6e0:	ee1b 1a10 	vmov	r1, s22
    e6e4:	aa24      	add	r2, sp, #144	; 0x90
    e6e6:	4658      	mov	r0, fp
    e6e8:	f003 fd3e 	bl	12168 <__ssprint_r>
    e6ec:	2800      	cmp	r0, #0
    e6ee:	f47f ab14 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e6f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e6f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e6f8:	f7ff b829 	b.w	d74e <_svfprintf_r+0x2fe>
    e6fc:	aa24      	add	r2, sp, #144	; 0x90
    e6fe:	4658      	mov	r0, fp
    e700:	9105      	str	r1, [sp, #20]
    e702:	f003 fd31 	bl	12168 <__ssprint_r>
    e706:	2800      	cmp	r0, #0
    e708:	f47f ab07 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e70c:	f896 c000 	ldrb.w	ip, [r6]
    e710:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e712:	9905      	ldr	r1, [sp, #20]
    e714:	a827      	add	r0, sp, #156	; 0x9c
    e716:	e67d      	b.n	e414 <_svfprintf_r+0xfc4>
    e718:	2b01      	cmp	r3, #1
    e71a:	f8cd 8008 	str.w	r8, [sp, #8]
    e71e:	f47f a9f3 	bne.w	db08 <_svfprintf_r+0x6b8>
    e722:	f7ff bb93 	b.w	de4c <_svfprintf_r+0x9fc>
    e726:	9b08      	ldr	r3, [sp, #32]
    e728:	9904      	ldr	r1, [sp, #16]
    e72a:	f853 2b04 	ldr.w	r2, [r3], #4
    e72e:	464c      	mov	r4, r9
    e730:	6011      	str	r1, [r2, #0]
    e732:	9308      	str	r3, [sp, #32]
    e734:	f7fe bebe 	b.w	d4b4 <_svfprintf_r+0x64>
    e738:	3301      	adds	r3, #1
    e73a:	4965      	ldr	r1, [pc, #404]	; (e8d0 <_svfprintf_r+0x1480>)
    e73c:	f8ca 4004 	str.w	r4, [sl, #4]
    e740:	4422      	add	r2, r4
    e742:	2b07      	cmp	r3, #7
    e744:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e748:	f8ca 1000 	str.w	r1, [sl]
    e74c:	f77f ab22 	ble.w	dd94 <_svfprintf_r+0x944>
    e750:	e47b      	b.n	e04a <_svfprintf_r+0xbfa>
    e752:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e754:	9812      	ldr	r0, [sp, #72]	; 0x48
    e756:	441a      	add	r2, r3
    e758:	e9ca 0300 	strd	r0, r3, [sl]
    e75c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e75e:	9226      	str	r2, [sp, #152]	; 0x98
    e760:	3301      	adds	r3, #1
    e762:	2b07      	cmp	r3, #7
    e764:	9325      	str	r3, [sp, #148]	; 0x94
    e766:	f300 81a9 	bgt.w	eabc <_svfprintf_r+0x166c>
    e76a:	f10a 0a08 	add.w	sl, sl, #8
    e76e:	2900      	cmp	r1, #0
    e770:	f6bf af54 	bge.w	e61c <_svfprintf_r+0x11cc>
    e774:	424d      	negs	r5, r1
    e776:	3110      	adds	r1, #16
    e778:	f280 830f 	bge.w	ed9a <_svfprintf_r+0x194a>
    e77c:	ee1b 1a10 	vmov	r1, s22
    e780:	2610      	movs	r6, #16
    e782:	e005      	b.n	e790 <_svfprintf_r+0x1340>
    e784:	f10a 0a08 	add.w	sl, sl, #8
    e788:	3d10      	subs	r5, #16
    e78a:	2d10      	cmp	r5, #16
    e78c:	f340 8305 	ble.w	ed9a <_svfprintf_r+0x194a>
    e790:	3301      	adds	r3, #1
    e792:	484f      	ldr	r0, [pc, #316]	; (e8d0 <_svfprintf_r+0x1480>)
    e794:	3210      	adds	r2, #16
    e796:	2b07      	cmp	r3, #7
    e798:	e9ca 0600 	strd	r0, r6, [sl]
    e79c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7a0:	ddf0      	ble.n	e784 <_svfprintf_r+0x1334>
    e7a2:	aa24      	add	r2, sp, #144	; 0x90
    e7a4:	4658      	mov	r0, fp
    e7a6:	9103      	str	r1, [sp, #12]
    e7a8:	f003 fcde 	bl	12168 <__ssprint_r>
    e7ac:	2800      	cmp	r0, #0
    e7ae:	f47f aab4 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e7b2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e7b6:	9903      	ldr	r1, [sp, #12]
    e7b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e7bc:	e7e4      	b.n	e788 <_svfprintf_r+0x1338>
    e7be:	9b08      	ldr	r3, [sp, #32]
    e7c0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e7c4:	bf1a      	itte	ne
    e7c6:	4611      	movne	r1, r2
    e7c8:	f853 2b04 	ldrne.w	r2, [r3], #4
    e7cc:	f853 2b04 	ldreq.w	r2, [r3], #4
    e7d0:	9308      	str	r3, [sp, #32]
    e7d2:	bf18      	it	ne
    e7d4:	b2d2      	uxtbne	r2, r2
    e7d6:	f7ff b945 	b.w	da64 <_svfprintf_r+0x614>
    e7da:	9b02      	ldr	r3, [sp, #8]
    e7dc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    e7e0:	9b08      	ldr	r3, [sp, #32]
    e7e2:	bf1a      	itte	ne
    e7e4:	4611      	movne	r1, r2
    e7e6:	f853 2b04 	ldrne.w	r2, [r3], #4
    e7ea:	f853 2b04 	ldreq.w	r2, [r3], #4
    e7ee:	9308      	str	r3, [sp, #32]
    e7f0:	bf18      	it	ne
    e7f2:	b2d2      	uxtbne	r2, r2
    e7f4:	2301      	movs	r3, #1
    e7f6:	f7ff b8d0 	b.w	d99a <_svfprintf_r+0x54a>
    e7fa:	9b08      	ldr	r3, [sp, #32]
    e7fc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e800:	bf1a      	itte	ne
    e802:	4611      	movne	r1, r2
    e804:	f853 2b04 	ldrne.w	r2, [r3], #4
    e808:	f853 2b04 	ldreq.w	r2, [r3], #4
    e80c:	9308      	str	r3, [sp, #32]
    e80e:	bf18      	it	ne
    e810:	b2d2      	uxtbne	r2, r2
    e812:	e54e      	b.n	e2b2 <_svfprintf_r+0xe62>
    e814:	468a      	mov	sl, r1
    e816:	3301      	adds	r3, #1
    e818:	492d      	ldr	r1, [pc, #180]	; (e8d0 <_svfprintf_r+0x1480>)
    e81a:	f8ca 5004 	str.w	r5, [sl, #4]
    e81e:	442a      	add	r2, r5
    e820:	2b07      	cmp	r3, #7
    e822:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e826:	f8ca 1000 	str.w	r1, [sl]
    e82a:	f300 8139 	bgt.w	eaa0 <_svfprintf_r+0x1650>
    e82e:	f10a 0a08 	add.w	sl, sl, #8
    e832:	f7ff bb8c 	b.w	df4e <_svfprintf_r+0xafe>
    e836:	2300      	movs	r3, #0
    e838:	4619      	mov	r1, r3
    e83a:	9600      	str	r6, [sp, #0]
    e83c:	aa1d      	add	r2, sp, #116	; 0x74
    e83e:	4658      	mov	r0, fp
    e840:	f003 fb8e 	bl	11f60 <_wcsrtombs_r>
    e844:	4603      	mov	r3, r0
    e846:	3301      	adds	r3, #1
    e848:	9005      	str	r0, [sp, #20]
    e84a:	f000 82f1 	beq.w	ee30 <_svfprintf_r+0x19e0>
    e84e:	941d      	str	r4, [sp, #116]	; 0x74
    e850:	9b05      	ldr	r3, [sp, #20]
    e852:	2b00      	cmp	r3, #0
    e854:	d04e      	beq.n	e8f4 <_svfprintf_r+0x14a4>
    e856:	2b63      	cmp	r3, #99	; 0x63
    e858:	f300 8118 	bgt.w	ea8c <_svfprintf_r+0x163c>
    e85c:	2300      	movs	r3, #0
    e85e:	9307      	str	r3, [sp, #28]
    e860:	ac37      	add	r4, sp, #220	; 0xdc
    e862:	2208      	movs	r2, #8
    e864:	2100      	movs	r1, #0
    e866:	4630      	mov	r0, r6
    e868:	f7fc fed0 	bl	b60c <memset>
    e86c:	9d05      	ldr	r5, [sp, #20]
    e86e:	9600      	str	r6, [sp, #0]
    e870:	462b      	mov	r3, r5
    e872:	aa1d      	add	r2, sp, #116	; 0x74
    e874:	4621      	mov	r1, r4
    e876:	4658      	mov	r0, fp
    e878:	f003 fb72 	bl	11f60 <_wcsrtombs_r>
    e87c:	4285      	cmp	r5, r0
    e87e:	f040 837c 	bne.w	ef7a <_svfprintf_r+0x1b2a>
    e882:	9a05      	ldr	r2, [sp, #20]
    e884:	2300      	movs	r3, #0
    e886:	54a3      	strb	r3, [r4, r2]
    e888:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e88c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e890:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e894:	9303      	str	r3, [sp, #12]
    e896:	9202      	str	r2, [sp, #8]
    e898:	930f      	str	r3, [sp, #60]	; 0x3c
    e89a:	f7fe bfba 	b.w	d812 <_svfprintf_r+0x3c2>
    e89e:	212d      	movs	r1, #45	; 0x2d
    e8a0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e8a4:	f7fe bfa4 	b.w	d7f0 <_svfprintf_r+0x3a0>
    e8a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e8aa:	9915      	ldr	r1, [sp, #84]	; 0x54
    e8ac:	ebab 0b03 	sub.w	fp, fp, r3
    e8b0:	461a      	mov	r2, r3
    e8b2:	4658      	mov	r0, fp
    e8b4:	f7fc ff42 	bl	b73c <strncpy>
    e8b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    e8bc:	4b05      	ldr	r3, [pc, #20]	; (e8d4 <_svfprintf_r+0x1484>)
    e8be:	b10a      	cbz	r2, e8c4 <_svfprintf_r+0x1474>
    e8c0:	f10a 0a01 	add.w	sl, sl, #1
    e8c4:	f04f 0c00 	mov.w	ip, #0
    e8c8:	e628      	b.n	e51c <_svfprintf_r+0x10cc>
    e8ca:	bf00      	nop
    e8cc:	20000d78 	.word	0x20000d78
    e8d0:	2000857c 	.word	0x2000857c
    e8d4:	cccccccd 	.word	0xcccccccd
    e8d8:	ee1b 1a10 	vmov	r1, s22
    e8dc:	aa24      	add	r2, sp, #144	; 0x90
    e8de:	4658      	mov	r0, fp
    e8e0:	f003 fc42 	bl	12168 <__ssprint_r>
    e8e4:	2800      	cmp	r0, #0
    e8e6:	f47f aa18 	bne.w	dd1a <_svfprintf_r+0x8ca>
    e8ea:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e8ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e8ee:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e8f2:	e67c      	b.n	e5ee <_svfprintf_r+0x119e>
    e8f4:	9b05      	ldr	r3, [sp, #20]
    e8f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e8fa:	930f      	str	r3, [sp, #60]	; 0x3c
    e8fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e900:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e904:	9307      	str	r3, [sp, #28]
    e906:	f7fe bf84 	b.w	d812 <_svfprintf_r+0x3c2>
    e90a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e90c:	9805      	ldr	r0, [sp, #20]
    e90e:	1865      	adds	r5, r4, r1
    e910:	1a2d      	subs	r5, r5, r0
    e912:	1acc      	subs	r4, r1, r3
    e914:	42a5      	cmp	r5, r4
    e916:	bfa8      	it	ge
    e918:	4625      	movge	r5, r4
    e91a:	f7ff bb4d 	b.w	dfb8 <_svfprintf_r+0xb68>
    e91e:	9b08      	ldr	r3, [sp, #32]
    e920:	9904      	ldr	r1, [sp, #16]
    e922:	f853 2b04 	ldr.w	r2, [r3], #4
    e926:	9308      	str	r3, [sp, #32]
    e928:	8011      	strh	r1, [r2, #0]
    e92a:	464c      	mov	r4, r9
    e92c:	f7fe bdc2 	b.w	d4b4 <_svfprintf_r+0x64>
    e930:	f913 2b04 	ldrsb.w	r2, [r3], #4
    e934:	9308      	str	r3, [sp, #32]
    e936:	17d1      	asrs	r1, r2, #31
    e938:	460b      	mov	r3, r1
    e93a:	f7fe bfdb 	b.w	d8f4 <_svfprintf_r+0x4a4>
    e93e:	9a03      	ldr	r2, [sp, #12]
    e940:	2102      	movs	r1, #2
    e942:	ab22      	add	r3, sp, #136	; 0x88
    e944:	9301      	str	r3, [sp, #4]
    e946:	ab1d      	add	r3, sp, #116	; 0x74
    e948:	9300      	str	r3, [sp, #0]
    e94a:	4658      	mov	r0, fp
    e94c:	ab1b      	add	r3, sp, #108	; 0x6c
    e94e:	eeb0 0b4a 	vmov.f64	d0, d10
    e952:	9202      	str	r2, [sp, #8]
    e954:	f002 fa14 	bl	10d80 <_dtoa_r>
    e958:	2d47      	cmp	r5, #71	; 0x47
    e95a:	9a02      	ldr	r2, [sp, #8]
    e95c:	4604      	mov	r4, r0
    e95e:	f000 8161 	beq.w	ec24 <_svfprintf_r+0x17d4>
    e962:	2d46      	cmp	r5, #70	; 0x46
    e964:	4410      	add	r0, r2
    e966:	d105      	bne.n	e974 <_svfprintf_r+0x1524>
    e968:	7823      	ldrb	r3, [r4, #0]
    e96a:	2b30      	cmp	r3, #48	; 0x30
    e96c:	f000 826f 	beq.w	ee4e <_svfprintf_r+0x19fe>
    e970:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e972:	4410      	add	r0, r2
    e974:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e97c:	f040 8146 	bne.w	ec0c <_svfprintf_r+0x17bc>
    e980:	4603      	mov	r3, r0
    e982:	1b1b      	subs	r3, r3, r4
    e984:	930e      	str	r3, [sp, #56]	; 0x38
    e986:	2d47      	cmp	r5, #71	; 0x47
    e988:	f000 8110 	beq.w	ebac <_svfprintf_r+0x175c>
    e98c:	2d46      	cmp	r5, #70	; 0x46
    e98e:	f000 81b5 	beq.w	ecfc <_svfprintf_r+0x18ac>
    e992:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e994:	930c      	str	r3, [sp, #48]	; 0x30
    e996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e998:	2d41      	cmp	r5, #65	; 0x41
    e99a:	f103 33ff 	add.w	r3, r3, #4294967295
    e99e:	931b      	str	r3, [sp, #108]	; 0x6c
    e9a0:	f000 81e5 	beq.w	ed6e <_svfprintf_r+0x191e>
    e9a4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    e9a8:	2100      	movs	r1, #0
    e9aa:	2b00      	cmp	r3, #0
    e9ac:	bfb8      	it	lt
    e9ae:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    e9b0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    e9b4:	bfba      	itte	lt
    e9b6:	f1c3 0301 	rsblt	r3, r3, #1
    e9ba:	222d      	movlt	r2, #45	; 0x2d
    e9bc:	222b      	movge	r2, #43	; 0x2b
    e9be:	2b09      	cmp	r3, #9
    e9c0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    e9c4:	f340 81da 	ble.w	ed7c <_svfprintf_r+0x192c>
    e9c8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    e9cc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; edec <_svfprintf_r+0x199c>
    e9d0:	462a      	mov	r2, r5
    e9d2:	4610      	mov	r0, r2
    e9d4:	fb8c 2103 	smull	r2, r1, ip, r3
    e9d8:	17da      	asrs	r2, r3, #31
    e9da:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    e9de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e9e2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    e9e6:	3130      	adds	r1, #48	; 0x30
    e9e8:	f800 1c01 	strb.w	r1, [r0, #-1]
    e9ec:	4619      	mov	r1, r3
    e9ee:	2963      	cmp	r1, #99	; 0x63
    e9f0:	4613      	mov	r3, r2
    e9f2:	f100 32ff 	add.w	r2, r0, #4294967295
    e9f6:	dcec      	bgt.n	e9d2 <_svfprintf_r+0x1582>
    e9f8:	3330      	adds	r3, #48	; 0x30
    e9fa:	b2d9      	uxtb	r1, r3
    e9fc:	1e83      	subs	r3, r0, #2
    e9fe:	429d      	cmp	r5, r3
    ea00:	f802 1c01 	strb.w	r1, [r2, #-1]
    ea04:	f240 828b 	bls.w	ef1e <_svfprintf_r+0x1ace>
    ea08:	4613      	mov	r3, r2
    ea0a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ea0e:	e001      	b.n	ea14 <_svfprintf_r+0x15c4>
    ea10:	f813 1b01 	ldrb.w	r1, [r3], #1
    ea14:	f802 1b01 	strb.w	r1, [r2], #1
    ea18:	429d      	cmp	r5, r3
    ea1a:	d1f9      	bne.n	ea10 <_svfprintf_r+0x15c0>
    ea1c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    ea20:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    ea24:	1a1b      	subs	r3, r3, r0
    ea26:	4413      	add	r3, r2
    ea28:	aa1e      	add	r2, sp, #120	; 0x78
    ea2a:	1a9b      	subs	r3, r3, r2
    ea2c:	9314      	str	r3, [sp, #80]	; 0x50
    ea2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea30:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ea32:	2b01      	cmp	r3, #1
    ea34:	441a      	add	r2, r3
    ea36:	9205      	str	r2, [sp, #20]
    ea38:	f340 8203 	ble.w	ee42 <_svfprintf_r+0x19f2>
    ea3c:	9b05      	ldr	r3, [sp, #20]
    ea3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ea40:	4413      	add	r3, r2
    ea42:	9305      	str	r3, [sp, #20]
    ea44:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ea48:	9a05      	ldr	r2, [sp, #20]
    ea4a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ea4e:	2300      	movs	r3, #0
    ea50:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ea54:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ea58:	930f      	str	r3, [sp, #60]	; 0x3c
    ea5a:	9202      	str	r2, [sp, #8]
    ea5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea5e:	2b00      	cmp	r3, #0
    ea60:	f040 80b1 	bne.w	ebc6 <_svfprintf_r+0x1776>
    ea64:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ea68:	9303      	str	r3, [sp, #12]
    ea6a:	f7fe bed2 	b.w	d812 <_svfprintf_r+0x3c2>
    ea6e:	4620      	mov	r0, r4
    ea70:	f7fd f966 	bl	bd40 <strlen>
    ea74:	4602      	mov	r2, r0
    ea76:	9005      	str	r0, [sp, #20]
    ea78:	f7fe bf20 	b.w	d8bc <_svfprintf_r+0x46c>
    ea7c:	ee1b 1a10 	vmov	r1, s22
    ea80:	aa24      	add	r2, sp, #144	; 0x90
    ea82:	4658      	mov	r0, fp
    ea84:	f003 fb70 	bl	12168 <__ssprint_r>
    ea88:	f7fe bded 	b.w	d666 <_svfprintf_r+0x216>
    ea8c:	1c59      	adds	r1, r3, #1
    ea8e:	4658      	mov	r0, fp
    ea90:	f7fa fe94 	bl	97bc <_malloc_r>
    ea94:	4604      	mov	r4, r0
    ea96:	2800      	cmp	r0, #0
    ea98:	f000 81ca 	beq.w	ee30 <_svfprintf_r+0x19e0>
    ea9c:	9007      	str	r0, [sp, #28]
    ea9e:	e6e0      	b.n	e862 <_svfprintf_r+0x1412>
    eaa0:	ee1b 1a10 	vmov	r1, s22
    eaa4:	aa24      	add	r2, sp, #144	; 0x90
    eaa6:	4658      	mov	r0, fp
    eaa8:	f003 fb5e 	bl	12168 <__ssprint_r>
    eaac:	2800      	cmp	r0, #0
    eaae:	f47f a934 	bne.w	dd1a <_svfprintf_r+0x8ca>
    eab2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eab4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eab8:	f7ff ba49 	b.w	df4e <_svfprintf_r+0xafe>
    eabc:	ee1b 1a10 	vmov	r1, s22
    eac0:	aa24      	add	r2, sp, #144	; 0x90
    eac2:	4658      	mov	r0, fp
    eac4:	f003 fb50 	bl	12168 <__ssprint_r>
    eac8:	2800      	cmp	r0, #0
    eaca:	f47f a926 	bne.w	dd1a <_svfprintf_r+0x8ca>
    eace:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ead2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ead4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ead8:	e649      	b.n	e76e <_svfprintf_r+0x131e>
    eada:	2306      	movs	r3, #6
    eadc:	9303      	str	r3, [sp, #12]
    eade:	f7ff bb83 	b.w	e1e8 <_svfprintf_r+0xd98>
    eae2:	9b03      	ldr	r3, [sp, #12]
    eae4:	2102      	movs	r1, #2
    eae6:	1c5a      	adds	r2, r3, #1
    eae8:	e72b      	b.n	e942 <_svfprintf_r+0x14f2>
    eaea:	9a03      	ldr	r2, [sp, #12]
    eaec:	2103      	movs	r1, #3
    eaee:	e728      	b.n	e942 <_svfprintf_r+0x14f2>
    eaf0:	a81b      	add	r0, sp, #108	; 0x6c
    eaf2:	eeb0 0b4a 	vmov.f64	d0, d10
    eaf6:	f002 f817 	bl	10b28 <frexp>
    eafa:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    eafe:	ee20 0b07 	vmul.f64	d0, d0, d7
    eb02:	eeb5 0b40 	vcmp.f64	d0, #0.0
    eb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb0a:	d101      	bne.n	eb10 <_svfprintf_r+0x16c0>
    eb0c:	2301      	movs	r3, #1
    eb0e:	931b      	str	r3, [sp, #108]	; 0x6c
    eb10:	48b3      	ldr	r0, [pc, #716]	; (ede0 <_svfprintf_r+0x1990>)
    eb12:	9b03      	ldr	r3, [sp, #12]
    eb14:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    eb18:	3b01      	subs	r3, #1
    eb1a:	4622      	mov	r2, r4
    eb1c:	e004      	b.n	eb28 <_svfprintf_r+0x16d8>
    eb1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    eb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb26:	d013      	beq.n	eb50 <_svfprintf_r+0x1700>
    eb28:	ee20 0b05 	vmul.f64	d0, d0, d5
    eb2c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    eb30:	f1b3 3fff 	cmp.w	r3, #4294967295
    eb34:	ee17 1a90 	vmov	r1, s15
    eb38:	5c41      	ldrb	r1, [r0, r1]
    eb3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    eb3e:	4694      	mov	ip, r2
    eb40:	ee30 0b46 	vsub.f64	d0, d0, d6
    eb44:	f802 1b01 	strb.w	r1, [r2], #1
    eb48:	4619      	mov	r1, r3
    eb4a:	f103 33ff 	add.w	r3, r3, #4294967295
    eb4e:	d1e6      	bne.n	eb1e <_svfprintf_r+0x16ce>
    eb50:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    eb54:	eeb4 0bc6 	vcmpe.f64	d0, d6
    eb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb5c:	f300 8148 	bgt.w	edf0 <_svfprintf_r+0x19a0>
    eb60:	eeb4 0b46 	vcmp.f64	d0, d6
    eb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb68:	d104      	bne.n	eb74 <_svfprintf_r+0x1724>
    eb6a:	ee17 3a90 	vmov	r3, s15
    eb6e:	07db      	lsls	r3, r3, #31
    eb70:	f100 813e 	bmi.w	edf0 <_svfprintf_r+0x19a0>
    eb74:	2900      	cmp	r1, #0
    eb76:	db06      	blt.n	eb86 <_svfprintf_r+0x1736>
    eb78:	1c4b      	adds	r3, r1, #1
    eb7a:	4413      	add	r3, r2
    eb7c:	2130      	movs	r1, #48	; 0x30
    eb7e:	f802 1b01 	strb.w	r1, [r2], #1
    eb82:	4293      	cmp	r3, r2
    eb84:	d1fb      	bne.n	eb7e <_svfprintf_r+0x172e>
    eb86:	1b13      	subs	r3, r2, r4
    eb88:	930e      	str	r3, [sp, #56]	; 0x38
    eb8a:	e6fc      	b.n	e986 <_svfprintf_r+0x1536>
    eb8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    eb8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eb90:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    eb94:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    eb98:	9613      	str	r6, [sp, #76]	; 0x4c
    eb9a:	18e3      	adds	r3, r4, r3
    eb9c:	429d      	cmp	r5, r3
    eb9e:	4629      	mov	r1, r5
    eba0:	bf28      	it	cs
    eba2:	4619      	movcs	r1, r3
    eba4:	4682      	mov	sl, r0
    eba6:	9105      	str	r1, [sp, #20]
    eba8:	f7ff b9d8 	b.w	df5c <_svfprintf_r+0xb0c>
    ebac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ebae:	930c      	str	r3, [sp, #48]	; 0x30
    ebb0:	1cda      	adds	r2, r3, #3
    ebb2:	db02      	blt.n	ebba <_svfprintf_r+0x176a>
    ebb4:	9a03      	ldr	r2, [sp, #12]
    ebb6:	4293      	cmp	r3, r2
    ebb8:	dd0c      	ble.n	ebd4 <_svfprintf_r+0x1784>
    ebba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ebbc:	3b02      	subs	r3, #2
    ebbe:	930b      	str	r3, [sp, #44]	; 0x2c
    ebc0:	f023 0520 	bic.w	r5, r3, #32
    ebc4:	e6e7      	b.n	e996 <_svfprintf_r+0x1546>
    ebc6:	212d      	movs	r1, #45	; 0x2d
    ebc8:	2300      	movs	r3, #0
    ebca:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ebce:	9303      	str	r3, [sp, #12]
    ebd0:	f7fe be22 	b.w	d818 <_svfprintf_r+0x3c8>
    ebd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ebd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ebd8:	4293      	cmp	r3, r2
    ebda:	f2c0 80bd 	blt.w	ed58 <_svfprintf_r+0x1908>
    ebde:	07f0      	lsls	r0, r6, #31
    ebe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ebe2:	f140 8132 	bpl.w	ee4a <_svfprintf_r+0x19fa>
    ebe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebe8:	4413      	add	r3, r2
    ebea:	9305      	str	r3, [sp, #20]
    ebec:	0571      	lsls	r1, r6, #21
    ebee:	d503      	bpl.n	ebf8 <_svfprintf_r+0x17a8>
    ebf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	f300 8135 	bgt.w	ee62 <_svfprintf_r+0x1a12>
    ebf8:	9b05      	ldr	r3, [sp, #20]
    ebfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ebfe:	9302      	str	r3, [sp, #8]
    ec00:	2367      	movs	r3, #103	; 0x67
    ec02:	930b      	str	r3, [sp, #44]	; 0x2c
    ec04:	2300      	movs	r3, #0
    ec06:	930f      	str	r3, [sp, #60]	; 0x3c
    ec08:	930d      	str	r3, [sp, #52]	; 0x34
    ec0a:	e727      	b.n	ea5c <_svfprintf_r+0x160c>
    ec0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ec0e:	4283      	cmp	r3, r0
    ec10:	f4bf aeb7 	bcs.w	e982 <_svfprintf_r+0x1532>
    ec14:	2130      	movs	r1, #48	; 0x30
    ec16:	1c5a      	adds	r2, r3, #1
    ec18:	9222      	str	r2, [sp, #136]	; 0x88
    ec1a:	7019      	strb	r1, [r3, #0]
    ec1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ec1e:	4298      	cmp	r0, r3
    ec20:	d8f9      	bhi.n	ec16 <_svfprintf_r+0x17c6>
    ec22:	e6ae      	b.n	e982 <_svfprintf_r+0x1532>
    ec24:	07f3      	lsls	r3, r6, #31
    ec26:	f100 80a7 	bmi.w	ed78 <_svfprintf_r+0x1928>
    ec2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ec2c:	e6a9      	b.n	e982 <_svfprintf_r+0x1532>
    ec2e:	aa24      	add	r2, sp, #144	; 0x90
    ec30:	4658      	mov	r0, fp
    ec32:	9105      	str	r1, [sp, #20]
    ec34:	f003 fa98 	bl	12168 <__ssprint_r>
    ec38:	2800      	cmp	r0, #0
    ec3a:	f47f a86e 	bne.w	dd1a <_svfprintf_r+0x8ca>
    ec3e:	f896 c000 	ldrb.w	ip, [r6]
    ec42:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ec44:	9905      	ldr	r1, [sp, #20]
    ec46:	a827      	add	r0, sp, #156	; 0x9c
    ec48:	4465      	add	r5, ip
    ec4a:	f7ff bbec 	b.w	e426 <_svfprintf_r+0xfd6>
    ec4e:	ee1b 1a10 	vmov	r1, s22
    ec52:	aa24      	add	r2, sp, #144	; 0x90
    ec54:	4658      	mov	r0, fp
    ec56:	f003 fa87 	bl	12168 <__ssprint_r>
    ec5a:	2800      	cmp	r0, #0
    ec5c:	f47f a85d 	bne.w	dd1a <_svfprintf_r+0x8ca>
    ec60:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ec62:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ec66:	f7ff b96b 	b.w	df40 <_svfprintf_r+0xaf0>
    ec6a:	2378      	movs	r3, #120	; 0x78
    ec6c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    ec70:	2330      	movs	r3, #48	; 0x30
    ec72:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    ec76:	9b03      	ldr	r3, [sp, #12]
    ec78:	2b63      	cmp	r3, #99	; 0x63
    ec7a:	f048 0602 	orr.w	r6, r8, #2
    ec7e:	f300 80a6 	bgt.w	edce <_svfprintf_r+0x197e>
    ec82:	2300      	movs	r3, #0
    ec84:	9307      	str	r3, [sp, #28]
    ec86:	ac37      	add	r4, sp, #220	; 0xdc
    ec88:	ee18 3a90 	vmov	r3, s17
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    ec92:	db2b      	blt.n	ecec <_svfprintf_r+0x189c>
    ec94:	eeb0 ab48 	vmov.f64	d10, d8
    ec98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec9a:	f023 0520 	bic.w	r5, r3, #32
    ec9e:	2300      	movs	r3, #0
    eca0:	9309      	str	r3, [sp, #36]	; 0x24
    eca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eca4:	2b61      	cmp	r3, #97	; 0x61
    eca6:	f47f aaad 	bne.w	e204 <_svfprintf_r+0xdb4>
    ecaa:	eeb0 0b4a 	vmov.f64	d0, d10
    ecae:	a81b      	add	r0, sp, #108	; 0x6c
    ecb0:	f001 ff3a 	bl	10b28 <frexp>
    ecb4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    ecb8:	ee20 0b07 	vmul.f64	d0, d0, d7
    ecbc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ecc4:	d101      	bne.n	ecca <_svfprintf_r+0x187a>
    ecc6:	2301      	movs	r3, #1
    ecc8:	931b      	str	r3, [sp, #108]	; 0x6c
    ecca:	4846      	ldr	r0, [pc, #280]	; (ede4 <_svfprintf_r+0x1994>)
    eccc:	e721      	b.n	eb12 <_svfprintf_r+0x16c2>
    ecce:	ee1b 1a10 	vmov	r1, s22
    ecd2:	aa24      	add	r2, sp, #144	; 0x90
    ecd4:	4658      	mov	r0, fp
    ecd6:	f003 fa47 	bl	12168 <__ssprint_r>
    ecda:	2800      	cmp	r0, #0
    ecdc:	f47f a81d 	bne.w	dd1a <_svfprintf_r+0x8ca>
    ece0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ece2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ece4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ece8:	f7ff b94e 	b.w	df88 <_svfprintf_r+0xb38>
    ecec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ecee:	f023 0520 	bic.w	r5, r3, #32
    ecf2:	232d      	movs	r3, #45	; 0x2d
    ecf4:	9309      	str	r3, [sp, #36]	; 0x24
    ecf6:	eeb1 ab48 	vneg.f64	d10, d8
    ecfa:	e7d2      	b.n	eca2 <_svfprintf_r+0x1852>
    ecfc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ecfe:	920c      	str	r2, [sp, #48]	; 0x30
    ed00:	2a00      	cmp	r2, #0
    ed02:	f006 0301 	and.w	r3, r6, #1
    ed06:	f340 810d 	ble.w	ef24 <_svfprintf_r+0x1ad4>
    ed0a:	9903      	ldr	r1, [sp, #12]
    ed0c:	430b      	orrs	r3, r1
    ed0e:	f040 80cf 	bne.w	eeb0 <_svfprintf_r+0x1a60>
    ed12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed14:	9305      	str	r3, [sp, #20]
    ed16:	2366      	movs	r3, #102	; 0x66
    ed18:	930b      	str	r3, [sp, #44]	; 0x2c
    ed1a:	0572      	lsls	r2, r6, #21
    ed1c:	f100 80a3 	bmi.w	ee66 <_svfprintf_r+0x1a16>
    ed20:	9b05      	ldr	r3, [sp, #20]
    ed22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ed26:	9302      	str	r3, [sp, #8]
    ed28:	e76c      	b.n	ec04 <_svfprintf_r+0x17b4>
    ed2a:	ee1b 1a10 	vmov	r1, s22
    ed2e:	aa24      	add	r2, sp, #144	; 0x90
    ed30:	4658      	mov	r0, fp
    ed32:	f003 fa19 	bl	12168 <__ssprint_r>
    ed36:	2800      	cmp	r0, #0
    ed38:	f47e afef 	bne.w	dd1a <_svfprintf_r+0x8ca>
    ed3c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    ed3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed40:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ed42:	1b1c      	subs	r4, r3, r4
    ed44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed48:	f7ff b936 	b.w	dfb8 <_svfprintf_r+0xb68>
    ed4c:	2358      	movs	r3, #88	; 0x58
    ed4e:	e78d      	b.n	ec6c <_svfprintf_r+0x181c>
    ed50:	2200      	movs	r2, #0
    ed52:	9203      	str	r2, [sp, #12]
    ed54:	f7fe bbda 	b.w	d50c <_svfprintf_r+0xbc>
    ed58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ed5c:	189a      	adds	r2, r3, r2
    ed5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed60:	9205      	str	r2, [sp, #20]
    ed62:	2b00      	cmp	r3, #0
    ed64:	f340 80ab 	ble.w	eebe <_svfprintf_r+0x1a6e>
    ed68:	2367      	movs	r3, #103	; 0x67
    ed6a:	930b      	str	r3, [sp, #44]	; 0x2c
    ed6c:	e7d5      	b.n	ed1a <_svfprintf_r+0x18ca>
    ed6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ed70:	320f      	adds	r2, #15
    ed72:	b2d2      	uxtb	r2, r2
    ed74:	2101      	movs	r1, #1
    ed76:	e618      	b.n	e9aa <_svfprintf_r+0x155a>
    ed78:	18a0      	adds	r0, r4, r2
    ed7a:	e5fb      	b.n	e974 <_svfprintf_r+0x1524>
    ed7c:	2900      	cmp	r1, #0
    ed7e:	f040 80a8 	bne.w	eed2 <_svfprintf_r+0x1a82>
    ed82:	2230      	movs	r2, #48	; 0x30
    ed84:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    ed88:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    ed8c:	3330      	adds	r3, #48	; 0x30
    ed8e:	f802 3b01 	strb.w	r3, [r2], #1
    ed92:	ab1e      	add	r3, sp, #120	; 0x78
    ed94:	1ad3      	subs	r3, r2, r3
    ed96:	9314      	str	r3, [sp, #80]	; 0x50
    ed98:	e649      	b.n	ea2e <_svfprintf_r+0x15de>
    ed9a:	3301      	adds	r3, #1
    ed9c:	4912      	ldr	r1, [pc, #72]	; (ede8 <_svfprintf_r+0x1998>)
    ed9e:	f8ca 5004 	str.w	r5, [sl, #4]
    eda2:	442a      	add	r2, r5
    eda4:	2b07      	cmp	r3, #7
    eda6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    edaa:	f8ca 1000 	str.w	r1, [sl]
    edae:	f77f ac33 	ble.w	e618 <_svfprintf_r+0x11c8>
    edb2:	ee1b 1a10 	vmov	r1, s22
    edb6:	aa24      	add	r2, sp, #144	; 0x90
    edb8:	4658      	mov	r0, fp
    edba:	f003 f9d5 	bl	12168 <__ssprint_r>
    edbe:	2800      	cmp	r0, #0
    edc0:	f47e afab 	bne.w	dd1a <_svfprintf_r+0x8ca>
    edc4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    edc8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    edcc:	e426      	b.n	e61c <_svfprintf_r+0x11cc>
    edce:	1c59      	adds	r1, r3, #1
    edd0:	4658      	mov	r0, fp
    edd2:	f7fa fcf3 	bl	97bc <_malloc_r>
    edd6:	4604      	mov	r4, r0
    edd8:	b350      	cbz	r0, ee30 <_svfprintf_r+0x19e0>
    edda:	9007      	str	r0, [sp, #28]
    eddc:	e754      	b.n	ec88 <_svfprintf_r+0x1838>
    edde:	bf00      	nop
    ede0:	20000d5c 	.word	0x20000d5c
    ede4:	20000d48 	.word	0x20000d48
    ede8:	2000857c 	.word	0x2000857c
    edec:	66666667 	.word	0x66666667
    edf0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    edf4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    edf8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    edfc:	4561      	cmp	r1, ip
    edfe:	4613      	mov	r3, r2
    ee00:	d10a      	bne.n	ee18 <_svfprintf_r+0x19c8>
    ee02:	f04f 0e30 	mov.w	lr, #48	; 0x30
    ee06:	f803 ec01 	strb.w	lr, [r3, #-1]
    ee0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ee0c:	1e59      	subs	r1, r3, #1
    ee0e:	9122      	str	r1, [sp, #136]	; 0x88
    ee10:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    ee14:	458c      	cmp	ip, r1
    ee16:	d0f6      	beq.n	ee06 <_svfprintf_r+0x19b6>
    ee18:	2939      	cmp	r1, #57	; 0x39
    ee1a:	bf16      	itet	ne
    ee1c:	3101      	addne	r1, #1
    ee1e:	7a81      	ldrbeq	r1, [r0, #10]
    ee20:	b2c9      	uxtbne	r1, r1
    ee22:	f803 1c01 	strb.w	r1, [r3, #-1]
    ee26:	e6ae      	b.n	eb86 <_svfprintf_r+0x1736>
    ee28:	2300      	movs	r3, #0
    ee2a:	4690      	mov	r8, r2
    ee2c:	9307      	str	r3, [sp, #28]
    ee2e:	e760      	b.n	ecf2 <_svfprintf_r+0x18a2>
    ee30:	ee1b 2a10 	vmov	r2, s22
    ee34:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    ee38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee3c:	8193      	strh	r3, [r2, #12]
    ee3e:	f7fe bc16 	b.w	d66e <_svfprintf_r+0x21e>
    ee42:	07f5      	lsls	r5, r6, #31
    ee44:	f57f adfe 	bpl.w	ea44 <_svfprintf_r+0x15f4>
    ee48:	e5f8      	b.n	ea3c <_svfprintf_r+0x15ec>
    ee4a:	9305      	str	r3, [sp, #20]
    ee4c:	e6ce      	b.n	ebec <_svfprintf_r+0x179c>
    ee4e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ee52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee56:	f43f ad8b 	beq.w	e970 <_svfprintf_r+0x1520>
    ee5a:	f1c2 0201 	rsb	r2, r2, #1
    ee5e:	921b      	str	r2, [sp, #108]	; 0x6c
    ee60:	e587      	b.n	e972 <_svfprintf_r+0x1522>
    ee62:	2367      	movs	r3, #103	; 0x67
    ee64:	930b      	str	r3, [sp, #44]	; 0x2c
    ee66:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ee68:	780b      	ldrb	r3, [r1, #0]
    ee6a:	2bff      	cmp	r3, #255	; 0xff
    ee6c:	d079      	beq.n	ef62 <_svfprintf_r+0x1b12>
    ee6e:	2500      	movs	r5, #0
    ee70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ee72:	4628      	mov	r0, r5
    ee74:	e003      	b.n	ee7e <_svfprintf_r+0x1a2e>
    ee76:	3001      	adds	r0, #1
    ee78:	3101      	adds	r1, #1
    ee7a:	2bff      	cmp	r3, #255	; 0xff
    ee7c:	d008      	beq.n	ee90 <_svfprintf_r+0x1a40>
    ee7e:	4293      	cmp	r3, r2
    ee80:	da06      	bge.n	ee90 <_svfprintf_r+0x1a40>
    ee82:	1ad2      	subs	r2, r2, r3
    ee84:	784b      	ldrb	r3, [r1, #1]
    ee86:	2b00      	cmp	r3, #0
    ee88:	d1f5      	bne.n	ee76 <_svfprintf_r+0x1a26>
    ee8a:	780b      	ldrb	r3, [r1, #0]
    ee8c:	3501      	adds	r5, #1
    ee8e:	e7f4      	b.n	ee7a <_svfprintf_r+0x1a2a>
    ee90:	920c      	str	r2, [sp, #48]	; 0x30
    ee92:	9113      	str	r1, [sp, #76]	; 0x4c
    ee94:	900d      	str	r0, [sp, #52]	; 0x34
    ee96:	950f      	str	r5, [sp, #60]	; 0x3c
    ee98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ee9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee9c:	9916      	ldr	r1, [sp, #88]	; 0x58
    ee9e:	4413      	add	r3, r2
    eea0:	9a05      	ldr	r2, [sp, #20]
    eea2:	fb01 2303 	mla	r3, r1, r3, r2
    eea6:	9305      	str	r3, [sp, #20]
    eea8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    eeac:	9302      	str	r3, [sp, #8]
    eeae:	e5d5      	b.n	ea5c <_svfprintf_r+0x160c>
    eeb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eeb2:	18d3      	adds	r3, r2, r3
    eeb4:	4419      	add	r1, r3
    eeb6:	2366      	movs	r3, #102	; 0x66
    eeb8:	9105      	str	r1, [sp, #20]
    eeba:	930b      	str	r3, [sp, #44]	; 0x2c
    eebc:	e72d      	b.n	ed1a <_svfprintf_r+0x18ca>
    eebe:	f1c3 0301 	rsb	r3, r3, #1
    eec2:	441a      	add	r2, r3
    eec4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    eec8:	9302      	str	r3, [sp, #8]
    eeca:	2367      	movs	r3, #103	; 0x67
    eecc:	9205      	str	r2, [sp, #20]
    eece:	930b      	str	r3, [sp, #44]	; 0x2c
    eed0:	e698      	b.n	ec04 <_svfprintf_r+0x17b4>
    eed2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    eed6:	e759      	b.n	ed8c <_svfprintf_r+0x193c>
    eed8:	9b03      	ldr	r3, [sp, #12]
    eeda:	f8dd 9008 	ldr.w	r9, [sp, #8]
    eede:	f8dd 801c 	ldr.w	r8, [sp, #28]
    eee2:	9305      	str	r3, [sp, #20]
    eee4:	e4b4      	b.n	e850 <_svfprintf_r+0x1400>
    eee6:	ee18 3a90 	vmov	r3, s17
    eeea:	2b00      	cmp	r3, #0
    eeec:	bfb4      	ite	lt
    eeee:	212d      	movlt	r1, #45	; 0x2d
    eef0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    eef4:	4c25      	ldr	r4, [pc, #148]	; (ef8c <_svfprintf_r+0x1b3c>)
    eef6:	4b26      	ldr	r3, [pc, #152]	; (ef90 <_svfprintf_r+0x1b40>)
    eef8:	bfb8      	it	lt
    eefa:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    eefe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    ef02:	f7fe bc79 	b.w	d7f8 <_svfprintf_r+0x3a8>
    ef06:	9b03      	ldr	r3, [sp, #12]
    ef08:	9302      	str	r3, [sp, #8]
    ef0a:	9305      	str	r3, [sp, #20]
    ef0c:	2373      	movs	r3, #115	; 0x73
    ef0e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ef12:	9003      	str	r0, [sp, #12]
    ef14:	900f      	str	r0, [sp, #60]	; 0x3c
    ef16:	900d      	str	r0, [sp, #52]	; 0x34
    ef18:	930b      	str	r3, [sp, #44]	; 0x2c
    ef1a:	f7fe bc7a 	b.w	d812 <_svfprintf_r+0x3c2>
    ef1e:	2302      	movs	r3, #2
    ef20:	9314      	str	r3, [sp, #80]	; 0x50
    ef22:	e584      	b.n	ea2e <_svfprintf_r+0x15de>
    ef24:	9a03      	ldr	r2, [sp, #12]
    ef26:	4313      	orrs	r3, r2
    ef28:	d105      	bne.n	ef36 <_svfprintf_r+0x1ae6>
    ef2a:	2301      	movs	r3, #1
    ef2c:	2266      	movs	r2, #102	; 0x66
    ef2e:	9302      	str	r3, [sp, #8]
    ef30:	920b      	str	r2, [sp, #44]	; 0x2c
    ef32:	9305      	str	r3, [sp, #20]
    ef34:	e666      	b.n	ec04 <_svfprintf_r+0x17b4>
    ef36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ef38:	3301      	adds	r3, #1
    ef3a:	441a      	add	r2, r3
    ef3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    ef40:	9302      	str	r3, [sp, #8]
    ef42:	2366      	movs	r3, #102	; 0x66
    ef44:	9205      	str	r2, [sp, #20]
    ef46:	930b      	str	r3, [sp, #44]	; 0x2c
    ef48:	e65c      	b.n	ec04 <_svfprintf_r+0x17b4>
    ef4a:	9a08      	ldr	r2, [sp, #32]
    ef4c:	f899 3001 	ldrb.w	r3, [r9, #1]
    ef50:	4689      	mov	r9, r1
    ef52:	f852 1b04 	ldr.w	r1, [r2], #4
    ef56:	9208      	str	r2, [sp, #32]
    ef58:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    ef5c:	9103      	str	r1, [sp, #12]
    ef5e:	f7fe bad3 	b.w	d508 <_svfprintf_r+0xb8>
    ef62:	2300      	movs	r3, #0
    ef64:	930f      	str	r3, [sp, #60]	; 0x3c
    ef66:	930d      	str	r3, [sp, #52]	; 0x34
    ef68:	e796      	b.n	ee98 <_svfprintf_r+0x1a48>
    ef6a:	230c      	movs	r3, #12
    ef6c:	f8cb 3000 	str.w	r3, [fp]
    ef70:	f04f 33ff 	mov.w	r3, #4294967295
    ef74:	9304      	str	r3, [sp, #16]
    ef76:	f7fe bb81 	b.w	d67c <_svfprintf_r+0x22c>
    ef7a:	ee1b 2a10 	vmov	r2, s22
    ef7e:	8993      	ldrh	r3, [r2, #12]
    ef80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef84:	8193      	strh	r3, [r2, #12]
    ef86:	f7fe bec8 	b.w	dd1a <_svfprintf_r+0x8ca>
    ef8a:	bf00      	nop
    ef8c:	20000d44 	.word	0x20000d44
    ef90:	20000818 	.word	0x20000818

0000ef94 <__ssvfscanf_r>:
    ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef98:	ed2d 8b02 	vpush	{d8}
    ef9c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
    efa0:	468b      	mov	fp, r1
    efa2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    efa6:	af02      	add	r7, sp, #8
    efa8:	048c      	lsls	r4, r1, #18
    efaa:	4681      	mov	r9, r0
    efac:	64fa      	str	r2, [r7, #76]	; 0x4c
    efae:	633b      	str	r3, [r7, #48]	; 0x30
    efb0:	d409      	bmi.n	efc6 <__ssvfscanf_r+0x32>
    efb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    efb6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    efba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    efbe:	f8ab 100c 	strh.w	r1, [fp, #12]
    efc2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    efc6:	2300      	movs	r3, #0
    efc8:	461c      	mov	r4, r3
    efca:	2208      	movs	r2, #8
    efcc:	4619      	mov	r1, r3
    efce:	f107 0058 	add.w	r0, r7, #88	; 0x58
    efd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    efd4:	46a2      	mov	sl, r4
    efd6:	f7fc fb19 	bl	b60c <memset>
    efda:	643c      	str	r4, [r7, #64]	; 0x40
    efdc:	627c      	str	r4, [r7, #36]	; 0x24
    efde:	63bc      	str	r4, [r7, #56]	; 0x38
    efe0:	647c      	str	r4, [r7, #68]	; 0x44
    efe2:	4b83      	ldr	r3, [pc, #524]	; (f1f0 <__ssvfscanf_r+0x25c>)
    efe4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    efe8:	f7fc fbda 	bl	b7a0 <__locale_mb_cur_max>
    efec:	f107 0258 	add.w	r2, r7, #88	; 0x58
    eff0:	4603      	mov	r3, r0
    eff2:	9200      	str	r2, [sp, #0]
    eff4:	f107 0154 	add.w	r1, r7, #84	; 0x54
    eff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    effa:	4648      	mov	r0, r9
    effc:	47a0      	blx	r4
    effe:	1e05      	subs	r5, r0, #0
    f000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f002:	db33      	blt.n	f06c <__ssvfscanf_r+0xd8>
    f004:	442b      	add	r3, r5
    f006:	64fb      	str	r3, [r7, #76]	; 0x4c
    f008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f00a:	462e      	mov	r6, r5
    f00c:	2b00      	cmp	r3, #0
    f00e:	f000 80b6 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    f012:	2d01      	cmp	r5, #1
    f014:	d038      	beq.n	f088 <__ssvfscanf_r+0xf4>
    f016:	2b25      	cmp	r3, #37	; 0x25
    f018:	d040      	beq.n	f09c <__ssvfscanf_r+0x108>
    f01a:	2d00      	cmp	r5, #0
    f01c:	d0e1      	beq.n	efe2 <__ssvfscanf_r+0x4e>
    f01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f020:	1b9e      	subs	r6, r3, r6
    f022:	f8db 3004 	ldr.w	r3, [fp, #4]
    f026:	1e74      	subs	r4, r6, #1
    f028:	2b00      	cmp	r3, #0
    f02a:	f340 8098 	ble.w	f15e <__ssvfscanf_r+0x1ca>
    f02e:	f8db 1000 	ldr.w	r1, [fp]
    f032:	f894 c001 	ldrb.w	ip, [r4, #1]
    f036:	f891 e000 	ldrb.w	lr, [r1]
    f03a:	1ca3      	adds	r3, r4, #2
    f03c:	eb0a 0003 	add.w	r0, sl, r3
    f040:	45e6      	cmp	lr, ip
    f042:	f101 0101 	add.w	r1, r1, #1
    f046:	eba3 0206 	sub.w	r2, r3, r6
    f04a:	f104 0401 	add.w	r4, r4, #1
    f04e:	eba0 0006 	sub.w	r0, r0, r6
    f052:	f040 8094 	bne.w	f17e <__ssvfscanf_r+0x1ea>
    f056:	f8db 3004 	ldr.w	r3, [fp, #4]
    f05a:	f8cb 1000 	str.w	r1, [fp]
    f05e:	3b01      	subs	r3, #1
    f060:	42aa      	cmp	r2, r5
    f062:	f8cb 3004 	str.w	r3, [fp, #4]
    f066:	dbdf      	blt.n	f028 <__ssvfscanf_r+0x94>
    f068:	4682      	mov	sl, r0
    f06a:	e7ba      	b.n	efe2 <__ssvfscanf_r+0x4e>
    f06c:	3301      	adds	r3, #1
    f06e:	64fb      	str	r3, [r7, #76]	; 0x4c
    f070:	2208      	movs	r2, #8
    f072:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    f076:	2100      	movs	r1, #0
    f078:	f107 0058 	add.w	r0, r7, #88	; 0x58
    f07c:	657b      	str	r3, [r7, #84]	; 0x54
    f07e:	f7fc fac5 	bl	b60c <memset>
    f082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    f084:	2b00      	cmp	r3, #0
    f086:	d07a      	beq.n	f17e <__ssvfscanf_r+0x1ea>
    f088:	4e5a      	ldr	r6, [pc, #360]	; (f1f4 <__ssvfscanf_r+0x260>)
    f08a:	5cf2      	ldrb	r2, [r6, r3]
    f08c:	0710      	lsls	r0, r2, #28
    f08e:	f100 851c 	bmi.w	faca <__ssvfscanf_r+0xb36>
    f092:	2b25      	cmp	r3, #37	; 0x25
    f094:	f040 8086 	bne.w	f1a4 <__ssvfscanf_r+0x210>
    f098:	2501      	movs	r5, #1
    f09a:	462e      	mov	r6, r5
    f09c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f09e:	2400      	movs	r4, #0
    f0a0:	7802      	ldrb	r2, [r0, #0]
    f0a2:	46a0      	mov	r8, r4
    f0a4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
    f0a8:	1c41      	adds	r1, r0, #1
    f0aa:	2b55      	cmp	r3, #85	; 0x55
    f0ac:	d867      	bhi.n	f17e <__ssvfscanf_r+0x1ea>
    f0ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    f0b2:	070a      	.short	0x070a
    f0b4:	00660066 	.word	0x00660066
    f0b8:	00660066 	.word	0x00660066
    f0bc:	00660701 	.word	0x00660701
    f0c0:	00660066 	.word	0x00660066
    f0c4:	00660066 	.word	0x00660066
    f0c8:	060c060c 	.word	0x060c060c
    f0cc:	060c060c 	.word	0x060c060c
    f0d0:	060c060c 	.word	0x060c060c
    f0d4:	060c060c 	.word	0x060c060c
    f0d8:	060c060c 	.word	0x060c060c
    f0dc:	00660066 	.word	0x00660066
    f0e0:	00660066 	.word	0x00660066
    f0e4:	00660066 	.word	0x00660066
    f0e8:	06180066 	.word	0x06180066
    f0ec:	048e0066 	.word	0x048e0066
    f0f0:	061804c9 	.word	0x061804c9
    f0f4:	06180618 	.word	0x06180618
    f0f8:	00660066 	.word	0x00660066
    f0fc:	00660066 	.word	0x00660066
    f100:	00660082 	.word	0x00660082
    f104:	04bf0066 	.word	0x04bf0066
    f108:	00660066 	.word	0x00660066
    f10c:	00890066 	.word	0x00890066
    f110:	00660066 	.word	0x00660066
    f114:	00660066 	.word	0x00660066
    f118:	0066066b 	.word	0x0066066b
    f11c:	06dd0066 	.word	0x06dd0066
    f120:	00660066 	.word	0x00660066
    f124:	00660066 	.word	0x00660066
    f128:	06180066 	.word	0x06180066
    f12c:	04900066 	.word	0x04900066
    f130:	061804cb 	.word	0x061804cb
    f134:	06180618 	.word	0x06180618
    f138:	06d206be 	.word	0x06d206be
    f13c:	00660082 	.word	0x00660082
    f140:	06f306e7 	.word	0x06f306e7
    f144:	04c106ac 	.word	0x04c106ac
    f148:	006606da 	.word	0x006606da
    f14c:	008b0066 	.word	0x008b0066
    f150:	06ca007d 	.word	0x06ca007d
    f154:	00660066 	.word	0x00660066
    f158:	0066066b 	.word	0x0066066b
    f15c:	007d      	.short	0x007d
    f15e:	4659      	mov	r1, fp
    f160:	4648      	mov	r0, r9
    f162:	f003 f8c1 	bl	122e8 <__ssrefill_r>
    f166:	2800      	cmp	r0, #0
    f168:	f43f af61 	beq.w	f02e <__ssvfscanf_r+0x9a>
    f16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f16e:	2b00      	cmp	r3, #0
    f170:	f001 8052 	beq.w	10218 <__ssvfscanf_r+0x1284>
    f174:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f178:	065a      	lsls	r2, r3, #25
    f17a:	f101 804d 	bmi.w	10218 <__ssvfscanf_r+0x1284>
    f17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f180:	b143      	cbz	r3, f194 <__ssvfscanf_r+0x200>
    f182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f184:	f8d3 8000 	ldr.w	r8, [r3]
    f188:	f1b8 0f00 	cmp.w	r8, #0
    f18c:	d002      	beq.n	f194 <__ssvfscanf_r+0x200>
    f18e:	4640      	mov	r0, r8
    f190:	f7fa fb0c 	bl	97ac <free>
    f194:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f196:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
    f19a:	46bd      	mov	sp, r7
    f19c:	ecbd 8b02 	vpop	{d8}
    f1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f1a6:	2501      	movs	r5, #1
    f1a8:	1e5e      	subs	r6, r3, #1
    f1aa:	e73a      	b.n	f022 <__ssvfscanf_r+0x8e>
    f1ac:	0723      	lsls	r3, r4, #28
    f1ae:	d1e6      	bne.n	f17e <__ssvfscanf_r+0x1ea>
    f1b0:	7842      	ldrb	r2, [r0, #1]
    f1b2:	4608      	mov	r0, r1
    f1b4:	e776      	b.n	f0a4 <__ssvfscanf_r+0x110>
    f1b6:	0722      	lsls	r2, r4, #28
    f1b8:	d1e1      	bne.n	f17e <__ssvfscanf_r+0x1ea>
    f1ba:	7842      	ldrb	r2, [r0, #1]
    f1bc:	f044 0402 	orr.w	r4, r4, #2
    f1c0:	4608      	mov	r0, r1
    f1c2:	e76f      	b.n	f0a4 <__ssvfscanf_r+0x110>
    f1c4:	f044 0401 	orr.w	r4, r4, #1
    f1c8:	64f9      	str	r1, [r7, #76]	; 0x4c
    f1ca:	2502      	movs	r5, #2
    f1cc:	f8db 3004 	ldr.w	r3, [fp, #4]
    f1d0:	2b00      	cmp	r3, #0
    f1d2:	f340 8408 	ble.w	f9e6 <__ssvfscanf_r+0xa52>
    f1d6:	0660      	lsls	r0, r4, #25
    f1d8:	f140 840f 	bpl.w	f9fa <__ssvfscanf_r+0xa66>
    f1dc:	1e6b      	subs	r3, r5, #1
    f1de:	2b03      	cmp	r3, #3
    f1e0:	f201 80eb 	bhi.w	103ba <__ssvfscanf_r+0x1426>
    f1e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    f1e8:	01f1027b 	.word	0x01f1027b
    f1ec:	0008014b 	.word	0x0008014b
    f1f0:	200086f0 	.word	0x200086f0
    f1f4:	20000bad 	.word	0x20000bad
    f1f8:	4648      	mov	r0, r9
    f1fa:	f001 fc8f 	bl	10b1c <_localeconv_r>
    f1fe:	6803      	ldr	r3, [r0, #0]
    f200:	623b      	str	r3, [r7, #32]
    f202:	f108 33ff 	add.w	r3, r8, #4294967295
    f206:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f20a:	f240 855a 	bls.w	fcc2 <__ssvfscanf_r+0xd2e>
    f20e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
    f212:	eb08 0305 	add.w	r3, r8, r5
    f216:	613b      	str	r3, [r7, #16]
    f218:	f240 185d 	movw	r8, #349	; 0x15d
    f21c:	2600      	movs	r6, #0
    f21e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f222:	ee08 9a10 	vmov	s16, r9
    f226:	e9c7 6605 	strd	r6, r6, [r7, #20]
    f22a:	63fe      	str	r6, [r7, #60]	; 0x3c
    f22c:	637e      	str	r6, [r7, #52]	; 0x34
    f22e:	61fe      	str	r6, [r7, #28]
    f230:	64be      	str	r6, [r7, #72]	; 0x48
    f232:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
    f236:	62bb      	str	r3, [r7, #40]	; 0x28
    f238:	461d      	mov	r5, r3
    f23a:	4646      	mov	r6, r8
    f23c:	f8db 1000 	ldr.w	r1, [fp]
    f240:	780a      	ldrb	r2, [r1, #0]
    f242:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
    f246:	2b4e      	cmp	r3, #78	; 0x4e
    f248:	d850      	bhi.n	f2ec <__ssvfscanf_r+0x358>
    f24a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f24e:	037e      	.short	0x037e
    f250:	037e004f 	.word	0x037e004f
    f254:	004f004f 	.word	0x004f004f
    f258:	00a600a3 	.word	0x00a600a3
    f25c:	00a600a6 	.word	0x00a600a6
    f260:	00a600a6 	.word	0x00a600a6
    f264:	00a600a6 	.word	0x00a600a6
    f268:	00a600a6 	.word	0x00a600a6
    f26c:	004f004f 	.word	0x004f004f
    f270:	004f004f 	.word	0x004f004f
    f274:	004f004f 	.word	0x004f004f
    f278:	0374004f 	.word	0x0374004f
    f27c:	030b030b 	.word	0x030b030b
    f280:	039e030b 	.word	0x039e030b
    f284:	004f0394 	.word	0x004f0394
    f288:	0384004f 	.word	0x0384004f
    f28c:	004f004f 	.word	0x004f004f
    f290:	004f004f 	.word	0x004f004f
    f294:	004f035d 	.word	0x004f035d
    f298:	004f033a 	.word	0x004f033a
    f29c:	004f004f 	.word	0x004f004f
    f2a0:	004f0333 	.word	0x004f0333
    f2a4:	004f004f 	.word	0x004f004f
    f2a8:	036d031e 	.word	0x036d031e
    f2ac:	004f004f 	.word	0x004f004f
    f2b0:	004f004f 	.word	0x004f004f
    f2b4:	004f004f 	.word	0x004f004f
    f2b8:	0374004f 	.word	0x0374004f
    f2bc:	030b030b 	.word	0x030b030b
    f2c0:	039e030b 	.word	0x039e030b
    f2c4:	004f0394 	.word	0x004f0394
    f2c8:	0384004f 	.word	0x0384004f
    f2cc:	004f004f 	.word	0x004f004f
    f2d0:	004f004f 	.word	0x004f004f
    f2d4:	004f035d 	.word	0x004f035d
    f2d8:	004f033a 	.word	0x004f033a
    f2dc:	004f004f 	.word	0x004f004f
    f2e0:	004f0333 	.word	0x004f0333
    f2e4:	004f004f 	.word	0x004f004f
    f2e8:	036d031e 	.word	0x036d031e
    f2ec:	05a0      	lsls	r0, r4, #22
    f2ee:	d56f      	bpl.n	f3d0 <__ssvfscanf_r+0x43c>
    f2f0:	6a38      	ldr	r0, [r7, #32]
    f2f2:	7803      	ldrb	r3, [r0, #0]
    f2f4:	4293      	cmp	r3, r2
    f2f6:	d16b      	bne.n	f3d0 <__ssvfscanf_r+0x43c>
    f2f8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    f2fc:	607e      	str	r6, [r7, #4]
    f2fe:	4681      	mov	r9, r0
    f300:	ee18 6a10 	vmov	r6, s16
    f304:	f04f 0800 	mov.w	r8, #0
    f308:	465c      	mov	r4, fp
    f30a:	e007      	b.n	f31c <__ssvfscanf_r+0x388>
    f30c:	6021      	str	r1, [r4, #0]
    f30e:	f891 e000 	ldrb.w	lr, [r1]
    f312:	f899 0000 	ldrb.w	r0, [r9]
    f316:	4586      	cmp	lr, r0
    f318:	d11c      	bne.n	f354 <__ssvfscanf_r+0x3c0>
    f31a:	46da      	mov	sl, fp
    f31c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    f320:	4645      	mov	r5, r8
    f322:	f10a 0b01 	add.w	fp, sl, #1
    f326:	3101      	adds	r1, #1
    f328:	f108 0801 	add.w	r8, r8, #1
    f32c:	2800      	cmp	r0, #0
    f32e:	f000 8664 	beq.w	fffa <__ssvfscanf_r+0x1066>
    f332:	6860      	ldr	r0, [r4, #4]
    f334:	3801      	subs	r0, #1
    f336:	2800      	cmp	r0, #0
    f338:	6060      	str	r0, [r4, #4]
    f33a:	dce7      	bgt.n	f30c <__ssvfscanf_r+0x378>
    f33c:	4621      	mov	r1, r4
    f33e:	4630      	mov	r0, r6
    f340:	f002 ffd2 	bl	122e8 <__ssrefill_r>
    f344:	b930      	cbnz	r0, f354 <__ssvfscanf_r+0x3c0>
    f346:	6821      	ldr	r1, [r4, #0]
    f348:	f899 0000 	ldrb.w	r0, [r9]
    f34c:	f891 e000 	ldrb.w	lr, [r1]
    f350:	4586      	cmp	lr, r0
    f352:	d0e2      	beq.n	f31a <__ssvfscanf_r+0x386>
    f354:	46a3      	mov	fp, r4
    f356:	6a3a      	ldr	r2, [r7, #32]
    f358:	68bc      	ldr	r4, [r7, #8]
    f35a:	613d      	str	r5, [r7, #16]
    f35c:	462b      	mov	r3, r5
    f35e:	46b1      	mov	r9, r6
    f360:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f362:	68fd      	ldr	r5, [r7, #12]
    f364:	64bd      	str	r5, [r7, #72]	; 0x48
    f366:	3301      	adds	r3, #1
    f368:	465d      	mov	r5, fp
    f36a:	eb02 0803 	add.w	r8, r2, r3
    f36e:	46b3      	mov	fp, r6
    f370:	4626      	mov	r6, r4
    f372:	4614      	mov	r4, r2
    f374:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
    f378:	462a      	mov	r2, r5
    f37a:	4648      	mov	r0, r9
    f37c:	f002 ff74 	bl	12268 <_sungetc_r>
    f380:	4544      	cmp	r4, r8
    f382:	d1f7      	bne.n	f374 <__ssvfscanf_r+0x3e0>
    f384:	693b      	ldr	r3, [r7, #16]
    f386:	4634      	mov	r4, r6
    f388:	ebaa 0a03 	sub.w	sl, sl, r3
    f38c:	465e      	mov	r6, fp
    f38e:	46ab      	mov	fp, r5
    f390:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f392:	e020      	b.n	f3d6 <__ssvfscanf_r+0x442>
    f394:	05e0      	lsls	r0, r4, #23
    f396:	f100 8501 	bmi.w	fd9c <__ssvfscanf_r+0xe08>
    f39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f39c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f39e:	42d9      	cmn	r1, r3
    f3a0:	d116      	bne.n	f3d0 <__ssvfscanf_r+0x43c>
    f3a2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f3a6:	f805 2b01 	strb.w	r2, [r5], #1
    f3aa:	3e01      	subs	r6, #1
    f3ac:	f8db 3004 	ldr.w	r3, [fp, #4]
    f3b0:	3b01      	subs	r3, #1
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	f10a 0a01 	add.w	sl, sl, #1
    f3b8:	f8cb 3004 	str.w	r3, [fp, #4]
    f3bc:	f340 836f 	ble.w	fa9e <__ssvfscanf_r+0xb0a>
    f3c0:	f8db 3000 	ldr.w	r3, [fp]
    f3c4:	3301      	adds	r3, #1
    f3c6:	f8cb 3000 	str.w	r3, [fp]
    f3ca:	2e00      	cmp	r6, #0
    f3cc:	f47f af36 	bne.w	f23c <__ssvfscanf_r+0x2a8>
    f3d0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f3d2:	ee18 9a10 	vmov	r9, s16
    f3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f3d8:	2b00      	cmp	r3, #0
    f3da:	f040 82dc 	bne.w	f996 <__ssvfscanf_r+0xa02>
    f3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f3e0:	3b01      	subs	r3, #1
    f3e2:	2b01      	cmp	r3, #1
    f3e4:	f241 8016 	bls.w	10414 <__ssvfscanf_r+0x1480>
    f3e8:	1e73      	subs	r3, r6, #1
    f3ea:	2b06      	cmp	r3, #6
    f3ec:	f240 8627 	bls.w	1003e <__ssvfscanf_r+0x10aa>
    f3f0:	05e3      	lsls	r3, r4, #23
    f3f2:	d51b      	bpl.n	f42c <__ssvfscanf_r+0x498>
    f3f4:	0566      	lsls	r6, r4, #21
    f3f6:	f101 80b5 	bmi.w	10564 <__ssvfscanf_r+0x15d0>
    f3fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    f3fe:	2965      	cmp	r1, #101	; 0x65
    f400:	f105 33ff 	add.w	r3, r5, #4294967295
    f404:	f10a 36ff 	add.w	r6, sl, #4294967295
    f408:	d00a      	beq.n	f420 <__ssvfscanf_r+0x48c>
    f40a:	2945      	cmp	r1, #69	; 0x45
    f40c:	d008      	beq.n	f420 <__ssvfscanf_r+0x48c>
    f40e:	465a      	mov	r2, fp
    f410:	4648      	mov	r0, r9
    f412:	f002 ff29 	bl	12268 <_sungetc_r>
    f416:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    f41a:	f1aa 0602 	sub.w	r6, sl, #2
    f41e:	1eab      	subs	r3, r5, #2
    f420:	465a      	mov	r2, fp
    f422:	4648      	mov	r0, r9
    f424:	46b2      	mov	sl, r6
    f426:	461d      	mov	r5, r3
    f428:	f002 ff1e 	bl	12268 <_sungetc_r>
    f42c:	f014 0210 	ands.w	r2, r4, #16
    f430:	f47f add7 	bne.w	efe2 <__ssvfscanf_r+0x4e>
    f434:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f43c:	702a      	strb	r2, [r5, #0]
    f43e:	f000 84d2 	beq.w	fde6 <__ssvfscanf_r+0xe52>
    f442:	69bb      	ldr	r3, [r7, #24]
    f444:	2b00      	cmp	r3, #0
    f446:	f040 872c 	bne.w	102a2 <__ssvfscanf_r+0x130e>
    f44a:	4648      	mov	r0, r9
    f44c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f44e:	2200      	movs	r2, #0
    f450:	f7fb fda2 	bl	af98 <_strtod_r>
    f454:	07e0      	lsls	r0, r4, #31
    f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f458:	f100 85c9 	bmi.w	ffee <__ssvfscanf_r+0x105a>
    f45c:	07a1      	lsls	r1, r4, #30
    f45e:	f100 85c6 	bmi.w	ffee <__ssvfscanf_r+0x105a>
    f462:	eeb4 0b40 	vcmp.f64	d0, d0
    f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f46a:	f853 4b04 	ldr.w	r4, [r3], #4
    f46e:	f180 86f4 	bvs.w	1025a <__ssvfscanf_r+0x12c6>
    f472:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f476:	633b      	str	r3, [r7, #48]	; 0x30
    f478:	ed84 0a00 	vstr	s0, [r4]
    f47c:	e3a2      	b.n	fbc4 <__ssvfscanf_r+0xc30>
    f47e:	f108 33ff 	add.w	r3, r8, #4294967295
    f482:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    f486:	f240 83a2 	bls.w	fbce <__ssvfscanf_r+0xc3a>
    f48a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
    f48e:	eb08 0302 	add.w	r3, r8, r2
    f492:	63fb      	str	r3, [r7, #60]	; 0x3c
    f494:	f240 185d 	movw	r8, #349	; 0x15d
    f498:	f507 73b8 	add.w	r3, r7, #368	; 0x170
    f49c:	2200      	movs	r2, #0
    f49e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    f4a0:	62bb      	str	r3, [r7, #40]	; 0x28
    f4a2:	4659      	mov	r1, fp
    f4a4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
    f4a8:	46d3      	mov	fp, sl
    f4aa:	461d      	mov	r5, r3
    f4ac:	4692      	mov	sl, r2
    f4ae:	680a      	ldr	r2, [r1, #0]
    f4b0:	7810      	ldrb	r0, [r2, #0]
    f4b2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
    f4b6:	2b4d      	cmp	r3, #77	; 0x4d
    f4b8:	d860      	bhi.n	f57c <__ssvfscanf_r+0x5e8>
    f4ba:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4be:	0282      	.short	0x0282
    f4c0:	0282005f 	.word	0x0282005f
    f4c4:	005f005f 	.word	0x005f005f
    f4c8:	01e002cd 	.word	0x01e002cd
    f4cc:	01e001e0 	.word	0x01e001e0
    f4d0:	01e001e0 	.word	0x01e001e0
    f4d4:	01e001e0 	.word	0x01e001e0
    f4d8:	026f026f 	.word	0x026f026f
    f4dc:	005f005f 	.word	0x005f005f
    f4e0:	005f005f 	.word	0x005f005f
    f4e4:	005f005f 	.word	0x005f005f
    f4e8:	004e005f 	.word	0x004e005f
    f4ec:	004e004e 	.word	0x004e004e
    f4f0:	004e004e 	.word	0x004e004e
    f4f4:	005f004e 	.word	0x005f004e
    f4f8:	005f005f 	.word	0x005f005f
    f4fc:	005f005f 	.word	0x005f005f
    f500:	005f005f 	.word	0x005f005f
    f504:	005f005f 	.word	0x005f005f
    f508:	005f005f 	.word	0x005f005f
    f50c:	005f005f 	.word	0x005f005f
    f510:	005f005f 	.word	0x005f005f
    f514:	005f005f 	.word	0x005f005f
    f518:	005f0276 	.word	0x005f0276
    f51c:	005f005f 	.word	0x005f005f
    f520:	005f005f 	.word	0x005f005f
    f524:	005f005f 	.word	0x005f005f
    f528:	004e005f 	.word	0x004e005f
    f52c:	004e004e 	.word	0x004e004e
    f530:	004e004e 	.word	0x004e004e
    f534:	005f004e 	.word	0x005f004e
    f538:	005f005f 	.word	0x005f005f
    f53c:	005f005f 	.word	0x005f005f
    f540:	005f005f 	.word	0x005f005f
    f544:	005f005f 	.word	0x005f005f
    f548:	005f005f 	.word	0x005f005f
    f54c:	005f005f 	.word	0x005f005f
    f550:	005f005f 	.word	0x005f005f
    f554:	005f005f 	.word	0x005f005f
    f558:	0276      	.short	0x0276
    f55a:	2e0a      	cmp	r6, #10
    f55c:	dd0e      	ble.n	f57c <__ssvfscanf_r+0x5e8>
    f55e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f562:	684b      	ldr	r3, [r1, #4]
    f564:	f805 0b01 	strb.w	r0, [r5], #1
    f568:	3b01      	subs	r3, #1
    f56a:	2b00      	cmp	r3, #0
    f56c:	604b      	str	r3, [r1, #4]
    f56e:	f340 828d 	ble.w	fa8c <__ssvfscanf_r+0xaf8>
    f572:	3201      	adds	r2, #1
    f574:	600a      	str	r2, [r1, #0]
    f576:	f1b8 0801 	subs.w	r8, r8, #1
    f57a:	d198      	bne.n	f4ae <__ssvfscanf_r+0x51a>
    f57c:	05e0      	lsls	r0, r4, #23
    f57e:	46d0      	mov	r8, sl
    f580:	63be      	str	r6, [r7, #56]	; 0x38
    f582:	46da      	mov	sl, fp
    f584:	468b      	mov	fp, r1
    f586:	d507      	bpl.n	f598 <__ssvfscanf_r+0x604>
    f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f58a:	429d      	cmp	r5, r3
    f58c:	f200 8422 	bhi.w	fdd4 <__ssvfscanf_r+0xe40>
    f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f592:	429d      	cmp	r5, r3
    f594:	f43f adf3 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    f598:	f014 0210 	ands.w	r2, r4, #16
    f59c:	d110      	bne.n	f5c0 <__ssvfscanf_r+0x62c>
    f59e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f5a2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    f5a4:	702a      	strb	r2, [r5, #0]
    f5a6:	4648      	mov	r0, r9
    f5a8:	47b0      	blx	r6
    f5aa:	06a1      	lsls	r1, r4, #26
    f5ac:	f140 8408 	bpl.w	fdc0 <__ssvfscanf_r+0xe2c>
    f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f5b2:	f853 2b04 	ldr.w	r2, [r3], #4
    f5b6:	6010      	str	r0, [r2, #0]
    f5b8:	633b      	str	r3, [r7, #48]	; 0x30
    f5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f5bc:	3301      	adds	r3, #1
    f5be:	647b      	str	r3, [r7, #68]	; 0x44
    f5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f5c2:	1aed      	subs	r5, r5, r3
    f5c4:	4445      	add	r5, r8
    f5c6:	44aa      	add	sl, r5
    f5c8:	e50b      	b.n	efe2 <__ssvfscanf_r+0x4e>
    f5ca:	f1b8 0f00 	cmp.w	r8, #0
    f5ce:	bf08      	it	eq
    f5d0:	f04f 38ff 	moveq.w	r8, #4294967295
    f5d4:	07e0      	lsls	r0, r4, #31
    f5d6:	f140 8295 	bpl.w	fb04 <__ssvfscanf_r+0xb70>
    f5da:	f014 0310 	ands.w	r3, r4, #16
    f5de:	637b      	str	r3, [r7, #52]	; 0x34
    f5e0:	f040 8474 	bne.w	fecc <__ssvfscanf_r+0xf38>
    f5e4:	0621      	lsls	r1, r4, #24
    f5e6:	f140 8666 	bpl.w	102b6 <__ssvfscanf_r+0x1322>
    f5ea:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    f5ec:	f854 3b04 	ldr.w	r3, [r4], #4
    f5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	f43f adc3 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    f5f8:	2080      	movs	r0, #128	; 0x80
    f5fa:	f7fa f8cf 	bl	979c <malloc>
    f5fe:	64b8      	str	r0, [r7, #72]	; 0x48
    f600:	2800      	cmp	r0, #0
    f602:	f000 8778 	beq.w	104f6 <__ssvfscanf_r+0x1562>
    f606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f608:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f60a:	601a      	str	r2, [r3, #0]
    f60c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f60e:	88d5      	ldrh	r5, [r2, #6]
    f610:	8893      	ldrh	r3, [r2, #4]
    f612:	429d      	cmp	r5, r3
    f614:	f080 8552 	bcs.w	100bc <__ssvfscanf_r+0x1128>
    f618:	6810      	ldr	r0, [r2, #0]
    f61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f61c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f622:	633c      	str	r4, [r7, #48]	; 0x30
    f624:	3501      	adds	r5, #1
    f626:	80dd      	strh	r5, [r3, #6]
    f628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f62a:	62bb      	str	r3, [r7, #40]	; 0x28
    f62c:	2320      	movs	r3, #32
    f62e:	623b      	str	r3, [r7, #32]
    f630:	f8db 3000 	ldr.w	r3, [fp]
    f634:	4eb1      	ldr	r6, [pc, #708]	; (f8fc <__ssvfscanf_r+0x968>)
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	5cf3      	ldrb	r3, [r6, r3]
    f63a:	f013 0308 	ands.w	r3, r3, #8
    f63e:	f040 84bb 	bne.w	ffb8 <__ssvfscanf_r+0x1024>
    f642:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    f644:	627e      	str	r6, [r7, #36]	; 0x24
    f646:	461d      	mov	r5, r3
    f648:	f7fc f8aa 	bl	b7a0 <__locale_mb_cur_max>
    f64c:	42a8      	cmp	r0, r5
    f64e:	f43f ad8d 	beq.w	f16c <__ssvfscanf_r+0x1d8>
    f652:	e9db 3200 	ldrd	r3, r2, [fp]
    f656:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    f65a:	f813 1b01 	ldrb.w	r1, [r3], #1
    f65e:	5541      	strb	r1, [r0, r5]
    f660:	3a01      	subs	r2, #1
    f662:	2c03      	cmp	r4, #3
    f664:	e9cb 3200 	strd	r3, r2, [fp]
    f668:	f105 0501 	add.w	r5, r5, #1
    f66c:	f107 0668 	add.w	r6, r7, #104	; 0x68
    f670:	d102      	bne.n	f678 <__ssvfscanf_r+0x6e4>
    f672:	6833      	ldr	r3, [r6, #0]
    f674:	2b04      	cmp	r3, #4
    f676:	d004      	beq.n	f682 <__ssvfscanf_r+0x6ee>
    f678:	2208      	movs	r2, #8
    f67a:	2100      	movs	r1, #0
    f67c:	4630      	mov	r0, r6
    f67e:	f7fb ffc5 	bl	b60c <memset>
    f682:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    f686:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    f688:	9600      	str	r6, [sp, #0]
    f68a:	462b      	mov	r3, r5
    f68c:	4648      	mov	r0, r9
    f68e:	f002 fc17 	bl	11ec0 <_mbrtowc_r>
    f692:	1c42      	adds	r2, r0, #1
    f694:	4604      	mov	r4, r0
    f696:	f43f ad69 	beq.w	f16c <__ssvfscanf_r+0x1d8>
    f69a:	2800      	cmp	r0, #0
    f69c:	f040 8478 	bne.w	ff90 <__ssvfscanf_r+0xffc>
    f6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f6a2:	6018      	str	r0, [r3, #0]
    f6a4:	f002 fc68 	bl	11f78 <iswspace>
    f6a8:	2800      	cmp	r0, #0
    f6aa:	f040 865c 	bne.w	10366 <__ssvfscanf_r+0x13d2>
    f6ae:	44aa      	add	sl, r5
    f6b0:	f108 38ff 	add.w	r8, r8, #4294967295
    f6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6b6:	2b00      	cmp	r3, #0
    f6b8:	f040 8633 	bne.w	10322 <__ssvfscanf_r+0x138e>
    f6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f6be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f6c0:	3304      	adds	r3, #4
    f6c2:	64bb      	str	r3, [r7, #72]	; 0x48
    f6c4:	2a00      	cmp	r2, #0
    f6c6:	f000 862c 	beq.w	10322 <__ssvfscanf_r+0x138e>
    f6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f6cc:	1a9d      	subs	r5, r3, r2
    f6ce:	6a3b      	ldr	r3, [r7, #32]
    f6d0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
    f6d4:	f240 8756 	bls.w	10584 <__ssvfscanf_r+0x15f0>
    f6d8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    f6da:	f000 bc5c 	b.w	ff96 <__ssvfscanf_r+0x1002>
    f6de:	f1b8 0f00 	cmp.w	r8, #0
    f6e2:	bf08      	it	eq
    f6e4:	f04f 38ff 	moveq.w	r8, #4294967295
    f6e8:	07e0      	lsls	r0, r4, #31
    f6ea:	f140 827b 	bpl.w	fbe4 <__ssvfscanf_r+0xc50>
    f6ee:	f014 0310 	ands.w	r3, r4, #16
    f6f2:	62bb      	str	r3, [r7, #40]	; 0x28
    f6f4:	f040 83f3 	bne.w	fede <__ssvfscanf_r+0xf4a>
    f6f8:	0621      	lsls	r1, r4, #24
    f6fa:	f140 85ed 	bpl.w	102d8 <__ssvfscanf_r+0x1344>
    f6fe:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    f700:	f856 3b04 	ldr.w	r3, [r6], #4
    f704:	623b      	str	r3, [r7, #32]
    f706:	2b00      	cmp	r3, #0
    f708:	f43f ad39 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    f70c:	2080      	movs	r0, #128	; 0x80
    f70e:	f7fa f845 	bl	979c <malloc>
    f712:	4604      	mov	r4, r0
    f714:	2800      	cmp	r0, #0
    f716:	f000 86ee 	beq.w	104f6 <__ssvfscanf_r+0x1562>
    f71a:	6a3b      	ldr	r3, [r7, #32]
    f71c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f71e:	6018      	str	r0, [r3, #0]
    f720:	88d5      	ldrh	r5, [r2, #6]
    f722:	8893      	ldrh	r3, [r2, #4]
    f724:	429d      	cmp	r5, r3
    f726:	f080 84dd 	bcs.w	100e4 <__ssvfscanf_r+0x1150>
    f72a:	6810      	ldr	r0, [r2, #0]
    f72c:	6a3b      	ldr	r3, [r7, #32]
    f72e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    f732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f734:	633e      	str	r6, [r7, #48]	; 0x30
    f736:	3501      	adds	r5, #1
    f738:	80dd      	strh	r5, [r3, #6]
    f73a:	2320      	movs	r3, #32
    f73c:	61fc      	str	r4, [r7, #28]
    f73e:	61bb      	str	r3, [r7, #24]
    f740:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    f742:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    f746:	2500      	movs	r5, #0
    f748:	46c2      	mov	sl, r8
    f74a:	46a0      	mov	r8, r4
    f74c:	f7fc f828 	bl	b7a0 <__locale_mb_cur_max>
    f750:	42a8      	cmp	r0, r5
    f752:	f43f ad0b 	beq.w	f16c <__ssvfscanf_r+0x1d8>
    f756:	e9db 3200 	ldrd	r3, r2, [fp]
    f75a:	f813 1b01 	ldrb.w	r1, [r3], #1
    f75e:	3a01      	subs	r2, #1
    f760:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    f764:	e9cb 3200 	strd	r3, r2, [fp]
    f768:	2e03      	cmp	r6, #3
    f76a:	f105 0301 	add.w	r3, r5, #1
    f76e:	5541      	strb	r1, [r0, r5]
    f770:	64bb      	str	r3, [r7, #72]	; 0x48
    f772:	f107 0460 	add.w	r4, r7, #96	; 0x60
    f776:	d102      	bne.n	f77e <__ssvfscanf_r+0x7ea>
    f778:	6823      	ldr	r3, [r4, #0]
    f77a:	2b04      	cmp	r3, #4
    f77c:	d004      	beq.n	f788 <__ssvfscanf_r+0x7f4>
    f77e:	2208      	movs	r2, #8
    f780:	2100      	movs	r1, #0
    f782:	4620      	mov	r0, r4
    f784:	f7fb ff42 	bl	b60c <memset>
    f788:	f507 72b8 	add.w	r2, r7, #368	; 0x170
    f78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f78e:	9400      	str	r4, [sp, #0]
    f790:	4641      	mov	r1, r8
    f792:	4648      	mov	r0, r9
    f794:	f002 fb94 	bl	11ec0 <_mbrtowc_r>
    f798:	1c42      	adds	r2, r0, #1
    f79a:	4606      	mov	r6, r0
    f79c:	f43f ace6 	beq.w	f16c <__ssvfscanf_r+0x1d8>
    f7a0:	2800      	cmp	r0, #0
    f7a2:	f040 82ca 	bne.w	fd3a <__ssvfscanf_r+0xda6>
    f7a6:	f8c8 0000 	str.w	r0, [r8]
    f7aa:	4605      	mov	r5, r0
    f7ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
    f7b0:	2208      	movs	r2, #8
    f7b2:	2100      	movs	r1, #0
    f7b4:	4618      	mov	r0, r3
    f7b6:	637b      	str	r3, [r7, #52]	; 0x34
    f7b8:	f7fb ff28 	bl	b60c <memset>
    f7bc:	4950      	ldr	r1, [pc, #320]	; (f900 <__ssvfscanf_r+0x96c>)
    f7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7c0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    f7c4:	462a      	mov	r2, r5
    f7c6:	4648      	mov	r0, r9
    f7c8:	460d      	mov	r5, r1
    f7ca:	f107 0150 	add.w	r1, r7, #80	; 0x50
    f7ce:	47a8      	blx	r5
    f7d0:	2801      	cmp	r0, #1
    f7d2:	f000 83d5 	beq.w	ff80 <__ssvfscanf_r+0xfec>
    f7d6:	2200      	movs	r2, #0
    f7d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
    f7dc:	5c9b      	ldrb	r3, [r3, r2]
    f7de:	2b00      	cmp	r3, #0
    f7e0:	f000 85a1 	beq.w	10326 <__ssvfscanf_r+0x1392>
    f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f7e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f7e8:	2e03      	cmp	r6, #3
    f7ea:	4413      	add	r3, r2
    f7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    f7ee:	f000 83ca 	beq.w	ff86 <__ssvfscanf_r+0xff2>
    f7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
    f7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f7f8:	b95b      	cbnz	r3, f812 <__ssvfscanf_r+0x87e>
    f7fa:	6a3b      	ldr	r3, [r7, #32]
    f7fc:	f108 0804 	add.w	r8, r8, #4
    f800:	b13b      	cbz	r3, f812 <__ssvfscanf_r+0x87e>
    f802:	69fb      	ldr	r3, [r7, #28]
    f804:	eba8 0403 	sub.w	r4, r8, r3
    f808:	69bb      	ldr	r3, [r7, #24]
    f80a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
    f80e:	f240 8405 	bls.w	1001c <__ssvfscanf_r+0x1088>
    f812:	f8db 3004 	ldr.w	r3, [fp, #4]
    f816:	2b00      	cmp	r3, #0
    f818:	f04f 0500 	mov.w	r5, #0
    f81c:	f340 8296 	ble.w	fd4c <__ssvfscanf_r+0xdb8>
    f820:	f1ba 0f00 	cmp.w	sl, #0
    f824:	d192      	bne.n	f74c <__ssvfscanf_r+0x7b8>
    f826:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    f82a:	627e      	str	r6, [r7, #36]	; 0x24
    f82c:	4644      	mov	r4, r8
    f82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f830:	2b00      	cmp	r3, #0
    f832:	f47f abd6 	bne.w	efe2 <__ssvfscanf_r+0x4e>
    f836:	6023      	str	r3, [r4, #0]
    f838:	6a3b      	ldr	r3, [r7, #32]
    f83a:	2b00      	cmp	r3, #0
    f83c:	f000 81c2 	beq.w	fbc4 <__ssvfscanf_r+0xc30>
    f840:	69fb      	ldr	r3, [r7, #28]
    f842:	69ba      	ldr	r2, [r7, #24]
    f844:	1ae1      	subs	r1, r4, r3
    f846:	108b      	asrs	r3, r1, #2
    f848:	3301      	adds	r3, #1
    f84a:	429a      	cmp	r2, r3
    f84c:	f240 81ba 	bls.w	fbc4 <__ssvfscanf_r+0xc30>
    f850:	6a3c      	ldr	r4, [r7, #32]
    f852:	3104      	adds	r1, #4
    f854:	6820      	ldr	r0, [r4, #0]
    f856:	f7fa fa6d 	bl	9d34 <realloc>
    f85a:	2800      	cmp	r0, #0
    f85c:	f000 81b2 	beq.w	fbc4 <__ssvfscanf_r+0xc30>
    f860:	6020      	str	r0, [r4, #0]
    f862:	e1af      	b.n	fbc4 <__ssvfscanf_r+0xc30>
    f864:	0521      	lsls	r1, r4, #20
    f866:	f57f adb3 	bpl.w	f3d0 <__ssvfscanf_r+0x43c>
    f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f86c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    f86e:	185b      	adds	r3, r3, r1
    f870:	f47f adae 	bne.w	f3d0 <__ssvfscanf_r+0x43c>
    f874:	64bb      	str	r3, [r7, #72]	; 0x48
    f876:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
    f87a:	63fb      	str	r3, [r7, #60]	; 0x3c
    f87c:	e593      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f87e:	4b21      	ldr	r3, [pc, #132]	; (f904 <__ssvfscanf_r+0x970>)
    f880:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
    f884:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    f888:	e66b      	b.n	f562 <__ssvfscanf_r+0x5ce>
    f88a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
    f88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f892:	f47f ad9d 	bne.w	f3d0 <__ssvfscanf_r+0x43c>
    f896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f898:	2b01      	cmp	r3, #1
    f89a:	f47f ad99 	bne.w	f3d0 <__ssvfscanf_r+0x43c>
    f89e:	2330      	movs	r3, #48	; 0x30
    f8a0:	f805 3b01 	strb.w	r3, [r5], #1
    f8a4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    f8a8:	2300      	movs	r3, #0
    f8aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
    f8ae:	3e01      	subs	r6, #1
    f8b0:	637b      	str	r3, [r7, #52]	; 0x34
    f8b2:	e578      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f8b6:	2b06      	cmp	r3, #6
    f8b8:	f040 8574 	bne.w	103a4 <__ssvfscanf_r+0x1410>
    f8bc:	2307      	movs	r3, #7
    f8be:	64bb      	str	r3, [r7, #72]	; 0x48
    f8c0:	e571      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f8c2:	0523      	lsls	r3, r4, #20
    f8c4:	f57f ad84 	bpl.w	f3d0 <__ssvfscanf_r+0x43c>
    f8c8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
    f8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f8d0:	d005      	beq.n	f8de <__ssvfscanf_r+0x94a>
    f8d2:	0561      	lsls	r1, r4, #21
    f8d4:	f57f ad7c 	bpl.w	f3d0 <__ssvfscanf_r+0x43c>
    f8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d047      	beq.n	f96e <__ssvfscanf_r+0x9da>
    f8de:	05a3      	lsls	r3, r4, #22
    f8e0:	d404      	bmi.n	f8ec <__ssvfscanf_r+0x958>
    f8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f8e4:	69f9      	ldr	r1, [r7, #28]
    f8e6:	1a5b      	subs	r3, r3, r1
    f8e8:	e9c7 5305 	strd	r5, r3, [r7, #20]
    f8ec:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
    f8f0:	2300      	movs	r3, #0
    f8f2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
    f8f6:	637b      	str	r3, [r7, #52]	; 0x34
    f8f8:	e555      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f8fa:	bf00      	nop
    f8fc:	20000bad 	.word	0x20000bad
    f900:	200086f0 	.word	0x200086f0
    f904:	200027d0 	.word	0x200027d0
    f908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f90a:	2b00      	cmp	r3, #0
    f90c:	f000 81ff 	beq.w	fd0e <__ssvfscanf_r+0xd7a>
    f910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f912:	2b02      	cmp	r3, #2
    f914:	f000 83b0 	beq.w	10078 <__ssvfscanf_r+0x10e4>
    f918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f91a:	2b01      	cmp	r3, #1
    f91c:	f000 81f1 	beq.w	fd02 <__ssvfscanf_r+0xd6e>
    f920:	2b04      	cmp	r3, #4
    f922:	f000 81ee 	beq.w	fd02 <__ssvfscanf_r+0xd6e>
    f926:	e553      	b.n	f3d0 <__ssvfscanf_r+0x43c>
    f928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f92a:	2b07      	cmp	r3, #7
    f92c:	f040 853a 	bne.w	103a4 <__ssvfscanf_r+0x1410>
    f930:	2308      	movs	r3, #8
    f932:	64bb      	str	r3, [r7, #72]	; 0x48
    f934:	e537      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f936:	0520      	lsls	r0, r4, #20
    f938:	f100 81f9 	bmi.w	fd2e <__ssvfscanf_r+0xd9a>
    f93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    f93e:	2b01      	cmp	r3, #1
    f940:	f47f ad46 	bne.w	f3d0 <__ssvfscanf_r+0x43c>
    f944:	2302      	movs	r3, #2
    f946:	63fb      	str	r3, [r7, #60]	; 0x3c
    f948:	e52d      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f94a:	0623      	lsls	r3, r4, #24
    f94c:	f57f ad40 	bpl.w	f3d0 <__ssvfscanf_r+0x43c>
    f950:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    f954:	e527      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f958:	2b00      	cmp	r3, #0
    f95a:	f040 81cc 	bne.w	fcf6 <__ssvfscanf_r+0xd62>
    f95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f960:	b9b3      	cbnz	r3, f990 <__ssvfscanf_r+0x9fc>
    f962:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    f966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    f96a:	f000 8520 	beq.w	103ae <__ssvfscanf_r+0x141a>
    f96e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f970:	ee18 9a10 	vmov	r9, s16
    f974:	e533      	b.n	f3de <__ssvfscanf_r+0x44a>
    f976:	0521      	lsls	r1, r4, #20
    f978:	f100 81b7 	bmi.w	fcea <__ssvfscanf_r+0xd56>
    f97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f97e:	2b02      	cmp	r3, #2
    f980:	f040 8510 	bne.w	103a4 <__ssvfscanf_r+0x1410>
    f984:	2303      	movs	r3, #3
    f986:	64bb      	str	r3, [r7, #72]	; 0x48
    f988:	e50d      	b.n	f3a6 <__ssvfscanf_r+0x412>
    f98a:	0520      	lsls	r0, r4, #20
    f98c:	d59c      	bpl.n	f8c8 <__ssvfscanf_r+0x934>
    f98e:	e76c      	b.n	f86a <__ssvfscanf_r+0x8d6>
    f990:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    f992:	ee18 9a10 	vmov	r9, s16
    f996:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    f99a:	e520      	b.n	f3de <__ssvfscanf_r+0x44a>
    f99c:	4b8d      	ldr	r3, [pc, #564]	; (fbd4 <__ssvfscanf_r+0xc40>)
    f99e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
    f9a2:	2e08      	cmp	r6, #8
    f9a4:	f73f addb 	bgt.w	f55e <__ssvfscanf_r+0x5ca>
    f9a8:	e5e8      	b.n	f57c <__ssvfscanf_r+0x5e8>
    f9aa:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
    f9ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    f9b2:	f47f ade3 	bne.w	f57c <__ssvfscanf_r+0x5e8>
    f9b6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    f9ba:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
    f9be:	2610      	movs	r6, #16
    f9c0:	e5cf      	b.n	f562 <__ssvfscanf_r+0x5ce>
    f9c2:	0623      	lsls	r3, r4, #24
    f9c4:	f57f adda 	bpl.w	f57c <__ssvfscanf_r+0x5e8>
    f9c8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    f9cc:	e5c9      	b.n	f562 <__ssvfscanf_r+0x5ce>
    f9ce:	f044 0401 	orr.w	r4, r4, #1
    f9d2:	f8db 3004 	ldr.w	r3, [fp, #4]
    f9d6:	64f9      	str	r1, [r7, #76]	; 0x4c
    f9d8:	2b00      	cmp	r3, #0
    f9da:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    f9de:	f04f 0500 	mov.w	r5, #0
    f9e2:	f73f abf8 	bgt.w	f1d6 <__ssvfscanf_r+0x242>
    f9e6:	4659      	mov	r1, fp
    f9e8:	4648      	mov	r0, r9
    f9ea:	f002 fc7d 	bl	122e8 <__ssrefill_r>
    f9ee:	2800      	cmp	r0, #0
    f9f0:	f47f abbc 	bne.w	f16c <__ssvfscanf_r+0x1d8>
    f9f4:	0660      	lsls	r0, r4, #25
    f9f6:	f53f abf1 	bmi.w	f1dc <__ssvfscanf_r+0x248>
    f9fa:	f8db 2000 	ldr.w	r2, [fp]
    f9fe:	4e76      	ldr	r6, [pc, #472]	; (fbd8 <__ssvfscanf_r+0xc44>)
    fa00:	7813      	ldrb	r3, [r2, #0]
    fa02:	5cf3      	ldrb	r3, [r6, r3]
    fa04:	0719      	lsls	r1, r3, #28
    fa06:	f57f abe9 	bpl.w	f1dc <__ssvfscanf_r+0x248>
    fa0a:	f8db 3004 	ldr.w	r3, [fp, #4]
    fa0e:	3b01      	subs	r3, #1
    fa10:	2b00      	cmp	r3, #0
    fa12:	f10a 0a01 	add.w	sl, sl, #1
    fa16:	f8cb 3004 	str.w	r3, [fp, #4]
    fa1a:	f102 0201 	add.w	r2, r2, #1
    fa1e:	dd4a      	ble.n	fab6 <__ssvfscanf_r+0xb22>
    fa20:	f8cb 2000 	str.w	r2, [fp]
    fa24:	7813      	ldrb	r3, [r2, #0]
    fa26:	5cf3      	ldrb	r3, [r6, r3]
    fa28:	0719      	lsls	r1, r3, #28
    fa2a:	f57f abd7 	bpl.w	f1dc <__ssvfscanf_r+0x248>
    fa2e:	e7ec      	b.n	fa0a <__ssvfscanf_r+0xa76>
    fa30:	f044 0401 	orr.w	r4, r4, #1
    fa34:	4b69      	ldr	r3, [pc, #420]	; (fbdc <__ssvfscanf_r+0xc48>)
    fa36:	62fb      	str	r3, [r7, #44]	; 0x2c
    fa38:	2308      	movs	r3, #8
    fa3a:	64f9      	str	r1, [r7, #76]	; 0x4c
    fa3c:	63bb      	str	r3, [r7, #56]	; 0x38
    fa3e:	2503      	movs	r5, #3
    fa40:	f7ff bbc4 	b.w	f1cc <__ssvfscanf_r+0x238>
    fa44:	f044 0401 	orr.w	r4, r4, #1
    fa48:	4b65      	ldr	r3, [pc, #404]	; (fbe0 <__ssvfscanf_r+0xc4c>)
    fa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    fa4c:	230a      	movs	r3, #10
    fa4e:	64f9      	str	r1, [r7, #76]	; 0x4c
    fa50:	63bb      	str	r3, [r7, #56]	; 0x38
    fa52:	2503      	movs	r5, #3
    fa54:	f7ff bbba 	b.w	f1cc <__ssvfscanf_r+0x238>
    fa58:	0523      	lsls	r3, r4, #20
    fa5a:	f57f ad82 	bpl.w	f562 <__ssvfscanf_r+0x5ce>
    fa5e:	b916      	cbnz	r6, fa66 <__ssvfscanf_r+0xad2>
    fa60:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fa64:	2608      	movs	r6, #8
    fa66:	0563      	lsls	r3, r4, #21
    fa68:	f100 81a6 	bmi.w	fdb8 <__ssvfscanf_r+0xe24>
    fa6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa6e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
    fa72:	b11b      	cbz	r3, fa7c <__ssvfscanf_r+0xae8>
    fa74:	3b01      	subs	r3, #1
    fa76:	63fb      	str	r3, [r7, #60]	; 0x3c
    fa78:	f108 0801 	add.w	r8, r8, #1
    fa7c:	684b      	ldr	r3, [r1, #4]
    fa7e:	3b01      	subs	r3, #1
    fa80:	2b00      	cmp	r3, #0
    fa82:	f10a 0a01 	add.w	sl, sl, #1
    fa86:	604b      	str	r3, [r1, #4]
    fa88:	f73f ad73 	bgt.w	f572 <__ssvfscanf_r+0x5de>
    fa8c:	4648      	mov	r0, r9
    fa8e:	64b9      	str	r1, [r7, #72]	; 0x48
    fa90:	f002 fc2a 	bl	122e8 <__ssrefill_r>
    fa94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fa96:	2800      	cmp	r0, #0
    fa98:	f43f ad6d 	beq.w	f576 <__ssvfscanf_r+0x5e2>
    fa9c:	e56e      	b.n	f57c <__ssvfscanf_r+0x5e8>
    fa9e:	ee18 0a10 	vmov	r0, s16
    faa2:	4659      	mov	r1, fp
    faa4:	f002 fc20 	bl	122e8 <__ssrefill_r>
    faa8:	2800      	cmp	r0, #0
    faaa:	f47f ac91 	bne.w	f3d0 <__ssvfscanf_r+0x43c>
    faae:	2e00      	cmp	r6, #0
    fab0:	f47f abc4 	bne.w	f23c <__ssvfscanf_r+0x2a8>
    fab4:	e48c      	b.n	f3d0 <__ssvfscanf_r+0x43c>
    fab6:	4659      	mov	r1, fp
    fab8:	4648      	mov	r0, r9
    faba:	f002 fc15 	bl	122e8 <__ssrefill_r>
    fabe:	2800      	cmp	r0, #0
    fac0:	f47f ab54 	bne.w	f16c <__ssvfscanf_r+0x1d8>
    fac4:	f8db 2000 	ldr.w	r2, [fp]
    fac8:	e79a      	b.n	fa00 <__ssvfscanf_r+0xa6c>
    faca:	f8db 2004 	ldr.w	r2, [fp, #4]
    face:	e00f      	b.n	faf0 <__ssvfscanf_r+0xb5c>
    fad0:	f8db 3000 	ldr.w	r3, [fp]
    fad4:	781a      	ldrb	r2, [r3, #0]
    fad6:	5cb2      	ldrb	r2, [r6, r2]
    fad8:	0711      	lsls	r1, r2, #28
    fada:	f103 0301 	add.w	r3, r3, #1
    fade:	f57f aa80 	bpl.w	efe2 <__ssvfscanf_r+0x4e>
    fae2:	f8db 2004 	ldr.w	r2, [fp, #4]
    fae6:	3a01      	subs	r2, #1
    fae8:	e9cb 3200 	strd	r3, r2, [fp]
    faec:	f10a 0a01 	add.w	sl, sl, #1
    faf0:	2a00      	cmp	r2, #0
    faf2:	dced      	bgt.n	fad0 <__ssvfscanf_r+0xb3c>
    faf4:	4659      	mov	r1, fp
    faf6:	4648      	mov	r0, r9
    faf8:	f002 fbf6 	bl	122e8 <__ssrefill_r>
    fafc:	2800      	cmp	r0, #0
    fafe:	d0e7      	beq.n	fad0 <__ssvfscanf_r+0xb3c>
    fb00:	f7ff ba6f 	b.w	efe2 <__ssvfscanf_r+0x4e>
    fb04:	06e1      	lsls	r1, r4, #27
    fb06:	f100 8349 	bmi.w	1019c <__ssvfscanf_r+0x1208>
    fb0a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    fb0e:	f000 83ab 	beq.w	10268 <__ssvfscanf_r+0x12d4>
    fb12:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fb14:	f854 6b04 	ldr.w	r6, [r4], #4
    fb18:	64be      	str	r6, [r7, #72]	; 0x48
    fb1a:	2e00      	cmp	r6, #0
    fb1c:	f43f ab2f 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    fb20:	2020      	movs	r0, #32
    fb22:	f7f9 fe3b 	bl	979c <malloc>
    fb26:	4605      	mov	r5, r0
    fb28:	2800      	cmp	r0, #0
    fb2a:	f000 8462 	beq.w	103f2 <__ssvfscanf_r+0x145e>
    fb2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fb30:	6030      	str	r0, [r6, #0]
    fb32:	8893      	ldrh	r3, [r2, #4]
    fb34:	88d6      	ldrh	r6, [r2, #6]
    fb36:	429e      	cmp	r6, r3
    fb38:	f080 82a8 	bcs.w	1008c <__ssvfscanf_r+0x10f8>
    fb3c:	6810      	ldr	r0, [r2, #0]
    fb3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fb40:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    fb44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fb46:	633c      	str	r4, [r7, #48]	; 0x30
    fb48:	3601      	adds	r6, #1
    fb4a:	80de      	strh	r6, [r3, #6]
    fb4c:	2320      	movs	r3, #32
    fb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    fb50:	f8db 2000 	ldr.w	r2, [fp]
    fb54:	4e20      	ldr	r6, [pc, #128]	; (fbd8 <__ssvfscanf_r+0xc44>)
    fb56:	7811      	ldrb	r1, [r2, #0]
    fb58:	5c71      	ldrb	r1, [r6, r1]
    fb5a:	0708      	lsls	r0, r1, #28
    fb5c:	f100 82ac 	bmi.w	100b8 <__ssvfscanf_r+0x1124>
    fb60:	4633      	mov	r3, r6
    fb62:	462c      	mov	r4, r5
    fb64:	4610      	mov	r0, r2
    fb66:	462e      	mov	r6, r5
    fb68:	f8db 1004 	ldr.w	r1, [fp, #4]
    fb6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fb6e:	3901      	subs	r1, #1
    fb70:	f8cb 1004 	str.w	r1, [fp, #4]
    fb74:	1c41      	adds	r1, r0, #1
    fb76:	f8cb 1000 	str.w	r1, [fp]
    fb7a:	4635      	mov	r5, r6
    fb7c:	7801      	ldrb	r1, [r0, #0]
    fb7e:	f805 1b01 	strb.w	r1, [r5], #1
    fb82:	b122      	cbz	r2, fb8e <__ssvfscanf_r+0xbfa>
    fb84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fb86:	1b2e      	subs	r6, r5, r4
    fb88:	4296      	cmp	r6, r2
    fb8a:	f080 837a 	bcs.w	10282 <__ssvfscanf_r+0x12ee>
    fb8e:	f1b8 0801 	subs.w	r8, r8, #1
    fb92:	d00b      	beq.n	fbac <__ssvfscanf_r+0xc18>
    fb94:	f8db 1004 	ldr.w	r1, [fp, #4]
    fb98:	2900      	cmp	r1, #0
    fb9a:	462e      	mov	r6, r5
    fb9c:	f340 83ae 	ble.w	102fc <__ssvfscanf_r+0x1368>
    fba0:	f8db 0000 	ldr.w	r0, [fp]
    fba4:	7801      	ldrb	r1, [r0, #0]
    fba6:	5c59      	ldrb	r1, [r3, r1]
    fba8:	0709      	lsls	r1, r1, #28
    fbaa:	d5dd      	bpl.n	fb68 <__ssvfscanf_r+0xbd4>
    fbac:	1b29      	subs	r1, r5, r4
    fbae:	448a      	add	sl, r1
    fbb0:	3101      	adds	r1, #1
    fbb2:	f04f 0300 	mov.w	r3, #0
    fbb6:	702b      	strb	r3, [r5, #0]
    fbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fbba:	b11b      	cbz	r3, fbc4 <__ssvfscanf_r+0xc30>
    fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fbbe:	428b      	cmp	r3, r1
    fbc0:	f200 8394 	bhi.w	102ec <__ssvfscanf_r+0x1358>
    fbc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fbc6:	3301      	adds	r3, #1
    fbc8:	647b      	str	r3, [r7, #68]	; 0x44
    fbca:	f7ff ba0a 	b.w	efe2 <__ssvfscanf_r+0x4e>
    fbce:	2300      	movs	r3, #0
    fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    fbd2:	e461      	b.n	f498 <__ssvfscanf_r+0x504>
    fbd4:	200027d0 	.word	0x200027d0
    fbd8:	20000bad 	.word	0x20000bad
    fbdc:	00011bad 	.word	0x00011bad
    fbe0:	0000b0e9 	.word	0x0000b0e9
    fbe4:	06e6      	lsls	r6, r4, #27
    fbe6:	f100 8181 	bmi.w	feec <__ssvfscanf_r+0xf58>
    fbea:	f014 0480 	ands.w	r4, r4, #128	; 0x80
    fbee:	f000 836d 	beq.w	102cc <__ssvfscanf_r+0x1338>
    fbf2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    fbf4:	f854 6b04 	ldr.w	r6, [r4], #4
    fbf8:	64be      	str	r6, [r7, #72]	; 0x48
    fbfa:	2e00      	cmp	r6, #0
    fbfc:	f43f aabf 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    fc00:	2020      	movs	r0, #32
    fc02:	f7f9 fdcb 	bl	979c <malloc>
    fc06:	4605      	mov	r5, r0
    fc08:	2800      	cmp	r0, #0
    fc0a:	f000 83f2 	beq.w	103f2 <__ssvfscanf_r+0x145e>
    fc0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fc10:	6030      	str	r0, [r6, #0]
    fc12:	8893      	ldrh	r3, [r2, #4]
    fc14:	88d6      	ldrh	r6, [r2, #6]
    fc16:	429e      	cmp	r6, r3
    fc18:	f080 827a 	bcs.w	10110 <__ssvfscanf_r+0x117c>
    fc1c:	6810      	ldr	r0, [r2, #0]
    fc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fc20:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    fc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fc26:	633c      	str	r4, [r7, #48]	; 0x30
    fc28:	3601      	adds	r6, #1
    fc2a:	80de      	strh	r6, [r3, #6]
    fc2c:	2420      	movs	r4, #32
    fc2e:	f8db 2000 	ldr.w	r2, [fp]
    fc32:	f107 0370 	add.w	r3, r7, #112	; 0x70
    fc36:	4619      	mov	r1, r3
    fc38:	7813      	ldrb	r3, [r2, #0]
    fc3a:	5ccb      	ldrb	r3, [r1, r3]
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	f43f aa9e 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    fc42:	ee08 9a10 	vmov	s16, r9
    fc46:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
    fc4a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    fc4e:	462e      	mov	r6, r5
    fc50:	46a2      	mov	sl, r4
    fc52:	4610      	mov	r0, r2
    fc54:	460c      	mov	r4, r1
    fc56:	f8db 1004 	ldr.w	r1, [fp, #4]
    fc5a:	1c43      	adds	r3, r0, #1
    fc5c:	3901      	subs	r1, #1
    fc5e:	e9cb 3100 	strd	r3, r1, [fp]
    fc62:	4629      	mov	r1, r5
    fc64:	7800      	ldrb	r0, [r0, #0]
    fc66:	f801 0b01 	strb.w	r0, [r1], #1
    fc6a:	f1b9 0f00 	cmp.w	r9, #0
    fc6e:	d002      	beq.n	fc76 <__ssvfscanf_r+0xce2>
    fc70:	1b8d      	subs	r5, r1, r6
    fc72:	4555      	cmp	r5, sl
    fc74:	d27a      	bcs.n	fd6c <__ssvfscanf_r+0xdd8>
    fc76:	460d      	mov	r5, r1
    fc78:	f1b8 0801 	subs.w	r8, r8, #1
    fc7c:	d00a      	beq.n	fc94 <__ssvfscanf_r+0xd00>
    fc7e:	f8db 1004 	ldr.w	r1, [fp, #4]
    fc82:	2900      	cmp	r1, #0
    fc84:	f340 816a 	ble.w	ff5c <__ssvfscanf_r+0xfc8>
    fc88:	f8db 0000 	ldr.w	r0, [fp]
    fc8c:	7801      	ldrb	r1, [r0, #0]
    fc8e:	5c61      	ldrb	r1, [r4, r1]
    fc90:	2900      	cmp	r1, #0
    fc92:	d1e0      	bne.n	fc56 <__ssvfscanf_r+0xcc2>
    fc94:	4654      	mov	r4, sl
    fc96:	ee18 9a10 	vmov	r9, s16
    fc9a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fc9e:	1bae      	subs	r6, r5, r6
    fca0:	f43f aa6d 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    fca4:	f04f 0300 	mov.w	r3, #0
    fca8:	702b      	strb	r3, [r5, #0]
    fcaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcac:	b11b      	cbz	r3, fcb6 <__ssvfscanf_r+0xd22>
    fcae:	1c71      	adds	r1, r6, #1
    fcb0:	428c      	cmp	r4, r1
    fcb2:	f200 832d 	bhi.w	10310 <__ssvfscanf_r+0x137c>
    fcb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fcb8:	3301      	adds	r3, #1
    fcba:	44b2      	add	sl, r6
    fcbc:	647b      	str	r3, [r7, #68]	; 0x44
    fcbe:	f7ff b990 	b.w	efe2 <__ssvfscanf_r+0x4e>
    fcc2:	2300      	movs	r3, #0
    fcc4:	613b      	str	r3, [r7, #16]
    fcc6:	f7ff baa9 	b.w	f21c <__ssvfscanf_r+0x288>
    fcca:	f014 0f8f 	tst.w	r4, #143	; 0x8f
    fcce:	f47f aa56 	bne.w	f17e <__ssvfscanf_r+0x1ea>
    fcd2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    fcd6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    fcda:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    fcde:	f7ff ba67 	b.w	f1b0 <__ssvfscanf_r+0x21c>
    fce2:	64f9      	str	r1, [r7, #76]	; 0x4c
    fce4:	2504      	movs	r5, #4
    fce6:	f7ff ba71 	b.w	f1cc <__ssvfscanf_r+0x238>
    fcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fcec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fcee:	185b      	adds	r3, r3, r1
    fcf0:	f47f ae44 	bne.w	f97c <__ssvfscanf_r+0x9e8>
    fcf4:	e5be      	b.n	f874 <__ssvfscanf_r+0x8e0>
    fcf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fcf8:	2b03      	cmp	r3, #3
    fcfa:	d002      	beq.n	fd02 <__ssvfscanf_r+0xd6e>
    fcfc:	2b05      	cmp	r3, #5
    fcfe:	f47f ab67 	bne.w	f3d0 <__ssvfscanf_r+0x43c>
    fd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fd04:	3301      	adds	r3, #1
    fd06:	b2db      	uxtb	r3, r3
    fd08:	64bb      	str	r3, [r7, #72]	; 0x48
    fd0a:	f7ff bb4c 	b.w	f3a6 <__ssvfscanf_r+0x412>
    fd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd10:	2b00      	cmp	r3, #0
    fd12:	f47f ae01 	bne.w	f918 <__ssvfscanf_r+0x984>
    fd16:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
    fd1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    fd1e:	f47f adfb 	bne.w	f918 <__ssvfscanf_r+0x984>
    fd22:	2301      	movs	r3, #1
    fd24:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
    fd28:	63fb      	str	r3, [r7, #60]	; 0x3c
    fd2a:	f7ff bb3c 	b.w	f3a6 <__ssvfscanf_r+0x412>
    fd2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fd30:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    fd32:	185b      	adds	r3, r3, r1
    fd34:	f47f ae02 	bne.w	f93c <__ssvfscanf_r+0x9a8>
    fd38:	e59c      	b.n	f874 <__ssvfscanf_r+0x8e0>
    fd3a:	1c83      	adds	r3, r0, #2
    fd3c:	f040 845b 	bne.w	105f6 <__ssvfscanf_r+0x1662>
    fd40:	f8db 3004 	ldr.w	r3, [fp, #4]
    fd44:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    fd46:	2b00      	cmp	r3, #0
    fd48:	f73f ad00 	bgt.w	f74c <__ssvfscanf_r+0x7b8>
    fd4c:	4659      	mov	r1, fp
    fd4e:	4648      	mov	r0, r9
    fd50:	f002 faca 	bl	122e8 <__ssrefill_r>
    fd54:	2800      	cmp	r0, #0
    fd56:	f43f ad63 	beq.w	f820 <__ssvfscanf_r+0x88c>
    fd5a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    fd5e:	627e      	str	r6, [r7, #36]	; 0x24
    fd60:	4644      	mov	r4, r8
    fd62:	2d00      	cmp	r5, #0
    fd64:	f43f ad63 	beq.w	f82e <__ssvfscanf_r+0x89a>
    fd68:	f7ff ba00 	b.w	f16c <__ssvfscanf_r+0x1d8>
    fd6c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    fd70:	4630      	mov	r0, r6
    fd72:	4651      	mov	r1, sl
    fd74:	f7f9 ffde 	bl	9d34 <realloc>
    fd78:	4606      	mov	r6, r0
    fd7a:	2800      	cmp	r0, #0
    fd7c:	f000 8339 	beq.w	103f2 <__ssvfscanf_r+0x145e>
    fd80:	4405      	add	r5, r0
    fd82:	f8c9 0000 	str.w	r0, [r9]
    fd86:	e777      	b.n	fc78 <__ssvfscanf_r+0xce4>
    fd88:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    fd8c:	4bbc      	ldr	r3, [pc, #752]	; (10080 <__ssvfscanf_r+0x10ec>)
    fd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    fd90:	2310      	movs	r3, #16
    fd92:	64f9      	str	r1, [r7, #76]	; 0x4c
    fd94:	63bb      	str	r3, [r7, #56]	; 0x38
    fd96:	2503      	movs	r5, #3
    fd98:	f7ff ba18 	b.w	f1cc <__ssvfscanf_r+0x238>
    fd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd9e:	3301      	adds	r3, #1
    fda0:	637b      	str	r3, [r7, #52]	; 0x34
    fda2:	693b      	ldr	r3, [r7, #16]
    fda4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    fda8:	2b00      	cmp	r3, #0
    fdaa:	f43f aafe 	beq.w	f3aa <__ssvfscanf_r+0x416>
    fdae:	693b      	ldr	r3, [r7, #16]
    fdb0:	3b01      	subs	r3, #1
    fdb2:	613b      	str	r3, [r7, #16]
    fdb4:	f7ff bafa 	b.w	f3ac <__ssvfscanf_r+0x418>
    fdb8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
    fdbc:	f7ff bbd1 	b.w	f562 <__ssvfscanf_r+0x5ce>
    fdc0:	0722      	lsls	r2, r4, #28
    fdc2:	f140 81c7 	bpl.w	10154 <__ssvfscanf_r+0x11c0>
    fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fdc8:	f853 2b04 	ldr.w	r2, [r3], #4
    fdcc:	633b      	str	r3, [r7, #48]	; 0x30
    fdce:	7010      	strb	r0, [r2, #0]
    fdd0:	f7ff bbf3 	b.w	f5ba <__ssvfscanf_r+0x626>
    fdd4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    fdd8:	465a      	mov	r2, fp
    fdda:	4648      	mov	r0, r9
    fddc:	3d01      	subs	r5, #1
    fdde:	f002 fa43 	bl	12268 <_sungetc_r>
    fde2:	f7ff bbd5 	b.w	f590 <__ssvfscanf_r+0x5fc>
    fde6:	69fb      	ldr	r3, [r7, #28]
    fde8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fdea:	4293      	cmp	r3, r2
    fdec:	f43f ab2d 	beq.w	f44a <__ssvfscanf_r+0x4b6>
    fdf0:	1a9a      	subs	r2, r3, r2
    fdf2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
    fdf6:	429d      	cmp	r5, r3
    fdf8:	bf28      	it	cs
    fdfa:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
    fdfe:	49a1      	ldr	r1, [pc, #644]	; (10084 <__ssvfscanf_r+0x10f0>)
    fe00:	4628      	mov	r0, r5
    fe02:	f7fb fa5d 	bl	b2c0 <sprintf>
    fe06:	f7ff bb20 	b.w	f44a <__ssvfscanf_r+0x4b6>
    fe0a:	06e2      	lsls	r2, r4, #27
    fe0c:	f100 8131 	bmi.w	10072 <__ssvfscanf_r+0x10de>
    fe10:	0723      	lsls	r3, r4, #28
    fe12:	f100 81ba 	bmi.w	1018a <__ssvfscanf_r+0x11f6>
    fe16:	0766      	lsls	r6, r4, #29
    fe18:	f140 82b4 	bpl.w	10384 <__ssvfscanf_r+0x13f0>
    fe1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fe1e:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe20:	f853 2b04 	ldr.w	r2, [r3], #4
    fe24:	633b      	str	r3, [r7, #48]	; 0x30
    fe26:	f8a2 a000 	strh.w	sl, [r2]
    fe2a:	f7ff b8da 	b.w	efe2 <__ssvfscanf_r+0x4e>
    fe2e:	0723      	lsls	r3, r4, #28
    fe30:	f47f a9a5 	bne.w	f17e <__ssvfscanf_r+0x1ea>
    fe34:	7842      	ldrb	r2, [r0, #1]
    fe36:	2a68      	cmp	r2, #104	; 0x68
    fe38:	f000 8186 	beq.w	10148 <__ssvfscanf_r+0x11b4>
    fe3c:	f044 0404 	orr.w	r4, r4, #4
    fe40:	4608      	mov	r0, r1
    fe42:	f7ff b92f 	b.w	f0a4 <__ssvfscanf_r+0x110>
    fe46:	4b8e      	ldr	r3, [pc, #568]	; (10080 <__ssvfscanf_r+0x10ec>)
    fe48:	62fb      	str	r3, [r7, #44]	; 0x2c
    fe4a:	230a      	movs	r3, #10
    fe4c:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe4e:	63bb      	str	r3, [r7, #56]	; 0x38
    fe50:	2503      	movs	r5, #3
    fe52:	f7ff b9bb 	b.w	f1cc <__ssvfscanf_r+0x238>
    fe56:	4b8c      	ldr	r3, [pc, #560]	; (10088 <__ssvfscanf_r+0x10f4>)
    fe58:	62fb      	str	r3, [r7, #44]	; 0x2c
    fe5a:	2300      	movs	r3, #0
    fe5c:	64f9      	str	r1, [r7, #76]	; 0x4c
    fe5e:	63bb      	str	r3, [r7, #56]	; 0x38
    fe60:	2503      	movs	r5, #3
    fe62:	f7ff b9b3 	b.w	f1cc <__ssvfscanf_r+0x238>
    fe66:	f444 7408 	orr.w	r4, r4, #544	; 0x220
    fe6a:	e78f      	b.n	fd8c <__ssvfscanf_r+0xdf8>
    fe6c:	f107 0070 	add.w	r0, r7, #112	; 0x70
    fe70:	f000 fdde 	bl	10a30 <__sccl>
    fe74:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    fe78:	64f8      	str	r0, [r7, #76]	; 0x4c
    fe7a:	2501      	movs	r5, #1
    fe7c:	f7ff b9a6 	b.w	f1cc <__ssvfscanf_r+0x238>
    fe80:	0722      	lsls	r2, r4, #28
    fe82:	f47f a97c 	bne.w	f17e <__ssvfscanf_r+0x1ea>
    fe86:	7842      	ldrb	r2, [r0, #1]
    fe88:	2a6c      	cmp	r2, #108	; 0x6c
    fe8a:	f000 8157 	beq.w	1013c <__ssvfscanf_r+0x11a8>
    fe8e:	f044 0401 	orr.w	r4, r4, #1
    fe92:	4608      	mov	r0, r1
    fe94:	f7ff b906 	b.w	f0a4 <__ssvfscanf_r+0x110>
    fe98:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
    fe9c:	f47f a96f 	bne.w	f17e <__ssvfscanf_r+0x1ea>
    fea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fea2:	2a00      	cmp	r2, #0
    fea4:	f000 81e7 	beq.w	10276 <__ssvfscanf_r+0x12e2>
    fea8:	7842      	ldrb	r2, [r0, #1]
    feaa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    feae:	4608      	mov	r0, r1
    feb0:	f7ff b8f8 	b.w	f0a4 <__ssvfscanf_r+0x110>
    feb4:	ea58 0804 	orrs.w	r8, r8, r4
    feb8:	f47f a961 	bne.w	f17e <__ssvfscanf_r+0x1ea>
    febc:	7842      	ldrb	r2, [r0, #1]
    febe:	2410      	movs	r4, #16
    fec0:	4608      	mov	r0, r1
    fec2:	f7ff b8ef 	b.w	f0a4 <__ssvfscanf_r+0x110>
    fec6:	64f9      	str	r1, [r7, #76]	; 0x4c
    fec8:	f7ff b8a7 	b.w	f01a <__ssvfscanf_r+0x86>
    fecc:	2300      	movs	r3, #0
    fece:	623b      	str	r3, [r7, #32]
    fed0:	62bb      	str	r3, [r7, #40]	; 0x28
    fed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    fed4:	f107 0354 	add.w	r3, r7, #84	; 0x54
    fed8:	64bb      	str	r3, [r7, #72]	; 0x48
    feda:	f7ff bba9 	b.w	f630 <__ssvfscanf_r+0x69c>
    fede:	2300      	movs	r3, #0
    fee0:	e9c7 3306 	strd	r3, r3, [r7, #24]
    fee4:	623b      	str	r3, [r7, #32]
    fee6:	f107 0454 	add.w	r4, r7, #84	; 0x54
    feea:	e429      	b.n	f740 <__ssvfscanf_r+0x7ac>
    feec:	f8db 3000 	ldr.w	r3, [fp]
    fef0:	f107 0270 	add.w	r2, r7, #112	; 0x70
    fef4:	4611      	mov	r1, r2
    fef6:	781a      	ldrb	r2, [r3, #0]
    fef8:	5c8a      	ldrb	r2, [r1, r2]
    fefa:	2a00      	cmp	r2, #0
    fefc:	f43f a93f 	beq.w	f17e <__ssvfscanf_r+0x1ea>
    ff00:	3301      	adds	r3, #1
    ff02:	f8cb 3000 	str.w	r3, [fp]
    ff06:	f8db 3004 	ldr.w	r3, [fp, #4]
    ff0a:	f1b8 0f01 	cmp.w	r8, #1
    ff0e:	f103 33ff 	add.w	r3, r3, #4294967295
    ff12:	f8cb 3004 	str.w	r3, [fp, #4]
    ff16:	bf18      	it	ne
    ff18:	460c      	movne	r4, r1
    ff1a:	d114      	bne.n	ff46 <__ssvfscanf_r+0xfb2>
    ff1c:	f7ff bb53 	b.w	f5c6 <__ssvfscanf_r+0x632>
    ff20:	f8db 3000 	ldr.w	r3, [fp]
    ff24:	781a      	ldrb	r2, [r3, #0]
    ff26:	5ca2      	ldrb	r2, [r4, r2]
    ff28:	3301      	adds	r3, #1
    ff2a:	2a00      	cmp	r2, #0
    ff2c:	f43f ab4b 	beq.w	f5c6 <__ssvfscanf_r+0x632>
    ff30:	f8cb 3000 	str.w	r3, [fp]
    ff34:	f8db 3004 	ldr.w	r3, [fp, #4]
    ff38:	3501      	adds	r5, #1
    ff3a:	3b01      	subs	r3, #1
    ff3c:	4545      	cmp	r5, r8
    ff3e:	f8cb 3004 	str.w	r3, [fp, #4]
    ff42:	f43f ab40 	beq.w	f5c6 <__ssvfscanf_r+0x632>
    ff46:	2b00      	cmp	r3, #0
    ff48:	dcea      	bgt.n	ff20 <__ssvfscanf_r+0xf8c>
    ff4a:	4659      	mov	r1, fp
    ff4c:	4648      	mov	r0, r9
    ff4e:	f002 f9cb 	bl	122e8 <__ssrefill_r>
    ff52:	2800      	cmp	r0, #0
    ff54:	d0e4      	beq.n	ff20 <__ssvfscanf_r+0xf8c>
    ff56:	44aa      	add	sl, r5
    ff58:	f7ff b843 	b.w	efe2 <__ssvfscanf_r+0x4e>
    ff5c:	ee18 0a10 	vmov	r0, s16
    ff60:	4659      	mov	r1, fp
    ff62:	f002 f9c1 	bl	122e8 <__ssrefill_r>
    ff66:	2800      	cmp	r0, #0
    ff68:	f43f ae8e 	beq.w	fc88 <__ssvfscanf_r+0xcf4>
    ff6c:	42b5      	cmp	r5, r6
    ff6e:	4654      	mov	r4, sl
    ff70:	ee18 9a10 	vmov	r9, s16
    ff74:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    ff78:	f47f ae91 	bne.w	fc9e <__ssvfscanf_r+0xd0a>
    ff7c:	f7ff b8f6 	b.w	f16c <__ssvfscanf_r+0x1d8>
    ff80:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
    ff84:	e428      	b.n	f7d8 <__ssvfscanf_r+0x844>
    ff86:	6823      	ldr	r3, [r4, #0]
    ff88:	2b04      	cmp	r3, #4
    ff8a:	f47f ac32 	bne.w	f7f2 <__ssvfscanf_r+0x85e>
    ff8e:	e432      	b.n	f7f6 <__ssvfscanf_r+0x862>
    ff90:	1c83      	adds	r3, r0, #2
    ff92:	f040 8339 	bne.w	10608 <__ssvfscanf_r+0x1674>
    ff96:	f8db 3004 	ldr.w	r3, [fp, #4]
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	f340 81d7 	ble.w	1034e <__ssvfscanf_r+0x13ba>
    ffa0:	f8db 3000 	ldr.w	r3, [fp]
    ffa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ffa6:	781b      	ldrb	r3, [r3, #0]
    ffa8:	5cd3      	ldrb	r3, [r2, r3]
    ffaa:	0718      	lsls	r0, r3, #28
    ffac:	d403      	bmi.n	ffb6 <__ssvfscanf_r+0x1022>
    ffae:	f1b8 0f00 	cmp.w	r8, #0
    ffb2:	f47f ab49 	bne.w	f648 <__ssvfscanf_r+0x6b4>
    ffb6:	627c      	str	r4, [r7, #36]	; 0x24
    ffb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffba:	2b00      	cmp	r3, #0
    ffbc:	f47f a811 	bne.w	efe2 <__ssvfscanf_r+0x4e>
    ffc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ffc2:	6013      	str	r3, [r2, #0]
    ffc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ffc6:	2b00      	cmp	r3, #0
    ffc8:	f43f adfc 	beq.w	fbc4 <__ssvfscanf_r+0xc30>
    ffcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ffce:	1ad1      	subs	r1, r2, r3
    ffd0:	108b      	asrs	r3, r1, #2
    ffd2:	6a3a      	ldr	r2, [r7, #32]
    ffd4:	3301      	adds	r3, #1
    ffd6:	429a      	cmp	r2, r3
    ffd8:	f67f adf4 	bls.w	fbc4 <__ssvfscanf_r+0xc30>
    ffdc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    ffde:	3104      	adds	r1, #4
    ffe0:	6820      	ldr	r0, [r4, #0]
    ffe2:	f7f9 fea7 	bl	9d34 <realloc>
    ffe6:	2800      	cmp	r0, #0
    ffe8:	f47f ac3a 	bne.w	f860 <__ssvfscanf_r+0x8cc>
    ffec:	e5ea      	b.n	fbc4 <__ssvfscanf_r+0xc30>
    ffee:	f853 2b04 	ldr.w	r2, [r3], #4
    fff2:	ed82 0b00 	vstr	d0, [r2]
    fff6:	633b      	str	r3, [r7, #48]	; 0x30
    fff8:	e5e4      	b.n	fbc4 <__ssvfscanf_r+0xc30>
    fffa:	68fd      	ldr	r5, [r7, #12]
    fffc:	6a39      	ldr	r1, [r7, #32]
    fffe:	687e      	ldr	r6, [r7, #4]
   10000:	4628      	mov	r0, r5
   10002:	4642      	mov	r2, r8
   10004:	46a3      	mov	fp, r4
   10006:	68bc      	ldr	r4, [r7, #8]
   10008:	f000 fd56 	bl	10ab8 <stpncpy>
   1000c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1000e:	61fb      	str	r3, [r7, #28]
   10010:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   10014:	3e01      	subs	r6, #1
   10016:	4605      	mov	r5, r0
   10018:	f7ff b9c8 	b.w	f3ac <__ssvfscanf_r+0x418>
   1001c:	69f8      	ldr	r0, [r7, #28]
   1001e:	00d9      	lsls	r1, r3, #3
   10020:	461d      	mov	r5, r3
   10022:	f7f9 fe87 	bl	9d34 <realloc>
   10026:	61f8      	str	r0, [r7, #28]
   10028:	2800      	cmp	r0, #0
   1002a:	f000 8264 	beq.w	104f6 <__ssvfscanf_r+0x1562>
   1002e:	6a3a      	ldr	r2, [r7, #32]
   10030:	006b      	lsls	r3, r5, #1
   10032:	eb00 0804 	add.w	r8, r0, r4
   10036:	6010      	str	r0, [r2, #0]
   10038:	61bb      	str	r3, [r7, #24]
   1003a:	f7ff bbea 	b.w	f812 <__ssvfscanf_r+0x87e>
   1003e:	2e02      	cmp	r6, #2
   10040:	f240 82c4 	bls.w	105cc <__ssvfscanf_r+0x1638>
   10044:	2e03      	cmp	r6, #3
   10046:	f43f a9d3 	beq.w	f3f0 <__ssvfscanf_r+0x45c>
   1004a:	3e04      	subs	r6, #4
   1004c:	fa5f f886 	uxtb.w	r8, r6
   10050:	ea6f 0308 	mvn.w	r3, r8
   10054:	18ee      	adds	r6, r5, r3
   10056:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1005a:	465a      	mov	r2, fp
   1005c:	4648      	mov	r0, r9
   1005e:	f002 f903 	bl	12268 <_sungetc_r>
   10062:	42ae      	cmp	r6, r5
   10064:	d1f7      	bne.n	10056 <__ssvfscanf_r+0x10c2>
   10066:	f10a 3aff 	add.w	sl, sl, #4294967295
   1006a:	ebaa 0a08 	sub.w	sl, sl, r8
   1006e:	f7ff b9bf 	b.w	f3f0 <__ssvfscanf_r+0x45c>
   10072:	64f9      	str	r1, [r7, #76]	; 0x4c
   10074:	f7fe bfb5 	b.w	efe2 <__ssvfscanf_r+0x4e>
   10078:	2303      	movs	r3, #3
   1007a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1007c:	f7ff b993 	b.w	f3a6 <__ssvfscanf_r+0x412>
   10080:	00011bad 	.word	0x00011bad
   10084:	20000ba4 	.word	0x20000ba4
   10088:	0000b0e9 	.word	0x0000b0e9
   1008c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10090:	4293      	cmp	r3, r2
   10092:	f200 8297 	bhi.w	105c4 <__ssvfscanf_r+0x1630>
   10096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10098:	3308      	adds	r3, #8
   1009a:	b29b      	uxth	r3, r3
   1009c:	6810      	ldr	r0, [r2, #0]
   1009e:	63f8      	str	r0, [r7, #60]	; 0x3c
   100a0:	0099      	lsls	r1, r3, #2
   100a2:	637b      	str	r3, [r7, #52]	; 0x34
   100a4:	f7f9 fe46 	bl	9d34 <realloc>
   100a8:	2800      	cmp	r0, #0
   100aa:	f000 827b 	beq.w	105a4 <__ssvfscanf_r+0x1610>
   100ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   100b2:	8093      	strh	r3, [r2, #4]
   100b4:	6010      	str	r0, [r2, #0]
   100b6:	e542      	b.n	fb3e <__ssvfscanf_r+0xbaa>
   100b8:	2101      	movs	r1, #1
   100ba:	e57a      	b.n	fbb2 <__ssvfscanf_r+0xc1e>
   100bc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   100c0:	4293      	cmp	r3, r2
   100c2:	f200 8293 	bhi.w	105ec <__ssvfscanf_r+0x1658>
   100c6:	3308      	adds	r3, #8
   100c8:	b29e      	uxth	r6, r3
   100ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100cc:	00b1      	lsls	r1, r6, #2
   100ce:	6818      	ldr	r0, [r3, #0]
   100d0:	f7f9 fe30 	bl	9d34 <realloc>
   100d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100d6:	2800      	cmp	r0, #0
   100d8:	f000 823e 	beq.w	10558 <__ssvfscanf_r+0x15c4>
   100dc:	809e      	strh	r6, [r3, #4]
   100de:	6018      	str	r0, [r3, #0]
   100e0:	f7ff ba9b 	b.w	f61a <__ssvfscanf_r+0x686>
   100e4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   100e8:	4293      	cmp	r3, r2
   100ea:	f200 827f 	bhi.w	105ec <__ssvfscanf_r+0x1658>
   100ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100f0:	3308      	adds	r3, #8
   100f2:	b29b      	uxth	r3, r3
   100f4:	0099      	lsls	r1, r3, #2
   100f6:	6810      	ldr	r0, [r2, #0]
   100f8:	64bb      	str	r3, [r7, #72]	; 0x48
   100fa:	f7f9 fe1b 	bl	9d34 <realloc>
   100fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10100:	2800      	cmp	r0, #0
   10102:	f000 8228 	beq.w	10556 <__ssvfscanf_r+0x15c2>
   10106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10108:	8093      	strh	r3, [r2, #4]
   1010a:	6010      	str	r0, [r2, #0]
   1010c:	f7ff bb0e 	b.w	f72c <__ssvfscanf_r+0x798>
   10110:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   10114:	4293      	cmp	r3, r2
   10116:	f200 8255 	bhi.w	105c4 <__ssvfscanf_r+0x1630>
   1011a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1011c:	3308      	adds	r3, #8
   1011e:	b29b      	uxth	r3, r3
   10120:	6810      	ldr	r0, [r2, #0]
   10122:	63f8      	str	r0, [r7, #60]	; 0x3c
   10124:	0099      	lsls	r1, r3, #2
   10126:	637b      	str	r3, [r7, #52]	; 0x34
   10128:	f7f9 fe04 	bl	9d34 <realloc>
   1012c:	2800      	cmp	r0, #0
   1012e:	f000 8239 	beq.w	105a4 <__ssvfscanf_r+0x1610>
   10132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10136:	8093      	strh	r3, [r2, #4]
   10138:	6010      	str	r0, [r2, #0]
   1013a:	e570      	b.n	fc1e <__ssvfscanf_r+0xc8a>
   1013c:	7882      	ldrb	r2, [r0, #2]
   1013e:	f044 0402 	orr.w	r4, r4, #2
   10142:	3002      	adds	r0, #2
   10144:	f7fe bfae 	b.w	f0a4 <__ssvfscanf_r+0x110>
   10148:	7882      	ldrb	r2, [r0, #2]
   1014a:	f044 0408 	orr.w	r4, r4, #8
   1014e:	3002      	adds	r0, #2
   10150:	f7fe bfa8 	b.w	f0a4 <__ssvfscanf_r+0x110>
   10154:	0763      	lsls	r3, r4, #29
   10156:	d458      	bmi.n	1020a <__ssvfscanf_r+0x1276>
   10158:	f014 0201 	ands.w	r2, r4, #1
   1015c:	f47f aa28 	bne.w	f5b0 <__ssvfscanf_r+0x61c>
   10160:	07a6      	lsls	r6, r4, #30
   10162:	f57f aa25 	bpl.w	f5b0 <__ssvfscanf_r+0x61c>
   10166:	4bb3      	ldr	r3, [pc, #716]	; (10434 <__ssvfscanf_r+0x14a0>)
   10168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1016a:	4299      	cmp	r1, r3
   1016c:	4648      	mov	r0, r9
   1016e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10172:	f000 823d 	beq.w	105f0 <__ssvfscanf_r+0x165c>
   10176:	f001 fdd1 	bl	11d1c <_strtoll_r>
   1017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1017c:	f853 2b04 	ldr.w	r2, [r3], #4
   10180:	633b      	str	r3, [r7, #48]	; 0x30
   10182:	e9c2 0100 	strd	r0, r1, [r2]
   10186:	f7ff ba18 	b.w	f5ba <__ssvfscanf_r+0x626>
   1018a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1018c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1018e:	f853 2b04 	ldr.w	r2, [r3], #4
   10192:	633b      	str	r3, [r7, #48]	; 0x30
   10194:	f882 a000 	strb.w	sl, [r2]
   10198:	f7fe bf23 	b.w	efe2 <__ssvfscanf_r+0x4e>
   1019c:	f8db 3000 	ldr.w	r3, [fp]
   101a0:	4ea5      	ldr	r6, [pc, #660]	; (10438 <__ssvfscanf_r+0x14a4>)
   101a2:	781a      	ldrb	r2, [r3, #0]
   101a4:	5cb2      	ldrb	r2, [r6, r2]
   101a6:	0712      	lsls	r2, r2, #28
   101a8:	f53e af1b 	bmi.w	efe2 <__ssvfscanf_r+0x4e>
   101ac:	3301      	adds	r3, #1
   101ae:	f8cb 3000 	str.w	r3, [fp]
   101b2:	f8db 3004 	ldr.w	r3, [fp, #4]
   101b6:	f1b8 0f01 	cmp.w	r8, #1
   101ba:	f103 33ff 	add.w	r3, r3, #4294967295
   101be:	f8cb 3004 	str.w	r3, [fp, #4]
   101c2:	bf08      	it	eq
   101c4:	f10a 0a01 	addeq.w	sl, sl, #1
   101c8:	f43e af0b 	beq.w	efe2 <__ssvfscanf_r+0x4e>
   101cc:	2401      	movs	r4, #1
   101ce:	e011      	b.n	101f4 <__ssvfscanf_r+0x1260>
   101d0:	f8db 3000 	ldr.w	r3, [fp]
   101d4:	781a      	ldrb	r2, [r3, #0]
   101d6:	5cb2      	ldrb	r2, [r6, r2]
   101d8:	0715      	lsls	r5, r2, #28
   101da:	f103 0301 	add.w	r3, r3, #1
   101de:	d411      	bmi.n	10204 <__ssvfscanf_r+0x1270>
   101e0:	f8cb 3000 	str.w	r3, [fp]
   101e4:	f8db 3004 	ldr.w	r3, [fp, #4]
   101e8:	3401      	adds	r4, #1
   101ea:	3b01      	subs	r3, #1
   101ec:	4544      	cmp	r4, r8
   101ee:	f8cb 3004 	str.w	r3, [fp, #4]
   101f2:	d007      	beq.n	10204 <__ssvfscanf_r+0x1270>
   101f4:	2b00      	cmp	r3, #0
   101f6:	dceb      	bgt.n	101d0 <__ssvfscanf_r+0x123c>
   101f8:	4659      	mov	r1, fp
   101fa:	4648      	mov	r0, r9
   101fc:	f002 f874 	bl	122e8 <__ssrefill_r>
   10200:	2800      	cmp	r0, #0
   10202:	d0e5      	beq.n	101d0 <__ssvfscanf_r+0x123c>
   10204:	44a2      	add	sl, r4
   10206:	f7fe beec 	b.w	efe2 <__ssvfscanf_r+0x4e>
   1020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1020c:	f853 2b04 	ldr.w	r2, [r3], #4
   10210:	633b      	str	r3, [r7, #48]	; 0x30
   10212:	8010      	strh	r0, [r2, #0]
   10214:	f7ff b9d1 	b.w	f5ba <__ssvfscanf_r+0x626>
   10218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1021a:	2b00      	cmp	r3, #0
   1021c:	f000 816e 	beq.w	104fc <__ssvfscanf_r+0x1568>
   10220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10222:	f8d3 8000 	ldr.w	r8, [r3]
   10226:	88de      	ldrh	r6, [r3, #6]
   10228:	b176      	cbz	r6, 10248 <__ssvfscanf_r+0x12b4>
   1022a:	2400      	movs	r4, #0
   1022c:	f1a8 0504 	sub.w	r5, r8, #4
   10230:	46a1      	mov	r9, r4
   10232:	f855 3f04 	ldr.w	r3, [r5, #4]!
   10236:	6818      	ldr	r0, [r3, #0]
   10238:	f7f9 fab8 	bl	97ac <free>
   1023c:	3401      	adds	r4, #1
   1023e:	682b      	ldr	r3, [r5, #0]
   10240:	42a6      	cmp	r6, r4
   10242:	f8c3 9000 	str.w	r9, [r3]
   10246:	d1f4      	bne.n	10232 <__ssvfscanf_r+0x129e>
   10248:	f04f 33ff 	mov.w	r3, #4294967295
   1024c:	647b      	str	r3, [r7, #68]	; 0x44
   1024e:	f1b8 0f00 	cmp.w	r8, #0
   10252:	f47e af9c 	bne.w	f18e <__ssvfscanf_r+0x1fa>
   10256:	f7fe bf9d 	b.w	f194 <__ssvfscanf_r+0x200>
   1025a:	4878      	ldr	r0, [pc, #480]	; (1043c <__ssvfscanf_r+0x14a8>)
   1025c:	633b      	str	r3, [r7, #48]	; 0x30
   1025e:	f7fb fde7 	bl	be30 <nanf>
   10262:	ed84 0a00 	vstr	s0, [r4]
   10266:	e4ad      	b.n	fbc4 <__ssvfscanf_r+0xc30>
   10268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1026a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1026c:	f852 5b04 	ldr.w	r5, [r2], #4
   10270:	633a      	str	r2, [r7, #48]	; 0x30
   10272:	64bc      	str	r4, [r7, #72]	; 0x48
   10274:	e46c      	b.n	fb50 <__ssvfscanf_r+0xbbc>
   10276:	b082      	sub	sp, #8
   10278:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1027c:	ab02      	add	r3, sp, #8
   1027e:	643b      	str	r3, [r7, #64]	; 0x40
   10280:	e612      	b.n	fea8 <__ssvfscanf_r+0xf14>
   10282:	637b      	str	r3, [r7, #52]	; 0x34
   10284:	0053      	lsls	r3, r2, #1
   10286:	4620      	mov	r0, r4
   10288:	4619      	mov	r1, r3
   1028a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1028c:	f7f9 fd52 	bl	9d34 <realloc>
   10290:	4604      	mov	r4, r0
   10292:	2800      	cmp	r0, #0
   10294:	f000 80ad 	beq.w	103f2 <__ssvfscanf_r+0x145e>
   10298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1029a:	1985      	adds	r5, r0, r6
   1029c:	6018      	str	r0, [r3, #0]
   1029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   102a0:	e475      	b.n	fb8e <__ssvfscanf_r+0xbfa>
   102a2:	697d      	ldr	r5, [r7, #20]
   102a4:	4629      	mov	r1, r5
   102a6:	230a      	movs	r3, #10
   102a8:	3101      	adds	r1, #1
   102aa:	4648      	mov	r0, r9
   102ac:	f7fa ff1c 	bl	b0e8 <_strtol_r>
   102b0:	69bb      	ldr	r3, [r7, #24]
   102b2:	1ac2      	subs	r2, r0, r3
   102b4:	e59d      	b.n	fdf2 <__ssvfscanf_r+0xe5e>
   102b6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   102ba:	f853 1b04 	ldr.w	r1, [r3], #4
   102be:	623a      	str	r2, [r7, #32]
   102c0:	64b9      	str	r1, [r7, #72]	; 0x48
   102c2:	633b      	str	r3, [r7, #48]	; 0x30
   102c4:	62ba      	str	r2, [r7, #40]	; 0x28
   102c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   102c8:	f7ff b9b2 	b.w	f630 <__ssvfscanf_r+0x69c>
   102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   102ce:	64bc      	str	r4, [r7, #72]	; 0x48
   102d0:	f853 5b04 	ldr.w	r5, [r3], #4
   102d4:	633b      	str	r3, [r7, #48]	; 0x30
   102d6:	e4aa      	b.n	fc2e <__ssvfscanf_r+0xc9a>
   102d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   102da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   102dc:	f853 4b04 	ldr.w	r4, [r3], #4
   102e0:	61ba      	str	r2, [r7, #24]
   102e2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   102e6:	633b      	str	r3, [r7, #48]	; 0x30
   102e8:	f7ff ba2a 	b.w	f740 <__ssvfscanf_r+0x7ac>
   102ec:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   102ee:	6820      	ldr	r0, [r4, #0]
   102f0:	f7f9 fd20 	bl	9d34 <realloc>
   102f4:	2800      	cmp	r0, #0
   102f6:	f47f aab3 	bne.w	f860 <__ssvfscanf_r+0x8cc>
   102fa:	e463      	b.n	fbc4 <__ssvfscanf_r+0xc30>
   102fc:	4659      	mov	r1, fp
   102fe:	4648      	mov	r0, r9
   10300:	637b      	str	r3, [r7, #52]	; 0x34
   10302:	f001 fff1 	bl	122e8 <__ssrefill_r>
   10306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10308:	2800      	cmp	r0, #0
   1030a:	f43f ac49 	beq.w	fba0 <__ssvfscanf_r+0xc0c>
   1030e:	e44d      	b.n	fbac <__ssvfscanf_r+0xc18>
   10310:	6818      	ldr	r0, [r3, #0]
   10312:	461c      	mov	r4, r3
   10314:	f7f9 fd0e 	bl	9d34 <realloc>
   10318:	2800      	cmp	r0, #0
   1031a:	f43f accc 	beq.w	fcb6 <__ssvfscanf_r+0xd22>
   1031e:	6020      	str	r0, [r4, #0]
   10320:	e4c9      	b.n	fcb6 <__ssvfscanf_r+0xd22>
   10322:	2500      	movs	r5, #0
   10324:	e637      	b.n	ff96 <__ssvfscanf_r+0x1002>
   10326:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10328:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1032c:	627e      	str	r6, [r7, #36]	; 0x24
   1032e:	4644      	mov	r4, r8
   10330:	2d00      	cmp	r5, #0
   10332:	f43f aa7c 	beq.w	f82e <__ssvfscanf_r+0x89a>
   10336:	3d01      	subs	r5, #1
   10338:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1033c:	465a      	mov	r2, fp
   1033e:	5d59      	ldrb	r1, [r3, r5]
   10340:	4648      	mov	r0, r9
   10342:	f001 ff91 	bl	12268 <_sungetc_r>
   10346:	2d00      	cmp	r5, #0
   10348:	d1f5      	bne.n	10336 <__ssvfscanf_r+0x13a2>
   1034a:	f7ff ba70 	b.w	f82e <__ssvfscanf_r+0x89a>
   1034e:	4659      	mov	r1, fp
   10350:	4648      	mov	r0, r9
   10352:	f001 ffc9 	bl	122e8 <__ssrefill_r>
   10356:	2800      	cmp	r0, #0
   10358:	f43f ae22 	beq.w	ffa0 <__ssvfscanf_r+0x100c>
   1035c:	627c      	str	r4, [r7, #36]	; 0x24
   1035e:	2d00      	cmp	r5, #0
   10360:	f47e af04 	bne.w	f16c <__ssvfscanf_r+0x1d8>
   10364:	e628      	b.n	ffb8 <__ssvfscanf_r+0x1024>
   10366:	627c      	str	r4, [r7, #36]	; 0x24
   10368:	2d00      	cmp	r5, #0
   1036a:	f43f ae25 	beq.w	ffb8 <__ssvfscanf_r+0x1024>
   1036e:	3d01      	subs	r5, #1
   10370:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   10374:	465a      	mov	r2, fp
   10376:	5d59      	ldrb	r1, [r3, r5]
   10378:	4648      	mov	r0, r9
   1037a:	f001 ff75 	bl	12268 <_sungetc_r>
   1037e:	2d00      	cmp	r5, #0
   10380:	d1f5      	bne.n	1036e <__ssvfscanf_r+0x13da>
   10382:	e619      	b.n	ffb8 <__ssvfscanf_r+0x1024>
   10384:	07e5      	lsls	r5, r4, #31
   10386:	d43c      	bmi.n	10402 <__ssvfscanf_r+0x146e>
   10388:	07a4      	lsls	r4, r4, #30
   1038a:	d53a      	bpl.n	10402 <__ssvfscanf_r+0x146e>
   1038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1038e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10390:	f853 2b04 	ldr.w	r2, [r3], #4
   10394:	633b      	str	r3, [r7, #48]	; 0x30
   10396:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1039a:	f8c2 a000 	str.w	sl, [r2]
   1039e:	6053      	str	r3, [r2, #4]
   103a0:	f7fe be1f 	b.w	efe2 <__ssvfscanf_r+0x4e>
   103a4:	ee18 9a10 	vmov	r9, s16
   103a8:	461e      	mov	r6, r3
   103aa:	f7ff b814 	b.w	f3d6 <__ssvfscanf_r+0x442>
   103ae:	2301      	movs	r3, #1
   103b0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   103b4:	64bb      	str	r3, [r7, #72]	; 0x48
   103b6:	f7fe bff6 	b.w	f3a6 <__ssvfscanf_r+0x412>
   103ba:	f1b8 0f01 	cmp.w	r8, #1
   103be:	bf38      	it	cc
   103c0:	f04f 0801 	movcc.w	r8, #1
   103c4:	f014 0301 	ands.w	r3, r4, #1
   103c8:	d13a      	bne.n	10440 <__ssvfscanf_r+0x14ac>
   103ca:	06e5      	lsls	r5, r4, #27
   103cc:	f100 8136 	bmi.w	1063c <__ssvfscanf_r+0x16a8>
   103d0:	0624      	lsls	r4, r4, #24
   103d2:	f140 814c 	bpl.w	1066e <__ssvfscanf_r+0x16da>
   103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   103d8:	f853 5b04 	ldr.w	r5, [r3], #4
   103dc:	64bb      	str	r3, [r7, #72]	; 0x48
   103de:	2d00      	cmp	r5, #0
   103e0:	f43e aecd 	beq.w	f17e <__ssvfscanf_r+0x1ea>
   103e4:	4640      	mov	r0, r8
   103e6:	f7f9 f9d9 	bl	979c <malloc>
   103ea:	4603      	mov	r3, r0
   103ec:	2800      	cmp	r0, #0
   103ee:	f040 80dc 	bne.w	105aa <__ssvfscanf_r+0x1616>
   103f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   103f4:	2b00      	cmp	r3, #0
   103f6:	f000 8081 	beq.w	104fc <__ssvfscanf_r+0x1568>
   103fa:	f8d3 8000 	ldr.w	r8, [r3]
   103fe:	88de      	ldrh	r6, [r3, #6]
   10400:	e712      	b.n	10228 <__ssvfscanf_r+0x1294>
   10402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10404:	64f9      	str	r1, [r7, #76]	; 0x4c
   10406:	f853 2b04 	ldr.w	r2, [r3], #4
   1040a:	f8c2 a000 	str.w	sl, [r2]
   1040e:	633b      	str	r3, [r7, #48]	; 0x30
   10410:	f7fe bde7 	b.w	efe2 <__ssvfscanf_r+0x4e>
   10414:	462b      	mov	r3, r5
   10416:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10418:	42ab      	cmp	r3, r5
   1041a:	f67e aeb0 	bls.w	f17e <__ssvfscanf_r+0x1ea>
   1041e:	461c      	mov	r4, r3
   10420:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10424:	465a      	mov	r2, fp
   10426:	4648      	mov	r0, r9
   10428:	f001 ff1e 	bl	12268 <_sungetc_r>
   1042c:	42ac      	cmp	r4, r5
   1042e:	d1f7      	bne.n	10420 <__ssvfscanf_r+0x148c>
   10430:	f7fe bea5 	b.w	f17e <__ssvfscanf_r+0x1ea>
   10434:	00011bad 	.word	0x00011bad
   10438:	20000bad 	.word	0x20000bad
   1043c:	20008128 	.word	0x20008128
   10440:	f014 0310 	ands.w	r3, r4, #16
   10444:	637b      	str	r3, [r7, #52]	; 0x34
   10446:	d05e      	beq.n	10506 <__ssvfscanf_r+0x1572>
   10448:	2500      	movs	r5, #0
   1044a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1044c:	64bd      	str	r5, [r7, #72]	; 0x48
   1044e:	462e      	mov	r6, r5
   10450:	2400      	movs	r4, #0
   10452:	464b      	mov	r3, r9
   10454:	46c1      	mov	r9, r8
   10456:	46a8      	mov	r8, r5
   10458:	4625      	mov	r5, r4
   1045a:	461c      	mov	r4, r3
   1045c:	f7fb f9a0 	bl	b7a0 <__locale_mb_cur_max>
   10460:	42a8      	cmp	r0, r5
   10462:	f43e ae83 	beq.w	f16c <__ssvfscanf_r+0x1d8>
   10466:	e9db 3200 	ldrd	r3, r2, [fp]
   1046a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1046e:	3a01      	subs	r2, #1
   10470:	e9cb 3200 	strd	r3, r2, [fp]
   10474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10476:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1047a:	2a03      	cmp	r2, #3
   1047c:	5541      	strb	r1, [r0, r5]
   1047e:	f105 0301 	add.w	r3, r5, #1
   10482:	f107 0568 	add.w	r5, r7, #104	; 0x68
   10486:	d102      	bne.n	1048e <__ssvfscanf_r+0x14fa>
   10488:	682a      	ldr	r2, [r5, #0]
   1048a:	2a04      	cmp	r2, #4
   1048c:	d006      	beq.n	1049c <__ssvfscanf_r+0x1508>
   1048e:	2208      	movs	r2, #8
   10490:	2100      	movs	r1, #0
   10492:	4628      	mov	r0, r5
   10494:	62bb      	str	r3, [r7, #40]	; 0x28
   10496:	f7fb f8b9 	bl	b60c <memset>
   1049a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1049c:	9500      	str	r5, [sp, #0]
   1049e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   104a2:	4631      	mov	r1, r6
   104a4:	4620      	mov	r0, r4
   104a6:	62bb      	str	r3, [r7, #40]	; 0x28
   104a8:	f001 fd0a 	bl	11ec0 <_mbrtowc_r>
   104ac:	1c43      	adds	r3, r0, #1
   104ae:	6278      	str	r0, [r7, #36]	; 0x24
   104b0:	f43e ae5c 	beq.w	f16c <__ssvfscanf_r+0x1d8>
   104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104b6:	2800      	cmp	r0, #0
   104b8:	f040 8147 	bne.w	1074a <__ssvfscanf_r+0x17b6>
   104bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   104be:	b902      	cbnz	r2, 104c2 <__ssvfscanf_r+0x152e>
   104c0:	6032      	str	r2, [r6, #0]
   104c2:	449a      	add	sl, r3
   104c4:	f109 39ff 	add.w	r9, r9, #4294967295
   104c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104ca:	2b00      	cmp	r3, #0
   104cc:	f040 8175 	bne.w	107ba <__ssvfscanf_r+0x1826>
   104d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   104d2:	2b00      	cmp	r3, #0
   104d4:	f000 8170 	beq.w	107b8 <__ssvfscanf_r+0x1824>
   104d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   104da:	1af5      	subs	r5, r6, r3
   104dc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   104e0:	f200 816a 	bhi.w	107b8 <__ssvfscanf_r+0x1824>
   104e4:	4618      	mov	r0, r3
   104e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   104ea:	f7f9 fc23 	bl	9d34 <realloc>
   104ee:	63f8      	str	r0, [r7, #60]	; 0x3c
   104f0:	2800      	cmp	r0, #0
   104f2:	f040 815c 	bne.w	107ae <__ssvfscanf_r+0x181a>
   104f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   104f8:	2b00      	cmp	r3, #0
   104fa:	d12d      	bne.n	10558 <__ssvfscanf_r+0x15c4>
   104fc:	f04f 33ff 	mov.w	r3, #4294967295
   10500:	647b      	str	r3, [r7, #68]	; 0x44
   10502:	f7fe be47 	b.w	f194 <__ssvfscanf_r+0x200>
   10506:	0622      	lsls	r2, r4, #24
   10508:	f140 808f 	bpl.w	1062a <__ssvfscanf_r+0x1696>
   1050c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1050e:	f854 3b04 	ldr.w	r3, [r4], #4
   10512:	64bb      	str	r3, [r7, #72]	; 0x48
   10514:	2b00      	cmp	r3, #0
   10516:	f43e ae32 	beq.w	f17e <__ssvfscanf_r+0x1ea>
   1051a:	2080      	movs	r0, #128	; 0x80
   1051c:	f7f9 f93e 	bl	979c <malloc>
   10520:	4606      	mov	r6, r0
   10522:	2800      	cmp	r0, #0
   10524:	d0e7      	beq.n	104f6 <__ssvfscanf_r+0x1562>
   10526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10528:	6018      	str	r0, [r3, #0]
   1052a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1052c:	88dd      	ldrh	r5, [r3, #6]
   1052e:	889a      	ldrh	r2, [r3, #4]
   10530:	4295      	cmp	r5, r2
   10532:	f0c0 80b3 	bcc.w	1069c <__ssvfscanf_r+0x1708>
   10536:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1053a:	428a      	cmp	r2, r1
   1053c:	d856      	bhi.n	105ec <__ssvfscanf_r+0x1658>
   1053e:	3208      	adds	r2, #8
   10540:	b293      	uxth	r3, r2
   10542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10544:	63fb      	str	r3, [r7, #60]	; 0x3c
   10546:	0099      	lsls	r1, r3, #2
   10548:	6810      	ldr	r0, [r2, #0]
   1054a:	f7f9 fbf3 	bl	9d34 <realloc>
   1054e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10550:	2800      	cmp	r0, #0
   10552:	f040 80ae 	bne.w	106b2 <__ssvfscanf_r+0x171e>
   10556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10558:	88db      	ldrh	r3, [r3, #6]
   1055a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1055c:	461e      	mov	r6, r3
   1055e:	f8d2 8000 	ldr.w	r8, [r2]
   10562:	e661      	b.n	10228 <__ssvfscanf_r+0x1294>
   10564:	462b      	mov	r3, r5
   10566:	6abd      	ldr	r5, [r7, #40]	; 0x28
   10568:	42ab      	cmp	r3, r5
   1056a:	f67e ae08 	bls.w	f17e <__ssvfscanf_r+0x1ea>
   1056e:	461c      	mov	r4, r3
   10570:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   10574:	465a      	mov	r2, fp
   10576:	4648      	mov	r0, r9
   10578:	f001 fe76 	bl	12268 <_sungetc_r>
   1057c:	42ac      	cmp	r4, r5
   1057e:	d1f7      	bne.n	10570 <__ssvfscanf_r+0x15dc>
   10580:	f7fe bdfd 	b.w	f17e <__ssvfscanf_r+0x1ea>
   10584:	4610      	mov	r0, r2
   10586:	00d9      	lsls	r1, r3, #3
   10588:	461e      	mov	r6, r3
   1058a:	f7f9 fbd3 	bl	9d34 <realloc>
   1058e:	62b8      	str	r0, [r7, #40]	; 0x28
   10590:	2800      	cmp	r0, #0
   10592:	d0b0      	beq.n	104f6 <__ssvfscanf_r+0x1562>
   10594:	1942      	adds	r2, r0, r5
   10596:	64ba      	str	r2, [r7, #72]	; 0x48
   10598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1059a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1059c:	6010      	str	r0, [r2, #0]
   1059e:	0073      	lsls	r3, r6, #1
   105a0:	623b      	str	r3, [r7, #32]
   105a2:	e4f8      	b.n	ff96 <__ssvfscanf_r+0x1002>
   105a4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   105a8:	e63e      	b.n	10228 <__ssvfscanf_r+0x1294>
   105aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
   105ac:	6028      	str	r0, [r5, #0]
   105ae:	88ce      	ldrh	r6, [r1, #6]
   105b0:	888a      	ldrh	r2, [r1, #4]
   105b2:	4296      	cmp	r6, r2
   105b4:	f0c0 808e 	bcc.w	106d4 <__ssvfscanf_r+0x1740>
   105b8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   105bc:	428a      	cmp	r2, r1
   105be:	6338      	str	r0, [r7, #48]	; 0x30
   105c0:	f240 80a5 	bls.w	1070e <__ssvfscanf_r+0x177a>
   105c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105c6:	f8d3 8000 	ldr.w	r8, [r3]
   105ca:	e62d      	b.n	10228 <__ssvfscanf_r+0x1294>
   105cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   105ce:	4295      	cmp	r5, r2
   105d0:	f67e add5 	bls.w	f17e <__ssvfscanf_r+0x1ea>
   105d4:	462c      	mov	r4, r5
   105d6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   105d8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   105dc:	465a      	mov	r2, fp
   105de:	4648      	mov	r0, r9
   105e0:	f001 fe42 	bl	12268 <_sungetc_r>
   105e4:	42ac      	cmp	r4, r5
   105e6:	d1f7      	bne.n	105d8 <__ssvfscanf_r+0x1644>
   105e8:	f7fe bdc9 	b.w	f17e <__ssvfscanf_r+0x1ea>
   105ec:	462b      	mov	r3, r5
   105ee:	e7b4      	b.n	1055a <__ssvfscanf_r+0x15c6>
   105f0:	f001 fc64 	bl	11ebc <_strtoull_r>
   105f4:	e5c1      	b.n	1017a <__ssvfscanf_r+0x11e6>
   105f6:	f8d8 3000 	ldr.w	r3, [r8]
   105fa:	461d      	mov	r5, r3
   105fc:	3301      	adds	r3, #1
   105fe:	f47f a8d5 	bne.w	f7ac <__ssvfscanf_r+0x818>
   10602:	462a      	mov	r2, r5
   10604:	f7ff b8e8 	b.w	f7d8 <__ssvfscanf_r+0x844>
   10608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1060a:	6818      	ldr	r0, [r3, #0]
   1060c:	f001 fcb4 	bl	11f78 <iswspace>
   10610:	2800      	cmp	r0, #0
   10612:	f47f aea8 	bne.w	10366 <__ssvfscanf_r+0x13d2>
   10616:	2c03      	cmp	r4, #3
   10618:	44aa      	add	sl, r5
   1061a:	f47f a849 	bne.w	f6b0 <__ssvfscanf_r+0x71c>
   1061e:	6833      	ldr	r3, [r6, #0]
   10620:	2b04      	cmp	r3, #4
   10622:	f47f a845 	bne.w	f6b0 <__ssvfscanf_r+0x71c>
   10626:	f7ff b845 	b.w	f6b4 <__ssvfscanf_r+0x720>
   1062a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1062e:	f853 6b04 	ldr.w	r6, [r3], #4
   10632:	633b      	str	r3, [r7, #48]	; 0x30
   10634:	4615      	mov	r5, r2
   10636:	63fa      	str	r2, [r7, #60]	; 0x3c
   10638:	64ba      	str	r2, [r7, #72]	; 0x48
   1063a:	e709      	b.n	10450 <__ssvfscanf_r+0x14bc>
   1063c:	461c      	mov	r4, r3
   1063e:	f8db 3004 	ldr.w	r3, [fp, #4]
   10642:	4598      	cmp	r8, r3
   10644:	dd39      	ble.n	106ba <__ssvfscanf_r+0x1726>
   10646:	f8db 2000 	ldr.w	r2, [fp]
   1064a:	441a      	add	r2, r3
   1064c:	f8cb 2000 	str.w	r2, [fp]
   10650:	4659      	mov	r1, fp
   10652:	4648      	mov	r0, r9
   10654:	441c      	add	r4, r3
   10656:	eba8 0803 	sub.w	r8, r8, r3
   1065a:	f001 fe45 	bl	122e8 <__ssrefill_r>
   1065e:	2800      	cmp	r0, #0
   10660:	d0ed      	beq.n	1063e <__ssvfscanf_r+0x16aa>
   10662:	2c00      	cmp	r4, #0
   10664:	f43e ad82 	beq.w	f16c <__ssvfscanf_r+0x1d8>
   10668:	44a2      	add	sl, r4
   1066a:	f7fe bcba 	b.w	efe2 <__ssvfscanf_r+0x4e>
   1066e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   10670:	4643      	mov	r3, r8
   10672:	6829      	ldr	r1, [r5, #0]
   10674:	f8cd b000 	str.w	fp, [sp]
   10678:	2201      	movs	r2, #1
   1067a:	4648      	mov	r0, r9
   1067c:	f001 fe52 	bl	12324 <_sfread_r>
   10680:	4604      	mov	r4, r0
   10682:	2800      	cmp	r0, #0
   10684:	f43e ad72 	beq.w	f16c <__ssvfscanf_r+0x1d8>
   10688:	3504      	adds	r5, #4
   1068a:	64bd      	str	r5, [r7, #72]	; 0x48
   1068c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1068e:	3301      	adds	r3, #1
   10690:	647b      	str	r3, [r7, #68]	; 0x44
   10692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10694:	633b      	str	r3, [r7, #48]	; 0x30
   10696:	44a2      	add	sl, r4
   10698:	f7fe bca3 	b.w	efe2 <__ssvfscanf_r+0x4e>
   1069c:	6818      	ldr	r0, [r3, #0]
   1069e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   106a0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   106a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   106a6:	633c      	str	r4, [r7, #48]	; 0x30
   106a8:	3501      	adds	r5, #1
   106aa:	80dd      	strh	r5, [r3, #6]
   106ac:	63fe      	str	r6, [r7, #60]	; 0x3c
   106ae:	2520      	movs	r5, #32
   106b0:	e6ce      	b.n	10450 <__ssvfscanf_r+0x14bc>
   106b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   106b4:	8093      	strh	r3, [r2, #4]
   106b6:	6010      	str	r0, [r2, #0]
   106b8:	e7f1      	b.n	1069e <__ssvfscanf_r+0x170a>
   106ba:	eba3 0308 	sub.w	r3, r3, r8
   106be:	f8cb 3004 	str.w	r3, [fp, #4]
   106c2:	f8db 3000 	ldr.w	r3, [fp]
   106c6:	4444      	add	r4, r8
   106c8:	4443      	add	r3, r8
   106ca:	f8cb 3000 	str.w	r3, [fp]
   106ce:	44a2      	add	sl, r4
   106d0:	f7fe bc87 	b.w	efe2 <__ssvfscanf_r+0x4e>
   106d4:	680a      	ldr	r2, [r1, #0]
   106d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   106d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   106da:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   106de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   106e0:	3601      	adds	r6, #1
   106e2:	b2b6      	uxth	r6, r6
   106e4:	80d6      	strh	r6, [r2, #6]
   106e6:	4619      	mov	r1, r3
   106e8:	f8cd b000 	str.w	fp, [sp]
   106ec:	4643      	mov	r3, r8
   106ee:	2201      	movs	r2, #1
   106f0:	4648      	mov	r0, r9
   106f2:	f001 fe17 	bl	12324 <_sfread_r>
   106f6:	4604      	mov	r4, r0
   106f8:	b1d8      	cbz	r0, 10732 <__ssvfscanf_r+0x179e>
   106fa:	4580      	cmp	r8, r0
   106fc:	d9c6      	bls.n	1068c <__ssvfscanf_r+0x16f8>
   106fe:	6828      	ldr	r0, [r5, #0]
   10700:	4621      	mov	r1, r4
   10702:	f7f9 fb17 	bl	9d34 <realloc>
   10706:	2800      	cmp	r0, #0
   10708:	d0c0      	beq.n	1068c <__ssvfscanf_r+0x16f8>
   1070a:	6028      	str	r0, [r5, #0]
   1070c:	e7be      	b.n	1068c <__ssvfscanf_r+0x16f8>
   1070e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10710:	3208      	adds	r2, #8
   10712:	b294      	uxth	r4, r2
   10714:	681a      	ldr	r2, [r3, #0]
   10716:	637a      	str	r2, [r7, #52]	; 0x34
   10718:	4610      	mov	r0, r2
   1071a:	00a1      	lsls	r1, r4, #2
   1071c:	f7f9 fb0a 	bl	9d34 <realloc>
   10720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10722:	63f8      	str	r0, [r7, #60]	; 0x3c
   10724:	2800      	cmp	r0, #0
   10726:	d05b      	beq.n	107e0 <__ssvfscanf_r+0x184c>
   10728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1072a:	809c      	strh	r4, [r3, #4]
   1072c:	6018      	str	r0, [r3, #0]
   1072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10730:	e7d2      	b.n	106d8 <__ssvfscanf_r+0x1744>
   10732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10734:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   10738:	2b00      	cmp	r3, #0
   1073a:	f43f ad75 	beq.w	10228 <__ssvfscanf_r+0x1294>
   1073e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10742:	065b      	lsls	r3, r3, #25
   10744:	f57e ad1d 	bpl.w	f182 <__ssvfscanf_r+0x1ee>
   10748:	e56a      	b.n	10220 <__ssvfscanf_r+0x128c>
   1074a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1074c:	3202      	adds	r2, #2
   1074e:	d11d      	bne.n	1078c <__ssvfscanf_r+0x17f8>
   10750:	f8db 2004 	ldr.w	r2, [fp, #4]
   10754:	2a00      	cmp	r2, #0
   10756:	461d      	mov	r5, r3
   10758:	f73f ae80 	bgt.w	1045c <__ssvfscanf_r+0x14c8>
   1075c:	4659      	mov	r1, fp
   1075e:	4620      	mov	r0, r4
   10760:	f001 fdc2 	bl	122e8 <__ssrefill_r>
   10764:	b9e0      	cbnz	r0, 107a0 <__ssvfscanf_r+0x180c>
   10766:	f1b9 0f00 	cmp.w	r9, #0
   1076a:	f47f ae77 	bne.w	1045c <__ssvfscanf_r+0x14c8>
   1076e:	4645      	mov	r5, r8
   10770:	46a1      	mov	r9, r4
   10772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10774:	b123      	cbz	r3, 10780 <__ssvfscanf_r+0x17ec>
   10776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10778:	1af1      	subs	r1, r6, r3
   1077a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   1077e:	d827      	bhi.n	107d0 <__ssvfscanf_r+0x183c>
   10780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10782:	2b00      	cmp	r3, #0
   10784:	f47e ac2d 	bne.w	efe2 <__ssvfscanf_r+0x4e>
   10788:	f7ff ba1c 	b.w	fbc4 <__ssvfscanf_r+0xc30>
   1078c:	449a      	add	sl, r3
   1078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10790:	2b03      	cmp	r3, #3
   10792:	f47f ae97 	bne.w	104c4 <__ssvfscanf_r+0x1530>
   10796:	682b      	ldr	r3, [r5, #0]
   10798:	2b04      	cmp	r3, #4
   1079a:	f47f ae93 	bne.w	104c4 <__ssvfscanf_r+0x1530>
   1079e:	e693      	b.n	104c8 <__ssvfscanf_r+0x1534>
   107a0:	46a1      	mov	r9, r4
   107a2:	462c      	mov	r4, r5
   107a4:	4645      	mov	r5, r8
   107a6:	2c00      	cmp	r4, #0
   107a8:	d0e3      	beq.n	10772 <__ssvfscanf_r+0x17de>
   107aa:	f7fe bcdf 	b.w	f16c <__ssvfscanf_r+0x1d8>
   107ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
   107b0:	1946      	adds	r6, r0, r5
   107b2:	6010      	str	r0, [r2, #0]
   107b4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   107b8:	3604      	adds	r6, #4
   107ba:	f8db 3004 	ldr.w	r3, [fp, #4]
   107be:	2b00      	cmp	r3, #0
   107c0:	f04f 0500 	mov.w	r5, #0
   107c4:	ddca      	ble.n	1075c <__ssvfscanf_r+0x17c8>
   107c6:	f1b9 0f00 	cmp.w	r9, #0
   107ca:	f47f ae47 	bne.w	1045c <__ssvfscanf_r+0x14c8>
   107ce:	e7ce      	b.n	1076e <__ssvfscanf_r+0x17da>
   107d0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   107d2:	6820      	ldr	r0, [r4, #0]
   107d4:	f7f9 faae 	bl	9d34 <realloc>
   107d8:	2800      	cmp	r0, #0
   107da:	d0d1      	beq.n	10780 <__ssvfscanf_r+0x17ec>
   107dc:	6020      	str	r0, [r4, #0]
   107de:	e7cf      	b.n	10780 <__ssvfscanf_r+0x17ec>
   107e0:	4690      	mov	r8, r2
   107e2:	e521      	b.n	10228 <__ssvfscanf_r+0x1294>

000107e4 <_fclose_r>:
   107e4:	b570      	push	{r4, r5, r6, lr}
   107e6:	2900      	cmp	r1, #0
   107e8:	d04b      	beq.n	10882 <_fclose_r+0x9e>
   107ea:	4606      	mov	r6, r0
   107ec:	460c      	mov	r4, r1
   107ee:	b110      	cbz	r0, 107f6 <_fclose_r+0x12>
   107f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   107f2:	2b00      	cmp	r3, #0
   107f4:	d048      	beq.n	10888 <_fclose_r+0xa4>
   107f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   107f8:	07d8      	lsls	r0, r3, #31
   107fa:	d534      	bpl.n	10866 <_fclose_r+0x82>
   107fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10800:	2b00      	cmp	r3, #0
   10802:	d03e      	beq.n	10882 <_fclose_r+0x9e>
   10804:	4621      	mov	r1, r4
   10806:	4630      	mov	r0, r6
   10808:	f000 f850 	bl	108ac <__sflush_r>
   1080c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1080e:	4605      	mov	r5, r0
   10810:	b133      	cbz	r3, 10820 <_fclose_r+0x3c>
   10812:	69e1      	ldr	r1, [r4, #28]
   10814:	4630      	mov	r0, r6
   10816:	4798      	blx	r3
   10818:	2800      	cmp	r0, #0
   1081a:	bfb8      	it	lt
   1081c:	f04f 35ff 	movlt.w	r5, #4294967295
   10820:	89a3      	ldrh	r3, [r4, #12]
   10822:	061a      	lsls	r2, r3, #24
   10824:	d43c      	bmi.n	108a0 <_fclose_r+0xbc>
   10826:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10828:	b141      	cbz	r1, 1083c <_fclose_r+0x58>
   1082a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1082e:	4299      	cmp	r1, r3
   10830:	d002      	beq.n	10838 <_fclose_r+0x54>
   10832:	4630      	mov	r0, r6
   10834:	f7fb fb96 	bl	bf64 <_free_r>
   10838:	2300      	movs	r3, #0
   1083a:	6323      	str	r3, [r4, #48]	; 0x30
   1083c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1083e:	b121      	cbz	r1, 1084a <_fclose_r+0x66>
   10840:	4630      	mov	r0, r6
   10842:	f7fb fb8f 	bl	bf64 <_free_r>
   10846:	2300      	movs	r3, #0
   10848:	6463      	str	r3, [r4, #68]	; 0x44
   1084a:	f7fa fd09 	bl	b260 <__sfp_lock_acquire>
   1084e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10850:	2200      	movs	r2, #0
   10852:	07db      	lsls	r3, r3, #31
   10854:	81a2      	strh	r2, [r4, #12]
   10856:	d51f      	bpl.n	10898 <_fclose_r+0xb4>
   10858:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1085a:	f7fb f839 	bl	b8d0 <__retarget_lock_close_recursive>
   1085e:	f7fa fd05 	bl	b26c <__sfp_lock_release>
   10862:	4628      	mov	r0, r5
   10864:	bd70      	pop	{r4, r5, r6, pc}
   10866:	89a3      	ldrh	r3, [r4, #12]
   10868:	0599      	lsls	r1, r3, #22
   1086a:	d4cb      	bmi.n	10804 <_fclose_r+0x20>
   1086c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1086e:	f7fb f831 	bl	b8d4 <__retarget_lock_acquire_recursive>
   10872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10876:	2b00      	cmp	r3, #0
   10878:	d1c4      	bne.n	10804 <_fclose_r+0x20>
   1087a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   1087c:	f015 0501 	ands.w	r5, r5, #1
   10880:	d005      	beq.n	1088e <_fclose_r+0xaa>
   10882:	2500      	movs	r5, #0
   10884:	4628      	mov	r0, r5
   10886:	bd70      	pop	{r4, r5, r6, pc}
   10888:	f7fa fccc 	bl	b224 <__sinit>
   1088c:	e7b3      	b.n	107f6 <_fclose_r+0x12>
   1088e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10890:	f7fb f822 	bl	b8d8 <__retarget_lock_release_recursive>
   10894:	4628      	mov	r0, r5
   10896:	bd70      	pop	{r4, r5, r6, pc}
   10898:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1089a:	f7fb f81d 	bl	b8d8 <__retarget_lock_release_recursive>
   1089e:	e7db      	b.n	10858 <_fclose_r+0x74>
   108a0:	6921      	ldr	r1, [r4, #16]
   108a2:	4630      	mov	r0, r6
   108a4:	f7fb fb5e 	bl	bf64 <_free_r>
   108a8:	e7bd      	b.n	10826 <_fclose_r+0x42>
   108aa:	bf00      	nop

000108ac <__sflush_r>:
   108ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   108b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108b4:	460c      	mov	r4, r1
   108b6:	0711      	lsls	r1, r2, #28
   108b8:	4680      	mov	r8, r0
   108ba:	d447      	bmi.n	1094c <__sflush_r+0xa0>
   108bc:	6863      	ldr	r3, [r4, #4]
   108be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   108c2:	2b00      	cmp	r3, #0
   108c4:	81a2      	strh	r2, [r4, #12]
   108c6:	dd5e      	ble.n	10986 <__sflush_r+0xda>
   108c8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   108ca:	2d00      	cmp	r5, #0
   108cc:	d058      	beq.n	10980 <__sflush_r+0xd4>
   108ce:	2300      	movs	r3, #0
   108d0:	f8d8 6000 	ldr.w	r6, [r8]
   108d4:	f8c8 3000 	str.w	r3, [r8]
   108d8:	b293      	uxth	r3, r2
   108da:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   108de:	d156      	bne.n	1098e <__sflush_r+0xe2>
   108e0:	2301      	movs	r3, #1
   108e2:	69e1      	ldr	r1, [r4, #28]
   108e4:	4640      	mov	r0, r8
   108e6:	47a8      	blx	r5
   108e8:	1c43      	adds	r3, r0, #1
   108ea:	d067      	beq.n	109bc <__sflush_r+0x110>
   108ec:	89a3      	ldrh	r3, [r4, #12]
   108ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   108f0:	075f      	lsls	r7, r3, #29
   108f2:	d505      	bpl.n	10900 <__sflush_r+0x54>
   108f4:	6863      	ldr	r3, [r4, #4]
   108f6:	1ac0      	subs	r0, r0, r3
   108f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   108fa:	b10b      	cbz	r3, 10900 <__sflush_r+0x54>
   108fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   108fe:	1ac0      	subs	r0, r0, r3
   10900:	69e1      	ldr	r1, [r4, #28]
   10902:	4602      	mov	r2, r0
   10904:	2300      	movs	r3, #0
   10906:	4640      	mov	r0, r8
   10908:	47a8      	blx	r5
   1090a:	1c41      	adds	r1, r0, #1
   1090c:	d141      	bne.n	10992 <__sflush_r+0xe6>
   1090e:	f8d8 3000 	ldr.w	r3, [r8]
   10912:	2b00      	cmp	r3, #0
   10914:	d03d      	beq.n	10992 <__sflush_r+0xe6>
   10916:	2b1d      	cmp	r3, #29
   10918:	d001      	beq.n	1091e <__sflush_r+0x72>
   1091a:	2b16      	cmp	r3, #22
   1091c:	d156      	bne.n	109cc <__sflush_r+0x120>
   1091e:	89a3      	ldrh	r3, [r4, #12]
   10920:	6922      	ldr	r2, [r4, #16]
   10922:	6022      	str	r2, [r4, #0]
   10924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10928:	2100      	movs	r1, #0
   1092a:	6061      	str	r1, [r4, #4]
   1092c:	81a3      	strh	r3, [r4, #12]
   1092e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10930:	f8c8 6000 	str.w	r6, [r8]
   10934:	b321      	cbz	r1, 10980 <__sflush_r+0xd4>
   10936:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1093a:	4299      	cmp	r1, r3
   1093c:	d002      	beq.n	10944 <__sflush_r+0x98>
   1093e:	4640      	mov	r0, r8
   10940:	f7fb fb10 	bl	bf64 <_free_r>
   10944:	2000      	movs	r0, #0
   10946:	6320      	str	r0, [r4, #48]	; 0x30
   10948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1094c:	6926      	ldr	r6, [r4, #16]
   1094e:	b1be      	cbz	r6, 10980 <__sflush_r+0xd4>
   10950:	b293      	uxth	r3, r2
   10952:	6825      	ldr	r5, [r4, #0]
   10954:	6026      	str	r6, [r4, #0]
   10956:	079a      	lsls	r2, r3, #30
   10958:	bf0c      	ite	eq
   1095a:	6963      	ldreq	r3, [r4, #20]
   1095c:	2300      	movne	r3, #0
   1095e:	1bad      	subs	r5, r5, r6
   10960:	60a3      	str	r3, [r4, #8]
   10962:	e00b      	b.n	1097c <__sflush_r+0xd0>
   10964:	462b      	mov	r3, r5
   10966:	4632      	mov	r2, r6
   10968:	69e1      	ldr	r1, [r4, #28]
   1096a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1096c:	4640      	mov	r0, r8
   1096e:	47b8      	blx	r7
   10970:	f1b0 0c00 	subs.w	ip, r0, #0
   10974:	eba5 050c 	sub.w	r5, r5, ip
   10978:	4466      	add	r6, ip
   1097a:	dd17      	ble.n	109ac <__sflush_r+0x100>
   1097c:	2d00      	cmp	r5, #0
   1097e:	dcf1      	bgt.n	10964 <__sflush_r+0xb8>
   10980:	2000      	movs	r0, #0
   10982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10986:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10988:	2b00      	cmp	r3, #0
   1098a:	dc9d      	bgt.n	108c8 <__sflush_r+0x1c>
   1098c:	e7f8      	b.n	10980 <__sflush_r+0xd4>
   1098e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10990:	e7ae      	b.n	108f0 <__sflush_r+0x44>
   10992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10996:	6922      	ldr	r2, [r4, #16]
   10998:	6022      	str	r2, [r4, #0]
   1099a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1099e:	81a3      	strh	r3, [r4, #12]
   109a0:	2200      	movs	r2, #0
   109a2:	04db      	lsls	r3, r3, #19
   109a4:	6062      	str	r2, [r4, #4]
   109a6:	d5c2      	bpl.n	1092e <__sflush_r+0x82>
   109a8:	6520      	str	r0, [r4, #80]	; 0x50
   109aa:	e7c0      	b.n	1092e <__sflush_r+0x82>
   109ac:	89a3      	ldrh	r3, [r4, #12]
   109ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   109b2:	f04f 30ff 	mov.w	r0, #4294967295
   109b6:	81a3      	strh	r3, [r4, #12]
   109b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109bc:	f8d8 3000 	ldr.w	r3, [r8]
   109c0:	2b00      	cmp	r3, #0
   109c2:	d093      	beq.n	108ec <__sflush_r+0x40>
   109c4:	2b1d      	cmp	r3, #29
   109c6:	d006      	beq.n	109d6 <__sflush_r+0x12a>
   109c8:	2b16      	cmp	r3, #22
   109ca:	d004      	beq.n	109d6 <__sflush_r+0x12a>
   109cc:	89a3      	ldrh	r3, [r4, #12]
   109ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   109d2:	81a3      	strh	r3, [r4, #12]
   109d4:	e7d5      	b.n	10982 <__sflush_r+0xd6>
   109d6:	f8c8 6000 	str.w	r6, [r8]
   109da:	e7d1      	b.n	10980 <__sflush_r+0xd4>

000109dc <_fflush_r>:
   109dc:	b538      	push	{r3, r4, r5, lr}
   109de:	460c      	mov	r4, r1
   109e0:	4605      	mov	r5, r0
   109e2:	b108      	cbz	r0, 109e8 <_fflush_r+0xc>
   109e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   109e6:	b303      	cbz	r3, 10a2a <_fflush_r+0x4e>
   109e8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   109ec:	b188      	cbz	r0, 10a12 <_fflush_r+0x36>
   109ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   109f0:	07db      	lsls	r3, r3, #31
   109f2:	d401      	bmi.n	109f8 <_fflush_r+0x1c>
   109f4:	0581      	lsls	r1, r0, #22
   109f6:	d50f      	bpl.n	10a18 <_fflush_r+0x3c>
   109f8:	4628      	mov	r0, r5
   109fa:	4621      	mov	r1, r4
   109fc:	f7ff ff56 	bl	108ac <__sflush_r>
   10a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10a02:	07da      	lsls	r2, r3, #31
   10a04:	4605      	mov	r5, r0
   10a06:	d402      	bmi.n	10a0e <_fflush_r+0x32>
   10a08:	89a3      	ldrh	r3, [r4, #12]
   10a0a:	059b      	lsls	r3, r3, #22
   10a0c:	d508      	bpl.n	10a20 <_fflush_r+0x44>
   10a0e:	4628      	mov	r0, r5
   10a10:	bd38      	pop	{r3, r4, r5, pc}
   10a12:	4605      	mov	r5, r0
   10a14:	4628      	mov	r0, r5
   10a16:	bd38      	pop	{r3, r4, r5, pc}
   10a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a1a:	f7fa ff5b 	bl	b8d4 <__retarget_lock_acquire_recursive>
   10a1e:	e7eb      	b.n	109f8 <_fflush_r+0x1c>
   10a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a22:	f7fa ff59 	bl	b8d8 <__retarget_lock_release_recursive>
   10a26:	4628      	mov	r0, r5
   10a28:	bd38      	pop	{r3, r4, r5, pc}
   10a2a:	f7fa fbfb 	bl	b224 <__sinit>
   10a2e:	e7db      	b.n	109e8 <_fflush_r+0xc>

00010a30 <__sccl>:
   10a30:	b570      	push	{r4, r5, r6, lr}
   10a32:	780c      	ldrb	r4, [r1, #0]
   10a34:	2c5e      	cmp	r4, #94	; 0x5e
   10a36:	4686      	mov	lr, r0
   10a38:	d01e      	beq.n	10a78 <__sccl+0x48>
   10a3a:	2200      	movs	r2, #0
   10a3c:	1c48      	adds	r0, r1, #1
   10a3e:	4694      	mov	ip, r2
   10a40:	f10e 33ff 	add.w	r3, lr, #4294967295
   10a44:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   10a48:	f803 2f01 	strb.w	r2, [r3, #1]!
   10a4c:	428b      	cmp	r3, r1
   10a4e:	d1fb      	bne.n	10a48 <__sccl+0x18>
   10a50:	b184      	cbz	r4, 10a74 <__sccl+0x44>
   10a52:	f08c 0101 	eor.w	r1, ip, #1
   10a56:	f80e 1004 	strb.w	r1, [lr, r4]
   10a5a:	1c45      	adds	r5, r0, #1
   10a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10a60:	2b2d      	cmp	r3, #45	; 0x2d
   10a62:	d00e      	beq.n	10a82 <__sccl+0x52>
   10a64:	2b5d      	cmp	r3, #93	; 0x5d
   10a66:	d003      	beq.n	10a70 <__sccl+0x40>
   10a68:	b11b      	cbz	r3, 10a72 <__sccl+0x42>
   10a6a:	461c      	mov	r4, r3
   10a6c:	4628      	mov	r0, r5
   10a6e:	e7f2      	b.n	10a56 <__sccl+0x26>
   10a70:	4628      	mov	r0, r5
   10a72:	bd70      	pop	{r4, r5, r6, pc}
   10a74:	3801      	subs	r0, #1
   10a76:	bd70      	pop	{r4, r5, r6, pc}
   10a78:	2201      	movs	r2, #1
   10a7a:	784c      	ldrb	r4, [r1, #1]
   10a7c:	1c88      	adds	r0, r1, #2
   10a7e:	4694      	mov	ip, r2
   10a80:	e7de      	b.n	10a40 <__sccl+0x10>
   10a82:	f890 c001 	ldrb.w	ip, [r0, #1]
   10a86:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10a8a:	d0ee      	beq.n	10a6a <__sccl+0x3a>
   10a8c:	4564      	cmp	r4, ip
   10a8e:	dcec      	bgt.n	10a6a <__sccl+0x3a>
   10a90:	1c66      	adds	r6, r4, #1
   10a92:	3002      	adds	r0, #2
   10a94:	eb0e 0206 	add.w	r2, lr, r6
   10a98:	f802 1b01 	strb.w	r1, [r2], #1
   10a9c:	eba2 030e 	sub.w	r3, r2, lr
   10aa0:	3b01      	subs	r3, #1
   10aa2:	459c      	cmp	ip, r3
   10aa4:	dcf8      	bgt.n	10a98 <__sccl+0x68>
   10aa6:	ebac 0304 	sub.w	r3, ip, r4
   10aaa:	3b01      	subs	r3, #1
   10aac:	4564      	cmp	r4, ip
   10aae:	bfa8      	it	ge
   10ab0:	2300      	movge	r3, #0
   10ab2:	3502      	adds	r5, #2
   10ab4:	199c      	adds	r4, r3, r6
   10ab6:	e7d1      	b.n	10a5c <__sccl+0x2c>

00010ab8 <stpncpy>:
   10ab8:	ea41 0300 	orr.w	r3, r1, r0
   10abc:	079b      	lsls	r3, r3, #30
   10abe:	b430      	push	{r4, r5}
   10ac0:	d101      	bne.n	10ac6 <stpncpy+0xe>
   10ac2:	2a03      	cmp	r2, #3
   10ac4:	d80f      	bhi.n	10ae6 <stpncpy+0x2e>
   10ac6:	f101 3cff 	add.w	ip, r1, #4294967295
   10aca:	e007      	b.n	10adc <stpncpy+0x24>
   10acc:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10ad0:	f803 1b01 	strb.w	r1, [r3], #1
   10ad4:	1e54      	subs	r4, r2, #1
   10ad6:	b1c1      	cbz	r1, 10b0a <stpncpy+0x52>
   10ad8:	4622      	mov	r2, r4
   10ada:	4618      	mov	r0, r3
   10adc:	4603      	mov	r3, r0
   10ade:	2a00      	cmp	r2, #0
   10ae0:	d1f4      	bne.n	10acc <stpncpy+0x14>
   10ae2:	bc30      	pop	{r4, r5}
   10ae4:	4770      	bx	lr
   10ae6:	460b      	mov	r3, r1
   10ae8:	4619      	mov	r1, r3
   10aea:	f853 5b04 	ldr.w	r5, [r3], #4
   10aee:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10af2:	ea24 0405 	bic.w	r4, r4, r5
   10af6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10afa:	d1e4      	bne.n	10ac6 <stpncpy+0xe>
   10afc:	3a04      	subs	r2, #4
   10afe:	2a03      	cmp	r2, #3
   10b00:	f840 5b04 	str.w	r5, [r0], #4
   10b04:	4619      	mov	r1, r3
   10b06:	d8ef      	bhi.n	10ae8 <stpncpy+0x30>
   10b08:	e7dd      	b.n	10ac6 <stpncpy+0xe>
   10b0a:	4402      	add	r2, r0
   10b0c:	2c00      	cmp	r4, #0
   10b0e:	d0e8      	beq.n	10ae2 <stpncpy+0x2a>
   10b10:	f803 1b01 	strb.w	r1, [r3], #1
   10b14:	4293      	cmp	r3, r2
   10b16:	d1fb      	bne.n	10b10 <stpncpy+0x58>
   10b18:	bc30      	pop	{r4, r5}
   10b1a:	4770      	bx	lr

00010b1c <_localeconv_r>:
   10b1c:	4800      	ldr	r0, [pc, #0]	; (10b20 <_localeconv_r+0x4>)
   10b1e:	4770      	bx	lr
   10b20:	200087e0 	.word	0x200087e0
   10b24:	00000000 	.word	0x00000000

00010b28 <frexp>:
   10b28:	b430      	push	{r4, r5}
   10b2a:	b082      	sub	sp, #8
   10b2c:	ed8d 0b00 	vstr	d0, [sp]
   10b30:	9a01      	ldr	r2, [sp, #4]
   10b32:	4c19      	ldr	r4, [pc, #100]	; (10b98 <frexp+0x70>)
   10b34:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10b38:	2100      	movs	r1, #0
   10b3a:	42a3      	cmp	r3, r4
   10b3c:	6001      	str	r1, [r0, #0]
   10b3e:	dc21      	bgt.n	10b84 <frexp+0x5c>
   10b40:	9c00      	ldr	r4, [sp, #0]
   10b42:	431c      	orrs	r4, r3
   10b44:	d01e      	beq.n	10b84 <frexp+0x5c>
   10b46:	4c15      	ldr	r4, [pc, #84]	; (10b9c <frexp+0x74>)
   10b48:	4014      	ands	r4, r2
   10b4a:	b954      	cbnz	r4, 10b62 <frexp+0x3a>
   10b4c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 10b90 <frexp+0x68>
   10b50:	ee20 7b07 	vmul.f64	d7, d0, d7
   10b54:	ed8d 7b00 	vstr	d7, [sp]
   10b58:	9a01      	ldr	r2, [sp, #4]
   10b5a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   10b5e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10b62:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10b66:	e9dd 4500 	ldrd	r4, r5, [sp]
   10b6a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10b6e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10b72:	151b      	asrs	r3, r3, #20
   10b74:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10b78:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10b7c:	e9cd 4500 	strd	r4, r5, [sp]
   10b80:	440b      	add	r3, r1
   10b82:	6003      	str	r3, [r0, #0]
   10b84:	ed9d 0b00 	vldr	d0, [sp]
   10b88:	b002      	add	sp, #8
   10b8a:	bc30      	pop	{r4, r5}
   10b8c:	4770      	bx	lr
   10b8e:	bf00      	nop
   10b90:	00000000 	.word	0x00000000
   10b94:	43500000 	.word	0x43500000
   10b98:	7fefffff 	.word	0x7fefffff
   10b9c:	7ff00000 	.word	0x7ff00000

00010ba0 <__assert_func>:
   10ba0:	b500      	push	{lr}
   10ba2:	4c0b      	ldr	r4, [pc, #44]	; (10bd0 <__assert_func+0x30>)
   10ba4:	6825      	ldr	r5, [r4, #0]
   10ba6:	4614      	mov	r4, r2
   10ba8:	68ee      	ldr	r6, [r5, #12]
   10baa:	461a      	mov	r2, r3
   10bac:	b085      	sub	sp, #20
   10bae:	4603      	mov	r3, r0
   10bb0:	460d      	mov	r5, r1
   10bb2:	b14c      	cbz	r4, 10bc8 <__assert_func+0x28>
   10bb4:	4907      	ldr	r1, [pc, #28]	; (10bd4 <__assert_func+0x34>)
   10bb6:	9500      	str	r5, [sp, #0]
   10bb8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10bbc:	4630      	mov	r0, r6
   10bbe:	4906      	ldr	r1, [pc, #24]	; (10bd8 <__assert_func+0x38>)
   10bc0:	f001 fabe 	bl	12140 <fiprintf>
   10bc4:	f7f7 f948 	bl	7e58 <abort>
   10bc8:	4904      	ldr	r1, [pc, #16]	; (10bdc <__assert_func+0x3c>)
   10bca:	460c      	mov	r4, r1
   10bcc:	e7f3      	b.n	10bb6 <__assert_func+0x16>
   10bce:	bf00      	nop
   10bd0:	20008c78 	.word	0x20008c78
   10bd4:	20000990 	.word	0x20000990
   10bd8:	200009a0 	.word	0x200009a0
   10bdc:	20008128 	.word	0x20008128

00010be0 <_calloc_r>:
   10be0:	b538      	push	{r3, r4, r5, lr}
   10be2:	fba1 1402 	umull	r1, r4, r1, r2
   10be6:	bb8c      	cbnz	r4, 10c4c <_calloc_r+0x6c>
   10be8:	f7f8 fde8 	bl	97bc <_malloc_r>
   10bec:	4605      	mov	r5, r0
   10bee:	b1e0      	cbz	r0, 10c2a <_calloc_r+0x4a>
   10bf0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10bf4:	f022 0203 	bic.w	r2, r2, #3
   10bf8:	3a04      	subs	r2, #4
   10bfa:	2a24      	cmp	r2, #36	; 0x24
   10bfc:	d817      	bhi.n	10c2e <_calloc_r+0x4e>
   10bfe:	2a13      	cmp	r2, #19
   10c00:	d91a      	bls.n	10c38 <_calloc_r+0x58>
   10c02:	2a1b      	cmp	r2, #27
   10c04:	e9c0 4400 	strd	r4, r4, [r0]
   10c08:	d91d      	bls.n	10c46 <_calloc_r+0x66>
   10c0a:	2a24      	cmp	r2, #36	; 0x24
   10c0c:	bf14      	ite	ne
   10c0e:	f100 0210 	addne.w	r2, r0, #16
   10c12:	f100 0218 	addeq.w	r2, r0, #24
   10c16:	f04f 0300 	mov.w	r3, #0
   10c1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10c1e:	bf04      	itt	eq
   10c20:	6104      	streq	r4, [r0, #16]
   10c22:	6144      	streq	r4, [r0, #20]
   10c24:	e9c2 3300 	strd	r3, r3, [r2]
   10c28:	6093      	str	r3, [r2, #8]
   10c2a:	4628      	mov	r0, r5
   10c2c:	bd38      	pop	{r3, r4, r5, pc}
   10c2e:	4621      	mov	r1, r4
   10c30:	f7fa fcec 	bl	b60c <memset>
   10c34:	4628      	mov	r0, r5
   10c36:	bd38      	pop	{r3, r4, r5, pc}
   10c38:	4602      	mov	r2, r0
   10c3a:	2300      	movs	r3, #0
   10c3c:	e9c2 3300 	strd	r3, r3, [r2]
   10c40:	6093      	str	r3, [r2, #8]
   10c42:	4628      	mov	r0, r5
   10c44:	bd38      	pop	{r3, r4, r5, pc}
   10c46:	f100 0208 	add.w	r2, r0, #8
   10c4a:	e7f6      	b.n	10c3a <_calloc_r+0x5a>
   10c4c:	f7fa fe14 	bl	b878 <__errno>
   10c50:	230c      	movs	r3, #12
   10c52:	2500      	movs	r5, #0
   10c54:	6003      	str	r3, [r0, #0]
   10c56:	e7e8      	b.n	10c2a <_calloc_r+0x4a>

00010c58 <quorem>:
   10c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c5c:	6903      	ldr	r3, [r0, #16]
   10c5e:	690c      	ldr	r4, [r1, #16]
   10c60:	42a3      	cmp	r3, r4
   10c62:	b083      	sub	sp, #12
   10c64:	f2c0 8087 	blt.w	10d76 <quorem+0x11e>
   10c68:	3c01      	subs	r4, #1
   10c6a:	f101 0514 	add.w	r5, r1, #20
   10c6e:	00a3      	lsls	r3, r4, #2
   10c70:	f100 0814 	add.w	r8, r0, #20
   10c74:	9300      	str	r3, [sp, #0]
   10c76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10c7a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10c7e:	3301      	adds	r3, #1
   10c80:	4681      	mov	r9, r0
   10c82:	429a      	cmp	r2, r3
   10c84:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   10c88:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10c8c:	9001      	str	r0, [sp, #4]
   10c8e:	fbb2 f6f3 	udiv	r6, r2, r3
   10c92:	d33b      	bcc.n	10d0c <quorem+0xb4>
   10c94:	f04f 0c00 	mov.w	ip, #0
   10c98:	46ae      	mov	lr, r5
   10c9a:	4640      	mov	r0, r8
   10c9c:	46e2      	mov	sl, ip
   10c9e:	4663      	mov	r3, ip
   10ca0:	f85e bb04 	ldr.w	fp, [lr], #4
   10ca4:	6802      	ldr	r2, [r0, #0]
   10ca6:	fa1f fc8b 	uxth.w	ip, fp
   10caa:	fb06 330c 	mla	r3, r6, ip, r3
   10cae:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10cb2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10cb6:	fb06 cc0b 	mla	ip, r6, fp, ip
   10cba:	b29b      	uxth	r3, r3
   10cbc:	ebaa 0303 	sub.w	r3, sl, r3
   10cc0:	fa1f fa8c 	uxth.w	sl, ip
   10cc4:	fa13 f382 	uxtah	r3, r3, r2
   10cc8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   10ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10cd0:	b29b      	uxth	r3, r3
   10cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10cd6:	4577      	cmp	r7, lr
   10cd8:	f840 3b04 	str.w	r3, [r0], #4
   10cdc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   10ce0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10ce4:	d2dc      	bcs.n	10ca0 <quorem+0x48>
   10ce6:	9b00      	ldr	r3, [sp, #0]
   10ce8:	f858 3003 	ldr.w	r3, [r8, r3]
   10cec:	b973      	cbnz	r3, 10d0c <quorem+0xb4>
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	3b04      	subs	r3, #4
   10cf2:	4598      	cmp	r8, r3
   10cf4:	d304      	bcc.n	10d00 <quorem+0xa8>
   10cf6:	e007      	b.n	10d08 <quorem+0xb0>
   10cf8:	4598      	cmp	r8, r3
   10cfa:	f104 34ff 	add.w	r4, r4, #4294967295
   10cfe:	d203      	bcs.n	10d08 <quorem+0xb0>
   10d00:	f853 2904 	ldr.w	r2, [r3], #-4
   10d04:	2a00      	cmp	r2, #0
   10d06:	d0f7      	beq.n	10cf8 <quorem+0xa0>
   10d08:	f8c9 4010 	str.w	r4, [r9, #16]
   10d0c:	4648      	mov	r0, r9
   10d0e:	f7fc f933 	bl	cf78 <__mcmp>
   10d12:	2800      	cmp	r0, #0
   10d14:	db2b      	blt.n	10d6e <quorem+0x116>
   10d16:	3601      	adds	r6, #1
   10d18:	4641      	mov	r1, r8
   10d1a:	2300      	movs	r3, #0
   10d1c:	f855 0b04 	ldr.w	r0, [r5], #4
   10d20:	f8d1 c000 	ldr.w	ip, [r1]
   10d24:	b282      	uxth	r2, r0
   10d26:	1a9a      	subs	r2, r3, r2
   10d28:	0c03      	lsrs	r3, r0, #16
   10d2a:	fa12 f28c 	uxtah	r2, r2, ip
   10d2e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10d32:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10d36:	b292      	uxth	r2, r2
   10d38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10d3c:	42af      	cmp	r7, r5
   10d3e:	f841 2b04 	str.w	r2, [r1], #4
   10d42:	ea4f 4323 	mov.w	r3, r3, asr #16
   10d46:	d2e9      	bcs.n	10d1c <quorem+0xc4>
   10d48:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10d4c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10d50:	b96a      	cbnz	r2, 10d6e <quorem+0x116>
   10d52:	3b04      	subs	r3, #4
   10d54:	4598      	cmp	r8, r3
   10d56:	d304      	bcc.n	10d62 <quorem+0x10a>
   10d58:	e007      	b.n	10d6a <quorem+0x112>
   10d5a:	4598      	cmp	r8, r3
   10d5c:	f104 34ff 	add.w	r4, r4, #4294967295
   10d60:	d203      	bcs.n	10d6a <quorem+0x112>
   10d62:	f853 2904 	ldr.w	r2, [r3], #-4
   10d66:	2a00      	cmp	r2, #0
   10d68:	d0f7      	beq.n	10d5a <quorem+0x102>
   10d6a:	f8c9 4010 	str.w	r4, [r9, #16]
   10d6e:	4630      	mov	r0, r6
   10d70:	b003      	add	sp, #12
   10d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d76:	2000      	movs	r0, #0
   10d78:	b003      	add	sp, #12
   10d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d7e:	bf00      	nop

00010d80 <_dtoa_r>:
   10d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d84:	ed2d 8b02 	vpush	{d8}
   10d88:	b08f      	sub	sp, #60	; 0x3c
   10d8a:	ed8d 0b02 	vstr	d0, [sp, #8]
   10d8e:	9101      	str	r1, [sp, #4]
   10d90:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10d92:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10d94:	9305      	str	r3, [sp, #20]
   10d96:	ec57 6b10 	vmov	r6, r7, d0
   10d9a:	4604      	mov	r4, r0
   10d9c:	4693      	mov	fp, r2
   10d9e:	b141      	cbz	r1, 10db2 <_dtoa_r+0x32>
   10da0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   10da2:	604a      	str	r2, [r1, #4]
   10da4:	2301      	movs	r3, #1
   10da6:	4093      	lsls	r3, r2
   10da8:	608b      	str	r3, [r1, #8]
   10daa:	f7fb fe2d 	bl	ca08 <_Bfree>
   10dae:	2300      	movs	r3, #0
   10db0:	63a3      	str	r3, [r4, #56]	; 0x38
   10db2:	f1b7 0800 	subs.w	r8, r7, #0
   10db6:	bfb4      	ite	lt
   10db8:	2301      	movlt	r3, #1
   10dba:	2300      	movge	r3, #0
   10dbc:	602b      	str	r3, [r5, #0]
   10dbe:	4bbe      	ldr	r3, [pc, #760]	; (110b8 <_dtoa_r+0x338>)
   10dc0:	bfbc      	itt	lt
   10dc2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   10dc6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   10dca:	ea33 0308 	bics.w	r3, r3, r8
   10dce:	f000 809f 	beq.w	10f10 <_dtoa_r+0x190>
   10dd2:	ed9d 8b02 	vldr	d8, [sp, #8]
   10dd6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   10dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10dde:	d111      	bne.n	10e04 <_dtoa_r+0x84>
   10de0:	9a05      	ldr	r2, [sp, #20]
   10de2:	2301      	movs	r3, #1
   10de4:	6013      	str	r3, [r2, #0]
   10de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10de8:	2b00      	cmp	r3, #0
   10dea:	f000 823f 	beq.w	1126c <_dtoa_r+0x4ec>
   10dee:	4bb3      	ldr	r3, [pc, #716]	; (110bc <_dtoa_r+0x33c>)
   10df0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10df2:	6013      	str	r3, [r2, #0]
   10df4:	3b01      	subs	r3, #1
   10df6:	9300      	str	r3, [sp, #0]
   10df8:	9800      	ldr	r0, [sp, #0]
   10dfa:	b00f      	add	sp, #60	; 0x3c
   10dfc:	ecbd 8b02 	vpop	{d8}
   10e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e04:	aa0c      	add	r2, sp, #48	; 0x30
   10e06:	a90d      	add	r1, sp, #52	; 0x34
   10e08:	4620      	mov	r0, r4
   10e0a:	eeb0 0b48 	vmov.f64	d0, d8
   10e0e:	f7fc fa13 	bl	d238 <__d2b>
   10e12:	ea5f 5318 	movs.w	r3, r8, lsr #20
   10e16:	4605      	mov	r5, r0
   10e18:	f040 8092 	bne.w	10f40 <_dtoa_r+0x1c0>
   10e1c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   10e20:	440b      	add	r3, r1
   10e22:	f203 4232 	addw	r2, r3, #1074	; 0x432
   10e26:	2a20      	cmp	r2, #32
   10e28:	f340 82fa 	ble.w	11420 <_dtoa_r+0x6a0>
   10e2c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   10e30:	fa08 f802 	lsl.w	r8, r8, r2
   10e34:	f203 4212 	addw	r2, r3, #1042	; 0x412
   10e38:	40d6      	lsrs	r6, r2
   10e3a:	ea48 0206 	orr.w	r2, r8, r6
   10e3e:	ee07 2a10 	vmov	s14, r2
   10e42:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   10e46:	1e58      	subs	r0, r3, #1
   10e48:	ee17 6a90 	vmov	r6, s15
   10e4c:	ec53 2b17 	vmov	r2, r3, d7
   10e50:	f04f 0a01 	mov.w	sl, #1
   10e54:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   10e58:	ed9f 3b91 	vldr	d3, [pc, #580]	; 110a0 <_dtoa_r+0x320>
   10e5c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 110a8 <_dtoa_r+0x328>
   10e60:	ed9f 5b93 	vldr	d5, [pc, #588]	; 110b0 <_dtoa_r+0x330>
   10e64:	ee06 0a90 	vmov	s13, r0
   10e68:	ec43 2b12 	vmov	d2, r2, r3
   10e6c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   10e70:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   10e74:	ee32 6b46 	vsub.f64	d6, d2, d6
   10e78:	eea6 7b03 	vfma.f64	d7, d6, d3
   10e7c:	eea4 7b05 	vfma.f64	d7, d4, d5
   10e80:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   10e84:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e8c:	ee16 7a90 	vmov	r7, s13
   10e90:	d508      	bpl.n	10ea4 <_dtoa_r+0x124>
   10e92:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   10e96:	eeb4 6b47 	vcmp.f64	d6, d7
   10e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e9e:	bf18      	it	ne
   10ea0:	f107 37ff 	addne.w	r7, r7, #4294967295
   10ea4:	2f16      	cmp	r7, #22
   10ea6:	f200 8145 	bhi.w	11134 <_dtoa_r+0x3b4>
   10eaa:	4b85      	ldr	r3, [pc, #532]	; (110c0 <_dtoa_r+0x340>)
   10eac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   10eb0:	ed93 7b00 	vldr	d7, [r3]
   10eb4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   10eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ebc:	d557      	bpl.n	10f6e <_dtoa_r+0x1ee>
   10ebe:	1a09      	subs	r1, r1, r0
   10ec0:	2300      	movs	r3, #0
   10ec2:	f1b1 0801 	subs.w	r8, r1, #1
   10ec6:	f107 37ff 	add.w	r7, r7, #4294967295
   10eca:	930a      	str	r3, [sp, #40]	; 0x28
   10ecc:	f100 8139 	bmi.w	11142 <_dtoa_r+0x3c2>
   10ed0:	2300      	movs	r3, #0
   10ed2:	9306      	str	r3, [sp, #24]
   10ed4:	2f00      	cmp	r7, #0
   10ed6:	da52      	bge.n	10f7e <_dtoa_r+0x1fe>
   10ed8:	9b06      	ldr	r3, [sp, #24]
   10eda:	9704      	str	r7, [sp, #16]
   10edc:	1bdb      	subs	r3, r3, r7
   10ede:	9306      	str	r3, [sp, #24]
   10ee0:	427b      	negs	r3, r7
   10ee2:	9308      	str	r3, [sp, #32]
   10ee4:	9b01      	ldr	r3, [sp, #4]
   10ee6:	2b09      	cmp	r3, #9
   10ee8:	f04f 0700 	mov.w	r7, #0
   10eec:	d84e      	bhi.n	10f8c <_dtoa_r+0x20c>
   10eee:	2b05      	cmp	r3, #5
   10ef0:	f340 829d 	ble.w	1142e <_dtoa_r+0x6ae>
   10ef4:	3b04      	subs	r3, #4
   10ef6:	9301      	str	r3, [sp, #4]
   10ef8:	2600      	movs	r6, #0
   10efa:	9b01      	ldr	r3, [sp, #4]
   10efc:	1e9a      	subs	r2, r3, #2
   10efe:	2a03      	cmp	r2, #3
   10f00:	f200 8125 	bhi.w	1114e <_dtoa_r+0x3ce>
   10f04:	e8df f012 	tbh	[pc, r2, lsl #1]
   10f08:	03a703aa 	.word	0x03a703aa
   10f0c:	037e039d 	.word	0x037e039d
   10f10:	9a05      	ldr	r2, [sp, #20]
   10f12:	f3c8 0813 	ubfx	r8, r8, #0, #20
   10f16:	f242 730f 	movw	r3, #9999	; 0x270f
   10f1a:	ea58 0806 	orrs.w	r8, r8, r6
   10f1e:	6013      	str	r3, [r2, #0]
   10f20:	d11e      	bne.n	10f60 <_dtoa_r+0x1e0>
   10f22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10f24:	2b00      	cmp	r3, #0
   10f26:	f000 8591 	beq.w	11a4c <_dtoa_r+0xccc>
   10f2a:	4b66      	ldr	r3, [pc, #408]	; (110c4 <_dtoa_r+0x344>)
   10f2c:	9300      	str	r3, [sp, #0]
   10f2e:	3308      	adds	r3, #8
   10f30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10f32:	9800      	ldr	r0, [sp, #0]
   10f34:	6013      	str	r3, [r2, #0]
   10f36:	b00f      	add	sp, #60	; 0x3c
   10f38:	ecbd 8b02 	vpop	{d8}
   10f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f40:	ee18 6a90 	vmov	r6, s17
   10f44:	f3c6 0613 	ubfx	r6, r6, #0, #20
   10f48:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   10f4c:	ec53 2b18 	vmov	r2, r3, d8
   10f50:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   10f54:	990c      	ldr	r1, [sp, #48]	; 0x30
   10f56:	f04f 0a00 	mov.w	sl, #0
   10f5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   10f5e:	e77b      	b.n	10e58 <_dtoa_r+0xd8>
   10f60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10f62:	2b00      	cmp	r3, #0
   10f64:	f040 833b 	bne.w	115de <_dtoa_r+0x85e>
   10f68:	4b57      	ldr	r3, [pc, #348]	; (110c8 <_dtoa_r+0x348>)
   10f6a:	9300      	str	r3, [sp, #0]
   10f6c:	e744      	b.n	10df8 <_dtoa_r+0x78>
   10f6e:	1a09      	subs	r1, r1, r0
   10f70:	2300      	movs	r3, #0
   10f72:	f1b1 0801 	subs.w	r8, r1, #1
   10f76:	930a      	str	r3, [sp, #40]	; 0x28
   10f78:	f100 80e3 	bmi.w	11142 <_dtoa_r+0x3c2>
   10f7c:	9306      	str	r3, [sp, #24]
   10f7e:	2300      	movs	r3, #0
   10f80:	9308      	str	r3, [sp, #32]
   10f82:	9b01      	ldr	r3, [sp, #4]
   10f84:	9704      	str	r7, [sp, #16]
   10f86:	2b09      	cmp	r3, #9
   10f88:	44b8      	add	r8, r7
   10f8a:	d9b0      	bls.n	10eee <_dtoa_r+0x16e>
   10f8c:	2300      	movs	r3, #0
   10f8e:	2601      	movs	r6, #1
   10f90:	9301      	str	r3, [sp, #4]
   10f92:	9607      	str	r6, [sp, #28]
   10f94:	f04f 39ff 	mov.w	r9, #4294967295
   10f98:	469b      	mov	fp, r3
   10f9a:	2100      	movs	r1, #0
   10f9c:	63e1      	str	r1, [r4, #60]	; 0x3c
   10f9e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   10fa2:	4620      	mov	r0, r4
   10fa4:	f7fb fd0a 	bl	c9bc <_Balloc>
   10fa8:	9000      	str	r0, [sp, #0]
   10faa:	2800      	cmp	r0, #0
   10fac:	f000 8540 	beq.w	11a30 <_dtoa_r+0xcb0>
   10fb0:	9b00      	ldr	r3, [sp, #0]
   10fb2:	63a3      	str	r3, [r4, #56]	; 0x38
   10fb4:	f1b9 0f0e 	cmp.w	r9, #14
   10fb8:	f200 80dc 	bhi.w	11174 <_dtoa_r+0x3f4>
   10fbc:	2e00      	cmp	r6, #0
   10fbe:	f000 80d9 	beq.w	11174 <_dtoa_r+0x3f4>
   10fc2:	9b04      	ldr	r3, [sp, #16]
   10fc4:	2b00      	cmp	r3, #0
   10fc6:	f340 83de 	ble.w	11786 <_dtoa_r+0xa06>
   10fca:	4a3d      	ldr	r2, [pc, #244]	; (110c0 <_dtoa_r+0x340>)
   10fcc:	f003 010f 	and.w	r1, r3, #15
   10fd0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   10fd4:	ed92 7b00 	vldr	d7, [r2]
   10fd8:	111a      	asrs	r2, r3, #4
   10fda:	05db      	lsls	r3, r3, #23
   10fdc:	f140 8382 	bpl.w	116e4 <_dtoa_r+0x964>
   10fe0:	493a      	ldr	r1, [pc, #232]	; (110cc <_dtoa_r+0x34c>)
   10fe2:	ed91 6b08 	vldr	d6, [r1, #32]
   10fe6:	f002 020f 	and.w	r2, r2, #15
   10fea:	2003      	movs	r0, #3
   10fec:	ee88 5b06 	vdiv.f64	d5, d8, d6
   10ff0:	b15a      	cbz	r2, 1100a <_dtoa_r+0x28a>
   10ff2:	4936      	ldr	r1, [pc, #216]	; (110cc <_dtoa_r+0x34c>)
   10ff4:	07d6      	lsls	r6, r2, #31
   10ff6:	d504      	bpl.n	11002 <_dtoa_r+0x282>
   10ff8:	ed91 6b00 	vldr	d6, [r1]
   10ffc:	3001      	adds	r0, #1
   10ffe:	ee27 7b06 	vmul.f64	d7, d7, d6
   11002:	1052      	asrs	r2, r2, #1
   11004:	f101 0108 	add.w	r1, r1, #8
   11008:	d1f4      	bne.n	10ff4 <_dtoa_r+0x274>
   1100a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1100e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11010:	b13b      	cbz	r3, 11022 <_dtoa_r+0x2a2>
   11012:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11016:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1101e:	f100 84ae 	bmi.w	1197e <_dtoa_r+0xbfe>
   11022:	ee07 0a90 	vmov	s15, r0
   11026:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1102a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1102e:	eea5 7b06 	vfma.f64	d7, d5, d6
   11032:	ee17 2a90 	vmov	r2, s15
   11036:	ec51 0b17 	vmov	r0, r1, d7
   1103a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1103e:	f1b9 0f00 	cmp.w	r9, #0
   11042:	f000 8388 	beq.w	11756 <_dtoa_r+0x9d6>
   11046:	9e04      	ldr	r6, [sp, #16]
   11048:	464a      	mov	r2, r9
   1104a:	9b07      	ldr	r3, [sp, #28]
   1104c:	2b00      	cmp	r3, #0
   1104e:	f000 8447 	beq.w	118e0 <_dtoa_r+0xb60>
   11052:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   11056:	4b1a      	ldr	r3, [pc, #104]	; (110c0 <_dtoa_r+0x340>)
   11058:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1105c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   11060:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   11064:	ee36 7b47 	vsub.f64	d7, d6, d7
   11068:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1106c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   11070:	ec41 0b16 	vmov	d6, r0, r1
   11074:	ee14 0a90 	vmov	r0, s9
   11078:	ee35 5b46 	vsub.f64	d5, d5, d6
   1107c:	9900      	ldr	r1, [sp, #0]
   1107e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11082:	3030      	adds	r0, #48	; 0x30
   11084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11088:	f801 0b01 	strb.w	r0, [r1], #1
   1108c:	f300 84ac 	bgt.w	119e8 <_dtoa_r+0xc68>
   11090:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   11094:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11098:	f04f 0c00 	mov.w	ip, #0
   1109c:	e031      	b.n	11102 <_dtoa_r+0x382>
   1109e:	bf00      	nop
   110a0:	636f4361 	.word	0x636f4361
   110a4:	3fd287a7 	.word	0x3fd287a7
   110a8:	8b60c8b3 	.word	0x8b60c8b3
   110ac:	3fc68a28 	.word	0x3fc68a28
   110b0:	509f79fb 	.word	0x509f79fb
   110b4:	3fd34413 	.word	0x3fd34413
   110b8:	7ff00000 	.word	0x7ff00000
   110bc:	20000d79 	.word	0x20000d79
   110c0:	20000328 	.word	0x20000328
   110c4:	20000cb0 	.word	0x20000cb0
   110c8:	20000cbc 	.word	0x20000cbc
   110cc:	20000300 	.word	0x20000300
   110d0:	f10c 0c01 	add.w	ip, ip, #1
   110d4:	4594      	cmp	ip, r2
   110d6:	da4d      	bge.n	11174 <_dtoa_r+0x3f4>
   110d8:	ee27 7b04 	vmul.f64	d7, d7, d4
   110dc:	ee25 5b04 	vmul.f64	d5, d5, d4
   110e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   110e4:	ee16 3a90 	vmov	r3, s13
   110e8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   110ec:	3330      	adds	r3, #48	; 0x30
   110ee:	ee37 7b43 	vsub.f64	d7, d7, d3
   110f2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   110f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110fa:	f801 3b01 	strb.w	r3, [r1], #1
   110fe:	f100 8473 	bmi.w	119e8 <_dtoa_r+0xc68>
   11102:	ee32 6b47 	vsub.f64	d6, d2, d7
   11106:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1110e:	d5df      	bpl.n	110d0 <_dtoa_r+0x350>
   11110:	9a00      	ldr	r2, [sp, #0]
   11112:	9604      	str	r6, [sp, #16]
   11114:	e002      	b.n	1111c <_dtoa_r+0x39c>
   11116:	428a      	cmp	r2, r1
   11118:	f000 8450 	beq.w	119bc <_dtoa_r+0xc3c>
   1111c:	4689      	mov	r9, r1
   1111e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   11122:	2b39      	cmp	r3, #57	; 0x39
   11124:	d0f7      	beq.n	11116 <_dtoa_r+0x396>
   11126:	3301      	adds	r3, #1
   11128:	b2db      	uxtb	r3, r3
   1112a:	700b      	strb	r3, [r1, #0]
   1112c:	9b04      	ldr	r3, [sp, #16]
   1112e:	3301      	adds	r3, #1
   11130:	9304      	str	r3, [sp, #16]
   11132:	e155      	b.n	113e0 <_dtoa_r+0x660>
   11134:	1a09      	subs	r1, r1, r0
   11136:	2301      	movs	r3, #1
   11138:	f1b1 0801 	subs.w	r8, r1, #1
   1113c:	930a      	str	r3, [sp, #40]	; 0x28
   1113e:	f57f aec7 	bpl.w	10ed0 <_dtoa_r+0x150>
   11142:	f1c1 0301 	rsb	r3, r1, #1
   11146:	9306      	str	r3, [sp, #24]
   11148:	f04f 0800 	mov.w	r8, #0
   1114c:	e6c2      	b.n	10ed4 <_dtoa_r+0x154>
   1114e:	2600      	movs	r6, #0
   11150:	63e6      	str	r6, [r4, #60]	; 0x3c
   11152:	4631      	mov	r1, r6
   11154:	4620      	mov	r0, r4
   11156:	f7fb fc31 	bl	c9bc <_Balloc>
   1115a:	9000      	str	r0, [sp, #0]
   1115c:	2800      	cmp	r0, #0
   1115e:	f000 8467 	beq.w	11a30 <_dtoa_r+0xcb0>
   11162:	9b00      	ldr	r3, [sp, #0]
   11164:	63a3      	str	r3, [r4, #56]	; 0x38
   11166:	f04f 33ff 	mov.w	r3, #4294967295
   1116a:	930b      	str	r3, [sp, #44]	; 0x2c
   1116c:	4699      	mov	r9, r3
   1116e:	2301      	movs	r3, #1
   11170:	46b3      	mov	fp, r6
   11172:	9307      	str	r3, [sp, #28]
   11174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11176:	2a00      	cmp	r2, #0
   11178:	db55      	blt.n	11226 <_dtoa_r+0x4a6>
   1117a:	9904      	ldr	r1, [sp, #16]
   1117c:	290e      	cmp	r1, #14
   1117e:	dc52      	bgt.n	11226 <_dtoa_r+0x4a6>
   11180:	4bb7      	ldr	r3, [pc, #732]	; (11460 <_dtoa_r+0x6e0>)
   11182:	f1bb 0f00 	cmp.w	fp, #0
   11186:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1118a:	ed93 6b00 	vldr	d6, [r3]
   1118e:	da15      	bge.n	111bc <_dtoa_r+0x43c>
   11190:	f1b9 0f00 	cmp.w	r9, #0
   11194:	dc12      	bgt.n	111bc <_dtoa_r+0x43c>
   11196:	f040 82f2 	bne.w	1177e <_dtoa_r+0x9fe>
   1119a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1119e:	ee26 7b07 	vmul.f64	d7, d6, d7
   111a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   111a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   111aa:	46ca      	mov	sl, r9
   111ac:	464e      	mov	r6, r9
   111ae:	f200 826d 	bhi.w	1168c <_dtoa_r+0x90c>
   111b2:	f8dd 8000 	ldr.w	r8, [sp]
   111b6:	ea6f 0b0b 	mvn.w	fp, fp
   111ba:	e270      	b.n	1169e <_dtoa_r+0x91e>
   111bc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   111c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   111c4:	9900      	ldr	r1, [sp, #0]
   111c6:	ee17 3a10 	vmov	r3, s14
   111ca:	f1b9 0f01 	cmp.w	r9, #1
   111ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
   111d2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   111d6:	f801 3b01 	strb.w	r3, [r1], #1
   111da:	eea5 8b46 	vfms.f64	d8, d5, d6
   111de:	f000 8334 	beq.w	1184a <_dtoa_r+0xaca>
   111e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   111e6:	2301      	movs	r3, #1
   111e8:	e011      	b.n	1120e <_dtoa_r+0x48e>
   111ea:	ee88 7b06 	vdiv.f64	d7, d8, d6
   111ee:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   111f2:	3301      	adds	r3, #1
   111f4:	ee17 2a10 	vmov	r2, s14
   111f8:	454b      	cmp	r3, r9
   111fa:	f102 0230 	add.w	r2, r2, #48	; 0x30
   111fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   11202:	f801 2b01 	strb.w	r2, [r1], #1
   11206:	eea5 8b46 	vfms.f64	d8, d5, d6
   1120a:	f000 831e 	beq.w	1184a <_dtoa_r+0xaca>
   1120e:	ee28 8b04 	vmul.f64	d8, d8, d4
   11212:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1121a:	d1e6      	bne.n	111ea <_dtoa_r+0x46a>
   1121c:	9b04      	ldr	r3, [sp, #16]
   1121e:	3301      	adds	r3, #1
   11220:	9304      	str	r3, [sp, #16]
   11222:	4689      	mov	r9, r1
   11224:	e0dc      	b.n	113e0 <_dtoa_r+0x660>
   11226:	9b07      	ldr	r3, [sp, #28]
   11228:	b343      	cbz	r3, 1127c <_dtoa_r+0x4fc>
   1122a:	9b01      	ldr	r3, [sp, #4]
   1122c:	2b01      	cmp	r3, #1
   1122e:	f340 8276 	ble.w	1171e <_dtoa_r+0x99e>
   11232:	9b08      	ldr	r3, [sp, #32]
   11234:	f109 3aff 	add.w	sl, r9, #4294967295
   11238:	4553      	cmp	r3, sl
   1123a:	f280 823f 	bge.w	116bc <_dtoa_r+0x93c>
   1123e:	9b08      	ldr	r3, [sp, #32]
   11240:	f8cd a020 	str.w	sl, [sp, #32]
   11244:	ebaa 0203 	sub.w	r2, sl, r3
   11248:	4417      	add	r7, r2
   1124a:	f04f 0a00 	mov.w	sl, #0
   1124e:	f1b9 0f00 	cmp.w	r9, #0
   11252:	f2c0 8325 	blt.w	118a0 <_dtoa_r+0xb20>
   11256:	9b06      	ldr	r3, [sp, #24]
   11258:	9309      	str	r3, [sp, #36]	; 0x24
   1125a:	444b      	add	r3, r9
   1125c:	44c8      	add	r8, r9
   1125e:	9306      	str	r3, [sp, #24]
   11260:	2101      	movs	r1, #1
   11262:	4620      	mov	r0, r4
   11264:	f7fb fcd4 	bl	cc10 <__i2b>
   11268:	4606      	mov	r6, r0
   1126a:	e00c      	b.n	11286 <_dtoa_r+0x506>
   1126c:	4b7d      	ldr	r3, [pc, #500]	; (11464 <_dtoa_r+0x6e4>)
   1126e:	9300      	str	r3, [sp, #0]
   11270:	9800      	ldr	r0, [sp, #0]
   11272:	b00f      	add	sp, #60	; 0x3c
   11274:	ecbd 8b02 	vpop	{d8}
   11278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1127c:	9b06      	ldr	r3, [sp, #24]
   1127e:	f8dd a020 	ldr.w	sl, [sp, #32]
   11282:	9e07      	ldr	r6, [sp, #28]
   11284:	9309      	str	r3, [sp, #36]	; 0x24
   11286:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11288:	b16b      	cbz	r3, 112a6 <_dtoa_r+0x526>
   1128a:	f1b8 0f00 	cmp.w	r8, #0
   1128e:	dd0a      	ble.n	112a6 <_dtoa_r+0x526>
   11290:	4543      	cmp	r3, r8
   11292:	9906      	ldr	r1, [sp, #24]
   11294:	461a      	mov	r2, r3
   11296:	bfa8      	it	ge
   11298:	4642      	movge	r2, r8
   1129a:	1a89      	subs	r1, r1, r2
   1129c:	1a9b      	subs	r3, r3, r2
   1129e:	9106      	str	r1, [sp, #24]
   112a0:	9309      	str	r3, [sp, #36]	; 0x24
   112a2:	eba8 0802 	sub.w	r8, r8, r2
   112a6:	9b08      	ldr	r3, [sp, #32]
   112a8:	b163      	cbz	r3, 112c4 <_dtoa_r+0x544>
   112aa:	9b07      	ldr	r3, [sp, #28]
   112ac:	2b00      	cmp	r3, #0
   112ae:	f000 82a7 	beq.w	11800 <_dtoa_r+0xa80>
   112b2:	f1ba 0f00 	cmp.w	sl, #0
   112b6:	f300 8204 	bgt.w	116c2 <_dtoa_r+0x942>
   112ba:	9b08      	ldr	r3, [sp, #32]
   112bc:	ebb3 020a 	subs.w	r2, r3, sl
   112c0:	f040 82ff 	bne.w	118c2 <_dtoa_r+0xb42>
   112c4:	2101      	movs	r1, #1
   112c6:	4620      	mov	r0, r4
   112c8:	f7fb fca2 	bl	cc10 <__i2b>
   112cc:	2f00      	cmp	r7, #0
   112ce:	4682      	mov	sl, r0
   112d0:	f300 80af 	bgt.w	11432 <_dtoa_r+0x6b2>
   112d4:	9b01      	ldr	r3, [sp, #4]
   112d6:	2b01      	cmp	r3, #1
   112d8:	f340 8187 	ble.w	115ea <_dtoa_r+0x86a>
   112dc:	2300      	movs	r3, #0
   112de:	9308      	str	r3, [sp, #32]
   112e0:	2001      	movs	r0, #1
   112e2:	2f00      	cmp	r7, #0
   112e4:	f040 80b1 	bne.w	1144a <_dtoa_r+0x6ca>
   112e8:	4440      	add	r0, r8
   112ea:	f010 001f 	ands.w	r0, r0, #31
   112ee:	f000 817a 	beq.w	115e6 <_dtoa_r+0x866>
   112f2:	f1c0 0220 	rsb	r2, r0, #32
   112f6:	2a04      	cmp	r2, #4
   112f8:	f300 8088 	bgt.w	1140c <_dtoa_r+0x68c>
   112fc:	f040 81f6 	bne.w	116ec <_dtoa_r+0x96c>
   11300:	9b06      	ldr	r3, [sp, #24]
   11302:	2b00      	cmp	r3, #0
   11304:	dd05      	ble.n	11312 <_dtoa_r+0x592>
   11306:	4629      	mov	r1, r5
   11308:	461a      	mov	r2, r3
   1130a:	4620      	mov	r0, r4
   1130c:	f7fb fdbc 	bl	ce88 <__lshift>
   11310:	4605      	mov	r5, r0
   11312:	f1b8 0f00 	cmp.w	r8, #0
   11316:	dd05      	ble.n	11324 <_dtoa_r+0x5a4>
   11318:	4651      	mov	r1, sl
   1131a:	4642      	mov	r2, r8
   1131c:	4620      	mov	r0, r4
   1131e:	f7fb fdb3 	bl	ce88 <__lshift>
   11322:	4682      	mov	sl, r0
   11324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11326:	2b00      	cmp	r3, #0
   11328:	f040 813f 	bne.w	115aa <_dtoa_r+0x82a>
   1132c:	f1b9 0f00 	cmp.w	r9, #0
   11330:	f340 8125 	ble.w	1157e <_dtoa_r+0x7fe>
   11334:	9b07      	ldr	r3, [sp, #28]
   11336:	2b00      	cmp	r3, #0
   11338:	f040 80a3 	bne.w	11482 <_dtoa_r+0x702>
   1133c:	9b04      	ldr	r3, [sp, #16]
   1133e:	3301      	adds	r3, #1
   11340:	9304      	str	r3, [sp, #16]
   11342:	f8dd 8000 	ldr.w	r8, [sp]
   11346:	2701      	movs	r7, #1
   11348:	e007      	b.n	1135a <_dtoa_r+0x5da>
   1134a:	4629      	mov	r1, r5
   1134c:	2300      	movs	r3, #0
   1134e:	220a      	movs	r2, #10
   11350:	4620      	mov	r0, r4
   11352:	f7fb fb63 	bl	ca1c <__multadd>
   11356:	3701      	adds	r7, #1
   11358:	4605      	mov	r5, r0
   1135a:	4651      	mov	r1, sl
   1135c:	4628      	mov	r0, r5
   1135e:	f7ff fc7b 	bl	10c58 <quorem>
   11362:	45b9      	cmp	r9, r7
   11364:	f100 0030 	add.w	r0, r0, #48	; 0x30
   11368:	f808 0b01 	strb.w	r0, [r8], #1
   1136c:	dced      	bgt.n	1134a <_dtoa_r+0x5ca>
   1136e:	f1b9 0f00 	cmp.w	r9, #0
   11372:	9a00      	ldr	r2, [sp, #0]
   11374:	bfcc      	ite	gt
   11376:	46cb      	movgt	fp, r9
   11378:	f04f 0b01 	movle.w	fp, #1
   1137c:	4603      	mov	r3, r0
   1137e:	4493      	add	fp, r2
   11380:	2700      	movs	r7, #0
   11382:	4629      	mov	r1, r5
   11384:	2201      	movs	r2, #1
   11386:	4620      	mov	r0, r4
   11388:	9301      	str	r3, [sp, #4]
   1138a:	f7fb fd7d 	bl	ce88 <__lshift>
   1138e:	4651      	mov	r1, sl
   11390:	4605      	mov	r5, r0
   11392:	f7fb fdf1 	bl	cf78 <__mcmp>
   11396:	2800      	cmp	r0, #0
   11398:	f340 81af 	ble.w	116fa <_dtoa_r+0x97a>
   1139c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   113a0:	9a00      	ldr	r2, [sp, #0]
   113a2:	f10b 3bff 	add.w	fp, fp, #4294967295
   113a6:	e004      	b.n	113b2 <_dtoa_r+0x632>
   113a8:	455a      	cmp	r2, fp
   113aa:	f000 81b1 	beq.w	11710 <_dtoa_r+0x990>
   113ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   113b2:	2b39      	cmp	r3, #57	; 0x39
   113b4:	f10b 0901 	add.w	r9, fp, #1
   113b8:	d0f6      	beq.n	113a8 <_dtoa_r+0x628>
   113ba:	3301      	adds	r3, #1
   113bc:	f88b 3000 	strb.w	r3, [fp]
   113c0:	4651      	mov	r1, sl
   113c2:	4620      	mov	r0, r4
   113c4:	f7fb fb20 	bl	ca08 <_Bfree>
   113c8:	b156      	cbz	r6, 113e0 <_dtoa_r+0x660>
   113ca:	b12f      	cbz	r7, 113d8 <_dtoa_r+0x658>
   113cc:	42b7      	cmp	r7, r6
   113ce:	d003      	beq.n	113d8 <_dtoa_r+0x658>
   113d0:	4639      	mov	r1, r7
   113d2:	4620      	mov	r0, r4
   113d4:	f7fb fb18 	bl	ca08 <_Bfree>
   113d8:	4631      	mov	r1, r6
   113da:	4620      	mov	r0, r4
   113dc:	f7fb fb14 	bl	ca08 <_Bfree>
   113e0:	4629      	mov	r1, r5
   113e2:	4620      	mov	r0, r4
   113e4:	f7fb fb10 	bl	ca08 <_Bfree>
   113e8:	2300      	movs	r3, #0
   113ea:	f889 3000 	strb.w	r3, [r9]
   113ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   113f2:	601a      	str	r2, [r3, #0]
   113f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   113f6:	2b00      	cmp	r3, #0
   113f8:	f43f acfe 	beq.w	10df8 <_dtoa_r+0x78>
   113fc:	9800      	ldr	r0, [sp, #0]
   113fe:	f8c3 9000 	str.w	r9, [r3]
   11402:	b00f      	add	sp, #60	; 0x3c
   11404:	ecbd 8b02 	vpop	{d8}
   11408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1140c:	f1c0 001c 	rsb	r0, r0, #28
   11410:	9b06      	ldr	r3, [sp, #24]
   11412:	4403      	add	r3, r0
   11414:	9306      	str	r3, [sp, #24]
   11416:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11418:	4403      	add	r3, r0
   1141a:	9309      	str	r3, [sp, #36]	; 0x24
   1141c:	4480      	add	r8, r0
   1141e:	e76f      	b.n	11300 <_dtoa_r+0x580>
   11420:	f1c2 0220 	rsb	r2, r2, #32
   11424:	fa06 f202 	lsl.w	r2, r6, r2
   11428:	ee07 2a10 	vmov	s14, r2
   1142c:	e509      	b.n	10e42 <_dtoa_r+0xc2>
   1142e:	2601      	movs	r6, #1
   11430:	e563      	b.n	10efa <_dtoa_r+0x17a>
   11432:	4601      	mov	r1, r0
   11434:	463a      	mov	r2, r7
   11436:	4620      	mov	r0, r4
   11438:	f7fb fcc6 	bl	cdc8 <__pow5mult>
   1143c:	9b01      	ldr	r3, [sp, #4]
   1143e:	2b01      	cmp	r3, #1
   11440:	4682      	mov	sl, r0
   11442:	f340 81c5 	ble.w	117d0 <_dtoa_r+0xa50>
   11446:	2300      	movs	r3, #0
   11448:	9308      	str	r3, [sp, #32]
   1144a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1144e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   11452:	6910      	ldr	r0, [r2, #16]
   11454:	f7fb fb8c 	bl	cb70 <__hi0bits>
   11458:	f1c0 0020 	rsb	r0, r0, #32
   1145c:	e744      	b.n	112e8 <_dtoa_r+0x568>
   1145e:	bf00      	nop
   11460:	20000328 	.word	0x20000328
   11464:	20000d78 	.word	0x20000d78
   11468:	4631      	mov	r1, r6
   1146a:	2300      	movs	r3, #0
   1146c:	220a      	movs	r2, #10
   1146e:	4620      	mov	r0, r4
   11470:	f7fb fad4 	bl	ca1c <__multadd>
   11474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11476:	2b00      	cmp	r3, #0
   11478:	4606      	mov	r6, r0
   1147a:	f340 82ce 	ble.w	11a1a <_dtoa_r+0xc9a>
   1147e:	9704      	str	r7, [sp, #16]
   11480:	4699      	mov	r9, r3
   11482:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11484:	2b00      	cmp	r3, #0
   11486:	dd05      	ble.n	11494 <_dtoa_r+0x714>
   11488:	4631      	mov	r1, r6
   1148a:	461a      	mov	r2, r3
   1148c:	4620      	mov	r0, r4
   1148e:	f7fb fcfb 	bl	ce88 <__lshift>
   11492:	4606      	mov	r6, r0
   11494:	9b08      	ldr	r3, [sp, #32]
   11496:	2b00      	cmp	r3, #0
   11498:	f040 81eb 	bne.w	11872 <_dtoa_r+0xaf2>
   1149c:	46b0      	mov	r8, r6
   1149e:	9b02      	ldr	r3, [sp, #8]
   114a0:	9f00      	ldr	r7, [sp, #0]
   114a2:	f003 0201 	and.w	r2, r3, #1
   114a6:	1e7b      	subs	r3, r7, #1
   114a8:	444b      	add	r3, r9
   114aa:	9308      	str	r3, [sp, #32]
   114ac:	9b01      	ldr	r3, [sp, #4]
   114ae:	920a      	str	r2, [sp, #40]	; 0x28
   114b0:	4313      	orrs	r3, r2
   114b2:	9309      	str	r3, [sp, #36]	; 0x24
   114b4:	4651      	mov	r1, sl
   114b6:	4628      	mov	r0, r5
   114b8:	f7ff fbce 	bl	10c58 <quorem>
   114bc:	4631      	mov	r1, r6
   114be:	4683      	mov	fp, r0
   114c0:	4628      	mov	r0, r5
   114c2:	f7fb fd59 	bl	cf78 <__mcmp>
   114c6:	4642      	mov	r2, r8
   114c8:	4651      	mov	r1, sl
   114ca:	4681      	mov	r9, r0
   114cc:	4620      	mov	r0, r4
   114ce:	f7fb fd75 	bl	cfbc <__mdiff>
   114d2:	68c2      	ldr	r2, [r0, #12]
   114d4:	4601      	mov	r1, r0
   114d6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   114da:	2a00      	cmp	r2, #0
   114dc:	d142      	bne.n	11564 <_dtoa_r+0x7e4>
   114de:	e9cd 0306 	strd	r0, r3, [sp, #24]
   114e2:	4628      	mov	r0, r5
   114e4:	f7fb fd48 	bl	cf78 <__mcmp>
   114e8:	9906      	ldr	r1, [sp, #24]
   114ea:	9002      	str	r0, [sp, #8]
   114ec:	4620      	mov	r0, r4
   114ee:	f7fb fa8b 	bl	ca08 <_Bfree>
   114f2:	9a02      	ldr	r2, [sp, #8]
   114f4:	9b07      	ldr	r3, [sp, #28]
   114f6:	b91a      	cbnz	r2, 11500 <_dtoa_r+0x780>
   114f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   114fa:	2900      	cmp	r1, #0
   114fc:	f000 827e 	beq.w	119fc <_dtoa_r+0xc7c>
   11500:	f1b9 0f00 	cmp.w	r9, #0
   11504:	f2c0 8183 	blt.w	1180e <_dtoa_r+0xa8e>
   11508:	9901      	ldr	r1, [sp, #4]
   1150a:	ea49 0901 	orr.w	r9, r9, r1
   1150e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11510:	ea51 0909 	orrs.w	r9, r1, r9
   11514:	f000 817b 	beq.w	1180e <_dtoa_r+0xa8e>
   11518:	2a00      	cmp	r2, #0
   1151a:	f300 81c6 	bgt.w	118aa <_dtoa_r+0xb2a>
   1151e:	9a08      	ldr	r2, [sp, #32]
   11520:	703b      	strb	r3, [r7, #0]
   11522:	f107 0901 	add.w	r9, r7, #1
   11526:	4297      	cmp	r7, r2
   11528:	46cb      	mov	fp, r9
   1152a:	f000 81c4 	beq.w	118b6 <_dtoa_r+0xb36>
   1152e:	4629      	mov	r1, r5
   11530:	2300      	movs	r3, #0
   11532:	220a      	movs	r2, #10
   11534:	4620      	mov	r0, r4
   11536:	f7fb fa71 	bl	ca1c <__multadd>
   1153a:	4546      	cmp	r6, r8
   1153c:	4605      	mov	r5, r0
   1153e:	4631      	mov	r1, r6
   11540:	f04f 0300 	mov.w	r3, #0
   11544:	f04f 020a 	mov.w	r2, #10
   11548:	4620      	mov	r0, r4
   1154a:	d012      	beq.n	11572 <_dtoa_r+0x7f2>
   1154c:	f7fb fa66 	bl	ca1c <__multadd>
   11550:	4641      	mov	r1, r8
   11552:	4606      	mov	r6, r0
   11554:	2300      	movs	r3, #0
   11556:	220a      	movs	r2, #10
   11558:	4620      	mov	r0, r4
   1155a:	f7fb fa5f 	bl	ca1c <__multadd>
   1155e:	464f      	mov	r7, r9
   11560:	4680      	mov	r8, r0
   11562:	e7a7      	b.n	114b4 <_dtoa_r+0x734>
   11564:	4620      	mov	r0, r4
   11566:	9302      	str	r3, [sp, #8]
   11568:	f7fb fa4e 	bl	ca08 <_Bfree>
   1156c:	9b02      	ldr	r3, [sp, #8]
   1156e:	2201      	movs	r2, #1
   11570:	e7c6      	b.n	11500 <_dtoa_r+0x780>
   11572:	f7fb fa53 	bl	ca1c <__multadd>
   11576:	464f      	mov	r7, r9
   11578:	4606      	mov	r6, r0
   1157a:	4680      	mov	r8, r0
   1157c:	e79a      	b.n	114b4 <_dtoa_r+0x734>
   1157e:	9b01      	ldr	r3, [sp, #4]
   11580:	2b02      	cmp	r3, #2
   11582:	dc71      	bgt.n	11668 <_dtoa_r+0x8e8>
   11584:	9b07      	ldr	r3, [sp, #28]
   11586:	2b00      	cmp	r3, #0
   11588:	f47f af7b 	bne.w	11482 <_dtoa_r+0x702>
   1158c:	9b04      	ldr	r3, [sp, #16]
   1158e:	4651      	mov	r1, sl
   11590:	3301      	adds	r3, #1
   11592:	4628      	mov	r0, r5
   11594:	9304      	str	r3, [sp, #16]
   11596:	f7ff fb5f 	bl	10c58 <quorem>
   1159a:	f8dd b000 	ldr.w	fp, [sp]
   1159e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   115a2:	f80b 3b01 	strb.w	r3, [fp], #1
   115a6:	2700      	movs	r7, #0
   115a8:	e6eb      	b.n	11382 <_dtoa_r+0x602>
   115aa:	4651      	mov	r1, sl
   115ac:	4628      	mov	r0, r5
   115ae:	f7fb fce3 	bl	cf78 <__mcmp>
   115b2:	2800      	cmp	r0, #0
   115b4:	f6bf aeba 	bge.w	1132c <_dtoa_r+0x5ac>
   115b8:	4629      	mov	r1, r5
   115ba:	2300      	movs	r3, #0
   115bc:	220a      	movs	r2, #10
   115be:	4620      	mov	r0, r4
   115c0:	f7fb fa2c 	bl	ca1c <__multadd>
   115c4:	9b04      	ldr	r3, [sp, #16]
   115c6:	1e5f      	subs	r7, r3, #1
   115c8:	9b07      	ldr	r3, [sp, #28]
   115ca:	4605      	mov	r5, r0
   115cc:	2b00      	cmp	r3, #0
   115ce:	f47f af4b 	bne.w	11468 <_dtoa_r+0x6e8>
   115d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   115d4:	2b00      	cmp	r3, #0
   115d6:	f340 8218 	ble.w	11a0a <_dtoa_r+0xc8a>
   115da:	4699      	mov	r9, r3
   115dc:	e6b1      	b.n	11342 <_dtoa_r+0x5c2>
   115de:	4bbc      	ldr	r3, [pc, #752]	; (118d0 <_dtoa_r+0xb50>)
   115e0:	9300      	str	r3, [sp, #0]
   115e2:	3303      	adds	r3, #3
   115e4:	e4a4      	b.n	10f30 <_dtoa_r+0x1b0>
   115e6:	201c      	movs	r0, #28
   115e8:	e712      	b.n	11410 <_dtoa_r+0x690>
   115ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   115ee:	2800      	cmp	r0, #0
   115f0:	f47f ae74 	bne.w	112dc <_dtoa_r+0x55c>
   115f4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   115f8:	2a00      	cmp	r2, #0
   115fa:	f000 80f4 	beq.w	117e6 <_dtoa_r+0xa66>
   115fe:	9b02      	ldr	r3, [sp, #8]
   11600:	9308      	str	r3, [sp, #32]
   11602:	e66d      	b.n	112e0 <_dtoa_r+0x560>
   11604:	2301      	movs	r3, #1
   11606:	9307      	str	r3, [sp, #28]
   11608:	9b04      	ldr	r3, [sp, #16]
   1160a:	445b      	add	r3, fp
   1160c:	f103 0901 	add.w	r9, r3, #1
   11610:	f1b9 0f01 	cmp.w	r9, #1
   11614:	46cc      	mov	ip, r9
   11616:	930b      	str	r3, [sp, #44]	; 0x2c
   11618:	bfb8      	it	lt
   1161a:	f04f 0c01 	movlt.w	ip, #1
   1161e:	2100      	movs	r1, #0
   11620:	f1bc 0f17 	cmp.w	ip, #23
   11624:	63e1      	str	r1, [r4, #60]	; 0x3c
   11626:	f77f acbc 	ble.w	10fa2 <_dtoa_r+0x222>
   1162a:	2001      	movs	r0, #1
   1162c:	2204      	movs	r2, #4
   1162e:	0052      	lsls	r2, r2, #1
   11630:	f102 0314 	add.w	r3, r2, #20
   11634:	4563      	cmp	r3, ip
   11636:	4601      	mov	r1, r0
   11638:	f100 0001 	add.w	r0, r0, #1
   1163c:	d9f7      	bls.n	1162e <_dtoa_r+0x8ae>
   1163e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11640:	e4af      	b.n	10fa2 <_dtoa_r+0x222>
   11642:	2301      	movs	r3, #1
   11644:	9307      	str	r3, [sp, #28]
   11646:	f1bb 0f00 	cmp.w	fp, #0
   1164a:	dd52      	ble.n	116f2 <_dtoa_r+0x972>
   1164c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   11650:	46d9      	mov	r9, fp
   11652:	46dc      	mov	ip, fp
   11654:	e7e3      	b.n	1161e <_dtoa_r+0x89e>
   11656:	2300      	movs	r3, #0
   11658:	9307      	str	r3, [sp, #28]
   1165a:	e7d5      	b.n	11608 <_dtoa_r+0x888>
   1165c:	2300      	movs	r3, #0
   1165e:	9307      	str	r3, [sp, #28]
   11660:	e7f1      	b.n	11646 <_dtoa_r+0x8c6>
   11662:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11666:	9704      	str	r7, [sp, #16]
   11668:	f1b9 0f00 	cmp.w	r9, #0
   1166c:	f47f ada1 	bne.w	111b2 <_dtoa_r+0x432>
   11670:	4651      	mov	r1, sl
   11672:	464b      	mov	r3, r9
   11674:	2205      	movs	r2, #5
   11676:	4620      	mov	r0, r4
   11678:	f7fb f9d0 	bl	ca1c <__multadd>
   1167c:	4601      	mov	r1, r0
   1167e:	4682      	mov	sl, r0
   11680:	4628      	mov	r0, r5
   11682:	f7fb fc79 	bl	cf78 <__mcmp>
   11686:	2800      	cmp	r0, #0
   11688:	f77f ad93 	ble.w	111b2 <_dtoa_r+0x432>
   1168c:	9b04      	ldr	r3, [sp, #16]
   1168e:	f103 0b01 	add.w	fp, r3, #1
   11692:	9b00      	ldr	r3, [sp, #0]
   11694:	2231      	movs	r2, #49	; 0x31
   11696:	4698      	mov	r8, r3
   11698:	f803 2b01 	strb.w	r2, [r3], #1
   1169c:	9300      	str	r3, [sp, #0]
   1169e:	4651      	mov	r1, sl
   116a0:	4620      	mov	r0, r4
   116a2:	f7fb f9b1 	bl	ca08 <_Bfree>
   116a6:	f10b 0301 	add.w	r3, fp, #1
   116aa:	f8dd 9000 	ldr.w	r9, [sp]
   116ae:	9304      	str	r3, [sp, #16]
   116b0:	f8cd 8000 	str.w	r8, [sp]
   116b4:	2e00      	cmp	r6, #0
   116b6:	f47f ae8f 	bne.w	113d8 <_dtoa_r+0x658>
   116ba:	e691      	b.n	113e0 <_dtoa_r+0x660>
   116bc:	eba3 0a0a 	sub.w	sl, r3, sl
   116c0:	e5c5      	b.n	1124e <_dtoa_r+0x4ce>
   116c2:	4631      	mov	r1, r6
   116c4:	4652      	mov	r2, sl
   116c6:	4620      	mov	r0, r4
   116c8:	f7fb fb7e 	bl	cdc8 <__pow5mult>
   116cc:	462a      	mov	r2, r5
   116ce:	4601      	mov	r1, r0
   116d0:	4606      	mov	r6, r0
   116d2:	4620      	mov	r0, r4
   116d4:	f7fb faca 	bl	cc6c <__multiply>
   116d8:	4629      	mov	r1, r5
   116da:	4605      	mov	r5, r0
   116dc:	4620      	mov	r0, r4
   116de:	f7fb f993 	bl	ca08 <_Bfree>
   116e2:	e5ea      	b.n	112ba <_dtoa_r+0x53a>
   116e4:	2002      	movs	r0, #2
   116e6:	eeb0 5b48 	vmov.f64	d5, d8
   116ea:	e481      	b.n	10ff0 <_dtoa_r+0x270>
   116ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   116f0:	e68e      	b.n	11410 <_dtoa_r+0x690>
   116f2:	f04f 0b01 	mov.w	fp, #1
   116f6:	46d9      	mov	r9, fp
   116f8:	e44f      	b.n	10f9a <_dtoa_r+0x21a>
   116fa:	d103      	bne.n	11704 <_dtoa_r+0x984>
   116fc:	9b01      	ldr	r3, [sp, #4]
   116fe:	07db      	lsls	r3, r3, #31
   11700:	f53f ae4c 	bmi.w	1139c <_dtoa_r+0x61c>
   11704:	46d9      	mov	r9, fp
   11706:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1170a:	2b30      	cmp	r3, #48	; 0x30
   1170c:	d0fa      	beq.n	11704 <_dtoa_r+0x984>
   1170e:	e657      	b.n	113c0 <_dtoa_r+0x640>
   11710:	9b04      	ldr	r3, [sp, #16]
   11712:	9a00      	ldr	r2, [sp, #0]
   11714:	3301      	adds	r3, #1
   11716:	9304      	str	r3, [sp, #16]
   11718:	2331      	movs	r3, #49	; 0x31
   1171a:	7013      	strb	r3, [r2, #0]
   1171c:	e650      	b.n	113c0 <_dtoa_r+0x640>
   1171e:	f1ba 0f00 	cmp.w	sl, #0
   11722:	f000 8123 	beq.w	1196c <_dtoa_r+0xbec>
   11726:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1172a:	9b06      	ldr	r3, [sp, #24]
   1172c:	9309      	str	r3, [sp, #36]	; 0x24
   1172e:	4413      	add	r3, r2
   11730:	f8dd a020 	ldr.w	sl, [sp, #32]
   11734:	9306      	str	r3, [sp, #24]
   11736:	4490      	add	r8, r2
   11738:	e592      	b.n	11260 <_dtoa_r+0x4e0>
   1173a:	ee07 0a90 	vmov	s15, r0
   1173e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   11742:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   11746:	eea6 5b07 	vfma.f64	d5, d6, d7
   1174a:	ee15 2a90 	vmov	r2, s11
   1174e:	ec51 0b15 	vmov	r0, r1, d5
   11752:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   11756:	ec41 0b15 	vmov	d5, r0, r1
   1175a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1175e:	ee36 7b47 	vsub.f64	d7, d6, d7
   11762:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1176a:	f300 8137 	bgt.w	119dc <_dtoa_r+0xc5c>
   1176e:	eeb1 5b45 	vneg.f64	d5, d5
   11772:	eeb4 7bc5 	vcmpe.f64	d7, d5
   11776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1177a:	f57f acfb 	bpl.w	11174 <_dtoa_r+0x3f4>
   1177e:	f04f 0a00 	mov.w	sl, #0
   11782:	4656      	mov	r6, sl
   11784:	e515      	b.n	111b2 <_dtoa_r+0x432>
   11786:	f000 80f5 	beq.w	11974 <_dtoa_r+0xbf4>
   1178a:	9b04      	ldr	r3, [sp, #16]
   1178c:	4951      	ldr	r1, [pc, #324]	; (118d4 <_dtoa_r+0xb54>)
   1178e:	425a      	negs	r2, r3
   11790:	f002 000f 	and.w	r0, r2, #15
   11794:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11798:	ed91 6b00 	vldr	d6, [r1]
   1179c:	1112      	asrs	r2, r2, #4
   1179e:	ee28 6b06 	vmul.f64	d6, d8, d6
   117a2:	f000 8142 	beq.w	11a2a <_dtoa_r+0xcaa>
   117a6:	eeb0 7b46 	vmov.f64	d7, d6
   117aa:	494b      	ldr	r1, [pc, #300]	; (118d8 <_dtoa_r+0xb58>)
   117ac:	2600      	movs	r6, #0
   117ae:	2002      	movs	r0, #2
   117b0:	07d3      	lsls	r3, r2, #31
   117b2:	d505      	bpl.n	117c0 <_dtoa_r+0xa40>
   117b4:	ed91 5b00 	vldr	d5, [r1]
   117b8:	3001      	adds	r0, #1
   117ba:	2601      	movs	r6, #1
   117bc:	ee27 7b05 	vmul.f64	d7, d7, d5
   117c0:	1052      	asrs	r2, r2, #1
   117c2:	f101 0108 	add.w	r1, r1, #8
   117c6:	d1f3      	bne.n	117b0 <_dtoa_r+0xa30>
   117c8:	2e00      	cmp	r6, #0
   117ca:	fe06 6b07 	vseleq.f64	d6, d6, d7
   117ce:	e41e      	b.n	1100e <_dtoa_r+0x28e>
   117d0:	9b02      	ldr	r3, [sp, #8]
   117d2:	2b00      	cmp	r3, #0
   117d4:	f47f ae37 	bne.w	11446 <_dtoa_r+0x6c6>
   117d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   117dc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   117e0:	2a00      	cmp	r2, #0
   117e2:	f040 8137 	bne.w	11a54 <_dtoa_r+0xcd4>
   117e6:	4a3d      	ldr	r2, [pc, #244]	; (118dc <_dtoa_r+0xb5c>)
   117e8:	400a      	ands	r2, r1
   117ea:	2a00      	cmp	r2, #0
   117ec:	f000 80fa 	beq.w	119e4 <_dtoa_r+0xc64>
   117f0:	9b06      	ldr	r3, [sp, #24]
   117f2:	3301      	adds	r3, #1
   117f4:	9306      	str	r3, [sp, #24]
   117f6:	2301      	movs	r3, #1
   117f8:	f108 0801 	add.w	r8, r8, #1
   117fc:	9308      	str	r3, [sp, #32]
   117fe:	e56f      	b.n	112e0 <_dtoa_r+0x560>
   11800:	4629      	mov	r1, r5
   11802:	9a08      	ldr	r2, [sp, #32]
   11804:	4620      	mov	r0, r4
   11806:	f7fb fadf 	bl	cdc8 <__pow5mult>
   1180a:	4605      	mov	r5, r0
   1180c:	e55a      	b.n	112c4 <_dtoa_r+0x544>
   1180e:	2a00      	cmp	r2, #0
   11810:	dd12      	ble.n	11838 <_dtoa_r+0xab8>
   11812:	4629      	mov	r1, r5
   11814:	2201      	movs	r2, #1
   11816:	4620      	mov	r0, r4
   11818:	9301      	str	r3, [sp, #4]
   1181a:	f7fb fb35 	bl	ce88 <__lshift>
   1181e:	4651      	mov	r1, sl
   11820:	4605      	mov	r5, r0
   11822:	f7fb fba9 	bl	cf78 <__mcmp>
   11826:	2800      	cmp	r0, #0
   11828:	9b01      	ldr	r3, [sp, #4]
   1182a:	f340 80e1 	ble.w	119f0 <_dtoa_r+0xc70>
   1182e:	2b39      	cmp	r3, #57	; 0x39
   11830:	f000 80ca 	beq.w	119c8 <_dtoa_r+0xc48>
   11834:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11838:	46b9      	mov	r9, r7
   1183a:	f809 3b01 	strb.w	r3, [r9], #1
   1183e:	9b04      	ldr	r3, [sp, #16]
   11840:	3301      	adds	r3, #1
   11842:	4637      	mov	r7, r6
   11844:	9304      	str	r3, [sp, #16]
   11846:	4646      	mov	r6, r8
   11848:	e5ba      	b.n	113c0 <_dtoa_r+0x640>
   1184a:	ee38 8b08 	vadd.f64	d8, d8, d8
   1184e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   11852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11856:	dc0a      	bgt.n	1186e <_dtoa_r+0xaee>
   11858:	eeb4 8b46 	vcmp.f64	d8, d6
   1185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11860:	f47f acdc 	bne.w	1121c <_dtoa_r+0x49c>
   11864:	ee17 3a10 	vmov	r3, s14
   11868:	07d8      	lsls	r0, r3, #31
   1186a:	f57f acd7 	bpl.w	1121c <_dtoa_r+0x49c>
   1186e:	9a00      	ldr	r2, [sp, #0]
   11870:	e454      	b.n	1111c <_dtoa_r+0x39c>
   11872:	6871      	ldr	r1, [r6, #4]
   11874:	4620      	mov	r0, r4
   11876:	f7fb f8a1 	bl	c9bc <_Balloc>
   1187a:	4607      	mov	r7, r0
   1187c:	2800      	cmp	r0, #0
   1187e:	f000 80de 	beq.w	11a3e <_dtoa_r+0xcbe>
   11882:	6933      	ldr	r3, [r6, #16]
   11884:	3302      	adds	r3, #2
   11886:	009a      	lsls	r2, r3, #2
   11888:	f106 010c 	add.w	r1, r6, #12
   1188c:	300c      	adds	r0, #12
   1188e:	f7f6 f8ed 	bl	7a6c <memcpy>
   11892:	4639      	mov	r1, r7
   11894:	2201      	movs	r2, #1
   11896:	4620      	mov	r0, r4
   11898:	f7fb faf6 	bl	ce88 <__lshift>
   1189c:	4680      	mov	r8, r0
   1189e:	e5fe      	b.n	1149e <_dtoa_r+0x71e>
   118a0:	9b06      	ldr	r3, [sp, #24]
   118a2:	eba3 0309 	sub.w	r3, r3, r9
   118a6:	9309      	str	r3, [sp, #36]	; 0x24
   118a8:	e4da      	b.n	11260 <_dtoa_r+0x4e0>
   118aa:	2b39      	cmp	r3, #57	; 0x39
   118ac:	f000 808c 	beq.w	119c8 <_dtoa_r+0xc48>
   118b0:	46b9      	mov	r9, r7
   118b2:	3301      	adds	r3, #1
   118b4:	e7c1      	b.n	1183a <_dtoa_r+0xaba>
   118b6:	9a04      	ldr	r2, [sp, #16]
   118b8:	3201      	adds	r2, #1
   118ba:	4637      	mov	r7, r6
   118bc:	9204      	str	r2, [sp, #16]
   118be:	4646      	mov	r6, r8
   118c0:	e55f      	b.n	11382 <_dtoa_r+0x602>
   118c2:	4629      	mov	r1, r5
   118c4:	4620      	mov	r0, r4
   118c6:	f7fb fa7f 	bl	cdc8 <__pow5mult>
   118ca:	4605      	mov	r5, r0
   118cc:	e4fa      	b.n	112c4 <_dtoa_r+0x544>
   118ce:	bf00      	nop
   118d0:	20000cbc 	.word	0x20000cbc
   118d4:	20000328 	.word	0x20000328
   118d8:	20000300 	.word	0x20000300
   118dc:	7ff00000 	.word	0x7ff00000
   118e0:	4b5e      	ldr	r3, [pc, #376]	; (11a5c <_dtoa_r+0xcdc>)
   118e2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   118e6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   118ea:	ed1c 3b02 	vldr	d3, [ip, #-8]
   118ee:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   118f2:	ee36 7b47 	vsub.f64	d7, d6, d7
   118f6:	ec41 0b16 	vmov	d6, r0, r1
   118fa:	ee15 1a90 	vmov	r1, s11
   118fe:	ee23 3b06 	vmul.f64	d3, d3, d6
   11902:	9800      	ldr	r0, [sp, #0]
   11904:	3130      	adds	r1, #48	; 0x30
   11906:	2a01      	cmp	r2, #1
   11908:	f800 1b01 	strb.w	r1, [r0], #1
   1190c:	f000 8083 	beq.w	11a16 <_dtoa_r+0xc96>
   11910:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11914:	9b00      	ldr	r3, [sp, #0]
   11916:	1899      	adds	r1, r3, r2
   11918:	ee27 7b04 	vmul.f64	d7, d7, d4
   1191c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11920:	ee16 3a90 	vmov	r3, s13
   11924:	3330      	adds	r3, #48	; 0x30
   11926:	f800 3b01 	strb.w	r3, [r0], #1
   1192a:	4281      	cmp	r1, r0
   1192c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   11930:	ee37 7b45 	vsub.f64	d7, d7, d5
   11934:	d1f0      	bne.n	11918 <_dtoa_r+0xb98>
   11936:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1193a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1193e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   11942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11946:	f53f abe3 	bmi.w	11110 <_dtoa_r+0x390>
   1194a:	ee36 6b43 	vsub.f64	d6, d6, d3
   1194e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   11952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11956:	f77f ac0d 	ble.w	11174 <_dtoa_r+0x3f4>
   1195a:	4689      	mov	r9, r1
   1195c:	3901      	subs	r1, #1
   1195e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11962:	2b30      	cmp	r3, #48	; 0x30
   11964:	d0f9      	beq.n	1195a <_dtoa_r+0xbda>
   11966:	1c73      	adds	r3, r6, #1
   11968:	9304      	str	r3, [sp, #16]
   1196a:	e539      	b.n	113e0 <_dtoa_r+0x660>
   1196c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1196e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   11972:	e6da      	b.n	1172a <_dtoa_r+0x9aa>
   11974:	2002      	movs	r0, #2
   11976:	eeb0 6b48 	vmov.f64	d6, d8
   1197a:	f7ff bb48 	b.w	1100e <_dtoa_r+0x28e>
   1197e:	f1b9 0f00 	cmp.w	r9, #0
   11982:	f43f aeda 	beq.w	1173a <_dtoa_r+0x9ba>
   11986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11988:	2a00      	cmp	r2, #0
   1198a:	f77f abf3 	ble.w	11174 <_dtoa_r+0x3f4>
   1198e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   11992:	ee26 6b04 	vmul.f64	d6, d6, d4
   11996:	3001      	adds	r0, #1
   11998:	ee07 0a90 	vmov	s15, r0
   1199c:	9b04      	ldr	r3, [sp, #16]
   1199e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   119a2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   119a6:	eea6 7b05 	vfma.f64	d7, d6, d5
   119aa:	ee17 ca90 	vmov	ip, s15
   119ae:	ec51 0b17 	vmov	r0, r1, d7
   119b2:	1e5e      	subs	r6, r3, #1
   119b4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   119b8:	f7ff bb47 	b.w	1104a <_dtoa_r+0x2ca>
   119bc:	9b04      	ldr	r3, [sp, #16]
   119be:	3301      	adds	r3, #1
   119c0:	9304      	str	r3, [sp, #16]
   119c2:	2331      	movs	r3, #49	; 0x31
   119c4:	f7ff bbb1 	b.w	1112a <_dtoa_r+0x3aa>
   119c8:	9b04      	ldr	r3, [sp, #16]
   119ca:	46bb      	mov	fp, r7
   119cc:	3301      	adds	r3, #1
   119ce:	9304      	str	r3, [sp, #16]
   119d0:	2339      	movs	r3, #57	; 0x39
   119d2:	4637      	mov	r7, r6
   119d4:	f80b 3b01 	strb.w	r3, [fp], #1
   119d8:	4646      	mov	r6, r8
   119da:	e4e1      	b.n	113a0 <_dtoa_r+0x620>
   119dc:	f04f 0a00 	mov.w	sl, #0
   119e0:	4656      	mov	r6, sl
   119e2:	e653      	b.n	1168c <_dtoa_r+0x90c>
   119e4:	9208      	str	r2, [sp, #32]
   119e6:	e47b      	b.n	112e0 <_dtoa_r+0x560>
   119e8:	1c73      	adds	r3, r6, #1
   119ea:	9304      	str	r3, [sp, #16]
   119ec:	4689      	mov	r9, r1
   119ee:	e4f7      	b.n	113e0 <_dtoa_r+0x660>
   119f0:	f47f af22 	bne.w	11838 <_dtoa_r+0xab8>
   119f4:	07da      	lsls	r2, r3, #31
   119f6:	f57f af1f 	bpl.w	11838 <_dtoa_r+0xab8>
   119fa:	e718      	b.n	1182e <_dtoa_r+0xaae>
   119fc:	2b39      	cmp	r3, #57	; 0x39
   119fe:	d0e3      	beq.n	119c8 <_dtoa_r+0xc48>
   11a00:	f1b9 0f00 	cmp.w	r9, #0
   11a04:	f73f af16 	bgt.w	11834 <_dtoa_r+0xab4>
   11a08:	e716      	b.n	11838 <_dtoa_r+0xab8>
   11a0a:	9b01      	ldr	r3, [sp, #4]
   11a0c:	2b02      	cmp	r3, #2
   11a0e:	f73f ae28 	bgt.w	11662 <_dtoa_r+0x8e2>
   11a12:	9704      	str	r7, [sp, #16]
   11a14:	e5ba      	b.n	1158c <_dtoa_r+0x80c>
   11a16:	4601      	mov	r1, r0
   11a18:	e78d      	b.n	11936 <_dtoa_r+0xbb6>
   11a1a:	9b01      	ldr	r3, [sp, #4]
   11a1c:	2b02      	cmp	r3, #2
   11a1e:	f73f ae20 	bgt.w	11662 <_dtoa_r+0x8e2>
   11a22:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   11a26:	9704      	str	r7, [sp, #16]
   11a28:	e52b      	b.n	11482 <_dtoa_r+0x702>
   11a2a:	2002      	movs	r0, #2
   11a2c:	f7ff baef 	b.w	1100e <_dtoa_r+0x28e>
   11a30:	4b0b      	ldr	r3, [pc, #44]	; (11a60 <_dtoa_r+0xce0>)
   11a32:	480c      	ldr	r0, [pc, #48]	; (11a64 <_dtoa_r+0xce4>)
   11a34:	2200      	movs	r2, #0
   11a36:	f240 11af 	movw	r1, #431	; 0x1af
   11a3a:	f7ff f8b1 	bl	10ba0 <__assert_func>
   11a3e:	4b08      	ldr	r3, [pc, #32]	; (11a60 <_dtoa_r+0xce0>)
   11a40:	4808      	ldr	r0, [pc, #32]	; (11a64 <_dtoa_r+0xce4>)
   11a42:	463a      	mov	r2, r7
   11a44:	f240 21ef 	movw	r1, #751	; 0x2ef
   11a48:	f7ff f8aa 	bl	10ba0 <__assert_func>
   11a4c:	4b06      	ldr	r3, [pc, #24]	; (11a68 <_dtoa_r+0xce8>)
   11a4e:	9300      	str	r3, [sp, #0]
   11a50:	f7ff b9d2 	b.w	10df8 <_dtoa_r+0x78>
   11a54:	9b02      	ldr	r3, [sp, #8]
   11a56:	9308      	str	r3, [sp, #32]
   11a58:	e4f7      	b.n	1144a <_dtoa_r+0x6ca>
   11a5a:	bf00      	nop
   11a5c:	20000328 	.word	0x20000328
   11a60:	200009d0 	.word	0x200009d0
   11a64:	20000cc0 	.word	0x20000cc0
   11a68:	20000cb0 	.word	0x20000cb0

00011a6c <_strtoul_l.constprop.0>:
   11a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11a70:	4607      	mov	r7, r0
   11a72:	484c      	ldr	r0, [pc, #304]	; (11ba4 <_strtoul_l.constprop.0+0x138>)
   11a74:	460e      	mov	r6, r1
   11a76:	4635      	mov	r5, r6
   11a78:	f816 eb01 	ldrb.w	lr, [r6], #1
   11a7c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   11a80:	f01c 0c08 	ands.w	ip, ip, #8
   11a84:	d1f7      	bne.n	11a76 <_strtoul_l.constprop.0+0xa>
   11a86:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   11a8a:	d05a      	beq.n	11b42 <_strtoul_l.constprop.0+0xd6>
   11a8c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   11a90:	bf03      	ittte	eq
   11a92:	f896 e000 	ldrbeq.w	lr, [r6]
   11a96:	4664      	moveq	r4, ip
   11a98:	1cae      	addeq	r6, r5, #2
   11a9a:	4664      	movne	r4, ip
   11a9c:	b15b      	cbz	r3, 11ab6 <_strtoul_l.constprop.0+0x4a>
   11a9e:	2b10      	cmp	r3, #16
   11aa0:	d054      	beq.n	11b4c <_strtoul_l.constprop.0+0xe0>
   11aa2:	f04f 38ff 	mov.w	r8, #4294967295
   11aa6:	fbb8 f8f3 	udiv	r8, r8, r3
   11aaa:	fb03 fa08 	mul.w	sl, r3, r8
   11aae:	ea6f 0a0a 	mvn.w	sl, sl
   11ab2:	4699      	mov	r9, r3
   11ab4:	e008      	b.n	11ac8 <_strtoul_l.constprop.0+0x5c>
   11ab6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11aba:	d05a      	beq.n	11b72 <_strtoul_l.constprop.0+0x106>
   11abc:	230a      	movs	r3, #10
   11abe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 11ba8 <_strtoul_l.constprop.0+0x13c>
   11ac2:	f04f 0a05 	mov.w	sl, #5
   11ac6:	4699      	mov	r9, r3
   11ac8:	2500      	movs	r5, #0
   11aca:	4628      	mov	r0, r5
   11acc:	e005      	b.n	11ada <_strtoul_l.constprop.0+0x6e>
   11ace:	d02c      	beq.n	11b2a <_strtoul_l.constprop.0+0xbe>
   11ad0:	fb09 c000 	mla	r0, r9, r0, ip
   11ad4:	2501      	movs	r5, #1
   11ad6:	f816 eb01 	ldrb.w	lr, [r6], #1
   11ada:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   11ade:	f1bc 0f09 	cmp.w	ip, #9
   11ae2:	d906      	bls.n	11af2 <_strtoul_l.constprop.0+0x86>
   11ae4:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   11ae8:	f1bc 0f19 	cmp.w	ip, #25
   11aec:	d80b      	bhi.n	11b06 <_strtoul_l.constprop.0+0x9a>
   11aee:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   11af2:	4563      	cmp	r3, ip
   11af4:	dd10      	ble.n	11b18 <_strtoul_l.constprop.0+0xac>
   11af6:	f1b5 3fff 	cmp.w	r5, #4294967295
   11afa:	d0ec      	beq.n	11ad6 <_strtoul_l.constprop.0+0x6a>
   11afc:	4540      	cmp	r0, r8
   11afe:	d9e6      	bls.n	11ace <_strtoul_l.constprop.0+0x62>
   11b00:	f04f 35ff 	mov.w	r5, #4294967295
   11b04:	e7e7      	b.n	11ad6 <_strtoul_l.constprop.0+0x6a>
   11b06:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   11b0a:	f1bc 0f19 	cmp.w	ip, #25
   11b0e:	d803      	bhi.n	11b18 <_strtoul_l.constprop.0+0xac>
   11b10:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   11b14:	4563      	cmp	r3, ip
   11b16:	dcee      	bgt.n	11af6 <_strtoul_l.constprop.0+0x8a>
   11b18:	1c6b      	adds	r3, r5, #1
   11b1a:	d00b      	beq.n	11b34 <_strtoul_l.constprop.0+0xc8>
   11b1c:	b104      	cbz	r4, 11b20 <_strtoul_l.constprop.0+0xb4>
   11b1e:	4240      	negs	r0, r0
   11b20:	b10a      	cbz	r2, 11b26 <_strtoul_l.constprop.0+0xba>
   11b22:	b965      	cbnz	r5, 11b3e <_strtoul_l.constprop.0+0xd2>
   11b24:	6011      	str	r1, [r2, #0]
   11b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b2a:	45d4      	cmp	ip, sl
   11b2c:	ddd0      	ble.n	11ad0 <_strtoul_l.constprop.0+0x64>
   11b2e:	f04f 35ff 	mov.w	r5, #4294967295
   11b32:	e7d0      	b.n	11ad6 <_strtoul_l.constprop.0+0x6a>
   11b34:	2322      	movs	r3, #34	; 0x22
   11b36:	603b      	str	r3, [r7, #0]
   11b38:	4628      	mov	r0, r5
   11b3a:	2a00      	cmp	r2, #0
   11b3c:	d0f3      	beq.n	11b26 <_strtoul_l.constprop.0+0xba>
   11b3e:	1e71      	subs	r1, r6, #1
   11b40:	e7f0      	b.n	11b24 <_strtoul_l.constprop.0+0xb8>
   11b42:	f896 e000 	ldrb.w	lr, [r6]
   11b46:	2401      	movs	r4, #1
   11b48:	1cae      	adds	r6, r5, #2
   11b4a:	e7a7      	b.n	11a9c <_strtoul_l.constprop.0+0x30>
   11b4c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   11b50:	d121      	bne.n	11b96 <_strtoul_l.constprop.0+0x12a>
   11b52:	7830      	ldrb	r0, [r6, #0]
   11b54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11b58:	2858      	cmp	r0, #88	; 0x58
   11b5a:	d116      	bne.n	11b8a <_strtoul_l.constprop.0+0x11e>
   11b5c:	f04f 0910 	mov.w	r9, #16
   11b60:	f896 e001 	ldrb.w	lr, [r6, #1]
   11b64:	f04f 0a0f 	mov.w	sl, #15
   11b68:	3602      	adds	r6, #2
   11b6a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11b6e:	464b      	mov	r3, r9
   11b70:	e7aa      	b.n	11ac8 <_strtoul_l.constprop.0+0x5c>
   11b72:	7833      	ldrb	r3, [r6, #0]
   11b74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11b78:	2b58      	cmp	r3, #88	; 0x58
   11b7a:	d0ef      	beq.n	11b5c <_strtoul_l.constprop.0+0xf0>
   11b7c:	2308      	movs	r3, #8
   11b7e:	f04f 0a07 	mov.w	sl, #7
   11b82:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11b86:	4699      	mov	r9, r3
   11b88:	e79e      	b.n	11ac8 <_strtoul_l.constprop.0+0x5c>
   11b8a:	4699      	mov	r9, r3
   11b8c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11b90:	f04f 0a0f 	mov.w	sl, #15
   11b94:	e798      	b.n	11ac8 <_strtoul_l.constprop.0+0x5c>
   11b96:	f04f 0a0f 	mov.w	sl, #15
   11b9a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11b9e:	4699      	mov	r9, r3
   11ba0:	e792      	b.n	11ac8 <_strtoul_l.constprop.0+0x5c>
   11ba2:	bf00      	nop
   11ba4:	20000bad 	.word	0x20000bad
   11ba8:	19999999 	.word	0x19999999

00011bac <_strtoul_r>:
   11bac:	f7ff bf5e 	b.w	11a6c <_strtoul_l.constprop.0>

00011bb0 <_strtoll_l.constprop.0>:
   11bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb4:	b085      	sub	sp, #20
   11bb6:	461f      	mov	r7, r3
   11bb8:	4b57      	ldr	r3, [pc, #348]	; (11d18 <_strtoll_l.constprop.0+0x168>)
   11bba:	9003      	str	r0, [sp, #12]
   11bbc:	468a      	mov	sl, r1
   11bbe:	9200      	str	r2, [sp, #0]
   11bc0:	460d      	mov	r5, r1
   11bc2:	462a      	mov	r2, r5
   11bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   11bc8:	5d1e      	ldrb	r6, [r3, r4]
   11bca:	f016 0608 	ands.w	r6, r6, #8
   11bce:	d1f8      	bne.n	11bc2 <_strtoll_l.constprop.0+0x12>
   11bd0:	2c2d      	cmp	r4, #45	; 0x2d
   11bd2:	d075      	beq.n	11cc0 <_strtoll_l.constprop.0+0x110>
   11bd4:	2c2b      	cmp	r4, #43	; 0x2b
   11bd6:	bf05      	ittet	eq
   11bd8:	782c      	ldrbeq	r4, [r5, #0]
   11bda:	9602      	streq	r6, [sp, #8]
   11bdc:	9602      	strne	r6, [sp, #8]
   11bde:	1c95      	addeq	r5, r2, #2
   11be0:	f04f 36ff 	mov.w	r6, #4294967295
   11be4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   11be8:	b12f      	cbz	r7, 11bf6 <_strtoll_l.constprop.0+0x46>
   11bea:	2f10      	cmp	r7, #16
   11bec:	d06f      	beq.n	11cce <_strtoll_l.constprop.0+0x11e>
   11bee:	46b8      	mov	r8, r7
   11bf0:	ea4f 79e7 	mov.w	r9, r7, asr #31
   11bf4:	e005      	b.n	11c02 <_strtoll_l.constprop.0+0x52>
   11bf6:	2c30      	cmp	r4, #48	; 0x30
   11bf8:	d074      	beq.n	11ce4 <_strtoll_l.constprop.0+0x134>
   11bfa:	f04f 080a 	mov.w	r8, #10
   11bfe:	46b9      	mov	r9, r7
   11c00:	4647      	mov	r7, r8
   11c02:	4642      	mov	r2, r8
   11c04:	464b      	mov	r3, r9
   11c06:	4630      	mov	r0, r6
   11c08:	4659      	mov	r1, fp
   11c0a:	f7f7 fc49 	bl	94a0 <__aeabi_uldivmod>
   11c0e:	2300      	movs	r3, #0
   11c10:	9201      	str	r2, [sp, #4]
   11c12:	4684      	mov	ip, r0
   11c14:	460a      	mov	r2, r1
   11c16:	4618      	mov	r0, r3
   11c18:	4619      	mov	r1, r3
   11c1a:	e011      	b.n	11c40 <_strtoll_l.constprop.0+0x90>
   11c1c:	428a      	cmp	r2, r1
   11c1e:	bf08      	it	eq
   11c20:	4584      	cmpeq	ip, r0
   11c22:	d03d      	beq.n	11ca0 <_strtoll_l.constprop.0+0xf0>
   11c24:	fb00 f309 	mul.w	r3, r0, r9
   11c28:	fb08 3301 	mla	r3, r8, r1, r3
   11c2c:	fba0 0108 	umull	r0, r1, r0, r8
   11c30:	440b      	add	r3, r1
   11c32:	eb1e 0000 	adds.w	r0, lr, r0
   11c36:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   11c3a:	2301      	movs	r3, #1
   11c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   11c40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   11c44:	f1be 0f09 	cmp.w	lr, #9
   11c48:	d906      	bls.n	11c58 <_strtoll_l.constprop.0+0xa8>
   11c4a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   11c4e:	f1be 0f19 	cmp.w	lr, #25
   11c52:	d80c      	bhi.n	11c6e <_strtoll_l.constprop.0+0xbe>
   11c54:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   11c58:	4577      	cmp	r7, lr
   11c5a:	dd11      	ble.n	11c80 <_strtoll_l.constprop.0+0xd0>
   11c5c:	1c5c      	adds	r4, r3, #1
   11c5e:	d0ed      	beq.n	11c3c <_strtoll_l.constprop.0+0x8c>
   11c60:	4584      	cmp	ip, r0
   11c62:	eb72 0301 	sbcs.w	r3, r2, r1
   11c66:	d2d9      	bcs.n	11c1c <_strtoll_l.constprop.0+0x6c>
   11c68:	f04f 33ff 	mov.w	r3, #4294967295
   11c6c:	e7e6      	b.n	11c3c <_strtoll_l.constprop.0+0x8c>
   11c6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   11c72:	f1be 0f19 	cmp.w	lr, #25
   11c76:	d803      	bhi.n	11c80 <_strtoll_l.constprop.0+0xd0>
   11c78:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   11c7c:	4577      	cmp	r7, lr
   11c7e:	dced      	bgt.n	11c5c <_strtoll_l.constprop.0+0xac>
   11c80:	1c5a      	adds	r2, r3, #1
   11c82:	d013      	beq.n	11cac <_strtoll_l.constprop.0+0xfc>
   11c84:	9a02      	ldr	r2, [sp, #8]
   11c86:	b112      	cbz	r2, 11c8e <_strtoll_l.constprop.0+0xde>
   11c88:	4240      	negs	r0, r0
   11c8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11c8e:	9a00      	ldr	r2, [sp, #0]
   11c90:	b11a      	cbz	r2, 11c9a <_strtoll_l.constprop.0+0xea>
   11c92:	bba3      	cbnz	r3, 11cfe <_strtoll_l.constprop.0+0x14e>
   11c94:	9b00      	ldr	r3, [sp, #0]
   11c96:	f8c3 a000 	str.w	sl, [r3]
   11c9a:	b005      	add	sp, #20
   11c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ca0:	9b01      	ldr	r3, [sp, #4]
   11ca2:	4573      	cmp	r3, lr
   11ca4:	dabe      	bge.n	11c24 <_strtoll_l.constprop.0+0x74>
   11ca6:	f04f 33ff 	mov.w	r3, #4294967295
   11caa:	e7c7      	b.n	11c3c <_strtoll_l.constprop.0+0x8c>
   11cac:	9a03      	ldr	r2, [sp, #12]
   11cae:	2322      	movs	r3, #34	; 0x22
   11cb0:	6013      	str	r3, [r2, #0]
   11cb2:	9b00      	ldr	r3, [sp, #0]
   11cb4:	b333      	cbz	r3, 11d04 <_strtoll_l.constprop.0+0x154>
   11cb6:	f105 3aff 	add.w	sl, r5, #4294967295
   11cba:	4630      	mov	r0, r6
   11cbc:	4659      	mov	r1, fp
   11cbe:	e7e9      	b.n	11c94 <_strtoll_l.constprop.0+0xe4>
   11cc0:	2301      	movs	r3, #1
   11cc2:	782c      	ldrb	r4, [r5, #0]
   11cc4:	9302      	str	r3, [sp, #8]
   11cc6:	1c95      	adds	r5, r2, #2
   11cc8:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   11ccc:	e78c      	b.n	11be8 <_strtoll_l.constprop.0+0x38>
   11cce:	2c30      	cmp	r4, #48	; 0x30
   11cd0:	d104      	bne.n	11cdc <_strtoll_l.constprop.0+0x12c>
   11cd2:	782b      	ldrb	r3, [r5, #0]
   11cd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11cd8:	2b58      	cmp	r3, #88	; 0x58
   11cda:	d008      	beq.n	11cee <_strtoll_l.constprop.0+0x13e>
   11cdc:	46b8      	mov	r8, r7
   11cde:	f04f 0900 	mov.w	r9, #0
   11ce2:	e78e      	b.n	11c02 <_strtoll_l.constprop.0+0x52>
   11ce4:	782b      	ldrb	r3, [r5, #0]
   11ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11cea:	2b58      	cmp	r3, #88	; 0x58
   11cec:	d10f      	bne.n	11d0e <_strtoll_l.constprop.0+0x15e>
   11cee:	f04f 0810 	mov.w	r8, #16
   11cf2:	786c      	ldrb	r4, [r5, #1]
   11cf4:	f04f 0900 	mov.w	r9, #0
   11cf8:	3502      	adds	r5, #2
   11cfa:	4647      	mov	r7, r8
   11cfc:	e781      	b.n	11c02 <_strtoll_l.constprop.0+0x52>
   11cfe:	4606      	mov	r6, r0
   11d00:	468b      	mov	fp, r1
   11d02:	e7d8      	b.n	11cb6 <_strtoll_l.constprop.0+0x106>
   11d04:	4630      	mov	r0, r6
   11d06:	4659      	mov	r1, fp
   11d08:	b005      	add	sp, #20
   11d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d0e:	f04f 0808 	mov.w	r8, #8
   11d12:	46b9      	mov	r9, r7
   11d14:	4647      	mov	r7, r8
   11d16:	e774      	b.n	11c02 <_strtoll_l.constprop.0+0x52>
   11d18:	20000bad 	.word	0x20000bad

00011d1c <_strtoll_r>:
   11d1c:	f7ff bf48 	b.w	11bb0 <_strtoll_l.constprop.0>

00011d20 <_strtoull_l.constprop.0>:
   11d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d24:	b085      	sub	sp, #20
   11d26:	468b      	mov	fp, r1
   11d28:	9201      	str	r2, [sp, #4]
   11d2a:	4a62      	ldr	r2, [pc, #392]	; (11eb4 <_strtoull_l.constprop.0+0x194>)
   11d2c:	9003      	str	r0, [sp, #12]
   11d2e:	461e      	mov	r6, r3
   11d30:	460d      	mov	r5, r1
   11d32:	4629      	mov	r1, r5
   11d34:	f815 4b01 	ldrb.w	r4, [r5], #1
   11d38:	5d13      	ldrb	r3, [r2, r4]
   11d3a:	f013 0308 	ands.w	r3, r3, #8
   11d3e:	d1f8      	bne.n	11d32 <_strtoull_l.constprop.0+0x12>
   11d40:	2c2d      	cmp	r4, #45	; 0x2d
   11d42:	f000 8082 	beq.w	11e4a <_strtoull_l.constprop.0+0x12a>
   11d46:	2c2b      	cmp	r4, #43	; 0x2b
   11d48:	bf03      	ittte	eq
   11d4a:	782c      	ldrbeq	r4, [r5, #0]
   11d4c:	9302      	streq	r3, [sp, #8]
   11d4e:	1c8d      	addeq	r5, r1, #2
   11d50:	9302      	strne	r3, [sp, #8]
   11d52:	b1be      	cbz	r6, 11d84 <_strtoull_l.constprop.0+0x64>
   11d54:	2e10      	cmp	r6, #16
   11d56:	d07d      	beq.n	11e54 <_strtoull_l.constprop.0+0x134>
   11d58:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   11d5c:	4632      	mov	r2, r6
   11d5e:	4653      	mov	r3, sl
   11d60:	f04f 30ff 	mov.w	r0, #4294967295
   11d64:	f04f 31ff 	mov.w	r1, #4294967295
   11d68:	f7f7 fb9a 	bl	94a0 <__aeabi_uldivmod>
   11d6c:	4632      	mov	r2, r6
   11d6e:	4607      	mov	r7, r0
   11d70:	4688      	mov	r8, r1
   11d72:	4653      	mov	r3, sl
   11d74:	f04f 30ff 	mov.w	r0, #4294967295
   11d78:	f04f 31ff 	mov.w	r1, #4294967295
   11d7c:	46b1      	mov	r9, r6
   11d7e:	f7f7 fb8f 	bl	94a0 <__aeabi_uldivmod>
   11d82:	e00a      	b.n	11d9a <_strtoull_l.constprop.0+0x7a>
   11d84:	2c30      	cmp	r4, #48	; 0x30
   11d86:	d079      	beq.n	11e7c <_strtoull_l.constprop.0+0x15c>
   11d88:	f04f 090a 	mov.w	r9, #10
   11d8c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 11eb8 <_strtoull_l.constprop.0+0x198>
   11d90:	46b2      	mov	sl, r6
   11d92:	2205      	movs	r2, #5
   11d94:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   11d98:	464e      	mov	r6, r9
   11d9a:	f04f 0c00 	mov.w	ip, #0
   11d9e:	4660      	mov	r0, ip
   11da0:	4661      	mov	r1, ip
   11da2:	e011      	b.n	11dc8 <_strtoull_l.constprop.0+0xa8>
   11da4:	4541      	cmp	r1, r8
   11da6:	bf08      	it	eq
   11da8:	42b8      	cmpeq	r0, r7
   11daa:	d03e      	beq.n	11e2a <_strtoull_l.constprop.0+0x10a>
   11dac:	fb00 f40a 	mul.w	r4, r0, sl
   11db0:	fb09 4101 	mla	r1, r9, r1, r4
   11db4:	fba0 0409 	umull	r0, r4, r0, r9
   11db8:	4421      	add	r1, r4
   11dba:	1818      	adds	r0, r3, r0
   11dbc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   11dc0:	f04f 0c01 	mov.w	ip, #1
   11dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
   11dc8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   11dcc:	2b09      	cmp	r3, #9
   11dce:	d905      	bls.n	11ddc <_strtoull_l.constprop.0+0xbc>
   11dd0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   11dd4:	2b19      	cmp	r3, #25
   11dd6:	d80d      	bhi.n	11df4 <_strtoull_l.constprop.0+0xd4>
   11dd8:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   11ddc:	429e      	cmp	r6, r3
   11dde:	dd11      	ble.n	11e04 <_strtoull_l.constprop.0+0xe4>
   11de0:	f1bc 3fff 	cmp.w	ip, #4294967295
   11de4:	d0ee      	beq.n	11dc4 <_strtoull_l.constprop.0+0xa4>
   11de6:	4287      	cmp	r7, r0
   11de8:	eb78 0401 	sbcs.w	r4, r8, r1
   11dec:	d2da      	bcs.n	11da4 <_strtoull_l.constprop.0+0x84>
   11dee:	f04f 3cff 	mov.w	ip, #4294967295
   11df2:	e7e7      	b.n	11dc4 <_strtoull_l.constprop.0+0xa4>
   11df4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   11df8:	2b19      	cmp	r3, #25
   11dfa:	d803      	bhi.n	11e04 <_strtoull_l.constprop.0+0xe4>
   11dfc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   11e00:	429e      	cmp	r6, r3
   11e02:	dced      	bgt.n	11de0 <_strtoull_l.constprop.0+0xc0>
   11e04:	f1bc 3fff 	cmp.w	ip, #4294967295
   11e08:	d014      	beq.n	11e34 <_strtoull_l.constprop.0+0x114>
   11e0a:	9b02      	ldr	r3, [sp, #8]
   11e0c:	b113      	cbz	r3, 11e14 <_strtoull_l.constprop.0+0xf4>
   11e0e:	4240      	negs	r0, r0
   11e10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11e14:	9b01      	ldr	r3, [sp, #4]
   11e16:	b12b      	cbz	r3, 11e24 <_strtoull_l.constprop.0+0x104>
   11e18:	f1bc 0f00 	cmp.w	ip, #0
   11e1c:	d112      	bne.n	11e44 <_strtoull_l.constprop.0+0x124>
   11e1e:	9b01      	ldr	r3, [sp, #4]
   11e20:	f8c3 b000 	str.w	fp, [r3]
   11e24:	b005      	add	sp, #20
   11e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e2a:	4293      	cmp	r3, r2
   11e2c:	ddbe      	ble.n	11dac <_strtoull_l.constprop.0+0x8c>
   11e2e:	f04f 3cff 	mov.w	ip, #4294967295
   11e32:	e7c7      	b.n	11dc4 <_strtoull_l.constprop.0+0xa4>
   11e34:	9a03      	ldr	r2, [sp, #12]
   11e36:	2322      	movs	r3, #34	; 0x22
   11e38:	6013      	str	r3, [r2, #0]
   11e3a:	9b01      	ldr	r3, [sp, #4]
   11e3c:	4660      	mov	r0, ip
   11e3e:	4661      	mov	r1, ip
   11e40:	2b00      	cmp	r3, #0
   11e42:	d0ef      	beq.n	11e24 <_strtoull_l.constprop.0+0x104>
   11e44:	f105 3bff 	add.w	fp, r5, #4294967295
   11e48:	e7e9      	b.n	11e1e <_strtoull_l.constprop.0+0xfe>
   11e4a:	2301      	movs	r3, #1
   11e4c:	782c      	ldrb	r4, [r5, #0]
   11e4e:	9302      	str	r3, [sp, #8]
   11e50:	1c8d      	adds	r5, r1, #2
   11e52:	e77e      	b.n	11d52 <_strtoull_l.constprop.0+0x32>
   11e54:	2c30      	cmp	r4, #48	; 0x30
   11e56:	d123      	bne.n	11ea0 <_strtoull_l.constprop.0+0x180>
   11e58:	782b      	ldrb	r3, [r5, #0]
   11e5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11e5e:	2b58      	cmp	r3, #88	; 0x58
   11e60:	d11b      	bne.n	11e9a <_strtoull_l.constprop.0+0x17a>
   11e62:	f04f 0910 	mov.w	r9, #16
   11e66:	786c      	ldrb	r4, [r5, #1]
   11e68:	220f      	movs	r2, #15
   11e6a:	3502      	adds	r5, #2
   11e6c:	f04f 37ff 	mov.w	r7, #4294967295
   11e70:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11e74:	f04f 0a00 	mov.w	sl, #0
   11e78:	464e      	mov	r6, r9
   11e7a:	e78e      	b.n	11d9a <_strtoull_l.constprop.0+0x7a>
   11e7c:	782b      	ldrb	r3, [r5, #0]
   11e7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11e82:	2b58      	cmp	r3, #88	; 0x58
   11e84:	d0ed      	beq.n	11e62 <_strtoull_l.constprop.0+0x142>
   11e86:	f04f 0908 	mov.w	r9, #8
   11e8a:	46b2      	mov	sl, r6
   11e8c:	2207      	movs	r2, #7
   11e8e:	f04f 37ff 	mov.w	r7, #4294967295
   11e92:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   11e96:	464e      	mov	r6, r9
   11e98:	e77f      	b.n	11d9a <_strtoull_l.constprop.0+0x7a>
   11e9a:	f04f 0a00 	mov.w	sl, #0
   11e9e:	e75d      	b.n	11d5c <_strtoull_l.constprop.0+0x3c>
   11ea0:	220f      	movs	r2, #15
   11ea2:	f04f 37ff 	mov.w	r7, #4294967295
   11ea6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   11eaa:	46b1      	mov	r9, r6
   11eac:	f04f 0a00 	mov.w	sl, #0
   11eb0:	e773      	b.n	11d9a <_strtoull_l.constprop.0+0x7a>
   11eb2:	bf00      	nop
   11eb4:	20000bad 	.word	0x20000bad
   11eb8:	19999999 	.word	0x19999999

00011ebc <_strtoull_r>:
   11ebc:	f7ff bf30 	b.w	11d20 <_strtoull_l.constprop.0>

00011ec0 <_mbrtowc_r>:
   11ec0:	b570      	push	{r4, r5, r6, lr}
   11ec2:	b082      	sub	sp, #8
   11ec4:	4604      	mov	r4, r0
   11ec6:	9d06      	ldr	r5, [sp, #24]
   11ec8:	b155      	cbz	r5, 11ee0 <_mbrtowc_r+0x20>
   11eca:	b16a      	cbz	r2, 11ee8 <_mbrtowc_r+0x28>
   11ecc:	480f      	ldr	r0, [pc, #60]	; (11f0c <_mbrtowc_r+0x4c>)
   11ece:	9500      	str	r5, [sp, #0]
   11ed0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   11ed4:	4620      	mov	r0, r4
   11ed6:	47b0      	blx	r6
   11ed8:	1c43      	adds	r3, r0, #1
   11eda:	d010      	beq.n	11efe <_mbrtowc_r+0x3e>
   11edc:	b002      	add	sp, #8
   11ede:	bd70      	pop	{r4, r5, r6, pc}
   11ee0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   11ee4:	2a00      	cmp	r2, #0
   11ee6:	d1f1      	bne.n	11ecc <_mbrtowc_r+0xc>
   11ee8:	4b08      	ldr	r3, [pc, #32]	; (11f0c <_mbrtowc_r+0x4c>)
   11eea:	9500      	str	r5, [sp, #0]
   11eec:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   11ef0:	4611      	mov	r1, r2
   11ef2:	2301      	movs	r3, #1
   11ef4:	4a06      	ldr	r2, [pc, #24]	; (11f10 <_mbrtowc_r+0x50>)
   11ef6:	4620      	mov	r0, r4
   11ef8:	47b0      	blx	r6
   11efa:	1c43      	adds	r3, r0, #1
   11efc:	d1ee      	bne.n	11edc <_mbrtowc_r+0x1c>
   11efe:	2200      	movs	r2, #0
   11f00:	238a      	movs	r3, #138	; 0x8a
   11f02:	602a      	str	r2, [r5, #0]
   11f04:	6023      	str	r3, [r4, #0]
   11f06:	b002      	add	sp, #8
   11f08:	bd70      	pop	{r4, r5, r6, pc}
   11f0a:	bf00      	nop
   11f0c:	200086f0 	.word	0x200086f0
   11f10:	20008128 	.word	0x20008128

00011f14 <_wcrtomb_r>:
   11f14:	b570      	push	{r4, r5, r6, lr}
   11f16:	4605      	mov	r5, r0
   11f18:	b084      	sub	sp, #16
   11f1a:	b15b      	cbz	r3, 11f34 <_wcrtomb_r+0x20>
   11f1c:	461c      	mov	r4, r3
   11f1e:	b169      	cbz	r1, 11f3c <_wcrtomb_r+0x28>
   11f20:	4b0e      	ldr	r3, [pc, #56]	; (11f5c <_wcrtomb_r+0x48>)
   11f22:	4628      	mov	r0, r5
   11f24:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11f28:	4623      	mov	r3, r4
   11f2a:	47b0      	blx	r6
   11f2c:	1c43      	adds	r3, r0, #1
   11f2e:	d00f      	beq.n	11f50 <_wcrtomb_r+0x3c>
   11f30:	b004      	add	sp, #16
   11f32:	bd70      	pop	{r4, r5, r6, pc}
   11f34:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11f38:	2900      	cmp	r1, #0
   11f3a:	d1f1      	bne.n	11f20 <_wcrtomb_r+0xc>
   11f3c:	4a07      	ldr	r2, [pc, #28]	; (11f5c <_wcrtomb_r+0x48>)
   11f3e:	4623      	mov	r3, r4
   11f40:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11f44:	4628      	mov	r0, r5
   11f46:	460a      	mov	r2, r1
   11f48:	a901      	add	r1, sp, #4
   11f4a:	47b0      	blx	r6
   11f4c:	1c43      	adds	r3, r0, #1
   11f4e:	d1ef      	bne.n	11f30 <_wcrtomb_r+0x1c>
   11f50:	2200      	movs	r2, #0
   11f52:	238a      	movs	r3, #138	; 0x8a
   11f54:	6022      	str	r2, [r4, #0]
   11f56:	602b      	str	r3, [r5, #0]
   11f58:	b004      	add	sp, #16
   11f5a:	bd70      	pop	{r4, r5, r6, pc}
   11f5c:	200086f0 	.word	0x200086f0

00011f60 <_wcsrtombs_r>:
   11f60:	b510      	push	{r4, lr}
   11f62:	b082      	sub	sp, #8
   11f64:	9c04      	ldr	r4, [sp, #16]
   11f66:	e9cd 3400 	strd	r3, r4, [sp]
   11f6a:	f04f 33ff 	mov.w	r3, #4294967295
   11f6e:	f001 fd9f 	bl	13ab0 <_wcsnrtombs_r>
   11f72:	b002      	add	sp, #8
   11f74:	bd10      	pop	{r4, pc}
   11f76:	bf00      	nop

00011f78 <iswspace>:
   11f78:	2100      	movs	r1, #0
   11f7a:	f000 b801 	b.w	11f80 <iswspace_l>
   11f7e:	bf00      	nop

00011f80 <iswspace_l>:
   11f80:	b510      	push	{r4, lr}
   11f82:	f000 f8ab 	bl	120dc <_jp2uc_l>
   11f86:	4604      	mov	r4, r0
   11f88:	f001 fda4 	bl	13ad4 <category>
   11f8c:	f1a0 031a 	sub.w	r3, r0, #26
   11f90:	b2db      	uxtb	r3, r3
   11f92:	2b02      	cmp	r3, #2
   11f94:	d906      	bls.n	11fa4 <iswspace_l+0x24>
   11f96:	f1a4 0009 	sub.w	r0, r4, #9
   11f9a:	2804      	cmp	r0, #4
   11f9c:	bf8c      	ite	hi
   11f9e:	2000      	movhi	r0, #0
   11fa0:	2001      	movls	r0, #1
   11fa2:	bd10      	pop	{r4, pc}
   11fa4:	2001      	movs	r0, #1
   11fa6:	bd10      	pop	{r4, pc}

00011fa8 <__jp2uc>:
   11fa8:	2902      	cmp	r1, #2
   11faa:	d032      	beq.n	12012 <__jp2uc+0x6a>
   11fac:	2903      	cmp	r1, #3
   11fae:	f3c0 2307 	ubfx	r3, r0, #8, #8
   11fb2:	bf1d      	ittte	ne
   11fb4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   11fb8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   11fbc:	b2d2      	uxtbne	r2, r2
   11fbe:	b2c2      	uxtbeq	r2, r0
   11fc0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   11fc4:	b2c9      	uxtb	r1, r1
   11fc6:	291f      	cmp	r1, #31
   11fc8:	d806      	bhi.n	11fd8 <__jp2uc+0x30>
   11fca:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   11fce:	4288      	cmp	r0, r1
   11fd0:	d969      	bls.n	120a6 <__jp2uc+0xfe>
   11fd2:	f04f 30ff 	mov.w	r0, #4294967295
   11fd6:	4770      	bx	lr
   11fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   11fdc:	b2c9      	uxtb	r1, r1
   11fde:	2924      	cmp	r1, #36	; 0x24
   11fe0:	d80e      	bhi.n	12000 <__jp2uc+0x58>
   11fe2:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   11fe6:	4288      	cmp	r0, r1
   11fe8:	d8f3      	bhi.n	11fd2 <__jp2uc+0x2a>
   11fea:	3bd0      	subs	r3, #208	; 0xd0
   11fec:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   11ff0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   11ff4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   11ff8:	4a30      	ldr	r2, [pc, #192]	; (120bc <__jp2uc+0x114>)
   11ffa:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   11ffe:	4770      	bx	lr
   12000:	3ba1      	subs	r3, #161	; 0xa1
   12002:	2b07      	cmp	r3, #7
   12004:	d8e5      	bhi.n	11fd2 <__jp2uc+0x2a>
   12006:	e8df f003 	tbb	[pc, r3]
   1200a:	3e48      	.short	0x3e48
   1200c:	25292e34 	.word	0x25292e34
   12010:	1921      	.short	0x1921
   12012:	b2c2      	uxtb	r2, r0
   12014:	2a9e      	cmp	r2, #158	; 0x9e
   12016:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1201a:	d90b      	bls.n	12034 <__jp2uc+0x8c>
   1201c:	3223      	adds	r2, #35	; 0x23
   1201e:	b2d2      	uxtb	r2, r2
   12020:	2380      	movs	r3, #128	; 0x80
   12022:	299f      	cmp	r1, #159	; 0x9f
   12024:	bf94      	ite	ls
   12026:	3970      	subls	r1, #112	; 0x70
   12028:	3150      	addhi	r1, #80	; 0x50
   1202a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1202e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12032:	e7c5      	b.n	11fc0 <__jp2uc+0x18>
   12034:	3a7e      	subs	r2, #126	; 0x7e
   12036:	b2d2      	uxtb	r2, r2
   12038:	237f      	movs	r3, #127	; 0x7f
   1203a:	e7f2      	b.n	12022 <__jp2uc+0x7a>
   1203c:	2ac0      	cmp	r2, #192	; 0xc0
   1203e:	d8c8      	bhi.n	11fd2 <__jp2uc+0x2a>
   12040:	4b1f      	ldr	r3, [pc, #124]	; (120c0 <__jp2uc+0x118>)
   12042:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   12046:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1204a:	4770      	bx	lr
   1204c:	2af1      	cmp	r2, #241	; 0xf1
   1204e:	d8c0      	bhi.n	11fd2 <__jp2uc+0x2a>
   12050:	4b1c      	ldr	r3, [pc, #112]	; (120c4 <__jp2uc+0x11c>)
   12052:	e019      	b.n	12088 <__jp2uc+0xe0>
   12054:	2ad8      	cmp	r2, #216	; 0xd8
   12056:	d8bc      	bhi.n	11fd2 <__jp2uc+0x2a>
   12058:	4b1b      	ldr	r3, [pc, #108]	; (120c8 <__jp2uc+0x120>)
   1205a:	e015      	b.n	12088 <__jp2uc+0xe0>
   1205c:	2af6      	cmp	r2, #246	; 0xf6
   1205e:	d8b8      	bhi.n	11fd2 <__jp2uc+0x2a>
   12060:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   12064:	4770      	bx	lr
   12066:	2af3      	cmp	r2, #243	; 0xf3
   12068:	d8b3      	bhi.n	11fd2 <__jp2uc+0x2a>
   1206a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1206e:	3020      	adds	r0, #32
   12070:	4770      	bx	lr
   12072:	4b16      	ldr	r3, [pc, #88]	; (120cc <__jp2uc+0x124>)
   12074:	4413      	add	r3, r2
   12076:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d0a9      	beq.n	11fd2 <__jp2uc+0x2a>
   1207e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   12082:	3060      	adds	r0, #96	; 0x60
   12084:	4770      	bx	lr
   12086:	4b12      	ldr	r3, [pc, #72]	; (120d0 <__jp2uc+0x128>)
   12088:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1208c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12090:	2800      	cmp	r0, #0
   12092:	bf08      	it	eq
   12094:	f04f 30ff 	moveq.w	r0, #4294967295
   12098:	4770      	bx	lr
   1209a:	4b0e      	ldr	r3, [pc, #56]	; (120d4 <__jp2uc+0x12c>)
   1209c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   120a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   120a4:	4770      	bx	lr
   120a6:	3bb0      	subs	r3, #176	; 0xb0
   120a8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   120ac:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   120b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   120b4:	4a08      	ldr	r2, [pc, #32]	; (120d8 <__jp2uc+0x130>)
   120b6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   120ba:	4770      	bx	lr
   120bc:	20005d3c 	.word	0x20005d3c
   120c0:	20001064 	.word	0x20001064
   120c4:	20000fc0 	.word	0x20000fc0
   120c8:	20000f50 	.word	0x20000f50
   120cc:	20000ef4 	.word	0x20000ef4
   120d0:	20000e38 	.word	0x20000e38
   120d4:	20000d7c 	.word	0x20000d7c
   120d8:	200010a4 	.word	0x200010a4

000120dc <_jp2uc_l>:
   120dc:	b538      	push	{r3, r4, r5, lr}
   120de:	4605      	mov	r5, r0
   120e0:	b1b9      	cbz	r1, 12112 <_jp2uc_l+0x36>
   120e2:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   120e6:	4912      	ldr	r1, [pc, #72]	; (12130 <_jp2uc_l+0x54>)
   120e8:	4620      	mov	r0, r4
   120ea:	f7f9 fbfd 	bl	b8e8 <strcmp>
   120ee:	b928      	cbnz	r0, 120fc <_jp2uc_l+0x20>
   120f0:	4628      	mov	r0, r5
   120f2:	2101      	movs	r1, #1
   120f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   120f8:	f7ff bf56 	b.w	11fa8 <__jp2uc>
   120fc:	490d      	ldr	r1, [pc, #52]	; (12134 <_jp2uc_l+0x58>)
   120fe:	4620      	mov	r0, r4
   12100:	f7f9 fbf2 	bl	b8e8 <strcmp>
   12104:	b938      	cbnz	r0, 12116 <_jp2uc_l+0x3a>
   12106:	4628      	mov	r0, r5
   12108:	2102      	movs	r1, #2
   1210a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1210e:	f7ff bf4b 	b.w	11fa8 <__jp2uc>
   12112:	4c09      	ldr	r4, [pc, #36]	; (12138 <_jp2uc_l+0x5c>)
   12114:	e7e7      	b.n	120e6 <_jp2uc_l+0xa>
   12116:	4909      	ldr	r1, [pc, #36]	; (1213c <_jp2uc_l+0x60>)
   12118:	4620      	mov	r0, r4
   1211a:	f7f9 fbe5 	bl	b8e8 <strcmp>
   1211e:	b928      	cbnz	r0, 1212c <_jp2uc_l+0x50>
   12120:	4628      	mov	r0, r5
   12122:	2103      	movs	r1, #3
   12124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12128:	f7ff bf3e 	b.w	11fa8 <__jp2uc>
   1212c:	4628      	mov	r0, r5
   1212e:	bd38      	pop	{r3, r4, r5, pc}
   12130:	20000d1c 	.word	0x20000d1c
   12134:	20000d20 	.word	0x20000d20
   12138:	2000881a 	.word	0x2000881a
   1213c:	20000d28 	.word	0x20000d28

00012140 <fiprintf>:
   12140:	b40e      	push	{r1, r2, r3}
   12142:	b510      	push	{r4, lr}
   12144:	b083      	sub	sp, #12
   12146:	ab05      	add	r3, sp, #20
   12148:	4c06      	ldr	r4, [pc, #24]	; (12164 <fiprintf+0x24>)
   1214a:	f853 2b04 	ldr.w	r2, [r3], #4
   1214e:	9301      	str	r3, [sp, #4]
   12150:	4601      	mov	r1, r0
   12152:	6820      	ldr	r0, [r4, #0]
   12154:	f000 f97c 	bl	12450 <_vfiprintf_r>
   12158:	b003      	add	sp, #12
   1215a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1215e:	b003      	add	sp, #12
   12160:	4770      	bx	lr
   12162:	bf00      	nop
   12164:	20008c78 	.word	0x20008c78

00012168 <__ssprint_r>:
   12168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1216c:	6893      	ldr	r3, [r2, #8]
   1216e:	6817      	ldr	r7, [r2, #0]
   12170:	b083      	sub	sp, #12
   12172:	4692      	mov	sl, r2
   12174:	2b00      	cmp	r3, #0
   12176:	d070      	beq.n	1225a <__ssprint_r+0xf2>
   12178:	4681      	mov	r9, r0
   1217a:	688a      	ldr	r2, [r1, #8]
   1217c:	6808      	ldr	r0, [r1, #0]
   1217e:	460c      	mov	r4, r1
   12180:	3708      	adds	r7, #8
   12182:	e043      	b.n	1220c <__ssprint_r+0xa4>
   12184:	89a3      	ldrh	r3, [r4, #12]
   12186:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1218a:	d02e      	beq.n	121ea <__ssprint_r+0x82>
   1218c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   12190:	eba0 0801 	sub.w	r8, r0, r1
   12194:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12198:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1219c:	f108 0001 	add.w	r0, r8, #1
   121a0:	1076      	asrs	r6, r6, #1
   121a2:	4428      	add	r0, r5
   121a4:	42b0      	cmp	r0, r6
   121a6:	4632      	mov	r2, r6
   121a8:	bf84      	itt	hi
   121aa:	4606      	movhi	r6, r0
   121ac:	4632      	movhi	r2, r6
   121ae:	055b      	lsls	r3, r3, #21
   121b0:	d537      	bpl.n	12222 <__ssprint_r+0xba>
   121b2:	4611      	mov	r1, r2
   121b4:	4648      	mov	r0, r9
   121b6:	f7f7 fb01 	bl	97bc <_malloc_r>
   121ba:	9001      	str	r0, [sp, #4]
   121bc:	2800      	cmp	r0, #0
   121be:	d03a      	beq.n	12236 <__ssprint_r+0xce>
   121c0:	4642      	mov	r2, r8
   121c2:	6921      	ldr	r1, [r4, #16]
   121c4:	f7f5 fc52 	bl	7a6c <memcpy>
   121c8:	89a2      	ldrh	r2, [r4, #12]
   121ca:	9b01      	ldr	r3, [sp, #4]
   121cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   121d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   121d4:	81a2      	strh	r2, [r4, #12]
   121d6:	eba6 0208 	sub.w	r2, r6, r8
   121da:	eb03 0008 	add.w	r0, r3, r8
   121de:	6166      	str	r6, [r4, #20]
   121e0:	60a2      	str	r2, [r4, #8]
   121e2:	6123      	str	r3, [r4, #16]
   121e4:	6020      	str	r0, [r4, #0]
   121e6:	462e      	mov	r6, r5
   121e8:	46a8      	mov	r8, r5
   121ea:	4642      	mov	r2, r8
   121ec:	4659      	mov	r1, fp
   121ee:	f7f9 f991 	bl	b514 <memmove>
   121f2:	f8da 3008 	ldr.w	r3, [sl, #8]
   121f6:	68a2      	ldr	r2, [r4, #8]
   121f8:	6820      	ldr	r0, [r4, #0]
   121fa:	1b92      	subs	r2, r2, r6
   121fc:	4440      	add	r0, r8
   121fe:	1b5b      	subs	r3, r3, r5
   12200:	60a2      	str	r2, [r4, #8]
   12202:	6020      	str	r0, [r4, #0]
   12204:	f8ca 3008 	str.w	r3, [sl, #8]
   12208:	b33b      	cbz	r3, 1225a <__ssprint_r+0xf2>
   1220a:	3708      	adds	r7, #8
   1220c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12210:	2d00      	cmp	r5, #0
   12212:	d0fa      	beq.n	1220a <__ssprint_r+0xa2>
   12214:	42aa      	cmp	r2, r5
   12216:	4616      	mov	r6, r2
   12218:	4690      	mov	r8, r2
   1221a:	d9b3      	bls.n	12184 <__ssprint_r+0x1c>
   1221c:	462e      	mov	r6, r5
   1221e:	46a8      	mov	r8, r5
   12220:	e7e3      	b.n	121ea <__ssprint_r+0x82>
   12222:	4648      	mov	r0, r9
   12224:	f7f7 fd92 	bl	9d4c <_realloc_r>
   12228:	4603      	mov	r3, r0
   1222a:	2800      	cmp	r0, #0
   1222c:	d1d3      	bne.n	121d6 <__ssprint_r+0x6e>
   1222e:	6921      	ldr	r1, [r4, #16]
   12230:	4648      	mov	r0, r9
   12232:	f7f9 fe97 	bl	bf64 <_free_r>
   12236:	89a3      	ldrh	r3, [r4, #12]
   12238:	220c      	movs	r2, #12
   1223a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1223e:	f8c9 2000 	str.w	r2, [r9]
   12242:	f04f 30ff 	mov.w	r0, #4294967295
   12246:	81a3      	strh	r3, [r4, #12]
   12248:	2200      	movs	r2, #0
   1224a:	2300      	movs	r3, #0
   1224c:	f8ca 2008 	str.w	r2, [sl, #8]
   12250:	f8ca 3004 	str.w	r3, [sl, #4]
   12254:	b003      	add	sp, #12
   12256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1225a:	2000      	movs	r0, #0
   1225c:	2300      	movs	r3, #0
   1225e:	f8ca 3004 	str.w	r3, [sl, #4]
   12262:	b003      	add	sp, #12
   12264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012268 <_sungetc_r>:
   12268:	b538      	push	{r3, r4, r5, lr}
   1226a:	1c4b      	adds	r3, r1, #1
   1226c:	d01a      	beq.n	122a4 <_sungetc_r+0x3c>
   1226e:	8993      	ldrh	r3, [r2, #12]
   12270:	4614      	mov	r4, r2
   12272:	6b12      	ldr	r2, [r2, #48]	; 0x30
   12274:	f023 0320 	bic.w	r3, r3, #32
   12278:	81a3      	strh	r3, [r4, #12]
   1227a:	b2cd      	uxtb	r5, r1
   1227c:	b1aa      	cbz	r2, 122aa <_sungetc_r+0x42>
   1227e:	6862      	ldr	r2, [r4, #4]
   12280:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12282:	429a      	cmp	r2, r3
   12284:	da09      	bge.n	1229a <_sungetc_r+0x32>
   12286:	6823      	ldr	r3, [r4, #0]
   12288:	1e5a      	subs	r2, r3, #1
   1228a:	6022      	str	r2, [r4, #0]
   1228c:	f803 5c01 	strb.w	r5, [r3, #-1]
   12290:	6863      	ldr	r3, [r4, #4]
   12292:	3301      	adds	r3, #1
   12294:	6063      	str	r3, [r4, #4]
   12296:	4628      	mov	r0, r5
   12298:	bd38      	pop	{r3, r4, r5, pc}
   1229a:	4621      	mov	r1, r4
   1229c:	f001 fa58 	bl	13750 <__submore>
   122a0:	2800      	cmp	r0, #0
   122a2:	d0f0      	beq.n	12286 <_sungetc_r+0x1e>
   122a4:	f04f 35ff 	mov.w	r5, #4294967295
   122a8:	e7f5      	b.n	12296 <_sungetc_r+0x2e>
   122aa:	6923      	ldr	r3, [r4, #16]
   122ac:	6822      	ldr	r2, [r4, #0]
   122ae:	b12b      	cbz	r3, 122bc <_sungetc_r+0x54>
   122b0:	4293      	cmp	r3, r2
   122b2:	d203      	bcs.n	122bc <_sungetc_r+0x54>
   122b4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   122b8:	42ab      	cmp	r3, r5
   122ba:	d00f      	beq.n	122dc <_sungetc_r+0x74>
   122bc:	6861      	ldr	r1, [r4, #4]
   122be:	63e1      	str	r1, [r4, #60]	; 0x3c
   122c0:	4623      	mov	r3, r4
   122c2:	63a2      	str	r2, [r4, #56]	; 0x38
   122c4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   122c8:	2203      	movs	r2, #3
   122ca:	6362      	str	r2, [r4, #52]	; 0x34
   122cc:	6321      	str	r1, [r4, #48]	; 0x30
   122ce:	f803 5f42 	strb.w	r5, [r3, #66]!
   122d2:	2201      	movs	r2, #1
   122d4:	e9c4 3200 	strd	r3, r2, [r4]
   122d8:	4628      	mov	r0, r5
   122da:	bd38      	pop	{r3, r4, r5, pc}
   122dc:	6863      	ldr	r3, [r4, #4]
   122de:	3a01      	subs	r2, #1
   122e0:	3301      	adds	r3, #1
   122e2:	e9c4 2300 	strd	r2, r3, [r4]
   122e6:	e7d6      	b.n	12296 <_sungetc_r+0x2e>

000122e8 <__ssrefill_r>:
   122e8:	b510      	push	{r4, lr}
   122ea:	460c      	mov	r4, r1
   122ec:	6b09      	ldr	r1, [r1, #48]	; 0x30
   122ee:	b169      	cbz	r1, 1230c <__ssrefill_r+0x24>
   122f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   122f4:	4299      	cmp	r1, r3
   122f6:	d001      	beq.n	122fc <__ssrefill_r+0x14>
   122f8:	f7f9 fe34 	bl	bf64 <_free_r>
   122fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   122fe:	6063      	str	r3, [r4, #4]
   12300:	2000      	movs	r0, #0
   12302:	6320      	str	r0, [r4, #48]	; 0x30
   12304:	b113      	cbz	r3, 1230c <__ssrefill_r+0x24>
   12306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12308:	6023      	str	r3, [r4, #0]
   1230a:	bd10      	pop	{r4, pc}
   1230c:	89a3      	ldrh	r3, [r4, #12]
   1230e:	6921      	ldr	r1, [r4, #16]
   12310:	2200      	movs	r2, #0
   12312:	f043 0320 	orr.w	r3, r3, #32
   12316:	e9c4 1200 	strd	r1, r2, [r4]
   1231a:	81a3      	strh	r3, [r4, #12]
   1231c:	f04f 30ff 	mov.w	r0, #4294967295
   12320:	bd10      	pop	{r4, pc}
   12322:	bf00      	nop

00012324 <_sfread_r>:
   12324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12328:	b085      	sub	sp, #20
   1232a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1232e:	fb02 f303 	mul.w	r3, r2, r3
   12332:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   12334:	9301      	str	r3, [sp, #4]
   12336:	b3a3      	cbz	r3, 123a2 <_sfread_r+0x7e>
   12338:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1233c:	9b01      	ldr	r3, [sp, #4]
   1233e:	4553      	cmp	r3, sl
   12340:	468b      	mov	fp, r1
   12342:	d946      	bls.n	123d2 <_sfread_r+0xae>
   12344:	46a0      	mov	r8, r4
   12346:	9d01      	ldr	r5, [sp, #4]
   12348:	f858 1b40 	ldr.w	r1, [r8], #64
   1234c:	4607      	mov	r7, r0
   1234e:	2600      	movs	r6, #0
   12350:	4652      	mov	r2, sl
   12352:	4658      	mov	r0, fp
   12354:	f7f5 fb8a 	bl	7a6c <memcpy>
   12358:	6823      	ldr	r3, [r4, #0]
   1235a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1235c:	4453      	add	r3, sl
   1235e:	46a9      	mov	r9, r5
   12360:	e9c4 3600 	strd	r3, r6, [r4]
   12364:	4611      	mov	r1, r2
   12366:	4638      	mov	r0, r7
   12368:	44d3      	add	fp, sl
   1236a:	eba5 050a 	sub.w	r5, r5, sl
   1236e:	b1e2      	cbz	r2, 123aa <_sfread_r+0x86>
   12370:	4542      	cmp	r2, r8
   12372:	d001      	beq.n	12378 <_sfread_r+0x54>
   12374:	f7f9 fdf6 	bl	bf64 <_free_r>
   12378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1237a:	6326      	str	r6, [r4, #48]	; 0x30
   1237c:	6063      	str	r3, [r4, #4]
   1237e:	b1a3      	cbz	r3, 123aa <_sfread_r+0x86>
   12380:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12382:	6021      	str	r1, [r4, #0]
   12384:	42ab      	cmp	r3, r5
   12386:	469a      	mov	sl, r3
   12388:	d3e2      	bcc.n	12350 <_sfread_r+0x2c>
   1238a:	9b02      	ldr	r3, [sp, #8]
   1238c:	9301      	str	r3, [sp, #4]
   1238e:	462a      	mov	r2, r5
   12390:	4658      	mov	r0, fp
   12392:	f7f5 fb6b 	bl	7a6c <memcpy>
   12396:	e9d4 3200 	ldrd	r3, r2, [r4]
   1239a:	1b52      	subs	r2, r2, r5
   1239c:	442b      	add	r3, r5
   1239e:	e9c4 3200 	strd	r3, r2, [r4]
   123a2:	9801      	ldr	r0, [sp, #4]
   123a4:	b005      	add	sp, #20
   123a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123aa:	9a01      	ldr	r2, [sp, #4]
   123ac:	9b03      	ldr	r3, [sp, #12]
   123ae:	4452      	add	r2, sl
   123b0:	eba2 0209 	sub.w	r2, r2, r9
   123b4:	fbb2 f3f3 	udiv	r3, r2, r3
   123b8:	9301      	str	r3, [sp, #4]
   123ba:	89a3      	ldrh	r3, [r4, #12]
   123bc:	6922      	ldr	r2, [r4, #16]
   123be:	9801      	ldr	r0, [sp, #4]
   123c0:	f043 0320 	orr.w	r3, r3, #32
   123c4:	81a3      	strh	r3, [r4, #12]
   123c6:	2300      	movs	r3, #0
   123c8:	e9c4 2300 	strd	r2, r3, [r4]
   123cc:	b005      	add	sp, #20
   123ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d2:	6821      	ldr	r1, [r4, #0]
   123d4:	461d      	mov	r5, r3
   123d6:	e7d8      	b.n	1238a <_sfread_r+0x66>

000123d8 <__sprint_r.part.0>:
   123d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   123de:	049c      	lsls	r4, r3, #18
   123e0:	4690      	mov	r8, r2
   123e2:	d52d      	bpl.n	12440 <__sprint_r.part.0+0x68>
   123e4:	6893      	ldr	r3, [r2, #8]
   123e6:	6812      	ldr	r2, [r2, #0]
   123e8:	b343      	cbz	r3, 1243c <__sprint_r.part.0+0x64>
   123ea:	468b      	mov	fp, r1
   123ec:	4606      	mov	r6, r0
   123ee:	f102 0908 	add.w	r9, r2, #8
   123f2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   123f6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   123fa:	d015      	beq.n	12428 <__sprint_r.part.0+0x50>
   123fc:	3d04      	subs	r5, #4
   123fe:	2400      	movs	r4, #0
   12400:	e001      	b.n	12406 <__sprint_r.part.0+0x2e>
   12402:	42a7      	cmp	r7, r4
   12404:	d00e      	beq.n	12424 <__sprint_r.part.0+0x4c>
   12406:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1240a:	465a      	mov	r2, fp
   1240c:	4630      	mov	r0, r6
   1240e:	f001 fa97 	bl	13940 <_fputwc_r>
   12412:	1c43      	adds	r3, r0, #1
   12414:	f104 0401 	add.w	r4, r4, #1
   12418:	d1f3      	bne.n	12402 <__sprint_r.part.0+0x2a>
   1241a:	2300      	movs	r3, #0
   1241c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12424:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12428:	f02a 0a03 	bic.w	sl, sl, #3
   1242c:	eba3 030a 	sub.w	r3, r3, sl
   12430:	f8c8 3008 	str.w	r3, [r8, #8]
   12434:	f109 0908 	add.w	r9, r9, #8
   12438:	2b00      	cmp	r3, #0
   1243a:	d1da      	bne.n	123f2 <__sprint_r.part.0+0x1a>
   1243c:	2000      	movs	r0, #0
   1243e:	e7ec      	b.n	1241a <__sprint_r.part.0+0x42>
   12440:	f001 f80c 	bl	1345c <__sfvwrite_r>
   12444:	2300      	movs	r3, #0
   12446:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1244a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1244e:	bf00      	nop

00012450 <_vfiprintf_r>:
   12450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12454:	ed2d 8b02 	vpush	{d8}
   12458:	b0c5      	sub	sp, #276	; 0x114
   1245a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1245e:	4683      	mov	fp, r0
   12460:	ee08 1a10 	vmov	s16, r1
   12464:	4616      	mov	r6, r2
   12466:	2100      	movs	r1, #0
   12468:	2208      	movs	r2, #8
   1246a:	4650      	mov	r0, sl
   1246c:	461c      	mov	r4, r3
   1246e:	9307      	str	r3, [sp, #28]
   12470:	f7f9 f8cc 	bl	b60c <memset>
   12474:	f1bb 0f00 	cmp.w	fp, #0
   12478:	d004      	beq.n	12484 <_vfiprintf_r+0x34>
   1247a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1247e:	2b00      	cmp	r3, #0
   12480:	f000 86a0 	beq.w	131c4 <_vfiprintf_r+0xd74>
   12484:	ee18 2a10 	vmov	r2, s16
   12488:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1248a:	07db      	lsls	r3, r3, #31
   1248c:	f140 8513 	bpl.w	12eb6 <_vfiprintf_r+0xa66>
   12490:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12494:	b28a      	uxth	r2, r1
   12496:	0495      	lsls	r5, r2, #18
   12498:	d40b      	bmi.n	124b2 <_vfiprintf_r+0x62>
   1249a:	ee18 3a10 	vmov	r3, s16
   1249e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   124a2:	8199      	strh	r1, [r3, #12]
   124a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   124a6:	b28a      	uxth	r2, r1
   124a8:	ee18 1a10 	vmov	r1, s16
   124ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   124b0:	664b      	str	r3, [r1, #100]	; 0x64
   124b2:	0710      	lsls	r0, r2, #28
   124b4:	f140 8105 	bpl.w	126c2 <_vfiprintf_r+0x272>
   124b8:	ee18 3a10 	vmov	r3, s16
   124bc:	691b      	ldr	r3, [r3, #16]
   124be:	2b00      	cmp	r3, #0
   124c0:	f000 80ff 	beq.w	126c2 <_vfiprintf_r+0x272>
   124c4:	f002 031a 	and.w	r3, r2, #26
   124c8:	2b0a      	cmp	r3, #10
   124ca:	f000 810a 	beq.w	126e2 <_vfiprintf_r+0x292>
   124ce:	2300      	movs	r3, #0
   124d0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   124d4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   124d8:	aa1b      	add	r2, sp, #108	; 0x6c
   124da:	930c      	str	r3, [sp, #48]	; 0x30
   124dc:	9218      	str	r2, [sp, #96]	; 0x60
   124de:	4691      	mov	r9, r2
   124e0:	930b      	str	r3, [sp, #44]	; 0x2c
   124e2:	9305      	str	r3, [sp, #20]
   124e4:	46b0      	mov	r8, r6
   124e6:	4644      	mov	r4, r8
   124e8:	4ba8      	ldr	r3, [pc, #672]	; (1278c <_vfiprintf_r+0x33c>)
   124ea:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   124ee:	f7f9 f957 	bl	b7a0 <__locale_mb_cur_max>
   124f2:	4622      	mov	r2, r4
   124f4:	4603      	mov	r3, r0
   124f6:	a912      	add	r1, sp, #72	; 0x48
   124f8:	f8cd a000 	str.w	sl, [sp]
   124fc:	4658      	mov	r0, fp
   124fe:	47a8      	blx	r5
   12500:	2800      	cmp	r0, #0
   12502:	f000 8145 	beq.w	12790 <_vfiprintf_r+0x340>
   12506:	f2c0 8139 	blt.w	1277c <_vfiprintf_r+0x32c>
   1250a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1250c:	2a25      	cmp	r2, #37	; 0x25
   1250e:	4603      	mov	r3, r0
   12510:	d001      	beq.n	12516 <_vfiprintf_r+0xc6>
   12512:	441c      	add	r4, r3
   12514:	e7e8      	b.n	124e8 <_vfiprintf_r+0x98>
   12516:	ebb4 0608 	subs.w	r6, r4, r8
   1251a:	4605      	mov	r5, r0
   1251c:	f040 813c 	bne.w	12798 <_vfiprintf_r+0x348>
   12520:	2300      	movs	r3, #0
   12522:	7861      	ldrb	r1, [r4, #1]
   12524:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12528:	f104 0801 	add.w	r8, r4, #1
   1252c:	9306      	str	r3, [sp, #24]
   1252e:	f04f 37ff 	mov.w	r7, #4294967295
   12532:	461e      	mov	r6, r3
   12534:	242b      	movs	r4, #43	; 0x2b
   12536:	f108 0801 	add.w	r8, r8, #1
   1253a:	f1a1 0320 	sub.w	r3, r1, #32
   1253e:	2b5a      	cmp	r3, #90	; 0x5a
   12540:	f200 8178 	bhi.w	12834 <_vfiprintf_r+0x3e4>
   12544:	e8df f013 	tbh	[pc, r3, lsl #1]
   12548:	017602b5 	.word	0x017602b5
   1254c:	02b00176 	.word	0x02b00176
   12550:	01760176 	.word	0x01760176
   12554:	006a0176 	.word	0x006a0176
   12558:	01760176 	.word	0x01760176
   1255c:	028d027d 	.word	0x028d027d
   12560:	02880176 	.word	0x02880176
   12564:	01760297 	.word	0x01760297
   12568:	005b0292 	.word	0x005b0292
   1256c:	005b005b 	.word	0x005b005b
   12570:	005b005b 	.word	0x005b005b
   12574:	005b005b 	.word	0x005b005b
   12578:	005b005b 	.word	0x005b005b
   1257c:	01760176 	.word	0x01760176
   12580:	01760176 	.word	0x01760176
   12584:	01760176 	.word	0x01760176
   12588:	01760176 	.word	0x01760176
   1258c:	025c0176 	.word	0x025c0176
   12590:	01760084 	.word	0x01760084
   12594:	01760176 	.word	0x01760176
   12598:	01760176 	.word	0x01760176
   1259c:	01760176 	.word	0x01760176
   125a0:	01760176 	.word	0x01760176
   125a4:	00e80176 	.word	0x00e80176
   125a8:	01760176 	.word	0x01760176
   125ac:	02330176 	.word	0x02330176
   125b0:	02da0176 	.word	0x02da0176
   125b4:	01760176 	.word	0x01760176
   125b8:	0176058b 	.word	0x0176058b
   125bc:	01760176 	.word	0x01760176
   125c0:	01760176 	.word	0x01760176
   125c4:	01760176 	.word	0x01760176
   125c8:	01760176 	.word	0x01760176
   125cc:	025c0176 	.word	0x025c0176
   125d0:	01760086 	.word	0x01760086
   125d4:	01760176 	.word	0x01760176
   125d8:	008602cd 	.word	0x008602cd
   125dc:	0176007f 	.word	0x0176007f
   125e0:	017602c0 	.word	0x017602c0
   125e4:	00ea02fd 	.word	0x00ea02fd
   125e8:	007f02ed 	.word	0x007f02ed
   125ec:	02330176 	.word	0x02330176
   125f0:	0569007c 	.word	0x0569007c
   125f4:	01760176 	.word	0x01760176
   125f8:	0176056b 	.word	0x0176056b
   125fc:	007c      	.short	0x007c
   125fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12602:	2200      	movs	r2, #0
   12604:	f818 1b01 	ldrb.w	r1, [r8], #1
   12608:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1260c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12610:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12614:	2b09      	cmp	r3, #9
   12616:	d9f5      	bls.n	12604 <_vfiprintf_r+0x1b4>
   12618:	9206      	str	r2, [sp, #24]
   1261a:	e78e      	b.n	1253a <_vfiprintf_r+0xea>
   1261c:	4658      	mov	r0, fp
   1261e:	f7fe fa7d 	bl	10b1c <_localeconv_r>
   12622:	6843      	ldr	r3, [r0, #4]
   12624:	930d      	str	r3, [sp, #52]	; 0x34
   12626:	4618      	mov	r0, r3
   12628:	f7f9 fb8a 	bl	bd40 <strlen>
   1262c:	900e      	str	r0, [sp, #56]	; 0x38
   1262e:	4605      	mov	r5, r0
   12630:	4658      	mov	r0, fp
   12632:	f7fe fa73 	bl	10b1c <_localeconv_r>
   12636:	6883      	ldr	r3, [r0, #8]
   12638:	930b      	str	r3, [sp, #44]	; 0x2c
   1263a:	2d00      	cmp	r5, #0
   1263c:	f040 84d6 	bne.w	12fec <_vfiprintf_r+0xb9c>
   12640:	f898 1000 	ldrb.w	r1, [r8]
   12644:	e777      	b.n	12536 <_vfiprintf_r+0xe6>
   12646:	f898 1000 	ldrb.w	r1, [r8]
   1264a:	f046 0620 	orr.w	r6, r6, #32
   1264e:	e772      	b.n	12536 <_vfiprintf_r+0xe6>
   12650:	f046 0610 	orr.w	r6, r6, #16
   12654:	06b4      	lsls	r4, r6, #26
   12656:	f140 818e 	bpl.w	12976 <_vfiprintf_r+0x526>
   1265a:	9b07      	ldr	r3, [sp, #28]
   1265c:	3307      	adds	r3, #7
   1265e:	f023 0307 	bic.w	r3, r3, #7
   12662:	461a      	mov	r2, r3
   12664:	6859      	ldr	r1, [r3, #4]
   12666:	f852 3b08 	ldr.w	r3, [r2], #8
   1266a:	9207      	str	r2, [sp, #28]
   1266c:	460a      	mov	r2, r1
   1266e:	2900      	cmp	r1, #0
   12670:	f2c0 8470 	blt.w	12f54 <_vfiprintf_r+0xb04>
   12674:	1c79      	adds	r1, r7, #1
   12676:	f000 85a2 	beq.w	131be <_vfiprintf_r+0xd6e>
   1267a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   1267e:	9103      	str	r1, [sp, #12]
   12680:	ea53 0102 	orrs.w	r1, r3, r2
   12684:	f000 843f 	beq.w	12f06 <_vfiprintf_r+0xab6>
   12688:	2b0a      	cmp	r3, #10
   1268a:	f172 0100 	sbcs.w	r1, r2, #0
   1268e:	f080 8541 	bcs.w	13114 <_vfiprintf_r+0xcc4>
   12692:	3330      	adds	r3, #48	; 0x30
   12694:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12698:	9e03      	ldr	r6, [sp, #12]
   1269a:	2301      	movs	r3, #1
   1269c:	9304      	str	r3, [sp, #16]
   1269e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   126a2:	9b04      	ldr	r3, [sp, #16]
   126a4:	42bb      	cmp	r3, r7
   126a6:	bfb8      	it	lt
   126a8:	463b      	movlt	r3, r7
   126aa:	9303      	str	r3, [sp, #12]
   126ac:	2300      	movs	r3, #0
   126ae:	9308      	str	r3, [sp, #32]
   126b0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   126b4:	2b00      	cmp	r3, #0
   126b6:	f000 80cb 	beq.w	12850 <_vfiprintf_r+0x400>
   126ba:	9b03      	ldr	r3, [sp, #12]
   126bc:	3301      	adds	r3, #1
   126be:	9303      	str	r3, [sp, #12]
   126c0:	e0c6      	b.n	12850 <_vfiprintf_r+0x400>
   126c2:	ee18 1a10 	vmov	r1, s16
   126c6:	4658      	mov	r0, fp
   126c8:	ee18 5a10 	vmov	r5, s16
   126cc:	f001 f87c 	bl	137c8 <__swsetup_r>
   126d0:	2800      	cmp	r0, #0
   126d2:	f040 8652 	bne.w	1337a <_vfiprintf_r+0xf2a>
   126d6:	89aa      	ldrh	r2, [r5, #12]
   126d8:	f002 031a 	and.w	r3, r2, #26
   126dc:	2b0a      	cmp	r3, #10
   126de:	f47f aef6 	bne.w	124ce <_vfiprintf_r+0x7e>
   126e2:	ee18 1a10 	vmov	r1, s16
   126e6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   126ea:	2b00      	cmp	r3, #0
   126ec:	f6ff aeef 	blt.w	124ce <_vfiprintf_r+0x7e>
   126f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   126f2:	07db      	lsls	r3, r3, #31
   126f4:	d402      	bmi.n	126fc <_vfiprintf_r+0x2ac>
   126f6:	0597      	lsls	r7, r2, #22
   126f8:	f140 8612 	bpl.w	13320 <_vfiprintf_r+0xed0>
   126fc:	ee18 1a10 	vmov	r1, s16
   12700:	4623      	mov	r3, r4
   12702:	4632      	mov	r2, r6
   12704:	4658      	mov	r0, fp
   12706:	f000 fe69 	bl	133dc <__sbprintf>
   1270a:	9005      	str	r0, [sp, #20]
   1270c:	9805      	ldr	r0, [sp, #20]
   1270e:	b045      	add	sp, #276	; 0x114
   12710:	ecbd 8b02 	vpop	{d8}
   12714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12718:	f046 0610 	orr.w	r6, r6, #16
   1271c:	f016 0220 	ands.w	r2, r6, #32
   12720:	f000 8136 	beq.w	12990 <_vfiprintf_r+0x540>
   12724:	9b07      	ldr	r3, [sp, #28]
   12726:	3307      	adds	r3, #7
   12728:	f023 0307 	bic.w	r3, r3, #7
   1272c:	4619      	mov	r1, r3
   1272e:	685a      	ldr	r2, [r3, #4]
   12730:	f851 3b08 	ldr.w	r3, [r1], #8
   12734:	9107      	str	r1, [sp, #28]
   12736:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1273a:	9103      	str	r1, [sp, #12]
   1273c:	2100      	movs	r1, #0
   1273e:	2000      	movs	r0, #0
   12740:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12744:	1c78      	adds	r0, r7, #1
   12746:	f000 8210 	beq.w	12b6a <_vfiprintf_r+0x71a>
   1274a:	9803      	ldr	r0, [sp, #12]
   1274c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12750:	ea53 0002 	orrs.w	r0, r3, r2
   12754:	f040 8208 	bne.w	12b68 <_vfiprintf_r+0x718>
   12758:	2f00      	cmp	r7, #0
   1275a:	f040 8538 	bne.w	131ce <_vfiprintf_r+0xd7e>
   1275e:	2900      	cmp	r1, #0
   12760:	f040 83d5 	bne.w	12f0e <_vfiprintf_r+0xabe>
   12764:	9b03      	ldr	r3, [sp, #12]
   12766:	f013 0301 	ands.w	r3, r3, #1
   1276a:	9304      	str	r3, [sp, #16]
   1276c:	f000 8411 	beq.w	12f92 <_vfiprintf_r+0xb42>
   12770:	2330      	movs	r3, #48	; 0x30
   12772:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12776:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1277a:	e792      	b.n	126a2 <_vfiprintf_r+0x252>
   1277c:	2208      	movs	r2, #8
   1277e:	2100      	movs	r1, #0
   12780:	4650      	mov	r0, sl
   12782:	f7f8 ff43 	bl	b60c <memset>
   12786:	2301      	movs	r3, #1
   12788:	441c      	add	r4, r3
   1278a:	e6ad      	b.n	124e8 <_vfiprintf_r+0x98>
   1278c:	200086f0 	.word	0x200086f0
   12790:	ebb4 0608 	subs.w	r6, r4, r8
   12794:	4605      	mov	r5, r0
   12796:	d01b      	beq.n	127d0 <_vfiprintf_r+0x380>
   12798:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1279a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1279c:	3301      	adds	r3, #1
   1279e:	4432      	add	r2, r6
   127a0:	2b07      	cmp	r3, #7
   127a2:	e9c9 8600 	strd	r8, r6, [r9]
   127a6:	921a      	str	r2, [sp, #104]	; 0x68
   127a8:	9319      	str	r3, [sp, #100]	; 0x64
   127aa:	dd1c      	ble.n	127e6 <_vfiprintf_r+0x396>
   127ac:	2a00      	cmp	r2, #0
   127ae:	f000 83a6 	beq.w	12efe <_vfiprintf_r+0xaae>
   127b2:	ee18 1a10 	vmov	r1, s16
   127b6:	aa18      	add	r2, sp, #96	; 0x60
   127b8:	4658      	mov	r0, fp
   127ba:	f7ff fe0d 	bl	123d8 <__sprint_r.part.0>
   127be:	bb20      	cbnz	r0, 1280a <_vfiprintf_r+0x3ba>
   127c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   127c4:	9b05      	ldr	r3, [sp, #20]
   127c6:	4433      	add	r3, r6
   127c8:	9305      	str	r3, [sp, #20]
   127ca:	2d00      	cmp	r5, #0
   127cc:	f47f aea8 	bne.w	12520 <_vfiprintf_r+0xd0>
   127d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   127d2:	2b00      	cmp	r3, #0
   127d4:	f040 85c1 	bne.w	1335a <_vfiprintf_r+0xf0a>
   127d8:	ee18 3a10 	vmov	r3, s16
   127dc:	2200      	movs	r2, #0
   127de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   127e2:	9219      	str	r2, [sp, #100]	; 0x64
   127e4:	e015      	b.n	12812 <_vfiprintf_r+0x3c2>
   127e6:	f109 0908 	add.w	r9, r9, #8
   127ea:	e7eb      	b.n	127c4 <_vfiprintf_r+0x374>
   127ec:	ee18 1a10 	vmov	r1, s16
   127f0:	aa18      	add	r2, sp, #96	; 0x60
   127f2:	4658      	mov	r0, fp
   127f4:	f7ff fdf0 	bl	123d8 <__sprint_r.part.0>
   127f8:	2800      	cmp	r0, #0
   127fa:	f000 80a6 	beq.w	1294a <_vfiprintf_r+0x4fa>
   127fe:	9b08      	ldr	r3, [sp, #32]
   12800:	b11b      	cbz	r3, 1280a <_vfiprintf_r+0x3ba>
   12802:	9908      	ldr	r1, [sp, #32]
   12804:	4658      	mov	r0, fp
   12806:	f7f9 fbad 	bl	bf64 <_free_r>
   1280a:	ee18 3a10 	vmov	r3, s16
   1280e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12812:	ee18 2a10 	vmov	r2, s16
   12816:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12818:	f012 0f01 	tst.w	r2, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	f000 80a0 	beq.w	12962 <_vfiprintf_r+0x512>
   12822:	0650      	lsls	r0, r2, #25
   12824:	f100 85b2 	bmi.w	1338c <_vfiprintf_r+0xf3c>
   12828:	9805      	ldr	r0, [sp, #20]
   1282a:	b045      	add	sp, #276	; 0x114
   1282c:	ecbd 8b02 	vpop	{d8}
   12830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	2900      	cmp	r1, #0
   12836:	d0cb      	beq.n	127d0 <_vfiprintf_r+0x380>
   12838:	2300      	movs	r3, #0
   1283a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1283e:	2301      	movs	r3, #1
   12840:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12844:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12848:	ac2b      	add	r4, sp, #172	; 0xac
   1284a:	2300      	movs	r3, #0
   1284c:	9308      	str	r3, [sp, #32]
   1284e:	461f      	mov	r7, r3
   12850:	f016 0302 	ands.w	r3, r6, #2
   12854:	9309      	str	r3, [sp, #36]	; 0x24
   12856:	d002      	beq.n	1285e <_vfiprintf_r+0x40e>
   12858:	9b03      	ldr	r3, [sp, #12]
   1285a:	3302      	adds	r3, #2
   1285c:	9303      	str	r3, [sp, #12]
   1285e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12862:	930a      	str	r3, [sp, #40]	; 0x28
   12864:	d105      	bne.n	12872 <_vfiprintf_r+0x422>
   12866:	9b06      	ldr	r3, [sp, #24]
   12868:	9a03      	ldr	r2, [sp, #12]
   1286a:	1a9d      	subs	r5, r3, r2
   1286c:	2d00      	cmp	r5, #0
   1286e:	f300 827b 	bgt.w	12d68 <_vfiprintf_r+0x918>
   12872:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12876:	1c41      	adds	r1, r0, #1
   12878:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1287c:	b182      	cbz	r2, 128a0 <_vfiprintf_r+0x450>
   1287e:	2201      	movs	r2, #1
   12880:	3301      	adds	r3, #1
   12882:	f8c9 2004 	str.w	r2, [r9, #4]
   12886:	2907      	cmp	r1, #7
   12888:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   1288c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12890:	f8c9 2000 	str.w	r2, [r9]
   12894:	f300 824a 	bgt.w	12d2c <_vfiprintf_r+0x8dc>
   12898:	4608      	mov	r0, r1
   1289a:	f109 0908 	add.w	r9, r9, #8
   1289e:	3101      	adds	r1, #1
   128a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   128a2:	b1e2      	cbz	r2, 128de <_vfiprintf_r+0x48e>
   128a4:	aa11      	add	r2, sp, #68	; 0x44
   128a6:	3302      	adds	r3, #2
   128a8:	f8c9 2000 	str.w	r2, [r9]
   128ac:	2907      	cmp	r1, #7
   128ae:	f04f 0202 	mov.w	r2, #2
   128b2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   128b6:	f8c9 2004 	str.w	r2, [r9, #4]
   128ba:	f340 8250 	ble.w	12d5e <_vfiprintf_r+0x90e>
   128be:	2b00      	cmp	r3, #0
   128c0:	f000 8343 	beq.w	12f4a <_vfiprintf_r+0xafa>
   128c4:	ee18 1a10 	vmov	r1, s16
   128c8:	aa18      	add	r2, sp, #96	; 0x60
   128ca:	4658      	mov	r0, fp
   128cc:	f7ff fd84 	bl	123d8 <__sprint_r.part.0>
   128d0:	2800      	cmp	r0, #0
   128d2:	d194      	bne.n	127fe <_vfiprintf_r+0x3ae>
   128d4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   128d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   128dc:	1c41      	adds	r1, r0, #1
   128de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   128e0:	2a80      	cmp	r2, #128	; 0x80
   128e2:	f000 8184 	beq.w	12bee <_vfiprintf_r+0x79e>
   128e6:	9a04      	ldr	r2, [sp, #16]
   128e8:	1abd      	subs	r5, r7, r2
   128ea:	2d00      	cmp	r5, #0
   128ec:	f300 81d7 	bgt.w	12c9e <_vfiprintf_r+0x84e>
   128f0:	9a04      	ldr	r2, [sp, #16]
   128f2:	f8c9 4000 	str.w	r4, [r9]
   128f6:	4413      	add	r3, r2
   128f8:	2907      	cmp	r1, #7
   128fa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   128fe:	f8c9 2004 	str.w	r2, [r9, #4]
   12902:	f340 816e 	ble.w	12be2 <_vfiprintf_r+0x792>
   12906:	2b00      	cmp	r3, #0
   12908:	f000 8275 	beq.w	12df6 <_vfiprintf_r+0x9a6>
   1290c:	ee18 1a10 	vmov	r1, s16
   12910:	aa18      	add	r2, sp, #96	; 0x60
   12912:	4658      	mov	r0, fp
   12914:	f7ff fd60 	bl	123d8 <__sprint_r.part.0>
   12918:	2800      	cmp	r0, #0
   1291a:	f47f af70 	bne.w	127fe <_vfiprintf_r+0x3ae>
   1291e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12920:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12924:	0775      	lsls	r5, r6, #29
   12926:	d505      	bpl.n	12934 <_vfiprintf_r+0x4e4>
   12928:	9a06      	ldr	r2, [sp, #24]
   1292a:	9903      	ldr	r1, [sp, #12]
   1292c:	1a54      	subs	r4, r2, r1
   1292e:	2c00      	cmp	r4, #0
   12930:	f300 826b 	bgt.w	12e0a <_vfiprintf_r+0x9ba>
   12934:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12938:	9803      	ldr	r0, [sp, #12]
   1293a:	4281      	cmp	r1, r0
   1293c:	bfac      	ite	ge
   1293e:	1852      	addge	r2, r2, r1
   12940:	1812      	addlt	r2, r2, r0
   12942:	9205      	str	r2, [sp, #20]
   12944:	2b00      	cmp	r3, #0
   12946:	f47f af51 	bne.w	127ec <_vfiprintf_r+0x39c>
   1294a:	9908      	ldr	r1, [sp, #32]
   1294c:	2300      	movs	r3, #0
   1294e:	9319      	str	r3, [sp, #100]	; 0x64
   12950:	2900      	cmp	r1, #0
   12952:	f000 8149 	beq.w	12be8 <_vfiprintf_r+0x798>
   12956:	4658      	mov	r0, fp
   12958:	f7f9 fb04 	bl	bf64 <_free_r>
   1295c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12960:	e5c1      	b.n	124e6 <_vfiprintf_r+0x96>
   12962:	059c      	lsls	r4, r3, #22
   12964:	f53f af5d 	bmi.w	12822 <_vfiprintf_r+0x3d2>
   12968:	ee18 4a10 	vmov	r4, s16
   1296c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1296e:	f7f8 ffb3 	bl	b8d8 <__retarget_lock_release_recursive>
   12972:	89a2      	ldrh	r2, [r4, #12]
   12974:	e755      	b.n	12822 <_vfiprintf_r+0x3d2>
   12976:	06f0      	lsls	r0, r6, #27
   12978:	9a07      	ldr	r2, [sp, #28]
   1297a:	f100 831f 	bmi.w	12fbc <_vfiprintf_r+0xb6c>
   1297e:	0671      	lsls	r1, r6, #25
   12980:	f140 8319 	bpl.w	12fb6 <_vfiprintf_r+0xb66>
   12984:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12988:	9207      	str	r2, [sp, #28]
   1298a:	17da      	asrs	r2, r3, #31
   1298c:	4611      	mov	r1, r2
   1298e:	e66e      	b.n	1266e <_vfiprintf_r+0x21e>
   12990:	f016 0310 	ands.w	r3, r6, #16
   12994:	9907      	ldr	r1, [sp, #28]
   12996:	f040 8309 	bne.w	12fac <_vfiprintf_r+0xb5c>
   1299a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1299e:	f000 8301 	beq.w	12fa4 <_vfiprintf_r+0xb54>
   129a2:	461a      	mov	r2, r3
   129a4:	f851 3b04 	ldr.w	r3, [r1], #4
   129a8:	9107      	str	r1, [sp, #28]
   129aa:	b29b      	uxth	r3, r3
   129ac:	e6c3      	b.n	12736 <_vfiprintf_r+0x2e6>
   129ae:	9b07      	ldr	r3, [sp, #28]
   129b0:	461a      	mov	r2, r3
   129b2:	2300      	movs	r3, #0
   129b4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   129b8:	4613      	mov	r3, r2
   129ba:	f853 4b04 	ldr.w	r4, [r3], #4
   129be:	9303      	str	r3, [sp, #12]
   129c0:	2c00      	cmp	r4, #0
   129c2:	f000 8412 	beq.w	131ea <_vfiprintf_r+0xd9a>
   129c6:	2953      	cmp	r1, #83	; 0x53
   129c8:	f000 8365 	beq.w	13096 <_vfiprintf_r+0xc46>
   129cc:	f016 0510 	ands.w	r5, r6, #16
   129d0:	f040 8361 	bne.w	13096 <_vfiprintf_r+0xc46>
   129d4:	1c7b      	adds	r3, r7, #1
   129d6:	f000 84b3 	beq.w	13340 <_vfiprintf_r+0xef0>
   129da:	463a      	mov	r2, r7
   129dc:	4629      	mov	r1, r5
   129de:	4620      	mov	r0, r4
   129e0:	f7f9 f94e 	bl	bc80 <memchr>
   129e4:	9008      	str	r0, [sp, #32]
   129e6:	2800      	cmp	r0, #0
   129e8:	f000 849f 	beq.w	1332a <_vfiprintf_r+0xeda>
   129ec:	1b03      	subs	r3, r0, r4
   129ee:	9a03      	ldr	r2, [sp, #12]
   129f0:	9304      	str	r3, [sp, #16]
   129f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   129f6:	462f      	mov	r7, r5
   129f8:	9207      	str	r2, [sp, #28]
   129fa:	9303      	str	r3, [sp, #12]
   129fc:	9508      	str	r5, [sp, #32]
   129fe:	e657      	b.n	126b0 <_vfiprintf_r+0x260>
   12a00:	2943      	cmp	r1, #67	; 0x43
   12a02:	d002      	beq.n	12a0a <_vfiprintf_r+0x5ba>
   12a04:	06f5      	lsls	r5, r6, #27
   12a06:	f140 832d 	bpl.w	13064 <_vfiprintf_r+0xc14>
   12a0a:	9d07      	ldr	r5, [sp, #28]
   12a0c:	2208      	movs	r2, #8
   12a0e:	2100      	movs	r1, #0
   12a10:	a816      	add	r0, sp, #88	; 0x58
   12a12:	ac2b      	add	r4, sp, #172	; 0xac
   12a14:	f7f8 fdfa 	bl	b60c <memset>
   12a18:	ab16      	add	r3, sp, #88	; 0x58
   12a1a:	f855 2b04 	ldr.w	r2, [r5], #4
   12a1e:	4621      	mov	r1, r4
   12a20:	4658      	mov	r0, fp
   12a22:	f7ff fa77 	bl	11f14 <_wcrtomb_r>
   12a26:	4603      	mov	r3, r0
   12a28:	3301      	adds	r3, #1
   12a2a:	9004      	str	r0, [sp, #16]
   12a2c:	f000 84b3 	beq.w	13396 <_vfiprintf_r+0xf46>
   12a30:	9b04      	ldr	r3, [sp, #16]
   12a32:	9507      	str	r5, [sp, #28]
   12a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12a38:	9303      	str	r3, [sp, #12]
   12a3a:	2300      	movs	r3, #0
   12a3c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12a40:	e703      	b.n	1284a <_vfiprintf_r+0x3fa>
   12a42:	9b07      	ldr	r3, [sp, #28]
   12a44:	f853 2b04 	ldr.w	r2, [r3], #4
   12a48:	9206      	str	r2, [sp, #24]
   12a4a:	2a00      	cmp	r2, #0
   12a4c:	f280 829c 	bge.w	12f88 <_vfiprintf_r+0xb38>
   12a50:	9a06      	ldr	r2, [sp, #24]
   12a52:	4252      	negs	r2, r2
   12a54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12a58:	f898 1000 	ldrb.w	r1, [r8]
   12a5c:	f046 0604 	orr.w	r6, r6, #4
   12a60:	e569      	b.n	12536 <_vfiprintf_r+0xe6>
   12a62:	f898 1000 	ldrb.w	r1, [r8]
   12a66:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12a6a:	e564      	b.n	12536 <_vfiprintf_r+0xe6>
   12a6c:	f898 1000 	ldrb.w	r1, [r8]
   12a70:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12a74:	e55f      	b.n	12536 <_vfiprintf_r+0xe6>
   12a76:	4642      	mov	r2, r8
   12a78:	f812 1b01 	ldrb.w	r1, [r2], #1
   12a7c:	292a      	cmp	r1, #42	; 0x2a
   12a7e:	f000 8496 	beq.w	133ae <_vfiprintf_r+0xf5e>
   12a82:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a86:	2b09      	cmp	r3, #9
   12a88:	4690      	mov	r8, r2
   12a8a:	f04f 0700 	mov.w	r7, #0
   12a8e:	f63f ad54 	bhi.w	1253a <_vfiprintf_r+0xea>
   12a92:	f818 1b01 	ldrb.w	r1, [r8], #1
   12a96:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12a9a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12a9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12aa2:	2b09      	cmp	r3, #9
   12aa4:	d9f5      	bls.n	12a92 <_vfiprintf_r+0x642>
   12aa6:	e548      	b.n	1253a <_vfiprintf_r+0xea>
   12aa8:	f898 1000 	ldrb.w	r1, [r8]
   12aac:	f046 0601 	orr.w	r6, r6, #1
   12ab0:	e541      	b.n	12536 <_vfiprintf_r+0xe6>
   12ab2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12ab6:	2b00      	cmp	r3, #0
   12ab8:	f47f adc2 	bne.w	12640 <_vfiprintf_r+0x1f0>
   12abc:	2320      	movs	r3, #32
   12abe:	f898 1000 	ldrb.w	r1, [r8]
   12ac2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12ac6:	e536      	b.n	12536 <_vfiprintf_r+0xe6>
   12ac8:	f898 1000 	ldrb.w	r1, [r8]
   12acc:	296c      	cmp	r1, #108	; 0x6c
   12ace:	bf03      	ittte	eq
   12ad0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12ad4:	f046 0620 	orreq.w	r6, r6, #32
   12ad8:	f108 0801 	addeq.w	r8, r8, #1
   12adc:	f046 0610 	orrne.w	r6, r6, #16
   12ae0:	e529      	b.n	12536 <_vfiprintf_r+0xe6>
   12ae2:	f898 1000 	ldrb.w	r1, [r8]
   12ae6:	2968      	cmp	r1, #104	; 0x68
   12ae8:	bf03      	ittte	eq
   12aea:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12aee:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12af2:	f108 0801 	addeq.w	r8, r8, #1
   12af6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12afa:	e51c      	b.n	12536 <_vfiprintf_r+0xe6>
   12afc:	f046 0310 	orr.w	r3, r6, #16
   12b00:	9303      	str	r3, [sp, #12]
   12b02:	9b03      	ldr	r3, [sp, #12]
   12b04:	f013 0220 	ands.w	r2, r3, #32
   12b08:	f000 8206 	beq.w	12f18 <_vfiprintf_r+0xac8>
   12b0c:	9b07      	ldr	r3, [sp, #28]
   12b0e:	3307      	adds	r3, #7
   12b10:	f023 0307 	bic.w	r3, r3, #7
   12b14:	4619      	mov	r1, r3
   12b16:	685a      	ldr	r2, [r3, #4]
   12b18:	f851 3b08 	ldr.w	r3, [r1], #8
   12b1c:	9107      	str	r1, [sp, #28]
   12b1e:	2101      	movs	r1, #1
   12b20:	e60d      	b.n	1273e <_vfiprintf_r+0x2ee>
   12b22:	9a07      	ldr	r2, [sp, #28]
   12b24:	f046 0302 	orr.w	r3, r6, #2
   12b28:	9303      	str	r3, [sp, #12]
   12b2a:	f852 3b04 	ldr.w	r3, [r2], #4
   12b2e:	9207      	str	r2, [sp, #28]
   12b30:	f647 0230 	movw	r2, #30768	; 0x7830
   12b34:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12b38:	4ab8      	ldr	r2, [pc, #736]	; (12e1c <_vfiprintf_r+0x9cc>)
   12b3a:	920c      	str	r2, [sp, #48]	; 0x30
   12b3c:	2102      	movs	r1, #2
   12b3e:	2200      	movs	r2, #0
   12b40:	e5fd      	b.n	1273e <_vfiprintf_r+0x2ee>
   12b42:	06b7      	lsls	r7, r6, #26
   12b44:	f100 8248 	bmi.w	12fd8 <_vfiprintf_r+0xb88>
   12b48:	06f5      	lsls	r5, r6, #27
   12b4a:	f100 8346 	bmi.w	131da <_vfiprintf_r+0xd8a>
   12b4e:	0674      	lsls	r4, r6, #25
   12b50:	f100 83d5 	bmi.w	132fe <_vfiprintf_r+0xeae>
   12b54:	05b0      	lsls	r0, r6, #22
   12b56:	f140 8340 	bpl.w	131da <_vfiprintf_r+0xd8a>
   12b5a:	9b07      	ldr	r3, [sp, #28]
   12b5c:	9905      	ldr	r1, [sp, #20]
   12b5e:	f853 2b04 	ldr.w	r2, [r3], #4
   12b62:	9307      	str	r3, [sp, #28]
   12b64:	7011      	strb	r1, [r2, #0]
   12b66:	e4be      	b.n	124e6 <_vfiprintf_r+0x96>
   12b68:	9603      	str	r6, [sp, #12]
   12b6a:	2901      	cmp	r1, #1
   12b6c:	f43f ad8c 	beq.w	12688 <_vfiprintf_r+0x238>
   12b70:	2902      	cmp	r1, #2
   12b72:	ac44      	add	r4, sp, #272	; 0x110
   12b74:	d111      	bne.n	12b9a <_vfiprintf_r+0x74a>
   12b76:	980c      	ldr	r0, [sp, #48]	; 0x30
   12b78:	f003 010f 	and.w	r1, r3, #15
   12b7c:	091b      	lsrs	r3, r3, #4
   12b7e:	5c41      	ldrb	r1, [r0, r1]
   12b80:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12b84:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12b88:	0912      	lsrs	r2, r2, #4
   12b8a:	ea53 0102 	orrs.w	r1, r3, r2
   12b8e:	d1f3      	bne.n	12b78 <_vfiprintf_r+0x728>
   12b90:	9e03      	ldr	r6, [sp, #12]
   12b92:	ab44      	add	r3, sp, #272	; 0x110
   12b94:	1b1b      	subs	r3, r3, r4
   12b96:	9304      	str	r3, [sp, #16]
   12b98:	e583      	b.n	126a2 <_vfiprintf_r+0x252>
   12b9a:	f003 0107 	and.w	r1, r3, #7
   12b9e:	08db      	lsrs	r3, r3, #3
   12ba0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12ba4:	08d2      	lsrs	r2, r2, #3
   12ba6:	3130      	adds	r1, #48	; 0x30
   12ba8:	ea53 0502 	orrs.w	r5, r3, r2
   12bac:	4620      	mov	r0, r4
   12bae:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12bb2:	d1f2      	bne.n	12b9a <_vfiprintf_r+0x74a>
   12bb4:	9e03      	ldr	r6, [sp, #12]
   12bb6:	07f3      	lsls	r3, r6, #31
   12bb8:	d5eb      	bpl.n	12b92 <_vfiprintf_r+0x742>
   12bba:	2930      	cmp	r1, #48	; 0x30
   12bbc:	d0e8      	beq.n	12b90 <_vfiprintf_r+0x740>
   12bbe:	2330      	movs	r3, #48	; 0x30
   12bc0:	3802      	subs	r0, #2
   12bc2:	f804 3c01 	strb.w	r3, [r4, #-1]
   12bc6:	ab44      	add	r3, sp, #272	; 0x110
   12bc8:	1a1b      	subs	r3, r3, r0
   12bca:	9e03      	ldr	r6, [sp, #12]
   12bcc:	9304      	str	r3, [sp, #16]
   12bce:	4604      	mov	r4, r0
   12bd0:	e567      	b.n	126a2 <_vfiprintf_r+0x252>
   12bd2:	9b04      	ldr	r3, [sp, #16]
   12bd4:	941b      	str	r4, [sp, #108]	; 0x6c
   12bd6:	2201      	movs	r2, #1
   12bd8:	931c      	str	r3, [sp, #112]	; 0x70
   12bda:	931a      	str	r3, [sp, #104]	; 0x68
   12bdc:	9219      	str	r2, [sp, #100]	; 0x64
   12bde:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12be2:	f109 0908 	add.w	r9, r9, #8
   12be6:	e69d      	b.n	12924 <_vfiprintf_r+0x4d4>
   12be8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bec:	e47b      	b.n	124e6 <_vfiprintf_r+0x96>
   12bee:	9a06      	ldr	r2, [sp, #24]
   12bf0:	9d03      	ldr	r5, [sp, #12]
   12bf2:	1b55      	subs	r5, r2, r5
   12bf4:	2d00      	cmp	r5, #0
   12bf6:	f77f ae76 	ble.w	128e6 <_vfiprintf_r+0x496>
   12bfa:	2d10      	cmp	r5, #16
   12bfc:	f340 83bb 	ble.w	13376 <_vfiprintf_r+0xf26>
   12c00:	9409      	str	r4, [sp, #36]	; 0x24
   12c02:	ee18 4a10 	vmov	r4, s16
   12c06:	e007      	b.n	12c18 <_vfiprintf_r+0x7c8>
   12c08:	f100 0c02 	add.w	ip, r0, #2
   12c0c:	f109 0908 	add.w	r9, r9, #8
   12c10:	4610      	mov	r0, r2
   12c12:	3d10      	subs	r5, #16
   12c14:	2d10      	cmp	r5, #16
   12c16:	dd1e      	ble.n	12c56 <_vfiprintf_r+0x806>
   12c18:	4981      	ldr	r1, [pc, #516]	; (12e20 <_vfiprintf_r+0x9d0>)
   12c1a:	f8c9 1000 	str.w	r1, [r9]
   12c1e:	1c42      	adds	r2, r0, #1
   12c20:	3310      	adds	r3, #16
   12c22:	2110      	movs	r1, #16
   12c24:	2a07      	cmp	r2, #7
   12c26:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12c2a:	f8c9 1004 	str.w	r1, [r9, #4]
   12c2e:	ddeb      	ble.n	12c08 <_vfiprintf_r+0x7b8>
   12c30:	aa18      	add	r2, sp, #96	; 0x60
   12c32:	2b00      	cmp	r3, #0
   12c34:	d074      	beq.n	12d20 <_vfiprintf_r+0x8d0>
   12c36:	4621      	mov	r1, r4
   12c38:	4658      	mov	r0, fp
   12c3a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c3e:	f7ff fbcb 	bl	123d8 <__sprint_r.part.0>
   12c42:	2800      	cmp	r0, #0
   12c44:	f47f addb 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12c48:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c4c:	3d10      	subs	r5, #16
   12c4e:	2d10      	cmp	r5, #16
   12c50:	f100 0c01 	add.w	ip, r0, #1
   12c54:	dce0      	bgt.n	12c18 <_vfiprintf_r+0x7c8>
   12c56:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12c58:	4a71      	ldr	r2, [pc, #452]	; (12e20 <_vfiprintf_r+0x9d0>)
   12c5a:	f8c9 5004 	str.w	r5, [r9, #4]
   12c5e:	442b      	add	r3, r5
   12c60:	f1bc 0f07 	cmp.w	ip, #7
   12c64:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12c68:	f8c9 2000 	str.w	r2, [r9]
   12c6c:	f340 8194 	ble.w	12f98 <_vfiprintf_r+0xb48>
   12c70:	2b00      	cmp	r3, #0
   12c72:	f000 831f 	beq.w	132b4 <_vfiprintf_r+0xe64>
   12c76:	ee18 1a10 	vmov	r1, s16
   12c7a:	aa18      	add	r2, sp, #96	; 0x60
   12c7c:	4658      	mov	r0, fp
   12c7e:	f7ff fbab 	bl	123d8 <__sprint_r.part.0>
   12c82:	2800      	cmp	r0, #0
   12c84:	f47f adbb 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12c88:	9a04      	ldr	r2, [sp, #16]
   12c8a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c8e:	1abd      	subs	r5, r7, r2
   12c90:	2d00      	cmp	r5, #0
   12c92:	f100 0101 	add.w	r1, r0, #1
   12c96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c9a:	f77f ae29 	ble.w	128f0 <_vfiprintf_r+0x4a0>
   12c9e:	2d10      	cmp	r5, #16
   12ca0:	dd29      	ble.n	12cf6 <_vfiprintf_r+0x8a6>
   12ca2:	9409      	str	r4, [sp, #36]	; 0x24
   12ca4:	2710      	movs	r7, #16
   12ca6:	ee18 4a10 	vmov	r4, s16
   12caa:	e007      	b.n	12cbc <_vfiprintf_r+0x86c>
   12cac:	f100 0c02 	add.w	ip, r0, #2
   12cb0:	f109 0908 	add.w	r9, r9, #8
   12cb4:	4610      	mov	r0, r2
   12cb6:	3d10      	subs	r5, #16
   12cb8:	2d10      	cmp	r5, #16
   12cba:	dd1a      	ble.n	12cf2 <_vfiprintf_r+0x8a2>
   12cbc:	1c42      	adds	r2, r0, #1
   12cbe:	4958      	ldr	r1, [pc, #352]	; (12e20 <_vfiprintf_r+0x9d0>)
   12cc0:	3310      	adds	r3, #16
   12cc2:	2a07      	cmp	r2, #7
   12cc4:	e9c9 1700 	strd	r1, r7, [r9]
   12cc8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12ccc:	ddee      	ble.n	12cac <_vfiprintf_r+0x85c>
   12cce:	aa18      	add	r2, sp, #96	; 0x60
   12cd0:	b303      	cbz	r3, 12d14 <_vfiprintf_r+0x8c4>
   12cd2:	4621      	mov	r1, r4
   12cd4:	4658      	mov	r0, fp
   12cd6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12cda:	f7ff fb7d 	bl	123d8 <__sprint_r.part.0>
   12cde:	2800      	cmp	r0, #0
   12ce0:	f47f ad8d 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12ce4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12ce8:	3d10      	subs	r5, #16
   12cea:	2d10      	cmp	r5, #16
   12cec:	f100 0c01 	add.w	ip, r0, #1
   12cf0:	dce4      	bgt.n	12cbc <_vfiprintf_r+0x86c>
   12cf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12cf4:	4661      	mov	r1, ip
   12cf6:	4a4a      	ldr	r2, [pc, #296]	; (12e20 <_vfiprintf_r+0x9d0>)
   12cf8:	f8c9 5004 	str.w	r5, [r9, #4]
   12cfc:	442b      	add	r3, r5
   12cfe:	2907      	cmp	r1, #7
   12d00:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12d04:	f8c9 2000 	str.w	r2, [r9]
   12d08:	f300 80e7 	bgt.w	12eda <_vfiprintf_r+0xa8a>
   12d0c:	f109 0908 	add.w	r9, r9, #8
   12d10:	3101      	adds	r1, #1
   12d12:	e5ed      	b.n	128f0 <_vfiprintf_r+0x4a0>
   12d14:	f04f 0c01 	mov.w	ip, #1
   12d18:	4618      	mov	r0, r3
   12d1a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d1e:	e7ca      	b.n	12cb6 <_vfiprintf_r+0x866>
   12d20:	f04f 0c01 	mov.w	ip, #1
   12d24:	4618      	mov	r0, r3
   12d26:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d2a:	e772      	b.n	12c12 <_vfiprintf_r+0x7c2>
   12d2c:	2b00      	cmp	r3, #0
   12d2e:	f000 8104 	beq.w	12f3a <_vfiprintf_r+0xaea>
   12d32:	ee18 1a10 	vmov	r1, s16
   12d36:	aa18      	add	r2, sp, #96	; 0x60
   12d38:	4658      	mov	r0, fp
   12d3a:	f7ff fb4d 	bl	123d8 <__sprint_r.part.0>
   12d3e:	2800      	cmp	r0, #0
   12d40:	f47f ad5d 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12d44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12d48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d4c:	1c41      	adds	r1, r0, #1
   12d4e:	e5a7      	b.n	128a0 <_vfiprintf_r+0x450>
   12d50:	2302      	movs	r3, #2
   12d52:	aa11      	add	r2, sp, #68	; 0x44
   12d54:	931c      	str	r3, [sp, #112]	; 0x70
   12d56:	921b      	str	r2, [sp, #108]	; 0x6c
   12d58:	2101      	movs	r1, #1
   12d5a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d5e:	4608      	mov	r0, r1
   12d60:	f109 0908 	add.w	r9, r9, #8
   12d64:	1c41      	adds	r1, r0, #1
   12d66:	e5ba      	b.n	128de <_vfiprintf_r+0x48e>
   12d68:	2d10      	cmp	r5, #16
   12d6a:	f340 82e5 	ble.w	13338 <_vfiprintf_r+0xee8>
   12d6e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12d72:	940f      	str	r4, [sp, #60]	; 0x3c
   12d74:	4608      	mov	r0, r1
   12d76:	ee18 4a10 	vmov	r4, s16
   12d7a:	e007      	b.n	12d8c <_vfiprintf_r+0x93c>
   12d7c:	f100 0c02 	add.w	ip, r0, #2
   12d80:	f109 0908 	add.w	r9, r9, #8
   12d84:	4610      	mov	r0, r2
   12d86:	3d10      	subs	r5, #16
   12d88:	2d10      	cmp	r5, #16
   12d8a:	dd1d      	ble.n	12dc8 <_vfiprintf_r+0x978>
   12d8c:	4925      	ldr	r1, [pc, #148]	; (12e24 <_vfiprintf_r+0x9d4>)
   12d8e:	f8c9 1000 	str.w	r1, [r9]
   12d92:	1c42      	adds	r2, r0, #1
   12d94:	3310      	adds	r3, #16
   12d96:	2110      	movs	r1, #16
   12d98:	2a07      	cmp	r2, #7
   12d9a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12d9e:	f8c9 1004 	str.w	r1, [r9, #4]
   12da2:	ddeb      	ble.n	12d7c <_vfiprintf_r+0x92c>
   12da4:	aa18      	add	r2, sp, #96	; 0x60
   12da6:	b303      	cbz	r3, 12dea <_vfiprintf_r+0x99a>
   12da8:	4621      	mov	r1, r4
   12daa:	4658      	mov	r0, fp
   12dac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12db0:	f7ff fb12 	bl	123d8 <__sprint_r.part.0>
   12db4:	2800      	cmp	r0, #0
   12db6:	f47f ad22 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12dba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12dbe:	3d10      	subs	r5, #16
   12dc0:	2d10      	cmp	r5, #16
   12dc2:	f100 0c01 	add.w	ip, r0, #1
   12dc6:	dce1      	bgt.n	12d8c <_vfiprintf_r+0x93c>
   12dc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   12dca:	4660      	mov	r0, ip
   12dcc:	4a15      	ldr	r2, [pc, #84]	; (12e24 <_vfiprintf_r+0x9d4>)
   12dce:	f8c9 5004 	str.w	r5, [r9, #4]
   12dd2:	442b      	add	r3, r5
   12dd4:	2807      	cmp	r0, #7
   12dd6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12dda:	f8c9 2000 	str.w	r2, [r9]
   12dde:	f300 80c1 	bgt.w	12f64 <_vfiprintf_r+0xb14>
   12de2:	f109 0908 	add.w	r9, r9, #8
   12de6:	1c41      	adds	r1, r0, #1
   12de8:	e546      	b.n	12878 <_vfiprintf_r+0x428>
   12dea:	4618      	mov	r0, r3
   12dec:	f04f 0c01 	mov.w	ip, #1
   12df0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12df4:	e7c7      	b.n	12d86 <_vfiprintf_r+0x936>
   12df6:	0776      	lsls	r6, r6, #29
   12df8:	9319      	str	r3, [sp, #100]	; 0x64
   12dfa:	d553      	bpl.n	12ea4 <_vfiprintf_r+0xa54>
   12dfc:	9a06      	ldr	r2, [sp, #24]
   12dfe:	9903      	ldr	r1, [sp, #12]
   12e00:	1a54      	subs	r4, r2, r1
   12e02:	2c00      	cmp	r4, #0
   12e04:	dd4e      	ble.n	12ea4 <_vfiprintf_r+0xa54>
   12e06:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e0a:	2c10      	cmp	r4, #16
   12e0c:	f340 82b0 	ble.w	13370 <_vfiprintf_r+0xf20>
   12e10:	9919      	ldr	r1, [sp, #100]	; 0x64
   12e12:	ee18 6a10 	vmov	r6, s16
   12e16:	2510      	movs	r5, #16
   12e18:	e00d      	b.n	12e36 <_vfiprintf_r+0x9e6>
   12e1a:	bf00      	nop
   12e1c:	20000d48 	.word	0x20000d48
   12e20:	2000858c 	.word	0x2000858c
   12e24:	20002804 	.word	0x20002804
   12e28:	1c88      	adds	r0, r1, #2
   12e2a:	f109 0908 	add.w	r9, r9, #8
   12e2e:	4611      	mov	r1, r2
   12e30:	3c10      	subs	r4, #16
   12e32:	2c10      	cmp	r4, #16
   12e34:	dd1a      	ble.n	12e6c <_vfiprintf_r+0xa1c>
   12e36:	1c4a      	adds	r2, r1, #1
   12e38:	48b3      	ldr	r0, [pc, #716]	; (13108 <_vfiprintf_r+0xcb8>)
   12e3a:	3310      	adds	r3, #16
   12e3c:	2a07      	cmp	r2, #7
   12e3e:	e9c9 0500 	strd	r0, r5, [r9]
   12e42:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12e46:	ddef      	ble.n	12e28 <_vfiprintf_r+0x9d8>
   12e48:	aa18      	add	r2, sp, #96	; 0x60
   12e4a:	b333      	cbz	r3, 12e9a <_vfiprintf_r+0xa4a>
   12e4c:	4631      	mov	r1, r6
   12e4e:	4658      	mov	r0, fp
   12e50:	f7ff fac2 	bl	123d8 <__sprint_r.part.0>
   12e54:	2800      	cmp	r0, #0
   12e56:	f47f acd2 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12e5a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12e5e:	3c10      	subs	r4, #16
   12e60:	2c10      	cmp	r4, #16
   12e62:	f101 0001 	add.w	r0, r1, #1
   12e66:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e6a:	dce4      	bgt.n	12e36 <_vfiprintf_r+0x9e6>
   12e6c:	4aa6      	ldr	r2, [pc, #664]	; (13108 <_vfiprintf_r+0xcb8>)
   12e6e:	f8c9 4004 	str.w	r4, [r9, #4]
   12e72:	4423      	add	r3, r4
   12e74:	2807      	cmp	r0, #7
   12e76:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12e7a:	f8c9 2000 	str.w	r2, [r9]
   12e7e:	f77f ad59 	ble.w	12934 <_vfiprintf_r+0x4e4>
   12e82:	b17b      	cbz	r3, 12ea4 <_vfiprintf_r+0xa54>
   12e84:	ee18 1a10 	vmov	r1, s16
   12e88:	aa18      	add	r2, sp, #96	; 0x60
   12e8a:	4658      	mov	r0, fp
   12e8c:	f7ff faa4 	bl	123d8 <__sprint_r.part.0>
   12e90:	2800      	cmp	r0, #0
   12e92:	f47f acb4 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12e96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12e98:	e54c      	b.n	12934 <_vfiprintf_r+0x4e4>
   12e9a:	2001      	movs	r0, #1
   12e9c:	4619      	mov	r1, r3
   12e9e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ea2:	e7c5      	b.n	12e30 <_vfiprintf_r+0x9e0>
   12ea4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   12ea8:	9903      	ldr	r1, [sp, #12]
   12eaa:	428a      	cmp	r2, r1
   12eac:	bfac      	ite	ge
   12eae:	189b      	addge	r3, r3, r2
   12eb0:	185b      	addlt	r3, r3, r1
   12eb2:	9305      	str	r3, [sp, #20]
   12eb4:	e549      	b.n	1294a <_vfiprintf_r+0x4fa>
   12eb6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12eba:	058f      	lsls	r7, r1, #22
   12ebc:	ee18 3a10 	vmov	r3, s16
   12ec0:	b28a      	uxth	r2, r1
   12ec2:	f53f aae8 	bmi.w	12496 <_vfiprintf_r+0x46>
   12ec6:	ee18 5a10 	vmov	r5, s16
   12eca:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12ecc:	f7f8 fd02 	bl	b8d4 <__retarget_lock_acquire_recursive>
   12ed0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   12ed4:	b28a      	uxth	r2, r1
   12ed6:	f7ff bade 	b.w	12496 <_vfiprintf_r+0x46>
   12eda:	2b00      	cmp	r3, #0
   12edc:	f43f ae79 	beq.w	12bd2 <_vfiprintf_r+0x782>
   12ee0:	ee18 1a10 	vmov	r1, s16
   12ee4:	aa18      	add	r2, sp, #96	; 0x60
   12ee6:	4658      	mov	r0, fp
   12ee8:	f7ff fa76 	bl	123d8 <__sprint_r.part.0>
   12eec:	2800      	cmp	r0, #0
   12eee:	f47f ac86 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12ef2:	9919      	ldr	r1, [sp, #100]	; 0x64
   12ef4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12ef6:	3101      	adds	r1, #1
   12ef8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12efc:	e4f8      	b.n	128f0 <_vfiprintf_r+0x4a0>
   12efe:	9219      	str	r2, [sp, #100]	; 0x64
   12f00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f04:	e45e      	b.n	127c4 <_vfiprintf_r+0x374>
   12f06:	2f00      	cmp	r7, #0
   12f08:	f47f abc3 	bne.w	12692 <_vfiprintf_r+0x242>
   12f0c:	9e03      	ldr	r6, [sp, #12]
   12f0e:	2700      	movs	r7, #0
   12f10:	9704      	str	r7, [sp, #16]
   12f12:	ac44      	add	r4, sp, #272	; 0x110
   12f14:	f7ff bbc5 	b.w	126a2 <_vfiprintf_r+0x252>
   12f18:	9b03      	ldr	r3, [sp, #12]
   12f1a:	f013 0310 	ands.w	r3, r3, #16
   12f1e:	d154      	bne.n	12fca <_vfiprintf_r+0xb7a>
   12f20:	9a03      	ldr	r2, [sp, #12]
   12f22:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12f26:	f000 816b 	beq.w	13200 <_vfiprintf_r+0xdb0>
   12f2a:	9907      	ldr	r1, [sp, #28]
   12f2c:	461a      	mov	r2, r3
   12f2e:	f851 3b04 	ldr.w	r3, [r1], #4
   12f32:	9107      	str	r1, [sp, #28]
   12f34:	b29b      	uxth	r3, r3
   12f36:	2101      	movs	r1, #1
   12f38:	e401      	b.n	1273e <_vfiprintf_r+0x2ee>
   12f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12f3c:	2a00      	cmp	r2, #0
   12f3e:	d164      	bne.n	1300a <_vfiprintf_r+0xbba>
   12f40:	4618      	mov	r0, r3
   12f42:	2101      	movs	r1, #1
   12f44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f48:	e4c9      	b.n	128de <_vfiprintf_r+0x48e>
   12f4a:	2101      	movs	r1, #1
   12f4c:	4618      	mov	r0, r3
   12f4e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f52:	e4c4      	b.n	128de <_vfiprintf_r+0x48e>
   12f54:	425b      	negs	r3, r3
   12f56:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12f5a:	9603      	str	r6, [sp, #12]
   12f5c:	202d      	movs	r0, #45	; 0x2d
   12f5e:	2101      	movs	r1, #1
   12f60:	f7ff bbee 	b.w	12740 <_vfiprintf_r+0x2f0>
   12f64:	2b00      	cmp	r3, #0
   12f66:	f000 8088 	beq.w	1307a <_vfiprintf_r+0xc2a>
   12f6a:	ee18 1a10 	vmov	r1, s16
   12f6e:	aa18      	add	r2, sp, #96	; 0x60
   12f70:	4658      	mov	r0, fp
   12f72:	f7ff fa31 	bl	123d8 <__sprint_r.part.0>
   12f76:	2800      	cmp	r0, #0
   12f78:	f47f ac41 	bne.w	127fe <_vfiprintf_r+0x3ae>
   12f7c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12f80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f84:	1c41      	adds	r1, r0, #1
   12f86:	e477      	b.n	12878 <_vfiprintf_r+0x428>
   12f88:	f898 1000 	ldrb.w	r1, [r8]
   12f8c:	9307      	str	r3, [sp, #28]
   12f8e:	f7ff bad2 	b.w	12536 <_vfiprintf_r+0xe6>
   12f92:	ac44      	add	r4, sp, #272	; 0x110
   12f94:	f7ff bb85 	b.w	126a2 <_vfiprintf_r+0x252>
   12f98:	f109 0908 	add.w	r9, r9, #8
   12f9c:	f10c 0101 	add.w	r1, ip, #1
   12fa0:	4660      	mov	r0, ip
   12fa2:	e4a0      	b.n	128e6 <_vfiprintf_r+0x496>
   12fa4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12fa8:	f040 8197 	bne.w	132da <_vfiprintf_r+0xe8a>
   12fac:	f851 3b04 	ldr.w	r3, [r1], #4
   12fb0:	9107      	str	r1, [sp, #28]
   12fb2:	f7ff bbc0 	b.w	12736 <_vfiprintf_r+0x2e6>
   12fb6:	05b3      	lsls	r3, r6, #22
   12fb8:	f100 8188 	bmi.w	132cc <_vfiprintf_r+0xe7c>
   12fbc:	f852 3b04 	ldr.w	r3, [r2], #4
   12fc0:	9207      	str	r2, [sp, #28]
   12fc2:	17da      	asrs	r2, r3, #31
   12fc4:	4611      	mov	r1, r2
   12fc6:	f7ff bb52 	b.w	1266e <_vfiprintf_r+0x21e>
   12fca:	9907      	ldr	r1, [sp, #28]
   12fcc:	f851 3b04 	ldr.w	r3, [r1], #4
   12fd0:	9107      	str	r1, [sp, #28]
   12fd2:	2101      	movs	r1, #1
   12fd4:	f7ff bbb3 	b.w	1273e <_vfiprintf_r+0x2ee>
   12fd8:	9b07      	ldr	r3, [sp, #28]
   12fda:	9805      	ldr	r0, [sp, #20]
   12fdc:	f853 1b04 	ldr.w	r1, [r3], #4
   12fe0:	9307      	str	r3, [sp, #28]
   12fe2:	17c2      	asrs	r2, r0, #31
   12fe4:	e9c1 0200 	strd	r0, r2, [r1]
   12fe8:	f7ff ba7d 	b.w	124e6 <_vfiprintf_r+0x96>
   12fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12fee:	2b00      	cmp	r3, #0
   12ff0:	f43f ab26 	beq.w	12640 <_vfiprintf_r+0x1f0>
   12ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ff6:	781b      	ldrb	r3, [r3, #0]
   12ff8:	2b00      	cmp	r3, #0
   12ffa:	f43f ab21 	beq.w	12640 <_vfiprintf_r+0x1f0>
   12ffe:	f898 1000 	ldrb.w	r1, [r8]
   13002:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13006:	f7ff ba96 	b.w	12536 <_vfiprintf_r+0xe6>
   1300a:	2302      	movs	r3, #2
   1300c:	aa11      	add	r2, sp, #68	; 0x44
   1300e:	931c      	str	r3, [sp, #112]	; 0x70
   13010:	921b      	str	r2, [sp, #108]	; 0x6c
   13012:	2001      	movs	r0, #1
   13014:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13018:	e6a2      	b.n	12d60 <_vfiprintf_r+0x910>
   1301a:	9603      	str	r6, [sp, #12]
   1301c:	e571      	b.n	12b02 <_vfiprintf_r+0x6b2>
   1301e:	4b3b      	ldr	r3, [pc, #236]	; (1310c <_vfiprintf_r+0xcbc>)
   13020:	930c      	str	r3, [sp, #48]	; 0x30
   13022:	f016 0220 	ands.w	r2, r6, #32
   13026:	d059      	beq.n	130dc <_vfiprintf_r+0xc8c>
   13028:	9b07      	ldr	r3, [sp, #28]
   1302a:	3307      	adds	r3, #7
   1302c:	f023 0307 	bic.w	r3, r3, #7
   13030:	4618      	mov	r0, r3
   13032:	685a      	ldr	r2, [r3, #4]
   13034:	f850 3b08 	ldr.w	r3, [r0], #8
   13038:	9007      	str	r0, [sp, #28]
   1303a:	07f4      	lsls	r4, r6, #31
   1303c:	d509      	bpl.n	13052 <_vfiprintf_r+0xc02>
   1303e:	ea53 0002 	orrs.w	r0, r3, r2
   13042:	d006      	beq.n	13052 <_vfiprintf_r+0xc02>
   13044:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13048:	2130      	movs	r1, #48	; 0x30
   1304a:	f046 0602 	orr.w	r6, r6, #2
   1304e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13052:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13056:	9103      	str	r1, [sp, #12]
   13058:	2102      	movs	r1, #2
   1305a:	f7ff bb70 	b.w	1273e <_vfiprintf_r+0x2ee>
   1305e:	4b2c      	ldr	r3, [pc, #176]	; (13110 <_vfiprintf_r+0xcc0>)
   13060:	930c      	str	r3, [sp, #48]	; 0x30
   13062:	e7de      	b.n	13022 <_vfiprintf_r+0xbd2>
   13064:	9b07      	ldr	r3, [sp, #28]
   13066:	2101      	movs	r1, #1
   13068:	f853 2b04 	ldr.w	r2, [r3], #4
   1306c:	9103      	str	r1, [sp, #12]
   1306e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13072:	9307      	str	r3, [sp, #28]
   13074:	9104      	str	r1, [sp, #16]
   13076:	ac2b      	add	r4, sp, #172	; 0xac
   13078:	e4df      	b.n	12a3a <_vfiprintf_r+0x5ea>
   1307a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1307e:	2a00      	cmp	r2, #0
   13080:	f040 8132 	bne.w	132e8 <_vfiprintf_r+0xe98>
   13084:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13086:	2a00      	cmp	r2, #0
   13088:	f47f ae62 	bne.w	12d50 <_vfiprintf_r+0x900>
   1308c:	4618      	mov	r0, r3
   1308e:	2101      	movs	r1, #1
   13090:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13094:	e427      	b.n	128e6 <_vfiprintf_r+0x496>
   13096:	2100      	movs	r1, #0
   13098:	2208      	movs	r2, #8
   1309a:	a816      	add	r0, sp, #88	; 0x58
   1309c:	9413      	str	r4, [sp, #76]	; 0x4c
   1309e:	f7f8 fab5 	bl	b60c <memset>
   130a2:	1c79      	adds	r1, r7, #1
   130a4:	f000 80bc 	beq.w	13220 <_vfiprintf_r+0xdd0>
   130a8:	2500      	movs	r5, #0
   130aa:	9407      	str	r4, [sp, #28]
   130ac:	462c      	mov	r4, r5
   130ae:	e00c      	b.n	130ca <_vfiprintf_r+0xc7a>
   130b0:	a92b      	add	r1, sp, #172	; 0xac
   130b2:	4658      	mov	r0, fp
   130b4:	f7fe ff2e 	bl	11f14 <_wcrtomb_r>
   130b8:	1c42      	adds	r2, r0, #1
   130ba:	4420      	add	r0, r4
   130bc:	f000 816b 	beq.w	13396 <_vfiprintf_r+0xf46>
   130c0:	42b8      	cmp	r0, r7
   130c2:	dc08      	bgt.n	130d6 <_vfiprintf_r+0xc86>
   130c4:	f000 8170 	beq.w	133a8 <_vfiprintf_r+0xf58>
   130c8:	4604      	mov	r4, r0
   130ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   130cc:	5952      	ldr	r2, [r2, r5]
   130ce:	ab16      	add	r3, sp, #88	; 0x58
   130d0:	3504      	adds	r5, #4
   130d2:	2a00      	cmp	r2, #0
   130d4:	d1ec      	bne.n	130b0 <_vfiprintf_r+0xc60>
   130d6:	9404      	str	r4, [sp, #16]
   130d8:	9c07      	ldr	r4, [sp, #28]
   130da:	e0af      	b.n	1323c <_vfiprintf_r+0xdec>
   130dc:	f016 0310 	ands.w	r3, r6, #16
   130e0:	9807      	ldr	r0, [sp, #28]
   130e2:	d10c      	bne.n	130fe <_vfiprintf_r+0xcae>
   130e4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   130e8:	d005      	beq.n	130f6 <_vfiprintf_r+0xca6>
   130ea:	461a      	mov	r2, r3
   130ec:	f850 3b04 	ldr.w	r3, [r0], #4
   130f0:	9007      	str	r0, [sp, #28]
   130f2:	b29b      	uxth	r3, r3
   130f4:	e7a1      	b.n	1303a <_vfiprintf_r+0xbea>
   130f6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   130fa:	f040 80e1 	bne.w	132c0 <_vfiprintf_r+0xe70>
   130fe:	f850 3b04 	ldr.w	r3, [r0], #4
   13102:	9007      	str	r0, [sp, #28]
   13104:	e799      	b.n	1303a <_vfiprintf_r+0xbea>
   13106:	bf00      	nop
   13108:	20002804 	.word	0x20002804
   1310c:	20000d48 	.word	0x20000d48
   13110:	20000d5c 	.word	0x20000d5c
   13114:	9903      	ldr	r1, [sp, #12]
   13116:	9704      	str	r7, [sp, #16]
   13118:	ac44      	add	r4, sp, #272	; 0x110
   1311a:	469e      	mov	lr, r3
   1311c:	ee08 ba90 	vmov	s17, fp
   13120:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13124:	f04f 0c00 	mov.w	ip, #0
   13128:	4623      	mov	r3, r4
   1312a:	e006      	b.n	1313a <_vfiprintf_r+0xcea>
   1312c:	f1be 0f0a 	cmp.w	lr, #10
   13130:	f172 0200 	sbcs.w	r2, r2, #0
   13134:	d339      	bcc.n	131aa <_vfiprintf_r+0xd5a>
   13136:	46a6      	mov	lr, r4
   13138:	462a      	mov	r2, r5
   1313a:	49a6      	ldr	r1, [pc, #664]	; (133d4 <_vfiprintf_r+0xf84>)
   1313c:	eb1e 0002 	adds.w	r0, lr, r2
   13140:	f140 0000 	adc.w	r0, r0, #0
   13144:	460f      	mov	r7, r1
   13146:	fba1 1400 	umull	r1, r4, r1, r0
   1314a:	f024 0103 	bic.w	r1, r4, #3
   1314e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13152:	1a40      	subs	r0, r0, r1
   13154:	ebbe 0100 	subs.w	r1, lr, r0
   13158:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1315c:	f162 0400 	sbc.w	r4, r2, #0
   13160:	fb05 f501 	mul.w	r5, r5, r1
   13164:	fb07 5504 	mla	r5, r7, r4, r5
   13168:	fba1 4107 	umull	r4, r1, r1, r7
   1316c:	440d      	add	r5, r1
   1316e:	2705      	movs	r7, #5
   13170:	f004 0101 	and.w	r1, r4, #1
   13174:	fba1 1b07 	umull	r1, fp, r1, r7
   13178:	1809      	adds	r1, r1, r0
   1317a:	0864      	lsrs	r4, r4, #1
   1317c:	3130      	adds	r1, #48	; 0x30
   1317e:	f803 1c01 	strb.w	r1, [r3, #-1]
   13182:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13186:	f10c 0c01 	add.w	ip, ip, #1
   1318a:	3b01      	subs	r3, #1
   1318c:	086d      	lsrs	r5, r5, #1
   1318e:	2e00      	cmp	r6, #0
   13190:	d0cc      	beq.n	1312c <_vfiprintf_r+0xcdc>
   13192:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13194:	7809      	ldrb	r1, [r1, #0]
   13196:	4561      	cmp	r1, ip
   13198:	d1c8      	bne.n	1312c <_vfiprintf_r+0xcdc>
   1319a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1319e:	d0c5      	beq.n	1312c <_vfiprintf_r+0xcdc>
   131a0:	f1be 0f0a 	cmp.w	lr, #10
   131a4:	f172 0200 	sbcs.w	r2, r2, #0
   131a8:	d26c      	bcs.n	13284 <_vfiprintf_r+0xe34>
   131aa:	461c      	mov	r4, r3
   131ac:	ab44      	add	r3, sp, #272	; 0x110
   131ae:	1b1b      	subs	r3, r3, r4
   131b0:	9f04      	ldr	r7, [sp, #16]
   131b2:	9e03      	ldr	r6, [sp, #12]
   131b4:	9304      	str	r3, [sp, #16]
   131b6:	ee18 ba90 	vmov	fp, s17
   131ba:	f7ff ba72 	b.w	126a2 <_vfiprintf_r+0x252>
   131be:	9603      	str	r6, [sp, #12]
   131c0:	f7ff ba62 	b.w	12688 <_vfiprintf_r+0x238>
   131c4:	4658      	mov	r0, fp
   131c6:	f7f8 f82d 	bl	b224 <__sinit>
   131ca:	f7ff b95b 	b.w	12484 <_vfiprintf_r+0x34>
   131ce:	2901      	cmp	r1, #1
   131d0:	9603      	str	r6, [sp, #12]
   131d2:	f47f accd 	bne.w	12b70 <_vfiprintf_r+0x720>
   131d6:	f7ff ba5c 	b.w	12692 <_vfiprintf_r+0x242>
   131da:	9b07      	ldr	r3, [sp, #28]
   131dc:	9905      	ldr	r1, [sp, #20]
   131de:	f853 2b04 	ldr.w	r2, [r3], #4
   131e2:	6011      	str	r1, [r2, #0]
   131e4:	9307      	str	r3, [sp, #28]
   131e6:	f7ff b97e 	b.w	124e6 <_vfiprintf_r+0x96>
   131ea:	2f06      	cmp	r7, #6
   131ec:	463b      	mov	r3, r7
   131ee:	9a03      	ldr	r2, [sp, #12]
   131f0:	4c79      	ldr	r4, [pc, #484]	; (133d8 <_vfiprintf_r+0xf88>)
   131f2:	9207      	str	r2, [sp, #28]
   131f4:	bf28      	it	cs
   131f6:	2306      	movcs	r3, #6
   131f8:	9304      	str	r3, [sp, #16]
   131fa:	9303      	str	r3, [sp, #12]
   131fc:	f7ff bb25 	b.w	1284a <_vfiprintf_r+0x3fa>
   13200:	9b03      	ldr	r3, [sp, #12]
   13202:	9907      	ldr	r1, [sp, #28]
   13204:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13208:	bf14      	ite	ne
   1320a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1320e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13212:	9107      	str	r1, [sp, #28]
   13214:	bf1c      	itt	ne
   13216:	4602      	movne	r2, r0
   13218:	b2db      	uxtbne	r3, r3
   1321a:	2101      	movs	r1, #1
   1321c:	f7ff ba8f 	b.w	1273e <_vfiprintf_r+0x2ee>
   13220:	ab16      	add	r3, sp, #88	; 0x58
   13222:	9300      	str	r3, [sp, #0]
   13224:	2300      	movs	r3, #0
   13226:	4619      	mov	r1, r3
   13228:	aa13      	add	r2, sp, #76	; 0x4c
   1322a:	4658      	mov	r0, fp
   1322c:	f7fe fe98 	bl	11f60 <_wcsrtombs_r>
   13230:	4603      	mov	r3, r0
   13232:	3301      	adds	r3, #1
   13234:	9004      	str	r0, [sp, #16]
   13236:	f000 80ae 	beq.w	13396 <_vfiprintf_r+0xf46>
   1323a:	9413      	str	r4, [sp, #76]	; 0x4c
   1323c:	9b04      	ldr	r3, [sp, #16]
   1323e:	2b00      	cmp	r3, #0
   13240:	d030      	beq.n	132a4 <_vfiprintf_r+0xe54>
   13242:	2b63      	cmp	r3, #99	; 0x63
   13244:	dc63      	bgt.n	1330e <_vfiprintf_r+0xebe>
   13246:	2300      	movs	r3, #0
   13248:	9308      	str	r3, [sp, #32]
   1324a:	ac2b      	add	r4, sp, #172	; 0xac
   1324c:	2208      	movs	r2, #8
   1324e:	2100      	movs	r1, #0
   13250:	a816      	add	r0, sp, #88	; 0x58
   13252:	f7f8 f9db 	bl	b60c <memset>
   13256:	9d04      	ldr	r5, [sp, #16]
   13258:	ab16      	add	r3, sp, #88	; 0x58
   1325a:	9300      	str	r3, [sp, #0]
   1325c:	aa13      	add	r2, sp, #76	; 0x4c
   1325e:	462b      	mov	r3, r5
   13260:	4621      	mov	r1, r4
   13262:	4658      	mov	r0, fp
   13264:	f7fe fe7c 	bl	11f60 <_wcsrtombs_r>
   13268:	4285      	cmp	r5, r0
   1326a:	f040 80ab 	bne.w	133c4 <_vfiprintf_r+0xf74>
   1326e:	9b03      	ldr	r3, [sp, #12]
   13270:	9a04      	ldr	r2, [sp, #16]
   13272:	9307      	str	r3, [sp, #28]
   13274:	2300      	movs	r3, #0
   13276:	54a3      	strb	r3, [r4, r2]
   13278:	461f      	mov	r7, r3
   1327a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1327e:	9303      	str	r3, [sp, #12]
   13280:	f7ff ba16 	b.w	126b0 <_vfiprintf_r+0x260>
   13284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13286:	990d      	ldr	r1, [sp, #52]	; 0x34
   13288:	1a9b      	subs	r3, r3, r2
   1328a:	4618      	mov	r0, r3
   1328c:	9308      	str	r3, [sp, #32]
   1328e:	f7f8 fa55 	bl	b73c <strncpy>
   13292:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13294:	9b08      	ldr	r3, [sp, #32]
   13296:	784a      	ldrb	r2, [r1, #1]
   13298:	b10a      	cbz	r2, 1329e <_vfiprintf_r+0xe4e>
   1329a:	3101      	adds	r1, #1
   1329c:	910b      	str	r1, [sp, #44]	; 0x2c
   1329e:	f04f 0c00 	mov.w	ip, #0
   132a2:	e748      	b.n	13136 <_vfiprintf_r+0xce6>
   132a4:	9b03      	ldr	r3, [sp, #12]
   132a6:	9307      	str	r3, [sp, #28]
   132a8:	9b04      	ldr	r3, [sp, #16]
   132aa:	9303      	str	r3, [sp, #12]
   132ac:	461f      	mov	r7, r3
   132ae:	9308      	str	r3, [sp, #32]
   132b0:	f7ff b9fe 	b.w	126b0 <_vfiprintf_r+0x260>
   132b4:	2101      	movs	r1, #1
   132b6:	4618      	mov	r0, r3
   132b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132bc:	f7ff bb13 	b.w	128e6 <_vfiprintf_r+0x496>
   132c0:	f850 3b04 	ldr.w	r3, [r0], #4
   132c4:	9007      	str	r0, [sp, #28]
   132c6:	4622      	mov	r2, r4
   132c8:	b2db      	uxtb	r3, r3
   132ca:	e6b6      	b.n	1303a <_vfiprintf_r+0xbea>
   132cc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   132d0:	9207      	str	r2, [sp, #28]
   132d2:	17da      	asrs	r2, r3, #31
   132d4:	4611      	mov	r1, r2
   132d6:	f7ff b9ca 	b.w	1266e <_vfiprintf_r+0x21e>
   132da:	f851 3b04 	ldr.w	r3, [r1], #4
   132de:	9107      	str	r1, [sp, #28]
   132e0:	4602      	mov	r2, r0
   132e2:	b2db      	uxtb	r3, r3
   132e4:	f7ff ba27 	b.w	12736 <_vfiprintf_r+0x2e6>
   132e8:	2301      	movs	r3, #1
   132ea:	931c      	str	r3, [sp, #112]	; 0x70
   132ec:	2101      	movs	r1, #1
   132ee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   132f2:	931b      	str	r3, [sp, #108]	; 0x6c
   132f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132f8:	460b      	mov	r3, r1
   132fa:	f7ff bacd 	b.w	12898 <_vfiprintf_r+0x448>
   132fe:	9b07      	ldr	r3, [sp, #28]
   13300:	9905      	ldr	r1, [sp, #20]
   13302:	f853 2b04 	ldr.w	r2, [r3], #4
   13306:	9307      	str	r3, [sp, #28]
   13308:	8011      	strh	r1, [r2, #0]
   1330a:	f7ff b8ec 	b.w	124e6 <_vfiprintf_r+0x96>
   1330e:	1c59      	adds	r1, r3, #1
   13310:	4658      	mov	r0, fp
   13312:	f7f6 fa53 	bl	97bc <_malloc_r>
   13316:	4604      	mov	r4, r0
   13318:	2800      	cmp	r0, #0
   1331a:	d03c      	beq.n	13396 <_vfiprintf_r+0xf46>
   1331c:	9008      	str	r0, [sp, #32]
   1331e:	e795      	b.n	1324c <_vfiprintf_r+0xdfc>
   13320:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13322:	f7f8 fad9 	bl	b8d8 <__retarget_lock_release_recursive>
   13326:	f7ff b9e9 	b.w	126fc <_vfiprintf_r+0x2ac>
   1332a:	9b03      	ldr	r3, [sp, #12]
   1332c:	9307      	str	r3, [sp, #28]
   1332e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13332:	9f08      	ldr	r7, [sp, #32]
   13334:	f7ff b9bc 	b.w	126b0 <_vfiprintf_r+0x260>
   13338:	9819      	ldr	r0, [sp, #100]	; 0x64
   1333a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1333c:	3001      	adds	r0, #1
   1333e:	e545      	b.n	12dcc <_vfiprintf_r+0x97c>
   13340:	9b03      	ldr	r3, [sp, #12]
   13342:	9307      	str	r3, [sp, #28]
   13344:	4620      	mov	r0, r4
   13346:	f7f8 fcfb 	bl	bd40 <strlen>
   1334a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1334e:	462f      	mov	r7, r5
   13350:	9004      	str	r0, [sp, #16]
   13352:	9303      	str	r3, [sp, #12]
   13354:	9508      	str	r5, [sp, #32]
   13356:	f7ff b9ab 	b.w	126b0 <_vfiprintf_r+0x260>
   1335a:	ee18 1a10 	vmov	r1, s16
   1335e:	aa18      	add	r2, sp, #96	; 0x60
   13360:	4658      	mov	r0, fp
   13362:	f7ff f839 	bl	123d8 <__sprint_r.part.0>
   13366:	2800      	cmp	r0, #0
   13368:	f43f aa36 	beq.w	127d8 <_vfiprintf_r+0x388>
   1336c:	f7ff ba4d 	b.w	1280a <_vfiprintf_r+0x3ba>
   13370:	9819      	ldr	r0, [sp, #100]	; 0x64
   13372:	3001      	adds	r0, #1
   13374:	e57a      	b.n	12e6c <_vfiprintf_r+0xa1c>
   13376:	468c      	mov	ip, r1
   13378:	e46e      	b.n	12c58 <_vfiprintf_r+0x808>
   1337a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1337c:	07d9      	lsls	r1, r3, #31
   1337e:	d405      	bmi.n	1338c <_vfiprintf_r+0xf3c>
   13380:	89ab      	ldrh	r3, [r5, #12]
   13382:	059a      	lsls	r2, r3, #22
   13384:	d402      	bmi.n	1338c <_vfiprintf_r+0xf3c>
   13386:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13388:	f7f8 faa6 	bl	b8d8 <__retarget_lock_release_recursive>
   1338c:	f04f 33ff 	mov.w	r3, #4294967295
   13390:	9305      	str	r3, [sp, #20]
   13392:	f7ff ba49 	b.w	12828 <_vfiprintf_r+0x3d8>
   13396:	ee18 2a10 	vmov	r2, s16
   1339a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1339e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133a2:	8193      	strh	r3, [r2, #12]
   133a4:	f7ff ba35 	b.w	12812 <_vfiprintf_r+0x3c2>
   133a8:	9c07      	ldr	r4, [sp, #28]
   133aa:	9704      	str	r7, [sp, #16]
   133ac:	e746      	b.n	1323c <_vfiprintf_r+0xdec>
   133ae:	9b07      	ldr	r3, [sp, #28]
   133b0:	f898 1001 	ldrb.w	r1, [r8, #1]
   133b4:	f853 7b04 	ldr.w	r7, [r3], #4
   133b8:	9307      	str	r3, [sp, #28]
   133ba:	4690      	mov	r8, r2
   133bc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   133c0:	f7ff b8b9 	b.w	12536 <_vfiprintf_r+0xe6>
   133c4:	ee18 2a10 	vmov	r2, s16
   133c8:	8993      	ldrh	r3, [r2, #12]
   133ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133ce:	8193      	strh	r3, [r2, #12]
   133d0:	f7ff ba15 	b.w	127fe <_vfiprintf_r+0x3ae>
   133d4:	cccccccd 	.word	0xcccccccd
   133d8:	20000d70 	.word	0x20000d70

000133dc <__sbprintf>:
   133dc:	b570      	push	{r4, r5, r6, lr}
   133de:	460c      	mov	r4, r1
   133e0:	8989      	ldrh	r1, [r1, #12]
   133e2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   133e6:	f021 0102 	bic.w	r1, r1, #2
   133ea:	f8ad 1014 	strh.w	r1, [sp, #20]
   133ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
   133f0:	911b      	str	r1, [sp, #108]	; 0x6c
   133f2:	89e1      	ldrh	r1, [r4, #14]
   133f4:	f8ad 1016 	strh.w	r1, [sp, #22]
   133f8:	69e1      	ldr	r1, [r4, #28]
   133fa:	9109      	str	r1, [sp, #36]	; 0x24
   133fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   133fe:	910b      	str	r1, [sp, #44]	; 0x2c
   13400:	a91c      	add	r1, sp, #112	; 0x70
   13402:	9102      	str	r1, [sp, #8]
   13404:	9106      	str	r1, [sp, #24]
   13406:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1340a:	4606      	mov	r6, r0
   1340c:	9104      	str	r1, [sp, #16]
   1340e:	9107      	str	r1, [sp, #28]
   13410:	a818      	add	r0, sp, #96	; 0x60
   13412:	2100      	movs	r1, #0
   13414:	e9cd 3200 	strd	r3, r2, [sp]
   13418:	9108      	str	r1, [sp, #32]
   1341a:	f7f8 fa57 	bl	b8cc <__retarget_lock_init_recursive>
   1341e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13422:	a902      	add	r1, sp, #8
   13424:	4630      	mov	r0, r6
   13426:	f7ff f813 	bl	12450 <_vfiprintf_r>
   1342a:	1e05      	subs	r5, r0, #0
   1342c:	db07      	blt.n	1343e <__sbprintf+0x62>
   1342e:	a902      	add	r1, sp, #8
   13430:	4630      	mov	r0, r6
   13432:	f7fd fad3 	bl	109dc <_fflush_r>
   13436:	2800      	cmp	r0, #0
   13438:	bf18      	it	ne
   1343a:	f04f 35ff 	movne.w	r5, #4294967295
   1343e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13442:	065b      	lsls	r3, r3, #25
   13444:	d503      	bpl.n	1344e <__sbprintf+0x72>
   13446:	89a3      	ldrh	r3, [r4, #12]
   13448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1344c:	81a3      	strh	r3, [r4, #12]
   1344e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13450:	f7f8 fa3e 	bl	b8d0 <__retarget_lock_close_recursive>
   13454:	4628      	mov	r0, r5
   13456:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1345a:	bd70      	pop	{r4, r5, r6, pc}

0001345c <__sfvwrite_r>:
   1345c:	6893      	ldr	r3, [r2, #8]
   1345e:	2b00      	cmp	r3, #0
   13460:	f000 8085 	beq.w	1356e <__sfvwrite_r+0x112>
   13464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13468:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1346c:	460c      	mov	r4, r1
   1346e:	0719      	lsls	r1, r3, #28
   13470:	4680      	mov	r8, r0
   13472:	b083      	sub	sp, #12
   13474:	4617      	mov	r7, r2
   13476:	b298      	uxth	r0, r3
   13478:	d525      	bpl.n	134c6 <__sfvwrite_r+0x6a>
   1347a:	6923      	ldr	r3, [r4, #16]
   1347c:	b31b      	cbz	r3, 134c6 <__sfvwrite_r+0x6a>
   1347e:	f010 0302 	ands.w	r3, r0, #2
   13482:	683d      	ldr	r5, [r7, #0]
   13484:	d02d      	beq.n	134e2 <__sfvwrite_r+0x86>
   13486:	f04f 0a00 	mov.w	sl, #0
   1348a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1374c <__sfvwrite_r+0x2f0>
   1348e:	4656      	mov	r6, sl
   13490:	46b9      	mov	r9, r7
   13492:	455e      	cmp	r6, fp
   13494:	4633      	mov	r3, r6
   13496:	4652      	mov	r2, sl
   13498:	bf28      	it	cs
   1349a:	465b      	movcs	r3, fp
   1349c:	4640      	mov	r0, r8
   1349e:	2e00      	cmp	r6, #0
   134a0:	d052      	beq.n	13548 <__sfvwrite_r+0xec>
   134a2:	69e1      	ldr	r1, [r4, #28]
   134a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   134a6:	47b8      	blx	r7
   134a8:	2800      	cmp	r0, #0
   134aa:	dd56      	ble.n	1355a <__sfvwrite_r+0xfe>
   134ac:	f8d9 3008 	ldr.w	r3, [r9, #8]
   134b0:	1a1b      	subs	r3, r3, r0
   134b2:	4482      	add	sl, r0
   134b4:	1a36      	subs	r6, r6, r0
   134b6:	f8c9 3008 	str.w	r3, [r9, #8]
   134ba:	2b00      	cmp	r3, #0
   134bc:	d1e9      	bne.n	13492 <__sfvwrite_r+0x36>
   134be:	2000      	movs	r0, #0
   134c0:	b003      	add	sp, #12
   134c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c6:	4621      	mov	r1, r4
   134c8:	4640      	mov	r0, r8
   134ca:	f000 f97d 	bl	137c8 <__swsetup_r>
   134ce:	2800      	cmp	r0, #0
   134d0:	f040 8138 	bne.w	13744 <__sfvwrite_r+0x2e8>
   134d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   134d8:	683d      	ldr	r5, [r7, #0]
   134da:	b298      	uxth	r0, r3
   134dc:	f010 0302 	ands.w	r3, r0, #2
   134e0:	d1d1      	bne.n	13486 <__sfvwrite_r+0x2a>
   134e2:	f010 0901 	ands.w	r9, r0, #1
   134e6:	d144      	bne.n	13572 <__sfvwrite_r+0x116>
   134e8:	464e      	mov	r6, r9
   134ea:	9700      	str	r7, [sp, #0]
   134ec:	b346      	cbz	r6, 13540 <__sfvwrite_r+0xe4>
   134ee:	0582      	lsls	r2, r0, #22
   134f0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   134f4:	f140 8085 	bpl.w	13602 <__sfvwrite_r+0x1a6>
   134f8:	45b3      	cmp	fp, r6
   134fa:	465a      	mov	r2, fp
   134fc:	f200 80b4 	bhi.w	13668 <__sfvwrite_r+0x20c>
   13500:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13504:	f040 80c1 	bne.w	1368a <__sfvwrite_r+0x22e>
   13508:	6820      	ldr	r0, [r4, #0]
   1350a:	9201      	str	r2, [sp, #4]
   1350c:	4649      	mov	r1, r9
   1350e:	f7f8 f801 	bl	b514 <memmove>
   13512:	68a3      	ldr	r3, [r4, #8]
   13514:	9a01      	ldr	r2, [sp, #4]
   13516:	eba3 010b 	sub.w	r1, r3, fp
   1351a:	6823      	ldr	r3, [r4, #0]
   1351c:	60a1      	str	r1, [r4, #8]
   1351e:	4413      	add	r3, r2
   13520:	46b2      	mov	sl, r6
   13522:	6023      	str	r3, [r4, #0]
   13524:	2600      	movs	r6, #0
   13526:	9a00      	ldr	r2, [sp, #0]
   13528:	6893      	ldr	r3, [r2, #8]
   1352a:	eba3 030a 	sub.w	r3, r3, sl
   1352e:	44d1      	add	r9, sl
   13530:	6093      	str	r3, [r2, #8]
   13532:	2b00      	cmp	r3, #0
   13534:	d0c3      	beq.n	134be <__sfvwrite_r+0x62>
   13536:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1353a:	b280      	uxth	r0, r0
   1353c:	2e00      	cmp	r6, #0
   1353e:	d1d6      	bne.n	134ee <__sfvwrite_r+0x92>
   13540:	e9d5 9600 	ldrd	r9, r6, [r5]
   13544:	3508      	adds	r5, #8
   13546:	e7d1      	b.n	134ec <__sfvwrite_r+0x90>
   13548:	e9d5 a600 	ldrd	sl, r6, [r5]
   1354c:	3508      	adds	r5, #8
   1354e:	e7a0      	b.n	13492 <__sfvwrite_r+0x36>
   13550:	4621      	mov	r1, r4
   13552:	4640      	mov	r0, r8
   13554:	f7fd fa42 	bl	109dc <_fflush_r>
   13558:	b388      	cbz	r0, 135be <__sfvwrite_r+0x162>
   1355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1355e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13562:	f04f 30ff 	mov.w	r0, #4294967295
   13566:	81a3      	strh	r3, [r4, #12]
   13568:	b003      	add	sp, #12
   1356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1356e:	2000      	movs	r0, #0
   13570:	4770      	bx	lr
   13572:	461e      	mov	r6, r3
   13574:	46ba      	mov	sl, r7
   13576:	4699      	mov	r9, r3
   13578:	4618      	mov	r0, r3
   1357a:	9500      	str	r5, [sp, #0]
   1357c:	461f      	mov	r7, r3
   1357e:	b366      	cbz	r6, 135da <__sfvwrite_r+0x17e>
   13580:	2800      	cmp	r0, #0
   13582:	d032      	beq.n	135ea <__sfvwrite_r+0x18e>
   13584:	464a      	mov	r2, r9
   13586:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1358a:	6820      	ldr	r0, [r4, #0]
   1358c:	68a5      	ldr	r5, [r4, #8]
   1358e:	42b2      	cmp	r2, r6
   13590:	bf28      	it	cs
   13592:	4632      	movcs	r2, r6
   13594:	4288      	cmp	r0, r1
   13596:	d904      	bls.n	135a2 <__sfvwrite_r+0x146>
   13598:	eb05 0b03 	add.w	fp, r5, r3
   1359c:	455a      	cmp	r2, fp
   1359e:	f300 80a7 	bgt.w	136f0 <__sfvwrite_r+0x294>
   135a2:	4293      	cmp	r3, r2
   135a4:	dc64      	bgt.n	13670 <__sfvwrite_r+0x214>
   135a6:	69e1      	ldr	r1, [r4, #28]
   135a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   135aa:	463a      	mov	r2, r7
   135ac:	4640      	mov	r0, r8
   135ae:	47a8      	blx	r5
   135b0:	f1b0 0b00 	subs.w	fp, r0, #0
   135b4:	ddd1      	ble.n	1355a <__sfvwrite_r+0xfe>
   135b6:	ebb9 090b 	subs.w	r9, r9, fp
   135ba:	d0c9      	beq.n	13550 <__sfvwrite_r+0xf4>
   135bc:	2001      	movs	r0, #1
   135be:	f8da 3008 	ldr.w	r3, [sl, #8]
   135c2:	eba3 030b 	sub.w	r3, r3, fp
   135c6:	445f      	add	r7, fp
   135c8:	eba6 060b 	sub.w	r6, r6, fp
   135cc:	f8ca 3008 	str.w	r3, [sl, #8]
   135d0:	2b00      	cmp	r3, #0
   135d2:	f43f af74 	beq.w	134be <__sfvwrite_r+0x62>
   135d6:	2e00      	cmp	r6, #0
   135d8:	d1d2      	bne.n	13580 <__sfvwrite_r+0x124>
   135da:	9a00      	ldr	r2, [sp, #0]
   135dc:	6856      	ldr	r6, [r2, #4]
   135de:	4613      	mov	r3, r2
   135e0:	3208      	adds	r2, #8
   135e2:	9200      	str	r2, [sp, #0]
   135e4:	2e00      	cmp	r6, #0
   135e6:	d0f8      	beq.n	135da <__sfvwrite_r+0x17e>
   135e8:	681f      	ldr	r7, [r3, #0]
   135ea:	4632      	mov	r2, r6
   135ec:	210a      	movs	r1, #10
   135ee:	4638      	mov	r0, r7
   135f0:	f7f8 fb46 	bl	bc80 <memchr>
   135f4:	2800      	cmp	r0, #0
   135f6:	f000 809c 	beq.w	13732 <__sfvwrite_r+0x2d6>
   135fa:	3001      	adds	r0, #1
   135fc:	eba0 0907 	sub.w	r9, r0, r7
   13600:	e7c0      	b.n	13584 <__sfvwrite_r+0x128>
   13602:	6820      	ldr	r0, [r4, #0]
   13604:	6923      	ldr	r3, [r4, #16]
   13606:	4298      	cmp	r0, r3
   13608:	d816      	bhi.n	13638 <__sfvwrite_r+0x1dc>
   1360a:	6962      	ldr	r2, [r4, #20]
   1360c:	42b2      	cmp	r2, r6
   1360e:	d813      	bhi.n	13638 <__sfvwrite_r+0x1dc>
   13610:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13614:	42b3      	cmp	r3, r6
   13616:	bf28      	it	cs
   13618:	4633      	movcs	r3, r6
   1361a:	69e1      	ldr	r1, [r4, #28]
   1361c:	fb93 f3f2 	sdiv	r3, r3, r2
   13620:	6a67      	ldr	r7, [r4, #36]	; 0x24
   13622:	fb02 f303 	mul.w	r3, r2, r3
   13626:	4640      	mov	r0, r8
   13628:	464a      	mov	r2, r9
   1362a:	47b8      	blx	r7
   1362c:	f1b0 0a00 	subs.w	sl, r0, #0
   13630:	dd93      	ble.n	1355a <__sfvwrite_r+0xfe>
   13632:	eba6 060a 	sub.w	r6, r6, sl
   13636:	e776      	b.n	13526 <__sfvwrite_r+0xca>
   13638:	45b3      	cmp	fp, r6
   1363a:	46da      	mov	sl, fp
   1363c:	bf28      	it	cs
   1363e:	46b2      	movcs	sl, r6
   13640:	4652      	mov	r2, sl
   13642:	4649      	mov	r1, r9
   13644:	f7f7 ff66 	bl	b514 <memmove>
   13648:	68a3      	ldr	r3, [r4, #8]
   1364a:	6822      	ldr	r2, [r4, #0]
   1364c:	eba3 030a 	sub.w	r3, r3, sl
   13650:	4452      	add	r2, sl
   13652:	60a3      	str	r3, [r4, #8]
   13654:	6022      	str	r2, [r4, #0]
   13656:	2b00      	cmp	r3, #0
   13658:	d1eb      	bne.n	13632 <__sfvwrite_r+0x1d6>
   1365a:	4621      	mov	r1, r4
   1365c:	4640      	mov	r0, r8
   1365e:	f7fd f9bd 	bl	109dc <_fflush_r>
   13662:	2800      	cmp	r0, #0
   13664:	d0e5      	beq.n	13632 <__sfvwrite_r+0x1d6>
   13666:	e778      	b.n	1355a <__sfvwrite_r+0xfe>
   13668:	6820      	ldr	r0, [r4, #0]
   1366a:	46b3      	mov	fp, r6
   1366c:	4632      	mov	r2, r6
   1366e:	e74c      	b.n	1350a <__sfvwrite_r+0xae>
   13670:	4639      	mov	r1, r7
   13672:	9201      	str	r2, [sp, #4]
   13674:	f7f7 ff4e 	bl	b514 <memmove>
   13678:	9a01      	ldr	r2, [sp, #4]
   1367a:	68a3      	ldr	r3, [r4, #8]
   1367c:	1a9b      	subs	r3, r3, r2
   1367e:	60a3      	str	r3, [r4, #8]
   13680:	6823      	ldr	r3, [r4, #0]
   13682:	4413      	add	r3, r2
   13684:	6023      	str	r3, [r4, #0]
   13686:	4693      	mov	fp, r2
   13688:	e795      	b.n	135b6 <__sfvwrite_r+0x15a>
   1368a:	6823      	ldr	r3, [r4, #0]
   1368c:	6921      	ldr	r1, [r4, #16]
   1368e:	eba3 0b01 	sub.w	fp, r3, r1
   13692:	6963      	ldr	r3, [r4, #20]
   13694:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13698:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1369c:	f10b 0301 	add.w	r3, fp, #1
   136a0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   136a4:	4433      	add	r3, r6
   136a6:	4553      	cmp	r3, sl
   136a8:	4652      	mov	r2, sl
   136aa:	bf84      	itt	hi
   136ac:	469a      	movhi	sl, r3
   136ae:	4652      	movhi	r2, sl
   136b0:	0543      	lsls	r3, r0, #21
   136b2:	d52c      	bpl.n	1370e <__sfvwrite_r+0x2b2>
   136b4:	4611      	mov	r1, r2
   136b6:	4640      	mov	r0, r8
   136b8:	f7f6 f880 	bl	97bc <_malloc_r>
   136bc:	2800      	cmp	r0, #0
   136be:	d03b      	beq.n	13738 <__sfvwrite_r+0x2dc>
   136c0:	465a      	mov	r2, fp
   136c2:	6921      	ldr	r1, [r4, #16]
   136c4:	9001      	str	r0, [sp, #4]
   136c6:	f7f4 f9d1 	bl	7a6c <memcpy>
   136ca:	89a2      	ldrh	r2, [r4, #12]
   136cc:	9b01      	ldr	r3, [sp, #4]
   136ce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   136d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   136d6:	81a2      	strh	r2, [r4, #12]
   136d8:	eb03 000b 	add.w	r0, r3, fp
   136dc:	6123      	str	r3, [r4, #16]
   136de:	ebaa 030b 	sub.w	r3, sl, fp
   136e2:	f8c4 a014 	str.w	sl, [r4, #20]
   136e6:	60a3      	str	r3, [r4, #8]
   136e8:	6020      	str	r0, [r4, #0]
   136ea:	46b3      	mov	fp, r6
   136ec:	4632      	mov	r2, r6
   136ee:	e70c      	b.n	1350a <__sfvwrite_r+0xae>
   136f0:	4639      	mov	r1, r7
   136f2:	465a      	mov	r2, fp
   136f4:	f7f7 ff0e 	bl	b514 <memmove>
   136f8:	6823      	ldr	r3, [r4, #0]
   136fa:	445b      	add	r3, fp
   136fc:	6023      	str	r3, [r4, #0]
   136fe:	4621      	mov	r1, r4
   13700:	4640      	mov	r0, r8
   13702:	f7fd f96b 	bl	109dc <_fflush_r>
   13706:	2800      	cmp	r0, #0
   13708:	f43f af55 	beq.w	135b6 <__sfvwrite_r+0x15a>
   1370c:	e725      	b.n	1355a <__sfvwrite_r+0xfe>
   1370e:	4640      	mov	r0, r8
   13710:	f7f6 fb1c 	bl	9d4c <_realloc_r>
   13714:	4603      	mov	r3, r0
   13716:	2800      	cmp	r0, #0
   13718:	d1de      	bne.n	136d8 <__sfvwrite_r+0x27c>
   1371a:	6921      	ldr	r1, [r4, #16]
   1371c:	4640      	mov	r0, r8
   1371e:	f7f8 fc21 	bl	bf64 <_free_r>
   13722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13726:	220c      	movs	r2, #12
   13728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1372c:	f8c8 2000 	str.w	r2, [r8]
   13730:	e715      	b.n	1355e <__sfvwrite_r+0x102>
   13732:	1c72      	adds	r2, r6, #1
   13734:	4691      	mov	r9, r2
   13736:	e726      	b.n	13586 <__sfvwrite_r+0x12a>
   13738:	220c      	movs	r2, #12
   1373a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1373e:	f8c8 2000 	str.w	r2, [r8]
   13742:	e70c      	b.n	1355e <__sfvwrite_r+0x102>
   13744:	f04f 30ff 	mov.w	r0, #4294967295
   13748:	e6ba      	b.n	134c0 <__sfvwrite_r+0x64>
   1374a:	bf00      	nop
   1374c:	7ffffc00 	.word	0x7ffffc00

00013750 <__submore>:
   13750:	f101 0340 	add.w	r3, r1, #64	; 0x40
   13754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13758:	460c      	mov	r4, r1
   1375a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1375c:	4299      	cmp	r1, r3
   1375e:	d014      	beq.n	1378a <__submore+0x3a>
   13760:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13762:	0077      	lsls	r7, r6, #1
   13764:	463a      	mov	r2, r7
   13766:	f7f6 faf1 	bl	9d4c <_realloc_r>
   1376a:	4605      	mov	r5, r0
   1376c:	b340      	cbz	r0, 137c0 <__submore+0x70>
   1376e:	eb00 0806 	add.w	r8, r0, r6
   13772:	4601      	mov	r1, r0
   13774:	4632      	mov	r2, r6
   13776:	4640      	mov	r0, r8
   13778:	f7f4 f978 	bl	7a6c <memcpy>
   1377c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   13780:	f8c4 8000 	str.w	r8, [r4]
   13784:	2000      	movs	r0, #0
   13786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1378a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1378e:	f7f6 f815 	bl	97bc <_malloc_r>
   13792:	b1a8      	cbz	r0, 137c0 <__submore+0x70>
   13794:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   13798:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1379c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   137a0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   137a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   137a8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   137ac:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   137b0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   137b4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   137b8:	6023      	str	r3, [r4, #0]
   137ba:	2000      	movs	r0, #0
   137bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137c0:	f04f 30ff 	mov.w	r0, #4294967295
   137c4:	e7df      	b.n	13786 <__submore+0x36>
   137c6:	bf00      	nop

000137c8 <__swsetup_r>:
   137c8:	b538      	push	{r3, r4, r5, lr}
   137ca:	4b31      	ldr	r3, [pc, #196]	; (13890 <__swsetup_r+0xc8>)
   137cc:	681b      	ldr	r3, [r3, #0]
   137ce:	4605      	mov	r5, r0
   137d0:	460c      	mov	r4, r1
   137d2:	b113      	cbz	r3, 137da <__swsetup_r+0x12>
   137d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   137d6:	2a00      	cmp	r2, #0
   137d8:	d04e      	beq.n	13878 <__swsetup_r+0xb0>
   137da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   137de:	0718      	lsls	r0, r3, #28
   137e0:	b29a      	uxth	r2, r3
   137e2:	d51c      	bpl.n	1381e <__swsetup_r+0x56>
   137e4:	6921      	ldr	r1, [r4, #16]
   137e6:	b329      	cbz	r1, 13834 <__swsetup_r+0x6c>
   137e8:	f012 0001 	ands.w	r0, r2, #1
   137ec:	d007      	beq.n	137fe <__swsetup_r+0x36>
   137ee:	2000      	movs	r0, #0
   137f0:	60a0      	str	r0, [r4, #8]
   137f2:	6960      	ldr	r0, [r4, #20]
   137f4:	4240      	negs	r0, r0
   137f6:	61a0      	str	r0, [r4, #24]
   137f8:	b139      	cbz	r1, 1380a <__swsetup_r+0x42>
   137fa:	2000      	movs	r0, #0
   137fc:	bd38      	pop	{r3, r4, r5, pc}
   137fe:	0795      	lsls	r5, r2, #30
   13800:	bf58      	it	pl
   13802:	6960      	ldrpl	r0, [r4, #20]
   13804:	60a0      	str	r0, [r4, #8]
   13806:	2900      	cmp	r1, #0
   13808:	d1f7      	bne.n	137fa <__swsetup_r+0x32>
   1380a:	0612      	lsls	r2, r2, #24
   1380c:	bf58      	it	pl
   1380e:	4608      	movpl	r0, r1
   13810:	d5f4      	bpl.n	137fc <__swsetup_r+0x34>
   13812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13816:	81a3      	strh	r3, [r4, #12]
   13818:	f04f 30ff 	mov.w	r0, #4294967295
   1381c:	bd38      	pop	{r3, r4, r5, pc}
   1381e:	06d1      	lsls	r1, r2, #27
   13820:	d52e      	bpl.n	13880 <__swsetup_r+0xb8>
   13822:	0752      	lsls	r2, r2, #29
   13824:	d414      	bmi.n	13850 <__swsetup_r+0x88>
   13826:	6921      	ldr	r1, [r4, #16]
   13828:	f043 0308 	orr.w	r3, r3, #8
   1382c:	81a3      	strh	r3, [r4, #12]
   1382e:	b29a      	uxth	r2, r3
   13830:	2900      	cmp	r1, #0
   13832:	d1d9      	bne.n	137e8 <__swsetup_r+0x20>
   13834:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13838:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1383c:	d0d4      	beq.n	137e8 <__swsetup_r+0x20>
   1383e:	4621      	mov	r1, r4
   13840:	4628      	mov	r0, r5
   13842:	f000 f977 	bl	13b34 <__smakebuf_r>
   13846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1384a:	6921      	ldr	r1, [r4, #16]
   1384c:	b29a      	uxth	r2, r3
   1384e:	e7cb      	b.n	137e8 <__swsetup_r+0x20>
   13850:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13852:	b151      	cbz	r1, 1386a <__swsetup_r+0xa2>
   13854:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13858:	4291      	cmp	r1, r2
   1385a:	d004      	beq.n	13866 <__swsetup_r+0x9e>
   1385c:	4628      	mov	r0, r5
   1385e:	f7f8 fb81 	bl	bf64 <_free_r>
   13862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13866:	2200      	movs	r2, #0
   13868:	6322      	str	r2, [r4, #48]	; 0x30
   1386a:	6921      	ldr	r1, [r4, #16]
   1386c:	2200      	movs	r2, #0
   1386e:	e9c4 1200 	strd	r1, r2, [r4]
   13872:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13876:	e7d7      	b.n	13828 <__swsetup_r+0x60>
   13878:	4618      	mov	r0, r3
   1387a:	f7f7 fcd3 	bl	b224 <__sinit>
   1387e:	e7ac      	b.n	137da <__swsetup_r+0x12>
   13880:	2209      	movs	r2, #9
   13882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13886:	602a      	str	r2, [r5, #0]
   13888:	f04f 30ff 	mov.w	r0, #4294967295
   1388c:	81a3      	strh	r3, [r4, #12]
   1388e:	bd38      	pop	{r3, r4, r5, pc}
   13890:	20008c78 	.word	0x20008c78

00013894 <__fputwc>:
   13894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13898:	b082      	sub	sp, #8
   1389a:	4682      	mov	sl, r0
   1389c:	4688      	mov	r8, r1
   1389e:	4614      	mov	r4, r2
   138a0:	f7f7 ff7e 	bl	b7a0 <__locale_mb_cur_max>
   138a4:	2801      	cmp	r0, #1
   138a6:	d103      	bne.n	138b0 <__fputwc+0x1c>
   138a8:	f108 33ff 	add.w	r3, r8, #4294967295
   138ac:	2bfe      	cmp	r3, #254	; 0xfe
   138ae:	d936      	bls.n	1391e <__fputwc+0x8a>
   138b0:	f10d 0904 	add.w	r9, sp, #4
   138b4:	4642      	mov	r2, r8
   138b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   138ba:	4649      	mov	r1, r9
   138bc:	4650      	mov	r0, sl
   138be:	f7fe fb29 	bl	11f14 <_wcrtomb_r>
   138c2:	1c42      	adds	r2, r0, #1
   138c4:	4606      	mov	r6, r0
   138c6:	d032      	beq.n	1392e <__fputwc+0x9a>
   138c8:	b320      	cbz	r0, 13914 <__fputwc+0x80>
   138ca:	f89d c004 	ldrb.w	ip, [sp, #4]
   138ce:	2500      	movs	r5, #0
   138d0:	e009      	b.n	138e6 <__fputwc+0x52>
   138d2:	6823      	ldr	r3, [r4, #0]
   138d4:	1c5a      	adds	r2, r3, #1
   138d6:	6022      	str	r2, [r4, #0]
   138d8:	f883 c000 	strb.w	ip, [r3]
   138dc:	3501      	adds	r5, #1
   138de:	42b5      	cmp	r5, r6
   138e0:	d218      	bcs.n	13914 <__fputwc+0x80>
   138e2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   138e6:	68a3      	ldr	r3, [r4, #8]
   138e8:	3b01      	subs	r3, #1
   138ea:	2b00      	cmp	r3, #0
   138ec:	60a3      	str	r3, [r4, #8]
   138ee:	daf0      	bge.n	138d2 <__fputwc+0x3e>
   138f0:	69a7      	ldr	r7, [r4, #24]
   138f2:	42bb      	cmp	r3, r7
   138f4:	4661      	mov	r1, ip
   138f6:	4622      	mov	r2, r4
   138f8:	4650      	mov	r0, sl
   138fa:	db02      	blt.n	13902 <__fputwc+0x6e>
   138fc:	f1bc 0f0a 	cmp.w	ip, #10
   13900:	d1e7      	bne.n	138d2 <__fputwc+0x3e>
   13902:	f000 f983 	bl	13c0c <__swbuf_r>
   13906:	1c43      	adds	r3, r0, #1
   13908:	d1e8      	bne.n	138dc <__fputwc+0x48>
   1390a:	4606      	mov	r6, r0
   1390c:	4630      	mov	r0, r6
   1390e:	b002      	add	sp, #8
   13910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13914:	4646      	mov	r6, r8
   13916:	4630      	mov	r0, r6
   13918:	b002      	add	sp, #8
   1391a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1391e:	fa5f fc88 	uxtb.w	ip, r8
   13922:	f88d c004 	strb.w	ip, [sp, #4]
   13926:	4606      	mov	r6, r0
   13928:	f10d 0904 	add.w	r9, sp, #4
   1392c:	e7cf      	b.n	138ce <__fputwc+0x3a>
   1392e:	89a3      	ldrh	r3, [r4, #12]
   13930:	4630      	mov	r0, r6
   13932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13936:	81a3      	strh	r3, [r4, #12]
   13938:	b002      	add	sp, #8
   1393a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1393e:	bf00      	nop

00013940 <_fputwc_r>:
   13940:	b530      	push	{r4, r5, lr}
   13942:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13944:	f013 0f01 	tst.w	r3, #1
   13948:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1394c:	4614      	mov	r4, r2
   1394e:	b083      	sub	sp, #12
   13950:	4605      	mov	r5, r0
   13952:	b29a      	uxth	r2, r3
   13954:	d101      	bne.n	1395a <_fputwc_r+0x1a>
   13956:	0598      	lsls	r0, r3, #22
   13958:	d51c      	bpl.n	13994 <_fputwc_r+0x54>
   1395a:	0490      	lsls	r0, r2, #18
   1395c:	d406      	bmi.n	1396c <_fputwc_r+0x2c>
   1395e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13968:	81a3      	strh	r3, [r4, #12]
   1396a:	6662      	str	r2, [r4, #100]	; 0x64
   1396c:	4622      	mov	r2, r4
   1396e:	4628      	mov	r0, r5
   13970:	f7ff ff90 	bl	13894 <__fputwc>
   13974:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13976:	07da      	lsls	r2, r3, #31
   13978:	4605      	mov	r5, r0
   1397a:	d402      	bmi.n	13982 <_fputwc_r+0x42>
   1397c:	89a3      	ldrh	r3, [r4, #12]
   1397e:	059b      	lsls	r3, r3, #22
   13980:	d502      	bpl.n	13988 <_fputwc_r+0x48>
   13982:	4628      	mov	r0, r5
   13984:	b003      	add	sp, #12
   13986:	bd30      	pop	{r4, r5, pc}
   13988:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1398a:	f7f7 ffa5 	bl	b8d8 <__retarget_lock_release_recursive>
   1398e:	4628      	mov	r0, r5
   13990:	b003      	add	sp, #12
   13992:	bd30      	pop	{r4, r5, pc}
   13994:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13996:	9101      	str	r1, [sp, #4]
   13998:	f7f7 ff9c 	bl	b8d4 <__retarget_lock_acquire_recursive>
   1399c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139a0:	9901      	ldr	r1, [sp, #4]
   139a2:	b29a      	uxth	r2, r3
   139a4:	e7d9      	b.n	1395a <_fputwc_r+0x1a>
   139a6:	bf00      	nop

000139a8 <_wcsnrtombs_l>:
   139a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139ac:	b08b      	sub	sp, #44	; 0x2c
   139ae:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   139b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   139b4:	9103      	str	r1, [sp, #12]
   139b6:	4681      	mov	r9, r0
   139b8:	9205      	str	r2, [sp, #20]
   139ba:	461e      	mov	r6, r3
   139bc:	f1b8 0f00 	cmp.w	r8, #0
   139c0:	d05c      	beq.n	13a7c <_wcsnrtombs_l+0xd4>
   139c2:	9b03      	ldr	r3, [sp, #12]
   139c4:	2b00      	cmp	r3, #0
   139c6:	d05e      	beq.n	13a86 <_wcsnrtombs_l+0xde>
   139c8:	9b05      	ldr	r3, [sp, #20]
   139ca:	681d      	ldr	r5, [r3, #0]
   139cc:	2f00      	cmp	r7, #0
   139ce:	d06a      	beq.n	13aa6 <_wcsnrtombs_l+0xfe>
   139d0:	1e74      	subs	r4, r6, #1
   139d2:	b34e      	cbz	r6, 13a28 <_wcsnrtombs_l+0x80>
   139d4:	9b03      	ldr	r3, [sp, #12]
   139d6:	9304      	str	r3, [sp, #16]
   139d8:	3d04      	subs	r5, #4
   139da:	2600      	movs	r6, #0
   139dc:	9501      	str	r5, [sp, #4]
   139de:	e00b      	b.n	139f8 <_wcsnrtombs_l+0x50>
   139e0:	9b03      	ldr	r3, [sp, #12]
   139e2:	bb2b      	cbnz	r3, 13a30 <_wcsnrtombs_l+0x88>
   139e4:	9b01      	ldr	r3, [sp, #4]
   139e6:	681a      	ldr	r2, [r3, #0]
   139e8:	2a00      	cmp	r2, #0
   139ea:	d03a      	beq.n	13a62 <_wcsnrtombs_l+0xba>
   139ec:	45bc      	cmp	ip, r7
   139ee:	d25c      	bcs.n	13aaa <_wcsnrtombs_l+0x102>
   139f0:	3c01      	subs	r4, #1
   139f2:	1c63      	adds	r3, r4, #1
   139f4:	4666      	mov	r6, ip
   139f6:	d017      	beq.n	13a28 <_wcsnrtombs_l+0x80>
   139f8:	f8d8 3000 	ldr.w	r3, [r8]
   139fc:	9302      	str	r3, [sp, #8]
   139fe:	9b01      	ldr	r3, [sp, #4]
   13a00:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   13a04:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13a08:	9301      	str	r3, [sp, #4]
   13a0a:	a907      	add	r1, sp, #28
   13a0c:	4643      	mov	r3, r8
   13a0e:	4648      	mov	r0, r9
   13a10:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13a14:	47a8      	blx	r5
   13a16:	1c42      	adds	r2, r0, #1
   13a18:	d03a      	beq.n	13a90 <_wcsnrtombs_l+0xe8>
   13a1a:	eb00 0c06 	add.w	ip, r0, r6
   13a1e:	45bc      	cmp	ip, r7
   13a20:	d9de      	bls.n	139e0 <_wcsnrtombs_l+0x38>
   13a22:	9b02      	ldr	r3, [sp, #8]
   13a24:	e9c8 3b00 	strd	r3, fp, [r8]
   13a28:	4630      	mov	r0, r6
   13a2a:	b00b      	add	sp, #44	; 0x2c
   13a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a30:	2800      	cmp	r0, #0
   13a32:	dd0e      	ble.n	13a52 <_wcsnrtombs_l+0xaa>
   13a34:	9b04      	ldr	r3, [sp, #16]
   13a36:	9d01      	ldr	r5, [sp, #4]
   13a38:	4418      	add	r0, r3
   13a3a:	1e5a      	subs	r2, r3, #1
   13a3c:	a907      	add	r1, sp, #28
   13a3e:	f100 3eff 	add.w	lr, r0, #4294967295
   13a42:	f811 3b01 	ldrb.w	r3, [r1], #1
   13a46:	f802 3f01 	strb.w	r3, [r2, #1]!
   13a4a:	4572      	cmp	r2, lr
   13a4c:	d1f9      	bne.n	13a42 <_wcsnrtombs_l+0x9a>
   13a4e:	9501      	str	r5, [sp, #4]
   13a50:	9004      	str	r0, [sp, #16]
   13a52:	9b05      	ldr	r3, [sp, #20]
   13a54:	681a      	ldr	r2, [r3, #0]
   13a56:	3204      	adds	r2, #4
   13a58:	601a      	str	r2, [r3, #0]
   13a5a:	9b01      	ldr	r3, [sp, #4]
   13a5c:	681a      	ldr	r2, [r3, #0]
   13a5e:	2a00      	cmp	r2, #0
   13a60:	d1c4      	bne.n	139ec <_wcsnrtombs_l+0x44>
   13a62:	9b03      	ldr	r3, [sp, #12]
   13a64:	b10b      	cbz	r3, 13a6a <_wcsnrtombs_l+0xc2>
   13a66:	9b05      	ldr	r3, [sp, #20]
   13a68:	601a      	str	r2, [r3, #0]
   13a6a:	f10c 36ff 	add.w	r6, ip, #4294967295
   13a6e:	2200      	movs	r2, #0
   13a70:	4630      	mov	r0, r6
   13a72:	f8c8 2000 	str.w	r2, [r8]
   13a76:	b00b      	add	sp, #44	; 0x2c
   13a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a7c:	9b03      	ldr	r3, [sp, #12]
   13a7e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13a82:	2b00      	cmp	r3, #0
   13a84:	d1a0      	bne.n	139c8 <_wcsnrtombs_l+0x20>
   13a86:	9b05      	ldr	r3, [sp, #20]
   13a88:	f04f 37ff 	mov.w	r7, #4294967295
   13a8c:	681d      	ldr	r5, [r3, #0]
   13a8e:	e79f      	b.n	139d0 <_wcsnrtombs_l+0x28>
   13a90:	4606      	mov	r6, r0
   13a92:	218a      	movs	r1, #138	; 0x8a
   13a94:	2200      	movs	r2, #0
   13a96:	4630      	mov	r0, r6
   13a98:	f8c9 1000 	str.w	r1, [r9]
   13a9c:	f8c8 2000 	str.w	r2, [r8]
   13aa0:	b00b      	add	sp, #44	; 0x2c
   13aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa6:	463e      	mov	r6, r7
   13aa8:	e7be      	b.n	13a28 <_wcsnrtombs_l+0x80>
   13aaa:	4666      	mov	r6, ip
   13aac:	e7bc      	b.n	13a28 <_wcsnrtombs_l+0x80>
   13aae:	bf00      	nop

00013ab0 <_wcsnrtombs_r>:
   13ab0:	b510      	push	{r4, lr}
   13ab2:	b084      	sub	sp, #16
   13ab4:	4c05      	ldr	r4, [pc, #20]	; (13acc <_wcsnrtombs_r+0x1c>)
   13ab6:	9806      	ldr	r0, [sp, #24]
   13ab8:	9000      	str	r0, [sp, #0]
   13aba:	9807      	ldr	r0, [sp, #28]
   13abc:	9001      	str	r0, [sp, #4]
   13abe:	4804      	ldr	r0, [pc, #16]	; (13ad0 <_wcsnrtombs_r+0x20>)
   13ac0:	6800      	ldr	r0, [r0, #0]
   13ac2:	9402      	str	r4, [sp, #8]
   13ac4:	f7ff ff70 	bl	139a8 <_wcsnrtombs_l>
   13ac8:	b004      	add	sp, #16
   13aca:	bd10      	pop	{r4, pc}
   13acc:	200086f0 	.word	0x200086f0
   13ad0:	20008c78 	.word	0x20008c78

00013ad4 <category>:
   13ad4:	4b15      	ldr	r3, [pc, #84]	; (13b2c <category+0x58>)
   13ad6:	4298      	cmp	r0, r3
   13ad8:	d823      	bhi.n	13b22 <category+0x4e>
   13ada:	b570      	push	{r4, r5, r6, lr}
   13adc:	4e14      	ldr	r6, [pc, #80]	; (13b30 <category+0x5c>)
   13ade:	f04f 0e00 	mov.w	lr, #0
   13ae2:	f640 04db 	movw	r4, #2267	; 0x8db
   13ae6:	e003      	b.n	13af0 <category+0x1c>
   13ae8:	f102 0e01 	add.w	lr, r2, #1
   13aec:	45a6      	cmp	lr, r4
   13aee:	dc16      	bgt.n	13b1e <category+0x4a>
   13af0:	eb04 020e 	add.w	r2, r4, lr
   13af4:	f022 0301 	bic.w	r3, r2, #1
   13af8:	eb03 0362 	add.w	r3, r3, r2, asr #1
   13afc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   13b00:	1052      	asrs	r2, r2, #1
   13b02:	7859      	ldrb	r1, [r3, #1]
   13b04:	885d      	ldrh	r5, [r3, #2]
   13b06:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   13b0a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13b0e:	448c      	add	ip, r1
   13b10:	4560      	cmp	r0, ip
   13b12:	d8e9      	bhi.n	13ae8 <category+0x14>
   13b14:	4288      	cmp	r0, r1
   13b16:	d206      	bcs.n	13b26 <category+0x52>
   13b18:	1e54      	subs	r4, r2, #1
   13b1a:	45a6      	cmp	lr, r4
   13b1c:	dde8      	ble.n	13af0 <category+0x1c>
   13b1e:	20ff      	movs	r0, #255	; 0xff
   13b20:	bd70      	pop	{r4, r5, r6, pc}
   13b22:	20ff      	movs	r0, #255	; 0xff
   13b24:	4770      	bx	lr
   13b26:	7818      	ldrb	r0, [r3, #0]
   13b28:	bd70      	pop	{r4, r5, r6, pc}
   13b2a:	bf00      	nop
   13b2c:	000e01ef 	.word	0x000e01ef
   13b30:	20002814 	.word	0x20002814

00013b34 <__smakebuf_r>:
   13b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b38:	898b      	ldrh	r3, [r1, #12]
   13b3a:	460c      	mov	r4, r1
   13b3c:	0799      	lsls	r1, r3, #30
   13b3e:	b096      	sub	sp, #88	; 0x58
   13b40:	d508      	bpl.n	13b54 <__smakebuf_r+0x20>
   13b42:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13b46:	2201      	movs	r2, #1
   13b48:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13b4c:	6023      	str	r3, [r4, #0]
   13b4e:	b016      	add	sp, #88	; 0x58
   13b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13b58:	2900      	cmp	r1, #0
   13b5a:	4606      	mov	r6, r0
   13b5c:	db25      	blt.n	13baa <__smakebuf_r+0x76>
   13b5e:	466a      	mov	r2, sp
   13b60:	f000 f8ac 	bl	13cbc <_fstat_r>
   13b64:	2800      	cmp	r0, #0
   13b66:	db1f      	blt.n	13ba8 <__smakebuf_r+0x74>
   13b68:	9d01      	ldr	r5, [sp, #4]
   13b6a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13b6e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13b72:	fab5 f585 	clz	r5, r5
   13b76:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13b7a:	096d      	lsrs	r5, r5, #5
   13b7c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13b80:	4641      	mov	r1, r8
   13b82:	4630      	mov	r0, r6
   13b84:	f7f5 fe1a 	bl	97bc <_malloc_r>
   13b88:	b1e0      	cbz	r0, 13bc4 <__smakebuf_r+0x90>
   13b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b8e:	f8c4 8014 	str.w	r8, [r4, #20]
   13b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13b96:	6020      	str	r0, [r4, #0]
   13b98:	6120      	str	r0, [r4, #16]
   13b9a:	81a3      	strh	r3, [r4, #12]
   13b9c:	bb35      	cbnz	r5, 13bec <__smakebuf_r+0xb8>
   13b9e:	433b      	orrs	r3, r7
   13ba0:	81a3      	strh	r3, [r4, #12]
   13ba2:	b016      	add	sp, #88	; 0x58
   13ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ba8:	89a3      	ldrh	r3, [r4, #12]
   13baa:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13bae:	d019      	beq.n	13be4 <__smakebuf_r+0xb0>
   13bb0:	f04f 0840 	mov.w	r8, #64	; 0x40
   13bb4:	2500      	movs	r5, #0
   13bb6:	4641      	mov	r1, r8
   13bb8:	4630      	mov	r0, r6
   13bba:	462f      	mov	r7, r5
   13bbc:	f7f5 fdfe 	bl	97bc <_malloc_r>
   13bc0:	2800      	cmp	r0, #0
   13bc2:	d1e2      	bne.n	13b8a <__smakebuf_r+0x56>
   13bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13bc8:	059a      	lsls	r2, r3, #22
   13bca:	d4c0      	bmi.n	13b4e <__smakebuf_r+0x1a>
   13bcc:	f023 0303 	bic.w	r3, r3, #3
   13bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13bd4:	f043 0302 	orr.w	r3, r3, #2
   13bd8:	2101      	movs	r1, #1
   13bda:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13bde:	81a3      	strh	r3, [r4, #12]
   13be0:	6022      	str	r2, [r4, #0]
   13be2:	e7b4      	b.n	13b4e <__smakebuf_r+0x1a>
   13be4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13be8:	462f      	mov	r7, r5
   13bea:	e7c9      	b.n	13b80 <__smakebuf_r+0x4c>
   13bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13bf0:	4630      	mov	r0, r6
   13bf2:	f000 f879 	bl	13ce8 <_isatty_r>
   13bf6:	b910      	cbnz	r0, 13bfe <__smakebuf_r+0xca>
   13bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13bfc:	e7cf      	b.n	13b9e <__smakebuf_r+0x6a>
   13bfe:	89a3      	ldrh	r3, [r4, #12]
   13c00:	f023 0303 	bic.w	r3, r3, #3
   13c04:	f043 0301 	orr.w	r3, r3, #1
   13c08:	b21b      	sxth	r3, r3
   13c0a:	e7c8      	b.n	13b9e <__smakebuf_r+0x6a>

00013c0c <__swbuf_r>:
   13c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c0e:	460d      	mov	r5, r1
   13c10:	4614      	mov	r4, r2
   13c12:	4606      	mov	r6, r0
   13c14:	b110      	cbz	r0, 13c1c <__swbuf_r+0x10>
   13c16:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d04c      	beq.n	13cb6 <__swbuf_r+0xaa>
   13c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13c20:	69a3      	ldr	r3, [r4, #24]
   13c22:	60a3      	str	r3, [r4, #8]
   13c24:	0717      	lsls	r7, r2, #28
   13c26:	b290      	uxth	r0, r2
   13c28:	d51b      	bpl.n	13c62 <__swbuf_r+0x56>
   13c2a:	6923      	ldr	r3, [r4, #16]
   13c2c:	b1cb      	cbz	r3, 13c62 <__swbuf_r+0x56>
   13c2e:	b2ed      	uxtb	r5, r5
   13c30:	0481      	lsls	r1, r0, #18
   13c32:	462f      	mov	r7, r5
   13c34:	d522      	bpl.n	13c7c <__swbuf_r+0x70>
   13c36:	6822      	ldr	r2, [r4, #0]
   13c38:	6961      	ldr	r1, [r4, #20]
   13c3a:	1ad3      	subs	r3, r2, r3
   13c3c:	4299      	cmp	r1, r3
   13c3e:	dd29      	ble.n	13c94 <__swbuf_r+0x88>
   13c40:	3301      	adds	r3, #1
   13c42:	68a1      	ldr	r1, [r4, #8]
   13c44:	3901      	subs	r1, #1
   13c46:	60a1      	str	r1, [r4, #8]
   13c48:	1c51      	adds	r1, r2, #1
   13c4a:	6021      	str	r1, [r4, #0]
   13c4c:	7015      	strb	r5, [r2, #0]
   13c4e:	6962      	ldr	r2, [r4, #20]
   13c50:	429a      	cmp	r2, r3
   13c52:	d027      	beq.n	13ca4 <__swbuf_r+0x98>
   13c54:	89a3      	ldrh	r3, [r4, #12]
   13c56:	07db      	lsls	r3, r3, #31
   13c58:	d501      	bpl.n	13c5e <__swbuf_r+0x52>
   13c5a:	2d0a      	cmp	r5, #10
   13c5c:	d022      	beq.n	13ca4 <__swbuf_r+0x98>
   13c5e:	4638      	mov	r0, r7
   13c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c62:	4621      	mov	r1, r4
   13c64:	4630      	mov	r0, r6
   13c66:	f7ff fdaf 	bl	137c8 <__swsetup_r>
   13c6a:	bb08      	cbnz	r0, 13cb0 <__swbuf_r+0xa4>
   13c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13c70:	6923      	ldr	r3, [r4, #16]
   13c72:	b290      	uxth	r0, r2
   13c74:	b2ed      	uxtb	r5, r5
   13c76:	0481      	lsls	r1, r0, #18
   13c78:	462f      	mov	r7, r5
   13c7a:	d4dc      	bmi.n	13c36 <__swbuf_r+0x2a>
   13c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13c80:	81a2      	strh	r2, [r4, #12]
   13c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13c84:	6961      	ldr	r1, [r4, #20]
   13c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13c8a:	6662      	str	r2, [r4, #100]	; 0x64
   13c8c:	6822      	ldr	r2, [r4, #0]
   13c8e:	1ad3      	subs	r3, r2, r3
   13c90:	4299      	cmp	r1, r3
   13c92:	dcd5      	bgt.n	13c40 <__swbuf_r+0x34>
   13c94:	4621      	mov	r1, r4
   13c96:	4630      	mov	r0, r6
   13c98:	f7fc fea0 	bl	109dc <_fflush_r>
   13c9c:	b940      	cbnz	r0, 13cb0 <__swbuf_r+0xa4>
   13c9e:	6822      	ldr	r2, [r4, #0]
   13ca0:	2301      	movs	r3, #1
   13ca2:	e7ce      	b.n	13c42 <__swbuf_r+0x36>
   13ca4:	4621      	mov	r1, r4
   13ca6:	4630      	mov	r0, r6
   13ca8:	f7fc fe98 	bl	109dc <_fflush_r>
   13cac:	2800      	cmp	r0, #0
   13cae:	d0d6      	beq.n	13c5e <__swbuf_r+0x52>
   13cb0:	f04f 37ff 	mov.w	r7, #4294967295
   13cb4:	e7d3      	b.n	13c5e <__swbuf_r+0x52>
   13cb6:	f7f7 fab5 	bl	b224 <__sinit>
   13cba:	e7af      	b.n	13c1c <__swbuf_r+0x10>

00013cbc <_fstat_r>:
   13cbc:	b570      	push	{r4, r5, r6, lr}
   13cbe:	460c      	mov	r4, r1
   13cc0:	4d08      	ldr	r5, [pc, #32]	; (13ce4 <_fstat_r+0x28>)
   13cc2:	4603      	mov	r3, r0
   13cc4:	2600      	movs	r6, #0
   13cc6:	4620      	mov	r0, r4
   13cc8:	4611      	mov	r1, r2
   13cca:	461c      	mov	r4, r3
   13ccc:	602e      	str	r6, [r5, #0]
   13cce:	f7f4 f8b7 	bl	7e40 <_fstat>
   13cd2:	1c43      	adds	r3, r0, #1
   13cd4:	d000      	beq.n	13cd8 <_fstat_r+0x1c>
   13cd6:	bd70      	pop	{r4, r5, r6, pc}
   13cd8:	682b      	ldr	r3, [r5, #0]
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d0fb      	beq.n	13cd6 <_fstat_r+0x1a>
   13cde:	6023      	str	r3, [r4, #0]
   13ce0:	bd70      	pop	{r4, r5, r6, pc}
   13ce2:	bf00      	nop
   13ce4:	20026e40 	.word	0x20026e40

00013ce8 <_isatty_r>:
   13ce8:	b538      	push	{r3, r4, r5, lr}
   13cea:	4d07      	ldr	r5, [pc, #28]	; (13d08 <_isatty_r+0x20>)
   13cec:	2200      	movs	r2, #0
   13cee:	4604      	mov	r4, r0
   13cf0:	4608      	mov	r0, r1
   13cf2:	602a      	str	r2, [r5, #0]
   13cf4:	f7f4 f8aa 	bl	7e4c <_isatty>
   13cf8:	1c43      	adds	r3, r0, #1
   13cfa:	d000      	beq.n	13cfe <_isatty_r+0x16>
   13cfc:	bd38      	pop	{r3, r4, r5, pc}
   13cfe:	682b      	ldr	r3, [r5, #0]
   13d00:	2b00      	cmp	r3, #0
   13d02:	d0fb      	beq.n	13cfc <_isatty_r+0x14>
   13d04:	6023      	str	r3, [r4, #0]
   13d06:	bd38      	pop	{r3, r4, r5, pc}
   13d08:	20026e40 	.word	0x20026e40

00013d0c <__aeabi_drsub>:
   13d0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   13d10:	e002      	b.n	13d18 <__adddf3>
   13d12:	bf00      	nop

00013d14 <__aeabi_dsub>:
   13d14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00013d18 <__adddf3>:
   13d18:	b530      	push	{r4, r5, lr}
   13d1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   13d1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   13d22:	ea94 0f05 	teq	r4, r5
   13d26:	bf08      	it	eq
   13d28:	ea90 0f02 	teqeq	r0, r2
   13d2c:	bf1f      	itttt	ne
   13d2e:	ea54 0c00 	orrsne.w	ip, r4, r0
   13d32:	ea55 0c02 	orrsne.w	ip, r5, r2
   13d36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   13d3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   13d3e:	f000 80e2 	beq.w	13f06 <__adddf3+0x1ee>
   13d42:	ea4f 5454 	mov.w	r4, r4, lsr #21
   13d46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   13d4a:	bfb8      	it	lt
   13d4c:	426d      	neglt	r5, r5
   13d4e:	dd0c      	ble.n	13d6a <__adddf3+0x52>
   13d50:	442c      	add	r4, r5
   13d52:	ea80 0202 	eor.w	r2, r0, r2
   13d56:	ea81 0303 	eor.w	r3, r1, r3
   13d5a:	ea82 0000 	eor.w	r0, r2, r0
   13d5e:	ea83 0101 	eor.w	r1, r3, r1
   13d62:	ea80 0202 	eor.w	r2, r0, r2
   13d66:	ea81 0303 	eor.w	r3, r1, r3
   13d6a:	2d36      	cmp	r5, #54	; 0x36
   13d6c:	bf88      	it	hi
   13d6e:	bd30      	pophi	{r4, r5, pc}
   13d70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13d74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   13d78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   13d7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   13d80:	d002      	beq.n	13d88 <__adddf3+0x70>
   13d82:	4240      	negs	r0, r0
   13d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13d88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   13d8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13d90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   13d94:	d002      	beq.n	13d9c <__adddf3+0x84>
   13d96:	4252      	negs	r2, r2
   13d98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13d9c:	ea94 0f05 	teq	r4, r5
   13da0:	f000 80a7 	beq.w	13ef2 <__adddf3+0x1da>
   13da4:	f1a4 0401 	sub.w	r4, r4, #1
   13da8:	f1d5 0e20 	rsbs	lr, r5, #32
   13dac:	db0d      	blt.n	13dca <__adddf3+0xb2>
   13dae:	fa02 fc0e 	lsl.w	ip, r2, lr
   13db2:	fa22 f205 	lsr.w	r2, r2, r5
   13db6:	1880      	adds	r0, r0, r2
   13db8:	f141 0100 	adc.w	r1, r1, #0
   13dbc:	fa03 f20e 	lsl.w	r2, r3, lr
   13dc0:	1880      	adds	r0, r0, r2
   13dc2:	fa43 f305 	asr.w	r3, r3, r5
   13dc6:	4159      	adcs	r1, r3
   13dc8:	e00e      	b.n	13de8 <__adddf3+0xd0>
   13dca:	f1a5 0520 	sub.w	r5, r5, #32
   13dce:	f10e 0e20 	add.w	lr, lr, #32
   13dd2:	2a01      	cmp	r2, #1
   13dd4:	fa03 fc0e 	lsl.w	ip, r3, lr
   13dd8:	bf28      	it	cs
   13dda:	f04c 0c02 	orrcs.w	ip, ip, #2
   13dde:	fa43 f305 	asr.w	r3, r3, r5
   13de2:	18c0      	adds	r0, r0, r3
   13de4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   13de8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13dec:	d507      	bpl.n	13dfe <__adddf3+0xe6>
   13dee:	f04f 0e00 	mov.w	lr, #0
   13df2:	f1dc 0c00 	rsbs	ip, ip, #0
   13df6:	eb7e 0000 	sbcs.w	r0, lr, r0
   13dfa:	eb6e 0101 	sbc.w	r1, lr, r1
   13dfe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   13e02:	d31b      	bcc.n	13e3c <__adddf3+0x124>
   13e04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   13e08:	d30c      	bcc.n	13e24 <__adddf3+0x10c>
   13e0a:	0849      	lsrs	r1, r1, #1
   13e0c:	ea5f 0030 	movs.w	r0, r0, rrx
   13e10:	ea4f 0c3c 	mov.w	ip, ip, rrx
   13e14:	f104 0401 	add.w	r4, r4, #1
   13e18:	ea4f 5244 	mov.w	r2, r4, lsl #21
   13e1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   13e20:	f080 809a 	bcs.w	13f58 <__adddf3+0x240>
   13e24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13e28:	bf08      	it	eq
   13e2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13e2e:	f150 0000 	adcs.w	r0, r0, #0
   13e32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13e36:	ea41 0105 	orr.w	r1, r1, r5
   13e3a:	bd30      	pop	{r4, r5, pc}
   13e3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   13e40:	4140      	adcs	r0, r0
   13e42:	eb41 0101 	adc.w	r1, r1, r1
   13e46:	3c01      	subs	r4, #1
   13e48:	bf28      	it	cs
   13e4a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   13e4e:	d2e9      	bcs.n	13e24 <__adddf3+0x10c>
   13e50:	f091 0f00 	teq	r1, #0
   13e54:	bf04      	itt	eq
   13e56:	4601      	moveq	r1, r0
   13e58:	2000      	moveq	r0, #0
   13e5a:	fab1 f381 	clz	r3, r1
   13e5e:	bf08      	it	eq
   13e60:	3320      	addeq	r3, #32
   13e62:	f1a3 030b 	sub.w	r3, r3, #11
   13e66:	f1b3 0220 	subs.w	r2, r3, #32
   13e6a:	da0c      	bge.n	13e86 <__adddf3+0x16e>
   13e6c:	320c      	adds	r2, #12
   13e6e:	dd08      	ble.n	13e82 <__adddf3+0x16a>
   13e70:	f102 0c14 	add.w	ip, r2, #20
   13e74:	f1c2 020c 	rsb	r2, r2, #12
   13e78:	fa01 f00c 	lsl.w	r0, r1, ip
   13e7c:	fa21 f102 	lsr.w	r1, r1, r2
   13e80:	e00c      	b.n	13e9c <__adddf3+0x184>
   13e82:	f102 0214 	add.w	r2, r2, #20
   13e86:	bfd8      	it	le
   13e88:	f1c2 0c20 	rsble	ip, r2, #32
   13e8c:	fa01 f102 	lsl.w	r1, r1, r2
   13e90:	fa20 fc0c 	lsr.w	ip, r0, ip
   13e94:	bfdc      	itt	le
   13e96:	ea41 010c 	orrle.w	r1, r1, ip
   13e9a:	4090      	lslle	r0, r2
   13e9c:	1ae4      	subs	r4, r4, r3
   13e9e:	bfa2      	ittt	ge
   13ea0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   13ea4:	4329      	orrge	r1, r5
   13ea6:	bd30      	popge	{r4, r5, pc}
   13ea8:	ea6f 0404 	mvn.w	r4, r4
   13eac:	3c1f      	subs	r4, #31
   13eae:	da1c      	bge.n	13eea <__adddf3+0x1d2>
   13eb0:	340c      	adds	r4, #12
   13eb2:	dc0e      	bgt.n	13ed2 <__adddf3+0x1ba>
   13eb4:	f104 0414 	add.w	r4, r4, #20
   13eb8:	f1c4 0220 	rsb	r2, r4, #32
   13ebc:	fa20 f004 	lsr.w	r0, r0, r4
   13ec0:	fa01 f302 	lsl.w	r3, r1, r2
   13ec4:	ea40 0003 	orr.w	r0, r0, r3
   13ec8:	fa21 f304 	lsr.w	r3, r1, r4
   13ecc:	ea45 0103 	orr.w	r1, r5, r3
   13ed0:	bd30      	pop	{r4, r5, pc}
   13ed2:	f1c4 040c 	rsb	r4, r4, #12
   13ed6:	f1c4 0220 	rsb	r2, r4, #32
   13eda:	fa20 f002 	lsr.w	r0, r0, r2
   13ede:	fa01 f304 	lsl.w	r3, r1, r4
   13ee2:	ea40 0003 	orr.w	r0, r0, r3
   13ee6:	4629      	mov	r1, r5
   13ee8:	bd30      	pop	{r4, r5, pc}
   13eea:	fa21 f004 	lsr.w	r0, r1, r4
   13eee:	4629      	mov	r1, r5
   13ef0:	bd30      	pop	{r4, r5, pc}
   13ef2:	f094 0f00 	teq	r4, #0
   13ef6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   13efa:	bf06      	itte	eq
   13efc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   13f00:	3401      	addeq	r4, #1
   13f02:	3d01      	subne	r5, #1
   13f04:	e74e      	b.n	13da4 <__adddf3+0x8c>
   13f06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13f0a:	bf18      	it	ne
   13f0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   13f10:	d029      	beq.n	13f66 <__adddf3+0x24e>
   13f12:	ea94 0f05 	teq	r4, r5
   13f16:	bf08      	it	eq
   13f18:	ea90 0f02 	teqeq	r0, r2
   13f1c:	d005      	beq.n	13f2a <__adddf3+0x212>
   13f1e:	ea54 0c00 	orrs.w	ip, r4, r0
   13f22:	bf04      	itt	eq
   13f24:	4619      	moveq	r1, r3
   13f26:	4610      	moveq	r0, r2
   13f28:	bd30      	pop	{r4, r5, pc}
   13f2a:	ea91 0f03 	teq	r1, r3
   13f2e:	bf1e      	ittt	ne
   13f30:	2100      	movne	r1, #0
   13f32:	2000      	movne	r0, #0
   13f34:	bd30      	popne	{r4, r5, pc}
   13f36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   13f3a:	d105      	bne.n	13f48 <__adddf3+0x230>
   13f3c:	0040      	lsls	r0, r0, #1
   13f3e:	4149      	adcs	r1, r1
   13f40:	bf28      	it	cs
   13f42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   13f46:	bd30      	pop	{r4, r5, pc}
   13f48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   13f4c:	bf3c      	itt	cc
   13f4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   13f52:	bd30      	popcc	{r4, r5, pc}
   13f54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13f58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   13f5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13f60:	f04f 0000 	mov.w	r0, #0
   13f64:	bd30      	pop	{r4, r5, pc}
   13f66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13f6a:	bf1a      	itte	ne
   13f6c:	4619      	movne	r1, r3
   13f6e:	4610      	movne	r0, r2
   13f70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   13f74:	bf1c      	itt	ne
   13f76:	460b      	movne	r3, r1
   13f78:	4602      	movne	r2, r0
   13f7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13f7e:	bf06      	itte	eq
   13f80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   13f84:	ea91 0f03 	teqeq	r1, r3
   13f88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   13f8c:	bd30      	pop	{r4, r5, pc}
   13f8e:	bf00      	nop

00013f90 <__aeabi_ui2d>:
   13f90:	f090 0f00 	teq	r0, #0
   13f94:	bf04      	itt	eq
   13f96:	2100      	moveq	r1, #0
   13f98:	4770      	bxeq	lr
   13f9a:	b530      	push	{r4, r5, lr}
   13f9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13fa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13fa4:	f04f 0500 	mov.w	r5, #0
   13fa8:	f04f 0100 	mov.w	r1, #0
   13fac:	e750      	b.n	13e50 <__adddf3+0x138>
   13fae:	bf00      	nop

00013fb0 <__aeabi_i2d>:
   13fb0:	f090 0f00 	teq	r0, #0
   13fb4:	bf04      	itt	eq
   13fb6:	2100      	moveq	r1, #0
   13fb8:	4770      	bxeq	lr
   13fba:	b530      	push	{r4, r5, lr}
   13fbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13fc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13fc4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   13fc8:	bf48      	it	mi
   13fca:	4240      	negmi	r0, r0
   13fcc:	f04f 0100 	mov.w	r1, #0
   13fd0:	e73e      	b.n	13e50 <__adddf3+0x138>
   13fd2:	bf00      	nop

00013fd4 <__aeabi_f2d>:
   13fd4:	0042      	lsls	r2, r0, #1
   13fd6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   13fda:	ea4f 0131 	mov.w	r1, r1, rrx
   13fde:	ea4f 7002 	mov.w	r0, r2, lsl #28
   13fe2:	bf1f      	itttt	ne
   13fe4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   13fe8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   13fec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   13ff0:	4770      	bxne	lr
   13ff2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   13ff6:	bf08      	it	eq
   13ff8:	4770      	bxeq	lr
   13ffa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   13ffe:	bf04      	itt	eq
   14000:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   14004:	4770      	bxeq	lr
   14006:	b530      	push	{r4, r5, lr}
   14008:	f44f 7460 	mov.w	r4, #896	; 0x380
   1400c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14010:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14014:	e71c      	b.n	13e50 <__adddf3+0x138>
   14016:	bf00      	nop

00014018 <__aeabi_ul2d>:
   14018:	ea50 0201 	orrs.w	r2, r0, r1
   1401c:	bf08      	it	eq
   1401e:	4770      	bxeq	lr
   14020:	b530      	push	{r4, r5, lr}
   14022:	f04f 0500 	mov.w	r5, #0
   14026:	e00a      	b.n	1403e <__aeabi_l2d+0x16>

00014028 <__aeabi_l2d>:
   14028:	ea50 0201 	orrs.w	r2, r0, r1
   1402c:	bf08      	it	eq
   1402e:	4770      	bxeq	lr
   14030:	b530      	push	{r4, r5, lr}
   14032:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   14036:	d502      	bpl.n	1403e <__aeabi_l2d+0x16>
   14038:	4240      	negs	r0, r0
   1403a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1403e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14042:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14046:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1404a:	f43f aed8 	beq.w	13dfe <__adddf3+0xe6>
   1404e:	f04f 0203 	mov.w	r2, #3
   14052:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   14056:	bf18      	it	ne
   14058:	3203      	addne	r2, #3
   1405a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1405e:	bf18      	it	ne
   14060:	3203      	addne	r2, #3
   14062:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   14066:	f1c2 0320 	rsb	r3, r2, #32
   1406a:	fa00 fc03 	lsl.w	ip, r0, r3
   1406e:	fa20 f002 	lsr.w	r0, r0, r2
   14072:	fa01 fe03 	lsl.w	lr, r1, r3
   14076:	ea40 000e 	orr.w	r0, r0, lr
   1407a:	fa21 f102 	lsr.w	r1, r1, r2
   1407e:	4414      	add	r4, r2
   14080:	e6bd      	b.n	13dfe <__adddf3+0xe6>
   14082:	bf00      	nop

00014084 <__aeabi_d2lz>:
   14084:	b508      	push	{r3, lr}
   14086:	4602      	mov	r2, r0
   14088:	460b      	mov	r3, r1
   1408a:	ec43 2b17 	vmov	d7, r2, r3
   1408e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   14092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14096:	d403      	bmi.n	140a0 <__aeabi_d2lz+0x1c>
   14098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1409c:	f000 b80c 	b.w	140b8 <__aeabi_d2ulz>
   140a0:	eeb1 7b47 	vneg.f64	d7, d7
   140a4:	ec51 0b17 	vmov	r0, r1, d7
   140a8:	f000 f806 	bl	140b8 <__aeabi_d2ulz>
   140ac:	4240      	negs	r0, r0
   140ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   140b2:	bd08      	pop	{r3, pc}
   140b4:	0000      	movs	r0, r0
	...

000140b8 <__aeabi_d2ulz>:
   140b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 140e8 <__aeabi_d2ulz+0x30>
   140bc:	ec41 0b17 	vmov	d7, r0, r1
   140c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 140f0 <__aeabi_d2ulz+0x38>
   140c4:	ee27 6b06 	vmul.f64	d6, d7, d6
   140c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   140cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   140d0:	eea4 7b45 	vfms.f64	d7, d4, d5
   140d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   140d8:	ee16 1a10 	vmov	r1, s12
   140dc:	ee17 0a90 	vmov	r0, s15
   140e0:	4770      	bx	lr
   140e2:	bf00      	nop
   140e4:	f3af 8000 	nop.w
   140e8:	00000000 	.word	0x00000000
   140ec:	3df00000 	.word	0x3df00000
   140f0:	00000000 	.word	0x00000000
   140f4:	41f00000 	.word	0x41f00000

000140f8 <___init_veneer>:
   140f8:	f85f f000 	ldr.w	pc, [pc]	; 140fc <___init_veneer+0x4>
   140fc:	60002631 	.word	0x60002631

00014100 <___reboot_Teensyduino__veneer>:
   14100:	f85f f000 	ldr.w	pc, [pc]	; 14104 <___reboot_Teensyduino__veneer+0x4>
   14104:	60002589 	.word	0x60002589

00014108 <___ZN16CrashReportClasscvbEv_veneer>:
   14108:	f85f f000 	ldr.w	pc, [pc]	; 1410c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1410c:	60001e15 	.word	0x60001e15

00014110 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   14110:	f85f f000 	ldr.w	pc, [pc]	; 14114 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   14114:	60001711 	.word	0x60001711
	...

Disassembly of section .fini:

00014120 <_fini>:
   14120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14122:	bf00      	nop

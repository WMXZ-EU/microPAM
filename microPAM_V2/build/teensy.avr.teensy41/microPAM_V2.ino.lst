
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd70 	bl	60001f10 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fd1c 	bl	60001f20 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 ff3e 	bl	6000239c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f8e1 	bl	600026f8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fd4c 	bl	60002018 <configure_external_ram>
	analog_init();
60001580:	f001 f870 	bl	60002664 <analog_init>
	pwm_init();
60001584:	f001 f8c8 	bl	60002718 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 ff36 	bl	600023f8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fcc2 	bl	60001f14 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ffc7 	bl	60002528 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fcbb 	bl	60001f1c <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fcb7 	bl	60001f18 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f8ad 	bl	60002708 <____libc_init_array_veneer>
	main();
600015ae:	f001 f88b 	bl	600026c8 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	000152a8 	.word	0x000152a8
600015c0:	60002b44 	.word	0x60002b44
600015c4:	00000000 	.word	0x00000000
600015c8:	200092c0 	.word	0x200092c0
600015cc:	60017df0 	.word	0x60017df0
600015d0:	20000000 	.word	0x20000000
600015d4:	20022640 	.word	0x20022640
600015d8:	200092c0 	.word	0x200092c0
600015dc:	20009000 	.word	0x20009000
600015e0:	00008521 	.word	0x00008521
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	000079a1 	.word	0x000079a1
600015f4:	20022560 	.word	0x20022560
600015f8:	000079a5 	.word	0x000079a5
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20022564 	.word	0x20022564
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001654:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
60001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000165a:	460e      	mov	r6, r1
6000165c:	460f      	mov	r7, r1
6000165e:	bf28      	it	cs
60001660:	f44f 7660 	movcs.w	r6, #896	; 0x380
60001664:	4605      	mov	r5, r0
	__disable_irq();
60001666:	b672      	cpsid	i
	memory_pool = data;
60001668:	4b23      	ldr	r3, [pc, #140]	; (600016f8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
6000166a:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000166c:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
6000166e:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001670:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001672:	4b22      	ldr	r3, [pc, #136]	; (600016fc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001674:	4822      	ldr	r0, [pc, #136]	; (60001700 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001676:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001678:	f001 f836 	bl	600026e8 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
6000167c:	b1cf      	cbz	r7, 600016b2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
6000167e:	4621      	mov	r1, r4
60001680:	481f      	ldr	r0, [pc, #124]	; (60001700 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001682:	f04f 0c01 	mov.w	ip, #1
60001686:	094a      	lsrs	r2, r1, #5
60001688:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
6000168c:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000168e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001692:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001696:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001698:	ea43 0304 	orr.w	r3, r3, r4
6000169c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
600016a0:	d8f1      	bhi.n	60001686 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
600016a2:	4628      	mov	r0, r5
600016a4:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600016a6:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
600016a8:	3301      	adds	r3, #1
600016aa:	f500 7082 	add.w	r0, r0, #260	; 0x104
600016ae:	429e      	cmp	r6, r3
600016b0:	d8f9      	bhi.n	600016a6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
600016b2:	4c14      	ldr	r4, [pc, #80]	; (60001704 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
600016b4:	7825      	ldrb	r5, [r4, #0]
600016b6:	b10d      	cbz	r5, 600016bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
600016b8:	b662      	cpsie	i
}
600016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
600016bc:	2008      	movs	r0, #8
600016be:	f001 f81f 	bl	60002700 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
600016c2:	2280      	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
600016c4:	4910      	ldr	r1, [pc, #64]	; (60001708 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
600016c6:	7102      	strb	r2, [r0, #4]
600016c8:	6005      	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
600016ca:	4a10      	ldr	r2, [pc, #64]	; (6000170c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
600016cc:	f001 f810 	bl	600026f0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
600016d0:	7823      	ldrb	r3, [r4, #0]
600016d2:	2b00      	cmp	r3, #0
600016d4:	d1f0      	bne.n	600016b8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016d6:	4b0e      	ldr	r3, [pc, #56]	; (60001710 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
600016d8:	4a0e      	ldr	r2, [pc, #56]	; (60001714 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
600016da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600016de:	490e      	ldr	r1, [pc, #56]	; (60001718 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
600016e0:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600016e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016e6:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600016e8:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600016ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
600016f0:	2301      	movs	r3, #1
600016f2:	7023      	strb	r3, [r4, #0]
	__enable_irq();
600016f4:	b662      	cpsie	i
}
600016f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600016f8:	200200a8 	.word	0x200200a8
600016fc:	200225dc 	.word	0x200225dc
60001700:	200200b0 	.word	0x200200b0
60001704:	200225fb 	.word	0x200225fb
60001708:	000073e1 	.word	0x000073e1
6000170c:	0001101b 	.word	0x0001101b
60001710:	20009000 	.word	0x20009000
60001714:	000073ed 	.word	0x000073ed
60001718:	e000e400 	.word	0xe000e400

6000171c <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
6000171c:	4b7c      	ldr	r3, [pc, #496]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000171e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001722:	2a0b      	cmp	r2, #11
{
60001724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001728:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000172a:	d11c      	bne.n	60001766 <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
6000172c:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001730:	4978      	ldr	r1, [pc, #480]	; (60001914 <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001732:	4b79      	ldr	r3, [pc, #484]	; (60001918 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
60001734:	4e79      	ldr	r6, [pc, #484]	; (6000191c <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
60001736:	f101 0c04 	add.w	ip, r1, #4
6000173a:	4050      	eors	r0, r2
6000173c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000173e:	f000 0201 	and.w	r2, r0, #1
60001742:	3c01      	subs	r4, #1
60001744:	fb03 f202 	mul.w	r2, r3, r2
60001748:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
6000174c:	d1f7      	bne.n	6000173e <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
6000174e:	45b4      	cmp	ip, r6
60001750:	d002      	beq.n	60001758 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001752:	684a      	ldr	r2, [r1, #4]
60001754:	4661      	mov	r1, ip
60001756:	e7ee      	b.n	60001736 <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001758:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001910 <CrashReportClass::printTo(Print&) const+0x1f4>
6000175c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001760:	4298      	cmp	r0, r3
60001762:	f000 80fd 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001766:	682b      	ldr	r3, [r5, #0]
60001768:	2217      	movs	r2, #23
6000176a:	496d      	ldr	r1, [pc, #436]	; (60001920 <CrashReportClass::printTo(Print&) const+0x204>)
6000176c:	4628      	mov	r0, r5
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001772:	4628      	mov	r0, r5
60001774:	f000 ffd4 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001778:	682b      	ldr	r3, [r5, #0]
6000177a:	2248      	movs	r2, #72	; 0x48
6000177c:	4969      	ldr	r1, [pc, #420]	; (60001924 <CrashReportClass::printTo(Print&) const+0x208>)
6000177e:	685b      	ldr	r3, [r3, #4]
60001780:	4628      	mov	r0, r5
60001782:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001784:	4628      	mov	r0, r5
60001786:	f000 ffcb 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000178a:	682b      	ldr	r3, [r5, #0]
6000178c:	2249      	movs	r2, #73	; 0x49
6000178e:	4966      	ldr	r1, [pc, #408]	; (60001928 <CrashReportClass::printTo(Print&) const+0x20c>)
60001790:	685b      	ldr	r3, [r3, #4]
60001792:	4628      	mov	r0, r5
60001794:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001796:	4628      	mov	r0, r5
60001798:	f000 ffc2 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179c:	682b      	ldr	r3, [r5, #0]
6000179e:	2224      	movs	r2, #36	; 0x24
600017a0:	4962      	ldr	r1, [pc, #392]	; (6000192c <CrashReportClass::printTo(Print&) const+0x210>)
600017a2:	685b      	ldr	r3, [r3, #4]
600017a4:	4628      	mov	r0, r5
600017a6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017a8:	4628      	mov	r0, r5
600017aa:	f000 ffb9 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017ae:	682b      	ldr	r3, [r5, #0]
600017b0:	2247      	movs	r2, #71	; 0x47
600017b2:	495f      	ldr	r1, [pc, #380]	; (60001930 <CrashReportClass::printTo(Print&) const+0x214>)
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	4628      	mov	r0, r5
600017b8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017ba:	4628      	mov	r0, r5
600017bc:	f000 ffb0 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017c0:	682b      	ldr	r3, [r5, #0]
600017c2:	223f      	movs	r2, #63	; 0x3f
600017c4:	495b      	ldr	r1, [pc, #364]	; (60001934 <CrashReportClass::printTo(Print&) const+0x218>)
600017c6:	685b      	ldr	r3, [r3, #4]
600017c8:	4628      	mov	r0, r5
600017ca:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ffa7 	bl	60002720 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600017d2:	4b59      	ldr	r3, [pc, #356]	; (60001938 <CrashReportClass::printTo(Print&) const+0x21c>)
600017d4:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600017d6:	07a2      	lsls	r2, r4, #30
600017d8:	d50d      	bpl.n	600017f6 <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
600017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600017dc:	4b57      	ldr	r3, [pc, #348]	; (6000193c <CrashReportClass::printTo(Print&) const+0x220>)
600017de:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600017e0:	682b      	ldr	r3, [r5, #0]
600017e2:	f000 81b8 	beq.w	60001b56 <CrashReportClass::printTo(Print&) const+0x43a>
600017e6:	2240      	movs	r2, #64	; 0x40
600017e8:	4955      	ldr	r1, [pc, #340]	; (60001940 <CrashReportClass::printTo(Print&) const+0x224>)
600017ea:	685b      	ldr	r3, [r3, #4]
600017ec:	4628      	mov	r0, r5
600017ee:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017f0:	4628      	mov	r0, r5
600017f2:	f000 ff95 	bl	60002720 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600017f6:	0763      	lsls	r3, r4, #29
600017f8:	f100 81a3 	bmi.w	60001b42 <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600017fc:	0727      	lsls	r7, r4, #28
600017fe:	f100 8196 	bmi.w	60001b2e <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001802:	06e6      	lsls	r6, r4, #27
60001804:	f100 8189 	bmi.w	60001b1a <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001808:	06a0      	lsls	r0, r4, #26
6000180a:	f100 817c 	bmi.w	60001b06 <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000180e:	0661      	lsls	r1, r4, #25
60001810:	f100 816f 	bmi.w	60001af2 <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001814:	0622      	lsls	r2, r4, #24
60001816:	f100 8134 	bmi.w	60001a82 <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000181a:	05e3      	lsls	r3, r4, #23
6000181c:	f100 813d 	bmi.w	60001a9a <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001820:	4f3b      	ldr	r7, [pc, #236]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001826:	2b00      	cmp	r3, #0
60001828:	d051      	beq.n	600018ce <CrashReportClass::printTo(Print&) const+0x1b2>
6000182a:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
6000182c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 6000195c <CrashReportClass::printTo(Print&) const+0x240>
60001830:	f8df 8120 	ldr.w	r8, [pc, #288]	; 60001954 <CrashReportClass::printTo(Print&) const+0x238>
60001834:	e004      	b.n	60001840 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
60001836:	3401      	adds	r4, #1
60001838:	2c07      	cmp	r4, #7
6000183a:	d039      	beq.n	600018b0 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
6000183c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001840:	1e62      	subs	r2, r4, #1
60001842:	2601      	movs	r6, #1
60001844:	fa06 f102 	lsl.w	r1, r6, r2
60001848:	4219      	tst	r1, r3
6000184a:	d0f4      	beq.n	60001836 <CrashReportClass::printTo(Print&) const+0x11a>
6000184c:	682b      	ldr	r3, [r5, #0]
6000184e:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
60001852:	4649      	mov	r1, r9
60001854:	220e      	movs	r2, #14
60001856:	685b      	ldr	r3, [r3, #4]
60001858:	4628      	mov	r0, r5
6000185a:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
6000185c:	4621      	mov	r1, r4
6000185e:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001860:	3401      	adds	r4, #1
60001862:	f000 ff35 	bl	600026d0 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001866:	682b      	ldr	r3, [r5, #0]
60001868:	2205      	movs	r2, #5
6000186a:	4936      	ldr	r1, [pc, #216]	; (60001944 <CrashReportClass::printTo(Print&) const+0x228>)
6000186c:	685b      	ldr	r3, [r3, #4]
6000186e:	4628      	mov	r0, r5
60001870:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001872:	2300      	movs	r3, #0
60001874:	f8da 1004 	ldr.w	r1, [sl, #4]
60001878:	220a      	movs	r2, #10
6000187a:	4628      	mov	r0, r5
6000187c:	f000 ff2c 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001880:	682b      	ldr	r3, [r5, #0]
60001882:	2204      	movs	r2, #4
60001884:	4930      	ldr	r1, [pc, #192]	; (60001948 <CrashReportClass::printTo(Print&) const+0x22c>)
60001886:	685b      	ldr	r3, [r3, #4]
60001888:	4628      	mov	r0, r5
6000188a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000188c:	f8da 1004 	ldr.w	r1, [sl, #4]
60001890:	2300      	movs	r3, #0
60001892:	2210      	movs	r2, #16
60001894:	4628      	mov	r0, r5
60001896:	f000 ff1f 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000189a:	682b      	ldr	r3, [r5, #0]
6000189c:	4632      	mov	r2, r6
6000189e:	492b      	ldr	r1, [pc, #172]	; (6000194c <CrashReportClass::printTo(Print&) const+0x230>)
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4628      	mov	r0, r5
600018a4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a6:	4628      	mov	r0, r5
600018a8:	f000 ff3a 	bl	60002720 <___ZN5Print7printlnEv_veneer>
600018ac:	2c07      	cmp	r4, #7
600018ae:	d1c5      	bne.n	6000183c <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600018b0:	4b27      	ldr	r3, [pc, #156]	; (60001950 <CrashReportClass::printTo(Print&) const+0x234>)
600018b2:	2200      	movs	r2, #0
600018b4:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600018b8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600018bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018c0:	4a24      	ldr	r2, [pc, #144]	; (60001954 <CrashReportClass::printTo(Print&) const+0x238>)
600018c2:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600018c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ca:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600018ce:	4a10      	ldr	r2, [pc, #64]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
600018d0:	2300      	movs	r3, #0
	info->ipsr  = 0;
600018d2:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600018d6:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600018da:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
600018de:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
600018e2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600018e6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
600018ea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600018ee:	4809      	ldr	r0, [pc, #36]	; (60001914 <CrashReportClass::printTo(Print&) const+0x1f8>)
600018f0:	4919      	ldr	r1, [pc, #100]	; (60001958 <CrashReportClass::printTo(Print&) const+0x23c>)
600018f2:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
600018f6:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600018fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018fe:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001902:	4a0d      	ldr	r2, [pc, #52]	; (60001938 <CrashReportClass::printTo(Print&) const+0x21c>)
}
60001904:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001906:	6891      	ldr	r1, [r2, #8]
60001908:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
6000190a:	6313      	str	r3, [r2, #48]	; 0x30
}
6000190c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001910:	2027ff00 	.word	0x2027ff00
60001914:	2027ff80 	.word	0x2027ff80
60001918:	edb88320 	.word	0xedb88320
6000191c:	2027ffa8 	.word	0x2027ffa8
60001920:	20008330 	.word	0x20008330
60001924:	20008348 	.word	0x20008348
60001928:	20008394 	.word	0x20008394
6000192c:	200083e0 	.word	0x200083e0
60001930:	20008408 	.word	0x20008408
60001934:	20008450 	.word	0x20008450
60001938:	400f8000 	.word	0x400f8000
6000193c:	0bad00f1 	.word	0x0bad00f1
60001940:	200084dc 	.word	0x200084dc
60001944:	200086b4 	.word	0x200086b4
60001948:	200086bc 	.word	0x200086bc
6000194c:	20007dfc 	.word	0x20007dfc
60001950:	2027f000 	.word	0x2027f000
60001954:	2027ffc0 	.word	0x2027ffc0
60001958:	2027ffa0 	.word	0x2027ffa0
6000195c:	200086a4 	.word	0x200086a4
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	220c      	movs	r2, #12
60001964:	49aa      	ldr	r1, [pc, #680]	; (60001c10 <CrashReportClass::printTo(Print&) const+0x4f4>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000196c:	4628      	mov	r0, r5
6000196e:	f000 fed7 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001972:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001974:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001978:	4628      	mov	r0, r5
    info->time /= 60;
6000197a:	4ba6      	ldr	r3, [pc, #664]	; (60001c14 <CrashReportClass::printTo(Print&) const+0x4f8>)
6000197c:	f8d2 a004 	ldr.w	sl, [r2, #4]
60001980:	fba3 2709 	umull	r2, r7, r3, r9
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <CrashReportClass::printTo(Print&) const+0x4fc>)
60001986:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001988:	fba3 2307 	umull	r2, r3, r3, r7
6000198c:	2226      	movs	r2, #38	; 0x26
6000198e:	095e      	lsrs	r6, r3, #5
60001990:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001994:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001996:	49a1      	ldr	r1, [pc, #644]	; (60001c1c <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001998:	220a      	movs	r2, #10
6000199a:	4628      	mov	r0, r5
6000199c:	fba1 3106 	umull	r3, r1, r1, r6
600019a0:	4623      	mov	r3, r4
600019a2:	0909      	lsrs	r1, r1, #4
600019a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600019a8:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600019ac:	f000 fe94 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019b0:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600019b2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600019b6:	2201      	movs	r2, #1
600019b8:	685b      	ldr	r3, [r3, #4]
600019ba:	4628      	mov	r0, r5
600019bc:	4998      	ldr	r1, [pc, #608]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x504>)
600019be:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600019c0:	4623      	mov	r3, r4
600019c2:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600019c6:	220a      	movs	r2, #10
600019c8:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
600019ca:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
600019ce:	f000 fe83 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2201      	movs	r2, #1
600019d6:	4992      	ldr	r1, [pc, #584]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x504>)
600019d8:	685b      	ldr	r3, [r3, #4]
600019da:	4628      	mov	r0, r5
600019dc:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600019de:	4623      	mov	r3, r4
600019e0:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
600019e4:	220a      	movs	r2, #10
600019e6:	4628      	mov	r0, r5
600019e8:	f000 fe76 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
600019ec:	4628      	mov	r0, r5
600019ee:	f000 fe97 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019f2:	682b      	ldr	r3, [r5, #0]
600019f4:	2224      	movs	r2, #36	; 0x24
600019f6:	498b      	ldr	r1, [pc, #556]	; (60001c24 <CrashReportClass::printTo(Print&) const+0x508>)
600019f8:	685b      	ldr	r3, [r3, #4]
600019fa:	4628      	mov	r0, r5
600019fc:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600019fe:	4623      	mov	r3, r4
60001a00:	2210      	movs	r2, #16
60001a02:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001a06:	4628      	mov	r0, r5
60001a08:	f000 fe66 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe87 	bl	60002720 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001a12:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001a16:	2e00      	cmp	r6, #0
60001a18:	f040 80a0 	bne.w	60001b5c <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001a1c:	4e82      	ldr	r6, [pc, #520]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x50c>)
60001a1e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001a22:	2c00      	cmp	r4, #0
60001a24:	f040 80bb 	bne.w	60001b9e <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001a28:	682b      	ldr	r3, [r5, #0]
60001a2a:	2222      	movs	r2, #34	; 0x22
60001a2c:	497f      	ldr	r1, [pc, #508]	; (60001c2c <CrashReportClass::printTo(Print&) const+0x510>)
60001a2e:	4628      	mov	r0, r5
60001a30:	685b      	ldr	r3, [r3, #4]
60001a32:	4798      	blx	r3
    p.print(info->temp);
60001a34:	4b7c      	ldr	r3, [pc, #496]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001a36:	2102      	movs	r1, #2
60001a38:	4628      	mov	r0, r5
60001a3a:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001a3e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001a42:	f000 fe4d 	bl	600026e0 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a46:	682b      	ldr	r3, [r5, #0]
60001a48:	2205      	movs	r2, #5
60001a4a:	4979      	ldr	r1, [pc, #484]	; (60001c30 <CrashReportClass::printTo(Print&) const+0x514>)
60001a4c:	685b      	ldr	r3, [r3, #4]
60001a4e:	4628      	mov	r0, r5
60001a50:	4798      	blx	r3
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	221d      	movs	r2, #29
60001a56:	4977      	ldr	r1, [pc, #476]	; (60001c34 <CrashReportClass::printTo(Print&) const+0x518>)
60001a58:	685b      	ldr	r3, [r3, #4]
60001a5a:	4628      	mov	r0, r5
60001a5c:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001a5e:	4a76      	ldr	r2, [pc, #472]	; (60001c38 <CrashReportClass::printTo(Print&) const+0x51c>)
60001a60:	4876      	ldr	r0, [pc, #472]	; (60001c3c <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001a62:	2300      	movs	r3, #0
60001a64:	6811      	ldr	r1, [r2, #0]
60001a66:	220a      	movs	r2, #10
60001a68:	fba0 0101 	umull	r0, r1, r0, r1
60001a6c:	4628      	mov	r0, r5
60001a6e:	0c89      	lsrs	r1, r1, #18
60001a70:	f000 fe32 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a74:	682b      	ldr	r3, [r5, #0]
60001a76:	2204      	movs	r2, #4
60001a78:	4971      	ldr	r1, [pc, #452]	; (60001c40 <CrashReportClass::printTo(Print&) const+0x524>)
60001a7a:	685b      	ldr	r3, [r3, #4]
60001a7c:	4628      	mov	r0, r5
60001a7e:	4798      	blx	r3
60001a80:	e6a7      	b.n	600017d2 <CrashReportClass::printTo(Print&) const+0xb6>
60001a82:	682b      	ldr	r3, [r5, #0]
60001a84:	2221      	movs	r2, #33	; 0x21
60001a86:	496f      	ldr	r1, [pc, #444]	; (60001c44 <CrashReportClass::printTo(Print&) const+0x528>)
60001a88:	4628      	mov	r0, r5
60001a8a:	685b      	ldr	r3, [r3, #4]
60001a8c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a8e:	4628      	mov	r0, r5
60001a90:	f000 fe46 	bl	60002720 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001a94:	05e3      	lsls	r3, r4, #23
60001a96:	f57f aec3 	bpl.w	60001820 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
60001a9a:	682b      	ldr	r3, [r5, #0]
60001a9c:	2229      	movs	r2, #41	; 0x29
60001a9e:	496a      	ldr	r1, [pc, #424]	; (60001c48 <CrashReportClass::printTo(Print&) const+0x52c>)
60001aa0:	4628      	mov	r0, r5
60001aa2:	685b      	ldr	r3, [r3, #4]
60001aa4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001aa6:	4628      	mov	r0, r5
60001aa8:	f000 fe3a 	bl	60002720 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001aac:	4967      	ldr	r1, [pc, #412]	; (60001c4c <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
60001aae:	6828      	ldr	r0, [r5, #0]
60001ab0:	2221      	movs	r2, #33	; 0x21
60001ab2:	688b      	ldr	r3, [r1, #8]
60001ab4:	6844      	ldr	r4, [r0, #4]
60001ab6:	4628      	mov	r0, r5
60001ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001abc:	608b      	str	r3, [r1, #8]
60001abe:	4964      	ldr	r1, [pc, #400]	; (60001c50 <CrashReportClass::printTo(Print&) const+0x534>)
60001ac0:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001ac2:	4628      	mov	r0, r5
60001ac4:	f000 fe2c 	bl	60002720 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ac8:	682b      	ldr	r3, [r5, #0]
60001aca:	2242      	movs	r2, #66	; 0x42
60001acc:	4961      	ldr	r1, [pc, #388]	; (60001c54 <CrashReportClass::printTo(Print&) const+0x538>)
60001ace:	685b      	ldr	r3, [r3, #4]
60001ad0:	4628      	mov	r0, r5
60001ad2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ad4:	4628      	mov	r0, r5
60001ad6:	f000 fe23 	bl	60002720 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001ada:	4a5f      	ldr	r2, [pc, #380]	; (60001c58 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001adc:	4b5f      	ldr	r3, [pc, #380]	; (60001c5c <CrashReportClass::printTo(Print&) const+0x540>)
60001ade:	2107      	movs	r1, #7
60001ae0:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001ae2:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001ae8:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001aea:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001aee:	bf30      	wfi
60001af0:	e7fd      	b.n	60001aee <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001af2:	682b      	ldr	r3, [r5, #0]
60001af4:	2221      	movs	r2, #33	; 0x21
60001af6:	495a      	ldr	r1, [pc, #360]	; (60001c60 <CrashReportClass::printTo(Print&) const+0x544>)
60001af8:	4628      	mov	r0, r5
60001afa:	685b      	ldr	r3, [r3, #4]
60001afc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001afe:	4628      	mov	r0, r5
60001b00:	f000 fe0e 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001b04:	e686      	b.n	60001814 <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001b06:	682b      	ldr	r3, [r5, #0]
60001b08:	2229      	movs	r2, #41	; 0x29
60001b0a:	4956      	ldr	r1, [pc, #344]	; (60001c64 <CrashReportClass::printTo(Print&) const+0x548>)
60001b0c:	4628      	mov	r0, r5
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b12:	4628      	mov	r0, r5
60001b14:	f000 fe04 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001b18:	e679      	b.n	6000180e <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001b1a:	682b      	ldr	r3, [r5, #0]
60001b1c:	2226      	movs	r2, #38	; 0x26
60001b1e:	4952      	ldr	r1, [pc, #328]	; (60001c68 <CrashReportClass::printTo(Print&) const+0x54c>)
60001b20:	4628      	mov	r0, r5
60001b22:	685b      	ldr	r3, [r3, #4]
60001b24:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b26:	4628      	mov	r0, r5
60001b28:	f000 fdfa 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001b2c:	e66c      	b.n	60001808 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001b2e:	682b      	ldr	r3, [r5, #0]
60001b30:	222a      	movs	r2, #42	; 0x2a
60001b32:	494e      	ldr	r1, [pc, #312]	; (60001c6c <CrashReportClass::printTo(Print&) const+0x550>)
60001b34:	4628      	mov	r0, r5
60001b36:	685b      	ldr	r3, [r3, #4]
60001b38:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b3a:	4628      	mov	r0, r5
60001b3c:	f000 fdf0 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001b40:	e65f      	b.n	60001802 <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001b42:	682b      	ldr	r3, [r5, #0]
60001b44:	2227      	movs	r2, #39	; 0x27
60001b46:	494a      	ldr	r1, [pc, #296]	; (60001c70 <CrashReportClass::printTo(Print&) const+0x554>)
60001b48:	4628      	mov	r0, r5
60001b4a:	685b      	ldr	r3, [r3, #4]
60001b4c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b4e:	4628      	mov	r0, r5
60001b50:	f000 fde6 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001b54:	e652      	b.n	600017fc <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001b56:	2248      	movs	r2, #72	; 0x48
60001b58:	4946      	ldr	r1, [pc, #280]	; (60001c74 <CrashReportClass::printTo(Print&) const+0x558>)
60001b5a:	e646      	b.n	600017ea <CrashReportClass::printTo(Print&) const+0xce>
60001b5c:	682b      	ldr	r3, [r5, #0]
60001b5e:	2208      	movs	r2, #8
60001b60:	4945      	ldr	r1, [pc, #276]	; (60001c78 <CrashReportClass::printTo(Print&) const+0x55c>)
60001b62:	4628      	mov	r0, r5
60001b64:	685b      	ldr	r3, [r3, #4]
60001b66:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b68:	4623      	mov	r3, r4
60001b6a:	2210      	movs	r2, #16
60001b6c:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001b70:	4628      	mov	r0, r5
60001b72:	f000 fdb1 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b76:	4628      	mov	r0, r5
60001b78:	f000 fdd2 	bl	60002720 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001b7c:	07f4      	lsls	r4, r6, #31
60001b7e:	d427      	bmi.n	60001bd0 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001b80:	07b0      	lsls	r0, r6, #30
60001b82:	f100 811d 	bmi.w	60001dc0 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001b86:	0731      	lsls	r1, r6, #28
60001b88:	f100 810e 	bmi.w	60001da8 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001b8c:	06f2      	lsls	r2, r6, #27
60001b8e:	f100 8127 	bmi.w	60001de0 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001b92:	06b3      	lsls	r3, r6, #26
60001b94:	d525      	bpl.n	60001be2 <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001b96:	682b      	ldr	r3, [r5, #0]
60001b98:	222a      	movs	r2, #42	; 0x2a
60001b9a:	4938      	ldr	r1, [pc, #224]	; (60001c7c <CrashReportClass::printTo(Print&) const+0x560>)
60001b9c:	e01b      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001b9e:	682b      	ldr	r3, [r5, #0]
60001ba0:	2208      	movs	r2, #8
60001ba2:	4937      	ldr	r1, [pc, #220]	; (60001c80 <CrashReportClass::printTo(Print&) const+0x564>)
60001ba4:	4628      	mov	r0, r5
60001ba6:	685b      	ldr	r3, [r3, #4]
60001ba8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001baa:	2300      	movs	r3, #0
60001bac:	2210      	movs	r2, #16
60001bae:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001bb2:	4628      	mov	r0, r5
60001bb4:	f000 fd90 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001bb8:	4628      	mov	r0, r5
60001bba:	f000 fdb1 	bl	60002720 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001bbe:	07a0      	lsls	r0, r4, #30
60001bc0:	d466      	bmi.n	60001c90 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001bc2:	0061      	lsls	r1, r4, #1
60001bc4:	f57f af30 	bpl.w	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	221b      	movs	r2, #27
60001bcc:	492d      	ldr	r1, [pc, #180]	; (60001c84 <CrashReportClass::printTo(Print&) const+0x568>)
60001bce:	e062      	b.n	60001c96 <CrashReportClass::printTo(Print&) const+0x57a>
60001bd0:	682b      	ldr	r3, [r5, #0]
60001bd2:	2228      	movs	r2, #40	; 0x28
60001bd4:	492c      	ldr	r1, [pc, #176]	; (60001c88 <CrashReportClass::printTo(Print&) const+0x56c>)
60001bd6:	685b      	ldr	r3, [r3, #4]
60001bd8:	4628      	mov	r0, r5
60001bda:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bdc:	4628      	mov	r0, r5
60001bde:	f000 fd9f 	bl	60002720 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001be2:	0637      	lsls	r7, r6, #24
60001be4:	d47d      	bmi.n	60001ce2 <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001be6:	05f4      	lsls	r4, r6, #23
60001be8:	d45c      	bmi.n	60001ca4 <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001bea:	05b0      	lsls	r0, r6, #22
60001bec:	f100 80e4 	bmi.w	60001db8 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001bf0:	0571      	lsls	r1, r6, #21
60001bf2:	f100 80dd 	bmi.w	60001db0 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001bf6:	0532      	lsls	r2, r6, #20
60001bf8:	f100 80ee 	bmi.w	60001dd8 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001bfc:	04f3      	lsls	r3, r6, #19
60001bfe:	f100 80e7 	bmi.w	60001dd0 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001c02:	04b7      	lsls	r7, r6, #18
60001c04:	d557      	bpl.n	60001cb6 <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001c06:	682b      	ldr	r3, [r5, #0]
60001c08:	2231      	movs	r2, #49	; 0x31
60001c0a:	4920      	ldr	r1, [pc, #128]	; (60001c8c <CrashReportClass::printTo(Print&) const+0x570>)
60001c0c:	e04d      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001c0e:	bf00      	nop
60001c10:	20007e18 	.word	0x20007e18
60001c14:	88888889 	.word	0x88888889
60001c18:	20007e28 	.word	0x20007e28
60001c1c:	aaaaaaab 	.word	0xaaaaaaab
60001c20:	20007e50 	.word	0x20007e50
60001c24:	20007e54 	.word	0x20007e54
60001c28:	2027ff00 	.word	0x2027ff00
60001c2c:	200082dc 	.word	0x200082dc
60001c30:	20008300 	.word	0x20008300
60001c34:	20008308 	.word	0x20008308
60001c38:	200088c0 	.word	0x200088c0
60001c3c:	431bde83 	.word	0x431bde83
60001c40:	20008328 	.word	0x20008328
60001c44:	200085ec 	.word	0x200085ec
60001c48:	20008610 	.word	0x20008610
60001c4c:	400f8000 	.word	0x400f8000
60001c50:	2000863c 	.word	0x2000863c
60001c54:	20008660 	.word	0x20008660
60001c58:	400d4000 	.word	0x400d4000
60001c5c:	400ac000 	.word	0x400ac000
60001c60:	200085c8 	.word	0x200085c8
60001c64:	2000859c 	.word	0x2000859c
60001c68:	20008574 	.word	0x20008574
60001c6c:	20008548 	.word	0x20008548
60001c70:	20008520 	.word	0x20008520
60001c74:	20008490 	.word	0x20008490
60001c78:	20007e7c 	.word	0x20007e7c
60001c7c:	20007f2c 	.word	0x20007f2c
60001c80:	2000828c 	.word	0x2000828c
60001c84:	200082c0 	.word	0x200082c0
60001c88:	20007e88 	.word	0x20007e88
60001c8c:	20008150 	.word	0x20008150
60001c90:	682b      	ldr	r3, [r5, #0]
60001c92:	2226      	movs	r2, #38	; 0x26
60001c94:	495c      	ldr	r1, [pc, #368]	; (60001e08 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001c96:	4628      	mov	r0, r5
60001c98:	685b      	ldr	r3, [r3, #4]
60001c9a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c9c:	4628      	mov	r0, r5
60001c9e:	f000 fd3f 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001ca2:	e6c1      	b.n	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001ca4:	682b      	ldr	r3, [r5, #0]
60001ca6:	2220      	movs	r2, #32
60001ca8:	4958      	ldr	r1, [pc, #352]	; (60001e0c <CrashReportClass::printTo(Print&) const+0x6f0>)
60001caa:	685b      	ldr	r3, [r3, #4]
60001cac:	4628      	mov	r0, r5
60001cae:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001cb0:	4628      	mov	r0, r5
60001cb2:	f000 fd35 	bl	60002720 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001cb6:	0434      	lsls	r4, r6, #16
60001cb8:	d43f      	bmi.n	60001d3a <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001cba:	03f0      	lsls	r0, r6, #15
60001cbc:	d42d      	bmi.n	60001d1a <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001cbe:	03b1      	lsls	r1, r6, #14
60001cc0:	f100 8082 	bmi.w	60001dc8 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001cc4:	0372      	lsls	r2, r6, #13
60001cc6:	d44a      	bmi.n	60001d5e <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001cc8:	0333      	lsls	r3, r6, #12
60001cca:	f100 8091 	bmi.w	60001df0 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001cce:	01f7      	lsls	r7, r6, #7
60001cd0:	f100 808a 	bmi.w	60001de8 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001cd4:	01b4      	lsls	r4, r6, #6
60001cd6:	f57f aea1 	bpl.w	60001a1c <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001cda:	682b      	ldr	r3, [r5, #0]
60001cdc:	221b      	movs	r2, #27
60001cde:	494c      	ldr	r1, [pc, #304]	; (60001e10 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001ce0:	e01e      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001ce2:	682b      	ldr	r3, [r5, #0]
60001ce4:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001ce6:	4c4b      	ldr	r4, [pc, #300]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001ce8:	4628      	mov	r0, r5
60001cea:	494b      	ldr	r1, [pc, #300]	; (60001e18 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001cec:	685b      	ldr	r3, [r3, #4]
60001cee:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cf0:	2210      	movs	r2, #16
60001cf2:	2300      	movs	r3, #0
60001cf4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001cf8:	4628      	mov	r0, r5
60001cfa:	f000 fced 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001cfe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001d02:	2a1f      	cmp	r2, #31
60001d04:	d92f      	bls.n	60001d66 <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001d06:	4b45      	ldr	r3, [pc, #276]	; (60001e1c <CrashReportClass::printTo(Print&) const+0x700>)
60001d08:	429a      	cmp	r2, r3
60001d0a:	d302      	bcc.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001d0c:	3320      	adds	r3, #32
60001d0e:	429a      	cmp	r2, r3
60001d10:	d372      	bcc.n	60001df8 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001d12:	4628      	mov	r0, r5
60001d14:	f000 fd04 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001d18:	e765      	b.n	60001be6 <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001d1a:	682b      	ldr	r3, [r5, #0]
60001d1c:	2223      	movs	r2, #35	; 0x23
60001d1e:	4940      	ldr	r1, [pc, #256]	; (60001e20 <CrashReportClass::printTo(Print&) const+0x704>)
60001d20:	685b      	ldr	r3, [r3, #4]
60001d22:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001d24:	4e3b      	ldr	r6, [pc, #236]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001d26:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d28:	4628      	mov	r0, r5
60001d2a:	f000 fcf9 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001d2e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001d32:	2c00      	cmp	r4, #0
60001d34:	f43f ae78 	beq.w	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
60001d38:	e731      	b.n	60001b9e <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001d3a:	682b      	ldr	r3, [r5, #0]
60001d3c:	2221      	movs	r2, #33	; 0x21
60001d3e:	4939      	ldr	r1, [pc, #228]	; (60001e24 <CrashReportClass::printTo(Print&) const+0x708>)
60001d40:	4628      	mov	r0, r5
60001d42:	685b      	ldr	r3, [r3, #4]
60001d44:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001d46:	4933      	ldr	r1, [pc, #204]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d48:	2300      	movs	r3, #0
60001d4a:	2210      	movs	r2, #16
60001d4c:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001d50:	4628      	mov	r0, r5
60001d52:	f000 fcc1 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001d56:	4628      	mov	r0, r5
60001d58:	f000 fce2 	bl	60002720 <___ZN5Print7printlnEv_veneer>
60001d5c:	e7ad      	b.n	60001cba <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001d5e:	682b      	ldr	r3, [r5, #0]
60001d60:	2228      	movs	r2, #40	; 0x28
60001d62:	4931      	ldr	r1, [pc, #196]	; (60001e28 <CrashReportClass::printTo(Print&) const+0x70c>)
60001d64:	e7dc      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001d66:	682b      	ldr	r3, [r5, #0]
60001d68:	221e      	movs	r2, #30
60001d6a:	4930      	ldr	r1, [pc, #192]	; (60001e2c <CrashReportClass::printTo(Print&) const+0x710>)
60001d6c:	4628      	mov	r0, r5
60001d6e:	685b      	ldr	r3, [r3, #4]
60001d70:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d72:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d76:	2300      	movs	r3, #0
60001d78:	2210      	movs	r2, #16
60001d7a:	4628      	mov	r0, r5
60001d7c:	f000 fcac 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d80:	682b      	ldr	r3, [r5, #0]
60001d82:	223e      	movs	r2, #62	; 0x3e
60001d84:	492a      	ldr	r1, [pc, #168]	; (60001e30 <CrashReportClass::printTo(Print&) const+0x714>)
60001d86:	685b      	ldr	r3, [r3, #4]
60001d88:	4628      	mov	r0, r5
60001d8a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d8c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d90:	2300      	movs	r3, #0
60001d92:	2210      	movs	r2, #16
60001d94:	4628      	mov	r0, r5
60001d96:	f000 fc9f 	bl	600026d8 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d9a:	682b      	ldr	r3, [r5, #0]
60001d9c:	221d      	movs	r2, #29
60001d9e:	4925      	ldr	r1, [pc, #148]	; (60001e34 <CrashReportClass::printTo(Print&) const+0x718>)
60001da0:	685b      	ldr	r3, [r3, #4]
60001da2:	4628      	mov	r0, r5
60001da4:	4798      	blx	r3
60001da6:	e7b4      	b.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001da8:	682b      	ldr	r3, [r5, #0]
60001daa:	2229      	movs	r2, #41	; 0x29
60001dac:	4922      	ldr	r1, [pc, #136]	; (60001e38 <CrashReportClass::printTo(Print&) const+0x71c>)
60001dae:	e712      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001db0:	682b      	ldr	r3, [r5, #0]
60001db2:	2244      	movs	r2, #68	; 0x44
60001db4:	4921      	ldr	r1, [pc, #132]	; (60001e3c <CrashReportClass::printTo(Print&) const+0x720>)
60001db6:	e778      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001db8:	682b      	ldr	r3, [r5, #0]
60001dba:	222c      	movs	r2, #44	; 0x2c
60001dbc:	4920      	ldr	r1, [pc, #128]	; (60001e40 <CrashReportClass::printTo(Print&) const+0x724>)
60001dbe:	e774      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001dc0:	682b      	ldr	r3, [r5, #0]
60001dc2:	2221      	movs	r2, #33	; 0x21
60001dc4:	491f      	ldr	r1, [pc, #124]	; (60001e44 <CrashReportClass::printTo(Print&) const+0x728>)
60001dc6:	e706      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001dc8:	682b      	ldr	r3, [r5, #0]
60001dca:	2232      	movs	r2, #50	; 0x32
60001dcc:	491e      	ldr	r1, [pc, #120]	; (60001e48 <CrashReportClass::printTo(Print&) const+0x72c>)
60001dce:	e7a7      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001dd0:	682b      	ldr	r3, [r5, #0]
60001dd2:	2233      	movs	r2, #51	; 0x33
60001dd4:	491d      	ldr	r1, [pc, #116]	; (60001e4c <CrashReportClass::printTo(Print&) const+0x730>)
60001dd6:	e768      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001dd8:	682b      	ldr	r3, [r5, #0]
60001dda:	223f      	movs	r2, #63	; 0x3f
60001ddc:	491c      	ldr	r1, [pc, #112]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x734>)
60001dde:	e764      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001de0:	682b      	ldr	r3, [r5, #0]
60001de2:	2225      	movs	r2, #37	; 0x25
60001de4:	491b      	ldr	r1, [pc, #108]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x738>)
60001de6:	e6f6      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001de8:	682b      	ldr	r3, [r5, #0]
60001dea:	2228      	movs	r2, #40	; 0x28
60001dec:	491a      	ldr	r1, [pc, #104]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x73c>)
60001dee:	e797      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001df0:	682b      	ldr	r3, [r5, #0]
60001df2:	2216      	movs	r2, #22
60001df4:	4919      	ldr	r1, [pc, #100]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x740>)
60001df6:	e793      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001df8:	682b      	ldr	r3, [r5, #0]
60001dfa:	2241      	movs	r2, #65	; 0x41
60001dfc:	4918      	ldr	r1, [pc, #96]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x744>)
60001dfe:	4628      	mov	r0, r5
60001e00:	685b      	ldr	r3, [r3, #4]
60001e02:	4798      	blx	r3
60001e04:	e785      	b.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001e06:	bf00      	nop
60001e08:	20008298 	.word	0x20008298
60001e0c:	20008040 	.word	0x20008040
60001e10:	20008270 	.word	0x20008270
60001e14:	2027ff00 	.word	0x2027ff00
60001e18:	20007f58 	.word	0x20007f58
60001e1c:	20022640 	.word	0x20022640
60001e20:	200081a8 	.word	0x200081a8
60001e24:	20008184 	.word	0x20008184
60001e28:	20008200 	.word	0x20008200
60001e2c:	20007f7c 	.word	0x20007f7c
60001e30:	20007f9c 	.word	0x20007f9c
60001e34:	20007fdc 	.word	0x20007fdc
60001e38:	20007ed8 	.word	0x20007ed8
60001e3c:	20008094 	.word	0x20008094
60001e40:	20008064 	.word	0x20008064
60001e44:	20007eb4 	.word	0x20007eb4
60001e48:	200081cc 	.word	0x200081cc
60001e4c:	2000811c 	.word	0x2000811c
60001e50:	200080dc 	.word	0x200080dc
60001e54:	20007f04 	.word	0x20007f04
60001e58:	20008244 	.word	0x20008244
60001e5c:	2000822c 	.word	0x2000822c
60001e60:	20007ffc 	.word	0x20007ffc

60001e64 <CrashReportClass::clear()>:
	info->len = 0;
60001e64:	4a0f      	ldr	r2, [pc, #60]	; (60001ea4 <CrashReportClass::clear()+0x40>)
60001e66:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001e68:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001e6c:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001e70:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001e74:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001e78:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001e7c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001e80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001e84:	4808      	ldr	r0, [pc, #32]	; (60001ea8 <CrashReportClass::clear()+0x44>)
60001e86:	4909      	ldr	r1, [pc, #36]	; (60001eac <CrashReportClass::clear()+0x48>)
60001e88:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001e8c:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001e90:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001e94:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001e98:	4a05      	ldr	r2, [pc, #20]	; (60001eb0 <CrashReportClass::clear()+0x4c>)
60001e9a:	6891      	ldr	r1, [r2, #8]
60001e9c:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001e9e:	6313      	str	r3, [r2, #48]	; 0x30
}
60001ea0:	4770      	bx	lr
60001ea2:	bf00      	nop
60001ea4:	2027ff00 	.word	0x2027ff00
60001ea8:	2027ff80 	.word	0x2027ff80
60001eac:	2027ffa0 	.word	0x2027ffa0
60001eb0:	400f8000 	.word	0x400f8000

60001eb4 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001eb4:	4b12      	ldr	r3, [pc, #72]	; (60001f00 <CrashReportClass::operator bool()+0x4c>)
60001eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001eba:	2b0b      	cmp	r3, #11
60001ebc:	d11e      	bne.n	60001efc <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001ebe:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ec2:	4810      	ldr	r0, [pc, #64]	; (60001f04 <CrashReportClass::operator bool()+0x50>)
{
60001ec4:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001ec6:	4d10      	ldr	r5, [pc, #64]	; (60001f08 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001ec8:	4c10      	ldr	r4, [pc, #64]	; (60001f0c <CrashReportClass::operator bool()+0x58>)
60001eca:	e001      	b.n	60001ed0 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001ecc:	686b      	ldr	r3, [r5, #4]
60001ece:	4675      	mov	r5, lr
60001ed0:	f105 0e04 	add.w	lr, r5, #4
60001ed4:	405a      	eors	r2, r3
60001ed6:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ed8:	f002 0301 	and.w	r3, r2, #1
60001edc:	3901      	subs	r1, #1
60001ede:	fb00 f303 	mul.w	r3, r0, r3
60001ee2:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001ee6:	d1f7      	bne.n	60001ed8 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001ee8:	45a6      	cmp	lr, r4
60001eea:	d1ef      	bne.n	60001ecc <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001eec:	4b04      	ldr	r3, [pc, #16]	; (60001f00 <CrashReportClass::operator bool()+0x4c>)
60001eee:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001ef2:	1a80      	subs	r0, r0, r2
60001ef4:	fab0 f080 	clz	r0, r0
60001ef8:	0940      	lsrs	r0, r0, #5
}
60001efa:	bd30      	pop	{r4, r5, pc}
	return false;
60001efc:	2000      	movs	r0, #0
}
60001efe:	4770      	bx	lr
60001f00:	2027ff00 	.word	0x2027ff00
60001f04:	edb88320 	.word	0xedb88320
60001f08:	2027ff80 	.word	0x2027ff80
60001f0c:	2027ffa8 	.word	0x2027ffa8

60001f10 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001f10:	4770      	bx	lr
60001f12:	bf00      	nop

60001f14 <startup_default_middle_hook>:
60001f14:	4770      	bx	lr
60001f16:	bf00      	nop

60001f18 <startup_default_late_hook>:
60001f18:	4770      	bx	lr
60001f1a:	bf00      	nop

60001f1c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001f1c:	bf00      	nop
60001f1e:	4770      	bx	lr

60001f20 <configure_cache>:
{
60001f20:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001f22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001f26:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001f28:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001f2a:	482b      	ldr	r0, [pc, #172]	; (60001fd8 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001f2c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001f30:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f34:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001f36:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001f3a:	4828      	ldr	r0, [pc, #160]	; (60001fdc <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f3c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f40:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001f42:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f46:	4826      	ldr	r0, [pc, #152]	; (60001fe0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f48:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f4c:	4a25      	ldr	r2, [pc, #148]	; (60001fe4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f4e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f52:	4c25      	ldr	r4, [pc, #148]	; (60001fe8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f54:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f58:	4824      	ldr	r0, [pc, #144]	; (60001fec <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f5a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f5e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f62:	4c23      	ldr	r4, [pc, #140]	; (60001ff0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f64:	4823      	ldr	r0, [pc, #140]	; (60001ff4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f66:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f6a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f6e:	4c22      	ldr	r4, [pc, #136]	; (60001ff8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f70:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f74:	4821      	ldr	r0, [pc, #132]	; (60001ffc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f76:	4a22      	ldr	r2, [pc, #136]	; (60002000 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f78:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f7c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f80:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f84:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f88:	4c1e      	ldr	r4, [pc, #120]	; (60002004 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f8a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f8c:	481e      	ldr	r0, [pc, #120]	; (60002008 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f8e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f92:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f96:	4a1d      	ldr	r2, [pc, #116]	; (6000200c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f98:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f9c:	4c1c      	ldr	r4, [pc, #112]	; (60002010 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f9e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001fa2:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001fa4:	481b      	ldr	r0, [pc, #108]	; (60002014 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001fa6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001faa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001fae:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001fb2:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001fb6:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001fba:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001fbe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001fc2:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fc6:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001fca:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fce:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001fd2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001fd6:	4770      	bx	lr
60001fd8:	1000003f 	.word	0x1000003f
60001fdc:	03080025 	.word	0x03080025
60001fe0:	00100009 	.word	0x00100009
60001fe4:	20022640 	.word	0x20022640
60001fe8:	00200013 	.word	0x00200013
60001fec:	07020021 	.word	0x07020021
60001ff0:	20000014 	.word	0x20000014
60001ff4:	13080025 	.word	0x13080025
60001ff8:	10000009 	.word	0x10000009
60001ffc:	20200016 	.word	0x20200016
60002000:	130b0027 	.word	0x130b0027
60002004:	40000017 	.word	0x40000017
60002008:	60000018 	.word	0x60000018
6000200c:	070b002f 	.word	0x070b002f
60002010:	70000019 	.word	0x70000019
60002014:	130b002f 	.word	0x130b002f

60002018 <configure_external_ram>:
{
60002018:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000201a:	4bb8      	ldr	r3, [pc, #736]	; (600022fc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000201c:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000201e:	4eb8      	ldr	r6, [pc, #736]	; (60002300 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002020:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002022:	4fb8      	ldr	r7, [pc, #736]	; (60002304 <configure_external_ram+0x2ec>)
{
60002024:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002026:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000202a:	49b7      	ldr	r1, [pc, #732]	; (60002308 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000202c:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002030:	4db6      	ldr	r5, [pc, #728]	; (6000230c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002032:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002036:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000203a:	4cb5      	ldr	r4, [pc, #724]	; (60002310 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000203c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002040:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002044:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002048:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000204c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002050:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002054:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60002056:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60002058:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000205a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000205c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000205e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60002066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000206a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000206e:	4aa9      	ldr	r2, [pc, #676]	; (60002314 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60002070:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002074:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60002078:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000207c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60002080:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002084:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002086:	4ba4      	ldr	r3, [pc, #656]	; (60002318 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002088:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000208a:	48a4      	ldr	r0, [pc, #656]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000208c:	49a4      	ldr	r1, [pc, #656]	; (60002320 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000208e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002090:	4aa4      	ldr	r2, [pc, #656]	; (60002324 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002092:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002094:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60002098:	f043 030c 	orr.w	r3, r3, #12
6000209c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600020a0:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600020a4:	6803      	ldr	r3, [r0, #0]
600020a6:	f043 0302 	orr.w	r3, r3, #2
600020aa:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600020ac:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600020ae:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600020b0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600020b4:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020b6:	4b9c      	ldr	r3, [pc, #624]	; (60002328 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600020b8:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600020ba:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020bc:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020be:	4c9b      	ldr	r4, [pc, #620]	; (6000232c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020c0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020c2:	4a9b      	ldr	r2, [pc, #620]	; (60002330 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600020c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020c8:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600020ca:	68c3      	ldr	r3, [r0, #12]
600020cc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600020d0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020d2:	6a03      	ldr	r3, [r0, #32]
600020d4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020d6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020d8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020da:	6a03      	ldr	r3, [r0, #32]
600020dc:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020de:	4a95      	ldr	r2, [pc, #596]	; (60002334 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020e0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600020e2:	4c95      	ldr	r4, [pc, #596]	; (60002338 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020e4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020e6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600020e8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600020ea:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600020ec:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600020f4:	f043 0301 	orr.w	r3, r3, #1
600020f8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600020fc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002100:	498e      	ldr	r1, [pc, #568]	; (6000233c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002102:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60002106:	f043 0301 	orr.w	r3, r3, #1
6000210a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000210e:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60002112:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002114:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002116:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002118:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000211c:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000211e:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002120:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002122:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60002126:	6803      	ldr	r3, [r0, #0]
60002128:	f023 0302 	bic.w	r3, r3, #2
6000212c:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000212e:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002130:	4b83      	ldr	r3, [pc, #524]	; (60002340 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002132:	4984      	ldr	r1, [pc, #528]	; (60002344 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002134:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002136:	f843 2b04 	str.w	r2, [r3], #4
6000213a:	428b      	cmp	r3, r1
6000213c:	d1fb      	bne.n	60002136 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000213e:	4a77      	ldr	r2, [pc, #476]	; (6000231c <configure_external_ram+0x304>)
60002140:	6813      	ldr	r3, [r2, #0]
60002142:	f043 0301 	orr.w	r3, r3, #1
60002146:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002148:	6813      	ldr	r3, [r2, #0]
6000214a:	f013 0301 	ands.w	r3, r3, #1
6000214e:	d1fb      	bne.n	60002148 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002150:	487a      	ldr	r0, [pc, #488]	; (6000233c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002152:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002154:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002158:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000215a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000215e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002160:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002164:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002168:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000216c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002170:	4975      	ldr	r1, [pc, #468]	; (60002348 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002172:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002176:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000217a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000217e:	4873      	ldr	r0, [pc, #460]	; (6000234c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002180:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002184:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002188:	4c71      	ldr	r4, [pc, #452]	; (60002350 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000218a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000218e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60002192:	4970      	ldr	r1, [pc, #448]	; (60002354 <configure_external_ram+0x33c>)
60002194:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002198:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000219a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000219e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021a2:	485e      	ldr	r0, [pc, #376]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600021a4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021ac:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021b0:	6943      	ldr	r3, [r0, #20]
600021b2:	07da      	lsls	r2, r3, #31
600021b4:	d5fc      	bpl.n	600021b0 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021be:	4957      	ldr	r1, [pc, #348]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021c0:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600021c2:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c6:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021ca:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ce:	694b      	ldr	r3, [r1, #20]
600021d0:	07db      	lsls	r3, r3, #31
600021d2:	d5fc      	bpl.n	600021ce <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021dc:	4a4f      	ldr	r2, [pc, #316]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021de:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021e0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021e4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ec:	6953      	ldr	r3, [r2, #20]
600021ee:	07df      	lsls	r7, r3, #31
600021f0:	d5fc      	bpl.n	600021ec <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021f2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021f4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021f6:	4858      	ldr	r0, [pc, #352]	; (60002358 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021f8:	4948      	ldr	r1, [pc, #288]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021fa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021fc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002200:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002204:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002208:	694b      	ldr	r3, [r1, #20]
6000220a:	07de      	lsls	r6, r3, #31
6000220c:	d5fc      	bpl.n	60002208 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000220e:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002212:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002216:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002218:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000221a:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000221c:	4293      	cmp	r3, r2
6000221e:	d165      	bne.n	600022ec <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002220:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002222:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002226:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002228:	483c      	ldr	r0, [pc, #240]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000222a:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000222e:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002232:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002236:	6943      	ldr	r3, [r0, #20]
60002238:	07dd      	lsls	r5, r3, #31
6000223a:	d5fc      	bpl.n	60002236 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000223c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000223e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002242:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002244:	4a35      	ldr	r2, [pc, #212]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002246:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002248:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000224c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002250:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002254:	6953      	ldr	r3, [r2, #20]
60002256:	07dc      	lsls	r4, r3, #31
60002258:	d5fc      	bpl.n	60002254 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000225a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000225c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002260:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002264:	492d      	ldr	r1, [pc, #180]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002266:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002268:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000226c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002270:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002274:	694b      	ldr	r3, [r1, #20]
60002276:	07d8      	lsls	r0, r3, #31
60002278:	d5fc      	bpl.n	60002274 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000227a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000227c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002280:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002284:	4a25      	ldr	r2, [pc, #148]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002286:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002288:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000228c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002290:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002294:	6953      	ldr	r3, [r2, #20]
60002296:	07d9      	lsls	r1, r3, #31
60002298:	d5fc      	bpl.n	60002294 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000229a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000229c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022a0:	482d      	ldr	r0, [pc, #180]	; (60002358 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022a2:	491e      	ldr	r1, [pc, #120]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022a4:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600022a6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022aa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022b2:	694b      	ldr	r3, [r1, #20]
600022b4:	07da      	lsls	r2, r3, #31
600022b6:	d5fc      	bpl.n	600022b2 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600022b8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022bc:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022c0:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600022c2:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022c4:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022c6:	4293      	cmp	r3, r2
600022c8:	d050      	beq.n	6000236c <configure_external_ram+0x354>
600022ca:	2508      	movs	r5, #8
600022cc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600022d0:	4922      	ldr	r1, [pc, #136]	; (6000235c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022d2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600022d4:	4b22      	ldr	r3, [pc, #136]	; (60002360 <configure_external_ram+0x348>)
			external_psram_size = 16;
600022d6:	4a23      	ldr	r2, [pc, #140]	; (60002364 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022d8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600022da:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600022dc:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022de:	2301      	movs	r3, #1
600022e0:	4821      	ldr	r0, [pc, #132]	; (60002368 <configure_external_ram+0x350>)
600022e2:	4422      	add	r2, r4
600022e4:	f000 fa14 	bl	60002710 <__sm_set_pool_veneer>
}
600022e8:	b003      	add	sp, #12
600022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600022ec:	4b1e      	ldr	r3, [pc, #120]	; (60002368 <configure_external_ram+0x350>)
600022ee:	2200      	movs	r2, #0
600022f0:	e9c3 2200 	strd	r2, r2, [r3]
600022f4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600022f8:	b003      	add	sp, #12
600022fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
600022fc:	401f8000 	.word	0x401f8000
60002300:	0001b0f9 	.word	0x0001b0f9
60002304:	000110f9 	.word	0x000110f9
60002308:	401f8400 	.word	0x401f8400
6000230c:	000170f9 	.word	0x000170f9
60002310:	400fc000 	.word	0x400fc000
60002314:	1ffffcff 	.word	0x1ffffcff
60002318:	a0000300 	.word	0xa0000300
6000231c:	402a4000 	.word	0x402a4000
60002320:	402a8000 	.word	0x402a8000
60002324:	ffff0012 	.word	0xffff0012
60002328:	00f737ff 	.word	0x00f737ff
6000232c:	80000040 	.word	0x80000040
60002330:	7cf0ff00 	.word	0x7cf0ff00
60002334:	830f00ff 	.word	0x830f00ff
60002338:	00020063 	.word	0x00020063
6000233c:	5af05af0 	.word	0x5af05af0
60002340:	402a4200 	.word	0x402a4200
60002344:	402a4300 	.word	0x402a4300
60002348:	3018049f 	.word	0x3018049f
6000234c:	0a1806eb 	.word	0x0a1806eb
60002350:	0a180638 	.word	0x0a180638
60002354:	26013206 	.word	0x26013206
60002358:	00030004 	.word	0x00030004
6000235c:	70000000 	.word	0x70000000
60002360:	70000000 	.word	0x70000000
60002364:	20022603 	.word	0x20022603
60002368:	200216e8 	.word	0x200216e8
	FLEXSPI2_IPCR0 = addr;
6000236c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002374:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002376:	4808      	ldr	r0, [pc, #32]	; (60002398 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60002378:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000237c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002380:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002384:	6943      	ldr	r3, [r0, #20]
60002386:	07db      	lsls	r3, r3, #31
60002388:	d5fc      	bpl.n	60002384 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000238a:	2301      	movs	r3, #1
6000238c:	2510      	movs	r5, #16
6000238e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60002392:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002394:	e79c      	b.n	600022d0 <configure_external_ram+0x2b8>
60002396:	bf00      	nop
60002398:	402a4000 	.word	0x402a4000

6000239c <usb_pll_start>:
{
6000239c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000239e:	4a15      	ldr	r2, [pc, #84]	; (600023f4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023a0:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023b2:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600023b6:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600023b8:	f013 0f02 	tst.w	r3, #2
600023bc:	d10e      	bne.n	600023dc <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600023be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600023c2:	d00f      	beq.n	600023e4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600023c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600023c8:	d00e      	beq.n	600023e8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600023ca:	2b00      	cmp	r3, #0
600023cc:	daf3      	bge.n	600023b6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600023ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600023d2:	d10b      	bne.n	600023ec <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600023d4:	065b      	lsls	r3, r3, #25
600023d6:	d50b      	bpl.n	600023f0 <usb_pll_start+0x54>
}
600023d8:	bcf0      	pop	{r4, r5, r6, r7}
600023da:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023dc:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600023de:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023e0:	6190      	str	r0, [r2, #24]
			continue;
600023e2:	e7e8      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023e4:	6155      	str	r5, [r2, #20]
			continue;
600023e6:	e7e6      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023e8:	6156      	str	r6, [r2, #20]
			continue;
600023ea:	e7e4      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023ec:	6191      	str	r1, [r2, #24]
			continue;
600023ee:	e7e2      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023f0:	6157      	str	r7, [r2, #20]
			continue;
600023f2:	e7e0      	b.n	600023b6 <usb_pll_start+0x1a>
600023f4:	400d8000 	.word	0x400d8000

600023f8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023f8:	4a3f      	ldr	r2, [pc, #252]	; (600024f8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600023fa:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600023fc:	493f      	ldr	r1, [pc, #252]	; (600024fc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023fe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002402:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002406:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000240a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002500 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000240e:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002412:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60002504 <tempmon_init+0x10c>
{
60002416:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000241c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002420:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002424:	4d38      	ldr	r5, [pc, #224]	; (60002508 <tempmon_init+0x110>)
60002426:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002428:	4c38      	ldr	r4, [pc, #224]	; (6000250c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000242a:	4839      	ldr	r0, [pc, #228]	; (60002510 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000242c:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000242e:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002432:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002434:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000243c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002440:	ee07 1a10 	vmov	s14, r1
60002444:	4b33      	ldr	r3, [pc, #204]	; (60002514 <tempmon_init+0x11c>)
60002446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000244a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000244c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002450:	4931      	ldr	r1, [pc, #196]	; (60002518 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002452:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002456:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000245a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000245e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002462:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002466:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000246a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000246e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002472:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002476:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000247a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000247e:	4827      	ldr	r0, [pc, #156]	; (6000251c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002480:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002484:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002488:	ee75 5a87 	vadd.f32	s11, s11, s14
6000248c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002490:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002494:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002498:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000249c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024a0:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600024a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024a8:	ee16 3a10 	vmov	r3, s12
600024ac:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024b4:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600024b8:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024ba:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024be:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
600024c6:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600024ca:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600024cc:	4914      	ldr	r1, [pc, #80]	; (60002520 <tempmon_init+0x128>)
600024ce:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600024d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600024d6:	f043 0302 	orr.w	r3, r3, #2
600024da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600024de:	4b11      	ldr	r3, [pc, #68]	; (60002524 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024e0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600024e4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600024ec:	2201      	movs	r2, #1
}
600024ee:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600024f4:	4770      	bx	lr
600024f6:	bf00      	nop
600024f8:	400d8100 	.word	0x400d8100
600024fc:	401f4400 	.word	0x401f4400
60002500:	42aa0000 	.word	0x42aa0000
60002504:	42b40000 	.word	0x42b40000
60002508:	20022084 	.word	0x20022084
6000250c:	20022080 	.word	0x20022080
60002510:	20022088 	.word	0x20022088
60002514:	2002208c 	.word	0x2002208c
60002518:	0fff0000 	.word	0x0fff0000
6000251c:	e000e400 	.word	0xe000e400
60002520:	20009000 	.word	0x20009000
60002524:	00008701 	.word	0x00008701

60002528 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002528:	4b31      	ldr	r3, [pc, #196]	; (600025f0 <usb_init+0xc8>)
6000252a:	f640 7261 	movw	r2, #3937	; 0xf61
{
6000252e:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002530:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002534:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002538:	f000 f8f6 	bl	60002728 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000253c:	4a2d      	ldr	r2, [pc, #180]	; (600025f4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000253e:	492e      	ldr	r1, [pc, #184]	; (600025f8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002540:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002544:	482d      	ldr	r0, [pc, #180]	; (600025fc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002546:	f043 0303 	orr.w	r3, r3, #3
6000254a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000254e:	4b2c      	ldr	r3, [pc, #176]	; (60002600 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002550:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002554:	6802      	ldr	r2, [r0, #0]
60002556:	421a      	tst	r2, r3
60002558:	d103      	bne.n	60002562 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000255a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
6000255e:	079a      	lsls	r2, r3, #30
60002560:	d01b      	beq.n	6000259a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002562:	4a25      	ldr	r2, [pc, #148]	; (600025f8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002564:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60002568:	4b24      	ldr	r3, [pc, #144]	; (600025fc <usb_init+0xd4>)
6000256a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000256c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002570:	f043 0302 	orr.w	r3, r3, #2
60002574:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60002578:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000257c:	079b      	lsls	r3, r3, #30
6000257e:	d4fb      	bmi.n	60002578 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002580:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002584:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002588:	4b1c      	ldr	r3, [pc, #112]	; (600025fc <usb_init+0xd4>)
6000258a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000258e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002592:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002594:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60002596:	f000 f8cb 	bl	60002730 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000259a:	4a18      	ldr	r2, [pc, #96]	; (600025fc <usb_init+0xd4>)
6000259c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025a0:	4c15      	ldr	r4, [pc, #84]	; (600025f8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600025a2:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600025a4:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025a6:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025a8:	4b16      	ldr	r3, [pc, #88]	; (60002604 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600025aa:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025ac:	f44f 7260 	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025b0:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025b4:	4618      	mov	r0, r3
600025b6:	f000 f897 	bl	600026e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600025ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025be:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025c0:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025c4:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025c8:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600025ca:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600025ce:	641a      	str	r2, [r3, #64]	; 0x40
600025d0:	4b0d      	ldr	r3, [pc, #52]	; (60002608 <usb_init+0xe0>)
600025d2:	4a0e      	ldr	r2, [pc, #56]	; (6000260c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025d4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600025d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025dc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600025e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600025e4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025e6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600025ea:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600025ee:	bd10      	pop	{r4, pc}
600025f0:	400d8000 	.word	0x400d8000
600025f4:	400fc000 	.word	0x400fc000
600025f8:	402e0000 	.word	0x402e0000
600025fc:	400d9000 	.word	0x400d9000
60002600:	001e1c00 	.word	0x001e1c00
60002604:	20000000 	.word	0x20000000
60002608:	20009000 	.word	0x20009000
6000260c:	000089b1 	.word	0x000089b1

60002610 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002610:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60002612:	4b0e      	ldr	r3, [pc, #56]	; (6000264c <_reboot_Teensyduino_+0x3c>)
60002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60002616:	079b      	lsls	r3, r3, #30
60002618:	d400      	bmi.n	6000261c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000261a:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000261c:	b672      	cpsid	i
		USB1_USBCMD = 0;
6000261e:	4b0c      	ldr	r3, [pc, #48]	; (60002650 <_reboot_Teensyduino_+0x40>)
60002620:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60002622:	4a0c      	ldr	r2, [pc, #48]	; (60002654 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002624:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002628:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000262c:	490a      	ldr	r1, [pc, #40]	; (60002658 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000262e:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002632:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002634:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60002636:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000263a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000263e:	4807      	ldr	r0, [pc, #28]	; (6000265c <_reboot_Teensyduino_+0x4c>)
60002640:	4a07      	ldr	r2, [pc, #28]	; (60002660 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002642:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002644:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002646:	689b      	ldr	r3, [r3, #8]
60002648:	4798      	blx	r3
	}
	__builtin_unreachable();
6000264a:	bf00      	nop
6000264c:	401f4400 	.word	0x401f4400
60002650:	402e0000 	.word	0x402e0000
60002654:	400ac000 	.word	0x400ac000
60002658:	00200003 	.word	0x00200003
6000265c:	20208000 	.word	0x20208000
60002660:	eb120000 	.word	0xeb120000

60002664 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002664:	4b10      	ldr	r3, [pc, #64]	; (600026a8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002666:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002668:	4a10      	ldr	r2, [pc, #64]	; (600026ac <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000266a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000266c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002670:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002672:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002674:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002678:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000267a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000267e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002680:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002682:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002684:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002686:	061b      	lsls	r3, r3, #24
60002688:	d4fc      	bmi.n	60002684 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000268a:	4a09      	ldr	r2, [pc, #36]	; (600026b0 <analog_init+0x4c>)
6000268c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002690:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002692:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002694:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002696:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002698:	f013 0380 	ands.w	r3, r3, #128	; 0x80
6000269c:	d1fb      	bne.n	60002696 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000269e:	4a05      	ldr	r2, [pc, #20]	; (600026b4 <analog_init+0x50>)
600026a0:	7013      	strb	r3, [r2, #0]
}
600026a2:	f85d 4b04 	ldr.w	r4, [sp], #4
600026a6:	4770      	bx	lr
600026a8:	400fc000 	.word	0x400fc000
600026ac:	400c4000 	.word	0x400c4000
600026b0:	400c8000 	.word	0x400c8000
600026b4:	20022602 	.word	0x20022602

600026b8 <_init>:
600026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600026ba:	bf00      	nop
600026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
600026be:	bc08      	pop	{r3}
600026c0:	469e      	mov	lr, r3
600026c2:	4770      	bx	lr
600026c4:	0000      	movs	r0, r0
	...

600026c8 <__main_veneer>:
600026c8:	f85f f000 	ldr.w	pc, [pc]	; 600026cc <__main_veneer+0x4>
600026cc:	00008305 	.word	0x00008305

600026d0 <___ZN5Print5printEl_veneer>:
600026d0:	f85f f000 	ldr.w	pc, [pc]	; 600026d4 <___ZN5Print5printEl_veneer+0x4>
600026d4:	00007bcd 	.word	0x00007bcd

600026d8 <___ZN5Print11printNumberEmhh_veneer>:
600026d8:	f85f f000 	ldr.w	pc, [pc]	; 600026dc <___ZN5Print11printNumberEmhh_veneer+0x4>
600026dc:	00007c39 	.word	0x00007c39

600026e0 <___ZN5Print10printFloatEdh_veneer>:
600026e0:	f85f f000 	ldr.w	pc, [pc]	; 600026e4 <___ZN5Print10printFloatEdh_veneer+0x4>
600026e4:	00007c61 	.word	0x00007c61

600026e8 <__memset_veneer>:
600026e8:	f85f f000 	ldr.w	pc, [pc]	; 600026ec <__memset_veneer+0x4>
600026ec:	0000c845 	.word	0x0000c845

600026f0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
600026f0:	f85f f000 	ldr.w	pc, [pc]	; 600026f4 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
600026f4:	00007a1d 	.word	0x00007a1d

600026f8 <__set_arm_clock_veneer>:
600026f8:	f85f f000 	ldr.w	pc, [pc]	; 600026fc <__set_arm_clock_veneer+0x4>
600026fc:	00007e55 	.word	0x00007e55

60002700 <___Znwj_veneer>:
60002700:	f85f f000 	ldr.w	pc, [pc]	; 60002704 <___Znwj_veneer+0x4>
60002704:	00008449 	.word	0x00008449

60002708 <____libc_init_array_veneer>:
60002708:	f85f f000 	ldr.w	pc, [pc]	; 6000270c <____libc_init_array_veneer+0x4>
6000270c:	0000cabd 	.word	0x0000cabd

60002710 <__sm_set_pool_veneer>:
60002710:	f85f f000 	ldr.w	pc, [pc]	; 60002714 <__sm_set_pool_veneer+0x4>
60002714:	0000a649 	.word	0x0000a649

60002718 <__pwm_init_veneer>:
60002718:	f85f f000 	ldr.w	pc, [pc]	; 6000271c <__pwm_init_veneer+0x4>
6000271c:	0000a505 	.word	0x0000a505

60002720 <___ZN5Print7printlnEv_veneer>:
60002720:	f85f f000 	ldr.w	pc, [pc]	; 60002724 <___ZN5Print7printlnEv_veneer+0x4>
60002724:	00007be5 	.word	0x00007be5

60002728 <__usb_init_serialnumber_veneer>:
60002728:	f85f f000 	ldr.w	pc, [pc]	; 6000272c <__usb_init_serialnumber_veneer+0x4>
6000272c:	000099bd 	.word	0x000099bd

60002730 <__delay_veneer>:
60002730:	f85f f000 	ldr.w	pc, [pc]	; 60002734 <__delay_veneer+0x4>
60002734:	00008145 	.word	0x00008145

60002738 <__frame_dummy_init_array_entry>:
60002738:	00000045 000002d1 000008fd 00000ac5     E...............
60002748:	00001451 00007169 0000739d              Q...iq...s..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
	}
	__enable_irq();
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
}
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	200092c0 	.word	0x200092c0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	200092c0 	.word	0x200092c0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    {
      if ( head==tail ) return 0;                 // queue is empty
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
      head = (head+1)%MAUDIO;
      return 1;   // signal success.
    }
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
    // read error
    return -1;
  }
  str[n] = '\0';
  return n;
}
      60:	20021f78 	.word	0x20021f78
      64:	60022000 	.word	0x60022000

00000068 <AudioTrigger::update()>:
      class AudioTrigger : public AudioStream
      {
      public:
          AudioTrigger() : AudioStream(0, NULL) {init(); prio = 8;}
          void init(void);
          virtual void update(void) {;}
      68:	4770      	bx	lr
    return -1;
      6a:	bf00      	nop

0000006c <loop>:
      6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
      70:	4d71      	ldr	r5, [pc, #452]	; (238 <loop+0x1cc>)
    *--str = 'T';
      72:	b08d      	sub	sp, #52	; 0x34
    *--str = 'U';
      74:	4e71      	ldr	r6, [pc, #452]	; (23c <loop+0x1d0>)
    *--str = 'C';
      76:	682b      	ldr	r3, [r5, #0]
    *--str = 'T';
      78:	3301      	adds	r3, #1
    *--str = 'U';
      7a:	602b      	str	r3, [r5, #0]
  }
  return str;
}
      7c:	f001 fa2e 	bl	14dc <getDataCount()>
    *--str = '0';
      80:	8833      	ldrh	r3, [r6, #0]
      82:	4283      	cmp	r3, r0
      84:	bf38      	it	cc
      sign = '+';
      86:	8030      	strhcc	r0, [r6, #0]
      88:	f00a f89e 	bl	a1c8 <usb_serial_available>
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
      8c:	b998      	cbnz	r0, b6 <loop+0x4a>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	4c6c      	ldr	r4, [pc, #432]	; (240 <loop+0x1d4>)
      90:	8820      	ldrh	r0, [r4, #0]
      92:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 28c <loop+0x220>
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      96:	b200      	sxth	r0, r0
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      98:	f001 f982 	bl	13a0 <saveData(short)>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      9c:	4b69      	ldr	r3, [pc, #420]	; (244 <loop+0x1d8>)
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      9e:	8020      	strh	r0, [r4, #0]
    }
    return str;

   fail:
    return nullptr;
      a0:	f8d3 b000 	ldr.w	fp, [r3]
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
      a4:	f8da 3000 	ldr.w	r3, [sl]
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
		txBufferLength = 1;
      a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
		txBuffer[0] = (address << 1);
      ac:	455b      	cmp	r3, fp
}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
      ae:	d30d      	bcc.n	cc <loop+0x60>
      b0:	b00d      	add	sp, #52	; 0x34
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      b6:	f00a f8cb 	bl	a250 <usb_serial_getchar>
      ba:	b2c0      	uxtb	r0, r0
  return str - name;

 fail:
  *name = 0;
  return 0;
}
      bc:	2873      	cmp	r0, #115	; 0x73
      be:	d02a      	beq.n	116 <loop+0xaa>
      c0:	2865      	cmp	r0, #101	; 0x65
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	d11e      	bne.n	102 <loop+0x96>
      c4:	4c5e      	ldr	r4, [pc, #376]	; (240 <loop+0x1d4>)
      c6:	2304      	movs	r3, #4
      c8:	8023      	strh	r3, [r4, #0]
      ca:	e7e1      	b.n	90 <loop+0x24>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	a80a      	add	r0, sp, #40	; 0x28
      ce:	f001 fbbb 	bl	1848 <rtc_get_datetime(datetime_t*)>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4b5d      	ldr	r3, [pc, #372]	; (248 <loop+0x1dc>)
      d4:	f9b3 3000 	ldrsh.w	r3, [r3]
      d8:	bb0b      	cbnz	r3, 11e <loop+0xb2>
      da:	4b5c      	ldr	r3, [pc, #368]	; (24c <loop+0x1e0>)
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	9307      	str	r3, [sp, #28]
      de:	4b5c      	ldr	r3, [pc, #368]	; (250 <loop+0x1e4>)
      e0:	9308      	str	r3, [sp, #32]
    return 0; // zero returned if timeout
      e2:	4b5c      	ldr	r3, [pc, #368]	; (254 <loop+0x1e8>)
      e4:	9309      	str	r3, [sp, #36]	; 0x24
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	2300      	movs	r3, #0
      e8:	9a07      	ldr	r2, [sp, #28]
      ea:	f8ca b000 	str.w	fp, [sl]
      ee:	6013      	str	r3, [r2, #0]
      f0:	9a08      	ldr	r2, [sp, #32]
      f2:	602b      	str	r3, [r5, #0]
      f4:	6013      	str	r3, [r2, #0]
      f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
      f8:	8033      	strh	r3, [r6, #0]
      fa:	6013      	str	r3, [r2, #0]
      fc:	b00d      	add	sp, #52	; 0x34
      fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     102:	286d      	cmp	r0, #109	; 0x6d
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	f040 8084 	bne.w	210 <loop+0x1a4>
    return m_blockDev->syncDevice();
     108:	4a4f      	ldr	r2, [pc, #316]	; (248 <loop+0x1dc>)
     10a:	4c4d      	ldr	r4, [pc, #308]	; (240 <loop+0x1d4>)
     10c:	8813      	ldrh	r3, [r2, #0]
     10e:	f1c3 0301 	rsb	r3, r3, #1
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     112:	8013      	strh	r3, [r2, #0]
     114:	e7bc      	b.n	90 <loop+0x24>
     116:	4c4a      	ldr	r4, [pc, #296]	; (240 <loop+0x1d4>)
     118:	2300      	movs	r3, #0
     11a:	8023      	strh	r3, [r4, #0]
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	e7b8      	b.n	90 <loop+0x24>
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
     126:	9304      	str	r3, [sp, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     128:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	494a      	ldr	r1, [pc, #296]	; (258 <loop+0x1ec>)
     12e:	9303      	str	r3, [sp, #12]
     130:	f99d 302e 	ldrsb.w	r3, [sp, #46]	; 0x2e
	if (!wait_idle()) return 4;
     134:	4849      	ldr	r0, [pc, #292]	; (25c <loop+0x1f0>)
	return rxBufferLength;
}
     136:	9302      	str	r3, [sp, #8]
     138:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
     13c:	4c43      	ldr	r4, [pc, #268]	; (24c <loop+0x1e0>)
     13e:	9301      	str	r3, [sp, #4]
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     140:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
     144:	4f42      	ldr	r7, [pc, #264]	; (250 <loop+0x1e4>)
     146:	9300      	str	r3, [sp, #0]
     148:	f99d 302a 	ldrsb.w	r3, [sp, #42]	; 0x2a
     14c:	f007 fd66 	bl	7c1c <Print::printf(char const*, ...)>
     150:	2103      	movs	r1, #3
     152:	4843      	ldr	r0, [pc, #268]	; (260 <loop+0x1f4>)
     154:	f00a f8a2 	bl	a29c <usb_serial_write>
     158:	2300      	movs	r3, #0
     15a:	220a      	movs	r2, #10
        if (flags & T_ACCESS) {
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
     15c:	6829      	ldr	r1, [r5, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	483f      	ldr	r0, [pc, #252]	; (25c <loop+0x1f0>)
     160:	f007 fd6a 	bl	7c38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	2101      	movs	r1, #1
     166:	483f      	ldr	r0, [pc, #252]	; (264 <loop+0x1f8>)
          df->modifyTimeMs = ms10;
     168:	9407      	str	r4, [sp, #28]
     16a:	f00a f897 	bl	a29c <usb_serial_write>
     16e:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	220a      	movs	r2, #10
     172:	6821      	ldr	r1, [r4, #0]
}
     174:	4839      	ldr	r0, [pc, #228]	; (25c <loop+0x1f0>)
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     176:	9708      	str	r7, [sp, #32]
     178:	f007 fd5e 	bl	7c38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     17c:	2101      	movs	r1, #1
     17e:	4839      	ldr	r0, [pc, #228]	; (264 <loop+0x1f8>)
     180:	f00a f88c 	bl	a29c <usb_serial_write>
}
     184:	2300      	movs	r3, #0
     186:	220a      	movs	r2, #10
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     188:	6839      	ldr	r1, [r7, #0]
     18a:	4834      	ldr	r0, [pc, #208]	; (25c <loop+0x1f0>)
    writeMsg("Bad cluster count\r\n");
     18c:	f007 fd54 	bl	7c38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     190:	2101      	movs	r1, #1
     192:	4834      	ldr	r0, [pc, #208]	; (264 <loop+0x1f8>)
     194:	f00a f882 	bl	a29c <usb_serial_write>
     198:	8832      	ldrh	r2, [r6, #0]
     19a:	4933      	ldr	r1, [pc, #204]	; (268 <loop+0x1fc>)
     19c:	482f      	ldr	r0, [pc, #188]	; (25c <loop+0x1f0>)
}
     19e:	f007 fd3d 	bl	7c1c <Print::printf(char const*, ...)>
     1a2:	2102      	movs	r1, #2
     1a4:	4831      	ldr	r0, [pc, #196]	; (26c <loop+0x200>)
     1a6:	f00a f879 	bl	a29c <usb_serial_write>
     1aa:	4b31      	ldr	r3, [pc, #196]	; (270 <loop+0x204>)
     1ac:	4931      	ldr	r1, [pc, #196]	; (274 <loop+0x208>)
     1ae:	681a      	ldr	r2, [r3, #0]
     1b0:	482a      	ldr	r0, [pc, #168]	; (25c <loop+0x1f0>)
     1b2:	f007 fd33 	bl	7c1c <Print::printf(char const*, ...)>
     1b6:	4b27      	ldr	r3, [pc, #156]	; (254 <loop+0x1e8>)
     1b8:	2101      	movs	r1, #1
     1ba:	482a      	ldr	r0, [pc, #168]	; (264 <loop+0x1f8>)
     1bc:	461f      	mov	r7, r3
     1be:	9309      	str	r3, [sp, #36]	; 0x24
     1c0:	4c2d      	ldr	r4, [pc, #180]	; (278 <loop+0x20c>)
     1c2:	f00a f86b 	bl	a29c <usb_serial_write>
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
     1c6:	6839      	ldr	r1, [r7, #0]
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
     1c8:	2300      	movs	r3, #0
     1ca:	220a      	movs	r2, #10
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4823      	ldr	r0, [pc, #140]	; (25c <loop+0x1f0>)
     1ce:	f007 fd33 	bl	7c38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    return m_blockDev->syncDevice();
     1d2:	2104      	movs	r1, #4
     1d4:	4829      	ldr	r0, [pc, #164]	; (27c <loop+0x210>)
     1d6:	f104 0960 	add.w	r9, r4, #96	; 0x60
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1da:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 290 <loop+0x224>
     1de:	4f1f      	ldr	r7, [pc, #124]	; (25c <loop+0x1f0>)
     1e0:	f00a f85c 	bl	a29c <usb_serial_write>
     1e4:	f854 2f04 	ldr.w	r2, [r4, #4]!
     1e8:	4641      	mov	r1, r8
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ea:	4638      	mov	r0, r7
     1ec:	f007 fd16 	bl	7c1c <Print::printf(char const*, ...)>
     1f0:	454c      	cmp	r4, r9
     1f2:	d1f7      	bne.n	1e4 <loop+0x178>

      #if PROC_MODE==0
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}
      #else
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
        Serial.printf("%2d",max_stat);
     1f4:	4c22      	ldr	r4, [pc, #136]	; (280 <loop+0x214>)
     1f6:	4923      	ldr	r1, [pc, #140]	; (284 <loop+0x218>)
     1f8:	6822      	ldr	r2, [r4, #0]
     1fa:	4818      	ldr	r0, [pc, #96]	; (25c <loop+0x1f0>)
     1fc:	f007 fd0e 	bl	7c1c <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     200:	2260      	movs	r2, #96	; 0x60
     202:	2100      	movs	r1, #0
     204:	4820      	ldr	r0, [pc, #128]	; (288 <loop+0x21c>)
     206:	f00c fb1d 	bl	c844 <memset>
        max_stat=0;
     20a:	2300      	movs	r3, #0
     20c:	6023      	str	r3, [r4, #0]
     20e:	e76a      	b.n	e6 <loop+0x7a>
    if(ch==':') menu1(); // returns only when menu1 gets not handled character
     210:	283a      	cmp	r0, #58	; 0x3a
     212:	d103      	bne.n	21c <loop+0x1b0>
     214:	4c0a      	ldr	r4, [pc, #40]	; (240 <loop+0x1d4>)
     216:	f001 fbaf 	bl	1978 <menu1()>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
     21a:	e739      	b.n	90 <loop+0x24>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
     21c:	283f      	cmp	r0, #63	; 0x3f
     21e:	d103      	bne.n	228 <loop+0x1bc>
     220:	4c07      	ldr	r4, [pc, #28]	; (240 <loop+0x1d4>)
     222:	f001 fbb3 	bl	198c <menu2()>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
     226:	e733      	b.n	90 <loop+0x24>
     228:	2821      	cmp	r0, #33	; 0x21
     22a:	4c05      	ldr	r4, [pc, #20]	; (240 <loop+0x1d4>)
     22c:	f47f af30 	bne.w	90 <loop+0x24>
     230:	f001 fc56 	bl	1ae0 <menu3()>
     234:	e72c      	b.n	90 <loop+0x24>
     236:	bf00      	nop
     238:	20020188 	.word	0x20020188
     23c:	200225e2 	.word	0x200225e2
     240:	200225e4 	.word	0x200225e4
     244:	20022564 	.word	0x20022564
     248:	200225e6 	.word	0x200225e6
     24c:	20021fb8 	.word	0x20021fb8
     250:	20021fbc 	.word	0x20021fbc
     254:	200216d0 	.word	0x200216d0
     258:	20007cfc 	.word	0x20007cfc
     25c:	200088c4 	.word	0x200088c4
     260:	20007d20 	.word	0x20007d20
     264:	200086b8 	.word	0x200086b8
     268:	20007d24 	.word	0x20007d24
     26c:	20007d28 	.word	0x20007d28
     270:	200206c8 	.word	0x200206c8
     274:	20007d2c 	.word	0x20007d2c
     278:	20021fbc 	.word	0x20021fbc
     27c:	20007d30 	.word	0x20007d30
     280:	20021f74 	.word	0x20021f74
     284:	20007d40 	.word	0x20007d40
     288:	20021fc0 	.word	0x20021fc0
     28c:	20020184 	.word	0x20020184
     290:	20007d38 	.word	0x20007d38

00000294 <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     294:	b510      	push	{r4, lr}
     296:	4c0b      	ldr	r4, [pc, #44]	; (2c4 <setup1()+0x30>)
     298:	6823      	ldr	r3, [r4, #0]
     29a:	b92b      	cbnz	r3, 2a8 <setup1()+0x14>
     29c:	2001      	movs	r0, #1
     29e:	f007 ff51 	bl	8144 <delay>
     2a2:	6823      	ldr	r3, [r4, #0]
     2a4:	2b00      	cmp	r3, #0
     2a6:	d0f9      	beq.n	29c <setup1()+0x8>
  i2s_setup();
     2a8:	f000 fa90 	bl	7cc <i2s_setup()>
  dma_setup();
     2ac:	f000 fad4 	bl	858 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2b0:	210b      	movs	r1, #11
     2b2:	4805      	ldr	r0, [pc, #20]	; (2c8 <setup1()+0x34>)
     2b4:	f009 fff2 	bl	a29c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     2b8:	4804      	ldr	r0, [pc, #16]	; (2cc <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2be:	f007 bc91 	b.w	7be4 <Print::println()>
     2c2:	bf00      	nop
     2c4:	20022020 	.word	0x20022020
     2c8:	200005c4 	.word	0x200005c4
     2cc:	200088c4 	.word	0x200088c4

000002d0 <_GLOBAL__sub_I_trigger>:

void loop1(){}  // nothing to be done here
     2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     2d2:	4e38      	ldr	r6, [pc, #224]	; (3b4 <_GLOBAL__sub_I_trigger+0xe4>)
		num_inputs(ninput), inputQueue(iqueue) {
     2d4:	2200      	movs	r2, #0
     2d6:	4c38      	ldr	r4, [pc, #224]	; (3b8 <_GLOBAL__sub_I_trigger+0xe8>)
     2d8:	b083      	sub	sp, #12
     2da:	4f38      	ldr	r7, [pc, #224]	; (3bc <_GLOBAL__sub_I_trigger+0xec>)
			if (first_update == NULL) {
     2dc:	6833      	ldr	r3, [r6, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     2de:	6027      	str	r7, [r4, #0]
     2e0:	6122      	str	r2, [r4, #16]
			active = false;
     2e2:	8122      	strh	r2, [r4, #8]
			destination_list = NULL;
     2e4:	60e2      	str	r2, [r4, #12]
			if (first_update == NULL) {
     2e6:	2b00      	cmp	r3, #0
     2e8:	d05e      	beq.n	3a8 <_GLOBAL__sub_I_trigger+0xd8>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     2ea:	461a      	mov	r2, r3
     2ec:	695b      	ldr	r3, [r3, #20]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d1fb      	bne.n	2ea <_GLOBAL__sub_I_trigger+0x1a>
				p->next_update = this;
     2f2:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     2f4:	2500      	movs	r5, #0
          AudioTrigger() : AudioStream(0, NULL) {init(); prio = 8;}
     2f6:	4b32      	ldr	r3, [pc, #200]	; (3c0 <_GLOBAL__sub_I_trigger+0xf0>)
     2f8:	482f      	ldr	r0, [pc, #188]	; (3b8 <_GLOBAL__sub_I_trigger+0xe8>)
     2fa:	6023      	str	r3, [r4, #0]
     2fc:	6165      	str	r5, [r4, #20]
			cpu_cycles = 0;
     2fe:	6065      	str	r5, [r4, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
     300:	72a5      	strb	r5, [r4, #10]
     302:	f000 fba9 	bl	a58 <AudioTrigger::init()>
     306:	2308      	movs	r3, #8
		num_inputs(ninput), inputQueue(iqueue) {
     308:	4a2e      	ldr	r2, [pc, #184]	; (3c4 <_GLOBAL__sub_I_trigger+0xf4>)
     30a:	61a3      	str	r3, [r4, #24]
			if (first_update == NULL) {
     30c:	6834      	ldr	r4, [r6, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     30e:	6017      	str	r7, [r2, #0]
     310:	6115      	str	r5, [r2, #16]
			active = false;
     312:	8115      	strh	r5, [r2, #8]
			destination_list = NULL;
     314:	60d5      	str	r5, [r2, #12]
			if (first_update == NULL) {
     316:	2c00      	cmp	r4, #0
     318:	d048      	beq.n	3ac <_GLOBAL__sub_I_trigger+0xdc>
     31a:	4623      	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
     31c:	4619      	mov	r1, r3
     31e:	695b      	ldr	r3, [r3, #20]
     320:	2b00      	cmp	r3, #0
     322:	d1fb      	bne.n	31c <_GLOBAL__sub_I_trigger+0x4c>
				p->next_update = this;
     324:	614a      	str	r2, [r1, #20]
      int16_t __not_in_flash_func(getAudio)(int32_t *data);

      class AudioIF : public AudioStream
      {
      public:
        AudioIF(int fsamp) : AudioStream(0, NULL) { this->fsamp=fsamp;}
     326:	4828      	ldr	r0, [pc, #160]	; (3c8 <_GLOBAL__sub_I_trigger+0xf8>)
			next_update = NULL;
     328:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
     32a:	4b28      	ldr	r3, [pc, #160]	; (3cc <_GLOBAL__sub_I_trigger+0xfc>)
     32c:	6010      	str	r0, [r2, #0]
     32e:	f64a 4044 	movw	r0, #44100	; 0xac44
			next_update = NULL;
     332:	6151      	str	r1, [r2, #20]
     334:	6190      	str	r0, [r2, #24]
		num_inputs(ninput), inputQueue(iqueue) {
     336:	2002      	movs	r0, #2
			cpu_cycles = 0;
     338:	6051      	str	r1, [r2, #4]
			numConnections = 0;
     33a:	7291      	strb	r1, [r2, #10]
		num_inputs(ninput), inputQueue(iqueue) {
     33c:	f103 0218 	add.w	r2, r3, #24
			active = false;
     340:	7219      	strb	r1, [r3, #8]
			destination_list = NULL;
     342:	60d9      	str	r1, [r3, #12]
				inputQueue[i] = NULL;
     344:	6199      	str	r1, [r3, #24]
     346:	61d9      	str	r1, [r3, #28]
		num_inputs(ninput), inputQueue(iqueue) {
     348:	7258      	strb	r0, [r3, #9]
     34a:	611a      	str	r2, [r3, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
     34c:	4622      	mov	r2, r4
     34e:	6964      	ldr	r4, [r4, #20]
     350:	2c00      	cmp	r4, #0
     352:	d1fb      	bne.n	34c <_GLOBAL__sub_I_trigger+0x7c>
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
     354:	491e      	ldr	r1, [pc, #120]	; (3d0 <_GLOBAL__sub_I_trigger+0x100>)
				p->next_update = this;
     356:	6153      	str	r3, [r2, #20]
			cpu_cycles = 0;
     358:	605c      	str	r4, [r3, #4]
			next_update = NULL;
     35a:	615c      	str	r4, [r3, #20]
			numConnections = 0;
     35c:	729c      	strb	r4, [r3, #10]
     35e:	6019      	str	r1, [r3, #0]
     360:	481a      	ldr	r0, [pc, #104]	; (3cc <_GLOBAL__sub_I_trigger+0xfc>)
     362:	f009 f9a7 	bl	96b4 <AudioOutputUSB::begin()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     366:	481b      	ldr	r0, [pc, #108]	; (3d4 <_GLOBAL__sub_I_trigger+0x104>)
     368:	f007 f938 	bl	75dc <AudioConnection::AudioConnection()>
     36c:	4b17      	ldr	r3, [pc, #92]	; (3cc <_GLOBAL__sub_I_trigger+0xfc>)
     36e:	4622      	mov	r2, r4
     370:	4914      	ldr	r1, [pc, #80]	; (3c4 <_GLOBAL__sub_I_trigger+0xf4>)
     372:	9400      	str	r4, [sp, #0]
     374:	4817      	ldr	r0, [pc, #92]	; (3d4 <_GLOBAL__sub_I_trigger+0x104>)
     376:	f007 f9a5 	bl	76c4 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
  AudioConnection patchCord1(acqIF, 0, usb, 0);
     37a:	4a17      	ldr	r2, [pc, #92]	; (3d8 <_GLOBAL__sub_I_trigger+0x108>)
     37c:	4917      	ldr	r1, [pc, #92]	; (3dc <_GLOBAL__sub_I_trigger+0x10c>)
     37e:	4815      	ldr	r0, [pc, #84]	; (3d4 <_GLOBAL__sub_I_trigger+0x104>)
     380:	f00a f9a4 	bl	a6cc <__aeabi_atexit>
     384:	4816      	ldr	r0, [pc, #88]	; (3e0 <_GLOBAL__sub_I_trigger+0x110>)
     386:	f007 f929 	bl	75dc <AudioConnection::AudioConnection()>
     38a:	2201      	movs	r2, #1
     38c:	490d      	ldr	r1, [pc, #52]	; (3c4 <_GLOBAL__sub_I_trigger+0xf4>)
     38e:	9200      	str	r2, [sp, #0]
     390:	4b0e      	ldr	r3, [pc, #56]	; (3cc <_GLOBAL__sub_I_trigger+0xfc>)
     392:	4813      	ldr	r0, [pc, #76]	; (3e0 <_GLOBAL__sub_I_trigger+0x110>)
     394:	f007 f996 	bl	76c4 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
  AudioConnection patchCord2(acqIF, 1, usb, 1);
     398:	4a0f      	ldr	r2, [pc, #60]	; (3d8 <_GLOBAL__sub_I_trigger+0x108>)
     39a:	4910      	ldr	r1, [pc, #64]	; (3dc <_GLOBAL__sub_I_trigger+0x10c>)
     39c:	4810      	ldr	r0, [pc, #64]	; (3e0 <_GLOBAL__sub_I_trigger+0x110>)
void loop1(){}  // nothing to be done here
     39e:	b003      	add	sp, #12
     3a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AudioConnection patchCord2(acqIF, 1, usb, 1);
     3a4:	f00a b992 	b.w	a6cc <__aeabi_atexit>
				first_update = this;
     3a8:	6034      	str	r4, [r6, #0]
     3aa:	e7a3      	b.n	2f4 <_GLOBAL__sub_I_trigger+0x24>
     3ac:	4614      	mov	r4, r2
     3ae:	6032      	str	r2, [r6, #0]
     3b0:	e7b9      	b.n	326 <_GLOBAL__sub_I_trigger+0x56>
     3b2:	bf00      	nop
     3b4:	200200ac 	.word	0x200200ac
     3b8:	20022578 	.word	0x20022578
     3bc:	200009a8 	.word	0x200009a8
     3c0:	200009b4 	.word	0x200009b4
     3c4:	200206ac 	.word	0x200206ac
     3c8:	20000a94 	.word	0x20000a94
     3cc:	20022594 	.word	0x20022594
     3d0:	200009c0 	.word	0x200009c0
     3d4:	20021f90 	.word	0x20021f90
     3d8:	200088f0 	.word	0x200088f0
     3dc:	00007779 	.word	0x00007779
     3e0:	20021fa4 	.word	0x20021fa4

000003e4 <setup>:
{
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     3e8:	4d67      	ldr	r5, [pc, #412]	; (588 <setup+0x1a4>)
     3ea:	b087      	sub	sp, #28
     3ec:	4c67      	ldr	r4, [pc, #412]	; (58c <setup+0x1a8>)
				if (elapsed > 750) break;
     3ee:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3f2:	4f67      	ldr	r7, [pc, #412]	; (590 <setup+0x1ac>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     3f4:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 5c4 <setup+0x1e0>
		uint32_t millis_begin = systick_millis_count;
     3f8:	682e      	ldr	r6, [r5, #0]
		yield();
     3fa:	f009 ffcd 	bl	a398 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3fe:	7823      	ldrb	r3, [r4, #0]
     400:	2b00      	cmp	r3, #0
     402:	f000 809c 	beq.w	53e <setup+0x15a>
     406:	783b      	ldrb	r3, [r7, #0]
     408:	07da      	lsls	r2, r3, #31
     40a:	f140 8098 	bpl.w	53e <setup+0x15a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     40e:	682b      	ldr	r3, [r5, #0]
     410:	f8d9 2000 	ldr.w	r2, [r9]
     414:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     416:	2b0e      	cmp	r3, #14
     418:	f240 8091 	bls.w	53e <setup+0x15a>
     41c:	682b      	ldr	r3, [r5, #0]
  while(millis()<60000) if(Serial) break;
     41e:	f64e 265f 	movw	r6, #59999	; 0xea5f
     422:	42b3      	cmp	r3, r6
     424:	d813      	bhi.n	44e <setup+0x6a>
     426:	4f5a      	ldr	r7, [pc, #360]	; (590 <setup+0x1ac>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     428:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5c4 <setup+0x1e0>
		yield();
     42c:	f009 ffb4 	bl	a398 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     430:	7823      	ldrb	r3, [r4, #0]
     432:	2b00      	cmp	r3, #0
     434:	f000 808e 	beq.w	554 <setup+0x170>
     438:	783b      	ldrb	r3, [r7, #0]
     43a:	07db      	lsls	r3, r3, #31
     43c:	f140 808a 	bpl.w	554 <setup+0x170>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     440:	682b      	ldr	r3, [r5, #0]
     442:	f8d8 2000 	ldr.w	r2, [r8]
     446:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     448:	2b0e      	cmp	r3, #14
     44a:	f240 8083 	bls.w	554 <setup+0x170>
    if(CrashReport) Serial.print(CrashReport);
     44e:	4851      	ldr	r0, [pc, #324]	; (594 <setup+0x1b0>)
     450:	f014 ff1a 	bl	15288 <___ZN16CrashReportClasscvbEv_veneer>
     454:	2800      	cmp	r0, #0
     456:	f040 8087 	bne.w	568 <setup+0x184>
      AudioMemory(8);
     45a:	2108      	movs	r1, #8
     45c:	484e      	ldr	r0, [pc, #312]	; (598 <setup+0x1b4>)
     45e:	f014 ff0f 	bl	15280 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  rtc_setup();
     462:	2113      	movs	r1, #19
     464:	2012      	movs	r0, #18
     466:	f001 f9ed 	bl	1844 <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     46a:	2110      	movs	r1, #16
     46c:	484b      	ldr	r0, [pc, #300]	; (59c <setup+0x1b8>)
     46e:	f009 ff15 	bl	a29c <usb_serial_write>
     472:	484b      	ldr	r0, [pc, #300]	; (5a0 <setup+0x1bc>)
     474:	f007 fbb6 	bl	7be4 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     478:	a804      	add	r0, sp, #16
     47a:	f001 f9e5 	bl	1848 <rtc_get_datetime(datetime_t*)>
     47e:	2800      	cmp	r0, #0
     480:	d07a      	beq.n	578 <setup+0x194>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     482:	f99d 2017 	ldrsb.w	r2, [sp, #23]
     486:	f99d 3016 	ldrsb.w	r3, [sp, #22]
     48a:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     48e:	f99d 1013 	ldrsb.w	r1, [sp, #19]
     492:	e9cd 3202 	strd	r3, r2, [sp, #8]
     496:	e9cd 1000 	strd	r1, r0, [sp]
     49a:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     49e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     4a2:	4940      	ldr	r1, [pc, #256]	; (5a4 <setup+0x1c0>)
     4a4:	483e      	ldr	r0, [pc, #248]	; (5a0 <setup+0x1bc>)
     4a6:	f007 fbb9 	bl	7c1c <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     4aa:	483d      	ldr	r0, [pc, #244]	; (5a0 <setup+0x1bc>)
     4ac:	f007 fb9a 	bl	7be4 <Print::println()>
     4b0:	2112      	movs	r1, #18
     4b2:	483d      	ldr	r0, [pc, #244]	; (5a8 <setup+0x1c4>)
     4b4:	f009 fef2 	bl	a29c <usb_serial_write>
     4b8:	4839      	ldr	r0, [pc, #228]	; (5a0 <setup+0x1bc>)
     4ba:	f007 fb93 	bl	7be4 <Print::println()>
  time2date(rtc_get(), &t);
     4be:	f007 fff9 	bl	84b4 <rtc_get>
     4c2:	a904      	add	r1, sp, #16
     4c4:	f001 f888 	bl	15d8 <time2date(unsigned long, datetime_t*)>
  Serial.printf("Now-sec: %4d-%02d-%02d %02d:%02d:%02d",
     4c8:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     4cc:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     4d0:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     4d4:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     4d8:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     4dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
     4e0:	e9cd 0400 	strd	r0, r4, [sp]
     4e4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     4e8:	4930      	ldr	r1, [pc, #192]	; (5ac <setup+0x1c8>)
     4ea:	482d      	ldr	r0, [pc, #180]	; (5a0 <setup+0x1bc>)
     4ec:	f007 fb96 	bl	7c1c <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     4f0:	482b      	ldr	r0, [pc, #172]	; (5a0 <setup+0x1bc>)
     4f2:	f007 fb77 	bl	7be4 <Print::println()>
     4f6:	211d      	movs	r1, #29
     4f8:	482d      	ldr	r0, [pc, #180]	; (5b0 <setup+0x1cc>)
     4fa:	f009 fecf 	bl	a29c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     4fe:	f99d 1014 	ldrsb.w	r1, [sp, #20]
     502:	4827      	ldr	r0, [pc, #156]	; (5a0 <setup+0x1bc>)
     504:	f007 fb62 	bl	7bcc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     508:	4825      	ldr	r0, [pc, #148]	; (5a0 <setup+0x1bc>)
     50a:	f007 fb6b 	bl	7be4 <Print::println()>
     50e:	210b      	movs	r1, #11
     510:	4828      	ldr	r0, [pc, #160]	; (5b4 <setup+0x1d0>)
     512:	f009 fec3 	bl	a29c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     516:	4822      	ldr	r0, [pc, #136]	; (5a0 <setup+0x1bc>)
     518:	f007 fb64 	bl	7be4 <Print::println()>
  filing_init();
     51c:	f000 fd02 	bl	f24 <filing_init()>
     520:	210a      	movs	r1, #10
     522:	4825      	ldr	r0, [pc, #148]	; (5b8 <setup+0x1d4>)
     524:	f009 feba 	bl	a29c <usb_serial_write>
     528:	481d      	ldr	r0, [pc, #116]	; (5a0 <setup+0x1bc>)
     52a:	f007 fb5b 	bl	7be4 <Print::println()>
  ready=1;
     52e:	4b23      	ldr	r3, [pc, #140]	; (5bc <setup+0x1d8>)
     530:	2201      	movs	r2, #1
     532:	601a      	str	r2, [r3, #0]
    setup1();
     534:	f7ff feae 	bl	294 <setup1()>
}
     538:	b007      	add	sp, #28
     53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     53e:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     540:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     542:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     544:	b1aa      	cbz	r2, 572 <setup+0x18e>
				if (elapsed > 2000) break;
     546:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     54a:	f63f af67 	bhi.w	41c <setup+0x38>
			yield();
     54e:	f009 ff23 	bl	a398 <yield>
     552:	e752      	b.n	3fa <setup+0x16>
     554:	682b      	ldr	r3, [r5, #0]
  while(millis()<60000) if(Serial) break;
     556:	42b3      	cmp	r3, r6
     558:	f67f af68 	bls.w	42c <setup+0x48>
    if(CrashReport) Serial.print(CrashReport);
     55c:	480d      	ldr	r0, [pc, #52]	; (594 <setup+0x1b0>)
     55e:	f014 fe93 	bl	15288 <___ZN16CrashReportClasscvbEv_veneer>
     562:	2800      	cmp	r0, #0
     564:	f43f af79 	beq.w	45a <setup+0x76>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     568:	490d      	ldr	r1, [pc, #52]	; (5a0 <setup+0x1bc>)
     56a:	480a      	ldr	r0, [pc, #40]	; (594 <setup+0x1b0>)
     56c:	f014 fe90 	bl	15290 <___ZNK16CrashReportClass7printToER5Print_veneer>
     570:	e773      	b.n	45a <setup+0x76>
				if (elapsed > 750) break;
     572:	4543      	cmp	r3, r8
     574:	d9eb      	bls.n	54e <setup+0x16a>
     576:	e751      	b.n	41c <setup+0x38>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     578:	2114      	movs	r1, #20
     57a:	4811      	ldr	r0, [pc, #68]	; (5c0 <setup+0x1dc>)
     57c:	f009 fe8e 	bl	a29c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     580:	4807      	ldr	r0, [pc, #28]	; (5a0 <setup+0x1bc>)
     582:	f007 fb2f 	bl	7be4 <Print::println()>
     586:	e77c      	b.n	482 <setup+0x9e>
     588:	20022564 	.word	0x20022564
     58c:	20022614 	.word	0x20022614
     590:	20022613 	.word	0x20022613
     594:	200088b8 	.word	0x200088b8
     598:	20200000 	.word	0x20200000
     59c:	20007d50 	.word	0x20007d50
     5a0:	200088c4 	.word	0x200088c4
     5a4:	20007d7c 	.word	0x20007d7c
     5a8:	20007da4 	.word	0x20007da4
     5ac:	20007db8 	.word	0x20007db8
     5b0:	20007de0 	.word	0x20007de0
     5b4:	20007e00 	.word	0x20007e00
     5b8:	20007e0c 	.word	0x20007e0c
     5bc:	20022020 	.word	0x20022020
     5c0:	20007d64 	.word	0x20007d64
     5c4:	200225c8 	.word	0x200225c8

000005c8 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     5c8:	4a2d      	ldr	r2, [pc, #180]	; (680 <acq_isr()+0xb8>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     5ca:	4b2e      	ldr	r3, [pc, #184]	; (684 <acq_isr()+0xbc>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     5cc:	6811      	ldr	r1, [r2, #0]
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
    }

    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     5ce:	482e      	ldr	r0, [pc, #184]	; (688 <acq_isr()+0xc0>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     5d0:	6909      	ldr	r1, [r1, #16]
  {
     5d2:	b510      	push	{r4, lr}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     5d4:	4c2d      	ldr	r4, [pc, #180]	; (68c <acq_isr()+0xc4>)
     5d6:	7912      	ldrb	r2, [r2, #4]
     5d8:	77e2      	strb	r2, [r4, #31]
      src = (int32_t *)&i2s_buffer[0];
     5da:	f5a3 6480 	sub.w	r4, r3, #1024	; 0x400
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     5de:	f9b0 0000 	ldrsh.w	r0, [r0]
     5e2:	2200      	movs	r2, #0
      src = (int32_t *)&i2s_buffer[0];
     5e4:	4299      	cmp	r1, r3
     5e6:	bf38      	it	cc
     5e8:	461c      	movcc	r4, r3
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     5ea:	4929      	ldr	r1, [pc, #164]	; (690 <acq_isr()+0xc8>)
     5ec:	f854 3032 	ldr.w	r3, [r4, r2, lsl #3]
     5f0:	440b      	add	r3, r1
     5f2:	4103      	asrs	r3, r0
     5f4:	f844 3032 	str.w	r3, [r4, r2, lsl #3]
     5f8:	3201      	adds	r2, #1
     5fa:	2a80      	cmp	r2, #128	; 0x80
     5fc:	d1f6      	bne.n	5ec <acq_isr()+0x24>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void process(int32_t * buffer)
{ procCount++;
     5fe:	4825      	ldr	r0, [pc, #148]	; (694 <acq_isr()+0xcc>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     600:	2300      	movs	r3, #0
     602:	4a25      	ldr	r2, [pc, #148]	; (698 <acq_isr()+0xd0>)
{ procCount++;
     604:	6801      	ldr	r1, [r0, #0]
     606:	3101      	adds	r1, #1
     608:	6001      	str	r1, [r0, #0]
     60a:	4611      	mov	r1, r2
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     60c:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
     610:	3301      	adds	r3, #1
     612:	2b80      	cmp	r3, #128	; 0x80
     614:	f841 0f04 	str.w	r0, [r1, #4]!
     618:	d1f8      	bne.n	60c <acq_isr()+0x44>
     61a:	4b20      	ldr	r3, [pc, #128]	; (69c <acq_isr()+0xd4>)
  
  float tmp=0.0f;
     61c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 6a0 <acq_isr()+0xd8>
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii]/(float)NBUF_ACQ;
     620:	eddf 6a20 	vldr	s13, [pc, #128]	; 6a4 <acq_isr()+0xdc>
     624:	edd2 7a01 	vldr	s15, [r2, #4]
     628:	3204      	adds	r2, #4
     62a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     62e:	4293      	cmp	r3, r2
     630:	eea7 7aa6 	vfma.f32	s14, s15, s13
     634:	d1f6      	bne.n	624 <acq_isr()+0x5c>
  acqbias=(int32_t) tmp;

  if(proc==0)
     636:	4b1c      	ldr	r3, [pc, #112]	; (6a8 <acq_isr()+0xe0>)
  acqbias=(int32_t) tmp;
     638:	eebd 7ac7 	vcvt.s32.f32	s14, s14
     63c:	4a1b      	ldr	r2, [pc, #108]	; (6ac <acq_isr()+0xe4>)
  if(proc==0)
     63e:	f9b3 3000 	ldrsh.w	r3, [r3]
  acqbias=(int32_t) tmp;
     642:	ed82 7a00 	vstr	s14, [r2]
  if(proc==0)
     646:	b133      	cbz	r3, 656 <acq_isr()+0x8e>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     648:	2b01      	cmp	r3, #1
     64a:	d012      	beq.n	672 <acq_isr()+0xaa>
      putAudio(src);
     64c:	4620      	mov	r0, r4
  }
     64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      putAudio(src);
     652:	f000 b9c1 	b.w	9d8 <putAudio(long*)>
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     656:	4816      	ldr	r0, [pc, #88]	; (6b0 <acq_isr()+0xe8>)
     658:	f000 ff4e 	bl	14f8 <pushData(unsigned long*)>
     65c:	2800      	cmp	r0, #0
     65e:	d1f5      	bne.n	64c <acq_isr()+0x84>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     660:	4a14      	ldr	r2, [pc, #80]	; (6b4 <acq_isr()+0xec>)
      putAudio(src);
     662:	4620      	mov	r0, r4
   if(!compress((void *)acqBuffer)) procMiss++;
     664:	6813      	ldr	r3, [r2, #0]
     666:	3301      	adds	r3, #1
  }
     668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   if(!compress((void *)acqBuffer)) procMiss++;
     66c:	6013      	str	r3, [r2, #0]
      putAudio(src);
     66e:	f000 b9b3 	b.w	9d8 <putAudio(long*)>
   if(!compress((void *)acqBuffer)) procMiss++;
     672:	480f      	ldr	r0, [pc, #60]	; (6b0 <acq_isr()+0xe8>)
     674:	f000 fa32 	bl	adc <compress(void*)>
     678:	2800      	cmp	r0, #0
     67a:	d1e7      	bne.n	64c <acq_isr()+0x84>
     67c:	e7f0      	b.n	660 <acq_isr()+0x98>
     67e:	bf00      	nop
     680:	2001f9c4 	.word	0x2001f9c4
     684:	20021b54 	.word	0x20021b54
     688:	20008ec4 	.word	0x20008ec4
     68c:	400e8000 	.word	0x400e8000
     690:	06978000 	.word	0x06978000
     694:	20021fb8 	.word	0x20021fb8
     698:	200204a8 	.word	0x200204a8
     69c:	200206a8 	.word	0x200206a8
     6a0:	00000000 	.word	0x00000000
     6a4:	3c000000 	.word	0x3c000000
     6a8:	20008ec2 	.word	0x20008ec2
     6ac:	200206c8 	.word	0x200206c8
     6b0:	200204ac 	.word	0x200204ac
     6b4:	20021fbc 	.word	0x20021fbc

000006b8 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     6b8:	b510      	push	{r4, lr}
     6ba:	4604      	mov	r4, r0
		release();
     6bc:	f007 f8f2 	bl	78a4 <DMAChannel::release()>
	}
     6c0:	4620      	mov	r0, r4
     6c2:	bd10      	pop	{r4, pc}
     6c4:	0000      	movs	r0, r0
	...

000006c8 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6c8:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     6cc:	4938      	ldr	r1, [pc, #224]	; (7b0 <setAudioFrequency(int)+0xe8>)
     6ce:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6d0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     6d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     6d8:	4b36      	ldr	r3, [pc, #216]	; (7b4 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6da:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 798 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     6de:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6e2:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     6e6:	1c4a      	adds	r2, r1, #1
     6e8:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6ec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     6f0:	ee27 7b03 	vmul.f64	d7, d7, d3
     6f4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 7a0 <setAudioFrequency(int)+0xd8>
  {
     6f8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6fa:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     6fe:	f242 7410 	movw	r4, #10000	; 0x2710
     702:	ed9f 5b29 	vldr	d5, [pc, #164]	; 7a8 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     706:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     70a:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     70e:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     712:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     716:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     71a:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     71e:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     722:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     726:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     728:	ee96 7b05 	vfnms.f64	d7, d6, d5
     72c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     730:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     734:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     73c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     746:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     74a:	2a00      	cmp	r2, #0
     74c:	dafc      	bge.n	748 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     74e:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     752:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     756:	4a18      	ldr	r2, [pc, #96]	; (7b8 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     758:	4818      	ldr	r0, [pc, #96]	; (7bc <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     75a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     75c:	4c18      	ldr	r4, [pc, #96]	; (7c0 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     75e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     764:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     768:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     76a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     76c:	4b15      	ldr	r3, [pc, #84]	; (7c4 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     76e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     776:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     778:	6a82      	ldr	r2, [r0, #40]	; 0x28
     77a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     77c:	4a12      	ldr	r2, [pc, #72]	; (7c8 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     77e:	430b      	orrs	r3, r1
     780:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     784:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     786:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     788:	401a      	ands	r2, r3
     78a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     78e:	6062      	str	r2, [r4, #4]
  }
     790:	f85d 4b04 	ldr.w	r4, [sp], #4
     794:	4770      	bx	lr
     796:	bf00      	nop
     798:	00000000 	.word	0x00000000
     79c:	40700000 	.word	0x40700000
     7a0:	00000000 	.word	0x00000000
     7a4:	4176e360 	.word	0x4176e360
     7a8:	00000000 	.word	0x00000000
     7ac:	40c38800 	.word	0x40c38800
     7b0:	269fb200 	.word	0x269fb200
     7b4:	400d8000 	.word	0x400d8000
     7b8:	ff7f7fff 	.word	0xff7f7fff
     7bc:	400fc000 	.word	0x400fc000
     7c0:	400ac000 	.word	0x400ac000
     7c4:	fffffe00 	.word	0xfffffe00
     7c8:	fff7fff8 	.word	0xfff7fff8

000007cc <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     7cc:	4a19      	ldr	r2, [pc, #100]	; (834 <i2s_setup()+0x68>)
     7ce:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     7d0:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     7d2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     7d6:	4c18      	ldr	r4, [pc, #96]	; (838 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     7d8:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     7da:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     7de:	2b00      	cmp	r3, #0
     7e0:	db27      	blt.n	832 <i2s_setup()+0x66>
    int fs = fsamp;
     7e2:	4b16      	ldr	r3, [pc, #88]	; (83c <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     7e4:	6818      	ldr	r0, [r3, #0]
     7e6:	f7ff ff6f 	bl	6c8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     7ea:	4b15      	ldr	r3, [pc, #84]	; (840 <i2s_setup()+0x74>)
     7ec:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     7ee:	4915      	ldr	r1, [pc, #84]	; (844 <i2s_setup()+0x78>)
     7f0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     7f2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     7f6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     7fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     7fe:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     802:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     804:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     80c:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     80e:	480e      	ldr	r0, [pc, #56]	; (848 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     810:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     814:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     818:	490c      	ldr	r1, [pc, #48]	; (84c <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     81a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     81e:	4a0c      	ldr	r2, [pc, #48]	; (850 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     820:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     824:	4b0b      	ldr	r3, [pc, #44]	; (854 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     826:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     82a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     82e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     832:	bd10      	pop	{r4, pc}
     834:	400fc000 	.word	0x400fc000
     838:	40384000 	.word	0x40384000
     83c:	20008e94 	.word	0x20008e94
     840:	401f8000 	.word	0x401f8000
     844:	401f8400 	.word	0x401f8400
     848:	07000001 	.word	0x07000001
     84c:	00011f1b 	.word	0x00011f1b
     850:	1f1f1f00 	.word	0x1f1f1f00
     854:	92000001 	.word	0x92000001

00000858 <dma_setup()>:
  {
     858:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     85a:	4c1c      	ldr	r4, [pc, #112]	; (8cc <dma_setup()+0x74>)
     85c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     85e:	4d1c      	ldr	r5, [pc, #112]	; (8d0 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     860:	4620      	mov	r0, r4
     862:	f006 ffc5 	bl	77f0 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     866:	6823      	ldr	r3, [r4, #0]
     868:	481a      	ldr	r0, [pc, #104]	; (8d4 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     86a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     86e:	491a      	ldr	r1, [pc, #104]	; (8d8 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     870:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     872:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     874:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     876:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     878:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     87a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     87c:	4d17      	ldr	r5, [pc, #92]	; (8dc <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     87e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     880:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     882:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     884:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     886:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     888:	2204      	movs	r2, #4
     88a:	4915      	ldr	r1, [pc, #84]	; (8e0 <dma_setup()+0x88>)
     88c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     88e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     890:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     892:	4d14      	ldr	r5, [pc, #80]	; (8e4 <dma_setup()+0x8c>)
     894:	60da      	str	r2, [r3, #12]
		*mux = 0;
     896:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     89a:	4b13      	ldr	r3, [pc, #76]	; (8e8 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     89c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     8a0:	2101      	movs	r1, #1
     8a2:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     8a4:	4811      	ldr	r0, [pc, #68]	; (8ec <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     8a6:	f002 051f 	and.w	r5, r2, #31
     8aa:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     8ae:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     8b2:	40a9      	lsls	r1, r5
     8b4:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     8b6:	4d0e      	ldr	r5, [pc, #56]	; (8f0 <dma_setup()+0x98>)
     8b8:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     8bc:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     8be:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     8c0:	490c      	ldr	r1, [pc, #48]	; (8f4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     8c2:	4b0d      	ldr	r3, [pc, #52]	; (8f8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     8c4:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     8c6:	7922      	ldrb	r2, [r4, #4]
     8c8:	76da      	strb	r2, [r3, #27]
  }
     8ca:	bd38      	pop	{r3, r4, r5, pc}
     8cc:	2001f9c4 	.word	0x2001f9c4
     8d0:	02020000 	.word	0x02020000
     8d4:	403840a0 	.word	0x403840a0
     8d8:	20021754 	.word	0x20021754
     8dc:	fffff800 	.word	0xfffff800
     8e0:	400ec000 	.word	0x400ec000
     8e4:	80000013 	.word	0x80000013
     8e8:	38003840 	.word	0x38003840
     8ec:	20009000 	.word	0x20009000
     8f0:	000005c9 	.word	0x000005c9
     8f4:	e000e400 	.word	0xe000e400
     8f8:	400e8000 	.word	0x400e8000

000008fc <_GLOBAL__sub_I_procCount>:
		begin();
     8fc:	4805      	ldr	r0, [pc, #20]	; (914 <_GLOBAL__sub_I_procCount+0x18>)
     8fe:	2100      	movs	r1, #0
  }
}
     900:	b508      	push	{r3, lr}
     902:	f006 ff75 	bl	77f0 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     906:	4a04      	ldr	r2, [pc, #16]	; (918 <_GLOBAL__sub_I_procCount+0x1c>)
     908:	4904      	ldr	r1, [pc, #16]	; (91c <_GLOBAL__sub_I_procCount+0x20>)
     90a:	4802      	ldr	r0, [pc, #8]	; (914 <_GLOBAL__sub_I_procCount+0x18>)
}
     90c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     910:	f009 bedc 	b.w	a6cc <__aeabi_atexit>
     914:	2001f9c4 	.word	0x2001f9c4
     918:	200088f0 	.word	0x200088f0
     91c:	000006b9 	.word	0x000006b9

00000920 <AudioIF::update()>:
    }
    //
    uint32_t usbCount=0;
    static int32_t src_buffer[NBUF_I2S];
    void AudioIF::update(void)
    {	
     920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if ( head==tail ) return 0;                 // queue is empty
     924:	4b26      	ldr	r3, [pc, #152]	; (9c0 <AudioIF::update()+0xa0>)
     926:	4d27      	ldr	r5, [pc, #156]	; (9c4 <AudioIF::update()+0xa4>)
     928:	681b      	ldr	r3, [r3, #0]
     92a:	682c      	ldr	r4, [r5, #0]
     92c:	429c      	cmp	r4, r3
     92e:	d040      	beq.n	9b2 <AudioIF::update()+0x92>
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
     930:	4925      	ldr	r1, [pc, #148]	; (9c8 <AudioIF::update()+0xa8>)
     932:	f44f 6280 	mov.w	r2, #1024	; 0x400
     936:	4606      	mov	r6, r0
     938:	4824      	ldr	r0, [pc, #144]	; (9cc <AudioIF::update()+0xac>)
     93a:	eb01 2184 	add.w	r1, r1, r4, lsl #10
      head = (head+1)%MAUDIO;
     93e:	3401      	adds	r4, #1
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
     940:	f007 fce8 	bl	8314 <memcpy>
      head = (head+1)%MAUDIO;
     944:	4a22      	ldr	r2, [pc, #136]	; (9d0 <AudioIF::update()+0xb0>)
     946:	17e3      	asrs	r3, r4, #31
     948:	fb82 1204 	smull	r1, r2, r2, r4
     94c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
     950:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     954:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
     958:	602c      	str	r4, [r5, #0]
      audio_block_t *left, *right;
      //
      if(!getAudio(src_buffer)) return;
      
      left  = allocate(); if (!left) return;
     95a:	f006 fd79 	bl	7450 <AudioStream::allocate()>
     95e:	4607      	mov	r7, r0
     960:	b338      	cbz	r0, 9b2 <AudioIF::update()+0x92>
      right = allocate(); if (!right) {release(left); return;}
     962:	f006 fd75 	bl	7450 <AudioStream::allocate()>
     966:	4680      	mov	r8, r0
     968:	b328      	cbz	r0, 9b6 <AudioIF::update()+0x96>
      usbCount++;
     96a:	4a1a      	ldr	r2, [pc, #104]	; (9d4 <AudioIF::update()+0xb4>)
     96c:	1cb9      	adds	r1, r7, #2
     96e:	6813      	ldr	r3, [r2, #0]
     970:	3301      	adds	r3, #1
     972:	6013      	str	r3, [r2, #0]
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     974:	1c82      	adds	r2, r0, #2
     976:	4b15      	ldr	r3, [pc, #84]	; (9cc <AudioIF::update()+0xac>)
     978:	f503 6c80 	add.w	ip, r3, #1024	; 0x400
        dst2[ii]=(int16_t)src[jj++];  
     97c:	e9d3 5400 	ldrd	r5, r4, [r3]
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     980:	3308      	adds	r3, #8
      { dst1[ii]=(int16_t)src[jj++];   
     982:	f821 5f02 	strh.w	r5, [r1, #2]!
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     986:	459c      	cmp	ip, r3
        dst2[ii]=(int16_t)src[jj++];  
     988:	f822 4f02 	strh.w	r4, [r2, #2]!
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     98c:	d1f6      	bne.n	97c <AudioIF::update()+0x5c>
      //
      extract(left->data, right->data, src_buffer );
      
      transmit(left,0);
     98e:	4639      	mov	r1, r7
     990:	4630      	mov	r0, r6
     992:	2200      	movs	r2, #0
     994:	f006 fdda 	bl	754c <AudioStream::transmit(audio_block_struct*, unsigned char)>
      transmit(right,1);
     998:	4641      	mov	r1, r8
     99a:	4630      	mov	r0, r6
     99c:	2201      	movs	r2, #1
     99e:	f006 fdd5 	bl	754c <AudioStream::transmit(audio_block_struct*, unsigned char)>
      release(left);
     9a2:	4638      	mov	r0, r7
     9a4:	f006 fdaa 	bl	74fc <AudioStream::release(audio_block_struct*)>
      release(right);
     9a8:	4640      	mov	r0, r8
    }
     9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      release(right);
     9ae:	f006 bda5 	b.w	74fc <AudioStream::release(audio_block_struct*)>
    }
     9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      right = allocate(); if (!right) {release(left); return;}
     9b6:	4638      	mov	r0, r7
    }
     9b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      right = allocate(); if (!right) {release(left); return;}
     9bc:	f006 bd9e 	b.w	74fc <AudioStream::release(audio_block_struct*)>
     9c0:	2001fbd0 	.word	0x2001fbd0
     9c4:	2001fbcc 	.word	0x2001fbcc
     9c8:	2001d1c4 	.word	0x2001d1c4
     9cc:	2000cdc0 	.word	0x2000cdc0
     9d0:	66666667 	.word	0x66666667
     9d4:	200225b4 	.word	0x200225b4

000009d8 <putAudio(long*)>:
    {
     9d8:	b470      	push	{r4, r5, r6}
      if ( (tail+1)%MAUDIO == head ) return 0;    // queue is full
     9da:	4d12      	ldr	r5, [pc, #72]	; (a24 <putAudio(long*)+0x4c>)
     9dc:	4b12      	ldr	r3, [pc, #72]	; (a28 <putAudio(long*)+0x50>)
     9de:	6829      	ldr	r1, [r5, #0]
     9e0:	681e      	ldr	r6, [r3, #0]
     9e2:	4a12      	ldr	r2, [pc, #72]	; (a2c <putAudio(long*)+0x54>)
     9e4:	1c4b      	adds	r3, r1, #1
     9e6:	fb82 4203 	smull	r4, r2, r2, r3
     9ea:	17dc      	asrs	r4, r3, #31
     9ec:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
     9f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     9f4:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
     9f8:	42b4      	cmp	r4, r6
     9fa:	d00f      	beq.n	a1c <putAudio(long*)+0x44>
     9fc:	4a0c      	ldr	r2, [pc, #48]	; (a30 <putAudio(long*)+0x58>)
     9fe:	1f03      	subs	r3, r0, #4
     a00:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
     a04:	eb02 2281 	add.w	r2, r2, r1, lsl #10
      for(int ii=0;ii<NBUF_I2S;ii++) audio_buffer[tail][ii]=data[ii];
     a08:	f853 1f04 	ldr.w	r1, [r3, #4]!
     a0c:	4283      	cmp	r3, r0
     a0e:	f842 1f04 	str.w	r1, [r2, #4]!
     a12:	d1f9      	bne.n	a08 <putAudio(long*)+0x30>
      return 1;   // signal success.
     a14:	2001      	movs	r0, #1
      tail = (tail+1)%MAUDIO;
     a16:	602c      	str	r4, [r5, #0]
    }
     a18:	bc70      	pop	{r4, r5, r6}
     a1a:	4770      	bx	lr
      if ( (tail+1)%MAUDIO == head ) return 0;    // queue is full
     a1c:	2000      	movs	r0, #0
    }
     a1e:	bc70      	pop	{r4, r5, r6}
     a20:	4770      	bx	lr
     a22:	bf00      	nop
     a24:	2001fbd0 	.word	0x2001fbd0
     a28:	2001fbcc 	.word	0x2001fbcc
     a2c:	66666667 	.word	0x66666667
     a30:	2001d1c0 	.word	0x2001d1c0

00000a34 <AudioTrigger::m_isr()>:
      t1.priority(prio*16);
    }

    void AudioTrigger::m_isr(void)
    {
      if (update_responsibility) AudioStream::update_all();
     a34:	4b04      	ldr	r3, [pc, #16]	; (a48 <AudioTrigger::m_isr()+0x14>)
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	b123      	cbz	r3, a44 <AudioTrigger::m_isr()+0x10>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     a3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     a3e:	2240      	movs	r2, #64	; 0x40
     a40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    }
     a44:	4770      	bx	lr
     a46:	bf00      	nop
     a48:	200225fc 	.word	0x200225fc

00000a4c <IntervalTimer::~IntervalTimer()>:
	~IntervalTimer() {
     a4c:	b510      	push	{r4, lr}
     a4e:	4604      	mov	r4, r0
		end();
     a50:	f007 f848 	bl	7ae4 <IntervalTimer::end()>
	}
     a54:	4620      	mov	r0, r4
     a56:	bd10      	pop	{r4, pc}

00000a58 <AudioTrigger::init()>:
    {	// check with AudioStream if we are responsable for updates
     a58:	b538      	push	{r3, r4, r5, lr}
		return beginCycles(funct, cycles);
     a5a:	4c13      	ldr	r4, [pc, #76]	; (aa8 <AudioTrigger::init()+0x50>)
     a5c:	4605      	mov	r5, r0
      update_responsibility = update_setup();  
     a5e:	f006 fea5 	bl	77ac <AudioStream::update_setup()>
     a62:	4b12      	ldr	r3, [pc, #72]	; (aac <AudioTrigger::init()+0x54>)
     a64:	4a12      	ldr	r2, [pc, #72]	; (ab0 <AudioTrigger::init()+0x58>)
     a66:	7018      	strb	r0, [r3, #0]
     a68:	4620      	mov	r0, r4
     a6a:	4912      	ldr	r1, [pc, #72]	; (ab4 <AudioTrigger::init()+0x5c>)
     a6c:	f006 ffd6 	bl	7a1c <IntervalTimer::beginCycles(void (*)(), unsigned long)>
      t1.priority(prio*16);
     a70:	69ab      	ldr	r3, [r5, #24]
	// the highest and 255 the lowest. Most other interrupts default to 128. As
	// a general guideline, interrupt routines that run longer should be given
	// lower priority (higher numerical values).
	void priority(uint8_t n) {
		nvic_priority = n;
		if (channel) {
     a72:	6820      	ldr	r0, [r4, #0]
     a74:	011b      	lsls	r3, r3, #4
     a76:	b2db      	uxtb	r3, r3
		nvic_priority = n;
     a78:	7123      	strb	r3, [r4, #4]
		if (channel) {
     a7a:	b1a0      	cbz	r0, aa6 <AudioTrigger::init()+0x4e>
			int index = channel - IMXRT_PIT_CHANNELS;
     a7c:	490e      	ldr	r1, [pc, #56]	; (ab8 <AudioTrigger::init()+0x60>)
			nvic_priorites[index] = nvic_priority;
     a7e:	4a0f      	ldr	r2, [pc, #60]	; (abc <AudioTrigger::init()+0x64>)
			int index = channel - IMXRT_PIT_CHANNELS;
     a80:	4401      	add	r1, r0
			uint8_t top_priority = nvic_priorites[0];
			for (uint8_t i=1; i < (sizeof(nvic_priorites)/sizeof(nvic_priorites[0])); i++) {
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
			}
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     a82:	4c0f      	ldr	r4, [pc, #60]	; (ac0 <AudioTrigger::init()+0x68>)
			int index = channel - IMXRT_PIT_CHANNELS;
     a84:	1109      	asrs	r1, r1, #4
			nvic_priorites[index] = nvic_priority;
     a86:	5453      	strb	r3, [r2, r1]
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     a88:	7813      	ldrb	r3, [r2, #0]
     a8a:	7850      	ldrb	r0, [r2, #1]
     a8c:	7891      	ldrb	r1, [r2, #2]
     a8e:	4283      	cmp	r3, r0
     a90:	78d2      	ldrb	r2, [r2, #3]
     a92:	bf28      	it	cs
     a94:	4603      	movcs	r3, r0
     a96:	428b      	cmp	r3, r1
     a98:	bf28      	it	cs
     a9a:	460b      	movcs	r3, r1
     a9c:	4293      	cmp	r3, r2
     a9e:	bf28      	it	cs
     aa0:	4613      	movcs	r3, r2
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     aa2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    }
     aa6:	bd38      	pop	{r3, r4, r5, pc}
     aa8:	20008e98 	.word	0x20008e98
     aac:	200225fc 	.word	0x200225fc
     ab0:	0001100f 	.word	0x0001100f
     ab4:	00000a35 	.word	0x00000a35
     ab8:	bff7bf00 	.word	0xbff7bf00
     abc:	200088e0 	.word	0x200088e0
     ac0:	e000e400 	.word	0xe000e400

00000ac4 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE>:
    IntervalTimer t1;
     ac4:	4a02      	ldr	r2, [pc, #8]	; (ad0 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0xc>)
     ac6:	4903      	ldr	r1, [pc, #12]	; (ad4 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0x10>)
     ac8:	4803      	ldr	r0, [pc, #12]	; (ad8 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0x14>)
     aca:	f009 bdff 	b.w	a6cc <__aeabi_atexit>
     ace:	bf00      	nop
     ad0:	200088f0 	.word	0x200088f0
     ad4:	00000a4d 	.word	0x00000a4d
     ad8:	20008e98 	.word	0x20008e98

00000adc <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int ret=1;
  static uint32_t to = rtc_get();
     ae0:	4db3      	ldr	r5, [pc, #716]	; (db0 <compress(void*)+0x2d4>)
{   
     ae2:	b083      	sub	sp, #12
     ae4:	4604      	mov	r4, r0
  static uint32_t to = rtc_get();
     ae6:	682b      	ldr	r3, [r5, #0]
     ae8:	07df      	lsls	r7, r3, #31
     aea:	f140 8157 	bpl.w	d9c <compress(void*)+0x2c0>
     aee:	f8df b2f4 	ldr.w	fp, [pc, #756]	; de4 <compress(void*)+0x308>
  static uint32_t t1 = micros();
     af2:	4db0      	ldr	r5, [pc, #704]	; (db4 <compress(void*)+0x2d8>)
     af4:	682b      	ldr	r3, [r5, #0]
     af6:	07de      	lsls	r6, r3, #31
     af8:	f140 8148 	bpl.w	d8c <compress(void*)+0x2b0>
  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
     afc:	4bae      	ldr	r3, [pc, #696]	; (db8 <compress(void*)+0x2dc>)
     afe:	f8d3 a000 	ldr.w	sl, [r3]
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii]=tempDatai[ii] = din[ii];
     b02:	4aae      	ldr	r2, [pc, #696]	; (dbc <compress(void*)+0x2e0>)
     b04:	4620      	mov	r0, r4
     b06:	6823      	ldr	r3, [r4, #0]
     b08:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     b0c:	6815      	ldr	r5, [r2, #0]
     b0e:	4aac      	ldr	r2, [pc, #688]	; (dc0 <compress(void*)+0x2e4>)
     b10:	602b      	str	r3, [r5, #0]
     b12:	462c      	mov	r4, r5
     b14:	6013      	str	r3, [r2, #0]
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     b16:	462a      	mov	r2, r5
     b18:	4601      	mov	r1, r0
     b1a:	3004      	adds	r0, #4
     b1c:	e9d1 1300 	ldrd	r1, r3, [r1]
     b20:	42b0      	cmp	r0, r6
     b22:	eba3 0301 	sub.w	r3, r3, r1
     b26:	f844 3f04 	str.w	r3, [r4, #4]!
     b2a:	d1f5      	bne.n	b18 <compress(void*)+0x3c>
     b2c:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
  int32_t mx = 0;
     b30:	2100      	movs	r1, #0
    int32_t dd =  tempDatai[ii];
     b32:	f852 3f04 	ldr.w	r3, [r2, #4]!
    if(dd>mx) mx = dd;
     b36:	2b00      	cmp	r3, #0
     b38:	bfb8      	it	lt
     b3a:	425b      	neglt	r3, r3
     b3c:	4299      	cmp	r1, r3
     b3e:	bfb8      	it	lt
     b40:	4619      	movlt	r1, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     b42:	4290      	cmp	r0, r2
     b44:	d1f5      	bne.n	b32 <compress(void*)+0x56>
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     b46:	2702      	movs	r7, #2
     b48:	2001      	movs	r0, #1
     b4a:	e003      	b.n	b54 <compress(void*)+0x78>
     b4c:	3701      	adds	r7, #1
     b4e:	2f18      	cmp	r7, #24
     b50:	f000 8113 	beq.w	d7a <compress(void*)+0x29e>
     b54:	1e7a      	subs	r2, r7, #1
     b56:	fa00 f302 	lsl.w	r3, r0, r2
     b5a:	428b      	cmp	r3, r1
     b5c:	ddf6      	ble.n	b4c <compress(void*)+0x70>
  int ncmp = (NSAMP*nb) / MBIT;
     b5e:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     b62:	40b8      	lsls	r0, r7
  int ndat = NH+NCH + ncmp;
     b64:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     b68:	3801      	subs	r0, #1
  int ndat = NH+NCH + ncmp;
     b6a:	9301      	str	r3, [sp, #4]
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     b6c:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     b70:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     b74:	4c93      	ldr	r4, [pc, #588]	; (dc4 <compress(void*)+0x2e8>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     b76:	4d94      	ldr	r5, [pc, #592]	; (dc8 <compress(void*)+0x2ec>)
  proc_stat[nb-1]++;
     b78:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
     b7c:	3101      	adds	r1, #1
     b7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     b82:	682a      	ldr	r2, [r5, #0]
     b84:	4c91      	ldr	r4, [pc, #580]	; (dcc <compress(void*)+0x2f0>)
     b86:	42ba      	cmp	r2, r7
     b88:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     b8c:	46a1      	mov	r9, r4
     b8e:	4622      	mov	r2, r4
     b90:	bf38      	it	cc
     b92:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     b94:	f852 1f04 	ldr.w	r1, [r2, #4]!
     b98:	4001      	ands	r1, r0
     b9a:	4296      	cmp	r6, r2
     b9c:	6011      	str	r1, [r2, #0]
     b9e:	d1f9      	bne.n	b94 <compress(void*)+0xb8>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     ba0:	4d8b      	ldr	r5, [pc, #556]	; (dd0 <compress(void*)+0x2f4>)
     ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
     ba6:	2100      	movs	r1, #0
     ba8:	9300      	str	r3, [sp, #0]
     baa:	4628      	mov	r0, r5
     bac:	f00b fe4a 	bl	c844 <memset>
  *iptr++ = to;
     bb0:	f8db 2000 	ldr.w	r2, [fp]
  *iptr++ = NCH+ncmp; // number of data after header
     bb4:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     bb6:	2100      	movs	r1, #0
  *iptr++ = to;
     bb8:	60aa      	str	r2, [r5, #8]

  // pack data
  // 
  int nx = MBIT;
     bba:	f04f 0c20 	mov.w	ip, #32
  *iptr++ = nb | shift<<16;
     bbe:	4a85      	ldr	r2, [pc, #532]	; (dd4 <compress(void*)+0x2f8>)
  outData[kk++] = tempData[0]; tempData[0] = 0;
     bc0:	2007      	movs	r0, #7
  *iptr++ = t1;
     bc2:	f8c5 a00c 	str.w	sl, [r5, #12]
  *iptr++ = nb | shift<<16;
     bc6:	f9b2 2000 	ldrsh.w	r2, [r2]
  *iptr++ = NCH+ncmp; // number of data after header
     bca:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     bcc:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     bd0:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     bd2:	f8d9 2000 	ldr.w	r2, [r9]
     bd6:	f8c9 1000 	str.w	r1, [r9]
     bda:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     bdc:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     be0:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     be2:	2201      	movs	r2, #1
     be4:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     be6:	e00a      	b.n	bfe <compress(void*)+0x122>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     be8:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     bec:	4694      	mov	ip, r2
     bee:	ea41 010e 	orr.w	r1, r1, lr
     bf2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     bf6:	42a6      	cmp	r6, r4
     bf8:	d018      	beq.n	c2c <compress(void*)+0x150>
      {   outData[kk] |= (tempData[ii] << nx);
     bfa:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     bfe:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     c02:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     c04:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     c08:	dcee      	bgt.n	be8 <compress(void*)+0x10c>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c0a:	eba7 0e0c 	sub.w	lr, r7, ip
     c0e:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     c12:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     c16:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     c1a:	d12f      	bne.n	c7c <compress(void*)+0x1a0>
      {   outData[kk++] |= tempData[ii];
     c1c:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     c1e:	42a6      	cmp	r6, r4
          nx=MBIT;
     c20:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     c24:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     c28:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     c2a:	d1e6      	bne.n	bfa <compress(void*)+0x11e>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     c2c:	4e6a      	ldr	r6, [pc, #424]	; (dd8 <compress(void*)+0x2fc>)
     c2e:	6834      	ldr	r4, [r6, #0]
     c30:	eb04 0208 	add.w	r2, r4, r8
     c34:	2a80      	cmp	r2, #128	; 0x80
     c36:	dc2d      	bgt.n	c94 <compress(void*)+0x1b8>
     c38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     c3c:	4a67      	ldr	r2, [pc, #412]	; (ddc <compress(void*)+0x300>)
     c3e:	4864      	ldr	r0, [pc, #400]	; (dd0 <compress(void*)+0x2f4>)
     c40:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     c44:	4423      	add	r3, r4
     c46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c4a:	2300      	movs	r3, #0
     c4c:	e001      	b.n	c52 <compress(void*)+0x176>
     c4e:	f850 1f04 	ldr.w	r1, [r0, #4]!
     c52:	3301      	adds	r3, #1
     c54:	f842 1f04 	str.w	r1, [r2, #4]!
     c58:	4543      	cmp	r3, r8
     c5a:	dbf8      	blt.n	c4e <compress(void*)+0x172>
     c5c:	f1b8 0f00 	cmp.w	r8, #0
     c60:	f108 33ff 	add.w	r3, r8, #4294967295
     c64:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     c68:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c6c:	bfd8      	it	le
     c6e:	2300      	movle	r3, #0
     c70:	4423      	add	r3, r4
     c72:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     c74:	4638      	mov	r0, r7
     c76:	b003      	add	sp, #12
     c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c7c:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     c80:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c84:	ea4e 0202 	orr.w	r2, lr, r2
     c88:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     c8c:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     c8e:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     c92:	e7b0      	b.n	bf6 <compress(void*)+0x11a>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     c94:	2c7a      	cmp	r4, #122	; 0x7a
     c96:	dd22      	ble.n	cde <compress(void*)+0x202>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     c98:	2c7f      	cmp	r4, #127	; 0x7f
     c9a:	dc0a      	bgt.n	cb2 <compress(void*)+0x1d6>
     c9c:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     ca0:	484e      	ldr	r0, [pc, #312]	; (ddc <compress(void*)+0x300>)
     ca2:	2100      	movs	r1, #0
     ca4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     ca8:	0092      	lsls	r2, r2, #2
     caa:	f00b fdcb 	bl	c844 <memset>
     cae:	2380      	movs	r3, #128	; 0x80
     cb0:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     cb2:	484a      	ldr	r0, [pc, #296]	; (ddc <compress(void*)+0x300>)
     cb4:	f000 fc20 	bl	14f8 <pushData(unsigned long*)>
     cb8:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     cba:	ea4f 0288 	mov.w	r2, r8, lsl #2
     cbe:	4944      	ldr	r1, [pc, #272]	; (dd0 <compress(void*)+0x2f4>)
      if(!pushData(dout)) ret = 0;
     cc0:	bf18      	it	ne
     cc2:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     cc4:	f1b8 0f00 	cmp.w	r8, #0
     cc8:	4844      	ldr	r0, [pc, #272]	; (ddc <compress(void*)+0x300>)
     cca:	bfd8      	it	le
     ccc:	2204      	movle	r2, #4
     cce:	f007 fb21 	bl	8314 <memcpy>
}
     cd2:	4638      	mov	r0, r7
     cd4:	f8c6 8000 	str.w	r8, [r6]
     cd8:	b003      	add	sp, #12
     cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     cde:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     ce2:	483e      	ldr	r0, [pc, #248]	; (ddc <compress(void*)+0x300>)
     ce4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     ce8:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     cec:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     cee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     cf2:	4d37      	ldr	r5, [pc, #220]	; (dd0 <compress(void*)+0x2f4>)
     cf4:	4423      	add	r3, r4
     cf6:	4629      	mov	r1, r5
     cf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     cfc:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     d00:	e001      	b.n	d06 <compress(void*)+0x22a>
     d02:	f851 2f04 	ldr.w	r2, [r1, #4]!
     d06:	f843 2f04 	str.w	r2, [r3, #4]!
     d0a:	4298      	cmp	r0, r3
     d0c:	d1f9      	bne.n	d02 <compress(void*)+0x226>
     d0e:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     d10:	4832      	ldr	r0, [pc, #200]	; (ddc <compress(void*)+0x300>)
     d12:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     d16:	6033      	str	r3, [r6, #0]
     d18:	f000 fbee 	bl	14f8 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     d1c:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     d1e:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     d20:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     d22:	4a2f      	ldr	r2, [pc, #188]	; (de0 <compress(void*)+0x304>)
      if(!pushData(dout)) ret = 0;
     d24:	bf18      	it	ne
     d26:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     d28:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     d2c:	f8df e0a0 	ldr.w	lr, [pc, #160]	; dd0 <compress(void*)+0x2f4>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     d30:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     d32:	f8df c0a8 	ldr.w	ip, [pc, #168]	; ddc <compress(void*)+0x300>
      while (ii < ndat) dout[nout++] = outData[ii++];
     d36:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     d38:	ea42 0203 	orr.w	r2, r2, r3
     d3c:	f04f 0306 	mov.w	r3, #6
     d40:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     d42:	6033      	str	r3, [r6, #0]
     d44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     d48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     d4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
     d50:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     d54:	da8e      	bge.n	c74 <compress(void*)+0x198>
     d56:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     d5a:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     d5e:	f10c 0008 	add.w	r0, ip, #8
     d62:	4442      	add	r2, r8
     d64:	0092      	lsls	r2, r2, #2
     d66:	f007 fad5 	bl	8314 <memcpy>
     d6a:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     d6e:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     d70:	4443      	add	r3, r8
     d72:	6033      	str	r3, [r6, #0]
}
     d74:	b003      	add	sp, #12
     d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d7a:	2267      	movs	r2, #103	; 0x67
     d7c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     d80:	f04f 0868 	mov.w	r8, #104	; 0x68
     d84:	2361      	movs	r3, #97	; 0x61
     d86:	9201      	str	r2, [sp, #4]
     d88:	2217      	movs	r2, #23
     d8a:	e6f3      	b.n	b74 <compress(void*)+0x98>
  static uint32_t t1 = micros();
     d8c:	f007 fa2e 	bl	81ec <micros>
     d90:	4b09      	ldr	r3, [pc, #36]	; (db8 <compress(void*)+0x2dc>)
     d92:	4682      	mov	sl, r0
     d94:	6018      	str	r0, [r3, #0]
     d96:	2301      	movs	r3, #1
     d98:	602b      	str	r3, [r5, #0]
     d9a:	e6b2      	b.n	b02 <compress(void*)+0x26>
  static uint32_t to = rtc_get();
     d9c:	f007 fb8a 	bl	84b4 <rtc_get>
     da0:	f8df b040 	ldr.w	fp, [pc, #64]	; de4 <compress(void*)+0x308>
     da4:	2301      	movs	r3, #1
     da6:	f8cb 0000 	str.w	r0, [fp]
     daa:	602b      	str	r3, [r5, #0]
     dac:	e6a1      	b.n	af2 <compress(void*)+0x16>
     dae:	bf00      	nop
     db0:	2000cbb8 	.word	0x2000cbb8
     db4:	2000cbb4 	.word	0x2000cbb4
     db8:	20020190 	.word	0x20020190
     dbc:	20008ea8 	.word	0x20008ea8
     dc0:	20022574 	.word	0x20022574
     dc4:	20021fc0 	.word	0x20021fc0
     dc8:	20021f74 	.word	0x20021f74
     dcc:	2001fe9c 	.word	0x2001fe9c
     dd0:	2001fc4c 	.word	0x2001fc4c
     dd4:	20008ec4 	.word	0x20008ec4
     dd8:	20020198 	.word	0x20020198
     ddc:	2001f9cc 	.word	0x2001f9cc
     de0:	ffff0000 	.word	0xffff0000
     de4:	20020194 	.word	0x20020194

00000de8 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     de8:	2000      	movs	r0, #0
     dea:	4770      	bx	lr

00000dec <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     dec:	4770      	bx	lr
     dee:	bf00      	nop

00000df0 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     df0:	4b04      	ldr	r3, [pc, #16]	; (e04 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     df2:	b510      	push	{r4, lr}
     df4:	4604      	mov	r4, r0
     df6:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     dfa:	f003 fda3 	bl	4944 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     dfe:	4620      	mov	r0, r4
     e00:	bd10      	pop	{r4, pc}
     e02:	bf00      	nop
     e04:	20000984 	.word	0x20000984

00000e08 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     e08:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     e0a:	b500      	push	{lr}
     e0c:	b083      	sub	sp, #12
     e0e:	b163      	cbz	r3, e2a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     e10:	2201      	movs	r2, #1
     e12:	f10d 0107 	add.w	r1, sp, #7
     e16:	4618      	mov	r0, r3
     e18:	f002 fc32 	bl	3680 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     e1c:	2801      	cmp	r0, #1
     e1e:	d10c      	bne.n	e3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     e20:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     e24:	b003      	add	sp, #12
     e26:	f85d fb04 	ldr.w	pc, [sp], #4
     e2a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     e2c:	b128      	cbz	r0, e3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     e2e:	2201      	movs	r2, #1
     e30:	f10d 0107 	add.w	r1, sp, #7
     e34:	f000 ff44 	bl	1cc0 <ExFatFile::read(void*, unsigned int)>
     e38:	e7f0      	b.n	e1c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     e3a:	f04f 30ff 	mov.w	r0, #4294967295
     e3e:	e7f1      	b.n	e24 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000e40 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     e40:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e42:	b113      	cbz	r3, e4a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     e44:	4618      	mov	r0, r3
     e46:	f002 bcef 	b.w	3828 <FatFile::peek()>
     e4a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     e4c:	b108      	cbz	r0, e52 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     e4e:	f001 b807 	b.w	1e60 <ExFatFile::peek()>
  }
     e52:	f04f 30ff 	mov.w	r0, #4294967295
     e56:	4770      	bx	lr

00000e58 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     e58:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e5a:	b153      	cbz	r3, e72 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     e5c:	7818      	ldrb	r0, [r3, #0]
     e5e:	f010 0008 	ands.w	r0, r0, #8
     e62:	d00d      	beq.n	e80 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     e64:	69d8      	ldr	r0, [r3, #28]
     e66:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     e68:	1ac0      	subs	r0, r0, r3
     e6a:	bf48      	it	mi
     e6c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     e70:	4770      	bx	lr
     e72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     e74:	b1a3      	cbz	r3, ea0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     e76:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     e7a:	f010 0008 	ands.w	r0, r0, #8
     e7e:	d100      	bne.n	e82 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     e80:	4770      	bx	lr
     e82:	6918      	ldr	r0, [r3, #16]
     e84:	6819      	ldr	r1, [r3, #0]
     e86:	695a      	ldr	r2, [r3, #20]
     e88:	1a40      	subs	r0, r0, r1
     e8a:	685b      	ldr	r3, [r3, #4]
     e8c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     e90:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     e94:	f173 0300 	sbcs.w	r3, r3, #0
     e98:	d3f2      	bcc.n	e80 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     e9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     e9e:	4770      	bx	lr
     ea0:	4618      	mov	r0, r3
    return BaseFile::available();
     ea2:	e7ed      	b.n	e80 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000ea4 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     ea4:	6c83      	ldr	r3, [r0, #72]	; 0x48
     ea6:	b113      	cbz	r3, eae <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     ea8:	4618      	mov	r0, r3
     eaa:	f002 bdbd 	b.w	3a28 <FatFile::sync()>
     eae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     eb0:	b108      	cbz	r0, eb6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     eb2:	f001 bb97 	b.w	25e4 <ExFatFile::sync()>
  }
     eb6:	4770      	bx	lr

00000eb8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     eb8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     eba:	b113      	cbz	r3, ec2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     ebc:	4618      	mov	r0, r3
     ebe:	f002 bdb9 	b.w	3a34 <FatFile::write(void const*, unsigned int)>
     ec2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     ec4:	b108      	cbz	r0, eca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     ec6:	f001 bd23 	b.w	2910 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     eca:	4770      	bx	lr

00000ecc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     ecc:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     ece:	6c83      	ldr	r3, [r0, #72]	; 0x48
     ed0:	b083      	sub	sp, #12
     ed2:	f88d 1007 	strb.w	r1, [sp, #7]
     ed6:	b143      	cbz	r3, eea <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     ed8:	2201      	movs	r2, #1
     eda:	f10d 0107 	add.w	r1, sp, #7
     ede:	4618      	mov	r0, r3
     ee0:	f002 fda8 	bl	3a34 <FatFile::write(void const*, unsigned int)>
  }
     ee4:	b003      	add	sp, #12
     ee6:	f85d fb04 	ldr.w	pc, [sp], #4
     eea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     eec:	2800      	cmp	r0, #0
     eee:	d0f9      	beq.n	ee4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     ef0:	2201      	movs	r2, #1
     ef2:	f10d 0107 	add.w	r1, sp, #7
     ef6:	f001 fd0b 	bl	2910 <ExFatFile::write(void const*, unsigned int)>
     efa:	b003      	add	sp, #12
     efc:	f85d fb04 	ldr.w	pc, [sp], #4

00000f00 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     f00:	b538      	push	{r3, r4, r5, lr}
     f02:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     f04:	b149      	cbz	r1, f1a <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     f06:	4608      	mov	r0, r1
     f08:	460d      	mov	r5, r1
     f0a:	f00b ffd9 	bl	cec0 <strlen>
     f0e:	6823      	ldr	r3, [r4, #0]
     f10:	4602      	mov	r2, r0
     f12:	4629      	mov	r1, r5
     f14:	685b      	ldr	r3, [r3, #4]
     f16:	4620      	mov	r0, r4
     f18:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     f1a:	4620      	mov	r0, r4
     f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     f20:	f006 be60 	b.w	7be4 <Print::println()>

00000f24 <filing_init()>:
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
     f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     f26:	4b23      	ldr	r3, [pc, #140]	; (fb4 <filing_init()+0x90>)
     f28:	2505      	movs	r5, #5
     f2a:	4c23      	ldr	r4, [pc, #140]	; (fb8 <filing_init()+0x94>)
     f2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
     f30:	4a22      	ldr	r2, [pc, #136]	; (fbc <filing_init()+0x98>)
     f32:	f504 6692 	add.w	r6, r4, #1168	; 0x490
     f36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f3a:	4f21      	ldr	r7, [pc, #132]	; (fc0 <filing_init()+0x9c>)
     f3c:	6013      	str	r3, [r2, #0]
    sdioConfigBackup = sdioConfig;
     f3e:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     f40:	22ff      	movs	r2, #255	; 0xff
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     f42:	4630      	mov	r0, r6
     f44:	4619      	mov	r1, r3
     f46:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     f4a:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     f4e:	f005 f945 	bl	61dc <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     f52:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     f54:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     f58:	f004 fc36 	bl	57c8 <SdioCard::errorCode() const>
     f5c:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     f5e:	2301      	movs	r3, #1
     f60:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
     f62:	b98a      	cbnz	r2, f88 <filing_init()+0x64>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     f64:	461a      	mov	r2, r3
     f66:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     f6a:	f003 fd59 	bl	4a20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     f6e:	b158      	cbz	r0, f88 <filing_init()+0x64>
     f70:	2111      	movs	r1, #17
     f72:	4814      	ldr	r0, [pc, #80]	; (fc4 <filing_init()+0xa0>)
     f74:	f009 f992 	bl	a29c <usb_serial_write>
     f78:	4813      	ldr	r0, [pc, #76]	; (fc8 <filing_init()+0xa4>)
     f7a:	f006 fe33 	bl	7be4 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     f7e:	2301      	movs	r3, #1
     f80:	4a12      	ldr	r2, [pc, #72]	; (fcc <filing_init()+0xa8>)
      return 1;
     f82:	4618      	mov	r0, r3
      haveStore=1;
     f84:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f88:	210f      	movs	r1, #15
     f8a:	4638      	mov	r0, r7
     f8c:	f009 f986 	bl	a29c <usb_serial_write>
     f90:	480d      	ldr	r0, [pc, #52]	; (fc8 <filing_init()+0xa4>)
     f92:	f006 fe27 	bl	7be4 <Print::println()>
      delay(100);
     f96:	2064      	movs	r0, #100	; 0x64
     f98:	f007 f8d4 	bl	8144 <delay>
  for(int ii=0; ii<5;ii++)
     f9c:	3d01      	subs	r5, #1
     f9e:	d1ce      	bne.n	f3e <filing_init()+0x1a>
     fa0:	211b      	movs	r1, #27
     fa2:	480b      	ldr	r0, [pc, #44]	; (fd0 <filing_init()+0xac>)
     fa4:	f009 f97a 	bl	a29c <usb_serial_write>
     fa8:	4807      	ldr	r0, [pc, #28]	; (fc8 <filing_init()+0xa4>)
     faa:	f006 fe1b 	bl	7be4 <Print::println()>
  return 0;
     fae:	4628      	mov	r0, r5
}
     fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fb2:	bf00      	nop
     fb4:	401f4400 	.word	0x401f4400
     fb8:	20022094 	.word	0x20022094
     fbc:	2000c7f0 	.word	0x2000c7f0
     fc0:	200004d0 	.word	0x200004d0
     fc4:	200004bc 	.word	0x200004bc
     fc8:	200088c4 	.word	0x200088c4
     fcc:	2002174c 	.word	0x2002174c
     fd0:	200004e0 	.word	0x200004e0

00000fd4 <makeHeader(long*)>:


int16_t makeHeader(int32_t *header)
{
     fd4:	b530      	push	{r4, r5, lr}
     fd6:	b089      	sub	sp, #36	; 0x24
     fd8:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = FSAMP;
    header[8] = NCH;
    header[9] = t_acq;
     fda:	4d1b      	ldr	r5, [pc, #108]	; (1048 <makeHeader(long*)+0x74>)
    rtc_get_datetime(&t);
     fdc:	a806      	add	r0, sp, #24
     fde:	f000 fc33 	bl	1848 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     fe2:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     fe6:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     fea:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     fee:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     ff2:	e9cd 3003 	strd	r3, r0, [sp, #12]
     ff6:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     ffa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     ffe:	9000      	str	r0, [sp, #0]
    1000:	4620      	mov	r0, r4
    1002:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1006:	4a11      	ldr	r2, [pc, #68]	; (104c <makeHeader(long*)+0x78>)
    1008:	4911      	ldr	r1, [pc, #68]	; (1050 <makeHeader(long*)+0x7c>)
    100a:	f00b fa75 	bl	c4f8 <sprintf>
    header[10] = t_on;
    100e:	4a11      	ldr	r2, [pc, #68]	; (1054 <makeHeader(long*)+0x80>)
    header[11] = t_off;
    1010:	4b11      	ldr	r3, [pc, #68]	; (1058 <makeHeader(long*)+0x84>)
    header[8] = NCH;
    1012:	2001      	movs	r0, #1
    header[9] = t_acq;
    1014:	682d      	ldr	r5, [r5, #0]
    header[10] = t_on;
    1016:	6812      	ldr	r2, [r2, #0]
    header[6] = SerNum;      // serial number
    1018:	4910      	ldr	r1, [pc, #64]	; (105c <makeHeader(long*)+0x88>)
    header[11] = t_off;
    101a:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
    101c:	6809      	ldr	r1, [r1, #0]
    header[9] = t_acq;
    101e:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
    1020:	2514      	movs	r5, #20
    header[6] = SerNum;      // serial number
    1022:	61a1      	str	r1, [r4, #24]
    header[7] = FSAMP;
    1024:	f64a 4144 	movw	r1, #44100	; 0xac44
    header[5] = 20;          // SW version
    1028:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
    102a:	6220      	str	r0, [r4, #32]
    header[7] = FSAMP;
    102c:	61e1      	str	r1, [r4, #28]
    header[12] = PROC_MODE;
    102e:	6320      	str	r0, [r4, #48]	; 0x30
    header[11] = t_off;
    1030:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    header[13] = shift;
    1034:	4b0a      	ldr	r3, [pc, #40]	; (1060 <makeHeader(long*)+0x8c>)

    header[127]=0x55555555;
    1036:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[13] = shift;
    103a:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[127]=0x55555555;
    103e:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
    1042:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
    1044:	b009      	add	sp, #36	; 0x24
    1046:	bd30      	pop	{r4, r5, pc}
    1048:	20008ea0 	.word	0x20008ea0
    104c:	20000498 	.word	0x20000498
    1050:	200004a0 	.word	0x200004a0
    1054:	20008ea4 	.word	0x20008ea4
    1058:	2002256c 	.word	0x2002256c
    105c:	2000c7f0 	.word	0x2000c7f0
    1060:	20008ec4 	.word	0x20008ec4

00001064 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    1064:	b530      	push	{r4, r5, lr}
    1066:	b087      	sub	sp, #28
    1068:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    106a:	a804      	add	r0, sp, #16
    106c:	f000 fbec 	bl	1848 <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
    1070:	4913      	ldr	r1, [pc, #76]	; (10c0 <newDirectory(char*)+0x5c>)

    if(newHour(t.hour))
    1072:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
    1076:	680b      	ldr	r3, [r1, #0]
    1078:	429a      	cmp	r2, r3
    107a:	d01e      	beq.n	10ba <newDirectory(char*)+0x56>
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    107c:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    1080:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    1084:	4b0f      	ldr	r3, [pc, #60]	; (10c4 <newDirectory(char*)+0x60>)
    1086:	e9cd 5202 	strd	r5, r2, [sp, #8]
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	9001      	str	r0, [sp, #4]
    108e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
    1092:	600a      	str	r2, [r1, #0]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1094:	4a0c      	ldr	r2, [pc, #48]	; (10c8 <newDirectory(char*)+0x64>)
    1096:	490d      	ldr	r1, [pc, #52]	; (10cc <newDirectory(char*)+0x68>)
    1098:	9000      	str	r0, [sp, #0]
    109a:	4620      	mov	r0, r4
    109c:	f00b fa2c 	bl	c4f8 <sprintf>
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(dirName);
    10a0:	480b      	ldr	r0, [pc, #44]	; (10d0 <newDirectory(char*)+0x6c>)
    10a2:	f006 fd9f 	bl	7be4 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    10a6:	4620      	mov	r0, r4
    10a8:	f00b ff0a 	bl	cec0 <strlen>
    10ac:	4601      	mov	r1, r0
    10ae:	4620      	mov	r0, r4
    10b0:	f009 f8f4 	bl	a29c <usb_serial_write>
        return 1;   // have new directory
    10b4:	2001      	movs	r0, #1
    }
    return 0;       // keep old directory

}
    10b6:	b007      	add	sp, #28
    10b8:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    10ba:	2000      	movs	r0, #0
}
    10bc:	b007      	add	sp, #28
    10be:	bd30      	pop	{r4, r5, pc}
    10c0:	2002018c 	.word	0x2002018c
    10c4:	2000c7f0 	.word	0x2000c7f0
    10c8:	20000518 	.word	0x20000518
    10cc:	2000051c 	.word	0x2000051c
    10d0:	200088c4 	.word	0x200088c4

000010d4 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    10d4:	b510      	push	{r4, lr}
    10d6:	b084      	sub	sp, #16
    10d8:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    10da:	a802      	add	r0, sp, #8
    10dc:	f000 fbb4 	bl	1848 <rtc_get_datetime(datetime_t*)>
    sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    10e0:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    10e4:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    10e8:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    10ec:	4a0b      	ldr	r2, [pc, #44]	; (111c <newFileName(char*)+0x48>)
    10ee:	e9cd 1000 	strd	r1, r0, [sp]
    10f2:	490b      	ldr	r1, [pc, #44]	; (1120 <newFileName(char*)+0x4c>)
    10f4:	4620      	mov	r0, r4
    10f6:	f00b f9ff 	bl	c4f8 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    10fa:	480a      	ldr	r0, [pc, #40]	; (1124 <newFileName(char*)+0x50>)
    10fc:	f006 fd72 	bl	7be4 <Print::println()>
    1100:	2102      	movs	r1, #2
    1102:	4809      	ldr	r0, [pc, #36]	; (1128 <newFileName(char*)+0x54>)
    1104:	f009 f8ca 	bl	a29c <usb_serial_write>
    1108:	4620      	mov	r0, r4
    110a:	f00b fed9 	bl	cec0 <strlen>
    110e:	4601      	mov	r1, r0
    1110:	4620      	mov	r0, r4
    1112:	f009 f8c3 	bl	a29c <usb_serial_write>
    return 1;
}
    1116:	2001      	movs	r0, #1
    1118:	b004      	add	sp, #16
    111a:	bd10      	pop	{r4, pc}
    111c:	200004fc 	.word	0x200004fc
    1120:	20000500 	.word	0x20000500
    1124:	200088c4 	.word	0x200088c4
    1128:	20000514 	.word	0x20000514

0000112c <storeData(short)>:
static char fileName[80];
static int32_t fileHeader[128];

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    112c:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    112e:	4604      	mov	r4, r0
{
    1130:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    1132:	2800      	cmp	r0, #0
    1134:	d03a      	beq.n	11ac <storeData(short)+0x80>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    1136:	2801      	cmp	r0, #1
    1138:	d015      	beq.n	1166 <storeData(short)+0x3a>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    113a:	2802      	cmp	r0, #2
    113c:	f000 80c0 	beq.w	12c0 <storeData(short)+0x194>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    1140:	2803      	cmp	r0, #3
    1142:	f000 80b1 	beq.w	12a8 <storeData(short)+0x17c>
            file.close();
        }
        status = CLOSED;
    }
    //
    if(status==MUSTSTOP) // should close file and stop
    1146:	2804      	cmp	r0, #4
    1148:	d10b      	bne.n	1162 <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
    114a:	4b86      	ldr	r3, [pc, #536]	; (1364 <storeData(short)+0x238>)
    114c:	6c98      	ldr	r0, [r3, #72]	; 0x48
    114e:	2800      	cmp	r0, #0
    1150:	f000 80f2 	beq.w	1338 <storeData(short)+0x20c>
    return m_fFile ? m_fFile->sync() :
    1154:	f002 fc68 	bl	3a28 <FatFile::sync()>
    {   if(file)
        {
            file.flush();
            file.close();
    1158:	4883      	ldr	r0, [pc, #524]	; (1368 <storeData(short)+0x23c>)
    115a:	f003 fbf3 	bl	4944 <FsBaseFile::close()>
        }
        status = STOPPED;
    115e:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return status;
}
    1162:	b014      	add	sp, #80	; 0x50
    1164:	bd70      	pop	{r4, r5, r6, pc}
    1166:	4c7f      	ldr	r4, [pc, #508]	; (1364 <storeData(short)+0x238>)
    {   makeHeader(fileHeader);
    1168:	4880      	ldr	r0, [pc, #512]	; (136c <storeData(short)+0x240>)
    116a:	f7ff ff33 	bl	fd4 <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    116e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1170:	2800      	cmp	r0, #0
    1172:	d068      	beq.n	1246 <storeData(short)+0x11a>
    1174:	f44f 7200 	mov.w	r2, #512	; 0x200
    1178:	497c      	ldr	r1, [pc, #496]	; (136c <storeData(short)+0x240>)
    117a:	f002 fc5b 	bl	3a34 <FatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    117e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1182:	d36b      	bcc.n	125c <storeData(short)+0x130>
    1184:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1186:	2800      	cmp	r0, #0
    1188:	f000 8090 	beq.w	12ac <storeData(short)+0x180>
    118c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1190:	4977      	ldr	r1, [pc, #476]	; (1370 <storeData(short)+0x244>)
    1192:	f002 fc4f 	bl	3a34 <FatFile::write(void const*, unsigned int)>
    1196:	4605      	mov	r5, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1198:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    119c:	d36a      	bcc.n	1274 <storeData(short)+0x148>
        disk_count++;
    119e:	4a75      	ldr	r2, [pc, #468]	; (1374 <storeData(short)+0x248>)
    11a0:	2002      	movs	r0, #2
    11a2:	6813      	ldr	r3, [r2, #0]
    11a4:	3301      	adds	r3, #1
    11a6:	6013      	str	r3, [r2, #0]
}
    11a8:	b014      	add	sp, #80	; 0x50
    11aa:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    11ac:	4872      	ldr	r0, [pc, #456]	; (1378 <storeData(short)+0x24c>)
    11ae:	f7ff ff59 	bl	1064 <newDirectory(char*)>
    11b2:	b1d8      	cbz	r0, 11ec <storeData(short)+0xc0>
    return m_fVol ? m_fVol->exists(path) :
    11b4:	4d71      	ldr	r5, [pc, #452]	; (137c <storeData(short)+0x250>)
    11b6:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    11ba:	2a00      	cmp	r2, #0
    11bc:	f000 8082 	beq.w	12c4 <storeData(short)+0x198>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    11c0:	466e      	mov	r6, sp
    11c2:	4611      	mov	r1, r2
    11c4:	4623      	mov	r3, r4
    11c6:	4a6c      	ldr	r2, [pc, #432]	; (1378 <storeData(short)+0x24c>)
    11c8:	4630      	mov	r0, r6
  FatFile() {}
    11ca:	9400      	str	r4, [sp, #0]
    11cc:	f002 fa32 	bl	3634 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    11d0:	2800      	cmp	r0, #0
    11d2:	f000 8084 	beq.w	12de <storeData(short)+0x1b2>
    return m_fVol ? m_fVol->chdir(path) :
    11d6:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    11da:	2800      	cmp	r0, #0
    11dc:	f000 8095 	beq.w	130a <storeData(short)+0x1de>
    11e0:	4965      	ldr	r1, [pc, #404]	; (1378 <storeData(short)+0x24c>)
    11e2:	f003 fb2d 	bl	4840 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    11e6:	2800      	cmp	r0, #0
    11e8:	f000 8098 	beq.w	131c <storeData(short)+0x1f0>
        if(newFileName(fileName))
    11ec:	4864      	ldr	r0, [pc, #400]	; (1380 <storeData(short)+0x254>)
    11ee:	f7ff ff71 	bl	10d4 <newFileName(char*)>
    11f2:	b328      	cbz	r0, 1240 <storeData(short)+0x114>
            file = sd.open(fileName, FILE_WRITE); 
    11f4:	f244 2302 	movw	r3, #16898	; 0x4202
    11f8:	4a61      	ldr	r2, [pc, #388]	; (1380 <storeData(short)+0x254>)
    11fa:	4960      	ldr	r1, [pc, #384]	; (137c <storeData(short)+0x250>)
    11fc:	4668      	mov	r0, sp
    11fe:	f003 fc81 	bl	4b04 <FsVolume::open(char const*, int)>
class Print
    1202:	4c58      	ldr	r4, [pc, #352]	; (1364 <storeData(short)+0x238>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1204:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    1208:	f104 0010 	add.w	r0, r4, #16
    120c:	7323      	strb	r3, [r4, #12]
    120e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1212:	e9c4 1201 	strd	r1, r2, [r4, #4]
    1216:	a904      	add	r1, sp, #16
    1218:	f003 fb3a 	bl	4890 <FsBaseFile::operator=(FsBaseFile const&)>
    121c:	4b59      	ldr	r3, [pc, #356]	; (1384 <storeData(short)+0x258>)
  ~FsBaseFile() {close();}
    121e:	a804      	add	r0, sp, #16
    1220:	9300      	str	r3, [sp, #0]
    1222:	f003 fb8f 	bl	4944 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1226:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1228:	2b00      	cmp	r3, #0
    122a:	d19d      	bne.n	1168 <storeData(short)+0x3c>
    122c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    122e:	2b00      	cmp	r3, #0
    1230:	d19a      	bne.n	1168 <storeData(short)+0x3c>
    1232:	2111      	movs	r1, #17
    1234:	4854      	ldr	r0, [pc, #336]	; (1388 <storeData(short)+0x25c>)
    1236:	f009 f831 	bl	a29c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    123a:	4854      	ldr	r0, [pc, #336]	; (138c <storeData(short)+0x260>)
    123c:	f006 fcd2 	bl	7be4 <Print::println()>
                return STOPPED; 
    1240:	f04f 30ff 	mov.w	r0, #4294967295
    1244:	e78d      	b.n	1162 <storeData(short)+0x36>
    1246:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1248:	2800      	cmp	r0, #0
    124a:	d08a      	beq.n	1162 <storeData(short)+0x36>
    124c:	f44f 7200 	mov.w	r2, #512	; 0x200
    1250:	4946      	ldr	r1, [pc, #280]	; (136c <storeData(short)+0x240>)
    1252:	f001 fb5d 	bl	2910 <ExFatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    1256:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    125a:	d293      	bcs.n	1184 <storeData(short)+0x58>
  bool isOpen() const {return m_fFile || m_xFile;}
    125c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    125e:	2800      	cmp	r0, #0
    1260:	d063      	beq.n	132a <storeData(short)+0x1fe>
    return m_fFile ? m_fFile->sync() :
    1262:	f002 fbe1 	bl	3a28 <FatFile::sync()>
            file.close();
    1266:	4840      	ldr	r0, [pc, #256]	; (1368 <storeData(short)+0x23c>)
    1268:	f003 fb6c 	bl	4944 <FsBaseFile::close()>
        status = CLOSED;
    126c:	2000      	movs	r0, #0
}
    126e:	b014      	add	sp, #80	; 0x50
    1270:	bd70      	pop	{r4, r5, r6, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
    1272:	4605      	mov	r5, r0
    1274:	2101      	movs	r1, #1
    1276:	4846      	ldr	r0, [pc, #280]	; (1390 <storeData(short)+0x264>)
    1278:	f009 f810 	bl	a29c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    127c:	2300      	movs	r3, #0
    127e:	220a      	movs	r2, #10
    1280:	4629      	mov	r1, r5
    1282:	4842      	ldr	r0, [pc, #264]	; (138c <storeData(short)+0x260>)
    1284:	f006 fcd8 	bl	7c38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1288:	2101      	movs	r1, #1
    128a:	4842      	ldr	r0, [pc, #264]	; (1394 <storeData(short)+0x268>)
    128c:	f009 f806 	bl	a29c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1290:	2102      	movs	r1, #2
    1292:	483e      	ldr	r0, [pc, #248]	; (138c <storeData(short)+0x260>)
    1294:	f006 fc9a 	bl	7bcc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1298:	483c      	ldr	r0, [pc, #240]	; (138c <storeData(short)+0x260>)
    129a:	f006 fca3 	bl	7be4 <Print::println()>
        disk_count++;
    129e:	4a35      	ldr	r2, [pc, #212]	; (1374 <storeData(short)+0x248>)
    12a0:	6813      	ldr	r3, [r2, #0]
    12a2:	3301      	adds	r3, #1
    12a4:	6013      	str	r3, [r2, #0]
    if(status==DOCLOSE) // should close file
    12a6:	e7d9      	b.n	125c <storeData(short)+0x130>
    12a8:	4c2e      	ldr	r4, [pc, #184]	; (1364 <storeData(short)+0x238>)
    12aa:	e7d7      	b.n	125c <storeData(short)+0x130>
    12ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    12ae:	2800      	cmp	r0, #0
    12b0:	d0df      	beq.n	1272 <storeData(short)+0x146>
    12b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    12b6:	492e      	ldr	r1, [pc, #184]	; (1370 <storeData(short)+0x244>)
    12b8:	f001 fb2a 	bl	2910 <ExFatFile::write(void const*, unsigned int)>
    12bc:	4605      	mov	r5, r0
    12be:	e76b      	b.n	1198 <storeData(short)+0x6c>
    12c0:	4c28      	ldr	r4, [pc, #160]	; (1364 <storeData(short)+0x238>)
    12c2:	e75f      	b.n	1184 <storeData(short)+0x58>
    12c4:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    12c8:	b1c1      	cbz	r1, 12fc <storeData(short)+0x1d0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    12ca:	466e      	mov	r6, sp
    12cc:	4613      	mov	r3, r2
  ExFatFile() {}
    12ce:	920c      	str	r2, [sp, #48]	; 0x30
    12d0:	4630      	mov	r0, r6
    12d2:	4a29      	ldr	r2, [pc, #164]	; (1378 <storeData(short)+0x24c>)
    12d4:	f001 f898 	bl	2408 <ExFatFile::open(ExFatVolume*, char const*, int)>
    12d8:	2800      	cmp	r0, #0
    12da:	f47f af7c 	bne.w	11d6 <storeData(short)+0xaa>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    12de:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    12e2:	b37a      	cbz	r2, 1344 <storeData(short)+0x218>
    12e4:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12e6:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    12ea:	2301      	movs	r3, #1
    12ec:	4630      	mov	r0, r6
    12ee:	4a22      	ldr	r2, [pc, #136]	; (1378 <storeData(short)+0x24c>)
    12f0:	9400      	str	r4, [sp, #0]
    12f2:	f002 f8a7 	bl	3444 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    12f6:	2800      	cmp	r0, #0
    12f8:	f47f af6d 	bne.w	11d6 <storeData(short)+0xaa>
    12fc:	4823      	ldr	r0, [pc, #140]	; (138c <storeData(short)+0x260>)
    12fe:	4926      	ldr	r1, [pc, #152]	; (1398 <storeData(short)+0x26c>)
    1300:	f7ff fdfe 	bl	f00 <Print::println(char const*) [clone .isra.0]>
    1304:	f04f 30ff 	mov.w	r0, #4294967295
    1308:	e72b      	b.n	1162 <storeData(short)+0x36>
    130a:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    130e:	b128      	cbz	r0, 131c <storeData(short)+0x1f0>
    1310:	4919      	ldr	r1, [pc, #100]	; (1378 <storeData(short)+0x24c>)
    1312:	f001 fef1 	bl	30f8 <ExFatVolume::chdir(char const*)>
    1316:	2800      	cmp	r0, #0
    1318:	f47f af68 	bne.w	11ec <storeData(short)+0xc0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    131c:	481b      	ldr	r0, [pc, #108]	; (138c <storeData(short)+0x260>)
    131e:	491f      	ldr	r1, [pc, #124]	; (139c <storeData(short)+0x270>)
    1320:	f7ff fdee 	bl	f00 <Print::println(char const*) [clone .isra.0]>
    1324:	f04f 30ff 	mov.w	r0, #4294967295
    1328:	e71b      	b.n	1162 <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
    132a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    132c:	2800      	cmp	r0, #0
    132e:	f43f af18 	beq.w	1162 <storeData(short)+0x36>
           m_xFile ? m_xFile->sync() : false;
    1332:	f001 f957 	bl	25e4 <ExFatFile::sync()>
    1336:	e796      	b.n	1266 <storeData(short)+0x13a>
  bool isOpen() const {return m_fFile || m_xFile;}
    1338:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    133a:	2800      	cmp	r0, #0
    133c:	d080      	beq.n	1240 <storeData(short)+0x114>
           m_xFile ? m_xFile->sync() : false;
    133e:	f001 f951 	bl	25e4 <ExFatFile::sync()>
    1342:	e709      	b.n	1158 <storeData(short)+0x2c>
    1344:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1348:	2900      	cmp	r1, #0
    134a:	d0d7      	beq.n	12fc <storeData(short)+0x1d0>
    134c:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    134e:	2301      	movs	r3, #1
    1350:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1354:	4630      	mov	r0, r6
    1356:	4a08      	ldr	r2, [pc, #32]	; (1378 <storeData(short)+0x24c>)
    1358:	f001 f9fc 	bl	2754 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    135c:	2800      	cmp	r0, #0
    135e:	d0cd      	beq.n	12fc <storeData(short)+0x1d0>
    1360:	e739      	b.n	11d6 <storeData(short)+0xaa>
    1362:	bf00      	nop
    1364:	200216fc 	.word	0x200216fc
    1368:	2002170c 	.word	0x2002170c
    136c:	2000cbbc 	.word	0x2000cbbc
    1370:	200206d0 	.word	0x200206d0
    1374:	200216d0 	.word	0x200216d0
    1378:	2001fbfc 	.word	0x2001fbfc
    137c:	20022094 	.word	0x20022094
    1380:	2001fe4c 	.word	0x2001fe4c
    1384:	20000984 	.word	0x20000984
    1388:	200005e8 	.word	0x200005e8
    138c:	200088c4 	.word	0x200088c4
    1390:	200005fc 	.word	0x200005fc
    1394:	200086b8 	.word	0x200086b8
    1398:	200005d0 	.word	0x200005d0
    139c:	200005dc 	.word	0x200005dc

000013a0 <saveData(short)>:
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    13a0:	1c43      	adds	r3, r0, #1
{
    13a2:	b570      	push	{r4, r5, r6, lr}
    if(status==STOPPED) 
    13a4:	d031      	beq.n	140a <saveData(short)+0x6a>
    { pullData(diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }
    if(status<CLOSED) return status; // we are stopped: don't do anything
    13a6:	2800      	cmp	r0, #0
    13a8:	4605      	mov	r5, r0
    13aa:	db2c      	blt.n	1406 <saveData(short)+0x66>
  uint32_t tx=rtc_get();
    13ac:	f007 f882 	bl	84b4 <rtc_get>
  tx = tx % t_acq;
    13b0:	4b21      	ldr	r3, [pc, #132]	; (1438 <saveData(short)+0x98>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    13b2:	2d01      	cmp	r5, #1
  tx = tx % t_acq;
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	fbb0 f2f3 	udiv	r2, r0, r3
    13ba:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    13be:	4b1f      	ldr	r3, [pc, #124]	; (143c <saveData(short)+0x9c>)
    13c0:	dd05      	ble.n	13ce <saveData(short)+0x2e>
    13c2:	681a      	ldr	r2, [r3, #0]
    13c4:	b11a      	cbz	r2, 13ce <saveData(short)+0x2e>
    13c6:	681a      	ldr	r2, [r3, #0]
    13c8:	4290      	cmp	r0, r2
    13ca:	bf38      	it	cc
    13cc:	2503      	movcc	r5, #3
  tx_=tx;
    13ce:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    13d0:	f000 f884 	bl	14dc <getDataCount()>
    13d4:	2807      	cmp	r0, #7
    13d6:	d916      	bls.n	1406 <saveData(short)+0x66>
    13d8:	4c19      	ldr	r4, [pc, #100]	; (1440 <saveData(short)+0xa0>)
    13da:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
    13de:	4620      	mov	r0, r4
    13e0:	f504 7400 	add.w	r4, r4, #512	; 0x200
    13e4:	f000 f8c4 	bl	1570 <pullData(unsigned long*)>
    13e8:	42b4      	cmp	r4, r6
    13ea:	d1f8      	bne.n	13de <saveData(short)+0x3e>
    13ec:	4a15      	ldr	r2, [pc, #84]	; (1444 <saveData(short)+0xa4>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    13ee:	2300      	movs	r3, #0
    13f0:	4815      	ldr	r0, [pc, #84]	; (1448 <saveData(short)+0xa8>)
    13f2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    13fa:	3301      	adds	r3, #1
    13fc:	2b08      	cmp	r3, #8
    13fe:	d1f8      	bne.n	13f2 <saveData(short)+0x52>
      if(haveStore)
    1400:	4b12      	ldr	r3, [pc, #72]	; (144c <saveData(short)+0xac>)
    1402:	681b      	ldr	r3, [r3, #0]
    1404:	b993      	cbnz	r3, 142c <saveData(short)+0x8c>
        status=storeData(status);
    }
    return status;
}
    1406:	4628      	mov	r0, r5
    1408:	bd70      	pop	{r4, r5, r6, pc}
    { pullData(diskBuffer);
    140a:	480d      	ldr	r0, [pc, #52]	; (1440 <saveData(short)+0xa0>)
    140c:	f000 f8b0 	bl	1570 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1410:	4a0c      	ldr	r2, [pc, #48]	; (1444 <saveData(short)+0xa4>)
    1412:	2300      	movs	r3, #0
    1414:	480c      	ldr	r0, [pc, #48]	; (1448 <saveData(short)+0xa8>)
    1416:	f852 1f04 	ldr.w	r1, [r2, #4]!
    141a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    141e:	3301      	adds	r3, #1
    1420:	2b08      	cmp	r3, #8
    1422:	d1f8      	bne.n	1416 <saveData(short)+0x76>
    1424:	f04f 35ff 	mov.w	r5, #4294967295
}
    1428:	4628      	mov	r0, r5
    142a:	bd70      	pop	{r4, r5, r6, pc}
        status=storeData(status);
    142c:	4628      	mov	r0, r5
}
    142e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        status=storeData(status);
    1432:	f7ff be7b 	b.w	112c <storeData(short)>
    1436:	bf00      	nop
    1438:	20008ea0 	.word	0x20008ea0
    143c:	20020180 	.word	0x20020180
    1440:	200206d0 	.word	0x200206d0
    1444:	200206cc 	.word	0x200206cc
    1448:	20021f54 	.word	0x20021f54
    144c:	2002174c 	.word	0x2002174c

00001450 <_GLOBAL__sub_I_t_acq>:
  FsVolume() {}
    1450:	4819      	ldr	r0, [pc, #100]	; (14b8 <_GLOBAL__sub_I_t_acq+0x68>)
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1452:	4b1a      	ldr	r3, [pc, #104]	; (14bc <_GLOBAL__sub_I_t_acq+0x6c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1454:	491a      	ldr	r1, [pc, #104]	; (14c0 <_GLOBAL__sub_I_t_acq+0x70>)
SdFs sd;
    1456:	4a1b      	ldr	r2, [pc, #108]	; (14c4 <_GLOBAL__sub_I_t_acq+0x74>)
}
    1458:	b510      	push	{r4, lr}
    145a:	f8c0 34a4 	str.w	r3, [r0, #1188]	; 0x4a4
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    145e:	2329      	movs	r3, #41	; 0x29
    1460:	2400      	movs	r4, #0
    1462:	f8c0 1490 	str.w	r1, [r0, #1168]	; 0x490
    1466:	f880 34ad 	strb.w	r3, [r0, #1197]	; 0x4ad
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    146a:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    146c:	4b16      	ldr	r3, [pc, #88]	; (14c8 <_GLOBAL__sub_I_t_acq+0x78>)
    146e:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    1472:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    1476:	f8c0 448c 	str.w	r4, [r0, #1164]	; 0x48c
  SdioConfig() {}
    147a:	f8a0 4498 	strh.w	r4, [r0, #1176]	; 0x498
  SharedSpiCard() {}
    147e:	f880 44b1 	strb.w	r4, [r0, #1201]	; 0x4b1
  DedicatedSpiCard() {}
    1482:	f880 44b8 	strb.w	r4, [r0, #1208]	; 0x4b8
    1486:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    148a:	f880 44c8 	strb.w	r4, [r0, #1224]	; 0x4c8
SdFs sd;
    148e:	490f      	ldr	r1, [pc, #60]	; (14cc <_GLOBAL__sub_I_t_acq+0x7c>)
    1490:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    1494:	f009 f91a 	bl	a6cc <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    1498:	480d      	ldr	r0, [pc, #52]	; (14d0 <_GLOBAL__sub_I_t_acq+0x80>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    149a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    149e:	4b0d      	ldr	r3, [pc, #52]	; (14d4 <_GLOBAL__sub_I_t_acq+0x84>)
    14a0:	7304      	strb	r4, [r0, #12]
FsFile file;
    14a2:	4a08      	ldr	r2, [pc, #32]	; (14c4 <_GLOBAL__sub_I_t_acq+0x74>)
    14a4:	6003      	str	r3, [r0, #0]
    14a6:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() {}
    14aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    14ae:	490a      	ldr	r1, [pc, #40]	; (14d8 <_GLOBAL__sub_I_t_acq+0x88>)
}
    14b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    14b4:	f009 b90a 	b.w	a6cc <__aeabi_atexit>
    14b8:	20022094 	.word	0x20022094
    14bc:	003d0900 	.word	0x003d0900
    14c0:	20000ac4 	.word	0x20000ac4
    14c4:	200088f0 	.word	0x200088f0
    14c8:	200009d8 	.word	0x200009d8
    14cc:	00000ded 	.word	0x00000ded
    14d0:	200216fc 	.word	0x200216fc
    14d4:	20000a70 	.word	0x20000a70
    14d8:	00000df1 	.word	0x00000df1

000014dc <getDataCount()>:
  volatile int busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    14dc:	4a04      	ldr	r2, [pc, #16]	; (14f0 <getDataCount()+0x14>)
    14de:	4b05      	ldr	r3, [pc, #20]	; (14f4 <getDataCount()+0x18>)
    14e0:	6810      	ldr	r0, [r2, #0]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	1ac0      	subs	r0, r0, r3
    14e6:	bf48      	it	mi
    14e8:	3080      	addmi	r0, #128	; 0x80
    14ea:	b280      	uxth	r0, r0
    14ec:	4770      	bx	lr
    14ee:	bf00      	nop
    14f0:	20022570 	.word	0x20022570
    14f4:	20021750 	.word	0x20021750

000014f8 <pushData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    14f8:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    14fa:	4c19      	ldr	r4, [pc, #100]	; (1560 <pushData(unsigned long*)+0x68>)
    14fc:	4a19      	ldr	r2, [pc, #100]	; (1564 <pushData(unsigned long*)+0x6c>)
    14fe:	6823      	ldr	r3, [r4, #0]
    1500:	6811      	ldr	r1, [r2, #0]
    1502:	3301      	adds	r3, #1
    1504:	425a      	negs	r2, r3
    1506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    150a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    150e:	bf58      	it	pl
    1510:	4253      	negpl	r3, r2
    1512:	428b      	cmp	r3, r1
    1514:	d020      	beq.n	1558 <pushData(unsigned long*)+0x60>
    1516:	4e14      	ldr	r6, [pc, #80]	; (1568 <pushData(unsigned long*)+0x70>)
    while(busy); busy=1;
    1518:	6833      	ldr	r3, [r6, #0]
    151a:	2b00      	cmp	r3, #0
    151c:	d1fc      	bne.n	1518 <pushData(unsigned long*)+0x20>
    151e:	2201      	movs	r2, #1
    1520:	1f01      	subs	r1, r0, #4
    1522:	4d12      	ldr	r5, [pc, #72]	; (156c <pushData(unsigned long*)+0x74>)
    1524:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    1526:	6822      	ldr	r2, [r4, #0]
    1528:	f851 0f04 	ldr.w	r0, [r1, #4]!
    152c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    1530:	3301      	adds	r3, #1
    1532:	2b80      	cmp	r3, #128	; 0x80
    1534:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    1538:	d1f5      	bne.n	1526 <pushData(unsigned long*)+0x2e>
    tail = (tail+1)%MAXBUF;
    153a:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1; // signal success.
    153c:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    153e:	3301      	adds	r3, #1
    1540:	425a      	negs	r2, r3
    1542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1546:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    154a:	bf58      	it	pl
    154c:	4253      	negpl	r3, r2
    busy=0;
    154e:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    1550:	6023      	str	r3, [r4, #0]
    busy=0;
    1552:	6032      	str	r2, [r6, #0]
  }
    1554:	bc70      	pop	{r4, r5, r6}
    1556:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    1558:	2000      	movs	r0, #0
  }
    155a:	bc70      	pop	{r4, r5, r6}
    155c:	4770      	bx	lr
    155e:	bf00      	nop
    1560:	20022570 	.word	0x20022570
    1564:	20021750 	.word	0x20021750
    1568:	200206cc 	.word	0x200206cc
    156c:	2000d1c0 	.word	0x2000d1c0

00001570 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    1570:	4b15      	ldr	r3, [pc, #84]	; (15c8 <pullData(unsigned long*)+0x58>)
  {
    1572:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    1574:	4c15      	ldr	r4, [pc, #84]	; (15cc <pullData(unsigned long*)+0x5c>)
    1576:	6822      	ldr	r2, [r4, #0]
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	429a      	cmp	r2, r3
    157c:	d020      	beq.n	15c0 <pullData(unsigned long*)+0x50>
    157e:	4d14      	ldr	r5, [pc, #80]	; (15d0 <pullData(unsigned long*)+0x60>)
    while(busy); busy=1;
    1580:	682b      	ldr	r3, [r5, #0]
    1582:	2b00      	cmp	r3, #0
    1584:	d1fc      	bne.n	1580 <pullData(unsigned long*)+0x10>
    1586:	2201      	movs	r2, #1
    1588:	1f01      	subs	r1, r0, #4
    158a:	4812      	ldr	r0, [pc, #72]	; (15d4 <pullData(unsigned long*)+0x64>)
    158c:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    158e:	6822      	ldr	r2, [r4, #0]
    1590:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    1594:	3301      	adds	r3, #1
    1596:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    159a:	2b80      	cmp	r3, #128	; 0x80
    159c:	f841 2f04 	str.w	r2, [r1, #4]!
    15a0:	d1f5      	bne.n	158e <pullData(unsigned long*)+0x1e>
    head = (head+1)%MAXBUF;
    15a2:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1;
    15a4:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    15a6:	3301      	adds	r3, #1
    15a8:	425a      	negs	r2, r3
    15aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    15ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    15b2:	bf58      	it	pl
    15b4:	4253      	negpl	r3, r2
    busy=0;
    15b6:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    15b8:	6023      	str	r3, [r4, #0]
    busy=0;
    15ba:	602a      	str	r2, [r5, #0]
  }
    15bc:	bc30      	pop	{r4, r5}
    15be:	4770      	bx	lr
    if ( head==tail ) return 0;
    15c0:	2000      	movs	r0, #0
  }
    15c2:	bc30      	pop	{r4, r5}
    15c4:	4770      	bx	lr
    15c6:	bf00      	nop
    15c8:	20022570 	.word	0x20022570
    15cc:	20021750 	.word	0x20021750
    15d0:	200206cc 	.word	0x200206cc
    15d4:	2000d1c0 	.word	0x2000d1c0

000015d8 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    15d8:	4a54      	ldr	r2, [pc, #336]	; (172c <time2date(unsigned long, datetime_t*)+0x154>)
  {
    15da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    15de:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15e2:	f240 196d 	movw	r9, #365	; 0x16d
    15e6:	4e52      	ldr	r6, [pc, #328]	; (1730 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    15e8:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15ea:	4f52      	ldr	r7, [pc, #328]	; (1734 <time2date(unsigned long, datetime_t*)+0x15c>)
    15ec:	f8df 8158 	ldr.w	r8, [pc, #344]	; 1748 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    15f0:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    15f4:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    15f8:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    15fa:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    15fe:	4c4e      	ldr	r4, [pc, #312]	; (1738 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    1600:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    1604:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    1608:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    160c:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    160e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1612:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1614:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    1618:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    161c:	4b47      	ldr	r3, [pc, #284]	; (173c <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    161e:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1622:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1626:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    1628:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    162a:	1ae2      	subs	r2, r4, r3
    162c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    1630:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    1632:	089b      	lsrs	r3, r3, #2
    1634:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1638:	1ae4      	subs	r4, r4, r3
    163a:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    163c:	b2c3      	uxtb	r3, r0
    163e:	f240 1c6d 	movw	ip, #365	; 0x16d
    1642:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    1646:	f013 0403 	ands.w	r4, r3, #3
    164a:	fb06 f503 	mul.w	r5, r6, r3
    164e:	d108      	bne.n	1662 <time2date(unsigned long, datetime_t*)+0x8a>
    1650:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    1654:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    1658:	d303      	bcc.n	1662 <time2date(unsigned long, datetime_t*)+0x8a>
    165a:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    165e:	bf38      	it	cc
    1660:	46cc      	movcc	ip, r9
    1662:	4462      	add	r2, ip
    1664:	3001      	adds	r0, #1
    1666:	4596      	cmp	lr, r2
    1668:	d2e8      	bcs.n	163c <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    166a:	4d35      	ldr	r5, [pc, #212]	; (1740 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    166c:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    166e:	fba5 0503 	umull	r0, r5, r5, r3
    1672:	b3a4      	cbz	r4, 16de <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1674:	096e      	lsrs	r6, r5, #5
    1676:	2764      	movs	r7, #100	; 0x64
    1678:	f44f 70c8 	mov.w	r0, #400	; 0x190
    167c:	09ed      	lsrs	r5, r5, #7
    167e:	fb07 3616 	mls	r6, r7, r6, r3
    1682:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1686:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    168a:	ebae 0e02 	sub.w	lr, lr, r2
    168e:	2300      	movs	r3, #0
    1690:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    1692:	4f2c      	ldr	r7, [pc, #176]	; (1744 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    1694:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    1696:	e00a      	b.n	16ae <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    1698:	f813 c007 	ldrb.w	ip, [r3, r7]
    169c:	4584      	cmp	ip, r0
    169e:	d837      	bhi.n	1710 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    16a0:	2a0c      	cmp	r2, #12
        time -= monthLength;
    16a2:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    16a6:	d012      	beq.n	16ce <time2date(unsigned long, datetime_t*)+0xf6>
    16a8:	3201      	adds	r2, #1
    16aa:	3301      	adds	r3, #1
    16ac:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    16ae:	2b01      	cmp	r3, #1
    16b0:	fa5f fe83 	uxtb.w	lr, r3
    16b4:	d1f0      	bne.n	1698 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    16b6:	b91c      	cbnz	r4, 16c0 <time2date(unsigned long, datetime_t*)+0xe8>
    16b8:	b1f6      	cbz	r6, 16f8 <time2date(unsigned long, datetime_t*)+0x120>
    16ba:	f04f 0c1d 	mov.w	ip, #29
    16be:	e001      	b.n	16c4 <time2date(unsigned long, datetime_t*)+0xec>
    16c0:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    16c4:	4560      	cmp	r0, ip
    16c6:	d32d      	bcc.n	1724 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    16c8:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    16cc:	e7ec      	b.n	16a8 <time2date(unsigned long, datetime_t*)+0xd0>
    16ce:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    16d2:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    16d4:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    16d8:	70c8      	strb	r0, [r1, #3]
  }
    16da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    16de:	2064      	movs	r0, #100	; 0x64
    16e0:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    16e2:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    16e4:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    16e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    16ec:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    16f0:	b14e      	cbz	r6, 1706 <time2date(unsigned long, datetime_t*)+0x12e>
    16f2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    16f6:	e7c8      	b.n	168a <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    16f8:	2d00      	cmp	r5, #0
    16fa:	bf14      	ite	ne
    16fc:	f04f 0c1c 	movne.w	ip, #28
    1700:	f04f 0c1d 	moveq.w	ip, #29
    1704:	e7de      	b.n	16c4 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    1706:	2d00      	cmp	r5, #0
    1708:	d1bd      	bne.n	1686 <time2date(unsigned long, datetime_t*)+0xae>
    170a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    170e:	e7bc      	b.n	168a <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    1710:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    1714:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    1716:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    171a:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    171c:	f881 e002 	strb.w	lr, [r1, #2]
  }
    1720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    1724:	f04f 0e02 	mov.w	lr, #2
    1728:	e7d3      	b.n	16d2 <time2date(unsigned long, datetime_t*)+0xfa>
    172a:	bf00      	nop
    172c:	88888889 	.word	0x88888889
    1730:	c28f5c29 	.word	0xc28f5c29
    1734:	028f5c28 	.word	0x028f5c28
    1738:	aaaaaaab 	.word	0xaaaaaaab
    173c:	24924925 	.word	0x24924925
    1740:	51eb851f 	.word	0x51eb851f
    1744:	2000080c 	.word	0x2000080c
    1748:	00a3d70a 	.word	0x00a3d70a

0000174c <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    174c:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    174e:	4a35      	ldr	r2, [pc, #212]	; (1824 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    1750:	314e      	adds	r1, #78	; 0x4e
    1752:	b2c9      	uxtb	r1, r1
  {
    1754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    1758:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    175c:	b1e1      	cbz	r1, 1798 <date2time(datetime_t*)+0x4c>
    175e:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    1762:	f240 73b3 	movw	r3, #1971	; 0x7b3
    1766:	4d30      	ldr	r5, [pc, #192]	; (1828 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    1768:	4e30      	ldr	r6, [pc, #192]	; (182c <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    176a:	4f31      	ldr	r7, [pc, #196]	; (1830 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    176c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 183c <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    1770:	4563      	cmp	r3, ip
    1772:	fb05 f403 	mul.w	r4, r5, r3
    1776:	d00f      	beq.n	1798 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    1778:	f013 0f03 	tst.w	r3, #3
    177c:	f103 0301 	add.w	r3, r3, #1
    1780:	d1f6      	bne.n	1770 <date2time(datetime_t*)+0x24>
    1782:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    1786:	d302      	bcc.n	178e <date2time(datetime_t*)+0x42>
    1788:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    178c:	d3f0      	bcc.n	1770 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    178e:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1790:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    1792:	fb05 f403 	mul.w	r4, r5, r3
    1796:	d1ef      	bne.n	1778 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    1798:	f990 e002 	ldrsb.w	lr, [r0, #2]
    179c:	f1be 0f01 	cmp.w	lr, #1
    17a0:	dd29      	ble.n	17f6 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    17a2:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    17a6:	4e23      	ldr	r6, [pc, #140]	; (1834 <date2time(datetime_t*)+0xe8>)
    17a8:	2564      	movs	r5, #100	; 0x64
    17aa:	f44f 74c8 	mov.w	r4, #400	; 0x190
    17ae:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    17b2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1840 <date2time(datetime_t*)+0xf4>
    17b6:	4920      	ldr	r1, [pc, #128]	; (1838 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    17b8:	0977      	lsrs	r7, r6, #5
    17ba:	09f6      	lsrs	r6, r6, #7
    17bc:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    17c0:	4d1b      	ldr	r5, [pc, #108]	; (1830 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    17c2:	fb04 3616 	mls	r6, r4, r6, r3
    17c6:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    17ca:	2301      	movs	r3, #1
    17cc:	e007      	b.n	17de <date2time(datetime_t*)+0x92>
    17ce:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    17d0:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    17d4:	3101      	adds	r1, #1
    17d6:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    17d8:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    17dc:	d00b      	beq.n	17f6 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    17de:	2b02      	cmp	r3, #2
    17e0:	d1f5      	bne.n	17ce <date2time(datetime_t*)+0x82>
    17e2:	2c00      	cmp	r4, #0
    17e4:	d1f3      	bne.n	17ce <date2time(datetime_t*)+0x82>
    17e6:	b90f      	cbnz	r7, 17ec <date2time(datetime_t*)+0xa0>
    17e8:	2e00      	cmp	r6, #0
    17ea:	d1f0      	bne.n	17ce <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    17ec:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    17ee:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    17f0:	3101      	adds	r1, #1
    17f2:	4573      	cmp	r3, lr
    17f4:	d1f3      	bne.n	17de <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    17f6:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    17fa:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    17fe:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    1802:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    1806:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    180a:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    180c:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    1810:	f990 1003 	ldrsb.w	r1, [r0, #3]
    1814:	4c06      	ldr	r4, [pc, #24]	; (1830 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    1816:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    1818:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    181a:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    181e:	4410      	add	r0, r2
    1820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1824:	01e13380 	.word	0x01e13380
    1828:	c28f5c29 	.word	0xc28f5c29
    182c:	028f5c28 	.word	0x028f5c28
    1830:	00015180 	.word	0x00015180
    1834:	51eb851f 	.word	0x51eb851f
    1838:	2000080c 	.word	0x2000080c
    183c:	00a3d70a 	.word	0x00a3d70a
    1840:	00263b80 	.word	0x00263b80

00001844 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    1844:	2001      	movs	r0, #1
    1846:	4770      	bx	lr

00001848 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    1848:	b500      	push	{lr}
    184a:	b083      	sub	sp, #12
    184c:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    184e:	f006 fe31 	bl	84b4 <rtc_get>
    1852:	9901      	ldr	r1, [sp, #4]
    1854:	f7ff fec0 	bl	15d8 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    1858:	2001      	movs	r0, #1
    185a:	b003      	add	sp, #12
    185c:	f85d fb04 	ldr.w	pc, [sp], #4

00001860 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	b082      	sub	sp, #8
    1864:	4614      	mov	r4, r2
    1866:	460d      	mov	r5, r1
    1868:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    186a:	f006 fe23 	bl	84b4 <rtc_get>
    186e:	4669      	mov	r1, sp
    1870:	f7ff feb2 	bl	15d8 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    1874:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    1878:	4608      	mov	r0, r1
    t.month=month;
    187a:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    187e:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    1882:	f7ff ff63 	bl	174c <date2time(datetime_t*)>
    1886:	f006 fe27 	bl	84d8 <rtc_set>
    rtc_set_datetime(&t);
  }
    188a:	b002      	add	sp, #8
    188c:	bd70      	pop	{r4, r5, r6, pc}
    188e:	bf00      	nop

00001890 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	b082      	sub	sp, #8
    1894:	4614      	mov	r4, r2
    1896:	460d      	mov	r5, r1
    1898:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    189a:	f006 fe0b 	bl	84b4 <rtc_get>
    189e:	4669      	mov	r1, sp
    18a0:	f7ff fe9a 	bl	15d8 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    18a4:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    18a8:	4608      	mov	r0, r1
    t.min=minutes;
    18aa:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    18ae:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    18b2:	f7ff ff4b 	bl	174c <date2time(datetime_t*)>
    18b6:	f006 fe0f 	bl	84d8 <rtc_set>
    rtc_set_datetime(&t);
  }
    18ba:	b002      	add	sp, #8
    18bc:	bd70      	pop	{r4, r5, r6, pc}
    18be:	bf00      	nop

000018c0 <menuGetInt16(short*) [clone .isra.0]>:
#include "Arduino.h"
#include "mConfig.h"
#include "menu.h"
#include "mRTC.h"

static int menuGetInt16(int16_t *val)
    18c0:	b510      	push	{r4, lr}
    18c2:	4604      	mov	r4, r0
    18c4:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    18c6:	f008 fc7f 	bl	a1c8 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    18ca:	2800      	cmp	r0, #0
    18cc:	d0fb      	beq.n	18c6 <menuGetInt16(short*) [clone .isra.0]+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
    18ce:	210d      	movs	r1, #13
    18d0:	aa02      	add	r2, sp, #8
    18d2:	2328      	movs	r3, #40	; 0x28
    18d4:	480d      	ldr	r0, [pc, #52]	; (190c <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    18d6:	f006 fa79 	bl	7dcc <Stream::readBytesUntil(char, char*, unsigned int)>
    18da:	4603      	mov	r3, r0
  buffer[count]=0;
    18dc:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    18de:	a802      	add	r0, sp, #8
    18e0:	3330      	adds	r3, #48	; 0x30
    18e2:	446b      	add	r3, sp
    18e4:	f803 2c28 	strb.w	r2, [r3, #-40]
    18e8:	f00b faea 	bl	cec0 <strlen>
    18ec:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    18ee:	a802      	add	r0, sp, #8
    18f0:	f008 fcd4 	bl	a29c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    18f4:	4805      	ldr	r0, [pc, #20]	; (190c <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    18f6:	f006 f975 	bl	7be4 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    18fa:	aa01      	add	r2, sp, #4
    18fc:	4904      	ldr	r1, [pc, #16]	; (1910 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    18fe:	a802      	add	r0, sp, #8
    1900:	f00a fe1a 	bl	c538 <sscanf>
    1904:	9b01      	ldr	r3, [sp, #4]
    1906:	8023      	strh	r3, [r4, #0]
  return 1;
}
    1908:	b00c      	add	sp, #48	; 0x30
    190a:	bd10      	pop	{r4, pc}
    190c:	200088c4 	.word	0x200088c4
    1910:	20000734 	.word	0x20000734

00001914 <menuGet3Int(int*, int*, int*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
  return 1;
}

static int menuGet3Int(int *val1, int *val2, int *val3)
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	4606      	mov	r6, r0
    1918:	b090      	sub	sp, #64	; 0x40
    191a:	460c      	mov	r4, r1
    191c:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    191e:	f008 fc53 	bl	a1c8 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1922:	2800      	cmp	r0, #0
    1924:	d0fb      	beq.n	191e <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
    1926:	aa06      	add	r2, sp, #24
    1928:	210d      	movs	r1, #13
    192a:	2328      	movs	r3, #40	; 0x28
    192c:	4810      	ldr	r0, [pc, #64]	; (1970 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    192e:	f006 fa4d 	bl	7dcc <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1932:	f100 0340 	add.w	r3, r0, #64	; 0x40
    1936:	eb0d 0003 	add.w	r0, sp, r3
    193a:	2300      	movs	r3, #0
    193c:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    1940:	a806      	add	r0, sp, #24
    1942:	f00b fabd 	bl	cec0 <strlen>
    1946:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1948:	a806      	add	r0, sp, #24
    194a:	f008 fca7 	bl	a29c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    194e:	4808      	ldr	r0, [pc, #32]	; (1970 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    1950:	f006 f948 	bl	7be4 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1954:	f10d 0317 	add.w	r3, sp, #23
    1958:	4632      	mov	r2, r6
    195a:	4906      	ldr	r1, [pc, #24]	; (1974 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    195c:	a806      	add	r0, sp, #24
    195e:	9400      	str	r4, [sp, #0]
    1960:	e9cd 3501 	strd	r3, r5, [sp, #4]
    1964:	f10d 0316 	add.w	r3, sp, #22
    1968:	f00a fde6 	bl	c538 <sscanf>
}
    196c:	b010      	add	sp, #64	; 0x40
    196e:	bd70      	pop	{r4, r5, r6, pc}
    1970:	200088c4 	.word	0x200088c4
    1974:	2000072c 	.word	0x2000072c

00001978 <menu1()>:

void menu1(void)
{   // have ':'
    1978:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    197a:	f008 fc25 	bl	a1c8 <usb_serial_available>
    while(!Serial.available()) ;
    197e:	2800      	cmp	r0, #0
    1980:	d0fb      	beq.n	197a <menu1()+0x2>
    char ch=Serial.read();
    if(ch=='x') return;
}
    1982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    1986:	f008 bc63 	b.w	a250 <usb_serial_getchar>
    198a:	bf00      	nop

0000198c <menu2()>:

void menu2(void)
{   // have '?'
    198c:	b510      	push	{r4, lr}
    198e:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1990:	f008 fc1a 	bl	a1c8 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    1994:	2800      	cmp	r0, #0
    1996:	d0fb      	beq.n	1990 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1998:	f008 fc5a 	bl	a250 <usb_serial_getchar>
    char ch=Serial.read();
    199c:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    199e:	2870      	cmp	r0, #112	; 0x70
    19a0:	d017      	beq.n	19d2 <menu2()+0x46>
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    19a2:	2864      	cmp	r0, #100	; 0x64
    19a4:	d056      	beq.n	1a54 <menu2()+0xc8>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    19a6:	3863      	subs	r0, #99	; 0x63
    19a8:	2811      	cmp	r0, #17
    19aa:	d80c      	bhi.n	19c6 <menu2()+0x3a>
    19ac:	e8df f000 	tbb	[pc, r0]
    19b0:	700b0b44 	.word	0x700b0b44
    19b4:	0b0b0b0b 	.word	0x0b0b0b0b
    19b8:	0b0b0b0b 	.word	0x0b0b0b0b
    19bc:	0b0b0b0b 	.word	0x0b0b0b0b
    19c0:	617d      	.short	0x617d
    19c2:	f008 fc45 	bl	a250 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    19c6:	f008 fbff 	bl	a1c8 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    19ca:	2800      	cmp	r0, #0
    19cc:	d1f9      	bne.n	19c2 <menu2()+0x36>

}
    19ce:	b008      	add	sp, #32
    19d0:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    19d2:	a806      	add	r0, sp, #24
    19d4:	f7ff ff38 	bl	1848 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    19d8:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    19dc:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    19e0:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    19e4:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    19e8:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    19ec:	9000      	str	r0, [sp, #0]
    19ee:	4832      	ldr	r0, [pc, #200]	; (1ab8 <menu2()+0x12c>)
    19f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
    19f4:	e9cd 1401 	strd	r1, r4, [sp, #4]
    19f8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    19fc:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1a00:	492e      	ldr	r1, [pc, #184]	; (1abc <menu2()+0x130>)
    1a02:	f006 f90b 	bl	7c1c <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a06:	210c      	movs	r1, #12
    1a08:	482d      	ldr	r0, [pc, #180]	; (1ac0 <menu2()+0x134>)
    1a0a:	f008 fc47 	bl	a29c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1a0e:	4b2d      	ldr	r3, [pc, #180]	; (1ac4 <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1a10:	4829      	ldr	r0, [pc, #164]	; (1ab8 <menu2()+0x12c>)
    1a12:	6819      	ldr	r1, [r3, #0]
    1a14:	f006 f8da 	bl	7bcc <Print::print(long)>
    1a18:	4827      	ldr	r0, [pc, #156]	; (1ab8 <menu2()+0x12c>)
    1a1a:	f006 f8e3 	bl	7be4 <Print::println()>
    1a1e:	210c      	movs	r1, #12
    1a20:	4829      	ldr	r0, [pc, #164]	; (1ac8 <menu2()+0x13c>)
    1a22:	f008 fc3b 	bl	a29c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1a26:	4b29      	ldr	r3, [pc, #164]	; (1acc <menu2()+0x140>)
	size_t print(int n)				{ return print((long)n); }
    1a28:	4823      	ldr	r0, [pc, #140]	; (1ab8 <menu2()+0x12c>)
    1a2a:	f9b3 1000 	ldrsh.w	r1, [r3]
    1a2e:	f006 f8cd 	bl	7bcc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a32:	4821      	ldr	r0, [pc, #132]	; (1ab8 <menu2()+0x12c>)
    1a34:	f006 f8d6 	bl	7be4 <Print::println()>
    1a38:	210c      	movs	r1, #12
    1a3a:	4825      	ldr	r0, [pc, #148]	; (1ad0 <menu2()+0x144>)
    1a3c:	f008 fc2e 	bl	a29c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    1a40:	4b24      	ldr	r3, [pc, #144]	; (1ad4 <menu2()+0x148>)
	size_t print(int n)				{ return print((long)n); }
    1a42:	f9b3 1000 	ldrsh.w	r1, [r3]
    1a46:	481c      	ldr	r0, [pc, #112]	; (1ab8 <menu2()+0x12c>)
    1a48:	f006 f8c0 	bl	7bcc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a4c:	481a      	ldr	r0, [pc, #104]	; (1ab8 <menu2()+0x12c>)
    1a4e:	f006 f8c9 	bl	7be4 <Print::println()>
    1a52:	e7b8      	b.n	19c6 <menu2()+0x3a>
      rtc_get_datetime(&t);
    1a54:	a806      	add	r0, sp, #24
    1a56:	f7ff fef7 	bl	1848 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    1a5a:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1a5e:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1a62:	9000      	str	r0, [sp, #0]
    1a64:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1a68:	491b      	ldr	r1, [pc, #108]	; (1ad8 <menu2()+0x14c>)
    1a6a:	4813      	ldr	r0, [pc, #76]	; (1ab8 <menu2()+0x12c>)
    1a6c:	f006 f8d6 	bl	7c1c <Print::printf(char const*, ...)>
    1a70:	e7a9      	b.n	19c6 <menu2()+0x3a>
      rtc_get_datetime(&t);
    1a72:	a806      	add	r0, sp, #24
    1a74:	f7ff fee8 	bl	1848 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1a78:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1a7c:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1a80:	9000      	str	r0, [sp, #0]
    1a82:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1a86:	4915      	ldr	r1, [pc, #84]	; (1adc <menu2()+0x150>)
    1a88:	480b      	ldr	r0, [pc, #44]	; (1ab8 <menu2()+0x12c>)
    1a8a:	f006 f8c7 	bl	7c1c <Print::printf(char const*, ...)>
    1a8e:	e79a      	b.n	19c6 <menu2()+0x3a>
    1a90:	210c      	movs	r1, #12
    1a92:	480b      	ldr	r0, [pc, #44]	; (1ac0 <menu2()+0x134>)
    1a94:	f008 fc02 	bl	a29c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1a98:	4b0a      	ldr	r3, [pc, #40]	; (1ac4 <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1a9a:	4807      	ldr	r0, [pc, #28]	; (1ab8 <menu2()+0x12c>)
    1a9c:	6819      	ldr	r1, [r3, #0]
    1a9e:	f006 f895 	bl	7bcc <Print::print(long)>
    1aa2:	4805      	ldr	r0, [pc, #20]	; (1ab8 <menu2()+0x12c>)
    1aa4:	f006 f89e 	bl	7be4 <Print::println()>
    1aa8:	e78d      	b.n	19c6 <menu2()+0x3a>
    1aaa:	210c      	movs	r1, #12
    1aac:	4806      	ldr	r0, [pc, #24]	; (1ac8 <menu2()+0x13c>)
    1aae:	f008 fbf5 	bl	a29c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <menu2()+0x140>)
    1ab4:	e7c5      	b.n	1a42 <menu2()+0xb6>
    1ab6:	bf00      	nop
    1ab8:	200088c4 	.word	0x200088c4
    1abc:	20000538 	.word	0x20000538
    1ac0:	2000055c 	.word	0x2000055c
    1ac4:	20008e94 	.word	0x20008e94
    1ac8:	2000056c 	.word	0x2000056c
    1acc:	20008ec4 	.word	0x20008ec4
    1ad0:	2000057c 	.word	0x2000057c
    1ad4:	20008ec2 	.word	0x20008ec2
    1ad8:	2000058c 	.word	0x2000058c
    1adc:	200005a8 	.word	0x200005a8

00001ae0 <menu3()>:

void menu3(void)
{   // have '!'
    1ae0:	b510      	push	{r4, lr}
    1ae2:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1ae4:	f008 fb70 	bl	a1c8 <usb_serial_available>

    while(!Serial.available()) ;
    1ae8:	2800      	cmp	r0, #0
    1aea:	d0fb      	beq.n	1ae4 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1aec:	f008 fbb0 	bl	a250 <usb_serial_getchar>
    char ch=Serial.read();
    1af0:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1af2:	2864      	cmp	r0, #100	; 0x64
    1af4:	d00d      	beq.n	1b12 <menu3()+0x32>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1af6:	3863      	subs	r0, #99	; 0x63
    1af8:	2811      	cmp	r0, #17
    1afa:	d814      	bhi.n	1b26 <menu3()+0x46>
    1afc:	e8df f000 	tbb	[pc, r0]
    1b00:	15131346 	.word	0x15131346
    1b04:	13131313 	.word	0x13131313
    1b08:	13131313 	.word	0x13131313
    1b0c:	13131313 	.word	0x13131313
    1b10:	3a2f      	.short	0x3a2f
      menuGet3Int(&year,&month,&day);
    1b12:	aa02      	add	r2, sp, #8
    1b14:	a901      	add	r1, sp, #4
    1b16:	4668      	mov	r0, sp
    1b18:	f7ff fefc 	bl	1914 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1b1c:	9800      	ldr	r0, [sp, #0]
    1b1e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1b22:	f7ff fe9d 	bl	1860 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1b26:	b00c      	add	sp, #48	; 0x30
    1b28:	bd10      	pop	{r4, pc}
        virtual int available() { return usb_serial_available(); }
    1b2a:	f008 fb4d 	bl	a1c8 <usb_serial_available>
  while(!Serial.available()) continue;
    1b2e:	2800      	cmp	r0, #0
    1b30:	d0fb      	beq.n	1b2a <menu3()+0x4a>
  int count = Serial.readBytesUntil('\r',buffer,40);
    1b32:	aa02      	add	r2, sp, #8
    1b34:	2328      	movs	r3, #40	; 0x28
    1b36:	210d      	movs	r1, #13
    1b38:	4817      	ldr	r0, [pc, #92]	; (1b98 <menu3()+0xb8>)
    1b3a:	f006 f947 	bl	7dcc <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1b3e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    1b42:	2400      	movs	r4, #0
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1b44:	aa01      	add	r2, sp, #4
  buffer[count]=0;
    1b46:	446b      	add	r3, sp
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1b48:	4914      	ldr	r1, [pc, #80]	; (1b9c <menu3()+0xbc>)
    1b4a:	a802      	add	r0, sp, #8
  buffer[count]=0;
    1b4c:	f803 4c28 	strb.w	r4, [r3, #-40]
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1b50:	f00a fcf2 	bl	c538 <sscanf>
    1b54:	4b12      	ldr	r3, [pc, #72]	; (1ba0 <menu3()+0xc0>)
    1b56:	9a01      	ldr	r2, [sp, #4]
    1b58:	601a      	str	r2, [r3, #0]
}
    1b5a:	b00c      	add	sp, #48	; 0x30
    1b5c:	bd10      	pop	{r4, pc}
      menuGetInt16(&shift); if(shift<0) shift=0;
    1b5e:	4c11      	ldr	r4, [pc, #68]	; (1ba4 <menu3()+0xc4>)
    1b60:	4620      	mov	r0, r4
    1b62:	f7ff fead 	bl	18c0 <menuGetInt16(short*) [clone .isra.0]>
    1b66:	f9b4 3000 	ldrsh.w	r3, [r4]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	dadb      	bge.n	1b26 <menu3()+0x46>
    1b6e:	2300      	movs	r3, #0
    1b70:	8023      	strh	r3, [r4, #0]
    1b72:	e7d8      	b.n	1b26 <menu3()+0x46>
      menuGet3Int(&hour,&minutes,&seconds);
    1b74:	aa02      	add	r2, sp, #8
    1b76:	a901      	add	r1, sp, #4
    1b78:	4668      	mov	r0, sp
    1b7a:	f7ff fecb 	bl	1914 <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1b7e:	9800      	ldr	r0, [sp, #0]
    1b80:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1b84:	f7ff fe84 	bl	1890 <rtcSetTime(int, int, int)>
}
    1b88:	b00c      	add	sp, #48	; 0x30
    1b8a:	bd10      	pop	{r4, pc}
      menuGetInt16(&proc);
    1b8c:	4806      	ldr	r0, [pc, #24]	; (1ba8 <menu3()+0xc8>)
}
    1b8e:	b00c      	add	sp, #48	; 0x30
    1b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1b94:	f7ff be94 	b.w	18c0 <menuGetInt16(short*) [clone .isra.0]>
    1b98:	200088c4 	.word	0x200088c4
    1b9c:	20000734 	.word	0x20000734
    1ba0:	20008e94 	.word	0x20008e94
    1ba4:	20008ec4 	.word	0x20008ec4
    1ba8:	20008ec2 	.word	0x20008ec2

00001bac <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1bac:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1bae:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1bb2:	b084      	sub	sp, #16
    1bb4:	468c      	mov	ip, r1
    1bb6:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1bb8:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1bba:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1bbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1bc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    1bc4:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1bc8:	4629      	mov	r1, r5
    1bca:	6a20      	ldr	r0, [r4, #32]
    1bcc:	f001 f934 	bl	2e38 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1bd0:	2801      	cmp	r0, #1
    1bd2:	d106      	bne.n	1be2 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1bd4:	4632      	mov	r2, r6
    1bd6:	4629      	mov	r1, r5
    1bd8:	6a20      	ldr	r0, [r4, #32]
    1bda:	f001 f911 	bl	2e00 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1bde:	b004      	add	sp, #16
    1be0:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1be2:	2000      	movs	r0, #0
}
    1be4:	b004      	add	sp, #16
    1be6:	bd70      	pop	{r4, r5, r6, pc}

00001be8 <ExFatFile::close()>:
bool ExFatFile::close() {
    1be8:	b510      	push	{r4, lr}
    1bea:	4604      	mov	r4, r0
  bool rtn = sync();
    1bec:	f000 fcfa 	bl	25e4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1bf0:	2300      	movs	r3, #0
    1bf2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1bf6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1bfa:	bd10      	pop	{r4, pc}

00001bfc <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1bfc:	b538      	push	{r3, r4, r5, lr}
    1bfe:	460d      	mov	r5, r1
  if (isOpen()) {
    1c00:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1c04:	b109      	cbz	r1, 1c0a <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    1c06:	2000      	movs	r0, #0
}
    1c08:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1c0a:	2238      	movs	r2, #56	; 0x38
    1c0c:	4604      	mov	r4, r0
    1c0e:	f00a fe19 	bl	c844 <memset>
  m_flags = FILE_FLAG_READ;
    1c12:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1c14:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1c16:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1c18:	4618      	mov	r0, r3
    1c1a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1c1e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1c22:	bd38      	pop	{r3, r4, r5, pc}

00001c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    1c24:	b4f0      	push	{r4, r5, r6, r7}
    1c26:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1c28:	7809      	ldrb	r1, [r1, #0]
    1c2a:	2920      	cmp	r1, #32
    1c2c:	d103      	bne.n	1c36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1c2e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1c32:	2c20      	cmp	r4, #32
    1c34:	d0fb      	beq.n	1c2e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1c36:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1c38:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1c3a:	782c      	ldrb	r4, [r5, #0]
    1c3c:	2c2f      	cmp	r4, #47	; 0x2f
    1c3e:	d011      	beq.n	1c64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1c40:	b184      	cbz	r4, 1c64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1c42:	1c6e      	adds	r6, r5, #1
    1c44:	2c3c      	cmp	r4, #60	; 0x3c
    1c46:	4f1d      	ldr	r7, [pc, #116]	; (1cbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    1c48:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1c4a:	d82a      	bhi.n	1ca2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1c4c:	2c21      	cmp	r4, #33	; 0x21
    1c4e:	d812      	bhi.n	1c76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1c50:	f104 3cff 	add.w	ip, r4, #4294967295
    1c54:	f1bc 0f1e 	cmp.w	ip, #30
    1c58:	d816      	bhi.n	1c88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    1c5a:	2000      	movs	r0, #0
    1c5c:	bcf0      	pop	{r4, r5, r6, r7}
    1c5e:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    1c60:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1c64:	2c20      	cmp	r4, #32
    1c66:	d0fb      	beq.n	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1c68:	2c2f      	cmp	r4, #47	; 0x2f
    1c6a:	d0f9      	beq.n	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1c6c:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1c6e:	4611      	mov	r1, r2
}
    1c70:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1c72:	f000 bfb3 	b.w	2bdc <ExFatFile::hashName(ExName_t*)>
    1c76:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1c7a:	fa5f fc8c 	uxtb.w	ip, ip
    1c7e:	fa27 fc0c 	lsr.w	ip, r7, ip
    1c82:	f01c 0f01 	tst.w	ip, #1
    1c86:	d1e8      	bne.n	1c5a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1c88:	2c2e      	cmp	r4, #46	; 0x2e
    1c8a:	d001      	beq.n	1c90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1c8c:	2c20      	cmp	r4, #32
    1c8e:	d10d      	bne.n	1cac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    1c90:	f816 4b01 	ldrb.w	r4, [r6], #1
    1c94:	2c00      	cmp	r4, #0
    1c96:	d0e5      	beq.n	1c64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1c98:	2c2f      	cmp	r4, #47	; 0x2f
    1c9a:	d0e3      	beq.n	1c64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1c9c:	2c3c      	cmp	r4, #60	; 0x3c
    1c9e:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1ca0:	d9d4      	bls.n	1c4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1ca2:	2c5c      	cmp	r4, #92	; 0x5c
    1ca4:	d0d9      	beq.n	1c5a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1ca6:	d903      	bls.n	1cb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    1ca8:	2c7c      	cmp	r4, #124	; 0x7c
    1caa:	d0d6      	beq.n	1c5a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1cac:	6096      	str	r6, [r2, #8]
    1cae:	e7ef      	b.n	1c90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1cb0:	3c3e      	subs	r4, #62	; 0x3e
    1cb2:	2c01      	cmp	r4, #1
    1cb4:	d8fa      	bhi.n	1cac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    1cb6:	2000      	movs	r0, #0
    1cb8:	bcf0      	pop	{r4, r5, r6, r7}
    1cba:	4770      	bx	lr
    1cbc:	05002101 	.word	0x05002101

00001cc0 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    1cc4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1cc8:	b083      	sub	sp, #12
    1cca:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1ccc:	07dc      	lsls	r4, r3, #31
    1cce:	d574      	bpl.n	1dba <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1cd0:	0658      	lsls	r0, r3, #25
    1cd2:	460f      	mov	r7, r1
    1cd4:	4690      	mov	r8, r2
    1cd6:	f140 80b0 	bpl.w	1e3a <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1cda:	e9d5 2300 	ldrd	r2, r3, [r5]
    1cde:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1ce2:	eb18 0402 	adds.w	r4, r8, r2
    1ce6:	f143 0300 	adc.w	r3, r3, #0
    1cea:	42a1      	cmp	r1, r4
    1cec:	eb70 0303 	sbcs.w	r3, r0, r3
    1cf0:	f0c0 80a9 	bcc.w	1e46 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1cf4:	f1b8 0f00 	cmp.w	r8, #0
    1cf8:	d05b      	beq.n	1db2 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1cfa:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1cfc:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1d00:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1d04:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1d08:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1d0c:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1d0e:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1d12:	2c00      	cmp	r4, #0
    1d14:	d170      	bne.n	1df8 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1d16:	4313      	orrs	r3, r2
    1d18:	d170      	bne.n	1dfc <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1d1a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1d1e:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1d20:	bf4c      	ite	mi
    1d22:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1d26:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1d28:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1d2a:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1d2e:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1d30:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1d34:	0a63      	lsrs	r3, r4, #9
    1d36:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1d38:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1d3c:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    1d3e:	f1bb 0f00 	cmp.w	fp, #0
    1d42:	d145      	bne.n	1dd0 <ExFatFile::read(void*, unsigned int)+0x110>
    1d44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1d48:	d342      	bcc.n	1dd0 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    1d4a:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    1d4e:	4291      	cmp	r1, r2
    1d50:	d03e      	beq.n	1dd0 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    1d52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1d56:	d358      	bcc.n	1e0a <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    1d58:	f04f 0b01 	mov.w	fp, #1
    1d5c:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1d60:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1d64:	0a73      	lsrs	r3, r6, #9
    1d66:	459b      	cmp	fp, r3
    1d68:	bf28      	it	cs
    1d6a:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1d6c:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1d6e:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1d72:	d80a      	bhi.n	1d8a <ExFatFile::read(void*, unsigned int)+0xca>
    1d74:	eb01 030b 	add.w	r3, r1, fp
    1d78:	429a      	cmp	r2, r3
    1d7a:	d206      	bcs.n	1d8a <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1d7c:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1d80:	9101      	str	r1, [sp, #4]
    1d82:	f004 ff79 	bl	6c78 <FsCache::sync()>
    1d86:	9901      	ldr	r1, [sp, #4]
    1d88:	b1b8      	cbz	r0, 1dba <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1d8a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1d8e:	465b      	mov	r3, fp
    1d90:	6802      	ldr	r2, [r0, #0]
    1d92:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1d96:	463a      	mov	r2, r7
    1d98:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1d9a:	b170      	cbz	r0, 1dba <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1d9c:	4623      	mov	r3, r4
    dst += n;
    1d9e:	4427      	add	r7, r4
    m_curPosition += n;
    1da0:	e9d5 1200 	ldrd	r1, r2, [r5]
    1da4:	185b      	adds	r3, r3, r1
    1da6:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1daa:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1dac:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1db0:	d1a8      	bne.n	1d04 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1db2:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    1db4:	b003      	add	sp, #12
    1db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1dba:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1dbe:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1dc2:	f043 0302 	orr.w	r3, r3, #2
    1dc6:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1dca:	b003      	add	sp, #12
    1dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1dd0:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1dd4:	2200      	movs	r2, #0
    1dd6:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1dda:	42b4      	cmp	r4, r6
    1ddc:	bf28      	it	cs
    1dde:	4634      	movcs	r4, r6
    1de0:	f004 ff76 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1de4:	2800      	cmp	r0, #0
    1de6:	d0e8      	beq.n	1dba <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1de8:	eb00 010b 	add.w	r1, r0, fp
    1dec:	4622      	mov	r2, r4
    1dee:	4638      	mov	r0, r7
    1df0:	f006 fa90 	bl	8314 <memcpy>
    m_curPosition += n;
    1df4:	4623      	mov	r3, r4
    1df6:	e7d2      	b.n	1d9e <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1df8:	69aa      	ldr	r2, [r5, #24]
    1dfa:	e796      	b.n	1d2a <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1dfc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1e00:	065b      	lsls	r3, r3, #25
    1e02:	d50e      	bpl.n	1e22 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1e04:	69aa      	ldr	r2, [r5, #24]
    1e06:	3201      	adds	r2, #1
    1e08:	e78e      	b.n	1d28 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1e0a:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1e0e:	463a      	mov	r2, r7
    1e10:	6803      	ldr	r3, [r0, #0]
    1e12:	691b      	ldr	r3, [r3, #16]
    1e14:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1e16:	2800      	cmp	r0, #0
    1e18:	d0cf      	beq.n	1dba <ExFatFile::read(void*, unsigned int)+0xfa>
    1e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1e1e:	461c      	mov	r4, r3
    1e20:	e7bd      	b.n	1d9e <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1e22:	464a      	mov	r2, r9
    1e24:	4650      	mov	r0, sl
    1e26:	69a9      	ldr	r1, [r5, #24]
    1e28:	f001 f848 	bl	2ebc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1e2c:	2800      	cmp	r0, #0
    1e2e:	dbc4      	blt.n	1dba <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1e30:	d00c      	beq.n	1e4c <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1e32:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1e36:	69aa      	ldr	r2, [r5, #24]
    1e38:	e777      	b.n	1d2a <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1e3a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1e3e:	0719      	lsls	r1, r3, #28
    1e40:	f57f af58 	bpl.w	1cf4 <ExFatFile::read(void*, unsigned int)+0x34>
    1e44:	e749      	b.n	1cda <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1e46:	eba1 0802 	sub.w	r8, r1, r2
    1e4a:	e753      	b.n	1cf4 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1e4c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1e50:	f013 0f50 	tst.w	r3, #80	; 0x50
    1e54:	d0b1      	beq.n	1dba <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1e56:	eba8 0806 	sub.w	r8, r8, r6
    1e5a:	4640      	mov	r0, r8
    1e5c:	e7aa      	b.n	1db4 <ExFatFile::read(void*, unsigned int)+0xf4>
    1e5e:	bf00      	nop

00001e60 <ExFatFile::peek()>:
int ExFatFile::peek() {
    1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e62:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1e64:	2201      	movs	r2, #1
    1e66:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    1e68:	6985      	ldr	r5, [r0, #24]
    1e6a:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    1e6e:	e9d0 6700 	ldrd	r6, r7, [r0]
    1e72:	f7ff ff25 	bl	1cc0 <ExFatFile::read(void*, unsigned int)>
    1e76:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    1e78:	61a5      	str	r5, [r4, #24]
    1e7a:	bf0c      	ite	eq
    1e7c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1e80:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    1e84:	e9c4 6700 	strd	r6, r7, [r4]
}
    1e88:	b003      	add	sp, #12
    1e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e8c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e90:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    1e92:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1e96:	b083      	sub	sp, #12
    1e98:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1e9a:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d051      	beq.n	1f46 <ExFatFile::seekSet(unsigned long long)+0xba>
    1ea2:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1ea4:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1ea8:	45bc      	cmp	ip, r7
    1eaa:	bf08      	it	eq
    1eac:	4291      	cmpeq	r1, r2
    1eae:	d05c      	beq.n	1f6a <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1eb0:	ea56 0207 	orrs.w	r2, r6, r7
    1eb4:	d04d      	beq.n	1f52 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1eb6:	071d      	lsls	r5, r3, #28
    1eb8:	d504      	bpl.n	1ec4 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1eba:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1ebe:	42b0      	cmp	r0, r6
    1ec0:	41ba      	sbcs	r2, r7
    1ec2:	d340      	bcc.n	1f46 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1ec4:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1ec8:	1e75      	subs	r5, r6, #1
    1eca:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1ece:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1ed0:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    1ed4:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    1ed8:	3209      	adds	r2, #9
    1eda:	b2d2      	uxtb	r2, r2
    1edc:	f1c2 0e20 	rsb	lr, r2, #32
    1ee0:	40d5      	lsrs	r5, r2
    1ee2:	f1a2 0920 	sub.w	r9, r2, #32
    1ee6:	fa00 fb0e 	lsl.w	fp, r0, lr
    1eea:	fa20 f009 	lsr.w	r0, r0, r9
    1eee:	ea45 050b 	orr.w	r5, r5, fp
    1ef2:	4305      	orrs	r5, r0
  if (isContiguous()) {
    1ef4:	9801      	ldr	r0, [sp, #4]
    1ef6:	0640      	lsls	r0, r0, #25
    1ef8:	d433      	bmi.n	1f62 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1efa:	1e48      	subs	r0, r1, #1
    1efc:	fa20 f202 	lsr.w	r2, r0, r2
    1f00:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    1f04:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1f08:	fa00 fe0e 	lsl.w	lr, r0, lr
    1f0c:	fa20 f009 	lsr.w	r0, r0, r9
    1f10:	ea42 020e 	orr.w	r2, r2, lr
    1f14:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    1f18:	d001      	beq.n	1f1e <ExFatFile::seekSet(unsigned long long)+0x92>
    1f1a:	4295      	cmp	r5, r2
    1f1c:	d229      	bcs.n	1f72 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1f1e:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1f20:	bf4c      	ite	mi
    1f22:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    1f26:	69e3      	ldrpl	r3, [r4, #28]
    1f28:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    1f2a:	f104 0918 	add.w	r9, r4, #24
    1f2e:	e006      	b.n	1f3e <ExFatFile::seekSet(unsigned long long)+0xb2>
    1f30:	69a1      	ldr	r1, [r4, #24]
    1f32:	3d01      	subs	r5, #1
    1f34:	6a20      	ldr	r0, [r4, #32]
    1f36:	f000 ffc1 	bl	2ebc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1f3a:	2800      	cmp	r0, #0
    1f3c:	dd03      	ble.n	1f46 <ExFatFile::seekSet(unsigned long long)+0xba>
    1f3e:	464a      	mov	r2, r9
  while (nNew--) {
    1f40:	2d00      	cmp	r5, #0
    1f42:	d1f5      	bne.n	1f30 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    1f44:	e007      	b.n	1f56 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    1f46:	2000      	movs	r0, #0
  m_curCluster = tmp;
    1f48:	f8c4 8018 	str.w	r8, [r4, #24]
}
    1f4c:	b003      	add	sp, #12
    1f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    1f52:	2300      	movs	r3, #0
    1f54:	6183      	str	r3, [r0, #24]
  return true;
    1f56:	2001      	movs	r0, #1
  m_curPosition = pos;
    1f58:	e9c4 6700 	strd	r6, r7, [r4]
}
    1f5c:	b003      	add	sp, #12
    1f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    1f62:	69e3      	ldr	r3, [r4, #28]
    1f64:	442b      	add	r3, r5
    1f66:	61a3      	str	r3, [r4, #24]
    goto done;
    1f68:	e7f5      	b.n	1f56 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    1f6a:	2001      	movs	r0, #1
}
    1f6c:	b003      	add	sp, #12
    1f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    1f72:	1aad      	subs	r5, r5, r2
    1f74:	e7d9      	b.n	1f2a <ExFatFile::seekSet(unsigned long long)+0x9e>
    1f76:	bf00      	nop

00001f78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    1f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f7c:	4617      	mov	r7, r2
    1f7e:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    1f82:	b08f      	sub	sp, #60	; 0x3c
    1f84:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    1f86:	2a00      	cmp	r2, #0
    1f88:	f040 80d7 	bne.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    1f8c:	468b      	mov	fp, r1
    1f8e:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    1f92:	f011 0f50 	tst.w	r1, #80	; 0x50
    1f96:	f000 80d0 	beq.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    1f9a:	f003 0103 	and.w	r1, r3, #3
    1f9e:	469a      	mov	sl, r3
    1fa0:	2903      	cmp	r1, #3
    1fa2:	f000 80ca 	beq.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    1fa6:	3101      	adds	r1, #1
    1fa8:	f003 0008 	and.w	r0, r3, #8
    1fac:	ea41 0300 	orr.w	r3, r1, r0
    1fb0:	9302      	str	r3, [sp, #8]
  if (fname) {
    1fb2:	2f00      	cmp	r7, #0
    1fb4:	f000 80cb 	beq.w	214e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1fb8:	6939      	ldr	r1, [r7, #16]
    1fba:	f101 080e 	add.w	r8, r1, #14
    1fbe:	49b6      	ldr	r1, [pc, #728]	; (2298 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    1fc0:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    1fc4:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1fc8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    1fcc:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1fce:	f108 0802 	add.w	r8, r8, #2
    1fd2:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    1fd6:	d005      	beq.n	1fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    1fd8:	2000      	movs	r0, #0
    1fda:	2100      	movs	r1, #0
    m_curCluster = 0;
    1fdc:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    1fe0:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    1fe4:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1fe6:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    1fe8:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fee:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    1ff0:	2220      	movs	r2, #32
    1ff2:	a906      	add	r1, sp, #24
    1ff4:	4658      	mov	r0, fp
    1ff6:	f7ff fe63 	bl	1cc0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1ffa:	b300      	cbz	r0, 203e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    1ffc:	2820      	cmp	r0, #32
    1ffe:	f040 809c 	bne.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    2002:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    2006:	f89d 3018 	ldrb.w	r3, [sp, #24]
    200a:	2a00      	cmp	r2, #0
    200c:	f2c0 80a2 	blt.w	2154 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    2010:	b934      	cbnz	r4, 2020 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2012:	f8db 2000 	ldr.w	r2, [fp]
    2016:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    201a:	f8db 2018 	ldr.w	r2, [fp, #24]
    201e:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    2020:	4544      	cmp	r4, r8
    2022:	d201      	bcs.n	2028 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    2024:	3401      	adds	r4, #1
    2026:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    2028:	2b00      	cmp	r3, #0
    202a:	f000 8113 	beq.w	2254 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    202e:	2220      	movs	r2, #32
    2030:	a906      	add	r1, sp, #24
    2032:	4658      	mov	r0, fp
      inSet = false;
    2034:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    2036:	f7ff fe43 	bl	1cc0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    203a:	2800      	cmp	r0, #0
    203c:	d1de      	bne.n	1ffc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    203e:	f41a 7f00 	tst.w	sl, #512	; 0x200
    2042:	d07a      	beq.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2044:	9b02      	ldr	r3, [sp, #8]
    2046:	079b      	lsls	r3, r3, #30
    2048:	d577      	bpl.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    204a:	2f00      	cmp	r7, #0
    204c:	d075      	beq.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    204e:	4544      	cmp	r4, r8
    2050:	d217      	bcs.n	2082 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    2052:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    2056:	2220      	movs	r2, #32
    2058:	a906      	add	r1, sp, #24
    205a:	4658      	mov	r0, fp
    205c:	f7ff fe30 	bl	1cc0 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    2060:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    2062:	2800      	cmp	r0, #0
    2064:	d061      	beq.n	212a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    2066:	2820      	cmp	r0, #32
    2068:	d167      	bne.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    206a:	b92c      	cbnz	r4, 2078 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    206c:	f8db 2000 	ldr.w	r2, [fp]
    2070:	f8db a018 	ldr.w	sl, [fp, #24]
    2074:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    2078:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    207a:	45a0      	cmp	r8, r4
    207c:	d8eb      	bhi.n	2056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    207e:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    2082:	2238      	movs	r2, #56	; 0x38
    2084:	2100      	movs	r1, #0
    2086:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2088:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    208c:	f00a fbda 	bl	c844 <memset>
  ExFatVolume* volume() const {return m_vol;}
    2090:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    2094:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    2098:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    209a:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    209c:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    209e:	2600      	movs	r6, #0
  m_dirPos = freePos;
    20a0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    20a4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    20a8:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    20aa:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    20ae:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    20b0:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    20b2:	f1b8 0f00 	cmp.w	r8, #0
    20b6:	d033      	beq.n	2120 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    20b8:	f108 39ff 	add.w	r9, r8, #4294967295
    20bc:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    20be:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 229c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    20c2:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    20c6:	2201      	movs	r2, #1
    20c8:	4659      	mov	r1, fp
    20ca:	4628      	mov	r0, r5
    20cc:	f7ff fd6e 	bl	1bac <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    20d0:	4604      	mov	r4, r0
    20d2:	b390      	cbz	r0, 213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    20d4:	f990 2000 	ldrsb.w	r2, [r0]
    20d8:	2a00      	cmp	r2, #0
    20da:	db2e      	blt.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    20dc:	2220      	movs	r2, #32
    20de:	2100      	movs	r1, #0
    20e0:	f00a fbb0 	bl	c844 <memset>
    if (i == 0) {
    20e4:	2e00      	cmp	r6, #0
    20e6:	f000 80bc 	beq.w	2262 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    20ea:	f1bb 0f01 	cmp.w	fp, #1
    20ee:	f000 80d7 	beq.w	22a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    20f2:	23c1      	movs	r3, #193	; 0xc1
    20f4:	46a3      	mov	fp, r4
    20f6:	341e      	adds	r4, #30
    20f8:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    20fc:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    20fe:	4638      	mov	r0, r7
    2100:	b91b      	cbnz	r3, 210a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    2102:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    2106:	429a      	cmp	r2, r3
    2108:	d005      	beq.n	2116 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    210a:	f004 fe09 	bl	6d20 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    210e:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    2112:	45a3      	cmp	fp, r4
    2114:	d1f2      	bne.n	20fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    2116:	3601      	adds	r6, #1
    2118:	fa5f fb86 	uxtb.w	fp, r6
    211c:	45d8      	cmp	r8, fp
    211e:	d8d2      	bhi.n	20c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    2120:	4628      	mov	r0, r5
    2122:	f000 fa5f 	bl	25e4 <ExFatFile::sync()>
    2126:	4606      	mov	r6, r0
    2128:	e00d      	b.n	2146 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    212a:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    212c:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    2130:	f000 fa88 	bl	2644 <ExFatFile::addDirCluster()>
    2134:	2800      	cmp	r0, #0
    2136:	f040 8091 	bne.w	225c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    213a:	2300      	movs	r3, #0
  return false;
    213c:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    213e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    2142:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    2146:	4630      	mov	r0, r6
    2148:	b00f      	add	sp, #60	; 0x3c
    214a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    214e:	f04f 0803 	mov.w	r8, #3
    2152:	e747      	b.n	1fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2154:	bb56      	cbnz	r6, 21ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    2156:	4544      	cmp	r4, r8
    2158:	bf38      	it	cc
    215a:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    215c:	2b85      	cmp	r3, #133	; 0x85
    215e:	f47f af47 	bne.w	1ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    2162:	4631      	mov	r1, r6
    2164:	2238      	movs	r2, #56	; 0x38
    2166:	4628      	mov	r0, r5
      inSet = true;
    2168:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    216a:	f00a fb6b 	bl	c844 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    216e:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    2172:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2176:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    217a:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    217e:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    2180:	bf58      	it	pl
    2182:	f043 0308 	orrpl.w	r3, r3, #8
    2186:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    218a:	f8db 3000 	ldr.w	r3, [fp]
    218e:	f8db 2020 	ldr.w	r2, [fp, #32]
    2192:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    2194:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    2196:	f8db 2018 	ldr.w	r2, [fp, #24]
    219a:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    219e:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    21a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    21a6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    21aa:	e721      	b.n	1ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    21ac:	2bc0      	cmp	r3, #192	; 0xc0
    21ae:	d028      	beq.n	2202 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    21b0:	2bc1      	cmp	r3, #193	; 0xc1
    21b2:	f47f af3c 	bne.w	202e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    21b6:	463a      	mov	r2, r7
    21b8:	a906      	add	r1, sp, #24
    21ba:	4628      	mov	r0, r5
    21bc:	f000 fce8 	bl	2b90 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    21c0:	b1e8      	cbz	r0, 21fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    21c2:	89bb      	ldrh	r3, [r7, #12]
    21c4:	b9db      	cbnz	r3, 21fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    21c6:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    21ca:	429a      	cmp	r2, r3
    21cc:	d117      	bne.n	21fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    21ce:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    21d2:	d1b2      	bne.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    21d4:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    21d8:	d170      	bne.n	22bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    21da:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    21de:	0798      	lsls	r0, r3, #30
    21e0:	d46c      	bmi.n	22bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    21e2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    21e6:	d1a8      	bne.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    21e8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    21ec:	d0ab      	beq.n	2146 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    21ee:	4628      	mov	r0, r5
    21f0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    21f4:	f7ff fe4a 	bl	1e8c <ExFatFile::seekSet(unsigned long long)>
    21f8:	2800      	cmp	r0, #0
    21fa:	d1a4      	bne.n	2146 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    21fc:	e79d      	b.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    21fe:	4606      	mov	r6, r0
    2200:	e6f6      	b.n	1ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    2202:	9b02      	ldr	r3, [sp, #8]
    2204:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    2208:	f89d 3019 	ldrb.w	r3, [sp, #25]
    220c:	079b      	lsls	r3, r3, #30
    220e:	d502      	bpl.n	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2210:	9b03      	ldr	r3, [sp, #12]
    2212:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    2216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2218:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    221a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    221e:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    2222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2226:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    222a:	2f00      	cmp	r7, #0
    222c:	d0cf      	beq.n	21ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    222e:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    2232:	693a      	ldr	r2, [r7, #16]
    2234:	81bb      	strh	r3, [r7, #12]
    next = begin;
    2236:	683b      	ldr	r3, [r7, #0]
    2238:	607b      	str	r3, [r7, #4]
    223a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    223e:	429a      	cmp	r2, r3
    2240:	f47f aef5 	bne.w	202e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    2244:	8abe      	ldrh	r6, [r7, #20]
    2246:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    224a:	1af6      	subs	r6, r6, r3
    224c:	fab6 f686 	clz	r6, r6
    2250:	0976      	lsrs	r6, r6, #5
    2252:	e6cd      	b.n	1ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2254:	2f00      	cmp	r7, #0
    2256:	f47f aef2 	bne.w	203e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    225a:	e76e      	b.n	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    225c:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    2260:	e70b      	b.n	207a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    2262:	2385      	movs	r3, #133	; 0x85
    2264:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    2266:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    226a:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    226e:	f8da 3000 	ldr.w	r3, [sl]
    2272:	2b00      	cmp	r3, #0
    2274:	d046      	beq.n	2304 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    2276:	f10d 0213 	add.w	r2, sp, #19
    227a:	f10d 0116 	add.w	r1, sp, #22
    227e:	a805      	add	r0, sp, #20
    2280:	4798      	blx	r3
    2282:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    2286:	8163      	strh	r3, [r4, #10]
    2288:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    228c:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    228e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2292:	7523      	strb	r3, [r4, #20]
    2294:	e73f      	b.n	2116 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    2296:	bf00      	nop
    2298:	88888889 	.word	0x88888889
    229c:	200200a4 	.word	0x200200a4
      dirStream->type = EXFAT_TYPE_STREAM;
    22a0:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    22a2:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    22a6:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    22a8:	9b02      	ldr	r3, [sp, #8]
    22aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    22ae:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    22b2:	693b      	ldr	r3, [r7, #16]
    22b4:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    22b6:	8abb      	ldrh	r3, [r7, #20]
    22b8:	80a3      	strh	r3, [r4, #4]
}
    22ba:	e72c      	b.n	2116 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    22bc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    22c0:	06d9      	lsls	r1, r3, #27
    22c2:	f53f af3a 	bmi.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    22c6:	f013 0101 	ands.w	r1, r3, #1
    22ca:	f47f af36 	bne.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    22ce:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    22d2:	d089      	beq.n	21e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    22d4:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    22d8:	0792      	lsls	r2, r2, #30
    22da:	f57f af2e 	bpl.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    22de:	2b00      	cmp	r3, #0
    22e0:	f43f af2b 	beq.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    22e4:	e9d5 3200 	ldrd	r3, r2, [r5]
    22e8:	4313      	orrs	r3, r2
    22ea:	d004      	beq.n	22f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    22ec:	2200      	movs	r2, #0
    22ee:	2300      	movs	r3, #0
    m_curCluster = 0;
    22f0:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    22f2:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    22f6:	4628      	mov	r0, r5
    22f8:	f000 fa98 	bl	282c <ExFatFile::truncate()>
    22fc:	2800      	cmp	r0, #0
    22fe:	f43f af1c 	beq.w	213a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2302:	e720      	b.n	2146 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2304:	f245 6321 	movw	r3, #22049	; 0x5621
    2308:	8163      	strh	r3, [r4, #10]
    230a:	81e3      	strh	r3, [r4, #14]
    230c:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    230e:	e702      	b.n	2116 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

00002310 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    2310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    2314:	2500      	movs	r5, #0
    2316:	b097      	sub	sp, #92	; 0x5c
    2318:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    231a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    231e:	9201      	str	r2, [sp, #4]
    2320:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    2322:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    2326:	2b00      	cmp	r3, #0
    2328:	d13e      	bne.n	23a8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    232a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    232e:	460f      	mov	r7, r1
    2330:	f013 0f50 	tst.w	r3, #80	; 0x50
    2334:	d038      	beq.n	23a8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    2336:	7813      	ldrb	r3, [r2, #0]
    2338:	4604      	mov	r4, r0
    233a:	4616      	mov	r6, r2
    233c:	2b2f      	cmp	r3, #47	; 0x2f
    233e:	d037      	beq.n	23b0 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2340:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    2344:	ab01      	add	r3, sp, #4
    2346:	aa02      	add	r2, sp, #8
    2348:	4631      	mov	r1, r6
    234a:	4620      	mov	r0, r4
    234c:	f7ff fc6a 	bl	1c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2350:	b350      	cbz	r0, 23a8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    2352:	9e01      	ldr	r6, [sp, #4]
    2354:	7833      	ldrb	r3, [r6, #0]
    2356:	2b00      	cmp	r3, #0
    2358:	d03e      	beq.n	23d8 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    235a:	2300      	movs	r3, #0
    235c:	aa02      	add	r2, sp, #8
    235e:	4639      	mov	r1, r7
    2360:	4620      	mov	r0, r4
    2362:	f7ff fe09 	bl	1f78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2366:	b1f8      	cbz	r0, 23a8 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    2368:	46a4      	mov	ip, r4
    236a:	ad08      	add	r5, sp, #32
    236c:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2370:	f8dc 0000 	ldr.w	r0, [ip]
    2374:	f10c 0c10 	add.w	ip, ip, #16
    2378:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    237c:	46ae      	mov	lr, r5
    237e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2382:	3510      	adds	r5, #16
    2384:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2388:	45bc      	cmp	ip, r7
    238a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    238e:	d1ef      	bne.n	2370 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    2390:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    2394:	af08      	add	r7, sp, #32
    tmpDir = *this;
    2396:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    2398:	4620      	mov	r0, r4
    239a:	f000 f923 	bl	25e4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    239e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    23a2:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    23a6:	e7cd      	b.n	2344 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    23a8:	2000      	movs	r0, #0
}
    23aa:	b017      	add	sp, #92	; 0x5c
    23ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    23b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    23b4:	292f      	cmp	r1, #47	; 0x2f
    23b6:	d0fb      	beq.n	23b0 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    23b8:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    23ba:	b9b1      	cbnz	r1, 23ea <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    23bc:	2238      	movs	r2, #56	; 0x38
    23be:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    23c0:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    23c2:	f00a fa3f 	bl	c844 <memset>
  m_flags = FILE_FLAG_READ;
    23c6:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    23c8:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    23ca:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    23cc:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    23ce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    23d2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    23d6:	e7e8      	b.n	23aa <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    23d8:	464b      	mov	r3, r9
    23da:	aa02      	add	r2, sp, #8
    23dc:	4639      	mov	r1, r7
    23de:	4620      	mov	r0, r4
    23e0:	f7ff fdca 	bl	1f78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    23e4:	b017      	add	sp, #92	; 0x5c
    23e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    23ea:	2238      	movs	r2, #56	; 0x38
    23ec:	2100      	movs	r1, #0
    23ee:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    23f0:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    23f2:	f00a fa27 	bl	c844 <memset>
  m_flags = FILE_FLAG_READ;
    23f6:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    23f8:	af08      	add	r7, sp, #32
  m_vol = vol;
    23fa:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    23fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    2400:	2340      	movs	r3, #64	; 0x40
    2402:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    2406:	e79b      	b.n	2340 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

00002408 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    2408:	b119      	cbz	r1, 2412 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    240a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    240e:	f7ff bf7f 	b.w	2310 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    2412:	4608      	mov	r0, r1
    2414:	4770      	bx	lr
    2416:	bf00      	nop

00002418 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    2418:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    241a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    241c:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    241e:	6a00      	ldr	r0, [r0, #32]
    2420:	b101      	cbz	r1, 2424 <ExFatFile::addCluster()+0xc>
    2422:	3101      	adds	r1, #1
    2424:	2201      	movs	r2, #1
    2426:	f000 fc0f 	bl	2c48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    242a:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    242c:	4605      	mov	r5, r0
  if (find < 2) {
    242e:	d932      	bls.n	2496 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2430:	2301      	movs	r3, #1
    2432:	4601      	mov	r1, r0
    2434:	6a20      	ldr	r0, [r4, #32]
    2436:	461a      	mov	r2, r3
    2438:	f000 fc66 	bl	2d08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    243c:	4606      	mov	r6, r0
    243e:	b350      	cbz	r0, 2496 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    2440:	69a3      	ldr	r3, [r4, #24]
    2442:	b35b      	cbz	r3, 249c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2444:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    2448:	0651      	lsls	r1, r2, #25
    244a:	d512      	bpl.n	2472 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    244c:	1c59      	adds	r1, r3, #1
    244e:	42a9      	cmp	r1, r5
    2450:	d018      	beq.n	2484 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2456:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2458:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    245c:	e005      	b.n	246a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    245e:	6a20      	ldr	r0, [r4, #32]
    2460:	f000 fd4e 	bl	2f00 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2464:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    2466:	b1b0      	cbz	r0, 2496 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2468:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    246a:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    246c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    246e:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2470:	d3f5      	bcc.n	245e <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2472:	f04f 32ff 	mov.w	r2, #4294967295
    2476:	4629      	mov	r1, r5
    2478:	6a20      	ldr	r0, [r4, #32]
    247a:	f000 fd41 	bl	2f00 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    247e:	b150      	cbz	r0, 2496 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2480:	69a1      	ldr	r1, [r4, #24]
    2482:	b911      	cbnz	r1, 248a <ExFatFile::addCluster()+0x72>
}
    2484:	4630      	mov	r0, r6
  m_curCluster = find;
    2486:	61a5      	str	r5, [r4, #24]
}
    2488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    248a:	462a      	mov	r2, r5
    248c:	6a20      	ldr	r0, [r4, #32]
    248e:	f000 fd37 	bl	2f00 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2492:	2800      	cmp	r0, #0
    2494:	d1f6      	bne.n	2484 <ExFatFile::addCluster()+0x6c>
  return false;
    2496:	2600      	movs	r6, #0
}
    2498:	4630      	mov	r0, r6
    249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    249c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    24a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24a4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    24a8:	e7ec      	b.n	2484 <ExFatFile::addCluster()+0x6c>
    24aa:	bf00      	nop

000024ac <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    24ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24b0:	f04f 0800 	mov.w	r8, #0
    24b4:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    24b6:	4f4a      	ldr	r7, [pc, #296]	; (25e0 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    24b8:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    24ba:	4644      	mov	r4, r8
    24bc:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    24be:	2200      	movs	r2, #0
    24c0:	4630      	mov	r0, r6
    24c2:	f7ff fb73 	bl	1bac <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    24c6:	4605      	mov	r5, r0
    24c8:	b130      	cbz	r0, 24d8 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    24ca:	7801      	ldrb	r1, [r0, #0]
    24cc:	29c0      	cmp	r1, #192	; 0xc0
    24ce:	d069      	beq.n	25a4 <ExFatFile::syncDir()+0xf8>
    24d0:	29c1      	cmp	r1, #193	; 0xc1
    24d2:	d02b      	beq.n	252c <ExFatFile::syncDir()+0x80>
    24d4:	2985      	cmp	r1, #133	; 0x85
    24d6:	d009      	beq.n	24ec <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    24d8:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    24dc:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    24de:	f043 0301 	orr.w	r3, r3, #1
    24e2:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    24e6:	b002      	add	sp, #8
    24e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    24ec:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    24f0:	f003 0337 	and.w	r3, r3, #55	; 0x37
    24f4:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    24f6:	683b      	ldr	r3, [r7, #0]
    24f8:	b183      	cbz	r3, 251c <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    24fa:	f10d 0203 	add.w	r2, sp, #3
    24fe:	f10d 0106 	add.w	r1, sp, #6
    2502:	a801      	add	r0, sp, #4
    2504:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    2506:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    250a:	81ab      	strh	r3, [r5, #12]
    250c:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    250e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2512:	81eb      	strh	r3, [r5, #14]
    2514:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    2516:	f89d 3003 	ldrb.w	r3, [sp, #3]
    251a:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    251c:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    251e:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2522:	f043 0301 	orr.w	r3, r3, #1
    2526:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    252a:	7829      	ldrb	r1, [r5, #0]
    252c:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2530:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2532:	fab0 f080 	clz	r0, r0
    2536:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2538:	e001      	b.n	253e <ExFatFile::syncDir()+0x92>
    253a:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    253c:	5ca9      	ldrb	r1, [r5, r2]
    253e:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2540:	2a01      	cmp	r2, #1
    2542:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2546:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    254a:	fa11 f383 	uxtah	r3, r1, r3
    254e:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2550:	d101      	bne.n	2556 <ExFatFile::syncDir()+0xaa>
    2552:	2800      	cmp	r0, #0
    2554:	d1f1      	bne.n	253a <ExFatFile::syncDir()+0x8e>
    2556:	2a1f      	cmp	r2, #31
    2558:	d9f0      	bls.n	253c <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    255a:	f108 0801 	add.w	r8, r8, #1
    255e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    2562:	fa5f f188 	uxtb.w	r1, r8
    2566:	428b      	cmp	r3, r1
    2568:	d2a9      	bcs.n	24be <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    256a:	2201      	movs	r2, #1
    256c:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2570:	6a30      	ldr	r0, [r6, #32]
    2572:	f000 fc45 	bl	2e00 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2576:	2800      	cmp	r0, #0
    2578:	d0ae      	beq.n	24d8 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    257a:	6a35      	ldr	r5, [r6, #32]
    257c:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    257e:	4628      	mov	r0, r5
    2580:	f004 fb7a 	bl	6c78 <FsCache::sync()>
    2584:	2800      	cmp	r0, #0
    2586:	d0a7      	beq.n	24d8 <ExFatFile::syncDir()+0x2c>
    2588:	f505 7004 	add.w	r0, r5, #528	; 0x210
    258c:	f004 fb74 	bl	6c78 <FsCache::sync()>
    2590:	2800      	cmp	r0, #0
    2592:	d0a1      	beq.n	24d8 <ExFatFile::syncDir()+0x2c>
    2594:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    2598:	6803      	ldr	r3, [r0, #0]
    259a:	6a1b      	ldr	r3, [r3, #32]
    259c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    259e:	2800      	cmp	r0, #0
    25a0:	d1a1      	bne.n	24e6 <ExFatFile::syncDir()+0x3a>
    25a2:	e799      	b.n	24d8 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    25a4:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    25a8:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    25ac:	7843      	ldrb	r3, [r0, #1]
    25ae:	bf14      	ite	ne
    25b0:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    25b4:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    25b8:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    25ba:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    25be:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    25c2:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    25c6:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    25ca:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    25cc:	e9c5 0106 	strd	r0, r1, [r5, #24]
    25d0:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    25d4:	f043 0301 	orr.w	r3, r3, #1
    25d8:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    25dc:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    25de:	e7a5      	b.n	252c <ExFatFile::syncDir()+0x80>
    25e0:	200200a4 	.word	0x200200a4

000025e4 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    25e4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    25e6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    25ea:	b343      	cbz	r3, 263e <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    25ec:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    25f0:	4604      	mov	r4, r0
    25f2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    25f6:	2a00      	cmp	r2, #0
    25f8:	db0c      	blt.n	2614 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    25fa:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    25fc:	4628      	mov	r0, r5
    25fe:	f004 fb3b 	bl	6c78 <FsCache::sync()>
    2602:	b978      	cbnz	r0, 2624 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    2604:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    2608:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    260a:	f043 0301 	orr.w	r3, r3, #1
    260e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2612:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2618:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    261c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2620:	f7ff bf44 	b.w	24ac <ExFatFile::syncDir()>
    2624:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2628:	f004 fb26 	bl	6c78 <FsCache::sync()>
    262c:	2800      	cmp	r0, #0
    262e:	d0e9      	beq.n	2604 <ExFatFile::sync()+0x20>
    2630:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    2634:	6803      	ldr	r3, [r0, #0]
    2636:	6a1b      	ldr	r3, [r3, #32]
    2638:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    263a:	2800      	cmp	r0, #0
    263c:	d0e2      	beq.n	2604 <ExFatFile::sync()+0x20>
    return true;
    263e:	2001      	movs	r0, #1
}
    2640:	bd38      	pop	{r3, r4, r5, pc}
    2642:	bf00      	nop

00002644 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    2644:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2646:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    264a:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    264c:	065a      	lsls	r2, r3, #25
    264e:	d44c      	bmi.n	26ea <ExFatFile::addDirCluster()+0xa6>
    2650:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    2652:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2654:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    2658:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    265a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    265e:	d301      	bcc.n	2664 <ExFatFile::addDirCluster()+0x20>
}
    2660:	2000      	movs	r0, #0
    2662:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    2664:	4628      	mov	r0, r5
    2666:	f7ff fed7 	bl	2418 <ExFatFile::addCluster()>
    266a:	2800      	cmp	r0, #0
    266c:	d0f8      	beq.n	2660 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    266e:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2670:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    2672:	69ae      	ldr	r6, [r5, #24]
    2674:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    2678:	3e02      	subs	r6, #2
    267a:	409e      	lsls	r6, r3
    267c:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2680:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    2682:	1931      	adds	r1, r6, r4
    2684:	2205      	movs	r2, #5
    2686:	f500 7004 	add.w	r0, r0, #528	; 0x210
    268a:	3401      	adds	r4, #1
    268c:	f004 fb20 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    2690:	f44f 7200 	mov.w	r2, #512	; 0x200
    2694:	2100      	movs	r1, #0
    if (!cache) {
    2696:	2800      	cmp	r0, #0
    2698:	d0e2      	beq.n	2660 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    269a:	f00a f8d3 	bl	c844 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    269e:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    26a0:	2301      	movs	r3, #1
    26a2:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    26a6:	4093      	lsls	r3, r2
    26a8:	429c      	cmp	r4, r3
    26aa:	d3ea      	bcc.n	2682 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    26ac:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    26b0:	065b      	lsls	r3, r3, #25
    26b2:	d415      	bmi.n	26e0 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    26b4:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    26b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    26bc:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    26c0:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    26c4:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    26c8:	189b      	adds	r3, r3, r2
    26ca:	f141 0000 	adc.w	r0, r1, #0
    26ce:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    26d0:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    26d4:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    26d6:	189b      	adds	r3, r3, r2
    26d8:	f141 0100 	adc.w	r1, r1, #0
    26dc:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    26e0:	4628      	mov	r0, r5
}
    26e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    26e6:	f7ff bf7d 	b.w	25e4 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    26ea:	6a00      	ldr	r0, [r0, #32]
    26ec:	f000 fcf8 	bl	30e0 <ExFatPartition::rootLength()>
    26f0:	e7af      	b.n	2652 <ExFatFile::addDirCluster()+0xe>
    26f2:	bf00      	nop

000026f4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    26f4:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    26f6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    26fa:	f013 0f50 	tst.w	r3, #80	; 0x50
    26fe:	d102      	bne.n	2706 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    2700:	2500      	movs	r5, #0
}
    2702:	4628      	mov	r0, r5
    2704:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    2706:	f640 2302 	movw	r3, #2562	; 0xa02
    270a:	4604      	mov	r4, r0
    270c:	f7ff fc34 	bl	1f78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2710:	2800      	cmp	r0, #0
    2712:	d0f5      	beq.n	2700 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    2714:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    2716:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    2718:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    271c:	f7ff ff92 	bl	2644 <ExFatFile::addDirCluster()>
    2720:	4605      	mov	r5, r0
    2722:	2800      	cmp	r0, #0
    2724:	d0ec      	beq.n	2700 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    2726:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    2728:	2200      	movs	r2, #0
    272a:	2300      	movs	r3, #0
    272c:	4620      	mov	r0, r4
    272e:	61e1      	str	r1, [r4, #28]
    2730:	f7ff fbac 	bl	1e8c <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    2734:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    2736:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    273a:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    273e:	2b00      	cmp	r3, #0
    2740:	d0df      	beq.n	2702 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2742:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    2744:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2746:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    274a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    274e:	f7ff bead 	b.w	24ac <ExFatFile::syncDir()>
    2752:	bf00      	nop

00002754 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2754:	b5f0      	push	{r4, r5, r6, r7, lr}
    2756:	2500      	movs	r5, #0
    2758:	b097      	sub	sp, #92	; 0x5c
    275a:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    275c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2760:	9201      	str	r2, [sp, #4]
    2762:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    2766:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    2768:	2b00      	cmp	r3, #0
    276a:	d146      	bne.n	27fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    276c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2770:	460e      	mov	r6, r1
    2772:	f013 0f50 	tst.w	r3, #80	; 0x50
    2776:	d040      	beq.n	27fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    2778:	7813      	ldrb	r3, [r2, #0]
    277a:	4604      	mov	r4, r0
    277c:	4611      	mov	r1, r2
    277e:	2b2f      	cmp	r3, #47	; 0x2f
    2780:	d03e      	beq.n	2800 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    2782:	ab01      	add	r3, sp, #4
    2784:	aa02      	add	r2, sp, #8
    2786:	4620      	mov	r0, r4
    2788:	f7ff fa4c 	bl	1c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    278c:	2800      	cmp	r0, #0
    278e:	d034      	beq.n	27fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    2790:	9b01      	ldr	r3, [sp, #4]
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	2b00      	cmp	r3, #0
    2796:	d041      	beq.n	281c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    2798:	2300      	movs	r3, #0
    279a:	aa02      	add	r2, sp, #8
    279c:	4631      	mov	r1, r6
    279e:	4620      	mov	r0, r4
    27a0:	f7ff fbea 	bl	1f78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    27a4:	b930      	cbnz	r0, 27b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    27a6:	b347      	cbz	r7, 27fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    27a8:	aa02      	add	r2, sp, #8
    27aa:	4631      	mov	r1, r6
    27ac:	4620      	mov	r0, r4
    27ae:	f7ff ffa1 	bl	26f4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    27b2:	b310      	cbz	r0, 27fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    27b4:	46a4      	mov	ip, r4
    27b6:	ad08      	add	r5, sp, #32
    27b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    27bc:	f8dc 0000 	ldr.w	r0, [ip]
    27c0:	f10c 0c10 	add.w	ip, ip, #16
    27c4:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    27c8:	46ae      	mov	lr, r5
    27ca:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    27ce:	3510      	adds	r5, #16
    27d0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    27d4:	45b4      	cmp	ip, r6
    27d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    27da:	d1ef      	bne.n	27bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    27dc:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    27e0:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    27e2:	6028      	str	r0, [r5, #0]
    close();
    27e4:	4620      	mov	r0, r4
    27e6:	f7ff f9ff 	bl	1be8 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    27ea:	9901      	ldr	r1, [sp, #4]
    27ec:	ab01      	add	r3, sp, #4
    27ee:	aa02      	add	r2, sp, #8
    27f0:	4620      	mov	r0, r4
    27f2:	f7ff fa17 	bl	1c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    27f6:	2800      	cmp	r0, #0
    27f8:	d1ca      	bne.n	2790 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    27fa:	2000      	movs	r0, #0
}
    27fc:	b017      	add	sp, #92	; 0x5c
    27fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    2800:	3101      	adds	r1, #1
    2802:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    2804:	780b      	ldrb	r3, [r1, #0]
    2806:	2b2f      	cmp	r3, #47	; 0x2f
    2808:	d0fa      	beq.n	2800 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    280a:	6a31      	ldr	r1, [r6, #32]
    280c:	a808      	add	r0, sp, #32
    280e:	f7ff f9f5 	bl	1bfc <ExFatFile::openRoot(ExFatVolume*)>
    2812:	2800      	cmp	r0, #0
    2814:	d0f1      	beq.n	27fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    2816:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    2818:	ae08      	add	r6, sp, #32
    281a:	e7b2      	b.n	2782 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    281c:	aa02      	add	r2, sp, #8
    281e:	4631      	mov	r1, r6
    2820:	4620      	mov	r0, r4
    2822:	f7ff ff67 	bl	26f4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    2826:	b017      	add	sp, #92	; 0x5c
    2828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    282a:	bf00      	nop

0000282c <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    282c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2830:	079a      	lsls	r2, r3, #30
    2832:	d562      	bpl.n	28fa <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    2834:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2836:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    2838:	b082      	sub	sp, #8
    283a:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    283c:	b3a5      	cbz	r5, 28a8 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    283e:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    2842:	d034      	beq.n	28ae <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2844:	6a00      	ldr	r0, [r0, #32]
    2846:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2848:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    284c:	3a01      	subs	r2, #1
    284e:	68e1      	ldr	r1, [r4, #12]
    2850:	f10c 0c09 	add.w	ip, ip, #9
    2854:	f141 31ff 	adc.w	r1, r1, #4294967295
    2858:	fa5f fc8c 	uxtb.w	ip, ip
    285c:	f1cc 0e20 	rsb	lr, ip, #32
    2860:	fa22 f20c 	lsr.w	r2, r2, ip
    2864:	f1ac 0c20 	sub.w	ip, ip, #32
    2868:	fa01 fe0e 	lsl.w	lr, r1, lr
    286c:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2870:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2872:	ea42 020e 	orr.w	r2, r2, lr
    2876:	ea42 020c 	orr.w	r2, r2, ip
    287a:	3201      	adds	r2, #1
    if (m_curCluster) {
    287c:	b319      	cbz	r1, 28c6 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    287e:	3d01      	subs	r5, #1
    2880:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2882:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2884:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    2886:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    2888:	bb72      	cbnz	r2, 28e8 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    288a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    288e:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2890:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2894:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    2898:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    289c:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    28a0:	f7ff fea0 	bl	25e4 <ExFatFile::sync()>

 fail:
  return false;
}
    28a4:	b002      	add	sp, #8
    28a6:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    28a8:	2001      	movs	r0, #1
}
    28aa:	b002      	add	sp, #8
    28ac:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    28ae:	6981      	ldr	r1, [r0, #24]
    28b0:	b961      	cbnz	r1, 28cc <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    28b2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    28b4:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    28b6:	4629      	mov	r1, r5
    28b8:	6a20      	ldr	r0, [r4, #32]
    28ba:	f000 fb41 	bl	2f40 <ExFatPartition::freeChain(unsigned long)>
    28be:	b1c8      	cbz	r0, 28f4 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    28c0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    28c4:	e7e1      	b.n	288a <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    28c6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    28c8:	61e1      	str	r1, [r4, #28]
    28ca:	e7dd      	b.n	2888 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    28cc:	aa01      	add	r2, sp, #4
    28ce:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    28d0:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    28d2:	f000 faf3 	bl	2ebc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    28d6:	2800      	cmp	r0, #0
    28d8:	db0c      	blt.n	28f4 <ExFatFile::truncate()+0xc8>
      if (fg) {
    28da:	d110      	bne.n	28fe <ExFatFile::truncate()+0xd2>
    if (toFree) {
    28dc:	9d01      	ldr	r5, [sp, #4]
    28de:	2d00      	cmp	r5, #0
    28e0:	d1e9      	bne.n	28b6 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    28e2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    28e6:	e7d0      	b.n	288a <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    28e8:	2300      	movs	r3, #0
    28ea:	9901      	ldr	r1, [sp, #4]
    28ec:	f000 fa0c 	bl	2d08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    28f0:	2800      	cmp	r0, #0
    28f2:	d1e5      	bne.n	28c0 <ExFatFile::truncate()+0x94>
  return false;
    28f4:	2000      	movs	r0, #0
}
    28f6:	b002      	add	sp, #8
    28f8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    28fa:	2000      	movs	r0, #0
}
    28fc:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    28fe:	f04f 32ff 	mov.w	r2, #4294967295
    2902:	69a1      	ldr	r1, [r4, #24]
    2904:	6a20      	ldr	r0, [r4, #32]
    2906:	f000 fafb 	bl	2f00 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    290a:	2800      	cmp	r0, #0
    290c:	d1e6      	bne.n	28dc <ExFatFile::truncate()+0xb0>
    290e:	e7f1      	b.n	28f4 <ExFatFile::truncate()+0xc8>

00002910 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2914:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    2918:	b083      	sub	sp, #12
    291a:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    291c:	079d      	lsls	r5, r3, #30
    291e:	f140 80a1 	bpl.w	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2922:	4691      	mov	r9, r2
    2924:	071a      	lsls	r2, r3, #28
    2926:	460e      	mov	r6, r1
    2928:	f100 8095 	bmi.w	2a56 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    292c:	f1b9 0f00 	cmp.w	r9, #0
    2930:	f000 8128 	beq.w	2b84 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    2934:	6823      	ldr	r3, [r4, #0]
    2936:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2938:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    293a:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    293c:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    2940:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2944:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    2948:	f1b8 0f00 	cmp.w	r8, #0
    294c:	f040 8094 	bne.w	2a78 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2950:	2900      	cmp	r1, #0
    2952:	f000 80d4 	beq.w	2afe <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    2956:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    295a:	065b      	lsls	r3, r3, #25
    295c:	f140 80ec 	bpl.w	2b38 <ExFatFile::write(void const*, unsigned int)+0x228>
    2960:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2964:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2968:	f10c 0c09 	add.w	ip, ip, #9
    296c:	3b01      	subs	r3, #1
    296e:	fa5f fc8c 	uxtb.w	ip, ip
    2972:	f142 32ff 	adc.w	r2, r2, #4294967295
    2976:	f1cc 0e20 	rsb	lr, ip, #32
    297a:	fa23 f30c 	lsr.w	r3, r3, ip
    297e:	f1ac 0c20 	sub.w	ip, ip, #32
    2982:	fa02 fe0e 	lsl.w	lr, r2, lr
    2986:	fa22 fc0c 	lsr.w	ip, r2, ip
    298a:	69e2      	ldr	r2, [r4, #28]
    298c:	ea43 030e 	orr.w	r3, r3, lr
    2990:	ea43 030c 	orr.w	r3, r3, ip
    2994:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    2996:	4299      	cmp	r1, r3
    2998:	f080 80d5 	bcs.w	2b46 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    299c:	3101      	adds	r1, #1
    299e:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    29a0:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    29a4:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    29a6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    29aa:	4091      	lsls	r1, r2
    29ac:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    29ae:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    29b2:	f0c0 808a 	bcc.w	2aca <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    29b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    29ba:	f0c0 80a6 	bcc.w	2b0a <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    29be:	2301      	movs	r3, #1
    29c0:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    29c2:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    29c4:	eba3 0308 	sub.w	r3, r3, r8
    29c8:	4293      	cmp	r3, r2
    29ca:	bf28      	it	cs
    29cc:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    29ce:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    29d2:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    29d4:	ea4f 2843 	mov.w	r8, r3, lsl #9
    29d8:	d309      	bcc.n	29ee <ExFatFile::write(void const*, unsigned int)+0xde>
    29da:	185f      	adds	r7, r3, r1
    29dc:	42ba      	cmp	r2, r7
    29de:	d206      	bcs.n	29ee <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    29e0:	2200      	movs	r2, #0
    29e2:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    29e6:	f04f 32ff 	mov.w	r2, #4294967295
    29ea:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    29ee:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    29f2:	4632      	mov	r2, r6
    29f4:	6807      	ldr	r7, [r0, #0]
    29f6:	6abf      	ldr	r7, [r7, #40]	; 0x28
    29f8:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    29fa:	b398      	cbz	r0, 2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    29fc:	4643      	mov	r3, r8
    src += n;
    29fe:	4446      	add	r6, r8
    toWrite -= n;
    2a00:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    2a04:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    2a08:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    2a0c:	19db      	adds	r3, r3, r7
    2a0e:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    2a12:	4298      	cmp	r0, r3
    2a14:	4191      	sbcs	r1, r2
    m_curPosition += n;
    2a16:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    2a1a:	d207      	bcs.n	2a2c <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2a1c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2a20:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    2a24:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2a28:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    2a2c:	2d00      	cmp	r5, #0
    2a2e:	d183      	bne.n	2938 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    2a30:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    2a34:	4298      	cmp	r0, r3
    2a36:	4191      	sbcs	r1, r2
    2a38:	f0c0 8096 	bcc.w	2b68 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2a3c:	4b53      	ldr	r3, [pc, #332]	; (2b8c <ExFatFile::write(void const*, unsigned int)+0x27c>)
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	2b00      	cmp	r3, #0
    2a42:	f000 809d 	beq.w	2b80 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2a46:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2a4a:	4648      	mov	r0, r9
    2a4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a50:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2a54:	e00d      	b.n	2a72 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2a56:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2a5a:	f7ff fa17 	bl	1e8c <ExFatFile::seekSet(unsigned long long)>
    2a5e:	2800      	cmp	r0, #0
    2a60:	f47f af64 	bne.w	292c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2a64:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2a68:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2a6a:	f043 0301 	orr.w	r3, r3, #1
    2a6e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2a72:	b003      	add	sp, #12
    2a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2a78:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2a7c:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2a7e:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2a82:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2a86:	4091      	lsls	r1, r2
    2a88:	4441      	add	r1, r8
    2a8a:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2a8c:	2f00      	cmp	r7, #0
    2a8e:	d08e      	beq.n	29ae <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2a90:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2a94:	2201      	movs	r2, #1
    2a96:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2a9a:	45a8      	cmp	r8, r5
    2a9c:	bf28      	it	cs
    2a9e:	46a8      	movcs	r8, r5
    2aa0:	f004 f916 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2aa4:	2800      	cmp	r0, #0
    2aa6:	d0dd      	beq.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2aa8:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2aaa:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2aac:	4642      	mov	r2, r8
    2aae:	4631      	mov	r1, r6
    2ab0:	f005 fc30 	bl	8314 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2ab4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2ab8:	6a20      	ldr	r0, [r4, #32]
    2aba:	d19f      	bne.n	29fc <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    2abc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2ac0:	f004 f8da 	bl	6c78 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d199      	bne.n	29fc <ExFatFile::write(void const*, unsigned int)+0xec>
    2ac8:	e7cc      	b.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2aca:	6862      	ldr	r2, [r4, #4]
    2acc:	6963      	ldr	r3, [r4, #20]
    2ace:	9200      	str	r2, [sp, #0]
    2ad0:	9301      	str	r3, [sp, #4]
    2ad2:	6922      	ldr	r2, [r4, #16]
    2ad4:	6823      	ldr	r3, [r4, #0]
    2ad6:	4293      	cmp	r3, r2
    2ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
    2adc:	419a      	sbcs	r2, r3
    2ade:	d212      	bcs.n	2b06 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2ae0:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2ae2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2ae6:	f004 f8f3 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2aea:	2800      	cmp	r0, #0
    2aec:	d0ba      	beq.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2aee:	462a      	mov	r2, r5
    2af0:	4631      	mov	r1, r6
    2af2:	4438      	add	r0, r7
    m_curPosition += n;
    2af4:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2af6:	f005 fc0d 	bl	8314 <memcpy>
    m_curPosition += n;
    2afa:	462b      	mov	r3, r5
    2afc:	e77f      	b.n	29fe <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2afe:	69e1      	ldr	r1, [r4, #28]
    2b00:	b349      	cbz	r1, 2b56 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2b02:	61a1      	str	r1, [r4, #24]
    2b04:	e74c      	b.n	29a0 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2b06:	2205      	movs	r2, #5
    2b08:	e7eb      	b.n	2ae2 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2b0a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    2b0e:	428b      	cmp	r3, r1
    2b10:	d106      	bne.n	2b20 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2b12:	2300      	movs	r3, #0
    2b14:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2b18:	f04f 33ff 	mov.w	r3, #4294967295
    2b1c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    2b20:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2b24:	4632      	mov	r2, r6
    2b26:	6803      	ldr	r3, [r0, #0]
    2b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b2a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d099      	beq.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
    2b30:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2b34:	4698      	mov	r8, r3
    2b36:	e762      	b.n	29fe <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2b38:	f104 0218 	add.w	r2, r4, #24
    2b3c:	f000 f9be 	bl	2ebc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2b40:	2800      	cmp	r0, #0
    2b42:	db8f      	blt.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2b44:	d104      	bne.n	2b50 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2b46:	4620      	mov	r0, r4
    2b48:	f7ff fc66 	bl	2418 <ExFatFile::addCluster()>
    2b4c:	2800      	cmp	r0, #0
    2b4e:	d089      	beq.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b50:	69a1      	ldr	r1, [r4, #24]
    2b52:	6a20      	ldr	r0, [r4, #32]
    2b54:	e724      	b.n	29a0 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2b56:	4620      	mov	r0, r4
    2b58:	f7ff fc5e 	bl	2418 <ExFatFile::addCluster()>
    2b5c:	2800      	cmp	r0, #0
    2b5e:	d081      	beq.n	2a64 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2b60:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b62:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2b64:	61e1      	str	r1, [r4, #28]
    2b66:	e71b      	b.n	29a0 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2b68:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2b6c:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2b6e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2b72:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2b76:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2b7a:	b003      	add	sp, #12
    2b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b80:	4648      	mov	r0, r9
    2b82:	e776      	b.n	2a72 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2b84:	e9d4 3200 	ldrd	r3, r2, [r4]
    2b88:	e752      	b.n	2a30 <ExFatFile::write(void const*, unsigned int)+0x120>
    2b8a:	bf00      	nop
    2b8c:	200200a4 	.word	0x200200a4

00002b90 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b94:	460c      	mov	r4, r1
    2b96:	4615      	mov	r5, r2
    2b98:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    2b9c:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    2b9e:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    2ba0:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    2ba4:	b91b      	cbnz	r3, 2bae <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    2ba6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    2baa:	429a      	cmp	r2, r3
    2bac:	d00e      	beq.n	2bcc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    2bae:	f004 f8b7 	bl	6d20 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    2bb2:	f004 f927 	bl	6e04 <toUpcase(unsigned short)>
    2bb6:	4606      	mov	r6, r0
    2bb8:	4638      	mov	r0, r7
    2bba:	f004 f923 	bl	6e04 <toUpcase(unsigned short)>
    2bbe:	4286      	cmp	r6, r0
    2bc0:	d109      	bne.n	2bd6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    2bc2:	4544      	cmp	r4, r8
    2bc4:	d1ea      	bne.n	2b9c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2bc6:	2001      	movs	r0, #1
}
    2bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    2bcc:	fab7 f087 	clz	r0, r7
    2bd0:	0940      	lsrs	r0, r0, #5
}
    2bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    2bd6:	2000      	movs	r0, #0
}
    2bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002bdc <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2bdc:	b570      	push	{r4, r5, r6, lr}
    2bde:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    2be0:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    2be2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    2be6:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    2be8:	4619      	mov	r1, r3
  uint16_t hash = 0;
    2bea:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    2bec:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    2bee:	6123      	str	r3, [r4, #16]
    next = begin;
    2bf0:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    2bf2:	e017      	b.n	2c24 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    2bf4:	f004 f894 	bl	6d20 <FsName::get16()>
    if (u == 0XFFFF) {
    2bf8:	42a8      	cmp	r0, r5
    2bfa:	d022      	beq.n	2c42 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    2bfc:	f004 f902 	bl	6e04 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    2c00:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2c02:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    2c04:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    2c06:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2c08:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2c0c:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    2c0e:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2c10:	fa52 f080 	uxtab	r0, r2, r0
    2c14:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2c16:	f3c0 004e 	ubfx	r0, r0, #1, #15
    2c1a:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    2c1e:	fa16 f080 	uxtah	r0, r6, r0
    2c22:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    2c24:	4620      	mov	r0, r4
    2c26:	2900      	cmp	r1, #0
    2c28:	d1e4      	bne.n	2bf4 <ExFatFile::hashName(ExName_t*)+0x18>
    2c2a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    2c2e:	429a      	cmp	r2, r3
    2c30:	d1e0      	bne.n	2bf4 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2c32:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    2c34:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2c36:	3801      	subs	r0, #1
    2c38:	28fe      	cmp	r0, #254	; 0xfe
    2c3a:	bf8c      	ite	hi
    2c3c:	2000      	movhi	r0, #0
    2c3e:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    2c40:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2c42:	2000      	movs	r0, #0
}
    2c44:	bd70      	pop	{r4, r5, r6, pc}
    2c46:	bf00      	nop

00002c48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c4c:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c4e:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2c50:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c52:	2900      	cmp	r1, #0
    2c54:	d042      	beq.n	2cdc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2c56:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2c5a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2c5e:	4543      	cmp	r3, r8
    2c60:	d942      	bls.n	2ce8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2c62:	f008 0307 	and.w	r3, r8, #7
    2c66:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2c68:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2c6c:	409d      	lsls	r5, r3
    2c6e:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2c70:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2c72:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    2c74:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2c78:	2200      	movs	r2, #0
    2c7a:	4638      	mov	r0, r7
    2c7c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2c80:	f004 f826 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2c84:	b1e8      	cbz	r0, 2cc2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2c86:	f10b 3bff 	add.w	fp, fp, #4294967295
    2c8a:	4483      	add	fp, r0
    2c8c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2c90:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2c94:	e00a      	b.n	2cac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2c96:	454a      	cmp	r2, r9
    2c98:	d02b      	beq.n	2cf2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2c9a:	45a0      	cmp	r8, r4
    2c9c:	d010      	beq.n	2cc0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2c9e:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2ca2:	42a5      	cmp	r5, r4
    2ca4:	d914      	bls.n	2cd0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2ca6:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2caa:	d00c      	beq.n	2cc6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2cac:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2cae:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2cb0:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2cb4:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2cb8:	d0ed      	beq.n	2c96 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2cba:	45a0      	cmp	r8, r4
        endAlloc++;
    2cbc:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2cbe:	d1ee      	bne.n	2c9e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2cc0:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2cc6:	4558      	cmp	r0, fp
      mask = 1;
    2cc8:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2ccc:	d1e0      	bne.n	2c90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2cce:	e001      	b.n	2cd4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2cd0:	2600      	movs	r6, #0
    2cd2:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2cd4:	2501      	movs	r5, #1
    i = 0;
    2cd6:	f04f 0b00 	mov.w	fp, #0
    2cda:	e7cb      	b.n	2c74 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2cdc:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2ce0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2ce4:	4543      	cmp	r3, r8
    2ce6:	d8bc      	bhi.n	2c62 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2ce8:	f04f 0800 	mov.w	r8, #0
    2cec:	2501      	movs	r5, #1
    start = 0;
    2cee:	46c3      	mov	fp, r8
    2cf0:	e7be      	b.n	2c70 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2cf2:	f1ba 0f00 	cmp.w	sl, #0
    2cf6:	d104      	bne.n	2d02 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2cf8:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2cfc:	bf08      	it	eq
    2cfe:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2d02:	1cb0      	adds	r0, r6, #2
}
    2d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002d08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    2d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d0c:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2d0e:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    2d10:	4615      	mov	r5, r2
    2d12:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2d14:	1883      	adds	r3, r0, r2
    2d16:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2d1a:	4293      	cmp	r3, r2
    2d1c:	d837      	bhi.n	2d8e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2d1e:	bbce      	cbnz	r6, 2d94 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2d20:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2d24:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2d26:	bf88      	it	hi
    2d28:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2d2c:	f000 0307 	and.w	r3, r0, #7
    2d30:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    2d32:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    2d36:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2d3a:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    2d3c:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2d40:	b2e4      	uxtb	r4, r4
    2d42:	2201      	movs	r2, #1
    2d44:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2d46:	188f      	adds	r7, r1, r2
    2d48:	f003 ffc2 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2d4c:	b1f8      	cbz	r0, 2d8e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2d4e:	f109 3eff 	add.w	lr, r9, #4294967295
    2d52:	4486      	add	lr, r0
    2d54:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2d58:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2d5c:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2d60:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2d64:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2d68:	bf14      	ite	ne
    2d6a:	2201      	movne	r2, #1
    2d6c:	2200      	moveq	r2, #0
    2d6e:	42b2      	cmp	r2, r6
    2d70:	d00d      	beq.n	2d8e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2d72:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2d74:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2d78:	d018      	beq.n	2dac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2d7a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2d7e:	d1ed      	bne.n	2d5c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2d80:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2d82:	46a1      	mov	r9, r4
    2d84:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2d88:	d1e6      	bne.n	2d58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2d8a:	4639      	mov	r1, r7
    2d8c:	e7d9      	b.n	2d42 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    2d8e:	2000      	movs	r0, #0
}
    2d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2d94:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2d98:	428b      	cmp	r3, r1
    2d9a:	d9c7      	bls.n	2d2c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2d9c:	4281      	cmp	r1, r0
    2d9e:	d3c5      	bcc.n	2d2c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2da0:	4293      	cmp	r3, r2
    2da2:	bf28      	it	cs
    2da4:	2300      	movcs	r3, #0
    2da6:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2daa:	e7bf      	b.n	2d2c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2dac:	2001      	movs	r0, #1
}
    2dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2db2:	bf00      	nop

00002db4 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2db6:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2dba:	3301      	adds	r3, #1
    2dbc:	428b      	cmp	r3, r1
    2dbe:	d201      	bcs.n	2dc4 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2dc0:	2000      	movs	r0, #0
}
    2dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dc4:	4607      	mov	r7, r0
    2dc6:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2dc8:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2dcc:	2500      	movs	r5, #0
    2dce:	e005      	b.n	2ddc <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2dd0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2dd4:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2dd6:	3301      	adds	r3, #1
    2dd8:	42a3      	cmp	r3, r4
    2dda:	d3f1      	bcc.n	2dc0 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2ddc:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2de0:	2200      	movs	r2, #0
    2de2:	4630      	mov	r0, r6
    2de4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2de8:	f003 ff72 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2dec:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2dee:	2800      	cmp	r0, #0
    2df0:	d0e6      	beq.n	2dc0 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2df2:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2df6:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2df8:	1c63      	adds	r3, r4, #1
    2dfa:	d1e9      	bne.n	2dd0 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2dfc:	1c68      	adds	r0, r5, #1
}
    2dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002e00 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2e00:	b538      	push	{r3, r4, r5, lr}
    2e02:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2e04:	680b      	ldr	r3, [r1, #0]
    2e06:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2e0a:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2e0e:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2e12:	3b02      	subs	r3, #2
    2e14:	6865      	ldr	r5, [r4, #4]
    2e16:	fa03 f30c 	lsl.w	r3, r3, ip
    2e1a:	4029      	ands	r1, r5
    2e1c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2e20:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2e24:	4419      	add	r1, r3
    2e26:	f003 ff53 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2e2a:	b118      	cbz	r0, 2e34 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2e2c:	6863      	ldr	r3, [r4, #4]
    2e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2e32:	4418      	add	r0, r3
}
    2e34:	bd38      	pop	{r3, r4, r5, pc}
    2e36:	bf00      	nop

00002e38 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e3c:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2e3e:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    2e42:	6849      	ldr	r1, [r1, #4]
    2e44:	400b      	ands	r3, r1
  pos->position += offset;
    2e46:	4411      	add	r1, r2
    2e48:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2e4a:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2e4c:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    2e50:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    2e54:	b2d2      	uxtb	r2, r2
    2e56:	40d3      	lsrs	r3, r2
  while (tmp--) {
    2e58:	b32b      	cbz	r3, 2ea6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    2e5a:	4680      	mov	r8, r0
    2e5c:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    2e5e:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2e62:	e005      	b.n	2e70 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    2e64:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    2e66:	3d01      	subs	r5, #1
      pos->cluster++;
    2e68:	f103 0301 	add.w	r3, r3, #1
    2e6c:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2e6e:	d31a      	bcc.n	2ea6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    2e70:	7a26      	ldrb	r6, [r4, #8]
    2e72:	2e00      	cmp	r6, #0
    2e74:	d1f6      	bne.n	2e64 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    2e76:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    2e7a:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    2e7c:	6827      	ldr	r7, [r4, #0]
    2e7e:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    2e80:	3301      	adds	r3, #1
    2e82:	429f      	cmp	r7, r3
    2e84:	d812      	bhi.n	2eac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2e86:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    2e8a:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    2e8e:	f003 ff1f 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e92:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    2e94:	b150      	cbz	r0, 2eac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e96:	f3c7 0708 	ubfx	r7, r7, #0, #9
    2e9a:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    2e9c:	1c5a      	adds	r2, r3, #1
    2e9e:	d009      	beq.n	2eb4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    2ea0:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    2ea2:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2ea4:	d2e4      	bcs.n	2e70 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    2ea6:	2001      	movs	r0, #1
}
    2ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    2eac:	f04f 30ff 	mov.w	r0, #4294967295
}
    2eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    2eb4:	4630      	mov	r0, r6
}
    2eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eba:	bf00      	nop

00002ebc <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2ebc:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    2ebe:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2ec2:	3301      	adds	r3, #1
    2ec4:	428b      	cmp	r3, r1
    2ec6:	d202      	bcs.n	2ece <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    2ec8:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    2ecc:	bd38      	pop	{r3, r4, r5, pc}
    2ece:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2ed0:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2ed4:	4615      	mov	r5, r2
    2ed6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2eda:	2200      	movs	r2, #0
    2edc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2ee0:	f003 fef6 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2ee4:	2800      	cmp	r0, #0
    2ee6:	d0ef      	beq.n	2ec8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2ee8:	00a4      	lsls	r4, r4, #2
    2eea:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2eee:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    2ef0:	1c5a      	adds	r2, r3, #1
    2ef2:	d002      	beq.n	2efa <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    2ef4:	2001      	movs	r0, #1
  *value = next;
    2ef6:	602b      	str	r3, [r5, #0]
}
    2ef8:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    2efa:	2000      	movs	r0, #0
}
    2efc:	bd38      	pop	{r3, r4, r5, pc}
    2efe:	bf00      	nop

00002f00 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2f00:	2901      	cmp	r1, #1
    2f02:	d91b      	bls.n	2f3c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2f04:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2f06:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f0a:	460c      	mov	r4, r1
    2f0c:	3301      	adds	r3, #1
    2f0e:	428b      	cmp	r3, r1
    2f10:	d201      	bcs.n	2f16 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    2f12:	2000      	movs	r0, #0
}
    2f14:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f16:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2f1a:	4615      	mov	r5, r2
    2f1c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2f20:	2201      	movs	r2, #1
    2f22:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f26:	f003 fed3 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f2a:	4603      	mov	r3, r0
    2f2c:	2800      	cmp	r0, #0
    2f2e:	d0f0      	beq.n	2f12 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2f30:	00a4      	lsls	r4, r4, #2
  return true;
    2f32:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2f34:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f38:	511d      	str	r5, [r3, r4]
}
    2f3a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    2f3c:	2000      	movs	r0, #0
}
    2f3e:	4770      	bx	lr

00002f40 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    2f40:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2f44:	3301      	adds	r3, #1
    2f46:	4299      	cmp	r1, r3
    2f48:	d901      	bls.n	2f4e <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    2f4a:	2000      	movs	r0, #0
    2f4c:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    2f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f52:	4605      	mov	r5, r0
    2f54:	b083      	sub	sp, #12
    2f56:	460c      	mov	r4, r1
    2f58:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2f5c:	460f      	mov	r7, r1
    2f5e:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f62:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2f66:	2200      	movs	r2, #0
    2f68:	4648      	mov	r0, r9
    2f6a:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    2f6e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f72:	f003 fead 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f76:	b190      	cbz	r0, 2f9e <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f78:	00a3      	lsls	r3, r4, #2
    2f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2f7e:	58c2      	ldr	r2, [r0, r3]
    2f80:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    2f82:	1c53      	adds	r3, r2, #1
    2f84:	bf16      	itet	ne
    2f86:	4616      	movne	r6, r2
    2f88:	f04f 0a00 	moveq.w	sl, #0
    2f8c:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2f90:	2c01      	cmp	r4, #1
    2f92:	d904      	bls.n	2f9e <ExFatPartition::freeChain(unsigned long)+0x5e>
    2f94:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    2f98:	3201      	adds	r2, #1
    2f9a:	4294      	cmp	r4, r2
    2f9c:	d903      	bls.n	2fa6 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    2f9e:	2000      	movs	r0, #0
    2fa0:	b003      	add	sp, #12
    2fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2fa6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2faa:	2201      	movs	r2, #1
    2fac:	4648      	mov	r0, r9
    2fae:	4459      	add	r1, fp
    2fb0:	f003 fe8e 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d0f2      	beq.n	2f9e <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    2fb8:	9b01      	ldr	r3, [sp, #4]
    2fba:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    2fbe:	f1ba 0f00 	cmp.w	sl, #0
    2fc2:	d012      	beq.n	2fea <ExFatPartition::freeChain(unsigned long)+0xaa>
    2fc4:	3401      	adds	r4, #1
    2fc6:	42b4      	cmp	r4, r6
    2fc8:	d008      	beq.n	2fdc <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2fca:	2300      	movs	r3, #0
    2fcc:	1be2      	subs	r2, r4, r7
    2fce:	4639      	mov	r1, r7
    2fd0:	4628      	mov	r0, r5
    2fd2:	f7ff fe99 	bl	2d08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2fd6:	2800      	cmp	r0, #0
    2fd8:	d0e1      	beq.n	2f9e <ExFatPartition::freeChain(unsigned long)+0x5e>
    2fda:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    2fdc:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    2fe0:	3301      	adds	r3, #1
    2fe2:	42b3      	cmp	r3, r6
    2fe4:	d3db      	bcc.n	2f9e <ExFatPartition::freeChain(unsigned long)+0x5e>
    2fe6:	4634      	mov	r4, r6
    2fe8:	e7bb      	b.n	2f62 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2fea:	1c62      	adds	r2, r4, #1
    2fec:	4653      	mov	r3, sl
    2fee:	4639      	mov	r1, r7
    2ff0:	4628      	mov	r0, r5
    2ff2:	1bd2      	subs	r2, r2, r7
}
    2ff4:	b003      	add	sp, #12
    2ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2ffa:	f7ff be85 	b.w	2d08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2ffe:	bf00      	nop

00003000 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    3000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    3002:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    3004:	f04f 36ff 	mov.w	r6, #4294967295
    3008:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    300c:	4615      	mov	r5, r2
  m_blockDev = dev;
    300e:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    3012:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    3014:	6041      	str	r1, [r0, #4]
    3016:	461a      	mov	r2, r3
    3018:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    301c:	4619      	mov	r1, r3
  m_fatType = 0;
    301e:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    3022:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    3024:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    3026:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    302a:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    302e:	4638      	mov	r0, r7
    3030:	f003 fe4e 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    3034:	2d04      	cmp	r5, #4
    3036:	d80d      	bhi.n	3054 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    3038:	4606      	mov	r6, r0
    303a:	b158      	cbz	r0, 3054 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    303c:	b1bd      	cbz	r5, 306e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    303e:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    3040:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    3044:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    3048:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    304c:	d102      	bne.n	3054 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    304e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    3052:	b90b      	cbnz	r3, 3058 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3054:	2000      	movs	r0, #0
}
    3056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    3058:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    305c:	4638      	mov	r0, r7
    305e:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    3062:	4629      	mov	r1, r5
    3064:	f003 fe34 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3068:	4606      	mov	r6, r0
    306a:	2800      	cmp	r0, #0
    306c:	d0f2      	beq.n	3054 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    306e:	2205      	movs	r2, #5
    3070:	491a      	ldr	r1, [pc, #104]	; (30dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    3072:	1cf0      	adds	r0, r6, #3
    3074:	f009 fc38 	bl	c8e8 <strncmp>
    3078:	2800      	cmp	r0, #0
    307a:	d1eb      	bne.n	3054 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    307c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    3080:	2b09      	cmp	r3, #9
    3082:	d1e7      	bne.n	3054 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3084:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    3086:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3088:	442b      	add	r3, r5
    308a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    308e:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3090:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3094:	6db3      	ldr	r3, [r6, #88]	; 0x58
    3096:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3098:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    309a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    309e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    30a0:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    30a4:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    30a6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    30aa:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    30ae:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    30b2:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30b4:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    30b8:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30bc:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    30c0:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30c2:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    30c6:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    30ca:	462a      	mov	r2, r5
    30cc:	f7ff fdbc 	bl	2c48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    30d0:	2340      	movs	r3, #64	; 0x40
  return true;
    30d2:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    30d4:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    30d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30da:	bf00      	nop
    30dc:	20000818 	.word	0x20000818

000030e0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    30e0:	b510      	push	{r4, lr}
    30e2:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    30e4:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    30e8:	f7ff fe64 	bl	2db4 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    30ec:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    30f0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    30f2:	b2db      	uxtb	r3, r3
}
    30f4:	4098      	lsls	r0, r3
    30f6:	bd10      	pop	{r4, pc}

000030f8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    30f8:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    30fa:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    30fe:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    3100:	2300      	movs	r3, #0
    3102:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    3104:	4668      	mov	r0, sp
    3106:	4621      	mov	r1, r4
    3108:	930c      	str	r3, [sp, #48]	; 0x30
    310a:	f7ff f901 	bl	2310 <ExFatFile::open(ExFatFile*, char const*, int)>
    310e:	4605      	mov	r5, r0
    3110:	b1d8      	cbz	r0, 314a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    3112:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3116:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    311a:	d019      	beq.n	3150 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    311c:	46ee      	mov	lr, sp
    311e:	46a4      	mov	ip, r4
    3120:	ae0c      	add	r6, sp, #48	; 0x30
    3122:	4674      	mov	r4, lr
    3124:	f10c 0c10 	add.w	ip, ip, #16
    3128:	f10e 0e10 	add.w	lr, lr, #16
    312c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    312e:	42b4      	cmp	r4, r6
    3130:	f84c 0c10 	str.w	r0, [ip, #-16]
    3134:	f84c 1c0c 	str.w	r1, [ip, #-12]
    3138:	f84c 2c08 	str.w	r2, [ip, #-8]
    313c:	f84c 3c04 	str.w	r3, [ip, #-4]
    3140:	d1ef      	bne.n	3122 <ExFatVolume::chdir(char const*)+0x2a>
    3142:	f8de 0000 	ldr.w	r0, [lr]
    3146:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    314a:	4628      	mov	r0, r5
    314c:	b00e      	add	sp, #56	; 0x38
    314e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    3150:	461d      	mov	r5, r3
}
    3152:	4628      	mov	r0, r5
    3154:	b00e      	add	sp, #56	; 0x38
    3156:	bd70      	pop	{r4, r5, r6, pc}

00003158 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    3158:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    315a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    315e:	b082      	sub	sp, #8
    3160:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3162:	2b00      	cmp	r3, #0
    3164:	db0d      	blt.n	3182 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    3166:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3168:	f105 0028 	add.w	r0, r5, #40	; 0x28
    316c:	f003 fd84 	bl	6c78 <FsCache::sync()>
    3170:	2800      	cmp	r0, #0
    3172:	d13b      	bne.n	31ec <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    3174:	7863      	ldrb	r3, [r4, #1]
  return false;
    3176:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3178:	f043 0301 	orr.w	r3, r3, #1
    317c:	7063      	strb	r3, [r4, #1]
}
    317e:	b002      	add	sp, #8
    3180:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3182:	6880      	ldr	r0, [r0, #8]
    3184:	2201      	movs	r2, #1
    3186:	69a1      	ldr	r1, [r4, #24]
    3188:	3028      	adds	r0, #40	; 0x28
    318a:	f003 fda1 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    318e:	2800      	cmp	r0, #0
    3190:	d0f0      	beq.n	3174 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3192:	88a5      	ldrh	r5, [r4, #4]
    3194:	f005 050f 	and.w	r5, r5, #15
    3198:	016b      	lsls	r3, r5, #5
    319a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    319e:	5cc3      	ldrb	r3, [r0, r3]
    31a0:	2be5      	cmp	r3, #229	; 0xe5
    31a2:	d0e7      	beq.n	3174 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    31a4:	7823      	ldrb	r3, [r4, #0]
    31a6:	071b      	lsls	r3, r3, #28
    31a8:	d501      	bpl.n	31ae <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    31aa:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    31ac:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    31ae:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    31b0:	4915      	ldr	r1, [pc, #84]	; (3208 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    31b2:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    31b4:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    31b6:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    31b8:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    31ba:	b166      	cbz	r6, 31d6 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    31bc:	f10d 0203 	add.w	r2, sp, #3
    31c0:	f10d 0106 	add.w	r1, sp, #6
    31c4:	a801      	add	r0, sp, #4
    31c6:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    31c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    31cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    31d0:	832b      	strh	r3, [r5, #24]
    31d2:	826b      	strh	r3, [r5, #18]
    31d4:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    31d6:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    31d8:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    31da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    31de:	f105 0028 	add.w	r0, r5, #40	; 0x28
    31e2:	70a3      	strb	r3, [r4, #2]
    31e4:	f003 fd48 	bl	6c78 <FsCache::sync()>
    31e8:	2800      	cmp	r0, #0
    31ea:	d0c3      	beq.n	3174 <FatFile::sync() [clone .part.0]+0x1c>
    31ec:	f505 700e 	add.w	r0, r5, #568	; 0x238
    31f0:	f003 fd42 	bl	6c78 <FsCache::sync()>
    31f4:	2800      	cmp	r0, #0
    31f6:	d0bd      	beq.n	3174 <FatFile::sync() [clone .part.0]+0x1c>
    31f8:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    31fa:	6803      	ldr	r3, [r0, #0]
    31fc:	6a1b      	ldr	r3, [r3, #32]
    31fe:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3200:	2800      	cmp	r0, #0
    3202:	d0b7      	beq.n	3174 <FatFile::sync() [clone .part.0]+0x1c>
    3204:	e7bb      	b.n	317e <FatFile::sync() [clone .part.0]+0x26>
    3206:	bf00      	nop
    3208:	200200a4 	.word	0x200200a4

0000320c <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    320c:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    320e:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    3210:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    3214:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    3216:	6880      	ldr	r0, [r0, #8]
    3218:	4629      	mov	r1, r5
    321a:	f001 f9f3 	bl	4604 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    321e:	b150      	cbz	r0, 3236 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    3220:	b155      	cbz	r5, 3238 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    3222:	6923      	ldr	r3, [r4, #16]
    3224:	3501      	adds	r5, #1
    3226:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3228:	78a3      	ldrb	r3, [r4, #2]
    322a:	bf18      	it	ne
    322c:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3230:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3234:	70a3      	strb	r3, [r4, #2]
}
    3236:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3238:	78a3      	ldrb	r3, [r4, #2]
    323a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    323e:	e7f7      	b.n	3230 <FatFile::addCluster()+0x24>

00003240 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    3240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    3242:	7804      	ldrb	r4, [r0, #0]
    3244:	f014 0420 	ands.w	r4, r4, #32
    3248:	d104      	bne.n	3254 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    324a:	4b1a      	ldr	r3, [pc, #104]	; (32b4 <FatFile::addDirCluster()+0x74>)
    324c:	4605      	mov	r5, r0
    324e:	6942      	ldr	r2, [r0, #20]
    3250:	429a      	cmp	r2, r3
    3252:	d302      	bcc.n	325a <FatFile::addDirCluster()+0x1a>
  return false;
    3254:	2700      	movs	r7, #0
}
    3256:	4638      	mov	r0, r7
    3258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    325a:	f7ff ffd7 	bl	320c <FatFile::addCluster()>
    325e:	4607      	mov	r7, r0
    3260:	2800      	cmp	r0, #0
    3262:	d0f7      	beq.n	3254 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    3264:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3266:	692e      	ldr	r6, [r5, #16]
    3268:	7982      	ldrb	r2, [r0, #6]
    326a:	3e02      	subs	r6, #2
    326c:	6941      	ldr	r1, [r0, #20]
    326e:	4096      	lsls	r6, r2
    3270:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3272:	7901      	ldrb	r1, [r0, #4]
    3274:	b1a9      	cbz	r1, 32a2 <FatFile::addDirCluster()+0x62>
    3276:	4621      	mov	r1, r4
    3278:	e006      	b.n	3288 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    327a:	f009 fae3 	bl	c844 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    327e:	68a8      	ldr	r0, [r5, #8]
    3280:	b2e1      	uxtb	r1, r4
    3282:	7902      	ldrb	r2, [r0, #4]
    3284:	428a      	cmp	r2, r1
    3286:	d90b      	bls.n	32a0 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    3288:	4431      	add	r1, r6
    328a:	2205      	movs	r2, #5
    328c:	3028      	adds	r0, #40	; 0x28
    328e:	3401      	adds	r4, #1
    3290:	f003 fd1e 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    3294:	f44f 7200 	mov.w	r2, #512	; 0x200
    3298:	2100      	movs	r1, #0
    if (!pc) {
    329a:	2800      	cmp	r0, #0
    329c:	d1ed      	bne.n	327a <FatFile::addDirCluster()+0x3a>
    329e:	e7d9      	b.n	3254 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    32a0:	7982      	ldrb	r2, [r0, #6]
    32a2:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    32a6:	6969      	ldr	r1, [r5, #20]
}
    32a8:	4638      	mov	r0, r7
    32aa:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    32ac:	fa11 f383 	uxtah	r3, r1, r3
    32b0:	616b      	str	r3, [r5, #20]
}
    32b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32b4:	001ffe00 	.word	0x001ffe00

000032b8 <FatFile::close()>:
bool FatFile::close() {
    32b8:	b510      	push	{r4, lr}
  if (!isOpen()) {
    32ba:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    32bc:	4604      	mov	r4, r0
  if (!isOpen()) {
    32be:	b12b      	cbz	r3, 32cc <FatFile::close()+0x14>
    32c0:	f7ff ff4a 	bl	3158 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    32c4:	2300      	movs	r3, #0
    32c6:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    32c8:	70a3      	strb	r3, [r4, #2]
}
    32ca:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    32cc:	2300      	movs	r3, #0
    return true;
    32ce:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    32d0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    32d2:	70a3      	strb	r3, [r4, #2]
}
    32d4:	bd10      	pop	{r4, pc}
    32d6:	bf00      	nop

000032d8 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    32d8:	780b      	ldrb	r3, [r1, #0]
    32da:	f013 0f70 	tst.w	r3, #112	; 0x70
    32de:	d101      	bne.n	32e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    32e0:	2000      	movs	r0, #0
    32e2:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    32e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    32e6:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    32ea:	b089      	sub	sp, #36	; 0x24
    32ec:	460d      	mov	r5, r1
    32ee:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    32f0:	f000 fe78 	bl	3fe4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    32f4:	b138      	cbz	r0, 3306 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    32f6:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    32f8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    32fa:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    32fc:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    32fe:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    3300:	f7ff ff9e 	bl	3240 <FatFile::addDirCluster()>
    3304:	b910      	cbnz	r0, 330c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    3306:	2000      	movs	r0, #0
    3308:	b009      	add	sp, #36	; 0x24
    330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    330c:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    330e:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    3310:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    3312:	b16b      	cbz	r3, 3330 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    3314:	6963      	ldr	r3, [r4, #20]
    3316:	b133      	cbz	r3, 3326 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3318:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    331a:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    331c:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    3320:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3324:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    3326:	4620      	mov	r0, r4
    3328:	f7ff ff16 	bl	3158 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    332c:	2800      	cmp	r0, #0
    332e:	d0ea      	beq.n	3306 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    3330:	68a0      	ldr	r0, [r4, #8]
    3332:	2201      	movs	r2, #1
    3334:	69a1      	ldr	r1, [r4, #24]
    3336:	3028      	adds	r0, #40	; 0x28
    3338:	f003 fcca 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    333c:	2800      	cmp	r0, #0
    333e:	d0e2      	beq.n	3306 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    3340:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3344:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    3346:	f00c 0c0f 	and.w	ip, ip, #15
    334a:	ea4f 134c 	mov.w	r3, ip, lsl #5
    334e:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3352:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    3356:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    3358:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    335a:	6a23      	ldr	r3, [r4, #32]
    335c:	f897 e006 	ldrb.w	lr, [r7, #6]
    3360:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    3362:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3366:	f8dc 2008 	ldr.w	r2, [ip, #8]
    336a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    336e:	fa06 f60e 	lsl.w	r6, r6, lr
    3372:	46ee      	mov	lr, sp
    3374:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3378:	f8dc 0010 	ldr.w	r0, [ip, #16]
    337c:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3380:	f8dc 2018 	ldr.w	r2, [ip, #24]
    3384:	f8dc 301c 	ldr.w	r3, [ip, #28]
    3388:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    338c:	697b      	ldr	r3, [r7, #20]
    338e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3392:	2201      	movs	r2, #1
    3394:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    3396:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    339a:	f8cd 3001 	str.w	r3, [sp, #1]
    339e:	f8cd 3005 	str.w	r3, [sp, #5]
    33a2:	f8ad 3009 	strh.w	r3, [sp, #9]
    33a6:	f003 fc93 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    33aa:	4684      	mov	ip, r0
    33ac:	2800      	cmp	r0, #0
    33ae:	d0aa      	beq.n	3306 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    33b0:	272e      	movs	r7, #46	; 0x2e
    33b2:	46ee      	mov	lr, sp
    33b4:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    33b8:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    33ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    33be:	f8cc 0000 	str.w	r0, [ip]
    33c2:	f8cc 1004 	str.w	r1, [ip, #4]
    33c6:	f8cc 2008 	str.w	r2, [ip, #8]
    33ca:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    33ce:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    33d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    33d6:	f8cc 0010 	str.w	r0, [ip, #16]
    33da:	f8cc 1014 	str.w	r1, [ip, #20]
    33de:	f8cc 2018 	str.w	r2, [ip, #24]
    33e2:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    33e6:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    33e8:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    33ea:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    33ee:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    33f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    33f4:	f8cc 0020 	str.w	r0, [ip, #32]
    33f8:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    33fc:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    3400:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    3404:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3406:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    340a:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    340e:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    3412:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    3416:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3418:	f104 0028 	add.w	r0, r4, #40	; 0x28
    341c:	f003 fc2c 	bl	6c78 <FsCache::sync()>
    3420:	2800      	cmp	r0, #0
    3422:	f43f af70 	beq.w	3306 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3426:	f504 700e 	add.w	r0, r4, #568	; 0x238
    342a:	f003 fc25 	bl	6c78 <FsCache::sync()>
    342e:	2800      	cmp	r0, #0
    3430:	f43f af69 	beq.w	3306 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    3434:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    3436:	6803      	ldr	r3, [r0, #0]
    3438:	6a1b      	ldr	r3, [r3, #32]
}
    343a:	b009      	add	sp, #36	; 0x24
    343c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3440:	4718      	bx	r3
    3442:	bf00      	nop

00003444 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    3448:	2600      	movs	r6, #0
    344a:	b094      	sub	sp, #80	; 0x50
    344c:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    344e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3450:	9201      	str	r2, [sp, #4]
    3452:	f8ad 6014 	strh.w	r6, [sp, #20]
    3456:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    3458:	2b00      	cmp	r3, #0
    345a:	d141      	bne.n	34e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    345c:	780b      	ldrb	r3, [r1, #0]
    345e:	460d      	mov	r5, r1
    3460:	f013 0f70 	tst.w	r3, #112	; 0x70
    3464:	d03c      	beq.n	34e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    3466:	7813      	ldrb	r3, [r2, #0]
    3468:	4604      	mov	r4, r0
    346a:	4616      	mov	r6, r2
    346c:	2b2f      	cmp	r3, #47	; 0x2f
    346e:	d03b      	beq.n	34e8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    3470:	2700      	movs	r7, #0
    3472:	e028      	b.n	34c6 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    3474:	9e01      	ldr	r6, [sp, #4]
    3476:	7836      	ldrb	r6, [r6, #0]
    3478:	2e00      	cmp	r6, #0
    347a:	d050      	beq.n	351e <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    347c:	f000 fdb2 	bl	3fe4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3480:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    3482:	aa02      	add	r2, sp, #8
    3484:	4629      	mov	r1, r5
    3486:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    3488:	b92b      	cbnz	r3, 3496 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    348a:	f1b8 0f00 	cmp.w	r8, #0
    348e:	d027      	beq.n	34e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3490:	f7ff ff22 	bl	32d8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3494:	b320      	cbz	r0, 34e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    3496:	46a6      	mov	lr, r4
    3498:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    349c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    34a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    34a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    34a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    34ac:	f8de 5000 	ldr.w	r5, [lr]
    34b0:	4620      	mov	r0, r4
  if (!isOpen()) {
    34b2:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    34b4:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    34b8:	b10b      	cbz	r3, 34be <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    34ba:	f7ff fe4d 	bl	3158 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    34be:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    34c0:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    34c2:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    34c4:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    34c6:	4631      	mov	r1, r6
    34c8:	ab01      	add	r3, sp, #4
    34ca:	aa02      	add	r2, sp, #8
    34cc:	4620      	mov	r0, r4
    34ce:	f000 fed5 	bl	427c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    34d2:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    34d4:	aa02      	add	r2, sp, #8
    34d6:	4629      	mov	r1, r5
    34d8:	2300      	movs	r3, #0
    34da:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    34dc:	2e00      	cmp	r6, #0
    34de:	d1c9      	bne.n	3474 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    34e0:	2000      	movs	r0, #0
}
    34e2:	b014      	add	sp, #80	; 0x50
    34e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    34e8:	3601      	adds	r6, #1
    34ea:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    34ec:	7833      	ldrb	r3, [r6, #0]
    34ee:	2b2f      	cmp	r3, #47	; 0x2f
    34f0:	d0fa      	beq.n	34e8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    34f2:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    34f4:	2224      	movs	r2, #36	; 0x24
    34f6:	2100      	movs	r1, #0
    34f8:	a80b      	add	r0, sp, #44	; 0x2c
    34fa:	f009 f9a3 	bl	c844 <memset>
  m_vol = vol;
    34fe:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    3500:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    3502:	2b10      	cmp	r3, #16
    3504:	d003      	beq.n	350e <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    3506:	2b20      	cmp	r3, #32
    3508:	d00f      	beq.n	352a <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    350a:	2b0c      	cmp	r3, #12
    350c:	d1e8      	bne.n	34e0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    350e:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3510:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    3514:	2301      	movs	r3, #1
    parent = &tmpDir;
    3516:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    3518:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    351c:	e7a8      	b.n	3470 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    351e:	aa02      	add	r2, sp, #8
    3520:	f7ff feda 	bl	32d8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    3524:	b014      	add	sp, #80	; 0x50
    3526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    352a:	2340      	movs	r3, #64	; 0x40
    352c:	e7f0      	b.n	3510 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    352e:	bf00      	nop

00003530 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    3530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3534:	2500      	movs	r5, #0
    3536:	b094      	sub	sp, #80	; 0x50
    3538:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    353a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    353c:	9201      	str	r2, [sp, #4]
    353e:	9502      	str	r5, [sp, #8]
    3540:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    3544:	2b00      	cmp	r3, #0
    3546:	d137      	bne.n	35b8 <FatFile::open(FatFile*, char const*, int)+0x88>
    3548:	780b      	ldrb	r3, [r1, #0]
    354a:	460e      	mov	r6, r1
    354c:	f013 0f70 	tst.w	r3, #112	; 0x70
    3550:	d032      	beq.n	35b8 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    3552:	7813      	ldrb	r3, [r2, #0]
    3554:	4604      	mov	r4, r0
    3556:	4615      	mov	r5, r2
    3558:	2b2f      	cmp	r3, #47	; 0x2f
    355a:	d031      	beq.n	35c0 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    355c:	2700      	movs	r7, #0
    355e:	e01e      	b.n	359e <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    3560:	9d01      	ldr	r5, [sp, #4]
    3562:	782d      	ldrb	r5, [r5, #0]
    3564:	2d00      	cmp	r5, #0
    3566:	d040      	beq.n	35ea <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3568:	f000 fd3c 	bl	3fe4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    356c:	46a6      	mov	lr, r4
    356e:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    3572:	b308      	cbz	r0, 35b8 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    3574:	4666      	mov	r6, ip
  if (!isOpen()) {
    3576:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    3578:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    357c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3580:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3588:	f8de 3000 	ldr.w	r3, [lr]
    358c:	4620      	mov	r0, r4
    358e:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    3592:	b10d      	cbz	r5, 3598 <FatFile::open(FatFile*, char const*, int)+0x68>
    3594:	f7ff fde0 	bl	3158 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3598:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    359a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    359c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    359e:	4629      	mov	r1, r5
    35a0:	ab01      	add	r3, sp, #4
    35a2:	aa0b      	add	r2, sp, #44	; 0x2c
    35a4:	4620      	mov	r0, r4
    35a6:	f000 fe69 	bl	427c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    35aa:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    35ac:	aa0b      	add	r2, sp, #44	; 0x2c
    35ae:	4631      	mov	r1, r6
    35b0:	2300      	movs	r3, #0
    35b2:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    35b4:	2d00      	cmp	r5, #0
    35b6:	d1d3      	bne.n	3560 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    35b8:	2000      	movs	r0, #0
}
    35ba:	b014      	add	sp, #80	; 0x50
    35bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    35c0:	3501      	adds	r5, #1
    35c2:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    35c4:	7829      	ldrb	r1, [r5, #0]
    35c6:	292f      	cmp	r1, #47	; 0x2f
    35c8:	d0fa      	beq.n	35c0 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    35ca:	b9a9      	cbnz	r1, 35f8 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    35cc:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    35ce:	2224      	movs	r2, #36	; 0x24
    35d0:	4620      	mov	r0, r4
    35d2:	f009 f937 	bl	c844 <memset>
  m_vol = vol;
    35d6:	60a5      	str	r5, [r4, #8]
    35d8:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    35da:	2b10      	cmp	r3, #16
    35dc:	d003      	beq.n	35e6 <FatFile::open(FatFile*, char const*, int)+0xb6>
    35de:	2b20      	cmp	r3, #32
    35e0:	d022      	beq.n	3628 <FatFile::open(FatFile*, char const*, int)+0xf8>
    35e2:	2b0c      	cmp	r3, #12
    35e4:	d1e8      	bne.n	35b8 <FatFile::open(FatFile*, char const*, int)+0x88>
    35e6:	2220      	movs	r2, #32
    35e8:	e01f      	b.n	362a <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    35ea:	4643      	mov	r3, r8
    35ec:	aa0b      	add	r2, sp, #44	; 0x2c
    35ee:	f000 fcf9 	bl	3fe4 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    35f2:	b014      	add	sp, #80	; 0x50
    35f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    35f8:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    35fa:	2224      	movs	r2, #36	; 0x24
    35fc:	2100      	movs	r1, #0
    35fe:	a802      	add	r0, sp, #8
    3600:	f009 f920 	bl	c844 <memset>
  m_vol = vol;
    3604:	9604      	str	r6, [sp, #16]
    3606:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3608:	2b10      	cmp	r3, #16
    360a:	d003      	beq.n	3614 <FatFile::open(FatFile*, char const*, int)+0xe4>
    360c:	2b20      	cmp	r3, #32
    360e:	d003      	beq.n	3618 <FatFile::open(FatFile*, char const*, int)+0xe8>
    3610:	2b0c      	cmp	r3, #12
    3612:	d1d1      	bne.n	35b8 <FatFile::open(FatFile*, char const*, int)+0x88>
    3614:	2320      	movs	r3, #32
    3616:	e000      	b.n	361a <FatFile::open(FatFile*, char const*, int)+0xea>
    3618:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    361a:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    361e:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    3620:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    3622:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    3626:	e799      	b.n	355c <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    3628:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    362a:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    362c:	7022      	strb	r2, [r4, #0]
  return true;
    362e:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3630:	70a3      	strb	r3, [r4, #2]
  return true;
    3632:	e7c2      	b.n	35ba <FatFile::open(FatFile*, char const*, int)+0x8a>

00003634 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3634:	b119      	cbz	r1, 363e <FatFile::open(FatVolume*, char const*, int)+0xa>
    3636:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    363a:	f7ff bf79 	b.w	3530 <FatFile::open(FatFile*, char const*, int)>
}
    363e:	4608      	mov	r0, r1
    3640:	4770      	bx	lr
    3642:	bf00      	nop

00003644 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    3644:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    3646:	7805      	ldrb	r5, [r0, #0]
    3648:	b10d      	cbz	r5, 364e <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    364a:	2000      	movs	r0, #0
}
    364c:	bd70      	pop	{r4, r5, r6, pc}
    364e:	460e      	mov	r6, r1
    3650:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    3652:	2224      	movs	r2, #36	; 0x24
    3654:	4629      	mov	r1, r5
    3656:	f009 f8f5 	bl	c844 <memset>
  m_vol = vol;
    365a:	60a6      	str	r6, [r4, #8]
    365c:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    365e:	2b10      	cmp	r3, #16
    3660:	d00b      	beq.n	367a <FatFile::openRoot(FatVolume*)+0x36>
    3662:	2b20      	cmp	r3, #32
    3664:	d003      	beq.n	366e <FatFile::openRoot(FatVolume*)+0x2a>
    3666:	2b0c      	cmp	r3, #12
    3668:	d007      	beq.n	367a <FatFile::openRoot(FatVolume*)+0x36>
    366a:	4628      	mov	r0, r5
}
    366c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    366e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    3670:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3672:	7022      	strb	r2, [r4, #0]
  return true;
    3674:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3676:	70a3      	strb	r3, [r4, #2]
}
    3678:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    367a:	2220      	movs	r2, #32
    367c:	e7f8      	b.n	3670 <FatFile::openRoot(FatVolume*)+0x2c>
    367e:	bf00      	nop

00003680 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    3680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3684:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    3688:	7883      	ldrb	r3, [r0, #2]
    368a:	b083      	sub	sp, #12
    368c:	4605      	mov	r5, r0
  if (!isReadable()) {
    368e:	07df      	lsls	r7, r3, #31
    3690:	f140 808c 	bpl.w	37ac <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    3694:	4688      	mov	r8, r1
    3696:	7801      	ldrb	r1, [r0, #0]
    3698:	4692      	mov	sl, r2
  if (isFile()) {
    369a:	070e      	lsls	r6, r1, #28
    369c:	f100 8091 	bmi.w	37c2 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    36a0:	068c      	lsls	r4, r1, #26
    36a2:	d508      	bpl.n	36b6 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    36a4:	6883      	ldr	r3, [r0, #8]
    36a6:	895a      	ldrh	r2, [r3, #10]
    36a8:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    36aa:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    36ae:	b29b      	uxth	r3, r3
    36b0:	459a      	cmp	sl, r3
    36b2:	bf28      	it	cs
    36b4:	469a      	movcs	sl, r3
  while (toRead) {
    36b6:	f1ba 0f00 	cmp.w	sl, #0
    36ba:	f000 80af 	beq.w	381c <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    36be:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    36c0:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    36c4:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    36c6:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    36c8:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    36cc:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    36d0:	68af      	ldr	r7, [r5, #8]
    36d2:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    36d6:	d53d      	bpl.n	3754 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    36d8:	6a39      	ldr	r1, [r7, #32]
    36da:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    36de:	f1bb 0f00 	cmp.w	fp, #0
    36e2:	d151      	bne.n	3788 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    36e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    36e8:	d34e      	bcc.n	3788 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    36ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    36ec:	4291      	cmp	r1, r2
    36ee:	d04b      	beq.n	3788 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    36f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    36f4:	f0c0 8082 	bcc.w	37fc <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    36f8:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    36fa:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    36fc:	0680      	lsls	r0, r0, #26
    36fe:	d405      	bmi.n	370c <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    3700:	7938      	ldrb	r0, [r7, #4]
    3702:	eba0 0009 	sub.w	r0, r0, r9
    3706:	4283      	cmp	r3, r0
    3708:	bf28      	it	cs
    370a:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    370c:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    370e:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3712:	d80c      	bhi.n	372e <FatFile::read(void*, unsigned int)+0xae>
    3714:	18c8      	adds	r0, r1, r3
    3716:	4282      	cmp	r2, r0
    3718:	d209      	bcs.n	372e <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    371a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    371e:	e9cd 1300 	strd	r1, r3, [sp]
    3722:	f003 faa9 	bl	6c78 <FsCache::sync()>
    3726:	e9dd 1300 	ldrd	r1, r3, [sp]
    372a:	2800      	cmp	r0, #0
    372c:	d03e      	beq.n	37ac <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    372e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3730:	6802      	ldr	r2, [r0, #0]
    3732:	6957      	ldr	r7, [r2, #20]
    3734:	4642      	mov	r2, r8
    3736:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3738:	2800      	cmp	r0, #0
    373a:	d037      	beq.n	37ac <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    373c:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    373e:	1b36      	subs	r6, r6, r4
    dst += n;
    3740:	44a0      	add	r8, r4
    m_curPosition += n;
    3742:	4422      	add	r2, r4
    3744:	616a      	str	r2, [r5, #20]
  while (toRead) {
    3746:	d069      	beq.n	381c <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    3748:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    374a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    374e:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    3750:	0688      	lsls	r0, r1, #26
    3752:	d4c1      	bmi.n	36d8 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3754:	f897 9005 	ldrb.w	r9, [r7, #5]
    3758:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    375c:	f1bb 0f00 	cmp.w	fp, #0
    3760:	d136      	bne.n	37d0 <FatFile::read(void*, unsigned int)+0x150>
    3762:	f1b9 0f00 	cmp.w	r9, #0
    3766:	d133      	bne.n	37d0 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    3768:	2a00      	cmp	r2, #0
    376a:	d133      	bne.n	37d4 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    376c:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    376e:	bf4c      	ite	mi
    3770:	6a3a      	ldrmi	r2, [r7, #32]
    3772:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    3774:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3776:	3a02      	subs	r2, #2
    3778:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    377a:	6979      	ldr	r1, [r7, #20]
    377c:	4082      	lsls	r2, r0
    377e:	4449      	add	r1, r9
    3780:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    3782:	f1bb 0f00 	cmp.w	fp, #0
    3786:	d0ad      	beq.n	36e4 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    3788:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    378c:	2200      	movs	r2, #0
    378e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3792:	42b4      	cmp	r4, r6
    3794:	bf28      	it	cs
    3796:	4634      	movcs	r4, r6
    3798:	f003 fa9a 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    379c:	b130      	cbz	r0, 37ac <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    379e:	eb00 010b 	add.w	r1, r0, fp
    37a2:	4622      	mov	r2, r4
    37a4:	4640      	mov	r0, r8
    37a6:	f004 fdb5 	bl	8314 <memcpy>
    37aa:	e7c7      	b.n	373c <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    37ac:	786b      	ldrb	r3, [r5, #1]
  return -1;
    37ae:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    37b2:	f043 0302 	orr.w	r3, r3, #2
    37b6:	706b      	strb	r3, [r5, #1]
}
    37b8:	b003      	add	sp, #12
    37ba:	ecbd 8b02 	vpop	{d8}
    37be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    37c2:	69c3      	ldr	r3, [r0, #28]
    37c4:	6942      	ldr	r2, [r0, #20]
    37c6:	1a9b      	subs	r3, r3, r2
    37c8:	459a      	cmp	sl, r3
    37ca:	bf28      	it	cs
    37cc:	469a      	movcs	sl, r3
    37ce:	e772      	b.n	36b6 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    37d0:	692a      	ldr	r2, [r5, #16]
    37d2:	e7d0      	b.n	3776 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    37d4:	070b      	lsls	r3, r1, #28
    37d6:	d505      	bpl.n	37e4 <FatFile::read(void*, unsigned int)+0x164>
    37d8:	78aa      	ldrb	r2, [r5, #2]
    37da:	0654      	lsls	r4, r2, #25
    37dc:	d502      	bpl.n	37e4 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    37de:	692a      	ldr	r2, [r5, #16]
    37e0:	3201      	adds	r2, #1
    37e2:	e7c7      	b.n	3774 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    37e4:	ee18 2a10 	vmov	r2, s16
    37e8:	4638      	mov	r0, r7
    37ea:	6929      	ldr	r1, [r5, #16]
    37ec:	f000 ff58 	bl	46a0 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    37f0:	2800      	cmp	r0, #0
    37f2:	dbdb      	blt.n	37ac <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    37f4:	d00c      	beq.n	3810 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    37f6:	68af      	ldr	r7, [r5, #8]
    37f8:	692a      	ldr	r2, [r5, #16]
    37fa:	e7bc      	b.n	3776 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    37fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    37fe:	4642      	mov	r2, r8
    3800:	6803      	ldr	r3, [r0, #0]
    3802:	691b      	ldr	r3, [r3, #16]
    3804:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3806:	2800      	cmp	r0, #0
    3808:	d0d0      	beq.n	37ac <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    380a:	f44f 7400 	mov.w	r4, #512	; 0x200
    380e:	e795      	b.n	373c <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    3810:	782b      	ldrb	r3, [r5, #0]
    3812:	f013 0f70 	tst.w	r3, #112	; 0x70
    3816:	d0c9      	beq.n	37ac <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    3818:	ebaa 0a06 	sub.w	sl, sl, r6
    381c:	4650      	mov	r0, sl
}
    381e:	b003      	add	sp, #12
    3820:	ecbd 8b02 	vpop	{d8}
    3824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003828 <FatFile::peek()>:
int FatFile::peek() {
    3828:	b570      	push	{r4, r5, r6, lr}
    382a:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    382c:	2201      	movs	r2, #1
    382e:	4604      	mov	r4, r0
    3830:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    3834:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    3838:	f7ff ff22 	bl	3680 <FatFile::read(void*, unsigned int)>
    383c:	2801      	cmp	r0, #1
    383e:	bf0c      	ite	eq
    3840:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    3844:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    3848:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    384c:	b002      	add	sp, #8
    384e:	bd70      	pop	{r4, r5, r6, pc}

00003850 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3850:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3852:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3856:	b530      	push	{r4, r5, lr}
    3858:	4604      	mov	r4, r0
    385a:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    385c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3860:	d009      	beq.n	3876 <FatFile::readDirCache(bool)+0x26>
    3862:	2901      	cmp	r1, #1
    3864:	d107      	bne.n	3876 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    3866:	3320      	adds	r3, #32
    3868:	6143      	str	r3, [r0, #20]
    return m_buffer;
    386a:	68a0      	ldr	r0, [r4, #8]
    386c:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    386e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3872:	b003      	add	sp, #12
    3874:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    3876:	2201      	movs	r2, #1
    3878:	f10d 0107 	add.w	r1, sp, #7
    387c:	4620      	mov	r0, r4
    387e:	f7ff feff 	bl	3680 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    3882:	b240      	sxtb	r0, r0
    3884:	2801      	cmp	r0, #1
    3886:	d103      	bne.n	3890 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    3888:	6963      	ldr	r3, [r4, #20]
    388a:	331f      	adds	r3, #31
    388c:	6163      	str	r3, [r4, #20]
    388e:	e7ec      	b.n	386a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3890:	2000      	movs	r0, #0
    3892:	e7ee      	b.n	3872 <FatFile::readDirCache(bool)+0x22>

00003894 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    3898:	7803      	ldrb	r3, [r0, #0]
    389a:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    389c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    389e:	2b00      	cmp	r3, #0
    38a0:	d039      	beq.n	3916 <FatFile::seekSet(unsigned long)+0x82>
    38a2:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    38a4:	6941      	ldr	r1, [r0, #20]
    38a6:	42a9      	cmp	r1, r5
    38a8:	d042      	beq.n	3930 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    38aa:	2d00      	cmp	r5, #0
    38ac:	d037      	beq.n	391e <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    38ae:	0718      	lsls	r0, r3, #28
    38b0:	d52a      	bpl.n	3908 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    38b2:	69e2      	ldr	r2, [r4, #28]
    38b4:	42aa      	cmp	r2, r5
    38b6:	d32e      	bcc.n	3916 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    38b8:	f8d4 c008 	ldr.w	ip, [r4, #8]
    38bc:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    38be:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    38c0:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    38c4:	f012 0f40 	tst.w	r2, #64	; 0x40
    38c8:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    38cc:	b2c0      	uxtb	r0, r0
    38ce:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    38d2:	d130      	bne.n	3936 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    38d4:	1e4a      	subs	r2, r1, #1
    38d6:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    38d8:	b109      	cbz	r1, 38de <FatFile::seekSet(unsigned long)+0x4a>
    38da:	4296      	cmp	r6, r2
    38dc:	d22f      	bcs.n	393e <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    38de:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    38e0:	bf4c      	ite	mi
    38e2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    38e6:	6a23      	ldrpl	r3, [r4, #32]
    38e8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    38ea:	f104 0810 	add.w	r8, r4, #16
    38ee:	e006      	b.n	38fe <FatFile::seekSet(unsigned long)+0x6a>
    38f0:	6921      	ldr	r1, [r4, #16]
    38f2:	3e01      	subs	r6, #1
    38f4:	68a0      	ldr	r0, [r4, #8]
    38f6:	f000 fed3 	bl	46a0 <FatPartition::fatGet(unsigned long, unsigned long*)>
    38fa:	2800      	cmp	r0, #0
    38fc:	dd0b      	ble.n	3916 <FatFile::seekSet(unsigned long)+0x82>
    38fe:	4642      	mov	r2, r8
  while (nNew--) {
    3900:	2e00      	cmp	r6, #0
    3902:	d1f5      	bne.n	38f0 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3904:	78a2      	ldrb	r2, [r4, #2]
    3906:	e00c      	b.n	3922 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    3908:	069a      	lsls	r2, r3, #26
    390a:	d5d5      	bpl.n	38b8 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    390c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    390e:	895b      	ldrh	r3, [r3, #10]
    3910:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    3914:	d9f6      	bls.n	3904 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    3916:	2000      	movs	r0, #0
  m_curCluster = tmp;
    3918:	6127      	str	r7, [r4, #16]
}
    391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    391e:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    3920:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3922:	f022 0220 	bic.w	r2, r2, #32
  return true;
    3926:	2001      	movs	r0, #1
  m_curPosition = pos;
    3928:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    392a:	70a2      	strb	r2, [r4, #2]
}
    392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    3930:	2001      	movs	r0, #1
}
    3932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    3936:	6a23      	ldr	r3, [r4, #32]
    3938:	4433      	add	r3, r6
    393a:	6123      	str	r3, [r4, #16]
    goto done;
    393c:	e7f1      	b.n	3922 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    393e:	1ab6      	subs	r6, r6, r2
    3940:	e7d3      	b.n	38ea <FatFile::seekSet(unsigned long)+0x56>
    3942:	bf00      	nop

00003944 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    3944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3948:	460e      	mov	r6, r1
    394a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    394c:	2100      	movs	r1, #0
    394e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3950:	4604      	mov	r4, r0
    3952:	4698      	mov	r8, r3
    3954:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    3958:	f008 ff74 	bl	c844 <memset>
  m_vol = dirFile->m_vol;
    395c:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    395e:	6a33      	ldr	r3, [r6, #32]
    3960:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    3964:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    3966:	f005 050f 	and.w	r5, r5, #15
    396a:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    396e:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3972:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    3974:	070b      	lsls	r3, r1, #28
    3976:	d411      	bmi.n	399c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    3978:	f001 0117 	and.w	r1, r1, #23
    397c:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    397e:	7ad3      	ldrb	r3, [r2, #11]
    3980:	f013 0f18 	tst.w	r3, #24
    3984:	d102      	bne.n	398c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    3986:	f041 0108 	orr.w	r1, r1, #8
    398a:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    398c:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3990:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3992:	2b01      	cmp	r3, #1
    3994:	d038      	beq.n	3a08 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    3996:	2b02      	cmp	r3, #2
    3998:	d006      	beq.n	39a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    399a:	b1f3      	cbz	r3, 39da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    399c:	2300      	movs	r3, #0
  return false;
    399e:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    39a0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    39a2:	70a3      	strb	r3, [r4, #2]
}
    39a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    39a8:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    39aa:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    39ac:	06cd      	lsls	r5, r1, #27
    39ae:	d4f5      	bmi.n	399c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    39b0:	07ce      	lsls	r6, r1, #31
    39b2:	d4f3      	bmi.n	399c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    39b4:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    39b8:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    39bc:	ea43 0301 	orr.w	r3, r3, r1
    39c0:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    39c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    39c4:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    39c6:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    39c8:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    39ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    39ce:	d012      	beq.n	39f6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    39d0:	bb19      	cbnz	r1, 3a1a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    39d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    39d6:	70a3      	strb	r3, [r4, #2]
    39d8:	e010      	b.n	39fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    39da:	f418 6f80 	tst.w	r8, #1024	; 0x400
    39de:	d1dd      	bne.n	399c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    39e0:	f008 0308 	and.w	r3, r8, #8
    39e4:	f043 0301 	orr.w	r3, r3, #1
    39e8:	70a3      	strb	r3, [r4, #2]
    39ea:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    39ec:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    39ee:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    39f0:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    39f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    39f6:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    39f8:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    39fa:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    39fc:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    3a00:	d104      	bne.n	3a0c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    3a02:	2001      	movs	r0, #1
}
    3a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    3a08:	2302      	movs	r3, #2
    3a0a:	e7ce      	b.n	39aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3a0c:	69e1      	ldr	r1, [r4, #28]
    3a0e:	4620      	mov	r0, r4
    3a10:	f7ff ff40 	bl	3894 <FatFile::seekSet(unsigned long)>
    3a14:	2800      	cmp	r0, #0
    3a16:	d1f4      	bne.n	3a02 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    3a18:	e7c0      	b.n	399c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3a1a:	f000 fe53 	bl	46c4 <FatPartition::freeChain(unsigned long)>
    3a1e:	2800      	cmp	r0, #0
    3a20:	d0bc      	beq.n	399c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3a22:	78a3      	ldrb	r3, [r4, #2]
    3a24:	e7d5      	b.n	39d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    3a26:	bf00      	nop

00003a28 <FatFile::sync()>:
  if (!isOpen()) {
    3a28:	7803      	ldrb	r3, [r0, #0]
    3a2a:	b10b      	cbz	r3, 3a30 <FatFile::sync()+0x8>
    3a2c:	f7ff bb94 	b.w	3158 <FatFile::sync() [clone .part.0]>
}
    3a30:	2001      	movs	r0, #1
    3a32:	4770      	bx	lr

00003a34 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    3a38:	7883      	ldrb	r3, [r0, #2]
    3a3a:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3a3c:	079c      	lsls	r4, r3, #30
    3a3e:	d577      	bpl.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3a40:	4688      	mov	r8, r1
    3a42:	0719      	lsls	r1, r3, #28
    3a44:	4691      	mov	r9, r2
    3a46:	f100 80b5 	bmi.w	3bb4 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3a4a:	696b      	ldr	r3, [r5, #20]
    3a4c:	eb13 0209 	adds.w	r2, r3, r9
    3a50:	d26e      	bcs.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3a52:	f1b9 0f00 	cmp.w	r9, #0
    3a56:	d040      	beq.n	3ada <FatFile::write(void const*, unsigned int)+0xa6>
    3a58:	464f      	mov	r7, r9
    m_status = 0;
    3a5a:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3a5e:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3a60:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3a64:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3a66:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3a68:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3a6c:	d13f      	bne.n	3aee <FatFile::write(void const*, unsigned int)+0xba>
    3a6e:	2e00      	cmp	r6, #0
    3a70:	d13d      	bne.n	3aee <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3a72:	2900      	cmp	r1, #0
    3a74:	d06e      	beq.n	3b54 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3a76:	78aa      	ldrb	r2, [r5, #2]
    3a78:	0652      	lsls	r2, r2, #25
    3a7a:	d576      	bpl.n	3b6a <FatFile::write(void const*, unsigned int)+0x136>
    3a7c:	69ea      	ldr	r2, [r5, #28]
    3a7e:	429a      	cmp	r2, r3
    3a80:	d973      	bls.n	3b6a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3a82:	3101      	adds	r1, #1
    3a84:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3a86:	3902      	subs	r1, #2
    3a88:	7982      	ldrb	r2, [r0, #6]
    3a8a:	6943      	ldr	r3, [r0, #20]
    3a8c:	4091      	lsls	r1, r2
    3a8e:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3a90:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3a94:	d353      	bcc.n	3b3e <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    3a96:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3a9a:	d370      	bcc.n	3b7e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3a9c:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3a9e:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3aa0:	1b1b      	subs	r3, r3, r4
    3aa2:	4293      	cmp	r3, r2
    3aa4:	bf28      	it	cs
    3aa6:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3aa8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    3aaa:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3aac:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3ab0:	d307      	bcc.n	3ac2 <FatFile::write(void const*, unsigned int)+0x8e>
    3ab2:	185e      	adds	r6, r3, r1
    3ab4:	42b2      	cmp	r2, r6
    3ab6:	d204      	bcs.n	3ac2 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3ab8:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3abc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3ac0:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    3ac2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3ac4:	4642      	mov	r2, r8
    3ac6:	6806      	ldr	r6, [r0, #0]
    3ac8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    3aca:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3acc:	b380      	cbz	r0, 3b30 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3ace:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3ad0:	1b3f      	subs	r7, r7, r4
    src += n;
    3ad2:	44a0      	add	r8, r4
    m_curPosition += n;
    3ad4:	4423      	add	r3, r4
    3ad6:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3ad8:	d1c1      	bne.n	3a5e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3ada:	69ea      	ldr	r2, [r5, #28]
    3adc:	429a      	cmp	r2, r3
    3ade:	d276      	bcs.n	3bce <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3ae0:	78aa      	ldrb	r2, [r5, #2]
    3ae2:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3ae4:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3ae6:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3aea:	70ab      	strb	r3, [r5, #2]
    3aec:	e025      	b.n	3b3a <FatFile::write(void const*, unsigned int)+0x106>
    3aee:	7982      	ldrb	r2, [r0, #6]
    3af0:	3902      	subs	r1, #2
    3af2:	6943      	ldr	r3, [r0, #20]
    3af4:	4091      	lsls	r1, r2
    3af6:	4419      	add	r1, r3
                      + sectorOfCluster;
    3af8:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3afa:	2e00      	cmp	r6, #0
    3afc:	d0c8      	beq.n	3a90 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3afe:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3b02:	2201      	movs	r2, #1
    3b04:	42bc      	cmp	r4, r7
    3b06:	bf28      	it	cs
    3b08:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3b0a:	3028      	adds	r0, #40	; 0x28
    3b0c:	f003 f8e0 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3b10:	b170      	cbz	r0, 3b30 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3b12:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3b14:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3b16:	4622      	mov	r2, r4
    3b18:	4641      	mov	r1, r8
    3b1a:	f004 fbfb 	bl	8314 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3b1e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3b22:	68a8      	ldr	r0, [r5, #8]
    3b24:	d1d3      	bne.n	3ace <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    3b26:	3028      	adds	r0, #40	; 0x28
    3b28:	f003 f8a6 	bl	6c78 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3b2c:	2800      	cmp	r0, #0
    3b2e:	d1ce      	bne.n	3ace <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3b30:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3b32:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3b34:	f043 0301 	orr.w	r3, r3, #1
    3b38:	706b      	strb	r3, [r5, #1]
}
    3b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3b3e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3b42:	696a      	ldr	r2, [r5, #20]
    3b44:	69eb      	ldr	r3, [r5, #28]
    3b46:	42bc      	cmp	r4, r7
    3b48:	bf28      	it	cs
    3b4a:	463c      	movcs	r4, r7
    3b4c:	429a      	cmp	r2, r3
    3b4e:	d305      	bcc.n	3b5c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3b50:	2205      	movs	r2, #5
    3b52:	e7da      	b.n	3b0a <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3b54:	6a29      	ldr	r1, [r5, #32]
    3b56:	b321      	cbz	r1, 3ba2 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3b58:	6129      	str	r1, [r5, #16]
    3b5a:	e794      	b.n	3a86 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3b5c:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3b5e:	f013 0f20 	tst.w	r3, #32
    3b62:	bf14      	ite	ne
    3b64:	2205      	movne	r2, #5
    3b66:	2201      	moveq	r2, #1
    3b68:	e7cf      	b.n	3b0a <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3b6a:	f105 0210 	add.w	r2, r5, #16
    3b6e:	f000 fd97 	bl	46a0 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3b72:	2800      	cmp	r0, #0
    3b74:	dbdc      	blt.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3b76:	d024      	beq.n	3bc2 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3b78:	68a8      	ldr	r0, [r5, #8]
    3b7a:	6929      	ldr	r1, [r5, #16]
    3b7c:	e783      	b.n	3a86 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3b7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3b80:	428b      	cmp	r3, r1
    3b82:	d104      	bne.n	3b8e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3b84:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3b88:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3b8c:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    3b8e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3b90:	4642      	mov	r2, r8
    3b92:	6803      	ldr	r3, [r0, #0]
    3b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b96:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3b98:	2800      	cmp	r0, #0
    3b9a:	d0c9      	beq.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3b9c:	f44f 7400 	mov.w	r4, #512	; 0x200
    3ba0:	e795      	b.n	3ace <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3ba2:	4628      	mov	r0, r5
    3ba4:	f7ff fb32 	bl	320c <FatFile::addCluster()>
    3ba8:	2800      	cmp	r0, #0
    3baa:	d0c1      	beq.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3bac:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3bae:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3bb0:	6229      	str	r1, [r5, #32]
    3bb2:	e768      	b.n	3a86 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3bb4:	69c1      	ldr	r1, [r0, #28]
    3bb6:	f7ff fe6d 	bl	3894 <FatFile::seekSet(unsigned long)>
    3bba:	2800      	cmp	r0, #0
    3bbc:	f47f af45 	bne.w	3a4a <FatFile::write(void const*, unsigned int)+0x16>
    3bc0:	e7b6      	b.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3bc2:	4628      	mov	r0, r5
    3bc4:	f7ff fb22 	bl	320c <FatFile::addCluster()>
    3bc8:	2800      	cmp	r0, #0
    3bca:	d1d5      	bne.n	3b78 <FatFile::write(void const*, unsigned int)+0x144>
    3bcc:	e7b0      	b.n	3b30 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3bce:	4b05      	ldr	r3, [pc, #20]	; (3be4 <FatFile::write(void const*, unsigned int)+0x1b0>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	b12b      	cbz	r3, 3be0 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3bd4:	78ab      	ldrb	r3, [r5, #2]
    3bd6:	4648      	mov	r0, r9
    3bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bdc:	70ab      	strb	r3, [r5, #2]
    3bde:	e7ac      	b.n	3b3a <FatFile::write(void const*, unsigned int)+0x106>
    3be0:	4648      	mov	r0, r9
    3be2:	e7aa      	b.n	3b3a <FatFile::write(void const*, unsigned int)+0x106>
    3be4:	200200a4 	.word	0x200200a4

00003be8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3bec:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3bee:	b08d      	sub	sp, #52	; 0x34
    3bf0:	4614      	mov	r4, r2
    next = begin;
    3bf2:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3bf4:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3bf6:	4606      	mov	r6, r0
    3bf8:	4689      	mov	r9, r1
  FatFile dir = *this;
    3bfa:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3bfc:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    3bfe:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    3c02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3c06:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3c08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3c0c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3c0e:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    3c12:	6065      	str	r5, [r4, #4]
    3c14:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3c16:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    3c18:	f8a4 e00c 	strh.w	lr, [r4, #12]
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d03f      	beq.n	3ca0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    3c20:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3c24:	eba9 010a 	sub.w	r1, r9, sl
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3c28:	a803      	add	r0, sp, #12
    3c2a:	b289      	uxth	r1, r1
    3c2c:	0149      	lsls	r1, r1, #5
    3c2e:	f7ff fe31 	bl	3894 <FatFile::seekSet(unsigned long)>
    3c32:	b350      	cbz	r0, 3c8a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3c34:	2100      	movs	r1, #0
    3c36:	a803      	add	r0, sp, #12
    3c38:	f7ff fe0a 	bl	3850 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3c3c:	4607      	mov	r7, r0
    3c3e:	b320      	cbz	r0, 3c8a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3c40:	2500      	movs	r5, #0
    3c42:	e00d      	b.n	3c60 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    3c44:	f003 f86c 	bl	6d20 <FsName::get16()>
    3c48:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    3c4a:	4658      	mov	r0, fp
    3c4c:	f003 f8da 	bl	6e04 <toUpcase(unsigned short)>
    3c50:	4683      	mov	fp, r0
    3c52:	4640      	mov	r0, r8
    3c54:	f003 f8d6 	bl	6e04 <toUpcase(unsigned short)>
    3c58:	4583      	cmp	fp, r0
    3c5a:	d116      	bne.n	3c8a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    3c5c:	2d0d      	cmp	r5, #13
    3c5e:	d018      	beq.n	3c92 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    3c60:	b2ea      	uxtb	r2, r5
    3c62:	4639      	mov	r1, r7
    3c64:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3c66:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    3c68:	f000 fb90 	bl	438c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    3c6c:	89a3      	ldrh	r3, [r4, #12]
    3c6e:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    3c70:	4620      	mov	r0, r4
    3c72:	2b00      	cmp	r3, #0
    3c74:	d1e6      	bne.n	3c44 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    3c76:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3c7a:	4293      	cmp	r3, r2
    3c7c:	d1e2      	bne.n	3c44 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    3c7e:	fabb f08b 	clz	r0, fp
    3c82:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    3c84:	b00d      	add	sp, #52	; 0x34
    3c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    3c8a:	2000      	movs	r0, #0
}
    3c8c:	b00d      	add	sp, #52	; 0x34
    3c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3c92:	f10a 0a01 	add.w	sl, sl, #1
    3c96:	9b01      	ldr	r3, [sp, #4]
    3c98:	fa5f fa8a 	uxtb.w	sl, sl
    3c9c:	4553      	cmp	r3, sl
    3c9e:	d2c1      	bcs.n	3c24 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    3ca0:	2001      	movs	r0, #1
    3ca2:	e7ef      	b.n	3c84 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00003ca4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3ca8:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3caa:	b08d      	sub	sp, #52	; 0x34
    3cac:	4616      	mov	r6, r2
    3cae:	469a      	mov	sl, r3
  FatFile dir = *this;
    3cb0:	f10d 0c0c 	add.w	ip, sp, #12
    3cb4:	f102 0415 	add.w	r4, r2, #21
    3cb8:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3cbc:	9101      	str	r1, [sp, #4]
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    3cbe:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    3cc2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3cc8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	f8cc 3000 	str.w	r3, [ip]
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3cd4:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    3cd8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    3cdc:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3ce0:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3ce2:	fa52 f383 	uxtab	r3, r2, r3
    3ce6:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    3cea:	d1f3      	bne.n	3cd4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    3cec:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    3cee:	f04f 0800 	mov.w	r8, #0
    next = begin;
    3cf2:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    3cf4:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3cf8:	f1ba 0f00 	cmp.w	sl, #0
    3cfc:	d04e      	beq.n	3d9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    3cfe:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3d00:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3d02:	a803      	add	r0, sp, #12
    3d04:	1bd9      	subs	r1, r3, r7
    3d06:	b289      	uxth	r1, r1
    3d08:	0149      	lsls	r1, r1, #5
    3d0a:	f7ff fdc3 	bl	3894 <FatFile::seekSet(unsigned long)>
    3d0e:	2800      	cmp	r0, #0
    3d10:	d055      	beq.n	3dbe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    3d12:	2100      	movs	r1, #0
    3d14:	a803      	add	r0, sp, #12
    3d16:	f7ff fd9b 	bl	3850 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3d1a:	2800      	cmp	r0, #0
    3d1c:	d04f      	beq.n	3dbe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3d1e:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d20:	4557      	cmp	r7, sl
    3d22:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d26:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    3d2a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    3d2e:	f04f 0500 	mov.w	r5, #0
    3d32:	f043 0301 	orr.w	r3, r3, #1
    3d36:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3d3a:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d3e:	bf0c      	ite	eq
    3d40:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    3d44:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3d46:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    3d48:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d4c:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    3d4e:	7303      	strb	r3, [r0, #12]
    3d50:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    3d54:	f880 900d 	strb.w	r9, [r0, #13]
    3d58:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3d5a:	e006      	b.n	3d6a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    3d5c:	f8ab 0000 	strh.w	r0, [fp]
    3d60:	3401      	adds	r4, #1
    3d62:	3501      	adds	r5, #1
    3d64:	f10b 0b02 	add.w	fp, fp, #2
    3d68:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    3d6a:	89b0      	ldrh	r0, [r6, #12]
    3d6c:	b918      	cbnz	r0, 3d76 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    3d6e:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    3d72:	429a      	cmp	r2, r3
    3d74:	d016      	beq.n	3da4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    3d76:	4630      	mov	r0, r6
    3d78:	f002 ffd2 	bl	6d20 <FsName::get16()>
  if (i < 5) {
    3d7c:	2d04      	cmp	r5, #4
    3d7e:	b2eb      	uxtb	r3, r5
    3d80:	d9ec      	bls.n	3d5c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    3d82:	2b0a      	cmp	r3, #10
    3d84:	d802      	bhi.n	3d8c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    3d86:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    3d8a:	e7e9      	b.n	3d60 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    3d8c:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d8e:	f8ab 0005 	strh.w	r0, [fp, #5]
    3d92:	d1e5      	bne.n	3d60 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3d94:	3701      	adds	r7, #1
    3d96:	b2ff      	uxtb	r7, r7
    3d98:	45ba      	cmp	sl, r7
    3d9a:	d2b1      	bcs.n	3d00 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3d9c:	2001      	movs	r0, #1

 fail:
  return false;
}
    3d9e:	b00d      	add	sp, #52	; 0x34
    3da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    3da4:	f1b8 0f00 	cmp.w	r8, #0
    3da8:	d006      	beq.n	3db8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3daa:	f108 0801 	add.w	r8, r8, #1
    3dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3db2:	fa5f f888 	uxtb.w	r8, r8
    3db6:	e7e1      	b.n	3d7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    3db8:	f04f 0801 	mov.w	r8, #1
    3dbc:	e7de      	b.n	3d7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    3dbe:	2000      	movs	r0, #0
}
    3dc0:	b00d      	add	sp, #52	; 0x34
    3dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dc6:	bf00      	nop

00003dc8 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3dc8:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3dca:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3dce:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    3dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3dd6:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3dda:	4686      	mov	lr, r0
  const char* end = fname->end;
    3ddc:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3dde:	6051      	str	r1, [r2, #4]
    3de0:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3de4:	781a      	ldrb	r2, [r3, #0]
    3de6:	2a2e      	cmp	r2, #46	; 0x2e
    3de8:	bf14      	ite	ne
    3dea:	2001      	movne	r0, #1
    3dec:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    3dee:	d103      	bne.n	3df8 <FatFile::makeSFN(FatLfn_t*)+0x30>
    3df0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3df4:	2a2e      	cmp	r2, #46	; 0x2e
    3df6:	d0fb      	beq.n	3df0 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    3df8:	1e61      	subs	r1, r4, #1
    3dfa:	4299      	cmp	r1, r3
    3dfc:	d90b      	bls.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3dfe:	460a      	mov	r2, r1
    3e00:	e002      	b.n	3e08 <FatFile::makeSFN(FatLfn_t*)+0x40>
    3e02:	4293      	cmp	r3, r2
    3e04:	4611      	mov	r1, r2
    3e06:	d006      	beq.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3e08:	4611      	mov	r1, r2
    3e0a:	3a01      	subs	r2, #1
    3e0c:	f891 c000 	ldrb.w	ip, [r1]
    3e10:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3e14:	d1f5      	bne.n	3e02 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    3e16:	429c      	cmp	r4, r3
    3e18:	f04f 0500 	mov.w	r5, #0
    3e1c:	f240 8086 	bls.w	3f2c <FatFile::makeSFN(FatLfn_t*)+0x164>
    3e20:	2607      	movs	r6, #7
    3e22:	2708      	movs	r7, #8
    3e24:	46a9      	mov	r9, r5
    3e26:	46a8      	mov	r8, r5
    3e28:	e006      	b.n	3e38 <FatFile::makeSFN(FatLfn_t*)+0x70>
    3e2a:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    3e2c:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    3e2e:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3e32:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3e34:	429c      	cmp	r4, r3
    3e36:	d95b      	bls.n	3ef0 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3e38:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3e3a:	2a2e      	cmp	r2, #46	; 0x2e
    3e3c:	bf08      	it	eq
    3e3e:	4299      	cmpeq	r1, r3
    3e40:	d0f3      	beq.n	3e2a <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    3e42:	2a22      	cmp	r2, #34	; 0x22
    3e44:	d00d      	beq.n	3e62 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3e46:	2a7c      	cmp	r2, #124	; 0x7c
    3e48:	d00b      	beq.n	3e62 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3e4a:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    3e4e:	f1bc 0f02 	cmp.w	ip, #2
    3e52:	d906      	bls.n	3e62 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    3e54:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    3e58:	f1bc 0f05 	cmp.w	ip, #5
    3e5c:	d821      	bhi.n	3ea2 <FatFile::makeSFN(FatLfn_t*)+0xda>
    3e5e:	2a2d      	cmp	r2, #45	; 0x2d
    3e60:	d01f      	beq.n	3ea2 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    3e62:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3e66:	2a80      	cmp	r2, #128	; 0x80
    3e68:	d05d      	beq.n	3f26 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    3e6a:	454e      	cmp	r6, r9
    3e6c:	d22f      	bcs.n	3ece <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    3e6e:	4299      	cmp	r1, r3
    3e70:	bf2c      	ite	cs
    3e72:	2000      	movcs	r0, #0
    3e74:	2001      	movcc	r0, #1
    3e76:	2e0a      	cmp	r6, #10
    3e78:	bf08      	it	eq
    3e7a:	f040 0001 	orreq.w	r0, r0, #1
    3e7e:	2800      	cmp	r0, #0
    3e80:	d047      	beq.n	3f12 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3e82:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3e86:	2b20      	cmp	r3, #32
    3e88:	d040      	beq.n	3f0c <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3e8a:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3e8e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3e90:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3e92:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    3e94:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3e96:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    3e9a:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    3e9c:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    3e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ea2:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    3ea6:	f1bc 0f05 	cmp.w	ip, #5
    3eaa:	d9da      	bls.n	3e62 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    3eac:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    3eb0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    3eb4:	d8d5      	bhi.n	3e62 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    3eb6:	454e      	cmp	r6, r9
    3eb8:	d3d9      	bcc.n	3e6e <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    3eba:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    3ebe:	f1bc 0f19 	cmp.w	ip, #25
    3ec2:	d828      	bhi.n	3f16 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    3ec4:	3a20      	subs	r2, #32
        lc |= bit;
    3ec6:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    3ec8:	b2d2      	uxtb	r2, r2
        lc |= bit;
    3eca:	b2ed      	uxtb	r5, r5
    3ecc:	e001      	b.n	3ed2 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    3ece:	2000      	movs	r0, #0
        c = '_';
    3ed0:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    3ed2:	f109 0c01 	add.w	ip, r9, #1
    3ed6:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    3ed8:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    3eda:	f889 2016 	strb.w	r2, [r9, #22]
    3ede:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    3ee2:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    3ee4:	4691      	mov	r9, r2
    3ee6:	bf98      	it	ls
    3ee8:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    3eec:	429c      	cmp	r4, r3
    3eee:	d8a3      	bhi.n	3e38 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    3ef0:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3ef4:	2b20      	cmp	r3, #32
    3ef6:	d009      	beq.n	3f0c <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    3ef8:	2800      	cmp	r0, #0
    3efa:	d0c6      	beq.n	3e8a <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    3efc:	ea18 0f05 	tst.w	r8, r5
    3f00:	bf18      	it	ne
    3f02:	2502      	movne	r5, #2
    3f04:	f88e 5015 	strb.w	r5, [lr, #21]
}
    3f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    3f0c:	2000      	movs	r0, #0
}
    3f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f12:	460b      	mov	r3, r1
    3f14:	e78e      	b.n	3e34 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    3f16:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    3f1a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    3f1e:	bf98      	it	ls
    3f20:	ea47 0808 	orrls.w	r8, r7, r8
    3f24:	e7d5      	b.n	3ed2 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    3f26:	3301      	adds	r3, #1
        is83 = false;
    3f28:	2000      	movs	r0, #0
    3f2a:	e783      	b.n	3e34 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    3f2c:	46a8      	mov	r8, r5
    3f2e:	e7df      	b.n	3ef0 <FatFile::makeSFN(FatLfn_t*)+0x128>

00003f30 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    3f34:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    3f38:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3f3a:	460f      	mov	r7, r1
    3f3c:	4604      	mov	r4, r0
    3f3e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3fe0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    3f42:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    3f46:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3f4a:	f101 0616 	add.w	r6, r1, #22
    3f4e:	f1b8 0f03 	cmp.w	r8, #3
    3f52:	f8db 3000 	ldr.w	r3, [fp]
    3f56:	bf28      	it	cs
    3f58:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    3f5c:	442b      	add	r3, r5
    3f5e:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f60:	f108 0304 	add.w	r3, r8, #4
    3f64:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    3f66:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f6a:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    3f6c:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3f6e:	2a09      	cmp	r2, #9
    3f70:	f102 0137 	add.w	r1, r2, #55	; 0x37
    3f74:	bf98      	it	ls
    3f76:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    3f7a:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f7c:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3f7e:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f80:	4598      	cmp	r8, r3
    3f82:	d1f0      	bne.n	3f66 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    3f84:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    3f88:	2100      	movs	r1, #0
    3f8a:	4620      	mov	r0, r4
    3f8c:	f883 a016 	strb.w	sl, [r3, #22]
    3f90:	f7ff fc80 	bl	3894 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    3f94:	2101      	movs	r1, #1
    3f96:	4620      	mov	r0, r4
    3f98:	f7ff fc5a 	bl	3850 <FatFile::readDirCache(bool)>
    3f9c:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3f9e:	220b      	movs	r2, #11
    3fa0:	4630      	mov	r0, r6
      if (!dir) {
    3fa2:	b19b      	cbz	r3, 3fcc <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    3fa4:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3fa8:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    3faa:	f1bc 0f00 	cmp.w	ip, #0
    3fae:	d013      	beq.n	3fd8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3fb0:	7adb      	ldrb	r3, [r3, #11]
    3fb2:	071b      	lsls	r3, r3, #28
    3fb4:	d4ee      	bmi.n	3f94 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    3fb6:	f008 fb99 	bl	c6ec <memcmp>
    3fba:	2800      	cmp	r0, #0
    3fbc:	d1ea      	bne.n	3f94 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    3fbe:	f109 39ff 	add.w	r9, r9, #4294967295
    3fc2:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    3fc6:	d1c2      	bne.n	3f4e <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    3fc8:	4648      	mov	r0, r9
 fail:
    3fca:	e003      	b.n	3fd4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    3fcc:	7860      	ldrb	r0, [r4, #1]
    3fce:	fab0 f080 	clz	r0, r0
    3fd2:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    3fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    3fd8:	2001      	movs	r0, #1
}
    3fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fde:	bf00      	nop
    3fe0:	20022564 	.word	0x20022564

00003fe4 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    3fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fe8:	ed2d 8b02 	vpush	{d8}
    3fec:	b08b      	sub	sp, #44	; 0x2c
    3fee:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    3ff2:	688b      	ldr	r3, [r1, #8]
    3ff4:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    3ff6:	780b      	ldrb	r3, [r1, #0]
    3ff8:	f013 0f70 	tst.w	r3, #112	; 0x70
    3ffc:	d053      	beq.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    3ffe:	9b02      	ldr	r3, [sp, #8]
    4000:	781b      	ldrb	r3, [r3, #0]
    4002:	2b00      	cmp	r3, #0
    4004:	d14f      	bne.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    4006:	6913      	ldr	r3, [r2, #16]
    4008:	4690      	mov	r8, r2
    400a:	4a9a      	ldr	r2, [pc, #616]	; (4274 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    400c:	460e      	mov	r6, r1
    400e:	330c      	adds	r3, #12
    4010:	fba2 2303 	umull	r2, r3, r2, r3
    4014:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    4018:	f898 3015 	ldrb.w	r3, [r8, #21]
    401c:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    401e:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    4020:	f000 80a7 	beq.w	4172 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    4024:	1c57      	adds	r7, r2, #1
    4026:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    4028:	2300      	movs	r3, #0
    seekSet(0);
    402a:	4630      	mov	r0, r6
    402c:	4619      	mov	r1, r3
    402e:	461c      	mov	r4, r3
    4030:	9306      	str	r3, [sp, #24]
    4032:	f7ff fc2f 	bl	3894 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4036:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    403a:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    403c:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    403e:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4040:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    4044:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4046:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    4048:	2100      	movs	r1, #0
    404a:	4630      	mov	r0, r6
    404c:	f7ff fc00 	bl	3850 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4050:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    4054:	4603      	mov	r3, r0
    4056:	b320      	cbz	r0, 40a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    4058:	7802      	ldrb	r2, [r0, #0]
    405a:	2ae5      	cmp	r2, #229	; 0xe5
    405c:	d029      	beq.n	40b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    405e:	b342      	cbz	r2, 40b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    4060:	42bc      	cmp	r4, r7
    4062:	bf38      	it	cc
    4064:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    4066:	2a2e      	cmp	r2, #46	; 0x2e
    4068:	d02b      	beq.n	40c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    406a:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    406e:	f1bc 0f0f 	cmp.w	ip, #15
    4072:	d054      	beq.n	411e <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    4074:	f01c 0c08 	ands.w	ip, ip, #8
    4078:	d123      	bne.n	40c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    407a:	f1b9 0f00 	cmp.w	r9, #0
    407e:	f040 80d5 	bne.w	422c <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4082:	220b      	movs	r2, #11
    4084:	ee18 1a10 	vmov	r1, s16
    4088:	f008 fb30 	bl	c6ec <memcmp>
    408c:	2800      	cmp	r0, #0
    408e:	d1da      	bne.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    4090:	f898 3015 	ldrb.w	r3, [r8, #21]
    4094:	f013 0301 	ands.w	r3, r3, #1
    4098:	f000 80e4 	beq.w	4264 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    409c:	2301      	movs	r3, #1
    409e:	9305      	str	r3, [sp, #20]
    40a0:	e7d1      	b.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    40a2:	7873      	ldrb	r3, [r6, #1]
    40a4:	b183      	cbz	r3, 40c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    40a6:	2000      	movs	r0, #0
}
    40a8:	b00b      	add	sp, #44	; 0x2c
    40aa:	ecbd 8b02 	vpop	{d8}
    40ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    40b2:	2c00      	cmp	r4, #0
    40b4:	bf08      	it	eq
    40b6:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    40b8:	42bc      	cmp	r4, r7
    40ba:	d201      	bcs.n	40c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    40bc:	3401      	adds	r4, #1
    40be:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    40c0:	b112      	cbz	r2, 40c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    40c2:	f04f 0900 	mov.w	r9, #0
    40c6:	e7be      	b.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    40c8:	9b03      	ldr	r3, [sp, #12]
    40ca:	059a      	lsls	r2, r3, #22
    40cc:	d5eb      	bpl.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    40ce:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    40d2:	3b01      	subs	r3, #1
    40d4:	2b01      	cmp	r3, #1
    40d6:	d8e6      	bhi.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    40d8:	2c00      	cmp	r4, #0
    40da:	bf08      	it	eq
    40dc:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    40de:	42bc      	cmp	r4, r7
    40e0:	d303      	bcc.n	40ea <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    40e2:	e048      	b.n	4176 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    40e4:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    40e6:	42a7      	cmp	r7, r4
    40e8:	d045      	beq.n	4176 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    40ea:	2100      	movs	r1, #0
    40ec:	4630      	mov	r0, r6
    40ee:	f7ff fbaf 	bl	3850 <FatFile::readDirCache(bool)>
    freeFound++;
    40f2:	1c63      	adds	r3, r4, #1
    if (!dir) {
    40f4:	2800      	cmp	r0, #0
    40f6:	d1f5      	bne.n	40e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    40f8:	7873      	ldrb	r3, [r6, #1]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d1d3      	bne.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    40fe:	42a7      	cmp	r7, r4
    4100:	d939      	bls.n	4176 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    4102:	9d07      	ldr	r5, [sp, #28]
    4104:	e005      	b.n	4112 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    4106:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    4108:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    410c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    410e:	42a7      	cmp	r7, r4
    4110:	d931      	bls.n	4176 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    4112:	4630      	mov	r0, r6
    4114:	f7ff f894 	bl	3240 <FatFile::addDirCluster()>
    4118:	2800      	cmp	r0, #0
    411a:	d1f4      	bne.n	4106 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    411c:	e7c3      	b.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    411e:	f1b9 0f00 	cmp.w	r9, #0
    4122:	d119      	bne.n	4158 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    4124:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    4128:	9904      	ldr	r1, [sp, #16]
    412a:	4559      	cmp	r1, fp
    412c:	d18b      	bne.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    412e:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    4132:	d088      	beq.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    4134:	7b43      	ldrb	r3, [r0, #13]
    4136:	4689      	mov	r9, r1
    4138:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    413a:	f1bb 0f01 	cmp.w	fp, #1
    413e:	d182      	bne.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    4140:	1c69      	adds	r1, r5, #1
    4142:	464b      	mov	r3, r9
    4144:	4642      	mov	r2, r8
    4146:	4630      	mov	r0, r6
    4148:	b289      	uxth	r1, r1
    414a:	f7ff fd4d 	bl	3be8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    414e:	2800      	cmp	r0, #0
    4150:	bf08      	it	eq
    4152:	f04f 0900 	moveq.w	r9, #0
    4156:	e776      	b.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    4158:	f10b 3bff 	add.w	fp, fp, #4294967295
    415c:	fa5f fb8b 	uxtb.w	fp, fp
    4160:	455a      	cmp	r2, fp
    4162:	d1ae      	bne.n	40c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    4164:	7b43      	ldrb	r3, [r0, #13]
    4166:	9a06      	ldr	r2, [sp, #24]
    4168:	4293      	cmp	r3, r2
    416a:	d0e6      	beq.n	413a <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    416c:	f04f 0900 	mov.w	r9, #0
    4170:	e769      	b.n	4046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    4172:	2701      	movs	r7, #1
    4174:	e758      	b.n	4028 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    4176:	9b05      	ldr	r3, [sp, #20]
    4178:	b12b      	cbz	r3, 4186 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    417a:	4641      	mov	r1, r8
    417c:	4630      	mov	r0, r6
    417e:	f7ff fed7 	bl	3f30 <FatFile::makeUniqueSfn(FatLfn_t*)>
    4182:	2800      	cmp	r0, #0
    4184:	d08f      	beq.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    4186:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4188:	4642      	mov	r2, r8
    418a:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    418c:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    418e:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    4192:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    4194:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4196:	4629      	mov	r1, r5
    4198:	f7ff fd84 	bl	3ca4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    419c:	2800      	cmp	r0, #0
    419e:	d082      	beq.n	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    41a0:	0169      	lsls	r1, r5, #5
    41a2:	4630      	mov	r0, r6
    41a4:	f7ff fb76 	bl	3894 <FatFile::seekSet(unsigned long)>
    41a8:	2800      	cmp	r0, #0
    41aa:	f43f af7c 	beq.w	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    41ae:	2100      	movs	r1, #0
    41b0:	4630      	mov	r0, r6
    41b2:	f7ff fb4d 	bl	3850 <FatFile::readDirCache(bool)>
  if (!dir) {
    41b6:	4604      	mov	r4, r0
    41b8:	2800      	cmp	r0, #0
    41ba:	f43f af74 	beq.w	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    41be:	2220      	movs	r2, #32
    41c0:	2100      	movs	r1, #0
    41c2:	f008 fb3f 	bl	c844 <memset>
  memcpy(dir->name, fname->sfn, 11);
    41c6:	f8d8 2016 	ldr.w	r2, [r8, #22]
    41ca:	f8d8 301a 	ldr.w	r3, [r8, #26]
    41ce:	6022      	str	r2, [r4, #0]
    41d0:	6063      	str	r3, [r4, #4]
    41d2:	f898 3020 	ldrb.w	r3, [r8, #32]
    41d6:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    41da:	72a3      	strb	r3, [r4, #10]
    41dc:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    41de:	f898 3015 	ldrb.w	r3, [r8, #21]
    41e2:	f003 0318 	and.w	r3, r3, #24
    41e6:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    41e8:	4b23      	ldr	r3, [pc, #140]	; (4278 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    41ea:	681b      	ldr	r3, [r3, #0]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d03b      	beq.n	4268 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    41f0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    41f4:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    41f8:	a809      	add	r0, sp, #36	; 0x24
    41fa:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    41fc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4200:	8223      	strh	r3, [r4, #16]
    4202:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    4206:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    4208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    420c:	7363      	strb	r3, [r4, #13]
    420e:	9a07      	ldr	r2, [sp, #28]
    4210:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    4214:	f043 0301 	orr.w	r3, r3, #1
    4218:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    421c:	9b03      	ldr	r3, [sp, #12]
    421e:	462a      	mov	r2, r5
    4220:	4631      	mov	r1, r6
    4222:	9802      	ldr	r0, [sp, #8]
    4224:	9700      	str	r7, [sp, #0]
    4226:	f7ff fb8d 	bl	3944 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    422a:	e73d      	b.n	40a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    422c:	f1bb 0f01 	cmp.w	fp, #1
    4230:	f47f af39 	bne.w	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    4234:	300a      	adds	r0, #10
    4236:	e001      	b.n	423c <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4238:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    423c:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    4240:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4242:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    4246:	fa52 f281 	uxtab	r2, r2, r1
    424a:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    424e:	d1f3      	bne.n	4238 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    4250:	9b06      	ldr	r3, [sp, #24]
    4252:	4563      	cmp	r3, ip
    4254:	f47f af27 	bne.w	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4258:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    425a:	9b03      	ldr	r3, [sp, #12]
    425c:	0519      	lsls	r1, r3, #20
    425e:	f53f af22 	bmi.w	40a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4262:	e7db      	b.n	421c <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    4264:	461f      	mov	r7, r3
    4266:	e7f8      	b.n	425a <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    4268:	f245 6321 	movw	r3, #22049	; 0x5621
    426c:	8223      	strh	r3, [r4, #16]
    426e:	8323      	strh	r3, [r4, #24]
    4270:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    4272:	e7cc      	b.n	420e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    4274:	4ec4ec4f 	.word	0x4ec4ec4f
    4278:	200200a4 	.word	0x200200a4

0000427c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4280:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    4282:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    4284:	b082      	sub	sp, #8
    4286:	460c      	mov	r4, r1
  while (*path == ' ') {
    4288:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    428a:	4615      	mov	r5, r2
  while (*path == ' ') {
    428c:	d103      	bne.n	4296 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    428e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4292:	2b20      	cmp	r3, #32
    4294:	d0fb      	beq.n	428e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    4296:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    4298:	7823      	ldrb	r3, [r4, #0]
    429a:	b363      	cbz	r3, 42f6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    429c:	2b2f      	cmp	r3, #47	; 0x2f
    429e:	d02a      	beq.n	42f6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    42a0:	f04f 0800 	mov.w	r8, #0
    42a4:	4e29      	ldr	r6, [pc, #164]	; (434c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    42a6:	1d21      	adds	r1, r4, #4
    42a8:	4620      	mov	r0, r4
    42aa:	aa01      	add	r2, sp, #4
    42ac:	f002 fd5e 	bl	6d6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    42b0:	4604      	mov	r4, r0
    42b2:	b170      	cbz	r0, 42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    42b4:	9b01      	ldr	r3, [sp, #4]
    42b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    42ba:	d240      	bcs.n	433e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    42bc:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    42be:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    42c2:	d831      	bhi.n	4328 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    42c4:	2b3c      	cmp	r3, #60	; 0x3c
    42c6:	b2d9      	uxtb	r1, r3
    42c8:	d829      	bhi.n	431e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    42ca:	2921      	cmp	r1, #33	; 0x21
    42cc:	d805      	bhi.n	42da <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    42ce:	291f      	cmp	r1, #31
    42d0:	d809      	bhi.n	42e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    42d2:	2000      	movs	r0, #0
    42d4:	b002      	add	sp, #8
    42d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42da:	3922      	subs	r1, #34	; 0x22
    42dc:	b2c9      	uxtb	r1, r1
    42de:	fa26 f101 	lsr.w	r1, r6, r1
    42e2:	07ca      	lsls	r2, r1, #31
    42e4:	d4f5      	bmi.n	42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    42e6:	2b2e      	cmp	r3, #46	; 0x2e
    42e8:	d001      	beq.n	42ee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    42ea:	2b20      	cmp	r3, #32
    42ec:	d11c      	bne.n	4328 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    42ee:	7823      	ldrb	r3, [r4, #0]
    42f0:	b10b      	cbz	r3, 42f6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    42f2:	2b2f      	cmp	r3, #47	; 0x2f
    42f4:	d1d7      	bne.n	42a6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    42f6:	692b      	ldr	r3, [r5, #16]
    42f8:	3b01      	subs	r3, #1
    42fa:	2bfe      	cmp	r3, #254	; 0xfe
    42fc:	d8e9      	bhi.n	42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    42fe:	7823      	ldrb	r3, [r4, #0]
    4300:	2b20      	cmp	r3, #32
    4302:	d103      	bne.n	430c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    4304:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4308:	2b20      	cmp	r3, #32
    430a:	d0fb      	beq.n	4304 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    430c:	2b2f      	cmp	r3, #47	; 0x2f
    430e:	d0f9      	beq.n	4304 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    4310:	4628      	mov	r0, r5
  *ptr = path;
    4312:	603c      	str	r4, [r7, #0]
}
    4314:	b002      	add	sp, #8
    4316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    431a:	f7ff bd55 	b.w	3dc8 <FatFile::makeSFN(FatLfn_t*)>
    431e:	295c      	cmp	r1, #92	; 0x5c
    4320:	d0d7      	beq.n	42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    4322:	d905      	bls.n	4330 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    4324:	297c      	cmp	r1, #124	; 0x7c
    4326:	d0d4      	beq.n	42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    4328:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    432c:	60ac      	str	r4, [r5, #8]
    432e:	e7de      	b.n	42ee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    4330:	393e      	subs	r1, #62	; 0x3e
    4332:	2901      	cmp	r1, #1
    4334:	d8f8      	bhi.n	4328 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    4336:	2000      	movs	r0, #0
    4338:	b002      	add	sp, #8
    433a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    433e:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    4342:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    4344:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    4348:	e7d1      	b.n	42ee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    434a:	bf00      	nop
    434c:	05002101 	.word	0x05002101

00004350 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    4350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4354:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    4358:	b1a2      	cbz	r2, 4384 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    435a:	4605      	mov	r5, r0
    435c:	460c      	mov	r4, r1
    435e:	4698      	mov	r8, r3
    4360:	1857      	adds	r7, r2, r1
    4362:	e001      	b.n	4368 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    4364:	42bc      	cmp	r4, r7
    4366:	d00d      	beq.n	4384 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    4368:	682b      	ldr	r3, [r5, #0]
    436a:	4620      	mov	r0, r4
    436c:	4649      	mov	r1, r9
    436e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    4370:	47c0      	blx	r8
    4372:	4621      	mov	r1, r4
    4374:	4602      	mov	r2, r0
    4376:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    4378:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    437a:	47b0      	blx	r6
    437c:	2800      	cmp	r0, #0
    437e:	d1f1      	bne.n	4364 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    4380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    4384:	2001      	movs	r0, #1
  }
    4386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    438a:	bf00      	nop

0000438c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    438c:	2a04      	cmp	r2, #4
    438e:	d804      	bhi.n	439a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    4390:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4394:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    4398:	4770      	bx	lr
  } else if (i < 11) {
    439a:	2a0a      	cmp	r2, #10
    439c:	d803      	bhi.n	43a6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    439e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    43a2:	8890      	ldrh	r0, [r2, #4]
    43a4:	4770      	bx	lr
  } else if (i < 13) {
    43a6:	2a0c      	cmp	r2, #12
    43a8:	d803      	bhi.n	43b2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    43aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    43ae:	88c8      	ldrh	r0, [r1, #6]
    43b0:	4770      	bx	lr
  return 0;
    43b2:	2000      	movs	r0, #0
}
    43b4:	4770      	bx	lr
    43b6:	bf00      	nop

000043b8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    43b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43bc:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    43c0:	b1c3      	cbz	r3, 43f4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    43c2:	4681      	mov	r9, r0
    43c4:	460c      	mov	r4, r1
    43c6:	4615      	mov	r5, r2
    43c8:	185e      	adds	r6, r3, r1
    43ca:	e002      	b.n	43d2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    43cc:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    43ce:	42b4      	cmp	r4, r6
    43d0:	d010      	beq.n	43f4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    43d2:	f8d9 3000 	ldr.w	r3, [r9]
    43d6:	4621      	mov	r1, r4
    43d8:	462a      	mov	r2, r5
    43da:	4648      	mov	r0, r9
    43dc:	691b      	ldr	r3, [r3, #16]
    43de:	4798      	blx	r3
    43e0:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    43e2:	463a      	mov	r2, r7
    43e4:	4620      	mov	r0, r4
    43e6:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    43e8:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    43ea:	2b00      	cmp	r3, #0
    43ec:	d1ee      	bne.n	43cc <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    43ee:	4618      	mov	r0, r3
    43f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    43f4:	2301      	movs	r3, #1
  }
    43f6:	4618      	mov	r0, r3
    43f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000043fc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    43fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    4400:	79c3      	ldrb	r3, [r0, #7]
    4402:	4604      	mov	r4, r0
    4404:	460d      	mov	r5, r1
    4406:	4617      	mov	r7, r2
  if (fatType() == 32) {
    4408:	2b20      	cmp	r3, #32
    440a:	d059      	beq.n	44c0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    440c:	2b10      	cmp	r3, #16
    440e:	d030      	beq.n	4472 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    4410:	2b0c      	cmp	r3, #12
    4412:	d151      	bne.n	44b8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4414:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    4416:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    441a:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    441c:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    4420:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4424:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4428:	4648      	mov	r0, r9
    442a:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    442c:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    4430:	f3c1 2146 	ubfx	r1, r1, #9, #7
    4434:	0952      	lsrs	r2, r2, #5
    4436:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    443a:	0052      	lsls	r2, r2, #1
    443c:	4641      	mov	r1, r8
    443e:	f002 fc47 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4442:	2800      	cmp	r0, #0
    4444:	d038      	beq.n	44b8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    4446:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    444a:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    444c:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    444e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4452:	d023      	beq.n	449c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    4454:	4418      	add	r0, r3
    4456:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4458:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    445a:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    445c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4460:	bf4c      	ite	mi
    4462:	091b      	lsrmi	r3, r3, #4
    4464:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    4468:	429a      	cmp	r2, r3
    446a:	d240      	bcs.n	44ee <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    446c:	2000      	movs	r0, #0
}
    446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4472:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    4474:	f3c1 2107 	ubfx	r1, r1, #8, #8
    4478:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    447a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    447e:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4482:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4484:	fab2 f282 	clz	r2, r2
    4488:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    448a:	0052      	lsls	r2, r2, #1
    448c:	f002 fc20 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4490:	b190      	cbz	r0, 44b8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4492:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    4494:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    4498:	5b43      	ldrh	r3, [r0, r5]
    449a:	e025      	b.n	44e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    449c:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    449e:	f108 0101 	add.w	r1, r8, #1
    44a2:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44a4:	f1a2 0202 	sub.w	r2, r2, #2
    44a8:	fab2 f282 	clz	r2, r2
    44ac:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    44ae:	0052      	lsls	r2, r2, #1
    44b0:	f002 fc0e 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    44b4:	2800      	cmp	r0, #0
    44b6:	d1ce      	bne.n	4456 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    44b8:	f04f 30ff 	mov.w	r0, #4294967295
}
    44bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44c0:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    44c2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    44c4:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44c8:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    44cc:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44d0:	fab2 f282 	clz	r2, r2
    44d4:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    44d6:	0052      	lsls	r2, r2, #1
    44d8:	f002 fbfa 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    44dc:	2800      	cmp	r0, #0
    44de:	d0eb      	beq.n	44b8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    44e0:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    44e2:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    44e6:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    44e8:	69e2      	ldr	r2, [r4, #28]
    44ea:	429a      	cmp	r2, r3
    44ec:	d3be      	bcc.n	446c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    44ee:	2001      	movs	r0, #1
  *value = next;
    44f0:	603b      	str	r3, [r7, #0]
}
    44f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44f6:	bf00      	nop

000044f8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    44f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    44fc:	79c3      	ldrb	r3, [r0, #7]
    44fe:	4605      	mov	r5, r0
    4500:	460c      	mov	r4, r1
    4502:	4616      	mov	r6, r2
  if (fatType() == 32) {
    4504:	2b20      	cmp	r3, #32
    4506:	d048      	beq.n	459a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    4508:	2b10      	cmp	r3, #16
    450a:	d02d      	beq.n	4568 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    450c:	2b0c      	cmp	r3, #12
    450e:	d141      	bne.n	4594 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    4510:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    4514:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4516:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    451a:	fa11 f184 	uxtah	r1, r1, r4
    451e:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    4522:	f3c1 2146 	ubfx	r1, r1, #9, #7
    4526:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4528:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    452a:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    452c:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    452e:	4639      	mov	r1, r7
    4530:	bf14      	ite	ne
    4532:	2201      	movne	r2, #1
    4534:	2203      	moveq	r2, #3
    4536:	f002 fbcb 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    453a:	b358      	cbz	r0, 4594 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    453c:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    4540:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    4544:	d03f      	beq.n	45c6 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    4546:	5cc2      	ldrb	r2, [r0, r3]
    4548:	f002 020f 	and.w	r2, r2, #15
    454c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    4550:	54c2      	strb	r2, [r0, r3]
    index++;
    4552:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    4554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4558:	d03a      	beq.n	45d0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    455a:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    455e:	4403      	add	r3, r0
    return true;
    4560:	2001      	movs	r0, #1
    pc[index] = tmp;
    4562:	701a      	strb	r2, [r3, #0]
}
    4564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4568:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    456a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    456e:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4570:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4574:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    4576:	4419      	add	r1, r3
    4578:	bf14      	ite	ne
    457a:	2201      	movne	r2, #1
    457c:	2203      	moveq	r2, #3
    457e:	f002 fba7 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4582:	4603      	mov	r3, r0
    4584:	b130      	cbz	r0, 4594 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4586:	0064      	lsls	r4, r4, #1
    return true;
    4588:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    458a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    458e:	531e      	strh	r6, [r3, r4]
}
    4590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    4594:	2000      	movs	r0, #0
}
    4596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    459a:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    459c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    459e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45a2:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    45a4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    45a8:	bf14      	ite	ne
    45aa:	2201      	movne	r2, #1
    45ac:	2203      	moveq	r2, #3
    45ae:	f002 fb8f 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    45b2:	4603      	mov	r3, r0
    45b4:	2800      	cmp	r0, #0
    45b6:	d0ed      	beq.n	4594 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    45b8:	00a4      	lsls	r4, r4, #2
    return true;
    45ba:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    45bc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    45c0:	511e      	str	r6, [r3, r4]
}
    45c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    45c6:	54c6      	strb	r6, [r0, r3]
    index++;
    45c8:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    45ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    45ce:	d115      	bne.n	45fc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45d0:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    45d2:	1c79      	adds	r1, r7, #1
    45d4:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    45d6:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    45d8:	bf14      	ite	ne
    45da:	2201      	movne	r2, #1
    45dc:	2203      	moveq	r2, #3
    45de:	f002 fb77 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    45e2:	4603      	mov	r3, r0
    45e4:	2800      	cmp	r0, #0
    45e6:	d0d5      	beq.n	4594 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    45e8:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    45ec:	2c00      	cmp	r4, #0
    45ee:	d1b7      	bne.n	4560 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    45f0:	7819      	ldrb	r1, [r3, #0]
    45f2:	f021 010f 	bic.w	r1, r1, #15
    45f6:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    45fa:	e7b1      	b.n	4560 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    45fc:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    4600:	4403      	add	r3, r0
    4602:	e7f5      	b.n	45f0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00004604 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    4608:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    460a:	b082      	sub	sp, #8
    460c:	4605      	mov	r5, r0
    460e:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    4610:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4612:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    4614:	d340      	bcc.n	4698 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    4616:	2701      	movs	r7, #1
    find++;
    4618:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    461a:	69eb      	ldr	r3, [r5, #28]
    461c:	aa01      	add	r2, sp, #4
    461e:	4628      	mov	r0, r5
    4620:	42a3      	cmp	r3, r4
    4622:	d205      	bcs.n	4630 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    4624:	bb9f      	cbnz	r7, 468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    4626:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    4628:	2701      	movs	r7, #1
    find++;
    462a:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    462c:	42a3      	cmp	r3, r4
    462e:	d32e      	bcc.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    4630:	42a6      	cmp	r6, r4
    4632:	bf18      	it	ne
    4634:	2c01      	cmpne	r4, #1
    4636:	4621      	mov	r1, r4
    4638:	d929      	bls.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    463a:	f7ff fedf 	bl	43fc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    463e:	2800      	cmp	r0, #0
    4640:	db25      	blt.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    4642:	d0e9      	beq.n	4618 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	2b00      	cmp	r3, #0
    4648:	d1e6      	bne.n	4618 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    464a:	b107      	cbz	r7, 464e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    464c:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    464e:	69eb      	ldr	r3, [r5, #28]
    4650:	42a3      	cmp	r3, r4
    4652:	d31c      	bcc.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4654:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4658:	4621      	mov	r1, r4
    465a:	4628      	mov	r0, r5
    465c:	f7ff ff4c 	bl	44f8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    4660:	4607      	mov	r7, r0
    4662:	b1a0      	cbz	r0, 468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    4664:	b93e      	cbnz	r6, 4676 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    4666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4668:	2b00      	cmp	r3, #0
    466a:	db01      	blt.n	4670 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    466c:	3b01      	subs	r3, #1
    466e:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    4670:	f8c8 4000 	str.w	r4, [r8]
  return true;
    4674:	e00c      	b.n	4690 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    4676:	2e01      	cmp	r6, #1
    4678:	d009      	beq.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    467a:	69eb      	ldr	r3, [r5, #28]
    467c:	429e      	cmp	r6, r3
    467e:	d806      	bhi.n	468e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4680:	4631      	mov	r1, r6
    4682:	4622      	mov	r2, r4
    4684:	4628      	mov	r0, r5
    4686:	f7ff ff37 	bl	44f8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    468a:	2800      	cmp	r0, #0
    468c:	d1eb      	bne.n	4666 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    468e:	2700      	movs	r7, #0
}
    4690:	4638      	mov	r0, r7
    4692:	b002      	add	sp, #8
    4694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4698:	460c      	mov	r4, r1
    setStart = false;
    469a:	2700      	movs	r7, #0
    469c:	e7bc      	b.n	4618 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    469e:	bf00      	nop

000046a0 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    46a0:	2901      	cmp	r1, #1
    46a2:	d90c      	bls.n	46be <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    46a4:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    46a6:	69c4      	ldr	r4, [r0, #28]
    46a8:	428c      	cmp	r4, r1
    46aa:	d303      	bcc.n	46b4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    46ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    46b0:	f7ff bea4 	b.w	43fc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    46b4:	f04f 30ff 	mov.w	r0, #4294967295
    46b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    46bc:	4770      	bx	lr
    46be:	f04f 30ff 	mov.w	r0, #4294967295
    46c2:	4770      	bx	lr

000046c4 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    46c4:	b570      	push	{r4, r5, r6, lr}
    46c6:	4605      	mov	r5, r0
    46c8:	b082      	sub	sp, #8
    46ca:	460c      	mov	r4, r1
    46cc:	e01d      	b.n	470a <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    46ce:	69eb      	ldr	r3, [r5, #28]
    46d0:	429c      	cmp	r4, r3
    46d2:	d81f      	bhi.n	4714 <FatPartition::freeChain(unsigned long)+0x50>
    46d4:	f7ff fe92 	bl	43fc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    46d8:	4606      	mov	r6, r0
    if (fg < 0) {
    46da:	4621      	mov	r1, r4
    46dc:	2200      	movs	r2, #0
    46de:	2e00      	cmp	r6, #0
    46e0:	4628      	mov	r0, r5
    46e2:	db17      	blt.n	4714 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    46e4:	69eb      	ldr	r3, [r5, #28]
    46e6:	429c      	cmp	r4, r3
    46e8:	d814      	bhi.n	4714 <FatPartition::freeChain(unsigned long)+0x50>
    46ea:	f7ff ff05 	bl	44f8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    46ee:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    46f0:	b180      	cbz	r0, 4714 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    46f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    46f4:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    46f6:	f103 0301 	add.w	r3, r3, #1
    46fa:	bfa8      	it	ge
    46fc:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    46fe:	68eb      	ldr	r3, [r5, #12]
    4700:	42a3      	cmp	r3, r4
    cluster = next;
    4702:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    4704:	bf88      	it	hi
    4706:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    4708:	b12e      	cbz	r6, 4716 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    470a:	2c01      	cmp	r4, #1
    470c:	4621      	mov	r1, r4
    470e:	aa01      	add	r2, sp, #4
    4710:	4628      	mov	r0, r5
    4712:	d8dc      	bhi.n	46ce <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    4714:	2000      	movs	r0, #0
}
    4716:	b002      	add	sp, #8
    4718:	bd70      	pop	{r4, r5, r6, pc}
    471a:	bf00      	nop

0000471c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    471c:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    471e:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    4720:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4722:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    4724:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    4726:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    472a:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    472e:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    4730:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    4732:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    4734:	62e1      	str	r1, [r4, #44]	; 0x2c
    4736:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    473a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    473e:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    4742:	6362      	str	r2, [r4, #52]	; 0x34
    4744:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    4748:	b1cd      	cbz	r5, 477e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    474a:	2d04      	cmp	r5, #4
    474c:	d901      	bls.n	4752 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    474e:	2000      	movs	r0, #0
}
    4750:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    4752:	461a      	mov	r2, r3
    4754:	4619      	mov	r1, r3
    4756:	4630      	mov	r0, r6
    4758:	f002 faba 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    475c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4760:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    4764:	442b      	add	r3, r5
    4766:	011d      	lsls	r5, r3, #4
    4768:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    476c:	2800      	cmp	r0, #0
    476e:	d0ee      	beq.n	474e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4770:	7919      	ldrb	r1, [r3, #4]
    4772:	2900      	cmp	r1, #0
    4774:	d0eb      	beq.n	474e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4776:	5d52      	ldrb	r2, [r2, r5]
    4778:	0652      	lsls	r2, r2, #25
    477a:	d1e8      	bne.n	474e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    477c:	689d      	ldr	r5, [r3, #8]
    477e:	2200      	movs	r2, #0
    4780:	4629      	mov	r1, r5
    4782:	4630      	mov	r0, r6
    4784:	f002 faa4 	bl	6cd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    4788:	2800      	cmp	r0, #0
    478a:	d0e0      	beq.n	474e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    478c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4794:	d1db      	bne.n	474e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    4796:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    4798:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    479a:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    479c:	2a01      	cmp	r2, #1
    479e:	d8d6      	bhi.n	474e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    47a0:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    47a2:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47a4:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    47a6:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    47a8:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    47aa:	f04f 0300 	mov.w	r3, #0
    47ae:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47b0:	d044      	beq.n	483c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    47b2:	2201      	movs	r2, #1
    47b4:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    47b6:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47b8:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    47ba:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47bc:	4291      	cmp	r1, r2
    47be:	d004      	beq.n	47ca <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    47c0:	2b08      	cmp	r3, #8
    47c2:	d1f7      	bne.n	47b4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    47c4:	2000      	movs	r0, #0
    47c6:	71a3      	strb	r3, [r4, #6]
}
    47c8:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    47ca:	461e      	mov	r6, r3
    47cc:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    47ce:	8ac1      	ldrh	r1, [r0, #22]
    47d0:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    47d2:	b909      	cbnz	r1, 47d8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    47d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    47d6:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    47d8:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    47da:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    47de:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    47e0:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    47e2:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    47e4:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    47e6:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    47ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    47ee:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    47f2:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    47f6:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    47f8:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    47fc:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    47fe:	b902      	cbnz	r2, 4802 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    4800:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    4802:	1aed      	subs	r5, r5, r3
    4804:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    4806:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    4808:	1c5a      	adds	r2, r3, #1
    480a:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    480c:	f04f 32ff 	mov.w	r2, #4294967295
    4810:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    4812:	f640 72f4 	movw	r2, #4084	; 0xff4
    4816:	4293      	cmp	r3, r2
    4818:	d90c      	bls.n	4834 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    481a:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    481e:	4293      	cmp	r3, r2
    4820:	d90a      	bls.n	4838 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    4822:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    4824:	2320      	movs	r3, #32
    4826:	6222      	str	r2, [r4, #32]
  return true;
    4828:	2001      	movs	r0, #1
    m_fatType = 12;
    482a:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    482c:	6321      	str	r1, [r4, #48]	; 0x30
    482e:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    4832:	bd70      	pop	{r4, r5, r6, pc}
    4834:	230c      	movs	r3, #12
    4836:	e7f7      	b.n	4828 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    4838:	2310      	movs	r3, #16
    483a:	e7f5      	b.n	4828 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    483c:	461e      	mov	r6, r3
    483e:	e7c6      	b.n	47ce <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00004840 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    4840:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4842:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    4846:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    4848:	2300      	movs	r3, #0
    484a:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    484c:	a801      	add	r0, sp, #4
    484e:	4621      	mov	r1, r4
    4850:	9301      	str	r3, [sp, #4]
    4852:	f7fe fe6d 	bl	3530 <FatFile::open(FatFile*, char const*, int)>
    4856:	4605      	mov	r5, r0
    4858:	b198      	cbz	r0, 4882 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    485a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    485e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    4862:	d011      	beq.n	4888 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4864:	f10d 0e04 	add.w	lr, sp, #4
    4868:	46a4      	mov	ip, r4
    486a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    486e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4872:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    487a:	f8de 3000 	ldr.w	r3, [lr]
    487e:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    4882:	4628      	mov	r0, r5
    4884:	b00b      	add	sp, #44	; 0x2c
    4886:	bd30      	pop	{r4, r5, pc}
  return false;
    4888:	461d      	mov	r5, r3
}
    488a:	4628      	mov	r0, r5
    488c:	b00b      	add	sp, #44	; 0x2c
    488e:	bd30      	pop	{r4, r5, pc}

00004890 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    4890:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4892:	b570      	push	{r4, r5, r6, lr}
    4894:	4604      	mov	r4, r0
  if (this == &from) return *this;
    4896:	d021      	beq.n	48dc <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  if (m_fFile && m_fFile->close()) {
    4898:	6b80      	ldr	r0, [r0, #56]	; 0x38
    489a:	460d      	mov	r5, r1
    489c:	b118      	cbz	r0, 48a6 <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    489e:	f7fe fd0b 	bl	32b8 <FatFile::close()>
    48a2:	2800      	cmp	r0, #0
    48a4:	d141      	bne.n	492a <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
  if (m_xFile && m_xFile->close()) {
    48a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    48a8:	b118      	cbz	r0, 48b2 <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    48aa:	f7fd f99d 	bl	1be8 <ExFatFile::close()>
    48ae:	2800      	cmp	r0, #0
    48b0:	d141      	bne.n	4936 <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    48b2:	6bae      	ldr	r6, [r5, #56]	; 0x38
    48b4:	b1a6      	cbz	r6, 48e0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    48b6:	4621      	mov	r1, r4
    48b8:	2024      	movs	r0, #36	; 0x24
    48ba:	f000 f8af 	bl	4a1c <operator new(unsigned int, unsigned long*)>
    48be:	2300      	movs	r3, #0
    48c0:	4684      	mov	ip, r0
    48c2:	8003      	strh	r3, [r0, #0]
    48c4:	7083      	strb	r3, [r0, #2]
    48c6:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    48c8:	6bad      	ldr	r5, [r5, #56]	; 0x38
    48ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    48cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    48d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    48d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    48d6:	682b      	ldr	r3, [r5, #0]
    48d8:	f8cc 3000 	str.w	r3, [ip]
}
    48dc:	4620      	mov	r0, r4
    48de:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    48e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    48e2:	2b00      	cmp	r3, #0
    48e4:	d0fa      	beq.n	48dc <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    48e6:	4621      	mov	r1, r4
    48e8:	2038      	movs	r0, #56	; 0x38
    48ea:	f000 f897 	bl	4a1c <operator new(unsigned int, unsigned long*)>
    48ee:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    48f2:	8646      	strh	r6, [r0, #50]	; 0x32
    48f4:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    48f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    48f8:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    48fc:	681e      	ldr	r6, [r3, #0]
    48fe:	3310      	adds	r3, #16
    4900:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    4904:	3010      	adds	r0, #16
    4906:	f853 1c08 	ldr.w	r1, [r3, #-8]
    490a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    490e:	4563      	cmp	r3, ip
    4910:	f840 6c10 	str.w	r6, [r0, #-16]
    4914:	f840 5c0c 	str.w	r5, [r0, #-12]
    4918:	f840 1c08 	str.w	r1, [r0, #-8]
    491c:	f840 2c04 	str.w	r2, [r0, #-4]
    4920:	d1ec      	bne.n	48fc <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	6003      	str	r3, [r0, #0]
}
    4926:	4620      	mov	r0, r4
    4928:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    492a:	2300      	movs	r3, #0
    492c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    492e:	6bae      	ldr	r6, [r5, #56]	; 0x38
    4930:	2e00      	cmp	r6, #0
    4932:	d1c0      	bne.n	48b6 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4934:	e7d4      	b.n	48e0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    4936:	2300      	movs	r3, #0
  if (from.m_fFile) {
    4938:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    493a:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    493c:	2e00      	cmp	r6, #0
    493e:	d1ba      	bne.n	48b6 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    4940:	e7ce      	b.n	48e0 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    4942:	bf00      	nop

00004944 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    4944:	b510      	push	{r4, lr}
    4946:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    4948:	6b80      	ldr	r0, [r0, #56]	; 0x38
    494a:	b110      	cbz	r0, 4952 <FsBaseFile::close()+0xe>
    494c:	f7fe fcb4 	bl	32b8 <FatFile::close()>
    4950:	b930      	cbnz	r0, 4960 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    4952:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4954:	b110      	cbz	r0, 495c <FsBaseFile::close()+0x18>
    4956:	f7fd f947 	bl	1be8 <ExFatFile::close()>
    495a:	b920      	cbnz	r0, 4966 <FsBaseFile::close()+0x22>
  return false;
    495c:	2000      	movs	r0, #0
}
    495e:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    4960:	2300      	movs	r3, #0
    4962:	63a3      	str	r3, [r4, #56]	; 0x38
}
    4964:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    4966:	2300      	movs	r3, #0
    4968:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    496a:	bd10      	pop	{r4, pc}

0000496c <FsBaseFile::open(FsVolume*, char const*, int)>:
  if (!vol) {
    496c:	2900      	cmp	r1, #0
    496e:	d052      	beq.n	4a16 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4974:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    4976:	6b80      	ldr	r0, [r0, #56]	; 0x38
    4978:	460d      	mov	r5, r1
    497a:	4617      	mov	r7, r2
    497c:	461e      	mov	r6, r3
    497e:	b110      	cbz	r0, 4986 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    4980:	f7fe fc9a 	bl	32b8 <FatFile::close()>
    4984:	bba0      	cbnz	r0, 49f0 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    4986:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4988:	b110      	cbz	r0, 4990 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    498a:	f7fd f92d 	bl	1be8 <ExFatFile::close()>
    498e:	bbb8      	cbnz	r0, 4a00 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
  if (vol->m_fVol) {
    4990:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    4994:	f1b8 0f00 	cmp.w	r8, #0
    4998:	d011      	beq.n	49be <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    499a:	4621      	mov	r1, r4
    499c:	2024      	movs	r0, #36	; 0x24
    499e:	f000 f83d 	bl	4a1c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    49a2:	4633      	mov	r3, r6
    49a4:	2600      	movs	r6, #0
    49a6:	463a      	mov	r2, r7
    49a8:	8006      	strh	r6, [r0, #0]
    49aa:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    49ac:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    49ae:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    49b2:	f7fe fe3f 	bl	3634 <FatFile::open(FatVolume*, char const*, int)>
    49b6:	bb58      	cbnz	r0, 4a10 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_fFile = nullptr;
    49b8:	63a0      	str	r0, [r4, #56]	; 0x38
}
    49ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    49be:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    49c2:	b193      	cbz	r3, 49ea <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    49c4:	4621      	mov	r1, r4
    49c6:	2038      	movs	r0, #56	; 0x38
    49c8:	f000 f828 	bl	4a1c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    49cc:	4633      	mov	r3, r6
    49ce:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    49d2:	463a      	mov	r2, r7
    49d4:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    49d8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    49da:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    49de:	f7fd fd13 	bl	2408 <ExFatFile::open(ExFatVolume*, char const*, int)>
    49e2:	b9a8      	cbnz	r0, 4a10 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    49e4:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    49e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    49ea:	2000      	movs	r0, #0
}
    49ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    49f0:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    49f2:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    49f6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    49f8:	f1b8 0f00 	cmp.w	r8, #0
    49fc:	d1cd      	bne.n	499a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    49fe:	e7de      	b.n	49be <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    4a00:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    4a02:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    4a06:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    4a08:	f1b8 0f00 	cmp.w	r8, #0
    4a0c:	d1c5      	bne.n	499a <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    4a0e:	e7d6      	b.n	49be <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    4a10:	2001      	movs	r0, #1
}
    4a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4a16:	2000      	movs	r0, #0
}
    4a18:	4770      	bx	lr
    4a1a:	bf00      	nop

00004a1c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4a1c:	4608      	mov	r0, r1
    4a1e:	4770      	bx	lr

00004a20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    4a24:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4a26:	4604      	mov	r4, r0
    4a28:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    4a2a:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    4a2e:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    4a32:	4601      	mov	r1, r0
    4a34:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    4a38:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    4a3a:	f7ff ffef 	bl	4a1c <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    4a3e:	4642      	mov	r2, r8
  ExFatPartition() {}
    4a40:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    4a44:	4605      	mov	r5, r0
    4a46:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    4a4a:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    4a4e:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    4a52:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4a56:	f7fe fad3 	bl	3000 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4a5a:	bba0      	cbnz	r0, 4ac6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    4a5c:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    4a5e:	4621      	mov	r1, r4
    4a60:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    4a64:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4a68:	f7ff ffd8 	bl	4a1c <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    4a6c:	2302      	movs	r3, #2
    4a6e:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    4a70:	4642      	mov	r2, r8
    4a72:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    4a76:	4605      	mov	r5, r0
    4a78:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    4a7c:	7203      	strb	r3, [r0, #8]
    4a7e:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    4a82:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4a86:	f7ff fe49 	bl	471c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4a8a:	b938      	cbnz	r0, 4a9c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    4a8c:	2300      	movs	r3, #0
    4a8e:	4a1a      	ldr	r2, [pc, #104]	; (4af8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    4a90:	4618      	mov	r0, r3
  m_cwv = nullptr;
    4a92:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    4a94:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4a9c:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4aa0:	4630      	mov	r0, r6
    4aa2:	f7fe fc09 	bl	32b8 <FatFile::close()>
    return m_vwd.openRoot(this);
    4aa6:	4629      	mov	r1, r5
    4aa8:	4630      	mov	r0, r6
    4aaa:	f7fe fdcb 	bl	3644 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4aae:	2800      	cmp	r0, #0
    4ab0:	d0ec      	beq.n	4a8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    4ab2:	4b12      	ldr	r3, [pc, #72]	; (4afc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    4ab4:	681a      	ldr	r2, [r3, #0]
    4ab6:	b9aa      	cbnz	r2, 4ae4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    4ab8:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    4aba:	4b0f      	ldr	r3, [pc, #60]	; (4af8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4abc:	b1af      	cbz	r7, 4aea <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    4abe:	2001      	movs	r0, #1
    m_cwv = this;
    4ac0:	601c      	str	r4, [r3, #0]
}
    4ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4ac6:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4aca:	4630      	mov	r0, r6
    4acc:	f7fd f88c 	bl	1be8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4ad0:	4629      	mov	r1, r5
    4ad2:	4630      	mov	r0, r6
    4ad4:	f7fd f892 	bl	1bfc <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4ad8:	2800      	cmp	r0, #0
    4ada:	d0bf      	beq.n	4a5c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    4adc:	4b08      	ldr	r3, [pc, #32]	; (4b00 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    4ade:	681a      	ldr	r2, [r3, #0]
    4ae0:	2a00      	cmp	r2, #0
    4ae2:	d0e9      	beq.n	4ab8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    4ae4:	4b04      	ldr	r3, [pc, #16]	; (4af8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4ae6:	2f00      	cmp	r7, #0
    4ae8:	d1e9      	bne.n	4abe <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    4aea:	681a      	ldr	r2, [r3, #0]
    4aec:	2a00      	cmp	r2, #0
    4aee:	d0e6      	beq.n	4abe <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    4af0:	2001      	movs	r0, #1
}
    4af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4af6:	bf00      	nop
    4af8:	20020178 	.word	0x20020178
    4afc:	2002017c 	.word	0x2002017c
    4b00:	20020124 	.word	0x20020124

00004b04 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    4b04:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4b06:	2500      	movs	r5, #0
    4b08:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4b0c:	4604      	mov	r4, r0
    4b0e:	6045      	str	r5, [r0, #4]
    4b10:	7305      	strb	r5, [r0, #12]
    4b12:	6086      	str	r6, [r0, #8]
    4b14:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4b18:	4d03      	ldr	r5, [pc, #12]	; (4b28 <FsVolume::open(char const*, int)+0x24>)
    4b1a:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4b1e:	f7ff ff25 	bl	496c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4b22:	4620      	mov	r0, r4
    4b24:	bd70      	pop	{r4, r5, r6, pc}
    4b26:	bf00      	nop
    4b28:	20000a70 	.word	0x20000a70

00004b2c <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    4b2c:	f04f 30ff 	mov.w	r0, #4294967295
    4b30:	4770      	bx	lr
    4b32:	bf00      	nop

00004b34 <SharedSpiCard::errorCode() const>:
  }
    4b34:	7c40      	ldrb	r0, [r0, #17]
    4b36:	4770      	bx	lr

00004b38 <SharedSpiCard::errorData() const>:
  }
    4b38:	7d00      	ldrb	r0, [r0, #20]
    4b3a:	4770      	bx	lr

00004b3c <SharedSpiCard::type() const>:
  }
    4b3c:	7d40      	ldrb	r0, [r0, #21]
    4b3e:	4770      	bx	lr

00004b40 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    4b40:	2001      	movs	r0, #1
    4b42:	4770      	bx	lr

00004b44 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    4b44:	7f00      	ldrb	r0, [r0, #28]
    4b46:	4770      	bx	lr

00004b48 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b4c:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b4e:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b50:	4605      	mov	r5, r0
    4b52:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b54:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b56:	4691      	mov	r9, r2
    4b58:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b5a:	d028      	beq.n	4bae <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    4b5c:	682b      	ldr	r3, [r5, #0]
    4b5e:	4621      	mov	r1, r4
    4b60:	4628      	mov	r0, r5
    4b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4b64:	4798      	blx	r3
    4b66:	b198      	cbz	r0, 4b90 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    4b68:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    4b6a:	f1b9 0f00 	cmp.w	r9, #0
    4b6e:	d012      	beq.n	4b96 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    4b70:	eb04 0809 	add.w	r8, r4, r9
    4b74:	e001      	b.n	4b7a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    4b76:	45a0      	cmp	r8, r4
    4b78:	d00d      	beq.n	4b96 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    4b7a:	4639      	mov	r1, r7
    4b7c:	4620      	mov	r0, r4
    4b7e:	47b0      	blx	r6
    if (!writeData(src)) {
    4b80:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    4b82:	4601      	mov	r1, r0
    if (!writeData(src)) {
    4b84:	4628      	mov	r0, r5
    4b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    4b88:	3401      	adds	r4, #1
    if (!writeData(src)) {
    4b8a:	4798      	blx	r3
    4b8c:	2800      	cmp	r0, #0
    4b8e:	d1f2      	bne.n	4b76 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    4b90:	2000      	movs	r0, #0
}
    4b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    4b96:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4b98:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4b9a:	444b      	add	r3, r9
    4b9c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d1f7      	bne.n	4b92 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    4ba2:	682b      	ldr	r3, [r5, #0]
    4ba4:	4628      	mov	r0, r5
    4ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4ba8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    4bac:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4bae:	6983      	ldr	r3, [r0, #24]
    4bb0:	428b      	cmp	r3, r1
    4bb2:	d1d3      	bne.n	4b5c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    4bb4:	e7d9      	b.n	4b6a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    4bb6:	bf00      	nop

00004bb8 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4bb8:	4770      	bx	lr
    4bba:	bf00      	nop

00004bbc <SharedSpiCard::end()>:
    m_spiDriver.end();
    4bbc:	3004      	adds	r0, #4
    4bbe:	f002 b807 	b.w	6bd0 <SdSpiArduinoDriver::end()>
    4bc2:	bf00      	nop

00004bc4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4bc4:	b510      	push	{r4, lr}
    4bc6:	4604      	mov	r4, r0
    4bc8:	2120      	movs	r1, #32
    4bca:	f003 fc3f 	bl	844c <operator delete(void*, unsigned int)>
    4bce:	4620      	mov	r0, r4
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	bf00      	nop

00004bd4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    4bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bd8:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4bda:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    4bdc:	4605      	mov	r5, r0
    4bde:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4be0:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    4be2:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4be4:	d024      	beq.n	4c30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    4be6:	682b      	ldr	r3, [r5, #0]
    4be8:	4631      	mov	r1, r6
    4bea:	4628      	mov	r0, r5
    4bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4bee:	4798      	blx	r3
    4bf0:	b178      	cbz	r0, 4c12 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    4bf2:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    4bf4:	b187      	cbz	r7, 4c18 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    4bf6:	2600      	movs	r6, #0
    4bf8:	e001      	b.n	4bfe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    4bfa:	42b7      	cmp	r7, r6
    4bfc:	d00c      	beq.n	4c18 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    4bfe:	682a      	ldr	r2, [r5, #0]
    4c00:	4621      	mov	r1, r4
    4c02:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    4c04:	3601      	adds	r6, #1
    if (!writeData(src)) {
    4c06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    4c08:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    4c0c:	4790      	blx	r2
    4c0e:	2800      	cmp	r0, #0
    4c10:	d1f3      	bne.n	4bfa <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    4c12:	2000      	movs	r0, #0
}
    4c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    4c18:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4c1a:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4c1c:	443b      	add	r3, r7
    4c1e:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4c20:	2800      	cmp	r0, #0
    4c22:	d1f7      	bne.n	4c14 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    4c24:	682b      	ldr	r3, [r5, #0]
    4c26:	4628      	mov	r0, r5
    4c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    4c2e:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c30:	6983      	ldr	r3, [r0, #24]
    4c32:	428b      	cmp	r3, r1
    4c34:	d1d7      	bne.n	4be6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    4c36:	e7dd      	b.n	4bf4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00004c38 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    4c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c3c:	4e20      	ldr	r6, [pc, #128]	; (4cc0 <SharedSpiCard::writeStop()+0x88>)
    4c3e:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4c40:	f100 0804 	add.w	r8, r0, #4
    4c44:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    4c46:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4c4a:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4c4c:	e003      	b.n	4c56 <SharedSpiCard::writeStop()+0x1e>
    4c4e:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4c50:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4c52:	041b      	lsls	r3, r3, #16
    4c54:	d410      	bmi.n	4c78 <SharedSpiCard::writeStop()+0x40>
    4c56:	4640      	mov	r0, r8
    4c58:	f001 ffbe 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4c5c:	28ff      	cmp	r0, #255	; 0xff
    4c5e:	4604      	mov	r4, r0
    4c60:	d1f5      	bne.n	4c4e <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4c62:	21fd      	movs	r1, #253	; 0xfd
    4c64:	4640      	mov	r0, r8
    4c66:	f001 ffd5 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4c6a:	7cbb      	ldrb	r3, [r7, #18]
    4c6c:	b9cb      	cbnz	r3, 4ca2 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    4c6e:	2300      	movs	r3, #0
    4c70:	2001      	movs	r0, #1
    4c72:	74fb      	strb	r3, [r7, #19]
}
    4c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4c78:	231e      	movs	r3, #30
  if (m_spiActive) {
    4c7a:	7cb8      	ldrb	r0, [r7, #18]
    4c7c:	747b      	strb	r3, [r7, #17]
    4c7e:	2800      	cmp	r0, #0
    4c80:	d0f8      	beq.n	4c74 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    4c82:	7c38      	ldrb	r0, [r7, #16]
    4c84:	2101      	movs	r1, #1
    4c86:	f001 fee7 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c8a:	21ff      	movs	r1, #255	; 0xff
    4c8c:	4640      	mov	r0, r8
    4c8e:	f001 ffc1 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4c92:	4640      	mov	r0, r8
    4c94:	f001 ff74 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c98:	2300      	movs	r3, #0
  return false;
    4c9a:	4618      	mov	r0, r3
    m_spiActive = false;
    4c9c:	74bb      	strb	r3, [r7, #18]
}
    4c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    4ca2:	2101      	movs	r1, #1
    4ca4:	7c38      	ldrb	r0, [r7, #16]
    4ca6:	f001 fed7 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4caa:	4621      	mov	r1, r4
    4cac:	4640      	mov	r0, r8
    4cae:	f001 ffb1 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4cb2:	4640      	mov	r0, r8
    4cb4:	f001 ff64 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4cb8:	2300      	movs	r3, #0
    4cba:	74bb      	strb	r3, [r7, #18]
}
    4cbc:	e7d7      	b.n	4c6e <SharedSpiCard::writeStop()+0x36>
    4cbe:	bf00      	nop
    4cc0:	20022564 	.word	0x20022564

00004cc4 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4cc8:	7cc3      	ldrb	r3, [r0, #19]
    4cca:	2b01      	cmp	r3, #1
    4ccc:	d035      	beq.n	4d3a <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4cce:	7c86      	ldrb	r6, [r0, #18]
    4cd0:	4604      	mov	r4, r0
    4cd2:	b14e      	cbz	r6, 4ce8 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4cd4:	3004      	adds	r0, #4
    4cd6:	f001 ff7f 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4cda:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4cde:	bf18      	it	ne
    4ce0:	2501      	movne	r5, #1
}
    4ce2:	4628      	mov	r0, r5
    4ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    4ce8:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4cea:	f04f 0801 	mov.w	r8, #1
    4cee:	4638      	mov	r0, r7
    4cf0:	f001 ff3c 	bl	6b6c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4cf4:	4631      	mov	r1, r6
    4cf6:	7c20      	ldrb	r0, [r4, #16]
    4cf8:	f001 feae 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cfc:	21ff      	movs	r1, #255	; 0xff
    4cfe:	4638      	mov	r0, r7
    4d00:	f001 ff88 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4d04:	4638      	mov	r0, r7
    4d06:	f884 8012 	strb.w	r8, [r4, #18]
    4d0a:	f001 ff65 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4d0e:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    4d10:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4d14:	bf18      	it	ne
    4d16:	2501      	movne	r5, #1
  if (m_spiActive) {
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d0e2      	beq.n	4ce2 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    4d1c:	4641      	mov	r1, r8
    4d1e:	7c20      	ldrb	r0, [r4, #16]
    4d20:	f001 fe9a 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d24:	21ff      	movs	r1, #255	; 0xff
    4d26:	4638      	mov	r0, r7
    4d28:	f001 ff74 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4d2c:	4638      	mov	r0, r7
    4d2e:	f001 ff27 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
}
    4d32:	4628      	mov	r0, r5
    m_spiActive = false;
    4d34:	74a6      	strb	r6, [r4, #18]
}
    4d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4d3a:	2500      	movs	r5, #0
}
    4d3c:	4628      	mov	r0, r5
    4d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d42:	bf00      	nop

00004d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d48:	4f20      	ldr	r7, [pc, #128]	; (4dcc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4d4a:	4604      	mov	r4, r0
    4d4c:	4688      	mov	r8, r1
    4d4e:	4691      	mov	r9, r2
    4d50:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4d52:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    4d54:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4d58:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4d5a:	e003      	b.n	4d64 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4d5c:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4d5e:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4d60:	041b      	lsls	r3, r3, #16
    4d62:	d40d      	bmi.n	4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4d64:	4630      	mov	r0, r6
    4d66:	f001 ff37 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4d6a:	28ff      	cmp	r0, #255	; 0xff
    4d6c:	7520      	strb	r0, [r4, #20]
    4d6e:	d0f5      	beq.n	4d5c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4d70:	28fe      	cmp	r0, #254	; 0xfe
    4d72:	d01a      	beq.n	4daa <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4d74:	2318      	movs	r3, #24
  if (m_spiActive) {
    4d76:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    4d78:	7463      	strb	r3, [r4, #17]
    4d7a:	b930      	cbnz	r0, 4d8a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d80:	231d      	movs	r3, #29
  if (m_spiActive) {
    4d82:	7ca0      	ldrb	r0, [r4, #18]
    4d84:	7463      	strb	r3, [r4, #17]
    4d86:	2800      	cmp	r0, #0
    4d88:	d0f8      	beq.n	4d7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    4d8a:	7c20      	ldrb	r0, [r4, #16]
    4d8c:	2101      	movs	r1, #1
    4d8e:	f001 fe63 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d92:	21ff      	movs	r1, #255	; 0xff
    4d94:	4630      	mov	r0, r6
    4d96:	f001 ff3d 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4d9a:	4630      	mov	r0, r6
    4d9c:	f001 fef0 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4da0:	2300      	movs	r3, #0
  return false;
    4da2:	4618      	mov	r0, r3
    m_spiActive = false;
    4da4:	74a3      	strb	r3, [r4, #18]
}
    4da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4daa:	464a      	mov	r2, r9
    4dac:	4641      	mov	r1, r8
    4dae:	4630      	mov	r0, r6
    4db0:	f001 ff1e 	bl	6bf0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4db4:	7520      	strb	r0, [r4, #20]
    4db6:	b938      	cbnz	r0, 4dc8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4db8:	4630      	mov	r0, r6
    4dba:	f001 ff0d 	bl	6bd8 <SdSpiArduinoDriver::receive()>
    4dbe:	4630      	mov	r0, r6
    4dc0:	f001 ff0a 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  return true;
    4dc4:	2001      	movs	r0, #1
    4dc6:	e7d9      	b.n	4d7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4dc8:	2325      	movs	r3, #37	; 0x25
    4dca:	e7d4      	b.n	4d76 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4dcc:	20022564 	.word	0x20022564

00004dd0 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4dd2:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4dd4:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4dd6:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4dd8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4dda:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4ddc:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    4dde:	f000 f85b 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4de2:	b9b0      	cbnz	r0, 4e12 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4de4:	7ca6      	ldrb	r6, [r4, #18]
    4de6:	b91e      	cbnz	r6, 4df0 <SharedSpiCard::readStop()+0x20>
  return true;
    4de8:	2601      	movs	r6, #1
}
    4dea:	4630      	mov	r0, r6
    4dec:	b003      	add	sp, #12
    4dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4df0:	4605      	mov	r5, r0
    4df2:	2101      	movs	r1, #1
    4df4:	7c20      	ldrb	r0, [r4, #16]
    4df6:	f001 fe2f 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dfa:	1d20      	adds	r0, r4, #4
    4dfc:	21ff      	movs	r1, #255	; 0xff
    4dfe:	9001      	str	r0, [sp, #4]
    4e00:	f001 ff08 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e04:	9801      	ldr	r0, [sp, #4]
    4e06:	f001 febb 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    4e0a:	4630      	mov	r0, r6
    m_spiActive = false;
    4e0c:	74a5      	strb	r5, [r4, #18]
}
    4e0e:	b003      	add	sp, #12
    4e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4e12:	2309      	movs	r3, #9
  if (m_spiActive) {
    4e14:	7ca6      	ldrb	r6, [r4, #18]
    4e16:	7463      	strb	r3, [r4, #17]
    4e18:	2e00      	cmp	r6, #0
    4e1a:	d0e6      	beq.n	4dea <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4e1c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4e1e:	7c20      	ldrb	r0, [r4, #16]
    4e20:	2101      	movs	r1, #1
}
    4e22:	463e      	mov	r6, r7
    4e24:	f001 fe18 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4e28:	21ff      	movs	r1, #255	; 0xff
    4e2a:	4628      	mov	r0, r5
    4e2c:	f001 fef2 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4e30:	4628      	mov	r0, r5
    4e32:	f001 fea5 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
}
    4e36:	4630      	mov	r0, r6
    m_spiActive = false;
    4e38:	74a7      	strb	r7, [r4, #18]
}
    4e3a:	b003      	add	sp, #12
    4e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e3e:	bf00      	nop

00004e40 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4e40:	7cc2      	ldrb	r2, [r0, #19]
    4e42:	2a02      	cmp	r2, #2
    4e44:	d003      	beq.n	4e4e <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4e46:	2a01      	cmp	r2, #1
    4e48:	d004      	beq.n	4e54 <SharedSpiCard::syncDevice()+0x14>
}
    4e4a:	2001      	movs	r0, #1
    4e4c:	4770      	bx	lr
    return writeStop();
    4e4e:	6803      	ldr	r3, [r0, #0]
    4e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e52:	4718      	bx	r3
    return readStop();
    4e54:	f7ff bfbc 	b.w	4dd0 <SharedSpiCard::readStop()>

00004e58 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4e58:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    4e5a:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4e5c:	460d      	mov	r5, r1
    4e5e:	490d      	ldr	r1, [pc, #52]	; (4e94 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    4e60:	4604      	mov	r4, r0
  if (!syncDevice()) {
    4e62:	6a1a      	ldr	r2, [r3, #32]
    4e64:	428a      	cmp	r2, r1
    4e66:	d10c      	bne.n	4e82 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    4e68:	7cc2      	ldrb	r2, [r0, #19]
    4e6a:	2a02      	cmp	r2, #2
    4e6c:	d004      	beq.n	4e78 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    4e6e:	2a01      	cmp	r2, #1
    4e70:	d00b      	beq.n	4e8a <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    4e72:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    4e74:	7725      	strb	r5, [r4, #28]
}
    4e76:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    4e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e7a:	4798      	blx	r3
  if (!syncDevice()) {
    4e7c:	2800      	cmp	r0, #0
    4e7e:	d1f8      	bne.n	4e72 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    4e80:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    4e82:	4790      	blx	r2
    4e84:	2800      	cmp	r0, #0
    4e86:	d0fb      	beq.n	4e80 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4e88:	e7f3      	b.n	4e72 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    4e8a:	f7ff ffa1 	bl	4dd0 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4e8e:	2800      	cmp	r0, #0
    4e90:	d0f6      	beq.n	4e80 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4e92:	e7ee      	b.n	4e72 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    4e94:	00004e41 	.word	0x00004e41

00004e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4e9c:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e9e:	b082      	sub	sp, #8
    4ea0:	460f      	mov	r7, r1
    4ea2:	4935      	ldr	r1, [pc, #212]	; (4f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    4ea4:	9201      	str	r2, [sp, #4]
    4ea6:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4ea8:	6a1a      	ldr	r2, [r3, #32]
    4eaa:	428a      	cmp	r2, r1
    4eac:	d15e      	bne.n	4f6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    4eae:	7cc2      	ldrb	r2, [r0, #19]
    4eb0:	2a02      	cmp	r2, #2
    4eb2:	d041      	beq.n	4f38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    4eb4:	2a01      	cmp	r2, #1
    4eb6:	d05b      	beq.n	4f70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    4eb8:	7cb4      	ldrb	r4, [r6, #18]
    4eba:	2c00      	cmp	r4, #0
    4ebc:	d047      	beq.n	4f4e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    4ebe:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    4ec0:	2f0c      	cmp	r7, #12
    4ec2:	d011      	beq.n	4ee8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4ec4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4f7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    4ec8:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    4ecc:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4ed0:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    4ed2:	e004      	b.n	4ede <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    4ed4:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    4ed8:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4eda:	041a      	lsls	r2, r3, #16
    4edc:	d434      	bmi.n	4f48 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    4ede:	4628      	mov	r0, r5
    4ee0:	f001 fe7a 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4ee4:	28ff      	cmp	r0, #255	; 0xff
    4ee6:	d1f5      	bne.n	4ed4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    4ee8:	f10d 0804 	add.w	r8, sp, #4
    4eec:	ac02      	add	r4, sp, #8
    4eee:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4ef2:	4628      	mov	r0, r5
    4ef4:	f001 fe8e 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    4ef8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4efc:	4628      	mov	r0, r5
    4efe:	f001 fe89 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4f02:	45a0      	cmp	r8, r4
    4f04:	d1f8      	bne.n	4ef8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4f06:	2f00      	cmp	r7, #0
    4f08:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4f0a:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4f0e:	bf0c      	ite	eq
    4f10:	2195      	moveq	r1, #149	; 0x95
    4f12:	2187      	movne	r1, #135	; 0x87
    4f14:	f001 fe7e 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4f18:	4628      	mov	r0, r5
    4f1a:	f001 fe5d 	bl	6bd8 <SdSpiArduinoDriver::receive()>
    4f1e:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    4f20:	3c01      	subs	r4, #1
    4f22:	f001 fe59 	bl	6bd8 <SdSpiArduinoDriver::receive()>
    4f26:	0603      	lsls	r3, r0, #24
    4f28:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    4f2a:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    4f2c:	d501      	bpl.n	4f32 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4f2e:	2c00      	cmp	r4, #0
    4f30:	d1f5      	bne.n	4f1e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    4f32:	b002      	add	sp, #8
    4f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4f3a:	4798      	blx	r3
  if (!syncDevice()) {
    4f3c:	2800      	cmp	r0, #0
    4f3e:	d1bb      	bne.n	4eb8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4f40:	20ff      	movs	r0, #255	; 0xff
}
    4f42:	b002      	add	sp, #8
    4f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    4f48:	2f00      	cmp	r7, #0
    4f4a:	d0cd      	beq.n	4ee8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4f4c:	e7f8      	b.n	4f40 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    4f4e:	1d35      	adds	r5, r6, #4
    4f50:	4628      	mov	r0, r5
    4f52:	f001 fe0b 	bl	6b6c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4f56:	4621      	mov	r1, r4
    4f58:	7c30      	ldrb	r0, [r6, #16]
    4f5a:	f001 fd7d 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f5e:	21ff      	movs	r1, #255	; 0xff
    4f60:	4628      	mov	r0, r5
    4f62:	f001 fe57 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    4f66:	2301      	movs	r3, #1
    4f68:	74b3      	strb	r3, [r6, #18]
}
    4f6a:	e7a9      	b.n	4ec0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4f6c:	4790      	blx	r2
    4f6e:	e7e5      	b.n	4f3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    4f70:	f7ff ff2e 	bl	4dd0 <SharedSpiCard::readStop()>
    4f74:	e7e2      	b.n	4f3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    4f76:	bf00      	nop
    4f78:	00004e41 	.word	0x00004e41
    4f7c:	20022564 	.word	0x20022564

00004f80 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4f82:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f84:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4f86:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f88:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4f8a:	f7ff ff85 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f8e:	b9e0      	cbnz	r0, 4fca <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    4f90:	1d37      	adds	r7, r6, #4
    4f92:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4f94:	4638      	mov	r0, r7
    4f96:	f001 fe1f 	bl	6bd8 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4f9a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4f9e:	42a5      	cmp	r5, r4
    4fa0:	d1f8      	bne.n	4f94 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4fa2:	7cb4      	ldrb	r4, [r6, #18]
    4fa4:	b914      	cbnz	r4, 4fac <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4fa6:	2401      	movs	r4, #1
}
    4fa8:	4620      	mov	r0, r4
    4faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4fac:	7c30      	ldrb	r0, [r6, #16]
    4fae:	2101      	movs	r1, #1
    4fb0:	f001 fd52 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fb4:	21ff      	movs	r1, #255	; 0xff
    4fb6:	4638      	mov	r0, r7
    4fb8:	f001 fe2c 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4fbc:	4638      	mov	r0, r7
    4fbe:	f001 fddf 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fc2:	2300      	movs	r3, #0
}
    4fc4:	4620      	mov	r0, r4
    m_spiActive = false;
    4fc6:	74b3      	strb	r3, [r6, #18]
}
    4fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4fca:	2312      	movs	r3, #18
  if (m_spiActive) {
    4fcc:	7cb4      	ldrb	r4, [r6, #18]
    4fce:	7473      	strb	r3, [r6, #17]
    4fd0:	2c00      	cmp	r4, #0
    4fd2:	d0e9      	beq.n	4fa8 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    4fd4:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    4fd6:	7c30      	ldrb	r0, [r6, #16]
    4fd8:	2101      	movs	r1, #1
    4fda:	f001 fd3d 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fde:	21ff      	movs	r1, #255	; 0xff
    4fe0:	4620      	mov	r0, r4
    4fe2:	f001 fe17 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4fe6:	4620      	mov	r0, r4
    4fe8:	f001 fdca 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fec:	2300      	movs	r3, #0
  return false;
    4fee:	461c      	mov	r4, r3
    m_spiActive = false;
    4ff0:	74b3      	strb	r3, [r6, #18]
}
    4ff2:	4620      	mov	r0, r4
    4ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ff6:	bf00      	nop

00004ff8 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4ff8:	b570      	push	{r4, r5, r6, lr}
    4ffa:	4616      	mov	r6, r2
    4ffc:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    4ffe:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5000:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    5002:	f7ff ff49 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5006:	b1b0      	cbz	r0, 5036 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    5008:	231b      	movs	r3, #27
    500a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    500c:	7ca0      	ldrb	r0, [r4, #18]
    500e:	b908      	cbnz	r0, 5014 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    5010:	b002      	add	sp, #8
    5012:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5014:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5016:	7c20      	ldrb	r0, [r4, #16]
    5018:	2101      	movs	r1, #1
    501a:	f001 fd1d 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    501e:	21ff      	movs	r1, #255	; 0xff
    5020:	4628      	mov	r0, r5
    5022:	f001 fdf7 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5026:	4628      	mov	r0, r5
    5028:	f001 fdaa 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    502c:	2300      	movs	r3, #0
  return false;
    502e:	4618      	mov	r0, r3
    m_spiActive = false;
    5030:	74a3      	strb	r3, [r4, #18]
}
    5032:	b002      	add	sp, #8
    5034:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5036:	4605      	mov	r5, r0
    5038:	2210      	movs	r2, #16
    503a:	4631      	mov	r1, r6
    503c:	4620      	mov	r0, r4
    503e:	f7ff fe81 	bl	4d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5042:	2800      	cmp	r0, #0
    5044:	d0e2      	beq.n	500c <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    5046:	7ca6      	ldrb	r6, [r4, #18]
    5048:	2e00      	cmp	r6, #0
    504a:	d0e1      	beq.n	5010 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    504c:	7c20      	ldrb	r0, [r4, #16]
    504e:	2101      	movs	r1, #1
    5050:	f001 fd02 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5054:	1d20      	adds	r0, r4, #4
    5056:	21ff      	movs	r1, #255	; 0xff
    5058:	9001      	str	r0, [sp, #4]
    505a:	f001 fddb 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    505e:	9801      	ldr	r0, [sp, #4]
    5060:	f001 fd8e 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
}
    5064:	4630      	mov	r0, r6
    m_spiActive = false;
    5066:	74a5      	strb	r5, [r4, #18]
}
    5068:	b002      	add	sp, #8
    506a:	bd70      	pop	{r4, r5, r6, pc}

0000506c <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    506c:	6803      	ldr	r3, [r0, #0]
    506e:	4a25      	ldr	r2, [pc, #148]	; (5104 <SharedSpiCard::sectorCount()+0x98>)
    5070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5072:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    5074:	b500      	push	{lr}
    5076:	b085      	sub	sp, #20
    5078:	d10f      	bne.n	509a <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    507a:	466a      	mov	r2, sp
    507c:	2109      	movs	r1, #9
    507e:	f7ff ffbb 	bl	4ff8 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    5082:	b138      	cbz	r0, 5094 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    5084:	f89d 3000 	ldrb.w	r3, [sp]
    5088:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    508c:	d008      	beq.n	50a0 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    508e:	2b40      	cmp	r3, #64	; 0x40
    5090:	d027      	beq.n	50e2 <SharedSpiCard::sectorCount()+0x76>
    5092:	2000      	movs	r0, #0
}
    5094:	b005      	add	sp, #20
    5096:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    509a:	4669      	mov	r1, sp
    509c:	4798      	blx	r3
    509e:	e7f0      	b.n	5082 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    50a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    50a4:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    50a8:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    50ac:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    50b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    50b4:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    50b6:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    50ba:	0080      	lsls	r0, r0, #2
    50bc:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    50c0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    50c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    50c8:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    50cc:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    50d0:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    50d4:	4413      	add	r3, r2
    50d6:	3001      	adds	r0, #1
    50d8:	3b07      	subs	r3, #7
    50da:	4098      	lsls	r0, r3
}
    50dc:	b005      	add	sp, #20
    50de:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    50e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    50e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    50ea:	3001      	adds	r0, #1
    50ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    50f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    50f4:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    50f8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    50fc:	0280      	lsls	r0, r0, #10
    50fe:	b005      	add	sp, #20
    5100:	f85d fb04 	ldr.w	pc, [sp], #4
    5104:	00005429 	.word	0x00005429

00005108 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    5108:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    510a:	460a      	mov	r2, r1
    510c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    5110:	b083      	sub	sp, #12
    5112:	4d16      	ldr	r5, [pc, #88]	; (516c <SharedSpiCard::readStart(unsigned long)+0x64>)
    5114:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5116:	42ab      	cmp	r3, r5
    5118:	d124      	bne.n	5164 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    511a:	7d40      	ldrb	r0, [r0, #21]
    511c:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    511e:	f04f 0112 	mov.w	r1, #18
    5122:	4620      	mov	r0, r4
    sector <<= 9;
    5124:	bf18      	it	ne
    5126:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    5128:	f7ff feb6 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    512c:	b920      	cbnz	r0, 5138 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    512e:	2301      	movs	r3, #1
  return true;
    5130:	4618      	mov	r0, r3
  m_state = READ_STATE;
    5132:	74e3      	strb	r3, [r4, #19]
}
    5134:	b003      	add	sp, #12
    5136:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    5138:	230c      	movs	r3, #12
  if (m_spiActive) {
    513a:	7ca0      	ldrb	r0, [r4, #18]
    513c:	7463      	strb	r3, [r4, #17]
    513e:	2800      	cmp	r0, #0
    5140:	d0f8      	beq.n	5134 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5142:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5144:	7c20      	ldrb	r0, [r4, #16]
    5146:	2101      	movs	r1, #1
    5148:	f001 fc86 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    514c:	21ff      	movs	r1, #255	; 0xff
    514e:	4628      	mov	r0, r5
    5150:	f001 fd60 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5154:	4628      	mov	r0, r5
    5156:	f001 fd13 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    515a:	2300      	movs	r3, #0
}
    515c:	4618      	mov	r0, r3
    m_spiActive = false;
    515e:	74a3      	strb	r3, [r4, #18]
}
    5160:	b003      	add	sp, #12
    5162:	bd30      	pop	{r4, r5, pc}
    5164:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5166:	4798      	blx	r3
    5168:	9a01      	ldr	r2, [sp, #4]
    516a:	e7d7      	b.n	511c <SharedSpiCard::readStart(unsigned long)+0x14>
    516c:	00004b3d 	.word	0x00004b3d

00005170 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    5170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5172:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    5174:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    5176:	4606      	mov	r6, r0
    5178:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    517a:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    517c:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    517e:	d102      	bne.n	5186 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    5180:	6983      	ldr	r3, [r0, #24]
    5182:	428b      	cmp	r3, r1
    5184:	d005      	beq.n	5192 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    5186:	4629      	mov	r1, r5
    5188:	4630      	mov	r0, r6
    518a:	f7ff ffbd 	bl	5108 <SharedSpiCard::readStart(unsigned long)>
    518e:	b180      	cbz	r0, 51b2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    5190:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5192:	b187      	cbz	r7, 51b6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    5194:	2500      	movs	r5, #0
    5196:	e001      	b.n	519c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5198:	42af      	cmp	r7, r5
    519a:	d00c      	beq.n	51b6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    519c:	4621      	mov	r1, r4
    519e:	f44f 7200 	mov.w	r2, #512	; 0x200
    51a2:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    51a4:	3501      	adds	r5, #1
    51a6:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    51aa:	f7ff fdcb 	bl	4d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    51ae:	2800      	cmp	r0, #0
    51b0:	d1f2      	bne.n	5198 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    51b2:	2000      	movs	r0, #0
}
    51b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    51b6:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    51b8:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    51ba:	443b      	add	r3, r7
    51bc:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    51be:	2800      	cmp	r0, #0
    51c0:	d1f8      	bne.n	51b4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    51c2:	4630      	mov	r0, r6
}
    51c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    51c8:	f7ff be02 	b.w	4dd0 <SharedSpiCard::readStop()>

000051cc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    51cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51d0:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    51d2:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    51d4:	4606      	mov	r6, r0
    51d6:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    51d8:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    51da:	4615      	mov	r5, r2
    51dc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    51e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    51e4:	d102      	bne.n	51ec <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    51e6:	6983      	ldr	r3, [r0, #24]
    51e8:	428b      	cmp	r3, r1
    51ea:	d005      	beq.n	51f8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    51ec:	4621      	mov	r1, r4
    51ee:	4630      	mov	r0, r6
    51f0:	f7ff ff8a 	bl	5108 <SharedSpiCard::readStart(unsigned long)>
    51f4:	b1b0      	cbz	r0, 5224 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    51f6:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    51f8:	f1bb 0f00 	cmp.w	fp, #0
    51fc:	d015      	beq.n	522a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    51fe:	eb04 0a0b 	add.w	sl, r4, fp
    5202:	e002      	b.n	520a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    5204:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    5206:	45a2      	cmp	sl, r4
    5208:	d00f      	beq.n	522a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    520a:	f44f 7200 	mov.w	r2, #512	; 0x200
    520e:	4629      	mov	r1, r5
    5210:	4630      	mov	r0, r6
    5212:	f7ff fd97 	bl	4d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5216:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    5218:	4642      	mov	r2, r8
    521a:	4620      	mov	r0, r4
    521c:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    521e:	3401      	adds	r4, #1
    if (readData(dst)) {
    5220:	2f00      	cmp	r7, #0
    5222:	d1ef      	bne.n	5204 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    5224:	2000      	movs	r0, #0
}
    5226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    522a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    522c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    522e:	445b      	add	r3, fp
    5230:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5232:	2800      	cmp	r0, #0
    5234:	d1f7      	bne.n	5226 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    5236:	4630      	mov	r0, r6
}
    5238:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    523c:	f7ff bdc8 	b.w	4dd0 <SharedSpiCard::readStop()>

00005240 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    5240:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    5242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5246:	695f      	ldr	r7, [r3, #20]
    5248:	4b16      	ldr	r3, [pc, #88]	; (52a4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    524a:	429f      	cmp	r7, r3
    524c:	d11f      	bne.n	528e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    524e:	7cc3      	ldrb	r3, [r0, #19]
    5250:	4604      	mov	r4, r0
    5252:	460d      	mov	r5, r1
    5254:	4616      	mov	r6, r2
    5256:	2b01      	cmp	r3, #1
    5258:	d102      	bne.n	5260 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    525a:	6983      	ldr	r3, [r0, #24]
    525c:	4299      	cmp	r1, r3
    525e:	d005      	beq.n	526c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    5260:	4629      	mov	r1, r5
    5262:	4620      	mov	r0, r4
    5264:	f7ff ff50 	bl	5108 <SharedSpiCard::readStart(unsigned long)>
    5268:	b170      	cbz	r0, 5288 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    526a:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    526c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5270:	4631      	mov	r1, r6
    5272:	4620      	mov	r0, r4
    5274:	f7ff fd66 	bl	4d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    5278:	b130      	cbz	r0, 5288 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    527a:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    527c:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    527e:	3301      	adds	r3, #1
    5280:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5282:	b148      	cbz	r0, 5298 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    5284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    5288:	2000      	movs	r0, #0
}
    528a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    528e:	46bc      	mov	ip, r7
    5290:	2301      	movs	r3, #1
}
    5292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    5296:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    5298:	4620      	mov	r0, r4
}
    529a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    529e:	f7ff bd97 	b.w	4dd0 <SharedSpiCard::readStop()>
    52a2:	bf00      	nop
    52a4:	00005171 	.word	0x00005171

000052a8 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    52a8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    52aa:	460a      	mov	r2, r1
    52ac:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    52ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    52b0:	b083      	sub	sp, #12
    52b2:	4d16      	ldr	r5, [pc, #88]	; (530c <SharedSpiCard::writeStart(unsigned long)+0x64>)
    52b4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    52b6:	42ab      	cmp	r3, r5
    52b8:	d124      	bne.n	5304 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    52ba:	7d40      	ldrb	r0, [r0, #21]
    52bc:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    52be:	f04f 0119 	mov.w	r1, #25
    52c2:	4620      	mov	r0, r4
    sector <<= 9;
    52c4:	bf18      	it	ne
    52c6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    52c8:	f7ff fde6 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52cc:	b920      	cbnz	r0, 52d8 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    52ce:	2302      	movs	r3, #2
  return true;
    52d0:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    52d2:	74e3      	strb	r3, [r4, #19]
}
    52d4:	b003      	add	sp, #12
    52d6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    52d8:	230e      	movs	r3, #14
  if (m_spiActive) {
    52da:	7ca0      	ldrb	r0, [r4, #18]
    52dc:	7463      	strb	r3, [r4, #17]
    52de:	2800      	cmp	r0, #0
    52e0:	d0f8      	beq.n	52d4 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    52e2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    52e4:	7c20      	ldrb	r0, [r4, #16]
    52e6:	2101      	movs	r1, #1
    52e8:	f001 fbb6 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52ec:	21ff      	movs	r1, #255	; 0xff
    52ee:	4628      	mov	r0, r5
    52f0:	f001 fc90 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    52f4:	4628      	mov	r0, r5
    52f6:	f001 fc43 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    52fa:	2300      	movs	r3, #0
}
    52fc:	4618      	mov	r0, r3
    m_spiActive = false;
    52fe:	74a3      	strb	r3, [r4, #18]
}
    5300:	b003      	add	sp, #12
    5302:	bd30      	pop	{r4, r5, pc}
    5304:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    5306:	4798      	blx	r3
    5308:	9a01      	ldr	r2, [sp, #4]
    530a:	e7d7      	b.n	52bc <SharedSpiCard::writeStart(unsigned long)+0x14>
    530c:	00004b3d 	.word	0x00004b3d

00005310 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    5310:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    5316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5318:	4617      	mov	r7, r2
    531a:	4a41      	ldr	r2, [pc, #260]	; (5420 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    531c:	b085      	sub	sp, #20
    531e:	4604      	mov	r4, r0
    5320:	460e      	mov	r6, r1
    5322:	4293      	cmp	r3, r2
    5324:	d145      	bne.n	53b2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    5326:	466a      	mov	r2, sp
    5328:	2109      	movs	r1, #9
    532a:	f7ff fe65 	bl	4ff8 <SharedSpiCard::readRegister(unsigned char, void*)>
    532e:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    5330:	b1b5      	cbz	r5, 5360 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    5332:	f89d 300a 	ldrb.w	r3, [sp, #10]
    5336:	065a      	lsls	r2, r3, #25
    5338:	d518      	bpl.n	536c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    533a:	7d63      	ldrb	r3, [r4, #21]
    533c:	2b03      	cmp	r3, #3
    533e:	d001      	beq.n	5344 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5340:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    5342:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    5344:	4632      	mov	r2, r6
    5346:	2120      	movs	r1, #32
    5348:	4620      	mov	r0, r4
    534a:	f7ff fda5 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    534e:	b928      	cbnz	r0, 535c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    5350:	463a      	mov	r2, r7
    5352:	2121      	movs	r1, #33	; 0x21
    5354:	4620      	mov	r0, r4
    5356:	f7ff fd9f 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    535a:	b370      	cbz	r0, 53ba <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    535c:	2326      	movs	r3, #38	; 0x26
    535e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5360:	7ca5      	ldrb	r5, [r4, #18]
    5362:	b99d      	cbnz	r5, 538c <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    5364:	4628      	mov	r0, r5
    5366:	b005      	add	sp, #20
    5368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    536c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5370:	f89d 200b 	ldrb.w	r2, [sp, #11]
    5374:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5376:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    537a:	1c7a      	adds	r2, r7, #1
    537c:	4332      	orrs	r2, r6
    537e:	4213      	tst	r3, r2
    5380:	d0db      	beq.n	533a <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5382:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    5384:	7ca5      	ldrb	r5, [r4, #18]
    5386:	7463      	strb	r3, [r4, #17]
    5388:	2d00      	cmp	r5, #0
    538a:	d0eb      	beq.n	5364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    538c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    538e:	7c20      	ldrb	r0, [r4, #16]
    5390:	2101      	movs	r1, #1
    5392:	f001 fb61 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5396:	21ff      	movs	r1, #255	; 0xff
    5398:	4628      	mov	r0, r5
    539a:	f001 fc3b 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    539e:	4628      	mov	r0, r5
    53a0:	f001 fbee 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53a4:	2300      	movs	r3, #0
  return false;
    53a6:	461d      	mov	r5, r3
    m_spiActive = false;
    53a8:	74a3      	strb	r3, [r4, #18]
}
    53aa:	4628      	mov	r0, r5
    53ac:	b005      	add	sp, #20
    53ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    53b2:	4669      	mov	r1, sp
    53b4:	4798      	blx	r3
    53b6:	4605      	mov	r5, r0
    53b8:	e7ba      	b.n	5330 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    53ba:	4602      	mov	r2, r0
    53bc:	2126      	movs	r1, #38	; 0x26
    53be:	4620      	mov	r0, r4
    53c0:	f7ff fd6a 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    53c4:	2800      	cmp	r0, #0
    53c6:	d1c9      	bne.n	535c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    53c8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5424 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    53cc:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    53d0:	f104 0904 	add.w	r9, r4, #4
    53d4:	f8d8 3000 	ldr.w	r3, [r8]
    53d8:	441f      	add	r7, r3
    53da:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    53dc:	e004      	b.n	53e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    53de:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    53e2:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    53e4:	041b      	lsls	r3, r3, #16
    53e6:	d417      	bmi.n	5418 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    53e8:	4648      	mov	r0, r9
    53ea:	f001 fbf5 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    53ee:	28ff      	cmp	r0, #255	; 0xff
    53f0:	4606      	mov	r6, r0
    53f2:	d1f4      	bne.n	53de <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    53f4:	7ca3      	ldrb	r3, [r4, #18]
    53f6:	2b00      	cmp	r3, #0
    53f8:	d0b4      	beq.n	5364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    53fa:	2101      	movs	r1, #1
    53fc:	7c20      	ldrb	r0, [r4, #16]
  return true;
    53fe:	461d      	mov	r5, r3
    5400:	f001 fb2a 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5404:	4631      	mov	r1, r6
    5406:	4648      	mov	r0, r9
    5408:	f001 fc04 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    540c:	4648      	mov	r0, r9
    540e:	f001 fbb7 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5412:	2300      	movs	r3, #0
    5414:	74a3      	strb	r3, [r4, #18]
}
    5416:	e7a5      	b.n	5364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    5418:	2328      	movs	r3, #40	; 0x28
    541a:	7463      	strb	r3, [r4, #17]
    goto fail;
    541c:	e7a0      	b.n	5360 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    541e:	bf00      	nop
    5420:	00005429 	.word	0x00005429
    5424:	20022564 	.word	0x20022564

00005428 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    5428:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    542a:	2200      	movs	r2, #0
    542c:	b082      	sub	sp, #8
    542e:	460e      	mov	r6, r1
    5430:	2109      	movs	r1, #9
    5432:	4604      	mov	r4, r0
    5434:	f7ff fd30 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5438:	b1b0      	cbz	r0, 5468 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    543a:	231b      	movs	r3, #27
    543c:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    543e:	7ca0      	ldrb	r0, [r4, #18]
    5440:	b908      	cbnz	r0, 5446 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    5442:	b002      	add	sp, #8
    5444:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5446:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5448:	7c20      	ldrb	r0, [r4, #16]
    544a:	2101      	movs	r1, #1
    544c:	f001 fb04 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5450:	21ff      	movs	r1, #255	; 0xff
    5452:	4628      	mov	r0, r5
    5454:	f001 fbde 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5458:	4628      	mov	r0, r5
    545a:	f001 fb91 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    545e:	2300      	movs	r3, #0
  return false;
    5460:	4618      	mov	r0, r3
    m_spiActive = false;
    5462:	74a3      	strb	r3, [r4, #18]
  }
    5464:	b002      	add	sp, #8
    5466:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5468:	4605      	mov	r5, r0
    546a:	2210      	movs	r2, #16
    546c:	4631      	mov	r1, r6
    546e:	4620      	mov	r0, r4
    5470:	f7ff fc68 	bl	4d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5474:	2800      	cmp	r0, #0
    5476:	d0e2      	beq.n	543e <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    5478:	7ca6      	ldrb	r6, [r4, #18]
    547a:	2e00      	cmp	r6, #0
    547c:	d0e1      	beq.n	5442 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    547e:	7c20      	ldrb	r0, [r4, #16]
    5480:	2101      	movs	r1, #1
    5482:	f001 fae9 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5486:	1d20      	adds	r0, r4, #4
    5488:	21ff      	movs	r1, #255	; 0xff
    548a:	9001      	str	r0, [sp, #4]
    548c:	f001 fbc2 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5490:	9801      	ldr	r0, [sp, #4]
    5492:	f001 fb75 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
}
    5496:	4630      	mov	r0, r6
    m_spiActive = false;
    5498:	74a5      	strb	r5, [r4, #18]
  }
    549a:	b002      	add	sp, #8
    549c:	bd70      	pop	{r4, r5, r6, pc}
    549e:	bf00      	nop

000054a0 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    54a0:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    54a2:	2200      	movs	r2, #0
    54a4:	b082      	sub	sp, #8
    54a6:	460e      	mov	r6, r1
    54a8:	210a      	movs	r1, #10
    54aa:	4604      	mov	r4, r0
    54ac:	f7ff fcf4 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    54b0:	b1b0      	cbz	r0, 54e0 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    54b2:	231b      	movs	r3, #27
    54b4:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    54b6:	7ca0      	ldrb	r0, [r4, #18]
    54b8:	b908      	cbnz	r0, 54be <SharedSpiCard::readCID(CID*)+0x1e>
  }
    54ba:	b002      	add	sp, #8
    54bc:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    54be:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    54c0:	7c20      	ldrb	r0, [r4, #16]
    54c2:	2101      	movs	r1, #1
    54c4:	f001 fac8 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54c8:	21ff      	movs	r1, #255	; 0xff
    54ca:	4628      	mov	r0, r5
    54cc:	f001 fba2 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    54d0:	4628      	mov	r0, r5
    54d2:	f001 fb55 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    54d6:	2300      	movs	r3, #0
  return false;
    54d8:	4618      	mov	r0, r3
    m_spiActive = false;
    54da:	74a3      	strb	r3, [r4, #18]
  }
    54dc:	b002      	add	sp, #8
    54de:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    54e0:	4605      	mov	r5, r0
    54e2:	2210      	movs	r2, #16
    54e4:	4631      	mov	r1, r6
    54e6:	4620      	mov	r0, r4
    54e8:	f7ff fc2c 	bl	4d44 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    54ec:	2800      	cmp	r0, #0
    54ee:	d0e2      	beq.n	54b6 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    54f0:	7ca6      	ldrb	r6, [r4, #18]
    54f2:	2e00      	cmp	r6, #0
    54f4:	d0e1      	beq.n	54ba <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    54f6:	7c20      	ldrb	r0, [r4, #16]
    54f8:	2101      	movs	r1, #1
    54fa:	f001 faad 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54fe:	1d20      	adds	r0, r4, #4
    5500:	21ff      	movs	r1, #255	; 0xff
    5502:	9001      	str	r0, [sp, #4]
    5504:	f001 fb86 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5508:	9801      	ldr	r0, [sp, #4]
    550a:	f001 fb39 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
}
    550e:	4630      	mov	r0, r6
    m_spiActive = false;
    5510:	74a5      	strb	r5, [r4, #18]
  }
    5512:	b002      	add	sp, #8
    5514:	bd70      	pop	{r4, r5, r6, pc}
    5516:	bf00      	nop

00005518 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    5518:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    551a:	1d05      	adds	r5, r0, #4
    551c:	4616      	mov	r6, r2
    551e:	4604      	mov	r4, r0
    5520:	4628      	mov	r0, r5
    5522:	f001 fb77 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    5526:	f44f 7200 	mov.w	r2, #512	; 0x200
    552a:	4631      	mov	r1, r6
    552c:	4628      	mov	r0, r5
    552e:	f001 fb7b 	bl	6c28 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    5532:	21ff      	movs	r1, #255	; 0xff
    5534:	4628      	mov	r0, r5
    5536:	f001 fb6d 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    553a:	21ff      	movs	r1, #255	; 0xff
    553c:	4628      	mov	r0, r5
    553e:	f001 fb69 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    5542:	4628      	mov	r0, r5
    5544:	f001 fb48 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5548:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    554c:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    554e:	2b05      	cmp	r3, #5
    5550:	d004      	beq.n	555c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    5552:	2320      	movs	r3, #32
  if (m_spiActive) {
    5554:	7ca0      	ldrb	r0, [r4, #18]
    5556:	7463      	strb	r3, [r4, #17]
    5558:	b910      	cbnz	r0, 5560 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    555a:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    555c:	2001      	movs	r0, #1
}
    555e:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    5560:	7c20      	ldrb	r0, [r4, #16]
    5562:	2101      	movs	r1, #1
    5564:	f001 fa78 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5568:	21ff      	movs	r1, #255	; 0xff
    556a:	4628      	mov	r0, r5
    556c:	f001 fb52 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5570:	4628      	mov	r0, r5
    5572:	f001 fb05 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5576:	2300      	movs	r3, #0
}
    5578:	4618      	mov	r0, r3
    m_spiActive = false;
    557a:	74a3      	strb	r3, [r4, #18]
}
    557c:	bd70      	pop	{r4, r5, r6, pc}
    557e:	bf00      	nop

00005580 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    5580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5584:	4d17      	ldr	r5, [pc, #92]	; (55e4 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    5586:	4606      	mov	r6, r0
    5588:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    558a:	f100 0804 	add.w	r8, r0, #4
    558e:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    5590:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5594:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    5596:	e003      	b.n	55a0 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    5598:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    559a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    559c:	041b      	lsls	r3, r3, #16
    559e:	d40c      	bmi.n	55ba <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    55a0:	4640      	mov	r0, r8
    55a2:	f001 fb19 	bl	6bd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    55a6:	28ff      	cmp	r0, #255	; 0xff
    55a8:	d1f6      	bne.n	5598 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    55aa:	463a      	mov	r2, r7
    55ac:	21fc      	movs	r1, #252	; 0xfc
    55ae:	4630      	mov	r0, r6
    55b0:	f7ff ffb2 	bl	5518 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    55b4:	b118      	cbz	r0, 55be <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    55b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    55ba:	2324      	movs	r3, #36	; 0x24
    55bc:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    55be:	7cb0      	ldrb	r0, [r6, #18]
    55c0:	2800      	cmp	r0, #0
    55c2:	d0f8      	beq.n	55b6 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    55c4:	7c30      	ldrb	r0, [r6, #16]
    55c6:	2101      	movs	r1, #1
    55c8:	f001 fa46 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55cc:	21ff      	movs	r1, #255	; 0xff
    55ce:	4640      	mov	r0, r8
    55d0:	f001 fb20 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    55d4:	4640      	mov	r0, r8
    55d6:	f001 fad3 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55da:	2300      	movs	r3, #0
}
    55dc:	4618      	mov	r0, r3
    m_spiActive = false;
    55de:	74b3      	strb	r3, [r6, #18]
}
    55e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55e4:	20022564 	.word	0x20022564

000055e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    55e8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    55ea:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    55ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    55ee:	4616      	mov	r6, r2
    55f0:	4a22      	ldr	r2, [pc, #136]	; (567c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    55f2:	b082      	sub	sp, #8
    55f4:	4604      	mov	r4, r0
    55f6:	460d      	mov	r5, r1
    55f8:	4293      	cmp	r3, r2
    55fa:	d13c      	bne.n	5676 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    55fc:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    55fe:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    5600:	f04f 0118 	mov.w	r1, #24
    5604:	4620      	mov	r0, r4
    sector <<= 9;
    5606:	bf18      	it	ne
    5608:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    560a:	462a      	mov	r2, r5
    560c:	f7ff fc44 	bl	4e98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5610:	4605      	mov	r5, r0
    5612:	b1b0      	cbz	r0, 5642 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    5614:	230d      	movs	r3, #13
    5616:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5618:	7ca0      	ldrb	r0, [r4, #18]
    561a:	b908      	cbnz	r0, 5620 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    561c:	b002      	add	sp, #8
    561e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5620:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5622:	7c20      	ldrb	r0, [r4, #16]
    5624:	2101      	movs	r1, #1
    5626:	f001 fa17 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    562a:	21ff      	movs	r1, #255	; 0xff
    562c:	4628      	mov	r0, r5
    562e:	f001 faf1 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5632:	4628      	mov	r0, r5
    5634:	f001 faa4 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5638:	2300      	movs	r3, #0
  return false;
    563a:	4618      	mov	r0, r3
    m_spiActive = false;
    563c:	74a3      	strb	r3, [r4, #18]
}
    563e:	b002      	add	sp, #8
    5640:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    5642:	4632      	mov	r2, r6
    5644:	21fe      	movs	r1, #254	; 0xfe
    5646:	4620      	mov	r0, r4
    5648:	f7ff ff66 	bl	5518 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    564c:	2800      	cmp	r0, #0
    564e:	d0e3      	beq.n	5618 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    5650:	7ca6      	ldrb	r6, [r4, #18]
    5652:	2e00      	cmp	r6, #0
    5654:	d0e2      	beq.n	561c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    5656:	7c20      	ldrb	r0, [r4, #16]
    5658:	2101      	movs	r1, #1
    565a:	f001 f9fd 	bl	6a58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    565e:	1d20      	adds	r0, r4, #4
    5660:	21ff      	movs	r1, #255	; 0xff
    5662:	9001      	str	r0, [sp, #4]
    5664:	f001 fad6 	bl	6c14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5668:	9801      	ldr	r0, [sp, #4]
    566a:	f001 fa89 	bl	6b80 <SdSpiArduinoDriver::deactivate()>
  return true;
    566e:	4630      	mov	r0, r6
    m_spiActive = false;
    5670:	74a5      	strb	r5, [r4, #18]
}
    5672:	b002      	add	sp, #8
    5674:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    5676:	4798      	blx	r3
    5678:	e7c1      	b.n	55fe <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    567a:	bf00      	nop
    567c:	00004b3d 	.word	0x00004b3d

00005680 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5680:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    5682:	7f04      	ldrb	r4, [r0, #28]
    5684:	b134      	cbz	r4, 5694 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    5686:	6804      	ldr	r4, [r0, #0]
    5688:	2301      	movs	r3, #1
    568a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    568c:	46a4      	mov	ip, r4
}
    568e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    5692:	4760      	bx	ip
}
    5694:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    5698:	f7ff bfa6 	b.w	55e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000569c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    569c:	2000      	movs	r0, #0
    569e:	4770      	bx	lr

000056a0 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    56a0:	2000      	movs	r0, #0
    56a2:	4770      	bx	lr

000056a4 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    56a4:	2000      	movs	r0, #0
    56a6:	4770      	bx	lr

000056a8 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    56a8:	4770      	bx	lr
    56aa:	bf00      	nop

000056ac <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    56ac:	4b08      	ldr	r3, [pc, #32]	; (56d0 <sdIrs()+0x24>)
    56ae:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    56b0:	4a08      	ldr	r2, [pc, #32]	; (56d4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    56b2:	4809      	ldr	r0, [pc, #36]	; (56d8 <sdIrs()+0x2c>)
static void sdIrs() {
    56b4:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    56b6:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    56b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    56ba:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    56bc:	6812      	ldr	r2, [r2, #0]
}
    56be:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    56c2:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    56c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    56c6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    56ca:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    56cc:	7001      	strb	r1, [r0, #0]
}
    56ce:	4770      	bx	lr
    56d0:	402c0000 	.word	0x402c0000
    56d4:	200200a0 	.word	0x200200a0
    56d8:	200225fa 	.word	0x200225fa

000056dc <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    56dc:	4b03      	ldr	r3, [pc, #12]	; (56ec <isBusyDat()+0x10>)
    56de:	6a58      	ldr	r0, [r3, #36]	; 0x24
    56e0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    56e4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    56e8:	4770      	bx	lr
    56ea:	bf00      	nop
    56ec:	402c0000 	.word	0x402c0000

000056f0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    56f0:	4b01      	ldr	r3, [pc, #4]	; (56f8 <isBusyDMA()+0x8>)
    56f2:	7818      	ldrb	r0, [r3, #0]
}
    56f4:	4770      	bx	lr
    56f6:	bf00      	nop
    56f8:	200225fa 	.word	0x200225fa

000056fc <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    56fc:	4a2b      	ldr	r2, [pc, #172]	; (57ac <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56fe:	4b2c      	ldr	r3, [pc, #176]	; (57b0 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5700:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    5702:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5706:	492b      	ldr	r1, [pc, #172]	; (57b4 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5708:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5710:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    5712:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    5714:	4c28      	ldr	r4, [pc, #160]	; (57b8 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    5716:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    571a:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    571e:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    5722:	089b      	lsrs	r3, r3, #2
    5724:	fbb1 fef3 	udiv	lr, r1, r3
    5728:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    572c:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    5730:	d235      	bcs.n	579e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    5732:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    5734:	461e      	mov	r6, r3
    5736:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5738:	011a      	lsls	r2, r3, #4
    573a:	fbbe f2f2 	udiv	r2, lr, r2
    573e:	4282      	cmp	r2, r0
    5740:	d901      	bls.n	5746 <setSdclk(unsigned long)+0x4a>
    5742:	2bff      	cmp	r3, #255	; 0xff
    5744:	d9f6      	bls.n	5734 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5746:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    574a:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    574c:	4290      	cmp	r0, r2
    574e:	d22a      	bcs.n	57a6 <setSdclk(unsigned long)+0xaa>
    5750:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5754:	2201      	movs	r2, #1
    5756:	e000      	b.n	575a <setSdclk(unsigned long)+0x5e>
    5758:	46a4      	mov	ip, r4
    dvs++;
    575a:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    575c:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5760:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5762:	fbbe f1fc 	udiv	r1, lr, ip
    5766:	4281      	cmp	r1, r0
    5768:	d917      	bls.n	579a <setSdclk(unsigned long)+0x9e>
    576a:	2a10      	cmp	r2, #16
    576c:	d1f4      	bne.n	5758 <setSdclk(unsigned long)+0x5c>
    576e:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    5770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5774:	4911      	ldr	r1, [pc, #68]	; (57bc <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    5776:	4a12      	ldr	r2, [pc, #72]	; (57c0 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    5778:	fb03 fc0c 	mul.w	ip, r3, ip
    577c:	fbbe f3fc 	udiv	r3, lr, ip
    5780:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    5782:	4b10      	ldr	r3, [pc, #64]	; (57c4 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    5784:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    5786:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    5788:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    578a:	4333      	orrs	r3, r6
    578c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    5790:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5792:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5794:	071b      	lsls	r3, r3, #28
    5796:	d5fc      	bpl.n	5792 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    5798:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    579a:	012d      	lsls	r5, r5, #4
    579c:	e7e8      	b.n	5770 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    579e:	4672      	mov	r2, lr
    57a0:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    57a2:	2301      	movs	r3, #1
    57a4:	e7d2      	b.n	574c <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    57a6:	469c      	mov	ip, r3
    57a8:	2500      	movs	r5, #0
    57aa:	e7e1      	b.n	5770 <setSdclk(unsigned long)+0x74>
    57ac:	400fc000 	.word	0x400fc000
    57b0:	400d8000 	.word	0x400d8000
    57b4:	5e69ec00 	.word	0x5e69ec00
    57b8:	aaaaaaab 	.word	0xaaaaaaab
    57bc:	2000cdbc 	.word	0x2000cdbc
    57c0:	402c0000 	.word	0x402c0000
    57c4:	fff0000f 	.word	0xfff0000f

000057c8 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    57c8:	4b01      	ldr	r3, [pc, #4]	; (57d0 <SdioCard::errorCode() const+0x8>)
}
    57ca:	7818      	ldrb	r0, [r3, #0]
    57cc:	4770      	bx	lr
    57ce:	bf00      	nop
    57d0:	20008ec6 	.word	0x20008ec6

000057d4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    57d4:	4b01      	ldr	r3, [pc, #4]	; (57dc <SdioCard::errorData() const+0x8>)
    57d6:	6818      	ldr	r0, [r3, #0]
}
    57d8:	4770      	bx	lr
    57da:	bf00      	nop
    57dc:	200200a0 	.word	0x200200a0

000057e0 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    57e0:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    57e2:	4c07      	ldr	r4, [pc, #28]	; (5800 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    57e4:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    57e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    57e8:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    57ec:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    57ee:	f8cc 1004 	str.w	r1, [ip, #4]
    57f2:	f8cc 2008 	str.w	r2, [ip, #8]
    57f6:	f8cc 300c 	str.w	r3, [ip, #12]
}
    57fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    57fe:	4770      	bx	lr
    5800:	2001fbd4 	.word	0x2001fbd4

00005804 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5804:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    5806:	4c07      	ldr	r4, [pc, #28]	; (5824 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    5808:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    580a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    580c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    5810:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    5812:	f8cc 1004 	str.w	r1, [ip, #4]
    5816:	f8cc 2008 	str.w	r2, [ip, #8]
    581a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    581e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5822:	4770      	bx	lr
    5824:	2001fbe4 	.word	0x2001fbe4

00005828 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5828:	4b02      	ldr	r3, [pc, #8]	; (5834 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    582a:	2001      	movs	r0, #1
  *ocr = m_ocr;
    582c:	681b      	ldr	r3, [r3, #0]
    582e:	600b      	str	r3, [r1, #0]
}
    5830:	4770      	bx	lr
    5832:	bf00      	nop
    5834:	2001fbf4 	.word	0x2001fbf4

00005838 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    5838:	4770      	bx	lr
    583a:	bf00      	nop

0000583c <SdioCard::~SdioCard()>:
    583c:	b510      	push	{r4, lr}
    583e:	4604      	mov	r4, r0
    5840:	210c      	movs	r1, #12
    5842:	f002 fe03 	bl	844c <operator delete(void*, unsigned int)>
    5846:	4620      	mov	r0, r4
    5848:	bd10      	pop	{r4, pc}
    584a:	bf00      	nop

0000584c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    584c:	4b04      	ldr	r3, [pc, #16]	; (5860 <SdioCard::type() const+0x14>)
    584e:	781b      	ldrb	r3, [r3, #0]
    5850:	b123      	cbz	r3, 585c <SdioCard::type() const+0x10>
    5852:	4b04      	ldr	r3, [pc, #16]	; (5864 <SdioCard::type() const+0x18>)
    5854:	7818      	ldrb	r0, [r3, #0]
    5856:	3002      	adds	r0, #2
    5858:	b2c0      	uxtb	r0, r0
    585a:	4770      	bx	lr
    585c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    585e:	4770      	bx	lr
    5860:	200225f7 	.word	0x200225f7
    5864:	200225f8 	.word	0x200225f8

00005868 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    5868:	4b18      	ldr	r3, [pc, #96]	; (58cc <SdioCard::sectorCount()+0x64>)
    586a:	781a      	ldrb	r2, [r3, #0]
    586c:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    5870:	d00f      	beq.n	5892 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    5872:	2a40      	cmp	r2, #64	; 0x40
    5874:	d001      	beq.n	587a <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    5876:	2000      	movs	r0, #0
}
    5878:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    587a:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    587c:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    587e:	7a19      	ldrb	r1, [r3, #8]
    5880:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5882:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5886:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    588a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    588e:	0280      	lsls	r0, r0, #10
    5890:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5892:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5894:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5896:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5898:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    589c:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    58a0:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58a4:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    58a6:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58a8:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    58ac:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    58ae:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    58b2:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    58b6:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    58b8:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    58bc:	3001      	adds	r0, #1
    58be:	f003 030f 	and.w	r3, r3, #15
    58c2:	4413      	add	r3, r2
    58c4:	3b07      	subs	r3, #7
    58c6:	4098      	lsls	r0, r3
}
    58c8:	f85d fb04 	ldr.w	pc, [sp], #4
    58cc:	2001fbe4 	.word	0x2001fbe4

000058d0 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    58d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    58d4:	f002 fc8a 	bl	81ec <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    58d8:	4e17      	ldr	r6, [pc, #92]	; (5938 <waitTransferComplete() [clone .part.0]+0x68>)
    58da:	4d18      	ldr	r5, [pc, #96]	; (593c <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    58dc:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    58de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5954 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    58e2:	e004      	b.n	58ee <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    58e4:	f002 fc82 	bl	81ec <micros>
    58e8:	1bc0      	subs	r0, r0, r7
    58ea:	4540      	cmp	r0, r8
    58ec:	d81b      	bhi.n	5926 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    58ee:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    58f0:	402c      	ands	r4, r5
    58f2:	d0f7      	beq.n	58e4 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    58f4:	4a12      	ldr	r2, [pc, #72]	; (5940 <waitTransferComplete() [clone .part.0]+0x70>)
    58f6:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    58f8:	4b12      	ldr	r3, [pc, #72]	; (5944 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    58fa:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    58fc:	6b32      	ldr	r2, [r6, #48]	; 0x30
    58fe:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5900:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5902:	4a11      	ldr	r2, [pc, #68]	; (5948 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    5904:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	4213      	tst	r3, r2
    590a:	d009      	beq.n	5920 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    590c:	490f      	ldr	r1, [pc, #60]	; (594c <waitTransferComplete() [clone .part.0]+0x7c>)
    590e:	241f      	movs	r4, #31
  m_errorLine = line;
    5910:	4b0f      	ldr	r3, [pc, #60]	; (5950 <waitTransferComplete() [clone .part.0]+0x80>)
    5912:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5916:	2000      	movs	r0, #0
  m_errorCode = code;
    5918:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    591a:	601a      	str	r2, [r3, #0]
}
    591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    5920:	2001      	movs	r0, #1
}
    5922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    5926:	4a06      	ldr	r2, [pc, #24]	; (5940 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    5928:	4b06      	ldr	r3, [pc, #24]	; (5944 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    592a:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    592c:	6b32      	ldr	r2, [r6, #48]	; 0x30
    592e:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5934:	e7ea      	b.n	590c <waitTransferComplete() [clone .part.0]+0x3c>
    5936:	bf00      	nop
    5938:	402c0000 	.word	0x402c0000
    593c:	117f0002 	.word	0x117f0002
    5940:	200225f9 	.word	0x200225f9
    5944:	200200a0 	.word	0x200200a0
    5948:	117f0000 	.word	0x117f0000
    594c:	20008ec6 	.word	0x20008ec6
    5950:	2001d1c0 	.word	0x2001d1c0
    5954:	000f4240 	.word	0x000f4240

00005958 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    595c:	4c26      	ldr	r4, [pc, #152]	; (59f8 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    595e:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5960:	7823      	ldrb	r3, [r4, #0]
    5962:	2b00      	cmp	r3, #0
    5964:	d138      	bne.n	59d8 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5966:	4b25      	ldr	r3, [pc, #148]	; (59fc <SdioCard::writeData(unsigned char const*)+0xa4>)
    5968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    596a:	05d2      	lsls	r2, r2, #23
    596c:	d52b      	bpl.n	59c6 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    596e:	4d23      	ldr	r5, [pc, #140]	; (59fc <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5970:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5a08 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5974:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    597a:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    597c:	f002 fc36 	bl	81ec <micros>
    5980:	4606      	mov	r6, r0
  while (fcn()) {
    5982:	e004      	b.n	598e <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5984:	f002 fc32 	bl	81ec <micros>
    5988:	1b80      	subs	r0, r0, r6
    598a:	4540      	cmp	r0, r8
    598c:	d82a      	bhi.n	59e4 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    598e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5990:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5994:	d0f6      	beq.n	5984 <SdioCard::writeData(unsigned char const*)+0x2c>
    5996:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    599a:	4818      	ldr	r0, [pc, #96]	; (59fc <SdioCard::writeData(unsigned char const*)+0xa4>)
    599c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    59a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    59a2:	055b      	lsls	r3, r3, #21
    59a4:	d5fc      	bpl.n	59a0 <SdioCard::writeData(unsigned char const*)+0x48>
    59a6:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    59aa:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    59ae:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    59b0:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    59b2:	d1fa      	bne.n	59aa <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    59b4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    59b8:	45bc      	cmp	ip, r7
    59ba:	d1f1      	bne.n	59a0 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    59bc:	2301      	movs	r3, #1
  return true;
    59be:	4618      	mov	r0, r3
  m_transferActive = true;
    59c0:	7023      	strb	r3, [r4, #0]
}
    59c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    59c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    59cc:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    59ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    59d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    59d4:	629a      	str	r2, [r3, #40]	; 0x28
    59d6:	e7ca      	b.n	596e <SdioCard::writeData(unsigned char const*)+0x16>
    59d8:	f7ff ff7a 	bl	58d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    59dc:	2800      	cmp	r0, #0
    59de:	d1c2      	bne.n	5966 <SdioCard::writeData(unsigned char const*)+0xe>
}
    59e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    59e4:	4906      	ldr	r1, [pc, #24]	; (5a00 <SdioCard::writeData(unsigned char const*)+0xa8>)
    59e6:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    59e8:	4b06      	ldr	r3, [pc, #24]	; (5a04 <SdioCard::writeData(unsigned char const*)+0xac>)
    59ea:	f240 32d9 	movw	r2, #985	; 0x3d9
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    59ee:	4648      	mov	r0, r9
  m_errorCode = code;
    59f0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    59f2:	601a      	str	r2, [r3, #0]
}
    59f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    59f8:	200225f9 	.word	0x200225f9
    59fc:	402c0000 	.word	0x402c0000
    5a00:	20008ec6 	.word	0x20008ec6
    5a04:	2001d1c0 	.word	0x2001d1c0
    5a08:	000f4240 	.word	0x000f4240

00005a0c <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a10:	4607      	mov	r7, r0
    5a12:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    5a14:	4c1f      	ldr	r4, [pc, #124]	; (5a94 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    5a16:	f002 fbe9 	bl	81ec <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a1a:	4e1f      	ldr	r6, [pc, #124]	; (5a98 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5a1c:	4605      	mov	r5, r0
  while (fcn()) {
    5a1e:	e004      	b.n	5a2a <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a20:	f002 fbe4 	bl	81ec <micros>
    5a24:	1b43      	subs	r3, r0, r5
    5a26:	42b3      	cmp	r3, r6
    5a28:	d824      	bhi.n	5a74 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    5a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5a2c:	07d9      	lsls	r1, r3, #31
    5a2e:	d4f7      	bmi.n	5a20 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5a30:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    5a32:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    5a36:	d420      	bmi.n	5a7a <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    5a38:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    5a3c:	4c15      	ldr	r4, [pc, #84]	; (5a94 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5a3e:	4e17      	ldr	r6, [pc, #92]	; (5a9c <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    5a40:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    5a42:	f002 fbd3 	bl	81ec <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a46:	4f14      	ldr	r7, [pc, #80]	; (5a98 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    5a48:	4605      	mov	r5, r0
  while (fcn()) {
    5a4a:	e004      	b.n	5a56 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a4c:	f002 fbce 	bl	81ec <micros>
    5a50:	1b40      	subs	r0, r0, r5
    5a52:	42b8      	cmp	r0, r7
    5a54:	d80e      	bhi.n	5a74 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5a56:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5a58:	4233      	tst	r3, r6
    5a5a:	d0f7      	beq.n	5a4c <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5a5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5a5e:	4b10      	ldr	r3, [pc, #64]	; (5aa0 <cardCommand(unsigned long, unsigned long)+0x94>)
    5a60:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5a62:	681a      	ldr	r2, [r3, #0]
    5a64:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5a66:	681a      	ldr	r2, [r3, #0]
    5a68:	07d2      	lsls	r2, r2, #31
    5a6a:	d503      	bpl.n	5a74 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5a6c:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5a6e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5a72:	d00b      	beq.n	5a8c <cardCommand(unsigned long, unsigned long)+0x80>
    5a74:	2000      	movs	r0, #0
}
    5a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5a7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5a7c:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5a82:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5a84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5a86:	4313      	orrs	r3, r2
    5a88:	64a3      	str	r3, [r4, #72]	; 0x48
    5a8a:	e7d5      	b.n	5a38 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5a8c:	2001      	movs	r0, #1
}
    5a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a92:	bf00      	nop
    5a94:	402c0000 	.word	0x402c0000
    5a98:	000f4240 	.word	0x000f4240
    5a9c:	000f0001 	.word	0x000f0001
    5aa0:	200200a0 	.word	0x200200a0

00005aa4 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5aa4:	4b15      	ldr	r3, [pc, #84]	; (5afc <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5aa6:	b530      	push	{r4, r5, lr}
    5aa8:	460d      	mov	r5, r1
    5aaa:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5aac:	6819      	ldr	r1, [r3, #0]
    5aae:	f7ff ffad 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5ab2:	b308      	cbz	r0, 5af8 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5ab4:	4b12      	ldr	r3, [pc, #72]	; (5b00 <readReg16(unsigned long, void*)+0x5c>)
    5ab6:	f105 040f 	add.w	r4, r5, #15
    5aba:	691a      	ldr	r2, [r3, #16]
    5abc:	9200      	str	r2, [sp, #0]
    5abe:	6959      	ldr	r1, [r3, #20]
    5ac0:	9101      	str	r1, [sp, #4]
    5ac2:	6999      	ldr	r1, [r3, #24]
    5ac4:	9102      	str	r1, [sp, #8]
    5ac6:	69db      	ldr	r3, [r3, #28]
    5ac8:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5aca:	2300      	movs	r3, #0
    5acc:	e001      	b.n	5ad2 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5ace:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5ad2:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5ad6:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5ad8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5adc:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5ae0:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5ae2:	fa22 f20c 	lsr.w	r2, r2, ip
    5ae6:	f10e 0110 	add.w	r1, lr, #16
    5aea:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5aee:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5af2:	d1ec      	bne.n	5ace <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5af4:	2300      	movs	r3, #0
    5af6:	73eb      	strb	r3, [r5, #15]
}
    5af8:	b005      	add	sp, #20
    5afa:	bd30      	pop	{r4, r5, pc}
    5afc:	2001fbf8 	.word	0x2001fbf8
    5b00:	402c0000 	.word	0x402c0000

00005b04 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5b04:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    5b06:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5b08:	07db      	lsls	r3, r3, #31
    5b0a:	d505      	bpl.n	5b18 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b0c:	4b15      	ldr	r3, [pc, #84]	; (5b64 <SdioCard::isBusy()+0x60>)
    5b0e:	681b      	ldr	r3, [r3, #0]
    5b10:	b1b3      	cbz	r3, 5b40 <SdioCard::isBusy()+0x3c>
}
    5b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b16:	4718      	bx	r3
    if (m_transferActive) {
    5b18:	4b13      	ldr	r3, [pc, #76]	; (5b68 <SdioCard::isBusy()+0x64>)
    5b1a:	781b      	ldrb	r3, [r3, #0]
    5b1c:	b93b      	cbnz	r3, 5b2e <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5b1e:	4b13      	ldr	r3, [pc, #76]	; (5b6c <SdioCard::isBusy()+0x68>)
    5b20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5b22:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5b26:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5b2a:	4620      	mov	r0, r4
    5b2c:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5b2e:	4b0f      	ldr	r3, [pc, #60]	; (5b6c <SdioCard::isBusy()+0x68>)
    5b30:	4c0f      	ldr	r4, [pc, #60]	; (5b70 <SdioCard::isBusy()+0x6c>)
    5b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5b34:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5b36:	fab4 f484 	clz	r4, r4
    5b3a:	0964      	lsrs	r4, r4, #5
}
    5b3c:	4620      	mov	r0, r4
    5b3e:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b40:	4b0c      	ldr	r3, [pc, #48]	; (5b74 <SdioCard::isBusy()+0x70>)
    5b42:	781c      	ldrb	r4, [r3, #0]
    5b44:	2c00      	cmp	r4, #0
    5b46:	d0f0      	beq.n	5b2a <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b48:	4b0b      	ldr	r3, [pc, #44]	; (5b78 <SdioCard::isBusy()+0x74>)
    5b4a:	480c      	ldr	r0, [pc, #48]	; (5b7c <SdioCard::isBusy()+0x78>)
    5b4c:	6819      	ldr	r1, [r3, #0]
    5b4e:	f7ff ff5d 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5b52:	2800      	cmp	r0, #0
    5b54:	d0e9      	beq.n	5b2a <SdioCard::isBusy()+0x26>
    5b56:	4b05      	ldr	r3, [pc, #20]	; (5b6c <SdioCard::isBusy()+0x68>)
    5b58:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b5a:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5b5e:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5b62:	e7e2      	b.n	5b2a <SdioCard::isBusy()+0x26>
    5b64:	2002009c 	.word	0x2002009c
    5b68:	200225f9 	.word	0x200225f9
    5b6c:	402c0000 	.word	0x402c0000
    5b70:	117f0002 	.word	0x117f0002
    5b74:	200225f6 	.word	0x200225f6
    5b78:	2001fbf8 	.word	0x2001fbf8
    5b7c:	0d1a0000 	.word	0x0d1a0000

00005b80 <SdioCard::status()>:
uint32_t SdioCard::status() {
    5b80:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b82:	4b04      	ldr	r3, [pc, #16]	; (5b94 <SdioCard::status()+0x14>)
    5b84:	4804      	ldr	r0, [pc, #16]	; (5b98 <SdioCard::status()+0x18>)
    5b86:	6819      	ldr	r1, [r3, #0]
    5b88:	f7ff ff40 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5b8c:	b108      	cbz	r0, 5b92 <SdioCard::status()+0x12>
    5b8e:	4b03      	ldr	r3, [pc, #12]	; (5b9c <SdioCard::status()+0x1c>)
    5b90:	6918      	ldr	r0, [r3, #16]
}
    5b92:	bd08      	pop	{r3, pc}
    5b94:	2001fbf8 	.word	0x2001fbf8
    5b98:	0d1a0000 	.word	0x0d1a0000
    5b9c:	402c0000 	.word	0x402c0000

00005ba0 <isBusyCMD13()>:
static bool isBusyCMD13() {
    5ba0:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ba2:	4b07      	ldr	r3, [pc, #28]	; (5bc0 <isBusyCMD13()+0x20>)
    5ba4:	4807      	ldr	r0, [pc, #28]	; (5bc4 <isBusyCMD13()+0x24>)
    5ba6:	6819      	ldr	r1, [r3, #0]
    5ba8:	f7ff ff30 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5bac:	b130      	cbz	r0, 5bbc <isBusyCMD13()+0x1c>
    5bae:	4b06      	ldr	r3, [pc, #24]	; (5bc8 <isBusyCMD13()+0x28>)
    5bb0:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5bb2:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5bb6:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5bba:	bd08      	pop	{r3, pc}
    5bbc:	2001      	movs	r0, #1
    5bbe:	bd08      	pop	{r3, pc}
    5bc0:	2001fbf8 	.word	0x2001fbf8
    5bc4:	0d1a0000 	.word	0x0d1a0000
    5bc8:	402c0000 	.word	0x402c0000

00005bcc <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5bd0:	4b29      	ldr	r3, [pc, #164]	; (5c78 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5bd2:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5bd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5c98 <SdioCard::writeStart(unsigned long)+0xcc>
    5bd8:	4e28      	ldr	r6, [pc, #160]	; (5c7c <SdioCard::writeStart(unsigned long)+0xb0>)
    5bda:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5bde:	f002 fb05 	bl	81ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5be2:	4d27      	ldr	r5, [pc, #156]	; (5c80 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5be4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5be6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5c9c <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5bea:	4f26      	ldr	r7, [pc, #152]	; (5c84 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5bec:	e006      	b.n	5bfc <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5bee:	f002 fafd 	bl	81ec <micros>
    5bf2:	1b00      	subs	r0, r0, r4
    5bf4:	42b8      	cmp	r0, r7
    5bf6:	d829      	bhi.n	5c4c <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5bf8:	f004 fbce 	bl	a398 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5bfc:	6831      	ldr	r1, [r6, #0]
    5bfe:	4628      	mov	r0, r5
    5c00:	f7ff ff04 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5c04:	2800      	cmp	r0, #0
    5c06:	d0f2      	beq.n	5bee <SdioCard::writeStart(unsigned long)+0x22>
    5c08:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5c0c:	05db      	lsls	r3, r3, #23
    5c0e:	d5ee      	bpl.n	5bee <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5c10:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5c12:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5c16:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c1a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5c22:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5c26:	4b18      	ldr	r3, [pc, #96]	; (5c88 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5c28:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5c2c:	781b      	ldrb	r3, [r3, #0]
    5c2e:	b1cb      	cbz	r3, 5c64 <SdioCard::writeStart(unsigned long)+0x98>
    5c30:	4649      	mov	r1, r9
    5c32:	4816      	ldr	r0, [pc, #88]	; (5c8c <SdioCard::writeStart(unsigned long)+0xc0>)
    5c34:	f7ff feea 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5c38:	b930      	cbnz	r0, 5c48 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5c3a:	4915      	ldr	r1, [pc, #84]	; (5c90 <SdioCard::writeStart(unsigned long)+0xc4>)
    5c3c:	240e      	movs	r4, #14
  m_errorLine = line;
    5c3e:	4b15      	ldr	r3, [pc, #84]	; (5c94 <SdioCard::writeStart(unsigned long)+0xc8>)
    5c40:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    5c44:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5c46:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5c4c:	4a10      	ldr	r2, [pc, #64]	; (5c90 <SdioCard::writeStart(unsigned long)+0xc4>)
    5c4e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5c50:	2000      	movs	r0, #0
  m_errorLine = line;
    5c52:	4b10      	ldr	r3, [pc, #64]	; (5c94 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5c54:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5c56:	f240 422c 	movw	r2, #1068	; 0x42c
      m_busyFcn = 0;
    5c5a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5c5e:	601a      	str	r2, [r3, #0]
}
    5c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5c64:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5c68:	4808      	ldr	r0, [pc, #32]	; (5c8c <SdioCard::writeStart(unsigned long)+0xc0>)
    5c6a:	4649      	mov	r1, r9
    5c6c:	f7ff fece 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5c70:	2800      	cmp	r0, #0
    5c72:	d1e9      	bne.n	5c48 <SdioCard::writeStart(unsigned long)+0x7c>
    5c74:	e7e1      	b.n	5c3a <SdioCard::writeStart(unsigned long)+0x6e>
    5c76:	bf00      	nop
    5c78:	00005ba1 	.word	0x00005ba1
    5c7c:	2001fbf8 	.word	0x2001fbf8
    5c80:	0d1a0000 	.word	0x0d1a0000
    5c84:	000f4240 	.word	0x000f4240
    5c88:	200225f8 	.word	0x200225f8
    5c8c:	193a0020 	.word	0x193a0020
    5c90:	20008ec6 	.word	0x20008ec6
    5c94:	2001d1c0 	.word	0x2001d1c0
    5c98:	2002009c 	.word	0x2002009c
    5c9c:	402c0000 	.word	0x402c0000

00005ca0 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    5ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5ca4:	4c25      	ldr	r4, [pc, #148]	; (5d3c <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5ca6:	2100      	movs	r1, #0
    5ca8:	4825      	ldr	r0, [pc, #148]	; (5d40 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5caa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5cb0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5cb2:	f7ff feab 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5cb6:	4605      	mov	r5, r0
    5cb8:	b948      	cbnz	r0, 5cce <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    5cba:	4922      	ldr	r1, [pc, #136]	; (5d44 <SdioCard::readStop()+0xa4>)
    5cbc:	2009      	movs	r0, #9
  m_errorLine = line;
    5cbe:	4b22      	ldr	r3, [pc, #136]	; (5d48 <SdioCard::readStop()+0xa8>)
    5cc0:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    5cc4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5cc6:	601a      	str	r2, [r3, #0]
}
    5cc8:	4628      	mov	r0, r5
    5cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    5cce:	4b1f      	ldr	r3, [pc, #124]	; (5d4c <SdioCard::readStop()+0xac>)
    5cd0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5d54 <SdioCard::readStop()+0xb4>
    5cd4:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    5cd8:	f002 fa88 	bl	81ec <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    5cde:	4606      	mov	r6, r0
  while (fcn()) {
    5ce0:	01d8      	lsls	r0, r3, #7
    5ce2:	d418      	bmi.n	5d16 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ce4:	4f1a      	ldr	r7, [pc, #104]	; (5d50 <SdioCard::readStop()+0xb0>)
    5ce6:	e004      	b.n	5cf2 <SdioCard::readStop()+0x52>
    yield();
    5ce8:	f004 fb56 	bl	a398 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5cee:	01d9      	lsls	r1, r3, #7
    5cf0:	d411      	bmi.n	5d16 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5cf2:	f002 fa7b 	bl	81ec <micros>
    5cf6:	1b83      	subs	r3, r0, r6
    5cf8:	42bb      	cmp	r3, r7
    5cfa:	d9f5      	bls.n	5ce8 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    5cfc:	4a11      	ldr	r2, [pc, #68]	; (5d44 <SdioCard::readStop()+0xa4>)
    5cfe:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5d00:	2500      	movs	r5, #0
  m_errorLine = line;
    5d02:	4b11      	ldr	r3, [pc, #68]	; (5d48 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    5d04:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5d06:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    5d0a:	4628      	mov	r0, r5
      m_busyFcn = 0;
    5d0c:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    5d10:	601a      	str	r2, [r3, #0]
}
    5d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    5d16:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5d18:	4b08      	ldr	r3, [pc, #32]	; (5d3c <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    5d1a:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5d20:	0792      	lsls	r2, r2, #30
    5d22:	d5d1      	bpl.n	5cc8 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    5d24:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5d2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5d2e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    5d32:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    5d34:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5d36:	629a      	str	r2, [r3, #40]	; 0x28
    5d38:	e7c6      	b.n	5cc8 <SdioCard::readStop()+0x28>
    5d3a:	bf00      	nop
    5d3c:	402c0000 	.word	0x402c0000
    5d40:	0cdb0000 	.word	0x0cdb0000
    5d44:	20008ec6 	.word	0x20008ec6
    5d48:	2001d1c0 	.word	0x2001d1c0
    5d4c:	000056dd 	.word	0x000056dd
    5d50:	000f4240 	.word	0x000f4240
    5d54:	2002009c 	.word	0x2002009c

00005d58 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    5d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d5c:	4682      	mov	sl, r0
    5d5e:	4689      	mov	r9, r1
    5d60:	4e36      	ldr	r6, [pc, #216]	; (5e3c <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    5d62:	f002 fa43 	bl	81ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d66:	4d36      	ldr	r5, [pc, #216]	; (5e40 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    5d68:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d6a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 5e6c <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d6e:	4f35      	ldr	r7, [pc, #212]	; (5e44 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    5d70:	e004      	b.n	5d7c <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d72:	f002 fa3b 	bl	81ec <micros>
    5d76:	1b03      	subs	r3, r0, r4
    5d78:	42bb      	cmp	r3, r7
    5d7a:	d827      	bhi.n	5dcc <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d7c:	6831      	ldr	r1, [r6, #0]
    5d7e:	4628      	mov	r0, r5
    5d80:	f7ff fe44 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5d84:	2800      	cmp	r0, #0
    5d86:	d0f4      	beq.n	5d72 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    5d88:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5d8c:	05da      	lsls	r2, r3, #23
    5d8e:	d5f0      	bpl.n	5d72 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    5d90:	2301      	movs	r3, #1
    5d92:	4d2d      	ldr	r5, [pc, #180]	; (5e48 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    5d94:	4f2d      	ldr	r7, [pc, #180]	; (5e4c <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5d96:	4651      	mov	r1, sl
  m_dmaBusy = true;
    5d98:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    5d9a:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5d9c:	482c      	ldr	r0, [pc, #176]	; (5e50 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    5d9e:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5da0:	4b2c      	ldr	r3, [pc, #176]	; (5e54 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    5da2:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5da6:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5daa:	4b2b      	ldr	r3, [pc, #172]	; (5e58 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    5dac:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5db0:	f7ff fe2c 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5db4:	4604      	mov	r4, r0
    5db6:	b9a0      	cbnz	r0, 5de2 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    5db8:	4928      	ldr	r1, [pc, #160]	; (5e5c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5dba:	2004      	movs	r0, #4
  m_errorLine = line;
    5dbc:	4b28      	ldr	r3, [pc, #160]	; (5e60 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5dbe:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    5dc2:	7008      	strb	r0, [r1, #0]
}
    5dc4:	4620      	mov	r0, r4
  m_errorLine = line;
    5dc6:	601a      	str	r2, [r3, #0]
}
    5dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5dcc:	4923      	ldr	r1, [pc, #140]	; (5e5c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5dce:	200a      	movs	r0, #10
  m_errorLine = line;
    5dd0:	4b23      	ldr	r3, [pc, #140]	; (5e60 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5dd2:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    5dd6:	2400      	movs	r4, #0
  m_errorCode = code;
    5dd8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5dda:	601a      	str	r2, [r3, #0]
}
    5ddc:	4620      	mov	r0, r4
    5dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    5de2:	4b20      	ldr	r3, [pc, #128]	; (5e64 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    5de4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5e70 <cardCMD6(unsigned long, unsigned char*)+0x118>
    5de8:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    5dec:	f002 f9fe 	bl	81ec <micros>
  return m_dmaBusy;
    5df0:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    5df2:	4606      	mov	r6, r0
  while (fcn()) {
    5df4:	b1bb      	cbz	r3, 5e26 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5df6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5e44 <cardCMD6(unsigned long, unsigned char*)+0xec>
    5dfa:	e003      	b.n	5e04 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    5dfc:	f004 facc 	bl	a398 <yield>
  return m_dmaBusy;
    5e00:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5e02:	b183      	cbz	r3, 5e26 <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5e04:	f002 f9f2 	bl	81ec <micros>
    5e08:	1b83      	subs	r3, r0, r6
    5e0a:	4543      	cmp	r3, r8
    5e0c:	d9f6      	bls.n	5dfc <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    5e0e:	2300      	movs	r3, #0
    5e10:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    5e14:	4911      	ldr	r1, [pc, #68]	; (5e5c <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5e16:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5e18:	4b11      	ldr	r3, [pc, #68]	; (5e60 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5e1a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    5e1e:	2400      	movs	r4, #0
  m_errorCode = code;
    5e20:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5e22:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    5e24:	e7da      	b.n	5ddc <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5e26:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    5e28:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5e2a:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    5e2c:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5e30:	d5f0      	bpl.n	5e14 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5e32:	683a      	ldr	r2, [r7, #0]
    5e34:	4b0c      	ldr	r3, [pc, #48]	; (5e68 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    5e36:	421a      	tst	r2, r3
    5e38:	d0d0      	beq.n	5ddc <cardCMD6(unsigned long, unsigned char*)+0x84>
    5e3a:	e7eb      	b.n	5e14 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5e3c:	2001fbf8 	.word	0x2001fbf8
    5e40:	0d1a0000 	.word	0x0d1a0000
    5e44:	000f4240 	.word	0x000f4240
    5e48:	200225fa 	.word	0x200225fa
    5e4c:	200200a0 	.word	0x200200a0
    5e50:	063a0011 	.word	0x063a0011
    5e54:	00010040 	.word	0x00010040
    5e58:	117f0002 	.word	0x117f0002
    5e5c:	20008ec6 	.word	0x20008ec6
    5e60:	2001d1c0 	.word	0x2001d1c0
    5e64:	000056f1 	.word	0x000056f1
    5e68:	117f0000 	.word	0x117f0000
    5e6c:	402c0000 	.word	0x402c0000
    5e70:	2002009c 	.word	0x2002009c

00005e74 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    5e78:	4d32      	ldr	r5, [pc, #200]	; (5f44 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5e7a:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    5e7c:	7aab      	ldrb	r3, [r5, #10]
    5e7e:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    5e82:	d112      	bne.n	5eaa <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    5e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5e88:	7aea      	ldrb	r2, [r5, #11]
    5e8a:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5e8c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5e90:	1c62      	adds	r2, r4, #1
    5e92:	430a      	orrs	r2, r1
    5e94:	4213      	tst	r3, r2
    5e96:	d008      	beq.n	5eaa <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    5e98:	492b      	ldr	r1, [pc, #172]	; (5f48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5e9a:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    5e9c:	4b2b      	ldr	r3, [pc, #172]	; (5f4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5e9e:	f240 22e3 	movw	r2, #739	; 0x2e3
  m_errorCode = code;
    5ea2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ea4:	601a      	str	r2, [r3, #0]
}
    5ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    5eaa:	4b29      	ldr	r3, [pc, #164]	; (5f50 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	b90b      	cbnz	r3, 5eb4 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    5eb0:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    5eb2:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    5eb4:	4827      	ldr	r0, [pc, #156]	; (5f54 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    5eb6:	f7ff fda9 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5eba:	b940      	cbnz	r0, 5ece <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    5ebc:	4922      	ldr	r1, [pc, #136]	; (5f48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5ebe:	240f      	movs	r4, #15
  m_errorLine = line;
    5ec0:	4b22      	ldr	r3, [pc, #136]	; (5f4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5ec2:	f240 22eb 	movw	r2, #747	; 0x2eb
  m_errorCode = code;
    5ec6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ec8:	601a      	str	r2, [r3, #0]
}
    5eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    5ece:	4621      	mov	r1, r4
    5ed0:	4821      	ldr	r0, [pc, #132]	; (5f58 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    5ed2:	f7ff fd9b 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5ed6:	b940      	cbnz	r0, 5eea <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    5ed8:	491b      	ldr	r1, [pc, #108]	; (5f48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5eda:	2410      	movs	r4, #16
  m_errorLine = line;
    5edc:	4b1b      	ldr	r3, [pc, #108]	; (5f4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5ede:	f240 22ee 	movw	r2, #750	; 0x2ee
  m_errorCode = code;
    5ee2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ee4:	601a      	str	r2, [r3, #0]
}
    5ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5eea:	2100      	movs	r1, #0
    5eec:	481b      	ldr	r0, [pc, #108]	; (5f5c <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    5eee:	f7ff fd8d 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5ef2:	b938      	cbnz	r0, 5f04 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    5ef4:	4914      	ldr	r1, [pc, #80]	; (5f48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5ef6:	2411      	movs	r4, #17
  m_errorLine = line;
    5ef8:	4b14      	ldr	r3, [pc, #80]	; (5f4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5efa:	f240 22f1 	movw	r2, #753	; 0x2f1
  m_errorCode = code;
    5efe:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f00:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    5f02:	e7e2      	b.n	5eca <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    5f04:	f002 f972 	bl	81ec <micros>
    5f08:	4e15      	ldr	r6, [pc, #84]	; (5f60 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f0a:	4d16      	ldr	r5, [pc, #88]	; (5f64 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    5f0c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f0e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5f6c <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f12:	4f15      	ldr	r7, [pc, #84]	; (5f68 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f14:	6831      	ldr	r1, [r6, #0]
    5f16:	4628      	mov	r0, r5
    5f18:	f7ff fd78 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5f1c:	b118      	cbz	r0, 5f26 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    5f1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5f22:	05db      	lsls	r3, r3, #23
    5f24:	d4d1      	bmi.n	5eca <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f26:	f002 f961 	bl	81ec <micros>
    5f2a:	1b00      	subs	r0, r0, r4
    5f2c:	42b8      	cmp	r0, r7
    5f2e:	d9f1      	bls.n	5f14 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    5f30:	4905      	ldr	r1, [pc, #20]	; (5f48 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5f32:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    5f34:	4b05      	ldr	r3, [pc, #20]	; (5f4c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5f36:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5f3a:	2000      	movs	r0, #0
  m_errorCode = code;
    5f3c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5f3e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5f40:	e7c3      	b.n	5eca <SdioCard::erase(unsigned long, unsigned long)+0x56>
    5f42:	bf00      	nop
    5f44:	2001fbe4 	.word	0x2001fbe4
    5f48:	20008ec6 	.word	0x20008ec6
    5f4c:	2001d1c0 	.word	0x2001d1c0
    5f50:	200225f8 	.word	0x200225f8
    5f54:	201a0000 	.word	0x201a0000
    5f58:	211a0000 	.word	0x211a0000
    5f5c:	261b0000 	.word	0x261b0000
    5f60:	2001fbf8 	.word	0x2001fbf8
    5f64:	0d1a0000 	.word	0x0d1a0000
    5f68:	000f4240 	.word	0x000f4240
    5f6c:	402c0000 	.word	0x402c0000

00005f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    5f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    5f74:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    5f78:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    5f7a:	bf18      	it	ne
    5f7c:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    5f7e:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    5f80:	9300      	str	r3, [sp, #0]
    5f82:	2b00      	cmp	r3, #0
    5f84:	bf08      	it	eq
    5f86:	f044 0401 	orreq.w	r4, r4, #1
    5f8a:	b15c      	cbz	r4, 5fa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    5f8c:	4940      	ldr	r1, [pc, #256]	; (6090 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    5f8e:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5f90:	4b40      	ldr	r3, [pc, #256]	; (6094 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    5f92:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    5f96:	2400      	movs	r4, #0
  m_errorCode = code;
    5f98:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5f9a:	601a      	str	r2, [r3, #0]
}
    5f9c:	4620      	mov	r0, r4
    5f9e:	b003      	add	sp, #12
    5fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    5fa4:	4b3c      	ldr	r3, [pc, #240]	; (6098 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    5fa6:	4615      	mov	r5, r2
    5fa8:	4a3c      	ldr	r2, [pc, #240]	; (609c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5faa:	460e      	mov	r6, r1
    5fac:	f8df 910c 	ldr.w	r9, [pc, #268]	; 60bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    5fb0:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    5fb2:	f002 f91b 	bl	81ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5fb6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 60c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    5fba:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5fbc:	f8df b104 	ldr.w	fp, [pc, #260]	; 60c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fc0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 60b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    5fc4:	e006      	b.n	5fd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5fc6:	f002 f911 	bl	81ec <micros>
    5fca:	1bc0      	subs	r0, r0, r7
    5fcc:	4550      	cmp	r0, sl
    5fce:	d844      	bhi.n	605a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    5fd0:	f004 f9e2 	bl	a398 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5fd4:	f8d9 1000 	ldr.w	r1, [r9]
    5fd8:	4640      	mov	r0, r8
    5fda:	f7ff fd17 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    5fde:	2800      	cmp	r0, #0
    5fe0:	d0f1      	beq.n	5fc6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    5fe2:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    5fe6:	05da      	lsls	r2, r3, #23
    5fe8:	d5ed      	bpl.n	5fc6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5fea:	9a00      	ldr	r2, [sp, #0]
    5fec:	4b2c      	ldr	r3, [pc, #176]	; (60a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    5fee:	492b      	ldr	r1, [pc, #172]	; (609c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5ff0:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    5ff4:	2200      	movs	r2, #0
  m_dmaBusy = true;
    5ff6:	4f2b      	ldr	r7, [pc, #172]	; (60a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    5ff8:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    5ffe:	2101      	movs	r1, #1
  m_irqstat = 0;
    6000:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 60c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    6004:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    6006:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    600a:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    600e:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6012:	4b25      	ldr	r3, [pc, #148]	; (60a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    6014:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    6018:	4b24      	ldr	r3, [pc, #144]	; (60ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    601a:	781b      	ldrb	r3, [r3, #0]
    601c:	b343      	cbz	r3, 6070 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    601e:	4631      	mov	r1, r6
    6020:	9801      	ldr	r0, [sp, #4]
    6022:	f7ff fcf3 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    6026:	4681      	mov	r9, r0
    6028:	2800      	cmp	r0, #0
    602a:	d0b7      	beq.n	5f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    602c:	4b20      	ldr	r3, [pc, #128]	; (60b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    602e:	4a1b      	ldr	r2, [pc, #108]	; (609c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6030:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    6032:	f002 f8db 	bl	81ec <micros>
  return m_dmaBusy;
    6036:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    6038:	4605      	mov	r5, r0
  while (fcn()) {
    603a:	b1db      	cbz	r3, 6074 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    603c:	4e1d      	ldr	r6, [pc, #116]	; (60b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    603e:	e003      	b.n	6048 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    6040:	f004 f9aa 	bl	a398 <yield>
  return m_dmaBusy;
    6044:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    6046:	b1ab      	cbz	r3, 6074 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6048:	f002 f8d0 	bl	81ec <micros>
    604c:	1b40      	subs	r0, r0, r5
    604e:	42b0      	cmp	r0, r6
    6050:	d9f6      	bls.n	6040 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    6052:	2300      	movs	r3, #0
    6054:	4a11      	ldr	r2, [pc, #68]	; (609c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6056:	6013      	str	r3, [r2, #0]
      return true;
    6058:	e7a0      	b.n	5f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    605a:	4b0d      	ldr	r3, [pc, #52]	; (6090 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    605c:	220a      	movs	r2, #10
      m_busyFcn = 0;
    605e:	2100      	movs	r1, #0
    6060:	480e      	ldr	r0, [pc, #56]	; (609c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    6062:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    6064:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    6068:	4b0a      	ldr	r3, [pc, #40]	; (6094 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    606a:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    606c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    606e:	e795      	b.n	5f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    6070:	0276      	lsls	r6, r6, #9
    6072:	e7d4      	b.n	601e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    6074:	2300      	movs	r3, #0
    6076:	4a09      	ldr	r2, [pc, #36]	; (609c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    6078:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    607a:	f8d8 3000 	ldr.w	r3, [r8]
    607e:	079b      	lsls	r3, r3, #30
    6080:	d58c      	bpl.n	5f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    6082:	f8d8 2000 	ldr.w	r2, [r8]
    6086:	4b0c      	ldr	r3, [pc, #48]	; (60b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    6088:	421a      	tst	r2, r3
    608a:	bf08      	it	eq
    608c:	464c      	moveq	r4, r9
    608e:	e785      	b.n	5f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    6090:	20008ec6 	.word	0x20008ec6
    6094:	2001d1c0 	.word	0x2001d1c0
    6098:	00005ba1 	.word	0x00005ba1
    609c:	2002009c 	.word	0x2002009c
    60a0:	1fff0000 	.word	0x1fff0000
    60a4:	200225fa 	.word	0x200225fa
    60a8:	117f0002 	.word	0x117f0002
    60ac:	200225f8 	.word	0x200225f8
    60b0:	000056f1 	.word	0x000056f1
    60b4:	000f4240 	.word	0x000f4240
    60b8:	117f0000 	.word	0x117f0000
    60bc:	2001fbf8 	.word	0x2001fbf8
    60c0:	0d1a0000 	.word	0x0d1a0000
    60c4:	402c0000 	.word	0x402c0000
    60c8:	200200a0 	.word	0x200200a0

000060cc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    60cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ce:	4606      	mov	r6, r0
    60d0:	7a00      	ldrb	r0, [r0, #8]
    60d2:	460c      	mov	r4, r1
    60d4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    60d6:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    60d8:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    60da:	d413      	bmi.n	6104 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    60dc:	b183      	cbz	r3, 6100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    60de:	440f      	add	r7, r1
    60e0:	e001      	b.n	60e6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    60e2:	42bc      	cmp	r4, r7
    60e4:	d00c      	beq.n	6100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    60e6:	6833      	ldr	r3, [r6, #0]
    60e8:	462a      	mov	r2, r5
    60ea:	4621      	mov	r1, r4
    60ec:	4630      	mov	r0, r6
    60ee:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    60f0:	3401      	adds	r4, #1
    60f2:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    60f6:	4798      	blx	r3
    60f8:	2800      	cmp	r0, #0
    60fa:	d1f2      	bne.n	60e2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    60fc:	2000      	movs	r0, #0
}
    60fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6100:	2001      	movs	r0, #1
}
    6102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    6104:	0790      	lsls	r0, r2, #30
    6106:	d012      	beq.n	612e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6108:	2b00      	cmp	r3, #0
    610a:	d0f9      	beq.n	6100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    610c:	440f      	add	r7, r1
    610e:	e001      	b.n	6114 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    6110:	42bc      	cmp	r4, r7
    6112:	d0f5      	beq.n	6100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    6114:	6833      	ldr	r3, [r6, #0]
    6116:	462a      	mov	r2, r5
    6118:	4621      	mov	r1, r4
    611a:	4630      	mov	r0, r6
    611c:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    611e:	3401      	adds	r4, #1
    6120:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    6124:	4798      	blx	r3
    6126:	2800      	cmp	r0, #0
    6128:	d1f2      	bne.n	6110 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    612a:	2000      	movs	r0, #0
    612c:	e7e7      	b.n	60fe <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    612e:	4806      	ldr	r0, [pc, #24]	; (6148 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    6130:	f7ff ff1e 	bl	5f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6134:	2800      	cmp	r0, #0
    6136:	d1e3      	bne.n	6100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    6138:	4904      	ldr	r1, [pc, #16]	; (614c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    613a:	240c      	movs	r4, #12
  m_errorLine = line;
    613c:	4b04      	ldr	r3, [pc, #16]	; (6150 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    613e:	f240 3282 	movw	r2, #898	; 0x382
  m_errorCode = code;
    6142:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6144:	601a      	str	r2, [r3, #0]
}
    6146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6148:	123a0037 	.word	0x123a0037
    614c:	20008ec6 	.word	0x20008ec6
    6150:	2001d1c0 	.word	0x2001d1c0

00006154 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6156:	4606      	mov	r6, r0
    6158:	7a00      	ldrb	r0, [r0, #8]
    615a:	460c      	mov	r4, r1
    615c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    615e:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6160:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    6162:	d413      	bmi.n	618c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6164:	b183      	cbz	r3, 6188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6166:	440f      	add	r7, r1
    6168:	e001      	b.n	616e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    616a:	42bc      	cmp	r4, r7
    616c:	d00c      	beq.n	6188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    616e:	6833      	ldr	r3, [r6, #0]
    6170:	462a      	mov	r2, r5
    6172:	4621      	mov	r1, r4
    6174:	4630      	mov	r0, r6
    6176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    6178:	3401      	adds	r4, #1
    617a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    617e:	4798      	blx	r3
    6180:	2800      	cmp	r0, #0
    6182:	d1f2      	bne.n	616a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    6184:	2000      	movs	r0, #0
}
    6186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    6188:	2001      	movs	r0, #1
}
    618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    618c:	0790      	lsls	r0, r2, #30
    618e:	d012      	beq.n	61b6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6190:	2b00      	cmp	r3, #0
    6192:	d0f9      	beq.n	6188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6194:	440f      	add	r7, r1
    6196:	e001      	b.n	619c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    6198:	42bc      	cmp	r4, r7
    619a:	d0f5      	beq.n	6188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    619c:	6833      	ldr	r3, [r6, #0]
    619e:	462a      	mov	r2, r5
    61a0:	4621      	mov	r1, r4
    61a2:	4630      	mov	r0, r6
    61a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    61a6:	3401      	adds	r4, #1
    61a8:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    61ac:	4798      	blx	r3
    61ae:	2800      	cmp	r0, #0
    61b0:	d1f2      	bne.n	6198 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    61b2:	2000      	movs	r0, #0
    61b4:	e7e7      	b.n	6186 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    61b6:	4806      	ldr	r0, [pc, #24]	; (61d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    61b8:	f7ff feda 	bl	5f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    61bc:	2800      	cmp	r0, #0
    61be:	d1e3      	bne.n	6188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    61c0:	4904      	ldr	r1, [pc, #16]	; (61d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    61c2:	240e      	movs	r4, #14
  m_errorLine = line;
    61c4:	4b04      	ldr	r3, [pc, #16]	; (61d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    61c6:	f240 421e 	movw	r2, #1054	; 0x41e
  m_errorCode = code;
    61ca:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    61cc:	601a      	str	r2, [r3, #0]
}
    61ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61d0:	193a0027 	.word	0x193a0027
    61d4:	20008ec6 	.word	0x20008ec6
    61d8:	2001d1c0 	.word	0x2001d1c0

000061dc <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    61dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    61e0:	4ba8      	ldr	r3, [pc, #672]	; (6484 <SdioCard::begin(SdioConfig)+0x2a8>)
  m_curState = IDLE_STATE;
    61e2:	2200      	movs	r2, #0
  m_initDone = false;
    61e4:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 64e4 <SdioCard::begin(SdioConfig)+0x308>
bool SdioCard::begin(SdioConfig sdioConfig) {
    61e8:	b091      	sub	sp, #68	; 0x44
  m_errorCode = SD_CARD_ERROR_NONE;
    61ea:	4da7      	ldr	r5, [pc, #668]	; (6488 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_highCapacity = false;
    61ec:	4fa7      	ldr	r7, [pc, #668]	; (648c <SdioCard::begin(SdioConfig)+0x2b0>)
  m_version2 = false;
    61ee:	4ea8      	ldr	r6, [pc, #672]	; (6490 <SdioCard::begin(SdioConfig)+0x2b4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    61f0:	702a      	strb	r2, [r5, #0]
  m_curState = IDLE_STATE;
    61f2:	7242      	strb	r2, [r0, #9]
  m_initDone = false;
    61f4:	f888 2000 	strb.w	r2, [r8]
  m_highCapacity = false;
    61f8:	703a      	strb	r2, [r7, #0]
  m_version2 = false;
    61fa:	7032      	strb	r2, [r6, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    61fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    6200:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6202:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    6208:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 64ac <SdioCard::begin(SdioConfig)+0x2d0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    620c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    6210:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6214:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    6218:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    621c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6220:	f042 0218 	orr.w	r2, r2, #24
    6224:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6228:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    622c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6230:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6234:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6238:	4a96      	ldr	r2, [pc, #600]	; (6494 <SdioCard::begin(SdioConfig)+0x2b8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    623a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    623e:	f040 000c 	orr.w	r0, r0, #12
    6242:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6246:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6248:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    624c:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    624e:	69d8      	ldr	r0, [r3, #28]
    6250:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    6254:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6256:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6258:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    625c:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    625e:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6262:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6266:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    626a:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    626e:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6272:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    6276:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    627a:	4b87      	ldr	r3, [pc, #540]	; (6498 <SdioCard::begin(SdioConfig)+0x2bc>)
  SDHC_MIX_CTRL |= 0x80000000;
    627c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    6280:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6284:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    6288:	4313      	orrs	r3, r2
    628a:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    628e:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
    6292:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    6296:	d1fa      	bne.n	628e <SdioCard::begin(SdioConfig)+0xb2>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    6298:	f44f 70c8 	mov.w	r0, #400	; 0x190
    629c:	f7ff fa2e 	bl	56fc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62a0:	4b7c      	ldr	r3, [pc, #496]	; (6494 <SdioCard::begin(SdioConfig)+0x2b8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    62a2:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    62a6:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62aa:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    62ae:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    62b2:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    62b6:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    62ba:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    62be:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    62c2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    62c6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    62ca:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    62ce:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    62d2:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    62d6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    62da:	4b70      	ldr	r3, [pc, #448]	; (649c <SdioCard::begin(SdioConfig)+0x2c0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    62dc:	4a70      	ldr	r2, [pc, #448]	; (64a0 <SdioCard::begin(SdioConfig)+0x2c4>)
    62de:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
    62e2:	4b70      	ldr	r3, [pc, #448]	; (64a4 <SdioCard::begin(SdioConfig)+0x2c8>)
    62e4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    62e8:	4b6f      	ldr	r3, [pc, #444]	; (64a8 <SdioCard::begin(SdioConfig)+0x2cc>)
    62ea:	2260      	movs	r2, #96	; 0x60
    62ec:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    62f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    62f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    62f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    62fc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    6300:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    6304:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6308:	4b68      	ldr	r3, [pc, #416]	; (64ac <SdioCard::begin(SdioConfig)+0x2d0>)
    630a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    630c:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    6310:	d1fb      	bne.n	630a <SdioCard::begin(SdioConfig)+0x12e>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    6312:	4608      	mov	r0, r1
    6314:	f7ff fb7a 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    6318:	4604      	mov	r4, r0
    631a:	b948      	cbnz	r0, 6330 <SdioCard::begin(SdioConfig)+0x154>
  m_errorCode = code;
    631c:	2101      	movs	r1, #1
  m_errorLine = line;
    631e:	4b64      	ldr	r3, [pc, #400]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    6320:	f240 228e 	movw	r2, #654	; 0x28e
  m_errorCode = code;
    6324:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6326:	601a      	str	r2, [r3, #0]
}
    6328:	4620      	mov	r0, r4
    632a:	b011      	add	sp, #68	; 0x44
    632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6330:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6332:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 64e8 <SdioCard::begin(SdioConfig)+0x30c>
    6336:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    633a:	4648      	mov	r0, r9
    633c:	f7ff fb66 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    6340:	2800      	cmp	r0, #0
    6342:	d144      	bne.n	63ce <SdioCard::begin(SdioConfig)+0x1f2>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6344:	3c01      	subs	r4, #1
    6346:	d1f6      	bne.n	6336 <SdioCard::begin(SdioConfig)+0x15a>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6348:	7832      	ldrb	r2, [r6, #0]
    634a:	4b5a      	ldr	r3, [pc, #360]	; (64b4 <SdioCard::begin(SdioConfig)+0x2d8>)
    634c:	2a00      	cmp	r2, #0
    634e:	bf14      	ite	ne
    6350:	469a      	movne	sl, r3
    6352:	f44f 1a40 	moveq.w	sl, #3145728	; 0x300000
  int m = micros();
    6356:	f001 ff49 	bl	81ec <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    635a:	4e57      	ldr	r6, [pc, #348]	; (64b8 <SdioCard::begin(SdioConfig)+0x2dc>)
  int m = micros();
    635c:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    635e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 64ec <SdioCard::begin(SdioConfig)+0x310>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6362:	f8df 918c 	ldr.w	r9, [pc, #396]	; 64f0 <SdioCard::begin(SdioConfig)+0x314>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6366:	2100      	movs	r1, #0
    6368:	4630      	mov	r0, r6
    636a:	f7ff fb4f 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    636e:	b950      	cbnz	r0, 6386 <SdioCard::begin(SdioConfig)+0x1aa>
      return sdError(SD_CARD_ERROR_ACMD41);
    6370:	2400      	movs	r4, #0
  m_errorCode = code;
    6372:	2117      	movs	r1, #23
  m_errorLine = line;
    6374:	4b4e      	ldr	r3, [pc, #312]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    6376:	f240 229f 	movw	r2, #671	; 0x29f
}
    637a:	4620      	mov	r0, r4
  m_errorCode = code;
    637c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    637e:	601a      	str	r2, [r3, #0]
}
    6380:	b011      	add	sp, #68	; 0x44
    6382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6386:	4651      	mov	r1, sl
    6388:	4658      	mov	r0, fp
    638a:	f7ff fb3f 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    638e:	2800      	cmp	r0, #0
    6390:	d0ee      	beq.n	6370 <SdioCard::begin(SdioConfig)+0x194>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6392:	f001 ff2b 	bl	81ec <micros>
    6396:	1b00      	subs	r0, r0, r4
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6398:	4b44      	ldr	r3, [pc, #272]	; (64ac <SdioCard::begin(SdioConfig)+0x2d0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    639a:	4548      	cmp	r0, r9
    639c:	d8e8      	bhi.n	6370 <SdioCard::begin(SdioConfig)+0x194>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    639e:	691a      	ldr	r2, [r3, #16]
    63a0:	2a00      	cmp	r2, #0
    63a2:	dae0      	bge.n	6366 <SdioCard::begin(SdioConfig)+0x18a>
  m_ocr = SDHC_CMDRSP0;
    63a4:	6919      	ldr	r1, [r3, #16]
    63a6:	4a45      	ldr	r2, [pc, #276]	; (64bc <SdioCard::begin(SdioConfig)+0x2e0>)
    63a8:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    63aa:	691b      	ldr	r3, [r3, #16]
    63ac:	005a      	lsls	r2, r3, #1
    63ae:	d501      	bpl.n	63b4 <SdioCard::begin(SdioConfig)+0x1d8>
    m_highCapacity = true;
    63b0:	2301      	movs	r3, #1
    63b2:	703b      	strb	r3, [r7, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    63b4:	2100      	movs	r1, #0
    63b6:	4842      	ldr	r0, [pc, #264]	; (64c0 <SdioCard::begin(SdioConfig)+0x2e4>)
    63b8:	f7ff fb28 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    63bc:	4604      	mov	r4, r0
    63be:	b9c0      	cbnz	r0, 63f2 <SdioCard::begin(SdioConfig)+0x216>
  m_errorCode = code;
    63c0:	2102      	movs	r1, #2
  m_errorLine = line;
    63c2:	4b3b      	ldr	r3, [pc, #236]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    63c4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    63c8:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    63ca:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    63cc:	e7ac      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
      if (SDHC_CMDRSP0 != 0X1AA) {
    63ce:	4b37      	ldr	r3, [pc, #220]	; (64ac <SdioCard::begin(SdioConfig)+0x2d0>)
    63d0:	691b      	ldr	r3, [r3, #16]
    63d2:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    63d6:	d007      	beq.n	63e8 <SdioCard::begin(SdioConfig)+0x20c>
  m_errorCode = code;
    63d8:	2106      	movs	r1, #6
  m_errorLine = line;
    63da:	4b35      	ldr	r3, [pc, #212]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    63dc:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    63e0:	2400      	movs	r4, #0
  m_errorCode = code;
    63e2:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    63e4:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    63e6:	e79f      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
      m_version2 = true;
    63e8:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    63ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 64b4 <SdioCard::begin(SdioConfig)+0x2d8>
      m_version2 = true;
    63ee:	7033      	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    63f0:	e7b1      	b.n	6356 <SdioCard::begin(SdioConfig)+0x17a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    63f2:	2100      	movs	r1, #0
    63f4:	4833      	ldr	r0, [pc, #204]	; (64c4 <SdioCard::begin(SdioConfig)+0x2e8>)
    63f6:	f7ff fb09 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    63fa:	4604      	mov	r4, r0
    63fc:	b930      	cbnz	r0, 640c <SdioCard::begin(SdioConfig)+0x230>
  m_errorCode = code;
    63fe:	2103      	movs	r1, #3
  m_errorLine = line;
    6400:	4b2b      	ldr	r3, [pc, #172]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    6402:	f240 22ab 	movw	r2, #683	; 0x2ab
  m_errorCode = code;
    6406:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6408:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    640a:	e78d      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    640c:	4e27      	ldr	r6, [pc, #156]	; (64ac <SdioCard::begin(SdioConfig)+0x2d0>)
    640e:	4b2e      	ldr	r3, [pc, #184]	; (64c8 <SdioCard::begin(SdioConfig)+0x2ec>)
    6410:	6932      	ldr	r2, [r6, #16]
    6412:	4f2e      	ldr	r7, [pc, #184]	; (64cc <SdioCard::begin(SdioConfig)+0x2f0>)
    6414:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6416:	492e      	ldr	r1, [pc, #184]	; (64d0 <SdioCard::begin(SdioConfig)+0x2f4>)
    6418:	482e      	ldr	r0, [pc, #184]	; (64d4 <SdioCard::begin(SdioConfig)+0x2f8>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    641a:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    641c:	f7ff fb42 	bl	5aa4 <readReg16(unsigned long, void*)>
    6420:	4604      	mov	r4, r0
    6422:	b930      	cbnz	r0, 6432 <SdioCard::begin(SdioConfig)+0x256>
  m_errorCode = code;
    6424:	2107      	movs	r1, #7
  m_errorLine = line;
    6426:	4b22      	ldr	r3, [pc, #136]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    6428:	f44f 722c 	mov.w	r2, #688	; 0x2b0
  m_errorCode = code;
    642c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    642e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    6430:	e77a      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    6432:	4929      	ldr	r1, [pc, #164]	; (64d8 <SdioCard::begin(SdioConfig)+0x2fc>)
    6434:	4829      	ldr	r0, [pc, #164]	; (64dc <SdioCard::begin(SdioConfig)+0x300>)
    6436:	f7ff fb35 	bl	5aa4 <readReg16(unsigned long, void*)>
    643a:	4604      	mov	r4, r0
    643c:	b930      	cbnz	r0, 644c <SdioCard::begin(SdioConfig)+0x270>
  m_errorCode = code;
    643e:	2108      	movs	r1, #8
  m_errorLine = line;
    6440:	4b1b      	ldr	r3, [pc, #108]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    6442:	f240 22b3 	movw	r2, #691	; 0x2b3
  m_errorCode = code;
    6446:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6448:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    644a:	e76d      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    644c:	6839      	ldr	r1, [r7, #0]
    644e:	4824      	ldr	r0, [pc, #144]	; (64e0 <SdioCard::begin(SdioConfig)+0x304>)
    6450:	f7ff fadc 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    6454:	4604      	mov	r4, r0
    6456:	b930      	cbnz	r0, 6466 <SdioCard::begin(SdioConfig)+0x28a>
  m_errorCode = code;
    6458:	2105      	movs	r1, #5
  m_errorLine = line;
    645a:	4b15      	ldr	r3, [pc, #84]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    645c:	f240 22b6 	movw	r2, #694	; 0x2b6
  m_errorCode = code;
    6460:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6462:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    6464:	e760      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6466:	6839      	ldr	r1, [r7, #0]
    6468:	4813      	ldr	r0, [pc, #76]	; (64b8 <SdioCard::begin(SdioConfig)+0x2dc>)
    646a:	f7ff facf 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    646e:	2800      	cmp	r0, #0
    6470:	d140      	bne.n	64f4 <SdioCard::begin(SdioConfig)+0x318>
  m_errorCode = code;
    6472:	2114      	movs	r1, #20
  m_errorLine = line;
    6474:	4b0e      	ldr	r3, [pc, #56]	; (64b0 <SdioCard::begin(SdioConfig)+0x2d4>)
    6476:	f240 22ba 	movw	r2, #698	; 0x2ba
    return sdError(SD_CARD_ERROR_ACMD6);
    647a:	2400      	movs	r4, #0
  m_errorCode = code;
    647c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    647e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    6480:	e752      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
    6482:	bf00      	nop
    6484:	400d8000 	.word	0x400d8000
    6488:	20008ec6 	.word	0x20008ec6
    648c:	200225f8 	.word	0x200225f8
    6490:	200225f7 	.word	0x200225f7
    6494:	401f8000 	.word	0x401f8000
    6498:	01008000 	.word	0x01008000
    649c:	117f000b 	.word	0x117f000b
    64a0:	000056ad 	.word	0x000056ad
    64a4:	20009000 	.word	0x20009000
    64a8:	e000e400 	.word	0xe000e400
    64ac:	402c0000 	.word	0x402c0000
    64b0:	2001d1c0 	.word	0x2001d1c0
    64b4:	40300000 	.word	0x40300000
    64b8:	371a0000 	.word	0x371a0000
    64bc:	2001fbf4 	.word	0x2001fbf4
    64c0:	02090000 	.word	0x02090000
    64c4:	031a0000 	.word	0x031a0000
    64c8:	ffff0000 	.word	0xffff0000
    64cc:	2001fbf8 	.word	0x2001fbf8
    64d0:	2001fbe4 	.word	0x2001fbe4
    64d4:	09090000 	.word	0x09090000
    64d8:	2001fbd4 	.word	0x2001fbd4
    64dc:	0a090000 	.word	0x0a090000
    64e0:	071b0000 	.word	0x071b0000
    64e4:	200225f6 	.word	0x200225f6
    64e8:	081a0000 	.word	0x081a0000
    64ec:	29020000 	.word	0x29020000
    64f0:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    64f4:	2102      	movs	r1, #2
    64f6:	482e      	ldr	r0, [pc, #184]	; (65b0 <SdioCard::begin(SdioConfig)+0x3d4>)
    64f8:	f7ff fa88 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    64fc:	4604      	mov	r4, r0
    64fe:	2800      	cmp	r0, #0
    6500:	d0b7      	beq.n	6472 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6502:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6504:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6508:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    650c:	4669      	mov	r1, sp
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    650e:	f023 0306 	bic.w	r3, r3, #6
    6512:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6514:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    6516:	f043 0302 	orr.w	r3, r3, #2
    651a:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    651c:	6472      	str	r2, [r6, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    651e:	f7ff fc1b 	bl	5d58 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6522:	b118      	cbz	r0, 652c <SdioCard::begin(SdioConfig)+0x350>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    6524:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6528:	079b      	lsls	r3, r3, #30
    652a:	d432      	bmi.n	6592 <SdioCard::begin(SdioConfig)+0x3b6>
    kHzSdClk = 25000;
    652c:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6530:	4d20      	ldr	r5, [pc, #128]	; (65b4 <SdioCard::begin(SdioConfig)+0x3d8>)
    6532:	2305      	movs	r3, #5
    6534:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6538:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    653c:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6540:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6544:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6548:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    654c:	f7ff f8d6 	bl	56fc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6550:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6552:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6556:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    655a:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    655e:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6562:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6566:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    656a:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    656e:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6572:	f8c5 23bc 	str.w	r2, [r5, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    6576:	f8c5 23c0 	str.w	r2, [r5, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    657a:	f8c5 23ac 	str.w	r2, [r5, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    657e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
  m_initDone = true;
    6582:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6584:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    6588:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
  m_initDone = true;
    658c:	f888 3000 	strb.w	r3, [r8]
  return true;
    6590:	e6ca      	b.n	6328 <SdioCard::begin(SdioConfig)+0x14c>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6592:	4669      	mov	r1, sp
    6594:	4808      	ldr	r0, [pc, #32]	; (65b8 <SdioCard::begin(SdioConfig)+0x3dc>)
    6596:	f7ff fbdf 	bl	5d58 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    659a:	2800      	cmp	r0, #0
    659c:	d0c6      	beq.n	652c <SdioCard::begin(SdioConfig)+0x350>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    659e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    65a2:	f003 030f 	and.w	r3, r3, #15
    65a6:	2b01      	cmp	r3, #1
    65a8:	d1c0      	bne.n	652c <SdioCard::begin(SdioConfig)+0x350>
    kHzSdClk = 50000;
    65aa:	f24c 3050 	movw	r0, #50000	; 0xc350
    65ae:	e7bf      	b.n	6530 <SdioCard::begin(SdioConfig)+0x354>
    65b0:	061a0000 	.word	0x061a0000
    65b4:	401f8000 	.word	0x401f8000
    65b8:	80fffff1 	.word	0x80fffff1

000065bc <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    65bc:	4b37      	ldr	r3, [pc, #220]	; (669c <SdioCard::readData(unsigned char*)+0xe0>)
    65be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    65c0:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    65c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65c6:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    65c8:	d40d      	bmi.n	65e6 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    65ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    65cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    65d0:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    65d2:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    65d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    65d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    65da:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    65dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    65de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    65e2:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    65e4:	b662      	cpsie	i
  uint32_t m = micros();
    65e6:	f001 fe01 	bl	81ec <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    65ea:	4e2c      	ldr	r6, [pc, #176]	; (669c <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    65ec:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 66b4 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    65f0:	4605      	mov	r5, r0
  while (fcn()) {
    65f2:	e004      	b.n	65fe <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    65f4:	f001 fdfa 	bl	81ec <micros>
    65f8:	1b43      	subs	r3, r0, r5
    65fa:	4543      	cmp	r3, r8
    65fc:	d837      	bhi.n	666e <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    65fe:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    6600:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    6604:	d0f6      	beq.n	65f4 <SdioCard::readData(unsigned char*)+0x38>
    6606:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    660a:	4824      	ldr	r0, [pc, #144]	; (669c <SdioCard::readData(unsigned char*)+0xe0>)
    660c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    6610:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6612:	051b      	lsls	r3, r3, #20
    6614:	d5fc      	bpl.n	6610 <SdioCard::readData(unsigned char*)+0x54>
    6616:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    661a:	6a02      	ldr	r2, [r0, #32]
    661c:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6620:	459c      	cmp	ip, r3
    6622:	d1fa      	bne.n	661a <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    6624:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    6628:	4567      	cmp	r7, ip
    662a:	d1f1      	bne.n	6610 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    662c:	f001 fdde 	bl	81ec <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6630:	4f1a      	ldr	r7, [pc, #104]	; (669c <SdioCard::readData(unsigned char*)+0xe0>)
    6632:	4d1b      	ldr	r5, [pc, #108]	; (66a0 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    6634:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6636:	f8df 807c 	ldr.w	r8, [pc, #124]	; 66b4 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    663a:	e004      	b.n	6646 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    663c:	f001 fdd6 	bl	81ec <micros>
    6640:	1b83      	subs	r3, r0, r6
    6642:	4543      	cmp	r3, r8
    6644:	d81d      	bhi.n	6682 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6646:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    6648:	402c      	ands	r4, r5
    664a:	d0f7      	beq.n	663c <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    664e:	4a15      	ldr	r2, [pc, #84]	; (66a4 <SdioCard::readData(unsigned char*)+0xe8>)
    6650:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    6652:	6813      	ldr	r3, [r2, #0]
    6654:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6656:	6813      	ldr	r3, [r2, #0]
    6658:	f013 0302 	ands.w	r3, r3, #2
    665c:	d01b      	beq.n	6696 <SdioCard::readData(unsigned char*)+0xda>
    665e:	6812      	ldr	r2, [r2, #0]
    6660:	4b11      	ldr	r3, [pc, #68]	; (66a8 <SdioCard::readData(unsigned char*)+0xec>)
    6662:	421a      	tst	r2, r3
    6664:	bf0c      	ite	eq
    6666:	2001      	moveq	r0, #1
    6668:	2000      	movne	r0, #0
}
    666a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    666e:	490f      	ldr	r1, [pc, #60]	; (66ac <SdioCard::readData(unsigned char*)+0xf0>)
    6670:	251a      	movs	r5, #26
  m_errorLine = line;
    6672:	4b0f      	ldr	r3, [pc, #60]	; (66b0 <SdioCard::readData(unsigned char*)+0xf4>)
    6674:	f240 3237 	movw	r2, #823	; 0x337
    return sdError(SD_CARD_ERROR_READ_FIFO);
    6678:	4620      	mov	r0, r4
  m_errorCode = code;
    667a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    667c:	601a      	str	r2, [r3, #0]
}
    667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6682:	490a      	ldr	r1, [pc, #40]	; (66ac <SdioCard::readData(unsigned char*)+0xf0>)
    6684:	251d      	movs	r5, #29
  m_errorLine = line;
    6686:	4b0a      	ldr	r3, [pc, #40]	; (66b0 <SdioCard::readData(unsigned char*)+0xf4>)
    6688:	f240 3242 	movw	r2, #834	; 0x342
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    668c:	4620      	mov	r0, r4
  m_errorCode = code;
    668e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6690:	601a      	str	r2, [r3, #0]
}
    6692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6696:	4618      	mov	r0, r3
}
    6698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    669c:	402c0000 	.word	0x402c0000
    66a0:	117f0002 	.word	0x117f0002
    66a4:	200200a0 	.word	0x200200a0
    66a8:	117f0000 	.word	0x117f0000
    66ac:	20008ec6 	.word	0x20008ec6
    66b0:	2001d1c0 	.word	0x2001d1c0
    66b4:	000f4240 	.word	0x000f4240

000066b8 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    66b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    66bc:	4b29      	ldr	r3, [pc, #164]	; (6764 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    66be:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    66c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6784 <SdioCard::readStart(unsigned long)+0xcc>
    66c4:	4e28      	ldr	r6, [pc, #160]	; (6768 <SdioCard::readStart(unsigned long)+0xb0>)
    66c6:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    66ca:	f001 fd8f 	bl	81ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    66ce:	4d27      	ldr	r5, [pc, #156]	; (676c <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    66d0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    66d2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6788 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    66d6:	4f26      	ldr	r7, [pc, #152]	; (6770 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    66d8:	e006      	b.n	66e8 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    66da:	f001 fd87 	bl	81ec <micros>
    66de:	1b00      	subs	r0, r0, r4
    66e0:	42b8      	cmp	r0, r7
    66e2:	d829      	bhi.n	6738 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    66e4:	f003 fe58 	bl	a398 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    66e8:	6831      	ldr	r1, [r6, #0]
    66ea:	4628      	mov	r0, r5
    66ec:	f7ff f98e 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    66f0:	2800      	cmp	r0, #0
    66f2:	d0f2      	beq.n	66da <SdioCard::readStart(unsigned long)+0x22>
    66f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    66f8:	05db      	lsls	r3, r3, #23
    66fa:	d5ee      	bpl.n	66da <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    66fc:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    66fe:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    6702:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6706:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    670a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    670e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6712:	4b18      	ldr	r3, [pc, #96]	; (6774 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6714:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6718:	781b      	ldrb	r3, [r3, #0]
    671a:	b1cb      	cbz	r3, 6750 <SdioCard::readStart(unsigned long)+0x98>
    671c:	4649      	mov	r1, r9
    671e:	4816      	ldr	r0, [pc, #88]	; (6778 <SdioCard::readStart(unsigned long)+0xc0>)
    6720:	f7ff f974 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    6724:	b930      	cbnz	r0, 6734 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    6726:	4915      	ldr	r1, [pc, #84]	; (677c <SdioCard::readStart(unsigned long)+0xc4>)
    6728:	240c      	movs	r4, #12
  m_errorLine = line;
    672a:	4b15      	ldr	r3, [pc, #84]	; (6780 <SdioCard::readStart(unsigned long)+0xc8>)
    672c:	f240 329e 	movw	r2, #926	; 0x39e
  m_errorCode = code;
    6730:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6732:	601a      	str	r2, [r3, #0]
}
    6734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    6738:	4a10      	ldr	r2, [pc, #64]	; (677c <SdioCard::readStart(unsigned long)+0xc4>)
    673a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    673c:	2000      	movs	r0, #0
  m_errorLine = line;
    673e:	4b10      	ldr	r3, [pc, #64]	; (6780 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    6740:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    6742:	f240 3292 	movw	r2, #914	; 0x392
      m_busyFcn = 0;
    6746:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    674a:	601a      	str	r2, [r3, #0]
}
    674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6750:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6754:	4808      	ldr	r0, [pc, #32]	; (6778 <SdioCard::readStart(unsigned long)+0xc0>)
    6756:	4649      	mov	r1, r9
    6758:	f7ff f958 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    675c:	2800      	cmp	r0, #0
    675e:	d1e9      	bne.n	6734 <SdioCard::readStart(unsigned long)+0x7c>
    6760:	e7e1      	b.n	6726 <SdioCard::readStart(unsigned long)+0x6e>
    6762:	bf00      	nop
    6764:	00005ba1 	.word	0x00005ba1
    6768:	2001fbf8 	.word	0x2001fbf8
    676c:	0d1a0000 	.word	0x0d1a0000
    6770:	000f4240 	.word	0x000f4240
    6774:	200225f8 	.word	0x200225f8
    6778:	123a0030 	.word	0x123a0030
    677c:	20008ec6 	.word	0x20008ec6
    6780:	2001d1c0 	.word	0x2001d1c0
    6784:	2002009c 	.word	0x2002009c
    6788:	402c0000 	.word	0x402c0000

0000678c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6790:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6792:	4c1d      	ldr	r4, [pc, #116]	; (6808 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6794:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    6796:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6798:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    679a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    679c:	481b      	ldr	r0, [pc, #108]	; (680c <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    679e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    67a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    67a4:	f7ff f932 	bl	5a0c <cardCommand(unsigned long, unsigned long)>
    67a8:	b940      	cbnz	r0, 67bc <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    67aa:	4919      	ldr	r1, [pc, #100]	; (6810 <SdioCard::stopTransmission(bool)+0x84>)
    67ac:	2409      	movs	r4, #9
  m_errorLine = line;
    67ae:	4b19      	ldr	r3, [pc, #100]	; (6814 <SdioCard::stopTransmission(bool)+0x88>)
    67b0:	f44f 726d 	mov.w	r2, #948	; 0x3b4
  m_errorCode = code;
    67b4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    67b6:	601a      	str	r2, [r3, #0]
}
    67b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    67bc:	2d00      	cmp	r5, #0
    67be:	d0fb      	beq.n	67b8 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    67c0:	4b15      	ldr	r3, [pc, #84]	; (6818 <SdioCard::stopTransmission(bool)+0x8c>)
    67c2:	4e16      	ldr	r6, [pc, #88]	; (681c <SdioCard::stopTransmission(bool)+0x90>)
    67c4:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    67c6:	f001 fd11 	bl	81ec <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    67ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    67cc:	4607      	mov	r7, r0
  while (fcn()) {
    67ce:	01da      	lsls	r2, r3, #7
    67d0:	d416      	bmi.n	6800 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6820 <SdioCard::stopTransmission(bool)+0x94>
    67d6:	e004      	b.n	67e2 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    67d8:	f003 fdde 	bl	a398 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    67dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    67de:	01db      	lsls	r3, r3, #7
    67e0:	d40e      	bmi.n	6800 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    67e2:	f001 fd03 	bl	81ec <micros>
    67e6:	1bc0      	subs	r0, r0, r7
    67e8:	4540      	cmp	r0, r8
    67ea:	d9f5      	bls.n	67d8 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    67ec:	4a08      	ldr	r2, [pc, #32]	; (6810 <SdioCard::stopTransmission(bool)+0x84>)
    67ee:	210a      	movs	r1, #10
      m_busyFcn = 0;
    67f0:	2000      	movs	r0, #0
  m_errorLine = line;
    67f2:	4b08      	ldr	r3, [pc, #32]	; (6814 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    67f4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    67f6:	f44f 726e 	mov.w	r2, #952	; 0x3b8
      m_busyFcn = 0;
    67fa:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    67fc:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    67fe:	e7db      	b.n	67b8 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    6800:	2300      	movs	r3, #0
  return true;
    6802:	4628      	mov	r0, r5
  m_busyFcn = 0;
    6804:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    6806:	e7d7      	b.n	67b8 <SdioCard::stopTransmission(bool)+0x2c>
    6808:	402c0000 	.word	0x402c0000
    680c:	0cdb0000 	.word	0x0cdb0000
    6810:	20008ec6 	.word	0x20008ec6
    6814:	2001d1c0 	.word	0x2001d1c0
    6818:	000056dd 	.word	0x000056dd
    681c:	2002009c 	.word	0x2002009c
    6820:	000f4240 	.word	0x000f4240

00006824 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    6824:	4b0a      	ldr	r3, [pc, #40]	; (6850 <SdioCard::syncDevice()+0x2c>)
    6826:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    6828:	b510      	push	{r4, lr}
    682a:	4604      	mov	r4, r0
  if (!m_transferActive) {
    682c:	b91b      	cbnz	r3, 6836 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    682e:	7a63      	ldrb	r3, [r4, #9]
    6830:	b943      	cbnz	r3, 6844 <SdioCard::syncDevice()+0x20>
  return true;
    6832:	2001      	movs	r0, #1
}
    6834:	bd10      	pop	{r4, pc}
    6836:	f7ff f84b 	bl	58d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    683a:	2800      	cmp	r0, #0
    683c:	d0fa      	beq.n	6834 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    683e:	7a63      	ldrb	r3, [r4, #9]
    6840:	2b00      	cmp	r3, #0
    6842:	d0f6      	beq.n	6832 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    6844:	4620      	mov	r0, r4
    6846:	2101      	movs	r1, #1
}
    6848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    684c:	f7ff bf9e 	b.w	678c <SdioCard::stopTransmission(bool)>
    6850:	200225f9 	.word	0x200225f9

00006854 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6858:	4604      	mov	r4, r0
    685a:	7a00      	ldrb	r0, [r0, #8]
    685c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6860:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6862:	f010 0501 	ands.w	r5, r0, #1
    6866:	d013      	beq.n	6890 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6868:	0793      	lsls	r3, r2, #30
    686a:	d03c      	beq.n	68e6 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    686c:	2301      	movs	r3, #1
    686e:	4838      	ldr	r0, [pc, #224]	; (6950 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6870:	466a      	mov	r2, sp
    6872:	f7ff fb7d 	bl	5f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6876:	2800      	cmp	r0, #0
    6878:	d03a      	beq.n	68f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    687a:	f44f 7200 	mov.w	r2, #512	; 0x200
    687e:	4669      	mov	r1, sp
    6880:	4630      	mov	r0, r6
    6882:	f001 fd47 	bl	8314 <memcpy>
}
    6886:	4628      	mov	r0, r5
    6888:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6890:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6960 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6894:	460f      	mov	r7, r1
    6896:	f898 3000 	ldrb.w	r3, [r8]
    689a:	2b00      	cmp	r3, #0
    689c:	d135      	bne.n	690a <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    689e:	7a63      	ldrb	r3, [r4, #9]
    68a0:	2b01      	cmp	r3, #1
    68a2:	d039      	beq.n	6918 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    68a4:	6822      	ldr	r2, [r4, #0]
    68a6:	492b      	ldr	r1, [pc, #172]	; (6954 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    68a8:	6a12      	ldr	r2, [r2, #32]
    68aa:	428a      	cmp	r2, r1
    68ac:	d14a      	bne.n	6944 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    68ae:	f898 2000 	ldrb.w	r2, [r8]
    68b2:	2a00      	cmp	r2, #0
    68b4:	d134      	bne.n	6920 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    68b6:	2b00      	cmp	r3, #0
    68b8:	d139      	bne.n	692e <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    68ba:	4639      	mov	r1, r7
    68bc:	4620      	mov	r0, r4
    68be:	f7ff fefb 	bl	66b8 <SdioCard::readStart(unsigned long)>
    68c2:	b1e8      	cbz	r0, 6900 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    68c4:	2301      	movs	r3, #1
      m_curSector = sector;
    68c6:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    68c8:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    68ca:	4631      	mov	r1, r6
    68cc:	4620      	mov	r0, r4
    68ce:	f7ff fe75 	bl	65bc <SdioCard::readData(unsigned char*)>
    68d2:	b1a8      	cbz	r0, 6900 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    68d4:	6863      	ldr	r3, [r4, #4]
  return true;
    68d6:	4605      	mov	r5, r0
    m_curSector++;
    68d8:	3301      	adds	r3, #1
}
    68da:	4628      	mov	r0, r5
    m_curSector++;
    68dc:	6063      	str	r3, [r4, #4]
}
    68de:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    68e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    68e6:	2301      	movs	r3, #1
    68e8:	4819      	ldr	r0, [pc, #100]	; (6950 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    68ea:	f7ff fb41 	bl	5f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    68ee:	b938      	cbnz	r0, 6900 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    68f0:	4919      	ldr	r1, [pc, #100]	; (6958 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    68f2:	200b      	movs	r0, #11
  m_errorLine = line;
    68f4:	4b19      	ldr	r3, [pc, #100]	; (695c <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    68f6:	f240 3255 	movw	r2, #853	; 0x355
      return sdError(SD_CARD_ERROR_CMD17);
    68fa:	2500      	movs	r5, #0
  m_errorCode = code;
    68fc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    68fe:	601a      	str	r2, [r3, #0]
}
    6900:	4628      	mov	r0, r5
    6902:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    690a:	f7fe ffe1 	bl	58d0 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    690e:	2800      	cmp	r0, #0
    6910:	d0f6      	beq.n	6900 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6912:	7a63      	ldrb	r3, [r4, #9]
    6914:	2b01      	cmp	r3, #1
    6916:	d1c5      	bne.n	68a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    6918:	6862      	ldr	r2, [r4, #4]
    691a:	42ba      	cmp	r2, r7
    691c:	d1c2      	bne.n	68a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    691e:	e7d4      	b.n	68ca <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    6920:	f7fe ffd6 	bl	58d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6924:	2800      	cmp	r0, #0
    6926:	d0eb      	beq.n	6900 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    6928:	7a63      	ldrb	r3, [r4, #9]
    692a:	2b00      	cmp	r3, #0
    692c:	d0c5      	beq.n	68ba <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    692e:	2101      	movs	r1, #1
    6930:	4620      	mov	r0, r4
    6932:	f7ff ff2b 	bl	678c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6936:	2800      	cmp	r0, #0
    6938:	d1bf      	bne.n	68ba <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    693a:	4628      	mov	r0, r5
    693c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    6944:	4620      	mov	r0, r4
    6946:	4790      	blx	r2
    6948:	2800      	cmp	r0, #0
    694a:	d0f6      	beq.n	693a <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    694c:	e7b5      	b.n	68ba <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    694e:	bf00      	nop
    6950:	113a0011 	.word	0x113a0011
    6954:	00006825 	.word	0x00006825
    6958:	20008ec6 	.word	0x20008ec6
    695c:	2001d1c0 	.word	0x2001d1c0
    6960:	200225f9 	.word	0x200225f9

00006964 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6968:	7a04      	ldrb	r4, [r0, #8]
    696a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    696e:	460f      	mov	r7, r1
    6970:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6972:	f014 0401 	ands.w	r4, r4, #1
    6976:	d01d      	beq.n	69b4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    6978:	f012 0f03 	tst.w	r2, #3
    697c:	d006      	beq.n	698c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    697e:	4668      	mov	r0, sp
    6980:	4611      	mov	r1, r2
    6982:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    6986:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    6988:	f001 fcc4 	bl	8314 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    698c:	2301      	movs	r3, #1
    698e:	4642      	mov	r2, r8
    6990:	4639      	mov	r1, r7
    6992:	482c      	ldr	r0, [pc, #176]	; (6a44 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6994:	f7ff faec 	bl	5f70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6998:	4604      	mov	r4, r0
    699a:	b930      	cbnz	r0, 69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    699c:	492a      	ldr	r1, [pc, #168]	; (6a48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    699e:	200d      	movs	r0, #13
  m_errorLine = line;
    69a0:	4b2a      	ldr	r3, [pc, #168]	; (6a4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    69a2:	f240 32f2 	movw	r2, #1010	; 0x3f2
  m_errorCode = code;
    69a6:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    69a8:	601a      	str	r2, [r3, #0]
}
    69aa:	4620      	mov	r0, r4
    69ac:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    69b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    69b4:	4d26      	ldr	r5, [pc, #152]	; (6a50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    69b6:	4606      	mov	r6, r0
    69b8:	782b      	ldrb	r3, [r5, #0]
    69ba:	bb2b      	cbnz	r3, 6a08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    69bc:	7a73      	ldrb	r3, [r6, #9]
    69be:	2b02      	cmp	r3, #2
    69c0:	d029      	beq.n	6a16 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    69c2:	6832      	ldr	r2, [r6, #0]
    69c4:	4923      	ldr	r1, [pc, #140]	; (6a54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    69c6:	6a12      	ldr	r2, [r2, #32]
    69c8:	428a      	cmp	r2, r1
    69ca:	d136      	bne.n	6a3a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    69cc:	782a      	ldrb	r2, [r5, #0]
    69ce:	bb32      	cbnz	r2, 6a1e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    69d0:	2b00      	cmp	r3, #0
    69d2:	d12b      	bne.n	6a2c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    69d4:	6833      	ldr	r3, [r6, #0]
    69d6:	4639      	mov	r1, r7
    69d8:	4630      	mov	r0, r6
    69da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    69dc:	4798      	blx	r3
    69de:	2800      	cmp	r0, #0
    69e0:	d0e3      	beq.n	69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    69e2:	2302      	movs	r3, #2
      m_curSector = sector;
    69e4:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    69e6:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    69e8:	6833      	ldr	r3, [r6, #0]
    69ea:	4641      	mov	r1, r8
    69ec:	4630      	mov	r0, r6
    69ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    69f0:	4798      	blx	r3
    69f2:	2800      	cmp	r0, #0
    69f4:	d0d9      	beq.n	69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    69f6:	6873      	ldr	r3, [r6, #4]
  return true;
    69f8:	4604      	mov	r4, r0
    m_curSector++;
    69fa:	3301      	adds	r3, #1
}
    69fc:	4620      	mov	r0, r4
    m_curSector++;
    69fe:	6073      	str	r3, [r6, #4]
}
    6a00:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a08:	f7fe ff62 	bl	58d0 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    6a0c:	2800      	cmp	r0, #0
    6a0e:	d0cc      	beq.n	69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a10:	7a73      	ldrb	r3, [r6, #9]
    6a12:	2b02      	cmp	r3, #2
    6a14:	d1d5      	bne.n	69c2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6a16:	6872      	ldr	r2, [r6, #4]
    6a18:	42ba      	cmp	r2, r7
    6a1a:	d1d2      	bne.n	69c2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    6a1c:	e7e4      	b.n	69e8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    6a1e:	f7fe ff57 	bl	58d0 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    6a22:	2800      	cmp	r0, #0
    6a24:	d0c1      	beq.n	69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    6a26:	7a73      	ldrb	r3, [r6, #9]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d0d3      	beq.n	69d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    6a2c:	2101      	movs	r1, #1
    6a2e:	4630      	mov	r0, r6
    6a30:	f7ff feac 	bl	678c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    6a34:	2800      	cmp	r0, #0
    6a36:	d0b8      	beq.n	69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6a38:	e7cc      	b.n	69d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6a3a:	4630      	mov	r0, r6
    6a3c:	4790      	blx	r2
    6a3e:	2800      	cmp	r0, #0
    6a40:	d0b3      	beq.n	69aa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    6a42:	e7c7      	b.n	69d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    6a44:	183a0001 	.word	0x183a0001
    6a48:	20008ec6 	.word	0x20008ec6
    6a4c:	2001d1c0 	.word	0x2001d1c0
    6a50:	200225f9 	.word	0x200225f9
    6a54:	00006825 	.word	0x00006825

00006a58 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    6a58:	f001 bbf2 	b.w	8240 <digitalWrite>

00006a5c <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    6a5c:	b430      	push	{r4, r5}
    6a5e:	b082      	sub	sp, #8
    6a60:	460c      	mov	r4, r1
    6a62:	ab02      	add	r3, sp, #8
    6a64:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6a68:	7cc3      	ldrb	r3, [r0, #19]
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d030      	beq.n	6ad0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6a6e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6a70:	7cc3      	ldrb	r3, [r0, #19]
    6a72:	07da      	lsls	r2, r3, #31
    6a74:	d508      	bpl.n	6a88 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6a76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6a7a:	6945      	ldr	r5, [r0, #20]
    6a7c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6a80:	402a      	ands	r2, r5
    6a82:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6a84:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    6a88:	079d      	lsls	r5, r3, #30
    6a8a:	d508      	bpl.n	6a9e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6a8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6a90:	6985      	ldr	r5, [r0, #24]
    6a92:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6a96:	402a      	ands	r2, r5
    6a98:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6a9a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    6a9e:	0759      	lsls	r1, r3, #29
    6aa0:	d508      	bpl.n	6ab4 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6aa2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6aa6:	69c5      	ldr	r5, [r0, #28]
    6aa8:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6aac:	402a      	ands	r2, r5
    6aae:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6ab0:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    6ab4:	071a      	lsls	r2, r3, #28
    6ab6:	d508      	bpl.n	6aca <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6ab8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6abc:	6a05      	ldr	r5, [r0, #32]
    6abe:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6ac2:	402a      	ands	r2, r5
    6ac4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6ac6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    6aca:	06db      	lsls	r3, r3, #27
    6acc:	d42f      	bmi.n	6b2e <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    6ace:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    6ad0:	6883      	ldr	r3, [r0, #8]
    6ad2:	429c      	cmp	r4, r3
    6ad4:	d035      	beq.n	6b42 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    6ad6:	4b22      	ldr	r3, [pc, #136]	; (6b60 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6ad8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6ada:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6adc:	4a21      	ldr	r2, [pc, #132]	; (6b64 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6ade:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6ae2:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6ae6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6aea:	3301      	adds	r3, #1
    6aec:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6af0:	b1cc      	cbz	r4, 6b26 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    6af2:	4294      	cmp	r4, r2
    6af4:	d827      	bhi.n	6b46 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6af6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6afa:	fbb2 f2f3 	udiv	r2, r2, r3
    6afe:	4294      	cmp	r4, r2
    6b00:	d32c      	bcc.n	6b5c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6b02:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6b06:	d320      	bcc.n	6b4a <SPIClass::beginTransaction(SPISettings)+0xee>
    6b08:	4c17      	ldr	r4, [pc, #92]	; (6b68 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6b0a:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6b0c:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6b0e:	2203      	movs	r2, #3
		port().CR = 0;
    6b10:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6b12:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6b14:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6b16:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6b18:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6b1a:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6b1c:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6b1e:	611a      	str	r2, [r3, #16]
	}
    6b20:	b002      	add	sp, #8
    6b22:	bc30      	pop	{r4, r5}
    6b24:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6b26:	4299      	cmp	r1, r3
    6b28:	d3ef      	bcc.n	6b0a <SPIClass::beginTransaction(SPISettings)+0xae>
    6b2a:	1c53      	adds	r3, r2, #1
    6b2c:	e7e9      	b.n	6b02 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6b2e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6b32:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6b34:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6b38:	400b      	ands	r3, r1
    6b3a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6b3c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6b40:	e7c5      	b.n	6ace <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6b42:	68c4      	ldr	r4, [r0, #12]
    6b44:	e7e2      	b.n	6b0c <SPIClass::beginTransaction(SPISettings)+0xb0>
    6b46:	2400      	movs	r4, #0
    6b48:	e7df      	b.n	6b0a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6b4a:	2b02      	cmp	r3, #2
    6b4c:	d9fb      	bls.n	6b46 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6b4e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6b50:	085a      	lsrs	r2, r3, #1
    6b52:	0214      	lsls	r4, r2, #8
    6b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6b58:	431c      	orrs	r4, r3
    6b5a:	e7d6      	b.n	6b0a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6b5c:	461a      	mov	r2, r3
    6b5e:	e7e4      	b.n	6b2a <SPIClass::beginTransaction(SPISettings)+0xce>
    6b60:	400fc000 	.word	0x400fc000
    6b64:	20000b2c 	.word	0x20000b2c
    6b68:	007f7fff 	.word	0x007f7fff

00006b6c <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    6b6c:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    6b6e:	4603      	mov	r3, r0
    6b70:	f853 0b04 	ldr.w	r0, [r3], #4
    6b74:	e893 0006 	ldmia.w	r3, {r1, r2}
    6b78:	f7ff ff70 	bl	6a5c <SPIClass::beginTransaction(SPISettings)>
}
    6b7c:	bd08      	pop	{r3, pc}
    6b7e:	bf00      	nop

00006b80 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    6b80:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6b82:	7cd3      	ldrb	r3, [r2, #19]
    6b84:	b313      	cbz	r3, 6bcc <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6b86:	07d8      	lsls	r0, r3, #31
    6b88:	d504      	bpl.n	6b94 <SdSpiArduinoDriver::deactivate()+0x14>
    6b8a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6b8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b90:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6b94:	0799      	lsls	r1, r3, #30
    6b96:	d504      	bpl.n	6ba2 <SdSpiArduinoDriver::deactivate()+0x22>
    6b98:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6b9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b9e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6ba2:	0758      	lsls	r0, r3, #29
    6ba4:	d504      	bpl.n	6bb0 <SdSpiArduinoDriver::deactivate()+0x30>
    6ba6:	6b10      	ldr	r0, [r2, #48]	; 0x30
    6ba8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6bac:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6bb0:	0719      	lsls	r1, r3, #28
    6bb2:	d504      	bpl.n	6bbe <SdSpiArduinoDriver::deactivate()+0x3e>
    6bb4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    6bb6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6bba:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6bbe:	06db      	lsls	r3, r3, #27
    6bc0:	d504      	bpl.n	6bcc <SdSpiArduinoDriver::deactivate()+0x4c>
    6bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6bc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6bc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    6bcc:	4770      	bx	lr
    6bce:	bf00      	nop

00006bd0 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    6bd0:	6800      	ldr	r0, [r0, #0]
    6bd2:	f000 baa5 	b.w	7120 <SPIClass::end()>
    6bd6:	bf00      	nop

00006bd8 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6bd8:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    6bda:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6bdc:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    6bde:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6be0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6be2:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6be6:	d0fb      	beq.n	6be0 <SdSpiArduinoDriver::receive()+0x8>
    6be8:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    6bea:	b2c0      	uxtb	r0, r0
    6bec:	4770      	bx	lr
    6bee:	bf00      	nop

00006bf0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6bf0:	b530      	push	{r4, r5, lr}
    6bf2:	460c      	mov	r4, r1
    6bf4:	b083      	sub	sp, #12
    6bf6:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6bf8:	21ff      	movs	r1, #255	; 0xff
    6bfa:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6bfc:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    6bfe:	f005 fe21 	bl	c844 <memset>
		transfer(buf, buf, count);
    6c02:	6828      	ldr	r0, [r5, #0]
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	4622      	mov	r2, r4
    6c08:	4621      	mov	r1, r4
    6c0a:	f000 fa85 	bl	7118 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    6c0e:	2000      	movs	r0, #0
    6c10:	b003      	add	sp, #12
    6c12:	bd30      	pop	{r4, r5, pc}

00006c14 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6c14:	6803      	ldr	r3, [r0, #0]
    6c16:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    6c18:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6c1a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6c1c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6c20:	d0fb      	beq.n	6c1a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    6c22:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    6c24:	4770      	bx	lr
    6c26:	bf00      	nop

00006c28 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6c28:	1e53      	subs	r3, r2, #1
    6c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    6c2e:	b530      	push	{r4, r5, lr}
    6c30:	4614      	mov	r4, r2
    6c32:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    6c36:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    6c38:	d311      	bcc.n	6c5e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6c3a:	b16a      	cbz	r2, 6c58 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6c3c:	6803      	ldr	r3, [r0, #0]
    6c3e:	1e48      	subs	r0, r1, #1
    6c40:	6819      	ldr	r1, [r3, #0]
    6c42:	1882      	adds	r2, r0, r2
		port().TDR = data;
    6c44:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6c48:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6c4a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6c4c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6c50:	d0fb      	beq.n	6c4a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    6c52:	4290      	cmp	r0, r2
    6c54:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    6c56:	d1f5      	bne.n	6c44 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    6c58:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6c5c:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    6c5e:	4668      	mov	r0, sp
    6c60:	f001 fb58 	bl	8314 <memcpy>
		transfer(buf, buf, count);
    6c64:	466a      	mov	r2, sp
    6c66:	4623      	mov	r3, r4
    6c68:	6828      	ldr	r0, [r5, #0]
    6c6a:	4611      	mov	r1, r2
    6c6c:	f000 fa54 	bl	7118 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    6c70:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6c74:	bd30      	pop	{r4, r5, pc}
    6c76:	bf00      	nop

00006c78 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6c78:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    6c7a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    6c7c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    6c7e:	07dc      	lsls	r4, r3, #31
    6c80:	d51d      	bpl.n	6cbe <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    6c82:	4604      	mov	r4, r0
    6c84:	6840      	ldr	r0, [r0, #4]
    6c86:	f104 0210 	add.w	r2, r4, #16
    6c8a:	6803      	ldr	r3, [r0, #0]
    6c8c:	68e1      	ldr	r1, [r4, #12]
    6c8e:	9201      	str	r2, [sp, #4]
    6c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c92:	4798      	blx	r3
    6c94:	9a01      	ldr	r2, [sp, #4]
    6c96:	4605      	mov	r5, r0
    6c98:	b1a8      	cbz	r0, 6cc6 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6c9a:	7823      	ldrb	r3, [r4, #0]
    6c9c:	0799      	lsls	r1, r3, #30
    6c9e:	d508      	bpl.n	6cb2 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6ca0:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    6ca2:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6ca6:	4419      	add	r1, r3
    6ca8:	6803      	ldr	r3, [r0, #0]
    6caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6cac:	4798      	blx	r3
    6cae:	b150      	cbz	r0, 6cc6 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6cb0:	7823      	ldrb	r3, [r4, #0]
    6cb2:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    6cb6:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    6cb8:	7023      	strb	r3, [r4, #0]
}
    6cba:	b003      	add	sp, #12
    6cbc:	bd30      	pop	{r4, r5, pc}
  return true;
    6cbe:	2501      	movs	r5, #1
}
    6cc0:	4628      	mov	r0, r5
    6cc2:	b003      	add	sp, #12
    6cc4:	bd30      	pop	{r4, r5, pc}
  return false;
    6cc6:	2500      	movs	r5, #0
}
    6cc8:	4628      	mov	r0, r5
    6cca:	b003      	add	sp, #12
    6ccc:	bd30      	pop	{r4, r5, pc}
    6cce:	bf00      	nop

00006cd0 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    6cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    6cd2:	6843      	ldr	r3, [r0, #4]
    6cd4:	b30b      	cbz	r3, 6d1a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    6cd6:	68c3      	ldr	r3, [r0, #12]
    6cd8:	4604      	mov	r4, r0
    6cda:	460f      	mov	r7, r1
    6cdc:	4615      	mov	r5, r2
    6cde:	428b      	cmp	r3, r1
    6ce0:	d106      	bne.n	6cf0 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    6ce2:	f810 3b10 	ldrb.w	r3, [r0], #16
    6ce6:	f005 0503 	and.w	r5, r5, #3
    6cea:	432b      	orrs	r3, r5
    6cec:	7023      	strb	r3, [r4, #0]
}
    6cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    6cf0:	f7ff ffc2 	bl	6c78 <FsCache::sync()>
    6cf4:	b188      	cbz	r0, 6d1a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    6cf6:	076b      	lsls	r3, r5, #29
    6cf8:	d505      	bpl.n	6d06 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    6cfa:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6cfe:	4630      	mov	r0, r6
    m_sector = sector;
    6d00:	2300      	movs	r3, #0
    6d02:	60e7      	str	r7, [r4, #12]
    6d04:	e7ef      	b.n	6ce6 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6d06:	6860      	ldr	r0, [r4, #4]
    6d08:	f104 0610 	add.w	r6, r4, #16
    6d0c:	4639      	mov	r1, r7
    6d0e:	6803      	ldr	r3, [r0, #0]
    6d10:	4632      	mov	r2, r6
    6d12:	691b      	ldr	r3, [r3, #16]
    6d14:	4798      	blx	r3
    6d16:	2800      	cmp	r0, #0
    6d18:	d1f1      	bne.n	6cfe <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    6d1a:	2000      	movs	r0, #0
}
    6d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d1e:	bf00      	nop

00006d20 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    6d20:	b510      	push	{r4, lr}
    6d22:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    6d24:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    6d26:	b082      	sub	sp, #8
  if (ls) {
    6d28:	b118      	cbz	r0, 6d32 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    6d2a:	2300      	movs	r3, #0
    6d2c:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    6d2e:	b002      	add	sp, #8
    6d30:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    6d32:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6d36:	428b      	cmp	r3, r1
    6d38:	d2f9      	bcs.n	6d2e <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    6d3a:	aa01      	add	r2, sp, #4
    6d3c:	4618      	mov	r0, r3
    6d3e:	f000 f815 	bl	6d6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    6d42:	b180      	cbz	r0, 6d66 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    6d44:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    6d46:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    6d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6d4c:	d201      	bcs.n	6d52 <FsName::get16()+0x32>
      rtn = cp;
    6d4e:	b298      	uxth	r0, r3
    6d50:	e7ed      	b.n	6d2e <FsName::get16()+0xe>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d52:	0a98      	lsrs	r0, r3, #10
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
    6d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d58:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    6d5c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d60:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    6d62:	81a3      	strh	r3, [r4, #12]
    6d64:	e7e3      	b.n	6d2e <FsName::get16()+0xe>
  return 0XFFFF;
    6d66:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6d6a:	e7e0      	b.n	6d2e <FsName::get16()+0xe>

00006d6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    6d6c:	4288      	cmp	r0, r1
    6d6e:	d23d      	bcs.n	6dec <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    6d70:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    6d72:	b410      	push	{r4}
      return nullptr;
    }
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
    6d74:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    6d78:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    6d7a:	2800      	cmp	r0, #0
    6d7c:	da2d      	bge.n	6dda <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    6d7e:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    6d82:	28c0      	cmp	r0, #192	; 0xc0
    6d84:	d034      	beq.n	6df0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    6d86:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    6d8a:	28e0      	cmp	r0, #224	; 0xe0
    6d8c:	d034      	beq.n	6df8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    6d8e:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    6d92:	28f0      	cmp	r0, #240	; 0xf0
    6d94:	d126      	bne.n	6de4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    6d96:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    6d9a:	2004      	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    6d9c:	4418      	add	r0, r3
    6d9e:	4288      	cmp	r0, r1
    6da0:	d820      	bhi.n	6de4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    6da2:	3301      	adds	r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    6da4:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    6da8:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    6dac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    6db0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    6db4:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    6db8:	d114      	bne.n	6de4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    6dba:	4283      	cmp	r3, r0
    6dbc:	d1f2      	bne.n	6da4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    6dbe:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    6dc2:	4b0f      	ldr	r3, [pc, #60]	; (6e00 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    6dc4:	4299      	cmp	r1, r3
    6dc6:	d80d      	bhi.n	6de4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    6dc8:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    6dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6dd0:	d308      	bcc.n	6de4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      return nullptr;
    }
    *rtn = cp;
    6dd2:	6014      	str	r4, [r2, #0]
    return str + n;
  }
    6dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    6dd8:	4770      	bx	lr
      return str + 1;
    6dda:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    6ddc:	6014      	str	r4, [r2, #0]
  }
    6dde:	f85d 4b04 	ldr.w	r4, [sp], #4
    6de2:	4770      	bx	lr
      return nullptr;
    6de4:	2000      	movs	r0, #0
  }
    6de6:	f85d 4b04 	ldr.w	r4, [sp], #4
    6dea:	4770      	bx	lr
      return nullptr;
    6dec:	2000      	movs	r0, #0
  }
    6dee:	4770      	bx	lr
      cp = ch & 0X1F;
    6df0:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    6df4:	2002      	movs	r0, #2
    6df6:	e7d1      	b.n	6d9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    6df8:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    6dfc:	2003      	movs	r0, #3
    6dfe:	e7cd      	b.n	6d9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    6e00:	0010ff7f 	.word	0x0010ff7f

00006e04 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    6e04:	287e      	cmp	r0, #126	; 0x7e
    6e06:	d93e      	bls.n	6e86 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    6e08:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    6e0c:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    6e0e:	b430      	push	{r4, r5}
    6e10:	4c28      	ldr	r4, [pc, #160]	; (6eb4 <toUpcase(unsigned short)+0xb0>)
    6e12:	e004      	b.n	6e1e <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    6e14:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    6e18:	4282      	cmp	r2, r0
    6e1a:	d820      	bhi.n	6e5e <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    6e1c:	460b      	mov	r3, r1
  while (right - left > 1) {
    6e1e:	ebac 0203 	sub.w	r2, ip, r3
    6e22:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6e24:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6e28:	d8f4      	bhi.n	6e14 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    6e2a:	b29b      	uxth	r3, r3
    6e2c:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6e30:	4290      	cmp	r0, r2
    6e32:	d216      	bcs.n	6e62 <toUpcase(unsigned short)+0x5e>
    6e34:	244b      	movs	r4, #75	; 0x4b
    6e36:	2300      	movs	r3, #0
    6e38:	4d1f      	ldr	r5, [pc, #124]	; (6eb8 <toUpcase(unsigned short)+0xb4>)
    6e3a:	e004      	b.n	6e46 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    6e3c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    6e40:	4282      	cmp	r2, r0
    6e42:	d81e      	bhi.n	6e82 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    6e44:	460b      	mov	r3, r1
  while (right - left > 1) {
    6e46:	1ae2      	subs	r2, r4, r3
    6e48:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6e4a:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6e4e:	d8f5      	bhi.n	6e3c <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    6e50:	b29b      	uxth	r3, r3
    6e52:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    6e56:	4282      	cmp	r2, r0
    6e58:	d01f      	beq.n	6e9a <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    6e5a:	bc30      	pop	{r4, r5}
    6e5c:	4770      	bx	lr
    mid = left + (right - left)/2;
    6e5e:	468c      	mov	ip, r1
    6e60:	e7dd      	b.n	6e1e <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6e62:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    6e66:	1a82      	subs	r2, r0, r2
    6e68:	78e3      	ldrb	r3, [r4, #3]
    6e6a:	429a      	cmp	r2, r3
    6e6c:	dae2      	bge.n	6e34 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    6e6e:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    6e72:	2b01      	cmp	r3, #1
    6e74:	d016      	beq.n	6ea4 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    6e76:	b1d3      	cbz	r3, 6eae <toUpcase(unsigned short)+0xaa>
    6e78:	b29b      	uxth	r3, r3
    6e7a:	4403      	add	r3, r0
}
    6e7c:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    6e7e:	b298      	uxth	r0, r3
}
    6e80:	4770      	bx	lr
    mid = left + (right - left)/2;
    6e82:	460c      	mov	r4, r1
    6e84:	e7df      	b.n	6e46 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    6e86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    6e8a:	2b19      	cmp	r3, #25
    6e8c:	bf8c      	ite	hi
    6e8e:	2300      	movhi	r3, #0
    6e90:	2301      	movls	r3, #1
    6e92:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    6e96:	b298      	uxth	r0, r3
}
    6e98:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    6e9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6e9e:	8868      	ldrh	r0, [r5, #2]
}
    6ea0:	bc30      	pop	{r4, r5}
    6ea2:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    6ea4:	f002 0201 	and.w	r2, r2, #1
    6ea8:	1a83      	subs	r3, r0, r2
    6eaa:	b298      	uxth	r0, r3
    6eac:	e7d5      	b.n	6e5a <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    6eae:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    6eb2:	e7e2      	b.n	6e7a <toUpcase(unsigned short)+0x76>
    6eb4:	20000738 	.word	0x20000738
    6eb8:	20000600 	.word	0x20000600

00006ebc <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6ebc:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    6ec0:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    6ec2:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    6ec6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6ec8:	d101      	bne.n	6ece <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    6eca:	6883      	ldr	r3, [r0, #8]
    6ecc:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    6ece:	f000 bd03 	b.w	78d8 <EventResponder::triggerEventNotImmediate()>
    6ed2:	bf00      	nop

00006ed4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    6ed4:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6ed6:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6ed8:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    6edc:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6ede:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    6ee0:	b1a3      	cbz	r3, 6f0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6ee2:	b321      	cbz	r1, 6f2e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    6ee4:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    6ee8:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6eea:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6eec:	6f25      	ldr	r5, [r4, #112]	; 0x70
    6eee:	07af      	lsls	r7, r5, #30
    6ef0:	d407      	bmi.n	6f02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    6ef2:	4615      	mov	r5, r2
				count_read--;
    6ef4:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6ef6:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    6ef8:	b11a      	cbz	r2, 6f02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6efa:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    6efe:	462a      	mov	r2, r5
    6f00:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    6f02:	6965      	ldr	r5, [r4, #20]
    6f04:	07ed      	lsls	r5, r5, #31
    6f06:	d5f1      	bpl.n	6eec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d1ea      	bne.n	6ee2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    6f0c:	b16e      	cbz	r6, 6f2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    6f0e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6f10:	6f19      	ldr	r1, [r3, #112]	; 0x70
    6f12:	0789      	lsls	r1, r1, #30
    6f14:	d4fa      	bmi.n	6f0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    6f16:	4611      	mov	r1, r2
			count_read--;
    6f18:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    6f1c:	2a00      	cmp	r2, #0
    6f1e:	d0f5      	beq.n	6f0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6f20:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    6f24:	460a      	mov	r2, r1
	while (count_read) {
    6f26:	2e00      	cmp	r6, #0
    6f28:	d1f1      	bne.n	6f0e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    6f2a:	bcf0      	pop	{r4, r5, r6, r7}
    6f2c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6f2e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    6f32:	e7d9      	b.n	6ee8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00006f34 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    6f34:	4b32      	ldr	r3, [pc, #200]	; (7000 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    6f36:	4933      	ldr	r1, [pc, #204]	; (7004 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f38:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    6f3a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    6f3e:	7920      	ldrb	r0, [r4, #4]
    6f40:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    6f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    6f44:	f895 c004 	ldrb.w	ip, [r5, #4]
    6f48:	f881 c01c 	strb.w	ip, [r1, #28]
    6f4c:	7708      	strb	r0, [r1, #28]
    6f4e:	b152      	cbz	r2, 6f66 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    6f50:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6f54:	d323      	bcc.n	6f9e <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    6f56:	492c      	ldr	r1, [pc, #176]	; (7008 <_spi_dma_rxISR1()+0xd4>)
    6f58:	4411      	add	r1, r2
		DMA_SERQ = channel;
    6f5a:	4a2a      	ldr	r2, [pc, #168]	; (7004 <_spi_dma_rxISR1()+0xd0>)
    6f5c:	6419      	str	r1, [r3, #64]	; 0x40
    6f5e:	76d0      	strb	r0, [r2, #27]
    6f60:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f64:	bd30      	pop	{r4, r5, pc}
    6f66:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6f68:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6f6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6f6c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6f6e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    6f72:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6f74:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    6f76:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    6f7a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6f7c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    6f7e:	6804      	ldr	r4, [r0, #0]
    6f80:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6f82:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    6f86:	4b21      	ldr	r3, [pc, #132]	; (700c <_spi_dma_rxISR1()+0xd8>)
    6f88:	429c      	cmp	r4, r3
    6f8a:	d126      	bne.n	6fda <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    6f8c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    6f8e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    6f90:	2b02      	cmp	r3, #2
		_data = data;
    6f92:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6f94:	d126      	bne.n	6fe4 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    6f96:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6f9c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    6f9e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6fa0:	8be9      	ldrh	r1, [r5, #30]
    6fa2:	0409      	lsls	r1, r1, #16
    6fa4:	d422      	bmi.n	6fec <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    6fa6:	b292      	uxth	r2, r2
    6fa8:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    6faa:	6821      	ldr	r1, [r4, #0]
    6fac:	8bec      	ldrh	r4, [r5, #30]
    6fae:	b2a4      	uxth	r4, r4
    6fb0:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6fb2:	8bcc      	ldrh	r4, [r1, #30]
    6fb4:	0424      	lsls	r4, r4, #16
    6fb6:	d505      	bpl.n	6fc4 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6fb8:	8bcc      	ldrh	r4, [r1, #30]
    6fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6fbe:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6fc2:	4322      	orrs	r2, r4
    6fc4:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    6fc6:	8bca      	ldrh	r2, [r1, #30]
    6fc8:	b292      	uxth	r2, r2
    6fca:	82ca      	strh	r2, [r1, #22]
    6fcc:	2100      	movs	r1, #0
    6fce:	4a0d      	ldr	r2, [pc, #52]	; (7004 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    6fd0:	6419      	str	r1, [r3, #64]	; 0x40
    6fd2:	76d0      	strb	r0, [r2, #27]
    6fd4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6fd8:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    6fda:	4623      	mov	r3, r4
    6fdc:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    6fe2:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    6fe8:	f000 bc76 	b.w	78d8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6fec:	8be9      	ldrh	r1, [r5, #30]
    6fee:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    6ff2:	b292      	uxth	r2, r2
    6ff4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    6ff8:	ea41 010e 	orr.w	r1, r1, lr
    6ffc:	83e9      	strh	r1, [r5, #30]
    6ffe:	e7d4      	b.n	6faa <_spi_dma_rxISR1()+0x76>
    7000:	2000c750 	.word	0x2000c750
    7004:	400e8000 	.word	0x400e8000
    7008:	ffff8001 	.word	0xffff8001
    700c:	00006ebd 	.word	0x00006ebd

00007010 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    7010:	4b32      	ldr	r3, [pc, #200]	; (70dc <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    7012:	4933      	ldr	r1, [pc, #204]	; (70e0 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7014:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    7016:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    701a:	7920      	ldrb	r0, [r4, #4]
    701c:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    701e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    7020:	f895 c004 	ldrb.w	ip, [r5, #4]
    7024:	f881 c01c 	strb.w	ip, [r1, #28]
    7028:	7708      	strb	r0, [r1, #28]
    702a:	b152      	cbz	r2, 7042 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    702c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    7030:	d323      	bcc.n	707a <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    7032:	492c      	ldr	r1, [pc, #176]	; (70e4 <_spi_dma_rxISR0()+0xd4>)
    7034:	4411      	add	r1, r2
		DMA_SERQ = channel;
    7036:	4a2a      	ldr	r2, [pc, #168]	; (70e0 <_spi_dma_rxISR0()+0xd0>)
    7038:	6419      	str	r1, [r3, #64]	; 0x40
    703a:	76d0      	strb	r0, [r2, #27]
    703c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7040:	bd30      	pop	{r4, r5, pc}
    7042:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7044:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    7046:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7048:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    704a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    704e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7050:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7052:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    7056:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7058:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    705a:	6804      	ldr	r4, [r0, #0]
    705c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    705e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    7062:	4b21      	ldr	r3, [pc, #132]	; (70e8 <_spi_dma_rxISR0()+0xd8>)
    7064:	429c      	cmp	r4, r3
    7066:	d126      	bne.n	70b6 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    7068:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    706a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    706c:	2b02      	cmp	r3, #2
		_data = data;
    706e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7070:	d126      	bne.n	70c0 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    7072:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7078:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    707a:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    707c:	8be9      	ldrh	r1, [r5, #30]
    707e:	0409      	lsls	r1, r1, #16
    7080:	d422      	bmi.n	70c8 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    7082:	b292      	uxth	r2, r2
    7084:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    7086:	6821      	ldr	r1, [r4, #0]
    7088:	8bec      	ldrh	r4, [r5, #30]
    708a:	b2a4      	uxth	r4, r4
    708c:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    708e:	8bcc      	ldrh	r4, [r1, #30]
    7090:	0424      	lsls	r4, r4, #16
    7092:	d505      	bpl.n	70a0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7094:	8bcc      	ldrh	r4, [r1, #30]
    7096:	f3c2 0208 	ubfx	r2, r2, #0, #9
    709a:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    709e:	4322      	orrs	r2, r4
    70a0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    70a2:	8bca      	ldrh	r2, [r1, #30]
    70a4:	b292      	uxth	r2, r2
    70a6:	82ca      	strh	r2, [r1, #22]
    70a8:	2100      	movs	r1, #0
    70aa:	4a0d      	ldr	r2, [pc, #52]	; (70e0 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    70ac:	6419      	str	r1, [r3, #64]	; 0x40
    70ae:	76d0      	strb	r0, [r2, #27]
    70b0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70b4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    70b6:	4623      	mov	r3, r4
    70b8:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    70be:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    70c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    70c4:	f000 bc08 	b.w	78d8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    70c8:	8be9      	ldrh	r1, [r5, #30]
    70ca:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    70ce:	b292      	uxth	r2, r2
    70d0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    70d4:	ea41 010e 	orr.w	r1, r1, lr
    70d8:	83e9      	strh	r1, [r5, #30]
    70da:	e7d4      	b.n	7086 <_spi_dma_rxISR0()+0x76>
    70dc:	2000c700 	.word	0x2000c700
    70e0:	400e8000 	.word	0x400e8000
    70e4:	ffff8001 	.word	0xffff8001
    70e8:	00006ebd 	.word	0x00006ebd

000070ec <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    70ec:	2300      	movs	r3, #0
    70ee:	e9c0 1200 	strd	r1, r2, [r0]
    70f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
    70f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
    70fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
    70fe:	e9c0 3308 	strd	r3, r3, [r0, #32]
    7102:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    7106:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    710a:	6383      	str	r3, [r0, #56]	; 0x38
    710c:	8783      	strh	r3, [r0, #60]	; 0x3c
    710e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    7112:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    7116:	4770      	bx	lr

00007118 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    7118:	b10b      	cbz	r3, 711e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    711a:	f7ff bedb 	b.w	6ed4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    711e:	4770      	bx	lr

00007120 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7120:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7122:	e9d3 1200 	ldrd	r1, r2, [r3]
    7126:	6809      	ldr	r1, [r1, #0]
    7128:	4211      	tst	r1, r2
    712a:	d100      	bne.n	712e <SPIClass::end()+0xe>
    712c:	4770      	bx	lr
void SPIClass::end() {
    712e:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7130:	6802      	ldr	r2, [r0, #0]
    7132:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    7134:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    7136:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    7138:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    713a:	7c22      	ldrb	r2, [r4, #16]
    713c:	4413      	add	r3, r2
    713e:	7c18      	ldrb	r0, [r3, #16]
    7140:	f001 f8a8 	bl	8294 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    7144:	7c62      	ldrb	r2, [r4, #17]
    7146:	6863      	ldr	r3, [r4, #4]
    7148:	2105      	movs	r1, #5
    714a:	4413      	add	r3, r2
    714c:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    7150:	f001 f8a0 	bl	8294 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7154:	6863      	ldr	r3, [r4, #4]
    7156:	7ca2      	ldrb	r2, [r4, #18]
    7158:	2105      	movs	r1, #5
    715a:	4413      	add	r3, r2
}
    715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7160:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    7164:	f001 b896 	b.w	8294 <pinMode>

00007168 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    7168:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    716a:	4a08      	ldr	r2, [pc, #32]	; (718c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    716c:	4908      	ldr	r1, [pc, #32]	; (7190 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    716e:	4809      	ldr	r0, [pc, #36]	; (7194 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    7170:	f7ff ffbc 	bl	70ec <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    7174:	4a08      	ldr	r2, [pc, #32]	; (7198 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    7176:	4909      	ldr	r1, [pc, #36]	; (719c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    7178:	4809      	ldr	r0, [pc, #36]	; (71a0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    717a:	f7ff ffb7 	bl	70ec <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    717e:	4a09      	ldr	r2, [pc, #36]	; (71a4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    7180:	4909      	ldr	r1, [pc, #36]	; (71a8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    7182:	480a      	ldr	r0, [pc, #40]	; (71ac <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    7184:	f7ff ffb2 	bl	70ec <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    7188:	bd08      	pop	{r3, pc}
    718a:	bf00      	nop
    718c:	2000090c 	.word	0x2000090c
    7190:	403a0000 	.word	0x403a0000
    7194:	2000c700 	.word	0x2000c700
    7198:	2000089c 	.word	0x2000089c
    719c:	4039c000 	.word	0x4039c000
    71a0:	2000c750 	.word	0x2000c750
    71a4:	2000082c 	.word	0x2000082c
    71a8:	40394000 	.word	0x40394000
    71ac:	2000c7a0 	.word	0x2000c7a0

000071b0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    71b0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    71b4:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    71b8:	1a10      	subs	r0, r2, r0
    71ba:	4770      	bx	lr

000071bc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    71bc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    71c0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    71c4:	429a      	cmp	r2, r3
    71c6:	d905      	bls.n	71d4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    71c8:	1c5a      	adds	r2, r3, #1
    71ca:	4403      	add	r3, r0
    71cc:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    71d0:	7e98      	ldrb	r0, [r3, #26]
    71d2:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    71d4:	f04f 30ff 	mov.w	r0, #4294967295
	}
    71d8:	4770      	bx	lr
    71da:	bf00      	nop

000071dc <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    71dc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    71e0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    71e4:	429a      	cmp	r2, r3
    71e6:	d902      	bls.n	71ee <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    71e8:	4418      	add	r0, r3
    71ea:	7e80      	ldrb	r0, [r0, #26]
    71ec:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    71ee:	f04f 30ff 	mov.w	r0, #4294967295
	}
    71f2:	4770      	bx	lr

000071f4 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    71f4:	4770      	bx	lr
    71f6:	bf00      	nop

000071f8 <TwoWire::write(unsigned char)>:
{
    71f8:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    71fa:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    71fe:	b178      	cbz	r0, 7220 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    7200:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    7204:	2a88      	cmp	r2, #136	; 0x88
    7206:	d903      	bls.n	7210 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7208:	2201      	movs	r2, #1
			return 0;
    720a:	2000      	movs	r0, #0
    720c:	605a      	str	r2, [r3, #4]
    720e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    7210:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    7214:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    7216:	441a      	add	r2, r3
    7218:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    721c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    7220:	4770      	bx	lr
    7222:	bf00      	nop

00007224 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    7224:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    7226:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    722a:	b90c      	cbnz	r4, 7230 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    722c:	4620      	mov	r0, r4
    722e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    7230:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    7234:	4605      	mov	r5, r0
    7236:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    723a:	42a2      	cmp	r2, r4
    723c:	d80d      	bhi.n	725a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    723e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    7240:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    7244:	4622      	mov	r2, r4
    7246:	4418      	add	r0, r3
    7248:	f001 f864 	bl	8314 <memcpy>
		txBufferLength += quantity;
    724c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    7250:	4620      	mov	r0, r4
		txBufferLength += quantity;
    7252:	4423      	add	r3, r4
    7254:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    7258:	bd38      	pop	{r3, r4, r5, pc}
    725a:	2201      	movs	r2, #1
    725c:	6042      	str	r2, [r0, #4]
    725e:	e7ef      	b.n	7240 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00007260 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    7260:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    7262:	2500      	movs	r5, #0
    7264:	4613      	mov	r3, r2
    7266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    726a:	4604      	mov	r4, r0
    726c:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    7270:	4815      	ldr	r0, [pc, #84]	; (72c8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    7272:	2288      	movs	r2, #136	; 0x88
    7274:	6121      	str	r1, [r4, #16]
    7276:	4629      	mov	r1, r5
    7278:	6020      	str	r0, [r4, #0]
    727a:	f104 001a 	add.w	r0, r4, #26
    727e:	6163      	str	r3, [r4, #20]
    7280:	7325      	strb	r5, [r4, #12]
    7282:	7625      	strb	r5, [r4, #24]
    7284:	7665      	strb	r5, [r4, #25]
    7286:	f005 fadd 	bl	c844 <memset>
    728a:	2289      	movs	r2, #137	; 0x89
    728c:	4629      	mov	r1, r5
    728e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    7292:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7296:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    729a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    729e:	f005 fad1 	bl	c844 <memset>
	}
    72a2:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    72a4:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    72a8:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    72ac:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    72b0:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    72b4:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    72b8:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    72bc:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    72c0:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    72c4:	bd38      	pop	{r3, r4, r5, pc}
    72c6:	bf00      	nop
    72c8:	20000aa0 	.word	0x20000aa0

000072cc <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    72cc:	6903      	ldr	r3, [r0, #16]
{
    72ce:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    72d0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    72d4:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    72d6:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    72da:	d001      	beq.n	72e0 <TwoWire::isr()+0x14>
    72dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    72e0:	07ae      	lsls	r6, r5, #30
    72e2:	d50b      	bpl.n	72fc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    72e4:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    72e8:	0408      	lsls	r0, r1, #16
    72ea:	d53e      	bpl.n	736a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    72ec:	2200      	movs	r2, #0
    72ee:	2001      	movs	r0, #1
    72f0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    72f4:	4422      	add	r2, r4
    72f6:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    72fa:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    72fc:	07ea      	lsls	r2, r5, #31
    72fe:	d510      	bpl.n	7322 <TwoWire::isr()+0x56>
		if (!transmitting) {
    7300:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    7304:	b1f6      	cbz	r6, 7344 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    7306:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    730a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    730e:	42b2      	cmp	r2, r6
    7310:	d927      	bls.n	7362 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    7312:	1c72      	adds	r2, r6, #1
    7314:	4426      	add	r6, r4
    7316:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    731a:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    731e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    7322:	05ab      	lsls	r3, r5, #22
    7324:	d50d      	bpl.n	7342 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    7326:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    732a:	b118      	cbz	r0, 7334 <TwoWire::isr()+0x68>
    732c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7330:	b103      	cbz	r3, 7334 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    7332:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    7334:	2300      	movs	r3, #0
    7336:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    733a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    733e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    7342:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    7344:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    7348:	b10a      	cbz	r2, 734e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    734a:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    734c:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    734e:	2200      	movs	r2, #0
    7350:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    7354:	2201      	movs	r2, #1
    7356:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    735a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    735e:	42b2      	cmp	r2, r6
    7360:	d8d7      	bhi.n	7312 <TwoWire::isr()+0x46>
			port->STDR = 0;
    7362:	2200      	movs	r2, #0
    7364:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    7368:	e7db      	b.n	7322 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    736a:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    736e:	2a87      	cmp	r2, #135	; 0x87
    7370:	d8c4      	bhi.n	72fc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    7372:	1c50      	adds	r0, r2, #1
    7374:	b2c0      	uxtb	r0, r0
    7376:	e7bd      	b.n	72f4 <TwoWire::isr()+0x28>

00007378 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    7378:	4801      	ldr	r0, [pc, #4]	; (7380 <lpi2c1_isr()+0x8>)
    737a:	f7ff bfa7 	b.w	72cc <TwoWire::isr()>
    737e:	bf00      	nop
    7380:	2000c7f4 	.word	0x2000c7f4

00007384 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    7384:	4801      	ldr	r0, [pc, #4]	; (738c <lpi2c3_isr()+0x8>)
    7386:	f7ff bfa1 	b.w	72cc <TwoWire::isr()>
    738a:	bf00      	nop
    738c:	2000c934 	.word	0x2000c934

00007390 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7390:	4801      	ldr	r0, [pc, #4]	; (7398 <lpi2c4_isr()+0x8>)
    7392:	f7ff bf9b 	b.w	72cc <TwoWire::isr()>
    7396:	bf00      	nop
    7398:	2000ca74 	.word	0x2000ca74

0000739c <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    739c:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    739e:	4c09      	ldr	r4, [pc, #36]	; (73c4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    73a0:	4909      	ldr	r1, [pc, #36]	; (73c8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    73a2:	4622      	mov	r2, r4
    73a4:	4809      	ldr	r0, [pc, #36]	; (73cc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    73a6:	f7ff ff5b 	bl	7260 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    73aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
    73ae:	4908      	ldr	r1, [pc, #32]	; (73d0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    73b0:	4808      	ldr	r0, [pc, #32]	; (73d4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    73b2:	f7ff ff55 	bl	7260 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    73b6:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    73ba:	4907      	ldr	r1, [pc, #28]	; (73d8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    73bc:	4807      	ldr	r0, [pc, #28]	; (73dc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    73be:	f7ff ff4f 	bl	7260 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    73c2:	bd10      	pop	{r4, pc}
    73c4:	60002754 	.word	0x60002754
    73c8:	403f0000 	.word	0x403f0000
    73cc:	2000c7f4 	.word	0x2000c7f4
    73d0:	403f8000 	.word	0x403f8000
    73d4:	2000c934 	.word	0x2000c934
    73d8:	403fc000 	.word	0x403fc000
    73dc:	2000ca74 	.word	0x2000ca74

000073e0 <AudioStream::update_all()>:
    73e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    73e4:	2240      	movs	r2, #64	; 0x40
    73e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    73ea:	4770      	bx	lr

000073ec <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    73ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73ee:	4b14      	ldr	r3, [pc, #80]	; (7440 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    73f0:	4d14      	ldr	r5, [pc, #80]	; (7444 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73f2:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    73f4:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73f6:	b19c      	cbz	r4, 7420 <software_isr()+0x34>
		if (p->active) {
    73f8:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    73fa:	4620      	mov	r0, r4
		if (p->active) {
    73fc:	b16b      	cbz	r3, 741a <software_isr()+0x2e>
			p->update();
    73fe:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    7400:	686f      	ldr	r7, [r5, #4]
			p->update();
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    7406:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    7408:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    740a:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    740c:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    7410:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    7414:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    7416:	bf38      	it	cc
    7418:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    741a:	6964      	ldr	r4, [r4, #20]
    741c:	2c00      	cmp	r4, #0
    741e:	d1eb      	bne.n	73f8 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    7420:	4b08      	ldr	r3, [pc, #32]	; (7444 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    7422:	4a09      	ldr	r2, [pc, #36]	; (7448 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    7424:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    7426:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    7428:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    742a:	4c08      	ldr	r4, [pc, #32]	; (744c <software_isr()+0x60>)
    742c:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    7430:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    7434:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    7436:	bf38      	it	cc
    7438:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
    743a:	f3bf 8f4f 	dsb	sy
}
    743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7440:	200200ac 	.word	0x200200ac
    7444:	e0001000 	.word	0xe0001000
    7448:	200225da 	.word	0x200225da
    744c:	200225d8 	.word	0x200225d8

00007450 <AudioStream::allocate()>:
{
    7450:	b430      	push	{r4, r5}
	__disable_irq();
    7452:	b672      	cpsid	i
	index = memory_pool_first_mask;
    7454:	4d24      	ldr	r5, [pc, #144]	; (74e8 <AudioStream::allocate()+0x98>)
	p += index;
    7456:	4c25      	ldr	r4, [pc, #148]	; (74ec <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    7458:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
    745a:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
    745e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    7462:	428b      	cmp	r3, r1
    7464:	d23c      	bcs.n	74e0 <AudioStream::allocate()+0x90>
    7466:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    746a:	1c50      	adds	r0, r2, #1
    746c:	1ac9      	subs	r1, r1, r3
    746e:	eb00 0091 	add.w	r0, r0, r1, lsr #2
    7472:	e002      	b.n	747a <AudioStream::allocate()+0x2a>
		index++;
    7474:	3201      	adds	r2, #1
		if (p >= end) {
    7476:	4282      	cmp	r2, r0
    7478:	d032      	beq.n	74e0 <AudioStream::allocate()+0x90>
		index++;
    747a:	469c      	mov	ip, r3
		avail = *p;
    747c:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
    7480:	2900      	cmp	r1, #0
    7482:	d0f7      	beq.n	7474 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    7484:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    7488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    748c:	40c3      	lsrs	r3, r0
    748e:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    7492:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
    7496:	b901      	cbnz	r1, 749a <AudioStream::allocate()+0x4a>
    7498:	3201      	adds	r2, #1
	used = memory_used + 1;
    749a:	4b15      	ldr	r3, [pc, #84]	; (74f0 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    749c:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
    749e:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
    74a0:	3201      	adds	r2, #1
    74a2:	b291      	uxth	r1, r2
    74a4:	8019      	strh	r1, [r3, #0]
	__enable_irq();
    74a6:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
    74a8:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    74ac:	f641 737c 	movw	r3, #8060	; 0x1f7c
    74b0:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    74b4:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    74b8:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    74bc:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    74be:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    74c2:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    74c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    74ca:	480a      	ldr	r0, [pc, #40]	; (74f4 <AudioStream::allocate()+0xa4>)
    74cc:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
    74ce:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    74d0:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    74d2:	4b09      	ldr	r3, [pc, #36]	; (74f8 <AudioStream::allocate()+0xa8>)
    74d4:	881c      	ldrh	r4, [r3, #0]
    74d6:	4294      	cmp	r4, r2
}
    74d8:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    74da:	bf38      	it	cc
    74dc:	8019      	strhcc	r1, [r3, #0]
}
    74de:	4770      	bx	lr
			__enable_irq();
    74e0:	b662      	cpsie	i
			return NULL;
    74e2:	2000      	movs	r0, #0
}
    74e4:	bc30      	pop	{r4, r5}
    74e6:	4770      	bx	lr
    74e8:	200225dc 	.word	0x200225dc
    74ec:	200200b0 	.word	0x200200b0
    74f0:	200225d4 	.word	0x200225d4
    74f4:	200200a8 	.word	0x200200a8
    74f8:	200225d6 	.word	0x200225d6

000074fc <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    74fc:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
    74fe:	b672      	cpsid	i
	if (block->ref_count > 1) {
    7500:	7803      	ldrb	r3, [r0, #0]
    7502:	2b01      	cmp	r3, #1
    7504:	d903      	bls.n	750e <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    7506:	3b01      	subs	r3, #1
    7508:	7003      	strb	r3, [r0, #0]
	__enable_irq();
    750a:	b662      	cpsie	i
}
    750c:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    750e:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    7510:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    7512:	480b      	ldr	r0, [pc, #44]	; (7540 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    7514:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7518:	f001 011f 	and.w	r1, r1, #31
    751c:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    751e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    7522:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    7524:	4907      	ldr	r1, [pc, #28]	; (7544 <AudioStream::release(audio_block_struct*)+0x48>)
    7526:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    752a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    752e:	459c      	cmp	ip, r3
		memory_used--;
    7530:	4a05      	ldr	r2, [pc, #20]	; (7548 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    7532:	bf88      	it	hi
    7534:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
    7536:	8813      	ldrh	r3, [r2, #0]
    7538:	3b01      	subs	r3, #1
    753a:	8013      	strh	r3, [r2, #0]
	__enable_irq();
    753c:	b662      	cpsie	i
}
    753e:	4770      	bx	lr
    7540:	200200b0 	.word	0x200200b0
    7544:	200225dc 	.word	0x200225dc
    7548:	200225d4 	.word	0x200225d4

0000754c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    754c:	68c3      	ldr	r3, [r0, #12]
    754e:	b913      	cbnz	r3, 7556 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    7550:	e01d      	b.n	758e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    7552:	68db      	ldr	r3, [r3, #12]
    7554:	b1e3      	cbz	r3, 7590 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    7556:	7a18      	ldrb	r0, [r3, #8]
    7558:	4290      	cmp	r0, r2
    755a:	d1fa      	bne.n	7552 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    755c:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    755e:	6858      	ldr	r0, [r3, #4]
    7560:	f893 c009 	ldrb.w	ip, [r3, #9]
    7564:	6900      	ldr	r0, [r0, #16]
    7566:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    756a:	b154      	cbz	r4, 7582 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    756c:	68db      	ldr	r3, [r3, #12]
    756e:	b12b      	cbz	r3, 757c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    7570:	7a18      	ldrb	r0, [r3, #8]
    7572:	4290      	cmp	r0, r2
    7574:	d0f3      	beq.n	755e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    7576:	68db      	ldr	r3, [r3, #12]
    7578:	2b00      	cmp	r3, #0
    757a:	d1f9      	bne.n	7570 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    757c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7580:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    7582:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    7586:	7808      	ldrb	r0, [r1, #0]
    7588:	3001      	adds	r0, #1
    758a:	7008      	strb	r0, [r1, #0]
    758c:	e7ee      	b.n	756c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    758e:	4770      	bx	lr
    7590:	4770      	bx	lr
    7592:	bf00      	nop

00007594 <AudioStream::receiveWritable(unsigned int)>:
{
    7594:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    7596:	7a43      	ldrb	r3, [r0, #9]
    7598:	428b      	cmp	r3, r1
    759a:	d91b      	bls.n	75d4 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    759c:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    759e:	2200      	movs	r2, #0
	in = inputQueue[index];
    75a0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    75a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    75a8:	b1a4      	cbz	r4, 75d4 <AudioStream::receiveWritable(unsigned int)+0x40>
    75aa:	7823      	ldrb	r3, [r4, #0]
    75ac:	2b01      	cmp	r3, #1
    75ae:	d801      	bhi.n	75b4 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    75b0:	4620      	mov	r0, r4
    75b2:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
    75b4:	f7ff ff4c 	bl	7450 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    75b8:	4605      	mov	r5, r0
    75ba:	b128      	cbz	r0, 75c8 <AudioStream::receiveWritable(unsigned int)+0x34>
    75bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    75c0:	1d21      	adds	r1, r4, #4
    75c2:	3004      	adds	r0, #4
    75c4:	f000 fea6 	bl	8314 <memcpy>
		in->ref_count--;
    75c8:	7823      	ldrb	r3, [r4, #0]
    75ca:	3b01      	subs	r3, #1
    75cc:	7023      	strb	r3, [r4, #0]
		p = allocate();
    75ce:	462c      	mov	r4, r5
}
    75d0:	4620      	mov	r0, r4
    75d2:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    75d4:	2400      	movs	r4, #0
}
    75d6:	4620      	mov	r0, r4
    75d8:	bd38      	pop	{r3, r4, r5, pc}
    75da:	bf00      	nop

000075dc <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
    75dc:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
    75de:	4904      	ldr	r1, [pc, #16]	; (75f0 <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
    75e0:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
    75e4:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
    75e6:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
    75e8:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
    75ea:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
    75ec:	60c2      	str	r2, [r0, #12]
}
    75ee:	4770      	bx	lr
    75f0:	20020120 	.word	0x20020120

000075f4 <AudioConnection::connect()>:
		if (isConnected) // already connected
    75f4:	7c03      	ldrb	r3, [r0, #16]
    75f6:	b9fb      	cbnz	r3, 7638 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    75f8:	6803      	ldr	r3, [r0, #0]
    75fa:	4601      	mov	r1, r0
    75fc:	b1fb      	cbz	r3, 763e <AudioConnection::connect()+0x4a>
    75fe:	6843      	ldr	r3, [r0, #4]
    7600:	b1eb      	cbz	r3, 763e <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    7602:	7a42      	ldrb	r2, [r0, #9]
    7604:	7a5b      	ldrb	r3, [r3, #9]
    7606:	429a      	cmp	r2, r3
    7608:	d21c      	bcs.n	7644 <AudioConnection::connect()+0x50>
{
    760a:	b430      	push	{r4, r5}
		__disable_irq();
    760c:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    760e:	4b2b      	ldr	r3, [pc, #172]	; (76bc <AudioConnection::connect()+0xc8>)
    7610:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    7612:	b1ec      	cbz	r4, 7650 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    7614:	68e3      	ldr	r3, [r4, #12]
			while (p)
    7616:	b1c3      	cbz	r3, 764a <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    7618:	6848      	ldr	r0, [r1, #4]
    761a:	e001      	b.n	7620 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    761c:	68db      	ldr	r3, [r3, #12]
			while (p)
    761e:	b1a3      	cbz	r3, 764a <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    7620:	685a      	ldr	r2, [r3, #4]
    7622:	4282      	cmp	r2, r0
    7624:	d1fa      	bne.n	761c <AudioConnection::connect()+0x28>
    7626:	f893 c009 	ldrb.w	ip, [r3, #9]
    762a:	7a4a      	ldrb	r2, [r1, #9]
    762c:	4594      	cmp	ip, r2
    762e:	d1f5      	bne.n	761c <AudioConnection::connect()+0x28>
					__enable_irq();
    7630:	b662      	cpsie	i
					return 4;
    7632:	2004      	movs	r0, #4
}
    7634:	bc30      	pop	{r4, r5}
    7636:	4770      	bx	lr
	int result = 1;
    7638:	2001      	movs	r0, #1
	__enable_irq();
    763a:	b662      	cpsie	i
}
    763c:	4770      	bx	lr
			result = 3;
    763e:	2003      	movs	r0, #3
	__enable_irq();
    7640:	b662      	cpsie	i
}
    7642:	4770      	bx	lr
			result = 2;
    7644:	2002      	movs	r0, #2
	__enable_irq();
    7646:	b662      	cpsie	i
}
    7648:	4770      	bx	lr
			s = s->next_update;
    764a:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    764c:	2c00      	cmp	r4, #0
    764e:	d1e1      	bne.n	7614 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    7650:	4c1b      	ldr	r4, [pc, #108]	; (76c0 <AudioConnection::connect()+0xcc>)
    7652:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    7654:	b143      	cbz	r3, 7668 <AudioConnection::connect()+0x74>
    7656:	4299      	cmp	r1, r3
    7658:	d102      	bne.n	7660 <AudioConnection::connect()+0x6c>
    765a:	e00b      	b.n	7674 <AudioConnection::connect()+0x80>
    765c:	4299      	cmp	r1, r3
    765e:	d007      	beq.n	7670 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    7660:	461a      	mov	r2, r3
    7662:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    7664:	2b00      	cmp	r3, #0
    7666:	d1f9      	bne.n	765c <AudioConnection::connect()+0x68>
			result = 5;
    7668:	2005      	movs	r0, #5
	__enable_irq();
    766a:	b662      	cpsie	i
}
    766c:	bc30      	pop	{r4, r5}
    766e:	4770      	bx	lr
			pp = &((*pp)->next_dest);
    7670:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    7674:	680d      	ldr	r5, [r1, #0]
    7676:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
    7678:	b1e8      	cbz	r0, 76b6 <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    767a:	68c3      	ldr	r3, [r0, #12]
    767c:	b91b      	cbnz	r3, 7686 <AudioConnection::connect()+0x92>
    767e:	e008      	b.n	7692 <AudioConnection::connect()+0x9e>
    7680:	68da      	ldr	r2, [r3, #12]
    7682:	b13a      	cbz	r2, 7694 <AudioConnection::connect()+0xa0>
    7684:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    7686:	4281      	cmp	r1, r0
    7688:	4618      	mov	r0, r3
    768a:	d1f9      	bne.n	7680 <AudioConnection::connect()+0x8c>
					__enable_irq();
    768c:	b662      	cpsie	i
					return 6;
    768e:	2006      	movs	r0, #6
    7690:	e7d0      	b.n	7634 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    7692:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    7694:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    7696:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    7698:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    769a:	6023      	str	r3, [r4, #0]
		src->active = true;
    769c:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    769e:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
    76a0:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
    76a2:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
    76a4:	441a      	add	r2, r3
    76a6:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
    76a8:	684a      	ldr	r2, [r1, #4]
    76aa:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
    76ac:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
    76ae:	441c      	add	r4, r3
    76b0:	7294      	strb	r4, [r2, #10]
		isConnected = true;
    76b2:	740b      	strb	r3, [r1, #16]
		result = 0;
    76b4:	e7d9      	b.n	766a <AudioConnection::connect()+0x76>
			src->destination_list = this;
    76b6:	60e9      	str	r1, [r5, #12]
    76b8:	e7ed      	b.n	7696 <AudioConnection::connect()+0xa2>
    76ba:	bf00      	nop
    76bc:	200200ac 	.word	0x200200ac
    76c0:	20020120 	.word	0x20020120

000076c4 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
    76c4:	b510      	push	{r4, lr}
	if (!isConnected)
    76c6:	7c04      	ldrb	r4, [r0, #16]
{
    76c8:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
    76cc:	b10c      	cbz	r4, 76d2 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
    76ce:	2001      	movs	r0, #1
    76d0:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
    76d2:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
    76d4:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
    76d8:	e9c0 1300 	strd	r1, r3, [r0]
}
    76dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
    76e0:	f7ff bf88 	b.w	75f4 <AudioConnection::connect()>

000076e4 <AudioConnection::disconnect()>:
{
    76e4:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    76e6:	7c03      	ldrb	r3, [r0, #16]
    76e8:	2b00      	cmp	r3, #0
    76ea:	d036      	beq.n	775a <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    76ec:	6843      	ldr	r3, [r0, #4]
    76ee:	4604      	mov	r4, r0
    76f0:	7a42      	ldrb	r2, [r0, #9]
    76f2:	7a5b      	ldrb	r3, [r3, #9]
    76f4:	429a      	cmp	r2, r3
    76f6:	d238      	bcs.n	776a <AudioConnection::disconnect()+0x86>
	__disable_irq();
    76f8:	b672      	cpsid	i
	p = src->destination_list;
    76fa:	6801      	ldr	r1, [r0, #0]
    76fc:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
    76fe:	2b00      	cmp	r3, #0
    7700:	d02d      	beq.n	775e <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    7702:	4298      	cmp	r0, r3
    7704:	d033      	beq.n	776e <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    7706:	461a      	mov	r2, r3
    7708:	68db      	ldr	r3, [r3, #12]
    770a:	429c      	cmp	r4, r3
    770c:	d02a      	beq.n	7764 <AudioConnection::disconnect()+0x80>
		while (p)
    770e:	2b00      	cmp	r3, #0
    7710:	d1f9      	bne.n	7706 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    7712:	6862      	ldr	r2, [r4, #4]
    7714:	7a60      	ldrb	r0, [r4, #9]
    7716:	6913      	ldr	r3, [r2, #16]
    7718:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    771c:	b148      	cbz	r0, 7732 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    771e:	f7ff feed 	bl	74fc <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    7722:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    7724:	6862      	ldr	r2, [r4, #4]
    7726:	2500      	movs	r5, #0
    7728:	7a60      	ldrb	r0, [r4, #9]
    772a:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
    772c:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    772e:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    7732:	7a8b      	ldrb	r3, [r1, #10]
    7734:	3b01      	subs	r3, #1
    7736:	b2db      	uxtb	r3, r3
    7738:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    773a:	b903      	cbnz	r3, 773e <AudioConnection::disconnect()+0x5a>
		src->active = false;
    773c:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
    773e:	7a93      	ldrb	r3, [r2, #10]
    7740:	3b01      	subs	r3, #1
    7742:	b2db      	uxtb	r3, r3
    7744:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    7746:	b903      	cbnz	r3, 774a <AudioConnection::disconnect()+0x66>
		dst->active = false;
    7748:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
    774a:	4b0a      	ldr	r3, [pc, #40]	; (7774 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    774c:	2000      	movs	r0, #0
	next_dest = dst->unused;
    774e:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
    7750:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
    7752:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
    7754:	60e2      	str	r2, [r4, #12]
	__enable_irq();
    7756:	b662      	cpsie	i
}
    7758:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    775a:	2001      	movs	r0, #1
}
    775c:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
    775e:	b662      	cpsie	i
		return 3;
    7760:	2003      	movs	r0, #3
}
    7762:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    7764:	68e3      	ldr	r3, [r4, #12]
    7766:	60d3      	str	r3, [r2, #12]
				break;
    7768:	e7d3      	b.n	7712 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    776a:	2002      	movs	r0, #2
}
    776c:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    776e:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    7770:	60cb      	str	r3, [r1, #12]
    7772:	e7ce      	b.n	7712 <AudioConnection::disconnect()+0x2e>
    7774:	20020120 	.word	0x20020120

00007778 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    7778:	b510      	push	{r4, lr}
    777a:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    777c:	f7ff ffb2 	bl	76e4 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    7780:	4a09      	ldr	r2, [pc, #36]	; (77a8 <AudioConnection::~AudioConnection()+0x30>)
    7782:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    7784:	b143      	cbz	r3, 7798 <AudioConnection::~AudioConnection()+0x20>
    7786:	429c      	cmp	r4, r3
    7788:	d102      	bne.n	7790 <AudioConnection::~AudioConnection()+0x18>
    778a:	e008      	b.n	779e <AudioConnection::~AudioConnection()+0x26>
    778c:	429c      	cmp	r4, r3
    778e:	d005      	beq.n	779c <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    7790:	461a      	mov	r2, r3
    7792:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    7794:	2b00      	cmp	r3, #0
    7796:	d1f9      	bne.n	778c <AudioConnection::~AudioConnection()+0x14>
}
    7798:	4620      	mov	r0, r4
    779a:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    779c:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    779e:	68e3      	ldr	r3, [r4, #12]
}
    77a0:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    77a2:	6013      	str	r3, [r2, #0]
}
    77a4:	bd10      	pop	{r4, pc}
    77a6:	bf00      	nop
    77a8:	20020120 	.word	0x20020120

000077ac <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    77ac:	4b0c      	ldr	r3, [pc, #48]	; (77e0 <AudioStream::update_setup()+0x34>)
    77ae:	781a      	ldrb	r2, [r3, #0]
    77b0:	b99a      	cbnz	r2, 77da <AudioStream::update_setup()+0x2e>
    77b2:	4a0c      	ldr	r2, [pc, #48]	; (77e4 <AudioStream::update_setup()+0x38>)
    77b4:	490c      	ldr	r1, [pc, #48]	; (77e8 <AudioStream::update_setup()+0x3c>)
{
    77b6:	b410      	push	{r4}
    77b8:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    77bc:	480b      	ldr	r0, [pc, #44]	; (77ec <AudioStream::update_setup()+0x40>)
    77be:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
    77c0:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    77c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    77c6:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    77ca:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
    77cc:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    77ce:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
    77d2:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
    77d6:	701a      	strb	r2, [r3, #0]
}
    77d8:	4770      	bx	lr
	if (update_scheduled) return false;
    77da:	2000      	movs	r0, #0
}
    77dc:	4770      	bx	lr
    77de:	bf00      	nop
    77e0:	200225fb 	.word	0x200225fb
    77e4:	20009000 	.word	0x20009000
    77e8:	000073ed 	.word	0x000073ed
    77ec:	e000e400 	.word	0xe000e400

000077f0 <DMAChannel::begin(bool)>:
{
    77f0:	b430      	push	{r4, r5}
	__disable_irq();
    77f2:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    77f4:	b921      	cbnz	r1, 7800 <DMAChannel::begin(bool)+0x10>
    77f6:	6803      	ldr	r3, [r0, #0]
    77f8:	b113      	cbz	r3, 7800 <DMAChannel::begin(bool)+0x10>
    77fa:	7902      	ldrb	r2, [r0, #4]
    77fc:	2a0f      	cmp	r2, #15
    77fe:	d93b      	bls.n	7878 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    7800:	4c24      	ldr	r4, [pc, #144]	; (7894 <DMAChannel::begin(bool)+0xa4>)
    7802:	8821      	ldrh	r1, [r4, #0]
{
    7804:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    7806:	fa41 f203 	asr.w	r2, r1, r3
    780a:	f012 0201 	ands.w	r2, r2, #1
    780e:	d008      	beq.n	7822 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    7810:	3301      	adds	r3, #1
    7812:	2b10      	cmp	r3, #16
    7814:	d1f7      	bne.n	7806 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    7816:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    7818:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    781a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    781c:	6002      	str	r2, [r0, #0]
}
    781e:	bc30      	pop	{r4, r5}
    7820:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    7822:	f04f 0c01 	mov.w	ip, #1
    7826:	fa0c fc03 	lsl.w	ip, ip, r3
    782a:	ea41 010c 	orr.w	r1, r1, ip
    782e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    7830:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7832:	4919      	ldr	r1, [pc, #100]	; (7898 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    7834:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7838:	4c18      	ldr	r4, [pc, #96]	; (789c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    783a:	4419      	add	r1, r3
	channel = ch;
    783c:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7840:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    7842:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    7844:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    7848:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    784a:	f240 4482 	movw	r4, #1154	; 0x482
    784e:	4914      	ldr	r1, [pc, #80]	; (78a0 <DMAChannel::begin(bool)+0xb0>)
    7850:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    7852:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    7856:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    785a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    785e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7862:	6003      	str	r3, [r0, #0]
}
    7864:	bc30      	pop	{r4, r5}
	*p++ = 0;
    7866:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    786a:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    786e:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    7872:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    7876:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    7878:	4c06      	ldr	r4, [pc, #24]	; (7894 <DMAChannel::begin(bool)+0xa4>)
    787a:	8821      	ldrh	r1, [r4, #0]
    787c:	fa41 f502 	asr.w	r5, r1, r2
    7880:	07ed      	lsls	r5, r5, #31
    7882:	d5bf      	bpl.n	7804 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    7884:	4d04      	ldr	r5, [pc, #16]	; (7898 <DMAChannel::begin(bool)+0xa8>)
    7886:	4415      	add	r5, r2
    7888:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    788c:	d1ba      	bne.n	7804 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    788e:	b662      	cpsie	i
		return;
    7890:	e7c5      	b.n	781e <DMAChannel::begin(bool)+0x2e>
    7892:	bf00      	nop
    7894:	200225e8 	.word	0x200225e8
    7898:	02007480 	.word	0x02007480
    789c:	400fc000 	.word	0x400fc000
    78a0:	400e8000 	.word	0x400e8000

000078a4 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    78a4:	7903      	ldrb	r3, [r0, #4]
    78a6:	2b0f      	cmp	r3, #15
    78a8:	d811      	bhi.n	78ce <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    78aa:	4a09      	ldr	r2, [pc, #36]	; (78d0 <DMAChannel::release()+0x2c>)
    78ac:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    78ae:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    78b0:	4908      	ldr	r1, [pc, #32]	; (78d4 <DMAChannel::release()+0x30>)
    78b2:	2201      	movs	r2, #1
    78b4:	f890 c004 	ldrb.w	ip, [r0, #4]
    78b8:	880b      	ldrh	r3, [r1, #0]
    78ba:	fa02 f20c 	lsl.w	r2, r2, ip
    78be:	ea23 0302 	bic.w	r3, r3, r2
    78c2:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    78c4:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    78c6:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    78c8:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    78ca:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    78cc:	6003      	str	r3, [r0, #0]
}
    78ce:	4770      	bx	lr
    78d0:	400e8000 	.word	0x400e8000
    78d4:	200225e8 	.word	0x200225e8

000078d8 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    78d8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    78dc:	b672      	cpsid	i
	if (_triggered == false) {
    78de:	7f43      	ldrb	r3, [r0, #29]
    78e0:	b95b      	cbnz	r3, 78fa <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    78e2:	7f01      	ldrb	r1, [r0, #28]
    78e4:	2901      	cmp	r1, #1
{
    78e6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    78e8:	d00b      	beq.n	7902 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    78ea:	2903      	cmp	r1, #3
    78ec:	d013      	beq.n	7916 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    78ee:	2301      	movs	r3, #1
    78f0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    78f2:	b902      	cbnz	r2, 78f6 <EventResponder::triggerEventNotImmediate()+0x1e>
    78f4:	b662      	cpsie	i
}
    78f6:	bc30      	pop	{r4, r5}
    78f8:	4770      	bx	lr
    78fa:	b90a      	cbnz	r2, 7900 <EventResponder::triggerEventNotImmediate()+0x28>
    78fc:	b662      	cpsie	i
    78fe:	4770      	bx	lr
    7900:	4770      	bx	lr
			if (firstYield == nullptr) {
    7902:	4c12      	ldr	r4, [pc, #72]	; (794c <EventResponder::triggerEventNotImmediate()+0x74>)
    7904:	6821      	ldr	r1, [r4, #0]
    7906:	b1b1      	cbz	r1, 7936 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    7908:	4911      	ldr	r1, [pc, #68]	; (7950 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    790a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    790c:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    790e:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    7910:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7912:	6158      	str	r0, [r3, #20]
				lastYield = this;
    7914:	e7eb      	b.n	78ee <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    7916:	4d0f      	ldr	r5, [pc, #60]	; (7954 <EventResponder::triggerEventNotImmediate()+0x7c>)
    7918:	490f      	ldr	r1, [pc, #60]	; (7958 <EventResponder::triggerEventNotImmediate()+0x80>)
    791a:	682c      	ldr	r4, [r5, #0]
    791c:	b18c      	cbz	r4, 7942 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    791e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    7920:	680b      	ldr	r3, [r1, #0]
    7922:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    7924:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7926:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    792a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    792e:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7930:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    7934:	e7db      	b.n	78ee <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    7936:	4b06      	ldr	r3, [pc, #24]	; (7950 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    7938:	6020      	str	r0, [r4, #0]
				lastYield = this;
    793a:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    793c:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    7940:	e7d5      	b.n	78ee <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    7942:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    7946:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    7948:	e7ed      	b.n	7926 <EventResponder::triggerEventNotImmediate()+0x4e>
    794a:	bf00      	nop
    794c:	20020148 	.word	0x20020148
    7950:	20020154 	.word	0x20020154
    7954:	20020150 	.word	0x20020150
    7958:	2002014c 	.word	0x2002014c

0000795c <EventResponder::runFromInterrupt()>:
{
    795c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    795e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7962:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7964:	4c0c      	ldr	r4, [pc, #48]	; (7998 <EventResponder::runFromInterrupt()+0x3c>)
    7966:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7968:	b180      	cbz	r0, 798c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    796a:	4e0c      	ldr	r6, [pc, #48]	; (799c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    796c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    796e:	6943      	ldr	r3, [r0, #20]
    7970:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7972:	b173      	cbz	r3, 7992 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7974:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    7976:	b902      	cbnz	r2, 797a <EventResponder::runFromInterrupt()+0x1e>
    7978:	b662      	cpsie	i
			(*(first->_function))(*first);
    797a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    797c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    797e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7980:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7984:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7986:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7988:	2800      	cmp	r0, #0
    798a:	d1f0      	bne.n	796e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    798c:	b902      	cbnz	r2, 7990 <EventResponder::runFromInterrupt()+0x34>
    798e:	b662      	cpsie	i
}
    7990:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    7992:	6033      	str	r3, [r6, #0]
    7994:	e7ef      	b.n	7976 <EventResponder::runFromInterrupt()+0x1a>
    7996:	bf00      	nop
    7998:	20020150 	.word	0x20020150
    799c:	2002014c 	.word	0x2002014c

000079a0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    79a0:	f7ff bfdc 	b.w	795c <EventResponder::runFromInterrupt()>

000079a4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    79a4:	4904      	ldr	r1, [pc, #16]	; (79b8 <systick_isr+0x14>)
	systick_millis_count++;
    79a6:	4a05      	ldr	r2, [pc, #20]	; (79bc <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    79a8:	6849      	ldr	r1, [r1, #4]
    79aa:	4b05      	ldr	r3, [pc, #20]	; (79c0 <systick_isr+0x1c>)
    79ac:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    79ae:	6813      	ldr	r3, [r2, #0]
    79b0:	3301      	adds	r3, #1
    79b2:	6013      	str	r3, [r2, #0]
}
    79b4:	4770      	bx	lr
    79b6:	bf00      	nop
    79b8:	e0001000 	.word	0xe0001000
    79bc:	20022564 	.word	0x20022564
    79c0:	20022560 	.word	0x20022560

000079c4 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    79c4:	b510      	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    79c6:	4c13      	ldr	r4, [pc, #76]	; (7a14 <pit_isr()+0x50>)
    79c8:	6823      	ldr	r3, [r4, #0]
    79ca:	b113      	cbz	r3, 79d2 <pit_isr()+0xe>
    79cc:	4a12      	ldr	r2, [pc, #72]	; (7a18 <pit_isr()+0x54>)
    79ce:	68d1      	ldr	r1, [r2, #12]
    79d0:	b9e1      	cbnz	r1, 7a0c <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    79d2:	6863      	ldr	r3, [r4, #4]
    79d4:	b113      	cbz	r3, 79dc <pit_isr()+0x18>
    79d6:	4a10      	ldr	r2, [pc, #64]	; (7a18 <pit_isr()+0x54>)
    79d8:	69d1      	ldr	r1, [r2, #28]
    79da:	b999      	cbnz	r1, 7a04 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    79dc:	68a3      	ldr	r3, [r4, #8]
    79de:	b113      	cbz	r3, 79e6 <pit_isr()+0x22>
    79e0:	4a0d      	ldr	r2, [pc, #52]	; (7a18 <pit_isr()+0x54>)
    79e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    79e4:	b951      	cbnz	r1, 79fc <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    79e6:	68e3      	ldr	r3, [r4, #12]
    79e8:	b13b      	cbz	r3, 79fa <pit_isr()+0x36>
    79ea:	4a0b      	ldr	r2, [pc, #44]	; (7a18 <pit_isr()+0x54>)
    79ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    79ee:	b121      	cbz	r1, 79fa <pit_isr()+0x36>
    79f0:	2101      	movs	r1, #1
#endif
}
    79f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    79f6:	63d1      	str	r1, [r2, #60]	; 0x3c
    79f8:	4718      	bx	r3
}
    79fa:	bd10      	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    79fc:	2101      	movs	r1, #1
    79fe:	62d1      	str	r1, [r2, #44]	; 0x2c
    7a00:	4798      	blx	r3
    7a02:	e7f0      	b.n	79e6 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    7a04:	2101      	movs	r1, #1
    7a06:	61d1      	str	r1, [r2, #28]
    7a08:	4798      	blx	r3
    7a0a:	e7e7      	b.n	79dc <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    7a0c:	2101      	movs	r1, #1
    7a0e:	60d1      	str	r1, [r2, #12]
    7a10:	4798      	blx	r3
    7a12:	e7de      	b.n	79d2 <pit_isr()+0xe>
    7a14:	200092c0 	.word	0x200092c0
    7a18:	40084100 	.word	0x40084100

00007a1c <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    7a1c:	6803      	ldr	r3, [r0, #0]
{
    7a1e:	4684      	mov	ip, r0
    7a20:	b410      	push	{r4}
	if (channel) {
    7a22:	b373      	cbz	r3, 7a82 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    7a24:	2000      	movs	r0, #0
    7a26:	6098      	str	r0, [r3, #8]
		channel->TFLG = 1;
    7a28:	2001      	movs	r0, #1
    7a2a:	60d8      	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    7a2c:	601a      	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    7a2e:	4a23      	ldr	r2, [pc, #140]	; (7abc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    7a30:	4823      	ldr	r0, [pc, #140]	; (7ac0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    7a32:	441a      	add	r2, r3
    7a34:	4c23      	ldr	r4, [pc, #140]	; (7ac4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    7a36:	1112      	asrs	r2, r2, #4
	funct_table[index] = funct;
    7a38:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    7a3c:	2003      	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    7a3e:	4922      	ldr	r1, [pc, #136]	; (7ac8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    7a40:	6098      	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    7a42:	f89c 3004 	ldrb.w	r3, [ip, #4]
    7a46:	4821      	ldr	r0, [pc, #132]	; (7acc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    7a48:	548b      	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    7a4a:	780b      	ldrb	r3, [r1, #0]
    7a4c:	784a      	ldrb	r2, [r1, #1]
    7a4e:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    7a52:	4293      	cmp	r3, r2
    7a54:	7888      	ldrb	r0, [r1, #2]
    7a56:	bf28      	it	cs
    7a58:	4613      	movcs	r3, r2
    7a5a:	78ca      	ldrb	r2, [r1, #3]
    7a5c:	4283      	cmp	r3, r0
    7a5e:	bf28      	it	cs
    7a60:	4603      	movcs	r3, r0
    7a62:	4293      	cmp	r3, r2
    7a64:	bf28      	it	cs
    7a66:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7a68:	4c19      	ldr	r4, [pc, #100]	; (7ad0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    7a6a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7a6e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    7a72:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7a74:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
    7a78:	f85d 4b04 	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    7a7c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    7a80:	4770      	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7a82:	4814      	ldr	r0, [pc, #80]	; (7ad4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    7a84:	4c14      	ldr	r4, [pc, #80]	; (7ad8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7a86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7a88:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    7a8c:	66c3      	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    7a8e:	2001      	movs	r0, #1
    7a90:	4b12      	ldr	r3, [pc, #72]	; (7adc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    7a92:	6018      	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    7a94:	4812      	ldr	r0, [pc, #72]	; (7ae0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    7a96:	4603      	mov	r3, r0
    7a98:	f8cc 0000 	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    7a9c:	6898      	ldr	r0, [r3, #8]
    7a9e:	2800      	cmp	r0, #0
    7aa0:	d0c4      	beq.n	7a2c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    7aa2:	3310      	adds	r3, #16
    7aa4:	42a3      	cmp	r3, r4
    7aa6:	f8cc 3000 	str.w	r3, [ip]
    7aaa:	d1f7      	bne.n	7a9c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    7aac:	2300      	movs	r3, #0
}
    7aae:	f85d 4b04 	ldr.w	r4, [sp], #4
				return false;
    7ab2:	4618      	mov	r0, r3
				channel = NULL;
    7ab4:	f8cc 3000 	str.w	r3, [ip]
}
    7ab8:	4770      	bx	lr
    7aba:	bf00      	nop
    7abc:	bff7bf00 	.word	0xbff7bf00
    7ac0:	200092c0 	.word	0x200092c0
    7ac4:	000079c5 	.word	0x000079c5
    7ac8:	200088e0 	.word	0x200088e0
    7acc:	20009000 	.word	0x20009000
    7ad0:	e000e400 	.word	0xe000e400
    7ad4:	400fc000 	.word	0x400fc000
    7ad8:	40084140 	.word	0x40084140
    7adc:	40084000 	.word	0x40084000
    7ae0:	40084100 	.word	0x40084100

00007ae4 <IntervalTimer::end()>:
	if (channel) {
    7ae4:	6802      	ldr	r2, [r0, #0]
    7ae6:	b322      	cbz	r2, 7b32 <IntervalTimer::end()+0x4e>
		int index = channel - IMXRT_PIT_CHANNELS;
    7ae8:	4b12      	ldr	r3, [pc, #72]	; (7b34 <IntervalTimer::end()+0x50>)
		funct_table[index] = nullptr;
    7aea:	2100      	movs	r1, #0
		nvic_priorites[index] = 255;
    7aec:	f04f 0cff 	mov.w	ip, #255	; 0xff
		int index = channel - IMXRT_PIT_CHANNELS;
    7af0:	4413      	add	r3, r2
void IntervalTimer::end() {
    7af2:	b510      	push	{r4, lr}
		int index = channel - IMXRT_PIT_CHANNELS;
    7af4:	111b      	asrs	r3, r3, #4
		funct_table[index] = nullptr;
    7af6:	4c10      	ldr	r4, [pc, #64]	; (7b38 <IntervalTimer::end()+0x54>)
		channel->TCTRL = 0;
    7af8:	6091      	str	r1, [r2, #8]
		funct_table[index] = nullptr;
    7afa:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		channel->TFLG = 1;
    7afe:	2401      	movs	r4, #1
    7b00:	60d4      	str	r4, [r2, #12]
		nvic_priorites[index] = 255;
    7b02:	4a0e      	ldr	r2, [pc, #56]	; (7b3c <IntervalTimer::end()+0x58>)
    7b04:	f802 c003 	strb.w	ip, [r2, r3]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    7b08:	7813      	ldrb	r3, [r2, #0]
    7b0a:	f892 c001 	ldrb.w	ip, [r2, #1]
    7b0e:	f892 e002 	ldrb.w	lr, [r2, #2]
    7b12:	4563      	cmp	r3, ip
    7b14:	bf28      	it	cs
    7b16:	4663      	movcs	r3, ip
    7b18:	f892 c003 	ldrb.w	ip, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7b1c:	4a08      	ldr	r2, [pc, #32]	; (7b40 <IntervalTimer::end()+0x5c>)
    7b1e:	4573      	cmp	r3, lr
    7b20:	bf28      	it	cs
    7b22:	4673      	movcs	r3, lr
    7b24:	4563      	cmp	r3, ip
    7b26:	bf28      	it	cs
    7b28:	4663      	movcs	r3, ip
    7b2a:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
    7b2e:	6001      	str	r1, [r0, #0]
}
    7b30:	bd10      	pop	{r4, pc}
    7b32:	4770      	bx	lr
    7b34:	bff7bf00 	.word	0xbff7bf00
    7b38:	200092c0 	.word	0x200092c0
    7b3c:	200088e0 	.word	0x200088e0
    7b40:	e000e400 	.word	0xe000e400

00007b44 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7b44:	4608      	mov	r0, r1
    7b46:	f002 bb93 	b.w	a270 <usb_serial_putchar>
    7b4a:	bf00      	nop

00007b4c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    7b4c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7b4e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7b50:	bf08      	it	eq
    7b52:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7b54:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    7b56:	b391      	cbz	r1, 7bbe <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    7b58:	f04f 0e21 	mov.w	lr, #33	; 0x21
    7b5c:	e001      	b.n	7b62 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    7b5e:	fa5f fe86 	uxtb.w	lr, r6
    7b62:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    7b66:	fbb1 f5f2 	udiv	r5, r1, r2
    7b6a:	fb02 1415 	mls	r4, r2, r5, r1
    7b6e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7b72:	2c09      	cmp	r4, #9
    7b74:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    7b78:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    7b7c:	bf98      	it	ls
    7b7e:	fa5f f48c 	uxtbls.w	r4, ip
    7b82:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    7b86:	bf88      	it	hi
    7b88:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    7b8a:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7b8c:	44ec      	add	ip, sp
			n /= base;
    7b8e:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7b90:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    7b94:	d2e3      	bcs.n	7b5e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    7b96:	b14b      	cbz	r3, 7bac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    7b98:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    7b9c:	222d      	movs	r2, #45	; 0x2d
		i--;
    7b9e:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    7ba2:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    7ba6:	446b      	add	r3, sp
    7ba8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    7bac:	6803      	ldr	r3, [r0, #0]
    7bae:	a901      	add	r1, sp, #4
    7bb0:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7bb4:	685b      	ldr	r3, [r3, #4]
    7bb6:	4471      	add	r1, lr
    7bb8:	4798      	blx	r3
}
    7bba:	b00a      	add	sp, #40	; 0x28
    7bbc:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    7bbe:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7bc0:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7bc4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7bc8:	e7e5      	b.n	7b96 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    7bca:	bf00      	nop

00007bcc <Print::print(long)>:
	if (n < 0) {
    7bcc:	2900      	cmp	r1, #0
    7bce:	db03      	blt.n	7bd8 <Print::print(long)+0xc>
	uint8_t sign=0;
    7bd0:	2300      	movs	r3, #0
	if (base == 0) {
    7bd2:	220a      	movs	r2, #10
    7bd4:	f7ff bfba 	b.w	7b4c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    7bd8:	4249      	negs	r1, r1
		sign = '-';
    7bda:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    7bdc:	220a      	movs	r2, #10
    7bde:	f7ff bfb5 	b.w	7b4c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7be2:	bf00      	nop

00007be4 <Print::println()>:
{
    7be4:	b500      	push	{lr}
	return write(buf, 2);
    7be6:	6803      	ldr	r3, [r0, #0]
{
    7be8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    7bea:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    7bee:	2202      	movs	r2, #2
    7bf0:	a901      	add	r1, sp, #4
    7bf2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    7bf4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    7bf8:	4798      	blx	r3
}
    7bfa:	b003      	add	sp, #12
    7bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00007c00 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7c00:	4b05      	ldr	r3, [pc, #20]	; (7c18 <_write+0x18>)
    7c02:	2802      	cmp	r0, #2
    7c04:	bf88      	it	hi
    7c06:	4603      	movhi	r3, r0
{
    7c08:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7c0a:	681c      	ldr	r4, [r3, #0]
    7c0c:	4618      	mov	r0, r3
    7c0e:	6863      	ldr	r3, [r4, #4]
}
    7c10:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7c14:	4718      	bx	r3
    7c16:	bf00      	nop
    7c18:	200088c4 	.word	0x200088c4

00007c1c <Print::printf(char const*, ...)>:
{
    7c1c:	b40e      	push	{r1, r2, r3}
    7c1e:	b500      	push	{lr}
    7c20:	b082      	sub	sp, #8
    7c22:	aa03      	add	r2, sp, #12
    7c24:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    7c28:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    7c2a:	f004 fd1f 	bl	c66c <vdprintf>
}
    7c2e:	b002      	add	sp, #8
    7c30:	f85d eb04 	ldr.w	lr, [sp], #4
    7c34:	b003      	add	sp, #12
    7c36:	4770      	bx	lr

00007c38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7c38:	b95a      	cbnz	r2, 7c52 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    7c3a:	6803      	ldr	r3, [r0, #0]
    7c3c:	b2c9      	uxtb	r1, r1
    7c3e:	4a07      	ldr	r2, [pc, #28]	; (7c5c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	4293      	cmp	r3, r2
{
    7c44:	b500      	push	{lr}
    7c46:	d106      	bne.n	7c56 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    7c48:	4608      	mov	r0, r1
}
    7c4a:	f85d eb04 	ldr.w	lr, [sp], #4
    7c4e:	f002 bb0f 	b.w	a270 <usb_serial_putchar>
    7c52:	f7ff bf7b 	b.w	7b4c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7c56:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    7c5a:	4718      	bx	r3
    7c5c:	00007b45 	.word	0x00007b45

00007c60 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    7c60:	eeb4 0b40 	vcmp.f64	d0, d0
{
    7c64:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    7c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    7c6a:	4605      	mov	r5, r0
    7c6c:	ed2d 8b02 	vpush	{d8}
    7c70:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    7c72:	d67c      	bvs.n	7d6e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    7c74:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    7c78:	ed9f 6b47 	vldr	d6, [pc, #284]	; 7d98 <Print::printFloat(double, unsigned char)+0x138>
    7c7c:	eeb4 7b46 	vcmp.f64	d7, d6
    7c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c84:	dc6b      	bgt.n	7d5e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    7c86:	ed9f 7b46 	vldr	d7, [pc, #280]	; 7da0 <Print::printFloat(double, unsigned char)+0x140>
    7c8a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c92:	dc5a      	bgt.n	7d4a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    7c94:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7da8 <Print::printFloat(double, unsigned char)+0x148>
    7c98:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ca0:	d453      	bmi.n	7d4a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    7ca2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    7ca6:	460c      	mov	r4, r1
    7ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cac:	d45b      	bmi.n	7d66 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7cae:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7cb0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    7cb4:	2c00      	cmp	r4, #0
    7cb6:	d05e      	beq.n	7d76 <Print::printFloat(double, unsigned char)+0x116>
    7cb8:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7cbc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7db0 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7cc0:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    7cc4:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7cc8:	fa5f f28c 	uxtb.w	r2, ip
    7ccc:	42a2      	cmp	r2, r4
    7cce:	d3f7      	bcc.n	7cc0 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7cd0:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    7cd4:	220a      	movs	r2, #10
    7cd6:	4628      	mov	r0, r5
    7cd8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7cdc:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7ce0:	ee17 1a90 	vmov	r1, s15
    7ce4:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7ce8:	f7ff ff30 	bl	7b4c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7cec:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7cee:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    7cf2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    7cf6:	4606      	mov	r6, r0
		buf[0] = '.';
    7cf8:	bf28      	it	cs
    7cfa:	240f      	movcs	r4, #15
    7cfc:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7d00:	f10d 0309 	add.w	r3, sp, #9
    7d04:	aa02      	add	r2, sp, #8
    7d06:	1e61      	subs	r1, r4, #1
    7d08:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7d0c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7d10:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7d14:	edcd 7a01 	vstr	s15, [sp, #4]
    7d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7d1c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7d20:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7d22:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7d26:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7d2a:	4291      	cmp	r1, r2
			remainder -= n; 
    7d2c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7d30:	d1ec      	bne.n	7d0c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7d32:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7d34:	3401      	adds	r4, #1
		count += write(buf, count);
    7d36:	a902      	add	r1, sp, #8
    7d38:	4628      	mov	r0, r5
    7d3a:	685b      	ldr	r3, [r3, #4]
    7d3c:	b2e2      	uxtb	r2, r4
    7d3e:	4798      	blx	r3
	}
	return count;
}
    7d40:	4630      	mov	r0, r6
    7d42:	b006      	add	sp, #24
    7d44:	ecbd 8b02 	vpop	{d8}
    7d48:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7d4a:	682b      	ldr	r3, [r5, #0]
    7d4c:	2203      	movs	r2, #3
    7d4e:	491a      	ldr	r1, [pc, #104]	; (7db8 <Print::printFloat(double, unsigned char)+0x158>)
    7d50:	685b      	ldr	r3, [r3, #4]
    7d52:	b006      	add	sp, #24
    7d54:	ecbd 8b02 	vpop	{d8}
    7d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d5c:	4718      	bx	r3
    7d5e:	6803      	ldr	r3, [r0, #0]
    7d60:	2203      	movs	r2, #3
    7d62:	4916      	ldr	r1, [pc, #88]	; (7dbc <Print::printFloat(double, unsigned char)+0x15c>)
    7d64:	e7f4      	b.n	7d50 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7d66:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    7d6a:	2301      	movs	r3, #1
    7d6c:	e7a0      	b.n	7cb0 <Print::printFloat(double, unsigned char)+0x50>
    7d6e:	6803      	ldr	r3, [r0, #0]
    7d70:	2203      	movs	r2, #3
    7d72:	4913      	ldr	r1, [pc, #76]	; (7dc0 <Print::printFloat(double, unsigned char)+0x160>)
    7d74:	e7ec      	b.n	7d50 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7d76:	ee30 0b07 	vadd.f64	d0, d0, d7
    7d7a:	220a      	movs	r2, #10
    7d7c:	4628      	mov	r0, r5
    7d7e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7d82:	ee17 1a90 	vmov	r1, s15
}
    7d86:	b006      	add	sp, #24
    7d88:	ecbd 8b02 	vpop	{d8}
    7d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d90:	f7ff bedc 	b.w	7b4c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7d94:	f3af 8000 	nop.w
    7d98:	ffffffff 	.word	0xffffffff
    7d9c:	7fefffff 	.word	0x7fefffff
    7da0:	e0000000 	.word	0xe0000000
    7da4:	41efffff 	.word	0x41efffff
    7da8:	e0000000 	.word	0xe0000000
    7dac:	c1efffff 	.word	0xc1efffff
    7db0:	9999999a 	.word	0x9999999a
    7db4:	3fb99999 	.word	0x3fb99999
    7db8:	20000828 	.word	0x20000828
    7dbc:	20000824 	.word	0x20000824
    7dc0:	20000820 	.word	0x20000820

00007dc4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7dc4:	f002 ba44 	b.w	a250 <usb_serial_getchar>

00007dc8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7dc8:	f002 b9dc 	b.w	a184 <usb_serial_peekchar>

00007dcc <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7dd0:	b392      	cbz	r2, 7e38 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    7dd2:	4617      	mov	r7, r2
    7dd4:	fab3 f283 	clz	r2, r3
    7dd8:	0952      	lsrs	r2, r2, #5
    7dda:	b36b      	cbz	r3, 7e38 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7ddc:	f1b3 0801 	subs.w	r8, r3, #1
    7de0:	d025      	beq.n	7e2e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7de2:	eb07 0a08 	add.w	sl, r7, r8
    7de6:	4683      	mov	fp, r0
    7de8:	4689      	mov	r9, r1
	size_t index = 0;
    7dea:	4690      	mov	r8, r2
    7dec:	4c17      	ldr	r4, [pc, #92]	; (7e4c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7dee:	4e18      	ldr	r6, [pc, #96]	; (7e50 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7df0:	6825      	ldr	r5, [r4, #0]
    7df2:	e00b      	b.n	7e0c <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7df4:	f002 fa2c 	bl	a250 <usb_serial_getchar>
    if (c >= 0) return c;
    7df8:	2800      	cmp	r0, #0
    7dfa:	da10      	bge.n	7e1e <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7dfc:	f002 facc 	bl	a398 <yield>
    7e00:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7e02:	f8db 2008 	ldr.w	r2, [fp, #8]
    7e06:	1b5b      	subs	r3, r3, r5
    7e08:	4293      	cmp	r3, r2
    7e0a:	d21a      	bcs.n	7e42 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7e0c:	f8db 3000 	ldr.w	r3, [fp]
    7e10:	695b      	ldr	r3, [r3, #20]
    7e12:	42b3      	cmp	r3, r6
    7e14:	d0ee      	beq.n	7df4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7e16:	4658      	mov	r0, fp
    7e18:	4798      	blx	r3
    if (c >= 0) return c;
    7e1a:	2800      	cmp	r0, #0
    7e1c:	dbee      	blt.n	7dfc <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7e1e:	4548      	cmp	r0, r9
    7e20:	d005      	beq.n	7e2e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7e22:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7e26:	45ba      	cmp	sl, r7
		index++;
    7e28:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7e2c:	d1e0      	bne.n	7df0 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7e2e:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7e30:	4640      	mov	r0, r8
	*buffer = 0;
    7e32:	703b      	strb	r3, [r7, #0]
}
    7e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7e38:	f04f 0800 	mov.w	r8, #0
}
    7e3c:	4640      	mov	r0, r8
    7e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7e42:	2301      	movs	r3, #1
    7e44:	f88b 300c 	strb.w	r3, [fp, #12]
    7e48:	e7f1      	b.n	7e2e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7e4a:	bf00      	nop
    7e4c:	20022564 	.word	0x20022564
    7e50:	00007dc5 	.word	0x00007dc5

00007e54 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7e54:	49a2      	ldr	r1, [pc, #648]	; (80e0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7e56:	4ba3      	ldr	r3, [pc, #652]	; (80e4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7e58:	4288      	cmp	r0, r1
{
    7e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7e5e:	4ca2      	ldr	r4, [pc, #648]	; (80e8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7e60:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7e62:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7e64:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7e68:	d91b      	bls.n	7ea2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7e6a:	4ba0      	ldr	r3, [pc, #640]	; (80ec <set_arm_clock+0x298>)
    7e6c:	4298      	cmp	r0, r3
    7e6e:	f240 8102 	bls.w	8076 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7e72:	1ac3      	subs	r3, r0, r3
    7e74:	499e      	ldr	r1, [pc, #632]	; (80f0 <set_arm_clock+0x29c>)
    7e76:	0a1b      	lsrs	r3, r3, #8
    7e78:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e7c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7e80:	09db      	lsrs	r3, r3, #7
    7e82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7e86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7e8a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e8e:	428b      	cmp	r3, r1
    7e90:	bf28      	it	cs
    7e92:	460b      	movcs	r3, r1
    7e94:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7e98:	4b96      	ldr	r3, [pc, #600]	; (80f4 <set_arm_clock+0x2a0>)
    7e9a:	fba3 3707 	umull	r3, r7, r3, r7
    7e9e:	08ff      	lsrs	r7, r7, #3
    7ea0:	e004      	b.n	7eac <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7ea2:	4f95      	ldr	r7, [pc, #596]	; (80f8 <set_arm_clock+0x2a4>)
    7ea4:	42b8      	cmp	r0, r7
    7ea6:	bf8c      	ite	hi
    7ea8:	270e      	movhi	r7, #14
    7eaa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7eac:	498d      	ldr	r1, [pc, #564]	; (80e4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7eae:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7eb2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7eb6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7ebc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ec0:	d20c      	bcs.n	7edc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7ec2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7ec6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7eca:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7ece:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7ed2:	680b      	ldr	r3, [r1, #0]
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	dafc      	bge.n	7ed2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ed8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7edc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7ee0:	d124      	bne.n	7f2c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7ee2:	4986      	ldr	r1, [pc, #536]	; (80fc <set_arm_clock+0x2a8>)
    7ee4:	690c      	ldr	r4, [r1, #16]
    7ee6:	4986      	ldr	r1, [pc, #536]	; (8100 <set_arm_clock+0x2ac>)
    7ee8:	43a1      	bics	r1, r4
    7eea:	f000 80ea 	beq.w	80c2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7eee:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7ef2:	4634      	mov	r4, r6
    7ef4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7ef8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7efc:	d004      	beq.n	7f08 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7efe:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7f02:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7f04:	4b77      	ldr	r3, [pc, #476]	; (80e4 <set_arm_clock+0x290>)
    7f06:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7f08:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7f0c:	d007      	beq.n	7f1e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7f0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7f12:	4974      	ldr	r1, [pc, #464]	; (80e4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7f14:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7f16:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7f18:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7f1a:	071a      	lsls	r2, r3, #28
    7f1c:	d4fc      	bmi.n	7f18 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7f1e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7f22:	4a70      	ldr	r2, [pc, #448]	; (80e4 <set_arm_clock+0x290>)
    7f24:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7f26:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7f28:	069b      	lsls	r3, r3, #26
    7f2a:	d4fc      	bmi.n	7f26 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7f2c:	4c75      	ldr	r4, [pc, #468]	; (8104 <set_arm_clock+0x2b0>)
    7f2e:	42a0      	cmp	r0, r4
    7f30:	f200 80ce 	bhi.w	80d0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7f34:	f04f 0c01 	mov.w	ip, #1
    7f38:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7f3a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7f3c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7f40:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7f44:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7f48:	42a2      	cmp	r2, r4
    7f4a:	d818      	bhi.n	7f7e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7f4c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7f50:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7f54:	f040 808d 	bne.w	8072 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7f58:	f1bc 0f04 	cmp.w	ip, #4
    7f5c:	f200 8091 	bhi.w	8082 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7f60:	180a      	adds	r2, r1, r0
    7f62:	42a2      	cmp	r2, r4
    7f64:	f200 80a4 	bhi.w	80b0 <set_arm_clock+0x25c>
    7f68:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7f6c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7f6e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7f72:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7f76:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7f7a:	42a2      	cmp	r2, r4
    7f7c:	d9e6      	bls.n	7f4c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7f7e:	f10c 31ff 	add.w	r1, ip, #4294967295
    7f82:	028c      	lsls	r4, r1, #10
    7f84:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7f88:	485f      	ldr	r0, [pc, #380]	; (8108 <set_arm_clock+0x2b4>)
    7f8a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7f8c:	4a5f      	ldr	r2, [pc, #380]	; (810c <set_arm_clock+0x2b8>)
    7f8e:	4290      	cmp	r0, r2
    7f90:	d97f      	bls.n	8092 <set_arm_clock+0x23e>
    7f92:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8138 <set_arm_clock+0x2e4>
    7f96:	226c      	movs	r2, #108	; 0x6c
    7f98:	485d      	ldr	r0, [pc, #372]	; (8110 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7f9a:	4d58      	ldr	r5, [pc, #352]	; (80fc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7f9c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7fa0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7fa4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7fa8:	f8df c190 	ldr.w	ip, [pc, #400]	; 813c <set_arm_clock+0x2e8>
    7fac:	ea0e 0c0c 	and.w	ip, lr, ip
    7fb0:	45d4      	cmp	ip, sl
    7fb2:	d009      	beq.n	7fc8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7fb8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7fbc:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7fc0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7fc2:	682a      	ldr	r2, [r5, #0]
    7fc4:	2a00      	cmp	r2, #0
    7fc6:	dafc      	bge.n	7fc2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7fc8:	4a46      	ldr	r2, [pc, #280]	; (80e4 <set_arm_clock+0x290>)
    7fca:	6915      	ldr	r5, [r2, #16]
    7fcc:	f005 0507 	and.w	r5, r5, #7
    7fd0:	429d      	cmp	r5, r3
    7fd2:	d003      	beq.n	7fdc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7fd4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7fd6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7fd8:	03dd      	lsls	r5, r3, #15
    7fda:	d4fc      	bmi.n	7fd6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7fdc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7fe0:	d009      	beq.n	7ff6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7fe2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7fe6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7fea:	4a3e      	ldr	r2, [pc, #248]	; (80e4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7fec:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7fee:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7ff0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7ff2:	0799      	lsls	r1, r3, #30
    7ff4:	d4fc      	bmi.n	7ff0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7ff6:	4947      	ldr	r1, [pc, #284]	; (8114 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7ff8:	4a47      	ldr	r2, [pc, #284]	; (8118 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7ffa:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7ffc:	4291      	cmp	r1, r2
    7ffe:	d83c      	bhi.n	807a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8000:	4b46      	ldr	r3, [pc, #280]	; (811c <set_arm_clock+0x2c8>)
    8002:	09c9      	lsrs	r1, r1, #7
    8004:	fba3 3101 	umull	r3, r1, r3, r1
    8008:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    800a:	1e4b      	subs	r3, r1, #1
    800c:	021b      	lsls	r3, r3, #8
    800e:	ea86 0203 	eor.w	r2, r6, r3
    8012:	f412 7f40 	tst.w	r2, #768	; 0x300
    8016:	d006      	beq.n	8026 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8018:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    801c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    8020:	4a30      	ldr	r2, [pc, #192]	; (80e4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8022:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    8024:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8026:	4a2f      	ldr	r2, [pc, #188]	; (80e4 <set_arm_clock+0x290>)
    8028:	6953      	ldr	r3, [r2, #20]
    802a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    802e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8030:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8032:	069b      	lsls	r3, r3, #26
    8034:	d4fc      	bmi.n	8030 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8036:	4b3a      	ldr	r3, [pc, #232]	; (8120 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8038:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    803a:	fba3 2300 	umull	r2, r3, r3, r0
    803e:	f04f 32ff 	mov.w	r2, #4294967295
    8042:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    8046:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    804a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    804e:	4a35      	ldr	r2, [pc, #212]	; (8124 <set_arm_clock+0x2d0>)
    8050:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    8052:	4a35      	ldr	r2, [pc, #212]	; (8128 <set_arm_clock+0x2d4>)
    8054:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8056:	4a35      	ldr	r2, [pc, #212]	; (812c <set_arm_clock+0x2d8>)
    8058:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    805a:	d208      	bcs.n	806e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    805c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8060:	4a21      	ldr	r2, [pc, #132]	; (80e8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8062:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    8066:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8068:	6813      	ldr	r3, [r2, #0]
    806a:	2b00      	cmp	r3, #0
    806c:	dafc      	bge.n	8068 <set_arm_clock+0x214>
	}

	return frequency;
}
    806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8072:	4673      	mov	r3, lr
    8074:	e762      	b.n	7f3c <set_arm_clock+0xe8>
    8076:	2712      	movs	r7, #18
    8078:	e718      	b.n	7eac <set_arm_clock+0x58>
    807a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    807e:	2104      	movs	r1, #4
    8080:	e7c5      	b.n	800e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8082:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8086:	4820      	ldr	r0, [pc, #128]	; (8108 <set_arm_clock+0x2b4>)
    8088:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    808a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    808c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    808e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8092:	4a27      	ldr	r2, [pc, #156]	; (8130 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    8094:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8140 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8098:	fba2 2000 	umull	r2, r0, r2, r0
    809c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    809e:	4825      	ldr	r0, [pc, #148]	; (8134 <set_arm_clock+0x2e0>)
    80a0:	2a36      	cmp	r2, #54	; 0x36
    80a2:	bf38      	it	cc
    80a4:	2236      	movcc	r2, #54	; 0x36
    80a6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    80aa:	ea42 0a0a 	orr.w	sl, r2, sl
    80ae:	e774      	b.n	7f9a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    80b0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    80b4:	2300      	movs	r3, #0
    80b6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    80ba:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    80be:	46ac      	mov	ip, r5
    80c0:	e762      	b.n	7f88 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    80c2:	461d      	mov	r5, r3
    80c4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    80c8:	4611      	mov	r1, r2
    80ca:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    80ce:	e713      	b.n	7ef8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    80d0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    80d2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    80d6:	4602      	mov	r2, r0
    80d8:	4631      	mov	r1, r6
    80da:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    80dc:	46e6      	mov	lr, ip
    80de:	e753      	b.n	7f88 <set_arm_clock+0x134>
    80e0:	1f78a400 	.word	0x1f78a400
    80e4:	400fc000 	.word	0x400fc000
    80e8:	40080000 	.word	0x40080000
    80ec:	23c34600 	.word	0x23c34600
    80f0:	004cb223 	.word	0x004cb223
    80f4:	51eb851f 	.word	0x51eb851f
    80f8:	016e3600 	.word	0x016e3600
    80fc:	400d8000 	.word	0x400d8000
    8100:	80003040 	.word	0x80003040
    8104:	269fb1ff 	.word	0x269fb1ff
    8108:	005b8d80 	.word	0x005b8d80
    810c:	4df67eff 	.word	0x4df67eff
    8110:	4d3f6400 	.word	0x4d3f6400
    8114:	08f0d17f 	.word	0x08f0d17f
    8118:	2cb4177f 	.word	0x2cb4177f
    811c:	00e5109f 	.word	0x00e5109f
    8120:	431bde83 	.word	0x431bde83
    8124:	200088c0 	.word	0x200088c0
    8128:	200088bc 	.word	0x200088bc
    812c:	20022090 	.word	0x20022090
    8130:	165e9f81 	.word	0x165e9f81
    8134:	00b71b00 	.word	0x00b71b00
    8138:	8000206c 	.word	0x8000206c
    813c:	8001307f 	.word	0x8001307f
    8140:	80002000 	.word	0x80002000

00008144 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    8144:	b900      	cbnz	r0, 8148 <delay+0x4>
    8146:	4770      	bx	lr
{
    8148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    814c:	2101      	movs	r1, #1
    814e:	4681      	mov	r9, r0
    8150:	4c21      	ldr	r4, [pc, #132]	; (81d8 <delay+0x94>)
    8152:	4d22      	ldr	r5, [pc, #136]	; (81dc <delay+0x98>)
    8154:	4e22      	ldr	r6, [pc, #136]	; (81e0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8156:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    815a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    815c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    815e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8162:	2b00      	cmp	r3, #0
    8164:	d1f7      	bne.n	8156 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8166:	491f      	ldr	r1, [pc, #124]	; (81e4 <delay+0xa0>)
    8168:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    816a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    816e:	f8df a078 	ldr.w	sl, [pc, #120]	; 81e8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    8172:	1a1b      	subs	r3, r3, r0
    8174:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    8176:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    817a:	f8da 2000 	ldr.w	r2, [sl]
    817e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    8182:	455a      	cmp	r2, fp
    8184:	bf94      	ite	ls
    8186:	4490      	addls	r8, r2
    8188:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    818a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    818e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8190:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8192:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8196:	2b00      	cmp	r3, #0
    8198:	d1f7      	bne.n	818a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    819a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    819c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    81a0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    81a2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    81a6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    81aa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    81ae:	bf94      	ite	ls
    81b0:	4462      	addls	r2, ip
    81b2:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    81b6:	eba2 0208 	sub.w	r2, r2, r8
    81ba:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    81be:	d306      	bcc.n	81ce <delay+0x8a>
			if (--msec == 0) return;
    81c0:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    81c4:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    81c8:	d1df      	bne.n	818a <delay+0x46>
}
    81ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    81ce:	f002 f8e3 	bl	a398 <yield>
		while ((micros() - start) >= 1000) {
    81d2:	4904      	ldr	r1, [pc, #16]	; (81e4 <delay+0xa0>)
    81d4:	e7d9      	b.n	818a <delay+0x46>
    81d6:	bf00      	nop
    81d8:	20022568 	.word	0x20022568
    81dc:	20022564 	.word	0x20022564
    81e0:	20022560 	.word	0x20022560
    81e4:	e0001000 	.word	0xe0001000
    81e8:	20022090 	.word	0x20022090

000081ec <micros>:
{
    81ec:	b430      	push	{r4, r5}
    81ee:	4b0f      	ldr	r3, [pc, #60]	; (822c <micros+0x40>)
    81f0:	f04f 0c01 	mov.w	ip, #1
    81f4:	4d0e      	ldr	r5, [pc, #56]	; (8230 <micros+0x44>)
    81f6:	4c0f      	ldr	r4, [pc, #60]	; (8234 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    81f8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    81fc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    81fe:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8200:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    8204:	2a00      	cmp	r2, #0
    8206:	d1f7      	bne.n	81f8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8208:	4b0b      	ldr	r3, [pc, #44]	; (8238 <micros+0x4c>)
    820a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    820c:	4a0b      	ldr	r2, [pc, #44]	; (823c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    820e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    8210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8214:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    8216:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    821a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    821e:	bc30      	pop	{r4, r5}
    8220:	428a      	cmp	r2, r1
    8222:	bf94      	ite	ls
    8224:	1880      	addls	r0, r0, r2
    8226:	1840      	addhi	r0, r0, r1
    8228:	4770      	bx	lr
    822a:	bf00      	nop
    822c:	20022568 	.word	0x20022568
    8230:	20022564 	.word	0x20022564
    8234:	20022560 	.word	0x20022560
    8238:	e0001000 	.word	0xe0001000
    823c:	20022090 	.word	0x20022090

00008240 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    8240:	2836      	cmp	r0, #54	; 0x36
    8242:	d816      	bhi.n	8272 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    8244:	0102      	lsls	r2, r0, #4
    8246:	4b10      	ldr	r3, [pc, #64]	; (8288 <digitalWrite+0x48>)
    8248:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    824c:	589b      	ldr	r3, [r3, r2]
{
    824e:	b410      	push	{r4}
	mask = p->mask;
    8250:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    8252:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    8254:	4214      	tst	r4, r2
    8256:	d005      	beq.n	8264 <digitalWrite+0x24>
		if (val) {
    8258:	b961      	cbnz	r1, 8274 <digitalWrite+0x34>
		}
	}
}
    825a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    825e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    8262:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8264:	6883      	ldr	r3, [r0, #8]
		if (val) {
    8266:	b151      	cbz	r1, 827e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8268:	4a08      	ldr	r2, [pc, #32]	; (828c <digitalWrite+0x4c>)
}
    826a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    826e:	601a      	str	r2, [r3, #0]
}
    8270:	4770      	bx	lr
    8272:	4770      	bx	lr
    8274:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    8278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    827c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    827e:	4a04      	ldr	r2, [pc, #16]	; (8290 <digitalWrite+0x50>)
}
    8280:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8284:	601a      	str	r2, [r3, #0]
}
    8286:	4770      	bx	lr
    8288:	20007964 	.word	0x20007964
    828c:	0001f038 	.word	0x0001f038
    8290:	00013038 	.word	0x00013038

00008294 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8294:	2836      	cmp	r0, #54	; 0x36
    8296:	d829      	bhi.n	82ec <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8298:	4b16      	ldr	r3, [pc, #88]	; (82f4 <pinMode+0x60>)
    829a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    829c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    829e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    82a2:	589a      	ldr	r2, [r3, r2]
{
    82a4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    82a6:	6853      	ldr	r3, [r2, #4]
    82a8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    82aa:	d00e      	beq.n	82ca <pinMode+0x36>
    82ac:	2904      	cmp	r1, #4
    82ae:	d00c      	beq.n	82ca <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    82b0:	ea23 0304 	bic.w	r3, r3, r4
    82b4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    82b6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    82b8:	b1a9      	cbz	r1, 82e6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    82ba:	2902      	cmp	r1, #2
    82bc:	d017      	beq.n	82ee <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    82be:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    82c0:	bf0c      	ite	eq
    82c2:	4a0d      	ldreq	r2, [pc, #52]	; (82f8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    82c4:	4a0d      	ldrne	r2, [pc, #52]	; (82fc <pinMode+0x68>)
    82c6:	601a      	str	r2, [r3, #0]
    82c8:	e007      	b.n	82da <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    82ca:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    82cc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    82ce:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    82d0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    82d2:	d008      	beq.n	82e6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    82d4:	f640 0238 	movw	r2, #2104	; 0x838
    82d8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    82da:	6843      	ldr	r3, [r0, #4]
    82dc:	2215      	movs	r2, #21
}
    82de:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    82e2:	601a      	str	r2, [r3, #0]
}
    82e4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    82e6:	2238      	movs	r2, #56	; 0x38
    82e8:	601a      	str	r2, [r3, #0]
    82ea:	e7f6      	b.n	82da <pinMode+0x46>
    82ec:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    82ee:	4a04      	ldr	r2, [pc, #16]	; (8300 <pinMode+0x6c>)
    82f0:	601a      	str	r2, [r3, #0]
    82f2:	e7f2      	b.n	82da <pinMode+0x46>
    82f4:	20007964 	.word	0x20007964
    82f8:	00013038 	.word	0x00013038
    82fc:	00010038 	.word	0x00010038
    8300:	0001f038 	.word	0x0001f038

00008304 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8304:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8306:	f7f8 f86d 	bl	3e4 <setup>
	while (1) {
		loop();
    830a:	f7f7 feaf 	bl	6c <loop>
		yield();
    830e:	f002 f843 	bl	a398 <yield>
	while (1) {
    8312:	e7fa      	b.n	830a <main+0x6>

00008314 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8314:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8316:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    831a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    831e:	d16d      	bne.n	83fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8320:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8322:	d341      	bcc.n	83a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8324:	f851 3b04 	ldr.w	r3, [r1], #4
    8328:	f840 3b04 	str.w	r3, [r0], #4
    832c:	f851 3b04 	ldr.w	r3, [r1], #4
    8330:	f840 3b04 	str.w	r3, [r0], #4
    8334:	f851 3b04 	ldr.w	r3, [r1], #4
    8338:	f840 3b04 	str.w	r3, [r0], #4
    833c:	f851 3b04 	ldr.w	r3, [r1], #4
    8340:	f840 3b04 	str.w	r3, [r0], #4
    8344:	f851 3b04 	ldr.w	r3, [r1], #4
    8348:	f840 3b04 	str.w	r3, [r0], #4
    834c:	f851 3b04 	ldr.w	r3, [r1], #4
    8350:	f840 3b04 	str.w	r3, [r0], #4
    8354:	f851 3b04 	ldr.w	r3, [r1], #4
    8358:	f840 3b04 	str.w	r3, [r0], #4
    835c:	f851 3b04 	ldr.w	r3, [r1], #4
    8360:	f840 3b04 	str.w	r3, [r0], #4
    8364:	f851 3b04 	ldr.w	r3, [r1], #4
    8368:	f840 3b04 	str.w	r3, [r0], #4
    836c:	f851 3b04 	ldr.w	r3, [r1], #4
    8370:	f840 3b04 	str.w	r3, [r0], #4
    8374:	f851 3b04 	ldr.w	r3, [r1], #4
    8378:	f840 3b04 	str.w	r3, [r0], #4
    837c:	f851 3b04 	ldr.w	r3, [r1], #4
    8380:	f840 3b04 	str.w	r3, [r0], #4
    8384:	f851 3b04 	ldr.w	r3, [r1], #4
    8388:	f840 3b04 	str.w	r3, [r0], #4
    838c:	f851 3b04 	ldr.w	r3, [r1], #4
    8390:	f840 3b04 	str.w	r3, [r0], #4
    8394:	f851 3b04 	ldr.w	r3, [r1], #4
    8398:	f840 3b04 	str.w	r3, [r0], #4
    839c:	f851 3b04 	ldr.w	r3, [r1], #4
    83a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    83a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    83a6:	d2bd      	bcs.n	8324 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    83a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    83aa:	d311      	bcc.n	83d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    83ac:	f851 3b04 	ldr.w	r3, [r1], #4
    83b0:	f840 3b04 	str.w	r3, [r0], #4
    83b4:	f851 3b04 	ldr.w	r3, [r1], #4
    83b8:	f840 3b04 	str.w	r3, [r0], #4
    83bc:	f851 3b04 	ldr.w	r3, [r1], #4
    83c0:	f840 3b04 	str.w	r3, [r0], #4
    83c4:	f851 3b04 	ldr.w	r3, [r1], #4
    83c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    83cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    83ce:	d2ed      	bcs.n	83ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    83d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    83d2:	d305      	bcc.n	83e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    83d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    83d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    83dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    83de:	d2f9      	bcs.n	83d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    83e0:	3204      	adds	r2, #4
	beq	.Ldone
    83e2:	d008      	beq.n	83f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    83e4:	07d2      	lsls	r2, r2, #31
	itt ne
    83e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    83e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    83ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    83f0:	d301      	bcc.n	83f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    83f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    83f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    83f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    83f8:	4770      	bx	lr
    83fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    83fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    83fe:	d313      	bcc.n	8428 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8400:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8402:	d08d      	beq.n	8320 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8404:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8408:	d08a      	beq.n	8320 <memcpy+0xc>

	rsb	r3, #4
    840a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    840e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8410:	07db      	lsls	r3, r3, #31
	itt ne
    8412:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8414:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8418:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    841c:	d380      	bcc.n	8320 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    841e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8422:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8426:	e77b      	b.n	8320 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8428:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    842a:	d3d9      	bcc.n	83e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    842c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    842e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8432:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8436:	d2f9      	bcs.n	842c <memcpy+0x118>

	ldrb	r3, [r1]
    8438:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    843a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    843c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    843e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8440:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8442:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8444:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8446:	4770      	bx	lr

00008448 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    8448:	f002 bac4 	b.w	a9d4 <malloc>

0000844c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    844c:	f002 baca 	b.w	a9e4 <free>

00008450 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    8450:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8454:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    8456:	4666      	mov	r6, ip
	int i=0, j;
    8458:	2400      	movs	r4, #0
    845a:	e000      	b.n	845e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    845c:	3401      	adds	r4, #1
		digit = val % radix;
    845e:	fbb0 f5f2 	udiv	r5, r0, r2
    8462:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8466:	2b09      	cmp	r3, #9
    8468:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    846c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8470:	fa5f fe8e 	uxtb.w	lr, lr
    8474:	bf98      	it	ls
    8476:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    847a:	4290      	cmp	r0, r2
		val /= radix;
    847c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    847e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    8482:	d2eb      	bcs.n	845c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    8484:	1c63      	adds	r3, r4, #1
    8486:	2200      	movs	r2, #0
    8488:	18c8      	adds	r0, r1, r3
    848a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    848c:	b17c      	cbz	r4, 84ae <ultoa+0x5e>
		t = buf[j];
    848e:	4662      	mov	r2, ip
    8490:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8494:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8498:	eba1 030c 	sub.w	r3, r1, ip
    849c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    849e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    84a2:	3b01      	subs	r3, #1
    84a4:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    84a6:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    84a8:	4423      	add	r3, r4
    84aa:	429a      	cmp	r2, r3
    84ac:	dbef      	blt.n	848e <ultoa+0x3e>
	}
	return buf;
}
    84ae:	4608      	mov	r0, r1
    84b0:	bd70      	pop	{r4, r5, r6, pc}
    84b2:	bf00      	nop

000084b4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    84b4:	4a07      	ldr	r2, [pc, #28]	; (84d4 <rtc_get+0x20>)
    84b6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    84b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    84ba:	4619      	mov	r1, r3
    84bc:	4684      	mov	ip, r0
    84be:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    84c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    84c2:	4299      	cmp	r1, r3
    84c4:	d1f9      	bne.n	84ba <rtc_get+0x6>
    84c6:	4584      	cmp	ip, r0
    84c8:	d1f7      	bne.n	84ba <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    84ca:	0bdb      	lsrs	r3, r3, #15
}
    84cc:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    84d0:	4770      	bx	lr
    84d2:	bf00      	nop
    84d4:	400d4000 	.word	0x400d4000

000084d8 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    84d8:	4910      	ldr	r1, [pc, #64]	; (851c <rtc_set+0x44>)
    84da:	688b      	ldr	r3, [r1, #8]
    84dc:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    84e0:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    84e2:	688b      	ldr	r3, [r1, #8]
    84e4:	07db      	lsls	r3, r3, #31
    84e6:	d4fc      	bmi.n	84e2 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    84e8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    84ea:	4a0c      	ldr	r2, [pc, #48]	; (851c <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    84ec:	f023 0301 	bic.w	r3, r3, #1
    84f0:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    84f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    84f4:	07d9      	lsls	r1, r3, #31
    84f6:	d4fc      	bmi.n	84f2 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    84f8:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    84fa:	4908      	ldr	r1, [pc, #32]	; (851c <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    84fc:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    84fe:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    8500:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    8502:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8504:	f043 0301 	orr.w	r3, r3, #1
    8508:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    850a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    850c:	07db      	lsls	r3, r3, #31
    850e:	d5fc      	bpl.n	850a <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    8510:	688b      	ldr	r3, [r1, #8]
    8512:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    8516:	608b      	str	r3, [r1, #8]
}
    8518:	4770      	bx	lr
    851a:	bf00      	nop
    851c:	400d4000 	.word	0x400d4000

00008520 <unused_interrupt_vector>:
	__disable_irq();
    8520:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    8522:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    8526:	4c4f      	ldr	r4, [pc, #316]	; (8664 <unused_interrupt_vector+0x144>)
    8528:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    852c:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    8530:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8534:	4e4c      	ldr	r6, [pc, #304]	; (8668 <unused_interrupt_vector+0x148>)
	while (p < end) {
    8536:	4d4d      	ldr	r5, [pc, #308]	; (866c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    8538:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    853c:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    8540:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8544:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8548:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    854c:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    8550:	6993      	ldr	r3, [r2, #24]
    8552:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8556:	69d3      	ldr	r3, [r2, #28]
    8558:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    855c:	f000 f8d2 	bl	8704 <tempmonGetTemp>
    8560:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8564:	f7ff ffa6 	bl	84b4 <rtc_get>
	info->len = sizeof(*info) / 4;
    8568:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    856a:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    856e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    8572:	460b      	mov	r3, r1
    8574:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8578:	493d      	ldr	r1, [pc, #244]	; (8670 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    857a:	1d30      	adds	r0, r6, #4
    857c:	405a      	eors	r2, r3
    857e:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8580:	f002 0301 	and.w	r3, r2, #1
    8584:	3c01      	subs	r4, #1
    8586:	fb01 f303 	mul.w	r3, r1, r3
    858a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    858e:	d1f7      	bne.n	8580 <unused_interrupt_vector+0x60>
	while (p < end) {
    8590:	42a8      	cmp	r0, r5
    8592:	d002      	beq.n	859a <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    8594:	6873      	ldr	r3, [r6, #4]
    8596:	4606      	mov	r6, r0
    8598:	e7ef      	b.n	857a <unused_interrupt_vector+0x5a>
	info->crc = crc;
    859a:	4b32      	ldr	r3, [pc, #200]	; (8664 <unused_interrupt_vector+0x144>)
    859c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    85a0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    85a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    85a8:	492f      	ldr	r1, [pc, #188]	; (8668 <unused_interrupt_vector+0x148>)
    85aa:	4a32      	ldr	r2, [pc, #200]	; (8674 <unused_interrupt_vector+0x154>)
    85ac:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    85b0:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    85b4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    85b8:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    85bc:	4a2e      	ldr	r2, [pc, #184]	; (8678 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    85be:	2502      	movs	r5, #2
    85c0:	482e      	ldr	r0, [pc, #184]	; (867c <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    85c2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    85c4:	492e      	ldr	r1, [pc, #184]	; (8680 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    85c6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    85ca:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    85cc:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    85ce:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    85d0:	482c      	ldr	r0, [pc, #176]	; (8684 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    85d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    85d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    85da:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    85dc:	680b      	ldr	r3, [r1, #0]
    85de:	4283      	cmp	r3, r0
    85e0:	d83d      	bhi.n	865e <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    85e2:	4d26      	ldr	r5, [pc, #152]	; (867c <unused_interrupt_vector+0x15c>)
    85e4:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    85e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    85ea:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    85ee:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    85f0:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    85f2:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    85f6:	4924      	ldr	r1, [pc, #144]	; (8688 <unused_interrupt_vector+0x168>)
    85f8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    85fc:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    8600:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    8604:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8608:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    860c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    8610:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    8614:	e001      	b.n	861a <unused_interrupt_vector+0xfa>
		usb_isr();
    8616:	f000 f9cb 	bl	89b0 <usb_isr>
		if (PIT_TFLG0) {
    861a:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    861e:	2b00      	cmp	r3, #0
    8620:	d0f9      	beq.n	8616 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    8622:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    8624:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8628:	2c4f      	cmp	r4, #79	; 0x4f
    862a:	d9f4      	bls.n	8616 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    862c:	4b17      	ldr	r3, [pc, #92]	; (868c <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    862e:	2002      	movs	r0, #2
    8630:	4917      	ldr	r1, [pc, #92]	; (8690 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    8636:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    863a:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    863c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8640:	b93b      	cbnz	r3, 8652 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    8642:	4814      	ldr	r0, [pc, #80]	; (8694 <unused_interrupt_vector+0x174>)
    8644:	4914      	ldr	r1, [pc, #80]	; (8698 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8646:	4a0d      	ldr	r2, [pc, #52]	; (867c <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8648:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    864a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    864e:	2b00      	cmp	r3, #0
    8650:	d0fa      	beq.n	8648 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    8652:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8656:	4a11      	ldr	r2, [pc, #68]	; (869c <unused_interrupt_vector+0x17c>)
    8658:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    865c:	e7fe      	b.n	865c <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    865e:	f7ff fbf9 	bl	7e54 <set_arm_clock>
    8662:	e7be      	b.n	85e2 <unused_interrupt_vector+0xc2>
    8664:	2027ff00 	.word	0x2027ff00
    8668:	2027ff80 	.word	0x2027ff80
    866c:	2027ffa8 	.word	0x2027ffa8
    8670:	edb88320 	.word	0xedb88320
    8674:	2027ffa0 	.word	0x2027ffa0
    8678:	400fc000 	.word	0x400fc000
    867c:	40084000 	.word	0x40084000
    8680:	200088c0 	.word	0x200088c0
    8684:	0bcd3d80 	.word	0x0bcd3d80
    8688:	00249f00 	.word	0x00249f00
    868c:	400d9000 	.word	0x400d9000
    8690:	402e0000 	.word	0x402e0000
    8694:	400f8000 	.word	0x400f8000
    8698:	0bad00f1 	.word	0x0bad00f1
    869c:	05fa0004 	.word	0x05fa0004

000086a0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    86a0:	490a      	ldr	r1, [pc, #40]	; (86cc <_sbrk+0x2c>)
    86a2:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    86a4:	b138      	cbz	r0, 86b6 <_sbrk+0x16>
{
    86a6:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    86a8:	1813      	adds	r3, r2, r0
    86aa:	4809      	ldr	r0, [pc, #36]	; (86d0 <_sbrk+0x30>)
    86ac:	4283      	cmp	r3, r0
    86ae:	d804      	bhi.n	86ba <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    86b0:	4610      	mov	r0, r2
                __brkval = prev + incr;
    86b2:	600b      	str	r3, [r1, #0]
}
    86b4:	bd08      	pop	{r3, pc}
    86b6:	4610      	mov	r0, r2
    86b8:	4770      	bx	lr
                        errno = ENOMEM;
    86ba:	f004 f9f9 	bl	cab0 <__errno>
    86be:	230c      	movs	r3, #12
                        return (void *)-1;
    86c0:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    86c4:	6003      	str	r3, [r0, #0]
}
    86c6:	4610      	mov	r0, r2
    86c8:	bd08      	pop	{r3, pc}
    86ca:	bf00      	nop
    86cc:	200088ec 	.word	0x200088ec
    86d0:	20280000 	.word	0x20280000

000086d4 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    86d4:	2000      	movs	r0, #0
    86d6:	4770      	bx	lr

000086d8 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    86d8:	f04f 30ff 	mov.w	r0, #4294967295
    86dc:	4770      	bx	lr
    86de:	bf00      	nop

000086e0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    86e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    86e4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    86e6:	604b      	str	r3, [r1, #4]
}
    86e8:	4770      	bx	lr
    86ea:	bf00      	nop

000086ec <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    86ec:	2001      	movs	r0, #1
    86ee:	4770      	bx	lr

000086f0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    86f0:	f04f 30ff 	mov.w	r0, #4294967295
    86f4:	4770      	bx	lr
    86f6:	bf00      	nop

000086f8 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    86f8:	bf30      	wfi
    86fa:	e7fd      	b.n	86f8 <__cxa_pure_virtual>

000086fc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    86fc:	bf30      	wfi
    86fe:	e7fd      	b.n	86fc <abort>

00008700 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8700:	f7ff bf0e 	b.w	8520 <unused_interrupt_vector>

00008704 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    8704:	4a12      	ldr	r2, [pc, #72]	; (8750 <tempmonGetTemp+0x4c>)
    8706:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    870a:	075b      	lsls	r3, r3, #29
    870c:	d5fb      	bpl.n	8706 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    870e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8712:	4810      	ldr	r0, [pc, #64]	; (8754 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8714:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8718:	490f      	ldr	r1, [pc, #60]	; (8758 <tempmonGetTemp+0x54>)
    871a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    871e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8722:	ed91 6a00 	vldr	s12, [r1]
    8726:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    872a:	4a0c      	ldr	r2, [pc, #48]	; (875c <tempmonGetTemp+0x58>)
    872c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8730:	4b0b      	ldr	r3, [pc, #44]	; (8760 <tempmonGetTemp+0x5c>)
    8732:	edd2 6a00 	vldr	s13, [r2]
    8736:	ee77 7ac7 	vsub.f32	s15, s15, s14
    873a:	ed93 7a00 	vldr	s14, [r3]
    873e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8742:	ee67 7a86 	vmul.f32	s15, s15, s12
    8746:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    874a:	ee37 0a40 	vsub.f32	s0, s14, s0
    874e:	4770      	bx	lr
    8750:	400d8100 	.word	0x400d8100
    8754:	20022080 	.word	0x20022080
    8758:	20022088 	.word	0x20022088
    875c:	2002208c 	.word	0x2002208c
    8760:	20022084 	.word	0x20022084

00008764 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    8764:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    8766:	2900      	cmp	r1, #0
    8768:	d131      	bne.n	87ce <endpoint0_receive+0x6a>
    876a:	4c2b      	ldr	r4, [pc, #172]	; (8818 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    876c:	4b2b      	ldr	r3, [pc, #172]	; (881c <endpoint0_receive+0xb8>)
    876e:	2101      	movs	r1, #1
    8770:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8772:	b1da      	cbz	r2, 87ac <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8774:	492a      	ldr	r1, [pc, #168]	; (8820 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    8776:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8778:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    877c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8780:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8782:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    8784:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8788:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    878c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    8790:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8794:	4313      	orrs	r3, r2
    8796:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    879a:	4b22      	ldr	r3, [pc, #136]	; (8824 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    879c:	4920      	ldr	r1, [pc, #128]	; (8820 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    879e:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    87a0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    87a4:	2b00      	cmp	r3, #0
    87a6:	d1fb      	bne.n	87a0 <endpoint0_receive+0x3c>
}
    87a8:	bc30      	pop	{r4, r5}
    87aa:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    87ac:	491c      	ldr	r1, [pc, #112]	; (8820 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    87ae:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    87b0:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    87b4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    87b6:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    87b8:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    87bc:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    87c0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    87c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    87c8:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    87cc:	e7e5      	b.n	879a <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    87ce:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    87d0:	4b15      	ldr	r3, [pc, #84]	; (8828 <endpoint0_receive+0xc4>)
    87d2:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    87d4:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    87d6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    87da:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    87dc:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    87de:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    87e0:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    87e4:	4c0c      	ldr	r4, [pc, #48]	; (8818 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    87e6:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    87e8:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    87ec:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    87ee:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    87f0:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    87f4:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    87f8:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    87fa:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    87fc:	4908      	ldr	r1, [pc, #32]	; (8820 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    87fe:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    8800:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8804:	f043 0301 	orr.w	r3, r3, #1
    8808:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    880c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    8810:	2b00      	cmp	r3, #0
    8812:	d1fb      	bne.n	880c <endpoint0_receive+0xa8>
    8814:	e7aa      	b.n	876c <endpoint0_receive+0x8>
    8816:	bf00      	nop
    8818:	20000000 	.word	0x20000000
    881c:	200092e0 	.word	0x200092e0
    8820:	402e0000 	.word	0x402e0000
    8824:	200216dc 	.word	0x200216dc
    8828:	20009300 	.word	0x20009300

0000882c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    882c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    882e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8830:	b11b      	cbz	r3, 883a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8832:	6853      	ldr	r3, [r2, #4]
    8834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8838:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    883a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    883c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    883e:	b33c      	cbz	r4, 8890 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8840:	4b1a      	ldr	r3, [pc, #104]	; (88ac <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    8842:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8844:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8848:	420c      	tst	r4, r1
    884a:	d11d      	bne.n	8888 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    884c:	4e18      	ldr	r6, [pc, #96]	; (88b0 <schedule_transfer+0x84>)
    884e:	6877      	ldr	r7, [r6, #4]
    8850:	e004      	b.n	885c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8852:	6874      	ldr	r4, [r6, #4]
    8854:	1be4      	subs	r4, r4, r7
    8856:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    885a:	d20b      	bcs.n	8874 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    885c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8860:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    8864:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8868:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    886c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8870:	0464      	lsls	r4, r4, #17
    8872:	d5ee      	bpl.n	8852 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8874:	400d      	ands	r5, r1
    8876:	d107      	bne.n	8888 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8878:	4c0c      	ldr	r4, [pc, #48]	; (88ac <schedule_transfer+0x80>)
		endpoint->status = 0;
    887a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    887e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8882:	430b      	orrs	r3, r1
    8884:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8888:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    888a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    888c:	bcf0      	pop	{r4, r5, r6, r7}
    888e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8890:	4d06      	ldr	r5, [pc, #24]	; (88ac <schedule_transfer+0x80>)
	endpoint->status = 0;
    8892:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    8896:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    889a:	430b      	orrs	r3, r1
    889c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    88a0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    88a2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    88a4:	b662      	cpsie	i
}
    88a6:	bcf0      	pop	{r4, r5, r6, r7}
    88a8:	4770      	bx	lr
    88aa:	bf00      	nop
    88ac:	402e0000 	.word	0x402e0000
    88b0:	e0001000 	.word	0xe0001000

000088b4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    88b4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    88b6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    88b8:	b19d      	cbz	r5, 88e2 <run_callbacks+0x2e>
    88ba:	4606      	mov	r6, r0
    88bc:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    88be:	2400      	movs	r4, #0
    88c0:	e003      	b.n	88ca <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    88c2:	6812      	ldr	r2, [r2, #0]
		count++;
    88c4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    88c6:	2a01      	cmp	r2, #1
    88c8:	d00c      	beq.n	88e4 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    88ca:	6853      	ldr	r3, [r2, #4]
    88cc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    88d0:	d0f7      	beq.n	88c2 <run_callbacks+0xe>
			ep->first_transfer = t;
    88d2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    88d4:	b12c      	cbz	r4, 88e2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    88d6:	4628      	mov	r0, r5
		ep->callback_function(first);
    88d8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    88da:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    88dc:	4798      	blx	r3
	while (count) {
    88de:	3c01      	subs	r4, #1
    88e0:	d1f9      	bne.n	88d6 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    88e2:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    88e4:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    88e8:	e7f4      	b.n	88d4 <run_callbacks+0x20>
    88ea:	bf00      	nop

000088ec <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    88ec:	b430      	push	{r4, r5}
	if (len > 0) {
    88ee:	b9d9      	cbnz	r1, 8928 <endpoint0_transmit.constprop.0+0x3c>
    88f0:	4c1f      	ldr	r4, [pc, #124]	; (8970 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    88f2:	4b20      	ldr	r3, [pc, #128]	; (8974 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    88f4:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88f6:	4a20      	ldr	r2, [pc, #128]	; (8978 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    88f8:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88fa:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    88fe:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8900:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    8902:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8906:	2480      	movs	r4, #128	; 0x80
    8908:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    890a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    890e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8912:	481a      	ldr	r0, [pc, #104]	; (897c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8914:	432b      	orrs	r3, r5
    8916:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    891a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    891c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8920:	2b00      	cmp	r3, #0
    8922:	d1fb      	bne.n	891c <endpoint0_transmit.constprop.0+0x30>
}
    8924:	bc30      	pop	{r4, r5}
    8926:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8928:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    892a:	4b15      	ldr	r3, [pc, #84]	; (8980 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    892c:	4c10      	ldr	r4, [pc, #64]	; (8970 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    892e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8930:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8934:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8936:	4a10      	ldr	r2, [pc, #64]	; (8978 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8938:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    893a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    893e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8940:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8942:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8946:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8948:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    894a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    894e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8952:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    8954:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8956:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8958:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    895a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    895e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8962:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8966:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    896a:	2b00      	cmp	r3, #0
    896c:	d1fb      	bne.n	8966 <endpoint0_transmit.constprop.0+0x7a>
    896e:	e7c0      	b.n	88f2 <endpoint0_transmit.constprop.0+0x6>
    8970:	20000000 	.word	0x20000000
    8974:	200092e0 	.word	0x200092e0
    8978:	402e0000 	.word	0x402e0000
    897c:	200216dc 	.word	0x200216dc
    8980:	20009300 	.word	0x20009300

00008984 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    8984:	4908      	ldr	r1, [pc, #32]	; (89a8 <usb_stop_sof_interrupts+0x24>)
    8986:	2201      	movs	r2, #1
    8988:	780b      	ldrb	r3, [r1, #0]
    898a:	fa02 f000 	lsl.w	r0, r2, r0
    898e:	ea23 0000 	bic.w	r0, r3, r0
    8992:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    8994:	b930      	cbnz	r0, 89a4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8996:	4a05      	ldr	r2, [pc, #20]	; (89ac <usb_stop_sof_interrupts+0x28>)
    8998:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    899c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    89a0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    89a4:	4770      	bx	lr
    89a6:	bf00      	nop
    89a8:	20022608 	.word	0x20022608
    89ac:	402e0000 	.word	0x402e0000

000089b0 <usb_isr>:
{
    89b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    89b4:	4ca8      	ldr	r4, [pc, #672]	; (8c58 <usb_isr+0x2a8>)
{
    89b6:	b087      	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    89b8:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    89bc:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    89be:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    89c2:	f140 809c 	bpl.w	8afe <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    89c6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    89ca:	2b00      	cmp	r3, #0
    89cc:	d063      	beq.n	8a96 <usb_isr+0xe6>
    89ce:	4da3      	ldr	r5, [pc, #652]	; (8c5c <usb_isr+0x2ac>)
    89d0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8c64 <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    89d4:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8c84 <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    89d8:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8c88 <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    89dc:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    89e0:	e9d5 700a 	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    89e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    89e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    89ec:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    89f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    89f4:	049b      	lsls	r3, r3, #18
    89f6:	d5f5      	bpl.n	89e4 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    89f8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    89fc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8a04:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8a08:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8a0c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    8a10:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    8a14:	d1fa      	bne.n	8a0c <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    8a16:	b2ba      	uxth	r2, r7
    8a18:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    8a1c:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    8a20:	e9cd 7004 	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    8a24:	f000 81b2 	beq.w	8d8c <usb_isr+0x3dc>
    8a28:	f200 80c3 	bhi.w	8bb2 <usb_isr+0x202>
    8a2c:	f240 3102 	movw	r1, #770	; 0x302
    8a30:	428a      	cmp	r2, r1
    8a32:	f000 8226 	beq.w	8e82 <usb_isr+0x4d2>
    8a36:	f240 80dd 	bls.w	8bf4 <usb_isr+0x244>
    8a3a:	f240 6181 	movw	r1, #1665	; 0x681
    8a3e:	428a      	cmp	r2, r1
    8a40:	f200 80ac 	bhi.w	8b9c <usb_isr+0x1ec>
    8a44:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    8a48:	f080 81d5 	bcs.w	8df6 <usb_isr+0x446>
    8a4c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    8a50:	f040 809e 	bne.w	8b90 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    8a54:	4a82      	ldr	r2, [pc, #520]	; (8c60 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    8a56:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8a58:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    8a5a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a5c:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8a5e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a60:	2380      	movs	r3, #128	; 0x80
    8a62:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a64:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a68:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a6c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a74:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8a78:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	d1fb      	bne.n	8a78 <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8a80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    8a84:	065b      	lsls	r3, r3, #25
    8a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8a8a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8a8e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8a92:	2b00      	cmp	r3, #0
    8a94:	d1a2      	bne.n	89dc <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8a96:	4b70      	ldr	r3, [pc, #448]	; (8c58 <usb_isr+0x2a8>)
    8a98:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    8a9c:	b37c      	cbz	r4, 8afe <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    8a9e:	4a71      	ldr	r2, [pc, #452]	; (8c64 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    8aa0:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8aa4:	6811      	ldr	r1, [r2, #0]
    8aa6:	420c      	tst	r4, r1
    8aa8:	f040 8288 	bne.w	8fbc <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    8aac:	4b6e      	ldr	r3, [pc, #440]	; (8c68 <usb_isr+0x2b8>)
    8aae:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    8ab0:	401c      	ands	r4, r3
    8ab2:	d024      	beq.n	8afe <usb_isr+0x14e>
				while (tx) {
    8ab4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    8ab8:	d010      	beq.n	8adc <usb_isr+0x12c>
    8aba:	4d68      	ldr	r5, [pc, #416]	; (8c5c <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    8abc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8ac0:	fa98 f7a8 	rbit	r7, r8
    8ac4:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8ac8:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    8acc:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8ad0:	3040      	adds	r0, #64	; 0x40
    8ad2:	f7ff feef 	bl	88b4 <run_callbacks>
				while (tx) {
    8ad6:	ea38 0807 	bics.w	r8, r8, r7
    8ada:	d1f1      	bne.n	8ac0 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    8adc:	b2a4      	uxth	r4, r4
				while(rx) {
    8ade:	b174      	cbz	r4, 8afe <usb_isr+0x14e>
    8ae0:	4d5e      	ldr	r5, [pc, #376]	; (8c5c <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    8ae2:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    8ae6:	fa94 f7a4 	rbit	r7, r4
    8aea:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8aee:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    8af2:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8af6:	f7ff fedd 	bl	88b4 <run_callbacks>
				while(rx) {
    8afa:	43bc      	bics	r4, r7
    8afc:	d1f3      	bne.n	8ae6 <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    8afe:	0672      	lsls	r2, r6, #25
    8b00:	d516      	bpl.n	8b30 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8b02:	4b55      	ldr	r3, [pc, #340]	; (8c58 <usb_isr+0x2a8>)
    8b04:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    8b08:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8b0c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    8b10:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8b14:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8b18:	2c00      	cmp	r4, #0
    8b1a:	d1fb      	bne.n	8b14 <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8b1c:	f04f 32ff 	mov.w	r2, #4294967295
    8b20:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8b24:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    8b28:	f001 fa44 	bl	9fb4 <usb_serial_reset>
		endpointN_notify_mask = 0;
    8b2c:	4b4e      	ldr	r3, [pc, #312]	; (8c68 <usb_isr+0x2b8>)
    8b2e:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    8b30:	01f4      	lsls	r4, r6, #7
    8b32:	d503      	bpl.n	8b3c <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8b34:	4b4d      	ldr	r3, [pc, #308]	; (8c6c <usb_isr+0x2bc>)
    8b36:	681b      	ldr	r3, [r3, #0]
    8b38:	b103      	cbz	r3, 8b3c <usb_isr+0x18c>
    8b3a:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    8b3c:	01b0      	lsls	r0, r6, #6
    8b3e:	d503      	bpl.n	8b48 <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8b40:	4b4b      	ldr	r3, [pc, #300]	; (8c70 <usb_isr+0x2c0>)
    8b42:	681b      	ldr	r3, [r3, #0]
    8b44:	b103      	cbz	r3, 8b48 <usb_isr+0x198>
    8b46:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    8b48:	0771      	lsls	r1, r6, #29
    8b4a:	d509      	bpl.n	8b60 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8b4c:	4b42      	ldr	r3, [pc, #264]	; (8c58 <usb_isr+0x2a8>)
    8b4e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8b52:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    8b56:	f000 8110 	beq.w	8d7a <usb_isr+0x3ca>
			usb_high_speed = 1;
    8b5a:	4b46      	ldr	r3, [pc, #280]	; (8c74 <usb_isr+0x2c4>)
    8b5c:	2201      	movs	r2, #1
    8b5e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8b60:	4b3d      	ldr	r3, [pc, #244]	; (8c58 <usb_isr+0x2a8>)
    8b62:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8b66:	061a      	lsls	r2, r3, #24
    8b68:	d50f      	bpl.n	8b8a <usb_isr+0x1da>
    8b6a:	0633      	lsls	r3, r6, #24
    8b6c:	d50d      	bpl.n	8b8a <usb_isr+0x1da>
		if (usb_reboot_timer) {
    8b6e:	4a42      	ldr	r2, [pc, #264]	; (8c78 <usb_isr+0x2c8>)
    8b70:	7813      	ldrb	r3, [r2, #0]
    8b72:	b12b      	cbz	r3, 8b80 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    8b74:	3b01      	subs	r3, #1
    8b76:	b2db      	uxtb	r3, r3
    8b78:	7013      	strb	r3, [r2, #0]
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	f000 8299 	beq.w	90b2 <usb_isr+0x702>
}
    8b80:	b007      	add	sp, #28
    8b82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    8b86:	f001 b815 	b.w	9bb4 <usb_midi_flush_output>
}
    8b8a:	b007      	add	sp, #28
    8b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    8b90:	d97c      	bls.n	8c8c <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8b92:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b96:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    8b9a:	e778      	b.n	8a8e <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8b9c:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    8ba0:	d1f7      	bne.n	8b92 <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    8ba2:	4836      	ldr	r0, [pc, #216]	; (8c7c <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8ba4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8ba6:	f89b 3000 	ldrb.w	r3, [fp]
    8baa:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8bac:	f7ff fe9e 	bl	88ec <endpoint0_transmit.constprop.0>
		return;
    8bb0:	e76d      	b.n	8a8e <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8bb2:	f242 2121 	movw	r1, #8737	; 0x2221
    8bb6:	428a      	cmp	r2, r1
    8bb8:	f000 81d3 	beq.w	8f62 <usb_isr+0x5b2>
    8bbc:	f240 8099 	bls.w	8cf2 <usb_isr+0x342>
    8bc0:	f248 11a2 	movw	r1, #33186	; 0x81a2
    8bc4:	428a      	cmp	r2, r1
    8bc6:	f000 81bf 	beq.w	8f48 <usb_isr+0x598>
    8bca:	d976      	bls.n	8cba <usb_isr+0x30a>
    8bcc:	f248 43a1 	movw	r3, #33953	; 0x84a1
    8bd0:	429a      	cmp	r2, r3
    8bd2:	f040 80b6 	bne.w	8d42 <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    8bd6:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
    8bda:	d2da      	bcs.n	8b92 <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    8bdc:	aa03      	add	r2, sp, #12
    8bde:	4928      	ldr	r1, [pc, #160]	; (8c80 <usb_isr+0x2d0>)
    8be0:	a804      	add	r0, sp, #16
    8be2:	f000 fe9b 	bl	991c <usb_audio_get_feature>
    8be6:	2800      	cmp	r0, #0
    8be8:	d0d3      	beq.n	8b92 <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    8bea:	9903      	ldr	r1, [sp, #12]
    8bec:	4824      	ldr	r0, [pc, #144]	; (8c80 <usb_isr+0x2d0>)
    8bee:	f7ff fe7d 	bl	88ec <endpoint0_transmit.constprop.0>
				return;
    8bf2:	e74c      	b.n	8a8e <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8bf4:	2a82      	cmp	r2, #130	; 0x82
    8bf6:	f000 8191 	beq.w	8f1c <usb_isr+0x56c>
    8bfa:	f240 80b5 	bls.w	8d68 <usb_isr+0x3b8>
    8bfe:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    8c02:	f040 80a6 	bne.w	8d52 <usb_isr+0x3a2>
		if (endpoint > 7) break;
    8c06:	f010 0f78 	tst.w	r0, #120	; 0x78
    8c0a:	b283      	uxth	r3, r0
    8c0c:	d1c1      	bne.n	8b92 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8c12:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8c16:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8c1a:	bf14      	ite	ne
    8c1c:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8c20:	f023 0301 	biceq.w	r3, r3, #1
    8c24:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8c28:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8c2a:	4b0d      	ldr	r3, [pc, #52]	; (8c60 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    8c2c:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8c2e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8c30:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8c32:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8c34:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c36:	2280      	movs	r2, #128	; 0x80
    8c38:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c3a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8c3e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8c42:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8c4a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8c4e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8c52:	2b00      	cmp	r3, #0
    8c54:	d1fb      	bne.n	8c4e <usb_isr+0x29e>
    8c56:	e71a      	b.n	8a8e <usb_isr+0xde>
    8c58:	402e0000 	.word	0x402e0000
    8c5c:	20000000 	.word	0x20000000
    8c60:	200092e0 	.word	0x200092e0
    8c64:	200216dc 	.word	0x200216dc
    8c68:	200216e0 	.word	0x200216e0
    8c6c:	200225cc 	.word	0x200225cc
    8c70:	200225d0 	.word	0x200225d0
    8c74:	20022615 	.word	0x20022615
    8c78:	20022616 	.word	0x20022616
    8c7c:	20022024 	.word	0x20022024
    8c80:	200216d4 	.word	0x200216d4
    8c84:	20022614 	.word	0x20022614
    8c88:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    8c8c:	f240 3321 	movw	r3, #801	; 0x321
    8c90:	429a      	cmp	r2, r3
    8c92:	d004      	beq.n	8c9e <usb_isr+0x2ee>
    8c94:	f240 4321 	movw	r3, #1057	; 0x421
    8c98:	429a      	cmp	r2, r3
    8c9a:	f47f af7a 	bne.w	8b92 <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    8c9e:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
    8ca2:	ea4f 4110 	mov.w	r1, r0, lsr #16
    8ca6:	f4bf af74 	bcs.w	8b92 <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    8caa:	4bb5      	ldr	r3, [pc, #724]	; (8f80 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    8cac:	2201      	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    8cae:	e9c3 7000 	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    8cb2:	48b4      	ldr	r0, [pc, #720]	; (8f84 <usb_isr+0x5d4>)
    8cb4:	f7ff fd56 	bl	8764 <endpoint0_receive>
			return; // handle these after ACK
    8cb8:	e6e9      	b.n	8a8e <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8cba:	f242 3321 	movw	r3, #8993	; 0x2321
    8cbe:	429a      	cmp	r2, r3
    8cc0:	d125      	bne.n	8d0e <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    8cc2:	4bb1      	ldr	r3, [pc, #708]	; (8f88 <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    8cc4:	2200      	movs	r2, #0
    8cc6:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    8cc8:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8cca:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8ccc:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8cce:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8cd0:	2280      	movs	r2, #128	; 0x80
    8cd2:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8cd4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8cd8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8cdc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8ce4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8ce8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8cec:	2b00      	cmp	r3, #0
    8cee:	d1fb      	bne.n	8ce8 <usb_isr+0x338>
    8cf0:	e6cd      	b.n	8a8e <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8cf2:	f640 3101 	movw	r1, #2817	; 0xb01
    8cf6:	428a      	cmp	r2, r1
    8cf8:	f000 80ed 	beq.w	8ed6 <usb_isr+0x526>
    8cfc:	f242 0321 	movw	r3, #8225	; 0x2021
    8d00:	429a      	cmp	r2, r3
    8d02:	d10a      	bne.n	8d1a <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    8d04:	0c01      	lsrs	r1, r0, #16
    8d06:	2907      	cmp	r1, #7
    8d08:	f47f af43 	bne.w	8b92 <usb_isr+0x1e2>
    8d0c:	e7cd      	b.n	8caa <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    8d0e:	f248 13a1 	movw	r3, #33185	; 0x81a1
    8d12:	429a      	cmp	r2, r3
    8d14:	f43f af5f 	beq.w	8bd6 <usb_isr+0x226>
    8d18:	e73b      	b.n	8b92 <usb_isr+0x1e2>
    8d1a:	f640 2381 	movw	r3, #2689	; 0xa81
    8d1e:	429a      	cmp	r2, r3
    8d20:	f47f af37 	bne.w	8b92 <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    8d24:	b280      	uxth	r0, r0
    8d26:	2804      	cmp	r0, #4
    8d28:	f000 81ba 	beq.w	90a0 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    8d2c:	2805      	cmp	r0, #5
    8d2e:	f47f af30 	bne.w	8b92 <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8d32:	4b96      	ldr	r3, [pc, #600]	; (8f8c <usb_isr+0x5dc>)
    8d34:	781b      	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8d36:	2101      	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8d38:	4892      	ldr	r0, [pc, #584]	; (8f84 <usb_isr+0x5d4>)
    8d3a:	7003      	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8d3c:	f7ff fdd6 	bl	88ec <endpoint0_transmit.constprop.0>
			return;
    8d40:	e6a5      	b.n	8a8e <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8d46:	f248 23a1 	movw	r3, #33441	; 0x82a1
    8d4a:	429a      	cmp	r2, r3
    8d4c:	f43f af43 	beq.w	8bd6 <usb_isr+0x226>
    8d50:	e71f      	b.n	8b92 <usb_isr+0x1e2>
    8d52:	f4ff af1e 	bcc.w	8b92 <usb_isr+0x1e2>
    8d56:	f240 1321 	movw	r3, #289	; 0x121
    8d5a:	429a      	cmp	r2, r3
    8d5c:	d09f      	beq.n	8c9e <usb_isr+0x2ee>
    8d5e:	f240 2321 	movw	r3, #545	; 0x221
    8d62:	429a      	cmp	r2, r3
    8d64:	d09b      	beq.n	8c9e <usb_isr+0x2ee>
    8d66:	e714      	b.n	8b92 <usb_isr+0x1e2>
    8d68:	2a80      	cmp	r2, #128	; 0x80
    8d6a:	f47f af12 	bne.w	8b92 <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    8d6e:	4888      	ldr	r0, [pc, #544]	; (8f90 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    8d70:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    8d72:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8d74:	f7ff fdba 	bl	88ec <endpoint0_transmit.constprop.0>
		return;
    8d78:	e689      	b.n	8a8e <usb_isr+0xde>
			usb_high_speed = 0;
    8d7a:	4a86      	ldr	r2, [pc, #536]	; (8f94 <usb_isr+0x5e4>)
    8d7c:	7013      	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8d7e:	4b86      	ldr	r3, [pc, #536]	; (8f98 <usb_isr+0x5e8>)
    8d80:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8d84:	061a      	lsls	r2, r3, #24
    8d86:	f57f af00 	bpl.w	8b8a <usb_isr+0x1da>
    8d8a:	e6ee      	b.n	8b6a <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8d8c:	4983      	ldr	r1, [pc, #524]	; (8f9c <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    8d8e:	f3c7 4c07 	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8d92:	f04f 12c8 	mov.w	r2, #13107400	; 0xc800c8
    8d96:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    8d98:	f88b c000 	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8d9c:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8da0:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8da4:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8da8:	f04f 12c4 	mov.w	r2, #12845252	; 0xc400c4
    8dac:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    8db0:	3ac2      	subs	r2, #194	; 0xc2
    8db2:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    8db6:	f001 f8ff 	bl	9fb8 <usb_serial_configure>
		usb_midi_configure();
    8dba:	f000 fe99 	bl	9af0 <usb_midi_configure>
		usb_audio_configure();
    8dbe:	f000 fd39 	bl	9834 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    8dc2:	4a71      	ldr	r2, [pc, #452]	; (8f88 <usb_isr+0x5d8>)
    8dc4:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8dc6:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8dc8:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8dca:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8dcc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8dce:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8dd0:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8dd2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    8dd6:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8dd8:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8ddc:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    8de0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    8de4:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8de8:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    8dec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8df0:	2b00      	cmp	r3, #0
    8df2:	d1fb      	bne.n	8dec <usb_isr+0x43c>
    8df4:	e64b      	b.n	8a8e <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8df6:	4b6a      	ldr	r3, [pc, #424]	; (8fa0 <usb_isr+0x5f0>)
    8df8:	6859      	ldr	r1, [r3, #4]
    8dfa:	2900      	cmp	r1, #0
    8dfc:	f43f aec9 	beq.w	8b92 <usb_isr+0x1e2>
    8e00:	ea4f 4c17 	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8e04:	fa1f fe80 	uxth.w	lr, r0
    8e08:	e004      	b.n	8e14 <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8e0a:	6919      	ldr	r1, [r3, #16]
    8e0c:	330c      	adds	r3, #12
    8e0e:	2900      	cmp	r1, #0
    8e10:	f43f aebf 	beq.w	8b92 <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8e14:	881a      	ldrh	r2, [r3, #0]
    8e16:	4562      	cmp	r2, ip
    8e18:	d1f7      	bne.n	8e0a <usb_isr+0x45a>
    8e1a:	885a      	ldrh	r2, [r3, #2]
    8e1c:	4572      	cmp	r2, lr
    8e1e:	d1f4      	bne.n	8e0a <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    8e20:	ea4f 221c 	mov.w	r2, ip, lsr #8
    8e24:	2a03      	cmp	r2, #3
    8e26:	f000 80e2 	beq.w	8fee <usb_isr+0x63e>
					datalen = list->length;
    8e2a:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    8e2c:	0c00      	lsrs	r0, r0, #16
    8e2e:	4282      	cmp	r2, r0
    8e30:	bf28      	it	cs
    8e32:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    8e34:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
    8e38:	4617      	mov	r7, r2
    8e3a:	f040 80de 	bne.w	8ffa <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    8e3e:	4b55      	ldr	r3, [pc, #340]	; (8f94 <usb_isr+0x5e4>)
    8e40:	4958      	ldr	r1, [pc, #352]	; (8fa4 <usb_isr+0x5f4>)
    8e42:	7818      	ldrb	r0, [r3, #0]
    8e44:	4b58      	ldr	r3, [pc, #352]	; (8fa8 <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8e46:	f8df a164 	ldr.w	sl, [pc, #356]	; 8fac <usb_isr+0x5fc>
    8e4a:	2800      	cmp	r0, #0
    8e4c:	bf18      	it	ne
    8e4e:	4619      	movne	r1, r3
    8e50:	4856      	ldr	r0, [pc, #344]	; (8fac <usb_isr+0x5fc>)
    8e52:	f7ff fa5f 	bl	8314 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8e56:	f02a 031f 	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8e5a:	eb0a 0107 	add.w	r1, sl, r7
	asm("dsb");
    8e5e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8e62:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    8e66:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    8e6a:	3320      	adds	r3, #32
	} while (location < end_addr);
    8e6c:	4299      	cmp	r1, r3
    8e6e:	d8fa      	bhi.n	8e66 <usb_isr+0x4b6>
	asm("dsb");
    8e70:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8e74:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8e78:	484c      	ldr	r0, [pc, #304]	; (8fac <usb_isr+0x5fc>)
    8e7a:	4639      	mov	r1, r7
    8e7c:	f7ff fd36 	bl	88ec <endpoint0_transmit.constprop.0>
				return;
    8e80:	e605      	b.n	8a8e <usb_isr+0xde>
		if (endpoint > 7) break;
    8e82:	f010 0f78 	tst.w	r0, #120	; 0x78
    8e86:	b283      	uxth	r3, r0
    8e88:	f47f ae83 	bne.w	8b92 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8e90:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8e94:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8e98:	bf14      	ite	ne
    8e9a:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8e9e:	f043 0301 	orreq.w	r3, r3, #1
    8ea2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8ea6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8ea8:	4b37      	ldr	r3, [pc, #220]	; (8f88 <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    8eaa:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8eac:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8eae:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8eb0:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8eb2:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8eb4:	2280      	movs	r2, #128	; 0x80
    8eb6:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8eb8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8ebc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8ec0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8ec8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8ecc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d1fb      	bne.n	8ecc <usb_isr+0x51c>
    8ed4:	e5db      	b.n	8a8e <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    8ed6:	b280      	uxth	r0, r0
    8ed8:	2804      	cmp	r0, #4
    8eda:	f000 80c5 	beq.w	9068 <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    8ede:	2805      	cmp	r0, #5
    8ee0:	f47f ae57 	bne.w	8b92 <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    8ee4:	4a28      	ldr	r2, [pc, #160]	; (8f88 <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    8ee6:	f3c7 4c0f 	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    8eea:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8eec:	6093      	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    8eee:	4b27      	ldr	r3, [pc, #156]	; (8f8c <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8ef0:	64aa      	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    8ef2:	f883 c000 	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    8ef6:	2301      	movs	r3, #1
    8ef8:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8efa:	2380      	movs	r3, #128	; 0x80
    8efc:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8efe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8f02:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8f06:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8f0e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8f12:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8f16:	2b00      	cmp	r3, #0
    8f18:	d1fb      	bne.n	8f12 <usb_isr+0x562>
    8f1a:	e5b8      	b.n	8a8e <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    8f1c:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8f1e:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8f22:	f47f ae36 	bne.w	8b92 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8f2a:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8f2e:	4a18      	ldr	r2, [pc, #96]	; (8f90 <usb_isr+0x5e0>)
    8f30:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8f32:	0618      	lsls	r0, r3, #24
    8f34:	d458      	bmi.n	8fe8 <usb_isr+0x638>
    8f36:	07cf      	lsls	r7, r1, #31
    8f38:	d501      	bpl.n	8f3e <usb_isr+0x58e>
			reply_buffer[0] = 1;
    8f3a:	2301      	movs	r3, #1
    8f3c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8f3e:	2102      	movs	r1, #2
    8f40:	4813      	ldr	r0, [pc, #76]	; (8f90 <usb_isr+0x5e0>)
    8f42:	f7ff fcd3 	bl	88ec <endpoint0_transmit.constprop.0>
		return;
    8f46:	e5a2      	b.n	8a8e <usb_isr+0xde>
		if (setup.wLength >= 3) {
    8f48:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
    8f4c:	f4ff ae21 	bcc.w	8b92 <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    8f50:	480c      	ldr	r0, [pc, #48]	; (8f84 <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    8f52:	2103      	movs	r1, #3
			endpoint0_buffer[2] = 0;
    8f54:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    8f56:	f64a 4344 	movw	r3, #44100	; 0xac44
    8f5a:	8003      	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    8f5c:	f7ff fcc6 	bl	88ec <endpoint0_transmit.constprop.0>
			return;
    8f60:	e595      	b.n	8a8e <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8f62:	b280      	uxth	r0, r0
    8f64:	2800      	cmp	r0, #0
    8f66:	f47f aeac 	bne.w	8cc2 <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8f6a:	4b11      	ldr	r3, [pc, #68]	; (8fb0 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8f6c:	f3c7 4c07 	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8f70:	681a      	ldr	r2, [r3, #0]
    8f72:	4b10      	ldr	r3, [pc, #64]	; (8fb4 <usb_isr+0x604>)
    8f74:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8f76:	4b10      	ldr	r3, [pc, #64]	; (8fb8 <usb_isr+0x608>)
    8f78:	f883 c000 	strb.w	ip, [r3]
    8f7c:	e6a1      	b.n	8cc2 <usb_isr+0x312>
    8f7e:	bf00      	nop
    8f80:	2000c6f8 	.word	0x2000c6f8
    8f84:	200216d4 	.word	0x200216d4
    8f88:	200092e0 	.word	0x200092e0
    8f8c:	2002260f 	.word	0x2002260f
    8f90:	20022024 	.word	0x20022024
    8f94:	20022615 	.word	0x20022615
    8f98:	402e0000 	.word	0x402e0000
    8f9c:	00cc0002 	.word	0x00cc0002
    8fa0:	20008708 	.word	0x20008708
    8fa4:	60002888 	.word	0x60002888
    8fa8:	600029e0 	.word	0x600029e0
    8fac:	202009c0 	.word	0x202009c0
    8fb0:	20022564 	.word	0x20022564
    8fb4:	200225c8 	.word	0x200225c8
    8fb8:	20022613 	.word	0x20022613
				endpoint0_notify_mask = 0;
    8fbc:	2100      	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8fbe:	f242 0021 	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    8fc2:	6011      	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8fc4:	493d      	ldr	r1, [pc, #244]	; (90bc <usb_isr+0x70c>)
    8fc6:	e9d1 2100 	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8fca:	b295      	uxth	r5, r2
    8fcc:	4285      	cmp	r5, r0
    8fce:	d028      	beq.n	9022 <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    8fd0:	4b3b      	ldr	r3, [pc, #236]	; (90c0 <usb_isr+0x710>)
    8fd2:	429a      	cmp	r2, r3
    8fd4:	d003      	beq.n	8fde <usb_isr+0x62e>
    8fd6:	4b3b      	ldr	r3, [pc, #236]	; (90c4 <usb_isr+0x714>)
    8fd8:	429a      	cmp	r2, r3
    8fda:	f47f ad67 	bne.w	8aac <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    8fde:	493a      	ldr	r1, [pc, #232]	; (90c8 <usb_isr+0x718>)
    8fe0:	4836      	ldr	r0, [pc, #216]	; (90bc <usb_isr+0x70c>)
    8fe2:	f000 fccd 	bl	9980 <usb_audio_set_feature>
    8fe6:	e561      	b.n	8aac <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8fe8:	03cb      	lsls	r3, r1, #15
    8fea:	d4a6      	bmi.n	8f3a <usb_isr+0x58a>
    8fec:	e7a7      	b.n	8f3e <usb_isr+0x58e>
					datalen = *(list->addr);
    8fee:	780a      	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    8ff0:	0c00      	lsrs	r0, r0, #16
    8ff2:	4282      	cmp	r2, r0
    8ff4:	bf28      	it	cs
    8ff6:	4602      	movcs	r2, r0
    8ff8:	4617      	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    8ffa:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
    8ffe:	d151      	bne.n	90a4 <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9000:	4b32      	ldr	r3, [pc, #200]	; (90cc <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9002:	463a      	mov	r2, r7
    9004:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90ec <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9008:	7818      	ldrb	r0, [r3, #0]
    900a:	4931      	ldr	r1, [pc, #196]	; (90d0 <usb_isr+0x720>)
    900c:	4b31      	ldr	r3, [pc, #196]	; (90d4 <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    900e:	2800      	cmp	r0, #0
    9010:	bf18      	it	ne
    9012:	4619      	movne	r1, r3
    9014:	4650      	mov	r0, sl
    9016:	f7ff f97d 	bl	8314 <memcpy>
					usb_descriptor_buffer[1] = 7;
    901a:	2307      	movs	r3, #7
    901c:	f88a 3001 	strb.w	r3, [sl, #1]
    9020:	e719      	b.n	8e56 <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9022:	b289      	uxth	r1, r1
    9024:	2900      	cmp	r1, #0
    9026:	d1d3      	bne.n	8fd0 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9028:	4927      	ldr	r1, [pc, #156]	; (90c8 <usb_isr+0x718>)
    902a:	4d2b      	ldr	r5, [pc, #172]	; (90d8 <usb_isr+0x728>)
    902c:	c903      	ldmia	r1, {r0, r1}
    902e:	80a9      	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    9030:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9032:	ea4f 4111 	mov.w	r1, r1, lsr #16
    9036:	6028      	str	r0, [r5, #0]
    9038:	71a9      	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    903a:	d1c9      	bne.n	8fd0 <usb_isr+0x620>
	__disable_irq();
    903c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    903e:	4827      	ldr	r0, [pc, #156]	; (90dc <usb_isr+0x72c>)
    9040:	7801      	ldrb	r1, [r0, #0]
    9042:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9046:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9048:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    904c:	060d      	lsls	r5, r1, #24
    904e:	d406      	bmi.n	905e <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9050:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9054:	2080      	movs	r0, #128	; 0x80
    9056:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    905a:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    905e:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9060:	4b1f      	ldr	r3, [pc, #124]	; (90e0 <usb_isr+0x730>)
    9062:	2150      	movs	r1, #80	; 0x50
    9064:	7019      	strb	r1, [r3, #0]
    9066:	e7b3      	b.n	8fd0 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    9068:	4a1e      	ldr	r2, [pc, #120]	; (90e4 <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    906a:	f3c7 4c0f 	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    906e:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9070:	6093      	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    9072:	4b1d      	ldr	r3, [pc, #116]	; (90e8 <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9074:	64aa      	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    9076:	f883 c000 	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    907a:	2301      	movs	r3, #1
    907c:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    907e:	2380      	movs	r3, #128	; 0x80
    9080:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9082:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9086:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    908a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    908e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9092:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9096:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    909a:	2b00      	cmp	r3, #0
    909c:	d1fb      	bne.n	9096 <usb_isr+0x6e6>
    909e:	e4f6      	b.n	8a8e <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    90a0:	4b11      	ldr	r3, [pc, #68]	; (90e8 <usb_isr+0x738>)
    90a2:	e647      	b.n	8d34 <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    90a4:	f8df a044 	ldr.w	sl, [pc, #68]	; 90ec <usb_isr+0x73c>
    90a8:	463a      	mov	r2, r7
    90aa:	4650      	mov	r0, sl
    90ac:	f7ff f932 	bl	8314 <memcpy>
    90b0:	e6d1      	b.n	8e56 <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    90b2:	2006      	movs	r0, #6
    90b4:	f7ff fc66 	bl	8984 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    90b8:	f00c f8ee 	bl	15298 <___reboot_Teensyduino__veneer>
    90bc:	2000c6f8 	.word	0x2000c6f8
    90c0:	02010121 	.word	0x02010121
    90c4:	01000121 	.word	0x01000121
    90c8:	200216d4 	.word	0x200216d4
    90cc:	20022615 	.word	0x20022615
    90d0:	600029e0 	.word	0x600029e0
    90d4:	60002888 	.word	0x60002888
    90d8:	200225c0 	.word	0x200225c0
    90dc:	20022608 	.word	0x20022608
    90e0:	20022616 	.word	0x20022616
    90e4:	200092e0 	.word	0x200092e0
    90e8:	20022612 	.word	0x20022612
    90ec:	202009c0 	.word	0x202009c0

000090f0 <usb_config_rx>:
{
    90f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90f4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    90f6:	1e83      	subs	r3, r0, #2
    90f8:	2b04      	cmp	r3, #4
    90fa:	d901      	bls.n	9100 <usb_config_rx+0x10>
}
    90fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9100:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9150 <usb_config_rx+0x60>
    9104:	4615      	mov	r5, r2
    9106:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9108:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    910a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    910e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9110:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9114:	2100      	movs	r1, #0
    9116:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    911a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    911c:	f003 fb92 	bl	c844 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9120:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    9124:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9126:	0952      	lsrs	r2, r2, #5
    9128:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    912c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    9130:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9134:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9138:	2f00      	cmp	r7, #0
    913a:	d0df      	beq.n	90fc <usb_config_rx+0xc>
    913c:	4a03      	ldr	r2, [pc, #12]	; (914c <usb_config_rx+0x5c>)
    913e:	40b3      	lsls	r3, r6
    9140:	6811      	ldr	r1, [r2, #0]
    9142:	430b      	orrs	r3, r1
    9144:	6013      	str	r3, [r2, #0]
}
    9146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    914a:	bf00      	nop
    914c:	200216e0 	.word	0x200216e0
    9150:	20000000 	.word	0x20000000

00009154 <usb_config_tx>:
{
    9154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9158:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    915a:	1e81      	subs	r1, r0, #2
    915c:	2904      	cmp	r1, #4
    915e:	d901      	bls.n	9164 <usb_config_tx+0x10>
}
    9160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9164:	01c7      	lsls	r7, r0, #7
    9166:	f8df 904c 	ldr.w	r9, [pc, #76]	; 91b4 <usb_config_tx+0x60>
    916a:	4692      	mov	sl, r2
    916c:	4604      	mov	r4, r0
    916e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9170:	223c      	movs	r2, #60	; 0x3c
    9172:	2100      	movs	r1, #0
    9174:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9176:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    917a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    917c:	f108 0004 	add.w	r0, r8, #4
    9180:	f003 fb60 	bl	c844 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9184:	faba f28a 	clz	r2, sl
    9188:	0952      	lsrs	r2, r2, #5
    918a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    918e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    9192:	2201      	movs	r2, #1
	qh->callback_function = callback;
    9194:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9198:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    919c:	2e00      	cmp	r6, #0
    919e:	d0df      	beq.n	9160 <usb_config_tx+0xc>
    91a0:	4b03      	ldr	r3, [pc, #12]	; (91b0 <usb_config_tx+0x5c>)
    91a2:	3410      	adds	r4, #16
    91a4:	6819      	ldr	r1, [r3, #0]
    91a6:	40a2      	lsls	r2, r4
    91a8:	430a      	orrs	r2, r1
    91aa:	601a      	str	r2, [r3, #0]
}
    91ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91b0:	200216e0 	.word	0x200216e0
    91b4:	20000000 	.word	0x20000000

000091b8 <usb_config_rx_iso>:
{
    91b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    91bc:	4614      	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    91be:	3a01      	subs	r2, #1
    91c0:	2a02      	cmp	r2, #2
    91c2:	d804      	bhi.n	91ce <usb_config_rx_iso+0x16>
    91c4:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    91c6:	1e83      	subs	r3, r0, #2
    91c8:	4607      	mov	r7, r0
    91ca:	2b04      	cmp	r3, #4
    91cc:	d901      	bls.n	91d2 <usb_config_rx_iso+0x1a>
}
    91ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    91d2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 9218 <usb_config_rx_iso+0x60>
    91d6:	460e      	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    91d8:	07a4      	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    91da:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    91dc:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    91e0:	2100      	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    91e2:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    91e6:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    91ea:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    91ee:	f003 fb29 	bl	c844 <memset>
	qh->next = 1; // Terminate bit = 1
    91f2:	2301      	movs	r3, #1
	qh->config = config;
    91f4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    91f8:	f8c8 5038 	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    91fc:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9200:	2d00      	cmp	r5, #0
    9202:	d0e4      	beq.n	91ce <usb_config_rx_iso+0x16>
    9204:	4a03      	ldr	r2, [pc, #12]	; (9214 <usb_config_rx_iso+0x5c>)
    9206:	40bb      	lsls	r3, r7
    9208:	6811      	ldr	r1, [r2, #0]
    920a:	430b      	orrs	r3, r1
    920c:	6013      	str	r3, [r2, #0]
}
    920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9212:	bf00      	nop
    9214:	200216e0 	.word	0x200216e0
    9218:	20000000 	.word	0x20000000

0000921c <usb_config_tx_iso>:
{
    921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9220:	4614      	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    9222:	3a01      	subs	r2, #1
    9224:	2a02      	cmp	r2, #2
    9226:	d804      	bhi.n	9232 <usb_config_tx_iso+0x16>
    9228:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    922a:	1e83      	subs	r3, r0, #2
    922c:	4607      	mov	r7, r0
    922e:	2b04      	cmp	r3, #4
    9230:	d901      	bls.n	9236 <usb_config_tx_iso+0x1a>
}
    9232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9236:	ea4f 18c0 	mov.w	r8, r0, lsl #7
    923a:	f8df a048 	ldr.w	sl, [pc, #72]	; 9284 <usb_config_tx_iso+0x68>
    923e:	460e      	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    9240:	07a4      	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9242:	f108 0840 	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9246:	223c      	movs	r2, #60	; 0x3c
    9248:	2100      	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    924a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    924e:	eb0a 0908 	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    9252:	f109 0004 	add.w	r0, r9, #4
    9256:	f003 faf5 	bl	c844 <memset>
	qh->next = 1; // Terminate bit = 1
    925a:	2301      	movs	r3, #1
	qh->config = config;
    925c:	f84a 4008 	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    9260:	f8c9 5038 	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9264:	f8c9 3008 	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9268:	2d00      	cmp	r5, #0
    926a:	d0e2      	beq.n	9232 <usb_config_tx_iso+0x16>
    926c:	4a04      	ldr	r2, [pc, #16]	; (9280 <usb_config_tx_iso+0x64>)
    926e:	f107 0010 	add.w	r0, r7, #16
    9272:	6811      	ldr	r1, [r2, #0]
    9274:	4083      	lsls	r3, r0
    9276:	430b      	orrs	r3, r1
    9278:	6013      	str	r3, [r2, #0]
}
    927a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    927e:	bf00      	nop
    9280:	200216e0 	.word	0x200216e0
    9284:	20000000 	.word	0x20000000

00009288 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9288:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    928a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    928c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    928e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    9292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    9296:	b410      	push	{r4}
	transfer->next = 1;
    9298:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    929a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    929c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    92a0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    92a2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    92a6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    92aa:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    92ac:	6181      	str	r1, [r0, #24]
}
    92ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    92b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    92b6:	4770      	bx	lr

000092b8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    92b8:	1e83      	subs	r3, r0, #2
{
    92ba:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    92bc:	2b04      	cmp	r3, #4
    92be:	d900      	bls.n	92c2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    92c0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    92c2:	4b06      	ldr	r3, [pc, #24]	; (92dc <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    92c4:	f100 0110 	add.w	r1, r0, #16
    92c8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    92cc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    92d0:	fa0c f101 	lsl.w	r1, ip, r1
    92d4:	3040      	adds	r0, #64	; 0x40
    92d6:	f7ff baa9 	b.w	882c <schedule_transfer>
    92da:	bf00      	nop
    92dc:	20000000 	.word	0x20000000

000092e0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    92e0:	1e83      	subs	r3, r0, #2
{
    92e2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    92e4:	2b04      	cmp	r3, #4
    92e6:	d900      	bls.n	92ea <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    92e8:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    92ea:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    92ec:	4b02      	ldr	r3, [pc, #8]	; (92f8 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    92ee:	4081      	lsls	r1, r0
    92f0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    92f4:	f7ff ba9a 	b.w	882c <schedule_transfer>
    92f8:	20000000 	.word	0x20000000

000092fc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    92fc:	6840      	ldr	r0, [r0, #4]
#endif
}
    92fe:	4770      	bx	lr

00009300 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    9300:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9304:	4298      	cmp	r0, r3
{
    9306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    930a:	d309      	bcc.n	9320 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    930c:	e00a      	b.n	9324 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    930e:	f850 4b04 	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    9312:	0c25      	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    9314:	4283      	cmp	r3, r0
		*left++ = n & 0xFFFF;
    9316:	f821 4b02 	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    931a:	f822 5b02 	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    931e:	d901      	bls.n	9324 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    9320:	078c      	lsls	r4, r1, #30
    9322:	d4f4      	bmi.n	930e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    9324:	f1a3 0408 	sub.w	r4, r3, #8
    9328:	42a0      	cmp	r0, r4
    932a:	d230      	bcs.n	938e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    932c:	f1a3 0809 	sub.w	r8, r3, #9
    9330:	f100 0c08 	add.w	ip, r0, #8
    9334:	4696      	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9336:	4f17      	ldr	r7, [pc, #92]	; (9394 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    9338:	eba8 0800 	sub.w	r8, r8, r0
    933c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    9340:	f108 0801 	add.w	r8, r8, #1
    9344:	ea4f 0988 	mov.w	r9, r8, lsl #2
    9348:	eb01 0688 	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    934c:	e95c a402 	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    9350:	f10c 0c08 	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9354:	fa1f f58a 	uxth.w	r5, sl
    9358:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    935c:	403c      	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    935e:	f841 5b04 	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9362:	ea44 441a 	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    9366:	42b1      	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9368:	f84e 4b04 	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    936c:	d1ee      	bne.n	934c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    936e:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
		right+=2;
    9372:	444a      	add	r2, r9
	}

	while ((src < target)) {
    9374:	4283      	cmp	r3, r0
    9376:	d908      	bls.n	938a <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    9378:	f850 1b04 	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    937c:	0c0c      	lsrs	r4, r1, #16
	while ((src < target)) {
    937e:	4283      	cmp	r3, r0
		*left++ = n & 0xFFFF;
    9380:	f826 1b02 	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    9384:	f822 4b02 	strh.w	r4, [r2], #2
	while ((src < target)) {
    9388:	d8f6      	bhi.n	9378 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    938e:	460e      	mov	r6, r1
	while ((src < target)) {
    9390:	e7f0      	b.n	9374 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    9392:	bf00      	nop
    9394:	ffff0000 	.word	0xffff0000

00009398 <sync_event(transfer_struct*)>:
{
    9398:	b538      	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    939a:	4a11      	ldr	r2, [pc, #68]	; (93e0 <sync_event(transfer_struct*)+0x48>)
    939c:	4b11      	ldr	r3, [pc, #68]	; (93e4 <sync_event(transfer_struct*)+0x4c>)
    939e:	7811      	ldrb	r1, [r2, #0]
    93a0:	681a      	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    93a2:	2300      	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    93a4:	4c10      	ldr	r4, [pc, #64]	; (93e8 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    93a6:	4d11      	ldr	r5, [pc, #68]	; (93ec <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    93a8:	40ca      	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    93aa:	4811      	ldr	r0, [pc, #68]	; (93f0 <sync_event(transfer_struct*)+0x58>)
    93ac:	4621      	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    93ae:	6022      	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    93b0:	782a      	ldrb	r2, [r5, #0]
    93b2:	f7ff ff69 	bl	9288 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    93b6:	782b      	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    93b8:	4423      	add	r3, r4
	asm("dsb");
    93ba:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    93be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    93c2:	f8c2 4f68 	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    93c6:	3420      	adds	r4, #32
	} while (location < end_addr);
    93c8:	42a3      	cmp	r3, r4
    93ca:	d8fa      	bhi.n	93c2 <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    93cc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    93d0:	f3bf 8f6f 	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    93d4:	4906      	ldr	r1, [pc, #24]	; (93f0 <sync_event(transfer_struct*)+0x58>)
    93d6:	2006      	movs	r0, #6
}
    93d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    93dc:	f7ff bf6c 	b.w	92b8 <usb_transmit>
    93e0:	20022611 	.word	0x20022611
    93e4:	200216f8 	.word	0x200216f8
    93e8:	20200820 	.word	0x20200820
    93ec:	20022610 	.word	0x20022610
    93f0:	2000a500 	.word	0x2000a500

000093f4 <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    93f4:	b538      	push	{r3, r4, r5, lr}
    93f6:	4605      	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    93f8:	2100      	movs	r1, #0
    93fa:	f7fe f8cb 	bl	7594 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    93fe:	2101      	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    9400:	4604      	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    9402:	4628      	mov	r0, r5
    9404:	f7fe f8c6 	bl	7594 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    9408:	4b3b      	ldr	r3, [pc, #236]	; (94f8 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    940a:	4605      	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	b1f3      	cbz	r3, 944e <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    9410:	2c00      	cmp	r4, #0
    9412:	d04a      	beq.n	94aa <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    9414:	2d00      	cmp	r5, #0
    9416:	d054      	beq.n	94c2 <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    9418:	b672      	cpsid	i
	if (left_1st == NULL) {
    941a:	4b38      	ldr	r3, [pc, #224]	; (94fc <AudioOutputUSB::update()+0x108>)
    941c:	6818      	ldr	r0, [r3, #0]
    941e:	2800      	cmp	r0, #0
    9420:	d03d      	beq.n	949e <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    9422:	4a37      	ldr	r2, [pc, #220]	; (9500 <AudioOutputUSB::update()+0x10c>)
    9424:	6811      	ldr	r1, [r2, #0]
    9426:	2900      	cmp	r1, #0
    9428:	d056      	beq.n	94d8 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    942a:	6019      	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    942c:	4935      	ldr	r1, [pc, #212]	; (9504 <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    942e:	4b36      	ldr	r3, [pc, #216]	; (9508 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    9430:	6014      	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    9432:	2400      	movs	r4, #0
		right_1st = right_2nd;
    9434:	680a      	ldr	r2, [r1, #0]
		right_2nd = right;
    9436:	600d      	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    9438:	4934      	ldr	r1, [pc, #208]	; (950c <AudioOutputUSB::update()+0x118>)
    943a:	800c      	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    943c:	681c      	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    943e:	601a      	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    9440:	f7fe f85c 	bl	74fc <AudioStream::release(audio_block_struct*)>
		release(discard2);
    9444:	4620      	mov	r0, r4
    9446:	f7fe f859 	bl	74fc <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    944a:	b662      	cpsie	i
}
    944c:	bd38      	pop	{r3, r4, r5, pc}
		if (left) release(left);
    944e:	b114      	cbz	r4, 9456 <AudioOutputUSB::update()+0x62>
    9450:	4620      	mov	r0, r4
    9452:	f7fe f853 	bl	74fc <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    9456:	b115      	cbz	r5, 945e <AudioOutputUSB::update()+0x6a>
    9458:	4628      	mov	r0, r5
    945a:	f7fe f84f 	bl	74fc <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    945e:	4c27      	ldr	r4, [pc, #156]	; (94fc <AudioOutputUSB::update()+0x108>)
    9460:	6820      	ldr	r0, [r4, #0]
    9462:	b118      	cbz	r0, 946c <AudioOutputUSB::update()+0x78>
    9464:	f7fe f84a 	bl	74fc <AudioStream::release(audio_block_struct*)>
    9468:	2300      	movs	r3, #0
    946a:	6023      	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    946c:	4c24      	ldr	r4, [pc, #144]	; (9500 <AudioOutputUSB::update()+0x10c>)
    946e:	6820      	ldr	r0, [r4, #0]
    9470:	b118      	cbz	r0, 947a <AudioOutputUSB::update()+0x86>
    9472:	f7fe f843 	bl	74fc <AudioStream::release(audio_block_struct*)>
    9476:	2300      	movs	r3, #0
    9478:	6023      	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    947a:	4c23      	ldr	r4, [pc, #140]	; (9508 <AudioOutputUSB::update()+0x114>)
    947c:	6820      	ldr	r0, [r4, #0]
    947e:	b118      	cbz	r0, 9488 <AudioOutputUSB::update()+0x94>
    9480:	f7fe f83c 	bl	74fc <AudioStream::release(audio_block_struct*)>
    9484:	2300      	movs	r3, #0
    9486:	6023      	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    9488:	4c1e      	ldr	r4, [pc, #120]	; (9504 <AudioOutputUSB::update()+0x110>)
    948a:	6820      	ldr	r0, [r4, #0]
    948c:	b118      	cbz	r0, 9496 <AudioOutputUSB::update()+0xa2>
    948e:	f7fe f835 	bl	74fc <AudioStream::release(audio_block_struct*)>
    9492:	2300      	movs	r3, #0
    9494:	6023      	str	r3, [r4, #0]
		offset_1st = 0;
    9496:	4b1d      	ldr	r3, [pc, #116]	; (950c <AudioOutputUSB::update()+0x118>)
    9498:	2200      	movs	r2, #0
    949a:	801a      	strh	r2, [r3, #0]
}
    949c:	bd38      	pop	{r3, r4, r5, pc}
		left_1st = left;
    949e:	601c      	str	r4, [r3, #0]
		right_1st = right;
    94a0:	4a19      	ldr	r2, [pc, #100]	; (9508 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    94a2:	4b1a      	ldr	r3, [pc, #104]	; (950c <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    94a4:	6015      	str	r5, [r2, #0]
		offset_1st = 0;
    94a6:	8018      	strh	r0, [r3, #0]
    94a8:	e7cf      	b.n	944a <AudioOutputUSB::update()+0x56>
		left = allocate();
    94aa:	f7fd ffd1 	bl	7450 <AudioStream::allocate()>
		if (left == NULL) {
    94ae:	4604      	mov	r4, r0
    94b0:	b1b0      	cbz	r0, 94e0 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    94b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    94b6:	2100      	movs	r1, #0
    94b8:	3004      	adds	r0, #4
    94ba:	f003 f9c3 	bl	c844 <memset>
	if (right == NULL) {
    94be:	2d00      	cmp	r5, #0
    94c0:	d1aa      	bne.n	9418 <AudioOutputUSB::update()+0x24>
		right = allocate();
    94c2:	f7fd ffc5 	bl	7450 <AudioStream::allocate()>
		if (right == NULL) {
    94c6:	4605      	mov	r5, r0
    94c8:	b188      	cbz	r0, 94ee <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    94ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    94ce:	2100      	movs	r1, #0
    94d0:	3004      	adds	r0, #4
    94d2:	f003 f9b7 	bl	c844 <memset>
    94d6:	e79f      	b.n	9418 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    94d8:	4b0a      	ldr	r3, [pc, #40]	; (9504 <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    94da:	6014      	str	r4, [r2, #0]
		right_2nd = right;
    94dc:	601d      	str	r5, [r3, #0]
    94de:	e7b4      	b.n	944a <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    94e0:	2d00      	cmp	r5, #0
    94e2:	d0b3      	beq.n	944c <AudioOutputUSB::update()+0x58>
    94e4:	4628      	mov	r0, r5
}
    94e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    94ea:	f7fe b807 	b.w	74fc <AudioStream::release(audio_block_struct*)>
			release(left);
    94ee:	4620      	mov	r0, r4
}
    94f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    94f4:	f7fe b802 	b.w	74fc <AudioStream::release(audio_block_struct*)>
    94f8:	20022612 	.word	0x20022612
    94fc:	20020138 	.word	0x20020138
    9500:	2002013c 	.word	0x2002013c
    9504:	20020144 	.word	0x20020144
    9508:	20020140 	.word	0x20020140
    950c:	200225e0 	.word	0x200225e0

00009510 <usb_audio_receive_callback>:
{
    9510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    9514:	2201      	movs	r2, #1
    9516:	4b4a      	ldr	r3, [pc, #296]	; (9640 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    9518:	f8df a138 	ldr.w	sl, [pc, #312]	; 9654 <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    951c:	0886      	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    951e:	701a      	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    9520:	4b48      	ldr	r3, [pc, #288]	; (9644 <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    9522:	f8da 4000 	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    9526:	881f      	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    9528:	4b47      	ldr	r3, [pc, #284]	; (9648 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    952a:	46b9      	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    952c:	681d      	ldr	r5, [r3, #0]
	if (left == NULL) {
    952e:	2c00      	cmp	r4, #0
    9530:	d04a      	beq.n	95c8 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    9532:	2d00      	cmp	r5, #0
    9534:	d051      	beq.n	95da <usb_audio_receive_callback+0xca>
	while (len > 0) {
    9536:	2e00      	cmp	r6, #0
    9538:	d058      	beq.n	95ec <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    953a:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    953e:	429e      	cmp	r6, r3
    9540:	d37a      	bcc.n	9638 <usb_audio_receive_callback+0x128>
    9542:	f8df b114 	ldr.w	fp, [pc, #276]	; 9658 <usb_audio_receive_callback+0x148>
    9546:	4f41      	ldr	r7, [pc, #260]	; (964c <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9548:	f8df 8110 	ldr.w	r8, [pc, #272]	; 965c <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    954c:	b9fb      	cbnz	r3, 958e <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    954e:	683b      	ldr	r3, [r7, #0]
    9550:	2b00      	cmp	r3, #0
    9552:	d137      	bne.n	95c4 <usb_audio_receive_callback+0xb4>
    9554:	f8d8 3000 	ldr.w	r3, [r8]
    9558:	2b00      	cmp	r3, #0
    955a:	d133      	bne.n	95c4 <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    955c:	603c      	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    955e:	f8c8 5000 	str.w	r5, [r8]
			left = AudioStream::allocate();
    9562:	f7fd ff75 	bl	7450 <AudioStream::allocate()>
			if (left == NULL) {
    9566:	4604      	mov	r4, r0
    9568:	2800      	cmp	r0, #0
    956a:	d043      	beq.n	95f4 <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    956c:	f7fd ff70 	bl	7450 <AudioStream::allocate()>
			if (right == NULL) {
    9570:	4605      	mov	r5, r0
    9572:	2800      	cmp	r0, #0
    9574:	d046      	beq.n	9604 <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    9576:	4b34      	ldr	r3, [pc, #208]	; (9648 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    9578:	f8ca 4000 	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    957c:	6018      	str	r0, [r3, #0]
	while (len > 0) {
    957e:	2e00      	cmp	r6, #0
    9580:	d033      	beq.n	95ea <usb_audio_receive_callback+0xda>
		if (len < avail) {
    9582:	2e7f      	cmp	r6, #127	; 0x7f
			count = 0;
    9584:	f04f 0900 	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    9588:	f04f 0380 	mov.w	r3, #128	; 0x80
		if (len < avail) {
    958c:	d945      	bls.n	961a <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    958e:	1d2a      	adds	r2, r5, #4
    9590:	1d21      	adds	r1, r4, #4
    9592:	4658      	mov	r0, fp
    9594:	444e      	add	r6, r9
    9596:	eb02 0249 	add.w	r2, r2, r9, lsl #1
    959a:	eb01 0149 	add.w	r1, r1, r9, lsl #1
			len -= avail;
    959e:	3e80      	subs	r6, #128	; 0x80
			data += avail;
    95a0:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    95a4:	f7ff feac 	bl	9300 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    95a8:	683b      	ldr	r3, [r7, #0]
    95aa:	b91b      	cbnz	r3, 95b4 <usb_audio_receive_callback+0xa4>
    95ac:	f8d8 3000 	ldr.w	r3, [r8]
    95b0:	2b00      	cmp	r3, #0
    95b2:	d0d3      	beq.n	955c <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    95b4:	2380      	movs	r3, #128	; 0x80
    95b6:	4a23      	ldr	r2, [pc, #140]	; (9644 <usb_audio_receive_callback+0x134>)
    95b8:	8013      	strh	r3, [r2, #0]
				if (len > 0) {
    95ba:	b11e      	cbz	r6, 95c4 <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    95bc:	4a24      	ldr	r2, [pc, #144]	; (9650 <usb_audio_receive_callback+0x140>)
    95be:	6813      	ldr	r3, [r2, #0]
    95c0:	3301      	adds	r3, #1
    95c2:	6013      	str	r3, [r2, #0]
}
    95c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    95c8:	f7fd ff42 	bl	7450 <AudioStream::allocate()>
		if (left == NULL) return;
    95cc:	4604      	mov	r4, r0
    95ce:	2800      	cmp	r0, #0
    95d0:	d0f8      	beq.n	95c4 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    95d2:	f8ca 0000 	str.w	r0, [sl]
	if (right == NULL) {
    95d6:	2d00      	cmp	r5, #0
    95d8:	d1ad      	bne.n	9536 <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    95da:	f7fd ff39 	bl	7450 <AudioStream::allocate()>
		if (right == NULL) return;
    95de:	4605      	mov	r5, r0
    95e0:	2800      	cmp	r0, #0
    95e2:	d0ef      	beq.n	95c4 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    95e4:	4b18      	ldr	r3, [pc, #96]	; (9648 <usb_audio_receive_callback+0x138>)
    95e6:	6018      	str	r0, [r3, #0]
    95e8:	e7a5      	b.n	9536 <usb_audio_receive_callback+0x26>
    95ea:	4637      	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    95ec:	4b15      	ldr	r3, [pc, #84]	; (9644 <usb_audio_receive_callback+0x134>)
    95ee:	801f      	strh	r7, [r3, #0]
}
    95f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    95f4:	4b14      	ldr	r3, [pc, #80]	; (9648 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    95f6:	f8ca 0000 	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    95fa:	6018      	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    95fc:	4b11      	ldr	r3, [pc, #68]	; (9644 <usb_audio_receive_callback+0x134>)
    95fe:	8018      	strh	r0, [r3, #0]
}
    9600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    9604:	4620      	mov	r0, r4
    9606:	f7fd ff79 	bl	74fc <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    960a:	4b0f      	ldr	r3, [pc, #60]	; (9648 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    960c:	f8ca 5000 	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    9610:	601d      	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    9612:	4b0c      	ldr	r3, [pc, #48]	; (9644 <usb_audio_receive_callback+0x134>)
    9614:	801d      	strh	r5, [r3, #0]
}
    9616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    961a:	464f      	mov	r7, r9
    961c:	464b      	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    961e:	1d2a      	adds	r2, r5, #4
    9620:	1d21      	adds	r1, r4, #4
    9622:	4658      	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    9624:	4437      	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    9626:	441a      	add	r2, r3
    9628:	4419      	add	r1, r3
    962a:	4633      	mov	r3, r6
    962c:	f7ff fe68 	bl	9300 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    9630:	4b04      	ldr	r3, [pc, #16]	; (9644 <usb_audio_receive_callback+0x134>)
    9632:	801f      	strh	r7, [r3, #0]
}
    9634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    9638:	007b      	lsls	r3, r7, #1
    963a:	f8df b01c 	ldr.w	fp, [pc, #28]	; 9658 <usb_audio_receive_callback+0x148>
    963e:	e7ee      	b.n	961e <usb_audio_receive_callback+0x10e>
    9640:	200225fd 	.word	0x200225fd
    9644:	200225de 	.word	0x200225de
    9648:	20020134 	.word	0x20020134
    964c:	20020128 	.word	0x20020128
    9650:	200225b8 	.word	0x200225b8
    9654:	20020130 	.word	0x20020130
    9658:	20200840 	.word	0x20200840
    965c:	2002012c 	.word	0x2002012c

00009660 <rx_event(transfer_struct*)>:
{
    9660:	b508      	push	{r3, lr}
	if (t) {
    9662:	b138      	cbz	r0, 9674 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    9664:	4b11      	ldr	r3, [pc, #68]	; (96ac <rx_event(transfer_struct*)+0x4c>)
    9666:	6858      	ldr	r0, [r3, #4]
    9668:	f3c0 400e 	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    966c:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
    9670:	f7ff ff4e 	bl	9510 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    9674:	2300      	movs	r3, #0
    9676:	22b4      	movs	r2, #180	; 0xb4
    9678:	490d      	ldr	r1, [pc, #52]	; (96b0 <rx_event(transfer_struct*)+0x50>)
    967a:	480c      	ldr	r0, [pc, #48]	; (96ac <rx_event(transfer_struct*)+0x4c>)
    967c:	f7ff fe04 	bl	9288 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9680:	4b0b      	ldr	r3, [pc, #44]	; (96b0 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    9682:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    9686:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    968a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    968e:	f8c2 3f5c 	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    9692:	3320      	adds	r3, #32
	} while (location < end_addr);
    9694:	4299      	cmp	r1, r3
    9696:	d8fa      	bhi.n	968e <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    9698:	f3bf 8f4f 	dsb	sy
	asm("isb");
    969c:	f3bf 8f6f 	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    96a0:	4902      	ldr	r1, [pc, #8]	; (96ac <rx_event(transfer_struct*)+0x4c>)
    96a2:	2005      	movs	r0, #5
}
    96a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    96a8:	f7ff be1a 	b.w	92e0 <usb_receive>
    96ac:	2000a320 	.word	0x2000a320
    96b0:	20200840 	.word	0x20200840

000096b4 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    96b4:	2300      	movs	r3, #0
    96b6:	4803      	ldr	r0, [pc, #12]	; (96c4 <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    96b8:	4903      	ldr	r1, [pc, #12]	; (96c8 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    96ba:	4a04      	ldr	r2, [pc, #16]	; (96cc <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    96bc:	7003      	strb	r3, [r0, #0]
	left_1st = NULL;
    96be:	600b      	str	r3, [r1, #0]
	right_1st = NULL;
    96c0:	6013      	str	r3, [r2, #0]
}
    96c2:	4770      	bx	lr
    96c4:	200225fe 	.word	0x200225fe
    96c8:	20020138 	.word	0x20020138
    96cc:	20020140 	.word	0x20020140

000096d0 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    96d0:	4a39      	ldr	r2, [pc, #228]	; (97b8 <usb_audio_transmit_callback+0xe8>)
{
    96d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    96d6:	6813      	ldr	r3, [r2, #0]
    96d8:	3301      	adds	r3, #1
    96da:	2b09      	cmp	r3, #9
{
    96dc:	ed2d 8b02 	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    96e0:	d955      	bls.n	978e <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    96e2:	21b4      	movs	r1, #180	; 0xb4
    96e4:	2300      	movs	r3, #0
		target = 45;
    96e6:	f04f 092d 	mov.w	r9, #45	; 0x2d
		count = 0;
    96ea:	ee08 1a10 	vmov	s16, r1
    96ee:	6013      	str	r3, [r2, #0]
{
    96f0:	2700      	movs	r7, #0
    96f2:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 97cc <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    96f6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 97d0 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    96fa:	f8db 0000 	ldr.w	r0, [fp]
		num = target - len;
    96fe:	eba9 0207 	sub.w	r2, r9, r7
		if (left == NULL) {
    9702:	2800      	cmp	r0, #0
    9704:	d04a      	beq.n	979c <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    9706:	f8ba c000 	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    970a:	1d05      	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    970c:	4b2b      	ldr	r3, [pc, #172]	; (97bc <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    970e:	eb05 054c 	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    9712:	f8d3 8000 	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    9716:	f1cc 0380 	rsb	r3, ip, #128	; 0x80
    971a:	429a      	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    971c:	f108 0404 	add.w	r4, r8, #4
    9720:	bf28      	it	cs
    9722:	461a      	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9724:	4b26      	ldr	r3, [pc, #152]	; (97c0 <usb_audio_transmit_callback+0xf0>)
    9726:	eb04 044c 	add.w	r4, r4, ip, lsl #1
    972a:	eb03 0687 	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    972e:	b15a      	cbz	r2, 9748 <usb_audio_transmit_callback+0x78>
    9730:	4611      	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9732:	f935 3b02 	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    9736:	3901      	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9738:	f934 eb02 	ldrsh.w	lr, [r4], #2
    973c:	b29b      	uxth	r3, r3
    973e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    9742:	f846 3b04 	str.w	r3, [r6], #4
	while (len > 0) {
    9746:	d1f4      	bne.n	9732 <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    9748:	4494      	add	ip, r2
		len += num;
    974a:	4417      	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    974c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    9750:	d80b      	bhi.n	976a <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    9752:	fa1f fc8c 	uxth.w	ip, ip
	while (len < target) {
    9756:	454f      	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    9758:	f8aa c000 	strh.w	ip, [sl]
	while (len < target) {
    975c:	d3cd      	bcc.n	96fa <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    975e:	ee18 0a10 	vmov	r0, s16
    9762:	ecbd 8b02 	vpop	{d8}
    9766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    976a:	f7fd fec7 	bl	74fc <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    976e:	4640      	mov	r0, r8
    9770:	f7fd fec4 	bl	74fc <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9774:	4813      	ldr	r0, [pc, #76]	; (97c4 <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9776:	4b14      	ldr	r3, [pc, #80]	; (97c8 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    9778:	2200      	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    977a:	6801      	ldr	r1, [r0, #0]
    977c:	4694      	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    977e:	6002      	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9780:	f8cb 1000 	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9784:	6819      	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    9786:	601a      	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9788:	4b0c      	ldr	r3, [pc, #48]	; (97bc <usb_audio_transmit_callback+0xec>)
    978a:	6019      	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    978c:	e7e3      	b.n	9756 <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    978e:	21b0      	movs	r1, #176	; 0xb0
		target = 44;
    9790:	f04f 092c 	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9794:	6013      	str	r3, [r2, #0]
    9796:	ee08 1a10 	vmov	s16, r1
    979a:	e7a9      	b.n	96f0 <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    979c:	4b08      	ldr	r3, [pc, #32]	; (97c0 <usb_audio_transmit_callback+0xf0>)
    979e:	4601      	mov	r1, r0
    97a0:	0092      	lsls	r2, r2, #2
    97a2:	eb03 0047 	add.w	r0, r3, r7, lsl #1
    97a6:	f003 f84d 	bl	c844 <memset>
}
    97aa:	ee18 0a10 	vmov	r0, s16
    97ae:	ecbd 8b02 	vpop	{d8}
    97b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97b6:	bf00      	nop
    97b8:	200088e4 	.word	0x200088e4
    97bc:	20020140 	.word	0x20020140
    97c0:	2000c640 	.word	0x2000c640
    97c4:	2002013c 	.word	0x2002013c
    97c8:	20020144 	.word	0x20020144
    97cc:	20020138 	.word	0x20020138
    97d0:	200225e0 	.word	0x200225e0

000097d4 <tx_event(transfer_struct*)>:
{
    97d4:	b538      	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    97d6:	f7ff ff7b 	bl	96d0 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    97da:	4a11      	ldr	r2, [pc, #68]	; (9820 <tx_event(transfer_struct*)+0x4c>)
    97dc:	4b11      	ldr	r3, [pc, #68]	; (9824 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    97de:	4605      	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    97e0:	6812      	ldr	r2, [r2, #0]
    97e2:	781b      	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    97e4:	4c10      	ldr	r4, [pc, #64]	; (9828 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    97e6:	40da      	lsrs	r2, r3
    97e8:	4910      	ldr	r1, [pc, #64]	; (982c <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    97ea:	2300      	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    97ec:	600a      	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    97ee:	4602      	mov	r2, r0
    97f0:	4621      	mov	r1, r4
    97f2:	480f      	ldr	r0, [pc, #60]	; (9830 <tx_event(transfer_struct*)+0x5c>)
    97f4:	f7ff fd48 	bl	9288 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    97f8:	1960      	adds	r0, r4, r5
	asm("dsb");
    97fa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    97fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9802:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9806:	3420      	adds	r4, #32
	} while (location < end_addr);
    9808:	42a0      	cmp	r0, r4
    980a:	d8fa      	bhi.n	9802 <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    980c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9810:	f3bf 8f6f 	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    9814:	4906      	ldr	r1, [pc, #24]	; (9830 <tx_event(transfer_struct*)+0x5c>)
    9816:	2005      	movs	r0, #5
}
    9818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    981c:	f7ff bd4c 	b.w	92b8 <usb_transmit>
    9820:	200216f8 	.word	0x200216f8
    9824:	20022611 	.word	0x20022611
    9828:	2000c640 	.word	0x2000c640
    982c:	20200820 	.word	0x20200820
    9830:	2000a520 	.word	0x2000a520

00009834 <usb_audio_configure>:
{
    9834:	b538      	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    9836:	492b      	ldr	r1, [pc, #172]	; (98e4 <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    9838:	2400      	movs	r4, #0
    983a:	4b2b      	ldr	r3, [pc, #172]	; (98e8 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    983c:	4a2b      	ldr	r2, [pc, #172]	; (98ec <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    983e:	601c      	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    9840:	600c      	str	r4, [r1, #0]
	if (usb_high_speed) {
    9842:	7811      	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9844:	4b2a      	ldr	r3, [pc, #168]	; (98f0 <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    9846:	42a1      	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9848:	4a2a      	ldr	r2, [pc, #168]	; (98f4 <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    984a:	4d2b      	ldr	r5, [pc, #172]	; (98f8 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    984c:	4621      	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    984e:	601a      	str	r2, [r3, #0]
	if (usb_high_speed) {
    9850:	bf0b      	itete	eq
    9852:	2303      	moveq	r3, #3
    9854:	2304      	movne	r3, #4
    9856:	200a      	moveq	r0, #10
    9858:	2008      	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    985a:	2220      	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    985c:	702b      	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    985e:	4b27      	ldr	r3, [pc, #156]	; (98fc <usb_audio_configure+0xc8>)
    9860:	7018      	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9862:	4827      	ldr	r0, [pc, #156]	; (9900 <usb_audio_configure+0xcc>)
    9864:	f002 ffee 	bl	c844 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    9868:	2201      	movs	r2, #1
    986a:	21b4      	movs	r1, #180	; 0xb4
    986c:	2005      	movs	r0, #5
    986e:	4b25      	ldr	r3, [pc, #148]	; (9904 <usb_audio_configure+0xd0>)
    9870:	f7ff fca2 	bl	91b8 <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    9874:	4623      	mov	r3, r4
    9876:	22b4      	movs	r2, #180	; 0xb4
    9878:	4923      	ldr	r1, [pc, #140]	; (9908 <usb_audio_configure+0xd4>)
    987a:	4821      	ldr	r0, [pc, #132]	; (9900 <usb_audio_configure+0xcc>)
    987c:	f7ff fd04 	bl	9288 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9880:	4b21      	ldr	r3, [pc, #132]	; (9908 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    9882:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    9886:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    988a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    988e:	f8c2 3f5c 	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    9892:	3320      	adds	r3, #32
	} while (location < end_addr);
    9894:	4299      	cmp	r1, r3
    9896:	d8fa      	bhi.n	988e <usb_audio_configure+0x5a>
	asm("dsb");
    9898:	f3bf 8f4f 	dsb	sy
	asm("isb");
    989c:	f3bf 8f6f 	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    98a0:	4917      	ldr	r1, [pc, #92]	; (9900 <usb_audio_configure+0xcc>)
    98a2:	2005      	movs	r0, #5
    98a4:	f7ff fd1c 	bl	92e0 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    98a8:	2220      	movs	r2, #32
    98aa:	2100      	movs	r1, #0
    98ac:	4817      	ldr	r0, [pc, #92]	; (990c <usb_audio_configure+0xd8>)
    98ae:	f002 ffc9 	bl	c844 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    98b2:	4b17      	ldr	r3, [pc, #92]	; (9910 <usb_audio_configure+0xdc>)
    98b4:	7829      	ldrb	r1, [r5, #0]
    98b6:	2201      	movs	r2, #1
    98b8:	2006      	movs	r0, #6
    98ba:	f7ff fcaf 	bl	921c <usb_config_tx_iso>
	sync_event(NULL);
    98be:	2000      	movs	r0, #0
    98c0:	f7ff fd6a 	bl	9398 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    98c4:	2220      	movs	r2, #32
    98c6:	2100      	movs	r1, #0
    98c8:	4812      	ldr	r0, [pc, #72]	; (9914 <usb_audio_configure+0xe0>)
    98ca:	f002 ffbb 	bl	c844 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    98ce:	2005      	movs	r0, #5
    98d0:	4b11      	ldr	r3, [pc, #68]	; (9918 <usb_audio_configure+0xe4>)
    98d2:	2201      	movs	r2, #1
    98d4:	21b4      	movs	r1, #180	; 0xb4
    98d6:	f7ff fca1 	bl	921c <usb_config_tx_iso>
	tx_event(NULL);
    98da:	2000      	movs	r0, #0
}
    98dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    98e0:	f7ff bf78 	b.w	97d4 <tx_event(transfer_struct*)>
    98e4:	200225b8 	.word	0x200225b8
    98e8:	200225bc 	.word	0x200225bc
    98ec:	20022615 	.word	0x20022615
    98f0:	200216f8 	.word	0x200216f8
    98f4:	2c19999a 	.word	0x2c19999a
    98f8:	20022610 	.word	0x20022610
    98fc:	20022611 	.word	0x20022611
    9900:	2000a320 	.word	0x2000a320
    9904:	00009661 	.word	0x00009661
    9908:	20200840 	.word	0x20200840
    990c:	2000a500 	.word	0x2000a500
    9910:	00009399 	.word	0x00009399
    9914:	2000a520 	.word	0x2000a520
    9918:	000097d5 	.word	0x000097d5

0000991c <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    991c:	7803      	ldrb	r3, [r0, #0]
    991e:	2ba1      	cmp	r3, #161	; 0xa1
    9920:	d001      	beq.n	9926 <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    9922:	2000      	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    9924:	4770      	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    9926:	78c3      	ldrb	r3, [r0, #3]
    9928:	7840      	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    992a:	2b01      	cmp	r3, #1
    992c:	d008      	beq.n	9940 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    992e:	2b02      	cmp	r3, #2
    9930:	d1f7      	bne.n	9922 <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    9932:	3881      	subs	r0, #129	; 0x81
    9934:	2803      	cmp	r0, #3
    9936:	d8f4      	bhi.n	9922 <usb_audio_get_feature+0x6>
    9938:	e8df f000 	tbb	[pc, r0]
    993c:	0b13171b 	.word	0x0b13171b
{
    9940:	b410      	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    9942:	4c0e      	ldr	r4, [pc, #56]	; (997c <usb_audio_get_feature+0x60>)
				return 1;
    9944:	4618      	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    9946:	6864      	ldr	r4, [r4, #4]
    9948:	700c      	strb	r4, [r1, #0]
}
    994a:	f85d 4b04 	ldr.w	r4, [sp], #4
				*datalen = 1;
    994e:	6013      	str	r3, [r2, #0]
}
    9950:	4770      	bx	lr
					data[0] = 1; // increment vol by by 1
    9952:	2301      	movs	r3, #1
    9954:	2000      	movs	r0, #0
    9956:	700b      	strb	r3, [r1, #0]
				*datalen = 2;
    9958:	2302      	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    995a:	7048      	strb	r0, [r1, #1]
				return 1;
    995c:	2001      	movs	r0, #1
				*datalen = 2;
    995e:	6013      	str	r3, [r2, #0]
				return 1;
    9960:	4770      	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    9962:	23ff      	movs	r3, #255	; 0xff
    9964:	2000      	movs	r0, #0
    9966:	700b      	strb	r3, [r1, #0]
					data[1] = 0;
    9968:	e7f6      	b.n	9958 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    996a:	2300      	movs	r3, #0
    996c:	4618      	mov	r0, r3
    996e:	700b      	strb	r3, [r1, #0]
					data[1] = 0;
    9970:	e7f2      	b.n	9958 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    9972:	4b02      	ldr	r3, [pc, #8]	; (997c <usb_audio_get_feature+0x60>)
    9974:	6898      	ldr	r0, [r3, #8]
    9976:	7008      	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    9978:	7a58      	ldrb	r0, [r3, #9]
    997a:	e7ed      	b.n	9958 <usb_audio_get_feature+0x3c>
    997c:	200088d4 	.word	0x200088d4

00009980 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    9980:	7803      	ldrb	r3, [r0, #0]
    9982:	2b21      	cmp	r3, #33	; 0x21
    9984:	d001      	beq.n	998a <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    9986:	2000      	movs	r0, #0
}
    9988:	4770      	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    998a:	78c3      	ldrb	r3, [r0, #3]
    998c:	7842      	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    998e:	2b01      	cmp	r3, #1
    9990:	d009      	beq.n	99a6 <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    9992:	2b02      	cmp	r3, #2
    9994:	d1f7      	bne.n	9986 <usb_audio_set_feature+0x6>
    9996:	2a01      	cmp	r2, #1
    9998:	d1f5      	bne.n	9986 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    999a:	4b07      	ldr	r3, [pc, #28]	; (99b8 <usb_audio_set_feature+0x38>)
					return 1;
    999c:	4610      	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    999e:	7809      	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    99a0:	601a      	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    99a2:	6099      	str	r1, [r3, #8]
					return 1;
    99a4:	4770      	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    99a6:	2a01      	cmp	r2, #1
    99a8:	d1ed      	bne.n	9986 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    99aa:	4b03      	ldr	r3, [pc, #12]	; (99b8 <usb_audio_set_feature+0x38>)
					return 1;
    99ac:	4610      	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    99ae:	7809      	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    99b0:	e9c3 2100 	strd	r2, r1, [r3]
					return 1;
    99b4:	4770      	bx	lr
    99b6:	bf00      	nop
    99b8:	200088d4 	.word	0x200088d4

000099bc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    99bc:	4a12      	ldr	r2, [pc, #72]	; (9a08 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    99be:	4b13      	ldr	r3, [pc, #76]	; (9a0c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    99c0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    99c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    99c8:	4298      	cmp	r0, r3
{
    99ca:	b510      	push	{r4, lr}
    99cc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    99ce:	d202      	bcs.n	99d6 <usb_init_serialnumber+0x1a>
    99d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    99d4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    99d6:	4c0e      	ldr	r4, [pc, #56]	; (9a10 <usb_init_serialnumber+0x54>)
    99d8:	a901      	add	r1, sp, #4
    99da:	220a      	movs	r2, #10
    99dc:	f7fe fd38 	bl	8450 <ultoa>
	for (i=0; i<10; i++) {
    99e0:	a901      	add	r1, sp, #4
    99e2:	2300      	movs	r3, #0
    99e4:	4620      	mov	r0, r4
		char c = buf[i];
    99e6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    99ea:	3301      	adds	r3, #1
		if (!c) break;
    99ec:	b13a      	cbz	r2, 99fe <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    99ee:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    99f0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    99f4:	d1f7      	bne.n	99e6 <usb_init_serialnumber+0x2a>
    99f6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    99f8:	7023      	strb	r3, [r4, #0]
}
    99fa:	b004      	add	sp, #16
    99fc:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    99fe:	005b      	lsls	r3, r3, #1
    9a00:	b2db      	uxtb	r3, r3
    9a02:	7023      	strb	r3, [r4, #0]
}
    9a04:	b004      	add	sp, #16
    9a06:	bd10      	pop	{r4, pc}
    9a08:	401f4400 	.word	0x401f4400
    9a0c:	00989680 	.word	0x00989680
    9a10:	20008eac 	.word	0x20008eac

00009a14 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9a14:	f000 bbe4 	b.w	a1e0 <usb_serial_flush_input>

00009a18 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    9a18:	f000 bbd6 	b.w	a1c8 <usb_serial_available>

00009a1c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9a1c:	f000 bc72 	b.w	a304 <usb_serial_flush_output>

00009a20 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9a20:	f000 bc48 	b.w	a2b4 <usb_serial_write_buffer_free>

00009a24 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9a24:	4608      	mov	r0, r1
    9a26:	4611      	mov	r1, r2
    9a28:	f000 bc38 	b.w	a29c <usb_serial_write>

00009a2c <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
    9a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    9a2e:	4c14      	ldr	r4, [pc, #80]	; (9a80 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9a30:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a34:	4e13      	ldr	r6, [pc, #76]	; (9a84 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    9a3a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a3e:	4f12      	ldr	r7, [pc, #72]	; (9a88 <rx_queue_transfer+0x5c>)
    9a40:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9a44:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9a46:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a4a:	4621      	mov	r1, r4
    9a4c:	883a      	ldrh	r2, [r7, #0]
    9a4e:	4630      	mov	r0, r6
    9a50:	f7ff fc1a 	bl	9288 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9a54:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9a56:	4423      	add	r3, r4
	asm("dsb");
    9a58:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9a5c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9a60:	3420      	adds	r4, #32
	} while (location < end_addr);
    9a62:	42a3      	cmp	r3, r4
    9a64:	d8fa      	bhi.n	9a5c <rx_queue_transfer+0x30>
	asm("dsb");
    9a66:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9a6a:	f3bf 8f6f 	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    9a6e:	2004      	movs	r0, #4
    9a70:	4631      	mov	r1, r6
    9a72:	f7ff fc35 	bl	92e0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9a7a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a80:	20200b20 	.word	0x20200b20
    9a84:	2000a340 	.word	0x2000a340
    9a88:	200225ea 	.word	0x200225ea

00009a8c <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a8c:	6842      	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    9a8e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a92:	4b11      	ldr	r3, [pc, #68]	; (9ad8 <rx_event+0x4c>)
    9a94:	f3c2 420e 	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    9a98:	69c0      	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a9a:	881b      	ldrh	r3, [r3, #0]
    9a9c:	1a9b      	subs	r3, r3, r2
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9a9e:	400b      	ands	r3, r1
    9aa0:	d017      	beq.n	9ad2 <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
    9aa2:	490e      	ldr	r1, [pc, #56]	; (9adc <rx_event+0x50>)
{
    9aa4:	b430      	push	{r4, r5}
		uint32_t head = rx_head;
    9aa6:	4c0e      	ldr	r4, [pc, #56]	; (9ae0 <rx_event+0x54>)
		rx_index[i] = 0;
    9aa8:	4d0e      	ldr	r5, [pc, #56]	; (9ae4 <rx_event+0x58>)
		uint32_t head = rx_head;
    9aaa:	7822      	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    9aac:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    9ab0:	2100      	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    9ab2:	3201      	adds	r2, #1
		rx_index[i] = 0;
    9ab4:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    9ab8:	2a06      	cmp	r2, #6
		rx_list[head] = i;
		rx_head = head;
    9aba:	bf94      	ite	ls
    9abc:	b2d1      	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    9abe:	460a      	movhi	r2, r1
		rx_head = head;
    9ac0:	7021      	strb	r1, [r4, #0]
		rx_available += len;
    9ac2:	4909      	ldr	r1, [pc, #36]	; (9ae8 <rx_event+0x5c>)
    9ac4:	680c      	ldr	r4, [r1, #0]
    9ac6:	4423      	add	r3, r4
    9ac8:	600b      	str	r3, [r1, #0]
		rx_list[head] = i;
    9aca:	4b08      	ldr	r3, [pc, #32]	; (9aec <rx_event+0x60>)
    9acc:	5498      	strb	r0, [r3, r2]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9ace:	bc30      	pop	{r4, r5}
    9ad0:	4770      	bx	lr
		rx_queue_transfer(i);
    9ad2:	f7ff bfab 	b.w	9a2c <rx_queue_transfer>
    9ad6:	bf00      	nop
    9ad8:	200225ea 	.word	0x200225ea
    9adc:	20022034 	.word	0x20022034
    9ae0:	20022604 	.word	0x20022604
    9ae4:	20022050 	.word	0x20022050
    9ae8:	2002202c 	.word	0x2002202c
    9aec:	2002206c 	.word	0x2002206c

00009af0 <usb_midi_configure>:
	if (usb_high_speed) {
    9af0:	4b21      	ldr	r3, [pc, #132]	; (9b78 <usb_midi_configure+0x88>)
{
    9af2:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9af4:	781b      	ldrb	r3, [r3, #0]
    9af6:	2b00      	cmp	r3, #0
    9af8:	d03b      	beq.n	9b72 <usb_midi_configure+0x82>
    9afa:	f44f 7300 	mov.w	r3, #512	; 0x200
    9afe:	461e      	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    9b00:	491e      	ldr	r1, [pc, #120]	; (9b7c <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9b02:	2280      	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    9b04:	4d1e      	ldr	r5, [pc, #120]	; (9b80 <usb_midi_configure+0x90>)
	tx_head = 0;
    9b06:	2400      	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    9b08:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9b0a:	2100      	movs	r1, #0
    9b0c:	481d      	ldr	r0, [pc, #116]	; (9b84 <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    9b0e:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9b10:	f002 fe98 	bl	c844 <memset>
	tx_head = 0;
    9b14:	4a1c      	ldr	r2, [pc, #112]	; (9b88 <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9b16:	4621      	mov	r1, r4
	tx_available = 0;
    9b18:	4b1c      	ldr	r3, [pc, #112]	; (9b8c <usb_midi_configure+0x9c>)
	tx_head = 0;
    9b1a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9b1c:	22c0      	movs	r2, #192	; 0xc0
    9b1e:	481c      	ldr	r0, [pc, #112]	; (9b90 <usb_midi_configure+0xa0>)
	tx_available = 0;
    9b20:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9b22:	f002 fe8f 	bl	c844 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9b26:	4a1b      	ldr	r2, [pc, #108]	; (9b94 <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9b28:	4631      	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    9b2a:	4b1b      	ldr	r3, [pc, #108]	; (9b98 <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9b2c:	2004      	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    9b2e:	6094      	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    9b30:	609c      	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    9b32:	e9c2 4400 	strd	r4, r4, [r2]
	rx_head = 0;
    9b36:	4a19      	ldr	r2, [pc, #100]	; (9b9c <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    9b38:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9b3c:	7014      	strb	r4, [r2, #0]
	rx_tail = 0;
    9b3e:	4b18      	ldr	r3, [pc, #96]	; (9ba0 <usb_midi_configure+0xb0>)
	rx_available = 0;
    9b40:	4a18      	ldr	r2, [pc, #96]	; (9ba4 <usb_midi_configure+0xb4>)
	rx_tail = 0;
    9b42:	701c      	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9b44:	4b18      	ldr	r3, [pc, #96]	; (9ba8 <usb_midi_configure+0xb8>)
	rx_available = 0;
    9b46:	6014      	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9b48:	4622      	mov	r2, r4
    9b4a:	f7ff fad1 	bl	90f0 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    9b4e:	4623      	mov	r3, r4
    9b50:	4622      	mov	r2, r4
    9b52:	8829      	ldrh	r1, [r5, #0]
    9b54:	2004      	movs	r0, #4
    9b56:	f7ff fafd 	bl	9154 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9b5a:	4620      	mov	r0, r4
    9b5c:	3401      	adds	r4, #1
    9b5e:	f7ff ff65 	bl	9a2c <rx_queue_transfer>
    9b62:	2c06      	cmp	r4, #6
    9b64:	d1f9      	bne.n	9b5a <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    9b66:	2300      	movs	r3, #0
    9b68:	4910      	ldr	r1, [pc, #64]	; (9bac <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    9b6a:	4a11      	ldr	r2, [pc, #68]	; (9bb0 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    9b6c:	700b      	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    9b6e:	7013      	strb	r3, [r2, #0]
}
    9b70:	bd70      	pop	{r4, r5, r6, pc}
    9b72:	2340      	movs	r3, #64	; 0x40
    9b74:	461e      	mov	r6, r3
    9b76:	e7c3      	b.n	9b00 <usb_midi_configure+0x10>
    9b78:	20022615 	.word	0x20022615
    9b7c:	200225ea 	.word	0x200225ea
    9b80:	200225f2 	.word	0x200225f2
    9b84:	2000a540 	.word	0x2000a540
    9b88:	2002260b 	.word	0x2002260b
    9b8c:	200225ee 	.word	0x200225ee
    9b90:	2000a340 	.word	0x2000a340
    9b94:	20022034 	.word	0x20022034
    9b98:	20022050 	.word	0x20022050
    9b9c:	20022604 	.word	0x20022604
    9ba0:	20022606 	.word	0x20022606
    9ba4:	2002202c 	.word	0x2002202c
    9ba8:	00009a8d 	.word	0x00009a8d
    9bac:	20022609 	.word	0x20022609
    9bb0:	2002260d 	.word	0x2002260d

00009bb4 <usb_midi_flush_output>:
{
    9bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    9bb8:	4b21      	ldr	r3, [pc, #132]	; (9c40 <usb_midi_flush_output+0x8c>)
    9bba:	781d      	ldrb	r5, [r3, #0]
    9bbc:	b915      	cbnz	r5, 9bc4 <usb_midi_flush_output+0x10>
    9bbe:	4e21      	ldr	r6, [pc, #132]	; (9c44 <usb_midi_flush_output+0x90>)
    9bc0:	8833      	ldrh	r3, [r6, #0]
    9bc2:	b90b      	cbnz	r3, 9bc8 <usb_midi_flush_output+0x14>
}
    9bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    9bc8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 9c54 <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    9bcc:	4a1e      	ldr	r2, [pc, #120]	; (9c48 <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    9bce:	f898 7000 	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    9bd2:	4c1e      	ldr	r4, [pc, #120]	; (9c4c <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    9bd4:	eb02 1947 	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    9bd8:	4a1d      	ldr	r2, [pc, #116]	; (9c50 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    9bda:	eb04 2447 	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    9bde:	8812      	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    9be0:	4648      	mov	r0, r9
    9be2:	4621      	mov	r1, r4
    9be4:	1ad2      	subs	r2, r2, r3
    9be6:	462b      	mov	r3, r5
    9be8:	f7ff fb4e 	bl	9288 <usb_prepare_transfer>
	asm("dsb");
    9bec:	f3bf 8f4f 	dsb	sy
    9bf0:	f104 0220 	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9bf4:	f504 7300 	add.w	r3, r4, #512	; 0x200
    9bf8:	4293      	cmp	r3, r2
    9bfa:	bf34      	ite	cc
    9bfc:	2301      	movcc	r3, #1
    9bfe:	2310      	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    9c00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9c04:	eb04 1343 	add.w	r3, r4, r3, lsl #5
    9c08:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    9c0c:	3420      	adds	r4, #32
	} while (location < end_addr);
    9c0e:	429c      	cmp	r4, r3
    9c10:	d1fa      	bne.n	9c08 <usb_midi_flush_output+0x54>
	asm("dsb");
    9c12:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9c16:	f3bf 8f6f 	isb	sy
		if (++head >= TX_NUM) head = 0;
    9c1a:	3701      	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    9c1c:	4649      	mov	r1, r9
    9c1e:	2004      	movs	r0, #4
    9c20:	f7ff fb4a 	bl	92b8 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    9c24:	2f03      	cmp	r7, #3
		tx_available = 0;
    9c26:	f04f 0300 	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9c2a:	f04f 0002 	mov.w	r0, #2
		tx_head = head;
    9c2e:	bf98      	it	ls
    9c30:	b2fd      	uxtbls	r5, r7
		tx_available = 0;
    9c32:	8033      	strh	r3, [r6, #0]
		tx_head = head;
    9c34:	f888 5000 	strb.w	r5, [r8]
}
    9c38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9c3c:	f7fe bea2 	b.w	8984 <usb_stop_sof_interrupts>
    9c40:	2002260d 	.word	0x2002260d
    9c44:	200225ee 	.word	0x200225ee
    9c48:	2000a540 	.word	0x2000a540
    9c4c:	20201720 	.word	0x20201720
    9c50:	200225f2 	.word	0x200225f2
    9c54:	2002260b 	.word	0x2002260b

00009c58 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9c5a:	4c14      	ldr	r4, [pc, #80]	; (9cac <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9c5c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9c60:	4e13      	ldr	r6, [pc, #76]	; (9cb0 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9c66:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9c6a:	4f12      	ldr	r7, [pc, #72]	; (9cb4 <rx_queue_transfer+0x5c>)
    9c6c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9c70:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9c72:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9c76:	4621      	mov	r1, r4
    9c78:	883a      	ldrh	r2, [r7, #0]
    9c7a:	4630      	mov	r0, r6
    9c7c:	f7ff fb04 	bl	9288 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9c80:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9c82:	4423      	add	r3, r4
	asm("dsb");
    9c84:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9c88:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9c8c:	3420      	adds	r4, #32
	} while (location < end_addr);
    9c8e:	42a3      	cmp	r3, r4
    9c90:	d8fa      	bhi.n	9c88 <rx_queue_transfer+0x30>
	asm("dsb");
    9c92:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9c96:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9c9a:	2003      	movs	r0, #3
    9c9c:	4631      	mov	r1, r6
    9c9e:	f7ff fb1f 	bl	92e0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9ca6:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cac:	20009320 	.word	0x20009320
    9cb0:	2000a400 	.word	0x2000a400
    9cb4:	200225ec 	.word	0x200225ec

00009cb8 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9cb8:	4b24      	ldr	r3, [pc, #144]	; (9d4c <rx_event+0x94>)
{
    9cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9cbe:	881c      	ldrh	r4, [r3, #0]
    9cc0:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    9cc2:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9cc4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    9cc8:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9cca:	2c00      	cmp	r4, #0
    9ccc:	dd24      	ble.n	9d18 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    9cce:	4920      	ldr	r1, [pc, #128]	; (9d50 <rx_event+0x98>)
		if (head != rx_tail) {
    9cd0:	4820      	ldr	r0, [pc, #128]	; (9d54 <rx_event+0x9c>)
		uint32_t head = rx_head;
    9cd2:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    9cd4:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9cd6:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    9cd8:	4e1f      	ldr	r6, [pc, #124]	; (9d58 <rx_event+0xa0>)
		if (head != rx_tail) {
    9cda:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    9cdc:	481f      	ldr	r0, [pc, #124]	; (9d5c <rx_event+0xa4>)
		if (head != rx_tail) {
    9cde:	d007      	beq.n	9cf0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    9ce0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9ce4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9ce8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    9cec:	4294      	cmp	r4, r2
    9cee:	d918      	bls.n	9d22 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9cf0:	3301      	adds	r3, #1
		rx_index[i] = 0;
    9cf2:	2200      	movs	r2, #0
		rx_count[i] = len;
    9cf4:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9cf8:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    9cfa:	4e19      	ldr	r6, [pc, #100]	; (9d60 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9cfc:	bf88      	it	hi
    9cfe:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    9d00:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    9d04:	bf98      	it	ls
    9d06:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    9d08:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    9d0a:	4b16      	ldr	r3, [pc, #88]	; (9d64 <rx_event+0xac>)
		rx_head = head;
    9d0c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    9d0e:	681a      	ldr	r2, [r3, #0]
    9d10:	4414      	add	r4, r2
    9d12:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    9d18:	4628      	mov	r0, r5
}
    9d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    9d1e:	f7ff bf9b 	b.w	9c58 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9d22:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    9d26:	4910      	ldr	r1, [pc, #64]	; (9d68 <rx_event+0xb0>)
    9d28:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    9d2a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9d2c:	4408      	add	r0, r1
    9d2e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    9d32:	f7fe faef 	bl	8314 <memcpy>
				rx_available += len;
    9d36:	4a0b      	ldr	r2, [pc, #44]	; (9d64 <rx_event+0xac>)
				rx_queue_transfer(i);
    9d38:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    9d3a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9d3e:	6813      	ldr	r3, [r2, #0]
    9d40:	4423      	add	r3, r4
}
    9d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    9d46:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9d48:	f7ff bf86 	b.w	9c58 <rx_queue_transfer>
    9d4c:	200225ec 	.word	0x200225ec
    9d50:	20022605 	.word	0x20022605
    9d54:	20022607 	.word	0x20022607
    9d58:	20022040 	.word	0x20022040
    9d5c:	20022074 	.word	0x20022074
    9d60:	2002205c 	.word	0x2002205c
    9d64:	20022030 	.word	0x20022030
    9d68:	20009320 	.word	0x20009320

00009d6c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9d6c:	4b1d      	ldr	r3, [pc, #116]	; (9de4 <usb_serial_flush_callback+0x78>)
    9d6e:	781a      	ldrb	r2, [r3, #0]
    9d70:	2a00      	cmp	r2, #0
    9d72:	d136      	bne.n	9de2 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    9d74:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9d78:	4a1b      	ldr	r2, [pc, #108]	; (9de8 <usb_serial_flush_callback+0x7c>)
    9d7a:	7812      	ldrb	r2, [r2, #0]
    9d7c:	b38a      	cbz	r2, 9de2 <usb_serial_flush_callback+0x76>
{
    9d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    9d82:	4d1a      	ldr	r5, [pc, #104]	; (9dec <usb_serial_flush_callback+0x80>)
    9d84:	882a      	ldrh	r2, [r5, #0]
    9d86:	b352      	cbz	r2, 9dde <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9d88:	4e19      	ldr	r6, [pc, #100]	; (9df0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9d8a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9d8e:	4f19      	ldr	r7, [pc, #100]	; (9df4 <usb_serial_flush_callback+0x88>)
    9d90:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9d92:	4c19      	ldr	r4, [pc, #100]	; (9df8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9d94:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9d98:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9d9c:	4642      	mov	r2, r8
    9d9e:	4638      	mov	r0, r7
    9da0:	4621      	mov	r1, r4
    9da2:	f7ff fa71 	bl	9288 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9da6:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    9daa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9dae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9db2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9db6:	3420      	adds	r4, #32
	} while (location < end_addr);
    9db8:	42a2      	cmp	r2, r4
    9dba:	d8fa      	bhi.n	9db2 <usb_serial_flush_callback+0x46>
	asm("dsb");
    9dbc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9dc0:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9dc4:	2003      	movs	r0, #3
    9dc6:	4639      	mov	r1, r7
    9dc8:	f7ff fa76 	bl	92b8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9dcc:	7833      	ldrb	r3, [r6, #0]
    9dce:	3301      	adds	r3, #1
    9dd0:	b2db      	uxtb	r3, r3
    9dd2:	2b03      	cmp	r3, #3
    9dd4:	bf88      	it	hi
    9dd6:	2300      	movhi	r3, #0
    9dd8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9dda:	2300      	movs	r3, #0
    9ddc:	802b      	strh	r3, [r5, #0]
}
    9dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9de2:	4770      	bx	lr
    9de4:	2002260e 	.word	0x2002260e
    9de8:	20022614 	.word	0x20022614
    9dec:	200225f0 	.word	0x200225f0
    9df0:	2002260c 	.word	0x2002260c
    9df4:	2000a5c0 	.word	0x2000a5c0
    9df8:	2000a640 	.word	0x2000a640

00009dfc <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e00:	b085      	sub	sp, #20
	while (size > 0) {
    9e02:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9e06:	2900      	cmp	r1, #0
    9e08:	f000 80bf 	beq.w	9f8a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9e0c:	2300      	movs	r3, #0
    9e0e:	4c60      	ldr	r4, [pc, #384]	; (9f90 <usb_serial_write.part.0+0x194>)
    9e10:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9fac <usb_serial_write.part.0+0x1b0>
    9e14:	f8df a198 	ldr.w	sl, [pc, #408]	; 9fb0 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9e18:	4f5e      	ldr	r7, [pc, #376]	; (9f94 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9e1a:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9e1c:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9e1e:	4a5e      	ldr	r2, [pc, #376]	; (9f98 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9e20:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    9e22:	4b5e      	ldr	r3, [pc, #376]	; (9f9c <usb_serial_write.part.0+0x1a0>)
    9e24:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    9e26:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9e2a:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9e2e:	2b00      	cmp	r3, #0
    9e30:	f040 80a7 	bne.w	9f82 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    9e34:	461e      	mov	r6, r3
		int waiting=0;
    9e36:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9e38:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9e3a:	4648      	mov	r0, r9
    9e3c:	f7ff fa5e 	bl	92fc <usb_transfer_status>
			if (!(status & 0x80)) {
    9e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    9e44:	f000 808c 	beq.w	9f60 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9e48:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9e4c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9e50:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    9e54:	b905      	cbnz	r5, 9e58 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    9e56:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9e58:	2b00      	cmp	r3, #0
    9e5a:	d17d      	bne.n	9f58 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9e5c:	683b      	ldr	r3, [r7, #0]
    9e5e:	1b9b      	subs	r3, r3, r6
    9e60:	2b78      	cmp	r3, #120	; 0x78
    9e62:	f200 8087 	bhi.w	9f74 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    9e66:	4b4e      	ldr	r3, [pc, #312]	; (9fa0 <usb_serial_write.part.0+0x1a4>)
    9e68:	781b      	ldrb	r3, [r3, #0]
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d074      	beq.n	9f58 <usb_serial_write.part.0+0x15c>
			yield();
    9e6e:	f000 fa93 	bl	a398 <yield>
			tx_noautoflush = 1;
    9e72:	2201      	movs	r2, #1
		while (!tx_available) {
    9e74:	f8b8 3000 	ldrh.w	r3, [r8]
    9e78:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9e7a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d0dc      	beq.n	9e3a <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9e80:	4a46      	ldr	r2, [pc, #280]	; (9f9c <usb_serial_write.part.0+0x1a0>)
    9e82:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9e86:	7811      	ldrb	r1, [r2, #0]
    9e88:	461a      	mov	r2, r3
    9e8a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9e8e:	4d45      	ldr	r5, [pc, #276]	; (9fa4 <usb_serial_write.part.0+0x1a8>)
    9e90:	02c9      	lsls	r1, r1, #11
    9e92:	4428      	add	r0, r5
		if (size >= tx_available) {
    9e94:	9d01      	ldr	r5, [sp, #4]
    9e96:	4295      	cmp	r5, r2
    9e98:	d217      	bcs.n	9eca <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9e9a:	9303      	str	r3, [sp, #12]
    9e9c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9ea0:	462a      	mov	r2, r5
    9ea2:	f7fe fa37 	bl	8314 <memcpy>
			tx_available -= size;
    9ea6:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9ea8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9eac:	1b5b      	subs	r3, r3, r5
    9eae:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9eb2:	4b3d      	ldr	r3, [pc, #244]	; (9fa8 <usb_serial_write.part.0+0x1ac>)
    9eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9eb8:	f3bf 8f4f 	dsb	sy
			sent += size;
    9ebc:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9ebe:	2300      	movs	r3, #0
			sent += size;
    9ec0:	4428      	add	r0, r5
		tx_noautoflush = 0;
    9ec2:	7023      	strb	r3, [r4, #0]
}
    9ec4:	b005      	add	sp, #20
    9ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9eca:	4b36      	ldr	r3, [pc, #216]	; (9fa4 <usb_serial_write.part.0+0x1a8>)
    9ecc:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9ece:	9902      	ldr	r1, [sp, #8]
    9ed0:	f7fe fa20 	bl	8314 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9ed4:	2300      	movs	r3, #0
    9ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9eda:	4629      	mov	r1, r5
    9edc:	4648      	mov	r0, r9
    9ede:	f7ff f9d3 	bl	9288 <usb_prepare_transfer>
	asm("dsb");
    9ee2:	f3bf 8f4f 	dsb	sy
    9ee6:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9eea:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9eee:	4293      	cmp	r3, r2
    9ef0:	bf34      	ite	cc
    9ef2:	2301      	movcc	r3, #1
    9ef4:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9ef6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9efa:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9efe:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    9f02:	3520      	adds	r5, #32
	} while (location < end_addr);
    9f04:	42ab      	cmp	r3, r5
    9f06:	d1fa      	bne.n	9efe <usb_serial_write.part.0+0x102>
	asm("dsb");
    9f08:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9f0c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9f10:	2003      	movs	r0, #3
    9f12:	4649      	mov	r1, r9
    9f14:	f7ff f9d0 	bl	92b8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9f18:	4a20      	ldr	r2, [pc, #128]	; (9f9c <usb_serial_write.part.0+0x1a0>)
    9f1a:	7813      	ldrb	r3, [r2, #0]
    9f1c:	3301      	adds	r3, #1
    9f1e:	b2db      	uxtb	r3, r3
    9f20:	2b03      	cmp	r3, #3
    9f22:	bf84      	itt	hi
    9f24:	2300      	movhi	r3, #0
    9f26:	4a1d      	ldrhi	r2, [pc, #116]	; (9f9c <usb_serial_write.part.0+0x1a0>)
    9f28:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9f2a:	f8b8 3000 	ldrh.w	r3, [r8]
    9f2e:	9a01      	ldr	r2, [sp, #4]
    9f30:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9f32:	9a00      	ldr	r2, [sp, #0]
    9f34:	441a      	add	r2, r3
			size -= tx_available;
    9f36:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9f38:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9f3a:	9a02      	ldr	r2, [sp, #8]
    9f3c:	441a      	add	r2, r3
			tx_available = 0;
    9f3e:	2300      	movs	r3, #0
			data += tx_available;
    9f40:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    9f42:	4a19      	ldr	r2, [pc, #100]	; (9fa8 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    9f44:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9f48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9f4c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9f50:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    9f52:	2900      	cmp	r1, #0
    9f54:	f47f af62 	bne.w	9e1c <usb_serial_write.part.0+0x20>
	return sent;
    9f58:	9800      	ldr	r0, [sp, #0]
}
    9f5a:	b005      	add	sp, #20
    9f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f64:	4b0d      	ldr	r3, [pc, #52]	; (9f9c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    9f66:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f6a:	7819      	ldrb	r1, [r3, #0]
				break;
    9f6c:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9f6e:	f8a8 2000 	strh.w	r2, [r8]
				break;
    9f72:	e78a      	b.n	9e8a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    9f74:	2301      	movs	r3, #1
				return sent;
    9f76:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    9f78:	f88a 3000 	strb.w	r3, [sl]
}
    9f7c:	b005      	add	sp, #20
    9f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f82:	461a      	mov	r2, r3
    9f84:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9f88:	e77f      	b.n	9e8a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    9f8a:	9801      	ldr	r0, [sp, #4]
	return sent;
    9f8c:	e7e5      	b.n	9f5a <usb_serial_write.part.0+0x15e>
    9f8e:	bf00      	nop
    9f90:	2002260e 	.word	0x2002260e
    9f94:	20022564 	.word	0x20022564
    9f98:	2000a5c0 	.word	0x2000a5c0
    9f9c:	2002260c 	.word	0x2002260c
    9fa0:	20022614 	.word	0x20022614
    9fa4:	2000a640 	.word	0x2000a640
    9fa8:	402e0000 	.word	0x402e0000
    9fac:	200225f0 	.word	0x200225f0
    9fb0:	2002260a 	.word	0x2002260a

00009fb4 <usb_serial_reset>:
}
    9fb4:	4770      	bx	lr
    9fb6:	bf00      	nop

00009fb8 <usb_serial_configure>:
	if (usb_high_speed) {
    9fb8:	4b2a      	ldr	r3, [pc, #168]	; (a064 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9fba:	2100      	movs	r1, #0
    9fbc:	2280      	movs	r2, #128	; 0x80
    9fbe:	482a      	ldr	r0, [pc, #168]	; (a068 <usb_serial_configure+0xb0>)
{
    9fc0:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9fc2:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    9fc4:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9fc6:	4d29      	ldr	r5, [pc, #164]	; (a06c <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9fc8:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9fca:	4e29      	ldr	r6, [pc, #164]	; (a070 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9fcc:	bf0c      	ite	eq
    9fce:	2340      	moveq	r3, #64	; 0x40
    9fd0:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9fd4:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9fd6:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9fd8:	f002 fc34 	bl	c844 <memset>
	tx_head = 0;
    9fdc:	4a25      	ldr	r2, [pc, #148]	; (a074 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9fde:	4621      	mov	r1, r4
	tx_available = 0;
    9fe0:	4b25      	ldr	r3, [pc, #148]	; (a078 <usb_serial_configure+0xc0>)
	tx_head = 0;
    9fe2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
    9fe8:	4824      	ldr	r0, [pc, #144]	; (a07c <usb_serial_configure+0xc4>)
	tx_available = 0;
    9fea:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9fec:	f002 fc2a 	bl	c844 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9ff0:	4a23      	ldr	r2, [pc, #140]	; (a080 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9ff2:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    9ff4:	4b23      	ldr	r3, [pc, #140]	; (a084 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9ff6:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9ff8:	e9c2 4400 	strd	r4, r4, [r2]
    9ffc:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a000:	4a21      	ldr	r2, [pc, #132]	; (a088 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a002:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    a006:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    a008:	4a20      	ldr	r2, [pc, #128]	; (a08c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a00a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a00e:	4b20      	ldr	r3, [pc, #128]	; (a090 <usb_serial_configure+0xd8>)
    a010:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a012:	4623      	mov	r3, r4
	rx_available = 0;
    a014:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a016:	4622      	mov	r2, r4
    a018:	f7ff f89c 	bl	9154 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a01c:	4622      	mov	r2, r4
    a01e:	8831      	ldrh	r1, [r6, #0]
    a020:	2003      	movs	r0, #3
    a022:	4b1c      	ldr	r3, [pc, #112]	; (a094 <usb_serial_configure+0xdc>)
    a024:	f7ff f864 	bl	90f0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a028:	4623      	mov	r3, r4
    a02a:	2201      	movs	r2, #1
    a02c:	8829      	ldrh	r1, [r5, #0]
    a02e:	2003      	movs	r0, #3
    a030:	f7ff f890 	bl	9154 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a034:	4620      	mov	r0, r4
    a036:	3401      	adds	r4, #1
    a038:	f7ff fe0e 	bl	9c58 <rx_queue_transfer>
    a03c:	2c08      	cmp	r4, #8
    a03e:	d1f9      	bne.n	a034 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a040:	4b15      	ldr	r3, [pc, #84]	; (a098 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a042:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a044:	4815      	ldr	r0, [pc, #84]	; (a09c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a046:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    a048:	4c15      	ldr	r4, [pc, #84]	; (a0a0 <usb_serial_configure+0xe8>)
    a04a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a04c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a054:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a058:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a05c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    a060:	bd70      	pop	{r4, r5, r6, pc}
    a062:	bf00      	nop
    a064:	20022615 	.word	0x20022615
    a068:	2000a5c0 	.word	0x2000a5c0
    a06c:	200225f4 	.word	0x200225f4
    a070:	200225ec 	.word	0x200225ec
    a074:	2002260c 	.word	0x2002260c
    a078:	200225f0 	.word	0x200225f0
    a07c:	2000a400 	.word	0x2000a400
    a080:	20022040 	.word	0x20022040
    a084:	2002205c 	.word	0x2002205c
    a088:	20022605 	.word	0x20022605
    a08c:	20022030 	.word	0x20022030
    a090:	20022607 	.word	0x20022607
    a094:	00009cb9 	.word	0x00009cb9
    a098:	402e0000 	.word	0x402e0000
    a09c:	200225cc 	.word	0x200225cc
    a0a0:	00009d6d 	.word	0x00009d6d

0000a0a4 <usb_serial_read>:
{
    a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a0ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a0b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a17c <usb_serial_read+0xd8>
{
    a0b4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a0ba:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    a0bc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a0c0:	2900      	cmp	r1, #0
    a0c2:	d04f      	beq.n	a164 <usb_serial_read+0xc0>
    a0c4:	4680      	mov	r8, r0
    a0c6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    a0c8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a0ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a180 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a0ce:	4b26      	ldr	r3, [pc, #152]	; (a168 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a0d0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0d4:	4925      	ldr	r1, [pc, #148]	; (a16c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a0da:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a0de:	d03f      	beq.n	a160 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a0e0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a0e2:	4b23      	ldr	r3, [pc, #140]	; (a170 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0e4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a0e6:	bf28      	it	cs
    a0e8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a0ea:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a0ec:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0f0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    a0f4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a0f6:	4b1f      	ldr	r3, [pc, #124]	; (a174 <usb_serial_read+0xd0>)
    a0f8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    a0fc:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    a100:	42aa      	cmp	r2, r5
    a102:	d21c      	bcs.n	a13e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a104:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    a108:	4918      	ldr	r1, [pc, #96]	; (a16c <usb_serial_read+0xc8>)
			rx_available -= len;
    a10a:	4c1b      	ldr	r4, [pc, #108]	; (a178 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a10c:	4461      	add	r1, ip
    a10e:	9201      	str	r2, [sp, #4]
    a110:	f7fe f900 	bl	8314 <memcpy>
			rx_available -= len;
    a114:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a116:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a11a:	4658      	mov	r0, fp
			rx_index[i] += len;
    a11c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    a11e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    a122:	442a      	add	r2, r5
			rx_available -= len;
    a124:	4439      	add	r1, r7
			rx_index[i] += len;
    a126:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a12a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a12c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a134:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    a138:	b003      	add	sp, #12
    a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a13e:	462a      	mov	r2, r5
			count += avail;
    a140:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a142:	f7fe f8e7 	bl	8314 <memcpy>
			rx_available -= avail;
    a146:	490c      	ldr	r1, [pc, #48]	; (a178 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a148:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    a14a:	4630      	mov	r0, r6
			rx_available -= avail;
    a14c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    a14e:	44a8      	add	r8, r5
			rx_available -= avail;
    a150:	1b52      	subs	r2, r2, r5
    a152:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    a154:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a158:	f7ff fd7e 	bl	9c58 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a15c:	45bb      	cmp	fp, r7
    a15e:	d8b6      	bhi.n	a0ce <usb_serial_read+0x2a>
	return count;
    a160:	4638      	mov	r0, r7
    a162:	e7e3      	b.n	a12c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a164:	4608      	mov	r0, r1
    a166:	e7e1      	b.n	a12c <usb_serial_read+0x88>
    a168:	20022605 	.word	0x20022605
    a16c:	20009320 	.word	0x20009320
    a170:	20022074 	.word	0x20022074
    a174:	20022040 	.word	0x20022040
    a178:	20022030 	.word	0x20022030
    a17c:	20022607 	.word	0x20022607
    a180:	2002205c 	.word	0x2002205c

0000a184 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a184:	4b0b      	ldr	r3, [pc, #44]	; (a1b4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a186:	4a0c      	ldr	r2, [pc, #48]	; (a1b8 <usb_serial_peekchar+0x34>)
    a188:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a18a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a18c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a18e:	428a      	cmp	r2, r1
    a190:	d00d      	beq.n	a1ae <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a192:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a194:	4809      	ldr	r0, [pc, #36]	; (a1bc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a196:	4a0a      	ldr	r2, [pc, #40]	; (a1c0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a198:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a19a:	490a      	ldr	r1, [pc, #40]	; (a1c4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a19c:	bf28      	it	cs
    a19e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a1a0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a1a2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a1a6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a1aa:	5c58      	ldrb	r0, [r3, r1]
    a1ac:	4770      	bx	lr
	if (tail == rx_head) return -1;
    a1ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    a1b2:	4770      	bx	lr
    a1b4:	20022605 	.word	0x20022605
    a1b8:	20022607 	.word	0x20022607
    a1bc:	20022074 	.word	0x20022074
    a1c0:	20009320 	.word	0x20009320
    a1c4:	2002205c 	.word	0x2002205c

0000a1c8 <usb_serial_available>:
	uint32_t n = rx_available;
    a1c8:	4b04      	ldr	r3, [pc, #16]	; (a1dc <usb_serial_available+0x14>)
{
    a1ca:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    a1cc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a1ce:	b10c      	cbz	r4, a1d4 <usb_serial_available+0xc>
}
    a1d0:	4620      	mov	r0, r4
    a1d2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    a1d4:	f000 f8e0 	bl	a398 <yield>
}
    a1d8:	4620      	mov	r0, r4
    a1da:	bd10      	pop	{r4, pc}
    a1dc:	20022030 	.word	0x20022030

0000a1e0 <usb_serial_flush_input>:
{
    a1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a1e4:	4e14      	ldr	r6, [pc, #80]	; (a238 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a1e6:	4d15      	ldr	r5, [pc, #84]	; (a23c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a1e8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a1ea:	782a      	ldrb	r2, [r5, #0]
    a1ec:	4293      	cmp	r3, r2
    a1ee:	d021      	beq.n	a234 <usb_serial_flush_input+0x54>
    a1f0:	b2dc      	uxtb	r4, r3
    a1f2:	f8df 9050 	ldr.w	r9, [pc, #80]	; a244 <usb_serial_flush_input+0x64>
    a1f6:	f8df b050 	ldr.w	fp, [pc, #80]	; a248 <usb_serial_flush_input+0x68>
    a1fa:	f8df 8050 	ldr.w	r8, [pc, #80]	; a24c <usb_serial_flush_input+0x6c>
    a1fe:	4f10      	ldr	r7, [pc, #64]	; (a240 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a200:	3401      	adds	r4, #1
    a202:	2c08      	cmp	r4, #8
		rx_tail = tail;
    a204:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a208:	d901      	bls.n	a20e <usb_serial_flush_input+0x2e>
    a20a:	2400      	movs	r4, #0
    a20c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a20e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a212:	f8db 3000 	ldr.w	r3, [fp]
    a216:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    a21a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    a21e:	1a52      	subs	r2, r2, r1
    a220:	1a9b      	subs	r3, r3, r2
    a222:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a226:	f7ff fd17 	bl	9c58 <rx_queue_transfer>
		rx_tail = tail;
    a22a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    a22e:	782b      	ldrb	r3, [r5, #0]
    a230:	42a3      	cmp	r3, r4
    a232:	d1e5      	bne.n	a200 <usb_serial_flush_input+0x20>
}
    a234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a238:	20022607 	.word	0x20022607
    a23c:	20022605 	.word	0x20022605
    a240:	2002205c 	.word	0x2002205c
    a244:	20022074 	.word	0x20022074
    a248:	20022030 	.word	0x20022030
    a24c:	20022040 	.word	0x20022040

0000a250 <usb_serial_getchar>:
{
    a250:	b500      	push	{lr}
    a252:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a254:	2101      	movs	r1, #1
    a256:	f10d 0007 	add.w	r0, sp, #7
    a25a:	f7ff ff23 	bl	a0a4 <usb_serial_read>
    a25e:	b120      	cbz	r0, a26a <usb_serial_getchar+0x1a>
    a260:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    a264:	b003      	add	sp, #12
    a266:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    a26a:	f04f 30ff 	mov.w	r0, #4294967295
    a26e:	e7f9      	b.n	a264 <usb_serial_getchar+0x14>

0000a270 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a270:	4b09      	ldr	r3, [pc, #36]	; (a298 <usb_serial_putchar+0x28>)
{
    a272:	b500      	push	{lr}
    a274:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    a276:	781b      	ldrb	r3, [r3, #0]
{
    a278:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a27c:	b13b      	cbz	r3, a28e <usb_serial_putchar+0x1e>
    a27e:	2101      	movs	r1, #1
    a280:	f10d 0007 	add.w	r0, sp, #7
    a284:	f7ff fdba 	bl	9dfc <usb_serial_write.part.0>
}
    a288:	b003      	add	sp, #12
    a28a:	f85d fb04 	ldr.w	pc, [sp], #4
    a28e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a292:	b003      	add	sp, #12
    a294:	f85d fb04 	ldr.w	pc, [sp], #4
    a298:	20022614 	.word	0x20022614

0000a29c <usb_serial_write>:
	if (!usb_configuration) return 0;
    a29c:	4b04      	ldr	r3, [pc, #16]	; (a2b0 <usb_serial_write+0x14>)
    a29e:	781b      	ldrb	r3, [r3, #0]
    a2a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a2a4:	b10b      	cbz	r3, a2aa <usb_serial_write+0xe>
    a2a6:	f7ff bda9 	b.w	9dfc <usb_serial_write.part.0>
}
    a2aa:	4610      	mov	r0, r2
    a2ac:	4770      	bx	lr
    a2ae:	bf00      	nop
    a2b0:	20022614 	.word	0x20022614

0000a2b4 <usb_serial_write_buffer_free>:
{
    a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a2b8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a2ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; a300 <usb_serial_write_buffer_free+0x4c>
    a2be:	2301      	movs	r3, #1
    a2c0:	4d0d      	ldr	r5, [pc, #52]	; (a2f8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a2c2:	4627      	mov	r7, r4
    a2c4:	4e0d      	ldr	r6, [pc, #52]	; (a2fc <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a2c6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a2ca:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a2cc:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a2ce:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a2d0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a2d2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a2d6:	d005      	beq.n	a2e4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a2d8:	f7ff f810 	bl	92fc <usb_transfer_status>
    a2dc:	0603      	lsls	r3, r0, #24
    a2de:	bf58      	it	pl
    a2e0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a2e4:	2c04      	cmp	r4, #4
    a2e6:	d1f0      	bne.n	a2ca <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a2e8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a2ec:	2300      	movs	r3, #0
}
    a2ee:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a2f0:	f888 3000 	strb.w	r3, [r8]
}
    a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2f8:	2000a5c0 	.word	0x2000a5c0
    a2fc:	2002260c 	.word	0x2002260c
    a300:	2002260e 	.word	0x2002260e

0000a304 <usb_serial_flush_output>:
{
    a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a308:	4b1d      	ldr	r3, [pc, #116]	; (a380 <usb_serial_flush_output+0x7c>)
    a30a:	781b      	ldrb	r3, [r3, #0]
    a30c:	b113      	cbz	r3, a314 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a30e:	4d1d      	ldr	r5, [pc, #116]	; (a384 <usb_serial_flush_output+0x80>)
    a310:	882a      	ldrh	r2, [r5, #0]
    a312:	b90a      	cbnz	r2, a318 <usb_serial_flush_output+0x14>
}
    a314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a318:	4e1b      	ldr	r6, [pc, #108]	; (a388 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a31a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a31e:	491b      	ldr	r1, [pc, #108]	; (a38c <usb_serial_flush_output+0x88>)
    a320:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a322:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a324:	4c1a      	ldr	r4, [pc, #104]	; (a390 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a326:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a32a:	4f1a      	ldr	r7, [pc, #104]	; (a394 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a32c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a330:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a332:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a334:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a336:	4621      	mov	r1, r4
    a338:	2300      	movs	r3, #0
    a33a:	f7fe ffa5 	bl	9288 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a33e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a342:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a346:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a34a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a34e:	3420      	adds	r4, #32
	} while (location < end_addr);
    a350:	42a2      	cmp	r2, r4
    a352:	d8fa      	bhi.n	a34a <usb_serial_flush_output+0x46>
	asm("dsb");
    a354:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a358:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a35c:	2003      	movs	r0, #3
    a35e:	4641      	mov	r1, r8
    a360:	f7fe ffaa 	bl	92b8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a364:	7833      	ldrb	r3, [r6, #0]
    a366:	3301      	adds	r3, #1
    a368:	b2db      	uxtb	r3, r3
    a36a:	2b03      	cmp	r3, #3
    a36c:	bf88      	it	hi
    a36e:	2300      	movhi	r3, #0
    a370:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a372:	2300      	movs	r3, #0
    a374:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a376:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a37a:	703b      	strb	r3, [r7, #0]
}
    a37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a380:	20022614 	.word	0x20022614
    a384:	200225f0 	.word	0x200225f0
    a388:	2002260c 	.word	0x2002260c
    a38c:	2000a5c0 	.word	0x2000a5c0
    a390:	2000a640 	.word	0x2000a640
    a394:	2002260e 	.word	0x2002260e

0000a398 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a39c:	4e32      	ldr	r6, [pc, #200]	; (a468 <yield+0xd0>)
    a39e:	7833      	ldrb	r3, [r6, #0]
    a3a0:	b163      	cbz	r3, a3bc <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a3a2:	4f32      	ldr	r7, [pc, #200]	; (a46c <yield+0xd4>)
    a3a4:	783a      	ldrb	r2, [r7, #0]
    a3a6:	b94a      	cbnz	r2, a3bc <yield+0x24>
	running = 1;
    a3a8:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a3aa:	07d9      	lsls	r1, r3, #31
	running = 1;
    a3ac:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a3ae:	d444      	bmi.n	a43a <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a3b0:	079a      	lsls	r2, r3, #30
    a3b2:	d426      	bmi.n	a402 <yield+0x6a>

	running = 0;
    a3b4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a3b6:	075b      	lsls	r3, r3, #29
	running = 0;
    a3b8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a3ba:	d401      	bmi.n	a3c0 <yield+0x28>
	
};
    a3bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    a3c0:	4b2b      	ldr	r3, [pc, #172]	; (a470 <yield+0xd8>)
    a3c2:	681a      	ldr	r2, [r3, #0]
    a3c4:	2a00      	cmp	r2, #0
    a3c6:	d0f9      	beq.n	a3bc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a3c8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a3cc:	2a00      	cmp	r2, #0
    a3ce:	d1f5      	bne.n	a3bc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a3d0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a3d4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a3d6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a3d8:	2800      	cmp	r0, #0
    a3da:	d03b      	beq.n	a454 <yield+0xbc>
		if (runningFromYield) {
    a3dc:	4c25      	ldr	r4, [pc, #148]	; (a474 <yield+0xdc>)
    a3de:	7821      	ldrb	r1, [r4, #0]
    a3e0:	2900      	cmp	r1, #0
    a3e2:	d137      	bne.n	a454 <yield+0xbc>
		runningFromYield = true;
    a3e4:	2201      	movs	r2, #1
    a3e6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a3e8:	6942      	ldr	r2, [r0, #20]
    a3ea:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a3ec:	2a00      	cmp	r2, #0
    a3ee:	d038      	beq.n	a462 <yield+0xca>
			firstYield->_prev = nullptr;
    a3f0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    a3f2:	b905      	cbnz	r5, a3f6 <yield+0x5e>
    a3f4:	b662      	cpsie	i
		first->_triggered = false;
    a3f6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a3f8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a3fa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a3fc:	4798      	blx	r3
		runningFromYield = false;
    a3fe:	7025      	strb	r5, [r4, #0]
    a400:	e7dc      	b.n	a3bc <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a402:	f8df 807c 	ldr.w	r8, [pc, #124]	; a480 <yield+0xe8>
    a406:	f898 2000 	ldrb.w	r2, [r8]
    a40a:	2a00      	cmp	r2, #0
    a40c:	d0d2      	beq.n	a3b4 <yield+0x1c>
    a40e:	2500      	movs	r5, #0
    a410:	f8df 9070 	ldr.w	r9, [pc, #112]	; a484 <yield+0xec>
    a414:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a416:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a41a:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a41c:	6823      	ldr	r3, [r4, #0]
    a41e:	4620      	mov	r0, r4
    a420:	691b      	ldr	r3, [r3, #16]
    a422:	4798      	blx	r3
    a424:	b110      	cbz	r0, a42c <yield+0x94>
    a426:	6963      	ldr	r3, [r4, #20]
    a428:	689b      	ldr	r3, [r3, #8]
    a42a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a42c:	f898 2000 	ldrb.w	r2, [r8]
    a430:	b2eb      	uxtb	r3, r5
    a432:	429a      	cmp	r2, r3
    a434:	d8ef      	bhi.n	a416 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a436:	7833      	ldrb	r3, [r6, #0]
    a438:	e7bc      	b.n	a3b4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a43a:	f7ff fec5 	bl	a1c8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a43e:	b968      	cbnz	r0, a45c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a440:	4b0d      	ldr	r3, [pc, #52]	; (a478 <yield+0xe0>)
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	b90b      	cbnz	r3, a44a <yield+0xb2>
    a446:	7833      	ldrb	r3, [r6, #0]
    a448:	e7b2      	b.n	a3b0 <yield+0x18>
    a44a:	7833      	ldrb	r3, [r6, #0]
    a44c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a450:	7033      	strb	r3, [r6, #0]
    a452:	e7ad      	b.n	a3b0 <yield+0x18>
		if (doit) __enable_irq();
    a454:	2d00      	cmp	r5, #0
    a456:	d1b1      	bne.n	a3bc <yield+0x24>
    a458:	b662      	cpsie	i
    a45a:	e7af      	b.n	a3bc <yield+0x24>
		if (Serial.available()) serialEvent();
    a45c:	f000 f8cc 	bl	a5f8 <serialEvent()>
    a460:	e7ee      	b.n	a440 <yield+0xa8>
			lastYield = nullptr;
    a462:	4b06      	ldr	r3, [pc, #24]	; (a47c <yield+0xe4>)
    a464:	601a      	str	r2, [r3, #0]
    a466:	e7c4      	b.n	a3f2 <yield+0x5a>
    a468:	20008ec7 	.word	0x20008ec7
    a46c:	20022601 	.word	0x20022601
    a470:	20020148 	.word	0x20020148
    a474:	200225ff 	.word	0x200225ff
    a478:	60002846 	.word	0x60002846
    a47c:	20020154 	.word	0x20020154
    a480:	20022600 	.word	0x20022600
    a484:	20020158 	.word	0x20020158

0000a488 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a488:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a48a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a48c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a490:	4619      	mov	r1, r3
{
    a492:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a494:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a498:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a49c:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a4a0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a4a4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a4a8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a4aa:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a4ae:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a4b2:	b29b      	uxth	r3, r3
    a4b4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a4b8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a4bc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a4c0:	3101      	adds	r1, #1
    a4c2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a4c6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a4c8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a4ca:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a4ce:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a4d0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a4d2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a4d4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a4d6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a4da:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a4dc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a4de:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a4e0:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a4e2:	d1eb      	bne.n	a4bc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a4e4:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a4e8:	b29b      	uxth	r3, r3
    a4ea:	f043 030f 	orr.w	r3, r3, #15
    a4ee:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a4f2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a4f6:	b29b      	uxth	r3, r3
    a4f8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a4fc:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a500:	bd10      	pop	{r4, pc}
    a502:	bf00      	nop

0000a504 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a504:	4b37      	ldr	r3, [pc, #220]	; (a5e4 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a506:	4a38      	ldr	r2, [pc, #224]	; (a5e8 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a508:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a50a:	4838      	ldr	r0, [pc, #224]	; (a5ec <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a50c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a510:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a512:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a514:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a518:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a51c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a520:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a524:	430a      	orrs	r2, r1
    a526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a52a:	f7ff ffad 	bl	a488 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a52e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a532:	f7ff ffa9 	bl	a488 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a536:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a53a:	f7ff ffa5 	bl	a488 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a53e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a542:	f7ff ffa1 	bl	a488 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a546:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a548:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a54c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a550:	4611      	mov	r1, r2
    a552:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a556:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a55a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a55c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a55e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a560:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a562:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a566:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a568:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a56a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a56e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a570:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a572:	d1ee      	bne.n	a552 <pwm_init+0x4e>
    a574:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a576:	481e      	ldr	r0, [pc, #120]	; (a5f0 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a578:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a57c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a580:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a582:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a586:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a58a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a58e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a592:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a594:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a596:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a598:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a59a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a59e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a5a0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a5a2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a5a6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a5a8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a5aa:	d1ee      	bne.n	a58a <pwm_init+0x86>
    a5ac:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a5ae:	4811      	ldr	r0, [pc, #68]	; (a5f4 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a5b0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a5b2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a5b6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a5b8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a5bc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a5c0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a5c4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a5c8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a5ca:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a5cc:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a5ce:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a5d0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a5d2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a5d4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a5d6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a5da:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a5dc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    a5e0:	d1ee      	bne.n	a5c0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a5e2:	bd70      	pop	{r4, r5, r6, pc}
    a5e4:	400fc000 	.word	0x400fc000
    a5e8:	fc030000 	.word	0xfc030000
    a5ec:	403dc000 	.word	0x403dc000
    a5f0:	401e0000 	.word	0x401e0000
    a5f4:	401e4000 	.word	0x401e4000

0000a5f8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a5f8:	4770      	bx	lr
    a5fa:	bf00      	nop

0000a5fc <sm_align_pool>:
{
    a5fc:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    a5fe:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    a602:	b15b      	cbz	r3, a61c <sm_align_pool+0x20>
    a604:	b1ba      	cbz	r2, a636 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    a606:	4b0f      	ldr	r3, [pc, #60]	; (a644 <sm_align_pool+0x48>)
    a608:	fba3 1302 	umull	r1, r3, r3, r2
    a60c:	08db      	lsrs	r3, r3, #3
    a60e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a612:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a616:	d10a      	bne.n	a62e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    a618:	2001      	movs	r0, #1
}
    a61a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    a61c:	4b09      	ldr	r3, [pc, #36]	; (a644 <sm_align_pool+0x48>)
    a61e:	fba3 1302 	umull	r1, r3, r3, r2
    a622:	08db      	lsrs	r3, r3, #3
    a624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    a628:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a62c:	d001      	beq.n	a632 <sm_align_pool+0x36>
    a62e:	1ad2      	subs	r2, r2, r3
    a630:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    a632:	2af0      	cmp	r2, #240	; 0xf0
    a634:	d8f0      	bhi.n	a618 <sm_align_pool+0x1c>
		errno = ENOSPC;
    a636:	f002 fa3b 	bl	cab0 <__errno>
    a63a:	221c      	movs	r2, #28
    a63c:	4603      	mov	r3, r0
    a63e:	2000      	movs	r0, #0
    a640:	601a      	str	r2, [r3, #0]
}
    a642:	bd08      	pop	{r3, pc}
    a644:	aaaaaaab 	.word	0xaaaaaaab

0000a648 <sm_set_pool>:
{
    a648:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    a64a:	4604      	mov	r4, r0
    a64c:	b338      	cbz	r0, a69e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    a64e:	b119      	cbz	r1, a658 <sm_set_pool+0x10>
    a650:	fab2 f682 	clz	r6, r2
    a654:	0976      	lsrs	r6, r6, #5
    a656:	b9a2      	cbnz	r2, a682 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    a658:	6820      	ldr	r0, [r4, #0]
    a65a:	b300      	cbz	r0, a69e <sm_set_pool+0x56>
    a65c:	6862      	ldr	r2, [r4, #4]
    a65e:	b1f2      	cbz	r2, a69e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    a660:	4b18      	ldr	r3, [pc, #96]	; (a6c4 <sm_set_pool+0x7c>)
    a662:	4919      	ldr	r1, [pc, #100]	; (a6c8 <sm_set_pool+0x80>)
    a664:	fb02 f303 	mul.w	r3, r2, r3
    a668:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    a66c:	d317      	bcc.n	a69e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a66e:	68a3      	ldr	r3, [r4, #8]
    a670:	b9e3      	cbnz	r3, a6ac <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    a672:	2200      	movs	r2, #0
			return 1;
    a674:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    a676:	6022      	str	r2, [r4, #0]
    a678:	6062      	str	r2, [r4, #4]
    a67a:	60a2      	str	r2, [r4, #8]
    a67c:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    a67e:	4618      	mov	r0, r3
    a680:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    a682:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    a684:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    a686:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    a68a:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    a68c:	f7ff ffb6 	bl	a5fc <sm_align_pool>
    a690:	4603      	mov	r3, r0
    a692:	2800      	cmp	r0, #0
    a694:	d0f3      	beq.n	a67e <sm_set_pool+0x36>
	if (do_zero) {
    a696:	b96d      	cbnz	r5, a6b4 <sm_set_pool+0x6c>
	return 1;
    a698:	2301      	movs	r3, #1
}
    a69a:	4618      	mov	r0, r3
    a69c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    a69e:	f002 fa07 	bl	cab0 <__errno>
    a6a2:	2216      	movs	r2, #22
		return 0;
    a6a4:	2300      	movs	r3, #0
		errno = EINVAL;
    a6a6:	6002      	str	r2, [r0, #0]
}
    a6a8:	4618      	mov	r0, r3
    a6aa:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a6ac:	2100      	movs	r1, #0
    a6ae:	f002 f8c9 	bl	c844 <memset>
    a6b2:	e7de      	b.n	a672 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    a6b4:	6862      	ldr	r2, [r4, #4]
    a6b6:	4631      	mov	r1, r6
    a6b8:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    a6ba:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    a6bc:	f002 f8c2 	bl	c844 <memset>
	return 1;
    a6c0:	2301      	movs	r3, #1
    a6c2:	e7dc      	b.n	a67e <sm_set_pool+0x36>
    a6c4:	aaaaaaab 	.word	0xaaaaaaab
    a6c8:	15555555 	.word	0x15555555

0000a6cc <__aeabi_atexit>:
    a6cc:	4603      	mov	r3, r0
    a6ce:	4608      	mov	r0, r1
    a6d0:	4619      	mov	r1, r3
    a6d2:	f001 be27 	b.w	c324 <__cxa_atexit>
    a6d6:	bf00      	nop

0000a6d8 <__aeabi_uldivmod>:
    a6d8:	b953      	cbnz	r3, a6f0 <__aeabi_uldivmod+0x18>
    a6da:	b94a      	cbnz	r2, a6f0 <__aeabi_uldivmod+0x18>
    a6dc:	2900      	cmp	r1, #0
    a6de:	bf08      	it	eq
    a6e0:	2800      	cmpeq	r0, #0
    a6e2:	bf1c      	itt	ne
    a6e4:	f04f 31ff 	movne.w	r1, #4294967295
    a6e8:	f04f 30ff 	movne.w	r0, #4294967295
    a6ec:	f000 b970 	b.w	a9d0 <__aeabi_idiv0>
    a6f0:	f1ad 0c08 	sub.w	ip, sp, #8
    a6f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    a6f8:	f000 f806 	bl	a708 <__udivmoddi4>
    a6fc:	f8dd e004 	ldr.w	lr, [sp, #4]
    a700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a704:	b004      	add	sp, #16
    a706:	4770      	bx	lr

0000a708 <__udivmoddi4>:
    a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a70c:	9e08      	ldr	r6, [sp, #32]
    a70e:	460d      	mov	r5, r1
    a710:	4604      	mov	r4, r0
    a712:	460f      	mov	r7, r1
    a714:	2b00      	cmp	r3, #0
    a716:	d14a      	bne.n	a7ae <__udivmoddi4+0xa6>
    a718:	428a      	cmp	r2, r1
    a71a:	4694      	mov	ip, r2
    a71c:	d965      	bls.n	a7ea <__udivmoddi4+0xe2>
    a71e:	fab2 f382 	clz	r3, r2
    a722:	b143      	cbz	r3, a736 <__udivmoddi4+0x2e>
    a724:	fa02 fc03 	lsl.w	ip, r2, r3
    a728:	f1c3 0220 	rsb	r2, r3, #32
    a72c:	409f      	lsls	r7, r3
    a72e:	fa20 f202 	lsr.w	r2, r0, r2
    a732:	4317      	orrs	r7, r2
    a734:	409c      	lsls	r4, r3
    a736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    a73a:	fa1f f58c 	uxth.w	r5, ip
    a73e:	fbb7 f1fe 	udiv	r1, r7, lr
    a742:	0c22      	lsrs	r2, r4, #16
    a744:	fb0e 7711 	mls	r7, lr, r1, r7
    a748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    a74c:	fb01 f005 	mul.w	r0, r1, r5
    a750:	4290      	cmp	r0, r2
    a752:	d90a      	bls.n	a76a <__udivmoddi4+0x62>
    a754:	eb1c 0202 	adds.w	r2, ip, r2
    a758:	f101 37ff 	add.w	r7, r1, #4294967295
    a75c:	f080 811c 	bcs.w	a998 <__udivmoddi4+0x290>
    a760:	4290      	cmp	r0, r2
    a762:	f240 8119 	bls.w	a998 <__udivmoddi4+0x290>
    a766:	3902      	subs	r1, #2
    a768:	4462      	add	r2, ip
    a76a:	1a12      	subs	r2, r2, r0
    a76c:	b2a4      	uxth	r4, r4
    a76e:	fbb2 f0fe 	udiv	r0, r2, lr
    a772:	fb0e 2210 	mls	r2, lr, r0, r2
    a776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    a77a:	fb00 f505 	mul.w	r5, r0, r5
    a77e:	42a5      	cmp	r5, r4
    a780:	d90a      	bls.n	a798 <__udivmoddi4+0x90>
    a782:	eb1c 0404 	adds.w	r4, ip, r4
    a786:	f100 32ff 	add.w	r2, r0, #4294967295
    a78a:	f080 8107 	bcs.w	a99c <__udivmoddi4+0x294>
    a78e:	42a5      	cmp	r5, r4
    a790:	f240 8104 	bls.w	a99c <__udivmoddi4+0x294>
    a794:	4464      	add	r4, ip
    a796:	3802      	subs	r0, #2
    a798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    a79c:	1b64      	subs	r4, r4, r5
    a79e:	2100      	movs	r1, #0
    a7a0:	b11e      	cbz	r6, a7aa <__udivmoddi4+0xa2>
    a7a2:	40dc      	lsrs	r4, r3
    a7a4:	2300      	movs	r3, #0
    a7a6:	e9c6 4300 	strd	r4, r3, [r6]
    a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7ae:	428b      	cmp	r3, r1
    a7b0:	d908      	bls.n	a7c4 <__udivmoddi4+0xbc>
    a7b2:	2e00      	cmp	r6, #0
    a7b4:	f000 80ed 	beq.w	a992 <__udivmoddi4+0x28a>
    a7b8:	2100      	movs	r1, #0
    a7ba:	e9c6 0500 	strd	r0, r5, [r6]
    a7be:	4608      	mov	r0, r1
    a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7c4:	fab3 f183 	clz	r1, r3
    a7c8:	2900      	cmp	r1, #0
    a7ca:	d149      	bne.n	a860 <__udivmoddi4+0x158>
    a7cc:	42ab      	cmp	r3, r5
    a7ce:	d302      	bcc.n	a7d6 <__udivmoddi4+0xce>
    a7d0:	4282      	cmp	r2, r0
    a7d2:	f200 80f8 	bhi.w	a9c6 <__udivmoddi4+0x2be>
    a7d6:	1a84      	subs	r4, r0, r2
    a7d8:	eb65 0203 	sbc.w	r2, r5, r3
    a7dc:	2001      	movs	r0, #1
    a7de:	4617      	mov	r7, r2
    a7e0:	2e00      	cmp	r6, #0
    a7e2:	d0e2      	beq.n	a7aa <__udivmoddi4+0xa2>
    a7e4:	e9c6 4700 	strd	r4, r7, [r6]
    a7e8:	e7df      	b.n	a7aa <__udivmoddi4+0xa2>
    a7ea:	b902      	cbnz	r2, a7ee <__udivmoddi4+0xe6>
    a7ec:	deff      	udf	#255	; 0xff
    a7ee:	fab2 f382 	clz	r3, r2
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	f040 8090 	bne.w	a918 <__udivmoddi4+0x210>
    a7f8:	1a8a      	subs	r2, r1, r2
    a7fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
    a7fe:	fa1f fe8c 	uxth.w	lr, ip
    a802:	2101      	movs	r1, #1
    a804:	fbb2 f5f7 	udiv	r5, r2, r7
    a808:	fb07 2015 	mls	r0, r7, r5, r2
    a80c:	0c22      	lsrs	r2, r4, #16
    a80e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    a812:	fb0e f005 	mul.w	r0, lr, r5
    a816:	4290      	cmp	r0, r2
    a818:	d908      	bls.n	a82c <__udivmoddi4+0x124>
    a81a:	eb1c 0202 	adds.w	r2, ip, r2
    a81e:	f105 38ff 	add.w	r8, r5, #4294967295
    a822:	d202      	bcs.n	a82a <__udivmoddi4+0x122>
    a824:	4290      	cmp	r0, r2
    a826:	f200 80cb 	bhi.w	a9c0 <__udivmoddi4+0x2b8>
    a82a:	4645      	mov	r5, r8
    a82c:	1a12      	subs	r2, r2, r0
    a82e:	b2a4      	uxth	r4, r4
    a830:	fbb2 f0f7 	udiv	r0, r2, r7
    a834:	fb07 2210 	mls	r2, r7, r0, r2
    a838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    a83c:	fb0e fe00 	mul.w	lr, lr, r0
    a840:	45a6      	cmp	lr, r4
    a842:	d908      	bls.n	a856 <__udivmoddi4+0x14e>
    a844:	eb1c 0404 	adds.w	r4, ip, r4
    a848:	f100 32ff 	add.w	r2, r0, #4294967295
    a84c:	d202      	bcs.n	a854 <__udivmoddi4+0x14c>
    a84e:	45a6      	cmp	lr, r4
    a850:	f200 80bb 	bhi.w	a9ca <__udivmoddi4+0x2c2>
    a854:	4610      	mov	r0, r2
    a856:	eba4 040e 	sub.w	r4, r4, lr
    a85a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    a85e:	e79f      	b.n	a7a0 <__udivmoddi4+0x98>
    a860:	f1c1 0720 	rsb	r7, r1, #32
    a864:	408b      	lsls	r3, r1
    a866:	fa22 fc07 	lsr.w	ip, r2, r7
    a86a:	ea4c 0c03 	orr.w	ip, ip, r3
    a86e:	fa05 f401 	lsl.w	r4, r5, r1
    a872:	fa20 f307 	lsr.w	r3, r0, r7
    a876:	40fd      	lsrs	r5, r7
    a878:	ea4f 491c 	mov.w	r9, ip, lsr #16
    a87c:	4323      	orrs	r3, r4
    a87e:	fbb5 f8f9 	udiv	r8, r5, r9
    a882:	fa1f fe8c 	uxth.w	lr, ip
    a886:	fb09 5518 	mls	r5, r9, r8, r5
    a88a:	0c1c      	lsrs	r4, r3, #16
    a88c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    a890:	fb08 f50e 	mul.w	r5, r8, lr
    a894:	42a5      	cmp	r5, r4
    a896:	fa02 f201 	lsl.w	r2, r2, r1
    a89a:	fa00 f001 	lsl.w	r0, r0, r1
    a89e:	d90b      	bls.n	a8b8 <__udivmoddi4+0x1b0>
    a8a0:	eb1c 0404 	adds.w	r4, ip, r4
    a8a4:	f108 3aff 	add.w	sl, r8, #4294967295
    a8a8:	f080 8088 	bcs.w	a9bc <__udivmoddi4+0x2b4>
    a8ac:	42a5      	cmp	r5, r4
    a8ae:	f240 8085 	bls.w	a9bc <__udivmoddi4+0x2b4>
    a8b2:	f1a8 0802 	sub.w	r8, r8, #2
    a8b6:	4464      	add	r4, ip
    a8b8:	1b64      	subs	r4, r4, r5
    a8ba:	b29d      	uxth	r5, r3
    a8bc:	fbb4 f3f9 	udiv	r3, r4, r9
    a8c0:	fb09 4413 	mls	r4, r9, r3, r4
    a8c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    a8c8:	fb03 fe0e 	mul.w	lr, r3, lr
    a8cc:	45a6      	cmp	lr, r4
    a8ce:	d908      	bls.n	a8e2 <__udivmoddi4+0x1da>
    a8d0:	eb1c 0404 	adds.w	r4, ip, r4
    a8d4:	f103 35ff 	add.w	r5, r3, #4294967295
    a8d8:	d26c      	bcs.n	a9b4 <__udivmoddi4+0x2ac>
    a8da:	45a6      	cmp	lr, r4
    a8dc:	d96a      	bls.n	a9b4 <__udivmoddi4+0x2ac>
    a8de:	3b02      	subs	r3, #2
    a8e0:	4464      	add	r4, ip
    a8e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    a8e6:	fba3 9502 	umull	r9, r5, r3, r2
    a8ea:	eba4 040e 	sub.w	r4, r4, lr
    a8ee:	42ac      	cmp	r4, r5
    a8f0:	46c8      	mov	r8, r9
    a8f2:	46ae      	mov	lr, r5
    a8f4:	d356      	bcc.n	a9a4 <__udivmoddi4+0x29c>
    a8f6:	d053      	beq.n	a9a0 <__udivmoddi4+0x298>
    a8f8:	b156      	cbz	r6, a910 <__udivmoddi4+0x208>
    a8fa:	ebb0 0208 	subs.w	r2, r0, r8
    a8fe:	eb64 040e 	sbc.w	r4, r4, lr
    a902:	fa04 f707 	lsl.w	r7, r4, r7
    a906:	40ca      	lsrs	r2, r1
    a908:	40cc      	lsrs	r4, r1
    a90a:	4317      	orrs	r7, r2
    a90c:	e9c6 7400 	strd	r7, r4, [r6]
    a910:	4618      	mov	r0, r3
    a912:	2100      	movs	r1, #0
    a914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a918:	f1c3 0120 	rsb	r1, r3, #32
    a91c:	fa02 fc03 	lsl.w	ip, r2, r3
    a920:	fa20 f201 	lsr.w	r2, r0, r1
    a924:	fa25 f101 	lsr.w	r1, r5, r1
    a928:	409d      	lsls	r5, r3
    a92a:	432a      	orrs	r2, r5
    a92c:	ea4f 471c 	mov.w	r7, ip, lsr #16
    a930:	fa1f fe8c 	uxth.w	lr, ip
    a934:	fbb1 f0f7 	udiv	r0, r1, r7
    a938:	fb07 1510 	mls	r5, r7, r0, r1
    a93c:	0c11      	lsrs	r1, r2, #16
    a93e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    a942:	fb00 f50e 	mul.w	r5, r0, lr
    a946:	428d      	cmp	r5, r1
    a948:	fa04 f403 	lsl.w	r4, r4, r3
    a94c:	d908      	bls.n	a960 <__udivmoddi4+0x258>
    a94e:	eb1c 0101 	adds.w	r1, ip, r1
    a952:	f100 38ff 	add.w	r8, r0, #4294967295
    a956:	d22f      	bcs.n	a9b8 <__udivmoddi4+0x2b0>
    a958:	428d      	cmp	r5, r1
    a95a:	d92d      	bls.n	a9b8 <__udivmoddi4+0x2b0>
    a95c:	3802      	subs	r0, #2
    a95e:	4461      	add	r1, ip
    a960:	1b49      	subs	r1, r1, r5
    a962:	b292      	uxth	r2, r2
    a964:	fbb1 f5f7 	udiv	r5, r1, r7
    a968:	fb07 1115 	mls	r1, r7, r5, r1
    a96c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    a970:	fb05 f10e 	mul.w	r1, r5, lr
    a974:	4291      	cmp	r1, r2
    a976:	d908      	bls.n	a98a <__udivmoddi4+0x282>
    a978:	eb1c 0202 	adds.w	r2, ip, r2
    a97c:	f105 38ff 	add.w	r8, r5, #4294967295
    a980:	d216      	bcs.n	a9b0 <__udivmoddi4+0x2a8>
    a982:	4291      	cmp	r1, r2
    a984:	d914      	bls.n	a9b0 <__udivmoddi4+0x2a8>
    a986:	3d02      	subs	r5, #2
    a988:	4462      	add	r2, ip
    a98a:	1a52      	subs	r2, r2, r1
    a98c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    a990:	e738      	b.n	a804 <__udivmoddi4+0xfc>
    a992:	4631      	mov	r1, r6
    a994:	4630      	mov	r0, r6
    a996:	e708      	b.n	a7aa <__udivmoddi4+0xa2>
    a998:	4639      	mov	r1, r7
    a99a:	e6e6      	b.n	a76a <__udivmoddi4+0x62>
    a99c:	4610      	mov	r0, r2
    a99e:	e6fb      	b.n	a798 <__udivmoddi4+0x90>
    a9a0:	4548      	cmp	r0, r9
    a9a2:	d2a9      	bcs.n	a8f8 <__udivmoddi4+0x1f0>
    a9a4:	ebb9 0802 	subs.w	r8, r9, r2
    a9a8:	eb65 0e0c 	sbc.w	lr, r5, ip
    a9ac:	3b01      	subs	r3, #1
    a9ae:	e7a3      	b.n	a8f8 <__udivmoddi4+0x1f0>
    a9b0:	4645      	mov	r5, r8
    a9b2:	e7ea      	b.n	a98a <__udivmoddi4+0x282>
    a9b4:	462b      	mov	r3, r5
    a9b6:	e794      	b.n	a8e2 <__udivmoddi4+0x1da>
    a9b8:	4640      	mov	r0, r8
    a9ba:	e7d1      	b.n	a960 <__udivmoddi4+0x258>
    a9bc:	46d0      	mov	r8, sl
    a9be:	e77b      	b.n	a8b8 <__udivmoddi4+0x1b0>
    a9c0:	3d02      	subs	r5, #2
    a9c2:	4462      	add	r2, ip
    a9c4:	e732      	b.n	a82c <__udivmoddi4+0x124>
    a9c6:	4608      	mov	r0, r1
    a9c8:	e70a      	b.n	a7e0 <__udivmoddi4+0xd8>
    a9ca:	4464      	add	r4, ip
    a9cc:	3802      	subs	r0, #2
    a9ce:	e742      	b.n	a856 <__udivmoddi4+0x14e>

0000a9d0 <__aeabi_idiv0>:
    a9d0:	4770      	bx	lr
    a9d2:	bf00      	nop

0000a9d4 <malloc>:
    a9d4:	4b02      	ldr	r3, [pc, #8]	; (a9e0 <malloc+0xc>)
    a9d6:	4601      	mov	r1, r0
    a9d8:	6818      	ldr	r0, [r3, #0]
    a9da:	f000 b80b 	b.w	a9f4 <_malloc_r>
    a9de:	bf00      	nop
    a9e0:	20008e7c 	.word	0x20008e7c

0000a9e4 <free>:
    a9e4:	4b02      	ldr	r3, [pc, #8]	; (a9f0 <free+0xc>)
    a9e6:	4601      	mov	r1, r0
    a9e8:	6818      	ldr	r0, [r3, #0]
    a9ea:	f002 bb7b 	b.w	d0e4 <_free_r>
    a9ee:	bf00      	nop
    a9f0:	20008e7c 	.word	0x20008e7c

0000a9f4 <_malloc_r>:
    a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9f8:	f101 060b 	add.w	r6, r1, #11
    a9fc:	2e16      	cmp	r6, #22
    a9fe:	b083      	sub	sp, #12
    aa00:	4604      	mov	r4, r0
    aa02:	d824      	bhi.n	aa4e <_malloc_r+0x5a>
    aa04:	2910      	cmp	r1, #16
    aa06:	f200 80ba 	bhi.w	ab7e <_malloc_r+0x18a>
    aa0a:	f000 faa3 	bl	af54 <__malloc_lock>
    aa0e:	2610      	movs	r6, #16
    aa10:	2218      	movs	r2, #24
    aa12:	2002      	movs	r0, #2
    aa14:	4fb5      	ldr	r7, [pc, #724]	; (acec <_malloc_r+0x2f8>)
    aa16:	443a      	add	r2, r7
    aa18:	f1a2 0108 	sub.w	r1, r2, #8
    aa1c:	6853      	ldr	r3, [r2, #4]
    aa1e:	428b      	cmp	r3, r1
    aa20:	f000 80ba 	beq.w	ab98 <_malloc_r+0x1a4>
    aa24:	685a      	ldr	r2, [r3, #4]
    aa26:	68d9      	ldr	r1, [r3, #12]
    aa28:	f022 0203 	bic.w	r2, r2, #3
    aa2c:	441a      	add	r2, r3
    aa2e:	689d      	ldr	r5, [r3, #8]
    aa30:	60e9      	str	r1, [r5, #12]
    aa32:	608d      	str	r5, [r1, #8]
    aa34:	6851      	ldr	r1, [r2, #4]
    aa36:	f041 0101 	orr.w	r1, r1, #1
    aa3a:	4620      	mov	r0, r4
    aa3c:	6051      	str	r1, [r2, #4]
    aa3e:	f103 0508 	add.w	r5, r3, #8
    aa42:	f000 fa8d 	bl	af60 <__malloc_unlock>
    aa46:	4628      	mov	r0, r5
    aa48:	b003      	add	sp, #12
    aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa4e:	f036 0607 	bics.w	r6, r6, #7
    aa52:	f100 8094 	bmi.w	ab7e <_malloc_r+0x18a>
    aa56:	42b1      	cmp	r1, r6
    aa58:	f200 8091 	bhi.w	ab7e <_malloc_r+0x18a>
    aa5c:	f000 fa7a 	bl	af54 <__malloc_lock>
    aa60:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    aa64:	f0c0 819a 	bcc.w	ad9c <_malloc_r+0x3a8>
    aa68:	0a73      	lsrs	r3, r6, #9
    aa6a:	f000 808f 	beq.w	ab8c <_malloc_r+0x198>
    aa6e:	2b04      	cmp	r3, #4
    aa70:	f200 816f 	bhi.w	ad52 <_malloc_r+0x35e>
    aa74:	09b3      	lsrs	r3, r6, #6
    aa76:	f103 0039 	add.w	r0, r3, #57	; 0x39
    aa7a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    aa7e:	00c3      	lsls	r3, r0, #3
    aa80:	4f9a      	ldr	r7, [pc, #616]	; (acec <_malloc_r+0x2f8>)
    aa82:	443b      	add	r3, r7
    aa84:	f1a3 0508 	sub.w	r5, r3, #8
    aa88:	685b      	ldr	r3, [r3, #4]
    aa8a:	429d      	cmp	r5, r3
    aa8c:	d106      	bne.n	aa9c <_malloc_r+0xa8>
    aa8e:	e00c      	b.n	aaaa <_malloc_r+0xb6>
    aa90:	2900      	cmp	r1, #0
    aa92:	f280 8127 	bge.w	ace4 <_malloc_r+0x2f0>
    aa96:	68db      	ldr	r3, [r3, #12]
    aa98:	429d      	cmp	r5, r3
    aa9a:	d006      	beq.n	aaaa <_malloc_r+0xb6>
    aa9c:	685a      	ldr	r2, [r3, #4]
    aa9e:	f022 0203 	bic.w	r2, r2, #3
    aaa2:	1b91      	subs	r1, r2, r6
    aaa4:	290f      	cmp	r1, #15
    aaa6:	ddf3      	ble.n	aa90 <_malloc_r+0x9c>
    aaa8:	4660      	mov	r0, ip
    aaaa:	693d      	ldr	r5, [r7, #16]
    aaac:	f8df c250 	ldr.w	ip, [pc, #592]	; ad00 <_malloc_r+0x30c>
    aab0:	4565      	cmp	r5, ip
    aab2:	d07c      	beq.n	abae <_malloc_r+0x1ba>
    aab4:	686a      	ldr	r2, [r5, #4]
    aab6:	f022 0203 	bic.w	r2, r2, #3
    aaba:	1b93      	subs	r3, r2, r6
    aabc:	2b0f      	cmp	r3, #15
    aabe:	f300 817b 	bgt.w	adb8 <_malloc_r+0x3c4>
    aac2:	2b00      	cmp	r3, #0
    aac4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    aac8:	f280 816c 	bge.w	ada4 <_malloc_r+0x3b0>
    aacc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    aad0:	f080 811a 	bcs.w	ad08 <_malloc_r+0x314>
    aad4:	08d3      	lsrs	r3, r2, #3
    aad6:	6879      	ldr	r1, [r7, #4]
    aad8:	3301      	adds	r3, #1
    aada:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    aade:	2201      	movs	r2, #1
    aae0:	fa02 f20e 	lsl.w	r2, r2, lr
    aae4:	430a      	orrs	r2, r1
    aae6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    aaea:	f8c5 e008 	str.w	lr, [r5, #8]
    aaee:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    aaf2:	3908      	subs	r1, #8
    aaf4:	60e9      	str	r1, [r5, #12]
    aaf6:	607a      	str	r2, [r7, #4]
    aaf8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    aafc:	f8ce 500c 	str.w	r5, [lr, #12]
    ab00:	1083      	asrs	r3, r0, #2
    ab02:	2101      	movs	r1, #1
    ab04:	4099      	lsls	r1, r3
    ab06:	4291      	cmp	r1, r2
    ab08:	d857      	bhi.n	abba <_malloc_r+0x1c6>
    ab0a:	4211      	tst	r1, r2
    ab0c:	d106      	bne.n	ab1c <_malloc_r+0x128>
    ab0e:	f020 0003 	bic.w	r0, r0, #3
    ab12:	0049      	lsls	r1, r1, #1
    ab14:	4211      	tst	r1, r2
    ab16:	f100 0004 	add.w	r0, r0, #4
    ab1a:	d0fa      	beq.n	ab12 <_malloc_r+0x11e>
    ab1c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ab20:	464d      	mov	r5, r9
    ab22:	4686      	mov	lr, r0
    ab24:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ab28:	4545      	cmp	r5, r8
    ab2a:	d108      	bne.n	ab3e <_malloc_r+0x14a>
    ab2c:	e11d      	b.n	ad6a <_malloc_r+0x376>
    ab2e:	2b00      	cmp	r3, #0
    ab30:	f280 8124 	bge.w	ad7c <_malloc_r+0x388>
    ab34:	f8d8 800c 	ldr.w	r8, [r8, #12]
    ab38:	4545      	cmp	r5, r8
    ab3a:	f000 8116 	beq.w	ad6a <_malloc_r+0x376>
    ab3e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    ab42:	f022 0203 	bic.w	r2, r2, #3
    ab46:	1b93      	subs	r3, r2, r6
    ab48:	2b0f      	cmp	r3, #15
    ab4a:	ddf0      	ble.n	ab2e <_malloc_r+0x13a>
    ab4c:	4620      	mov	r0, r4
    ab4e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    ab52:	eb08 0106 	add.w	r1, r8, r6
    ab56:	f046 0601 	orr.w	r6, r6, #1
    ab5a:	f8c8 6004 	str.w	r6, [r8, #4]
    ab5e:	60ec      	str	r4, [r5, #12]
    ab60:	60a5      	str	r5, [r4, #8]
    ab62:	f043 0401 	orr.w	r4, r3, #1
    ab66:	e9c7 1104 	strd	r1, r1, [r7, #16]
    ab6a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    ab6e:	604c      	str	r4, [r1, #4]
    ab70:	f848 3002 	str.w	r3, [r8, r2]
    ab74:	f000 f9f4 	bl	af60 <__malloc_unlock>
    ab78:	f108 0508 	add.w	r5, r8, #8
    ab7c:	e002      	b.n	ab84 <_malloc_r+0x190>
    ab7e:	230c      	movs	r3, #12
    ab80:	6023      	str	r3, [r4, #0]
    ab82:	2500      	movs	r5, #0
    ab84:	4628      	mov	r0, r5
    ab86:	b003      	add	sp, #12
    ab88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab8c:	f44f 7300 	mov.w	r3, #512	; 0x200
    ab90:	2040      	movs	r0, #64	; 0x40
    ab92:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    ab96:	e773      	b.n	aa80 <_malloc_r+0x8c>
    ab98:	68d3      	ldr	r3, [r2, #12]
    ab9a:	429a      	cmp	r2, r3
    ab9c:	bf08      	it	eq
    ab9e:	3002      	addeq	r0, #2
    aba0:	f47f af40 	bne.w	aa24 <_malloc_r+0x30>
    aba4:	693d      	ldr	r5, [r7, #16]
    aba6:	f8df c158 	ldr.w	ip, [pc, #344]	; ad00 <_malloc_r+0x30c>
    abaa:	4565      	cmp	r5, ip
    abac:	d182      	bne.n	aab4 <_malloc_r+0xc0>
    abae:	687a      	ldr	r2, [r7, #4]
    abb0:	1083      	asrs	r3, r0, #2
    abb2:	2101      	movs	r1, #1
    abb4:	4099      	lsls	r1, r3
    abb6:	4291      	cmp	r1, r2
    abb8:	d9a7      	bls.n	ab0a <_malloc_r+0x116>
    abba:	68bd      	ldr	r5, [r7, #8]
    abbc:	686b      	ldr	r3, [r5, #4]
    abbe:	f023 0903 	bic.w	r9, r3, #3
    abc2:	454e      	cmp	r6, r9
    abc4:	d803      	bhi.n	abce <_malloc_r+0x1da>
    abc6:	eba9 0306 	sub.w	r3, r9, r6
    abca:	2b0f      	cmp	r3, #15
    abcc:	dc7a      	bgt.n	acc4 <_malloc_r+0x2d0>
    abce:	f8df b134 	ldr.w	fp, [pc, #308]	; ad04 <_malloc_r+0x310>
    abd2:	4b47      	ldr	r3, [pc, #284]	; (acf0 <_malloc_r+0x2fc>)
    abd4:	f8db 2000 	ldr.w	r2, [fp]
    abd8:	681b      	ldr	r3, [r3, #0]
    abda:	3201      	adds	r2, #1
    abdc:	4433      	add	r3, r6
    abde:	eb05 0a09 	add.w	sl, r5, r9
    abe2:	f000 8133 	beq.w	ae4c <_malloc_r+0x458>
    abe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    abea:	330f      	adds	r3, #15
    abec:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    abf0:	f028 080f 	bic.w	r8, r8, #15
    abf4:	4641      	mov	r1, r8
    abf6:	4620      	mov	r0, r4
    abf8:	f001 ff32 	bl	ca60 <_sbrk_r>
    abfc:	1c41      	adds	r1, r0, #1
    abfe:	4602      	mov	r2, r0
    ac00:	f000 80f3 	beq.w	adea <_malloc_r+0x3f6>
    ac04:	4582      	cmp	sl, r0
    ac06:	f200 80ee 	bhi.w	ade6 <_malloc_r+0x3f2>
    ac0a:	4b3a      	ldr	r3, [pc, #232]	; (acf4 <_malloc_r+0x300>)
    ac0c:	6819      	ldr	r1, [r3, #0]
    ac0e:	4441      	add	r1, r8
    ac10:	6019      	str	r1, [r3, #0]
    ac12:	4608      	mov	r0, r1
    ac14:	f000 814e 	beq.w	aeb4 <_malloc_r+0x4c0>
    ac18:	f8db 1000 	ldr.w	r1, [fp]
    ac1c:	9301      	str	r3, [sp, #4]
    ac1e:	3101      	adds	r1, #1
    ac20:	bf1b      	ittet	ne
    ac22:	eba2 010a 	subne.w	r1, r2, sl
    ac26:	1809      	addne	r1, r1, r0
    ac28:	f8cb 2000 	streq.w	r2, [fp]
    ac2c:	6019      	strne	r1, [r3, #0]
    ac2e:	f012 0b07 	ands.w	fp, r2, #7
    ac32:	f000 8117 	beq.w	ae64 <_malloc_r+0x470>
    ac36:	f1cb 0108 	rsb	r1, fp, #8
    ac3a:	440a      	add	r2, r1
    ac3c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    ac40:	4490      	add	r8, r2
    ac42:	3108      	adds	r1, #8
    ac44:	eba1 0108 	sub.w	r1, r1, r8
    ac48:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ac4c:	4651      	mov	r1, sl
    ac4e:	4620      	mov	r0, r4
    ac50:	9200      	str	r2, [sp, #0]
    ac52:	f001 ff05 	bl	ca60 <_sbrk_r>
    ac56:	1c42      	adds	r2, r0, #1
    ac58:	e9dd 2300 	ldrd	r2, r3, [sp]
    ac5c:	f000 814f 	beq.w	aefe <_malloc_r+0x50a>
    ac60:	1a80      	subs	r0, r0, r2
    ac62:	eb00 080a 	add.w	r8, r0, sl
    ac66:	6819      	ldr	r1, [r3, #0]
    ac68:	60ba      	str	r2, [r7, #8]
    ac6a:	f048 0001 	orr.w	r0, r8, #1
    ac6e:	4451      	add	r1, sl
    ac70:	42bd      	cmp	r5, r7
    ac72:	6050      	str	r0, [r2, #4]
    ac74:	6019      	str	r1, [r3, #0]
    ac76:	f000 8129 	beq.w	aecc <_malloc_r+0x4d8>
    ac7a:	f1b9 0f0f 	cmp.w	r9, #15
    ac7e:	f240 8127 	bls.w	aed0 <_malloc_r+0x4dc>
    ac82:	6868      	ldr	r0, [r5, #4]
    ac84:	f1a9 0c0c 	sub.w	ip, r9, #12
    ac88:	f02c 0c07 	bic.w	ip, ip, #7
    ac8c:	f000 0001 	and.w	r0, r0, #1
    ac90:	ea40 000c 	orr.w	r0, r0, ip
    ac94:	6068      	str	r0, [r5, #4]
    ac96:	f04f 0e05 	mov.w	lr, #5
    ac9a:	eb05 000c 	add.w	r0, r5, ip
    ac9e:	f1bc 0f0f 	cmp.w	ip, #15
    aca2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    aca6:	f200 8132 	bhi.w	af0e <_malloc_r+0x51a>
    acaa:	6850      	ldr	r0, [r2, #4]
    acac:	4615      	mov	r5, r2
    acae:	4b12      	ldr	r3, [pc, #72]	; (acf8 <_malloc_r+0x304>)
    acb0:	681a      	ldr	r2, [r3, #0]
    acb2:	428a      	cmp	r2, r1
    acb4:	bf38      	it	cc
    acb6:	6019      	strcc	r1, [r3, #0]
    acb8:	4b10      	ldr	r3, [pc, #64]	; (acfc <_malloc_r+0x308>)
    acba:	681a      	ldr	r2, [r3, #0]
    acbc:	428a      	cmp	r2, r1
    acbe:	bf38      	it	cc
    acc0:	6019      	strcc	r1, [r3, #0]
    acc2:	e094      	b.n	adee <_malloc_r+0x3fa>
    acc4:	19aa      	adds	r2, r5, r6
    acc6:	f043 0301 	orr.w	r3, r3, #1
    acca:	f046 0601 	orr.w	r6, r6, #1
    acce:	606e      	str	r6, [r5, #4]
    acd0:	4620      	mov	r0, r4
    acd2:	60ba      	str	r2, [r7, #8]
    acd4:	6053      	str	r3, [r2, #4]
    acd6:	f000 f943 	bl	af60 <__malloc_unlock>
    acda:	3508      	adds	r5, #8
    acdc:	4628      	mov	r0, r5
    acde:	b003      	add	sp, #12
    ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ace4:	68d9      	ldr	r1, [r3, #12]
    ace6:	441a      	add	r2, r3
    ace8:	e6a1      	b.n	aa2e <_malloc_r+0x3a>
    acea:	bf00      	nop
    acec:	20008a60 	.word	0x20008a60
    acf0:	2002036c 	.word	0x2002036c
    acf4:	2002033c 	.word	0x2002033c
    acf8:	20020364 	.word	0x20020364
    acfc:	20020368 	.word	0x20020368
    ad00:	20008a68 	.word	0x20008a68
    ad04:	20008e68 	.word	0x20008e68
    ad08:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    ad0c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    ad10:	d363      	bcc.n	adda <_malloc_r+0x3e6>
    ad12:	2b14      	cmp	r3, #20
    ad14:	f200 80b7 	bhi.w	ae86 <_malloc_r+0x492>
    ad18:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    ad1c:	00c9      	lsls	r1, r1, #3
    ad1e:	335b      	adds	r3, #91	; 0x5b
    ad20:	eb07 0e01 	add.w	lr, r7, r1
    ad24:	5879      	ldr	r1, [r7, r1]
    ad26:	f1ae 0e08 	sub.w	lr, lr, #8
    ad2a:	458e      	cmp	lr, r1
    ad2c:	f000 8091 	beq.w	ae52 <_malloc_r+0x45e>
    ad30:	684b      	ldr	r3, [r1, #4]
    ad32:	f023 0303 	bic.w	r3, r3, #3
    ad36:	4293      	cmp	r3, r2
    ad38:	d902      	bls.n	ad40 <_malloc_r+0x34c>
    ad3a:	6889      	ldr	r1, [r1, #8]
    ad3c:	458e      	cmp	lr, r1
    ad3e:	d1f7      	bne.n	ad30 <_malloc_r+0x33c>
    ad40:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    ad44:	687a      	ldr	r2, [r7, #4]
    ad46:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    ad4a:	f8ce 5008 	str.w	r5, [lr, #8]
    ad4e:	60cd      	str	r5, [r1, #12]
    ad50:	e6d6      	b.n	ab00 <_malloc_r+0x10c>
    ad52:	2b14      	cmp	r3, #20
    ad54:	d959      	bls.n	ae0a <_malloc_r+0x416>
    ad56:	2b54      	cmp	r3, #84	; 0x54
    ad58:	f200 809d 	bhi.w	ae96 <_malloc_r+0x4a2>
    ad5c:	0b33      	lsrs	r3, r6, #12
    ad5e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    ad62:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    ad66:	00c3      	lsls	r3, r0, #3
    ad68:	e68a      	b.n	aa80 <_malloc_r+0x8c>
    ad6a:	f10e 0e01 	add.w	lr, lr, #1
    ad6e:	f01e 0f03 	tst.w	lr, #3
    ad72:	f105 0508 	add.w	r5, r5, #8
    ad76:	f47f aed5 	bne.w	ab24 <_malloc_r+0x130>
    ad7a:	e051      	b.n	ae20 <_malloc_r+0x42c>
    ad7c:	4442      	add	r2, r8
    ad7e:	4645      	mov	r5, r8
    ad80:	6853      	ldr	r3, [r2, #4]
    ad82:	f8d8 100c 	ldr.w	r1, [r8, #12]
    ad86:	f043 0301 	orr.w	r3, r3, #1
    ad8a:	6053      	str	r3, [r2, #4]
    ad8c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    ad90:	4620      	mov	r0, r4
    ad92:	60d9      	str	r1, [r3, #12]
    ad94:	608b      	str	r3, [r1, #8]
    ad96:	f000 f8e3 	bl	af60 <__malloc_unlock>
    ad9a:	e6f3      	b.n	ab84 <_malloc_r+0x190>
    ad9c:	08f0      	lsrs	r0, r6, #3
    ad9e:	f106 0208 	add.w	r2, r6, #8
    ada2:	e637      	b.n	aa14 <_malloc_r+0x20>
    ada4:	442a      	add	r2, r5
    ada6:	4620      	mov	r0, r4
    ada8:	6853      	ldr	r3, [r2, #4]
    adaa:	f043 0301 	orr.w	r3, r3, #1
    adae:	6053      	str	r3, [r2, #4]
    adb0:	3508      	adds	r5, #8
    adb2:	f000 f8d5 	bl	af60 <__malloc_unlock>
    adb6:	e6e5      	b.n	ab84 <_malloc_r+0x190>
    adb8:	19a9      	adds	r1, r5, r6
    adba:	4620      	mov	r0, r4
    adbc:	f046 0601 	orr.w	r6, r6, #1
    adc0:	f043 0401 	orr.w	r4, r3, #1
    adc4:	606e      	str	r6, [r5, #4]
    adc6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    adca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    adce:	604c      	str	r4, [r1, #4]
    add0:	50ab      	str	r3, [r5, r2]
    add2:	f000 f8c5 	bl	af60 <__malloc_unlock>
    add6:	3508      	adds	r5, #8
    add8:	e6d4      	b.n	ab84 <_malloc_r+0x190>
    adda:	0993      	lsrs	r3, r2, #6
    addc:	f103 0139 	add.w	r1, r3, #57	; 0x39
    ade0:	00c9      	lsls	r1, r1, #3
    ade2:	3338      	adds	r3, #56	; 0x38
    ade4:	e79c      	b.n	ad20 <_malloc_r+0x32c>
    ade6:	42bd      	cmp	r5, r7
    ade8:	d05f      	beq.n	aeaa <_malloc_r+0x4b6>
    adea:	68bd      	ldr	r5, [r7, #8]
    adec:	6868      	ldr	r0, [r5, #4]
    adee:	f020 0803 	bic.w	r8, r0, #3
    adf2:	4546      	cmp	r6, r8
    adf4:	eba8 0306 	sub.w	r3, r8, r6
    adf8:	d802      	bhi.n	ae00 <_malloc_r+0x40c>
    adfa:	2b0f      	cmp	r3, #15
    adfc:	f73f af62 	bgt.w	acc4 <_malloc_r+0x2d0>
    ae00:	4620      	mov	r0, r4
    ae02:	f000 f8ad 	bl	af60 <__malloc_unlock>
    ae06:	2500      	movs	r5, #0
    ae08:	e6bc      	b.n	ab84 <_malloc_r+0x190>
    ae0a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    ae0e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    ae12:	00c3      	lsls	r3, r0, #3
    ae14:	e634      	b.n	aa80 <_malloc_r+0x8c>
    ae16:	f859 3908 	ldr.w	r3, [r9], #-8
    ae1a:	454b      	cmp	r3, r9
    ae1c:	f040 8096 	bne.w	af4c <_malloc_r+0x558>
    ae20:	f010 0f03 	tst.w	r0, #3
    ae24:	f100 30ff 	add.w	r0, r0, #4294967295
    ae28:	d1f5      	bne.n	ae16 <_malloc_r+0x422>
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	ea23 0301 	bic.w	r3, r3, r1
    ae30:	607b      	str	r3, [r7, #4]
    ae32:	0049      	lsls	r1, r1, #1
    ae34:	4299      	cmp	r1, r3
    ae36:	f63f aec0 	bhi.w	abba <_malloc_r+0x1c6>
    ae3a:	b919      	cbnz	r1, ae44 <_malloc_r+0x450>
    ae3c:	e6bd      	b.n	abba <_malloc_r+0x1c6>
    ae3e:	0049      	lsls	r1, r1, #1
    ae40:	f10e 0e04 	add.w	lr, lr, #4
    ae44:	4219      	tst	r1, r3
    ae46:	d0fa      	beq.n	ae3e <_malloc_r+0x44a>
    ae48:	4670      	mov	r0, lr
    ae4a:	e667      	b.n	ab1c <_malloc_r+0x128>
    ae4c:	f103 0810 	add.w	r8, r3, #16
    ae50:	e6d0      	b.n	abf4 <_malloc_r+0x200>
    ae52:	109a      	asrs	r2, r3, #2
    ae54:	f04f 0801 	mov.w	r8, #1
    ae58:	687b      	ldr	r3, [r7, #4]
    ae5a:	fa08 f202 	lsl.w	r2, r8, r2
    ae5e:	431a      	orrs	r2, r3
    ae60:	607a      	str	r2, [r7, #4]
    ae62:	e770      	b.n	ad46 <_malloc_r+0x352>
    ae64:	eb02 0108 	add.w	r1, r2, r8
    ae68:	4249      	negs	r1, r1
    ae6a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ae6e:	4651      	mov	r1, sl
    ae70:	4620      	mov	r0, r4
    ae72:	9200      	str	r2, [sp, #0]
    ae74:	f001 fdf4 	bl	ca60 <_sbrk_r>
    ae78:	1c43      	adds	r3, r0, #1
    ae7a:	e9dd 2300 	ldrd	r2, r3, [sp]
    ae7e:	f47f aeef 	bne.w	ac60 <_malloc_r+0x26c>
    ae82:	46da      	mov	sl, fp
    ae84:	e6ef      	b.n	ac66 <_malloc_r+0x272>
    ae86:	2b54      	cmp	r3, #84	; 0x54
    ae88:	d825      	bhi.n	aed6 <_malloc_r+0x4e2>
    ae8a:	0b13      	lsrs	r3, r2, #12
    ae8c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    ae90:	00c9      	lsls	r1, r1, #3
    ae92:	336e      	adds	r3, #110	; 0x6e
    ae94:	e744      	b.n	ad20 <_malloc_r+0x32c>
    ae96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ae9a:	d825      	bhi.n	aee8 <_malloc_r+0x4f4>
    ae9c:	0bf3      	lsrs	r3, r6, #15
    ae9e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    aea2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    aea6:	00c3      	lsls	r3, r0, #3
    aea8:	e5ea      	b.n	aa80 <_malloc_r+0x8c>
    aeaa:	4b29      	ldr	r3, [pc, #164]	; (af50 <_malloc_r+0x55c>)
    aeac:	6818      	ldr	r0, [r3, #0]
    aeae:	4440      	add	r0, r8
    aeb0:	6018      	str	r0, [r3, #0]
    aeb2:	e6b1      	b.n	ac18 <_malloc_r+0x224>
    aeb4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    aeb8:	f1bc 0f00 	cmp.w	ip, #0
    aebc:	f47f aeac 	bne.w	ac18 <_malloc_r+0x224>
    aec0:	68bd      	ldr	r5, [r7, #8]
    aec2:	44c8      	add	r8, r9
    aec4:	f048 0001 	orr.w	r0, r8, #1
    aec8:	6068      	str	r0, [r5, #4]
    aeca:	e6f0      	b.n	acae <_malloc_r+0x2ba>
    aecc:	4615      	mov	r5, r2
    aece:	e6ee      	b.n	acae <_malloc_r+0x2ba>
    aed0:	2301      	movs	r3, #1
    aed2:	6053      	str	r3, [r2, #4]
    aed4:	e794      	b.n	ae00 <_malloc_r+0x40c>
    aed6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    aeda:	d823      	bhi.n	af24 <_malloc_r+0x530>
    aedc:	0bd3      	lsrs	r3, r2, #15
    aede:	f103 0178 	add.w	r1, r3, #120	; 0x78
    aee2:	00c9      	lsls	r1, r1, #3
    aee4:	3377      	adds	r3, #119	; 0x77
    aee6:	e71b      	b.n	ad20 <_malloc_r+0x32c>
    aee8:	f240 5254 	movw	r2, #1364	; 0x554
    aeec:	4293      	cmp	r3, r2
    aeee:	d823      	bhi.n	af38 <_malloc_r+0x544>
    aef0:	0cb3      	lsrs	r3, r6, #18
    aef2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    aef6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    aefa:	00c3      	lsls	r3, r0, #3
    aefc:	e5c0      	b.n	aa80 <_malloc_r+0x8c>
    aefe:	f1ab 0b08 	sub.w	fp, fp, #8
    af02:	44d8      	add	r8, fp
    af04:	eba8 0802 	sub.w	r8, r8, r2
    af08:	f04f 0a00 	mov.w	sl, #0
    af0c:	e6ab      	b.n	ac66 <_malloc_r+0x272>
    af0e:	f105 0108 	add.w	r1, r5, #8
    af12:	4620      	mov	r0, r4
    af14:	9300      	str	r3, [sp, #0]
    af16:	f002 f8e5 	bl	d0e4 <_free_r>
    af1a:	68bd      	ldr	r5, [r7, #8]
    af1c:	9b00      	ldr	r3, [sp, #0]
    af1e:	6868      	ldr	r0, [r5, #4]
    af20:	6819      	ldr	r1, [r3, #0]
    af22:	e6c4      	b.n	acae <_malloc_r+0x2ba>
    af24:	f240 5154 	movw	r1, #1364	; 0x554
    af28:	428b      	cmp	r3, r1
    af2a:	d80b      	bhi.n	af44 <_malloc_r+0x550>
    af2c:	0c93      	lsrs	r3, r2, #18
    af2e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    af32:	00c9      	lsls	r1, r1, #3
    af34:	337c      	adds	r3, #124	; 0x7c
    af36:	e6f3      	b.n	ad20 <_malloc_r+0x32c>
    af38:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    af3c:	207f      	movs	r0, #127	; 0x7f
    af3e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    af42:	e59d      	b.n	aa80 <_malloc_r+0x8c>
    af44:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    af48:	237e      	movs	r3, #126	; 0x7e
    af4a:	e6e9      	b.n	ad20 <_malloc_r+0x32c>
    af4c:	687b      	ldr	r3, [r7, #4]
    af4e:	e770      	b.n	ae32 <_malloc_r+0x43e>
    af50:	2002033c 	.word	0x2002033c

0000af54 <__malloc_lock>:
    af54:	4801      	ldr	r0, [pc, #4]	; (af5c <__malloc_lock+0x8>)
    af56:	f001 bdd9 	b.w	cb0c <__retarget_lock_acquire_recursive>
    af5a:	bf00      	nop
    af5c:	20020334 	.word	0x20020334

0000af60 <__malloc_unlock>:
    af60:	4801      	ldr	r0, [pc, #4]	; (af68 <__malloc_unlock+0x8>)
    af62:	f001 bdd5 	b.w	cb10 <__retarget_lock_release_recursive>
    af66:	bf00      	nop
    af68:	20020334 	.word	0x20020334

0000af6c <realloc>:
    af6c:	b410      	push	{r4}
    af6e:	4c04      	ldr	r4, [pc, #16]	; (af80 <realloc+0x14>)
    af70:	4603      	mov	r3, r0
    af72:	460a      	mov	r2, r1
    af74:	6820      	ldr	r0, [r4, #0]
    af76:	f85d 4b04 	ldr.w	r4, [sp], #4
    af7a:	4619      	mov	r1, r3
    af7c:	f000 b802 	b.w	af84 <_realloc_r>
    af80:	20008e7c 	.word	0x20008e7c

0000af84 <_realloc_r>:
    af84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af88:	4617      	mov	r7, r2
    af8a:	2900      	cmp	r1, #0
    af8c:	f000 8098 	beq.w	b0c0 <_realloc_r+0x13c>
    af90:	460c      	mov	r4, r1
    af92:	f107 050b 	add.w	r5, r7, #11
    af96:	4680      	mov	r8, r0
    af98:	f7ff ffdc 	bl	af54 <__malloc_lock>
    af9c:	2d16      	cmp	r5, #22
    af9e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    afa2:	d85b      	bhi.n	b05c <_realloc_r+0xd8>
    afa4:	2510      	movs	r5, #16
    afa6:	462a      	mov	r2, r5
    afa8:	42af      	cmp	r7, r5
    afaa:	d85c      	bhi.n	b066 <_realloc_r+0xe2>
    afac:	f021 0603 	bic.w	r6, r1, #3
    afb0:	4296      	cmp	r6, r2
    afb2:	f1a4 0908 	sub.w	r9, r4, #8
    afb6:	da62      	bge.n	b07e <_realloc_r+0xfa>
    afb8:	4bbc      	ldr	r3, [pc, #752]	; (b2ac <_realloc_r+0x328>)
    afba:	f8d3 c008 	ldr.w	ip, [r3, #8]
    afbe:	eb09 0006 	add.w	r0, r9, r6
    afc2:	4584      	cmp	ip, r0
    afc4:	f000 8097 	beq.w	b0f6 <_realloc_r+0x172>
    afc8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    afcc:	f02c 0301 	bic.w	r3, ip, #1
    afd0:	4403      	add	r3, r0
    afd2:	685b      	ldr	r3, [r3, #4]
    afd4:	07db      	lsls	r3, r3, #31
    afd6:	d468      	bmi.n	b0aa <_realloc_r+0x126>
    afd8:	f02c 0c03 	bic.w	ip, ip, #3
    afdc:	eb06 030c 	add.w	r3, r6, ip
    afe0:	4293      	cmp	r3, r2
    afe2:	da47      	bge.n	b074 <_realloc_r+0xf0>
    afe4:	07cb      	lsls	r3, r1, #31
    afe6:	d410      	bmi.n	b00a <_realloc_r+0x86>
    afe8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    afec:	eba9 0a03 	sub.w	sl, r9, r3
    aff0:	f8da 3004 	ldr.w	r3, [sl, #4]
    aff4:	f023 0103 	bic.w	r1, r3, #3
    aff8:	448c      	add	ip, r1
    affa:	44b4      	add	ip, r6
    affc:	4594      	cmp	ip, r2
    affe:	f280 8111 	bge.w	b224 <_realloc_r+0x2a0>
    b002:	1873      	adds	r3, r6, r1
    b004:	4293      	cmp	r3, r2
    b006:	f280 80e8 	bge.w	b1da <_realloc_r+0x256>
    b00a:	4639      	mov	r1, r7
    b00c:	4640      	mov	r0, r8
    b00e:	f7ff fcf1 	bl	a9f4 <_malloc_r>
    b012:	4607      	mov	r7, r0
    b014:	b1e0      	cbz	r0, b050 <_realloc_r+0xcc>
    b016:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b01a:	f023 0301 	bic.w	r3, r3, #1
    b01e:	444b      	add	r3, r9
    b020:	f1a0 0208 	sub.w	r2, r0, #8
    b024:	4293      	cmp	r3, r2
    b026:	f000 80d2 	beq.w	b1ce <_realloc_r+0x24a>
    b02a:	1f32      	subs	r2, r6, #4
    b02c:	2a24      	cmp	r2, #36	; 0x24
    b02e:	f200 80f5 	bhi.w	b21c <_realloc_r+0x298>
    b032:	2a13      	cmp	r2, #19
    b034:	f200 80ac 	bhi.w	b190 <_realloc_r+0x20c>
    b038:	4603      	mov	r3, r0
    b03a:	4622      	mov	r2, r4
    b03c:	6811      	ldr	r1, [r2, #0]
    b03e:	6019      	str	r1, [r3, #0]
    b040:	6851      	ldr	r1, [r2, #4]
    b042:	6059      	str	r1, [r3, #4]
    b044:	6892      	ldr	r2, [r2, #8]
    b046:	609a      	str	r2, [r3, #8]
    b048:	4621      	mov	r1, r4
    b04a:	4640      	mov	r0, r8
    b04c:	f002 f84a 	bl	d0e4 <_free_r>
    b050:	4640      	mov	r0, r8
    b052:	f7ff ff85 	bl	af60 <__malloc_unlock>
    b056:	4638      	mov	r0, r7
    b058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b05c:	f025 0507 	bic.w	r5, r5, #7
    b060:	2d00      	cmp	r5, #0
    b062:	462a      	mov	r2, r5
    b064:	daa0      	bge.n	afa8 <_realloc_r+0x24>
    b066:	230c      	movs	r3, #12
    b068:	f8c8 3000 	str.w	r3, [r8]
    b06c:	2700      	movs	r7, #0
    b06e:	4638      	mov	r0, r7
    b070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b074:	461e      	mov	r6, r3
    b076:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b07a:	60d3      	str	r3, [r2, #12]
    b07c:	609a      	str	r2, [r3, #8]
    b07e:	1b73      	subs	r3, r6, r5
    b080:	2b0f      	cmp	r3, #15
    b082:	d822      	bhi.n	b0ca <_realloc_r+0x146>
    b084:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b088:	f003 0301 	and.w	r3, r3, #1
    b08c:	4333      	orrs	r3, r6
    b08e:	444e      	add	r6, r9
    b090:	f8c9 3004 	str.w	r3, [r9, #4]
    b094:	6873      	ldr	r3, [r6, #4]
    b096:	f043 0301 	orr.w	r3, r3, #1
    b09a:	6073      	str	r3, [r6, #4]
    b09c:	4640      	mov	r0, r8
    b09e:	4627      	mov	r7, r4
    b0a0:	f7ff ff5e 	bl	af60 <__malloc_unlock>
    b0a4:	4638      	mov	r0, r7
    b0a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0aa:	07c9      	lsls	r1, r1, #31
    b0ac:	d4ad      	bmi.n	b00a <_realloc_r+0x86>
    b0ae:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b0b2:	eba9 0a03 	sub.w	sl, r9, r3
    b0b6:	f8da 1004 	ldr.w	r1, [sl, #4]
    b0ba:	f021 0103 	bic.w	r1, r1, #3
    b0be:	e7a0      	b.n	b002 <_realloc_r+0x7e>
    b0c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0c4:	4611      	mov	r1, r2
    b0c6:	f7ff bc95 	b.w	a9f4 <_malloc_r>
    b0ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b0ce:	eb09 0105 	add.w	r1, r9, r5
    b0d2:	f002 0201 	and.w	r2, r2, #1
    b0d6:	444e      	add	r6, r9
    b0d8:	f043 0301 	orr.w	r3, r3, #1
    b0dc:	432a      	orrs	r2, r5
    b0de:	f8c9 2004 	str.w	r2, [r9, #4]
    b0e2:	604b      	str	r3, [r1, #4]
    b0e4:	6873      	ldr	r3, [r6, #4]
    b0e6:	f043 0301 	orr.w	r3, r3, #1
    b0ea:	3108      	adds	r1, #8
    b0ec:	6073      	str	r3, [r6, #4]
    b0ee:	4640      	mov	r0, r8
    b0f0:	f001 fff8 	bl	d0e4 <_free_r>
    b0f4:	e7d2      	b.n	b09c <_realloc_r+0x118>
    b0f6:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b0fa:	f020 0b03 	bic.w	fp, r0, #3
    b0fe:	eb06 0c0b 	add.w	ip, r6, fp
    b102:	f105 0010 	add.w	r0, r5, #16
    b106:	4584      	cmp	ip, r0
    b108:	da4d      	bge.n	b1a6 <_realloc_r+0x222>
    b10a:	07c9      	lsls	r1, r1, #31
    b10c:	f53f af7d 	bmi.w	b00a <_realloc_r+0x86>
    b110:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b114:	eba9 0a01 	sub.w	sl, r9, r1
    b118:	f8da 1004 	ldr.w	r1, [sl, #4]
    b11c:	f021 0103 	bic.w	r1, r1, #3
    b120:	448b      	add	fp, r1
    b122:	44b3      	add	fp, r6
    b124:	4558      	cmp	r0, fp
    b126:	f73f af6c 	bgt.w	b002 <_realloc_r+0x7e>
    b12a:	4657      	mov	r7, sl
    b12c:	f8da 100c 	ldr.w	r1, [sl, #12]
    b130:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b134:	1f32      	subs	r2, r6, #4
    b136:	2a24      	cmp	r2, #36	; 0x24
    b138:	60c1      	str	r1, [r0, #12]
    b13a:	6088      	str	r0, [r1, #8]
    b13c:	f200 80db 	bhi.w	b2f6 <_realloc_r+0x372>
    b140:	2a13      	cmp	r2, #19
    b142:	f240 80d6 	bls.w	b2f2 <_realloc_r+0x36e>
    b146:	6821      	ldr	r1, [r4, #0]
    b148:	f8ca 1008 	str.w	r1, [sl, #8]
    b14c:	6861      	ldr	r1, [r4, #4]
    b14e:	f8ca 100c 	str.w	r1, [sl, #12]
    b152:	2a1b      	cmp	r2, #27
    b154:	f200 80df 	bhi.w	b316 <_realloc_r+0x392>
    b158:	3408      	adds	r4, #8
    b15a:	f10a 0210 	add.w	r2, sl, #16
    b15e:	6821      	ldr	r1, [r4, #0]
    b160:	6011      	str	r1, [r2, #0]
    b162:	6861      	ldr	r1, [r4, #4]
    b164:	6051      	str	r1, [r2, #4]
    b166:	68a1      	ldr	r1, [r4, #8]
    b168:	6091      	str	r1, [r2, #8]
    b16a:	eb0a 0105 	add.w	r1, sl, r5
    b16e:	ebab 0205 	sub.w	r2, fp, r5
    b172:	f042 0201 	orr.w	r2, r2, #1
    b176:	6099      	str	r1, [r3, #8]
    b178:	604a      	str	r2, [r1, #4]
    b17a:	f8da 3004 	ldr.w	r3, [sl, #4]
    b17e:	f003 0301 	and.w	r3, r3, #1
    b182:	432b      	orrs	r3, r5
    b184:	4640      	mov	r0, r8
    b186:	f8ca 3004 	str.w	r3, [sl, #4]
    b18a:	f7ff fee9 	bl	af60 <__malloc_unlock>
    b18e:	e76e      	b.n	b06e <_realloc_r+0xea>
    b190:	6823      	ldr	r3, [r4, #0]
    b192:	6003      	str	r3, [r0, #0]
    b194:	6863      	ldr	r3, [r4, #4]
    b196:	6043      	str	r3, [r0, #4]
    b198:	2a1b      	cmp	r2, #27
    b19a:	d868      	bhi.n	b26e <_realloc_r+0x2ea>
    b19c:	f104 0208 	add.w	r2, r4, #8
    b1a0:	f100 0308 	add.w	r3, r0, #8
    b1a4:	e74a      	b.n	b03c <_realloc_r+0xb8>
    b1a6:	eb09 0205 	add.w	r2, r9, r5
    b1aa:	609a      	str	r2, [r3, #8]
    b1ac:	ebac 0305 	sub.w	r3, ip, r5
    b1b0:	f043 0301 	orr.w	r3, r3, #1
    b1b4:	6053      	str	r3, [r2, #4]
    b1b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b1ba:	f003 0301 	and.w	r3, r3, #1
    b1be:	432b      	orrs	r3, r5
    b1c0:	4640      	mov	r0, r8
    b1c2:	f844 3c04 	str.w	r3, [r4, #-4]
    b1c6:	f7ff fecb 	bl	af60 <__malloc_unlock>
    b1ca:	4627      	mov	r7, r4
    b1cc:	e74f      	b.n	b06e <_realloc_r+0xea>
    b1ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b1d2:	f023 0303 	bic.w	r3, r3, #3
    b1d6:	441e      	add	r6, r3
    b1d8:	e751      	b.n	b07e <_realloc_r+0xfa>
    b1da:	4657      	mov	r7, sl
    b1dc:	f8da 100c 	ldr.w	r1, [sl, #12]
    b1e0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b1e4:	1f32      	subs	r2, r6, #4
    b1e6:	2a24      	cmp	r2, #36	; 0x24
    b1e8:	60c1      	str	r1, [r0, #12]
    b1ea:	6088      	str	r0, [r1, #8]
    b1ec:	d84c      	bhi.n	b288 <_realloc_r+0x304>
    b1ee:	2a13      	cmp	r2, #19
    b1f0:	d948      	bls.n	b284 <_realloc_r+0x300>
    b1f2:	6821      	ldr	r1, [r4, #0]
    b1f4:	f8ca 1008 	str.w	r1, [sl, #8]
    b1f8:	6861      	ldr	r1, [r4, #4]
    b1fa:	f8ca 100c 	str.w	r1, [sl, #12]
    b1fe:	2a1b      	cmp	r2, #27
    b200:	d856      	bhi.n	b2b0 <_realloc_r+0x32c>
    b202:	3408      	adds	r4, #8
    b204:	f10a 0210 	add.w	r2, sl, #16
    b208:	461e      	mov	r6, r3
    b20a:	6823      	ldr	r3, [r4, #0]
    b20c:	6013      	str	r3, [r2, #0]
    b20e:	6863      	ldr	r3, [r4, #4]
    b210:	6053      	str	r3, [r2, #4]
    b212:	68a3      	ldr	r3, [r4, #8]
    b214:	6093      	str	r3, [r2, #8]
    b216:	46d1      	mov	r9, sl
    b218:	463c      	mov	r4, r7
    b21a:	e730      	b.n	b07e <_realloc_r+0xfa>
    b21c:	4621      	mov	r1, r4
    b21e:	f001 fa95 	bl	c74c <memmove>
    b222:	e711      	b.n	b048 <_realloc_r+0xc4>
    b224:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b228:	4657      	mov	r7, sl
    b22a:	60cb      	str	r3, [r1, #12]
    b22c:	6099      	str	r1, [r3, #8]
    b22e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b232:	f8da 300c 	ldr.w	r3, [sl, #12]
    b236:	60cb      	str	r3, [r1, #12]
    b238:	1f32      	subs	r2, r6, #4
    b23a:	2a24      	cmp	r2, #36	; 0x24
    b23c:	6099      	str	r1, [r3, #8]
    b23e:	d82d      	bhi.n	b29c <_realloc_r+0x318>
    b240:	2a13      	cmp	r2, #19
    b242:	d929      	bls.n	b298 <_realloc_r+0x314>
    b244:	6823      	ldr	r3, [r4, #0]
    b246:	f8ca 3008 	str.w	r3, [sl, #8]
    b24a:	6863      	ldr	r3, [r4, #4]
    b24c:	f8ca 300c 	str.w	r3, [sl, #12]
    b250:	2a1b      	cmp	r2, #27
    b252:	d842      	bhi.n	b2da <_realloc_r+0x356>
    b254:	3408      	adds	r4, #8
    b256:	f10a 0310 	add.w	r3, sl, #16
    b25a:	6822      	ldr	r2, [r4, #0]
    b25c:	601a      	str	r2, [r3, #0]
    b25e:	6862      	ldr	r2, [r4, #4]
    b260:	605a      	str	r2, [r3, #4]
    b262:	68a2      	ldr	r2, [r4, #8]
    b264:	609a      	str	r2, [r3, #8]
    b266:	4666      	mov	r6, ip
    b268:	46d1      	mov	r9, sl
    b26a:	463c      	mov	r4, r7
    b26c:	e707      	b.n	b07e <_realloc_r+0xfa>
    b26e:	68a3      	ldr	r3, [r4, #8]
    b270:	6083      	str	r3, [r0, #8]
    b272:	68e3      	ldr	r3, [r4, #12]
    b274:	60c3      	str	r3, [r0, #12]
    b276:	2a24      	cmp	r2, #36	; 0x24
    b278:	d026      	beq.n	b2c8 <_realloc_r+0x344>
    b27a:	f104 0210 	add.w	r2, r4, #16
    b27e:	f100 0310 	add.w	r3, r0, #16
    b282:	e6db      	b.n	b03c <_realloc_r+0xb8>
    b284:	463a      	mov	r2, r7
    b286:	e7bf      	b.n	b208 <_realloc_r+0x284>
    b288:	4621      	mov	r1, r4
    b28a:	4638      	mov	r0, r7
    b28c:	461e      	mov	r6, r3
    b28e:	46d1      	mov	r9, sl
    b290:	f001 fa5c 	bl	c74c <memmove>
    b294:	463c      	mov	r4, r7
    b296:	e6f2      	b.n	b07e <_realloc_r+0xfa>
    b298:	463b      	mov	r3, r7
    b29a:	e7de      	b.n	b25a <_realloc_r+0x2d6>
    b29c:	4621      	mov	r1, r4
    b29e:	4638      	mov	r0, r7
    b2a0:	4666      	mov	r6, ip
    b2a2:	46d1      	mov	r9, sl
    b2a4:	f001 fa52 	bl	c74c <memmove>
    b2a8:	463c      	mov	r4, r7
    b2aa:	e6e8      	b.n	b07e <_realloc_r+0xfa>
    b2ac:	20008a60 	.word	0x20008a60
    b2b0:	68a1      	ldr	r1, [r4, #8]
    b2b2:	f8ca 1010 	str.w	r1, [sl, #16]
    b2b6:	68e1      	ldr	r1, [r4, #12]
    b2b8:	f8ca 1014 	str.w	r1, [sl, #20]
    b2bc:	2a24      	cmp	r2, #36	; 0x24
    b2be:	d020      	beq.n	b302 <_realloc_r+0x37e>
    b2c0:	3410      	adds	r4, #16
    b2c2:	f10a 0218 	add.w	r2, sl, #24
    b2c6:	e79f      	b.n	b208 <_realloc_r+0x284>
    b2c8:	6923      	ldr	r3, [r4, #16]
    b2ca:	6103      	str	r3, [r0, #16]
    b2cc:	6961      	ldr	r1, [r4, #20]
    b2ce:	6141      	str	r1, [r0, #20]
    b2d0:	f104 0218 	add.w	r2, r4, #24
    b2d4:	f100 0318 	add.w	r3, r0, #24
    b2d8:	e6b0      	b.n	b03c <_realloc_r+0xb8>
    b2da:	68a3      	ldr	r3, [r4, #8]
    b2dc:	f8ca 3010 	str.w	r3, [sl, #16]
    b2e0:	68e3      	ldr	r3, [r4, #12]
    b2e2:	f8ca 3014 	str.w	r3, [sl, #20]
    b2e6:	2a24      	cmp	r2, #36	; 0x24
    b2e8:	d021      	beq.n	b32e <_realloc_r+0x3aa>
    b2ea:	3410      	adds	r4, #16
    b2ec:	f10a 0318 	add.w	r3, sl, #24
    b2f0:	e7b3      	b.n	b25a <_realloc_r+0x2d6>
    b2f2:	463a      	mov	r2, r7
    b2f4:	e733      	b.n	b15e <_realloc_r+0x1da>
    b2f6:	4621      	mov	r1, r4
    b2f8:	4638      	mov	r0, r7
    b2fa:	f001 fa27 	bl	c74c <memmove>
    b2fe:	4b16      	ldr	r3, [pc, #88]	; (b358 <_realloc_r+0x3d4>)
    b300:	e733      	b.n	b16a <_realloc_r+0x1e6>
    b302:	6922      	ldr	r2, [r4, #16]
    b304:	f8ca 2018 	str.w	r2, [sl, #24]
    b308:	6962      	ldr	r2, [r4, #20]
    b30a:	f8ca 201c 	str.w	r2, [sl, #28]
    b30e:	3418      	adds	r4, #24
    b310:	f10a 0220 	add.w	r2, sl, #32
    b314:	e778      	b.n	b208 <_realloc_r+0x284>
    b316:	68a1      	ldr	r1, [r4, #8]
    b318:	f8ca 1010 	str.w	r1, [sl, #16]
    b31c:	68e1      	ldr	r1, [r4, #12]
    b31e:	f8ca 1014 	str.w	r1, [sl, #20]
    b322:	2a24      	cmp	r2, #36	; 0x24
    b324:	d00d      	beq.n	b342 <_realloc_r+0x3be>
    b326:	3410      	adds	r4, #16
    b328:	f10a 0218 	add.w	r2, sl, #24
    b32c:	e717      	b.n	b15e <_realloc_r+0x1da>
    b32e:	6923      	ldr	r3, [r4, #16]
    b330:	f8ca 3018 	str.w	r3, [sl, #24]
    b334:	6963      	ldr	r3, [r4, #20]
    b336:	f8ca 301c 	str.w	r3, [sl, #28]
    b33a:	3418      	adds	r4, #24
    b33c:	f10a 0320 	add.w	r3, sl, #32
    b340:	e78b      	b.n	b25a <_realloc_r+0x2d6>
    b342:	6922      	ldr	r2, [r4, #16]
    b344:	f8ca 2018 	str.w	r2, [sl, #24]
    b348:	6962      	ldr	r2, [r4, #20]
    b34a:	f8ca 201c 	str.w	r2, [sl, #28]
    b34e:	3418      	adds	r4, #24
    b350:	f10a 0220 	add.w	r2, sl, #32
    b354:	e703      	b.n	b15e <_realloc_r+0x1da>
    b356:	bf00      	nop
    b358:	20008a60 	.word	0x20008a60
    b35c:	00000000 	.word	0x00000000

0000b360 <_strtod_l>:
    b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b364:	ed2d 8b10 	vpush	{d8-d15}
    b368:	b097      	sub	sp, #92	; 0x5c
    b36a:	468a      	mov	sl, r1
    b36c:	2100      	movs	r1, #0
    b36e:	9207      	str	r2, [sp, #28]
    b370:	9112      	str	r1, [sp, #72]	; 0x48
    b372:	2200      	movs	r2, #0
    b374:	2100      	movs	r1, #0
    b376:	e9cd 1204 	strd	r1, r2, [sp, #16]
    b37a:	4680      	mov	r8, r0
    b37c:	4651      	mov	r1, sl
    b37e:	9111      	str	r1, [sp, #68]	; 0x44
    b380:	460f      	mov	r7, r1
    b382:	f811 2b01 	ldrb.w	r2, [r1], #1
    b386:	2a2d      	cmp	r2, #45	; 0x2d
    b388:	d85e      	bhi.n	b448 <_strtod_l+0xe8>
    b38a:	a001      	add	r0, pc, #4	; (adr r0, b390 <_strtod_l+0x30>)
    b38c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    b390:	0000b531 	.word	0x0000b531
    b394:	0000b449 	.word	0x0000b449
    b398:	0000b449 	.word	0x0000b449
    b39c:	0000b449 	.word	0x0000b449
    b3a0:	0000b449 	.word	0x0000b449
    b3a4:	0000b449 	.word	0x0000b449
    b3a8:	0000b449 	.word	0x0000b449
    b3ac:	0000b449 	.word	0x0000b449
    b3b0:	0000b449 	.word	0x0000b449
    b3b4:	0000b37f 	.word	0x0000b37f
    b3b8:	0000b37f 	.word	0x0000b37f
    b3bc:	0000b37f 	.word	0x0000b37f
    b3c0:	0000b37f 	.word	0x0000b37f
    b3c4:	0000b37f 	.word	0x0000b37f
    b3c8:	0000b449 	.word	0x0000b449
    b3cc:	0000b449 	.word	0x0000b449
    b3d0:	0000b449 	.word	0x0000b449
    b3d4:	0000b449 	.word	0x0000b449
    b3d8:	0000b449 	.word	0x0000b449
    b3dc:	0000b449 	.word	0x0000b449
    b3e0:	0000b449 	.word	0x0000b449
    b3e4:	0000b449 	.word	0x0000b449
    b3e8:	0000b449 	.word	0x0000b449
    b3ec:	0000b449 	.word	0x0000b449
    b3f0:	0000b449 	.word	0x0000b449
    b3f4:	0000b449 	.word	0x0000b449
    b3f8:	0000b449 	.word	0x0000b449
    b3fc:	0000b449 	.word	0x0000b449
    b400:	0000b449 	.word	0x0000b449
    b404:	0000b449 	.word	0x0000b449
    b408:	0000b449 	.word	0x0000b449
    b40c:	0000b449 	.word	0x0000b449
    b410:	0000b37f 	.word	0x0000b37f
    b414:	0000b449 	.word	0x0000b449
    b418:	0000b449 	.word	0x0000b449
    b41c:	0000b449 	.word	0x0000b449
    b420:	0000b449 	.word	0x0000b449
    b424:	0000b449 	.word	0x0000b449
    b428:	0000b449 	.word	0x0000b449
    b42c:	0000b449 	.word	0x0000b449
    b430:	0000b449 	.word	0x0000b449
    b434:	0000b449 	.word	0x0000b449
    b438:	0000b449 	.word	0x0000b449
    b43c:	0000bb6b 	.word	0x0000bb6b
    b440:	0000b449 	.word	0x0000b449
    b444:	0000bb57 	.word	0x0000bb57
    b448:	2100      	movs	r1, #0
    b44a:	9109      	str	r1, [sp, #36]	; 0x24
    b44c:	2a30      	cmp	r2, #48	; 0x30
    b44e:	d07d      	beq.n	b54c <_strtod_l+0x1ec>
    b450:	2300      	movs	r3, #0
    b452:	9308      	str	r3, [sp, #32]
    b454:	2a2f      	cmp	r2, #47	; 0x2f
    b456:	4614      	mov	r4, r2
    b458:	f240 84cd 	bls.w	bdf6 <_strtod_l+0xa96>
    b45c:	f04f 0900 	mov.w	r9, #0
    b460:	4638      	mov	r0, r7
    b462:	464e      	mov	r6, r9
    b464:	464d      	mov	r5, r9
    b466:	e012      	b.n	b48e <_strtod_l+0x12e>
    b468:	3001      	adds	r0, #1
    b46a:	2d08      	cmp	r5, #8
    b46c:	9011      	str	r0, [sp, #68]	; 0x44
    b46e:	bfc8      	it	gt
    b470:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    b474:	7804      	ldrb	r4, [r0, #0]
    b476:	bfc6      	itte	gt
    b478:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    b47c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    b480:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    b484:	2c2f      	cmp	r4, #47	; 0x2f
    b486:	f105 0501 	add.w	r5, r5, #1
    b48a:	4622      	mov	r2, r4
    b48c:	dd6f      	ble.n	b56e <_strtod_l+0x20e>
    b48e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    b492:	2c39      	cmp	r4, #57	; 0x39
    b494:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b498:	dde6      	ble.n	b468 <_strtod_l+0x108>
    b49a:	499f      	ldr	r1, [pc, #636]	; (b718 <_strtod_l+0x3b8>)
    b49c:	2201      	movs	r2, #1
    b49e:	f001 fa23 	bl	c8e8 <strncmp>
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d137      	bne.n	b516 <_strtod_l+0x1b6>
    b4a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b4a8:	461a      	mov	r2, r3
    b4aa:	3301      	adds	r3, #1
    b4ac:	9311      	str	r3, [sp, #68]	; 0x44
    b4ae:	7854      	ldrb	r4, [r2, #1]
    b4b0:	2d00      	cmp	r5, #0
    b4b2:	f040 8543 	bne.w	bf3c <_strtod_l+0xbdc>
    b4b6:	2c30      	cmp	r4, #48	; 0x30
    b4b8:	f040 8524 	bne.w	bf04 <_strtod_l+0xba4>
    b4bc:	f1c3 0201 	rsb	r2, r3, #1
    b4c0:	1898      	adds	r0, r3, r2
    b4c2:	3301      	adds	r3, #1
    b4c4:	9311      	str	r3, [sp, #68]	; 0x44
    b4c6:	781c      	ldrb	r4, [r3, #0]
    b4c8:	2c30      	cmp	r4, #48	; 0x30
    b4ca:	d0f9      	beq.n	b4c0 <_strtod_l+0x160>
    b4cc:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    b4d0:	2b08      	cmp	r3, #8
    b4d2:	f200 8301 	bhi.w	bad8 <_strtod_l+0x778>
    b4d6:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b4d8:	1c43      	adds	r3, r0, #1
    b4da:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    b4de:	930b      	str	r3, [sp, #44]	; 0x2c
    b4e0:	2501      	movs	r5, #1
    b4e2:	46bc      	mov	ip, r7
    b4e4:	f04f 0e00 	mov.w	lr, #0
    b4e8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    b4ec:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    b4f0:	2000      	movs	r0, #0
    b4f2:	f10c 0301 	add.w	r3, ip, #1
    b4f6:	9311      	str	r3, [sp, #68]	; 0x44
    b4f8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b4fc:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    b500:	2909      	cmp	r1, #9
    b502:	f200 82bb 	bhi.w	ba7c <_strtod_l+0x71c>
    b506:	3001      	adds	r0, #1
    b508:	468b      	mov	fp, r1
    b50a:	2900      	cmp	r1, #0
    b50c:	f040 844f 	bne.w	bdae <_strtod_l+0xa4e>
    b510:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    b514:	e7ed      	b.n	b4f2 <_strtod_l+0x192>
    b516:	2000      	movs	r0, #0
    b518:	2c65      	cmp	r4, #101	; 0x65
    b51a:	46ae      	mov	lr, r5
    b51c:	900b      	str	r0, [sp, #44]	; 0x2c
    b51e:	4684      	mov	ip, r0
    b520:	d001      	beq.n	b526 <_strtod_l+0x1c6>
    b522:	2c45      	cmp	r4, #69	; 0x45
    b524:	d130      	bne.n	b588 <_strtod_l+0x228>
    b526:	2d00      	cmp	r5, #0
    b528:	d16b      	bne.n	b602 <_strtod_l+0x2a2>
    b52a:	9b08      	ldr	r3, [sp, #32]
    b52c:	4303      	orrs	r3, r0
    b52e:	d167      	bne.n	b600 <_strtod_l+0x2a0>
    b530:	9b07      	ldr	r3, [sp, #28]
    b532:	ed9f 8b77 	vldr	d8, [pc, #476]	; b710 <_strtod_l+0x3b0>
    b536:	b113      	cbz	r3, b53e <_strtod_l+0x1de>
    b538:	9b07      	ldr	r3, [sp, #28]
    b53a:	f8c3 a000 	str.w	sl, [r3]
    b53e:	eeb0 0b48 	vmov.f64	d0, d8
    b542:	b017      	add	sp, #92	; 0x5c
    b544:	ecbd 8b10 	vpop	{d8-d15}
    b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b54c:	787a      	ldrb	r2, [r7, #1]
    b54e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    b552:	2a58      	cmp	r2, #88	; 0x58
    b554:	f000 840c 	beq.w	bd70 <_strtod_l+0xa10>
    b558:	3701      	adds	r7, #1
    b55a:	9711      	str	r7, [sp, #68]	; 0x44
    b55c:	783a      	ldrb	r2, [r7, #0]
    b55e:	2a30      	cmp	r2, #48	; 0x30
    b560:	d0fa      	beq.n	b558 <_strtod_l+0x1f8>
    b562:	2a00      	cmp	r2, #0
    b564:	f000 80b7 	beq.w	b6d6 <_strtod_l+0x376>
    b568:	2301      	movs	r3, #1
    b56a:	9308      	str	r3, [sp, #32]
    b56c:	e772      	b.n	b454 <_strtod_l+0xf4>
    b56e:	496a      	ldr	r1, [pc, #424]	; (b718 <_strtod_l+0x3b8>)
    b570:	2201      	movs	r2, #1
    b572:	f001 f9b9 	bl	c8e8 <strncmp>
    b576:	2800      	cmp	r0, #0
    b578:	f000 80c0 	beq.w	b6fc <_strtod_l+0x39c>
    b57c:	46ae      	mov	lr, r5
    b57e:	f04f 0c00 	mov.w	ip, #0
    b582:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    b586:	4660      	mov	r0, ip
    b588:	f04f 0b00 	mov.w	fp, #0
    b58c:	2d00      	cmp	r5, #0
    b58e:	d07e      	beq.n	b68e <_strtod_l+0x32e>
    b590:	ee07 6a90 	vmov	s15, r6
    b594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    b59a:	ebab 0303 	sub.w	r3, fp, r3
    b59e:	f1be 0f00 	cmp.w	lr, #0
    b5a2:	bf08      	it	eq
    b5a4:	46ae      	moveq	lr, r5
    b5a6:	2d10      	cmp	r5, #16
    b5a8:	930a      	str	r3, [sp, #40]	; 0x28
    b5aa:	462b      	mov	r3, r5
    b5ac:	bfa8      	it	ge
    b5ae:	2310      	movge	r3, #16
    b5b0:	2d09      	cmp	r5, #9
    b5b2:	ed8d 7b04 	vstr	d7, [sp, #16]
    b5b6:	dd0c      	ble.n	b5d2 <_strtod_l+0x272>
    b5b8:	4a58      	ldr	r2, [pc, #352]	; (b71c <_strtod_l+0x3bc>)
    b5ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b5be:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    b5c2:	ee06 9a90 	vmov	s13, r9
    b5c6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    b5ca:	eea7 6b05 	vfma.f64	d6, d7, d5
    b5ce:	ed8d 6b04 	vstr	d6, [sp, #16]
    b5d2:	2d0f      	cmp	r5, #15
    b5d4:	f300 80a8 	bgt.w	b728 <_strtod_l+0x3c8>
    b5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b5da:	2a00      	cmp	r2, #0
    b5dc:	f000 83e4 	beq.w	bda8 <_strtod_l+0xa48>
    b5e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b5e2:	f340 833c 	ble.w	bc5e <_strtod_l+0x8fe>
    b5e6:	2a16      	cmp	r2, #22
    b5e8:	f340 8498 	ble.w	bf1c <_strtod_l+0xbbc>
    b5ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    b5ee:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    b5f2:	428a      	cmp	r2, r1
    b5f4:	f280 84a6 	bge.w	bf44 <_strtod_l+0xbe4>
    b5f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b5fa:	1aeb      	subs	r3, r5, r3
    b5fc:	4413      	add	r3, r2
    b5fe:	e099      	b.n	b734 <_strtod_l+0x3d4>
    b600:	2500      	movs	r5, #0
    b602:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    b606:	f10a 0301 	add.w	r3, sl, #1
    b60a:	9311      	str	r3, [sp, #68]	; 0x44
    b60c:	f89a 4001 	ldrb.w	r4, [sl, #1]
    b610:	2c2b      	cmp	r4, #43	; 0x2b
    b612:	f000 825e 	beq.w	bad2 <_strtod_l+0x772>
    b616:	2c2d      	cmp	r4, #45	; 0x2d
    b618:	f000 81f7 	beq.w	ba0a <_strtod_l+0x6aa>
    b61c:	2300      	movs	r3, #0
    b61e:	930a      	str	r3, [sp, #40]	; 0x28
    b620:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    b624:	2b09      	cmp	r3, #9
    b626:	f200 81eb 	bhi.w	ba00 <_strtod_l+0x6a0>
    b62a:	2c30      	cmp	r4, #48	; 0x30
    b62c:	d105      	bne.n	b63a <_strtod_l+0x2da>
    b62e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b630:	3301      	adds	r3, #1
    b632:	9311      	str	r3, [sp, #68]	; 0x44
    b634:	781c      	ldrb	r4, [r3, #0]
    b636:	2c30      	cmp	r4, #48	; 0x30
    b638:	d0fa      	beq.n	b630 <_strtod_l+0x2d0>
    b63a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    b63e:	2b08      	cmp	r3, #8
    b640:	d8a2      	bhi.n	b588 <_strtod_l+0x228>
    b642:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b644:	920c      	str	r2, [sp, #48]	; 0x30
    b646:	1c53      	adds	r3, r2, #1
    b648:	9311      	str	r3, [sp, #68]	; 0x44
    b64a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    b64e:	7854      	ldrb	r4, [r2, #1]
    b650:	2c2f      	cmp	r4, #47	; 0x2f
    b652:	dc07      	bgt.n	b664 <_strtod_l+0x304>
    b654:	e3de      	b.n	be14 <_strtod_l+0xab4>
    b656:	3301      	adds	r3, #1
    b658:	9311      	str	r3, [sp, #68]	; 0x44
    b65a:	784c      	ldrb	r4, [r1, #1]
    b65c:	2c2f      	cmp	r4, #47	; 0x2f
    b65e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    b662:	dd06      	ble.n	b672 <_strtod_l+0x312>
    b664:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    b668:	2c39      	cmp	r4, #57	; 0x39
    b66a:	4619      	mov	r1, r3
    b66c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    b670:	ddf1      	ble.n	b656 <_strtod_l+0x2f6>
    b672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b674:	1a9b      	subs	r3, r3, r2
    b676:	2b08      	cmp	r3, #8
    b678:	f340 83cc 	ble.w	be14 <_strtod_l+0xab4>
    b67c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    b680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b682:	2b00      	cmp	r3, #0
    b684:	d082      	beq.n	b58c <_strtod_l+0x22c>
    b686:	f1cb 0b00 	rsb	fp, fp, #0
    b68a:	2d00      	cmp	r5, #0
    b68c:	d180      	bne.n	b590 <_strtod_l+0x230>
    b68e:	9b08      	ldr	r3, [sp, #32]
    b690:	4303      	orrs	r3, r0
    b692:	d120      	bne.n	b6d6 <_strtod_l+0x376>
    b694:	f1bc 0f00 	cmp.w	ip, #0
    b698:	f47f af4a 	bne.w	b530 <_strtod_l+0x1d0>
    b69c:	2c69      	cmp	r4, #105	; 0x69
    b69e:	f000 83cf 	beq.w	be40 <_strtod_l+0xae0>
    b6a2:	f300 82f3 	bgt.w	bc8c <_strtod_l+0x92c>
    b6a6:	2c49      	cmp	r4, #73	; 0x49
    b6a8:	f000 83ca 	beq.w	be40 <_strtod_l+0xae0>
    b6ac:	2c4e      	cmp	r4, #78	; 0x4e
    b6ae:	f47f af3f 	bne.w	b530 <_strtod_l+0x1d0>
    b6b2:	491b      	ldr	r1, [pc, #108]	; (b720 <_strtod_l+0x3c0>)
    b6b4:	a811      	add	r0, sp, #68	; 0x44
    b6b6:	f002 f937 	bl	d928 <__match>
    b6ba:	2800      	cmp	r0, #0
    b6bc:	f43f af38 	beq.w	b530 <_strtod_l+0x1d0>
    b6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6c2:	781b      	ldrb	r3, [r3, #0]
    b6c4:	2b28      	cmp	r3, #40	; 0x28
    b6c6:	f000 84f2 	beq.w	c0ae <_strtod_l+0xd4e>
    b6ca:	4816      	ldr	r0, [pc, #88]	; (b724 <_strtod_l+0x3c4>)
    b6cc:	f001 fc68 	bl	cfa0 <nan>
    b6d0:	eeb0 8b40 	vmov.f64	d8, d0
    b6d4:	e001      	b.n	b6da <_strtod_l+0x37a>
    b6d6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; b710 <_strtod_l+0x3b0>
    b6da:	9a07      	ldr	r2, [sp, #28]
    b6dc:	b10a      	cbz	r2, b6e2 <_strtod_l+0x382>
    b6de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6e0:	6013      	str	r3, [r2, #0]
    b6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	f43f af2a 	beq.w	b53e <_strtod_l+0x1de>
    b6ea:	eeb1 8b48 	vneg.f64	d8, d8
    b6ee:	eeb0 0b48 	vmov.f64	d0, d8
    b6f2:	b017      	add	sp, #92	; 0x5c
    b6f4:	ecbd 8b10 	vpop	{d8-d15}
    b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6fe:	900b      	str	r0, [sp, #44]	; 0x2c
    b700:	1c5a      	adds	r2, r3, #1
    b702:	9211      	str	r2, [sp, #68]	; 0x44
    b704:	785c      	ldrb	r4, [r3, #1]
    b706:	46ae      	mov	lr, r5
    b708:	e6f8      	b.n	b4fc <_strtod_l+0x19c>
    b70a:	bf00      	nop
    b70c:	f3af 8000 	nop.w
	...
    b718:	2000803c 	.word	0x2000803c
    b71c:	200003a8 	.word	0x200003a8
    b720:	20000ee8 	.word	0x20000ee8
    b724:	2000832c 	.word	0x2000832c
    b728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b72a:	1aeb      	subs	r3, r5, r3
    b72c:	4413      	add	r3, r2
    b72e:	2b00      	cmp	r3, #0
    b730:	f340 82b0 	ble.w	bc94 <_strtod_l+0x934>
    b734:	f013 010f 	ands.w	r1, r3, #15
    b738:	d00a      	beq.n	b750 <_strtod_l+0x3f0>
    b73a:	4ac3      	ldr	r2, [pc, #780]	; (ba48 <_strtod_l+0x6e8>)
    b73c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    b740:	ed9d 6b04 	vldr	d6, [sp, #16]
    b744:	ed92 7b00 	vldr	d7, [r2]
    b748:	ee27 7b06 	vmul.f64	d7, d7, d6
    b74c:	ed8d 7b04 	vstr	d7, [sp, #16]
    b750:	f033 020f 	bics.w	r2, r3, #15
    b754:	f040 8238 	bne.w	bbc8 <_strtod_l+0x868>
    b758:	2300      	movs	r3, #0
    b75a:	9308      	str	r3, [sp, #32]
    b75c:	9600      	str	r6, [sp, #0]
    b75e:	462b      	mov	r3, r5
    b760:	4672      	mov	r2, lr
    b762:	4639      	mov	r1, r7
    b764:	4640      	mov	r0, r8
    b766:	f002 fa6b 	bl	dc40 <__s2b>
    b76a:	4681      	mov	r9, r0
    b76c:	2800      	cmp	r0, #0
    b76e:	f000 82e1 	beq.w	bd34 <_strtod_l+0x9d4>
    b772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b774:	eba3 0b0b 	sub.w	fp, r3, fp
    b778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b77a:	ed9f eba9 	vldr	d14, [pc, #676]	; ba20 <_strtod_l+0x6c0>
    b77e:	2b00      	cmp	r3, #0
    b780:	ed9f cba9 	vldr	d12, [pc, #676]	; ba28 <_strtod_l+0x6c8>
    b784:	ed9f dbaa 	vldr	d13, [pc, #680]	; ba30 <_strtod_l+0x6d0>
    b788:	ed9f bbab 	vldr	d11, [pc, #684]	; ba38 <_strtod_l+0x6d8>
    b78c:	bfb4      	ite	lt
    b78e:	465a      	movlt	r2, fp
    b790:	2200      	movge	r2, #0
    b792:	f04f 0a00 	mov.w	sl, #0
    b796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b79a:	920b      	str	r2, [sp, #44]	; 0x2c
    b79c:	930c      	str	r3, [sp, #48]	; 0x30
    b79e:	4654      	mov	r4, sl
    b7a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b7a4:	4640      	mov	r0, r8
    b7a6:	f002 f9c9 	bl	db3c <_Balloc>
    b7aa:	4606      	mov	r6, r0
    b7ac:	2800      	cmp	r0, #0
    b7ae:	f000 810e 	beq.w	b9ce <_strtod_l+0x66e>
    b7b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    b7b6:	ed9d 8b04 	vldr	d8, [sp, #16]
    b7ba:	3202      	adds	r2, #2
    b7bc:	0092      	lsls	r2, r2, #2
    b7be:	f109 010c 	add.w	r1, r9, #12
    b7c2:	300c      	adds	r0, #12
    b7c4:	f7fc fda6 	bl	8314 <memcpy>
    b7c8:	eeb0 0b48 	vmov.f64	d0, d8
    b7cc:	aa14      	add	r2, sp, #80	; 0x50
    b7ce:	a913      	add	r1, sp, #76	; 0x4c
    b7d0:	4640      	mov	r0, r8
    b7d2:	f002 fdf1 	bl	e3b8 <__d2b>
    b7d6:	9012      	str	r0, [sp, #72]	; 0x48
    b7d8:	2800      	cmp	r0, #0
    b7da:	f000 80e4 	beq.w	b9a6 <_strtod_l+0x646>
    b7de:	2101      	movs	r1, #1
    b7e0:	4640      	mov	r0, r8
    b7e2:	f002 fad5 	bl	dd90 <__i2b>
    b7e6:	4604      	mov	r4, r0
    b7e8:	2800      	cmp	r0, #0
    b7ea:	f000 80f0 	beq.w	b9ce <_strtod_l+0x66e>
    b7ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b7f0:	2a00      	cmp	r2, #0
    b7f2:	f2c0 80de 	blt.w	b9b2 <_strtod_l+0x652>
    b7f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b7fa:	eb02 0b03 	add.w	fp, r2, r3
    b7fe:	9b08      	ldr	r3, [sp, #32]
    b800:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b802:	1ad2      	subs	r2, r2, r3
    b804:	442a      	add	r2, r5
    b806:	4b91      	ldr	r3, [pc, #580]	; (ba4c <_strtod_l+0x6ec>)
    b808:	3a01      	subs	r2, #1
    b80a:	429a      	cmp	r2, r3
    b80c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    b810:	f280 8098 	bge.w	b944 <_strtod_l+0x5e4>
    b814:	1a99      	subs	r1, r3, r2
    b816:	291f      	cmp	r1, #31
    b818:	eba5 0501 	sub.w	r5, r5, r1
    b81c:	f300 80e3 	bgt.w	b9e6 <_strtod_l+0x686>
    b820:	2201      	movs	r2, #1
    b822:	fa02 f301 	lsl.w	r3, r2, r1
    b826:	930d      	str	r3, [sp, #52]	; 0x34
    b828:	2300      	movs	r3, #0
    b82a:	930e      	str	r3, [sp, #56]	; 0x38
    b82c:	442f      	add	r7, r5
    b82e:	9b08      	ldr	r3, [sp, #32]
    b830:	445d      	add	r5, fp
    b832:	45ab      	cmp	fp, r5
    b834:	465a      	mov	r2, fp
    b836:	441f      	add	r7, r3
    b838:	bfa8      	it	ge
    b83a:	462a      	movge	r2, r5
    b83c:	42ba      	cmp	r2, r7
    b83e:	bfa8      	it	ge
    b840:	463a      	movge	r2, r7
    b842:	2a00      	cmp	r2, #0
    b844:	dd03      	ble.n	b84e <_strtod_l+0x4ee>
    b846:	1aad      	subs	r5, r5, r2
    b848:	1abf      	subs	r7, r7, r2
    b84a:	ebab 0b02 	sub.w	fp, fp, r2
    b84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b850:	2b00      	cmp	r3, #0
    b852:	f300 8088 	bgt.w	b966 <_strtod_l+0x606>
    b856:	2d00      	cmp	r5, #0
    b858:	f300 809c 	bgt.w	b994 <_strtod_l+0x634>
    b85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b85e:	2b00      	cmp	r3, #0
    b860:	f300 80b7 	bgt.w	b9d2 <_strtod_l+0x672>
    b864:	2f00      	cmp	r7, #0
    b866:	f300 80a9 	bgt.w	b9bc <_strtod_l+0x65c>
    b86a:	f1bb 0f00 	cmp.w	fp, #0
    b86e:	dd08      	ble.n	b882 <_strtod_l+0x522>
    b870:	4621      	mov	r1, r4
    b872:	465a      	mov	r2, fp
    b874:	4640      	mov	r0, r8
    b876:	f002 fbc7 	bl	e008 <__lshift>
    b87a:	4604      	mov	r4, r0
    b87c:	2800      	cmp	r0, #0
    b87e:	f000 80a6 	beq.w	b9ce <_strtod_l+0x66e>
    b882:	9912      	ldr	r1, [sp, #72]	; 0x48
    b884:	4632      	mov	r2, r6
    b886:	4640      	mov	r0, r8
    b888:	f002 fc58 	bl	e13c <__mdiff>
    b88c:	4682      	mov	sl, r0
    b88e:	2800      	cmp	r0, #0
    b890:	f000 809d 	beq.w	b9ce <_strtod_l+0x66e>
    b894:	2300      	movs	r3, #0
    b896:	68c5      	ldr	r5, [r0, #12]
    b898:	60c3      	str	r3, [r0, #12]
    b89a:	4621      	mov	r1, r4
    b89c:	f002 fc2c 	bl	e0f8 <__mcmp>
    b8a0:	2800      	cmp	r0, #0
    b8a2:	f2c0 83c7 	blt.w	c034 <_strtod_l+0xcd4>
    b8a6:	f000 8361 	beq.w	bf6c <_strtod_l+0xc0c>
    b8aa:	4621      	mov	r1, r4
    b8ac:	4650      	mov	r0, sl
    b8ae:	f002 fded 	bl	e48c <__ratio>
    b8b2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    b8b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
    b8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8be:	d846      	bhi.n	b94e <_strtod_l+0x5ee>
    b8c0:	2d00      	cmp	r5, #0
    b8c2:	f000 80cb 	beq.w	ba5c <_strtod_l+0x6fc>
    b8c6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    b8ca:	9805      	ldr	r0, [sp, #20]
    b8cc:	4b60      	ldr	r3, [pc, #384]	; (ba50 <_strtod_l+0x6f0>)
    b8ce:	2200      	movs	r2, #0
    b8d0:	4960      	ldr	r1, [pc, #384]	; (ba54 <_strtod_l+0x6f4>)
    b8d2:	f8df c184 	ldr.w	ip, [pc, #388]	; ba58 <_strtod_l+0x6f8>
    b8d6:	ea00 0701 	and.w	r7, r0, r1
    b8da:	4567      	cmp	r7, ip
    b8dc:	f000 80d4 	beq.w	ba88 <_strtod_l+0x728>
    b8e0:	9908      	ldr	r1, [sp, #32]
    b8e2:	b159      	cbz	r1, b8fc <_strtod_l+0x59c>
    b8e4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    b8e8:	d808      	bhi.n	b8fc <_strtod_l+0x59c>
    b8ea:	eeb4 9bcb 	vcmpe.f64	d9, d11
    b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8f2:	f240 8156 	bls.w	bba2 <_strtod_l+0x842>
    b8f6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    b8fa:	1bcb      	subs	r3, r1, r7
    b8fc:	eeb0 0b48 	vmov.f64	d0, d8
    b900:	ec43 2b1a 	vmov	d10, r2, r3
    b904:	f002 fcc4 	bl	e290 <__ulp>
    b908:	eeaa 8b00 	vfma.f64	d8, d10, d0
    b90c:	ed8d 8b04 	vstr	d8, [sp, #16]
    b910:	ee18 3a90 	vmov	r3, s17
    b914:	9a08      	ldr	r2, [sp, #32]
    b916:	b922      	cbnz	r2, b922 <_strtod_l+0x5c2>
    b918:	4a4e      	ldr	r2, [pc, #312]	; (ba54 <_strtod_l+0x6f4>)
    b91a:	401a      	ands	r2, r3
    b91c:	4297      	cmp	r7, r2
    b91e:	f000 80e4 	beq.w	baea <_strtod_l+0x78a>
    b922:	9912      	ldr	r1, [sp, #72]	; 0x48
    b924:	4640      	mov	r0, r8
    b926:	f002 f92f 	bl	db88 <_Bfree>
    b92a:	4631      	mov	r1, r6
    b92c:	4640      	mov	r0, r8
    b92e:	f002 f92b 	bl	db88 <_Bfree>
    b932:	4621      	mov	r1, r4
    b934:	4640      	mov	r0, r8
    b936:	f002 f927 	bl	db88 <_Bfree>
    b93a:	4651      	mov	r1, sl
    b93c:	4640      	mov	r0, r8
    b93e:	f002 f923 	bl	db88 <_Bfree>
    b942:	e72d      	b.n	b7a0 <_strtod_l+0x440>
    b944:	2301      	movs	r3, #1
    b946:	2100      	movs	r1, #0
    b948:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    b94c:	e76e      	b.n	b82c <_strtod_l+0x4cc>
    b94e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    b952:	ee20 9b09 	vmul.f64	d9, d0, d9
    b956:	2d00      	cmp	r5, #0
    b958:	d15f      	bne.n	ba1a <_strtod_l+0x6ba>
    b95a:	eeb1 7b49 	vneg.f64	d7, d9
    b95e:	9805      	ldr	r0, [sp, #20]
    b960:	ec53 2b17 	vmov	r2, r3, d7
    b964:	e7b4      	b.n	b8d0 <_strtod_l+0x570>
    b966:	4621      	mov	r1, r4
    b968:	461a      	mov	r2, r3
    b96a:	4640      	mov	r0, r8
    b96c:	f002 faec 	bl	df48 <__pow5mult>
    b970:	4604      	mov	r4, r0
    b972:	b360      	cbz	r0, b9ce <_strtod_l+0x66e>
    b974:	4601      	mov	r1, r0
    b976:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b978:	4640      	mov	r0, r8
    b97a:	f002 fa37 	bl	ddec <__multiply>
    b97e:	b330      	cbz	r0, b9ce <_strtod_l+0x66e>
    b980:	900f      	str	r0, [sp, #60]	; 0x3c
    b982:	9912      	ldr	r1, [sp, #72]	; 0x48
    b984:	4640      	mov	r0, r8
    b986:	f002 f8ff 	bl	db88 <_Bfree>
    b98a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b98c:	9212      	str	r2, [sp, #72]	; 0x48
    b98e:	2d00      	cmp	r5, #0
    b990:	f77f af64 	ble.w	b85c <_strtod_l+0x4fc>
    b994:	9912      	ldr	r1, [sp, #72]	; 0x48
    b996:	462a      	mov	r2, r5
    b998:	4640      	mov	r0, r8
    b99a:	f002 fb35 	bl	e008 <__lshift>
    b99e:	9012      	str	r0, [sp, #72]	; 0x48
    b9a0:	2800      	cmp	r0, #0
    b9a2:	f47f af5b 	bne.w	b85c <_strtod_l+0x4fc>
    b9a6:	2322      	movs	r3, #34	; 0x22
    b9a8:	ed9f 8b25 	vldr	d8, [pc, #148]	; ba40 <_strtod_l+0x6e0>
    b9ac:	f8c8 3000 	str.w	r3, [r8]
    b9b0:	e0bc      	b.n	bb2c <_strtod_l+0x7cc>
    b9b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b9b4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    b9b8:	1a9f      	subs	r7, r3, r2
    b9ba:	e720      	b.n	b7fe <_strtod_l+0x49e>
    b9bc:	4631      	mov	r1, r6
    b9be:	463a      	mov	r2, r7
    b9c0:	4640      	mov	r0, r8
    b9c2:	f002 fb21 	bl	e008 <__lshift>
    b9c6:	4606      	mov	r6, r0
    b9c8:	2800      	cmp	r0, #0
    b9ca:	f47f af4e 	bne.w	b86a <_strtod_l+0x50a>
    b9ce:	9812      	ldr	r0, [sp, #72]	; 0x48
    b9d0:	e7e9      	b.n	b9a6 <_strtod_l+0x646>
    b9d2:	4631      	mov	r1, r6
    b9d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b9d6:	4640      	mov	r0, r8
    b9d8:	f002 fab6 	bl	df48 <__pow5mult>
    b9dc:	4606      	mov	r6, r0
    b9de:	2800      	cmp	r0, #0
    b9e0:	f47f af40 	bne.w	b864 <_strtod_l+0x504>
    b9e4:	e7f3      	b.n	b9ce <_strtod_l+0x66e>
    b9e6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    b9ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    b9ee:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    b9f2:	2101      	movs	r1, #1
    b9f4:	32e2      	adds	r2, #226	; 0xe2
    b9f6:	fa01 f302 	lsl.w	r3, r1, r2
    b9fa:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    b9fe:	e715      	b.n	b82c <_strtod_l+0x4cc>
    ba00:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    ba04:	f04f 0b00 	mov.w	fp, #0
    ba08:	e5c0      	b.n	b58c <_strtod_l+0x22c>
    ba0a:	2301      	movs	r3, #1
    ba0c:	930a      	str	r3, [sp, #40]	; 0x28
    ba0e:	f10a 0302 	add.w	r3, sl, #2
    ba12:	9311      	str	r3, [sp, #68]	; 0x44
    ba14:	f89a 4002 	ldrb.w	r4, [sl, #2]
    ba18:	e602      	b.n	b620 <_strtod_l+0x2c0>
    ba1a:	eeb0 7b49 	vmov.f64	d7, d9
    ba1e:	e79e      	b.n	b95e <_strtod_l+0x5fe>
    ba20:	94a03595 	.word	0x94a03595
    ba24:	3fcfffff 	.word	0x3fcfffff
    ba28:	94a03595 	.word	0x94a03595
    ba2c:	3fdfffff 	.word	0x3fdfffff
    ba30:	35afe535 	.word	0x35afe535
    ba34:	3fe00000 	.word	0x3fe00000
    ba38:	ffc00000 	.word	0xffc00000
    ba3c:	41dfffff 	.word	0x41dfffff
    ba40:	00000000 	.word	0x00000000
    ba44:	7ff00000 	.word	0x7ff00000
    ba48:	200003a8 	.word	0x200003a8
    ba4c:	fffffc02 	.word	0xfffffc02
    ba50:	3ff00000 	.word	0x3ff00000
    ba54:	7ff00000 	.word	0x7ff00000
    ba58:	7fe00000 	.word	0x7fe00000
    ba5c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ba60:	2900      	cmp	r1, #0
    ba62:	f000 8085 	beq.w	bb70 <_strtod_l+0x810>
    ba66:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ba6a:	2901      	cmp	r1, #1
    ba6c:	f000 81d8 	beq.w	be20 <_strtod_l+0xac0>
    ba70:	4610      	mov	r0, r2
    ba72:	4bb7      	ldr	r3, [pc, #732]	; (bd50 <_strtod_l+0x9f0>)
    ba74:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    ba78:	2200      	movs	r2, #0
    ba7a:	e729      	b.n	b8d0 <_strtod_l+0x570>
    ba7c:	2c65      	cmp	r4, #101	; 0x65
    ba7e:	f04f 0c01 	mov.w	ip, #1
    ba82:	f43f adbe 	beq.w	b602 <_strtod_l+0x2a2>
    ba86:	e54c      	b.n	b522 <_strtod_l+0x1c2>
    ba88:	ec43 2b1a 	vmov	d10, r2, r3
    ba8c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    ba90:	9305      	str	r3, [sp, #20]
    ba92:	ed9d fb04 	vldr	d15, [sp, #16]
    ba96:	eeb0 0b4f 	vmov.f64	d0, d15
    ba9a:	f002 fbf9 	bl	e290 <__ulp>
    ba9e:	49ad      	ldr	r1, [pc, #692]	; (bd54 <_strtod_l+0x9f4>)
    baa0:	eeaa fb00 	vfma.f64	d15, d10, d0
    baa4:	ee1f 3a90 	vmov	r3, s31
    baa8:	4aab      	ldr	r2, [pc, #684]	; (bd58 <_strtod_l+0x9f8>)
    baaa:	4019      	ands	r1, r3
    baac:	4291      	cmp	r1, r2
    baae:	ed8d fb04 	vstr	d15, [sp, #16]
    bab2:	d972      	bls.n	bb9a <_strtod_l+0x83a>
    bab4:	4ba9      	ldr	r3, [pc, #676]	; (bd5c <_strtod_l+0x9fc>)
    bab6:	ee18 2a90 	vmov	r2, s17
    baba:	429a      	cmp	r2, r3
    babc:	d103      	bne.n	bac6 <_strtod_l+0x766>
    babe:	ee18 3a10 	vmov	r3, s16
    bac2:	3301      	adds	r3, #1
    bac4:	d083      	beq.n	b9ce <_strtod_l+0x66e>
    bac6:	4aa5      	ldr	r2, [pc, #660]	; (bd5c <_strtod_l+0x9fc>)
    bac8:	f04f 33ff 	mov.w	r3, #4294967295
    bacc:	e9cd 3204 	strd	r3, r2, [sp, #16]
    bad0:	e727      	b.n	b922 <_strtod_l+0x5c2>
    bad2:	2300      	movs	r3, #0
    bad4:	930a      	str	r3, [sp, #40]	; 0x28
    bad6:	e79a      	b.n	ba0e <_strtod_l+0x6ae>
    bad8:	2c65      	cmp	r4, #101	; 0x65
    bada:	f000 80d0 	beq.w	bc7e <_strtod_l+0x91e>
    bade:	2c45      	cmp	r4, #69	; 0x45
    bae0:	f000 80cd 	beq.w	bc7e <_strtod_l+0x91e>
    bae4:	f04f 0c01 	mov.w	ip, #1
    bae8:	e5d1      	b.n	b68e <_strtod_l+0x32e>
    baea:	ec51 0b19 	vmov	r0, r1, d9
    baee:	930d      	str	r3, [sp, #52]	; 0x34
    baf0:	f009 fb88 	bl	15204 <__aeabi_d2lz>
    baf4:	f009 fb58 	bl	151a8 <__aeabi_l2d>
    baf8:	9b04      	ldr	r3, [sp, #16]
    bafa:	431d      	orrs	r5, r3
    bafc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bafe:	ec41 0b17 	vmov	d7, r0, r1
    bb02:	f3c3 0313 	ubfx	r3, r3, #0, #20
    bb06:	431d      	orrs	r5, r3
    bb08:	ee39 9b47 	vsub.f64	d9, d9, d7
    bb0c:	f000 80a0 	beq.w	bc50 <_strtod_l+0x8f0>
    bb10:	eeb4 9bcc 	vcmpe.f64	d9, d12
    bb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb18:	d405      	bmi.n	bb26 <_strtod_l+0x7c6>
    bb1a:	eeb4 9bcd 	vcmpe.f64	d9, d13
    bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb22:	f77f aefe 	ble.w	b922 <_strtod_l+0x5c2>
    bb26:	ed9d 8b04 	vldr	d8, [sp, #16]
    bb2a:	9812      	ldr	r0, [sp, #72]	; 0x48
    bb2c:	4601      	mov	r1, r0
    bb2e:	4640      	mov	r0, r8
    bb30:	f002 f82a 	bl	db88 <_Bfree>
    bb34:	4631      	mov	r1, r6
    bb36:	4640      	mov	r0, r8
    bb38:	f002 f826 	bl	db88 <_Bfree>
    bb3c:	4621      	mov	r1, r4
    bb3e:	4640      	mov	r0, r8
    bb40:	f002 f822 	bl	db88 <_Bfree>
    bb44:	4649      	mov	r1, r9
    bb46:	4640      	mov	r0, r8
    bb48:	f002 f81e 	bl	db88 <_Bfree>
    bb4c:	4651      	mov	r1, sl
    bb4e:	4640      	mov	r0, r8
    bb50:	f002 f81a 	bl	db88 <_Bfree>
    bb54:	e5c1      	b.n	b6da <_strtod_l+0x37a>
    bb56:	2201      	movs	r2, #1
    bb58:	9209      	str	r2, [sp, #36]	; 0x24
    bb5a:	1c79      	adds	r1, r7, #1
    bb5c:	9111      	str	r1, [sp, #68]	; 0x44
    bb5e:	787a      	ldrb	r2, [r7, #1]
    bb60:	2a00      	cmp	r2, #0
    bb62:	f43f ace5 	beq.w	b530 <_strtod_l+0x1d0>
    bb66:	460f      	mov	r7, r1
    bb68:	e470      	b.n	b44c <_strtod_l+0xec>
    bb6a:	2200      	movs	r2, #0
    bb6c:	9209      	str	r2, [sp, #36]	; 0x24
    bb6e:	e7f4      	b.n	bb5a <_strtod_l+0x7fa>
    bb70:	f3c2 0313 	ubfx	r3, r2, #0, #20
    bb74:	4610      	mov	r0, r2
    bb76:	2b00      	cmp	r3, #0
    bb78:	f47f af7b 	bne.w	ba72 <_strtod_l+0x712>
    bb7c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    bb80:	eeb4 0bc7 	vcmpe.f64	d0, d7
    bb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb88:	f100 81d3 	bmi.w	bf32 <_strtod_l+0xbd2>
    bb8c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    bb90:	ee20 9b09 	vmul.f64	d9, d0, d9
    bb94:	eeb1 7b49 	vneg.f64	d7, d9
    bb98:	e6e2      	b.n	b960 <_strtod_l+0x600>
    bb9a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    bb9e:	9305      	str	r3, [sp, #20]
    bba0:	e6b8      	b.n	b914 <_strtod_l+0x5b4>
    bba2:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    bba6:	ee19 3a10 	vmov	r3, s18
    bbaa:	2b01      	cmp	r3, #1
    bbac:	bf38      	it	cc
    bbae:	2301      	movcc	r3, #1
    bbb0:	ee09 3a10 	vmov	s18, r3
    bbb4:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    bbb8:	2d00      	cmp	r5, #0
    bbba:	f040 813e 	bne.w	be3a <_strtod_l+0xada>
    bbbe:	eeb1 7b49 	vneg.f64	d7, d9
    bbc2:	ec53 2b17 	vmov	r2, r3, d7
    bbc6:	e696      	b.n	b8f6 <_strtod_l+0x596>
    bbc8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    bbcc:	f300 80b2 	bgt.w	bd34 <_strtod_l+0x9d4>
    bbd0:	2a10      	cmp	r2, #16
    bbd2:	ea4f 1322 	mov.w	r3, r2, asr #4
    bbd6:	f340 8286 	ble.w	c0e6 <_strtod_l+0xd86>
    bbda:	4c61      	ldr	r4, [pc, #388]	; (bd60 <_strtod_l+0xa00>)
    bbdc:	ed9d 7b04 	vldr	d7, [sp, #16]
    bbe0:	2000      	movs	r0, #0
    bbe2:	4622      	mov	r2, r4
    bbe4:	4601      	mov	r1, r0
    bbe6:	f013 0f01 	tst.w	r3, #1
    bbea:	f101 0101 	add.w	r1, r1, #1
    bbee:	ea4f 0363 	mov.w	r3, r3, asr #1
    bbf2:	d004      	beq.n	bbfe <_strtod_l+0x89e>
    bbf4:	ed92 6b00 	vldr	d6, [r2]
    bbf8:	2001      	movs	r0, #1
    bbfa:	ee27 7b06 	vmul.f64	d7, d7, d6
    bbfe:	2b01      	cmp	r3, #1
    bc00:	f102 0208 	add.w	r2, r2, #8
    bc04:	d1ef      	bne.n	bbe6 <_strtod_l+0x886>
    bc06:	b108      	cbz	r0, bc0c <_strtod_l+0x8ac>
    bc08:	ed8d 7b04 	vstr	d7, [sp, #16]
    bc0c:	9b05      	ldr	r3, [sp, #20]
    bc0e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    bc12:	9305      	str	r3, [sp, #20]
    bc14:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    bc18:	ed9d 6b04 	vldr	d6, [sp, #16]
    bc1c:	ed94 7b00 	vldr	d7, [r4]
    bc20:	4b4c      	ldr	r3, [pc, #304]	; (bd54 <_strtod_l+0x9f4>)
    bc22:	ee27 7b06 	vmul.f64	d7, d7, d6
    bc26:	ee17 2a90 	vmov	r2, s15
    bc2a:	494e      	ldr	r1, [pc, #312]	; (bd64 <_strtod_l+0xa04>)
    bc2c:	4013      	ands	r3, r2
    bc2e:	428b      	cmp	r3, r1
    bc30:	ed8d 7b04 	vstr	d7, [sp, #16]
    bc34:	d87e      	bhi.n	bd34 <_strtod_l+0x9d4>
    bc36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    bc3a:	428b      	cmp	r3, r1
    bc3c:	f240 81d6 	bls.w	bfec <_strtod_l+0xc8c>
    bc40:	4c46      	ldr	r4, [pc, #280]	; (bd5c <_strtod_l+0x9fc>)
    bc42:	f04f 33ff 	mov.w	r3, #4294967295
    bc46:	e9cd 3404 	strd	r3, r4, [sp, #16]
    bc4a:	2300      	movs	r3, #0
    bc4c:	9308      	str	r3, [sp, #32]
    bc4e:	e585      	b.n	b75c <_strtod_l+0x3fc>
    bc50:	eeb4 9bce 	vcmpe.f64	d9, d14
    bc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc58:	f57f ae63 	bpl.w	b922 <_strtod_l+0x5c2>
    bc5c:	e763      	b.n	bb26 <_strtod_l+0x7c6>
    bc5e:	3216      	adds	r2, #22
    bc60:	f6ff ad62 	blt.w	b728 <_strtod_l+0x3c8>
    bc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc66:	eba3 0b0b 	sub.w	fp, r3, fp
    bc6a:	4b3f      	ldr	r3, [pc, #252]	; (bd68 <_strtod_l+0xa08>)
    bc6c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    bc70:	ed93 7b00 	vldr	d7, [r3]
    bc74:	ed9d 6b04 	vldr	d6, [sp, #16]
    bc78:	ee86 8b07 	vdiv.f64	d8, d6, d7
    bc7c:	e52d      	b.n	b6da <_strtod_l+0x37a>
    bc7e:	f04f 0e00 	mov.w	lr, #0
    bc82:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    bc86:	f04f 0c01 	mov.w	ip, #1
    bc8a:	e44e      	b.n	b52a <_strtod_l+0x1ca>
    bc8c:	2c6e      	cmp	r4, #110	; 0x6e
    bc8e:	f43f ad10 	beq.w	b6b2 <_strtod_l+0x352>
    bc92:	e44d      	b.n	b530 <_strtod_l+0x1d0>
    bc94:	f43f ad60 	beq.w	b758 <_strtod_l+0x3f8>
    bc98:	425b      	negs	r3, r3
    bc9a:	f013 010f 	ands.w	r1, r3, #15
    bc9e:	d00a      	beq.n	bcb6 <_strtod_l+0x956>
    bca0:	4a31      	ldr	r2, [pc, #196]	; (bd68 <_strtod_l+0xa08>)
    bca2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    bca6:	ed9d 6b04 	vldr	d6, [sp, #16]
    bcaa:	ed92 7b00 	vldr	d7, [r2]
    bcae:	ee86 7b07 	vdiv.f64	d7, d6, d7
    bcb2:	ed8d 7b04 	vstr	d7, [sp, #16]
    bcb6:	111b      	asrs	r3, r3, #4
    bcb8:	f43f ad4e 	beq.w	b758 <_strtod_l+0x3f8>
    bcbc:	2b1f      	cmp	r3, #31
    bcbe:	dc33      	bgt.n	bd28 <_strtod_l+0x9c8>
    bcc0:	f013 0210 	ands.w	r2, r3, #16
    bcc4:	bf18      	it	ne
    bcc6:	226a      	movne	r2, #106	; 0x6a
    bcc8:	ed9d 7b04 	vldr	d7, [sp, #16]
    bccc:	9208      	str	r2, [sp, #32]
    bcce:	4a27      	ldr	r2, [pc, #156]	; (bd6c <_strtod_l+0xa0c>)
    bcd0:	2100      	movs	r1, #0
    bcd2:	07d8      	lsls	r0, r3, #31
    bcd4:	d504      	bpl.n	bce0 <_strtod_l+0x980>
    bcd6:	ed92 6b00 	vldr	d6, [r2]
    bcda:	2101      	movs	r1, #1
    bcdc:	ee27 7b06 	vmul.f64	d7, d7, d6
    bce0:	105b      	asrs	r3, r3, #1
    bce2:	f102 0208 	add.w	r2, r2, #8
    bce6:	d1f4      	bne.n	bcd2 <_strtod_l+0x972>
    bce8:	b109      	cbz	r1, bcee <_strtod_l+0x98e>
    bcea:	ed8d 7b04 	vstr	d7, [sp, #16]
    bcee:	9b08      	ldr	r3, [sp, #32]
    bcf0:	b193      	cbz	r3, bd18 <_strtod_l+0x9b8>
    bcf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    bcf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
    bcfa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    bcfe:	2b00      	cmp	r3, #0
    bd00:	dd0a      	ble.n	bd18 <_strtod_l+0x9b8>
    bd02:	2b1f      	cmp	r3, #31
    bd04:	f340 822f 	ble.w	c166 <_strtod_l+0xe06>
    bd08:	2000      	movs	r0, #0
    bd0a:	2b34      	cmp	r3, #52	; 0x34
    bd0c:	9004      	str	r0, [sp, #16]
    bd0e:	f340 8240 	ble.w	c192 <_strtod_l+0xe32>
    bd12:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    bd16:	9305      	str	r3, [sp, #20]
    bd18:	ed9d 7b04 	vldr	d7, [sp, #16]
    bd1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bd24:	f47f ad1a 	bne.w	b75c <_strtod_l+0x3fc>
    bd28:	2322      	movs	r3, #34	; 0x22
    bd2a:	ed9f 8b05 	vldr	d8, [pc, #20]	; bd40 <_strtod_l+0x9e0>
    bd2e:	f8c8 3000 	str.w	r3, [r8]
    bd32:	e4d2      	b.n	b6da <_strtod_l+0x37a>
    bd34:	2322      	movs	r3, #34	; 0x22
    bd36:	ed9f 8b04 	vldr	d8, [pc, #16]	; bd48 <_strtod_l+0x9e8>
    bd3a:	f8c8 3000 	str.w	r3, [r8]
    bd3e:	e4cc      	b.n	b6da <_strtod_l+0x37a>
	...
    bd4c:	7ff00000 	.word	0x7ff00000
    bd50:	bff00000 	.word	0xbff00000
    bd54:	7ff00000 	.word	0x7ff00000
    bd58:	7c9fffff 	.word	0x7c9fffff
    bd5c:	7fefffff 	.word	0x7fefffff
    bd60:	20000380 	.word	0x20000380
    bd64:	7ca00000 	.word	0x7ca00000
    bd68:	200003a8 	.word	0x200003a8
    bd6c:	20000470 	.word	0x20000470
    bd70:	9302      	str	r3, [sp, #8]
    bd72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd74:	9301      	str	r3, [sp, #4]
    bd76:	ab12      	add	r3, sp, #72	; 0x48
    bd78:	9300      	str	r3, [sp, #0]
    bd7a:	4aa7      	ldr	r2, [pc, #668]	; (c018 <_strtod_l+0xcb8>)
    bd7c:	ab13      	add	r3, sp, #76	; 0x4c
    bd7e:	a911      	add	r1, sp, #68	; 0x44
    bd80:	4640      	mov	r0, r8
    bd82:	f001 fb07 	bl	d394 <__gethex>
    bd86:	f010 050f 	ands.w	r5, r0, #15
    bd8a:	4604      	mov	r4, r0
    bd8c:	f43f aca3 	beq.w	b6d6 <_strtod_l+0x376>
    bd90:	2d06      	cmp	r5, #6
    bd92:	d174      	bne.n	be7e <_strtod_l+0xb1e>
    bd94:	9b07      	ldr	r3, [sp, #28]
    bd96:	ed9f 8b9a 	vldr	d8, [pc, #616]	; c000 <_strtod_l+0xca0>
    bd9a:	3701      	adds	r7, #1
    bd9c:	2b00      	cmp	r3, #0
    bd9e:	f43f abce 	beq.w	b53e <_strtod_l+0x1de>
    bda2:	601f      	str	r7, [r3, #0]
    bda4:	f7ff bbcb 	b.w	b53e <_strtod_l+0x1de>
    bda8:	ed9d 8b04 	vldr	d8, [sp, #16]
    bdac:	e495      	b.n	b6da <_strtod_l+0x37a>
    bdae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bdb0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    bdb4:	4403      	add	r3, r0
    bdb6:	930b      	str	r3, [sp, #44]	; 0x2c
    bdb8:	2801      	cmp	r0, #1
    bdba:	f105 0301 	add.w	r3, r5, #1
    bdbe:	461a      	mov	r2, r3
    bdc0:	d014      	beq.n	bdec <_strtod_l+0xa8c>
    bdc2:	4428      	add	r0, r5
    bdc4:	1e44      	subs	r4, r0, #1
    bdc6:	e003      	b.n	bdd0 <_strtod_l+0xa70>
    bdc8:	0046      	lsls	r6, r0, #1
    bdca:	429c      	cmp	r4, r3
    bdcc:	d00d      	beq.n	bdea <_strtod_l+0xa8a>
    bdce:	3301      	adds	r3, #1
    bdd0:	462a      	mov	r2, r5
    bdd2:	2a08      	cmp	r2, #8
    bdd4:	461d      	mov	r5, r3
    bdd6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    bdda:	d9f5      	bls.n	bdc8 <_strtod_l+0xa68>
    bddc:	2b10      	cmp	r3, #16
    bdde:	bfdc      	itt	le
    bde0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    bde4:	ea4f 0949 	movle.w	r9, r9, lsl #1
    bde8:	e7ef      	b.n	bdca <_strtod_l+0xa6a>
    bdea:	3202      	adds	r2, #2
    bdec:	2d08      	cmp	r5, #8
    bdee:	dc3c      	bgt.n	be6a <_strtod_l+0xb0a>
    bdf0:	4615      	mov	r5, r2
    bdf2:	f7ff bb79 	b.w	b4e8 <_strtod_l+0x188>
    bdf6:	4989      	ldr	r1, [pc, #548]	; (c01c <_strtod_l+0xcbc>)
    bdf8:	2201      	movs	r2, #1
    bdfa:	4638      	mov	r0, r7
    bdfc:	f000 fd74 	bl	c8e8 <strncmp>
    be00:	2800      	cmp	r0, #0
    be02:	f000 8082 	beq.w	bf0a <_strtod_l+0xbaa>
    be06:	f04f 0e00 	mov.w	lr, #0
    be0a:	46f1      	mov	r9, lr
    be0c:	4676      	mov	r6, lr
    be0e:	4675      	mov	r5, lr
    be10:	f7ff bbb5 	b.w	b57e <_strtod_l+0x21e>
    be14:	f644 631f 	movw	r3, #19999	; 0x4e1f
    be18:	459b      	cmp	fp, r3
    be1a:	bfa8      	it	ge
    be1c:	469b      	movge	fp, r3
    be1e:	e42f      	b.n	b680 <_strtod_l+0x320>
    be20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    be24:	4618      	mov	r0, r3
    be26:	2b00      	cmp	r3, #0
    be28:	f47f ae23 	bne.w	ba72 <_strtod_l+0x712>
    be2c:	2322      	movs	r3, #34	; 0x22
    be2e:	ed9f 8b74 	vldr	d8, [pc, #464]	; c000 <_strtod_l+0xca0>
    be32:	9812      	ldr	r0, [sp, #72]	; 0x48
    be34:	f8c8 3000 	str.w	r3, [r8]
    be38:	e678      	b.n	bb2c <_strtod_l+0x7cc>
    be3a:	eeb0 7b49 	vmov.f64	d7, d9
    be3e:	e6c0      	b.n	bbc2 <_strtod_l+0x862>
    be40:	4977      	ldr	r1, [pc, #476]	; (c020 <_strtod_l+0xcc0>)
    be42:	a811      	add	r0, sp, #68	; 0x44
    be44:	f001 fd70 	bl	d928 <__match>
    be48:	2800      	cmp	r0, #0
    be4a:	f43f ab71 	beq.w	b530 <_strtod_l+0x1d0>
    be4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be50:	4974      	ldr	r1, [pc, #464]	; (c024 <_strtod_l+0xcc4>)
    be52:	3b01      	subs	r3, #1
    be54:	a811      	add	r0, sp, #68	; 0x44
    be56:	9311      	str	r3, [sp, #68]	; 0x44
    be58:	f001 fd66 	bl	d928 <__match>
    be5c:	b910      	cbnz	r0, be64 <_strtod_l+0xb04>
    be5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be60:	3301      	adds	r3, #1
    be62:	9311      	str	r3, [sp, #68]	; 0x44
    be64:	ed9f 8b68 	vldr	d8, [pc, #416]	; c008 <_strtod_l+0xca8>
    be68:	e437      	b.n	b6da <_strtod_l+0x37a>
    be6a:	2a10      	cmp	r2, #16
    be6c:	bfdc      	itt	le
    be6e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    be72:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    be76:	4615      	mov	r5, r2
    be78:	2000      	movs	r0, #0
    be7a:	f7ff bb3a 	b.w	b4f2 <_strtod_l+0x192>
    be7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    be80:	b13a      	cbz	r2, be92 <_strtod_l+0xb32>
    be82:	2135      	movs	r1, #53	; 0x35
    be84:	a814      	add	r0, sp, #80	; 0x50
    be86:	f002 fb33 	bl	e4f0 <__copybits>
    be8a:	9912      	ldr	r1, [sp, #72]	; 0x48
    be8c:	4640      	mov	r0, r8
    be8e:	f001 fe7b 	bl	db88 <_Bfree>
    be92:	3d01      	subs	r5, #1
    be94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be96:	2d04      	cmp	r5, #4
    be98:	f200 818f 	bhi.w	c1ba <_strtod_l+0xe5a>
    be9c:	e8df f005 	tbb	[pc, r5]
    bea0:	1f2a2d03 	.word	0x1f2a2d03
    bea4:	03          	.byte	0x03
    bea5:	00          	.byte	0x00
    bea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    bea8:	9204      	str	r2, [sp, #16]
    beaa:	f203 4233 	addw	r2, r3, #1075	; 0x433
    beae:	9b15      	ldr	r3, [sp, #84]	; 0x54
    beb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    beb4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    beb8:	9305      	str	r3, [sp, #20]
    beba:	05e5      	lsls	r5, r4, #23
    bebc:	d502      	bpl.n	bec4 <_strtod_l+0xb64>
    bebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bec2:	9305      	str	r3, [sp, #20]
    bec4:	4a58      	ldr	r2, [pc, #352]	; (c028 <_strtod_l+0xcc8>)
    bec6:	401a      	ands	r2, r3
    bec8:	ed9d 8b04 	vldr	d8, [sp, #16]
    becc:	2a00      	cmp	r2, #0
    bece:	f47f ac04 	bne.w	b6da <_strtod_l+0x37a>
    bed2:	f000 fded 	bl	cab0 <__errno>
    bed6:	2322      	movs	r3, #34	; 0x22
    bed8:	6003      	str	r3, [r0, #0]
    beda:	f7ff bbfe 	b.w	b6da <_strtod_l+0x37a>
    bede:	f04f 33ff 	mov.w	r3, #4294967295
    bee2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    bee6:	e9cd 3604 	strd	r3, r6, [sp, #16]
    beea:	05e3      	lsls	r3, r4, #23
    beec:	f57f af5c 	bpl.w	bda8 <_strtod_l+0xa48>
    bef0:	9b05      	ldr	r3, [sp, #20]
    bef2:	e7e4      	b.n	bebe <_strtod_l+0xb5e>
    bef4:	4b4c      	ldr	r3, [pc, #304]	; (c028 <_strtod_l+0xcc8>)
    bef6:	9305      	str	r3, [sp, #20]
    bef8:	e7f7      	b.n	beea <_strtod_l+0xb8a>
    befa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    befc:	9304      	str	r3, [sp, #16]
    befe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bf00:	9305      	str	r3, [sp, #20]
    bf02:	e7da      	b.n	beba <_strtod_l+0xb5a>
    bf04:	2000      	movs	r0, #0
    bf06:	f7ff bae1 	b.w	b4cc <_strtod_l+0x16c>
    bf0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bf0c:	461a      	mov	r2, r3
    bf0e:	3301      	adds	r3, #1
    bf10:	9311      	str	r3, [sp, #68]	; 0x44
    bf12:	7854      	ldrb	r4, [r2, #1]
    bf14:	4606      	mov	r6, r0
    bf16:	4681      	mov	r9, r0
    bf18:	f7ff bacd 	b.w	b4b6 <_strtod_l+0x156>
    bf1c:	4b43      	ldr	r3, [pc, #268]	; (c02c <_strtod_l+0xccc>)
    bf1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bf22:	ed93 8b00 	vldr	d8, [r3]
    bf26:	ed9d 7b04 	vldr	d7, [sp, #16]
    bf2a:	ee28 8b07 	vmul.f64	d8, d8, d7
    bf2e:	f7ff bbd4 	b.w	b6da <_strtod_l+0x37a>
    bf32:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    bf36:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    bf3a:	e511      	b.n	b960 <_strtod_l+0x600>
    bf3c:	46ae      	mov	lr, r5
    bf3e:	900b      	str	r0, [sp, #44]	; 0x2c
    bf40:	f7ff badc 	b.w	b4fc <_strtod_l+0x19c>
    bf44:	4b39      	ldr	r3, [pc, #228]	; (c02c <_strtod_l+0xccc>)
    bf46:	f1c5 050f 	rsb	r5, r5, #15
    bf4a:	1b4a      	subs	r2, r1, r5
    bf4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    bf50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bf54:	ed95 8b00 	vldr	d8, [r5]
    bf58:	ed93 7b00 	vldr	d7, [r3]
    bf5c:	ed9d 6b04 	vldr	d6, [sp, #16]
    bf60:	ee28 8b06 	vmul.f64	d8, d8, d6
    bf64:	ee28 8b07 	vmul.f64	d8, d8, d7
    bf68:	f7ff bbb7 	b.w	b6da <_strtod_l+0x37a>
    bf6c:	2d00      	cmp	r5, #0
    bf6e:	f000 8095 	beq.w	c09c <_strtod_l+0xd3c>
    bf72:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    bf76:	4b2e      	ldr	r3, [pc, #184]	; (c030 <_strtod_l+0xcd0>)
    bf78:	f3cc 0113 	ubfx	r1, ip, #0, #20
    bf7c:	4299      	cmp	r1, r3
    bf7e:	4662      	mov	r2, ip
    bf80:	f000 80d2 	beq.w	c128 <_strtod_l+0xdc8>
    bf84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bf86:	2b00      	cmp	r3, #0
    bf88:	f000 80a5 	beq.w	c0d6 <_strtod_l+0xd76>
    bf8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    bf90:	4213      	tst	r3, r2
    bf92:	4617      	mov	r7, r2
    bf94:	d01a      	beq.n	bfcc <_strtod_l+0xc6c>
    bf96:	eeb0 0b48 	vmov.f64	d0, d8
    bf9a:	2d00      	cmp	r5, #0
    bf9c:	f000 80a6 	beq.w	c0ec <_strtod_l+0xd8c>
    bfa0:	f002 f976 	bl	e290 <__ulp>
    bfa4:	9b08      	ldr	r3, [sp, #32]
    bfa6:	b17b      	cbz	r3, bfc8 <_strtod_l+0xc68>
    bfa8:	f3c7 530a 	ubfx	r3, r7, #20, #11
    bfac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	dd09      	ble.n	bfc8 <_strtod_l+0xc68>
    bfb4:	051b      	lsls	r3, r3, #20
    bfb6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    bfba:	2000      	movs	r0, #0
    bfbc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    bfc0:	ec41 0b17 	vmov	d7, r0, r1
    bfc4:	ee20 0b07 	vmul.f64	d0, d0, d7
    bfc8:	ee38 8b00 	vadd.f64	d8, d8, d0
    bfcc:	9b08      	ldr	r3, [sp, #32]
    bfce:	b15b      	cbz	r3, bfe8 <_strtod_l+0xc88>
    bfd0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; c010 <_strtod_l+0xcb0>
    bfd4:	4b14      	ldr	r3, [pc, #80]	; (c028 <_strtod_l+0xcc8>)
    bfd6:	ee28 8b07 	vmul.f64	d8, d8, d7
    bfda:	ee18 2a90 	vmov	r2, s17
    bfde:	4013      	ands	r3, r2
    bfe0:	b913      	cbnz	r3, bfe8 <_strtod_l+0xc88>
    bfe2:	2322      	movs	r3, #34	; 0x22
    bfe4:	f8c8 3000 	str.w	r3, [r8]
    bfe8:	9812      	ldr	r0, [sp, #72]	; 0x48
    bfea:	e59f      	b.n	bb2c <_strtod_l+0x7cc>
    bfec:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    bff0:	9305      	str	r3, [sp, #20]
    bff2:	2300      	movs	r3, #0
    bff4:	9308      	str	r3, [sp, #32]
    bff6:	f7ff bbb1 	b.w	b75c <_strtod_l+0x3fc>
    bffa:	bf00      	nop
    bffc:	f3af 8000 	nop.w
	...
    c00c:	7ff00000 	.word	0x7ff00000
    c010:	00000000 	.word	0x00000000
    c014:	39500000 	.word	0x39500000
    c018:	20007cd4 	.word	0x20007cd4
    c01c:	2000803c 	.word	0x2000803c
    c020:	20000edc 	.word	0x20000edc
    c024:	20000ee0 	.word	0x20000ee0
    c028:	7ff00000 	.word	0x7ff00000
    c02c:	200003a8 	.word	0x200003a8
    c030:	000fffff 	.word	0x000fffff
    c034:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c038:	430d      	orrs	r5, r1
    c03a:	d1c7      	bne.n	bfcc <_strtod_l+0xc6c>
    c03c:	f3c2 0313 	ubfx	r3, r2, #0, #20
    c040:	4617      	mov	r7, r2
    c042:	2b00      	cmp	r3, #0
    c044:	d1c2      	bne.n	bfcc <_strtod_l+0xc6c>
    c046:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    c04a:	0d1b      	lsrs	r3, r3, #20
    c04c:	051b      	lsls	r3, r3, #20
    c04e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    c052:	d9bb      	bls.n	bfcc <_strtod_l+0xc6c>
    c054:	f8da 3014 	ldr.w	r3, [sl, #20]
    c058:	b91b      	cbnz	r3, c062 <_strtod_l+0xd02>
    c05a:	f8da 3010 	ldr.w	r3, [sl, #16]
    c05e:	2b01      	cmp	r3, #1
    c060:	ddb4      	ble.n	bfcc <_strtod_l+0xc6c>
    c062:	4651      	mov	r1, sl
    c064:	2201      	movs	r2, #1
    c066:	4640      	mov	r0, r8
    c068:	f001 ffce 	bl	e008 <__lshift>
    c06c:	4621      	mov	r1, r4
    c06e:	4682      	mov	sl, r0
    c070:	f002 f842 	bl	e0f8 <__mcmp>
    c074:	2800      	cmp	r0, #0
    c076:	dda9      	ble.n	bfcc <_strtod_l+0xc6c>
    c078:	9b08      	ldr	r3, [sp, #32]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d17e      	bne.n	c17c <_strtod_l+0xe1c>
    c07e:	4b50      	ldr	r3, [pc, #320]	; (c1c0 <_strtod_l+0xe60>)
    c080:	403b      	ands	r3, r7
    c082:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    c086:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    c08a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    c08e:	9305      	str	r3, [sp, #20]
    c090:	f04f 33ff 	mov.w	r3, #4294967295
    c094:	9304      	str	r3, [sp, #16]
    c096:	ed9d 8b04 	vldr	d8, [sp, #16]
    c09a:	e797      	b.n	bfcc <_strtod_l+0xc6c>
    c09c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c0a0:	f3c2 0313 	ubfx	r3, r2, #0, #20
    c0a4:	430b      	orrs	r3, r1
    c0a6:	4617      	mov	r7, r2
    c0a8:	f47f af6c 	bne.w	bf84 <_strtod_l+0xc24>
    c0ac:	e7e4      	b.n	c078 <_strtod_l+0xd18>
    c0ae:	4945      	ldr	r1, [pc, #276]	; (c1c4 <_strtod_l+0xe64>)
    c0b0:	a811      	add	r0, sp, #68	; 0x44
    c0b2:	aa14      	add	r2, sp, #80	; 0x50
    c0b4:	f001 fc54 	bl	d960 <__hexnan>
    c0b8:	2805      	cmp	r0, #5
    c0ba:	f47f ab06 	bne.w	b6ca <_strtod_l+0x36a>
    c0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c0c0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    c0c4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    c0c8:	9305      	str	r3, [sp, #20]
    c0ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c0cc:	9304      	str	r3, [sp, #16]
    c0ce:	ed9d 8b04 	vldr	d8, [sp, #16]
    c0d2:	f7ff bb02 	b.w	b6da <_strtod_l+0x37a>
    c0d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0dc:	4203      	tst	r3, r0
    c0de:	f43f af75 	beq.w	bfcc <_strtod_l+0xc6c>
    c0e2:	460f      	mov	r7, r1
    c0e4:	e757      	b.n	bf96 <_strtod_l+0xc36>
    c0e6:	4c38      	ldr	r4, [pc, #224]	; (c1c8 <_strtod_l+0xe68>)
    c0e8:	2100      	movs	r1, #0
    c0ea:	e58f      	b.n	bc0c <_strtod_l+0x8ac>
    c0ec:	f002 f8d0 	bl	e290 <__ulp>
    c0f0:	9b08      	ldr	r3, [sp, #32]
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	d055      	beq.n	c1a2 <_strtod_l+0xe42>
    c0f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
    c0fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c0fe:	2b00      	cmp	r3, #0
    c100:	dd09      	ble.n	c116 <_strtod_l+0xdb6>
    c102:	051b      	lsls	r3, r3, #20
    c104:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    c108:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    c10c:	4628      	mov	r0, r5
    c10e:	ec41 0b17 	vmov	d7, r0, r1
    c112:	ee20 0b07 	vmul.f64	d0, d0, d7
    c116:	ee38 8b40 	vsub.f64	d8, d8, d0
    c11a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c122:	f47f af55 	bne.w	bfd0 <_strtod_l+0xc70>
    c126:	e681      	b.n	be2c <_strtod_l+0xacc>
    c128:	9b08      	ldr	r3, [sp, #32]
    c12a:	9904      	ldr	r1, [sp, #16]
    c12c:	b31b      	cbz	r3, c176 <_strtod_l+0xe16>
    c12e:	4b24      	ldr	r3, [pc, #144]	; (c1c0 <_strtod_l+0xe60>)
    c130:	4013      	ands	r3, r2
    c132:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    c136:	d81e      	bhi.n	c176 <_strtod_l+0xe16>
    c138:	0d1b      	lsrs	r3, r3, #20
    c13a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c13e:	f04f 30ff 	mov.w	r0, #4294967295
    c142:	fa00 f303 	lsl.w	r3, r0, r3
    c146:	4299      	cmp	r1, r3
    c148:	f47f af1c 	bne.w	bf84 <_strtod_l+0xc24>
    c14c:	4b1f      	ldr	r3, [pc, #124]	; (c1cc <_strtod_l+0xe6c>)
    c14e:	429a      	cmp	r2, r3
    c150:	d030      	beq.n	c1b4 <_strtod_l+0xe54>
    c152:	4b1b      	ldr	r3, [pc, #108]	; (c1c0 <_strtod_l+0xe60>)
    c154:	4013      	ands	r3, r2
    c156:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    c15a:	9305      	str	r3, [sp, #20]
    c15c:	2300      	movs	r3, #0
    c15e:	9304      	str	r3, [sp, #16]
    c160:	ed9d 8b04 	vldr	d8, [sp, #16]
    c164:	e732      	b.n	bfcc <_strtod_l+0xc6c>
    c166:	f04f 32ff 	mov.w	r2, #4294967295
    c16a:	fa02 f303 	lsl.w	r3, r2, r3
    c16e:	9a04      	ldr	r2, [sp, #16]
    c170:	401a      	ands	r2, r3
    c172:	9204      	str	r2, [sp, #16]
    c174:	e5d0      	b.n	bd18 <_strtod_l+0x9b8>
    c176:	f04f 33ff 	mov.w	r3, #4294967295
    c17a:	e7e4      	b.n	c146 <_strtod_l+0xde6>
    c17c:	4b10      	ldr	r3, [pc, #64]	; (c1c0 <_strtod_l+0xe60>)
    c17e:	403b      	ands	r3, r7
    c180:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    c184:	f73f af7d 	bgt.w	c082 <_strtod_l+0xd22>
    c188:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    c18c:	f73f af20 	bgt.w	bfd0 <_strtod_l+0xc70>
    c190:	e64c      	b.n	be2c <_strtod_l+0xacc>
    c192:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    c196:	f04f 33ff 	mov.w	r3, #4294967295
    c19a:	4093      	lsls	r3, r2
    c19c:	400b      	ands	r3, r1
    c19e:	9305      	str	r3, [sp, #20]
    c1a0:	e5ba      	b.n	bd18 <_strtod_l+0x9b8>
    c1a2:	ee38 8b40 	vsub.f64	d8, d8, d0
    c1a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c1ae:	f47f af1b 	bne.w	bfe8 <_strtod_l+0xc88>
    c1b2:	e63b      	b.n	be2c <_strtod_l+0xacc>
    c1b4:	3101      	adds	r1, #1
    c1b6:	d1cc      	bne.n	c152 <_strtod_l+0xdf2>
    c1b8:	e409      	b.n	b9ce <_strtod_l+0x66e>
    c1ba:	2300      	movs	r3, #0
    c1bc:	e67d      	b.n	beba <_strtod_l+0xb5a>
    c1be:	bf00      	nop
    c1c0:	7ff00000 	.word	0x7ff00000
    c1c4:	20007ce8 	.word	0x20007ce8
    c1c8:	20000380 	.word	0x20000380
    c1cc:	7fefffff 	.word	0x7fefffff

0000c1d0 <_strtod_r>:
    c1d0:	4b01      	ldr	r3, [pc, #4]	; (c1d8 <_strtod_r+0x8>)
    c1d2:	f7ff b8c5 	b.w	b360 <_strtod_l>
    c1d6:	bf00      	nop
    c1d8:	200088f4 	.word	0x200088f4

0000c1dc <_strtol_l.constprop.0>:
    c1dc:	2b01      	cmp	r3, #1
    c1de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1e2:	d040      	beq.n	c266 <_strtol_l.constprop.0+0x8a>
    c1e4:	2b24      	cmp	r3, #36	; 0x24
    c1e6:	4698      	mov	r8, r3
    c1e8:	d83d      	bhi.n	c266 <_strtol_l.constprop.0+0x8a>
    c1ea:	4d4c      	ldr	r5, [pc, #304]	; (c31c <_strtol_l.constprop.0+0x140>)
    c1ec:	468e      	mov	lr, r1
    c1ee:	4676      	mov	r6, lr
    c1f0:	f81e bb01 	ldrb.w	fp, [lr], #1
    c1f4:	f815 400b 	ldrb.w	r4, [r5, fp]
    c1f8:	f014 0408 	ands.w	r4, r4, #8
    c1fc:	d1f7      	bne.n	c1ee <_strtol_l.constprop.0+0x12>
    c1fe:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    c202:	d072      	beq.n	c2ea <_strtol_l.constprop.0+0x10e>
    c204:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    c208:	bf08      	it	eq
    c20a:	f89e b000 	ldrbeq.w	fp, [lr]
    c20e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    c212:	bf08      	it	eq
    c214:	f106 0e02 	addeq.w	lr, r6, #2
    c218:	2b00      	cmp	r3, #0
    c21a:	d042      	beq.n	c2a2 <_strtol_l.constprop.0+0xc6>
    c21c:	2b10      	cmp	r3, #16
    c21e:	d057      	beq.n	c2d0 <_strtol_l.constprop.0+0xf4>
    c220:	fbb9 f7f8 	udiv	r7, r9, r8
    c224:	2500      	movs	r5, #0
    c226:	462e      	mov	r6, r5
    c228:	fb08 9a17 	mls	sl, r8, r7, r9
    c22c:	e005      	b.n	c23a <_strtol_l.constprop.0+0x5e>
    c22e:	d033      	beq.n	c298 <_strtol_l.constprop.0+0xbc>
    c230:	fb08 c606 	mla	r6, r8, r6, ip
    c234:	2501      	movs	r5, #1
    c236:	f81e bb01 	ldrb.w	fp, [lr], #1
    c23a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    c23e:	f1bc 0f09 	cmp.w	ip, #9
    c242:	d906      	bls.n	c252 <_strtol_l.constprop.0+0x76>
    c244:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    c248:	f1bc 0f19 	cmp.w	ip, #25
    c24c:	d812      	bhi.n	c274 <_strtol_l.constprop.0+0x98>
    c24e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    c252:	4563      	cmp	r3, ip
    c254:	dd17      	ble.n	c286 <_strtol_l.constprop.0+0xaa>
    c256:	f1b5 3fff 	cmp.w	r5, #4294967295
    c25a:	d0ec      	beq.n	c236 <_strtol_l.constprop.0+0x5a>
    c25c:	42b7      	cmp	r7, r6
    c25e:	d2e6      	bcs.n	c22e <_strtol_l.constprop.0+0x52>
    c260:	f04f 35ff 	mov.w	r5, #4294967295
    c264:	e7e7      	b.n	c236 <_strtol_l.constprop.0+0x5a>
    c266:	f000 fc23 	bl	cab0 <__errno>
    c26a:	2316      	movs	r3, #22
    c26c:	6003      	str	r3, [r0, #0]
    c26e:	2000      	movs	r0, #0
    c270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c274:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    c278:	f1bc 0f19 	cmp.w	ip, #25
    c27c:	d803      	bhi.n	c286 <_strtol_l.constprop.0+0xaa>
    c27e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    c282:	4563      	cmp	r3, ip
    c284:	dce7      	bgt.n	c256 <_strtol_l.constprop.0+0x7a>
    c286:	1c6b      	adds	r3, r5, #1
    c288:	d027      	beq.n	c2da <_strtol_l.constprop.0+0xfe>
    c28a:	b98c      	cbnz	r4, c2b0 <_strtol_l.constprop.0+0xd4>
    c28c:	b10a      	cbz	r2, c292 <_strtol_l.constprop.0+0xb6>
    c28e:	bba5      	cbnz	r5, c2fa <_strtol_l.constprop.0+0x11e>
    c290:	6011      	str	r1, [r2, #0]
    c292:	4630      	mov	r0, r6
    c294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c298:	45e2      	cmp	sl, ip
    c29a:	dac9      	bge.n	c230 <_strtol_l.constprop.0+0x54>
    c29c:	f04f 35ff 	mov.w	r5, #4294967295
    c2a0:	e7c9      	b.n	c236 <_strtol_l.constprop.0+0x5a>
    c2a2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c2a6:	d005      	beq.n	c2b4 <_strtol_l.constprop.0+0xd8>
    c2a8:	f04f 080a 	mov.w	r8, #10
    c2ac:	4643      	mov	r3, r8
    c2ae:	e7b7      	b.n	c220 <_strtol_l.constprop.0+0x44>
    c2b0:	4276      	negs	r6, r6
    c2b2:	e7eb      	b.n	c28c <_strtol_l.constprop.0+0xb0>
    c2b4:	f89e 3000 	ldrb.w	r3, [lr]
    c2b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c2bc:	2b58      	cmp	r3, #88	; 0x58
    c2be:	d121      	bne.n	c304 <_strtol_l.constprop.0+0x128>
    c2c0:	f04f 0810 	mov.w	r8, #16
    c2c4:	f89e b001 	ldrb.w	fp, [lr, #1]
    c2c8:	4643      	mov	r3, r8
    c2ca:	f10e 0e02 	add.w	lr, lr, #2
    c2ce:	e7a7      	b.n	c220 <_strtol_l.constprop.0+0x44>
    c2d0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c2d4:	d01a      	beq.n	c30c <_strtol_l.constprop.0+0x130>
    c2d6:	4698      	mov	r8, r3
    c2d8:	e7a2      	b.n	c220 <_strtol_l.constprop.0+0x44>
    c2da:	2322      	movs	r3, #34	; 0x22
    c2dc:	6003      	str	r3, [r0, #0]
    c2de:	b172      	cbz	r2, c2fe <_strtol_l.constprop.0+0x122>
    c2e0:	f10e 31ff 	add.w	r1, lr, #4294967295
    c2e4:	464e      	mov	r6, r9
    c2e6:	6011      	str	r1, [r2, #0]
    c2e8:	e7d3      	b.n	c292 <_strtol_l.constprop.0+0xb6>
    c2ea:	f89e b000 	ldrb.w	fp, [lr]
    c2ee:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    c2f2:	f106 0e02 	add.w	lr, r6, #2
    c2f6:	2401      	movs	r4, #1
    c2f8:	e78e      	b.n	c218 <_strtol_l.constprop.0+0x3c>
    c2fa:	46b1      	mov	r9, r6
    c2fc:	e7f0      	b.n	c2e0 <_strtol_l.constprop.0+0x104>
    c2fe:	464e      	mov	r6, r9
    c300:	4630      	mov	r0, r6
    c302:	e7c7      	b.n	c294 <_strtol_l.constprop.0+0xb8>
    c304:	f04f 0808 	mov.w	r8, #8
    c308:	4643      	mov	r3, r8
    c30a:	e789      	b.n	c220 <_strtol_l.constprop.0+0x44>
    c30c:	f89e 5000 	ldrb.w	r5, [lr]
    c310:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    c314:	2d58      	cmp	r5, #88	; 0x58
    c316:	d0d3      	beq.n	c2c0 <_strtol_l.constprop.0+0xe4>
    c318:	4698      	mov	r8, r3
    c31a:	e781      	b.n	c220 <_strtol_l.constprop.0+0x44>
    c31c:	20000d59 	.word	0x20000d59

0000c320 <_strtol_r>:
    c320:	f7ff bf5c 	b.w	c1dc <_strtol_l.constprop.0>

0000c324 <__cxa_atexit>:
    c324:	4613      	mov	r3, r2
    c326:	460a      	mov	r2, r1
    c328:	4601      	mov	r1, r0
    c32a:	2002      	movs	r0, #2
    c32c:	f000 be46 	b.w	cfbc <__register_exitproc>

0000c330 <stdio_exit_handler>:
    c330:	4a02      	ldr	r2, [pc, #8]	; (c33c <stdio_exit_handler+0xc>)
    c332:	4903      	ldr	r1, [pc, #12]	; (c340 <stdio_exit_handler+0x10>)
    c334:	4803      	ldr	r0, [pc, #12]	; (c344 <stdio_exit_handler+0x14>)
    c336:	f000 b8bb 	b.w	c4b0 <_fwalk_sglue>
    c33a:	bf00      	nop
    c33c:	20008e70 	.word	0x20008e70
    c340:	00011965 	.word	0x00011965
    c344:	20008798 	.word	0x20008798

0000c348 <cleanup_stdio>:
    c348:	4b0c      	ldr	r3, [pc, #48]	; (c37c <cleanup_stdio+0x34>)
    c34a:	6841      	ldr	r1, [r0, #4]
    c34c:	4299      	cmp	r1, r3
    c34e:	b510      	push	{r4, lr}
    c350:	4604      	mov	r4, r0
    c352:	d001      	beq.n	c358 <cleanup_stdio+0x10>
    c354:	f005 fb06 	bl	11964 <_fclose_r>
    c358:	68a1      	ldr	r1, [r4, #8]
    c35a:	4b09      	ldr	r3, [pc, #36]	; (c380 <cleanup_stdio+0x38>)
    c35c:	4299      	cmp	r1, r3
    c35e:	d002      	beq.n	c366 <cleanup_stdio+0x1e>
    c360:	4620      	mov	r0, r4
    c362:	f005 faff 	bl	11964 <_fclose_r>
    c366:	68e1      	ldr	r1, [r4, #12]
    c368:	4b06      	ldr	r3, [pc, #24]	; (c384 <cleanup_stdio+0x3c>)
    c36a:	4299      	cmp	r1, r3
    c36c:	d004      	beq.n	c378 <cleanup_stdio+0x30>
    c36e:	4620      	mov	r0, r4
    c370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c374:	f005 baf6 	b.w	11964 <_fclose_r>
    c378:	bd10      	pop	{r4, pc}
    c37a:	bf00      	nop
    c37c:	20020370 	.word	0x20020370
    c380:	200203d8 	.word	0x200203d8
    c384:	20020440 	.word	0x20020440

0000c388 <global_stdio_init.part.0>:
    c388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c38c:	4c2a      	ldr	r4, [pc, #168]	; (c438 <global_stdio_init.part.0+0xb0>)
    c38e:	4b2b      	ldr	r3, [pc, #172]	; (c43c <global_stdio_init.part.0+0xb4>)
    c390:	482b      	ldr	r0, [pc, #172]	; (c440 <global_stdio_init.part.0+0xb8>)
    c392:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c454 <global_stdio_init.part.0+0xcc>
    c396:	f8df 80c0 	ldr.w	r8, [pc, #192]	; c458 <global_stdio_init.part.0+0xd0>
    c39a:	4f2a      	ldr	r7, [pc, #168]	; (c444 <global_stdio_init.part.0+0xbc>)
    c39c:	6018      	str	r0, [r3, #0]
    c39e:	2500      	movs	r5, #0
    c3a0:	2304      	movs	r3, #4
    c3a2:	2208      	movs	r2, #8
    c3a4:	4629      	mov	r1, r5
    c3a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c3aa:	4e27      	ldr	r6, [pc, #156]	; (c448 <global_stdio_init.part.0+0xc0>)
    c3ac:	6665      	str	r5, [r4, #100]	; 0x64
    c3ae:	e9c4 5302 	strd	r5, r3, [r4, #8]
    c3b2:	e9c4 5500 	strd	r5, r5, [r4]
    c3b6:	e9c4 5504 	strd	r5, r5, [r4, #16]
    c3ba:	61a5      	str	r5, [r4, #24]
    c3bc:	f000 fa42 	bl	c844 <memset>
    c3c0:	4b22      	ldr	r3, [pc, #136]	; (c44c <global_stdio_init.part.0+0xc4>)
    c3c2:	6763      	str	r3, [r4, #116]	; 0x74
    c3c4:	2208      	movs	r2, #8
    c3c6:	4629      	mov	r1, r5
    c3c8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c3cc:	e9c4 4907 	strd	r4, r9, [r4, #28]
    c3d0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    c3d4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    c3d8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    c3dc:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    c3e0:	6725      	str	r5, [r4, #112]	; 0x70
    c3e2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    c3e6:	62e6      	str	r6, [r4, #44]	; 0x2c
    c3e8:	f000 fa2c 	bl	c844 <memset>
    c3ec:	4b18      	ldr	r3, [pc, #96]	; (c450 <global_stdio_init.part.0+0xc8>)
    c3ee:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    c3f2:	4629      	mov	r1, r5
    c3f4:	f104 0368 	add.w	r3, r4, #104	; 0x68
    c3f8:	2208      	movs	r2, #8
    c3fa:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    c3fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    c402:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    c406:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    c40a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    c40e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    c412:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    c416:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    c41a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    c41e:	f000 fa11 	bl	c844 <memset>
    c422:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    c426:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    c42a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    c42e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    c432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c436:	bf00      	nop
    c438:	20020370 	.word	0x20020370
    c43c:	200204a8 	.word	0x200204a8
    c440:	0000c331 	.word	0x0000c331
    c444:	0000c5f9 	.word	0x0000c5f9
    c448:	0000c619 	.word	0x0000c619
    c44c:	00010009 	.word	0x00010009
    c450:	00020012 	.word	0x00020012
    c454:	0000c591 	.word	0x0000c591
    c458:	0000c5b9 	.word	0x0000c5b9

0000c45c <__sinit>:
    c45c:	b510      	push	{r4, lr}
    c45e:	4604      	mov	r4, r0
    c460:	480a      	ldr	r0, [pc, #40]	; (c48c <__sinit+0x30>)
    c462:	f000 fb53 	bl	cb0c <__retarget_lock_acquire_recursive>
    c466:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c468:	b923      	cbnz	r3, c474 <__sinit+0x18>
    c46a:	4b09      	ldr	r3, [pc, #36]	; (c490 <__sinit+0x34>)
    c46c:	4a09      	ldr	r2, [pc, #36]	; (c494 <__sinit+0x38>)
    c46e:	681b      	ldr	r3, [r3, #0]
    c470:	6362      	str	r2, [r4, #52]	; 0x34
    c472:	b123      	cbz	r3, c47e <__sinit+0x22>
    c474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c478:	4804      	ldr	r0, [pc, #16]	; (c48c <__sinit+0x30>)
    c47a:	f000 bb49 	b.w	cb10 <__retarget_lock_release_recursive>
    c47e:	f7ff ff83 	bl	c388 <global_stdio_init.part.0>
    c482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c486:	4801      	ldr	r0, [pc, #4]	; (c48c <__sinit+0x30>)
    c488:	f000 bb42 	b.w	cb10 <__retarget_lock_release_recursive>
    c48c:	20020338 	.word	0x20020338
    c490:	200204a8 	.word	0x200204a8
    c494:	0000c349 	.word	0x0000c349

0000c498 <__sfp_lock_acquire>:
    c498:	4801      	ldr	r0, [pc, #4]	; (c4a0 <__sfp_lock_acquire+0x8>)
    c49a:	f000 bb37 	b.w	cb0c <__retarget_lock_acquire_recursive>
    c49e:	bf00      	nop
    c4a0:	20020338 	.word	0x20020338

0000c4a4 <__sfp_lock_release>:
    c4a4:	4801      	ldr	r0, [pc, #4]	; (c4ac <__sfp_lock_release+0x8>)
    c4a6:	f000 bb33 	b.w	cb10 <__retarget_lock_release_recursive>
    c4aa:	bf00      	nop
    c4ac:	20020338 	.word	0x20020338

0000c4b0 <_fwalk_sglue>:
    c4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c4b4:	4680      	mov	r8, r0
    c4b6:	460f      	mov	r7, r1
    c4b8:	4616      	mov	r6, r2
    c4ba:	f04f 0900 	mov.w	r9, #0
    c4be:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    c4c2:	3d01      	subs	r5, #1
    c4c4:	d411      	bmi.n	c4ea <_fwalk_sglue+0x3a>
    c4c6:	89a3      	ldrh	r3, [r4, #12]
    c4c8:	2b01      	cmp	r3, #1
    c4ca:	f105 35ff 	add.w	r5, r5, #4294967295
    c4ce:	d908      	bls.n	c4e2 <_fwalk_sglue+0x32>
    c4d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    c4d4:	3301      	adds	r3, #1
    c4d6:	4621      	mov	r1, r4
    c4d8:	d003      	beq.n	c4e2 <_fwalk_sglue+0x32>
    c4da:	4640      	mov	r0, r8
    c4dc:	47b8      	blx	r7
    c4de:	ea49 0900 	orr.w	r9, r9, r0
    c4e2:	1c6b      	adds	r3, r5, #1
    c4e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
    c4e8:	d1ed      	bne.n	c4c6 <_fwalk_sglue+0x16>
    c4ea:	6836      	ldr	r6, [r6, #0]
    c4ec:	2e00      	cmp	r6, #0
    c4ee:	d1e6      	bne.n	c4be <_fwalk_sglue+0xe>
    c4f0:	4648      	mov	r0, r9
    c4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c4f6:	bf00      	nop

0000c4f8 <sprintf>:
    c4f8:	b40e      	push	{r1, r2, r3}
    c4fa:	b510      	push	{r4, lr}
    c4fc:	b09d      	sub	sp, #116	; 0x74
    c4fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c502:	ab1f      	add	r3, sp, #124	; 0x7c
    c504:	e9cd 0106 	strd	r0, r1, [sp, #24]
    c508:	9104      	str	r1, [sp, #16]
    c50a:	4909      	ldr	r1, [pc, #36]	; (c530 <sprintf+0x38>)
    c50c:	f853 2b04 	ldr.w	r2, [r3], #4
    c510:	9002      	str	r0, [sp, #8]
    c512:	4c08      	ldr	r4, [pc, #32]	; (c534 <sprintf+0x3c>)
    c514:	6808      	ldr	r0, [r1, #0]
    c516:	9301      	str	r3, [sp, #4]
    c518:	a902      	add	r1, sp, #8
    c51a:	9405      	str	r4, [sp, #20]
    c51c:	f002 f858 	bl	e5d0 <_svfprintf_r>
    c520:	9b02      	ldr	r3, [sp, #8]
    c522:	2200      	movs	r2, #0
    c524:	701a      	strb	r2, [r3, #0]
    c526:	b01d      	add	sp, #116	; 0x74
    c528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c52c:	b003      	add	sp, #12
    c52e:	4770      	bx	lr
    c530:	20008e7c 	.word	0x20008e7c
    c534:	ffff0208 	.word	0xffff0208

0000c538 <sscanf>:
    c538:	b40e      	push	{r1, r2, r3}
    c53a:	b510      	push	{r4, lr}
    c53c:	b09f      	sub	sp, #124	; 0x7c
    c53e:	ac21      	add	r4, sp, #132	; 0x84
    c540:	f44f 7101 	mov.w	r1, #516	; 0x204
    c544:	f854 2b04 	ldr.w	r2, [r4], #4
    c548:	9201      	str	r2, [sp, #4]
    c54a:	f8ad 101c 	strh.w	r1, [sp, #28]
    c54e:	9004      	str	r0, [sp, #16]
    c550:	9008      	str	r0, [sp, #32]
    c552:	f000 fcb5 	bl	cec0 <strlen>
    c556:	9005      	str	r0, [sp, #20]
    c558:	9009      	str	r0, [sp, #36]	; 0x24
    c55a:	480b      	ldr	r0, [pc, #44]	; (c588 <sscanf+0x50>)
    c55c:	490b      	ldr	r1, [pc, #44]	; (c58c <sscanf+0x54>)
    c55e:	910c      	str	r1, [sp, #48]	; 0x30
    c560:	2300      	movs	r3, #0
    c562:	f64f 7cff 	movw	ip, #65535	; 0xffff
    c566:	9310      	str	r3, [sp, #64]	; 0x40
    c568:	9315      	str	r3, [sp, #84]	; 0x54
    c56a:	9a01      	ldr	r2, [sp, #4]
    c56c:	6800      	ldr	r0, [r0, #0]
    c56e:	f8ad c01e 	strh.w	ip, [sp, #30]
    c572:	4623      	mov	r3, r4
    c574:	a904      	add	r1, sp, #16
    c576:	9403      	str	r4, [sp, #12]
    c578:	f003 fdcc 	bl	10114 <__ssvfscanf_r>
    c57c:	b01f      	add	sp, #124	; 0x7c
    c57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c582:	b003      	add	sp, #12
    c584:	4770      	bx	lr
    c586:	bf00      	nop
    c588:	20008e7c 	.word	0x20008e7c
    c58c:	0000c5b5 	.word	0x0000c5b5

0000c590 <__sread>:
    c590:	b510      	push	{r4, lr}
    c592:	460c      	mov	r4, r1
    c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c598:	f000 fa4c 	bl	ca34 <_read_r>
    c59c:	2800      	cmp	r0, #0
    c59e:	db03      	blt.n	c5a8 <__sread+0x18>
    c5a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    c5a2:	4403      	add	r3, r0
    c5a4:	6523      	str	r3, [r4, #80]	; 0x50
    c5a6:	bd10      	pop	{r4, pc}
    c5a8:	89a3      	ldrh	r3, [r4, #12]
    c5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c5ae:	81a3      	strh	r3, [r4, #12]
    c5b0:	bd10      	pop	{r4, pc}
    c5b2:	bf00      	nop

0000c5b4 <__seofread>:
    c5b4:	2000      	movs	r0, #0
    c5b6:	4770      	bx	lr

0000c5b8 <__swrite>:
    c5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5bc:	460c      	mov	r4, r1
    c5be:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    c5c2:	461f      	mov	r7, r3
    c5c4:	05cb      	lsls	r3, r1, #23
    c5c6:	4605      	mov	r5, r0
    c5c8:	4616      	mov	r6, r2
    c5ca:	d40b      	bmi.n	c5e4 <__swrite+0x2c>
    c5cc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    c5d0:	81a1      	strh	r1, [r4, #12]
    c5d2:	463b      	mov	r3, r7
    c5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c5d8:	4632      	mov	r2, r6
    c5da:	4628      	mov	r0, r5
    c5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5e0:	f000 ba50 	b.w	ca84 <_write_r>
    c5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c5e8:	2302      	movs	r3, #2
    c5ea:	2200      	movs	r2, #0
    c5ec:	f000 fa0c 	bl	ca08 <_lseek_r>
    c5f0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    c5f4:	e7ea      	b.n	c5cc <__swrite+0x14>
    c5f6:	bf00      	nop

0000c5f8 <__sseek>:
    c5f8:	b510      	push	{r4, lr}
    c5fa:	460c      	mov	r4, r1
    c5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c600:	f000 fa02 	bl	ca08 <_lseek_r>
    c604:	89a3      	ldrh	r3, [r4, #12]
    c606:	1c42      	adds	r2, r0, #1
    c608:	bf0e      	itee	eq
    c60a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c60e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c612:	6520      	strne	r0, [r4, #80]	; 0x50
    c614:	81a3      	strh	r3, [r4, #12]
    c616:	bd10      	pop	{r4, pc}

0000c618 <__sclose>:
    c618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c61c:	f000 b9e2 	b.w	c9e4 <_close_r>

0000c620 <_vdprintf_r>:
    c620:	b5f0      	push	{r4, r5, r6, r7, lr}
    c622:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    c626:	af04      	add	r7, sp, #16
    c628:	9300      	str	r3, [sp, #0]
    c62a:	4613      	mov	r3, r2
    c62c:	f44f 7200 	mov.w	r2, #512	; 0x200
    c630:	460e      	mov	r6, r1
    c632:	9203      	str	r2, [sp, #12]
    c634:	4639      	mov	r1, r7
    c636:	aa03      	add	r2, sp, #12
    c638:	4605      	mov	r5, r0
    c63a:	f000 f825 	bl	c688 <_vasnprintf_r>
    c63e:	b188      	cbz	r0, c664 <_vdprintf_r+0x44>
    c640:	4604      	mov	r4, r0
    c642:	4602      	mov	r2, r0
    c644:	9b03      	ldr	r3, [sp, #12]
    c646:	4631      	mov	r1, r6
    c648:	4628      	mov	r0, r5
    c64a:	f000 fa1b 	bl	ca84 <_write_r>
    c64e:	42bc      	cmp	r4, r7
    c650:	9003      	str	r0, [sp, #12]
    c652:	d004      	beq.n	c65e <_vdprintf_r+0x3e>
    c654:	4628      	mov	r0, r5
    c656:	4621      	mov	r1, r4
    c658:	f000 fd44 	bl	d0e4 <_free_r>
    c65c:	9803      	ldr	r0, [sp, #12]
    c65e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    c662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c664:	f04f 30ff 	mov.w	r0, #4294967295
    c668:	e7f9      	b.n	c65e <_vdprintf_r+0x3e>
    c66a:	bf00      	nop

0000c66c <vdprintf>:
    c66c:	b410      	push	{r4}
    c66e:	4c05      	ldr	r4, [pc, #20]	; (c684 <vdprintf+0x18>)
    c670:	4684      	mov	ip, r0
    c672:	4613      	mov	r3, r2
    c674:	6820      	ldr	r0, [r4, #0]
    c676:	f85d 4b04 	ldr.w	r4, [sp], #4
    c67a:	460a      	mov	r2, r1
    c67c:	4661      	mov	r1, ip
    c67e:	f7ff bfcf 	b.w	c620 <_vdprintf_r>
    c682:	bf00      	nop
    c684:	20008e7c 	.word	0x20008e7c

0000c688 <_vasnprintf_r>:
    c688:	b530      	push	{r4, r5, lr}
    c68a:	6814      	ldr	r4, [r2, #0]
    c68c:	4615      	mov	r5, r2
    c68e:	b09b      	sub	sp, #108	; 0x6c
    c690:	461a      	mov	r2, r3
    c692:	b109      	cbz	r1, c698 <_vasnprintf_r+0x10>
    c694:	2c00      	cmp	r4, #0
    c696:	d119      	bne.n	c6cc <_vasnprintf_r+0x44>
    c698:	2100      	movs	r1, #0
    c69a:	f44f 7322 	mov.w	r3, #648	; 0x288
    c69e:	f8ad 300c 	strh.w	r3, [sp, #12]
    c6a2:	9100      	str	r1, [sp, #0]
    c6a4:	9104      	str	r1, [sp, #16]
    c6a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c6aa:	9102      	str	r1, [sp, #8]
    c6ac:	9105      	str	r1, [sp, #20]
    c6ae:	f8ad 300e 	strh.w	r3, [sp, #14]
    c6b2:	4669      	mov	r1, sp
    c6b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    c6b6:	f001 ff8b 	bl	e5d0 <_svfprintf_r>
    c6ba:	2800      	cmp	r0, #0
    c6bc:	db13      	blt.n	c6e6 <_vasnprintf_r+0x5e>
    c6be:	9b00      	ldr	r3, [sp, #0]
    c6c0:	6028      	str	r0, [r5, #0]
    c6c2:	2200      	movs	r2, #0
    c6c4:	701a      	strb	r2, [r3, #0]
    c6c6:	9804      	ldr	r0, [sp, #16]
    c6c8:	b01b      	add	sp, #108	; 0x6c
    c6ca:	bd30      	pop	{r4, r5, pc}
    c6cc:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    c6d0:	9100      	str	r1, [sp, #0]
    c6d2:	9104      	str	r1, [sp, #16]
    c6d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    c6d8:	4621      	mov	r1, r4
    c6da:	dae4      	bge.n	c6a6 <_vasnprintf_r+0x1e>
    c6dc:	238b      	movs	r3, #139	; 0x8b
    c6de:	6003      	str	r3, [r0, #0]
    c6e0:	2000      	movs	r0, #0
    c6e2:	b01b      	add	sp, #108	; 0x6c
    c6e4:	bd30      	pop	{r4, r5, pc}
    c6e6:	2000      	movs	r0, #0
    c6e8:	e7ee      	b.n	c6c8 <_vasnprintf_r+0x40>
    c6ea:	bf00      	nop

0000c6ec <memcmp>:
    c6ec:	2a03      	cmp	r2, #3
    c6ee:	b570      	push	{r4, r5, r6, lr}
    c6f0:	d914      	bls.n	c71c <memcmp+0x30>
    c6f2:	ea40 0301 	orr.w	r3, r0, r1
    c6f6:	079b      	lsls	r3, r3, #30
    c6f8:	d122      	bne.n	c740 <memcmp+0x54>
    c6fa:	4604      	mov	r4, r0
    c6fc:	460b      	mov	r3, r1
    c6fe:	4619      	mov	r1, r3
    c700:	4620      	mov	r0, r4
    c702:	680e      	ldr	r6, [r1, #0]
    c704:	6805      	ldr	r5, [r0, #0]
    c706:	42b5      	cmp	r5, r6
    c708:	f104 0404 	add.w	r4, r4, #4
    c70c:	f103 0304 	add.w	r3, r3, #4
    c710:	d116      	bne.n	c740 <memcmp+0x54>
    c712:	3a04      	subs	r2, #4
    c714:	2a03      	cmp	r2, #3
    c716:	4620      	mov	r0, r4
    c718:	4619      	mov	r1, r3
    c71a:	d8f0      	bhi.n	c6fe <memcmp+0x12>
    c71c:	1e54      	subs	r4, r2, #1
    c71e:	b19a      	cbz	r2, c748 <memcmp+0x5c>
    c720:	1e42      	subs	r2, r0, #1
    c722:	3901      	subs	r1, #1
    c724:	e001      	b.n	c72a <memcmp+0x3e>
    c726:	18c3      	adds	r3, r0, r3
    c728:	d00c      	beq.n	c744 <memcmp+0x58>
    c72a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    c72e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c732:	45e6      	cmp	lr, ip
    c734:	eba4 0302 	sub.w	r3, r4, r2
    c738:	d0f5      	beq.n	c726 <memcmp+0x3a>
    c73a:	ebae 000c 	sub.w	r0, lr, ip
    c73e:	bd70      	pop	{r4, r5, r6, pc}
    c740:	1e54      	subs	r4, r2, #1
    c742:	e7ed      	b.n	c720 <memcmp+0x34>
    c744:	4618      	mov	r0, r3
    c746:	bd70      	pop	{r4, r5, r6, pc}
    c748:	4610      	mov	r0, r2
    c74a:	bd70      	pop	{r4, r5, r6, pc}

0000c74c <memmove>:
    c74c:	4288      	cmp	r0, r1
    c74e:	d90d      	bls.n	c76c <memmove+0x20>
    c750:	188b      	adds	r3, r1, r2
    c752:	4283      	cmp	r3, r0
    c754:	d90a      	bls.n	c76c <memmove+0x20>
    c756:	eb00 0c02 	add.w	ip, r0, r2
    c75a:	b1ba      	cbz	r2, c78c <memmove+0x40>
    c75c:	4662      	mov	r2, ip
    c75e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    c762:	f802 cd01 	strb.w	ip, [r2, #-1]!
    c766:	4299      	cmp	r1, r3
    c768:	d1f9      	bne.n	c75e <memmove+0x12>
    c76a:	4770      	bx	lr
    c76c:	2a0f      	cmp	r2, #15
    c76e:	d80e      	bhi.n	c78e <memmove+0x42>
    c770:	4603      	mov	r3, r0
    c772:	f102 3cff 	add.w	ip, r2, #4294967295
    c776:	b14a      	cbz	r2, c78c <memmove+0x40>
    c778:	f10c 0c01 	add.w	ip, ip, #1
    c77c:	3b01      	subs	r3, #1
    c77e:	448c      	add	ip, r1
    c780:	f811 2b01 	ldrb.w	r2, [r1], #1
    c784:	f803 2f01 	strb.w	r2, [r3, #1]!
    c788:	4561      	cmp	r1, ip
    c78a:	d1f9      	bne.n	c780 <memmove+0x34>
    c78c:	4770      	bx	lr
    c78e:	ea40 0301 	orr.w	r3, r0, r1
    c792:	079b      	lsls	r3, r3, #30
    c794:	d150      	bne.n	c838 <memmove+0xec>
    c796:	f1a2 0310 	sub.w	r3, r2, #16
    c79a:	b570      	push	{r4, r5, r6, lr}
    c79c:	f101 0c20 	add.w	ip, r1, #32
    c7a0:	f023 050f 	bic.w	r5, r3, #15
    c7a4:	f101 0e10 	add.w	lr, r1, #16
    c7a8:	f100 0410 	add.w	r4, r0, #16
    c7ac:	44ac      	add	ip, r5
    c7ae:	091b      	lsrs	r3, r3, #4
    c7b0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    c7b4:	f844 5c10 	str.w	r5, [r4, #-16]
    c7b8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    c7bc:	f844 5c0c 	str.w	r5, [r4, #-12]
    c7c0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    c7c4:	f844 5c08 	str.w	r5, [r4, #-8]
    c7c8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    c7cc:	f844 5c04 	str.w	r5, [r4, #-4]
    c7d0:	f10e 0e10 	add.w	lr, lr, #16
    c7d4:	45e6      	cmp	lr, ip
    c7d6:	f104 0410 	add.w	r4, r4, #16
    c7da:	d1e9      	bne.n	c7b0 <memmove+0x64>
    c7dc:	3301      	adds	r3, #1
    c7de:	f012 0f0c 	tst.w	r2, #12
    c7e2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    c7e6:	f002 040f 	and.w	r4, r2, #15
    c7ea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    c7ee:	d027      	beq.n	c840 <memmove+0xf4>
    c7f0:	3c04      	subs	r4, #4
    c7f2:	f024 0603 	bic.w	r6, r4, #3
    c7f6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    c7fa:	441e      	add	r6, r3
    c7fc:	1f1c      	subs	r4, r3, #4
    c7fe:	468e      	mov	lr, r1
    c800:	f85e 5b04 	ldr.w	r5, [lr], #4
    c804:	f844 5f04 	str.w	r5, [r4, #4]!
    c808:	42b4      	cmp	r4, r6
    c80a:	d1f9      	bne.n	c800 <memmove+0xb4>
    c80c:	f10c 0401 	add.w	r4, ip, #1
    c810:	f002 0203 	and.w	r2, r2, #3
    c814:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c81c:	f102 3cff 	add.w	ip, r2, #4294967295
    c820:	b14a      	cbz	r2, c836 <memmove+0xea>
    c822:	f10c 0c01 	add.w	ip, ip, #1
    c826:	3b01      	subs	r3, #1
    c828:	448c      	add	ip, r1
    c82a:	f811 2b01 	ldrb.w	r2, [r1], #1
    c82e:	f803 2f01 	strb.w	r2, [r3, #1]!
    c832:	4561      	cmp	r1, ip
    c834:	d1f9      	bne.n	c82a <memmove+0xde>
    c836:	bd70      	pop	{r4, r5, r6, pc}
    c838:	f102 3cff 	add.w	ip, r2, #4294967295
    c83c:	4603      	mov	r3, r0
    c83e:	e79b      	b.n	c778 <memmove+0x2c>
    c840:	4622      	mov	r2, r4
    c842:	e7eb      	b.n	c81c <memmove+0xd0>

0000c844 <memset>:
    c844:	0783      	lsls	r3, r0, #30
    c846:	b530      	push	{r4, r5, lr}
    c848:	d048      	beq.n	c8dc <memset+0x98>
    c84a:	1e54      	subs	r4, r2, #1
    c84c:	2a00      	cmp	r2, #0
    c84e:	d03f      	beq.n	c8d0 <memset+0x8c>
    c850:	b2ca      	uxtb	r2, r1
    c852:	4603      	mov	r3, r0
    c854:	e001      	b.n	c85a <memset+0x16>
    c856:	3c01      	subs	r4, #1
    c858:	d33a      	bcc.n	c8d0 <memset+0x8c>
    c85a:	f803 2b01 	strb.w	r2, [r3], #1
    c85e:	079d      	lsls	r5, r3, #30
    c860:	d1f9      	bne.n	c856 <memset+0x12>
    c862:	2c03      	cmp	r4, #3
    c864:	d92d      	bls.n	c8c2 <memset+0x7e>
    c866:	b2cd      	uxtb	r5, r1
    c868:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c86c:	2c0f      	cmp	r4, #15
    c86e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c872:	d936      	bls.n	c8e2 <memset+0x9e>
    c874:	f1a4 0210 	sub.w	r2, r4, #16
    c878:	f022 0c0f 	bic.w	ip, r2, #15
    c87c:	f103 0e20 	add.w	lr, r3, #32
    c880:	44e6      	add	lr, ip
    c882:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    c886:	f103 0210 	add.w	r2, r3, #16
    c88a:	e942 5504 	strd	r5, r5, [r2, #-16]
    c88e:	e942 5502 	strd	r5, r5, [r2, #-8]
    c892:	3210      	adds	r2, #16
    c894:	4572      	cmp	r2, lr
    c896:	d1f8      	bne.n	c88a <memset+0x46>
    c898:	f10c 0201 	add.w	r2, ip, #1
    c89c:	f014 0f0c 	tst.w	r4, #12
    c8a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    c8a4:	f004 0c0f 	and.w	ip, r4, #15
    c8a8:	d013      	beq.n	c8d2 <memset+0x8e>
    c8aa:	f1ac 0304 	sub.w	r3, ip, #4
    c8ae:	f023 0303 	bic.w	r3, r3, #3
    c8b2:	3304      	adds	r3, #4
    c8b4:	4413      	add	r3, r2
    c8b6:	f842 5b04 	str.w	r5, [r2], #4
    c8ba:	4293      	cmp	r3, r2
    c8bc:	d1fb      	bne.n	c8b6 <memset+0x72>
    c8be:	f00c 0403 	and.w	r4, ip, #3
    c8c2:	b12c      	cbz	r4, c8d0 <memset+0x8c>
    c8c4:	b2c9      	uxtb	r1, r1
    c8c6:	441c      	add	r4, r3
    c8c8:	f803 1b01 	strb.w	r1, [r3], #1
    c8cc:	429c      	cmp	r4, r3
    c8ce:	d1fb      	bne.n	c8c8 <memset+0x84>
    c8d0:	bd30      	pop	{r4, r5, pc}
    c8d2:	4664      	mov	r4, ip
    c8d4:	4613      	mov	r3, r2
    c8d6:	2c00      	cmp	r4, #0
    c8d8:	d1f4      	bne.n	c8c4 <memset+0x80>
    c8da:	e7f9      	b.n	c8d0 <memset+0x8c>
    c8dc:	4603      	mov	r3, r0
    c8de:	4614      	mov	r4, r2
    c8e0:	e7bf      	b.n	c862 <memset+0x1e>
    c8e2:	461a      	mov	r2, r3
    c8e4:	46a4      	mov	ip, r4
    c8e6:	e7e0      	b.n	c8aa <memset+0x66>

0000c8e8 <strncmp>:
    c8e8:	2a00      	cmp	r2, #0
    c8ea:	d03e      	beq.n	c96a <strncmp+0x82>
    c8ec:	ea40 0301 	orr.w	r3, r0, r1
    c8f0:	079b      	lsls	r3, r3, #30
    c8f2:	b530      	push	{r4, r5, lr}
    c8f4:	4684      	mov	ip, r0
    c8f6:	d12f      	bne.n	c958 <strncmp+0x70>
    c8f8:	2a03      	cmp	r2, #3
    c8fa:	d92d      	bls.n	c958 <strncmp+0x70>
    c8fc:	460b      	mov	r3, r1
    c8fe:	e008      	b.n	c912 <strncmp+0x2a>
    c900:	3a04      	subs	r2, #4
    c902:	4684      	mov	ip, r0
    c904:	4619      	mov	r1, r3
    c906:	d025      	beq.n	c954 <strncmp+0x6c>
    c908:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    c90c:	d122      	bne.n	c954 <strncmp+0x6c>
    c90e:	2a03      	cmp	r2, #3
    c910:	d922      	bls.n	c958 <strncmp+0x70>
    c912:	6804      	ldr	r4, [r0, #0]
    c914:	4619      	mov	r1, r3
    c916:	f853 5b04 	ldr.w	r5, [r3], #4
    c91a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    c91e:	42ac      	cmp	r4, r5
    c920:	4684      	mov	ip, r0
    c922:	ea2e 0e04 	bic.w	lr, lr, r4
    c926:	f100 0004 	add.w	r0, r0, #4
    c92a:	d0e9      	beq.n	c900 <strncmp+0x18>
    c92c:	f89c 0000 	ldrb.w	r0, [ip]
    c930:	780c      	ldrb	r4, [r1, #0]
    c932:	42a0      	cmp	r0, r4
    c934:	d11b      	bne.n	c96e <strncmp+0x86>
    c936:	46e6      	mov	lr, ip
    c938:	b168      	cbz	r0, c956 <strncmp+0x6e>
    c93a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    c93e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    c942:	eba2 030e 	sub.w	r3, r2, lr
    c946:	42a0      	cmp	r0, r4
    c948:	f103 33ff 	add.w	r3, r3, #4294967295
    c94c:	d10f      	bne.n	c96e <strncmp+0x86>
    c94e:	eb1c 0303 	adds.w	r3, ip, r3
    c952:	d1f1      	bne.n	c938 <strncmp+0x50>
    c954:	2000      	movs	r0, #0
    c956:	bd30      	pop	{r4, r5, pc}
    c958:	f89c 0000 	ldrb.w	r0, [ip]
    c95c:	780c      	ldrb	r4, [r1, #0]
    c95e:	4284      	cmp	r4, r0
    c960:	d105      	bne.n	c96e <strncmp+0x86>
    c962:	2a01      	cmp	r2, #1
    c964:	d0f6      	beq.n	c954 <strncmp+0x6c>
    c966:	46e6      	mov	lr, ip
    c968:	e7e6      	b.n	c938 <strncmp+0x50>
    c96a:	4610      	mov	r0, r2
    c96c:	4770      	bx	lr
    c96e:	1b00      	subs	r0, r0, r4
    c970:	bd30      	pop	{r4, r5, pc}
    c972:	bf00      	nop

0000c974 <strncpy>:
    c974:	ea40 0301 	orr.w	r3, r0, r1
    c978:	079b      	lsls	r3, r3, #30
    c97a:	b530      	push	{r4, r5, lr}
    c97c:	d101      	bne.n	c982 <strncpy+0xe>
    c97e:	2a03      	cmp	r2, #3
    c980:	d80f      	bhi.n	c9a2 <strncpy+0x2e>
    c982:	4684      	mov	ip, r0
    c984:	f101 3eff 	add.w	lr, r1, #4294967295
    c988:	e007      	b.n	c99a <strncpy+0x26>
    c98a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    c98e:	f803 1b01 	strb.w	r1, [r3], #1
    c992:	1e54      	subs	r4, r2, #1
    c994:	b1c1      	cbz	r1, c9c8 <strncpy+0x54>
    c996:	469c      	mov	ip, r3
    c998:	4622      	mov	r2, r4
    c99a:	4663      	mov	r3, ip
    c99c:	2a00      	cmp	r2, #0
    c99e:	d1f4      	bne.n	c98a <strncpy+0x16>
    c9a0:	bd30      	pop	{r4, r5, pc}
    c9a2:	460b      	mov	r3, r1
    c9a4:	4684      	mov	ip, r0
    c9a6:	4619      	mov	r1, r3
    c9a8:	f853 5b04 	ldr.w	r5, [r3], #4
    c9ac:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    c9b0:	ea24 0405 	bic.w	r4, r4, r5
    c9b4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    c9b8:	d1e4      	bne.n	c984 <strncpy+0x10>
    c9ba:	3a04      	subs	r2, #4
    c9bc:	2a03      	cmp	r2, #3
    c9be:	f84c 5b04 	str.w	r5, [ip], #4
    c9c2:	4619      	mov	r1, r3
    c9c4:	d8ef      	bhi.n	c9a6 <strncpy+0x32>
    c9c6:	e7dd      	b.n	c984 <strncpy+0x10>
    c9c8:	4494      	add	ip, r2
    c9ca:	2c00      	cmp	r4, #0
    c9cc:	d0e8      	beq.n	c9a0 <strncpy+0x2c>
    c9ce:	f803 1b01 	strb.w	r1, [r3], #1
    c9d2:	4563      	cmp	r3, ip
    c9d4:	d1fb      	bne.n	c9ce <strncpy+0x5a>
    c9d6:	bd30      	pop	{r4, r5, pc}

0000c9d8 <__locale_mb_cur_max>:
    c9d8:	4b01      	ldr	r3, [pc, #4]	; (c9e0 <__locale_mb_cur_max+0x8>)
    c9da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    c9de:	4770      	bx	lr
    c9e0:	200088f4 	.word	0x200088f4

0000c9e4 <_close_r>:
    c9e4:	b538      	push	{r3, r4, r5, lr}
    c9e6:	4d07      	ldr	r5, [pc, #28]	; (ca04 <_close_r+0x20>)
    c9e8:	2200      	movs	r2, #0
    c9ea:	4604      	mov	r4, r0
    c9ec:	4608      	mov	r0, r1
    c9ee:	602a      	str	r2, [r5, #0]
    c9f0:	f7fb fe72 	bl	86d8 <_close>
    c9f4:	1c43      	adds	r3, r0, #1
    c9f6:	d000      	beq.n	c9fa <_close_r+0x16>
    c9f8:	bd38      	pop	{r3, r4, r5, pc}
    c9fa:	682b      	ldr	r3, [r5, #0]
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d0fb      	beq.n	c9f8 <_close_r+0x14>
    ca00:	6023      	str	r3, [r4, #0]
    ca02:	bd38      	pop	{r3, r4, r5, pc}
    ca04:	200216e4 	.word	0x200216e4

0000ca08 <_lseek_r>:
    ca08:	b538      	push	{r3, r4, r5, lr}
    ca0a:	460c      	mov	r4, r1
    ca0c:	4d08      	ldr	r5, [pc, #32]	; (ca30 <_lseek_r+0x28>)
    ca0e:	4684      	mov	ip, r0
    ca10:	4611      	mov	r1, r2
    ca12:	4620      	mov	r0, r4
    ca14:	461a      	mov	r2, r3
    ca16:	2300      	movs	r3, #0
    ca18:	602b      	str	r3, [r5, #0]
    ca1a:	4664      	mov	r4, ip
    ca1c:	f7fb fe68 	bl	86f0 <_lseek>
    ca20:	1c43      	adds	r3, r0, #1
    ca22:	d000      	beq.n	ca26 <_lseek_r+0x1e>
    ca24:	bd38      	pop	{r3, r4, r5, pc}
    ca26:	682b      	ldr	r3, [r5, #0]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d0fb      	beq.n	ca24 <_lseek_r+0x1c>
    ca2c:	6023      	str	r3, [r4, #0]
    ca2e:	bd38      	pop	{r3, r4, r5, pc}
    ca30:	200216e4 	.word	0x200216e4

0000ca34 <_read_r>:
    ca34:	b538      	push	{r3, r4, r5, lr}
    ca36:	460c      	mov	r4, r1
    ca38:	4d08      	ldr	r5, [pc, #32]	; (ca5c <_read_r+0x28>)
    ca3a:	4684      	mov	ip, r0
    ca3c:	4611      	mov	r1, r2
    ca3e:	4620      	mov	r0, r4
    ca40:	461a      	mov	r2, r3
    ca42:	2300      	movs	r3, #0
    ca44:	602b      	str	r3, [r5, #0]
    ca46:	4664      	mov	r4, ip
    ca48:	f7fb fe44 	bl	86d4 <_read>
    ca4c:	1c43      	adds	r3, r0, #1
    ca4e:	d000      	beq.n	ca52 <_read_r+0x1e>
    ca50:	bd38      	pop	{r3, r4, r5, pc}
    ca52:	682b      	ldr	r3, [r5, #0]
    ca54:	2b00      	cmp	r3, #0
    ca56:	d0fb      	beq.n	ca50 <_read_r+0x1c>
    ca58:	6023      	str	r3, [r4, #0]
    ca5a:	bd38      	pop	{r3, r4, r5, pc}
    ca5c:	200216e4 	.word	0x200216e4

0000ca60 <_sbrk_r>:
    ca60:	b538      	push	{r3, r4, r5, lr}
    ca62:	4d07      	ldr	r5, [pc, #28]	; (ca80 <_sbrk_r+0x20>)
    ca64:	2200      	movs	r2, #0
    ca66:	4604      	mov	r4, r0
    ca68:	4608      	mov	r0, r1
    ca6a:	602a      	str	r2, [r5, #0]
    ca6c:	f7fb fe18 	bl	86a0 <_sbrk>
    ca70:	1c43      	adds	r3, r0, #1
    ca72:	d000      	beq.n	ca76 <_sbrk_r+0x16>
    ca74:	bd38      	pop	{r3, r4, r5, pc}
    ca76:	682b      	ldr	r3, [r5, #0]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d0fb      	beq.n	ca74 <_sbrk_r+0x14>
    ca7c:	6023      	str	r3, [r4, #0]
    ca7e:	bd38      	pop	{r3, r4, r5, pc}
    ca80:	200216e4 	.word	0x200216e4

0000ca84 <_write_r>:
    ca84:	b538      	push	{r3, r4, r5, lr}
    ca86:	460c      	mov	r4, r1
    ca88:	4d08      	ldr	r5, [pc, #32]	; (caac <_write_r+0x28>)
    ca8a:	4684      	mov	ip, r0
    ca8c:	4611      	mov	r1, r2
    ca8e:	4620      	mov	r0, r4
    ca90:	461a      	mov	r2, r3
    ca92:	2300      	movs	r3, #0
    ca94:	602b      	str	r3, [r5, #0]
    ca96:	4664      	mov	r4, ip
    ca98:	f7fb f8b2 	bl	7c00 <_write>
    ca9c:	1c43      	adds	r3, r0, #1
    ca9e:	d000      	beq.n	caa2 <_write_r+0x1e>
    caa0:	bd38      	pop	{r3, r4, r5, pc}
    caa2:	682b      	ldr	r3, [r5, #0]
    caa4:	2b00      	cmp	r3, #0
    caa6:	d0fb      	beq.n	caa0 <_write_r+0x1c>
    caa8:	6023      	str	r3, [r4, #0]
    caaa:	bd38      	pop	{r3, r4, r5, pc}
    caac:	200216e4 	.word	0x200216e4

0000cab0 <__errno>:
    cab0:	4b01      	ldr	r3, [pc, #4]	; (cab8 <__errno+0x8>)
    cab2:	6818      	ldr	r0, [r3, #0]
    cab4:	4770      	bx	lr
    cab6:	bf00      	nop
    cab8:	20008e7c 	.word	0x20008e7c

0000cabc <__libc_init_array>:
    cabc:	b570      	push	{r4, r5, r6, lr}
    cabe:	4e0d      	ldr	r6, [pc, #52]	; (caf4 <__libc_init_array+0x38>)
    cac0:	4d0d      	ldr	r5, [pc, #52]	; (caf8 <__libc_init_array+0x3c>)
    cac2:	1b76      	subs	r6, r6, r5
    cac4:	10b6      	asrs	r6, r6, #2
    cac6:	d006      	beq.n	cad6 <__libc_init_array+0x1a>
    cac8:	2400      	movs	r4, #0
    caca:	f855 3b04 	ldr.w	r3, [r5], #4
    cace:	3401      	adds	r4, #1
    cad0:	4798      	blx	r3
    cad2:	42a6      	cmp	r6, r4
    cad4:	d1f9      	bne.n	caca <__libc_init_array+0xe>
    cad6:	4e09      	ldr	r6, [pc, #36]	; (cafc <__libc_init_array+0x40>)
    cad8:	4d09      	ldr	r5, [pc, #36]	; (cb00 <__libc_init_array+0x44>)
    cada:	1b76      	subs	r6, r6, r5
    cadc:	f008 fbcc 	bl	15278 <___init_veneer>
    cae0:	10b6      	asrs	r6, r6, #2
    cae2:	d006      	beq.n	caf2 <__libc_init_array+0x36>
    cae4:	2400      	movs	r4, #0
    cae6:	f855 3b04 	ldr.w	r3, [r5], #4
    caea:	3401      	adds	r4, #1
    caec:	4798      	blx	r3
    caee:	42a6      	cmp	r6, r4
    caf0:	d1f9      	bne.n	cae6 <__libc_init_array+0x2a>
    caf2:	bd70      	pop	{r4, r5, r6, pc}
    caf4:	60002738 	.word	0x60002738
    caf8:	60002738 	.word	0x60002738
    cafc:	60002754 	.word	0x60002754
    cb00:	60002738 	.word	0x60002738

0000cb04 <__retarget_lock_init_recursive>:
    cb04:	4770      	bx	lr
    cb06:	bf00      	nop

0000cb08 <__retarget_lock_close_recursive>:
    cb08:	4770      	bx	lr
    cb0a:	bf00      	nop

0000cb0c <__retarget_lock_acquire_recursive>:
    cb0c:	4770      	bx	lr
    cb0e:	bf00      	nop

0000cb10 <__retarget_lock_release_recursive>:
    cb10:	4770      	bx	lr
    cb12:	bf00      	nop
	...
    cb20:	eba2 0003 	sub.w	r0, r2, r3
    cb24:	4770      	bx	lr
    cb26:	bf00      	nop

0000cb28 <strcmp>:
    cb28:	7802      	ldrb	r2, [r0, #0]
    cb2a:	780b      	ldrb	r3, [r1, #0]
    cb2c:	2a01      	cmp	r2, #1
    cb2e:	bf28      	it	cs
    cb30:	429a      	cmpcs	r2, r3
    cb32:	d1f5      	bne.n	cb20 <__retarget_lock_release_recursive+0x10>
    cb34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    cb38:	ea40 0401 	orr.w	r4, r0, r1
    cb3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    cb40:	f06f 0c00 	mvn.w	ip, #0
    cb44:	ea4f 7244 	mov.w	r2, r4, lsl #29
    cb48:	b312      	cbz	r2, cb90 <strcmp+0x68>
    cb4a:	ea80 0401 	eor.w	r4, r0, r1
    cb4e:	f014 0f07 	tst.w	r4, #7
    cb52:	d16a      	bne.n	cc2a <strcmp+0x102>
    cb54:	f000 0407 	and.w	r4, r0, #7
    cb58:	f020 0007 	bic.w	r0, r0, #7
    cb5c:	f004 0503 	and.w	r5, r4, #3
    cb60:	f021 0107 	bic.w	r1, r1, #7
    cb64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cb68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cb6c:	f014 0f04 	tst.w	r4, #4
    cb70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cb74:	fa0c f405 	lsl.w	r4, ip, r5
    cb78:	ea62 0204 	orn	r2, r2, r4
    cb7c:	ea66 0604 	orn	r6, r6, r4
    cb80:	d00a      	beq.n	cb98 <strcmp+0x70>
    cb82:	ea63 0304 	orn	r3, r3, r4
    cb86:	4662      	mov	r2, ip
    cb88:	ea67 0704 	orn	r7, r7, r4
    cb8c:	4666      	mov	r6, ip
    cb8e:	e003      	b.n	cb98 <strcmp+0x70>
    cb90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cb94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cb98:	fa82 f54c 	uadd8	r5, r2, ip
    cb9c:	ea82 0406 	eor.w	r4, r2, r6
    cba0:	faa4 f48c 	sel	r4, r4, ip
    cba4:	bb6c      	cbnz	r4, cc02 <strcmp+0xda>
    cba6:	fa83 f54c 	uadd8	r5, r3, ip
    cbaa:	ea83 0507 	eor.w	r5, r3, r7
    cbae:	faa5 f58c 	sel	r5, r5, ip
    cbb2:	b995      	cbnz	r5, cbda <strcmp+0xb2>
    cbb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    cbb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    cbbc:	fa82 f54c 	uadd8	r5, r2, ip
    cbc0:	ea82 0406 	eor.w	r4, r2, r6
    cbc4:	faa4 f48c 	sel	r4, r4, ip
    cbc8:	fa83 f54c 	uadd8	r5, r3, ip
    cbcc:	ea83 0507 	eor.w	r5, r3, r7
    cbd0:	faa5 f58c 	sel	r5, r5, ip
    cbd4:	4325      	orrs	r5, r4
    cbd6:	d0db      	beq.n	cb90 <strcmp+0x68>
    cbd8:	b99c      	cbnz	r4, cc02 <strcmp+0xda>
    cbda:	ba2d      	rev	r5, r5
    cbdc:	fab5 f485 	clz	r4, r5
    cbe0:	f024 0407 	bic.w	r4, r4, #7
    cbe4:	fa27 f104 	lsr.w	r1, r7, r4
    cbe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cbec:	fa23 f304 	lsr.w	r3, r3, r4
    cbf0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cbf4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cbf8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cbfc:	eba0 0001 	sub.w	r0, r0, r1
    cc00:	4770      	bx	lr
    cc02:	ba24      	rev	r4, r4
    cc04:	fab4 f484 	clz	r4, r4
    cc08:	f024 0407 	bic.w	r4, r4, #7
    cc0c:	fa26 f104 	lsr.w	r1, r6, r4
    cc10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cc14:	fa22 f204 	lsr.w	r2, r2, r4
    cc18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cc1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cc20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cc24:	eba0 0001 	sub.w	r0, r0, r1
    cc28:	4770      	bx	lr
    cc2a:	f014 0f03 	tst.w	r4, #3
    cc2e:	d13c      	bne.n	ccaa <strcmp+0x182>
    cc30:	f010 0403 	ands.w	r4, r0, #3
    cc34:	d128      	bne.n	cc88 <strcmp+0x160>
    cc36:	f850 2b08 	ldr.w	r2, [r0], #8
    cc3a:	f851 3b08 	ldr.w	r3, [r1], #8
    cc3e:	fa82 f54c 	uadd8	r5, r2, ip
    cc42:	ea82 0503 	eor.w	r5, r2, r3
    cc46:	faa5 f58c 	sel	r5, r5, ip
    cc4a:	b95d      	cbnz	r5, cc64 <strcmp+0x13c>
    cc4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    cc50:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cc54:	fa82 f54c 	uadd8	r5, r2, ip
    cc58:	ea82 0503 	eor.w	r5, r2, r3
    cc5c:	faa5 f58c 	sel	r5, r5, ip
    cc60:	2d00      	cmp	r5, #0
    cc62:	d0e8      	beq.n	cc36 <strcmp+0x10e>
    cc64:	ba2d      	rev	r5, r5
    cc66:	fab5 f485 	clz	r4, r5
    cc6a:	f024 0407 	bic.w	r4, r4, #7
    cc6e:	fa23 f104 	lsr.w	r1, r3, r4
    cc72:	fa22 f204 	lsr.w	r2, r2, r4
    cc76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cc7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cc7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cc82:	eba0 0001 	sub.w	r0, r0, r1
    cc86:	4770      	bx	lr
    cc88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    cc8c:	f020 0003 	bic.w	r0, r0, #3
    cc90:	f850 2b08 	ldr.w	r2, [r0], #8
    cc94:	f021 0103 	bic.w	r1, r1, #3
    cc98:	f851 3b08 	ldr.w	r3, [r1], #8
    cc9c:	fa0c f404 	lsl.w	r4, ip, r4
    cca0:	ea62 0204 	orn	r2, r2, r4
    cca4:	ea63 0304 	orn	r3, r3, r4
    cca8:	e7c9      	b.n	cc3e <strcmp+0x116>
    ccaa:	f010 0403 	ands.w	r4, r0, #3
    ccae:	d01a      	beq.n	cce6 <strcmp+0x1be>
    ccb0:	eba1 0104 	sub.w	r1, r1, r4
    ccb4:	f020 0003 	bic.w	r0, r0, #3
    ccb8:	07e4      	lsls	r4, r4, #31
    ccba:	f850 2b04 	ldr.w	r2, [r0], #4
    ccbe:	d006      	beq.n	ccce <strcmp+0x1a6>
    ccc0:	d20f      	bcs.n	cce2 <strcmp+0x1ba>
    ccc2:	788b      	ldrb	r3, [r1, #2]
    ccc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    ccc8:	1ae4      	subs	r4, r4, r3
    ccca:	d106      	bne.n	ccda <strcmp+0x1b2>
    cccc:	b12b      	cbz	r3, ccda <strcmp+0x1b2>
    ccce:	78cb      	ldrb	r3, [r1, #3]
    ccd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    ccd4:	1ae4      	subs	r4, r4, r3
    ccd6:	d100      	bne.n	ccda <strcmp+0x1b2>
    ccd8:	b91b      	cbnz	r3, cce2 <strcmp+0x1ba>
    ccda:	4620      	mov	r0, r4
    ccdc:	f85d 4b10 	ldr.w	r4, [sp], #16
    cce0:	4770      	bx	lr
    cce2:	f101 0104 	add.w	r1, r1, #4
    cce6:	f850 2b04 	ldr.w	r2, [r0], #4
    ccea:	07cc      	lsls	r4, r1, #31
    ccec:	f021 0103 	bic.w	r1, r1, #3
    ccf0:	f851 3b04 	ldr.w	r3, [r1], #4
    ccf4:	d848      	bhi.n	cd88 <strcmp+0x260>
    ccf6:	d224      	bcs.n	cd42 <strcmp+0x21a>
    ccf8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    ccfc:	fa82 f54c 	uadd8	r5, r2, ip
    cd00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    cd04:	faa5 f58c 	sel	r5, r5, ip
    cd08:	d10a      	bne.n	cd20 <strcmp+0x1f8>
    cd0a:	b965      	cbnz	r5, cd26 <strcmp+0x1fe>
    cd0c:	f851 3b04 	ldr.w	r3, [r1], #4
    cd10:	ea84 0402 	eor.w	r4, r4, r2
    cd14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    cd18:	d10e      	bne.n	cd38 <strcmp+0x210>
    cd1a:	f850 2b04 	ldr.w	r2, [r0], #4
    cd1e:	e7eb      	b.n	ccf8 <strcmp+0x1d0>
    cd20:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cd24:	e055      	b.n	cdd2 <strcmp+0x2aa>
    cd26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    cd2a:	d14d      	bne.n	cdc8 <strcmp+0x2a0>
    cd2c:	7808      	ldrb	r0, [r1, #0]
    cd2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cd32:	f1c0 0000 	rsb	r0, r0, #0
    cd36:	4770      	bx	lr
    cd38:	ea4f 6212 	mov.w	r2, r2, lsr #24
    cd3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd40:	e047      	b.n	cdd2 <strcmp+0x2aa>
    cd42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    cd46:	fa82 f54c 	uadd8	r5, r2, ip
    cd4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    cd4e:	faa5 f58c 	sel	r5, r5, ip
    cd52:	d10a      	bne.n	cd6a <strcmp+0x242>
    cd54:	b965      	cbnz	r5, cd70 <strcmp+0x248>
    cd56:	f851 3b04 	ldr.w	r3, [r1], #4
    cd5a:	ea84 0402 	eor.w	r4, r4, r2
    cd5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    cd62:	d10c      	bne.n	cd7e <strcmp+0x256>
    cd64:	f850 2b04 	ldr.w	r2, [r0], #4
    cd68:	e7eb      	b.n	cd42 <strcmp+0x21a>
    cd6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cd6e:	e030      	b.n	cdd2 <strcmp+0x2aa>
    cd70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    cd74:	d128      	bne.n	cdc8 <strcmp+0x2a0>
    cd76:	880b      	ldrh	r3, [r1, #0]
    cd78:	ea4f 4212 	mov.w	r2, r2, lsr #16
    cd7c:	e029      	b.n	cdd2 <strcmp+0x2aa>
    cd7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    cd82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    cd86:	e024      	b.n	cdd2 <strcmp+0x2aa>
    cd88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    cd8c:	fa82 f54c 	uadd8	r5, r2, ip
    cd90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    cd94:	faa5 f58c 	sel	r5, r5, ip
    cd98:	d10a      	bne.n	cdb0 <strcmp+0x288>
    cd9a:	b965      	cbnz	r5, cdb6 <strcmp+0x28e>
    cd9c:	f851 3b04 	ldr.w	r3, [r1], #4
    cda0:	ea84 0402 	eor.w	r4, r4, r2
    cda4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    cda8:	d109      	bne.n	cdbe <strcmp+0x296>
    cdaa:	f850 2b04 	ldr.w	r2, [r0], #4
    cdae:	e7eb      	b.n	cd88 <strcmp+0x260>
    cdb0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cdb4:	e00d      	b.n	cdd2 <strcmp+0x2aa>
    cdb6:	f015 0fff 	tst.w	r5, #255	; 0xff
    cdba:	d105      	bne.n	cdc8 <strcmp+0x2a0>
    cdbc:	680b      	ldr	r3, [r1, #0]
    cdbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    cdc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdc6:	e004      	b.n	cdd2 <strcmp+0x2aa>
    cdc8:	f04f 0000 	mov.w	r0, #0
    cdcc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cdd0:	4770      	bx	lr
    cdd2:	ba12      	rev	r2, r2
    cdd4:	ba1b      	rev	r3, r3
    cdd6:	fa82 f44c 	uadd8	r4, r2, ip
    cdda:	ea82 0403 	eor.w	r4, r2, r3
    cdde:	faa4 f58c 	sel	r5, r4, ip
    cde2:	fab5 f485 	clz	r4, r5
    cde6:	fa02 f204 	lsl.w	r2, r2, r4
    cdea:	fa03 f304 	lsl.w	r3, r3, r4
    cdee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    cdf2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cdf6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    cdfa:	4770      	bx	lr
    cdfc:	0000      	movs	r0, r0
	...

0000ce00 <memchr>:
    ce00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ce04:	2a10      	cmp	r2, #16
    ce06:	db2b      	blt.n	ce60 <memchr+0x60>
    ce08:	f010 0f07 	tst.w	r0, #7
    ce0c:	d008      	beq.n	ce20 <memchr+0x20>
    ce0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ce12:	3a01      	subs	r2, #1
    ce14:	428b      	cmp	r3, r1
    ce16:	d02d      	beq.n	ce74 <memchr+0x74>
    ce18:	f010 0f07 	tst.w	r0, #7
    ce1c:	b342      	cbz	r2, ce70 <memchr+0x70>
    ce1e:	d1f6      	bne.n	ce0e <memchr+0xe>
    ce20:	b4f0      	push	{r4, r5, r6, r7}
    ce22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ce26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ce2a:	f022 0407 	bic.w	r4, r2, #7
    ce2e:	f07f 0700 	mvns.w	r7, #0
    ce32:	2300      	movs	r3, #0
    ce34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ce38:	3c08      	subs	r4, #8
    ce3a:	ea85 0501 	eor.w	r5, r5, r1
    ce3e:	ea86 0601 	eor.w	r6, r6, r1
    ce42:	fa85 f547 	uadd8	r5, r5, r7
    ce46:	faa3 f587 	sel	r5, r3, r7
    ce4a:	fa86 f647 	uadd8	r6, r6, r7
    ce4e:	faa5 f687 	sel	r6, r5, r7
    ce52:	b98e      	cbnz	r6, ce78 <memchr+0x78>
    ce54:	d1ee      	bne.n	ce34 <memchr+0x34>
    ce56:	bcf0      	pop	{r4, r5, r6, r7}
    ce58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ce5c:	f002 0207 	and.w	r2, r2, #7
    ce60:	b132      	cbz	r2, ce70 <memchr+0x70>
    ce62:	f810 3b01 	ldrb.w	r3, [r0], #1
    ce66:	3a01      	subs	r2, #1
    ce68:	ea83 0301 	eor.w	r3, r3, r1
    ce6c:	b113      	cbz	r3, ce74 <memchr+0x74>
    ce6e:	d1f8      	bne.n	ce62 <memchr+0x62>
    ce70:	2000      	movs	r0, #0
    ce72:	4770      	bx	lr
    ce74:	3801      	subs	r0, #1
    ce76:	4770      	bx	lr
    ce78:	2d00      	cmp	r5, #0
    ce7a:	bf06      	itte	eq
    ce7c:	4635      	moveq	r5, r6
    ce7e:	3803      	subeq	r0, #3
    ce80:	3807      	subne	r0, #7
    ce82:	f015 0f01 	tst.w	r5, #1
    ce86:	d107      	bne.n	ce98 <memchr+0x98>
    ce88:	3001      	adds	r0, #1
    ce8a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ce8e:	bf02      	ittt	eq
    ce90:	3001      	addeq	r0, #1
    ce92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ce96:	3001      	addeq	r0, #1
    ce98:	bcf0      	pop	{r4, r5, r6, r7}
    ce9a:	3801      	subs	r0, #1
    ce9c:	4770      	bx	lr
    ce9e:	bf00      	nop
	...

0000cec0 <strlen>:
    cec0:	f890 f000 	pld	[r0]
    cec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    cec8:	f020 0107 	bic.w	r1, r0, #7
    cecc:	f06f 0c00 	mvn.w	ip, #0
    ced0:	f010 0407 	ands.w	r4, r0, #7
    ced4:	f891 f020 	pld	[r1, #32]
    ced8:	f040 8049 	bne.w	cf6e <strlen+0xae>
    cedc:	f04f 0400 	mov.w	r4, #0
    cee0:	f06f 0007 	mvn.w	r0, #7
    cee4:	e9d1 2300 	ldrd	r2, r3, [r1]
    cee8:	f891 f040 	pld	[r1, #64]	; 0x40
    ceec:	f100 0008 	add.w	r0, r0, #8
    cef0:	fa82 f24c 	uadd8	r2, r2, ip
    cef4:	faa4 f28c 	sel	r2, r4, ip
    cef8:	fa83 f34c 	uadd8	r3, r3, ip
    cefc:	faa2 f38c 	sel	r3, r2, ip
    cf00:	bb4b      	cbnz	r3, cf56 <strlen+0x96>
    cf02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    cf06:	fa82 f24c 	uadd8	r2, r2, ip
    cf0a:	f100 0008 	add.w	r0, r0, #8
    cf0e:	faa4 f28c 	sel	r2, r4, ip
    cf12:	fa83 f34c 	uadd8	r3, r3, ip
    cf16:	faa2 f38c 	sel	r3, r2, ip
    cf1a:	b9e3      	cbnz	r3, cf56 <strlen+0x96>
    cf1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    cf20:	fa82 f24c 	uadd8	r2, r2, ip
    cf24:	f100 0008 	add.w	r0, r0, #8
    cf28:	faa4 f28c 	sel	r2, r4, ip
    cf2c:	fa83 f34c 	uadd8	r3, r3, ip
    cf30:	faa2 f38c 	sel	r3, r2, ip
    cf34:	b97b      	cbnz	r3, cf56 <strlen+0x96>
    cf36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    cf3a:	f101 0120 	add.w	r1, r1, #32
    cf3e:	fa82 f24c 	uadd8	r2, r2, ip
    cf42:	f100 0008 	add.w	r0, r0, #8
    cf46:	faa4 f28c 	sel	r2, r4, ip
    cf4a:	fa83 f34c 	uadd8	r3, r3, ip
    cf4e:	faa2 f38c 	sel	r3, r2, ip
    cf52:	2b00      	cmp	r3, #0
    cf54:	d0c6      	beq.n	cee4 <strlen+0x24>
    cf56:	2a00      	cmp	r2, #0
    cf58:	bf04      	itt	eq
    cf5a:	3004      	addeq	r0, #4
    cf5c:	461a      	moveq	r2, r3
    cf5e:	ba12      	rev	r2, r2
    cf60:	fab2 f282 	clz	r2, r2
    cf64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    cf68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    cf6c:	4770      	bx	lr
    cf6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    cf72:	f004 0503 	and.w	r5, r4, #3
    cf76:	f1c4 0000 	rsb	r0, r4, #0
    cf7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cf7e:	f014 0f04 	tst.w	r4, #4
    cf82:	f891 f040 	pld	[r1, #64]	; 0x40
    cf86:	fa0c f505 	lsl.w	r5, ip, r5
    cf8a:	ea62 0205 	orn	r2, r2, r5
    cf8e:	bf1c      	itt	ne
    cf90:	ea63 0305 	ornne	r3, r3, r5
    cf94:	4662      	movne	r2, ip
    cf96:	f04f 0400 	mov.w	r4, #0
    cf9a:	e7a9      	b.n	cef0 <strlen+0x30>
    cf9c:	0000      	movs	r0, r0
	...

0000cfa0 <nan>:
    cfa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; cfa8 <nan+0x8>
    cfa4:	4770      	bx	lr
    cfa6:	bf00      	nop
    cfa8:	00000000 	.word	0x00000000
    cfac:	7ff80000 	.word	0x7ff80000

0000cfb0 <nanf>:
    cfb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; cfb8 <nanf+0x8>
    cfb4:	4770      	bx	lr
    cfb6:	bf00      	nop
    cfb8:	7fc00000 	.word	0x7fc00000

0000cfbc <__register_exitproc>:
    cfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfc0:	f8df a07c 	ldr.w	sl, [pc, #124]	; d040 <__register_exitproc+0x84>
    cfc4:	4606      	mov	r6, r0
    cfc6:	f8da 0000 	ldr.w	r0, [sl]
    cfca:	4698      	mov	r8, r3
    cfcc:	460f      	mov	r7, r1
    cfce:	4691      	mov	r9, r2
    cfd0:	f7ff fd9c 	bl	cb0c <__retarget_lock_acquire_recursive>
    cfd4:	4b18      	ldr	r3, [pc, #96]	; (d038 <__register_exitproc+0x7c>)
    cfd6:	681c      	ldr	r4, [r3, #0]
    cfd8:	b324      	cbz	r4, d024 <__register_exitproc+0x68>
    cfda:	6865      	ldr	r5, [r4, #4]
    cfdc:	2d1f      	cmp	r5, #31
    cfde:	dc24      	bgt.n	d02a <__register_exitproc+0x6e>
    cfe0:	b95e      	cbnz	r6, cffa <__register_exitproc+0x3e>
    cfe2:	1c6b      	adds	r3, r5, #1
    cfe4:	3502      	adds	r5, #2
    cfe6:	f8da 0000 	ldr.w	r0, [sl]
    cfea:	6063      	str	r3, [r4, #4]
    cfec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    cff0:	f7ff fd8e 	bl	cb10 <__retarget_lock_release_recursive>
    cff4:	2000      	movs	r0, #0
    cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cffa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    cffe:	2301      	movs	r3, #1
    d000:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d004:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    d008:	40ab      	lsls	r3, r5
    d00a:	431a      	orrs	r2, r3
    d00c:	2e02      	cmp	r6, #2
    d00e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    d012:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d016:	d1e4      	bne.n	cfe2 <__register_exitproc+0x26>
    d018:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    d01c:	431a      	orrs	r2, r3
    d01e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    d022:	e7de      	b.n	cfe2 <__register_exitproc+0x26>
    d024:	4c05      	ldr	r4, [pc, #20]	; (d03c <__register_exitproc+0x80>)
    d026:	601c      	str	r4, [r3, #0]
    d028:	e7d7      	b.n	cfda <__register_exitproc+0x1e>
    d02a:	f8da 0000 	ldr.w	r0, [sl]
    d02e:	f7ff fd6f 	bl	cb10 <__retarget_lock_release_recursive>
    d032:	f04f 30ff 	mov.w	r0, #4294967295
    d036:	e7de      	b.n	cff6 <__register_exitproc+0x3a>
    d038:	2002019c 	.word	0x2002019c
    d03c:	200201a0 	.word	0x200201a0
    d040:	200088e8 	.word	0x200088e8

0000d044 <_malloc_trim_r>:
    d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d046:	4f24      	ldr	r7, [pc, #144]	; (d0d8 <_malloc_trim_r+0x94>)
    d048:	460c      	mov	r4, r1
    d04a:	4606      	mov	r6, r0
    d04c:	f7fd ff82 	bl	af54 <__malloc_lock>
    d050:	68bb      	ldr	r3, [r7, #8]
    d052:	685d      	ldr	r5, [r3, #4]
    d054:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d058:	310f      	adds	r1, #15
    d05a:	f025 0503 	bic.w	r5, r5, #3
    d05e:	194b      	adds	r3, r1, r5
    d060:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d064:	f023 030f 	bic.w	r3, r3, #15
    d068:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d06c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d070:	db07      	blt.n	d082 <_malloc_trim_r+0x3e>
    d072:	2100      	movs	r1, #0
    d074:	4630      	mov	r0, r6
    d076:	f7ff fcf3 	bl	ca60 <_sbrk_r>
    d07a:	68bb      	ldr	r3, [r7, #8]
    d07c:	442b      	add	r3, r5
    d07e:	4298      	cmp	r0, r3
    d080:	d004      	beq.n	d08c <_malloc_trim_r+0x48>
    d082:	4630      	mov	r0, r6
    d084:	f7fd ff6c 	bl	af60 <__malloc_unlock>
    d088:	2000      	movs	r0, #0
    d08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d08c:	4261      	negs	r1, r4
    d08e:	4630      	mov	r0, r6
    d090:	f7ff fce6 	bl	ca60 <_sbrk_r>
    d094:	3001      	adds	r0, #1
    d096:	d00d      	beq.n	d0b4 <_malloc_trim_r+0x70>
    d098:	4a10      	ldr	r2, [pc, #64]	; (d0dc <_malloc_trim_r+0x98>)
    d09a:	68bb      	ldr	r3, [r7, #8]
    d09c:	1b2d      	subs	r5, r5, r4
    d09e:	f045 0501 	orr.w	r5, r5, #1
    d0a2:	605d      	str	r5, [r3, #4]
    d0a4:	6813      	ldr	r3, [r2, #0]
    d0a6:	4630      	mov	r0, r6
    d0a8:	1b1b      	subs	r3, r3, r4
    d0aa:	6013      	str	r3, [r2, #0]
    d0ac:	f7fd ff58 	bl	af60 <__malloc_unlock>
    d0b0:	2001      	movs	r0, #1
    d0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0b4:	2100      	movs	r1, #0
    d0b6:	4630      	mov	r0, r6
    d0b8:	f7ff fcd2 	bl	ca60 <_sbrk_r>
    d0bc:	68ba      	ldr	r2, [r7, #8]
    d0be:	1a83      	subs	r3, r0, r2
    d0c0:	2b0f      	cmp	r3, #15
    d0c2:	ddde      	ble.n	d082 <_malloc_trim_r+0x3e>
    d0c4:	f043 0301 	orr.w	r3, r3, #1
    d0c8:	6053      	str	r3, [r2, #4]
    d0ca:	4b05      	ldr	r3, [pc, #20]	; (d0e0 <_malloc_trim_r+0x9c>)
    d0cc:	4903      	ldr	r1, [pc, #12]	; (d0dc <_malloc_trim_r+0x98>)
    d0ce:	681b      	ldr	r3, [r3, #0]
    d0d0:	1ac0      	subs	r0, r0, r3
    d0d2:	6008      	str	r0, [r1, #0]
    d0d4:	e7d5      	b.n	d082 <_malloc_trim_r+0x3e>
    d0d6:	bf00      	nop
    d0d8:	20008a60 	.word	0x20008a60
    d0dc:	2002033c 	.word	0x2002033c
    d0e0:	20008e68 	.word	0x20008e68

0000d0e4 <_free_r>:
    d0e4:	2900      	cmp	r1, #0
    d0e6:	d061      	beq.n	d1ac <_free_r+0xc8>
    d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0ea:	460c      	mov	r4, r1
    d0ec:	4606      	mov	r6, r0
    d0ee:	f7fd ff31 	bl	af54 <__malloc_lock>
    d0f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d0f6:	4f7b      	ldr	r7, [pc, #492]	; (d2e4 <_free_r+0x200>)
    d0f8:	f1a4 0508 	sub.w	r5, r4, #8
    d0fc:	f022 0101 	bic.w	r1, r2, #1
    d100:	eb05 0c01 	add.w	ip, r5, r1
    d104:	68b8      	ldr	r0, [r7, #8]
    d106:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d10a:	4560      	cmp	r0, ip
    d10c:	f023 0303 	bic.w	r3, r3, #3
    d110:	f000 808b 	beq.w	d22a <_free_r+0x146>
    d114:	07d2      	lsls	r2, r2, #31
    d116:	f8cc 3004 	str.w	r3, [ip, #4]
    d11a:	d432      	bmi.n	d182 <_free_r+0x9e>
    d11c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d120:	1aad      	subs	r5, r5, r2
    d122:	4411      	add	r1, r2
    d124:	68aa      	ldr	r2, [r5, #8]
    d126:	f107 0008 	add.w	r0, r7, #8
    d12a:	4282      	cmp	r2, r0
    d12c:	d06a      	beq.n	d204 <_free_r+0x120>
    d12e:	eb0c 0403 	add.w	r4, ip, r3
    d132:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d136:	68ec      	ldr	r4, [r5, #12]
    d138:	60d4      	str	r4, [r2, #12]
    d13a:	f01e 0f01 	tst.w	lr, #1
    d13e:	60a2      	str	r2, [r4, #8]
    d140:	f000 8097 	beq.w	d272 <_free_r+0x18e>
    d144:	f041 0301 	orr.w	r3, r1, #1
    d148:	606b      	str	r3, [r5, #4]
    d14a:	f8cc 1000 	str.w	r1, [ip]
    d14e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d152:	d235      	bcs.n	d1c0 <_free_r+0xdc>
    d154:	6878      	ldr	r0, [r7, #4]
    d156:	08cb      	lsrs	r3, r1, #3
    d158:	2201      	movs	r2, #1
    d15a:	0949      	lsrs	r1, r1, #5
    d15c:	3301      	adds	r3, #1
    d15e:	408a      	lsls	r2, r1
    d160:	4302      	orrs	r2, r0
    d162:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d166:	607a      	str	r2, [r7, #4]
    d168:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d16c:	3a08      	subs	r2, #8
    d16e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d172:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d176:	60cd      	str	r5, [r1, #12]
    d178:	4630      	mov	r0, r6
    d17a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d17e:	f7fd beef 	b.w	af60 <__malloc_unlock>
    d182:	eb0c 0203 	add.w	r2, ip, r3
    d186:	6852      	ldr	r2, [r2, #4]
    d188:	07d0      	lsls	r0, r2, #31
    d18a:	d410      	bmi.n	d1ae <_free_r+0xca>
    d18c:	4419      	add	r1, r3
    d18e:	f107 0008 	add.w	r0, r7, #8
    d192:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d196:	4283      	cmp	r3, r0
    d198:	d073      	beq.n	d282 <_free_r+0x19e>
    d19a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d19e:	60da      	str	r2, [r3, #12]
    d1a0:	6093      	str	r3, [r2, #8]
    d1a2:	f041 0301 	orr.w	r3, r1, #1
    d1a6:	606b      	str	r3, [r5, #4]
    d1a8:	5069      	str	r1, [r5, r1]
    d1aa:	e7d0      	b.n	d14e <_free_r+0x6a>
    d1ac:	4770      	bx	lr
    d1ae:	f041 0301 	orr.w	r3, r1, #1
    d1b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d1b6:	f844 3c04 	str.w	r3, [r4, #-4]
    d1ba:	f8cc 1000 	str.w	r1, [ip]
    d1be:	d3c9      	bcc.n	d154 <_free_r+0x70>
    d1c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d1c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d1c8:	d248      	bcs.n	d25c <_free_r+0x178>
    d1ca:	098b      	lsrs	r3, r1, #6
    d1cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d1d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d1d4:	00c3      	lsls	r3, r0, #3
    d1d6:	18f8      	adds	r0, r7, r3
    d1d8:	58fb      	ldr	r3, [r7, r3]
    d1da:	3808      	subs	r0, #8
    d1dc:	4298      	cmp	r0, r3
    d1de:	d059      	beq.n	d294 <_free_r+0x1b0>
    d1e0:	685a      	ldr	r2, [r3, #4]
    d1e2:	f022 0203 	bic.w	r2, r2, #3
    d1e6:	428a      	cmp	r2, r1
    d1e8:	d902      	bls.n	d1f0 <_free_r+0x10c>
    d1ea:	689b      	ldr	r3, [r3, #8]
    d1ec:	4298      	cmp	r0, r3
    d1ee:	d1f7      	bne.n	d1e0 <_free_r+0xfc>
    d1f0:	68d8      	ldr	r0, [r3, #12]
    d1f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d1f6:	6085      	str	r5, [r0, #8]
    d1f8:	60dd      	str	r5, [r3, #12]
    d1fa:	4630      	mov	r0, r6
    d1fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d200:	f7fd beae 	b.w	af60 <__malloc_unlock>
    d204:	eb0c 0203 	add.w	r2, ip, r3
    d208:	6852      	ldr	r2, [r2, #4]
    d20a:	07d2      	lsls	r2, r2, #31
    d20c:	d463      	bmi.n	d2d6 <_free_r+0x1f2>
    d20e:	440b      	add	r3, r1
    d210:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d214:	60ca      	str	r2, [r1, #12]
    d216:	6091      	str	r1, [r2, #8]
    d218:	f043 0201 	orr.w	r2, r3, #1
    d21c:	606a      	str	r2, [r5, #4]
    d21e:	4630      	mov	r0, r6
    d220:	50eb      	str	r3, [r5, r3]
    d222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d226:	f7fd be9b 	b.w	af60 <__malloc_unlock>
    d22a:	440b      	add	r3, r1
    d22c:	07d1      	lsls	r1, r2, #31
    d22e:	d407      	bmi.n	d240 <_free_r+0x15c>
    d230:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d234:	1aad      	subs	r5, r5, r2
    d236:	4413      	add	r3, r2
    d238:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d23c:	60ca      	str	r2, [r1, #12]
    d23e:	6091      	str	r1, [r2, #8]
    d240:	f043 0201 	orr.w	r2, r3, #1
    d244:	606a      	str	r2, [r5, #4]
    d246:	4a28      	ldr	r2, [pc, #160]	; (d2e8 <_free_r+0x204>)
    d248:	60bd      	str	r5, [r7, #8]
    d24a:	6812      	ldr	r2, [r2, #0]
    d24c:	429a      	cmp	r2, r3
    d24e:	d893      	bhi.n	d178 <_free_r+0x94>
    d250:	4b26      	ldr	r3, [pc, #152]	; (d2ec <_free_r+0x208>)
    d252:	4630      	mov	r0, r6
    d254:	6819      	ldr	r1, [r3, #0]
    d256:	f7ff fef5 	bl	d044 <_malloc_trim_r>
    d25a:	e78d      	b.n	d178 <_free_r+0x94>
    d25c:	2b14      	cmp	r3, #20
    d25e:	d90a      	bls.n	d276 <_free_r+0x192>
    d260:	2b54      	cmp	r3, #84	; 0x54
    d262:	d81f      	bhi.n	d2a4 <_free_r+0x1c0>
    d264:	0b0b      	lsrs	r3, r1, #12
    d266:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d26a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d26e:	00c3      	lsls	r3, r0, #3
    d270:	e7b1      	b.n	d1d6 <_free_r+0xf2>
    d272:	4419      	add	r1, r3
    d274:	e78d      	b.n	d192 <_free_r+0xae>
    d276:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d27a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d27e:	00c3      	lsls	r3, r0, #3
    d280:	e7a9      	b.n	d1d6 <_free_r+0xf2>
    d282:	f041 0301 	orr.w	r3, r1, #1
    d286:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d28a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d28e:	606b      	str	r3, [r5, #4]
    d290:	5069      	str	r1, [r5, r1]
    d292:	e771      	b.n	d178 <_free_r+0x94>
    d294:	6879      	ldr	r1, [r7, #4]
    d296:	1092      	asrs	r2, r2, #2
    d298:	2401      	movs	r4, #1
    d29a:	fa04 f202 	lsl.w	r2, r4, r2
    d29e:	430a      	orrs	r2, r1
    d2a0:	607a      	str	r2, [r7, #4]
    d2a2:	e7a6      	b.n	d1f2 <_free_r+0x10e>
    d2a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d2a8:	d806      	bhi.n	d2b8 <_free_r+0x1d4>
    d2aa:	0bcb      	lsrs	r3, r1, #15
    d2ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d2b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d2b4:	00c3      	lsls	r3, r0, #3
    d2b6:	e78e      	b.n	d1d6 <_free_r+0xf2>
    d2b8:	f240 5254 	movw	r2, #1364	; 0x554
    d2bc:	4293      	cmp	r3, r2
    d2be:	d806      	bhi.n	d2ce <_free_r+0x1ea>
    d2c0:	0c8b      	lsrs	r3, r1, #18
    d2c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d2c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d2ca:	00c3      	lsls	r3, r0, #3
    d2cc:	e783      	b.n	d1d6 <_free_r+0xf2>
    d2ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d2d2:	227e      	movs	r2, #126	; 0x7e
    d2d4:	e77f      	b.n	d1d6 <_free_r+0xf2>
    d2d6:	f041 0301 	orr.w	r3, r1, #1
    d2da:	606b      	str	r3, [r5, #4]
    d2dc:	f8cc 1000 	str.w	r1, [ip]
    d2e0:	e74a      	b.n	d178 <_free_r+0x94>
    d2e2:	bf00      	nop
    d2e4:	20008a60 	.word	0x20008a60
    d2e8:	20008e6c 	.word	0x20008e6c
    d2ec:	2002036c 	.word	0x2002036c

0000d2f0 <rshift>:
    d2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2f4:	6904      	ldr	r4, [r0, #16]
    d2f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    d2fa:	dd2f      	ble.n	d35c <rshift+0x6c>
    d2fc:	f100 0e14 	add.w	lr, r0, #20
    d300:	114e      	asrs	r6, r1, #5
    d302:	f011 0c1f 	ands.w	ip, r1, #31
    d306:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    d30a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    d30e:	d02b      	beq.n	d368 <rshift+0x78>
    d310:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    d314:	3304      	adds	r3, #4
    d316:	429d      	cmp	r5, r3
    d318:	fa21 f10c 	lsr.w	r1, r1, ip
    d31c:	f1cc 0820 	rsb	r8, ip, #32
    d320:	d918      	bls.n	d354 <rshift+0x64>
    d322:	4677      	mov	r7, lr
    d324:	681a      	ldr	r2, [r3, #0]
    d326:	fa02 f208 	lsl.w	r2, r2, r8
    d32a:	430a      	orrs	r2, r1
    d32c:	f847 2b04 	str.w	r2, [r7], #4
    d330:	f853 1b04 	ldr.w	r1, [r3], #4
    d334:	429d      	cmp	r5, r3
    d336:	fa21 f10c 	lsr.w	r1, r1, ip
    d33a:	d8f3      	bhi.n	d324 <rshift+0x34>
    d33c:	1ba3      	subs	r3, r4, r6
    d33e:	009b      	lsls	r3, r3, #2
    d340:	3b05      	subs	r3, #5
    d342:	089b      	lsrs	r3, r3, #2
    d344:	3301      	adds	r3, #1
    d346:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    d34a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    d34e:	b1c9      	cbz	r1, d384 <rshift+0x94>
    d350:	3404      	adds	r4, #4
    d352:	e017      	b.n	d384 <rshift+0x94>
    d354:	6141      	str	r1, [r0, #20]
    d356:	4674      	mov	r4, lr
    d358:	2900      	cmp	r1, #0
    d35a:	d1f9      	bne.n	d350 <rshift+0x60>
    d35c:	2300      	movs	r3, #0
    d35e:	6103      	str	r3, [r0, #16]
    d360:	2300      	movs	r3, #0
    d362:	6143      	str	r3, [r0, #20]
    d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d368:	429d      	cmp	r5, r3
    d36a:	bf88      	it	hi
    d36c:	f100 0210 	addhi.w	r2, r0, #16
    d370:	d9f4      	bls.n	d35c <rshift+0x6c>
    d372:	f853 1b04 	ldr.w	r1, [r3], #4
    d376:	f842 1f04 	str.w	r1, [r2, #4]!
    d37a:	429d      	cmp	r5, r3
    d37c:	d8f9      	bhi.n	d372 <rshift+0x82>
    d37e:	1ba4      	subs	r4, r4, r6
    d380:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    d384:	eba4 030e 	sub.w	r3, r4, lr
    d388:	109b      	asrs	r3, r3, #2
    d38a:	4574      	cmp	r4, lr
    d38c:	6103      	str	r3, [r0, #16]
    d38e:	d0e7      	beq.n	d360 <rshift+0x70>
    d390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d394 <__gethex>:
    d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d398:	ed2d 8b02 	vpush	{d8}
    d39c:	680c      	ldr	r4, [r1, #0]
    d39e:	468b      	mov	fp, r1
    d3a0:	78a1      	ldrb	r1, [r4, #2]
    d3a2:	b085      	sub	sp, #20
    d3a4:	2930      	cmp	r1, #48	; 0x30
    d3a6:	ee08 0a10 	vmov	s16, r0
    d3aa:	4692      	mov	sl, r2
    d3ac:	9302      	str	r3, [sp, #8]
    d3ae:	f040 81ce 	bne.w	d74e <__gethex+0x3ba>
    d3b2:	f06f 0001 	mvn.w	r0, #1
    d3b6:	1b00      	subs	r0, r0, r4
    d3b8:	1ce2      	adds	r2, r4, #3
    d3ba:	1883      	adds	r3, r0, r2
    d3bc:	4614      	mov	r4, r2
    d3be:	f812 1b01 	ldrb.w	r1, [r2], #1
    d3c2:	2930      	cmp	r1, #48	; 0x30
    d3c4:	d0f9      	beq.n	d3ba <__gethex+0x26>
    d3c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; d6c8 <__gethex+0x334>
    d3ca:	f818 2001 	ldrb.w	r2, [r8, r1]
    d3ce:	2a00      	cmp	r2, #0
    d3d0:	f000 80e5 	beq.w	d59e <__gethex+0x20a>
    d3d4:	7822      	ldrb	r2, [r4, #0]
    d3d6:	2700      	movs	r7, #0
    d3d8:	f818 2002 	ldrb.w	r2, [r8, r2]
    d3dc:	463d      	mov	r5, r7
    d3de:	4626      	mov	r6, r4
    d3e0:	b12a      	cbz	r2, d3ee <__gethex+0x5a>
    d3e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d3e6:	f818 2002 	ldrb.w	r2, [r8, r2]
    d3ea:	2a00      	cmp	r2, #0
    d3ec:	d1f9      	bne.n	d3e2 <__gethex+0x4e>
    d3ee:	49b5      	ldr	r1, [pc, #724]	; (d6c4 <__gethex+0x330>)
    d3f0:	9301      	str	r3, [sp, #4]
    d3f2:	2201      	movs	r2, #1
    d3f4:	4630      	mov	r0, r6
    d3f6:	f7ff fa77 	bl	c8e8 <strncmp>
    d3fa:	9b01      	ldr	r3, [sp, #4]
    d3fc:	4681      	mov	r9, r0
    d3fe:	2800      	cmp	r0, #0
    d400:	d04d      	beq.n	d49e <__gethex+0x10a>
    d402:	2d00      	cmp	r5, #0
    d404:	d14e      	bne.n	d4a4 <__gethex+0x110>
    d406:	7832      	ldrb	r2, [r6, #0]
    d408:	46a9      	mov	r9, r5
    d40a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d40e:	2a50      	cmp	r2, #80	; 0x50
    d410:	4635      	mov	r5, r6
    d412:	d050      	beq.n	d4b6 <__gethex+0x122>
    d414:	f8cb 6000 	str.w	r6, [fp]
    d418:	2f00      	cmp	r7, #0
    d41a:	d169      	bne.n	d4f0 <__gethex+0x15c>
    d41c:	1b2b      	subs	r3, r5, r4
    d41e:	3b01      	subs	r3, #1
    d420:	2b07      	cmp	r3, #7
    d422:	4639      	mov	r1, r7
    d424:	dd04      	ble.n	d430 <__gethex+0x9c>
    d426:	105b      	asrs	r3, r3, #1
    d428:	2b07      	cmp	r3, #7
    d42a:	f101 0101 	add.w	r1, r1, #1
    d42e:	dcfa      	bgt.n	d426 <__gethex+0x92>
    d430:	ee18 0a10 	vmov	r0, s16
    d434:	f000 fb82 	bl	db3c <_Balloc>
    d438:	4683      	mov	fp, r0
    d43a:	2800      	cmp	r0, #0
    d43c:	f000 8266 	beq.w	d90c <__gethex+0x578>
    d440:	f100 0614 	add.w	r6, r0, #20
    d444:	42ac      	cmp	r4, r5
    d446:	9601      	str	r6, [sp, #4]
    d448:	f080 81d2 	bcs.w	d7f0 <__gethex+0x45c>
    d44c:	2700      	movs	r7, #0
    d44e:	f8cd 900c 	str.w	r9, [sp, #12]
    d452:	499c      	ldr	r1, [pc, #624]	; (d6c4 <__gethex+0x330>)
    d454:	46a1      	mov	r9, r4
    d456:	463c      	mov	r4, r7
    d458:	e00c      	b.n	d474 <__gethex+0xe0>
    d45a:	2f20      	cmp	r7, #32
    d45c:	d019      	beq.n	d492 <__gethex+0xfe>
    d45e:	4638      	mov	r0, r7
    d460:	3704      	adds	r7, #4
    d462:	782a      	ldrb	r2, [r5, #0]
    d464:	f818 2002 	ldrb.w	r2, [r8, r2]
    d468:	f002 020f 	and.w	r2, r2, #15
    d46c:	4082      	lsls	r2, r0
    d46e:	4314      	orrs	r4, r2
    d470:	454d      	cmp	r5, r9
    d472:	d047      	beq.n	d504 <__gethex+0x170>
    d474:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    d478:	2a2e      	cmp	r2, #46	; 0x2e
    d47a:	d1ee      	bne.n	d45a <__gethex+0xc6>
    d47c:	454d      	cmp	r5, r9
    d47e:	d3ec      	bcc.n	d45a <__gethex+0xc6>
    d480:	2201      	movs	r2, #1
    d482:	4628      	mov	r0, r5
    d484:	f7ff fa30 	bl	c8e8 <strncmp>
    d488:	498e      	ldr	r1, [pc, #568]	; (d6c4 <__gethex+0x330>)
    d48a:	2800      	cmp	r0, #0
    d48c:	d0f0      	beq.n	d470 <__gethex+0xdc>
    d48e:	2f20      	cmp	r7, #32
    d490:	d1e5      	bne.n	d45e <__gethex+0xca>
    d492:	2000      	movs	r0, #0
    d494:	f846 4b04 	str.w	r4, [r6], #4
    d498:	2704      	movs	r7, #4
    d49a:	4604      	mov	r4, r0
    d49c:	e7e1      	b.n	d462 <__gethex+0xce>
    d49e:	2d00      	cmp	r5, #0
    d4a0:	f000 8142 	beq.w	d728 <__gethex+0x394>
    d4a4:	7832      	ldrb	r2, [r6, #0]
    d4a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d4aa:	1bad      	subs	r5, r5, r6
    d4ac:	2a50      	cmp	r2, #80	; 0x50
    d4ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    d4b2:	4635      	mov	r5, r6
    d4b4:	d1ae      	bne.n	d414 <__gethex+0x80>
    d4b6:	786a      	ldrb	r2, [r5, #1]
    d4b8:	2a2b      	cmp	r2, #43	; 0x2b
    d4ba:	f000 8125 	beq.w	d708 <__gethex+0x374>
    d4be:	2a2d      	cmp	r2, #45	; 0x2d
    d4c0:	f000 80a5 	beq.w	d60e <__gethex+0x27a>
    d4c4:	1c6e      	adds	r6, r5, #1
    d4c6:	2000      	movs	r0, #0
    d4c8:	f818 1002 	ldrb.w	r1, [r8, r2]
    d4cc:	1e4a      	subs	r2, r1, #1
    d4ce:	2a18      	cmp	r2, #24
    d4d0:	f200 809b 	bhi.w	d60a <__gethex+0x276>
    d4d4:	7872      	ldrb	r2, [r6, #1]
    d4d6:	f818 2002 	ldrb.w	r2, [r8, r2]
    d4da:	3910      	subs	r1, #16
    d4dc:	3601      	adds	r6, #1
    d4de:	2a00      	cmp	r2, #0
    d4e0:	d15a      	bne.n	d598 <__gethex+0x204>
    d4e2:	b100      	cbz	r0, d4e6 <__gethex+0x152>
    d4e4:	4249      	negs	r1, r1
    d4e6:	4489      	add	r9, r1
    d4e8:	f8cb 6000 	str.w	r6, [fp]
    d4ec:	2f00      	cmp	r7, #0
    d4ee:	d095      	beq.n	d41c <__gethex+0x88>
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	bf14      	ite	ne
    d4f4:	2500      	movne	r5, #0
    d4f6:	2506      	moveq	r5, #6
    d4f8:	4628      	mov	r0, r5
    d4fa:	b005      	add	sp, #20
    d4fc:	ecbd 8b02 	vpop	{d8}
    d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d504:	f8dd 900c 	ldr.w	r9, [sp, #12]
    d508:	4623      	mov	r3, r4
    d50a:	f846 3b04 	str.w	r3, [r6], #4
    d50e:	4618      	mov	r0, r3
    d510:	9b01      	ldr	r3, [sp, #4]
    d512:	1af6      	subs	r6, r6, r3
    d514:	10b6      	asrs	r6, r6, #2
    d516:	f8cb 6010 	str.w	r6, [fp, #16]
    d51a:	f000 fbe9 	bl	dcf0 <__hi0bits>
    d51e:	0176      	lsls	r6, r6, #5
    d520:	f8da 4000 	ldr.w	r4, [sl]
    d524:	1a30      	subs	r0, r6, r0
    d526:	42a0      	cmp	r0, r4
    d528:	dc75      	bgt.n	d616 <__gethex+0x282>
    d52a:	f2c0 80ef 	blt.w	d70c <__gethex+0x378>
    d52e:	2700      	movs	r7, #0
    d530:	f8da 3008 	ldr.w	r3, [sl, #8]
    d534:	454b      	cmp	r3, r9
    d536:	f2c0 8151 	blt.w	d7dc <__gethex+0x448>
    d53a:	f8da 3004 	ldr.w	r3, [sl, #4]
    d53e:	454b      	cmp	r3, r9
    d540:	dd4a      	ble.n	d5d8 <__gethex+0x244>
    d542:	eba3 0909 	sub.w	r9, r3, r9
    d546:	454c      	cmp	r4, r9
    d548:	f300 8082 	bgt.w	d650 <__gethex+0x2bc>
    d54c:	f8da 200c 	ldr.w	r2, [sl, #12]
    d550:	2a02      	cmp	r2, #2
    d552:	f000 8165 	beq.w	d820 <__gethex+0x48c>
    d556:	2a03      	cmp	r2, #3
    d558:	f000 8181 	beq.w	d85e <__gethex+0x4ca>
    d55c:	2a01      	cmp	r2, #1
    d55e:	f000 816f 	beq.w	d840 <__gethex+0x4ac>
    d562:	ee18 0a10 	vmov	r0, s16
    d566:	4659      	mov	r1, fp
    d568:	f000 fb0e 	bl	db88 <_Bfree>
    d56c:	2550      	movs	r5, #80	; 0x50
    d56e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d570:	2300      	movs	r3, #0
    d572:	4628      	mov	r0, r5
    d574:	6013      	str	r3, [r2, #0]
    d576:	b005      	add	sp, #20
    d578:	ecbd 8b02 	vpop	{d8}
    d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d580:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d584:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    d588:	f1a2 0110 	sub.w	r1, r2, #16
    d58c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d590:	f818 2002 	ldrb.w	r2, [r8, r2]
    d594:	2a00      	cmp	r2, #0
    d596:	d0a4      	beq.n	d4e2 <__gethex+0x14e>
    d598:	2a19      	cmp	r2, #25
    d59a:	ddf1      	ble.n	d580 <__gethex+0x1ec>
    d59c:	e7a1      	b.n	d4e2 <__gethex+0x14e>
    d59e:	4949      	ldr	r1, [pc, #292]	; (d6c4 <__gethex+0x330>)
    d5a0:	9301      	str	r3, [sp, #4]
    d5a2:	2201      	movs	r2, #1
    d5a4:	4620      	mov	r0, r4
    d5a6:	f7ff f99f 	bl	c8e8 <strncmp>
    d5aa:	9b01      	ldr	r3, [sp, #4]
    d5ac:	2800      	cmp	r0, #0
    d5ae:	d16d      	bne.n	d68c <__gethex+0x2f8>
    d5b0:	7861      	ldrb	r1, [r4, #1]
    d5b2:	f818 2001 	ldrb.w	r2, [r8, r1]
    d5b6:	1c65      	adds	r5, r4, #1
    d5b8:	2a00      	cmp	r2, #0
    d5ba:	d069      	beq.n	d690 <__gethex+0x2fc>
    d5bc:	2930      	cmp	r1, #48	; 0x30
    d5be:	462c      	mov	r4, r5
    d5c0:	d105      	bne.n	d5ce <__gethex+0x23a>
    d5c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d5c6:	2b30      	cmp	r3, #48	; 0x30
    d5c8:	d0fb      	beq.n	d5c2 <__gethex+0x22e>
    d5ca:	f818 2003 	ldrb.w	r2, [r8, r3]
    d5ce:	fab2 f782 	clz	r7, r2
    d5d2:	097f      	lsrs	r7, r7, #5
    d5d4:	2301      	movs	r3, #1
    d5d6:	e702      	b.n	d3de <__gethex+0x4a>
    d5d8:	2501      	movs	r5, #1
    d5da:	b157      	cbz	r7, d5f2 <__gethex+0x25e>
    d5dc:	f8da 300c 	ldr.w	r3, [sl, #12]
    d5e0:	2b02      	cmp	r3, #2
    d5e2:	d05d      	beq.n	d6a0 <__gethex+0x30c>
    d5e4:	2b03      	cmp	r3, #3
    d5e6:	d05f      	beq.n	d6a8 <__gethex+0x314>
    d5e8:	2b01      	cmp	r3, #1
    d5ea:	f000 8084 	beq.w	d6f6 <__gethex+0x362>
    d5ee:	f045 0510 	orr.w	r5, r5, #16
    d5f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5f4:	f8c3 b000 	str.w	fp, [r3]
    d5f8:	9b02      	ldr	r3, [sp, #8]
    d5fa:	4628      	mov	r0, r5
    d5fc:	f8c3 9000 	str.w	r9, [r3]
    d600:	b005      	add	sp, #20
    d602:	ecbd 8b02 	vpop	{d8}
    d606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d60a:	462e      	mov	r6, r5
    d60c:	e702      	b.n	d414 <__gethex+0x80>
    d60e:	2001      	movs	r0, #1
    d610:	78aa      	ldrb	r2, [r5, #2]
    d612:	1cae      	adds	r6, r5, #2
    d614:	e758      	b.n	d4c8 <__gethex+0x134>
    d616:	1b06      	subs	r6, r0, r4
    d618:	4631      	mov	r1, r6
    d61a:	4658      	mov	r0, fp
    d61c:	f000 ff96 	bl	e54c <__any_on>
    d620:	4607      	mov	r7, r0
    d622:	b178      	cbz	r0, d644 <__gethex+0x2b0>
    d624:	1e72      	subs	r2, r6, #1
    d626:	1153      	asrs	r3, r2, #5
    d628:	9901      	ldr	r1, [sp, #4]
    d62a:	2701      	movs	r7, #1
    d62c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    d630:	f002 031f 	and.w	r3, r2, #31
    d634:	fa07 f303 	lsl.w	r3, r7, r3
    d638:	420b      	tst	r3, r1
    d63a:	d003      	beq.n	d644 <__gethex+0x2b0>
    d63c:	42ba      	cmp	r2, r7
    d63e:	f300 80e2 	bgt.w	d806 <__gethex+0x472>
    d642:	2702      	movs	r7, #2
    d644:	4631      	mov	r1, r6
    d646:	4658      	mov	r0, fp
    d648:	44b1      	add	r9, r6
    d64a:	f7ff fe51 	bl	d2f0 <rshift>
    d64e:	e76f      	b.n	d530 <__gethex+0x19c>
    d650:	f109 35ff 	add.w	r5, r9, #4294967295
    d654:	2f00      	cmp	r7, #0
    d656:	f040 80ce 	bne.w	d7f6 <__gethex+0x462>
    d65a:	2d00      	cmp	r5, #0
    d65c:	f040 80cd 	bne.w	d7fa <__gethex+0x466>
    d660:	116b      	asrs	r3, r5, #5
    d662:	9a01      	ldr	r2, [sp, #4]
    d664:	f005 051f 	and.w	r5, r5, #31
    d668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d66c:	2301      	movs	r3, #1
    d66e:	40ab      	lsls	r3, r5
    d670:	4213      	tst	r3, r2
    d672:	4649      	mov	r1, r9
    d674:	4658      	mov	r0, fp
    d676:	bf18      	it	ne
    d678:	f047 0702 	orrne.w	r7, r7, #2
    d67c:	eba4 0409 	sub.w	r4, r4, r9
    d680:	f7ff fe36 	bl	d2f0 <rshift>
    d684:	2502      	movs	r5, #2
    d686:	f8da 9004 	ldr.w	r9, [sl, #4]
    d68a:	e7a6      	b.n	d5da <__gethex+0x246>
    d68c:	7821      	ldrb	r1, [r4, #0]
    d68e:	4625      	mov	r5, r4
    d690:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    d694:	2950      	cmp	r1, #80	; 0x50
    d696:	f000 80bf 	beq.w	d818 <__gethex+0x484>
    d69a:	f8cb 5000 	str.w	r5, [fp]
    d69e:	e727      	b.n	d4f0 <__gethex+0x15c>
    d6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6a2:	f1c3 0301 	rsb	r3, r3, #1
    d6a6:	9311      	str	r3, [sp, #68]	; 0x44
    d6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d09f      	beq.n	d5ee <__gethex+0x25a>
    d6ae:	f8db 7010 	ldr.w	r7, [fp, #16]
    d6b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    d6b6:	00ba      	lsls	r2, r7, #2
    d6b8:	4643      	mov	r3, r8
    d6ba:	9201      	str	r2, [sp, #4]
    d6bc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    d6c0:	2100      	movs	r1, #0
    d6c2:	e007      	b.n	d6d4 <__gethex+0x340>
    d6c4:	2000803c 	.word	0x2000803c
    d6c8:	20000bf4 	.word	0x20000bf4
    d6cc:	4298      	cmp	r0, r3
    d6ce:	f843 1c04 	str.w	r1, [r3, #-4]
    d6d2:	d93f      	bls.n	d754 <__gethex+0x3c0>
    d6d4:	461e      	mov	r6, r3
    d6d6:	f853 2b04 	ldr.w	r2, [r3], #4
    d6da:	f1b2 3fff 	cmp.w	r2, #4294967295
    d6de:	d0f5      	beq.n	d6cc <__gethex+0x338>
    d6e0:	3201      	adds	r2, #1
    d6e2:	2d02      	cmp	r5, #2
    d6e4:	6032      	str	r2, [r6, #0]
    d6e6:	f000 80bf 	beq.w	d868 <__gethex+0x4d4>
    d6ea:	f014 041f 	ands.w	r4, r4, #31
    d6ee:	f040 80e7 	bne.w	d8c0 <__gethex+0x52c>
    d6f2:	2521      	movs	r5, #33	; 0x21
    d6f4:	e77d      	b.n	d5f2 <__gethex+0x25e>
    d6f6:	07ba      	lsls	r2, r7, #30
    d6f8:	f57f af79 	bpl.w	d5ee <__gethex+0x25a>
    d6fc:	9b01      	ldr	r3, [sp, #4]
    d6fe:	681b      	ldr	r3, [r3, #0]
    d700:	431f      	orrs	r7, r3
    d702:	07fb      	lsls	r3, r7, #31
    d704:	d4d3      	bmi.n	d6ae <__gethex+0x31a>
    d706:	e772      	b.n	d5ee <__gethex+0x25a>
    d708:	2000      	movs	r0, #0
    d70a:	e781      	b.n	d610 <__gethex+0x27c>
    d70c:	1a22      	subs	r2, r4, r0
    d70e:	4659      	mov	r1, fp
    d710:	ee18 0a10 	vmov	r0, s16
    d714:	eba9 0902 	sub.w	r9, r9, r2
    d718:	f000 fc76 	bl	e008 <__lshift>
    d71c:	f100 0314 	add.w	r3, r0, #20
    d720:	4683      	mov	fp, r0
    d722:	9301      	str	r3, [sp, #4]
    d724:	2700      	movs	r7, #0
    d726:	e703      	b.n	d530 <__gethex+0x19c>
    d728:	7872      	ldrb	r2, [r6, #1]
    d72a:	f818 0002 	ldrb.w	r0, [r8, r2]
    d72e:	1c71      	adds	r1, r6, #1
    d730:	2800      	cmp	r0, #0
    d732:	f000 80a0 	beq.w	d876 <__gethex+0x4e2>
    d736:	460d      	mov	r5, r1
    d738:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    d73c:	f818 0002 	ldrb.w	r0, [r8, r2]
    d740:	2800      	cmp	r0, #0
    d742:	d1f8      	bne.n	d736 <__gethex+0x3a2>
    d744:	1b75      	subs	r5, r6, r5
    d746:	ea4f 0985 	mov.w	r9, r5, lsl #2
    d74a:	460e      	mov	r6, r1
    d74c:	e65d      	b.n	d40a <__gethex+0x76>
    d74e:	3402      	adds	r4, #2
    d750:	2300      	movs	r3, #0
    d752:	e638      	b.n	d3c6 <__gethex+0x32>
    d754:	f8db 3008 	ldr.w	r3, [fp, #8]
    d758:	429f      	cmp	r7, r3
    d75a:	f280 808e 	bge.w	d87a <__gethex+0x4e6>
    d75e:	463b      	mov	r3, r7
    d760:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    d764:	2101      	movs	r1, #1
    d766:	3301      	adds	r3, #1
    d768:	2d02      	cmp	r5, #2
    d76a:	f8cb 3010 	str.w	r3, [fp, #16]
    d76e:	6151      	str	r1, [r2, #20]
    d770:	d07a      	beq.n	d868 <__gethex+0x4d4>
    d772:	429f      	cmp	r7, r3
    d774:	dab9      	bge.n	d6ea <__gethex+0x356>
    d776:	2b00      	cmp	r3, #0
    d778:	f340 809b 	ble.w	d8b2 <__gethex+0x51e>
    d77c:	f8db 2014 	ldr.w	r2, [fp, #20]
    d780:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    d784:	f10b 0018 	add.w	r0, fp, #24
    d788:	4283      	cmp	r3, r0
    d78a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    d78e:	f240 80b1 	bls.w	d8f4 <__gethex+0x560>
    d792:	4644      	mov	r4, r8
    d794:	6801      	ldr	r1, [r0, #0]
    d796:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    d79a:	f844 2b04 	str.w	r2, [r4], #4
    d79e:	f850 2b04 	ldr.w	r2, [r0], #4
    d7a2:	4283      	cmp	r3, r0
    d7a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    d7a8:	d8f4      	bhi.n	d794 <__gethex+0x400>
    d7aa:	eba3 030b 	sub.w	r3, r3, fp
    d7ae:	3b19      	subs	r3, #25
    d7b0:	089b      	lsrs	r3, r3, #2
    d7b2:	3301      	adds	r3, #1
    d7b4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    d7b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    d7bc:	2a00      	cmp	r2, #0
    d7be:	f040 809d 	bne.w	d8fc <__gethex+0x568>
    d7c2:	eba3 0208 	sub.w	r2, r3, r8
    d7c6:	1092      	asrs	r2, r2, #2
    d7c8:	4543      	cmp	r3, r8
    d7ca:	f8cb 2010 	str.w	r2, [fp, #16]
    d7ce:	d073      	beq.n	d8b8 <__gethex+0x524>
    d7d0:	f8da 3008 	ldr.w	r3, [sl, #8]
    d7d4:	f109 0901 	add.w	r9, r9, #1
    d7d8:	454b      	cmp	r3, r9
    d7da:	da8a      	bge.n	d6f2 <__gethex+0x35e>
    d7dc:	ee18 0a10 	vmov	r0, s16
    d7e0:	4659      	mov	r1, fp
    d7e2:	f000 f9d1 	bl	db88 <_Bfree>
    d7e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7e8:	2300      	movs	r3, #0
    d7ea:	6013      	str	r3, [r2, #0]
    d7ec:	25a3      	movs	r5, #163	; 0xa3
    d7ee:	e683      	b.n	d4f8 <__gethex+0x164>
    d7f0:	9e01      	ldr	r6, [sp, #4]
    d7f2:	2300      	movs	r3, #0
    d7f4:	e689      	b.n	d50a <__gethex+0x176>
    d7f6:	2701      	movs	r7, #1
    d7f8:	e732      	b.n	d660 <__gethex+0x2cc>
    d7fa:	4629      	mov	r1, r5
    d7fc:	4658      	mov	r0, fp
    d7fe:	f000 fea5 	bl	e54c <__any_on>
    d802:	4607      	mov	r7, r0
    d804:	e72c      	b.n	d660 <__gethex+0x2cc>
    d806:	1eb1      	subs	r1, r6, #2
    d808:	4658      	mov	r0, fp
    d80a:	f000 fe9f 	bl	e54c <__any_on>
    d80e:	2800      	cmp	r0, #0
    d810:	f43f af17 	beq.w	d642 <__gethex+0x2ae>
    d814:	2703      	movs	r7, #3
    d816:	e715      	b.n	d644 <__gethex+0x2b0>
    d818:	f04f 0900 	mov.w	r9, #0
    d81c:	2701      	movs	r7, #1
    d81e:	e64a      	b.n	d4b6 <__gethex+0x122>
    d820:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d822:	2a00      	cmp	r2, #0
    d824:	f47f ae9d 	bne.w	d562 <__gethex+0x1ce>
    d828:	9902      	ldr	r1, [sp, #8]
    d82a:	600b      	str	r3, [r1, #0]
    d82c:	9b01      	ldr	r3, [sp, #4]
    d82e:	2201      	movs	r2, #1
    d830:	f8cb 2010 	str.w	r2, [fp, #16]
    d834:	601a      	str	r2, [r3, #0]
    d836:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d838:	2562      	movs	r5, #98	; 0x62
    d83a:	f8c3 b000 	str.w	fp, [r3]
    d83e:	e65b      	b.n	d4f8 <__gethex+0x164>
    d840:	454c      	cmp	r4, r9
    d842:	f47f ae8e 	bne.w	d562 <__gethex+0x1ce>
    d846:	2c01      	cmp	r4, #1
    d848:	d0ee      	beq.n	d828 <__gethex+0x494>
    d84a:	1e61      	subs	r1, r4, #1
    d84c:	4658      	mov	r0, fp
    d84e:	f000 fe7d 	bl	e54c <__any_on>
    d852:	2800      	cmp	r0, #0
    d854:	f43f ae85 	beq.w	d562 <__gethex+0x1ce>
    d858:	f8da 3004 	ldr.w	r3, [sl, #4]
    d85c:	e7e4      	b.n	d828 <__gethex+0x494>
    d85e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d860:	2a00      	cmp	r2, #0
    d862:	f43f ae7e 	beq.w	d562 <__gethex+0x1ce>
    d866:	e7df      	b.n	d828 <__gethex+0x494>
    d868:	f8da 3000 	ldr.w	r3, [sl]
    d86c:	3b01      	subs	r3, #1
    d86e:	42a3      	cmp	r3, r4
    d870:	d034      	beq.n	d8dc <__gethex+0x548>
    d872:	2522      	movs	r5, #34	; 0x22
    d874:	e6bd      	b.n	d5f2 <__gethex+0x25e>
    d876:	460e      	mov	r6, r1
    d878:	e5c7      	b.n	d40a <__gethex+0x76>
    d87a:	f8db 1004 	ldr.w	r1, [fp, #4]
    d87e:	ee18 0a10 	vmov	r0, s16
    d882:	3101      	adds	r1, #1
    d884:	f000 f95a 	bl	db3c <_Balloc>
    d888:	4606      	mov	r6, r0
    d88a:	b3c8      	cbz	r0, d900 <__gethex+0x56c>
    d88c:	f8db 3010 	ldr.w	r3, [fp, #16]
    d890:	3302      	adds	r3, #2
    d892:	009a      	lsls	r2, r3, #2
    d894:	f10b 010c 	add.w	r1, fp, #12
    d898:	300c      	adds	r0, #12
    d89a:	f7fa fd3b 	bl	8314 <memcpy>
    d89e:	4659      	mov	r1, fp
    d8a0:	ee18 0a10 	vmov	r0, s16
    d8a4:	f000 f970 	bl	db88 <_Bfree>
    d8a8:	f106 0814 	add.w	r8, r6, #20
    d8ac:	6933      	ldr	r3, [r6, #16]
    d8ae:	46b3      	mov	fp, r6
    d8b0:	e756      	b.n	d760 <__gethex+0x3cc>
    d8b2:	2300      	movs	r3, #0
    d8b4:	f8cb 3010 	str.w	r3, [fp, #16]
    d8b8:	2300      	movs	r3, #0
    d8ba:	f8cb 3014 	str.w	r3, [fp, #20]
    d8be:	e787      	b.n	d7d0 <__gethex+0x43c>
    d8c0:	9b01      	ldr	r3, [sp, #4]
    d8c2:	4443      	add	r3, r8
    d8c4:	f1c4 0420 	rsb	r4, r4, #32
    d8c8:	f853 0c04 	ldr.w	r0, [r3, #-4]
    d8cc:	f000 fa10 	bl	dcf0 <__hi0bits>
    d8d0:	42a0      	cmp	r0, r4
    d8d2:	f6bf af0e 	bge.w	d6f2 <__gethex+0x35e>
    d8d6:	f8db 3010 	ldr.w	r3, [fp, #16]
    d8da:	e74c      	b.n	d776 <__gethex+0x3e2>
    d8dc:	1163      	asrs	r3, r4, #5
    d8de:	f004 041f 	and.w	r4, r4, #31
    d8e2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    d8e6:	2301      	movs	r3, #1
    d8e8:	40a3      	lsls	r3, r4
    d8ea:	4213      	tst	r3, r2
    d8ec:	bf0c      	ite	eq
    d8ee:	2522      	moveq	r5, #34	; 0x22
    d8f0:	2521      	movne	r5, #33	; 0x21
    d8f2:	e67e      	b.n	d5f2 <__gethex+0x25e>
    d8f4:	f8c8 2000 	str.w	r2, [r8]
    d8f8:	4643      	mov	r3, r8
    d8fa:	b16a      	cbz	r2, d918 <__gethex+0x584>
    d8fc:	3304      	adds	r3, #4
    d8fe:	e760      	b.n	d7c2 <__gethex+0x42e>
    d900:	4b07      	ldr	r3, [pc, #28]	; (d920 <__gethex+0x58c>)
    d902:	4808      	ldr	r0, [pc, #32]	; (d924 <__gethex+0x590>)
    d904:	4632      	mov	r2, r6
    d906:	2184      	movs	r1, #132	; 0x84
    d908:	f004 fa0a 	bl	11d20 <__assert_func>
    d90c:	4b04      	ldr	r3, [pc, #16]	; (d920 <__gethex+0x58c>)
    d90e:	4805      	ldr	r0, [pc, #20]	; (d924 <__gethex+0x590>)
    d910:	465a      	mov	r2, fp
    d912:	21e4      	movs	r1, #228	; 0xe4
    d914:	f004 fa04 	bl	11d20 <__assert_func>
    d918:	f8cb 2010 	str.w	r2, [fp, #16]
    d91c:	e7cc      	b.n	d8b8 <__gethex+0x524>
    d91e:	bf00      	nop
    d920:	20000b7c 	.word	0x20000b7c
    d924:	20000b90 	.word	0x20000b90

0000d928 <__match>:
    d928:	b410      	push	{r4}
    d92a:	6804      	ldr	r4, [r0, #0]
    d92c:	e009      	b.n	d942 <__match+0x1a>
    d92e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d932:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    d936:	f1bc 0f19 	cmp.w	ip, #25
    d93a:	bf98      	it	ls
    d93c:	3320      	addls	r3, #32
    d93e:	4293      	cmp	r3, r2
    d940:	d109      	bne.n	d956 <__match+0x2e>
    d942:	f811 2b01 	ldrb.w	r2, [r1], #1
    d946:	2a00      	cmp	r2, #0
    d948:	d1f1      	bne.n	d92e <__match+0x6>
    d94a:	3401      	adds	r4, #1
    d94c:	6004      	str	r4, [r0, #0]
    d94e:	2001      	movs	r0, #1
    d950:	f85d 4b04 	ldr.w	r4, [sp], #4
    d954:	4770      	bx	lr
    d956:	2000      	movs	r0, #0
    d958:	f85d 4b04 	ldr.w	r4, [sp], #4
    d95c:	4770      	bx	lr
    d95e:	bf00      	nop

0000d960 <__hexnan>:
    d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d964:	6809      	ldr	r1, [r1, #0]
    d966:	b085      	sub	sp, #20
    d968:	114b      	asrs	r3, r1, #5
    d96a:	f011 011f 	ands.w	r1, r1, #31
    d96e:	9002      	str	r0, [sp, #8]
    d970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d974:	9103      	str	r1, [sp, #12]
    d976:	f040 808f 	bne.w	da98 <__hexnan+0x138>
    d97a:	1f1d      	subs	r5, r3, #4
    d97c:	9301      	str	r3, [sp, #4]
    d97e:	9b02      	ldr	r3, [sp, #8]
    d980:	9901      	ldr	r1, [sp, #4]
    d982:	681c      	ldr	r4, [r3, #0]
    d984:	2300      	movs	r3, #0
    d986:	f841 3c04 	str.w	r3, [r1, #-4]
    d98a:	7861      	ldrb	r1, [r4, #1]
    d98c:	3401      	adds	r4, #1
    d98e:	2900      	cmp	r1, #0
    d990:	f000 8098 	beq.w	dac4 <__hexnan+0x164>
    d994:	f8df 9174 	ldr.w	r9, [pc, #372]	; db0c <__hexnan+0x1ac>
    d998:	46a8      	mov	r8, r5
    d99a:	46ac      	mov	ip, r5
    d99c:	469a      	mov	sl, r3
    d99e:	461e      	mov	r6, r3
    d9a0:	e00e      	b.n	d9c0 <__hexnan+0x60>
    d9a2:	2920      	cmp	r1, #32
    d9a4:	f200 808c 	bhi.w	dac0 <__hexnan+0x160>
    d9a8:	4556      	cmp	r6, sl
    d9aa:	dd06      	ble.n	d9ba <__hexnan+0x5a>
    d9ac:	45c4      	cmp	ip, r8
    d9ae:	d201      	bcs.n	d9b4 <__hexnan+0x54>
    d9b0:	2b07      	cmp	r3, #7
    d9b2:	dd5b      	ble.n	da6c <__hexnan+0x10c>
    d9b4:	4562      	cmp	r2, ip
    d9b6:	d351      	bcc.n	da5c <__hexnan+0xfc>
    d9b8:	2308      	movs	r3, #8
    d9ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    d9be:	b1a1      	cbz	r1, d9ea <__hexnan+0x8a>
    d9c0:	f819 0001 	ldrb.w	r0, [r9, r1]
    d9c4:	2800      	cmp	r0, #0
    d9c6:	d0ec      	beq.n	d9a2 <__hexnan+0x42>
    d9c8:	3301      	adds	r3, #1
    d9ca:	2b08      	cmp	r3, #8
    d9cc:	f106 0601 	add.w	r6, r6, #1
    d9d0:	dc3a      	bgt.n	da48 <__hexnan+0xe8>
    d9d2:	f8dc 1000 	ldr.w	r1, [ip]
    d9d6:	0109      	lsls	r1, r1, #4
    d9d8:	f000 000f 	and.w	r0, r0, #15
    d9dc:	4308      	orrs	r0, r1
    d9de:	f8cc 0000 	str.w	r0, [ip]
    d9e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    d9e6:	2900      	cmp	r1, #0
    d9e8:	d1ea      	bne.n	d9c0 <__hexnan+0x60>
    d9ea:	2e00      	cmp	r6, #0
    d9ec:	d06a      	beq.n	dac4 <__hexnan+0x164>
    d9ee:	45c4      	cmp	ip, r8
    d9f0:	d201      	bcs.n	d9f6 <__hexnan+0x96>
    d9f2:	2b07      	cmp	r3, #7
    d9f4:	dd74      	ble.n	dae0 <__hexnan+0x180>
    d9f6:	4562      	cmp	r2, ip
    d9f8:	d252      	bcs.n	daa0 <__hexnan+0x140>
    d9fa:	1f11      	subs	r1, r2, #4
    d9fc:	4663      	mov	r3, ip
    d9fe:	f853 0b04 	ldr.w	r0, [r3], #4
    da02:	f841 0f04 	str.w	r0, [r1, #4]!
    da06:	42ab      	cmp	r3, r5
    da08:	d9f9      	bls.n	d9fe <__hexnan+0x9e>
    da0a:	eba5 030c 	sub.w	r3, r5, ip
    da0e:	f023 0303 	bic.w	r3, r3, #3
    da12:	1c69      	adds	r1, r5, #1
    da14:	3304      	adds	r3, #4
    da16:	f10c 0c01 	add.w	ip, ip, #1
    da1a:	4561      	cmp	r1, ip
    da1c:	bf38      	it	cc
    da1e:	2304      	movcc	r3, #4
    da20:	4413      	add	r3, r2
    da22:	2100      	movs	r1, #0
    da24:	f843 1b04 	str.w	r1, [r3], #4
    da28:	42ab      	cmp	r3, r5
    da2a:	d9fb      	bls.n	da24 <__hexnan+0xc4>
    da2c:	9b01      	ldr	r3, [sp, #4]
    da2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    da32:	b92b      	cbnz	r3, da40 <__hexnan+0xe0>
    da34:	42aa      	cmp	r2, r5
    da36:	d049      	beq.n	dacc <__hexnan+0x16c>
    da38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    da3c:	2b00      	cmp	r3, #0
    da3e:	d0f9      	beq.n	da34 <__hexnan+0xd4>
    da40:	2005      	movs	r0, #5
    da42:	b005      	add	sp, #20
    da44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da48:	4562      	cmp	r2, ip
    da4a:	d2b6      	bcs.n	d9ba <__hexnan+0x5a>
    da4c:	2300      	movs	r3, #0
    da4e:	f84c 3c04 	str.w	r3, [ip, #-4]
    da52:	4619      	mov	r1, r3
    da54:	f1ac 0c04 	sub.w	ip, ip, #4
    da58:	2301      	movs	r3, #1
    da5a:	e7bd      	b.n	d9d8 <__hexnan+0x78>
    da5c:	2300      	movs	r3, #0
    da5e:	f1ac 0804 	sub.w	r8, ip, #4
    da62:	f84c 3c04 	str.w	r3, [ip, #-4]
    da66:	46b2      	mov	sl, r6
    da68:	46c4      	mov	ip, r8
    da6a:	e7a6      	b.n	d9ba <__hexnan+0x5a>
    da6c:	f1c3 0108 	rsb	r1, r3, #8
    da70:	f8dc 3000 	ldr.w	r3, [ip]
    da74:	0089      	lsls	r1, r1, #2
    da76:	f1c1 0e20 	rsb	lr, r1, #32
    da7a:	4660      	mov	r0, ip
    da7c:	469b      	mov	fp, r3
    da7e:	6847      	ldr	r7, [r0, #4]
    da80:	fa07 f30e 	lsl.w	r3, r7, lr
    da84:	ea43 030b 	orr.w	r3, r3, fp
    da88:	fa27 fb01 	lsr.w	fp, r7, r1
    da8c:	6003      	str	r3, [r0, #0]
    da8e:	f840 bf04 	str.w	fp, [r0, #4]!
    da92:	4540      	cmp	r0, r8
    da94:	d3f3      	bcc.n	da7e <__hexnan+0x11e>
    da96:	e78d      	b.n	d9b4 <__hexnan+0x54>
    da98:	1d19      	adds	r1, r3, #4
    da9a:	9101      	str	r1, [sp, #4]
    da9c:	461d      	mov	r5, r3
    da9e:	e76e      	b.n	d97e <__hexnan+0x1e>
    daa0:	9b03      	ldr	r3, [sp, #12]
    daa2:	2b00      	cmp	r3, #0
    daa4:	d0c2      	beq.n	da2c <__hexnan+0xcc>
    daa6:	9b03      	ldr	r3, [sp, #12]
    daa8:	9801      	ldr	r0, [sp, #4]
    daaa:	f1c3 0120 	rsb	r1, r3, #32
    daae:	f04f 33ff 	mov.w	r3, #4294967295
    dab2:	40cb      	lsrs	r3, r1
    dab4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    dab8:	400b      	ands	r3, r1
    daba:	f840 3c04 	str.w	r3, [r0, #-4]
    dabe:	e7b8      	b.n	da32 <__hexnan+0xd2>
    dac0:	2929      	cmp	r1, #41	; 0x29
    dac2:	d009      	beq.n	dad8 <__hexnan+0x178>
    dac4:	2004      	movs	r0, #4
    dac6:	b005      	add	sp, #20
    dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dacc:	2301      	movs	r3, #1
    dace:	2005      	movs	r0, #5
    dad0:	602b      	str	r3, [r5, #0]
    dad2:	b005      	add	sp, #20
    dad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dad8:	9902      	ldr	r1, [sp, #8]
    dada:	3401      	adds	r4, #1
    dadc:	600c      	str	r4, [r1, #0]
    dade:	e784      	b.n	d9ea <__hexnan+0x8a>
    dae0:	f8dc 1000 	ldr.w	r1, [ip]
    dae4:	f1c3 0308 	rsb	r3, r3, #8
    dae8:	009b      	lsls	r3, r3, #2
    daea:	f1c3 0720 	rsb	r7, r3, #32
    daee:	4664      	mov	r4, ip
    daf0:	4608      	mov	r0, r1
    daf2:	6866      	ldr	r6, [r4, #4]
    daf4:	fa06 f107 	lsl.w	r1, r6, r7
    daf8:	4301      	orrs	r1, r0
    dafa:	fa26 f003 	lsr.w	r0, r6, r3
    dafe:	6021      	str	r1, [r4, #0]
    db00:	f844 0f04 	str.w	r0, [r4, #4]!
    db04:	4544      	cmp	r4, r8
    db06:	d3f4      	bcc.n	daf2 <__hexnan+0x192>
    db08:	e775      	b.n	d9f6 <__hexnan+0x96>
    db0a:	bf00      	nop
    db0c:	20000bf4 	.word	0x20000bf4

0000db10 <__ascii_mbtowc>:
    db10:	b082      	sub	sp, #8
    db12:	b149      	cbz	r1, db28 <__ascii_mbtowc+0x18>
    db14:	b15a      	cbz	r2, db2e <__ascii_mbtowc+0x1e>
    db16:	b16b      	cbz	r3, db34 <__ascii_mbtowc+0x24>
    db18:	7813      	ldrb	r3, [r2, #0]
    db1a:	600b      	str	r3, [r1, #0]
    db1c:	7812      	ldrb	r2, [r2, #0]
    db1e:	1e10      	subs	r0, r2, #0
    db20:	bf18      	it	ne
    db22:	2001      	movne	r0, #1
    db24:	b002      	add	sp, #8
    db26:	4770      	bx	lr
    db28:	a901      	add	r1, sp, #4
    db2a:	2a00      	cmp	r2, #0
    db2c:	d1f3      	bne.n	db16 <__ascii_mbtowc+0x6>
    db2e:	4610      	mov	r0, r2
    db30:	b002      	add	sp, #8
    db32:	4770      	bx	lr
    db34:	f06f 0001 	mvn.w	r0, #1
    db38:	e7f4      	b.n	db24 <__ascii_mbtowc+0x14>
    db3a:	bf00      	nop

0000db3c <_Balloc>:
    db3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    db3e:	b570      	push	{r4, r5, r6, lr}
    db40:	4605      	mov	r5, r0
    db42:	460c      	mov	r4, r1
    db44:	b14b      	cbz	r3, db5a <_Balloc+0x1e>
    db46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    db4a:	b180      	cbz	r0, db6e <_Balloc+0x32>
    db4c:	6802      	ldr	r2, [r0, #0]
    db4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    db52:	2300      	movs	r3, #0
    db54:	e9c0 3303 	strd	r3, r3, [r0, #12]
    db58:	bd70      	pop	{r4, r5, r6, pc}
    db5a:	2221      	movs	r2, #33	; 0x21
    db5c:	2104      	movs	r1, #4
    db5e:	f004 f8ff 	bl	11d60 <_calloc_r>
    db62:	4603      	mov	r3, r0
    db64:	6468      	str	r0, [r5, #68]	; 0x44
    db66:	2800      	cmp	r0, #0
    db68:	d1ed      	bne.n	db46 <_Balloc+0xa>
    db6a:	2000      	movs	r0, #0
    db6c:	bd70      	pop	{r4, r5, r6, pc}
    db6e:	2101      	movs	r1, #1
    db70:	fa01 f604 	lsl.w	r6, r1, r4
    db74:	1d72      	adds	r2, r6, #5
    db76:	0092      	lsls	r2, r2, #2
    db78:	4628      	mov	r0, r5
    db7a:	f004 f8f1 	bl	11d60 <_calloc_r>
    db7e:	2800      	cmp	r0, #0
    db80:	d0f3      	beq.n	db6a <_Balloc+0x2e>
    db82:	e9c0 4601 	strd	r4, r6, [r0, #4]
    db86:	e7e4      	b.n	db52 <_Balloc+0x16>

0000db88 <_Bfree>:
    db88:	b131      	cbz	r1, db98 <_Bfree+0x10>
    db8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    db8c:	684a      	ldr	r2, [r1, #4]
    db8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    db92:	6008      	str	r0, [r1, #0]
    db94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    db98:	4770      	bx	lr
    db9a:	bf00      	nop

0000db9c <__multadd>:
    db9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dba0:	690e      	ldr	r6, [r1, #16]
    dba2:	4680      	mov	r8, r0
    dba4:	460f      	mov	r7, r1
    dba6:	461d      	mov	r5, r3
    dba8:	f101 0e14 	add.w	lr, r1, #20
    dbac:	2000      	movs	r0, #0
    dbae:	f8de 1000 	ldr.w	r1, [lr]
    dbb2:	b28c      	uxth	r4, r1
    dbb4:	fb02 5304 	mla	r3, r2, r4, r5
    dbb8:	0c09      	lsrs	r1, r1, #16
    dbba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    dbbe:	fb02 cc01 	mla	ip, r2, r1, ip
    dbc2:	3001      	adds	r0, #1
    dbc4:	b29c      	uxth	r4, r3
    dbc6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    dbca:	4286      	cmp	r6, r0
    dbcc:	f84e 4b04 	str.w	r4, [lr], #4
    dbd0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    dbd4:	dceb      	bgt.n	dbae <__multadd+0x12>
    dbd6:	b13d      	cbz	r5, dbe8 <__multadd+0x4c>
    dbd8:	68bb      	ldr	r3, [r7, #8]
    dbda:	42b3      	cmp	r3, r6
    dbdc:	dd07      	ble.n	dbee <__multadd+0x52>
    dbde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    dbe2:	3601      	adds	r6, #1
    dbe4:	615d      	str	r5, [r3, #20]
    dbe6:	613e      	str	r6, [r7, #16]
    dbe8:	4638      	mov	r0, r7
    dbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbee:	6879      	ldr	r1, [r7, #4]
    dbf0:	4640      	mov	r0, r8
    dbf2:	3101      	adds	r1, #1
    dbf4:	f7ff ffa2 	bl	db3c <_Balloc>
    dbf8:	4604      	mov	r4, r0
    dbfa:	b1b0      	cbz	r0, dc2a <__multadd+0x8e>
    dbfc:	693a      	ldr	r2, [r7, #16]
    dbfe:	3202      	adds	r2, #2
    dc00:	f107 010c 	add.w	r1, r7, #12
    dc04:	0092      	lsls	r2, r2, #2
    dc06:	300c      	adds	r0, #12
    dc08:	f7fa fb84 	bl	8314 <memcpy>
    dc0c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    dc10:	687a      	ldr	r2, [r7, #4]
    dc12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dc16:	6039      	str	r1, [r7, #0]
    dc18:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    dc1c:	4627      	mov	r7, r4
    dc1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    dc22:	3601      	adds	r6, #1
    dc24:	615d      	str	r5, [r3, #20]
    dc26:	613e      	str	r6, [r7, #16]
    dc28:	e7de      	b.n	dbe8 <__multadd+0x4c>
    dc2a:	4b03      	ldr	r3, [pc, #12]	; (dc38 <__multadd+0x9c>)
    dc2c:	4803      	ldr	r0, [pc, #12]	; (dc3c <__multadd+0xa0>)
    dc2e:	4622      	mov	r2, r4
    dc30:	21ba      	movs	r1, #186	; 0xba
    dc32:	f004 f875 	bl	11d20 <__assert_func>
    dc36:	bf00      	nop
    dc38:	20000b7c 	.word	0x20000b7c
    dc3c:	20000cf4 	.word	0x20000cf4

0000dc40 <__s2b>:
    dc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc44:	4617      	mov	r7, r2
    dc46:	4a27      	ldr	r2, [pc, #156]	; (dce4 <__s2b+0xa4>)
    dc48:	461e      	mov	r6, r3
    dc4a:	3308      	adds	r3, #8
    dc4c:	460c      	mov	r4, r1
    dc4e:	2e09      	cmp	r6, #9
    dc50:	fb82 1203 	smull	r1, r2, r2, r3
    dc54:	ea4f 73e3 	mov.w	r3, r3, asr #31
    dc58:	4605      	mov	r5, r0
    dc5a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    dc5e:	dd39      	ble.n	dcd4 <__s2b+0x94>
    dc60:	f04f 0c01 	mov.w	ip, #1
    dc64:	2100      	movs	r1, #0
    dc66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    dc6a:	4563      	cmp	r3, ip
    dc6c:	f101 0101 	add.w	r1, r1, #1
    dc70:	dcf9      	bgt.n	dc66 <__s2b+0x26>
    dc72:	4628      	mov	r0, r5
    dc74:	f7ff ff62 	bl	db3c <_Balloc>
    dc78:	4601      	mov	r1, r0
    dc7a:	b368      	cbz	r0, dcd8 <__s2b+0x98>
    dc7c:	9b08      	ldr	r3, [sp, #32]
    dc7e:	6143      	str	r3, [r0, #20]
    dc80:	2f09      	cmp	r7, #9
    dc82:	f04f 0301 	mov.w	r3, #1
    dc86:	6103      	str	r3, [r0, #16]
    dc88:	dc12      	bgt.n	dcb0 <__s2b+0x70>
    dc8a:	340a      	adds	r4, #10
    dc8c:	2709      	movs	r7, #9
    dc8e:	42be      	cmp	r6, r7
    dc90:	dd0b      	ble.n	dcaa <__s2b+0x6a>
    dc92:	1bf2      	subs	r2, r6, r7
    dc94:	18a6      	adds	r6, r4, r2
    dc96:	f814 3b01 	ldrb.w	r3, [r4], #1
    dc9a:	220a      	movs	r2, #10
    dc9c:	3b30      	subs	r3, #48	; 0x30
    dc9e:	4628      	mov	r0, r5
    dca0:	f7ff ff7c 	bl	db9c <__multadd>
    dca4:	42a6      	cmp	r6, r4
    dca6:	4601      	mov	r1, r0
    dca8:	d1f5      	bne.n	dc96 <__s2b+0x56>
    dcaa:	4608      	mov	r0, r1
    dcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcb0:	f104 0909 	add.w	r9, r4, #9
    dcb4:	46c8      	mov	r8, r9
    dcb6:	443c      	add	r4, r7
    dcb8:	f818 3b01 	ldrb.w	r3, [r8], #1
    dcbc:	220a      	movs	r2, #10
    dcbe:	3b30      	subs	r3, #48	; 0x30
    dcc0:	4628      	mov	r0, r5
    dcc2:	f7ff ff6b 	bl	db9c <__multadd>
    dcc6:	45a0      	cmp	r8, r4
    dcc8:	4601      	mov	r1, r0
    dcca:	d1f5      	bne.n	dcb8 <__s2b+0x78>
    dccc:	f1a7 0408 	sub.w	r4, r7, #8
    dcd0:	444c      	add	r4, r9
    dcd2:	e7dc      	b.n	dc8e <__s2b+0x4e>
    dcd4:	2100      	movs	r1, #0
    dcd6:	e7cc      	b.n	dc72 <__s2b+0x32>
    dcd8:	460a      	mov	r2, r1
    dcda:	4b03      	ldr	r3, [pc, #12]	; (dce8 <__s2b+0xa8>)
    dcdc:	4803      	ldr	r0, [pc, #12]	; (dcec <__s2b+0xac>)
    dcde:	21d3      	movs	r1, #211	; 0xd3
    dce0:	f004 f81e 	bl	11d20 <__assert_func>
    dce4:	38e38e39 	.word	0x38e38e39
    dce8:	20000b7c 	.word	0x20000b7c
    dcec:	20000cf4 	.word	0x20000cf4

0000dcf0 <__hi0bits>:
    dcf0:	0c03      	lsrs	r3, r0, #16
    dcf2:	041b      	lsls	r3, r3, #16
    dcf4:	b9d3      	cbnz	r3, dd2c <__hi0bits+0x3c>
    dcf6:	0400      	lsls	r0, r0, #16
    dcf8:	2310      	movs	r3, #16
    dcfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    dcfe:	bf04      	itt	eq
    dd00:	0200      	lsleq	r0, r0, #8
    dd02:	3308      	addeq	r3, #8
    dd04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    dd08:	bf04      	itt	eq
    dd0a:	0100      	lsleq	r0, r0, #4
    dd0c:	3304      	addeq	r3, #4
    dd0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    dd12:	bf04      	itt	eq
    dd14:	0080      	lsleq	r0, r0, #2
    dd16:	3302      	addeq	r3, #2
    dd18:	2800      	cmp	r0, #0
    dd1a:	db05      	blt.n	dd28 <__hi0bits+0x38>
    dd1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    dd20:	f103 0301 	add.w	r3, r3, #1
    dd24:	bf08      	it	eq
    dd26:	2320      	moveq	r3, #32
    dd28:	4618      	mov	r0, r3
    dd2a:	4770      	bx	lr
    dd2c:	2300      	movs	r3, #0
    dd2e:	e7e4      	b.n	dcfa <__hi0bits+0xa>

0000dd30 <__lo0bits>:
    dd30:	6803      	ldr	r3, [r0, #0]
    dd32:	f013 0207 	ands.w	r2, r3, #7
    dd36:	d008      	beq.n	dd4a <__lo0bits+0x1a>
    dd38:	07d9      	lsls	r1, r3, #31
    dd3a:	d41f      	bmi.n	dd7c <__lo0bits+0x4c>
    dd3c:	079a      	lsls	r2, r3, #30
    dd3e:	d522      	bpl.n	dd86 <__lo0bits+0x56>
    dd40:	085b      	lsrs	r3, r3, #1
    dd42:	6003      	str	r3, [r0, #0]
    dd44:	2201      	movs	r2, #1
    dd46:	4610      	mov	r0, r2
    dd48:	4770      	bx	lr
    dd4a:	b299      	uxth	r1, r3
    dd4c:	b909      	cbnz	r1, dd52 <__lo0bits+0x22>
    dd4e:	0c1b      	lsrs	r3, r3, #16
    dd50:	2210      	movs	r2, #16
    dd52:	b2d9      	uxtb	r1, r3
    dd54:	b909      	cbnz	r1, dd5a <__lo0bits+0x2a>
    dd56:	3208      	adds	r2, #8
    dd58:	0a1b      	lsrs	r3, r3, #8
    dd5a:	0719      	lsls	r1, r3, #28
    dd5c:	bf04      	itt	eq
    dd5e:	091b      	lsreq	r3, r3, #4
    dd60:	3204      	addeq	r2, #4
    dd62:	0799      	lsls	r1, r3, #30
    dd64:	bf04      	itt	eq
    dd66:	089b      	lsreq	r3, r3, #2
    dd68:	3202      	addeq	r2, #2
    dd6a:	07d9      	lsls	r1, r3, #31
    dd6c:	d403      	bmi.n	dd76 <__lo0bits+0x46>
    dd6e:	085b      	lsrs	r3, r3, #1
    dd70:	f102 0201 	add.w	r2, r2, #1
    dd74:	d005      	beq.n	dd82 <__lo0bits+0x52>
    dd76:	6003      	str	r3, [r0, #0]
    dd78:	4610      	mov	r0, r2
    dd7a:	4770      	bx	lr
    dd7c:	2200      	movs	r2, #0
    dd7e:	4610      	mov	r0, r2
    dd80:	4770      	bx	lr
    dd82:	2220      	movs	r2, #32
    dd84:	e7df      	b.n	dd46 <__lo0bits+0x16>
    dd86:	089b      	lsrs	r3, r3, #2
    dd88:	2202      	movs	r2, #2
    dd8a:	6003      	str	r3, [r0, #0]
    dd8c:	4610      	mov	r0, r2
    dd8e:	4770      	bx	lr

0000dd90 <__i2b>:
    dd90:	b538      	push	{r3, r4, r5, lr}
    dd92:	6c43      	ldr	r3, [r0, #68]	; 0x44
    dd94:	4604      	mov	r4, r0
    dd96:	460d      	mov	r5, r1
    dd98:	b14b      	cbz	r3, ddae <__i2b+0x1e>
    dd9a:	6858      	ldr	r0, [r3, #4]
    dd9c:	b1b0      	cbz	r0, ddcc <__i2b+0x3c>
    dd9e:	6802      	ldr	r2, [r0, #0]
    dda0:	605a      	str	r2, [r3, #4]
    dda2:	2200      	movs	r2, #0
    dda4:	2301      	movs	r3, #1
    dda6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    ddaa:	60c2      	str	r2, [r0, #12]
    ddac:	bd38      	pop	{r3, r4, r5, pc}
    ddae:	2221      	movs	r2, #33	; 0x21
    ddb0:	2104      	movs	r1, #4
    ddb2:	f003 ffd5 	bl	11d60 <_calloc_r>
    ddb6:	4603      	mov	r3, r0
    ddb8:	6460      	str	r0, [r4, #68]	; 0x44
    ddba:	2800      	cmp	r0, #0
    ddbc:	d1ed      	bne.n	dd9a <__i2b+0xa>
    ddbe:	4b09      	ldr	r3, [pc, #36]	; (dde4 <__i2b+0x54>)
    ddc0:	4809      	ldr	r0, [pc, #36]	; (dde8 <__i2b+0x58>)
    ddc2:	2200      	movs	r2, #0
    ddc4:	f240 1145 	movw	r1, #325	; 0x145
    ddc8:	f003 ffaa 	bl	11d20 <__assert_func>
    ddcc:	221c      	movs	r2, #28
    ddce:	2101      	movs	r1, #1
    ddd0:	4620      	mov	r0, r4
    ddd2:	f003 ffc5 	bl	11d60 <_calloc_r>
    ddd6:	2800      	cmp	r0, #0
    ddd8:	d0f1      	beq.n	ddbe <__i2b+0x2e>
    ddda:	2201      	movs	r2, #1
    dddc:	2302      	movs	r3, #2
    ddde:	e9c0 2301 	strd	r2, r3, [r0, #4]
    dde2:	e7de      	b.n	dda2 <__i2b+0x12>
    dde4:	20000b7c 	.word	0x20000b7c
    dde8:	20000cf4 	.word	0x20000cf4

0000ddec <__multiply>:
    ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddf0:	690e      	ldr	r6, [r1, #16]
    ddf2:	6915      	ldr	r5, [r2, #16]
    ddf4:	42ae      	cmp	r6, r5
    ddf6:	b085      	sub	sp, #20
    ddf8:	4688      	mov	r8, r1
    ddfa:	4614      	mov	r4, r2
    ddfc:	db05      	blt.n	de0a <__multiply+0x1e>
    ddfe:	462a      	mov	r2, r5
    de00:	4623      	mov	r3, r4
    de02:	4635      	mov	r5, r6
    de04:	460c      	mov	r4, r1
    de06:	4616      	mov	r6, r2
    de08:	4698      	mov	r8, r3
    de0a:	68a3      	ldr	r3, [r4, #8]
    de0c:	6861      	ldr	r1, [r4, #4]
    de0e:	19af      	adds	r7, r5, r6
    de10:	42bb      	cmp	r3, r7
    de12:	bfb8      	it	lt
    de14:	3101      	addlt	r1, #1
    de16:	f7ff fe91 	bl	db3c <_Balloc>
    de1a:	9001      	str	r0, [sp, #4]
    de1c:	2800      	cmp	r0, #0
    de1e:	f000 8087 	beq.w	df30 <__multiply+0x144>
    de22:	9b01      	ldr	r3, [sp, #4]
    de24:	f103 0914 	add.w	r9, r3, #20
    de28:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    de2c:	45d1      	cmp	r9, sl
    de2e:	d205      	bcs.n	de3c <__multiply+0x50>
    de30:	464b      	mov	r3, r9
    de32:	2200      	movs	r2, #0
    de34:	f843 2b04 	str.w	r2, [r3], #4
    de38:	459a      	cmp	sl, r3
    de3a:	d8fb      	bhi.n	de34 <__multiply+0x48>
    de3c:	f108 0814 	add.w	r8, r8, #20
    de40:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    de44:	f104 0314 	add.w	r3, r4, #20
    de48:	45d8      	cmp	r8, fp
    de4a:	461a      	mov	r2, r3
    de4c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    de50:	d25f      	bcs.n	df12 <__multiply+0x126>
    de52:	1b2b      	subs	r3, r5, r4
    de54:	3b15      	subs	r3, #21
    de56:	f023 0303 	bic.w	r3, r3, #3
    de5a:	3304      	adds	r3, #4
    de5c:	3415      	adds	r4, #21
    de5e:	42a5      	cmp	r5, r4
    de60:	bf38      	it	cc
    de62:	2304      	movcc	r3, #4
    de64:	e9cd a702 	strd	sl, r7, [sp, #8]
    de68:	46ac      	mov	ip, r5
    de6a:	461f      	mov	r7, r3
    de6c:	4692      	mov	sl, r2
    de6e:	e005      	b.n	de7c <__multiply+0x90>
    de70:	0c09      	lsrs	r1, r1, #16
    de72:	d129      	bne.n	dec8 <__multiply+0xdc>
    de74:	45c3      	cmp	fp, r8
    de76:	f109 0904 	add.w	r9, r9, #4
    de7a:	d948      	bls.n	df0e <__multiply+0x122>
    de7c:	f858 1b04 	ldr.w	r1, [r8], #4
    de80:	b28d      	uxth	r5, r1
    de82:	2d00      	cmp	r5, #0
    de84:	d0f4      	beq.n	de70 <__multiply+0x84>
    de86:	4656      	mov	r6, sl
    de88:	464c      	mov	r4, r9
    de8a:	2300      	movs	r3, #0
    de8c:	f856 1b04 	ldr.w	r1, [r6], #4
    de90:	6822      	ldr	r2, [r4, #0]
    de92:	fa1f fe81 	uxth.w	lr, r1
    de96:	b290      	uxth	r0, r2
    de98:	0c09      	lsrs	r1, r1, #16
    de9a:	fb05 000e 	mla	r0, r5, lr, r0
    de9e:	0c12      	lsrs	r2, r2, #16
    dea0:	4403      	add	r3, r0
    dea2:	fb05 2201 	mla	r2, r5, r1, r2
    dea6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    deaa:	b29b      	uxth	r3, r3
    deac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    deb0:	45b4      	cmp	ip, r6
    deb2:	f844 3b04 	str.w	r3, [r4], #4
    deb6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    deba:	d8e7      	bhi.n	de8c <__multiply+0xa0>
    debc:	f849 3007 	str.w	r3, [r9, r7]
    dec0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    dec4:	0c09      	lsrs	r1, r1, #16
    dec6:	d0d5      	beq.n	de74 <__multiply+0x88>
    dec8:	f8d9 3000 	ldr.w	r3, [r9]
    decc:	4650      	mov	r0, sl
    dece:	461a      	mov	r2, r3
    ded0:	464c      	mov	r4, r9
    ded2:	2600      	movs	r6, #0
    ded4:	8805      	ldrh	r5, [r0, #0]
    ded6:	0c12      	lsrs	r2, r2, #16
    ded8:	fb01 2205 	mla	r2, r1, r5, r2
    dedc:	4416      	add	r6, r2
    dede:	b29b      	uxth	r3, r3
    dee0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    dee4:	f844 3b04 	str.w	r3, [r4], #4
    dee8:	f850 5b04 	ldr.w	r5, [r0], #4
    deec:	6822      	ldr	r2, [r4, #0]
    deee:	0c2d      	lsrs	r5, r5, #16
    def0:	b293      	uxth	r3, r2
    def2:	fb01 3305 	mla	r3, r1, r5, r3
    def6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    defa:	4584      	cmp	ip, r0
    defc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    df00:	d8e8      	bhi.n	ded4 <__multiply+0xe8>
    df02:	45c3      	cmp	fp, r8
    df04:	f849 3007 	str.w	r3, [r9, r7]
    df08:	f109 0904 	add.w	r9, r9, #4
    df0c:	d8b6      	bhi.n	de7c <__multiply+0x90>
    df0e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    df12:	2f00      	cmp	r7, #0
    df14:	dc02      	bgt.n	df1c <__multiply+0x130>
    df16:	e005      	b.n	df24 <__multiply+0x138>
    df18:	3f01      	subs	r7, #1
    df1a:	d003      	beq.n	df24 <__multiply+0x138>
    df1c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    df20:	2b00      	cmp	r3, #0
    df22:	d0f9      	beq.n	df18 <__multiply+0x12c>
    df24:	9b01      	ldr	r3, [sp, #4]
    df26:	4618      	mov	r0, r3
    df28:	611f      	str	r7, [r3, #16]
    df2a:	b005      	add	sp, #20
    df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df30:	4b03      	ldr	r3, [pc, #12]	; (df40 <__multiply+0x154>)
    df32:	4804      	ldr	r0, [pc, #16]	; (df44 <__multiply+0x158>)
    df34:	9a01      	ldr	r2, [sp, #4]
    df36:	f44f 71b1 	mov.w	r1, #354	; 0x162
    df3a:	f003 fef1 	bl	11d20 <__assert_func>
    df3e:	bf00      	nop
    df40:	20000b7c 	.word	0x20000b7c
    df44:	20000cf4 	.word	0x20000cf4

0000df48 <__pow5mult>:
    df48:	f012 0303 	ands.w	r3, r2, #3
    df4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df50:	4614      	mov	r4, r2
    df52:	4606      	mov	r6, r0
    df54:	d132      	bne.n	dfbc <__pow5mult+0x74>
    df56:	460d      	mov	r5, r1
    df58:	10a4      	asrs	r4, r4, #2
    df5a:	d020      	beq.n	df9e <__pow5mult+0x56>
    df5c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    df60:	f1b8 0f00 	cmp.w	r8, #0
    df64:	d033      	beq.n	dfce <__pow5mult+0x86>
    df66:	07e3      	lsls	r3, r4, #31
    df68:	f04f 0700 	mov.w	r7, #0
    df6c:	d407      	bmi.n	df7e <__pow5mult+0x36>
    df6e:	1064      	asrs	r4, r4, #1
    df70:	d015      	beq.n	df9e <__pow5mult+0x56>
    df72:	f8d8 0000 	ldr.w	r0, [r8]
    df76:	b1a8      	cbz	r0, dfa4 <__pow5mult+0x5c>
    df78:	4680      	mov	r8, r0
    df7a:	07e3      	lsls	r3, r4, #31
    df7c:	d5f7      	bpl.n	df6e <__pow5mult+0x26>
    df7e:	4642      	mov	r2, r8
    df80:	4629      	mov	r1, r5
    df82:	4630      	mov	r0, r6
    df84:	f7ff ff32 	bl	ddec <__multiply>
    df88:	b1b5      	cbz	r5, dfb8 <__pow5mult+0x70>
    df8a:	6869      	ldr	r1, [r5, #4]
    df8c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    df8e:	1064      	asrs	r4, r4, #1
    df90:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    df94:	602a      	str	r2, [r5, #0]
    df96:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    df9a:	4605      	mov	r5, r0
    df9c:	d1e9      	bne.n	df72 <__pow5mult+0x2a>
    df9e:	4628      	mov	r0, r5
    dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfa4:	4642      	mov	r2, r8
    dfa6:	4641      	mov	r1, r8
    dfa8:	4630      	mov	r0, r6
    dfaa:	f7ff ff1f 	bl	ddec <__multiply>
    dfae:	f8c8 0000 	str.w	r0, [r8]
    dfb2:	6007      	str	r7, [r0, #0]
    dfb4:	4680      	mov	r8, r0
    dfb6:	e7e0      	b.n	df7a <__pow5mult+0x32>
    dfb8:	4605      	mov	r5, r0
    dfba:	e7d8      	b.n	df6e <__pow5mult+0x26>
    dfbc:	3b01      	subs	r3, #1
    dfbe:	4a0f      	ldr	r2, [pc, #60]	; (dffc <__pow5mult+0xb4>)
    dfc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    dfc4:	2300      	movs	r3, #0
    dfc6:	f7ff fde9 	bl	db9c <__multadd>
    dfca:	4605      	mov	r5, r0
    dfcc:	e7c4      	b.n	df58 <__pow5mult+0x10>
    dfce:	2101      	movs	r1, #1
    dfd0:	4630      	mov	r0, r6
    dfd2:	f7ff fdb3 	bl	db3c <_Balloc>
    dfd6:	4680      	mov	r8, r0
    dfd8:	b140      	cbz	r0, dfec <__pow5mult+0xa4>
    dfda:	2301      	movs	r3, #1
    dfdc:	f240 2271 	movw	r2, #625	; 0x271
    dfe0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    dfe4:	2300      	movs	r3, #0
    dfe6:	6430      	str	r0, [r6, #64]	; 0x40
    dfe8:	6003      	str	r3, [r0, #0]
    dfea:	e7bc      	b.n	df66 <__pow5mult+0x1e>
    dfec:	4b04      	ldr	r3, [pc, #16]	; (e000 <__pow5mult+0xb8>)
    dfee:	4805      	ldr	r0, [pc, #20]	; (e004 <__pow5mult+0xbc>)
    dff0:	4642      	mov	r2, r8
    dff2:	f240 1145 	movw	r1, #325	; 0x145
    dff6:	f003 fe93 	bl	11d20 <__assert_func>
    dffa:	bf00      	nop
    dffc:	20007d44 	.word	0x20007d44
    e000:	20000b7c 	.word	0x20000b7c
    e004:	20000cf4 	.word	0x20000cf4

0000e008 <__lshift>:
    e008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e00c:	460d      	mov	r5, r1
    e00e:	4614      	mov	r4, r2
    e010:	692f      	ldr	r7, [r5, #16]
    e012:	68ab      	ldr	r3, [r5, #8]
    e014:	6849      	ldr	r1, [r1, #4]
    e016:	eb07 1762 	add.w	r7, r7, r2, asr #5
    e01a:	1c7e      	adds	r6, r7, #1
    e01c:	429e      	cmp	r6, r3
    e01e:	4680      	mov	r8, r0
    e020:	ea4f 1962 	mov.w	r9, r2, asr #5
    e024:	dd04      	ble.n	e030 <__lshift+0x28>
    e026:	005b      	lsls	r3, r3, #1
    e028:	429e      	cmp	r6, r3
    e02a:	f101 0101 	add.w	r1, r1, #1
    e02e:	dcfa      	bgt.n	e026 <__lshift+0x1e>
    e030:	4640      	mov	r0, r8
    e032:	f7ff fd83 	bl	db3c <_Balloc>
    e036:	4684      	mov	ip, r0
    e038:	2800      	cmp	r0, #0
    e03a:	d052      	beq.n	e0e2 <__lshift+0xda>
    e03c:	f1b9 0f00 	cmp.w	r9, #0
    e040:	f100 0214 	add.w	r2, r0, #20
    e044:	dd0e      	ble.n	e064 <__lshift+0x5c>
    e046:	f109 0105 	add.w	r1, r9, #5
    e04a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    e04e:	4613      	mov	r3, r2
    e050:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    e054:	2000      	movs	r0, #0
    e056:	f843 0b04 	str.w	r0, [r3], #4
    e05a:	428b      	cmp	r3, r1
    e05c:	d1fb      	bne.n	e056 <__lshift+0x4e>
    e05e:	f1ae 0314 	sub.w	r3, lr, #20
    e062:	441a      	add	r2, r3
    e064:	6929      	ldr	r1, [r5, #16]
    e066:	f105 0314 	add.w	r3, r5, #20
    e06a:	f014 0e1f 	ands.w	lr, r4, #31
    e06e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e072:	d02e      	beq.n	e0d2 <__lshift+0xca>
    e074:	f1ce 0920 	rsb	r9, lr, #32
    e078:	4610      	mov	r0, r2
    e07a:	f04f 0a00 	mov.w	sl, #0
    e07e:	681c      	ldr	r4, [r3, #0]
    e080:	fa04 f40e 	lsl.w	r4, r4, lr
    e084:	ea44 040a 	orr.w	r4, r4, sl
    e088:	f840 4b04 	str.w	r4, [r0], #4
    e08c:	f853 4b04 	ldr.w	r4, [r3], #4
    e090:	4299      	cmp	r1, r3
    e092:	fa24 fa09 	lsr.w	sl, r4, r9
    e096:	d8f2      	bhi.n	e07e <__lshift+0x76>
    e098:	1b4b      	subs	r3, r1, r5
    e09a:	3b15      	subs	r3, #21
    e09c:	f023 0303 	bic.w	r3, r3, #3
    e0a0:	3304      	adds	r3, #4
    e0a2:	f105 0015 	add.w	r0, r5, #21
    e0a6:	4281      	cmp	r1, r0
    e0a8:	bf38      	it	cc
    e0aa:	2304      	movcc	r3, #4
    e0ac:	f1ba 0f00 	cmp.w	sl, #0
    e0b0:	bf18      	it	ne
    e0b2:	4637      	movne	r7, r6
    e0b4:	f842 a003 	str.w	sl, [r2, r3]
    e0b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    e0bc:	686a      	ldr	r2, [r5, #4]
    e0be:	f8cc 7010 	str.w	r7, [ip, #16]
    e0c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e0c6:	6029      	str	r1, [r5, #0]
    e0c8:	4660      	mov	r0, ip
    e0ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    e0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0d2:	3a04      	subs	r2, #4
    e0d4:	f853 0b04 	ldr.w	r0, [r3], #4
    e0d8:	f842 0f04 	str.w	r0, [r2, #4]!
    e0dc:	4299      	cmp	r1, r3
    e0de:	d8f9      	bhi.n	e0d4 <__lshift+0xcc>
    e0e0:	e7ea      	b.n	e0b8 <__lshift+0xb0>
    e0e2:	4b03      	ldr	r3, [pc, #12]	; (e0f0 <__lshift+0xe8>)
    e0e4:	4803      	ldr	r0, [pc, #12]	; (e0f4 <__lshift+0xec>)
    e0e6:	4662      	mov	r2, ip
    e0e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    e0ec:	f003 fe18 	bl	11d20 <__assert_func>
    e0f0:	20000b7c 	.word	0x20000b7c
    e0f4:	20000cf4 	.word	0x20000cf4

0000e0f8 <__mcmp>:
    e0f8:	690b      	ldr	r3, [r1, #16]
    e0fa:	4684      	mov	ip, r0
    e0fc:	6900      	ldr	r0, [r0, #16]
    e0fe:	1ac0      	subs	r0, r0, r3
    e100:	d116      	bne.n	e130 <__mcmp+0x38>
    e102:	f10c 0c14 	add.w	ip, ip, #20
    e106:	3114      	adds	r1, #20
    e108:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    e10c:	b410      	push	{r4}
    e10e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    e112:	e001      	b.n	e118 <__mcmp+0x20>
    e114:	4594      	cmp	ip, r2
    e116:	d208      	bcs.n	e12a <__mcmp+0x32>
    e118:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e11c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e120:	428c      	cmp	r4, r1
    e122:	d0f7      	beq.n	e114 <__mcmp+0x1c>
    e124:	d205      	bcs.n	e132 <__mcmp+0x3a>
    e126:	f04f 30ff 	mov.w	r0, #4294967295
    e12a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e12e:	4770      	bx	lr
    e130:	4770      	bx	lr
    e132:	2001      	movs	r0, #1
    e134:	f85d 4b04 	ldr.w	r4, [sp], #4
    e138:	4770      	bx	lr
    e13a:	bf00      	nop

0000e13c <__mdiff>:
    e13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e140:	690f      	ldr	r7, [r1, #16]
    e142:	6913      	ldr	r3, [r2, #16]
    e144:	1aff      	subs	r7, r7, r3
    e146:	2f00      	cmp	r7, #0
    e148:	460e      	mov	r6, r1
    e14a:	4690      	mov	r8, r2
    e14c:	d17f      	bne.n	e24e <__mdiff+0x112>
    e14e:	f101 0514 	add.w	r5, r1, #20
    e152:	3214      	adds	r2, #20
    e154:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e158:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e15c:	e001      	b.n	e162 <__mdiff+0x26>
    e15e:	429d      	cmp	r5, r3
    e160:	d278      	bcs.n	e254 <__mdiff+0x118>
    e162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e166:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e16a:	42a1      	cmp	r1, r4
    e16c:	d0f7      	beq.n	e15e <__mdiff+0x22>
    e16e:	d369      	bcc.n	e244 <__mdiff+0x108>
    e170:	6871      	ldr	r1, [r6, #4]
    e172:	f7ff fce3 	bl	db3c <_Balloc>
    e176:	4681      	mov	r9, r0
    e178:	2800      	cmp	r0, #0
    e17a:	d077      	beq.n	e26c <__mdiff+0x130>
    e17c:	6935      	ldr	r5, [r6, #16]
    e17e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    e182:	60c7      	str	r7, [r0, #12]
    e184:	f108 0e14 	add.w	lr, r8, #20
    e188:	f106 0014 	add.w	r0, r6, #20
    e18c:	f109 0a14 	add.w	sl, r9, #20
    e190:	f106 0110 	add.w	r1, r6, #16
    e194:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    e198:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    e19c:	4656      	mov	r6, sl
    e19e:	f04f 0c00 	mov.w	ip, #0
    e1a2:	f85e 4b04 	ldr.w	r4, [lr], #4
    e1a6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    e1aa:	b2a3      	uxth	r3, r4
    e1ac:	fa1c fc8b 	uxtah	ip, ip, fp
    e1b0:	ebac 0303 	sub.w	r3, ip, r3
    e1b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    e1b8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    e1bc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    e1c0:	b29b      	uxth	r3, r3
    e1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    e1c6:	4572      	cmp	r2, lr
    e1c8:	f846 3b04 	str.w	r3, [r6], #4
    e1cc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    e1d0:	d8e7      	bhi.n	e1a2 <__mdiff+0x66>
    e1d2:	eba2 0108 	sub.w	r1, r2, r8
    e1d6:	3915      	subs	r1, #21
    e1d8:	f108 0815 	add.w	r8, r8, #21
    e1dc:	4542      	cmp	r2, r8
    e1de:	f021 0403 	bic.w	r4, r1, #3
    e1e2:	f104 0404 	add.w	r4, r4, #4
    e1e6:	bf38      	it	cc
    e1e8:	2404      	movcc	r4, #4
    e1ea:	4420      	add	r0, r4
    e1ec:	f021 0203 	bic.w	r2, r1, #3
    e1f0:	bf38      	it	cc
    e1f2:	2200      	movcc	r2, #0
    e1f4:	4287      	cmp	r7, r0
    e1f6:	4452      	add	r2, sl
    e1f8:	4454      	add	r4, sl
    e1fa:	d918      	bls.n	e22e <__mdiff+0xf2>
    e1fc:	4626      	mov	r6, r4
    e1fe:	4601      	mov	r1, r0
    e200:	f851 3b04 	ldr.w	r3, [r1], #4
    e204:	fa1c fc83 	uxtah	ip, ip, r3
    e208:	ea4f 422c 	mov.w	r2, ip, asr #16
    e20c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e210:	fa1f fc8c 	uxth.w	ip, ip
    e214:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    e218:	428f      	cmp	r7, r1
    e21a:	f846 3b04 	str.w	r3, [r6], #4
    e21e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    e222:	d8ed      	bhi.n	e200 <__mdiff+0xc4>
    e224:	3f01      	subs	r7, #1
    e226:	1a3f      	subs	r7, r7, r0
    e228:	f027 0703 	bic.w	r7, r7, #3
    e22c:	19e2      	adds	r2, r4, r7
    e22e:	b923      	cbnz	r3, e23a <__mdiff+0xfe>
    e230:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    e234:	3d01      	subs	r5, #1
    e236:	2b00      	cmp	r3, #0
    e238:	d0fa      	beq.n	e230 <__mdiff+0xf4>
    e23a:	f8c9 5010 	str.w	r5, [r9, #16]
    e23e:	4648      	mov	r0, r9
    e240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e244:	4633      	mov	r3, r6
    e246:	2701      	movs	r7, #1
    e248:	4646      	mov	r6, r8
    e24a:	4698      	mov	r8, r3
    e24c:	e790      	b.n	e170 <__mdiff+0x34>
    e24e:	dbf9      	blt.n	e244 <__mdiff+0x108>
    e250:	2700      	movs	r7, #0
    e252:	e78d      	b.n	e170 <__mdiff+0x34>
    e254:	2100      	movs	r1, #0
    e256:	f7ff fc71 	bl	db3c <_Balloc>
    e25a:	4681      	mov	r9, r0
    e25c:	b168      	cbz	r0, e27a <__mdiff+0x13e>
    e25e:	2201      	movs	r2, #1
    e260:	2300      	movs	r3, #0
    e262:	e9c9 2304 	strd	r2, r3, [r9, #16]
    e266:	4648      	mov	r0, r9
    e268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e26c:	4b06      	ldr	r3, [pc, #24]	; (e288 <__mdiff+0x14c>)
    e26e:	4807      	ldr	r0, [pc, #28]	; (e28c <__mdiff+0x150>)
    e270:	464a      	mov	r2, r9
    e272:	f240 2145 	movw	r1, #581	; 0x245
    e276:	f003 fd53 	bl	11d20 <__assert_func>
    e27a:	4b03      	ldr	r3, [pc, #12]	; (e288 <__mdiff+0x14c>)
    e27c:	4803      	ldr	r0, [pc, #12]	; (e28c <__mdiff+0x150>)
    e27e:	464a      	mov	r2, r9
    e280:	f240 2137 	movw	r1, #567	; 0x237
    e284:	f003 fd4c 	bl	11d20 <__assert_func>
    e288:	20000b7c 	.word	0x20000b7c
    e28c:	20000cf4 	.word	0x20000cf4

0000e290 <__ulp>:
    e290:	b082      	sub	sp, #8
    e292:	ed8d 0b00 	vstr	d0, [sp]
    e296:	4b16      	ldr	r3, [pc, #88]	; (e2f0 <__ulp+0x60>)
    e298:	9a01      	ldr	r2, [sp, #4]
    e29a:	4013      	ands	r3, r2
    e29c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	dd06      	ble.n	e2b2 <__ulp+0x22>
    e2a4:	2200      	movs	r2, #0
    e2a6:	4619      	mov	r1, r3
    e2a8:	4610      	mov	r0, r2
    e2aa:	ec41 0b10 	vmov	d0, r0, r1
    e2ae:	b002      	add	sp, #8
    e2b0:	4770      	bx	lr
    e2b2:	425b      	negs	r3, r3
    e2b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    e2b8:	ea4f 5223 	mov.w	r2, r3, asr #20
    e2bc:	da09      	bge.n	e2d2 <__ulp+0x42>
    e2be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    e2c2:	4113      	asrs	r3, r2
    e2c4:	2200      	movs	r2, #0
    e2c6:	4619      	mov	r1, r3
    e2c8:	4610      	mov	r0, r2
    e2ca:	ec41 0b10 	vmov	d0, r0, r1
    e2ce:	b002      	add	sp, #8
    e2d0:	4770      	bx	lr
    e2d2:	f1a2 0314 	sub.w	r3, r2, #20
    e2d6:	2b1e      	cmp	r3, #30
    e2d8:	bfda      	itte	le
    e2da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    e2de:	40da      	lsrle	r2, r3
    e2e0:	2201      	movgt	r2, #1
    e2e2:	2300      	movs	r3, #0
    e2e4:	4619      	mov	r1, r3
    e2e6:	4610      	mov	r0, r2
    e2e8:	ec41 0b10 	vmov	d0, r0, r1
    e2ec:	b002      	add	sp, #8
    e2ee:	4770      	bx	lr
    e2f0:	7ff00000 	.word	0x7ff00000

0000e2f4 <__b2d>:
    e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2f6:	6904      	ldr	r4, [r0, #16]
    e2f8:	f100 0614 	add.w	r6, r0, #20
    e2fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    e300:	1f27      	subs	r7, r4, #4
    e302:	f854 5c04 	ldr.w	r5, [r4, #-4]
    e306:	4628      	mov	r0, r5
    e308:	f7ff fcf2 	bl	dcf0 <__hi0bits>
    e30c:	f1c0 0320 	rsb	r3, r0, #32
    e310:	280a      	cmp	r0, #10
    e312:	600b      	str	r3, [r1, #0]
    e314:	dd1b      	ble.n	e34e <__b2d+0x5a>
    e316:	42be      	cmp	r6, r7
    e318:	d20b      	bcs.n	e332 <__b2d+0x3e>
    e31a:	380b      	subs	r0, #11
    e31c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    e320:	d12e      	bne.n	e380 <__b2d+0x8c>
    e322:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    e326:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e32a:	460a      	mov	r2, r1
    e32c:	ec43 2b10 	vmov	d0, r2, r3
    e330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e332:	f1b0 010b 	subs.w	r1, r0, #11
    e336:	d0f4      	beq.n	e322 <__b2d+0x2e>
    e338:	fa05 f101 	lsl.w	r1, r5, r1
    e33c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    e340:	2100      	movs	r1, #0
    e342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e346:	460a      	mov	r2, r1
    e348:	ec43 2b10 	vmov	d0, r2, r3
    e34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e34e:	f1c0 0c0b 	rsb	ip, r0, #11
    e352:	fa25 f10c 	lsr.w	r1, r5, ip
    e356:	42be      	cmp	r6, r7
    e358:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    e35c:	bf38      	it	cc
    e35e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    e362:	f100 0015 	add.w	r0, r0, #21
    e366:	bf34      	ite	cc
    e368:	fa21 f10c 	lsrcc.w	r1, r1, ip
    e36c:	2100      	movcs	r1, #0
    e36e:	fa05 f000 	lsl.w	r0, r5, r0
    e372:	4301      	orrs	r1, r0
    e374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e378:	460a      	mov	r2, r1
    e37a:	ec43 2b10 	vmov	d0, r2, r3
    e37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e380:	f1c0 0c20 	rsb	ip, r0, #32
    e384:	4085      	lsls	r5, r0
    e386:	fa21 f30c 	lsr.w	r3, r1, ip
    e38a:	ea45 0703 	orr.w	r7, r5, r3
    e38e:	f1a4 0508 	sub.w	r5, r4, #8
    e392:	42ae      	cmp	r6, r5
    e394:	fa01 f100 	lsl.w	r1, r1, r0
    e398:	bf3c      	itt	cc
    e39a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    e39e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    e3a2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    e3a6:	bf38      	it	cc
    e3a8:	4301      	orrcc	r1, r0
    e3aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e3ae:	460a      	mov	r2, r1
    e3b0:	ec43 2b10 	vmov	d0, r2, r3
    e3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3b6:	bf00      	nop

0000e3b8 <__d2b>:
    e3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e3bc:	4688      	mov	r8, r1
    e3be:	b083      	sub	sp, #12
    e3c0:	2101      	movs	r1, #1
    e3c2:	ec57 6b10 	vmov	r6, r7, d0
    e3c6:	4615      	mov	r5, r2
    e3c8:	f7ff fbb8 	bl	db3c <_Balloc>
    e3cc:	4604      	mov	r4, r0
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d051      	beq.n	e476 <__d2b+0xbe>
    e3d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    e3d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    e3da:	f1b9 0f00 	cmp.w	r9, #0
    e3de:	d001      	beq.n	e3e4 <__d2b+0x2c>
    e3e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e3e4:	2e00      	cmp	r6, #0
    e3e6:	9301      	str	r3, [sp, #4]
    e3e8:	d118      	bne.n	e41c <__d2b+0x64>
    e3ea:	a801      	add	r0, sp, #4
    e3ec:	f7ff fca0 	bl	dd30 <__lo0bits>
    e3f0:	9a01      	ldr	r2, [sp, #4]
    e3f2:	6162      	str	r2, [r4, #20]
    e3f4:	2201      	movs	r2, #1
    e3f6:	f100 0320 	add.w	r3, r0, #32
    e3fa:	6122      	str	r2, [r4, #16]
    e3fc:	f1b9 0f00 	cmp.w	r9, #0
    e400:	d025      	beq.n	e44e <__d2b+0x96>
    e402:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    e406:	eb09 0203 	add.w	r2, r9, r3
    e40a:	4620      	mov	r0, r4
    e40c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    e410:	f8c8 2000 	str.w	r2, [r8]
    e414:	602b      	str	r3, [r5, #0]
    e416:	b003      	add	sp, #12
    e418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e41c:	4668      	mov	r0, sp
    e41e:	9600      	str	r6, [sp, #0]
    e420:	f7ff fc86 	bl	dd30 <__lo0bits>
    e424:	4603      	mov	r3, r0
    e426:	b310      	cbz	r0, e46e <__d2b+0xb6>
    e428:	e9dd 0200 	ldrd	r0, r2, [sp]
    e42c:	f1c3 0120 	rsb	r1, r3, #32
    e430:	fa02 f101 	lsl.w	r1, r2, r1
    e434:	4301      	orrs	r1, r0
    e436:	40da      	lsrs	r2, r3
    e438:	6161      	str	r1, [r4, #20]
    e43a:	9201      	str	r2, [sp, #4]
    e43c:	2a00      	cmp	r2, #0
    e43e:	61a2      	str	r2, [r4, #24]
    e440:	bf14      	ite	ne
    e442:	2202      	movne	r2, #2
    e444:	2201      	moveq	r2, #1
    e446:	6122      	str	r2, [r4, #16]
    e448:	f1b9 0f00 	cmp.w	r9, #0
    e44c:	d1d9      	bne.n	e402 <__d2b+0x4a>
    e44e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    e452:	f8c8 3000 	str.w	r3, [r8]
    e456:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    e45a:	6918      	ldr	r0, [r3, #16]
    e45c:	f7ff fc48 	bl	dcf0 <__hi0bits>
    e460:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    e464:	4620      	mov	r0, r4
    e466:	602b      	str	r3, [r5, #0]
    e468:	b003      	add	sp, #12
    e46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e46e:	9a00      	ldr	r2, [sp, #0]
    e470:	6162      	str	r2, [r4, #20]
    e472:	9a01      	ldr	r2, [sp, #4]
    e474:	e7e2      	b.n	e43c <__d2b+0x84>
    e476:	4b03      	ldr	r3, [pc, #12]	; (e484 <__d2b+0xcc>)
    e478:	4803      	ldr	r0, [pc, #12]	; (e488 <__d2b+0xd0>)
    e47a:	4622      	mov	r2, r4
    e47c:	f240 310f 	movw	r1, #783	; 0x30f
    e480:	f003 fc4e 	bl	11d20 <__assert_func>
    e484:	20000b7c 	.word	0x20000b7c
    e488:	20000cf4 	.word	0x20000cf4

0000e48c <__ratio>:
    e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e48e:	b083      	sub	sp, #12
    e490:	460e      	mov	r6, r1
    e492:	4669      	mov	r1, sp
    e494:	4607      	mov	r7, r0
    e496:	f7ff ff2d 	bl	e2f4 <__b2d>
    e49a:	a901      	add	r1, sp, #4
    e49c:	4630      	mov	r0, r6
    e49e:	ec55 4b10 	vmov	r4, r5, d0
    e4a2:	eeb0 7b40 	vmov.f64	d7, d0
    e4a6:	f7ff ff25 	bl	e2f4 <__b2d>
    e4aa:	6933      	ldr	r3, [r6, #16]
    e4ac:	693a      	ldr	r2, [r7, #16]
    e4ae:	1ad2      	subs	r2, r2, r3
    e4b0:	e9dd 3100 	ldrd	r3, r1, [sp]
    e4b4:	1a5b      	subs	r3, r3, r1
    e4b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    e4ba:	2b00      	cmp	r3, #0
    e4bc:	dd09      	ble.n	e4d2 <__ratio+0x46>
    e4be:	ee17 2a90 	vmov	r2, s15
    e4c2:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    e4c6:	ec45 4b17 	vmov	d7, r4, r5
    e4ca:	ee87 0b00 	vdiv.f64	d0, d7, d0
    e4ce:	b003      	add	sp, #12
    e4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4d2:	ee10 2a90 	vmov	r2, s1
    e4d6:	ec51 0b10 	vmov	r0, r1, d0
    e4da:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    e4de:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    e4e2:	ec41 0b10 	vmov	d0, r0, r1
    e4e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    e4ea:	b003      	add	sp, #12
    e4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4ee:	bf00      	nop

0000e4f0 <__copybits>:
    e4f0:	3901      	subs	r1, #1
    e4f2:	1149      	asrs	r1, r1, #5
    e4f4:	f101 0c01 	add.w	ip, r1, #1
    e4f8:	6911      	ldr	r1, [r2, #16]
    e4fa:	f102 0314 	add.w	r3, r2, #20
    e4fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e502:	428b      	cmp	r3, r1
    e504:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    e508:	d217      	bcs.n	e53a <__copybits+0x4a>
    e50a:	b510      	push	{r4, lr}
    e50c:	f1a0 0e04 	sub.w	lr, r0, #4
    e510:	f853 4b04 	ldr.w	r4, [r3], #4
    e514:	f84e 4f04 	str.w	r4, [lr, #4]!
    e518:	4299      	cmp	r1, r3
    e51a:	d8f9      	bhi.n	e510 <__copybits+0x20>
    e51c:	1a8a      	subs	r2, r1, r2
    e51e:	f1a2 0315 	sub.w	r3, r2, #21
    e522:	f023 0303 	bic.w	r3, r3, #3
    e526:	3304      	adds	r3, #4
    e528:	4418      	add	r0, r3
    e52a:	4584      	cmp	ip, r0
    e52c:	d904      	bls.n	e538 <__copybits+0x48>
    e52e:	2300      	movs	r3, #0
    e530:	f840 3b04 	str.w	r3, [r0], #4
    e534:	4584      	cmp	ip, r0
    e536:	d8fb      	bhi.n	e530 <__copybits+0x40>
    e538:	bd10      	pop	{r4, pc}
    e53a:	4584      	cmp	ip, r0
    e53c:	d905      	bls.n	e54a <__copybits+0x5a>
    e53e:	2300      	movs	r3, #0
    e540:	f840 3b04 	str.w	r3, [r0], #4
    e544:	4584      	cmp	ip, r0
    e546:	d8fb      	bhi.n	e540 <__copybits+0x50>
    e548:	4770      	bx	lr
    e54a:	4770      	bx	lr

0000e54c <__any_on>:
    e54c:	6903      	ldr	r3, [r0, #16]
    e54e:	114a      	asrs	r2, r1, #5
    e550:	4293      	cmp	r3, r2
    e552:	f100 0014 	add.w	r0, r0, #20
    e556:	da09      	bge.n	e56c <__any_on+0x20>
    e558:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    e55c:	e002      	b.n	e564 <__any_on+0x18>
    e55e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    e562:	b9c2      	cbnz	r2, e596 <__any_on+0x4a>
    e564:	4283      	cmp	r3, r0
    e566:	d8fa      	bhi.n	e55e <__any_on+0x12>
    e568:	2000      	movs	r0, #0
    e56a:	4770      	bx	lr
    e56c:	dd10      	ble.n	e590 <__any_on+0x44>
    e56e:	f011 011f 	ands.w	r1, r1, #31
    e572:	d00d      	beq.n	e590 <__any_on+0x44>
    e574:	b410      	push	{r4}
    e576:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    e57a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e57e:	fa24 f201 	lsr.w	r2, r4, r1
    e582:	408a      	lsls	r2, r1
    e584:	4294      	cmp	r4, r2
    e586:	d00c      	beq.n	e5a2 <__any_on+0x56>
    e588:	2001      	movs	r0, #1
    e58a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e58e:	4770      	bx	lr
    e590:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e594:	e7e6      	b.n	e564 <__any_on+0x18>
    e596:	2001      	movs	r0, #1
    e598:	4770      	bx	lr
    e59a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    e59e:	2a00      	cmp	r2, #0
    e5a0:	d1f2      	bne.n	e588 <__any_on+0x3c>
    e5a2:	4283      	cmp	r3, r0
    e5a4:	d8f9      	bhi.n	e59a <__any_on+0x4e>
    e5a6:	2000      	movs	r0, #0
    e5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    e5ac:	4770      	bx	lr
    e5ae:	bf00      	nop

0000e5b0 <__ascii_wctomb>:
    e5b0:	b149      	cbz	r1, e5c6 <__ascii_wctomb+0x16>
    e5b2:	2aff      	cmp	r2, #255	; 0xff
    e5b4:	d802      	bhi.n	e5bc <__ascii_wctomb+0xc>
    e5b6:	700a      	strb	r2, [r1, #0]
    e5b8:	2001      	movs	r0, #1
    e5ba:	4770      	bx	lr
    e5bc:	238a      	movs	r3, #138	; 0x8a
    e5be:	6003      	str	r3, [r0, #0]
    e5c0:	f04f 30ff 	mov.w	r0, #4294967295
    e5c4:	4770      	bx	lr
    e5c6:	4608      	mov	r0, r1
    e5c8:	4770      	bx	lr
    e5ca:	bf00      	nop
    e5cc:	0000      	movs	r0, r0
	...

0000e5d0 <_svfprintf_r>:
    e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5d4:	ed2d 8b08 	vpush	{d8-d11}
    e5d8:	b0d1      	sub	sp, #324	; 0x144
    e5da:	460c      	mov	r4, r1
    e5dc:	ee0b 1a10 	vmov	s22, r1
    e5e0:	4690      	mov	r8, r2
    e5e2:	9308      	str	r3, [sp, #32]
    e5e4:	4683      	mov	fp, r0
    e5e6:	f003 fb59 	bl	11c9c <_localeconv_r>
    e5ea:	6803      	ldr	r3, [r0, #0]
    e5ec:	9312      	str	r3, [sp, #72]	; 0x48
    e5ee:	4618      	mov	r0, r3
    e5f0:	f7fe fc66 	bl	cec0 <strlen>
    e5f4:	af20      	add	r7, sp, #128	; 0x80
    e5f6:	9010      	str	r0, [sp, #64]	; 0x40
    e5f8:	2208      	movs	r2, #8
    e5fa:	2100      	movs	r1, #0
    e5fc:	4638      	mov	r0, r7
    e5fe:	f7fe f921 	bl	c844 <memset>
    e602:	89a3      	ldrh	r3, [r4, #12]
    e604:	061b      	lsls	r3, r3, #24
    e606:	d503      	bpl.n	e610 <_svfprintf_r+0x40>
    e608:	6923      	ldr	r3, [r4, #16]
    e60a:	2b00      	cmp	r3, #0
    e60c:	f000 8755 	beq.w	f4ba <_svfprintf_r+0xeea>
    e610:	2300      	movs	r3, #0
    e612:	ed9f 8b83 	vldr	d8, [pc, #524]	; e820 <_svfprintf_r+0x250>
    e616:	ed9f 9b84 	vldr	d9, [pc, #528]	; e828 <_svfprintf_r+0x258>
    e61a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    e61e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    e622:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e626:	aa27      	add	r2, sp, #156	; 0x9c
    e628:	930e      	str	r3, [sp, #56]	; 0x38
    e62a:	9224      	str	r2, [sp, #144]	; 0x90
    e62c:	4692      	mov	sl, r2
    e62e:	9311      	str	r3, [sp, #68]	; 0x44
    e630:	9304      	str	r3, [sp, #16]
    e632:	4644      	mov	r4, r8
    e634:	46a1      	mov	r9, r4
    e636:	4b7e      	ldr	r3, [pc, #504]	; (e830 <_svfprintf_r+0x260>)
    e638:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    e63c:	f7fe f9cc 	bl	c9d8 <__locale_mb_cur_max>
    e640:	464a      	mov	r2, r9
    e642:	4603      	mov	r3, r0
    e644:	a91c      	add	r1, sp, #112	; 0x70
    e646:	9700      	str	r7, [sp, #0]
    e648:	4658      	mov	r0, fp
    e64a:	47a8      	blx	r5
    e64c:	2800      	cmp	r0, #0
    e64e:	f000 80b0 	beq.w	e7b2 <_svfprintf_r+0x1e2>
    e652:	f2c0 80a6 	blt.w	e7a2 <_svfprintf_r+0x1d2>
    e656:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e658:	2a25      	cmp	r2, #37	; 0x25
    e65a:	4603      	mov	r3, r0
    e65c:	d001      	beq.n	e662 <_svfprintf_r+0x92>
    e65e:	4499      	add	r9, r3
    e660:	e7e9      	b.n	e636 <_svfprintf_r+0x66>
    e662:	ebb9 0504 	subs.w	r5, r9, r4
    e666:	4606      	mov	r6, r0
    e668:	f040 80a7 	bne.w	e7ba <_svfprintf_r+0x1ea>
    e66c:	2300      	movs	r3, #0
    e66e:	f04f 32ff 	mov.w	r2, #4294967295
    e672:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e676:	4698      	mov	r8, r3
    e678:	9306      	str	r3, [sp, #24]
    e67a:	f109 0901 	add.w	r9, r9, #1
    e67e:	f899 3000 	ldrb.w	r3, [r9]
    e682:	9203      	str	r2, [sp, #12]
    e684:	252b      	movs	r5, #43	; 0x2b
    e686:	2620      	movs	r6, #32
    e688:	f109 0901 	add.w	r9, r9, #1
    e68c:	f1a3 0220 	sub.w	r2, r3, #32
    e690:	2a5a      	cmp	r2, #90	; 0x5a
    e692:	f200 80cf 	bhi.w	e834 <_svfprintf_r+0x264>
    e696:	e8df f012 	tbh	[pc, r2, lsl #1]
    e69a:	02e8      	.short	0x02e8
    e69c:	00cd00cd 	.word	0x00cd00cd
    e6a0:	00cd02e3 	.word	0x00cd02e3
    e6a4:	00cd00cd 	.word	0x00cd00cd
    e6a8:	00cd006a 	.word	0x00cd006a
    e6ac:	020500cd 	.word	0x020500cd
    e6b0:	00cd0284 	.word	0x00cd0284
    e6b4:	02c90210 	.word	0x02c90210
    e6b8:	02bd00cd 	.word	0x02bd00cd
    e6bc:	005b005b 	.word	0x005b005b
    e6c0:	005b005b 	.word	0x005b005b
    e6c4:	005b005b 	.word	0x005b005b
    e6c8:	005b005b 	.word	0x005b005b
    e6cc:	00cd005b 	.word	0x00cd005b
    e6d0:	00cd00cd 	.word	0x00cd00cd
    e6d4:	00cd00cd 	.word	0x00cd00cd
    e6d8:	00cd00cd 	.word	0x00cd00cd
    e6dc:	00cd0153 	.word	0x00cd0153
    e6e0:	021a0183 	.word	0x021a0183
    e6e4:	01530153 	.word	0x01530153
    e6e8:	00cd0153 	.word	0x00cd0153
    e6ec:	00cd00cd 	.word	0x00cd00cd
    e6f0:	021500cd 	.word	0x021500cd
    e6f4:	00cd00cd 	.word	0x00cd00cd
    e6f8:	00cd0296 	.word	0x00cd0296
    e6fc:	00cd00cd 	.word	0x00cd00cd
    e700:	00cd01ab 	.word	0x00cd01ab
    e704:	00cd02aa 	.word	0x00cd02aa
    e708:	06e300cd 	.word	0x06e300cd
    e70c:	00cd00cd 	.word	0x00cd00cd
    e710:	00cd00cd 	.word	0x00cd00cd
    e714:	00cd00cd 	.word	0x00cd00cd
    e718:	00cd00cd 	.word	0x00cd00cd
    e71c:	00cd0153 	.word	0x00cd0153
    e720:	01de0183 	.word	0x01de0183
    e724:	01530153 	.word	0x01530153
    e728:	02770153 	.word	0x02770153
    e72c:	007f01de 	.word	0x007f01de
    e730:	028900cd 	.word	0x028900cd
    e734:	025f00cd 	.word	0x025f00cd
    e738:	022f06e0 	.word	0x022f06e0
    e73c:	00cd007f 	.word	0x00cd007f
    e740:	007c01ab 	.word	0x007c01ab
    e744:	00cd06b8 	.word	0x00cd06b8
    e748:	06bd00cd 	.word	0x06bd00cd
    e74c:	007c00cd 	.word	0x007c00cd
    e750:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e754:	2100      	movs	r1, #0
    e756:	f819 3b01 	ldrb.w	r3, [r9], #1
    e75a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e75e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e762:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e766:	2a09      	cmp	r2, #9
    e768:	d9f5      	bls.n	e756 <_svfprintf_r+0x186>
    e76a:	9106      	str	r1, [sp, #24]
    e76c:	e78e      	b.n	e68c <_svfprintf_r+0xbc>
    e76e:	4658      	mov	r0, fp
    e770:	f003 fa94 	bl	11c9c <_localeconv_r>
    e774:	6843      	ldr	r3, [r0, #4]
    e776:	9315      	str	r3, [sp, #84]	; 0x54
    e778:	4618      	mov	r0, r3
    e77a:	f7fe fba1 	bl	cec0 <strlen>
    e77e:	9016      	str	r0, [sp, #88]	; 0x58
    e780:	4658      	mov	r0, fp
    e782:	f003 fa8b 	bl	11c9c <_localeconv_r>
    e786:	6883      	ldr	r3, [r0, #8]
    e788:	9313      	str	r3, [sp, #76]	; 0x4c
    e78a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e78c:	2b00      	cmp	r3, #0
    e78e:	f040 862d 	bne.w	f3ec <_svfprintf_r+0xe1c>
    e792:	f899 3000 	ldrb.w	r3, [r9]
    e796:	e777      	b.n	e688 <_svfprintf_r+0xb8>
    e798:	f899 3000 	ldrb.w	r3, [r9]
    e79c:	f048 0820 	orr.w	r8, r8, #32
    e7a0:	e772      	b.n	e688 <_svfprintf_r+0xb8>
    e7a2:	2208      	movs	r2, #8
    e7a4:	2100      	movs	r1, #0
    e7a6:	4638      	mov	r0, r7
    e7a8:	f7fe f84c 	bl	c844 <memset>
    e7ac:	2301      	movs	r3, #1
    e7ae:	4499      	add	r9, r3
    e7b0:	e741      	b.n	e636 <_svfprintf_r+0x66>
    e7b2:	ebb9 0504 	subs.w	r5, r9, r4
    e7b6:	4606      	mov	r6, r0
    e7b8:	d011      	beq.n	e7de <_svfprintf_r+0x20e>
    e7ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e7bc:	442b      	add	r3, r5
    e7be:	9326      	str	r3, [sp, #152]	; 0x98
    e7c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e7c2:	3301      	adds	r3, #1
    e7c4:	2b07      	cmp	r3, #7
    e7c6:	e9ca 4500 	strd	r4, r5, [sl]
    e7ca:	9325      	str	r3, [sp, #148]	; 0x94
    e7cc:	dc1c      	bgt.n	e808 <_svfprintf_r+0x238>
    e7ce:	f10a 0a08 	add.w	sl, sl, #8
    e7d2:	9b04      	ldr	r3, [sp, #16]
    e7d4:	442b      	add	r3, r5
    e7d6:	9304      	str	r3, [sp, #16]
    e7d8:	2e00      	cmp	r6, #0
    e7da:	f47f af47 	bne.w	e66c <_svfprintf_r+0x9c>
    e7de:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e7e0:	2b00      	cmp	r3, #0
    e7e2:	f041 820b 	bne.w	fbfc <_svfprintf_r+0x162c>
    e7e6:	ee1b 3a10 	vmov	r3, s22
    e7ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    e7ee:	f013 0f40 	tst.w	r3, #64	; 0x40
    e7f2:	9b04      	ldr	r3, [sp, #16]
    e7f4:	bf18      	it	ne
    e7f6:	f04f 33ff 	movne.w	r3, #4294967295
    e7fa:	9304      	str	r3, [sp, #16]
    e7fc:	9804      	ldr	r0, [sp, #16]
    e7fe:	b051      	add	sp, #324	; 0x144
    e800:	ecbd 8b08 	vpop	{d8-d11}
    e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e808:	ee1b 1a10 	vmov	r1, s22
    e80c:	aa24      	add	r2, sp, #144	; 0x90
    e80e:	4658      	mov	r0, fp
    e810:	f004 fd6a 	bl	132e8 <__ssprint_r>
    e814:	2800      	cmp	r0, #0
    e816:	d1e6      	bne.n	e7e6 <_svfprintf_r+0x216>
    e818:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e81c:	e7d9      	b.n	e7d2 <_svfprintf_r+0x202>
    e81e:	bf00      	nop
	...
    e828:	ffffffff 	.word	0xffffffff
    e82c:	7fefffff 	.word	0x7fefffff
    e830:	200088f4 	.word	0x200088f4
    e834:	930b      	str	r3, [sp, #44]	; 0x2c
    e836:	2b00      	cmp	r3, #0
    e838:	d0d1      	beq.n	e7de <_svfprintf_r+0x20e>
    e83a:	2100      	movs	r1, #0
    e83c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e840:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    e844:	2301      	movs	r3, #1
    e846:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e84a:	9302      	str	r3, [sp, #8]
    e84c:	9107      	str	r1, [sp, #28]
    e84e:	9305      	str	r3, [sp, #20]
    e850:	9103      	str	r1, [sp, #12]
    e852:	910f      	str	r1, [sp, #60]	; 0x3c
    e854:	ac37      	add	r4, sp, #220	; 0xdc
    e856:	f018 0302 	ands.w	r3, r8, #2
    e85a:	9309      	str	r3, [sp, #36]	; 0x24
    e85c:	d002      	beq.n	e864 <_svfprintf_r+0x294>
    e85e:	9b02      	ldr	r3, [sp, #8]
    e860:	3302      	adds	r3, #2
    e862:	9302      	str	r3, [sp, #8]
    e864:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    e868:	930a      	str	r3, [sp, #40]	; 0x28
    e86a:	d105      	bne.n	e878 <_svfprintf_r+0x2a8>
    e86c:	9b06      	ldr	r3, [sp, #24]
    e86e:	9a02      	ldr	r2, [sp, #8]
    e870:	1a9d      	subs	r5, r3, r2
    e872:	2d00      	cmp	r5, #0
    e874:	f300 8369 	bgt.w	ef4a <_svfprintf_r+0x97a>
    e878:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e87a:	b189      	cbz	r1, e8a0 <_svfprintf_r+0x2d0>
    e87c:	9925      	ldr	r1, [sp, #148]	; 0x94
    e87e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    e882:	3101      	adds	r1, #1
    e884:	3201      	adds	r2, #1
    e886:	f8ca 0000 	str.w	r0, [sl]
    e88a:	2907      	cmp	r1, #7
    e88c:	f04f 0001 	mov.w	r0, #1
    e890:	9226      	str	r2, [sp, #152]	; 0x98
    e892:	9125      	str	r1, [sp, #148]	; 0x94
    e894:	f8ca 0004 	str.w	r0, [sl, #4]
    e898:	f300 83a2 	bgt.w	efe0 <_svfprintf_r+0xa10>
    e89c:	f10a 0a08 	add.w	sl, sl, #8
    e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e8a2:	b183      	cbz	r3, e8c6 <_svfprintf_r+0x2f6>
    e8a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e8a6:	a91a      	add	r1, sp, #104	; 0x68
    e8a8:	3301      	adds	r3, #1
    e8aa:	3202      	adds	r2, #2
    e8ac:	f8ca 1000 	str.w	r1, [sl]
    e8b0:	2b07      	cmp	r3, #7
    e8b2:	f04f 0102 	mov.w	r1, #2
    e8b6:	9226      	str	r2, [sp, #152]	; 0x98
    e8b8:	9325      	str	r3, [sp, #148]	; 0x94
    e8ba:	f8ca 1004 	str.w	r1, [sl, #4]
    e8be:	f300 83a3 	bgt.w	f008 <_svfprintf_r+0xa38>
    e8c2:	f10a 0a08 	add.w	sl, sl, #8
    e8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8c8:	2b80      	cmp	r3, #128	; 0x80
    e8ca:	f000 826c 	beq.w	eda6 <_svfprintf_r+0x7d6>
    e8ce:	9b03      	ldr	r3, [sp, #12]
    e8d0:	9905      	ldr	r1, [sp, #20]
    e8d2:	1a5d      	subs	r5, r3, r1
    e8d4:	2d00      	cmp	r5, #0
    e8d6:	f300 82a5 	bgt.w	ee24 <_svfprintf_r+0x854>
    e8da:	f418 7f80 	tst.w	r8, #256	; 0x100
    e8de:	f040 820d 	bne.w	ecfc <_svfprintf_r+0x72c>
    e8e2:	9b05      	ldr	r3, [sp, #20]
    e8e4:	f8ca 3004 	str.w	r3, [sl, #4]
    e8e8:	441a      	add	r2, r3
    e8ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e8ec:	f8ca 4000 	str.w	r4, [sl]
    e8f0:	3301      	adds	r3, #1
    e8f2:	2b07      	cmp	r3, #7
    e8f4:	9226      	str	r2, [sp, #152]	; 0x98
    e8f6:	9325      	str	r3, [sp, #148]	; 0x94
    e8f8:	f300 831b 	bgt.w	ef32 <_svfprintf_r+0x962>
    e8fc:	f10a 0a08 	add.w	sl, sl, #8
    e900:	f018 0f04 	tst.w	r8, #4
    e904:	d005      	beq.n	e912 <_svfprintf_r+0x342>
    e906:	9b06      	ldr	r3, [sp, #24]
    e908:	9902      	ldr	r1, [sp, #8]
    e90a:	1a5c      	subs	r4, r3, r1
    e90c:	2c00      	cmp	r4, #0
    e90e:	f300 8388 	bgt.w	f022 <_svfprintf_r+0xa52>
    e912:	9b04      	ldr	r3, [sp, #16]
    e914:	9906      	ldr	r1, [sp, #24]
    e916:	9802      	ldr	r0, [sp, #8]
    e918:	4281      	cmp	r1, r0
    e91a:	bfac      	ite	ge
    e91c:	185b      	addge	r3, r3, r1
    e91e:	181b      	addlt	r3, r3, r0
    e920:	9304      	str	r3, [sp, #16]
    e922:	2a00      	cmp	r2, #0
    e924:	f040 82b0 	bne.w	ee88 <_svfprintf_r+0x8b8>
    e928:	2300      	movs	r3, #0
    e92a:	9325      	str	r3, [sp, #148]	; 0x94
    e92c:	9b07      	ldr	r3, [sp, #28]
    e92e:	b11b      	cbz	r3, e938 <_svfprintf_r+0x368>
    e930:	9907      	ldr	r1, [sp, #28]
    e932:	4658      	mov	r0, fp
    e934:	f7fe fbd6 	bl	d0e4 <_free_r>
    e938:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e93c:	464c      	mov	r4, r9
    e93e:	e679      	b.n	e634 <_svfprintf_r+0x64>
    e940:	930b      	str	r3, [sp, #44]	; 0x2c
    e942:	9b08      	ldr	r3, [sp, #32]
    e944:	3307      	adds	r3, #7
    e946:	f023 0307 	bic.w	r3, r3, #7
    e94a:	ecb3 8b02 	vldmia	r3!, {d8}
    e94e:	eeb0 7bc8 	vabs.f64	d7, d8
    e952:	eeb4 7b49 	vcmp.f64	d7, d9
    e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e95a:	9308      	str	r3, [sp, #32]
    e95c:	f340 84e9 	ble.w	f332 <_svfprintf_r+0xd62>
    e960:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e968:	f101 8059 	bmi.w	fa1e <_svfprintf_r+0x144e>
    e96c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e970:	4cab      	ldr	r4, [pc, #684]	; (ec20 <_svfprintf_r+0x650>)
    e972:	4bac      	ldr	r3, [pc, #688]	; (ec24 <_svfprintf_r+0x654>)
    e974:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e97a:	2a47      	cmp	r2, #71	; 0x47
    e97c:	bfc8      	it	gt
    e97e:	461c      	movgt	r4, r3
    e980:	2300      	movs	r3, #0
    e982:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e986:	2203      	movs	r2, #3
    e988:	9307      	str	r3, [sp, #28]
    e98a:	9202      	str	r2, [sp, #8]
    e98c:	9205      	str	r2, [sp, #20]
    e98e:	9303      	str	r3, [sp, #12]
    e990:	930f      	str	r3, [sp, #60]	; 0x3c
    e992:	2900      	cmp	r1, #0
    e994:	f43f af5f 	beq.w	e856 <_svfprintf_r+0x286>
    e998:	9b02      	ldr	r3, [sp, #8]
    e99a:	3301      	adds	r3, #1
    e99c:	9302      	str	r3, [sp, #8]
    e99e:	e75a      	b.n	e856 <_svfprintf_r+0x286>
    e9a0:	2b43      	cmp	r3, #67	; 0x43
    e9a2:	930b      	str	r3, [sp, #44]	; 0x2c
    e9a4:	d003      	beq.n	e9ae <_svfprintf_r+0x3de>
    e9a6:	f018 0f10 	tst.w	r8, #16
    e9aa:	f000 855d 	beq.w	f468 <_svfprintf_r+0xe98>
    e9ae:	9d08      	ldr	r5, [sp, #32]
    e9b0:	2208      	movs	r2, #8
    e9b2:	2100      	movs	r1, #0
    e9b4:	a822      	add	r0, sp, #136	; 0x88
    e9b6:	ac37      	add	r4, sp, #220	; 0xdc
    e9b8:	f7fd ff44 	bl	c844 <memset>
    e9bc:	ab22      	add	r3, sp, #136	; 0x88
    e9be:	f855 2b04 	ldr.w	r2, [r5], #4
    e9c2:	4621      	mov	r1, r4
    e9c4:	4658      	mov	r0, fp
    e9c6:	f004 fb65 	bl	13094 <_wcrtomb_r>
    e9ca:	4603      	mov	r3, r0
    e9cc:	3301      	adds	r3, #1
    e9ce:	9005      	str	r0, [sp, #20]
    e9d0:	f001 82ee 	beq.w	ffb0 <_svfprintf_r+0x19e0>
    e9d4:	9b05      	ldr	r3, [sp, #20]
    e9d6:	9508      	str	r5, [sp, #32]
    e9d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e9dc:	9302      	str	r3, [sp, #8]
    e9de:	2100      	movs	r1, #0
    e9e0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e9e4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e9e8:	9107      	str	r1, [sp, #28]
    e9ea:	9103      	str	r1, [sp, #12]
    e9ec:	910f      	str	r1, [sp, #60]	; 0x3c
    e9ee:	e732      	b.n	e856 <_svfprintf_r+0x286>
    e9f0:	930b      	str	r3, [sp, #44]	; 0x2c
    e9f2:	9b08      	ldr	r3, [sp, #32]
    e9f4:	461a      	mov	r2, r3
    e9f6:	2300      	movs	r3, #0
    e9f8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e9fc:	4613      	mov	r3, r2
    e9fe:	f853 4b04 	ldr.w	r4, [r3], #4
    ea02:	9308      	str	r3, [sp, #32]
    ea04:	2c00      	cmp	r4, #0
    ea06:	f000 8548 	beq.w	f49a <_svfprintf_r+0xeca>
    ea0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ea0c:	2b53      	cmp	r3, #83	; 0x53
    ea0e:	f000 86ec 	beq.w	f7ea <_svfprintf_r+0x121a>
    ea12:	f018 0310 	ands.w	r3, r8, #16
    ea16:	930c      	str	r3, [sp, #48]	; 0x30
    ea18:	f040 86e7 	bne.w	f7ea <_svfprintf_r+0x121a>
    ea1c:	9b03      	ldr	r3, [sp, #12]
    ea1e:	1c5d      	adds	r5, r3, #1
    ea20:	f001 80e5 	beq.w	fbee <_svfprintf_r+0x161e>
    ea24:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea26:	461a      	mov	r2, r3
    ea28:	4620      	mov	r0, r4
    ea2a:	f7fe f9e9 	bl	ce00 <memchr>
    ea2e:	9007      	str	r0, [sp, #28]
    ea30:	2800      	cmp	r0, #0
    ea32:	f001 8328 	beq.w	10086 <_svfprintf_r+0x1ab6>
    ea36:	9b07      	ldr	r3, [sp, #28]
    ea38:	1b1a      	subs	r2, r3, r4
    ea3a:	9205      	str	r2, [sp, #20]
    ea3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea3e:	9303      	str	r3, [sp, #12]
    ea40:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ea44:	930f      	str	r3, [sp, #60]	; 0x3c
    ea46:	930d      	str	r3, [sp, #52]	; 0x34
    ea48:	9307      	str	r3, [sp, #28]
    ea4a:	2373      	movs	r3, #115	; 0x73
    ea4c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ea50:	9202      	str	r2, [sp, #8]
    ea52:	930b      	str	r3, [sp, #44]	; 0x2c
    ea54:	e79d      	b.n	e992 <_svfprintf_r+0x3c2>
    ea56:	f018 0f20 	tst.w	r8, #32
    ea5a:	930b      	str	r3, [sp, #44]	; 0x2c
    ea5c:	9b08      	ldr	r3, [sp, #32]
    ea5e:	d03d      	beq.n	eadc <_svfprintf_r+0x50c>
    ea60:	3307      	adds	r3, #7
    ea62:	f023 0307 	bic.w	r3, r3, #7
    ea66:	461a      	mov	r2, r3
    ea68:	4611      	mov	r1, r2
    ea6a:	685b      	ldr	r3, [r3, #4]
    ea6c:	f851 2b08 	ldr.w	r2, [r1], #8
    ea70:	9108      	str	r1, [sp, #32]
    ea72:	4619      	mov	r1, r3
    ea74:	2b00      	cmp	r3, #0
    ea76:	f2c0 840c 	blt.w	f292 <_svfprintf_r+0xcc2>
    ea7a:	9b03      	ldr	r3, [sp, #12]
    ea7c:	3301      	adds	r3, #1
    ea7e:	f000 829e 	beq.w	efbe <_svfprintf_r+0x9ee>
    ea82:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    ea86:	ea52 0301 	orrs.w	r3, r2, r1
    ea8a:	9002      	str	r0, [sp, #8]
    ea8c:	f040 8299 	bne.w	efc2 <_svfprintf_r+0x9f2>
    ea90:	9b03      	ldr	r3, [sp, #12]
    ea92:	2b00      	cmp	r3, #0
    ea94:	f040 829a 	bne.w	efcc <_svfprintf_r+0x9fc>
    ea98:	4680      	mov	r8, r0
    ea9a:	2300      	movs	r3, #0
    ea9c:	9303      	str	r3, [sp, #12]
    ea9e:	9305      	str	r3, [sp, #20]
    eaa0:	ac50      	add	r4, sp, #320	; 0x140
    eaa2:	e106      	b.n	ecb2 <_svfprintf_r+0x6e2>
    eaa4:	9b08      	ldr	r3, [sp, #32]
    eaa6:	f853 2b04 	ldr.w	r2, [r3], #4
    eaaa:	9206      	str	r2, [sp, #24]
    eaac:	2a00      	cmp	r2, #0
    eaae:	f280 8419 	bge.w	f2e4 <_svfprintf_r+0xd14>
    eab2:	9a06      	ldr	r2, [sp, #24]
    eab4:	9308      	str	r3, [sp, #32]
    eab6:	4252      	negs	r2, r2
    eab8:	9206      	str	r2, [sp, #24]
    eaba:	f899 3000 	ldrb.w	r3, [r9]
    eabe:	f048 0804 	orr.w	r8, r8, #4
    eac2:	e5e1      	b.n	e688 <_svfprintf_r+0xb8>
    eac4:	f899 3000 	ldrb.w	r3, [r9]
    eac8:	f048 0808 	orr.w	r8, r8, #8
    eacc:	e5dc      	b.n	e688 <_svfprintf_r+0xb8>
    eace:	f048 0810 	orr.w	r8, r8, #16
    ead2:	f018 0f20 	tst.w	r8, #32
    ead6:	930b      	str	r3, [sp, #44]	; 0x2c
    ead8:	9b08      	ldr	r3, [sp, #32]
    eada:	d1c1      	bne.n	ea60 <_svfprintf_r+0x490>
    eadc:	f018 0f10 	tst.w	r8, #16
    eae0:	f040 840b 	bne.w	f2fa <_svfprintf_r+0xd2a>
    eae4:	f018 0f40 	tst.w	r8, #64	; 0x40
    eae8:	f000 8403 	beq.w	f2f2 <_svfprintf_r+0xd22>
    eaec:	f933 2b04 	ldrsh.w	r2, [r3], #4
    eaf0:	9308      	str	r3, [sp, #32]
    eaf2:	17d1      	asrs	r1, r2, #31
    eaf4:	460b      	mov	r3, r1
    eaf6:	e7bd      	b.n	ea74 <_svfprintf_r+0x4a4>
    eaf8:	9b08      	ldr	r3, [sp, #32]
    eafa:	f048 0202 	orr.w	r2, r8, #2
    eafe:	9202      	str	r2, [sp, #8]
    eb00:	f853 2b04 	ldr.w	r2, [r3], #4
    eb04:	9308      	str	r3, [sp, #32]
    eb06:	f647 0330 	movw	r3, #30768	; 0x7830
    eb0a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    eb0e:	2078      	movs	r0, #120	; 0x78
    eb10:	4b45      	ldr	r3, [pc, #276]	; (ec28 <_svfprintf_r+0x658>)
    eb12:	9311      	str	r3, [sp, #68]	; 0x44
    eb14:	2100      	movs	r1, #0
    eb16:	2302      	movs	r3, #2
    eb18:	900b      	str	r0, [sp, #44]	; 0x2c
    eb1a:	2000      	movs	r0, #0
    eb1c:	9c03      	ldr	r4, [sp, #12]
    eb1e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    eb22:	1c60      	adds	r0, r4, #1
    eb24:	f000 80ad 	beq.w	ec82 <_svfprintf_r+0x6b2>
    eb28:	9802      	ldr	r0, [sp, #8]
    eb2a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    eb2e:	ea52 0001 	orrs.w	r0, r2, r1
    eb32:	f040 80a4 	bne.w	ec7e <_svfprintf_r+0x6ae>
    eb36:	2c00      	cmp	r4, #0
    eb38:	f040 86ae 	bne.w	f898 <_svfprintf_r+0x12c8>
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d1ac      	bne.n	ea9a <_svfprintf_r+0x4ca>
    eb40:	9b02      	ldr	r3, [sp, #8]
    eb42:	f013 0301 	ands.w	r3, r3, #1
    eb46:	9305      	str	r3, [sp, #20]
    eb48:	f000 83d1 	beq.w	f2ee <_svfprintf_r+0xd1e>
    eb4c:	2330      	movs	r3, #48	; 0x30
    eb4e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    eb52:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    eb56:	e0ac      	b.n	ecb2 <_svfprintf_r+0x6e2>
    eb58:	f018 0f20 	tst.w	r8, #32
    eb5c:	f040 83d4 	bne.w	f308 <_svfprintf_r+0xd38>
    eb60:	f018 0f10 	tst.w	r8, #16
    eb64:	f040 869f 	bne.w	f8a6 <_svfprintf_r+0x12d6>
    eb68:	f018 0f40 	tst.w	r8, #64	; 0x40
    eb6c:	f040 8797 	bne.w	fa9e <_svfprintf_r+0x14ce>
    eb70:	f418 7f00 	tst.w	r8, #512	; 0x200
    eb74:	f000 8697 	beq.w	f8a6 <_svfprintf_r+0x12d6>
    eb78:	9b08      	ldr	r3, [sp, #32]
    eb7a:	9904      	ldr	r1, [sp, #16]
    eb7c:	f853 2b04 	ldr.w	r2, [r3], #4
    eb80:	9308      	str	r3, [sp, #32]
    eb82:	7011      	strb	r1, [r2, #0]
    eb84:	464c      	mov	r4, r9
    eb86:	e555      	b.n	e634 <_svfprintf_r+0x64>
    eb88:	f899 3000 	ldrb.w	r3, [r9]
    eb8c:	2b68      	cmp	r3, #104	; 0x68
    eb8e:	bf03      	ittte	eq
    eb90:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    eb94:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    eb98:	f109 0901 	addeq.w	r9, r9, #1
    eb9c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    eba0:	e572      	b.n	e688 <_svfprintf_r+0xb8>
    eba2:	f899 3000 	ldrb.w	r3, [r9]
    eba6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    ebaa:	e56d      	b.n	e688 <_svfprintf_r+0xb8>
    ebac:	f899 3000 	ldrb.w	r3, [r9]
    ebb0:	2b6c      	cmp	r3, #108	; 0x6c
    ebb2:	bf03      	ittte	eq
    ebb4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    ebb8:	f048 0820 	orreq.w	r8, r8, #32
    ebbc:	f109 0901 	addeq.w	r9, r9, #1
    ebc0:	f048 0810 	orrne.w	r8, r8, #16
    ebc4:	e560      	b.n	e688 <_svfprintf_r+0xb8>
    ebc6:	930b      	str	r3, [sp, #44]	; 0x2c
    ebc8:	f048 0810 	orr.w	r8, r8, #16
    ebcc:	f018 0120 	ands.w	r1, r8, #32
    ebd0:	f000 8351 	beq.w	f276 <_svfprintf_r+0xca6>
    ebd4:	9b08      	ldr	r3, [sp, #32]
    ebd6:	3307      	adds	r3, #7
    ebd8:	f023 0307 	bic.w	r3, r3, #7
    ebdc:	6859      	ldr	r1, [r3, #4]
    ebde:	f853 2b08 	ldr.w	r2, [r3], #8
    ebe2:	9308      	str	r3, [sp, #32]
    ebe4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    ebe8:	9302      	str	r3, [sp, #8]
    ebea:	2300      	movs	r3, #0
    ebec:	e795      	b.n	eb1a <_svfprintf_r+0x54a>
    ebee:	930b      	str	r3, [sp, #44]	; 0x2c
    ebf0:	f048 0310 	orr.w	r3, r8, #16
    ebf4:	9302      	str	r3, [sp, #8]
    ebf6:	9b02      	ldr	r3, [sp, #8]
    ebf8:	f013 0120 	ands.w	r1, r3, #32
    ebfc:	f000 8329 	beq.w	f252 <_svfprintf_r+0xc82>
    ec00:	9b08      	ldr	r3, [sp, #32]
    ec02:	3307      	adds	r3, #7
    ec04:	f023 0307 	bic.w	r3, r3, #7
    ec08:	6859      	ldr	r1, [r3, #4]
    ec0a:	f853 2b08 	ldr.w	r2, [r3], #8
    ec0e:	9308      	str	r3, [sp, #32]
    ec10:	2301      	movs	r3, #1
    ec12:	e782      	b.n	eb1a <_svfprintf_r+0x54a>
    ec14:	f899 3000 	ldrb.w	r3, [r9]
    ec18:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    ec1c:	e534      	b.n	e688 <_svfprintf_r+0xb8>
    ec1e:	bf00      	nop
    ec20:	20000eec 	.word	0x20000eec
    ec24:	20000824 	.word	0x20000824
    ec28:	20000ef4 	.word	0x20000ef4
    ec2c:	4649      	mov	r1, r9
    ec2e:	f811 3b01 	ldrb.w	r3, [r1], #1
    ec32:	2b2a      	cmp	r3, #42	; 0x2a
    ec34:	f001 8249 	beq.w	100ca <_svfprintf_r+0x1afa>
    ec38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec3c:	2a09      	cmp	r2, #9
    ec3e:	4689      	mov	r9, r1
    ec40:	bf98      	it	ls
    ec42:	2100      	movls	r1, #0
    ec44:	f201 8144 	bhi.w	fed0 <_svfprintf_r+0x1900>
    ec48:	f819 3b01 	ldrb.w	r3, [r9], #1
    ec4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ec50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ec54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec58:	2a09      	cmp	r2, #9
    ec5a:	d9f5      	bls.n	ec48 <_svfprintf_r+0x678>
    ec5c:	9103      	str	r1, [sp, #12]
    ec5e:	e515      	b.n	e68c <_svfprintf_r+0xbc>
    ec60:	f899 3000 	ldrb.w	r3, [r9]
    ec64:	f048 0801 	orr.w	r8, r8, #1
    ec68:	e50e      	b.n	e688 <_svfprintf_r+0xb8>
    ec6a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    ec6e:	2b00      	cmp	r3, #0
    ec70:	f47f ad8f 	bne.w	e792 <_svfprintf_r+0x1c2>
    ec74:	f899 3000 	ldrb.w	r3, [r9]
    ec78:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    ec7c:	e504      	b.n	e688 <_svfprintf_r+0xb8>
    ec7e:	f8cd 8008 	str.w	r8, [sp, #8]
    ec82:	2b01      	cmp	r3, #1
    ec84:	f000 819d 	beq.w	efc2 <_svfprintf_r+0x9f2>
    ec88:	2b02      	cmp	r3, #2
    ec8a:	ac50      	add	r4, sp, #320	; 0x140
    ec8c:	d120      	bne.n	ecd0 <_svfprintf_r+0x700>
    ec8e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ec90:	f002 030f 	and.w	r3, r2, #15
    ec94:	0912      	lsrs	r2, r2, #4
    ec96:	5cc3      	ldrb	r3, [r0, r3]
    ec98:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ec9c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    eca0:	0909      	lsrs	r1, r1, #4
    eca2:	ea52 0301 	orrs.w	r3, r2, r1
    eca6:	d1f3      	bne.n	ec90 <_svfprintf_r+0x6c0>
    eca8:	ab50      	add	r3, sp, #320	; 0x140
    ecaa:	1b1b      	subs	r3, r3, r4
    ecac:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ecb0:	9305      	str	r3, [sp, #20]
    ecb2:	9a05      	ldr	r2, [sp, #20]
    ecb4:	9803      	ldr	r0, [sp, #12]
    ecb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ecba:	4282      	cmp	r2, r0
    ecbc:	f04f 0300 	mov.w	r3, #0
    ecc0:	bfb8      	it	lt
    ecc2:	4602      	movlt	r2, r0
    ecc4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ecc8:	9307      	str	r3, [sp, #28]
    ecca:	9202      	str	r2, [sp, #8]
    eccc:	930f      	str	r3, [sp, #60]	; 0x3c
    ecce:	e660      	b.n	e992 <_svfprintf_r+0x3c2>
    ecd0:	f002 0307 	and.w	r3, r2, #7
    ecd4:	08d2      	lsrs	r2, r2, #3
    ecd6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    ecda:	08c9      	lsrs	r1, r1, #3
    ecdc:	3330      	adds	r3, #48	; 0x30
    ecde:	ea52 0501 	orrs.w	r5, r2, r1
    ece2:	4620      	mov	r0, r4
    ece4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ece8:	d1f2      	bne.n	ecd0 <_svfprintf_r+0x700>
    ecea:	9a02      	ldr	r2, [sp, #8]
    ecec:	07d1      	lsls	r1, r2, #31
    ecee:	f100 824d 	bmi.w	f18c <_svfprintf_r+0xbbc>
    ecf2:	ab50      	add	r3, sp, #320	; 0x140
    ecf4:	1b1b      	subs	r3, r3, r4
    ecf6:	4690      	mov	r8, r2
    ecf8:	9305      	str	r3, [sp, #20]
    ecfa:	e7da      	b.n	ecb2 <_svfprintf_r+0x6e2>
    ecfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ecfe:	2b65      	cmp	r3, #101	; 0x65
    ed00:	f340 80d4 	ble.w	eeac <_svfprintf_r+0x8dc>
    ed04:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ed08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed0c:	f040 81c1 	bne.w	f092 <_svfprintf_r+0xac2>
    ed10:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed12:	49ba      	ldr	r1, [pc, #744]	; (effc <_svfprintf_r+0xa2c>)
    ed14:	f8ca 1000 	str.w	r1, [sl]
    ed18:	3301      	adds	r3, #1
    ed1a:	3201      	adds	r2, #1
    ed1c:	2101      	movs	r1, #1
    ed1e:	2b07      	cmp	r3, #7
    ed20:	9226      	str	r2, [sp, #152]	; 0x98
    ed22:	9325      	str	r3, [sp, #148]	; 0x94
    ed24:	f8ca 1004 	str.w	r1, [sl, #4]
    ed28:	f300 8551 	bgt.w	f7ce <_svfprintf_r+0x11fe>
    ed2c:	f10a 0a08 	add.w	sl, sl, #8
    ed30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ed32:	990e      	ldr	r1, [sp, #56]	; 0x38
    ed34:	428b      	cmp	r3, r1
    ed36:	f280 82d0 	bge.w	f2da <_svfprintf_r+0xd0a>
    ed3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed3c:	9912      	ldr	r1, [sp, #72]	; 0x48
    ed3e:	441a      	add	r2, r3
    ed40:	e9ca 1300 	strd	r1, r3, [sl]
    ed44:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed46:	9226      	str	r2, [sp, #152]	; 0x98
    ed48:	3301      	adds	r3, #1
    ed4a:	2b07      	cmp	r3, #7
    ed4c:	9325      	str	r3, [sp, #148]	; 0x94
    ed4e:	f300 8397 	bgt.w	f480 <_svfprintf_r+0xeb0>
    ed52:	f10a 0a08 	add.w	sl, sl, #8
    ed56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed58:	1e5c      	subs	r4, r3, #1
    ed5a:	2c00      	cmp	r4, #0
    ed5c:	f77f add0 	ble.w	e900 <_svfprintf_r+0x330>
    ed60:	2c10      	cmp	r4, #16
    ed62:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed64:	f340 856e 	ble.w	f844 <_svfprintf_r+0x1274>
    ed68:	ee1b 6a10 	vmov	r6, s22
    ed6c:	2510      	movs	r5, #16
    ed6e:	e005      	b.n	ed7c <_svfprintf_r+0x7ac>
    ed70:	f10a 0a08 	add.w	sl, sl, #8
    ed74:	3c10      	subs	r4, #16
    ed76:	2c10      	cmp	r4, #16
    ed78:	f340 8564 	ble.w	f844 <_svfprintf_r+0x1274>
    ed7c:	3301      	adds	r3, #1
    ed7e:	49a0      	ldr	r1, [pc, #640]	; (f000 <_svfprintf_r+0xa30>)
    ed80:	3210      	adds	r2, #16
    ed82:	2b07      	cmp	r3, #7
    ed84:	e9ca 1500 	strd	r1, r5, [sl]
    ed88:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ed8c:	ddf0      	ble.n	ed70 <_svfprintf_r+0x7a0>
    ed8e:	aa24      	add	r2, sp, #144	; 0x90
    ed90:	4631      	mov	r1, r6
    ed92:	4658      	mov	r0, fp
    ed94:	f004 faa8 	bl	132e8 <__ssprint_r>
    ed98:	2800      	cmp	r0, #0
    ed9a:	d17e      	bne.n	ee9a <_svfprintf_r+0x8ca>
    ed9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eda0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eda4:	e7e6      	b.n	ed74 <_svfprintf_r+0x7a4>
    eda6:	9b06      	ldr	r3, [sp, #24]
    eda8:	9902      	ldr	r1, [sp, #8]
    edaa:	1a5d      	subs	r5, r3, r1
    edac:	2d00      	cmp	r5, #0
    edae:	f77f ad8e 	ble.w	e8ce <_svfprintf_r+0x2fe>
    edb2:	2d10      	cmp	r5, #16
    edb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    edb6:	dd21      	ble.n	edfc <_svfprintf_r+0x82c>
    edb8:	9409      	str	r4, [sp, #36]	; 0x24
    edba:	2610      	movs	r6, #16
    edbc:	ee1b 4a10 	vmov	r4, s22
    edc0:	e004      	b.n	edcc <_svfprintf_r+0x7fc>
    edc2:	3d10      	subs	r5, #16
    edc4:	2d10      	cmp	r5, #16
    edc6:	f10a 0a08 	add.w	sl, sl, #8
    edca:	dd16      	ble.n	edfa <_svfprintf_r+0x82a>
    edcc:	3301      	adds	r3, #1
    edce:	498c      	ldr	r1, [pc, #560]	; (f000 <_svfprintf_r+0xa30>)
    edd0:	3210      	adds	r2, #16
    edd2:	2b07      	cmp	r3, #7
    edd4:	e9ca 1600 	strd	r1, r6, [sl]
    edd8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eddc:	ddf1      	ble.n	edc2 <_svfprintf_r+0x7f2>
    edde:	aa24      	add	r2, sp, #144	; 0x90
    ede0:	4621      	mov	r1, r4
    ede2:	4658      	mov	r0, fp
    ede4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ede8:	f004 fa7e 	bl	132e8 <__ssprint_r>
    edec:	2800      	cmp	r0, #0
    edee:	d154      	bne.n	ee9a <_svfprintf_r+0x8ca>
    edf0:	3d10      	subs	r5, #16
    edf2:	2d10      	cmp	r5, #16
    edf4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    edf8:	dce8      	bgt.n	edcc <_svfprintf_r+0x7fc>
    edfa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    edfc:	4980      	ldr	r1, [pc, #512]	; (f000 <_svfprintf_r+0xa30>)
    edfe:	f8ca 5004 	str.w	r5, [sl, #4]
    ee02:	3301      	adds	r3, #1
    ee04:	442a      	add	r2, r5
    ee06:	2b07      	cmp	r3, #7
    ee08:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ee0c:	f8ca 1000 	str.w	r1, [sl]
    ee10:	f300 8526 	bgt.w	f860 <_svfprintf_r+0x1290>
    ee14:	9b03      	ldr	r3, [sp, #12]
    ee16:	9905      	ldr	r1, [sp, #20]
    ee18:	1a5d      	subs	r5, r3, r1
    ee1a:	2d00      	cmp	r5, #0
    ee1c:	f10a 0a08 	add.w	sl, sl, #8
    ee20:	f77f ad5b 	ble.w	e8da <_svfprintf_r+0x30a>
    ee24:	2d10      	cmp	r5, #16
    ee26:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ee28:	dd1f      	ble.n	ee6a <_svfprintf_r+0x89a>
    ee2a:	4651      	mov	r1, sl
    ee2c:	2610      	movs	r6, #16
    ee2e:	ee1b aa10 	vmov	sl, s22
    ee32:	e004      	b.n	ee3e <_svfprintf_r+0x86e>
    ee34:	3d10      	subs	r5, #16
    ee36:	2d10      	cmp	r5, #16
    ee38:	f101 0108 	add.w	r1, r1, #8
    ee3c:	dd14      	ble.n	ee68 <_svfprintf_r+0x898>
    ee3e:	3301      	adds	r3, #1
    ee40:	486f      	ldr	r0, [pc, #444]	; (f000 <_svfprintf_r+0xa30>)
    ee42:	3210      	adds	r2, #16
    ee44:	2b07      	cmp	r3, #7
    ee46:	e9c1 0600 	strd	r0, r6, [r1]
    ee4a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ee4e:	ddf1      	ble.n	ee34 <_svfprintf_r+0x864>
    ee50:	aa24      	add	r2, sp, #144	; 0x90
    ee52:	4651      	mov	r1, sl
    ee54:	4658      	mov	r0, fp
    ee56:	f004 fa47 	bl	132e8 <__ssprint_r>
    ee5a:	b9f0      	cbnz	r0, ee9a <_svfprintf_r+0x8ca>
    ee5c:	3d10      	subs	r5, #16
    ee5e:	2d10      	cmp	r5, #16
    ee60:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ee64:	a927      	add	r1, sp, #156	; 0x9c
    ee66:	dcea      	bgt.n	ee3e <_svfprintf_r+0x86e>
    ee68:	468a      	mov	sl, r1
    ee6a:	3301      	adds	r3, #1
    ee6c:	4964      	ldr	r1, [pc, #400]	; (f000 <_svfprintf_r+0xa30>)
    ee6e:	f8ca 5004 	str.w	r5, [sl, #4]
    ee72:	442a      	add	r2, r5
    ee74:	2b07      	cmp	r3, #7
    ee76:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ee7a:	f8ca 1000 	str.w	r1, [sl]
    ee7e:	f300 81da 	bgt.w	f236 <_svfprintf_r+0xc66>
    ee82:	f10a 0a08 	add.w	sl, sl, #8
    ee86:	e528      	b.n	e8da <_svfprintf_r+0x30a>
    ee88:	ee1b 1a10 	vmov	r1, s22
    ee8c:	aa24      	add	r2, sp, #144	; 0x90
    ee8e:	4658      	mov	r0, fp
    ee90:	f004 fa2a 	bl	132e8 <__ssprint_r>
    ee94:	2800      	cmp	r0, #0
    ee96:	f43f ad47 	beq.w	e928 <_svfprintf_r+0x358>
    ee9a:	9b07      	ldr	r3, [sp, #28]
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	f43f aca2 	beq.w	e7e6 <_svfprintf_r+0x216>
    eea2:	9907      	ldr	r1, [sp, #28]
    eea4:	4658      	mov	r0, fp
    eea6:	f7fe f91d 	bl	d0e4 <_free_r>
    eeaa:	e49c      	b.n	e7e6 <_svfprintf_r+0x216>
    eeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eeae:	2b01      	cmp	r3, #1
    eeb0:	f340 817a 	ble.w	f1a8 <_svfprintf_r+0xbd8>
    eeb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    eeb6:	f8ca 4000 	str.w	r4, [sl]
    eeba:	3301      	adds	r3, #1
    eebc:	3201      	adds	r2, #1
    eebe:	2101      	movs	r1, #1
    eec0:	2b07      	cmp	r3, #7
    eec2:	9226      	str	r2, [sp, #152]	; 0x98
    eec4:	9325      	str	r3, [sp, #148]	; 0x94
    eec6:	f8ca 1004 	str.w	r1, [sl, #4]
    eeca:	f300 81f8 	bgt.w	f2be <_svfprintf_r+0xcee>
    eece:	f10a 0a08 	add.w	sl, sl, #8
    eed2:	9910      	ldr	r1, [sp, #64]	; 0x40
    eed4:	9812      	ldr	r0, [sp, #72]	; 0x48
    eed6:	3301      	adds	r3, #1
    eed8:	440a      	add	r2, r1
    eeda:	2b07      	cmp	r3, #7
    eedc:	e9ca 0100 	strd	r0, r1, [sl]
    eee0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eee4:	f300 81dd 	bgt.w	f2a2 <_svfprintf_r+0xcd2>
    eee8:	f10a 0a08 	add.w	sl, sl, #8
    eeec:	eeb5 8b40 	vcmp.f64	d8, #0.0
    eef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eef4:	f000 8177 	beq.w	f1e6 <_svfprintf_r+0xc16>
    eef8:	990e      	ldr	r1, [sp, #56]	; 0x38
    eefa:	3301      	adds	r3, #1
    eefc:	3901      	subs	r1, #1
    eefe:	3401      	adds	r4, #1
    ef00:	440a      	add	r2, r1
    ef02:	2b07      	cmp	r3, #7
    ef04:	f8ca 4000 	str.w	r4, [sl]
    ef08:	9325      	str	r3, [sp, #148]	; 0x94
    ef0a:	f8ca 1004 	str.w	r1, [sl, #4]
    ef0e:	9226      	str	r2, [sp, #152]	; 0x98
    ef10:	f300 815b 	bgt.w	f1ca <_svfprintf_r+0xbfa>
    ef14:	f10a 0a08 	add.w	sl, sl, #8
    ef18:	9914      	ldr	r1, [sp, #80]	; 0x50
    ef1a:	f8ca 1004 	str.w	r1, [sl, #4]
    ef1e:	3301      	adds	r3, #1
    ef20:	440a      	add	r2, r1
    ef22:	2b07      	cmp	r3, #7
    ef24:	a91e      	add	r1, sp, #120	; 0x78
    ef26:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ef2a:	f8ca 1000 	str.w	r1, [sl]
    ef2e:	f77f ace5 	ble.w	e8fc <_svfprintf_r+0x32c>
    ef32:	ee1b 1a10 	vmov	r1, s22
    ef36:	aa24      	add	r2, sp, #144	; 0x90
    ef38:	4658      	mov	r0, fp
    ef3a:	f004 f9d5 	bl	132e8 <__ssprint_r>
    ef3e:	2800      	cmp	r0, #0
    ef40:	d1ab      	bne.n	ee9a <_svfprintf_r+0x8ca>
    ef42:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef48:	e4da      	b.n	e900 <_svfprintf_r+0x330>
    ef4a:	2d10      	cmp	r5, #16
    ef4c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    ef50:	4e2c      	ldr	r6, [pc, #176]	; (f004 <_svfprintf_r+0xa34>)
    ef52:	dd24      	ble.n	ef9e <_svfprintf_r+0x9ce>
    ef54:	9417      	str	r4, [sp, #92]	; 0x5c
    ef56:	2310      	movs	r3, #16
    ef58:	ee1b 4a10 	vmov	r4, s22
    ef5c:	4608      	mov	r0, r1
    ef5e:	e004      	b.n	ef6a <_svfprintf_r+0x99a>
    ef60:	3d10      	subs	r5, #16
    ef62:	2d10      	cmp	r5, #16
    ef64:	f10a 0a08 	add.w	sl, sl, #8
    ef68:	dd17      	ble.n	ef9a <_svfprintf_r+0x9ca>
    ef6a:	3001      	adds	r0, #1
    ef6c:	3210      	adds	r2, #16
    ef6e:	2807      	cmp	r0, #7
    ef70:	e9ca 6300 	strd	r6, r3, [sl]
    ef74:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    ef78:	ddf2      	ble.n	ef60 <_svfprintf_r+0x990>
    ef7a:	aa24      	add	r2, sp, #144	; 0x90
    ef7c:	4621      	mov	r1, r4
    ef7e:	4658      	mov	r0, fp
    ef80:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef84:	f004 f9b0 	bl	132e8 <__ssprint_r>
    ef88:	2800      	cmp	r0, #0
    ef8a:	d186      	bne.n	ee9a <_svfprintf_r+0x8ca>
    ef8c:	3d10      	subs	r5, #16
    ef8e:	2d10      	cmp	r5, #16
    ef90:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    ef94:	f04f 0310 	mov.w	r3, #16
    ef98:	dce7      	bgt.n	ef6a <_svfprintf_r+0x99a>
    ef9a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    ef9c:	4601      	mov	r1, r0
    ef9e:	3101      	adds	r1, #1
    efa0:	442a      	add	r2, r5
    efa2:	2907      	cmp	r1, #7
    efa4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    efa8:	f8ca 6000 	str.w	r6, [sl]
    efac:	f8ca 5004 	str.w	r5, [sl, #4]
    efb0:	f300 83bd 	bgt.w	f72e <_svfprintf_r+0x115e>
    efb4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    efb8:	f10a 0a08 	add.w	sl, sl, #8
    efbc:	e45d      	b.n	e87a <_svfprintf_r+0x2aa>
    efbe:	f8cd 8008 	str.w	r8, [sp, #8]
    efc2:	2a0a      	cmp	r2, #10
    efc4:	f171 0300 	sbcs.w	r3, r1, #0
    efc8:	f080 8345 	bcs.w	f656 <_svfprintf_r+0x1086>
    efcc:	3230      	adds	r2, #48	; 0x30
    efce:	2301      	movs	r3, #1
    efd0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    efd4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    efd8:	9305      	str	r3, [sp, #20]
    efda:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    efde:	e668      	b.n	ecb2 <_svfprintf_r+0x6e2>
    efe0:	ee1b 1a10 	vmov	r1, s22
    efe4:	aa24      	add	r2, sp, #144	; 0x90
    efe6:	4658      	mov	r0, fp
    efe8:	f004 f97e 	bl	132e8 <__ssprint_r>
    efec:	2800      	cmp	r0, #0
    efee:	f47f af54 	bne.w	ee9a <_svfprintf_r+0x8ca>
    eff2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eff4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eff8:	e452      	b.n	e8a0 <_svfprintf_r+0x2d0>
    effa:	bf00      	nop
    effc:	20000f24 	.word	0x20000f24
    f000:	20008774 	.word	0x20008774
    f004:	200029a0 	.word	0x200029a0
    f008:	ee1b 1a10 	vmov	r1, s22
    f00c:	aa24      	add	r2, sp, #144	; 0x90
    f00e:	4658      	mov	r0, fp
    f010:	f004 f96a 	bl	132e8 <__ssprint_r>
    f014:	2800      	cmp	r0, #0
    f016:	f47f af40 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f01a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f01c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f020:	e451      	b.n	e8c6 <_svfprintf_r+0x2f6>
    f022:	2c10      	cmp	r4, #16
    f024:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f026:	4ebe      	ldr	r6, [pc, #760]	; (f320 <_svfprintf_r+0xd50>)
    f028:	dd1f      	ble.n	f06a <_svfprintf_r+0xa9a>
    f02a:	ee1b 8a10 	vmov	r8, s22
    f02e:	2510      	movs	r5, #16
    f030:	e004      	b.n	f03c <_svfprintf_r+0xa6c>
    f032:	3c10      	subs	r4, #16
    f034:	2c10      	cmp	r4, #16
    f036:	f10a 0a08 	add.w	sl, sl, #8
    f03a:	dd16      	ble.n	f06a <_svfprintf_r+0xa9a>
    f03c:	3301      	adds	r3, #1
    f03e:	3210      	adds	r2, #16
    f040:	2b07      	cmp	r3, #7
    f042:	e9ca 6500 	strd	r6, r5, [sl]
    f046:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f04a:	ddf2      	ble.n	f032 <_svfprintf_r+0xa62>
    f04c:	aa24      	add	r2, sp, #144	; 0x90
    f04e:	4641      	mov	r1, r8
    f050:	4658      	mov	r0, fp
    f052:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f056:	f004 f947 	bl	132e8 <__ssprint_r>
    f05a:	2800      	cmp	r0, #0
    f05c:	f47f af1d 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f060:	3c10      	subs	r4, #16
    f062:	2c10      	cmp	r4, #16
    f064:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f068:	dce8      	bgt.n	f03c <_svfprintf_r+0xa6c>
    f06a:	3301      	adds	r3, #1
    f06c:	4422      	add	r2, r4
    f06e:	2b07      	cmp	r3, #7
    f070:	e9ca 6400 	strd	r6, r4, [sl]
    f074:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f078:	f77f ac4b 	ble.w	e912 <_svfprintf_r+0x342>
    f07c:	ee1b 1a10 	vmov	r1, s22
    f080:	aa24      	add	r2, sp, #144	; 0x90
    f082:	4658      	mov	r0, fp
    f084:	f004 f930 	bl	132e8 <__ssprint_r>
    f088:	2800      	cmp	r0, #0
    f08a:	f47f af06 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f08e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f090:	e43f      	b.n	e912 <_svfprintf_r+0x342>
    f092:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f094:	2900      	cmp	r1, #0
    f096:	f340 835a 	ble.w	f74e <_svfprintf_r+0x117e>
    f09a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f09e:	429e      	cmp	r6, r3
    f0a0:	bfa8      	it	ge
    f0a2:	461e      	movge	r6, r3
    f0a4:	2e00      	cmp	r6, #0
    f0a6:	dd0b      	ble.n	f0c0 <_svfprintf_r+0xaf0>
    f0a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0aa:	3301      	adds	r3, #1
    f0ac:	4432      	add	r2, r6
    f0ae:	2b07      	cmp	r3, #7
    f0b0:	e9ca 4600 	strd	r4, r6, [sl]
    f0b4:	9226      	str	r2, [sp, #152]	; 0x98
    f0b6:	9325      	str	r3, [sp, #148]	; 0x94
    f0b8:	f300 8689 	bgt.w	fdce <_svfprintf_r+0x17fe>
    f0bc:	f10a 0a08 	add.w	sl, sl, #8
    f0c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f0c2:	2e00      	cmp	r6, #0
    f0c4:	bfa8      	it	ge
    f0c6:	1bad      	subge	r5, r5, r6
    f0c8:	2d00      	cmp	r5, #0
    f0ca:	f300 8203 	bgt.w	f4d4 <_svfprintf_r+0xf04>
    f0ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f0d0:	f418 6f80 	tst.w	r8, #1024	; 0x400
    f0d4:	4423      	add	r3, r4
    f0d6:	9305      	str	r3, [sp, #20]
    f0d8:	f040 821f 	bne.w	f51a <_svfprintf_r+0xf4a>
    f0dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f0de:	990e      	ldr	r1, [sp, #56]	; 0x38
    f0e0:	428b      	cmp	r3, r1
    f0e2:	db03      	blt.n	f0ec <_svfprintf_r+0xb1c>
    f0e4:	f018 0f01 	tst.w	r8, #1
    f0e8:	f000 84cf 	beq.w	fa8a <_svfprintf_r+0x14ba>
    f0ec:	9910      	ldr	r1, [sp, #64]	; 0x40
    f0ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    f0f0:	440a      	add	r2, r1
    f0f2:	e9ca 0100 	strd	r0, r1, [sl]
    f0f6:	9925      	ldr	r1, [sp, #148]	; 0x94
    f0f8:	9226      	str	r2, [sp, #152]	; 0x98
    f0fa:	3101      	adds	r1, #1
    f0fc:	2907      	cmp	r1, #7
    f0fe:	9125      	str	r1, [sp, #148]	; 0x94
    f100:	f300 86a5 	bgt.w	fe4e <_svfprintf_r+0x187e>
    f104:	f10a 0a08 	add.w	sl, sl, #8
    f108:	990e      	ldr	r1, [sp, #56]	; 0x38
    f10a:	1865      	adds	r5, r4, r1
    f10c:	1acc      	subs	r4, r1, r3
    f10e:	9b05      	ldr	r3, [sp, #20]
    f110:	1aed      	subs	r5, r5, r3
    f112:	42a5      	cmp	r5, r4
    f114:	bfa8      	it	ge
    f116:	4625      	movge	r5, r4
    f118:	2d00      	cmp	r5, #0
    f11a:	dd0d      	ble.n	f138 <_svfprintf_r+0xb68>
    f11c:	f8ca 3000 	str.w	r3, [sl]
    f120:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f122:	f8ca 5004 	str.w	r5, [sl, #4]
    f126:	3301      	adds	r3, #1
    f128:	442a      	add	r2, r5
    f12a:	2b07      	cmp	r3, #7
    f12c:	9226      	str	r2, [sp, #152]	; 0x98
    f12e:	9325      	str	r3, [sp, #148]	; 0x94
    f130:	f300 86bb 	bgt.w	feaa <_svfprintf_r+0x18da>
    f134:	f10a 0a08 	add.w	sl, sl, #8
    f138:	2d00      	cmp	r5, #0
    f13a:	bfa8      	it	ge
    f13c:	1b64      	subge	r4, r4, r5
    f13e:	2c00      	cmp	r4, #0
    f140:	f77f abde 	ble.w	e900 <_svfprintf_r+0x330>
    f144:	2c10      	cmp	r4, #16
    f146:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f148:	f340 837c 	ble.w	f844 <_svfprintf_r+0x1274>
    f14c:	ee1b 6a10 	vmov	r6, s22
    f150:	2510      	movs	r5, #16
    f152:	e005      	b.n	f160 <_svfprintf_r+0xb90>
    f154:	f10a 0a08 	add.w	sl, sl, #8
    f158:	3c10      	subs	r4, #16
    f15a:	2c10      	cmp	r4, #16
    f15c:	f340 8372 	ble.w	f844 <_svfprintf_r+0x1274>
    f160:	3301      	adds	r3, #1
    f162:	4970      	ldr	r1, [pc, #448]	; (f324 <_svfprintf_r+0xd54>)
    f164:	3210      	adds	r2, #16
    f166:	2b07      	cmp	r3, #7
    f168:	e9ca 1500 	strd	r1, r5, [sl]
    f16c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f170:	ddf0      	ble.n	f154 <_svfprintf_r+0xb84>
    f172:	aa24      	add	r2, sp, #144	; 0x90
    f174:	4631      	mov	r1, r6
    f176:	4658      	mov	r0, fp
    f178:	f004 f8b6 	bl	132e8 <__ssprint_r>
    f17c:	2800      	cmp	r0, #0
    f17e:	f47f ae8c 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f182:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f186:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f18a:	e7e5      	b.n	f158 <_svfprintf_r+0xb88>
    f18c:	2b30      	cmp	r3, #48	; 0x30
    f18e:	f43f ad8b 	beq.w	eca8 <_svfprintf_r+0x6d8>
    f192:	2330      	movs	r3, #48	; 0x30
    f194:	3802      	subs	r0, #2
    f196:	f804 3c01 	strb.w	r3, [r4, #-1]
    f19a:	ab50      	add	r3, sp, #320	; 0x140
    f19c:	1a1b      	subs	r3, r3, r0
    f19e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f1a2:	9305      	str	r3, [sp, #20]
    f1a4:	4604      	mov	r4, r0
    f1a6:	e584      	b.n	ecb2 <_svfprintf_r+0x6e2>
    f1a8:	f018 0f01 	tst.w	r8, #1
    f1ac:	f47f ae82 	bne.w	eeb4 <_svfprintf_r+0x8e4>
    f1b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1b2:	f8ca 4000 	str.w	r4, [sl]
    f1b6:	3301      	adds	r3, #1
    f1b8:	3201      	adds	r2, #1
    f1ba:	2101      	movs	r1, #1
    f1bc:	2b07      	cmp	r3, #7
    f1be:	9226      	str	r2, [sp, #152]	; 0x98
    f1c0:	9325      	str	r3, [sp, #148]	; 0x94
    f1c2:	f8ca 1004 	str.w	r1, [sl, #4]
    f1c6:	f77f aea5 	ble.w	ef14 <_svfprintf_r+0x944>
    f1ca:	ee1b 1a10 	vmov	r1, s22
    f1ce:	aa24      	add	r2, sp, #144	; 0x90
    f1d0:	4658      	mov	r0, fp
    f1d2:	f004 f889 	bl	132e8 <__ssprint_r>
    f1d6:	2800      	cmp	r0, #0
    f1d8:	f47f ae5f 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f1dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f1e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1e4:	e698      	b.n	ef18 <_svfprintf_r+0x948>
    f1e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    f1e8:	1e4c      	subs	r4, r1, #1
    f1ea:	2c00      	cmp	r4, #0
    f1ec:	f77f ae94 	ble.w	ef18 <_svfprintf_r+0x948>
    f1f0:	2c10      	cmp	r4, #16
    f1f2:	f340 8361 	ble.w	f8b8 <_svfprintf_r+0x12e8>
    f1f6:	ee1b 6a10 	vmov	r6, s22
    f1fa:	2510      	movs	r5, #16
    f1fc:	e005      	b.n	f20a <_svfprintf_r+0xc3a>
    f1fe:	f10a 0a08 	add.w	sl, sl, #8
    f202:	3c10      	subs	r4, #16
    f204:	2c10      	cmp	r4, #16
    f206:	f340 8357 	ble.w	f8b8 <_svfprintf_r+0x12e8>
    f20a:	3301      	adds	r3, #1
    f20c:	4945      	ldr	r1, [pc, #276]	; (f324 <_svfprintf_r+0xd54>)
    f20e:	3210      	adds	r2, #16
    f210:	2b07      	cmp	r3, #7
    f212:	e9ca 1500 	strd	r1, r5, [sl]
    f216:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f21a:	ddf0      	ble.n	f1fe <_svfprintf_r+0xc2e>
    f21c:	aa24      	add	r2, sp, #144	; 0x90
    f21e:	4631      	mov	r1, r6
    f220:	4658      	mov	r0, fp
    f222:	f004 f861 	bl	132e8 <__ssprint_r>
    f226:	2800      	cmp	r0, #0
    f228:	f47f ae37 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f22c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f230:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f234:	e7e5      	b.n	f202 <_svfprintf_r+0xc32>
    f236:	ee1b 1a10 	vmov	r1, s22
    f23a:	aa24      	add	r2, sp, #144	; 0x90
    f23c:	4658      	mov	r0, fp
    f23e:	f004 f853 	bl	132e8 <__ssprint_r>
    f242:	2800      	cmp	r0, #0
    f244:	f47f ae29 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f248:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f24a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f24e:	f7ff bb44 	b.w	e8da <_svfprintf_r+0x30a>
    f252:	9b02      	ldr	r3, [sp, #8]
    f254:	f013 0310 	ands.w	r3, r3, #16
    f258:	f040 80c1 	bne.w	f3de <_svfprintf_r+0xe0e>
    f25c:	9a02      	ldr	r2, [sp, #8]
    f25e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    f262:	f000 837a 	beq.w	f95a <_svfprintf_r+0x138a>
    f266:	9808      	ldr	r0, [sp, #32]
    f268:	f850 2b04 	ldr.w	r2, [r0], #4
    f26c:	9008      	str	r0, [sp, #32]
    f26e:	4619      	mov	r1, r3
    f270:	b292      	uxth	r2, r2
    f272:	2301      	movs	r3, #1
    f274:	e451      	b.n	eb1a <_svfprintf_r+0x54a>
    f276:	f018 0310 	ands.w	r3, r8, #16
    f27a:	d155      	bne.n	f328 <_svfprintf_r+0xd58>
    f27c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f280:	f000 835d 	beq.w	f93e <_svfprintf_r+0x136e>
    f284:	9808      	ldr	r0, [sp, #32]
    f286:	f850 2b04 	ldr.w	r2, [r0], #4
    f28a:	9008      	str	r0, [sp, #32]
    f28c:	4619      	mov	r1, r3
    f28e:	b292      	uxth	r2, r2
    f290:	e4a8      	b.n	ebe4 <_svfprintf_r+0x614>
    f292:	4252      	negs	r2, r2
    f294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f298:	f8cd 8008 	str.w	r8, [sp, #8]
    f29c:	202d      	movs	r0, #45	; 0x2d
    f29e:	2301      	movs	r3, #1
    f2a0:	e43c      	b.n	eb1c <_svfprintf_r+0x54c>
    f2a2:	ee1b 1a10 	vmov	r1, s22
    f2a6:	aa24      	add	r2, sp, #144	; 0x90
    f2a8:	4658      	mov	r0, fp
    f2aa:	f004 f81d 	bl	132e8 <__ssprint_r>
    f2ae:	2800      	cmp	r0, #0
    f2b0:	f47f adf3 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f2b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f2b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f2bc:	e616      	b.n	eeec <_svfprintf_r+0x91c>
    f2be:	ee1b 1a10 	vmov	r1, s22
    f2c2:	aa24      	add	r2, sp, #144	; 0x90
    f2c4:	4658      	mov	r0, fp
    f2c6:	f004 f80f 	bl	132e8 <__ssprint_r>
    f2ca:	2800      	cmp	r0, #0
    f2cc:	f47f ade5 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f2d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f2d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f2d8:	e5fb      	b.n	eed2 <_svfprintf_r+0x902>
    f2da:	f018 0f01 	tst.w	r8, #1
    f2de:	f43f ab0f 	beq.w	e900 <_svfprintf_r+0x330>
    f2e2:	e52a      	b.n	ed3a <_svfprintf_r+0x76a>
    f2e4:	9308      	str	r3, [sp, #32]
    f2e6:	f899 3000 	ldrb.w	r3, [r9]
    f2ea:	f7ff b9cd 	b.w	e688 <_svfprintf_r+0xb8>
    f2ee:	ac50      	add	r4, sp, #320	; 0x140
    f2f0:	e4df      	b.n	ecb2 <_svfprintf_r+0x6e2>
    f2f2:	f418 7f00 	tst.w	r8, #512	; 0x200
    f2f6:	f040 83db 	bne.w	fab0 <_svfprintf_r+0x14e0>
    f2fa:	f853 2b04 	ldr.w	r2, [r3], #4
    f2fe:	9308      	str	r3, [sp, #32]
    f300:	17d1      	asrs	r1, r2, #31
    f302:	460b      	mov	r3, r1
    f304:	f7ff bbb6 	b.w	ea74 <_svfprintf_r+0x4a4>
    f308:	9b08      	ldr	r3, [sp, #32]
    f30a:	9804      	ldr	r0, [sp, #16]
    f30c:	f853 1b04 	ldr.w	r1, [r3], #4
    f310:	9308      	str	r3, [sp, #32]
    f312:	17c2      	asrs	r2, r0, #31
    f314:	e9c1 0200 	strd	r0, r2, [r1]
    f318:	464c      	mov	r4, r9
    f31a:	f7ff b98b 	b.w	e634 <_svfprintf_r+0x64>
    f31e:	bf00      	nop
    f320:	200029a0 	.word	0x200029a0
    f324:	20008774 	.word	0x20008774
    f328:	9b08      	ldr	r3, [sp, #32]
    f32a:	f853 2b04 	ldr.w	r2, [r3], #4
    f32e:	9308      	str	r3, [sp, #32]
    f330:	e458      	b.n	ebe4 <_svfprintf_r+0x614>
    f332:	eeb4 8b48 	vcmp.f64	d8, d8
    f336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f33a:	f180 8694 	bvs.w	10066 <_svfprintf_r+0x1a96>
    f33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f340:	2b61      	cmp	r3, #97	; 0x61
    f342:	f000 8552 	beq.w	fdea <_svfprintf_r+0x181a>
    f346:	2b41      	cmp	r3, #65	; 0x41
    f348:	f000 85c0 	beq.w	fecc <_svfprintf_r+0x18fc>
    f34c:	9b03      	ldr	r3, [sp, #12]
    f34e:	3301      	adds	r3, #1
    f350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f352:	f023 0520 	bic.w	r5, r3, #32
    f356:	f000 8480 	beq.w	fc5a <_svfprintf_r+0x168a>
    f35a:	2d47      	cmp	r5, #71	; 0x47
    f35c:	d104      	bne.n	f368 <_svfprintf_r+0xd98>
    f35e:	9b03      	ldr	r3, [sp, #12]
    f360:	2b00      	cmp	r3, #0
    f362:	bf08      	it	eq
    f364:	2301      	moveq	r3, #1
    f366:	9303      	str	r3, [sp, #12]
    f368:	ee18 3a90 	vmov	r3, s17
    f36c:	2b00      	cmp	r3, #0
    f36e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    f372:	4646      	mov	r6, r8
    f374:	f2c0 8618 	blt.w	ffa8 <_svfprintf_r+0x19d8>
    f378:	eeb0 ab48 	vmov.f64	d10, d8
    f37c:	2300      	movs	r3, #0
    f37e:	4690      	mov	r8, r2
    f380:	9309      	str	r3, [sp, #36]	; 0x24
    f382:	9307      	str	r3, [sp, #28]
    f384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f386:	3b41      	subs	r3, #65	; 0x41
    f388:	2b25      	cmp	r3, #37	; 0x25
    f38a:	f200 8398 	bhi.w	fabe <_svfprintf_r+0x14ee>
    f38e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f392:	046f      	.short	0x046f
    f394:	03960396 	.word	0x03960396
    f398:	04680396 	.word	0x04680396
    f39c:	0396046c 	.word	0x0396046c
    f3a0:	03960396 	.word	0x03960396
    f3a4:	03960396 	.word	0x03960396
    f3a8:	03960396 	.word	0x03960396
    f3ac:	03960396 	.word	0x03960396
    f3b0:	03960396 	.word	0x03960396
    f3b4:	03960396 	.word	0x03960396
    f3b8:	03960396 	.word	0x03960396
    f3bc:	03960396 	.word	0x03960396
    f3c0:	03960396 	.word	0x03960396
    f3c4:	03960396 	.word	0x03960396
    f3c8:	03960396 	.word	0x03960396
    f3cc:	03960396 	.word	0x03960396
    f3d0:	03960396 	.word	0x03960396
    f3d4:	03960396 	.word	0x03960396
    f3d8:	04680396 	.word	0x04680396
    f3dc:	046c      	.short	0x046c
    f3de:	9b08      	ldr	r3, [sp, #32]
    f3e0:	f853 2b04 	ldr.w	r2, [r3], #4
    f3e4:	9308      	str	r3, [sp, #32]
    f3e6:	2301      	movs	r3, #1
    f3e8:	f7ff bb97 	b.w	eb1a <_svfprintf_r+0x54a>
    f3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	f43f a9cf 	beq.w	e792 <_svfprintf_r+0x1c2>
    f3f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	2b00      	cmp	r3, #0
    f3fa:	f43f a9ca 	beq.w	e792 <_svfprintf_r+0x1c2>
    f3fe:	f899 3000 	ldrb.w	r3, [r9]
    f402:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    f406:	f7ff b93f 	b.w	e688 <_svfprintf_r+0xb8>
    f40a:	930b      	str	r3, [sp, #44]	; 0x2c
    f40c:	f8cd 8008 	str.w	r8, [sp, #8]
    f410:	f7ff bbf1 	b.w	ebf6 <_svfprintf_r+0x626>
    f414:	930b      	str	r3, [sp, #44]	; 0x2c
    f416:	4b9a      	ldr	r3, [pc, #616]	; (f680 <_svfprintf_r+0x10b0>)
    f418:	9311      	str	r3, [sp, #68]	; 0x44
    f41a:	f018 0120 	ands.w	r1, r8, #32
    f41e:	f000 8105 	beq.w	f62c <_svfprintf_r+0x105c>
    f422:	9b08      	ldr	r3, [sp, #32]
    f424:	3307      	adds	r3, #7
    f426:	f023 0307 	bic.w	r3, r3, #7
    f42a:	6859      	ldr	r1, [r3, #4]
    f42c:	f853 2b08 	ldr.w	r2, [r3], #8
    f430:	9308      	str	r3, [sp, #32]
    f432:	f018 0f01 	tst.w	r8, #1
    f436:	d00a      	beq.n	f44e <_svfprintf_r+0xe7e>
    f438:	ea52 0301 	orrs.w	r3, r2, r1
    f43c:	d007      	beq.n	f44e <_svfprintf_r+0xe7e>
    f43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f440:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f444:	2330      	movs	r3, #48	; 0x30
    f446:	f048 0802 	orr.w	r8, r8, #2
    f44a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f44e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f452:	9302      	str	r3, [sp, #8]
    f454:	2302      	movs	r3, #2
    f456:	f7ff bb60 	b.w	eb1a <_svfprintf_r+0x54a>
    f45a:	930b      	str	r3, [sp, #44]	; 0x2c
    f45c:	f7ff bbb6 	b.w	ebcc <_svfprintf_r+0x5fc>
    f460:	930b      	str	r3, [sp, #44]	; 0x2c
    f462:	4b88      	ldr	r3, [pc, #544]	; (f684 <_svfprintf_r+0x10b4>)
    f464:	9311      	str	r3, [sp, #68]	; 0x44
    f466:	e7d8      	b.n	f41a <_svfprintf_r+0xe4a>
    f468:	9b08      	ldr	r3, [sp, #32]
    f46a:	2101      	movs	r1, #1
    f46c:	f853 2b04 	ldr.w	r2, [r3], #4
    f470:	9102      	str	r1, [sp, #8]
    f472:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    f476:	9308      	str	r3, [sp, #32]
    f478:	9105      	str	r1, [sp, #20]
    f47a:	ac37      	add	r4, sp, #220	; 0xdc
    f47c:	f7ff baaf 	b.w	e9de <_svfprintf_r+0x40e>
    f480:	ee1b 1a10 	vmov	r1, s22
    f484:	aa24      	add	r2, sp, #144	; 0x90
    f486:	4658      	mov	r0, fp
    f488:	f003 ff2e 	bl	132e8 <__ssprint_r>
    f48c:	2800      	cmp	r0, #0
    f48e:	f47f ad04 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f492:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f494:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f498:	e45d      	b.n	ed56 <_svfprintf_r+0x786>
    f49a:	9b03      	ldr	r3, [sp, #12]
    f49c:	9407      	str	r4, [sp, #28]
    f49e:	2b06      	cmp	r3, #6
    f4a0:	4622      	mov	r2, r4
    f4a2:	bf28      	it	cs
    f4a4:	2306      	movcs	r3, #6
    f4a6:	9403      	str	r4, [sp, #12]
    f4a8:	4621      	mov	r1, r4
    f4aa:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    f4ae:	4c76      	ldr	r4, [pc, #472]	; (f688 <_svfprintf_r+0x10b8>)
    f4b0:	9302      	str	r3, [sp, #8]
    f4b2:	9305      	str	r3, [sp, #20]
    f4b4:	920f      	str	r2, [sp, #60]	; 0x3c
    f4b6:	f7ff ba6c 	b.w	e992 <_svfprintf_r+0x3c2>
    f4ba:	2140      	movs	r1, #64	; 0x40
    f4bc:	4658      	mov	r0, fp
    f4be:	f7fb fa99 	bl	a9f4 <_malloc_r>
    f4c2:	6020      	str	r0, [r4, #0]
    f4c4:	6120      	str	r0, [r4, #16]
    f4c6:	2800      	cmp	r0, #0
    f4c8:	f000 860f 	beq.w	100ea <_svfprintf_r+0x1b1a>
    f4cc:	2340      	movs	r3, #64	; 0x40
    f4ce:	6163      	str	r3, [r4, #20]
    f4d0:	f7ff b89e 	b.w	e610 <_svfprintf_r+0x40>
    f4d4:	2d10      	cmp	r5, #16
    f4d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4d8:	f340 825d 	ble.w	f996 <_svfprintf_r+0x13c6>
    f4dc:	4651      	mov	r1, sl
    f4de:	2610      	movs	r6, #16
    f4e0:	ee1b aa10 	vmov	sl, s22
    f4e4:	e004      	b.n	f4f0 <_svfprintf_r+0xf20>
    f4e6:	3108      	adds	r1, #8
    f4e8:	3d10      	subs	r5, #16
    f4ea:	2d10      	cmp	r5, #16
    f4ec:	f340 8252 	ble.w	f994 <_svfprintf_r+0x13c4>
    f4f0:	3301      	adds	r3, #1
    f4f2:	4866      	ldr	r0, [pc, #408]	; (f68c <_svfprintf_r+0x10bc>)
    f4f4:	3210      	adds	r2, #16
    f4f6:	2b07      	cmp	r3, #7
    f4f8:	e9c1 0600 	strd	r0, r6, [r1]
    f4fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f500:	ddf1      	ble.n	f4e6 <_svfprintf_r+0xf16>
    f502:	aa24      	add	r2, sp, #144	; 0x90
    f504:	4651      	mov	r1, sl
    f506:	4658      	mov	r0, fp
    f508:	f003 feee 	bl	132e8 <__ssprint_r>
    f50c:	2800      	cmp	r0, #0
    f50e:	f47f acc4 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f512:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f516:	a927      	add	r1, sp, #156	; 0x9c
    f518:	e7e6      	b.n	f4e8 <_svfprintf_r+0xf18>
    f51a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f51c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    f520:	18e3      	adds	r3, r4, r3
    f522:	9303      	str	r3, [sp, #12]
    f524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f526:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f52a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f52c:	9d05      	ldr	r5, [sp, #20]
    f52e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    f532:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f536:	940b      	str	r4, [sp, #44]	; 0x2c
    f538:	ee1b 1a10 	vmov	r1, s22
    f53c:	4650      	mov	r0, sl
    f53e:	2b00      	cmp	r3, #0
    f540:	d034      	beq.n	f5ac <_svfprintf_r+0xfdc>
    f542:	f1b8 0f00 	cmp.w	r8, #0
    f546:	d135      	bne.n	f5b4 <_svfprintf_r+0xfe4>
    f548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f54a:	3b01      	subs	r3, #1
    f54c:	3e01      	subs	r6, #1
    f54e:	930d      	str	r3, [sp, #52]	; 0x34
    f550:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f552:	e9c0 3900 	strd	r3, r9, [r0]
    f556:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f558:	3301      	adds	r3, #1
    f55a:	444a      	add	r2, r9
    f55c:	2b07      	cmp	r3, #7
    f55e:	9226      	str	r2, [sp, #152]	; 0x98
    f560:	9325      	str	r3, [sp, #148]	; 0x94
    f562:	dc6c      	bgt.n	f63e <_svfprintf_r+0x106e>
    f564:	3008      	adds	r0, #8
    f566:	9b03      	ldr	r3, [sp, #12]
    f568:	f896 c000 	ldrb.w	ip, [r6]
    f56c:	1b5b      	subs	r3, r3, r5
    f56e:	4563      	cmp	r3, ip
    f570:	bfa8      	it	ge
    f572:	4663      	movge	r3, ip
    f574:	2b00      	cmp	r3, #0
    f576:	469a      	mov	sl, r3
    f578:	dd0c      	ble.n	f594 <_svfprintf_r+0xfc4>
    f57a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    f57c:	3401      	adds	r4, #1
    f57e:	441a      	add	r2, r3
    f580:	2c07      	cmp	r4, #7
    f582:	e9c0 5300 	strd	r5, r3, [r0]
    f586:	9226      	str	r2, [sp, #152]	; 0x98
    f588:	9425      	str	r4, [sp, #148]	; 0x94
    f58a:	f300 8177 	bgt.w	f87c <_svfprintf_r+0x12ac>
    f58e:	f896 c000 	ldrb.w	ip, [r6]
    f592:	3008      	adds	r0, #8
    f594:	f1ba 0f00 	cmp.w	sl, #0
    f598:	bfac      	ite	ge
    f59a:	ebac 040a 	subge.w	r4, ip, sl
    f59e:	4664      	movlt	r4, ip
    f5a0:	2c00      	cmp	r4, #0
    f5a2:	dc0a      	bgt.n	f5ba <_svfprintf_r+0xfea>
    f5a4:	4465      	add	r5, ip
    f5a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d1ca      	bne.n	f542 <_svfprintf_r+0xf72>
    f5ac:	f1b8 0f00 	cmp.w	r8, #0
    f5b0:	f000 83ac 	beq.w	fd0c <_svfprintf_r+0x173c>
    f5b4:	f108 38ff 	add.w	r8, r8, #4294967295
    f5b8:	e7ca      	b.n	f550 <_svfprintf_r+0xf80>
    f5ba:	2c10      	cmp	r4, #16
    f5bc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    f5c0:	dd24      	ble.n	f60c <_svfprintf_r+0x103c>
    f5c2:	9505      	str	r5, [sp, #20]
    f5c4:	f04f 0a10 	mov.w	sl, #16
    f5c8:	4663      	mov	r3, ip
    f5ca:	460d      	mov	r5, r1
    f5cc:	e004      	b.n	f5d8 <_svfprintf_r+0x1008>
    f5ce:	3c10      	subs	r4, #16
    f5d0:	2c10      	cmp	r4, #16
    f5d2:	f100 0008 	add.w	r0, r0, #8
    f5d6:	dd16      	ble.n	f606 <_svfprintf_r+0x1036>
    f5d8:	3301      	adds	r3, #1
    f5da:	492c      	ldr	r1, [pc, #176]	; (f68c <_svfprintf_r+0x10bc>)
    f5dc:	3210      	adds	r2, #16
    f5de:	2b07      	cmp	r3, #7
    f5e0:	e9c0 1a00 	strd	r1, sl, [r0]
    f5e4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f5e8:	ddf1      	ble.n	f5ce <_svfprintf_r+0xffe>
    f5ea:	aa24      	add	r2, sp, #144	; 0x90
    f5ec:	4629      	mov	r1, r5
    f5ee:	4658      	mov	r0, fp
    f5f0:	f003 fe7a 	bl	132e8 <__ssprint_r>
    f5f4:	2800      	cmp	r0, #0
    f5f6:	f47f ac50 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f5fa:	3c10      	subs	r4, #16
    f5fc:	2c10      	cmp	r4, #16
    f5fe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f602:	a827      	add	r0, sp, #156	; 0x9c
    f604:	dce8      	bgt.n	f5d8 <_svfprintf_r+0x1008>
    f606:	4629      	mov	r1, r5
    f608:	9d05      	ldr	r5, [sp, #20]
    f60a:	469c      	mov	ip, r3
    f60c:	f10c 0301 	add.w	r3, ip, #1
    f610:	4422      	add	r2, r4
    f612:	6044      	str	r4, [r0, #4]
    f614:	2b07      	cmp	r3, #7
    f616:	4c1d      	ldr	r4, [pc, #116]	; (f68c <_svfprintf_r+0x10bc>)
    f618:	6004      	str	r4, [r0, #0]
    f61a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f61e:	f300 83c6 	bgt.w	fdae <_svfprintf_r+0x17de>
    f622:	f896 c000 	ldrb.w	ip, [r6]
    f626:	3008      	adds	r0, #8
    f628:	4465      	add	r5, ip
    f62a:	e7bc      	b.n	f5a6 <_svfprintf_r+0xfd6>
    f62c:	f018 0310 	ands.w	r3, r8, #16
    f630:	f000 80c2 	beq.w	f7b8 <_svfprintf_r+0x11e8>
    f634:	9b08      	ldr	r3, [sp, #32]
    f636:	f853 2b04 	ldr.w	r2, [r3], #4
    f63a:	9308      	str	r3, [sp, #32]
    f63c:	e6f9      	b.n	f432 <_svfprintf_r+0xe62>
    f63e:	aa24      	add	r2, sp, #144	; 0x90
    f640:	4658      	mov	r0, fp
    f642:	9105      	str	r1, [sp, #20]
    f644:	f003 fe50 	bl	132e8 <__ssprint_r>
    f648:	2800      	cmp	r0, #0
    f64a:	f47f ac26 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f64e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f650:	9905      	ldr	r1, [sp, #20]
    f652:	a827      	add	r0, sp, #156	; 0x9c
    f654:	e787      	b.n	f566 <_svfprintf_r+0xf96>
    f656:	9802      	ldr	r0, [sp, #8]
    f658:	f8cd a01c 	str.w	sl, [sp, #28]
    f65c:	ac50      	add	r4, sp, #320	; 0x140
    f65e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    f662:	2500      	movs	r5, #0
    f664:	ee0a ba10 	vmov	s20, fp
    f668:	4b09      	ldr	r3, [pc, #36]	; (f690 <_svfprintf_r+0x10c0>)
    f66a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    f66e:	f8cd 9014 	str.w	r9, [sp, #20]
    f672:	46a3      	mov	fp, r4
    f674:	f04f 0805 	mov.w	r8, #5
    f678:	46ac      	mov	ip, r5
    f67a:	4604      	mov	r4, r0
    f67c:	e010      	b.n	f6a0 <_svfprintf_r+0x10d0>
    f67e:	bf00      	nop
    f680:	20000ef4 	.word	0x20000ef4
    f684:	20000f08 	.word	0x20000f08
    f688:	20000f1c 	.word	0x20000f1c
    f68c:	20008774 	.word	0x20008774
    f690:	cccccccd 	.word	0xcccccccd
    f694:	2a0a      	cmp	r2, #10
    f696:	f171 0100 	sbcs.w	r1, r1, #0
    f69a:	d336      	bcc.n	f70a <_svfprintf_r+0x113a>
    f69c:	464a      	mov	r2, r9
    f69e:	4631      	mov	r1, r6
    f6a0:	1850      	adds	r0, r2, r1
    f6a2:	f140 0000 	adc.w	r0, r0, #0
    f6a6:	fba3 5600 	umull	r5, r6, r3, r0
    f6aa:	f026 0503 	bic.w	r5, r6, #3
    f6ae:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    f6b2:	1b40      	subs	r0, r0, r5
    f6b4:	1a15      	subs	r5, r2, r0
    f6b6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    f6ba:	f161 0e00 	sbc.w	lr, r1, #0
    f6be:	fb06 f605 	mul.w	r6, r6, r5
    f6c2:	fba5 9503 	umull	r9, r5, r5, r3
    f6c6:	fb03 660e 	mla	r6, r3, lr, r6
    f6ca:	f009 0e01 	and.w	lr, r9, #1
    f6ce:	442e      	add	r6, r5
    f6d0:	fbae 5e08 	umull	r5, lr, lr, r8
    f6d4:	182d      	adds	r5, r5, r0
    f6d6:	ea4f 0959 	mov.w	r9, r9, lsr #1
    f6da:	3530      	adds	r5, #48	; 0x30
    f6dc:	f80b 5c01 	strb.w	r5, [fp, #-1]
    f6e0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    f6e4:	f10c 0c01 	add.w	ip, ip, #1
    f6e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    f6ec:	0876      	lsrs	r6, r6, #1
    f6ee:	2c00      	cmp	r4, #0
    f6f0:	d0d0      	beq.n	f694 <_svfprintf_r+0x10c4>
    f6f2:	f89a 0000 	ldrb.w	r0, [sl]
    f6f6:	4584      	cmp	ip, r0
    f6f8:	d1cc      	bne.n	f694 <_svfprintf_r+0x10c4>
    f6fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f6fe:	d0c9      	beq.n	f694 <_svfprintf_r+0x10c4>
    f700:	2a0a      	cmp	r2, #10
    f702:	f171 0100 	sbcs.w	r1, r1, #0
    f706:	f080 818f 	bcs.w	fa28 <_svfprintf_r+0x1458>
    f70a:	465c      	mov	r4, fp
    f70c:	ab50      	add	r3, sp, #320	; 0x140
    f70e:	1b1b      	subs	r3, r3, r4
    f710:	f8dd 9014 	ldr.w	r9, [sp, #20]
    f714:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    f718:	ee1a ba10 	vmov	fp, s20
    f71c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    f720:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f724:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    f728:	9305      	str	r3, [sp, #20]
    f72a:	f7ff bac2 	b.w	ecb2 <_svfprintf_r+0x6e2>
    f72e:	ee1b 1a10 	vmov	r1, s22
    f732:	aa24      	add	r2, sp, #144	; 0x90
    f734:	4658      	mov	r0, fp
    f736:	f003 fdd7 	bl	132e8 <__ssprint_r>
    f73a:	2800      	cmp	r0, #0
    f73c:	f47f abad 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f740:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f744:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f746:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f74a:	f7ff b896 	b.w	e87a <_svfprintf_r+0x2aa>
    f74e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f750:	48be      	ldr	r0, [pc, #760]	; (fa4c <_svfprintf_r+0x147c>)
    f752:	f8ca 0000 	str.w	r0, [sl]
    f756:	3301      	adds	r3, #1
    f758:	3201      	adds	r2, #1
    f75a:	2001      	movs	r0, #1
    f75c:	2b07      	cmp	r3, #7
    f75e:	9226      	str	r2, [sp, #152]	; 0x98
    f760:	9325      	str	r3, [sp, #148]	; 0x94
    f762:	f8ca 0004 	str.w	r0, [sl, #4]
    f766:	f300 8177 	bgt.w	fa58 <_svfprintf_r+0x1488>
    f76a:	f10a 0a08 	add.w	sl, sl, #8
    f76e:	2900      	cmp	r1, #0
    f770:	f040 80af 	bne.w	f8d2 <_svfprintf_r+0x1302>
    f774:	990e      	ldr	r1, [sp, #56]	; 0x38
    f776:	f008 0301 	and.w	r3, r8, #1
    f77a:	430b      	orrs	r3, r1
    f77c:	f43f a8c0 	beq.w	e900 <_svfprintf_r+0x330>
    f780:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f782:	9912      	ldr	r1, [sp, #72]	; 0x48
    f784:	441a      	add	r2, r3
    f786:	e9ca 1300 	strd	r1, r3, [sl]
    f78a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f78c:	9226      	str	r2, [sp, #152]	; 0x98
    f78e:	3301      	adds	r3, #1
    f790:	2b07      	cmp	r3, #7
    f792:	9325      	str	r3, [sp, #148]	; 0x94
    f794:	f300 8252 	bgt.w	fc3c <_svfprintf_r+0x166c>
    f798:	f10a 0a08 	add.w	sl, sl, #8
    f79c:	990e      	ldr	r1, [sp, #56]	; 0x38
    f79e:	f8ca 4000 	str.w	r4, [sl]
    f7a2:	3301      	adds	r3, #1
    f7a4:	440a      	add	r2, r1
    f7a6:	2b07      	cmp	r3, #7
    f7a8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f7ac:	f8ca 1004 	str.w	r1, [sl, #4]
    f7b0:	f77f a8a4 	ble.w	e8fc <_svfprintf_r+0x32c>
    f7b4:	f7ff bbbd 	b.w	ef32 <_svfprintf_r+0x962>
    f7b8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f7bc:	f000 80dd 	beq.w	f97a <_svfprintf_r+0x13aa>
    f7c0:	9808      	ldr	r0, [sp, #32]
    f7c2:	f850 2b04 	ldr.w	r2, [r0], #4
    f7c6:	9008      	str	r0, [sp, #32]
    f7c8:	4619      	mov	r1, r3
    f7ca:	b292      	uxth	r2, r2
    f7cc:	e631      	b.n	f432 <_svfprintf_r+0xe62>
    f7ce:	ee1b 1a10 	vmov	r1, s22
    f7d2:	aa24      	add	r2, sp, #144	; 0x90
    f7d4:	4658      	mov	r0, fp
    f7d6:	f003 fd87 	bl	132e8 <__ssprint_r>
    f7da:	2800      	cmp	r0, #0
    f7dc:	f47f ab5d 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f7e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f7e2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f7e6:	f7ff baa3 	b.w	ed30 <_svfprintf_r+0x760>
    f7ea:	ae22      	add	r6, sp, #136	; 0x88
    f7ec:	2208      	movs	r2, #8
    f7ee:	2100      	movs	r1, #0
    f7f0:	4630      	mov	r0, r6
    f7f2:	941d      	str	r4, [sp, #116]	; 0x74
    f7f4:	f7fd f826 	bl	c844 <memset>
    f7f8:	9b03      	ldr	r3, [sp, #12]
    f7fa:	1c5a      	adds	r2, r3, #1
    f7fc:	f000 80db 	beq.w	f9b6 <_svfprintf_r+0x13e6>
    f800:	2500      	movs	r5, #0
    f802:	f8cd 9008 	str.w	r9, [sp, #8]
    f806:	f8cd 801c 	str.w	r8, [sp, #28]
    f80a:	4699      	mov	r9, r3
    f80c:	46a8      	mov	r8, r5
    f80e:	e00c      	b.n	f82a <_svfprintf_r+0x125a>
    f810:	a937      	add	r1, sp, #220	; 0xdc
    f812:	4658      	mov	r0, fp
    f814:	f003 fc3e 	bl	13094 <_wcrtomb_r>
    f818:	1c43      	adds	r3, r0, #1
    f81a:	4440      	add	r0, r8
    f81c:	f000 83c8 	beq.w	ffb0 <_svfprintf_r+0x19e0>
    f820:	4548      	cmp	r0, r9
    f822:	dc08      	bgt.n	f836 <_svfprintf_r+0x1266>
    f824:	f000 8418 	beq.w	10058 <_svfprintf_r+0x1a88>
    f828:	4680      	mov	r8, r0
    f82a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    f82c:	5952      	ldr	r2, [r2, r5]
    f82e:	4633      	mov	r3, r6
    f830:	3504      	adds	r5, #4
    f832:	2a00      	cmp	r2, #0
    f834:	d1ec      	bne.n	f810 <_svfprintf_r+0x1240>
    f836:	f8cd 8014 	str.w	r8, [sp, #20]
    f83a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f83e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f842:	e0c5      	b.n	f9d0 <_svfprintf_r+0x1400>
    f844:	3301      	adds	r3, #1
    f846:	4982      	ldr	r1, [pc, #520]	; (fa50 <_svfprintf_r+0x1480>)
    f848:	f8ca 4004 	str.w	r4, [sl, #4]
    f84c:	4422      	add	r2, r4
    f84e:	2b07      	cmp	r3, #7
    f850:	f8ca 1000 	str.w	r1, [sl]
    f854:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f858:	f77f a850 	ble.w	e8fc <_svfprintf_r+0x32c>
    f85c:	f7ff bb69 	b.w	ef32 <_svfprintf_r+0x962>
    f860:	ee1b 1a10 	vmov	r1, s22
    f864:	aa24      	add	r2, sp, #144	; 0x90
    f866:	4658      	mov	r0, fp
    f868:	f003 fd3e 	bl	132e8 <__ssprint_r>
    f86c:	2800      	cmp	r0, #0
    f86e:	f47f ab14 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f872:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f874:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f878:	f7ff b829 	b.w	e8ce <_svfprintf_r+0x2fe>
    f87c:	aa24      	add	r2, sp, #144	; 0x90
    f87e:	4658      	mov	r0, fp
    f880:	9105      	str	r1, [sp, #20]
    f882:	f003 fd31 	bl	132e8 <__ssprint_r>
    f886:	2800      	cmp	r0, #0
    f888:	f47f ab07 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f88c:	f896 c000 	ldrb.w	ip, [r6]
    f890:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f892:	9905      	ldr	r1, [sp, #20]
    f894:	a827      	add	r0, sp, #156	; 0x9c
    f896:	e67d      	b.n	f594 <_svfprintf_r+0xfc4>
    f898:	2b01      	cmp	r3, #1
    f89a:	f8cd 8008 	str.w	r8, [sp, #8]
    f89e:	f47f a9f3 	bne.w	ec88 <_svfprintf_r+0x6b8>
    f8a2:	f7ff bb93 	b.w	efcc <_svfprintf_r+0x9fc>
    f8a6:	9b08      	ldr	r3, [sp, #32]
    f8a8:	9904      	ldr	r1, [sp, #16]
    f8aa:	f853 2b04 	ldr.w	r2, [r3], #4
    f8ae:	464c      	mov	r4, r9
    f8b0:	6011      	str	r1, [r2, #0]
    f8b2:	9308      	str	r3, [sp, #32]
    f8b4:	f7fe bebe 	b.w	e634 <_svfprintf_r+0x64>
    f8b8:	3301      	adds	r3, #1
    f8ba:	4965      	ldr	r1, [pc, #404]	; (fa50 <_svfprintf_r+0x1480>)
    f8bc:	f8ca 4004 	str.w	r4, [sl, #4]
    f8c0:	4422      	add	r2, r4
    f8c2:	2b07      	cmp	r3, #7
    f8c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f8c8:	f8ca 1000 	str.w	r1, [sl]
    f8cc:	f77f ab22 	ble.w	ef14 <_svfprintf_r+0x944>
    f8d0:	e47b      	b.n	f1ca <_svfprintf_r+0xbfa>
    f8d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f8d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    f8d6:	441a      	add	r2, r3
    f8d8:	e9ca 0300 	strd	r0, r3, [sl]
    f8dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f8de:	9226      	str	r2, [sp, #152]	; 0x98
    f8e0:	3301      	adds	r3, #1
    f8e2:	2b07      	cmp	r3, #7
    f8e4:	9325      	str	r3, [sp, #148]	; 0x94
    f8e6:	f300 81a9 	bgt.w	fc3c <_svfprintf_r+0x166c>
    f8ea:	f10a 0a08 	add.w	sl, sl, #8
    f8ee:	2900      	cmp	r1, #0
    f8f0:	f6bf af54 	bge.w	f79c <_svfprintf_r+0x11cc>
    f8f4:	424d      	negs	r5, r1
    f8f6:	3110      	adds	r1, #16
    f8f8:	f280 830f 	bge.w	ff1a <_svfprintf_r+0x194a>
    f8fc:	ee1b 1a10 	vmov	r1, s22
    f900:	2610      	movs	r6, #16
    f902:	e005      	b.n	f910 <_svfprintf_r+0x1340>
    f904:	f10a 0a08 	add.w	sl, sl, #8
    f908:	3d10      	subs	r5, #16
    f90a:	2d10      	cmp	r5, #16
    f90c:	f340 8305 	ble.w	ff1a <_svfprintf_r+0x194a>
    f910:	3301      	adds	r3, #1
    f912:	484f      	ldr	r0, [pc, #316]	; (fa50 <_svfprintf_r+0x1480>)
    f914:	3210      	adds	r2, #16
    f916:	2b07      	cmp	r3, #7
    f918:	e9ca 0600 	strd	r0, r6, [sl]
    f91c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f920:	ddf0      	ble.n	f904 <_svfprintf_r+0x1334>
    f922:	aa24      	add	r2, sp, #144	; 0x90
    f924:	4658      	mov	r0, fp
    f926:	9103      	str	r1, [sp, #12]
    f928:	f003 fcde 	bl	132e8 <__ssprint_r>
    f92c:	2800      	cmp	r0, #0
    f92e:	f47f aab4 	bne.w	ee9a <_svfprintf_r+0x8ca>
    f932:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f936:	9903      	ldr	r1, [sp, #12]
    f938:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f93c:	e7e4      	b.n	f908 <_svfprintf_r+0x1338>
    f93e:	9b08      	ldr	r3, [sp, #32]
    f940:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f944:	bf1a      	itte	ne
    f946:	4611      	movne	r1, r2
    f948:	f853 2b04 	ldrne.w	r2, [r3], #4
    f94c:	f853 2b04 	ldreq.w	r2, [r3], #4
    f950:	9308      	str	r3, [sp, #32]
    f952:	bf18      	it	ne
    f954:	b2d2      	uxtbne	r2, r2
    f956:	f7ff b945 	b.w	ebe4 <_svfprintf_r+0x614>
    f95a:	9b02      	ldr	r3, [sp, #8]
    f95c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    f960:	9b08      	ldr	r3, [sp, #32]
    f962:	bf1a      	itte	ne
    f964:	4611      	movne	r1, r2
    f966:	f853 2b04 	ldrne.w	r2, [r3], #4
    f96a:	f853 2b04 	ldreq.w	r2, [r3], #4
    f96e:	9308      	str	r3, [sp, #32]
    f970:	bf18      	it	ne
    f972:	b2d2      	uxtbne	r2, r2
    f974:	2301      	movs	r3, #1
    f976:	f7ff b8d0 	b.w	eb1a <_svfprintf_r+0x54a>
    f97a:	9b08      	ldr	r3, [sp, #32]
    f97c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f980:	bf1a      	itte	ne
    f982:	4611      	movne	r1, r2
    f984:	f853 2b04 	ldrne.w	r2, [r3], #4
    f988:	f853 2b04 	ldreq.w	r2, [r3], #4
    f98c:	9308      	str	r3, [sp, #32]
    f98e:	bf18      	it	ne
    f990:	b2d2      	uxtbne	r2, r2
    f992:	e54e      	b.n	f432 <_svfprintf_r+0xe62>
    f994:	468a      	mov	sl, r1
    f996:	3301      	adds	r3, #1
    f998:	492d      	ldr	r1, [pc, #180]	; (fa50 <_svfprintf_r+0x1480>)
    f99a:	f8ca 5004 	str.w	r5, [sl, #4]
    f99e:	442a      	add	r2, r5
    f9a0:	2b07      	cmp	r3, #7
    f9a2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f9a6:	f8ca 1000 	str.w	r1, [sl]
    f9aa:	f300 8139 	bgt.w	fc20 <_svfprintf_r+0x1650>
    f9ae:	f10a 0a08 	add.w	sl, sl, #8
    f9b2:	f7ff bb8c 	b.w	f0ce <_svfprintf_r+0xafe>
    f9b6:	2300      	movs	r3, #0
    f9b8:	4619      	mov	r1, r3
    f9ba:	9600      	str	r6, [sp, #0]
    f9bc:	aa1d      	add	r2, sp, #116	; 0x74
    f9be:	4658      	mov	r0, fp
    f9c0:	f003 fb8e 	bl	130e0 <_wcsrtombs_r>
    f9c4:	4603      	mov	r3, r0
    f9c6:	3301      	adds	r3, #1
    f9c8:	9005      	str	r0, [sp, #20]
    f9ca:	f000 82f1 	beq.w	ffb0 <_svfprintf_r+0x19e0>
    f9ce:	941d      	str	r4, [sp, #116]	; 0x74
    f9d0:	9b05      	ldr	r3, [sp, #20]
    f9d2:	2b00      	cmp	r3, #0
    f9d4:	d04e      	beq.n	fa74 <_svfprintf_r+0x14a4>
    f9d6:	2b63      	cmp	r3, #99	; 0x63
    f9d8:	f300 8118 	bgt.w	fc0c <_svfprintf_r+0x163c>
    f9dc:	2300      	movs	r3, #0
    f9de:	9307      	str	r3, [sp, #28]
    f9e0:	ac37      	add	r4, sp, #220	; 0xdc
    f9e2:	2208      	movs	r2, #8
    f9e4:	2100      	movs	r1, #0
    f9e6:	4630      	mov	r0, r6
    f9e8:	f7fc ff2c 	bl	c844 <memset>
    f9ec:	9d05      	ldr	r5, [sp, #20]
    f9ee:	9600      	str	r6, [sp, #0]
    f9f0:	462b      	mov	r3, r5
    f9f2:	aa1d      	add	r2, sp, #116	; 0x74
    f9f4:	4621      	mov	r1, r4
    f9f6:	4658      	mov	r0, fp
    f9f8:	f003 fb72 	bl	130e0 <_wcsrtombs_r>
    f9fc:	4285      	cmp	r5, r0
    f9fe:	f040 837c 	bne.w	100fa <_svfprintf_r+0x1b2a>
    fa02:	9a05      	ldr	r2, [sp, #20]
    fa04:	2300      	movs	r3, #0
    fa06:	54a3      	strb	r3, [r4, r2]
    fa08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fa0c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fa10:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fa14:	9303      	str	r3, [sp, #12]
    fa16:	9202      	str	r2, [sp, #8]
    fa18:	930f      	str	r3, [sp, #60]	; 0x3c
    fa1a:	f7fe bfba 	b.w	e992 <_svfprintf_r+0x3c2>
    fa1e:	212d      	movs	r1, #45	; 0x2d
    fa20:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    fa24:	f7fe bfa4 	b.w	e970 <_svfprintf_r+0x3a0>
    fa28:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fa2a:	9915      	ldr	r1, [sp, #84]	; 0x54
    fa2c:	ebab 0b03 	sub.w	fp, fp, r3
    fa30:	461a      	mov	r2, r3
    fa32:	4658      	mov	r0, fp
    fa34:	f7fc ff9e 	bl	c974 <strncpy>
    fa38:	f89a 2001 	ldrb.w	r2, [sl, #1]
    fa3c:	4b05      	ldr	r3, [pc, #20]	; (fa54 <_svfprintf_r+0x1484>)
    fa3e:	b10a      	cbz	r2, fa44 <_svfprintf_r+0x1474>
    fa40:	f10a 0a01 	add.w	sl, sl, #1
    fa44:	f04f 0c00 	mov.w	ip, #0
    fa48:	e628      	b.n	f69c <_svfprintf_r+0x10cc>
    fa4a:	bf00      	nop
    fa4c:	20000f24 	.word	0x20000f24
    fa50:	20008774 	.word	0x20008774
    fa54:	cccccccd 	.word	0xcccccccd
    fa58:	ee1b 1a10 	vmov	r1, s22
    fa5c:	aa24      	add	r2, sp, #144	; 0x90
    fa5e:	4658      	mov	r0, fp
    fa60:	f003 fc42 	bl	132e8 <__ssprint_r>
    fa64:	2800      	cmp	r0, #0
    fa66:	f47f aa18 	bne.w	ee9a <_svfprintf_r+0x8ca>
    fa6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fa6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa6e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fa72:	e67c      	b.n	f76e <_svfprintf_r+0x119e>
    fa74:	9b05      	ldr	r3, [sp, #20]
    fa76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fa7a:	930f      	str	r3, [sp, #60]	; 0x3c
    fa7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fa80:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fa84:	9307      	str	r3, [sp, #28]
    fa86:	f7fe bf84 	b.w	e992 <_svfprintf_r+0x3c2>
    fa8a:	990e      	ldr	r1, [sp, #56]	; 0x38
    fa8c:	9805      	ldr	r0, [sp, #20]
    fa8e:	1865      	adds	r5, r4, r1
    fa90:	1a2d      	subs	r5, r5, r0
    fa92:	1acc      	subs	r4, r1, r3
    fa94:	42a5      	cmp	r5, r4
    fa96:	bfa8      	it	ge
    fa98:	4625      	movge	r5, r4
    fa9a:	f7ff bb4d 	b.w	f138 <_svfprintf_r+0xb68>
    fa9e:	9b08      	ldr	r3, [sp, #32]
    faa0:	9904      	ldr	r1, [sp, #16]
    faa2:	f853 2b04 	ldr.w	r2, [r3], #4
    faa6:	9308      	str	r3, [sp, #32]
    faa8:	8011      	strh	r1, [r2, #0]
    faaa:	464c      	mov	r4, r9
    faac:	f7fe bdc2 	b.w	e634 <_svfprintf_r+0x64>
    fab0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    fab4:	9308      	str	r3, [sp, #32]
    fab6:	17d1      	asrs	r1, r2, #31
    fab8:	460b      	mov	r3, r1
    faba:	f7fe bfdb 	b.w	ea74 <_svfprintf_r+0x4a4>
    fabe:	9a03      	ldr	r2, [sp, #12]
    fac0:	2102      	movs	r1, #2
    fac2:	ab22      	add	r3, sp, #136	; 0x88
    fac4:	9301      	str	r3, [sp, #4]
    fac6:	ab1d      	add	r3, sp, #116	; 0x74
    fac8:	9300      	str	r3, [sp, #0]
    faca:	4658      	mov	r0, fp
    facc:	ab1b      	add	r3, sp, #108	; 0x6c
    face:	eeb0 0b4a 	vmov.f64	d0, d10
    fad2:	9202      	str	r2, [sp, #8]
    fad4:	f002 fa14 	bl	11f00 <_dtoa_r>
    fad8:	2d47      	cmp	r5, #71	; 0x47
    fada:	9a02      	ldr	r2, [sp, #8]
    fadc:	4604      	mov	r4, r0
    fade:	f000 8161 	beq.w	fda4 <_svfprintf_r+0x17d4>
    fae2:	2d46      	cmp	r5, #70	; 0x46
    fae4:	4410      	add	r0, r2
    fae6:	d105      	bne.n	faf4 <_svfprintf_r+0x1524>
    fae8:	7823      	ldrb	r3, [r4, #0]
    faea:	2b30      	cmp	r3, #48	; 0x30
    faec:	f000 826f 	beq.w	ffce <_svfprintf_r+0x19fe>
    faf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    faf2:	4410      	add	r0, r2
    faf4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    faf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fafc:	f040 8146 	bne.w	fd8c <_svfprintf_r+0x17bc>
    fb00:	4603      	mov	r3, r0
    fb02:	1b1b      	subs	r3, r3, r4
    fb04:	930e      	str	r3, [sp, #56]	; 0x38
    fb06:	2d47      	cmp	r5, #71	; 0x47
    fb08:	f000 8110 	beq.w	fd2c <_svfprintf_r+0x175c>
    fb0c:	2d46      	cmp	r5, #70	; 0x46
    fb0e:	f000 81b5 	beq.w	fe7c <_svfprintf_r+0x18ac>
    fb12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fb14:	930c      	str	r3, [sp, #48]	; 0x30
    fb16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fb18:	2d41      	cmp	r5, #65	; 0x41
    fb1a:	f103 33ff 	add.w	r3, r3, #4294967295
    fb1e:	931b      	str	r3, [sp, #108]	; 0x6c
    fb20:	f000 81e5 	beq.w	feee <_svfprintf_r+0x191e>
    fb24:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    fb28:	2100      	movs	r1, #0
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	bfb8      	it	lt
    fb2e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    fb30:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    fb34:	bfba      	itte	lt
    fb36:	f1c3 0301 	rsblt	r3, r3, #1
    fb3a:	222d      	movlt	r2, #45	; 0x2d
    fb3c:	222b      	movge	r2, #43	; 0x2b
    fb3e:	2b09      	cmp	r3, #9
    fb40:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    fb44:	f340 81da 	ble.w	fefc <_svfprintf_r+0x192c>
    fb48:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    fb4c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; ff6c <_svfprintf_r+0x199c>
    fb50:	462a      	mov	r2, r5
    fb52:	4610      	mov	r0, r2
    fb54:	fb8c 2103 	smull	r2, r1, ip, r3
    fb58:	17da      	asrs	r2, r3, #31
    fb5a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    fb5e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    fb62:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    fb66:	3130      	adds	r1, #48	; 0x30
    fb68:	f800 1c01 	strb.w	r1, [r0, #-1]
    fb6c:	4619      	mov	r1, r3
    fb6e:	2963      	cmp	r1, #99	; 0x63
    fb70:	4613      	mov	r3, r2
    fb72:	f100 32ff 	add.w	r2, r0, #4294967295
    fb76:	dcec      	bgt.n	fb52 <_svfprintf_r+0x1582>
    fb78:	3330      	adds	r3, #48	; 0x30
    fb7a:	b2d9      	uxtb	r1, r3
    fb7c:	1e83      	subs	r3, r0, #2
    fb7e:	429d      	cmp	r5, r3
    fb80:	f802 1c01 	strb.w	r1, [r2, #-1]
    fb84:	f240 828b 	bls.w	1009e <_svfprintf_r+0x1ace>
    fb88:	4613      	mov	r3, r2
    fb8a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    fb8e:	e001      	b.n	fb94 <_svfprintf_r+0x15c4>
    fb90:	f813 1b01 	ldrb.w	r1, [r3], #1
    fb94:	f802 1b01 	strb.w	r1, [r2], #1
    fb98:	429d      	cmp	r5, r3
    fb9a:	d1f9      	bne.n	fb90 <_svfprintf_r+0x15c0>
    fb9c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fba0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    fba4:	1a1b      	subs	r3, r3, r0
    fba6:	4413      	add	r3, r2
    fba8:	aa1e      	add	r2, sp, #120	; 0x78
    fbaa:	1a9b      	subs	r3, r3, r2
    fbac:	9314      	str	r3, [sp, #80]	; 0x50
    fbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fbb2:	2b01      	cmp	r3, #1
    fbb4:	441a      	add	r2, r3
    fbb6:	9205      	str	r2, [sp, #20]
    fbb8:	f340 8203 	ble.w	ffc2 <_svfprintf_r+0x19f2>
    fbbc:	9b05      	ldr	r3, [sp, #20]
    fbbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fbc0:	4413      	add	r3, r2
    fbc2:	9305      	str	r3, [sp, #20]
    fbc4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    fbc8:	9a05      	ldr	r2, [sp, #20]
    fbca:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    fbce:	2300      	movs	r3, #0
    fbd0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fbd4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fbd8:	930f      	str	r3, [sp, #60]	; 0x3c
    fbda:	9202      	str	r2, [sp, #8]
    fbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbde:	2b00      	cmp	r3, #0
    fbe0:	f040 80b1 	bne.w	fd46 <_svfprintf_r+0x1776>
    fbe4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fbe8:	9303      	str	r3, [sp, #12]
    fbea:	f7fe bed2 	b.w	e992 <_svfprintf_r+0x3c2>
    fbee:	4620      	mov	r0, r4
    fbf0:	f7fd f966 	bl	cec0 <strlen>
    fbf4:	4602      	mov	r2, r0
    fbf6:	9005      	str	r0, [sp, #20]
    fbf8:	f7fe bf20 	b.w	ea3c <_svfprintf_r+0x46c>
    fbfc:	ee1b 1a10 	vmov	r1, s22
    fc00:	aa24      	add	r2, sp, #144	; 0x90
    fc02:	4658      	mov	r0, fp
    fc04:	f003 fb70 	bl	132e8 <__ssprint_r>
    fc08:	f7fe bded 	b.w	e7e6 <_svfprintf_r+0x216>
    fc0c:	1c59      	adds	r1, r3, #1
    fc0e:	4658      	mov	r0, fp
    fc10:	f7fa fef0 	bl	a9f4 <_malloc_r>
    fc14:	4604      	mov	r4, r0
    fc16:	2800      	cmp	r0, #0
    fc18:	f000 81ca 	beq.w	ffb0 <_svfprintf_r+0x19e0>
    fc1c:	9007      	str	r0, [sp, #28]
    fc1e:	e6e0      	b.n	f9e2 <_svfprintf_r+0x1412>
    fc20:	ee1b 1a10 	vmov	r1, s22
    fc24:	aa24      	add	r2, sp, #144	; 0x90
    fc26:	4658      	mov	r0, fp
    fc28:	f003 fb5e 	bl	132e8 <__ssprint_r>
    fc2c:	2800      	cmp	r0, #0
    fc2e:	f47f a934 	bne.w	ee9a <_svfprintf_r+0x8ca>
    fc32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fc38:	f7ff ba49 	b.w	f0ce <_svfprintf_r+0xafe>
    fc3c:	ee1b 1a10 	vmov	r1, s22
    fc40:	aa24      	add	r2, sp, #144	; 0x90
    fc42:	4658      	mov	r0, fp
    fc44:	f003 fb50 	bl	132e8 <__ssprint_r>
    fc48:	2800      	cmp	r0, #0
    fc4a:	f47f a926 	bne.w	ee9a <_svfprintf_r+0x8ca>
    fc4e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fc52:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fc54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fc58:	e649      	b.n	f8ee <_svfprintf_r+0x131e>
    fc5a:	2306      	movs	r3, #6
    fc5c:	9303      	str	r3, [sp, #12]
    fc5e:	f7ff bb83 	b.w	f368 <_svfprintf_r+0xd98>
    fc62:	9b03      	ldr	r3, [sp, #12]
    fc64:	2102      	movs	r1, #2
    fc66:	1c5a      	adds	r2, r3, #1
    fc68:	e72b      	b.n	fac2 <_svfprintf_r+0x14f2>
    fc6a:	9a03      	ldr	r2, [sp, #12]
    fc6c:	2103      	movs	r1, #3
    fc6e:	e728      	b.n	fac2 <_svfprintf_r+0x14f2>
    fc70:	a81b      	add	r0, sp, #108	; 0x6c
    fc72:	eeb0 0b4a 	vmov.f64	d0, d10
    fc76:	f002 f817 	bl	11ca8 <frexp>
    fc7a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    fc7e:	ee20 0b07 	vmul.f64	d0, d0, d7
    fc82:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc8a:	d101      	bne.n	fc90 <_svfprintf_r+0x16c0>
    fc8c:	2301      	movs	r3, #1
    fc8e:	931b      	str	r3, [sp, #108]	; 0x6c
    fc90:	48b3      	ldr	r0, [pc, #716]	; (ff60 <_svfprintf_r+0x1990>)
    fc92:	9b03      	ldr	r3, [sp, #12]
    fc94:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    fc98:	3b01      	subs	r3, #1
    fc9a:	4622      	mov	r2, r4
    fc9c:	e004      	b.n	fca8 <_svfprintf_r+0x16d8>
    fc9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fca6:	d013      	beq.n	fcd0 <_svfprintf_r+0x1700>
    fca8:	ee20 0b05 	vmul.f64	d0, d0, d5
    fcac:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    fcb0:	f1b3 3fff 	cmp.w	r3, #4294967295
    fcb4:	ee17 1a90 	vmov	r1, s15
    fcb8:	5c41      	ldrb	r1, [r0, r1]
    fcba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    fcbe:	4694      	mov	ip, r2
    fcc0:	ee30 0b46 	vsub.f64	d0, d0, d6
    fcc4:	f802 1b01 	strb.w	r1, [r2], #1
    fcc8:	4619      	mov	r1, r3
    fcca:	f103 33ff 	add.w	r3, r3, #4294967295
    fcce:	d1e6      	bne.n	fc9e <_svfprintf_r+0x16ce>
    fcd0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    fcd4:	eeb4 0bc6 	vcmpe.f64	d0, d6
    fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fcdc:	f300 8148 	bgt.w	ff70 <_svfprintf_r+0x19a0>
    fce0:	eeb4 0b46 	vcmp.f64	d0, d6
    fce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fce8:	d104      	bne.n	fcf4 <_svfprintf_r+0x1724>
    fcea:	ee17 3a90 	vmov	r3, s15
    fcee:	07db      	lsls	r3, r3, #31
    fcf0:	f100 813e 	bmi.w	ff70 <_svfprintf_r+0x19a0>
    fcf4:	2900      	cmp	r1, #0
    fcf6:	db06      	blt.n	fd06 <_svfprintf_r+0x1736>
    fcf8:	1c4b      	adds	r3, r1, #1
    fcfa:	4413      	add	r3, r2
    fcfc:	2130      	movs	r1, #48	; 0x30
    fcfe:	f802 1b01 	strb.w	r1, [r2], #1
    fd02:	4293      	cmp	r3, r2
    fd04:	d1fb      	bne.n	fcfe <_svfprintf_r+0x172e>
    fd06:	1b13      	subs	r3, r2, r4
    fd08:	930e      	str	r3, [sp, #56]	; 0x38
    fd0a:	e6fc      	b.n	fb06 <_svfprintf_r+0x1536>
    fd0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fd0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd10:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    fd14:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    fd18:	9613      	str	r6, [sp, #76]	; 0x4c
    fd1a:	18e3      	adds	r3, r4, r3
    fd1c:	429d      	cmp	r5, r3
    fd1e:	4629      	mov	r1, r5
    fd20:	bf28      	it	cs
    fd22:	4619      	movcs	r1, r3
    fd24:	4682      	mov	sl, r0
    fd26:	9105      	str	r1, [sp, #20]
    fd28:	f7ff b9d8 	b.w	f0dc <_svfprintf_r+0xb0c>
    fd2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fd2e:	930c      	str	r3, [sp, #48]	; 0x30
    fd30:	1cda      	adds	r2, r3, #3
    fd32:	db02      	blt.n	fd3a <_svfprintf_r+0x176a>
    fd34:	9a03      	ldr	r2, [sp, #12]
    fd36:	4293      	cmp	r3, r2
    fd38:	dd0c      	ble.n	fd54 <_svfprintf_r+0x1784>
    fd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fd3c:	3b02      	subs	r3, #2
    fd3e:	930b      	str	r3, [sp, #44]	; 0x2c
    fd40:	f023 0520 	bic.w	r5, r3, #32
    fd44:	e6e7      	b.n	fb16 <_svfprintf_r+0x1546>
    fd46:	212d      	movs	r1, #45	; 0x2d
    fd48:	2300      	movs	r3, #0
    fd4a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    fd4e:	9303      	str	r3, [sp, #12]
    fd50:	f7fe be22 	b.w	e998 <_svfprintf_r+0x3c8>
    fd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fd58:	4293      	cmp	r3, r2
    fd5a:	f2c0 80bd 	blt.w	fed8 <_svfprintf_r+0x1908>
    fd5e:	07f0      	lsls	r0, r6, #31
    fd60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd62:	f140 8132 	bpl.w	ffca <_svfprintf_r+0x19fa>
    fd66:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fd68:	4413      	add	r3, r2
    fd6a:	9305      	str	r3, [sp, #20]
    fd6c:	0571      	lsls	r1, r6, #21
    fd6e:	d503      	bpl.n	fd78 <_svfprintf_r+0x17a8>
    fd70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd72:	2b00      	cmp	r3, #0
    fd74:	f300 8135 	bgt.w	ffe2 <_svfprintf_r+0x1a12>
    fd78:	9b05      	ldr	r3, [sp, #20]
    fd7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fd7e:	9302      	str	r3, [sp, #8]
    fd80:	2367      	movs	r3, #103	; 0x67
    fd82:	930b      	str	r3, [sp, #44]	; 0x2c
    fd84:	2300      	movs	r3, #0
    fd86:	930f      	str	r3, [sp, #60]	; 0x3c
    fd88:	930d      	str	r3, [sp, #52]	; 0x34
    fd8a:	e727      	b.n	fbdc <_svfprintf_r+0x160c>
    fd8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd8e:	4283      	cmp	r3, r0
    fd90:	f4bf aeb7 	bcs.w	fb02 <_svfprintf_r+0x1532>
    fd94:	2130      	movs	r1, #48	; 0x30
    fd96:	1c5a      	adds	r2, r3, #1
    fd98:	9222      	str	r2, [sp, #136]	; 0x88
    fd9a:	7019      	strb	r1, [r3, #0]
    fd9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd9e:	4298      	cmp	r0, r3
    fda0:	d8f9      	bhi.n	fd96 <_svfprintf_r+0x17c6>
    fda2:	e6ae      	b.n	fb02 <_svfprintf_r+0x1532>
    fda4:	07f3      	lsls	r3, r6, #31
    fda6:	f100 80a7 	bmi.w	fef8 <_svfprintf_r+0x1928>
    fdaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdac:	e6a9      	b.n	fb02 <_svfprintf_r+0x1532>
    fdae:	aa24      	add	r2, sp, #144	; 0x90
    fdb0:	4658      	mov	r0, fp
    fdb2:	9105      	str	r1, [sp, #20]
    fdb4:	f003 fa98 	bl	132e8 <__ssprint_r>
    fdb8:	2800      	cmp	r0, #0
    fdba:	f47f a86e 	bne.w	ee9a <_svfprintf_r+0x8ca>
    fdbe:	f896 c000 	ldrb.w	ip, [r6]
    fdc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fdc4:	9905      	ldr	r1, [sp, #20]
    fdc6:	a827      	add	r0, sp, #156	; 0x9c
    fdc8:	4465      	add	r5, ip
    fdca:	f7ff bbec 	b.w	f5a6 <_svfprintf_r+0xfd6>
    fdce:	ee1b 1a10 	vmov	r1, s22
    fdd2:	aa24      	add	r2, sp, #144	; 0x90
    fdd4:	4658      	mov	r0, fp
    fdd6:	f003 fa87 	bl	132e8 <__ssprint_r>
    fdda:	2800      	cmp	r0, #0
    fddc:	f47f a85d 	bne.w	ee9a <_svfprintf_r+0x8ca>
    fde0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fde2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fde6:	f7ff b96b 	b.w	f0c0 <_svfprintf_r+0xaf0>
    fdea:	2378      	movs	r3, #120	; 0x78
    fdec:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    fdf0:	2330      	movs	r3, #48	; 0x30
    fdf2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    fdf6:	9b03      	ldr	r3, [sp, #12]
    fdf8:	2b63      	cmp	r3, #99	; 0x63
    fdfa:	f048 0602 	orr.w	r6, r8, #2
    fdfe:	f300 80a6 	bgt.w	ff4e <_svfprintf_r+0x197e>
    fe02:	2300      	movs	r3, #0
    fe04:	9307      	str	r3, [sp, #28]
    fe06:	ac37      	add	r4, sp, #220	; 0xdc
    fe08:	ee18 3a90 	vmov	r3, s17
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    fe12:	db2b      	blt.n	fe6c <_svfprintf_r+0x189c>
    fe14:	eeb0 ab48 	vmov.f64	d10, d8
    fe18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe1a:	f023 0520 	bic.w	r5, r3, #32
    fe1e:	2300      	movs	r3, #0
    fe20:	9309      	str	r3, [sp, #36]	; 0x24
    fe22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe24:	2b61      	cmp	r3, #97	; 0x61
    fe26:	f47f aaad 	bne.w	f384 <_svfprintf_r+0xdb4>
    fe2a:	eeb0 0b4a 	vmov.f64	d0, d10
    fe2e:	a81b      	add	r0, sp, #108	; 0x6c
    fe30:	f001 ff3a 	bl	11ca8 <frexp>
    fe34:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    fe38:	ee20 0b07 	vmul.f64	d0, d0, d7
    fe3c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fe40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe44:	d101      	bne.n	fe4a <_svfprintf_r+0x187a>
    fe46:	2301      	movs	r3, #1
    fe48:	931b      	str	r3, [sp, #108]	; 0x6c
    fe4a:	4846      	ldr	r0, [pc, #280]	; (ff64 <_svfprintf_r+0x1994>)
    fe4c:	e721      	b.n	fc92 <_svfprintf_r+0x16c2>
    fe4e:	ee1b 1a10 	vmov	r1, s22
    fe52:	aa24      	add	r2, sp, #144	; 0x90
    fe54:	4658      	mov	r0, fp
    fe56:	f003 fa47 	bl	132e8 <__ssprint_r>
    fe5a:	2800      	cmp	r0, #0
    fe5c:	f47f a81d 	bne.w	ee9a <_svfprintf_r+0x8ca>
    fe60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fe62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fe64:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fe68:	f7ff b94e 	b.w	f108 <_svfprintf_r+0xb38>
    fe6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe6e:	f023 0520 	bic.w	r5, r3, #32
    fe72:	232d      	movs	r3, #45	; 0x2d
    fe74:	9309      	str	r3, [sp, #36]	; 0x24
    fe76:	eeb1 ab48 	vneg.f64	d10, d8
    fe7a:	e7d2      	b.n	fe22 <_svfprintf_r+0x1852>
    fe7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fe7e:	920c      	str	r2, [sp, #48]	; 0x30
    fe80:	2a00      	cmp	r2, #0
    fe82:	f006 0301 	and.w	r3, r6, #1
    fe86:	f340 810d 	ble.w	100a4 <_svfprintf_r+0x1ad4>
    fe8a:	9903      	ldr	r1, [sp, #12]
    fe8c:	430b      	orrs	r3, r1
    fe8e:	f040 80cf 	bne.w	10030 <_svfprintf_r+0x1a60>
    fe92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe94:	9305      	str	r3, [sp, #20]
    fe96:	2366      	movs	r3, #102	; 0x66
    fe98:	930b      	str	r3, [sp, #44]	; 0x2c
    fe9a:	0572      	lsls	r2, r6, #21
    fe9c:	f100 80a3 	bmi.w	ffe6 <_svfprintf_r+0x1a16>
    fea0:	9b05      	ldr	r3, [sp, #20]
    fea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fea6:	9302      	str	r3, [sp, #8]
    fea8:	e76c      	b.n	fd84 <_svfprintf_r+0x17b4>
    feaa:	ee1b 1a10 	vmov	r1, s22
    feae:	aa24      	add	r2, sp, #144	; 0x90
    feb0:	4658      	mov	r0, fp
    feb2:	f003 fa19 	bl	132e8 <__ssprint_r>
    feb6:	2800      	cmp	r0, #0
    feb8:	f47e afef 	bne.w	ee9a <_svfprintf_r+0x8ca>
    febc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    febe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fec0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fec2:	1b1c      	subs	r4, r3, r4
    fec4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fec8:	f7ff b936 	b.w	f138 <_svfprintf_r+0xb68>
    fecc:	2358      	movs	r3, #88	; 0x58
    fece:	e78d      	b.n	fdec <_svfprintf_r+0x181c>
    fed0:	2200      	movs	r2, #0
    fed2:	9203      	str	r2, [sp, #12]
    fed4:	f7fe bbda 	b.w	e68c <_svfprintf_r+0xbc>
    fed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    feda:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fedc:	189a      	adds	r2, r3, r2
    fede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fee0:	9205      	str	r2, [sp, #20]
    fee2:	2b00      	cmp	r3, #0
    fee4:	f340 80ab 	ble.w	1003e <_svfprintf_r+0x1a6e>
    fee8:	2367      	movs	r3, #103	; 0x67
    feea:	930b      	str	r3, [sp, #44]	; 0x2c
    feec:	e7d5      	b.n	fe9a <_svfprintf_r+0x18ca>
    feee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fef0:	320f      	adds	r2, #15
    fef2:	b2d2      	uxtb	r2, r2
    fef4:	2101      	movs	r1, #1
    fef6:	e618      	b.n	fb2a <_svfprintf_r+0x155a>
    fef8:	18a0      	adds	r0, r4, r2
    fefa:	e5fb      	b.n	faf4 <_svfprintf_r+0x1524>
    fefc:	2900      	cmp	r1, #0
    fefe:	f040 80a8 	bne.w	10052 <_svfprintf_r+0x1a82>
    ff02:	2230      	movs	r2, #48	; 0x30
    ff04:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    ff08:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    ff0c:	3330      	adds	r3, #48	; 0x30
    ff0e:	f802 3b01 	strb.w	r3, [r2], #1
    ff12:	ab1e      	add	r3, sp, #120	; 0x78
    ff14:	1ad3      	subs	r3, r2, r3
    ff16:	9314      	str	r3, [sp, #80]	; 0x50
    ff18:	e649      	b.n	fbae <_svfprintf_r+0x15de>
    ff1a:	3301      	adds	r3, #1
    ff1c:	4912      	ldr	r1, [pc, #72]	; (ff68 <_svfprintf_r+0x1998>)
    ff1e:	f8ca 5004 	str.w	r5, [sl, #4]
    ff22:	442a      	add	r2, r5
    ff24:	2b07      	cmp	r3, #7
    ff26:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ff2a:	f8ca 1000 	str.w	r1, [sl]
    ff2e:	f77f ac33 	ble.w	f798 <_svfprintf_r+0x11c8>
    ff32:	ee1b 1a10 	vmov	r1, s22
    ff36:	aa24      	add	r2, sp, #144	; 0x90
    ff38:	4658      	mov	r0, fp
    ff3a:	f003 f9d5 	bl	132e8 <__ssprint_r>
    ff3e:	2800      	cmp	r0, #0
    ff40:	f47e afab 	bne.w	ee9a <_svfprintf_r+0x8ca>
    ff44:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ff48:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff4c:	e426      	b.n	f79c <_svfprintf_r+0x11cc>
    ff4e:	1c59      	adds	r1, r3, #1
    ff50:	4658      	mov	r0, fp
    ff52:	f7fa fd4f 	bl	a9f4 <_malloc_r>
    ff56:	4604      	mov	r4, r0
    ff58:	b350      	cbz	r0, ffb0 <_svfprintf_r+0x19e0>
    ff5a:	9007      	str	r0, [sp, #28]
    ff5c:	e754      	b.n	fe08 <_svfprintf_r+0x1838>
    ff5e:	bf00      	nop
    ff60:	20000f08 	.word	0x20000f08
    ff64:	20000ef4 	.word	0x20000ef4
    ff68:	20008774 	.word	0x20008774
    ff6c:	66666667 	.word	0x66666667
    ff70:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    ff74:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    ff78:	f890 c00f 	ldrb.w	ip, [r0, #15]
    ff7c:	4561      	cmp	r1, ip
    ff7e:	4613      	mov	r3, r2
    ff80:	d10a      	bne.n	ff98 <_svfprintf_r+0x19c8>
    ff82:	f04f 0e30 	mov.w	lr, #48	; 0x30
    ff86:	f803 ec01 	strb.w	lr, [r3, #-1]
    ff8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ff8c:	1e59      	subs	r1, r3, #1
    ff8e:	9122      	str	r1, [sp, #136]	; 0x88
    ff90:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    ff94:	458c      	cmp	ip, r1
    ff96:	d0f6      	beq.n	ff86 <_svfprintf_r+0x19b6>
    ff98:	2939      	cmp	r1, #57	; 0x39
    ff9a:	bf16      	itet	ne
    ff9c:	3101      	addne	r1, #1
    ff9e:	7a81      	ldrbeq	r1, [r0, #10]
    ffa0:	b2c9      	uxtbne	r1, r1
    ffa2:	f803 1c01 	strb.w	r1, [r3, #-1]
    ffa6:	e6ae      	b.n	fd06 <_svfprintf_r+0x1736>
    ffa8:	2300      	movs	r3, #0
    ffaa:	4690      	mov	r8, r2
    ffac:	9307      	str	r3, [sp, #28]
    ffae:	e760      	b.n	fe72 <_svfprintf_r+0x18a2>
    ffb0:	ee1b 2a10 	vmov	r2, s22
    ffb4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    ffb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ffbc:	8193      	strh	r3, [r2, #12]
    ffbe:	f7fe bc16 	b.w	e7ee <_svfprintf_r+0x21e>
    ffc2:	07f5      	lsls	r5, r6, #31
    ffc4:	f57f adfe 	bpl.w	fbc4 <_svfprintf_r+0x15f4>
    ffc8:	e5f8      	b.n	fbbc <_svfprintf_r+0x15ec>
    ffca:	9305      	str	r3, [sp, #20]
    ffcc:	e6ce      	b.n	fd6c <_svfprintf_r+0x179c>
    ffce:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ffd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ffd6:	f43f ad8b 	beq.w	faf0 <_svfprintf_r+0x1520>
    ffda:	f1c2 0201 	rsb	r2, r2, #1
    ffde:	921b      	str	r2, [sp, #108]	; 0x6c
    ffe0:	e587      	b.n	faf2 <_svfprintf_r+0x1522>
    ffe2:	2367      	movs	r3, #103	; 0x67
    ffe4:	930b      	str	r3, [sp, #44]	; 0x2c
    ffe6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ffe8:	780b      	ldrb	r3, [r1, #0]
    ffea:	2bff      	cmp	r3, #255	; 0xff
    ffec:	d079      	beq.n	100e2 <_svfprintf_r+0x1b12>
    ffee:	2500      	movs	r5, #0
    fff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fff2:	4628      	mov	r0, r5
    fff4:	e003      	b.n	fffe <_svfprintf_r+0x1a2e>
    fff6:	3001      	adds	r0, #1
    fff8:	3101      	adds	r1, #1
    fffa:	2bff      	cmp	r3, #255	; 0xff
    fffc:	d008      	beq.n	10010 <_svfprintf_r+0x1a40>
    fffe:	4293      	cmp	r3, r2
   10000:	da06      	bge.n	10010 <_svfprintf_r+0x1a40>
   10002:	1ad2      	subs	r2, r2, r3
   10004:	784b      	ldrb	r3, [r1, #1]
   10006:	2b00      	cmp	r3, #0
   10008:	d1f5      	bne.n	fff6 <_svfprintf_r+0x1a26>
   1000a:	780b      	ldrb	r3, [r1, #0]
   1000c:	3501      	adds	r5, #1
   1000e:	e7f4      	b.n	fffa <_svfprintf_r+0x1a2a>
   10010:	920c      	str	r2, [sp, #48]	; 0x30
   10012:	9113      	str	r1, [sp, #76]	; 0x4c
   10014:	900d      	str	r0, [sp, #52]	; 0x34
   10016:	950f      	str	r5, [sp, #60]	; 0x3c
   10018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1001a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1001c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1001e:	4413      	add	r3, r2
   10020:	9a05      	ldr	r2, [sp, #20]
   10022:	fb01 2303 	mla	r3, r1, r3, r2
   10026:	9305      	str	r3, [sp, #20]
   10028:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1002c:	9302      	str	r3, [sp, #8]
   1002e:	e5d5      	b.n	fbdc <_svfprintf_r+0x160c>
   10030:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10032:	18d3      	adds	r3, r2, r3
   10034:	4419      	add	r1, r3
   10036:	2366      	movs	r3, #102	; 0x66
   10038:	9105      	str	r1, [sp, #20]
   1003a:	930b      	str	r3, [sp, #44]	; 0x2c
   1003c:	e72d      	b.n	fe9a <_svfprintf_r+0x18ca>
   1003e:	f1c3 0301 	rsb	r3, r3, #1
   10042:	441a      	add	r2, r3
   10044:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10048:	9302      	str	r3, [sp, #8]
   1004a:	2367      	movs	r3, #103	; 0x67
   1004c:	9205      	str	r2, [sp, #20]
   1004e:	930b      	str	r3, [sp, #44]	; 0x2c
   10050:	e698      	b.n	fd84 <_svfprintf_r+0x17b4>
   10052:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10056:	e759      	b.n	ff0c <_svfprintf_r+0x193c>
   10058:	9b03      	ldr	r3, [sp, #12]
   1005a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1005e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10062:	9305      	str	r3, [sp, #20]
   10064:	e4b4      	b.n	f9d0 <_svfprintf_r+0x1400>
   10066:	ee18 3a90 	vmov	r3, s17
   1006a:	2b00      	cmp	r3, #0
   1006c:	bfb4      	ite	lt
   1006e:	212d      	movlt	r1, #45	; 0x2d
   10070:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   10074:	4c25      	ldr	r4, [pc, #148]	; (1010c <_svfprintf_r+0x1b3c>)
   10076:	4b26      	ldr	r3, [pc, #152]	; (10110 <_svfprintf_r+0x1b40>)
   10078:	bfb8      	it	lt
   1007a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   1007e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   10082:	f7fe bc79 	b.w	e978 <_svfprintf_r+0x3a8>
   10086:	9b03      	ldr	r3, [sp, #12]
   10088:	9302      	str	r3, [sp, #8]
   1008a:	9305      	str	r3, [sp, #20]
   1008c:	2373      	movs	r3, #115	; 0x73
   1008e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10092:	9003      	str	r0, [sp, #12]
   10094:	900f      	str	r0, [sp, #60]	; 0x3c
   10096:	900d      	str	r0, [sp, #52]	; 0x34
   10098:	930b      	str	r3, [sp, #44]	; 0x2c
   1009a:	f7fe bc7a 	b.w	e992 <_svfprintf_r+0x3c2>
   1009e:	2302      	movs	r3, #2
   100a0:	9314      	str	r3, [sp, #80]	; 0x50
   100a2:	e584      	b.n	fbae <_svfprintf_r+0x15de>
   100a4:	9a03      	ldr	r2, [sp, #12]
   100a6:	4313      	orrs	r3, r2
   100a8:	d105      	bne.n	100b6 <_svfprintf_r+0x1ae6>
   100aa:	2301      	movs	r3, #1
   100ac:	2266      	movs	r2, #102	; 0x66
   100ae:	9302      	str	r3, [sp, #8]
   100b0:	920b      	str	r2, [sp, #44]	; 0x2c
   100b2:	9305      	str	r3, [sp, #20]
   100b4:	e666      	b.n	fd84 <_svfprintf_r+0x17b4>
   100b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   100b8:	3301      	adds	r3, #1
   100ba:	441a      	add	r2, r3
   100bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   100c0:	9302      	str	r3, [sp, #8]
   100c2:	2366      	movs	r3, #102	; 0x66
   100c4:	9205      	str	r2, [sp, #20]
   100c6:	930b      	str	r3, [sp, #44]	; 0x2c
   100c8:	e65c      	b.n	fd84 <_svfprintf_r+0x17b4>
   100ca:	9a08      	ldr	r2, [sp, #32]
   100cc:	f899 3001 	ldrb.w	r3, [r9, #1]
   100d0:	4689      	mov	r9, r1
   100d2:	f852 1b04 	ldr.w	r1, [r2], #4
   100d6:	9208      	str	r2, [sp, #32]
   100d8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   100dc:	9103      	str	r1, [sp, #12]
   100de:	f7fe bad3 	b.w	e688 <_svfprintf_r+0xb8>
   100e2:	2300      	movs	r3, #0
   100e4:	930f      	str	r3, [sp, #60]	; 0x3c
   100e6:	930d      	str	r3, [sp, #52]	; 0x34
   100e8:	e796      	b.n	10018 <_svfprintf_r+0x1a48>
   100ea:	230c      	movs	r3, #12
   100ec:	f8cb 3000 	str.w	r3, [fp]
   100f0:	f04f 33ff 	mov.w	r3, #4294967295
   100f4:	9304      	str	r3, [sp, #16]
   100f6:	f7fe bb81 	b.w	e7fc <_svfprintf_r+0x22c>
   100fa:	ee1b 2a10 	vmov	r2, s22
   100fe:	8993      	ldrh	r3, [r2, #12]
   10100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10104:	8193      	strh	r3, [r2, #12]
   10106:	f7fe bec8 	b.w	ee9a <_svfprintf_r+0x8ca>
   1010a:	bf00      	nop
   1010c:	20000ef0 	.word	0x20000ef0
   10110:	20000820 	.word	0x20000820

00010114 <__ssvfscanf_r>:
   10114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10118:	ed2d 8b02 	vpush	{d8}
   1011c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   10120:	468b      	mov	fp, r1
   10122:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   10126:	af02      	add	r7, sp, #8
   10128:	048c      	lsls	r4, r1, #18
   1012a:	4681      	mov	r9, r0
   1012c:	64fa      	str	r2, [r7, #76]	; 0x4c
   1012e:	633b      	str	r3, [r7, #48]	; 0x30
   10130:	d409      	bmi.n	10146 <__ssvfscanf_r+0x32>
   10132:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   10136:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1013a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1013e:	f8ab 100c 	strh.w	r1, [fp, #12]
   10142:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   10146:	2300      	movs	r3, #0
   10148:	461c      	mov	r4, r3
   1014a:	2208      	movs	r2, #8
   1014c:	4619      	mov	r1, r3
   1014e:	f107 0058 	add.w	r0, r7, #88	; 0x58
   10152:	62fb      	str	r3, [r7, #44]	; 0x2c
   10154:	46a2      	mov	sl, r4
   10156:	f7fc fb75 	bl	c844 <memset>
   1015a:	643c      	str	r4, [r7, #64]	; 0x40
   1015c:	627c      	str	r4, [r7, #36]	; 0x24
   1015e:	63bc      	str	r4, [r7, #56]	; 0x38
   10160:	647c      	str	r4, [r7, #68]	; 0x44
   10162:	4b83      	ldr	r3, [pc, #524]	; (10370 <__ssvfscanf_r+0x25c>)
   10164:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   10168:	f7fc fc36 	bl	c9d8 <__locale_mb_cur_max>
   1016c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   10170:	4603      	mov	r3, r0
   10172:	9200      	str	r2, [sp, #0]
   10174:	f107 0154 	add.w	r1, r7, #84	; 0x54
   10178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1017a:	4648      	mov	r0, r9
   1017c:	47a0      	blx	r4
   1017e:	1e05      	subs	r5, r0, #0
   10180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10182:	db33      	blt.n	101ec <__ssvfscanf_r+0xd8>
   10184:	442b      	add	r3, r5
   10186:	64fb      	str	r3, [r7, #76]	; 0x4c
   10188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1018a:	462e      	mov	r6, r5
   1018c:	2b00      	cmp	r3, #0
   1018e:	f000 80b6 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10192:	2d01      	cmp	r5, #1
   10194:	d038      	beq.n	10208 <__ssvfscanf_r+0xf4>
   10196:	2b25      	cmp	r3, #37	; 0x25
   10198:	d040      	beq.n	1021c <__ssvfscanf_r+0x108>
   1019a:	2d00      	cmp	r5, #0
   1019c:	d0e1      	beq.n	10162 <__ssvfscanf_r+0x4e>
   1019e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   101a0:	1b9e      	subs	r6, r3, r6
   101a2:	f8db 3004 	ldr.w	r3, [fp, #4]
   101a6:	1e74      	subs	r4, r6, #1
   101a8:	2b00      	cmp	r3, #0
   101aa:	f340 8098 	ble.w	102de <__ssvfscanf_r+0x1ca>
   101ae:	f8db 1000 	ldr.w	r1, [fp]
   101b2:	f894 c001 	ldrb.w	ip, [r4, #1]
   101b6:	f891 e000 	ldrb.w	lr, [r1]
   101ba:	1ca3      	adds	r3, r4, #2
   101bc:	eb0a 0003 	add.w	r0, sl, r3
   101c0:	45e6      	cmp	lr, ip
   101c2:	f101 0101 	add.w	r1, r1, #1
   101c6:	eba3 0206 	sub.w	r2, r3, r6
   101ca:	f104 0401 	add.w	r4, r4, #1
   101ce:	eba0 0006 	sub.w	r0, r0, r6
   101d2:	f040 8094 	bne.w	102fe <__ssvfscanf_r+0x1ea>
   101d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   101da:	f8cb 1000 	str.w	r1, [fp]
   101de:	3b01      	subs	r3, #1
   101e0:	42aa      	cmp	r2, r5
   101e2:	f8cb 3004 	str.w	r3, [fp, #4]
   101e6:	dbdf      	blt.n	101a8 <__ssvfscanf_r+0x94>
   101e8:	4682      	mov	sl, r0
   101ea:	e7ba      	b.n	10162 <__ssvfscanf_r+0x4e>
   101ec:	3301      	adds	r3, #1
   101ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   101f0:	2208      	movs	r2, #8
   101f2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   101f6:	2100      	movs	r1, #0
   101f8:	f107 0058 	add.w	r0, r7, #88	; 0x58
   101fc:	657b      	str	r3, [r7, #84]	; 0x54
   101fe:	f7fc fb21 	bl	c844 <memset>
   10202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10204:	2b00      	cmp	r3, #0
   10206:	d07a      	beq.n	102fe <__ssvfscanf_r+0x1ea>
   10208:	4e5a      	ldr	r6, [pc, #360]	; (10374 <__ssvfscanf_r+0x260>)
   1020a:	5cf2      	ldrb	r2, [r6, r3]
   1020c:	0710      	lsls	r0, r2, #28
   1020e:	f100 851c 	bmi.w	10c4a <__ssvfscanf_r+0xb36>
   10212:	2b25      	cmp	r3, #37	; 0x25
   10214:	f040 8086 	bne.w	10324 <__ssvfscanf_r+0x210>
   10218:	2501      	movs	r5, #1
   1021a:	462e      	mov	r6, r5
   1021c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1021e:	2400      	movs	r4, #0
   10220:	7802      	ldrb	r2, [r0, #0]
   10222:	46a0      	mov	r8, r4
   10224:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   10228:	1c41      	adds	r1, r0, #1
   1022a:	2b55      	cmp	r3, #85	; 0x55
   1022c:	d867      	bhi.n	102fe <__ssvfscanf_r+0x1ea>
   1022e:	e8df f013 	tbh	[pc, r3, lsl #1]
   10232:	070a      	.short	0x070a
   10234:	00660066 	.word	0x00660066
   10238:	00660066 	.word	0x00660066
   1023c:	00660701 	.word	0x00660701
   10240:	00660066 	.word	0x00660066
   10244:	00660066 	.word	0x00660066
   10248:	060c060c 	.word	0x060c060c
   1024c:	060c060c 	.word	0x060c060c
   10250:	060c060c 	.word	0x060c060c
   10254:	060c060c 	.word	0x060c060c
   10258:	060c060c 	.word	0x060c060c
   1025c:	00660066 	.word	0x00660066
   10260:	00660066 	.word	0x00660066
   10264:	00660066 	.word	0x00660066
   10268:	06180066 	.word	0x06180066
   1026c:	048e0066 	.word	0x048e0066
   10270:	061804c9 	.word	0x061804c9
   10274:	06180618 	.word	0x06180618
   10278:	00660066 	.word	0x00660066
   1027c:	00660066 	.word	0x00660066
   10280:	00660082 	.word	0x00660082
   10284:	04bf0066 	.word	0x04bf0066
   10288:	00660066 	.word	0x00660066
   1028c:	00890066 	.word	0x00890066
   10290:	00660066 	.word	0x00660066
   10294:	00660066 	.word	0x00660066
   10298:	0066066b 	.word	0x0066066b
   1029c:	06dd0066 	.word	0x06dd0066
   102a0:	00660066 	.word	0x00660066
   102a4:	00660066 	.word	0x00660066
   102a8:	06180066 	.word	0x06180066
   102ac:	04900066 	.word	0x04900066
   102b0:	061804cb 	.word	0x061804cb
   102b4:	06180618 	.word	0x06180618
   102b8:	06d206be 	.word	0x06d206be
   102bc:	00660082 	.word	0x00660082
   102c0:	06f306e7 	.word	0x06f306e7
   102c4:	04c106ac 	.word	0x04c106ac
   102c8:	006606da 	.word	0x006606da
   102cc:	008b0066 	.word	0x008b0066
   102d0:	06ca007d 	.word	0x06ca007d
   102d4:	00660066 	.word	0x00660066
   102d8:	0066066b 	.word	0x0066066b
   102dc:	007d      	.short	0x007d
   102de:	4659      	mov	r1, fp
   102e0:	4648      	mov	r0, r9
   102e2:	f003 f8c1 	bl	13468 <__ssrefill_r>
   102e6:	2800      	cmp	r0, #0
   102e8:	f43f af61 	beq.w	101ae <__ssvfscanf_r+0x9a>
   102ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   102ee:	2b00      	cmp	r3, #0
   102f0:	f001 8052 	beq.w	11398 <__ssvfscanf_r+0x1284>
   102f4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   102f8:	065a      	lsls	r2, r3, #25
   102fa:	f101 804d 	bmi.w	11398 <__ssvfscanf_r+0x1284>
   102fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10300:	b143      	cbz	r3, 10314 <__ssvfscanf_r+0x200>
   10302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10304:	f8d3 8000 	ldr.w	r8, [r3]
   10308:	f1b8 0f00 	cmp.w	r8, #0
   1030c:	d002      	beq.n	10314 <__ssvfscanf_r+0x200>
   1030e:	4640      	mov	r0, r8
   10310:	f7fa fb68 	bl	a9e4 <free>
   10314:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10316:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   1031a:	46bd      	mov	sp, r7
   1031c:	ecbd 8b02 	vpop	{d8}
   10320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10326:	2501      	movs	r5, #1
   10328:	1e5e      	subs	r6, r3, #1
   1032a:	e73a      	b.n	101a2 <__ssvfscanf_r+0x8e>
   1032c:	0723      	lsls	r3, r4, #28
   1032e:	d1e6      	bne.n	102fe <__ssvfscanf_r+0x1ea>
   10330:	7842      	ldrb	r2, [r0, #1]
   10332:	4608      	mov	r0, r1
   10334:	e776      	b.n	10224 <__ssvfscanf_r+0x110>
   10336:	0722      	lsls	r2, r4, #28
   10338:	d1e1      	bne.n	102fe <__ssvfscanf_r+0x1ea>
   1033a:	7842      	ldrb	r2, [r0, #1]
   1033c:	f044 0402 	orr.w	r4, r4, #2
   10340:	4608      	mov	r0, r1
   10342:	e76f      	b.n	10224 <__ssvfscanf_r+0x110>
   10344:	f044 0401 	orr.w	r4, r4, #1
   10348:	64f9      	str	r1, [r7, #76]	; 0x4c
   1034a:	2502      	movs	r5, #2
   1034c:	f8db 3004 	ldr.w	r3, [fp, #4]
   10350:	2b00      	cmp	r3, #0
   10352:	f340 8408 	ble.w	10b66 <__ssvfscanf_r+0xa52>
   10356:	0660      	lsls	r0, r4, #25
   10358:	f140 840f 	bpl.w	10b7a <__ssvfscanf_r+0xa66>
   1035c:	1e6b      	subs	r3, r5, #1
   1035e:	2b03      	cmp	r3, #3
   10360:	f201 80eb 	bhi.w	1153a <__ssvfscanf_r+0x1426>
   10364:	e8df f013 	tbh	[pc, r3, lsl #1]
   10368:	01f1027b 	.word	0x01f1027b
   1036c:	0008014b 	.word	0x0008014b
   10370:	200088f4 	.word	0x200088f4
   10374:	20000d59 	.word	0x20000d59
   10378:	4648      	mov	r0, r9
   1037a:	f001 fc8f 	bl	11c9c <_localeconv_r>
   1037e:	6803      	ldr	r3, [r0, #0]
   10380:	623b      	str	r3, [r7, #32]
   10382:	f108 33ff 	add.w	r3, r8, #4294967295
   10386:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   1038a:	f240 855a 	bls.w	10e42 <__ssvfscanf_r+0xd2e>
   1038e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   10392:	eb08 0305 	add.w	r3, r8, r5
   10396:	613b      	str	r3, [r7, #16]
   10398:	f240 185d 	movw	r8, #349	; 0x15d
   1039c:	2600      	movs	r6, #0
   1039e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   103a2:	ee08 9a10 	vmov	s16, r9
   103a6:	e9c7 6605 	strd	r6, r6, [r7, #20]
   103aa:	63fe      	str	r6, [r7, #60]	; 0x3c
   103ac:	637e      	str	r6, [r7, #52]	; 0x34
   103ae:	61fe      	str	r6, [r7, #28]
   103b0:	64be      	str	r6, [r7, #72]	; 0x48
   103b2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   103b6:	62bb      	str	r3, [r7, #40]	; 0x28
   103b8:	461d      	mov	r5, r3
   103ba:	4646      	mov	r6, r8
   103bc:	f8db 1000 	ldr.w	r1, [fp]
   103c0:	780a      	ldrb	r2, [r1, #0]
   103c2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   103c6:	2b4e      	cmp	r3, #78	; 0x4e
   103c8:	d850      	bhi.n	1046c <__ssvfscanf_r+0x358>
   103ca:	e8df f013 	tbh	[pc, r3, lsl #1]
   103ce:	037e      	.short	0x037e
   103d0:	037e004f 	.word	0x037e004f
   103d4:	004f004f 	.word	0x004f004f
   103d8:	00a600a3 	.word	0x00a600a3
   103dc:	00a600a6 	.word	0x00a600a6
   103e0:	00a600a6 	.word	0x00a600a6
   103e4:	00a600a6 	.word	0x00a600a6
   103e8:	00a600a6 	.word	0x00a600a6
   103ec:	004f004f 	.word	0x004f004f
   103f0:	004f004f 	.word	0x004f004f
   103f4:	004f004f 	.word	0x004f004f
   103f8:	0374004f 	.word	0x0374004f
   103fc:	030b030b 	.word	0x030b030b
   10400:	039e030b 	.word	0x039e030b
   10404:	004f0394 	.word	0x004f0394
   10408:	0384004f 	.word	0x0384004f
   1040c:	004f004f 	.word	0x004f004f
   10410:	004f004f 	.word	0x004f004f
   10414:	004f035d 	.word	0x004f035d
   10418:	004f033a 	.word	0x004f033a
   1041c:	004f004f 	.word	0x004f004f
   10420:	004f0333 	.word	0x004f0333
   10424:	004f004f 	.word	0x004f004f
   10428:	036d031e 	.word	0x036d031e
   1042c:	004f004f 	.word	0x004f004f
   10430:	004f004f 	.word	0x004f004f
   10434:	004f004f 	.word	0x004f004f
   10438:	0374004f 	.word	0x0374004f
   1043c:	030b030b 	.word	0x030b030b
   10440:	039e030b 	.word	0x039e030b
   10444:	004f0394 	.word	0x004f0394
   10448:	0384004f 	.word	0x0384004f
   1044c:	004f004f 	.word	0x004f004f
   10450:	004f004f 	.word	0x004f004f
   10454:	004f035d 	.word	0x004f035d
   10458:	004f033a 	.word	0x004f033a
   1045c:	004f004f 	.word	0x004f004f
   10460:	004f0333 	.word	0x004f0333
   10464:	004f004f 	.word	0x004f004f
   10468:	036d031e 	.word	0x036d031e
   1046c:	05a0      	lsls	r0, r4, #22
   1046e:	d56f      	bpl.n	10550 <__ssvfscanf_r+0x43c>
   10470:	6a38      	ldr	r0, [r7, #32]
   10472:	7803      	ldrb	r3, [r0, #0]
   10474:	4293      	cmp	r3, r2
   10476:	d16b      	bne.n	10550 <__ssvfscanf_r+0x43c>
   10478:	e9c7 4502 	strd	r4, r5, [r7, #8]
   1047c:	607e      	str	r6, [r7, #4]
   1047e:	4681      	mov	r9, r0
   10480:	ee18 6a10 	vmov	r6, s16
   10484:	f04f 0800 	mov.w	r8, #0
   10488:	465c      	mov	r4, fp
   1048a:	e007      	b.n	1049c <__ssvfscanf_r+0x388>
   1048c:	6021      	str	r1, [r4, #0]
   1048e:	f891 e000 	ldrb.w	lr, [r1]
   10492:	f899 0000 	ldrb.w	r0, [r9]
   10496:	4586      	cmp	lr, r0
   10498:	d11c      	bne.n	104d4 <__ssvfscanf_r+0x3c0>
   1049a:	46da      	mov	sl, fp
   1049c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   104a0:	4645      	mov	r5, r8
   104a2:	f10a 0b01 	add.w	fp, sl, #1
   104a6:	3101      	adds	r1, #1
   104a8:	f108 0801 	add.w	r8, r8, #1
   104ac:	2800      	cmp	r0, #0
   104ae:	f000 8664 	beq.w	1117a <__ssvfscanf_r+0x1066>
   104b2:	6860      	ldr	r0, [r4, #4]
   104b4:	3801      	subs	r0, #1
   104b6:	2800      	cmp	r0, #0
   104b8:	6060      	str	r0, [r4, #4]
   104ba:	dce7      	bgt.n	1048c <__ssvfscanf_r+0x378>
   104bc:	4621      	mov	r1, r4
   104be:	4630      	mov	r0, r6
   104c0:	f002 ffd2 	bl	13468 <__ssrefill_r>
   104c4:	b930      	cbnz	r0, 104d4 <__ssvfscanf_r+0x3c0>
   104c6:	6821      	ldr	r1, [r4, #0]
   104c8:	f899 0000 	ldrb.w	r0, [r9]
   104cc:	f891 e000 	ldrb.w	lr, [r1]
   104d0:	4586      	cmp	lr, r0
   104d2:	d0e2      	beq.n	1049a <__ssvfscanf_r+0x386>
   104d4:	46a3      	mov	fp, r4
   104d6:	6a3a      	ldr	r2, [r7, #32]
   104d8:	68bc      	ldr	r4, [r7, #8]
   104da:	613d      	str	r5, [r7, #16]
   104dc:	462b      	mov	r3, r5
   104de:	46b1      	mov	r9, r6
   104e0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   104e2:	68fd      	ldr	r5, [r7, #12]
   104e4:	64bd      	str	r5, [r7, #72]	; 0x48
   104e6:	3301      	adds	r3, #1
   104e8:	465d      	mov	r5, fp
   104ea:	eb02 0803 	add.w	r8, r2, r3
   104ee:	46b3      	mov	fp, r6
   104f0:	4626      	mov	r6, r4
   104f2:	4614      	mov	r4, r2
   104f4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   104f8:	462a      	mov	r2, r5
   104fa:	4648      	mov	r0, r9
   104fc:	f002 ff74 	bl	133e8 <_sungetc_r>
   10500:	4544      	cmp	r4, r8
   10502:	d1f7      	bne.n	104f4 <__ssvfscanf_r+0x3e0>
   10504:	693b      	ldr	r3, [r7, #16]
   10506:	4634      	mov	r4, r6
   10508:	ebaa 0a03 	sub.w	sl, sl, r3
   1050c:	465e      	mov	r6, fp
   1050e:	46ab      	mov	fp, r5
   10510:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10512:	e020      	b.n	10556 <__ssvfscanf_r+0x442>
   10514:	05e0      	lsls	r0, r4, #23
   10516:	f100 8501 	bmi.w	10f1c <__ssvfscanf_r+0xe08>
   1051a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1051c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1051e:	42d9      	cmn	r1, r3
   10520:	d116      	bne.n	10550 <__ssvfscanf_r+0x43c>
   10522:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   10526:	f805 2b01 	strb.w	r2, [r5], #1
   1052a:	3e01      	subs	r6, #1
   1052c:	f8db 3004 	ldr.w	r3, [fp, #4]
   10530:	3b01      	subs	r3, #1
   10532:	2b00      	cmp	r3, #0
   10534:	f10a 0a01 	add.w	sl, sl, #1
   10538:	f8cb 3004 	str.w	r3, [fp, #4]
   1053c:	f340 836f 	ble.w	10c1e <__ssvfscanf_r+0xb0a>
   10540:	f8db 3000 	ldr.w	r3, [fp]
   10544:	3301      	adds	r3, #1
   10546:	f8cb 3000 	str.w	r3, [fp]
   1054a:	2e00      	cmp	r6, #0
   1054c:	f47f af36 	bne.w	103bc <__ssvfscanf_r+0x2a8>
   10550:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10552:	ee18 9a10 	vmov	r9, s16
   10556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10558:	2b00      	cmp	r3, #0
   1055a:	f040 82dc 	bne.w	10b16 <__ssvfscanf_r+0xa02>
   1055e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10560:	3b01      	subs	r3, #1
   10562:	2b01      	cmp	r3, #1
   10564:	f241 8016 	bls.w	11594 <__ssvfscanf_r+0x1480>
   10568:	1e73      	subs	r3, r6, #1
   1056a:	2b06      	cmp	r3, #6
   1056c:	f240 8627 	bls.w	111be <__ssvfscanf_r+0x10aa>
   10570:	05e3      	lsls	r3, r4, #23
   10572:	d51b      	bpl.n	105ac <__ssvfscanf_r+0x498>
   10574:	0566      	lsls	r6, r4, #21
   10576:	f101 80b5 	bmi.w	116e4 <__ssvfscanf_r+0x15d0>
   1057a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1057e:	2965      	cmp	r1, #101	; 0x65
   10580:	f105 33ff 	add.w	r3, r5, #4294967295
   10584:	f10a 36ff 	add.w	r6, sl, #4294967295
   10588:	d00a      	beq.n	105a0 <__ssvfscanf_r+0x48c>
   1058a:	2945      	cmp	r1, #69	; 0x45
   1058c:	d008      	beq.n	105a0 <__ssvfscanf_r+0x48c>
   1058e:	465a      	mov	r2, fp
   10590:	4648      	mov	r0, r9
   10592:	f002 ff29 	bl	133e8 <_sungetc_r>
   10596:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   1059a:	f1aa 0602 	sub.w	r6, sl, #2
   1059e:	1eab      	subs	r3, r5, #2
   105a0:	465a      	mov	r2, fp
   105a2:	4648      	mov	r0, r9
   105a4:	46b2      	mov	sl, r6
   105a6:	461d      	mov	r5, r3
   105a8:	f002 ff1e 	bl	133e8 <_sungetc_r>
   105ac:	f014 0210 	ands.w	r2, r4, #16
   105b0:	f47f add7 	bne.w	10162 <__ssvfscanf_r+0x4e>
   105b4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   105b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   105bc:	702a      	strb	r2, [r5, #0]
   105be:	f000 84d2 	beq.w	10f66 <__ssvfscanf_r+0xe52>
   105c2:	69bb      	ldr	r3, [r7, #24]
   105c4:	2b00      	cmp	r3, #0
   105c6:	f040 872c 	bne.w	11422 <__ssvfscanf_r+0x130e>
   105ca:	4648      	mov	r0, r9
   105cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   105ce:	2200      	movs	r2, #0
   105d0:	f7fb fdfe 	bl	c1d0 <_strtod_r>
   105d4:	07e0      	lsls	r0, r4, #31
   105d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   105d8:	f100 85c9 	bmi.w	1116e <__ssvfscanf_r+0x105a>
   105dc:	07a1      	lsls	r1, r4, #30
   105de:	f100 85c6 	bmi.w	1116e <__ssvfscanf_r+0x105a>
   105e2:	eeb4 0b40 	vcmp.f64	d0, d0
   105e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105ea:	f853 4b04 	ldr.w	r4, [r3], #4
   105ee:	f180 86f4 	bvs.w	113da <__ssvfscanf_r+0x12c6>
   105f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   105f6:	633b      	str	r3, [r7, #48]	; 0x30
   105f8:	ed84 0a00 	vstr	s0, [r4]
   105fc:	e3a2      	b.n	10d44 <__ssvfscanf_r+0xc30>
   105fe:	f108 33ff 	add.w	r3, r8, #4294967295
   10602:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   10606:	f240 83a2 	bls.w	10d4e <__ssvfscanf_r+0xc3a>
   1060a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   1060e:	eb08 0302 	add.w	r3, r8, r2
   10612:	63fb      	str	r3, [r7, #60]	; 0x3c
   10614:	f240 185d 	movw	r8, #349	; 0x15d
   10618:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1061c:	2200      	movs	r2, #0
   1061e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   10620:	62bb      	str	r3, [r7, #40]	; 0x28
   10622:	4659      	mov	r1, fp
   10624:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   10628:	46d3      	mov	fp, sl
   1062a:	461d      	mov	r5, r3
   1062c:	4692      	mov	sl, r2
   1062e:	680a      	ldr	r2, [r1, #0]
   10630:	7810      	ldrb	r0, [r2, #0]
   10632:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   10636:	2b4d      	cmp	r3, #77	; 0x4d
   10638:	d860      	bhi.n	106fc <__ssvfscanf_r+0x5e8>
   1063a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1063e:	0282      	.short	0x0282
   10640:	0282005f 	.word	0x0282005f
   10644:	005f005f 	.word	0x005f005f
   10648:	01e002cd 	.word	0x01e002cd
   1064c:	01e001e0 	.word	0x01e001e0
   10650:	01e001e0 	.word	0x01e001e0
   10654:	01e001e0 	.word	0x01e001e0
   10658:	026f026f 	.word	0x026f026f
   1065c:	005f005f 	.word	0x005f005f
   10660:	005f005f 	.word	0x005f005f
   10664:	005f005f 	.word	0x005f005f
   10668:	004e005f 	.word	0x004e005f
   1066c:	004e004e 	.word	0x004e004e
   10670:	004e004e 	.word	0x004e004e
   10674:	005f004e 	.word	0x005f004e
   10678:	005f005f 	.word	0x005f005f
   1067c:	005f005f 	.word	0x005f005f
   10680:	005f005f 	.word	0x005f005f
   10684:	005f005f 	.word	0x005f005f
   10688:	005f005f 	.word	0x005f005f
   1068c:	005f005f 	.word	0x005f005f
   10690:	005f005f 	.word	0x005f005f
   10694:	005f005f 	.word	0x005f005f
   10698:	005f0276 	.word	0x005f0276
   1069c:	005f005f 	.word	0x005f005f
   106a0:	005f005f 	.word	0x005f005f
   106a4:	005f005f 	.word	0x005f005f
   106a8:	004e005f 	.word	0x004e005f
   106ac:	004e004e 	.word	0x004e004e
   106b0:	004e004e 	.word	0x004e004e
   106b4:	005f004e 	.word	0x005f004e
   106b8:	005f005f 	.word	0x005f005f
   106bc:	005f005f 	.word	0x005f005f
   106c0:	005f005f 	.word	0x005f005f
   106c4:	005f005f 	.word	0x005f005f
   106c8:	005f005f 	.word	0x005f005f
   106cc:	005f005f 	.word	0x005f005f
   106d0:	005f005f 	.word	0x005f005f
   106d4:	005f005f 	.word	0x005f005f
   106d8:	0276      	.short	0x0276
   106da:	2e0a      	cmp	r6, #10
   106dc:	dd0e      	ble.n	106fc <__ssvfscanf_r+0x5e8>
   106de:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   106e2:	684b      	ldr	r3, [r1, #4]
   106e4:	f805 0b01 	strb.w	r0, [r5], #1
   106e8:	3b01      	subs	r3, #1
   106ea:	2b00      	cmp	r3, #0
   106ec:	604b      	str	r3, [r1, #4]
   106ee:	f340 828d 	ble.w	10c0c <__ssvfscanf_r+0xaf8>
   106f2:	3201      	adds	r2, #1
   106f4:	600a      	str	r2, [r1, #0]
   106f6:	f1b8 0801 	subs.w	r8, r8, #1
   106fa:	d198      	bne.n	1062e <__ssvfscanf_r+0x51a>
   106fc:	05e0      	lsls	r0, r4, #23
   106fe:	46d0      	mov	r8, sl
   10700:	63be      	str	r6, [r7, #56]	; 0x38
   10702:	46da      	mov	sl, fp
   10704:	468b      	mov	fp, r1
   10706:	d507      	bpl.n	10718 <__ssvfscanf_r+0x604>
   10708:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1070a:	429d      	cmp	r5, r3
   1070c:	f200 8422 	bhi.w	10f54 <__ssvfscanf_r+0xe40>
   10710:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10712:	429d      	cmp	r5, r3
   10714:	f43f adf3 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10718:	f014 0210 	ands.w	r2, r4, #16
   1071c:	d110      	bne.n	10740 <__ssvfscanf_r+0x62c>
   1071e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10722:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   10724:	702a      	strb	r2, [r5, #0]
   10726:	4648      	mov	r0, r9
   10728:	47b0      	blx	r6
   1072a:	06a1      	lsls	r1, r4, #26
   1072c:	f140 8408 	bpl.w	10f40 <__ssvfscanf_r+0xe2c>
   10730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10732:	f853 2b04 	ldr.w	r2, [r3], #4
   10736:	6010      	str	r0, [r2, #0]
   10738:	633b      	str	r3, [r7, #48]	; 0x30
   1073a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1073c:	3301      	adds	r3, #1
   1073e:	647b      	str	r3, [r7, #68]	; 0x44
   10740:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10742:	1aed      	subs	r5, r5, r3
   10744:	4445      	add	r5, r8
   10746:	44aa      	add	sl, r5
   10748:	e50b      	b.n	10162 <__ssvfscanf_r+0x4e>
   1074a:	f1b8 0f00 	cmp.w	r8, #0
   1074e:	bf08      	it	eq
   10750:	f04f 38ff 	moveq.w	r8, #4294967295
   10754:	07e0      	lsls	r0, r4, #31
   10756:	f140 8295 	bpl.w	10c84 <__ssvfscanf_r+0xb70>
   1075a:	f014 0310 	ands.w	r3, r4, #16
   1075e:	637b      	str	r3, [r7, #52]	; 0x34
   10760:	f040 8474 	bne.w	1104c <__ssvfscanf_r+0xf38>
   10764:	0621      	lsls	r1, r4, #24
   10766:	f140 8666 	bpl.w	11436 <__ssvfscanf_r+0x1322>
   1076a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1076c:	f854 3b04 	ldr.w	r3, [r4], #4
   10770:	63fb      	str	r3, [r7, #60]	; 0x3c
   10772:	2b00      	cmp	r3, #0
   10774:	f43f adc3 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10778:	2080      	movs	r0, #128	; 0x80
   1077a:	f7fa f92b 	bl	a9d4 <malloc>
   1077e:	64b8      	str	r0, [r7, #72]	; 0x48
   10780:	2800      	cmp	r0, #0
   10782:	f000 8778 	beq.w	11676 <__ssvfscanf_r+0x1562>
   10786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10788:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1078a:	601a      	str	r2, [r3, #0]
   1078c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1078e:	88d5      	ldrh	r5, [r2, #6]
   10790:	8893      	ldrh	r3, [r2, #4]
   10792:	429d      	cmp	r5, r3
   10794:	f080 8552 	bcs.w	1123c <__ssvfscanf_r+0x1128>
   10798:	6810      	ldr	r0, [r2, #0]
   1079a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1079c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   107a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   107a2:	633c      	str	r4, [r7, #48]	; 0x30
   107a4:	3501      	adds	r5, #1
   107a6:	80dd      	strh	r5, [r3, #6]
   107a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107aa:	62bb      	str	r3, [r7, #40]	; 0x28
   107ac:	2320      	movs	r3, #32
   107ae:	623b      	str	r3, [r7, #32]
   107b0:	f8db 3000 	ldr.w	r3, [fp]
   107b4:	4eb1      	ldr	r6, [pc, #708]	; (10a7c <__ssvfscanf_r+0x968>)
   107b6:	781b      	ldrb	r3, [r3, #0]
   107b8:	5cf3      	ldrb	r3, [r6, r3]
   107ba:	f013 0308 	ands.w	r3, r3, #8
   107be:	f040 84bb 	bne.w	11138 <__ssvfscanf_r+0x1024>
   107c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   107c4:	627e      	str	r6, [r7, #36]	; 0x24
   107c6:	461d      	mov	r5, r3
   107c8:	f7fc f906 	bl	c9d8 <__locale_mb_cur_max>
   107cc:	42a8      	cmp	r0, r5
   107ce:	f43f ad8d 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   107d2:	e9db 3200 	ldrd	r3, r2, [fp]
   107d6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   107da:	f813 1b01 	ldrb.w	r1, [r3], #1
   107de:	5541      	strb	r1, [r0, r5]
   107e0:	3a01      	subs	r2, #1
   107e2:	2c03      	cmp	r4, #3
   107e4:	e9cb 3200 	strd	r3, r2, [fp]
   107e8:	f105 0501 	add.w	r5, r5, #1
   107ec:	f107 0668 	add.w	r6, r7, #104	; 0x68
   107f0:	d102      	bne.n	107f8 <__ssvfscanf_r+0x6e4>
   107f2:	6833      	ldr	r3, [r6, #0]
   107f4:	2b04      	cmp	r3, #4
   107f6:	d004      	beq.n	10802 <__ssvfscanf_r+0x6ee>
   107f8:	2208      	movs	r2, #8
   107fa:	2100      	movs	r1, #0
   107fc:	4630      	mov	r0, r6
   107fe:	f7fc f821 	bl	c844 <memset>
   10802:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   10806:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10808:	9600      	str	r6, [sp, #0]
   1080a:	462b      	mov	r3, r5
   1080c:	4648      	mov	r0, r9
   1080e:	f002 fc17 	bl	13040 <_mbrtowc_r>
   10812:	1c42      	adds	r2, r0, #1
   10814:	4604      	mov	r4, r0
   10816:	f43f ad69 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   1081a:	2800      	cmp	r0, #0
   1081c:	f040 8478 	bne.w	11110 <__ssvfscanf_r+0xffc>
   10820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10822:	6018      	str	r0, [r3, #0]
   10824:	f002 fc68 	bl	130f8 <iswspace>
   10828:	2800      	cmp	r0, #0
   1082a:	f040 865c 	bne.w	114e6 <__ssvfscanf_r+0x13d2>
   1082e:	44aa      	add	sl, r5
   10830:	f108 38ff 	add.w	r8, r8, #4294967295
   10834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10836:	2b00      	cmp	r3, #0
   10838:	f040 8633 	bne.w	114a2 <__ssvfscanf_r+0x138e>
   1083c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1083e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10840:	3304      	adds	r3, #4
   10842:	64bb      	str	r3, [r7, #72]	; 0x48
   10844:	2a00      	cmp	r2, #0
   10846:	f000 862c 	beq.w	114a2 <__ssvfscanf_r+0x138e>
   1084a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1084c:	1a9d      	subs	r5, r3, r2
   1084e:	6a3b      	ldr	r3, [r7, #32]
   10850:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   10854:	f240 8756 	bls.w	11704 <__ssvfscanf_r+0x15f0>
   10858:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1085a:	f000 bc5c 	b.w	11116 <__ssvfscanf_r+0x1002>
   1085e:	f1b8 0f00 	cmp.w	r8, #0
   10862:	bf08      	it	eq
   10864:	f04f 38ff 	moveq.w	r8, #4294967295
   10868:	07e0      	lsls	r0, r4, #31
   1086a:	f140 827b 	bpl.w	10d64 <__ssvfscanf_r+0xc50>
   1086e:	f014 0310 	ands.w	r3, r4, #16
   10872:	62bb      	str	r3, [r7, #40]	; 0x28
   10874:	f040 83f3 	bne.w	1105e <__ssvfscanf_r+0xf4a>
   10878:	0621      	lsls	r1, r4, #24
   1087a:	f140 85ed 	bpl.w	11458 <__ssvfscanf_r+0x1344>
   1087e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   10880:	f856 3b04 	ldr.w	r3, [r6], #4
   10884:	623b      	str	r3, [r7, #32]
   10886:	2b00      	cmp	r3, #0
   10888:	f43f ad39 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   1088c:	2080      	movs	r0, #128	; 0x80
   1088e:	f7fa f8a1 	bl	a9d4 <malloc>
   10892:	4604      	mov	r4, r0
   10894:	2800      	cmp	r0, #0
   10896:	f000 86ee 	beq.w	11676 <__ssvfscanf_r+0x1562>
   1089a:	6a3b      	ldr	r3, [r7, #32]
   1089c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1089e:	6018      	str	r0, [r3, #0]
   108a0:	88d5      	ldrh	r5, [r2, #6]
   108a2:	8893      	ldrh	r3, [r2, #4]
   108a4:	429d      	cmp	r5, r3
   108a6:	f080 84dd 	bcs.w	11264 <__ssvfscanf_r+0x1150>
   108aa:	6810      	ldr	r0, [r2, #0]
   108ac:	6a3b      	ldr	r3, [r7, #32]
   108ae:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   108b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   108b4:	633e      	str	r6, [r7, #48]	; 0x30
   108b6:	3501      	adds	r5, #1
   108b8:	80dd      	strh	r5, [r3, #6]
   108ba:	2320      	movs	r3, #32
   108bc:	61fc      	str	r4, [r7, #28]
   108be:	61bb      	str	r3, [r7, #24]
   108c0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   108c2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   108c6:	2500      	movs	r5, #0
   108c8:	46c2      	mov	sl, r8
   108ca:	46a0      	mov	r8, r4
   108cc:	f7fc f884 	bl	c9d8 <__locale_mb_cur_max>
   108d0:	42a8      	cmp	r0, r5
   108d2:	f43f ad0b 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   108d6:	e9db 3200 	ldrd	r3, r2, [fp]
   108da:	f813 1b01 	ldrb.w	r1, [r3], #1
   108de:	3a01      	subs	r2, #1
   108e0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   108e4:	e9cb 3200 	strd	r3, r2, [fp]
   108e8:	2e03      	cmp	r6, #3
   108ea:	f105 0301 	add.w	r3, r5, #1
   108ee:	5541      	strb	r1, [r0, r5]
   108f0:	64bb      	str	r3, [r7, #72]	; 0x48
   108f2:	f107 0460 	add.w	r4, r7, #96	; 0x60
   108f6:	d102      	bne.n	108fe <__ssvfscanf_r+0x7ea>
   108f8:	6823      	ldr	r3, [r4, #0]
   108fa:	2b04      	cmp	r3, #4
   108fc:	d004      	beq.n	10908 <__ssvfscanf_r+0x7f4>
   108fe:	2208      	movs	r2, #8
   10900:	2100      	movs	r1, #0
   10902:	4620      	mov	r0, r4
   10904:	f7fb ff9e 	bl	c844 <memset>
   10908:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   1090c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1090e:	9400      	str	r4, [sp, #0]
   10910:	4641      	mov	r1, r8
   10912:	4648      	mov	r0, r9
   10914:	f002 fb94 	bl	13040 <_mbrtowc_r>
   10918:	1c42      	adds	r2, r0, #1
   1091a:	4606      	mov	r6, r0
   1091c:	f43f ace6 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   10920:	2800      	cmp	r0, #0
   10922:	f040 82ca 	bne.w	10eba <__ssvfscanf_r+0xda6>
   10926:	f8c8 0000 	str.w	r0, [r8]
   1092a:	4605      	mov	r5, r0
   1092c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   10930:	2208      	movs	r2, #8
   10932:	2100      	movs	r1, #0
   10934:	4618      	mov	r0, r3
   10936:	637b      	str	r3, [r7, #52]	; 0x34
   10938:	f7fb ff84 	bl	c844 <memset>
   1093c:	4950      	ldr	r1, [pc, #320]	; (10a80 <__ssvfscanf_r+0x96c>)
   1093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10940:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   10944:	462a      	mov	r2, r5
   10946:	4648      	mov	r0, r9
   10948:	460d      	mov	r5, r1
   1094a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1094e:	47a8      	blx	r5
   10950:	2801      	cmp	r0, #1
   10952:	f000 83d5 	beq.w	11100 <__ssvfscanf_r+0xfec>
   10956:	2200      	movs	r2, #0
   10958:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1095c:	5c9b      	ldrb	r3, [r3, r2]
   1095e:	2b00      	cmp	r3, #0
   10960:	f000 85a1 	beq.w	114a6 <__ssvfscanf_r+0x1392>
   10964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10966:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10968:	2e03      	cmp	r6, #3
   1096a:	4413      	add	r3, r2
   1096c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1096e:	f000 83ca 	beq.w	11106 <__ssvfscanf_r+0xff2>
   10972:	f10a 3aff 	add.w	sl, sl, #4294967295
   10976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10978:	b95b      	cbnz	r3, 10992 <__ssvfscanf_r+0x87e>
   1097a:	6a3b      	ldr	r3, [r7, #32]
   1097c:	f108 0804 	add.w	r8, r8, #4
   10980:	b13b      	cbz	r3, 10992 <__ssvfscanf_r+0x87e>
   10982:	69fb      	ldr	r3, [r7, #28]
   10984:	eba8 0403 	sub.w	r4, r8, r3
   10988:	69bb      	ldr	r3, [r7, #24]
   1098a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   1098e:	f240 8405 	bls.w	1119c <__ssvfscanf_r+0x1088>
   10992:	f8db 3004 	ldr.w	r3, [fp, #4]
   10996:	2b00      	cmp	r3, #0
   10998:	f04f 0500 	mov.w	r5, #0
   1099c:	f340 8296 	ble.w	10ecc <__ssvfscanf_r+0xdb8>
   109a0:	f1ba 0f00 	cmp.w	sl, #0
   109a4:	d192      	bne.n	108cc <__ssvfscanf_r+0x7b8>
   109a6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   109aa:	627e      	str	r6, [r7, #36]	; 0x24
   109ac:	4644      	mov	r4, r8
   109ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109b0:	2b00      	cmp	r3, #0
   109b2:	f47f abd6 	bne.w	10162 <__ssvfscanf_r+0x4e>
   109b6:	6023      	str	r3, [r4, #0]
   109b8:	6a3b      	ldr	r3, [r7, #32]
   109ba:	2b00      	cmp	r3, #0
   109bc:	f000 81c2 	beq.w	10d44 <__ssvfscanf_r+0xc30>
   109c0:	69fb      	ldr	r3, [r7, #28]
   109c2:	69ba      	ldr	r2, [r7, #24]
   109c4:	1ae1      	subs	r1, r4, r3
   109c6:	108b      	asrs	r3, r1, #2
   109c8:	3301      	adds	r3, #1
   109ca:	429a      	cmp	r2, r3
   109cc:	f240 81ba 	bls.w	10d44 <__ssvfscanf_r+0xc30>
   109d0:	6a3c      	ldr	r4, [r7, #32]
   109d2:	3104      	adds	r1, #4
   109d4:	6820      	ldr	r0, [r4, #0]
   109d6:	f7fa fac9 	bl	af6c <realloc>
   109da:	2800      	cmp	r0, #0
   109dc:	f000 81b2 	beq.w	10d44 <__ssvfscanf_r+0xc30>
   109e0:	6020      	str	r0, [r4, #0]
   109e2:	e1af      	b.n	10d44 <__ssvfscanf_r+0xc30>
   109e4:	0521      	lsls	r1, r4, #20
   109e6:	f57f adb3 	bpl.w	10550 <__ssvfscanf_r+0x43c>
   109ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   109ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   109ee:	185b      	adds	r3, r3, r1
   109f0:	f47f adae 	bne.w	10550 <__ssvfscanf_r+0x43c>
   109f4:	64bb      	str	r3, [r7, #72]	; 0x48
   109f6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   109fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   109fc:	e593      	b.n	10526 <__ssvfscanf_r+0x412>
   109fe:	4b21      	ldr	r3, [pc, #132]	; (10a84 <__ssvfscanf_r+0x970>)
   10a00:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   10a04:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10a08:	e66b      	b.n	106e2 <__ssvfscanf_r+0x5ce>
   10a0a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   10a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   10a12:	f47f ad9d 	bne.w	10550 <__ssvfscanf_r+0x43c>
   10a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a18:	2b01      	cmp	r3, #1
   10a1a:	f47f ad99 	bne.w	10550 <__ssvfscanf_r+0x43c>
   10a1e:	2330      	movs	r3, #48	; 0x30
   10a20:	f805 3b01 	strb.w	r3, [r5], #1
   10a24:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10a28:	2300      	movs	r3, #0
   10a2a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   10a2e:	3e01      	subs	r6, #1
   10a30:	637b      	str	r3, [r7, #52]	; 0x34
   10a32:	e578      	b.n	10526 <__ssvfscanf_r+0x412>
   10a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a36:	2b06      	cmp	r3, #6
   10a38:	f040 8574 	bne.w	11524 <__ssvfscanf_r+0x1410>
   10a3c:	2307      	movs	r3, #7
   10a3e:	64bb      	str	r3, [r7, #72]	; 0x48
   10a40:	e571      	b.n	10526 <__ssvfscanf_r+0x412>
   10a42:	0523      	lsls	r3, r4, #20
   10a44:	f57f ad84 	bpl.w	10550 <__ssvfscanf_r+0x43c>
   10a48:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   10a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10a50:	d005      	beq.n	10a5e <__ssvfscanf_r+0x94a>
   10a52:	0561      	lsls	r1, r4, #21
   10a54:	f57f ad7c 	bpl.w	10550 <__ssvfscanf_r+0x43c>
   10a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	d047      	beq.n	10aee <__ssvfscanf_r+0x9da>
   10a5e:	05a3      	lsls	r3, r4, #22
   10a60:	d404      	bmi.n	10a6c <__ssvfscanf_r+0x958>
   10a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a64:	69f9      	ldr	r1, [r7, #28]
   10a66:	1a5b      	subs	r3, r3, r1
   10a68:	e9c7 5305 	strd	r5, r3, [r7, #20]
   10a6c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   10a70:	2300      	movs	r3, #0
   10a72:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   10a76:	637b      	str	r3, [r7, #52]	; 0x34
   10a78:	e555      	b.n	10526 <__ssvfscanf_r+0x412>
   10a7a:	bf00      	nop
   10a7c:	20000d59 	.word	0x20000d59
   10a80:	200088f4 	.word	0x200088f4
   10a84:	2000297c 	.word	0x2000297c
   10a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a8a:	2b00      	cmp	r3, #0
   10a8c:	f000 81ff 	beq.w	10e8e <__ssvfscanf_r+0xd7a>
   10a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a92:	2b02      	cmp	r3, #2
   10a94:	f000 83b0 	beq.w	111f8 <__ssvfscanf_r+0x10e4>
   10a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a9a:	2b01      	cmp	r3, #1
   10a9c:	f000 81f1 	beq.w	10e82 <__ssvfscanf_r+0xd6e>
   10aa0:	2b04      	cmp	r3, #4
   10aa2:	f000 81ee 	beq.w	10e82 <__ssvfscanf_r+0xd6e>
   10aa6:	e553      	b.n	10550 <__ssvfscanf_r+0x43c>
   10aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10aaa:	2b07      	cmp	r3, #7
   10aac:	f040 853a 	bne.w	11524 <__ssvfscanf_r+0x1410>
   10ab0:	2308      	movs	r3, #8
   10ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   10ab4:	e537      	b.n	10526 <__ssvfscanf_r+0x412>
   10ab6:	0520      	lsls	r0, r4, #20
   10ab8:	f100 81f9 	bmi.w	10eae <__ssvfscanf_r+0xd9a>
   10abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10abe:	2b01      	cmp	r3, #1
   10ac0:	f47f ad46 	bne.w	10550 <__ssvfscanf_r+0x43c>
   10ac4:	2302      	movs	r3, #2
   10ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   10ac8:	e52d      	b.n	10526 <__ssvfscanf_r+0x412>
   10aca:	0623      	lsls	r3, r4, #24
   10acc:	f57f ad40 	bpl.w	10550 <__ssvfscanf_r+0x43c>
   10ad0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10ad4:	e527      	b.n	10526 <__ssvfscanf_r+0x412>
   10ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10ad8:	2b00      	cmp	r3, #0
   10ada:	f040 81cc 	bne.w	10e76 <__ssvfscanf_r+0xd62>
   10ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10ae0:	b9b3      	cbnz	r3, 10b10 <__ssvfscanf_r+0x9fc>
   10ae2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   10ae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   10aea:	f000 8520 	beq.w	1152e <__ssvfscanf_r+0x141a>
   10aee:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10af0:	ee18 9a10 	vmov	r9, s16
   10af4:	e533      	b.n	1055e <__ssvfscanf_r+0x44a>
   10af6:	0521      	lsls	r1, r4, #20
   10af8:	f100 81b7 	bmi.w	10e6a <__ssvfscanf_r+0xd56>
   10afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10afe:	2b02      	cmp	r3, #2
   10b00:	f040 8510 	bne.w	11524 <__ssvfscanf_r+0x1410>
   10b04:	2303      	movs	r3, #3
   10b06:	64bb      	str	r3, [r7, #72]	; 0x48
   10b08:	e50d      	b.n	10526 <__ssvfscanf_r+0x412>
   10b0a:	0520      	lsls	r0, r4, #20
   10b0c:	d59c      	bpl.n	10a48 <__ssvfscanf_r+0x934>
   10b0e:	e76c      	b.n	109ea <__ssvfscanf_r+0x8d6>
   10b10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10b12:	ee18 9a10 	vmov	r9, s16
   10b16:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10b1a:	e520      	b.n	1055e <__ssvfscanf_r+0x44a>
   10b1c:	4b8d      	ldr	r3, [pc, #564]	; (10d54 <__ssvfscanf_r+0xc40>)
   10b1e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10b22:	2e08      	cmp	r6, #8
   10b24:	f73f addb 	bgt.w	106de <__ssvfscanf_r+0x5ca>
   10b28:	e5e8      	b.n	106fc <__ssvfscanf_r+0x5e8>
   10b2a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10b32:	f47f ade3 	bne.w	106fc <__ssvfscanf_r+0x5e8>
   10b36:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   10b3a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   10b3e:	2610      	movs	r6, #16
   10b40:	e5cf      	b.n	106e2 <__ssvfscanf_r+0x5ce>
   10b42:	0623      	lsls	r3, r4, #24
   10b44:	f57f adda 	bpl.w	106fc <__ssvfscanf_r+0x5e8>
   10b48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10b4c:	e5c9      	b.n	106e2 <__ssvfscanf_r+0x5ce>
   10b4e:	f044 0401 	orr.w	r4, r4, #1
   10b52:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b56:	64f9      	str	r1, [r7, #76]	; 0x4c
   10b58:	2b00      	cmp	r3, #0
   10b5a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10b5e:	f04f 0500 	mov.w	r5, #0
   10b62:	f73f abf8 	bgt.w	10356 <__ssvfscanf_r+0x242>
   10b66:	4659      	mov	r1, fp
   10b68:	4648      	mov	r0, r9
   10b6a:	f002 fc7d 	bl	13468 <__ssrefill_r>
   10b6e:	2800      	cmp	r0, #0
   10b70:	f47f abbc 	bne.w	102ec <__ssvfscanf_r+0x1d8>
   10b74:	0660      	lsls	r0, r4, #25
   10b76:	f53f abf1 	bmi.w	1035c <__ssvfscanf_r+0x248>
   10b7a:	f8db 2000 	ldr.w	r2, [fp]
   10b7e:	4e76      	ldr	r6, [pc, #472]	; (10d58 <__ssvfscanf_r+0xc44>)
   10b80:	7813      	ldrb	r3, [r2, #0]
   10b82:	5cf3      	ldrb	r3, [r6, r3]
   10b84:	0719      	lsls	r1, r3, #28
   10b86:	f57f abe9 	bpl.w	1035c <__ssvfscanf_r+0x248>
   10b8a:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b8e:	3b01      	subs	r3, #1
   10b90:	2b00      	cmp	r3, #0
   10b92:	f10a 0a01 	add.w	sl, sl, #1
   10b96:	f8cb 3004 	str.w	r3, [fp, #4]
   10b9a:	f102 0201 	add.w	r2, r2, #1
   10b9e:	dd4a      	ble.n	10c36 <__ssvfscanf_r+0xb22>
   10ba0:	f8cb 2000 	str.w	r2, [fp]
   10ba4:	7813      	ldrb	r3, [r2, #0]
   10ba6:	5cf3      	ldrb	r3, [r6, r3]
   10ba8:	0719      	lsls	r1, r3, #28
   10baa:	f57f abd7 	bpl.w	1035c <__ssvfscanf_r+0x248>
   10bae:	e7ec      	b.n	10b8a <__ssvfscanf_r+0xa76>
   10bb0:	f044 0401 	orr.w	r4, r4, #1
   10bb4:	4b69      	ldr	r3, [pc, #420]	; (10d5c <__ssvfscanf_r+0xc48>)
   10bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   10bb8:	2308      	movs	r3, #8
   10bba:	64f9      	str	r1, [r7, #76]	; 0x4c
   10bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   10bbe:	2503      	movs	r5, #3
   10bc0:	f7ff bbc4 	b.w	1034c <__ssvfscanf_r+0x238>
   10bc4:	f044 0401 	orr.w	r4, r4, #1
   10bc8:	4b65      	ldr	r3, [pc, #404]	; (10d60 <__ssvfscanf_r+0xc4c>)
   10bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   10bcc:	230a      	movs	r3, #10
   10bce:	64f9      	str	r1, [r7, #76]	; 0x4c
   10bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   10bd2:	2503      	movs	r5, #3
   10bd4:	f7ff bbba 	b.w	1034c <__ssvfscanf_r+0x238>
   10bd8:	0523      	lsls	r3, r4, #20
   10bda:	f57f ad82 	bpl.w	106e2 <__ssvfscanf_r+0x5ce>
   10bde:	b916      	cbnz	r6, 10be6 <__ssvfscanf_r+0xad2>
   10be0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   10be4:	2608      	movs	r6, #8
   10be6:	0563      	lsls	r3, r4, #21
   10be8:	f100 81a6 	bmi.w	10f38 <__ssvfscanf_r+0xe24>
   10bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bee:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   10bf2:	b11b      	cbz	r3, 10bfc <__ssvfscanf_r+0xae8>
   10bf4:	3b01      	subs	r3, #1
   10bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   10bf8:	f108 0801 	add.w	r8, r8, #1
   10bfc:	684b      	ldr	r3, [r1, #4]
   10bfe:	3b01      	subs	r3, #1
   10c00:	2b00      	cmp	r3, #0
   10c02:	f10a 0a01 	add.w	sl, sl, #1
   10c06:	604b      	str	r3, [r1, #4]
   10c08:	f73f ad73 	bgt.w	106f2 <__ssvfscanf_r+0x5de>
   10c0c:	4648      	mov	r0, r9
   10c0e:	64b9      	str	r1, [r7, #72]	; 0x48
   10c10:	f002 fc2a 	bl	13468 <__ssrefill_r>
   10c14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10c16:	2800      	cmp	r0, #0
   10c18:	f43f ad6d 	beq.w	106f6 <__ssvfscanf_r+0x5e2>
   10c1c:	e56e      	b.n	106fc <__ssvfscanf_r+0x5e8>
   10c1e:	ee18 0a10 	vmov	r0, s16
   10c22:	4659      	mov	r1, fp
   10c24:	f002 fc20 	bl	13468 <__ssrefill_r>
   10c28:	2800      	cmp	r0, #0
   10c2a:	f47f ac91 	bne.w	10550 <__ssvfscanf_r+0x43c>
   10c2e:	2e00      	cmp	r6, #0
   10c30:	f47f abc4 	bne.w	103bc <__ssvfscanf_r+0x2a8>
   10c34:	e48c      	b.n	10550 <__ssvfscanf_r+0x43c>
   10c36:	4659      	mov	r1, fp
   10c38:	4648      	mov	r0, r9
   10c3a:	f002 fc15 	bl	13468 <__ssrefill_r>
   10c3e:	2800      	cmp	r0, #0
   10c40:	f47f ab54 	bne.w	102ec <__ssvfscanf_r+0x1d8>
   10c44:	f8db 2000 	ldr.w	r2, [fp]
   10c48:	e79a      	b.n	10b80 <__ssvfscanf_r+0xa6c>
   10c4a:	f8db 2004 	ldr.w	r2, [fp, #4]
   10c4e:	e00f      	b.n	10c70 <__ssvfscanf_r+0xb5c>
   10c50:	f8db 3000 	ldr.w	r3, [fp]
   10c54:	781a      	ldrb	r2, [r3, #0]
   10c56:	5cb2      	ldrb	r2, [r6, r2]
   10c58:	0711      	lsls	r1, r2, #28
   10c5a:	f103 0301 	add.w	r3, r3, #1
   10c5e:	f57f aa80 	bpl.w	10162 <__ssvfscanf_r+0x4e>
   10c62:	f8db 2004 	ldr.w	r2, [fp, #4]
   10c66:	3a01      	subs	r2, #1
   10c68:	e9cb 3200 	strd	r3, r2, [fp]
   10c6c:	f10a 0a01 	add.w	sl, sl, #1
   10c70:	2a00      	cmp	r2, #0
   10c72:	dced      	bgt.n	10c50 <__ssvfscanf_r+0xb3c>
   10c74:	4659      	mov	r1, fp
   10c76:	4648      	mov	r0, r9
   10c78:	f002 fbf6 	bl	13468 <__ssrefill_r>
   10c7c:	2800      	cmp	r0, #0
   10c7e:	d0e7      	beq.n	10c50 <__ssvfscanf_r+0xb3c>
   10c80:	f7ff ba6f 	b.w	10162 <__ssvfscanf_r+0x4e>
   10c84:	06e1      	lsls	r1, r4, #27
   10c86:	f100 8349 	bmi.w	1131c <__ssvfscanf_r+0x1208>
   10c8a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   10c8e:	f000 83ab 	beq.w	113e8 <__ssvfscanf_r+0x12d4>
   10c92:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10c94:	f854 6b04 	ldr.w	r6, [r4], #4
   10c98:	64be      	str	r6, [r7, #72]	; 0x48
   10c9a:	2e00      	cmp	r6, #0
   10c9c:	f43f ab2f 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10ca0:	2020      	movs	r0, #32
   10ca2:	f7f9 fe97 	bl	a9d4 <malloc>
   10ca6:	4605      	mov	r5, r0
   10ca8:	2800      	cmp	r0, #0
   10caa:	f000 8462 	beq.w	11572 <__ssvfscanf_r+0x145e>
   10cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10cb0:	6030      	str	r0, [r6, #0]
   10cb2:	8893      	ldrh	r3, [r2, #4]
   10cb4:	88d6      	ldrh	r6, [r2, #6]
   10cb6:	429e      	cmp	r6, r3
   10cb8:	f080 82a8 	bcs.w	1120c <__ssvfscanf_r+0x10f8>
   10cbc:	6810      	ldr	r0, [r2, #0]
   10cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10cc0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10cc6:	633c      	str	r4, [r7, #48]	; 0x30
   10cc8:	3601      	adds	r6, #1
   10cca:	80de      	strh	r6, [r3, #6]
   10ccc:	2320      	movs	r3, #32
   10cce:	63fb      	str	r3, [r7, #60]	; 0x3c
   10cd0:	f8db 2000 	ldr.w	r2, [fp]
   10cd4:	4e20      	ldr	r6, [pc, #128]	; (10d58 <__ssvfscanf_r+0xc44>)
   10cd6:	7811      	ldrb	r1, [r2, #0]
   10cd8:	5c71      	ldrb	r1, [r6, r1]
   10cda:	0708      	lsls	r0, r1, #28
   10cdc:	f100 82ac 	bmi.w	11238 <__ssvfscanf_r+0x1124>
   10ce0:	4633      	mov	r3, r6
   10ce2:	462c      	mov	r4, r5
   10ce4:	4610      	mov	r0, r2
   10ce6:	462e      	mov	r6, r5
   10ce8:	f8db 1004 	ldr.w	r1, [fp, #4]
   10cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10cee:	3901      	subs	r1, #1
   10cf0:	f8cb 1004 	str.w	r1, [fp, #4]
   10cf4:	1c41      	adds	r1, r0, #1
   10cf6:	f8cb 1000 	str.w	r1, [fp]
   10cfa:	4635      	mov	r5, r6
   10cfc:	7801      	ldrb	r1, [r0, #0]
   10cfe:	f805 1b01 	strb.w	r1, [r5], #1
   10d02:	b122      	cbz	r2, 10d0e <__ssvfscanf_r+0xbfa>
   10d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10d06:	1b2e      	subs	r6, r5, r4
   10d08:	4296      	cmp	r6, r2
   10d0a:	f080 837a 	bcs.w	11402 <__ssvfscanf_r+0x12ee>
   10d0e:	f1b8 0801 	subs.w	r8, r8, #1
   10d12:	d00b      	beq.n	10d2c <__ssvfscanf_r+0xc18>
   10d14:	f8db 1004 	ldr.w	r1, [fp, #4]
   10d18:	2900      	cmp	r1, #0
   10d1a:	462e      	mov	r6, r5
   10d1c:	f340 83ae 	ble.w	1147c <__ssvfscanf_r+0x1368>
   10d20:	f8db 0000 	ldr.w	r0, [fp]
   10d24:	7801      	ldrb	r1, [r0, #0]
   10d26:	5c59      	ldrb	r1, [r3, r1]
   10d28:	0709      	lsls	r1, r1, #28
   10d2a:	d5dd      	bpl.n	10ce8 <__ssvfscanf_r+0xbd4>
   10d2c:	1b29      	subs	r1, r5, r4
   10d2e:	448a      	add	sl, r1
   10d30:	3101      	adds	r1, #1
   10d32:	f04f 0300 	mov.w	r3, #0
   10d36:	702b      	strb	r3, [r5, #0]
   10d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10d3a:	b11b      	cbz	r3, 10d44 <__ssvfscanf_r+0xc30>
   10d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d3e:	428b      	cmp	r3, r1
   10d40:	f200 8394 	bhi.w	1146c <__ssvfscanf_r+0x1358>
   10d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10d46:	3301      	adds	r3, #1
   10d48:	647b      	str	r3, [r7, #68]	; 0x44
   10d4a:	f7ff ba0a 	b.w	10162 <__ssvfscanf_r+0x4e>
   10d4e:	2300      	movs	r3, #0
   10d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   10d52:	e461      	b.n	10618 <__ssvfscanf_r+0x504>
   10d54:	2000297c 	.word	0x2000297c
   10d58:	20000d59 	.word	0x20000d59
   10d5c:	00012d2d 	.word	0x00012d2d
   10d60:	0000c321 	.word	0x0000c321
   10d64:	06e6      	lsls	r6, r4, #27
   10d66:	f100 8181 	bmi.w	1106c <__ssvfscanf_r+0xf58>
   10d6a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   10d6e:	f000 836d 	beq.w	1144c <__ssvfscanf_r+0x1338>
   10d72:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10d74:	f854 6b04 	ldr.w	r6, [r4], #4
   10d78:	64be      	str	r6, [r7, #72]	; 0x48
   10d7a:	2e00      	cmp	r6, #0
   10d7c:	f43f aabf 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10d80:	2020      	movs	r0, #32
   10d82:	f7f9 fe27 	bl	a9d4 <malloc>
   10d86:	4605      	mov	r5, r0
   10d88:	2800      	cmp	r0, #0
   10d8a:	f000 83f2 	beq.w	11572 <__ssvfscanf_r+0x145e>
   10d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10d90:	6030      	str	r0, [r6, #0]
   10d92:	8893      	ldrh	r3, [r2, #4]
   10d94:	88d6      	ldrh	r6, [r2, #6]
   10d96:	429e      	cmp	r6, r3
   10d98:	f080 827a 	bcs.w	11290 <__ssvfscanf_r+0x117c>
   10d9c:	6810      	ldr	r0, [r2, #0]
   10d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10da0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10da6:	633c      	str	r4, [r7, #48]	; 0x30
   10da8:	3601      	adds	r6, #1
   10daa:	80de      	strh	r6, [r3, #6]
   10dac:	2420      	movs	r4, #32
   10dae:	f8db 2000 	ldr.w	r2, [fp]
   10db2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10db6:	4619      	mov	r1, r3
   10db8:	7813      	ldrb	r3, [r2, #0]
   10dba:	5ccb      	ldrb	r3, [r1, r3]
   10dbc:	2b00      	cmp	r3, #0
   10dbe:	f43f aa9e 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10dc2:	ee08 9a10 	vmov	s16, r9
   10dc6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   10dca:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   10dce:	462e      	mov	r6, r5
   10dd0:	46a2      	mov	sl, r4
   10dd2:	4610      	mov	r0, r2
   10dd4:	460c      	mov	r4, r1
   10dd6:	f8db 1004 	ldr.w	r1, [fp, #4]
   10dda:	1c43      	adds	r3, r0, #1
   10ddc:	3901      	subs	r1, #1
   10dde:	e9cb 3100 	strd	r3, r1, [fp]
   10de2:	4629      	mov	r1, r5
   10de4:	7800      	ldrb	r0, [r0, #0]
   10de6:	f801 0b01 	strb.w	r0, [r1], #1
   10dea:	f1b9 0f00 	cmp.w	r9, #0
   10dee:	d002      	beq.n	10df6 <__ssvfscanf_r+0xce2>
   10df0:	1b8d      	subs	r5, r1, r6
   10df2:	4555      	cmp	r5, sl
   10df4:	d27a      	bcs.n	10eec <__ssvfscanf_r+0xdd8>
   10df6:	460d      	mov	r5, r1
   10df8:	f1b8 0801 	subs.w	r8, r8, #1
   10dfc:	d00a      	beq.n	10e14 <__ssvfscanf_r+0xd00>
   10dfe:	f8db 1004 	ldr.w	r1, [fp, #4]
   10e02:	2900      	cmp	r1, #0
   10e04:	f340 816a 	ble.w	110dc <__ssvfscanf_r+0xfc8>
   10e08:	f8db 0000 	ldr.w	r0, [fp]
   10e0c:	7801      	ldrb	r1, [r0, #0]
   10e0e:	5c61      	ldrb	r1, [r4, r1]
   10e10:	2900      	cmp	r1, #0
   10e12:	d1e0      	bne.n	10dd6 <__ssvfscanf_r+0xcc2>
   10e14:	4654      	mov	r4, sl
   10e16:	ee18 9a10 	vmov	r9, s16
   10e1a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10e1e:	1bae      	subs	r6, r5, r6
   10e20:	f43f aa6d 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   10e24:	f04f 0300 	mov.w	r3, #0
   10e28:	702b      	strb	r3, [r5, #0]
   10e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e2c:	b11b      	cbz	r3, 10e36 <__ssvfscanf_r+0xd22>
   10e2e:	1c71      	adds	r1, r6, #1
   10e30:	428c      	cmp	r4, r1
   10e32:	f200 832d 	bhi.w	11490 <__ssvfscanf_r+0x137c>
   10e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10e38:	3301      	adds	r3, #1
   10e3a:	44b2      	add	sl, r6
   10e3c:	647b      	str	r3, [r7, #68]	; 0x44
   10e3e:	f7ff b990 	b.w	10162 <__ssvfscanf_r+0x4e>
   10e42:	2300      	movs	r3, #0
   10e44:	613b      	str	r3, [r7, #16]
   10e46:	f7ff baa9 	b.w	1039c <__ssvfscanf_r+0x288>
   10e4a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   10e4e:	f47f aa56 	bne.w	102fe <__ssvfscanf_r+0x1ea>
   10e52:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10e56:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   10e5a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   10e5e:	f7ff ba67 	b.w	10330 <__ssvfscanf_r+0x21c>
   10e62:	64f9      	str	r1, [r7, #76]	; 0x4c
   10e64:	2504      	movs	r5, #4
   10e66:	f7ff ba71 	b.w	1034c <__ssvfscanf_r+0x238>
   10e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10e6e:	185b      	adds	r3, r3, r1
   10e70:	f47f ae44 	bne.w	10afc <__ssvfscanf_r+0x9e8>
   10e74:	e5be      	b.n	109f4 <__ssvfscanf_r+0x8e0>
   10e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e78:	2b03      	cmp	r3, #3
   10e7a:	d002      	beq.n	10e82 <__ssvfscanf_r+0xd6e>
   10e7c:	2b05      	cmp	r3, #5
   10e7e:	f47f ab67 	bne.w	10550 <__ssvfscanf_r+0x43c>
   10e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e84:	3301      	adds	r3, #1
   10e86:	b2db      	uxtb	r3, r3
   10e88:	64bb      	str	r3, [r7, #72]	; 0x48
   10e8a:	f7ff bb4c 	b.w	10526 <__ssvfscanf_r+0x412>
   10e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10e90:	2b00      	cmp	r3, #0
   10e92:	f47f ae01 	bne.w	10a98 <__ssvfscanf_r+0x984>
   10e96:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   10e9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   10e9e:	f47f adfb 	bne.w	10a98 <__ssvfscanf_r+0x984>
   10ea2:	2301      	movs	r3, #1
   10ea4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   10eaa:	f7ff bb3c 	b.w	10526 <__ssvfscanf_r+0x412>
   10eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10eb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10eb2:	185b      	adds	r3, r3, r1
   10eb4:	f47f ae02 	bne.w	10abc <__ssvfscanf_r+0x9a8>
   10eb8:	e59c      	b.n	109f4 <__ssvfscanf_r+0x8e0>
   10eba:	1c83      	adds	r3, r0, #2
   10ebc:	f040 845b 	bne.w	11776 <__ssvfscanf_r+0x1662>
   10ec0:	f8db 3004 	ldr.w	r3, [fp, #4]
   10ec4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10ec6:	2b00      	cmp	r3, #0
   10ec8:	f73f ad00 	bgt.w	108cc <__ssvfscanf_r+0x7b8>
   10ecc:	4659      	mov	r1, fp
   10ece:	4648      	mov	r0, r9
   10ed0:	f002 faca 	bl	13468 <__ssrefill_r>
   10ed4:	2800      	cmp	r0, #0
   10ed6:	f43f ad63 	beq.w	109a0 <__ssvfscanf_r+0x88c>
   10eda:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10ede:	627e      	str	r6, [r7, #36]	; 0x24
   10ee0:	4644      	mov	r4, r8
   10ee2:	2d00      	cmp	r5, #0
   10ee4:	f43f ad63 	beq.w	109ae <__ssvfscanf_r+0x89a>
   10ee8:	f7ff ba00 	b.w	102ec <__ssvfscanf_r+0x1d8>
   10eec:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   10ef0:	4630      	mov	r0, r6
   10ef2:	4651      	mov	r1, sl
   10ef4:	f7fa f83a 	bl	af6c <realloc>
   10ef8:	4606      	mov	r6, r0
   10efa:	2800      	cmp	r0, #0
   10efc:	f000 8339 	beq.w	11572 <__ssvfscanf_r+0x145e>
   10f00:	4405      	add	r5, r0
   10f02:	f8c9 0000 	str.w	r0, [r9]
   10f06:	e777      	b.n	10df8 <__ssvfscanf_r+0xce4>
   10f08:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   10f0c:	4bbc      	ldr	r3, [pc, #752]	; (11200 <__ssvfscanf_r+0x10ec>)
   10f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10f10:	2310      	movs	r3, #16
   10f12:	64f9      	str	r1, [r7, #76]	; 0x4c
   10f14:	63bb      	str	r3, [r7, #56]	; 0x38
   10f16:	2503      	movs	r5, #3
   10f18:	f7ff ba18 	b.w	1034c <__ssvfscanf_r+0x238>
   10f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10f1e:	3301      	adds	r3, #1
   10f20:	637b      	str	r3, [r7, #52]	; 0x34
   10f22:	693b      	ldr	r3, [r7, #16]
   10f24:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10f28:	2b00      	cmp	r3, #0
   10f2a:	f43f aafe 	beq.w	1052a <__ssvfscanf_r+0x416>
   10f2e:	693b      	ldr	r3, [r7, #16]
   10f30:	3b01      	subs	r3, #1
   10f32:	613b      	str	r3, [r7, #16]
   10f34:	f7ff bafa 	b.w	1052c <__ssvfscanf_r+0x418>
   10f38:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   10f3c:	f7ff bbd1 	b.w	106e2 <__ssvfscanf_r+0x5ce>
   10f40:	0722      	lsls	r2, r4, #28
   10f42:	f140 81c7 	bpl.w	112d4 <__ssvfscanf_r+0x11c0>
   10f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10f48:	f853 2b04 	ldr.w	r2, [r3], #4
   10f4c:	633b      	str	r3, [r7, #48]	; 0x30
   10f4e:	7010      	strb	r0, [r2, #0]
   10f50:	f7ff bbf3 	b.w	1073a <__ssvfscanf_r+0x626>
   10f54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   10f58:	465a      	mov	r2, fp
   10f5a:	4648      	mov	r0, r9
   10f5c:	3d01      	subs	r5, #1
   10f5e:	f002 fa43 	bl	133e8 <_sungetc_r>
   10f62:	f7ff bbd5 	b.w	10710 <__ssvfscanf_r+0x5fc>
   10f66:	69fb      	ldr	r3, [r7, #28]
   10f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10f6a:	4293      	cmp	r3, r2
   10f6c:	f43f ab2d 	beq.w	105ca <__ssvfscanf_r+0x4b6>
   10f70:	1a9a      	subs	r2, r3, r2
   10f72:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   10f76:	429d      	cmp	r5, r3
   10f78:	bf28      	it	cs
   10f7a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   10f7e:	49a1      	ldr	r1, [pc, #644]	; (11204 <__ssvfscanf_r+0x10f0>)
   10f80:	4628      	mov	r0, r5
   10f82:	f7fb fab9 	bl	c4f8 <sprintf>
   10f86:	f7ff bb20 	b.w	105ca <__ssvfscanf_r+0x4b6>
   10f8a:	06e2      	lsls	r2, r4, #27
   10f8c:	f100 8131 	bmi.w	111f2 <__ssvfscanf_r+0x10de>
   10f90:	0723      	lsls	r3, r4, #28
   10f92:	f100 81ba 	bmi.w	1130a <__ssvfscanf_r+0x11f6>
   10f96:	0766      	lsls	r6, r4, #29
   10f98:	f140 82b4 	bpl.w	11504 <__ssvfscanf_r+0x13f0>
   10f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10f9e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10fa0:	f853 2b04 	ldr.w	r2, [r3], #4
   10fa4:	633b      	str	r3, [r7, #48]	; 0x30
   10fa6:	f8a2 a000 	strh.w	sl, [r2]
   10faa:	f7ff b8da 	b.w	10162 <__ssvfscanf_r+0x4e>
   10fae:	0723      	lsls	r3, r4, #28
   10fb0:	f47f a9a5 	bne.w	102fe <__ssvfscanf_r+0x1ea>
   10fb4:	7842      	ldrb	r2, [r0, #1]
   10fb6:	2a68      	cmp	r2, #104	; 0x68
   10fb8:	f000 8186 	beq.w	112c8 <__ssvfscanf_r+0x11b4>
   10fbc:	f044 0404 	orr.w	r4, r4, #4
   10fc0:	4608      	mov	r0, r1
   10fc2:	f7ff b92f 	b.w	10224 <__ssvfscanf_r+0x110>
   10fc6:	4b8e      	ldr	r3, [pc, #568]	; (11200 <__ssvfscanf_r+0x10ec>)
   10fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   10fca:	230a      	movs	r3, #10
   10fcc:	64f9      	str	r1, [r7, #76]	; 0x4c
   10fce:	63bb      	str	r3, [r7, #56]	; 0x38
   10fd0:	2503      	movs	r5, #3
   10fd2:	f7ff b9bb 	b.w	1034c <__ssvfscanf_r+0x238>
   10fd6:	4b8c      	ldr	r3, [pc, #560]	; (11208 <__ssvfscanf_r+0x10f4>)
   10fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   10fda:	2300      	movs	r3, #0
   10fdc:	64f9      	str	r1, [r7, #76]	; 0x4c
   10fde:	63bb      	str	r3, [r7, #56]	; 0x38
   10fe0:	2503      	movs	r5, #3
   10fe2:	f7ff b9b3 	b.w	1034c <__ssvfscanf_r+0x238>
   10fe6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   10fea:	e78f      	b.n	10f0c <__ssvfscanf_r+0xdf8>
   10fec:	f107 0070 	add.w	r0, r7, #112	; 0x70
   10ff0:	f000 fdde 	bl	11bb0 <__sccl>
   10ff4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10ff8:	64f8      	str	r0, [r7, #76]	; 0x4c
   10ffa:	2501      	movs	r5, #1
   10ffc:	f7ff b9a6 	b.w	1034c <__ssvfscanf_r+0x238>
   11000:	0722      	lsls	r2, r4, #28
   11002:	f47f a97c 	bne.w	102fe <__ssvfscanf_r+0x1ea>
   11006:	7842      	ldrb	r2, [r0, #1]
   11008:	2a6c      	cmp	r2, #108	; 0x6c
   1100a:	f000 8157 	beq.w	112bc <__ssvfscanf_r+0x11a8>
   1100e:	f044 0401 	orr.w	r4, r4, #1
   11012:	4608      	mov	r0, r1
   11014:	f7ff b906 	b.w	10224 <__ssvfscanf_r+0x110>
   11018:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1101c:	f47f a96f 	bne.w	102fe <__ssvfscanf_r+0x1ea>
   11020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11022:	2a00      	cmp	r2, #0
   11024:	f000 81e7 	beq.w	113f6 <__ssvfscanf_r+0x12e2>
   11028:	7842      	ldrb	r2, [r0, #1]
   1102a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1102e:	4608      	mov	r0, r1
   11030:	f7ff b8f8 	b.w	10224 <__ssvfscanf_r+0x110>
   11034:	ea58 0804 	orrs.w	r8, r8, r4
   11038:	f47f a961 	bne.w	102fe <__ssvfscanf_r+0x1ea>
   1103c:	7842      	ldrb	r2, [r0, #1]
   1103e:	2410      	movs	r4, #16
   11040:	4608      	mov	r0, r1
   11042:	f7ff b8ef 	b.w	10224 <__ssvfscanf_r+0x110>
   11046:	64f9      	str	r1, [r7, #76]	; 0x4c
   11048:	f7ff b8a7 	b.w	1019a <__ssvfscanf_r+0x86>
   1104c:	2300      	movs	r3, #0
   1104e:	623b      	str	r3, [r7, #32]
   11050:	62bb      	str	r3, [r7, #40]	; 0x28
   11052:	63fb      	str	r3, [r7, #60]	; 0x3c
   11054:	f107 0354 	add.w	r3, r7, #84	; 0x54
   11058:	64bb      	str	r3, [r7, #72]	; 0x48
   1105a:	f7ff bba9 	b.w	107b0 <__ssvfscanf_r+0x69c>
   1105e:	2300      	movs	r3, #0
   11060:	e9c7 3306 	strd	r3, r3, [r7, #24]
   11064:	623b      	str	r3, [r7, #32]
   11066:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1106a:	e429      	b.n	108c0 <__ssvfscanf_r+0x7ac>
   1106c:	f8db 3000 	ldr.w	r3, [fp]
   11070:	f107 0270 	add.w	r2, r7, #112	; 0x70
   11074:	4611      	mov	r1, r2
   11076:	781a      	ldrb	r2, [r3, #0]
   11078:	5c8a      	ldrb	r2, [r1, r2]
   1107a:	2a00      	cmp	r2, #0
   1107c:	f43f a93f 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   11080:	3301      	adds	r3, #1
   11082:	f8cb 3000 	str.w	r3, [fp]
   11086:	f8db 3004 	ldr.w	r3, [fp, #4]
   1108a:	f1b8 0f01 	cmp.w	r8, #1
   1108e:	f103 33ff 	add.w	r3, r3, #4294967295
   11092:	f8cb 3004 	str.w	r3, [fp, #4]
   11096:	bf18      	it	ne
   11098:	460c      	movne	r4, r1
   1109a:	d114      	bne.n	110c6 <__ssvfscanf_r+0xfb2>
   1109c:	f7ff bb53 	b.w	10746 <__ssvfscanf_r+0x632>
   110a0:	f8db 3000 	ldr.w	r3, [fp]
   110a4:	781a      	ldrb	r2, [r3, #0]
   110a6:	5ca2      	ldrb	r2, [r4, r2]
   110a8:	3301      	adds	r3, #1
   110aa:	2a00      	cmp	r2, #0
   110ac:	f43f ab4b 	beq.w	10746 <__ssvfscanf_r+0x632>
   110b0:	f8cb 3000 	str.w	r3, [fp]
   110b4:	f8db 3004 	ldr.w	r3, [fp, #4]
   110b8:	3501      	adds	r5, #1
   110ba:	3b01      	subs	r3, #1
   110bc:	4545      	cmp	r5, r8
   110be:	f8cb 3004 	str.w	r3, [fp, #4]
   110c2:	f43f ab40 	beq.w	10746 <__ssvfscanf_r+0x632>
   110c6:	2b00      	cmp	r3, #0
   110c8:	dcea      	bgt.n	110a0 <__ssvfscanf_r+0xf8c>
   110ca:	4659      	mov	r1, fp
   110cc:	4648      	mov	r0, r9
   110ce:	f002 f9cb 	bl	13468 <__ssrefill_r>
   110d2:	2800      	cmp	r0, #0
   110d4:	d0e4      	beq.n	110a0 <__ssvfscanf_r+0xf8c>
   110d6:	44aa      	add	sl, r5
   110d8:	f7ff b843 	b.w	10162 <__ssvfscanf_r+0x4e>
   110dc:	ee18 0a10 	vmov	r0, s16
   110e0:	4659      	mov	r1, fp
   110e2:	f002 f9c1 	bl	13468 <__ssrefill_r>
   110e6:	2800      	cmp	r0, #0
   110e8:	f43f ae8e 	beq.w	10e08 <__ssvfscanf_r+0xcf4>
   110ec:	42b5      	cmp	r5, r6
   110ee:	4654      	mov	r4, sl
   110f0:	ee18 9a10 	vmov	r9, s16
   110f4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   110f8:	f47f ae91 	bne.w	10e1e <__ssvfscanf_r+0xd0a>
   110fc:	f7ff b8f6 	b.w	102ec <__ssvfscanf_r+0x1d8>
   11100:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   11104:	e428      	b.n	10958 <__ssvfscanf_r+0x844>
   11106:	6823      	ldr	r3, [r4, #0]
   11108:	2b04      	cmp	r3, #4
   1110a:	f47f ac32 	bne.w	10972 <__ssvfscanf_r+0x85e>
   1110e:	e432      	b.n	10976 <__ssvfscanf_r+0x862>
   11110:	1c83      	adds	r3, r0, #2
   11112:	f040 8339 	bne.w	11788 <__ssvfscanf_r+0x1674>
   11116:	f8db 3004 	ldr.w	r3, [fp, #4]
   1111a:	2b00      	cmp	r3, #0
   1111c:	f340 81d7 	ble.w	114ce <__ssvfscanf_r+0x13ba>
   11120:	f8db 3000 	ldr.w	r3, [fp]
   11124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11126:	781b      	ldrb	r3, [r3, #0]
   11128:	5cd3      	ldrb	r3, [r2, r3]
   1112a:	0718      	lsls	r0, r3, #28
   1112c:	d403      	bmi.n	11136 <__ssvfscanf_r+0x1022>
   1112e:	f1b8 0f00 	cmp.w	r8, #0
   11132:	f47f ab49 	bne.w	107c8 <__ssvfscanf_r+0x6b4>
   11136:	627c      	str	r4, [r7, #36]	; 0x24
   11138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1113a:	2b00      	cmp	r3, #0
   1113c:	f47f a811 	bne.w	10162 <__ssvfscanf_r+0x4e>
   11140:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11142:	6013      	str	r3, [r2, #0]
   11144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11146:	2b00      	cmp	r3, #0
   11148:	f43f adfc 	beq.w	10d44 <__ssvfscanf_r+0xc30>
   1114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1114e:	1ad1      	subs	r1, r2, r3
   11150:	108b      	asrs	r3, r1, #2
   11152:	6a3a      	ldr	r2, [r7, #32]
   11154:	3301      	adds	r3, #1
   11156:	429a      	cmp	r2, r3
   11158:	f67f adf4 	bls.w	10d44 <__ssvfscanf_r+0xc30>
   1115c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1115e:	3104      	adds	r1, #4
   11160:	6820      	ldr	r0, [r4, #0]
   11162:	f7f9 ff03 	bl	af6c <realloc>
   11166:	2800      	cmp	r0, #0
   11168:	f47f ac3a 	bne.w	109e0 <__ssvfscanf_r+0x8cc>
   1116c:	e5ea      	b.n	10d44 <__ssvfscanf_r+0xc30>
   1116e:	f853 2b04 	ldr.w	r2, [r3], #4
   11172:	ed82 0b00 	vstr	d0, [r2]
   11176:	633b      	str	r3, [r7, #48]	; 0x30
   11178:	e5e4      	b.n	10d44 <__ssvfscanf_r+0xc30>
   1117a:	68fd      	ldr	r5, [r7, #12]
   1117c:	6a39      	ldr	r1, [r7, #32]
   1117e:	687e      	ldr	r6, [r7, #4]
   11180:	4628      	mov	r0, r5
   11182:	4642      	mov	r2, r8
   11184:	46a3      	mov	fp, r4
   11186:	68bc      	ldr	r4, [r7, #8]
   11188:	f000 fd56 	bl	11c38 <stpncpy>
   1118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1118e:	61fb      	str	r3, [r7, #28]
   11190:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   11194:	3e01      	subs	r6, #1
   11196:	4605      	mov	r5, r0
   11198:	f7ff b9c8 	b.w	1052c <__ssvfscanf_r+0x418>
   1119c:	69f8      	ldr	r0, [r7, #28]
   1119e:	00d9      	lsls	r1, r3, #3
   111a0:	461d      	mov	r5, r3
   111a2:	f7f9 fee3 	bl	af6c <realloc>
   111a6:	61f8      	str	r0, [r7, #28]
   111a8:	2800      	cmp	r0, #0
   111aa:	f000 8264 	beq.w	11676 <__ssvfscanf_r+0x1562>
   111ae:	6a3a      	ldr	r2, [r7, #32]
   111b0:	006b      	lsls	r3, r5, #1
   111b2:	eb00 0804 	add.w	r8, r0, r4
   111b6:	6010      	str	r0, [r2, #0]
   111b8:	61bb      	str	r3, [r7, #24]
   111ba:	f7ff bbea 	b.w	10992 <__ssvfscanf_r+0x87e>
   111be:	2e02      	cmp	r6, #2
   111c0:	f240 82c4 	bls.w	1174c <__ssvfscanf_r+0x1638>
   111c4:	2e03      	cmp	r6, #3
   111c6:	f43f a9d3 	beq.w	10570 <__ssvfscanf_r+0x45c>
   111ca:	3e04      	subs	r6, #4
   111cc:	fa5f f886 	uxtb.w	r8, r6
   111d0:	ea6f 0308 	mvn.w	r3, r8
   111d4:	18ee      	adds	r6, r5, r3
   111d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   111da:	465a      	mov	r2, fp
   111dc:	4648      	mov	r0, r9
   111de:	f002 f903 	bl	133e8 <_sungetc_r>
   111e2:	42ae      	cmp	r6, r5
   111e4:	d1f7      	bne.n	111d6 <__ssvfscanf_r+0x10c2>
   111e6:	f10a 3aff 	add.w	sl, sl, #4294967295
   111ea:	ebaa 0a08 	sub.w	sl, sl, r8
   111ee:	f7ff b9bf 	b.w	10570 <__ssvfscanf_r+0x45c>
   111f2:	64f9      	str	r1, [r7, #76]	; 0x4c
   111f4:	f7fe bfb5 	b.w	10162 <__ssvfscanf_r+0x4e>
   111f8:	2303      	movs	r3, #3
   111fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   111fc:	f7ff b993 	b.w	10526 <__ssvfscanf_r+0x412>
   11200:	00012d2d 	.word	0x00012d2d
   11204:	20000d50 	.word	0x20000d50
   11208:	0000c321 	.word	0x0000c321
   1120c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11210:	4293      	cmp	r3, r2
   11212:	f200 8297 	bhi.w	11744 <__ssvfscanf_r+0x1630>
   11216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11218:	3308      	adds	r3, #8
   1121a:	b29b      	uxth	r3, r3
   1121c:	6810      	ldr	r0, [r2, #0]
   1121e:	63f8      	str	r0, [r7, #60]	; 0x3c
   11220:	0099      	lsls	r1, r3, #2
   11222:	637b      	str	r3, [r7, #52]	; 0x34
   11224:	f7f9 fea2 	bl	af6c <realloc>
   11228:	2800      	cmp	r0, #0
   1122a:	f000 827b 	beq.w	11724 <__ssvfscanf_r+0x1610>
   1122e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11232:	8093      	strh	r3, [r2, #4]
   11234:	6010      	str	r0, [r2, #0]
   11236:	e542      	b.n	10cbe <__ssvfscanf_r+0xbaa>
   11238:	2101      	movs	r1, #1
   1123a:	e57a      	b.n	10d32 <__ssvfscanf_r+0xc1e>
   1123c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11240:	4293      	cmp	r3, r2
   11242:	f200 8293 	bhi.w	1176c <__ssvfscanf_r+0x1658>
   11246:	3308      	adds	r3, #8
   11248:	b29e      	uxth	r6, r3
   1124a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1124c:	00b1      	lsls	r1, r6, #2
   1124e:	6818      	ldr	r0, [r3, #0]
   11250:	f7f9 fe8c 	bl	af6c <realloc>
   11254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11256:	2800      	cmp	r0, #0
   11258:	f000 823e 	beq.w	116d8 <__ssvfscanf_r+0x15c4>
   1125c:	809e      	strh	r6, [r3, #4]
   1125e:	6018      	str	r0, [r3, #0]
   11260:	f7ff ba9b 	b.w	1079a <__ssvfscanf_r+0x686>
   11264:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11268:	4293      	cmp	r3, r2
   1126a:	f200 827f 	bhi.w	1176c <__ssvfscanf_r+0x1658>
   1126e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11270:	3308      	adds	r3, #8
   11272:	b29b      	uxth	r3, r3
   11274:	0099      	lsls	r1, r3, #2
   11276:	6810      	ldr	r0, [r2, #0]
   11278:	64bb      	str	r3, [r7, #72]	; 0x48
   1127a:	f7f9 fe77 	bl	af6c <realloc>
   1127e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11280:	2800      	cmp	r0, #0
   11282:	f000 8228 	beq.w	116d6 <__ssvfscanf_r+0x15c2>
   11286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11288:	8093      	strh	r3, [r2, #4]
   1128a:	6010      	str	r0, [r2, #0]
   1128c:	f7ff bb0e 	b.w	108ac <__ssvfscanf_r+0x798>
   11290:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11294:	4293      	cmp	r3, r2
   11296:	f200 8255 	bhi.w	11744 <__ssvfscanf_r+0x1630>
   1129a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1129c:	3308      	adds	r3, #8
   1129e:	b29b      	uxth	r3, r3
   112a0:	6810      	ldr	r0, [r2, #0]
   112a2:	63f8      	str	r0, [r7, #60]	; 0x3c
   112a4:	0099      	lsls	r1, r3, #2
   112a6:	637b      	str	r3, [r7, #52]	; 0x34
   112a8:	f7f9 fe60 	bl	af6c <realloc>
   112ac:	2800      	cmp	r0, #0
   112ae:	f000 8239 	beq.w	11724 <__ssvfscanf_r+0x1610>
   112b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   112b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   112b6:	8093      	strh	r3, [r2, #4]
   112b8:	6010      	str	r0, [r2, #0]
   112ba:	e570      	b.n	10d9e <__ssvfscanf_r+0xc8a>
   112bc:	7882      	ldrb	r2, [r0, #2]
   112be:	f044 0402 	orr.w	r4, r4, #2
   112c2:	3002      	adds	r0, #2
   112c4:	f7fe bfae 	b.w	10224 <__ssvfscanf_r+0x110>
   112c8:	7882      	ldrb	r2, [r0, #2]
   112ca:	f044 0408 	orr.w	r4, r4, #8
   112ce:	3002      	adds	r0, #2
   112d0:	f7fe bfa8 	b.w	10224 <__ssvfscanf_r+0x110>
   112d4:	0763      	lsls	r3, r4, #29
   112d6:	d458      	bmi.n	1138a <__ssvfscanf_r+0x1276>
   112d8:	f014 0201 	ands.w	r2, r4, #1
   112dc:	f47f aa28 	bne.w	10730 <__ssvfscanf_r+0x61c>
   112e0:	07a6      	lsls	r6, r4, #30
   112e2:	f57f aa25 	bpl.w	10730 <__ssvfscanf_r+0x61c>
   112e6:	4bb3      	ldr	r3, [pc, #716]	; (115b4 <__ssvfscanf_r+0x14a0>)
   112e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   112ea:	4299      	cmp	r1, r3
   112ec:	4648      	mov	r0, r9
   112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   112f2:	f000 823d 	beq.w	11770 <__ssvfscanf_r+0x165c>
   112f6:	f001 fdd1 	bl	12e9c <_strtoll_r>
   112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112fc:	f853 2b04 	ldr.w	r2, [r3], #4
   11300:	633b      	str	r3, [r7, #48]	; 0x30
   11302:	e9c2 0100 	strd	r0, r1, [r2]
   11306:	f7ff ba18 	b.w	1073a <__ssvfscanf_r+0x626>
   1130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1130c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1130e:	f853 2b04 	ldr.w	r2, [r3], #4
   11312:	633b      	str	r3, [r7, #48]	; 0x30
   11314:	f882 a000 	strb.w	sl, [r2]
   11318:	f7fe bf23 	b.w	10162 <__ssvfscanf_r+0x4e>
   1131c:	f8db 3000 	ldr.w	r3, [fp]
   11320:	4ea5      	ldr	r6, [pc, #660]	; (115b8 <__ssvfscanf_r+0x14a4>)
   11322:	781a      	ldrb	r2, [r3, #0]
   11324:	5cb2      	ldrb	r2, [r6, r2]
   11326:	0712      	lsls	r2, r2, #28
   11328:	f53e af1b 	bmi.w	10162 <__ssvfscanf_r+0x4e>
   1132c:	3301      	adds	r3, #1
   1132e:	f8cb 3000 	str.w	r3, [fp]
   11332:	f8db 3004 	ldr.w	r3, [fp, #4]
   11336:	f1b8 0f01 	cmp.w	r8, #1
   1133a:	f103 33ff 	add.w	r3, r3, #4294967295
   1133e:	f8cb 3004 	str.w	r3, [fp, #4]
   11342:	bf08      	it	eq
   11344:	f10a 0a01 	addeq.w	sl, sl, #1
   11348:	f43e af0b 	beq.w	10162 <__ssvfscanf_r+0x4e>
   1134c:	2401      	movs	r4, #1
   1134e:	e011      	b.n	11374 <__ssvfscanf_r+0x1260>
   11350:	f8db 3000 	ldr.w	r3, [fp]
   11354:	781a      	ldrb	r2, [r3, #0]
   11356:	5cb2      	ldrb	r2, [r6, r2]
   11358:	0715      	lsls	r5, r2, #28
   1135a:	f103 0301 	add.w	r3, r3, #1
   1135e:	d411      	bmi.n	11384 <__ssvfscanf_r+0x1270>
   11360:	f8cb 3000 	str.w	r3, [fp]
   11364:	f8db 3004 	ldr.w	r3, [fp, #4]
   11368:	3401      	adds	r4, #1
   1136a:	3b01      	subs	r3, #1
   1136c:	4544      	cmp	r4, r8
   1136e:	f8cb 3004 	str.w	r3, [fp, #4]
   11372:	d007      	beq.n	11384 <__ssvfscanf_r+0x1270>
   11374:	2b00      	cmp	r3, #0
   11376:	dceb      	bgt.n	11350 <__ssvfscanf_r+0x123c>
   11378:	4659      	mov	r1, fp
   1137a:	4648      	mov	r0, r9
   1137c:	f002 f874 	bl	13468 <__ssrefill_r>
   11380:	2800      	cmp	r0, #0
   11382:	d0e5      	beq.n	11350 <__ssvfscanf_r+0x123c>
   11384:	44a2      	add	sl, r4
   11386:	f7fe beec 	b.w	10162 <__ssvfscanf_r+0x4e>
   1138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1138c:	f853 2b04 	ldr.w	r2, [r3], #4
   11390:	633b      	str	r3, [r7, #48]	; 0x30
   11392:	8010      	strh	r0, [r2, #0]
   11394:	f7ff b9d1 	b.w	1073a <__ssvfscanf_r+0x626>
   11398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1139a:	2b00      	cmp	r3, #0
   1139c:	f000 816e 	beq.w	1167c <__ssvfscanf_r+0x1568>
   113a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   113a2:	f8d3 8000 	ldr.w	r8, [r3]
   113a6:	88de      	ldrh	r6, [r3, #6]
   113a8:	b176      	cbz	r6, 113c8 <__ssvfscanf_r+0x12b4>
   113aa:	2400      	movs	r4, #0
   113ac:	f1a8 0504 	sub.w	r5, r8, #4
   113b0:	46a1      	mov	r9, r4
   113b2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   113b6:	6818      	ldr	r0, [r3, #0]
   113b8:	f7f9 fb14 	bl	a9e4 <free>
   113bc:	3401      	adds	r4, #1
   113be:	682b      	ldr	r3, [r5, #0]
   113c0:	42a6      	cmp	r6, r4
   113c2:	f8c3 9000 	str.w	r9, [r3]
   113c6:	d1f4      	bne.n	113b2 <__ssvfscanf_r+0x129e>
   113c8:	f04f 33ff 	mov.w	r3, #4294967295
   113cc:	647b      	str	r3, [r7, #68]	; 0x44
   113ce:	f1b8 0f00 	cmp.w	r8, #0
   113d2:	f47e af9c 	bne.w	1030e <__ssvfscanf_r+0x1fa>
   113d6:	f7fe bf9d 	b.w	10314 <__ssvfscanf_r+0x200>
   113da:	4878      	ldr	r0, [pc, #480]	; (115bc <__ssvfscanf_r+0x14a8>)
   113dc:	633b      	str	r3, [r7, #48]	; 0x30
   113de:	f7fb fde7 	bl	cfb0 <nanf>
   113e2:	ed84 0a00 	vstr	s0, [r4]
   113e6:	e4ad      	b.n	10d44 <__ssvfscanf_r+0xc30>
   113e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   113ea:	63fc      	str	r4, [r7, #60]	; 0x3c
   113ec:	f852 5b04 	ldr.w	r5, [r2], #4
   113f0:	633a      	str	r2, [r7, #48]	; 0x30
   113f2:	64bc      	str	r4, [r7, #72]	; 0x48
   113f4:	e46c      	b.n	10cd0 <__ssvfscanf_r+0xbbc>
   113f6:	b082      	sub	sp, #8
   113f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   113fc:	ab02      	add	r3, sp, #8
   113fe:	643b      	str	r3, [r7, #64]	; 0x40
   11400:	e612      	b.n	11028 <__ssvfscanf_r+0xf14>
   11402:	637b      	str	r3, [r7, #52]	; 0x34
   11404:	0053      	lsls	r3, r2, #1
   11406:	4620      	mov	r0, r4
   11408:	4619      	mov	r1, r3
   1140a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1140c:	f7f9 fdae 	bl	af6c <realloc>
   11410:	4604      	mov	r4, r0
   11412:	2800      	cmp	r0, #0
   11414:	f000 80ad 	beq.w	11572 <__ssvfscanf_r+0x145e>
   11418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1141a:	1985      	adds	r5, r0, r6
   1141c:	6018      	str	r0, [r3, #0]
   1141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11420:	e475      	b.n	10d0e <__ssvfscanf_r+0xbfa>
   11422:	697d      	ldr	r5, [r7, #20]
   11424:	4629      	mov	r1, r5
   11426:	230a      	movs	r3, #10
   11428:	3101      	adds	r1, #1
   1142a:	4648      	mov	r0, r9
   1142c:	f7fa ff78 	bl	c320 <_strtol_r>
   11430:	69bb      	ldr	r3, [r7, #24]
   11432:	1ac2      	subs	r2, r0, r3
   11434:	e59d      	b.n	10f72 <__ssvfscanf_r+0xe5e>
   11436:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1143a:	f853 1b04 	ldr.w	r1, [r3], #4
   1143e:	623a      	str	r2, [r7, #32]
   11440:	64b9      	str	r1, [r7, #72]	; 0x48
   11442:	633b      	str	r3, [r7, #48]	; 0x30
   11444:	62ba      	str	r2, [r7, #40]	; 0x28
   11446:	63fa      	str	r2, [r7, #60]	; 0x3c
   11448:	f7ff b9b2 	b.w	107b0 <__ssvfscanf_r+0x69c>
   1144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1144e:	64bc      	str	r4, [r7, #72]	; 0x48
   11450:	f853 5b04 	ldr.w	r5, [r3], #4
   11454:	633b      	str	r3, [r7, #48]	; 0x30
   11456:	e4aa      	b.n	10dae <__ssvfscanf_r+0xc9a>
   11458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1145a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1145c:	f853 4b04 	ldr.w	r4, [r3], #4
   11460:	61ba      	str	r2, [r7, #24]
   11462:	e9c7 2207 	strd	r2, r2, [r7, #28]
   11466:	633b      	str	r3, [r7, #48]	; 0x30
   11468:	f7ff ba2a 	b.w	108c0 <__ssvfscanf_r+0x7ac>
   1146c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1146e:	6820      	ldr	r0, [r4, #0]
   11470:	f7f9 fd7c 	bl	af6c <realloc>
   11474:	2800      	cmp	r0, #0
   11476:	f47f aab3 	bne.w	109e0 <__ssvfscanf_r+0x8cc>
   1147a:	e463      	b.n	10d44 <__ssvfscanf_r+0xc30>
   1147c:	4659      	mov	r1, fp
   1147e:	4648      	mov	r0, r9
   11480:	637b      	str	r3, [r7, #52]	; 0x34
   11482:	f001 fff1 	bl	13468 <__ssrefill_r>
   11486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11488:	2800      	cmp	r0, #0
   1148a:	f43f ac49 	beq.w	10d20 <__ssvfscanf_r+0xc0c>
   1148e:	e44d      	b.n	10d2c <__ssvfscanf_r+0xc18>
   11490:	6818      	ldr	r0, [r3, #0]
   11492:	461c      	mov	r4, r3
   11494:	f7f9 fd6a 	bl	af6c <realloc>
   11498:	2800      	cmp	r0, #0
   1149a:	f43f accc 	beq.w	10e36 <__ssvfscanf_r+0xd22>
   1149e:	6020      	str	r0, [r4, #0]
   114a0:	e4c9      	b.n	10e36 <__ssvfscanf_r+0xd22>
   114a2:	2500      	movs	r5, #0
   114a4:	e637      	b.n	11116 <__ssvfscanf_r+0x1002>
   114a6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   114a8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   114ac:	627e      	str	r6, [r7, #36]	; 0x24
   114ae:	4644      	mov	r4, r8
   114b0:	2d00      	cmp	r5, #0
   114b2:	f43f aa7c 	beq.w	109ae <__ssvfscanf_r+0x89a>
   114b6:	3d01      	subs	r5, #1
   114b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   114bc:	465a      	mov	r2, fp
   114be:	5d59      	ldrb	r1, [r3, r5]
   114c0:	4648      	mov	r0, r9
   114c2:	f001 ff91 	bl	133e8 <_sungetc_r>
   114c6:	2d00      	cmp	r5, #0
   114c8:	d1f5      	bne.n	114b6 <__ssvfscanf_r+0x13a2>
   114ca:	f7ff ba70 	b.w	109ae <__ssvfscanf_r+0x89a>
   114ce:	4659      	mov	r1, fp
   114d0:	4648      	mov	r0, r9
   114d2:	f001 ffc9 	bl	13468 <__ssrefill_r>
   114d6:	2800      	cmp	r0, #0
   114d8:	f43f ae22 	beq.w	11120 <__ssvfscanf_r+0x100c>
   114dc:	627c      	str	r4, [r7, #36]	; 0x24
   114de:	2d00      	cmp	r5, #0
   114e0:	f47e af04 	bne.w	102ec <__ssvfscanf_r+0x1d8>
   114e4:	e628      	b.n	11138 <__ssvfscanf_r+0x1024>
   114e6:	627c      	str	r4, [r7, #36]	; 0x24
   114e8:	2d00      	cmp	r5, #0
   114ea:	f43f ae25 	beq.w	11138 <__ssvfscanf_r+0x1024>
   114ee:	3d01      	subs	r5, #1
   114f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   114f4:	465a      	mov	r2, fp
   114f6:	5d59      	ldrb	r1, [r3, r5]
   114f8:	4648      	mov	r0, r9
   114fa:	f001 ff75 	bl	133e8 <_sungetc_r>
   114fe:	2d00      	cmp	r5, #0
   11500:	d1f5      	bne.n	114ee <__ssvfscanf_r+0x13da>
   11502:	e619      	b.n	11138 <__ssvfscanf_r+0x1024>
   11504:	07e5      	lsls	r5, r4, #31
   11506:	d43c      	bmi.n	11582 <__ssvfscanf_r+0x146e>
   11508:	07a4      	lsls	r4, r4, #30
   1150a:	d53a      	bpl.n	11582 <__ssvfscanf_r+0x146e>
   1150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1150e:	64f9      	str	r1, [r7, #76]	; 0x4c
   11510:	f853 2b04 	ldr.w	r2, [r3], #4
   11514:	633b      	str	r3, [r7, #48]	; 0x30
   11516:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1151a:	f8c2 a000 	str.w	sl, [r2]
   1151e:	6053      	str	r3, [r2, #4]
   11520:	f7fe be1f 	b.w	10162 <__ssvfscanf_r+0x4e>
   11524:	ee18 9a10 	vmov	r9, s16
   11528:	461e      	mov	r6, r3
   1152a:	f7ff b814 	b.w	10556 <__ssvfscanf_r+0x442>
   1152e:	2301      	movs	r3, #1
   11530:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   11534:	64bb      	str	r3, [r7, #72]	; 0x48
   11536:	f7fe bff6 	b.w	10526 <__ssvfscanf_r+0x412>
   1153a:	f1b8 0f01 	cmp.w	r8, #1
   1153e:	bf38      	it	cc
   11540:	f04f 0801 	movcc.w	r8, #1
   11544:	f014 0301 	ands.w	r3, r4, #1
   11548:	d13a      	bne.n	115c0 <__ssvfscanf_r+0x14ac>
   1154a:	06e5      	lsls	r5, r4, #27
   1154c:	f100 8136 	bmi.w	117bc <__ssvfscanf_r+0x16a8>
   11550:	0624      	lsls	r4, r4, #24
   11552:	f140 814c 	bpl.w	117ee <__ssvfscanf_r+0x16da>
   11556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11558:	f853 5b04 	ldr.w	r5, [r3], #4
   1155c:	64bb      	str	r3, [r7, #72]	; 0x48
   1155e:	2d00      	cmp	r5, #0
   11560:	f43e aecd 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   11564:	4640      	mov	r0, r8
   11566:	f7f9 fa35 	bl	a9d4 <malloc>
   1156a:	4603      	mov	r3, r0
   1156c:	2800      	cmp	r0, #0
   1156e:	f040 80dc 	bne.w	1172a <__ssvfscanf_r+0x1616>
   11572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11574:	2b00      	cmp	r3, #0
   11576:	f000 8081 	beq.w	1167c <__ssvfscanf_r+0x1568>
   1157a:	f8d3 8000 	ldr.w	r8, [r3]
   1157e:	88de      	ldrh	r6, [r3, #6]
   11580:	e712      	b.n	113a8 <__ssvfscanf_r+0x1294>
   11582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11584:	64f9      	str	r1, [r7, #76]	; 0x4c
   11586:	f853 2b04 	ldr.w	r2, [r3], #4
   1158a:	f8c2 a000 	str.w	sl, [r2]
   1158e:	633b      	str	r3, [r7, #48]	; 0x30
   11590:	f7fe bde7 	b.w	10162 <__ssvfscanf_r+0x4e>
   11594:	462b      	mov	r3, r5
   11596:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11598:	42ab      	cmp	r3, r5
   1159a:	f67e aeb0 	bls.w	102fe <__ssvfscanf_r+0x1ea>
   1159e:	461c      	mov	r4, r3
   115a0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   115a4:	465a      	mov	r2, fp
   115a6:	4648      	mov	r0, r9
   115a8:	f001 ff1e 	bl	133e8 <_sungetc_r>
   115ac:	42ac      	cmp	r4, r5
   115ae:	d1f7      	bne.n	115a0 <__ssvfscanf_r+0x148c>
   115b0:	f7fe bea5 	b.w	102fe <__ssvfscanf_r+0x1ea>
   115b4:	00012d2d 	.word	0x00012d2d
   115b8:	20000d59 	.word	0x20000d59
   115bc:	2000832c 	.word	0x2000832c
   115c0:	f014 0310 	ands.w	r3, r4, #16
   115c4:	637b      	str	r3, [r7, #52]	; 0x34
   115c6:	d05e      	beq.n	11686 <__ssvfscanf_r+0x1572>
   115c8:	2500      	movs	r5, #0
   115ca:	63fd      	str	r5, [r7, #60]	; 0x3c
   115cc:	64bd      	str	r5, [r7, #72]	; 0x48
   115ce:	462e      	mov	r6, r5
   115d0:	2400      	movs	r4, #0
   115d2:	464b      	mov	r3, r9
   115d4:	46c1      	mov	r9, r8
   115d6:	46a8      	mov	r8, r5
   115d8:	4625      	mov	r5, r4
   115da:	461c      	mov	r4, r3
   115dc:	f7fb f9fc 	bl	c9d8 <__locale_mb_cur_max>
   115e0:	42a8      	cmp	r0, r5
   115e2:	f43e ae83 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   115e6:	e9db 3200 	ldrd	r3, r2, [fp]
   115ea:	f813 1b01 	ldrb.w	r1, [r3], #1
   115ee:	3a01      	subs	r2, #1
   115f0:	e9cb 3200 	strd	r3, r2, [fp]
   115f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   115f6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   115fa:	2a03      	cmp	r2, #3
   115fc:	5541      	strb	r1, [r0, r5]
   115fe:	f105 0301 	add.w	r3, r5, #1
   11602:	f107 0568 	add.w	r5, r7, #104	; 0x68
   11606:	d102      	bne.n	1160e <__ssvfscanf_r+0x14fa>
   11608:	682a      	ldr	r2, [r5, #0]
   1160a:	2a04      	cmp	r2, #4
   1160c:	d006      	beq.n	1161c <__ssvfscanf_r+0x1508>
   1160e:	2208      	movs	r2, #8
   11610:	2100      	movs	r1, #0
   11612:	4628      	mov	r0, r5
   11614:	62bb      	str	r3, [r7, #40]	; 0x28
   11616:	f7fb f915 	bl	c844 <memset>
   1161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1161c:	9500      	str	r5, [sp, #0]
   1161e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   11622:	4631      	mov	r1, r6
   11624:	4620      	mov	r0, r4
   11626:	62bb      	str	r3, [r7, #40]	; 0x28
   11628:	f001 fd0a 	bl	13040 <_mbrtowc_r>
   1162c:	1c43      	adds	r3, r0, #1
   1162e:	6278      	str	r0, [r7, #36]	; 0x24
   11630:	f43e ae5c 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   11634:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11636:	2800      	cmp	r0, #0
   11638:	f040 8147 	bne.w	118ca <__ssvfscanf_r+0x17b6>
   1163c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1163e:	b902      	cbnz	r2, 11642 <__ssvfscanf_r+0x152e>
   11640:	6032      	str	r2, [r6, #0]
   11642:	449a      	add	sl, r3
   11644:	f109 39ff 	add.w	r9, r9, #4294967295
   11648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1164a:	2b00      	cmp	r3, #0
   1164c:	f040 8175 	bne.w	1193a <__ssvfscanf_r+0x1826>
   11650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11652:	2b00      	cmp	r3, #0
   11654:	f000 8170 	beq.w	11938 <__ssvfscanf_r+0x1824>
   11658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1165a:	1af5      	subs	r5, r6, r3
   1165c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   11660:	f200 816a 	bhi.w	11938 <__ssvfscanf_r+0x1824>
   11664:	4618      	mov	r0, r3
   11666:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1166a:	f7f9 fc7f 	bl	af6c <realloc>
   1166e:	63f8      	str	r0, [r7, #60]	; 0x3c
   11670:	2800      	cmp	r0, #0
   11672:	f040 815c 	bne.w	1192e <__ssvfscanf_r+0x181a>
   11676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11678:	2b00      	cmp	r3, #0
   1167a:	d12d      	bne.n	116d8 <__ssvfscanf_r+0x15c4>
   1167c:	f04f 33ff 	mov.w	r3, #4294967295
   11680:	647b      	str	r3, [r7, #68]	; 0x44
   11682:	f7fe be47 	b.w	10314 <__ssvfscanf_r+0x200>
   11686:	0622      	lsls	r2, r4, #24
   11688:	f140 808f 	bpl.w	117aa <__ssvfscanf_r+0x1696>
   1168c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1168e:	f854 3b04 	ldr.w	r3, [r4], #4
   11692:	64bb      	str	r3, [r7, #72]	; 0x48
   11694:	2b00      	cmp	r3, #0
   11696:	f43e ae32 	beq.w	102fe <__ssvfscanf_r+0x1ea>
   1169a:	2080      	movs	r0, #128	; 0x80
   1169c:	f7f9 f99a 	bl	a9d4 <malloc>
   116a0:	4606      	mov	r6, r0
   116a2:	2800      	cmp	r0, #0
   116a4:	d0e7      	beq.n	11676 <__ssvfscanf_r+0x1562>
   116a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   116a8:	6018      	str	r0, [r3, #0]
   116aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   116ac:	88dd      	ldrh	r5, [r3, #6]
   116ae:	889a      	ldrh	r2, [r3, #4]
   116b0:	4295      	cmp	r5, r2
   116b2:	f0c0 80b3 	bcc.w	1181c <__ssvfscanf_r+0x1708>
   116b6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   116ba:	428a      	cmp	r2, r1
   116bc:	d856      	bhi.n	1176c <__ssvfscanf_r+0x1658>
   116be:	3208      	adds	r2, #8
   116c0:	b293      	uxth	r3, r2
   116c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   116c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   116c6:	0099      	lsls	r1, r3, #2
   116c8:	6810      	ldr	r0, [r2, #0]
   116ca:	f7f9 fc4f 	bl	af6c <realloc>
   116ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   116d0:	2800      	cmp	r0, #0
   116d2:	f040 80ae 	bne.w	11832 <__ssvfscanf_r+0x171e>
   116d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   116d8:	88db      	ldrh	r3, [r3, #6]
   116da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   116dc:	461e      	mov	r6, r3
   116de:	f8d2 8000 	ldr.w	r8, [r2]
   116e2:	e661      	b.n	113a8 <__ssvfscanf_r+0x1294>
   116e4:	462b      	mov	r3, r5
   116e6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   116e8:	42ab      	cmp	r3, r5
   116ea:	f67e ae08 	bls.w	102fe <__ssvfscanf_r+0x1ea>
   116ee:	461c      	mov	r4, r3
   116f0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   116f4:	465a      	mov	r2, fp
   116f6:	4648      	mov	r0, r9
   116f8:	f001 fe76 	bl	133e8 <_sungetc_r>
   116fc:	42ac      	cmp	r4, r5
   116fe:	d1f7      	bne.n	116f0 <__ssvfscanf_r+0x15dc>
   11700:	f7fe bdfd 	b.w	102fe <__ssvfscanf_r+0x1ea>
   11704:	4610      	mov	r0, r2
   11706:	00d9      	lsls	r1, r3, #3
   11708:	461e      	mov	r6, r3
   1170a:	f7f9 fc2f 	bl	af6c <realloc>
   1170e:	62b8      	str	r0, [r7, #40]	; 0x28
   11710:	2800      	cmp	r0, #0
   11712:	d0b0      	beq.n	11676 <__ssvfscanf_r+0x1562>
   11714:	1942      	adds	r2, r0, r5
   11716:	64ba      	str	r2, [r7, #72]	; 0x48
   11718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1171a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1171c:	6010      	str	r0, [r2, #0]
   1171e:	0073      	lsls	r3, r6, #1
   11720:	623b      	str	r3, [r7, #32]
   11722:	e4f8      	b.n	11116 <__ssvfscanf_r+0x1002>
   11724:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   11728:	e63e      	b.n	113a8 <__ssvfscanf_r+0x1294>
   1172a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1172c:	6028      	str	r0, [r5, #0]
   1172e:	88ce      	ldrh	r6, [r1, #6]
   11730:	888a      	ldrh	r2, [r1, #4]
   11732:	4296      	cmp	r6, r2
   11734:	f0c0 808e 	bcc.w	11854 <__ssvfscanf_r+0x1740>
   11738:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1173c:	428a      	cmp	r2, r1
   1173e:	6338      	str	r0, [r7, #48]	; 0x30
   11740:	f240 80a5 	bls.w	1188e <__ssvfscanf_r+0x177a>
   11744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11746:	f8d3 8000 	ldr.w	r8, [r3]
   1174a:	e62d      	b.n	113a8 <__ssvfscanf_r+0x1294>
   1174c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1174e:	4295      	cmp	r5, r2
   11750:	f67e add5 	bls.w	102fe <__ssvfscanf_r+0x1ea>
   11754:	462c      	mov	r4, r5
   11756:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11758:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1175c:	465a      	mov	r2, fp
   1175e:	4648      	mov	r0, r9
   11760:	f001 fe42 	bl	133e8 <_sungetc_r>
   11764:	42ac      	cmp	r4, r5
   11766:	d1f7      	bne.n	11758 <__ssvfscanf_r+0x1644>
   11768:	f7fe bdc9 	b.w	102fe <__ssvfscanf_r+0x1ea>
   1176c:	462b      	mov	r3, r5
   1176e:	e7b4      	b.n	116da <__ssvfscanf_r+0x15c6>
   11770:	f001 fc64 	bl	1303c <_strtoull_r>
   11774:	e5c1      	b.n	112fa <__ssvfscanf_r+0x11e6>
   11776:	f8d8 3000 	ldr.w	r3, [r8]
   1177a:	461d      	mov	r5, r3
   1177c:	3301      	adds	r3, #1
   1177e:	f47f a8d5 	bne.w	1092c <__ssvfscanf_r+0x818>
   11782:	462a      	mov	r2, r5
   11784:	f7ff b8e8 	b.w	10958 <__ssvfscanf_r+0x844>
   11788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1178a:	6818      	ldr	r0, [r3, #0]
   1178c:	f001 fcb4 	bl	130f8 <iswspace>
   11790:	2800      	cmp	r0, #0
   11792:	f47f aea8 	bne.w	114e6 <__ssvfscanf_r+0x13d2>
   11796:	2c03      	cmp	r4, #3
   11798:	44aa      	add	sl, r5
   1179a:	f47f a849 	bne.w	10830 <__ssvfscanf_r+0x71c>
   1179e:	6833      	ldr	r3, [r6, #0]
   117a0:	2b04      	cmp	r3, #4
   117a2:	f47f a845 	bne.w	10830 <__ssvfscanf_r+0x71c>
   117a6:	f7ff b845 	b.w	10834 <__ssvfscanf_r+0x720>
   117aa:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   117ae:	f853 6b04 	ldr.w	r6, [r3], #4
   117b2:	633b      	str	r3, [r7, #48]	; 0x30
   117b4:	4615      	mov	r5, r2
   117b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   117b8:	64ba      	str	r2, [r7, #72]	; 0x48
   117ba:	e709      	b.n	115d0 <__ssvfscanf_r+0x14bc>
   117bc:	461c      	mov	r4, r3
   117be:	f8db 3004 	ldr.w	r3, [fp, #4]
   117c2:	4598      	cmp	r8, r3
   117c4:	dd39      	ble.n	1183a <__ssvfscanf_r+0x1726>
   117c6:	f8db 2000 	ldr.w	r2, [fp]
   117ca:	441a      	add	r2, r3
   117cc:	f8cb 2000 	str.w	r2, [fp]
   117d0:	4659      	mov	r1, fp
   117d2:	4648      	mov	r0, r9
   117d4:	441c      	add	r4, r3
   117d6:	eba8 0803 	sub.w	r8, r8, r3
   117da:	f001 fe45 	bl	13468 <__ssrefill_r>
   117de:	2800      	cmp	r0, #0
   117e0:	d0ed      	beq.n	117be <__ssvfscanf_r+0x16aa>
   117e2:	2c00      	cmp	r4, #0
   117e4:	f43e ad82 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   117e8:	44a2      	add	sl, r4
   117ea:	f7fe bcba 	b.w	10162 <__ssvfscanf_r+0x4e>
   117ee:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   117f0:	4643      	mov	r3, r8
   117f2:	6829      	ldr	r1, [r5, #0]
   117f4:	f8cd b000 	str.w	fp, [sp]
   117f8:	2201      	movs	r2, #1
   117fa:	4648      	mov	r0, r9
   117fc:	f001 fe52 	bl	134a4 <_sfread_r>
   11800:	4604      	mov	r4, r0
   11802:	2800      	cmp	r0, #0
   11804:	f43e ad72 	beq.w	102ec <__ssvfscanf_r+0x1d8>
   11808:	3504      	adds	r5, #4
   1180a:	64bd      	str	r5, [r7, #72]	; 0x48
   1180c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1180e:	3301      	adds	r3, #1
   11810:	647b      	str	r3, [r7, #68]	; 0x44
   11812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11814:	633b      	str	r3, [r7, #48]	; 0x30
   11816:	44a2      	add	sl, r4
   11818:	f7fe bca3 	b.w	10162 <__ssvfscanf_r+0x4e>
   1181c:	6818      	ldr	r0, [r3, #0]
   1181e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11820:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   11824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11826:	633c      	str	r4, [r7, #48]	; 0x30
   11828:	3501      	adds	r5, #1
   1182a:	80dd      	strh	r5, [r3, #6]
   1182c:	63fe      	str	r6, [r7, #60]	; 0x3c
   1182e:	2520      	movs	r5, #32
   11830:	e6ce      	b.n	115d0 <__ssvfscanf_r+0x14bc>
   11832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11834:	8093      	strh	r3, [r2, #4]
   11836:	6010      	str	r0, [r2, #0]
   11838:	e7f1      	b.n	1181e <__ssvfscanf_r+0x170a>
   1183a:	eba3 0308 	sub.w	r3, r3, r8
   1183e:	f8cb 3004 	str.w	r3, [fp, #4]
   11842:	f8db 3000 	ldr.w	r3, [fp]
   11846:	4444      	add	r4, r8
   11848:	4443      	add	r3, r8
   1184a:	f8cb 3000 	str.w	r3, [fp]
   1184e:	44a2      	add	sl, r4
   11850:	f7fe bc87 	b.w	10162 <__ssvfscanf_r+0x4e>
   11854:	680a      	ldr	r2, [r1, #0]
   11856:	63fa      	str	r2, [r7, #60]	; 0x3c
   11858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1185a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1185e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11860:	3601      	adds	r6, #1
   11862:	b2b6      	uxth	r6, r6
   11864:	80d6      	strh	r6, [r2, #6]
   11866:	4619      	mov	r1, r3
   11868:	f8cd b000 	str.w	fp, [sp]
   1186c:	4643      	mov	r3, r8
   1186e:	2201      	movs	r2, #1
   11870:	4648      	mov	r0, r9
   11872:	f001 fe17 	bl	134a4 <_sfread_r>
   11876:	4604      	mov	r4, r0
   11878:	b1d8      	cbz	r0, 118b2 <__ssvfscanf_r+0x179e>
   1187a:	4580      	cmp	r8, r0
   1187c:	d9c6      	bls.n	1180c <__ssvfscanf_r+0x16f8>
   1187e:	6828      	ldr	r0, [r5, #0]
   11880:	4621      	mov	r1, r4
   11882:	f7f9 fb73 	bl	af6c <realloc>
   11886:	2800      	cmp	r0, #0
   11888:	d0c0      	beq.n	1180c <__ssvfscanf_r+0x16f8>
   1188a:	6028      	str	r0, [r5, #0]
   1188c:	e7be      	b.n	1180c <__ssvfscanf_r+0x16f8>
   1188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11890:	3208      	adds	r2, #8
   11892:	b294      	uxth	r4, r2
   11894:	681a      	ldr	r2, [r3, #0]
   11896:	637a      	str	r2, [r7, #52]	; 0x34
   11898:	4610      	mov	r0, r2
   1189a:	00a1      	lsls	r1, r4, #2
   1189c:	f7f9 fb66 	bl	af6c <realloc>
   118a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   118a2:	63f8      	str	r0, [r7, #60]	; 0x3c
   118a4:	2800      	cmp	r0, #0
   118a6:	d05b      	beq.n	11960 <__ssvfscanf_r+0x184c>
   118a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118aa:	809c      	strh	r4, [r3, #4]
   118ac:	6018      	str	r0, [r3, #0]
   118ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   118b0:	e7d2      	b.n	11858 <__ssvfscanf_r+0x1744>
   118b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   118b4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   118b8:	2b00      	cmp	r3, #0
   118ba:	f43f ad75 	beq.w	113a8 <__ssvfscanf_r+0x1294>
   118be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   118c2:	065b      	lsls	r3, r3, #25
   118c4:	f57e ad1d 	bpl.w	10302 <__ssvfscanf_r+0x1ee>
   118c8:	e56a      	b.n	113a0 <__ssvfscanf_r+0x128c>
   118ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   118cc:	3202      	adds	r2, #2
   118ce:	d11d      	bne.n	1190c <__ssvfscanf_r+0x17f8>
   118d0:	f8db 2004 	ldr.w	r2, [fp, #4]
   118d4:	2a00      	cmp	r2, #0
   118d6:	461d      	mov	r5, r3
   118d8:	f73f ae80 	bgt.w	115dc <__ssvfscanf_r+0x14c8>
   118dc:	4659      	mov	r1, fp
   118de:	4620      	mov	r0, r4
   118e0:	f001 fdc2 	bl	13468 <__ssrefill_r>
   118e4:	b9e0      	cbnz	r0, 11920 <__ssvfscanf_r+0x180c>
   118e6:	f1b9 0f00 	cmp.w	r9, #0
   118ea:	f47f ae77 	bne.w	115dc <__ssvfscanf_r+0x14c8>
   118ee:	4645      	mov	r5, r8
   118f0:	46a1      	mov	r9, r4
   118f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   118f4:	b123      	cbz	r3, 11900 <__ssvfscanf_r+0x17ec>
   118f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   118f8:	1af1      	subs	r1, r6, r3
   118fa:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   118fe:	d827      	bhi.n	11950 <__ssvfscanf_r+0x183c>
   11900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11902:	2b00      	cmp	r3, #0
   11904:	f47e ac2d 	bne.w	10162 <__ssvfscanf_r+0x4e>
   11908:	f7ff ba1c 	b.w	10d44 <__ssvfscanf_r+0xc30>
   1190c:	449a      	add	sl, r3
   1190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11910:	2b03      	cmp	r3, #3
   11912:	f47f ae97 	bne.w	11644 <__ssvfscanf_r+0x1530>
   11916:	682b      	ldr	r3, [r5, #0]
   11918:	2b04      	cmp	r3, #4
   1191a:	f47f ae93 	bne.w	11644 <__ssvfscanf_r+0x1530>
   1191e:	e693      	b.n	11648 <__ssvfscanf_r+0x1534>
   11920:	46a1      	mov	r9, r4
   11922:	462c      	mov	r4, r5
   11924:	4645      	mov	r5, r8
   11926:	2c00      	cmp	r4, #0
   11928:	d0e3      	beq.n	118f2 <__ssvfscanf_r+0x17de>
   1192a:	f7fe bcdf 	b.w	102ec <__ssvfscanf_r+0x1d8>
   1192e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11930:	1946      	adds	r6, r0, r5
   11932:	6010      	str	r0, [r2, #0]
   11934:	ea4f 0848 	mov.w	r8, r8, lsl #1
   11938:	3604      	adds	r6, #4
   1193a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1193e:	2b00      	cmp	r3, #0
   11940:	f04f 0500 	mov.w	r5, #0
   11944:	ddca      	ble.n	118dc <__ssvfscanf_r+0x17c8>
   11946:	f1b9 0f00 	cmp.w	r9, #0
   1194a:	f47f ae47 	bne.w	115dc <__ssvfscanf_r+0x14c8>
   1194e:	e7ce      	b.n	118ee <__ssvfscanf_r+0x17da>
   11950:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   11952:	6820      	ldr	r0, [r4, #0]
   11954:	f7f9 fb0a 	bl	af6c <realloc>
   11958:	2800      	cmp	r0, #0
   1195a:	d0d1      	beq.n	11900 <__ssvfscanf_r+0x17ec>
   1195c:	6020      	str	r0, [r4, #0]
   1195e:	e7cf      	b.n	11900 <__ssvfscanf_r+0x17ec>
   11960:	4690      	mov	r8, r2
   11962:	e521      	b.n	113a8 <__ssvfscanf_r+0x1294>

00011964 <_fclose_r>:
   11964:	b570      	push	{r4, r5, r6, lr}
   11966:	2900      	cmp	r1, #0
   11968:	d04b      	beq.n	11a02 <_fclose_r+0x9e>
   1196a:	4606      	mov	r6, r0
   1196c:	460c      	mov	r4, r1
   1196e:	b110      	cbz	r0, 11976 <_fclose_r+0x12>
   11970:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11972:	2b00      	cmp	r3, #0
   11974:	d048      	beq.n	11a08 <_fclose_r+0xa4>
   11976:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11978:	07d8      	lsls	r0, r3, #31
   1197a:	d534      	bpl.n	119e6 <_fclose_r+0x82>
   1197c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11980:	2b00      	cmp	r3, #0
   11982:	d03e      	beq.n	11a02 <_fclose_r+0x9e>
   11984:	4621      	mov	r1, r4
   11986:	4630      	mov	r0, r6
   11988:	f000 f850 	bl	11a2c <__sflush_r>
   1198c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1198e:	4605      	mov	r5, r0
   11990:	b133      	cbz	r3, 119a0 <_fclose_r+0x3c>
   11992:	69e1      	ldr	r1, [r4, #28]
   11994:	4630      	mov	r0, r6
   11996:	4798      	blx	r3
   11998:	2800      	cmp	r0, #0
   1199a:	bfb8      	it	lt
   1199c:	f04f 35ff 	movlt.w	r5, #4294967295
   119a0:	89a3      	ldrh	r3, [r4, #12]
   119a2:	061a      	lsls	r2, r3, #24
   119a4:	d43c      	bmi.n	11a20 <_fclose_r+0xbc>
   119a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   119a8:	b141      	cbz	r1, 119bc <_fclose_r+0x58>
   119aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   119ae:	4299      	cmp	r1, r3
   119b0:	d002      	beq.n	119b8 <_fclose_r+0x54>
   119b2:	4630      	mov	r0, r6
   119b4:	f7fb fb96 	bl	d0e4 <_free_r>
   119b8:	2300      	movs	r3, #0
   119ba:	6323      	str	r3, [r4, #48]	; 0x30
   119bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   119be:	b121      	cbz	r1, 119ca <_fclose_r+0x66>
   119c0:	4630      	mov	r0, r6
   119c2:	f7fb fb8f 	bl	d0e4 <_free_r>
   119c6:	2300      	movs	r3, #0
   119c8:	6463      	str	r3, [r4, #68]	; 0x44
   119ca:	f7fa fd65 	bl	c498 <__sfp_lock_acquire>
   119ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   119d0:	2200      	movs	r2, #0
   119d2:	07db      	lsls	r3, r3, #31
   119d4:	81a2      	strh	r2, [r4, #12]
   119d6:	d51f      	bpl.n	11a18 <_fclose_r+0xb4>
   119d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   119da:	f7fb f895 	bl	cb08 <__retarget_lock_close_recursive>
   119de:	f7fa fd61 	bl	c4a4 <__sfp_lock_release>
   119e2:	4628      	mov	r0, r5
   119e4:	bd70      	pop	{r4, r5, r6, pc}
   119e6:	89a3      	ldrh	r3, [r4, #12]
   119e8:	0599      	lsls	r1, r3, #22
   119ea:	d4cb      	bmi.n	11984 <_fclose_r+0x20>
   119ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   119ee:	f7fb f88d 	bl	cb0c <__retarget_lock_acquire_recursive>
   119f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   119f6:	2b00      	cmp	r3, #0
   119f8:	d1c4      	bne.n	11984 <_fclose_r+0x20>
   119fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   119fc:	f015 0501 	ands.w	r5, r5, #1
   11a00:	d005      	beq.n	11a0e <_fclose_r+0xaa>
   11a02:	2500      	movs	r5, #0
   11a04:	4628      	mov	r0, r5
   11a06:	bd70      	pop	{r4, r5, r6, pc}
   11a08:	f7fa fd28 	bl	c45c <__sinit>
   11a0c:	e7b3      	b.n	11976 <_fclose_r+0x12>
   11a0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11a10:	f7fb f87e 	bl	cb10 <__retarget_lock_release_recursive>
   11a14:	4628      	mov	r0, r5
   11a16:	bd70      	pop	{r4, r5, r6, pc}
   11a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11a1a:	f7fb f879 	bl	cb10 <__retarget_lock_release_recursive>
   11a1e:	e7db      	b.n	119d8 <_fclose_r+0x74>
   11a20:	6921      	ldr	r1, [r4, #16]
   11a22:	4630      	mov	r0, r6
   11a24:	f7fb fb5e 	bl	d0e4 <_free_r>
   11a28:	e7bd      	b.n	119a6 <_fclose_r+0x42>
   11a2a:	bf00      	nop

00011a2c <__sflush_r>:
   11a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   11a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a34:	460c      	mov	r4, r1
   11a36:	0711      	lsls	r1, r2, #28
   11a38:	4680      	mov	r8, r0
   11a3a:	d447      	bmi.n	11acc <__sflush_r+0xa0>
   11a3c:	6863      	ldr	r3, [r4, #4]
   11a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   11a42:	2b00      	cmp	r3, #0
   11a44:	81a2      	strh	r2, [r4, #12]
   11a46:	dd5e      	ble.n	11b06 <__sflush_r+0xda>
   11a48:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11a4a:	2d00      	cmp	r5, #0
   11a4c:	d058      	beq.n	11b00 <__sflush_r+0xd4>
   11a4e:	2300      	movs	r3, #0
   11a50:	f8d8 6000 	ldr.w	r6, [r8]
   11a54:	f8c8 3000 	str.w	r3, [r8]
   11a58:	b293      	uxth	r3, r2
   11a5a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   11a5e:	d156      	bne.n	11b0e <__sflush_r+0xe2>
   11a60:	2301      	movs	r3, #1
   11a62:	69e1      	ldr	r1, [r4, #28]
   11a64:	4640      	mov	r0, r8
   11a66:	47a8      	blx	r5
   11a68:	1c43      	adds	r3, r0, #1
   11a6a:	d067      	beq.n	11b3c <__sflush_r+0x110>
   11a6c:	89a3      	ldrh	r3, [r4, #12]
   11a6e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11a70:	075f      	lsls	r7, r3, #29
   11a72:	d505      	bpl.n	11a80 <__sflush_r+0x54>
   11a74:	6863      	ldr	r3, [r4, #4]
   11a76:	1ac0      	subs	r0, r0, r3
   11a78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11a7a:	b10b      	cbz	r3, 11a80 <__sflush_r+0x54>
   11a7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11a7e:	1ac0      	subs	r0, r0, r3
   11a80:	69e1      	ldr	r1, [r4, #28]
   11a82:	4602      	mov	r2, r0
   11a84:	2300      	movs	r3, #0
   11a86:	4640      	mov	r0, r8
   11a88:	47a8      	blx	r5
   11a8a:	1c41      	adds	r1, r0, #1
   11a8c:	d141      	bne.n	11b12 <__sflush_r+0xe6>
   11a8e:	f8d8 3000 	ldr.w	r3, [r8]
   11a92:	2b00      	cmp	r3, #0
   11a94:	d03d      	beq.n	11b12 <__sflush_r+0xe6>
   11a96:	2b1d      	cmp	r3, #29
   11a98:	d001      	beq.n	11a9e <__sflush_r+0x72>
   11a9a:	2b16      	cmp	r3, #22
   11a9c:	d156      	bne.n	11b4c <__sflush_r+0x120>
   11a9e:	89a3      	ldrh	r3, [r4, #12]
   11aa0:	6922      	ldr	r2, [r4, #16]
   11aa2:	6022      	str	r2, [r4, #0]
   11aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11aa8:	2100      	movs	r1, #0
   11aaa:	6061      	str	r1, [r4, #4]
   11aac:	81a3      	strh	r3, [r4, #12]
   11aae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11ab0:	f8c8 6000 	str.w	r6, [r8]
   11ab4:	b321      	cbz	r1, 11b00 <__sflush_r+0xd4>
   11ab6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11aba:	4299      	cmp	r1, r3
   11abc:	d002      	beq.n	11ac4 <__sflush_r+0x98>
   11abe:	4640      	mov	r0, r8
   11ac0:	f7fb fb10 	bl	d0e4 <_free_r>
   11ac4:	2000      	movs	r0, #0
   11ac6:	6320      	str	r0, [r4, #48]	; 0x30
   11ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11acc:	6926      	ldr	r6, [r4, #16]
   11ace:	b1be      	cbz	r6, 11b00 <__sflush_r+0xd4>
   11ad0:	b293      	uxth	r3, r2
   11ad2:	6825      	ldr	r5, [r4, #0]
   11ad4:	6026      	str	r6, [r4, #0]
   11ad6:	079a      	lsls	r2, r3, #30
   11ad8:	bf0c      	ite	eq
   11ada:	6963      	ldreq	r3, [r4, #20]
   11adc:	2300      	movne	r3, #0
   11ade:	1bad      	subs	r5, r5, r6
   11ae0:	60a3      	str	r3, [r4, #8]
   11ae2:	e00b      	b.n	11afc <__sflush_r+0xd0>
   11ae4:	462b      	mov	r3, r5
   11ae6:	4632      	mov	r2, r6
   11ae8:	69e1      	ldr	r1, [r4, #28]
   11aea:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11aec:	4640      	mov	r0, r8
   11aee:	47b8      	blx	r7
   11af0:	f1b0 0c00 	subs.w	ip, r0, #0
   11af4:	eba5 050c 	sub.w	r5, r5, ip
   11af8:	4466      	add	r6, ip
   11afa:	dd17      	ble.n	11b2c <__sflush_r+0x100>
   11afc:	2d00      	cmp	r5, #0
   11afe:	dcf1      	bgt.n	11ae4 <__sflush_r+0xb8>
   11b00:	2000      	movs	r0, #0
   11b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11b08:	2b00      	cmp	r3, #0
   11b0a:	dc9d      	bgt.n	11a48 <__sflush_r+0x1c>
   11b0c:	e7f8      	b.n	11b00 <__sflush_r+0xd4>
   11b0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   11b10:	e7ae      	b.n	11a70 <__sflush_r+0x44>
   11b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11b16:	6922      	ldr	r2, [r4, #16]
   11b18:	6022      	str	r2, [r4, #0]
   11b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11b1e:	81a3      	strh	r3, [r4, #12]
   11b20:	2200      	movs	r2, #0
   11b22:	04db      	lsls	r3, r3, #19
   11b24:	6062      	str	r2, [r4, #4]
   11b26:	d5c2      	bpl.n	11aae <__sflush_r+0x82>
   11b28:	6520      	str	r0, [r4, #80]	; 0x50
   11b2a:	e7c0      	b.n	11aae <__sflush_r+0x82>
   11b2c:	89a3      	ldrh	r3, [r4, #12]
   11b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11b32:	f04f 30ff 	mov.w	r0, #4294967295
   11b36:	81a3      	strh	r3, [r4, #12]
   11b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b3c:	f8d8 3000 	ldr.w	r3, [r8]
   11b40:	2b00      	cmp	r3, #0
   11b42:	d093      	beq.n	11a6c <__sflush_r+0x40>
   11b44:	2b1d      	cmp	r3, #29
   11b46:	d006      	beq.n	11b56 <__sflush_r+0x12a>
   11b48:	2b16      	cmp	r3, #22
   11b4a:	d004      	beq.n	11b56 <__sflush_r+0x12a>
   11b4c:	89a3      	ldrh	r3, [r4, #12]
   11b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11b52:	81a3      	strh	r3, [r4, #12]
   11b54:	e7d5      	b.n	11b02 <__sflush_r+0xd6>
   11b56:	f8c8 6000 	str.w	r6, [r8]
   11b5a:	e7d1      	b.n	11b00 <__sflush_r+0xd4>

00011b5c <_fflush_r>:
   11b5c:	b538      	push	{r3, r4, r5, lr}
   11b5e:	460c      	mov	r4, r1
   11b60:	4605      	mov	r5, r0
   11b62:	b108      	cbz	r0, 11b68 <_fflush_r+0xc>
   11b64:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11b66:	b303      	cbz	r3, 11baa <_fflush_r+0x4e>
   11b68:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11b6c:	b188      	cbz	r0, 11b92 <_fflush_r+0x36>
   11b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11b70:	07db      	lsls	r3, r3, #31
   11b72:	d401      	bmi.n	11b78 <_fflush_r+0x1c>
   11b74:	0581      	lsls	r1, r0, #22
   11b76:	d50f      	bpl.n	11b98 <_fflush_r+0x3c>
   11b78:	4628      	mov	r0, r5
   11b7a:	4621      	mov	r1, r4
   11b7c:	f7ff ff56 	bl	11a2c <__sflush_r>
   11b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11b82:	07da      	lsls	r2, r3, #31
   11b84:	4605      	mov	r5, r0
   11b86:	d402      	bmi.n	11b8e <_fflush_r+0x32>
   11b88:	89a3      	ldrh	r3, [r4, #12]
   11b8a:	059b      	lsls	r3, r3, #22
   11b8c:	d508      	bpl.n	11ba0 <_fflush_r+0x44>
   11b8e:	4628      	mov	r0, r5
   11b90:	bd38      	pop	{r3, r4, r5, pc}
   11b92:	4605      	mov	r5, r0
   11b94:	4628      	mov	r0, r5
   11b96:	bd38      	pop	{r3, r4, r5, pc}
   11b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11b9a:	f7fa ffb7 	bl	cb0c <__retarget_lock_acquire_recursive>
   11b9e:	e7eb      	b.n	11b78 <_fflush_r+0x1c>
   11ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11ba2:	f7fa ffb5 	bl	cb10 <__retarget_lock_release_recursive>
   11ba6:	4628      	mov	r0, r5
   11ba8:	bd38      	pop	{r3, r4, r5, pc}
   11baa:	f7fa fc57 	bl	c45c <__sinit>
   11bae:	e7db      	b.n	11b68 <_fflush_r+0xc>

00011bb0 <__sccl>:
   11bb0:	b570      	push	{r4, r5, r6, lr}
   11bb2:	780c      	ldrb	r4, [r1, #0]
   11bb4:	2c5e      	cmp	r4, #94	; 0x5e
   11bb6:	4686      	mov	lr, r0
   11bb8:	d01e      	beq.n	11bf8 <__sccl+0x48>
   11bba:	2200      	movs	r2, #0
   11bbc:	1c48      	adds	r0, r1, #1
   11bbe:	4694      	mov	ip, r2
   11bc0:	f10e 33ff 	add.w	r3, lr, #4294967295
   11bc4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   11bc8:	f803 2f01 	strb.w	r2, [r3, #1]!
   11bcc:	428b      	cmp	r3, r1
   11bce:	d1fb      	bne.n	11bc8 <__sccl+0x18>
   11bd0:	b184      	cbz	r4, 11bf4 <__sccl+0x44>
   11bd2:	f08c 0101 	eor.w	r1, ip, #1
   11bd6:	f80e 1004 	strb.w	r1, [lr, r4]
   11bda:	1c45      	adds	r5, r0, #1
   11bdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   11be0:	2b2d      	cmp	r3, #45	; 0x2d
   11be2:	d00e      	beq.n	11c02 <__sccl+0x52>
   11be4:	2b5d      	cmp	r3, #93	; 0x5d
   11be6:	d003      	beq.n	11bf0 <__sccl+0x40>
   11be8:	b11b      	cbz	r3, 11bf2 <__sccl+0x42>
   11bea:	461c      	mov	r4, r3
   11bec:	4628      	mov	r0, r5
   11bee:	e7f2      	b.n	11bd6 <__sccl+0x26>
   11bf0:	4628      	mov	r0, r5
   11bf2:	bd70      	pop	{r4, r5, r6, pc}
   11bf4:	3801      	subs	r0, #1
   11bf6:	bd70      	pop	{r4, r5, r6, pc}
   11bf8:	2201      	movs	r2, #1
   11bfa:	784c      	ldrb	r4, [r1, #1]
   11bfc:	1c88      	adds	r0, r1, #2
   11bfe:	4694      	mov	ip, r2
   11c00:	e7de      	b.n	11bc0 <__sccl+0x10>
   11c02:	f890 c001 	ldrb.w	ip, [r0, #1]
   11c06:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   11c0a:	d0ee      	beq.n	11bea <__sccl+0x3a>
   11c0c:	4564      	cmp	r4, ip
   11c0e:	dcec      	bgt.n	11bea <__sccl+0x3a>
   11c10:	1c66      	adds	r6, r4, #1
   11c12:	3002      	adds	r0, #2
   11c14:	eb0e 0206 	add.w	r2, lr, r6
   11c18:	f802 1b01 	strb.w	r1, [r2], #1
   11c1c:	eba2 030e 	sub.w	r3, r2, lr
   11c20:	3b01      	subs	r3, #1
   11c22:	459c      	cmp	ip, r3
   11c24:	dcf8      	bgt.n	11c18 <__sccl+0x68>
   11c26:	ebac 0304 	sub.w	r3, ip, r4
   11c2a:	3b01      	subs	r3, #1
   11c2c:	4564      	cmp	r4, ip
   11c2e:	bfa8      	it	ge
   11c30:	2300      	movge	r3, #0
   11c32:	3502      	adds	r5, #2
   11c34:	199c      	adds	r4, r3, r6
   11c36:	e7d1      	b.n	11bdc <__sccl+0x2c>

00011c38 <stpncpy>:
   11c38:	ea41 0300 	orr.w	r3, r1, r0
   11c3c:	079b      	lsls	r3, r3, #30
   11c3e:	b430      	push	{r4, r5}
   11c40:	d101      	bne.n	11c46 <stpncpy+0xe>
   11c42:	2a03      	cmp	r2, #3
   11c44:	d80f      	bhi.n	11c66 <stpncpy+0x2e>
   11c46:	f101 3cff 	add.w	ip, r1, #4294967295
   11c4a:	e007      	b.n	11c5c <stpncpy+0x24>
   11c4c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   11c50:	f803 1b01 	strb.w	r1, [r3], #1
   11c54:	1e54      	subs	r4, r2, #1
   11c56:	b1c1      	cbz	r1, 11c8a <stpncpy+0x52>
   11c58:	4622      	mov	r2, r4
   11c5a:	4618      	mov	r0, r3
   11c5c:	4603      	mov	r3, r0
   11c5e:	2a00      	cmp	r2, #0
   11c60:	d1f4      	bne.n	11c4c <stpncpy+0x14>
   11c62:	bc30      	pop	{r4, r5}
   11c64:	4770      	bx	lr
   11c66:	460b      	mov	r3, r1
   11c68:	4619      	mov	r1, r3
   11c6a:	f853 5b04 	ldr.w	r5, [r3], #4
   11c6e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11c72:	ea24 0405 	bic.w	r4, r4, r5
   11c76:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   11c7a:	d1e4      	bne.n	11c46 <stpncpy+0xe>
   11c7c:	3a04      	subs	r2, #4
   11c7e:	2a03      	cmp	r2, #3
   11c80:	f840 5b04 	str.w	r5, [r0], #4
   11c84:	4619      	mov	r1, r3
   11c86:	d8ef      	bhi.n	11c68 <stpncpy+0x30>
   11c88:	e7dd      	b.n	11c46 <stpncpy+0xe>
   11c8a:	4402      	add	r2, r0
   11c8c:	2c00      	cmp	r4, #0
   11c8e:	d0e8      	beq.n	11c62 <stpncpy+0x2a>
   11c90:	f803 1b01 	strb.w	r1, [r3], #1
   11c94:	4293      	cmp	r3, r2
   11c96:	d1fb      	bne.n	11c90 <stpncpy+0x58>
   11c98:	bc30      	pop	{r4, r5}
   11c9a:	4770      	bx	lr

00011c9c <_localeconv_r>:
   11c9c:	4800      	ldr	r0, [pc, #0]	; (11ca0 <_localeconv_r+0x4>)
   11c9e:	4770      	bx	lr
   11ca0:	200089e4 	.word	0x200089e4
   11ca4:	00000000 	.word	0x00000000

00011ca8 <frexp>:
   11ca8:	b430      	push	{r4, r5}
   11caa:	b082      	sub	sp, #8
   11cac:	ed8d 0b00 	vstr	d0, [sp]
   11cb0:	9a01      	ldr	r2, [sp, #4]
   11cb2:	4c19      	ldr	r4, [pc, #100]	; (11d18 <frexp+0x70>)
   11cb4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11cb8:	2100      	movs	r1, #0
   11cba:	42a3      	cmp	r3, r4
   11cbc:	6001      	str	r1, [r0, #0]
   11cbe:	dc21      	bgt.n	11d04 <frexp+0x5c>
   11cc0:	9c00      	ldr	r4, [sp, #0]
   11cc2:	431c      	orrs	r4, r3
   11cc4:	d01e      	beq.n	11d04 <frexp+0x5c>
   11cc6:	4c15      	ldr	r4, [pc, #84]	; (11d1c <frexp+0x74>)
   11cc8:	4014      	ands	r4, r2
   11cca:	b954      	cbnz	r4, 11ce2 <frexp+0x3a>
   11ccc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 11d10 <frexp+0x68>
   11cd0:	ee20 7b07 	vmul.f64	d7, d0, d7
   11cd4:	ed8d 7b00 	vstr	d7, [sp]
   11cd8:	9a01      	ldr	r2, [sp, #4]
   11cda:	f06f 0135 	mvn.w	r1, #53	; 0x35
   11cde:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11ce2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   11ce6:	e9dd 4500 	ldrd	r4, r5, [sp]
   11cea:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   11cee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   11cf2:	151b      	asrs	r3, r3, #20
   11cf4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   11cf8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   11cfc:	e9cd 4500 	strd	r4, r5, [sp]
   11d00:	440b      	add	r3, r1
   11d02:	6003      	str	r3, [r0, #0]
   11d04:	ed9d 0b00 	vldr	d0, [sp]
   11d08:	b002      	add	sp, #8
   11d0a:	bc30      	pop	{r4, r5}
   11d0c:	4770      	bx	lr
   11d0e:	bf00      	nop
   11d10:	00000000 	.word	0x00000000
   11d14:	43500000 	.word	0x43500000
   11d18:	7fefffff 	.word	0x7fefffff
   11d1c:	7ff00000 	.word	0x7ff00000

00011d20 <__assert_func>:
   11d20:	b500      	push	{lr}
   11d22:	4c0b      	ldr	r4, [pc, #44]	; (11d50 <__assert_func+0x30>)
   11d24:	6825      	ldr	r5, [r4, #0]
   11d26:	4614      	mov	r4, r2
   11d28:	68ee      	ldr	r6, [r5, #12]
   11d2a:	461a      	mov	r2, r3
   11d2c:	b085      	sub	sp, #20
   11d2e:	4603      	mov	r3, r0
   11d30:	460d      	mov	r5, r1
   11d32:	b14c      	cbz	r4, 11d48 <__assert_func+0x28>
   11d34:	4907      	ldr	r1, [pc, #28]	; (11d54 <__assert_func+0x34>)
   11d36:	9500      	str	r5, [sp, #0]
   11d38:	e9cd 1401 	strd	r1, r4, [sp, #4]
   11d3c:	4630      	mov	r0, r6
   11d3e:	4906      	ldr	r1, [pc, #24]	; (11d58 <__assert_func+0x38>)
   11d40:	f001 fabe 	bl	132c0 <fiprintf>
   11d44:	f7f6 fcda 	bl	86fc <abort>
   11d48:	4904      	ldr	r1, [pc, #16]	; (11d5c <__assert_func+0x3c>)
   11d4a:	460c      	mov	r4, r1
   11d4c:	e7f3      	b.n	11d36 <__assert_func+0x16>
   11d4e:	bf00      	nop
   11d50:	20008e7c 	.word	0x20008e7c
   11d54:	20000b3c 	.word	0x20000b3c
   11d58:	20000b4c 	.word	0x20000b4c
   11d5c:	2000832c 	.word	0x2000832c

00011d60 <_calloc_r>:
   11d60:	b538      	push	{r3, r4, r5, lr}
   11d62:	fba1 1402 	umull	r1, r4, r1, r2
   11d66:	bb8c      	cbnz	r4, 11dcc <_calloc_r+0x6c>
   11d68:	f7f8 fe44 	bl	a9f4 <_malloc_r>
   11d6c:	4605      	mov	r5, r0
   11d6e:	b1e0      	cbz	r0, 11daa <_calloc_r+0x4a>
   11d70:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11d74:	f022 0203 	bic.w	r2, r2, #3
   11d78:	3a04      	subs	r2, #4
   11d7a:	2a24      	cmp	r2, #36	; 0x24
   11d7c:	d817      	bhi.n	11dae <_calloc_r+0x4e>
   11d7e:	2a13      	cmp	r2, #19
   11d80:	d91a      	bls.n	11db8 <_calloc_r+0x58>
   11d82:	2a1b      	cmp	r2, #27
   11d84:	e9c0 4400 	strd	r4, r4, [r0]
   11d88:	d91d      	bls.n	11dc6 <_calloc_r+0x66>
   11d8a:	2a24      	cmp	r2, #36	; 0x24
   11d8c:	bf14      	ite	ne
   11d8e:	f100 0210 	addne.w	r2, r0, #16
   11d92:	f100 0218 	addeq.w	r2, r0, #24
   11d96:	f04f 0300 	mov.w	r3, #0
   11d9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11d9e:	bf04      	itt	eq
   11da0:	6104      	streq	r4, [r0, #16]
   11da2:	6144      	streq	r4, [r0, #20]
   11da4:	e9c2 3300 	strd	r3, r3, [r2]
   11da8:	6093      	str	r3, [r2, #8]
   11daa:	4628      	mov	r0, r5
   11dac:	bd38      	pop	{r3, r4, r5, pc}
   11dae:	4621      	mov	r1, r4
   11db0:	f7fa fd48 	bl	c844 <memset>
   11db4:	4628      	mov	r0, r5
   11db6:	bd38      	pop	{r3, r4, r5, pc}
   11db8:	4602      	mov	r2, r0
   11dba:	2300      	movs	r3, #0
   11dbc:	e9c2 3300 	strd	r3, r3, [r2]
   11dc0:	6093      	str	r3, [r2, #8]
   11dc2:	4628      	mov	r0, r5
   11dc4:	bd38      	pop	{r3, r4, r5, pc}
   11dc6:	f100 0208 	add.w	r2, r0, #8
   11dca:	e7f6      	b.n	11dba <_calloc_r+0x5a>
   11dcc:	f7fa fe70 	bl	cab0 <__errno>
   11dd0:	230c      	movs	r3, #12
   11dd2:	2500      	movs	r5, #0
   11dd4:	6003      	str	r3, [r0, #0]
   11dd6:	e7e8      	b.n	11daa <_calloc_r+0x4a>

00011dd8 <quorem>:
   11dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ddc:	6903      	ldr	r3, [r0, #16]
   11dde:	690c      	ldr	r4, [r1, #16]
   11de0:	42a3      	cmp	r3, r4
   11de2:	b083      	sub	sp, #12
   11de4:	f2c0 8087 	blt.w	11ef6 <quorem+0x11e>
   11de8:	3c01      	subs	r4, #1
   11dea:	f101 0514 	add.w	r5, r1, #20
   11dee:	00a3      	lsls	r3, r4, #2
   11df0:	f100 0814 	add.w	r8, r0, #20
   11df4:	9300      	str	r3, [sp, #0]
   11df6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   11dfa:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   11dfe:	3301      	adds	r3, #1
   11e00:	4681      	mov	r9, r0
   11e02:	429a      	cmp	r2, r3
   11e04:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   11e08:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   11e0c:	9001      	str	r0, [sp, #4]
   11e0e:	fbb2 f6f3 	udiv	r6, r2, r3
   11e12:	d33b      	bcc.n	11e8c <quorem+0xb4>
   11e14:	f04f 0c00 	mov.w	ip, #0
   11e18:	46ae      	mov	lr, r5
   11e1a:	4640      	mov	r0, r8
   11e1c:	46e2      	mov	sl, ip
   11e1e:	4663      	mov	r3, ip
   11e20:	f85e bb04 	ldr.w	fp, [lr], #4
   11e24:	6802      	ldr	r2, [r0, #0]
   11e26:	fa1f fc8b 	uxth.w	ip, fp
   11e2a:	fb06 330c 	mla	r3, r6, ip, r3
   11e2e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11e32:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   11e36:	fb06 cc0b 	mla	ip, r6, fp, ip
   11e3a:	b29b      	uxth	r3, r3
   11e3c:	ebaa 0303 	sub.w	r3, sl, r3
   11e40:	fa1f fa8c 	uxth.w	sl, ip
   11e44:	fa13 f382 	uxtah	r3, r3, r2
   11e48:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   11e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11e50:	b29b      	uxth	r3, r3
   11e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11e56:	4577      	cmp	r7, lr
   11e58:	f840 3b04 	str.w	r3, [r0], #4
   11e5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11e60:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11e64:	d2dc      	bcs.n	11e20 <quorem+0x48>
   11e66:	9b00      	ldr	r3, [sp, #0]
   11e68:	f858 3003 	ldr.w	r3, [r8, r3]
   11e6c:	b973      	cbnz	r3, 11e8c <quorem+0xb4>
   11e6e:	9b01      	ldr	r3, [sp, #4]
   11e70:	3b04      	subs	r3, #4
   11e72:	4598      	cmp	r8, r3
   11e74:	d304      	bcc.n	11e80 <quorem+0xa8>
   11e76:	e007      	b.n	11e88 <quorem+0xb0>
   11e78:	4598      	cmp	r8, r3
   11e7a:	f104 34ff 	add.w	r4, r4, #4294967295
   11e7e:	d203      	bcs.n	11e88 <quorem+0xb0>
   11e80:	f853 2904 	ldr.w	r2, [r3], #-4
   11e84:	2a00      	cmp	r2, #0
   11e86:	d0f7      	beq.n	11e78 <quorem+0xa0>
   11e88:	f8c9 4010 	str.w	r4, [r9, #16]
   11e8c:	4648      	mov	r0, r9
   11e8e:	f7fc f933 	bl	e0f8 <__mcmp>
   11e92:	2800      	cmp	r0, #0
   11e94:	db2b      	blt.n	11eee <quorem+0x116>
   11e96:	3601      	adds	r6, #1
   11e98:	4641      	mov	r1, r8
   11e9a:	2300      	movs	r3, #0
   11e9c:	f855 0b04 	ldr.w	r0, [r5], #4
   11ea0:	f8d1 c000 	ldr.w	ip, [r1]
   11ea4:	b282      	uxth	r2, r0
   11ea6:	1a9a      	subs	r2, r3, r2
   11ea8:	0c03      	lsrs	r3, r0, #16
   11eaa:	fa12 f28c 	uxtah	r2, r2, ip
   11eae:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   11eb2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   11eb6:	b292      	uxth	r2, r2
   11eb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   11ebc:	42af      	cmp	r7, r5
   11ebe:	f841 2b04 	str.w	r2, [r1], #4
   11ec2:	ea4f 4323 	mov.w	r3, r3, asr #16
   11ec6:	d2e9      	bcs.n	11e9c <quorem+0xc4>
   11ec8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   11ecc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11ed0:	b96a      	cbnz	r2, 11eee <quorem+0x116>
   11ed2:	3b04      	subs	r3, #4
   11ed4:	4598      	cmp	r8, r3
   11ed6:	d304      	bcc.n	11ee2 <quorem+0x10a>
   11ed8:	e007      	b.n	11eea <quorem+0x112>
   11eda:	4598      	cmp	r8, r3
   11edc:	f104 34ff 	add.w	r4, r4, #4294967295
   11ee0:	d203      	bcs.n	11eea <quorem+0x112>
   11ee2:	f853 2904 	ldr.w	r2, [r3], #-4
   11ee6:	2a00      	cmp	r2, #0
   11ee8:	d0f7      	beq.n	11eda <quorem+0x102>
   11eea:	f8c9 4010 	str.w	r4, [r9, #16]
   11eee:	4630      	mov	r0, r6
   11ef0:	b003      	add	sp, #12
   11ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ef6:	2000      	movs	r0, #0
   11ef8:	b003      	add	sp, #12
   11efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11efe:	bf00      	nop

00011f00 <_dtoa_r>:
   11f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f04:	ed2d 8b02 	vpush	{d8}
   11f08:	b08f      	sub	sp, #60	; 0x3c
   11f0a:	ed8d 0b02 	vstr	d0, [sp, #8]
   11f0e:	9101      	str	r1, [sp, #4]
   11f10:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11f12:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11f14:	9305      	str	r3, [sp, #20]
   11f16:	ec57 6b10 	vmov	r6, r7, d0
   11f1a:	4604      	mov	r4, r0
   11f1c:	4693      	mov	fp, r2
   11f1e:	b141      	cbz	r1, 11f32 <_dtoa_r+0x32>
   11f20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11f22:	604a      	str	r2, [r1, #4]
   11f24:	2301      	movs	r3, #1
   11f26:	4093      	lsls	r3, r2
   11f28:	608b      	str	r3, [r1, #8]
   11f2a:	f7fb fe2d 	bl	db88 <_Bfree>
   11f2e:	2300      	movs	r3, #0
   11f30:	63a3      	str	r3, [r4, #56]	; 0x38
   11f32:	f1b7 0800 	subs.w	r8, r7, #0
   11f36:	bfb4      	ite	lt
   11f38:	2301      	movlt	r3, #1
   11f3a:	2300      	movge	r3, #0
   11f3c:	602b      	str	r3, [r5, #0]
   11f3e:	4bbe      	ldr	r3, [pc, #760]	; (12238 <_dtoa_r+0x338>)
   11f40:	bfbc      	itt	lt
   11f42:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11f46:	f8cd 800c 	strlt.w	r8, [sp, #12]
   11f4a:	ea33 0308 	bics.w	r3, r3, r8
   11f4e:	f000 809f 	beq.w	12090 <_dtoa_r+0x190>
   11f52:	ed9d 8b02 	vldr	d8, [sp, #8]
   11f56:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f5e:	d111      	bne.n	11f84 <_dtoa_r+0x84>
   11f60:	9a05      	ldr	r2, [sp, #20]
   11f62:	2301      	movs	r3, #1
   11f64:	6013      	str	r3, [r2, #0]
   11f66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11f68:	2b00      	cmp	r3, #0
   11f6a:	f000 823f 	beq.w	123ec <_dtoa_r+0x4ec>
   11f6e:	4bb3      	ldr	r3, [pc, #716]	; (1223c <_dtoa_r+0x33c>)
   11f70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11f72:	6013      	str	r3, [r2, #0]
   11f74:	3b01      	subs	r3, #1
   11f76:	9300      	str	r3, [sp, #0]
   11f78:	9800      	ldr	r0, [sp, #0]
   11f7a:	b00f      	add	sp, #60	; 0x3c
   11f7c:	ecbd 8b02 	vpop	{d8}
   11f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f84:	aa0c      	add	r2, sp, #48	; 0x30
   11f86:	a90d      	add	r1, sp, #52	; 0x34
   11f88:	4620      	mov	r0, r4
   11f8a:	eeb0 0b48 	vmov.f64	d0, d8
   11f8e:	f7fc fa13 	bl	e3b8 <__d2b>
   11f92:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11f96:	4605      	mov	r5, r0
   11f98:	f040 8092 	bne.w	120c0 <_dtoa_r+0x1c0>
   11f9c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   11fa0:	440b      	add	r3, r1
   11fa2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   11fa6:	2a20      	cmp	r2, #32
   11fa8:	f340 82fa 	ble.w	125a0 <_dtoa_r+0x6a0>
   11fac:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   11fb0:	fa08 f802 	lsl.w	r8, r8, r2
   11fb4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   11fb8:	40d6      	lsrs	r6, r2
   11fba:	ea48 0206 	orr.w	r2, r8, r6
   11fbe:	ee07 2a10 	vmov	s14, r2
   11fc2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   11fc6:	1e58      	subs	r0, r3, #1
   11fc8:	ee17 6a90 	vmov	r6, s15
   11fcc:	ec53 2b17 	vmov	r2, r3, d7
   11fd0:	f04f 0a01 	mov.w	sl, #1
   11fd4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11fd8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 12220 <_dtoa_r+0x320>
   11fdc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 12228 <_dtoa_r+0x328>
   11fe0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 12230 <_dtoa_r+0x330>
   11fe4:	ee06 0a90 	vmov	s13, r0
   11fe8:	ec43 2b12 	vmov	d2, r2, r3
   11fec:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   11ff0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11ff4:	ee32 6b46 	vsub.f64	d6, d2, d6
   11ff8:	eea6 7b03 	vfma.f64	d7, d6, d3
   11ffc:	eea4 7b05 	vfma.f64	d7, d4, d5
   12000:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12004:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   12008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1200c:	ee16 7a90 	vmov	r7, s13
   12010:	d508      	bpl.n	12024 <_dtoa_r+0x124>
   12012:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   12016:	eeb4 6b47 	vcmp.f64	d6, d7
   1201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1201e:	bf18      	it	ne
   12020:	f107 37ff 	addne.w	r7, r7, #4294967295
   12024:	2f16      	cmp	r7, #22
   12026:	f200 8145 	bhi.w	122b4 <_dtoa_r+0x3b4>
   1202a:	4b85      	ldr	r3, [pc, #532]	; (12240 <_dtoa_r+0x340>)
   1202c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   12030:	ed93 7b00 	vldr	d7, [r3]
   12034:	eeb4 8bc7 	vcmpe.f64	d8, d7
   12038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1203c:	d557      	bpl.n	120ee <_dtoa_r+0x1ee>
   1203e:	1a09      	subs	r1, r1, r0
   12040:	2300      	movs	r3, #0
   12042:	f1b1 0801 	subs.w	r8, r1, #1
   12046:	f107 37ff 	add.w	r7, r7, #4294967295
   1204a:	930a      	str	r3, [sp, #40]	; 0x28
   1204c:	f100 8139 	bmi.w	122c2 <_dtoa_r+0x3c2>
   12050:	2300      	movs	r3, #0
   12052:	9306      	str	r3, [sp, #24]
   12054:	2f00      	cmp	r7, #0
   12056:	da52      	bge.n	120fe <_dtoa_r+0x1fe>
   12058:	9b06      	ldr	r3, [sp, #24]
   1205a:	9704      	str	r7, [sp, #16]
   1205c:	1bdb      	subs	r3, r3, r7
   1205e:	9306      	str	r3, [sp, #24]
   12060:	427b      	negs	r3, r7
   12062:	9308      	str	r3, [sp, #32]
   12064:	9b01      	ldr	r3, [sp, #4]
   12066:	2b09      	cmp	r3, #9
   12068:	f04f 0700 	mov.w	r7, #0
   1206c:	d84e      	bhi.n	1210c <_dtoa_r+0x20c>
   1206e:	2b05      	cmp	r3, #5
   12070:	f340 829d 	ble.w	125ae <_dtoa_r+0x6ae>
   12074:	3b04      	subs	r3, #4
   12076:	9301      	str	r3, [sp, #4]
   12078:	2600      	movs	r6, #0
   1207a:	9b01      	ldr	r3, [sp, #4]
   1207c:	1e9a      	subs	r2, r3, #2
   1207e:	2a03      	cmp	r2, #3
   12080:	f200 8125 	bhi.w	122ce <_dtoa_r+0x3ce>
   12084:	e8df f012 	tbh	[pc, r2, lsl #1]
   12088:	03a703aa 	.word	0x03a703aa
   1208c:	037e039d 	.word	0x037e039d
   12090:	9a05      	ldr	r2, [sp, #20]
   12092:	f3c8 0813 	ubfx	r8, r8, #0, #20
   12096:	f242 730f 	movw	r3, #9999	; 0x270f
   1209a:	ea58 0806 	orrs.w	r8, r8, r6
   1209e:	6013      	str	r3, [r2, #0]
   120a0:	d11e      	bne.n	120e0 <_dtoa_r+0x1e0>
   120a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   120a4:	2b00      	cmp	r3, #0
   120a6:	f000 8591 	beq.w	12bcc <_dtoa_r+0xccc>
   120aa:	4b66      	ldr	r3, [pc, #408]	; (12244 <_dtoa_r+0x344>)
   120ac:	9300      	str	r3, [sp, #0]
   120ae:	3308      	adds	r3, #8
   120b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   120b2:	9800      	ldr	r0, [sp, #0]
   120b4:	6013      	str	r3, [r2, #0]
   120b6:	b00f      	add	sp, #60	; 0x3c
   120b8:	ecbd 8b02 	vpop	{d8}
   120bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c0:	ee18 6a90 	vmov	r6, s17
   120c4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   120c8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   120cc:	ec53 2b18 	vmov	r2, r3, d8
   120d0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   120d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   120d6:	f04f 0a00 	mov.w	sl, #0
   120da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   120de:	e77b      	b.n	11fd8 <_dtoa_r+0xd8>
   120e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   120e2:	2b00      	cmp	r3, #0
   120e4:	f040 833b 	bne.w	1275e <_dtoa_r+0x85e>
   120e8:	4b57      	ldr	r3, [pc, #348]	; (12248 <_dtoa_r+0x348>)
   120ea:	9300      	str	r3, [sp, #0]
   120ec:	e744      	b.n	11f78 <_dtoa_r+0x78>
   120ee:	1a09      	subs	r1, r1, r0
   120f0:	2300      	movs	r3, #0
   120f2:	f1b1 0801 	subs.w	r8, r1, #1
   120f6:	930a      	str	r3, [sp, #40]	; 0x28
   120f8:	f100 80e3 	bmi.w	122c2 <_dtoa_r+0x3c2>
   120fc:	9306      	str	r3, [sp, #24]
   120fe:	2300      	movs	r3, #0
   12100:	9308      	str	r3, [sp, #32]
   12102:	9b01      	ldr	r3, [sp, #4]
   12104:	9704      	str	r7, [sp, #16]
   12106:	2b09      	cmp	r3, #9
   12108:	44b8      	add	r8, r7
   1210a:	d9b0      	bls.n	1206e <_dtoa_r+0x16e>
   1210c:	2300      	movs	r3, #0
   1210e:	2601      	movs	r6, #1
   12110:	9301      	str	r3, [sp, #4]
   12112:	9607      	str	r6, [sp, #28]
   12114:	f04f 39ff 	mov.w	r9, #4294967295
   12118:	469b      	mov	fp, r3
   1211a:	2100      	movs	r1, #0
   1211c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1211e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   12122:	4620      	mov	r0, r4
   12124:	f7fb fd0a 	bl	db3c <_Balloc>
   12128:	9000      	str	r0, [sp, #0]
   1212a:	2800      	cmp	r0, #0
   1212c:	f000 8540 	beq.w	12bb0 <_dtoa_r+0xcb0>
   12130:	9b00      	ldr	r3, [sp, #0]
   12132:	63a3      	str	r3, [r4, #56]	; 0x38
   12134:	f1b9 0f0e 	cmp.w	r9, #14
   12138:	f200 80dc 	bhi.w	122f4 <_dtoa_r+0x3f4>
   1213c:	2e00      	cmp	r6, #0
   1213e:	f000 80d9 	beq.w	122f4 <_dtoa_r+0x3f4>
   12142:	9b04      	ldr	r3, [sp, #16]
   12144:	2b00      	cmp	r3, #0
   12146:	f340 83de 	ble.w	12906 <_dtoa_r+0xa06>
   1214a:	4a3d      	ldr	r2, [pc, #244]	; (12240 <_dtoa_r+0x340>)
   1214c:	f003 010f 	and.w	r1, r3, #15
   12150:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   12154:	ed92 7b00 	vldr	d7, [r2]
   12158:	111a      	asrs	r2, r3, #4
   1215a:	05db      	lsls	r3, r3, #23
   1215c:	f140 8382 	bpl.w	12864 <_dtoa_r+0x964>
   12160:	493a      	ldr	r1, [pc, #232]	; (1224c <_dtoa_r+0x34c>)
   12162:	ed91 6b08 	vldr	d6, [r1, #32]
   12166:	f002 020f 	and.w	r2, r2, #15
   1216a:	2003      	movs	r0, #3
   1216c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   12170:	b15a      	cbz	r2, 1218a <_dtoa_r+0x28a>
   12172:	4936      	ldr	r1, [pc, #216]	; (1224c <_dtoa_r+0x34c>)
   12174:	07d6      	lsls	r6, r2, #31
   12176:	d504      	bpl.n	12182 <_dtoa_r+0x282>
   12178:	ed91 6b00 	vldr	d6, [r1]
   1217c:	3001      	adds	r0, #1
   1217e:	ee27 7b06 	vmul.f64	d7, d7, d6
   12182:	1052      	asrs	r2, r2, #1
   12184:	f101 0108 	add.w	r1, r1, #8
   12188:	d1f4      	bne.n	12174 <_dtoa_r+0x274>
   1218a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1218e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12190:	b13b      	cbz	r3, 121a2 <_dtoa_r+0x2a2>
   12192:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   12196:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1219e:	f100 84ae 	bmi.w	12afe <_dtoa_r+0xbfe>
   121a2:	ee07 0a90 	vmov	s15, r0
   121a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   121aa:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   121ae:	eea5 7b06 	vfma.f64	d7, d5, d6
   121b2:	ee17 2a90 	vmov	r2, s15
   121b6:	ec51 0b17 	vmov	r0, r1, d7
   121ba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   121be:	f1b9 0f00 	cmp.w	r9, #0
   121c2:	f000 8388 	beq.w	128d6 <_dtoa_r+0x9d6>
   121c6:	9e04      	ldr	r6, [sp, #16]
   121c8:	464a      	mov	r2, r9
   121ca:	9b07      	ldr	r3, [sp, #28]
   121cc:	2b00      	cmp	r3, #0
   121ce:	f000 8447 	beq.w	12a60 <_dtoa_r+0xb60>
   121d2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   121d6:	4b1a      	ldr	r3, [pc, #104]	; (12240 <_dtoa_r+0x340>)
   121d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   121dc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   121e0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   121e4:	ee36 7b47 	vsub.f64	d7, d6, d7
   121e8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   121ec:	ee83 5b06 	vdiv.f64	d5, d3, d6
   121f0:	ec41 0b16 	vmov	d6, r0, r1
   121f4:	ee14 0a90 	vmov	r0, s9
   121f8:	ee35 5b46 	vsub.f64	d5, d5, d6
   121fc:	9900      	ldr	r1, [sp, #0]
   121fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12202:	3030      	adds	r0, #48	; 0x30
   12204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12208:	f801 0b01 	strb.w	r0, [r1], #1
   1220c:	f300 84ac 	bgt.w	12b68 <_dtoa_r+0xc68>
   12210:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   12214:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12218:	f04f 0c00 	mov.w	ip, #0
   1221c:	e031      	b.n	12282 <_dtoa_r+0x382>
   1221e:	bf00      	nop
   12220:	636f4361 	.word	0x636f4361
   12224:	3fd287a7 	.word	0x3fd287a7
   12228:	8b60c8b3 	.word	0x8b60c8b3
   1222c:	3fc68a28 	.word	0x3fc68a28
   12230:	509f79fb 	.word	0x509f79fb
   12234:	3fd34413 	.word	0x3fd34413
   12238:	7ff00000 	.word	0x7ff00000
   1223c:	20000f25 	.word	0x20000f25
   12240:	200003a8 	.word	0x200003a8
   12244:	20000e5c 	.word	0x20000e5c
   12248:	20000e68 	.word	0x20000e68
   1224c:	20000380 	.word	0x20000380
   12250:	f10c 0c01 	add.w	ip, ip, #1
   12254:	4594      	cmp	ip, r2
   12256:	da4d      	bge.n	122f4 <_dtoa_r+0x3f4>
   12258:	ee27 7b04 	vmul.f64	d7, d7, d4
   1225c:	ee25 5b04 	vmul.f64	d5, d5, d4
   12260:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12264:	ee16 3a90 	vmov	r3, s13
   12268:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1226c:	3330      	adds	r3, #48	; 0x30
   1226e:	ee37 7b43 	vsub.f64	d7, d7, d3
   12272:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1227a:	f801 3b01 	strb.w	r3, [r1], #1
   1227e:	f100 8473 	bmi.w	12b68 <_dtoa_r+0xc68>
   12282:	ee32 6b47 	vsub.f64	d6, d2, d7
   12286:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1228e:	d5df      	bpl.n	12250 <_dtoa_r+0x350>
   12290:	9a00      	ldr	r2, [sp, #0]
   12292:	9604      	str	r6, [sp, #16]
   12294:	e002      	b.n	1229c <_dtoa_r+0x39c>
   12296:	428a      	cmp	r2, r1
   12298:	f000 8450 	beq.w	12b3c <_dtoa_r+0xc3c>
   1229c:	4689      	mov	r9, r1
   1229e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   122a2:	2b39      	cmp	r3, #57	; 0x39
   122a4:	d0f7      	beq.n	12296 <_dtoa_r+0x396>
   122a6:	3301      	adds	r3, #1
   122a8:	b2db      	uxtb	r3, r3
   122aa:	700b      	strb	r3, [r1, #0]
   122ac:	9b04      	ldr	r3, [sp, #16]
   122ae:	3301      	adds	r3, #1
   122b0:	9304      	str	r3, [sp, #16]
   122b2:	e155      	b.n	12560 <_dtoa_r+0x660>
   122b4:	1a09      	subs	r1, r1, r0
   122b6:	2301      	movs	r3, #1
   122b8:	f1b1 0801 	subs.w	r8, r1, #1
   122bc:	930a      	str	r3, [sp, #40]	; 0x28
   122be:	f57f aec7 	bpl.w	12050 <_dtoa_r+0x150>
   122c2:	f1c1 0301 	rsb	r3, r1, #1
   122c6:	9306      	str	r3, [sp, #24]
   122c8:	f04f 0800 	mov.w	r8, #0
   122cc:	e6c2      	b.n	12054 <_dtoa_r+0x154>
   122ce:	2600      	movs	r6, #0
   122d0:	63e6      	str	r6, [r4, #60]	; 0x3c
   122d2:	4631      	mov	r1, r6
   122d4:	4620      	mov	r0, r4
   122d6:	f7fb fc31 	bl	db3c <_Balloc>
   122da:	9000      	str	r0, [sp, #0]
   122dc:	2800      	cmp	r0, #0
   122de:	f000 8467 	beq.w	12bb0 <_dtoa_r+0xcb0>
   122e2:	9b00      	ldr	r3, [sp, #0]
   122e4:	63a3      	str	r3, [r4, #56]	; 0x38
   122e6:	f04f 33ff 	mov.w	r3, #4294967295
   122ea:	930b      	str	r3, [sp, #44]	; 0x2c
   122ec:	4699      	mov	r9, r3
   122ee:	2301      	movs	r3, #1
   122f0:	46b3      	mov	fp, r6
   122f2:	9307      	str	r3, [sp, #28]
   122f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   122f6:	2a00      	cmp	r2, #0
   122f8:	db55      	blt.n	123a6 <_dtoa_r+0x4a6>
   122fa:	9904      	ldr	r1, [sp, #16]
   122fc:	290e      	cmp	r1, #14
   122fe:	dc52      	bgt.n	123a6 <_dtoa_r+0x4a6>
   12300:	4bb7      	ldr	r3, [pc, #732]	; (125e0 <_dtoa_r+0x6e0>)
   12302:	f1bb 0f00 	cmp.w	fp, #0
   12306:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1230a:	ed93 6b00 	vldr	d6, [r3]
   1230e:	da15      	bge.n	1233c <_dtoa_r+0x43c>
   12310:	f1b9 0f00 	cmp.w	r9, #0
   12314:	dc12      	bgt.n	1233c <_dtoa_r+0x43c>
   12316:	f040 82f2 	bne.w	128fe <_dtoa_r+0x9fe>
   1231a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1231e:	ee26 7b07 	vmul.f64	d7, d6, d7
   12322:	eeb4 8bc7 	vcmpe.f64	d8, d7
   12326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1232a:	46ca      	mov	sl, r9
   1232c:	464e      	mov	r6, r9
   1232e:	f200 826d 	bhi.w	1280c <_dtoa_r+0x90c>
   12332:	f8dd 8000 	ldr.w	r8, [sp]
   12336:	ea6f 0b0b 	mvn.w	fp, fp
   1233a:	e270      	b.n	1281e <_dtoa_r+0x91e>
   1233c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   12340:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   12344:	9900      	ldr	r1, [sp, #0]
   12346:	ee17 3a10 	vmov	r3, s14
   1234a:	f1b9 0f01 	cmp.w	r9, #1
   1234e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   12352:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   12356:	f801 3b01 	strb.w	r3, [r1], #1
   1235a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1235e:	f000 8334 	beq.w	129ca <_dtoa_r+0xaca>
   12362:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12366:	2301      	movs	r3, #1
   12368:	e011      	b.n	1238e <_dtoa_r+0x48e>
   1236a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1236e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   12372:	3301      	adds	r3, #1
   12374:	ee17 2a10 	vmov	r2, s14
   12378:	454b      	cmp	r3, r9
   1237a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1237e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   12382:	f801 2b01 	strb.w	r2, [r1], #1
   12386:	eea5 8b46 	vfms.f64	d8, d5, d6
   1238a:	f000 831e 	beq.w	129ca <_dtoa_r+0xaca>
   1238e:	ee28 8b04 	vmul.f64	d8, d8, d4
   12392:	eeb5 8b40 	vcmp.f64	d8, #0.0
   12396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1239a:	d1e6      	bne.n	1236a <_dtoa_r+0x46a>
   1239c:	9b04      	ldr	r3, [sp, #16]
   1239e:	3301      	adds	r3, #1
   123a0:	9304      	str	r3, [sp, #16]
   123a2:	4689      	mov	r9, r1
   123a4:	e0dc      	b.n	12560 <_dtoa_r+0x660>
   123a6:	9b07      	ldr	r3, [sp, #28]
   123a8:	b343      	cbz	r3, 123fc <_dtoa_r+0x4fc>
   123aa:	9b01      	ldr	r3, [sp, #4]
   123ac:	2b01      	cmp	r3, #1
   123ae:	f340 8276 	ble.w	1289e <_dtoa_r+0x99e>
   123b2:	9b08      	ldr	r3, [sp, #32]
   123b4:	f109 3aff 	add.w	sl, r9, #4294967295
   123b8:	4553      	cmp	r3, sl
   123ba:	f280 823f 	bge.w	1283c <_dtoa_r+0x93c>
   123be:	9b08      	ldr	r3, [sp, #32]
   123c0:	f8cd a020 	str.w	sl, [sp, #32]
   123c4:	ebaa 0203 	sub.w	r2, sl, r3
   123c8:	4417      	add	r7, r2
   123ca:	f04f 0a00 	mov.w	sl, #0
   123ce:	f1b9 0f00 	cmp.w	r9, #0
   123d2:	f2c0 8325 	blt.w	12a20 <_dtoa_r+0xb20>
   123d6:	9b06      	ldr	r3, [sp, #24]
   123d8:	9309      	str	r3, [sp, #36]	; 0x24
   123da:	444b      	add	r3, r9
   123dc:	44c8      	add	r8, r9
   123de:	9306      	str	r3, [sp, #24]
   123e0:	2101      	movs	r1, #1
   123e2:	4620      	mov	r0, r4
   123e4:	f7fb fcd4 	bl	dd90 <__i2b>
   123e8:	4606      	mov	r6, r0
   123ea:	e00c      	b.n	12406 <_dtoa_r+0x506>
   123ec:	4b7d      	ldr	r3, [pc, #500]	; (125e4 <_dtoa_r+0x6e4>)
   123ee:	9300      	str	r3, [sp, #0]
   123f0:	9800      	ldr	r0, [sp, #0]
   123f2:	b00f      	add	sp, #60	; 0x3c
   123f4:	ecbd 8b02 	vpop	{d8}
   123f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123fc:	9b06      	ldr	r3, [sp, #24]
   123fe:	f8dd a020 	ldr.w	sl, [sp, #32]
   12402:	9e07      	ldr	r6, [sp, #28]
   12404:	9309      	str	r3, [sp, #36]	; 0x24
   12406:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12408:	b16b      	cbz	r3, 12426 <_dtoa_r+0x526>
   1240a:	f1b8 0f00 	cmp.w	r8, #0
   1240e:	dd0a      	ble.n	12426 <_dtoa_r+0x526>
   12410:	4543      	cmp	r3, r8
   12412:	9906      	ldr	r1, [sp, #24]
   12414:	461a      	mov	r2, r3
   12416:	bfa8      	it	ge
   12418:	4642      	movge	r2, r8
   1241a:	1a89      	subs	r1, r1, r2
   1241c:	1a9b      	subs	r3, r3, r2
   1241e:	9106      	str	r1, [sp, #24]
   12420:	9309      	str	r3, [sp, #36]	; 0x24
   12422:	eba8 0802 	sub.w	r8, r8, r2
   12426:	9b08      	ldr	r3, [sp, #32]
   12428:	b163      	cbz	r3, 12444 <_dtoa_r+0x544>
   1242a:	9b07      	ldr	r3, [sp, #28]
   1242c:	2b00      	cmp	r3, #0
   1242e:	f000 82a7 	beq.w	12980 <_dtoa_r+0xa80>
   12432:	f1ba 0f00 	cmp.w	sl, #0
   12436:	f300 8204 	bgt.w	12842 <_dtoa_r+0x942>
   1243a:	9b08      	ldr	r3, [sp, #32]
   1243c:	ebb3 020a 	subs.w	r2, r3, sl
   12440:	f040 82ff 	bne.w	12a42 <_dtoa_r+0xb42>
   12444:	2101      	movs	r1, #1
   12446:	4620      	mov	r0, r4
   12448:	f7fb fca2 	bl	dd90 <__i2b>
   1244c:	2f00      	cmp	r7, #0
   1244e:	4682      	mov	sl, r0
   12450:	f300 80af 	bgt.w	125b2 <_dtoa_r+0x6b2>
   12454:	9b01      	ldr	r3, [sp, #4]
   12456:	2b01      	cmp	r3, #1
   12458:	f340 8187 	ble.w	1276a <_dtoa_r+0x86a>
   1245c:	2300      	movs	r3, #0
   1245e:	9308      	str	r3, [sp, #32]
   12460:	2001      	movs	r0, #1
   12462:	2f00      	cmp	r7, #0
   12464:	f040 80b1 	bne.w	125ca <_dtoa_r+0x6ca>
   12468:	4440      	add	r0, r8
   1246a:	f010 001f 	ands.w	r0, r0, #31
   1246e:	f000 817a 	beq.w	12766 <_dtoa_r+0x866>
   12472:	f1c0 0220 	rsb	r2, r0, #32
   12476:	2a04      	cmp	r2, #4
   12478:	f300 8088 	bgt.w	1258c <_dtoa_r+0x68c>
   1247c:	f040 81f6 	bne.w	1286c <_dtoa_r+0x96c>
   12480:	9b06      	ldr	r3, [sp, #24]
   12482:	2b00      	cmp	r3, #0
   12484:	dd05      	ble.n	12492 <_dtoa_r+0x592>
   12486:	4629      	mov	r1, r5
   12488:	461a      	mov	r2, r3
   1248a:	4620      	mov	r0, r4
   1248c:	f7fb fdbc 	bl	e008 <__lshift>
   12490:	4605      	mov	r5, r0
   12492:	f1b8 0f00 	cmp.w	r8, #0
   12496:	dd05      	ble.n	124a4 <_dtoa_r+0x5a4>
   12498:	4651      	mov	r1, sl
   1249a:	4642      	mov	r2, r8
   1249c:	4620      	mov	r0, r4
   1249e:	f7fb fdb3 	bl	e008 <__lshift>
   124a2:	4682      	mov	sl, r0
   124a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124a6:	2b00      	cmp	r3, #0
   124a8:	f040 813f 	bne.w	1272a <_dtoa_r+0x82a>
   124ac:	f1b9 0f00 	cmp.w	r9, #0
   124b0:	f340 8125 	ble.w	126fe <_dtoa_r+0x7fe>
   124b4:	9b07      	ldr	r3, [sp, #28]
   124b6:	2b00      	cmp	r3, #0
   124b8:	f040 80a3 	bne.w	12602 <_dtoa_r+0x702>
   124bc:	9b04      	ldr	r3, [sp, #16]
   124be:	3301      	adds	r3, #1
   124c0:	9304      	str	r3, [sp, #16]
   124c2:	f8dd 8000 	ldr.w	r8, [sp]
   124c6:	2701      	movs	r7, #1
   124c8:	e007      	b.n	124da <_dtoa_r+0x5da>
   124ca:	4629      	mov	r1, r5
   124cc:	2300      	movs	r3, #0
   124ce:	220a      	movs	r2, #10
   124d0:	4620      	mov	r0, r4
   124d2:	f7fb fb63 	bl	db9c <__multadd>
   124d6:	3701      	adds	r7, #1
   124d8:	4605      	mov	r5, r0
   124da:	4651      	mov	r1, sl
   124dc:	4628      	mov	r0, r5
   124de:	f7ff fc7b 	bl	11dd8 <quorem>
   124e2:	45b9      	cmp	r9, r7
   124e4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   124e8:	f808 0b01 	strb.w	r0, [r8], #1
   124ec:	dced      	bgt.n	124ca <_dtoa_r+0x5ca>
   124ee:	f1b9 0f00 	cmp.w	r9, #0
   124f2:	9a00      	ldr	r2, [sp, #0]
   124f4:	bfcc      	ite	gt
   124f6:	46cb      	movgt	fp, r9
   124f8:	f04f 0b01 	movle.w	fp, #1
   124fc:	4603      	mov	r3, r0
   124fe:	4493      	add	fp, r2
   12500:	2700      	movs	r7, #0
   12502:	4629      	mov	r1, r5
   12504:	2201      	movs	r2, #1
   12506:	4620      	mov	r0, r4
   12508:	9301      	str	r3, [sp, #4]
   1250a:	f7fb fd7d 	bl	e008 <__lshift>
   1250e:	4651      	mov	r1, sl
   12510:	4605      	mov	r5, r0
   12512:	f7fb fdf1 	bl	e0f8 <__mcmp>
   12516:	2800      	cmp	r0, #0
   12518:	f340 81af 	ble.w	1287a <_dtoa_r+0x97a>
   1251c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   12520:	9a00      	ldr	r2, [sp, #0]
   12522:	f10b 3bff 	add.w	fp, fp, #4294967295
   12526:	e004      	b.n	12532 <_dtoa_r+0x632>
   12528:	455a      	cmp	r2, fp
   1252a:	f000 81b1 	beq.w	12890 <_dtoa_r+0x990>
   1252e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   12532:	2b39      	cmp	r3, #57	; 0x39
   12534:	f10b 0901 	add.w	r9, fp, #1
   12538:	d0f6      	beq.n	12528 <_dtoa_r+0x628>
   1253a:	3301      	adds	r3, #1
   1253c:	f88b 3000 	strb.w	r3, [fp]
   12540:	4651      	mov	r1, sl
   12542:	4620      	mov	r0, r4
   12544:	f7fb fb20 	bl	db88 <_Bfree>
   12548:	b156      	cbz	r6, 12560 <_dtoa_r+0x660>
   1254a:	b12f      	cbz	r7, 12558 <_dtoa_r+0x658>
   1254c:	42b7      	cmp	r7, r6
   1254e:	d003      	beq.n	12558 <_dtoa_r+0x658>
   12550:	4639      	mov	r1, r7
   12552:	4620      	mov	r0, r4
   12554:	f7fb fb18 	bl	db88 <_Bfree>
   12558:	4631      	mov	r1, r6
   1255a:	4620      	mov	r0, r4
   1255c:	f7fb fb14 	bl	db88 <_Bfree>
   12560:	4629      	mov	r1, r5
   12562:	4620      	mov	r0, r4
   12564:	f7fb fb10 	bl	db88 <_Bfree>
   12568:	2300      	movs	r3, #0
   1256a:	f889 3000 	strb.w	r3, [r9]
   1256e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12572:	601a      	str	r2, [r3, #0]
   12574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12576:	2b00      	cmp	r3, #0
   12578:	f43f acfe 	beq.w	11f78 <_dtoa_r+0x78>
   1257c:	9800      	ldr	r0, [sp, #0]
   1257e:	f8c3 9000 	str.w	r9, [r3]
   12582:	b00f      	add	sp, #60	; 0x3c
   12584:	ecbd 8b02 	vpop	{d8}
   12588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1258c:	f1c0 001c 	rsb	r0, r0, #28
   12590:	9b06      	ldr	r3, [sp, #24]
   12592:	4403      	add	r3, r0
   12594:	9306      	str	r3, [sp, #24]
   12596:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12598:	4403      	add	r3, r0
   1259a:	9309      	str	r3, [sp, #36]	; 0x24
   1259c:	4480      	add	r8, r0
   1259e:	e76f      	b.n	12480 <_dtoa_r+0x580>
   125a0:	f1c2 0220 	rsb	r2, r2, #32
   125a4:	fa06 f202 	lsl.w	r2, r6, r2
   125a8:	ee07 2a10 	vmov	s14, r2
   125ac:	e509      	b.n	11fc2 <_dtoa_r+0xc2>
   125ae:	2601      	movs	r6, #1
   125b0:	e563      	b.n	1207a <_dtoa_r+0x17a>
   125b2:	4601      	mov	r1, r0
   125b4:	463a      	mov	r2, r7
   125b6:	4620      	mov	r0, r4
   125b8:	f7fb fcc6 	bl	df48 <__pow5mult>
   125bc:	9b01      	ldr	r3, [sp, #4]
   125be:	2b01      	cmp	r3, #1
   125c0:	4682      	mov	sl, r0
   125c2:	f340 81c5 	ble.w	12950 <_dtoa_r+0xa50>
   125c6:	2300      	movs	r3, #0
   125c8:	9308      	str	r3, [sp, #32]
   125ca:	f8da 2010 	ldr.w	r2, [sl, #16]
   125ce:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   125d2:	6910      	ldr	r0, [r2, #16]
   125d4:	f7fb fb8c 	bl	dcf0 <__hi0bits>
   125d8:	f1c0 0020 	rsb	r0, r0, #32
   125dc:	e744      	b.n	12468 <_dtoa_r+0x568>
   125de:	bf00      	nop
   125e0:	200003a8 	.word	0x200003a8
   125e4:	20000f24 	.word	0x20000f24
   125e8:	4631      	mov	r1, r6
   125ea:	2300      	movs	r3, #0
   125ec:	220a      	movs	r2, #10
   125ee:	4620      	mov	r0, r4
   125f0:	f7fb fad4 	bl	db9c <__multadd>
   125f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   125f6:	2b00      	cmp	r3, #0
   125f8:	4606      	mov	r6, r0
   125fa:	f340 82ce 	ble.w	12b9a <_dtoa_r+0xc9a>
   125fe:	9704      	str	r7, [sp, #16]
   12600:	4699      	mov	r9, r3
   12602:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12604:	2b00      	cmp	r3, #0
   12606:	dd05      	ble.n	12614 <_dtoa_r+0x714>
   12608:	4631      	mov	r1, r6
   1260a:	461a      	mov	r2, r3
   1260c:	4620      	mov	r0, r4
   1260e:	f7fb fcfb 	bl	e008 <__lshift>
   12612:	4606      	mov	r6, r0
   12614:	9b08      	ldr	r3, [sp, #32]
   12616:	2b00      	cmp	r3, #0
   12618:	f040 81eb 	bne.w	129f2 <_dtoa_r+0xaf2>
   1261c:	46b0      	mov	r8, r6
   1261e:	9b02      	ldr	r3, [sp, #8]
   12620:	9f00      	ldr	r7, [sp, #0]
   12622:	f003 0201 	and.w	r2, r3, #1
   12626:	1e7b      	subs	r3, r7, #1
   12628:	444b      	add	r3, r9
   1262a:	9308      	str	r3, [sp, #32]
   1262c:	9b01      	ldr	r3, [sp, #4]
   1262e:	920a      	str	r2, [sp, #40]	; 0x28
   12630:	4313      	orrs	r3, r2
   12632:	9309      	str	r3, [sp, #36]	; 0x24
   12634:	4651      	mov	r1, sl
   12636:	4628      	mov	r0, r5
   12638:	f7ff fbce 	bl	11dd8 <quorem>
   1263c:	4631      	mov	r1, r6
   1263e:	4683      	mov	fp, r0
   12640:	4628      	mov	r0, r5
   12642:	f7fb fd59 	bl	e0f8 <__mcmp>
   12646:	4642      	mov	r2, r8
   12648:	4651      	mov	r1, sl
   1264a:	4681      	mov	r9, r0
   1264c:	4620      	mov	r0, r4
   1264e:	f7fb fd75 	bl	e13c <__mdiff>
   12652:	68c2      	ldr	r2, [r0, #12]
   12654:	4601      	mov	r1, r0
   12656:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1265a:	2a00      	cmp	r2, #0
   1265c:	d142      	bne.n	126e4 <_dtoa_r+0x7e4>
   1265e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   12662:	4628      	mov	r0, r5
   12664:	f7fb fd48 	bl	e0f8 <__mcmp>
   12668:	9906      	ldr	r1, [sp, #24]
   1266a:	9002      	str	r0, [sp, #8]
   1266c:	4620      	mov	r0, r4
   1266e:	f7fb fa8b 	bl	db88 <_Bfree>
   12672:	9a02      	ldr	r2, [sp, #8]
   12674:	9b07      	ldr	r3, [sp, #28]
   12676:	b91a      	cbnz	r2, 12680 <_dtoa_r+0x780>
   12678:	9909      	ldr	r1, [sp, #36]	; 0x24
   1267a:	2900      	cmp	r1, #0
   1267c:	f000 827e 	beq.w	12b7c <_dtoa_r+0xc7c>
   12680:	f1b9 0f00 	cmp.w	r9, #0
   12684:	f2c0 8183 	blt.w	1298e <_dtoa_r+0xa8e>
   12688:	9901      	ldr	r1, [sp, #4]
   1268a:	ea49 0901 	orr.w	r9, r9, r1
   1268e:	990a      	ldr	r1, [sp, #40]	; 0x28
   12690:	ea51 0909 	orrs.w	r9, r1, r9
   12694:	f000 817b 	beq.w	1298e <_dtoa_r+0xa8e>
   12698:	2a00      	cmp	r2, #0
   1269a:	f300 81c6 	bgt.w	12a2a <_dtoa_r+0xb2a>
   1269e:	9a08      	ldr	r2, [sp, #32]
   126a0:	703b      	strb	r3, [r7, #0]
   126a2:	f107 0901 	add.w	r9, r7, #1
   126a6:	4297      	cmp	r7, r2
   126a8:	46cb      	mov	fp, r9
   126aa:	f000 81c4 	beq.w	12a36 <_dtoa_r+0xb36>
   126ae:	4629      	mov	r1, r5
   126b0:	2300      	movs	r3, #0
   126b2:	220a      	movs	r2, #10
   126b4:	4620      	mov	r0, r4
   126b6:	f7fb fa71 	bl	db9c <__multadd>
   126ba:	4546      	cmp	r6, r8
   126bc:	4605      	mov	r5, r0
   126be:	4631      	mov	r1, r6
   126c0:	f04f 0300 	mov.w	r3, #0
   126c4:	f04f 020a 	mov.w	r2, #10
   126c8:	4620      	mov	r0, r4
   126ca:	d012      	beq.n	126f2 <_dtoa_r+0x7f2>
   126cc:	f7fb fa66 	bl	db9c <__multadd>
   126d0:	4641      	mov	r1, r8
   126d2:	4606      	mov	r6, r0
   126d4:	2300      	movs	r3, #0
   126d6:	220a      	movs	r2, #10
   126d8:	4620      	mov	r0, r4
   126da:	f7fb fa5f 	bl	db9c <__multadd>
   126de:	464f      	mov	r7, r9
   126e0:	4680      	mov	r8, r0
   126e2:	e7a7      	b.n	12634 <_dtoa_r+0x734>
   126e4:	4620      	mov	r0, r4
   126e6:	9302      	str	r3, [sp, #8]
   126e8:	f7fb fa4e 	bl	db88 <_Bfree>
   126ec:	9b02      	ldr	r3, [sp, #8]
   126ee:	2201      	movs	r2, #1
   126f0:	e7c6      	b.n	12680 <_dtoa_r+0x780>
   126f2:	f7fb fa53 	bl	db9c <__multadd>
   126f6:	464f      	mov	r7, r9
   126f8:	4606      	mov	r6, r0
   126fa:	4680      	mov	r8, r0
   126fc:	e79a      	b.n	12634 <_dtoa_r+0x734>
   126fe:	9b01      	ldr	r3, [sp, #4]
   12700:	2b02      	cmp	r3, #2
   12702:	dc71      	bgt.n	127e8 <_dtoa_r+0x8e8>
   12704:	9b07      	ldr	r3, [sp, #28]
   12706:	2b00      	cmp	r3, #0
   12708:	f47f af7b 	bne.w	12602 <_dtoa_r+0x702>
   1270c:	9b04      	ldr	r3, [sp, #16]
   1270e:	4651      	mov	r1, sl
   12710:	3301      	adds	r3, #1
   12712:	4628      	mov	r0, r5
   12714:	9304      	str	r3, [sp, #16]
   12716:	f7ff fb5f 	bl	11dd8 <quorem>
   1271a:	f8dd b000 	ldr.w	fp, [sp]
   1271e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   12722:	f80b 3b01 	strb.w	r3, [fp], #1
   12726:	2700      	movs	r7, #0
   12728:	e6eb      	b.n	12502 <_dtoa_r+0x602>
   1272a:	4651      	mov	r1, sl
   1272c:	4628      	mov	r0, r5
   1272e:	f7fb fce3 	bl	e0f8 <__mcmp>
   12732:	2800      	cmp	r0, #0
   12734:	f6bf aeba 	bge.w	124ac <_dtoa_r+0x5ac>
   12738:	4629      	mov	r1, r5
   1273a:	2300      	movs	r3, #0
   1273c:	220a      	movs	r2, #10
   1273e:	4620      	mov	r0, r4
   12740:	f7fb fa2c 	bl	db9c <__multadd>
   12744:	9b04      	ldr	r3, [sp, #16]
   12746:	1e5f      	subs	r7, r3, #1
   12748:	9b07      	ldr	r3, [sp, #28]
   1274a:	4605      	mov	r5, r0
   1274c:	2b00      	cmp	r3, #0
   1274e:	f47f af4b 	bne.w	125e8 <_dtoa_r+0x6e8>
   12752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12754:	2b00      	cmp	r3, #0
   12756:	f340 8218 	ble.w	12b8a <_dtoa_r+0xc8a>
   1275a:	4699      	mov	r9, r3
   1275c:	e6b1      	b.n	124c2 <_dtoa_r+0x5c2>
   1275e:	4bbc      	ldr	r3, [pc, #752]	; (12a50 <_dtoa_r+0xb50>)
   12760:	9300      	str	r3, [sp, #0]
   12762:	3303      	adds	r3, #3
   12764:	e4a4      	b.n	120b0 <_dtoa_r+0x1b0>
   12766:	201c      	movs	r0, #28
   12768:	e712      	b.n	12590 <_dtoa_r+0x690>
   1276a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1276e:	2800      	cmp	r0, #0
   12770:	f47f ae74 	bne.w	1245c <_dtoa_r+0x55c>
   12774:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12778:	2a00      	cmp	r2, #0
   1277a:	f000 80f4 	beq.w	12966 <_dtoa_r+0xa66>
   1277e:	9b02      	ldr	r3, [sp, #8]
   12780:	9308      	str	r3, [sp, #32]
   12782:	e66d      	b.n	12460 <_dtoa_r+0x560>
   12784:	2301      	movs	r3, #1
   12786:	9307      	str	r3, [sp, #28]
   12788:	9b04      	ldr	r3, [sp, #16]
   1278a:	445b      	add	r3, fp
   1278c:	f103 0901 	add.w	r9, r3, #1
   12790:	f1b9 0f01 	cmp.w	r9, #1
   12794:	46cc      	mov	ip, r9
   12796:	930b      	str	r3, [sp, #44]	; 0x2c
   12798:	bfb8      	it	lt
   1279a:	f04f 0c01 	movlt.w	ip, #1
   1279e:	2100      	movs	r1, #0
   127a0:	f1bc 0f17 	cmp.w	ip, #23
   127a4:	63e1      	str	r1, [r4, #60]	; 0x3c
   127a6:	f77f acbc 	ble.w	12122 <_dtoa_r+0x222>
   127aa:	2001      	movs	r0, #1
   127ac:	2204      	movs	r2, #4
   127ae:	0052      	lsls	r2, r2, #1
   127b0:	f102 0314 	add.w	r3, r2, #20
   127b4:	4563      	cmp	r3, ip
   127b6:	4601      	mov	r1, r0
   127b8:	f100 0001 	add.w	r0, r0, #1
   127bc:	d9f7      	bls.n	127ae <_dtoa_r+0x8ae>
   127be:	63e1      	str	r1, [r4, #60]	; 0x3c
   127c0:	e4af      	b.n	12122 <_dtoa_r+0x222>
   127c2:	2301      	movs	r3, #1
   127c4:	9307      	str	r3, [sp, #28]
   127c6:	f1bb 0f00 	cmp.w	fp, #0
   127ca:	dd52      	ble.n	12872 <_dtoa_r+0x972>
   127cc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   127d0:	46d9      	mov	r9, fp
   127d2:	46dc      	mov	ip, fp
   127d4:	e7e3      	b.n	1279e <_dtoa_r+0x89e>
   127d6:	2300      	movs	r3, #0
   127d8:	9307      	str	r3, [sp, #28]
   127da:	e7d5      	b.n	12788 <_dtoa_r+0x888>
   127dc:	2300      	movs	r3, #0
   127de:	9307      	str	r3, [sp, #28]
   127e0:	e7f1      	b.n	127c6 <_dtoa_r+0x8c6>
   127e2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   127e6:	9704      	str	r7, [sp, #16]
   127e8:	f1b9 0f00 	cmp.w	r9, #0
   127ec:	f47f ada1 	bne.w	12332 <_dtoa_r+0x432>
   127f0:	4651      	mov	r1, sl
   127f2:	464b      	mov	r3, r9
   127f4:	2205      	movs	r2, #5
   127f6:	4620      	mov	r0, r4
   127f8:	f7fb f9d0 	bl	db9c <__multadd>
   127fc:	4601      	mov	r1, r0
   127fe:	4682      	mov	sl, r0
   12800:	4628      	mov	r0, r5
   12802:	f7fb fc79 	bl	e0f8 <__mcmp>
   12806:	2800      	cmp	r0, #0
   12808:	f77f ad93 	ble.w	12332 <_dtoa_r+0x432>
   1280c:	9b04      	ldr	r3, [sp, #16]
   1280e:	f103 0b01 	add.w	fp, r3, #1
   12812:	9b00      	ldr	r3, [sp, #0]
   12814:	2231      	movs	r2, #49	; 0x31
   12816:	4698      	mov	r8, r3
   12818:	f803 2b01 	strb.w	r2, [r3], #1
   1281c:	9300      	str	r3, [sp, #0]
   1281e:	4651      	mov	r1, sl
   12820:	4620      	mov	r0, r4
   12822:	f7fb f9b1 	bl	db88 <_Bfree>
   12826:	f10b 0301 	add.w	r3, fp, #1
   1282a:	f8dd 9000 	ldr.w	r9, [sp]
   1282e:	9304      	str	r3, [sp, #16]
   12830:	f8cd 8000 	str.w	r8, [sp]
   12834:	2e00      	cmp	r6, #0
   12836:	f47f ae8f 	bne.w	12558 <_dtoa_r+0x658>
   1283a:	e691      	b.n	12560 <_dtoa_r+0x660>
   1283c:	eba3 0a0a 	sub.w	sl, r3, sl
   12840:	e5c5      	b.n	123ce <_dtoa_r+0x4ce>
   12842:	4631      	mov	r1, r6
   12844:	4652      	mov	r2, sl
   12846:	4620      	mov	r0, r4
   12848:	f7fb fb7e 	bl	df48 <__pow5mult>
   1284c:	462a      	mov	r2, r5
   1284e:	4601      	mov	r1, r0
   12850:	4606      	mov	r6, r0
   12852:	4620      	mov	r0, r4
   12854:	f7fb faca 	bl	ddec <__multiply>
   12858:	4629      	mov	r1, r5
   1285a:	4605      	mov	r5, r0
   1285c:	4620      	mov	r0, r4
   1285e:	f7fb f993 	bl	db88 <_Bfree>
   12862:	e5ea      	b.n	1243a <_dtoa_r+0x53a>
   12864:	2002      	movs	r0, #2
   12866:	eeb0 5b48 	vmov.f64	d5, d8
   1286a:	e481      	b.n	12170 <_dtoa_r+0x270>
   1286c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   12870:	e68e      	b.n	12590 <_dtoa_r+0x690>
   12872:	f04f 0b01 	mov.w	fp, #1
   12876:	46d9      	mov	r9, fp
   12878:	e44f      	b.n	1211a <_dtoa_r+0x21a>
   1287a:	d103      	bne.n	12884 <_dtoa_r+0x984>
   1287c:	9b01      	ldr	r3, [sp, #4]
   1287e:	07db      	lsls	r3, r3, #31
   12880:	f53f ae4c 	bmi.w	1251c <_dtoa_r+0x61c>
   12884:	46d9      	mov	r9, fp
   12886:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1288a:	2b30      	cmp	r3, #48	; 0x30
   1288c:	d0fa      	beq.n	12884 <_dtoa_r+0x984>
   1288e:	e657      	b.n	12540 <_dtoa_r+0x640>
   12890:	9b04      	ldr	r3, [sp, #16]
   12892:	9a00      	ldr	r2, [sp, #0]
   12894:	3301      	adds	r3, #1
   12896:	9304      	str	r3, [sp, #16]
   12898:	2331      	movs	r3, #49	; 0x31
   1289a:	7013      	strb	r3, [r2, #0]
   1289c:	e650      	b.n	12540 <_dtoa_r+0x640>
   1289e:	f1ba 0f00 	cmp.w	sl, #0
   128a2:	f000 8123 	beq.w	12aec <_dtoa_r+0xbec>
   128a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   128aa:	9b06      	ldr	r3, [sp, #24]
   128ac:	9309      	str	r3, [sp, #36]	; 0x24
   128ae:	4413      	add	r3, r2
   128b0:	f8dd a020 	ldr.w	sl, [sp, #32]
   128b4:	9306      	str	r3, [sp, #24]
   128b6:	4490      	add	r8, r2
   128b8:	e592      	b.n	123e0 <_dtoa_r+0x4e0>
   128ba:	ee07 0a90 	vmov	s15, r0
   128be:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   128c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   128c6:	eea6 5b07 	vfma.f64	d5, d6, d7
   128ca:	ee15 2a90 	vmov	r2, s11
   128ce:	ec51 0b15 	vmov	r0, r1, d5
   128d2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   128d6:	ec41 0b15 	vmov	d5, r0, r1
   128da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   128de:	ee36 7b47 	vsub.f64	d7, d6, d7
   128e2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   128e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   128ea:	f300 8137 	bgt.w	12b5c <_dtoa_r+0xc5c>
   128ee:	eeb1 5b45 	vneg.f64	d5, d5
   128f2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   128f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   128fa:	f57f acfb 	bpl.w	122f4 <_dtoa_r+0x3f4>
   128fe:	f04f 0a00 	mov.w	sl, #0
   12902:	4656      	mov	r6, sl
   12904:	e515      	b.n	12332 <_dtoa_r+0x432>
   12906:	f000 80f5 	beq.w	12af4 <_dtoa_r+0xbf4>
   1290a:	9b04      	ldr	r3, [sp, #16]
   1290c:	4951      	ldr	r1, [pc, #324]	; (12a54 <_dtoa_r+0xb54>)
   1290e:	425a      	negs	r2, r3
   12910:	f002 000f 	and.w	r0, r2, #15
   12914:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12918:	ed91 6b00 	vldr	d6, [r1]
   1291c:	1112      	asrs	r2, r2, #4
   1291e:	ee28 6b06 	vmul.f64	d6, d8, d6
   12922:	f000 8142 	beq.w	12baa <_dtoa_r+0xcaa>
   12926:	eeb0 7b46 	vmov.f64	d7, d6
   1292a:	494b      	ldr	r1, [pc, #300]	; (12a58 <_dtoa_r+0xb58>)
   1292c:	2600      	movs	r6, #0
   1292e:	2002      	movs	r0, #2
   12930:	07d3      	lsls	r3, r2, #31
   12932:	d505      	bpl.n	12940 <_dtoa_r+0xa40>
   12934:	ed91 5b00 	vldr	d5, [r1]
   12938:	3001      	adds	r0, #1
   1293a:	2601      	movs	r6, #1
   1293c:	ee27 7b05 	vmul.f64	d7, d7, d5
   12940:	1052      	asrs	r2, r2, #1
   12942:	f101 0108 	add.w	r1, r1, #8
   12946:	d1f3      	bne.n	12930 <_dtoa_r+0xa30>
   12948:	2e00      	cmp	r6, #0
   1294a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   1294e:	e41e      	b.n	1218e <_dtoa_r+0x28e>
   12950:	9b02      	ldr	r3, [sp, #8]
   12952:	2b00      	cmp	r3, #0
   12954:	f47f ae37 	bne.w	125c6 <_dtoa_r+0x6c6>
   12958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1295c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12960:	2a00      	cmp	r2, #0
   12962:	f040 8137 	bne.w	12bd4 <_dtoa_r+0xcd4>
   12966:	4a3d      	ldr	r2, [pc, #244]	; (12a5c <_dtoa_r+0xb5c>)
   12968:	400a      	ands	r2, r1
   1296a:	2a00      	cmp	r2, #0
   1296c:	f000 80fa 	beq.w	12b64 <_dtoa_r+0xc64>
   12970:	9b06      	ldr	r3, [sp, #24]
   12972:	3301      	adds	r3, #1
   12974:	9306      	str	r3, [sp, #24]
   12976:	2301      	movs	r3, #1
   12978:	f108 0801 	add.w	r8, r8, #1
   1297c:	9308      	str	r3, [sp, #32]
   1297e:	e56f      	b.n	12460 <_dtoa_r+0x560>
   12980:	4629      	mov	r1, r5
   12982:	9a08      	ldr	r2, [sp, #32]
   12984:	4620      	mov	r0, r4
   12986:	f7fb fadf 	bl	df48 <__pow5mult>
   1298a:	4605      	mov	r5, r0
   1298c:	e55a      	b.n	12444 <_dtoa_r+0x544>
   1298e:	2a00      	cmp	r2, #0
   12990:	dd12      	ble.n	129b8 <_dtoa_r+0xab8>
   12992:	4629      	mov	r1, r5
   12994:	2201      	movs	r2, #1
   12996:	4620      	mov	r0, r4
   12998:	9301      	str	r3, [sp, #4]
   1299a:	f7fb fb35 	bl	e008 <__lshift>
   1299e:	4651      	mov	r1, sl
   129a0:	4605      	mov	r5, r0
   129a2:	f7fb fba9 	bl	e0f8 <__mcmp>
   129a6:	2800      	cmp	r0, #0
   129a8:	9b01      	ldr	r3, [sp, #4]
   129aa:	f340 80e1 	ble.w	12b70 <_dtoa_r+0xc70>
   129ae:	2b39      	cmp	r3, #57	; 0x39
   129b0:	f000 80ca 	beq.w	12b48 <_dtoa_r+0xc48>
   129b4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   129b8:	46b9      	mov	r9, r7
   129ba:	f809 3b01 	strb.w	r3, [r9], #1
   129be:	9b04      	ldr	r3, [sp, #16]
   129c0:	3301      	adds	r3, #1
   129c2:	4637      	mov	r7, r6
   129c4:	9304      	str	r3, [sp, #16]
   129c6:	4646      	mov	r6, r8
   129c8:	e5ba      	b.n	12540 <_dtoa_r+0x640>
   129ca:	ee38 8b08 	vadd.f64	d8, d8, d8
   129ce:	eeb4 8bc6 	vcmpe.f64	d8, d6
   129d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129d6:	dc0a      	bgt.n	129ee <_dtoa_r+0xaee>
   129d8:	eeb4 8b46 	vcmp.f64	d8, d6
   129dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129e0:	f47f acdc 	bne.w	1239c <_dtoa_r+0x49c>
   129e4:	ee17 3a10 	vmov	r3, s14
   129e8:	07d8      	lsls	r0, r3, #31
   129ea:	f57f acd7 	bpl.w	1239c <_dtoa_r+0x49c>
   129ee:	9a00      	ldr	r2, [sp, #0]
   129f0:	e454      	b.n	1229c <_dtoa_r+0x39c>
   129f2:	6871      	ldr	r1, [r6, #4]
   129f4:	4620      	mov	r0, r4
   129f6:	f7fb f8a1 	bl	db3c <_Balloc>
   129fa:	4607      	mov	r7, r0
   129fc:	2800      	cmp	r0, #0
   129fe:	f000 80de 	beq.w	12bbe <_dtoa_r+0xcbe>
   12a02:	6933      	ldr	r3, [r6, #16]
   12a04:	3302      	adds	r3, #2
   12a06:	009a      	lsls	r2, r3, #2
   12a08:	f106 010c 	add.w	r1, r6, #12
   12a0c:	300c      	adds	r0, #12
   12a0e:	f7f5 fc81 	bl	8314 <memcpy>
   12a12:	4639      	mov	r1, r7
   12a14:	2201      	movs	r2, #1
   12a16:	4620      	mov	r0, r4
   12a18:	f7fb faf6 	bl	e008 <__lshift>
   12a1c:	4680      	mov	r8, r0
   12a1e:	e5fe      	b.n	1261e <_dtoa_r+0x71e>
   12a20:	9b06      	ldr	r3, [sp, #24]
   12a22:	eba3 0309 	sub.w	r3, r3, r9
   12a26:	9309      	str	r3, [sp, #36]	; 0x24
   12a28:	e4da      	b.n	123e0 <_dtoa_r+0x4e0>
   12a2a:	2b39      	cmp	r3, #57	; 0x39
   12a2c:	f000 808c 	beq.w	12b48 <_dtoa_r+0xc48>
   12a30:	46b9      	mov	r9, r7
   12a32:	3301      	adds	r3, #1
   12a34:	e7c1      	b.n	129ba <_dtoa_r+0xaba>
   12a36:	9a04      	ldr	r2, [sp, #16]
   12a38:	3201      	adds	r2, #1
   12a3a:	4637      	mov	r7, r6
   12a3c:	9204      	str	r2, [sp, #16]
   12a3e:	4646      	mov	r6, r8
   12a40:	e55f      	b.n	12502 <_dtoa_r+0x602>
   12a42:	4629      	mov	r1, r5
   12a44:	4620      	mov	r0, r4
   12a46:	f7fb fa7f 	bl	df48 <__pow5mult>
   12a4a:	4605      	mov	r5, r0
   12a4c:	e4fa      	b.n	12444 <_dtoa_r+0x544>
   12a4e:	bf00      	nop
   12a50:	20000e68 	.word	0x20000e68
   12a54:	200003a8 	.word	0x200003a8
   12a58:	20000380 	.word	0x20000380
   12a5c:	7ff00000 	.word	0x7ff00000
   12a60:	4b5e      	ldr	r3, [pc, #376]	; (12bdc <_dtoa_r+0xcdc>)
   12a62:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   12a66:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   12a6a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   12a6e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   12a72:	ee36 7b47 	vsub.f64	d7, d6, d7
   12a76:	ec41 0b16 	vmov	d6, r0, r1
   12a7a:	ee15 1a90 	vmov	r1, s11
   12a7e:	ee23 3b06 	vmul.f64	d3, d3, d6
   12a82:	9800      	ldr	r0, [sp, #0]
   12a84:	3130      	adds	r1, #48	; 0x30
   12a86:	2a01      	cmp	r2, #1
   12a88:	f800 1b01 	strb.w	r1, [r0], #1
   12a8c:	f000 8083 	beq.w	12b96 <_dtoa_r+0xc96>
   12a90:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12a94:	9b00      	ldr	r3, [sp, #0]
   12a96:	1899      	adds	r1, r3, r2
   12a98:	ee27 7b04 	vmul.f64	d7, d7, d4
   12a9c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12aa0:	ee16 3a90 	vmov	r3, s13
   12aa4:	3330      	adds	r3, #48	; 0x30
   12aa6:	f800 3b01 	strb.w	r3, [r0], #1
   12aaa:	4281      	cmp	r1, r0
   12aac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   12ab0:	ee37 7b45 	vsub.f64	d7, d7, d5
   12ab4:	d1f0      	bne.n	12a98 <_dtoa_r+0xb98>
   12ab6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   12aba:	ee33 5b06 	vadd.f64	d5, d3, d6
   12abe:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ac6:	f53f abe3 	bmi.w	12290 <_dtoa_r+0x390>
   12aca:	ee36 6b43 	vsub.f64	d6, d6, d3
   12ace:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ad6:	f77f ac0d 	ble.w	122f4 <_dtoa_r+0x3f4>
   12ada:	4689      	mov	r9, r1
   12adc:	3901      	subs	r1, #1
   12ade:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   12ae2:	2b30      	cmp	r3, #48	; 0x30
   12ae4:	d0f9      	beq.n	12ada <_dtoa_r+0xbda>
   12ae6:	1c73      	adds	r3, r6, #1
   12ae8:	9304      	str	r3, [sp, #16]
   12aea:	e539      	b.n	12560 <_dtoa_r+0x660>
   12aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12aee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   12af2:	e6da      	b.n	128aa <_dtoa_r+0x9aa>
   12af4:	2002      	movs	r0, #2
   12af6:	eeb0 6b48 	vmov.f64	d6, d8
   12afa:	f7ff bb48 	b.w	1218e <_dtoa_r+0x28e>
   12afe:	f1b9 0f00 	cmp.w	r9, #0
   12b02:	f43f aeda 	beq.w	128ba <_dtoa_r+0x9ba>
   12b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12b08:	2a00      	cmp	r2, #0
   12b0a:	f77f abf3 	ble.w	122f4 <_dtoa_r+0x3f4>
   12b0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12b12:	ee26 6b04 	vmul.f64	d6, d6, d4
   12b16:	3001      	adds	r0, #1
   12b18:	ee07 0a90 	vmov	s15, r0
   12b1c:	9b04      	ldr	r3, [sp, #16]
   12b1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   12b22:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   12b26:	eea6 7b05 	vfma.f64	d7, d6, d5
   12b2a:	ee17 ca90 	vmov	ip, s15
   12b2e:	ec51 0b17 	vmov	r0, r1, d7
   12b32:	1e5e      	subs	r6, r3, #1
   12b34:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   12b38:	f7ff bb47 	b.w	121ca <_dtoa_r+0x2ca>
   12b3c:	9b04      	ldr	r3, [sp, #16]
   12b3e:	3301      	adds	r3, #1
   12b40:	9304      	str	r3, [sp, #16]
   12b42:	2331      	movs	r3, #49	; 0x31
   12b44:	f7ff bbb1 	b.w	122aa <_dtoa_r+0x3aa>
   12b48:	9b04      	ldr	r3, [sp, #16]
   12b4a:	46bb      	mov	fp, r7
   12b4c:	3301      	adds	r3, #1
   12b4e:	9304      	str	r3, [sp, #16]
   12b50:	2339      	movs	r3, #57	; 0x39
   12b52:	4637      	mov	r7, r6
   12b54:	f80b 3b01 	strb.w	r3, [fp], #1
   12b58:	4646      	mov	r6, r8
   12b5a:	e4e1      	b.n	12520 <_dtoa_r+0x620>
   12b5c:	f04f 0a00 	mov.w	sl, #0
   12b60:	4656      	mov	r6, sl
   12b62:	e653      	b.n	1280c <_dtoa_r+0x90c>
   12b64:	9208      	str	r2, [sp, #32]
   12b66:	e47b      	b.n	12460 <_dtoa_r+0x560>
   12b68:	1c73      	adds	r3, r6, #1
   12b6a:	9304      	str	r3, [sp, #16]
   12b6c:	4689      	mov	r9, r1
   12b6e:	e4f7      	b.n	12560 <_dtoa_r+0x660>
   12b70:	f47f af22 	bne.w	129b8 <_dtoa_r+0xab8>
   12b74:	07da      	lsls	r2, r3, #31
   12b76:	f57f af1f 	bpl.w	129b8 <_dtoa_r+0xab8>
   12b7a:	e718      	b.n	129ae <_dtoa_r+0xaae>
   12b7c:	2b39      	cmp	r3, #57	; 0x39
   12b7e:	d0e3      	beq.n	12b48 <_dtoa_r+0xc48>
   12b80:	f1b9 0f00 	cmp.w	r9, #0
   12b84:	f73f af16 	bgt.w	129b4 <_dtoa_r+0xab4>
   12b88:	e716      	b.n	129b8 <_dtoa_r+0xab8>
   12b8a:	9b01      	ldr	r3, [sp, #4]
   12b8c:	2b02      	cmp	r3, #2
   12b8e:	f73f ae28 	bgt.w	127e2 <_dtoa_r+0x8e2>
   12b92:	9704      	str	r7, [sp, #16]
   12b94:	e5ba      	b.n	1270c <_dtoa_r+0x80c>
   12b96:	4601      	mov	r1, r0
   12b98:	e78d      	b.n	12ab6 <_dtoa_r+0xbb6>
   12b9a:	9b01      	ldr	r3, [sp, #4]
   12b9c:	2b02      	cmp	r3, #2
   12b9e:	f73f ae20 	bgt.w	127e2 <_dtoa_r+0x8e2>
   12ba2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12ba6:	9704      	str	r7, [sp, #16]
   12ba8:	e52b      	b.n	12602 <_dtoa_r+0x702>
   12baa:	2002      	movs	r0, #2
   12bac:	f7ff baef 	b.w	1218e <_dtoa_r+0x28e>
   12bb0:	4b0b      	ldr	r3, [pc, #44]	; (12be0 <_dtoa_r+0xce0>)
   12bb2:	480c      	ldr	r0, [pc, #48]	; (12be4 <_dtoa_r+0xce4>)
   12bb4:	2200      	movs	r2, #0
   12bb6:	f240 11af 	movw	r1, #431	; 0x1af
   12bba:	f7ff f8b1 	bl	11d20 <__assert_func>
   12bbe:	4b08      	ldr	r3, [pc, #32]	; (12be0 <_dtoa_r+0xce0>)
   12bc0:	4808      	ldr	r0, [pc, #32]	; (12be4 <_dtoa_r+0xce4>)
   12bc2:	463a      	mov	r2, r7
   12bc4:	f240 21ef 	movw	r1, #751	; 0x2ef
   12bc8:	f7ff f8aa 	bl	11d20 <__assert_func>
   12bcc:	4b06      	ldr	r3, [pc, #24]	; (12be8 <_dtoa_r+0xce8>)
   12bce:	9300      	str	r3, [sp, #0]
   12bd0:	f7ff b9d2 	b.w	11f78 <_dtoa_r+0x78>
   12bd4:	9b02      	ldr	r3, [sp, #8]
   12bd6:	9308      	str	r3, [sp, #32]
   12bd8:	e4f7      	b.n	125ca <_dtoa_r+0x6ca>
   12bda:	bf00      	nop
   12bdc:	200003a8 	.word	0x200003a8
   12be0:	20000b7c 	.word	0x20000b7c
   12be4:	20000e6c 	.word	0x20000e6c
   12be8:	20000e5c 	.word	0x20000e5c

00012bec <_strtoul_l.constprop.0>:
   12bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bf0:	4607      	mov	r7, r0
   12bf2:	484c      	ldr	r0, [pc, #304]	; (12d24 <_strtoul_l.constprop.0+0x138>)
   12bf4:	460e      	mov	r6, r1
   12bf6:	4635      	mov	r5, r6
   12bf8:	f816 eb01 	ldrb.w	lr, [r6], #1
   12bfc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   12c00:	f01c 0c08 	ands.w	ip, ip, #8
   12c04:	d1f7      	bne.n	12bf6 <_strtoul_l.constprop.0+0xa>
   12c06:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   12c0a:	d05a      	beq.n	12cc2 <_strtoul_l.constprop.0+0xd6>
   12c0c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   12c10:	bf03      	ittte	eq
   12c12:	f896 e000 	ldrbeq.w	lr, [r6]
   12c16:	4664      	moveq	r4, ip
   12c18:	1cae      	addeq	r6, r5, #2
   12c1a:	4664      	movne	r4, ip
   12c1c:	b15b      	cbz	r3, 12c36 <_strtoul_l.constprop.0+0x4a>
   12c1e:	2b10      	cmp	r3, #16
   12c20:	d054      	beq.n	12ccc <_strtoul_l.constprop.0+0xe0>
   12c22:	f04f 38ff 	mov.w	r8, #4294967295
   12c26:	fbb8 f8f3 	udiv	r8, r8, r3
   12c2a:	fb03 fa08 	mul.w	sl, r3, r8
   12c2e:	ea6f 0a0a 	mvn.w	sl, sl
   12c32:	4699      	mov	r9, r3
   12c34:	e008      	b.n	12c48 <_strtoul_l.constprop.0+0x5c>
   12c36:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   12c3a:	d05a      	beq.n	12cf2 <_strtoul_l.constprop.0+0x106>
   12c3c:	230a      	movs	r3, #10
   12c3e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 12d28 <_strtoul_l.constprop.0+0x13c>
   12c42:	f04f 0a05 	mov.w	sl, #5
   12c46:	4699      	mov	r9, r3
   12c48:	2500      	movs	r5, #0
   12c4a:	4628      	mov	r0, r5
   12c4c:	e005      	b.n	12c5a <_strtoul_l.constprop.0+0x6e>
   12c4e:	d02c      	beq.n	12caa <_strtoul_l.constprop.0+0xbe>
   12c50:	fb09 c000 	mla	r0, r9, r0, ip
   12c54:	2501      	movs	r5, #1
   12c56:	f816 eb01 	ldrb.w	lr, [r6], #1
   12c5a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   12c5e:	f1bc 0f09 	cmp.w	ip, #9
   12c62:	d906      	bls.n	12c72 <_strtoul_l.constprop.0+0x86>
   12c64:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   12c68:	f1bc 0f19 	cmp.w	ip, #25
   12c6c:	d80b      	bhi.n	12c86 <_strtoul_l.constprop.0+0x9a>
   12c6e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   12c72:	4563      	cmp	r3, ip
   12c74:	dd10      	ble.n	12c98 <_strtoul_l.constprop.0+0xac>
   12c76:	f1b5 3fff 	cmp.w	r5, #4294967295
   12c7a:	d0ec      	beq.n	12c56 <_strtoul_l.constprop.0+0x6a>
   12c7c:	4540      	cmp	r0, r8
   12c7e:	d9e6      	bls.n	12c4e <_strtoul_l.constprop.0+0x62>
   12c80:	f04f 35ff 	mov.w	r5, #4294967295
   12c84:	e7e7      	b.n	12c56 <_strtoul_l.constprop.0+0x6a>
   12c86:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   12c8a:	f1bc 0f19 	cmp.w	ip, #25
   12c8e:	d803      	bhi.n	12c98 <_strtoul_l.constprop.0+0xac>
   12c90:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   12c94:	4563      	cmp	r3, ip
   12c96:	dcee      	bgt.n	12c76 <_strtoul_l.constprop.0+0x8a>
   12c98:	1c6b      	adds	r3, r5, #1
   12c9a:	d00b      	beq.n	12cb4 <_strtoul_l.constprop.0+0xc8>
   12c9c:	b104      	cbz	r4, 12ca0 <_strtoul_l.constprop.0+0xb4>
   12c9e:	4240      	negs	r0, r0
   12ca0:	b10a      	cbz	r2, 12ca6 <_strtoul_l.constprop.0+0xba>
   12ca2:	b965      	cbnz	r5, 12cbe <_strtoul_l.constprop.0+0xd2>
   12ca4:	6011      	str	r1, [r2, #0]
   12ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12caa:	45d4      	cmp	ip, sl
   12cac:	ddd0      	ble.n	12c50 <_strtoul_l.constprop.0+0x64>
   12cae:	f04f 35ff 	mov.w	r5, #4294967295
   12cb2:	e7d0      	b.n	12c56 <_strtoul_l.constprop.0+0x6a>
   12cb4:	2322      	movs	r3, #34	; 0x22
   12cb6:	603b      	str	r3, [r7, #0]
   12cb8:	4628      	mov	r0, r5
   12cba:	2a00      	cmp	r2, #0
   12cbc:	d0f3      	beq.n	12ca6 <_strtoul_l.constprop.0+0xba>
   12cbe:	1e71      	subs	r1, r6, #1
   12cc0:	e7f0      	b.n	12ca4 <_strtoul_l.constprop.0+0xb8>
   12cc2:	f896 e000 	ldrb.w	lr, [r6]
   12cc6:	2401      	movs	r4, #1
   12cc8:	1cae      	adds	r6, r5, #2
   12cca:	e7a7      	b.n	12c1c <_strtoul_l.constprop.0+0x30>
   12ccc:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   12cd0:	d121      	bne.n	12d16 <_strtoul_l.constprop.0+0x12a>
   12cd2:	7830      	ldrb	r0, [r6, #0]
   12cd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   12cd8:	2858      	cmp	r0, #88	; 0x58
   12cda:	d116      	bne.n	12d0a <_strtoul_l.constprop.0+0x11e>
   12cdc:	f04f 0910 	mov.w	r9, #16
   12ce0:	f896 e001 	ldrb.w	lr, [r6, #1]
   12ce4:	f04f 0a0f 	mov.w	sl, #15
   12ce8:	3602      	adds	r6, #2
   12cea:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12cee:	464b      	mov	r3, r9
   12cf0:	e7aa      	b.n	12c48 <_strtoul_l.constprop.0+0x5c>
   12cf2:	7833      	ldrb	r3, [r6, #0]
   12cf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12cf8:	2b58      	cmp	r3, #88	; 0x58
   12cfa:	d0ef      	beq.n	12cdc <_strtoul_l.constprop.0+0xf0>
   12cfc:	2308      	movs	r3, #8
   12cfe:	f04f 0a07 	mov.w	sl, #7
   12d02:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12d06:	4699      	mov	r9, r3
   12d08:	e79e      	b.n	12c48 <_strtoul_l.constprop.0+0x5c>
   12d0a:	4699      	mov	r9, r3
   12d0c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12d10:	f04f 0a0f 	mov.w	sl, #15
   12d14:	e798      	b.n	12c48 <_strtoul_l.constprop.0+0x5c>
   12d16:	f04f 0a0f 	mov.w	sl, #15
   12d1a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12d1e:	4699      	mov	r9, r3
   12d20:	e792      	b.n	12c48 <_strtoul_l.constprop.0+0x5c>
   12d22:	bf00      	nop
   12d24:	20000d59 	.word	0x20000d59
   12d28:	19999999 	.word	0x19999999

00012d2c <_strtoul_r>:
   12d2c:	f7ff bf5e 	b.w	12bec <_strtoul_l.constprop.0>

00012d30 <_strtoll_l.constprop.0>:
   12d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d34:	b085      	sub	sp, #20
   12d36:	461f      	mov	r7, r3
   12d38:	4b57      	ldr	r3, [pc, #348]	; (12e98 <_strtoll_l.constprop.0+0x168>)
   12d3a:	9003      	str	r0, [sp, #12]
   12d3c:	468a      	mov	sl, r1
   12d3e:	9200      	str	r2, [sp, #0]
   12d40:	460d      	mov	r5, r1
   12d42:	462a      	mov	r2, r5
   12d44:	f815 4b01 	ldrb.w	r4, [r5], #1
   12d48:	5d1e      	ldrb	r6, [r3, r4]
   12d4a:	f016 0608 	ands.w	r6, r6, #8
   12d4e:	d1f8      	bne.n	12d42 <_strtoll_l.constprop.0+0x12>
   12d50:	2c2d      	cmp	r4, #45	; 0x2d
   12d52:	d075      	beq.n	12e40 <_strtoll_l.constprop.0+0x110>
   12d54:	2c2b      	cmp	r4, #43	; 0x2b
   12d56:	bf05      	ittet	eq
   12d58:	782c      	ldrbeq	r4, [r5, #0]
   12d5a:	9602      	streq	r6, [sp, #8]
   12d5c:	9602      	strne	r6, [sp, #8]
   12d5e:	1c95      	addeq	r5, r2, #2
   12d60:	f04f 36ff 	mov.w	r6, #4294967295
   12d64:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   12d68:	b12f      	cbz	r7, 12d76 <_strtoll_l.constprop.0+0x46>
   12d6a:	2f10      	cmp	r7, #16
   12d6c:	d06f      	beq.n	12e4e <_strtoll_l.constprop.0+0x11e>
   12d6e:	46b8      	mov	r8, r7
   12d70:	ea4f 79e7 	mov.w	r9, r7, asr #31
   12d74:	e005      	b.n	12d82 <_strtoll_l.constprop.0+0x52>
   12d76:	2c30      	cmp	r4, #48	; 0x30
   12d78:	d074      	beq.n	12e64 <_strtoll_l.constprop.0+0x134>
   12d7a:	f04f 080a 	mov.w	r8, #10
   12d7e:	46b9      	mov	r9, r7
   12d80:	4647      	mov	r7, r8
   12d82:	4642      	mov	r2, r8
   12d84:	464b      	mov	r3, r9
   12d86:	4630      	mov	r0, r6
   12d88:	4659      	mov	r1, fp
   12d8a:	f7f7 fca5 	bl	a6d8 <__aeabi_uldivmod>
   12d8e:	2300      	movs	r3, #0
   12d90:	9201      	str	r2, [sp, #4]
   12d92:	4684      	mov	ip, r0
   12d94:	460a      	mov	r2, r1
   12d96:	4618      	mov	r0, r3
   12d98:	4619      	mov	r1, r3
   12d9a:	e011      	b.n	12dc0 <_strtoll_l.constprop.0+0x90>
   12d9c:	428a      	cmp	r2, r1
   12d9e:	bf08      	it	eq
   12da0:	4584      	cmpeq	ip, r0
   12da2:	d03d      	beq.n	12e20 <_strtoll_l.constprop.0+0xf0>
   12da4:	fb00 f309 	mul.w	r3, r0, r9
   12da8:	fb08 3301 	mla	r3, r8, r1, r3
   12dac:	fba0 0108 	umull	r0, r1, r0, r8
   12db0:	440b      	add	r3, r1
   12db2:	eb1e 0000 	adds.w	r0, lr, r0
   12db6:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   12dba:	2301      	movs	r3, #1
   12dbc:	f815 4b01 	ldrb.w	r4, [r5], #1
   12dc0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   12dc4:	f1be 0f09 	cmp.w	lr, #9
   12dc8:	d906      	bls.n	12dd8 <_strtoll_l.constprop.0+0xa8>
   12dca:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   12dce:	f1be 0f19 	cmp.w	lr, #25
   12dd2:	d80c      	bhi.n	12dee <_strtoll_l.constprop.0+0xbe>
   12dd4:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   12dd8:	4577      	cmp	r7, lr
   12dda:	dd11      	ble.n	12e00 <_strtoll_l.constprop.0+0xd0>
   12ddc:	1c5c      	adds	r4, r3, #1
   12dde:	d0ed      	beq.n	12dbc <_strtoll_l.constprop.0+0x8c>
   12de0:	4584      	cmp	ip, r0
   12de2:	eb72 0301 	sbcs.w	r3, r2, r1
   12de6:	d2d9      	bcs.n	12d9c <_strtoll_l.constprop.0+0x6c>
   12de8:	f04f 33ff 	mov.w	r3, #4294967295
   12dec:	e7e6      	b.n	12dbc <_strtoll_l.constprop.0+0x8c>
   12dee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   12df2:	f1be 0f19 	cmp.w	lr, #25
   12df6:	d803      	bhi.n	12e00 <_strtoll_l.constprop.0+0xd0>
   12df8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   12dfc:	4577      	cmp	r7, lr
   12dfe:	dced      	bgt.n	12ddc <_strtoll_l.constprop.0+0xac>
   12e00:	1c5a      	adds	r2, r3, #1
   12e02:	d013      	beq.n	12e2c <_strtoll_l.constprop.0+0xfc>
   12e04:	9a02      	ldr	r2, [sp, #8]
   12e06:	b112      	cbz	r2, 12e0e <_strtoll_l.constprop.0+0xde>
   12e08:	4240      	negs	r0, r0
   12e0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12e0e:	9a00      	ldr	r2, [sp, #0]
   12e10:	b11a      	cbz	r2, 12e1a <_strtoll_l.constprop.0+0xea>
   12e12:	bba3      	cbnz	r3, 12e7e <_strtoll_l.constprop.0+0x14e>
   12e14:	9b00      	ldr	r3, [sp, #0]
   12e16:	f8c3 a000 	str.w	sl, [r3]
   12e1a:	b005      	add	sp, #20
   12e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e20:	9b01      	ldr	r3, [sp, #4]
   12e22:	4573      	cmp	r3, lr
   12e24:	dabe      	bge.n	12da4 <_strtoll_l.constprop.0+0x74>
   12e26:	f04f 33ff 	mov.w	r3, #4294967295
   12e2a:	e7c7      	b.n	12dbc <_strtoll_l.constprop.0+0x8c>
   12e2c:	9a03      	ldr	r2, [sp, #12]
   12e2e:	2322      	movs	r3, #34	; 0x22
   12e30:	6013      	str	r3, [r2, #0]
   12e32:	9b00      	ldr	r3, [sp, #0]
   12e34:	b333      	cbz	r3, 12e84 <_strtoll_l.constprop.0+0x154>
   12e36:	f105 3aff 	add.w	sl, r5, #4294967295
   12e3a:	4630      	mov	r0, r6
   12e3c:	4659      	mov	r1, fp
   12e3e:	e7e9      	b.n	12e14 <_strtoll_l.constprop.0+0xe4>
   12e40:	2301      	movs	r3, #1
   12e42:	782c      	ldrb	r4, [r5, #0]
   12e44:	9302      	str	r3, [sp, #8]
   12e46:	1c95      	adds	r5, r2, #2
   12e48:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   12e4c:	e78c      	b.n	12d68 <_strtoll_l.constprop.0+0x38>
   12e4e:	2c30      	cmp	r4, #48	; 0x30
   12e50:	d104      	bne.n	12e5c <_strtoll_l.constprop.0+0x12c>
   12e52:	782b      	ldrb	r3, [r5, #0]
   12e54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12e58:	2b58      	cmp	r3, #88	; 0x58
   12e5a:	d008      	beq.n	12e6e <_strtoll_l.constprop.0+0x13e>
   12e5c:	46b8      	mov	r8, r7
   12e5e:	f04f 0900 	mov.w	r9, #0
   12e62:	e78e      	b.n	12d82 <_strtoll_l.constprop.0+0x52>
   12e64:	782b      	ldrb	r3, [r5, #0]
   12e66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12e6a:	2b58      	cmp	r3, #88	; 0x58
   12e6c:	d10f      	bne.n	12e8e <_strtoll_l.constprop.0+0x15e>
   12e6e:	f04f 0810 	mov.w	r8, #16
   12e72:	786c      	ldrb	r4, [r5, #1]
   12e74:	f04f 0900 	mov.w	r9, #0
   12e78:	3502      	adds	r5, #2
   12e7a:	4647      	mov	r7, r8
   12e7c:	e781      	b.n	12d82 <_strtoll_l.constprop.0+0x52>
   12e7e:	4606      	mov	r6, r0
   12e80:	468b      	mov	fp, r1
   12e82:	e7d8      	b.n	12e36 <_strtoll_l.constprop.0+0x106>
   12e84:	4630      	mov	r0, r6
   12e86:	4659      	mov	r1, fp
   12e88:	b005      	add	sp, #20
   12e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e8e:	f04f 0808 	mov.w	r8, #8
   12e92:	46b9      	mov	r9, r7
   12e94:	4647      	mov	r7, r8
   12e96:	e774      	b.n	12d82 <_strtoll_l.constprop.0+0x52>
   12e98:	20000d59 	.word	0x20000d59

00012e9c <_strtoll_r>:
   12e9c:	f7ff bf48 	b.w	12d30 <_strtoll_l.constprop.0>

00012ea0 <_strtoull_l.constprop.0>:
   12ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea4:	b085      	sub	sp, #20
   12ea6:	468b      	mov	fp, r1
   12ea8:	9201      	str	r2, [sp, #4]
   12eaa:	4a62      	ldr	r2, [pc, #392]	; (13034 <_strtoull_l.constprop.0+0x194>)
   12eac:	9003      	str	r0, [sp, #12]
   12eae:	461e      	mov	r6, r3
   12eb0:	460d      	mov	r5, r1
   12eb2:	4629      	mov	r1, r5
   12eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
   12eb8:	5d13      	ldrb	r3, [r2, r4]
   12eba:	f013 0308 	ands.w	r3, r3, #8
   12ebe:	d1f8      	bne.n	12eb2 <_strtoull_l.constprop.0+0x12>
   12ec0:	2c2d      	cmp	r4, #45	; 0x2d
   12ec2:	f000 8082 	beq.w	12fca <_strtoull_l.constprop.0+0x12a>
   12ec6:	2c2b      	cmp	r4, #43	; 0x2b
   12ec8:	bf03      	ittte	eq
   12eca:	782c      	ldrbeq	r4, [r5, #0]
   12ecc:	9302      	streq	r3, [sp, #8]
   12ece:	1c8d      	addeq	r5, r1, #2
   12ed0:	9302      	strne	r3, [sp, #8]
   12ed2:	b1be      	cbz	r6, 12f04 <_strtoull_l.constprop.0+0x64>
   12ed4:	2e10      	cmp	r6, #16
   12ed6:	d07d      	beq.n	12fd4 <_strtoull_l.constprop.0+0x134>
   12ed8:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   12edc:	4632      	mov	r2, r6
   12ede:	4653      	mov	r3, sl
   12ee0:	f04f 30ff 	mov.w	r0, #4294967295
   12ee4:	f04f 31ff 	mov.w	r1, #4294967295
   12ee8:	f7f7 fbf6 	bl	a6d8 <__aeabi_uldivmod>
   12eec:	4632      	mov	r2, r6
   12eee:	4607      	mov	r7, r0
   12ef0:	4688      	mov	r8, r1
   12ef2:	4653      	mov	r3, sl
   12ef4:	f04f 30ff 	mov.w	r0, #4294967295
   12ef8:	f04f 31ff 	mov.w	r1, #4294967295
   12efc:	46b1      	mov	r9, r6
   12efe:	f7f7 fbeb 	bl	a6d8 <__aeabi_uldivmod>
   12f02:	e00a      	b.n	12f1a <_strtoull_l.constprop.0+0x7a>
   12f04:	2c30      	cmp	r4, #48	; 0x30
   12f06:	d079      	beq.n	12ffc <_strtoull_l.constprop.0+0x15c>
   12f08:	f04f 090a 	mov.w	r9, #10
   12f0c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 13038 <_strtoull_l.constprop.0+0x198>
   12f10:	46b2      	mov	sl, r6
   12f12:	2205      	movs	r2, #5
   12f14:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12f18:	464e      	mov	r6, r9
   12f1a:	f04f 0c00 	mov.w	ip, #0
   12f1e:	4660      	mov	r0, ip
   12f20:	4661      	mov	r1, ip
   12f22:	e011      	b.n	12f48 <_strtoull_l.constprop.0+0xa8>
   12f24:	4541      	cmp	r1, r8
   12f26:	bf08      	it	eq
   12f28:	42b8      	cmpeq	r0, r7
   12f2a:	d03e      	beq.n	12faa <_strtoull_l.constprop.0+0x10a>
   12f2c:	fb00 f40a 	mul.w	r4, r0, sl
   12f30:	fb09 4101 	mla	r1, r9, r1, r4
   12f34:	fba0 0409 	umull	r0, r4, r0, r9
   12f38:	4421      	add	r1, r4
   12f3a:	1818      	adds	r0, r3, r0
   12f3c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12f40:	f04f 0c01 	mov.w	ip, #1
   12f44:	f815 4b01 	ldrb.w	r4, [r5], #1
   12f48:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   12f4c:	2b09      	cmp	r3, #9
   12f4e:	d905      	bls.n	12f5c <_strtoull_l.constprop.0+0xbc>
   12f50:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12f54:	2b19      	cmp	r3, #25
   12f56:	d80d      	bhi.n	12f74 <_strtoull_l.constprop.0+0xd4>
   12f58:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   12f5c:	429e      	cmp	r6, r3
   12f5e:	dd11      	ble.n	12f84 <_strtoull_l.constprop.0+0xe4>
   12f60:	f1bc 3fff 	cmp.w	ip, #4294967295
   12f64:	d0ee      	beq.n	12f44 <_strtoull_l.constprop.0+0xa4>
   12f66:	4287      	cmp	r7, r0
   12f68:	eb78 0401 	sbcs.w	r4, r8, r1
   12f6c:	d2da      	bcs.n	12f24 <_strtoull_l.constprop.0+0x84>
   12f6e:	f04f 3cff 	mov.w	ip, #4294967295
   12f72:	e7e7      	b.n	12f44 <_strtoull_l.constprop.0+0xa4>
   12f74:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   12f78:	2b19      	cmp	r3, #25
   12f7a:	d803      	bhi.n	12f84 <_strtoull_l.constprop.0+0xe4>
   12f7c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12f80:	429e      	cmp	r6, r3
   12f82:	dced      	bgt.n	12f60 <_strtoull_l.constprop.0+0xc0>
   12f84:	f1bc 3fff 	cmp.w	ip, #4294967295
   12f88:	d014      	beq.n	12fb4 <_strtoull_l.constprop.0+0x114>
   12f8a:	9b02      	ldr	r3, [sp, #8]
   12f8c:	b113      	cbz	r3, 12f94 <_strtoull_l.constprop.0+0xf4>
   12f8e:	4240      	negs	r0, r0
   12f90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12f94:	9b01      	ldr	r3, [sp, #4]
   12f96:	b12b      	cbz	r3, 12fa4 <_strtoull_l.constprop.0+0x104>
   12f98:	f1bc 0f00 	cmp.w	ip, #0
   12f9c:	d112      	bne.n	12fc4 <_strtoull_l.constprop.0+0x124>
   12f9e:	9b01      	ldr	r3, [sp, #4]
   12fa0:	f8c3 b000 	str.w	fp, [r3]
   12fa4:	b005      	add	sp, #20
   12fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12faa:	4293      	cmp	r3, r2
   12fac:	ddbe      	ble.n	12f2c <_strtoull_l.constprop.0+0x8c>
   12fae:	f04f 3cff 	mov.w	ip, #4294967295
   12fb2:	e7c7      	b.n	12f44 <_strtoull_l.constprop.0+0xa4>
   12fb4:	9a03      	ldr	r2, [sp, #12]
   12fb6:	2322      	movs	r3, #34	; 0x22
   12fb8:	6013      	str	r3, [r2, #0]
   12fba:	9b01      	ldr	r3, [sp, #4]
   12fbc:	4660      	mov	r0, ip
   12fbe:	4661      	mov	r1, ip
   12fc0:	2b00      	cmp	r3, #0
   12fc2:	d0ef      	beq.n	12fa4 <_strtoull_l.constprop.0+0x104>
   12fc4:	f105 3bff 	add.w	fp, r5, #4294967295
   12fc8:	e7e9      	b.n	12f9e <_strtoull_l.constprop.0+0xfe>
   12fca:	2301      	movs	r3, #1
   12fcc:	782c      	ldrb	r4, [r5, #0]
   12fce:	9302      	str	r3, [sp, #8]
   12fd0:	1c8d      	adds	r5, r1, #2
   12fd2:	e77e      	b.n	12ed2 <_strtoull_l.constprop.0+0x32>
   12fd4:	2c30      	cmp	r4, #48	; 0x30
   12fd6:	d123      	bne.n	13020 <_strtoull_l.constprop.0+0x180>
   12fd8:	782b      	ldrb	r3, [r5, #0]
   12fda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12fde:	2b58      	cmp	r3, #88	; 0x58
   12fe0:	d11b      	bne.n	1301a <_strtoull_l.constprop.0+0x17a>
   12fe2:	f04f 0910 	mov.w	r9, #16
   12fe6:	786c      	ldrb	r4, [r5, #1]
   12fe8:	220f      	movs	r2, #15
   12fea:	3502      	adds	r5, #2
   12fec:	f04f 37ff 	mov.w	r7, #4294967295
   12ff0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12ff4:	f04f 0a00 	mov.w	sl, #0
   12ff8:	464e      	mov	r6, r9
   12ffa:	e78e      	b.n	12f1a <_strtoull_l.constprop.0+0x7a>
   12ffc:	782b      	ldrb	r3, [r5, #0]
   12ffe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   13002:	2b58      	cmp	r3, #88	; 0x58
   13004:	d0ed      	beq.n	12fe2 <_strtoull_l.constprop.0+0x142>
   13006:	f04f 0908 	mov.w	r9, #8
   1300a:	46b2      	mov	sl, r6
   1300c:	2207      	movs	r2, #7
   1300e:	f04f 37ff 	mov.w	r7, #4294967295
   13012:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   13016:	464e      	mov	r6, r9
   13018:	e77f      	b.n	12f1a <_strtoull_l.constprop.0+0x7a>
   1301a:	f04f 0a00 	mov.w	sl, #0
   1301e:	e75d      	b.n	12edc <_strtoull_l.constprop.0+0x3c>
   13020:	220f      	movs	r2, #15
   13022:	f04f 37ff 	mov.w	r7, #4294967295
   13026:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1302a:	46b1      	mov	r9, r6
   1302c:	f04f 0a00 	mov.w	sl, #0
   13030:	e773      	b.n	12f1a <_strtoull_l.constprop.0+0x7a>
   13032:	bf00      	nop
   13034:	20000d59 	.word	0x20000d59
   13038:	19999999 	.word	0x19999999

0001303c <_strtoull_r>:
   1303c:	f7ff bf30 	b.w	12ea0 <_strtoull_l.constprop.0>

00013040 <_mbrtowc_r>:
   13040:	b570      	push	{r4, r5, r6, lr}
   13042:	b082      	sub	sp, #8
   13044:	4604      	mov	r4, r0
   13046:	9d06      	ldr	r5, [sp, #24]
   13048:	b155      	cbz	r5, 13060 <_mbrtowc_r+0x20>
   1304a:	b16a      	cbz	r2, 13068 <_mbrtowc_r+0x28>
   1304c:	480f      	ldr	r0, [pc, #60]	; (1308c <_mbrtowc_r+0x4c>)
   1304e:	9500      	str	r5, [sp, #0]
   13050:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   13054:	4620      	mov	r0, r4
   13056:	47b0      	blx	r6
   13058:	1c43      	adds	r3, r0, #1
   1305a:	d010      	beq.n	1307e <_mbrtowc_r+0x3e>
   1305c:	b002      	add	sp, #8
   1305e:	bd70      	pop	{r4, r5, r6, pc}
   13060:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   13064:	2a00      	cmp	r2, #0
   13066:	d1f1      	bne.n	1304c <_mbrtowc_r+0xc>
   13068:	4b08      	ldr	r3, [pc, #32]	; (1308c <_mbrtowc_r+0x4c>)
   1306a:	9500      	str	r5, [sp, #0]
   1306c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   13070:	4611      	mov	r1, r2
   13072:	2301      	movs	r3, #1
   13074:	4a06      	ldr	r2, [pc, #24]	; (13090 <_mbrtowc_r+0x50>)
   13076:	4620      	mov	r0, r4
   13078:	47b0      	blx	r6
   1307a:	1c43      	adds	r3, r0, #1
   1307c:	d1ee      	bne.n	1305c <_mbrtowc_r+0x1c>
   1307e:	2200      	movs	r2, #0
   13080:	238a      	movs	r3, #138	; 0x8a
   13082:	602a      	str	r2, [r5, #0]
   13084:	6023      	str	r3, [r4, #0]
   13086:	b002      	add	sp, #8
   13088:	bd70      	pop	{r4, r5, r6, pc}
   1308a:	bf00      	nop
   1308c:	200088f4 	.word	0x200088f4
   13090:	2000832c 	.word	0x2000832c

00013094 <_wcrtomb_r>:
   13094:	b570      	push	{r4, r5, r6, lr}
   13096:	4605      	mov	r5, r0
   13098:	b084      	sub	sp, #16
   1309a:	b15b      	cbz	r3, 130b4 <_wcrtomb_r+0x20>
   1309c:	461c      	mov	r4, r3
   1309e:	b169      	cbz	r1, 130bc <_wcrtomb_r+0x28>
   130a0:	4b0e      	ldr	r3, [pc, #56]	; (130dc <_wcrtomb_r+0x48>)
   130a2:	4628      	mov	r0, r5
   130a4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   130a8:	4623      	mov	r3, r4
   130aa:	47b0      	blx	r6
   130ac:	1c43      	adds	r3, r0, #1
   130ae:	d00f      	beq.n	130d0 <_wcrtomb_r+0x3c>
   130b0:	b004      	add	sp, #16
   130b2:	bd70      	pop	{r4, r5, r6, pc}
   130b4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   130b8:	2900      	cmp	r1, #0
   130ba:	d1f1      	bne.n	130a0 <_wcrtomb_r+0xc>
   130bc:	4a07      	ldr	r2, [pc, #28]	; (130dc <_wcrtomb_r+0x48>)
   130be:	4623      	mov	r3, r4
   130c0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   130c4:	4628      	mov	r0, r5
   130c6:	460a      	mov	r2, r1
   130c8:	a901      	add	r1, sp, #4
   130ca:	47b0      	blx	r6
   130cc:	1c43      	adds	r3, r0, #1
   130ce:	d1ef      	bne.n	130b0 <_wcrtomb_r+0x1c>
   130d0:	2200      	movs	r2, #0
   130d2:	238a      	movs	r3, #138	; 0x8a
   130d4:	6022      	str	r2, [r4, #0]
   130d6:	602b      	str	r3, [r5, #0]
   130d8:	b004      	add	sp, #16
   130da:	bd70      	pop	{r4, r5, r6, pc}
   130dc:	200088f4 	.word	0x200088f4

000130e0 <_wcsrtombs_r>:
   130e0:	b510      	push	{r4, lr}
   130e2:	b082      	sub	sp, #8
   130e4:	9c04      	ldr	r4, [sp, #16]
   130e6:	e9cd 3400 	strd	r3, r4, [sp]
   130ea:	f04f 33ff 	mov.w	r3, #4294967295
   130ee:	f001 fd9f 	bl	14c30 <_wcsnrtombs_r>
   130f2:	b002      	add	sp, #8
   130f4:	bd10      	pop	{r4, pc}
   130f6:	bf00      	nop

000130f8 <iswspace>:
   130f8:	2100      	movs	r1, #0
   130fa:	f000 b801 	b.w	13100 <iswspace_l>
   130fe:	bf00      	nop

00013100 <iswspace_l>:
   13100:	b510      	push	{r4, lr}
   13102:	f000 f8ab 	bl	1325c <_jp2uc_l>
   13106:	4604      	mov	r4, r0
   13108:	f001 fda4 	bl	14c54 <category>
   1310c:	f1a0 031a 	sub.w	r3, r0, #26
   13110:	b2db      	uxtb	r3, r3
   13112:	2b02      	cmp	r3, #2
   13114:	d906      	bls.n	13124 <iswspace_l+0x24>
   13116:	f1a4 0009 	sub.w	r0, r4, #9
   1311a:	2804      	cmp	r0, #4
   1311c:	bf8c      	ite	hi
   1311e:	2000      	movhi	r0, #0
   13120:	2001      	movls	r0, #1
   13122:	bd10      	pop	{r4, pc}
   13124:	2001      	movs	r0, #1
   13126:	bd10      	pop	{r4, pc}

00013128 <__jp2uc>:
   13128:	2902      	cmp	r1, #2
   1312a:	d032      	beq.n	13192 <__jp2uc+0x6a>
   1312c:	2903      	cmp	r1, #3
   1312e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   13132:	bf1d      	ittte	ne
   13134:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   13138:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1313c:	b2d2      	uxtbne	r2, r2
   1313e:	b2c2      	uxtbeq	r2, r0
   13140:	f103 0150 	add.w	r1, r3, #80	; 0x50
   13144:	b2c9      	uxtb	r1, r1
   13146:	291f      	cmp	r1, #31
   13148:	d806      	bhi.n	13158 <__jp2uc+0x30>
   1314a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1314e:	4288      	cmp	r0, r1
   13150:	d969      	bls.n	13226 <__jp2uc+0xfe>
   13152:	f04f 30ff 	mov.w	r0, #4294967295
   13156:	4770      	bx	lr
   13158:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1315c:	b2c9      	uxtb	r1, r1
   1315e:	2924      	cmp	r1, #36	; 0x24
   13160:	d80e      	bhi.n	13180 <__jp2uc+0x58>
   13162:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   13166:	4288      	cmp	r0, r1
   13168:	d8f3      	bhi.n	13152 <__jp2uc+0x2a>
   1316a:	3bd0      	subs	r3, #208	; 0xd0
   1316c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   13170:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13174:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   13178:	4a30      	ldr	r2, [pc, #192]	; (1323c <__jp2uc+0x114>)
   1317a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1317e:	4770      	bx	lr
   13180:	3ba1      	subs	r3, #161	; 0xa1
   13182:	2b07      	cmp	r3, #7
   13184:	d8e5      	bhi.n	13152 <__jp2uc+0x2a>
   13186:	e8df f003 	tbb	[pc, r3]
   1318a:	3e48      	.short	0x3e48
   1318c:	25292e34 	.word	0x25292e34
   13190:	1921      	.short	0x1921
   13192:	b2c2      	uxtb	r2, r0
   13194:	2a9e      	cmp	r2, #158	; 0x9e
   13196:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1319a:	d90b      	bls.n	131b4 <__jp2uc+0x8c>
   1319c:	3223      	adds	r2, #35	; 0x23
   1319e:	b2d2      	uxtb	r2, r2
   131a0:	2380      	movs	r3, #128	; 0x80
   131a2:	299f      	cmp	r1, #159	; 0x9f
   131a4:	bf94      	ite	ls
   131a6:	3970      	subls	r1, #112	; 0x70
   131a8:	3150      	addhi	r1, #80	; 0x50
   131aa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   131ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   131b2:	e7c5      	b.n	13140 <__jp2uc+0x18>
   131b4:	3a7e      	subs	r2, #126	; 0x7e
   131b6:	b2d2      	uxtb	r2, r2
   131b8:	237f      	movs	r3, #127	; 0x7f
   131ba:	e7f2      	b.n	131a2 <__jp2uc+0x7a>
   131bc:	2ac0      	cmp	r2, #192	; 0xc0
   131be:	d8c8      	bhi.n	13152 <__jp2uc+0x2a>
   131c0:	4b1f      	ldr	r3, [pc, #124]	; (13240 <__jp2uc+0x118>)
   131c2:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   131c6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   131ca:	4770      	bx	lr
   131cc:	2af1      	cmp	r2, #241	; 0xf1
   131ce:	d8c0      	bhi.n	13152 <__jp2uc+0x2a>
   131d0:	4b1c      	ldr	r3, [pc, #112]	; (13244 <__jp2uc+0x11c>)
   131d2:	e019      	b.n	13208 <__jp2uc+0xe0>
   131d4:	2ad8      	cmp	r2, #216	; 0xd8
   131d6:	d8bc      	bhi.n	13152 <__jp2uc+0x2a>
   131d8:	4b1b      	ldr	r3, [pc, #108]	; (13248 <__jp2uc+0x120>)
   131da:	e015      	b.n	13208 <__jp2uc+0xe0>
   131dc:	2af6      	cmp	r2, #246	; 0xf6
   131de:	d8b8      	bhi.n	13152 <__jp2uc+0x2a>
   131e0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   131e4:	4770      	bx	lr
   131e6:	2af3      	cmp	r2, #243	; 0xf3
   131e8:	d8b3      	bhi.n	13152 <__jp2uc+0x2a>
   131ea:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   131ee:	3020      	adds	r0, #32
   131f0:	4770      	bx	lr
   131f2:	4b16      	ldr	r3, [pc, #88]	; (1324c <__jp2uc+0x124>)
   131f4:	4413      	add	r3, r2
   131f6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   131fa:	2b00      	cmp	r3, #0
   131fc:	d0a9      	beq.n	13152 <__jp2uc+0x2a>
   131fe:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   13202:	3060      	adds	r0, #96	; 0x60
   13204:	4770      	bx	lr
   13206:	4b12      	ldr	r3, [pc, #72]	; (13250 <__jp2uc+0x128>)
   13208:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1320c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13210:	2800      	cmp	r0, #0
   13212:	bf08      	it	eq
   13214:	f04f 30ff 	moveq.w	r0, #4294967295
   13218:	4770      	bx	lr
   1321a:	4b0e      	ldr	r3, [pc, #56]	; (13254 <__jp2uc+0x12c>)
   1321c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13220:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13224:	4770      	bx	lr
   13226:	3bb0      	subs	r3, #176	; 0xb0
   13228:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1322c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13230:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   13234:	4a08      	ldr	r2, [pc, #32]	; (13258 <__jp2uc+0x130>)
   13236:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1323a:	4770      	bx	lr
   1323c:	20005ee8 	.word	0x20005ee8
   13240:	20001210 	.word	0x20001210
   13244:	2000116c 	.word	0x2000116c
   13248:	200010fc 	.word	0x200010fc
   1324c:	200010a0 	.word	0x200010a0
   13250:	20000fe4 	.word	0x20000fe4
   13254:	20000f28 	.word	0x20000f28
   13258:	20001250 	.word	0x20001250

0001325c <_jp2uc_l>:
   1325c:	b538      	push	{r3, r4, r5, lr}
   1325e:	4605      	mov	r5, r0
   13260:	b1b9      	cbz	r1, 13292 <_jp2uc_l+0x36>
   13262:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   13266:	4912      	ldr	r1, [pc, #72]	; (132b0 <_jp2uc_l+0x54>)
   13268:	4620      	mov	r0, r4
   1326a:	f7f9 fc5d 	bl	cb28 <strcmp>
   1326e:	b928      	cbnz	r0, 1327c <_jp2uc_l+0x20>
   13270:	4628      	mov	r0, r5
   13272:	2101      	movs	r1, #1
   13274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13278:	f7ff bf56 	b.w	13128 <__jp2uc>
   1327c:	490d      	ldr	r1, [pc, #52]	; (132b4 <_jp2uc_l+0x58>)
   1327e:	4620      	mov	r0, r4
   13280:	f7f9 fc52 	bl	cb28 <strcmp>
   13284:	b938      	cbnz	r0, 13296 <_jp2uc_l+0x3a>
   13286:	4628      	mov	r0, r5
   13288:	2102      	movs	r1, #2
   1328a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1328e:	f7ff bf4b 	b.w	13128 <__jp2uc>
   13292:	4c09      	ldr	r4, [pc, #36]	; (132b8 <_jp2uc_l+0x5c>)
   13294:	e7e7      	b.n	13266 <_jp2uc_l+0xa>
   13296:	4909      	ldr	r1, [pc, #36]	; (132bc <_jp2uc_l+0x60>)
   13298:	4620      	mov	r0, r4
   1329a:	f7f9 fc45 	bl	cb28 <strcmp>
   1329e:	b928      	cbnz	r0, 132ac <_jp2uc_l+0x50>
   132a0:	4628      	mov	r0, r5
   132a2:	2103      	movs	r1, #3
   132a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   132a8:	f7ff bf3e 	b.w	13128 <__jp2uc>
   132ac:	4628      	mov	r0, r5
   132ae:	bd38      	pop	{r3, r4, r5, pc}
   132b0:	20000ec8 	.word	0x20000ec8
   132b4:	20000ecc 	.word	0x20000ecc
   132b8:	20008a1e 	.word	0x20008a1e
   132bc:	20000ed4 	.word	0x20000ed4

000132c0 <fiprintf>:
   132c0:	b40e      	push	{r1, r2, r3}
   132c2:	b510      	push	{r4, lr}
   132c4:	b083      	sub	sp, #12
   132c6:	ab05      	add	r3, sp, #20
   132c8:	4c06      	ldr	r4, [pc, #24]	; (132e4 <fiprintf+0x24>)
   132ca:	f853 2b04 	ldr.w	r2, [r3], #4
   132ce:	9301      	str	r3, [sp, #4]
   132d0:	4601      	mov	r1, r0
   132d2:	6820      	ldr	r0, [r4, #0]
   132d4:	f000 f97c 	bl	135d0 <_vfiprintf_r>
   132d8:	b003      	add	sp, #12
   132da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   132de:	b003      	add	sp, #12
   132e0:	4770      	bx	lr
   132e2:	bf00      	nop
   132e4:	20008e7c 	.word	0x20008e7c

000132e8 <__ssprint_r>:
   132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132ec:	6893      	ldr	r3, [r2, #8]
   132ee:	6817      	ldr	r7, [r2, #0]
   132f0:	b083      	sub	sp, #12
   132f2:	4692      	mov	sl, r2
   132f4:	2b00      	cmp	r3, #0
   132f6:	d070      	beq.n	133da <__ssprint_r+0xf2>
   132f8:	4681      	mov	r9, r0
   132fa:	688a      	ldr	r2, [r1, #8]
   132fc:	6808      	ldr	r0, [r1, #0]
   132fe:	460c      	mov	r4, r1
   13300:	3708      	adds	r7, #8
   13302:	e043      	b.n	1338c <__ssprint_r+0xa4>
   13304:	89a3      	ldrh	r3, [r4, #12]
   13306:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1330a:	d02e      	beq.n	1336a <__ssprint_r+0x82>
   1330c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   13310:	eba0 0801 	sub.w	r8, r0, r1
   13314:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   13318:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1331c:	f108 0001 	add.w	r0, r8, #1
   13320:	1076      	asrs	r6, r6, #1
   13322:	4428      	add	r0, r5
   13324:	42b0      	cmp	r0, r6
   13326:	4632      	mov	r2, r6
   13328:	bf84      	itt	hi
   1332a:	4606      	movhi	r6, r0
   1332c:	4632      	movhi	r2, r6
   1332e:	055b      	lsls	r3, r3, #21
   13330:	d537      	bpl.n	133a2 <__ssprint_r+0xba>
   13332:	4611      	mov	r1, r2
   13334:	4648      	mov	r0, r9
   13336:	f7f7 fb5d 	bl	a9f4 <_malloc_r>
   1333a:	9001      	str	r0, [sp, #4]
   1333c:	2800      	cmp	r0, #0
   1333e:	d03a      	beq.n	133b6 <__ssprint_r+0xce>
   13340:	4642      	mov	r2, r8
   13342:	6921      	ldr	r1, [r4, #16]
   13344:	f7f4 ffe6 	bl	8314 <memcpy>
   13348:	89a2      	ldrh	r2, [r4, #12]
   1334a:	9b01      	ldr	r3, [sp, #4]
   1334c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13354:	81a2      	strh	r2, [r4, #12]
   13356:	eba6 0208 	sub.w	r2, r6, r8
   1335a:	eb03 0008 	add.w	r0, r3, r8
   1335e:	6166      	str	r6, [r4, #20]
   13360:	60a2      	str	r2, [r4, #8]
   13362:	6123      	str	r3, [r4, #16]
   13364:	6020      	str	r0, [r4, #0]
   13366:	462e      	mov	r6, r5
   13368:	46a8      	mov	r8, r5
   1336a:	4642      	mov	r2, r8
   1336c:	4659      	mov	r1, fp
   1336e:	f7f9 f9ed 	bl	c74c <memmove>
   13372:	f8da 3008 	ldr.w	r3, [sl, #8]
   13376:	68a2      	ldr	r2, [r4, #8]
   13378:	6820      	ldr	r0, [r4, #0]
   1337a:	1b92      	subs	r2, r2, r6
   1337c:	4440      	add	r0, r8
   1337e:	1b5b      	subs	r3, r3, r5
   13380:	60a2      	str	r2, [r4, #8]
   13382:	6020      	str	r0, [r4, #0]
   13384:	f8ca 3008 	str.w	r3, [sl, #8]
   13388:	b33b      	cbz	r3, 133da <__ssprint_r+0xf2>
   1338a:	3708      	adds	r7, #8
   1338c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   13390:	2d00      	cmp	r5, #0
   13392:	d0fa      	beq.n	1338a <__ssprint_r+0xa2>
   13394:	42aa      	cmp	r2, r5
   13396:	4616      	mov	r6, r2
   13398:	4690      	mov	r8, r2
   1339a:	d9b3      	bls.n	13304 <__ssprint_r+0x1c>
   1339c:	462e      	mov	r6, r5
   1339e:	46a8      	mov	r8, r5
   133a0:	e7e3      	b.n	1336a <__ssprint_r+0x82>
   133a2:	4648      	mov	r0, r9
   133a4:	f7f7 fdee 	bl	af84 <_realloc_r>
   133a8:	4603      	mov	r3, r0
   133aa:	2800      	cmp	r0, #0
   133ac:	d1d3      	bne.n	13356 <__ssprint_r+0x6e>
   133ae:	6921      	ldr	r1, [r4, #16]
   133b0:	4648      	mov	r0, r9
   133b2:	f7f9 fe97 	bl	d0e4 <_free_r>
   133b6:	89a3      	ldrh	r3, [r4, #12]
   133b8:	220c      	movs	r2, #12
   133ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133be:	f8c9 2000 	str.w	r2, [r9]
   133c2:	f04f 30ff 	mov.w	r0, #4294967295
   133c6:	81a3      	strh	r3, [r4, #12]
   133c8:	2200      	movs	r2, #0
   133ca:	2300      	movs	r3, #0
   133cc:	f8ca 2008 	str.w	r2, [sl, #8]
   133d0:	f8ca 3004 	str.w	r3, [sl, #4]
   133d4:	b003      	add	sp, #12
   133d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133da:	2000      	movs	r0, #0
   133dc:	2300      	movs	r3, #0
   133de:	f8ca 3004 	str.w	r3, [sl, #4]
   133e2:	b003      	add	sp, #12
   133e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000133e8 <_sungetc_r>:
   133e8:	b538      	push	{r3, r4, r5, lr}
   133ea:	1c4b      	adds	r3, r1, #1
   133ec:	d01a      	beq.n	13424 <_sungetc_r+0x3c>
   133ee:	8993      	ldrh	r3, [r2, #12]
   133f0:	4614      	mov	r4, r2
   133f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   133f4:	f023 0320 	bic.w	r3, r3, #32
   133f8:	81a3      	strh	r3, [r4, #12]
   133fa:	b2cd      	uxtb	r5, r1
   133fc:	b1aa      	cbz	r2, 1342a <_sungetc_r+0x42>
   133fe:	6862      	ldr	r2, [r4, #4]
   13400:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13402:	429a      	cmp	r2, r3
   13404:	da09      	bge.n	1341a <_sungetc_r+0x32>
   13406:	6823      	ldr	r3, [r4, #0]
   13408:	1e5a      	subs	r2, r3, #1
   1340a:	6022      	str	r2, [r4, #0]
   1340c:	f803 5c01 	strb.w	r5, [r3, #-1]
   13410:	6863      	ldr	r3, [r4, #4]
   13412:	3301      	adds	r3, #1
   13414:	6063      	str	r3, [r4, #4]
   13416:	4628      	mov	r0, r5
   13418:	bd38      	pop	{r3, r4, r5, pc}
   1341a:	4621      	mov	r1, r4
   1341c:	f001 fa58 	bl	148d0 <__submore>
   13420:	2800      	cmp	r0, #0
   13422:	d0f0      	beq.n	13406 <_sungetc_r+0x1e>
   13424:	f04f 35ff 	mov.w	r5, #4294967295
   13428:	e7f5      	b.n	13416 <_sungetc_r+0x2e>
   1342a:	6923      	ldr	r3, [r4, #16]
   1342c:	6822      	ldr	r2, [r4, #0]
   1342e:	b12b      	cbz	r3, 1343c <_sungetc_r+0x54>
   13430:	4293      	cmp	r3, r2
   13432:	d203      	bcs.n	1343c <_sungetc_r+0x54>
   13434:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   13438:	42ab      	cmp	r3, r5
   1343a:	d00f      	beq.n	1345c <_sungetc_r+0x74>
   1343c:	6861      	ldr	r1, [r4, #4]
   1343e:	63e1      	str	r1, [r4, #60]	; 0x3c
   13440:	4623      	mov	r3, r4
   13442:	63a2      	str	r2, [r4, #56]	; 0x38
   13444:	f104 0140 	add.w	r1, r4, #64	; 0x40
   13448:	2203      	movs	r2, #3
   1344a:	6362      	str	r2, [r4, #52]	; 0x34
   1344c:	6321      	str	r1, [r4, #48]	; 0x30
   1344e:	f803 5f42 	strb.w	r5, [r3, #66]!
   13452:	2201      	movs	r2, #1
   13454:	e9c4 3200 	strd	r3, r2, [r4]
   13458:	4628      	mov	r0, r5
   1345a:	bd38      	pop	{r3, r4, r5, pc}
   1345c:	6863      	ldr	r3, [r4, #4]
   1345e:	3a01      	subs	r2, #1
   13460:	3301      	adds	r3, #1
   13462:	e9c4 2300 	strd	r2, r3, [r4]
   13466:	e7d6      	b.n	13416 <_sungetc_r+0x2e>

00013468 <__ssrefill_r>:
   13468:	b510      	push	{r4, lr}
   1346a:	460c      	mov	r4, r1
   1346c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1346e:	b169      	cbz	r1, 1348c <__ssrefill_r+0x24>
   13470:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13474:	4299      	cmp	r1, r3
   13476:	d001      	beq.n	1347c <__ssrefill_r+0x14>
   13478:	f7f9 fe34 	bl	d0e4 <_free_r>
   1347c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1347e:	6063      	str	r3, [r4, #4]
   13480:	2000      	movs	r0, #0
   13482:	6320      	str	r0, [r4, #48]	; 0x30
   13484:	b113      	cbz	r3, 1348c <__ssrefill_r+0x24>
   13486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13488:	6023      	str	r3, [r4, #0]
   1348a:	bd10      	pop	{r4, pc}
   1348c:	89a3      	ldrh	r3, [r4, #12]
   1348e:	6921      	ldr	r1, [r4, #16]
   13490:	2200      	movs	r2, #0
   13492:	f043 0320 	orr.w	r3, r3, #32
   13496:	e9c4 1200 	strd	r1, r2, [r4]
   1349a:	81a3      	strh	r3, [r4, #12]
   1349c:	f04f 30ff 	mov.w	r0, #4294967295
   134a0:	bd10      	pop	{r4, pc}
   134a2:	bf00      	nop

000134a4 <_sfread_r>:
   134a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134a8:	b085      	sub	sp, #20
   134aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   134ae:	fb02 f303 	mul.w	r3, r2, r3
   134b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   134b4:	9301      	str	r3, [sp, #4]
   134b6:	b3a3      	cbz	r3, 13522 <_sfread_r+0x7e>
   134b8:	f8d4 a004 	ldr.w	sl, [r4, #4]
   134bc:	9b01      	ldr	r3, [sp, #4]
   134be:	4553      	cmp	r3, sl
   134c0:	468b      	mov	fp, r1
   134c2:	d946      	bls.n	13552 <_sfread_r+0xae>
   134c4:	46a0      	mov	r8, r4
   134c6:	9d01      	ldr	r5, [sp, #4]
   134c8:	f858 1b40 	ldr.w	r1, [r8], #64
   134cc:	4607      	mov	r7, r0
   134ce:	2600      	movs	r6, #0
   134d0:	4652      	mov	r2, sl
   134d2:	4658      	mov	r0, fp
   134d4:	f7f4 ff1e 	bl	8314 <memcpy>
   134d8:	6823      	ldr	r3, [r4, #0]
   134da:	6b22      	ldr	r2, [r4, #48]	; 0x30
   134dc:	4453      	add	r3, sl
   134de:	46a9      	mov	r9, r5
   134e0:	e9c4 3600 	strd	r3, r6, [r4]
   134e4:	4611      	mov	r1, r2
   134e6:	4638      	mov	r0, r7
   134e8:	44d3      	add	fp, sl
   134ea:	eba5 050a 	sub.w	r5, r5, sl
   134ee:	b1e2      	cbz	r2, 1352a <_sfread_r+0x86>
   134f0:	4542      	cmp	r2, r8
   134f2:	d001      	beq.n	134f8 <_sfread_r+0x54>
   134f4:	f7f9 fdf6 	bl	d0e4 <_free_r>
   134f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   134fa:	6326      	str	r6, [r4, #48]	; 0x30
   134fc:	6063      	str	r3, [r4, #4]
   134fe:	b1a3      	cbz	r3, 1352a <_sfread_r+0x86>
   13500:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   13502:	6021      	str	r1, [r4, #0]
   13504:	42ab      	cmp	r3, r5
   13506:	469a      	mov	sl, r3
   13508:	d3e2      	bcc.n	134d0 <_sfread_r+0x2c>
   1350a:	9b02      	ldr	r3, [sp, #8]
   1350c:	9301      	str	r3, [sp, #4]
   1350e:	462a      	mov	r2, r5
   13510:	4658      	mov	r0, fp
   13512:	f7f4 feff 	bl	8314 <memcpy>
   13516:	e9d4 3200 	ldrd	r3, r2, [r4]
   1351a:	1b52      	subs	r2, r2, r5
   1351c:	442b      	add	r3, r5
   1351e:	e9c4 3200 	strd	r3, r2, [r4]
   13522:	9801      	ldr	r0, [sp, #4]
   13524:	b005      	add	sp, #20
   13526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1352a:	9a01      	ldr	r2, [sp, #4]
   1352c:	9b03      	ldr	r3, [sp, #12]
   1352e:	4452      	add	r2, sl
   13530:	eba2 0209 	sub.w	r2, r2, r9
   13534:	fbb2 f3f3 	udiv	r3, r2, r3
   13538:	9301      	str	r3, [sp, #4]
   1353a:	89a3      	ldrh	r3, [r4, #12]
   1353c:	6922      	ldr	r2, [r4, #16]
   1353e:	9801      	ldr	r0, [sp, #4]
   13540:	f043 0320 	orr.w	r3, r3, #32
   13544:	81a3      	strh	r3, [r4, #12]
   13546:	2300      	movs	r3, #0
   13548:	e9c4 2300 	strd	r2, r3, [r4]
   1354c:	b005      	add	sp, #20
   1354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13552:	6821      	ldr	r1, [r4, #0]
   13554:	461d      	mov	r5, r3
   13556:	e7d8      	b.n	1350a <_sfread_r+0x66>

00013558 <__sprint_r.part.0>:
   13558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1355c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1355e:	049c      	lsls	r4, r3, #18
   13560:	4690      	mov	r8, r2
   13562:	d52d      	bpl.n	135c0 <__sprint_r.part.0+0x68>
   13564:	6893      	ldr	r3, [r2, #8]
   13566:	6812      	ldr	r2, [r2, #0]
   13568:	b343      	cbz	r3, 135bc <__sprint_r.part.0+0x64>
   1356a:	468b      	mov	fp, r1
   1356c:	4606      	mov	r6, r0
   1356e:	f102 0908 	add.w	r9, r2, #8
   13572:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   13576:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1357a:	d015      	beq.n	135a8 <__sprint_r.part.0+0x50>
   1357c:	3d04      	subs	r5, #4
   1357e:	2400      	movs	r4, #0
   13580:	e001      	b.n	13586 <__sprint_r.part.0+0x2e>
   13582:	42a7      	cmp	r7, r4
   13584:	d00e      	beq.n	135a4 <__sprint_r.part.0+0x4c>
   13586:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1358a:	465a      	mov	r2, fp
   1358c:	4630      	mov	r0, r6
   1358e:	f001 fa97 	bl	14ac0 <_fputwc_r>
   13592:	1c43      	adds	r3, r0, #1
   13594:	f104 0401 	add.w	r4, r4, #1
   13598:	d1f3      	bne.n	13582 <__sprint_r.part.0+0x2a>
   1359a:	2300      	movs	r3, #0
   1359c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   135a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   135a8:	f02a 0a03 	bic.w	sl, sl, #3
   135ac:	eba3 030a 	sub.w	r3, r3, sl
   135b0:	f8c8 3008 	str.w	r3, [r8, #8]
   135b4:	f109 0908 	add.w	r9, r9, #8
   135b8:	2b00      	cmp	r3, #0
   135ba:	d1da      	bne.n	13572 <__sprint_r.part.0+0x1a>
   135bc:	2000      	movs	r0, #0
   135be:	e7ec      	b.n	1359a <__sprint_r.part.0+0x42>
   135c0:	f001 f80c 	bl	145dc <__sfvwrite_r>
   135c4:	2300      	movs	r3, #0
   135c6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   135ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ce:	bf00      	nop

000135d0 <_vfiprintf_r>:
   135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d4:	ed2d 8b02 	vpush	{d8}
   135d8:	b0c5      	sub	sp, #276	; 0x114
   135da:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   135de:	4683      	mov	fp, r0
   135e0:	ee08 1a10 	vmov	s16, r1
   135e4:	4616      	mov	r6, r2
   135e6:	2100      	movs	r1, #0
   135e8:	2208      	movs	r2, #8
   135ea:	4650      	mov	r0, sl
   135ec:	461c      	mov	r4, r3
   135ee:	9307      	str	r3, [sp, #28]
   135f0:	f7f9 f928 	bl	c844 <memset>
   135f4:	f1bb 0f00 	cmp.w	fp, #0
   135f8:	d004      	beq.n	13604 <_vfiprintf_r+0x34>
   135fa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   135fe:	2b00      	cmp	r3, #0
   13600:	f000 86a0 	beq.w	14344 <_vfiprintf_r+0xd74>
   13604:	ee18 2a10 	vmov	r2, s16
   13608:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1360a:	07db      	lsls	r3, r3, #31
   1360c:	f140 8513 	bpl.w	14036 <_vfiprintf_r+0xa66>
   13610:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   13614:	b28a      	uxth	r2, r1
   13616:	0495      	lsls	r5, r2, #18
   13618:	d40b      	bmi.n	13632 <_vfiprintf_r+0x62>
   1361a:	ee18 3a10 	vmov	r3, s16
   1361e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   13622:	8199      	strh	r1, [r3, #12]
   13624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13626:	b28a      	uxth	r2, r1
   13628:	ee18 1a10 	vmov	r1, s16
   1362c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   13630:	664b      	str	r3, [r1, #100]	; 0x64
   13632:	0710      	lsls	r0, r2, #28
   13634:	f140 8105 	bpl.w	13842 <_vfiprintf_r+0x272>
   13638:	ee18 3a10 	vmov	r3, s16
   1363c:	691b      	ldr	r3, [r3, #16]
   1363e:	2b00      	cmp	r3, #0
   13640:	f000 80ff 	beq.w	13842 <_vfiprintf_r+0x272>
   13644:	f002 031a 	and.w	r3, r2, #26
   13648:	2b0a      	cmp	r3, #10
   1364a:	f000 810a 	beq.w	13862 <_vfiprintf_r+0x292>
   1364e:	2300      	movs	r3, #0
   13650:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   13654:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   13658:	aa1b      	add	r2, sp, #108	; 0x6c
   1365a:	930c      	str	r3, [sp, #48]	; 0x30
   1365c:	9218      	str	r2, [sp, #96]	; 0x60
   1365e:	4691      	mov	r9, r2
   13660:	930b      	str	r3, [sp, #44]	; 0x2c
   13662:	9305      	str	r3, [sp, #20]
   13664:	46b0      	mov	r8, r6
   13666:	4644      	mov	r4, r8
   13668:	4ba8      	ldr	r3, [pc, #672]	; (1390c <_vfiprintf_r+0x33c>)
   1366a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1366e:	f7f9 f9b3 	bl	c9d8 <__locale_mb_cur_max>
   13672:	4622      	mov	r2, r4
   13674:	4603      	mov	r3, r0
   13676:	a912      	add	r1, sp, #72	; 0x48
   13678:	f8cd a000 	str.w	sl, [sp]
   1367c:	4658      	mov	r0, fp
   1367e:	47a8      	blx	r5
   13680:	2800      	cmp	r0, #0
   13682:	f000 8145 	beq.w	13910 <_vfiprintf_r+0x340>
   13686:	f2c0 8139 	blt.w	138fc <_vfiprintf_r+0x32c>
   1368a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1368c:	2a25      	cmp	r2, #37	; 0x25
   1368e:	4603      	mov	r3, r0
   13690:	d001      	beq.n	13696 <_vfiprintf_r+0xc6>
   13692:	441c      	add	r4, r3
   13694:	e7e8      	b.n	13668 <_vfiprintf_r+0x98>
   13696:	ebb4 0608 	subs.w	r6, r4, r8
   1369a:	4605      	mov	r5, r0
   1369c:	f040 813c 	bne.w	13918 <_vfiprintf_r+0x348>
   136a0:	2300      	movs	r3, #0
   136a2:	7861      	ldrb	r1, [r4, #1]
   136a4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   136a8:	f104 0801 	add.w	r8, r4, #1
   136ac:	9306      	str	r3, [sp, #24]
   136ae:	f04f 37ff 	mov.w	r7, #4294967295
   136b2:	461e      	mov	r6, r3
   136b4:	242b      	movs	r4, #43	; 0x2b
   136b6:	f108 0801 	add.w	r8, r8, #1
   136ba:	f1a1 0320 	sub.w	r3, r1, #32
   136be:	2b5a      	cmp	r3, #90	; 0x5a
   136c0:	f200 8178 	bhi.w	139b4 <_vfiprintf_r+0x3e4>
   136c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   136c8:	017602b5 	.word	0x017602b5
   136cc:	02b00176 	.word	0x02b00176
   136d0:	01760176 	.word	0x01760176
   136d4:	006a0176 	.word	0x006a0176
   136d8:	01760176 	.word	0x01760176
   136dc:	028d027d 	.word	0x028d027d
   136e0:	02880176 	.word	0x02880176
   136e4:	01760297 	.word	0x01760297
   136e8:	005b0292 	.word	0x005b0292
   136ec:	005b005b 	.word	0x005b005b
   136f0:	005b005b 	.word	0x005b005b
   136f4:	005b005b 	.word	0x005b005b
   136f8:	005b005b 	.word	0x005b005b
   136fc:	01760176 	.word	0x01760176
   13700:	01760176 	.word	0x01760176
   13704:	01760176 	.word	0x01760176
   13708:	01760176 	.word	0x01760176
   1370c:	025c0176 	.word	0x025c0176
   13710:	01760084 	.word	0x01760084
   13714:	01760176 	.word	0x01760176
   13718:	01760176 	.word	0x01760176
   1371c:	01760176 	.word	0x01760176
   13720:	01760176 	.word	0x01760176
   13724:	00e80176 	.word	0x00e80176
   13728:	01760176 	.word	0x01760176
   1372c:	02330176 	.word	0x02330176
   13730:	02da0176 	.word	0x02da0176
   13734:	01760176 	.word	0x01760176
   13738:	0176058b 	.word	0x0176058b
   1373c:	01760176 	.word	0x01760176
   13740:	01760176 	.word	0x01760176
   13744:	01760176 	.word	0x01760176
   13748:	01760176 	.word	0x01760176
   1374c:	025c0176 	.word	0x025c0176
   13750:	01760086 	.word	0x01760086
   13754:	01760176 	.word	0x01760176
   13758:	008602cd 	.word	0x008602cd
   1375c:	0176007f 	.word	0x0176007f
   13760:	017602c0 	.word	0x017602c0
   13764:	00ea02fd 	.word	0x00ea02fd
   13768:	007f02ed 	.word	0x007f02ed
   1376c:	02330176 	.word	0x02330176
   13770:	0569007c 	.word	0x0569007c
   13774:	01760176 	.word	0x01760176
   13778:	0176056b 	.word	0x0176056b
   1377c:	007c      	.short	0x007c
   1377e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13782:	2200      	movs	r2, #0
   13784:	f818 1b01 	ldrb.w	r1, [r8], #1
   13788:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1378c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   13790:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13794:	2b09      	cmp	r3, #9
   13796:	d9f5      	bls.n	13784 <_vfiprintf_r+0x1b4>
   13798:	9206      	str	r2, [sp, #24]
   1379a:	e78e      	b.n	136ba <_vfiprintf_r+0xea>
   1379c:	4658      	mov	r0, fp
   1379e:	f7fe fa7d 	bl	11c9c <_localeconv_r>
   137a2:	6843      	ldr	r3, [r0, #4]
   137a4:	930d      	str	r3, [sp, #52]	; 0x34
   137a6:	4618      	mov	r0, r3
   137a8:	f7f9 fb8a 	bl	cec0 <strlen>
   137ac:	900e      	str	r0, [sp, #56]	; 0x38
   137ae:	4605      	mov	r5, r0
   137b0:	4658      	mov	r0, fp
   137b2:	f7fe fa73 	bl	11c9c <_localeconv_r>
   137b6:	6883      	ldr	r3, [r0, #8]
   137b8:	930b      	str	r3, [sp, #44]	; 0x2c
   137ba:	2d00      	cmp	r5, #0
   137bc:	f040 84d6 	bne.w	1416c <_vfiprintf_r+0xb9c>
   137c0:	f898 1000 	ldrb.w	r1, [r8]
   137c4:	e777      	b.n	136b6 <_vfiprintf_r+0xe6>
   137c6:	f898 1000 	ldrb.w	r1, [r8]
   137ca:	f046 0620 	orr.w	r6, r6, #32
   137ce:	e772      	b.n	136b6 <_vfiprintf_r+0xe6>
   137d0:	f046 0610 	orr.w	r6, r6, #16
   137d4:	06b4      	lsls	r4, r6, #26
   137d6:	f140 818e 	bpl.w	13af6 <_vfiprintf_r+0x526>
   137da:	9b07      	ldr	r3, [sp, #28]
   137dc:	3307      	adds	r3, #7
   137de:	f023 0307 	bic.w	r3, r3, #7
   137e2:	461a      	mov	r2, r3
   137e4:	6859      	ldr	r1, [r3, #4]
   137e6:	f852 3b08 	ldr.w	r3, [r2], #8
   137ea:	9207      	str	r2, [sp, #28]
   137ec:	460a      	mov	r2, r1
   137ee:	2900      	cmp	r1, #0
   137f0:	f2c0 8470 	blt.w	140d4 <_vfiprintf_r+0xb04>
   137f4:	1c79      	adds	r1, r7, #1
   137f6:	f000 85a2 	beq.w	1433e <_vfiprintf_r+0xd6e>
   137fa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   137fe:	9103      	str	r1, [sp, #12]
   13800:	ea53 0102 	orrs.w	r1, r3, r2
   13804:	f000 843f 	beq.w	14086 <_vfiprintf_r+0xab6>
   13808:	2b0a      	cmp	r3, #10
   1380a:	f172 0100 	sbcs.w	r1, r2, #0
   1380e:	f080 8541 	bcs.w	14294 <_vfiprintf_r+0xcc4>
   13812:	3330      	adds	r3, #48	; 0x30
   13814:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   13818:	9e03      	ldr	r6, [sp, #12]
   1381a:	2301      	movs	r3, #1
   1381c:	9304      	str	r3, [sp, #16]
   1381e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   13822:	9b04      	ldr	r3, [sp, #16]
   13824:	42bb      	cmp	r3, r7
   13826:	bfb8      	it	lt
   13828:	463b      	movlt	r3, r7
   1382a:	9303      	str	r3, [sp, #12]
   1382c:	2300      	movs	r3, #0
   1382e:	9308      	str	r3, [sp, #32]
   13830:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13834:	2b00      	cmp	r3, #0
   13836:	f000 80cb 	beq.w	139d0 <_vfiprintf_r+0x400>
   1383a:	9b03      	ldr	r3, [sp, #12]
   1383c:	3301      	adds	r3, #1
   1383e:	9303      	str	r3, [sp, #12]
   13840:	e0c6      	b.n	139d0 <_vfiprintf_r+0x400>
   13842:	ee18 1a10 	vmov	r1, s16
   13846:	4658      	mov	r0, fp
   13848:	ee18 5a10 	vmov	r5, s16
   1384c:	f001 f87c 	bl	14948 <__swsetup_r>
   13850:	2800      	cmp	r0, #0
   13852:	f040 8652 	bne.w	144fa <_vfiprintf_r+0xf2a>
   13856:	89aa      	ldrh	r2, [r5, #12]
   13858:	f002 031a 	and.w	r3, r2, #26
   1385c:	2b0a      	cmp	r3, #10
   1385e:	f47f aef6 	bne.w	1364e <_vfiprintf_r+0x7e>
   13862:	ee18 1a10 	vmov	r1, s16
   13866:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1386a:	2b00      	cmp	r3, #0
   1386c:	f6ff aeef 	blt.w	1364e <_vfiprintf_r+0x7e>
   13870:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13872:	07db      	lsls	r3, r3, #31
   13874:	d402      	bmi.n	1387c <_vfiprintf_r+0x2ac>
   13876:	0597      	lsls	r7, r2, #22
   13878:	f140 8612 	bpl.w	144a0 <_vfiprintf_r+0xed0>
   1387c:	ee18 1a10 	vmov	r1, s16
   13880:	4623      	mov	r3, r4
   13882:	4632      	mov	r2, r6
   13884:	4658      	mov	r0, fp
   13886:	f000 fe69 	bl	1455c <__sbprintf>
   1388a:	9005      	str	r0, [sp, #20]
   1388c:	9805      	ldr	r0, [sp, #20]
   1388e:	b045      	add	sp, #276	; 0x114
   13890:	ecbd 8b02 	vpop	{d8}
   13894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13898:	f046 0610 	orr.w	r6, r6, #16
   1389c:	f016 0220 	ands.w	r2, r6, #32
   138a0:	f000 8136 	beq.w	13b10 <_vfiprintf_r+0x540>
   138a4:	9b07      	ldr	r3, [sp, #28]
   138a6:	3307      	adds	r3, #7
   138a8:	f023 0307 	bic.w	r3, r3, #7
   138ac:	4619      	mov	r1, r3
   138ae:	685a      	ldr	r2, [r3, #4]
   138b0:	f851 3b08 	ldr.w	r3, [r1], #8
   138b4:	9107      	str	r1, [sp, #28]
   138b6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   138ba:	9103      	str	r1, [sp, #12]
   138bc:	2100      	movs	r1, #0
   138be:	2000      	movs	r0, #0
   138c0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   138c4:	1c78      	adds	r0, r7, #1
   138c6:	f000 8210 	beq.w	13cea <_vfiprintf_r+0x71a>
   138ca:	9803      	ldr	r0, [sp, #12]
   138cc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   138d0:	ea53 0002 	orrs.w	r0, r3, r2
   138d4:	f040 8208 	bne.w	13ce8 <_vfiprintf_r+0x718>
   138d8:	2f00      	cmp	r7, #0
   138da:	f040 8538 	bne.w	1434e <_vfiprintf_r+0xd7e>
   138de:	2900      	cmp	r1, #0
   138e0:	f040 83d5 	bne.w	1408e <_vfiprintf_r+0xabe>
   138e4:	9b03      	ldr	r3, [sp, #12]
   138e6:	f013 0301 	ands.w	r3, r3, #1
   138ea:	9304      	str	r3, [sp, #16]
   138ec:	f000 8411 	beq.w	14112 <_vfiprintf_r+0xb42>
   138f0:	2330      	movs	r3, #48	; 0x30
   138f2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   138f6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   138fa:	e792      	b.n	13822 <_vfiprintf_r+0x252>
   138fc:	2208      	movs	r2, #8
   138fe:	2100      	movs	r1, #0
   13900:	4650      	mov	r0, sl
   13902:	f7f8 ff9f 	bl	c844 <memset>
   13906:	2301      	movs	r3, #1
   13908:	441c      	add	r4, r3
   1390a:	e6ad      	b.n	13668 <_vfiprintf_r+0x98>
   1390c:	200088f4 	.word	0x200088f4
   13910:	ebb4 0608 	subs.w	r6, r4, r8
   13914:	4605      	mov	r5, r0
   13916:	d01b      	beq.n	13950 <_vfiprintf_r+0x380>
   13918:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1391a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1391c:	3301      	adds	r3, #1
   1391e:	4432      	add	r2, r6
   13920:	2b07      	cmp	r3, #7
   13922:	e9c9 8600 	strd	r8, r6, [r9]
   13926:	921a      	str	r2, [sp, #104]	; 0x68
   13928:	9319      	str	r3, [sp, #100]	; 0x64
   1392a:	dd1c      	ble.n	13966 <_vfiprintf_r+0x396>
   1392c:	2a00      	cmp	r2, #0
   1392e:	f000 83a6 	beq.w	1407e <_vfiprintf_r+0xaae>
   13932:	ee18 1a10 	vmov	r1, s16
   13936:	aa18      	add	r2, sp, #96	; 0x60
   13938:	4658      	mov	r0, fp
   1393a:	f7ff fe0d 	bl	13558 <__sprint_r.part.0>
   1393e:	bb20      	cbnz	r0, 1398a <_vfiprintf_r+0x3ba>
   13940:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13944:	9b05      	ldr	r3, [sp, #20]
   13946:	4433      	add	r3, r6
   13948:	9305      	str	r3, [sp, #20]
   1394a:	2d00      	cmp	r5, #0
   1394c:	f47f aea8 	bne.w	136a0 <_vfiprintf_r+0xd0>
   13950:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13952:	2b00      	cmp	r3, #0
   13954:	f040 85c1 	bne.w	144da <_vfiprintf_r+0xf0a>
   13958:	ee18 3a10 	vmov	r3, s16
   1395c:	2200      	movs	r2, #0
   1395e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13962:	9219      	str	r2, [sp, #100]	; 0x64
   13964:	e015      	b.n	13992 <_vfiprintf_r+0x3c2>
   13966:	f109 0908 	add.w	r9, r9, #8
   1396a:	e7eb      	b.n	13944 <_vfiprintf_r+0x374>
   1396c:	ee18 1a10 	vmov	r1, s16
   13970:	aa18      	add	r2, sp, #96	; 0x60
   13972:	4658      	mov	r0, fp
   13974:	f7ff fdf0 	bl	13558 <__sprint_r.part.0>
   13978:	2800      	cmp	r0, #0
   1397a:	f000 80a6 	beq.w	13aca <_vfiprintf_r+0x4fa>
   1397e:	9b08      	ldr	r3, [sp, #32]
   13980:	b11b      	cbz	r3, 1398a <_vfiprintf_r+0x3ba>
   13982:	9908      	ldr	r1, [sp, #32]
   13984:	4658      	mov	r0, fp
   13986:	f7f9 fbad 	bl	d0e4 <_free_r>
   1398a:	ee18 3a10 	vmov	r3, s16
   1398e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13992:	ee18 2a10 	vmov	r2, s16
   13996:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13998:	f012 0f01 	tst.w	r2, #1
   1399c:	b29a      	uxth	r2, r3
   1399e:	f000 80a0 	beq.w	13ae2 <_vfiprintf_r+0x512>
   139a2:	0650      	lsls	r0, r2, #25
   139a4:	f100 85b2 	bmi.w	1450c <_vfiprintf_r+0xf3c>
   139a8:	9805      	ldr	r0, [sp, #20]
   139aa:	b045      	add	sp, #276	; 0x114
   139ac:	ecbd 8b02 	vpop	{d8}
   139b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b4:	2900      	cmp	r1, #0
   139b6:	d0cb      	beq.n	13950 <_vfiprintf_r+0x380>
   139b8:	2300      	movs	r3, #0
   139ba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   139be:	2301      	movs	r3, #1
   139c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   139c4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   139c8:	ac2b      	add	r4, sp, #172	; 0xac
   139ca:	2300      	movs	r3, #0
   139cc:	9308      	str	r3, [sp, #32]
   139ce:	461f      	mov	r7, r3
   139d0:	f016 0302 	ands.w	r3, r6, #2
   139d4:	9309      	str	r3, [sp, #36]	; 0x24
   139d6:	d002      	beq.n	139de <_vfiprintf_r+0x40e>
   139d8:	9b03      	ldr	r3, [sp, #12]
   139da:	3302      	adds	r3, #2
   139dc:	9303      	str	r3, [sp, #12]
   139de:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   139e2:	930a      	str	r3, [sp, #40]	; 0x28
   139e4:	d105      	bne.n	139f2 <_vfiprintf_r+0x422>
   139e6:	9b06      	ldr	r3, [sp, #24]
   139e8:	9a03      	ldr	r2, [sp, #12]
   139ea:	1a9d      	subs	r5, r3, r2
   139ec:	2d00      	cmp	r5, #0
   139ee:	f300 827b 	bgt.w	13ee8 <_vfiprintf_r+0x918>
   139f2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   139f6:	1c41      	adds	r1, r0, #1
   139f8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   139fc:	b182      	cbz	r2, 13a20 <_vfiprintf_r+0x450>
   139fe:	2201      	movs	r2, #1
   13a00:	3301      	adds	r3, #1
   13a02:	f8c9 2004 	str.w	r2, [r9, #4]
   13a06:	2907      	cmp	r1, #7
   13a08:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   13a0c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13a10:	f8c9 2000 	str.w	r2, [r9]
   13a14:	f300 824a 	bgt.w	13eac <_vfiprintf_r+0x8dc>
   13a18:	4608      	mov	r0, r1
   13a1a:	f109 0908 	add.w	r9, r9, #8
   13a1e:	3101      	adds	r1, #1
   13a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13a22:	b1e2      	cbz	r2, 13a5e <_vfiprintf_r+0x48e>
   13a24:	aa11      	add	r2, sp, #68	; 0x44
   13a26:	3302      	adds	r3, #2
   13a28:	f8c9 2000 	str.w	r2, [r9]
   13a2c:	2907      	cmp	r1, #7
   13a2e:	f04f 0202 	mov.w	r2, #2
   13a32:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13a36:	f8c9 2004 	str.w	r2, [r9, #4]
   13a3a:	f340 8250 	ble.w	13ede <_vfiprintf_r+0x90e>
   13a3e:	2b00      	cmp	r3, #0
   13a40:	f000 8343 	beq.w	140ca <_vfiprintf_r+0xafa>
   13a44:	ee18 1a10 	vmov	r1, s16
   13a48:	aa18      	add	r2, sp, #96	; 0x60
   13a4a:	4658      	mov	r0, fp
   13a4c:	f7ff fd84 	bl	13558 <__sprint_r.part.0>
   13a50:	2800      	cmp	r0, #0
   13a52:	d194      	bne.n	1397e <_vfiprintf_r+0x3ae>
   13a54:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13a58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13a5c:	1c41      	adds	r1, r0, #1
   13a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13a60:	2a80      	cmp	r2, #128	; 0x80
   13a62:	f000 8184 	beq.w	13d6e <_vfiprintf_r+0x79e>
   13a66:	9a04      	ldr	r2, [sp, #16]
   13a68:	1abd      	subs	r5, r7, r2
   13a6a:	2d00      	cmp	r5, #0
   13a6c:	f300 81d7 	bgt.w	13e1e <_vfiprintf_r+0x84e>
   13a70:	9a04      	ldr	r2, [sp, #16]
   13a72:	f8c9 4000 	str.w	r4, [r9]
   13a76:	4413      	add	r3, r2
   13a78:	2907      	cmp	r1, #7
   13a7a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13a7e:	f8c9 2004 	str.w	r2, [r9, #4]
   13a82:	f340 816e 	ble.w	13d62 <_vfiprintf_r+0x792>
   13a86:	2b00      	cmp	r3, #0
   13a88:	f000 8275 	beq.w	13f76 <_vfiprintf_r+0x9a6>
   13a8c:	ee18 1a10 	vmov	r1, s16
   13a90:	aa18      	add	r2, sp, #96	; 0x60
   13a92:	4658      	mov	r0, fp
   13a94:	f7ff fd60 	bl	13558 <__sprint_r.part.0>
   13a98:	2800      	cmp	r0, #0
   13a9a:	f47f af70 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13a9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13aa0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13aa4:	0775      	lsls	r5, r6, #29
   13aa6:	d505      	bpl.n	13ab4 <_vfiprintf_r+0x4e4>
   13aa8:	9a06      	ldr	r2, [sp, #24]
   13aaa:	9903      	ldr	r1, [sp, #12]
   13aac:	1a54      	subs	r4, r2, r1
   13aae:	2c00      	cmp	r4, #0
   13ab0:	f300 826b 	bgt.w	13f8a <_vfiprintf_r+0x9ba>
   13ab4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   13ab8:	9803      	ldr	r0, [sp, #12]
   13aba:	4281      	cmp	r1, r0
   13abc:	bfac      	ite	ge
   13abe:	1852      	addge	r2, r2, r1
   13ac0:	1812      	addlt	r2, r2, r0
   13ac2:	9205      	str	r2, [sp, #20]
   13ac4:	2b00      	cmp	r3, #0
   13ac6:	f47f af51 	bne.w	1396c <_vfiprintf_r+0x39c>
   13aca:	9908      	ldr	r1, [sp, #32]
   13acc:	2300      	movs	r3, #0
   13ace:	9319      	str	r3, [sp, #100]	; 0x64
   13ad0:	2900      	cmp	r1, #0
   13ad2:	f000 8149 	beq.w	13d68 <_vfiprintf_r+0x798>
   13ad6:	4658      	mov	r0, fp
   13ad8:	f7f9 fb04 	bl	d0e4 <_free_r>
   13adc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ae0:	e5c1      	b.n	13666 <_vfiprintf_r+0x96>
   13ae2:	059c      	lsls	r4, r3, #22
   13ae4:	f53f af5d 	bmi.w	139a2 <_vfiprintf_r+0x3d2>
   13ae8:	ee18 4a10 	vmov	r4, s16
   13aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13aee:	f7f9 f80f 	bl	cb10 <__retarget_lock_release_recursive>
   13af2:	89a2      	ldrh	r2, [r4, #12]
   13af4:	e755      	b.n	139a2 <_vfiprintf_r+0x3d2>
   13af6:	06f0      	lsls	r0, r6, #27
   13af8:	9a07      	ldr	r2, [sp, #28]
   13afa:	f100 831f 	bmi.w	1413c <_vfiprintf_r+0xb6c>
   13afe:	0671      	lsls	r1, r6, #25
   13b00:	f140 8319 	bpl.w	14136 <_vfiprintf_r+0xb66>
   13b04:	f932 3b04 	ldrsh.w	r3, [r2], #4
   13b08:	9207      	str	r2, [sp, #28]
   13b0a:	17da      	asrs	r2, r3, #31
   13b0c:	4611      	mov	r1, r2
   13b0e:	e66e      	b.n	137ee <_vfiprintf_r+0x21e>
   13b10:	f016 0310 	ands.w	r3, r6, #16
   13b14:	9907      	ldr	r1, [sp, #28]
   13b16:	f040 8309 	bne.w	1412c <_vfiprintf_r+0xb5c>
   13b1a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   13b1e:	f000 8301 	beq.w	14124 <_vfiprintf_r+0xb54>
   13b22:	461a      	mov	r2, r3
   13b24:	f851 3b04 	ldr.w	r3, [r1], #4
   13b28:	9107      	str	r1, [sp, #28]
   13b2a:	b29b      	uxth	r3, r3
   13b2c:	e6c3      	b.n	138b6 <_vfiprintf_r+0x2e6>
   13b2e:	9b07      	ldr	r3, [sp, #28]
   13b30:	461a      	mov	r2, r3
   13b32:	2300      	movs	r3, #0
   13b34:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13b38:	4613      	mov	r3, r2
   13b3a:	f853 4b04 	ldr.w	r4, [r3], #4
   13b3e:	9303      	str	r3, [sp, #12]
   13b40:	2c00      	cmp	r4, #0
   13b42:	f000 8412 	beq.w	1436a <_vfiprintf_r+0xd9a>
   13b46:	2953      	cmp	r1, #83	; 0x53
   13b48:	f000 8365 	beq.w	14216 <_vfiprintf_r+0xc46>
   13b4c:	f016 0510 	ands.w	r5, r6, #16
   13b50:	f040 8361 	bne.w	14216 <_vfiprintf_r+0xc46>
   13b54:	1c7b      	adds	r3, r7, #1
   13b56:	f000 84b3 	beq.w	144c0 <_vfiprintf_r+0xef0>
   13b5a:	463a      	mov	r2, r7
   13b5c:	4629      	mov	r1, r5
   13b5e:	4620      	mov	r0, r4
   13b60:	f7f9 f94e 	bl	ce00 <memchr>
   13b64:	9008      	str	r0, [sp, #32]
   13b66:	2800      	cmp	r0, #0
   13b68:	f000 849f 	beq.w	144aa <_vfiprintf_r+0xeda>
   13b6c:	1b03      	subs	r3, r0, r4
   13b6e:	9a03      	ldr	r2, [sp, #12]
   13b70:	9304      	str	r3, [sp, #16]
   13b72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13b76:	462f      	mov	r7, r5
   13b78:	9207      	str	r2, [sp, #28]
   13b7a:	9303      	str	r3, [sp, #12]
   13b7c:	9508      	str	r5, [sp, #32]
   13b7e:	e657      	b.n	13830 <_vfiprintf_r+0x260>
   13b80:	2943      	cmp	r1, #67	; 0x43
   13b82:	d002      	beq.n	13b8a <_vfiprintf_r+0x5ba>
   13b84:	06f5      	lsls	r5, r6, #27
   13b86:	f140 832d 	bpl.w	141e4 <_vfiprintf_r+0xc14>
   13b8a:	9d07      	ldr	r5, [sp, #28]
   13b8c:	2208      	movs	r2, #8
   13b8e:	2100      	movs	r1, #0
   13b90:	a816      	add	r0, sp, #88	; 0x58
   13b92:	ac2b      	add	r4, sp, #172	; 0xac
   13b94:	f7f8 fe56 	bl	c844 <memset>
   13b98:	ab16      	add	r3, sp, #88	; 0x58
   13b9a:	f855 2b04 	ldr.w	r2, [r5], #4
   13b9e:	4621      	mov	r1, r4
   13ba0:	4658      	mov	r0, fp
   13ba2:	f7ff fa77 	bl	13094 <_wcrtomb_r>
   13ba6:	4603      	mov	r3, r0
   13ba8:	3301      	adds	r3, #1
   13baa:	9004      	str	r0, [sp, #16]
   13bac:	f000 84b3 	beq.w	14516 <_vfiprintf_r+0xf46>
   13bb0:	9b04      	ldr	r3, [sp, #16]
   13bb2:	9507      	str	r5, [sp, #28]
   13bb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13bb8:	9303      	str	r3, [sp, #12]
   13bba:	2300      	movs	r3, #0
   13bbc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13bc0:	e703      	b.n	139ca <_vfiprintf_r+0x3fa>
   13bc2:	9b07      	ldr	r3, [sp, #28]
   13bc4:	f853 2b04 	ldr.w	r2, [r3], #4
   13bc8:	9206      	str	r2, [sp, #24]
   13bca:	2a00      	cmp	r2, #0
   13bcc:	f280 829c 	bge.w	14108 <_vfiprintf_r+0xb38>
   13bd0:	9a06      	ldr	r2, [sp, #24]
   13bd2:	4252      	negs	r2, r2
   13bd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13bd8:	f898 1000 	ldrb.w	r1, [r8]
   13bdc:	f046 0604 	orr.w	r6, r6, #4
   13be0:	e569      	b.n	136b6 <_vfiprintf_r+0xe6>
   13be2:	f898 1000 	ldrb.w	r1, [r8]
   13be6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   13bea:	e564      	b.n	136b6 <_vfiprintf_r+0xe6>
   13bec:	f898 1000 	ldrb.w	r1, [r8]
   13bf0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   13bf4:	e55f      	b.n	136b6 <_vfiprintf_r+0xe6>
   13bf6:	4642      	mov	r2, r8
   13bf8:	f812 1b01 	ldrb.w	r1, [r2], #1
   13bfc:	292a      	cmp	r1, #42	; 0x2a
   13bfe:	f000 8496 	beq.w	1452e <_vfiprintf_r+0xf5e>
   13c02:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13c06:	2b09      	cmp	r3, #9
   13c08:	4690      	mov	r8, r2
   13c0a:	f04f 0700 	mov.w	r7, #0
   13c0e:	f63f ad54 	bhi.w	136ba <_vfiprintf_r+0xea>
   13c12:	f818 1b01 	ldrb.w	r1, [r8], #1
   13c16:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   13c1a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   13c1e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13c22:	2b09      	cmp	r3, #9
   13c24:	d9f5      	bls.n	13c12 <_vfiprintf_r+0x642>
   13c26:	e548      	b.n	136ba <_vfiprintf_r+0xea>
   13c28:	f898 1000 	ldrb.w	r1, [r8]
   13c2c:	f046 0601 	orr.w	r6, r6, #1
   13c30:	e541      	b.n	136b6 <_vfiprintf_r+0xe6>
   13c32:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13c36:	2b00      	cmp	r3, #0
   13c38:	f47f adc2 	bne.w	137c0 <_vfiprintf_r+0x1f0>
   13c3c:	2320      	movs	r3, #32
   13c3e:	f898 1000 	ldrb.w	r1, [r8]
   13c42:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13c46:	e536      	b.n	136b6 <_vfiprintf_r+0xe6>
   13c48:	f898 1000 	ldrb.w	r1, [r8]
   13c4c:	296c      	cmp	r1, #108	; 0x6c
   13c4e:	bf03      	ittte	eq
   13c50:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13c54:	f046 0620 	orreq.w	r6, r6, #32
   13c58:	f108 0801 	addeq.w	r8, r8, #1
   13c5c:	f046 0610 	orrne.w	r6, r6, #16
   13c60:	e529      	b.n	136b6 <_vfiprintf_r+0xe6>
   13c62:	f898 1000 	ldrb.w	r1, [r8]
   13c66:	2968      	cmp	r1, #104	; 0x68
   13c68:	bf03      	ittte	eq
   13c6a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13c6e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   13c72:	f108 0801 	addeq.w	r8, r8, #1
   13c76:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   13c7a:	e51c      	b.n	136b6 <_vfiprintf_r+0xe6>
   13c7c:	f046 0310 	orr.w	r3, r6, #16
   13c80:	9303      	str	r3, [sp, #12]
   13c82:	9b03      	ldr	r3, [sp, #12]
   13c84:	f013 0220 	ands.w	r2, r3, #32
   13c88:	f000 8206 	beq.w	14098 <_vfiprintf_r+0xac8>
   13c8c:	9b07      	ldr	r3, [sp, #28]
   13c8e:	3307      	adds	r3, #7
   13c90:	f023 0307 	bic.w	r3, r3, #7
   13c94:	4619      	mov	r1, r3
   13c96:	685a      	ldr	r2, [r3, #4]
   13c98:	f851 3b08 	ldr.w	r3, [r1], #8
   13c9c:	9107      	str	r1, [sp, #28]
   13c9e:	2101      	movs	r1, #1
   13ca0:	e60d      	b.n	138be <_vfiprintf_r+0x2ee>
   13ca2:	9a07      	ldr	r2, [sp, #28]
   13ca4:	f046 0302 	orr.w	r3, r6, #2
   13ca8:	9303      	str	r3, [sp, #12]
   13caa:	f852 3b04 	ldr.w	r3, [r2], #4
   13cae:	9207      	str	r2, [sp, #28]
   13cb0:	f647 0230 	movw	r2, #30768	; 0x7830
   13cb4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   13cb8:	4ab8      	ldr	r2, [pc, #736]	; (13f9c <_vfiprintf_r+0x9cc>)
   13cba:	920c      	str	r2, [sp, #48]	; 0x30
   13cbc:	2102      	movs	r1, #2
   13cbe:	2200      	movs	r2, #0
   13cc0:	e5fd      	b.n	138be <_vfiprintf_r+0x2ee>
   13cc2:	06b7      	lsls	r7, r6, #26
   13cc4:	f100 8248 	bmi.w	14158 <_vfiprintf_r+0xb88>
   13cc8:	06f5      	lsls	r5, r6, #27
   13cca:	f100 8346 	bmi.w	1435a <_vfiprintf_r+0xd8a>
   13cce:	0674      	lsls	r4, r6, #25
   13cd0:	f100 83d5 	bmi.w	1447e <_vfiprintf_r+0xeae>
   13cd4:	05b0      	lsls	r0, r6, #22
   13cd6:	f140 8340 	bpl.w	1435a <_vfiprintf_r+0xd8a>
   13cda:	9b07      	ldr	r3, [sp, #28]
   13cdc:	9905      	ldr	r1, [sp, #20]
   13cde:	f853 2b04 	ldr.w	r2, [r3], #4
   13ce2:	9307      	str	r3, [sp, #28]
   13ce4:	7011      	strb	r1, [r2, #0]
   13ce6:	e4be      	b.n	13666 <_vfiprintf_r+0x96>
   13ce8:	9603      	str	r6, [sp, #12]
   13cea:	2901      	cmp	r1, #1
   13cec:	f43f ad8c 	beq.w	13808 <_vfiprintf_r+0x238>
   13cf0:	2902      	cmp	r1, #2
   13cf2:	ac44      	add	r4, sp, #272	; 0x110
   13cf4:	d111      	bne.n	13d1a <_vfiprintf_r+0x74a>
   13cf6:	980c      	ldr	r0, [sp, #48]	; 0x30
   13cf8:	f003 010f 	and.w	r1, r3, #15
   13cfc:	091b      	lsrs	r3, r3, #4
   13cfe:	5c41      	ldrb	r1, [r0, r1]
   13d00:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13d04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   13d08:	0912      	lsrs	r2, r2, #4
   13d0a:	ea53 0102 	orrs.w	r1, r3, r2
   13d0e:	d1f3      	bne.n	13cf8 <_vfiprintf_r+0x728>
   13d10:	9e03      	ldr	r6, [sp, #12]
   13d12:	ab44      	add	r3, sp, #272	; 0x110
   13d14:	1b1b      	subs	r3, r3, r4
   13d16:	9304      	str	r3, [sp, #16]
   13d18:	e583      	b.n	13822 <_vfiprintf_r+0x252>
   13d1a:	f003 0107 	and.w	r1, r3, #7
   13d1e:	08db      	lsrs	r3, r3, #3
   13d20:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   13d24:	08d2      	lsrs	r2, r2, #3
   13d26:	3130      	adds	r1, #48	; 0x30
   13d28:	ea53 0502 	orrs.w	r5, r3, r2
   13d2c:	4620      	mov	r0, r4
   13d2e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13d32:	d1f2      	bne.n	13d1a <_vfiprintf_r+0x74a>
   13d34:	9e03      	ldr	r6, [sp, #12]
   13d36:	07f3      	lsls	r3, r6, #31
   13d38:	d5eb      	bpl.n	13d12 <_vfiprintf_r+0x742>
   13d3a:	2930      	cmp	r1, #48	; 0x30
   13d3c:	d0e8      	beq.n	13d10 <_vfiprintf_r+0x740>
   13d3e:	2330      	movs	r3, #48	; 0x30
   13d40:	3802      	subs	r0, #2
   13d42:	f804 3c01 	strb.w	r3, [r4, #-1]
   13d46:	ab44      	add	r3, sp, #272	; 0x110
   13d48:	1a1b      	subs	r3, r3, r0
   13d4a:	9e03      	ldr	r6, [sp, #12]
   13d4c:	9304      	str	r3, [sp, #16]
   13d4e:	4604      	mov	r4, r0
   13d50:	e567      	b.n	13822 <_vfiprintf_r+0x252>
   13d52:	9b04      	ldr	r3, [sp, #16]
   13d54:	941b      	str	r4, [sp, #108]	; 0x6c
   13d56:	2201      	movs	r2, #1
   13d58:	931c      	str	r3, [sp, #112]	; 0x70
   13d5a:	931a      	str	r3, [sp, #104]	; 0x68
   13d5c:	9219      	str	r2, [sp, #100]	; 0x64
   13d5e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13d62:	f109 0908 	add.w	r9, r9, #8
   13d66:	e69d      	b.n	13aa4 <_vfiprintf_r+0x4d4>
   13d68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13d6c:	e47b      	b.n	13666 <_vfiprintf_r+0x96>
   13d6e:	9a06      	ldr	r2, [sp, #24]
   13d70:	9d03      	ldr	r5, [sp, #12]
   13d72:	1b55      	subs	r5, r2, r5
   13d74:	2d00      	cmp	r5, #0
   13d76:	f77f ae76 	ble.w	13a66 <_vfiprintf_r+0x496>
   13d7a:	2d10      	cmp	r5, #16
   13d7c:	f340 83bb 	ble.w	144f6 <_vfiprintf_r+0xf26>
   13d80:	9409      	str	r4, [sp, #36]	; 0x24
   13d82:	ee18 4a10 	vmov	r4, s16
   13d86:	e007      	b.n	13d98 <_vfiprintf_r+0x7c8>
   13d88:	f100 0c02 	add.w	ip, r0, #2
   13d8c:	f109 0908 	add.w	r9, r9, #8
   13d90:	4610      	mov	r0, r2
   13d92:	3d10      	subs	r5, #16
   13d94:	2d10      	cmp	r5, #16
   13d96:	dd1e      	ble.n	13dd6 <_vfiprintf_r+0x806>
   13d98:	4981      	ldr	r1, [pc, #516]	; (13fa0 <_vfiprintf_r+0x9d0>)
   13d9a:	f8c9 1000 	str.w	r1, [r9]
   13d9e:	1c42      	adds	r2, r0, #1
   13da0:	3310      	adds	r3, #16
   13da2:	2110      	movs	r1, #16
   13da4:	2a07      	cmp	r2, #7
   13da6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13daa:	f8c9 1004 	str.w	r1, [r9, #4]
   13dae:	ddeb      	ble.n	13d88 <_vfiprintf_r+0x7b8>
   13db0:	aa18      	add	r2, sp, #96	; 0x60
   13db2:	2b00      	cmp	r3, #0
   13db4:	d074      	beq.n	13ea0 <_vfiprintf_r+0x8d0>
   13db6:	4621      	mov	r1, r4
   13db8:	4658      	mov	r0, fp
   13dba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13dbe:	f7ff fbcb 	bl	13558 <__sprint_r.part.0>
   13dc2:	2800      	cmp	r0, #0
   13dc4:	f47f addb 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13dc8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13dcc:	3d10      	subs	r5, #16
   13dce:	2d10      	cmp	r5, #16
   13dd0:	f100 0c01 	add.w	ip, r0, #1
   13dd4:	dce0      	bgt.n	13d98 <_vfiprintf_r+0x7c8>
   13dd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13dd8:	4a71      	ldr	r2, [pc, #452]	; (13fa0 <_vfiprintf_r+0x9d0>)
   13dda:	f8c9 5004 	str.w	r5, [r9, #4]
   13dde:	442b      	add	r3, r5
   13de0:	f1bc 0f07 	cmp.w	ip, #7
   13de4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13de8:	f8c9 2000 	str.w	r2, [r9]
   13dec:	f340 8194 	ble.w	14118 <_vfiprintf_r+0xb48>
   13df0:	2b00      	cmp	r3, #0
   13df2:	f000 831f 	beq.w	14434 <_vfiprintf_r+0xe64>
   13df6:	ee18 1a10 	vmov	r1, s16
   13dfa:	aa18      	add	r2, sp, #96	; 0x60
   13dfc:	4658      	mov	r0, fp
   13dfe:	f7ff fbab 	bl	13558 <__sprint_r.part.0>
   13e02:	2800      	cmp	r0, #0
   13e04:	f47f adbb 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13e08:	9a04      	ldr	r2, [sp, #16]
   13e0a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13e0e:	1abd      	subs	r5, r7, r2
   13e10:	2d00      	cmp	r5, #0
   13e12:	f100 0101 	add.w	r1, r0, #1
   13e16:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e1a:	f77f ae29 	ble.w	13a70 <_vfiprintf_r+0x4a0>
   13e1e:	2d10      	cmp	r5, #16
   13e20:	dd29      	ble.n	13e76 <_vfiprintf_r+0x8a6>
   13e22:	9409      	str	r4, [sp, #36]	; 0x24
   13e24:	2710      	movs	r7, #16
   13e26:	ee18 4a10 	vmov	r4, s16
   13e2a:	e007      	b.n	13e3c <_vfiprintf_r+0x86c>
   13e2c:	f100 0c02 	add.w	ip, r0, #2
   13e30:	f109 0908 	add.w	r9, r9, #8
   13e34:	4610      	mov	r0, r2
   13e36:	3d10      	subs	r5, #16
   13e38:	2d10      	cmp	r5, #16
   13e3a:	dd1a      	ble.n	13e72 <_vfiprintf_r+0x8a2>
   13e3c:	1c42      	adds	r2, r0, #1
   13e3e:	4958      	ldr	r1, [pc, #352]	; (13fa0 <_vfiprintf_r+0x9d0>)
   13e40:	3310      	adds	r3, #16
   13e42:	2a07      	cmp	r2, #7
   13e44:	e9c9 1700 	strd	r1, r7, [r9]
   13e48:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13e4c:	ddee      	ble.n	13e2c <_vfiprintf_r+0x85c>
   13e4e:	aa18      	add	r2, sp, #96	; 0x60
   13e50:	b303      	cbz	r3, 13e94 <_vfiprintf_r+0x8c4>
   13e52:	4621      	mov	r1, r4
   13e54:	4658      	mov	r0, fp
   13e56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e5a:	f7ff fb7d 	bl	13558 <__sprint_r.part.0>
   13e5e:	2800      	cmp	r0, #0
   13e60:	f47f ad8d 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13e64:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13e68:	3d10      	subs	r5, #16
   13e6a:	2d10      	cmp	r5, #16
   13e6c:	f100 0c01 	add.w	ip, r0, #1
   13e70:	dce4      	bgt.n	13e3c <_vfiprintf_r+0x86c>
   13e72:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13e74:	4661      	mov	r1, ip
   13e76:	4a4a      	ldr	r2, [pc, #296]	; (13fa0 <_vfiprintf_r+0x9d0>)
   13e78:	f8c9 5004 	str.w	r5, [r9, #4]
   13e7c:	442b      	add	r3, r5
   13e7e:	2907      	cmp	r1, #7
   13e80:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13e84:	f8c9 2000 	str.w	r2, [r9]
   13e88:	f300 80e7 	bgt.w	1405a <_vfiprintf_r+0xa8a>
   13e8c:	f109 0908 	add.w	r9, r9, #8
   13e90:	3101      	adds	r1, #1
   13e92:	e5ed      	b.n	13a70 <_vfiprintf_r+0x4a0>
   13e94:	f04f 0c01 	mov.w	ip, #1
   13e98:	4618      	mov	r0, r3
   13e9a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e9e:	e7ca      	b.n	13e36 <_vfiprintf_r+0x866>
   13ea0:	f04f 0c01 	mov.w	ip, #1
   13ea4:	4618      	mov	r0, r3
   13ea6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13eaa:	e772      	b.n	13d92 <_vfiprintf_r+0x7c2>
   13eac:	2b00      	cmp	r3, #0
   13eae:	f000 8104 	beq.w	140ba <_vfiprintf_r+0xaea>
   13eb2:	ee18 1a10 	vmov	r1, s16
   13eb6:	aa18      	add	r2, sp, #96	; 0x60
   13eb8:	4658      	mov	r0, fp
   13eba:	f7ff fb4d 	bl	13558 <__sprint_r.part.0>
   13ebe:	2800      	cmp	r0, #0
   13ec0:	f47f ad5d 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13ec4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13ec8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ecc:	1c41      	adds	r1, r0, #1
   13ece:	e5a7      	b.n	13a20 <_vfiprintf_r+0x450>
   13ed0:	2302      	movs	r3, #2
   13ed2:	aa11      	add	r2, sp, #68	; 0x44
   13ed4:	931c      	str	r3, [sp, #112]	; 0x70
   13ed6:	921b      	str	r2, [sp, #108]	; 0x6c
   13ed8:	2101      	movs	r1, #1
   13eda:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ede:	4608      	mov	r0, r1
   13ee0:	f109 0908 	add.w	r9, r9, #8
   13ee4:	1c41      	adds	r1, r0, #1
   13ee6:	e5ba      	b.n	13a5e <_vfiprintf_r+0x48e>
   13ee8:	2d10      	cmp	r5, #16
   13eea:	f340 82e5 	ble.w	144b8 <_vfiprintf_r+0xee8>
   13eee:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13ef2:	940f      	str	r4, [sp, #60]	; 0x3c
   13ef4:	4608      	mov	r0, r1
   13ef6:	ee18 4a10 	vmov	r4, s16
   13efa:	e007      	b.n	13f0c <_vfiprintf_r+0x93c>
   13efc:	f100 0c02 	add.w	ip, r0, #2
   13f00:	f109 0908 	add.w	r9, r9, #8
   13f04:	4610      	mov	r0, r2
   13f06:	3d10      	subs	r5, #16
   13f08:	2d10      	cmp	r5, #16
   13f0a:	dd1d      	ble.n	13f48 <_vfiprintf_r+0x978>
   13f0c:	4925      	ldr	r1, [pc, #148]	; (13fa4 <_vfiprintf_r+0x9d4>)
   13f0e:	f8c9 1000 	str.w	r1, [r9]
   13f12:	1c42      	adds	r2, r0, #1
   13f14:	3310      	adds	r3, #16
   13f16:	2110      	movs	r1, #16
   13f18:	2a07      	cmp	r2, #7
   13f1a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13f1e:	f8c9 1004 	str.w	r1, [r9, #4]
   13f22:	ddeb      	ble.n	13efc <_vfiprintf_r+0x92c>
   13f24:	aa18      	add	r2, sp, #96	; 0x60
   13f26:	b303      	cbz	r3, 13f6a <_vfiprintf_r+0x99a>
   13f28:	4621      	mov	r1, r4
   13f2a:	4658      	mov	r0, fp
   13f2c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13f30:	f7ff fb12 	bl	13558 <__sprint_r.part.0>
   13f34:	2800      	cmp	r0, #0
   13f36:	f47f ad22 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13f3a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13f3e:	3d10      	subs	r5, #16
   13f40:	2d10      	cmp	r5, #16
   13f42:	f100 0c01 	add.w	ip, r0, #1
   13f46:	dce1      	bgt.n	13f0c <_vfiprintf_r+0x93c>
   13f48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   13f4a:	4660      	mov	r0, ip
   13f4c:	4a15      	ldr	r2, [pc, #84]	; (13fa4 <_vfiprintf_r+0x9d4>)
   13f4e:	f8c9 5004 	str.w	r5, [r9, #4]
   13f52:	442b      	add	r3, r5
   13f54:	2807      	cmp	r0, #7
   13f56:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   13f5a:	f8c9 2000 	str.w	r2, [r9]
   13f5e:	f300 80c1 	bgt.w	140e4 <_vfiprintf_r+0xb14>
   13f62:	f109 0908 	add.w	r9, r9, #8
   13f66:	1c41      	adds	r1, r0, #1
   13f68:	e546      	b.n	139f8 <_vfiprintf_r+0x428>
   13f6a:	4618      	mov	r0, r3
   13f6c:	f04f 0c01 	mov.w	ip, #1
   13f70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13f74:	e7c7      	b.n	13f06 <_vfiprintf_r+0x936>
   13f76:	0776      	lsls	r6, r6, #29
   13f78:	9319      	str	r3, [sp, #100]	; 0x64
   13f7a:	d553      	bpl.n	14024 <_vfiprintf_r+0xa54>
   13f7c:	9a06      	ldr	r2, [sp, #24]
   13f7e:	9903      	ldr	r1, [sp, #12]
   13f80:	1a54      	subs	r4, r2, r1
   13f82:	2c00      	cmp	r4, #0
   13f84:	dd4e      	ble.n	14024 <_vfiprintf_r+0xa54>
   13f86:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13f8a:	2c10      	cmp	r4, #16
   13f8c:	f340 82b0 	ble.w	144f0 <_vfiprintf_r+0xf20>
   13f90:	9919      	ldr	r1, [sp, #100]	; 0x64
   13f92:	ee18 6a10 	vmov	r6, s16
   13f96:	2510      	movs	r5, #16
   13f98:	e00d      	b.n	13fb6 <_vfiprintf_r+0x9e6>
   13f9a:	bf00      	nop
   13f9c:	20000ef4 	.word	0x20000ef4
   13fa0:	20008784 	.word	0x20008784
   13fa4:	200029b0 	.word	0x200029b0
   13fa8:	1c88      	adds	r0, r1, #2
   13faa:	f109 0908 	add.w	r9, r9, #8
   13fae:	4611      	mov	r1, r2
   13fb0:	3c10      	subs	r4, #16
   13fb2:	2c10      	cmp	r4, #16
   13fb4:	dd1a      	ble.n	13fec <_vfiprintf_r+0xa1c>
   13fb6:	1c4a      	adds	r2, r1, #1
   13fb8:	48b3      	ldr	r0, [pc, #716]	; (14288 <_vfiprintf_r+0xcb8>)
   13fba:	3310      	adds	r3, #16
   13fbc:	2a07      	cmp	r2, #7
   13fbe:	e9c9 0500 	strd	r0, r5, [r9]
   13fc2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13fc6:	ddef      	ble.n	13fa8 <_vfiprintf_r+0x9d8>
   13fc8:	aa18      	add	r2, sp, #96	; 0x60
   13fca:	b333      	cbz	r3, 1401a <_vfiprintf_r+0xa4a>
   13fcc:	4631      	mov	r1, r6
   13fce:	4658      	mov	r0, fp
   13fd0:	f7ff fac2 	bl	13558 <__sprint_r.part.0>
   13fd4:	2800      	cmp	r0, #0
   13fd6:	f47f acd2 	bne.w	1397e <_vfiprintf_r+0x3ae>
   13fda:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13fde:	3c10      	subs	r4, #16
   13fe0:	2c10      	cmp	r4, #16
   13fe2:	f101 0001 	add.w	r0, r1, #1
   13fe6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13fea:	dce4      	bgt.n	13fb6 <_vfiprintf_r+0x9e6>
   13fec:	4aa6      	ldr	r2, [pc, #664]	; (14288 <_vfiprintf_r+0xcb8>)
   13fee:	f8c9 4004 	str.w	r4, [r9, #4]
   13ff2:	4423      	add	r3, r4
   13ff4:	2807      	cmp	r0, #7
   13ff6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   13ffa:	f8c9 2000 	str.w	r2, [r9]
   13ffe:	f77f ad59 	ble.w	13ab4 <_vfiprintf_r+0x4e4>
   14002:	b17b      	cbz	r3, 14024 <_vfiprintf_r+0xa54>
   14004:	ee18 1a10 	vmov	r1, s16
   14008:	aa18      	add	r2, sp, #96	; 0x60
   1400a:	4658      	mov	r0, fp
   1400c:	f7ff faa4 	bl	13558 <__sprint_r.part.0>
   14010:	2800      	cmp	r0, #0
   14012:	f47f acb4 	bne.w	1397e <_vfiprintf_r+0x3ae>
   14016:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14018:	e54c      	b.n	13ab4 <_vfiprintf_r+0x4e4>
   1401a:	2001      	movs	r0, #1
   1401c:	4619      	mov	r1, r3
   1401e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14022:	e7c5      	b.n	13fb0 <_vfiprintf_r+0x9e0>
   14024:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   14028:	9903      	ldr	r1, [sp, #12]
   1402a:	428a      	cmp	r2, r1
   1402c:	bfac      	ite	ge
   1402e:	189b      	addge	r3, r3, r2
   14030:	185b      	addlt	r3, r3, r1
   14032:	9305      	str	r3, [sp, #20]
   14034:	e549      	b.n	13aca <_vfiprintf_r+0x4fa>
   14036:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1403a:	058f      	lsls	r7, r1, #22
   1403c:	ee18 3a10 	vmov	r3, s16
   14040:	b28a      	uxth	r2, r1
   14042:	f53f aae8 	bmi.w	13616 <_vfiprintf_r+0x46>
   14046:	ee18 5a10 	vmov	r5, s16
   1404a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1404c:	f7f8 fd5e 	bl	cb0c <__retarget_lock_acquire_recursive>
   14050:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   14054:	b28a      	uxth	r2, r1
   14056:	f7ff bade 	b.w	13616 <_vfiprintf_r+0x46>
   1405a:	2b00      	cmp	r3, #0
   1405c:	f43f ae79 	beq.w	13d52 <_vfiprintf_r+0x782>
   14060:	ee18 1a10 	vmov	r1, s16
   14064:	aa18      	add	r2, sp, #96	; 0x60
   14066:	4658      	mov	r0, fp
   14068:	f7ff fa76 	bl	13558 <__sprint_r.part.0>
   1406c:	2800      	cmp	r0, #0
   1406e:	f47f ac86 	bne.w	1397e <_vfiprintf_r+0x3ae>
   14072:	9919      	ldr	r1, [sp, #100]	; 0x64
   14074:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14076:	3101      	adds	r1, #1
   14078:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1407c:	e4f8      	b.n	13a70 <_vfiprintf_r+0x4a0>
   1407e:	9219      	str	r2, [sp, #100]	; 0x64
   14080:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14084:	e45e      	b.n	13944 <_vfiprintf_r+0x374>
   14086:	2f00      	cmp	r7, #0
   14088:	f47f abc3 	bne.w	13812 <_vfiprintf_r+0x242>
   1408c:	9e03      	ldr	r6, [sp, #12]
   1408e:	2700      	movs	r7, #0
   14090:	9704      	str	r7, [sp, #16]
   14092:	ac44      	add	r4, sp, #272	; 0x110
   14094:	f7ff bbc5 	b.w	13822 <_vfiprintf_r+0x252>
   14098:	9b03      	ldr	r3, [sp, #12]
   1409a:	f013 0310 	ands.w	r3, r3, #16
   1409e:	d154      	bne.n	1414a <_vfiprintf_r+0xb7a>
   140a0:	9a03      	ldr	r2, [sp, #12]
   140a2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   140a6:	f000 816b 	beq.w	14380 <_vfiprintf_r+0xdb0>
   140aa:	9907      	ldr	r1, [sp, #28]
   140ac:	461a      	mov	r2, r3
   140ae:	f851 3b04 	ldr.w	r3, [r1], #4
   140b2:	9107      	str	r1, [sp, #28]
   140b4:	b29b      	uxth	r3, r3
   140b6:	2101      	movs	r1, #1
   140b8:	e401      	b.n	138be <_vfiprintf_r+0x2ee>
   140ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   140bc:	2a00      	cmp	r2, #0
   140be:	d164      	bne.n	1418a <_vfiprintf_r+0xbba>
   140c0:	4618      	mov	r0, r3
   140c2:	2101      	movs	r1, #1
   140c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   140c8:	e4c9      	b.n	13a5e <_vfiprintf_r+0x48e>
   140ca:	2101      	movs	r1, #1
   140cc:	4618      	mov	r0, r3
   140ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   140d2:	e4c4      	b.n	13a5e <_vfiprintf_r+0x48e>
   140d4:	425b      	negs	r3, r3
   140d6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   140da:	9603      	str	r6, [sp, #12]
   140dc:	202d      	movs	r0, #45	; 0x2d
   140de:	2101      	movs	r1, #1
   140e0:	f7ff bbee 	b.w	138c0 <_vfiprintf_r+0x2f0>
   140e4:	2b00      	cmp	r3, #0
   140e6:	f000 8088 	beq.w	141fa <_vfiprintf_r+0xc2a>
   140ea:	ee18 1a10 	vmov	r1, s16
   140ee:	aa18      	add	r2, sp, #96	; 0x60
   140f0:	4658      	mov	r0, fp
   140f2:	f7ff fa31 	bl	13558 <__sprint_r.part.0>
   140f6:	2800      	cmp	r0, #0
   140f8:	f47f ac41 	bne.w	1397e <_vfiprintf_r+0x3ae>
   140fc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   14100:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14104:	1c41      	adds	r1, r0, #1
   14106:	e477      	b.n	139f8 <_vfiprintf_r+0x428>
   14108:	f898 1000 	ldrb.w	r1, [r8]
   1410c:	9307      	str	r3, [sp, #28]
   1410e:	f7ff bad2 	b.w	136b6 <_vfiprintf_r+0xe6>
   14112:	ac44      	add	r4, sp, #272	; 0x110
   14114:	f7ff bb85 	b.w	13822 <_vfiprintf_r+0x252>
   14118:	f109 0908 	add.w	r9, r9, #8
   1411c:	f10c 0101 	add.w	r1, ip, #1
   14120:	4660      	mov	r0, ip
   14122:	e4a0      	b.n	13a66 <_vfiprintf_r+0x496>
   14124:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   14128:	f040 8197 	bne.w	1445a <_vfiprintf_r+0xe8a>
   1412c:	f851 3b04 	ldr.w	r3, [r1], #4
   14130:	9107      	str	r1, [sp, #28]
   14132:	f7ff bbc0 	b.w	138b6 <_vfiprintf_r+0x2e6>
   14136:	05b3      	lsls	r3, r6, #22
   14138:	f100 8188 	bmi.w	1444c <_vfiprintf_r+0xe7c>
   1413c:	f852 3b04 	ldr.w	r3, [r2], #4
   14140:	9207      	str	r2, [sp, #28]
   14142:	17da      	asrs	r2, r3, #31
   14144:	4611      	mov	r1, r2
   14146:	f7ff bb52 	b.w	137ee <_vfiprintf_r+0x21e>
   1414a:	9907      	ldr	r1, [sp, #28]
   1414c:	f851 3b04 	ldr.w	r3, [r1], #4
   14150:	9107      	str	r1, [sp, #28]
   14152:	2101      	movs	r1, #1
   14154:	f7ff bbb3 	b.w	138be <_vfiprintf_r+0x2ee>
   14158:	9b07      	ldr	r3, [sp, #28]
   1415a:	9805      	ldr	r0, [sp, #20]
   1415c:	f853 1b04 	ldr.w	r1, [r3], #4
   14160:	9307      	str	r3, [sp, #28]
   14162:	17c2      	asrs	r2, r0, #31
   14164:	e9c1 0200 	strd	r0, r2, [r1]
   14168:	f7ff ba7d 	b.w	13666 <_vfiprintf_r+0x96>
   1416c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1416e:	2b00      	cmp	r3, #0
   14170:	f43f ab26 	beq.w	137c0 <_vfiprintf_r+0x1f0>
   14174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14176:	781b      	ldrb	r3, [r3, #0]
   14178:	2b00      	cmp	r3, #0
   1417a:	f43f ab21 	beq.w	137c0 <_vfiprintf_r+0x1f0>
   1417e:	f898 1000 	ldrb.w	r1, [r8]
   14182:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   14186:	f7ff ba96 	b.w	136b6 <_vfiprintf_r+0xe6>
   1418a:	2302      	movs	r3, #2
   1418c:	aa11      	add	r2, sp, #68	; 0x44
   1418e:	931c      	str	r3, [sp, #112]	; 0x70
   14190:	921b      	str	r2, [sp, #108]	; 0x6c
   14192:	2001      	movs	r0, #1
   14194:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14198:	e6a2      	b.n	13ee0 <_vfiprintf_r+0x910>
   1419a:	9603      	str	r6, [sp, #12]
   1419c:	e571      	b.n	13c82 <_vfiprintf_r+0x6b2>
   1419e:	4b3b      	ldr	r3, [pc, #236]	; (1428c <_vfiprintf_r+0xcbc>)
   141a0:	930c      	str	r3, [sp, #48]	; 0x30
   141a2:	f016 0220 	ands.w	r2, r6, #32
   141a6:	d059      	beq.n	1425c <_vfiprintf_r+0xc8c>
   141a8:	9b07      	ldr	r3, [sp, #28]
   141aa:	3307      	adds	r3, #7
   141ac:	f023 0307 	bic.w	r3, r3, #7
   141b0:	4618      	mov	r0, r3
   141b2:	685a      	ldr	r2, [r3, #4]
   141b4:	f850 3b08 	ldr.w	r3, [r0], #8
   141b8:	9007      	str	r0, [sp, #28]
   141ba:	07f4      	lsls	r4, r6, #31
   141bc:	d509      	bpl.n	141d2 <_vfiprintf_r+0xc02>
   141be:	ea53 0002 	orrs.w	r0, r3, r2
   141c2:	d006      	beq.n	141d2 <_vfiprintf_r+0xc02>
   141c4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   141c8:	2130      	movs	r1, #48	; 0x30
   141ca:	f046 0602 	orr.w	r6, r6, #2
   141ce:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   141d2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   141d6:	9103      	str	r1, [sp, #12]
   141d8:	2102      	movs	r1, #2
   141da:	f7ff bb70 	b.w	138be <_vfiprintf_r+0x2ee>
   141de:	4b2c      	ldr	r3, [pc, #176]	; (14290 <_vfiprintf_r+0xcc0>)
   141e0:	930c      	str	r3, [sp, #48]	; 0x30
   141e2:	e7de      	b.n	141a2 <_vfiprintf_r+0xbd2>
   141e4:	9b07      	ldr	r3, [sp, #28]
   141e6:	2101      	movs	r1, #1
   141e8:	f853 2b04 	ldr.w	r2, [r3], #4
   141ec:	9103      	str	r1, [sp, #12]
   141ee:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   141f2:	9307      	str	r3, [sp, #28]
   141f4:	9104      	str	r1, [sp, #16]
   141f6:	ac2b      	add	r4, sp, #172	; 0xac
   141f8:	e4df      	b.n	13bba <_vfiprintf_r+0x5ea>
   141fa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   141fe:	2a00      	cmp	r2, #0
   14200:	f040 8132 	bne.w	14468 <_vfiprintf_r+0xe98>
   14204:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14206:	2a00      	cmp	r2, #0
   14208:	f47f ae62 	bne.w	13ed0 <_vfiprintf_r+0x900>
   1420c:	4618      	mov	r0, r3
   1420e:	2101      	movs	r1, #1
   14210:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14214:	e427      	b.n	13a66 <_vfiprintf_r+0x496>
   14216:	2100      	movs	r1, #0
   14218:	2208      	movs	r2, #8
   1421a:	a816      	add	r0, sp, #88	; 0x58
   1421c:	9413      	str	r4, [sp, #76]	; 0x4c
   1421e:	f7f8 fb11 	bl	c844 <memset>
   14222:	1c79      	adds	r1, r7, #1
   14224:	f000 80bc 	beq.w	143a0 <_vfiprintf_r+0xdd0>
   14228:	2500      	movs	r5, #0
   1422a:	9407      	str	r4, [sp, #28]
   1422c:	462c      	mov	r4, r5
   1422e:	e00c      	b.n	1424a <_vfiprintf_r+0xc7a>
   14230:	a92b      	add	r1, sp, #172	; 0xac
   14232:	4658      	mov	r0, fp
   14234:	f7fe ff2e 	bl	13094 <_wcrtomb_r>
   14238:	1c42      	adds	r2, r0, #1
   1423a:	4420      	add	r0, r4
   1423c:	f000 816b 	beq.w	14516 <_vfiprintf_r+0xf46>
   14240:	42b8      	cmp	r0, r7
   14242:	dc08      	bgt.n	14256 <_vfiprintf_r+0xc86>
   14244:	f000 8170 	beq.w	14528 <_vfiprintf_r+0xf58>
   14248:	4604      	mov	r4, r0
   1424a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1424c:	5952      	ldr	r2, [r2, r5]
   1424e:	ab16      	add	r3, sp, #88	; 0x58
   14250:	3504      	adds	r5, #4
   14252:	2a00      	cmp	r2, #0
   14254:	d1ec      	bne.n	14230 <_vfiprintf_r+0xc60>
   14256:	9404      	str	r4, [sp, #16]
   14258:	9c07      	ldr	r4, [sp, #28]
   1425a:	e0af      	b.n	143bc <_vfiprintf_r+0xdec>
   1425c:	f016 0310 	ands.w	r3, r6, #16
   14260:	9807      	ldr	r0, [sp, #28]
   14262:	d10c      	bne.n	1427e <_vfiprintf_r+0xcae>
   14264:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   14268:	d005      	beq.n	14276 <_vfiprintf_r+0xca6>
   1426a:	461a      	mov	r2, r3
   1426c:	f850 3b04 	ldr.w	r3, [r0], #4
   14270:	9007      	str	r0, [sp, #28]
   14272:	b29b      	uxth	r3, r3
   14274:	e7a1      	b.n	141ba <_vfiprintf_r+0xbea>
   14276:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1427a:	f040 80e1 	bne.w	14440 <_vfiprintf_r+0xe70>
   1427e:	f850 3b04 	ldr.w	r3, [r0], #4
   14282:	9007      	str	r0, [sp, #28]
   14284:	e799      	b.n	141ba <_vfiprintf_r+0xbea>
   14286:	bf00      	nop
   14288:	200029b0 	.word	0x200029b0
   1428c:	20000ef4 	.word	0x20000ef4
   14290:	20000f08 	.word	0x20000f08
   14294:	9903      	ldr	r1, [sp, #12]
   14296:	9704      	str	r7, [sp, #16]
   14298:	ac44      	add	r4, sp, #272	; 0x110
   1429a:	469e      	mov	lr, r3
   1429c:	ee08 ba90 	vmov	s17, fp
   142a0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   142a4:	f04f 0c00 	mov.w	ip, #0
   142a8:	4623      	mov	r3, r4
   142aa:	e006      	b.n	142ba <_vfiprintf_r+0xcea>
   142ac:	f1be 0f0a 	cmp.w	lr, #10
   142b0:	f172 0200 	sbcs.w	r2, r2, #0
   142b4:	d339      	bcc.n	1432a <_vfiprintf_r+0xd5a>
   142b6:	46a6      	mov	lr, r4
   142b8:	462a      	mov	r2, r5
   142ba:	49a6      	ldr	r1, [pc, #664]	; (14554 <_vfiprintf_r+0xf84>)
   142bc:	eb1e 0002 	adds.w	r0, lr, r2
   142c0:	f140 0000 	adc.w	r0, r0, #0
   142c4:	460f      	mov	r7, r1
   142c6:	fba1 1400 	umull	r1, r4, r1, r0
   142ca:	f024 0103 	bic.w	r1, r4, #3
   142ce:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   142d2:	1a40      	subs	r0, r0, r1
   142d4:	ebbe 0100 	subs.w	r1, lr, r0
   142d8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   142dc:	f162 0400 	sbc.w	r4, r2, #0
   142e0:	fb05 f501 	mul.w	r5, r5, r1
   142e4:	fb07 5504 	mla	r5, r7, r4, r5
   142e8:	fba1 4107 	umull	r4, r1, r1, r7
   142ec:	440d      	add	r5, r1
   142ee:	2705      	movs	r7, #5
   142f0:	f004 0101 	and.w	r1, r4, #1
   142f4:	fba1 1b07 	umull	r1, fp, r1, r7
   142f8:	1809      	adds	r1, r1, r0
   142fa:	0864      	lsrs	r4, r4, #1
   142fc:	3130      	adds	r1, #48	; 0x30
   142fe:	f803 1c01 	strb.w	r1, [r3, #-1]
   14302:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   14306:	f10c 0c01 	add.w	ip, ip, #1
   1430a:	3b01      	subs	r3, #1
   1430c:	086d      	lsrs	r5, r5, #1
   1430e:	2e00      	cmp	r6, #0
   14310:	d0cc      	beq.n	142ac <_vfiprintf_r+0xcdc>
   14312:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14314:	7809      	ldrb	r1, [r1, #0]
   14316:	4561      	cmp	r1, ip
   14318:	d1c8      	bne.n	142ac <_vfiprintf_r+0xcdc>
   1431a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1431e:	d0c5      	beq.n	142ac <_vfiprintf_r+0xcdc>
   14320:	f1be 0f0a 	cmp.w	lr, #10
   14324:	f172 0200 	sbcs.w	r2, r2, #0
   14328:	d26c      	bcs.n	14404 <_vfiprintf_r+0xe34>
   1432a:	461c      	mov	r4, r3
   1432c:	ab44      	add	r3, sp, #272	; 0x110
   1432e:	1b1b      	subs	r3, r3, r4
   14330:	9f04      	ldr	r7, [sp, #16]
   14332:	9e03      	ldr	r6, [sp, #12]
   14334:	9304      	str	r3, [sp, #16]
   14336:	ee18 ba90 	vmov	fp, s17
   1433a:	f7ff ba72 	b.w	13822 <_vfiprintf_r+0x252>
   1433e:	9603      	str	r6, [sp, #12]
   14340:	f7ff ba62 	b.w	13808 <_vfiprintf_r+0x238>
   14344:	4658      	mov	r0, fp
   14346:	f7f8 f889 	bl	c45c <__sinit>
   1434a:	f7ff b95b 	b.w	13604 <_vfiprintf_r+0x34>
   1434e:	2901      	cmp	r1, #1
   14350:	9603      	str	r6, [sp, #12]
   14352:	f47f accd 	bne.w	13cf0 <_vfiprintf_r+0x720>
   14356:	f7ff ba5c 	b.w	13812 <_vfiprintf_r+0x242>
   1435a:	9b07      	ldr	r3, [sp, #28]
   1435c:	9905      	ldr	r1, [sp, #20]
   1435e:	f853 2b04 	ldr.w	r2, [r3], #4
   14362:	6011      	str	r1, [r2, #0]
   14364:	9307      	str	r3, [sp, #28]
   14366:	f7ff b97e 	b.w	13666 <_vfiprintf_r+0x96>
   1436a:	2f06      	cmp	r7, #6
   1436c:	463b      	mov	r3, r7
   1436e:	9a03      	ldr	r2, [sp, #12]
   14370:	4c79      	ldr	r4, [pc, #484]	; (14558 <_vfiprintf_r+0xf88>)
   14372:	9207      	str	r2, [sp, #28]
   14374:	bf28      	it	cs
   14376:	2306      	movcs	r3, #6
   14378:	9304      	str	r3, [sp, #16]
   1437a:	9303      	str	r3, [sp, #12]
   1437c:	f7ff bb25 	b.w	139ca <_vfiprintf_r+0x3fa>
   14380:	9b03      	ldr	r3, [sp, #12]
   14382:	9907      	ldr	r1, [sp, #28]
   14384:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   14388:	bf14      	ite	ne
   1438a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1438e:	f851 3b04 	ldreq.w	r3, [r1], #4
   14392:	9107      	str	r1, [sp, #28]
   14394:	bf1c      	itt	ne
   14396:	4602      	movne	r2, r0
   14398:	b2db      	uxtbne	r3, r3
   1439a:	2101      	movs	r1, #1
   1439c:	f7ff ba8f 	b.w	138be <_vfiprintf_r+0x2ee>
   143a0:	ab16      	add	r3, sp, #88	; 0x58
   143a2:	9300      	str	r3, [sp, #0]
   143a4:	2300      	movs	r3, #0
   143a6:	4619      	mov	r1, r3
   143a8:	aa13      	add	r2, sp, #76	; 0x4c
   143aa:	4658      	mov	r0, fp
   143ac:	f7fe fe98 	bl	130e0 <_wcsrtombs_r>
   143b0:	4603      	mov	r3, r0
   143b2:	3301      	adds	r3, #1
   143b4:	9004      	str	r0, [sp, #16]
   143b6:	f000 80ae 	beq.w	14516 <_vfiprintf_r+0xf46>
   143ba:	9413      	str	r4, [sp, #76]	; 0x4c
   143bc:	9b04      	ldr	r3, [sp, #16]
   143be:	2b00      	cmp	r3, #0
   143c0:	d030      	beq.n	14424 <_vfiprintf_r+0xe54>
   143c2:	2b63      	cmp	r3, #99	; 0x63
   143c4:	dc63      	bgt.n	1448e <_vfiprintf_r+0xebe>
   143c6:	2300      	movs	r3, #0
   143c8:	9308      	str	r3, [sp, #32]
   143ca:	ac2b      	add	r4, sp, #172	; 0xac
   143cc:	2208      	movs	r2, #8
   143ce:	2100      	movs	r1, #0
   143d0:	a816      	add	r0, sp, #88	; 0x58
   143d2:	f7f8 fa37 	bl	c844 <memset>
   143d6:	9d04      	ldr	r5, [sp, #16]
   143d8:	ab16      	add	r3, sp, #88	; 0x58
   143da:	9300      	str	r3, [sp, #0]
   143dc:	aa13      	add	r2, sp, #76	; 0x4c
   143de:	462b      	mov	r3, r5
   143e0:	4621      	mov	r1, r4
   143e2:	4658      	mov	r0, fp
   143e4:	f7fe fe7c 	bl	130e0 <_wcsrtombs_r>
   143e8:	4285      	cmp	r5, r0
   143ea:	f040 80ab 	bne.w	14544 <_vfiprintf_r+0xf74>
   143ee:	9b03      	ldr	r3, [sp, #12]
   143f0:	9a04      	ldr	r2, [sp, #16]
   143f2:	9307      	str	r3, [sp, #28]
   143f4:	2300      	movs	r3, #0
   143f6:	54a3      	strb	r3, [r4, r2]
   143f8:	461f      	mov	r7, r3
   143fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   143fe:	9303      	str	r3, [sp, #12]
   14400:	f7ff ba16 	b.w	13830 <_vfiprintf_r+0x260>
   14404:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14406:	990d      	ldr	r1, [sp, #52]	; 0x34
   14408:	1a9b      	subs	r3, r3, r2
   1440a:	4618      	mov	r0, r3
   1440c:	9308      	str	r3, [sp, #32]
   1440e:	f7f8 fab1 	bl	c974 <strncpy>
   14412:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14414:	9b08      	ldr	r3, [sp, #32]
   14416:	784a      	ldrb	r2, [r1, #1]
   14418:	b10a      	cbz	r2, 1441e <_vfiprintf_r+0xe4e>
   1441a:	3101      	adds	r1, #1
   1441c:	910b      	str	r1, [sp, #44]	; 0x2c
   1441e:	f04f 0c00 	mov.w	ip, #0
   14422:	e748      	b.n	142b6 <_vfiprintf_r+0xce6>
   14424:	9b03      	ldr	r3, [sp, #12]
   14426:	9307      	str	r3, [sp, #28]
   14428:	9b04      	ldr	r3, [sp, #16]
   1442a:	9303      	str	r3, [sp, #12]
   1442c:	461f      	mov	r7, r3
   1442e:	9308      	str	r3, [sp, #32]
   14430:	f7ff b9fe 	b.w	13830 <_vfiprintf_r+0x260>
   14434:	2101      	movs	r1, #1
   14436:	4618      	mov	r0, r3
   14438:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1443c:	f7ff bb13 	b.w	13a66 <_vfiprintf_r+0x496>
   14440:	f850 3b04 	ldr.w	r3, [r0], #4
   14444:	9007      	str	r0, [sp, #28]
   14446:	4622      	mov	r2, r4
   14448:	b2db      	uxtb	r3, r3
   1444a:	e6b6      	b.n	141ba <_vfiprintf_r+0xbea>
   1444c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   14450:	9207      	str	r2, [sp, #28]
   14452:	17da      	asrs	r2, r3, #31
   14454:	4611      	mov	r1, r2
   14456:	f7ff b9ca 	b.w	137ee <_vfiprintf_r+0x21e>
   1445a:	f851 3b04 	ldr.w	r3, [r1], #4
   1445e:	9107      	str	r1, [sp, #28]
   14460:	4602      	mov	r2, r0
   14462:	b2db      	uxtb	r3, r3
   14464:	f7ff ba27 	b.w	138b6 <_vfiprintf_r+0x2e6>
   14468:	2301      	movs	r3, #1
   1446a:	931c      	str	r3, [sp, #112]	; 0x70
   1446c:	2101      	movs	r1, #1
   1446e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   14472:	931b      	str	r3, [sp, #108]	; 0x6c
   14474:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14478:	460b      	mov	r3, r1
   1447a:	f7ff bacd 	b.w	13a18 <_vfiprintf_r+0x448>
   1447e:	9b07      	ldr	r3, [sp, #28]
   14480:	9905      	ldr	r1, [sp, #20]
   14482:	f853 2b04 	ldr.w	r2, [r3], #4
   14486:	9307      	str	r3, [sp, #28]
   14488:	8011      	strh	r1, [r2, #0]
   1448a:	f7ff b8ec 	b.w	13666 <_vfiprintf_r+0x96>
   1448e:	1c59      	adds	r1, r3, #1
   14490:	4658      	mov	r0, fp
   14492:	f7f6 faaf 	bl	a9f4 <_malloc_r>
   14496:	4604      	mov	r4, r0
   14498:	2800      	cmp	r0, #0
   1449a:	d03c      	beq.n	14516 <_vfiprintf_r+0xf46>
   1449c:	9008      	str	r0, [sp, #32]
   1449e:	e795      	b.n	143cc <_vfiprintf_r+0xdfc>
   144a0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   144a2:	f7f8 fb35 	bl	cb10 <__retarget_lock_release_recursive>
   144a6:	f7ff b9e9 	b.w	1387c <_vfiprintf_r+0x2ac>
   144aa:	9b03      	ldr	r3, [sp, #12]
   144ac:	9307      	str	r3, [sp, #28]
   144ae:	e9cd 7703 	strd	r7, r7, [sp, #12]
   144b2:	9f08      	ldr	r7, [sp, #32]
   144b4:	f7ff b9bc 	b.w	13830 <_vfiprintf_r+0x260>
   144b8:	9819      	ldr	r0, [sp, #100]	; 0x64
   144ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   144bc:	3001      	adds	r0, #1
   144be:	e545      	b.n	13f4c <_vfiprintf_r+0x97c>
   144c0:	9b03      	ldr	r3, [sp, #12]
   144c2:	9307      	str	r3, [sp, #28]
   144c4:	4620      	mov	r0, r4
   144c6:	f7f8 fcfb 	bl	cec0 <strlen>
   144ca:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   144ce:	462f      	mov	r7, r5
   144d0:	9004      	str	r0, [sp, #16]
   144d2:	9303      	str	r3, [sp, #12]
   144d4:	9508      	str	r5, [sp, #32]
   144d6:	f7ff b9ab 	b.w	13830 <_vfiprintf_r+0x260>
   144da:	ee18 1a10 	vmov	r1, s16
   144de:	aa18      	add	r2, sp, #96	; 0x60
   144e0:	4658      	mov	r0, fp
   144e2:	f7ff f839 	bl	13558 <__sprint_r.part.0>
   144e6:	2800      	cmp	r0, #0
   144e8:	f43f aa36 	beq.w	13958 <_vfiprintf_r+0x388>
   144ec:	f7ff ba4d 	b.w	1398a <_vfiprintf_r+0x3ba>
   144f0:	9819      	ldr	r0, [sp, #100]	; 0x64
   144f2:	3001      	adds	r0, #1
   144f4:	e57a      	b.n	13fec <_vfiprintf_r+0xa1c>
   144f6:	468c      	mov	ip, r1
   144f8:	e46e      	b.n	13dd8 <_vfiprintf_r+0x808>
   144fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   144fc:	07d9      	lsls	r1, r3, #31
   144fe:	d405      	bmi.n	1450c <_vfiprintf_r+0xf3c>
   14500:	89ab      	ldrh	r3, [r5, #12]
   14502:	059a      	lsls	r2, r3, #22
   14504:	d402      	bmi.n	1450c <_vfiprintf_r+0xf3c>
   14506:	6da8      	ldr	r0, [r5, #88]	; 0x58
   14508:	f7f8 fb02 	bl	cb10 <__retarget_lock_release_recursive>
   1450c:	f04f 33ff 	mov.w	r3, #4294967295
   14510:	9305      	str	r3, [sp, #20]
   14512:	f7ff ba49 	b.w	139a8 <_vfiprintf_r+0x3d8>
   14516:	ee18 2a10 	vmov	r2, s16
   1451a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1451e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14522:	8193      	strh	r3, [r2, #12]
   14524:	f7ff ba35 	b.w	13992 <_vfiprintf_r+0x3c2>
   14528:	9c07      	ldr	r4, [sp, #28]
   1452a:	9704      	str	r7, [sp, #16]
   1452c:	e746      	b.n	143bc <_vfiprintf_r+0xdec>
   1452e:	9b07      	ldr	r3, [sp, #28]
   14530:	f898 1001 	ldrb.w	r1, [r8, #1]
   14534:	f853 7b04 	ldr.w	r7, [r3], #4
   14538:	9307      	str	r3, [sp, #28]
   1453a:	4690      	mov	r8, r2
   1453c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   14540:	f7ff b8b9 	b.w	136b6 <_vfiprintf_r+0xe6>
   14544:	ee18 2a10 	vmov	r2, s16
   14548:	8993      	ldrh	r3, [r2, #12]
   1454a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1454e:	8193      	strh	r3, [r2, #12]
   14550:	f7ff ba15 	b.w	1397e <_vfiprintf_r+0x3ae>
   14554:	cccccccd 	.word	0xcccccccd
   14558:	20000f1c 	.word	0x20000f1c

0001455c <__sbprintf>:
   1455c:	b570      	push	{r4, r5, r6, lr}
   1455e:	460c      	mov	r4, r1
   14560:	8989      	ldrh	r1, [r1, #12]
   14562:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   14566:	f021 0102 	bic.w	r1, r1, #2
   1456a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1456e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   14570:	911b      	str	r1, [sp, #108]	; 0x6c
   14572:	89e1      	ldrh	r1, [r4, #14]
   14574:	f8ad 1016 	strh.w	r1, [sp, #22]
   14578:	69e1      	ldr	r1, [r4, #28]
   1457a:	9109      	str	r1, [sp, #36]	; 0x24
   1457c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1457e:	910b      	str	r1, [sp, #44]	; 0x2c
   14580:	a91c      	add	r1, sp, #112	; 0x70
   14582:	9102      	str	r1, [sp, #8]
   14584:	9106      	str	r1, [sp, #24]
   14586:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1458a:	4606      	mov	r6, r0
   1458c:	9104      	str	r1, [sp, #16]
   1458e:	9107      	str	r1, [sp, #28]
   14590:	a818      	add	r0, sp, #96	; 0x60
   14592:	2100      	movs	r1, #0
   14594:	e9cd 3200 	strd	r3, r2, [sp]
   14598:	9108      	str	r1, [sp, #32]
   1459a:	f7f8 fab3 	bl	cb04 <__retarget_lock_init_recursive>
   1459e:	e9dd 3200 	ldrd	r3, r2, [sp]
   145a2:	a902      	add	r1, sp, #8
   145a4:	4630      	mov	r0, r6
   145a6:	f7ff f813 	bl	135d0 <_vfiprintf_r>
   145aa:	1e05      	subs	r5, r0, #0
   145ac:	db07      	blt.n	145be <__sbprintf+0x62>
   145ae:	a902      	add	r1, sp, #8
   145b0:	4630      	mov	r0, r6
   145b2:	f7fd fad3 	bl	11b5c <_fflush_r>
   145b6:	2800      	cmp	r0, #0
   145b8:	bf18      	it	ne
   145ba:	f04f 35ff 	movne.w	r5, #4294967295
   145be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   145c2:	065b      	lsls	r3, r3, #25
   145c4:	d503      	bpl.n	145ce <__sbprintf+0x72>
   145c6:	89a3      	ldrh	r3, [r4, #12]
   145c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   145cc:	81a3      	strh	r3, [r4, #12]
   145ce:	9818      	ldr	r0, [sp, #96]	; 0x60
   145d0:	f7f8 fa9a 	bl	cb08 <__retarget_lock_close_recursive>
   145d4:	4628      	mov	r0, r5
   145d6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   145da:	bd70      	pop	{r4, r5, r6, pc}

000145dc <__sfvwrite_r>:
   145dc:	6893      	ldr	r3, [r2, #8]
   145de:	2b00      	cmp	r3, #0
   145e0:	f000 8085 	beq.w	146ee <__sfvwrite_r+0x112>
   145e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   145ec:	460c      	mov	r4, r1
   145ee:	0719      	lsls	r1, r3, #28
   145f0:	4680      	mov	r8, r0
   145f2:	b083      	sub	sp, #12
   145f4:	4617      	mov	r7, r2
   145f6:	b298      	uxth	r0, r3
   145f8:	d525      	bpl.n	14646 <__sfvwrite_r+0x6a>
   145fa:	6923      	ldr	r3, [r4, #16]
   145fc:	b31b      	cbz	r3, 14646 <__sfvwrite_r+0x6a>
   145fe:	f010 0302 	ands.w	r3, r0, #2
   14602:	683d      	ldr	r5, [r7, #0]
   14604:	d02d      	beq.n	14662 <__sfvwrite_r+0x86>
   14606:	f04f 0a00 	mov.w	sl, #0
   1460a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 148cc <__sfvwrite_r+0x2f0>
   1460e:	4656      	mov	r6, sl
   14610:	46b9      	mov	r9, r7
   14612:	455e      	cmp	r6, fp
   14614:	4633      	mov	r3, r6
   14616:	4652      	mov	r2, sl
   14618:	bf28      	it	cs
   1461a:	465b      	movcs	r3, fp
   1461c:	4640      	mov	r0, r8
   1461e:	2e00      	cmp	r6, #0
   14620:	d052      	beq.n	146c8 <__sfvwrite_r+0xec>
   14622:	69e1      	ldr	r1, [r4, #28]
   14624:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14626:	47b8      	blx	r7
   14628:	2800      	cmp	r0, #0
   1462a:	dd56      	ble.n	146da <__sfvwrite_r+0xfe>
   1462c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14630:	1a1b      	subs	r3, r3, r0
   14632:	4482      	add	sl, r0
   14634:	1a36      	subs	r6, r6, r0
   14636:	f8c9 3008 	str.w	r3, [r9, #8]
   1463a:	2b00      	cmp	r3, #0
   1463c:	d1e9      	bne.n	14612 <__sfvwrite_r+0x36>
   1463e:	2000      	movs	r0, #0
   14640:	b003      	add	sp, #12
   14642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14646:	4621      	mov	r1, r4
   14648:	4640      	mov	r0, r8
   1464a:	f000 f97d 	bl	14948 <__swsetup_r>
   1464e:	2800      	cmp	r0, #0
   14650:	f040 8138 	bne.w	148c4 <__sfvwrite_r+0x2e8>
   14654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14658:	683d      	ldr	r5, [r7, #0]
   1465a:	b298      	uxth	r0, r3
   1465c:	f010 0302 	ands.w	r3, r0, #2
   14660:	d1d1      	bne.n	14606 <__sfvwrite_r+0x2a>
   14662:	f010 0901 	ands.w	r9, r0, #1
   14666:	d144      	bne.n	146f2 <__sfvwrite_r+0x116>
   14668:	464e      	mov	r6, r9
   1466a:	9700      	str	r7, [sp, #0]
   1466c:	b346      	cbz	r6, 146c0 <__sfvwrite_r+0xe4>
   1466e:	0582      	lsls	r2, r0, #22
   14670:	f8d4 b008 	ldr.w	fp, [r4, #8]
   14674:	f140 8085 	bpl.w	14782 <__sfvwrite_r+0x1a6>
   14678:	45b3      	cmp	fp, r6
   1467a:	465a      	mov	r2, fp
   1467c:	f200 80b4 	bhi.w	147e8 <__sfvwrite_r+0x20c>
   14680:	f410 6f90 	tst.w	r0, #1152	; 0x480
   14684:	f040 80c1 	bne.w	1480a <__sfvwrite_r+0x22e>
   14688:	6820      	ldr	r0, [r4, #0]
   1468a:	9201      	str	r2, [sp, #4]
   1468c:	4649      	mov	r1, r9
   1468e:	f7f8 f85d 	bl	c74c <memmove>
   14692:	68a3      	ldr	r3, [r4, #8]
   14694:	9a01      	ldr	r2, [sp, #4]
   14696:	eba3 010b 	sub.w	r1, r3, fp
   1469a:	6823      	ldr	r3, [r4, #0]
   1469c:	60a1      	str	r1, [r4, #8]
   1469e:	4413      	add	r3, r2
   146a0:	46b2      	mov	sl, r6
   146a2:	6023      	str	r3, [r4, #0]
   146a4:	2600      	movs	r6, #0
   146a6:	9a00      	ldr	r2, [sp, #0]
   146a8:	6893      	ldr	r3, [r2, #8]
   146aa:	eba3 030a 	sub.w	r3, r3, sl
   146ae:	44d1      	add	r9, sl
   146b0:	6093      	str	r3, [r2, #8]
   146b2:	2b00      	cmp	r3, #0
   146b4:	d0c3      	beq.n	1463e <__sfvwrite_r+0x62>
   146b6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   146ba:	b280      	uxth	r0, r0
   146bc:	2e00      	cmp	r6, #0
   146be:	d1d6      	bne.n	1466e <__sfvwrite_r+0x92>
   146c0:	e9d5 9600 	ldrd	r9, r6, [r5]
   146c4:	3508      	adds	r5, #8
   146c6:	e7d1      	b.n	1466c <__sfvwrite_r+0x90>
   146c8:	e9d5 a600 	ldrd	sl, r6, [r5]
   146cc:	3508      	adds	r5, #8
   146ce:	e7a0      	b.n	14612 <__sfvwrite_r+0x36>
   146d0:	4621      	mov	r1, r4
   146d2:	4640      	mov	r0, r8
   146d4:	f7fd fa42 	bl	11b5c <_fflush_r>
   146d8:	b388      	cbz	r0, 1473e <__sfvwrite_r+0x162>
   146da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   146de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   146e2:	f04f 30ff 	mov.w	r0, #4294967295
   146e6:	81a3      	strh	r3, [r4, #12]
   146e8:	b003      	add	sp, #12
   146ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146ee:	2000      	movs	r0, #0
   146f0:	4770      	bx	lr
   146f2:	461e      	mov	r6, r3
   146f4:	46ba      	mov	sl, r7
   146f6:	4699      	mov	r9, r3
   146f8:	4618      	mov	r0, r3
   146fa:	9500      	str	r5, [sp, #0]
   146fc:	461f      	mov	r7, r3
   146fe:	b366      	cbz	r6, 1475a <__sfvwrite_r+0x17e>
   14700:	2800      	cmp	r0, #0
   14702:	d032      	beq.n	1476a <__sfvwrite_r+0x18e>
   14704:	464a      	mov	r2, r9
   14706:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1470a:	6820      	ldr	r0, [r4, #0]
   1470c:	68a5      	ldr	r5, [r4, #8]
   1470e:	42b2      	cmp	r2, r6
   14710:	bf28      	it	cs
   14712:	4632      	movcs	r2, r6
   14714:	4288      	cmp	r0, r1
   14716:	d904      	bls.n	14722 <__sfvwrite_r+0x146>
   14718:	eb05 0b03 	add.w	fp, r5, r3
   1471c:	455a      	cmp	r2, fp
   1471e:	f300 80a7 	bgt.w	14870 <__sfvwrite_r+0x294>
   14722:	4293      	cmp	r3, r2
   14724:	dc64      	bgt.n	147f0 <__sfvwrite_r+0x214>
   14726:	69e1      	ldr	r1, [r4, #28]
   14728:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1472a:	463a      	mov	r2, r7
   1472c:	4640      	mov	r0, r8
   1472e:	47a8      	blx	r5
   14730:	f1b0 0b00 	subs.w	fp, r0, #0
   14734:	ddd1      	ble.n	146da <__sfvwrite_r+0xfe>
   14736:	ebb9 090b 	subs.w	r9, r9, fp
   1473a:	d0c9      	beq.n	146d0 <__sfvwrite_r+0xf4>
   1473c:	2001      	movs	r0, #1
   1473e:	f8da 3008 	ldr.w	r3, [sl, #8]
   14742:	eba3 030b 	sub.w	r3, r3, fp
   14746:	445f      	add	r7, fp
   14748:	eba6 060b 	sub.w	r6, r6, fp
   1474c:	f8ca 3008 	str.w	r3, [sl, #8]
   14750:	2b00      	cmp	r3, #0
   14752:	f43f af74 	beq.w	1463e <__sfvwrite_r+0x62>
   14756:	2e00      	cmp	r6, #0
   14758:	d1d2      	bne.n	14700 <__sfvwrite_r+0x124>
   1475a:	9a00      	ldr	r2, [sp, #0]
   1475c:	6856      	ldr	r6, [r2, #4]
   1475e:	4613      	mov	r3, r2
   14760:	3208      	adds	r2, #8
   14762:	9200      	str	r2, [sp, #0]
   14764:	2e00      	cmp	r6, #0
   14766:	d0f8      	beq.n	1475a <__sfvwrite_r+0x17e>
   14768:	681f      	ldr	r7, [r3, #0]
   1476a:	4632      	mov	r2, r6
   1476c:	210a      	movs	r1, #10
   1476e:	4638      	mov	r0, r7
   14770:	f7f8 fb46 	bl	ce00 <memchr>
   14774:	2800      	cmp	r0, #0
   14776:	f000 809c 	beq.w	148b2 <__sfvwrite_r+0x2d6>
   1477a:	3001      	adds	r0, #1
   1477c:	eba0 0907 	sub.w	r9, r0, r7
   14780:	e7c0      	b.n	14704 <__sfvwrite_r+0x128>
   14782:	6820      	ldr	r0, [r4, #0]
   14784:	6923      	ldr	r3, [r4, #16]
   14786:	4298      	cmp	r0, r3
   14788:	d816      	bhi.n	147b8 <__sfvwrite_r+0x1dc>
   1478a:	6962      	ldr	r2, [r4, #20]
   1478c:	42b2      	cmp	r2, r6
   1478e:	d813      	bhi.n	147b8 <__sfvwrite_r+0x1dc>
   14790:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14794:	42b3      	cmp	r3, r6
   14796:	bf28      	it	cs
   14798:	4633      	movcs	r3, r6
   1479a:	69e1      	ldr	r1, [r4, #28]
   1479c:	fb93 f3f2 	sdiv	r3, r3, r2
   147a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   147a2:	fb02 f303 	mul.w	r3, r2, r3
   147a6:	4640      	mov	r0, r8
   147a8:	464a      	mov	r2, r9
   147aa:	47b8      	blx	r7
   147ac:	f1b0 0a00 	subs.w	sl, r0, #0
   147b0:	dd93      	ble.n	146da <__sfvwrite_r+0xfe>
   147b2:	eba6 060a 	sub.w	r6, r6, sl
   147b6:	e776      	b.n	146a6 <__sfvwrite_r+0xca>
   147b8:	45b3      	cmp	fp, r6
   147ba:	46da      	mov	sl, fp
   147bc:	bf28      	it	cs
   147be:	46b2      	movcs	sl, r6
   147c0:	4652      	mov	r2, sl
   147c2:	4649      	mov	r1, r9
   147c4:	f7f7 ffc2 	bl	c74c <memmove>
   147c8:	68a3      	ldr	r3, [r4, #8]
   147ca:	6822      	ldr	r2, [r4, #0]
   147cc:	eba3 030a 	sub.w	r3, r3, sl
   147d0:	4452      	add	r2, sl
   147d2:	60a3      	str	r3, [r4, #8]
   147d4:	6022      	str	r2, [r4, #0]
   147d6:	2b00      	cmp	r3, #0
   147d8:	d1eb      	bne.n	147b2 <__sfvwrite_r+0x1d6>
   147da:	4621      	mov	r1, r4
   147dc:	4640      	mov	r0, r8
   147de:	f7fd f9bd 	bl	11b5c <_fflush_r>
   147e2:	2800      	cmp	r0, #0
   147e4:	d0e5      	beq.n	147b2 <__sfvwrite_r+0x1d6>
   147e6:	e778      	b.n	146da <__sfvwrite_r+0xfe>
   147e8:	6820      	ldr	r0, [r4, #0]
   147ea:	46b3      	mov	fp, r6
   147ec:	4632      	mov	r2, r6
   147ee:	e74c      	b.n	1468a <__sfvwrite_r+0xae>
   147f0:	4639      	mov	r1, r7
   147f2:	9201      	str	r2, [sp, #4]
   147f4:	f7f7 ffaa 	bl	c74c <memmove>
   147f8:	9a01      	ldr	r2, [sp, #4]
   147fa:	68a3      	ldr	r3, [r4, #8]
   147fc:	1a9b      	subs	r3, r3, r2
   147fe:	60a3      	str	r3, [r4, #8]
   14800:	6823      	ldr	r3, [r4, #0]
   14802:	4413      	add	r3, r2
   14804:	6023      	str	r3, [r4, #0]
   14806:	4693      	mov	fp, r2
   14808:	e795      	b.n	14736 <__sfvwrite_r+0x15a>
   1480a:	6823      	ldr	r3, [r4, #0]
   1480c:	6921      	ldr	r1, [r4, #16]
   1480e:	eba3 0b01 	sub.w	fp, r3, r1
   14812:	6963      	ldr	r3, [r4, #20]
   14814:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   14818:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1481c:	f10b 0301 	add.w	r3, fp, #1
   14820:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   14824:	4433      	add	r3, r6
   14826:	4553      	cmp	r3, sl
   14828:	4652      	mov	r2, sl
   1482a:	bf84      	itt	hi
   1482c:	469a      	movhi	sl, r3
   1482e:	4652      	movhi	r2, sl
   14830:	0543      	lsls	r3, r0, #21
   14832:	d52c      	bpl.n	1488e <__sfvwrite_r+0x2b2>
   14834:	4611      	mov	r1, r2
   14836:	4640      	mov	r0, r8
   14838:	f7f6 f8dc 	bl	a9f4 <_malloc_r>
   1483c:	2800      	cmp	r0, #0
   1483e:	d03b      	beq.n	148b8 <__sfvwrite_r+0x2dc>
   14840:	465a      	mov	r2, fp
   14842:	6921      	ldr	r1, [r4, #16]
   14844:	9001      	str	r0, [sp, #4]
   14846:	f7f3 fd65 	bl	8314 <memcpy>
   1484a:	89a2      	ldrh	r2, [r4, #12]
   1484c:	9b01      	ldr	r3, [sp, #4]
   1484e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14856:	81a2      	strh	r2, [r4, #12]
   14858:	eb03 000b 	add.w	r0, r3, fp
   1485c:	6123      	str	r3, [r4, #16]
   1485e:	ebaa 030b 	sub.w	r3, sl, fp
   14862:	f8c4 a014 	str.w	sl, [r4, #20]
   14866:	60a3      	str	r3, [r4, #8]
   14868:	6020      	str	r0, [r4, #0]
   1486a:	46b3      	mov	fp, r6
   1486c:	4632      	mov	r2, r6
   1486e:	e70c      	b.n	1468a <__sfvwrite_r+0xae>
   14870:	4639      	mov	r1, r7
   14872:	465a      	mov	r2, fp
   14874:	f7f7 ff6a 	bl	c74c <memmove>
   14878:	6823      	ldr	r3, [r4, #0]
   1487a:	445b      	add	r3, fp
   1487c:	6023      	str	r3, [r4, #0]
   1487e:	4621      	mov	r1, r4
   14880:	4640      	mov	r0, r8
   14882:	f7fd f96b 	bl	11b5c <_fflush_r>
   14886:	2800      	cmp	r0, #0
   14888:	f43f af55 	beq.w	14736 <__sfvwrite_r+0x15a>
   1488c:	e725      	b.n	146da <__sfvwrite_r+0xfe>
   1488e:	4640      	mov	r0, r8
   14890:	f7f6 fb78 	bl	af84 <_realloc_r>
   14894:	4603      	mov	r3, r0
   14896:	2800      	cmp	r0, #0
   14898:	d1de      	bne.n	14858 <__sfvwrite_r+0x27c>
   1489a:	6921      	ldr	r1, [r4, #16]
   1489c:	4640      	mov	r0, r8
   1489e:	f7f8 fc21 	bl	d0e4 <_free_r>
   148a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   148a6:	220c      	movs	r2, #12
   148a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   148ac:	f8c8 2000 	str.w	r2, [r8]
   148b0:	e715      	b.n	146de <__sfvwrite_r+0x102>
   148b2:	1c72      	adds	r2, r6, #1
   148b4:	4691      	mov	r9, r2
   148b6:	e726      	b.n	14706 <__sfvwrite_r+0x12a>
   148b8:	220c      	movs	r2, #12
   148ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   148be:	f8c8 2000 	str.w	r2, [r8]
   148c2:	e70c      	b.n	146de <__sfvwrite_r+0x102>
   148c4:	f04f 30ff 	mov.w	r0, #4294967295
   148c8:	e6ba      	b.n	14640 <__sfvwrite_r+0x64>
   148ca:	bf00      	nop
   148cc:	7ffffc00 	.word	0x7ffffc00

000148d0 <__submore>:
   148d0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   148d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148d8:	460c      	mov	r4, r1
   148da:	6b09      	ldr	r1, [r1, #48]	; 0x30
   148dc:	4299      	cmp	r1, r3
   148de:	d014      	beq.n	1490a <__submore+0x3a>
   148e0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   148e2:	0077      	lsls	r7, r6, #1
   148e4:	463a      	mov	r2, r7
   148e6:	f7f6 fb4d 	bl	af84 <_realloc_r>
   148ea:	4605      	mov	r5, r0
   148ec:	b340      	cbz	r0, 14940 <__submore+0x70>
   148ee:	eb00 0806 	add.w	r8, r0, r6
   148f2:	4601      	mov	r1, r0
   148f4:	4632      	mov	r2, r6
   148f6:	4640      	mov	r0, r8
   148f8:	f7f3 fd0c 	bl	8314 <memcpy>
   148fc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   14900:	f8c4 8000 	str.w	r8, [r4]
   14904:	2000      	movs	r0, #0
   14906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1490a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1490e:	f7f6 f871 	bl	a9f4 <_malloc_r>
   14912:	b1a8      	cbz	r0, 14940 <__submore+0x70>
   14914:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   14918:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1491c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   14920:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   14924:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   14928:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1492c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   14930:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   14934:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   14938:	6023      	str	r3, [r4, #0]
   1493a:	2000      	movs	r0, #0
   1493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14940:	f04f 30ff 	mov.w	r0, #4294967295
   14944:	e7df      	b.n	14906 <__submore+0x36>
   14946:	bf00      	nop

00014948 <__swsetup_r>:
   14948:	b538      	push	{r3, r4, r5, lr}
   1494a:	4b31      	ldr	r3, [pc, #196]	; (14a10 <__swsetup_r+0xc8>)
   1494c:	681b      	ldr	r3, [r3, #0]
   1494e:	4605      	mov	r5, r0
   14950:	460c      	mov	r4, r1
   14952:	b113      	cbz	r3, 1495a <__swsetup_r+0x12>
   14954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14956:	2a00      	cmp	r2, #0
   14958:	d04e      	beq.n	149f8 <__swsetup_r+0xb0>
   1495a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1495e:	0718      	lsls	r0, r3, #28
   14960:	b29a      	uxth	r2, r3
   14962:	d51c      	bpl.n	1499e <__swsetup_r+0x56>
   14964:	6921      	ldr	r1, [r4, #16]
   14966:	b329      	cbz	r1, 149b4 <__swsetup_r+0x6c>
   14968:	f012 0001 	ands.w	r0, r2, #1
   1496c:	d007      	beq.n	1497e <__swsetup_r+0x36>
   1496e:	2000      	movs	r0, #0
   14970:	60a0      	str	r0, [r4, #8]
   14972:	6960      	ldr	r0, [r4, #20]
   14974:	4240      	negs	r0, r0
   14976:	61a0      	str	r0, [r4, #24]
   14978:	b139      	cbz	r1, 1498a <__swsetup_r+0x42>
   1497a:	2000      	movs	r0, #0
   1497c:	bd38      	pop	{r3, r4, r5, pc}
   1497e:	0795      	lsls	r5, r2, #30
   14980:	bf58      	it	pl
   14982:	6960      	ldrpl	r0, [r4, #20]
   14984:	60a0      	str	r0, [r4, #8]
   14986:	2900      	cmp	r1, #0
   14988:	d1f7      	bne.n	1497a <__swsetup_r+0x32>
   1498a:	0612      	lsls	r2, r2, #24
   1498c:	bf58      	it	pl
   1498e:	4608      	movpl	r0, r1
   14990:	d5f4      	bpl.n	1497c <__swsetup_r+0x34>
   14992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14996:	81a3      	strh	r3, [r4, #12]
   14998:	f04f 30ff 	mov.w	r0, #4294967295
   1499c:	bd38      	pop	{r3, r4, r5, pc}
   1499e:	06d1      	lsls	r1, r2, #27
   149a0:	d52e      	bpl.n	14a00 <__swsetup_r+0xb8>
   149a2:	0752      	lsls	r2, r2, #29
   149a4:	d414      	bmi.n	149d0 <__swsetup_r+0x88>
   149a6:	6921      	ldr	r1, [r4, #16]
   149a8:	f043 0308 	orr.w	r3, r3, #8
   149ac:	81a3      	strh	r3, [r4, #12]
   149ae:	b29a      	uxth	r2, r3
   149b0:	2900      	cmp	r1, #0
   149b2:	d1d9      	bne.n	14968 <__swsetup_r+0x20>
   149b4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   149b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   149bc:	d0d4      	beq.n	14968 <__swsetup_r+0x20>
   149be:	4621      	mov	r1, r4
   149c0:	4628      	mov	r0, r5
   149c2:	f000 f977 	bl	14cb4 <__smakebuf_r>
   149c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   149ca:	6921      	ldr	r1, [r4, #16]
   149cc:	b29a      	uxth	r2, r3
   149ce:	e7cb      	b.n	14968 <__swsetup_r+0x20>
   149d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   149d2:	b151      	cbz	r1, 149ea <__swsetup_r+0xa2>
   149d4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   149d8:	4291      	cmp	r1, r2
   149da:	d004      	beq.n	149e6 <__swsetup_r+0x9e>
   149dc:	4628      	mov	r0, r5
   149de:	f7f8 fb81 	bl	d0e4 <_free_r>
   149e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   149e6:	2200      	movs	r2, #0
   149e8:	6322      	str	r2, [r4, #48]	; 0x30
   149ea:	6921      	ldr	r1, [r4, #16]
   149ec:	2200      	movs	r2, #0
   149ee:	e9c4 1200 	strd	r1, r2, [r4]
   149f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   149f6:	e7d7      	b.n	149a8 <__swsetup_r+0x60>
   149f8:	4618      	mov	r0, r3
   149fa:	f7f7 fd2f 	bl	c45c <__sinit>
   149fe:	e7ac      	b.n	1495a <__swsetup_r+0x12>
   14a00:	2209      	movs	r2, #9
   14a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a06:	602a      	str	r2, [r5, #0]
   14a08:	f04f 30ff 	mov.w	r0, #4294967295
   14a0c:	81a3      	strh	r3, [r4, #12]
   14a0e:	bd38      	pop	{r3, r4, r5, pc}
   14a10:	20008e7c 	.word	0x20008e7c

00014a14 <__fputwc>:
   14a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a18:	b082      	sub	sp, #8
   14a1a:	4682      	mov	sl, r0
   14a1c:	4688      	mov	r8, r1
   14a1e:	4614      	mov	r4, r2
   14a20:	f7f7 ffda 	bl	c9d8 <__locale_mb_cur_max>
   14a24:	2801      	cmp	r0, #1
   14a26:	d103      	bne.n	14a30 <__fputwc+0x1c>
   14a28:	f108 33ff 	add.w	r3, r8, #4294967295
   14a2c:	2bfe      	cmp	r3, #254	; 0xfe
   14a2e:	d936      	bls.n	14a9e <__fputwc+0x8a>
   14a30:	f10d 0904 	add.w	r9, sp, #4
   14a34:	4642      	mov	r2, r8
   14a36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   14a3a:	4649      	mov	r1, r9
   14a3c:	4650      	mov	r0, sl
   14a3e:	f7fe fb29 	bl	13094 <_wcrtomb_r>
   14a42:	1c42      	adds	r2, r0, #1
   14a44:	4606      	mov	r6, r0
   14a46:	d032      	beq.n	14aae <__fputwc+0x9a>
   14a48:	b320      	cbz	r0, 14a94 <__fputwc+0x80>
   14a4a:	f89d c004 	ldrb.w	ip, [sp, #4]
   14a4e:	2500      	movs	r5, #0
   14a50:	e009      	b.n	14a66 <__fputwc+0x52>
   14a52:	6823      	ldr	r3, [r4, #0]
   14a54:	1c5a      	adds	r2, r3, #1
   14a56:	6022      	str	r2, [r4, #0]
   14a58:	f883 c000 	strb.w	ip, [r3]
   14a5c:	3501      	adds	r5, #1
   14a5e:	42b5      	cmp	r5, r6
   14a60:	d218      	bcs.n	14a94 <__fputwc+0x80>
   14a62:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14a66:	68a3      	ldr	r3, [r4, #8]
   14a68:	3b01      	subs	r3, #1
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	60a3      	str	r3, [r4, #8]
   14a6e:	daf0      	bge.n	14a52 <__fputwc+0x3e>
   14a70:	69a7      	ldr	r7, [r4, #24]
   14a72:	42bb      	cmp	r3, r7
   14a74:	4661      	mov	r1, ip
   14a76:	4622      	mov	r2, r4
   14a78:	4650      	mov	r0, sl
   14a7a:	db02      	blt.n	14a82 <__fputwc+0x6e>
   14a7c:	f1bc 0f0a 	cmp.w	ip, #10
   14a80:	d1e7      	bne.n	14a52 <__fputwc+0x3e>
   14a82:	f000 f983 	bl	14d8c <__swbuf_r>
   14a86:	1c43      	adds	r3, r0, #1
   14a88:	d1e8      	bne.n	14a5c <__fputwc+0x48>
   14a8a:	4606      	mov	r6, r0
   14a8c:	4630      	mov	r0, r6
   14a8e:	b002      	add	sp, #8
   14a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a94:	4646      	mov	r6, r8
   14a96:	4630      	mov	r0, r6
   14a98:	b002      	add	sp, #8
   14a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a9e:	fa5f fc88 	uxtb.w	ip, r8
   14aa2:	f88d c004 	strb.w	ip, [sp, #4]
   14aa6:	4606      	mov	r6, r0
   14aa8:	f10d 0904 	add.w	r9, sp, #4
   14aac:	e7cf      	b.n	14a4e <__fputwc+0x3a>
   14aae:	89a3      	ldrh	r3, [r4, #12]
   14ab0:	4630      	mov	r0, r6
   14ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ab6:	81a3      	strh	r3, [r4, #12]
   14ab8:	b002      	add	sp, #8
   14aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14abe:	bf00      	nop

00014ac0 <_fputwc_r>:
   14ac0:	b530      	push	{r4, r5, lr}
   14ac2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14ac4:	f013 0f01 	tst.w	r3, #1
   14ac8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14acc:	4614      	mov	r4, r2
   14ace:	b083      	sub	sp, #12
   14ad0:	4605      	mov	r5, r0
   14ad2:	b29a      	uxth	r2, r3
   14ad4:	d101      	bne.n	14ada <_fputwc_r+0x1a>
   14ad6:	0598      	lsls	r0, r3, #22
   14ad8:	d51c      	bpl.n	14b14 <_fputwc_r+0x54>
   14ada:	0490      	lsls	r0, r2, #18
   14adc:	d406      	bmi.n	14aec <_fputwc_r+0x2c>
   14ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14ae8:	81a3      	strh	r3, [r4, #12]
   14aea:	6662      	str	r2, [r4, #100]	; 0x64
   14aec:	4622      	mov	r2, r4
   14aee:	4628      	mov	r0, r5
   14af0:	f7ff ff90 	bl	14a14 <__fputwc>
   14af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14af6:	07da      	lsls	r2, r3, #31
   14af8:	4605      	mov	r5, r0
   14afa:	d402      	bmi.n	14b02 <_fputwc_r+0x42>
   14afc:	89a3      	ldrh	r3, [r4, #12]
   14afe:	059b      	lsls	r3, r3, #22
   14b00:	d502      	bpl.n	14b08 <_fputwc_r+0x48>
   14b02:	4628      	mov	r0, r5
   14b04:	b003      	add	sp, #12
   14b06:	bd30      	pop	{r4, r5, pc}
   14b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14b0a:	f7f8 f801 	bl	cb10 <__retarget_lock_release_recursive>
   14b0e:	4628      	mov	r0, r5
   14b10:	b003      	add	sp, #12
   14b12:	bd30      	pop	{r4, r5, pc}
   14b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14b16:	9101      	str	r1, [sp, #4]
   14b18:	f7f7 fff8 	bl	cb0c <__retarget_lock_acquire_recursive>
   14b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14b20:	9901      	ldr	r1, [sp, #4]
   14b22:	b29a      	uxth	r2, r3
   14b24:	e7d9      	b.n	14ada <_fputwc_r+0x1a>
   14b26:	bf00      	nop

00014b28 <_wcsnrtombs_l>:
   14b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b2c:	b08b      	sub	sp, #44	; 0x2c
   14b2e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   14b32:	9f14      	ldr	r7, [sp, #80]	; 0x50
   14b34:	9103      	str	r1, [sp, #12]
   14b36:	4681      	mov	r9, r0
   14b38:	9205      	str	r2, [sp, #20]
   14b3a:	461e      	mov	r6, r3
   14b3c:	f1b8 0f00 	cmp.w	r8, #0
   14b40:	d05c      	beq.n	14bfc <_wcsnrtombs_l+0xd4>
   14b42:	9b03      	ldr	r3, [sp, #12]
   14b44:	2b00      	cmp	r3, #0
   14b46:	d05e      	beq.n	14c06 <_wcsnrtombs_l+0xde>
   14b48:	9b05      	ldr	r3, [sp, #20]
   14b4a:	681d      	ldr	r5, [r3, #0]
   14b4c:	2f00      	cmp	r7, #0
   14b4e:	d06a      	beq.n	14c26 <_wcsnrtombs_l+0xfe>
   14b50:	1e74      	subs	r4, r6, #1
   14b52:	b34e      	cbz	r6, 14ba8 <_wcsnrtombs_l+0x80>
   14b54:	9b03      	ldr	r3, [sp, #12]
   14b56:	9304      	str	r3, [sp, #16]
   14b58:	3d04      	subs	r5, #4
   14b5a:	2600      	movs	r6, #0
   14b5c:	9501      	str	r5, [sp, #4]
   14b5e:	e00b      	b.n	14b78 <_wcsnrtombs_l+0x50>
   14b60:	9b03      	ldr	r3, [sp, #12]
   14b62:	bb2b      	cbnz	r3, 14bb0 <_wcsnrtombs_l+0x88>
   14b64:	9b01      	ldr	r3, [sp, #4]
   14b66:	681a      	ldr	r2, [r3, #0]
   14b68:	2a00      	cmp	r2, #0
   14b6a:	d03a      	beq.n	14be2 <_wcsnrtombs_l+0xba>
   14b6c:	45bc      	cmp	ip, r7
   14b6e:	d25c      	bcs.n	14c2a <_wcsnrtombs_l+0x102>
   14b70:	3c01      	subs	r4, #1
   14b72:	1c63      	adds	r3, r4, #1
   14b74:	4666      	mov	r6, ip
   14b76:	d017      	beq.n	14ba8 <_wcsnrtombs_l+0x80>
   14b78:	f8d8 3000 	ldr.w	r3, [r8]
   14b7c:	9302      	str	r3, [sp, #8]
   14b7e:	9b01      	ldr	r3, [sp, #4]
   14b80:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   14b84:	f853 2f04 	ldr.w	r2, [r3, #4]!
   14b88:	9301      	str	r3, [sp, #4]
   14b8a:	a907      	add	r1, sp, #28
   14b8c:	4643      	mov	r3, r8
   14b8e:	4648      	mov	r0, r9
   14b90:	f8d8 b004 	ldr.w	fp, [r8, #4]
   14b94:	47a8      	blx	r5
   14b96:	1c42      	adds	r2, r0, #1
   14b98:	d03a      	beq.n	14c10 <_wcsnrtombs_l+0xe8>
   14b9a:	eb00 0c06 	add.w	ip, r0, r6
   14b9e:	45bc      	cmp	ip, r7
   14ba0:	d9de      	bls.n	14b60 <_wcsnrtombs_l+0x38>
   14ba2:	9b02      	ldr	r3, [sp, #8]
   14ba4:	e9c8 3b00 	strd	r3, fp, [r8]
   14ba8:	4630      	mov	r0, r6
   14baa:	b00b      	add	sp, #44	; 0x2c
   14bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bb0:	2800      	cmp	r0, #0
   14bb2:	dd0e      	ble.n	14bd2 <_wcsnrtombs_l+0xaa>
   14bb4:	9b04      	ldr	r3, [sp, #16]
   14bb6:	9d01      	ldr	r5, [sp, #4]
   14bb8:	4418      	add	r0, r3
   14bba:	1e5a      	subs	r2, r3, #1
   14bbc:	a907      	add	r1, sp, #28
   14bbe:	f100 3eff 	add.w	lr, r0, #4294967295
   14bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
   14bc6:	f802 3f01 	strb.w	r3, [r2, #1]!
   14bca:	4572      	cmp	r2, lr
   14bcc:	d1f9      	bne.n	14bc2 <_wcsnrtombs_l+0x9a>
   14bce:	9501      	str	r5, [sp, #4]
   14bd0:	9004      	str	r0, [sp, #16]
   14bd2:	9b05      	ldr	r3, [sp, #20]
   14bd4:	681a      	ldr	r2, [r3, #0]
   14bd6:	3204      	adds	r2, #4
   14bd8:	601a      	str	r2, [r3, #0]
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	681a      	ldr	r2, [r3, #0]
   14bde:	2a00      	cmp	r2, #0
   14be0:	d1c4      	bne.n	14b6c <_wcsnrtombs_l+0x44>
   14be2:	9b03      	ldr	r3, [sp, #12]
   14be4:	b10b      	cbz	r3, 14bea <_wcsnrtombs_l+0xc2>
   14be6:	9b05      	ldr	r3, [sp, #20]
   14be8:	601a      	str	r2, [r3, #0]
   14bea:	f10c 36ff 	add.w	r6, ip, #4294967295
   14bee:	2200      	movs	r2, #0
   14bf0:	4630      	mov	r0, r6
   14bf2:	f8c8 2000 	str.w	r2, [r8]
   14bf6:	b00b      	add	sp, #44	; 0x2c
   14bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bfc:	9b03      	ldr	r3, [sp, #12]
   14bfe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   14c02:	2b00      	cmp	r3, #0
   14c04:	d1a0      	bne.n	14b48 <_wcsnrtombs_l+0x20>
   14c06:	9b05      	ldr	r3, [sp, #20]
   14c08:	f04f 37ff 	mov.w	r7, #4294967295
   14c0c:	681d      	ldr	r5, [r3, #0]
   14c0e:	e79f      	b.n	14b50 <_wcsnrtombs_l+0x28>
   14c10:	4606      	mov	r6, r0
   14c12:	218a      	movs	r1, #138	; 0x8a
   14c14:	2200      	movs	r2, #0
   14c16:	4630      	mov	r0, r6
   14c18:	f8c9 1000 	str.w	r1, [r9]
   14c1c:	f8c8 2000 	str.w	r2, [r8]
   14c20:	b00b      	add	sp, #44	; 0x2c
   14c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c26:	463e      	mov	r6, r7
   14c28:	e7be      	b.n	14ba8 <_wcsnrtombs_l+0x80>
   14c2a:	4666      	mov	r6, ip
   14c2c:	e7bc      	b.n	14ba8 <_wcsnrtombs_l+0x80>
   14c2e:	bf00      	nop

00014c30 <_wcsnrtombs_r>:
   14c30:	b510      	push	{r4, lr}
   14c32:	b084      	sub	sp, #16
   14c34:	4c05      	ldr	r4, [pc, #20]	; (14c4c <_wcsnrtombs_r+0x1c>)
   14c36:	9806      	ldr	r0, [sp, #24]
   14c38:	9000      	str	r0, [sp, #0]
   14c3a:	9807      	ldr	r0, [sp, #28]
   14c3c:	9001      	str	r0, [sp, #4]
   14c3e:	4804      	ldr	r0, [pc, #16]	; (14c50 <_wcsnrtombs_r+0x20>)
   14c40:	6800      	ldr	r0, [r0, #0]
   14c42:	9402      	str	r4, [sp, #8]
   14c44:	f7ff ff70 	bl	14b28 <_wcsnrtombs_l>
   14c48:	b004      	add	sp, #16
   14c4a:	bd10      	pop	{r4, pc}
   14c4c:	200088f4 	.word	0x200088f4
   14c50:	20008e7c 	.word	0x20008e7c

00014c54 <category>:
   14c54:	4b15      	ldr	r3, [pc, #84]	; (14cac <category+0x58>)
   14c56:	4298      	cmp	r0, r3
   14c58:	d823      	bhi.n	14ca2 <category+0x4e>
   14c5a:	b570      	push	{r4, r5, r6, lr}
   14c5c:	4e14      	ldr	r6, [pc, #80]	; (14cb0 <category+0x5c>)
   14c5e:	f04f 0e00 	mov.w	lr, #0
   14c62:	f640 04db 	movw	r4, #2267	; 0x8db
   14c66:	e003      	b.n	14c70 <category+0x1c>
   14c68:	f102 0e01 	add.w	lr, r2, #1
   14c6c:	45a6      	cmp	lr, r4
   14c6e:	dc16      	bgt.n	14c9e <category+0x4a>
   14c70:	eb04 020e 	add.w	r2, r4, lr
   14c74:	f022 0301 	bic.w	r3, r2, #1
   14c78:	eb03 0362 	add.w	r3, r3, r2, asr #1
   14c7c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   14c80:	1052      	asrs	r2, r2, #1
   14c82:	7859      	ldrb	r1, [r3, #1]
   14c84:	885d      	ldrh	r5, [r3, #2]
   14c86:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   14c8a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14c8e:	448c      	add	ip, r1
   14c90:	4560      	cmp	r0, ip
   14c92:	d8e9      	bhi.n	14c68 <category+0x14>
   14c94:	4288      	cmp	r0, r1
   14c96:	d206      	bcs.n	14ca6 <category+0x52>
   14c98:	1e54      	subs	r4, r2, #1
   14c9a:	45a6      	cmp	lr, r4
   14c9c:	dde8      	ble.n	14c70 <category+0x1c>
   14c9e:	20ff      	movs	r0, #255	; 0xff
   14ca0:	bd70      	pop	{r4, r5, r6, pc}
   14ca2:	20ff      	movs	r0, #255	; 0xff
   14ca4:	4770      	bx	lr
   14ca6:	7818      	ldrb	r0, [r3, #0]
   14ca8:	bd70      	pop	{r4, r5, r6, pc}
   14caa:	bf00      	nop
   14cac:	000e01ef 	.word	0x000e01ef
   14cb0:	200029c0 	.word	0x200029c0

00014cb4 <__smakebuf_r>:
   14cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cb8:	898b      	ldrh	r3, [r1, #12]
   14cba:	460c      	mov	r4, r1
   14cbc:	0799      	lsls	r1, r3, #30
   14cbe:	b096      	sub	sp, #88	; 0x58
   14cc0:	d508      	bpl.n	14cd4 <__smakebuf_r+0x20>
   14cc2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   14cc6:	2201      	movs	r2, #1
   14cc8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   14ccc:	6023      	str	r3, [r4, #0]
   14cce:	b016      	add	sp, #88	; 0x58
   14cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14cd8:	2900      	cmp	r1, #0
   14cda:	4606      	mov	r6, r0
   14cdc:	db25      	blt.n	14d2a <__smakebuf_r+0x76>
   14cde:	466a      	mov	r2, sp
   14ce0:	f000 f8ac 	bl	14e3c <_fstat_r>
   14ce4:	2800      	cmp	r0, #0
   14ce6:	db1f      	blt.n	14d28 <__smakebuf_r+0x74>
   14ce8:	9d01      	ldr	r5, [sp, #4]
   14cea:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   14cee:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   14cf2:	fab5 f585 	clz	r5, r5
   14cf6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14cfa:	096d      	lsrs	r5, r5, #5
   14cfc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   14d00:	4641      	mov	r1, r8
   14d02:	4630      	mov	r0, r6
   14d04:	f7f5 fe76 	bl	a9f4 <_malloc_r>
   14d08:	b1e0      	cbz	r0, 14d44 <__smakebuf_r+0x90>
   14d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d0e:	f8c4 8014 	str.w	r8, [r4, #20]
   14d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14d16:	6020      	str	r0, [r4, #0]
   14d18:	6120      	str	r0, [r4, #16]
   14d1a:	81a3      	strh	r3, [r4, #12]
   14d1c:	bb35      	cbnz	r5, 14d6c <__smakebuf_r+0xb8>
   14d1e:	433b      	orrs	r3, r7
   14d20:	81a3      	strh	r3, [r4, #12]
   14d22:	b016      	add	sp, #88	; 0x58
   14d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d28:	89a3      	ldrh	r3, [r4, #12]
   14d2a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   14d2e:	d019      	beq.n	14d64 <__smakebuf_r+0xb0>
   14d30:	f04f 0840 	mov.w	r8, #64	; 0x40
   14d34:	2500      	movs	r5, #0
   14d36:	4641      	mov	r1, r8
   14d38:	4630      	mov	r0, r6
   14d3a:	462f      	mov	r7, r5
   14d3c:	f7f5 fe5a 	bl	a9f4 <_malloc_r>
   14d40:	2800      	cmp	r0, #0
   14d42:	d1e2      	bne.n	14d0a <__smakebuf_r+0x56>
   14d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d48:	059a      	lsls	r2, r3, #22
   14d4a:	d4c0      	bmi.n	14cce <__smakebuf_r+0x1a>
   14d4c:	f023 0303 	bic.w	r3, r3, #3
   14d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14d54:	f043 0302 	orr.w	r3, r3, #2
   14d58:	2101      	movs	r1, #1
   14d5a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   14d5e:	81a3      	strh	r3, [r4, #12]
   14d60:	6022      	str	r2, [r4, #0]
   14d62:	e7b4      	b.n	14cce <__smakebuf_r+0x1a>
   14d64:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14d68:	462f      	mov	r7, r5
   14d6a:	e7c9      	b.n	14d00 <__smakebuf_r+0x4c>
   14d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14d70:	4630      	mov	r0, r6
   14d72:	f000 f879 	bl	14e68 <_isatty_r>
   14d76:	b910      	cbnz	r0, 14d7e <__smakebuf_r+0xca>
   14d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d7c:	e7cf      	b.n	14d1e <__smakebuf_r+0x6a>
   14d7e:	89a3      	ldrh	r3, [r4, #12]
   14d80:	f023 0303 	bic.w	r3, r3, #3
   14d84:	f043 0301 	orr.w	r3, r3, #1
   14d88:	b21b      	sxth	r3, r3
   14d8a:	e7c8      	b.n	14d1e <__smakebuf_r+0x6a>

00014d8c <__swbuf_r>:
   14d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d8e:	460d      	mov	r5, r1
   14d90:	4614      	mov	r4, r2
   14d92:	4606      	mov	r6, r0
   14d94:	b110      	cbz	r0, 14d9c <__swbuf_r+0x10>
   14d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14d98:	2b00      	cmp	r3, #0
   14d9a:	d04c      	beq.n	14e36 <__swbuf_r+0xaa>
   14d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14da0:	69a3      	ldr	r3, [r4, #24]
   14da2:	60a3      	str	r3, [r4, #8]
   14da4:	0717      	lsls	r7, r2, #28
   14da6:	b290      	uxth	r0, r2
   14da8:	d51b      	bpl.n	14de2 <__swbuf_r+0x56>
   14daa:	6923      	ldr	r3, [r4, #16]
   14dac:	b1cb      	cbz	r3, 14de2 <__swbuf_r+0x56>
   14dae:	b2ed      	uxtb	r5, r5
   14db0:	0481      	lsls	r1, r0, #18
   14db2:	462f      	mov	r7, r5
   14db4:	d522      	bpl.n	14dfc <__swbuf_r+0x70>
   14db6:	6822      	ldr	r2, [r4, #0]
   14db8:	6961      	ldr	r1, [r4, #20]
   14dba:	1ad3      	subs	r3, r2, r3
   14dbc:	4299      	cmp	r1, r3
   14dbe:	dd29      	ble.n	14e14 <__swbuf_r+0x88>
   14dc0:	3301      	adds	r3, #1
   14dc2:	68a1      	ldr	r1, [r4, #8]
   14dc4:	3901      	subs	r1, #1
   14dc6:	60a1      	str	r1, [r4, #8]
   14dc8:	1c51      	adds	r1, r2, #1
   14dca:	6021      	str	r1, [r4, #0]
   14dcc:	7015      	strb	r5, [r2, #0]
   14dce:	6962      	ldr	r2, [r4, #20]
   14dd0:	429a      	cmp	r2, r3
   14dd2:	d027      	beq.n	14e24 <__swbuf_r+0x98>
   14dd4:	89a3      	ldrh	r3, [r4, #12]
   14dd6:	07db      	lsls	r3, r3, #31
   14dd8:	d501      	bpl.n	14dde <__swbuf_r+0x52>
   14dda:	2d0a      	cmp	r5, #10
   14ddc:	d022      	beq.n	14e24 <__swbuf_r+0x98>
   14dde:	4638      	mov	r0, r7
   14de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14de2:	4621      	mov	r1, r4
   14de4:	4630      	mov	r0, r6
   14de6:	f7ff fdaf 	bl	14948 <__swsetup_r>
   14dea:	bb08      	cbnz	r0, 14e30 <__swbuf_r+0xa4>
   14dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14df0:	6923      	ldr	r3, [r4, #16]
   14df2:	b290      	uxth	r0, r2
   14df4:	b2ed      	uxtb	r5, r5
   14df6:	0481      	lsls	r1, r0, #18
   14df8:	462f      	mov	r7, r5
   14dfa:	d4dc      	bmi.n	14db6 <__swbuf_r+0x2a>
   14dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14e00:	81a2      	strh	r2, [r4, #12]
   14e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14e04:	6961      	ldr	r1, [r4, #20]
   14e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   14e0a:	6662      	str	r2, [r4, #100]	; 0x64
   14e0c:	6822      	ldr	r2, [r4, #0]
   14e0e:	1ad3      	subs	r3, r2, r3
   14e10:	4299      	cmp	r1, r3
   14e12:	dcd5      	bgt.n	14dc0 <__swbuf_r+0x34>
   14e14:	4621      	mov	r1, r4
   14e16:	4630      	mov	r0, r6
   14e18:	f7fc fea0 	bl	11b5c <_fflush_r>
   14e1c:	b940      	cbnz	r0, 14e30 <__swbuf_r+0xa4>
   14e1e:	6822      	ldr	r2, [r4, #0]
   14e20:	2301      	movs	r3, #1
   14e22:	e7ce      	b.n	14dc2 <__swbuf_r+0x36>
   14e24:	4621      	mov	r1, r4
   14e26:	4630      	mov	r0, r6
   14e28:	f7fc fe98 	bl	11b5c <_fflush_r>
   14e2c:	2800      	cmp	r0, #0
   14e2e:	d0d6      	beq.n	14dde <__swbuf_r+0x52>
   14e30:	f04f 37ff 	mov.w	r7, #4294967295
   14e34:	e7d3      	b.n	14dde <__swbuf_r+0x52>
   14e36:	f7f7 fb11 	bl	c45c <__sinit>
   14e3a:	e7af      	b.n	14d9c <__swbuf_r+0x10>

00014e3c <_fstat_r>:
   14e3c:	b570      	push	{r4, r5, r6, lr}
   14e3e:	460c      	mov	r4, r1
   14e40:	4d08      	ldr	r5, [pc, #32]	; (14e64 <_fstat_r+0x28>)
   14e42:	4603      	mov	r3, r0
   14e44:	2600      	movs	r6, #0
   14e46:	4620      	mov	r0, r4
   14e48:	4611      	mov	r1, r2
   14e4a:	461c      	mov	r4, r3
   14e4c:	602e      	str	r6, [r5, #0]
   14e4e:	f7f3 fc47 	bl	86e0 <_fstat>
   14e52:	1c43      	adds	r3, r0, #1
   14e54:	d000      	beq.n	14e58 <_fstat_r+0x1c>
   14e56:	bd70      	pop	{r4, r5, r6, pc}
   14e58:	682b      	ldr	r3, [r5, #0]
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d0fb      	beq.n	14e56 <_fstat_r+0x1a>
   14e5e:	6023      	str	r3, [r4, #0]
   14e60:	bd70      	pop	{r4, r5, r6, pc}
   14e62:	bf00      	nop
   14e64:	200216e4 	.word	0x200216e4

00014e68 <_isatty_r>:
   14e68:	b538      	push	{r3, r4, r5, lr}
   14e6a:	4d07      	ldr	r5, [pc, #28]	; (14e88 <_isatty_r+0x20>)
   14e6c:	2200      	movs	r2, #0
   14e6e:	4604      	mov	r4, r0
   14e70:	4608      	mov	r0, r1
   14e72:	602a      	str	r2, [r5, #0]
   14e74:	f7f3 fc3a 	bl	86ec <_isatty>
   14e78:	1c43      	adds	r3, r0, #1
   14e7a:	d000      	beq.n	14e7e <_isatty_r+0x16>
   14e7c:	bd38      	pop	{r3, r4, r5, pc}
   14e7e:	682b      	ldr	r3, [r5, #0]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d0fb      	beq.n	14e7c <_isatty_r+0x14>
   14e84:	6023      	str	r3, [r4, #0]
   14e86:	bd38      	pop	{r3, r4, r5, pc}
   14e88:	200216e4 	.word	0x200216e4

00014e8c <__aeabi_drsub>:
   14e8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   14e90:	e002      	b.n	14e98 <__adddf3>
   14e92:	bf00      	nop

00014e94 <__aeabi_dsub>:
   14e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00014e98 <__adddf3>:
   14e98:	b530      	push	{r4, r5, lr}
   14e9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   14e9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   14ea2:	ea94 0f05 	teq	r4, r5
   14ea6:	bf08      	it	eq
   14ea8:	ea90 0f02 	teqeq	r0, r2
   14eac:	bf1f      	itttt	ne
   14eae:	ea54 0c00 	orrsne.w	ip, r4, r0
   14eb2:	ea55 0c02 	orrsne.w	ip, r5, r2
   14eb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   14eba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   14ebe:	f000 80e2 	beq.w	15086 <__adddf3+0x1ee>
   14ec2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   14ec6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   14eca:	bfb8      	it	lt
   14ecc:	426d      	neglt	r5, r5
   14ece:	dd0c      	ble.n	14eea <__adddf3+0x52>
   14ed0:	442c      	add	r4, r5
   14ed2:	ea80 0202 	eor.w	r2, r0, r2
   14ed6:	ea81 0303 	eor.w	r3, r1, r3
   14eda:	ea82 0000 	eor.w	r0, r2, r0
   14ede:	ea83 0101 	eor.w	r1, r3, r1
   14ee2:	ea80 0202 	eor.w	r2, r0, r2
   14ee6:	ea81 0303 	eor.w	r3, r1, r3
   14eea:	2d36      	cmp	r5, #54	; 0x36
   14eec:	bf88      	it	hi
   14eee:	bd30      	pophi	{r4, r5, pc}
   14ef0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   14ef4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14ef8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   14efc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14f00:	d002      	beq.n	14f08 <__adddf3+0x70>
   14f02:	4240      	negs	r0, r0
   14f04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14f08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   14f0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14f10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14f14:	d002      	beq.n	14f1c <__adddf3+0x84>
   14f16:	4252      	negs	r2, r2
   14f18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14f1c:	ea94 0f05 	teq	r4, r5
   14f20:	f000 80a7 	beq.w	15072 <__adddf3+0x1da>
   14f24:	f1a4 0401 	sub.w	r4, r4, #1
   14f28:	f1d5 0e20 	rsbs	lr, r5, #32
   14f2c:	db0d      	blt.n	14f4a <__adddf3+0xb2>
   14f2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   14f32:	fa22 f205 	lsr.w	r2, r2, r5
   14f36:	1880      	adds	r0, r0, r2
   14f38:	f141 0100 	adc.w	r1, r1, #0
   14f3c:	fa03 f20e 	lsl.w	r2, r3, lr
   14f40:	1880      	adds	r0, r0, r2
   14f42:	fa43 f305 	asr.w	r3, r3, r5
   14f46:	4159      	adcs	r1, r3
   14f48:	e00e      	b.n	14f68 <__adddf3+0xd0>
   14f4a:	f1a5 0520 	sub.w	r5, r5, #32
   14f4e:	f10e 0e20 	add.w	lr, lr, #32
   14f52:	2a01      	cmp	r2, #1
   14f54:	fa03 fc0e 	lsl.w	ip, r3, lr
   14f58:	bf28      	it	cs
   14f5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   14f5e:	fa43 f305 	asr.w	r3, r3, r5
   14f62:	18c0      	adds	r0, r0, r3
   14f64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   14f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14f6c:	d507      	bpl.n	14f7e <__adddf3+0xe6>
   14f6e:	f04f 0e00 	mov.w	lr, #0
   14f72:	f1dc 0c00 	rsbs	ip, ip, #0
   14f76:	eb7e 0000 	sbcs.w	r0, lr, r0
   14f7a:	eb6e 0101 	sbc.w	r1, lr, r1
   14f7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14f82:	d31b      	bcc.n	14fbc <__adddf3+0x124>
   14f84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14f88:	d30c      	bcc.n	14fa4 <__adddf3+0x10c>
   14f8a:	0849      	lsrs	r1, r1, #1
   14f8c:	ea5f 0030 	movs.w	r0, r0, rrx
   14f90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   14f94:	f104 0401 	add.w	r4, r4, #1
   14f98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   14f9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   14fa0:	f080 809a 	bcs.w	150d8 <__adddf3+0x240>
   14fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   14fa8:	bf08      	it	eq
   14faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   14fae:	f150 0000 	adcs.w	r0, r0, #0
   14fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14fb6:	ea41 0105 	orr.w	r1, r1, r5
   14fba:	bd30      	pop	{r4, r5, pc}
   14fbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   14fc0:	4140      	adcs	r0, r0
   14fc2:	eb41 0101 	adc.w	r1, r1, r1
   14fc6:	3c01      	subs	r4, #1
   14fc8:	bf28      	it	cs
   14fca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   14fce:	d2e9      	bcs.n	14fa4 <__adddf3+0x10c>
   14fd0:	f091 0f00 	teq	r1, #0
   14fd4:	bf04      	itt	eq
   14fd6:	4601      	moveq	r1, r0
   14fd8:	2000      	moveq	r0, #0
   14fda:	fab1 f381 	clz	r3, r1
   14fde:	bf08      	it	eq
   14fe0:	3320      	addeq	r3, #32
   14fe2:	f1a3 030b 	sub.w	r3, r3, #11
   14fe6:	f1b3 0220 	subs.w	r2, r3, #32
   14fea:	da0c      	bge.n	15006 <__adddf3+0x16e>
   14fec:	320c      	adds	r2, #12
   14fee:	dd08      	ble.n	15002 <__adddf3+0x16a>
   14ff0:	f102 0c14 	add.w	ip, r2, #20
   14ff4:	f1c2 020c 	rsb	r2, r2, #12
   14ff8:	fa01 f00c 	lsl.w	r0, r1, ip
   14ffc:	fa21 f102 	lsr.w	r1, r1, r2
   15000:	e00c      	b.n	1501c <__adddf3+0x184>
   15002:	f102 0214 	add.w	r2, r2, #20
   15006:	bfd8      	it	le
   15008:	f1c2 0c20 	rsble	ip, r2, #32
   1500c:	fa01 f102 	lsl.w	r1, r1, r2
   15010:	fa20 fc0c 	lsr.w	ip, r0, ip
   15014:	bfdc      	itt	le
   15016:	ea41 010c 	orrle.w	r1, r1, ip
   1501a:	4090      	lslle	r0, r2
   1501c:	1ae4      	subs	r4, r4, r3
   1501e:	bfa2      	ittt	ge
   15020:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   15024:	4329      	orrge	r1, r5
   15026:	bd30      	popge	{r4, r5, pc}
   15028:	ea6f 0404 	mvn.w	r4, r4
   1502c:	3c1f      	subs	r4, #31
   1502e:	da1c      	bge.n	1506a <__adddf3+0x1d2>
   15030:	340c      	adds	r4, #12
   15032:	dc0e      	bgt.n	15052 <__adddf3+0x1ba>
   15034:	f104 0414 	add.w	r4, r4, #20
   15038:	f1c4 0220 	rsb	r2, r4, #32
   1503c:	fa20 f004 	lsr.w	r0, r0, r4
   15040:	fa01 f302 	lsl.w	r3, r1, r2
   15044:	ea40 0003 	orr.w	r0, r0, r3
   15048:	fa21 f304 	lsr.w	r3, r1, r4
   1504c:	ea45 0103 	orr.w	r1, r5, r3
   15050:	bd30      	pop	{r4, r5, pc}
   15052:	f1c4 040c 	rsb	r4, r4, #12
   15056:	f1c4 0220 	rsb	r2, r4, #32
   1505a:	fa20 f002 	lsr.w	r0, r0, r2
   1505e:	fa01 f304 	lsl.w	r3, r1, r4
   15062:	ea40 0003 	orr.w	r0, r0, r3
   15066:	4629      	mov	r1, r5
   15068:	bd30      	pop	{r4, r5, pc}
   1506a:	fa21 f004 	lsr.w	r0, r1, r4
   1506e:	4629      	mov	r1, r5
   15070:	bd30      	pop	{r4, r5, pc}
   15072:	f094 0f00 	teq	r4, #0
   15076:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1507a:	bf06      	itte	eq
   1507c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15080:	3401      	addeq	r4, #1
   15082:	3d01      	subne	r5, #1
   15084:	e74e      	b.n	14f24 <__adddf3+0x8c>
   15086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1508a:	bf18      	it	ne
   1508c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15090:	d029      	beq.n	150e6 <__adddf3+0x24e>
   15092:	ea94 0f05 	teq	r4, r5
   15096:	bf08      	it	eq
   15098:	ea90 0f02 	teqeq	r0, r2
   1509c:	d005      	beq.n	150aa <__adddf3+0x212>
   1509e:	ea54 0c00 	orrs.w	ip, r4, r0
   150a2:	bf04      	itt	eq
   150a4:	4619      	moveq	r1, r3
   150a6:	4610      	moveq	r0, r2
   150a8:	bd30      	pop	{r4, r5, pc}
   150aa:	ea91 0f03 	teq	r1, r3
   150ae:	bf1e      	ittt	ne
   150b0:	2100      	movne	r1, #0
   150b2:	2000      	movne	r0, #0
   150b4:	bd30      	popne	{r4, r5, pc}
   150b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   150ba:	d105      	bne.n	150c8 <__adddf3+0x230>
   150bc:	0040      	lsls	r0, r0, #1
   150be:	4149      	adcs	r1, r1
   150c0:	bf28      	it	cs
   150c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   150c6:	bd30      	pop	{r4, r5, pc}
   150c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   150cc:	bf3c      	itt	cc
   150ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   150d2:	bd30      	popcc	{r4, r5, pc}
   150d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   150d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   150dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   150e0:	f04f 0000 	mov.w	r0, #0
   150e4:	bd30      	pop	{r4, r5, pc}
   150e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   150ea:	bf1a      	itte	ne
   150ec:	4619      	movne	r1, r3
   150ee:	4610      	movne	r0, r2
   150f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   150f4:	bf1c      	itt	ne
   150f6:	460b      	movne	r3, r1
   150f8:	4602      	movne	r2, r0
   150fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   150fe:	bf06      	itte	eq
   15100:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   15104:	ea91 0f03 	teqeq	r1, r3
   15108:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1510c:	bd30      	pop	{r4, r5, pc}
   1510e:	bf00      	nop

00015110 <__aeabi_ui2d>:
   15110:	f090 0f00 	teq	r0, #0
   15114:	bf04      	itt	eq
   15116:	2100      	moveq	r1, #0
   15118:	4770      	bxeq	lr
   1511a:	b530      	push	{r4, r5, lr}
   1511c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15120:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15124:	f04f 0500 	mov.w	r5, #0
   15128:	f04f 0100 	mov.w	r1, #0
   1512c:	e750      	b.n	14fd0 <__adddf3+0x138>
   1512e:	bf00      	nop

00015130 <__aeabi_i2d>:
   15130:	f090 0f00 	teq	r0, #0
   15134:	bf04      	itt	eq
   15136:	2100      	moveq	r1, #0
   15138:	4770      	bxeq	lr
   1513a:	b530      	push	{r4, r5, lr}
   1513c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15140:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15144:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15148:	bf48      	it	mi
   1514a:	4240      	negmi	r0, r0
   1514c:	f04f 0100 	mov.w	r1, #0
   15150:	e73e      	b.n	14fd0 <__adddf3+0x138>
   15152:	bf00      	nop

00015154 <__aeabi_f2d>:
   15154:	0042      	lsls	r2, r0, #1
   15156:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1515a:	ea4f 0131 	mov.w	r1, r1, rrx
   1515e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15162:	bf1f      	itttt	ne
   15164:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   15168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1516c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15170:	4770      	bxne	lr
   15172:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   15176:	bf08      	it	eq
   15178:	4770      	bxeq	lr
   1517a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1517e:	bf04      	itt	eq
   15180:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   15184:	4770      	bxeq	lr
   15186:	b530      	push	{r4, r5, lr}
   15188:	f44f 7460 	mov.w	r4, #896	; 0x380
   1518c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15194:	e71c      	b.n	14fd0 <__adddf3+0x138>
   15196:	bf00      	nop

00015198 <__aeabi_ul2d>:
   15198:	ea50 0201 	orrs.w	r2, r0, r1
   1519c:	bf08      	it	eq
   1519e:	4770      	bxeq	lr
   151a0:	b530      	push	{r4, r5, lr}
   151a2:	f04f 0500 	mov.w	r5, #0
   151a6:	e00a      	b.n	151be <__aeabi_l2d+0x16>

000151a8 <__aeabi_l2d>:
   151a8:	ea50 0201 	orrs.w	r2, r0, r1
   151ac:	bf08      	it	eq
   151ae:	4770      	bxeq	lr
   151b0:	b530      	push	{r4, r5, lr}
   151b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   151b6:	d502      	bpl.n	151be <__aeabi_l2d+0x16>
   151b8:	4240      	negs	r0, r0
   151ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   151be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   151c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   151c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   151ca:	f43f aed8 	beq.w	14f7e <__adddf3+0xe6>
   151ce:	f04f 0203 	mov.w	r2, #3
   151d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   151d6:	bf18      	it	ne
   151d8:	3203      	addne	r2, #3
   151da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   151de:	bf18      	it	ne
   151e0:	3203      	addne	r2, #3
   151e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   151e6:	f1c2 0320 	rsb	r3, r2, #32
   151ea:	fa00 fc03 	lsl.w	ip, r0, r3
   151ee:	fa20 f002 	lsr.w	r0, r0, r2
   151f2:	fa01 fe03 	lsl.w	lr, r1, r3
   151f6:	ea40 000e 	orr.w	r0, r0, lr
   151fa:	fa21 f102 	lsr.w	r1, r1, r2
   151fe:	4414      	add	r4, r2
   15200:	e6bd      	b.n	14f7e <__adddf3+0xe6>
   15202:	bf00      	nop

00015204 <__aeabi_d2lz>:
   15204:	b508      	push	{r3, lr}
   15206:	4602      	mov	r2, r0
   15208:	460b      	mov	r3, r1
   1520a:	ec43 2b17 	vmov	d7, r2, r3
   1520e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   15212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15216:	d403      	bmi.n	15220 <__aeabi_d2lz+0x1c>
   15218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1521c:	f000 b80c 	b.w	15238 <__aeabi_d2ulz>
   15220:	eeb1 7b47 	vneg.f64	d7, d7
   15224:	ec51 0b17 	vmov	r0, r1, d7
   15228:	f000 f806 	bl	15238 <__aeabi_d2ulz>
   1522c:	4240      	negs	r0, r0
   1522e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15232:	bd08      	pop	{r3, pc}
   15234:	0000      	movs	r0, r0
	...

00015238 <__aeabi_d2ulz>:
   15238:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 15268 <__aeabi_d2ulz+0x30>
   1523c:	ec41 0b17 	vmov	d7, r0, r1
   15240:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 15270 <__aeabi_d2ulz+0x38>
   15244:	ee27 6b06 	vmul.f64	d6, d7, d6
   15248:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1524c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   15250:	eea4 7b45 	vfms.f64	d7, d4, d5
   15254:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   15258:	ee16 1a10 	vmov	r1, s12
   1525c:	ee17 0a90 	vmov	r0, s15
   15260:	4770      	bx	lr
   15262:	bf00      	nop
   15264:	f3af 8000 	nop.w
   15268:	00000000 	.word	0x00000000
   1526c:	3df00000 	.word	0x3df00000
   15270:	00000000 	.word	0x00000000
   15274:	41f00000 	.word	0x41f00000

00015278 <___init_veneer>:
   15278:	f85f f000 	ldr.w	pc, [pc]	; 1527c <___init_veneer+0x4>
   1527c:	600026b9 	.word	0x600026b9

00015280 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   15280:	f85f f000 	ldr.w	pc, [pc]	; 15284 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   15284:	60001655 	.word	0x60001655

00015288 <___ZN16CrashReportClasscvbEv_veneer>:
   15288:	f85f f000 	ldr.w	pc, [pc]	; 1528c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1528c:	60001eb5 	.word	0x60001eb5

00015290 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   15290:	f85f f000 	ldr.w	pc, [pc]	; 15294 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   15294:	6000171d 	.word	0x6000171d

00015298 <___reboot_Teensyduino__veneer>:
   15298:	f85f f000 	ldr.w	pc, [pc]	; 1529c <___reboot_Teensyduino__veneer+0x4>
   1529c:	60002611 	.word	0x60002611

Disassembly of section .fini:

000152a0 <_fini>:
   152a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152a2:	bf00      	nop


.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d0 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00017110 l    d  .fini	00000000 .fini
00017114 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200096c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60022f04 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000a6b0 l     F .text.itcm	000000a0 endpoint0_receive
0000a750 l     F .text.itcm	0000007c schedule_transfer
0000a7cc l     F .text.itcm	00000034 run_callbacks
0000a800 l     F .text.itcm	0000001c usb_endpoint_config
0000a81c l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20028181 l     O .bss	00000008 endpoint0_buffer
20027768 l     O .bss	00000004 endpoint0_notify_mask
2000bdc0 l     O .bss	00000008 endpoint0_setupdata
2002776c l     O .bss	00000004 endpointN_notify_mask
2002818b l     O .bss	00000008 reply_buffer
200281a5 l     O .bss	00000001 sof_usage
200281ad l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
2002789c l     O .bss	00000004 s_hotCount
200278a0 l     O .bss	00000004 s_hotTemp
200278a4 l     O .bss	00000004 s_hot_ROOM
200278a8 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
20028180 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20027804 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
0000065c l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
2000bdcc l     O .bss	00000004 guard variable for loop::status
20027240 l     O .bss	00000004 loop::t0
20027f8c l     O .bss	00000002 loop::mxb
20027f8e l     O .bss	00000002 loop::status
20027244 l     O .bss	00000004 loop::loopCount
20007e84 l     O .data	00000027 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008c0 l     F .text.itcm	000000a8 acq_isr()
00000c14 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
200269dc l     O .bss	00000008 dma
20200000 l     O .bss.dma	00000800 i2s_buffer
00000000 l    df *ABS*	00000000 Filing.cpp
000026e6 l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
00002706 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000272a l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
2000bdd0 l     O .bss	00001200 diskBuffer
200251dc l     O .bss	00001800 tempBuffer0
00002f58 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000cfd0 l     O .bss	00000200 fileHeader
20028064 l     O .bss	00000050 dirName
20026df4 l     O .bss	00000200 wav_hdr
200280b4 l     O .bss	00000050 fileName
2002723c l     O .bss	00000004 checkEndOfFile(short)::dta
20028108 l     O .bss	00000050 timeStamp()::date_time
20008d74 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
2000935b l     O .data	00000012 device_descriptor
6000271e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c62 l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000c88 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cc4 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010b4 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001562 l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000016cc l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001a34 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001d8c l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001d9e l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001db4 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001dd8 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001ddc l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001df0 l     F .text.itcm	00000030 menuGetLine()
00001e20 l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001e3c l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20027f6c l     O .bss	00000020 store
20028158 l     O .bss	00000028 menuGetLine()::buffer
20007eab l     O .data	00000027 version
00000000 l    df *ABS*	00000000 Queue.cpp
2000d1d8 l     O .bss	00018000 data_buffer
2000d1d4 l     O .bss	00000004 queue_busy
20026be4 l     O .bss	00000004 head
20026be8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
200269e4 l     O .bss	00000200 dout
20026bf4 l     O .bss	00000200 outData
20026ff4 l     O .bss	00000200 tempData
20027248 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
000032d0 l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
20007e78 l     O .data	00000004 regs
20007e7c l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20007ee9 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
000037b0 l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
000037c8 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
0000421a l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2002724c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20027250 l     O .bss	00000004 MTPD::write(char const*, int)::dst
200079e8 l     O .data	00000010 propertyList
200079f8 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
200078bc l     O .data	0000012c lookupTable
20007a20 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00006028 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000069e8 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00007a3c l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008afc l     F .text.itcm	0000002c sdIrs()
00008b28 l     F .text.itcm	00000020 gpioMux(unsigned char)
00008b48 l     F .text.itcm	00000018 isBusyCommandComplete()
00008b60 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008b70 l     F .text.itcm	00000014 isBusyDat()
00008b84 l     F .text.itcm	0000000c isBusyDMA()
00008b90 l     F .text.itcm	00000014 isBusyFifoRead()
00008ba4 l     F .text.itcm	00000014 isBusyFifoWrite()
00008bb8 l     F .text.itcm	00000018 isBusyTransferComplete()
00008bd0 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00008cd8 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00008cfc l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00008d48 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00008d78 l     F .text.itcm	000000d4 initSDHC()
00008e68 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00008ed0 l     F .text.itcm	00000020 statusCMD13()
00008ef0 l     F .text.itcm	00000010 isBusyCMD13()
00008f04 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00008f5c l     F .text.itcm	00000030 waitDmaStatus()
00008f8c l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009284 l     F .text.itcm	0000005c waitTransferComplete()
000094ec l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20028040 l     O .bss	00000001 m_initDone
2000d1d0 l     O .bss	00000004 m_sdClkKhz
20028041 l     O .bss	00000001 m_version2
200251d8 l     O .bss	00000004 m_errorLine
20028042 l     O .bss	00000001 m_highCapacity
20028043 l     O .bss	00000001 m_transferActive
20028044 l     O .bss	00000010 m_cid
20028054 l     O .bss	00000010 m_csd
20026bec l     O .bss	00000004 m_ocr
20026bf0 l     O .bss	00000004 m_rca
200271f4 l     O .bss	00000004 m_busyFcn
20028104 l     O .bss	00000001 m_dmaBusy
200271f8 l     O .bss	00000004 m_irqstat
2000935a l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00009a2c l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009d94 l     F .text.itcm	00000060 rx_queue_transfer
20200800 l     O .bss.dma	00001000 rx_buffer
00009df4 l     F .text.itcm	000000ac rx_event
00009ea0 l     F .text.itcm	0000008c usb_serial_flush_callback
20201800 l     O .bss.dma	00002000 txbuffer
20027884 l     O .bss	00000004 rx_available
20027f98 l     O .bss	00000010 rx_count
20028193 l     O .bss	00000001 rx_head
20027fa8 l     O .bss	00000010 rx_index
20028195 l     O .bss	00000009 rx_list
20027fb8 l     O .bss	00000002 rx_packet_size
200281a3 l     O .bss	00000001 rx_tail
2000bb40 l     O .bss	00000100 rx_transfer
200281a6 l     O .bss	00000001 transmit_previous_timeout
2002803a l     O .bss	00000002 tx_available
200281a7 l     O .bss	00000001 tx_head
200281a9 l     O .bss	00000001 tx_noautoflush
2002803c l     O .bss	00000002 tx_packet_size
2000bcc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000b40c l     F .text.itcm	00000058 flash_wait
2002818a l     O .bss	00000001 initialized
20027fbc l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000baa4 l     F .text.itcm	00000010 txEvent_event
0000bab4 l     F .text.itcm	0000003c rx_event
0000baf0 l     F .text.itcm	00000060 rx_queue_transfer
20028194 l     O .bss	00000001 rx_head
2002819e l     O .bss	00000005 rx_list
20027888 l     O .bss	00000014 rx_list_transfer_len
20027fba l     O .bss	00000002 rx_packet_size
200281a4 l     O .bss	00000001 rx_tail
2000bc40 l     O .bss	00000080 rx_transfer
200281a8 l     O .bss	00000001 tx_head
2002803e l     O .bss	00000002 tx_packet_size
2000bd40 l     O .bss	00000080 tx_transfer
20203800 l     O .bss.dma	00000800 rx_buffer
20204000 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20028107 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c0b6 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-realloc.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000de64 l     F .text.itcm	00000144 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000dfc4 l     F .text.itcm	00000018 stdio_exit_handler
0000dfdc l     F .text.itcm	00000040 cleanup_stdio
0000e01c l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000f0b0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-stpncpy.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00013c38 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00014a4c l     F .text.itcm	00000140 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoll.o
00014b90 l     F .text.itcm	0000016c _strtoll_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoull.o
00014d00 l     F .text.itcm	0000019c _strtoull_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-mbrtowc.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-iswspace.o
00000000 l    df *ABS*	00000000 libc_a-iswspace_l.o
00000000 l    df *ABS*	00000000 libc_a-jp2uc.o
00014f88 l     F .text.itcm	00000134 __jp2uc
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiscanf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
000153b8 l     F .text.itcm	00000076 __sprint_r.part.0
000163bc l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-categories.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
000170d8 l     F .text.itcm	00000008 ___init_veneer
000170e0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000170e8 l     F .text.itcm	00000008 __usb_init_veneer
000170f0 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
000170f8 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00017100 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00017108 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
60002428 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002430 l     F .text.code	00000008 __memset_veneer
60002438 l     F .text.code	00000008 __main_veneer
60002440 l     F .text.code	00000008 __delay_veneer
60002448 l     F .text.code	00000008 ____libc_init_array_veneer
60002450 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
60002458 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002460 l     F .text.code	00000008 __pwm_init_veneer
60002468 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002470 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002478 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002480 l     F .text.code	00000008 __sm_set_pool_veneer
60002488 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002490 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002498 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
600024a0 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
600024a8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600024b0 l     F .text.code	00000008 __set_arm_clock_veneer
600024b8 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
00006a18  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d0 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
000051b0 g     F .text.itcm	000000a8 toUpcase(unsigned short)
0000106e g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000025c8 g     F .text.itcm	0000005c pushData(unsigned long*)
0000a148 g     F .text.itcm	00000014 usb_serial_available
0001030c g     F .text.itcm	00000062 __any_on
00016cc8 g     F .text.itcm	00000024 _isatty_r
0000eb1c g     F .text.itcm	000000ba strcpy
00007580 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000e72c g     F .text.itcm	0000002c _lseek_r
00009024 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000be24  w    F .text.itcm	00000074 yield
00008468  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20027824 g     O .bss	00000060 proc_stat
20027f68 g     O .bss	00000004 usb_timer1_callback
00003948 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
000039a0 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
000073dc g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000c192 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
20027d84 g     O .bss	000001b8 storage
60002630 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20027f96 g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
000083d2  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20008af4 g     O .data	00000140 Wire1
00001198 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
00008abc  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00017008 g     F .text.itcm	0000005a .hidden __floatdidf
00007bb8 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
2002781c g     O .bss	00000004 procCount
000078e8 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200271fc g     O .bss	00000004 FsDateTime::callback
200273e8 g     O .bss	00000001 __lock___atexit_recursive_mutex
00014ef4 g     F .text.itcm	0000004c _wcrtomb_r
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00007cdc g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
000088a4 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c12c g     F .text.itcm	0000001a Print::println()
00004ec4 g     F .text.itcm	00000098 TwoWire::isr()
200004a8 g     O .data	00000070 vtable for DedicatedSpiCard
20027820 g     O .bss	00000004 procMiss
0000e314 g     F .text.itcm	00000020 __sseek
0000e0f0 g     F .text.itcm	0000003c __sinit
0000569c g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
0001038c g     F .text.itcm	000000a4 fcvtbuf
00016bec g     F .text.itcm	000000b0 __swbuf_r
00003866 g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000cbec g     F .text.itcm	0000000c __malloc_unlock
000034ee g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
2000932c g     O .data	00000004 t_4
20027234 g     O .bss	00000004 FsVolume::m_cwv
000034a8 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002598 g     F .text.itcm	00000008 getStore()
00007000 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
2000bdc8 g     O .bss	00000004 SerNum
20028106 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
000083c6  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000de58 g     F .text.itcm	0000000c _strtod_r
00001590 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000e33c g     F .text.itcm	0000004a _vdprintf_r
000086f6 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000b464 g     F .text.itcm	00000044 eeprom_initialize
00002e3c g     F .text.itcm	0000011c saveData(short)
20009342 g     O .data	00000002 shift
200089a0 g     O .data	00000004 F_CPU_ACTUAL
00015304 g     F .text.itcm	000000b4 _sfread_r
0000e468 g     F .text.itcm	000000f8 memmove
20027f48 g     O .bss	00000004 t_1
000015be g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
200277f8 g     O .bss	00000004 max_stat
0000e18c g     F .text.itcm	00000088 snprintf
000099ac g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000f8fc g     F .text.itcm	0000004c _Balloc
00000c4e  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001711c g       .ARM.exidx	00000000 __exidx_end
000077fa g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20028105 g     O .bss	00000001 EventResponder::runningFromYield
00009ba2 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
000082bc g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000b898 g     F .text.itcm	00000060 tempmonGetTemp
0000b7d8 g     F .text.itcm	0000001e smalloc_verify_pool
20008d78 g     O .data	00000004 __atexit_recursive_mutex
0000e7d4 g     F .text.itcm	0000000c __errno
00001ff0 g     F .text.itcm	000000a8 saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2002720c g     O .bss	00000004 EventResponder::firstInterrupt
0000aea4 g     F .text.itcm	00000028 usb_transfer_status
00003af6 g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000b82a g     F .text.itcm	0000006a sm_set_pool
000029f0 g     F .text.itcm	00000014 newFolder(int)
20027214 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
20027560 g     O .bss	00000004 __stdio_exit_handler
000004a4  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00005fc4 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00017064 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
00002868 g     F .text.itcm	00000014 headerUpdate(long)
0000c028  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00016c9c g     F .text.itcm	0000002c _fstat_r
2000743c g     O .data	00000370 digital_pin_to_info_PGM
20027770 g     O .bss	00000004 errno
00009bac g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00005d48 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002568  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
0000e2d0 g     F .text.itcm	00000004 __seofread
00017118 g       .text.itcm	00000000 _etext
00007ff8 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200096c0 g       .bss	00000000 _sbss
00008c80 g     F .text.itcm	0000000c SdioCard::errorData() const
20027f50 g     O .bss	00000004 tempData0
00000d4a g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
0000375a g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
000038f6 g     F .text.itcm	00000016 MTPD::write16(unsigned short)
0000182c g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
000092e0 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00005ee4 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002728 g       *ABS*	00000000 _stextload
00000248 g     F .text.itcm	00000214 loop
0000b99c g     F .text.itcm	00000072 flexpwm_init
0000b528 g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000adb8 g     F .text.itcm	00000040 usb_config_rx
00003d10 g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
0000546c g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000097e4 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00004ccc g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
0000353a g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20027208 g     O .bss	00000004 EventResponder::lastInterrupt
0000815c g     F .text.itcm	0000002a FsBaseFile::close()
00004a96 g     F .text.itcm	00000048 SPIClass::end()
00009c60 g     F .text.itcm	00000134 memcpy
0000f720 g     F .text.itcm	000001b0 __hexnan
000015f0 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
0000896c g     F .text.itcm	00000032 SharedSpiCard::writeStop()
00004ff8 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000146e g     F .text.itcm	000000f4 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00001fe0 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200096c0 g     O .data	00000000 .hidden __TMC_END__
00005e28 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
0000132c g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00006cc2 g     F .text.itcm	00000026 FatFile::peek()
00002098 g     F .text.itcm	00000040 menu1(short)
20027800 g     O .bss	00000004 nbuf
00010430 g     F .text.itcm	00001b44 _svfprintf_r
00016f90 g     F .text.itcm	00000022 .hidden __floatsidf
20027f40 g     O .bss	00000004 systick_millis_count
000064c8 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000bc88 g     F .text.itcm	00000030 usb_mtp_available
0000045c g     F .text.itcm	00000048 setup1()
00004c98 g     F .text.itcm	00000034 TwoWire::wait_idle()
00004458 g     F .text.itcm	000005e6 MTPD::loop()
0000c364 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200281ab g     O .bss	00000001 usb_configuration
000083bc  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000b7f6 g     F .text.itcm	00000034 sm_align_pool
00009a10 g     F .text.itcm	0000001c SdioCard::syncDevice()
000093f8 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
00006ce8 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
0001024c g     F .text.itcm	00000062 __ratio
00008476 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002630  w    O .text.progmem	00000018 usb_string_manufacturer_name
20009328 g     O .data	00000004 t_3
60002608 g     O .text.progmem	00000008 usb_string_mtp
0000c660 g     F .text.itcm	00000010 malloc
000034a8 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025b8  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
20000540  w    O .data	00000024 vtable for FsFile
0000b38a  w    F .text.itcm	0000000a _fstat
00014f58 g     F .text.itcm	00000006 iswspace
20027564 g     O .bss	00000200 acqBuffer
00004aea  w    F .text.itcm	0000001e TwoWire::read()
00013b80 g     F .text.itcm	00000040 __assert_func
00004424 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002af4 g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
00008186 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
20027d7c g     O .bss	00000004 sessionID_
00002b94 g     F .text.itcm	00000068 do_hibernate(unsigned long)
000083c2  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c38  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
20027424 g     O .bss	00000004 __malloc_top_pad
0000b3c8 g     F .text.itcm	00000044 rtc_set
000152c8 g     F .text.itcm	0000003a __ssrefill_r
20027f44 g     O .bss	00000004 systick_safe_read
00004b84 g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
0000655c g     F .text.itcm	000000ca ExFatFile::truncate()
20008d80 g     O .data	00000000 .hidden __dso_handle
0000b604 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00016f70 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00013afc g     F .text.itcm	00000008 _localeconv_r
20009320 g     O .data	00000004 sd_str
00014e9c g     F .text.itcm	00000004 _strtoull_r
00009b4e g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
0001643c g     F .text.itcm	000002f4 __sfvwrite_r
0000fb50 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
0000bb50 g     F .text.itcm	000000a4 usb_mtp_configure
20009334 g     O .data	00000004 t_on
600026b5 g     O .text.progmem	00000069 usb_config_descriptor_480
0000c394 g     F .text.itcm	000002c8 .hidden __udivmoddi4
00003c48 g     F .text.itcm	000000c8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00016cec g     F .text.itcm	00000000 .hidden __aeabi_drsub
00009b9c g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006a3e g     F .text.itcm	00000036 FatFile::addCluster()
0000e784 g     F .text.itcm	00000024 _sbrk_r
00008e4c g     F .text.itcm	0000001c SdioCard::type() const
00003898 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a1bc g     F .text.itcm	0000001e usb_serial_getchar
00000d32  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20027f58 g     O .bss	00000008 usb_cdc_line_coding
0000b8f8 g     F .text.itcm	00000040 digitalWrite
000075d8  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20027210 g     O .bss	00000004 EventResponder::lastYield
00005446 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000e758 g     F .text.itcm	0000002c _read_r
00000c9e  w    F .text.itcm	00000024 Print::write(char const*)
20027f54 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008460  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000137c4 g     F .text.itcm	000000c6 _fclose_r
20027774 g     O .bss	00000010 extmem_smalloc_pool
2002741c g     O .bss	00000004 __malloc_max_sbrked_mem
000087ec g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b938 g     F .text.itcm	00000064 pinMode
000013a6 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000eb4  w    F .text.itcm	0000001c FsFile::FsFile()
0000c228 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00016fb4 g     F .text.itcm	00000042 .hidden __extendsfdf2
00011f74 g     F .text.itcm	00001850 __ssvfscanf_r
0000bfec  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000e6c  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00016cf8 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20008c34 g     O .data	00000140 Wire2
00003c18 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003884 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60023000 g     O .text.csf	00000c00 hab_csf
0000390c g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007840 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000100b4 g     F .text.itcm	000000c2 __b2d
0000330c g     F .text.itcm	0000019c adc_init()
00017114 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000008b4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20009324 g     O .data	00000004 t_2
0000bfc8  w    F .text.itcm	00000008 Print::print(unsigned char)
0000b394  w    F .text.itcm	00000004 _isatty
20027204 g     O .bss	00000004 EventResponder::firstYield
20009314 g     O .data	00000004 params0
00000ea6 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
0000508c g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000cc10 g     F .text.itcm	000003d8 _realloc_r
0000e7e0 g     F .text.itcm	00000048 __libc_init_array
0000af14 g     F .text.itcm	00000248 dtostrf
00004ade  w    F .text.itcm	0000000c TwoWire::available()
00005b92 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00008c8c g     F .text.itcm	0000001c SdioCard::readCID(CID*)
200006c0 g     O .data	00000100 __hexdig
00006312 g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00001462 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
000019f0 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00016920 g     F .text.itcm	00000066 _fputwc_r
000034cc g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
0000fa00 g     F .text.itcm	000000b0 __s2b
0000876e  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b39e  w    F .text.itcm	00000004 abort
00004db0 g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c010  w    F .text.itcm	00000004 usb_serial_class::clear()
00016f70 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b354  w    F .text.itcm	0000002c _sbrk
60019844 g       *ABS*	00000000 _sdataload
0000feb8 g     F .text.itcm	00000042 __mcmp
00001776 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
20008d7c g     O .data	00000004 __brkval
200281aa g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
00009f2c g     F .text.itcm	00000002 usb_serial_reset
00006ae4 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000b6b8 g     F .text.itcm	00000104 eeprom_write_byte
00000f8c  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00017098 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
6000264c g     O .text.progmem	00000069 usb_config_descriptor_12
20000564 g     O .data	00000024 vtable for TwoWire
0000cfe8 g     F .text.itcm	00000e70 _strtod_l
0000f6e8 g     F .text.itcm	00000036 __match
200281e0 g       .bss	00000000 _ebss
000090a0 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000039b4 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
20009318 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00003740 g     F .text.itcm	00000004 rtc_setup(unsigned char, unsigned char)
0000fab0 g     F .text.itcm	00000040 __hi0bits
000053fa g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
00004f68 g     F .text.itcm	0000000c lpi2c3_isr()
000063c2 g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20204880 g       .bss.dma	00000000 _heap_start
00003acc g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200273ec g     O .bss	00000001 __lock___malloc_recursive_mutex
00001b6c g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00005fdc g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
60002518  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008b4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20027428 g     O .bss	00000138 __sf
20008998 g     O .data	00000004 CrashReport
200278b0 g     O .bss	000004cc sdx
0000866c g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000518 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200096e0 g     O .bss	00000020 endpoint0_transfer_data
0000684e g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00005162 g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000c354 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000ba44 g     F .text.itcm	00000060 pwm_init
00016cf8 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20027784 g     O .bss	00000050 file
0000418c g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
2000936d g     O .data	00000001 usb_mtp_status
60023c00 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
0000fd08 g     F .text.itcm	000000c0 __pow5mult
00006dc6 g     F .text.itcm	0000004c FatFile::rmdir()
2000049c g     O .data	0000000c vtable for CrashReportClass
00016ff8 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00004f74 g     F .text.itcm	0000000c lpi2c4_isr()
00007778 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
200277d4 g     O .bss	00000004 haveStore
00008afa  w    F .text.itcm	00000002 SdioCard::end()
200096c0 g     O .bss	00000020 endpoint0_transfer_ack
20027f60 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ae64 g     F .text.itcm	00000024 usb_transmit
00000d00  w    F .text.itcm	00000014 Print::println(char const*)
0000bed4 g     F .text.itcm	00000020 systick_isr
0000e834 g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003744 g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
000038c0 g     F .text.itcm	00000020 MTPD::write(char const*, int)
200089a4 g     O .data	00000010 Serial
200277d8 g     O .bss	00000020 logBuffer
00001fe8 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c030  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000825c g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
0000607c g     F .text.itcm	00000094 ExFatFile::addCluster()
000085d0 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a104 g     F .text.itcm	00000044 usb_serial_peekchar
0000e12c g     F .text.itcm	0000000c __sfp_lock_acquire
0000ebe0 g     F .text.itcm	00000000 memchr
000076a8 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000a460 g     F .text.itcm	00000250 set_arm_clock
20027f3c g     O .bss	00000004 systick_cycle_count
20009344 g     O .data	00000016 usb_string_serial_number_default
0000eea4 g     F .text.itcm	0000020c _free_r
000088da g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00016ab4 g     F .text.itcm	00000060 category
0000899e g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009384 g     F .text.itcm	00000074 SdioCard::readStop()
00000d66  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
000083ca  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000e6fc g     F .text.itcm	0000000c __locale_mb_cur_max
00014f40 g     F .text.itcm	00000016 _wcsrtombs_r
20027258 g     O .bss	00000190 __atexit0
00001912 g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c020  w    F .text.itcm	00000004 usb_serial_class::flush()
00015248 g     F .text.itcm	00000080 _sungetc_r
00016cf4 g     F .text.itcm	0000027a .hidden __aeabi_dsub
200092f8 g     O .data	00000004 __malloc_sbrk_base
0000c018  w    F .text.itcm	00000004 usb_serial_class::read()
00014cfc g     F .text.itcm	00000004 _strtoll_r
000080a4 g     F .text.itcm	000000b8 FatFile::remove()
00016ff8 g     F .text.itcm	0000006a .hidden __floatundidf
00000eb4  w    F .text.itcm	0000001c FsFile::FsFile()
0000b398  w    F .text.itcm	00000006 _lseek
0000fdc8 g     F .text.itcm	000000f0 __lshift
00002bfc g     F .text.itcm	00000240 storeData(short)
000071a6 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000ae38 g     F .text.itcm	0000002c usb_prepare_transfer
000083ce  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b1d4 g     F .text.itcm	00000180 unused_interrupt_vector
00015148 g     F .text.itcm	00000100 __ssprint_r
60001d28 g     F .text.code	0000012c tempmon_init
20027f64 g     O .bss	00000004 usb_timer0_callback
00007aec g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000e3a4 g     F .text.itcm	00000062 _vasnprintf_r
0000ed7c g     F .text.itcm	00000088 __register_exitproc
000083f8 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00005acc g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000b4a8 g     F .text.itcm	00000064 eeprom_read_byte
0000e5c8 g     F .text.itcm	00000044 strlcpy
0000e60c g     F .text.itcm	0000008a strncmp
00007a5a g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
0000640a g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a15c g     F .text.itcm	00000060 usb_serial_flush_input
20009310 g     O .data	00000004 fsamp
00005e82 g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001234 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f28  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
0000fbac g     F .text.itcm	0000015c __multiply
000025a0 g     F .text.itcm	0000001c getDataCount()
0000a368 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000e698 g     F .text.itcm	00000064 strncpy
200273f4 g     O .bss	00000028 __malloc_current_mallinfo
00000ac8 g     F .text.itcm	00000080 i2s_setup()
00003304 g     F .text.itcm	00000008 adcStart()
00010178 g     F .text.itcm	000000d4 __d2b
000089ec g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
00008af2  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
00008d38  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c52  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b48 g     F .text.itcm	000000a4 dma_setup()
0000cbf8 g     F .text.itcm	00000018 realloc
000084f4 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008730 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00009480 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00014b8c g     F .text.itcm	00000004 _strtoul_r
0000bcb8 g     F .text.itcm	000000c4 usb_mtp_send
0000a910 g     F .text.itcm	000004a8 usb_isr
0000dfac g     F .text.itcm	0000000c __cxa_atexit
000054ec g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000e708 g     F .text.itcm	00000024 _close_r
00008a82  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00016f90 g     F .text.itcm	00000022 .hidden __aeabi_i2d
000087aa g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005114 g     F .text.itcm	0000004e FsCache::sync()
0000e408 g     F .text.itcm	00000060 memcmp
20000518  w    O .data	00000028 vtable for usb_serial_class
00009bce g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000e82c g     F .text.itcm	00000002 __retarget_lock_close_recursive
00003f5e g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
00009c16 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200278ac g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000e254 g     F .text.itcm	00000058 sscanf
000167a8 g     F .text.itcm	000000cc __swsetup_r
0000c65c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
0000619c g     F .text.itcm	00000056 ExFatFile::rmdir()
00003e1c g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d14  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002794 g     F .text.itcm	000000d4 headerInit(long, long, long, int)
00008776 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
000102b0 g     F .text.itcm	0000005c __copybits
000041c0 g     F .text.itcm	00000016 MTPD::read16()
00000c5e g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20008ef0 g     O .data	00000408 __malloc_av_
20027254 g     O .bss	00000004 __atexit
0000e2ac g     F .text.itcm	00000022 __sread
0000a3cc g     F .text.itcm	00000094 usb_serial_flush_output
0000b50c g     F .text.itcm	0000001c eeprom_read_block
0000cbe0 g     F .text.itcm	0000000c __malloc_lock
000052e8 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20009400 g     O .data	000002c0 _VectorsRam
00009bd6 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00008640 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
000139bc g     F .text.itcm	00000054 _fflush_r
00013bc0 g     F .text.itcm	00000078 _calloc_r
00004128 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
000028dc g     F .text.itcm	000000b8 makeHeader(long*)
00000ee8  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
00007d74 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
20009330 g     O .data	00000004 t_acq
200281ae g     O .bss	00000001 yield_active_check_flags
000062d0 g     F .text.itcm	00000042 ExFatFile::sync()
0000e830 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
200281ac g     O .bss	00000001 usb_high_speed
0000724a g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
0000917c g     F .text.itcm	00000040 SdioCard::isBusy()
000038e0 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
00009c1c g     F .text.itcm	00000000 memset
0000c036 g     F .text.itcm	00000010 main
20027420 g     O .bss	00000004 __malloc_max_total_mem
00005bcc g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000e828 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20204800 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00008a1c g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006628 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
2000043c g     O .data	00000060 vtable for MTPStorage_SD
00004250 g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000e560 g     F .text.itcm	00000066 strlcat
0000e334 g     F .text.itcm	00000008 __sclose
0000bd7c g     F .text.itcm	00000054 usb_init_serialnumber
0000dfa8 g     F .text.itcm	00000004 _strtol_r
600024d0 g       .text.code	00000000 __init_array_end
00013d60 g     F .text.itcm	00000cec _dtoa_r
0000c680 g     F .text.itcm	00000560 _malloc_r
000083d6 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010370 g     F .text.itcm	0000001a __ascii_wctomb
00017008 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20027238 g     O .bss	00000004 FatVolume::m_cwv
0000bfc0  w    F .text.itcm	00000008 Print::print(char const*)
00016730 g     F .text.itcm	00000076 __submore
200005f8  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c074 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004a40 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
65e42ad0 g       *ABS*	00000000 __rtc_localtime
0000b15c g     F .text.itcm	0000004c micros
0000395c g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
000061f4 g     F .text.itcm	000000dc ExFatFile::syncDir()
00004f80 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0000ee04 g     F .text.itcm	000000a0 _malloc_trim_r
00016988 g     F .text.itcm	00000106 _wcsnrtombs_l
60002648 g     O .text.progmem	00000004 string0
0000a1dc g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000a8b0 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000dc6  w    F .text.itcm	00000050 FsBaseFile::available() const
00008a66 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c01c  w    F .text.itcm	00000004 usb_serial_class::available()
0000e848 g     F .text.itcm	000002dc strcmp
000041ea g     F .text.itcm	00000030 MTPD::readstring(char*)
00006f70 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
00006056  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002610  w    O .text.progmem	00000020 usb_string_product_name
00003840 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b1a8 g     F .text.itcm	0000002a delay
00017098 g     F .text.itcm	00000040 .hidden __fixunsdfdi
20027f92 g     O .bss	00000002 dma_channel_allocated_mask
00000e4a g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00000e84  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00017110 g     F .fini	00000000 _fini
000032f4 g     F .text.itcm	00000008 acqPower(int)
0000273c  w    F .text.itcm	00000014 FsBaseFile::sync()
00004b20 g     F .text.itcm	00000026 TwoWire::write(unsigned char)
000085a0 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20027f4c g     O .bss	00000004 t_off
00005ba0 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e214 g     F .text.itcm	00000040 sprintf
0000c164 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000c11a g     F .text.itcm	00000012 Print::print(long)
00006ff0 g     F .text.itcm	00000010 FatFile::close()
0000b894 g     F .text.itcm	00000004 Panic_Temp_isr
00017064 g     F .text.itcm	00000030 .hidden __fixdfdi
00000968 g     F .text.itcm	00000160 setAudioFrequency(int)
000025bc g     F .text.itcm	0000000c queue_isBusy()
2000931c g     O .data	00000004 sd
000070ac g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00016a90 g     F .text.itcm	00000024 _wcsnrtombs_r
00008cd4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000e7a8 g     F .text.itcm	0000002c _write_r
00014f60 g     F .text.itcm	00000028 iswspace_l
000091bc g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
20009340 g     O .data	00000002 again
00002f88 g     F .text.itcm	000000b4 filing_init()
0000bbf4 g     F .text.itcm	00000094 usb_mtp_recv
0000ed70 g     F .text.itcm	0000000c nanf
20027d80 g     O .bss	00000004 setup_ready
2000930c g     O .data	00000004 _impure_ptr
00005672 g     F .text.itcm	0000002a ExFatFile::peek()
0001388c g     F .text.itcm	00000130 __sflush_r
20000418  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00014ea0 g     F .text.itcm	00000054 _mbrtowc_r
0000bdd0  w    F .text.itcm	00000054 EventResponder::runFromYield()
200089b4 g     O .data	00000140 Wire
00008390 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e144 g     F .text.itcm	00000046 _fwalk_sglue
00008c74 g     F .text.itcm	0000000c SdioCard::errorCode() const
0000709e g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002674 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
00002a70 g     F .text.itcm	00000084 newFileName(char*)
00000ed0  w    F .text.itcm	00000018 FsFile::~FsFile()
00005d14 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008552 g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001768 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0000f8d0 g     F .text.itcm	0000002a __ascii_mbtowc
00010050 g     F .text.itcm	00000064 __ulp
0000a8e4 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000bfd0  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00004b08  w    F .text.itcm	00000016 TwoWire::peek()
00004b1e  w    F .text.itcm	00000002 TwoWire::flush()
0000074c g     F .text.itcm	00000168 setup
20007824 g     O .data	00000078 usb_descriptor_list
00008f00 g     F .text.itcm	00000004 SdioCard::status()
00001040 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
000038a8 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000e38  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
000032fc g     F .text.itcm	00000008 adcReset()
00000e16  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000ed60 g     F .text.itcm	00000010 nan
00006b3c g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004044 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00006b02 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20027200 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
000083b8 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000bf90 g     F .text.itcm	00000030 DMAChannel::release()
000020d8 g     F .text.itcm	00000130 loadParameters()
0000a380 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00013a98 g     F .text.itcm	00000064 stpncpy
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
20009300 g     O .data	0000000c __sglue
00009f30 g     F .text.itcm	00000100 usb_serial_configure
00004b46 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000c148  w    F .text.itcm	0000001c _write
200096c0 g       .data	00000000 _edata
00005dee g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
20028189 g     O .bss	00000001 external_psram_size
00003b48 g     F .text.itcm	000000d0 MTPD::GetObjectInfo(unsigned long)
00008cd4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005258 g     F .text.itcm	00000048 FsName::get16()
00008460  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008840 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
000083e6 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00005398 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006a74 g     F .text.itcm	00000070 FatFile::addDirCluster()
00016874 g     F .text.itcm	000000aa __fputwc
0000c024  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00004f5c g     F .text.itcm	0000000c lpi2c1_isr()
000075ae g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000bec g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000aecc g     F .text.itcm	00000046 ultoa
000041aa g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
20027f90 g     O .bss	00000002 dgain
000081e6 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001118 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e2d4 g     F .text.itcm	0000003e __swrite
0000be98 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
000024e8 g     F .text.itcm	000000b0 menu(short)
200092fc g     O .data	00000004 __malloc_trim_threshold
0000c014  w    F .text.itcm	00000004 usb_serial_class::peek()
0000dfb8 g     F .text.itcm	0000000a fcvtf
00008af6  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008578 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003768 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
00001156 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
00015120 g     F .text.itcm	00000028 fiprintf
00015430 g     F .text.itcm	00000f8c _vfiprintf_r
0000378c g     F .text.itcm	00000024 rtcSetTime(int, int, int)
00009a3c  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20009700 g     O .bss	00002440 mtpd
0000fefc g     F .text.itcm	00000154 __mdiff
00002624 g     F .text.itcm	00000050 pullData(unsigned long*)
00008cc4 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000013ce g     F .text.itcm	00000094 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00005dae g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000068f8 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002994 g     F .text.itcm	0000005c checkEndOfFile(short)
20008878 g     O .data	00000120 _impure_data
0000577c g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
0000287c g     F .text.itcm	00000060 writeHeader(char*)
000150bc g     F .text.itcm	00000064 _jp2uc_l
00001e58 g     F .text.itcm	00000188 menu3()
0000e138 g     F .text.itcm	0000000c __sfp_lock_release
200277fc g     O .bss	00000004 mtp_txEventCount
0000bfd8  w    F .text.itcm	00000014 Print::println(unsigned long, int)
00002750 g     F .text.itcm	00000044 timeStamp()
00009384 g     F .text.itcm	00000074 SdioCard::writeStop()
00013a10 g     F .text.itcm	00000088 __sccl
00008638 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005432 g     F .text.itcm	00000014 ExFatFile::close()
20000824 g     O .data	00000101 _ctype_
0000b380  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000c65c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00000fdc g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
000041d6 g     F .text.itcm	00000014 MTPD::read32()
2000899c g     O .data	00000004 F_BUS_ACTUAL
0000ba0e g     F .text.itcm	00000036 quadtimer_init
20027764 g     O .bss	00000004 disk_count
00003578 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007a00 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
00003674 g     F .text.itcm	000000cc date2time(datetime_t*)
0000c048 g     F .text.itcm	0000002c Stream::timedRead()
00016b14 g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000bef4 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008462  w    F .text.itcm	00000006 SharedSpiCard::end()
0000ec80 g     F .text.itcm	000000dc strlen
00006b0e g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00006d26 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000f154 g     F .text.itcm	00000594 __gethex
60002610 g     O .text.progmem	00000020 usb_string_product_name_default
0000e388 g     F .text.itcm	0000001c vdprintf
0000911c g     F .text.itcm	00000060 SdioCard::sectorCount()
00006ed4 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
6000193e  w    F .text.code	00000002 startup_middle_hook
20000588 g     O .data	00000070 vtable for SdioCard
00016fb4 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000011ea g     F .text.itcm	00000048 MTPStorage_SD::close()
000069e4 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
0000b7bc g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
00008aee  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00001294 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
00008766  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002a04 g     F .text.itcm	0000006c newDirectory(char*)
00009898 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00002208 g     F .text.itcm	000002e0 menu2()
00009b40 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
0000303c g     F .text.itcm	00000294 compress(void*)
00006834  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c5a g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00016cf4 g     F .text.itcm	0000027a .hidden __subdf3
600024c0 g       .text.code	00000000 __preinit_array_start
0000ae88 g     F .text.itcm	0000001c usb_receive
00005c74 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
000011d4 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20009338 g     O .data	00000004 t_rep
0000faf0 g     F .text.itcm	00000060 __lo0bits
00005d88 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
2000933c g     O .data	00000004 tempDatai
00006e12 g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00023c00 g       *ABS*	00000000 _flashimagelen
000087d4 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000c358 g     F .text.itcm	0000000a __aeabi_atexit
00000ed0  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b3a4 g     F .text.itcm	00000024 rtc_get
00006110 g     F .text.itcm	0000008c ExFatFile::remove()
00013b08 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000bed0 g     F .text.itcm	00000004 pendablesrvreq_isr
00004330 g     F .text.itcm	000000f4 MTPD::SendObject()
20027f94 g     O .bss	00000002 monitor
00001d44 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20008d84 g     O .data	0000016c __global_locale
00009578 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
0000a030 g     F .text.itcm	000000d4 usb_serial_read
200273f0 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c17e g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000adf8 g     F .text.itcm	00000040 usb_config_tx
0000b384  w    F .text.itcm	00000006 _close
000075ea g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000c670 g     F .text.itcm	00000010 free
000052a0 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000109a g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0000f95c g     F .text.itcm	000000a4 __multadd
0000f948 g     F .text.itcm	00000012 _Bfree
00006876 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20009344  w    O .data	00000016 usb_string_serial_number
00009904 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00008ca8 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200096c0
60001428:	.word	0x200281e0

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	600024b0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	60002460 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002448 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002438 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00017118
600015dc:	.word	0x60002728
600015e0:	.word	0x00000000
600015e4:	.word	0x200096c0
600015e8:	.word	0x60019844
600015ec:	.word	0x20000000
600015f0:	.word	0x20009400
600015f4:	.word	0x0000b1d5
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000bed1
6000160c:	.word	0x0000bed5
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20027f3c
6000161c:	.word	0x08f0d180
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20027f40
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x2000743c
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x2000743c

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x2000743c
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x2000743c

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002450 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	600024a8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	60002440 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002430 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000a911
60001894:	.word	0x20009400

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x200281e0
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002480 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002430 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70000000
60001cc0:	.word	0x20028189
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20027774

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x200278a0
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x2002789c
60001e34:	.word	0x401f4400
60001e38:	.word	0x200278a4
60001e3c:	.word	0x200278a8
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20009400
60001e50:	.word	0x0000b895

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	60002498 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	60002428 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	60002428 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	60002428 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	60002478 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	60002470 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	60002470 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	600024a0 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	600024a0 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	600024a0 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	60002478 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	60002470 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	60002470 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	60002488 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	60002490 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x20008031
600021ec:	.word	0x2000803e
600021f0:	.word	0x20008567
600021f4:	.word	0x20008065
600021f8:	.word	0x2000808a
600021fc:	.word	0x20008093
60002200:	.word	0x20008159
60002204:	.word	0x2000817b
60002208:	.word	0x2000819a
6000220c:	.word	0x200081d9
60002210:	.word	0x20008239
60002214:	.word	0x20008372
60002218:	.word	0x20008394
6000221c:	.word	0x20008470
60002220:	.word	0x20008479
60002224:	.word	0x200084bc
60002228:	.word	0x200084df
6000222c:	.word	0x200084e5
60002230:	.word	0x200089a0
60002234:	.word	0x000f4240
60002238:	.word	0x20008503
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20008660
60002248:	.word	0x200086a9
6000224c:	.word	0x200086ea
60002250:	.word	0x20008712
60002254:	.word	0x2000873d
60002258:	.word	0x20008764
6000225c:	.word	0x2000878e
60002260:	.word	0x200087b0
60002264:	.word	0x200087d2
60002268:	.word	0x200087fc
6000226c:	.word	0x2000881e
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x200080bc
6000227c:	.word	0x200080de
60002280:	.word	0x20008108
60002284:	.word	0x2000812e
60002288:	.word	0x200281e0
6000228c:	.word	0x200081f7
60002290:	.word	0x2000825a
60002294:	.word	0x20008287
60002298:	.word	0x200082cc
6000229c:	.word	0x2000830c
600022a0:	.word	0x20008340
600022a4:	.word	0x200083b8
600022a8:	.word	0x200083eb
600022ac:	.word	0x20008414
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	60002498 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	60002468 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	60002490 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	600024a0 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x2000842b
60002388:	.word	0x20008454
6000238c:	.word	0x200084a0
60002390:	.word	0x20008508
60002394:	.word	0x20008520
60002398:	.word	0x20008569
6000239c:	.word	0x200085b3
600023a0:	.word	0x200085d8
600023a4:	.word	0x20008620
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20008870
600023b4:	.word	0x2000861e
600023b8:	.word	0x20008861
600023bc:	.word	0x200084d9

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x20028180

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <___ZN5Print5printEh_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <___ZN5Print5printEh_veneer+0x4>
6000242c:	.word	0x0000bfc9

60002430 <__memset_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <__memset_veneer+0x4>
60002434:	.word	0x00009c1d

60002438 <__main_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <__main_veneer+0x4>
6000243c:	.word	0x0000c037

60002440 <__delay_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <__delay_veneer+0x4>
60002444:	.word	0x0000b1a9

60002448 <____libc_init_array_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <____libc_init_array_veneer+0x4>
6000244c:	.word	0x0000e7e1

60002450 <___ZN7TwoWire8setClockEm_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <___ZN7TwoWire8setClockEm_veneer+0x4>
60002454:	.word	0x00004f81

60002458 <___ZN5Print7printlnEPKc_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <___ZN5Print7printlnEPKc_veneer+0x4>
6000245c:	.word	0x00000d01

60002460 <__pwm_init_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <__pwm_init_veneer+0x4>
60002464:	.word	0x0000ba45

60002468 <___ZN5Print5printEl_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <___ZN5Print5printEl_veneer+0x4>
6000246c:	.word	0x0000c11b

60002470 <___ZN5Print7printlnEmi_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <___ZN5Print7printlnEmi_veneer+0x4>
60002474:	.word	0x0000bfd9

60002478 <___ZN5Print7printlnEv_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <___ZN5Print7printlnEv_veneer+0x4>
6000247c:	.word	0x0000c12d

60002480 <__sm_set_pool_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <__sm_set_pool_veneer+0x4>
60002484:	.word	0x0000b82b

60002488 <___ZN5Print10printFloatEdh_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <___ZN5Print10printFloatEdh_veneer+0x4>
6000248c:	.word	0x0000c229

60002490 <___ZN5Print11printNumberEmhh_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002494:	.word	0x0000c17f

60002498 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
6000249c:	.word	0x0000bfed

600024a0 <___ZN5Print5printEmi_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN5Print5printEmi_veneer+0x4>
600024a4:	.word	0x0000bfd1

600024a8 <__usb_init_serialnumber_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <__usb_init_serialnumber_veneer+0x4>
600024ac:	.word	0x0000bd7d

600024b0 <__set_arm_clock_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <__set_arm_clock_veneer+0x4>
600024b4:	.word	0x0000a461

600024b8 <___ZN5Print5printEPKc_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <___ZN5Print5printEPKc_veneer+0x4>
600024bc:	.word	0x0000bfc1

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E...].......Y/..

Disassembly of section .text.progmem:

600024d0 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d0:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d4:	ldr	r3, [pc, #60]	; (60002514 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024d6:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024da:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024de:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e2:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e4:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024e8:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024ec:	ldr	r2, [r3, #112]	; 0x70
600024ee:	bic.w	r2, r2, #4096	; 0x1000
600024f2:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f4:	ldr	r2, [r3, #112]	; 0x70
600024f6:	cmp	r2, #0
600024f8:	bge.n	600024f4 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fa:	ldr.w	r2, [r3, #368]	; 0x170
600024fe:	bic.w	r2, r2, #8388608	; 0x800000
60002502:	bic.w	r2, r2, #32768	; 0x8000
60002506:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250a:	ldr	r2, [r3, #112]	; 0x70
6000250c:	bic.w	r2, r2, #65536	; 0x10000
60002510:	str	r2, [r3, #112]	; 0x70
  }
60002512:	bx	lr
60002514:	.word	0x400d8000

60002518 <TwoWire::i2c4_hardware>:
60002518:	...@............
60002528:	...@............
	...
60002540:	...........@....
60002550:	................
60002560:	....uO..

60002568 <TwoWire::i2c3_hardware>:
60002568:	p..@............
60002578:	...@....,.......
60002588:	...@............
60002598:	...@....-.......
600025a8:	...@........iO..

600025b8 <TwoWire::i2c1_hardware>:
600025b8:	p..@............
600025c8:	...@............
	...
600025e0:	...........@....
600025f0:	................
60002600:	....]O..

60002608 <usb_string_mtp>:
60002608:	..M.T.P.

60002610 <usb_string_product_name_default>:
60002610:	 .T.e.e.n.s.y. .
60002620:	M.T.P. .D.i.s.k.

60002630 <usb_string_manufacturer_name_default>:
60002630:	..T.e.e.n.s.y.d.
60002640:	u.i.n.o.

60002648 <string0>:
60002648:	....

6000264c <usb_config_descriptor_12>:
6000264c:	..i.....2.......
6000265c:	...........$....
6000266c:	$....$...$......
6000267c:	................
6000268c:	.@......@.......
6000269c:	........@......@
600026ac:	...... ..

600026b5 <usb_config_descriptor_480>:
600026b5:	..i.....2.......
600026c5:	...........$....
600026d5:	$....$...$......
600026e5:	................
600026f5:	................
60002705:	................
60002715:	...... ..

6000271e <qualifier_descriptor>:
6000271e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200096c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200096c0
        i2c_class i2c(&Wire1,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        { Serial.print("\n ADC 0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
        }
        Serial.println();
    }
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    WriteIndexRecord(handle, p1);
    return false;
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20027804
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60023c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	6f70 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	62d0 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	6b3c <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	54ec <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	6cc2 <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	5672 <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	be24 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x200281ab
     154:	.word	0x200281aa
     158:	.word	0x20027f40
     15c:	.word	0x20027f60

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	ec80 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	c12c <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	815c <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	815c <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	815c <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000444
     1dc:	.word	0x20000420

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	73dc <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	6628 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	b1a8 <delay>
    usb_init();
     22a:	bl	170e8 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4458 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20009700

00000248 <loop>:
{
     248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     24c:	ldr	r6, [pc, #416]	; (3f0 <loop+0x1a8>)
{
     24e:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     250:	ldr	r5, [pc, #416]	; (3f4 <loop+0x1ac>)
  loopCount++;
     252:	ldr	r3, [r6, #0]
     254:	ldr	r4, [pc, #416]	; (3f8 <loop+0x1b0>)
     256:	adds	r3, #1
     258:	str	r3, [r6, #0]
  nb = getDataCount();
     25a:	bl	25a0 <getDataCount()>
  if(nb>mxb) mxb=nb;
     25e:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     260:	ldr	r2, [pc, #408]	; (3fc <loop+0x1b4>)
  if(nb>mxb) mxb=nb;
     262:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     264:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     266:	it	cc
     268:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     26a:	tst.w	r3, #1
     26e:	bne.n	284 <loop+0x3c>
     270:	ldr	r3, [pc, #396]	; (400 <loop+0x1b8>)
     272:	ldr	r3, [r3, #0]
     274:	cmp	r3, #1
     276:	mov.w	r3, #4294967295
     27a:	it	ne
     27c:	movne	r3, #0
     27e:	strh	r3, [r4, #0]
     280:	movs	r3, #1
     282:	str	r3, [r2, #0]
  status=menu(status);
     284:	ldrh	r0, [r4, #0]
     286:	sxth	r0, r0
     288:	bl	24e8 <menu(short)>
     28c:	strh	r0, [r4, #0]
    if(status<0)
     28e:	ldrh	r3, [r4, #0]
     290:	lsls	r3, r3, #16
     292:	bpl.w	39a <loop+0x152>
    { mtpd.loop();
     296:	ldr	r0, [pc, #364]	; (404 <loop+0x1bc>)
     298:	bl	4458 <MTPD::loop()>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     29c:	ldr	r3, [pc, #360]	; (408 <loop+0x1c0>)
  if((t1=millis())>(t0+1000))
     29e:	ldr	r7, [pc, #364]	; (40c <loop+0x1c4>)
     2a0:	ldr	r3, [r3, #0]
     2a2:	str	r3, [sp, #28]
     2a4:	ldr	r3, [r7, #0]
     2a6:	ldr	r2, [sp, #28]
     2a8:	add.w	r3, r3, #1000	; 0x3e8
     2ac:	cmp	r3, r2
     2ae:	bcs.n	394 <loop+0x14c>
    if(monitor)
     2b0:	ldr	r3, [pc, #348]	; (410 <loop+0x1c8>)
     2b2:	ldr.w	sl, [pc, #412]	; 450 <loop+0x208>
     2b6:	ldrsh.w	r3, [r3]
     2ba:	ldr.w	r9, [pc, #408]	; 454 <loop+0x20c>
     2be:	ldr.w	r8, [pc, #408]	; 458 <loop+0x210>
     2c2:	cmp	r3, #0
     2c4:	beq.n	37e <loop+0x136>
      rtc_get_datetime(&t);
     2c6:	add	r0, sp, #32
     2c8:	bl	3744 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2cc:	ldrsb.w	r3, [sp, #36]	; 0x24
     2d0:	ldrsh.w	r2, [sp, #32]
     2d4:	str	r3, [sp, #16]
     2d6:	ldrsb.w	r3, [sp, #39]	; 0x27
     2da:	ldr	r1, [pc, #312]	; (414 <loop+0x1cc>)
     2dc:	str	r3, [sp, #12]
     2de:	ldrsb.w	r3, [sp, #38]	; 0x26
     2e2:	ldr	r0, [pc, #308]	; (418 <loop+0x1d0>)
     2e4:	str	r3, [sp, #8]
     2e6:	ldrsb.w	r3, [sp, #37]	; 0x25
     2ea:	str	r3, [sp, #4]
     2ec:	ldrsb.w	r3, [sp, #35]	; 0x23
     2f0:	str	r3, [sp, #0]
     2f2:	ldrsb.w	r3, [sp, #34]	; 0x22
     2f6:	bl	c164 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     2fa:	ldr	r1, [pc, #288]	; (41c <loop+0x1d4>)
     2fc:	ldr	r0, [pc, #280]	; (418 <loop+0x1d0>)
     2fe:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     302:	ldr	r1, [r6, #0]
     304:	ldr	r0, [pc, #272]	; (418 <loop+0x1d0>)
     306:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     30a:	ldr	r1, [pc, #276]	; (420 <loop+0x1d8>)
     30c:	ldr	r0, [pc, #264]	; (418 <loop+0x1d0>)
     30e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     312:	ldr.w	r1, [sl]
     316:	ldr	r0, [pc, #256]	; (418 <loop+0x1d0>)
     318:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     31c:	ldr	r1, [pc, #256]	; (420 <loop+0x1d8>)
     31e:	ldr	r0, [pc, #248]	; (418 <loop+0x1d0>)
     320:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     324:	ldr.w	r1, [r9]
     328:	ldr	r0, [pc, #236]	; (418 <loop+0x1d0>)
     32a:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     32e:	ldr	r1, [pc, #240]	; (420 <loop+0x1d8>)
     330:	ldr	r0, [pc, #228]	; (418 <loop+0x1d0>)
     332:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     336:	ldrh	r2, [r5, #0]
     338:	ldr	r1, [pc, #232]	; (424 <loop+0x1dc>)
     33a:	ldr	r0, [pc, #220]	; (418 <loop+0x1d0>)
     33c:	bl	c164 <Print::printf(char const*, ...)>
     340:	ldr	r1, [pc, #228]	; (428 <loop+0x1e0>)
     342:	ldr	r0, [pc, #212]	; (418 <loop+0x1d0>)
     344:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     348:	ldr.w	r1, [r8]
     34c:	ldr	r0, [pc, #200]	; (418 <loop+0x1d0>)
     34e:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     352:	ldr	r1, [pc, #216]	; (42c <loop+0x1e4>)
     354:	ldr	r0, [pc, #192]	; (418 <loop+0x1d0>)
     356:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     35a:	ldr	r3, [pc, #212]	; (430 <loop+0x1e8>)
     35c:	ldrh	r4, [r3, #0]
     35e:	sxth	r4, r4
     360:	cbnz	r4, 3b4 <loop+0x16c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     362:	ldr	r3, [pc, #208]	; (434 <loop+0x1ec>)
     364:	ldr	r1, [pc, #208]	; (438 <loop+0x1f0>)
     366:	ldr.w	fp, [pc, #176]	; 418 <loop+0x1d0>
     36a:	ldr.w	r2, [r3, r4, lsl #2]
     36e:	adds	r4, #1
     370:	mov	r0, fp
     372:	bl	c164 <Print::printf(char const*, ...)>
     376:	cmp	r4, #8
     378:	ldr	r1, [pc, #188]	; (438 <loop+0x1f0>)
     37a:	ldr	r3, [pc, #184]	; (434 <loop+0x1ec>)
     37c:	bne.n	36a <loop+0x122>
    loopCount=0;
     37e:	movs	r3, #0
     380:	str	r3, [r6, #0]
    procCount=0;
     382:	str.w	r3, [sl]
    procMiss=0;
     386:	str.w	r3, [r9]
    mxb=0;
     38a:	strh	r3, [r5, #0]
    disk_count=0;
     38c:	str.w	r3, [r8]
    t0=t1;
     390:	ldr	r3, [sp, #28]
     392:	str	r3, [r7, #0]
}
     394:	add	sp, #44	; 0x2c
     396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     39a:	ldr	r7, [pc, #160]	; (43c <loop+0x1f4>)
     39c:	mov.w	r8, #8
     3a0:	str.w	r8, [r7, #132]	; 0x84
      status=saveData(status);  
     3a4:	ldrh	r0, [r4, #0]
     3a6:	sxth	r0, r0
     3a8:	bl	2e3c <saveData(short)>
     3ac:	strh	r0, [r4, #0]
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     3ae:	str.w	r8, [r7, #136]	; 0x88
}
     3b2:	b.n	29c <loop+0x54>
     3b4:	ldr.w	fp, [pc, #148]	; 44c <loop+0x204>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3b8:	movs	r4, #0
     3ba:	ldr	r1, [pc, #132]	; (440 <loop+0x1f8>)
     3bc:	ldr	r3, [pc, #88]	; (418 <loop+0x1d0>)
     3be:	adds	r4, #1
     3c0:	mov	r0, r3
     3c2:	ldr.w	r2, [fp], #4
     3c6:	bl	c164 <Print::printf(char const*, ...)>
     3ca:	cmp	r4, #24
     3cc:	ldr	r3, [pc, #72]	; (418 <loop+0x1d0>)
     3ce:	ldr	r1, [pc, #112]	; (440 <loop+0x1f8>)
     3d0:	bne.n	3be <loop+0x176>
        Serial.printf("%2d",max_stat);
     3d2:	ldr	r4, [pc, #112]	; (444 <loop+0x1fc>)
     3d4:	mov	r0, r3
     3d6:	ldr	r1, [pc, #112]	; (448 <loop+0x200>)
     3d8:	ldr	r2, [r4, #0]
     3da:	bl	c164 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3de:	movs	r2, #96	; 0x60
     3e0:	movs	r1, #0
     3e2:	ldr	r0, [pc, #104]	; (44c <loop+0x204>)
     3e4:	bl	9c1c <memset>
        max_stat=0;        
     3e8:	movs	r3, #0
     3ea:	str	r3, [r4, #0]
     3ec:	b.n	37e <loop+0x136>
     3ee:	nop
     3f0:	.word	0x20027244
     3f4:	.word	0x20027f8c
     3f8:	.word	0x20027f8e
     3fc:	.word	0x2000bdcc
     400:	.word	0x20027f54
     404:	.word	0x20009700
     408:	.word	0x20027f40
     40c:	.word	0x20027240
     410:	.word	0x20027f94
     414:	.word	0x20007f7c
     418:	.word	0x200089a4
     41c:	.word	0x20007f9d
     420:	.word	0x20007fa6
     424:	.word	0x20007fa1
     428:	.word	0x20007fa5
     42c:	.word	0x20007fa8
     430:	.word	0x20027f96
     434:	.word	0x200277d8
     438:	.word	0x20007fad
     43c:	.word	0x42004000
     440:	.word	0x20007fb2
     444:	.word	0x200277f8
     448:	.word	0x20007fb7
     44c:	.word	0x20027824
     450:	.word	0x2002781c
     454:	.word	0x20027820
     458:	.word	0x20027764

0000045c <setup1()>:
{ while(!Serial) {}
     45c:	push	{r4, lr}
     45e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     462:	cmp	r0, #0
     464:	beq.n	45e <setup1()+0x2>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     466:	ldr	r4, [pc, #44]	; (494 <setup1()+0x38>)
  Serial.println("Setup1");
     468:	ldr	r1, [pc, #44]	; (498 <setup1()+0x3c>)
     46a:	ldr	r0, [pc, #48]	; (49c <setup1()+0x40>)
     46c:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     470:	ldr	r3, [r4, #0]
     472:	cbz	r3, 48c <setup1()+0x30>
  i2s_setup();
     474:	bl	ac8 <i2s_setup()>
  dma_setup();
     478:	bl	b48 <dma_setup()>
  adc_init();
     47c:	bl	330c <adc_init()>
  Serial.println("Setup1 done");
     480:	ldr	r1, [pc, #28]	; (4a0 <setup1()+0x44>)
     482:	ldr	r0, [pc, #24]	; (49c <setup1()+0x40>)
}
     484:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     488:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     48c:	movs	r0, #1
     48e:	bl	b1a8 <delay>
     492:	b.n	470 <setup1()+0x14>
     494:	.word	0x20027d80
     498:	.word	0x20007e0b
     49c:	.word	0x200089a4
     4a0:	.word	0x20007e12

000004a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4a4:	push	{r4, r5, r6, lr}
     4a6:	mov	r5, r0
     4a8:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4ac:	cbnz	r0, 4d2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ae:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4b0:	ldr.w	r0, [r5, #1152]	; 0x480
     4b4:	cbz	r0, 508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4b6:	bl	7840 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4ba:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4bc:	cbz	r6, 4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4be:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4c2:	cbz	r0, 4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     4c4:	ldr	r3, [r0, #0]
     4c6:	movs	r1, #0
     4c8:	ldr	r3, [r3, #68]	; 0x44
     4ca:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     4cc:	cbz	r0, 4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     4ce:	mov	r0, r4
     4d0:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4d2:	ldr	r3, [r0, #0]
     4d4:	ldr	r3, [r3, #60]	; 0x3c
     4d6:	blx	r3
     4d8:	cmp	r0, #0
     4da:	beq.n	4ae <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4dc:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4e0:	cbnz	r0, 4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     4e2:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     4e6:	cbnz	r0, 4f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     4e8:	movs	r4, #0
     4ea:	b.n	4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4ec:	ldr	r3, [r0, #0]
     4ee:	ldr	r3, [r3, #64]	; 0x40
     4f0:	blx	r3
     4f2:	cmp	r0, #0
     4f4:	bne.n	4ae <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4f6:	b.n	4e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     4f8:	ldr	r3, [r0, #0]
     4fa:	movs	r1, #1
     4fc:	ldr	r3, [r3, #68]	; 0x44
     4fe:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     500:	mov	r6, r0
     502:	cmp	r0, #0
     504:	bne.n	4b0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     506:	b.n	4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     508:	ldr.w	r0, [r5, #1156]	; 0x484
     50c:	cmp	r0, #0
     50e:	beq.n	4ba <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     510:	bl	5e82 <ExFatPartition::freeClusterCount()>
     514:	b.n	4ba <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000518 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     518:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     51c:	ldr	r4, [pc, #276]	; (634 <storage_configure()+0x11c>)
     51e:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     520:	movs	r1, #0
     522:	ldr	r6, [pc, #276]	; (638 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     524:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     528:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     52c:	strb.w	r1, [r4, #1224]	; 0x4c8
     530:	mov	r0, r5
     532:	bl	9578 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     536:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     538:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     53c:	bl	8c74 <SdioCard::errorCode() const>
     540:	cmp	r0, #0
     542:	bne.n	5e6 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     544:	movs	r3, #1
     546:	ldr.w	r1, [r4, #1164]	; 0x48c
     54a:	mov	r0, r4
     54c:	mov	r2, r3
     54e:	bl	82bc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     552:	cmp	r0, #0
     554:	beq.n	5e6 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     556:	ldr	r3, [pc, #228]	; (63c <storage_configure()+0x124>)
     558:	ldr	r2, [r3, #4]
     55a:	cmp	r2, #19
     55c:	ble.n	602 <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     55e:	ldr.w	r3, [r4, #1152]	; 0x480
     562:	cmp	r3, #0
     564:	beq.n	616 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     566:	ldr	r5, [r3, #28]
     568:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     56a:	ldr	r0, [pc, #200]	; (634 <storage_configure()+0x11c>)
     56c:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     570:	ldr.w	r3, [r4, #1152]	; 0x480
     574:	mov	r7, r0
     576:	cmp	r3, #0
     578:	beq.n	624 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     57a:	ldrb	r3, [r3, #6]
     57c:	mov.w	r4, #512	; 0x200
     580:	lsls	r4, r3
     582:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     584:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     586:	mov.w	r8, #10
     58a:	movs	r6, #0
     58c:	movs	r2, #0
     58e:	str	r3, [sp, #0]
     590:	movs	r3, #254	; 0xfe
     592:	ldr	r1, [pc, #172]	; (640 <storage_configure()+0x128>)
     594:	ldr	r0, [pc, #172]	; (644 <storage_configure()+0x12c>)
     596:	bl	c164 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     59a:	ldr	r1, [pc, #172]	; (648 <storage_configure()+0x130>)
     59c:	ldr	r0, [pc, #164]	; (644 <storage_configure()+0x12c>)
     59e:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5a2:	mov	r2, r5
     5a4:	mov	r3, r6
     5a6:	ldr	r0, [pc, #156]	; (644 <storage_configure()+0x12c>)
     5a8:	strd	r8, r6, [sp]
     5ac:	bl	c192 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5b0:	ldr	r1, [pc, #152]	; (64c <storage_configure()+0x134>)
     5b2:	ldr	r0, [pc, #144]	; (644 <storage_configure()+0x12c>)
     5b4:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5b8:	mov	r2, r7
     5ba:	mov	r3, r6
     5bc:	ldr	r0, [pc, #132]	; (644 <storage_configure()+0x12c>)
     5be:	strd	r8, r6, [sp]
     5c2:	bl	c192 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5c6:	ldr	r1, [pc, #136]	; (650 <storage_configure()+0x138>)
     5c8:	ldr	r0, [pc, #120]	; (644 <storage_configure()+0x12c>)
     5ca:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5ce:	lsr.w	r1, r4, r8
     5d2:	ldr	r0, [pc, #112]	; (644 <storage_configure()+0x12c>)
     5d4:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     5d8:	ldr	r1, [pc, #120]	; (654 <storage_configure()+0x13c>)
     5da:	ldr	r0, [pc, #104]	; (644 <storage_configure()+0x12c>)
        }
      }
  }
     5dc:	add	sp, #8
     5de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5e2:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5e6:	ldr	r3, [r6, #0]
     5e8:	movs	r2, #0
     5ea:	ldr	r1, [pc, #108]	; (658 <storage_configure()+0x140>)
     5ec:	str	r3, [sp, #0]
     5ee:	movs	r3, #254	; 0xfe
     5f0:	ldr	r0, [pc, #80]	; (644 <storage_configure()+0x12c>)
     5f2:	bl	c164 <Print::printf(char const*, ...)>
     5f6:	ldr	r0, [pc, #76]	; (644 <storage_configure()+0x12c>)
  }
     5f8:	add	sp, #8
     5fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5fe:	b.w	c12c <Print::println()>
          sd_name[fsCount] = name;
     602:	add.w	r1, r3, r2, lsl #2
     606:	ldr	r0, [r6, #0]
     608:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     60a:	adds	r1, r2, #1
     60c:	str	r1, [r3, #4]
     60e:	add.w	r3, r3, r2, lsl #2
     612:	str	r4, [r3, #88]	; 0x58
     614:	b.n	55e <storage_configure()+0x46>
     616:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     61a:	cmp	r5, #0
     61c:	beq.n	56a <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     61e:	ldr.w	r5, [r5, #1072]	; 0x430
     622:	b.n	56a <storage_configure()+0x52>
     624:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     628:	cmp	r4, #0
     62a:	beq.n	584 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     62c:	ldr.w	r4, [r4, #1084]	; 0x43c
     630:	b.n	584 <storage_configure()+0x6c>
     632:	nop
     634:	.word	0x200278b0
     638:	.word	0x20009320
     63c:	.word	0x20027d84
     640:	.word	0x20007c0f
     644:	.word	0x200089a4
     648:	.word	0x20007c26
     64c:	.word	0x20007c39
     650:	.word	0x20007c4a
     654:	.word	0x20007c59
     658:	.word	0x20007be4

0000065c <_GLOBAL__sub_I_storage>:
  }
     65c:	push	{r3, r4, r5, lr}
        fsCount = 0;
     65e:	ldr	r5, [pc, #192]	; (720 <_GLOBAL__sub_I_storage+0xc4>)
     660:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     662:	ldr	r3, [pc, #192]	; (724 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     664:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     668:	ldr	r1, [pc, #188]	; (728 <_GLOBAL__sub_I_storage+0xcc>)
     66a:	mov	r0, r5
     66c:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     66e:	ldr	r3, [pc, #188]	; (72c <_GLOBAL__sub_I_storage+0xd0>)
     670:	str.w	r2, [r5, #176]	; 0xb0
     674:	str.w	r3, [r5, #168]	; 0xa8
     678:	str.w	r3, [r5, #248]	; 0xf8
     67c:	str.w	r3, [r5, #328]	; 0x148
     680:	mvn.w	r3, #1
        fsCount = 0;
     684:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     686:	str.w	r4, [r5, #172]	; 0xac
     68a:	strb.w	r4, [r5, #180]	; 0xb4
     68e:	strb.w	r4, [r5, #260]	; 0x104
     692:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     696:	str.w	r4, [r5, #416]	; 0x1a0
     69a:	strh.w	r4, [r5, #428]	; 0x1ac
     69e:	strd	r4, r2, [r5, #252]	; 0xfc
     6a2:	strd	r4, r2, [r5, #332]	; 0x14c
     6a6:	ldr	r2, [pc, #136]	; (730 <_GLOBAL__sub_I_storage+0xd4>)
     6a8:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6ac:	strd	r4, r4, [r5, #240]	; 0xf0
     6b0:	strd	r4, r4, [r5, #320]	; 0x140
     6b4:	strd	r4, r4, [r5, #400]	; 0x190
     6b8:	strd	r4, r4, [r5, #408]	; 0x198
     6bc:	bl	c358 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6c0:	ldr	r3, [pc, #112]	; (734 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6c2:	ldr	r1, [pc, #116]	; (738 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     6c4:	mov	r0, r4
     6c6:	str	r5, [r3, #0]
     6c8:	add.w	r3, r3, #8192	; 0x2000
     6cc:	ldr	r2, [pc, #96]	; (730 <_GLOBAL__sub_I_storage+0xd4>)
     6ce:	str.w	r4, [r3, #1056]	; 0x420
     6d2:	strb.w	r4, [r3, #1060]	; 0x424
     6d6:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     6da:	ldr	r3, [pc, #96]	; (73c <_GLOBAL__sub_I_storage+0xe0>)
     6dc:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     6e0:	ldr	r1, [pc, #92]	; (740 <_GLOBAL__sub_I_storage+0xe4>)
     6e2:	str.w	r4, [r3, #1152]	; 0x480
     6e6:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     6ea:	movs	r1, #7
     6ec:	str.w	r4, [r3, #1156]	; 0x484
     6f0:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     6f4:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     6f6:	str.w	r4, [r3, #1164]	; 0x48c
     6fa:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     6fe:	ldr	r1, [pc, #68]	; (744 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     700:	strh.w	r4, [r3, #1176]	; 0x498
     704:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     708:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     70c:	strb.w	r4, [r3, #1208]	; 0x4b8
     710:	strb.w	r4, [r3, #1224]	; 0x4c8
     714:	ldr	r1, [pc, #48]	; (748 <_GLOBAL__sub_I_storage+0xec>)
  }
     716:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     71a:	b.w	c358 <__aeabi_atexit>
     71e:	nop
     720:	.word	0x20027d84
     724:	.word	0x20000444
     728:	.word	0x000001a5
     72c:	.word	0x20000548
     730:	.word	0x20008d80
     734:	.word	0x20009700
     738:	.word	0x20000590
     73c:	.word	0x200278b0
     740:	.word	0x003d0900
     744:	.word	0x200004b0
     748:	.word	0x0000006d

0000074c <setup>:
{
     74c:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     74e:	ldr	r5, [pc, #292]	; (874 <setup+0x128>)
     750:	sub	sp, #28
    set_arm_clock(48'000'000);
     752:	ldr	r0, [pc, #292]	; (878 <setup+0x12c>)
				if (elapsed > 750) break;
     754:	movw	r7, #750	; 0x2ee
     758:	bl	a460 <set_arm_clock>
			if (usb_configuration) {
     75c:	ldr	r6, [pc, #284]	; (87c <setup+0x130>)
		uint32_t millis_begin = systick_millis_count;
     75e:	ldr	r4, [r5, #0]
		while (!(*this)) {
     760:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     764:	cbz	r0, 78c <setup+0x40>
  uint16_t *params=loadParameters();
     766:	bl	20d8 <loadParameters()>
  if(params[0]==1)
     76a:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     76c:	mov	r4, r0
  if(params[0]==1)
     76e:	cmp	r3, #1
     770:	beq.n	7a4 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     772:	movw	r6, #9999	; 0x270f
	return systick_millis_count;
     776:	ldr	r3, [r5, #0]
     778:	cmp	r3, r6
     77a:	bhi.n	7b8 <setup+0x6c>
     77c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     780:	cmp	r0, #0
     782:	beq.n	776 <setup+0x2a>
     784:	ldr	r3, [pc, #248]	; (880 <setup+0x134>)
     786:	movs	r2, #1
     788:	str	r2, [r3, #0]
     78a:	b.n	7b8 <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     78c:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     78e:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     790:	subs	r3, r3, r4
			if (usb_configuration) {
     792:	cbz	r2, 7a0 <setup+0x54>
				if (elapsed > 2000) break;
     794:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     798:	bhi.n	766 <setup+0x1a>
			yield();
     79a:	bl	be24 <yield>
     79e:	b.n	760 <setup+0x14>
				if (elapsed > 750) break;
     7a0:	cmp	r3, r7
     7a2:	b.n	798 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7a4:	ldr	r3, [pc, #220]	; (884 <setup+0x138>)
     7a6:	ldr	r2, [pc, #224]	; (888 <setup+0x13c>)
     7a8:	ldr	r3, [r3, #0]
     7aa:	ldr	r2, [r2, #0]
     7ac:	cmp	r3, r2
     7ae:	ldr	r2, [pc, #208]	; (880 <setup+0x134>)
     7b0:	ite	hi
     7b2:	movhi	r3, #0
     7b4:	movls	r3, #1
     7b6:	str	r3, [r2, #0]
  while(millis()<10'000) if(Serial) { break;}
     7b8:	movw	r6, #9999	; 0x270f
     7bc:	ldr	r3, [r5, #0]
     7be:	cmp	r3, r6
     7c0:	bhi.n	7ca <setup+0x7e>
     7c2:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7c6:	cmp	r0, #0
     7c8:	beq.n	7bc <setup+0x70>
  Serial.println(version);
     7ca:	ldr	r1, [pc, #192]	; (88c <setup+0x140>)
     7cc:	ldr	r0, [pc, #192]	; (890 <setup+0x144>)
     7ce:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7d2:	ldr	r1, [pc, #192]	; (894 <setup+0x148>)
     7d4:	ldr	r0, [pc, #184]	; (890 <setup+0x144>)
     7d6:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     7da:	ldrh	r1, [r4, #0]
     7dc:	ldr	r0, [pc, #176]	; (890 <setup+0x144>)
     7de:	bl	c11a <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     7e2:	ldr	r0, [pc, #172]	; (890 <setup+0x144>)
     7e4:	bl	c12c <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     7e8:	ldr	r0, [pc, #172]	; (898 <setup+0x14c>)
     7ea:	bl	170f8 <___ZN16CrashReportClasscvbEv_veneer>
     7ee:	cbz	r0, 7f8 <setup+0xac>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     7f0:	ldr	r1, [pc, #156]	; (890 <setup+0x144>)
     7f2:	ldr	r0, [pc, #164]	; (898 <setup+0x14c>)
     7f4:	bl	17108 <___ZNK16CrashReportClass7printToER5Print_veneer>
  storage_configure();
     7f8:	bl	518 <storage_configure()>
  rtc_setup();
     7fc:	movs	r1, #19
     7fe:	movs	r0, #18
     800:	bl	3740 <rtc_setup(unsigned char, unsigned char)>
  Serial.println("rtc_setup() done");
     804:	ldr	r0, [pc, #136]	; (890 <setup+0x144>)
     806:	ldr	r1, [pc, #148]	; (89c <setup+0x150>)
     808:	bl	190 <Print::println(char const*) [clone .isra.0]>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     80c:	add	r0, sp, #16
     80e:	bl	3744 <rtc_get_datetime(datetime_t*)>
     812:	cbnz	r0, 81c <setup+0xd0>
     814:	ldr	r1, [pc, #136]	; (8a0 <setup+0x154>)
     816:	ldr	r0, [pc, #120]	; (890 <setup+0x144>)
     818:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     81c:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     820:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     822:	ldrsh.w	r2, [sp, #16]
     826:	str	r3, [sp, #12]
     828:	ldrsb.w	r3, [sp, #22]
     82c:	ldr	r1, [pc, #116]	; (8a4 <setup+0x158>)
     82e:	str	r3, [sp, #8]
     830:	ldrsb.w	r3, [sp, #21]
     834:	ldr	r0, [pc, #88]	; (890 <setup+0x144>)
     836:	str	r3, [sp, #4]
     838:	ldrsb.w	r3, [sp, #19]
     83c:	str	r3, [sp, #0]
     83e:	ldrsb.w	r3, [sp, #18]
     842:	bl	c164 <Print::printf(char const*, ...)>
                           t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     846:	ldr	r0, [pc, #72]	; (890 <setup+0x144>)
     848:	bl	c12c <Print::println()>
  Serial.println("filing_init");
     84c:	ldr	r1, [pc, #88]	; (8a8 <setup+0x15c>)
     84e:	ldr	r0, [pc, #64]	; (890 <setup+0x144>)
     850:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     854:	bl	2f88 <filing_init()>
  Serial.println("Setup done");
     858:	ldr	r1, [pc, #80]	; (8ac <setup+0x160>)
     85a:	ldr	r0, [pc, #52]	; (890 <setup+0x144>)
     85c:	bl	190 <Print::println(char const*) [clone .isra.0]>
  setup_ready=1;
     860:	ldr	r3, [pc, #76]	; (8b0 <setup+0x164>)
     862:	str	r4, [r3, #0]
    setup1();
     864:	bl	45c <setup1()>
    pinMode(13,OUTPUT);
     868:	mov	r1, r4
     86a:	movs	r0, #13
     86c:	bl	b938 <pinMode>
}
     870:	add	sp, #28
     872:	pop	{r4, r5, r6, r7, pc}
     874:	.word	0x20027f40
     878:	.word	0x02dc6c00
     87c:	.word	0x200281ab
     880:	.word	0x20027f54
     884:	.word	0x20009338
     888:	.word	0x20009334
     88c:	.word	0x20007e84
     890:	.word	0x200089a4
     894:	.word	0x20007fbb
     898:	.word	0x20008998
     89c:	.word	0x20007fc8
     8a0:	.word	0x20007fd9
     8a4:	.word	0x20007fee
     8a8:	.word	0x20008015
     8ac:	.word	0x20008021
     8b0:	.word	0x20027d80

000008b4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8b4:	push	{r4, lr}
     8b6:	mov	r4, r0
		release();
     8b8:	bl	bf90 <DMAChannel::release()>
	}
     8bc:	mov	r0, r4
     8be:	pop	{r4, pc}

000008c0 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8c0:	ldr	r3, [pc, #136]	; (94c <acq_isr()+0x8c>)
     8c2:	ldr	r2, [r3, #0]
  {
     8c4:	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     8c6:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8c8:	ldrb	r2, [r3, #4]
     8ca:	ldr	r3, [pc, #132]	; (950 <acq_isr()+0x90>)
     8cc:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8ce:	ldr	r2, [pc, #132]	; (954 <acq_isr()+0x94>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8d0:	sub.w	r3, r2, #1024	; 0x400
     8d4:	cmp	r1, r2
     8d6:	it	cc
     8d8:	movcc	r3, r2
	uint32_t end_addr = (uint32_t)addr + size;
     8da:	add.w	r0, r3, #1024	; 0x400
	asm("dsb");
     8de:	dsb	sy
     8e2:	add.w	r2, r3, #32
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8e6:	mov	r1, r3
		SCB_CACHE_DCIMVAC = location;
     8e8:	mov.w	r4, #3758153728	; 0xe000e000
     8ec:	cmp	r2, r0
     8ee:	ite	hi
     8f0:	movhi	r2, #1
     8f2:	movls	r2, #32
     8f4:	add.w	r2, r3, r2, lsl #5
     8f8:	str.w	r1, [r4, #3932]	; 0xf5c
		location += 32;
     8fc:	adds	r1, #32
	} while (location < end_addr);
     8fe:	cmp	r1, r2
     900:	bne.n	8f8 <acq_isr()+0x38>
	asm("dsb");
     902:	dsb	sy
	asm("isb");
     906:	isb	sy
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     90a:	ldr	r1, [pc, #76]	; (958 <acq_isr()+0x98>)
     90c:	ldr	r2, [r1, #0]
     90e:	adds	r2, #1
     910:	str	r2, [r1, #0]
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
     912:	ldr	r1, [pc, #72]	; (95c <acq_isr()+0x9c>)
     914:	ldr	r2, [r3, #4]
     916:	adds	r3, #8
     918:	asrs	r2, r2, #8
     91a:	cmp	r0, r3
     91c:	str.w	r2, [r1], #4
     920:	bne.n	914 <acq_isr()+0x54>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     922:	ldr	r2, [pc, #60]	; (960 <acq_isr()+0xa0>)
     924:	ldrh	r3, [r2, #0]
     926:	sxth	r3, r3
     928:	cbnz	r3, 93c <acq_isr()+0x7c>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     92a:	ldr	r0, [pc, #48]	; (95c <acq_isr()+0x9c>)
     92c:	bl	25c8 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     930:	cbnz	r0, 93a <acq_isr()+0x7a>
     932:	ldr	r2, [pc, #48]	; (964 <acq_isr()+0xa4>)
     934:	ldr	r3, [r2, #0]
     936:	adds	r3, #1
     938:	str	r3, [r2, #0]
  }
     93a:	pop	{r4, pc}
  else if(proc==1)
     93c:	ldrh	r3, [r2, #0]
     93e:	sxth	r3, r3
     940:	cmp	r3, #1
     942:	bne.n	93a <acq_isr()+0x7a>
   if(!compress((void *)acqBuffer)) procMiss++;
     944:	ldr	r0, [pc, #20]	; (95c <acq_isr()+0x9c>)
     946:	bl	303c <compress(void*)>
     94a:	b.n	930 <acq_isr()+0x70>
     94c:	.word	0x200269dc
     950:	.word	0x400e8000
     954:	.word	0x20200400
     958:	.word	0x2002781c
     95c:	.word	0x20027564
     960:	.word	0x20027f96
     964:	.word	0x20027820

00000968 <setAudioFrequency(int)>:
  {
     968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     96c:	ldr.w	r9, [pc, #332]	; abc <setAudioFrequency(int)+0x154>
     970:	movs	r2, #5
     972:	mov	r5, r0
     974:	ldr	r1, [pc, #312]	; (ab0 <setAudioFrequency(int)+0x148>)
     976:	ldr.w	r3, [r9]
     97a:	mov	r0, r9
     97c:	ldr	r3, [r3, #4]
     97e:	vpush	{d8}
     982:	sub	sp, #12
     984:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     986:	movs	r1, #128	; 0x80
     988:	mov	r0, r9
     98a:	bl	c11a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     98e:	mov	r0, r9
     990:	bl	c12c <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     994:	movs	r3, #26
     996:	lsls	r1, r5, #7
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     998:	ldr	r0, [pc, #280]	; (ab4 <setAudioFrequency(int)+0x14c>)
    {   n0++;
     99a:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     99c:	mov	r2, r1
        n1=0;
     99e:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a0:	mul.w	ip, r0, r3
        {   n1++; 
     9a4:	mov	r6, r4
     9a6:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a8:	sdiv	r8, ip, r2
     9ac:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9b0:	cmp	r7, #64	; 0x40
     9b2:	ble.n	9c0 <setAudioFrequency(int)+0x58>
     9b4:	cmp	r4, #9
     9b6:	add	r2, r1
     9b8:	bne.n	9a4 <setAudioFrequency(int)+0x3c>
    } while ((n2>64 && n0<54));
     9ba:	cmp	r3, #54	; 0x36
     9bc:	bne.n	99a <setAudioFrequency(int)+0x32>
     9be:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9c0:	mov	r2, r5
     9c2:	ldr	r1, [pc, #244]	; (ab8 <setAudioFrequency(int)+0x150>)
     9c4:	ldr	r0, [pc, #244]	; (abc <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9c6:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9ca:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9cc:	strd	r4, r7, [sp]
     9d0:	bl	c164 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9d4:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     9d8:	ldr.w	r3, [r9]
     9dc:	movs	r2, #3
     9de:	vcvt.f64.s32	d7, s15
     9e2:	ldr	r1, [pc, #220]	; (ac0 <setAudioFrequency(int)+0x158>)
     9e4:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9e6:	and.w	r6, r6, #448	; 0x1c0
     9ea:	ldr	r0, [pc, #208]	; (abc <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9ec:	vldr	d6, [pc, #168]	; a98 <setAudioFrequency(int)+0x130>
     9f0:	vmul.f64	d7, d7, d6
     9f4:	vmov	s13, r4
     9f8:	vcvt.f64.s32	d6, s13
     9fc:	vmul.f64	d7, d7, d6
     a00:	vmov	s13, r7
     a04:	vcvt.f64.s32	d6, s13
     a08:	vmul.f64	d7, d7, d6
     a0c:	vldr	d6, [pc, #144]	; aa0 <setAudioFrequency(int)+0x138>
     a10:	vdiv.f64	d8, d7, d6
     a14:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a16:	movs	r1, #2
     a18:	ldr	r0, [pc, #160]	; (abc <setAudioFrequency(int)+0x154>)
     a1a:	vmov.f64	d0, d8
     a1e:	bl	c228 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a22:	ldr	r0, [pc, #152]	; (abc <setAudioFrequency(int)+0x154>)
     a24:	bl	c12c <Print::println()>
    int c0 = C;
     a28:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a2c:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a30:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a34:	mul.w	r3, r2, r0
     a38:	vmov	s14, r3
     a3c:	vldr	d6, [pc, #104]	; aa8 <setAudioFrequency(int)+0x140>
     a40:	vcvt.f64.s32	d7, s14
     a44:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a48:	vcvt.s32.f64	s15, d7
     a4c:	vmov	r1, s15
     a50:	bl	170f0 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a54:	ldr	r2, [pc, #108]	; (ac4 <setAudioFrequency(int)+0x15c>)
     a56:	ldr	r3, [r2, #28]
     a58:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a5c:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a60:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a62:	ldr	r3, [r2, #40]	; 0x28
     a64:	bic.w	r3, r3, #510	; 0x1fe
     a68:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a6c:	orr.w	r3, r3, r8
     a70:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a72:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a74:	sub.w	r2, r2, #327680	; 0x50000
     a78:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     a7a:	bic.w	r3, r3, #524288	; 0x80000
     a7e:	bic.w	r3, r3, #7
     a82:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a86:	str	r3, [r2, #4]
  }
     a88:	add	sp, #12
     a8a:	vpop	{d8}
     a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     a92:	nop
     a94:	nop.w
     a98:	.word	0x00000000
     a9c:	.word	0x40600000
     aa0:	.word	0x00000000
     aa4:	.word	0x4176e360
     aa8:	.word	0x00000000
     aac:	.word	0x40c38800
     ab0:	.word	0x20007bbd
     ab4:	.word	0x016e3600
     ab8:	.word	0x20007bc3
     abc:	.word	0x200089a4
     ac0:	.word	0x20007be0
     ac4:	.word	0x400fc000

00000ac8 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ac8:	ldr	r2, [pc, #100]	; (b30 <i2s_setup()+0x68>)
     aca:	ldr	r3, [r2, #124]	; 0x7c
  {
     acc:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ace:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ad2:	ldr	r4, [pc, #96]	; (b34 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ad4:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ad6:	ldr.w	r3, [r4, #136]	; 0x88
     ada:	cmp	r3, #0
     adc:	blt.n	b2e <i2s_setup()+0x66>
    int fs = fsamp;
     ade:	ldr	r3, [pc, #88]	; (b38 <i2s_setup()+0x70>)
     ae0:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     ae2:	bl	968 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     ae6:	ldr	r3, [pc, #84]	; (b3c <i2s_setup()+0x74>)
     ae8:	movs	r2, #3
     aea:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     aee:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     af2:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     af6:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     afa:	movs	r2, #2
     afc:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b00:	movs	r3, #0
     b02:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b06:	movs	r3, #4
     b08:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b0c:	mov.w	r3, #83886080	; 0x5000000
     b10:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b14:	mov.w	r3, #65536	; 0x10000
     b18:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b1c:	adds	r3, #27
     b1e:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b22:	ldr	r3, [pc, #28]	; (b40 <i2s_setup()+0x78>)
     b24:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b28:	ldr	r3, [pc, #24]	; (b44 <i2s_setup()+0x7c>)
     b2a:	str.w	r3, [r4, #136]	; 0x88
  }
     b2e:	pop	{r4, pc}
     b30:	.word	0x400fc000
     b34:	.word	0x40384000
     b38:	.word	0x20009310
     b3c:	.word	0x401f8000
     b40:	.word	0x1f1f1f00
     b44:	.word	0x92000001

00000b48 <dma_setup()>:
  {
     b48:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b4a:	ldr	r4, [pc, #128]	; (bcc <dma_setup()+0x84>)
     b4c:	movs	r1, #1
     b4e:	mov	r0, r4
     b50:	bl	bef4 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b54:	ldr	r3, [r4, #0]
     b56:	ldr	r2, [pc, #120]	; (bd0 <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b58:	ldr	r1, [pc, #120]	; (bd4 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b5a:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b5c:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b5e:	ldr	r0, [pc, #120]	; (bd8 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b60:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b62:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b64:	ldr	r0, [pc, #116]	; (bdc <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b66:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b6a:	mov.w	r2, #512	; 0x200
    dma.TCD->SLAST = 0;
     b6e:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b70:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b72:	sub.w	r2, r2, #2560	; 0xa00
    dma.TCD->SLAST = 0;
     b76:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b78:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     b7a:	ldrh	r2, [r3, #22]
     b7c:	uxth	r2, r2
     b7e:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     b80:	movs	r2, #6
     b82:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b84:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     b86:	ldr	r2, [pc, #88]	; (be0 <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b88:	lsls	r3, r3, #2
     b8a:	add.w	r3, r3, #1073741824	; 0x40000000
     b8e:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     b92:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     b94:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     b96:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b98:	ldr	r2, [pc, #72]	; (be4 <dma_setup()+0x9c>)
     b9a:	add.w	r1, r3, #16
     b9e:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     ba2:	asrs	r2, r3, #5
     ba4:	and.w	r0, r3, #31
     ba8:	movs	r1, #1
     baa:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bae:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bb2:	lsls	r1, r0
     bb4:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bb6:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bba:	lsls	r2, r2, #2
     bbc:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bbe:	movs	r2, #96	; 0x60
     bc0:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bc2:	ldr	r3, [pc, #36]	; (be8 <dma_setup()+0xa0>)
     bc4:	ldrb	r2, [r4, #4]
     bc6:	strb	r2, [r3, #27]
  }
     bc8:	pop	{r4, pc}
     bca:	nop
     bcc:	.word	0x200269dc
     bd0:	.word	0x403840a0
     bd4:	.word	0x02020000
     bd8:	.word	0x20200000
     bdc:	.word	0x000008c1
     be0:	.word	0x80000013
     be4:	.word	0x20009400
     be8:	.word	0x400e8000

00000bec <acqModifyFrequency(unsigned long)>:
  {
     bec:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     bee:	ldr	r4, [pc, #32]	; (c10 <acqModifyFrequency(unsigned long)+0x24>)
     bf0:	ldr.w	r3, [r4, #136]	; 0x88
     bf4:	bic.w	r3, r3, #2415919104	; 0x90000000
     bf8:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     bfc:	bl	968 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c00:	ldr.w	r3, [r4, #136]	; 0x88
     c04:	orr.w	r3, r3, #2415919104	; 0x90000000
     c08:	str.w	r3, [r4, #136]	; 0x88
  }
     c0c:	pop	{r4, pc}
     c0e:	nop
     c10:	.word	0x40384000

00000c14 <_GLOBAL__sub_I_procCount>:
		begin();
     c14:	ldr	r0, [pc, #20]	; (c2c <_GLOBAL__sub_I_procCount+0x18>)
     c16:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c18:	push	{r3, lr}
     c1a:	bl	bef4 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c1e:	ldr	r2, [pc, #16]	; (c30 <_GLOBAL__sub_I_procCount+0x1c>)
     c20:	ldr	r1, [pc, #16]	; (c34 <_GLOBAL__sub_I_procCount+0x20>)
     c22:	ldr	r0, [pc, #8]	; (c2c <_GLOBAL__sub_I_procCount+0x18>)
}
     c24:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c28:	b.w	c358 <__aeabi_atexit>
     c2c:	.word	0x200269dc
     c30:	.word	0x20008d80
     c34:	.word	0x000008b5

00000c38 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c38:	ldr	r3, [r0, #4]
     c3a:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c3c:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c3e:	bgt.n	c4c <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c40:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c44:	adds	r3, #1
          sd_name[fsCount] = name;
     c46:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c48:	str	r3, [r0, #4]
     c4a:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c4c:	pop	{r4, pc}

00000c4e <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c4e:	ldr	r0, [r0, #4]
     c50:	bx	lr

00000c52 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c52:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c56:	ldr	r0, [r1, #8]
     c58:	bx	lr

00000c5a <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c5a:	movs	r0, #0
     c5c:	bx	lr

00000c5e <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c5e:	movs	r0, #1
     c60:	bx	lr

00000c62 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c62:	push	{r4}
    *name = 0;
     c64:	movs	r4, #0
     c66:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     c68:	ldr	r3, [r0, #56]	; 0x38
     c6a:	cbz	r3, c76 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     c6c:	mov	r0, r3
  }
     c6e:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     c72:	b.w	69e4 <FatFile::getName(char*, unsigned int)>
     c76:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     c78:	cbz	r0, c82 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     c7a:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     c7e:	b.w	52e8 <ExFatFile::getName8(char*, unsigned int)>
     c82:	ldr.w	r4, [sp], #4
     c86:	bx	lr

00000c88 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     c88:	push	{r4, lr}
     c8a:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     c8c:	movs	r3, #0
     c8e:	movs	r2, #10
     c90:	bl	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     c94:	mov	r0, r4
     c96:	ldmia.w	sp!, {r4, lr}
     c9a:	b.w	c12c <Print::println()>

00000c9e <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     c9e:	push	{r0, r1, r4, lr}
     ca0:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     ca2:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     ca4:	cbz	r1, cbe <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     ca6:	str	r1, [sp, #4]
     ca8:	bl	ec80 <strlen>
     cac:	ldr	r3, [r4, #0]
     cae:	mov	r2, r0
     cb0:	ldr	r1, [sp, #4]
     cb2:	mov	r0, r4
     cb4:	ldr	r3, [r3, #4]
     cb6:	add	sp, #8
     cb8:	ldmia.w	sp!, {r4, lr}
     cbc:	bx	r3
     cbe:	add	sp, #8
     cc0:	pop	{r4, pc}
	...

00000cc4 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     cc4:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     cc6:	ldr	r4, [pc, #44]	; (cf4 <dbgPrint(unsigned short)+0x30>)
     cc8:	mov	r5, r0
     cca:	ldr	r1, [pc, #44]	; (cf8 <dbgPrint(unsigned short)+0x34>)
     ccc:	mov	r0, r4
     cce:	bl	c9e <Print::write(char const*)>
     cd2:	ldr	r1, [pc, #40]	; (cfc <dbgPrint(unsigned short)+0x38>)
     cd4:	mov	r0, r4
     cd6:	bl	c9e <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     cda:	movs	r0, #46	; 0x2e
     cdc:	bl	a368 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     ce0:	mov	r1, r5
     ce2:	mov	r0, r4
     ce4:	bl	c11a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ce8:	mov	r0, r4
  }
     cea:	ldmia.w	sp!, {r3, r4, r5, lr}
     cee:	b.w	c12c <Print::println()>
     cf2:	nop
     cf4:	.word	0x200089a4
     cf8:	.word	0x20007ed2
     cfc:	.word	0x20007edd

00000d00 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d00:	push	{r3, r4, r5, lr}
     d02:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d04:	bl	c9e <Print::write(char const*)>
     d08:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d0a:	mov	r0, r5
     d0c:	bl	c12c <Print::println()>
     d10:	add	r0, r4
     d12:	pop	{r3, r4, r5, pc}

00000d14 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d14:	ldr.w	r3, [r0, #1152]	; 0x480
     d18:	cbz	r3, d26 <FsVolume::bytesPerCluster() const+0x12>
     d1a:	ldrb	r3, [r3, #6]
     d1c:	mov.w	r0, #512	; 0x200
     d20:	lsls	r0, r3
     d22:	uxth	r0, r0
     d24:	bx	lr
     d26:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d2a:	cbz	r0, d30 <FsVolume::bytesPerCluster() const+0x1c>
     d2c:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d30:	bx	lr

00000d32 <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d32:	ldr.w	r3, [r0, #1152]	; 0x480
     d36:	cbz	r3, d3e <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d38:	ldr	r0, [r3, #28]
     d3a:	subs	r0, #1
     d3c:	bx	lr
     d3e:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d42:	cbz	r0, d48 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d44:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d48:	bx	lr

00000d4a <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d4a:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d4e:	push	{r3, r4, r5, lr}
     d50:	ldr	r5, [r1, #88]	; 0x58
     d52:	mov	r0, r5
     d54:	bl	d32 <FsVolume::clusterCount() const>
     d58:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d5a:	mov	r0, r5
     d5c:	bl	d14 <FsVolume::bytesPerCluster() const>
     d60:	umull	r0, r1, r4, r0
     d64:	pop	{r3, r4, r5, pc}

00000d66 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d66:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     d6a:	push	{r4, r5, lr}
     d6c:	mov	r5, r1
     d6e:	sub	sp, #68	; 0x44
     d70:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d72:	cbz	r3, d98 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     d74:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     d76:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     d7a:	add	r0, sp, #8
     d7c:	mov	r3, r2
     d7e:	str	r2, [sp, #8]
     d80:	mov	r2, r5
     d82:	str	r1, [sp, #4]
     d84:	bl	7000 <FatFile::open(FatFile*, char const*, int)>
     d88:	ldr	r1, [sp, #4]
     d8a:	cbz	r0, d94 <FsVolume::rename(char const*, char const*)+0x2e>
     d8c:	mov	r2, r4
     d8e:	add	r0, sp, #8
     d90:	bl	724a <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     d94:	add	sp, #68	; 0x44
     d96:	pop	{r4, r5, pc}
     d98:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     d9c:	cmp	r0, #0
     d9e:	beq.n	d94 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     da0:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     da4:	mov	r2, r5
     da6:	add	r0, sp, #8
  ExFatFile() {}
     da8:	str	r3, [sp, #56]	; 0x38
     daa:	str	r1, [sp, #4]
     dac:	bl	5acc <ExFatFile::open(ExFatFile*, char const*, int)>
     db0:	ldr	r1, [sp, #4]
     db2:	cbnz	r0, db8 <FsVolume::rename(char const*, char const*)+0x52>
     db4:	movs	r0, #0
     db6:	b.n	d94 <FsVolume::rename(char const*, char const*)+0x2e>
     db8:	mov	r2, r4
     dba:	add	r0, sp, #8
     dbc:	bl	64c8 <ExFatFile::rename(ExFatFile*, char const*)>
     dc0:	cmp	r0, #0
     dc2:	beq.n	db4 <FsVolume::rename(char const*, char const*)+0x4e>
     dc4:	b.n	d94 <FsVolume::rename(char const*, char const*)+0x2e>

00000dc6 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     dc6:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     dc8:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     dca:	cbz	r3, de4 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     dcc:	ldrb	r0, [r3, #0]
     dce:	ands.w	r0, r0, #8
     dd2:	ittt	ne
     dd4:	ldrne	r0, [r3, #28]
     dd6:	ldrne	r3, [r3, #20]
     dd8:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     dda:	cmp	r0, #0
     ddc:	it	lt
     dde:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     de2:	pop	{r4, pc}
     de4:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     de6:	cmp	r0, #0
     de8:	beq.n	de2 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     dea:	ldrb.w	r3, [r0, #49]	; 0x31
     dee:	ands.w	r3, r3, #8
     df2:	beq.n	e12 <FsBaseFile::available() const+0x4c>
     df4:	ldrd	r1, r3, [r0, #16]
     df8:	ldrd	r2, r4, [r0]
     dfc:	subs	r0, r1, r2
     dfe:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e02:	cmp.w	r0, #2147483648	; 0x80000000
     e06:	sbcs.w	r3, r3, #0
     e0a:	it	cs
     e0c:	mvncs.w	r0, #2147483648	; 0x80000000
     e10:	b.n	de2 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e12:	mov	r0, r3
     e14:	b.n	e02 <FsBaseFile::available() const+0x3c>

00000e16 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e16:	ldr	r3, [r0, #56]	; 0x38
     e18:	cbz	r3, e28 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e1a:	ldrb	r3, [r3, #0]
     e1c:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e20:	ite	ne
     e22:	movne	r0, #1
     e24:	moveq	r0, #0
  }
     e26:	bx	lr
     e28:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e2a:	cmp	r0, #0
     e2c:	beq.n	e26 <FsBaseFile::isDir() const+0x10>
     e2e:	ldrb.w	r3, [r0, #49]	; 0x31
     e32:	tst.w	r3, #80	; 0x50
     e36:	b.n	e20 <FsBaseFile::isDir() const+0xa>

00000e38 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e38:	ldr	r3, [r0, #56]	; 0x38
     e3a:	cbnz	r3, e46 <FsBaseFile::isOpen() const+0xe>
     e3c:	ldr	r0, [r0, #60]	; 0x3c
     e3e:	subs	r0, #0
     e40:	it	ne
     e42:	movne	r0, #1
     e44:	bx	lr
     e46:	movs	r0, #1
     e48:	bx	lr

00000e4a <MTPStorage_SD::CloseIndex()>:
  {
     e4a:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e4c:	add.w	r5, r0, #184	; 0xb8
  {
     e50:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e52:	mov	r0, r5
     e54:	bl	e38 <FsBaseFile::isOpen() const>
     e58:	cbz	r0, e60 <MTPStorage_SD::CloseIndex()+0x16>
     e5a:	mov	r0, r5
     e5c:	bl	815c <FsBaseFile::close()>
    index_generated = false;
     e60:	movs	r3, #0
     e62:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     e66:	str.w	r3, [r4, #424]	; 0x1a8
  }
     e6a:	pop	{r3, r4, r5, pc}

00000e6c <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     e6c:	ldr	r3, [r0, #56]	; 0x38
     e6e:	cbz	r3, e76 <FsBaseFile::read(void*, unsigned int)+0xa>
     e70:	mov	r0, r3
     e72:	b.w	6b3c <FatFile::read(void*, unsigned int)>
     e76:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     e78:	cbz	r0, e7e <FsBaseFile::read(void*, unsigned int)+0x12>
     e7a:	b.w	54ec <ExFatFile::read(void*, unsigned int)>
  }
     e7e:	mov.w	r0, #4294967295
     e82:	bx	lr

00000e84 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     e84:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e86:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     e88:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e8a:	cbz	r5, e96 <FsBaseFile::seekSet(unsigned long long)+0x12>
     e8c:	cbnz	r3, ea0 <FsBaseFile::seekSet(unsigned long long)+0x1c>
     e8e:	mov	r0, r5
  }
     e90:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e92:	b.w	6d26 <FatFile::seekSet(unsigned long)>
     e96:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     e98:	cbz	r0, ea0 <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     e9a:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     e9c:	b.w	569c <ExFatFile::seekSet(unsigned long long)>
  }
     ea0:	movs	r0, #0
     ea2:	pop	{r4, r5}
     ea4:	bx	lr

00000ea6 <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     ea6:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     ea8:	add.w	r0, r0, #264	; 0x108
     eac:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     eb0:	pop	{r3, pc}
	...

00000eb4 <FsFile::FsFile()>:
     eb4:	movs	r2, #0
     eb6:	mov.w	r1, #1000	; 0x3e8
     eba:	strb	r2, [r0, #12]
     ebc:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     ec0:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ec4:	ldr	r2, [pc, #4]	; (ecc <FsFile::FsFile()+0x18>)
     ec6:	str	r2, [r0, #0]
     ec8:	bx	lr
     eca:	nop
     ecc:	.word	0x20000548

00000ed0 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     ed0:	ldr	r3, [pc, #16]	; (ee4 <FsFile::~FsFile()+0x14>)
     ed2:	push	{r4, lr}
     ed4:	mov	r4, r0
     ed6:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     eda:	bl	815c <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ede:	mov	r0, r4
     ee0:	pop	{r4, pc}
     ee2:	nop
     ee4:	.word	0x20000420

00000ee8 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     ee8:	add.w	r1, r0, r1, lsl #2
     eec:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     eee:	ldr.w	r1, [r3, #1152]	; 0x480
     ef2:	push	{lr}
     ef4:	sub	sp, #60	; 0x3c
     ef6:	cbz	r1, f0e <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     ef8:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     efa:	add.w	r1, r1, #1096	; 0x448
     efe:	mov	r0, sp
     f00:	str	r3, [sp, #0]
     f02:	movs	r3, #1
     f04:	bl	71a6 <FatFile::mkdir(FatFile*, char const*, bool)>
     f08:	add	sp, #60	; 0x3c
     f0a:	ldr.w	pc, [sp], #4
     f0e:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f12:	cmp	r0, #0
     f14:	beq.n	f08 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f16:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f18:	movs	r3, #1
     f1a:	add.w	r1, r0, #1096	; 0x448
     f1e:	mov	r0, sp
     f20:	bl	640a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f24:	b.n	f08 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f28 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f28:	push	{r4, r5, lr}
     f2a:	mov	r4, r0
     f2c:	sub	sp, #68	; 0x44
     f2e:	mov	r5, r1
     f30:	ldr	r0, [pc, #84]	; (f88 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f32:	mov	r1, r2
     f34:	str	r2, [sp, #4]
     f36:	bl	d00 <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f3a:	ldr	r2, [sp, #4]
     f3c:	add.w	r1, r4, r5, lsl #2
     f40:	ldr	r3, [r1, #84]	; 0x54
     f42:	ldr.w	r1, [r3, #1152]	; 0x480
     f46:	cbz	r1, f60 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f48:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f4a:	add	r0, sp, #8
     f4c:	str	r3, [sp, #8]
     f4e:	movs	r3, #1
     f50:	bl	709e <FatFile::open(FatVolume*, char const*, int)>
     f54:	cbz	r0, f5c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f56:	add	r0, sp, #8
     f58:	bl	80a4 <FatFile::remove()>
     f5c:	add	sp, #68	; 0x44
     f5e:	pop	{r4, r5, pc}
     f60:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     f64:	cmp	r0, #0
     f66:	beq.n	f5c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f68:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f6a:	movs	r3, #1
     f6c:	mov	r1, r0
     f6e:	add	r0, sp, #8
     f70:	bl	5b92 <ExFatFile::open(ExFatVolume*, char const*, int)>
     f74:	cbnz	r0, f7a <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     f76:	movs	r0, #0
     f78:	b.n	f5c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f7a:	add	r0, sp, #8
     f7c:	bl	6110 <ExFatFile::remove()>
     f80:	cmp	r0, #0
     f82:	beq.n	f76 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     f84:	b.n	f5c <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f86:	nop
     f88:	.word	0x200089a4

00000f8c <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     f8c:	add.w	r1, r0, r1, lsl #2
     f90:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     f92:	ldr.w	r1, [r3, #1152]	; 0x480
     f96:	push	{lr}
     f98:	sub	sp, #60	; 0x3c
     f9a:	cbz	r1, fb4 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     f9c:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     f9e:	mov	r0, sp
     fa0:	str	r3, [sp, #0]
     fa2:	bl	709e <FatFile::open(FatVolume*, char const*, int)>
     fa6:	cbz	r0, fae <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fa8:	mov	r0, sp
     faa:	bl	6dc6 <FatFile::rmdir()>
     fae:	add	sp, #60	; 0x3c
     fb0:	ldr.w	pc, [sp], #4
     fb4:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     fb8:	cmp	r0, #0
     fba:	beq.n	fae <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fbc:	mov	r3, r1
     fbe:	str	r1, [sp, #48]	; 0x30
     fc0:	mov	r1, r0
     fc2:	mov	r0, sp
     fc4:	bl	5b92 <ExFatFile::open(ExFatVolume*, char const*, int)>
     fc8:	cbnz	r0, fce <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
     fca:	movs	r0, #0
     fcc:	b.n	fae <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fce:	mov	r0, sp
     fd0:	bl	619c <ExFatFile::rmdir()>
     fd4:	cmp	r0, #0
     fd6:	beq.n	fca <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
     fd8:	b.n	fae <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00000fdc <MTPStorage_SD::OpenIndex()>:
  { 
     fdc:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
     fde:	add.w	r5, r0, #184	; 0xb8
  { 
     fe2:	sub	sp, #84	; 0x54
     fe4:	mov	r4, r0
    if(index_.isOpen()) return; // only once
     fe6:	mov	r0, r5
     fe8:	bl	e38 <FsBaseFile::isOpen() const>
     fec:	cbnz	r0, 102e <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
     fee:	ldr	r2, [pc, #68]	; (1034 <MTPStorage_SD::OpenIndex()+0x58>)
     ff0:	movw	r3, #514	; 0x202
     ff4:	ldr	r1, [r4, #88]	; 0x58
     ff6:	mov	r0, sp
     ff8:	bl	8390 <FsVolume::open(char const*, int)>
class Print
     ffc:	ldr	r3, [sp, #4]
     ffe:	add	r1, sp, #16
    1000:	mov	r0, r5
    1002:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    1006:	ldr	r3, [sp, #8]
    1008:	str.w	r3, [r4, #176]	; 0xb0
    100c:	ldrb.w	r3, [sp, #12]
    1010:	strb.w	r3, [r4, #180]	; 0xb4
    1014:	bl	8186 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    1018:	mov	r0, sp
    101a:	bl	ed0 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    101e:	mov	r0, r5
    1020:	bl	e38 <FsBaseFile::isOpen() const>
    1024:	cbnz	r0, 102e <MTPStorage_SD::OpenIndex()+0x52>
    1026:	ldr	r1, [pc, #16]	; (1038 <MTPStorage_SD::OpenIndex()+0x5c>)
    1028:	ldr	r0, [pc, #16]	; (103c <MTPStorage_SD::OpenIndex()+0x60>)
    102a:	bl	d00 <Print::println(char const*)>
  }
    102e:	add	sp, #84	; 0x54
    1030:	pop	{r4, r5, pc}
    1032:	nop
    1034:	.word	0x20007efb
    1038:	.word	0x20007f09
    103c:	.word	0x200089a4

00001040 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    1040:	push	{r4, lr}
    1042:	mov	r4, r0
    if(!index_.isOpen()) return;
    1044:	adds	r0, #184	; 0xb8
    1046:	bl	e38 <FsBaseFile::isOpen() const>
    104a:	cbz	r0, 106c <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    104c:	ldr	r3, [r4, #0]
    104e:	mov	r0, r4
    1050:	ldr	r3, [r3, #64]	; 0x40
    1052:	blx	r3
    all_scanned_ = false;
    1054:	movs	r3, #0
    OpenIndex();
    1056:	mov	r0, r4
    all_scanned_ = false;
    1058:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    105c:	mvn.w	r3, #1
    1060:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1064:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    1068:	b.w	fdc <MTPStorage_SD::OpenIndex()>
  }
    106c:	pop	{r4, pc}

0000106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    106e:	push	{r0, r1, r4, r5, r6, lr}
    1070:	mov	r4, r0
    1072:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    1074:	mov.w	r6, #272	; 0x110
  { OpenIndex();
    1078:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    107a:	adds	r4, #184	; 0xb8
  { OpenIndex();
    107c:	bl	fdc <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    1080:	mul.w	r2, r6, r5
    1084:	movs	r3, #0
    1086:	mov	r0, r4
    1088:	bl	e84 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    108c:	mov	r2, r6
    108e:	ldr	r1, [sp, #4]
    1090:	mov	r0, r4
    1092:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    1096:	add	sp, #8
    1098:	pop	{r4, r5, r6, pc}

0000109a <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    109a:	push	{r4, lr}
    109c:	ldr.w	r4, [r0, #424]	; 0x1a8
    10a0:	mov	r2, r1
    10a2:	adds	r1, r4, #1
    10a4:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10a8:	mov	r1, r4
    10aa:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10ae:	mov	r0, r4
    10b0:	pop	{r4, pc}
	...

000010b4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10b4:	movs	r3, #1
    sd_remove(0,indexFile);
    10b6:	ldr	r2, [pc, #88]	; (1110 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    10b8:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10ba:	push	{r4, r5, r6, r7, lr}
    10bc:	mov	r4, r0
    index_generated = true;
    10be:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10c2:	sub	sp, #276	; 0x114
    sd_remove(0,indexFile);
    10c4:	adds	r0, #4
    10c6:	bl	f28 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    10ca:	movs	r5, #0
    num_storage = sd_getFSCount();
    10cc:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    10ce:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    10d2:	ldr	r7, [pc, #64]	; (1114 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    10d4:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    10d8:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    10dc:	ldr.w	r3, [r4, #408]	; 0x198
    10e0:	cmp	r5, r3
    10e2:	blt.n	10e8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    10e4:	add	sp, #276	; 0x114
    10e6:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    10e8:	movs	r3, #0
      strcpy(r.name, "/");
    10ea:	mov	r1, r7
    10ec:	add	r0, sp, #16
      r.store = ii; // 
    10ee:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    10f2:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    10f4:	adds	r5, #1
      r.sibling = 0;
    10f6:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    10fa:	movs	r3, #1
    10fc:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1100:	bl	eb1c <strcpy>
      AppendIndexRecord(r);
    1104:	mov	r1, sp
    1106:	mov	r0, r4
    1108:	bl	109a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    110c:	b.n	10dc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    110e:	nop
    1110:	.word	0x20007efb
    1114:	.word	0x20007bbb

00001118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1118:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    111a:	mov.w	r7, #272	; 0x110
  {
    111e:	mov	r4, r1
    1120:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    1122:	movs	r1, #0
    1124:	mov	r2, r7
  {
    1126:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1128:	bl	9c1c <memset>
    if (i > index_entries_) 
    112c:	ldr.w	r3, [r4, #424]	; 0x1a8
    1130:	cmp	r3, r6
    1132:	bcc.n	1152 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1134:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1136:	adds	r4, #184	; 0xb8
    OpenIndex();
    1138:	bl	fdc <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    113c:	mul.w	r2, r7, r6
    1140:	movs	r3, #0
    1142:	mov	r0, r4
    1144:	bl	e84 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1148:	mov	r2, r7
    114a:	mov	r1, r5
    114c:	mov	r0, r4
    114e:	bl	e6c <FsBaseFile::read(void*, unsigned int)>
  }
    1152:	mov	r0, r5
    1154:	pop	{r3, r4, r5, r6, r7, pc}

00001156 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    1156:	push	{r4, r5, lr}
    1158:	mov	r4, r0
    115a:	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    115c:	ldr.w	r5, [r4, #432]	; 0x1b0
    1160:	cbz	r5, 1180 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    1162:	mov	r2, r5
    1164:	mov	r1, r4
    1166:	mov	r0, sp
    1168:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    116c:	ldrb.w	r3, [r4, #436]	; 0x1b4
    1170:	cbz	r3, 1186 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    1172:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    1174:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    1178:	ldrb.w	r3, [sp, #16]
    117c:	cmp	r3, #0
    117e:	beq.n	115c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    1180:	mov	r0, r5
    1182:	add	sp, #276	; 0x114
    1184:	pop	{r4, r5, pc}
      { next_++;
    1186:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    118a:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    118e:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    1190:	cmp	r1, r2
    1192:	it	cc
    1194:	movcc	r3, r1
    1196:	b.n	1174 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

00001198 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    1198:	push	{r4, r5, lr}
    119a:	sub	sp, #276	; 0x114
    119c:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    119e:	mov	r2, r1
    11a0:	mov	r1, r0
    11a2:	mov	r0, sp
  {
    11a4:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11a6:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11aa:	add	r1, sp, #16
    11ac:	mov	r0, r5
    11ae:	bl	eb1c <strcpy>
    *parent = r.parent;
    11b2:	ldr	r3, [sp, #288]	; 0x120
    11b4:	ldr	r2, [sp, #0]
    11b6:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11b8:	ldrb.w	r3, [sp, #12]
    11bc:	cbnz	r3, 11ce <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    11be:	ldr	r3, [sp, #4]
    11c0:	str	r3, [r4, #0]
    *store = r.store;
    11c2:	ldrh.w	r2, [sp, #14]
    11c6:	ldr	r3, [sp, #292]	; 0x124
    11c8:	strh	r2, [r3, #0]
  }
    11ca:	add	sp, #276	; 0x114
    11cc:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11ce:	mov.w	r3, #4294967295
    11d2:	b.n	11c0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

000011d4 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    11d4:	push	{lr}
    11d6:	sub	sp, #276	; 0x114
    11d8:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    11da:	mov	r1, r0
    11dc:	mov	r0, sp
    11de:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    11e2:	ldr	r0, [sp, #4]
    11e4:	add	sp, #276	; 0x114
    11e6:	ldr.w	pc, [sp], #4

000011ea <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    11ea:	ldr.w	r3, [r0, #320]	; 0x140
  {
    11ee:	push	{r4, r5, lr}
    11f0:	mov	r4, r0
    11f2:	sub	sp, #276	; 0x114
    11f4:	cbz	r3, 1226 <MTPStorage_SD::close()+0x3c>
    11f6:	ldr	r5, [r3, #28]
    file_.close();
    11f8:	add.w	r0, r4, #264	; 0x108
    11fc:	bl	815c <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    1200:	ldr.w	r2, [r4, #420]	; 0x1a4
    1204:	mov	r1, r4
    1206:	mov	r0, sp
    1208:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    120c:	mov	r2, sp
    120e:	ldr.w	r1, [r4, #420]	; 0x1a4
    1212:	mov	r0, r4
    uint32_t size = (uint32_t) file_.size();
    1214:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    1216:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    121a:	mvn.w	r3, #1
    121e:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1222:	add	sp, #276	; 0x114
    1224:	pop	{r4, r5, pc}
    1226:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    122a:	cmp	r5, #0
    122c:	beq.n	11f8 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    122e:	ldr	r5, [r5, #16]
    1230:	b.n	11f8 <MTPStorage_SD::close()+0xe>
	...

00001234 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1234:	push	{r4, r5, r6, lr}
    1236:	sub	sp, #272	; 0x110
    1238:	mov	r6, r0
    123a:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    123c:	mov	r2, r1
    123e:	mov	r1, r0
    1240:	mov	r0, sp
  {
    1242:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1244:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1248:	ldr	r1, [sp, #0]
    124a:	adds	r3, r1, #1
    124c:	bne.n	125e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    124e:	ldr	r1, [pc, #64]	; (1290 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1250:	mov	r0, r4
    1252:	bl	eb1c <strcpy>
      return tmp.store;
    1256:	ldrh.w	r0, [sp, #14]
  }
    125a:	add	sp, #272	; 0x110
    125c:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    125e:	mov	r3, r5
    1260:	mov	r2, r4
    1262:	mov	r0, r6
    1264:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1268:	mov	r0, r4
    126a:	bl	ec80 <strlen>
    126e:	add	r0, r4
    1270:	ldrb.w	r3, [r0, #-1]
    1274:	cmp	r3, #47	; 0x2f
    1276:	beq.n	1282 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1278:	mov	r2, r5
    127a:	ldr	r1, [pc, #20]	; (1290 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    127c:	mov	r0, r4
    127e:	bl	e560 <strlcat>
      strlcat(out, tmp.name,len);
    1282:	mov	r2, r5
    1284:	add	r1, sp, #16
    1286:	mov	r0, r4
    1288:	bl	e560 <strlcat>
    128c:	b.n	1256 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    128e:	nop
    1290:	.word	0x20007bbb

00001294 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    1294:	push	{r4, r5, r6, r7, lr}
    1296:	subw	sp, sp, #1044	; 0x414
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    129a:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    129e:	mov	r4, r0
    12a0:	mov	r5, r1
    12a2:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12a4:	mov	r2, sp
    12a6:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    12aa:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12ac:	mov	r6, r0
    Serial.println(oldName);
    12ae:	ldr	r0, [pc, #120]	; (1328 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    12b0:	bl	d00 <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    12b4:	mov	r2, r5
    12b6:	mov	r1, r4
    12b8:	add	r0, sp, #768	; 0x300
    12ba:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    12be:	mov.w	r2, #256	; 0x100
    12c2:	add	r1, sp, #784	; 0x310
    12c4:	add	r0, sp, #512	; 0x200
    12c6:	bl	e5c8 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    12ca:	mov.w	r2, #256	; 0x100
    12ce:	mov	r1, r7
    12d0:	add	r0, sp, #784	; 0x310
    12d2:	bl	e5c8 <strlcpy>
    WriteIndexRecord(handle, p1);
    12d6:	add	r2, sp, #768	; 0x300
    12d8:	mov	r1, r5
    12da:	mov	r0, r4
    12dc:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    12e0:	mov.w	r3, #256	; 0x100
    12e4:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    12e6:	add.w	r6, r4, r6, lsl #2
    12ea:	add.w	r2, sp, r3
    12ee:	mov	r0, r4
    12f0:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    12f4:	add	r1, sp, #256	; 0x100
    12f6:	ldr	r0, [pc, #48]	; (1328 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    12f8:	bl	d00 <Print::println(char const*)>
    12fc:	ldr	r0, [r6, #88]	; 0x58
    12fe:	add	r2, sp, #256	; 0x100
    1300:	mov	r1, sp
    1302:	bl	d66 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1306:	mov	r6, r0
    1308:	cbnz	r0, 1320 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    130a:	mov.w	r2, #256	; 0x100
    130e:	add	r1, sp, #512	; 0x200
    1310:	add	r0, sp, #784	; 0x310
    1312:	bl	e5c8 <strlcpy>
    WriteIndexRecord(handle, p1);
    1316:	add	r2, sp, #768	; 0x300
    1318:	mov	r1, r5
    131a:	mov	r0, r4
    131c:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1320:	mov	r0, r6
    1322:	addw	sp, sp, #1044	; 0x414
    1326:	pop	{r4, r5, r6, r7, pc}
    1328:	.word	0x200089a4

0000132c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    132c:	ldr.w	r3, [r0, #420]	; 0x1a4
    1330:	cmp	r3, r1
  {
    1332:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1336:	mov	r4, r0
    1338:	sub	sp, #336	; 0x150
    133a:	mov	r6, r1
    133c:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    133e:	bne.n	1348 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    1340:	ldr.w	r3, [r0, #416]	; 0x1a0
    1344:	cmp	r3, r2
    1346:	beq.n	13a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1348:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    134c:	mov.w	r3, #256	; 0x100
    1350:	add	r2, sp, #80	; 0x50
    1352:	mov	r1, r6
    1354:	mov	r0, r4
    1356:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    135a:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    135c:	mov	r0, r8
    135e:	bl	e38 <FsBaseFile::isOpen() const>
    1362:	cbz	r0, 136a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1364:	mov	r0, r8
    1366:	bl	815c <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    136a:	add.w	r7, r4, r7, lsl #2
    136e:	add	r2, sp, #80	; 0x50
    1370:	mov	r3, r5
    1372:	mov	r0, sp
    1374:	ldr	r1, [r7, #88]	; 0x58
    1376:	bl	8390 <FsVolume::open(char const*, int)>
    137a:	ldr	r3, [sp, #4]
    137c:	add	r1, sp, #16
    137e:	mov	r0, r8
    1380:	str.w	r3, [r4, #252]	; 0xfc
    1384:	ldr	r3, [sp, #8]
    1386:	str.w	r3, [r4, #256]	; 0x100
    138a:	ldrb.w	r3, [sp, #12]
    138e:	strb.w	r3, [r4, #260]	; 0x104
    1392:	bl	8186 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    1396:	mov	r0, sp
    1398:	bl	ed0 <FsFile::~FsFile()>
    mode_ = mode;
    139c:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    13a0:	add	sp, #336	; 0x150
    13a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000013a6 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    13a6:	push	{r4, r5, r6, lr}
    13a8:	mov	r4, r0
    13aa:	mov	r6, r2
    13ac:	mov	r5, r3
    OpenFileByIndex(handle);
    13ae:	movs	r2, #0
    file_.seekSet(pos);
    13b0:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    13b4:	bl	132c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    13b8:	mov	r2, r6
    13ba:	movs	r3, #0
    13bc:	mov	r0, r4
    13be:	bl	e84 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    13c2:	ldr	r2, [sp, #16]
    13c4:	mov	r1, r5
    13c6:	mov	r0, r4
    13c8:	bl	e6c <FsBaseFile::read(void*, unsigned int)>
  }
    13cc:	pop	{r4, r5, r6, pc}

000013ce <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    13ce:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    13d2:	cmp.w	r2, #4294967295
    13d6:	ite	ne
    13d8:	movne	r8, r2
    13da:	moveq	r8, r1
  {
    13dc:	sub.w	sp, sp, #800	; 0x320
    13e0:	mov	r4, r0
    13e2:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    13e4:	mov	r2, r8
    13e6:	mov	r1, r0
    13e8:	add	r0, sp, #256	; 0x100
  {
    13ea:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    13ec:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    13f0:	mov.w	r2, #256	; 0x100
    13f4:	ldr	r1, [sp, #824]	; 0x338
    13f6:	add	r0, sp, #544	; 0x220
    13f8:	bl	e5c8 <strlcpy>
    r.store = p.store;
    13fc:	ldrh.w	r3, [sp, #270]	; 0x10e
    ret = p.child = AppendIndexRecord(r);
    1400:	add	r1, sp, #528	; 0x210
    1402:	mov	r0, r4
    r.store = p.store;
    1404:	strh.w	r3, [sp, #542]	; 0x21e
    r.child = 0;
    1408:	movs	r3, #0
    r.parent = parent;
    140a:	str.w	r8, [sp, #528]	; 0x210
    r.child = 0;
    140e:	str	r3, [sp, #532]	; 0x214
    r.sibling = p.child;
    1410:	ldr	r3, [sp, #260]	; 0x104
    r.isdir = folder;
    1412:	strb.w	r7, [sp, #540]	; 0x21c
    r.sibling = p.child;
    1416:	str	r3, [sp, #536]	; 0x218
    r.scanned = 1;
    1418:	movs	r3, #1
    141a:	strb.w	r3, [sp, #541]	; 0x21d
    ret = p.child = AppendIndexRecord(r);
    141e:	bl	109a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    1422:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1424:	mov	r5, r0
    1426:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1428:	mov	r1, r8
    142a:	mov	r0, r4
    142c:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1430:	cbz	r7, 1454 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x86>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    1432:	mov	r2, sp
    1434:	mov	r1, r5
    1436:	mov.w	r3, #256	; 0x100
    143a:	mov	r0, r4
    143c:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1440:	mov	r2, sp
    1442:	mov	r1, r6
    1444:	adds	r0, r4, #4
    1446:	bl	ee8 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    144a:	mov	r0, r5
    144c:	add.w	sp, sp, #800	; 0x320
    1450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    1454:	movw	r2, #514	; 0x202
    1458:	mov	r1, r5
    145a:	mov	r0, r4
    145c:	bl	132c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1460:	b.n	144a <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x7c>

00001462 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1462:	ldrb.w	r3, [r0, #428]	; 0x1ac
    1466:	cbnz	r3, 146c <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1468:	b.w	10b4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    146c:	bx	lr

0000146e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    146e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1472:	cmp.w	r2, #4294967295
    1476:	ite	ne
    1478:	movne	r6, r2
    147a:	moveq	r6, r1
    147c:	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    1480:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    1482:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1484:	mov	r2, r6
    1486:	mov	r0, sp
    1488:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    148c:	ldrb.w	r3, [sp, #12]
    1490:	cmp	r3, #0
    1492:	beq.n	155a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    1494:	ldrb.w	r5, [sp, #13]
    1498:	cmp	r5, #0
    149a:	bne.n	155a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
      if (!file_.isOpen()) return;
    149c:	add.w	r7, r4, #264	; 0x108
      OpenFileByIndex(i);
    14a0:	mov	r0, r4
    14a2:	mov	r2, r5
    14a4:	mov	r1, r6
    14a6:	bl	132c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    14aa:	mov	r0, r7
    14ac:	bl	e38 <FsBaseFile::isOpen() const>
    14b0:	cmp	r0, #0
    14b2:	beq.n	155a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    14b4:	mov	r8, r5
    FsFile tmpFile;
    14b6:	add	r0, sp, #272	; 0x110
    14b8:	add.w	r9, r4, #344	; 0x158
    14bc:	bl	eb4 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    14c0:	movs	r2, #0
    14c2:	mov	r1, r7
    14c4:	add	r0, sp, #288	; 0x120
    14c6:	bl	825c <FsBaseFile::openNext(FsBaseFile*, int)>
    14ca:	ldr	r3, [sp, #276]	; 0x114
    14cc:	add	r1, sp, #288	; 0x120
    14ce:	mov	r0, r9
    14d0:	str.w	r3, [r4, #332]	; 0x14c
    14d4:	ldr	r3, [sp, #280]	; 0x118
    14d6:	str.w	r3, [r4, #336]	; 0x150
    14da:	ldrb.w	r3, [sp, #284]	; 0x11c
    14de:	strb.w	r3, [r4, #340]	; 0x154
    14e2:	bl	8186 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    14e6:	add	r0, sp, #272	; 0x110
    14e8:	bl	ed0 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    14ec:	mov	r0, r9
    14ee:	bl	e38 <FsBaseFile::isOpen() const>
    14f2:	cbz	r0, 1548 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.store = record.store;
    14f4:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    14f8:	mov	r0, r9
        r.parent = i;
    14fa:	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    14fc:	strh.w	r3, [sp, #286]	; 0x11e
        r.sibling = sibling;
    1500:	str	r5, [sp, #280]	; 0x118
    1502:	bl	e16 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1506:	strb.w	r0, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    150a:	cbnz	r0, 1544 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    return m_fFile ? m_fFile->fileSize() :
    150c:	ldr.w	r3, [r4, #400]	; 0x190
    1510:	cbz	r3, 1538 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xca>
    1512:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    1514:	mov.w	r2, #256	; 0x100
    1518:	add	r1, sp, #288	; 0x120
    151a:	mov	r0, r9
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    151c:	str	r3, [sp, #276]	; 0x114
        r.scanned = false;
    151e:	strb.w	r8, [sp, #285]	; 0x11d
        child_.getName(r.name,MAX_FILENAME_LEN);
    1522:	bl	c62 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        sibling = AppendIndexRecord(r);
    1526:	add	r1, sp, #272	; 0x110
    1528:	mov	r0, r4
    152a:	bl	109a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    152e:	mov	r5, r0
        child_.close();
    1530:	mov	r0, r9
    1532:	bl	815c <FsBaseFile::close()>
      }
    1536:	b.n	14b6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1538:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    153c:	cmp	r3, #0
    153e:	beq.n	1514 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
    1540:	ldr	r3, [r3, #16]
    1542:	b.n	1514 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1544:	movs	r3, #0
    1546:	b.n	1514 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
      record.scanned = true;
    1548:	movs	r3, #1
      WriteIndexRecord(i, record);
    154a:	mov	r2, sp
    154c:	mov	r1, r6
    154e:	mov	r0, r4
      record.scanned = true;
    1550:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1554:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1556:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    155a:	add.w	sp, sp, #548	; 0x224
    155e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001562 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1562:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    1564:	cmp.w	r2, #4294967295
    1568:	it	eq
    156a:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    156c:	sub	sp, #280	; 0x118
    156e:	mov	r4, r0
      ScanDir(store, parent);
    1570:	str	r2, [sp, #4]
    1572:	bl	146e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    1576:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    1578:	ldr	r2, [sp, #4]
    157a:	mov	r1, r4
    157c:	add	r0, sp, #8
      follow_sibling_ = true;
    157e:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    1582:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1586:	ldr	r3, [sp, #12]
    1588:	str.w	r3, [r4, #432]	; 0x1b0
  }
    158c:	add	sp, #280	; 0x118
    158e:	pop	{r4, pc}

00001590 <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    1590:	push	{r4, r5, r6, lr}
    1592:	ldrb.w	r4, [r0, #429]	; 0x1ad
    1596:	mov	r5, r0
    1598:	mov	r6, r1
    159a:	cbnz	r4, 15ae <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    159c:	movs	r3, #1
    159e:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    15a2:	bl	1462 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15a6:	ldr.w	r3, [r5, #424]	; 0x1a8
    15aa:	cmp	r4, r3
    15ac:	bcc.n	15b0 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    15ae:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15b0:	mov	r2, r4
    15b2:	mov	r1, r6
    15b4:	mov	r0, r5
    15b6:	adds	r4, #1
    15b8:	bl	146e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    15bc:	b.n	15a6 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000015be <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    15be:	push	{r4, r5, r6, lr}
    15c0:	mov	r5, r2
    15c2:	mov	r4, r0
    15c4:	mov	r6, r1
    GenerateIndex(store);
    15c6:	bl	1462 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    15ca:	cbz	r5, 15da <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    15cc:	mov	r2, r5
    15ce:	mov	r1, r6
    15d0:	mov	r0, r4
  }
    15d2:	ldmia.w	sp!, {r4, r5, r6, lr}
    15d6:	b.w	1562 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    15da:	mov	r1, r6
    15dc:	mov	r0, r4
    15de:	bl	1590 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    15e2:	movs	r3, #1
      follow_sibling_ = false;
    15e4:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    15e8:	str.w	r3, [r4, #432]	; 0x1b0
  }
    15ec:	pop	{r4, r5, r6, pc}
	...

000015f0 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    15f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15f4:	mov	r4, r1
    15f6:	sub.w	sp, sp, #764	; 0x2fc
    15fa:	add.w	r1, r0, r1, lsl #2
    15fe:	mov	r6, r0
  FsFile f1=sd_open(store,file,0);
    1600:	adds	r7, r0, #4
    1602:	movs	r3, #0
    1604:	add	r0, sp, #8
    1606:	ldr	r1, [r1, #88]	; 0x58
{ 
    1608:	mov	r5, r2
    160a:	bl	8390 <FsVolume::open(char const*, int)>
    160e:	add	r0, sp, #24
    1610:	bl	e16 <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1614:	cmp	r0, #0
    1616:	beq.n	16ba <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1618:	ldr.w	r9, [pc, #172]	; 16c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    161c:	add	r0, sp, #88	; 0x58
    161e:	bl	eb4 <FsFile::FsFile()>
    FsFile tmpFile;
    1622:	add	r0, sp, #168	; 0xa8
    1624:	bl	eb4 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1628:	movs	r2, #0
    162a:	add	r1, sp, #24
    162c:	add	r0, sp, #184	; 0xb8
    162e:	bl	825c <FsBaseFile::openNext(FsBaseFile*, int)>
    1632:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1634:	add	r1, sp, #184	; 0xb8
    1636:	add	r0, sp, #104	; 0x68
    1638:	str	r3, [sp, #92]	; 0x5c
    163a:	ldr	r3, [sp, #176]	; 0xb0
    163c:	str	r3, [sp, #96]	; 0x60
    163e:	ldrb.w	r3, [sp, #180]	; 0xb4
    1642:	strb.w	r3, [sp, #100]	; 0x64
    1646:	bl	8186 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    164a:	add	r0, sp, #104	; 0x68
    164c:	bl	e38 <FsBaseFile::isOpen() const>
    1650:	mov	r8, r0
    while(f2=f1.openNextFile())
    1652:	add	r0, sp, #168	; 0xa8
    1654:	bl	ed0 <FsFile::~FsFile()>
    1658:	cmp.w	r8, #0
    165c:	bne.n	167c <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    165e:	mov	r2, r5
    1660:	mov	r1, r4
    1662:	mov	r0, r7
    1664:	bl	f8c <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1668:	add	r0, sp, #88	; 0x58
    166a:	bl	ed0 <FsFile::~FsFile()>
}
    166e:	add	r0, sp, #8
    1670:	bl	ed0 <FsFile::~FsFile()>
    1674:	add.w	sp, sp, #764	; 0x2fc
    1678:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    167c:	add.w	r8, sp, #504	; 0x1f8
    1680:	mov.w	r2, #256	; 0x100
    1684:	add	r0, sp, #104	; 0x68
    1686:	mov	r1, r8
    1688:	bl	c62 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    168c:	mov	r2, r9
    168e:	mov.w	r1, #256	; 0x100
    1692:	mov	r3, r5
    1694:	add	r0, sp, #248	; 0xf8
    1696:	str.w	r8, [sp]
    169a:	bl	e18c <snprintf>
    return BaseFile::isDir();
    169e:	add	r0, sp, #104	; 0x68
    16a0:	bl	e16 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    16a4:	add	r2, sp, #248	; 0xf8
    16a6:	mov	r1, r4
    16a8:	cbz	r0, 16b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    16aa:	mov	r0, r6
    16ac:	bl	15f0 <MTPStorage_SD::removeFile(unsigned long, char*)>
    16b0:	b.n	1622 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    16b2:	mov	r0, r7
    16b4:	bl	f28 <mSD_Base::sd_remove(unsigned long, char const*)>
    16b8:	b.n	1622 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    16ba:	mov	r2, r5
    16bc:	mov	r1, r4
    16be:	mov	r0, r7
    16c0:	bl	f28 <mSD_Base::sd_remove(unsigned long, char const*)>
    16c4:	b.n	166e <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    16c6:	nop
    16c8:	.word	0x20007ef5

000016cc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    16cc:	push	{r4, r5, r6, r7, lr}
    16ce:	subw	sp, sp, #1348	; 0x544
    16d2:	mov	r4, r0
    16d4:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    16d6:	mov.w	r3, #256	; 0x100
    16da:	add	r2, sp, #272	; 0x110
    16dc:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    16e0:	mov	r2, r5
    16e2:	mov	r1, r4
    16e4:	add	r0, sp, #528	; 0x210
    16e6:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    16ea:	add	r2, sp, #272	; 0x110
    16ec:	ldrh.w	r1, [sp, #542]	; 0x21e
    16f0:	mov	r0, r4
    16f2:	bl	15f0 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    16f6:	movs	r3, #0
    WriteIndexRecord(object, r);
    16f8:	add	r2, sp, #528	; 0x210
    16fa:	mov	r1, r5
    16fc:	mov	r0, r4
    r.name[0]=0;
    16fe:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    1702:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    1706:	ldr	r2, [sp, #528]	; 0x210
    1708:	mov	r1, r4
    170a:	add	r0, sp, #800	; 0x320
    170c:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1710:	ldr	r6, [sp, #804]	; 0x324
    1712:	cmp	r5, r6
    1714:	bne.n	172a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    1716:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    1718:	add	r2, sp, #800	; 0x320
    171a:	ldr	r1, [sp, #528]	; 0x210
      t.child = r.sibling;
    171c:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(is, x);
    171e:	mov	r0, r4
    1720:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1724:	addw	sp, sp, #1348	; 0x544
    1728:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    172a:	mov	r2, r6
    172c:	mov	r1, r4
    172e:	add.w	r0, sp, #1072	; 0x430
    1732:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1736:	ldr.w	r7, [sp, #1080]	; 0x438
    173a:	cmp	r5, r7
    173c:	bne.n	174c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    173e:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    1740:	add.w	r2, sp, #1072	; 0x430
    1744:	mov	r1, r6
      x.sibling = r.sibling;
    1746:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    174a:	b.n	171e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    174c:	mov	r2, r7
    174e:	mov	r1, r4
    1750:	mov	r0, sp
    1752:	mov	r6, r7
    1754:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1758:	mov.w	r2, #272	; 0x110
    175c:	mov	r1, sp
    175e:	add.w	r0, sp, #1072	; 0x430
    1762:	bl	9c60 <memcpy>
    1766:	b.n	1736 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001768 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1768:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    176a:	adds	r3, r1, #1
    176c:	beq.n	1772 <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    176e:	bl	16cc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    1772:	movs	r0, #1
    1774:	pop	{r3, pc}

00001776 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    1776:	push	{r4, r5, r6, lr}
    1778:	add.w	r1, r0, r1, lsl #2
    177c:	sub.w	sp, sp, #2208	; 0x8a0
    1780:	mov	r5, r0
    1782:	mov	r6, r3
    1784:	ldr	r1, [r1, #84]	; 0x54
    1786:	movs	r3, #0
    1788:	mov	r0, sp
    178a:	bl	8390 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,FILE_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    178e:	add	r0, sp, #16
    1790:	bl	e38 <FsBaseFile::isOpen() const>
    1794:	mov	r4, r0
    1796:	cbnz	r0, 17ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    1798:	movw	r0, #669	; 0x29d
    179c:	bl	cc4 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    17a0:	mov	r0, sp
    17a2:	bl	ed0 <FsFile::~FsFile()>
    17a6:	mov	r0, r4
    17a8:	add.w	sp, sp, #2208	; 0x8a0
    17ac:	pop	{r4, r5, r6, pc}
    17ae:	add.w	r5, r5, r6, lsl #2
    17b2:	movw	r3, #514	; 0x202
    17b6:	ldr.w	r2, [sp, #2224]	; 0x8b0
    17ba:	add	r0, sp, #80	; 0x50
    17bc:	ldr	r1, [r5, #84]	; 0x54
    17be:	bl	8390 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    17c2:	add	r0, sp, #96	; 0x60
    17c4:	bl	e38 <FsBaseFile::isOpen() const>
    17c8:	mov	r4, r0
    17ca:	cbnz	r0, 17e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    17cc:	add	r0, sp, #16
    17ce:	bl	815c <FsBaseFile::close()>
    17d2:	mov.w	r0, #672	; 0x2a0
    17d6:	bl	cc4 <dbgPrint(unsigned short)>
}
    17da:	add	r0, sp, #80	; 0x50
    17dc:	bl	ed0 <FsFile::~FsFile()>
    17e0:	b.n	17a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    17e2:	mov.w	r5, #4294967295
    return BaseFile::available();
    17e6:	add	r0, sp, #16
    17e8:	bl	dc6 <FsBaseFile::available() const>
  while(f1.available()>0)
    17ec:	cmp	r0, #0
    17ee:	ble.n	1810 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    17f0:	mov.w	r2, #2048	; 0x800
    17f4:	add	r1, sp, #160	; 0xa0
    17f6:	add	r0, sp, #16
    17f8:	bl	e6c <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    17fc:	subs	r5, r0, #0
    17fe:	blt.n	1810 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    1800:	mov	r2, r5
    1802:	add	r1, sp, #160	; 0xa0
    1804:	add	r0, sp, #96	; 0x60
    1806:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    180a:	cmp.w	r5, #2048	; 0x800
    180e:	bge.n	17e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    1810:	add	r0, sp, #16
    1812:	bl	815c <FsBaseFile::close()>
  f2.close();
    1816:	add	r0, sp, #96	; 0x60
    1818:	bl	815c <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    181c:	cmp	r5, #0
    181e:	bge.n	17da <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    1820:	mov.w	r0, #684	; 0x2ac
    1824:	movs	r4, #0
    1826:	bl	cc4 <dbgPrint(unsigned short)>
    182a:	b.n	17da <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

0000182c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    182c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1830:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1834:	cmp.w	r3, #4294967295
    1838:	ite	ne
    183a:	movne	r8, r3
    183c:	moveq	r8, r2
  { 
    183e:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1840:	mov	r2, r1
  { 
    1842:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1844:	mov	r1, r0
    1846:	add	r0, sp, #520	; 0x208
    1848:	add	r6, sp, #536	; 0x218
    184a:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    184e:	mov	r2, r8
    1850:	mov	r1, r4
    1852:	add	r0, sp, #792	; 0x318
    1854:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1858:	ldrb.w	r5, [sp, #532]	; 0x214
    185c:	cbz	r5, 18a2 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    185e:	ldrh.w	r1, [sp, #534]	; 0x216
    1862:	mov	r2, r7
    1864:	mov	r0, r4
    1866:	adds	r1, #1
    1868:	bl	146e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    186c:	ldrb.w	r3, [sp, #532]	; 0x214
    1870:	ldr	r2, [r4, #0]
    1872:	mov	r0, r4
    1874:	subs	r3, #0
    1876:	str	r6, [sp, #0]
    1878:	ldrh.w	r1, [sp, #806]	; 0x326
    187c:	ldr	r5, [r2, #44]	; 0x2c
    187e:	it	ne
    1880:	movne	r3, #1
    1882:	mov	r2, r8
    1884:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    1886:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1888:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    188a:	ldrh.w	r2, [sp, #806]	; 0x326
    188e:	ldr	r6, [r3, #84]	; 0x54
    1890:	mov	r1, r7
    1892:	mov	r3, r0
    1894:	mov	r0, r4
    1896:	blx	r6
  }
    1898:	mov	r0, r5
    189a:	add.w	sp, sp, #1336	; 0x538
    189e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    18a2:	mov.w	r2, #256	; 0x100
    18a6:	mov	r1, r6
    18a8:	add.w	r0, sp, #1080	; 0x438
    18ac:	bl	e5c8 <strlcpy>
      r.store = p2.store;
    18b0:	ldrh.w	r3, [sp, #806]	; 0x326
      newHandle = p2.child = AppendIndexRecord(r);
    18b4:	add.w	r1, sp, #1064	; 0x428
    18b8:	mov	r0, r4
      r.store = p2.store;
    18ba:	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    18be:	ldr	r3, [sp, #796]	; 0x31c
      r.child = 0;
    18c0:	str.w	r5, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
    18c4:	str.w	r3, [sp, #1072]	; 0x430
      r.isdir = 0;
    18c8:	strh.w	r5, [sp, #1076]	; 0x434
      r.parent = newParent;
    18cc:	str.w	r8, [sp, #1064]	; 0x428
      newHandle = p2.child = AppendIndexRecord(r);
    18d0:	bl	109a <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    18d4:	add	r2, sp, #792	; 0x318
      newHandle = p2.child = AppendIndexRecord(r);
    18d6:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    18d8:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    18da:	str	r0, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    18dc:	mov	r0, r4
    18de:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    18e2:	add	r2, sp, #8
    18e4:	mov	r1, r7
    18e6:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    18ea:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    18ec:	mov	r0, r4
    18ee:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    18f2:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    18f4:	mov	r2, r7
    18f6:	mov	r1, r5
    18f8:	mov.w	r3, #256	; 0x100
    18fc:	mov	r0, r4
    18fe:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1902:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1904:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1906:	mov	r1, r6
    1908:	adds	r0, r4, #4
    190a:	str	r7, [sp, #0]
    190c:	bl	1776 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1910:	b.n	1898 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001912 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1912:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1916:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    191a:	cmp.w	r3, #4294967295
    191e:	ite	ne
    1920:	movne	r7, r3
    1922:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1924:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1926:	mov	r2, r1
    1928:	mov	r1, r0
    192a:	add	r0, sp, #520	; 0x208
    192c:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1930:	mov	r2, r7
    1932:	mov	r1, r4
    1934:	add	r0, sp, #792	; 0x318
  Record p1=ReadIndexRecord(handle);
    1936:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    193a:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    193c:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1940:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1942:	cbnz	r6, 195a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1944:	mov	r0, r4
    1946:	add	r2, sp, #792	; 0x318
    1948:	mov	r1, r7
  p2.child=iy;
    194a:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    194c:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1950:	movs	r0, #1
    1952:	addw	sp, sp, #1612	; 0x64c
    1956:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    195a:	mov	r2, r6
    195c:	mov	r1, r4
    195e:	add.w	r0, sp, #1064	; 0x428
    1962:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1966:	mov.w	r2, #272	; 0x110
    196a:	add.w	r1, sp, #1064	; 0x428
    196e:	add.w	r0, sp, #1336	; 0x538
    1972:	bl	9c60 <memcpy>
    py.store = p2.store;
    1976:	ldrh.w	r3, [sp, #806]	; 0x326
    iy = AppendIndexRecord(py);
    197a:	add.w	r1, sp, #1336	; 0x538
    197e:	mov	r0, r4
    py.store = p2.store;
    1980:	strh.w	r3, [sp, #1350]	; 0x546
    py.sibling = iy;
    1984:	str.w	r5, [sp, #1344]	; 0x540
    py.parent = newHandle;
    1988:	str.w	r7, [sp, #1336]	; 0x538
    iy = AppendIndexRecord(py);
    198c:	bl	109a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1990:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1992:	mov.w	r3, #256	; 0x100
    1996:	add	r2, sp, #8
    1998:	mov	r1, r6
    199a:	mov	r0, r4
    199c:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    19a0:	add	r2, sp, #264	; 0x108
    19a2:	mov.w	r3, #256	; 0x100
    19a6:	mov	r1, r5
    19a8:	mov	r0, r4
    19aa:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    19ae:	ldrb.w	r1, [sp, #1348]	; 0x544
      sd_mkdir(py.store,newfilename);
    19b2:	adds	r0, r4, #4
    19b4:	ldrh.w	r3, [sp, #1350]	; 0x546
    if(py.isdir) 
    19b8:	add	r2, sp, #264	; 0x108
    19ba:	cbz	r1, 19e4 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    19bc:	mov	r1, r3
    19be:	bl	ee8 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    19c2:	mov	r2, r6
    19c4:	mov	r1, r8
    19c6:	mov	r0, r4
    19c8:	bl	146e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    19cc:	ldr	r3, [r4, #0]
    19ce:	ldrh.w	r2, [sp, #806]	; 0x326
    19d2:	mov	r1, r6
    19d4:	ldr.w	r9, [r3, #84]	; 0x54
    19d8:	mov	r0, r4
    19da:	mov	r3, r5
    19dc:	blx	r9
    ix = px.sibling;
    19de:	ldr.w	r6, [sp, #1072]	; 0x430
    19e2:	b.n	1942 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    19e4:	str	r2, [sp, #0]
    19e6:	mov	r1, r8
    19e8:	add	r2, sp, #8
    19ea:	bl	1776 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    19ee:	b.n	19de <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

000019f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    19f0:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    19f4:	ldr.w	r8, [sp, #32]
    19f8:	mov	r6, r1
    19fa:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    19fc:	mov	r1, r3
    19fe:	mov	r2, r8
    1a00:	str	r3, [sp, #4]
{ // old and new are directory paths
    1a02:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a04:	bl	ee8 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1a08:	ldr	r3, [sp, #4]
    1a0a:	mov	r4, r0
    1a0c:	cbz	r0, 1a22 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1a0e:	mov	r2, r7
    1a10:	mov	r1, r6
    1a12:	mov	r0, r5
    1a14:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1a18:	add	sp, #8
    1a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a1e:	b.w	1a34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a22:	movw	r0, #694	; 0x2b6
    1a26:	bl	cc4 <dbgPrint(unsigned short)>
}
    1a2a:	mov	r0, r4
    1a2c:	add	sp, #8
    1a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001a34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1a34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a38:	mov	r6, r1
    1a3a:	sub.w	sp, sp, #680	; 0x2a8
    1a3e:	add.w	r1, r0, r1, lsl #2
    1a42:	mov	r5, r0
    1a44:	mov	r8, r3
    1a46:	add	r0, sp, #8
    1a48:	movs	r3, #0
    1a4a:	ldr	r1, [r1, #84]	; 0x54
    1a4c:	mov	r7, r2
    1a4e:	bl	8390 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1a52:	add	r0, sp, #24
    1a54:	bl	e38 <FsBaseFile::isOpen() const>
    1a58:	mov	r4, r0
    1a5a:	cmp	r0, #0
    1a5c:	beq.n	1b12 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a5e:	ldr	r4, [pc, #264]	; (1b68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1a60:	mov.w	r2, #256	; 0x100
    1a64:	mov	r1, r7
    1a66:	add	r0, sp, #168	; 0xa8
    1a68:	bl	e5c8 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a6c:	add	r0, sp, #168	; 0xa8
    1a6e:	bl	ec80 <strlen>
    1a72:	add	r3, sp, #168	; 0xa8
    1a74:	add	r0, r3
    1a76:	ldrb.w	r3, [r0, #-1]
    1a7a:	cmp	r3, #47	; 0x2f
    1a7c:	beq.n	1a8a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1a7e:	mov.w	r2, #256	; 0x100
    1a82:	mov	r1, r4
    1a84:	add	r0, sp, #168	; 0xa8
    1a86:	bl	e560 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1a8a:	mov.w	r2, #256	; 0x100
    1a8e:	ldr	r1, [sp, #704]	; 0x2c0
    1a90:	add	r0, sp, #424	; 0x1a8
    1a92:	bl	e5c8 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1a96:	add	r0, sp, #424	; 0x1a8
    1a98:	bl	ec80 <strlen>
    1a9c:	add	r3, sp, #424	; 0x1a8
    1a9e:	add	r0, r3
    1aa0:	ldrb.w	r3, [r0, #-1]
    1aa4:	cmp	r3, #47	; 0x2f
    1aa6:	beq.n	1ab4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1aa8:	mov.w	r2, #256	; 0x100
    1aac:	mov	r1, r4
    1aae:	add	r0, sp, #424	; 0x1a8
    1ab0:	bl	e560 <strlcat>
    FsFile tmpFile;
    1ab4:	add	r0, sp, #88	; 0x58
    1ab6:	bl	eb4 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1aba:	movs	r2, #0
    1abc:	add	r1, sp, #24
    1abe:	add	r0, sp, #104	; 0x68
    1ac0:	bl	825c <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1ac4:	add	r0, sp, #104	; 0x68
    1ac6:	bl	e38 <FsBaseFile::isOpen() const>
    1aca:	cmp	r0, #0
    1acc:	beq.n	1b52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1ace:	mov.w	r2, #256	; 0x100
    1ad2:	add	r1, sp, #168	; 0xa8
    1ad4:	add	r0, sp, #104	; 0x68
    1ad6:	bl	c62 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1ada:	mov.w	r2, #256	; 0x100
    1ade:	add	r1, sp, #424	; 0x1a8
    1ae0:	add	r0, sp, #104	; 0x68
    1ae2:	bl	c62 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1ae6:	add	r0, sp, #104	; 0x68
    1ae8:	bl	e16 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1aec:	add	r3, sp, #424	; 0x1a8
    1aee:	add	r2, sp, #168	; 0xa8
    1af0:	mov	r1, r6
    1af2:	str	r3, [sp, #0]
    1af4:	mov	r3, r8
        if(f2.isDirectory())
    1af6:	cbz	r0, 1b2a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1af8:	mov	r0, r5
    1afa:	bl	19f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1afe:	cbnz	r0, 1b4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b00:	movw	r0, #717	; 0x2cd
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b04:	bl	cc4 <dbgPrint(unsigned short)>
    }
    1b08:	add	r0, sp, #88	; 0x58
    1b0a:	movs	r4, #0
    1b0c:	bl	ed0 <FsFile::~FsFile()>
    1b10:	b.n	1b1a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b12:	movw	r0, #697	; 0x2b9
    1b16:	bl	cc4 <dbgPrint(unsigned short)>
}
    1b1a:	add	r0, sp, #8
    1b1c:	bl	ed0 <FsFile::~FsFile()>
    1b20:	mov	r0, r4
    1b22:	add.w	sp, sp, #680	; 0x2a8
    1b26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b2a:	mov	r0, r5
    1b2c:	bl	1776 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b30:	cbnz	r0, 1b38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1b32:	movw	r0, #721	; 0x2d1
    1b36:	b.n	1b04 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b38:	add	r2, sp, #168	; 0xa8
    1b3a:	mov	r1, r6
    1b3c:	mov	r0, r5
    1b3e:	bl	f28 <mSD_Base::sd_remove(unsigned long, char const*)>
    1b42:	cbnz	r0, 1b4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b44:	movw	r0, #722	; 0x2d2
    1b48:	b.n	1b04 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1b4a:	add	r0, sp, #88	; 0x58
    1b4c:	bl	ed0 <FsFile::~FsFile()>
    1b50:	b.n	1a60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1b52:	add	r0, sp, #88	; 0x58
    1b54:	bl	ed0 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1b58:	mov	r2, r7
    1b5a:	mov	r1, r6
    1b5c:	mov	r0, r5
    1b5e:	bl	f8c <mSD_Base::sd_rmdir(unsigned long, char*)>
    1b62:	mov	r4, r0
    1b64:	b.n	1b1a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1b66:	nop
    1b68:	.word	0x20007bbb

00001b6c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1b6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b70:	subw	sp, sp, #2700	; 0xa8c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1b74:	cmp.w	r3, #4294967295
    1b78:	ite	ne
    1b7a:	movne	r7, r3
    1b7c:	moveq	r7, r2
  { 
    1b7e:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1b80:	mov	r2, r1
  { 
    1b82:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1b84:	mov	r1, r0
    1b86:	add	r0, sp, #792	; 0x318
    1b88:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1b8c:	mov	r2, r7
    1b8e:	mov	r1, r4
    1b90:	add.w	r0, sp, #1064	; 0x428
    1b94:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1b98:	ldr	r2, [sp, #792]	; 0x318
    1b9a:	mov	r1, r4
    1b9c:	add.w	r0, sp, #1336	; 0x538
    1ba0:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1ba4:	ldrb.w	r3, [sp, #804]	; 0x324
    1ba8:	cbz	r3, 1bc6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1baa:	ldrb.w	r3, [sp, #805]	; 0x325
    1bae:	cbnz	r3, 1bc6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1bb0:	mov	r2, r5
    1bb2:	ldrh.w	r1, [sp, #806]	; 0x326
    1bb6:	mov	r0, r4
    1bb8:	bl	146e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1bbc:	add	r2, sp, #792	; 0x318
    1bbe:	mov	r1, r5
    1bc0:	mov	r0, r4
    1bc2:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1bc6:	mov.w	r2, #272	; 0x110
    1bca:	add	r1, sp, #792	; 0x318
    1bcc:	add.w	r0, sp, #1608	; 0x648
    1bd0:	bl	9c60 <memcpy>
    Record p2o = p2;
    1bd4:	mov.w	r2, #272	; 0x110
    1bd8:	add.w	r1, sp, #1064	; 0x428
    1bdc:	add.w	r0, sp, #1880	; 0x758
    1be0:	bl	9c60 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1be4:	mov.w	r3, #256	; 0x100
    1be8:	add	r2, sp, #280	; 0x118
    1bea:	mov	r1, r5
    1bec:	mov	r0, r4
    1bee:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1bf2:	ldr.w	r8, [sp, #1340]	; 0x53c
    1bf6:	cmp	r8, r5
    1bf8:	bne.n	1c70 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1bfa:	ldr	r3, [sp, #800]	; 0x320
    uint32_t jx=-1;
    1bfc:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1c00:	add.w	r2, sp, #1336	; 0x538
    1c04:	ldr	r1, [sp, #792]	; 0x318
    1c06:	mov	r0, r4
        p3.child = p1.sibling;
    1c08:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    1c0c:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1c10:	ldrh.w	r3, [sp, #1078]	; 0x436
      WriteIndexRecord(handle, p1);
    1c14:	add	r2, sp, #792	; 0x318
    1c16:	mov	r1, r5
    1c18:	mov	r0, r4
      p1.store = p2.store;
    1c1a:	strh.w	r3, [sp, #806]	; 0x326
      p1.sibling = p2.child;
    1c1e:	ldr.w	r3, [sp, #1068]	; 0x42c
      p1.parent = newParent;
    1c22:	str	r7, [sp, #792]	; 0x318
      p1.sibling = p2.child;
    1c24:	str	r3, [sp, #800]	; 0x320
      p2.child = handle;
    1c26:	str.w	r5, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    1c2a:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1c2e:	add.w	r2, sp, #1064	; 0x428
    1c32:	mov	r1, r7
    1c34:	mov	r0, r4
    1c36:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1c3a:	mov.w	r3, #256	; 0x100
    1c3e:	mov	r1, r5
    1c40:	add	r2, sp, #536	; 0x218
    1c42:	mov	r0, r4
    1c44:	bl	1234 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1c48:	ldrh.w	r1, [sp, #1622]	; 0x656
    1c4c:	ldrh.w	r3, [sp, #1894]	; 0x766
    1c50:	cmp	r1, r3
    1c52:	bne.n	1d00 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1c54:	add.w	r3, r4, r1, lsl #2
    1c58:	add	r2, sp, #536	; 0x218
    1c5a:	add	r1, sp, #280	; 0x118
    1c5c:	ldr	r0, [r3, #88]	; 0x58
    1c5e:	bl	d66 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1c62:	cbz	r0, 1cd0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1c64:	movs	r6, #1
  }
    1c66:	mov	r0, r6
    1c68:	addw	sp, sp, #2700	; 0xa8c
    1c6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1c70:	mov	r2, r8
    1c72:	mov	r1, r4
    1c74:	add	r0, sp, #8
    1c76:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1c7a:	mov.w	r2, #272	; 0x110
    1c7e:	add	r1, sp, #8
    1c80:	addw	r0, sp, #2424	; 0x978
    1c84:	bl	9c60 <memcpy>
        pxo = px;
    1c88:	mov.w	r2, #272	; 0x110
    1c8c:	addw	r1, sp, #2424	; 0x978
    1c90:	addw	r0, sp, #2152	; 0x868
    1c94:	bl	9c60 <memcpy>
        while(handle != px.sibling)
    1c98:	ldr.w	r6, [sp, #2432]	; 0x980
    1c9c:	cmp	r6, r5
    1c9e:	bne.n	1cb4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1ca0:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
    1ca2:	addw	r2, sp, #2424	; 0x978
    1ca6:	mov	r1, r8
    1ca8:	mov	r0, r4
        px.sibling = p1.sibling;
    1caa:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    1cae:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1cb2:	b.n	1c10 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1cb4:	mov	r2, r6
    1cb6:	mov	r1, r4
    1cb8:	add	r0, sp, #8
    1cba:	mov	r8, r6
    1cbc:	bl	1118 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1cc0:	mov.w	r2, #272	; 0x110
    1cc4:	add	r1, sp, #8
    1cc6:	addw	r0, sp, #2424	; 0x978
    1cca:	bl	9c60 <memcpy>
          pxo = px;
    1cce:	b.n	1c88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1cd0:	movw	r0, #558	; 0x22e
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1cd4:	bl	cc4 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1cd8:	addw	r2, sp, #2152	; 0x868
    1cdc:	mov	r1, r8
    1cde:	mov	r0, r4
    1ce0:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1ce4:	add.w	r2, sp, #1608	; 0x648
    1ce8:	mov	r1, r5
    1cea:	mov	r0, r4
    1cec:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1cf0:	add.w	r2, sp, #1880	; 0x758
    1cf4:	mov	r1, r7
    1cf6:	mov	r0, r4
    return false;
    1cf8:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1cfa:	bl	106e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1cfe:	b.n	1c66 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1d00:	ldrb.w	r2, [sp, #1620]	; 0x654
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d04:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1d08:	cbnz	r2, 1d2e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d0a:	add	r2, sp, #536	; 0x218
    1d0c:	mov	r0, r9
    1d0e:	str	r2, [sp, #0]
    1d10:	add	r2, sp, #280	; 0x118
    1d12:	bl	1776 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1d16:	mov	r6, r0
    1d18:	cbz	r0, 1d28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1d1a:	add	r2, sp, #280	; 0x118
    1d1c:	ldrh.w	r1, [sp, #1894]	; 0x766
    1d20:	mov	r0, r9
    1d22:	bl	f28 <mSD_Base::sd_remove(unsigned long, char const*)>
    1d26:	b.n	1c66 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1d28:	movw	r0, #562	; 0x232
    1d2c:	b.n	1cd4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d2e:	add	r2, sp, #536	; 0x218
    1d30:	mov	r0, r9
    1d32:	str	r2, [sp, #0]
    1d34:	add	r2, sp, #280	; 0x118
    1d36:	bl	19f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1d3a:	cmp	r0, #0
    1d3c:	bne.n	1c64 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1d3e:	movw	r0, #566	; 0x236
    1d42:	b.n	1cd4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001d44 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1d44:	push	{r4, r5, r6, lr}
    1d46:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1d4a:	ldr	r4, [pc, #60]	; (1d88 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1d4c:	ldr	r0, [r5, #88]	; 0x58
    1d4e:	bl	d32 <FsVolume::clusterCount() const>
    1d52:	mov	r1, r0
    1d54:	mov	r0, r4
    1d56:	bl	c88 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1d5a:	ldr	r0, [r5, #88]	; 0x58
    1d5c:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d60:	mov	r1, r0
    1d62:	mov	r0, r4
    1d64:	bl	c88 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1d68:	ldr	r6, [r5, #88]	; 0x58
    1d6a:	mov	r0, r6
    1d6c:	bl	d32 <FsVolume::clusterCount() const>
    1d70:	mov	r4, r0
    1d72:	mov	r0, r6
    1d74:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d78:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1d7a:	ldr	r0, [r5, #88]	; 0x58
    1d7c:	bl	d14 <FsVolume::bytesPerCluster() const>
    1d80:	umull	r0, r1, r4, r0
    1d84:	pop	{r4, r5, r6, pc}
    1d86:	nop
    1d88:	.word	0x200089a4

00001d8c <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1d8c:	push	{r4, lr}
    1d8e:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1d90:	bl	c11a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1d94:	mov	r0, r4
    1d96:	ldmia.w	sp!, {r4, lr}
    1d9a:	b.w	c12c <Print::println()>

00001d9e <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1d9e:	push	{r4, lr}
    1da0:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1da2:	movs	r3, #0
    1da4:	movs	r2, #10
    1da6:	bl	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1daa:	mov	r0, r4
    1dac:	ldmia.w	sp!, {r4, lr}
    1db0:	b.w	c12c <Print::println()>

00001db4 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1db4:	push	{r0, r1, r4, lr}
    1db6:	mov	r4, r0
    1db8:	cbz	r1, 1dd4 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1dba:	mov	r0, r1
    1dbc:	str	r1, [sp, #4]
    1dbe:	bl	ec80 <strlen>
    1dc2:	ldr	r3, [r4, #0]
    1dc4:	mov	r2, r0
    1dc6:	ldr	r1, [sp, #4]
    1dc8:	ldr	r3, [r3, #4]
    1dca:	mov	r0, r4
    1dcc:	add	sp, #8
    1dce:	ldmia.w	sp!, {r4, lr}
    1dd2:	bx	r3
    1dd4:	add	sp, #8
    1dd6:	pop	{r4, pc}

00001dd8 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1dd8:	b.w	1db4 <Print::write(char const*) [clone .isra.0]>

00001ddc <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1ddc:	push	{r4, lr}
    1dde:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1de0:	bl	1db4 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1de4:	mov	r0, r4
    1de6:	ldmia.w	sp!, {r4, lr}
    1dea:	b.w	c12c <Print::println()>
	...

00001df0 <menuGetLine()>:
#include "Menu.h"
#include "RTC.h"
#include "Acq.h"

static char * menuGetLine(void)
{
    1df0:	push	{r4, lr}
        virtual int available() { return usb_serial_available(); }
    1df2:	bl	a148 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1df6:	cmp	r0, #0
    1df8:	beq.n	1df2 <menuGetLine()+0x2>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1dfa:	ldr	r4, [pc, #28]	; (1e18 <menuGetLine()+0x28>)
    1dfc:	movs	r3, #40	; 0x28
    1dfe:	movs	r1, #13
    1e00:	ldr	r0, [pc, #24]	; (1e1c <menuGetLine()+0x2c>)
    1e02:	mov	r2, r4
    1e04:	bl	c074 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1e08:	movs	r3, #0
  Serial.println(buffer);
    1e0a:	mov	r1, r4
  buffer[count]=0;
    1e0c:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1e0e:	ldr	r0, [pc, #12]	; (1e1c <menuGetLine()+0x2c>)
    1e10:	bl	1ddc <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1e14:	mov	r0, r4
    1e16:	pop	{r4, pc}
    1e18:	.word	0x20028158
    1e1c:	.word	0x200089a4

00001e20 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1e20:	push	{r0, r1, r4, lr}
    1e22:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e24:	bl	1df0 <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1e28:	add	r2, sp, #4
    1e2a:	ldr	r1, [pc, #12]	; (1e38 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1e2c:	bl	e254 <sscanf>
    1e30:	ldr	r3, [sp, #4]
    1e32:	str	r3, [r4, #0]
  return 1;
}
    1e34:	add	sp, #8
    1e36:	pop	{r4, pc}
    1e38:	.word	0x20007f9a

00001e3c <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1e3c:	push	{r0, r1, r4, lr}
    1e3e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e40:	bl	1df0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1e44:	add	r2, sp, #4
    1e46:	ldr	r1, [pc, #12]	; (1e54 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1e48:	bl	e254 <sscanf>
    1e4c:	ldr	r3, [sp, #4]
    1e4e:	strh	r3, [r4, #0]
}
    1e50:	add	sp, #8
    1e52:	pop	{r4, pc}
    1e54:	.word	0x20007f9a

00001e58 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1e58:	push	{r4, lr}
    1e5a:	sub	sp, #32
    1e5c:	bl	a148 <usb_serial_available>

    while(!Serial.available()) ;
    1e60:	cmp	r0, #0
    1e62:	beq.n	1e5c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1e64:	bl	a1bc <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1e68:	uxtb	r0, r0
    if(ch=='d') // set date
    1e6a:	cmp	r0, #100	; 0x64
    1e6c:	bne.n	1e9a <menu3()+0x42>
{ char *buffer=menuGetLine();
    1e6e:	bl	1df0 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1e72:	add	r3, sp, #28
    1e74:	add	r2, sp, #20
    1e76:	ldr	r1, [pc, #308]	; (1fac <menu3()+0x154>)
    1e78:	str	r3, [sp, #8]
    1e7a:	add.w	r3, sp, #19
    1e7e:	str	r3, [sp, #4]
    1e80:	add	r3, sp, #24
    1e82:	str	r3, [sp, #0]
    1e84:	add.w	r3, sp, #18
    1e88:	bl	e254 <sscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1e8c:	ldr	r0, [sp, #20]
    1e8e:	ldrd	r1, r2, [sp, #24]
    1e92:	bl	3768 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1e96:	add	sp, #32
    1e98:	pop	{r4, pc}
    else if(ch=='t') // set time
    1e9a:	cmp	r0, #52	; 0x34
    1e9c:	bhi.n	1eb0 <menu3()+0x58>
    1e9e:	cmp	r0, #48	; 0x30
    1ea0:	bls.n	1e96 <menu3()+0x3e>
    1ea2:	subs	r0, #50	; 0x32
    1ea4:	cmp	r0, #2
    1ea6:	bhi.n	1f9c <menu3()+0x144>
    1ea8:	tbb	[pc, r0]
    1eac:	.short	0x7c7a
    1eae:	.byte	0x7e
    1eaf:	.byte	0x00
    1eb0:	subs	r0, #97	; 0x61
    1eb2:	uxtb	r3, r0
    1eb4:	cmp	r3, #22
    1eb6:	bhi.n	1e96 <menu3()+0x3e>
    1eb8:	cmp	r0, #22
    1eba:	bhi.n	1e96 <menu3()+0x3e>
    1ebc:	add	r3, pc, #4	; (adr r3, 1ec4 <menu3()+0x6c>)
    1ebe:	ldr.w	pc, [r3, r0, lsl #2]
    1ec2:	nop
    1ec4:	.word	0x00001f4b
    1ec8:	.word	0x00001e97
    1ecc:	.word	0x00001f87
    1ed0:	.word	0x00001e97
    1ed4:	.word	0x00001e97
    1ed8:	.word	0x00001f5f
    1edc:	.word	0x00001f93
    1ee0:	.word	0x00001e97
    1ee4:	.word	0x00001e97
    1ee8:	.word	0x00001e97
    1eec:	.word	0x00001e97
    1ef0:	.word	0x00001e97
    1ef4:	.word	0x00001e97
    1ef8:	.word	0x00001e97
    1efc:	.word	0x00001f57
    1f00:	.word	0x00001e97
    1f04:	.word	0x00001e97
    1f08:	.word	0x00001f5b
    1f0c:	.word	0x00001f73
    1f10:	.word	0x00001f21
    1f14:	.word	0x00001e97
    1f18:	.word	0x00001e97
    1f1c:	.word	0x00001f97
{ char *buffer=menuGetLine();
    1f20:	bl	1df0 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f24:	add	r3, sp, #28
    1f26:	add	r2, sp, #20
    1f28:	ldr	r1, [pc, #128]	; (1fac <menu3()+0x154>)
    1f2a:	str	r3, [sp, #8]
    1f2c:	add.w	r3, sp, #19
    1f30:	str	r3, [sp, #4]
    1f32:	add	r3, sp, #24
    1f34:	str	r3, [sp, #0]
    1f36:	add.w	r3, sp, #18
    1f3a:	bl	e254 <sscanf>
      rtcSetTime(hour,minutes,seconds);
    1f3e:	ldr	r0, [sp, #20]
    1f40:	ldrd	r1, r2, [sp, #24]
    1f44:	bl	378c <rtcSetTime(int, int, int)>
    1f48:	b.n	1e96 <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    1f4a:	ldr	r0, [pc, #100]	; (1fb0 <menu3()+0x158>)
}
    1f4c:	add	sp, #32
    1f4e:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    1f52:	b.w	1e20 <menuGetInt32(long*) [clone .isra.0]>
    1f56:	ldr	r0, [pc, #92]	; (1fb4 <menu3()+0x15c>)
    1f58:	b.n	1f4c <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    1f5a:	ldr	r0, [pc, #92]	; (1fb8 <menu3()+0x160>)
    1f5c:	b.n	1f4c <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    1f5e:	ldr	r4, [pc, #92]	; (1fbc <menu3()+0x164>)
    1f60:	mov	r0, r4
    1f62:	bl	1e20 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1f66:	ldr	r0, [r4, #0]
}
    1f68:	add	sp, #32
    1f6a:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1f6e:	b.w	bec <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    1f72:	ldr	r4, [pc, #76]	; (1fc0 <menu3()+0x168>)
    1f74:	mov	r0, r4
    1f76:	bl	1e3c <menuGetInt16(short*) [clone .isra.0]>
    1f7a:	ldrh	r3, [r4, #0]
    1f7c:	lsls	r3, r3, #16
    1f7e:	bpl.n	1e96 <menu3()+0x3e>
    1f80:	movs	r3, #0
    1f82:	strh	r3, [r4, #0]
    1f84:	b.n	1e96 <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    1f86:	ldr	r0, [pc, #60]	; (1fc4 <menu3()+0x16c>)
}
    1f88:	add	sp, #32
    1f8a:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    1f8e:	b.w	1e3c <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    1f92:	ldr	r0, [pc, #52]	; (1fc8 <menu3()+0x170>)
    1f94:	b.n	1f88 <menu3()+0x130>
      menuGetInt16((int16_t *)params0);
    1f96:	ldr	r3, [pc, #52]	; (1fcc <menu3()+0x174>)
    1f98:	ldr	r0, [r3, #0]
    1f9a:	b.n	1f88 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    1f9c:	ldr	r0, [pc, #48]	; (1fd0 <menu3()+0x178>)
    1f9e:	b.n	1f88 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    1fa0:	ldr	r0, [pc, #48]	; (1fd4 <menu3()+0x17c>)
    1fa2:	b.n	1f88 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    1fa4:	ldr	r0, [pc, #48]	; (1fd8 <menu3()+0x180>)
    1fa6:	b.n	1f88 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    1fa8:	ldr	r0, [pc, #48]	; (1fdc <menu3()+0x184>)
    1faa:	b.n	1f88 <menu3()+0x130>
    1fac:	.word	0x20007e00
    1fb0:	.word	0x20009330
    1fb4:	.word	0x20009334
    1fb8:	.word	0x20009338
    1fbc:	.word	0x20009310
    1fc0:	.word	0x20009342
    1fc4:	.word	0x20027f96
    1fc8:	.word	0x20009340
    1fcc:	.word	0x20009314
    1fd0:	.word	0x20027f48
    1fd4:	.word	0x20009324
    1fd8:	.word	0x20009328
    1fdc:	.word	0x2000932c

00001fe0 <storeConfig(unsigned short*, int)>:
static uint16_t store[16] = {0};
volatile uint16_t *params0= &store[0];

void storeConfig(uint16_t *store, int ns)
{ 
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    1fe0:	lsls	r2, r1, #1
    1fe2:	movs	r1, #0
    1fe4:	b.w	b7bc <eeprom_write_block>

00001fe8 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    1fe8:	lsls	r2, r1, #1
    1fea:	movs	r1, #0
    1fec:	b.w	b50c <eeprom_read_block>

00001ff0 <saveParameters()>:
}

void saveParameters(void)
{
  store[0]  = *params0;
    1ff0:	ldr	r3, [pc, #104]	; (205c <saveParameters()+0x6c>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    1ff2:	mov.w	r2, #1000	; 0x3e8
  store[0]  = *params0;
    1ff6:	ldr	r0, [pc, #104]	; (2060 <saveParameters()+0x70>)
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
  store[15] = 0;

  storeConfig(store, 16);
    1ff8:	movs	r1, #16
  store[0]  = *params0;
    1ffa:	ldr	r3, [r3, #0]
    1ffc:	ldrh	r3, [r3, #0]
    1ffe:	strh	r3, [r0, #0]
  store[1]  = t_acq;
    2000:	ldr	r3, [pc, #96]	; (2064 <saveParameters()+0x74>)
    2002:	ldr	r3, [r3, #0]
    2004:	strh	r3, [r0, #2]
  store[2]  = t_on;
    2006:	ldr	r3, [pc, #96]	; (2068 <saveParameters()+0x78>)
    2008:	ldr	r3, [r3, #0]
    200a:	strh	r3, [r0, #4]
  store[3]  = t_off;
    200c:	ldr	r3, [pc, #92]	; (206c <saveParameters()+0x7c>)
    200e:	ldr	r3, [r3, #0]
    2010:	strh	r3, [r0, #6]
  store[4]  = t_rep;
    2012:	ldr	r3, [pc, #92]	; (2070 <saveParameters()+0x80>)
    2014:	ldr	r3, [r3, #0]
    2016:	strh	r3, [r0, #8]
  store[5]  = proc;
    2018:	ldr	r3, [pc, #88]	; (2074 <saveParameters()+0x84>)
    201a:	ldrh	r3, [r3, #0]
    201c:	strh	r3, [r0, #10]
  store[6]  = shift;
    201e:	ldr	r3, [pc, #88]	; (2078 <saveParameters()+0x88>)
    2020:	ldrh	r3, [r3, #0]
    2022:	strh	r3, [r0, #12]
  store[7]  = t_1;
    2024:	ldr	r3, [pc, #84]	; (207c <saveParameters()+0x8c>)
    2026:	ldr	r3, [r3, #0]
    2028:	strh	r3, [r0, #14]
  store[8]  = t_2;
    202a:	ldr	r3, [pc, #84]	; (2080 <saveParameters()+0x90>)
    202c:	ldr	r3, [r3, #0]
    202e:	strh	r3, [r0, #16]
  store[9]  = t_3;
    2030:	ldr	r3, [pc, #80]	; (2084 <saveParameters()+0x94>)
    2032:	ldr	r3, [r3, #0]
    2034:	strh	r3, [r0, #18]
  store[10] = t_4;
    2036:	ldr	r3, [pc, #80]	; (2088 <saveParameters()+0x98>)
    2038:	ldr	r3, [r3, #0]
    203a:	strh	r3, [r0, #20]
  store[11] = fsamp/1000;
    203c:	ldr	r3, [pc, #76]	; (208c <saveParameters()+0x9c>)
    203e:	ldr	r3, [r3, #0]
    2040:	sdiv	r3, r3, r2
    2044:	strh	r3, [r0, #22]
  store[12] = again;
    2046:	ldr	r3, [pc, #72]	; (2090 <saveParameters()+0xa0>)
    2048:	ldrh	r3, [r3, #0]
    204a:	strh	r3, [r0, #24]
  store[13] = dgain;
    204c:	ldr	r3, [pc, #68]	; (2094 <saveParameters()+0xa4>)
    204e:	ldrh	r3, [r3, #0]
    2050:	strh	r3, [r0, #26]
  store[14] = 0;
    2052:	movs	r3, #0
    2054:	strh	r3, [r0, #28]
  store[15] = 0;
    2056:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    2058:	b.w	1fe0 <storeConfig(unsigned short*, int)>
    205c:	.word	0x20009314
    2060:	.word	0x20027f6c
    2064:	.word	0x20009330
    2068:	.word	0x20009334
    206c:	.word	0x20027f4c
    2070:	.word	0x20009338
    2074:	.word	0x20027f96
    2078:	.word	0x20009342
    207c:	.word	0x20027f48
    2080:	.word	0x20009324
    2084:	.word	0x20009328
    2088:	.word	0x2000932c
    208c:	.word	0x20009310
    2090:	.word	0x20009340
    2094:	.word	0x20027f90

00002098 <menu1(short)>:
{   // have ':'
    2098:	push	{r4, lr}
    209a:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    209c:	bl	a148 <usb_serial_available>
    while(!Serial.available()) ;
    20a0:	cmp	r0, #0
    20a2:	beq.n	209c <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    20a4:	bl	a1bc <usb_serial_getchar>
    ch=Serial.read();
    20a8:	uxtb	r3, r0
    if(ch=='w') 
    20aa:	cmp	r3, #119	; 0x77
    20ac:	bne.n	20be <menu1(short)+0x26>
    { Serial.println("Save parameters");
    20ae:	ldr	r1, [pc, #28]	; (20cc <menu1(short)+0x34>)
    20b0:	ldr	r0, [pc, #28]	; (20d0 <menu1(short)+0x38>)
    20b2:	bl	1ddc <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    20b6:	bl	1ff0 <saveParameters()>
}
    20ba:	mov	r0, r4
    20bc:	pop	{r4, pc}
    else if(ch=='m') 
    20be:	cmp	r3, #109	; 0x6d
    20c0:	bne.n	20ba <menu1(short)+0x22>
    { menuGetInt16((int16_t *)&monitor);
    20c2:	ldr	r0, [pc, #16]	; (20d4 <menu1(short)+0x3c>)
    20c4:	bl	1e3c <menuGetInt16(short*) [clone .isra.0]>
    20c8:	b.n	20ba <menu1(short)+0x22>
    20ca:	nop
    20cc:	.word	0x20007cbb
    20d0:	.word	0x200089a4
    20d4:	.word	0x20027f94

000020d8 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    20d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    20dc:	ldr	r4, [pc, #236]	; (21cc <loadParameters()+0xf4>)
    20de:	movs	r1, #16
    20e0:	ldr.w	sl, [pc, #276]	; 21f8 <loadParameters()+0x120>
    20e4:	mov	r0, r4
    20e6:	ldr.w	r8, [pc, #276]	; 21fc <loadParameters()+0x124>
    20ea:	bl	1fe8 <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    20ee:	ldrh	r3, [r4, #0]
    20f0:	ldr.w	lr, [pc, #268]	; 2200 <loadParameters()+0x128>
    20f4:	cmp	r3, #1
    20f6:	ldr	r7, [pc, #216]	; (21d0 <loadParameters()+0xf8>)
    20f8:	ldr.w	ip, [pc, #264]	; 2204 <loadParameters()+0x12c>
    20fc:	ldr	r2, [pc, #212]	; (21d4 <loadParameters()+0xfc>)
    20fe:	ldr	r6, [pc, #216]	; (21d8 <loadParameters()+0x100>)
    2100:	ldr	r5, [pc, #216]	; (21dc <loadParameters()+0x104>)
    2102:	ldr	r0, [pc, #220]	; (21e0 <loadParameters()+0x108>)
    2104:	ldr	r1, [pc, #220]	; (21e4 <loadParameters()+0x10c>)
    2106:	bne.n	2162 <loadParameters()+0x8a>
  {
    t_acq   = store[1];
    2108:	ldrh	r3, [r4, #2]
    t_on    = store[2];
    210a:	ldrh.w	r9, [r4, #4]
    t_acq   = store[1];
    210e:	str.w	r3, [sl]
    t_on    = store[2];
    2112:	ldr	r3, [pc, #212]	; (21e8 <loadParameters()+0x110>)
    2114:	str.w	r9, [r3]
    t_off   = store[3];
    2118:	ldrh	r3, [r4, #6]
    211a:	str.w	r3, [lr]
    t_rep   = store[4];
    211e:	ldrh	r3, [r4, #8]
    2120:	str.w	r3, [r8]
    proc    = store[5];
    2124:	ldrsh.w	r3, [r4, #10]
    2128:	strh	r3, [r7, #0]
    shift   = store[6];
    212a:	ldrsh.w	r3, [r4, #12]
    212e:	strh.w	r3, [ip]
    t_1     = store[7];
    2132:	ldrh	r3, [r4, #14]
    2134:	str	r3, [r2, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    2136:	mov.w	r2, #1000	; 0x3e8
    t_2     = store[8];
    213a:	ldrh	r3, [r4, #16]
    213c:	str	r3, [r6, #0]
    t_3     = store[9];
    213e:	ldrh	r3, [r4, #18]
    2140:	str	r3, [r5, #0]
    t_4     = store[10];
    2142:	ldrh	r3, [r4, #20]
    2144:	str	r3, [r0, #0]
    fsamp   = store[11]*1000;
    2146:	ldrh	r3, [r4, #22]
    2148:	muls	r3, r2
    again   = store[12];
    214a:	ldrsh.w	r2, [r4, #24]
    fsamp   = store[11]*1000;
    214e:	str	r3, [r1, #0]
    again   = store[12];
    2150:	ldr	r3, [pc, #152]	; (21ec <loadParameters()+0x114>)
    2152:	strh	r2, [r3, #0]
    dgain   = store[13];
    2154:	ldrsh.w	r2, [r4, #26]
    2158:	ldr	r3, [pc, #148]	; (21f0 <loadParameters()+0x118>)
    215a:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    215c:	ldr	r0, [pc, #108]	; (21cc <loadParameters()+0xf4>)
    215e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[0]  = *params0 = 0;
    2162:	ldr	r3, [pc, #144]	; (21f4 <loadParameters()+0x11c>)
    2164:	ldr.w	r9, [r3]
    2168:	movs	r3, #0
    216a:	strh.w	r3, [r9]
    store[1]  = t_acq    = T_ACQ;
    216e:	mov.w	r9, #60	; 0x3c
    store[0]  = *params0 = 0;
    2172:	strh	r3, [r4, #0]
    store[1]  = t_acq    = T_ACQ;
    2174:	str.w	r9, [sl]
    store[3]  = t_off    = T_OFF;
    2178:	str.w	r3, [lr]
    store[4]  = t_rep    = T_REP;
    217c:	mov.w	lr, #900	; 0x384
    store[1]  = t_acq    = T_ACQ;
    2180:	strh.w	r9, [r4, #2]
    store[4]  = t_rep    = T_REP;
    2184:	str.w	lr, [r8]
    store[5]  = proc     = PROC_MODE;
    2188:	strh	r3, [r7, #0]
    store[6]  = shift    = SHIFT;
    218a:	movs	r7, #8
    store[3]  = t_off    = T_OFF;
    218c:	strh	r3, [r4, #6]
    store[6]  = shift    = SHIFT;
    218e:	strh.w	r7, [ip]
    store[7]  = t_1      = T_1;
    2192:	str	r3, [r2, #0]
    store[8]  = t_2      = T_2;
    2194:	movs	r2, #12
    store[4]  = t_rep    = T_REP;
    2196:	strh.w	lr, [r4, #8]
    store[8]  = t_2      = T_2;
    219a:	str	r2, [r6, #0]
    219c:	strh	r2, [r4, #16]
    store[9]  = t_3      = T_3;
    219e:	str	r2, [r5, #0]
    21a0:	strh	r2, [r4, #18]
    store[10] = t_4      = T_4;
    21a2:	movs	r2, #24
    store[5]  = proc     = PROC_MODE;
    21a4:	strh	r3, [r4, #10]
    store[10] = t_4      = T_4;
    21a6:	str	r2, [r0, #0]
    21a8:	strh	r2, [r4, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    21aa:	movw	r2, #48000	; 0xbb80
    store[6]  = shift    = SHIFT;
    21ae:	strh	r7, [r4, #12]
    store[11] = (fsamp   = FSAMP)/1000; 
    21b0:	str	r2, [r1, #0]
    21b2:	movs	r2, #48	; 0x30
    store[12] = again    = AGAIN;
    21b4:	ldr	r1, [pc, #52]	; (21ec <loadParameters()+0x114>)
    store[11] = (fsamp   = FSAMP)/1000; 
    21b6:	strh	r2, [r4, #22]
    store[12] = again    = AGAIN;
    21b8:	movs	r2, #10
    store[7]  = t_1      = T_1;
    21ba:	strh	r3, [r4, #14]
    store[12] = again    = AGAIN;
    21bc:	strh	r2, [r1, #0]
    21be:	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    21c0:	ldr	r2, [pc, #44]	; (21f0 <loadParameters()+0x118>)
    21c2:	strh	r3, [r4, #26]
    21c4:	strh	r3, [r2, #0]
    store[14] = 0;
    21c6:	strh	r3, [r4, #28]
    store[15] = 0; 
    21c8:	strh	r3, [r4, #30]
    21ca:	b.n	215c <loadParameters()+0x84>
    21cc:	.word	0x20027f6c
    21d0:	.word	0x20027f96
    21d4:	.word	0x20027f48
    21d8:	.word	0x20009324
    21dc:	.word	0x20009328
    21e0:	.word	0x2000932c
    21e4:	.word	0x20009310
    21e8:	.word	0x20009334
    21ec:	.word	0x20009340
    21f0:	.word	0x20027f90
    21f4:	.word	0x20009314
    21f8:	.word	0x20009330
    21fc:	.word	0x20009338
    2200:	.word	0x20027f4c
    2204:	.word	0x20009342

00002208 <menu2()>:
{   // have '?'
    2208:	push	{r4, lr}
    220a:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    220c:	bl	a148 <usb_serial_available>
    while(!Serial.available()) ;
    2210:	cmp	r0, #0
    2212:	beq.n	220c <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2214:	bl	a1bc <usb_serial_getchar>
    ch=Serial.read();
    2218:	uxtb	r0, r0
    if(ch=='p') // get parameters
    221a:	cmp	r0, #112	; 0x70
    221c:	bne.w	232e <menu2()+0x126>
      Serial.println();
    2220:	ldr	r0, [pc, #576]	; (2464 <menu2()+0x25c>)
    2222:	bl	c12c <Print::println()>
      Serial.println(version);
    2226:	ldr	r1, [pc, #576]	; (2468 <menu2()+0x260>)
    2228:	ldr	r0, [pc, #568]	; (2464 <menu2()+0x25c>)
    222a:	bl	1ddc <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    222e:	add	r0, sp, #24
    2230:	bl	3744 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now: %4d-%02d-%02d %02d:%02d:%02d %d\n",
    2234:	ldrsb.w	r3, [sp, #28]
    2238:	ldrsh.w	r2, [sp, #24]
    223c:	str	r3, [sp, #16]
    223e:	ldrsb.w	r3, [sp, #31]
    2242:	ldr	r1, [pc, #552]	; (246c <menu2()+0x264>)
    2244:	str	r3, [sp, #12]
    2246:	ldrsb.w	r3, [sp, #30]
    224a:	ldr	r0, [pc, #536]	; (2464 <menu2()+0x25c>)
    224c:	str	r3, [sp, #8]
    224e:	ldrsb.w	r3, [sp, #29]
    2252:	str	r3, [sp, #4]
    2254:	ldrsb.w	r3, [sp, #27]
    2258:	str	r3, [sp, #0]
    225a:	ldrsb.w	r3, [sp, #26]
    225e:	bl	c164 <Print::printf(char const*, ...)>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2262:	ldr	r1, [pc, #524]	; (2470 <menu2()+0x268>)
    2264:	ldr	r0, [pc, #508]	; (2464 <menu2()+0x25c>)
    2266:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    226a:	ldr	r3, [pc, #520]	; (2474 <menu2()+0x26c>)
    226c:	ldr	r0, [pc, #500]	; (2464 <menu2()+0x25c>)
    226e:	ldr	r1, [r3, #0]
    2270:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    2274:	ldr	r1, [pc, #512]	; (2478 <menu2()+0x270>)
    2276:	ldr	r0, [pc, #492]	; (2464 <menu2()+0x25c>)
    2278:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    227c:	ldr	r3, [pc, #508]	; (247c <menu2()+0x274>)
    227e:	ldr	r0, [pc, #484]	; (2464 <menu2()+0x25c>)
    2280:	ldr	r1, [r3, #0]
    2282:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    2286:	ldr	r1, [pc, #504]	; (2480 <menu2()+0x278>)
    2288:	ldr	r0, [pc, #472]	; (2464 <menu2()+0x25c>)
    228a:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    228e:	ldr	r3, [pc, #500]	; (2484 <menu2()+0x27c>)
    2290:	ldr	r0, [pc, #464]	; (2464 <menu2()+0x25c>)
    2292:	ldr	r1, [r3, #0]
    2294:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2298:	ldr	r1, [pc, #492]	; (2488 <menu2()+0x280>)
    229a:	ldr	r0, [pc, #456]	; (2464 <menu2()+0x25c>)
    229c:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    22a0:	ldr	r3, [pc, #488]	; (248c <menu2()+0x284>)
	size_t println(long n)				{ return print(n) + println(); }
    22a2:	ldr	r0, [pc, #448]	; (2464 <menu2()+0x25c>)
    22a4:	ldr	r1, [r3, #0]
    22a6:	bl	c11a <Print::print(long)>
    22aa:	ldr	r0, [pc, #440]	; (2464 <menu2()+0x25c>)
    22ac:	bl	c12c <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    22b0:	ldr	r1, [pc, #476]	; (2490 <menu2()+0x288>)
    22b2:	ldr	r0, [pc, #432]	; (2464 <menu2()+0x25c>)
    22b4:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    22b8:	ldr	r3, [pc, #472]	; (2494 <menu2()+0x28c>)
    22ba:	ldr	r0, [pc, #424]	; (2464 <menu2()+0x25c>)
    22bc:	ldrh	r1, [r3, #0]
    22be:	sxth	r1, r1
    22c0:	bl	1d8c <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    22c4:	ldr	r1, [pc, #464]	; (2498 <menu2()+0x290>)
    22c6:	ldr	r0, [pc, #412]	; (2464 <menu2()+0x25c>)
    22c8:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    22cc:	ldr	r3, [pc, #460]	; (249c <menu2()+0x294>)
    22ce:	ldr	r0, [pc, #404]	; (2464 <menu2()+0x25c>)
    22d0:	ldrh	r1, [r3, #0]
    22d2:	sxth	r1, r1
    22d4:	bl	1d8c <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    22d8:	ldr	r1, [pc, #452]	; (24a0 <menu2()+0x298>)
    22da:	ldr	r0, [pc, #392]	; (2464 <menu2()+0x25c>)
    22dc:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    22e0:	ldr	r3, [pc, #448]	; (24a4 <menu2()+0x29c>)
    22e2:	ldr	r0, [pc, #384]	; (2464 <menu2()+0x25c>)
    22e4:	ldrh	r1, [r3, #0]
    22e6:	sxth	r1, r1
    22e8:	bl	1d8c <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    22ec:	ldr	r1, [pc, #440]	; (24a8 <menu2()+0x2a0>)
    22ee:	ldr	r0, [pc, #372]	; (2464 <menu2()+0x25c>)
    22f0:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    22f4:	ldr	r3, [pc, #436]	; (24ac <menu2()+0x2a4>)
    22f6:	ldr	r0, [pc, #364]	; (2464 <menu2()+0x25c>)
    22f8:	ldr	r1, [r3, #0]
    22fa:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    22fe:	ldr	r1, [pc, #432]	; (24b0 <menu2()+0x2a8>)
    2300:	ldr	r0, [pc, #352]	; (2464 <menu2()+0x25c>)
    2302:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    2306:	ldr	r3, [pc, #428]	; (24b4 <menu2()+0x2ac>)
    2308:	ldr	r0, [pc, #344]	; (2464 <menu2()+0x25c>)
    230a:	ldr	r1, [r3, #0]
    230c:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    2310:	ldr	r1, [pc, #420]	; (24b8 <menu2()+0x2b0>)
    2312:	ldr	r0, [pc, #336]	; (2464 <menu2()+0x25c>)
    2314:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    2318:	ldr	r3, [pc, #416]	; (24bc <menu2()+0x2b4>)
    231a:	ldr	r0, [pc, #328]	; (2464 <menu2()+0x25c>)
    231c:	ldr	r1, [r3, #0]
    231e:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    2322:	ldr	r1, [pc, #412]	; (24c0 <menu2()+0x2b8>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    2324:	ldr	r0, [pc, #316]	; (2464 <menu2()+0x25c>)
    2326:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    232a:	ldr	r3, [pc, #408]	; (24c4 <menu2()+0x2bc>)
    232c:	b.n	23b8 <menu2()+0x1b0>
    else if(ch=='d') // get date
    232e:	cmp	r0, #52	; 0x34
    2330:	bhi.n	2364 <menu2()+0x15c>
    2332:	cmp	r0, #48	; 0x30
    2334:	bls.n	236c <menu2()+0x164>
    2336:	subs	r0, #50	; 0x32
    2338:	cmp	r0, #2
    233a:	bhi.n	2422 <menu2()+0x21a>
    233c:	tbb	[pc, r0]
    2340:	.short	0x7d77
    2342:	.byte	0x83
    2343:	.byte	0x00
    2344:	cmp	r0, #22
    2346:	bhi.n	236c <menu2()+0x164>
    2348:	tbb	[pc, r0]
    234c:	.word	0x165f1031
    2350:	.word	0x10654710
    2354:	.word	0x10101010
    2358:	.word	0x103b1010
    235c:	.word	0x25544110
    2360:	.short	0x1010
    2362:	.byte	0x7f
    2363:	.byte	0x00
    2364:	subs	r0, #97	; 0x61
    2366:	uxtb	r3, r0
    2368:	cmp	r3, #22
    236a:	bls.n	2344 <menu2()+0x13c>
        virtual int available() { return usb_serial_available(); }
    236c:	bl	a148 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2370:	cmp	r0, #0
    2372:	bne.n	245c <menu2()+0x254>
}
    2374:	add	sp, #32
    2376:	pop	{r4, pc}
      rtc_get_datetime(&t);
    2378:	add	r0, sp, #24
    237a:	bl	3744 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    237e:	ldrsb.w	r3, [sp, #27]
    2382:	ldrsh.w	r2, [sp, #24]
    2386:	str	r3, [sp, #0]
    2388:	ldr	r1, [pc, #316]	; (24c8 <menu2()+0x2c0>)
    238a:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    238e:	ldr	r0, [pc, #212]	; (2464 <menu2()+0x25c>)
    2390:	bl	c164 <Print::printf(char const*, ...)>
    2394:	b.n	236c <menu2()+0x164>
      rtc_get_datetime(&t);
    2396:	add	r0, sp, #24
    2398:	bl	3744 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    239c:	ldrsb.w	r3, [sp, #31]
    23a0:	ldrsb.w	r2, [sp, #29]
    23a4:	str	r3, [sp, #0]
    23a6:	ldr	r1, [pc, #292]	; (24cc <menu2()+0x2c4>)
    23a8:	ldrsb.w	r3, [sp, #30]
    23ac:	b.n	238e <menu2()+0x186>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    23ae:	ldr	r1, [pc, #192]	; (2470 <menu2()+0x268>)
    23b0:	ldr	r0, [pc, #176]	; (2464 <menu2()+0x25c>)
    23b2:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    23b6:	ldr	r3, [pc, #188]	; (2474 <menu2()+0x26c>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    23b8:	ldr	r1, [r3, #0]
    23ba:	ldr	r0, [pc, #168]	; (2464 <menu2()+0x25c>)
    23bc:	bl	1d9e <Print::println(unsigned long) [clone .isra.0]>
    23c0:	b.n	236c <menu2()+0x164>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    23c2:	ldr	r1, [pc, #268]	; (24d0 <menu2()+0x2c8>)
    23c4:	ldr	r0, [pc, #156]	; (2464 <menu2()+0x25c>)
    23c6:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    23ca:	ldr	r3, [pc, #176]	; (247c <menu2()+0x274>)
    23cc:	b.n	23b8 <menu2()+0x1b0>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    23ce:	ldr	r1, [pc, #176]	; (2480 <menu2()+0x278>)
    23d0:	ldr	r0, [pc, #144]	; (2464 <menu2()+0x25c>)
    23d2:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    23d6:	ldr	r3, [pc, #172]	; (2484 <menu2()+0x27c>)
    23d8:	b.n	23b8 <menu2()+0x1b0>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    23da:	ldr	r1, [pc, #172]	; (2488 <menu2()+0x280>)
    23dc:	ldr	r0, [pc, #132]	; (2464 <menu2()+0x25c>)
    23de:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    23e2:	ldr	r3, [pc, #168]	; (248c <menu2()+0x284>)
    23e4:	ldr	r0, [pc, #124]	; (2464 <menu2()+0x25c>)
    23e6:	ldr	r1, [r3, #0]
    23e8:	bl	c11a <Print::print(long)>
    23ec:	ldr	r0, [pc, #116]	; (2464 <menu2()+0x25c>)
    23ee:	bl	c12c <Print::println()>
    23f2:	b.n	236c <menu2()+0x164>
      Serial.print("shift (s) = "); Serial.println(shift);
    23f4:	ldr	r1, [pc, #152]	; (2490 <menu2()+0x288>)
    23f6:	ldr	r0, [pc, #108]	; (2464 <menu2()+0x25c>)
    23f8:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    23fc:	ldr	r3, [pc, #148]	; (2494 <menu2()+0x28c>)
      Serial.print("again (g) = "); Serial.println(again);
    23fe:	ldrh	r1, [r3, #0]
    2400:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    2402:	ldr	r0, [pc, #96]	; (2464 <menu2()+0x25c>)
    2404:	bl	1d8c <Print::println(int) [clone .isra.0]>
    2408:	b.n	236c <menu2()+0x164>
      Serial.print("proc  (c) = "); Serial.println(proc);
    240a:	ldr	r1, [pc, #140]	; (2498 <menu2()+0x290>)
    240c:	ldr	r0, [pc, #84]	; (2464 <menu2()+0x25c>)
    240e:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    2412:	ldr	r3, [pc, #136]	; (249c <menu2()+0x294>)
    2414:	b.n	23fe <menu2()+0x1f6>
      Serial.print("again (g) = "); Serial.println(again);
    2416:	ldr	r1, [pc, #136]	; (24a0 <menu2()+0x298>)
    2418:	ldr	r0, [pc, #72]	; (2464 <menu2()+0x25c>)
    241a:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    241e:	ldr	r3, [pc, #132]	; (24a4 <menu2()+0x29c>)
    2420:	b.n	23fe <menu2()+0x1f6>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    2422:	ldr	r1, [pc, #176]	; (24d4 <menu2()+0x2cc>)
    2424:	ldr	r0, [pc, #60]	; (2464 <menu2()+0x25c>)
    2426:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    242a:	ldr	r3, [pc, #128]	; (24ac <menu2()+0x2a4>)
    242c:	b.n	23b8 <menu2()+0x1b0>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    242e:	ldr	r1, [pc, #168]	; (24d8 <menu2()+0x2d0>)
    2430:	ldr	r0, [pc, #48]	; (2464 <menu2()+0x25c>)
    2432:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    2436:	ldr	r3, [pc, #124]	; (24b4 <menu2()+0x2ac>)
    2438:	b.n	23b8 <menu2()+0x1b0>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    243a:	ldr	r1, [pc, #160]	; (24dc <menu2()+0x2d4>)
    243c:	ldr	r0, [pc, #36]	; (2464 <menu2()+0x25c>)
    243e:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    2442:	ldr	r3, [pc, #120]	; (24bc <menu2()+0x2b4>)
    2444:	b.n	23b8 <menu2()+0x1b0>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    2446:	ldr	r1, [pc, #152]	; (24e0 <menu2()+0x2d8>)
    2448:	b.n	2324 <menu2()+0x11c>
    { uint16_t *params=loadParameters();
    244a:	bl	20d8 <loadParameters()>
    244e:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    2450:	ldr	r1, [pc, #144]	; (24e4 <menu2()+0x2dc>)
    2452:	ldr	r0, [pc, #16]	; (2464 <menu2()+0x25c>)
    2454:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    2458:	ldrh	r1, [r4, #0]
    245a:	b.n	2402 <menu2()+0x1fa>
        virtual int read() { return usb_serial_getchar(); }
    245c:	bl	a1bc <usb_serial_getchar>
    2460:	b.n	236c <menu2()+0x164>
    2462:	nop
    2464:	.word	0x200089a4
    2468:	.word	0x20007eab
    246c:	.word	0x20007ccb
    2470:	.word	0x20007cf1
    2474:	.word	0x20009330
    2478:	.word	0x20007cfe
    247c:	.word	0x20009334
    2480:	.word	0x20007d0b
    2484:	.word	0x20009338
    2488:	.word	0x20007d18
    248c:	.word	0x20009310
    2490:	.word	0x20007d25
    2494:	.word	0x20009342
    2498:	.word	0x20007d32
    249c:	.word	0x20027f96
    24a0:	.word	0x20007d3f
    24a4:	.word	0x20009340
    24a8:	.word	0x20007d4c
    24ac:	.word	0x20027f48
    24b0:	.word	0x20007d59
    24b4:	.word	0x20009324
    24b8:	.word	0x20007d66
    24bc:	.word	0x20009328
    24c0:	.word	0x20007d73
    24c4:	.word	0x2000932c
    24c8:	.word	0x20007d80
    24cc:	.word	0x20007d9a
    24d0:	.word	0x20007db5
    24d4:	.word	0x20007dc2
    24d8:	.word	0x20007dce
    24dc:	.word	0x20007dda
    24e0:	.word	0x20007de6
    24e4:	.word	0x20007df2

000024e8 <menu(short)>:
{
    24e8:	push	{r3, r4, r5, lr}
    24ea:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    24ec:	bl	a148 <usb_serial_available>
  if(Serial.available())
    24f0:	cbz	r0, 250c <menu(short)+0x24>
        virtual int read() { return usb_serial_getchar(); }
    24f2:	bl	a1bc <usb_serial_getchar>
    char ch=Serial.read();
    24f6:	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    24f8:	cmp	r0, #115	; 0x73
    24fa:	bne.n	2510 <menu(short)+0x28>
    24fc:	movs	r4, #0
    24fe:	ldr	r1, [pc, #128]	; (2580 <menu(short)+0x98>)
    2500:	ldr	r0, [pc, #128]	; (2584 <menu(short)+0x9c>)
    2502:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    2506:	bl	a148 <usb_serial_available>
    while(Serial.available()) Serial.read(); // clean-up
    250a:	cbnz	r0, 2578 <menu(short)+0x90>
}
    250c:	mov	r0, r4
    250e:	pop	{r3, r4, r5, pc}
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2510:	cmp	r0, #101	; 0x65
    2512:	bne.n	2520 <menu(short)+0x38>
    2514:	ldr	r1, [pc, #112]	; (2588 <menu(short)+0xa0>)
    2516:	movs	r4, #5
    2518:	ldr	r0, [pc, #104]	; (2584 <menu(short)+0x9c>)
    251a:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
    251e:	b.n	2506 <menu(short)+0x1e>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    2520:	cmp	r0, #109	; 0x6d
    2522:	bne.n	2542 <menu(short)+0x5a>
    2524:	ldr	r5, [pc, #100]	; (258c <menu(short)+0xa4>)
    2526:	ldr	r1, [pc, #104]	; (2590 <menu(short)+0xa8>)
    2528:	ldrh	r3, [r5, #0]
    252a:	ldr	r0, [pc, #88]	; (2584 <menu(short)+0x9c>)
    252c:	rsb	r3, r3, #1
    2530:	strh	r3, [r5, #0]
    2532:	bl	1dd8 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2536:	ldrsh.w	r1, [r5]
    253a:	ldr	r0, [pc, #72]	; (2584 <menu(short)+0x9c>)
    253c:	bl	c11a <Print::print(long)>
    2540:	b.n	2506 <menu(short)+0x1e>
    else if(ch=='r') {resetUSB();}
    2542:	cmp	r0, #114	; 0x72
    2544:	bne.n	254c <menu(short)+0x64>
    2546:	bl	218 <resetUSB()>
    254a:	b.n	2506 <menu(short)+0x1e>
    else if(ch==':') status=menu1(status); 
    254c:	cmp	r0, #58	; 0x3a
    254e:	bne.n	255a <menu(short)+0x72>
    2550:	mov	r0, r4
    2552:	bl	2098 <menu1(short)>
    2556:	mov	r4, r0
    2558:	b.n	2506 <menu(short)+0x1e>
    else if(ch=='?') menu2(); 
    255a:	cmp	r0, #63	; 0x3f
    255c:	bne.n	2564 <menu(short)+0x7c>
    255e:	bl	2208 <menu2()>
    2562:	b.n	2506 <menu(short)+0x1e>
    else if(ch=='!') menu3(); 
    2564:	cmp	r0, #33	; 0x21
    2566:	bne.n	256e <menu(short)+0x86>
    2568:	bl	1e58 <menu3()>
    256c:	b.n	2506 <menu(short)+0x1e>
    else { Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    256e:	ldr	r1, [pc, #36]	; (2594 <menu(short)+0xac>)
    2570:	ldr	r0, [pc, #16]	; (2584 <menu(short)+0x9c>)
    2572:	bl	1ddc <Print::println(char const*) [clone .isra.0]>
    2576:	b.n	2506 <menu(short)+0x1e>
        virtual int read() { return usb_serial_getchar(); }
    2578:	bl	a1bc <usb_serial_getchar>
    257c:	b.n	2506 <menu(short)+0x1e>
    257e:	nop
    2580:	.word	0x20007c60
    2584:	.word	0x200089a4
    2588:	.word	0x20007c68
    258c:	.word	0x20027f94
    2590:	.word	0x20007c6f
    2594:	.word	0x20007c7a

00002598 <getStore()>:

uint16_t *getStore(void) {return store;}
    2598:	ldr	r0, [pc, #0]	; (259c <getStore()+0x4>)
    259a:	bx	lr
    259c:	.word	0x20027f6c

000025a0 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    25a0:	ldr	r3, [pc, #16]	; (25b4 <getDataCount()+0x14>)
    25a2:	ldr	r0, [r3, #0]
    25a4:	ldr	r3, [pc, #16]	; (25b8 <getDataCount()+0x18>)
    25a6:	ldr	r3, [r3, #0]
    25a8:	subs	r0, r0, r3
    25aa:	it	mi
    25ac:	addmi	r0, #192	; 0xc0
    25ae:	uxth	r0, r0
    25b0:	bx	lr
    25b2:	nop
    25b4:	.word	0x20026be8
    25b8:	.word	0x20026be4

000025bc <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    25bc:	ldr	r3, [pc, #4]	; (25c4 <queue_isBusy()+0x8>)
    25be:	ldr	r0, [r3, #0]
    25c0:	bx	lr
    25c2:	nop
    25c4:	.word	0x2000d1d4

000025c8 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    25c8:	push	{r3, r4, r5, r6, r7, lr}
    if ( (tail+1)%MAXBUF == head ) return 0;
    25ca:	ldr	r5, [pc, #72]	; (2614 <pushData(unsigned long*)+0x4c>)
    25cc:	movs	r6, #192	; 0xc0
  {
    25ce:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) return 0;
    25d0:	ldr	r2, [pc, #68]	; (2618 <pushData(unsigned long*)+0x50>)
    25d2:	ldr	r3, [r5, #0]
    25d4:	ldr	r2, [r2, #0]
    25d6:	adds	r3, #1
    25d8:	sdiv	r0, r3, r6
    25dc:	mls	r3, r6, r0, r3
    25e0:	cmp	r3, r2
    25e2:	beq.n	2610 <pushData(unsigned long*)+0x48>
    //while(busy); 
    queue_busy=1;
    25e4:	movs	r4, #1
    25e6:	ldr	r7, [pc, #52]	; (261c <pushData(unsigned long*)+0x54>)
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    25e8:	ldr	r3, [pc, #52]	; (2620 <pushData(unsigned long*)+0x58>)
    25ea:	mov.w	r2, #512	; 0x200
    queue_busy=1;
    25ee:	str	r4, [r7, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    25f0:	ldr	r0, [r5, #0]
    25f2:	add.w	r0, r3, r0, lsl #9
    25f6:	bl	9c60 <memcpy>
    tail = (tail+1)%MAXBUF;
    25fa:	ldr	r3, [r5, #0]
    queue_busy=0;
    return 1; // signal success.
    25fc:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    25fe:	add	r3, r4
    2600:	sdiv	r2, r3, r6
    2604:	mls	r3, r6, r2, r3
    2608:	str	r3, [r5, #0]
    queue_busy=0;
    260a:	movs	r3, #0
    260c:	str	r3, [r7, #0]
  }
    260e:	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) return 0;
    2610:	movs	r0, #0
    2612:	b.n	260e <pushData(unsigned long*)+0x46>
    2614:	.word	0x20026be8
    2618:	.word	0x20026be4
    261c:	.word	0x2000d1d4
    2620:	.word	0x2000d1d8

00002624 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    2624:	ldr	r3, [pc, #60]	; (2664 <pullData(unsigned long*)+0x40>)
  {
    2626:	push	{r4, r5, r6, lr}
    if ( head==tail ) return 0;
    2628:	ldr	r5, [pc, #60]	; (2668 <pullData(unsigned long*)+0x44>)
    262a:	ldr	r2, [r5, #0]
    262c:	ldr	r3, [r3, #0]
    262e:	cmp	r2, r3
    2630:	beq.n	2660 <pullData(unsigned long*)+0x3c>
    //while(busy); 
    queue_busy=1;
    2632:	movs	r4, #1
    2634:	ldr	r6, [pc, #52]	; (266c <pullData(unsigned long*)+0x48>)
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2636:	ldr	r3, [pc, #56]	; (2670 <pullData(unsigned long*)+0x4c>)
    2638:	mov.w	r2, #512	; 0x200
    queue_busy=1;
    263c:	str	r4, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    263e:	ldr	r1, [r5, #0]
    2640:	add.w	r1, r3, r1, lsl #9
    2644:	bl	9c60 <memcpy>
    head = (head+1)%MAXBUF;
    2648:	ldr	r3, [r5, #0]
    264a:	movs	r2, #192	; 0xc0
    queue_busy=0;
    return 1;
    264c:	mov	r0, r4
    head = (head+1)%MAXBUF;
    264e:	add	r3, r4
    2650:	sdiv	r1, r3, r2
    2654:	mls	r3, r2, r1, r3
    2658:	str	r3, [r5, #0]
    queue_busy=0;
    265a:	movs	r3, #0
    265c:	str	r3, [r6, #0]
  }
    265e:	pop	{r4, r5, r6, pc}
    if ( head==tail ) return 0;
    2660:	movs	r0, #0
    2662:	b.n	265e <pullData(unsigned long*)+0x3a>
    2664:	.word	0x20026be8
    2668:	.word	0x20026be4
    266c:	.word	0x2000d1d4
    2670:	.word	0x2000d1d8

00002674 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    2674:	push	{r0, r1, r4, r5, r6, lr}
    2676:	mov	r6, r0
    rtc_get_datetime(&t);
    2678:	mov	r0, sp
{
    267a:	mov	r5, r2
    267c:	mov	r4, r1
    rtc_get_datetime(&t);
    267e:	bl	3744 <rtc_get_datetime(datetime_t*)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    2682:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    2686:	ldrsb.w	r3, [sp, #3]
    268a:	subw	r2, r2, #1980	; 0x7bc
    268e:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    2690:	cmp	r2, #127	; 0x7f
    2692:	bhi.n	26de <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2694:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    2698:	cmp	r1, #12
    269a:	bhi.n	26de <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    269c:	uxtb	r3, r3
    269e:	cmp	r3, #31
    26a0:	bhi.n	26de <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    26a2:	orr.w	r3, r3, r1, lsl #5
    26a6:	orr.w	r3, r3, r2, lsl #9
    26aa:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    26ac:	ldrb.w	r1, [sp, #5]
    26b0:	ldrsb.w	r2, [sp, #7]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    26b4:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    26b6:	strh	r3, [r6, #0]
    26b8:	bhi.n	26e2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    26ba:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    26be:	cmp	r3, #59	; 0x3b
    26c0:	bhi.n	26e2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    26c2:	uxtb	r2, r2
    26c4:	cmp	r2, #59	; 0x3b
    26c6:	bhi.n	26e2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    26c8:	lsls	r3, r3, #5
    26ca:	orr.w	r3, r3, r1, lsl #11
    26ce:	orr.w	r3, r3, r2, lsr #1
    26d2:	uxth	r3, r3
    26d4:	strh	r3, [r4, #0]
    *ms10 = 0;
    26d6:	movs	r3, #0
    26d8:	strb	r3, [r5, #0]
}
    26da:	add	sp, #8
    26dc:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    26de:	movs	r3, #0
    26e0:	b.n	26ac <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    26e2:	movs	r3, #0
    26e4:	b.n	26d4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

000026e6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    26e6:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26e8:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    26ea:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26ec:	cbz	r5, 26f8 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    26ee:	cbnz	r3, 2702 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    26f0:	mov	r0, r5
  }
    26f2:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26f4:	b.w	6d26 <FatFile::seekSet(unsigned long)>
    26f8:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    26fa:	cbz	r0, 2702 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    26fc:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    26fe:	b.w	569c <ExFatFile::seekSet(unsigned long long)>
  }
    2702:	pop	{r4, r5}
    2704:	bx	lr

00002706 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2706:	push	{r0, r1, r4, lr}
    2708:	mov	r4, r0
    270a:	cbz	r1, 2726 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    270c:	mov	r0, r1
    270e:	str	r1, [sp, #4]
    2710:	bl	ec80 <strlen>
    2714:	ldr	r3, [r4, #0]
    2716:	mov	r2, r0
    2718:	ldr	r1, [sp, #4]
    271a:	ldr	r3, [r3, #4]
    271c:	mov	r0, r4
    271e:	add	sp, #8
    2720:	ldmia.w	sp!, {r4, lr}
    2724:	bx	r3
    2726:	add	sp, #8
    2728:	pop	{r4, pc}

0000272a <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    272a:	push	{r4, lr}
    272c:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    272e:	bl	2706 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    2732:	mov	r0, r4
    2734:	ldmia.w	sp!, {r4, lr}
    2738:	b.w	c12c <Print::println()>

0000273c <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    273c:	ldr	r3, [r0, #56]	; 0x38
    273e:	cbz	r3, 2746 <FsBaseFile::sync()+0xa>
    2740:	mov	r0, r3
    2742:	b.w	6f70 <FatFile::sync()>
    2746:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    2748:	cbz	r0, 274e <FsBaseFile::sync()+0x12>
    274a:	b.w	62d0 <ExFatFile::sync()>
  }
    274e:	bx	lr

00002750 <timeStamp()>:
{
    2750:	push	{r4, lr}
    2752:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2754:	ldr	r4, [pc, #52]	; (278c <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2756:	add	r0, sp, #16
    2758:	bl	3744 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    275c:	ldrsb.w	r3, [sp, #23]
    2760:	ldrsh.w	r2, [sp, #16]
    2764:	mov	r0, r4
    2766:	str	r3, [sp, #12]
    2768:	ldrsb.w	r3, [sp, #22]
    276c:	ldr	r1, [pc, #32]	; (2790 <timeStamp()+0x40>)
    276e:	str	r3, [sp, #8]
    2770:	ldrsb.w	r3, [sp, #21]
    2774:	str	r3, [sp, #4]
    2776:	ldrsb.w	r3, [sp, #19]
    277a:	str	r3, [sp, #0]
    277c:	ldrsb.w	r3, [sp, #18]
    2780:	bl	e214 <sprintf>
}
    2784:	mov	r0, r4
    2786:	add	sp, #24
    2788:	pop	{r4, pc}
    278a:	nop
    278c:	.word	0x20028108
    2790:	.word	0x20007b05

00002794 <headerInit(long, long, long, int)>:
{
    2794:	push	{r0, r1, r4, r5, r6, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2796:	ldr	r4, [pc, #184]	; (2850 <headerInit(long, long, long, int)+0xbc>)
  int nbytes=nbits/8;
    2798:	cmp	r2, #0
    279a:	str	r3, [sp, #4]
    279c:	mov	r6, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    279e:	ldr	r3, [pc, #180]	; (2854 <headerInit(long, long, long, int)+0xc0>)
  int nbytes=nbits/8;
    27a0:	it	lt
    27a2:	addlt	r6, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    27a4:	str	r0, [r4, #24]
{
    27a6:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    27a8:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    27aa:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    27ae:	asrs	r6, r6, #3
  wav_hdr.nFormatTag=1;
    27b0:	movs	r2, #16
  memcpy(wav_hdr.wId,"WAVE",4);
    27b2:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nBitsPerSamples=nbits;
    27b6:	strh	r5, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27b8:	muls	r0, r6
  memcpy(wav_hdr.wId,"WAVE",4);
    27ba:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    27bc:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27c0:	muls	r0, r1
  wav_hdr.nBlockAlign=nchan*nbytes;
    27c2:	smulbb	r1, r1, r6
  memcpy(wav_hdr.fId,"fmt ",4);
    27c6:	add.w	r3, r3, #1974272	; 0x1e2000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27ca:	str	r0, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    27cc:	add.w	r0, r4, #44	; 0x2c
  memcpy(wav_hdr.fId,"fmt ",4);
    27d0:	addw	r3, r3, #3087	; 0xc0f
  wav_hdr.nBlockAlign=nchan*nbytes;
    27d4:	strh	r1, [r4, #32]
  strcpy(&wav_hdr.info[0], MAGIC);
    27d6:	ldr	r1, [pc, #128]	; (2858 <headerInit(long, long, long, int)+0xc4>)
  memcpy(wav_hdr.fId,"fmt ",4);
    27d8:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    27da:	add.w	r3, r3, #1090519040	; 0x41000000
    27de:	subw	r3, r3, #3074	; 0xc02
    27e2:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    27e6:	add.w	r3, r3, #218107136	; 0xd000d00
    27ea:	add.w	r3, r3, #15859712	; 0xf20000
    27ee:	adds	r3, #5
    27f0:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    27f2:	mov.w	r3, #504	; 0x1f8
    27f6:	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    27f8:	mov.w	r3, #460	; 0x1cc
    27fc:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    27fe:	movs	r3, #0
    2800:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    2804:	mov.w	r3, #65537	; 0x10001
    2808:	strd	r2, r3, [r4, #16]
  strcpy(&wav_hdr.info[0], MAGIC);
    280c:	bl	eb1c <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2810:	bl	2750 <timeStamp()>
    2814:	mov	r1, r0
    2816:	add.w	r0, r4, #48	; 0x30
    281a:	bl	eb1c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    281e:	ldr	r2, [sp, #4]
    2820:	ldr	r1, [pc, #56]	; (285c <headerInit(long, long, long, int)+0xc8>)
    2822:	add.w	r0, r4, #64	; 0x40
    2826:	bl	e214 <sprintf>
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    282a:	adds	r4, #74	; 0x4a
    282c:	bl	2598 <getStore()>
    2830:	add.w	r3, r0, #32
    2834:	ldr.w	r2, [r0], #4
    2838:	cmp	r0, r3
    283a:	str.w	r2, [r4], #4
    283e:	bne.n	2834 <headerInit(long, long, long, int)+0xa0>
  strcpy(&wav_hdr.info[62]," end");
    2840:	ldr	r1, [pc, #28]	; (2860 <headerInit(long, long, long, int)+0xcc>)
    2842:	ldr	r0, [pc, #32]	; (2864 <headerInit(long, long, long, int)+0xd0>)
    2844:	bl	eb1c <strcpy>
}
    2848:	ldr	r0, [pc, #4]	; (2850 <headerInit(long, long, long, int)+0xbc>)
    284a:	add	sp, #8
    284c:	pop	{r4, r5, r6, pc}
    284e:	nop
    2850:	.word	0x20026df4
    2854:	.word	0x46464952
    2858:	.word	0x20007af4
    285c:	.word	0x20007af9
    2860:	.word	0x20007afe
    2864:	.word	0x20026e5e

00002868 <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    2868:	ldr	r3, [pc, #12]	; (2878 <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    286a:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    286c:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2870:	add	r2, r0
}
    2872:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2874:	str	r2, [r3, #4]
}
    2876:	bx	lr
    2878:	.word	0x20026df4

0000287c <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    287c:	ldr	r3, [pc, #76]	; (28cc <writeHeader(char*)+0x50>)
    287e:	ldr	r2, [r3, #72]	; 0x48
{ 
    2880:	push	{r4, r5, r6, lr}
    2882:	mov	r6, r0
    2884:	cbz	r2, 28ba <writeHeader(char*)+0x3e>
    2886:	ldr	r4, [r2, #20]
    2888:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    288a:	mov	r2, r4
    288c:	mov	r3, r5
    288e:	ldr	r1, [pc, #64]	; (28d0 <writeHeader(char*)+0x54>)
    2890:	ldr	r0, [pc, #64]	; (28d4 <writeHeader(char*)+0x58>)
    2892:	bl	c164 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2896:	movs	r3, #0
    2898:	movs	r2, #0
    289a:	ldr	r0, [pc, #60]	; (28d8 <writeHeader(char*)+0x5c>)
    289c:	bl	26e6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write(wav_hdr,512);
    28a0:	mov.w	r2, #512	; 0x200
    28a4:	mov	r1, r6
    28a6:	ldr	r0, [pc, #48]	; (28d8 <writeHeader(char*)+0x5c>)
    28a8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  file.seekSet(fpos);
    28ac:	mov	r2, r4
    28ae:	mov	r3, r5
    28b0:	ldr	r0, [pc, #36]	; (28d8 <writeHeader(char*)+0x5c>)
}
    28b2:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    28b6:	b.w	26e6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    28ba:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    28bc:	cbz	r3, 28c4 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    28be:	ldrd	r4, r5, [r3]
    28c2:	b.n	288a <writeHeader(char*)+0xe>
    28c4:	mov	r4, r3
    28c6:	mov	r5, r3
    28c8:	b.n	288a <writeHeader(char*)+0xe>
    28ca:	nop
    28cc:	.word	0x20027784
    28d0:	.word	0x20007b95
    28d4:	.word	0x200089a4
    28d8:	.word	0x20027794

000028dc <makeHeader(long*)>:
{
    28dc:	push	{r4, lr}
    28de:	sub	sp, #32
    28e0:	mov	r4, r0
    rtc_get_datetime(&t);
    28e2:	add	r0, sp, #24
    28e4:	bl	3744 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    28e8:	ldrsb.w	r3, [sp, #31]
    28ec:	ldr	r2, [pc, #120]	; (2968 <makeHeader(long*)+0x8c>)
    28ee:	mov	r0, r4
    28f0:	str	r3, [sp, #16]
    28f2:	ldrsb.w	r3, [sp, #30]
    28f6:	ldr	r1, [pc, #116]	; (296c <makeHeader(long*)+0x90>)
    28f8:	str	r3, [sp, #12]
    28fa:	ldrsb.w	r3, [sp, #29]
    28fe:	str	r3, [sp, #8]
    2900:	ldrsb.w	r3, [sp, #27]
    2904:	str	r3, [sp, #4]
    2906:	ldrsb.w	r3, [sp, #26]
    290a:	str	r3, [sp, #0]
    290c:	ldrsh.w	r3, [sp, #24]
    2910:	bl	e214 <sprintf>
    header[5] = 20;          // SW version
    2914:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    2916:	movs	r0, #1
    header[5] = 20;          // SW version
    2918:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    291a:	ldr	r3, [pc, #84]	; (2970 <makeHeader(long*)+0x94>)
    header[8] = NCHAN_ACQ;
    291c:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    291e:	ldr	r3, [r3, #0]
    2920:	str	r3, [r4, #24]
    header[7] = fsamp;
    2922:	ldr	r3, [pc, #80]	; (2974 <makeHeader(long*)+0x98>)
    2924:	ldr	r3, [r3, #0]
    2926:	str	r3, [r4, #28]
    header[9] = t_acq;
    2928:	ldr	r3, [pc, #76]	; (2978 <makeHeader(long*)+0x9c>)
    292a:	ldr	r3, [r3, #0]
    292c:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    292e:	ldr	r3, [pc, #76]	; (297c <makeHeader(long*)+0xa0>)
    2930:	ldr	r3, [r3, #0]
    2932:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2934:	ldr	r3, [pc, #72]	; (2980 <makeHeader(long*)+0xa4>)
    2936:	ldr	r3, [r3, #0]
    2938:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    293a:	ldr	r3, [pc, #72]	; (2984 <makeHeader(long*)+0xa8>)
    293c:	ldrh	r3, [r3, #0]
    293e:	sxth	r3, r3
    2940:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    2942:	ldr	r3, [pc, #68]	; (2988 <makeHeader(long*)+0xac>)
    2944:	ldrh	r3, [r3, #0]
    2946:	sxth	r3, r3
    2948:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    294a:	ldr	r3, [pc, #64]	; (298c <makeHeader(long*)+0xb0>)
    294c:	ldrh	r3, [r3, #0]
    294e:	sxth	r3, r3
    2950:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    2952:	ldr	r3, [pc, #60]	; (2990 <makeHeader(long*)+0xb4>)
    2954:	ldrh	r3, [r3, #0]
    2956:	sxth	r3, r3
    2958:	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    295a:	mov.w	r3, #1431655765	; 0x55555555
    295e:	str.w	r3, [r4, #508]	; 0x1fc
}
    2962:	add	sp, #32
    2964:	pop	{r4, pc}
    2966:	nop
    2968:	.word	0x20007af4
    296c:	.word	0x20007b03
    2970:	.word	0x2000bdc8
    2974:	.word	0x20009310
    2978:	.word	0x20009330
    297c:	.word	0x20009334
    2980:	.word	0x20009338
    2984:	.word	0x20027f96
    2988:	.word	0x20009342
    298c:	.word	0x20009340
    2990:	.word	0x20027f90

00002994 <checkEndOfFile(short)>:
  if(state==RUNNING)
    2994:	cmp	r0, #2
{ 
    2996:	push	{r4, lr}
    2998:	mov	r4, r0
  if(state==RUNNING)
    299a:	bne.n	29c4 <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    299c:	bl	b3a4 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    29a0:	ldr	r3, [pc, #60]	; (29e0 <checkEndOfFile(short)+0x4c>)
    29a2:	ldr	r2, [r3, #0]
    29a4:	udiv	r3, r0, r2
    29a8:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    29ac:	ldr	r2, [pc, #52]	; (29e4 <checkEndOfFile(short)+0x50>)
    29ae:	ldr	r1, [r2, #0]
    dta = dt1;
    29b0:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    29b2:	cmp	r3, r1
    29b4:	bcs.n	29c4 <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    29b6:	ldr	r3, [pc, #48]	; (29e8 <checkEndOfFile(short)+0x54>)
    29b8:	ldr	r2, [pc, #48]	; (29ec <checkEndOfFile(short)+0x58>)
    29ba:	ldr	r4, [r3, #0]
    29bc:	ldr	r1, [r2, #0]
    29be:	cmp	r4, r1
    29c0:	bhi.n	29c8 <checkEndOfFile(short)+0x34>
    29c2:	movs	r4, #3
}
    29c4:	mov	r0, r4
    29c6:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    29c8:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    29ca:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    29cc:	udiv	r2, r0, r3
    29d0:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    29d4:	cmp	r0, r4
    29d6:	ite	cc
    29d8:	movcc	r4, #3
    29da:	movcs	r4, #4
    29dc:	b.n	29c4 <checkEndOfFile(short)+0x30>
    29de:	nop
    29e0:	.word	0x20009330
    29e4:	.word	0x2002723c
    29e8:	.word	0x20009338
    29ec:	.word	0x20009334

000029f0 <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    29f0:	ldr	r3, [pc, #12]	; (2a00 <newFolder(int)+0x10>)
    29f2:	ldr	r2, [r3, #0]
    29f4:	cmp	r2, r0
  d0=d;
    29f6:	itte	ne
    29f8:	strne	r0, [r3, #0]
  return 1;
    29fa:	movne	r0, #1
  if(d==d0) return 0; // same day
    29fc:	moveq	r0, #0
}
    29fe:	bx	lr
    2a00:	.word	0x20008d74

00002a04 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2a04:	push	{r4, lr}
    2a06:	sub	sp, #24
    2a08:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2a0a:	add	r0, sp, #16
    2a0c:	bl	3744 <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2a10:	ldrsb.w	r1, [sp, #21]
    2a14:	mov	r0, r1
    2a16:	bl	29f0 <newFolder(int)>
    2a1a:	cbz	r0, 2a56 <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2a1c:	ldrsb.w	r3, [sp, #19]
    2a20:	mov	r0, r4
    2a22:	ldr	r2, [pc, #56]	; (2a5c <newDirectory(char*)+0x58>)
    2a24:	str	r3, [sp, #8]
    2a26:	ldrsb.w	r3, [sp, #18]
    2a2a:	str	r1, [sp, #12]
    2a2c:	str	r3, [sp, #4]
    2a2e:	ldrsh.w	r3, [sp, #16]
    2a32:	ldr	r1, [pc, #44]	; (2a60 <newDirectory(char*)+0x5c>)
    2a34:	str	r3, [sp, #0]
    2a36:	ldr	r3, [pc, #44]	; (2a64 <newDirectory(char*)+0x60>)
    2a38:	ldr	r3, [r3, #0]
    2a3a:	bl	e214 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    2a3e:	ldr	r0, [pc, #40]	; (2a68 <newDirectory(char*)+0x64>)
    2a40:	bl	c12c <Print::println()>
	size_t print(const char s[])			{ return write(s); }
    2a44:	ldr	r1, [pc, #36]	; (2a6c <newDirectory(char*)+0x68>)
    2a46:	ldr	r0, [pc, #32]	; (2a68 <newDirectory(char*)+0x64>)
    2a48:	bl	2706 <Print::write(char const*) [clone .isra.0]>
    2a4c:	ldr	r0, [pc, #24]	; (2a68 <newDirectory(char*)+0x64>)
    2a4e:	mov	r1, r4
    2a50:	bl	2706 <Print::write(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2a54:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2a56:	add	sp, #24
    2a58:	pop	{r4, pc}
    2a5a:	nop
    2a5c:	.word	0x20007ba0
    2a60:	.word	0x20007ba2
    2a64:	.word	0x2000bdc8
    2a68:	.word	0x200089a4
    2a6c:	.word	0x20007f9e

00002a70 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2a70:	push	{r4, lr}
    2a72:	sub	sp, #32
    2a74:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2a76:	add	r0, sp, #24
    2a78:	bl	3744 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2a7c:	ldr	r3, [pc, #92]	; (2adc <newFileName(char*)+0x6c>)
    2a7e:	ldrsb.w	r0, [sp, #31]
    2a82:	ldrh	r2, [r3, #0]
    2a84:	ldrsb.w	r1, [sp, #30]
    2a88:	sxth	r2, r2
    2a8a:	ldrsb.w	r3, [sp, #29]
    2a8e:	cbnz	r2, 2acc <newFileName(char*)+0x5c>
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a90:	str	r3, [sp, #8]
    2a92:	ldrsb.w	r3, [sp, #27]
    2a96:	ldr	r2, [pc, #72]	; (2ae0 <newFileName(char*)+0x70>)
    2a98:	str	r3, [sp, #4]
    2a9a:	ldrsb.w	r3, [sp, #26]
    2a9e:	strd	r1, r0, [sp, #12]
    2aa2:	str	r3, [sp, #0]
    2aa4:	mov	r0, r4
    2aa6:	ldrsh.w	r3, [sp, #24]
    2aaa:	ldr	r1, [pc, #56]	; (2ae4 <newFileName(char*)+0x74>)
    2aac:	bl	e214 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2ab0:	ldr	r0, [pc, #52]	; (2ae8 <newFileName(char*)+0x78>)
    2ab2:	bl	c12c <Print::println()>
    2ab6:	ldr	r1, [pc, #52]	; (2aec <newFileName(char*)+0x7c>)
    2ab8:	ldr	r0, [pc, #44]	; (2ae8 <newFileName(char*)+0x78>)
    2aba:	bl	2706 <Print::write(char const*) [clone .isra.0]>
    2abe:	mov	r1, r4
    2ac0:	ldr	r0, [pc, #36]	; (2ae8 <newFileName(char*)+0x78>)
    2ac2:	bl	2706 <Print::write(char const*) [clone .isra.0]>
    return 1;
}
    2ac6:	movs	r0, #1
    2ac8:	add	sp, #32
    2aca:	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    2acc:	strd	r1, r0, [sp]
    2ad0:	ldr	r2, [pc, #12]	; (2ae0 <newFileName(char*)+0x70>)
    2ad2:	mov	r0, r4
    2ad4:	ldr	r1, [pc, #24]	; (2af0 <newFileName(char*)+0x80>)
    2ad6:	bl	e214 <sprintf>
    2ada:	b.n	2ab0 <newFileName(char*)+0x40>
    2adc:	.word	0x20027f96
    2ae0:	.word	0x20007b5d
    2ae4:	.word	0x20007b5f
    2ae8:	.word	0x200089a4
    2aec:	.word	0x20007f9e
    2af0:	.word	0x20007b81

00002af4 <getAlarmTime(unsigned long)>:
#include "core_pins.h"

uint32_t getAlarmTime(uint32_t secs)
{
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2af4:	ldr	r2, [pc, #132]	; (2b7c <getAlarmTime(unsigned long)+0x88>)
    2af6:	udiv	r3, r0, r2
    2afa:	mls	r3, r2, r3, r0
    2afe:	mov.w	r2, #3600	; 0xe10
    2b02:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2b06:	ldr	r2, [pc, #120]	; (2b80 <getAlarmTime(unsigned long)+0x8c>)
    2b08:	ldr	r1, [r2, #0]
    2b0a:	cmp	r1, r3
{
    2b0c:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2b0e:	bhi.n	2b18 <getAlarmTime(unsigned long)+0x24>
    2b10:	ldr	r1, [pc, #112]	; (2b84 <getAlarmTime(unsigned long)+0x90>)
    2b12:	ldr	r1, [r1, #0]
    2b14:	cmp	r1, r3
    2b16:	bhi.n	2b40 <getAlarmTime(unsigned long)+0x4c>
    2b18:	ldr	r5, [pc, #108]	; (2b88 <getAlarmTime(unsigned long)+0x94>)
    2b1a:	ldr	r1, [r5, #0]
    2b1c:	cmp	r1, r3
    2b1e:	bhi.n	2b28 <getAlarmTime(unsigned long)+0x34>
    2b20:	ldr	r1, [pc, #104]	; (2b8c <getAlarmTime(unsigned long)+0x98>)
    2b22:	ldr	r1, [r1, #0]
    2b24:	cmp	r1, r3
    2b26:	bhi.n	2b40 <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2b28:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2b2a:	ldr	r1, [pc, #80]	; (2b7c <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2b2c:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2b2e:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2b32:	bhi.n	2b50 <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2b34:	ldr	r6, [pc, #76]	; (2b84 <getAlarmTime(unsigned long)+0x90>)
    2b36:	ldr	r6, [r6, #0]
    2b38:	cmp	r6, r3
    2b3a:	bhi.n	2b5e <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2b3c:	ldr	r0, [r5, #0]
    2b3e:	b.n	2b52 <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2b40:	ldr	r2, [pc, #76]	; (2b90 <getAlarmTime(unsigned long)+0x9c>)
    2b42:	ldr	r3, [r2, #0]
    2b44:	udiv	r3, r0, r3
    2b48:	ldr	r0, [r2, #0]
    2b4a:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2b4e:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2b50:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2b52:	mov.w	r3, #3600	; 0xe10
    2b56:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2b58:	mla	r0, r1, r4, r0
    2b5c:	b.n	2b4e <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2b5e:	ldr	r5, [pc, #44]	; (2b8c <getAlarmTime(unsigned long)+0x98>)
    2b60:	ldr	r6, [r5, #0]
    2b62:	cmp	r6, r3
    2b64:	bhi.n	2b4e <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2b66:	ldr	r0, [r2, #0]
    2b68:	ldr	r3, [r5, #0]
    2b6a:	subs	r0, r0, r3
    2b6c:	mov.w	r3, #3600	; 0xe10
    2b70:	muls	r0, r3
    2b72:	add.w	r0, r0, #86016	; 0x15000
    2b76:	add.w	r0, r0, #384	; 0x180
    2b7a:	b.n	2b58 <getAlarmTime(unsigned long)+0x64>
    2b7c:	.word	0x00015180
    2b80:	.word	0x20027f48
    2b84:	.word	0x20009324
    2b88:	.word	0x20009328
    2b8c:	.word	0x2000932c
    2b90:	.word	0x20009338

00002b94 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    2b94:	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
    2b96:	ldr	r3, [pc, #96]	; (2bf8 <do_hibernate(unsigned long)+0x64>)
    2b98:	ldr	r5, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2b9a:	ldr	r2, [r3, #76]	; 0x4c
    2b9c:	orr.w	r2, r2, #1
    2ba0:	str	r2, [r3, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2ba2:	ldr	r2, [r3, #56]	; 0x38
    2ba4:	bic.w	r2, r2, #2
    2ba8:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2baa:	ldr	r2, [r3, #56]	; 0x38
    2bac:	lsls	r2, r2, #30
    2bae:	bmi.n	2baa <do_hibernate(unsigned long)+0x16>

    __disable_irq();
    2bb0:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2bb2:	ldr	r4, [pc, #68]	; (2bf8 <do_hibernate(unsigned long)+0x64>)
    2bb4:	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2bb6:	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2bb8:	ldr	r1, [r4, #84]	; 0x54
    2bba:	ldr	r2, [r4, #80]	; 0x50
    2bbc:	cmp	r1, r3
    2bbe:	bne.n	2bb4 <do_hibernate(unsigned long)+0x20>
    2bc0:	cmp	r2, r0
    2bc2:	bne.n	2bb4 <do_hibernate(unsigned long)+0x20>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2bc4:	lsrs	r3, r3, #15

    //set alarm
    secs = getAlarmTime(secs);
    2bc6:	orr.w	r0, r3, r0, lsl #17
    2bca:	bl	2af4 <getAlarmTime(unsigned long)>

    SNVS_LPTAR = secs;
    2bce:	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2bd0:	ldr	r4, [pc, #36]	; (2bf8 <do_hibernate(unsigned long)+0x64>)
    2bd2:	ldr	r3, [r4, #88]	; 0x58
    2bd4:	cmp	r3, r0
    2bd6:	bne.n	2bd2 <do_hibernate(unsigned long)+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2bd8:	orr.w	r5, r5, #2
    2bdc:	str	r5, [r4, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2bde:	ldr	r3, [r4, #56]	; 0x38
    2be0:	lsls	r3, r3, #30
    2be2:	bpl.n	2bde <do_hibernate(unsigned long)+0x4a>

    __enable_irq();
    2be4:	cpsie	i
  
    // shutdown acq board
    acqPower(LOW);
    2be6:	movs	r0, #0
    2be8:	bl	32f4 <acqPower(int)>
    //
    SNVS_LPCR |= (1 << 6); // turn off power
    2bec:	ldr	r3, [r4, #56]	; 0x38
    2bee:	orr.w	r3, r3, #64	; 0x40
    2bf2:	str	r3, [r4, #56]	; 0x38
    while (1) asm("wfi");  
    2bf4:	wfi
    2bf6:	b.n	2bf4 <do_hibernate(unsigned long)+0x60>
    2bf8:	.word	0x400d4000

00002bfc <storeData(short)>:
{
    2bfc:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2bfe:	mov	r4, r0
{
    2c00:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2c02:	cmp	r0, #0
    2c04:	bne.n	2d06 <storeData(short)+0x10a>
        if(newDirectory(dirName))
    2c06:	ldr	r0, [pc, #488]	; (2df0 <storeData(short)+0x1f4>)
    2c08:	bl	2a04 <newDirectory(char*)>
    2c0c:	cmp	r0, #0
    2c0e:	beq.n	2ca6 <storeData(short)+0xaa>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2c10:	ldr	r5, [pc, #480]	; (2df4 <storeData(short)+0x1f8>)
    2c12:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2c14:	ldr.w	r1, [r3, #1152]	; 0x480
    2c18:	cbz	r1, 2c48 <storeData(short)+0x4c>
    return tmp.open(this, path, O_RDONLY);
    2c1a:	mov	r3, r4
    2c1c:	ldr	r2, [pc, #464]	; (2df0 <storeData(short)+0x1f4>)
    2c1e:	mov	r0, sp
    2c20:	str	r4, [sp, #0]
    2c22:	bl	709e <FatFile::open(FatVolume*, char const*, int)>
    2c26:	cbnz	r0, 2c82 <storeData(short)+0x86>
    2c28:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2c2a:	ldr.w	r1, [r3, #1152]	; 0x480
    2c2e:	cbnz	r1, 2c60 <storeData(short)+0x64>
    2c30:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2c34:	cbz	r0, 2c74 <storeData(short)+0x78>
  ExFatFile() {}
    2c36:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2c38:	movs	r3, #1
    2c3a:	add.w	r1, r0, #1096	; 0x448
    2c3e:	ldr	r2, [pc, #432]	; (2df0 <storeData(short)+0x1f4>)
    2c40:	mov	r0, sp
    2c42:	bl	640a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2c46:	b.n	2c72 <storeData(short)+0x76>
    2c48:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2c4c:	cmp	r0, #0
    2c4e:	beq.n	2c28 <storeData(short)+0x2c>
    return tmp.open(this, path, O_RDONLY);
    2c50:	mov	r3, r1
    2c52:	str	r1, [sp, #48]	; 0x30
    2c54:	ldr	r2, [pc, #408]	; (2df0 <storeData(short)+0x1f4>)
    2c56:	mov	r1, r0
    2c58:	mov	r0, sp
    2c5a:	bl	5b92 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c5e:	b.n	2c26 <storeData(short)+0x2a>
    2c60:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2c62:	ldr	r2, [pc, #396]	; (2df0 <storeData(short)+0x1f4>)
    2c64:	add.w	r1, r1, #1096	; 0x448
    2c68:	mov	r0, sp
    2c6a:	str	r3, [sp, #0]
    2c6c:	movs	r3, #1
    2c6e:	bl	71a6 <FatFile::mkdir(FatFile*, char const*, bool)>
    2c72:	cbnz	r0, 2c82 <storeData(short)+0x86>
    2c74:	ldr	r1, [pc, #384]	; (2df8 <storeData(short)+0x1fc>)
            {   Serial.println("Failing open file");
    2c76:	ldr	r0, [pc, #388]	; (2dfc <storeData(short)+0x200>)
    2c78:	bl	272a <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2c7c:	mov.w	r4, #4294967295
    2c80:	b.n	2de8 <storeData(short)+0x1ec>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2c82:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2c84:	ldr.w	r0, [r3, #1152]	; 0x480
    2c88:	cbz	r0, 2c96 <storeData(short)+0x9a>
    2c8a:	ldr	r1, [pc, #356]	; (2df0 <storeData(short)+0x1f4>)
    2c8c:	bl	7a00 <FatVolume::chdir(char const*)>
    2c90:	cbnz	r0, 2ca6 <storeData(short)+0xaa>
    2c92:	ldr	r1, [pc, #364]	; (2e00 <storeData(short)+0x204>)
    2c94:	b.n	2c76 <storeData(short)+0x7a>
    2c96:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2c9a:	cmp	r0, #0
    2c9c:	beq.n	2c92 <storeData(short)+0x96>
    2c9e:	ldr	r1, [pc, #336]	; (2df0 <storeData(short)+0x1f4>)
    2ca0:	bl	5fdc <ExFatVolume::chdir(char const*)>
    2ca4:	b.n	2c90 <storeData(short)+0x94>
        if(newFileName(fileName))
    2ca6:	ldr	r0, [pc, #348]	; (2e04 <storeData(short)+0x208>)
    2ca8:	bl	2a70 <newFileName(char*)>
    2cac:	cmp	r0, #0
    2cae:	beq.n	2c7c <storeData(short)+0x80>
            file = sd->open(fileName, FILE_WRITE); 
    2cb0:	ldr	r1, [pc, #320]	; (2df4 <storeData(short)+0x1f8>)
    2cb2:	movw	r3, #16898	; 0x4202
    2cb6:	ldr	r2, [pc, #332]	; (2e04 <storeData(short)+0x208>)
    2cb8:	mov	r0, sp
    2cba:	ldr	r1, [r1, #0]
    2cbc:	bl	8390 <FsVolume::open(char const*, int)>
class Print
    2cc0:	ldr	r4, [pc, #324]	; (2e08 <storeData(short)+0x20c>)
    2cc2:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2cc4:	add	r1, sp, #16
    2cc6:	add.w	r0, r4, #16
    2cca:	str	r3, [r4, #4]
    2ccc:	ldr	r3, [sp, #8]
    2cce:	str	r3, [r4, #8]
    2cd0:	ldrb.w	r3, [sp, #12]
    2cd4:	strb	r3, [r4, #12]
    2cd6:	bl	8186 <FsBaseFile::operator=(FsBaseFile const&)>
    2cda:	mov	r0, sp
    2cdc:	bl	ed0 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2ce0:	ldr	r3, [r4, #72]	; 0x48
    2ce2:	cbz	r3, 2cfc <storeData(short)+0x100>
    {   nbuf=0;
    2ce4:	ldr	r3, [pc, #292]	; (2e0c <storeData(short)+0x210>)
    2ce6:	movs	r2, #0
    2ce8:	str	r2, [r3, #0]
        if(proc==0)
    2cea:	ldr	r3, [pc, #292]	; (2e10 <storeData(short)+0x214>)
    2cec:	ldrh	r3, [r3, #0]
    2cee:	sxth	r3, r3
    2cf0:	cbz	r3, 2d4c <storeData(short)+0x150>
          makeHeader(fileHeader);
    2cf2:	ldr	r0, [pc, #288]	; (2e14 <storeData(short)+0x218>)
    2cf4:	bl	28dc <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2cf8:	ldr	r1, [pc, #280]	; (2e14 <storeData(short)+0x218>)
    2cfa:	b.n	2d5e <storeData(short)+0x162>
    2cfc:	ldr	r3, [r4, #76]	; 0x4c
    2cfe:	cmp	r3, #0
    2d00:	bne.n	2ce4 <storeData(short)+0xe8>
            {   Serial.println("Failing open file");
    2d02:	ldr	r1, [pc, #276]	; (2e18 <storeData(short)+0x21c>)
    2d04:	b.n	2c76 <storeData(short)+0x7a>
    if(status==OPENED) // file is open: write first record (header)
    2d06:	cmp	r0, #1
    2d08:	beq.n	2ce4 <storeData(short)+0xe8>
    if(status==RUNNING) // file is open and header written: store data records
    2d0a:	cmp	r0, #2
    2d0c:	beq.n	2d6e <storeData(short)+0x172>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2d0e:	subs	r3, r4, #3
    2d10:	uxth	r3, r3
    2d12:	cmp	r3, #2
    2d14:	bhi.n	2de8 <storeData(short)+0x1ec>
    2d16:	ldr	r3, [pc, #240]	; (2e08 <storeData(short)+0x20c>)
    2d18:	ldr	r2, [r3, #72]	; 0x48
    2d1a:	cbnz	r2, 2d20 <storeData(short)+0x124>
    2d1c:	ldr	r3, [r3, #76]	; 0x4c
    2d1e:	cbz	r3, 2d40 <storeData(short)+0x144>
        {   if(proc==0)
    2d20:	ldr	r3, [pc, #236]	; (2e10 <storeData(short)+0x214>)
    2d22:	ldrh	r3, [r3, #0]
    2d24:	sxth	r3, r3
    2d26:	cbnz	r3, 2d3a <storeData(short)+0x13e>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2d28:	ldr	r3, [pc, #224]	; (2e0c <storeData(short)+0x210>)
    2d2a:	mov.w	r0, #4608	; 0x1200
    2d2e:	ldr	r3, [r3, #0]
    2d30:	muls	r0, r3
    2d32:	bl	2868 <headerUpdate(long)>
              writeHeader(hdr);
    2d36:	bl	287c <writeHeader(char*)>
            file.close();
    2d3a:	ldr	r0, [pc, #224]	; (2e1c <storeData(short)+0x220>)
    2d3c:	bl	815c <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2d40:	cmp	r4, #4
    2d42:	bne.n	2de0 <storeData(short)+0x1e4>
        { do_hibernate(t_rep);
    2d44:	ldr	r3, [pc, #216]	; (2e20 <storeData(short)+0x224>)
    2d46:	ldr	r0, [r3, #0]
    2d48:	bl	2b94 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2d4c:	ldr	r3, [pc, #212]	; (2e24 <storeData(short)+0x228>)
    2d4e:	movs	r1, #1
    2d50:	movs	r2, #24
    2d52:	ldr	r0, [r3, #0]
    2d54:	ldr	r3, [pc, #208]	; (2e28 <storeData(short)+0x22c>)
    2d56:	ldr	r3, [r3, #0]
    2d58:	bl	2794 <headerInit(long, long, long, int)>
    2d5c:	mov	r1, r0
        if(file.write(hdr,512) < 512) 
    2d5e:	mov.w	r2, #512	; 0x200
    2d62:	ldr	r0, [pc, #184]	; (2e1c <storeData(short)+0x220>)
    2d64:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2d68:	cmp.w	r0, #512	; 0x200
    2d6c:	bcc.n	2ddc <storeData(short)+0x1e0>
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2d6e:	mov.w	r2, #4608	; 0x1200
    2d72:	ldr	r1, [pc, #184]	; (2e2c <storeData(short)+0x230>)
    2d74:	ldr	r0, [pc, #164]	; (2e1c <storeData(short)+0x220>)
    2d76:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2d7a:	cmp.w	r0, #4608	; 0x1200
    2d7e:	mov	r4, r0
    2d80:	ldr	r5, [pc, #136]	; (2e0c <storeData(short)+0x210>)
    2d82:	bcs.n	2dd2 <storeData(short)+0x1d6>
	size_t print(const char s[])			{ return write(s); }
    2d84:	ldr	r1, [pc, #168]	; (2e30 <storeData(short)+0x234>)
    2d86:	ldr	r0, [pc, #116]	; (2dfc <storeData(short)+0x200>)
    2d88:	bl	2706 <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2d8c:	movs	r3, #0
    2d8e:	movs	r2, #10
    2d90:	mov	r1, r4
    2d92:	ldr	r0, [pc, #104]	; (2dfc <storeData(short)+0x200>)
          status=DOCLOSE; 
    2d94:	movs	r4, #3
    2d96:	bl	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    2d9a:	ldr	r1, [pc, #152]	; (2e34 <storeData(short)+0x238>)
    2d9c:	ldr	r0, [pc, #92]	; (2dfc <storeData(short)+0x200>)
    2d9e:	bl	2706 <Print::write(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2da2:	movs	r1, #2
    2da4:	ldr	r0, [pc, #84]	; (2dfc <storeData(short)+0x200>)
    2da6:	bl	c11a <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2daa:	ldr	r0, [pc, #80]	; (2dfc <storeData(short)+0x200>)
    2dac:	bl	c12c <Print::println()>
        disk_count++;
    2db0:	ldr	r2, [pc, #132]	; (2e38 <storeData(short)+0x23c>)
    2db2:	ldr	r3, [r2, #0]
    2db4:	adds	r3, #1
    2db6:	str	r3, [r2, #0]
    2db8:	mov.w	r2, #1000	; 0x3e8
    2dbc:	ldr	r3, [r5, #0]
    2dbe:	udiv	r1, r3, r2
    2dc2:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2dc6:	cmp	r3, #0
    2dc8:	bne.n	2d0e <storeData(short)+0x112>
    BaseFile::sync();
    2dca:	ldr	r0, [pc, #80]	; (2e1c <storeData(short)+0x220>)
    2dcc:	bl	273c <FsBaseFile::sync()>
  }
    2dd0:	b.n	2d0e <storeData(short)+0x112>
          nbuf++;
    2dd2:	ldr	r3, [r5, #0]
    2dd4:	movs	r4, #2
    2dd6:	adds	r3, #1
    2dd8:	str	r3, [r5, #0]
    2dda:	b.n	2db0 <storeData(short)+0x1b4>
        { status = DOCLOSE;
    2ddc:	movs	r4, #3
    2dde:	b.n	2d0e <storeData(short)+0x112>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    2de0:	subs	r4, #3
    2de2:	it	ne
    2de4:	movne.w	r4, #4294967295
}
    2de8:	mov	r0, r4
    2dea:	add	sp, #84	; 0x54
    2dec:	pop	{r4, r5, pc}
    2dee:	nop
    2df0:	.word	0x20028064
    2df4:	.word	0x2000931c
    2df8:	.word	0x20007e4c
    2dfc:	.word	0x200089a4
    2e00:	.word	0x20007e58
    2e04:	.word	0x200280b4
    2e08:	.word	0x20027784
    2e0c:	.word	0x20027800
    2e10:	.word	0x20027f96
    2e14:	.word	0x2000cfd0
    2e18:	.word	0x20007e64
    2e1c:	.word	0x20027794
    2e20:	.word	0x20009338
    2e24:	.word	0x20009310
    2e28:	.word	0x2000bdc8
    2e2c:	.word	0x2000bdd0
    2e30:	.word	0x20007e76
    2e34:	.word	0x20007fa6
    2e38:	.word	0x20027764

00002e3c <saveData(short)>:
    if(status==STOPPED) 
    2e3c:	adds	r3, r0, #1
{
    2e3e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e42:	mov	r4, r0
    if(status==STOPPED) 
    2e44:	bne.n	2e74 <saveData(short)+0x38>
      while(queue_isBusy()); //wait if acq writes to queue
    2e46:	bl	25bc <queue_isBusy()>
    2e4a:	mov	r5, r0
    2e4c:	cmp	r0, #0
    2e4e:	bne.n	2e46 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    2e50:	ldr	r0, [pc, #236]	; (2f40 <saveData(short)+0x104>)
    2e52:	bl	2624 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2e56:	ldr	r3, [pc, #232]	; (2f40 <saveData(short)+0x104>)
    2e58:	ldr	r2, [pc, #232]	; (2f44 <saveData(short)+0x108>)
    2e5a:	ldr.w	r1, [r3], #4
    2e5e:	str.w	r1, [r2, r5, lsl #2]
    2e62:	adds	r5, #1
    2e64:	cmp	r5, #8
    2e66:	bne.n	2e5a <saveData(short)+0x1e>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2e68:	ldr	r3, [pc, #220]	; (2f48 <saveData(short)+0x10c>)
    2e6a:	str.w	r5, [r3, #132]	; 0x84
}
    2e6e:	mov	r0, r4
    2e70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2e74:	ldr	r3, [pc, #208]	; (2f48 <saveData(short)+0x10c>)
    2e76:	movs	r2, #8
    if(status<CLOSED) return status; // we are stopped: don't do anything
    2e78:	cmp	r0, #0
    2e7a:	str.w	r2, [r3, #136]	; 0x88
    2e7e:	blt.n	2e6e <saveData(short)+0x32>
    status=checkEndOfFile(status);
    2e80:	bl	2994 <checkEndOfFile(short)>
    2e84:	mov	r4, r0
    if(getDataCount()>=nblocks)
    2e86:	bl	25a0 <getDataCount()>
    2e8a:	cmp	r0, #8
    2e8c:	bls.n	2f36 <saveData(short)+0xfa>
      digitalWrite(13,HIGH);
    2e8e:	movs	r1, #1
    2e90:	movs	r0, #13
    2e92:	bl	b8f8 <digitalWrite>
      if(proc==0)
    2e96:	ldr	r3, [pc, #180]	; (2f4c <saveData(short)+0x110>)
    2e98:	ldrh	r5, [r3, #0]
    2e9a:	sxth	r5, r5
    2e9c:	cbnz	r5, 2f04 <saveData(short)+0xc8>
    2e9e:	ldr	r7, [pc, #160]	; (2f40 <saveData(short)+0x104>)
    2ea0:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2ea2:	bl	25bc <queue_isBusy()>
    2ea6:	mov	r6, r0
    2ea8:	cmp	r0, #0
    2eaa:	bne.n	2ea2 <saveData(short)+0x66>
        for(int ii=0; ii<nblocks; ii++)
    2eac:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    2eae:	mov	r0, r8
    2eb0:	bl	2624 <pullData(unsigned long*)>
        for(int ii=0; ii<nblocks; ii++)
    2eb4:	add.w	r8, r8, #512	; 0x200
    2eb8:	cmp	r5, #9
    2eba:	bne.n	2ea2 <saveData(short)+0x66>
    2ebc:	ldr	r2, [pc, #128]	; (2f40 <saveData(short)+0x104>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2ebe:	mov	r3, r6
    2ec0:	ldr	r1, [pc, #128]	; (2f44 <saveData(short)+0x108>)
    2ec2:	ldr.w	r0, [r2], #4
    2ec6:	str.w	r0, [r1, r3, lsl #2]
    2eca:	adds	r3, #1
    2ecc:	cmp	r3, #8
    2ece:	bne.n	2ec2 <saveData(short)+0x86>
    2ed0:	ldr	r3, [pc, #124]	; (2f50 <saveData(short)+0x114>)
            outptr[jj++]=(inpp[ii]) &0xff;
    2ed2:	ldr.w	r2, [r7], #4
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    2ed6:	adds	r6, #3
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    2ed8:	adds	r3, #3
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    2eda:	lsrs	r1, r2, #8
            outptr[jj++]=(inpp[ii]) &0xff;
    2edc:	strb.w	r2, [r3, #-3]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    2ee0:	cmp.w	r6, #4608	; 0x1200
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    2ee4:	mov.w	r2, r2, lsr #16
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    2ee8:	strb.w	r1, [r3, #-2]
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    2eec:	strb.w	r2, [r3, #-1]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    2ef0:	bne.n	2ed2 <saveData(short)+0x96>
      if(haveStore)
    2ef2:	ldr	r3, [pc, #96]	; (2f54 <saveData(short)+0x118>)
    2ef4:	ldr	r3, [r3, #0]
    2ef6:	cmp	r3, #0
    2ef8:	beq.n	2e6e <saveData(short)+0x32>
        status=storeData(status);
    2efa:	mov	r0, r4
}
    2efc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    2f00:	b.w	2bfc <storeData(short)>
    2f04:	ldr	r6, [pc, #72]	; (2f50 <saveData(short)+0x114>)
        for(int ii=0; ii<NDBL; ii++)
    2f06:	movs	r7, #0
      if(proc==0)
    2f08:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2f0a:	bl	25bc <queue_isBusy()>
    2f0e:	mov	r5, r0
    2f10:	cmp	r0, #0
    2f12:	bne.n	2f0a <saveData(short)+0xce>
        for(int ii=0; ii<NDBL; ii++)
    2f14:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    2f16:	mov	r0, r8
    2f18:	bl	2624 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    2f1c:	add.w	r8, r8, #512	; 0x200
    2f20:	cmp	r7, #12
    2f22:	bne.n	2f0a <saveData(short)+0xce>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    2f24:	ldr	r3, [pc, #28]	; (2f44 <saveData(short)+0x108>)
    2f26:	ldr.w	r2, [r6], #4
    2f2a:	str.w	r2, [r3, r5, lsl #2]
    2f2e:	adds	r5, #1
    2f30:	cmp	r5, #8
    2f32:	bne.n	2f26 <saveData(short)+0xea>
    2f34:	b.n	2ef2 <saveData(short)+0xb6>
      digitalWrite(13,LOW);
    2f36:	movs	r1, #0
    2f38:	movs	r0, #13
    2f3a:	bl	b8f8 <digitalWrite>
    2f3e:	b.n	2e6e <saveData(short)+0x32>
    2f40:	.word	0x200251dc
    2f44:	.word	0x200277d8
    2f48:	.word	0x42004000
    2f4c:	.word	0x20027f96
    2f50:	.word	0x2000bdd0
    2f54:	.word	0x200277d4

00002f58 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    2f58:	ldr	r0, [pc, #28]	; (2f78 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2f5a:	movs	r3, #0
    2f5c:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    2f60:	ldr	r1, [pc, #24]	; (2f7c <_GLOBAL__sub_I_t_acq+0x24>)
    2f62:	strb	r3, [r0, #12]
    2f64:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    2f68:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2f6c:	ldr	r3, [pc, #16]	; (2f80 <_GLOBAL__sub_I_t_acq+0x28>)
    2f6e:	ldr	r2, [pc, #20]	; (2f84 <_GLOBAL__sub_I_t_acq+0x2c>)
    2f70:	str	r3, [r0, #0]
    2f72:	b.w	c358 <__aeabi_atexit>
    2f76:	nop
    2f78:	.word	0x20027784
    2f7c:	.word	0x00000ed1
    2f80:	.word	0x20000548
    2f84:	.word	0x20008d80

00002f88 <filing_init()>:
{
    2f88:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f8c:	ldr	r3, [pc, #132]	; (3014 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    2f8e:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f90:	ldr	r2, [pc, #132]	; (3018 <filing_init()+0x90>)
    2f92:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    2f96:	ldr.w	r9, [pc, #156]	; 3034 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f9a:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    2f9e:	ldr.w	r8, [pc, #152]	; 3038 <filing_init()+0xb0>
    2fa2:	ldr	r7, [pc, #120]	; (301c <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2fa4:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    2fa6:	ldr	r3, [pc, #120]	; (3020 <filing_init()+0x98>)
    2fa8:	ldr	r2, [pc, #120]	; (3024 <filing_init()+0x9c>)
    2faa:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    2fac:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    2fb0:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    2fb2:	movs	r1, #0
    2fb4:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    2fb8:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    2fbc:	strb.w	r1, [r5, #1224]	; 0x4c8
    2fc0:	mov	r0, r6
    2fc2:	bl	9578 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2fc6:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2fc8:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fcc:	bl	8c74 <SdioCard::errorCode() const>
    2fd0:	cbnz	r0, 2ff4 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2fd2:	movs	r3, #1
    2fd4:	ldr.w	r1, [r5, #1164]	; 0x48c
    2fd8:	mov	r0, r5
    2fda:	mov	r2, r3
    2fdc:	bl	82bc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2fe0:	cbz	r0, 2ff4 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    2fe2:	ldr	r0, [pc, #56]	; (301c <filing_init()+0x94>)
    2fe4:	ldr	r1, [pc, #64]	; (3028 <filing_init()+0xa0>)
    2fe6:	bl	272a <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    2fea:	movs	r0, #1
    2fec:	ldr	r3, [pc, #60]	; (302c <filing_init()+0xa4>)
    2fee:	str	r0, [r3, #0]
}
    2ff0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    2ff4:	mov	r1, r8
    2ff6:	mov	r0, r7
    2ff8:	bl	272a <Print::println(char const*) [clone .isra.0]>
      delay(100);
    2ffc:	movs	r0, #100	; 0x64
    2ffe:	bl	b1a8 <delay>
  for(int ii=0; ii<5;ii++)
    3002:	subs	r4, #1
    3004:	bne.n	2fac <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    3006:	ldr	r0, [pc, #20]	; (301c <filing_init()+0x94>)
    3008:	ldr	r1, [pc, #36]	; (3030 <filing_init()+0xa8>)
    300a:	bl	272a <Print::println(char const*) [clone .isra.0]>
  return 0;
    300e:	mov	r0, r4
    3010:	b.n	2ff0 <filing_init()+0x68>
    3012:	nop
    3014:	.word	0x401f4400
    3018:	.word	0x2000bdc8
    301c:	.word	0x200089a4
    3020:	.word	0x200271fc
    3024:	.word	0x00002675
    3028:	.word	0x20007b1f
    302c:	.word	0x200277d4
    3030:	.word	0x20007b41
    3034:	.word	0x2000931c
    3038:	.word	0x20007b31

0000303c <compress(void*)>:
int32_t tempData0[NCHAN_ACQ];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    303c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3040:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3042:	bl	b3a4 <rtc_get>
    3046:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    3048:	bl	b15c <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
    304c:	ldr	r3, [pc, #604]	; (32ac <compress(void*)+0x270>)
    304e:	add.w	r6, r4, #508	; 0x1fc
    3052:	ldr	r1, [pc, #604]	; (32b0 <compress(void*)+0x274>)
  t1 = micros();
    3054:	mov	sl, r0
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
    3056:	ldr	r2, [r3, #0]
    3058:	ldr	r3, [r4, #0]
    305a:	str	r3, [r2, #0]
    305c:	str	r3, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] = (din[ii] - din[ii - NCHAN_ACQ]);
    305e:	mov	r3, r4
    3060:	mov	r1, r2
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
    3062:	mov	r4, r2
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] = (din[ii] - din[ii - NCHAN_ACQ]);
    3064:	mov	r5, r3
    3066:	adds	r3, #4
    3068:	ldrd	r5, r0, [r5]
    306c:	cmp	r6, r3
    306e:	sub.w	r0, r0, r5
    3072:	str.w	r0, [r4, #4]!
    3076:	bne.n	3064 <compress(void*)+0x28>
    3078:	add.w	r2, r2, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
    307c:	movs	r3, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    307e:	ldr.w	r0, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3082:	cmp	r0, #0
    3084:	it	lt
    3086:	neglt	r0, r0
    3088:	cmp	r3, r0
    308a:	it	lt
    308c:	movlt	r3, r0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    308e:	cmp	r1, r2
    3090:	bne.n	307e <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3092:	movs	r4, #2
    3094:	movs	r1, #1
    3096:	subs	r2, r4, #1
    3098:	lsl.w	r2, r1, r2
    309c:	cmp	r2, r3
    309e:	bgt.n	30a6 <compress(void*)+0x6a>
    30a0:	adds	r4, #1
    30a2:	cmp	r4, #24
    30a4:	bne.n	3096 <compress(void*)+0x5a>
  // compression factor (32/nb)
  proc_stat[nb-1]++;
    30a6:	ldr	r2, [pc, #524]	; (32b4 <compress(void*)+0x278>)
    30a8:	subs	r1, r4, #1
    30aa:	ldr.w	r8, [pc, #540]	; 32c8 <compress(void*)+0x28c>
    30ae:	ldr.w	r3, [r2, r1, lsl #2]
    30b2:	mov	fp, r8
    30b4:	adds	r3, #1
    30b6:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    30ba:	ldr	r3, [pc, #508]	; (32b8 <compress(void*)+0x27c>)
    30bc:	ldr	r2, [r3, #0]
    30be:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    30c0:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    30c2:	it	hi
    30c4:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    30c6:	movs	r3, #1
    30c8:	lsl.w	r0, r3, r4
    30cc:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    30ce:	ldr.w	r1, [r2, #4]!
    30d2:	adds	r3, #1
    30d4:	ands	r1, r0
    30d6:	cmp	r3, #128	; 0x80
    30d8:	str	r1, [r2, #0]
    30da:	bne.n	30ce <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    30dc:	ldr	r5, [pc, #476]	; (32bc <compress(void*)+0x280>)
    30de:	mov.w	r2, #512	; 0x200
    30e2:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    30e4:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    30e8:	mov	r0, r5
    30ea:	bl	9c1c <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    30ee:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    30f2:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    30f4:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    30f8:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    30fa:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    30fe:	ldr	r2, [pc, #448]	; (32c0 <compress(void*)+0x284>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3100:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    3102:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    3104:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    3108:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    310c:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    3110:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    3112:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3114:	str	r3, [r5, #24]
    3116:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3118:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    311c:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    311e:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3120:	str.w	r3, [fp]
  int nx = MBIT;
    3124:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3126:	str	r0, [r5, #20]
  {   nx -= nb;
    3128:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    312c:	ldr.w	sl, [r5, r1, lsl #2]
    3130:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3134:	cmp.w	lr, #0
    3138:	ble.n	3182 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    313a:	lsl.w	r2, r2, lr
    313e:	mov	r3, lr
    3140:	orr.w	r2, r2, sl
    3144:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3148:	add.w	ip, ip, #1
    314c:	cmp.w	ip, #128	; 0x80
    3150:	bne.n	3128 <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3152:	ldr.w	r8, [pc, #376]	; 32cc <compress(void*)+0x290>
    3156:	ldr.w	r4, [r8]
    315a:	add.w	r9, r4, r6
    315e:	cmp.w	r9, #128	; 0x80
    3162:	bgt.n	31b2 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3164:	ldr	r0, [pc, #348]	; (32c4 <compress(void*)+0x288>)
    3166:	lsls	r2, r6, #2
    3168:	ldr	r1, [pc, #336]	; (32bc <compress(void*)+0x280>)
    316a:	add.w	r0, r0, r4, lsl #2
    316e:	bl	9c60 <memcpy>
    3172:	str.w	r9, [r8]
  int ret=1;
    3176:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    317a:	mov	r0, r9
    317c:	add	sp, #12
    317e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3182:	add.w	r9, r1, #1
      else if(nx==0) 
    3186:	bne.n	3196 <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    3188:	orr.w	r2, sl, r2
          nx=MBIT;
    318c:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    318e:	str.w	r2, [r5, r1, lsl #2]
    3192:	mov	r1, r9
    3194:	b.n	3148 <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3196:	subs	r3, r4, r3
    3198:	lsr.w	r3, r2, r3
    319c:	orr.w	r3, r3, sl
    31a0:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    31a4:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    31a8:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    31aa:	lsls	r2, r3
    31ac:	str.w	r2, [r5, r9, lsl #2]
    31b0:	b.n	3148 <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    31b2:	cmp	r4, #122	; 0x7a
    31b4:	ble.n	3200 <compress(void*)+0x1c4>
    31b6:	movs	r2, #0
    31b8:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    31ba:	ldr	r1, [pc, #264]	; (32c4 <compress(void*)+0x288>)
    31bc:	mov	r0, r2
    31be:	cmp	r3, #127	; 0x7f
    31c0:	bls.n	31f6 <compress(void*)+0x1ba>
    31c2:	cmp	r4, #128	; 0x80
    31c4:	rsb	r3, r4, #128	; 0x80
    31c8:	it	gt
    31ca:	movgt	r3, #0
    31cc:	add	r3, r4
    31ce:	cbz	r2, 31d4 <compress(void*)+0x198>
    31d0:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    31d4:	ldr	r0, [pc, #236]	; (32c4 <compress(void*)+0x288>)
    31d6:	bl	25c8 <pushData(unsigned long*)>
    31da:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    31de:	mov.w	r2, r6, lsl #2
    31e2:	ldr	r1, [pc, #216]	; (32bc <compress(void*)+0x280>)
    31e4:	ldr	r0, [pc, #220]	; (32c4 <compress(void*)+0x288>)
      if(!pushData(dout)) ret = 0;
    31e6:	it	ne
    31e8:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    31ec:	bl	9c60 <memcpy>
    31f0:	str.w	r6, [r8]
    31f4:	b.n	317a <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    31f6:	str.w	r0, [r1, r3, lsl #2]
    31fa:	movs	r2, #1
    31fc:	adds	r3, #1
    31fe:	b.n	31be <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3200:	rsb	r3, r4, #122	; 0x7a
    3204:	ldr	r1, [pc, #180]	; (32bc <compress(void*)+0x280>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3206:	ldr	r2, [pc, #188]	; (32c4 <compress(void*)+0x288>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3208:	orr.w	r3, r3, r0, lsl #16
    320c:	mov	r0, r1
    320e:	str	r3, [r5, #20]
    3210:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3212:	ldr.w	ip, [r0], #4
    3216:	str.w	ip, [r2, r3, lsl #2]
    321a:	adds	r3, #1
    321c:	cmp	r3, #128	; 0x80
    321e:	bne.n	3212 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    3220:	ldr	r0, [pc, #160]	; (32c4 <compress(void*)+0x288>)
    3222:	rsb	sl, r4, #128	; 0x80
    3226:	str	r1, [sp, #4]
    3228:	str.w	r3, [r8]
    322c:	bl	25c8 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3230:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3232:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    3236:	subs.w	r9, r0, #0
    323a:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    323c:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3240:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3244:	it	ne
    3246:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    324a:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    324c:	lsls	r3, r3, #16
    324e:	orrs	r3, r7
    3250:	ldr	r7, [pc, #112]	; (32c4 <compress(void*)+0x288>)
    3252:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3254:	mov	r2, r7
    3256:	movs	r3, #0
    3258:	str.w	r3, [r8]
    325c:	subs	r0, #1
    325e:	bne.n	328e <compress(void*)+0x252>
    3260:	cbz	r3, 3268 <compress(void*)+0x22c>
    3262:	movs	r3, #6
    3264:	str.w	r3, [r8]
    3268:	ldr.w	r1, [r8]
    326c:	movs	r3, #0
    326e:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3272:	cmp	sl, r6
    3274:	blt.n	329a <compress(void*)+0x25e>
    3276:	subs	r4, #128	; 0x80
    3278:	add	r4, r6
    327a:	cmp	r6, fp
    327c:	it	lt
    327e:	movlt	r4, #0
    3280:	add	r4, r1
    3282:	cmp	r3, #0
    3284:	beq.w	317a <compress(void*)+0x13e>
    3288:	str.w	r4, [r8]
  return ret;
    328c:	b.n	317a <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    328e:	ldr.w	r3, [r1], #4
    3292:	str.w	r3, [r7], #4
    3296:	movs	r3, #1
    3298:	b.n	325c <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    329a:	ldr.w	r3, [r5, sl, lsl #2]
    329e:	add.w	sl, sl, #1
    32a2:	str.w	r3, [r2], #4
    32a6:	movs	r3, #1
    32a8:	b.n	3272 <compress(void*)+0x236>
    32aa:	nop
    32ac:	.word	0x2000933c
    32b0:	.word	0x20027f50
    32b4:	.word	0x20027824
    32b8:	.word	0x200277f8
    32bc:	.word	0x20026bf4
    32c0:	.word	0x20009342
    32c4:	.word	0x200269e4
    32c8:	.word	0x20026ff4
    32cc:	.word	0x20027248

000032d0 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    32d0:	push	{r0, r1, r4, lr}
    32d2:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    32d4:	cbz	r1, 32f0 <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    32d6:	mov	r0, r1
    32d8:	str	r1, [sp, #4]
    32da:	bl	ec80 <strlen>
    32de:	ldr	r3, [r4, #0]
    32e0:	mov	r2, r0
    32e2:	ldr	r1, [sp, #4]
    32e4:	ldr	r3, [r3, #4]
    32e6:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    32e8:	add	sp, #8
    32ea:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    32ee:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    32f0:	add	sp, #8
    32f2:	pop	{r4, pc}

000032f4 <acqPower(int)>:
            digitalWrite(ADC_EN,flag);
    32f4:	uxtb	r1, r0
    32f6:	movs	r0, #33	; 0x21
    32f8:	b.w	b8f8 <digitalWrite>

000032fc <adcReset()>:
    { digitalWrite(ADC_SHDNZ,LOW); 
    32fc:	movs	r1, #0
    32fe:	movs	r0, #32
    3300:	b.w	b8f8 <digitalWrite>

00003304 <adcStart()>:
    { digitalWrite(ADC_SHDNZ,HIGH); 
    3304:	movs	r1, #1
    3306:	movs	r0, #32
    3308:	b.w	b8f8 <digitalWrite>

0000330c <adc_init()>:
    {
    330c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
            pinMode(ADC_EN,OUTPUT);
    3310:	movs	r1, #1
    3312:	movs	r0, #33	; 0x21
    3314:	bl	b938 <pinMode>
        acqPower(HIGH);
    3318:	movs	r0, #1
    331a:	bl	32f4 <acqPower(int)>
        pinMode(ADC_SHDNZ,OUTPUT);
    331e:	movs	r1, #1
    3320:	movs	r0, #32
    3322:	bl	b938 <pinMode>
        adcReset();
    3326:	bl	32fc <adcReset()>
        delay(100);
    332a:	movs	r0, #100	; 0x64
    332c:	bl	b1a8 <delay>
        adcStart();
    3330:	bl	3304 <adcStart()>
        i2c_class i2c(&Wire,100'000); // SCL:19; SDA:18
    3334:	ldr	r2, [pc, #324]	; (347c <adc_init()+0x170>)
    3336:	ldr	r1, [pc, #328]	; (3480 <adc_init()+0x174>)
    3338:	add	r0, sp, #4
    333a:	bl	34a8 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        delay(200);
    333e:	movs	r0, #200	; 0xc8
    3340:	bl	b1a8 <delay>
            if(i2c.exist(i2c_addr[ii]))
    3344:	movs	r1, #76	; 0x4c
    3346:	add	r0, sp, #4
    3348:	bl	34cc <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    334c:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    334e:	cmp	r0, #0
    3350:	beq.w	3478 <adc_init()+0x16c>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3354:	ldr	r1, [pc, #300]	; (3484 <adc_init()+0x178>)
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3356:	ldr	r0, [pc, #304]	; (3488 <adc_init()+0x17c>)
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3358:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    335a:	bl	c164 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    335e:	movs	r3, #129	; 0x81
    3360:	movs	r2, #2
    3362:	movs	r1, #76	; 0x4c
    3364:	add	r0, sp, #4
    3366:	ldr	r5, [pc, #292]	; (348c <adc_init()+0x180>)
    3368:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    336c:	movs	r3, #48	; 0x30
    336e:	movs	r2, #7
    3370:	movs	r1, #76	; 0x4c
    3372:	add	r0, sp, #4
    3374:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3378:	movs	r3, #0
    337a:	movs	r2, #8
    337c:	movs	r1, #76	; 0x4c
    337e:	add	r0, sp, #4
    3380:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3384:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    3386:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3388:	ldrb.w	r3, [r5], #1
    338c:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    338e:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3390:	add	r0, sp, #4
    3392:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    3396:	cmp	r4, #15
    3398:	bne.n	3384 <adc_init()+0x78>
            i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
    339a:	movs	r3, #144	; 0x90
    339c:	movs	r2, #115	; 0x73
    339e:	movs	r1, #76	; 0x4c
    33a0:	add	r0, sp, #4
    33a2:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    33a6:	movs	r3, #144	; 0x90
    33a8:	movs	r2, #116	; 0x74
    33aa:	movs	r1, #76	; 0x4c
    33ac:	add	r0, sp, #4
    33ae:	ldr	r6, [pc, #224]	; (3490 <adc_init()+0x184>)
    33b0:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    33b4:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0x60);			//Power-up ADC and PLL by I2C write into P0_R117 
    33b6:	movs	r3, #96	; 0x60
    33b8:	movs	r2, #117	; 0x75
    33ba:	movs	r1, #76	; 0x4c
    33bc:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    33be:	ldr.w	r8, [pc, #228]	; 34a4 <adc_init()+0x198>
            i2c.write(i2c_addr[ii],0x75,0x60);			//Power-up ADC and PLL by I2C write into P0_R117 
    33c2:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    33c6:	ldr	r7, [pc, #204]	; (3494 <adc_init()+0x188>)
            i2c.write(i2c_addr[ii],0x3B,0x00); // 0: 2.75V; 1: 2.5V; 2: 1.375V
    33c8:	movs	r3, #0
    33ca:	movs	r2, #59	; 0x3b
    33cc:	movs	r1, #76	; 0x4c
    33ce:	add	r0, sp, #4
    33d0:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    33d4:	ldrb.w	r4, [r6], #1
    33d8:	movs	r3, #136	; 0x88
    33da:	movs	r1, #76	; 0x4c
    33dc:	add	r0, sp, #4
    33de:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    33e0:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    33e2:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    33e6:	ldrh.w	r3, [r8]
    33ea:	adds	r2, r4, #1
    33ec:	movs	r1, #76	; 0x4c
    33ee:	uxtb	r3, r3
    33f0:	add	r0, sp, #4
    33f2:	uxtb	r2, r2
    33f4:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    33f8:	ldrh	r3, [r7, #0]
    33fa:	adds	r2, r4, #2
    33fc:	movs	r1, #76	; 0x4c
    33fe:	subs	r3, #55	; 0x37
    3400:	add	r0, sp, #4
    3402:	uxtb	r2, r2
    3404:	uxtb	r3, r3
    3406:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    340a:	adds	r2, r4, #3
    340c:	movs	r3, #128	; 0x80
    340e:	movs	r1, #76	; 0x4c
    3410:	uxtb	r2, r2
    3412:	add	r0, sp, #4
    3414:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    3418:	adds	r2, r4, #4
    341a:	movs	r3, #0
    341c:	movs	r1, #76	; 0x4c
    341e:	uxtb	r2, r2
    3420:	add	r0, sp, #4
    3422:	bl	353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3426:	cmp	r5, #4
    3428:	bne.n	33d4 <adc_init()+0xc8>
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    342a:	ldr	r1, [pc, #108]	; (3498 <adc_init()+0x18c>)
    342c:	ldr	r0, [pc, #88]	; (3488 <adc_init()+0x17c>)
    342e:	bl	32d0 <Print::print(char const*) [clone .isra.0]>
    3432:	movs	r2, #21
    3434:	movs	r1, #76	; 0x4c
    3436:	add	r0, sp, #4
    3438:	bl	34ee <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    343c:	movs	r3, #0
    343e:	mov	r1, r0
    3440:	movs	r2, #16
    3442:	ldr	r0, [pc, #68]	; (3488 <adc_init()+0x17c>)
    3444:	bl	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    3448:	ldr	r0, [pc, #60]	; (3488 <adc_init()+0x17c>)
    344a:	bl	c12c <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    344e:	ldr	r1, [pc, #76]	; (349c <adc_init()+0x190>)
    3450:	ldr	r0, [pc, #52]	; (3488 <adc_init()+0x17c>)
    3452:	bl	32d0 <Print::print(char const*) [clone .isra.0]>
    3456:	movs	r2, #118	; 0x76
    3458:	movs	r1, #76	; 0x4c
    345a:	add	r0, sp, #4
    345c:	bl	34ee <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3460:	movs	r3, #0
    3462:	mov	r1, r0
    3464:	movs	r2, #16
    3466:	ldr	r0, [pc, #32]	; (3488 <adc_init()+0x17c>)
    3468:	bl	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    346c:	ldr	r0, [pc, #24]	; (3488 <adc_init()+0x17c>)
    346e:	bl	c12c <Print::println()>
    }
    3472:	add	sp, #8
    3474:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3478:	ldr	r1, [pc, #36]	; (34a0 <adc_init()+0x194>)
    347a:	b.n	3356 <adc_init()+0x4a>
    347c:	.word	0x000186a0
    3480:	.word	0x200089b4
    3484:	.word	0x20007e1e
    3488:	.word	0x200089a4
    348c:	.word	0x20007e7c
    3490:	.word	0x20007e78
    3494:	.word	0x20027f90
    3498:	.word	0x20007e3e
    349c:	.word	0x20007e45
    34a0:	.word	0x20007e28
    34a4:	.word	0x20009340

000034a8 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    34a8:	push	{r0, r1, r2, r4, r5, lr}
    34aa:	mov	r4, r1
    {   this->wire = wire;
    34ac:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    34ae:	mov	r5, r0
        wire->begin();
    34b0:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    34b2:	str	r2, [sp, #4]
        wire->begin();
    34b4:	bl	17100 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    34b8:	movs	r0, #100	; 0x64
    34ba:	bl	b1a8 <delay>
        wire->setClock(speed);
    34be:	mov	r0, r4
    34c0:	ldr	r1, [sp, #4]
    34c2:	bl	4f80 <TwoWire::setClock(unsigned long)>
    }
    34c6:	mov	r0, r5
    34c8:	add	sp, #12
    34ca:	pop	{r4, r5, pc}

000034cc <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    34cc:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    34ce:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    34d0:	ldr	r3, [r0, #0]
    34d2:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    34d6:	movs	r1, #1
    34d8:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    34dc:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    34e0:	ldr	r0, [r0, #0]
    34e2:	bl	4ccc <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    34e6:	clz	r0, r0
    34ea:	lsrs	r0, r0, #5
    34ec:	pop	{r3, pc}

000034ee <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    34ee:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    34f0:	ldr	r3, [r0, #0]
		transmitting = 1;
    34f2:	movs	r6, #1
    { 
    34f4:	mov	r5, r1
		txBuffer[0] = (address << 1);
    34f6:	lsls	r1, r1, #1
		transmitting = 1;
    34f8:	strb.w	r6, [r3, #304]	; 0x130
    34fc:	mov	r4, r0
		txBuffer[0] = (address << 1);
    34fe:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    3502:	mov	r1, r2
		txBufferLength = 1;
    3504:	strb.w	r6, [r3, #303]	; 0x12f
    3508:	ldr	r0, [r0, #0]
    350a:	ldr	r3, [r0, #0]
    350c:	ldr	r3, [r3, #0]
    350e:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    3510:	movs	r1, #0
    3512:	ldr	r0, [r4, #0]
    3514:	bl	4ccc <TwoWire::endTransmission(unsigned char)>
    3518:	cbz	r0, 351e <i2c_class::read(unsigned char, unsigned char)+0x30>
    351a:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    351c:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    351e:	mov	r3, r6
    3520:	mov	r2, r6
    3522:	mov	r1, r5
    3524:	ldr	r0, [r4, #0]
    3526:	bl	4db0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    352a:	cmp	r0, #0
    352c:	beq.n	351a <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    352e:	ldr	r0, [r4, #0]
    3530:	ldr	r3, [r0, #0]
    3532:	ldr	r3, [r3, #20]
    3534:	blx	r3
        return val;
    3536:	uxtb	r0, r0
    3538:	b.n	351c <i2c_class::read(unsigned char, unsigned char)+0x2e>

0000353a <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    353a:	push	{r4, r5, r6, lr}
    353c:	mov	r4, r0
		transmitting = 1;
    353e:	movs	r5, #1
    3540:	mov	r6, r3
        wire->beginTransmission(addr);
    3542:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    3544:	lsls	r0, r1, #1
        wire->write(reg);
    3546:	mov	r1, r2
		transmitting = 1;
    3548:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    354c:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    3550:	strb.w	r0, [r3, #165]	; 0xa5
    3554:	ldr	r0, [r4, #0]
    3556:	ldr	r3, [r0, #0]
    3558:	ldr	r3, [r3, #0]
    355a:	blx	r3
        wire->write(val);
    355c:	ldr	r0, [r4, #0]
    355e:	mov	r1, r6
    3560:	ldr	r3, [r0, #0]
    3562:	ldr	r3, [r3, #0]
    3564:	blx	r3
		return endTransmission(1);
    3566:	mov	r1, r5
    3568:	ldr	r0, [r4, #0]
    356a:	bl	4ccc <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    356e:	clz	r0, r0
    3572:	lsrs	r0, r0, #5
    3574:	pop	{r4, r5, r6, pc}
	...

00003578 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3578:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    357a:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    357c:	movw	lr, #365	; 0x16d
    3580:	movs	r6, #100	; 0x64
    3582:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now it is minutes
    3586:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now it is hours
    358a:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now it is minutes
    358e:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    3592:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    3596:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    3598:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now it is hours
    359a:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days
    359c:	udiv	r2, r3, r0
    35a0:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    35a4:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now it is days
    35a6:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    35a8:	movs	r3, #7
    35aa:	udiv	r3, r0, r3
    35ae:	rsb	r3, r3, r3, lsl #3
    35b2:	subs	r0, r0, r3
    35b4:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    35b6:	movs	r0, #0
    days = 0;
    35b8:	mov	r4, r0
    35ba:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    35bc:	addw	r3, r3, #1970	; 0x7b2
    35c0:	ands.w	r7, r3, #3
    35c4:	bne.n	3648 <time2date(unsigned long, datetime_t*)+0xd0>
    35c6:	sdiv	r5, r3, r6
    35ca:	mls	r5, r6, r5, r3
    35ce:	cmp	r5, #0
    35d0:	bne.n	364e <time2date(unsigned long, datetime_t*)+0xd6>
    35d2:	sdiv	r5, r3, ip
    35d6:	mls	r5, ip, r5, r3
    35da:	cmp	r5, #0
    35dc:	ite	ne
    35de:	movne	r5, lr
    35e0:	moveq.w	r5, #366	; 0x16e
    35e4:	add	r4, r5
    35e6:	adds	r0, #1
    35e8:	cmp	r2, r4
    35ea:	bcs.n	35ba <time2date(unsigned long, datetime_t*)+0x42>
    35ec:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    35ee:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    35f0:	udiv	r6, r3, r0
    35f4:	mls	r6, r0, r6, r3
    35f8:	mov.w	r0, #400	; 0x190
    35fc:	udiv	r5, r3, r0
    3600:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3604:	cbnz	r7, 3654 <time2date(unsigned long, datetime_t*)+0xdc>
    3606:	cbnz	r6, 365a <time2date(unsigned long, datetime_t*)+0xe2>
    3608:	cmp	r3, #0
    360a:	movw	r0, #365	; 0x16d
    360e:	it	eq
    3610:	moveq.w	r0, #366	; 0x16e
    time  -= days; // now it is days in this year, starting at 0
    3614:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3616:	ldr.w	ip, [pc, #88]	; 3670 <time2date(unsigned long, datetime_t*)+0xf8>
    time  -= days; // now it is days in this year, starting at 0
    361a:	add	r2, r0
    361c:	movs	r0, #0
      if (month==1) { // february
    361e:	cmp	r0, #1
    3620:	uxtb	r5, r0
    3622:	bne.n	3660 <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3624:	cbnz	r7, 3666 <time2date(unsigned long, datetime_t*)+0xee>
    3626:	cbnz	r6, 366a <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    3628:	cmp	r3, #0
    362a:	ite	ne
    362c:	movne	r4, #28
    362e:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    3630:	cmp	r4, r2
    3632:	bhi.n	363e <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3634:	adds	r0, #1
        time -= monthLength;
    3636:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3638:	cmp	r0, #12
    363a:	bne.n	361e <time2date(unsigned long, datetime_t*)+0xa6>
    363c:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    363e:	adds	r5, #1
    tm->day = time + 1;     // day of month
    3640:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3642:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3644:	strb	r2, [r1, #3]
  }
    3646:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3648:	movw	r5, #365	; 0x16d
    364c:	b.n	35e4 <time2date(unsigned long, datetime_t*)+0x6c>
    364e:	mov.w	r5, #366	; 0x16e
    3652:	b.n	35e4 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3654:	movw	r0, #365	; 0x16d
    3658:	b.n	3614 <time2date(unsigned long, datetime_t*)+0x9c>
    365a:	mov.w	r0, #366	; 0x16e
    365e:	b.n	3614 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    3660:	ldrb.w	r4, [r0, ip]
    3664:	b.n	3630 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3666:	movs	r4, #28
    3668:	b.n	3630 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    366a:	movs	r4, #29
    366c:	b.n	3630 <time2date(unsigned long, datetime_t*)+0xb8>
    366e:	nop
    3670:	.word	0x20007ee9

00003674 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    3674:	ldrh	r3, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
    3676:	movw	r1, #1970	; 0x7b2
    seconds= year*(SECS_PER_DAY * 365);
    367a:	ldr	r2, [pc, #184]	; (3734 <date2time(datetime_t*)+0xc0>)
    year=tm->year-YEAR0;
    367c:	adds	r3, #78	; 0x4e
    367e:	uxtb	r3, r3
  {
    3680:	push	{r4, r5, r6, r7, lr}
    seconds= year*(SECS_PER_DAY * 365);
    3682:	muls	r2, r3
    for (ii = 0; ii < year; ii++) {
    3684:	movs	r5, #100	; 0x64
    3686:	mov.w	r6, #400	; 0x190
    368a:	subw	r4, r1, #1970	; 0x7b2
    368e:	cmp	r3, r4
    3690:	bgt.n	36ec <date2time(datetime_t*)+0x78>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3692:	addw	r3, r3, #1970	; 0x7b2
    3696:	movs	r1, #100	; 0x64
    for (ii = 1; ii < tm->month; ii++) {
    3698:	ldrsb.w	r7, [r0, #2]
    369c:	ldr	r6, [pc, #152]	; (3738 <date2time(datetime_t*)+0xc4>)
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    369e:	ldr.w	ip, [pc, #156]	; 373c <date2time(datetime_t*)+0xc8>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    36a2:	udiv	r4, r3, r1
    36a6:	mls	r4, r1, r4, r3
    36aa:	mov.w	r1, #400	; 0x190
    36ae:	udiv	r5, r3, r1
    36b2:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    36b6:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    36b8:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    36bc:	cmp	r7, r1
    36be:	bgt.n	3710 <date2time(datetime_t*)+0x9c>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    36c0:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    36c4:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    36c8:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    36cc:	rsb	r3, r3, r3, lsl #4
    36d0:	lsls	r3, r3, #2
    seconds+= tm->sec;
    36d2:	mla	r3, r4, r1, r3
    36d6:	ldrsb.w	r1, [r0, #7]
    36da:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    36dc:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    36e0:	ldr	r0, [pc, #88]	; (373c <date2time(datetime_t*)+0xc8>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    36e2:	subs	r1, #1
    seconds+= tm->sec;
    36e4:	mla	r0, r0, r1, r3
    return seconds; 
  }
    36e8:	add	r0, r2
    36ea:	pop	{r4, r5, r6, r7, pc}
      if (LEAP_YEAR(ii)) {
    36ec:	lsls	r4, r1, #30
    36ee:	bne.n	370c <date2time(datetime_t*)+0x98>
    36f0:	sdiv	r4, r1, r5
    36f4:	mls	r4, r5, r4, r1
    36f8:	cbnz	r4, 3704 <date2time(datetime_t*)+0x90>
    36fa:	sdiv	r4, r1, r6
    36fe:	mls	r4, r6, r4, r1
    3702:	cbnz	r4, 370c <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY;   // add extra days for leap years
    3704:	add.w	r2, r2, #86016	; 0x15000
    3708:	add.w	r2, r2, #384	; 0x180
    for (ii = 0; ii < year; ii++) {
    370c:	adds	r1, #1
    370e:	b.n	368a <date2time(datetime_t*)+0x16>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3710:	cmp	r1, #2
    3712:	bne.n	3728 <date2time(datetime_t*)+0xb4>
    3714:	cbnz	r3, 3728 <date2time(datetime_t*)+0xb4>
    3716:	cbnz	r4, 371a <date2time(datetime_t*)+0xa6>
    3718:	cbnz	r5, 3728 <date2time(datetime_t*)+0xb4>
        seconds += SECS_PER_DAY * 29;
    371a:	add.w	r2, r2, #2490368	; 0x260000
    371e:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3722:	adds	r1, #1
    3724:	adds	r6, #1
    3726:	b.n	36bc <date2time(datetime_t*)+0x48>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3728:	ldrb.w	lr, [r6]
    372c:	mla	r2, ip, lr, r2
    3730:	b.n	3722 <date2time(datetime_t*)+0xae>
    3732:	nop
    3734:	.word	0x01e13380
    3738:	.word	0x20007ee9
    373c:	.word	0x00015180

00003740 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    3740:	movs	r0, #1
    3742:	bx	lr

00003744 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3744:	push	{r0, r1, r2, lr}
    3746:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3748:	bl	b3a4 <rtc_get>
    374c:	ldr	r1, [sp, #4]
    374e:	bl	3578 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3752:	movs	r0, #1
    3754:	add	sp, #12
    3756:	ldr.w	pc, [sp], #4

0000375a <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    375a:	push	{r3, lr}
    rtc_set(date2time(t));
    375c:	bl	3674 <date2time(datetime_t*)>
    3760:	bl	b3c8 <rtc_set>
    return 1;
  }
    3764:	movs	r0, #1
    3766:	pop	{r3, pc}

00003768 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3768:	push	{r0, r1, r4, r5, r6, lr}
    376a:	mov	r5, r1
    376c:	mov	r4, r2
    376e:	mov	r6, r0
    rtc_get_datetime(&t);
    3770:	mov	r0, sp
    3772:	bl	3744 <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3776:	mov	r0, sp
    t.year=year;
    3778:	strh.w	r6, [sp]
    t.month=month;
    377c:	strb.w	r5, [sp, #2]
    t.day=day;
    3780:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3784:	bl	375a <rtc_set_datetime(datetime_t*)>
  }
    3788:	add	sp, #8
    378a:	pop	{r4, r5, r6, pc}

0000378c <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    378c:	push	{r0, r1, r4, r5, r6, lr}
    378e:	mov	r5, r1
    3790:	mov	r4, r2
    3792:	mov	r6, r0
    rtc_get_datetime(&t);
    3794:	mov	r0, sp
    3796:	bl	3744 <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    379a:	mov	r0, sp
    t.hour=hour;
    379c:	strb.w	r6, [sp, #5]
    t.min=minutes;
    37a0:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    37a4:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    37a8:	bl	375a <rtc_set_datetime(datetime_t*)>
  }
    37ac:	add	sp, #8
    37ae:	pop	{r4, r5, r6, pc}

000037b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    37b0:	push	{r3, r4, r5, lr}
    37b2:	mov	r4, r0
    37b4:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    37b6:	movs	r2, #60	; 0x3c
    37b8:	mov	r1, r5
    37ba:	mov	r0, r4
    37bc:	bl	bcb8 <usb_mtp_send>
    37c0:	cmp	r0, #0
    37c2:	ble.n	37b6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    37c4:	pop	{r3, r4, r5, pc}
	...

000037c8 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    37c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37cc:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    37ce:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    37d2:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    37d4:	ldr.w	r3, [r1, #1064]	; 0x428
    37d8:	cbnz	r3, 37e2 <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    37da:	add.w	r2, r0, #544	; 0x220
    37de:	ldr	r4, [pc, #92]	; (383c <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    37e0:	str	r2, [r4, #0]
        write_length_ += len;
    37e2:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    37e4:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    37e8:	add.w	r9, r0, #1056	; 0x420
    37ec:	ldr.w	sl, [pc, #76]	; 383c <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    37f0:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    37f4:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    37f8:	cmp	r6, r8
    37fa:	bgt.n	3800 <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    37fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3800:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3804:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3808:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    380a:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    380e:	mov	r0, r3
    3810:	cmp	r5, r2
    3812:	it	ge
    3814:	movge	r5, r2
    3816:	mov	r2, r5
          pos += to_copy;
    3818:	add	r8, r5
          memcpy(dst,src,to_copy);
    381a:	bl	9c60 <memcpy>
    381e:	mov	r3, r0
          src += to_copy;
    3820:	add	r7, r5
          dst += to_copy;
    3822:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3824:	cmp	r9, r3
          dst += to_copy;
    3826:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    382a:	bne.n	37f8 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    382c:	mov.w	r1, #512	; 0x200
    3830:	mov	r0, r4
    3832:	bl	37b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3836:	str.w	r4, [sl]
    383a:	b.n	37f8 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    383c:	.word	0x20027250

00003840 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3840:	push	{r4, r5, r6, lr}
    3842:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3844:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    3846:	subs	r4, r1, #1
    int num = 0;
    3848:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    384a:	ldr	r3, [r0, #0]
    384c:	mov	r1, r4
    384e:	ldr	r3, [r3, #28]
    3850:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    3852:	ldr	r0, [r5, #0]
    3854:	mov	r1, r4
    3856:	ldr	r3, [r0, #0]
    3858:	ldr	r3, [r3, #32]
    385a:	blx	r3
    385c:	cbnz	r0, 3862 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    385e:	mov	r0, r6
    3860:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    3862:	adds	r6, #1
    3864:	b.n	3852 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003866 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3866:	ldr	r0, [r0, #0]
    3868:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    386a:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    386c:	ldr	r4, [r0, #0]
    386e:	ldr	r4, [r4, #76]	; 0x4c
    3870:	blx	r4
    }
    3872:	movw	r2, #8193	; 0x2001
    3876:	movw	r3, #8197	; 0x2005
    387a:	cmp	r0, #0
    387c:	ite	ne
    387e:	movne	r0, r2
    3880:	moveq	r0, r3
    3882:	pop	{r4, pc}

00003884 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3884:	ldr	r0, [r0, #0]
    3886:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3888:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    388a:	ldr	r4, [r0, #0]
    388c:	ldr	r4, [r4, #80]	; 0x50
    388e:	mov	ip, r4
    }
    3890:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    3894:	bx	ip
	...

00003898 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3898:	ldr	r3, [pc, #8]	; (38a4 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    389a:	ldr	r0, [r0, #0]
      sessionID_ = id;
    389c:	str	r1, [r3, #0]
      storage_->ResetIndex();
    389e:	ldr	r3, [r0, #0]
    38a0:	ldr	r3, [r3, #68]	; 0x44
    38a2:	bx	r3
    38a4:	.word	0x20027d7c

000038a8 <MTPD::pull_packet(unsigned char*)>:
    {
    38a8:	push	{r4, lr}
    38aa:	mov	r4, r1
      while(!usb_mtp_available());
    38ac:	bl	bc88 <usb_mtp_available>
    38b0:	cmp	r0, #0
    38b2:	beq.n	38ac <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    38b4:	mov	r0, r4
    38b6:	movs	r1, #60	; 0x3c
    }
    38b8:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    38bc:	b.w	bbf4 <usb_mtp_recv>

000038c0 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    38c0:	add.w	r3, r0, #8192	; 0x2000
    38c4:	push	{r4, r5}
    38c6:	ldrb.w	r5, [r3, #1060]	; 0x424
    38ca:	cbz	r5, 38da <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    38cc:	ldr.w	r1, [r3, #1064]	; 0x428
    38d0:	add	r1, r2
    }
    38d2:	pop	{r4, r5}
        write_length_ += len;
    38d4:	str.w	r1, [r3, #1064]	; 0x428
    }
    38d8:	bx	lr
    38da:	pop	{r4, r5}
    38dc:	b.w	37c8 <MTPD::write(char const*, int) [clone .part.0]>

000038e0 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    38e0:	push	{r0, r1, r2, lr}
    38e2:	movs	r2, #1
    38e4:	strb.w	r1, [sp, #7]
    38e8:	add.w	r1, sp, #7
    38ec:	bl	38c0 <MTPD::write(char const*, int)>
    38f0:	add	sp, #12
    38f2:	ldr.w	pc, [sp], #4

000038f6 <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    38f6:	push	{r0, r1, r2, lr}
    38f8:	movs	r2, #2
    38fa:	strh.w	r1, [sp, #6]
    38fe:	add.w	r1, sp, #6
    3902:	bl	38c0 <MTPD::write(char const*, int)>
    3906:	add	sp, #12
    3908:	ldr.w	pc, [sp], #4

0000390c <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    390c:	push	{r3, r4, r5, lr}
    390e:	mov	r4, r1
    if (*str) 
    3910:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3912:	mov	r5, r0
    if (*str) 
    3914:	cbz	r1, 393e <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3916:	mov	r0, r4
    3918:	subs	r4, #1
    391a:	bl	ec80 <strlen>
    391e:	adds	r0, #1
    3920:	uxtb	r1, r0
    3922:	mov	r0, r5
    3924:	bl	38e0 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3928:	ldrb.w	r1, [r4, #1]!
    392c:	mov	r0, r5
    392e:	cbnz	r1, 3938 <MTPD::writestring(char const*)+0x2c>
  }
    3930:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3934:	b.w	38f6 <MTPD::write16(unsigned short)>
    3938:	bl	38f6 <MTPD::write16(unsigned short)>
    393c:	b.n	3928 <MTPD::writestring(char const*)+0x1c>
  }
    393e:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    3942:	b.w	38e0 <MTPD::write8(unsigned char)>
	...

00003948 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    3948:	movw	r3, #54274	; 0xd402
    394c:	cmp	r1, r3
    394e:	bne.n	3956 <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    3950:	ldr	r1, [pc, #4]	; (3958 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    3952:	b.w	390c <MTPD::writestring(char const*)>
  }
    3956:	bx	lr
    3958:	.word	0x20007f57

0000395c <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    395c:	movw	r3, #54274	; 0xd402
    3960:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3962:	push	{r4, lr}
    3964:	mov	r4, r0
    switch (prop) {
    3966:	bne.n	399a <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3968:	bl	38f6 <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    396c:	mov	r0, r4
    396e:	movw	r1, #65535	; 0xffff
    3972:	bl	38f6 <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    3976:	mov	r0, r4
    3978:	movs	r1, #0
    397a:	bl	38e0 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    397e:	mov	r0, r4
    3980:	ldr	r1, [pc, #24]	; (399c <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3982:	bl	390c <MTPD::writestring(char const*)>
    3986:	mov	r0, r4
    3988:	ldr	r1, [pc, #16]	; (399c <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    398a:	bl	390c <MTPD::writestring(char const*)>
        write8(0);       // no form
    398e:	mov	r0, r4
    3990:	movs	r1, #0
  }
    3992:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    3996:	b.w	38e0 <MTPD::write8(unsigned char)>
  }
    399a:	pop	{r4, pc}
    399c:	.word	0x20007f57

000039a0 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    39a0:	push	{r0, r1, r2, lr}
    39a2:	movs	r2, #4
    39a4:	str	r1, [sp, #4]
    39a6:	add.w	r1, sp, r2
    39aa:	bl	38c0 <MTPD::write(char const*, int)>
    39ae:	add	sp, #12
    39b0:	ldr.w	pc, [sp], #4

000039b4 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    39b4:	push	{r4, r5, r6, lr}
    39b6:	mov	r4, r0
    39b8:	sub	sp, #24
    write16(100);  // MTP version
    39ba:	movs	r1, #100	; 0x64
    39bc:	ldr	r6, [pc, #240]	; (3ab0 <MTPD::WriteDescriptor()+0xfc>)
    39be:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    39c2:	movs	r1, #6
    39c4:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    39c6:	movs	r5, #0
    write32(6);    // MTP extension
    39c8:	bl	39a0 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    39cc:	movs	r1, #100	; 0x64
    39ce:	mov	r0, r4
    39d0:	bl	38f6 <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    39d4:	ldr	r1, [pc, #220]	; (3ab4 <MTPD::WriteDescriptor()+0x100>)
    39d6:	mov	r0, r4
    39d8:	bl	390c <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    39dc:	movs	r1, #0
    39de:	mov	r0, r4
    39e0:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    39e4:	movs	r1, #20
    39e6:	mov	r0, r4
    39e8:	bl	39a0 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    39ec:	adds	r5, #1
    39ee:	ldrh.w	r1, [r6], #2
    39f2:	mov	r0, r4
    39f4:	bl	38f6 <MTPD::write16(unsigned short)>
    39f8:	cmp	r5, #20
    39fa:	bne.n	39ec <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    39fc:	movs	r1, #4
    39fe:	mov	r0, r4
    3a00:	bl	39a0 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3a04:	movw	r1, #16388	; 0x4004
    3a08:	mov	r0, r4
    3a0a:	bl	38f6 <MTPD::write16(unsigned short)>
    3a0e:	movw	r1, #16389	; 0x4005
    3a12:	mov	r0, r4
    3a14:	bl	38f6 <MTPD::write16(unsigned short)>
    3a18:	movw	r1, #16395	; 0x400b
    3a1c:	mov	r0, r4
    3a1e:	bl	38f6 <MTPD::write16(unsigned short)>
    3a22:	movw	r1, #16396	; 0x400c
    3a26:	mov	r0, r4
    3a28:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3a2c:	movs	r1, #1
    3a2e:	mov	r0, r4
    3a30:	bl	39a0 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3a34:	movw	r1, #54274	; 0xd402
    3a38:	mov	r0, r4
    3a3a:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3a3e:	movs	r1, #0
    3a40:	mov	r0, r4
    3a42:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3a46:	movs	r1, #2
    3a48:	mov	r0, r4
    3a4a:	bl	39a0 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3a4e:	mov.w	r1, #12288	; 0x3000
    3a52:	mov	r0, r4
    3a54:	bl	38f6 <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3a58:	movw	r1, #12289	; 0x3001
    3a5c:	mov	r0, r4
    3a5e:	bl	38f6 <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    3a62:	ldr	r1, [pc, #84]	; (3ab8 <MTPD::WriteDescriptor()+0x104>)
    3a64:	mov	r0, r4
    3a66:	bl	390c <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3a6a:	ldr	r1, [pc, #80]	; (3abc <MTPD::WriteDescriptor()+0x108>)
    3a6c:	mov	r0, r4
    3a6e:	bl	390c <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    3a72:	vldr	s0, [pc, #76]	; 3ac0 <MTPD::WriteDescriptor()+0x10c>
    3a76:	add	r2, sp, #4
    3a78:	movs	r1, #2
    3a7a:	movs	r0, #3
    3a7c:	bl	af14 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    3a80:	mov	r2, r5
    3a82:	ldr	r1, [pc, #64]	; (3ac4 <MTPD::WriteDescriptor()+0x110>)
    3a84:	add	r0, sp, #4
    3a86:	bl	e560 <strlcat>
    writestring( buf );    
    3a8a:	add	r1, sp, #4
    3a8c:	mov	r0, r4
    3a8e:	bl	390c <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3a92:	ldr	r1, [pc, #52]	; (3ac8 <MTPD::WriteDescriptor()+0x114>)
    3a94:	add	r2, sp, #4
    writestring( buf );    
    3a96:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3a98:	ldrh.w	r0, [r1, #2]!
    3a9c:	subs	r3, #1
    3a9e:	strb.w	r0, [r2], #1
    3aa2:	bne.n	3a98 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    3aa4:	add	r1, sp, #4
    3aa6:	mov	r0, r4
    3aa8:	bl	390c <MTPD::writestring(char const*)>
  }
    3aac:	add	sp, #24
    3aae:	pop	{r4, r5, r6, pc}
    3ab0:	.word	0x200079f8
    3ab4:	.word	0x20007f33
    3ab8:	.word	0x20007f47
    3abc:	.word	0x20007f57
    3ac0:	.word	0x3fcb851f
    3ac4:	.word	0x20007f4c
    3ac8:	.word	0x20009344

00003acc <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    3acc:	push	{r4, r5, r6, lr}
    3ace:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    3ad0:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3ad2:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3ad4:	ldr	r3, [r0, #0]
    3ad6:	ldr	r3, [r3, #4]
    3ad8:	blx	r3
    write32(num); // number of storages (disks)
    3ada:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3adc:	mov	r5, r0
    write32(num); // number of storages (disks)
    3ade:	mov	r0, r4
    3ae0:	bl	39a0 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3ae4:	cmp	r6, r5
    3ae6:	bne.n	3aea <MTPD::WriteStorageIDs()+0x1e>
  }
    3ae8:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3aea:	adds	r6, #1
    3aec:	mov	r0, r4
    3aee:	mov	r1, r6
    3af0:	bl	39a0 <MTPD::write32(unsigned long)>
    3af4:	b.n	3ae4 <MTPD::WriteStorageIDs()+0x18>

00003af6 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3af6:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    3af8:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    3afc:	mov	r4, r0
    3afe:	mov	r6, r2
    if (write_get_length_) {
    3b00:	ldrb.w	r3, [r7, #1060]	; 0x424
    3b04:	cbz	r3, 3b14 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    3b06:	bl	3840 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    3b0a:	adds	r0, #1
      write_length_ *= 4;
    3b0c:	lsls	r0, r0, #2
    3b0e:	str.w	r0, [r7, #1064]	; 0x428
  }
    3b12:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    3b14:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    3b16:	bl	3840 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3b1a:	mov	r1, r0
    3b1c:	mov	r0, r4
    3b1e:	bl	39a0 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    3b22:	ldr	r0, [r4, #0]
    3b24:	mov	r2, r6
    3b26:	mov	r1, r5
    3b28:	ldr	r3, [r0, #0]
    3b2a:	ldr	r3, [r3, #28]
    3b2c:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    3b2e:	ldr	r0, [r4, #0]
    3b30:	mov	r1, r5
    3b32:	ldr	r3, [r0, #0]
    3b34:	ldr	r3, [r3, #32]
    3b36:	blx	r3
    3b38:	mov	r1, r0
    3b3a:	cmp	r0, #0
    3b3c:	beq.n	3b12 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    3b3e:	mov	r0, r4
    3b40:	bl	39a0 <MTPD::write32(unsigned long)>
    3b44:	b.n	3b2e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

00003b48 <MTPD::GetObjectInfo(unsigned long)>:
  {
    3b48:	push	{r4, r5, r6, r7, lr}
    3b4a:	mov	r4, r0
    3b4c:	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    3b4e:	ldr	r0, [r0, #0]
    3b50:	add.w	r6, sp, #14
    3b54:	add	r5, sp, #20
    3b56:	ldr	r3, [r0, #0]
    3b58:	add	r2, sp, #24
    3b5a:	str	r6, [sp, #4]
    3b5c:	str	r5, [sp, #0]
    3b5e:	ldr	r7, [r3, #36]	; 0x24
    3b60:	add	r3, sp, #16
    3b62:	blx	r7
    uint32_t storage = Store2Storage(store);
    3b64:	ldrh.w	r1, [sp, #14]
    write32(storage); // storage
    3b68:	mov	r0, r4
    3b6a:	adds	r1, #1
    3b6c:	bl	39a0 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3b70:	ldr	r3, [sp, #16]
    3b72:	movw	r1, #12289	; 0x3001
    3b76:	mov	r0, r4
    3b78:	adds	r3, #1
    3b7a:	it	ne
    3b7c:	movne	r1, #0
    3b7e:	bl	38f6 <MTPD::write16(unsigned short)>
    write16(0);  // protection
    3b82:	mov	r0, r4
    3b84:	movs	r1, #0
    3b86:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(size); // size
    3b8a:	ldr	r1, [sp, #16]
    3b8c:	mov	r0, r4
    3b8e:	bl	39a0 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    3b92:	mov	r0, r4
    3b94:	movs	r1, #0
    3b96:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    3b9a:	mov	r0, r4
    3b9c:	movs	r1, #0
    3b9e:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    3ba2:	mov	r0, r4
    3ba4:	movs	r1, #0
    3ba6:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    3baa:	mov	r0, r4
    3bac:	movs	r1, #0
    3bae:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    3bb2:	mov	r0, r4
    3bb4:	movs	r1, #0
    3bb6:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    3bba:	mov	r0, r4
    3bbc:	movs	r1, #0
    3bbe:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    3bc2:	mov	r0, r4
    3bc4:	movs	r1, #0
    3bc6:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    3bca:	ldr	r1, [sp, #20]
    3bcc:	mov	r0, r4
    3bce:	bl	39a0 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    3bd2:	ldr	r1, [sp, #16]
    3bd4:	mov	r0, r4
    3bd6:	adds	r3, r1, #1
    3bd8:	negs	r1, r3
    3bda:	adcs	r1, r3
    3bdc:	bl	38f6 <MTPD::write16(unsigned short)>
    write32(0); // association description
    3be0:	mov	r0, r4
    3be2:	movs	r1, #0
    3be4:	bl	39a0 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    3be8:	mov	r0, r4
    3bea:	movs	r1, #0
    3bec:	bl	39a0 <MTPD::write32(unsigned long)>
    writestring(filename);
    3bf0:	add	r1, sp, #24
    3bf2:	mov	r0, r4
    3bf4:	bl	390c <MTPD::writestring(char const*)>
    writestring("");  // date created
    3bf8:	mov	r0, r4
    3bfa:	ldr	r1, [pc, #24]	; (3c14 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3bfc:	bl	390c <MTPD::writestring(char const*)>
    writestring("");  // date modified
    3c00:	mov	r0, r4
    3c02:	ldr	r1, [pc, #16]	; (3c14 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3c04:	bl	390c <MTPD::writestring(char const*)>
    writestring("");  // keywords
    3c08:	ldr	r1, [pc, #8]	; (3c14 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3c0a:	mov	r0, r4
    3c0c:	bl	390c <MTPD::writestring(char const*)>
  }
    3c10:	add	sp, #284	; 0x11c
    3c12:	pop	{r4, r5, r6, r7, pc}
    3c14:	.word	0x20007bdf

00003c18 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    3c18:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    3c1a:	ldr	r6, [pc, #36]	; (3c40 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3c1c:	movs	r4, #0
    3c1e:	ldr	r7, [pc, #36]	; (3c44 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    3c20:	mov	r5, r0
      write32(propertyListNum);
    3c22:	ldr	r1, [r6, #0]
    3c24:	bl	39a0 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3c28:	ldr	r3, [r6, #0]
    3c2a:	cmp	r3, r4
    3c2c:	bhi.n	3c30 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    3c2e:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3c30:	ldrh.w	r1, [r7], #2
    3c34:	mov	r0, r5
    3c36:	adds	r4, #1
    3c38:	bl	38f6 <MTPD::write16(unsigned short)>
    3c3c:	b.n	3c28 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    3c3e:	nop
    3c40:	.word	0x20009318
    3c44:	.word	0x200079e8

00003c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    3c48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c4c:	mov	r4, r0
    3c4e:	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3c50:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    3c52:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3c54:	add.w	r8, sp, #14
    3c58:	add	r6, sp, #20
    3c5a:	ldr	r3, [r0, #0]
    3c5c:	add	r2, sp, #24
    3c5e:	str.w	r8, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    3c62:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3c64:	str	r6, [sp, #0]
    3c66:	ldr.w	r9, [r3, #36]	; 0x24
    3c6a:	add	r3, sp, #16
    3c6c:	blx	r9
      switch(p2)
    3c6e:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    3c72:	ldrh.w	r3, [sp, #14]
      switch(p2)
    3c76:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    3c78:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
    3c7a:	add.w	r8, r3, #1
      switch(p2)
    3c7e:	bhi.n	3ca0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x58>
    3c80:	cmp.w	r5, #56320	; 0xdc00
    3c84:	bls.n	3cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    3c86:	sub.w	r5, r5, #56320	; 0xdc00
    3c8a:	subs	r5, #1
    3c8c:	cmp	r5, #10
    3c8e:	bhi.n	3cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    3c90:	tbb	[pc, r5]
    3c94:	.word	0x37201611
    3c98:	.word	0x27220e0e
    3c9c:	.short	0x0e27
    3c9e:	.byte	0x29
    3c9f:	.byte	0x00
    3ca0:	movw	r3, #56385	; 0xdc41
    3ca4:	cmp	r5, r3
    3ca6:	beq.n	3cf0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa8>
    3ca8:	movw	r3, #56388	; 0xdc44
    3cac:	cmp	r5, r3
    3cae:	beq.n	3cd8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    }
    3cb0:	add	sp, #284	; 0x11c
    3cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(storage);
    3cb6:	mov	r1, r8
          write32(0);
    3cb8:	mov	r0, r4
    3cba:	bl	39a0 <MTPD::write32(unsigned long)>
    }
    3cbe:	b.n	3cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(dir?0x3001:0x3000);
    3cc0:	adds	r1, #1
    3cc2:	movw	r1, #12289	; 0x3001
    3cc6:	it	ne
    3cc8:	movne.w	r1, #12288	; 0x3000
          write16(0);
    3ccc:	mov	r0, r4
    3cce:	bl	38f6 <MTPD::write16(unsigned short)>
          break;
    3cd2:	b.n	3cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(0);
    3cd4:	movs	r1, #0
    3cd6:	b.n	3ccc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
          writestring(name);
    3cd8:	add	r1, sp, #24
          writestring("");
    3cda:	mov	r0, r4
    3cdc:	bl	390c <MTPD::writestring(char const*)>
          break;
    3ce0:	b.n	3cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          writestring("");
    3ce2:	ldr	r1, [pc, #40]	; (3d0c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc4>)
    3ce4:	b.n	3cda <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x92>
          write32((store==parent)? 0: parent);
    3ce6:	ldr	r1, [r6, #0]
    3ce8:	cmp	r3, r1
    3cea:	it	eq
    3cec:	moveq	r1, #0
    3cee:	b.n	3cb8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
          write32(p1);
    3cf0:	mov	r1, r7
    3cf2:	mov	r0, r4
    3cf4:	bl	39a0 <MTPD::write32(unsigned long)>
          write32(parent);
    3cf8:	ldr	r1, [r6, #0]
    3cfa:	mov	r0, r4
    3cfc:	bl	39a0 <MTPD::write32(unsigned long)>
          write32(storage);
    3d00:	mov	r1, r8
    3d02:	mov	r0, r4
    3d04:	bl	39a0 <MTPD::write32(unsigned long)>
          write32(0);
    3d08:	movs	r1, #0
    3d0a:	b.n	3cb8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
    3d0c:	.word	0x20007bdf

00003d10 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    3d10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d14:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3d16:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    3d18:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    3d1a:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3d1c:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3d1e:	mov.w	fp, #0
    3d22:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    3d24:	ldr	r6, [pc, #228]	; (3e0c <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    3d26:	ldr	r3, [r3, #20]
    3d28:	blx	r3
    3d2a:	cmp	r0, #0
    3d2c:	mov	r0, r4
    3d2e:	ite	ne
    3d30:	movne	r1, #1
    3d32:	moveq	r1, #4
    3d34:	bl	38f6 <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    3d38:	ldr	r0, [r4, #0]
    3d3a:	mov	r1, r7
    3d3c:	ldr	r3, [r0, #0]
    3d3e:	ldr	r3, [r3, #24]
    3d40:	blx	r3
    3d42:	adds	r0, #1
    3d44:	uxth	r1, r0
    3d46:	mov	r0, r4
    3d48:	bl	38f6 <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    3d4c:	mov	r0, r4
    3d4e:	movs	r1, #0
    3d50:	bl	38f6 <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    3d54:	ldr	r0, [r4, #0]
    3d56:	mov	r1, r7
    3d58:	ldr	r3, [r0, #0]
    3d5a:	ldr	r3, [r3, #12]
    3d5c:	blx	r3
    3d5e:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    3d60:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    3d62:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    3d64:	mov	r1, r7
    3d66:	ldr	r3, [r0, #0]
    3d68:	ldr	r3, [r3, #16]
    3d6a:	blx	r3
    3d6c:	ldr	r3, [r6, #0]
    3d6e:	mov	r9, r0
    3d70:	mov	sl, r1
    3d72:	ldr	r3, [r3, #4]
    3d74:	movs	r2, #5
    3d76:	ldr	r1, [pc, #152]	; (3e10 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    3d78:	mov	r0, r6
    3d7a:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3d7c:	movs	r3, #10
    3d7e:	mov	r2, r5
    3d80:	mov	r0, r6
    3d82:	strd	r3, fp, [sp]
    3d86:	mov	r3, r8
    3d88:	bl	c192 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3d8c:	mov	r0, r6
    3d8e:	bl	c12c <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    3d92:	ldr	r3, [r6, #0]
    3d94:	ldr	r1, [pc, #124]	; (3e14 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    3d96:	movs	r2, #5
    3d98:	ldr	r3, [r3, #4]
    3d9a:	mov	r0, r6
    3d9c:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3d9e:	movs	r3, #10
    3da0:	mov	r2, r9
    3da2:	mov	r0, r6
    3da4:	str	r3, [sp, #0]
    3da6:	mov	r3, sl
    3da8:	str.w	fp, [sp, #4]
    3dac:	bl	c192 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3db0:	mov	r0, r6
    3db2:	bl	c12c <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3db6:	movs	r2, #8
    3db8:	mov	r0, r4
    3dba:	add.w	r1, sp, r2
    3dbe:	strd	r5, r8, [sp, #8]
    3dc2:	bl	38c0 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    3dc6:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3dca:	mov.w	r2, #8
    3dce:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    3dd0:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3dd4:	add.w	r1, sp, r2
    3dd8:	strd	r5, r3, [sp, #8]
    3ddc:	bl	38c0 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    3de0:	mov	r0, r4
    3de2:	mov.w	r1, #4294967295
    3de6:	bl	39a0 <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    3dea:	ldr	r0, [r4, #0]
    3dec:	mov	r1, r7
    3dee:	ldr	r3, [r0, #0]
    3df0:	ldr	r3, [r3, #8]
    3df2:	blx	r3
    3df4:	mov	r1, r0
    writestring(name);  // storage descriptor
    3df6:	mov	r0, r4
    3df8:	bl	390c <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    3dfc:	ldr	r1, [pc, #24]	; (3e18 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    3dfe:	mov	r0, r4
  }
    3e00:	add	sp, #20
    3e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    3e06:	b.w	390c <MTPD::writestring(char const*)>
    3e0a:	nop
    3e0c:	.word	0x200089a4
    3e10:	.word	0x20007f27
    3e14:	.word	0x20007f2d
    3e18:	.word	0x20007bdf

00003e1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    3e1c:	movw	r2, #56331	; 0xdc0b
    3e20:	cmp	r1, r2
    {
    3e22:	push	{r0, r1, r4, r6, r7, lr}
    3e24:	mov	r4, r0
      switch(p1)
    3e26:	bhi.n	3e48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    3e28:	cmp.w	r1, #56320	; 0xdc00
    3e2c:	bls.n	3e58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3e2e:	sub.w	r3, r1, #56320	; 0xdc00
    3e32:	subs	r3, #1
    3e34:	cmp	r3, #10
    3e36:	bhi.n	3e58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3e38:	tbb	[pc, r3]
    3e3c:	.word	0x413e2210
    3e40:	.word	0x69570e0e
    3e44:	.short	0x0e75
    3e46:	.byte	0x78
    3e47:	.byte	0x00
    3e48:	movw	r2, #56385	; 0xdc41
    3e4c:	cmp	r1, r2
    3e4e:	beq.n	3f32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    3e50:	movw	r2, #56388	; 0xdc44
    3e54:	cmp	r1, r2
    3e56:	beq.n	3f14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    3e58:	add	sp, #8
    3e5a:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    3e5c:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    3e60:	mov	r0, r4
    3e62:	bl	38f6 <MTPD::write16(unsigned short)>
          write16(6);
    3e66:	mov	r0, r4
    3e68:	movs	r1, #6
    3e6a:	bl	38f6 <MTPD::write16(unsigned short)>
          write8(0); //get
    3e6e:	mov	r0, r4
    3e70:	movs	r1, #0
    3e72:	bl	38e0 <MTPD::write8(unsigned char)>
          write32(0);
    3e76:	movs	r1, #0
    3e78:	mov	r0, r4
    3e7a:	bl	39a0 <MTPD::write32(unsigned long)>
          write32(0);
    3e7e:	b.n	3ea2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    3e80:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    3e84:	mov	r0, r4
    3e86:	bl	38f6 <MTPD::write16(unsigned short)>
          write16(0x004);
    3e8a:	movs	r1, #4
    3e8c:	mov	r0, r4
    3e8e:	bl	38f6 <MTPD::write16(unsigned short)>
          write8(0); //get
    3e92:	movs	r1, #0
    3e94:	mov	r0, r4
    3e96:	bl	38e0 <MTPD::write8(unsigned char)>
          write16(0);
    3e9a:	movs	r1, #0
    3e9c:	mov	r0, r4
    3e9e:	bl	38f6 <MTPD::write16(unsigned short)>
          write32(0);
    3ea2:	mov	r0, r4
    3ea4:	movs	r1, #0
    3ea6:	bl	39a0 <MTPD::write32(unsigned long)>
          write8(0);
    3eaa:	movs	r1, #0
    3eac:	mov	r0, r4
    }
    3eae:	add	sp, #8
    3eb0:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    3eb4:	b.w	38e0 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    3eb8:	movw	r1, #56323	; 0xdc03
    3ebc:	b.n	3e84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    3ebe:	movw	r1, #56324	; 0xdc04
    3ec2:	bl	38f6 <MTPD::write16(unsigned short)>
          write16(0x008);
    3ec6:	movs	r1, #8
    3ec8:	mov	r0, r4
    3eca:	bl	38f6 <MTPD::write16(unsigned short)>
          write8(0); //get
    3ece:	movs	r1, #0
    3ed0:	mov	r0, r4
    3ed2:	bl	38e0 <MTPD::write8(unsigned char)>
          write64(0);
    3ed6:	movs	r2, #0
    3ed8:	movs	r3, #0
    3eda:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3ede:	movs	r2, #8
    3ee0:	mov	r1, sp
    3ee2:	mov	r0, r4
    3ee4:	bl	38c0 <MTPD::write(char const*, int)>
          write32(0);
    3ee8:	b.n	3ea2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    3eea:	movw	r1, #56327	; 0xdc07
    3eee:	bl	38f6 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3ef2:	movw	r1, #65535	; 0xffff
    3ef6:	mov	r0, r4
    3ef8:	bl	38f6 <MTPD::write16(unsigned short)>
          write8(1); //get/set
    3efc:	movs	r1, #1
          write8(0); //get
    3efe:	mov	r0, r4
    3f00:	bl	38e0 <MTPD::write8(unsigned char)>
          write8(0);
    3f04:	movs	r1, #0
    3f06:	mov	r0, r4
    3f08:	bl	38e0 <MTPD::write8(unsigned char)>
    3f0c:	b.n	3ea2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    3f0e:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    3f12:	mov	r0, r4
          write16(0xDC44);
    3f14:	bl	38f6 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3f18:	movw	r1, #65535	; 0xffff
    3f1c:	mov	r0, r4
    3f1e:	bl	38f6 <MTPD::write16(unsigned short)>
          write8(0); //get
    3f22:	movs	r1, #0
    3f24:	b.n	3efe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    3f26:	movw	r1, #56329	; 0xdc09
    3f2a:	b.n	3f12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    3f2c:	movw	r1, #56331	; 0xdc0b
    3f30:	b.n	3e60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    3f32:	bl	38f6 <MTPD::write16(unsigned short)>
          write16(0x0A);
    3f36:	movs	r1, #10
    3f38:	mov	r0, r4
    3f3a:	movs	r6, #0
    3f3c:	bl	38f6 <MTPD::write16(unsigned short)>
          write8(0); //get
    3f40:	movs	r7, #0
    3f42:	movs	r1, #0
    3f44:	mov	r0, r4
    3f46:	bl	38e0 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3f4a:	movs	r2, #8
    3f4c:	mov	r1, sp
    3f4e:	mov	r0, r4
    3f50:	strd	r6, r7, [sp]
    3f54:	bl	38c0 <MTPD::write(char const*, int)>
          write64(0);
    3f58:	strd	r6, r7, [sp]
    3f5c:	b.n	3ede <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

00003f5e <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    3f5e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f62:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    3f64:	ldr	r0, [r0, #0]
    3f66:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    3f68:	add.w	r5, r6, #8192	; 0x2000
    {
    3f6c:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3f70:	ldr	r3, [r3, #40]	; 0x28
    {
    3f72:	sub	sp, #20
    3f74:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    3f78:	blx	r3
      if (write_get_length_) {
    3f7a:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    3f7e:	mov	r8, r0
      if (write_get_length_) {
    3f80:	cbz	r4, 3f96 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    3f82:	ldr.w	r3, [r5, #1064]	; 0x428
    3f86:	add	r3, r0
    3f88:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    3f8c:	add	sp, #20
    3f8e:	vpop	{d8}
    3f92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3f96:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    3f9a:	movs	r7, #12
    3f9c:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3fa0:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    3fa4:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    3fa8:	str	r4, [sp, #12]
        while(pos<size)
    3faa:	ldr	r3, [sp, #12]
    3fac:	cmp	r3, r8
    3fae:	bcc.n	3fca <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    3fb0:	cmp	r7, #0
    3fb2:	beq.n	3f8c <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3fb4:	mov.w	r1, #512	; 0x200
    3fb8:	add.w	r0, r6, #544	; 0x220
    }
    3fbc:	add	sp, #20
    3fbe:	vpop	{d8}
    3fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3fc6:	b.w	37b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    3fca:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3fce:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    3fd0:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3fd4:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    3fd8:	bne.n	3ffc <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3fda:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3fdc:	cmp.w	r9, #8192	; 0x2000
    3fe0:	it	cc
    3fe2:	movcc	r3, r9
    3fe4:	vmov	r1, s16
    3fe8:	ldr	r2, [r0, #0]
    3fea:	str	r3, [sp, #0]
    3fec:	ldr	r3, [r2, #48]	; 0x30
    3fee:	ldr	r2, [sp, #12]
    3ff0:	mov	r4, r3
    3ff2:	mov	r3, fp
    3ff4:	blx	r4
            disk_pos=0;
    3ff6:	movs	r3, #0
    3ff8:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3ffc:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4000:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4004:	add.w	r0, sl, r7
    4008:	cmp	r9, r3
    400a:	it	cs
    400c:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    400e:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4012:	add	r1, fp
    4014:	cmp	r9, r3
    4016:	it	cs
    4018:	movcs	r9, r3
    401a:	mov	r2, r9
          len += to_copy;
    401c:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    401e:	bl	9c60 <memcpy>
          disk_pos += to_copy;
    4022:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4026:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    402a:	add	r3, r9
    402c:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    4030:	ldr	r3, [sp, #12]
    4032:	add	r3, r9
    4034:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    4036:	bne.n	3faa <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4038:	mov	r1, r7
    403a:	mov	r0, sl
            len=0;
    403c:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    403e:	bl	37b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4042:	b.n	3faa <MTPD::GetObject(unsigned long)+0x4c>

00004044 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4044:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4048:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    404a:	ldr	r0, [r0, #0]
    {
    404c:	mov	r4, r3
    404e:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    4050:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    4052:	add.w	r5, r8, #8192	; 0x2000
    {
    4056:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    405a:	ldr	r3, [r3, #40]	; 0x28
    {
    405c:	sub	sp, #20
    405e:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4062:	blx	r3
      size -= offset;
    4064:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    4066:	cmp.w	r4, #4294967295
    406a:	it	eq
    406c:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    406e:	cmp	r4, r0
    4070:	mov	r3, r4
    4072:	it	cs
    4074:	movcs	r3, r0
    4076:	str	r3, [sp, #8]
      if (write_get_length_) {
    4078:	ldrb.w	r3, [r5, #1060]	; 0x424
    407c:	str	r3, [sp, #12]
    407e:	cbz	r3, 4098 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    4080:	ldr.w	r3, [r5, #1064]	; 0x428
    4084:	ldr	r2, [sp, #8]
    4086:	add	r3, r2
    4088:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    408c:	ldr	r0, [sp, #8]
    408e:	add	sp, #20
    4090:	vpop	{d8}
    4094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4098:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    409c:	movs	r7, #12
    409e:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    40a2:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    40a6:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    40aa:	ldr	r3, [sp, #8]
    40ac:	cmp	r3, r6
    40ae:	bls.n	408c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    40b0:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    40b4:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    40b6:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    40ba:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    40be:	bne.n	40e4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    40c0:	ldr.w	r0, [r8]
    40c4:	cmp.w	r9, #8192	; 0x2000
    40c8:	it	cc
    40ca:	movcc	r3, r9
    40cc:	vmov	r1, s16
    40d0:	ldr	r2, [r0, #0]
    40d2:	str	r3, [sp, #0]
    40d4:	ldr	r3, [r2, #48]	; 0x30
    40d6:	mov	r2, r6
    40d8:	mov	r4, r3
    40da:	mov	r3, fp
    40dc:	blx	r4
            disk_pos=0;
    40de:	ldr	r3, [sp, #12]
    40e0:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    40e4:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    40e8:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    40ec:	add.w	r0, sl, r7
    40f0:	cmp	r9, r3
    40f2:	it	cs
    40f4:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    40f6:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    40fa:	add	r1, fp
    40fc:	cmp	r9, r3
    40fe:	it	cs
    4100:	movcs	r9, r3
    4102:	mov	r2, r9
          len += to_copy;
    4104:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4106:	bl	9c60 <memcpy>
          disk_pos += to_copy;
    410a:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    410e:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4112:	add	r6, r9
          disk_pos += to_copy;
    4114:	add	r3, r9
    4116:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    411a:	bne.n	40aa <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    411c:	mov	r1, r7
    411e:	mov	r0, sl
            len=0;
    4120:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4122:	bl	37b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4126:	b.n	40aa <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00004128 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    4128:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    412c:	mov	r8, r0
    412e:	mov	r5, r1
      static int index=0;
      if(!size) 
    4130:	mov	r4, r2
    4132:	ldr.w	fp, [pc, #84]	; 4188 <MTPD::read(char*, unsigned long)+0x60>
    4136:	cbz	r2, 417e <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    4138:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    413c:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4140:	ldr.w	r6, [fp]
    4144:	rsb	r7, r6, #512	; 0x200
    4148:	cmp	r7, r4
    414a:	it	cs
    414c:	movcs	r7, r4
        if (data) {
    414e:	cbz	r5, 415e <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4150:	mov	r0, r5
          data += to_copy;
    4152:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4154:	mov	r2, r7
    4156:	add.w	r1, r9, r6
    415a:	bl	9c60 <memcpy>
        index += to_copy;
    415e:	add	r6, r7
        size -= to_copy;
    4160:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    4162:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    4166:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    416a:	bne.n	4178 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    416c:	mov	r1, r9
    416e:	mov	r0, r8
    4170:	bl	38a8 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4174:	str.w	sl, [fp]
      while (size) {
    4178:	cmp	r4, #0
    417a:	bne.n	4140 <MTPD::read(char*, unsigned long)+0x18>
    417c:	b.n	4182 <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    417e:	str.w	r2, [fp]
        }
      }
    }
    4182:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4186:	nop
    4188:	.word	0x2002724c

0000418c <MTPD::ReadMTPHeader()>:
  {
    418c:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    418e:	movs	r2, #12
    4190:	add	r1, sp, #4
    4192:	bl	4128 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    4196:	ldrh.w	r3, [sp, #8]
    419a:	cmp	r3, #2
      return header.len - 12;
    419c:	itet	eq
    419e:	ldreq	r0, [sp, #4]
      return 0;
    41a0:	movne	r0, #0
      return header.len - 12;
    41a2:	subeq	r0, #12
  }
    41a4:	add	sp, #20
    41a6:	ldr.w	pc, [sp], #4

000041aa <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    41aa:	push	{r0, r1, r2, lr}
    41ac:	movs	r2, #1
    41ae:	add.w	r1, sp, #7
    41b2:	bl	4128 <MTPD::read(char*, unsigned long)>
    41b6:	ldrb.w	r0, [sp, #7]
    41ba:	add	sp, #12
    41bc:	ldr.w	pc, [sp], #4

000041c0 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    41c0:	push	{r0, r1, r2, lr}
    41c2:	movs	r2, #2
    41c4:	add.w	r1, sp, #6
    41c8:	bl	4128 <MTPD::read(char*, unsigned long)>
    41cc:	ldrh.w	r0, [sp, #6]
    41d0:	add	sp, #12
    41d2:	ldr.w	pc, [sp], #4

000041d6 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    41d6:	push	{r0, r1, r2, lr}
    41d8:	movs	r2, #4
    41da:	add.w	r1, sp, r2
    41de:	bl	4128 <MTPD::read(char*, unsigned long)>
    41e2:	ldr	r0, [sp, #4]
    41e4:	add	sp, #12
    41e6:	ldr.w	pc, [sp], #4

000041ea <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    41ea:	push	{r4, r5, r6, lr}
    41ec:	mov	r5, r1
    41ee:	mov	r6, r0
    int len = read8();
    41f0:	bl	41aa <MTPD::read8()>
    if (!buffer) {
    41f4:	cbz	r5, 41fe <MTPD::readstring(char*)+0x14>
    41f6:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    41f8:	cmp	r5, r4
    41fa:	bne.n	420e <MTPD::readstring(char*)+0x24>
  }
    41fc:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    41fe:	sxth	r2, r0
    4200:	mov	r1, r5
    4202:	mov	r0, r6
    4204:	lsls	r2, r2, #1
  }
    4206:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    420a:	b.w	4128 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    420e:	mov	r0, r6
    4210:	bl	41c0 <MTPD::read16()>
    4214:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4218:	b.n	41f8 <MTPD::readstring(char*)+0xe>

0000421a <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    421a:	push	{r4, r5, lr}
    421c:	mov	r4, r0
    421e:	sub	sp, #260	; 0x104
    4220:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    4222:	bl	418c <MTPD::ReadMTPHeader()>
        readstring(filename);
    4226:	mov	r1, sp
    4228:	mov	r0, r4
    422a:	bl	41ea <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    422e:	ldr	r0, [r4, #0]
    4230:	mov	r2, sp
    4232:	mov	r1, r5
    4234:	ldr	r3, [r0, #0]
    4236:	ldr	r3, [r3, #72]	; 0x48
    4238:	blx	r3
      }
      else
        return 0x2005;
    }
    423a:	movw	r2, #8193	; 0x2001
    423e:	movw	r3, #8197	; 0x2005
    4242:	cmp	r0, #0
    4244:	ite	ne
    4246:	movne	r0, r2
    4248:	moveq	r0, r3
    424a:	add	sp, #260	; 0x104
    424c:	pop	{r4, r5, pc}
	...

00004250 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4250:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4254:	mov	r4, r0
    4256:	sub	sp, #268	; 0x10c
    4258:	mov	r6, r1
      pull_packet(rx_data_buffer);
    425a:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    425e:	mov	r7, r2
      pull_packet(rx_data_buffer);
    4260:	bl	38a8 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4264:	movs	r2, #0
    4266:	ldr	r3, [pc, #196]	; (432c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    4268:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    426a:	add.w	r9, sp, #8
        index=0;
    426e:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    4270:	bl	418c <MTPD::ReadMTPHeader()>
    4274:	mov	r5, r0
      read32(); len -=4; // storage
    4276:	mov	r0, r4
    4278:	bl	41d6 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    427c:	mov	r0, r4
    427e:	bl	41c0 <MTPD::read16()>
    4282:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    4286:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    4288:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    428a:	subs	r3, r0, r3
      read16(); len -=2; // protection
    428c:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    428e:	rsbs	r8, r3, #0
    4292:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    4296:	bl	41c0 <MTPD::read16()>
      read32(); len -=4; // size
    429a:	mov	r0, r4
    429c:	bl	41d6 <MTPD::read32()>
      read16(); len -=2; // thumb format
    42a0:	mov	r0, r4
    42a2:	bl	41c0 <MTPD::read16()>
      read32(); len -=4; // thumb size
    42a6:	mov	r0, r4
    42a8:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // thumb width
    42ac:	mov	r0, r4
    42ae:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // thumb height
    42b2:	mov	r0, r4
    42b4:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // pix width
    42b8:	mov	r0, r4
    42ba:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // pix height
    42be:	mov	r0, r4
    42c0:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // bit depth
    42c4:	mov	r0, r4
    42c6:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // parent
    42ca:	mov	r0, r4
    42cc:	bl	41d6 <MTPD::read32()>
      read16(); len -=2; // association type
    42d0:	mov	r0, r4
    42d2:	bl	41c0 <MTPD::read16()>
      read32(); len -=4; // association description
    42d6:	mov	r0, r4
    42d8:	bl	41d6 <MTPD::read32()>
      read32(); len -=4; // sequence number
    42dc:	mov	r0, r4
    42de:	bl	41d6 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    42e2:	mov	r1, r9
    42e4:	mov	r0, r4
    42e6:	bl	41ea <MTPD::readstring(char*)>
    42ea:	mov	r0, r9
    42ec:	bl	ec80 <strlen>
    42f0:	adds	r0, #1
    42f2:	sub.w	r5, r5, r0, lsl #1
    42f6:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    42f8:	cmp	r5, #3
    42fa:	bgt.n	4316 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    42fc:	cbnz	r5, 4320 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    42fe:	ldr	r0, [r4, #0]
    4300:	mov	r2, r7
    4302:	mov	r1, r6
    4304:	ldr	r3, [r0, #0]
    4306:	str.w	r9, [sp]
    430a:	ldr	r4, [r3, #44]	; 0x2c
    430c:	mov	r3, r8
    430e:	blx	r4
    }
    4310:	add	sp, #268	; 0x10c
    4312:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4316:	mov	r0, r4
    4318:	subs	r5, #4
    431a:	bl	41d6 <MTPD::read32()>
    431e:	b.n	42f8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4320:	mov	r0, r4
    4322:	subs	r5, #1
    4324:	bl	41aa <MTPD::read8()>
    4328:	b.n	42fc <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    432a:	nop
    432c:	.word	0x2002724c

00004330 <MTPD::SendObject()>:
    { 
    4330:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4334:	add.w	r9, r0, #32
    { 
    4338:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    433a:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    433e:	mov	r1, r9
      disk_pos=0;
    4340:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4344:	bl	38a8 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4348:	ldr	r3, [pc, #212]	; (4420 <MTPD::SendObject()+0xf0>)
    434a:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    434c:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    434e:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4352:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4354:	bl	418c <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4358:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    435a:	mov	r7, r0
      disk_pos=0;
    435c:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4360:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4362:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4366:	bgt.n	437c <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4368:	ldr	r0, [r4, #0]
    436a:	ldr	r2, [r0, #0]
      if(disk_pos)
    436c:	cmp	r3, #0
    436e:	bne.n	440a <MTPD::SendObject()+0xda>
      storage_->close();
    4370:	ldr	r0, [r4, #0]
    4372:	ldr	r3, [r0, #0]
    4374:	ldr	r3, [r3, #56]	; 0x38
    4376:	blx	r3
      return true;
    4378:	movs	r0, #1
    437a:	b.n	43c4 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    437c:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4380:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4384:	add.w	r0, fp, r3
    4388:	add.w	r1, r9, sl
    438c:	cmp	r8, r7
    438e:	it	cs
    4390:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4392:	cmp	r5, r8
    4394:	it	cs
    4396:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4398:	mov	r2, r5
    439a:	bl	9c60 <memcpy>
        disk_pos += to_copy;
    439e:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    43a2:	subs	r3, r7, r5
        disk_pos += to_copy;
    43a4:	add	r2, r5
        len -= to_copy;
    43a6:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    43a8:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    43ac:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    43b0:	bne.n	43f6 <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    43b2:	ldr	r0, [r4, #0]
    43b4:	mov	r1, fp
    43b6:	ldr	r3, [r0, #0]
    43b8:	ldr	r3, [r3, #52]	; 0x34
    43ba:	blx	r3
    43bc:	cmp.w	r0, #8192	; 0x2000
    43c0:	bcs.n	43ca <MTPD::SendObject()+0x9a>
    43c2:	movs	r0, #0
    }
    43c4:	add	sp, #12
    43c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    43ca:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    43cc:	subs.w	r2, r8, r5
          disk_pos =0;
    43d0:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    43d4:	beq.n	43f6 <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    43d6:	add.w	r1, sl, r5
    43da:	mov	r0, fp
    43dc:	str	r2, [sp, #4]
    43de:	add	r1, r9
    43e0:	bl	9c60 <memcpy>
            disk_pos += bytes;
    43e4:	ldr.w	r3, [r6, #1056]	; 0x420
    43e8:	ldr	r2, [sp, #4]
    43ea:	add	r3, r2
    43ec:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    43f0:	sub.w	r3, r7, r8
    43f4:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    43f6:	ldr	r3, [sp, #4]
    43f8:	cbz	r3, 4406 <MTPD::SendObject()+0xd6>
          index=0;
    43fa:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    43fe:	mov	r1, r9
    4400:	mov	r0, r4
    4402:	bl	38a8 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4406:	ldr	r7, [sp, #4]
    4408:	b.n	4360 <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    440a:	ldr	r5, [r2, #52]	; 0x34
    440c:	add.w	r1, r4, #1056	; 0x420
    4410:	mov	r2, r3
    4412:	blx	r5
    4414:	ldr.w	r3, [r6, #1056]	; 0x420
    4418:	cmp	r0, r3
    441a:	bcs.n	4370 <MTPD::SendObject()+0x40>
    441c:	b.n	43c2 <MTPD::SendObject()+0x92>
    441e:	nop
    4420:	.word	0x2002724c

00004424 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4424:	push	{r4, r5, r6, lr}
    4426:	mov	r5, r1
    4428:	add.w	r1, r0, #32
    442c:	mov	r6, r2
    442e:	mov	r4, r0
    4430:	bl	38a8 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4434:	ldr	r3, [pc, #28]	; (4454 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4436:	movs	r2, #0
    4438:	str	r2, [r3, #0]
      if(p2==0xDC07)
    443a:	movw	r3, #56327	; 0xdc07
    443e:	cmp	r6, r3
    4440:	bne.n	444e <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4442:	mov	r1, r5
    4444:	mov	r0, r4
    }
    4446:	ldmia.w	sp!, {r4, r5, r6, lr}
    444a:	b.w	421a <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    444e:	movw	r0, #8197	; 0x2005
    4452:	pop	{r4, r5, r6, pc}
    4454:	.word	0x2002724c

00004458 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4458:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    445c:	sub	sp, #60	; 0x3c
    445e:	mov	r4, r0
    4460:	bl	bc88 <usb_mtp_available>
    4464:	cmp	r0, #0
    4466:	beq.w	48c0 <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    446a:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    446e:	movs	r1, #60	; 0x3c
    4470:	mov	r0, fp
    4472:	bl	bbf4 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4476:	cmp	r0, #0
    4478:	beq.w	48c0 <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    447c:	ldr	r3, [r4, #40]	; 0x28
    447e:	ldr	r1, [pc, #756]	; (4774 <MTPD::loop()+0x31c>)
    4480:	str	r3, [sp, #4]
    4482:	ldrh	r3, [r4, #36]	; 0x24
    4484:	ldr	r0, [pc, #752]	; (4778 <MTPD::loop()+0x320>)
    4486:	str	r3, [sp, #0]
    4488:	ldr	r3, [r4, #32]
    448a:	ldrh	r2, [r4, #38]	; 0x26
    448c:	bl	c164 <Print::printf(char const*, ...)>
    4490:	ldr	r3, [r4, #32]
    4492:	cmp	r3, #12
    4494:	bls.n	44a0 <MTPD::loop()+0x48>
    4496:	ldr	r2, [r4, #44]	; 0x2c
    4498:	ldr	r1, [pc, #736]	; (477c <MTPD::loop()+0x324>)
    449a:	ldr	r0, [pc, #732]	; (4778 <MTPD::loop()+0x320>)
    449c:	bl	c164 <Print::printf(char const*, ...)>
    44a0:	ldr	r3, [r4, #32]
    44a2:	cmp	r3, #16
    44a4:	bls.n	44b0 <MTPD::loop()+0x58>
    44a6:	ldr	r2, [r4, #48]	; 0x30
    44a8:	ldr	r1, [pc, #720]	; (477c <MTPD::loop()+0x324>)
    44aa:	ldr	r0, [pc, #716]	; (4778 <MTPD::loop()+0x320>)
    44ac:	bl	c164 <Print::printf(char const*, ...)>
    44b0:	ldr	r3, [r4, #32]
    44b2:	cmp	r3, #20
    44b4:	bls.n	44c0 <MTPD::loop()+0x68>
    44b6:	ldr	r2, [r4, #52]	; 0x34
    44b8:	ldr	r1, [pc, #704]	; (477c <MTPD::loop()+0x324>)
    44ba:	ldr	r0, [pc, #700]	; (4778 <MTPD::loop()+0x320>)
    44bc:	bl	c164 <Print::printf(char const*, ...)>
    44c0:	ldr	r1, [pc, #700]	; (4780 <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    44c2:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    44c6:	ldr	r0, [pc, #688]	; (4778 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    44c8:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    44cc:	bl	c164 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    44d0:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    44d2:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    44d4:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    44d6:	mov	r6, r3
        int op = CONTAINER->op;
    44d8:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    44da:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    44de:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    44e0:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    44e2:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    44e6:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    44ea:	movw	r1, #8197	; 0x2005
    44ee:	cmp	r0, #2
    44f0:	it	eq
    44f2:	moveq	r7, r1

        switch (op)
    44f4:	movw	r0, #4123	; 0x101b
    44f8:	cmp	r2, r0
    44fa:	bhi.n	4584 <MTPD::loop()+0x12c>
    44fc:	cmp.w	r2, #4096	; 0x1000
    4500:	bhi.n	4508 <MTPD::loop()+0xb0>
    4502:	movw	r7, #8197	; 0x2005
    4506:	b.n	4602 <MTPD::loop()+0x1aa>
    4508:	sub.w	r2, r2, #4096	; 0x1000
    450c:	subs	r2, #1
    450e:	cmp	r2, #26
    4510:	bhi.n	4502 <MTPD::loop()+0xaa>
    4512:	add	r1, pc, #4	; (adr r1, 4518 <MTPD::loop()+0xc0>)
    4514:	ldr.w	pc, [r1, r2, lsl #2]
    4518:	.word	0x000045a7
    451c:	.word	0x000045fb
    4520:	.word	0x000048bb
    4524:	.word	0x00004631
    4528:	.word	0x00004675
    452c:	.word	0x000046bf
    4530:	.word	0x000046d5
    4534:	.word	0x0000472b
    4538:	.word	0x00004785
    453c:	.word	0x00004503
    4540:	.word	0x000047cf
    4544:	.word	0x000047ed
    4548:	.word	0x00004801
    454c:	.word	0x00004503
    4550:	.word	0x00004503
    4554:	.word	0x00004503
    4558:	.word	0x00004503
    455c:	.word	0x00004503
    4560:	.word	0x00004503
    4564:	.word	0x00004817
    4568:	.word	0x00004861
    456c:	.word	0x00004503
    4570:	.word	0x00004503
    4574:	.word	0x00004503
    4578:	.word	0x000048ab
    457c:	.word	0x000048c7
    4580:	.word	0x000048f1
    4584:	add.w	r3, r2, #26496	; 0x6780
    4588:	adds	r3, #127	; 0x7f
    458a:	uxth	r3, r3
    458c:	cmp	r3, #3
    458e:	bhi.n	4502 <MTPD::loop()+0xaa>
    4590:	sub.w	r2, r2, #38912	; 0x9800
    4594:	subs	r2, #2
    4596:	cmp	r2, #2
    4598:	bhi.w	4944 <MTPD::loop()+0x4ec>
    459c:	tbh	[pc, r2, lsl #1]
    45a0:	.word	0x021e01f7
    45a4:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    45a6:	movs	r6, #0
    45a8:	movs	r3, #1
    45aa:	mov	r0, r4
    45ac:	strb.w	r3, [r5, #1060]	; 0x424
    45b0:	str.w	r6, [r5, #1064]	; 0x428
    45b4:	bl	39b4 <MTPD::WriteDescriptor()>
    45b8:	ldr.w	r3, [r5, #1064]	; 0x428
    45bc:	mov	r0, r4
    45be:	movs	r2, #12
    45c0:	adds	r3, #12
    45c2:	add	r1, sp, #24
    45c4:	str	r3, [sp, #24]
    45c6:	movs	r3, #2
    45c8:	strh.w	r3, [sp, #28]
    45cc:	ldrh	r3, [r4, #38]	; 0x26
    45ce:	strh.w	r3, [sp, #30]
    45d2:	ldr	r3, [r4, #40]	; 0x28
    45d4:	str.w	r6, [r5, #1064]	; 0x428
    45d8:	strb.w	r6, [r5, #1060]	; 0x424
    45dc:	str	r3, [sp, #32]
    { if (write_get_length_) 
    45de:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    45e2:	mov	r0, r4
    45e4:	bl	39b4 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    45e8:	ldr	r1, [sp, #24]
    45ea:	ubfx	r1, r1, #0, #9
    45ee:	cbz	r1, 4602 <MTPD::loop()+0x1aa>
    45f0:	add.w	r0, r4, #544	; 0x220
    45f4:	bl	37b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    45f8:	b.n	4602 <MTPD::loop()+0x1aa>
            openSession(p1);
    45fa:	mov	r1, r6
    45fc:	mov	r0, r4
    45fe:	bl	3898 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4602:	movs	r3, #3
            CONTAINER->len=len;
    4604:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    4608:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    460a:	mov	r1, fp
            CONTAINER->type=3;
    460c:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    460e:	mov	r2, r9
            CONTAINER->transaction_id=id;
    4610:	ldr	r3, [sp, #16]
    4612:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4614:	ldr	r3, [sp, #12]
    4616:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4618:	add.w	r4, r4, #544	; 0x220
    461c:	mov	r0, r4
    461e:	bl	9c60 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4622:	mov	r1, r9
    4624:	mov	r0, r4
        }
      }
    }
    4626:	add	sp, #60	; 0x3c
    4628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    462c:	b.w	37b0 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4630:	movs	r6, #0
    4632:	movs	r3, #1
    4634:	mov	r0, r4
    4636:	strb.w	r3, [r5, #1060]	; 0x424
    463a:	str.w	r6, [r5, #1064]	; 0x428
    463e:	bl	3acc <MTPD::WriteStorageIDs()>
    4642:	ldr.w	r3, [r5, #1064]	; 0x428
    4646:	mov	r0, r4
    4648:	movs	r2, #12
    464a:	adds	r3, #12
    464c:	add	r1, sp, #24
    464e:	str	r3, [sp, #24]
    4650:	movs	r3, #2
    4652:	strh.w	r3, [sp, #28]
    4656:	ldrh	r3, [r4, #38]	; 0x26
    4658:	strh.w	r3, [sp, #30]
    465c:	ldr	r3, [r4, #40]	; 0x28
    465e:	str.w	r6, [r5, #1064]	; 0x428
    4662:	strb.w	r6, [r5, #1060]	; 0x424
    4666:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4668:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    466c:	mov	r0, r4
    466e:	bl	3acc <MTPD::WriteStorageIDs()>
    4672:	b.n	45e8 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    4674:	mov.w	r8, #0
    4678:	movs	r3, #1
    467a:	mov	r1, r6
    467c:	mov	r0, r4
    467e:	strb.w	r3, [r5, #1060]	; 0x424
    4682:	str.w	r8, [r5, #1064]	; 0x428
    4686:	bl	3d10 <MTPD::GetStorageInfo(unsigned long)>
    468a:	ldr.w	r3, [r5, #1064]	; 0x428
    468e:	add	r1, sp, #24
    4690:	mov	r0, r4
    4692:	adds	r3, #12
    4694:	movs	r2, #12
    4696:	str	r3, [sp, #24]
    4698:	movs	r3, #2
    469a:	strh.w	r3, [sp, #28]
    469e:	ldrh	r3, [r4, #38]	; 0x26
    46a0:	strh.w	r3, [sp, #30]
    46a4:	ldr	r3, [r4, #40]	; 0x28
    46a6:	str.w	r8, [r5, #1064]	; 0x428
    46aa:	strb.w	r8, [r5, #1060]	; 0x424
    46ae:	str	r3, [sp, #32]
    { if (write_get_length_) 
    46b0:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    46b4:	mov	r1, r6
    46b6:	mov	r0, r4
    46b8:	bl	3d10 <MTPD::GetStorageInfo(unsigned long)>
    46bc:	b.n	45e8 <MTPD::loop()+0x190>
            if (p2) 
    46be:	cmp.w	r8, #0
    46c2:	bne.w	4a38 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    46c6:	mov	r2, r3
    46c8:	mov	r1, r6
    46ca:	mov	r0, r4
    46cc:	bl	3840 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    46d0:	str	r0, [sp, #12]
    46d2:	b.n	4602 <MTPD::loop()+0x1aa>
            if (p2) 
    46d4:	cmp.w	r8, #0
    46d8:	bne.w	4a38 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    46dc:	movs	r2, #1
    46de:	mov	r1, r6
    46e0:	mov	r0, r4
    46e2:	str.w	r8, [r5, #1064]	; 0x428
    46e6:	strb.w	r2, [r5, #1060]	; 0x424
    46ea:	mov	r2, r3
    46ec:	str	r3, [sp, #20]
    46ee:	bl	3af6 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    46f2:	ldr.w	r2, [r5, #1064]	; 0x428
    46f6:	add	r1, sp, #24
    46f8:	mov	r0, r4
    46fa:	adds	r2, #12
    46fc:	str	r2, [sp, #24]
    46fe:	movs	r2, #2
    4700:	strh.w	r2, [sp, #28]
    4704:	ldrh	r2, [r4, #38]	; 0x26
    4706:	strh.w	r2, [sp, #30]
    470a:	ldr	r2, [r4, #40]	; 0x28
    470c:	str.w	r8, [r5, #1064]	; 0x428
    4710:	str	r2, [sp, #32]
    4712:	movs	r2, #12
    4714:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    4718:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    471c:	ldr	r3, [sp, #20]
    471e:	mov	r1, r6
    4720:	mov	r0, r4
    4722:	mov	r2, r3
    4724:	bl	3af6 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4728:	b.n	45e8 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    472a:	mov.w	r8, #0
    472e:	movs	r3, #1
    4730:	mov	r1, r6
    4732:	mov	r0, r4
    4734:	strb.w	r3, [r5, #1060]	; 0x424
    4738:	str.w	r8, [r5, #1064]	; 0x428
    473c:	bl	3b48 <MTPD::GetObjectInfo(unsigned long)>
    4740:	ldr.w	r3, [r5, #1064]	; 0x428
    4744:	add	r1, sp, #24
    4746:	mov	r0, r4
    4748:	adds	r3, #12
    474a:	movs	r2, #12
    474c:	str	r3, [sp, #24]
    474e:	movs	r3, #2
    4750:	strh.w	r3, [sp, #28]
    4754:	ldrh	r3, [r4, #38]	; 0x26
    4756:	strh.w	r3, [sp, #30]
    475a:	ldr	r3, [r4, #40]	; 0x28
    475c:	str.w	r8, [r5, #1064]	; 0x428
    4760:	strb.w	r8, [r5, #1060]	; 0x424
    4764:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4766:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    476a:	mov	r1, r6
    476c:	mov	r0, r4
    476e:	bl	3b48 <MTPD::GetObjectInfo(unsigned long)>
    4772:	b.n	45e8 <MTPD::loop()+0x190>
    4774:	.word	0x20007f5e
    4778:	.word	0x200089a4
    477c:	.word	0x20007f6c
    4780:	.word	0x20007bdd
            TRANSMIT(GetObject(p1));
    4784:	mov.w	r8, #0
    4788:	movs	r3, #1
    478a:	mov	r1, r6
    478c:	mov	r0, r4
    478e:	strb.w	r3, [r5, #1060]	; 0x424
    4792:	str.w	r8, [r5, #1064]	; 0x428
    4796:	bl	3f5e <MTPD::GetObject(unsigned long)>
    479a:	ldr.w	r3, [r5, #1064]	; 0x428
    479e:	add	r1, sp, #24
    47a0:	mov	r0, r4
    47a2:	adds	r3, #12
    47a4:	movs	r2, #12
    47a6:	str	r3, [sp, #24]
    47a8:	movs	r3, #2
    47aa:	strh.w	r3, [sp, #28]
    47ae:	ldrh	r3, [r4, #38]	; 0x26
    47b0:	strh.w	r3, [sp, #30]
    47b4:	ldr	r3, [r4, #40]	; 0x28
    47b6:	str.w	r8, [r5, #1064]	; 0x428
    47ba:	strb.w	r8, [r5, #1060]	; 0x424
    47be:	str	r3, [sp, #32]
    { if (write_get_length_) 
    47c0:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    47c4:	mov	r1, r6
    47c6:	mov	r0, r4
    47c8:	bl	3f5e <MTPD::GetObject(unsigned long)>
    47cc:	b.n	45e8 <MTPD::loop()+0x190>
              if (p2) {
    47ce:	cmp.w	r8, #0
    47d2:	bne.w	4a38 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    47d6:	ldr	r0, [r4, #0]
    47d8:	mov	r1, r6
    47da:	ldr	r3, [r0, #0]
    47dc:	ldr	r3, [r3, #60]	; 0x3c
    47de:	blx	r3
                  return_code = 0x2012; // partial deletion
    47e0:	movw	r3, #8210	; 0x2012
    47e4:	cmp	r0, #0
    47e6:	it	eq
    47e8:	moveq	r7, r3
    47ea:	b.n	4602 <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    47ec:	mov	r2, r8
    47ee:	mov	r1, r6
    47f0:	mov	r0, r4
              len = 12 + 3 * 4;
    47f2:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    47f6:	bl	4250 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    47fa:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    47fe:	b.n	4602 <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    4800:	mov	r0, r4
    4802:	mov.w	r9, #12
    4806:	bl	4330 <MTPD::SendObject()>
    480a:	movw	r3, #8197	; 0x2005
    480e:	cmp	r0, #0
    4810:	it	eq
    4812:	moveq	r7, r3
    4814:	b.n	4602 <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    4816:	mov.w	r8, #0
    481a:	movs	r3, #1
    481c:	mov	r1, r6
    481e:	mov	r0, r4
    4820:	strb.w	r3, [r5, #1060]	; 0x424
    4824:	str.w	r8, [r5, #1064]	; 0x428
    4828:	bl	395c <MTPD::GetDevicePropDesc(unsigned long)>
    482c:	ldr.w	r3, [r5, #1064]	; 0x428
    4830:	add	r1, sp, #24
    4832:	mov	r0, r4
    4834:	adds	r3, #12
    4836:	movs	r2, #12
    4838:	str	r3, [sp, #24]
    483a:	movs	r3, #2
    483c:	strh.w	r3, [sp, #28]
    4840:	ldrh	r3, [r4, #38]	; 0x26
    4842:	strh.w	r3, [sp, #30]
    4846:	ldr	r3, [r4, #40]	; 0x28
    4848:	str.w	r8, [r5, #1064]	; 0x428
    484c:	strb.w	r8, [r5, #1060]	; 0x424
    4850:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4852:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4856:	mov	r1, r6
    4858:	mov	r0, r4
    485a:	bl	395c <MTPD::GetDevicePropDesc(unsigned long)>
    485e:	b.n	45e8 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    4860:	mov.w	r8, #0
    4864:	movs	r3, #1
    4866:	mov	r1, r6
    4868:	mov	r0, r4
    486a:	strb.w	r3, [r5, #1060]	; 0x424
    486e:	str.w	r8, [r5, #1064]	; 0x428
    4872:	bl	3948 <MTPD::GetDevicePropValue(unsigned long)>
    4876:	ldr.w	r3, [r5, #1064]	; 0x428
    487a:	add	r1, sp, #24
    487c:	mov	r0, r4
    487e:	adds	r3, #12
    4880:	movs	r2, #12
    4882:	str	r3, [sp, #24]
    4884:	movs	r3, #2
    4886:	strh.w	r3, [sp, #28]
    488a:	ldrh	r3, [r4, #38]	; 0x26
    488c:	strh.w	r3, [sp, #30]
    4890:	ldr	r3, [r4, #40]	; 0x28
    4892:	str.w	r8, [r5, #1064]	; 0x428
    4896:	strb.w	r8, [r5, #1060]	; 0x424
    489a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    489c:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    48a0:	mov	r1, r6
    48a2:	mov	r0, r4
    48a4:	bl	3948 <MTPD::GetDevicePropValue(unsigned long)>
    48a8:	b.n	45e8 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    48aa:	mov	r2, r8
    48ac:	mov	r1, r6
    48ae:	mov	r0, r4
              len = 12;
    48b0:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    48b4:	bl	3866 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    48b8:	mov	r7, r0
        if(return_code)
    48ba:	cmp	r7, #0
    48bc:	bne.w	4602 <MTPD::loop()+0x1aa>
    }
    48c0:	add	sp, #60	; 0x3c
    48c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    48c6:	mov	r2, r8
    48c8:	mov	r1, r6
    48ca:	mov	r0, r4
              if(!return_code) 
    48cc:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    48d0:	bl	3884 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    48d4:	cmp	r0, #0
    48d6:	itete	eq
    48d8:	moveq	r3, r6
    48da:	movne	r3, r0
    48dc:	moveq.w	r9, #12
    48e0:	movne.w	r9, #16
    48e4:	str	r3, [sp, #12]
    48e6:	movw	r3, #8193	; 0x2001
    48ea:	it	ne
    48ec:	movne	r7, r3
    48ee:	b.n	4602 <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    48f0:	mov.w	sl, #0
    48f4:	movs	r2, #1
    48f6:	mov	r1, r6
    48f8:	mov	r0, r4
    48fa:	strb.w	r2, [r5, #1060]	; 0x424
    48fe:	mov	r2, r8
    4900:	str.w	sl, [r5, #1064]	; 0x428
    4904:	str	r3, [sp, #20]
    4906:	bl	4044 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    490a:	ldr.w	r2, [r5, #1064]	; 0x428
    490e:	add	r1, sp, #24
    4910:	adds	r2, #12
    4912:	str	r2, [sp, #24]
    4914:	movs	r2, #2
    4916:	strh.w	r2, [sp, #28]
    491a:	ldrh	r2, [r4, #38]	; 0x26
    491c:	strh.w	r2, [sp, #30]
    4920:	ldr	r2, [r4, #40]	; 0x28
    4922:	str.w	sl, [r5, #1064]	; 0x428
    4926:	strb.w	sl, [r5, #1060]	; 0x424
    492a:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    492e:	mov	r0, r4
    4930:	movs	r2, #32
    4932:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4936:	ldr	r3, [sp, #20]
    4938:	mov	r2, r8
    493a:	mov	r1, r6
    493c:	mov	r0, r4
    493e:	bl	4044 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4942:	b.n	45e8 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4944:	mov.w	r8, #0
    4948:	movs	r3, #1
    494a:	mov	r1, r6
    494c:	mov	r0, r4
    494e:	strb.w	r3, [r5, #1060]	; 0x424
    4952:	str.w	r8, [r5, #1064]	; 0x428
    4956:	bl	3c18 <MTPD::getObjectPropsSupported(unsigned long)>
    495a:	ldr.w	r3, [r5, #1064]	; 0x428
    495e:	add	r1, sp, #24
    4960:	mov	r0, r4
    4962:	adds	r3, #12
    4964:	movs	r2, #12
    4966:	str	r3, [sp, #24]
    4968:	movs	r3, #2
    496a:	strh.w	r3, [sp, #28]
    496e:	ldrh	r3, [r4, #38]	; 0x26
    4970:	strh.w	r3, [sp, #30]
    4974:	ldr	r3, [r4, #40]	; 0x28
    4976:	str.w	r8, [r5, #1064]	; 0x428
    497a:	strb.w	r8, [r5, #1060]	; 0x424
    497e:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4980:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4984:	mov	r1, r6
    4986:	mov	r0, r4
    4988:	bl	3c18 <MTPD::getObjectPropsSupported(unsigned long)>
    498c:	b.n	45e8 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    498e:	mov.w	sl, #0
    4992:	movs	r3, #1
    4994:	mov	r2, r8
    4996:	mov	r1, r6
    4998:	mov	r0, r4
    499a:	strb.w	r3, [r5, #1060]	; 0x424
    499e:	str.w	sl, [r5, #1064]	; 0x428
    49a2:	bl	3e1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    49a6:	ldr.w	r3, [r5, #1064]	; 0x428
    49aa:	add	r1, sp, #24
    49ac:	mov	r0, r4
    49ae:	adds	r3, #12
    49b0:	movs	r2, #12
    49b2:	str	r3, [sp, #24]
    49b4:	movs	r3, #2
    49b6:	strh.w	r3, [sp, #28]
    49ba:	ldrh	r3, [r4, #38]	; 0x26
    49bc:	strh.w	r3, [sp, #30]
    49c0:	ldr	r3, [r4, #40]	; 0x28
    49c2:	str.w	sl, [r5, #1064]	; 0x428
    49c6:	strb.w	sl, [r5, #1060]	; 0x424
    49ca:	str	r3, [sp, #32]
    { if (write_get_length_) 
    49cc:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    49d0:	mov	r2, r8
    49d2:	mov	r1, r6
    49d4:	mov	r0, r4
    49d6:	bl	3e1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    49da:	b.n	45e8 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    49dc:	mov.w	sl, #0
    49e0:	movs	r3, #1
    49e2:	mov	r2, r8
    49e4:	mov	r1, r6
    49e6:	mov	r0, r4
    49e8:	strb.w	r3, [r5, #1060]	; 0x424
    49ec:	str.w	sl, [r5, #1064]	; 0x428
    49f0:	bl	3c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    49f4:	ldr.w	r3, [r5, #1064]	; 0x428
    49f8:	add	r1, sp, #24
    49fa:	mov	r0, r4
    49fc:	adds	r3, #12
    49fe:	movs	r2, #12
    4a00:	str	r3, [sp, #24]
    4a02:	movs	r3, #2
    4a04:	strh.w	r3, [sp, #28]
    4a08:	ldrh	r3, [r4, #38]	; 0x26
    4a0a:	strh.w	r3, [sp, #30]
    4a0e:	ldr	r3, [r4, #40]	; 0x28
    4a10:	str.w	sl, [r5, #1064]	; 0x428
    4a14:	strb.w	sl, [r5, #1060]	; 0x424
    4a18:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4a1a:	bl	37c8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4a1e:	mov	r2, r8
    4a20:	mov	r1, r6
    4a22:	mov	r0, r4
    4a24:	bl	3c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4a28:	b.n	45e8 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    4a2a:	mov	r2, r8
    4a2c:	mov	r1, r6
    4a2e:	mov	r0, r4
    4a30:	bl	4424 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4a34:	mov	r7, r0
              break;
    4a36:	b.n	48ba <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    4a38:	movw	r7, #8212	; 0x2014
    4a3c:	b.n	4602 <MTPD::loop()+0x1aa>
    4a3e:	nop

00004a40 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    4a40:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    4a42:	cbz	r3, 4a7a <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4a44:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4a46:	movw	r5, #513	; 0x201
    4a4a:	str	r5, [r4, #16]
    4a4c:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4a4e:	cbz	r1, 4a7c <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4a50:	ldrb.w	r5, [r1], #1
    4a54:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4a56:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4a58:	str	r5, [r6, #100]	; 0x64
    4a5a:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4a5c:	ldr	r6, [r5, #112]	; 0x70
    4a5e:	lsls	r6, r6, #30
    4a60:	bmi.n	4a6c <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a62:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4a64:	cbz	r2, 4a6a <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a66:	strb.w	r5, [r2], #1
				count_read--;
    4a6a:	subs	r4, #1
    4a6c:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4a6e:	ldr	r5, [r5, #20]
    4a70:	lsls	r5, r5, #31
    4a72:	bpl.n	4a5a <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    4a74:	cmp	r3, #0
    4a76:	bne.n	4a4e <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    4a78:	cbnz	r4, 4a82 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    4a7a:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4a7c:	ldrb.w	r5, [r0, #60]	; 0x3c
    4a80:	b.n	4a54 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    4a82:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4a84:	ldr	r1, [r3, #112]	; 0x70
    4a86:	lsls	r1, r1, #30
    4a88:	bmi.n	4a78 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a8a:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4a8c:	cbz	r2, 4a92 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a8e:	strb.w	r3, [r2], #1
			count_read--;
    4a92:	subs	r4, #1
    4a94:	b.n	4a78 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00004a96 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4a96:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4a98:	ldr	r2, [r3, #0]
    4a9a:	ldr	r1, [r2, #0]
    4a9c:	ldr	r2, [r3, #4]
    4a9e:	tst	r1, r2
void SPIClass::end() {
    4aa0:	push	{r4, lr}
    4aa2:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4aa4:	beq.n	4adc <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4aa6:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    4aa8:	movs	r1, #0
    4aaa:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4aac:	movs	r1, #5
    4aae:	ldrb	r2, [r0, #16]
    4ab0:	add	r3, r2
    4ab2:	ldrb	r0, [r3, #16]
    4ab4:	bl	b938 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4ab8:	ldrb	r2, [r4, #17]
    4aba:	ldr	r3, [r4, #4]
    4abc:	movs	r1, #5
    4abe:	add	r3, r2
    4ac0:	ldrb.w	r0, [r3, #36]	; 0x24
    4ac4:	bl	b938 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4ac8:	ldr	r3, [r4, #4]
    4aca:	ldrb	r2, [r4, #18]
    4acc:	movs	r1, #5
    4ace:	add	r3, r2
	}
}
    4ad0:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4ad4:	ldrb.w	r0, [r3, #56]	; 0x38
    4ad8:	b.w	b938 <pinMode>
}
    4adc:	pop	{r4, pc}

00004ade <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    4ade:	ldrb.w	r2, [r0, #163]	; 0xa3
    4ae2:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4ae6:	subs	r0, r2, r0
    4ae8:	bx	lr

00004aea <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4aea:	ldrb.w	r3, [r0, #162]	; 0xa2
    4aee:	ldrb.w	r2, [r0, #163]	; 0xa3
    4af2:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    4af4:	itttt	hi
    4af6:	addhi	r2, r3, #1
    4af8:	strbhi.w	r2, [r0, #162]	; 0xa2
    4afc:	addhi	r0, r0, r3
    4afe:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    4b00:	it	ls
    4b02:	movls.w	r0, #4294967295
	}
    4b06:	bx	lr

00004b08 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4b08:	ldrb.w	r3, [r0, #162]	; 0xa2
    4b0c:	ldrb.w	r2, [r0, #163]	; 0xa3
    4b10:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    4b12:	itte	hi
    4b14:	addhi	r0, r0, r3
    4b16:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    4b18:	movls.w	r0, #4294967295
	}
    4b1c:	bx	lr

00004b1e <TwoWire::flush()>:
	virtual void flush(void) {
	}
    4b1e:	bx	lr

00004b20 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    4b20:	ldrh.w	r3, [r0, #304]	; 0x130
    4b24:	cbz	r3, 4b32 <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    4b26:	ldrb.w	r3, [r0, #303]	; 0x12f
    4b2a:	cmp	r3, #136	; 0x88
    4b2c:	bls.n	4b36 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    4b2e:	movs	r3, #1
    4b30:	str	r3, [r0, #4]
			return 0;
    4b32:	movs	r0, #0
    4b34:	bx	lr
		txBuffer[txBufferLength++] = data;
    4b36:	adds	r2, r3, #1
    4b38:	strb.w	r2, [r0, #303]	; 0x12f
    4b3c:	add	r0, r3
    4b3e:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    4b42:	movs	r0, #1
    4b44:	bx	lr

00004b46 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    4b46:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    4b48:	ldrh.w	r3, [r0, #304]	; 0x130
{
    4b4c:	mov	r5, r0
    4b4e:	mov	r4, r2
	if (transmitting || slave_mode) {
    4b50:	cbz	r3, 4b7e <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    4b52:	ldrb.w	r3, [r0, #303]	; 0x12f
    4b56:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    4b5a:	cmp	r4, r2
    4b5c:	ittt	hi
    4b5e:	movhi	r0, #1
    4b60:	movhi	r4, r2
    4b62:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    4b64:	add.w	r0, r5, #165	; 0xa5
    4b68:	mov	r2, r4
    4b6a:	add	r0, r3
    4b6c:	bl	9c60 <memcpy>
		txBufferLength += quantity;
    4b70:	ldrb.w	r3, [r5, #303]	; 0x12f
    4b74:	add	r3, r4
    4b76:	strb.w	r3, [r5, #303]	; 0x12f
}
    4b7a:	mov	r0, r4
    4b7c:	pop	{r3, r4, r5, pc}
	return 0;
    4b7e:	mov	r4, r3
    4b80:	b.n	4b7a <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

00004b84 <TwoWire::force_clock()>:
{
    4b84:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4b88:	ldr	r1, [r0, #20]
{
    4b8a:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4b8c:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4b8e:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4b92:	ldr	r4, [pc, #244]	; (4c88 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4b94:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4b98:	ldr.w	r8, [pc, #244]	; 4c90 <TwoWire::force_clock()+0x10c>
    4b9c:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4b9e:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4ba0:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4ba2:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4ba6:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    4baa:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4bac:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4bb0:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4bb4:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    4bb8:	lsls	r7, r3, #4
    4bba:	add.w	r3, r4, r3, lsl #4
    4bbe:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4bc0:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    4bc4:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4bc8:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4bca:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    4bcc:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4bd0:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    4bd2:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    4bd4:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4bd6:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    4bda:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    4bde:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    4be0:	ldr	r4, [pc, #168]	; (4c8c <TwoWire::force_clock()+0x108>)
    4be2:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4be4:	ldr.w	lr, [pc, #172]	; 4c94 <TwoWire::force_clock()+0x110>
    4be8:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    4bea:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4bec:	ldr.w	r3, [lr]
    4bf0:	udiv	r3, r3, r8
    4bf4:	mov.w	r8, #10
    4bf8:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4bfc:	ldr.w	r8, [r4, #4]
    4c00:	sub.w	r8, r8, r7
    4c04:	cmp	r3, r8
    4c06:	bhi.n	4bfc <TwoWire::force_clock()+0x78>
    4c08:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    4c0a:	ldr	r7, [pc, #128]	; (4c8c <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4c0c:	ldr.w	sl, [pc, #128]	; 4c90 <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    4c10:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4c12:	tst.w	r4, ip
    4c16:	beq.n	4c1e <TwoWire::force_clock()+0x9a>
    4c18:	ldr	r4, [r0, #8]
    4c1a:	tst	r4, r5
    4c1c:	bne.n	4c82 <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    4c1e:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4c22:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4c26:	ldr.w	r4, [lr]
    4c2a:	udiv	r4, r4, sl
    4c2e:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4c32:	ldr.w	r8, [r7, #4]
    4c36:	sub.w	r8, r8, fp
    4c3a:	cmp	r4, r8
    4c3c:	bhi.n	4c32 <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    4c3e:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4c42:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4c46:	ldr.w	r4, [lr]
    4c4a:	udiv	r4, r4, sl
    4c4e:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4c52:	ldr.w	r8, [r7, #4]
    4c56:	sub.w	r8, r8, fp
    4c5a:	cmp	r4, r8
    4c5c:	bhi.n	4c52 <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    4c5e:	subs	r3, #1
    4c60:	bne.n	4c10 <TwoWire::force_clock()+0x8c>
	bool ret = false;
    4c62:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4c64:	ldrb	r3, [r2, #24]
    4c66:	add.w	r3, r1, r3, lsl #4
    4c6a:	ldr	r3, [r3, #12]
    4c6c:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    4c70:	ldrb	r3, [r2, #25]
    4c72:	ldr	r2, [sp, #4]
    4c74:	add.w	r1, r1, r3, lsl #4
    4c78:	ldr	r3, [r1, #44]	; 0x2c
    4c7a:	str	r3, [r2, #0]
}
    4c7c:	add	sp, #12
    4c7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    4c82:	movs	r0, #1
    4c84:	b.n	4c64 <TwoWire::force_clock()+0xe0>
    4c86:	nop
    4c88:	.word	0x2000743c
    4c8c:	.word	0xe0001000
    4c90:	.word	0x000f4240
    4c94:	.word	0x200089a0

00004c98 <TwoWire::wait_idle()>:
	return systick_millis_count;
    4c98:	ldr	r2, [pc, #44]	; (4cc8 <TwoWire::wait_idle()+0x30>)
{
    4c9a:	push	{r4, lr}
    4c9c:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4c9e:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    4ca0:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    4ca2:	tst.w	r3, #33554432	; 0x2000000
    4ca6:	bne.n	4cb2 <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    4ca8:	mov.w	r3, #32512	; 0x7f00
	return true;
    4cac:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    4cae:	str	r3, [r4, #20]
}
    4cb0:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    4cb2:	lsls	r3, r3, #7
    4cb4:	bmi.n	4ca8 <TwoWire::wait_idle()+0x10>
    4cb6:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    4cb8:	subs	r3, r3, r1
		if (timeout > 16) {
    4cba:	cmp	r3, #16
    4cbc:	bls.n	4ca0 <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    4cbe:	bl	4b84 <TwoWire::force_clock()>
    4cc2:	cmp	r0, #0
    4cc4:	bne.n	4ca8 <TwoWire::wait_idle()+0x10>
    4cc6:	b.n	4cb0 <TwoWire::wait_idle()+0x18>
    4cc8:	.word	0x20027f40

00004ccc <TwoWire::endTransmission(unsigned char)>:
{
    4ccc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    4cd0:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    4cd4:	mov	r7, r0
    4cd6:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4cd8:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    4cda:	cmp.w	r8, #0
    4cde:	beq.n	4d3e <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    4ce0:	bl	4c98 <TwoWire::wait_idle()>
    4ce4:	cbz	r0, 4d3e <TwoWire::endTransmission(unsigned char)+0x72>
    4ce6:	ldr.w	r9, [pc, #196]	; 4dac <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    4cea:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4cec:	mov.w	fp, #512	; 0x200
    4cf0:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    4cf4:	cmp	r6, r8
    4cf6:	bhi.n	4d30 <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4cf8:	ldr	r3, [r4, #92]	; 0x5c
    4cfa:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    4cfe:	cmp	r3, #3
    4d00:	bhi.n	4d30 <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    4d02:	cbnz	r6, 4d16 <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    4d04:	ldrb.w	r2, [r7, #165]	; 0xa5
    4d08:	orr.w	r2, r2, #1024	; 0x400
    4d0c:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    4d0e:	movs	r2, #1
				fifo_used++;
    4d10:	adds	r3, #1
    4d12:	mov	r6, r2
    4d14:	b.n	4cfe <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    4d16:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4d18:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    4d1c:	bcs.n	4d28 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4d1e:	add	r6, r7
    4d20:	ldrb.w	r1, [r6, #165]	; 0xa5
    4d24:	str	r1, [r4, #96]	; 0x60
    4d26:	b.n	4d10 <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4d28:	cbz	r5, 4d2e <TwoWire::endTransmission(unsigned char)+0x62>
    4d2a:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4d2e:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    4d30:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    4d32:	lsls	r2, r3, #20
    4d34:	bpl.n	4d42 <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4d36:	ldr	r3, [r4, #16]
    4d38:	orr.w	r3, r3, #768	; 0x300
    4d3c:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    4d3e:	movs	r5, #4
    4d40:	b.n	4d50 <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    4d42:	lsls	r0, r3, #19
    4d44:	bpl.n	4d56 <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4d46:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    4d48:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4d4a:	orr.w	r3, r3, #768	; 0x300
    4d4e:	str	r3, [r4, #16]
}
    4d50:	mov	r0, r5
    4d52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    4d56:	lsls	r1, r3, #21
    4d58:	bpl.n	4d6c <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4d5a:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    4d5c:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4d5e:	orr.w	r3, r3, #768	; 0x300
    4d62:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    4d64:	mov.w	r3, #512	; 0x200
    4d68:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    4d6a:	b.n	4d50 <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    4d6c:	lsls	r2, r3, #18
    4d6e:	bmi.n	4d7c <TwoWire::endTransmission(unsigned char)+0xb0>
    4d70:	ldr.w	r2, [r9]
    4d74:	sub.w	r2, r2, sl
    4d78:	cmp	r2, #50	; 0x32
    4d7a:	bls.n	4d8c <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4d7c:	ldr	r3, [r4, #16]
    4d7e:	orr.w	r3, r3, #768	; 0x300
    4d82:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4d84:	mov.w	r3, #512	; 0x200
    4d88:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    4d8a:	b.n	4d3e <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    4d8c:	cmp	r6, r8
    4d8e:	bls.n	4da0 <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4d90:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4d92:	ands.w	r2, r2, #7
    4d96:	bne.n	4da0 <TwoWire::endTransmission(unsigned char)+0xd4>
    4d98:	lsls	r3, r3, #22
    4d9a:	bmi.n	4da6 <TwoWire::endTransmission(unsigned char)+0xda>
    4d9c:	cmp	r5, #0
    4d9e:	beq.n	4d50 <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    4da0:	bl	be24 <yield>
	}
    4da4:	b.n	4cf4 <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    4da6:	mov	r5, r2
    4da8:	b.n	4d50 <TwoWire::endTransmission(unsigned char)+0x84>
    4daa:	nop
    4dac:	.word	0x20027f40

00004db0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4db0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4db4:	mov	r7, r0
    4db6:	mov	r6, r1
    4db8:	mov	r9, r2
    4dba:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4dbc:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    4dbe:	bl	4c98 <TwoWire::wait_idle()>
    4dc2:	cmp	r0, #0
    4dc4:	beq.n	4ebc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    4dc6:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    4dc8:	cmp.w	r9, #1
    4dcc:	ldr.w	sl, [pc, #240]	; 4ec0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    4dd0:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4dd4:	uxtb	r6, r6
    4dd6:	it	cc
    4dd8:	movcc.w	r9, #1
    4ddc:	ldr.w	fp, [sl]
    4de0:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    4de4:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4de8:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    4dec:	cmp	r4, #2
    4dee:	bhi.n	4e0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    4df0:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4df2:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4df6:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    4dfa:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4dfe:	orr.w	r2, r2, #256	; 0x100
    4e02:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    4e04:	subs	r0, r3, r4
    4e06:	cmp	r0, #3
    4e08:	bhi.n	4e0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    4e0a:	cmp	r4, #3
    4e0c:	bne.n	4e3c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    4e0e:	ldrb.w	r3, [r7, #163]	; 0xa3
    4e12:	cmp	r3, #135	; 0x87
    4e14:	bls.n	4e56 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    4e16:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    4e18:	lsls	r1, r3, #20
    4e1a:	bpl.n	4e78 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e1c:	ldr	r3, [r5, #16]
    4e1e:	orr.w	r3, r3, #768	; 0x300
    4e22:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4e24:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    4e26:	tst.w	r3, #458752	; 0x70000
    4e2a:	beq.n	4e34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    4e2c:	ldr	r3, [r5, #16]
    4e2e:	orr.w	r3, r3, #512	; 0x200
    4e32:	str	r3, [r5, #16]
	return rxBufferLength;
    4e34:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    4e38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    4e3c:	cbnz	r4, 4e44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4e3e:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    4e40:	adds	r4, #1
				tx_fifo--;
    4e42:	b.n	4e04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    4e44:	cmp	r4, #1
    4e46:	bne.n	4e4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4e48:	str	r2, [r5, #96]	; 0x60
    4e4a:	b.n	4e40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4e4c:	cmp.w	r8, #0
    4e50:	beq.n	4e40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    4e52:	str	r1, [r5, #96]	; 0x60
    4e54:	b.n	4e40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4e56:	ldr	r2, [r5, #92]	; 0x5c
    4e58:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4e5c:	cmp	r2, #0
    4e5e:	beq.n	4e16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    4e60:	ldrb.w	r3, [r7, #163]	; 0xa3
    4e64:	cmp	r3, #135	; 0x87
    4e66:	bhi.n	4e16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    4e68:	ldr	r1, [r5, #112]	; 0x70
    4e6a:	adds	r0, r3, #1
    4e6c:	add	r3, r7
				rx_fifo--;
    4e6e:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    4e70:	strb.w	r0, [r7, #163]	; 0xa3
    4e74:	strb	r1, [r3, #26]
				rx_fifo--;
    4e76:	b.n	4e5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4e78:	tst.w	r3, #9216	; 0x2400
    4e7c:	bne.n	4e8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    4e7e:	ldr.w	r2, [sl]
    4e82:	sub.w	r2, r2, fp
    4e86:	cmp	r2, #50	; 0x32
    4e88:	bls.n	4e9a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e8a:	ldr	r3, [r5, #16]
    4e8c:	orr.w	r3, r3, #768	; 0x300
    4e90:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4e92:	mov.w	r3, #512	; 0x200
    4e96:	str	r3, [r5, #96]	; 0x60
			break;
    4e98:	b.n	4e24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    4e9a:	ldrb.w	r2, [r7, #163]	; 0xa3
    4e9e:	cmp	r2, r9
    4ea0:	bcc.n	4eb6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    4ea2:	cmp	r4, #2
    4ea4:	bls.n	4eb6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4ea6:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4ea8:	lsls	r2, r2, #29
    4eaa:	bne.n	4eb6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    4eac:	lsls	r3, r3, #22
    4eae:	bmi.n	4e24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    4eb0:	cmp.w	r8, #0
    4eb4:	beq.n	4e24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    4eb6:	bl	be24 <yield>
	}
    4eba:	b.n	4dec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    4ebc:	movs	r0, #4
    4ebe:	b.n	4e38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    4ec0:	.word	0x20027f40

00004ec4 <TwoWire::isr()>:
{
    4ec4:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4ec6:	ldr	r6, [r0, #16]
{
    4ec8:	mov	r4, r0
	uint32_t status = port->SSR;
    4eca:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    4ece:	ands.w	r3, r5, #3840	; 0xf00
    4ed2:	beq.n	4ed8 <TwoWire::isr()+0x14>
    4ed4:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    4ed8:	lsls	r0, r5, #30
    4eda:	bpl.n	4efc <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    4edc:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    4ee0:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    4ee2:	itt	mi
    4ee4:	movmi	r3, #0
    4ee6:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    4eea:	ldrb.w	r3, [r4, #163]	; 0xa3
    4eee:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    4ef0:	itttt	ls
    4ef2:	addls	r1, r3, #1
    4ef4:	addls	r3, r3, r4
    4ef6:	strbls.w	r1, [r4, #163]	; 0xa3
    4efa:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    4efc:	lsls	r2, r5, #31
    4efe:	bpl.n	4f3a <TwoWire::isr()+0x76>
		if (!transmitting) {
    4f00:	ldrb.w	r3, [r4, #304]	; 0x130
    4f04:	cbnz	r3, 4f1a <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    4f06:	ldr.w	r3, [r4, #312]	; 0x138
    4f0a:	cbz	r3, 4f0e <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    4f0c:	blx	r3
			txBufferIndex = 0;
    4f0e:	movs	r3, #0
    4f10:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    4f14:	movs	r3, #1
    4f16:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    4f1a:	ldrb.w	r3, [r4, #302]	; 0x12e
    4f1e:	ldrb.w	r2, [r4, #303]	; 0x12f
    4f22:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    4f24:	ittet	hi
    4f26:	addhi	r2, r3, #1
    4f28:	addhi	r3, r3, r4
			port->STDR = 0;
    4f2a:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    4f2c:	strbhi.w	r2, [r4, #302]	; 0x12e
    4f30:	it	hi
    4f32:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    4f36:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    4f3a:	lsls	r3, r5, #22
    4f3c:	bpl.n	4f5a <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    4f3e:	ldrb.w	r0, [r4, #163]	; 0xa3
    4f42:	cbz	r0, 4f4c <TwoWire::isr()+0x88>
    4f44:	ldr.w	r3, [r4, #316]	; 0x13c
    4f48:	cbz	r3, 4f4c <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    4f4a:	blx	r3
		rxBufferIndex = 0;
    4f4c:	movs	r3, #0
    4f4e:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    4f52:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    4f56:	strb.w	r3, [r4, #304]	; 0x130
}
    4f5a:	pop	{r4, r5, r6, pc}

00004f5c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    4f5c:	ldr	r0, [pc, #4]	; (4f64 <lpi2c1_isr()+0x8>)
    4f5e:	b.w	4ec4 <TwoWire::isr()>
    4f62:	nop
    4f64:	.word	0x200089b4

00004f68 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    4f68:	ldr	r0, [pc, #4]	; (4f70 <lpi2c3_isr()+0x8>)
    4f6a:	b.w	4ec4 <TwoWire::isr()>
    4f6e:	nop
    4f70:	.word	0x20008af4

00004f74 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    4f74:	ldr	r0, [pc, #4]	; (4f7c <lpi2c4_isr()+0x8>)
    4f76:	b.w	4ec4 <TwoWire::isr()>
    4f7a:	nop
    4f7c:	.word	0x20008c34

00004f80 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4f80:	ldr	r3, [r0, #16]
	port->MCR = 0;
    4f82:	movs	r2, #0
	if (frequency < 400000) {
    4f84:	ldr	r0, [pc, #76]	; (4fd4 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    4f86:	str	r2, [r3, #16]
	if (frequency < 400000) {
    4f88:	cmp	r1, r0
    4f8a:	bhi.n	4fb2 <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4f8c:	ldr	r2, [pc, #72]	; (4fd8 <TwoWire::setClock(unsigned long)+0x58>)
    4f8e:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    4f90:	movs	r2, #1
    4f92:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    4f94:	ldr	r2, [pc, #68]	; (4fdc <TwoWire::setClock(unsigned long)+0x5c>)
    4f96:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4f98:	mov.w	r2, #180224	; 0x2c000
    4f9c:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    4f9e:	ldr	r2, [r3, #72]	; 0x48
    4fa0:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4fa2:	movs	r2, #0
    4fa4:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    4fa6:	mov.w	r2, #65537	; 0x10001
    4faa:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    4fac:	movs	r2, #1
    4fae:	str	r2, [r3, #16]
}
    4fb0:	bx	lr
	} else if (frequency < 1000000) {
    4fb2:	ldr	r0, [pc, #44]	; (4fe0 <TwoWire::setClock(unsigned long)+0x60>)
    4fb4:	cmp	r1, r0
    4fb6:	ldr	r1, [pc, #44]	; (4fe4 <TwoWire::setClock(unsigned long)+0x64>)
    4fb8:	bhi.n	4fc8 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    4fba:	ldr	r0, [pc, #44]	; (4fe8 <TwoWire::setClock(unsigned long)+0x68>)
    4fbc:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4fbe:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    4fc0:	ldr	r2, [pc, #40]	; (4fec <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    4fc2:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4fc4:	str	r1, [r3, #44]	; 0x2c
    4fc6:	b.n	4f9e <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    4fc8:	ldr	r0, [pc, #36]	; (4ff0 <TwoWire::setClock(unsigned long)+0x70>)
    4fca:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4fcc:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    4fce:	ldr	r2, [pc, #36]	; (4ff4 <TwoWire::setClock(unsigned long)+0x74>)
    4fd0:	b.n	4fc2 <TwoWire::setClock(unsigned long)+0x42>
    4fd2:	nop
    4fd4:	.word	0x00061a7f
    4fd8:	.word	0x1928373b
    4fdc:	.word	0x05050bb8
    4fe0:	.word	0x000f423f
    4fe4:	.word	0x00057f00
    4fe8:	.word	0x0c121a1c
    4fec:	.word	0x02020e10
    4ff0:	.word	0x0407090a
    4ff4:	.word	0x01010960

00004ff8 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    4ff8:	mov	r3, r0
    size_t n = end - str;
    4ffa:	subs	r0, r2, r1
    if (cp < 0X80) {
    4ffc:	cmp	r3, #127	; 0x7f
    4ffe:	bhi.n	500c <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5000:	cmp	r0, #0
    5002:	beq.n	5088 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5004:	mov	r0, r1
    5006:	strb.w	r3, [r0], #1
    500a:	bx	lr
    } else if (cp < 0X800) {
    500c:	cmp.w	r3, #2048	; 0x800
    5010:	bcs.n	502e <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5012:	cmp	r0, #1
    5014:	bls.n	5086 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5016:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5018:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    501c:	mov	r0, r1
    501e:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5022:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5026:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    502a:	strb	r3, [r1, #1]
    502c:	bx	lr
    } else if (cp < 0X10000) {
    502e:	cmp.w	r3, #65536	; 0x10000
    5032:	bcs.n	5058 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5034:	cmp	r0, #2
    5036:	bls.n	5086 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5038:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    503a:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    503c:	orn	r2, r2, #31
    5040:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5042:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5046:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    504a:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    504e:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5052:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5054:	strb	r3, [r1, #2]
    5056:	bx	lr
       if (n < 4) goto fail;
    5058:	cmp	r0, #3
    505a:	bls.n	5086 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    505c:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    505e:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5060:	orn	r2, r2, #15
    5064:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    5066:	ubfx	r2, r3, #12, #6
    506a:	orn	r2, r2, #127	; 0x7f
    506e:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5070:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5074:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5078:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    507c:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5080:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5082:	strb	r3, [r1, #3]
    5084:	bx	lr
    return nullptr;
    5086:	movs	r0, #0
  }
    5088:	bx	lr
	...

0000508c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    508c:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    508e:	push	{r4, r5, lr}
    5090:	mov	r5, r0
    if (str >= end) {
    5092:	bcs.n	510a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5094:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    5096:	ldrsb.w	r0, [r0]
    509a:	cmp	r0, #0
    509c:	blt.n	50a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    509e:	adds	r0, r5, #1
      *rtn = ch;
    50a0:	str	r3, [r2, #0]
  }
    50a2:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    50a4:	and.w	r0, r3, #224	; 0xe0
    50a8:	cmp	r0, #192	; 0xc0
    50aa:	bne.n	50ea <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    50ac:	and.w	r3, r3, #31
      n = 2;
    50b0:	movs	r4, #2
    if ((str + n) > end) {
    50b2:	adds	r0, r5, r4
    50b4:	cmp	r0, r1
    50b6:	bhi.n	510a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    50b8:	adds	r5, #1
      ch = str[i];
    50ba:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    50be:	and.w	r4, r1, #192	; 0xc0
    50c2:	cmp	r4, #128	; 0x80
    50c4:	bne.n	510a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    50c6:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    50ca:	cmp	r5, r0
      cp |= ch & 0X3F;
    50cc:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    50d0:	bne.n	50ba <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    50d2:	sub.w	r4, r3, #128	; 0x80
    50d6:	ldr	r1, [pc, #56]	; (5110 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    50d8:	cmp	r4, r1
    50da:	bhi.n	510a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    50dc:	sub.w	r1, r3, #55296	; 0xd800
    50e0:	cmp.w	r1, #2048	; 0x800
    50e4:	bcc.n	510a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    50e6:	str	r3, [r2, #0]
    return str + n;
    50e8:	b.n	50a2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    50ea:	and.w	r0, r3, #240	; 0xf0
    50ee:	cmp	r0, #224	; 0xe0
    50f0:	bne.n	50fa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    50f2:	and.w	r3, r3, #15
      n = 3;
    50f6:	movs	r4, #3
    50f8:	b.n	50b2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    50fa:	and.w	r0, r3, #248	; 0xf8
    50fe:	cmp	r0, #240	; 0xf0
    5100:	bne.n	510a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5102:	and.w	r3, r3, #7
      n = 4;
    5106:	movs	r4, #4
    5108:	b.n	50b2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    510a:	movs	r0, #0
    510c:	b.n	50a2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    510e:	nop
    5110:	.word	0x0010ff7f

00005114 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5114:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5116:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    5118:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    511a:	lsls	r2, r3, #31
    511c:	bpl.n	515e <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    511e:	ldr	r0, [r0, #4]
    5120:	add.w	r2, r4, #16
    5124:	ldr	r1, [r4, #12]
    5126:	ldr	r3, [r0, #0]
    5128:	str	r2, [sp, #4]
    512a:	ldr	r3, [r3, #36]	; 0x24
    512c:	blx	r3
    512e:	ldr	r2, [sp, #4]
    5130:	mov	r5, r0
    5132:	cbnz	r0, 513c <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5134:	movs	r5, #0
}
    5136:	mov	r0, r5
    5138:	add	sp, #8
    513a:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    513c:	ldrb	r3, [r4, #0]
    513e:	lsls	r3, r3, #30
    5140:	bmi.n	514c <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    5142:	ldrb	r3, [r4, #0]
    5144:	bic.w	r3, r3, #1
    5148:	strb	r3, [r4, #0]
    514a:	b.n	5136 <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    514c:	adds	r0, r4, #4
    514e:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    5150:	ldr	r3, [r0, #0]
    5152:	add	r1, r6
    5154:	ldr	r3, [r3, #36]	; 0x24
    5156:	blx	r3
    5158:	cmp	r0, #0
    515a:	bne.n	5142 <FsCache::sync()+0x2e>
    515c:	b.n	5134 <FsCache::sync()+0x20>
  return true;
    515e:	movs	r5, #1
    5160:	b.n	5136 <FsCache::sync()+0x22>

00005162 <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    5162:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5164:	push	{r4, r5, r6, lr}
    5166:	mov	r4, r0
    5168:	mov	r6, r1
    516a:	mov	r5, r2
  if (!m_blockDev) {
    516c:	cbnz	r3, 5172 <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    516e:	movs	r0, #0
}
    5170:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    5172:	ldr	r3, [r0, #12]
    5174:	cmp	r3, r1
    5176:	beq.n	518a <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    5178:	bl	5114 <FsCache::sync()>
    517c:	cmp	r0, #0
    517e:	beq.n	516e <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    5180:	lsls	r3, r5, #29
    5182:	bpl.n	519a <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5184:	movs	r3, #0
    m_sector = sector;
    5186:	str	r6, [r4, #12]
    m_status = 0;
    5188:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    518a:	ldrb	r3, [r4, #0]
    518c:	and.w	r5, r5, #3
    5190:	mov	r0, r4
    5192:	orrs	r3, r5
    5194:	strb.w	r3, [r0], #16
  return m_buffer;
    5198:	b.n	5170 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    519a:	ldr	r0, [r4, #4]
    519c:	add.w	r2, r4, #16
    51a0:	mov	r1, r6
    51a2:	ldr	r3, [r0, #0]
    51a4:	ldr	r3, [r3, #16]
    51a6:	blx	r3
    51a8:	cmp	r0, #0
    51aa:	bne.n	5184 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    51ac:	b.n	516e <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

000051b0 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    51b0:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    51b2:	push	{r4, r5, lr}
  if (chr < 127) {
    51b4:	bhi.n	5206 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    51b6:	sub.w	r3, r0, #97	; 0x61
    51ba:	cmp	r3, #25
    51bc:	ite	hi
    51be:	movhi	r3, #0
    51c0:	movls	r3, #1
    51c2:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    51c6:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    51c8:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    51ca:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    51ce:	ldrh.w	r5, [r1, r2, lsl #2]
    51d2:	cmp	r5, r0
    mid = left + (right - left)/2;
    51d4:	ite	hi
    51d6:	movhi	r4, r2
    51d8:	movls	r3, r2
  while (right - left > 1) {
    51da:	subs	r2, r4, r3
    51dc:	cmp	r2, #1
    51de:	bhi.n	51ca <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    51e0:	uxth	r2, r3
    51e2:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    51e6:	cmp	r0, r3
    51e8:	bcc.n	5246 <toUpcase(unsigned short)+0x96>
    51ea:	add.w	r1, r1, r2, lsl #2
    51ee:	subs	r3, r0, r3
    51f0:	ldrb	r2, [r1, #3]
    51f2:	cmp	r3, r2
    51f4:	bge.n	5246 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    51f6:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    51fa:	cmp	r2, #1
    51fc:	bne.n	520e <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    51fe:	and.w	r3, r3, #1
    5202:	subs	r3, r0, r3
    5204:	b.n	51c6 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    5206:	movs	r4, #53	; 0x35
  size_t left = 0;
    5208:	movs	r3, #0
    520a:	ldr	r1, [pc, #68]	; (5250 <toUpcase(unsigned short)+0xa0>)
    520c:	b.n	51da <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    520e:	cbz	r2, 5218 <toUpcase(unsigned short)+0x68>
    5210:	uxth	r2, r2
    5212:	add	r2, r0
    5214:	uxth	r0, r2
    5216:	b.n	51c8 <toUpcase(unsigned short)+0x18>
    5218:	movw	r2, #58272	; 0xe3a0
    521c:	b.n	5212 <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    521e:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5222:	ldrh.w	r5, [r1, r2, lsl #2]
    5226:	cmp	r5, r0
    mid = left + (right - left)/2;
    5228:	ite	hi
    522a:	movhi	r4, r2
    522c:	movls	r3, r2
  while (right - left > 1) {
    522e:	subs	r2, r4, r3
    5230:	cmp	r2, #1
    5232:	bhi.n	521e <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5234:	uxth	r3, r3
    5236:	ldrh.w	r2, [r1, r3, lsl #2]
    523a:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    523c:	itt	eq
    523e:	addeq.w	r1, r1, r3, lsl #2
    5242:	ldrheq	r0, [r1, #2]
    5244:	b.n	51c8 <toUpcase(unsigned short)+0x18>
    5246:	movs	r4, #75	; 0x4b
    5248:	movs	r3, #0
    524a:	ldr	r1, [pc, #8]	; (5254 <toUpcase(unsigned short)+0xa4>)
    524c:	b.n	522e <toUpcase(unsigned short)+0x7e>
    524e:	nop
    5250:	.word	0x20007a20
    5254:	.word	0x200078bc

00005258 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5258:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    525a:	push	{r0, r1, r4, lr}
    525c:	mov	r4, r0
  if (ls) {
    525e:	cbz	r3, 526a <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    5260:	movs	r2, #0
    5262:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5264:	mov	r0, r3
    5266:	add	sp, #8
    5268:	pop	{r4, pc}
  } else if (next >= end) {
    526a:	ldrd	r0, r1, [r0, #4]
    526e:	cmp	r0, r1
    5270:	bcs.n	5264 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    5272:	add	r2, sp, #4
    5274:	bl	508c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    5278:	cbnz	r0, 5280 <FsName::get16()+0x28>
  return 0XFFFF;
    527a:	movw	r3, #65535	; 0xffff
    527e:	b.n	5264 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    5280:	ldr	r2, [sp, #4]
    next = ptr;
    5282:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5284:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    5288:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    528a:	bcc.n	5264 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    528c:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5290:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    5292:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5296:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    529a:	strh	r3, [r4, #12]
    529c:	uxth	r3, r2
    529e:	b.n	5264 <FsName::get16()+0xc>

000052a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    52a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52a4:	mov	r6, r2
    52a6:	mov	r5, r1
    52a8:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    52ac:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    52ae:	ldrh.w	r4, [r5, #2]!
    52b2:	cbnz	r3, 52c6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    52b4:	ldrd	r2, r3, [r6, #4]
    52b8:	cmp	r2, r3
    52ba:	bne.n	52c6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    52bc:	clz	r0, r4
    52c0:	lsrs	r0, r0, #5
}
    52c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    52c6:	mov	r0, r6
    52c8:	bl	5258 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    52cc:	bl	51b0 <toUpcase(unsigned short)>
    52d0:	mov	r7, r0
    52d2:	mov	r0, r4
    52d4:	bl	51b0 <toUpcase(unsigned short)>
    52d8:	cmp	r7, r0
    52da:	bne.n	52e4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    52dc:	cmp	r5, r8
    52de:	bne.n	52ac <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    52e0:	movs	r0, #1
    52e2:	b.n	52c2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    52e4:	movs	r0, #0
    52e6:	b.n	52c2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

000052e8 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    52e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    52ec:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    52f0:	mov	sl, r0
    52f2:	mov	r8, r1
  if (!isOpen()) {
    52f4:	cmp	r3, #0
    52f6:	beq.n	538a <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    52f8:	subs	r2, #1
  char* str = name;
    52fa:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    52fc:	mov.w	r9, #2
  uint16_t hs = 0;
    5300:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5302:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5304:	ldrb.w	r3, [sl, #48]	; 0x30
    5308:	cmp	r3, r9
    530a:	bcc.n	5374 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    530c:	movs	r2, #0
    530e:	mov	r1, r9
    5310:	mov	r0, sl
    5312:	bl	53fa <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5316:	cbz	r0, 538a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5318:	ldrb	r3, [r0, #0]
    531a:	cmp	r3, #193	; 0xc1
    531c:	bne.n	538a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    531e:	mov	r6, r0
    5320:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5324:	ldr	r3, [pc, #108]	; (5394 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5326:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    532a:	cbz	r5, 5364 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    532c:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5330:	uxth	r2, r2
    5332:	cmp.w	r2, #1024	; 0x400
    5336:	bcs.n	538a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5338:	and.w	r5, r3, r5, lsl #10
    533c:	ubfx	r0, r0, #0, #10
    5340:	orrs	r0, r5
    5342:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5346:	mov	r1, r4
    5348:	mov	r2, r7
    534a:	bl	4ff8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    534e:	mov	r4, r0
    5350:	cbz	r0, 538a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5352:	movs	r5, #0
    5354:	ldr	r3, [pc, #60]	; (5394 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5356:	cmp	fp, r6
    5358:	bne.n	5326 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    535a:	add.w	r9, r9, #1
    535e:	uxtb.w	r9, r9
    5362:	b.n	5304 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5364:	add.w	r2, r0, #10240	; 0x2800
    5368:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    536a:	cmp.w	r2, #2048	; 0x800
    536e:	bcc.n	5380 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    5370:	cmp	r0, #0
    5372:	bne.n	5346 <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5374:	movs	r3, #0
  return str - name;
    5376:	sub.w	r0, r4, r8
  *str = '\0';
    537a:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    537c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    5380:	cmp.w	r2, #1024	; 0x400
    5384:	bcs.n	538a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5386:	mov	r5, r0
    5388:	b.n	5356 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    538a:	movs	r0, #0
    538c:	strb.w	r0, [r8]
  return 0;
    5390:	b.n	537c <ExFatFile::getName8(char*, unsigned int)+0x94>
    5392:	nop
    5394:	.word	0x000ffc00

00005398 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5398:	movs	r0, #0
    next = begin;
    539a:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    539c:	push	{r4, r5, r6, lr}
    539e:	mov	r4, r1
  uint16_t hash = 0;
    53a0:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    53a2:	movw	r5, #65535	; 0xffff
    53a6:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    53a8:	strh	r0, [r1, #12]
    return !ls && next == end;
    53aa:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    53ac:	str	r0, [r4, #16]
    53ae:	cbnz	r3, 53ec <ExFatFile::hashName(ExName_t*)+0x54>
    53b0:	ldrd	r2, r3, [r4, #4]
    53b4:	cmp	r2, r3
    53b6:	bne.n	53ec <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    53b8:	subs	r0, #1
  fname->nameHash = hash;
    53ba:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    53bc:	cmp	r0, #254	; 0xfe
    53be:	ite	hi
    53c0:	movhi	r0, #0
    53c2:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    53c4:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    53c6:	bl	51b0 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    53ca:	lsls	r3, r6, #15
    53cc:	orr.w	r3, r3, r6, lsr #1
    53d0:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    53d4:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    53d6:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    53d8:	ubfx	r3, r3, #1, #15
    53dc:	orr.w	r3, r3, r2, lsl #15
    53e0:	uxtah	r3, r0, r3
    fname->nameLength++;
    53e4:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    53e6:	uxth	r6, r3
    fname->nameLength++;
    53e8:	adds	r0, #1
    53ea:	b.n	53aa <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    53ec:	mov	r0, r4
    53ee:	bl	5258 <FsName::get16()>
    if (u == 0XFFFF) {
    53f2:	cmp	r0, r5
    53f4:	bne.n	53c6 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    53f6:	movs	r0, #0
    53f8:	b.n	53c4 <ExFatFile::hashName(ExName_t*)+0x2c>

000053fa <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    53fa:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    53fc:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5400:	sub	sp, #20
    5402:	mov	r4, r0
    5404:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    5406:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5408:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    540a:	ldmia.w	r3, {r0, r1, r2}
    540e:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5412:	lsls	r2, r7, #5
    5414:	mov	r1, r5
    5416:	ldr	r0, [r4, #32]
    5418:	bl	5dae <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    541c:	cmp	r0, #1
    541e:	bne.n	542e <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5420:	mov	r2, r6
    5422:	mov	r1, r5
    5424:	ldr	r0, [r4, #32]
    5426:	bl	5d14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    542a:	add	sp, #20
    542c:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    542e:	movs	r0, #0
    5430:	b.n	542a <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005432 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5432:	push	{r4, lr}
    5434:	mov	r4, r0
  bool rtn = sync();
    5436:	bl	62d0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    543a:	movs	r3, #0
    543c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5440:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5444:	pop	{r4, pc}

00005446 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5446:	push	{r3, r4, r5, lr}
    5448:	mov	r5, r1
  if (isOpen()) {
    544a:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    544e:	mov	r4, r0
  if (isOpen()) {
    5450:	cbnz	r1, 5468 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5452:	movs	r2, #56	; 0x38
    5454:	bl	9c1c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5458:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    545a:	movs	r0, #1
  m_vol = vol;
    545c:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    545e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    5462:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    5466:	pop	{r3, r4, r5, pc}
  return false;
    5468:	movs	r0, #0
    546a:	b.n	5466 <ExFatFile::openRoot(ExFatVolume*)+0x20>

0000546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    546c:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    546e:	mov	r5, r1
    5470:	ldrb.w	r4, [r1], #1
    5474:	cmp	r4, #32
    5476:	beq.n	546e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    5478:	ldr	r7, [pc, #108]	; (54e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    547a:	str	r5, [r2, #0]
  fname->end = path;
    547c:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    547e:	mov	r6, r5
    5480:	ldrb.w	r4, [r6], #1
    5484:	cbz	r4, 548a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5486:	cmp	r4, #47	; 0x2f
    5488:	bne.n	54a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    548a:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    548c:	ldrb.w	r1, [r5], #1
    5490:	cmp	r1, #32
    5492:	beq.n	548a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5494:	cmp	r1, #47	; 0x2f
    5496:	beq.n	548a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    5498:	str	r4, [r3, #0]
  return hashName(fname);
    549a:	mov	r1, r2

 fail:
  return false;
}
    549c:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    549e:	b.w	5398 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    54a2:	cmp	r4, #60	; 0x3c
    54a4:	bhi.n	54cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    54a6:	cmp	r4, #33	; 0x21
    54a8:	bhi.n	54b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    54aa:	subs	r1, r4, #1
    54ac:	cmp	r1, #30
    54ae:	bls.n	54c6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    54b0:	cmp	r4, #32
    54b2:	bne.n	54d8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    54b4:	mov	r5, r6
    54b6:	b.n	547e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    54b8:	sub.w	r1, r4, #34	; 0x22
    54bc:	uxtb	r1, r1
    54be:	lsr.w	r1, r7, r1
    54c2:	lsls	r1, r1, #31
    54c4:	bpl.n	54e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    54c6:	movs	r0, #0
    54c8:	pop	{r4, r5, r6, r7}
    54ca:	bx	lr
    54cc:	cmp	r4, #92	; 0x5c
    54ce:	beq.n	54c6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    54d0:	bhi.n	54dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    54d2:	subs	r4, #62	; 0x3e
    54d4:	cmp	r4, #1
    54d6:	bls.n	54c6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    54d8:	str	r6, [r2, #8]
    54da:	b.n	54b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    54dc:	cmp	r4, #124	; 0x7c
    54de:	beq.n	54c6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    54e0:	b.n	54d8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    54e2:	cmp	r4, #46	; 0x2e
    54e4:	b.n	54b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    54e6:	nop
    54e8:	.word	0x05002101

000054ec <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    54ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54f0:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    54f4:	ldrb.w	r3, [r0, #51]	; 0x33
    54f8:	sub	sp, #12
    54fa:	mov	r4, r0
    54fc:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    54fe:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    5500:	mov	r6, r2
  if (!isReadable()) {
    5502:	bpl.n	55cc <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5504:	lsls	r0, r3, #25
    5506:	bmi.n	5510 <ExFatFile::read(void*, unsigned int)+0x24>
    5508:	ldrb.w	r3, [r4, #49]	; 0x31
    550c:	lsls	r1, r3, #28
    550e:	bpl.n	5528 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    5510:	ldrd	r2, r3, [r4]
    5514:	ldrd	r1, r0, [r4, #16]
    5518:	adds	r5, r6, r2
    551a:	adc.w	r3, r3, #0
    551e:	cmp	r1, r5
    5520:	sbcs.w	r3, r0, r3
    5524:	bcs.n	5528 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5526:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5528:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    552c:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    552e:	vmov	s16, r3
    5532:	b.n	5618 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5534:	ldr	r0, [r4, #32]
    5536:	ldrd	r3, r2, [r4]
    553a:	ldr.w	r7, [r0, #1080]	; 0x438
    553e:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5540:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5544:	cbnz	r7, 555a <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    5546:	orrs	r3, r2
    5548:	bne.n	55a4 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    554a:	ldrb.w	r3, [r4, #49]	; 0x31
    554e:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5550:	ite	mi
    5552:	ldrmi.w	r3, [r0, #1076]	; 0x434
    5556:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5558:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    555a:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    555e:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5560:	ldr	r2, [r4, #24]
    5562:	ldrb.w	r1, [fp, #1093]	; 0x445
    5566:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5568:	ldr.w	r2, [fp, #1068]	; 0x42c
    556c:	lsls	r5, r1
    556e:	add.w	r5, r5, r7, lsr #9
    5572:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5574:	cmp.w	sl, #0
    5578:	bne.n	55de <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    557a:	cmp.w	r8, #512	; 0x200
    557e:	bcc.n	55de <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5580:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5584:	cmp	r5, r2
    5586:	beq.n	55de <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5588:	cmp.w	r8, #1024	; 0x400
    558c:	bcs.n	562c <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    558e:	ldr.w	r0, [fp, #532]	; 0x214
    5592:	mov	r2, r9
    5594:	mov	r1, r5
    5596:	ldr	r3, [r0, #0]
    5598:	ldr	r3, [r3, #16]
    559a:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    559c:	cbz	r0, 55cc <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    559e:	mov.w	r7, #512	; 0x200
    55a2:	b.n	5604 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    55a4:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    55a8:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    55aa:	lsls	r3, r3, #25
    55ac:	bpl.n	55b4 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    55ae:	adds	r1, #1
    55b0:	str	r1, [r4, #24]
    55b2:	b.n	555a <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    55b4:	vmov	r2, s16
    55b8:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    55bc:	cmp	r0, #0
    55be:	blt.n	55cc <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    55c0:	bne.n	555a <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    55c2:	ldrb.w	r3, [r4, #49]	; 0x31
    55c6:	tst.w	r3, #80	; 0x50
    55ca:	bne.n	561e <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    55cc:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    55d0:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    55d4:	orr.w	r3, r3, #2
    55d8:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    55dc:	b.n	5622 <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    55de:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    55e2:	movs	r2, #0
    55e4:	mov	r1, r5
    55e6:	add.w	r0, fp, #528	; 0x210
    55ea:	cmp	r7, r8
    55ec:	it	cs
    55ee:	movcs	r7, r8
    55f0:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    55f4:	cmp	r0, #0
    55f6:	beq.n	55cc <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    55f8:	add.w	r1, r0, sl
    55fc:	mov	r2, r7
    55fe:	mov	r0, r9
    5600:	bl	9c60 <memcpy>
    dst += n;
    5604:	add	r9, r7
    toRead -= n;
    5606:	sub.w	r8, r8, r7
    m_curPosition += n;
    560a:	ldrd	r3, r2, [r4]
    560e:	adds	r3, r3, r7
    5610:	adc.w	r2, r2, #0
    5614:	strd	r3, r2, [r4]
  while (toRead) {
    5618:	cmp.w	r8, #0
    561c:	bne.n	5534 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    561e:	sub.w	r0, r6, r8
}
    5622:	add	sp, #12
    5624:	vpop	{d8}
    5628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    562c:	movs	r3, #1
    562e:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5630:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5634:	subs	r3, r3, r0
    5636:	cmp	r3, r1
    5638:	it	cs
    563a:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    563c:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    563e:	mov.w	r7, r3, lsl #9
    5642:	bls.n	565a <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    5644:	ldr.w	r0, [fp, #532]	; 0x214
    5648:	mov	r1, r5
    564a:	ldr	r2, [r0, #0]
    564c:	ldr.w	fp, [r2, #20]
    5650:	mov	r2, r9
    5652:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5654:	cmp	r0, #0
    5656:	bne.n	5604 <ExFatFile::read(void*, unsigned int)+0x118>
    5658:	b.n	55cc <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    565a:	adds	r1, r5, r3
    565c:	cmp	r2, r1
    565e:	bcs.n	5644 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    5660:	add.w	r0, fp, #528	; 0x210
    5664:	str	r3, [sp, #4]
    5666:	bl	5114 <FsCache::sync()>
    566a:	ldr	r3, [sp, #4]
    566c:	cmp	r0, #0
    566e:	bne.n	5644 <ExFatFile::read(void*, unsigned int)+0x158>
    5670:	b.n	55cc <ExFatFile::read(void*, unsigned int)+0xe0>

00005672 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5672:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5674:	movs	r2, #1
    5676:	add.w	r1, sp, #7
    567a:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    567c:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    567e:	ldrd	r6, r7, [r0]
    5682:	bl	54ec <ExFatFile::read(void*, unsigned int)>
    5686:	cmp	r0, #1
  m_curCluster = curCluster;
    5688:	str	r5, [r4, #24]
    568a:	ite	eq
    568c:	ldrbeq.w	r0, [sp, #7]
    5690:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5694:	strd	r6, r7, [r4]
}
    5698:	add	sp, #12
    569a:	pop	{r4, r5, r6, r7, pc}

0000569c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    569c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    56a0:	ldrb.w	ip, [r0, #49]	; 0x31
    56a4:	mov	r4, r0
    56a6:	mov	r6, r2
    56a8:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    56aa:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    56ae:	cmp.w	ip, #0
    56b2:	beq.n	576c <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    56b4:	ldrd	r0, r3, [r0]
    56b8:	cmp	r3, r7
    56ba:	it	eq
    56bc:	cmpeq	r0, r2
    56be:	beq.n	56ce <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    56c0:	orrs.w	r2, r6, r7
    56c4:	bne.n	56d2 <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    56c6:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    56c8:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    56ca:	strd	r6, r7, [r4]
    return true;
    56ce:	movs	r0, #1
    56d0:	b.n	5772 <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    56d2:	tst.w	ip, #8
    56d6:	beq.n	56e2 <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    56d8:	ldrd	r1, r2, [r4, #16]
    56dc:	cmp	r1, r6
    56de:	sbcs	r2, r7
    56e0:	bcc.n	576c <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    56e2:	ldr.w	lr, [r4, #32]
    56e6:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    56e8:	ldrb.w	r1, [lr, #1093]	; 0x445
    56ec:	adc.w	sl, r7, #4294967295
    56f0:	adds	r1, #9
    56f2:	uxtb	r1, r1
    56f4:	rsb	r9, r1, #32
    56f8:	sub.w	r2, r1, #32
    56fc:	lsrs	r5, r1
    56fe:	lsl.w	r9, sl, r9
    5702:	lsr.w	r2, sl, r2
    5706:	sub.w	sl, r1, #32
    570a:	orr.w	r5, r5, r9
    570e:	rsb	r9, r1, #32
    5712:	orrs	r5, r2
  if (isContiguous()) {
    5714:	ldrb.w	r2, [r4, #51]	; 0x33
    5718:	tst.w	r2, #64	; 0x40
    571c:	beq.n	5724 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    571e:	ldr	r3, [r4, #28]
    5720:	add	r3, r5
    5722:	b.n	56c8 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5724:	adds.w	fp, r0, #4294967295
    5728:	adc.w	r2, r3, #4294967295
    572c:	lsr.w	r1, fp, r1
    5730:	lsl.w	r9, r2, r9
    5734:	lsr.w	r2, r2, sl
    5738:	orr.w	r1, r1, r9
    573c:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    573e:	cmp	r5, r1
    5740:	bcc.n	5746 <ExFatFile::seekSet(unsigned long long)+0xaa>
    5742:	orrs	r3, r0
    5744:	bne.n	5776 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5746:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    574a:	ite	ne
    574c:	ldrne.w	r3, [lr, #1076]	; 0x434
    5750:	ldreq	r3, [r4, #28]
    5752:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5754:	add.w	r9, r4, #24
  while (nNew--) {
    5758:	cmp	r5, #0
    575a:	beq.n	56ca <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    575c:	mov	r2, r9
    575e:	ldr	r1, [r4, #24]
    5760:	ldr	r0, [r4, #32]
    5762:	subs	r5, #1
    5764:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5768:	cmp	r0, #0
    576a:	bgt.n	5758 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    576c:	movs	r0, #0
  m_curCluster = tmp;
    576e:	str.w	r8, [r4, #24]
}
    5772:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    5776:	subs	r5, r5, r1
    5778:	b.n	5754 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

0000577c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    577c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5780:	mov	sl, r3
    5782:	ldrb.w	r3, [r0, #49]	; 0x31
    5786:	sub	sp, #52	; 0x34
    5788:	mov	r4, r0
    578a:	mov	r6, r1
    578c:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    578e:	cmp	r3, #0
    5790:	bne.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5792:	ldrb.w	r3, [r1, #49]	; 0x31
    5796:	tst.w	r3, #80	; 0x50
    579a:	beq.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    579c:	and.w	r9, sl, #3
    57a0:	cmp.w	r9, #3
    57a4:	beq.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    57a6:	add.w	r9, r9, #1
    57aa:	and.w	r3, sl, #8
    57ae:	orr.w	r9, r9, r3
  if (fname) {
    57b2:	cmp	r2, #0
    57b4:	beq.n	5828 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    57b6:	ldr	r7, [r2, #16]
    57b8:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    57ba:	movs	r2, #0
    57bc:	mov	r0, r1
    57be:	adds	r7, #14
    57c0:	udiv	r7, r7, r3
    57c4:	adds	r7, #2
    57c6:	movs	r3, #0
    57c8:	uxtb	r7, r7
    57ca:	bl	569c <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    57ce:	mov.w	fp, #0
    57d2:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    57d4:	movs	r2, #32
    57d6:	add	r1, sp, #16
    57d8:	mov	r0, r6
    57da:	bl	54ec <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    57de:	cmp	r0, #0
    57e0:	beq.w	596a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    57e4:	cmp	r0, #32
    57e6:	bne.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    57e8:	ldrsb.w	r1, [sp, #16]
    57ec:	ldrb.w	r2, [sp, #16]
    57f0:	cmp	r1, #0
    57f2:	blt.n	5832 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    57f4:	cmp.w	fp, #0
    57f8:	bne.n	5806 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    57fa:	ldr	r1, [r6, #0]
    57fc:	sub.w	r3, r1, #32
    5800:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5802:	ldr	r3, [r6, #24]
    5804:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5806:	cmp	fp, r7
        freeCount++;
    5808:	itt	cc
    580a:	addcc.w	r3, fp, #1
    580e:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5812:	cbnz	r2, 582c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5814:	cmp	r5, #0
    5816:	bne.w	596a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    581a:	mov.w	r8, #0
    581e:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    5822:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5826:	b.n	58fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5828:	movs	r7, #3
    582a:	b.n	57ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    582c:	movs	r0, #0
    582e:	mov	r8, r0
    5830:	b.n	57d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5832:	cmp.w	r8, #0
    5836:	bne.n	5888 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5838:	cmp	fp, r7
    583a:	it	cc
    583c:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5840:	cmp	r2, #133	; 0x85
    5842:	bne.n	582c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5844:	movs	r2, #56	; 0x38
    5846:	mov	r1, r8
    5848:	mov	r0, r4
    584a:	bl	9c1c <memset>
      m_setCount = dirFile->setCount;
    584e:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5852:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5856:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5858:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    585c:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5860:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5862:	it	pl
    5864:	orrpl.w	r2, r2, #8
    5868:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    586c:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    586e:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5870:	ldr	r2, [r6, #24]
    5872:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5874:	ldr	r2, [r6, #0]
    5876:	subs	r2, #32
    5878:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    587a:	ldrb.w	r2, [r6, #51]	; 0x33
    587e:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5882:	strb.w	r2, [r4, #44]	; 0x2c
    5886:	b.n	582e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5888:	cmp	r2, #192	; 0xc0
    588a:	bne.n	592e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    588c:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    5890:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5894:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5896:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    589a:	it	mi
    589c:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    58a0:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    58a4:	it	mi
    58a6:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    58aa:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    58ac:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    58b0:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    58b2:	strd	r0, r1, [r4, #8]
      if (!fname) {
    58b6:	cbnz	r5, 5906 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    58b8:	tst.w	sl, #2048	; 0x800
    58bc:	bne.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    58be:	tst.w	sl, #17408	; 0x4400
    58c2:	bne.n	58cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    58c4:	ldrb.w	r3, [r4, #51]	; 0x33
    58c8:	lsls	r0, r3, #30
    58ca:	bpl.n	58d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    58cc:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    58d0:	lsls	r1, r3, #27
    58d2:	bmi.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    58d4:	lsls	r2, r3, #31
    58d6:	bmi.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    58d8:	tst.w	sl, #1024	; 0x400
    58dc:	beq.n	5958 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    58de:	ldrb.w	r3, [r4, #51]	; 0x33
    58e2:	lsls	r3, r3, #30
    58e4:	bpl.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    58e6:	movs	r2, #0
    58e8:	movs	r3, #0
    58ea:	mov	r0, r4
    58ec:	bl	569c <ExFatFile::seekSet(unsigned long long)>
    58f0:	cmp	r0, #0
    58f2:	beq.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    58f4:	mov	r0, r4
    58f6:	bl	655c <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    58fa:	cmp	r0, #0
    58fc:	beq.n	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    58fe:	mov	r0, r8
    5900:	add	sp, #52	; 0x34
    5902:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5906:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5908:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    590c:	ldr	r1, [r5, #16]
    next = begin;
    590e:	str	r2, [r5, #4]
    5910:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5914:	strh	r3, [r5, #12]
    5916:	cmp	r1, r2
    5918:	bne.n	582c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    591a:	ldrh	r0, [r5, #20]
    591c:	ldrh.w	r2, [sp, #20]
    5920:	sub.w	ip, r0, r2
    5924:	rsbs	r0, ip, #0
    5928:	adc.w	r0, r0, ip
    592c:	b.n	582e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    592e:	cmp	r2, #193	; 0xc1
    5930:	bne.w	582c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5934:	mov	r2, r5
    5936:	add	r1, sp, #16
    5938:	mov	r0, r4
    593a:	bl	52a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    593e:	cmp	r0, #0
    5940:	beq.w	582e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5944:	ldrh	r2, [r5, #12]
    5946:	cmp	r2, #0
    5948:	bne.w	582e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    594c:	ldrd	r1, r2, [r5, #4]
    5950:	cmp	r1, r2
    5952:	bne.w	582e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5956:	b.n	58b8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5958:	tst.w	sl, #16384	; 0x4000
    595c:	beq.n	58fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    595e:	mov	r0, r4
    5960:	ldrd	r2, r3, [r4, #16]
    5964:	bl	569c <ExFatFile::seekSet(unsigned long long)>
    5968:	b.n	58fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    596a:	tst.w	sl, #512	; 0x200
    596e:	beq.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5972:	tst.w	r9, #2
    5976:	beq.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    597a:	cmp	r5, #0
    597c:	beq.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5980:	cmp	fp, r7
    5982:	bcc.n	59d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5984:	movs	r2, #56	; 0x38
    5986:	movs	r1, #0
    5988:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    598a:	ldrb.w	r8, [r6, #51]	; 0x33
    598e:	bl	9c1c <memset>
  ExFatVolume* volume() const {return m_vol;}
    5992:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    5994:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    5998:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    599c:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    599e:	movs	r3, #8
  m_dirPos = freePos;
    59a0:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    59a4:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    59a8:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    59ac:	mov.w	r8, #0
  m_dirPos = freePos;
    59b0:	ldr	r3, [sp, #0]
    59b2:	str	r3, [r4, #36]	; 0x24
    59b4:	ldr	r3, [sp, #4]
    59b6:	str	r3, [r4, #40]	; 0x28
    next = begin;
    59b8:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    59ba:	strh.w	r8, [r5, #12]
    next = begin;
    59be:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    59c0:	uxtb.w	fp, r8
    59c4:	cmp	r7, fp
    59c6:	bhi.n	5a16 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    59c8:	mov	r0, r4
    59ca:	bl	62d0 <ExFatFile::sync()>
    59ce:	mov	r8, r0
    59d0:	b.n	58fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    59d2:	movs	r2, #32
    59d4:	add	r1, sp, #16
    59d6:	mov	r0, r6
    59d8:	bl	54ec <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    59dc:	cbnz	r0, 59f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    59de:	mov	r0, r6
      curCluster = dir->m_curCluster;
    59e0:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    59e4:	bl	6312 <ExFatFile::addDirCluster()>
    59e8:	cmp	r0, #0
    59ea:	beq.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    59ee:	str.w	r8, [r6, #24]
      continue;
    59f2:	b.n	5980 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    59f4:	cmp	r0, #32
    59f6:	bne.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    59fa:	cmp.w	fp, #0
    59fe:	bne.n	5a0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5a00:	ldr	r2, [r6, #0]
    5a02:	sub.w	r3, r2, #32
    5a06:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5a08:	ldr	r3, [r6, #24]
    5a0a:	str	r3, [sp, #0]
    freeCount++;
    5a0c:	add.w	r3, fp, #1
    5a10:	uxtb.w	fp, r3
    5a14:	b.n	5980 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5a16:	movs	r2, #1
    5a18:	mov	r1, fp
    5a1a:	mov	r0, r4
    5a1c:	bl	53fa <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5a20:	mov	r6, r0
    5a22:	cmp	r0, #0
    5a24:	beq.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5a28:	ldrsb.w	r2, [r0]
    5a2c:	cmp	r2, #0
    5a2e:	blt.w	581a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5a32:	movs	r2, #32
    5a34:	movs	r1, #0
    5a36:	bl	9c1c <memset>
    if (i == 0) {
    5a3a:	cmp.w	fp, #0
    5a3e:	bne.n	5a82 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5a40:	movs	r3, #133	; 0x85
    5a42:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5a44:	ldr	r3, [pc, #128]	; (5ac8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5a46:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5a4a:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5a4e:	ldr	r3, [r3, #0]
    5a50:	cbz	r3, 5a76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5a52:	add.w	r2, sp, #11
    5a56:	add.w	r1, sp, #14
    5a5a:	add	r0, sp, #12
    5a5c:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a5e:	ldrh.w	r3, [sp, #12]
    5a62:	strh	r3, [r6, #10]
    5a64:	ldrh.w	r3, [sp, #14]
    5a68:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5a6a:	ldrb.w	r3, [sp, #11]
    5a6e:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5a70:	add.w	r8, r8, #1
    5a74:	b.n	59c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5a76:	movw	r3, #22561	; 0x5821
    5a7a:	strh	r3, [r6, #10]
    5a7c:	strh	r3, [r6, #14]
    5a7e:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    5a80:	b.n	5a70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    5a82:	cmp.w	fp, #1
    5a86:	bne.n	5aa2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5a88:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    5a8c:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5a8e:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    5a92:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5a94:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5a98:	ldr	r3, [r5, #16]
    5a9a:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5a9c:	ldrh	r3, [r5, #20]
    5a9e:	strh	r3, [r6, #4]
}
    5aa0:	b.n	5a70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    5aa2:	movs	r3, #193	; 0xc1
    5aa4:	add.w	fp, r6, #30
    5aa8:	strb	r3, [r6, #0]
    return !ls && next == end;
    5aaa:	ldrh	r2, [r5, #12]
    5aac:	cbnz	r2, 5ab6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    5aae:	ldrd	r1, r2, [r5, #4]
    5ab2:	cmp	r1, r2
    5ab4:	beq.n	5a70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    5ab6:	mov	r0, r5
    5ab8:	bl	5258 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5abc:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    5ac0:	cmp	fp, r6
    5ac2:	bne.n	5aaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    5ac4:	b.n	5a70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    5ac6:	nop
    5ac8:	.word	0x200271fc

00005acc <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5acc:	push	{r4, r5, r6, r7, lr}
    5ace:	mov	r7, r3
    5ad0:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    5ad2:	movs	r3, #0
    5ad4:	mov	r5, r0
    5ad6:	mov	r4, r1
    5ad8:	str	r2, [sp, #4]
    5ada:	str	r3, [sp, #80]	; 0x50
class FsName {
    5adc:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5ae0:	ldrb.w	r3, [r0, #49]	; 0x31
    5ae4:	cbz	r3, 5aec <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    5ae6:	movs	r0, #0
}
    5ae8:	add	sp, #92	; 0x5c
    5aea:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    5aec:	ldrb.w	r1, [r1, #49]	; 0x31
    5af0:	tst.w	r1, #80	; 0x50
    5af4:	beq.n	5ae6 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    5af6:	ldrb	r1, [r2, #0]
    5af8:	cmp	r1, #47	; 0x2f
    5afa:	bne.n	5b36 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    5afc:	mov	r0, r2
    while (isDirSeparator(*path)) {
    5afe:	ldrb.w	r1, [r2], #1
    5b02:	cmp	r1, #47	; 0x2f
    5b04:	beq.n	5b18 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    5b06:	cbz	r3, 5b0a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5b08:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5b0a:	ldr	r4, [r4, #32]
    if (*path == 0) {
    5b0c:	cbnz	r1, 5b1c <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    5b0e:	mov	r1, r4
    5b10:	mov	r0, r5
    5b12:	bl	5446 <ExFatFile::openRoot(ExFatVolume*)>
    5b16:	b.n	5ae8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    5b18:	movs	r3, #1
    5b1a:	b.n	5afc <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    5b1c:	movs	r2, #56	; 0x38
    5b1e:	movs	r1, #0
    5b20:	add	r0, sp, #32
    5b22:	bl	9c1c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5b26:	movs	r3, #64	; 0x40
  m_vol = vol;
    5b28:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    5b2a:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    5b2c:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    5b30:	movs	r3, #1
    5b32:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    5b36:	add	r3, sp, #4
    5b38:	add	r2, sp, #8
    5b3a:	ldr	r1, [sp, #4]
    5b3c:	mov	r0, r5
    5b3e:	bl	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5b42:	cmp	r0, #0
    5b44:	beq.n	5ae6 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    5b46:	ldr	r3, [sp, #4]
    5b48:	ldrb	r3, [r3, #0]
    5b4a:	cbz	r3, 5b84 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5b4c:	movs	r3, #0
    5b4e:	add	r2, sp, #8
    5b50:	mov	r1, r4
    5b52:	mov	r0, r5
    5b54:	bl	577c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5b58:	cmp	r0, #0
    5b5a:	beq.n	5ae6 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    5b5c:	add	r6, sp, #32
    5b5e:	mov	r2, r5
    5b60:	add.w	ip, r5, #48	; 0x30
    5b64:	mov	r4, r6
    5b66:	ldr	r0, [r2, #0]
    5b68:	adds	r2, #8
    5b6a:	ldr.w	r1, [r2, #-4]
    5b6e:	mov	r3, r6
    5b70:	cmp	r2, ip
    5b72:	stmia	r3!, {r0, r1}
    5b74:	mov	r6, r3
    5b76:	bne.n	5b66 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    5b78:	ldr	r0, [r2, #0]
    5b7a:	str	r0, [r3, #0]
    close();
    5b7c:	mov	r0, r5
    5b7e:	bl	5432 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5b82:	b.n	5b36 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    5b84:	mov	r3, r7
    5b86:	add	r2, sp, #8
    5b88:	mov	r1, r4
    5b8a:	mov	r0, r5
    5b8c:	bl	577c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5b90:	b.n	5ae8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

00005b92 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5b92:	cbz	r1, 5b9c <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    5b94:	add.w	r1, r1, #1096	; 0x448
    5b98:	b.w	5acc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5b9c:	mov	r0, r1
    5b9e:	bx	lr

00005ba0 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5ba0:	mov	r3, r2
    5ba2:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5ba4:	ldrb.w	r2, [r0, #49]	; 0x31
    5ba8:	cbnz	r2, 5bc4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5baa:	ldrb.w	r2, [r1, #49]	; 0x31
    5bae:	tst.w	r2, #80	; 0x50
    5bb2:	beq.n	5bc4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5bb4:	ldr	r2, [r1, #0]
    5bb6:	ands.w	r2, r2, #31
    5bba:	bne.n	5bc4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    5bbc:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    5bc0:	b.w	577c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    5bc4:	movs	r0, #0
    5bc6:	ldr.w	r4, [sp], #4
    5bca:	bx	lr

00005bcc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    5bcc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bd0:	mov	r7, r0
    5bd2:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5bd4:	mov	sl, r1
    5bd6:	cbz	r1, 5c0c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    5bd8:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    5bda:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    5bde:	movs	r4, #1
    start = 0;
    5be0:	cmp	r3, r5
    5be2:	it	ls
    5be4:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    5be6:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    5bea:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    5bee:	mov	r8, r5
  uint32_t endAlloc = start;
    5bf0:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    5bf2:	lsls	r4, r3
    5bf4:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    5bf6:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    5bfa:	movs	r2, #0
    5bfc:	mov	r0, r7
    5bfe:	add.w	r1, r1, r6, lsr #12
    5c02:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5c06:	cbnz	r0, 5c3a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5c08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5c0c:	ldr.w	r5, [r0, #1056]	; 0x420
    5c10:	b.n	5bda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    5c12:	mov	r8, r6
        if (endAlloc == start) {
    5c14:	cmp	r5, r6
    5c16:	beq.n	5c70 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    5c18:	ldr.w	r2, [r7, #1072]	; 0x430
    5c1c:	cmp	r2, r6
    5c1e:	bls.n	5c64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    5c20:	lsls	r4, r4, #1
    5c22:	ands.w	r4, r4, #255	; 0xff
    5c26:	bne.n	5c3e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    5c28:	add.w	r3, r9, #1
    5c2c:	movs	r4, #1
    i = 0;
    5c2e:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    5c32:	cmp.w	r3, #512	; 0x200
    5c36:	bcs.n	5bf6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    5c38:	mov	r9, r3
        if (!(mask & cache[i])) {
    5c3a:	ldrb.w	r3, [r0, r9]
    5c3e:	tst	r3, r4
        endAlloc++;
    5c40:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    5c44:	bne.n	5c12 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    5c46:	sub.w	r2, r6, r8
    5c4a:	cmp	r2, fp
    5c4c:	bne.n	5c14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    5c4e:	cmp.w	sl, #0
    5c52:	bne.n	5c5e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    5c54:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    5c58:	it	eq
    5c5a:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    5c5e:	add.w	r0, r8, #2
    5c62:	b.n	5c08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    5c64:	mov.w	r8, #0
          i = sectorSize;
    5c68:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    5c6c:	mov	r6, r8
    5c6e:	b.n	5c28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    5c70:	movs	r0, #1
    5c72:	b.n	5c08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00005c74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    5c74:	subs	r1, #2
                                  uint32_t count, bool value) {
    5c76:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c7a:	mov	r5, r0
    5c7c:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    5c7e:	ldr.w	r0, [r0, #1072]	; 0x430
    5c82:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    5c84:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    5c86:	cmp	r3, r0
    5c88:	bhi.n	5d0a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5c8a:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    5c8e:	cbz	r7, 5d00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5c90:	cmp	r1, r2
    5c92:	bhi.n	5ca2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    5c94:	cmp	r3, r2
    5c96:	bls.n	5ca2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    5c98:	cmp	r3, r0
    5c9a:	it	cs
    5c9c:	movcs	r3, #0
    5c9e:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    5ca2:	and.w	r3, r1, #7
    5ca6:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    5caa:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    5cae:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    5cb2:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    5cb6:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    5cba:	add.w	r8, r3, r1, lsr #12
    5cbe:	movs	r2, #1
    5cc0:	mov	r1, r8
    5cc2:	mov	r0, r5
    5cc4:	add	r8, r2
    5cc6:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    5cca:	cbz	r0, 5d0a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    5ccc:	adds	r3, r0, r4
    5cce:	mov	r1, r9
    5cd0:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    5cd4:	ldrb	r2, [r3, #0]
    5cd6:	tst	r2, r1
    5cd8:	ite	ne
    5cda:	movne	r4, #1
    5cdc:	moveq	r4, #0
    5cde:	cmp	r4, r7
    5ce0:	beq.n	5d0a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    5ce2:	eors	r2, r1
        if (--count == 0) {
    5ce4:	subs	r6, #1
        cache[i] ^= mask;
    5ce6:	strb	r2, [r3, #0]
        if (--count == 0) {
    5ce8:	beq.n	5d10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    5cea:	lsls	r1, r1, #1
    5cec:	ands.w	r1, r1, #255	; 0xff
    5cf0:	bne.n	5cd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    5cf2:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    5cf4:	mov	r4, r1
    5cf6:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    5cf8:	cmp	r0, r3
      mask = 1;
    5cfa:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    5cfc:	bne.n	5cd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    5cfe:	b.n	5cbe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    5d00:	cmp	r1, r2
      m_bitmapStart = start;
    5d02:	it	cc
    5d04:	strcc.w	r1, [r5, #1056]	; 0x420
    5d08:	b.n	5ca2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    5d0a:	movs	r0, #0
}
    5d0c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    5d10:	movs	r0, #1
    5d12:	b.n	5d0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00005d14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5d14:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5d16:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5d1a:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5d1c:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    5d1e:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    5d22:	ldrb.w	r5, [r0, #565]	; 0x235
    5d26:	ands	r1, r3
    5d28:	ldr	r3, [r4, #0]
    5d2a:	subs	r3, #2
    5d2c:	lsls	r3, r5
    5d2e:	add.w	r3, r3, r1, lsr #9
    5d32:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    5d36:	add	r1, r3
    5d38:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    5d3c:	cbz	r0, 5d46 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    5d3e:	ldr	r3, [r4, #4]
    5d40:	ubfx	r3, r3, #0, #9
    5d44:	add	r0, r3
}
    5d46:	pop	{r3, r4, r5, pc}

00005d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5d48:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5d4a:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5d4e:	mov	r4, r1
    5d50:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    5d52:	adds	r3, #1
    5d54:	cmp	r3, r1
    5d56:	bcs.n	5d5e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    5d58:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    5d5c:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5d5e:	ldr.w	r1, [r0, #1060]	; 0x424
    5d62:	movs	r2, #0
    5d64:	add.w	r0, r0, #528	; 0x210
    5d68:	add.w	r1, r1, r4, lsr #7
    5d6c:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5d70:	cmp	r0, #0
    5d72:	beq.n	5d58 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    5d74:	lsls	r4, r4, #2
    5d76:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    5d7a:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    5d7c:	adds	r2, r3, #1
  return 1;
    5d7e:	itet	ne
    5d80:	movne	r0, #1
    return 0;
    5d82:	moveq	r0, #0
  *value = next;
    5d84:	strne	r3, [r5, #0]
  return 1;
    5d86:	b.n	5d5c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00005d88 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5d88:	push	{r0, r1, r2, r4, r5, lr}
    5d8a:	mov	r5, r0
  uint32_t n = 0;
    5d8c:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5d8e:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    5d90:	add	r2, sp, #4
    5d92:	ldr	r1, [sp, #4]
    5d94:	mov	r0, r5
    5d96:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    5d9a:	cmp	r0, #0
    5d9c:	blt.n	5daa <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    5d9e:	add.w	r4, r4, #1
  } while (status);
    5da2:	bne.n	5d90 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    5da4:	mov	r0, r4
    5da6:	add	sp, #12
    5da8:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    5daa:	movs	r4, #0
    5dac:	b.n	5da4 <ExFatPartition::chainSize(unsigned long)+0x1c>

00005dae <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5dae:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5db0:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5db2:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5db4:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5db8:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5dba:	ands	r4, r3
    5dbc:	add	r4, r2
  pos->position += offset;
    5dbe:	add	r2, r3
    5dc0:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5dc2:	ldrb.w	r3, [r0, #1093]	; 0x445
    5dc6:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    5dc8:	uxtb	r3, r3
    5dca:	lsrs	r4, r3
  while (tmp--) {
    5dcc:	cbnz	r4, 5dd2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    5dce:	movs	r0, #1
    5dd0:	b.n	5dec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    5dd2:	ldrb	r3, [r5, #8]
      pos->cluster++;
    5dd4:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    5dd6:	cbz	r3, 5de0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    5dd8:	adds	r1, #1
    5dda:	str	r1, [r5, #0]
    5ddc:	subs	r4, #1
    5dde:	b.n	5dcc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    5de0:	mov	r2, r5
    5de2:	mov	r0, r6
    5de4:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    5de8:	cmp	r0, #1
    5dea:	beq.n	5ddc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    5dec:	pop	{r4, r5, r6, pc}

00005dee <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5dee:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5df0:	push	{r3, r4, r5, lr}
    5df2:	mov	r4, r1
    5df4:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5df6:	bhi.n	5dfc <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    5df8:	movs	r0, #0
}
    5dfa:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5dfc:	ldr.w	r3, [r0, #1072]	; 0x430
    5e00:	adds	r3, #1
    5e02:	cmp	r3, r1
    5e04:	bcc.n	5df8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5e06:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    5e0a:	movs	r2, #1
    5e0c:	add.w	r0, r0, #528	; 0x210
    5e10:	add.w	r1, r1, r4, lsr #7
    5e14:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5e18:	cmp	r0, #0
    5e1a:	beq.n	5df8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    5e1c:	lsls	r4, r4, #2
    5e1e:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5e22:	str	r5, [r0, r4]
  return true;
    5e24:	movs	r0, #1
    5e26:	b.n	5dfa <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00005e28 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    5e28:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5e2c:	mov	r7, r0
    5e2e:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    5e30:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    5e32:	add	r2, sp, #4
    5e34:	mov	r1, r4
    5e36:	mov	r0, r7
    5e38:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    5e3c:	subs	r6, r0, #0
    5e3e:	bge.n	5e4a <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    5e40:	movs	r5, #0
}
    5e42:	mov	r0, r5
    5e44:	add	sp, #8
    5e46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    5e4a:	movs	r2, #0
    5e4c:	mov	r1, r4
    5e4e:	mov	r0, r7
    5e50:	bl	5dee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5e54:	mov	r5, r0
    5e56:	cmp	r0, #0
    5e58:	beq.n	5e40 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    5e5a:	adds	r2, r4, #1
    5e5c:	cbz	r6, 5e64 <ExFatPartition::freeChain(unsigned long)+0x3c>
    5e5e:	ldr	r3, [sp, #4]
    5e60:	cmp	r3, r2
    5e62:	beq.n	5e7a <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5e64:	movs	r3, #0
    5e66:	sub.w	r2, r2, r8
    5e6a:	mov	r1, r8
    5e6c:	mov	r0, r7
    5e6e:	bl	5c74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5e72:	cmp	r0, #0
    5e74:	beq.n	5e40 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    5e76:	ldr.w	r8, [sp, #4]
    cluster = next;
    5e7a:	ldr	r4, [sp, #4]
  } while (status);
    5e7c:	cmp	r6, #0
    5e7e:	bne.n	5e32 <ExFatPartition::freeChain(unsigned long)+0xa>
    5e80:	b.n	5e42 <ExFatPartition::freeChain(unsigned long)+0x1a>

00005e82 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    5e82:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    5e86:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    5e88:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    5e8a:	ldr.w	r7, [r0, #1068]	; 0x42c
    5e8e:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    5e92:	mov	r5, r4
    5e94:	mov	r1, r7
    5e96:	movs	r2, #0
    5e98:	mov	r0, r8
    5e9a:	adds	r7, #1
    5e9c:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5ea0:	cbz	r0, 5ebe <ExFatPartition::freeClusterCount()+0x3c>
    5ea2:	subs	r0, #1
    5ea4:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    5ea8:	ldrb.w	r1, [r0, #1]!
    5eac:	cmp	r1, #255	; 0xff
    5eae:	bne.n	5ec2 <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    5eb0:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    5eb2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    5eb4:	ldr.w	r3, [r6, #1072]	; 0x430
    5eb8:	cmp	r3, r5
    5eba:	bhi.n	5edc <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    5ebc:	subs	r0, r3, r4
      }
    }
  }
}
    5ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    5ec2:	cmp	r1, #0
    5ec4:	beq.n	5eb2 <ExFatPartition::freeClusterCount()+0x30>
    5ec6:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5ec8:	movs	r3, #1
          if ((mask & cache[i])) {
    5eca:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5ecc:	mov.w	r3, r3, lsl #1
            usedCount++;
    5ed0:	it	ne
    5ed2:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5ed4:	subs	r2, #1
    5ed6:	uxtb	r3, r3
    5ed8:	bne.n	5eca <ExFatPartition::freeClusterCount()+0x48>
    5eda:	b.n	5eb2 <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    5edc:	cmp	r5, ip
    5ede:	bne.n	5ea8 <ExFatPartition::freeClusterCount()+0x26>
    5ee0:	b.n	5e94 <ExFatPartition::freeClusterCount()+0x12>
	...

00005ee4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5ee4:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    5ee6:	mov.w	r3, #4294967295
    5eea:	mov	r6, r2
    5eec:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5ef0:	movs	r2, #0
  m_blockDev = dev;
    5ef2:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5ef6:	mov	r4, r0
    m_blockDev = blockDev;
    5ef8:	str	r1, [r0, #4]
    5efa:	str.w	r1, [r0, #532]	; 0x214
    5efe:	mov	r1, r2
  m_fatType = 0;
    5f00:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    5f04:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    5f06:	str	r3, [r0, #12]
    m_status = 0;
    5f08:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5f0c:	str.w	r3, [r0, #540]	; 0x21c
    5f10:	mov	r0, r7
    5f12:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    5f16:	cmp	r6, #4
    5f18:	mov	r5, r0
    5f1a:	bls.n	5f20 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    5f1c:	movs	r0, #0
}
    5f1e:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    5f20:	cmp	r0, #0
    5f22:	beq.n	5f1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    5f24:	cbz	r6, 5f54 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    5f26:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    5f28:	add.w	r3, r0, r3, lsl #4
    5f2c:	ldrb.w	r2, [r3, #446]	; 0x1be
    5f30:	ands.w	r2, r2, #127	; 0x7f
    5f34:	bne.n	5f1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    5f36:	ldrb.w	r3, [r3, #450]	; 0x1c2
    5f3a:	cmp	r3, #0
    5f3c:	beq.n	5f1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    5f3e:	add.w	r6, r0, r6, lsl #4
    5f42:	mov	r0, r7
    5f44:	ldr.w	r6, [r6, #438]	; 0x1b6
    5f48:	mov	r1, r6
    5f4a:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5f4e:	mov	r5, r0
    5f50:	cmp	r0, #0
    5f52:	beq.n	5f1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    5f54:	ldr	r1, [pc, #104]	; (5fc0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    5f56:	movs	r2, #5
    5f58:	adds	r0, r5, #3
    5f5a:	bl	e60c <strncmp>
    5f5e:	mov	r1, r0
    5f60:	cmp	r0, #0
    5f62:	bne.n	5f1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    5f64:	ldrb.w	r3, [r5, #108]	; 0x6c
    5f68:	cmp	r3, #9
    5f6a:	bne.n	5f1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5f6c:	ldr	r3, [r5, #80]	; 0x50
    5f6e:	add	r3, r6
    5f70:	str.w	r3, [r4, #1060]	; 0x424
    5f74:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    5f76:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    5f7a:	ldr	r3, [r5, #88]	; 0x58
    5f7c:	add	r3, r6
    5f7e:	str.w	r3, [r4, #1068]	; 0x42c
    5f82:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    5f84:	str.w	r3, [r4, #1072]	; 0x430
    5f88:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    5f8a:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    5f8e:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5f92:	movs	r5, #1
  m_bitmapStart = 0;
    5f94:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    5f98:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    5f9a:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5f9e:	adds	r3, #9
  bitmapFind(0, 1);
    5fa0:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5fa2:	lsl.w	r3, r5, r3
    5fa6:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    5faa:	subs	r3, #1
    5fac:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    5fb0:	bl	5bcc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    5fb4:	movs	r3, #64	; 0x40
  return true;
    5fb6:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    5fb8:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    5fbc:	b.n	5f1e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    5fbe:	nop
    5fc0:	.word	0x20007f21

00005fc4 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    5fc4:	push	{r4, lr}
    5fc6:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    5fc8:	ldr.w	r1, [r0, #1076]	; 0x434
    5fcc:	bl	5d88 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5fd0:	ldrb.w	r3, [r4, #1093]	; 0x445
    5fd4:	adds	r3, #9
  return nc << bytesPerClusterShift();
    5fd6:	uxtb	r3, r3
}
    5fd8:	lsls	r0, r3
    5fda:	pop	{r4, pc}

00005fdc <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    5fdc:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    5fde:	add.w	r4, r0, #1096	; 0x448
    5fe2:	sub	sp, #56	; 0x38
    5fe4:	movs	r3, #0
    5fe6:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    5fe8:	mov	r0, sp
    5fea:	mov	r1, r4
    5fec:	str	r3, [sp, #48]	; 0x30
    5fee:	bl	5acc <ExFatFile::open(ExFatFile*, char const*, int)>
    5ff2:	mov	r5, r0
    5ff4:	cbz	r0, 601e <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    5ff6:	ldrb.w	r3, [sp, #49]	; 0x31
    5ffa:	ands.w	r3, r3, #80	; 0x50
    5ffe:	beq.n	6024 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6000:	mov	r2, sp
    6002:	mov	r3, r4
    6004:	add	r6, sp, #48	; 0x30
    6006:	mov	r4, r2
    6008:	adds	r3, #8
    600a:	ldmia	r4!, {r0, r1}
    600c:	cmp	r4, r6
    600e:	str.w	r0, [r3, #-8]
    6012:	str.w	r1, [r3, #-4]
    6016:	mov	r2, r4
    6018:	bne.n	6006 <ExFatVolume::chdir(char const*)+0x2a>
    601a:	ldr	r0, [r4, #0]
    601c:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    601e:	mov	r0, r5
    6020:	add	sp, #56	; 0x38
    6022:	pop	{r4, r5, r6, pc}
  return false;
    6024:	mov	r5, r3
    6026:	b.n	601e <ExFatVolume::chdir(char const*)+0x42>

00006028 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6028:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    602a:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    602c:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    602e:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6030:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6032:	orr.w	r2, r2, r1, lsr #1
    6036:	ldrb	r1, [r0, r3]
    6038:	uxtah	r2, r1, r2
    603c:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    603e:	bne.n	6052 <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    6040:	cmp	r4, #133	; 0x85
    6042:	ite	ne
    6044:	movne	r2, #1
    6046:	moveq	r2, #3
    6048:	add	r3, r2
    604a:	cmp	r3, #31
    604c:	bls.n	602e <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    604e:	mov	r0, r1
    6050:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6052:	movs	r2, #1
    6054:	b.n	6048 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00006056 <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    6056:	push	{r4, lr}
    6058:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    605a:	bl	5114 <FsCache::sync()>
    605e:	cbz	r0, 6078 <ExFatPartition::cacheSync()+0x22>
    6060:	add.w	r0, r4, #528	; 0x210
    6064:	bl	5114 <FsCache::sync()>
    6068:	cbz	r0, 6078 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    606a:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    606e:	ldr	r3, [r0, #0]
  }
    6070:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6074:	ldr	r3, [r3, #32]
    6076:	bx	r3
  }
    6078:	movs	r0, #0
    607a:	pop	{r4, pc}

0000607c <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    607c:	push	{r3, r4, r5, r6, r7, lr}
    607e:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6080:	ldr	r0, [r0, #32]
    6082:	ldr	r1, [r4, #24]
    6084:	cbz	r1, 6088 <ExFatFile::addCluster()+0xc>
    6086:	adds	r1, #1
    6088:	movs	r2, #1
    608a:	bl	5bcc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    608e:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6090:	mov	r5, r0
  if (find < 2) {
    6092:	bhi.n	609a <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6094:	movs	r6, #0
}
    6096:	mov	r0, r6
    6098:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    609a:	movs	r3, #1
    609c:	mov	r1, r0
    609e:	ldr	r0, [r4, #32]
    60a0:	mov	r2, r3
    60a2:	bl	5c74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    60a6:	mov	r6, r0
    60a8:	cmp	r0, #0
    60aa:	beq.n	6094 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    60ac:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    60ae:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    60b2:	cbnz	r2, 60c0 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    60b4:	orr.w	r3, r3, #64	; 0x40
    60b8:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    60bc:	str	r5, [r4, #24]
  return true;
    60be:	b.n	6096 <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    60c0:	lsls	r1, r3, #25
    60c2:	bmi.n	60e8 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    60c4:	mov.w	r2, #4294967295
    60c8:	mov	r1, r5
    60ca:	ldr	r0, [r4, #32]
    60cc:	bl	5dee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    60d0:	cmp	r0, #0
    60d2:	beq.n	6094 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    60d4:	ldr	r1, [r4, #24]
    60d6:	cmp	r1, #0
    60d8:	beq.n	60bc <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    60da:	mov	r2, r5
    60dc:	ldr	r0, [r4, #32]
    60de:	bl	5dee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    60e2:	cmp	r0, #0
    60e4:	bne.n	60bc <ExFatFile::addCluster()+0x40>
    60e6:	b.n	6094 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    60e8:	adds	r2, #1
    60ea:	cmp	r2, r5
    60ec:	beq.n	60bc <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    60ee:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    60f2:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    60f4:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    60f8:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    60fa:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    60fc:	cmp	r3, r1
    60fe:	bls.n	60c4 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6100:	adds	r7, r1, #1
    6102:	mov	r2, r7
    6104:	bl	5dee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6108:	cmp	r0, #0
    610a:	beq.n	6094 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    610c:	mov	r1, r7
    610e:	b.n	60f8 <ExFatFile::addCluster()+0x7c>

00006110 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6110:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6112:	ldrb.w	r3, [r0, #51]	; 0x33
    6116:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6118:	lsls	r2, r3, #30
    611a:	bmi.n	6120 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    611c:	movs	r0, #0
}
    611e:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    6120:	ldr	r1, [r0, #28]
    6122:	cbnz	r1, 615a <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6124:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6126:	movs	r2, #1
    6128:	uxtb	r1, r5
    612a:	mov	r0, r4
    612c:	bl	53fa <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6130:	cmp	r0, #0
    6132:	beq.n	611c <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6134:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6136:	adds	r5, #1
    cache[0] &= 0x7F;
    6138:	and.w	r3, r3, #127	; 0x7f
    613c:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    613e:	uxtb	r3, r5
    6140:	ldrb.w	r2, [r4, #48]	; 0x30
    6144:	cmp	r2, r3
    6146:	bcs.n	6126 <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    6148:	movs	r3, #0
  return m_vol->cacheSync();
    614a:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    614c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6150:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6154:	bl	6056 <ExFatPartition::cacheSync()>
    6158:	b.n	611e <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    615a:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    615c:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    615e:	bpl.n	6196 <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6160:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6164:	ldrd	r2, r5, [r4, #8]
    6168:	adds	r3, #9
    616a:	subs	r2, #1
    616c:	uxtb	r3, r3
    616e:	adc.w	r5, r5, #4294967295
    6172:	rsb	r7, r3, #32
    6176:	sub.w	r6, r3, #32
    617a:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    617c:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    617e:	lsl.w	r7, r5, r7
    6182:	lsr.w	r6, r5, r6
    6186:	orrs	r2, r7
    6188:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    618a:	adds	r2, #1
    618c:	bl	5c74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6190:	cmp	r0, #0
    6192:	bne.n	6124 <ExFatFile::remove()+0x14>
    6194:	b.n	611c <ExFatFile::remove()+0xc>
    6196:	bl	5e28 <ExFatPartition::freeChain(unsigned long)>
    619a:	b.n	6190 <ExFatFile::remove()+0x80>

0000619c <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    619c:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    619e:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    61a2:	sub	sp, #32
    61a4:	mov	r4, r0
  if (!isSubDir()) {
    61a6:	lsls	r3, r3, #27
    61a8:	bmi.n	61b0 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    61aa:	movs	r0, #0
}
    61ac:	add	sp, #32
    61ae:	pop	{r4, pc}
    seekSet(0);
    61b0:	movs	r2, #0
    61b2:	movs	r3, #0
    61b4:	bl	569c <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    61b8:	movs	r2, #32
    61ba:	mov	r1, sp
    61bc:	mov	r0, r4
    61be:	bl	54ec <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    61c2:	cbz	r0, 61d8 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    61c4:	cmp	r0, #32
    61c6:	bne.n	61aa <ExFatFile::rmdir()+0xe>
    61c8:	ldrsb.w	r2, [sp]
    61cc:	ldrb.w	r3, [sp]
    61d0:	cmp	r2, #0
    61d2:	blt.n	61aa <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    61d4:	cmp	r3, #0
    61d6:	bne.n	61b8 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    61d8:	movs	r3, #8
  return remove();
    61da:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    61dc:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    61e0:	ldrb.w	r3, [r4, #51]	; 0x33
    61e4:	orr.w	r3, r3, #2
    61e8:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    61ec:	bl	6110 <ExFatFile::remove()>
    61f0:	b.n	61ac <ExFatFile::rmdir()+0x10>
	...

000061f4 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    61f4:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    61f8:	movs	r7, #0
    61fa:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    61fc:	ldr.w	r8, [pc, #204]	; 62cc <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    6200:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6202:	movs	r2, #0
    6204:	uxtb	r1, r7
    6206:	mov	r0, r4
    6208:	bl	53fa <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    620c:	mov	r5, r0
    620e:	cmp	r0, #0
    6210:	beq.n	628e <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    6212:	ldrb	r3, [r0, #0]
    6214:	cmp	r3, #192	; 0xc0
    6216:	beq.n	62a2 <ExFatFile::syncDir()+0xae>
    6218:	cmp	r3, #193	; 0xc1
    621a:	beq.n	6260 <ExFatFile::syncDir()+0x6c>
    621c:	cmp	r3, #133	; 0x85
    621e:	bne.n	628e <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6220:	ldrb.w	r3, [r4, #49]	; 0x31
    6224:	and.w	r3, r3, #55	; 0x37
    6228:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    622a:	ldr.w	r3, [r8]
    622e:	cbz	r3, 6252 <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6230:	add.w	r2, sp, #3
    6234:	add.w	r1, sp, #6
    6238:	add	r0, sp, #4
    623a:	blx	r3
          df->modifyTimeMs = ms10;
    623c:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    6240:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6244:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    6246:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    624a:	strh	r2, [r5, #12]
    624c:	strh	r3, [r5, #14]
    624e:	strh	r2, [r5, #16]
    6250:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    6252:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6254:	ldrb.w	r3, [r2, #528]	; 0x210
    6258:	orr.w	r3, r3, #1
    625c:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6260:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6262:	mov	r1, r6
    6264:	mov	r0, r5
    6266:	bl	6028 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    626a:	ldrb.w	r2, [r4, #48]	; 0x30
    626e:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    6270:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6272:	cmp	r2, r3
    6274:	bcs.n	6202 <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6276:	movs	r2, #1
    6278:	add.w	r1, r4, #36	; 0x24
    627c:	ldr	r0, [r4, #32]
    627e:	bl	5d14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6282:	cbz	r0, 628e <ExFatFile::syncDir()+0x9a>
    6284:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6286:	ldr	r0, [r4, #32]
    6288:	bl	6056 <ExFatPartition::cacheSync()>
    628c:	cbnz	r0, 629c <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    628e:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6292:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6294:	orr.w	r3, r3, #1
    6298:	strb.w	r3, [r4, #50]	; 0x32
}
    629c:	add	sp, #8
    629e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    62a2:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    62a6:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    62a8:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    62aa:	ite	mi
    62ac:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    62b0:	andpl.w	r3, r3, #253	; 0xfd
    62b4:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    62b6:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    62ba:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    62be:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    62c0:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    62c2:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    62c6:	strd	r2, r3, [r0, #24]
    62ca:	b.n	6252 <ExFatFile::syncDir()+0x5e>
    62cc:	.word	0x200271fc

000062d0 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    62d0:	push	{r4, lr}
  if (!isOpen()) {
    62d2:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    62d6:	mov	r4, r0
  if (!isOpen()) {
    62d8:	cbnz	r3, 62de <ExFatFile::sync()+0xe>
    return true;
    62da:	movs	r0, #1
}
    62dc:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    62de:	ldrsb.w	r2, [r0, #51]	; 0x33
    62e2:	ldrb.w	r3, [r0, #51]	; 0x33
    62e6:	cmp	r2, #0
    62e8:	bge.n	62fa <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    62ea:	and.w	r3, r3, #127	; 0x7f
    62ee:	strb.w	r3, [r0, #51]	; 0x33
}
    62f2:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    62f6:	b.w	61f4 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    62fa:	ldr	r0, [r0, #32]
    62fc:	bl	6056 <ExFatPartition::cacheSync()>
    6300:	cmp	r0, #0
    6302:	bne.n	62da <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6304:	ldrb.w	r3, [r4, #50]	; 0x32
    6308:	orr.w	r3, r3, #1
    630c:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6310:	b.n	62dc <ExFatFile::sync()+0xc>

00006312 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6312:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6314:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6318:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    631a:	lsls	r2, r3, #25
    631c:	bpl.n	639e <ExFatFile::addDirCluster()+0x8c>
    631e:	ldr	r0, [r0, #32]
    6320:	bl	5fc4 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6324:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    6326:	ldr.w	r3, [r3, #1084]	; 0x43c
    632a:	add	r0, r3
  if (dl >= 0X4000000) {
    632c:	cmp.w	r0, #67108864	; 0x4000000
    6330:	bcs.n	63be <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    6332:	mov	r0, r4
    6334:	bl	607c <ExFatFile::addCluster()>
    6338:	cmp	r0, #0
    633a:	beq.n	63be <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    633c:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    633e:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6340:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6342:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6344:	ldrb.w	r2, [r3, #1093]	; 0x445
    6348:	subs	r5, #2
    634a:	ldr.w	r3, [r3, #1068]	; 0x42c
    634e:	lsls	r5, r2
    6350:	add	r5, r3
    6352:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6354:	ldrb.w	r3, [r0, #1093]	; 0x445
    6358:	lsl.w	r3, r7, r3
    635c:	cmp	r6, r3
    635e:	bcc.n	63a2 <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    6360:	ldrb.w	r3, [r4, #49]	; 0x31
    6364:	lsls	r3, r3, #25
    6366:	bmi.n	6394 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6368:	ldrb.w	r3, [r4, #51]	; 0x33
    636c:	orn	r3, r3, #127	; 0x7f
    6370:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6374:	ldr.w	r2, [r0, #1084]	; 0x43c
    6378:	ldrd	r3, r1, [r4, #8]
    637c:	adds	r3, r3, r2
    637e:	adc.w	r1, r1, #0
    6382:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6386:	ldrd	r3, r1, [r4, #16]
    638a:	adds	r3, r3, r2
    638c:	adc.w	r1, r1, #0
    6390:	strd	r3, r1, [r4, #16]
  return sync();
    6394:	mov	r0, r4
}
    6396:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    639a:	b.w	62d0 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    639e:	ldr	r0, [r0, #8]
    63a0:	b.n	6324 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    63a2:	movs	r2, #5
    63a4:	adds	r1, r5, r6
    63a6:	add.w	r0, r0, #528	; 0x210
    63aa:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    63ae:	cbz	r0, 63be <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    63b0:	mov.w	r2, #512	; 0x200
    63b4:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    63b6:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    63b8:	bl	9c1c <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    63bc:	b.n	6352 <ExFatFile::addDirCluster()+0x40>
}
    63be:	movs	r0, #0
    63c0:	pop	{r3, r4, r5, r6, r7, pc}

000063c2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    63c2:	push	{r4, lr}
  if (!parent->isDir()) {
    63c4:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    63c8:	mov	r4, r0
  if (!parent->isDir()) {
    63ca:	tst.w	r3, #80	; 0x50
    63ce:	beq.n	6406 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    63d0:	movw	r3, #2562	; 0xa02
    63d4:	bl	577c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    63d8:	cbz	r0, 6406 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    63da:	movs	r3, #16
  if (!addDirCluster()) {
    63dc:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    63de:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    63e2:	bl	6312 <ExFatFile::addDirCluster()>
    63e6:	cbz	r0, 6406 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    63e8:	ldr	r3, [r4, #24]
    63ea:	mov	r0, r4
    63ec:	movs	r2, #0
    63ee:	str	r3, [r4, #28]
    63f0:	movs	r3, #0
    63f2:	bl	569c <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    63f6:	movs	r3, #193	; 0xc1
  return sync();
    63f8:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    63fa:	strb.w	r3, [r4, #51]	; 0x33
}
    63fe:	ldmia.w	sp!, {r4, lr}
  return sync();
    6402:	b.w	62d0 <ExFatFile::sync()>
}
    6406:	movs	r0, #0
    6408:	pop	{r4, pc}

0000640a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    640a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    640e:	mov	r8, r3
    6410:	sub	sp, #88	; 0x58
    6412:	movs	r3, #0
    6414:	mov	r5, r0
    6416:	mov	r4, r1
    6418:	str	r2, [sp, #4]
    641a:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    641e:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    6420:	ldrb.w	r3, [r0, #49]	; 0x31
    6424:	cbz	r3, 642e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    6426:	movs	r0, #0
}
    6428:	add	sp, #88	; 0x58
    642a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    642e:	ldrb.w	r3, [r1, #49]	; 0x31
    6432:	tst.w	r3, #80	; 0x50
    6436:	beq.n	6426 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    6438:	ldrb	r3, [r2, #0]
    643a:	cmp	r3, #47	; 0x2f
    643c:	bne.n	6454 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    643e:	ldr	r2, [sp, #4]
    6440:	ldrb	r3, [r2, #0]
    6442:	cmp	r3, #47	; 0x2f
    6444:	beq.n	64a0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6446:	ldr	r1, [r4, #32]
    6448:	add	r0, sp, #32
    644a:	bl	5446 <ExFatFile::openRoot(ExFatVolume*)>
    644e:	cmp	r0, #0
    6450:	beq.n	6426 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    6452:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6454:	add	r3, sp, #4
    6456:	add	r2, sp, #8
    6458:	ldr	r1, [sp, #4]
    645a:	mov	r0, r5
    645c:	bl	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6460:	cmp	r0, #0
    6462:	beq.n	6426 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6464:	ldr	r3, [sp, #4]
    6466:	ldrb	r3, [r3, #0]
    6468:	cbz	r3, 64bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    646a:	movs	r3, #0
    646c:	add	r2, sp, #8
    646e:	mov	r1, r4
    6470:	mov	r0, r5
    6472:	bl	577c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6476:	cbz	r0, 64a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    6478:	add	r6, sp, #32
    647a:	mov	r2, r5
    647c:	add.w	r3, r5, #48	; 0x30
    6480:	mov	r4, r6
    6482:	ldr	r0, [r2, #0]
    6484:	adds	r2, #8
    6486:	ldr.w	r1, [r2, #-4]
    648a:	mov	r7, r6
    648c:	cmp	r2, r3
    648e:	stmia	r7!, {r0, r1}
    6490:	mov	r6, r7
    6492:	bne.n	6482 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6494:	ldr	r0, [r2, #0]
    6496:	str	r0, [r7, #0]
    close();
    6498:	mov	r0, r5
    649a:	bl	5432 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    649e:	b.n	6454 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    64a0:	adds	r2, #1
    64a2:	str	r2, [sp, #4]
    64a4:	b.n	643e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    64a6:	cmp.w	r8, #0
    64aa:	beq.n	6426 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    64ac:	add	r2, sp, #8
    64ae:	mov	r1, r4
    64b0:	mov	r0, r5
    64b2:	bl	63c2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    64b6:	cmp	r0, #0
    64b8:	bne.n	6478 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    64ba:	b.n	6426 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    64bc:	add	r2, sp, #8
    64be:	mov	r1, r4
    64c0:	mov	r0, r5
    64c2:	bl	63c2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    64c6:	b.n	6428 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

000064c8 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    64c8:	push	{r4, r5, r6, r7, lr}
    64ca:	mov	r4, r0
    64cc:	sub	sp, #116	; 0x74
    64ce:	movs	r0, #0
    64d0:	str	r0, [sp, #48]	; 0x30
    64d2:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    64d4:	ldrb.w	r0, [r4, #49]	; 0x31
    64d8:	tst.w	r0, #24
    64dc:	bne.n	64e4 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    64de:	movs	r0, #0
}
    64e0:	add	sp, #116	; 0x74
    64e2:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    64e4:	ldr	r0, [r4, #32]
    64e6:	ldr	r3, [r1, #32]
    64e8:	cmp	r0, r3
    64ea:	bne.n	64de <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    64ec:	movw	r3, #2561	; 0xa01
    64f0:	mov	r0, sp
    64f2:	bl	5acc <ExFatFile::open(ExFatFile*, char const*, int)>
    64f6:	cmp	r0, #0
    64f8:	beq.n	64de <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    64fa:	add	r2, sp, #56	; 0x38
    64fc:	mov	r3, r4
    64fe:	add.w	r7, r4, #48	; 0x30
    6502:	mov	r6, r2
    6504:	ldr	r0, [r3, #0]
    6506:	adds	r3, #8
    6508:	ldr.w	r1, [r3, #-4]
    650c:	mov	r5, r2
    650e:	cmp	r3, r7
    6510:	stmia	r5!, {r0, r1}
    6512:	mov	r2, r5
    6514:	bne.n	6504 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6516:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6518:	add	r2, sp, #36	; 0x24
    651a:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    651e:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    6520:	ldmia	r2, {r0, r1, r2}
    6522:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6526:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    652a:	mov	r0, r4
  m_setCount = file.m_setCount;
    652c:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6530:	ldrb.w	r3, [r4, #51]	; 0x33
    6534:	orn	r3, r3, #127	; 0x7f
    6538:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    653c:	bl	62d0 <ExFatFile::sync()>
    6540:	cmp	r0, #0
    6542:	beq.n	64de <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6544:	movs	r3, #0
  return oldFile.remove();
    6546:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6548:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    654a:	movs	r3, #2
    654c:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6550:	movs	r3, #8
    6552:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6556:	bl	6110 <ExFatFile::remove()>
    655a:	b.n	64e0 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

0000655c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    655c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    655e:	ldrb.w	r2, [r0, #51]	; 0x33
    6562:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6564:	lsls	r3, r2, #30
    6566:	bmi.n	656e <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6568:	movs	r0, #0
}
    656a:	add	sp, #12
    656c:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    656e:	ldr	r3, [r0, #28]
    6570:	cmp	r3, #0
    6572:	beq.n	6622 <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6574:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    6578:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    657a:	beq.n	65ec <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    657c:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    657e:	ldrb.w	r5, [r0, #1093]	; 0x445
    6582:	ldrd	r2, r6, [r4, #8]
    6586:	adds	r5, #9
    6588:	subs	r2, #1
    658a:	uxtb	r5, r5
    658c:	adc.w	r6, r6, #4294967295
    6590:	rsb	ip, r5, #32
    6594:	sub.w	r7, r5, #32
    6598:	lsrs	r2, r5
    659a:	lsl.w	ip, r6, ip
    659e:	lsr.w	r7, r6, r7
    65a2:	orr.w	r2, r2, ip
    65a6:	orrs	r2, r7
    65a8:	adds	r2, #1
    if (m_curCluster) {
    65aa:	cbz	r1, 65d8 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    65ac:	subs	r3, #1
      toFree = m_curCluster + 1;
    65ae:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    65b0:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    65b2:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    65b4:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    65b6:	cbnz	r2, 65de <ExFatFile::truncate()+0x82>
  return sync();
    65b8:	mov	r0, r4
  m_dataLength = m_curPosition;
    65ba:	ldrd	r2, r3, [r4]
    65be:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    65c2:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    65c6:	ldrb.w	r3, [r4, #51]	; 0x33
    65ca:	orn	r3, r3, #127	; 0x7f
    65ce:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    65d2:	bl	62d0 <ExFatFile::sync()>
    65d6:	b.n	656a <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    65d8:	str	r3, [sp, #4]
      m_firstCluster = 0;
    65da:	str	r1, [r4, #28]
    65dc:	b.n	65b6 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    65de:	movs	r3, #0
    65e0:	ldr	r1, [sp, #4]
    65e2:	bl	5c74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    65e6:	cmp	r0, #0
    65e8:	bne.n	65b8 <ExFatFile::truncate()+0x5c>
    65ea:	b.n	6568 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    65ec:	cbz	r1, 661c <ExFatFile::truncate()+0xc0>
      toFree = 0;
    65ee:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    65f0:	add	r2, sp, #4
    65f2:	ldr	r0, [r0, #32]
    65f4:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    65f8:	cmp	r0, #0
    65fa:	blt.n	6568 <ExFatFile::truncate()+0xc>
      if (fg) {
    65fc:	beq.n	660e <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    65fe:	mov.w	r2, #4294967295
    6602:	ldr	r1, [r4, #24]
    6604:	ldr	r0, [r4, #32]
    6606:	bl	5dee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    660a:	cmp	r0, #0
    660c:	beq.n	6568 <ExFatFile::truncate()+0xc>
    if (toFree) {
    660e:	ldr	r1, [sp, #4]
    6610:	cmp	r1, #0
    6612:	beq.n	65b8 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6614:	ldr	r0, [r4, #32]
    6616:	bl	5e28 <ExFatPartition::freeChain(unsigned long)>
    661a:	b.n	65e6 <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    661c:	str	r3, [sp, #4]
      m_firstCluster = 0;
    661e:	str	r1, [r0, #28]
    6620:	b.n	660e <ExFatFile::truncate()+0xb2>
      return true;
    6622:	movs	r0, #1
    6624:	b.n	656a <ExFatFile::truncate()+0xe>
	...

00006628 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6628:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    662c:	ldrb.w	r3, [r0, #51]	; 0x33
    6630:	mov	r8, r1
    6632:	mov	r4, r0
    6634:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6636:	lsls	r1, r3, #30
    6638:	bpl.n	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    663a:	lsls	r2, r3, #28
    663c:	bmi.n	666c <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    663e:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6640:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6644:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6648:	ldrd	r5, r3, [r4]
  while (toWrite) {
    664c:	cbnz	r7, 668a <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    664e:	ldrd	r1, r2, [r4, #8]
    6652:	cmp	r1, r5
    6654:	sbcs	r2, r3
    6656:	bcs.w	681c <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    665a:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    665e:	ldrb.w	r3, [r4, #51]	; 0x33
    6662:	orn	r3, r3, #127	; 0x7f
    6666:	strb.w	r3, [r4, #51]	; 0x33
    666a:	b.n	6826 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    666c:	ldrd	r2, r3, [r0, #16]
    6670:	bl	569c <ExFatFile::seekSet(unsigned long long)>
    6674:	cmp	r0, #0
    6676:	bne.n	663e <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6678:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    667c:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    6680:	orr.w	r3, r3, #1
    6684:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6688:	b.n	6826 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    668a:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    668c:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    668e:	ldr.w	r3, [r0, #1080]	; 0x438
    6692:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6694:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6698:	cbnz	r5, 66e4 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    669a:	cmp	r1, #0
    669c:	beq.n	674a <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    669e:	ldrb.w	r3, [r4, #51]	; 0x33
    66a2:	lsls	r3, r3, #25
    66a4:	bpl.n	673c <ExFatFile::write(void const*, unsigned int)+0x114>
    66a6:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    66aa:	ldrd	r3, r2, [r4, #8]
    66ae:	adds	r0, #9
    66b0:	subs	r3, #1
    66b2:	uxtb	r0, r0
    66b4:	adc.w	r2, r2, #4294967295
    66b8:	rsb	lr, r0, #32
    66bc:	sub.w	ip, r0, #32
    66c0:	lsrs	r3, r0
    66c2:	lsl.w	lr, r2, lr
    66c6:	lsr.w	ip, r2, ip
    66ca:	ldr	r2, [r4, #28]
    66cc:	orr.w	r3, r3, lr
    66d0:	orr.w	r3, r3, ip
    66d4:	add	r3, r2
          if (m_curCluster < lc) {
    66d6:	cmp	r3, r1
    66d8:	bhi.n	6736 <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    66da:	mov	r0, r4
    66dc:	bl	607c <ExFatFile::addCluster()>
    66e0:	cmp	r0, #0
    66e2:	beq.n	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    66e4:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    66e8:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    66ea:	ldr	r1, [r4, #24]
    66ec:	ldrb.w	r2, [ip, #1093]	; 0x445
    66f0:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    66f2:	ldr.w	r0, [ip, #1068]	; 0x42c
    66f6:	lsls	r1, r2
    66f8:	add.w	r1, r1, r5, lsr #9
    66fc:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    66fe:	cbnz	r6, 6762 <ExFatFile::write(void const*, unsigned int)+0x13a>
    6700:	cmp.w	r7, #512	; 0x200
    6704:	bcc.n	6762 <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6706:	cmp.w	r7, #1024	; 0x400
    670a:	ldr.w	lr, [ip, #540]	; 0x21c
    670e:	ldr.w	r0, [ip, #532]	; 0x214
    6712:	bcs.n	67ea <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    6714:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    6716:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    6718:	ittt	eq
    671a:	moveq.w	r3, #4294967295
    m_status = 0;
    671e:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6722:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    6726:	ldr	r3, [r0, #0]
    6728:	ldr	r3, [r3, #36]	; 0x24
    672a:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    672c:	cmp	r0, #0
    672e:	beq.n	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    6730:	mov.w	r5, #512	; 0x200
    6734:	b.n	67b6 <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    6736:	adds	r1, #1
    6738:	str	r1, [r4, #24]
        if (fg == 0) {
    673a:	b.n	66e4 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    673c:	mov	r2, sl
    673e:	bl	5d48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6742:	cmp	r0, #0
    6744:	blt.n	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    6746:	beq.n	66da <ExFatFile::write(void const*, unsigned int)+0xb2>
    6748:	b.n	66e4 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    674a:	ldr	r3, [r4, #28]
    674c:	cbnz	r3, 675e <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    674e:	mov	r0, r4
    6750:	bl	607c <ExFatFile::addCluster()>
    6754:	cmp	r0, #0
    6756:	beq.n	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    6758:	ldr	r3, [r4, #24]
    675a:	str	r3, [r4, #28]
    675c:	b.n	66e4 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    675e:	str	r3, [r4, #24]
    6760:	b.n	66e4 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    6762:	rsb	r5, r6, #512	; 0x200
    6766:	cmp	r5, r7
    6768:	it	cs
    676a:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    676c:	cmp	r6, #0
    676e:	bne.n	67e6 <ExFatFile::write(void const*, unsigned int)+0x1be>
    6770:	ldr	r3, [r4, #20]
    6772:	ldr	r0, [r4, #0]
    6774:	str	r3, [sp, #4]
    6776:	ldr	r3, [r4, #16]
    6778:	ldr	r2, [r4, #4]
    677a:	cmp	r0, r3
    677c:	ldr	r3, [sp, #4]
    677e:	sbcs.w	r3, r2, r3
    6782:	bcc.n	67e6 <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6784:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    6786:	add.w	r0, ip, #528	; 0x210
    678a:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    678e:	cmp	r0, #0
    6790:	beq.w	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    6794:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6796:	add	r6, r5
      memcpy(dst, src, n);
    6798:	mov	r2, r5
    679a:	mov	r1, r8
    679c:	bl	9c60 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    67a0:	cmp.w	r6, #512	; 0x200
    67a4:	ldr	r0, [r4, #32]
    67a6:	bne.n	67b6 <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    67a8:	add.w	r0, r0, #528	; 0x210
    67ac:	bl	5114 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    67b0:	cmp	r0, #0
    67b2:	beq.w	6678 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    67b6:	add	r8, r5
    toWrite -= n;
    67b8:	subs	r7, r7, r5
    m_curPosition += n;
    67ba:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    67be:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    67c2:	adds	r3, r5, r3
    67c4:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    67c8:	cmp	r0, r3
    67ca:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    67cc:	itt	cc
    67ce:	ldrbcc.w	r1, [r4, #51]	; 0x33
    67d2:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    67d6:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    67da:	itt	cc
    67dc:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    67e0:	strdcc	r3, r2, [r4, #16]
    67e4:	b.n	6648 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    67e6:	movs	r2, #1
    67e8:	b.n	6786 <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    67ea:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    67ee:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    67f0:	lsrs	r2, r7, #9
    67f2:	cmp	r3, r2
    67f4:	it	cs
    67f6:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    67f8:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    67fa:	mov.w	r5, r3, lsl #9
    67fe:	bhi.n	6812 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6800:	adds	r2, r1, r3
    6802:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6804:	ittt	hi
    6806:	movhi.w	r2, #4294967295
    m_status = 0;
    680a:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    680e:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6812:	ldr	r2, [r0, #0]
    6814:	ldr	r6, [r2, #40]	; 0x28
    6816:	mov	r2, r8
    6818:	blx	r6
    681a:	b.n	67b0 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    681c:	ldr	r3, [pc, #16]	; (6830 <ExFatFile::write(void const*, unsigned int)+0x208>)
    681e:	ldr	r3, [r3, #0]
    6820:	cmp	r3, #0
    6822:	bne.w	665e <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6826:	mov	r0, r9
    6828:	add	sp, #12
    682a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    682e:	nop
    6830:	.word	0x200271fc

00006834 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6834:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6836:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6838:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    683a:	bl	6d26 <FatFile::seekSet(unsigned long)>
    683e:	cbz	r0, 684c <FatFile::cacheDir(unsigned short)+0x18>
    6840:	mov	r0, r4
    6842:	movs	r1, #0
  }
    6844:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6848:	b.w	6ce8 <FatFile::readDirCache(bool)>
  }
    684c:	pop	{r4, pc}

0000684e <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    684e:	cmp	r2, #4
    6850:	bhi.n	685c <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6852:	add.w	r2, r1, r2, lsl #1
    6856:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    685a:	bx	lr
  } else if (i < 11) {
    685c:	cmp	r2, #10
    685e:	bhi.n	6868 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6860:	add.w	r2, r1, r2, lsl #1
    6864:	ldrh	r0, [r2, #4]
    6866:	bx	lr
  } else if (i < 13) {
    6868:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    686a:	itte	ls
    686c:	addls.w	r2, r1, r2, lsl #1
    6870:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6872:	movhi	r0, #0
}
    6874:	bx	lr

00006876 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6876:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6878:	ldrb	r4, [r0, #0]
    687a:	mov	r5, r1
    687c:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    687e:	cbz	r4, 68f0 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6880:	ands.w	r4, r4, #96	; 0x60
    6884:	beq.n	6896 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6886:	cmp	r2, #1
    6888:	bls.n	68f0 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    688a:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    688c:	movs	r0, #1
    name[0] = '/';
    688e:	strb	r3, [r1, #0]
    name[1] = '\0';
    6890:	movs	r3, #0
    6892:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6894:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6896:	mov	r1, r4
    6898:	bl	6ae4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    689c:	cbz	r0, 68f0 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    689e:	mov	r6, r0
    68a0:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    68a2:	movs	r2, #8
    if (i == 8) {
    68a4:	cmp	r1, #8
      if (*ptr == ' ') {
    68a6:	ldrb	r3, [r6, #0]
    if (i == 8) {
    68a8:	bne.n	68c2 <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    68aa:	cmp	r3, #32
    68ac:	beq.n	68e8 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    68ae:	movs	r2, #16
      c = '.';
    68b0:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    68b2:	mov	ip, r4
    68b4:	adds	r4, #1
    68b6:	cmp	r4, r7
    68b8:	bcs.n	68f0 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    68ba:	uxtb	r4, r4
    68bc:	strb.w	r3, [r5, ip]
    68c0:	b.n	68e2 <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    68c2:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    68c6:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    68c8:	cmp.w	ip, #25
    68cc:	bhi.n	68de <FatFile::getSFN(char*, unsigned int)+0x68>
    68ce:	ldrb.w	ip, [r0, #12]
    68d2:	tst.w	r2, ip
    68d6:	beq.n	68b2 <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    68d8:	adds	r3, #32
    68da:	uxtb	r3, r3
    68dc:	b.n	68b2 <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    68de:	cmp	r3, #32
    68e0:	bne.n	68b2 <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    68e2:	adds	r1, #1
    68e4:	cmp	r1, #12
    68e6:	bne.n	68a4 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    68e8:	movs	r3, #0
    68ea:	mov	r0, r4
    68ec:	strb	r3, [r5, r4]
  return j;
    68ee:	b.n	6894 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    68f0:	movs	r0, #0
    68f2:	strb	r0, [r5, #0]
  return 0;
    68f4:	b.n	6894 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

000068f8 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    68f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    68fc:	movs	r5, #0
    68fe:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6900:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6902:	mov	r6, r0
    6904:	mov	r8, r1
    6906:	mov	r7, r2
    6908:	str	r5, [sp, #4]
  if (!isOpen()) {
    690a:	cbz	r3, 6926 <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    690c:	ldrb	r3, [r0, #3]
    690e:	cbnz	r3, 691a <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6910:	bl	6876 <FatFile::getSFN(char*, unsigned int)>
}
    6914:	add	sp, #44	; 0x2c
    6916:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    691a:	mov	r1, r0
    691c:	add	r0, sp, #4
    691e:	bl	6b0e <FatFile::openCluster(FatFile*)>
    6922:	cmp	r0, #0
    6924:	bne.n	69d2 <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6926:	movs	r0, #0
    6928:	strb.w	r0, [r8]
  return 0;
    692c:	b.n	6914 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    692e:	ldrh	r1, [r6, #4]
    6930:	add	r0, sp, #4
    6932:	sub.w	r1, r1, r9
    6936:	uxth	r1, r1
    6938:	bl	6834 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    693c:	mov	sl, r0
    693e:	cmp	r0, #0
    6940:	beq.n	6926 <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6942:	ldrb	r3, [r0, #11]
    6944:	cmp	r3, #15
    6946:	bne.n	6926 <FatFile::getName8(char*, unsigned int)+0x2e>
    6948:	ldrb	r3, [r0, #0]
    694a:	and.w	r3, r3, #31
    694e:	cmp	fp, r3
    6950:	bne.n	6926 <FatFile::getName8(char*, unsigned int)+0x2e>
    6952:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6956:	uxtb.w	r2, fp
    695a:	mov	r1, sl
    695c:	mov	r0, r6
    695e:	bl	684e <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6962:	cbz	r5, 69ae <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6964:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6968:	uxth	r2, r2
    696a:	cmp.w	r2, #1024	; 0x400
    696e:	bcs.n	6926 <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6970:	ldr	r3, [pc, #108]	; (69e0 <FatFile::getName8(char*, unsigned int)+0xe8>)
    6972:	ubfx	r0, r0, #0, #10
    6976:	and.w	r5, r3, r5, lsl #10
    697a:	orrs	r0, r5
    697c:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6980:	mov	r1, r4
    6982:	mov	r2, r7
    6984:	bl	4ff8 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6988:	mov	r4, r0
    698a:	cmp	r0, #0
    698c:	beq.n	6926 <FatFile::getName8(char*, unsigned int)+0x2e>
    698e:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    6990:	add.w	fp, fp, #1
    6994:	cmp.w	fp, #13
    6998:	bne.n	6956 <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    699a:	add.w	r9, r9, #1
    699e:	uxth.w	r9, r9
    69a2:	uxtb.w	fp, r9
    69a6:	ldrb	r3, [r6, #3]
    69a8:	cmp	r3, fp
    69aa:	bcs.n	692e <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    69ac:	b.n	69be <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    69ae:	add.w	r2, r0, #10240	; 0x2800
    69b2:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    69b4:	cmp.w	r2, #2048	; 0x800
    69b8:	bcc.n	69c8 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    69ba:	cmp	r0, #0
    69bc:	bne.n	6980 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    69be:	movs	r3, #0
  return str - name;
    69c0:	sub.w	r0, r4, r8
  *str = '\0';
    69c4:	strb	r3, [r4, #0]
  return str - name;
    69c6:	b.n	6914 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    69c8:	cmp.w	r2, #1024	; 0x400
    69cc:	bcs.n	6926 <FatFile::getName8(char*, unsigned int)+0x2e>
    69ce:	mov	r5, r0
    69d0:	b.n	6990 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    69d2:	subs	r7, #1
  char* str = name;
    69d4:	mov	r4, r8
    69d6:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    69da:	add	r7, r8
    69dc:	b.n	69a2 <FatFile::getName8(char*, unsigned int)+0xaa>
    69de:	nop
    69e0:	.word	0x000ffc00

000069e4 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    69e4:	b.w	68f8 <FatFile::getName8(char*, unsigned int)>

000069e8 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    69e8:	push	{r3, r4, r5, lr}
    69ea:	mov	r5, r1
    69ec:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    69ee:	movs	r2, #36	; 0x24
    69f0:	movs	r1, #0
    69f2:	bl	9c1c <memset>

  m_vol = vol;
    69f6:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    69f8:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    69fa:	cmp	r3, #16
    69fc:	beq.n	6a06 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    69fe:	cmp	r3, #32
    6a00:	beq.n	6a10 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6a02:	cmp	r3, #12
    6a04:	bne.n	6a14 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6a06:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6a08:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6a0a:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6a0c:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6a0e:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6a10:	movs	r3, #64	; 0x40
    6a12:	b.n	6a08 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6a14:	movs	r0, #0
    6a16:	b.n	6a0e <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006a18 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6a18:	push	{r4, lr}
    6a1a:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6a1c:	adds	r0, #40	; 0x28
    6a1e:	bl	5114 <FsCache::sync()>
    6a22:	cbz	r0, 6a3a <FatPartition::cacheSync()+0x22>
    6a24:	add.w	r0, r4, #568	; 0x238
    6a28:	bl	5114 <FsCache::sync()>
    6a2c:	cbz	r0, 6a3a <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6a2e:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6a30:	ldr	r3, [r0, #0]
  }
    6a32:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6a36:	ldr	r3, [r3, #32]
    6a38:	bx	r3
  }
    6a3a:	movs	r0, #0
    6a3c:	pop	{r4, pc}

00006a3e <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6a3e:	mov	r2, r0
bool FatFile::addCluster() {
    6a40:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6a42:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6a46:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6a48:	ldr	r0, [r0, #8]
    6a4a:	mov	r1, r5
    6a4c:	bl	7778 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6a50:	cbz	r0, 6a64 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6a52:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6a54:	cbnz	r5, 6a66 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6a56:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6a5a:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6a5c:	ldrb	r3, [r4, #2]
    6a5e:	orn	r3, r3, #127	; 0x7f
    6a62:	strb	r3, [r4, #2]
}
    6a64:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6a66:	adds	r5, #1
    6a68:	ldr	r2, [r4, #16]
    6a6a:	cmp	r2, r5
    6a6c:	beq.n	6a5c <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6a6e:	bic.w	r3, r3, #64	; 0x40
    6a72:	b.n	6a5a <FatFile::addCluster()+0x1c>

00006a74 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6a74:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6a76:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6a78:	mov	r4, r0
  if (isRootFixed()) {
    6a7a:	ands.w	r5, r5, #32
    6a7e:	beq.n	6a86 <FatFile::addDirCluster()+0x12>
  return false;
    6a80:	movs	r6, #0
}
    6a82:	mov	r0, r6
    6a84:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    6a86:	ldr	r2, [r0, #20]
    6a88:	ldr	r3, [pc, #84]	; (6ae0 <FatFile::addDirCluster()+0x6c>)
    6a8a:	cmp	r2, r3
    6a8c:	bcs.n	6a80 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    6a8e:	bl	6a3e <FatFile::addCluster()>
    6a92:	mov	r6, r0
    6a94:	cmp	r0, #0
    6a96:	beq.n	6a80 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    6a98:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6a9a:	ldr	r3, [r4, #16]
    6a9c:	ldrb	r1, [r2, #6]
    6a9e:	subs	r3, #2
    6aa0:	ldr	r7, [r2, #20]
    6aa2:	lsls	r3, r1
    6aa4:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6aa6:	ldr	r0, [r4, #8]
    6aa8:	uxtb	r1, r5
    6aaa:	ldrb	r3, [r0, #4]
    6aac:	cmp	r3, r1
    6aae:	bhi.n	6ac2 <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    6ab0:	ldrb	r2, [r0, #6]
    6ab2:	mov.w	r3, #512	; 0x200
    6ab6:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    6ab8:	ldr	r2, [r4, #20]
    6aba:	uxtah	r3, r2, r3
    6abe:	str	r3, [r4, #20]
  return true;
    6ac0:	b.n	6a82 <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    6ac2:	movs	r2, #5
    6ac4:	add	r1, r7
    6ac6:	adds	r0, #40	; 0x28
    if (!pc) {
    6ac8:	adds	r5, #1
    6aca:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
    6ace:	cmp	r0, #0
    6ad0:	beq.n	6a80 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    6ad2:	mov.w	r2, #512	; 0x200
    6ad6:	movs	r1, #0
    6ad8:	bl	9c1c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6adc:	b.n	6aa6 <FatFile::addDirCluster()+0x32>
    6ade:	nop
    6ae0:	.word	0x001ffe00

00006ae4 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    6ae4:	push	{r4, lr}
    6ae6:	mov	r4, r0
    6ae8:	ldr	r0, [r0, #8]
    6aea:	mov	r2, r1
    6aec:	adds	r0, #40	; 0x28
    6aee:	ldr	r1, [r4, #24]
    6af0:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6af4:	cbz	r0, 6b00 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    6af6:	ldrh	r3, [r4, #4]
    6af8:	and.w	r3, r3, #15
    6afc:	add.w	r0, r0, r3, lsl #5
}
    6b00:	pop	{r4, pc}

00006b02 <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    6b02:	ldrb	r3, [r0, #0]
    6b04:	cbnz	r3, 6b0a <FatFile::openRoot(FatVolume*)+0x8>
    6b06:	b.w	69e8 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    6b0a:	movs	r0, #0
    6b0c:	bx	lr

00006b0e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    6b0e:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6b10:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6b12:	mov	r4, r0
    6b14:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    6b16:	cbnz	r3, 6b22 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    6b18:	ldr	r1, [r1, #8]
}
    6b1a:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    6b1e:	b.w	6b02 <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    6b22:	movs	r2, #36	; 0x24
    6b24:	movs	r1, #0
    6b26:	bl	9c1c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6b2a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6b2c:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6b2e:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6b30:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    6b32:	ldr	r3, [r5, #8]
    6b34:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6b36:	ldr	r3, [r5, #12]
    6b38:	str	r3, [r4, #32]
}
    6b3a:	pop	{r3, r4, r5, pc}

00006b3c <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    6b3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b40:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6b44:	ldrb	r3, [r0, #2]
    6b46:	mov	r4, r0
    6b48:	sub	sp, #12
    6b4a:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6b4c:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    6b4e:	mov	r5, r2
  if (!isReadable()) {
    6b50:	bpl.n	6c36 <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    6b52:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    6b54:	lsls	r1, r3, #28
    6b56:	bpl.n	6b80 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6b58:	ldr	r3, [r4, #28]
    6b5a:	ldr	r2, [r4, #20]
    6b5c:	subs	r3, r3, r2
    6b5e:	cmp	r5, r3
    6b60:	it	cs
    6b62:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6b64:	add.w	r3, r4, #16
  toRead = nbyte;
    6b68:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    6b6a:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6b6e:	vmov	s16, r3
  while (toRead) {
    6b72:	cbnz	r6, 6b92 <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    6b74:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6b76:	add	sp, #12
    6b78:	vpop	{d8}
    6b7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    6b80:	lsls	r2, r3, #26
    6b82:	bpl.n	6b64 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    6b84:	ldr	r3, [r4, #8]
    6b86:	ldrh	r2, [r3, #10]
    6b88:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    6b8a:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    6b8e:	uxth	r3, r3
    6b90:	b.n	6b5e <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    6b92:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6b94:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    6b96:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6b98:	ldr	r0, [r4, #8]
    6b9a:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    6b9e:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    6ba2:	bpl.n	6bdc <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    6ba4:	ldr	r2, [r0, #32]
    6ba6:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6ba8:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    6bac:	cmp.w	fp, #0
    6bb0:	bne.n	6c44 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6bb2:	cmp.w	r6, #512	; 0x200
    6bb6:	bcc.n	6c44 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    6bb8:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    6bbc:	cmp	r1, r2
    6bbe:	beq.n	6c44 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6bc0:	cmp.w	r6, #1024	; 0x400
    6bc4:	bcs.n	6c74 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    6bc6:	ldr.w	r0, [sl, #44]	; 0x2c
    6bca:	mov	r2, r8
    6bcc:	ldr	r3, [r0, #0]
    6bce:	ldr	r3, [r3, #16]
    6bd0:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    6bd2:	cmp	r0, #0
    6bd4:	beq.n	6c36 <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    6bd6:	mov.w	r7, #512	; 0x200
    6bda:	b.n	6c68 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    6bdc:	ldrb.w	r9, [r0, #5]
    6be0:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    6be4:	cmp.w	fp, #0
    6be8:	bne.n	6bfc <FatFile::read(void*, unsigned int)+0xc0>
    6bea:	cmp.w	r9, #0
    6bee:	bne.n	6bfc <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    6bf0:	cbnz	r7, 6c0e <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6bf2:	lsls	r2, r2, #25
    return m_rootDirStart;
    6bf4:	ite	mi
    6bf6:	ldrmi	r2, [r0, #32]
    6bf8:	ldrpl	r2, [r4, #32]
    6bfa:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6bfc:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6bfe:	ldr	r1, [r4, #16]
    6c00:	ldrb	r0, [r2, #6]
    6c02:	subs	r1, #2
    6c04:	ldr	r2, [r2, #20]
    6c06:	lsls	r1, r0
    6c08:	add	r1, r2
    6c0a:	add	r1, r9
    6c0c:	b.n	6ba8 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    6c0e:	lsls	r3, r2, #28
          m_curCluster++;
    6c10:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    6c12:	bpl.n	6c20 <FatFile::read(void*, unsigned int)+0xe4>
    6c14:	ldrb	r2, [r4, #2]
    6c16:	lsls	r7, r2, #25
    6c18:	bpl.n	6c20 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    6c1a:	adds	r1, #1
    6c1c:	str	r1, [r4, #16]
    6c1e:	b.n	6bfc <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c20:	vmov	r2, s16
    6c24:	bl	75ea <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6c28:	cmp	r0, #0
    6c2a:	blt.n	6c36 <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    6c2c:	bne.n	6bfc <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    6c2e:	ldrb	r3, [r4, #0]
    6c30:	tst.w	r3, #112	; 0x70
    6c34:	bne.n	6b74 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    6c36:	ldrb	r3, [r4, #1]
  return -1;
    6c38:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6c3c:	orr.w	r3, r3, #2
    6c40:	strb	r3, [r4, #1]
  return -1;
    6c42:	b.n	6b76 <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    6c44:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    6c48:	movs	r2, #0
    6c4a:	add.w	r0, sl, #40	; 0x28
    6c4e:	cmp	r7, r6
    6c50:	it	cs
    6c52:	movcs	r7, r6
    6c54:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6c58:	cmp	r0, #0
    6c5a:	beq.n	6c36 <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6c5c:	add.w	r1, r0, fp
    6c60:	mov	r2, r7
    6c62:	mov	r0, r8
    6c64:	bl	9c60 <memcpy>
    m_curPosition += n;
    6c68:	ldr	r3, [r4, #20]
    dst += n;
    6c6a:	add	r8, r7
    toRead -= n;
    6c6c:	subs	r6, r6, r7
    m_curPosition += n;
    6c6e:	add	r3, r7
    6c70:	str	r3, [r4, #20]
    toRead -= n;
    6c72:	b.n	6b72 <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    6c74:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6c76:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6c78:	lsls	r0, r0, #26
    6c7a:	bmi.n	6c8a <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6c7c:	ldrb.w	r0, [sl, #4]
    6c80:	sub.w	r0, r0, r9
    6c84:	cmp	r3, r0
    6c86:	it	cs
    6c88:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6c8a:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6c8c:	mov.w	r7, r3, lsl #9
    6c90:	bls.n	6ca6 <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    6c92:	ldr.w	r0, [sl, #44]	; 0x2c
    6c96:	ldr	r2, [r0, #0]
    6c98:	ldr.w	sl, [r2, #20]
    6c9c:	mov	r2, r8
    6c9e:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6ca0:	cmp	r0, #0
    6ca2:	bne.n	6c68 <FatFile::read(void*, unsigned int)+0x12c>
    6ca4:	b.n	6c36 <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    6ca6:	adds	r0, r1, r3
    6ca8:	cmp	r2, r0
    6caa:	bcs.n	6c92 <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    6cac:	add.w	r0, sl, #40	; 0x28
    6cb0:	strd	r1, r3, [sp]
    6cb4:	bl	5114 <FsCache::sync()>
    6cb8:	ldrd	r1, r3, [sp]
    6cbc:	cmp	r0, #0
    6cbe:	bne.n	6c92 <FatFile::read(void*, unsigned int)+0x156>
    6cc0:	b.n	6c36 <FatFile::read(void*, unsigned int)+0xfa>

00006cc2 <FatFile::peek()>:
int FatFile::peek() {
    6cc2:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    6cc4:	movs	r2, #1
    6cc6:	add.w	r1, sp, #7
    6cca:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6ccc:	ldrd	r5, r6, [r0, #16]
    6cd0:	bl	6b3c <FatFile::read(void*, unsigned int)>
    6cd4:	cmp	r0, #1
    6cd6:	ite	eq
    6cd8:	ldrbeq.w	r0, [sp, #7]
    6cdc:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    6ce0:	strd	r5, r6, [r4, #16]
}
    6ce4:	add	sp, #8
    6ce6:	pop	{r4, r5, r6, pc}

00006ce8 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6ce8:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    6cea:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6cee:	push	{r0, r1, r2, r4, r5, lr}
    6cf0:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6cf2:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    6cf6:	beq.n	6cfa <FatFile::readDirCache(bool)+0x12>
    6cf8:	cbnz	r1, 6d22 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    6cfa:	movs	r2, #1
    6cfc:	add.w	r1, sp, #7
    6d00:	mov	r0, r4
    6d02:	bl	6b3c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    6d06:	sxtb	r0, r0
    6d08:	cmp	r0, #1
    6d0a:	beq.n	6d12 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    6d0c:	movs	r0, #0
}
    6d0e:	add	sp, #12
    6d10:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    6d12:	ldr	r3, [r4, #20]
    6d14:	adds	r3, #31
    return m_buffer;
    6d16:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    6d18:	str	r3, [r4, #20]
    6d1a:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6d1c:	add.w	r0, r0, r5, lsl #5
    6d20:	b.n	6d0e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    6d22:	adds	r3, #32
    6d24:	b.n	6d16 <FatFile::readDirCache(bool)+0x2e>

00006d26 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6d26:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d2a:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    6d2c:	ldrb	r1, [r0, #0]
    6d2e:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6d30:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    6d32:	cbz	r1, 6d56 <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6d34:	ldr	r0, [r0, #20]
    6d36:	cmp	r0, r5
    6d38:	beq.n	6d48 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    6d3a:	cbnz	r5, 6d4c <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    6d3c:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6d3e:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    6d40:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6d42:	bic.w	r3, r3, #32
    6d46:	strb	r3, [r4, #2]
    return true;
    6d48:	movs	r0, #1
    6d4a:	b.n	6d5a <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    6d4c:	lsls	r3, r1, #28
    6d4e:	bpl.n	6d5e <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    6d50:	ldr	r3, [r4, #28]
    6d52:	cmp	r3, r5
    6d54:	bcs.n	6d6e <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    6d56:	movs	r0, #0
  m_curCluster = tmp;
    6d58:	str	r7, [r4, #16]
}
    6d5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    6d5e:	lsls	r6, r1, #26
    6d60:	bpl.n	6d6e <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    6d62:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    6d64:	ldrh	r3, [r3, #10]
    6d66:	cmp.w	r5, r3, lsl #5
    6d6a:	bhi.n	6d56 <FatFile::seekSet(unsigned long)+0x30>
    6d6c:	b.n	6d3e <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6d6e:	ldr.w	ip, [r4, #8]
    6d72:	subs	r6, r5, #1
  if (isContiguous()) {
    6d74:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6d76:	ldrb.w	r3, [ip, #6]
    6d7a:	lsls	r2, r2, #25
    6d7c:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6d80:	uxtb	r3, r3
    6d82:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    6d86:	bpl.n	6d90 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    6d88:	ldr	r3, [r4, #32]
    6d8a:	add	r3, r6
    6d8c:	str	r3, [r4, #16]
    goto done;
    6d8e:	b.n	6d3e <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6d90:	subs	r2, r0, #1
    6d92:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    6d96:	cmp	r6, r3
    6d98:	bcc.n	6d9c <FatFile::seekSet(unsigned long)+0x76>
    6d9a:	cbnz	r0, 6dc2 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6d9c:	lsls	r3, r1, #25
    return m_rootDirStart;
    6d9e:	ite	mi
    6da0:	ldrmi.w	r3, [ip, #32]
    6da4:	ldrpl	r3, [r4, #32]
    6da6:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6da8:	add.w	r8, r4, #16
  while (nNew--) {
    6dac:	cmp	r6, #0
    6dae:	beq.n	6d3e <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6db0:	mov	r2, r8
    6db2:	ldr	r1, [r4, #16]
    6db4:	ldr	r0, [r4, #8]
    6db6:	subs	r6, #1
    6db8:	bl	75ea <FatPartition::fatGet(unsigned long, unsigned long*)>
    6dbc:	cmp	r0, #0
    6dbe:	bgt.n	6dac <FatFile::seekSet(unsigned long)+0x86>
    6dc0:	b.n	6d56 <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    6dc2:	subs	r6, r6, r3
    6dc4:	b.n	6da8 <FatFile::seekSet(unsigned long)+0x82>

00006dc6 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    6dc6:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6dc8:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    6dca:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6dcc:	lsls	r2, r3, #27
    6dce:	bpl.n	6de4 <FatFile::rmdir()+0x1e>
    seekSet(0);
    6dd0:	movs	r1, #0
    6dd2:	bl	6d26 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    6dd6:	movs	r1, #1
    6dd8:	mov	r0, r4
    6dda:	bl	6ce8 <FatFile::readDirCache(bool)>
    if (!dir) {
    6dde:	cbnz	r0, 6de8 <FatFile::rmdir()+0x22>
      if (!getError()) {
    6de0:	ldrb	r3, [r4, #1]
    6de2:	cbz	r3, 6dfc <FatFile::rmdir()+0x36>
}
    6de4:	movs	r0, #0
    6de6:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    6de8:	ldrb	r3, [r0, #0]
    6dea:	cbz	r3, 6dfc <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6dec:	cmp	r3, #229	; 0xe5
    6dee:	beq.n	6dd6 <FatFile::rmdir()+0x10>
    6df0:	cmp	r3, #46	; 0x2e
    6df2:	beq.n	6dd6 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    6df4:	ldrb	r3, [r0, #11]
    6df6:	lsls	r3, r3, #28
    6df8:	bmi.n	6dd6 <FatFile::rmdir()+0x10>
    6dfa:	b.n	6de4 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    6dfc:	movs	r3, #8
  return remove();
    6dfe:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6e00:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6e02:	ldrb	r3, [r4, #2]
    6e04:	orr.w	r3, r3, #2
    6e08:	strb	r3, [r4, #2]
}
    6e0a:	ldmia.w	sp!, {r4, lr}
  return remove();
    6e0e:	b.w	80a4 <FatFile::remove()>

00006e12 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6e12:	push	{r3, r4, r5, r6, r7, lr}
    6e14:	mov	r7, r1
    6e16:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    6e18:	movs	r1, #0
    6e1a:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6e1c:	mov	r4, r0
    6e1e:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    6e20:	bl	9c1c <memset>
  m_vol = dirFile->m_vol;
    6e24:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    6e26:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    6e28:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    6e2a:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    6e2e:	str	r3, [r4, #12]
    6e30:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    6e34:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    6e36:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6e3a:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    6e3c:	lsls	r1, r2, #28
    6e3e:	bmi.n	6eb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    6e40:	and.w	r2, r2, #23
    6e44:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    6e46:	ldrb	r1, [r3, #11]
    6e48:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    6e4c:	itt	eq
    6e4e:	orreq.w	r2, r2, #8
    6e52:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    6e54:	ldrb.w	r2, [sp, #24]
    6e58:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6e5a:	and.w	r2, r5, #3
    6e5e:	cmp	r2, #1
    6e60:	beq.n	6ea6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    6e62:	cmp	r2, #2
    6e64:	beq.n	6eaa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    6e66:	cbnz	r2, 6eb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    6e68:	lsls	r2, r5, #21
    6e6a:	bmi.n	6eb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    6e6c:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    6e6e:	lsls	r7, r2, #30
    6e70:	bpl.n	6e7c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    6e72:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    6e74:	lsls	r6, r1, #27
    6e76:	bmi.n	6eb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    6e78:	lsls	r1, r1, #31
    6e7a:	bmi.n	6eb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6e7c:	and.w	r1, r5, #8
    6e80:	orrs	r2, r1
    6e82:	strb	r2, [r4, #2]
    return m_sector;
    6e84:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    6e86:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    6e88:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    6e8a:	ldrh	r2, [r3, #20]
    6e8c:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    6e90:	lsls	r2, r5, #21
    6e92:	bpl.n	6ebe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6e94:	cbnz	r1, 6eae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6e96:	ldrb	r3, [r4, #2]
    6e98:	orn	r3, r3, #127	; 0x7f
    6e9c:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6e9e:	lsls	r3, r5, #17
    6ea0:	bmi.n	6ec6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    6ea2:	movs	r0, #1
}
    6ea4:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    6ea6:	movs	r2, #2
    6ea8:	b.n	6e6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    6eaa:	movs	r2, #3
    6eac:	b.n	6e6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6eae:	bl	77fa <FatPartition::freeChain(unsigned long)>
    6eb2:	cmp	r0, #0
    6eb4:	bne.n	6e96 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    6eb6:	movs	r0, #0
    6eb8:	strb	r0, [r4, #0]
  m_flags = 0;
    6eba:	strb	r0, [r4, #2]
  return false;
    6ebc:	b.n	6ea4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    6ebe:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    6ec0:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    6ec2:	str	r3, [r4, #28]
    6ec4:	b.n	6e9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6ec6:	ldr	r1, [r4, #28]
    6ec8:	mov	r0, r4
    6eca:	bl	6d26 <FatFile::seekSet(unsigned long)>
    6ece:	cmp	r0, #0
    6ed0:	bne.n	6ea2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    6ed2:	b.n	6eb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00006ed4 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6ed4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ed8:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    6eda:	ldrb	r2, [r0, #0]
    6edc:	sub	sp, #20
    6ede:	mov	r7, r0
    6ee0:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6ee2:	cmp	r2, #0
    6ee4:	bne.n	6f6c <FatFile::openNext(FatFile*, int)+0x98>
    6ee6:	ldrb	r2, [r1, #0]
    6ee8:	tst.w	r2, #112	; 0x70
    6eec:	beq.n	6f6c <FatFile::openNext(FatFile*, int)+0x98>
    6eee:	ldr	r4, [r1, #20]
    6ef0:	ands.w	r4, r4, #31
    6ef4:	bne.n	6f6c <FatFile::openNext(FatFile*, int)+0x98>
    6ef6:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    6ef8:	movs	r1, #0
    6efa:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    6efc:	ldr.w	r8, [r6, #20]
    6f00:	str	r3, [sp, #12]
    6f02:	bl	6ce8 <FatFile::readDirCache(bool)>
    if (!dir) {
    6f06:	cbz	r0, 6f6c <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    6f08:	ldrb	r1, [r0, #0]
    6f0a:	cbz	r1, 6f6c <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6f0c:	cmp	r1, #46	; 0x2e
    6f0e:	ldr	r3, [sp, #12]
    6f10:	beq.n	6f56 <FatFile::openNext(FatFile*, int)+0x82>
    6f12:	cmp	r1, #229	; 0xe5
    6f14:	beq.n	6f56 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6f16:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    6f18:	ands.w	ip, r2, #8
    6f1c:	bne.n	6f5a <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6f1e:	cbz	r4, 6f42 <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6f20:	subs	r1, r0, #1
    6f22:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6f26:	mov.w	r2, ip, lsl #7
    6f2a:	ldrb.w	r0, [r1, #1]!
    6f2e:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6f32:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6f34:	uxtab	r2, r0, r2
    6f38:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    6f3c:	bne.n	6f26 <FatFile::openNext(FatFile*, int)+0x52>
    6f3e:	cmp	r9, ip
    6f40:	bne.n	6f6c <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6f42:	ubfx	r2, r8, #5, #16
    6f46:	mov	r1, r6
    6f48:	mov	r0, r7
    6f4a:	str	r4, [sp, #0]
    6f4c:	bl	6e12 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    6f50:	add	sp, #20
    6f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    6f56:	movs	r4, #0
    6f58:	b.n	6ef8 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    6f5a:	cmp	r2, #15
    6f5c:	bne.n	6f56 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6f5e:	lsls	r2, r1, #25
    6f60:	bpl.n	6ef8 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6f62:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    6f66:	ldrb.w	r9, [r0, #13]
    6f6a:	b.n	6ef8 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6f6c:	movs	r0, #0
    6f6e:	b.n	6f50 <FatFile::openNext(FatFile*, int)+0x7c>

00006f70 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    6f70:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6f72:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    6f74:	mov	r4, r0
  if (!isOpen()) {
    6f76:	cmp	r3, #0
    6f78:	beq.n	6fe6 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6f7a:	ldrsb.w	r3, [r0, #2]
    6f7e:	cmp	r3, #0
    6f80:	bge.n	6fda <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6f82:	movs	r1, #1
    6f84:	bl	6ae4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    6f88:	mov	r5, r0
    6f8a:	cbnz	r0, 6f9a <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    6f8c:	ldrb	r3, [r4, #1]
  return false;
    6f8e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6f90:	orr.w	r3, r3, #1
    6f94:	strb	r3, [r4, #1]
}
    6f96:	add	sp, #12
    6f98:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    6f9a:	ldrb	r3, [r0, #0]
    6f9c:	cmp	r3, #229	; 0xe5
    6f9e:	beq.n	6f8c <FatFile::sync()+0x1c>
    if (isFile()) {
    6fa0:	ldrb	r3, [r4, #0]
    6fa2:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    6fa4:	itt	mi
    6fa6:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6fa8:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    6faa:	ldr	r3, [r4, #32]
    6fac:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    6fae:	lsrs	r3, r3, #16
    6fb0:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    6fb2:	ldr	r3, [pc, #56]	; (6fec <FatFile::sync()+0x7c>)
    6fb4:	ldr	r3, [r3, #0]
    6fb6:	cbz	r3, 6fd2 <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    6fb8:	add.w	r2, sp, #3
    6fbc:	add.w	r1, sp, #6
    6fc0:	add	r0, sp, #4
    6fc2:	blx	r3
      setLe16(dir->modifyDate, date);
    6fc4:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6fc8:	strh	r3, [r5, #24]
    6fca:	strh	r3, [r5, #18]
    6fcc:	ldrh.w	r3, [sp, #6]
    6fd0:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6fd2:	ldrb	r3, [r4, #2]
    6fd4:	and.w	r3, r3, #127	; 0x7f
    6fd8:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    6fda:	ldr	r0, [r4, #8]
    6fdc:	bl	6a18 <FatPartition::cacheSync()>
    6fe0:	cmp	r0, #0
    6fe2:	beq.n	6f8c <FatFile::sync()+0x1c>
    6fe4:	b.n	6f96 <FatFile::sync()+0x26>
    return true;
    6fe6:	movs	r0, #1
    6fe8:	b.n	6f96 <FatFile::sync()+0x26>
    6fea:	nop
    6fec:	.word	0x200271fc

00006ff0 <FatFile::close()>:
bool FatFile::close() {
    6ff0:	push	{r4, lr}
    6ff2:	mov	r4, r0
  bool rtn = sync();
    6ff4:	bl	6f70 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6ff8:	movs	r3, #0
    6ffa:	strb	r3, [r4, #0]
  m_flags = 0;
    6ffc:	strb	r3, [r4, #2]
}
    6ffe:	pop	{r4, pc}

00007000 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7000:	push	{r4, r5, r6, r7, lr}
    7002:	mov	r7, r3
    7004:	sub	sp, #84	; 0x54
  FatFile() {}
    7006:	movs	r3, #0
    7008:	mov	r6, r0
    700a:	mov	r4, r1
    700c:	str	r2, [sp, #4]
    700e:	str	r3, [sp, #8]
    7010:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7014:	ldrb	r3, [r0, #0]
    7016:	cbz	r3, 701e <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7018:	movs	r0, #0
}
    701a:	add	sp, #84	; 0x54
    701c:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    701e:	ldrb	r3, [r1, #0]
    7020:	tst.w	r3, #112	; 0x70
    7024:	beq.n	7018 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    7026:	ldrb	r3, [r2, #0]
    7028:	cmp	r3, #47	; 0x2f
    702a:	bne.n	7052 <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    702c:	ldr	r2, [sp, #4]
    702e:	ldrb	r3, [r2, #0]
    7030:	cmp	r3, #47	; 0x2f
    7032:	beq.n	7040 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7034:	ldr	r1, [r4, #8]
    if (*path == 0) {
    7036:	cbnz	r3, 7046 <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    7038:	mov	r0, r6
    703a:	bl	6b02 <FatFile::openRoot(FatVolume*)>
    703e:	b.n	701a <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    7040:	adds	r2, #1
    7042:	str	r2, [sp, #4]
    7044:	b.n	702c <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    7046:	add	r0, sp, #8
    7048:	bl	69e8 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    704c:	cmp	r0, #0
    704e:	beq.n	7018 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    7050:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7052:	add	r3, sp, #4
    7054:	add	r2, sp, #44	; 0x2c
    7056:	ldr	r1, [sp, #4]
    7058:	mov	r0, r6
    705a:	bl	7ff8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    705e:	cmp	r0, #0
    7060:	beq.n	7018 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    7062:	ldr	r3, [sp, #4]
    7064:	ldrb	r3, [r3, #0]
    7066:	cbz	r3, 7090 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7068:	movs	r3, #0
    706a:	add	r2, sp, #44	; 0x2c
    706c:	mov	r1, r4
    706e:	mov	r0, r6
    7070:	bl	7d74 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7074:	cmp	r0, #0
    7076:	beq.n	7018 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    7078:	mov	r5, r6
    707a:	add	r4, sp, #8
    707c:	ldmia	r5!, {r0, r1, r2, r3}
    707e:	stmia	r4!, {r0, r1, r2, r3}
    7080:	ldmia	r5!, {r0, r1, r2, r3}
    7082:	stmia	r4!, {r0, r1, r2, r3}
    7084:	ldr	r3, [r5, #0]
    close();
    7086:	mov	r0, r6
    tmpDir = *this;
    7088:	str	r3, [r4, #0]
    close();
    708a:	bl	6ff0 <FatFile::close()>
  while (1) {
    708e:	b.n	7050 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    7090:	mov	r3, r7
    7092:	add	r2, sp, #44	; 0x2c
    7094:	mov	r1, r4
    7096:	mov	r0, r6
    7098:	bl	7d74 <FatFile::open(FatFile*, FatLfn_t*, int)>
    709c:	b.n	701a <FatFile::open(FatFile*, char const*, int)+0x1a>

0000709e <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    709e:	cbz	r1, 70a8 <FatFile::open(FatVolume*, char const*, int)+0xa>
    70a0:	add.w	r1, r1, #1096	; 0x448
    70a4:	b.w	7000 <FatFile::open(FatFile*, char const*, int)>
}
    70a8:	mov	r0, r1
    70aa:	bx	lr

000070ac <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    70ac:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    70ae:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    70b0:	sub	sp, #36	; 0x24
    70b2:	mov	r4, r0
    70b4:	mov	r6, r1
  if (!parent->isDir()) {
    70b6:	tst.w	r3, #112	; 0x70
    70ba:	bne.n	70c2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    70bc:	movs	r0, #0
}
    70be:	add	sp, #36	; 0x24
    70c0:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    70c2:	movw	r3, #2562	; 0xa02
    70c6:	bl	7d74 <FatFile::open(FatFile*, FatLfn_t*, int)>
    70ca:	cmp	r0, #0
    70cc:	beq.n	70bc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    70ce:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    70d0:	movs	r5, #16
  if (!addDirCluster()) {
    70d2:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    70d4:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    70d6:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    70d8:	bl	6a74 <FatFile::addDirCluster()>
    70dc:	cmp	r0, #0
    70de:	beq.n	70bc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    70e0:	ldr	r3, [r4, #16]
    seekSet(0);
    70e2:	movs	r1, #0
    70e4:	mov	r0, r4
    70e6:	str	r3, [r4, #32]
    70e8:	bl	6d26 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    70ec:	mov	r0, r4
    70ee:	bl	6f70 <FatFile::sync()>
    70f2:	cmp	r0, #0
    70f4:	beq.n	70bc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    70f6:	mov	r1, r7
    70f8:	mov	r0, r4
    70fa:	bl	6ae4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    70fe:	cmp	r0, #0
    7100:	beq.n	70bc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    7102:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7104:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7106:	mov	r3, r0
    7108:	add.w	ip, r0, #32
    710c:	mov	r5, r2
    710e:	ldr	r0, [r3, #0]
    7110:	adds	r3, #8
    7112:	ldr.w	r1, [r3, #-4]
    7116:	mov	r7, r2
    7118:	cmp	r3, ip
    711a:	stmia	r7!, {r0, r1}
    711c:	mov	r2, r7
    711e:	bne.n	710e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    7120:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    7124:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7126:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    7128:	movs	r2, #1
    dot.name[i] = ' ';
    712a:	str.w	r3, [sp, #1]
    712e:	adds	r0, #40	; 0x28
    7130:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7134:	subs	r1, #2
    7136:	strh.w	r3, [sp, #9]
    713a:	ldrb.w	r3, [r0, #-34]
    713e:	lsls	r1, r3
    7140:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7144:	add	r1, r3
    7146:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    714a:	mov	r3, r0
    714c:	cmp	r0, #0
    714e:	beq.n	70bc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    7150:	movs	r2, #46	; 0x2e
    7152:	mov	ip, r5
    7154:	mov	r7, r0
    7156:	add.w	lr, sp, #32
    715a:	strb.w	r2, [sp]
    715e:	mov	r2, ip
    7160:	adds	r7, #8
    7162:	ldmia	r2!, {r0, r1}
    7164:	cmp	r2, lr
    7166:	str.w	r0, [r7, #-8]
    716a:	str.w	r1, [r7, #-4]
    716e:	mov	ip, r2
    7170:	bne.n	715e <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    7172:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    7174:	adds	r3, #32
  dot.name[1] = '.';
    7176:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    717a:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    717c:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    717e:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7180:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7184:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7186:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    718a:	mov	r5, r2
    718c:	adds	r3, #8
    718e:	ldmia	r5!, {r0, r1}
    7190:	cmp	r5, r6
    7192:	str.w	r0, [r3, #-8]
    7196:	str.w	r1, [r3, #-4]
    719a:	mov	r2, r5
    719c:	bne.n	718a <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    719e:	ldr	r0, [r4, #8]
    71a0:	bl	6a18 <FatPartition::cacheSync()>
    71a4:	b.n	70be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

000071a6 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    71a6:	push	{r4, r5, r6, r7, lr}
    71a8:	mov	r7, r3
    71aa:	sub	sp, #84	; 0x54
    71ac:	movs	r3, #0
    71ae:	mov	r6, r0
    71b0:	mov	r4, r1
    71b2:	str	r2, [sp, #4]
    71b4:	strh.w	r3, [sp, #20]
  FatFile() {}
    71b8:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    71ba:	ldrb	r3, [r0, #0]
    71bc:	cbz	r3, 71c4 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    71be:	movs	r0, #0
}
    71c0:	add	sp, #84	; 0x54
    71c2:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    71c4:	ldrb	r3, [r1, #0]
    71c6:	tst.w	r3, #112	; 0x70
    71ca:	beq.n	71be <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    71cc:	ldrb	r3, [r2, #0]
    71ce:	cmp	r3, #47	; 0x2f
    71d0:	bne.n	71e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    71d2:	ldr	r2, [sp, #4]
    71d4:	ldrb	r3, [r2, #0]
    71d6:	cmp	r3, #47	; 0x2f
    71d8:	beq.n	7224 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    71da:	ldr	r1, [r4, #8]
    71dc:	add	r0, sp, #44	; 0x2c
    71de:	bl	69e8 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    71e2:	cmp	r0, #0
    71e4:	beq.n	71be <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    71e6:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    71e8:	add	r3, sp, #4
    71ea:	add	r2, sp, #8
    71ec:	ldr	r1, [sp, #4]
    71ee:	mov	r0, r6
    71f0:	bl	7ff8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    71f4:	cmp	r0, #0
    71f6:	beq.n	71be <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    71f8:	ldr	r3, [sp, #4]
    71fa:	ldrb	r3, [r3, #0]
    71fc:	cbz	r3, 723e <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    71fe:	movs	r3, #0
    7200:	add	r2, sp, #8
    7202:	mov	r1, r4
    7204:	mov	r0, r6
    7206:	bl	7d74 <FatFile::open(FatFile*, FatLfn_t*, int)>
    720a:	cbz	r0, 722a <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    720c:	mov	r5, r6
    720e:	add	r4, sp, #44	; 0x2c
    7210:	ldmia	r5!, {r0, r1, r2, r3}
    7212:	stmia	r4!, {r0, r1, r2, r3}
    7214:	ldmia	r5!, {r0, r1, r2, r3}
    7216:	stmia	r4!, {r0, r1, r2, r3}
    7218:	ldr	r3, [r5, #0]
    close();
    721a:	mov	r0, r6
    tmpDir = *this;
    721c:	str	r3, [r4, #0]
    close();
    721e:	bl	6ff0 <FatFile::close()>
  while (1) {
    7222:	b.n	71e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    7224:	adds	r2, #1
    7226:	str	r2, [sp, #4]
    7228:	b.n	71d2 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    722a:	cmp	r7, #0
    722c:	beq.n	71be <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    722e:	add	r2, sp, #8
    7230:	mov	r1, r4
    7232:	mov	r0, r6
    7234:	bl	70ac <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7238:	cmp	r0, #0
    723a:	bne.n	720c <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    723c:	b.n	71be <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    723e:	add	r2, sp, #8
    7240:	mov	r1, r4
    7242:	mov	r0, r6
    7244:	bl	70ac <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7248:	b.n	71c0 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

0000724a <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    724a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    724e:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7250:	sub	sp, #108	; 0x6c
    7252:	mov.w	r9, #0
    7256:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7258:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    725c:	mov	r7, r1
    725e:	mov	r8, r2
    7260:	str.w	r9, [sp, #32]
    7264:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    7268:	bne.n	7272 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    726a:	movs	r0, #0
}
    726c:	add	sp, #108	; 0x6c
    726e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    7272:	ldr	r2, [r0, #8]
    7274:	ldr	r3, [r1, #8]
    7276:	cmp	r2, r3
    7278:	bne.n	726a <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    727a:	mov	r6, r4
  sync();
    727c:	bl	6f70 <FatFile::sync()>
  oldFile = *this;
    7280:	add	r5, sp, #68	; 0x44
    7282:	ldmia	r6!, {r0, r1, r2, r3}
    7284:	stmia	r5!, {r0, r1, r2, r3}
    7286:	ldmia	r6!, {r0, r1, r2, r3}
    7288:	stmia	r5!, {r0, r1, r2, r3}
    728a:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    728c:	mov	r1, r9
    728e:	mov	r0, r4
  oldFile = *this;
    7290:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7292:	bl	6ae4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7296:	cmp	r0, #0
    7298:	beq.n	726a <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    729a:	mov	r2, sp
    729c:	mov	r3, r0
    729e:	add.w	ip, r0, #32
    72a2:	mov	r5, r2
    72a4:	ldr	r0, [r3, #0]
    72a6:	adds	r3, #8
    72a8:	ldr.w	r1, [r3, #-4]
    72ac:	mov	r6, r2
    72ae:	cmp	r3, ip
    72b0:	stmia	r6!, {r0, r1}
    72b2:	mov	r2, r6
    72b4:	bne.n	72a4 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    72b6:	ldrb	r3, [r4, #0]
    72b8:	add	r6, sp, #32
    72ba:	ands.w	r3, r3, #8
    72be:	beq.n	72d6 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    72c0:	movw	r3, #2561	; 0xa01
    72c4:	mov	r2, r8
    72c6:	mov	r1, r7
    72c8:	mov	r0, r6
    72ca:	bl	7000 <FatFile::open(FatFile*, char const*, int)>
    72ce:	cmp	r0, #0
    72d0:	beq.n	726a <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    72d2:	movs	r7, #0
    72d4:	b.n	72e6 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    72d6:	mov	r2, r8
    72d8:	mov	r1, r7
    72da:	mov	r0, r6
    72dc:	bl	71a6 <FatFile::mkdir(FatFile*, char const*, bool)>
    72e0:	cmp	r0, #0
    72e2:	beq.n	726a <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    72e4:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    72e6:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    72e8:	movs	r1, #1
    72ea:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    72ec:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    72ee:	ldrh.w	r3, [sp, #36]	; 0x24
    72f2:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    72f4:	ldrb.w	r3, [sp, #35]	; 0x23
    72f8:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    72fa:	ldr	r3, [sp, #44]	; 0x2c
    72fc:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    72fe:	movs	r3, #0
    7300:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    7304:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7308:	bl	6ae4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    730c:	cmp	r0, #0
    730e:	beq.n	726a <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7310:	add.w	r3, sp, #13
    7314:	add.w	r2, r0, #13
    7318:	add.w	r1, sp, #29
    731c:	ldr.w	ip, [r3], #4
    7320:	cmp	r3, r1
    7322:	str.w	ip, [r2], #4
    7326:	bne.n	731c <FatFile::rename(FatFile*, char const*)+0xd2>
    7328:	ldrh	r1, [r3, #0]
    732a:	strh	r1, [r2, #0]
    732c:	ldrb	r3, [r3, #2]
    732e:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    7330:	ldrb.w	r3, [sp, #11]
    7334:	strb	r3, [r0, #11]
  if (dirCluster) {
    7336:	cmp	r7, #0
    7338:	beq.n	73b6 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    733a:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    733c:	subs	r3, r7, #2
    733e:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    7340:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7342:	ldr.w	r1, [r0, #-20]
    7346:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7348:	movs	r2, #0
    734a:	add	r1, r3
    734c:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7350:	cmp	r0, #0
    7352:	beq.n	726a <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    7354:	add.w	r2, r0, #32
    7358:	mov	lr, r5
    735a:	add.w	r3, r0, #64	; 0x40
    735e:	ldr	r0, [r2, #0]
    7360:	adds	r2, #8
    7362:	ldr.w	r1, [r2, #-4]
    7366:	mov	ip, lr
    7368:	cmp	r2, r3
    736a:	stmia.w	ip!, {r0, r1}
    736e:	mov	lr, ip
    7370:	bne.n	735e <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7372:	mov	r1, r7
    7374:	ldr	r0, [r4, #8]
    7376:	bl	77fa <FatPartition::freeChain(unsigned long)>
    737a:	cmp	r0, #0
    737c:	beq.w	726a <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7380:	ldr	r0, [r4, #8]
    7382:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7384:	ldr	r1, [r4, #32]
    7386:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    7388:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    738a:	subs	r1, #2
    738c:	lsls	r1, r3
    738e:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7392:	add	r1, r3
    7394:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7398:	cmp	r0, #0
    739a:	beq.w	726a <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    739e:	add.w	r3, r0, #32
    73a2:	mov	r2, r5
    73a4:	adds	r3, #8
    73a6:	ldmia	r2!, {r0, r1}
    73a8:	cmp	r2, r6
    73aa:	str.w	r0, [r3, #-8]
    73ae:	str.w	r1, [r3, #-4]
    73b2:	mov	r5, r2
    73b4:	bne.n	73a2 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    73b6:	movs	r3, #0
  if (!oldFile.remove()) {
    73b8:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    73ba:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    73bc:	movs	r3, #2
    73be:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    73c2:	movs	r3, #8
    73c4:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    73c8:	bl	80a4 <FatFile::remove()>
    73cc:	cmp	r0, #0
    73ce:	beq.w	726a <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    73d2:	ldr	r0, [r4, #8]
    73d4:	bl	6a18 <FatPartition::cacheSync()>
    73d8:	b.n	726c <FatFile::rename(FatFile*, char const*)+0x22>
	...

000073dc <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    73dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    73e0:	ldrb	r3, [r0, #2]
    73e2:	mov	r4, r0
    73e4:	mov	r9, r1
    73e6:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    73e8:	lsls	r5, r3, #30
    73ea:	bpl.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    73ec:	lsls	r1, r3, #28
    73ee:	bmi.n	7418 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    73f0:	ldr	r3, [r4, #20]
    73f2:	adds	r3, r3, r7
    73f4:	bcs.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
    73f6:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    73f8:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    73fc:	ldr	r3, [r4, #20]
  while (nToWrite) {
    73fe:	cmp.w	r8, #0
    7402:	bne.n	742e <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7404:	ldr	r2, [r4, #28]
    7406:	cmp	r2, r3
    7408:	bcs.w	756a <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    740c:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    740e:	ldrb	r3, [r4, #2]
    7410:	orn	r3, r3, #127	; 0x7f
    7414:	strb	r3, [r4, #2]
    7416:	b.n	7574 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    7418:	ldr	r1, [r0, #28]
    741a:	bl	6d26 <FatFile::seekSet(unsigned long)>
    741e:	cmp	r0, #0
    7420:	bne.n	73f0 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7422:	ldrb	r3, [r4, #1]
  return 0;
    7424:	movs	r7, #0
  m_error |= WRITE_ERROR;
    7426:	orr.w	r3, r3, #1
    742a:	strb	r3, [r4, #1]
  return 0;
    742c:	b.n	7574 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    742e:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7430:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    7434:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    7436:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7438:	ands.w	r6, r6, r3, lsr #9
    743c:	bne.n	7454 <FatFile::write(void const*, unsigned int)+0x78>
    743e:	cbnz	r5, 7454 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    7440:	cmp	r1, #0
    7442:	beq.n	74bc <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    7444:	ldrb	r2, [r4, #2]
    7446:	lsls	r2, r2, #25
    7448:	bpl.n	74a4 <FatFile::write(void const*, unsigned int)+0xc8>
    744a:	ldr	r2, [r4, #28]
    744c:	cmp	r2, r3
    744e:	bls.n	74a4 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    7450:	adds	r1, #1
    7452:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7454:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7458:	ldr	r1, [r4, #16]
    745a:	ldrb.w	r3, [ip, #6]
    745e:	subs	r1, #2
    7460:	lsls	r1, r3
    7462:	ldr.w	r3, [ip, #20]
    7466:	add	r1, r3
                      + sectorOfCluster;
    7468:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    746a:	cmp	r5, #0
    746c:	bne.n	74d4 <FatFile::write(void const*, unsigned int)+0xf8>
    746e:	cmp.w	r8, #512	; 0x200
    7472:	bcc.n	74d4 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7474:	cmp.w	r8, #1024	; 0x400
    7478:	ldr.w	r2, [ip, #52]	; 0x34
    747c:	ldr.w	r0, [ip, #44]	; 0x2c
    7480:	bcs.n	7534 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    7482:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    7484:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    7486:	ittt	eq
    7488:	moveq.w	r3, #4294967295
    m_status = 0;
    748c:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7490:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7494:	ldr	r3, [r0, #0]
    7496:	ldr	r3, [r3, #36]	; 0x24
    7498:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    749a:	cmp	r0, #0
    749c:	beq.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    749e:	mov.w	r6, #512	; 0x200
    74a2:	b.n	751e <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    74a4:	mov	r2, sl
    74a6:	bl	75ea <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    74aa:	cmp	r0, #0
    74ac:	blt.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    74ae:	bne.n	7454 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    74b0:	mov	r0, r4
    74b2:	bl	6a3e <FatFile::addCluster()>
    74b6:	cmp	r0, #0
    74b8:	bne.n	7454 <FatFile::write(void const*, unsigned int)+0x78>
    74ba:	b.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    74bc:	ldr	r3, [r4, #32]
    74be:	cbnz	r3, 74d0 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    74c0:	mov	r0, r4
    74c2:	bl	6a3e <FatFile::addCluster()>
    74c6:	cmp	r0, #0
    74c8:	beq.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    74ca:	ldr	r3, [r4, #16]
    74cc:	str	r3, [r4, #32]
    74ce:	b.n	7454 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    74d0:	str	r3, [r4, #16]
    74d2:	b.n	7454 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    74d4:	rsb	r6, r5, #512	; 0x200
    74d8:	cmp	r6, r8
    74da:	it	cs
    74dc:	movcs	r6, r8
      if (sectorOffset == 0 &&
    74de:	cbnz	r5, 752c <FatFile::write(void const*, unsigned int)+0x150>
    74e0:	ldr	r2, [r4, #20]
    74e2:	ldr	r3, [r4, #28]
    74e4:	cmp	r2, r3
    74e6:	bcs.n	7530 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    74e8:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    74ea:	tst.w	r3, #32
    74ee:	ite	eq
    74f0:	moveq	r2, #1
    74f2:	movne	r2, #5
    return m_cache.prepare(sector, options);
    74f4:	add.w	r0, ip, #40	; 0x28
    74f8:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    74fc:	cmp	r0, #0
    74fe:	beq.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    7500:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7502:	add	r5, r6
      memcpy(dst, src, n);
    7504:	mov	r2, r6
    7506:	mov	r1, r9
    7508:	bl	9c60 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    750c:	cmp.w	r5, #512	; 0x200
    7510:	ldr	r0, [r4, #8]
    7512:	bne.n	751e <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    7514:	adds	r0, #40	; 0x28
    7516:	bl	5114 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    751a:	cmp	r0, #0
    751c:	beq.n	7422 <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    751e:	ldr	r3, [r4, #20]
    src += n;
    7520:	add	r9, r6
    nToWrite -= n;
    7522:	sub.w	r8, r8, r6
    m_curPosition += n;
    7526:	add	r3, r6
    7528:	str	r3, [r4, #20]
    nToWrite -= n;
    752a:	b.n	73fc <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    752c:	movs	r2, #1
    752e:	b.n	74f4 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7530:	movs	r2, #5
    7532:	b.n	74f4 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7534:	ldrb.w	r3, [ip, #4]
    7538:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    753a:	mov.w	r6, r8, lsr #9
    753e:	cmp	r3, r6
    7540:	it	cs
    7542:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    7544:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    7546:	mov.w	r6, r3, lsl #9
    754a:	bhi.n	7560 <FatFile::write(void const*, unsigned int)+0x184>
    754c:	add.w	lr, r1, r3
    7550:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    7552:	ittt	hi
    7554:	movhi.w	r2, #4294967295
    m_status = 0;
    7558:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    755c:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7560:	ldr	r2, [r0, #0]
    7562:	ldr	r5, [r2, #40]	; 0x28
    7564:	mov	r2, r9
    7566:	blx	r5
    7568:	b.n	751a <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    756a:	ldr	r3, [pc, #16]	; (757c <FatFile::write(void const*, unsigned int)+0x1a0>)
    756c:	ldr	r3, [r3, #0]
    756e:	cmp	r3, #0
    7570:	bne.w	740e <FatFile::write(void const*, unsigned int)+0x32>
}
    7574:	mov	r0, r7
    7576:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    757a:	nop
    757c:	.word	0x200271fc

00007580 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7580:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    7582:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7586:	push	{r4, r5, lr}
    7588:	mov	r4, r3
    758a:	it	cs
    758c:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    7590:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7594:	cmp	r1, r5
    7596:	bcc.n	759e <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7598:	subs	r3, r3, r4
    759a:	str	r3, [r2, #0]
}
    759c:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    759e:	ldrh.w	r0, [r1], #2
    75a2:	cmp	r0, #0
    75a4:	bne.n	7594 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    75a6:	ldr	r0, [r2, #4]
    75a8:	adds	r0, #1
    75aa:	str	r0, [r2, #4]
    75ac:	b.n	7594 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

000075ae <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    75ae:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    75b0:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    75b2:	push	{r4, r5, lr}
    75b4:	mov	r4, r3
    75b6:	it	cs
    75b8:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    75ba:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    75be:	cmp	r1, r5
    75c0:	bcc.n	75c8 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    75c2:	subs	r3, r3, r4
    75c4:	str	r3, [r2, #0]
}
    75c6:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    75c8:	ldr.w	r0, [r1], #4
    75cc:	cmp	r0, #0
    75ce:	bne.n	75be <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    75d0:	ldr	r0, [r2, #4]
    75d2:	adds	r0, #1
    75d4:	str	r0, [r2, #4]
    75d6:	b.n	75be <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

000075d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    75d8:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    75da:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    75de:	cmp	r3, #2
    75e0:	it	eq
    75e2:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    75e6:	b.w	5162 <FsCache::prepare(unsigned long, unsigned char)>

000075ea <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    75ea:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    75ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75f0:	mov	r6, r0
    75f2:	mov	r4, r1
    75f4:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    75f6:	bhi.n	7600 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    75f8:	mov.w	r0, #4294967295
}
    75fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7600:	ldr	r3, [r0, #28]
    7602:	cmp	r3, r1
    7604:	bcc.n	75f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    7606:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7608:	cmp	r3, #32
    760a:	bne.n	7632 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    760c:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    760e:	movs	r2, #0
    7610:	add.w	r1, r1, r4, lsr #7
    7614:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7618:	cmp	r0, #0
    761a:	beq.n	75f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    761c:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    761e:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7622:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    7624:	ldr	r2, [r6, #28]
    7626:	cmp	r2, r3
  return 1;
    7628:	itet	cs
    762a:	movcs	r0, #1
    return 0;
    762c:	movcc	r0, #0
  *value = next;
    762e:	strcs	r3, [r7, #0]
  return 1;
    7630:	b.n	75fc <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    7632:	cmp	r3, #16
    7634:	bne.n	7652 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7636:	ubfx	r1, r1, #8, #8
    763a:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    763c:	movs	r2, #0
    763e:	add	r1, r3
    7640:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7644:	cmp	r0, #0
    7646:	beq.n	75f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7648:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    764a:	and.w	r4, r4, #510	; 0x1fe
    764e:	ldrh	r3, [r0, r4]
    7650:	b.n	7624 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    7652:	cmp	r3, #12
    7654:	bne.n	75f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    7656:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    765a:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    765c:	movs	r2, #0
    index += index >> 1;
    765e:	uxtah	r8, r8, r1
    7662:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7666:	ubfx	r8, r8, #9, #7
    766a:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    766c:	mov	r1, r8
    766e:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7672:	cmp	r0, #0
    7674:	beq.n	75f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    7676:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    767a:	ldrb	r5, [r0, r3]
    index++;
    767c:	adds	r3, #1
    if (index == m_bytesPerSector) {
    767e:	cmp.w	r3, #512	; 0x200
    7682:	bne.n	7696 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    7684:	movs	r2, #0
    7686:	add.w	r1, r8, #1
    768a:	mov	r0, r6
    768c:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7690:	cmp	r0, #0
    7692:	beq.n	75f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7694:	movs	r3, #0
    tmp |= pc[index] << 8;
    7696:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7698:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    769a:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    769e:	ite	mi
    76a0:	lsrmi	r3, r3, #4
    76a2:	ubfxpl	r3, r3, #0, #12
    76a6:	b.n	7624 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

000076a8 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    76a8:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    76aa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76ae:	mov	r8, r0
    76b0:	mov	r4, r1
    76b2:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    76b4:	bhi.n	76bc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    76b6:	movs	r0, #0
}
    76b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    76bc:	ldr	r3, [r0, #28]
    76be:	cmp	r3, r1
    76c0:	bcc.n	76b6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    76c2:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    76c4:	cmp	r3, #32
    76c6:	bne.n	76e4 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    76c8:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    76ca:	movs	r2, #1
    76cc:	add.w	r1, r1, r4, lsr #7
    76d0:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    76d4:	cmp	r0, #0
    76d6:	beq.n	76b6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    76d8:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    76da:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    76de:	str	r5, [r0, r4]
    return true;
    76e0:	movs	r0, #1
    76e2:	b.n	76b8 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    76e4:	cmp	r3, #16
    76e6:	bne.n	7704 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    76e8:	ubfx	r1, r1, #8, #8
    76ec:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    76ee:	movs	r2, #1
    76f0:	add	r1, r3
    76f2:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    76f6:	cmp	r0, #0
    76f8:	beq.n	76b6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    76fa:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    76fc:	and.w	r4, r4, #510	; 0x1fe
    7700:	strh	r5, [r0, r4]
    return true;
    7702:	b.n	76e0 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7704:	cmp	r3, #12
    7706:	bne.n	76b6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7708:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    770c:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    770e:	movs	r2, #1
    index += index >> 1;
    7710:	uxtah	r7, r7, r1
    7714:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7716:	ubfx	r7, r7, #9, #7
    771a:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    771c:	mov	r1, r7
    771e:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7722:	cmp	r0, #0
    7724:	beq.n	76b6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    7726:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    772a:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    772e:	itt	ne
    7730:	lslne	r2, r5, #4
    7732:	ldrbne	r1, [r0, r3]
    7734:	add.w	r6, r0, r3
    index++;
    7738:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    773c:	ittet	ne
    773e:	andne.w	r2, r2, #240	; 0xf0
    7742:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    7746:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    7748:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    774a:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    774e:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    7750:	bne.n	7762 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7752:	movs	r2, #1
    7754:	mov	r0, r8
    7756:	adds	r1, r7, r2
    7758:	bl	75d8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    775c:	cmp	r0, #0
    775e:	beq.n	76b6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    7760:	movs	r3, #0
    tmp = value >> 4;
    7762:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7766:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    7768:	cbnz	r4, 7774 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    776a:	ldrb	r3, [r0, r3]
    776c:	bic.w	r3, r3, #15
    7770:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    7774:	strb	r5, [r2, #0]
    7776:	b.n	76e0 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00007778 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7778:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    777c:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    777e:	mov	r5, r0
    7780:	mov	r6, r1
    7782:	mov	r8, r2
  if (m_allocSearchStart < current) {
    7784:	cmp	r4, r1
    7786:	bcc.n	778c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    7788:	movs	r7, #1
    778a:	b.n	7790 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    778c:	mov	r4, r1
    setStart = false;
    778e:	movs	r7, #0
    find++;
    7790:	adds	r4, #1
    if (find > m_lastCluster) {
    7792:	ldr	r3, [r5, #28]
    7794:	cmp	r3, r4
    7796:	bcs.n	779e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    7798:	cbnz	r7, 77cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    779a:	ldr	r4, [r5, #12]
    779c:	b.n	7788 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    779e:	cmp	r6, r4
    77a0:	beq.n	77cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    77a2:	add	r2, sp, #4
    77a4:	mov	r1, r4
    77a6:	mov	r0, r5
    77a8:	bl	75ea <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    77ac:	cmp	r0, #0
    77ae:	blt.n	77cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    77b0:	beq.n	7790 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    77b2:	ldr	r3, [sp, #4]
    77b4:	cmp	r3, #0
    77b6:	bne.n	7790 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    77b8:	cbz	r7, 77bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    77ba:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    77bc:	mvn.w	r2, #4026531840	; 0xf0000000
    77c0:	mov	r1, r4
    77c2:	mov	r0, r5
    77c4:	bl	76a8 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    77c8:	mov	r7, r0
    77ca:	cbnz	r0, 77d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    77cc:	movs	r7, #0
}
    77ce:	mov	r0, r7
    77d0:	add	sp, #8
    77d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    77d6:	cbnz	r6, 77e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    77d8:	ldr	r3, [r5, #36]	; 0x24
    77da:	cmp	r3, #0
    77dc:	bge.n	77f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    77de:	str.w	r4, [r8]
  return true;
    77e2:	b.n	77ce <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    77e4:	mov	r2, r4
    77e6:	mov	r1, r6
    77e8:	mov	r0, r5
    77ea:	bl	76a8 <FatPartition::fatPut(unsigned long, unsigned long)>
    77ee:	cmp	r0, #0
    77f0:	bne.n	77d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    77f2:	b.n	77cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    77f4:	subs	r3, #1
    77f6:	str	r3, [r5, #36]	; 0x24
    77f8:	b.n	77de <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

000077fa <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    77fa:	push	{r0, r1, r4, r5, r6, lr}
    77fc:	mov	r5, r0
    77fe:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7800:	add	r2, sp, #4
    7802:	mov	r1, r4
    7804:	mov	r0, r5
    7806:	bl	75ea <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    780a:	subs	r6, r0, #0
    780c:	blt.n	783a <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    780e:	movs	r2, #0
    7810:	mov	r1, r4
    7812:	mov	r0, r5
    7814:	bl	76a8 <FatPartition::fatPut(unsigned long, unsigned long)>
    7818:	cbz	r0, 783a <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    781a:	ldr	r3, [r5, #36]	; 0x24
    781c:	cmp	r3, #0
      m_freeClusterCount += change;
    781e:	itt	ge
    7820:	addge	r3, #1
    7822:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7824:	ldr	r3, [r5, #12]
    7826:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7828:	itt	hi
    782a:	addhi.w	r4, r4, #4294967295
    782e:	strhi	r4, [r5, #12]
    cluster = next;
    7830:	ldr	r4, [sp, #4]
  } while (fg);
    7832:	cmp	r6, #0
    7834:	bne.n	7800 <FatPartition::freeChain(unsigned long)+0x6>
}
    7836:	add	sp, #8
    7838:	pop	{r4, r5, r6, pc}
  return false;
    783a:	movs	r0, #0
    783c:	b.n	7836 <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007840 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7840:	push	{r4, r5, r6, r7, lr}
    7842:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7844:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7846:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7848:	cmp	r0, #0
    784a:	bge.n	78be <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    784c:	ldrb	r3, [r4, #7]
    784e:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7850:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7852:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7854:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7858:	beq.n	78c2 <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    785a:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    785e:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7860:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    7862:	strd	r6, r5, [sp, #16]
    7866:	bmi.n	78c6 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7868:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    786a:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    786c:	ldr	r0, [r4, #0]
    786e:	add	r6, sp, #16
    7870:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    7874:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    7876:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    787a:	ldr	r1, [r4, #24]
    787c:	ldr	r5, [r0, #0]
    787e:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    7882:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    7886:	bne.n	78d8 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7888:	str	r6, [sp, #4]
    788a:	ldr	r6, [pc, #84]	; (78e0 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    788c:	str	r6, [sp, #0]
    788e:	ldr	r5, [r5, #24]
    7890:	blx	r5
    7892:	cbz	r0, 78a8 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    7894:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    7896:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    7898:	b.n	78be <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    789a:	add	r2, sp, #16
    789c:	mov	r1, r7
    789e:	mov	r0, r4
    78a0:	bl	75ea <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    78a4:	cmp	r0, #0
    78a6:	bge.n	78ae <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    78a8:	mov.w	r0, #4294967295
    78ac:	b.n	78be <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    78ae:	beq.n	78b6 <FatPartition::freeClusterCount()+0x76>
    78b0:	ldr	r3, [sp, #16]
    78b2:	cbnz	r3, 78b6 <FatPartition::freeClusterCount()+0x76>
        free++;
    78b4:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    78b6:	adds	r7, #1
    78b8:	cmp	r7, r6
    78ba:	bcc.n	789a <FatPartition::freeClusterCount()+0x5a>
    return free;
    78bc:	mov	r0, r5
}
    78be:	add	sp, #28
    78c0:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    78c2:	movs	r7, #2
    78c4:	b.n	78b8 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    78c6:	add.w	r0, r4, #568	; 0x238
    78ca:	str	r3, [sp, #12]
    78cc:	bl	5114 <FsCache::sync()>
    78d0:	ldr	r3, [sp, #12]
    78d2:	cmp	r0, #0
    78d4:	bne.n	7868 <FatPartition::freeClusterCount()+0x28>
    78d6:	b.n	78a8 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    78d8:	str	r6, [sp, #4]
    78da:	ldr	r6, [pc, #8]	; (78e4 <FatPartition::freeClusterCount()+0xa4>)
    78dc:	b.n	788c <FatPartition::freeClusterCount()+0x4c>
    78de:	nop
    78e0:	.word	0x000075af
    78e4:	.word	0x00007581

000078e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    78e8:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    78ea:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    78ec:	mov	r4, r0
  m_blockDev = dev;
    78ee:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    78f0:	mov	r5, r2
  m_fatType = 0;
    78f2:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    78f4:	movs	r0, #1
  m_cache.init(dev);
    78f6:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    78fa:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    78fc:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    78fe:	mov.w	r0, #4294967295
    m_status = 0;
    7902:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7906:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7908:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    790c:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7910:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7914:	cbz	r2, 794a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7916:	cmp	r2, #4
    7918:	bls.n	791e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    791a:	movs	r0, #0
}
    791c:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    791e:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7922:	mov	r2, r3
    7924:	mov	r1, r3
    7926:	mov	r0, r6
    7928:	subs	r5, #1
    792a:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
    792e:	add.w	r3, r0, #446	; 0x1be
    7932:	lsls	r2, r5, #4
    7934:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7938:	cmp	r0, #0
    793a:	beq.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    793c:	ldrb	r1, [r5, #4]
    793e:	cmp	r1, #0
    7940:	beq.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7942:	ldrb	r3, [r3, r2]
    7944:	lsls	r3, r3, #25
    7946:	bne.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7948:	ldr	r5, [r5, #8]
    794a:	movs	r2, #0
    794c:	mov	r1, r5
    794e:	mov	r0, r6
    7950:	bl	5162 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7954:	cmp	r0, #0
    7956:	beq.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7958:	ldrh.w	r3, [r0, #11]
    795c:	cmp.w	r3, #512	; 0x200
    7960:	bne.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7962:	ldrb	r3, [r0, #16]
    7964:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7966:	subs	r3, #1
    7968:	cmp	r3, #1
    796a:	bhi.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    796c:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    796e:	movs	r6, #9
    7970:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7972:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7974:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7976:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7978:	movs	r3, #1
    797a:	cmp	r1, r3
    797c:	bne.n	79e6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    797e:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7980:	ldrh	r3, [r0, #22]
    7982:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7984:	cbnz	r3, 798a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7986:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7988:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    798a:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    798c:	ldrh.w	r1, [r0, #17]
    7990:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7992:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7994:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7996:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7998:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    799a:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    799c:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    79a0:	mla	r3, r6, r7, r3
    79a4:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    79a6:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    79aa:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    79ae:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    79b0:	cbnz	r1, 79b4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    79b2:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    79b4:	subs	r5, r5, r3
    79b6:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    79b8:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    79ba:	adds	r3, r5, #1
    79bc:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    79be:	mov.w	r3, #4294967295
    79c2:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    79c4:	movw	r3, #4084	; 0xff4
    79c8:	cmp	r5, r3
    79ca:	bls.n	79f8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    79cc:	movw	r3, #65524	; 0xfff4
    79d0:	cmp	r5, r3
    79d2:	bls.n	79fc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    79d4:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    79d6:	str	r3, [r4, #32]
    79d8:	movs	r3, #32
  return true;
    79da:	movs	r0, #1
    m_fatType = 12;
    79dc:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    79de:	str	r6, [r4, #48]	; 0x30
    79e0:	str.w	r6, [r4, #576]	; 0x240
  return true;
    79e4:	b.n	791c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    79e6:	subs	r6, #1
    79e8:	bne.n	79ee <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    79ea:	strb	r2, [r4, #6]
    79ec:	b.n	791a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    79ee:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    79f0:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    79f2:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    79f4:	uxtb	r3, r3
    79f6:	b.n	797a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    79f8:	movs	r3, #12
    79fa:	b.n	79da <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    79fc:	movs	r3, #16
    79fe:	b.n	79da <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007a00 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7a00:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7a02:	add.w	r4, r0, #1096	; 0x448
    7a06:	sub	sp, #40	; 0x28
  FatFile() {}
    7a08:	movs	r3, #0
    7a0a:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7a0c:	add	r0, sp, #4
    7a0e:	mov	r1, r4
    7a10:	str	r3, [sp, #4]
    7a12:	bl	7000 <FatFile::open(FatFile*, char const*, int)>
    7a16:	mov	r6, r0
    7a18:	cbz	r0, 7a36 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7a1a:	ldrb.w	r3, [sp, #4]
    7a1e:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7a22:	itett	ne
    7a24:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    7a26:	moveq	r6, r3
  m_vwd = dir;
    7a28:	ldmiane	r5!, {r0, r1, r2, r3}
    7a2a:	stmiane	r4!, {r0, r1, r2, r3}
    7a2c:	itttt	ne
    7a2e:	ldmiane	r5!, {r0, r1, r2, r3}
    7a30:	stmiane	r4!, {r0, r1, r2, r3}
    7a32:	ldrne	r3, [r5, #0]
    7a34:	strne	r3, [r4, #0]
}
    7a36:	mov	r0, r6
    7a38:	add	sp, #40	; 0x28
    7a3a:	pop	{r4, r5, r6, pc}

00007a3c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    7a3c:	subs	r1, r0, #1
    7a3e:	add.w	r3, r0, #10
    uint8_t sum = 0;
    7a42:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7a44:	lsls	r2, r0, #7
    7a46:	orr.w	r2, r2, r0, lsr #1
    7a4a:	ldrb.w	r0, [r1, #1]!
    7a4e:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7a52:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7a54:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7a56:	bne.n	7a44 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    7a58:	bx	lr

00007a5a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7a5a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7a5e:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7a60:	sub	sp, #52	; 0x34
    7a62:	mov	r6, r2
    7a64:	mov	r7, r0
    7a66:	mov	r9, r1
    7a68:	mov	r8, r3
  FatFile dir = *this;
    7a6a:	add	r4, sp, #12
    7a6c:	ldmia	r5!, {r0, r1, r2, r3}
    7a6e:	stmia	r4!, {r0, r1, r2, r3}
    7a70:	ldmia	r5!, {r0, r1, r2, r3}
    7a72:	stmia	r4!, {r0, r1, r2, r3}
    7a74:	ldr	r3, [r5, #0]
    7a76:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7a78:	movs	r4, #1
    next = begin;
    7a7a:	ldr	r3, [r6, #0]
    7a7c:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    7a7e:	movs	r3, #0
    7a80:	strh	r3, [r6, #12]
    7a82:	cmp	r4, r8
    7a84:	bls.n	7a8a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    7a86:	movs	r0, #1
    7a88:	b.n	7a9c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7a8a:	sub.w	r1, r9, r4
    7a8e:	add	r0, sp, #12
    7a90:	uxth	r1, r1
    7a92:	bl	6834 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7a96:	mov	sl, r0
    7a98:	cbnz	r0, 7aa2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    7a9a:	movs	r0, #0
}
    7a9c:	add	sp, #52	; 0x34
    7a9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7aa2:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    7aa4:	uxtb	r2, r5
    7aa6:	mov	r1, sl
    7aa8:	mov	r0, r7
    7aaa:	bl	684e <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    7aae:	ldrh	r3, [r6, #12]
    7ab0:	mov	fp, r0
    7ab2:	cbnz	r3, 7ac4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    7ab4:	ldrd	r2, r3, [r6, #4]
    7ab8:	cmp	r2, r3
    7aba:	bne.n	7ac4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    7abc:	clz	r0, r0
    7ac0:	lsrs	r0, r0, #5
    7ac2:	b.n	7a9c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    7ac4:	mov	r0, r6
    7ac6:	bl	5258 <FsName::get16()>
    7aca:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    7acc:	mov	r0, fp
    7ace:	bl	51b0 <toUpcase(unsigned short)>
    7ad2:	ldr	r3, [sp, #4]
    7ad4:	mov	fp, r0
    7ad6:	mov	r0, r3
    7ad8:	bl	51b0 <toUpcase(unsigned short)>
    7adc:	cmp	fp, r0
    7ade:	bne.n	7a9a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    7ae0:	adds	r5, #1
    7ae2:	cmp	r5, #13
    7ae4:	bne.n	7aa4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7ae6:	adds	r4, #1
    7ae8:	uxtb	r4, r4
    7aea:	b.n	7a82 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00007aec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7aec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7af0:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7af2:	sub	sp, #52	; 0x34
    7af4:	mov	r4, r2
    7af6:	mov	r9, r1
    7af8:	mov	r7, r3
  FatFile dir = *this;
    7afa:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7afc:	mov.w	sl, #15
  FatFile dir = *this;
    7b00:	ldmia	r5!, {r0, r1, r2, r3}
    7b02:	stmia	r6!, {r0, r1, r2, r3}
    7b04:	ldmia	r5!, {r0, r1, r2, r3}
    7b06:	stmia	r6!, {r0, r1, r2, r3}
    7b08:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7b0a:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7b0e:	movs	r5, #1
  FatFile dir = *this;
    7b10:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7b12:	bl	7a3c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    7b16:	movs	r6, #0
    next = begin;
    7b18:	ldr	r3, [r4, #0]
    7b1a:	mov	r8, r0
    7b1c:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    7b1e:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7b20:	cmp	r5, r7
    7b22:	bls.n	7b2c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7b24:	movs	r0, #1

 fail:
  return false;
}
    7b26:	add	sp, #52	; 0x34
    7b28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7b2c:	sub.w	r1, r9, r5
    7b30:	add	r0, sp, #12
    7b32:	uxth	r1, r1
    7b34:	bl	6834 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7b38:	cmp	r0, #0
    7b3a:	beq.n	7b26 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    7b3c:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7b3e:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    7b40:	mov.w	r1, #0
    7b44:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    7b48:	ldrb.w	r3, [r2, #40]	; 0x28
    7b4c:	orr.w	r3, r3, #1
    7b50:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7b54:	ite	eq
    7b56:	orreq.w	r3, r5, #64	; 0x40
    7b5a:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7b5c:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    7b60:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7b62:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    7b64:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7b68:	strh	r1, [r0, #26]
    return !ls && next == end;
    7b6a:	ldrh	r0, [r4, #12]
    7b6c:	cbnz	r0, 7b9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    7b6e:	ldrd	r2, r3, [r4, #4]
    7b72:	cmp	r2, r3
    7b74:	bne.n	7b9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    7b76:	cbz	r6, 7ba6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    7b78:	adds	r6, #1
    7b7a:	movw	r0, #65535	; 0xffff
    7b7e:	uxtb	r6, r6
  if (i < 5) {
    7b80:	cmp	r1, #4
    7b82:	uxtb	r3, r1
    7b84:	bhi.n	7baa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    7b86:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    7b8a:	adds	r1, #1
    7b8c:	add.w	fp, fp, #2
    7b90:	cmp	r1, #13
    7b92:	bne.n	7b6a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7b94:	adds	r5, #1
    7b96:	uxtb	r5, r5
    7b98:	b.n	7b20 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    7b9a:	mov	r0, r4
    7b9c:	str	r1, [sp, #4]
    7b9e:	bl	5258 <FsName::get16()>
    7ba2:	ldr	r1, [sp, #4]
    7ba4:	b.n	7b80 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    7ba6:	movs	r6, #1
    7ba8:	b.n	7b80 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    7baa:	cmp	r3, #10
    7bac:	ite	ls
    7bae:	strhls.w	r0, [fp, #3]
    7bb2:	strhhi.w	r0, [fp, #5]
}
    7bb6:	b.n	7b8a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

00007bb8 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7bb8:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7bba:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    7bbe:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    7bc2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    7bc6:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7bc8:	mov	r5, r0
    fname->sfn[k] = ' ';
    7bca:	str.w	r1, [r0, #22]
    7bce:	str	r1, [r2, #4]
    7bd0:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    7bd4:	ldrb	r0, [r3, #0]
    7bd6:	subs	r0, #46	; 0x2e
    7bd8:	it	ne
    7bda:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    7bdc:	mov	r7, r3
    7bde:	ldrb.w	r2, [r3], #1
    7be2:	cmp	r2, #46	; 0x2e
    7be4:	beq.n	7bdc <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    7be6:	subs	r3, r6, #1
    7be8:	cmp	r3, r7
    7bea:	mov	lr, r3
    7bec:	bls.n	7bf6 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    7bee:	ldrb.w	r2, [r3], #-1
    7bf2:	cmp	r2, #46	; 0x2e
    7bf4:	bne.n	7be8 <FatFile::makeSFN(FatLfn_t*)+0x30>
    7bf6:	movs	r2, #0
    7bf8:	mov.w	ip, #7
    7bfc:	mov.w	r9, #8
    7c00:	mov	r1, r2
    7c02:	mov	r8, r2
    7c04:	b.n	7c1c <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    7c06:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    7c08:	cmp	r3, #46	; 0x2e
    7c0a:	bne.n	7c38 <FatFile::makeSFN(FatLfn_t*)+0x80>
    7c0c:	cmp	lr, r7
    7c0e:	bne.n	7c54 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    7c10:	mov.w	ip, #10
      i = 8;    // Place for extension.
    7c14:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7c16:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    7c1a:	adds	r7, #1
    7c1c:	cmp	r7, r6
    7c1e:	bcc.n	7c06 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7c20:	ldrb	r3, [r5, #22]
    7c22:	cmp	r3, #32
    7c24:	beq.n	7cd8 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    7c26:	cmp	r0, #0
    7c28:	beq.n	7cc4 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7c2a:	tst.w	r8, r2
    7c2e:	it	ne
    7c30:	movne	r2, #2
    7c32:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    7c34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    7c38:	cmp	r3, #34	; 0x22
    7c3a:	beq.n	7c54 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7c3c:	cmp	r3, #124	; 0x7c
    7c3e:	beq.n	7c54 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7c40:	sub.w	r4, r3, #91	; 0x5b
    7c44:	cmp	r4, #2
    7c46:	bls.n	7c54 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7c48:	sub.w	r4, r3, #42	; 0x2a
    7c4c:	cmp	r4, #5
    7c4e:	bhi.n	7c5e <FatFile::makeSFN(FatLfn_t*)+0xa6>
    7c50:	cmp	r3, #45	; 0x2d
    7c52:	beq.n	7c7a <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    7c54:	cmp	r1, ip
    7c56:	bhi.n	7c7e <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    7c58:	movs	r0, #0
        c = '_';
    7c5a:	movs	r3, #95	; 0x5f
    7c5c:	b.n	7ca0 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    7c5e:	sub.w	r4, r3, #58	; 0x3a
    7c62:	cmp	r4, #5
    7c64:	bls.n	7c6e <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    7c66:	sub.w	r4, r3, #33	; 0x21
    7c6a:	cmp	r4, #93	; 0x5d
    7c6c:	bls.n	7c7a <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    7c6e:	and.w	r3, r3, #192	; 0xc0
    7c72:	cmp	r3, #128	; 0x80
    7c74:	bne.n	7c54 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    7c76:	movs	r0, #0
    7c78:	b.n	7c1a <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    7c7a:	cmp	r1, ip
    7c7c:	bls.n	7c8e <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    7c7e:	cmp.w	ip, #10
    7c82:	beq.n	7cc0 <FatFile::makeSFN(FatLfn_t*)+0x108>
    7c84:	cmp	lr, r7
    7c86:	bcc.n	7cc0 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    7c88:	add.w	r7, lr, #4294967295
        continue;
    7c8c:	b.n	7c76 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    7c8e:	sub.w	r4, r3, #97	; 0x61
    7c92:	cmp	r4, #25
    7c94:	bhi.n	7cb2 <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    7c96:	subs	r3, #32
        lc |= bit;
    7c98:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    7c9c:	uxtb	r3, r3
        lc |= bit;
    7c9e:	uxtb	r2, r2
      fname->sfn[i++] = c;
    7ca0:	adds	r4, r1, #1
    7ca2:	add	r1, r5
    7ca4:	uxtb	r4, r4
    7ca6:	strb	r3, [r1, #22]
      if (i < 7) {
    7ca8:	cmp	r4, #6
    7caa:	bhi.n	7cae <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    7cac:	strb	r4, [r5, #20]
    7cae:	mov	r1, r4
    7cb0:	b.n	7c1a <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    7cb2:	sub.w	r4, r3, #65	; 0x41
    7cb6:	cmp	r4, #25
        uc |= bit;
    7cb8:	it	ls
    7cba:	orrls.w	r8, r9, r8
    7cbe:	b.n	7ca0 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    7cc0:	movs	r0, #0
    7cc2:	b.n	7c20 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    7cc4:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7cc6:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    7cc8:	movs	r1, #126	; 0x7e
    7cca:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7ccc:	strb	r2, [r5, #21]
  return true;
    7cce:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    7cd0:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    7cd2:	movs	r1, #49	; 0x31
    7cd4:	strb	r1, [r3, #23]
    7cd6:	b.n	7c34 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    7cd8:	movs	r0, #0
    7cda:	b.n	7c34 <FatFile::makeSFN(FatLfn_t*)+0x7c>

00007cdc <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    7cdc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ce0:	mov	r7, r0
    7ce2:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    7ce4:	ldrb	r6, [r1, #20]
    7ce6:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    7ce8:	mov.w	sl, #0
    7cec:	ldr.w	r8, [pc, #128]	; 7d70 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7cf0:	add.w	r9, r1, #22
    7cf4:	ldr.w	r3, [r8]
    7cf8:	cmp	r6, #3
    hex += millis();
    7cfa:	add	r3, sl
    7cfc:	it	cs
    7cfe:	movcs	r6, #3
    7d00:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7d04:	adds	r3, r6, #4
    7d06:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7d08:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7d0c:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7d0e:	subs	r3, #1
      hex >>= 4;
    7d10:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7d14:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7d16:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7d18:	ite	ls
    7d1a:	addls	r2, #48	; 0x30
    7d1c:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7d1e:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7d20:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7d22:	bne.n	7d08 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    7d24:	adds	r3, r5, r6
    7d26:	movs	r2, #126	; 0x7e
    seekSet(0);
    7d28:	movs	r1, #0
    7d2a:	mov	r0, r7
    7d2c:	strb	r2, [r3, #22]
    7d2e:	bl	6d26 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    7d32:	movs	r1, #1
    7d34:	mov	r0, r7
    7d36:	bl	6ce8 <FatFile::readDirCache(bool)>
      if (!dir) {
    7d3a:	mov	r1, r0
    7d3c:	cbnz	r0, 7d4a <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    7d3e:	ldrb	r0, [r7, #1]
    7d40:	clz	r0, r0
    7d44:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    7d46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    7d4a:	ldrb	r3, [r0, #0]
    7d4c:	cbz	r3, 7d6c <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7d4e:	ldrb	r3, [r0, #11]
    7d50:	lsls	r3, r3, #28
    7d52:	bmi.n	7d32 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    7d54:	movs	r2, #11
    7d56:	mov	r0, r9
    7d58:	bl	e408 <memcmp>
    7d5c:	cmp	r0, #0
    7d5e:	bne.n	7d32 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    7d60:	subs	r0, r4, #1
    7d62:	ands.w	r4, r0, #255	; 0xff
    7d66:	bne.n	7cf4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    7d68:	mov	r0, r4
 fail:
    7d6a:	b.n	7d46 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    7d6c:	movs	r0, #1
    7d6e:	b.n	7d46 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    7d70:	.word	0x20027f40

00007d74 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7d74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d78:	vpush	{d8}
    7d7c:	sub	sp, #44	; 0x2c
    7d7e:	mov	r5, r1
    7d80:	mov	r7, r2
    7d82:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    7d84:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7d86:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    7d88:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    7d8a:	ldrb	r3, [r1, #0]
    7d8c:	tst.w	r3, #112	; 0x70
    7d90:	bne.n	7d9e <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    7d92:	movs	r0, #0
}
    7d94:	add	sp, #44	; 0x2c
    7d96:	vpop	{d8}
    7d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    7d9e:	ldr	r3, [sp, #28]
    7da0:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    7da2:	cmp	r3, #0
    7da4:	bne.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    7da6:	ldr	r3, [r2, #16]
    7da8:	movs	r2, #13
    seekSet(0);
    7daa:	movs	r1, #0
    7dac:	mov	r0, r5
    7dae:	adds	r3, #12
  uint8_t checksum = 0;
    7db0:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    7db4:	udiv	r3, r3, r2
    7db8:	uxtb	r3, r3
  uint8_t order = 0;
    7dba:	mov	r8, sl
  uint8_t freeFound = 0;
    7dbc:	mov	r4, sl
  bool fnameFound = false;
    7dbe:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    7dc0:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    7dc2:	ldrb	r3, [r7, #21]
    7dc4:	lsls	r2, r3, #30
    7dc6:	itett	ne
    7dc8:	ldrne	r3, [sp, #24]
    7dca:	moveq	r3, #1
    7dcc:	addne.w	r9, r3, #1
    7dd0:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    7dd4:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    7dd6:	str	r3, [sp, #8]
    7dd8:	bl	6d26 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7ddc:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    7de0:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7de4:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7de8:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    7dea:	movs	r1, #0
    7dec:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7dee:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    7df2:	bl	6ce8 <FatFile::readDirCache(bool)>
    if (!dir) {
    7df6:	cmp	r0, #0
    7df8:	bne.n	7ebe <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    7dfa:	ldrb	r3, [r5, #1]
    7dfc:	cmp	r3, #0
    7dfe:	bne.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7e00:	ldr	r3, [sp, #16]
    7e02:	lsls	r2, r3, #22
    7e04:	bpl.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    7e06:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    7e0a:	subs	r3, #1
    7e0c:	cmp	r3, #1
    7e0e:	bhi.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    7e10:	ldr	r3, [sp, #12]
    7e12:	cmp	r4, #0
    7e14:	it	eq
    7e16:	moveq	r3, r6
    7e18:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    7e1a:	ldr	r3, [sp, #8]
    7e1c:	cmp	r4, r3
    7e1e:	bcc.w	7fa2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    7e22:	cmp.w	fp, #0
    7e26:	bne.w	7fd8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    7e2a:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7e2c:	mov	r2, r7
    7e2e:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    7e30:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    7e32:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    7e34:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    7e38:	uxtab	r6, r3, r6
    7e3c:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7e3e:	mov	r3, fp
    7e40:	mov	r1, r6
    7e42:	bl	7aec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7e46:	cmp	r0, #0
    7e48:	beq.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    7e4a:	mov	r1, r6
    7e4c:	mov	r0, r5
    7e4e:	bl	6834 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    7e52:	mov	r4, r0
    7e54:	cmp	r0, #0
    7e56:	beq.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    7e58:	movs	r2, #32
    7e5a:	movs	r1, #0
    7e5c:	bl	9c1c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7e60:	ldr.w	r3, [r7, #22]
    7e64:	str	r3, [r4, #0]
    7e66:	ldr.w	r3, [r7, #26]
    7e6a:	str	r3, [r4, #4]
    7e6c:	ldrh	r3, [r7, #30]
    7e6e:	strh	r3, [r4, #8]
    7e70:	ldrb.w	r3, [r7, #32]
    7e74:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7e76:	ldrb	r3, [r7, #21]
    7e78:	and.w	r3, r3, #24
    7e7c:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    7e7e:	ldr	r3, [pc, #372]	; (7ff4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    7e80:	ldr	r3, [r3, #0]
    7e82:	cmp	r3, #0
    7e84:	beq.w	7fe8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    7e88:	add.w	r2, sp, #35	; 0x23
    7e8c:	add.w	r1, sp, #38	; 0x26
    7e90:	add	r0, sp, #36	; 0x24
    7e92:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    7e94:	ldrh.w	r3, [sp, #36]	; 0x24
    7e98:	strh	r3, [r4, #16]
    7e9a:	ldrh.w	r3, [sp, #38]	; 0x26
    7e9e:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    7ea0:	ldrb.w	r3, [sp, #35]	; 0x23
    7ea4:	strb	r3, [r4, #13]
    7ea6:	ldr	r3, [sp, #20]
    7ea8:	ldr	r2, [sp, #20]
    7eaa:	ldrb.w	r3, [r3, #40]	; 0x28
    7eae:	orr.w	r3, r3, #1
    7eb2:	strb.w	r3, [r2, #40]	; 0x28
  }
    7eb6:	b.n	7f90 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    7eb8:	mov.w	fp, #1
    7ebc:	b.n	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    7ebe:	ldrb	r2, [r0, #0]
    7ec0:	cmp	r2, #229	; 0xe5
    7ec2:	beq.n	7ec6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    7ec4:	cbnz	r2, 7ee8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7ec6:	ldr	r3, [sp, #12]
    7ec8:	cmp	r4, #0
    7eca:	it	eq
    7ecc:	moveq	r3, r6
    7ece:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    7ed0:	ldr	r3, [sp, #8]
    7ed2:	cmp	r4, r3
        freeFound++;
    7ed4:	itt	cc
    7ed6:	addcc	r4, #1
    7ed8:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    7eda:	cmp	r2, #0
    7edc:	beq.n	7e00 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7ede:	cmp	r2, #229	; 0xe5
    7ee0:	bne.n	7ef0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    7ee2:	mov.w	r9, #0
    7ee6:	b.n	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    7ee8:	ldr	r3, [sp, #8]
    7eea:	cmp	r4, r3
    7eec:	it	cc
    7eee:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7ef0:	cmp	r2, #46	; 0x2e
    7ef2:	beq.n	7ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7ef4:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    7ef6:	cmp	r1, #15
    7ef8:	bne.n	7f4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    7efa:	cmp.w	r9, #0
    7efe:	bne.n	7f3a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    7f00:	and.w	r8, r2, #31
        if (order != nameOrd ||
    7f04:	ldr	r3, [sp, #24]
    7f06:	cmp	r3, r8
    7f08:	bne.w	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    7f0c:	ands.w	r9, r2, #64	; 0x40
    7f10:	beq.w	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    7f14:	ldrb.w	sl, [r0, #13]
    7f18:	mov	r9, r3
      if (order == 1) {
    7f1a:	cmp.w	r8, #1
    7f1e:	bne.w	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    7f22:	adds	r1, r6, #1
    7f24:	mov	r3, r9
    7f26:	mov	r2, r7
    7f28:	mov	r0, r5
    7f2a:	uxth	r1, r1
    7f2c:	bl	7a5a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    7f30:	cmp	r0, #0
    7f32:	it	eq
    7f34:	moveq.w	r9, #0
    7f38:	b.n	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7f3a:	add.w	r8, r8, #4294967295
    7f3e:	uxtb.w	r8, r8
    7f42:	cmp	r2, r8
    7f44:	bne.n	7ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    7f46:	ldrb	r2, [r0, #13]
    7f48:	cmp	r2, sl
    7f4a:	beq.n	7f1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    7f4c:	b.n	7ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    7f4e:	lsls	r3, r1, #28
    7f50:	bmi.n	7ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    7f52:	cmp.w	r9, #0
    7f56:	beq.n	7f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7f58:	cmp.w	r8, #1
    7f5c:	bne.w	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    7f60:	bl	7a3c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    7f64:	cmp	r0, sl
    7f66:	bne.w	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    7f6a:	mov	fp, r9
    7f6c:	b.n	7f88 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7f6e:	movs	r2, #11
    7f70:	vmov	r1, s16
    7f74:	bl	e408 <memcmp>
    7f78:	cmp	r0, #0
    7f7a:	bne.w	7de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    7f7e:	ldrb.w	fp, [r7, #21]
    7f82:	ands.w	fp, fp, #1
    7f86:	bne.n	7eb8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    7f88:	ldr	r3, [sp, #16]
    7f8a:	lsls	r1, r3, #20
    7f8c:	bmi.w	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    7f90:	ldr	r3, [sp, #16]
    7f92:	mov	r2, r6
    7f94:	mov	r1, r5
    7f96:	ldr	r0, [sp, #28]
    7f98:	str.w	fp, [sp]
    7f9c:	bl	6e12 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7fa0:	b.n	7d94 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    7fa2:	movs	r1, #0
    7fa4:	mov	r0, r5
    7fa6:	bl	6ce8 <FatFile::readDirCache(bool)>
    if (!dir) {
    7faa:	cbnz	r0, 7fd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    7fac:	ldrb	r3, [r5, #1]
    7fae:	cmp	r3, #0
    7fb0:	bne.w	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    7fb4:	mov	r0, r5
    7fb6:	bl	6a74 <FatFile::addDirCluster()>
    7fba:	cmp	r0, #0
    7fbc:	beq.w	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    7fc0:	ldr	r3, [sp, #20]
    7fc2:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    7fc4:	add.w	r3, r4, r3, lsl #4
    7fc8:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    7fca:	ldr	r3, [sp, #8]
    7fcc:	cmp	r3, r4
    7fce:	bhi.n	7fb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    7fd0:	b.n	7e22 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    7fd2:	adds	r4, #1
    7fd4:	uxtb	r4, r4
    7fd6:	b.n	7e1a <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    7fd8:	mov	r1, r7
    7fda:	mov	r0, r5
    7fdc:	bl	7cdc <FatFile::makeUniqueSfn(FatLfn_t*)>
    7fe0:	cmp	r0, #0
    7fe2:	bne.w	7e2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    7fe6:	b.n	7d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    7fe8:	movw	r3, #22561	; 0x5821
    7fec:	strh	r3, [r4, #16]
    7fee:	strh	r3, [r4, #24]
    7ff0:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    7ff2:	b.n	7ea6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    7ff4:	.word	0x200271fc

00007ff8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7ff8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7ffa:	mov	r4, r2
    7ffc:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7ffe:	mov	r0, r1
    8000:	ldrb.w	r3, [r1], #1
    8004:	cmp	r3, #32
    8006:	beq.n	7ffe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    8008:	movs	r5, #0
    800a:	ldr	r7, [pc, #148]	; (80a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    800c:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    800e:	ldrb	r3, [r0, #0]
    8010:	cbnz	r3, 8060 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8012:	ldr	r3, [r4, #16]
    8014:	subs	r3, #1
    8016:	cmp	r3, #254	; 0xfe
    8018:	bhi.n	8042 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    801a:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    801c:	ldrb.w	r3, [r0], #1
    8020:	cmp	r3, #32
    8022:	beq.n	801a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    8024:	cmp	r3, #47	; 0x2f
    8026:	beq.n	801a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    8028:	mov	r0, r4
  *ptr = path;
    802a:	str	r2, [r6, #0]

 fail:
  return false;
}
    802c:	add	sp, #12
    802e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    8032:	b.w	7bb8 <FatFile::makeSFN(FatLfn_t*)>
    8036:	subs	r1, #34	; 0x22
    8038:	uxtb	r1, r1
    803a:	lsr.w	r1, r7, r1
    803e:	lsls	r2, r1, #31
    8040:	bpl.n	809a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    8042:	movs	r0, #0
    8044:	add	sp, #12
    8046:	pop	{r4, r5, r6, r7, pc}
    8048:	cmp	r1, #92	; 0x5c
    804a:	beq.n	8042 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    804c:	bhi.n	805a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    804e:	subs	r1, #62	; 0x3e
    8050:	cmp	r1, #1
    8052:	bls.n	8042 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    8054:	str	r5, [r4, #16]
      fname->end = path;
    8056:	str	r0, [r4, #8]
    8058:	b.n	800e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    805a:	cmp	r1, #124	; 0x7c
    805c:	beq.n	8042 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    805e:	b.n	8054 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8060:	cmp	r3, #47	; 0x2f
    8062:	beq.n	8012 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8064:	add	r2, sp, #4
    8066:	adds	r1, r0, #4
    8068:	bl	508c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    806c:	cmp	r0, #0
    806e:	beq.n	8042 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8070:	ldr	r3, [sp, #4]
    8072:	cmp.w	r3, #65536	; 0x10000
    8076:	ite	cc
    8078:	movcc	r2, #1
    807a:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    807c:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    807e:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8080:	bhi.n	8054 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8082:	cmp	r3, #60	; 0x3c
    8084:	uxtb	r1, r3
    8086:	bhi.n	8048 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    8088:	cmp	r1, #33	; 0x21
    808a:	bhi.n	8036 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    808c:	cmp	r1, #31
    808e:	bls.n	8042 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8090:	cmp	r3, #46	; 0x2e
    8092:	beq.n	800e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8094:	cmp	r3, #32
    8096:	beq.n	800e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8098:	b.n	8054 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    809a:	cmp	r3, #46	; 0x2e
    809c:	b.n	8096 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    809e:	nop
    80a0:	.word	0x05002101

000080a4 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    80a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    80a8:	movs	r3, #0
    80aa:	sub	sp, #40	; 0x28
    80ac:	mov	r4, r0
    80ae:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    80b0:	ldrb	r3, [r0, #2]
    80b2:	lsls	r2, r3, #30
    80b4:	bmi.n	80be <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    80b6:	movs	r0, #0
}
    80b8:	add	sp, #40	; 0x28
    80ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    80be:	ldr	r1, [r0, #32]
    80c0:	cmp	r1, #0
    80c2:	bne.n	8150 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    80c4:	movs	r1, #1
    80c6:	mov	r0, r4
    80c8:	bl	6ae4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    80cc:	mov	r5, r0
    80ce:	cmp	r0, #0
    80d0:	beq.n	80b6 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    80d2:	bl	7a3c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    80d6:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    80d8:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    80da:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    80dc:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    80de:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    80e0:	ldr	r0, [r4, #8]
  m_flags = 0;
    80e2:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    80e4:	bl	6a18 <FatPartition::cacheSync()>
    80e8:	cmp	r0, #0
    80ea:	beq.n	80b6 <FatFile::remove()+0x12>
  if (!isLFN()) {
    80ec:	ldrb	r3, [r4, #3]
    80ee:	cmp	r3, #0
    80f0:	beq.n	80b8 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    80f2:	mov	r1, r4
    80f4:	add	r0, sp, #4
    80f6:	bl	6b0e <FatFile::openCluster(FatFile*)>
    80fa:	cmp	r0, #0
    80fc:	beq.n	80b6 <FatFile::remove()+0x12>
    80fe:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8100:	uxtb.w	r8, r5
    8104:	ldrb	r3, [r4, #3]
    8106:	cmp	r3, r8
    8108:	bcc.n	80b6 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    810a:	ldrh	r1, [r4, #4]
    810c:	add	r0, sp, #4
    810e:	subs	r1, r1, r5
    8110:	uxth	r1, r1
    8112:	bl	6834 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8116:	cmp	r0, #0
    8118:	beq.n	80b6 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    811a:	ldrb	r3, [r0, #11]
    811c:	cmp	r3, #15
    811e:	bne.n	80b6 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8120:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8122:	and.w	r3, r2, #31
    8126:	cmp	r3, r8
    8128:	bne.n	80b6 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    812a:	ldrb	r3, [r0, #13]
    812c:	cmp	r3, r6
    812e:	bne.n	80b6 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    8130:	strb	r7, [r0, #0]
    if (last) {
    8132:	adds	r5, #1
    m_vol->cacheDirty();
    8134:	ldr	r1, [r4, #8]
    if (last) {
    8136:	uxth	r5, r5
    8138:	ldrb.w	r3, [r1, #40]	; 0x28
    813c:	orr.w	r3, r3, #1
    8140:	strb.w	r3, [r1, #40]	; 0x28
    8144:	lsls	r3, r2, #25
    8146:	bpl.n	8100 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8148:	ldr	r0, [r4, #8]
    814a:	bl	6a18 <FatPartition::cacheSync()>
    814e:	b.n	80b8 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8150:	ldr	r0, [r0, #8]
    8152:	bl	77fa <FatPartition::freeChain(unsigned long)>
    8156:	cmp	r0, #0
    8158:	bne.n	80c4 <FatFile::remove()+0x20>
    815a:	b.n	80b6 <FatFile::remove()+0x12>

0000815c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    815c:	push	{r4, lr}
    815e:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8160:	ldr	r0, [r0, #56]	; 0x38
    8162:	cbz	r0, 8170 <FsBaseFile::close()+0x14>
    8164:	bl	6ff0 <FatFile::close()>
    8168:	cbz	r0, 8170 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    816a:	movs	r3, #0
    816c:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    816e:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8170:	ldr	r0, [r4, #60]	; 0x3c
    8172:	cbnz	r0, 8178 <FsBaseFile::close()+0x1c>
  return false;
    8174:	movs	r0, #0
    8176:	b.n	816e <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    8178:	bl	5432 <ExFatFile::close()>
    817c:	cmp	r0, #0
    817e:	beq.n	8174 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8180:	movs	r3, #0
    8182:	str	r3, [r4, #60]	; 0x3c
    return true;
    8184:	b.n	816e <FsBaseFile::close()+0x12>

00008186 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    8186:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8188:	push	{r4, r5, r6, lr}
    818a:	mov	r6, r0
    818c:	mov	r5, r1
  if (this == &from) return *this;
    818e:	beq.n	81b8 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8190:	bl	815c <FsBaseFile::close()>
  if (from.m_fFile) {
    8194:	ldr	r4, [r5, #56]	; 0x38
    8196:	cbz	r4, 81bc <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8198:	mov	r1, r6
    819a:	movs	r0, #36	; 0x24
    819c:	bl	83b8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    81a0:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    81a2:	mov	r4, r0
    81a4:	strh	r3, [r0, #0]
    81a6:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    81a8:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    81aa:	ldr	r5, [r5, #56]	; 0x38
    81ac:	ldmia	r5!, {r0, r1, r2, r3}
    81ae:	stmia	r4!, {r0, r1, r2, r3}
    81b0:	ldmia	r5!, {r0, r1, r2, r3}
    81b2:	stmia	r4!, {r0, r1, r2, r3}
    81b4:	ldr	r3, [r5, #0]
    81b6:	str	r3, [r4, #0]
}
    81b8:	mov	r0, r6
    81ba:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    81bc:	ldr	r3, [r5, #60]	; 0x3c
    81be:	cmp	r3, #0
    81c0:	beq.n	81b8 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    81c2:	mov	r1, r6
    81c4:	movs	r0, #56	; 0x38
    81c6:	bl	83b8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    81ca:	strb.w	r4, [r0, #49]	; 0x31
    81ce:	strh	r4, [r0, #50]	; 0x32
    81d0:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    81d2:	ldr	r3, [r5, #60]	; 0x3c
    81d4:	add.w	r2, r3, #52	; 0x34
    81d8:	ldr.w	r1, [r3], #4
    81dc:	cmp	r3, r2
    81de:	str.w	r1, [r0], #4
    81e2:	bne.n	81d8 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    81e4:	b.n	81b8 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

000081e6 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    81e6:	push	{r0, r1, r4, r5, r6, lr}
    81e8:	mov	r4, r0
  if (!vol) {
    81ea:	mov	r5, r1
    81ec:	cbnz	r1, 81f4 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    81ee:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    81f0:	add	sp, #8
    81f2:	pop	{r4, r5, r6, pc}
    81f4:	strd	r2, r3, [sp]
  close();
    81f8:	bl	815c <FsBaseFile::close()>
  if (vol->m_fVol) {
    81fc:	ldr.w	r6, [r5, #1152]	; 0x480
    8200:	ldrd	r2, r3, [sp]
    8204:	cbz	r6, 822c <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    8206:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    8208:	mov	r1, r4
    820a:	movs	r0, #36	; 0x24
    820c:	bl	83b8 <operator new(unsigned int, unsigned long*)>
    8210:	strh	r6, [r0, #0]
    8212:	strb	r6, [r0, #2]
    8214:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    8216:	ldr.w	r1, [r5, #1152]	; 0x480
    821a:	ldrd	r2, r3, [sp]
    821e:	bl	709e <FatFile::open(FatVolume*, char const*, int)>
    8222:	cbz	r0, 8228 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    8224:	movs	r0, #1
    8226:	b.n	81f0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    8228:	str	r0, [r4, #56]	; 0x38
    822a:	b.n	81f0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    822c:	ldr.w	r1, [r5, #1156]	; 0x484
    8230:	strd	r2, r3, [sp]
    8234:	cmp	r1, #0
    8236:	beq.n	81ee <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    8238:	mov	r1, r4
    823a:	movs	r0, #56	; 0x38
    823c:	bl	83b8 <operator new(unsigned int, unsigned long*)>
    8240:	strb.w	r6, [r0, #49]	; 0x31
    8244:	strh	r6, [r0, #50]	; 0x32
    8246:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8248:	ldr.w	r1, [r5, #1156]	; 0x484
    824c:	ldrd	r2, r3, [sp]
    8250:	bl	5b92 <ExFatFile::open(ExFatVolume*, char const*, int)>
    8254:	cmp	r0, #0
    8256:	bne.n	8224 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    8258:	str	r0, [r4, #60]	; 0x3c
    825a:	b.n	81f0 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

0000825c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    825c:	push	{r0, r1, r4, r5, r6, lr}
    825e:	mov	r5, r1
    8260:	str	r2, [sp, #4]
    8262:	mov	r4, r0
  close();
    8264:	bl	815c <FsBaseFile::close()>
  if (dir->m_fFile) {
    8268:	ldr	r6, [r5, #56]	; 0x38
    826a:	ldr	r2, [sp, #4]
    826c:	cbz	r6, 8292 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    826e:	mov	r1, r4
    8270:	movs	r0, #36	; 0x24
    8272:	bl	83b8 <operator new(unsigned int, unsigned long*)>
    8276:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8278:	ldr	r2, [sp, #4]
    827a:	strh	r1, [r0, #0]
    827c:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    827e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8280:	ldr	r1, [r5, #56]	; 0x38
    8282:	bl	6ed4 <FatFile::openNext(FatFile*, int)>
    8286:	cbz	r0, 828e <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    8288:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    828a:	add	sp, #8
    828c:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    828e:	str	r0, [r4, #56]	; 0x38
    8290:	b.n	828a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8292:	ldr	r0, [r5, #60]	; 0x3c
    8294:	str	r2, [sp, #4]
    8296:	cmp	r0, #0
    8298:	beq.n	828a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    829a:	mov	r1, r4
    829c:	movs	r0, #56	; 0x38
    829e:	bl	83b8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    82a2:	ldr	r2, [sp, #4]
    82a4:	strb.w	r6, [r0, #49]	; 0x31
    82a8:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    82aa:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    82ac:	ldr	r1, [r5, #60]	; 0x3c
    82ae:	bl	5ba0 <ExFatFile::openNext(ExFatFile*, int)>
    82b2:	cmp	r0, #0
    82b4:	bne.n	8288 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    82b6:	str	r0, [r4, #60]	; 0x3c
    82b8:	b.n	828a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

000082bc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    82bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    82c0:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    82c2:	mov	r4, r0
    82c4:	mov	r6, r3
  m_blockDev = blockDev;
    82c6:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    82ca:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    82ce:	mov	r1, r0
    82d0:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    82d4:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    82d6:	bl	83b8 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    82da:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    82dc:	strb.w	r7, [r0, #1092]	; 0x444
    82e0:	mov	r5, r0
    82e2:	strb.w	r7, [r0, #1145]	; 0x479
    82e6:	strh.w	r7, [r0, #1146]	; 0x47a
    82ea:	str.w	r0, [r4, #1156]	; 0x484
    82ee:	ldr.w	r1, [r4, #1160]	; 0x488
    82f2:	ldr.w	r8, [pc, #152]	; 838c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    82f6:	bl	5ee4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    82fa:	cbz	r0, 832c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    82fc:	add.w	r7, r5, #1096	; 0x448
    8300:	mov	r0, r7
    8302:	bl	5432 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8306:	mov	r1, r5
    8308:	mov	r0, r7
    830a:	bl	5446 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    830e:	cbz	r0, 832c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8310:	ldr	r3, [pc, #112]	; (8384 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    8312:	ldr	r2, [r3, #0]
    8314:	cbnz	r2, 8318 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    8316:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    8318:	cmp.w	r9, #0
    831c:	bne.n	8324 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    831e:	ldr.w	r3, [r8]
    8322:	cbnz	r3, 8328 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    8324:	str.w	r4, [r8]
  }
  return true;
    8328:	movs	r0, #1
    832a:	b.n	837e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    832c:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    832e:	mov	r1, r4
    8330:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    8334:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    8338:	bl	83b8 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    833c:	movs	r3, #2
    833e:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8340:	mov	r2, r6
    8342:	strb	r3, [r0, #8]
    8344:	mov	r5, r0
    8346:	strh.w	r7, [r0, #1096]	; 0x448
    834a:	strb.w	r7, [r0, #1098]	; 0x44a
    834e:	str.w	r0, [r4, #1152]	; 0x480
    8352:	ldr.w	r1, [r4, #1160]	; 0x488
    8356:	bl	78e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    835a:	cbz	r0, 8374 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    835c:	add.w	r6, r5, #1096	; 0x448
    8360:	mov	r0, r6
    8362:	bl	6ff0 <FatFile::close()>
    return m_vwd.openRoot(this);
    8366:	mov	r1, r5
    8368:	mov	r0, r6
    836a:	bl	6b02 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    836e:	cbz	r0, 8374 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8370:	ldr	r3, [pc, #20]	; (8388 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8372:	b.n	8312 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8374:	movs	r0, #0
    8376:	str.w	r0, [r8]
  m_fVol = nullptr;
    837a:	str.w	r0, [r4, #1152]	; 0x480
}
    837e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8382:	nop
    8384:	.word	0x20027200
    8388:	.word	0x20027238
    838c:	.word	0x20027234

00008390 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8390:	push	{r3, r4, r5, lr}
    8392:	mov	r4, r0
    8394:	mov.w	r5, #1000	; 0x3e8
    8398:	movs	r0, #0
    839a:	strd	r0, r5, [r4, #4]
    839e:	strb	r0, [r4, #12]
    83a0:	ldr	r5, [pc, #16]	; (83b4 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    83a2:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    83a6:	mov	r0, r4
    83a8:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    83ac:	bl	81e6 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    83b0:	mov	r0, r4
    83b2:	pop	{r3, r4, r5, pc}
    83b4:	.word	0x20000548

000083b8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    83b8:	mov	r0, r1
    83ba:	bx	lr

000083bc <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    83bc:	mov.w	r0, #4294967295
    83c0:	bx	lr

000083c2 <SharedSpiCard::errorCode() const>:
  }
    83c2:	ldrb	r0, [r0, #17]
    83c4:	bx	lr

000083c6 <SharedSpiCard::errorData() const>:
  }
    83c6:	ldrb	r0, [r0, #20]
    83c8:	bx	lr

000083ca <SharedSpiCard::type() const>:
  }
    83ca:	ldrb	r0, [r0, #21]
    83cc:	bx	lr

000083ce <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    83ce:	movs	r0, #1
    83d0:	bx	lr

000083d2 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    83d2:	ldrb	r0, [r0, #28]
    83d4:	bx	lr

000083d6 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    83d6:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    83d8:	push	{r4}
  return readSectors(sector, dst, 1);
    83da:	ldr	r4, [r3, #20]
    83dc:	movs	r3, #1
    83de:	mov	ip, r4
}
    83e0:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    83e4:	bx	ip

000083e6 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    83e6:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    83e8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    83ea:	mov	r4, r0
    83ec:	mov	r5, r1
  if (!syncDevice()) {
    83ee:	ldr	r3, [r3, #32]
    83f0:	blx	r3
    83f2:	cbz	r0, 83f6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    83f4:	strb	r5, [r4, #28]
  return true;
}
    83f6:	pop	{r3, r4, r5, pc}

000083f8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    83f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83fc:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    83fe:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8400:	mov	r4, r0
    8402:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8404:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8406:	mov	r6, r2
    8408:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    840c:	bne.n	8414 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    840e:	ldr	r3, [r0, #24]
    8410:	cmp	r3, r1
    8412:	beq.n	8428 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    8414:	ldr	r3, [r4, #0]
    8416:	mov	r1, r5
    8418:	mov	r0, r4
    841a:	ldr	r3, [r3, #96]	; 0x60
    841c:	blx	r3
    841e:	cbnz	r0, 8426 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8420:	movs	r0, #0
}
    8422:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8426:	str	r5, [r4, #24]
    8428:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    842c:	cmp	r5, r8
    842e:	bne.n	8448 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    8430:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8432:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8434:	add	r3, r6
    8436:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8438:	cmp	r0, #0
    843a:	bne.n	8422 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    843c:	ldr	r3, [r4, #0]
    843e:	mov	r0, r4
    8440:	ldr	r3, [r3, #100]	; 0x64
}
    8442:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    8446:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8448:	mov	r1, r9
    844a:	mov	r0, r5
    844c:	blx	r7
    if (!writeData(src)) {
    844e:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8450:	mov	r1, r0
    if (!writeData(src)) {
    8452:	mov	r0, r4
    8454:	ldr	r3, [r3, #92]	; 0x5c
    8456:	adds	r5, #1
    8458:	blx	r3
    845a:	cmp	r0, #0
    845c:	bne.n	842c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    845e:	b.n	8420 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008460 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8460:	bx	lr

00008462 <SharedSpiCard::end()>:
    m_spiDriver.end();
    8462:	adds	r0, #4
    8464:	b.w	9b9c <SdSpiArduinoDriver::end()>

00008468 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8468:	push	{r4, lr}
    846a:	mov	r4, r0
    846c:	movs	r1, #32
    846e:	bl	c354 <operator delete(void*, unsigned int)>
    8472:	mov	r0, r4
    8474:	pop	{r4, pc}

00008476 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8476:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8478:	ldr	r3, [r0, #0]
    847a:	mov	r1, sp
    847c:	ldr	r3, [r3, #76]	; 0x4c
    847e:	blx	r3
    8480:	cbz	r0, 84c8 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8482:	ldrb.w	r3, [sp]
    8486:	ands.w	r3, r3, #192	; 0xc0
    848a:	bne.n	84ce <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    848c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8490:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8494:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8498:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    849c:	lsls	r0, r0, #2
    849e:	orr.w	r0, r0, r3, lsl #10
    84a2:	ldrb.w	r3, [sp, #8]
    84a6:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    84aa:	ldrb.w	r3, [sp, #9]
    84ae:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    84b2:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    84b4:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    84b6:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    84ba:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    84be:	and.w	r2, r2, #15
    84c2:	add	r3, r2
    84c4:	subs	r3, #7
    84c6:	lsls	r0, r3
}
    84c8:	add	sp, #20
    84ca:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    84ce:	cmp	r3, #64	; 0x40
    84d0:	bne.n	84f0 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    84d2:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    84d6:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    84da:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    84dc:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    84e0:	add.w	r0, r0, r3, lsl #16
    84e4:	ldrb.w	r3, [sp, #8]
    84e8:	add.w	r0, r0, r3, lsl #8
    84ec:	lsls	r0, r0, #10
    84ee:	b.n	84c8 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    84f0:	movs	r0, #0
    84f2:	b.n	84c8 <SharedSpiCard::sectorCount()+0x52>

000084f4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    84f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84f8:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    84fa:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    84fc:	mov	r4, r0
    84fe:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8500:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    8502:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8504:	bne.n	850c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    8506:	ldr	r3, [r0, #24]
    8508:	cmp	r3, r1
    850a:	beq.n	8520 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    850c:	ldr	r3, [r4, #0]
    850e:	mov	r1, r5
    8510:	mov	r0, r4
    8512:	ldr	r3, [r3, #96]	; 0x60
    8514:	blx	r3
    8516:	cbnz	r0, 851e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    8518:	movs	r0, #0
}
    851a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    851e:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8520:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    8522:	cmp	r6, r5
    8524:	add.w	r1, r7, r5, lsl #9
    8528:	bne.n	8542 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    852a:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    852c:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    852e:	add	r3, r6
    8530:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8532:	cmp	r0, #0
    8534:	bne.n	851a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    8536:	ldr	r3, [r4, #0]
    8538:	mov	r0, r4
    853a:	ldr	r3, [r3, #100]	; 0x64
}
    853c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8540:	bx	r3
    if (!writeData(src)) {
    8542:	ldr	r3, [r4, #0]
    8544:	mov	r0, r4
    8546:	ldr	r3, [r3, #92]	; 0x5c
    8548:	blx	r3
    854a:	cmp	r0, #0
    854c:	beq.n	8518 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    854e:	adds	r5, #1
    8550:	b.n	8522 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00008552 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    8552:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    8554:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    8556:	mov	r4, r0
  if (!m_spiActive) {
    8558:	cbnz	r6, 8576 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    855a:	adds	r5, r0, #4
    855c:	mov	r0, r5
    855e:	bl	9b40 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8562:	mov	r1, r6
    8564:	ldrb	r0, [r4, #16]
    8566:	bl	9c16 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    856a:	movs	r1, #255	; 0xff
    856c:	mov	r0, r5
    856e:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8572:	movs	r3, #1
    8574:	strb	r3, [r4, #18]
}
    8576:	pop	{r4, r5, r6, pc}

00008578 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    8578:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    857a:	push	{r0, r1, r4, lr}
    857c:	mov	r4, r0
  if (m_spiActive) {
    857e:	cbz	r3, 859c <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    8580:	movs	r1, #1
    8582:	ldrb	r0, [r0, #16]
    8584:	bl	9c16 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8588:	adds	r0, r4, #4
    858a:	movs	r1, #255	; 0xff
    858c:	str	r0, [sp, #4]
    858e:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8592:	ldr	r0, [sp, #4]
    8594:	bl	9b4e <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8598:	movs	r3, #0
    859a:	strb	r3, [r4, #18]
}
    859c:	add	sp, #8
    859e:	pop	{r4, pc}

000085a0 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    85a0:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    85a2:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    85a4:	mov	r4, r0
  if (m_state == READ_STATE) {
    85a6:	cmp	r3, #1
    85a8:	beq.n	85cc <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    85aa:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    85ac:	cbnz	r6, 85b2 <SharedSpiCard::isBusy()+0x12>
    spiStart();
    85ae:	bl	8552 <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    85b2:	adds	r0, r4, #4
    85b4:	bl	9ba2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    85b8:	subs.w	r5, r0, #255	; 0xff
    85bc:	it	ne
    85be:	movne	r5, #1
  if (!spiActive) {
    85c0:	cbnz	r6, 85c8 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    85c2:	mov	r0, r4
    85c4:	bl	8578 <SharedSpiCard::spiStop()>
}
    85c8:	mov	r0, r5
    85ca:	pop	{r4, r5, r6, pc}
    return false;
    85cc:	movs	r5, #0
    85ce:	b.n	85c8 <SharedSpiCard::isBusy()+0x28>

000085d0 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    85d0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85d2:	ldr	r7, [pc, #96]	; (8634 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    85d4:	mov	r4, r0
    85d6:	adds	r6, r0, #4
    85d8:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    85da:	add.w	r5, r5, #300	; 0x12c
    85de:	uxth	r5, r5
    85e0:	mov	r0, r6
    85e2:	strd	r1, r2, [sp]
    85e6:	bl	9ba2 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    85ea:	cmp	r0, #255	; 0xff
    85ec:	strb	r0, [r4, #20]
    85ee:	ldrd	r1, r2, [sp]
    85f2:	beq.n	8614 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    85f4:	cmp	r0, #254	; 0xfe
    85f6:	bne.n	862a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    85f8:	mov	r0, r6
    85fa:	bl	9bac <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    85fe:	strb	r0, [r4, #20]
    8600:	cbnz	r0, 862e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    8602:	mov	r0, r6
    8604:	bl	9ba2 <SdSpiArduinoDriver::receive()>
    8608:	mov	r0, r6
    860a:	bl	9ba2 <SdSpiArduinoDriver::receive()>
  return true;
    860e:	movs	r0, #1
}
    8610:	add	sp, #12
    8612:	pop	{r4, r5, r6, r7, pc}
    8614:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8616:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8618:	lsls	r3, r3, #16
    861a:	bpl.n	85e0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    861c:	movs	r3, #29
  spiStop();
    861e:	mov	r0, r4
    m_errorCode = code;
    8620:	strb	r3, [r4, #17]
    8622:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    8626:	movs	r0, #0
    8628:	b.n	8610 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    862a:	movs	r3, #24
    862c:	b.n	861e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    862e:	movs	r3, #37	; 0x25
    8630:	b.n	861e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8632:	nop
    8634:	.word	0x20027f40

00008638 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    8638:	mov.w	r2, #512	; 0x200
    863c:	b.w	85d0 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00008640 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    8640:	push	{r4, r5, r6, lr}
    8642:	ldr	r6, [pc, #36]	; (8668 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    8644:	adds	r5, r0, #4
    8646:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    8648:	add	r1, r3
    864a:	uxth	r4, r1
    864c:	mov	r0, r5
    864e:	bl	9ba2 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8652:	cmp	r0, #255	; 0xff
    8654:	bne.n	865a <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    8656:	movs	r0, #1
}
    8658:	pop	{r4, r5, r6, pc}
    865a:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    865c:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    865e:	lsls	r3, r3, #16
    8660:	bpl.n	864c <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    8662:	movs	r0, #0
    8664:	b.n	8658 <SharedSpiCard::waitReady(unsigned short)+0x18>
    8666:	nop
    8668:	.word	0x20027f40

0000866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    866c:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    866e:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8672:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8674:	mov	r4, r0
    8676:	str	r2, [sp, #4]
    8678:	mov	r5, r1
  if (!syncDevice()) {
    867a:	blx	r3
    867c:	cmp	r0, #0
    867e:	beq.n	86f2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    8680:	ldrb	r3, [r4, #18]
    8682:	cbnz	r3, 868a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    8684:	mov	r0, r4
    8686:	bl	8552 <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    868a:	cmp	r5, #12
    868c:	bne.n	86e0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    868e:	adds	r6, r4, #4
    8690:	movs	r7, #3
    spiSend(pa[i]);
    8692:	add.w	r8, sp, #4
    8696:	orr.w	r1, r5, #64	; 0x40
    869a:	mov	r0, r6
    869c:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    86a0:	ldrb.w	r1, [r8, r7]
    86a4:	mov	r0, r6
    86a6:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    86aa:	subs	r7, #1
    86ac:	bcs.n	86a0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    86ae:	cmp	r5, #0
    86b0:	mov	r0, r6
    return m_spiDriver.receive();
    86b2:	mov.w	r5, #10
    m_spiDriver.send(data);
    86b6:	ite	eq
    86b8:	moveq	r1, #149	; 0x95
    86ba:	movne	r1, #135	; 0x87
    86bc:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    86c0:	mov	r0, r6
    86c2:	bl	9ba2 <SdSpiArduinoDriver::receive()>
    86c6:	mov	r0, r6
    86c8:	bl	9ba2 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    86cc:	lsls	r3, r0, #24
    m_status = spiReceive();
    86ce:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    86d0:	bpl.n	86da <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    86d2:	subs	r5, #1
    86d4:	uxth	r5, r5
    86d6:	cmp	r5, #0
    86d8:	bne.n	86c6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    86da:	add	sp, #8
    86dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    86e0:	mov.w	r1, #300	; 0x12c
    86e4:	mov	r0, r4
    86e6:	bl	8640 <SharedSpiCard::waitReady(unsigned short)>
    86ea:	cmp	r0, #0
    86ec:	bne.n	868e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    86ee:	cmp	r5, #0
    86f0:	beq.n	868e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    86f2:	movs	r0, #255	; 0xff
    86f4:	b.n	86da <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

000086f6 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    86f6:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    86f8:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    86fa:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    86fc:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    86fe:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8700:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8704:	cbz	r0, 8714 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8706:	movs	r3, #18
  spiStop();
    8708:	mov	r0, r4
    870a:	strb	r3, [r4, #17]
    870c:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    8710:	movs	r0, #0
}
    8712:	pop	{r3, r4, r5, r6, r7, pc}
    8714:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8716:	adds	r7, r4, #4
    8718:	mov	r0, r7
    871a:	bl	9ba2 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    871e:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8722:	cmp	r6, r5
    8724:	bne.n	8718 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8726:	mov	r0, r4
    8728:	bl	8578 <SharedSpiCard::spiStop()>
    872c:	movs	r0, #1
    872e:	b.n	8712 <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00008730 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8730:	push	{r3, r4, r5, lr}
    8732:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    8734:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8736:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8738:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    873c:	cbz	r0, 874c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    873e:	movs	r3, #27
    8740:	strb	r3, [r4, #17]
  spiStop();
    8742:	mov	r0, r4
  return false;
    8744:	movs	r5, #0
  spiStop();
    8746:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    874a:	b.n	8762 <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    874c:	mov	r1, r5
    874e:	movs	r2, #16
    8750:	mov	r0, r4
    8752:	bl	85d0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8756:	mov	r5, r0
    8758:	cmp	r0, #0
    875a:	beq.n	8742 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    875c:	mov	r0, r4
    875e:	bl	8578 <SharedSpiCard::spiStop()>
}
    8762:	mov	r0, r5
    8764:	pop	{r3, r4, r5, pc}

00008766 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    8766:	mov	r2, r1
    return readRegister(CMD9, csd);
    8768:	movs	r1, #9
    876a:	b.w	8730 <SharedSpiCard::readRegister(unsigned char, void*)>

0000876e <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    876e:	mov	r2, r1
    return readRegister(CMD10, cid);
    8770:	movs	r1, #10
    8772:	b.w	8730 <SharedSpiCard::readRegister(unsigned char, void*)>

00008776 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    8776:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8778:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    877a:	mov	r5, r1
    877c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    877e:	ldr	r3, [r3, #88]	; 0x58
    8780:	blx	r3
    8782:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8784:	mov.w	r1, #18
    8788:	mov	r0, r4
    sector <<= 9;
    878a:	it	ne
    878c:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    878e:	mov	r2, r5
    8790:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8794:	cbz	r0, 87a4 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8796:	movs	r3, #12
  spiStop();
    8798:	mov	r0, r4
    879a:	strb	r3, [r4, #17]
    879c:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    87a0:	movs	r0, #0
}
    87a2:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    87a4:	movs	r0, #1
    87a6:	strb	r0, [r4, #19]
  return true;
    87a8:	b.n	87a2 <SharedSpiCard::readStart(unsigned long)+0x2c>

000087aa <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    87aa:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    87ac:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    87ae:	movs	r1, #12
bool SharedSpiCard::readStop() {
    87b0:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    87b2:	mov	r2, r4
  m_state = IDLE_STATE;
    87b4:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    87b6:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    87ba:	cbz	r0, 87ca <SharedSpiCard::readStop()+0x20>
    87bc:	movs	r3, #9
  spiStop();
    87be:	mov	r0, r5
    87c0:	strb	r3, [r5, #17]
    87c2:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    87c6:	mov	r0, r4
}
    87c8:	pop	{r3, r4, r5, pc}
  spiStop();
    87ca:	mov	r0, r5
    87cc:	bl	8578 <SharedSpiCard::spiStop()>
  return true;
    87d0:	movs	r0, #1
    87d2:	b.n	87c8 <SharedSpiCard::readStop()+0x1e>

000087d4 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    87d4:	ldrb	r2, [r0, #19]
    87d6:	cmp	r2, #2
    87d8:	bne.n	87e0 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    87da:	ldr	r3, [r0, #0]
    87dc:	ldr	r3, [r3, #100]	; 0x64
    87de:	bx	r3
  if (m_state == READ_STATE) {
    87e0:	cmp	r2, #1
    87e2:	bne.n	87e8 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    87e4:	b.w	87aa <SharedSpiCard::readStop()>
}
    87e8:	movs	r0, #1
    87ea:	bx	lr

000087ec <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    87ec:	push	{r3, r4, r5, r6, r7, lr}
    87ee:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    87f0:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    87f2:	mov	r4, r0
    87f4:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    87f6:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    87f8:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    87fa:	bne.n	8802 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    87fc:	ldr	r3, [r0, #24]
    87fe:	cmp	r3, r1
    8800:	beq.n	8812 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8802:	mov	r1, r5
    8804:	mov	r0, r4
    8806:	bl	8776 <SharedSpiCard::readStart(unsigned long)>
    880a:	cbnz	r0, 8810 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    880c:	movs	r0, #0
}
    880e:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8810:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8812:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8814:	cmp	r5, r6
    8816:	add.w	r1, r7, r5, lsl #9
    881a:	bne.n	8832 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    881c:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    881e:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8820:	add	r3, r5
    8822:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8824:	cmp	r0, #0
    8826:	bne.n	880e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8828:	mov	r0, r4
}
    882a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    882e:	b.w	87aa <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8832:	mov	r0, r4
    8834:	bl	8638 <SharedSpiCard::readData(unsigned char*)>
    8838:	cmp	r0, #0
    883a:	beq.n	880c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    883c:	adds	r5, #1
    883e:	b.n	8814 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008840 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8840:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8844:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8846:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8848:	mov	r4, r0
    884a:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    884c:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    884e:	mov	r7, r2
    8850:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8854:	bne.n	885c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8856:	ldr	r3, [r0, #24]
    8858:	cmp	r3, r1
    885a:	beq.n	886e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    885c:	mov	r1, r5
    885e:	mov	r0, r4
    8860:	bl	8776 <SharedSpiCard::readStart(unsigned long)>
    8864:	cbnz	r0, 886c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8866:	movs	r0, #0
}
    8868:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    886c:	str	r5, [r4, #24]
    886e:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8872:	cmp	r5, r8
    8874:	bne.n	888c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8876:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8878:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    887a:	add	r3, r6
    887c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    887e:	cmp	r0, #0
    8880:	bne.n	8868 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8882:	mov	r0, r4
}
    8884:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8888:	b.w	87aa <SharedSpiCard::readStop()>
    if (readData(dst)) {
    888c:	mov	r1, r7
    888e:	mov	r0, r4
    8890:	bl	8638 <SharedSpiCard::readData(unsigned char*)>
    8894:	cmp	r0, #0
    8896:	beq.n	8866 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8898:	mov	r0, r5
    889a:	mov	r2, sl
    889c:	mov	r1, r7
    889e:	adds	r5, #1
    88a0:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    88a2:	b.n	8872 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

000088a4 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    88a4:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    88a6:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    88a8:	mov	r5, r1
    88aa:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    88ac:	ldr	r3, [r3, #88]	; 0x58
    88ae:	blx	r3
    88b0:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    88b2:	mov.w	r1, #25
    88b6:	mov	r0, r4
    sector <<= 9;
    88b8:	it	ne
    88ba:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    88bc:	mov	r2, r5
    88be:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    88c2:	cbz	r0, 88d2 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    88c4:	movs	r3, #14
  spiStop();
    88c6:	mov	r0, r4
    88c8:	strb	r3, [r4, #17]
    88ca:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    88ce:	movs	r0, #0
}
    88d0:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    88d2:	movs	r3, #2
  return true;
    88d4:	movs	r0, #1
  m_state = WRITE_STATE;
    88d6:	strb	r3, [r4, #19]
  return true;
    88d8:	b.n	88d0 <SharedSpiCard::writeStart(unsigned long)+0x2c>

000088da <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    88da:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    88dc:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    88de:	mov	r6, r1
  if (!readCSD(&csd)) {
    88e0:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    88e2:	mov	r4, r0
  if (!readCSD(&csd)) {
    88e4:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    88e6:	mov	r5, r2
  if (!readCSD(&csd)) {
    88e8:	blx	r3
    88ea:	cbz	r0, 890e <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    88ec:	ldrb.w	r3, [sp, #10]
    88f0:	lsls	r2, r3, #25
    88f2:	bmi.n	8918 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    88f4:	and.w	r3, r3, #63	; 0x3f
    88f8:	ldrb.w	r2, [sp, #11]
    88fc:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    88fe:	orr.w	r3, r3, r2, lsr #7
    8902:	adds	r2, r5, #1
    8904:	orrs	r2, r6
    8906:	tst	r3, r2
    8908:	beq.n	8918 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    890a:	movs	r3, #39	; 0x27
    890c:	strb	r3, [r4, #17]
  spiStop();
    890e:	mov	r0, r4
  return false;
    8910:	movs	r5, #0
  spiStop();
    8912:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    8916:	b.n	8966 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8918:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    891a:	movs	r1, #32
    891c:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    891e:	cmp	r3, #3
    firstSector <<= 9;
    8920:	itt	ne
    8922:	lslne	r6, r6, #9
    lastSector <<= 9;
    8924:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8926:	mov	r2, r6
    8928:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    892c:	cbz	r0, 8932 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    892e:	movs	r3, #38	; 0x26
    8930:	b.n	890c <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8932:	mov	r2, r5
    8934:	movs	r1, #33	; 0x21
    8936:	mov	r0, r4
    8938:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    893c:	mov	r2, r0
    893e:	cmp	r0, #0
    8940:	bne.n	892e <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8942:	movs	r1, #38	; 0x26
    8944:	mov	r0, r4
    8946:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    894a:	cmp	r0, #0
    894c:	bne.n	892e <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    894e:	movw	r1, #10000	; 0x2710
    8952:	mov	r0, r4
    8954:	bl	8640 <SharedSpiCard::waitReady(unsigned short)>
    8958:	mov	r5, r0
    895a:	cbnz	r0, 8960 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    895c:	movs	r3, #40	; 0x28
    895e:	b.n	890c <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8960:	mov	r0, r4
    8962:	bl	8578 <SharedSpiCard::spiStop()>
}
    8966:	mov	r0, r5
    8968:	add	sp, #16
    896a:	pop	{r4, r5, r6, pc}

0000896c <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    896c:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    896e:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8972:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8974:	bl	8640 <SharedSpiCard::waitReady(unsigned short)>
    8978:	mov	r5, r0
    897a:	cbnz	r0, 898a <SharedSpiCard::writeStop()+0x1e>
    897c:	movs	r3, #30
  spiStop();
    897e:	mov	r0, r4
    8980:	strb	r3, [r4, #17]
    8982:	bl	8578 <SharedSpiCard::spiStop()>
}
    8986:	mov	r0, r5
    8988:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    898a:	movs	r1, #253	; 0xfd
    898c:	adds	r0, r4, #4
    898e:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    8992:	mov	r0, r4
    8994:	bl	8578 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    8998:	movs	r3, #0
    899a:	strb	r3, [r4, #19]
  return true;
    899c:	b.n	8986 <SharedSpiCard::writeStop()+0x1a>

0000899e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    899e:	push	{r0, r1, r2, r4, r5, lr}
    89a0:	mov	r5, r2
    89a2:	mov	r4, r0
    89a4:	adds	r0, #4
    89a6:	str	r0, [sp, #4]
    89a8:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    89ac:	mov.w	r2, #512	; 0x200
    89b0:	mov	r1, r5
    89b2:	ldr	r0, [sp, #4]
    89b4:	bl	9bd6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    89b8:	movs	r1, #255	; 0xff
    89ba:	ldr	r0, [sp, #4]
    89bc:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    89c0:	movs	r1, #255	; 0xff
    89c2:	ldr	r0, [sp, #4]
    89c4:	bl	9bce <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    89c8:	ldr	r0, [sp, #4]
    89ca:	bl	9ba2 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    89ce:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    89d0:	and.w	r0, r0, #31
    89d4:	cmp	r0, #5
    89d6:	beq.n	89e8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    89d8:	movs	r3, #32
  spiStop();
    89da:	mov	r0, r4
    89dc:	strb	r3, [r4, #17]
    89de:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    89e2:	movs	r0, #0
}
    89e4:	add	sp, #12
    89e6:	pop	{r4, r5, pc}
  return true;
    89e8:	movs	r0, #1
    89ea:	b.n	89e4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

000089ec <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    89ec:	push	{r0, r1, r4, lr}
    89ee:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    89f0:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    89f4:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    89f6:	bl	8640 <SharedSpiCard::waitReady(unsigned short)>
    89fa:	ldr	r2, [sp, #4]
    89fc:	cbnz	r0, 8a0c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    89fe:	movs	r3, #36	; 0x24
    8a00:	strb	r3, [r4, #17]
  spiStop();
    8a02:	mov	r0, r4
    8a04:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    8a08:	movs	r0, #0
    8a0a:	b.n	8a18 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8a0c:	movs	r1, #252	; 0xfc
    8a0e:	mov	r0, r4
    8a10:	bl	899e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8a14:	cmp	r0, #0
    8a16:	beq.n	8a02 <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8a18:	add	sp, #8
    8a1a:	pop	{r4, pc}

00008a1c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8a1c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8a1e:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8a20:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8a22:	mov	r5, r1
    8a24:	mov	r4, r0
    8a26:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8a28:	blx	r3
    8a2a:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8a2c:	mov.w	r1, #24
    8a30:	mov	r0, r4
    sector <<= 9;
    8a32:	it	ne
    8a34:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    8a36:	mov	r2, r5
    8a38:	bl	866c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a3c:	cbz	r0, 8a4c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    8a3e:	movs	r3, #13
    8a40:	strb	r3, [r4, #17]
  spiStop();
    8a42:	mov	r0, r4
  return false;
    8a44:	movs	r5, #0
  spiStop();
    8a46:	bl	8578 <SharedSpiCard::spiStop()>
  return false;
    8a4a:	b.n	8a62 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    8a4c:	mov	r2, r6
    8a4e:	movs	r1, #254	; 0xfe
    8a50:	mov	r0, r4
    8a52:	bl	899e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8a56:	mov	r5, r0
    8a58:	cmp	r0, #0
    8a5a:	beq.n	8a42 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    8a5c:	mov	r0, r4
    8a5e:	bl	8578 <SharedSpiCard::spiStop()>
}
    8a62:	mov	r0, r5
    8a64:	pop	{r4, r5, r6, pc}

00008a66 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8a66:	push	{r4}
  if (m_dedicatedSpi) {
    8a68:	ldrb	r4, [r0, #28]
    8a6a:	cbz	r4, 8a7a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8a6c:	ldr	r3, [r0, #0]
    8a6e:	ldr	r4, [r3, #40]	; 0x28
    8a70:	movs	r3, #1
    8a72:	mov	ip, r4
}
    8a74:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8a78:	bx	ip
}
    8a7a:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8a7e:	b.w	8a1c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00008a82 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    8a82:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a86:	ldr	r5, [sp, #32]
    8a88:	mov	r6, r0
    8a8a:	mov	r4, r1
    8a8c:	mov	r7, r2
    8a8e:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8a92:	cmp	r4, r8
    8a94:	bne.n	8a9c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    8a96:	movs	r0, #1
  }
    8a98:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    8a9c:	ldr	r3, [r6, #0]
    8a9e:	mov	r2, r7
    8aa0:	mov	r1, r4
    8aa2:	mov	r0, r6
    8aa4:	ldr	r3, [r3, #16]
    8aa6:	add.w	r9, r4, #1
    8aaa:	blx	r3
    8aac:	cmp	r0, #0
    8aae:	beq.n	8a98 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    8ab0:	mov	r0, r4
    8ab2:	ldr	r2, [sp, #36]	; 0x24
    8ab4:	mov	r1, r7
    8ab6:	mov	r4, r9
    8ab8:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    8aba:	b.n	8a92 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

00008abc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    8abc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ac0:	mov	r5, r0
    8ac2:	mov	r4, r1
    8ac4:	mov	r7, r3
    8ac6:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8ac8:	cmp	r4, r6
    8aca:	bne.n	8ad0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    8acc:	movs	r0, #1
    8ace:	b.n	8aea <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    8ad0:	ldr	r3, [r5, #0]
    8ad2:	mov	r0, r4
    8ad4:	ldr	r1, [sp, #24]
    8ad6:	ldr.w	r8, [r3, #36]	; 0x24
    8ada:	blx	r7
    8adc:	mov	r1, r4
    8ade:	mov	r2, r0
    8ae0:	mov	r0, r5
    8ae2:	adds	r4, #1
    8ae4:	blx	r8
    8ae6:	cmp	r0, #0
    8ae8:	bne.n	8ac8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    8aea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008aee <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    8aee:	movs	r0, #0
    8af0:	bx	lr

00008af2 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    8af2:	movs	r0, #0
    8af4:	bx	lr

00008af6 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8af6:	movs	r0, #0
    8af8:	bx	lr

00008afa <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8afa:	bx	lr

00008afc <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8afc:	ldr	r3, [pc, #28]	; (8b1c <sdIrs()+0x20>)
    8afe:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8b00:	ldr	r2, [pc, #28]	; (8b20 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    8b02:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8b04:	ldr	r0, [r3, #48]	; 0x30
    8b06:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8b08:	ldr	r2, [r2, #0]
    8b0a:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8b0c:	ldr	r2, [r3, #72]	; 0x48
    8b0e:	bic.w	r2, r2, #129	; 0x81
    8b12:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8b14:	ldr	r3, [pc, #12]	; (8b24 <sdIrs()+0x28>)
    8b16:	strb	r1, [r3, #0]
}
    8b18:	bx	lr
    8b1a:	nop
    8b1c:	.word	0x402c0000
    8b20:	.word	0x200271f8
    8b24:	.word	0x20028104

00008b28 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8b28:	ldr	r3, [pc, #24]	; (8b44 <gpioMux(unsigned char)+0x1c>)
    8b2a:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8b2e:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8b32:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8b36:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8b3a:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8b3e:	str.w	r0, [r3, #456]	; 0x1c8
}
    8b42:	bx	lr
    8b44:	.word	0x401f8000

00008b48 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8b48:	ldr	r3, [pc, #12]	; (8b58 <isBusyCommandComplete()+0x10>)
    8b4a:	ldr	r0, [pc, #16]	; (8b5c <isBusyCommandComplete()+0x14>)
    8b4c:	ldr	r3, [r3, #48]	; 0x30
    8b4e:	ands	r0, r3
}
    8b50:	clz	r0, r0
    8b54:	lsrs	r0, r0, #5
    8b56:	bx	lr
    8b58:	.word	0x402c0000
    8b5c:	.word	0x000f0001

00008b60 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8b60:	ldr	r3, [pc, #8]	; (8b6c <isBusyCommandInhibit()+0xc>)
    8b62:	ldr	r0, [r3, #36]	; 0x24
}
    8b64:	and.w	r0, r0, #1
    8b68:	bx	lr
    8b6a:	nop
    8b6c:	.word	0x402c0000

00008b70 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8b70:	ldr	r3, [pc, #12]	; (8b80 <isBusyDat()+0x10>)
    8b72:	ldr	r0, [r3, #36]	; 0x24
    8b74:	eor.w	r0, r0, #16777216	; 0x1000000
}
    8b78:	ubfx	r0, r0, #24, #1
    8b7c:	bx	lr
    8b7e:	nop
    8b80:	.word	0x402c0000

00008b84 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8b84:	ldr	r3, [pc, #4]	; (8b8c <isBusyDMA()+0x8>)
    8b86:	ldrb	r0, [r3, #0]
}
    8b88:	bx	lr
    8b8a:	nop
    8b8c:	.word	0x20028104

00008b90 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8b90:	ldr	r3, [pc, #12]	; (8ba0 <isBusyFifoRead()+0x10>)
    8b92:	ldr	r0, [r3, #36]	; 0x24
    8b94:	eor.w	r0, r0, #2048	; 0x800
}
    8b98:	ubfx	r0, r0, #11, #1
    8b9c:	bx	lr
    8b9e:	nop
    8ba0:	.word	0x402c0000

00008ba4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8ba4:	ldr	r3, [pc, #12]	; (8bb4 <isBusyFifoWrite()+0x10>)
    8ba6:	ldr	r0, [r3, #36]	; 0x24
    8ba8:	eor.w	r0, r0, #1024	; 0x400
}
    8bac:	ubfx	r0, r0, #10, #1
    8bb0:	bx	lr
    8bb2:	nop
    8bb4:	.word	0x402c0000

00008bb8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8bb8:	ldr	r3, [pc, #12]	; (8bc8 <isBusyTransferComplete()+0x10>)
    8bba:	ldr	r0, [pc, #16]	; (8bcc <isBusyTransferComplete()+0x14>)
    8bbc:	ldr	r3, [r3, #48]	; 0x30
    8bbe:	ands	r0, r3
}
    8bc0:	clz	r0, r0
    8bc4:	lsrs	r0, r0, #5
    8bc6:	bx	lr
    8bc8:	.word	0x402c0000
    8bcc:	.word	0x117f0002

00008bd0 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8bd0:	mov.w	r3, #1000	; 0x3e8
    8bd4:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8bd6:	ldr	r3, [pc, #140]	; (8c64 <setSdclk(unsigned long)+0x94>)
    8bd8:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8bda:	sub.w	r3, r3, #147456	; 0x24000
    8bde:	ldr.w	r1, [r3, #256]	; 0x100
    8be2:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8be4:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8be8:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8bec:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8bee:	udiv	r1, r1, r3
    8bf2:	ldr	r3, [pc, #116]	; (8c68 <setSdclk(unsigned long)+0x98>)
    8bf4:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8bf8:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8bfa:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    8bfe:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    8c00:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8c02:	lsls	r4, r2, #4
    8c04:	udiv	r4, r3, r4
    8c08:	cmp	r4, r0
    8c0a:	bls.n	8c10 <setSdclk(unsigned long)+0x40>
    8c0c:	subs	r1, #1
    8c0e:	bne.n	8c16 <setSdclk(unsigned long)+0x46>
    8c10:	mov	r4, r2
    8c12:	movs	r1, #1
    8c14:	b.n	8c1e <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    8c16:	lsls	r2, r2, #1
    8c18:	b.n	8c02 <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8c1a:	adds	r1, #1
    8c1c:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8c1e:	udiv	r5, r3, r4
    8c22:	cmp	r5, r0
    8c24:	bls.n	8c2e <setSdclk(unsigned long)+0x5e>
    8c26:	cmp	r1, #16
    8c28:	add.w	r5, r2, r4
    8c2c:	bne.n	8c1a <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8c2e:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    8c32:	subs	r1, #1
  sdclkfs >>= 1;
    8c34:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8c36:	muls	r4, r0
    8c38:	ldr	r0, [pc, #48]	; (8c6c <setSdclk(unsigned long)+0x9c>)
    8c3a:	udiv	r3, r3, r4
    8c3e:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8c40:	ldr	r0, [pc, #44]	; (8c70 <setSdclk(unsigned long)+0xa0>)
    8c42:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    8c44:	bic.w	r3, r3, #1044480	; 0xff000
    8c48:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8c4c:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8c50:	orr.w	r3, r3, r2, lsl #8
    8c54:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8c58:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8c5a:	ldr	r3, [r0, #36]	; 0x24
    8c5c:	lsls	r3, r3, #28
    8c5e:	bpl.n	8c5a <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8c60:	pop	{r4, r5, pc}
    8c62:	nop
    8c64:	.word	0x400fc000
    8c68:	.word	0x5e69ec00
    8c6c:	.word	0x2000d1d0
    8c70:	.word	0x402c0000

00008c74 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    8c74:	ldr	r3, [pc, #4]	; (8c7c <SdioCard::errorCode() const+0x8>)
    8c76:	ldrb	r0, [r3, #0]
    8c78:	bx	lr
    8c7a:	nop
    8c7c:	.word	0x2000935a

00008c80 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8c80:	ldr	r3, [pc, #4]	; (8c88 <SdioCard::errorData() const+0x8>)
    8c82:	ldr	r0, [r3, #0]
}
    8c84:	bx	lr
    8c86:	nop
    8c88:	.word	0x200271f8

00008c8c <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    8c8c:	ldr	r3, [pc, #20]	; (8ca4 <SdioCard::readCID(CID*)+0x18>)
    8c8e:	add.w	r2, r3, #16
    8c92:	ldr.w	r0, [r3], #4
    8c96:	cmp	r3, r2
    8c98:	str.w	r0, [r1], #4
    8c9c:	bne.n	8c92 <SdioCard::readCID(CID*)+0x6>
  return true;
}
    8c9e:	movs	r0, #1
    8ca0:	bx	lr
    8ca2:	nop
    8ca4:	.word	0x20028044

00008ca8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    8ca8:	ldr	r3, [pc, #20]	; (8cc0 <SdioCard::readCSD(csd_t*)+0x18>)
    8caa:	add.w	r2, r3, #16
    8cae:	ldr.w	r0, [r3], #4
    8cb2:	cmp	r3, r2
    8cb4:	str.w	r0, [r1], #4
    8cb8:	bne.n	8cae <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    8cba:	movs	r0, #1
    8cbc:	bx	lr
    8cbe:	nop
    8cc0:	.word	0x20028054

00008cc4 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8cc4:	ldr	r3, [pc, #8]	; (8cd0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8cc6:	movs	r0, #1
  *ocr = m_ocr;
    8cc8:	ldr	r3, [r3, #0]
    8cca:	str	r3, [r1, #0]
}
    8ccc:	bx	lr
    8cce:	nop
    8cd0:	.word	0x20026bec

00008cd4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8cd4:	bx	lr
	...

00008cd8 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    8cd8:	push	{r3, r4, r5, r6, r7, lr}
    8cda:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cdc:	ldr	r7, [pc, #24]	; (8cf8 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    8cde:	bl	b15c <micros>
    8ce2:	mov	r6, r0
  while (fcn()) {
    8ce4:	blx	r5
    8ce6:	mov	r4, r0
    8ce8:	cbz	r0, 8cf4 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cea:	bl	b15c <micros>
    8cee:	subs	r0, r0, r6
    8cf0:	cmp	r0, r7
    8cf2:	bls.n	8ce4 <waitTimeout(bool (*)())+0xc>
}
    8cf4:	mov	r0, r4
    8cf6:	pop	{r3, r4, r5, r6, r7, pc}
    8cf8:	.word	0x000f4240

00008cfc <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    8cfc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8d00:	ldr	r7, [pc, #44]	; (8d30 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    8d02:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d04:	ldr.w	r8, [pc, #44]	; 8d34 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    8d08:	str	r0, [r7, #0]
  uint32_t m = micros();
    8d0a:	bl	b15c <micros>
    8d0e:	mov	r6, r0
  while (fcn()) {
    8d10:	blx	r5
    8d12:	mov	r4, r0
    8d14:	cbnz	r0, 8d20 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    8d16:	movs	r3, #0
}
    8d18:	mov	r0, r4
      m_busyFcn = 0;
    8d1a:	str	r3, [r7, #0]
}
    8d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d20:	bl	b15c <micros>
    8d24:	subs	r0, r0, r6
    8d26:	cmp	r0, r8
    8d28:	bhi.n	8d16 <yieldTimeout(bool (*)())+0x1a>
    yield();
    8d2a:	bl	be24 <yield>
    8d2e:	b.n	8d10 <yieldTimeout(bool (*)())+0x14>
    8d30:	.word	0x200271f4
    8d34:	.word	0x000f4240

00008d38 <SdioCard::~SdioCard()>:
    8d38:	push	{r4, lr}
    8d3a:	mov	r4, r0
    8d3c:	movs	r1, #12
    8d3e:	bl	c354 <operator delete(void*, unsigned int)>
    8d42:	mov	r0, r4
    8d44:	pop	{r4, pc}
	...

00008d48 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    8d48:	push	{r3, lr}
    gpioMux(0);
    8d4a:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8d4c:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    8d50:	bl	8b28 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8d54:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8d58:	ldr	r3, [pc, #24]	; (8d74 <enableGPIO(bool) [clone .part.0]+0x2c>)
    8d5a:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8d5e:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8d62:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8d66:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8d6a:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8d6e:	str.w	r2, [r3, #952]	; 0x3b8
}
    8d72:	pop	{r3, pc}
    8d74:	.word	0x401f8000

00008d78 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8d78:	ldr	r3, [pc, #184]	; (8e34 <initSDHC()+0xbc>)
    gpioMux(5);
    8d7a:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8d7c:	ldr.w	r2, [r3, #256]	; 0x100
    8d80:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    8d84:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8d86:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    8d8a:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    8d8e:	ldr	r4, [pc, #168]	; (8e38 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    8d90:	bic.w	r2, r2, #63	; 0x3f
    8d94:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    8d98:	ldr.w	r2, [r3, #256]	; 0x100
    8d9c:	orr.w	r2, r2, #24
    8da0:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    8da4:	ldr.w	r2, [r3, #256]	; 0x100
    8da8:	bic.w	r2, r2, #128	; 0x80
    8dac:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    8db0:	add.w	r3, r3, #147456	; 0x24000
    8db4:	ldr.w	r2, [r3, #128]	; 0x80
    8db8:	orr.w	r2, r2, #12
    8dbc:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    8dc0:	ldr	r2, [r3, #36]	; 0x24
    8dc2:	bic.w	r2, r2, #14336	; 0x3800
    8dc6:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    8dc8:	ldr	r2, [r3, #28]
    8dca:	orr.w	r2, r2, #65536	; 0x10000
    8dce:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    8dd0:	ldr	r2, [r3, #36]	; 0x24
    8dd2:	orr.w	r2, r2, #2048	; 0x800
    8dd6:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    8dd8:	bl	8b28 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    8ddc:	ldr	r3, [r4, #72]	; 0x48
    8dde:	orr.w	r3, r3, #2147483648	; 0x80000000
    8de2:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8de4:	ldr	r3, [r4, #44]	; 0x2c
    8de6:	orr.w	r3, r3, #16777216	; 0x1000000
    8dea:	orr.w	r3, r3, #32768	; 0x8000
    8dee:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8df0:	ldr	r3, [r4, #44]	; 0x2c
    8df2:	lsls	r2, r3, #7
    8df4:	bmi.n	8df0 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8df6:	mov.w	r0, #400	; 0x190
    8dfa:	bl	8bd0 <setSdclk(unsigned long)>
  if (enable) {
    8dfe:	bl	8d48 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8e02:	ldr	r3, [pc, #56]	; (8e3c <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    8e04:	ldr	r2, [pc, #56]	; (8e40 <initSDHC()+0xc8>)
    8e06:	str	r3, [r4, #52]	; 0x34
    8e08:	ldr	r3, [pc, #56]	; (8e44 <initSDHC()+0xcc>)
    8e0a:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8e0e:	ldr	r3, [pc, #56]	; (8e48 <initSDHC()+0xd0>)
    8e10:	movs	r2, #96	; 0x60
    8e12:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8e16:	mov.w	r3, #3758153728	; 0xe000e000
    8e1a:	mov.w	r2, #16384	; 0x4000
    8e1e:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8e22:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8e24:	ldr	r2, [pc, #16]	; (8e38 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8e26:	orr.w	r3, r3, #134217728	; 0x8000000
    8e2a:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8e2c:	ldr	r3, [r2, #44]	; 0x2c
    8e2e:	lsls	r3, r3, #4
    8e30:	bmi.n	8e2c <initSDHC()+0xb4>
}
    8e32:	pop	{r4, pc}
    8e34:	.word	0x400d8000
    8e38:	.word	0x402c0000
    8e3c:	.word	0x117f000b
    8e40:	.word	0x00008afd
    8e44:	.word	0x20009400
    8e48:	.word	0xe000e400

00008e4c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    8e4c:	ldr	r3, [pc, #16]	; (8e60 <SdioCard::type() const+0x14>)
    8e4e:	ldrb	r3, [r3, #0]
    8e50:	cbz	r3, 8e5c <SdioCard::type() const+0x10>
    8e52:	ldr	r3, [pc, #16]	; (8e64 <SdioCard::type() const+0x18>)
    8e54:	ldrb	r0, [r3, #0]
    8e56:	adds	r0, #2
    8e58:	uxtb	r0, r0
    8e5a:	bx	lr
    8e5c:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    8e5e:	bx	lr
    8e60:	.word	0x20028041
    8e64:	.word	0x20028042

00008e68 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8e68:	push	{r3, r4, r5, lr}
    8e6a:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    8e6c:	ldr	r0, [pc, #80]	; (8ec0 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8e6e:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    8e70:	bl	8cd8 <waitTimeout(bool (*)())>
    8e74:	cbnz	r0, 8eb6 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    8e76:	ldr	r3, [pc, #76]	; (8ec4 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8e78:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    8e7a:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8e7c:	bpl.n	8e8e <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e7e:	ldr	r2, [r3, #72]	; 0x48
    8e80:	bic.w	r2, r2, #255	; 0xff
    8e84:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e86:	uxtb	r2, r4
    8e88:	ldr	r1, [r3, #72]	; 0x48
    8e8a:	orrs	r2, r1
    8e8c:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8e8e:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    8e92:	ldr	r5, [pc, #48]	; (8ec4 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    8e94:	ldr	r0, [pc, #48]	; (8ec8 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    8e96:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    8e98:	bl	8cd8 <waitTimeout(bool (*)())>
    8e9c:	cbnz	r0, 8eb6 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    8e9e:	ldr	r2, [r5, #48]	; 0x30
    8ea0:	ldr	r3, [pc, #40]	; (8ecc <cardCommand(unsigned long, unsigned long)+0x64>)
    8ea2:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8ea4:	ldr	r2, [r3, #0]
    8ea6:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8ea8:	ldr	r2, [r3, #0]
    8eaa:	lsls	r2, r2, #31
    8eac:	bpl.n	8eb6 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8eae:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8eb0:	tst.w	r3, #983040	; 0xf0000
    8eb4:	beq.n	8eba <cardCommand(unsigned long, unsigned long)+0x52>
    8eb6:	movs	r0, #0
}
    8eb8:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8eba:	movs	r0, #1
    8ebc:	b.n	8eb8 <cardCommand(unsigned long, unsigned long)+0x50>
    8ebe:	nop
    8ec0:	.word	0x00008b61
    8ec4:	.word	0x402c0000
    8ec8:	.word	0x00008b49
    8ecc:	.word	0x200271f8

00008ed0 <statusCMD13()>:
static uint32_t statusCMD13() {
    8ed0:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ed2:	ldr	r3, [pc, #16]	; (8ee4 <statusCMD13()+0x14>)
    8ed4:	ldr	r0, [pc, #16]	; (8ee8 <statusCMD13()+0x18>)
    8ed6:	ldr	r1, [r3, #0]
    8ed8:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    8edc:	cbz	r0, 8ee2 <statusCMD13()+0x12>
    8ede:	ldr	r3, [pc, #12]	; (8eec <statusCMD13()+0x1c>)
    8ee0:	ldr	r0, [r3, #16]
}
    8ee2:	pop	{r3, pc}
    8ee4:	.word	0x20026bf0
    8ee8:	.word	0x0d1a0000
    8eec:	.word	0x402c0000

00008ef0 <isBusyCMD13()>:
static bool isBusyCMD13() {
    8ef0:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8ef2:	bl	8ed0 <statusCMD13()>
    8ef6:	eor.w	r0, r0, #256	; 0x100
}
    8efa:	ubfx	r0, r0, #8, #1
    8efe:	pop	{r3, pc}

00008f00 <SdioCard::status()>:
  return statusCMD13();
    8f00:	b.w	8ed0 <statusCMD13()>

00008f04 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8f04:	ldr	r3, [pc, #76]	; (8f54 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8f06:	push	{r4, r5, lr}
    8f08:	mov	r4, r1
    8f0a:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8f0c:	ldr	r1, [r3, #0]
    8f0e:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    8f12:	cbz	r0, 8f50 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8f14:	ldr	r3, [pc, #64]	; (8f58 <readReg16(unsigned long, void*)+0x54>)
    8f16:	add.w	r5, r4, #15
    8f1a:	ldr	r2, [r3, #16]
    8f1c:	str	r2, [sp, #0]
    8f1e:	ldr	r2, [r3, #20]
    8f20:	str	r2, [sp, #4]
    8f22:	ldr	r2, [r3, #24]
    8f24:	str	r2, [sp, #8]
    8f26:	ldr	r3, [r3, #28]
    8f28:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8f2a:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8f2c:	bic.w	r2, r3, #3
    8f30:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    8f34:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8f36:	adds	r2, #16
    8f38:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    8f3a:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8f3c:	add	r2, sp
    8f3e:	ldr.w	r2, [r2, #-16]
    8f42:	lsr.w	r2, r2, r1
    8f46:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    8f4a:	bne.n	8f2c <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    8f4c:	movs	r3, #0
    8f4e:	strb	r3, [r4, #15]
}
    8f50:	add	sp, #20
    8f52:	pop	{r4, r5, pc}
    8f54:	.word	0x20026bf0
    8f58:	.word	0x402c0000

00008f5c <waitDmaStatus()>:
static bool waitDmaStatus() {
    8f5c:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    8f5e:	ldr	r0, [pc, #32]	; (8f80 <waitDmaStatus()+0x24>)
    8f60:	bl	8cfc <yieldTimeout(bool (*)())>
    8f64:	cbnz	r0, 8f7c <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8f66:	ldr	r3, [pc, #28]	; (8f84 <waitDmaStatus()+0x28>)
    8f68:	ldr	r2, [r3, #0]
    8f6a:	lsls	r2, r2, #30
    8f6c:	bpl.n	8f7a <waitDmaStatus()+0x1e>
    8f6e:	ldr	r2, [r3, #0]
    8f70:	ldr	r3, [pc, #20]	; (8f88 <waitDmaStatus()+0x2c>)
    8f72:	tst	r2, r3
    8f74:	ite	eq
    8f76:	moveq	r0, #1
    8f78:	movne	r0, #0
}
    8f7a:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8f7c:	movs	r0, #0
    8f7e:	b.n	8f7a <waitDmaStatus()+0x1e>
    8f80:	.word	0x00008b85
    8f84:	.word	0x200271f8
    8f88:	.word	0x117f0000

00008f8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    8f8c:	push	{r3, r4, r5, r6, r7, lr}
    8f8e:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    8f90:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    8f92:	mov	r7, r0
    8f94:	mov	r4, r1
    8f96:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    8f98:	bne.n	8f9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    8f9a:	cbnz	r5, 8fae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    8f9c:	ldr	r3, [pc, #96]	; (9000 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    8f9e:	movs	r2, #37	; 0x25
    8fa0:	strb	r2, [r3, #0]
  m_errorLine = line;
    8fa2:	movw	r2, #501	; 0x1f5
    8fa6:	ldr	r3, [pc, #92]	; (9004 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    8fa8:	str	r2, [r3, #0]
}
    8faa:	movs	r0, #0
    8fac:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    8fae:	ldr	r0, [pc, #88]	; (9008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    8fb0:	bl	8cfc <yieldTimeout(bool (*)())>
    8fb4:	cbz	r0, 8fc4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    8fb6:	ldr	r3, [pc, #72]	; (9000 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    8fb8:	movs	r2, #10
    8fba:	strb	r2, [r3, #0]
  m_errorLine = line;
    8fbc:	mov.w	r2, #504	; 0x1f8
    8fc0:	ldr	r3, [pc, #64]	; (9004 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    8fc2:	b.n	8fa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    8fc4:	ldr	r3, [pc, #68]	; (900c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    8fc6:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    8fc8:	ldr	r1, [pc, #68]	; (9010 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    8fca:	strb	r2, [r3, #0]
  m_irqstat = 0;
    8fcc:	ldr	r3, [pc, #68]	; (9014 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    8fce:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8fd0:	ldr	r3, [pc, #68]	; (9018 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    8fd2:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8fd4:	and.w	r3, r3, r5, lsl #16
    8fd8:	orr.w	r3, r3, #512	; 0x200
    8fdc:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8fde:	ldr	r3, [pc, #60]	; (901c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8fe0:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8fe2:	ldr	r3, [pc, #60]	; (9020 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8fe4:	ldrb	r3, [r3, #0]
    8fe6:	cbnz	r3, 8fea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    8fe8:	lsls	r4, r4, #9
    8fea:	mov	r1, r4
    8fec:	mov	r0, r7
    8fee:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    8ff2:	cmp	r0, #0
    8ff4:	beq.n	8faa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    8ff6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    8ffa:	b.w	8f5c <waitDmaStatus()>
    8ffe:	nop
    9000:	.word	0x2000935a
    9004:	.word	0x200251d8
    9008:	.word	0x00008ef1
    900c:	.word	0x20028104
    9010:	.word	0x402c0000
    9014:	.word	0x200271f8
    9018:	.word	0x1fff0000
    901c:	.word	0x117f0002
    9020:	.word	0x20028042

00009024 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9024:	push	{r3, r4, r5, r6, r7, lr}
    9026:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    9028:	ldrb	r0, [r0, #8]
    902a:	mov	r4, r1
    902c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    902e:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9030:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9032:	bmi.n	9052 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    9034:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    9036:	cmp	r4, r6
    9038:	beq.n	905c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    903a:	ldr	r3, [r7, #0]
    903c:	mov	r2, r5
    903e:	mov	r1, r4
    9040:	mov	r0, r7
    9042:	ldr	r3, [r3, #16]
    9044:	adds	r4, #1
    9046:	add.w	r5, r5, #512	; 0x200
    904a:	blx	r3
    904c:	cmp	r0, #0
    904e:	bne.n	9036 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9050:	b.n	906e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    9052:	lsls	r0, r2, #30
    9054:	beq.n	907a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    9056:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9058:	cmp	r4, r6
    905a:	bne.n	9060 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    905c:	movs	r0, #1
    905e:	b.n	9070 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9060:	ldr	r3, [r7, #0]
    9062:	mov	r2, r5
    9064:	mov	r1, r4
    9066:	mov	r0, r7
    9068:	ldr	r3, [r3, #16]
    906a:	blx	r3
    906c:	cbnz	r0, 9072 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    906e:	movs	r0, #0
}
    9070:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9072:	adds	r4, #1
    9074:	add.w	r5, r5, #512	; 0x200
    9078:	b.n	9058 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    907a:	ldr	r0, [pc, #24]	; (9094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    907c:	bl	8f8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9080:	cmp	r0, #0
    9082:	bne.n	905c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9084:	ldr	r3, [pc, #16]	; (9098 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    9086:	movs	r2, #12
    9088:	strb	r2, [r3, #0]
  m_errorLine = line;
    908a:	movw	r2, #929	; 0x3a1
    908e:	ldr	r3, [pc, #12]	; (909c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9090:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    9092:	b.n	9070 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    9094:	.word	0x123a0037
    9098:	.word	0x2000935a
    909c:	.word	0x200251d8

000090a0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    90a0:	push	{r3, r4, r5, r6, r7, lr}
    90a2:	mov	r7, r0
    90a4:	ldrb	r0, [r0, #8]
    90a6:	mov	r4, r1
    90a8:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    90aa:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    90ac:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    90ae:	bmi.n	90ce <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    90b0:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    90b2:	cmp	r4, r6
    90b4:	beq.n	90d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    90b6:	ldr	r3, [r7, #0]
    90b8:	mov	r2, r5
    90ba:	mov	r1, r4
    90bc:	mov	r0, r7
    90be:	ldr	r3, [r3, #36]	; 0x24
    90c0:	adds	r4, #1
    90c2:	add.w	r5, r5, #512	; 0x200
    90c6:	blx	r3
    90c8:	cmp	r0, #0
    90ca:	bne.n	90b2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    90cc:	b.n	90ea <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    90ce:	lsls	r0, r2, #30
    90d0:	beq.n	90f6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    90d2:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    90d4:	cmp	r4, r6
    90d6:	bne.n	90dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    90d8:	movs	r0, #1
    90da:	b.n	90ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    90dc:	ldr	r3, [r7, #0]
    90de:	mov	r2, r5
    90e0:	mov	r1, r4
    90e2:	mov	r0, r7
    90e4:	ldr	r3, [r3, #36]	; 0x24
    90e6:	blx	r3
    90e8:	cbnz	r0, 90ee <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    90ea:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    90ec:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    90ee:	adds	r4, #1
    90f0:	add.w	r5, r5, #512	; 0x200
    90f4:	b.n	90d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    90f6:	ldr	r0, [pc, #24]	; (9110 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    90f8:	bl	8f8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    90fc:	cmp	r0, #0
    90fe:	bne.n	90d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    9100:	ldr	r3, [pc, #16]	; (9114 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    9102:	movs	r2, #14
    9104:	strb	r2, [r3, #0]
  m_errorLine = line;
    9106:	movw	r2, #1085	; 0x43d
    910a:	ldr	r3, [pc, #12]	; (9118 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    910c:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    910e:	b.n	90ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9110:	.word	0x193a0027
    9114:	.word	0x2000935a
    9118:	.word	0x200251d8

0000911c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    911c:	ldr	r2, [pc, #88]	; (9178 <SdioCard::sectorCount()+0x5c>)
    911e:	ldrb	r3, [r2, #0]
    9120:	ands.w	r3, r3, #192	; 0xc0
    9124:	bne.n	9158 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9126:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9128:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    912a:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    912e:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9130:	lsls	r0, r0, #2
    9132:	orr.w	r0, r0, r3, lsl #10
    9136:	ldrb	r3, [r2, #8]
    9138:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    913c:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    913e:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9140:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9144:	adds	r0, #1
    9146:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    914a:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    914c:	orr.w	r3, r3, r1, lsr #7
    9150:	add	r3, r2
    9152:	subs	r3, #7
    9154:	lsls	r0, r3
    9156:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9158:	cmp	r3, #64	; 0x40
    915a:	bne.n	9174 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    915c:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    915e:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9160:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9162:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9166:	add.w	r0, r0, r3, lsl #16
    916a:	ldrb	r3, [r2, #8]
    916c:	add.w	r0, r0, r3, lsl #8
    9170:	lsls	r0, r0, #10
    9172:	bx	lr
  } else {
    return 0;
    9174:	movs	r0, #0
}
    9176:	bx	lr
    9178:	.word	0x20028054

0000917c <SdioCard::isBusy()>:
    917c:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    917e:	lsls	r3, r3, #31
    9180:	bpl.n	9194 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    9182:	ldr	r3, [pc, #40]	; (91ac <SdioCard::isBusy()+0x30>)
    9184:	ldr	r3, [r3, #0]
    9186:	cbz	r3, 918a <SdioCard::isBusy()+0xe>
    9188:	bx	r3
    918a:	ldr	r3, [pc, #36]	; (91b0 <SdioCard::isBusy()+0x34>)
    918c:	ldrb	r0, [r3, #0]
    918e:	cbz	r0, 91aa <SdioCard::isBusy()+0x2e>
    9190:	b.w	8ef0 <isBusyCMD13()>
    if (m_transferActive) {
    9194:	ldr	r3, [pc, #28]	; (91b4 <SdioCard::isBusy()+0x38>)
    9196:	ldrb	r3, [r3, #0]
    9198:	cbz	r3, 919e <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    919a:	b.w	8bb8 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    919e:	ldr	r3, [pc, #24]	; (91b8 <SdioCard::isBusy()+0x3c>)
    91a0:	ldr	r0, [r3, #36]	; 0x24
    91a2:	eor.w	r0, r0, #16777216	; 0x1000000
    91a6:	ubfx	r0, r0, #24, #1
}
    91aa:	bx	lr
    91ac:	.word	0x200271f4
    91b0:	.word	0x20028040
    91b4:	.word	0x20028043
    91b8:	.word	0x402c0000

000091bc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    91bc:	push	{r3, r4, r5, lr}
    91be:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    91c0:	ldr	r2, [pc, #160]	; (9264 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    91c2:	ldrb	r3, [r2, #10]
    91c4:	ands.w	r4, r3, #64	; 0x40
    91c8:	bne.n	91f0 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    91ca:	and.w	r3, r3, #63	; 0x3f
    91ce:	ldrb	r2, [r2, #11]
    91d0:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    91d2:	orr.w	r3, r3, r2, lsr #7
    91d6:	adds	r2, r5, #1
    91d8:	orrs	r2, r1
    91da:	tst	r3, r2
    91dc:	beq.n	91f0 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    91de:	ldr	r3, [pc, #136]	; (9268 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    91e0:	movs	r2, #39	; 0x27
    91e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    91e4:	movw	r2, #770	; 0x302
    91e8:	ldr	r3, [pc, #128]	; (926c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    91ea:	str	r2, [r3, #0]
}
    91ec:	mov	r0, r4
    91ee:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    91f0:	ldr	r3, [pc, #124]	; (9270 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    91f2:	ldrb	r3, [r3, #0]
    91f4:	cbnz	r3, 91fa <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    91f6:	lsls	r1, r1, #9
    lastSector <<= 9;
    91f8:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    91fa:	ldr	r0, [pc, #120]	; (9274 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    91fc:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9200:	mov	r4, r0
    9202:	cbnz	r0, 9212 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    9204:	ldr	r3, [pc, #96]	; (9268 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9206:	movs	r2, #15
    9208:	strb	r2, [r3, #0]
  m_errorLine = line;
    920a:	movw	r2, #778	; 0x30a
    920e:	ldr	r3, [pc, #92]	; (926c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9210:	b.n	91ea <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9212:	mov	r1, r5
    9214:	ldr	r0, [pc, #96]	; (9278 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    9216:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    921a:	mov	r4, r0
    921c:	cbnz	r0, 922c <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    921e:	ldr	r3, [pc, #72]	; (9268 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9220:	movs	r2, #16
    9222:	strb	r2, [r3, #0]
  m_errorLine = line;
    9224:	movw	r2, #781	; 0x30d
    9228:	ldr	r3, [pc, #64]	; (926c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    922a:	b.n	91ea <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    922c:	movs	r1, #0
    922e:	ldr	r0, [pc, #76]	; (927c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9230:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9234:	mov	r4, r0
    9236:	cbnz	r0, 9246 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    9238:	ldr	r3, [pc, #44]	; (9268 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    923a:	movs	r2, #17
    923c:	strb	r2, [r3, #0]
  m_errorLine = line;
    923e:	mov.w	r2, #784	; 0x310
    9242:	ldr	r3, [pc, #40]	; (926c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9244:	b.n	91ea <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    9246:	ldr	r0, [pc, #56]	; (9280 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    9248:	bl	8cd8 <waitTimeout(bool (*)())>
    924c:	cmp	r0, #0
    924e:	beq.n	91ec <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9250:	ldr	r3, [pc, #20]	; (9268 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9252:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9254:	movs	r4, #0
  m_errorCode = code;
    9256:	strb	r2, [r3, #0]
  m_errorLine = line;
    9258:	movw	r2, #787	; 0x313
    925c:	ldr	r3, [pc, #12]	; (926c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    925e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9260:	b.n	91ec <SdioCard::erase(unsigned long, unsigned long)+0x30>
    9262:	nop
    9264:	.word	0x20028054
    9268:	.word	0x2000935a
    926c:	.word	0x200251d8
    9270:	.word	0x20028042
    9274:	.word	0x201a0000
    9278:	.word	0x211a0000
    927c:	.word	0x261b0000
    9280:	.word	0x00008ef1

00009284 <waitTransferComplete()>:
static bool waitTransferComplete() {
    9284:	push	{r4, lr}
  if (!m_transferActive) {
    9286:	ldr	r4, [pc, #60]	; (92c4 <waitTransferComplete()+0x40>)
    9288:	ldrb	r3, [r4, #0]
    928a:	cbnz	r3, 9290 <waitTransferComplete()+0xc>
    return true;
    928c:	movs	r0, #1
}
    928e:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9290:	ldr	r0, [pc, #52]	; (92c8 <waitTransferComplete()+0x44>)
    9292:	bl	8cd8 <waitTimeout(bool (*)())>
  m_transferActive = false;
    9296:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9298:	ldr	r2, [pc, #48]	; (92cc <waitTransferComplete()+0x48>)
  m_transferActive = false;
    929a:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    929c:	ldr	r1, [r2, #48]	; 0x30
    929e:	ldr	r3, [pc, #48]	; (92d0 <waitTransferComplete()+0x4c>)
    92a0:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    92a2:	ldr	r1, [r3, #0]
    92a4:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    92a6:	cbnz	r0, 92b0 <waitTransferComplete()+0x2c>
    92a8:	ldr	r2, [r3, #0]
    92aa:	ldr	r3, [pc, #40]	; (92d4 <waitTransferComplete()+0x50>)
    92ac:	tst	r2, r3
    92ae:	beq.n	928c <waitTransferComplete()+0x8>
  m_errorCode = code;
    92b0:	ldr	r3, [pc, #36]	; (92d8 <waitTransferComplete()+0x54>)
    92b2:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    92b4:	movs	r0, #0
  m_errorCode = code;
    92b6:	strb	r2, [r3, #0]
  m_errorLine = line;
    92b8:	movw	r2, #634	; 0x27a
    92bc:	ldr	r3, [pc, #28]	; (92dc <waitTransferComplete()+0x58>)
    92be:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    92c0:	b.n	928e <waitTransferComplete()+0xa>
    92c2:	nop
    92c4:	.word	0x20028043
    92c8:	.word	0x00008bb9
    92cc:	.word	0x402c0000
    92d0:	.word	0x200271f8
    92d4:	.word	0x117f0000
    92d8:	.word	0x2000935a
    92dc:	.word	0x200251d8

000092e0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    92e0:	push	{r4, r5, r6, r7, lr}
    92e2:	ldrb	r5, [r0, #8]
    92e4:	sub.w	sp, sp, #516	; 0x204
    92e8:	mov	r4, r0
    92ea:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    92ec:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    92f0:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    92f2:	beq.n	932c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    92f4:	lsls	r3, r2, #30
    92f6:	beq.n	9306 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    92f8:	mov	r1, r6
      ptr = aligned;
    92fa:	mov	r6, sp
      memcpy(aligned, src, 512);
    92fc:	mov.w	r2, #512	; 0x200
    9300:	mov	r0, sp
    9302:	bl	9c60 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9306:	movs	r3, #1
    9308:	mov	r2, r6
    930a:	mov	r1, r7
    930c:	ldr	r0, [pc, #104]	; (9378 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    930e:	bl	8f8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9312:	mov	r5, r0
    9314:	cbnz	r0, 9324 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    9316:	ldr	r3, [pc, #100]	; (937c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9318:	movs	r2, #13
    931a:	strb	r2, [r3, #0]
  m_errorLine = line;
    931c:	movw	r2, #1041	; 0x411
    9320:	ldr	r3, [pc, #92]	; (9380 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9322:	str	r2, [r3, #0]
}
    9324:	mov	r0, r5
    9326:	add.w	sp, sp, #516	; 0x204
    932a:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    932c:	bl	9284 <waitTransferComplete()>
    9330:	cmp	r0, #0
    9332:	beq.n	9324 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9334:	ldrb	r3, [r4, #9]
    9336:	cmp	r3, #2
    9338:	bne.n	9340 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    933a:	ldr	r3, [r4, #4]
    933c:	cmp	r3, r7
    933e:	beq.n	9360 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    9340:	ldr	r3, [r4, #0]
    9342:	mov	r0, r4
    9344:	ldr	r3, [r3, #32]
    9346:	blx	r3
    9348:	cmp	r0, #0
    934a:	beq.n	9324 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    934c:	ldr	r3, [r4, #0]
    934e:	mov	r1, r7
    9350:	mov	r0, r4
    9352:	ldr	r3, [r3, #96]	; 0x60
    9354:	blx	r3
    9356:	cmp	r0, #0
    9358:	beq.n	9324 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    935a:	movs	r3, #2
      m_curSector = sector;
    935c:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    935e:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9360:	ldr	r3, [r4, #0]
    9362:	mov	r1, r6
    9364:	mov	r0, r4
    9366:	ldr	r3, [r3, #92]	; 0x5c
    9368:	blx	r3
    936a:	cmp	r0, #0
    936c:	beq.n	9324 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    936e:	ldr	r3, [r4, #4]
  return true;
    9370:	mov	r5, r0
    m_curSector++;
    9372:	adds	r3, #1
    9374:	str	r3, [r4, #4]
    9376:	b.n	9324 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    9378:	.word	0x183a0001
    937c:	.word	0x2000935a
    9380:	.word	0x200251d8

00009384 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9384:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9386:	ldr	r4, [pc, #92]	; (93e4 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9388:	movs	r1, #0
    938a:	ldr	r0, [pc, #92]	; (93e8 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    938c:	ldr	r3, [r4, #40]	; 0x28
    938e:	bic.w	r3, r3, #65536	; 0x10000
    9392:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9394:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9398:	mov	r5, r0
    939a:	cbnz	r0, 93ae <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    939c:	ldr	r3, [pc, #76]	; (93ec <SdioCard::readStop()+0x68>)
    939e:	movs	r2, #9
    93a0:	strb	r2, [r3, #0]
  m_errorLine = line;
    93a2:	movw	r2, #573	; 0x23d
    93a6:	ldr	r3, [pc, #72]	; (93f0 <SdioCard::readStop()+0x6c>)
    93a8:	str	r2, [r3, #0]
}
    93aa:	mov	r0, r5
    93ac:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    93ae:	ldr	r0, [pc, #68]	; (93f4 <SdioCard::readStop()+0x70>)
    93b0:	bl	8cfc <yieldTimeout(bool (*)())>
    93b4:	cbz	r0, 93c8 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    93b6:	ldr	r3, [pc, #52]	; (93ec <SdioCard::readStop()+0x68>)
    93b8:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    93ba:	movs	r5, #0
  m_errorCode = code;
    93bc:	strb	r2, [r3, #0]
  m_errorLine = line;
    93be:	mov.w	r2, #576	; 0x240
    93c2:	ldr	r3, [pc, #44]	; (93f0 <SdioCard::readStop()+0x6c>)
    93c4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    93c6:	b.n	93aa <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    93c8:	ldr	r3, [r4, #36]	; 0x24
    93ca:	lsls	r3, r3, #30
    93cc:	bpl.n	93aa <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    93ce:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    93d0:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    93d2:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    93d4:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    93d8:	orr.w	r2, r2, #67108864	; 0x4000000
    93dc:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    93de:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    93e0:	str	r3, [r4, #40]	; 0x28
    93e2:	b.n	93aa <SdioCard::readStop()+0x26>
    93e4:	.word	0x402c0000
    93e8:	.word	0x0cdb0000
    93ec:	.word	0x2000935a
    93f0:	.word	0x200251d8
    93f4:	.word	0x00008b71

000093f8 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    93f8:	push	{r4, r5, r6, lr}
    93fa:	mov	r4, r1
  if (!waitTransferComplete()) {
    93fc:	bl	9284 <waitTransferComplete()>
    9400:	mov	r5, r0
    9402:	cbz	r0, 943c <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    9404:	ldr	r3, [pc, #100]	; (946c <SdioCard::writeData(unsigned char const*)+0x74>)
    9406:	ldr	r2, [r3, #36]	; 0x24
    9408:	lsls	r2, r2, #23
    940a:	bmi.n	941c <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    940c:	ldr	r2, [r3, #40]	; 0x28
    940e:	bic.w	r2, r2, #65536	; 0x10000
    9412:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9414:	ldr	r2, [r3, #40]	; 0x28
    9416:	orr.w	r2, r2, #131072	; 0x20000
    941a:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    941c:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    941e:	ldr	r0, [pc, #80]	; (9470 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9420:	orr.w	r2, r2, #65536	; 0x10000
    9424:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9426:	bl	8cd8 <waitTimeout(bool (*)())>
    942a:	cbz	r0, 9440 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    942c:	ldr	r3, [pc, #68]	; (9474 <SdioCard::writeData(unsigned char const*)+0x7c>)
    942e:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9430:	movs	r5, #0
  m_errorCode = code;
    9432:	strb	r2, [r3, #0]
  m_errorLine = line;
    9434:	mov.w	r2, #1016	; 0x3f8
    9438:	ldr	r3, [pc, #60]	; (9478 <SdioCard::writeData(unsigned char const*)+0x80>)
    943a:	str	r2, [r3, #0]
}
    943c:	mov	r0, r5
    943e:	pop	{r4, r5, r6, pc}
    9440:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    9444:	ldr	r2, [pc, #36]	; (946c <SdioCard::writeData(unsigned char const*)+0x74>)
    9446:	ldr	r3, [r2, #36]	; 0x24
    9448:	lsls	r3, r3, #21
    944a:	bpl.n	9446 <SdioCard::writeData(unsigned char const*)+0x4e>
    944c:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    944e:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    9452:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9456:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9458:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    945a:	bne.n	9452 <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    945c:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    945e:	cmp	r4, r1
    9460:	bne.n	9446 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9462:	ldr	r3, [pc, #24]	; (947c <SdioCard::writeData(unsigned char const*)+0x84>)
    9464:	movs	r2, #1
    9466:	strb	r2, [r3, #0]
  return true;
    9468:	b.n	943c <SdioCard::writeData(unsigned char const*)+0x44>
    946a:	nop
    946c:	.word	0x402c0000
    9470:	.word	0x00008ba5
    9474:	.word	0x2000935a
    9478:	.word	0x200251d8
    947c:	.word	0x20028043

00009480 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9480:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9482:	ldr	r0, [pc, #80]	; (94d4 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    9484:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9486:	bl	8cfc <yieldTimeout(bool (*)())>
    948a:	cbz	r0, 949e <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    948c:	ldr	r3, [pc, #72]	; (94d8 <SdioCard::writeStart(unsigned long)+0x58>)
    948e:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9490:	movs	r0, #0
  m_errorCode = code;
    9492:	strb	r2, [r3, #0]
  m_errorLine = line;
    9494:	movw	r2, #1099	; 0x44b
    9498:	ldr	r3, [pc, #64]	; (94dc <SdioCard::writeStart(unsigned long)+0x5c>)
    949a:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    949c:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    949e:	ldr	r3, [pc, #64]	; (94e0 <SdioCard::writeStart(unsigned long)+0x60>)
    94a0:	ldr	r2, [r3, #40]	; 0x28
    94a2:	bic.w	r2, r2, #65536	; 0x10000
    94a6:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    94a8:	mov.w	r2, #512	; 0x200
    94ac:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    94ae:	ldr	r3, [pc, #52]	; (94e4 <SdioCard::writeStart(unsigned long)+0x64>)
    94b0:	ldrb	r3, [r3, #0]
    94b2:	cbnz	r3, 94b6 <SdioCard::writeStart(unsigned long)+0x36>
    94b4:	lsls	r4, r4, #9
    94b6:	mov	r1, r4
    94b8:	ldr	r0, [pc, #44]	; (94e8 <SdioCard::writeStart(unsigned long)+0x68>)
    94ba:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    94be:	cmp	r0, #0
    94c0:	bne.n	949c <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    94c2:	ldr	r3, [pc, #20]	; (94d8 <SdioCard::writeStart(unsigned long)+0x58>)
    94c4:	movs	r2, #14
    94c6:	strb	r2, [r3, #0]
  m_errorLine = line;
    94c8:	movw	r2, #1111	; 0x457
    94cc:	ldr	r3, [pc, #12]	; (94dc <SdioCard::writeStart(unsigned long)+0x5c>)
    94ce:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    94d0:	b.n	949c <SdioCard::writeStart(unsigned long)+0x1c>
    94d2:	nop
    94d4:	.word	0x00008ef1
    94d8:	.word	0x2000935a
    94dc:	.word	0x200251d8
    94e0:	.word	0x402c0000
    94e4:	.word	0x20028042
    94e8:	.word	0x193a0020

000094ec <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    94ec:	push	{r3, r4, r5, lr}
    94ee:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    94f0:	ldr	r0, [pc, #96]	; (9554 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    94f2:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    94f4:	bl	8cd8 <waitTimeout(bool (*)())>
    94f8:	cbz	r0, 950c <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    94fa:	ldr	r3, [pc, #92]	; (9558 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    94fc:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    94fe:	movs	r0, #0
  m_errorCode = code;
    9500:	strb	r2, [r3, #0]
  m_errorLine = line;
    9502:	mov.w	r2, #408	; 0x198
    9506:	ldr	r3, [pc, #84]	; (955c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9508:	str	r2, [r3, #0]
}
    950a:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    950c:	ldr	r3, [pc, #80]	; (9560 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    950e:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9510:	mov	r1, r4
  m_dmaBusy = true;
    9512:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9514:	ldr	r3, [pc, #76]	; (9564 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9516:	ldr	r2, [pc, #80]	; (9568 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    9518:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    951a:	ldr	r3, [pc, #80]	; (956c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    951c:	ldr	r0, [pc, #80]	; (9570 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    951e:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9520:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9522:	ldr	r2, [pc, #80]	; (9574 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    9524:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9526:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    952a:	cbnz	r0, 953c <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    952c:	ldr	r3, [pc, #40]	; (9558 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    952e:	movs	r2, #4
    9530:	strb	r2, [r3, #0]
  m_errorLine = line;
    9532:	movw	r2, #415	; 0x19f
    9536:	ldr	r3, [pc, #36]	; (955c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9538:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    953a:	b.n	950a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    953c:	bl	8f5c <waitDmaStatus()>
    9540:	cmp	r0, #0
    9542:	bne.n	950a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    9544:	ldr	r3, [pc, #16]	; (9558 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9546:	movs	r2, #37	; 0x25
    9548:	strb	r2, [r3, #0]
  m_errorLine = line;
    954a:	mov.w	r2, #418	; 0x1a2
    954e:	ldr	r3, [pc, #12]	; (955c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9550:	b.n	9538 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    9552:	nop
    9554:	.word	0x00008ef1
    9558:	.word	0x2000935a
    955c:	.word	0x200251d8
    9560:	.word	0x20028104
    9564:	.word	0x200271f8
    9568:	.word	0x00010040
    956c:	.word	0x402c0000
    9570:	.word	0x063a0011
    9574:	.word	0x117f0002

00009578 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9578:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    957c:	movs	r4, #0
  m_initDone = false;
    957e:	ldr	r7, [pc, #524]	; (978c <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9580:	ldr	r5, [pc, #524]	; (9790 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9582:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    9584:	ldr.w	r8, [pc, #584]	; 97d0 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    9588:	ldr	r6, [pc, #520]	; (9794 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    958a:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    958c:	strb	r4, [r0, #9]
  m_initDone = false;
    958e:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9590:	strb	r4, [r5, #0]
  m_highCapacity = false;
    9592:	strb.w	r4, [r8]
  m_version2 = false;
    9596:	strb	r4, [r6, #0]
  initSDHC();
    9598:	bl	8d78 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    959c:	mov	r1, r4
    959e:	mov	r0, r4
    95a0:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    95a4:	mov	r4, r0
    95a6:	cbnz	r0, 95bc <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    95a8:	movs	r3, #1
  m_errorLine = line;
    95aa:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    95ae:	strb	r3, [r5, #0]
  m_errorLine = line;
    95b0:	ldr	r3, [pc, #484]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    95b2:	str	r2, [r3, #0]
}
    95b4:	mov	r0, r4
    95b6:	add	sp, #68	; 0x44
    95b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95bc:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    95be:	ldr.w	r9, [pc, #532]	; 97d4 <SdioCard::begin(SdioConfig)+0x25c>
    95c2:	mov.w	r1, #426	; 0x1aa
    95c6:	mov	r0, r9
    95c8:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    95cc:	cbz	r0, 95f0 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    95ce:	ldr	r3, [pc, #460]	; (979c <SdioCard::begin(SdioConfig)+0x224>)
    95d0:	ldr	r3, [r3, #16]
    95d2:	cmp.w	r3, #426	; 0x1aa
    95d6:	beq.n	95e8 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    95d8:	movs	r3, #6
  m_errorLine = line;
    95da:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    95de:	strb	r3, [r5, #0]
  m_errorLine = line;
    95e0:	ldr	r3, [pc, #436]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    95e2:	movs	r4, #0
  m_errorLine = line;
    95e4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    95e6:	b.n	95b4 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    95e8:	movs	r3, #1
    95ea:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    95ec:	ldr	r6, [pc, #432]	; (97a0 <SdioCard::begin(SdioConfig)+0x228>)
    95ee:	b.n	9610 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    95f0:	subs	r4, #1
    95f2:	bne.n	95c2 <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    95f4:	ldrb	r3, [r6, #0]
    95f6:	cmp	r3, #0
    95f8:	bne.n	95ec <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    95fa:	bl	8d78 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    95fe:	mov	r1, r4
    9600:	mov	r0, r4
    9602:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9606:	ldrb	r3, [r6, #0]
    9608:	cmp	r3, #0
    960a:	bne.n	95ec <SdioCard::begin(SdioConfig)+0x74>
    960c:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    9610:	bl	b15c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9614:	ldr.w	r9, [pc, #428]	; 97c4 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    9618:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    961a:	ldr.w	sl, [pc, #444]	; 97d8 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    961e:	ldr.w	fp, [pc, #444]	; 97dc <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9622:	movs	r1, #0
    9624:	mov	r0, r9
    9626:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    962a:	cbnz	r0, 9638 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    962c:	movs	r3, #23
  m_errorLine = line;
    962e:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    9632:	strb	r3, [r5, #0]
  m_errorLine = line;
    9634:	ldr	r3, [pc, #352]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    9636:	b.n	95e2 <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9638:	mov	r1, r6
    963a:	mov	r0, sl
    963c:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9640:	cmp	r0, #0
    9642:	beq.n	962c <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9644:	bl	b15c <micros>
    9648:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    964a:	cmp	r0, fp
    964c:	bhi.n	962c <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    964e:	ldr	r3, [pc, #332]	; (979c <SdioCard::begin(SdioConfig)+0x224>)
    9650:	ldr	r2, [r3, #16]
    9652:	cmp	r2, #0
    9654:	bge.n	9622 <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    9656:	ldr	r1, [r3, #16]
    9658:	ldr	r2, [pc, #328]	; (97a4 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    965a:	ldr	r0, [pc, #332]	; (97a8 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    965c:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    965e:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9660:	ldr	r3, [r3, #16]
    9662:	lsls	r2, r3, #1
    m_highCapacity = true;
    9664:	itt	mi
    9666:	movmi	r3, #1
    9668:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    966c:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9670:	mov	r4, r0
    9672:	cbnz	r0, 9680 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    9674:	movs	r3, #2
  m_errorLine = line;
    9676:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    967a:	strb	r3, [r5, #0]
  m_errorLine = line;
    967c:	ldr	r3, [pc, #280]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    967e:	b.n	95b2 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9680:	movs	r1, #0
    9682:	ldr	r0, [pc, #296]	; (97ac <SdioCard::begin(SdioConfig)+0x234>)
    9684:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9688:	mov	r4, r0
    968a:	cbnz	r0, 9698 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    968c:	movs	r3, #3
  m_errorLine = line;
    968e:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9692:	strb	r3, [r5, #0]
  m_errorLine = line;
    9694:	ldr	r3, [pc, #256]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    9696:	b.n	95b2 <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9698:	ldr	r6, [pc, #256]	; (979c <SdioCard::begin(SdioConfig)+0x224>)
    969a:	ldr.w	r8, [pc, #324]	; 97e0 <SdioCard::begin(SdioConfig)+0x268>
    969e:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    96a0:	ldr	r1, [pc, #268]	; (97b0 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    96a2:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    96a4:	ldr	r0, [pc, #268]	; (97b4 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    96a6:	lsls	r3, r3, #16
    96a8:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    96ac:	bl	8f04 <readReg16(unsigned long, void*)>
    96b0:	mov	r4, r0
    96b2:	cbnz	r0, 96c0 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    96b4:	movs	r3, #7
  m_errorLine = line;
    96b6:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    96ba:	strb	r3, [r5, #0]
  m_errorLine = line;
    96bc:	ldr	r3, [pc, #216]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    96be:	b.n	95b2 <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    96c0:	ldr	r1, [pc, #244]	; (97b8 <SdioCard::begin(SdioConfig)+0x240>)
    96c2:	ldr	r0, [pc, #248]	; (97bc <SdioCard::begin(SdioConfig)+0x244>)
    96c4:	bl	8f04 <readReg16(unsigned long, void*)>
    96c8:	mov	r4, r0
    96ca:	cbnz	r0, 96d8 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    96cc:	movs	r3, #8
  m_errorLine = line;
    96ce:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    96d2:	strb	r3, [r5, #0]
  m_errorLine = line;
    96d4:	ldr	r3, [pc, #192]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    96d6:	b.n	95b2 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    96d8:	ldr.w	r1, [r8]
    96dc:	ldr	r0, [pc, #224]	; (97c0 <SdioCard::begin(SdioConfig)+0x248>)
    96de:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    96e2:	mov	r4, r0
    96e4:	cbnz	r0, 96f2 <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    96e6:	movs	r3, #5
  m_errorLine = line;
    96e8:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    96ec:	strb	r3, [r5, #0]
  m_errorLine = line;
    96ee:	ldr	r3, [pc, #168]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    96f0:	b.n	95b2 <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    96f2:	ldr.w	r1, [r8]
    96f6:	ldr	r0, [pc, #204]	; (97c4 <SdioCard::begin(SdioConfig)+0x24c>)
    96f8:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    96fc:	cbz	r0, 9746 <SdioCard::begin(SdioConfig)+0x1ce>
    96fe:	movs	r1, #2
    9700:	ldr	r0, [pc, #196]	; (97c8 <SdioCard::begin(SdioConfig)+0x250>)
    9702:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    9706:	mov	r4, r0
    9708:	cbz	r0, 9746 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    970a:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    970c:	mov	r1, sp
    970e:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9712:	bic.w	r3, r3, #6
    9716:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9718:	ldr	r3, [r6, #40]	; 0x28
    971a:	orr.w	r3, r3, #2
    971e:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9720:	mov.w	r3, #1048592	; 0x100010
    9724:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9726:	bl	94ec <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    972a:	cbnz	r0, 9752 <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    972c:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    9730:	movs	r0, #5
    9732:	bl	8b28 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    9736:	mov	r0, r2
    9738:	bl	8bd0 <setSdclk(unsigned long)>
  if (enable) {
    973c:	bl	8d48 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    9740:	movs	r3, #1
    9742:	strb	r3, [r7, #0]
  return true;
    9744:	b.n	95b4 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    9746:	movs	r3, #20
  m_errorLine = line;
    9748:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    974c:	strb	r3, [r5, #0]
  m_errorLine = line;
    974e:	ldr	r3, [pc, #72]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    9750:	b.n	95e2 <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9752:	ldrb.w	r3, [sp, #13]
    9756:	lsls	r3, r3, #30
    9758:	bpl.n	972c <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    975a:	ldr	r6, [pc, #60]	; (9798 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    975c:	mov	r1, sp
    975e:	ldr	r0, [pc, #108]	; (97cc <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    9760:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    9764:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9768:	bl	94ec <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    976c:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    9770:	cbz	r0, 977a <SdioCard::begin(SdioConfig)+0x202>
    9772:	and.w	r3, r3, #15
    9776:	cmp	r3, #1
    9778:	beq.n	9784 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    977a:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    977e:	str.w	r8, [r6]
    9782:	b.n	972c <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    9784:	movw	r2, #50000	; 0xc350
    9788:	b.n	9730 <SdioCard::begin(SdioConfig)+0x1b8>
    978a:	nop
    978c:	.word	0x20028040
    9790:	.word	0x2000935a
    9794:	.word	0x20028041
    9798:	.word	0x200251d8
    979c:	.word	0x402c0000
    97a0:	.word	0x40300000
    97a4:	.word	0x20026bec
    97a8:	.word	0x02090000
    97ac:	.word	0x031a0000
    97b0:	.word	0x20028054
    97b4:	.word	0x09090000
    97b8:	.word	0x20028044
    97bc:	.word	0x0a090000
    97c0:	.word	0x071b0000
    97c4:	.word	0x371a0000
    97c8:	.word	0x061a0000
    97cc:	.word	0x80fffff1
    97d0:	.word	0x20028042
    97d4:	.word	0x081a0000
    97d8:	.word	0x29020000
    97dc:	.word	0x000f4240
    97e0:	.word	0x20026bf0

000097e4 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    97e4:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    97e6:	ldr	r3, [pc, #148]	; (987c <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    97e8:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    97ea:	ldr	r2, [r3, #36]	; 0x24
    97ec:	lsls	r0, r2, #22
    97ee:	bmi.n	980c <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    97f0:	ldr	r2, [r3, #40]	; 0x28
    97f2:	bic.w	r2, r2, #65536	; 0x10000
    97f6:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    97f8:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    97fa:	ldr	r2, [r3, #40]	; 0x28
    97fc:	orr.w	r2, r2, #131072	; 0x20000
    9800:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9802:	ldr	r2, [r3, #40]	; 0x28
    9804:	orr.w	r2, r2, #65536	; 0x10000
    9808:	str	r2, [r3, #40]	; 0x28
    interrupts();
    980a:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    980c:	ldr	r0, [pc, #112]	; (9880 <SdioCard::readData(unsigned char*)+0x9c>)
    980e:	bl	8cd8 <waitTimeout(bool (*)())>
    9812:	cbz	r0, 9826 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9814:	ldr	r3, [pc, #108]	; (9884 <SdioCard::readData(unsigned char*)+0xa0>)
    9816:	movs	r2, #26
    9818:	strb	r2, [r3, #0]
  m_errorLine = line;
    981a:	movw	r2, #854	; 0x356
    981e:	ldr	r3, [pc, #104]	; (9888 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9820:	movs	r0, #0
  m_errorLine = line;
    9822:	str	r2, [r3, #0]
}
    9824:	pop	{r3, r4, r5, pc}
    9826:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    982a:	ldr	r5, [pc, #80]	; (987c <SdioCard::readData(unsigned char*)+0x98>)
    982c:	ldr	r3, [r5, #36]	; 0x24
    982e:	lsls	r1, r3, #20
    9830:	bpl.n	982c <SdioCard::readData(unsigned char*)+0x48>
    9832:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9834:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9838:	ldr	r0, [r5, #32]
    983a:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    983e:	cmp	r3, r1
    9840:	bne.n	9838 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9842:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9844:	cmp	r4, r2
    9846:	bne.n	982c <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9848:	ldr	r0, [pc, #64]	; (988c <SdioCard::readData(unsigned char*)+0xa8>)
    984a:	bl	8cd8 <waitTimeout(bool (*)())>
    984e:	cbz	r0, 985e <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9850:	ldr	r3, [pc, #48]	; (9884 <SdioCard::readData(unsigned char*)+0xa0>)
    9852:	movs	r2, #29
    9854:	strb	r2, [r3, #0]
  m_errorLine = line;
    9856:	movw	r2, #865	; 0x361
    985a:	ldr	r3, [pc, #44]	; (9888 <SdioCard::readData(unsigned char*)+0xa4>)
    985c:	b.n	9820 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    985e:	ldr	r2, [r5, #48]	; 0x30
    9860:	ldr	r3, [pc, #44]	; (9890 <SdioCard::readData(unsigned char*)+0xac>)
    9862:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9864:	ldr	r2, [r3, #0]
    9866:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9868:	ldr	r2, [r3, #0]
    986a:	lsls	r2, r2, #30
    986c:	bpl.n	9824 <SdioCard::readData(unsigned char*)+0x40>
    986e:	ldr	r2, [r3, #0]
    9870:	ldr	r3, [pc, #32]	; (9894 <SdioCard::readData(unsigned char*)+0xb0>)
    9872:	tst	r2, r3
    9874:	ite	eq
    9876:	moveq	r0, #1
    9878:	movne	r0, #0
    987a:	b.n	9824 <SdioCard::readData(unsigned char*)+0x40>
    987c:	.word	0x402c0000
    9880:	.word	0x00008b91
    9884:	.word	0x2000935a
    9888:	.word	0x200251d8
    988c:	.word	0x00008bb9
    9890:	.word	0x200271f8
    9894:	.word	0x117f0000

00009898 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9898:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    989a:	ldr	r0, [pc, #80]	; (98ec <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    989c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    989e:	bl	8cfc <yieldTimeout(bool (*)())>
    98a2:	cbz	r0, 98b6 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    98a4:	ldr	r3, [pc, #72]	; (98f0 <SdioCard::readStart(unsigned long)+0x58>)
    98a6:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    98a8:	movs	r0, #0
  m_errorCode = code;
    98aa:	strb	r2, [r3, #0]
  m_errorLine = line;
    98ac:	movw	r2, #945	; 0x3b1
    98b0:	ldr	r3, [pc, #64]	; (98f4 <SdioCard::readStart(unsigned long)+0x5c>)
    98b2:	str	r2, [r3, #0]
}
    98b4:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    98b6:	ldr	r3, [pc, #64]	; (98f8 <SdioCard::readStart(unsigned long)+0x60>)
    98b8:	ldr	r2, [r3, #40]	; 0x28
    98ba:	orr.w	r2, r2, #65536	; 0x10000
    98be:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    98c0:	mov.w	r2, #512	; 0x200
    98c4:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    98c6:	ldr	r3, [pc, #52]	; (98fc <SdioCard::readStart(unsigned long)+0x64>)
    98c8:	ldrb	r3, [r3, #0]
    98ca:	cbnz	r3, 98ce <SdioCard::readStart(unsigned long)+0x36>
    98cc:	lsls	r4, r4, #9
    98ce:	mov	r1, r4
    98d0:	ldr	r0, [pc, #44]	; (9900 <SdioCard::readStart(unsigned long)+0x68>)
    98d2:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    98d6:	cmp	r0, #0
    98d8:	bne.n	98b4 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    98da:	ldr	r3, [pc, #20]	; (98f0 <SdioCard::readStart(unsigned long)+0x58>)
    98dc:	movs	r2, #12
    98de:	strb	r2, [r3, #0]
  m_errorLine = line;
    98e0:	movw	r2, #957	; 0x3bd
    98e4:	ldr	r3, [pc, #12]	; (98f4 <SdioCard::readStart(unsigned long)+0x5c>)
    98e6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    98e8:	b.n	98b4 <SdioCard::readStart(unsigned long)+0x1c>
    98ea:	nop
    98ec:	.word	0x00008ef1
    98f0:	.word	0x2000935a
    98f4:	.word	0x200251d8
    98f8:	.word	0x402c0000
    98fc:	.word	0x20028042
    9900:	.word	0x123a0030

00009904 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9904:	push	{r4, r5, r6, r7, lr}
    9906:	ldrb	r5, [r0, #8]
    9908:	sub.w	sp, sp, #516	; 0x204
    990c:	mov	r4, r0
    990e:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9910:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9914:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9916:	beq.n	9958 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9918:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    991a:	ldr	r0, [pc, #132]	; (99a0 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    991c:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9920:	ite	eq
    9922:	moveq	r4, r2
    9924:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9926:	mov	r2, r4
    9928:	bl	8f8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    992c:	mov	r5, r0
    992e:	cbnz	r0, 9946 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9930:	ldr	r3, [pc, #112]	; (99a4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9932:	movs	r2, #11
    9934:	strb	r2, [r3, #0]
  m_errorLine = line;
    9936:	mov.w	r2, #884	; 0x374
    993a:	ldr	r3, [pc, #108]	; (99a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    993c:	str	r2, [r3, #0]
}
    993e:	mov	r0, r5
    9940:	add.w	sp, sp, #516	; 0x204
    9944:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9946:	cmp	r4, r6
    9948:	beq.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    994a:	mov.w	r2, #512	; 0x200
    994e:	mov	r1, sp
    9950:	mov	r0, r6
    9952:	bl	9c60 <memcpy>
    9956:	b.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9958:	bl	9284 <waitTransferComplete()>
    995c:	cmp	r0, #0
    995e:	beq.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9960:	ldrb	r3, [r4, #9]
    9962:	cmp	r3, #1
    9964:	bne.n	996c <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9966:	ldr	r3, [r4, #4]
    9968:	cmp	r3, r7
    996a:	beq.n	998a <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    996c:	ldr	r3, [r4, #0]
    996e:	mov	r0, r4
    9970:	ldr	r3, [r3, #32]
    9972:	blx	r3
    9974:	cmp	r0, #0
    9976:	beq.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9978:	mov	r1, r7
    997a:	mov	r0, r4
    997c:	bl	9898 <SdioCard::readStart(unsigned long)>
    9980:	cmp	r0, #0
    9982:	beq.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9984:	movs	r3, #1
      m_curSector = sector;
    9986:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9988:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    998a:	mov	r1, r6
    998c:	mov	r0, r4
    998e:	bl	97e4 <SdioCard::readData(unsigned char*)>
    9992:	cmp	r0, #0
    9994:	beq.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    9996:	ldr	r3, [r4, #4]
  return true;
    9998:	mov	r5, r0
    m_curSector++;
    999a:	adds	r3, #1
    999c:	str	r3, [r4, #4]
    999e:	b.n	993e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    99a0:	.word	0x113a0011
    99a4:	.word	0x2000935a
    99a8:	.word	0x200251d8

000099ac <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    99ac:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99ae:	ldr	r2, [pc, #76]	; (99fc <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    99b0:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    99b2:	mov	r6, r1
  m_curState = IDLE_STATE;
    99b4:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    99b6:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99b8:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    99ba:	ldr	r0, [pc, #68]	; (9a00 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99bc:	bic.w	r3, r3, #65536	; 0x10000
    99c0:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    99c2:	bl	8e68 <cardCommand(unsigned long, unsigned long)>
    99c6:	mov	r4, r0
    99c8:	cbnz	r0, 99dc <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    99ca:	ldr	r3, [pc, #56]	; (9a04 <SdioCard::stopTransmission(bool)+0x58>)
    99cc:	movs	r2, #9
    99ce:	strb	r2, [r3, #0]
  m_errorLine = line;
    99d0:	movw	r2, #979	; 0x3d3
    99d4:	ldr	r3, [pc, #48]	; (9a08 <SdioCard::stopTransmission(bool)+0x5c>)
    99d6:	str	r2, [r3, #0]
}
    99d8:	mov	r0, r4
    99da:	pop	{r4, r5, r6, pc}
  if (blocking) {
    99dc:	cmp	r6, #0
    99de:	beq.n	99d8 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    99e0:	ldr	r0, [pc, #40]	; (9a0c <SdioCard::stopTransmission(bool)+0x60>)
    99e2:	bl	8cfc <yieldTimeout(bool (*)())>
    99e6:	cmp	r0, #0
    99e8:	beq.n	99d8 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    99ea:	ldr	r3, [pc, #24]	; (9a04 <SdioCard::stopTransmission(bool)+0x58>)
    99ec:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    99ee:	mov	r4, r5
  m_errorCode = code;
    99f0:	strb	r2, [r3, #0]
  m_errorLine = line;
    99f2:	movw	r2, #983	; 0x3d7
    99f6:	ldr	r3, [pc, #16]	; (9a08 <SdioCard::stopTransmission(bool)+0x5c>)
    99f8:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    99fa:	b.n	99d8 <SdioCard::stopTransmission(bool)+0x2c>
    99fc:	.word	0x402c0000
    9a00:	.word	0x0cdb0000
    9a04:	.word	0x2000935a
    9a08:	.word	0x200251d8
    9a0c:	.word	0x00008b71

00009a10 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9a10:	push	{r4, lr}
    9a12:	mov	r4, r0
  if (!waitTransferComplete()) {
    9a14:	bl	9284 <waitTransferComplete()>
    9a18:	cbz	r0, 9a2a <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    9a1a:	ldrb	r3, [r4, #9]
    9a1c:	cbz	r3, 9a2a <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    9a1e:	mov	r0, r4
    9a20:	movs	r1, #1
}
    9a22:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9a26:	b.w	99ac <SdioCard::stopTransmission(bool)>
}
    9a2a:	pop	{r4, pc}

00009a2c <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    9a2c:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a2e:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a30:	tst.w	r3, #2031616	; 0x1f0000
    9a34:	beq.n	9a2e <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    9a36:	ldr	r0, [r0, #116]	; 0x74
	}
    9a38:	uxtb	r0, r0
    9a3a:	bx	lr

00009a3c <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    9a3c:	push	{r0, r1, r2, r4, r5, lr}
    9a3e:	add	r3, sp, #8
    9a40:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9a44:	ldrb	r2, [r0, #19]
    9a46:	mov	r3, r1
    9a48:	cmp	r2, #0
    9a4a:	beq.n	9ac0 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    9a4c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9a4e:	ldrb	r2, [r0, #19]
    9a50:	lsls	r1, r2, #31
    9a52:	bpl.n	9a66 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9a54:	mov.w	r4, #3758153728	; 0xe000e000
    9a58:	ldr	r5, [r0, #20]
    9a5a:	ldr.w	r1, [r4, #384]	; 0x180
    9a5e:	ands	r1, r5
    9a60:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9a62:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    9a66:	lsls	r5, r2, #30
    9a68:	bpl.n	9a7c <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9a6a:	mov.w	r4, #3758153728	; 0xe000e000
    9a6e:	ldr	r5, [r0, #24]
    9a70:	ldr.w	r1, [r4, #388]	; 0x184
    9a74:	ands	r1, r5
    9a76:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9a78:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    9a7c:	lsls	r4, r2, #29
    9a7e:	bpl.n	9a92 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9a80:	mov.w	r4, #3758153728	; 0xe000e000
    9a84:	ldr	r5, [r0, #28]
    9a86:	ldr.w	r1, [r4, #392]	; 0x188
    9a8a:	ands	r1, r5
    9a8c:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9a8e:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    9a92:	lsls	r1, r2, #28
    9a94:	bpl.n	9aa8 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9a96:	mov.w	r4, #3758153728	; 0xe000e000
    9a9a:	ldr	r5, [r0, #32]
    9a9c:	ldr.w	r1, [r4, #396]	; 0x18c
    9aa0:	ands	r1, r5
    9aa2:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9aa4:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    9aa8:	lsls	r2, r2, #27
    9aaa:	bpl.n	9abe <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    9aac:	mov.w	r1, #3758153728	; 0xe000e000
    9ab0:	ldr	r4, [r0, #36]	; 0x24
    9ab2:	ldr.w	r2, [r1, #400]	; 0x190
    9ab6:	ands	r2, r4
    9ab8:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9aba:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    9abe:	cpsie	i
		if (settings.clock() != _clock) {
    9ac0:	ldr	r2, [r0, #8]
    9ac2:	cmp	r3, r2
    9ac4:	beq.n	9b14 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    9ac6:	ldr	r2, [pc, #112]	; (9b38 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    9ac8:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    9aca:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9acc:	ldr	r1, [pc, #108]	; (9b3c <SPIClass::beginTransaction(SPISettings)+0x100>)
    9ace:	ubfx	r4, r2, #4, #2
    9ad2:	ubfx	r2, r2, #26, #3
    9ad6:	ldr.w	r4, [r1, r4, lsl #2]
    9ada:	adds	r2, #1
    9adc:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    9ae0:	cbz	r3, 9b2e <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    9ae2:	cmp	r3, r1
    9ae4:	bhi.n	9afe <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    9ae6:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    9aea:	udiv	r1, r1, r2
    9aee:	cmp	r3, r1
    9af0:	bcs.n	9af4 <SPIClass::beginTransaction(SPISettings)+0xb8>
    9af2:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    9af4:	cmp.w	r2, #258	; 0x102
    9af8:	bcs.n	9b02 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    9afa:	cmp	r2, #2
    9afc:	bhi.n	9b06 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    9afe:	movs	r3, #0
    9b00:	b.n	9b08 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    9b02:	movw	r2, #257	; 0x101
				div = d-2;
    9b06:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9b08:	lsrs	r1, r3, #1
    9b0a:	lsls	r2, r1, #16
    9b0c:	orr.w	r2, r2, r1, lsl #8
    9b10:	orrs	r3, r2
    9b12:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9b14:	ldr	r3, [r0, #0]
		port().CR = 0;
    9b16:	movs	r2, #0
    9b18:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9b1a:	movs	r2, #3
    9b1c:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    9b1e:	ldr	r2, [r0, #12]
    9b20:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    9b22:	ldr	r2, [sp, #4]
    9b24:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9b26:	movs	r2, #1
    9b28:	str	r2, [r3, #16]
	}
    9b2a:	add	sp, #12
    9b2c:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    9b2e:	cmp	r4, r2
    9b30:	bcc.n	9b08 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9b32:	mov	r2, r1
    9b34:	b.n	9af2 <SPIClass::beginTransaction(SPISettings)+0xb6>
    9b36:	nop
    9b38:	.word	0x400fc000
    9b3c:	.word	0x200005f8

00009b40 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9b40:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    9b44:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    9b46:	ldr	r0, [r0, #0]
    9b48:	bl	9a3c <SPIClass::beginTransaction(SPISettings)>
}
    9b4c:	pop	{r3, pc}

00009b4e <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9b4e:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    9b50:	ldrb	r2, [r3, #19]
    9b52:	cbz	r2, 9b9a <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9b54:	lsls	r0, r2, #31
    9b56:	bpl.n	9b62 <SdSpiArduinoDriver::deactivate()+0x14>
    9b58:	ldr	r0, [r3, #40]	; 0x28
    9b5a:	mov.w	r1, #3758153728	; 0xe000e000
    9b5e:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9b62:	lsls	r1, r2, #30
    9b64:	bpl.n	9b70 <SdSpiArduinoDriver::deactivate()+0x22>
    9b66:	ldr	r0, [r3, #44]	; 0x2c
    9b68:	mov.w	r1, #3758153728	; 0xe000e000
    9b6c:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9b70:	lsls	r0, r2, #29
    9b72:	bpl.n	9b7e <SdSpiArduinoDriver::deactivate()+0x30>
    9b74:	ldr	r0, [r3, #48]	; 0x30
    9b76:	mov.w	r1, #3758153728	; 0xe000e000
    9b7a:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9b7e:	lsls	r1, r2, #28
    9b80:	bpl.n	9b8c <SdSpiArduinoDriver::deactivate()+0x3e>
    9b82:	ldr	r0, [r3, #52]	; 0x34
    9b84:	mov.w	r1, #3758153728	; 0xe000e000
    9b88:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9b8c:	lsls	r2, r2, #27
    9b8e:	bpl.n	9b9a <SdSpiArduinoDriver::deactivate()+0x4c>
    9b90:	ldr	r2, [r3, #56]	; 0x38
    9b92:	mov.w	r3, #3758153728	; 0xe000e000
    9b96:	str.w	r2, [r3, #272]	; 0x110
}
    9b9a:	bx	lr

00009b9c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    9b9c:	ldr	r0, [r0, #0]
    9b9e:	b.w	4a96 <SPIClass::end()>

00009ba2 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    9ba2:	ldr	r3, [r0, #0]
    9ba4:	movs	r1, #255	; 0xff
    9ba6:	ldr	r0, [r3, #0]
    9ba8:	b.w	9a2c <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009bac <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9bac:	push	{r0, r1, r2, r4, r5, lr}
    9bae:	mov	r4, r1
    9bb0:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9bb2:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9bb4:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    9bb6:	mov	r0, r4
    9bb8:	bl	9c1c <memset>
		transfer(buf, buf, count);
    9bbc:	ldr	r0, [r5, #0]
    9bbe:	ldr	r3, [sp, #4]
    9bc0:	mov	r2, r4
    9bc2:	mov	r1, r4
    9bc4:	bl	4a40 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9bc8:	movs	r0, #0
    9bca:	add	sp, #12
    9bcc:	pop	{r4, r5, pc}

00009bce <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    9bce:	ldr	r3, [r0, #0]
    9bd0:	ldr	r0, [r3, #0]
    9bd2:	b.w	9a2c <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009bd6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9bd6:	subs	r3, r2, #1
    9bd8:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9bdc:	push	{r4, r5, r6, lr}
    9bde:	mov	r6, r0
    9be0:	sub.w	sp, sp, #512	; 0x200
    9be4:	mov	r4, r1
    9be6:	mov	r5, r2
  if (0 < count && count <= 512) {
    9be8:	bcc.n	9bfe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    9bea:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9bec:	cmp	r4, r5
    9bee:	beq.n	9c10 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    9bf0:	ldr	r3, [r6, #0]
    9bf2:	ldrb.w	r1, [r4], #1
    9bf6:	ldr	r0, [r3, #0]
    9bf8:	bl	9a2c <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    9bfc:	b.n	9bec <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    9bfe:	mov	r0, sp
    9c00:	bl	9c60 <memcpy>
    9c04:	mov	r2, sp
    9c06:	mov	r3, r5
    9c08:	ldr	r0, [r6, #0]
    9c0a:	mov	r1, r2
    9c0c:	bl	4a40 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    9c10:	add.w	sp, sp, #512	; 0x200
    9c14:	pop	{r4, r5, r6, pc}

00009c16 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9c16:	b.w	b8f8 <digitalWrite>
	...

00009c1c <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    9c1c:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    9c1e:	cbz	r2, 9c5c <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    9c20:	cmp	r2, #16
    blt     .L_bytewise
    9c22:	blt.n	9c54 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    9c24:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    9c28:	cbz	r3, 9c38 <memset+0x1c>
    rsb     r3, #8
    9c2a:	rsb	r3, r3, #8
    subs    r2, r3
    9c2e:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    9c30:	subs	r3, #1
    strb    r1, [r0], #1
    9c32:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    9c36:	bgt.n	9c30 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    9c38:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    9c3a:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    9c3e:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    9c42:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    9c44:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    9c46:	subs	r3, #1
    strd    r1, r12, [r0], #8
    9c48:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    9c4c:	bgt.n	9c46 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    9c4e:	ands.w	r2, r2, #7
    beq     .L_done
    9c52:	beq.n	9c5c <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    9c54:	subs	r2, #1
    strb    r1, [r0], #1
    9c56:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    9c5a:	bgt.n	9c54 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    9c5c:	pop	{r0, pc}
    9c5e:	nop

00009c60 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9c60:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9c62:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9c66:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9c6a:	bne.n	9d48 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9c6c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9c6e:	bcc.n	9cf4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9c70:	ldr.w	r3, [r1], #4
    9c74:	str.w	r3, [r0], #4
    9c78:	ldr.w	r3, [r1], #4
    9c7c:	str.w	r3, [r0], #4
    9c80:	ldr.w	r3, [r1], #4
    9c84:	str.w	r3, [r0], #4
    9c88:	ldr.w	r3, [r1], #4
    9c8c:	str.w	r3, [r0], #4
    9c90:	ldr.w	r3, [r1], #4
    9c94:	str.w	r3, [r0], #4
    9c98:	ldr.w	r3, [r1], #4
    9c9c:	str.w	r3, [r0], #4
    9ca0:	ldr.w	r3, [r1], #4
    9ca4:	str.w	r3, [r0], #4
    9ca8:	ldr.w	r3, [r1], #4
    9cac:	str.w	r3, [r0], #4
    9cb0:	ldr.w	r3, [r1], #4
    9cb4:	str.w	r3, [r0], #4
    9cb8:	ldr.w	r3, [r1], #4
    9cbc:	str.w	r3, [r0], #4
    9cc0:	ldr.w	r3, [r1], #4
    9cc4:	str.w	r3, [r0], #4
    9cc8:	ldr.w	r3, [r1], #4
    9ccc:	str.w	r3, [r0], #4
    9cd0:	ldr.w	r3, [r1], #4
    9cd4:	str.w	r3, [r0], #4
    9cd8:	ldr.w	r3, [r1], #4
    9cdc:	str.w	r3, [r0], #4
    9ce0:	ldr.w	r3, [r1], #4
    9ce4:	str.w	r3, [r0], #4
    9ce8:	ldr.w	r3, [r1], #4
    9cec:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9cf0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9cf2:	bcs.n	9c70 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9cf4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9cf6:	bcc.n	9d1c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9cf8:	ldr.w	r3, [r1], #4
    9cfc:	str.w	r3, [r0], #4
    9d00:	ldr.w	r3, [r1], #4
    9d04:	str.w	r3, [r0], #4
    9d08:	ldr.w	r3, [r1], #4
    9d0c:	str.w	r3, [r0], #4
    9d10:	ldr.w	r3, [r1], #4
    9d14:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9d18:	subs	r2, #16
	bhs	.Lmid_block_loop
    9d1a:	bcs.n	9cf8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9d1c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9d1e:	bcc.n	9d2c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9d20:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9d24:	str.w	r3, [r0], #4
	subs	r2, #4
    9d28:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9d2a:	bcs.n	9d20 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9d2c:	adds	r2, #4
	beq	.Ldone
    9d2e:	beq.n	9d42 <memcpy+0xe2>

	lsls	r2, r2, #31
    9d30:	lsls	r2, r2, #31
	itt ne
    9d32:	itt	ne
	ldrbne  r3, [r1], #1
    9d34:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d38:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9d3c:	bcc.n	9d42 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9d3e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9d40:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d42:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d44:	bx	lr
    9d46:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9d48:	cmp	r2, #8
	blo	.Lbyte_copy
    9d4a:	bcc.n	9d74 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9d4c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9d4e:	beq.n	9c6c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9d50:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9d54:	beq.n	9c6c <memcpy+0xc>

	rsb	r3, #4
    9d56:	rsb	r3, r3, #4
	subs	r2, r3
    9d5a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9d5c:	lsls	r3, r3, #31
	itt ne
    9d5e:	itt	ne
	ldrbne  r3, [r1], #1
    9d60:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d64:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9d68:	bcc.n	9c6c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9d6a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9d6e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9d72:	b.n	9c6c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9d74:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9d76:	bcc.n	9d2c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9d78:	subs	r2, #1
	ldrb    r3, [r1], #1
    9d7a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9d7e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9d82:	bcs.n	9d78 <memcpy+0x118>

	ldrb	r3, [r1]
    9d84:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9d86:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9d88:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9d8a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9d8c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9d8e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d90:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d92:	bx	lr

00009d94 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9d94:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9d96:	ldr	r4, [pc, #80]	; (9de8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9d98:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9d9c:	ldr	r5, [pc, #76]	; (9dec <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9d9e:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9da2:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9da6:	ldr	r7, [pc, #72]	; (9df0 <rx_queue_transfer+0x5c>)
    9da8:	add.w	r5, r5, r0, lsl #5
{
    9dac:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dae:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9db2:	mov	r1, r4
    9db4:	ldrh	r2, [r7, #0]
    9db6:	mov	r0, r5
    9db8:	bl	ae38 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9dbc:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9dbe:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9dc0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9dc4:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    9dc8:	adds	r4, #32
	} while (location < end_addr);
    9dca:	cmp	r3, r4
    9dcc:	bhi.n	9dc4 <rx_queue_transfer+0x30>
	asm("dsb");
    9dce:	dsb	sy
	asm("isb");
    9dd2:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9dd6:	movs	r0, #3
    9dd8:	mov	r1, r5
    9dda:	bl	ae88 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9dde:	mov.w	r3, #131072	; 0x20000
    9de2:	str.w	r3, [r6, #268]	; 0x10c
}
    9de6:	pop	{r3, r4, r5, r6, r7, pc}
    9de8:	.word	0x20200800
    9dec:	.word	0x2000bb40
    9df0:	.word	0x20027fb8

00009df4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9df4:	ldr	r3, [r0, #4]
    9df6:	ldr	r2, [pc, #136]	; (9e80 <rx_event+0x8c>)
    9df8:	ubfx	r3, r3, #16, #15
{
    9dfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e00:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9e02:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e04:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9e06:	cmp	r4, #0
    9e08:	ble.n	9e52 <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    9e0a:	ldr	r2, [pc, #120]	; (9e84 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9e0c:	uxth.w	sl, r4
		if (head != rx_tail) {
    9e10:	ldr	r0, [pc, #116]	; (9e88 <rx_event+0x94>)
		uint32_t head = rx_head;
    9e12:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    9e14:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9e16:	uxtb	r3, r1
		if (head != rx_tail) {
    9e18:	ldr.w	r8, [pc, #128]	; 9e9c <rx_event+0xa8>
    9e1c:	cmp	r1, r0
    9e1e:	ldr	r7, [pc, #108]	; (9e8c <rx_event+0x98>)
    9e20:	ldr	r1, [pc, #108]	; (9e90 <rx_event+0x9c>)
    9e22:	beq.n	9e5c <rx_event+0x68>
			uint32_t ii = rx_list[head];
    9e24:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    9e28:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9e2c:	rsb	r0, r6, #512	; 0x200
    9e30:	cmp	r4, r0
    9e32:	bhi.n	9e5c <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9e34:	ldr	r3, [pc, #92]	; (9e94 <rx_event+0xa0>)
    9e36:	add.w	r0, r6, r9, lsl #9
    9e3a:	mov	r2, r4
				rx_count[ii] = count + len;
    9e3c:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9e3e:	add.w	r1, r3, r5, lsl #9
    9e42:	add	r0, r3
    9e44:	bl	9c60 <memcpy>
				rx_available += len;
    9e48:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    9e4a:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    9e4e:	add	r3, r4
    9e50:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9e52:	mov	r0, r5
	}
}
    9e54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    9e58:	b.w	9d94 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    9e5c:	adds	r3, #1
		rx_index[i] = 0;
    9e5e:	movs	r6, #0
    9e60:	ldr	r0, [pc, #52]	; (9e98 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    9e62:	cmp	r3, #9
		rx_count[i] = len;
    9e64:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    9e68:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9e6c:	it	cs
    9e6e:	movcs	r3, r6
		rx_list[head] = i;
    9e70:	strb	r5, [r1, r3]
		rx_head = head;
    9e72:	uxtb	r3, r3
    9e74:	strb	r3, [r2, #0]
		rx_available += len;
    9e76:	ldr	r3, [r7, #0]
    9e78:	add	r4, r3
    9e7a:	str	r4, [r7, #0]
}
    9e7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e80:	.word	0x20027fb8
    9e84:	.word	0x20028193
    9e88:	.word	0x200281a3
    9e8c:	.word	0x20027884
    9e90:	.word	0x20028195
    9e94:	.word	0x20200800
    9e98:	.word	0x20027fa8
    9e9c:	.word	0x20027f98

00009ea0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9ea0:	ldr	r3, [pc, #112]	; (9f14 <usb_serial_flush_callback+0x74>)
{
    9ea2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    9ea6:	ldrb	r2, [r3, #0]
    9ea8:	and.w	r3, r2, #255	; 0xff
    9eac:	cbnz	r2, 9f0e <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    9eae:	ldr	r2, [pc, #104]	; (9f18 <usb_serial_flush_callback+0x78>)
    9eb0:	ldrb	r2, [r2, #0]
    9eb2:	cbz	r2, 9f0e <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    9eb4:	ldr	r7, [pc, #100]	; (9f1c <usb_serial_flush_callback+0x7c>)
    9eb6:	ldrh	r5, [r7, #0]
    9eb8:	cbz	r5, 9f0e <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9eba:	ldr	r6, [pc, #100]	; (9f20 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9ebc:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9ec0:	ldr	r1, [pc, #96]	; (9f24 <usb_serial_flush_callback+0x84>)
    9ec2:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ec4:	ldr	r4, [pc, #96]	; (9f28 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    9ec6:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9eca:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9ece:	mov	r2, r5
    9ed0:	mov	r0, r8
    9ed2:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9ed4:	add	r5, r4
    9ed6:	bl	ae38 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    9eda:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9ede:	mov.w	r3, #3758153728	; 0xe000e000
    9ee2:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9ee6:	adds	r4, #32
	} while (location < end_addr);
    9ee8:	cmp	r5, r4
    9eea:	bhi.n	9ee2 <usb_serial_flush_callback+0x42>
	asm("dsb");
    9eec:	dsb	sy
	asm("isb");
    9ef0:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9ef4:	movs	r0, #3
    9ef6:	mov	r1, r8
    9ef8:	bl	ae64 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9efc:	ldrb	r3, [r6, #0]
    9efe:	movs	r2, #0
    9f00:	adds	r3, #1
	tx_available = 0;
    9f02:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    9f04:	uxtb	r3, r3
    9f06:	cmp	r3, #3
    9f08:	ite	ls
    9f0a:	strbls	r3, [r6, #0]
    9f0c:	strbhi	r2, [r6, #0]
}
    9f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f12:	nop
    9f14:	.word	0x200281a9
    9f18:	.word	0x200281ab
    9f1c:	.word	0x2002803a
    9f20:	.word	0x200281a7
    9f24:	.word	0x2000bcc0
    9f28:	.word	0x20201800

00009f2c <usb_serial_reset>:
}
    9f2c:	bx	lr
	...

00009f30 <usb_serial_configure>:
	if (usb_high_speed) {
    9f30:	ldr	r3, [pc, #180]	; (9fe8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9f32:	movs	r2, #128	; 0x80
    9f34:	movs	r1, #0
    9f36:	ldr	r0, [pc, #180]	; (9fec <usb_serial_configure+0xbc>)
{
    9f38:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9f3a:	ldrb	r3, [r3, #0]
	tx_head = 0;
    9f3c:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9f3e:	ldr	r5, [pc, #176]	; (9ff0 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    9f40:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    9f42:	ldr	r6, [pc, #176]	; (9ff4 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    9f44:	ite	eq
    9f46:	moveq	r3, #64	; 0x40
    9f48:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9f4c:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9f4e:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9f50:	bl	9c1c <memset>
	tx_head = 0;
    9f54:	ldr	r3, [pc, #160]	; (9ff8 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f56:	mov.w	r2, #256	; 0x100
    9f5a:	mov	r1, r4
    9f5c:	ldr	r0, [pc, #156]	; (9ffc <usb_serial_configure+0xcc>)
	tx_head = 0;
    9f5e:	strb	r4, [r3, #0]
	tx_available = 0;
    9f60:	ldr	r3, [pc, #156]	; (a000 <usb_serial_configure+0xd0>)
    9f62:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f64:	bl	9c1c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9f68:	movs	r2, #16
    9f6a:	mov	r1, r4
    9f6c:	ldr	r0, [pc, #148]	; (a004 <usb_serial_configure+0xd4>)
    9f6e:	bl	9c1c <memset>
	memset(rx_index, 0, sizeof(rx_index));
    9f72:	movs	r2, #16
    9f74:	mov	r1, r4
    9f76:	ldr	r0, [pc, #144]	; (a008 <usb_serial_configure+0xd8>)
    9f78:	bl	9c1c <memset>
	rx_head = 0;
    9f7c:	ldr	r3, [pc, #140]	; (a00c <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9f7e:	mov	r2, r4
    9f80:	movs	r1, #16
	rx_head = 0;
    9f82:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9f84:	movs	r0, #2
	rx_tail = 0;
    9f86:	ldr	r3, [pc, #136]	; (a010 <usb_serial_configure+0xe0>)
    9f88:	strb	r4, [r3, #0]
	rx_available = 0;
    9f8a:	ldr	r3, [pc, #136]	; (a014 <usb_serial_configure+0xe4>)
    9f8c:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9f8e:	mov	r3, r4
    9f90:	bl	adf8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9f94:	ldr	r3, [pc, #128]	; (a018 <usb_serial_configure+0xe8>)
    9f96:	mov	r2, r4
    9f98:	ldrh	r1, [r6, #0]
    9f9a:	movs	r0, #3
    9f9c:	bl	adb8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9fa0:	mov	r3, r4
    9fa2:	movs	r2, #1
    9fa4:	ldrh	r1, [r5, #0]
    9fa6:	movs	r0, #3
    9fa8:	bl	adf8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9fac:	mov	r0, r4
    9fae:	adds	r4, #1
    9fb0:	bl	9d94 <rx_queue_transfer>
    9fb4:	cmp	r4, #8
    9fb6:	bne.n	9fac <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    9fb8:	ldr	r3, [pc, #96]	; (a01c <usb_serial_configure+0xec>)
    9fba:	ldr	r2, [pc, #100]	; (a020 <usb_serial_configure+0xf0>)
    9fbc:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    9fbe:	movs	r2, #0
    9fc0:	ldr	r3, [pc, #96]	; (a024 <usb_serial_configure+0xf4>)
    9fc2:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9fc6:	movs	r2, #74	; 0x4a
    9fc8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9fcc:	ldr.w	r2, [r3, #328]	; 0x148
    9fd0:	orr.w	r2, r2, #16777216	; 0x1000000
    9fd4:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    9fd8:	ldr	r3, [pc, #76]	; (a028 <usb_serial_configure+0xf8>)
    9fda:	cbz	r3, 9fe6 <usb_serial_configure+0xb6>
    9fdc:	ldr	r2, [pc, #76]	; (a02c <usb_serial_configure+0xfc>)
    9fde:	ldrb	r3, [r2, #0]
    9fe0:	orr.w	r3, r3, #1
    9fe4:	strb	r3, [r2, #0]
}
    9fe6:	pop	{r4, r5, r6, pc}
    9fe8:	.word	0x200281ac
    9fec:	.word	0x2000bcc0
    9ff0:	.word	0x2002803c
    9ff4:	.word	0x20027fb8
    9ff8:	.word	0x200281a7
    9ffc:	.word	0x2000bb40
    a000:	.word	0x2002803a
    a004:	.word	0x20027f98
    a008:	.word	0x20027fa8
    a00c:	.word	0x20028193
    a010:	.word	0x200281a3
    a014:	.word	0x20027884
    a018:	.word	0x00009df5
    a01c:	.word	0x20027f64
    a020:	.word	0x00009ea1
    a024:	.word	0x402e0000
    a028:	.word	0x00000000
    a02c:	.word	0x200281ae

0000a030 <usb_serial_read>:
{
    a030:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a034:	mov.w	r3, #3758153728	; 0xe000e000
    a038:	mov.w	r2, #131072	; 0x20000
{
    a03c:	mov	r7, r0
    a03e:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a040:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a044:	movs	r5, #0
	uint32_t tail = rx_tail;
    a046:	ldr	r3, [pc, #160]	; (a0e8 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a048:	ldr.w	fp, [pc, #176]	; a0fc <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a04c:	ldrb	r4, [r3, #0]
    a04e:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a050:	cmp	r5, r8
    a052:	bcs.n	a05c <usb_serial_read+0x2c>
    a054:	ldr	r3, [pc, #148]	; (a0ec <usb_serial_read+0xbc>)
    a056:	ldrb	r2, [r3, #0]
    a058:	cmp	r2, r4
    a05a:	bne.n	a070 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a05c:	mov.w	r3, #3758153728	; 0xe000e000
    a060:	mov.w	r2, #131072	; 0x20000
}
    a064:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a066:	str.w	r2, [r3, #268]	; 0x10c
}
    a06a:	add	sp, #12
    a06c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a070:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a072:	ldr	r3, [pc, #124]	; (a0f0 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a074:	ldr	r0, [pc, #124]	; (a0f4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a076:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a07a:	cmp	r4, #9
    a07c:	ldr.w	sl, [pc, #128]	; a100 <usb_serial_read+0xd0>
    a080:	it	cs
    a082:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a084:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a088:	ldrh.w	r1, [fp, r9, lsl #1]
    a08c:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a090:	ldr	r0, [pc, #100]	; (a0f8 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a092:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a094:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a098:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a09a:	add	r1, r0
		if (avail > len) {
    a09c:	bcs.n	a0c4 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a09e:	mov	r0, r7
    a0a0:	str	r2, [sp, #4]
    a0a2:	bl	9c60 <memcpy>
			rx_available -= len;
    a0a6:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a0aa:	ldr	r2, [sp, #4]
			rx_available -= len;
    a0ac:	sub.w	r1, r1, r8
    a0b0:	add	r1, r5
    a0b2:	mov	r5, r8
    a0b4:	str.w	r1, [sl]
			rx_index[i] += len;
    a0b8:	ldrh.w	r1, [fp, r9, lsl #1]
    a0bc:	add	r2, r1
    a0be:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a0c2:	b.n	a050 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0c4:	mov	r2, r6
    a0c6:	mov	r0, r7
    a0c8:	bl	9c60 <memcpy>
			rx_available -= avail;
    a0cc:	ldr.w	r2, [sl]
			rx_tail = tail;
    a0d0:	ldr	r3, [pc, #20]	; (a0e8 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a0d2:	mov	r0, r9
			rx_available -= avail;
    a0d4:	subs	r2, r2, r6
			p += avail;
    a0d6:	add	r7, r6
			count += avail;
    a0d8:	add	r5, r6
			rx_available -= avail;
    a0da:	str.w	r2, [sl]
			rx_tail = tail;
    a0de:	uxtb	r2, r4
    a0e0:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a0e2:	bl	9d94 <rx_queue_transfer>
    a0e6:	b.n	a050 <usb_serial_read+0x20>
    a0e8:	.word	0x200281a3
    a0ec:	.word	0x20028193
    a0f0:	.word	0x20028195
    a0f4:	.word	0x20027f98
    a0f8:	.word	0x20200800
    a0fc:	.word	0x20027fa8
    a100:	.word	0x20027884

0000a104 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a104:	ldr	r3, [pc, #44]	; (a134 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a106:	ldr	r1, [pc, #48]	; (a138 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a108:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a10a:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a10c:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a10e:	cmp	r2, r1
    a110:	beq.n	a12e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a112:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a114:	ldr	r2, [pc, #36]	; (a13c <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a116:	cmp	r3, #9
    a118:	it	cs
    a11a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a11c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a11e:	ldr	r3, [pc, #32]	; (a140 <usb_serial_peekchar+0x3c>)
    a120:	ldrh.w	r1, [r3, r2, lsl #1]
    a124:	ldr	r3, [pc, #28]	; (a144 <usb_serial_peekchar+0x40>)
    a126:	add.w	r3, r3, r2, lsl #9
    a12a:	ldrb	r0, [r3, r1]
    a12c:	bx	lr
	if (tail == rx_head) return -1;
    a12e:	mov.w	r0, #4294967295
}
    a132:	bx	lr
    a134:	.word	0x200281a3
    a138:	.word	0x20028193
    a13c:	.word	0x20028195
    a140:	.word	0x20027fa8
    a144:	.word	0x20200800

0000a148 <usb_serial_available>:
	uint32_t n = rx_available;
    a148:	ldr	r3, [pc, #12]	; (a158 <usb_serial_available+0x10>)
{
    a14a:	push	{r4, lr}
	uint32_t n = rx_available;
    a14c:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a14e:	cbnz	r4, a154 <usb_serial_available+0xc>
    a150:	bl	be24 <yield>
}
    a154:	mov	r0, r4
    a156:	pop	{r4, pc}
    a158:	.word	0x20027884

0000a15c <usb_serial_flush_input>:
{
    a15c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a160:	ldr	r5, [pc, #64]	; (a1a4 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a162:	ldr	r7, [pc, #68]	; (a1a8 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a164:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a166:	ldr.w	r8, [pc, #80]	; a1b8 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a16a:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a16c:	ldr	r6, [pc, #60]	; (a1ac <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a16e:	ldrb	r3, [r7, #0]
    a170:	cmp	r3, r4
    a172:	bne.n	a178 <usb_serial_flush_input+0x1c>
}
    a174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a178:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a17a:	ldr	r2, [pc, #52]	; (a1b0 <usb_serial_flush_input+0x54>)
    a17c:	ldr	r1, [pc, #52]	; (a1b4 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a17e:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a180:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a182:	it	cs
    a184:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a186:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a18a:	ldrh.w	r2, [r2, r0, lsl #1]
    a18e:	ldrh.w	r1, [r1, r0, lsl #1]
    a192:	subs	r2, r2, r1
    a194:	subs	r3, r3, r2
    a196:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a198:	bl	9d94 <rx_queue_transfer>
		rx_tail = tail;
    a19c:	uxtb	r3, r4
    a19e:	strb	r3, [r5, #0]
    a1a0:	b.n	a16e <usb_serial_flush_input+0x12>
    a1a2:	nop
    a1a4:	.word	0x200281a3
    a1a8:	.word	0x20028193
    a1ac:	.word	0x20027884
    a1b0:	.word	0x20027f98
    a1b4:	.word	0x20027fa8
    a1b8:	.word	0x20028195

0000a1bc <usb_serial_getchar>:
{
    a1bc:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a1be:	movs	r1, #1
    a1c0:	add.w	r0, sp, #7
    a1c4:	bl	a030 <usb_serial_read>
    a1c8:	cbz	r0, a1d4 <usb_serial_getchar+0x18>
    a1ca:	ldrb.w	r0, [sp, #7]
}
    a1ce:	add	sp, #12
    a1d0:	ldr.w	pc, [sp], #4
	return -1;
    a1d4:	mov.w	r0, #4294967295
    a1d8:	b.n	a1ce <usb_serial_getchar+0x12>
	...

0000a1dc <usb_serial_write>:
	if (!usb_configuration) return 0;
    a1dc:	ldr	r3, [pc, #356]	; (a344 <usb_serial_write+0x168>)
{
    a1de:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a1e2:	ldrb	r3, [r3, #0]
{
    a1e4:	mov	r6, r0
    a1e6:	mov	r5, r1
	if (!usb_configuration) return 0;
    a1e8:	and.w	r4, r3, #255	; 0xff
    a1ec:	cmp	r3, #0
    a1ee:	beq.w	a302 <usb_serial_write+0x126>
	uint32_t sent=0;
    a1f2:	movs	r4, #0
		tx_noautoflush = 1;
    a1f4:	ldr.w	fp, [pc, #360]	; a360 <usb_serial_write+0x184>
	while (size > 0) {
    a1f8:	cmp	r5, #0
    a1fa:	beq.w	a302 <usb_serial_write+0x126>
		tx_noautoflush = 1;
    a1fe:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a200:	ldr.w	r9, [pc, #352]	; a364 <usb_serial_write+0x188>
		while (!tx_available) {
    a204:	ldr	r7, [pc, #320]	; (a348 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    a206:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    a20a:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    a20e:	ldr	r3, [pc, #316]	; (a34c <usb_serial_write+0x170>)
    a210:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    a214:	movs	r3, #0
		int waiting=0;
    a216:	mov	r8, r3
		while (!tx_available) {
    a218:	ldrh	r1, [r7, #0]
    a21a:	cbnz	r1, a23a <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    a21c:	mov	r0, sl
    a21e:	strd	r3, r1, [sp]
    a222:	bl	aea4 <usb_transfer_status>
			if (!(status & 0x80)) {
    a226:	ands.w	r0, r0, #128	; 0x80
    a22a:	ldr	r2, [pc, #292]	; (a350 <usb_serial_write+0x174>)
    a22c:	ldrd	r3, r1, [sp]
    a230:	bne.n	a2de <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    a232:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    a236:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    a238:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a23a:	ldrh.w	r8, [r7]
    a23e:	ldrb.w	r3, [r9]
    a242:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    a246:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a248:	mov.w	r2, r3, lsl #11
    a24c:	add.w	r0, r0, r3, lsl #11
    a250:	ldr	r3, [pc, #256]	; (a354 <usb_serial_write+0x178>)
    a252:	str	r2, [sp, #0]
    a254:	add	r0, r3
		if (size >= tx_available) {
    a256:	bhi.n	a324 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    a258:	mov	r2, r8
    a25a:	mov	r1, r6
    a25c:	bl	9c60 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a260:	ldr	r2, [sp, #0]
    a262:	ldr	r3, [pc, #240]	; (a354 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a264:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a266:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a268:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a26a:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a26c:	mov.w	r2, #2048	; 0x800
    a270:	mov	r1, r8
    a272:	bl	ae38 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a276:	mov	r1, r8
	asm("dsb");
    a278:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    a27c:	add.w	r2, r8, #2048	; 0x800
    a280:	add.w	r3, r8, #32
    a284:	cmp	r3, r2
    a286:	ite	hi
    a288:	movhi	r3, #1
    a28a:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a28c:	mov.w	r2, #3758153728	; 0xe000e000
    a290:	add.w	r3, r8, r3, lsl #5
    a294:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    a298:	adds	r1, #32
	} while (location < end_addr);
    a29a:	cmp	r1, r3
    a29c:	bne.n	a294 <usb_serial_write+0xb8>
	asm("dsb");
    a29e:	dsb	sy
	asm("isb");
    a2a2:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a2a6:	movs	r0, #3
    a2a8:	mov	r1, sl
    a2aa:	bl	ae64 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a2ae:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    a2b2:	ldr	r2, [pc, #164]	; (a358 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a2b4:	adds	r3, #1
    a2b6:	uxtb	r3, r3
    a2b8:	cmp	r3, #3
    a2ba:	it	hi
    a2bc:	movhi	r3, #0
    a2be:	strb.w	r3, [r9]
			size -= tx_available;
    a2c2:	ldrh	r3, [r7, #0]
    a2c4:	subs	r5, r5, r3
			sent += tx_available;
    a2c6:	add	r4, r3
			data += tx_available;
    a2c8:	add	r6, r3
			tx_available = 0;
    a2ca:	movs	r3, #0
    a2cc:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    a2ce:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a2d2:	dsb	sy
		tx_noautoflush = 0;
    a2d6:	movs	r3, #0
    a2d8:	strb.w	r3, [fp]
    a2dc:	b.n	a1f8 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    a2de:	dsb	sy
			tx_noautoflush = 0;
    a2e2:	strb.w	r1, [fp]
			if (!waiting) {
    a2e6:	cmp.w	r8, #0
    a2ea:	bne.n	a2f0 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a2ec:	ldr	r3, [pc, #108]	; (a35c <usb_serial_write+0x180>)
    a2ee:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    a2f0:	ldrb	r1, [r2, #0]
    a2f2:	cbnz	r1, a302 <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a2f4:	ldr	r1, [pc, #100]	; (a35c <usb_serial_write+0x180>)
    a2f6:	ldr	r1, [r1, #0]
    a2f8:	subs	r1, r1, r3
    a2fa:	cmp	r1, #120	; 0x78
    a2fc:	bls.n	a30a <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    a2fe:	movs	r3, #1
    a300:	strb	r3, [r2, #0]
}
    a302:	mov	r0, r4
    a304:	add	sp, #12
    a306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a30a:	ldr	r1, [pc, #56]	; (a344 <usb_serial_write+0x168>)
    a30c:	ldrb	r1, [r1, #0]
    a30e:	cmp	r1, #0
    a310:	beq.n	a302 <usb_serial_write+0x126>
			tx_noautoflush = 1;
    a312:	mov.w	r8, #1
    a316:	str	r3, [sp, #0]
			yield();
    a318:	bl	be24 <yield>
			tx_noautoflush = 1;
    a31c:	ldr	r3, [sp, #0]
    a31e:	strb.w	r8, [fp]
    a322:	b.n	a218 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    a324:	mov	r2, r5
    a326:	mov	r1, r6
    a328:	bl	9c60 <memcpy>
			tx_available -= size;
    a32c:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a330:	ldr	r3, [pc, #36]	; (a358 <usb_serial_write+0x17c>)
    a332:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    a336:	add	r4, r5
			tx_available -= size;
    a338:	strh.w	r8, [r7]
			size = 0;
    a33c:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a33e:	str.w	r2, [r3, #132]	; 0x84
}
    a342:	b.n	a2d2 <usb_serial_write+0xf6>
    a344:	.word	0x200281ab
    a348:	.word	0x2002803a
    a34c:	.word	0x2000bcc0
    a350:	.word	0x200281a6
    a354:	.word	0x20201800
    a358:	.word	0x402e0000
    a35c:	.word	0x20027f40
    a360:	.word	0x200281a9
    a364:	.word	0x200281a7

0000a368 <usb_serial_putchar>:
{
    a368:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a36a:	movs	r1, #1
{
    a36c:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    a370:	add.w	r0, sp, #7
    a374:	bl	a1dc <usb_serial_write>
}
    a378:	add	sp, #12
    a37a:	ldr.w	pc, [sp], #4
	...

0000a380 <usb_serial_write_buffer_free>:
{
    a380:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a384:	movs	r4, #0
	tx_noautoflush = 1;
    a386:	ldr	r7, [pc, #56]	; (a3c0 <usb_serial_write_buffer_free+0x40>)
    a388:	movs	r3, #1
    a38a:	ldr	r6, [pc, #56]	; (a3c4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a38c:	mov	r5, r4
		if (i == tx_head) continue;
    a38e:	ldr.w	r8, [pc, #56]	; a3c8 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    a392:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    a394:	ldrb.w	r3, [r8]
    a398:	cmp	r3, r4
    a39a:	beq.n	a3aa <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a39c:	mov	r0, r6
    a39e:	bl	aea4 <usb_transfer_status>
    a3a2:	lsls	r3, r0, #24
    a3a4:	it	pl
    a3a6:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a3aa:	adds	r4, #1
    a3ac:	adds	r6, #32
    a3ae:	cmp	r4, #4
    a3b0:	bne.n	a394 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    a3b2:	dsb	sy
	tx_noautoflush = 0;
    a3b6:	movs	r3, #0
}
    a3b8:	mov	r0, r5
	tx_noautoflush = 0;
    a3ba:	strb	r3, [r7, #0]
}
    a3bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3c0:	.word	0x200281a9
    a3c4:	.word	0x2000bcc0
    a3c8:	.word	0x200281a7

0000a3cc <usb_serial_flush_output>:
{
    a3cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a3d0:	ldr	r3, [pc, #116]	; (a448 <usb_serial_flush_output+0x7c>)
    a3d2:	ldrb	r3, [r3, #0]
    a3d4:	cbz	r3, a444 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    a3d6:	ldr.w	r8, [pc, #132]	; a45c <usb_serial_flush_output+0x90>
    a3da:	ldrh.w	r5, [r8]
    a3de:	cbz	r5, a444 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    a3e0:	ldr	r7, [pc, #104]	; (a44c <usb_serial_flush_output+0x80>)
    a3e2:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a3e4:	ldr	r6, [pc, #104]	; (a450 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a3e6:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    a3ea:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    a3ec:	ldr	r2, [pc, #100]	; (a454 <usb_serial_flush_output+0x88>)
    a3ee:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3f0:	ldr	r4, [pc, #100]	; (a458 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a3f2:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3f6:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3f8:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3fc:	movs	r3, #0
    a3fe:	mov	r0, r9
    a400:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    a402:	add	r5, r4
    a404:	bl	ae38 <usb_prepare_transfer>
	asm("dsb");
    a408:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a40c:	mov.w	r3, #3758153728	; 0xe000e000
    a410:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a414:	adds	r4, #32
	} while (location < end_addr);
    a416:	cmp	r5, r4
    a418:	bhi.n	a410 <usb_serial_flush_output+0x44>
	asm("dsb");
    a41a:	dsb	sy
	asm("isb");
    a41e:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a422:	movs	r0, #3
    a424:	mov	r1, r9
    a426:	bl	ae64 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a42a:	ldrb	r3, [r6, #0]
    a42c:	movs	r2, #0
    a42e:	adds	r3, #1
	tx_available = 0;
    a430:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a434:	uxtb	r3, r3
    a436:	cmp	r3, #3
    a438:	ite	ls
    a43a:	strbls	r3, [r6, #0]
    a43c:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    a43e:	dsb	sy
	tx_noautoflush = 0;
    a442:	strb	r2, [r7, #0]
}
    a444:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a448:	.word	0x200281ab
    a44c:	.word	0x200281a9
    a450:	.word	0x200281a7
    a454:	.word	0x2000bcc0
    a458:	.word	0x20201800
    a45c:	.word	0x2002803a

0000a460 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a460:	ldr	r3, [pc, #512]	; (a664 <set_arm_clock+0x204>)
{
    a462:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a464:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a466:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a468:	sub.w	r3, r3, #507904	; 0x7c000
    a46c:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a46e:	ldr	r3, [pc, #504]	; (a668 <set_arm_clock+0x208>)
    a470:	cmp	r0, r3
    a472:	bls.w	a634 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a476:	ldr	r3, [pc, #500]	; (a66c <set_arm_clock+0x20c>)
    a478:	cmp	r0, r3
    a47a:	bls.w	a646 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a47e:	ldr	r2, [pc, #496]	; (a670 <set_arm_clock+0x210>)
    a480:	subs	r3, r0, r3
    a482:	udiv	r3, r3, r2
    a486:	movs	r2, #25
    a488:	muls	r3, r2
    a48a:	movw	r2, #1575	; 0x627
    a48e:	addw	r3, r3, #1250	; 0x4e2
    a492:	cmp	r3, r2
    a494:	it	cs
    a496:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a498:	ldr	r6, [pc, #456]	; (a664 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a49a:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a49e:	ldr.w	r2, [r6, #128]	; 0x80
    a4a2:	orr.w	r2, r2, #192	; 0xc0
    a4a6:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a4aa:	movs	r2, #25
    a4ac:	udiv	r2, r3, r2
    a4b0:	and.w	r3, r4, #31
    a4b4:	cmp	r3, r2
    a4b6:	bcs.n	a4c8 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a4b8:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a4bc:	ldr	r3, [pc, #436]	; (a674 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a4be:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    a4c0:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a4c2:	ldr	r6, [r3, #0]
    a4c4:	cmp	r6, #0
    a4c6:	bge.n	a4c2 <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a4c8:	ands.w	r3, r1, #33554432	; 0x2000000
    a4cc:	bne.n	a520 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a4ce:	ldr	r6, [pc, #424]	; (a678 <set_arm_clock+0x218>)
    a4d0:	ldr	r7, [pc, #424]	; (a67c <set_arm_clock+0x21c>)
    a4d2:	ldr	r6, [r6, #16]
    a4d4:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    a4d6:	cmp	r6, r7
    a4d8:	itee	eq
    a4da:	moveq	r6, #3
    a4dc:	movne	r6, #0
    a4de:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a4e0:	lsls	r7, r6, #27
    a4e2:	eor.w	r6, r1, r6, lsl #27
    a4e6:	tst.w	r6, #939524096	; 0x38000000
    a4ea:	beq.n	a4f6 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a4ec:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    a4f0:	ldr	r6, [pc, #368]	; (a664 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a4f2:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    a4f4:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a4f6:	lsls	r6, r3, #12
    a4f8:	eor.w	r3, r5, r3, lsl #12
    a4fc:	tst.w	r3, #12288	; 0x3000
    a500:	beq.n	a512 <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a502:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a506:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    a508:	ldr	r5, [pc, #344]	; (a664 <set_arm_clock+0x204>)
    a50a:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a50c:	ldr	r3, [r5, #72]	; 0x48
    a50e:	lsls	r6, r3, #28
    a510:	bmi.n	a50c <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a512:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a516:	ldr	r3, [pc, #332]	; (a664 <set_arm_clock+0x204>)
    a518:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a51a:	ldr	r5, [r3, #72]	; 0x48
    a51c:	lsls	r5, r5, #26
    a51e:	bmi.n	a51a <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a520:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a522:	ldr	r7, [pc, #348]	; (a680 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    a524:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    a526:	mul.w	r3, r6, r5
    a52a:	muls	r3, r0
    a52c:	cmp	r3, r7
    a52e:	bls.w	a64c <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a532:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    a536:	ldr	r0, [pc, #332]	; (a684 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a538:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    a53c:	cmp	r3, r0
    a53e:	ldr	r0, [pc, #328]	; (a688 <set_arm_clock+0x228>)
    a540:	bhi.w	a660 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a544:	udiv	r3, r3, r0
    a548:	cmp	r3, #54	; 0x36
    a54a:	it	cc
    a54c:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a54e:	ldr	r7, [pc, #296]	; (a678 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a550:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a552:	ldr.w	lr, [pc, #344]	; a6ac <set_arm_clock+0x24c>
    a556:	ldr.w	ip, [r7]
    a55a:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a55e:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    a562:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a566:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a56a:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    a56c:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a570:	beq.n	a586 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a572:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a576:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a57a:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a57e:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a580:	ldr	r3, [r7, #0]
    a582:	cmp	r3, #0
    a584:	bge.n	a580 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a586:	ldr	r3, [pc, #220]	; (a664 <set_arm_clock+0x204>)
    a588:	subs	r5, #1
    a58a:	ldr	r7, [r3, #16]
    a58c:	and.w	r7, r7, #7
    a590:	cmp	r7, r5
    a592:	beq.n	a59c <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a594:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a596:	ldr	r5, [r3, #72]	; 0x48
    a598:	lsls	r7, r5, #15
    a59a:	bmi.n	a596 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a59c:	subs	r3, r6, #1
    a59e:	lsls	r5, r3, #10
    a5a0:	eor.w	r3, r1, r3, lsl #10
    a5a4:	tst.w	r3, #7168	; 0x1c00
    a5a8:	beq.n	a5be <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a5aa:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a5ae:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a5b2:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    a5b4:	ldr	r3, [pc, #172]	; (a664 <set_arm_clock+0x204>)
    a5b6:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a5b8:	ldr	r5, [r3, #72]	; 0x48
    a5ba:	lsls	r5, r5, #30
    a5bc:	bmi.n	a5b8 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a5be:	ldr	r3, [pc, #204]	; (a68c <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    a5c0:	ldr	r5, [pc, #204]	; (a690 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a5c2:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    a5c4:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a5c6:	itet	ls
    a5c8:	ldrls	r5, [pc, #200]	; (a694 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    a5ca:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a5cc:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a5d0:	subs	r6, r3, #1
    a5d2:	lsls	r5, r6, #8
    a5d4:	eor.w	r6, r1, r6, lsl #8
    a5d8:	tst.w	r6, #768	; 0x300
    a5dc:	ldr	r6, [pc, #132]	; (a664 <set_arm_clock+0x204>)
    a5de:	beq.n	a5ec <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a5e0:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a5e4:	and.w	r5, r5, #768	; 0x300
    a5e8:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a5ea:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a5ec:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a5ee:	ldr	r5, [pc, #116]	; (a664 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a5f0:	bic.w	r1, r1, #33554432	; 0x2000000
    a5f4:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a5f6:	ldr	r1, [r5, #72]	; 0x48
    a5f8:	lsls	r1, r1, #26
    a5fa:	bmi.n	a5f6 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    a5fc:	ldr	r1, [pc, #152]	; (a698 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    a5fe:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    a602:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a604:	ldr	r1, [pc, #148]	; (a69c <set_arm_clock+0x23c>)
    a606:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a608:	mov.w	r3, #4294967295
    a60c:	ldr	r1, [pc, #144]	; (a6a0 <set_arm_clock+0x240>)
    a60e:	udiv	r1, r0, r1
    a612:	udiv	r3, r3, r1
    a616:	ldr	r1, [pc, #140]	; (a6a4 <set_arm_clock+0x244>)
    a618:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a61a:	and.w	r3, r4, #31
    a61e:	cmp	r2, r3
    a620:	bcs.n	a632 <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a622:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a626:	ldr	r3, [pc, #76]	; (a674 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a628:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    a62a:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a62c:	ldr	r2, [r3, #0]
    a62e:	cmp	r2, #0
    a630:	bge.n	a62c <set_arm_clock+0x1cc>
	}

	return frequency;
}
    a632:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    a634:	ldr	r6, [pc, #112]	; (a6a8 <set_arm_clock+0x248>)
    a636:	movw	r3, #1150	; 0x47e
    a63a:	movw	r2, #950	; 0x3b6
    a63e:	cmp	r0, r6
    a640:	it	ls
    a642:	movls	r3, r2
    a644:	b.n	a498 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    a646:	movw	r3, #1250	; 0x4e2
    a64a:	b.n	a498 <set_arm_clock+0x38>
		if (div_arm < 8) {
    a64c:	cmp	r5, #8
    a64e:	beq.n	a654 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    a650:	adds	r5, #1
    a652:	b.n	a526 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    a654:	cmp	r6, #4
    a656:	bhi.w	a532 <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    a65a:	adds	r6, #1
				div_arm = 1;
    a65c:	movs	r5, #1
    a65e:	b.n	a526 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    a660:	movs	r3, #108	; 0x6c
    a662:	b.n	a54e <set_arm_clock+0xee>
    a664:	.word	0x400fc000
    a668:	.word	0x1f78a400
    a66c:	.word	0x23c34600
    a670:	.word	0x01ab3f00
    a674:	.word	0x40080000
    a678:	.word	0x400d8000
    a67c:	.word	0x80003040
    a680:	.word	0x269fb1ff
    a684:	.word	0x4df67eff
    a688:	.word	0x00b71b00
    a68c:	.word	0x08f0d17f
    a690:	.word	0x2cb4177f
    a694:	.word	0x08f0d180
    a698:	.word	0x200089a0
    a69c:	.word	0x2000899c
    a6a0:	.word	0x000f4240
    a6a4:	.word	0x200278ac
    a6a8:	.word	0x016e3600
    a6ac:	.word	0x8001307f

0000a6b0 <endpoint0_receive>:
{
    a6b0:	push	{r4, r5, lr}
    a6b2:	ldr	r4, [pc, #136]	; (a73c <endpoint0_receive+0x8c>)
	if (len > 0) {
    a6b4:	cbz	r1, a6f8 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a6b6:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a6b8:	ldr	r3, [pc, #132]	; (a740 <endpoint0_receive+0x90>)
    a6ba:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a6bc:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a6c0:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a6c2:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a6c4:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a6c6:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a6ca:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a6cc:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a6ce:	add.w	r1, r0, #8192	; 0x2000
    a6d2:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a6d4:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a6d8:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a6dc:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a6de:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    a6e0:	movs	r3, #0
    a6e2:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    a6e4:	ldr	r3, [pc, #92]	; (a744 <endpoint0_receive+0x94>)
    a6e6:	ldr.w	r1, [r3, #432]	; 0x1b0
    a6ea:	orrs	r1, r5
    a6ec:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a6f0:	ldr.w	r1, [r3, #432]	; 0x1b0
    a6f4:	cmp	r1, #0
    a6f6:	bne.n	a6f0 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    a6f8:	ldr	r3, [pc, #76]	; (a748 <endpoint0_receive+0x98>)
    a6fa:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a6fc:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a6fe:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    a702:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a704:	movw	r1, #32896	; 0x8080
    a708:	it	eq
    a70a:	moveq	r1, #128	; 0x80
    a70c:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    a70e:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    a710:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    a714:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a716:	mov.w	r1, #65537	; 0x10001
    a71a:	ldr	r3, [pc, #40]	; (a744 <endpoint0_receive+0x94>)
    a71c:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a720:	ldr.w	r1, [r3, #432]	; 0x1b0
    a724:	orr.w	r1, r1, #65536	; 0x10000
    a728:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a72c:	ldr	r1, [pc, #28]	; (a74c <endpoint0_receive+0x9c>)
    a72e:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    a730:	ldr.w	r2, [r3, #432]	; 0x1b0
    a734:	cmp	r2, #0
    a736:	bne.n	a730 <endpoint0_receive+0x80>
}
    a738:	pop	{r4, r5, pc}
    a73a:	nop
    a73c:	.word	0x20000000
    a740:	.word	0x200096e0
    a744:	.word	0x402e0000
    a748:	.word	0x200096c0
    a74c:	.word	0x20027768

0000a750 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a750:	ldr	r3, [r0, #56]	; 0x38
{
    a752:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    a754:	cbz	r3, a75e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a756:	ldr	r3, [r2, #4]
    a758:	orr.w	r3, r3, #32768	; 0x8000
    a75c:	str	r3, [r2, #4]
	}
	__disable_irq();
    a75e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a760:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a762:	ldr	r3, [pc, #96]	; (a7c4 <schedule_transfer+0x74>)
    a764:	cbz	r4, a7b0 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    a766:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a768:	ldr.w	r4, [r3, #432]	; 0x1b0
    a76c:	tst	r4, r1
    a76e:	bne.n	a7aa <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a770:	ldr	r6, [pc, #84]	; (a7c8 <schedule_transfer+0x78>)
    a772:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a774:	ldr.w	r4, [r3, #320]	; 0x140
    a778:	orr.w	r4, r4, #16384	; 0x4000
    a77c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a780:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a784:	ldr.w	r5, [r3, #320]	; 0x140
    a788:	lsls	r5, r5, #17
    a78a:	bmi.n	a796 <schedule_transfer+0x46>
    a78c:	ldr	r5, [r6, #4]
    a78e:	subs	r5, r5, r7
    a790:	cmp.w	r5, #2400	; 0x960
    a794:	bcc.n	a774 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a796:	ands	r4, r1
    a798:	bne.n	a7aa <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    a79a:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    a79e:	ldr	r4, [pc, #36]	; (a7c4 <schedule_transfer+0x74>)
    a7a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    a7a4:	orrs	r3, r1
    a7a6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a7aa:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a7ac:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a7ae:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    a7b0:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    a7b4:	ldr.w	r4, [r3, #432]	; 0x1b0
    a7b8:	orrs	r1, r4
    a7ba:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a7be:	str	r2, [r0, #48]	; 0x30
    a7c0:	b.n	a7aa <schedule_transfer+0x5a>
    a7c2:	nop
    a7c4:	.word	0x402e0000
    a7c8:	.word	0xe0001000

0000a7cc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a7cc:	push	{r4, r5, r6, lr}
    a7ce:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a7d0:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    a7d2:	cbz	r0, a7e4 <run_callbacks+0x18>
    a7d4:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    a7d6:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    a7d8:	ldr	r3, [r2, #4]
    a7da:	ands.w	r3, r3, #128	; 0x80
    a7de:	beq.n	a7e6 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    a7e0:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a7e2:	cbnz	r5, a7f4 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    a7e4:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    a7e6:	ldr	r2, [r2, #0]
		count++;
    a7e8:	adds	r5, #1
		if ((uint32_t)t == 1) {
    a7ea:	cmp	r2, #1
    a7ec:	bne.n	a7d8 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    a7ee:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    a7f2:	b.n	a7e2 <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    a7f4:	ldr	r6, [r0, #0]
		count--;
    a7f6:	subs	r5, #1
		ep->callback_function(first);
    a7f8:	ldr	r3, [r4, #56]	; 0x38
    a7fa:	blx	r3
		first = next;
    a7fc:	mov	r0, r6
    a7fe:	b.n	a7e2 <run_callbacks+0x16>

0000a800 <usb_endpoint_config>:
{
    a800:	push	{r4, r5, r6, lr}
    a802:	mov	r4, r0
    a804:	mov	r6, r1
    a806:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    a808:	movs	r1, #0
    a80a:	movs	r2, #60	; 0x3c
    a80c:	adds	r0, #4
    a80e:	bl	9c1c <memset>
	qh->next = 1; // Terminate bit = 1
    a812:	movs	r3, #1
	qh->config = config;
    a814:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    a816:	str	r3, [r4, #8]
	qh->callback_function = callback;
    a818:	str	r5, [r4, #56]	; 0x38
}
    a81a:	pop	{r4, r5, r6, pc}

0000a81c <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    a81c:	ldr	r2, [pc, #124]	; (a89c <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a81e:	push	{r4, lr}
	if (len > 0) {
    a820:	cbz	r1, a866 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a822:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a824:	ldr	r3, [pc, #120]	; (a8a0 <endpoint0_transmit.constprop.0+0x84>)
    a826:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a828:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a82c:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a82e:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a830:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a832:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a836:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a838:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a83a:	add.w	r1, r0, #8192	; 0x2000
    a83e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a840:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a844:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a848:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a84a:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    a84c:	movs	r3, #0
    a84e:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    a850:	ldr	r3, [pc, #80]	; (a8a4 <endpoint0_transmit.constprop.0+0x88>)
    a852:	ldr.w	r1, [r3, #432]	; 0x1b0
    a856:	orr.w	r1, r1, #65536	; 0x10000
    a85a:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a85e:	ldr.w	r1, [r3, #432]	; 0x1b0
    a862:	cmp	r1, #0
    a864:	bne.n	a85e <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    a866:	ldr	r3, [pc, #64]	; (a8a8 <endpoint0_transmit.constprop.0+0x8c>)
    a868:	movs	r1, #1
    a86a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a86c:	movs	r1, #128	; 0x80
    a86e:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    a870:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    a872:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    a876:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a878:	mov.w	r2, #65537	; 0x10001
    a87c:	ldr	r3, [pc, #36]	; (a8a4 <endpoint0_transmit.constprop.0+0x88>)
    a87e:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a882:	ldr.w	r2, [r3, #432]	; 0x1b0
    a886:	orr.w	r2, r2, #1
    a88a:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a88e:	ldr	r2, [pc, #28]	; (a8ac <endpoint0_transmit.constprop.0+0x90>)
    a890:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a892:	ldr.w	r2, [r3, #432]	; 0x1b0
    a896:	cmp	r2, #0
    a898:	bne.n	a892 <endpoint0_transmit.constprop.0+0x76>
}
    a89a:	pop	{r4, pc}
    a89c:	.word	0x20000000
    a8a0:	.word	0x200096e0
    a8a4:	.word	0x402e0000
    a8a8:	.word	0x200096c0
    a8ac:	.word	0x20027768

0000a8b0 <usb_start_sof_interrupts>:
	__disable_irq();
    a8b0:	cpsid	i
	sof_usage |= (1 << interface);
    a8b2:	ldr	r2, [pc, #40]	; (a8dc <usb_start_sof_interrupts+0x2c>)
    a8b4:	movs	r3, #1
    a8b6:	lsl.w	r0, r3, r0
    a8ba:	ldrb	r3, [r2, #0]
    a8bc:	orrs	r0, r3
    a8be:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    a8c0:	ldr	r2, [pc, #28]	; (a8e0 <usb_start_sof_interrupts+0x30>)
    a8c2:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    a8c6:	lsls	r1, r3, #24
    a8c8:	bmi.n	a8d6 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a8ca:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a8cc:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a8ce:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a8d2:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    a8d6:	cpsie	i
}
    a8d8:	bx	lr
    a8da:	nop
    a8dc:	.word	0x200281a5
    a8e0:	.word	0x402e0000

0000a8e4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    a8e4:	movs	r3, #1
    a8e6:	ldr	r2, [pc, #32]	; (a908 <usb_stop_sof_interrupts+0x24>)
    a8e8:	lsl.w	r0, r3, r0
    a8ec:	ldrb	r3, [r2, #0]
    a8ee:	bic.w	r0, r3, r0
    a8f2:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    a8f4:	cbnz	r0, a904 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    a8f6:	ldr	r2, [pc, #20]	; (a90c <usb_stop_sof_interrupts+0x28>)
    a8f8:	ldr.w	r3, [r2, #328]	; 0x148
    a8fc:	bic.w	r3, r3, #128	; 0x80
    a900:	str.w	r3, [r2, #328]	; 0x148
}
    a904:	bx	lr
    a906:	nop
    a908:	.word	0x200281a5
    a90c:	.word	0x402e0000

0000a910 <usb_isr>:
{
    a910:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    a914:	ldr	r4, [pc, #676]	; (abbc <usb_isr+0x2ac>)
    a916:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a91a:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    a91c:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a920:	bmi.n	a988 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    a922:	lsls	r1, r6, #25
    a924:	bmi.w	ad4e <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    a928:	lsls	r4, r6, #7
    a92a:	bpl.n	a934 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a92c:	ldr	r3, [pc, #656]	; (abc0 <usb_isr+0x2b0>)
    a92e:	ldr	r3, [r3, #0]
    a930:	cbz	r3, a934 <usb_isr+0x24>
    a932:	blx	r3
	if (status & USB_USBSTS_TI1) {
    a934:	lsls	r0, r6, #6
    a936:	bpl.n	a940 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a938:	ldr	r3, [pc, #648]	; (abc4 <usb_isr+0x2b4>)
    a93a:	ldr	r3, [r3, #0]
    a93c:	cbz	r3, a940 <usb_isr+0x30>
    a93e:	blx	r3
	if (status & USB_USBSTS_PCI) {
    a940:	lsls	r1, r6, #29
    a942:	bpl.n	a956 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a944:	ldr	r3, [pc, #628]	; (abbc <usb_isr+0x2ac>)
    a946:	ldr	r2, [pc, #640]	; (abc8 <usb_isr+0x2b8>)
    a948:	ldr.w	r3, [r3, #388]	; 0x184
    a94c:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    a950:	it	ne
    a952:	movne	r3, #1
			usb_high_speed = 0;
    a954:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a956:	ldr	r3, [pc, #612]	; (abbc <usb_isr+0x2ac>)
    a958:	ldr.w	r3, [r3, #328]	; 0x148
    a95c:	lsls	r2, r3, #24
    a95e:	bpl.w	ad7e <usb_isr+0x46e>
    a962:	lsls	r3, r6, #24
    a964:	bpl.w	ad7e <usb_isr+0x46e>
		if (usb_reboot_timer) {
    a968:	ldr	r2, [pc, #608]	; (abcc <usb_isr+0x2bc>)
    a96a:	ldrb	r3, [r2, #0]
    a96c:	cmp	r3, #0
    a96e:	beq.w	ad7e <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    a972:	subs	r3, #1
    a974:	uxtb	r3, r3
    a976:	strb	r3, [r2, #0]
    a978:	cmp	r3, #0
    a97a:	bne.w	ad7e <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    a97e:	movs	r0, #3
    a980:	bl	a8e4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    a984:	bl	170e0 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a988:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a98c:	ldr	r7, [pc, #576]	; (abd0 <usb_isr+0x2c0>)
		while (setupstatus) {
    a98e:	cmp	r3, #0
    a990:	bne.n	aa1a <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a992:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    a996:	cmp	r5, #0
    a998:	beq.n	a922 <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    a99a:	ldr	r2, [pc, #568]	; (abd4 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    a99c:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    a9a0:	ldr	r1, [r2, #0]
    a9a2:	tst	r5, r1
    a9a4:	beq.n	a9dc <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    a9a6:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a9a8:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    a9ac:	ldr	r2, [pc, #552]	; (abd8 <usb_isr+0x2c8>)
    a9ae:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a9b0:	ldrh	r2, [r2, #0]
    a9b2:	cmp	r2, r1
    a9b4:	bne.w	ad10 <usb_isr+0x400>
    a9b8:	uxth	r3, r3
    a9ba:	cbnz	r3, a9dc <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a9bc:	ldr	r2, [pc, #540]	; (abdc <usb_isr+0x2cc>)
    a9be:	ldr	r3, [pc, #544]	; (abe0 <usb_isr+0x2d0>)
    a9c0:	ldr	r0, [r2, #0]
    a9c2:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    a9c4:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a9c6:	ldrb	r2, [r2, #6]
    a9c8:	str	r0, [r3, #0]
    a9ca:	strh	r1, [r3, #4]
    a9cc:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    a9ce:	bne.n	a9dc <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    a9d0:	movs	r0, #3
    a9d2:	bl	a8b0 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    a9d6:	ldr	r3, [pc, #500]	; (abcc <usb_isr+0x2bc>)
    a9d8:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    a9da:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    a9dc:	ldr	r3, [pc, #516]	; (abe4 <usb_isr+0x2d4>)
    a9de:	ldr	r3, [r3, #0]
			if (completestatus) {
    a9e0:	ands	r5, r3
    a9e2:	beq.n	a922 <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    a9e4:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a9e6:	ldr.w	r8, [pc, #512]	; abe8 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    a9ea:	mov.w	r9, #1
				while (tx) {
    a9ee:	cmp	r4, #0
    a9f0:	bne.w	ad32 <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    a9f4:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a9f6:	ldr	r7, [pc, #496]	; (abe8 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    a9f8:	mov.w	r8, #1
				while(rx) {
    a9fc:	cmp	r5, #0
    a9fe:	beq.n	a922 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    aa00:	rbit	r4, r5
    aa04:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    aa08:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    aa0c:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    aa10:	bl	a7cc <run_callbacks>
					rx &= ~(1<<p);
    aa14:	bic.w	r5, r5, r4
    aa18:	b.n	a9fc <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    aa1a:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    aa1e:	ldr	r3, [pc, #456]	; (abe8 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    aa20:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    aa24:	ldr.w	r2, [r4, #320]	; 0x140
    aa28:	orr.w	r2, r2, #8192	; 0x2000
    aa2c:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    aa30:	ldr.w	r2, [r4, #320]	; 0x140
    aa34:	lsls	r2, r2, #18
    aa36:	bpl.n	aa24 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aa38:	ldr.w	r2, [r4, #320]	; 0x140
    aa3c:	bic.w	r2, r2, #8192	; 0x2000
    aa40:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aa44:	mov.w	r2, #65537	; 0x10001
    aa48:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    aa4c:	ldr.w	r2, [r4, #436]	; 0x1b4
    aa50:	ands.w	r8, r2, #65537	; 0x10001
    aa54:	bne.n	aa4c <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    aa56:	uxth	r1, r5
    aa58:	ldr	r2, [pc, #376]	; (abd4 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    aa5a:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    aa5e:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    aa62:	beq.w	ab9e <usb_isr+0x28e>
    aa66:	bhi.n	aafe <usb_isr+0x1ee>
    aa68:	movw	r2, #770	; 0x302
    aa6c:	cmp	r1, r2
    aa6e:	beq.w	ac42 <usb_isr+0x332>
    aa72:	bhi.n	aa92 <usb_isr+0x182>
    aa74:	cmp	r1, #130	; 0x82
    aa76:	beq.w	ac0c <usb_isr+0x2fc>
    aa7a:	cmp.w	r1, #258	; 0x102
    aa7e:	beq.w	ac68 <usb_isr+0x358>
    aa82:	cmp	r1, #128	; 0x80
    aa84:	beq.w	abae <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    aa88:	mov.w	r3, #65537	; 0x10001
    aa8c:	str.w	r3, [r4, #448]	; 0x1c0
    aa90:	b.n	ab98 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    aa92:	cmp.w	r1, #1280	; 0x500
    aa96:	beq.n	ab82 <usb_isr+0x272>
    aa98:	sub.w	r1, r1, #1664	; 0x680
    aa9c:	cmp	r1, #1
    aa9e:	bhi.n	aa88 <usb_isr+0x178>
    aaa0:	ldr	r2, [pc, #328]	; (abec <usb_isr+0x2dc>)
    aaa2:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aaa6:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    aaaa:	ldr	r1, [r2, #4]
    aaac:	cmp	r1, #0
    aaae:	beq.n	aa88 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aab0:	ldrh.w	lr, [r2]
    aab4:	mov	r0, r5
    aab6:	cmp	lr, r5
    aab8:	bne.w	acd8 <usb_isr+0x3c8>
    aabc:	ldrh.w	lr, [r2, #2]
    aac0:	cmp	lr, ip
    aac2:	bne.w	acd8 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    aac6:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    aac8:	mov.w	r8, r3, lsr #16
    aacc:	ldr	r3, [pc, #288]	; (abf0 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    aace:	cmp	r5, #3
					datalen = *(list->addr);
    aad0:	ite	eq
    aad2:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    aad4:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    aad6:	cmp	r8, r2
    aad8:	it	cs
    aada:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    aadc:	cmp.w	r0, #512	; 0x200
    aae0:	bne.w	ac8a <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    aae4:	ldr	r2, [pc, #224]	; (abc8 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    aae6:	ldr	r1, [pc, #268]	; (abf4 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    aae8:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    aaea:	mov	r2, r8
    aaec:	ldr	r0, [pc, #264]	; (abf8 <usb_isr+0x2e8>)
    aaee:	cmp	r5, #0
    aaf0:	it	ne
    aaf2:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    aaf4:	mov	r0, r3
    aaf6:	bl	9c60 <memcpy>
    aafa:	mov	r3, r0
    aafc:	b.n	acac <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    aafe:	movw	r2, #8993	; 0x2321
    ab02:	cmp	r1, r2
    ab04:	beq.n	ab48 <usb_isr+0x238>
    ab06:	bhi.n	ab54 <usb_isr+0x244>
    ab08:	movw	r2, #8225	; 0x2021
    ab0c:	cmp	r1, r2
    ab0e:	beq.w	acf6 <usb_isr+0x3e6>
    ab12:	movw	r2, #8737	; 0x2221
    ab16:	cmp	r1, r2
    ab18:	beq.w	acdc <usb_isr+0x3cc>
    ab1c:	cmp.w	r1, #2304	; 0x900
    ab20:	bne.n	aa88 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    ab22:	ldr	r3, [pc, #216]	; (abfc <usb_isr+0x2ec>)
    ab24:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ab28:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    ab2c:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ab2e:	ldr	r3, [pc, #208]	; (ac00 <usb_isr+0x2f0>)
    ab30:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ab34:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ab38:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    ab3c:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    ab40:	bl	9f30 <usb_serial_configure>
		usb_mtp_configure();
    ab44:	bl	bb50 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    ab48:	movs	r2, #0
    ab4a:	mov	r1, r2
    ab4c:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ab4e:	bl	a6b0 <endpoint0_receive>
			return;
    ab52:	b.n	ab98 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    ab54:	movw	r2, #25633	; 0x6421
    ab58:	cmp	r1, r2
    ab5a:	beq.w	ad0a <usb_isr+0x3fa>
    ab5e:	movw	r2, #26529	; 0x67a1
    ab62:	cmp	r1, r2
    ab64:	bne.n	aa88 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    ab66:	cmp.w	r3, #262144	; 0x40000
    ab6a:	bcc.n	aa88 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    ab6c:	ldr	r3, [pc, #148]	; (ac04 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    ab6e:	movs	r1, #4
    ab70:	ldr	r0, [pc, #104]	; (abdc <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    ab72:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    ab74:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    ab76:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    ab78:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    ab7a:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    ab7e:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    ab80:	b.n	aba8 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    ab82:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    ab84:	mov	r2, r8
    ab86:	mov	r1, r8
    ab88:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    ab8a:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    ab8c:	bl	a6b0 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    ab90:	orr.w	r5, r5, #16777216	; 0x1000000
    ab94:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ab98:	ldr.w	r3, [r4, #428]	; 0x1ac
    ab9c:	b.n	a98e <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    ab9e:	ldr	r3, [pc, #92]	; (abfc <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    aba0:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    aba2:	ldr	r0, [pc, #100]	; (ac08 <usb_isr+0x2f8>)
    aba4:	ldrb	r3, [r3, #0]
    aba6:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    aba8:	bl	a81c <endpoint0_transmit.constprop.0>
				return;
    abac:	b.n	ab98 <usb_isr+0x288>
		reply_buffer[0] = 0;
    abae:	ldr	r0, [pc, #88]	; (ac08 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    abb0:	movs	r1, #2
		reply_buffer[0] = 0;
    abb2:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    abb6:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    abba:	b.n	aba8 <usb_isr+0x298>
    abbc:	.word	0x402e0000
    abc0:	.word	0x20027f64
    abc4:	.word	0x20027f68
    abc8:	.word	0x200281ac
    abcc:	.word	0x200281ad
    abd0:	.word	0x402e01c0
    abd4:	.word	0x20027768
    abd8:	.word	0x2000bdc0
    abdc:	.word	0x20028181
    abe0:	.word	0x20027f58
    abe4:	.word	0x2002776c
    abe8:	.word	0x20000000
    abec:	.word	0x20007824
    abf0:	.word	0x20204800
    abf4:	.word	0x6000264c
    abf8:	.word	0x600026b5
    abfc:	.word	0x200281ab
    ac00:	.word	0x00cc0002
    ac04:	.word	0x2000936d
    ac08:	.word	0x2002818b
		endpoint = setup.wIndex & 0x7F;
    ac0c:	uxth	r0, r3
		if (endpoint > 7) break;
    ac0e:	ands.w	r3, r3, #120	; 0x78
    ac12:	bne.w	aa88 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    ac16:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ac1a:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    ac1c:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    ac20:	ldr	r2, [pc, #352]	; (ad84 <usb_isr+0x474>)
    ac22:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    ac24:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ac26:	bpl.n	ac3c <usb_isr+0x32c>
    ac28:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    ac2c:	it	ne
    ac2e:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    ac30:	mov.w	r1, #2
    ac34:	ldr	r0, [pc, #332]	; (ad84 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    ac36:	it	ne
    ac38:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    ac3a:	b.n	aba8 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ac3c:	tst.w	r1, #1
    ac40:	b.n	ac2c <usb_isr+0x31c>
		if (endpoint > 7) break;
    ac42:	tst.w	r3, #120	; 0x78
    ac46:	uxth	r2, r3
    ac48:	bne.w	aa88 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    ac4c:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    ac50:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    ac54:	ldr.w	r2, [r7, r3, lsl #2]
    ac58:	ite	ne
    ac5a:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ac5e:	orreq.w	r2, r2, #1
    ac62:	str.w	r2, [r7, r3, lsl #2]
    ac66:	b.n	ab48 <usb_isr+0x238>
		if (endpoint > 7) break;
    ac68:	tst.w	r3, #120	; 0x78
    ac6c:	uxth	r2, r3
    ac6e:	bne.w	aa88 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    ac72:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    ac76:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    ac7a:	ldr.w	r2, [r7, r3, lsl #2]
    ac7e:	ite	ne
    ac80:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    ac84:	biceq.w	r2, r2, #1
    ac88:	b.n	ac62 <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    ac8a:	cmp.w	r0, #1792	; 0x700
    ac8e:	bne.n	acd4 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    ac90:	ldr	r2, [pc, #244]	; (ad88 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ac92:	ldr	r0, [pc, #248]	; (ad8c <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    ac94:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    ac96:	mov	r2, r8
    ac98:	ldr	r1, [pc, #244]	; (ad90 <usb_isr+0x480>)
    ac9a:	cmp	r5, #0
    ac9c:	it	ne
    ac9e:	movne	r1, r0
    aca0:	mov	r0, r3
    aca2:	bl	9c60 <memcpy>
					usb_descriptor_buffer[1] = 7;
    aca6:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    aca8:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    acaa:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    acac:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    acb0:	add.w	r0, r3, r8
	asm("dsb");
    acb4:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    acb8:	mov.w	r3, #3758153728	; 0xe000e000
    acbc:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    acc0:	adds	r5, #32
	} while (location < end_addr);
    acc2:	cmp	r0, r5
    acc4:	bhi.n	acbc <usb_isr+0x3ac>
	asm("dsb");
    acc6:	dsb	sy
	asm("isb");
    acca:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    acce:	ldr	r0, [pc, #196]	; (ad94 <usb_isr+0x484>)
    acd0:	mov	r1, r8
    acd2:	b.n	aba8 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    acd4:	mov	r2, r8
    acd6:	b.n	aaf4 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    acd8:	adds	r2, #12
    acda:	b.n	aaaa <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    acdc:	uxth	r3, r3
    acde:	cmp	r3, #0
    ace0:	bne.w	ab48 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ace4:	ldr	r3, [pc, #176]	; (ad98 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    ace6:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    acea:	ldr	r2, [r3, #0]
    acec:	ldr	r3, [pc, #172]	; (ad9c <usb_isr+0x48c>)
    acee:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    acf0:	ldr	r3, [pc, #172]	; (ada0 <usb_isr+0x490>)
    acf2:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    acf4:	b.n	ab48 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    acf6:	lsrs	r1, r3, #16
    acf8:	cmp	r1, #7
		if (setup.wLength == 6) {
    acfa:	bne.w	aa88 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    acfe:	ldr	r2, [pc, #164]	; (ada4 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ad00:	ldr	r0, [pc, #164]	; (ada8 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    ad02:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ad06:	movs	r2, #1
    ad08:	b.n	ab4e <usb_isr+0x23e>
		if (setup.wLength == 6) {
    ad0a:	lsrs	r1, r3, #16
    ad0c:	cmp	r1, #6
    ad0e:	b.n	acfa <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    ad10:	movw	r3, #25633	; 0x6421
    ad14:	cmp	r2, r3
    ad16:	bne.w	a9dc <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    ad1a:	ldr	r3, [pc, #140]	; (ada8 <usb_isr+0x498>)
    ad1c:	ldrb	r2, [r3, #0]
    ad1e:	cmp	r2, #1
    ad20:	bne.w	a9dc <usb_isr+0xcc>
    ad24:	ldrb	r3, [r3, #1]
    ad26:	cmp	r3, #64	; 0x40
    ad28:	bne.w	a9dc <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    ad2c:	ldr	r3, [pc, #124]	; (adac <usb_isr+0x49c>)
    ad2e:	movs	r2, #25
    ad30:	b.n	a9da <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    ad32:	rbit	r7, r4
    ad36:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ad3a:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    ad3e:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ad42:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    ad44:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ad48:	bl	a7cc <run_callbacks>
					tx &= ~(1<<p);
    ad4c:	b.n	a9ee <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ad4e:	ldr	r3, [pc, #96]	; (adb0 <usb_isr+0x4a0>)
    ad50:	ldr.w	r2, [r3, #428]	; 0x1ac
    ad54:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    ad58:	ldr.w	r2, [r3, #444]	; 0x1bc
    ad5c:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ad60:	ldr.w	r4, [r3, #432]	; 0x1b0
    ad64:	cmp	r4, #0
    ad66:	bne.n	ad60 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    ad68:	mov.w	r2, #4294967295
    ad6c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    ad70:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    ad74:	bl	9f2c <usb_serial_reset>
		endpointN_notify_mask = 0;
    ad78:	ldr	r3, [pc, #56]	; (adb4 <usb_isr+0x4a4>)
    ad7a:	str	r4, [r3, #0]
    ad7c:	b.n	a928 <usb_isr+0x18>
}
    ad7e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad82:	nop
    ad84:	.word	0x2002818b
    ad88:	.word	0x200281ac
    ad8c:	.word	0x6000264c
    ad90:	.word	0x600026b5
    ad94:	.word	0x20204800
    ad98:	.word	0x20027f40
    ad9c:	.word	0x20027f60
    ada0:	.word	0x200281aa
    ada4:	.word	0x2000bdc0
    ada8:	.word	0x20028181
    adac:	.word	0x2000936d
    adb0:	.word	0x402e0000
    adb4:	.word	0x2002776c

0000adb8 <usb_config_rx>:
{
    adb8:	push	{r4, r5, r6, lr}
    adba:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    adbc:	subs	r3, r0, #2
{
    adbe:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    adc0:	cmp	r3, #3
    adc2:	bhi.n	adec <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    adc4:	clz	r4, r2
    adc8:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    adca:	ldr	r0, [pc, #36]	; (adf0 <usb_config_rx+0x38>)
    adcc:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    adce:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    add0:	add.w	r0, r0, r5, lsl #7
    add4:	orr.w	r1, r1, r4, lsl #29
    add8:	bl	a800 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    addc:	cbz	r6, adec <usb_config_rx+0x34>
    adde:	ldr	r2, [pc, #20]	; (adf4 <usb_config_rx+0x3c>)
    ade0:	movs	r3, #1
    ade2:	lsl.w	r0, r3, r5
    ade6:	ldr	r3, [r2, #0]
    ade8:	orrs	r0, r3
    adea:	str	r0, [r2, #0]
}
    adec:	pop	{r4, r5, r6, pc}
    adee:	nop
    adf0:	.word	0x20000000
    adf4:	.word	0x2002776c

0000adf8 <usb_config_tx>:
{
    adf8:	push	{r4, r5, r6, lr}
    adfa:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    adfc:	subs	r3, r0, #2
{
    adfe:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ae00:	cmp	r3, #3
    ae02:	bhi.n	ae2e <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ae04:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ae08:	ldr	r0, [pc, #36]	; (ae30 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ae0a:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ae0c:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ae0e:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ae10:	add.w	r0, r0, r4, lsl #7
    ae14:	orr.w	r1, r1, r5, lsl #29
    ae18:	adds	r0, #64	; 0x40
    ae1a:	bl	a800 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ae1e:	cbz	r6, ae2e <usb_config_tx+0x36>
    ae20:	ldr	r2, [pc, #16]	; (ae34 <usb_config_tx+0x3c>)
    ae22:	adds	r4, #16
    ae24:	movs	r3, #1
    ae26:	ldr	r1, [r2, #0]
    ae28:	lsls	r3, r4
    ae2a:	orrs	r3, r1
    ae2c:	str	r3, [r2, #0]
}
    ae2e:	pop	{r4, r5, r6, pc}
    ae30:	.word	0x20000000
    ae34:	.word	0x2002776c

0000ae38 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    ae38:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    ae3a:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    ae3c:	orr.w	r2, r2, #128	; 0x80
    ae40:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    ae42:	add.w	r2, r1, #4096	; 0x1000
    ae46:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ae48:	add.w	r2, r1, #8192	; 0x2000
{
    ae4c:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    ae4e:	str	r2, [r0, #16]
	transfer->next = 1;
    ae50:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    ae52:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ae56:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    ae5a:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    ae5c:	str	r2, [r0, #20]
	transfer->callback_param = param;
    ae5e:	strd	r1, r3, [r0, #24]
}
    ae62:	pop	{r4, pc}

0000ae64 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ae64:	subs	r3, r0, #2
{
    ae66:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ae68:	cmp	r3, #3
    ae6a:	bhi.n	ae82 <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ae6c:	ldr	r3, [pc, #20]	; (ae84 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    ae6e:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ae72:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    ae76:	movs	r3, #1
    ae78:	adds	r0, #64	; 0x40
    ae7a:	lsl.w	r1, r3, r1
    ae7e:	b.w	a750 <schedule_transfer>
}
    ae82:	bx	lr
    ae84:	.word	0x20000000

0000ae88 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ae88:	subs	r3, r0, #2
{
    ae8a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ae8c:	cmp	r3, #3
    ae8e:	bhi.n	ae9e <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ae90:	movs	r1, #1
    ae92:	ldr	r3, [pc, #12]	; (aea0 <usb_receive+0x18>)
    ae94:	lsls	r1, r0
    ae96:	add.w	r0, r3, r0, lsl #7
    ae9a:	b.w	a750 <schedule_transfer>
}
    ae9e:	bx	lr
    aea0:	.word	0x20000000

0000aea4 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    aea4:	ldr	r2, [pc, #32]	; (aec8 <usb_transfer_status+0x24>)
{
    aea6:	mov	r1, r0
	cmd = USB1_USBCMD;
    aea8:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    aeac:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    aeae:	orr.w	r3, r3, #16384	; 0x4000
    aeb2:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    aeb6:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    aeb8:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    aebc:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    aebe:	tst.w	r3, #16384	; 0x4000
    aec2:	beq.n	aeac <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    aec4:	bx	lr
    aec6:	nop
    aec8:	.word	0x402e0000

0000aecc <ultoa>:
{
    aecc:	push	{r4, r5, r6, lr}
	int i=0, j;
    aece:	movs	r4, #0
		digit = val % radix;
    aed0:	udiv	r5, r0, r2
    aed4:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aed8:	uxtb	r3, r6
    aeda:	cmp	r6, #9
    aedc:	ite	ls
    aede:	addls	r3, #48	; 0x30
    aee0:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    aee2:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aee4:	uxtb	r3, r3
    aee6:	strb	r3, [r1, r4]
		if (val == 0) break;
    aee8:	bhi.n	aef0 <ultoa+0x24>
		i++;
    aeea:	adds	r4, #1
		val /= radix;
    aeec:	mov	r0, r5
		digit = val % radix;
    aeee:	b.n	aed0 <ultoa+0x4>
	buf[i + 1] = 0;
    aef0:	adds	r3, r1, r4
    aef2:	movs	r2, #0
    aef4:	subs	r0, r1, #1
    aef6:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    aef8:	subs	r5, r4, r2
    aefa:	cmp	r2, r5
    aefc:	blt.n	af02 <ultoa+0x36>
}
    aefe:	mov	r0, r1
    af00:	pop	{r4, r5, r6, pc}
		t = buf[j];
    af02:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    af06:	adds	r2, #1
		buf[j] = buf[i];
    af08:	ldrb	r6, [r3, #0]
    af0a:	strb	r6, [r0, #0]
		buf[i] = t;
    af0c:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    af10:	b.n	aef8 <ultoa+0x2c>
	...

0000af14 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    af14:	vcmp.f32	s0, s0
{
    af18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    af1c:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    af20:	eor.w	r5, r0, r0, asr #31
{
    af24:	mov	r7, r0
    af26:	mov	r6, r1
    af28:	mov	r4, r2
	int awidth = abs(width);
    af2a:	sub.w	r5, r5, r0, asr #31
{
    af2e:	vpush	{d8}
    af32:	vmov.f32	s16, s0
    af36:	sub	sp, #20
	if (isnanf(val)) {
    af38:	bvc.n	af98 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    af3a:	vcmpe.f32	s0, #0.0
    af3e:	vmrs	APSR_nzcv, fpscr
    af42:	ite	mi
    af44:	movmi	r3, #4
    af46:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    af48:	cmp	r3, r5
    af4a:	ite	lt
    af4c:	sublt	r5, r5, r3
    af4e:	movge	r5, #0
		if (width<0) {
    af50:	cmp	r0, #0
    af52:	bge.n	af62 <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    af54:	mov	r2, r5
    af56:	mov	r0, r4
    af58:	add	r4, r5
    af5a:	movs	r5, #0
    af5c:	movs	r1, #32
    af5e:	bl	9c1c <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    af62:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    af66:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    af68:	cmp	r3, #0
    af6a:	itt	lt
    af6c:	movlt	r3, #45	; 0x2d
    af6e:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    af72:	movs	r3, #65	; 0x41
    af74:	strb	r2, [r4, #0]
    af76:	strb	r3, [r4, #1]
    af78:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    af7a:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    af7c:	strb	r2, [r4, #2]
			*buf++ = ' ';
    af7e:	movs	r1, #32
    af80:	mov	r2, r5
    af82:	bl	9c1c <memset>
			awidth--;
		}
		*buf = 0;
    af86:	movs	r2, #0
			*buf++ = ' ';
    af88:	mov	r3, r0
    af8a:	add	r0, r5
		*buf = 0;
    af8c:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    af8e:	add	sp, #20
    af90:	vpop	{d8}
    af94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    af98:	vabs.f32	s15, s0
    af9c:	vldr	s14, [pc, #432]	; b150 <dtostrf+0x23c>
    afa0:	vcmp.f32	s15, s14
    afa4:	vmrs	APSR_nzcv, fpscr
    afa8:	ble.n	aff0 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    afaa:	vcmpe.f32	s0, #0.0
    afae:	vmrs	APSR_nzcv, fpscr
    afb2:	ite	mi
    afb4:	movmi	r3, #4
    afb6:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    afb8:	cmp	r3, r5
    afba:	ite	lt
    afbc:	sublt	r5, r5, r3
    afbe:	movge	r5, #0
		if (width<0) {
    afc0:	cmp	r0, #0
    afc2:	bge.n	afd2 <dtostrf+0xbe>
				*buf++ = ' ';
    afc4:	mov	r2, r5
    afc6:	mov	r0, r4
    afc8:	add	r4, r5
    afca:	movs	r5, #0
    afcc:	movs	r1, #32
    afce:	bl	9c1c <memset>
		if (val<0) *buf++ = '-';
    afd2:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    afd6:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    afd8:	vmrs	APSR_nzcv, fpscr
    afdc:	itt	mi
    afde:	movmi	r3, #45	; 0x2d
    afe0:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    afe4:	movs	r3, #73	; 0x49
    afe6:	strb	r3, [r4, #0]
    afe8:	movs	r3, #78	; 0x4e
    afea:	strb	r3, [r4, #1]
    afec:	adds	r3, r4, #3
    afee:	b.n	af7a <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    aff0:	add	r2, sp, #8
    aff2:	add	r1, sp, #4
    aff4:	mov	r0, r6
    aff6:	bl	dfb8 <fcvtf>
	if (precision == 0 && decpt == 0) {
    affa:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    affc:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    affe:	orrs.w	r2, r6, r3
    b002:	bne.n	b0a2 <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b004:	ldrb	r1, [r0, #0]
    b006:	ldr	r3, [pc, #332]	; (b154 <dtostrf+0x240>)
    b008:	ldr	r2, [pc, #332]	; (b158 <dtostrf+0x244>)
    b00a:	cmp	r1, #52	; 0x34
    b00c:	ite	ls
    b00e:	movls	r8, r2
    b010:	movhi	r8, r3
		decpt++;
    b012:	movs	r3, #1
    b014:	str	r3, [sp, #4]
	reqd = strlen(s);
    b016:	mov	r0, r8
    b018:	bl	ec80 <strlen>
	if (reqd > decpt) reqd++;
    b01c:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b01e:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b020:	cmp	r3, r0
    b022:	it	lt
    b024:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b026:	cmp	r3, #0
    b028:	bne.n	b0b2 <dtostrf+0x19e>
    b02a:	adds	r5, #1
	if (sign) reqd++;
    b02c:	ldr.w	fp, [sp, #8]
    b030:	cmp.w	fp, #0
    b034:	beq.n	b038 <dtostrf+0x124>
    b036:	adds	r5, #1
	pad = width - reqd;
    b038:	sub.w	sl, r7, r5
	e = p + reqd;
    b03c:	add.w	r9, r4, r5
	if (pad > 0) {
    b040:	cmp.w	sl, #0
    b044:	ble.n	b0fa <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b046:	mov	r2, sl
    b048:	movs	r1, #32
    b04a:	mov	r0, r4
		e += pad;
    b04c:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b04e:	bl	9c1c <memset>
    b052:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b056:	cmp.w	fp, #0
    b05a:	beq.n	b062 <dtostrf+0x14e>
    b05c:	movs	r3, #45	; 0x2d
    b05e:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b062:	ldr	r1, [sp, #4]
    b064:	cmp	r1, #0
    b066:	bne.n	b0fe <dtostrf+0x1ea>
    b068:	cbz	r6, b078 <dtostrf+0x164>
		*p++ = '0';
    b06a:	mov	r3, r2
    b06c:	movs	r1, #48	; 0x30
    b06e:	strb.w	r1, [r3], #2
		*p++ = '.';
    b072:	movs	r1, #46	; 0x2e
    b074:	strb	r1, [r2, #1]
    b076:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b078:	movs	r0, #46	; 0x2e
	while (p < e) {
    b07a:	cmp	r9, r2
		*p++ = *s++;
    b07c:	mov	r3, r2
	while (p < e) {
    b07e:	bhi.n	b134 <dtostrf+0x220>
	if (width < 0) {
    b080:	cmp	r7, #0
    b082:	bge.n	b09a <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b084:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b086:	movs	r1, #32
		pad = (reqd + width) * -1;
    b088:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b08a:	mov	r0, r3
    b08c:	bic.w	r5, r5, r5, asr #31
    b090:	mov	r2, r5
    b092:	bl	9c1c <memset>
    b096:	mov	r3, r0
    b098:	add	r3, r5
	*p = 0;
    b09a:	movs	r2, #0
	return buf;
    b09c:	mov	r0, r4
	*p = 0;
    b09e:	strb	r2, [r3, #0]
	return buf;
    b0a0:	b.n	af8e <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b0a2:	negs	r3, r3
    b0a4:	cmp	r6, r3
		decpt = -precision;
    b0a6:	ittt	lt
    b0a8:	neglt	r3, r6
		s = "0";
    b0aa:	ldrlt.w	r8, [pc, #172]	; b158 <dtostrf+0x244>
		decpt = -precision;
    b0ae:	strlt	r3, [sp, #4]
    b0b0:	b.n	b016 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b0b2:	bge.n	b02c <dtostrf+0x118>
    b0b4:	cmp	r6, #0
    b0b6:	beq.n	b02c <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b0b8:	add	r3, r6
		reqd = precision + 2;
    b0ba:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b0bc:	cmp	r0, r3
    b0be:	bls.n	b02c <dtostrf+0x118>
				val *= 10.0f;
    b0c0:	vmov.f32	s15, #36	; 0x41200000  10.0
    b0c4:	mov	r3, r6
    b0c6:	b.n	b0ce <dtostrf+0x1ba>
    b0c8:	vmul.f32	s16, s16, s15
				newPrecision--;
    b0cc:	subs	r3, #1
			while (newPrecision > 0) {
    b0ce:	cmp	r3, #0
    b0d0:	bgt.n	b0c8 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b0d2:	cmp	r6, #0
    b0d4:	add	r2, sp, #8
    b0d6:	add	r1, sp, #12
    b0d8:	vmov.f32	s0, s16
    b0dc:	ite	ge
    b0de:	subge	r0, r6, r6
    b0e0:	movlt	r0, r6
    b0e2:	bl	dfb8 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b0e6:	ldr	r3, [sp, #4]
    b0e8:	ldr	r2, [sp, #12]
    b0ea:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b0ec:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b0ee:	subs	r2, r2, r3
    b0f0:	cmp	r2, r1
    b0f2:	itt	eq
    b0f4:	addeq	r3, #1
    b0f6:	streq	r3, [sp, #4]
    b0f8:	b.n	b02c <dtostrf+0x118>
    b0fa:	mov	r2, r4
    b0fc:	b.n	b056 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    b0fe:	bge.n	b078 <dtostrf+0x164>
    b100:	cmp	r6, #0
    b102:	beq.n	b078 <dtostrf+0x164>
		*p++ = '0';
    b104:	mov	r3, r2
		*p++ = '.';
    b106:	movs	r0, #46	; 0x2e
		*p++ = '0';
    b108:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    b10c:	movs	r6, #0
		*p++ = '0';
    b10e:	strb.w	ip, [r3], #2
		*p++ = '.';
    b112:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    b114:	rsb	r0, r1, #2
    b118:	add	r2, r0
		*p++ = '.';
    b11a:	mov	r0, r3
		while ( decpt < 0 ) {
    b11c:	cmp	r0, r2
    b11e:	bne.n	b12c <dtostrf+0x218>
    b120:	subs	r2, r3, r1
    b122:	cmp	r6, #0
    b124:	beq.n	b078 <dtostrf+0x164>
    b126:	movs	r3, #0
    b128:	str	r3, [sp, #4]
    b12a:	b.n	b078 <dtostrf+0x164>
			*p++ = '0';
    b12c:	movs	r6, #1
    b12e:	strb.w	ip, [r0], #1
    b132:	b.n	b11c <dtostrf+0x208>
		*p++ = *s++;
    b134:	ldrb.w	r1, [r8], #1
    b138:	strb.w	r1, [r3], #1
		if (p == e) break;
    b13c:	cmp	r9, r3
    b13e:	beq.n	b080 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    b140:	ldr	r1, [sp, #4]
    b142:	subs	r1, #1
    b144:	str	r1, [sp, #4]
    b146:	cbnz	r1, b14c <dtostrf+0x238>
    b148:	adds	r3, r2, #2
    b14a:	strb	r0, [r2, #1]
			*p++ = '0';
    b14c:	mov	r2, r3
    b14e:	b.n	b07a <dtostrf+0x166>
    b150:	.word	0x7f7fffff
    b154:	.word	0x20007e10
    b158:	.word	0x20007f55

0000b15c <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b15c:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b15e:	ldr	r3, [pc, #52]	; (b194 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b160:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b162:	ldr	r6, [pc, #52]	; (b198 <micros+0x3c>)
		scc = systick_cycle_count;
    b164:	ldr	r5, [pc, #52]	; (b19c <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b166:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b16a:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b16c:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b16e:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b172:	cmp	r2, #0
    b174:	bne.n	b166 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b176:	ldr	r3, [pc, #40]	; (b1a0 <micros+0x44>)
    b178:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b17a:	ldr	r2, [pc, #40]	; (b1a4 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b17c:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b17e:	ldr	r2, [r2, #0]
    b180:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b184:	mov.w	r3, #1000	; 0x3e8
    b188:	muls	r0, r3
	return usec;
}
    b18a:	cmp	r2, r3
    b18c:	ite	ls
    b18e:	addls	r0, r0, r2
    b190:	addhi	r0, r0, r3
    b192:	pop	{r4, r5, r6, pc}
    b194:	.word	0x20027f44
    b198:	.word	0x20027f40
    b19c:	.word	0x20027f3c
    b1a0:	.word	0xe0001000
    b1a4:	.word	0x200278ac

0000b1a8 <delay>:
{
    b1a8:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b1aa:	mov	r4, r0
    b1ac:	cbz	r0, b1d0 <delay+0x28>
	start = micros();
    b1ae:	bl	b15c <micros>
    b1b2:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b1b4:	bl	b15c <micros>
    b1b8:	subs	r0, r0, r5
    b1ba:	cmp.w	r0, #1000	; 0x3e8
    b1be:	bcs.n	b1c6 <delay+0x1e>
		yield();
    b1c0:	bl	be24 <yield>
		while ((micros() - start) >= 1000) {
    b1c4:	b.n	b1b4 <delay+0xc>
			if (--msec == 0) return;
    b1c6:	subs	r4, #1
    b1c8:	beq.n	b1d0 <delay+0x28>
			start += 1000;
    b1ca:	add.w	r5, r5, #1000	; 0x3e8
    b1ce:	b.n	b1b4 <delay+0xc>
}
    b1d0:	pop	{r3, r4, r5, pc}
	...

0000b1d4 <unused_interrupt_vector>:
	__disable_irq();
    b1d4:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b1d6:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b1da:	ldr	r4, [pc, #316]	; (b318 <unused_interrupt_vector+0x144>)
    b1dc:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b1e0:	tst.w	lr, #4
    b1e4:	ite	eq
    b1e6:	mrseq	r2, MSP
    b1ea:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b1ee:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b1f2:	ldr	r7, [pc, #296]	; (b31c <unused_interrupt_vector+0x148>)
	while (p < end) {
    b1f4:	ldr	r6, [pc, #296]	; (b320 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b1f6:	ldr.w	r1, [r3, #3368]	; 0xd28
    b1fa:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    b1fe:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b202:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    b206:	ldr.w	r1, [r3, #3380]	; 0xd34
    b20a:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    b20e:	ldr.w	r3, [r3, #3384]	; 0xd38
    b212:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    b216:	ldr	r3, [r2, #24]
    b218:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b21c:	ldr	r3, [r2, #28]
    b21e:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b222:	bl	b898 <tempmonGetTemp>
    b226:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b22a:	bl	b3a4 <rtc_get>
	info->len = sizeof(*info) / 4;
    b22e:	movs	r3, #11
	p = (uint32_t *)info;
    b230:	ldr	r2, [pc, #240]	; (b324 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b232:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b236:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    b23a:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b23c:	mov.w	r3, #4294967295
		crc ^= *p++;
    b240:	ldr	r1, [r2, #0]
    b242:	movs	r5, #32
    b244:	adds	r2, #4
    b246:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b248:	and.w	r1, r3, #1
    b24c:	subs	r5, #1
    b24e:	mul.w	r1, r7, r1
    b252:	eor.w	r3, r1, r3, lsr #1
    b256:	bne.n	b248 <unused_interrupt_vector+0x74>
	while (p < end) {
    b258:	cmp	r2, r6
    b25a:	bne.n	b240 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b25c:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    b260:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b264:	mov.w	r3, #3758153728	; 0xe000e000
    b268:	ldr	r2, [pc, #188]	; (b328 <unused_interrupt_vector+0x154>)
    b26a:	str.w	r0, [r3, #3952]	; 0xf70
    b26e:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b272:	dsb	sy
	asm("isb");
    b276:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b27a:	ldr	r2, [pc, #176]	; (b32c <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b27c:	ldr	r4, [pc, #176]	; (b330 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b27e:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b280:	ldr	r0, [pc, #176]	; (b334 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b282:	orr.w	r3, r3, #12288	; 0x3000
    b286:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b288:	movs	r3, #2
    b28a:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b28c:	ldr	r3, [r2, #28]
    b28e:	bic.w	r3, r3, #127	; 0x7f
    b292:	orr.w	r3, r3, #64	; 0x40
    b296:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b298:	ldr	r3, [pc, #156]	; (b338 <unused_interrupt_vector+0x164>)
    b29a:	ldr	r3, [r3, #0]
    b29c:	cmp	r3, r0
    b29e:	bls.n	b2a4 <unused_interrupt_vector+0xd0>
    b2a0:	bl	a460 <set_arm_clock>
	PIT_MCR = 0;
    b2a4:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b2a6:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b2a8:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b2ac:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b2ae:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b2b2:	ldr	r3, [pc, #136]	; (b33c <unused_interrupt_vector+0x168>)
    b2b4:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b2b8:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b2bc:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    b2c0:	ldr	r4, [pc, #108]	; (b330 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b2c2:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b2c6:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b2ca:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b2ce:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b2d2:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    b2d6:	ldr.w	r3, [r4, #268]	; 0x10c
    b2da:	cbz	r3, b2e6 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b2dc:	adds	r5, #1
			PIT_TFLG0 = 1;
    b2de:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b2e2:	cmp	r5, #79	; 0x4f
    b2e4:	bhi.n	b2ec <unused_interrupt_vector+0x118>
		usb_isr();
    b2e6:	bl	a910 <usb_isr>
		if (PIT_TFLG0) {
    b2ea:	b.n	b2d6 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b2ec:	ldr	r3, [pc, #80]	; (b340 <unused_interrupt_vector+0x16c>)
    b2ee:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b2f0:	ldr	r1, [pc, #80]	; (b344 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b2f2:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b2f6:	mov.w	r2, #2147483648	; 0x80000000
    b2fa:	ldr	r3, [pc, #76]	; (b348 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b2fc:	ldr	r0, [pc, #76]	; (b34c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b2fe:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b300:	ldr	r2, [pc, #44]	; (b330 <unused_interrupt_vector+0x15c>)
    b302:	ldr.w	r3, [r2, #268]	; 0x10c
    b306:	cbz	r3, b314 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b308:	mov.w	r3, #3758153728	; 0xe000e000
    b30c:	ldr	r2, [pc, #64]	; (b350 <unused_interrupt_vector+0x17c>)
    b30e:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b312:	b.n	b312 <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b314:	str	r0, [r1, #48]	; 0x30
    b316:	b.n	b302 <unused_interrupt_vector+0x12e>
    b318:	.word	0x2027ff00
    b31c:	.word	0xedb88320
    b320:	.word	0x2027ffa8
    b324:	.word	0x2027ff80
    b328:	.word	0x2027ffa0
    b32c:	.word	0x400fc000
    b330:	.word	0x40084000
    b334:	.word	0x0bcd3d80
    b338:	.word	0x200089a0
    b33c:	.word	0x00249f00
    b340:	.word	0x402e0000
    b344:	.word	0x400f8000
    b348:	.word	0x400d9000
    b34c:	.word	0x0bad00f1
    b350:	.word	0x05fa0004

0000b354 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b354:	ldr	r2, [pc, #32]	; (b378 <_sbrk+0x24>)
{
    b356:	push	{r3, lr}
    b358:	mov	r3, r0
        char *prev = __brkval;
    b35a:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b35c:	cbz	r3, b372 <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b35e:	add	r3, r0
    b360:	ldr	r1, [pc, #24]	; (b37c <_sbrk+0x28>)
    b362:	cmp	r3, r1
    b364:	bls.n	b374 <_sbrk+0x20>
                        errno = ENOMEM;
    b366:	bl	e7d4 <__errno>
    b36a:	movs	r3, #12
    b36c:	str	r3, [r0, #0]
                        return (void *)-1;
    b36e:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b372:	pop	{r3, pc}
                __brkval = prev + incr;
    b374:	str	r3, [r2, #0]
    b376:	b.n	b372 <_sbrk+0x1e>
    b378:	.word	0x20008d7c
    b37c:	.word	0x20280000

0000b380 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b380:	movs	r0, #0
    b382:	bx	lr

0000b384 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b384:	mov.w	r0, #4294967295
    b388:	bx	lr

0000b38a <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b38a:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b38e:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b390:	str	r3, [r1, #4]
}
    b392:	bx	lr

0000b394 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b394:	movs	r0, #1
    b396:	bx	lr

0000b398 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b398:	mov.w	r0, #4294967295
    b39c:	bx	lr

0000b39e <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b39e:	wfi
    b3a0:	b.n	b39e <abort>
	...

0000b3a4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b3a4:	ldr	r2, [pc, #28]	; (b3c4 <rtc_get+0x20>)
    b3a6:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b3a8:	ldr	r3, [r2, #40]	; 0x28
{
    b3aa:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    b3ac:	mov	r4, r3
    b3ae:	mov	r1, r0
    b3b0:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b3b2:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b3b4:	cmp	r4, r3
    b3b6:	bne.n	b3ac <rtc_get+0x8>
    b3b8:	cmp	r1, r0
    b3ba:	bne.n	b3ac <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    b3bc:	lsrs	r3, r3, #15
}
    b3be:	orr.w	r0, r3, r0, lsl #17
    b3c2:	pop	{r4, pc}
    b3c4:	.word	0x400d4000

0000b3c8 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b3c8:	ldr	r3, [pc, #60]	; (b408 <rtc_set+0x40>)
    b3ca:	ldr	r2, [r3, #8]
    b3cc:	bic.w	r2, r2, #65537	; 0x10001
    b3d0:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b3d2:	ldr	r2, [r3, #8]
    b3d4:	lsls	r2, r2, #31
    b3d6:	bmi.n	b3d2 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b3d8:	ldr	r2, [r3, #56]	; 0x38
    b3da:	bic.w	r2, r2, #1
    b3de:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b3e0:	ldr	r3, [pc, #36]	; (b408 <rtc_set+0x40>)
    b3e2:	ldr	r2, [r3, #56]	; 0x38
    b3e4:	lsls	r1, r2, #31
    b3e6:	bmi.n	b3e2 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    b3e8:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    b3ea:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    b3ec:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    b3ee:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    b3f0:	ldr	r2, [r3, #56]	; 0x38
    b3f2:	orr.w	r2, r2, #1
    b3f6:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b3f8:	ldr	r2, [r3, #56]	; 0x38
    b3fa:	lsls	r2, r2, #31
    b3fc:	bpl.n	b3f8 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    b3fe:	ldr	r2, [r3, #8]
    b400:	orr.w	r2, r2, #65537	; 0x10001
    b404:	str	r2, [r3, #8]
}
    b406:	bx	lr
    b408:	.word	0x400d4000

0000b40c <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b40c:	ldr	r3, [pc, #68]	; (b454 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    b40e:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b410:	ldr	r2, [pc, #68]	; (b458 <flash_wait+0x4c>)
{
    b412:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b414:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b418:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b41a:	ldr	r5, [pc, #64]	; (b45c <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    b41c:	ldr	r4, [pc, #64]	; (b460 <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    b41e:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b422:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    b426:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b42a:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b42e:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    b432:	ldr	r0, [r3, #20]
    b434:	lsls	r0, r0, #31
    b436:	bpl.n	b432 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b438:	str	r2, [r3, #20]
	} while (status & 1);
    b43a:	ldrb	r0, [r4, #0]
    b43c:	lsls	r0, r0, #31
    b43e:	bmi.n	b422 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    b440:	ldr	r2, [r3, #0]
    b442:	orr.w	r2, r2, #1
    b446:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    b448:	ldr	r2, [pc, #8]	; (b454 <flash_wait+0x48>)
    b44a:	ldr	r3, [r2, #0]
    b44c:	lsls	r3, r3, #31
    b44e:	bmi.n	b44a <flash_wait+0x3e>
	__enable_irq();
    b450:	cpsie	i
}
    b452:	pop	{r4, r5, pc}
    b454:	.word	0x402a8000
    b458:	.word	0x24010405
    b45c:	.word	0x000f0001
    b460:	.word	0x402a8100

0000b464 <eeprom_initialize>:
{
    b464:	push	{r4, r5, lr}
    b466:	ldr	r3, [pc, #52]	; (b49c <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    b468:	movw	r5, #65535	; 0xffff
    b46c:	ldr	r4, [pc, #48]	; (b4a0 <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b46e:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    b472:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    b474:	ldrh	r0, [r1, #0]
    b476:	adds	r1, #2
    b478:	cmp	r0, r5
    b47a:	beq.n	b484 <eeprom_initialize+0x20>
			index++;
    b47c:	adds	r2, #1
		} while (p < end);
    b47e:	cmp	r1, r3
			index++;
    b480:	uxth	r2, r2
		} while (p < end);
    b482:	bcc.n	b474 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b484:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    b488:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b48c:	cmp.w	r3, #1619001344	; 0x60800000
    b490:	bne.n	b46e <eeprom_initialize+0xa>
	initialized = 1;
    b492:	ldr	r3, [pc, #16]	; (b4a4 <eeprom_initialize+0x40>)
    b494:	movs	r2, #1
    b496:	strb	r2, [r3, #0]
}
    b498:	pop	{r4, r5, pc}
    b49a:	nop
    b49c:	.word	0x607c1000
    b4a0:	.word	0x20027fbc
    b4a4:	.word	0x2002818a

0000b4a8 <eeprom_read_byte>:
{
    b4a8:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    b4aa:	movw	r3, #4283	; 0x10bb
{
    b4ae:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    b4b0:	cmp	r0, r3
    b4b2:	bhi.n	b500 <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    b4b4:	ldr	r3, [pc, #76]	; (b504 <eeprom_read_byte+0x5c>)
    b4b6:	ldrb	r3, [r3, #0]
    b4b8:	cbnz	r3, b4be <eeprom_read_byte+0x16>
    b4ba:	bl	b464 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    b4be:	lsrs	r2, r4, #2
    b4c0:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    b4c2:	ldr	r0, [pc, #68]	; (b508 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b4c4:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    b4c8:	udiv	r3, r2, r3
    b4cc:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b4d0:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    b4d4:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b4d6:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    b4da:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    b4de:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b4e0:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    b4e4:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b4e6:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    b4e8:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    b4ec:	cmp	r3, r2
    b4ee:	bcc.n	b4f2 <eeprom_read_byte+0x4a>
}
    b4f0:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    b4f2:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    b4f6:	uxtb	r5, r1
    b4f8:	cmp	r5, r4
    b4fa:	it	eq
    b4fc:	lsreq	r0, r1, #8
    b4fe:	b.n	b4ec <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    b500:	movs	r0, #255	; 0xff
    b502:	b.n	b4f0 <eeprom_read_byte+0x48>
    b504:	.word	0x2002818a
    b508:	.word	0x20027fbc

0000b50c <eeprom_read_block>:
{
    b50c:	push	{r4, r5, r6, lr}
    b50e:	mov	r4, r0
    b510:	adds	r5, r1, r2
    b512:	mov	r0, r1
	while (len--) {
    b514:	cmp	r0, r5
    b516:	bne.n	b51a <eeprom_read_block+0xe>
}
    b518:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    b51a:	adds	r6, r0, #1
    b51c:	bl	b4a8 <eeprom_read_byte>
    b520:	strb.w	r0, [r4], #1
    b524:	mov	r0, r6
    b526:	b.n	b514 <eeprom_read_block+0x8>

0000b528 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    b528:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b52c:	mov	r5, r1
    b52e:	mov	r4, r2
	__disable_irq();
    b530:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b532:	ldr	r3, [pc, #192]	; (b5f4 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b534:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b538:	ldr	r2, [pc, #188]	; (b5f8 <eepromemu_flash_write+0xd0>)
    b53a:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b53c:	movs	r2, #2
    b53e:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    b540:	movs	r2, #0
    b542:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b546:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    b54a:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    b54c:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b550:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b554:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b558:	mov.w	r2, #983040	; 0xf0000
    b55c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b560:	movs	r2, #1
    b562:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b566:	bic.w	r2, r0, #31
	asm("dsb");
    b56a:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b56e:	mov.w	r6, #3758153728	; 0xe000e000
    b572:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    b576:	adds	r2, #32
	} while (location < end_addr);
    b578:	cmp	r1, r2
    b57a:	bhi.n	b572 <eepromemu_flash_write+0x4a>
	asm("dsb");
    b57c:	dsb	sy
	asm("isb");
    b580:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b584:	ldr	r2, [r3, #20]
    b586:	lsls	r6, r2, #31
    b588:	bpl.n	b584 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b58a:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b58c:	ldr	r1, [pc, #108]	; (b5fc <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b58e:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b592:	ldr	r7, [pc, #96]	; (b5f4 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b594:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b596:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b59a:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b59e:	ldr.w	r8, [pc, #96]	; b600 <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b5a2:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b5a6:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    b5a8:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b5ac:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b5b0:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b5b4:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b5b8:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b5bc:	ldr	r3, [r7, #20]
    b5be:	lsls	r2, r3, #31
    b5c0:	bpl.n	b5ce <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    b5c2:	movs	r3, #65	; 0x41
    b5c4:	str	r3, [r7, #20]
	flash_wait();
}
    b5c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    b5ca:	b.w	b40c <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    b5ce:	lsls	r1, r3, #25
    b5d0:	bpl.n	b5bc <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b5d2:	cmp	r4, #8
    b5d4:	bhi.n	b5ee <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    b5d6:	cbz	r4, b5e8 <eepromemu_flash_write+0xc0>
    b5d8:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b5da:	mov	r1, r5
				len -= wrlen;
    b5dc:	subs	r4, r4, r6
				src += wrlen;
    b5de:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b5e0:	mov	r2, r6
    b5e2:	mov	r0, r8
    b5e4:	bl	9c60 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    b5e8:	movs	r3, #64	; 0x40
    b5ea:	str	r3, [r7, #20]
    b5ec:	b.n	b5bc <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b5ee:	movs	r6, #8
    b5f0:	b.n	b5da <eepromemu_flash_write+0xb2>
    b5f2:	nop
    b5f4:	.word	0x402a8000
    b5f8:	.word	0x5af05af0
    b5fc:	.word	0x08180432
    b600:	.word	0x402a8180

0000b604 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    b604:	push	{r4}
	__disable_irq();
    b606:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b608:	ldr	r3, [pc, #156]	; (b6a8 <eepromemu_flash_erase_sector+0xa4>)
    b60a:	ldr	r2, [pc, #160]	; (b6ac <eepromemu_flash_erase_sector+0xa8>)
    b60c:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b60e:	movs	r2, #2
    b610:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b612:	movw	r2, #1030	; 0x406
    b616:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    b61a:	movs	r2, #0
    b61c:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b620:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b624:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    b628:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b62c:	mov.w	r2, #983040	; 0xf0000
    b630:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b634:	movs	r2, #1
    b636:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    b63a:	bic.w	r2, r0, #4080	; 0xff0
    b63e:	bic.w	r2, r2, #15
	asm("dsb");
    b642:	dsb	sy
    b646:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    b64a:	add.w	r1, r2, #4096	; 0x1000
    b64e:	cmp	r1, r4
    b650:	ite	cc
    b652:	movcc	r1, #1
    b654:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    b656:	mov.w	r4, #3758153728	; 0xe000e000
    b65a:	add.w	r1, r2, r1, lsl #5
    b65e:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    b662:	adds	r2, #32
	} while (location < end_addr);
    b664:	cmp	r2, r1
    b666:	bne.n	b65e <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    b668:	dsb	sy
	asm("isb");
    b66c:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b670:	ldr	r2, [r3, #20]
    b672:	lsls	r1, r2, #31
    b674:	bpl.n	b670 <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b676:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    b678:	ldr	r2, [pc, #52]	; (b6b0 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b67a:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    b67c:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    b680:	ldr	r2, [pc, #48]	; (b6b4 <eepromemu_flash_erase_sector+0xb0>)
    b682:	ands	r2, r0
    b684:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b688:	mov.w	r2, #983040	; 0xf0000
    b68c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b690:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b694:	ldr	r3, [pc, #16]	; (b6a8 <eepromemu_flash_erase_sector+0xa4>)
    b696:	ldr	r2, [r3, #20]
    b698:	lsls	r2, r2, #31
    b69a:	bpl.n	b696 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b69c:	movs	r2, #1
	flash_wait();
}
    b69e:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b6a2:	str	r2, [r3, #20]
	flash_wait();
    b6a4:	b.w	b40c <flash_wait>
    b6a8:	.word	0x402a8000
    b6ac:	.word	0x5af05af0
    b6b0:	.word	0x08180420
    b6b4:	.word	0x00fff000

0000b6b8 <eeprom_write_byte>:
	if (addr > E2END) return;
    b6b8:	movw	r3, #4283	; 0x10bb
    b6bc:	cmp	r0, r3
{
    b6be:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6c2:	mov	r4, r0
    b6c4:	sub	sp, #264	; 0x108
    b6c6:	mov	r9, r1
	if (addr > E2END) return;
    b6c8:	bhi.n	b72a <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    b6ca:	ldr	r3, [pc, #232]	; (b7b4 <eeprom_write_byte+0xfc>)
    b6cc:	ldrb	r3, [r3, #0]
    b6ce:	cbnz	r3, b6d4 <eeprom_write_byte+0x1c>
    b6d0:	bl	b464 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    b6d4:	lsrs	r6, r4, #2
    b6d6:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    b6d8:	ldr	r7, [pc, #220]	; (b7b8 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b6da:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    b6de:	udiv	r3, r6, r3
    b6e2:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b6e6:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    b6ea:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    b6ec:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b6ee:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    b6f2:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b6f6:	add.w	r5, r5, #1984	; 0x7c0
    b6fa:	lsls	r5, r5, #12
    b6fc:	mov	r8, r5
	end = p + sector_index[sector];
    b6fe:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b702:	mov	r3, r5
	while (p < end) {
    b704:	cmp	r3, r0
    b706:	bcc.n	b730 <eeprom_write_byte+0x78>
	if (data == olddata) return;
    b708:	cmp	r2, r9
    b70a:	beq.n	b72a <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    b70c:	cmp.w	sl, #2048	; 0x800
    b710:	bcs.n	b740 <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    b712:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    b716:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    b71a:	movs	r2, #2
    b71c:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    b71e:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    b722:	bl	b528 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    b726:	strh.w	sl, [r7, r6, lsl #1]
}
    b72a:	add	sp, #264	; 0x108
    b72c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    b730:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    b734:	uxtb.w	ip, r1
    b738:	cmp	ip, r4
    b73a:	it	eq
    b73c:	lsreq	r2, r1, #8
    b73e:	b.n	b704 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    b740:	mov.w	r2, #256	; 0x100
    b744:	movs	r1, #255	; 0xff
    b746:	add	r0, sp, #8
    b748:	bl	9c1c <memset>
		while (p < end) {
    b74c:	cmn.w	r5, #4096	; 0x1000
    b750:	movw	r3, #2049	; 0x801
    b754:	it	cs
    b756:	movcs	r3, #1
    b758:	add.w	r3, r5, r3, lsl #1
    b75c:	mov	r1, r5
    b75e:	adds	r5, #2
    b760:	cmp	r5, r3
    b762:	bne.n	b7a6 <eeprom_write_byte+0xee>
		buf[offset] = data;
    b764:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    b766:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    b768:	mov	r0, r8
		buf[offset] = data;
    b76a:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    b76e:	add	r4, sp, #8
		index = 0;
    b770:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    b772:	bl	b604 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    b776:	ldrb.w	r3, [r4], #1
    b77a:	cmp	r3, #255	; 0xff
    b77c:	beq.n	b798 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    b77e:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    b782:	movs	r2, #2
    b784:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    b788:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    b78c:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    b790:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    b794:	bl	b528 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    b798:	adds	r5, #1
    b79a:	cmp.w	r5, #256	; 0x100
    b79e:	bne.n	b776 <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    b7a0:	strh.w	r9, [r7, r6, lsl #1]
    b7a4:	b.n	b72a <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    b7a6:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    b7a8:	add	r0, sp, #8
    b7aa:	ldrb	r1, [r1, #0]
    b7ac:	lsrs	r2, r2, #8
    b7ae:	strb	r2, [r0, r1]
    b7b0:	b.n	b75c <eeprom_write_byte+0xa4>
    b7b2:	nop
    b7b4:	.word	0x2002818a
    b7b8:	.word	0x20027fbc

0000b7bc <eeprom_write_block>:
{
    b7bc:	push	{r4, r5, r6, lr}
    b7be:	mov	r4, r0
    b7c0:	mov	r0, r1
	while (len--) {
    b7c2:	adds	r5, r4, r2
    b7c4:	cmp	r4, r5
    b7c6:	bne.n	b7ca <eeprom_write_block+0xe>
}
    b7c8:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    b7ca:	adds	r6, r0, #1
    b7cc:	ldrb.w	r1, [r4], #1
    b7d0:	bl	b6b8 <eeprom_write_byte>
    b7d4:	mov	r0, r6
    b7d6:	b.n	b7c4 <eeprom_write_block+0x8>

0000b7d8 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b7d8:	ldr	r3, [r0, #0]
    b7da:	cbz	r3, b7f2 <smalloc_verify_pool+0x1a>
    b7dc:	ldr	r0, [r0, #4]
    b7de:	cbz	r0, b7f4 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    b7e0:	movs	r3, #12
    b7e2:	udiv	r2, r0, r3
    b7e6:	mls	r0, r3, r2, r0
    b7ea:	clz	r0, r0
    b7ee:	lsrs	r0, r0, #5
    b7f0:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    b7f2:	mov	r0, r3
	return 1;
}
    b7f4:	bx	lr

0000b7f6 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    b7f6:	push	{r4, lr}
    b7f8:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    b7fa:	bl	b7d8 <smalloc_verify_pool>
    b7fe:	mov	r4, r0
    b800:	cbz	r0, b808 <sm_align_pool+0x12>
    b802:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b804:	mov	r0, r4
    b806:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    b808:	ldr	r3, [r1, #4]
    b80a:	movs	r0, #12
    b80c:	udiv	r2, r3, r0
    b810:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    b814:	cbz	r2, b81a <sm_align_pool+0x24>
    b816:	subs	r3, r3, r2
    b818:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b81a:	ldr	r3, [r1, #4]
    b81c:	cmp	r3, #240	; 0xf0
    b81e:	bhi.n	b802 <sm_align_pool+0xc>
		errno = ENOSPC;
    b820:	bl	e7d4 <__errno>
    b824:	movs	r3, #28
    b826:	str	r3, [r0, #0]
		return 0;
    b828:	b.n	b804 <sm_align_pool+0xe>

0000b82a <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b82a:	push	{r4, r5, r6, lr}
    b82c:	mov	r6, r3
	if (!spool) {
    b82e:	mov	r4, r0
    b830:	cbnz	r0, b840 <sm_set_pool+0x16>
		errno = EINVAL;
    b832:	bl	e7d4 <__errno>
		return 0;
    b836:	mov	r5, r4
		errno = EINVAL;
    b838:	movs	r3, #22
    b83a:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b83c:	mov	r0, r5
    b83e:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    b840:	cbz	r1, b844 <sm_set_pool+0x1a>
    b842:	cbnz	r2, b874 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    b844:	mov	r0, r4
    b846:	bl	b7d8 <smalloc_verify_pool>
    b84a:	mov	r5, r0
    b84c:	cbz	r0, b86a <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b84e:	ldr	r3, [r4, #8]
    b850:	cbz	r3, b85c <sm_set_pool+0x32>
    b852:	ldr	r2, [r4, #4]
    b854:	movs	r1, #0
    b856:	ldr	r0, [r4, #0]
    b858:	bl	9c1c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b85c:	movs	r2, #16
    b85e:	movs	r1, #0
    b860:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    b862:	bl	9c1c <memset>
	return 1;
    b866:	movs	r5, #1
    b868:	b.n	b83c <sm_set_pool+0x12>
		errno = EINVAL;
    b86a:	bl	e7d4 <__errno>
    b86e:	movs	r3, #22
    b870:	str	r3, [r0, #0]
		return 0;
    b872:	b.n	b83c <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    b874:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    b876:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    b87a:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b87c:	bl	b7f6 <sm_align_pool>
    b880:	mov	r5, r0
    b882:	cmp	r0, #0
    b884:	beq.n	b83c <sm_set_pool+0x12>
	if (do_zero) {
    b886:	cmp	r6, #0
    b888:	beq.n	b866 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    b88a:	ldr	r2, [r4, #4]
    b88c:	movs	r1, #0
    b88e:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    b890:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b892:	b.n	b862 <sm_set_pool+0x38>

0000b894 <Panic_Temp_isr>:
  unused_interrupt_vector();
    b894:	b.w	b1d4 <unused_interrupt_vector>

0000b898 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    b898:	ldr	r3, [pc, #72]	; (b8e4 <tempmonGetTemp+0x4c>)
    b89a:	ldr.w	r2, [r3, #128]	; 0x80
    b89e:	lsls	r2, r2, #29
    b8a0:	bpl.n	b89a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b8a2:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b8a6:	ldr	r2, [pc, #64]	; (b8e8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b8a8:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b8ac:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b8b0:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b8b4:	ldr	r3, [pc, #52]	; (b8ec <tempmonGetTemp+0x54>)
    b8b6:	vcvt.f32.u32	s0, s0
    b8ba:	vldr	s14, [r3]
    b8be:	vcvt.f32.s32	s15, s15
    b8c2:	ldr	r3, [pc, #44]	; (b8f0 <tempmonGetTemp+0x58>)
    b8c4:	vcvt.f32.u32	s14, s14
    b8c8:	vsub.f32	s15, s15, s14
    b8cc:	vldr	s14, [r3]
    b8d0:	ldr	r3, [pc, #32]	; (b8f4 <tempmonGetTemp+0x5c>)
    b8d2:	vmul.f32	s15, s15, s14
    b8d6:	vldr	s13, [r3]
    b8da:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    b8de:	vsub.f32	s0, s0, s14
    b8e2:	bx	lr
    b8e4:	.word	0x400d8100
    b8e8:	.word	0x200278a0
    b8ec:	.word	0x2002789c
    b8f0:	.word	0x200278a4
    b8f4:	.word	0x200278a8

0000b8f8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    b8f8:	cmp	r0, #54	; 0x36
{
    b8fa:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    b8fc:	bhi.n	b916 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    b8fe:	lsls	r2, r0, #4
    b900:	ldr	r3, [pc, #40]	; (b92c <digitalWrite+0x34>)
    b902:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    b906:	ldr	r3, [r3, r2]
	mask = p->mask;
    b908:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    b90a:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    b90c:	tst	r4, r2
    b90e:	beq.n	b91e <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    b910:	cbz	r1, b918 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    b912:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b916:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    b918:	str.w	r2, [r3, #136]	; 0x88
    b91c:	b.n	b916 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b91e:	ldr	r3, [r0, #8]
		if (val) {
    b920:	cbz	r1, b928 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b922:	ldr	r2, [pc, #12]	; (b930 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b924:	str	r2, [r3, #0]
    b926:	b.n	b916 <digitalWrite+0x1e>
    b928:	ldr	r2, [pc, #8]	; (b934 <digitalWrite+0x3c>)
    b92a:	b.n	b924 <digitalWrite+0x2c>
    b92c:	.word	0x2000743c
    b930:	.word	0x0001f038
    b934:	.word	0x00013038

0000b938 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b938:	cmp	r0, #54	; 0x36
{
    b93a:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    b93c:	bhi.n	b96e <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    b93e:	ldr	r3, [pc, #76]	; (b98c <pinMode+0x54>)
    b940:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b942:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b944:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    b946:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b94a:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b94c:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b950:	beq.n	b956 <pinMode+0x1e>
    b952:	cmp	r1, #4
    b954:	bne.n	b970 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b956:	orrs	r4, r5
		if (mode == OUTPUT) {
    b958:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b95a:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    b95c:	bne.n	b962 <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b95e:	movs	r2, #56	; 0x38
    b960:	b.n	b966 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b962:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b966:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b968:	movs	r2, #21
    b96a:	ldr	r3, [r0, #4]
    b96c:	str	r2, [r3, #0]
}
    b96e:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b970:	bic.w	r4, r4, r5
    b974:	str	r4, [r2, #4]
		if (mode == INPUT) {
    b976:	cmp	r1, #0
    b978:	beq.n	b95e <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    b97a:	cmp	r1, #2
    b97c:	bne.n	b982 <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b97e:	ldr	r2, [pc, #16]	; (b990 <pinMode+0x58>)
    b980:	b.n	b966 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    b982:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b984:	ite	eq
    b986:	ldreq	r2, [pc, #12]	; (b994 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b988:	ldrne	r2, [pc, #12]	; (b998 <pinMode+0x60>)
    b98a:	b.n	b966 <pinMode+0x2e>
    b98c:	.word	0x2000743c
    b990:	.word	0x0001f038
    b994:	.word	0x00013038
    b998:	.word	0x00010038

0000b99c <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b99c:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b9a0:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b9a2:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    b9a6:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b9a8:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    b9aa:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    b9ae:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b9b2:	ldrh.w	r3, [r0, #392]	; 0x188
    b9b6:	uxth	r3, r3
{
    b9b8:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b9ba:	orr.w	r3, r3, #240	; 0xf0
    b9be:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b9c0:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b9c4:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b9c8:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b9cc:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b9d0:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    b9d4:	adds	r2, #1
    b9d6:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b9d8:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b9da:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    b9dc:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b9de:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b9e0:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    b9e2:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b9e4:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    b9e6:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    b9e8:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    b9ea:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    b9ec:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    b9ee:	bne.n	b9d0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b9f0:	ldrh.w	r3, [r0, #392]	; 0x188
    b9f4:	uxth	r3, r3
    b9f6:	orr.w	r3, r3, #15
    b9fa:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b9fe:	ldrh.w	r3, [r0, #392]	; 0x188
    ba02:	uxth	r3, r3
    ba04:	orr.w	r3, r3, #3840	; 0xf00
    ba08:	strh.w	r3, [r0, #392]	; 0x188
}
    ba0c:	pop	{r4, r5, r6, r7, pc}

0000ba0e <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ba0e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba10:	mov.w	ip, #15
{
    ba14:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    ba16:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba18:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba1c:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba20:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ba24:	add.w	r3, r0, r2, lsl #5
    ba28:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    ba2a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ba2c:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ba2e:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ba30:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba32:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba36:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba38:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ba3a:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    ba3c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba3e:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ba40:	bne.n	ba24 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    ba42:	pop	{r4, r5, r6, r7, pc}

0000ba44 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ba44:	ldr	r2, [pc, #84]	; (ba9c <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    ba46:	ldr	r0, [pc, #88]	; (baa0 <pwm_init+0x5c>)
{
    ba48:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ba4a:	ldr	r3, [r2, #120]	; 0x78
    ba4c:	orr.w	r3, r3, #16711680	; 0xff0000
    ba50:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ba52:	ldr.w	r3, [r2, #128]	; 0x80
    ba56:	orr.w	r3, r3, #4227858432	; 0xfc000000
    ba5a:	orr.w	r3, r3, #196608	; 0x30000
    ba5e:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    ba62:	bl	b99c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    ba66:	add.w	r0, r0, #16384	; 0x4000
    ba6a:	bl	b99c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    ba6e:	add.w	r0, r0, #16384	; 0x4000
    ba72:	bl	b99c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    ba76:	add.w	r0, r0, #16384	; 0x4000
    ba7a:	bl	b99c <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    ba7e:	sub.w	r0, r0, #2146304	; 0x20c000
    ba82:	bl	ba0e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    ba86:	add.w	r0, r0, #16384	; 0x4000
    ba8a:	bl	ba0e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    ba8e:	add.w	r0, r0, #16384	; 0x4000
}
    ba92:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    ba96:	b.w	ba0e <quadtimer_init>
    ba9a:	nop
    ba9c:	.word	0x400fc000
    baa0:	.word	0x403dc000

0000baa4 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    baa4:	ldr	r2, [pc, #8]	; (bab0 <txEvent_event+0xc>)
    baa6:	ldr	r3, [r2, #0]
    baa8:	adds	r3, #1
    baaa:	str	r3, [r2, #0]
    baac:	bx	lr
    baae:	nop
    bab0:	.word	0x200277fc

0000bab4 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    bab4:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    bab6:	ldr	r4, [pc, #40]	; (bae0 <rx_event+0x2c>)
	int i = t->callback_param;
    bab8:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    baba:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    babc:	ldr	r2, [pc, #36]	; (bae4 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    babe:	adds	r3, #1
    bac0:	cmp	r3, #5
    bac2:	it	cs
    bac4:	movcs	r3, #0
	rx_list[head] = i;
    bac6:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bac8:	ldr	r1, [r0, #4]
    baca:	ldr	r2, [pc, #28]	; (bae8 <rx_event+0x34>)
    bacc:	ubfx	r1, r1, #16, #15
    bad0:	ldrh	r2, [r2, #0]
    bad2:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    bad4:	ldr	r1, [pc, #20]	; (baec <rx_event+0x38>)
    bad6:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    bada:	uxtb	r3, r3
    badc:	strb	r3, [r4, #0]
}
    bade:	pop	{r4, pc}
    bae0:	.word	0x20028194
    bae4:	.word	0x2002819e
    bae8:	.word	0x20027fba
    baec:	.word	0x20027888

0000baf0 <rx_queue_transfer>:
{
    baf0:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    baf2:	ldr	r1, [pc, #80]	; (bb44 <rx_queue_transfer+0x54>)
{
    baf4:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    baf6:	ldr	r7, [pc, #80]	; (bb48 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    baf8:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    bafc:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bafe:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    bb00:	add	r0, r1
	asm("dsb");
    bb02:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bb06:	mov.w	r4, #3758153728	; 0xe000e000
    bb0a:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    bb0e:	adds	r2, #32
	} while (location < end_addr);
    bb10:	cmp	r0, r2
    bb12:	bhi.n	bb0a <rx_queue_transfer+0x1a>
	asm("dsb");
    bb14:	dsb	sy
	asm("isb");
    bb18:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bb1c:	ldr	r5, [pc, #44]	; (bb4c <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bb1e:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bb22:	ldrh	r2, [r7, #0]
    bb24:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bb28:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bb2c:	mov	r0, r5
    bb2e:	bl	ae38 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    bb32:	mov	r1, r5
    bb34:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bb36:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    bb3a:	bl	ae88 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bb3e:	str.w	r6, [r4, #268]	; 0x10c
}
    bb42:	pop	{r3, r4, r5, r6, r7, pc}
    bb44:	.word	0x20203800
    bb48:	.word	0x20027fba
    bb4c:	.word	0x2000bc40

0000bb50 <usb_mtp_configure>:
	if (usb_high_speed) {
    bb50:	ldr	r3, [pc, #120]	; (bbcc <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bb52:	movs	r2, #128	; 0x80
    bb54:	movs	r1, #0
    bb56:	ldr	r0, [pc, #120]	; (bbd0 <usb_mtp_configure+0x80>)
{
    bb58:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bb5a:	ldrb	r3, [r3, #0]
	tx_head = 0;
    bb5c:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    bb5e:	ldr	r6, [pc, #116]	; (bbd4 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    bb60:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    bb62:	ldr	r3, [pc, #116]	; (bbd8 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    bb64:	ite	eq
    bb66:	moveq	r5, #64	; 0x40
    bb68:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    bb6c:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    bb6e:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bb70:	bl	9c1c <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bb74:	movs	r2, #128	; 0x80
    bb76:	movs	r1, #0
    bb78:	ldr	r0, [pc, #96]	; (bbdc <usb_mtp_configure+0x8c>)
    bb7a:	bl	9c1c <memset>
	tx_head = 0;
    bb7e:	ldr	r3, [pc, #96]	; (bbe0 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bb80:	mov	r2, r4
    bb82:	mov	r1, r5
	tx_head = 0;
    bb84:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bb86:	movs	r0, #4
	rx_head = 0;
    bb88:	ldr	r3, [pc, #88]	; (bbe4 <usb_mtp_configure+0x94>)
    bb8a:	strb	r4, [r3, #0]
	rx_tail = 0;
    bb8c:	ldr	r3, [pc, #88]	; (bbe8 <usb_mtp_configure+0x98>)
    bb8e:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bb90:	mov	r3, r4
    bb92:	bl	adf8 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bb96:	mov	r2, r4
    bb98:	ldrh	r1, [r6, #0]
    bb9a:	movs	r0, #4
    bb9c:	ldr	r3, [pc, #76]	; (bbec <usb_mtp_configure+0x9c>)
    bb9e:	bl	adb8 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    bba2:	mov	r2, r4
    bba4:	ldr	r3, [pc, #72]	; (bbf0 <usb_mtp_configure+0xa0>)
    bba6:	movs	r1, #32
    bba8:	movs	r0, #5
    bbaa:	bl	adf8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bbae:	mov	r0, r4
    bbb0:	bl	baf0 <rx_queue_transfer>
    bbb4:	movs	r0, #1
    bbb6:	bl	baf0 <rx_queue_transfer>
    bbba:	movs	r0, #2
    bbbc:	bl	baf0 <rx_queue_transfer>
    bbc0:	movs	r0, #3
}
    bbc2:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bbc6:	b.w	baf0 <rx_queue_transfer>
    bbca:	nop
    bbcc:	.word	0x200281ac
    bbd0:	.word	0x2000bd40
    bbd4:	.word	0x20027fba
    bbd8:	.word	0x2002803e
    bbdc:	.word	0x2000bc40
    bbe0:	.word	0x200281a8
    bbe4:	.word	0x20028194
    bbe8:	.word	0x200281a4
    bbec:	.word	0x0000bab5
    bbf0:	.word	0x0000baa5

0000bbf4 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    bbf4:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    bbf8:	ldr	r7, [pc, #112]	; (bc6c <usb_mtp_recv+0x78>)
{
    bbfa:	mov	r5, r1
	uint32_t tail = rx_tail;
    bbfc:	ldr	r6, [pc, #112]	; (bc70 <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    bbfe:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    bc02:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bc04:	ldr.w	r9, [pc, #120]	; bc80 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    bc08:	uxtb	r4, r3
		if (tail != rx_head) break;
    bc0a:	ldr.w	sl, [pc, #120]	; bc84 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bc0e:	ldrb.w	r3, [r9]
    bc12:	cbz	r3, bc60 <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    bc14:	ldrb.w	r3, [sl]
    bc18:	cmp	r4, r3
    bc1a:	bne.n	bc30 <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    bc1c:	ldr	r3, [r7, #0]
    bc1e:	str	r0, [sp, #4]
    bc20:	sub.w	r3, r3, r8
    bc24:	cmp	r3, r5
    bc26:	bcs.n	bc66 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    bc28:	bl	be24 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bc2c:	ldr	r0, [sp, #4]
    bc2e:	b.n	bc0e <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    bc30:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    bc32:	ldr	r2, [pc, #64]	; (bc74 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    bc34:	ldr	r1, [pc, #64]	; (bc78 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    bc36:	cmp	r3, #5
    bc38:	it	cs
    bc3a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    bc3c:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    bc3e:	ldr	r2, [pc, #60]	; (bc7c <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    bc40:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    bc44:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    bc48:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    bc4a:	mov	r2, r4
	rx_tail = tail;
    bc4c:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    bc4e:	bl	9c60 <memcpy>
	rx_queue_transfer(i);
    bc52:	mov	r0, r5
    bc54:	bl	baf0 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    bc58:	mov	r0, r4
    bc5a:	add	sp, #8
    bc5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    bc60:	mov.w	r4, #4294967295
    bc64:	b.n	bc58 <usb_mtp_recv+0x64>
			return 0;
    bc66:	movs	r4, #0
    bc68:	b.n	bc58 <usb_mtp_recv+0x64>
    bc6a:	nop
    bc6c:	.word	0x20027f40
    bc70:	.word	0x200281a4
    bc74:	.word	0x2002819e
    bc78:	.word	0x20203800
    bc7c:	.word	0x20027888
    bc80:	.word	0x200281ab
    bc84:	.word	0x20028194

0000bc88 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    bc88:	ldr	r3, [pc, #28]	; (bca8 <usb_mtp_available+0x20>)
    bc8a:	ldrb	r3, [r3, #0]
    bc8c:	and.w	r0, r3, #255	; 0xff
    bc90:	cbz	r3, bca6 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    bc92:	ldr	r3, [pc, #24]	; (bcac <usb_mtp_available+0x24>)
    bc94:	ldrb	r2, [r3, #0]
    bc96:	ldr	r3, [pc, #24]	; (bcb0 <usb_mtp_available+0x28>)
    bc98:	ldrb	r3, [r3, #0]
    bc9a:	cmp	r2, r3
    bc9c:	beq.n	bca4 <usb_mtp_available+0x1c>
    bc9e:	ldr	r3, [pc, #20]	; (bcb4 <usb_mtp_available+0x2c>)
    bca0:	ldrh	r0, [r3, #0]
    bca2:	bx	lr
	if (!usb_configuration) return 0;
    bca4:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    bca6:	bx	lr
    bca8:	.word	0x200281ab
    bcac:	.word	0x20028194
    bcb0:	.word	0x200281a4
    bcb4:	.word	0x20027fba

0000bcb8 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    bcb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    bcbc:	ldr	r6, [pc, #164]	; (bd64 <usb_mtp_send+0xac>)
{
    bcbe:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    bcc0:	ldr	r7, [pc, #164]	; (bd68 <usb_mtp_send+0xb0>)
{
    bcc2:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    bcc4:	ldrb	r3, [r6, #0]
{
    bcc6:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    bcc8:	ldr.w	r9, [pc, #168]	; bd74 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    bccc:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bcd0:	ldr.w	fp, [pc, #164]	; bd78 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    bcd4:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    bcd8:	ldrb.w	r3, [fp]
    bcdc:	cmp	r3, #0
    bcde:	beq.n	bd58 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    bce0:	mov	r0, r7
    bce2:	bl	aea4 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    bce6:	lsls	r3, r0, #24
    bce8:	bpl.n	bcfc <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    bcea:	ldr.w	r3, [r9]
    bcee:	sub.w	r3, r3, sl
    bcf2:	cmp	r3, r5
    bcf4:	bhi.n	bd5e <usb_mtp_send+0xa6>
		yield();
    bcf6:	bl	be24 <yield>
	while (1) {
    bcfa:	b.n	bcd8 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    bcfc:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    bcfe:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    bd00:	ldr	r5, [pc, #104]	; (bd6c <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    bd02:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    bd04:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    bd08:	mov	r0, r5
    bd0a:	bl	9c60 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    bd0e:	ldr	r2, [pc, #96]	; (bd70 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bd10:	mov	r3, r5
    bd12:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    bd14:	add	r2, r5
	asm("dsb");
    bd16:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    bd1a:	mov.w	r1, #3758153728	; 0xe000e000
    bd1e:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    bd22:	adds	r3, #32
	} while (location < end_addr);
    bd24:	cmp	r2, r3
    bd26:	bhi.n	bd1e <usb_mtp_send+0x66>
	asm("dsb");
    bd28:	dsb	sy
	asm("isb");
    bd2c:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    bd30:	movs	r3, #0
    bd32:	mov	r2, r4
    bd34:	mov	r1, r5
    bd36:	mov	r0, r7
    bd38:	bl	ae38 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    bd3c:	movs	r0, #4
    bd3e:	mov	r1, r7
    bd40:	bl	ae64 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    bd44:	ldrb	r3, [r6, #0]
	return len;
    bd46:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    bd48:	adds	r3, #1
    bd4a:	uxtb	r3, r3
    bd4c:	cmp	r3, #3
    bd4e:	it	hi
    bd50:	movhi	r3, #0
    bd52:	strb	r3, [r6, #0]
}
    bd54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    bd58:	mov.w	r0, #4294967295
    bd5c:	b.n	bd54 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    bd5e:	movs	r0, #0
    bd60:	b.n	bd54 <usb_mtp_send+0x9c>
    bd62:	nop
    bd64:	.word	0x200281a8
    bd68:	.word	0x2000bd40
    bd6c:	.word	0x20204000
    bd70:	.word	0x2002803e
    bd74:	.word	0x20027f40
    bd78:	.word	0x200281ab

0000bd7c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    bd7c:	ldr	r3, [pc, #68]	; (bdc4 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    bd7e:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    bd80:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    bd84:	ldr	r3, [pc, #64]	; (bdc8 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    bd86:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    bd8a:	cmp	r0, r3
{
    bd8c:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    bd8e:	it	cc
    bd90:	movcc	r3, #10
{
    bd92:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    bd94:	it	cc
    bd96:	mulcc	r0, r3
	ultoa(num, buf, 10);
    bd98:	add	r1, sp, #4
    bd9a:	bl	aecc <ultoa>
	for (i=0; i<10; i++) {
    bd9e:	ldr	r0, [pc, #44]	; (bdcc <usb_init_serialnumber+0x50>)
    bda0:	add	r2, sp, #4
    bda2:	movs	r1, #0
    bda4:	mov	r5, r0
		char c = buf[i];
    bda6:	ldrb.w	r4, [r2], #1
		if (!c) break;
    bdaa:	mov	r3, r1
	for (i=0; i<10; i++) {
    bdac:	adds	r1, #1
		if (!c) break;
    bdae:	cbz	r4, bdba <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    bdb0:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    bdb2:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    bdb6:	bne.n	bda6 <usb_init_serialnumber+0x2a>
    bdb8:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    bdba:	adds	r3, #1
    bdbc:	lsls	r3, r3, #1
    bdbe:	strb	r3, [r5, #0]
}
    bdc0:	add	sp, #20
    bdc2:	pop	{r4, r5, pc}
    bdc4:	.word	0x401f4400
    bdc8:	.word	0x00989680
    bdcc:	.word	0x20009344

0000bdd0 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    bdd0:	ldr	r1, [pc, #68]	; (be18 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    bdd2:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    bdd4:	ldr	r3, [r1, #0]
    bdd6:	cbz	r3, bdec <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    bdd8:	mrs	r3, IPSR
		if (ipsr != 0) return;
    bddc:	cbnz	r3, bdec <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bdde:	mrs	r2, PRIMASK
		__disable_irq();
    bde2:	cpsid	i
		EventResponder *first = firstYield;
    bde4:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    bde6:	cbnz	r0, bdee <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bde8:	cbnz	r2, bdec <EventResponder::runFromYield()+0x1c>
    bdea:	cpsie	i
	}
    bdec:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    bdee:	ldr	r4, [pc, #44]	; (be1c <EventResponder::runFromYield()+0x4c>)
    bdf0:	ldrb	r5, [r4, #0]
    bdf2:	cmp	r5, #0
    bdf4:	bne.n	bde8 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    bdf6:	movs	r3, #1
    bdf8:	strb	r3, [r4, #0]
		firstYield = first->_next;
    bdfa:	ldr	r3, [r0, #20]
    bdfc:	str	r3, [r1, #0]
		if (firstYield) {
    bdfe:	cbz	r3, be12 <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    be00:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    be02:	cbnz	r2, be06 <EventResponder::runFromYield()+0x36>
    be04:	cpsie	i
		first->_triggered = false;
    be06:	movs	r5, #0
		(*(first->_function))(*first);
    be08:	ldr	r3, [r0, #8]
		first->_triggered = false;
    be0a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    be0c:	blx	r3
		runningFromYield = false;
    be0e:	strb	r5, [r4, #0]
    be10:	b.n	bdec <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    be12:	ldr	r1, [pc, #12]	; (be20 <EventResponder::runFromYield()+0x50>)
    be14:	str	r3, [r1, #0]
    be16:	b.n	be02 <EventResponder::runFromYield()+0x32>
    be18:	.word	0x20027204
    be1c:	.word	0x20028105
    be20:	.word	0x20027210

0000be24 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    be24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    be28:	ldr	r3, [pc, #92]	; (be88 <yield+0x64>)
    be2a:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    be2c:	cbz	r4, be56 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    be2e:	ldr	r5, [pc, #92]	; (be8c <yield+0x68>)
    be30:	ldrb	r3, [r5, #0]
    be32:	cbnz	r3, be56 <yield+0x32>
	running = 1;
    be34:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    be36:	lsls	r1, r4, #31
	running = 1;
    be38:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    be3a:	bpl.n	be46 <yield+0x22>
        virtual int available() { return usb_serial_available(); }
    be3c:	bl	a148 <usb_serial_available>
		if (Serial.available()) serialEvent();
    be40:	cbz	r0, be46 <yield+0x22>
    be42:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    be46:	lsls	r2, r4, #30
    be48:	bmi.n	be7c <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    be4a:	movs	r3, #0
    be4c:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    be4e:	lsls	r3, r4, #29
    be50:	bpl.n	be56 <yield+0x32>
		EventResponder::runFromYield();
    be52:	bl	bdd0 <EventResponder::runFromYield()>
	}
};
    be56:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    be5a:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    be5e:	ldr	r3, [r7, #0]
    be60:	mov	r0, r7
    be62:	ldr	r3, [r3, #16]
    be64:	blx	r3
    be66:	cbz	r0, be6e <yield+0x4a>
    be68:	ldr	r3, [r7, #20]
    be6a:	ldr	r3, [r3, #8]
    be6c:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    be6e:	adds	r6, #1
    be70:	ldrb.w	r2, [r8]
    be74:	uxtb	r3, r6
    be76:	cmp	r2, r3
    be78:	bhi.n	be5a <yield+0x36>
    be7a:	b.n	be4a <yield+0x26>
    be7c:	movs	r6, #0
    be7e:	ldr.w	r8, [pc, #16]	; be90 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    be82:	ldr.w	r9, [pc, #16]	; be94 <yield+0x70>
    be86:	b.n	be70 <yield+0x4c>
    be88:	.word	0x200281ae
    be8c:	.word	0x20028107
    be90:	.word	0x20028106
    be94:	.word	0x20027214

0000be98 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    be98:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    be9a:	ldr	r5, [pc, #44]	; (bec8 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    be9c:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    be9e:	ldr	r6, [pc, #44]	; (becc <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bea0:	mrs	r2, PRIMASK
		__disable_irq();
    bea4:	cpsid	i
		EventResponder *first = firstInterrupt;
    bea6:	ldr	r0, [r5, #0]
		if (first) {
    bea8:	cbz	r0, bec2 <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    beaa:	ldr	r3, [r0, #20]
    beac:	str	r3, [r5, #0]
			if (firstInterrupt) {
    beae:	cbz	r3, bebe <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    beb0:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    beb2:	cbnz	r2, beb6 <EventResponder::runFromInterrupt()+0x1e>
    beb4:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    beb6:	ldr	r3, [r0, #8]
			first->_triggered = false;
    beb8:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    beba:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    bebc:	b.n	bea0 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    bebe:	str	r3, [r6, #0]
    bec0:	b.n	beb2 <EventResponder::runFromInterrupt()+0x1a>
    bec2:	cbnz	r2, bec6 <EventResponder::runFromInterrupt()+0x2e>
    bec4:	cpsie	i
}
    bec6:	pop	{r4, r5, r6, pc}
    bec8:	.word	0x2002720c
    becc:	.word	0x20027208

0000bed0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    bed0:	b.w	be98 <EventResponder::runFromInterrupt()>

0000bed4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bed4:	ldr	r3, [pc, #16]	; (bee8 <systick_isr+0x14>)
    bed6:	ldr	r2, [r3, #4]
    bed8:	ldr	r3, [pc, #16]	; (beec <systick_isr+0x18>)
    beda:	str	r2, [r3, #0]
	systick_millis_count++;
    bedc:	ldr	r2, [pc, #16]	; (bef0 <systick_isr+0x1c>)
    bede:	ldr	r3, [r2, #0]
    bee0:	adds	r3, #1
    bee2:	str	r3, [r2, #0]
}
    bee4:	bx	lr
    bee6:	nop
    bee8:	.word	0xe0001000
    beec:	.word	0x20027f3c
    bef0:	.word	0x20027f40

0000bef4 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    bef4:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    bef6:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    bef8:	ldr	r4, [pc, #136]	; (bf84 <DMAChannel::begin(bool)+0x90>)
    befa:	cbnz	r1, bf20 <DMAChannel::begin(bool)+0x2c>
    befc:	ldr	r1, [r0, #0]
    befe:	cbz	r1, bf20 <DMAChannel::begin(bool)+0x2c>
    bf00:	ldrb	r3, [r0, #4]
    bf02:	cmp	r3, #15
    bf04:	bhi.n	bf20 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    bf06:	ldrh	r2, [r4, #0]
    bf08:	asrs	r2, r3
    bf0a:	lsls	r2, r2, #31
    bf0c:	bpl.n	bf20 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    bf0e:	add.w	r3, r3, #33554432	; 0x2000000
    bf12:	add.w	r3, r3, #29824	; 0x7480
    bf16:	cmp.w	r1, r3, lsl #5
    bf1a:	bne.n	bf20 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    bf1c:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    bf1e:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    bf20:	ldrh	r1, [r4, #0]
    bf22:	movs	r3, #0
    bf24:	asr.w	r2, r1, r3
    bf28:	ands.w	r2, r2, #1
    bf2c:	bne.n	bf74 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    bf2e:	movs	r5, #1
    bf30:	lsls	r5, r3
    bf32:	orrs	r1, r5
    bf34:	strh	r1, [r4, #0]
			__enable_irq();
    bf36:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    bf38:	ldr	r5, [pc, #76]	; (bf88 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    bf3a:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf3c:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    bf40:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    bf42:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf44:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    bf48:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf4c:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    bf4e:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    bf50:	movw	r5, #1154	; 0x482
    bf54:	ldr	r1, [pc, #52]	; (bf8c <DMAChannel::begin(bool)+0x98>)
    bf56:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    bf58:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    bf5a:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    bf5c:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    bf5e:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf60:	str	r3, [r0, #0]
	*p++ = 0;
    bf62:	strd	r2, r2, [r3]
	*p++ = 0;
    bf66:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    bf6a:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    bf6e:	strd	r2, r2, [r3, #24]
    bf72:	b.n	bf1e <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    bf74:	adds	r3, #1
    bf76:	cmp	r3, #16
    bf78:	bne.n	bf24 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    bf7a:	cpsie	i
			TCD = (TCD_t *)0;
    bf7c:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    bf7e:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    bf80:	str	r2, [r0, #0]
			return; // no more channels available
    bf82:	b.n	bf1e <DMAChannel::begin(bool)+0x2a>
    bf84:	.word	0x20027f92
    bf88:	.word	0x400fc000
    bf8c:	.word	0x400e8000

0000bf90 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    bf90:	ldrb	r3, [r0, #4]
    bf92:	cmp	r3, #15
    bf94:	bhi.n	bfb6 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    bf96:	ldr	r2, [pc, #32]	; (bfb8 <DMAChannel::release()+0x28>)
    bf98:	strb	r3, [r2, #26]
	__disable_irq();
    bf9a:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    bf9c:	ldr	r1, [pc, #28]	; (bfbc <DMAChannel::release()+0x2c>)
    bf9e:	movs	r2, #1
    bfa0:	ldrb	r3, [r0, #4]
    bfa2:	lsls	r2, r3
    bfa4:	ldrh	r3, [r1, #0]
    bfa6:	bic.w	r3, r3, r2
    bfaa:	strh	r3, [r1, #0]
	__enable_irq();
    bfac:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    bfae:	movs	r3, #16
    bfb0:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    bfb2:	movs	r3, #0
    bfb4:	str	r3, [r0, #0]
}
    bfb6:	bx	lr
    bfb8:	.word	0x400e8000
    bfbc:	.word	0x20027f92

0000bfc0 <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    bfc0:	push	{r3, lr}
    bfc2:	bl	c9e <Print::write(char const*)>
    bfc6:	pop	{r3, pc}

0000bfc8 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    bfc8:	movs	r3, #0
    bfca:	movs	r2, #10
    bfcc:	b.w	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000bfd0 <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    bfd0:	movs	r3, #0
    bfd2:	uxtb	r2, r2
    bfd4:	b.w	c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000bfd8 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    bfd8:	push	{r3, r4, r5, lr}
    bfda:	mov	r5, r0
    bfdc:	bl	bfd0 <Print::print(unsigned long, int)>
    bfe0:	mov	r4, r0
    bfe2:	mov	r0, r5
    bfe4:	bl	c12c <Print::println()>
    bfe8:	add	r0, r4
    bfea:	pop	{r3, r4, r5, pc}

0000bfec <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    bfec:	movs	r2, #0
    bfee:	movs	r3, #1
    bff0:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    bff2:	push	{r4, lr}
		while (len > 0) {
    bff4:	cmp	r1, #0
    bff6:	sub.w	r4, r0, r1
    bffa:	bgt.n	c004 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    bffc:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    bffe:	orr.w	r0, r3, r2, lsl #16
    c002:	pop	{r4, pc}
			a += *p++;
    c004:	ldrh	r4, [r4, #0]
			len -= 2;
    c006:	subs	r1, #2
			a += *p++;
    c008:	uxtah	r3, r3, r4
			b += a;
    c00c:	add	r2, r3
			len -= 2;
    c00e:	b.n	bff4 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c010 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c010:	b.w	a15c <usb_serial_flush_input>

0000c014 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c014:	b.w	a104 <usb_serial_peekchar>

0000c018 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c018:	b.w	a1bc <usb_serial_getchar>

0000c01c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c01c:	b.w	a148 <usb_serial_available>

0000c020 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c020:	b.w	a3cc <usb_serial_flush_output>

0000c024 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c024:	b.w	a380 <usb_serial_write_buffer_free>

0000c028 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c028:	mov	r0, r1
    c02a:	mov	r1, r2
    c02c:	b.w	a1dc <usb_serial_write>

0000c030 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c030:	mov	r0, r1
    c032:	b.w	a368 <usb_serial_putchar>

0000c036 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c036:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c038:	bl	74c <setup>
	while (1) {
		loop();
    c03c:	bl	248 <loop>
		yield();
    c040:	bl	be24 <yield>
	while (1) {
    c044:	b.n	c03c <main+0x6>
	...

0000c048 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c048:	push	{r4, r5, r6, lr}
    c04a:	ldr	r5, [pc, #36]	; (c070 <Stream::timedRead()+0x28>)
    c04c:	mov	r4, r0
    c04e:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c050:	ldr	r3, [r4, #0]
    c052:	mov	r0, r4
    c054:	ldr	r3, [r3, #20]
    c056:	blx	r3
    if (c >= 0) return c;
    c058:	cmp	r0, #0
    c05a:	bge.n	c06e <Stream::timedRead()+0x26>
    yield();
    c05c:	bl	be24 <yield>
    c060:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c062:	ldr	r2, [r4, #8]
    c064:	subs	r3, r3, r6
    c066:	cmp	r3, r2
    c068:	bcc.n	c050 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c06a:	mov.w	r0, #4294967295
}
    c06e:	pop	{r4, r5, r6, pc}
    c070:	.word	0x20027f40

0000c074 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c074:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c078:	mov	r6, r0
    c07a:	mov	r7, r1
    c07c:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c07e:	mov	r5, r2
    c080:	cbz	r2, c0b2 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c082:	cbz	r3, c0a4 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c084:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c088:	movs	r4, #0
	while (index < length) {
    c08a:	cmp	r4, r8
    c08c:	bcs.n	c0a0 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c08e:	mov	r0, r6
    c090:	bl	c048 <Stream::timedRead()>
		if (c == terminator) break;
    c094:	cmp	r7, r0
    c096:	beq.n	c0a0 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c098:	cmp	r0, #0
    c09a:	bge.n	c0aa <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c09c:	movs	r3, #1
    c09e:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c0a0:	movs	r3, #0
    c0a2:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c0a4:	mov	r0, r4
    c0a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c0aa:	adds	r4, #1
		*buffer++ = (char)c;
    c0ac:	strb.w	r0, [r5], #1
		index++;
    c0b0:	b.n	c08a <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c0b2:	mov	r4, r2
    c0b4:	b.n	c0a4 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c0b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c0b6:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c0b8:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c0ba:	it	eq
    c0bc:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c0be:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c0c0:	cbnz	r1, c0ee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c0c2:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c0c4:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c0c6:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c0ca:	cbz	r3, c0dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c0cc:	subs	r3, r4, #1
		buf[i] = '-';
    c0ce:	add	r2, sp, #40	; 0x28
		i--;
    c0d0:	uxtb	r4, r3
		buf[i] = '-';
    c0d2:	uxtab	r3, r2, r3
    c0d6:	movs	r2, #45	; 0x2d
    c0d8:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c0dc:	ldr	r3, [r0, #0]
    c0de:	add	r1, sp, #4
    c0e0:	rsb	r2, r4, #34	; 0x22
    c0e4:	ldr	r3, [r3, #4]
    c0e6:	add	r1, r4
    c0e8:	blx	r3
}
    c0ea:	add	sp, #44	; 0x2c
    c0ec:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c0ee:	movs	r4, #33	; 0x21
			digit = n % base;
    c0f0:	udiv	r6, r1, r2
    c0f4:	mls	r7, r2, r6, r1
    c0f8:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c0fa:	cmp	r7, #9
    c0fc:	add.w	r7, r4, #40	; 0x28
    c100:	ite	ls
    c102:	addls	r5, #48	; 0x30
    c104:	addhi	r5, #55	; 0x37
    c106:	add	r7, sp
			if (n == 0) break;
    c108:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c10a:	uxtb	r5, r5
    c10c:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c110:	bhi.n	c0ca <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c112:	subs	r4, #1
			n /= base;
    c114:	mov	r1, r6
			i--;
    c116:	uxtb	r4, r4
			digit = n % base;
    c118:	b.n	c0f0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c11a <Print::print(long)>:
	if (n < 0) {
    c11a:	cmp	r1, #0
		n = -n;
    c11c:	mov.w	r2, #10
    c120:	itte	lt
    c122:	neglt	r1, r1
		sign = '-';
    c124:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    c126:	movge	r3, #0
	if (base == 0) {
    c128:	b.w	c0b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c12c <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c12c:	movw	r3, #2573	; 0xa0d
{
    c130:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c132:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c136:	movs	r2, #2
    c138:	ldr	r3, [r0, #0]
    c13a:	add	r1, sp, #4
    c13c:	ldr	r3, [r3, #4]
    c13e:	blx	r3
}
    c140:	add	sp, #12
    c142:	ldr.w	pc, [sp], #4
	...

0000c148 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c148:	ldr	r3, [pc, #20]	; (c160 <_write+0x18>)
    c14a:	cmp	r0, #2
    c14c:	it	hi
    c14e:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c150:	ldr	r0, [r3, #0]
{
    c152:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c154:	ldr	r4, [r0, #4]
    c156:	mov	r0, r3
    c158:	mov	r3, r4
}
    c15a:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c15e:	bx	r3
    c160:	.word	0x200089a4

0000c164 <Print::printf(char const*, ...)>:
{
    c164:	push	{r1, r2, r3}
    c166:	push	{r0, r1, lr}
    c168:	add	r2, sp, #12
    c16a:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c16e:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c170:	bl	e388 <vdprintf>
}
    c174:	add	sp, #8
    c176:	ldr.w	lr, [sp], #4
    c17a:	add	sp, #12
    c17c:	bx	lr

0000c17e <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c17e:	push	{r4, r5}
	if (base == 0) {
    c180:	cbnz	r2, c18c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c182:	ldr	r3, [r0, #0]
    c184:	uxtb	r1, r1
    c186:	ldr	r3, [r3, #0]
}
    c188:	pop	{r4, r5}
		return write((uint8_t)n);
    c18a:	bx	r3
}
    c18c:	pop	{r4, r5}
    c18e:	b.w	c0b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c192 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c192:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c196:	sub	sp, #72	; 0x48
    c198:	mov	r8, r0
    c19a:	mov	r7, r2
    c19c:	mov	r6, r3
    c19e:	ldrb.w	r9, [sp, #104]	; 0x68
    c1a2:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c1a6:	cmp.w	r9, #1
    c1aa:	bls.n	c21e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c1ac:	orrs.w	r3, r2, r6
    c1b0:	bne.n	c1e8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c1b2:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c1b4:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c1b6:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c1ba:	cmp.w	sl, #0
    c1be:	beq.n	c1d0 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c1c0:	subs	r3, r5, #1
		buf[i] = '-';
    c1c2:	add	r2, sp, #72	; 0x48
		i--;
    c1c4:	uxtb	r5, r3
		buf[i] = '-';
    c1c6:	uxtab	r3, r2, r3
    c1ca:	movs	r2, #45	; 0x2d
    c1cc:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c1d0:	ldr.w	r3, [r8]
    c1d4:	add	r1, sp, #4
    c1d6:	rsb	r2, r5, #66	; 0x42
    c1da:	mov	r0, r8
    c1dc:	ldr	r3, [r3, #4]
    c1de:	add	r1, r5
    c1e0:	blx	r3
}
    c1e2:	add	sp, #72	; 0x48
    c1e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c1e8:	movs	r5, #65	; 0x41
			digit = n % base;
    c1ea:	mov	r1, r6
    c1ec:	mov	r2, r9
    c1ee:	movs	r3, #0
    c1f0:	mov	r0, r7
    c1f2:	bl	c364 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c1f6:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    c1fa:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c1fc:	add	r3, sp
    c1fe:	cmp	r4, #9
    c200:	ite	ls
    c202:	addls	r4, #48	; 0x30
    c204:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    c206:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c208:	uxtb	r4, r4
			if (n == 0) break;
    c20a:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c20e:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c212:	bcc.n	c1ba <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c214:	subs	r5, #1
			n /= base;
    c216:	mov	r7, r0
    c218:	mov	r6, r1
			i--;
    c21a:	uxtb	r5, r5
			digit = n % base;
    c21c:	b.n	c1ea <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c21e:	movs	r0, #0
    c220:	b.n	c1e2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
    c222:	movs	r0, r0
    c224:	movs	r0, r0
	...

0000c228 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c228:	vcmp.f64	d0, d0
{
    c22c:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c22e:	vmrs	APSR_nzcv, fpscr
{
    c232:	mov	r6, r0
    c234:	mov	r5, r1
    c236:	vpush	{d8-d9}
    c23a:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c23c:	bvc.n	c250 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c23e:	ldr	r1, [pc, #264]	; (c348 <Print::printFloat(double, unsigned char)+0x120>)
    c240:	bl	c9e <Print::write(char const*)>
    c244:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c246:	mov	r0, r4
    c248:	add	sp, #28
    c24a:	vpop	{d8-d9}
    c24e:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c250:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c254:	vldr	d6, [pc, #208]	; c328 <Print::printFloat(double, unsigned char)+0x100>
    c258:	vcmp.f64	d7, d6
    c25c:	vmrs	APSR_nzcv, fpscr
    c260:	ble.n	c266 <Print::printFloat(double, unsigned char)+0x3e>
    c262:	ldr	r1, [pc, #232]	; (c34c <Print::printFloat(double, unsigned char)+0x124>)
    c264:	b.n	c240 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c266:	vldr	d7, [pc, #200]	; c330 <Print::printFloat(double, unsigned char)+0x108>
    c26a:	vcmpe.f64	d0, d7
    c26e:	vmrs	APSR_nzcv, fpscr
    c272:	ble.n	c27a <Print::printFloat(double, unsigned char)+0x52>
    c274:	ldr	r1, [pc, #216]	; (c350 <Print::printFloat(double, unsigned char)+0x128>)
    c276:	mov	r0, r6
    c278:	b.n	c240 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c27a:	vldr	d7, [pc, #188]	; c338 <Print::printFloat(double, unsigned char)+0x110>
    c27e:	vcmpe.f64	d0, d7
    c282:	vmrs	APSR_nzcv, fpscr
    c286:	bmi.n	c274 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c288:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c28c:	movs	r2, #0
	double rounding = 0.5;
    c28e:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    c292:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c296:	vldr	d6, [pc, #168]	; c340 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c29a:	itte	mi
    c29c:	vnegmi.f64	d0, d0
		sign = 1;
    c2a0:	movmi	r3, #1
	uint8_t sign=0;
    c2a2:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c2a4:	uxtb	r1, r2
    c2a6:	cmp	r5, r1
    c2a8:	bhi.n	c2f8 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    c2aa:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c2ae:	movs	r2, #10
    c2b0:	mov	r0, r6
    c2b2:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c2b6:	vmov	r1, s18
    c2ba:	bl	c0b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c2be:	mov	r4, r0
	if (digits > 0) {
    c2c0:	cmp	r5, #0
    c2c2:	beq.n	c246 <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    c2c4:	vcvt.f64.u32	d0, s18
    c2c8:	cmp	r5, #15
    c2ca:	add	r0, sp, #8
			remainder *= 10.0;
    c2cc:	vmov.f64	d6, #36	; 0x41200000  10.0
    c2d0:	it	cs
    c2d2:	movcs	r5, #15
		buf[0] = '.';
    c2d4:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    c2d6:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    c2da:	mov	r1, r0
    c2dc:	mov	r2, r5
    c2de:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c2e2:	subs	r2, #1
    c2e4:	uxtb	r2, r2
    c2e6:	cmp	r2, #255	; 0xff
    c2e8:	bne.n	c300 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    c2ea:	adds	r5, #1
    c2ec:	ldr	r3, [r6, #0]
    c2ee:	mov	r0, r6
    c2f0:	ldr	r3, [r3, #4]
    c2f2:	uxtb	r2, r5
    c2f4:	blx	r3
    c2f6:	b.n	c246 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c2f8:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c2fc:	adds	r2, #1
    c2fe:	b.n	c2a4 <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    c300:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    c304:	vcvt.u32.f64	s15, d0
    c308:	vstr	s15, [sp, #4]
    c30c:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    c310:	vmov	s15, r3
			buf[count++] = '0' + n;
    c314:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    c318:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c31c:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c320:	vsub.f64	d0, d0, d7
    c324:	b.n	c2e2 <Print::printFloat(double, unsigned char)+0xba>
    c326:	nop
    c328:	.word	0xffffffff
    c32c:	.word	0x7fefffff
    c330:	.word	0xe0000000
    c334:	.word	0x41efffff
    c338:	.word	0xe0000000
    c33c:	.word	0xc1efffff
    c340:	.word	0xa0000000
    c344:	.word	0x3fb99999
    c348:	.word	0x20007f70
    c34c:	.word	0x20007f74
    c350:	.word	0x20007f78

0000c354 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    c354:	b.w	c670 <free>

0000c358 <__aeabi_atexit>:
    c358:	mov	r3, r0
    c35a:	mov	r0, r1
    c35c:	mov	r1, r3
    c35e:	b.w	dfac <__cxa_atexit>
    c362:	nop

0000c364 <__aeabi_uldivmod>:
    c364:	cbnz	r3, c37c <__aeabi_uldivmod+0x18>
    c366:	cbnz	r2, c37c <__aeabi_uldivmod+0x18>
    c368:	cmp	r1, #0
    c36a:	it	eq
    c36c:	cmpeq	r0, #0
    c36e:	itt	ne
    c370:	movne.w	r1, #4294967295
    c374:	movne.w	r0, #4294967295
    c378:	b.w	c65c <__aeabi_idiv0>
    c37c:	sub.w	ip, sp, #8
    c380:	strd	ip, lr, [sp, #-16]!
    c384:	bl	c394 <__udivmoddi4>
    c388:	ldr.w	lr, [sp, #4]
    c38c:	ldrd	r2, r3, [sp, #8]
    c390:	add	sp, #16
    c392:	bx	lr

0000c394 <__udivmoddi4>:
    c394:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c398:	ldr	r6, [sp, #32]
    c39a:	mov	r5, r1
    c39c:	mov	r4, r0
    c39e:	mov	r7, r1
    c3a0:	cmp	r3, #0
    c3a2:	bne.n	c43a <__udivmoddi4+0xa6>
    c3a4:	cmp	r2, r1
    c3a6:	mov	ip, r2
    c3a8:	bls.n	c476 <__udivmoddi4+0xe2>
    c3aa:	clz	r3, r2
    c3ae:	cbz	r3, c3c2 <__udivmoddi4+0x2e>
    c3b0:	lsl.w	ip, r2, r3
    c3b4:	rsb	r2, r3, #32
    c3b8:	lsls	r7, r3
    c3ba:	lsr.w	r2, r0, r2
    c3be:	orrs	r7, r2
    c3c0:	lsls	r4, r3
    c3c2:	mov.w	lr, ip, lsr #16
    c3c6:	uxth.w	r5, ip
    c3ca:	udiv	r1, r7, lr
    c3ce:	lsrs	r2, r4, #16
    c3d0:	mls	r7, lr, r1, r7
    c3d4:	orr.w	r2, r2, r7, lsl #16
    c3d8:	mul.w	r0, r1, r5
    c3dc:	cmp	r0, r2
    c3de:	bls.n	c3f6 <__udivmoddi4+0x62>
    c3e0:	adds.w	r2, ip, r2
    c3e4:	add.w	r7, r1, #4294967295
    c3e8:	bcs.w	c624 <__udivmoddi4+0x290>
    c3ec:	cmp	r0, r2
    c3ee:	bls.w	c624 <__udivmoddi4+0x290>
    c3f2:	subs	r1, #2
    c3f4:	add	r2, ip
    c3f6:	subs	r2, r2, r0
    c3f8:	uxth	r4, r4
    c3fa:	udiv	r0, r2, lr
    c3fe:	mls	r2, lr, r0, r2
    c402:	orr.w	r4, r4, r2, lsl #16
    c406:	mul.w	r5, r0, r5
    c40a:	cmp	r5, r4
    c40c:	bls.n	c424 <__udivmoddi4+0x90>
    c40e:	adds.w	r4, ip, r4
    c412:	add.w	r2, r0, #4294967295
    c416:	bcs.w	c628 <__udivmoddi4+0x294>
    c41a:	cmp	r5, r4
    c41c:	bls.w	c628 <__udivmoddi4+0x294>
    c420:	add	r4, ip
    c422:	subs	r0, #2
    c424:	orr.w	r0, r0, r1, lsl #16
    c428:	subs	r4, r4, r5
    c42a:	movs	r1, #0
    c42c:	cbz	r6, c436 <__udivmoddi4+0xa2>
    c42e:	lsrs	r4, r3
    c430:	movs	r3, #0
    c432:	strd	r4, r3, [r6]
    c436:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c43a:	cmp	r3, r1
    c43c:	bls.n	c450 <__udivmoddi4+0xbc>
    c43e:	cmp	r6, #0
    c440:	beq.w	c61e <__udivmoddi4+0x28a>
    c444:	movs	r1, #0
    c446:	strd	r0, r5, [r6]
    c44a:	mov	r0, r1
    c44c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c450:	clz	r1, r3
    c454:	cmp	r1, #0
    c456:	bne.n	c4ec <__udivmoddi4+0x158>
    c458:	cmp	r3, r5
    c45a:	bcc.n	c462 <__udivmoddi4+0xce>
    c45c:	cmp	r2, r0
    c45e:	bhi.w	c652 <__udivmoddi4+0x2be>
    c462:	subs	r4, r0, r2
    c464:	sbc.w	r2, r5, r3
    c468:	movs	r0, #1
    c46a:	mov	r7, r2
    c46c:	cmp	r6, #0
    c46e:	beq.n	c436 <__udivmoddi4+0xa2>
    c470:	strd	r4, r7, [r6]
    c474:	b.n	c436 <__udivmoddi4+0xa2>
    c476:	cbnz	r2, c47a <__udivmoddi4+0xe6>
    c478:	udf	#255	; 0xff
    c47a:	clz	r3, r2
    c47e:	cmp	r3, #0
    c480:	bne.w	c5a4 <__udivmoddi4+0x210>
    c484:	subs	r2, r1, r2
    c486:	mov.w	r7, ip, lsr #16
    c48a:	uxth.w	lr, ip
    c48e:	movs	r1, #1
    c490:	udiv	r5, r2, r7
    c494:	mls	r0, r7, r5, r2
    c498:	lsrs	r2, r4, #16
    c49a:	orr.w	r2, r2, r0, lsl #16
    c49e:	mul.w	r0, lr, r5
    c4a2:	cmp	r0, r2
    c4a4:	bls.n	c4b8 <__udivmoddi4+0x124>
    c4a6:	adds.w	r2, ip, r2
    c4aa:	add.w	r8, r5, #4294967295
    c4ae:	bcs.n	c4b6 <__udivmoddi4+0x122>
    c4b0:	cmp	r0, r2
    c4b2:	bhi.w	c64c <__udivmoddi4+0x2b8>
    c4b6:	mov	r5, r8
    c4b8:	subs	r2, r2, r0
    c4ba:	uxth	r4, r4
    c4bc:	udiv	r0, r2, r7
    c4c0:	mls	r2, r7, r0, r2
    c4c4:	orr.w	r4, r4, r2, lsl #16
    c4c8:	mul.w	lr, lr, r0
    c4cc:	cmp	lr, r4
    c4ce:	bls.n	c4e2 <__udivmoddi4+0x14e>
    c4d0:	adds.w	r4, ip, r4
    c4d4:	add.w	r2, r0, #4294967295
    c4d8:	bcs.n	c4e0 <__udivmoddi4+0x14c>
    c4da:	cmp	lr, r4
    c4dc:	bhi.w	c656 <__udivmoddi4+0x2c2>
    c4e0:	mov	r0, r2
    c4e2:	sub.w	r4, r4, lr
    c4e6:	orr.w	r0, r0, r5, lsl #16
    c4ea:	b.n	c42c <__udivmoddi4+0x98>
    c4ec:	rsb	r7, r1, #32
    c4f0:	lsls	r3, r1
    c4f2:	lsr.w	ip, r2, r7
    c4f6:	orr.w	ip, ip, r3
    c4fa:	lsl.w	r4, r5, r1
    c4fe:	lsr.w	r3, r0, r7
    c502:	lsrs	r5, r7
    c504:	mov.w	r9, ip, lsr #16
    c508:	orrs	r3, r4
    c50a:	udiv	r8, r5, r9
    c50e:	uxth.w	lr, ip
    c512:	mls	r5, r9, r8, r5
    c516:	lsrs	r4, r3, #16
    c518:	orr.w	r4, r4, r5, lsl #16
    c51c:	mul.w	r5, r8, lr
    c520:	cmp	r5, r4
    c522:	lsl.w	r2, r2, r1
    c526:	lsl.w	r0, r0, r1
    c52a:	bls.n	c544 <__udivmoddi4+0x1b0>
    c52c:	adds.w	r4, ip, r4
    c530:	add.w	sl, r8, #4294967295
    c534:	bcs.w	c648 <__udivmoddi4+0x2b4>
    c538:	cmp	r5, r4
    c53a:	bls.w	c648 <__udivmoddi4+0x2b4>
    c53e:	sub.w	r8, r8, #2
    c542:	add	r4, ip
    c544:	subs	r4, r4, r5
    c546:	uxth	r5, r3
    c548:	udiv	r3, r4, r9
    c54c:	mls	r4, r9, r3, r4
    c550:	orr.w	r4, r5, r4, lsl #16
    c554:	mul.w	lr, r3, lr
    c558:	cmp	lr, r4
    c55a:	bls.n	c56e <__udivmoddi4+0x1da>
    c55c:	adds.w	r4, ip, r4
    c560:	add.w	r5, r3, #4294967295
    c564:	bcs.n	c640 <__udivmoddi4+0x2ac>
    c566:	cmp	lr, r4
    c568:	bls.n	c640 <__udivmoddi4+0x2ac>
    c56a:	subs	r3, #2
    c56c:	add	r4, ip
    c56e:	orr.w	r3, r3, r8, lsl #16
    c572:	umull	r9, r5, r3, r2
    c576:	sub.w	r4, r4, lr
    c57a:	cmp	r4, r5
    c57c:	mov	r8, r9
    c57e:	mov	lr, r5
    c580:	bcc.n	c630 <__udivmoddi4+0x29c>
    c582:	beq.n	c62c <__udivmoddi4+0x298>
    c584:	cbz	r6, c59c <__udivmoddi4+0x208>
    c586:	subs.w	r2, r0, r8
    c58a:	sbc.w	r4, r4, lr
    c58e:	lsl.w	r7, r4, r7
    c592:	lsrs	r2, r1
    c594:	lsrs	r4, r1
    c596:	orrs	r7, r2
    c598:	strd	r7, r4, [r6]
    c59c:	mov	r0, r3
    c59e:	movs	r1, #0
    c5a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5a4:	rsb	r1, r3, #32
    c5a8:	lsl.w	ip, r2, r3
    c5ac:	lsr.w	r2, r0, r1
    c5b0:	lsr.w	r1, r5, r1
    c5b4:	lsls	r5, r3
    c5b6:	orrs	r2, r5
    c5b8:	mov.w	r7, ip, lsr #16
    c5bc:	uxth.w	lr, ip
    c5c0:	udiv	r0, r1, r7
    c5c4:	mls	r5, r7, r0, r1
    c5c8:	lsrs	r1, r2, #16
    c5ca:	orr.w	r1, r1, r5, lsl #16
    c5ce:	mul.w	r5, r0, lr
    c5d2:	cmp	r5, r1
    c5d4:	lsl.w	r4, r4, r3
    c5d8:	bls.n	c5ec <__udivmoddi4+0x258>
    c5da:	adds.w	r1, ip, r1
    c5de:	add.w	r8, r0, #4294967295
    c5e2:	bcs.n	c644 <__udivmoddi4+0x2b0>
    c5e4:	cmp	r5, r1
    c5e6:	bls.n	c644 <__udivmoddi4+0x2b0>
    c5e8:	subs	r0, #2
    c5ea:	add	r1, ip
    c5ec:	subs	r1, r1, r5
    c5ee:	uxth	r2, r2
    c5f0:	udiv	r5, r1, r7
    c5f4:	mls	r1, r7, r5, r1
    c5f8:	orr.w	r2, r2, r1, lsl #16
    c5fc:	mul.w	r1, r5, lr
    c600:	cmp	r1, r2
    c602:	bls.n	c616 <__udivmoddi4+0x282>
    c604:	adds.w	r2, ip, r2
    c608:	add.w	r8, r5, #4294967295
    c60c:	bcs.n	c63c <__udivmoddi4+0x2a8>
    c60e:	cmp	r1, r2
    c610:	bls.n	c63c <__udivmoddi4+0x2a8>
    c612:	subs	r5, #2
    c614:	add	r2, ip
    c616:	subs	r2, r2, r1
    c618:	orr.w	r1, r5, r0, lsl #16
    c61c:	b.n	c490 <__udivmoddi4+0xfc>
    c61e:	mov	r1, r6
    c620:	mov	r0, r6
    c622:	b.n	c436 <__udivmoddi4+0xa2>
    c624:	mov	r1, r7
    c626:	b.n	c3f6 <__udivmoddi4+0x62>
    c628:	mov	r0, r2
    c62a:	b.n	c424 <__udivmoddi4+0x90>
    c62c:	cmp	r0, r9
    c62e:	bcs.n	c584 <__udivmoddi4+0x1f0>
    c630:	subs.w	r8, r9, r2
    c634:	sbc.w	lr, r5, ip
    c638:	subs	r3, #1
    c63a:	b.n	c584 <__udivmoddi4+0x1f0>
    c63c:	mov	r5, r8
    c63e:	b.n	c616 <__udivmoddi4+0x282>
    c640:	mov	r3, r5
    c642:	b.n	c56e <__udivmoddi4+0x1da>
    c644:	mov	r0, r8
    c646:	b.n	c5ec <__udivmoddi4+0x258>
    c648:	mov	r8, sl
    c64a:	b.n	c544 <__udivmoddi4+0x1b0>
    c64c:	subs	r5, #2
    c64e:	add	r2, ip
    c650:	b.n	c4b8 <__udivmoddi4+0x124>
    c652:	mov	r0, r1
    c654:	b.n	c46c <__udivmoddi4+0xd8>
    c656:	add	r4, ip
    c658:	subs	r0, #2
    c65a:	b.n	c4e2 <__udivmoddi4+0x14e>

0000c65c <__aeabi_idiv0>:
    c65c:	bx	lr
    c65e:	nop

0000c660 <malloc>:
    c660:	ldr	r3, [pc, #8]	; (c66c <malloc+0xc>)
    c662:	mov	r1, r0
    c664:	ldr	r0, [r3, #0]
    c666:	b.w	c680 <_malloc_r>
    c66a:	nop
    c66c:	.word	0x2000930c

0000c670 <free>:
    c670:	ldr	r3, [pc, #8]	; (c67c <free+0xc>)
    c672:	mov	r1, r0
    c674:	ldr	r0, [r3, #0]
    c676:	b.w	eea4 <_free_r>
    c67a:	nop
    c67c:	.word	0x2000930c

0000c680 <_malloc_r>:
    c680:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c684:	add.w	r6, r1, #11
    c688:	cmp	r6, #22
    c68a:	sub	sp, #12
    c68c:	mov	r4, r0
    c68e:	bhi.n	c6da <_malloc_r+0x5a>
    c690:	cmp	r1, #16
    c692:	bhi.w	c80a <_malloc_r+0x18a>
    c696:	bl	cbe0 <__malloc_lock>
    c69a:	movs	r6, #16
    c69c:	movs	r2, #24
    c69e:	movs	r0, #2
    c6a0:	ldr	r7, [pc, #724]	; (c978 <_malloc_r+0x2f8>)
    c6a2:	add	r2, r7
    c6a4:	sub.w	r1, r2, #8
    c6a8:	ldr	r3, [r2, #4]
    c6aa:	cmp	r3, r1
    c6ac:	beq.w	c824 <_malloc_r+0x1a4>
    c6b0:	ldr	r2, [r3, #4]
    c6b2:	ldr	r1, [r3, #12]
    c6b4:	bic.w	r2, r2, #3
    c6b8:	add	r2, r3
    c6ba:	ldr	r5, [r3, #8]
    c6bc:	str	r1, [r5, #12]
    c6be:	str	r5, [r1, #8]
    c6c0:	ldr	r1, [r2, #4]
    c6c2:	orr.w	r1, r1, #1
    c6c6:	mov	r0, r4
    c6c8:	str	r1, [r2, #4]
    c6ca:	add.w	r5, r3, #8
    c6ce:	bl	cbec <__malloc_unlock>
    c6d2:	mov	r0, r5
    c6d4:	add	sp, #12
    c6d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6da:	bics.w	r6, r6, #7
    c6de:	bmi.w	c80a <_malloc_r+0x18a>
    c6e2:	cmp	r1, r6
    c6e4:	bhi.w	c80a <_malloc_r+0x18a>
    c6e8:	bl	cbe0 <__malloc_lock>
    c6ec:	cmp.w	r6, #504	; 0x1f8
    c6f0:	bcc.w	ca28 <_malloc_r+0x3a8>
    c6f4:	lsrs	r3, r6, #9
    c6f6:	beq.w	c818 <_malloc_r+0x198>
    c6fa:	cmp	r3, #4
    c6fc:	bhi.w	c9de <_malloc_r+0x35e>
    c700:	lsrs	r3, r6, #6
    c702:	add.w	r0, r3, #57	; 0x39
    c706:	add.w	ip, r3, #56	; 0x38
    c70a:	lsls	r3, r0, #3
    c70c:	ldr	r7, [pc, #616]	; (c978 <_malloc_r+0x2f8>)
    c70e:	add	r3, r7
    c710:	sub.w	r5, r3, #8
    c714:	ldr	r3, [r3, #4]
    c716:	cmp	r5, r3
    c718:	bne.n	c728 <_malloc_r+0xa8>
    c71a:	b.n	c736 <_malloc_r+0xb6>
    c71c:	cmp	r1, #0
    c71e:	bge.w	c970 <_malloc_r+0x2f0>
    c722:	ldr	r3, [r3, #12]
    c724:	cmp	r5, r3
    c726:	beq.n	c736 <_malloc_r+0xb6>
    c728:	ldr	r2, [r3, #4]
    c72a:	bic.w	r2, r2, #3
    c72e:	subs	r1, r2, r6
    c730:	cmp	r1, #15
    c732:	ble.n	c71c <_malloc_r+0x9c>
    c734:	mov	r0, ip
    c736:	ldr	r5, [r7, #16]
    c738:	ldr.w	ip, [pc, #592]	; c98c <_malloc_r+0x30c>
    c73c:	cmp	r5, ip
    c73e:	beq.n	c83a <_malloc_r+0x1ba>
    c740:	ldr	r2, [r5, #4]
    c742:	bic.w	r2, r2, #3
    c746:	subs	r3, r2, r6
    c748:	cmp	r3, #15
    c74a:	bgt.w	ca44 <_malloc_r+0x3c4>
    c74e:	cmp	r3, #0
    c750:	strd	ip, ip, [r7, #16]
    c754:	bge.w	ca30 <_malloc_r+0x3b0>
    c758:	cmp.w	r2, #512	; 0x200
    c75c:	bcs.w	c994 <_malloc_r+0x314>
    c760:	lsrs	r3, r2, #3
    c762:	ldr	r1, [r7, #4]
    c764:	adds	r3, #1
    c766:	mov.w	lr, r2, lsr #5
    c76a:	movs	r2, #1
    c76c:	lsl.w	r2, r2, lr
    c770:	orrs	r2, r1
    c772:	ldr.w	lr, [r7, r3, lsl #3]
    c776:	str.w	lr, [r5, #8]
    c77a:	add.w	r1, r7, r3, lsl #3
    c77e:	subs	r1, #8
    c780:	str	r1, [r5, #12]
    c782:	str	r2, [r7, #4]
    c784:	str.w	r5, [r7, r3, lsl #3]
    c788:	str.w	r5, [lr, #12]
    c78c:	asrs	r3, r0, #2
    c78e:	movs	r1, #1
    c790:	lsls	r1, r3
    c792:	cmp	r1, r2
    c794:	bhi.n	c846 <_malloc_r+0x1c6>
    c796:	tst	r1, r2
    c798:	bne.n	c7a8 <_malloc_r+0x128>
    c79a:	bic.w	r0, r0, #3
    c79e:	lsls	r1, r1, #1
    c7a0:	tst	r1, r2
    c7a2:	add.w	r0, r0, #4
    c7a6:	beq.n	c79e <_malloc_r+0x11e>
    c7a8:	add.w	r9, r7, r0, lsl #3
    c7ac:	mov	r5, r9
    c7ae:	mov	lr, r0
    c7b0:	ldr.w	r8, [r5, #12]
    c7b4:	cmp	r5, r8
    c7b6:	bne.n	c7ca <_malloc_r+0x14a>
    c7b8:	b.n	c9f6 <_malloc_r+0x376>
    c7ba:	cmp	r3, #0
    c7bc:	bge.w	ca08 <_malloc_r+0x388>
    c7c0:	ldr.w	r8, [r8, #12]
    c7c4:	cmp	r5, r8
    c7c6:	beq.w	c9f6 <_malloc_r+0x376>
    c7ca:	ldr.w	r2, [r8, #4]
    c7ce:	bic.w	r2, r2, #3
    c7d2:	subs	r3, r2, r6
    c7d4:	cmp	r3, #15
    c7d6:	ble.n	c7ba <_malloc_r+0x13a>
    c7d8:	mov	r0, r4
    c7da:	ldrd	r5, r4, [r8, #8]
    c7de:	add.w	r1, r8, r6
    c7e2:	orr.w	r6, r6, #1
    c7e6:	str.w	r6, [r8, #4]
    c7ea:	str	r4, [r5, #12]
    c7ec:	str	r5, [r4, #8]
    c7ee:	orr.w	r4, r3, #1
    c7f2:	strd	r1, r1, [r7, #16]
    c7f6:	strd	ip, ip, [r1, #8]
    c7fa:	str	r4, [r1, #4]
    c7fc:	str.w	r3, [r8, r2]
    c800:	bl	cbec <__malloc_unlock>
    c804:	add.w	r5, r8, #8
    c808:	b.n	c810 <_malloc_r+0x190>
    c80a:	movs	r3, #12
    c80c:	str	r3, [r4, #0]
    c80e:	movs	r5, #0
    c810:	mov	r0, r5
    c812:	add	sp, #12
    c814:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c818:	mov.w	r3, #512	; 0x200
    c81c:	movs	r0, #64	; 0x40
    c81e:	mov.w	ip, #63	; 0x3f
    c822:	b.n	c70c <_malloc_r+0x8c>
    c824:	ldr	r3, [r2, #12]
    c826:	cmp	r2, r3
    c828:	it	eq
    c82a:	addeq	r0, #2
    c82c:	bne.w	c6b0 <_malloc_r+0x30>
    c830:	ldr	r5, [r7, #16]
    c832:	ldr.w	ip, [pc, #344]	; c98c <_malloc_r+0x30c>
    c836:	cmp	r5, ip
    c838:	bne.n	c740 <_malloc_r+0xc0>
    c83a:	ldr	r2, [r7, #4]
    c83c:	asrs	r3, r0, #2
    c83e:	movs	r1, #1
    c840:	lsls	r1, r3
    c842:	cmp	r1, r2
    c844:	bls.n	c796 <_malloc_r+0x116>
    c846:	ldr	r5, [r7, #8]
    c848:	ldr	r3, [r5, #4]
    c84a:	bic.w	r9, r3, #3
    c84e:	cmp	r6, r9
    c850:	bhi.n	c85a <_malloc_r+0x1da>
    c852:	sub.w	r3, r9, r6
    c856:	cmp	r3, #15
    c858:	bgt.n	c950 <_malloc_r+0x2d0>
    c85a:	ldr.w	fp, [pc, #308]	; c990 <_malloc_r+0x310>
    c85e:	ldr	r3, [pc, #284]	; (c97c <_malloc_r+0x2fc>)
    c860:	ldr.w	r2, [fp]
    c864:	ldr	r3, [r3, #0]
    c866:	adds	r2, #1
    c868:	add	r3, r6
    c86a:	add.w	sl, r5, r9
    c86e:	beq.w	cad8 <_malloc_r+0x458>
    c872:	add.w	r3, r3, #4096	; 0x1000
    c876:	adds	r3, #15
    c878:	bic.w	r8, r3, #4080	; 0xff0
    c87c:	bic.w	r8, r8, #15
    c880:	mov	r1, r8
    c882:	mov	r0, r4
    c884:	bl	e784 <_sbrk_r>
    c888:	adds	r1, r0, #1
    c88a:	mov	r2, r0
    c88c:	beq.w	ca76 <_malloc_r+0x3f6>
    c890:	cmp	sl, r0
    c892:	bhi.w	ca72 <_malloc_r+0x3f2>
    c896:	ldr	r3, [pc, #232]	; (c980 <_malloc_r+0x300>)
    c898:	ldr	r1, [r3, #0]
    c89a:	add	r1, r8
    c89c:	str	r1, [r3, #0]
    c89e:	mov	r0, r1
    c8a0:	beq.w	cb40 <_malloc_r+0x4c0>
    c8a4:	ldr.w	r1, [fp]
    c8a8:	str	r3, [sp, #4]
    c8aa:	adds	r1, #1
    c8ac:	ittet	ne
    c8ae:	subne.w	r1, r2, sl
    c8b2:	addne	r1, r1, r0
    c8b4:	streq.w	r2, [fp]
    c8b8:	strne	r1, [r3, #0]
    c8ba:	ands.w	fp, r2, #7
    c8be:	beq.w	caf0 <_malloc_r+0x470>
    c8c2:	rsb	r1, fp, #8
    c8c6:	add	r2, r1
    c8c8:	rsb	r1, fp, #4096	; 0x1000
    c8cc:	add	r8, r2
    c8ce:	adds	r1, #8
    c8d0:	sub.w	r1, r1, r8
    c8d4:	ubfx	sl, r1, #0, #12
    c8d8:	mov	r1, sl
    c8da:	mov	r0, r4
    c8dc:	str	r2, [sp, #0]
    c8de:	bl	e784 <_sbrk_r>
    c8e2:	adds	r2, r0, #1
    c8e4:	ldrd	r2, r3, [sp]
    c8e8:	beq.w	cb8a <_malloc_r+0x50a>
    c8ec:	subs	r0, r0, r2
    c8ee:	add.w	r8, r0, sl
    c8f2:	ldr	r1, [r3, #0]
    c8f4:	str	r2, [r7, #8]
    c8f6:	orr.w	r0, r8, #1
    c8fa:	add	r1, sl
    c8fc:	cmp	r5, r7
    c8fe:	str	r0, [r2, #4]
    c900:	str	r1, [r3, #0]
    c902:	beq.w	cb58 <_malloc_r+0x4d8>
    c906:	cmp.w	r9, #15
    c90a:	bls.w	cb5c <_malloc_r+0x4dc>
    c90e:	ldr	r0, [r5, #4]
    c910:	sub.w	ip, r9, #12
    c914:	bic.w	ip, ip, #7
    c918:	and.w	r0, r0, #1
    c91c:	orr.w	r0, r0, ip
    c920:	str	r0, [r5, #4]
    c922:	mov.w	lr, #5
    c926:	add.w	r0, r5, ip
    c92a:	cmp.w	ip, #15
    c92e:	strd	lr, lr, [r0, #4]
    c932:	bhi.w	cb9a <_malloc_r+0x51a>
    c936:	ldr	r0, [r2, #4]
    c938:	mov	r5, r2
    c93a:	ldr	r3, [pc, #72]	; (c984 <_malloc_r+0x304>)
    c93c:	ldr	r2, [r3, #0]
    c93e:	cmp	r2, r1
    c940:	it	cc
    c942:	strcc	r1, [r3, #0]
    c944:	ldr	r3, [pc, #64]	; (c988 <_malloc_r+0x308>)
    c946:	ldr	r2, [r3, #0]
    c948:	cmp	r2, r1
    c94a:	it	cc
    c94c:	strcc	r1, [r3, #0]
    c94e:	b.n	ca7a <_malloc_r+0x3fa>
    c950:	adds	r2, r5, r6
    c952:	orr.w	r3, r3, #1
    c956:	orr.w	r6, r6, #1
    c95a:	str	r6, [r5, #4]
    c95c:	mov	r0, r4
    c95e:	str	r2, [r7, #8]
    c960:	str	r3, [r2, #4]
    c962:	bl	cbec <__malloc_unlock>
    c966:	adds	r5, #8
    c968:	mov	r0, r5
    c96a:	add	sp, #12
    c96c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c970:	ldr	r1, [r3, #12]
    c972:	add	r2, r3
    c974:	b.n	c6ba <_malloc_r+0x3a>
    c976:	nop
    c978:	.word	0x20008ef0
    c97c:	.word	0x20027424
    c980:	.word	0x200273f4
    c984:	.word	0x2002741c
    c988:	.word	0x20027420
    c98c:	.word	0x20008ef8
    c990:	.word	0x200092f8
    c994:	cmp.w	r2, #2560	; 0xa00
    c998:	mov.w	r3, r2, lsr #9
    c99c:	bcc.n	ca66 <_malloc_r+0x3e6>
    c99e:	cmp	r3, #20
    c9a0:	bhi.w	cb12 <_malloc_r+0x492>
    c9a4:	add.w	r1, r3, #92	; 0x5c
    c9a8:	lsls	r1, r1, #3
    c9aa:	adds	r3, #91	; 0x5b
    c9ac:	add.w	lr, r7, r1
    c9b0:	ldr	r1, [r7, r1]
    c9b2:	sub.w	lr, lr, #8
    c9b6:	cmp	lr, r1
    c9b8:	beq.w	cade <_malloc_r+0x45e>
    c9bc:	ldr	r3, [r1, #4]
    c9be:	bic.w	r3, r3, #3
    c9c2:	cmp	r3, r2
    c9c4:	bls.n	c9cc <_malloc_r+0x34c>
    c9c6:	ldr	r1, [r1, #8]
    c9c8:	cmp	lr, r1
    c9ca:	bne.n	c9bc <_malloc_r+0x33c>
    c9cc:	ldr.w	lr, [r1, #12]
    c9d0:	ldr	r2, [r7, #4]
    c9d2:	strd	r1, lr, [r5, #8]
    c9d6:	str.w	r5, [lr, #8]
    c9da:	str	r5, [r1, #12]
    c9dc:	b.n	c78c <_malloc_r+0x10c>
    c9de:	cmp	r3, #20
    c9e0:	bls.n	ca96 <_malloc_r+0x416>
    c9e2:	cmp	r3, #84	; 0x54
    c9e4:	bhi.w	cb22 <_malloc_r+0x4a2>
    c9e8:	lsrs	r3, r6, #12
    c9ea:	add.w	r0, r3, #111	; 0x6f
    c9ee:	add.w	ip, r3, #110	; 0x6e
    c9f2:	lsls	r3, r0, #3
    c9f4:	b.n	c70c <_malloc_r+0x8c>
    c9f6:	add.w	lr, lr, #1
    c9fa:	tst.w	lr, #3
    c9fe:	add.w	r5, r5, #8
    ca02:	bne.w	c7b0 <_malloc_r+0x130>
    ca06:	b.n	caac <_malloc_r+0x42c>
    ca08:	add	r2, r8
    ca0a:	mov	r5, r8
    ca0c:	ldr	r3, [r2, #4]
    ca0e:	ldr.w	r1, [r8, #12]
    ca12:	orr.w	r3, r3, #1
    ca16:	str	r3, [r2, #4]
    ca18:	ldr.w	r3, [r5, #8]!
    ca1c:	mov	r0, r4
    ca1e:	str	r1, [r3, #12]
    ca20:	str	r3, [r1, #8]
    ca22:	bl	cbec <__malloc_unlock>
    ca26:	b.n	c810 <_malloc_r+0x190>
    ca28:	lsrs	r0, r6, #3
    ca2a:	add.w	r2, r6, #8
    ca2e:	b.n	c6a0 <_malloc_r+0x20>
    ca30:	add	r2, r5
    ca32:	mov	r0, r4
    ca34:	ldr	r3, [r2, #4]
    ca36:	orr.w	r3, r3, #1
    ca3a:	str	r3, [r2, #4]
    ca3c:	adds	r5, #8
    ca3e:	bl	cbec <__malloc_unlock>
    ca42:	b.n	c810 <_malloc_r+0x190>
    ca44:	adds	r1, r5, r6
    ca46:	mov	r0, r4
    ca48:	orr.w	r6, r6, #1
    ca4c:	orr.w	r4, r3, #1
    ca50:	str	r6, [r5, #4]
    ca52:	strd	r1, r1, [r7, #16]
    ca56:	strd	ip, ip, [r1, #8]
    ca5a:	str	r4, [r1, #4]
    ca5c:	str	r3, [r5, r2]
    ca5e:	bl	cbec <__malloc_unlock>
    ca62:	adds	r5, #8
    ca64:	b.n	c810 <_malloc_r+0x190>
    ca66:	lsrs	r3, r2, #6
    ca68:	add.w	r1, r3, #57	; 0x39
    ca6c:	lsls	r1, r1, #3
    ca6e:	adds	r3, #56	; 0x38
    ca70:	b.n	c9ac <_malloc_r+0x32c>
    ca72:	cmp	r5, r7
    ca74:	beq.n	cb36 <_malloc_r+0x4b6>
    ca76:	ldr	r5, [r7, #8]
    ca78:	ldr	r0, [r5, #4]
    ca7a:	bic.w	r8, r0, #3
    ca7e:	cmp	r6, r8
    ca80:	sub.w	r3, r8, r6
    ca84:	bhi.n	ca8c <_malloc_r+0x40c>
    ca86:	cmp	r3, #15
    ca88:	bgt.w	c950 <_malloc_r+0x2d0>
    ca8c:	mov	r0, r4
    ca8e:	bl	cbec <__malloc_unlock>
    ca92:	movs	r5, #0
    ca94:	b.n	c810 <_malloc_r+0x190>
    ca96:	add.w	r0, r3, #92	; 0x5c
    ca9a:	add.w	ip, r3, #91	; 0x5b
    ca9e:	lsls	r3, r0, #3
    caa0:	b.n	c70c <_malloc_r+0x8c>
    caa2:	ldr.w	r3, [r9], #-8
    caa6:	cmp	r3, r9
    caa8:	bne.w	cbd8 <_malloc_r+0x558>
    caac:	tst.w	r0, #3
    cab0:	add.w	r0, r0, #4294967295
    cab4:	bne.n	caa2 <_malloc_r+0x422>
    cab6:	ldr	r3, [r7, #4]
    cab8:	bic.w	r3, r3, r1
    cabc:	str	r3, [r7, #4]
    cabe:	lsls	r1, r1, #1
    cac0:	cmp	r1, r3
    cac2:	bhi.w	c846 <_malloc_r+0x1c6>
    cac6:	cbnz	r1, cad0 <_malloc_r+0x450>
    cac8:	b.n	c846 <_malloc_r+0x1c6>
    caca:	lsls	r1, r1, #1
    cacc:	add.w	lr, lr, #4
    cad0:	tst	r1, r3
    cad2:	beq.n	caca <_malloc_r+0x44a>
    cad4:	mov	r0, lr
    cad6:	b.n	c7a8 <_malloc_r+0x128>
    cad8:	add.w	r8, r3, #16
    cadc:	b.n	c880 <_malloc_r+0x200>
    cade:	asrs	r2, r3, #2
    cae0:	mov.w	r8, #1
    cae4:	ldr	r3, [r7, #4]
    cae6:	lsl.w	r2, r8, r2
    caea:	orrs	r2, r3
    caec:	str	r2, [r7, #4]
    caee:	b.n	c9d2 <_malloc_r+0x352>
    caf0:	add.w	r1, r2, r8
    caf4:	negs	r1, r1
    caf6:	ubfx	sl, r1, #0, #12
    cafa:	mov	r1, sl
    cafc:	mov	r0, r4
    cafe:	str	r2, [sp, #0]
    cb00:	bl	e784 <_sbrk_r>
    cb04:	adds	r3, r0, #1
    cb06:	ldrd	r2, r3, [sp]
    cb0a:	bne.w	c8ec <_malloc_r+0x26c>
    cb0e:	mov	sl, fp
    cb10:	b.n	c8f2 <_malloc_r+0x272>
    cb12:	cmp	r3, #84	; 0x54
    cb14:	bhi.n	cb62 <_malloc_r+0x4e2>
    cb16:	lsrs	r3, r2, #12
    cb18:	add.w	r1, r3, #111	; 0x6f
    cb1c:	lsls	r1, r1, #3
    cb1e:	adds	r3, #110	; 0x6e
    cb20:	b.n	c9ac <_malloc_r+0x32c>
    cb22:	cmp.w	r3, #340	; 0x154
    cb26:	bhi.n	cb74 <_malloc_r+0x4f4>
    cb28:	lsrs	r3, r6, #15
    cb2a:	add.w	r0, r3, #120	; 0x78
    cb2e:	add.w	ip, r3, #119	; 0x77
    cb32:	lsls	r3, r0, #3
    cb34:	b.n	c70c <_malloc_r+0x8c>
    cb36:	ldr	r3, [pc, #164]	; (cbdc <_malloc_r+0x55c>)
    cb38:	ldr	r0, [r3, #0]
    cb3a:	add	r0, r8
    cb3c:	str	r0, [r3, #0]
    cb3e:	b.n	c8a4 <_malloc_r+0x224>
    cb40:	ubfx	ip, sl, #0, #12
    cb44:	cmp.w	ip, #0
    cb48:	bne.w	c8a4 <_malloc_r+0x224>
    cb4c:	ldr	r5, [r7, #8]
    cb4e:	add	r8, r9
    cb50:	orr.w	r0, r8, #1
    cb54:	str	r0, [r5, #4]
    cb56:	b.n	c93a <_malloc_r+0x2ba>
    cb58:	mov	r5, r2
    cb5a:	b.n	c93a <_malloc_r+0x2ba>
    cb5c:	movs	r3, #1
    cb5e:	str	r3, [r2, #4]
    cb60:	b.n	ca8c <_malloc_r+0x40c>
    cb62:	cmp.w	r3, #340	; 0x154
    cb66:	bhi.n	cbb0 <_malloc_r+0x530>
    cb68:	lsrs	r3, r2, #15
    cb6a:	add.w	r1, r3, #120	; 0x78
    cb6e:	lsls	r1, r1, #3
    cb70:	adds	r3, #119	; 0x77
    cb72:	b.n	c9ac <_malloc_r+0x32c>
    cb74:	movw	r2, #1364	; 0x554
    cb78:	cmp	r3, r2
    cb7a:	bhi.n	cbc4 <_malloc_r+0x544>
    cb7c:	lsrs	r3, r6, #18
    cb7e:	add.w	r0, r3, #125	; 0x7d
    cb82:	add.w	ip, r3, #124	; 0x7c
    cb86:	lsls	r3, r0, #3
    cb88:	b.n	c70c <_malloc_r+0x8c>
    cb8a:	sub.w	fp, fp, #8
    cb8e:	add	r8, fp
    cb90:	sub.w	r8, r8, r2
    cb94:	mov.w	sl, #0
    cb98:	b.n	c8f2 <_malloc_r+0x272>
    cb9a:	add.w	r1, r5, #8
    cb9e:	mov	r0, r4
    cba0:	str	r3, [sp, #0]
    cba2:	bl	eea4 <_free_r>
    cba6:	ldr	r5, [r7, #8]
    cba8:	ldr	r3, [sp, #0]
    cbaa:	ldr	r0, [r5, #4]
    cbac:	ldr	r1, [r3, #0]
    cbae:	b.n	c93a <_malloc_r+0x2ba>
    cbb0:	movw	r1, #1364	; 0x554
    cbb4:	cmp	r3, r1
    cbb6:	bhi.n	cbd0 <_malloc_r+0x550>
    cbb8:	lsrs	r3, r2, #18
    cbba:	add.w	r1, r3, #125	; 0x7d
    cbbe:	lsls	r1, r1, #3
    cbc0:	adds	r3, #124	; 0x7c
    cbc2:	b.n	c9ac <_malloc_r+0x32c>
    cbc4:	mov.w	r3, #1016	; 0x3f8
    cbc8:	movs	r0, #127	; 0x7f
    cbca:	mov.w	ip, #126	; 0x7e
    cbce:	b.n	c70c <_malloc_r+0x8c>
    cbd0:	mov.w	r1, #1016	; 0x3f8
    cbd4:	movs	r3, #126	; 0x7e
    cbd6:	b.n	c9ac <_malloc_r+0x32c>
    cbd8:	ldr	r3, [r7, #4]
    cbda:	b.n	cabe <_malloc_r+0x43e>
    cbdc:	.word	0x200273f4

0000cbe0 <__malloc_lock>:
    cbe0:	ldr	r0, [pc, #4]	; (cbe8 <__malloc_lock+0x8>)
    cbe2:	b.w	e830 <__retarget_lock_acquire_recursive>
    cbe6:	nop
    cbe8:	.word	0x200273ec

0000cbec <__malloc_unlock>:
    cbec:	ldr	r0, [pc, #4]	; (cbf4 <__malloc_unlock+0x8>)
    cbee:	b.w	e834 <__retarget_lock_release_recursive>
    cbf2:	nop
    cbf4:	.word	0x200273ec

0000cbf8 <realloc>:
    cbf8:	push	{r4}
    cbfa:	ldr	r4, [pc, #16]	; (cc0c <realloc+0x14>)
    cbfc:	mov	r3, r0
    cbfe:	mov	r2, r1
    cc00:	ldr	r0, [r4, #0]
    cc02:	ldr.w	r4, [sp], #4
    cc06:	mov	r1, r3
    cc08:	b.w	cc10 <_realloc_r>
    cc0c:	.word	0x2000930c

0000cc10 <_realloc_r>:
    cc10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc14:	mov	r7, r2
    cc16:	cmp	r1, #0
    cc18:	beq.w	cd4c <_realloc_r+0x13c>
    cc1c:	mov	r4, r1
    cc1e:	add.w	r5, r7, #11
    cc22:	mov	r8, r0
    cc24:	bl	cbe0 <__malloc_lock>
    cc28:	cmp	r5, #22
    cc2a:	ldr.w	r1, [r4, #-4]
    cc2e:	bhi.n	cce8 <_realloc_r+0xd8>
    cc30:	movs	r5, #16
    cc32:	mov	r2, r5
    cc34:	cmp	r7, r5
    cc36:	bhi.n	ccf2 <_realloc_r+0xe2>
    cc38:	bic.w	r6, r1, #3
    cc3c:	cmp	r6, r2
    cc3e:	sub.w	r9, r4, #8
    cc42:	bge.n	cd0a <_realloc_r+0xfa>
    cc44:	ldr	r3, [pc, #752]	; (cf38 <_realloc_r+0x328>)
    cc46:	ldr.w	ip, [r3, #8]
    cc4a:	add.w	r0, r9, r6
    cc4e:	cmp	ip, r0
    cc50:	beq.w	cd82 <_realloc_r+0x172>
    cc54:	ldr.w	ip, [r0, #4]
    cc58:	bic.w	r3, ip, #1
    cc5c:	add	r3, r0
    cc5e:	ldr	r3, [r3, #4]
    cc60:	lsls	r3, r3, #31
    cc62:	bmi.n	cd36 <_realloc_r+0x126>
    cc64:	bic.w	ip, ip, #3
    cc68:	add.w	r3, r6, ip
    cc6c:	cmp	r3, r2
    cc6e:	bge.n	cd00 <_realloc_r+0xf0>
    cc70:	lsls	r3, r1, #31
    cc72:	bmi.n	cc96 <_realloc_r+0x86>
    cc74:	ldr.w	r3, [r4, #-8]
    cc78:	sub.w	sl, r9, r3
    cc7c:	ldr.w	r3, [sl, #4]
    cc80:	bic.w	r1, r3, #3
    cc84:	add	ip, r1
    cc86:	add	ip, r6
    cc88:	cmp	ip, r2
    cc8a:	bge.w	ceb0 <_realloc_r+0x2a0>
    cc8e:	adds	r3, r6, r1
    cc90:	cmp	r3, r2
    cc92:	bge.w	ce66 <_realloc_r+0x256>
    cc96:	mov	r1, r7
    cc98:	mov	r0, r8
    cc9a:	bl	c680 <_malloc_r>
    cc9e:	mov	r7, r0
    cca0:	cbz	r0, ccdc <_realloc_r+0xcc>
    cca2:	ldr.w	r3, [r4, #-4]
    cca6:	bic.w	r3, r3, #1
    ccaa:	add	r3, r9
    ccac:	sub.w	r2, r0, #8
    ccb0:	cmp	r3, r2
    ccb2:	beq.w	ce5a <_realloc_r+0x24a>
    ccb6:	subs	r2, r6, #4
    ccb8:	cmp	r2, #36	; 0x24
    ccba:	bhi.w	cea8 <_realloc_r+0x298>
    ccbe:	cmp	r2, #19
    ccc0:	bhi.w	ce1c <_realloc_r+0x20c>
    ccc4:	mov	r3, r0
    ccc6:	mov	r2, r4
    ccc8:	ldr	r1, [r2, #0]
    ccca:	str	r1, [r3, #0]
    cccc:	ldr	r1, [r2, #4]
    ccce:	str	r1, [r3, #4]
    ccd0:	ldr	r2, [r2, #8]
    ccd2:	str	r2, [r3, #8]
    ccd4:	mov	r1, r4
    ccd6:	mov	r0, r8
    ccd8:	bl	eea4 <_free_r>
    ccdc:	mov	r0, r8
    ccde:	bl	cbec <__malloc_unlock>
    cce2:	mov	r0, r7
    cce4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cce8:	bic.w	r5, r5, #7
    ccec:	cmp	r5, #0
    ccee:	mov	r2, r5
    ccf0:	bge.n	cc34 <_realloc_r+0x24>
    ccf2:	movs	r3, #12
    ccf4:	str.w	r3, [r8]
    ccf8:	movs	r7, #0
    ccfa:	mov	r0, r7
    ccfc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd00:	mov	r6, r3
    cd02:	ldrd	r2, r3, [r0, #8]
    cd06:	str	r3, [r2, #12]
    cd08:	str	r2, [r3, #8]
    cd0a:	subs	r3, r6, r5
    cd0c:	cmp	r3, #15
    cd0e:	bhi.n	cd56 <_realloc_r+0x146>
    cd10:	ldr.w	r3, [r9, #4]
    cd14:	and.w	r3, r3, #1
    cd18:	orrs	r3, r6
    cd1a:	add	r6, r9
    cd1c:	str.w	r3, [r9, #4]
    cd20:	ldr	r3, [r6, #4]
    cd22:	orr.w	r3, r3, #1
    cd26:	str	r3, [r6, #4]
    cd28:	mov	r0, r8
    cd2a:	mov	r7, r4
    cd2c:	bl	cbec <__malloc_unlock>
    cd30:	mov	r0, r7
    cd32:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd36:	lsls	r1, r1, #31
    cd38:	bmi.n	cc96 <_realloc_r+0x86>
    cd3a:	ldr.w	r3, [r4, #-8]
    cd3e:	sub.w	sl, r9, r3
    cd42:	ldr.w	r1, [sl, #4]
    cd46:	bic.w	r1, r1, #3
    cd4a:	b.n	cc8e <_realloc_r+0x7e>
    cd4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd50:	mov	r1, r2
    cd52:	b.w	c680 <_malloc_r>
    cd56:	ldr.w	r2, [r9, #4]
    cd5a:	add.w	r1, r9, r5
    cd5e:	and.w	r2, r2, #1
    cd62:	add	r6, r9
    cd64:	orr.w	r3, r3, #1
    cd68:	orrs	r2, r5
    cd6a:	str.w	r2, [r9, #4]
    cd6e:	str	r3, [r1, #4]
    cd70:	ldr	r3, [r6, #4]
    cd72:	orr.w	r3, r3, #1
    cd76:	adds	r1, #8
    cd78:	str	r3, [r6, #4]
    cd7a:	mov	r0, r8
    cd7c:	bl	eea4 <_free_r>
    cd80:	b.n	cd28 <_realloc_r+0x118>
    cd82:	ldr.w	r0, [ip, #4]
    cd86:	bic.w	fp, r0, #3
    cd8a:	add.w	ip, r6, fp
    cd8e:	add.w	r0, r5, #16
    cd92:	cmp	ip, r0
    cd94:	bge.n	ce32 <_realloc_r+0x222>
    cd96:	lsls	r1, r1, #31
    cd98:	bmi.w	cc96 <_realloc_r+0x86>
    cd9c:	ldr.w	r1, [r4, #-8]
    cda0:	sub.w	sl, r9, r1
    cda4:	ldr.w	r1, [sl, #4]
    cda8:	bic.w	r1, r1, #3
    cdac:	add	fp, r1
    cdae:	add	fp, r6
    cdb0:	cmp	r0, fp
    cdb2:	bgt.w	cc8e <_realloc_r+0x7e>
    cdb6:	mov	r7, sl
    cdb8:	ldr.w	r1, [sl, #12]
    cdbc:	ldr.w	r0, [r7, #8]!
    cdc0:	subs	r2, r6, #4
    cdc2:	cmp	r2, #36	; 0x24
    cdc4:	str	r1, [r0, #12]
    cdc6:	str	r0, [r1, #8]
    cdc8:	bhi.w	cf82 <_realloc_r+0x372>
    cdcc:	cmp	r2, #19
    cdce:	bls.w	cf7e <_realloc_r+0x36e>
    cdd2:	ldr	r1, [r4, #0]
    cdd4:	str.w	r1, [sl, #8]
    cdd8:	ldr	r1, [r4, #4]
    cdda:	str.w	r1, [sl, #12]
    cdde:	cmp	r2, #27
    cde0:	bhi.w	cfa2 <_realloc_r+0x392>
    cde4:	adds	r4, #8
    cde6:	add.w	r2, sl, #16
    cdea:	ldr	r1, [r4, #0]
    cdec:	str	r1, [r2, #0]
    cdee:	ldr	r1, [r4, #4]
    cdf0:	str	r1, [r2, #4]
    cdf2:	ldr	r1, [r4, #8]
    cdf4:	str	r1, [r2, #8]
    cdf6:	add.w	r1, sl, r5
    cdfa:	sub.w	r2, fp, r5
    cdfe:	orr.w	r2, r2, #1
    ce02:	str	r1, [r3, #8]
    ce04:	str	r2, [r1, #4]
    ce06:	ldr.w	r3, [sl, #4]
    ce0a:	and.w	r3, r3, #1
    ce0e:	orrs	r3, r5
    ce10:	mov	r0, r8
    ce12:	str.w	r3, [sl, #4]
    ce16:	bl	cbec <__malloc_unlock>
    ce1a:	b.n	ccfa <_realloc_r+0xea>
    ce1c:	ldr	r3, [r4, #0]
    ce1e:	str	r3, [r0, #0]
    ce20:	ldr	r3, [r4, #4]
    ce22:	str	r3, [r0, #4]
    ce24:	cmp	r2, #27
    ce26:	bhi.n	cefa <_realloc_r+0x2ea>
    ce28:	add.w	r2, r4, #8
    ce2c:	add.w	r3, r0, #8
    ce30:	b.n	ccc8 <_realloc_r+0xb8>
    ce32:	add.w	r2, r9, r5
    ce36:	str	r2, [r3, #8]
    ce38:	sub.w	r3, ip, r5
    ce3c:	orr.w	r3, r3, #1
    ce40:	str	r3, [r2, #4]
    ce42:	ldr.w	r3, [r4, #-4]
    ce46:	and.w	r3, r3, #1
    ce4a:	orrs	r3, r5
    ce4c:	mov	r0, r8
    ce4e:	str.w	r3, [r4, #-4]
    ce52:	bl	cbec <__malloc_unlock>
    ce56:	mov	r7, r4
    ce58:	b.n	ccfa <_realloc_r+0xea>
    ce5a:	ldr.w	r3, [r0, #-4]
    ce5e:	bic.w	r3, r3, #3
    ce62:	add	r6, r3
    ce64:	b.n	cd0a <_realloc_r+0xfa>
    ce66:	mov	r7, sl
    ce68:	ldr.w	r1, [sl, #12]
    ce6c:	ldr.w	r0, [r7, #8]!
    ce70:	subs	r2, r6, #4
    ce72:	cmp	r2, #36	; 0x24
    ce74:	str	r1, [r0, #12]
    ce76:	str	r0, [r1, #8]
    ce78:	bhi.n	cf14 <_realloc_r+0x304>
    ce7a:	cmp	r2, #19
    ce7c:	bls.n	cf10 <_realloc_r+0x300>
    ce7e:	ldr	r1, [r4, #0]
    ce80:	str.w	r1, [sl, #8]
    ce84:	ldr	r1, [r4, #4]
    ce86:	str.w	r1, [sl, #12]
    ce8a:	cmp	r2, #27
    ce8c:	bhi.n	cf3c <_realloc_r+0x32c>
    ce8e:	adds	r4, #8
    ce90:	add.w	r2, sl, #16
    ce94:	mov	r6, r3
    ce96:	ldr	r3, [r4, #0]
    ce98:	str	r3, [r2, #0]
    ce9a:	ldr	r3, [r4, #4]
    ce9c:	str	r3, [r2, #4]
    ce9e:	ldr	r3, [r4, #8]
    cea0:	str	r3, [r2, #8]
    cea2:	mov	r9, sl
    cea4:	mov	r4, r7
    cea6:	b.n	cd0a <_realloc_r+0xfa>
    cea8:	mov	r1, r4
    ceaa:	bl	e468 <memmove>
    ceae:	b.n	ccd4 <_realloc_r+0xc4>
    ceb0:	ldrd	r1, r3, [r0, #8]
    ceb4:	mov	r7, sl
    ceb6:	str	r3, [r1, #12]
    ceb8:	str	r1, [r3, #8]
    ceba:	ldr.w	r1, [r7, #8]!
    cebe:	ldr.w	r3, [sl, #12]
    cec2:	str	r3, [r1, #12]
    cec4:	subs	r2, r6, #4
    cec6:	cmp	r2, #36	; 0x24
    cec8:	str	r1, [r3, #8]
    ceca:	bhi.n	cf28 <_realloc_r+0x318>
    cecc:	cmp	r2, #19
    cece:	bls.n	cf24 <_realloc_r+0x314>
    ced0:	ldr	r3, [r4, #0]
    ced2:	str.w	r3, [sl, #8]
    ced6:	ldr	r3, [r4, #4]
    ced8:	str.w	r3, [sl, #12]
    cedc:	cmp	r2, #27
    cede:	bhi.n	cf66 <_realloc_r+0x356>
    cee0:	adds	r4, #8
    cee2:	add.w	r3, sl, #16
    cee6:	ldr	r2, [r4, #0]
    cee8:	str	r2, [r3, #0]
    ceea:	ldr	r2, [r4, #4]
    ceec:	str	r2, [r3, #4]
    ceee:	ldr	r2, [r4, #8]
    cef0:	str	r2, [r3, #8]
    cef2:	mov	r6, ip
    cef4:	mov	r9, sl
    cef6:	mov	r4, r7
    cef8:	b.n	cd0a <_realloc_r+0xfa>
    cefa:	ldr	r3, [r4, #8]
    cefc:	str	r3, [r0, #8]
    cefe:	ldr	r3, [r4, #12]
    cf00:	str	r3, [r0, #12]
    cf02:	cmp	r2, #36	; 0x24
    cf04:	beq.n	cf54 <_realloc_r+0x344>
    cf06:	add.w	r2, r4, #16
    cf0a:	add.w	r3, r0, #16
    cf0e:	b.n	ccc8 <_realloc_r+0xb8>
    cf10:	mov	r2, r7
    cf12:	b.n	ce94 <_realloc_r+0x284>
    cf14:	mov	r1, r4
    cf16:	mov	r0, r7
    cf18:	mov	r6, r3
    cf1a:	mov	r9, sl
    cf1c:	bl	e468 <memmove>
    cf20:	mov	r4, r7
    cf22:	b.n	cd0a <_realloc_r+0xfa>
    cf24:	mov	r3, r7
    cf26:	b.n	cee6 <_realloc_r+0x2d6>
    cf28:	mov	r1, r4
    cf2a:	mov	r0, r7
    cf2c:	mov	r6, ip
    cf2e:	mov	r9, sl
    cf30:	bl	e468 <memmove>
    cf34:	mov	r4, r7
    cf36:	b.n	cd0a <_realloc_r+0xfa>
    cf38:	.word	0x20008ef0
    cf3c:	ldr	r1, [r4, #8]
    cf3e:	str.w	r1, [sl, #16]
    cf42:	ldr	r1, [r4, #12]
    cf44:	str.w	r1, [sl, #20]
    cf48:	cmp	r2, #36	; 0x24
    cf4a:	beq.n	cf8e <_realloc_r+0x37e>
    cf4c:	adds	r4, #16
    cf4e:	add.w	r2, sl, #24
    cf52:	b.n	ce94 <_realloc_r+0x284>
    cf54:	ldr	r3, [r4, #16]
    cf56:	str	r3, [r0, #16]
    cf58:	ldr	r1, [r4, #20]
    cf5a:	str	r1, [r0, #20]
    cf5c:	add.w	r2, r4, #24
    cf60:	add.w	r3, r0, #24
    cf64:	b.n	ccc8 <_realloc_r+0xb8>
    cf66:	ldr	r3, [r4, #8]
    cf68:	str.w	r3, [sl, #16]
    cf6c:	ldr	r3, [r4, #12]
    cf6e:	str.w	r3, [sl, #20]
    cf72:	cmp	r2, #36	; 0x24
    cf74:	beq.n	cfba <_realloc_r+0x3aa>
    cf76:	adds	r4, #16
    cf78:	add.w	r3, sl, #24
    cf7c:	b.n	cee6 <_realloc_r+0x2d6>
    cf7e:	mov	r2, r7
    cf80:	b.n	cdea <_realloc_r+0x1da>
    cf82:	mov	r1, r4
    cf84:	mov	r0, r7
    cf86:	bl	e468 <memmove>
    cf8a:	ldr	r3, [pc, #88]	; (cfe4 <_realloc_r+0x3d4>)
    cf8c:	b.n	cdf6 <_realloc_r+0x1e6>
    cf8e:	ldr	r2, [r4, #16]
    cf90:	str.w	r2, [sl, #24]
    cf94:	ldr	r2, [r4, #20]
    cf96:	str.w	r2, [sl, #28]
    cf9a:	adds	r4, #24
    cf9c:	add.w	r2, sl, #32
    cfa0:	b.n	ce94 <_realloc_r+0x284>
    cfa2:	ldr	r1, [r4, #8]
    cfa4:	str.w	r1, [sl, #16]
    cfa8:	ldr	r1, [r4, #12]
    cfaa:	str.w	r1, [sl, #20]
    cfae:	cmp	r2, #36	; 0x24
    cfb0:	beq.n	cfce <_realloc_r+0x3be>
    cfb2:	adds	r4, #16
    cfb4:	add.w	r2, sl, #24
    cfb8:	b.n	cdea <_realloc_r+0x1da>
    cfba:	ldr	r3, [r4, #16]
    cfbc:	str.w	r3, [sl, #24]
    cfc0:	ldr	r3, [r4, #20]
    cfc2:	str.w	r3, [sl, #28]
    cfc6:	adds	r4, #24
    cfc8:	add.w	r3, sl, #32
    cfcc:	b.n	cee6 <_realloc_r+0x2d6>
    cfce:	ldr	r2, [r4, #16]
    cfd0:	str.w	r2, [sl, #24]
    cfd4:	ldr	r2, [r4, #20]
    cfd6:	str.w	r2, [sl, #28]
    cfda:	adds	r4, #24
    cfdc:	add.w	r2, sl, #32
    cfe0:	b.n	cdea <_realloc_r+0x1da>
    cfe2:	nop
    cfe4:	.word	0x20008ef0

0000cfe8 <_strtod_l>:
    cfe8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfec:	vpush	{d8-d15}
    cff0:	sub	sp, #92	; 0x5c
    cff2:	mov	sl, r1
    cff4:	movs	r1, #0
    cff6:	str	r2, [sp, #28]
    cff8:	str	r1, [sp, #72]	; 0x48
    cffa:	movs	r2, #0
    cffc:	movs	r1, #0
    cffe:	strd	r1, r2, [sp, #16]
    d002:	mov	r8, r0
    d004:	mov	r1, sl
    d006:	str	r1, [sp, #68]	; 0x44
    d008:	mov	r7, r1
    d00a:	ldrb.w	r2, [r1], #1
    d00e:	cmp	r2, #45	; 0x2d
    d010:	bhi.n	d0d0 <_strtod_l+0xe8>
    d012:	add	r0, pc, #4	; (adr r0, d018 <_strtod_l+0x30>)
    d014:	ldr.w	pc, [r0, r2, lsl #2]
    d018:	.word	0x0000d1b9
    d01c:	.word	0x0000d0d1
    d020:	.word	0x0000d0d1
    d024:	.word	0x0000d0d1
    d028:	.word	0x0000d0d1
    d02c:	.word	0x0000d0d1
    d030:	.word	0x0000d0d1
    d034:	.word	0x0000d0d1
    d038:	.word	0x0000d0d1
    d03c:	.word	0x0000d007
    d040:	.word	0x0000d007
    d044:	.word	0x0000d007
    d048:	.word	0x0000d007
    d04c:	.word	0x0000d007
    d050:	.word	0x0000d0d1
    d054:	.word	0x0000d0d1
    d058:	.word	0x0000d0d1
    d05c:	.word	0x0000d0d1
    d060:	.word	0x0000d0d1
    d064:	.word	0x0000d0d1
    d068:	.word	0x0000d0d1
    d06c:	.word	0x0000d0d1
    d070:	.word	0x0000d0d1
    d074:	.word	0x0000d0d1
    d078:	.word	0x0000d0d1
    d07c:	.word	0x0000d0d1
    d080:	.word	0x0000d0d1
    d084:	.word	0x0000d0d1
    d088:	.word	0x0000d0d1
    d08c:	.word	0x0000d0d1
    d090:	.word	0x0000d0d1
    d094:	.word	0x0000d0d1
    d098:	.word	0x0000d007
    d09c:	.word	0x0000d0d1
    d0a0:	.word	0x0000d0d1
    d0a4:	.word	0x0000d0d1
    d0a8:	.word	0x0000d0d1
    d0ac:	.word	0x0000d0d1
    d0b0:	.word	0x0000d0d1
    d0b4:	.word	0x0000d0d1
    d0b8:	.word	0x0000d0d1
    d0bc:	.word	0x0000d0d1
    d0c0:	.word	0x0000d0d1
    d0c4:	.word	0x0000d7f3
    d0c8:	.word	0x0000d0d1
    d0cc:	.word	0x0000d7df
    d0d0:	movs	r1, #0
    d0d2:	str	r1, [sp, #36]	; 0x24
    d0d4:	cmp	r2, #48	; 0x30
    d0d6:	beq.n	d1d4 <_strtod_l+0x1ec>
    d0d8:	movs	r3, #0
    d0da:	str	r3, [sp, #32]
    d0dc:	cmp	r2, #47	; 0x2f
    d0de:	mov	r4, r2
    d0e0:	bls.w	da7e <_strtod_l+0xa96>
    d0e4:	mov.w	r9, #0
    d0e8:	mov	r0, r7
    d0ea:	mov	r6, r9
    d0ec:	mov	r5, r9
    d0ee:	b.n	d116 <_strtod_l+0x12e>
    d0f0:	adds	r0, #1
    d0f2:	cmp	r5, #8
    d0f4:	str	r0, [sp, #68]	; 0x44
    d0f6:	it	gt
    d0f8:	addgt.w	r9, r9, r9, lsl #2
    d0fc:	ldrb	r4, [r0, #0]
    d0fe:	itte	gt
    d100:	addgt.w	r2, r2, r9, lsl #1
    d104:	subgt.w	r9, r2, #48	; 0x30
    d108:	suble.w	r6, r3, #48	; 0x30
    d10c:	cmp	r4, #47	; 0x2f
    d10e:	add.w	r5, r5, #1
    d112:	mov	r2, r4
    d114:	ble.n	d1f6 <_strtod_l+0x20e>
    d116:	add.w	r3, r6, r6, lsl #2
    d11a:	cmp	r4, #57	; 0x39
    d11c:	add.w	r3, r2, r3, lsl #1
    d120:	ble.n	d0f0 <_strtod_l+0x108>
    d122:	ldr	r1, [pc, #636]	; (d3a0 <_strtod_l+0x3b8>)
    d124:	movs	r2, #1
    d126:	bl	e60c <strncmp>
    d12a:	cmp	r0, #0
    d12c:	bne.n	d19e <_strtod_l+0x1b6>
    d12e:	ldr	r3, [sp, #68]	; 0x44
    d130:	mov	r2, r3
    d132:	adds	r3, #1
    d134:	str	r3, [sp, #68]	; 0x44
    d136:	ldrb	r4, [r2, #1]
    d138:	cmp	r5, #0
    d13a:	bne.w	dbc4 <_strtod_l+0xbdc>
    d13e:	cmp	r4, #48	; 0x30
    d140:	bne.w	db8c <_strtod_l+0xba4>
    d144:	rsb	r2, r3, #1
    d148:	adds	r0, r3, r2
    d14a:	adds	r3, #1
    d14c:	str	r3, [sp, #68]	; 0x44
    d14e:	ldrb	r4, [r3, #0]
    d150:	cmp	r4, #48	; 0x30
    d152:	beq.n	d148 <_strtod_l+0x160>
    d154:	sub.w	r3, r4, #49	; 0x31
    d158:	cmp	r3, #8
    d15a:	bhi.w	d760 <_strtod_l+0x778>
    d15e:	ldr	r7, [sp, #68]	; 0x44
    d160:	adds	r3, r0, #1
    d162:	sub.w	fp, r4, #48	; 0x30
    d166:	str	r3, [sp, #44]	; 0x2c
    d168:	movs	r5, #1
    d16a:	mov	ip, r7
    d16c:	mov.w	lr, #0
    d170:	add.w	r6, r6, r6, lsl #2
    d174:	add.w	r6, fp, r6, lsl #1
    d178:	movs	r0, #0
    d17a:	add.w	r3, ip, #1
    d17e:	str	r3, [sp, #68]	; 0x44
    d180:	ldrb.w	r4, [ip, #1]
    d184:	sub.w	r1, r4, #48	; 0x30
    d188:	cmp	r1, #9
    d18a:	bhi.w	d704 <_strtod_l+0x71c>
    d18e:	adds	r0, #1
    d190:	mov	fp, r1
    d192:	cmp	r1, #0
    d194:	bne.w	da36 <_strtod_l+0xa4e>
    d198:	ldr.w	ip, [sp, #68]	; 0x44
    d19c:	b.n	d17a <_strtod_l+0x192>
    d19e:	movs	r0, #0
    d1a0:	cmp	r4, #101	; 0x65
    d1a2:	mov	lr, r5
    d1a4:	str	r0, [sp, #44]	; 0x2c
    d1a6:	mov	ip, r0
    d1a8:	beq.n	d1ae <_strtod_l+0x1c6>
    d1aa:	cmp	r4, #69	; 0x45
    d1ac:	bne.n	d210 <_strtod_l+0x228>
    d1ae:	cmp	r5, #0
    d1b0:	bne.n	d28a <_strtod_l+0x2a2>
    d1b2:	ldr	r3, [sp, #32]
    d1b4:	orrs	r3, r0
    d1b6:	bne.n	d288 <_strtod_l+0x2a0>
    d1b8:	ldr	r3, [sp, #28]
    d1ba:	vldr	d8, [pc, #476]	; d398 <_strtod_l+0x3b0>
    d1be:	cbz	r3, d1c6 <_strtod_l+0x1de>
    d1c0:	ldr	r3, [sp, #28]
    d1c2:	str.w	sl, [r3]
    d1c6:	vmov.f64	d0, d8
    d1ca:	add	sp, #92	; 0x5c
    d1cc:	vpop	{d8-d15}
    d1d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1d4:	ldrb	r2, [r7, #1]
    d1d6:	and.w	r2, r2, #223	; 0xdf
    d1da:	cmp	r2, #88	; 0x58
    d1dc:	beq.w	d9f8 <_strtod_l+0xa10>
    d1e0:	adds	r7, #1
    d1e2:	str	r7, [sp, #68]	; 0x44
    d1e4:	ldrb	r2, [r7, #0]
    d1e6:	cmp	r2, #48	; 0x30
    d1e8:	beq.n	d1e0 <_strtod_l+0x1f8>
    d1ea:	cmp	r2, #0
    d1ec:	beq.w	d35e <_strtod_l+0x376>
    d1f0:	movs	r3, #1
    d1f2:	str	r3, [sp, #32]
    d1f4:	b.n	d0dc <_strtod_l+0xf4>
    d1f6:	ldr	r1, [pc, #424]	; (d3a0 <_strtod_l+0x3b8>)
    d1f8:	movs	r2, #1
    d1fa:	bl	e60c <strncmp>
    d1fe:	cmp	r0, #0
    d200:	beq.w	d384 <_strtod_l+0x39c>
    d204:	mov	lr, r5
    d206:	mov.w	ip, #0
    d20a:	str.w	ip, [sp, #44]	; 0x2c
    d20e:	mov	r0, ip
    d210:	mov.w	fp, #0
    d214:	cmp	r5, #0
    d216:	beq.n	d316 <_strtod_l+0x32e>
    d218:	vmov	s15, r6
    d21c:	ldr	r3, [sp, #44]	; 0x2c
    d21e:	vcvt.f64.u32	d7, s15
    d222:	sub.w	r3, fp, r3
    d226:	cmp.w	lr, #0
    d22a:	it	eq
    d22c:	moveq	lr, r5
    d22e:	cmp	r5, #16
    d230:	str	r3, [sp, #40]	; 0x28
    d232:	mov	r3, r5
    d234:	it	ge
    d236:	movge	r3, #16
    d238:	cmp	r5, #9
    d23a:	vstr	d7, [sp, #16]
    d23e:	ble.n	d25a <_strtod_l+0x272>
    d240:	ldr	r2, [pc, #352]	; (d3a4 <_strtod_l+0x3bc>)
    d242:	add.w	r2, r2, r3, lsl #3
    d246:	vldr	d5, [r2, #-72]	; 0xffffffb8
    d24a:	vmov	s13, r9
    d24e:	vcvt.f64.u32	d6, s13
    d252:	vfma.f64	d6, d7, d5
    d256:	vstr	d6, [sp, #16]
    d25a:	cmp	r5, #15
    d25c:	bgt.w	d3b0 <_strtod_l+0x3c8>
    d260:	ldr	r2, [sp, #40]	; 0x28
    d262:	cmp	r2, #0
    d264:	beq.w	da30 <_strtod_l+0xa48>
    d268:	ldr	r2, [sp, #40]	; 0x28
    d26a:	ble.w	d8e6 <_strtod_l+0x8fe>
    d26e:	cmp	r2, #22
    d270:	ble.w	dba4 <_strtod_l+0xbbc>
    d274:	ldr	r1, [sp, #40]	; 0x28
    d276:	rsb	r2, r5, #37	; 0x25
    d27a:	cmp	r2, r1
    d27c:	bge.w	dbcc <_strtod_l+0xbe4>
    d280:	ldr	r2, [sp, #40]	; 0x28
    d282:	subs	r3, r5, r3
    d284:	add	r3, r2
    d286:	b.n	d3bc <_strtod_l+0x3d4>
    d288:	movs	r5, #0
    d28a:	ldr.w	sl, [sp, #68]	; 0x44
    d28e:	add.w	r3, sl, #1
    d292:	str	r3, [sp, #68]	; 0x44
    d294:	ldrb.w	r4, [sl, #1]
    d298:	cmp	r4, #43	; 0x2b
    d29a:	beq.w	d75a <_strtod_l+0x772>
    d29e:	cmp	r4, #45	; 0x2d
    d2a0:	beq.w	d692 <_strtod_l+0x6aa>
    d2a4:	movs	r3, #0
    d2a6:	str	r3, [sp, #40]	; 0x28
    d2a8:	sub.w	r3, r4, #48	; 0x30
    d2ac:	cmp	r3, #9
    d2ae:	bhi.w	d688 <_strtod_l+0x6a0>
    d2b2:	cmp	r4, #48	; 0x30
    d2b4:	bne.n	d2c2 <_strtod_l+0x2da>
    d2b6:	ldr	r3, [sp, #68]	; 0x44
    d2b8:	adds	r3, #1
    d2ba:	str	r3, [sp, #68]	; 0x44
    d2bc:	ldrb	r4, [r3, #0]
    d2be:	cmp	r4, #48	; 0x30
    d2c0:	beq.n	d2b8 <_strtod_l+0x2d0>
    d2c2:	sub.w	r3, r4, #49	; 0x31
    d2c6:	cmp	r3, #8
    d2c8:	bhi.n	d210 <_strtod_l+0x228>
    d2ca:	ldr	r2, [sp, #68]	; 0x44
    d2cc:	str	r2, [sp, #48]	; 0x30
    d2ce:	adds	r3, r2, #1
    d2d0:	str	r3, [sp, #68]	; 0x44
    d2d2:	sub.w	fp, r4, #48	; 0x30
    d2d6:	ldrb	r4, [r2, #1]
    d2d8:	cmp	r4, #47	; 0x2f
    d2da:	bgt.n	d2ec <_strtod_l+0x304>
    d2dc:	b.n	da9c <_strtod_l+0xab4>
    d2de:	adds	r3, #1
    d2e0:	str	r3, [sp, #68]	; 0x44
    d2e2:	ldrb	r4, [r1, #1]
    d2e4:	cmp	r4, #47	; 0x2f
    d2e6:	sub.w	fp, r2, #48	; 0x30
    d2ea:	ble.n	d2fa <_strtod_l+0x312>
    d2ec:	add.w	r2, fp, fp, lsl #2
    d2f0:	cmp	r4, #57	; 0x39
    d2f2:	mov	r1, r3
    d2f4:	add.w	r2, r4, r2, lsl #1
    d2f8:	ble.n	d2de <_strtod_l+0x2f6>
    d2fa:	ldr	r2, [sp, #48]	; 0x30
    d2fc:	subs	r3, r3, r2
    d2fe:	cmp	r3, #8
    d300:	ble.w	da9c <_strtod_l+0xab4>
    d304:	movw	fp, #19999	; 0x4e1f
    d308:	ldr	r3, [sp, #40]	; 0x28
    d30a:	cmp	r3, #0
    d30c:	beq.n	d214 <_strtod_l+0x22c>
    d30e:	rsb	fp, fp, #0
    d312:	cmp	r5, #0
    d314:	bne.n	d218 <_strtod_l+0x230>
    d316:	ldr	r3, [sp, #32]
    d318:	orrs	r3, r0
    d31a:	bne.n	d35e <_strtod_l+0x376>
    d31c:	cmp.w	ip, #0
    d320:	bne.w	d1b8 <_strtod_l+0x1d0>
    d324:	cmp	r4, #105	; 0x69
    d326:	beq.w	dac8 <_strtod_l+0xae0>
    d32a:	bgt.w	d914 <_strtod_l+0x92c>
    d32e:	cmp	r4, #73	; 0x49
    d330:	beq.w	dac8 <_strtod_l+0xae0>
    d334:	cmp	r4, #78	; 0x4e
    d336:	bne.w	d1b8 <_strtod_l+0x1d0>
    d33a:	ldr	r1, [pc, #108]	; (d3a8 <_strtod_l+0x3c0>)
    d33c:	add	r0, sp, #68	; 0x44
    d33e:	bl	f6e8 <__match>
    d342:	cmp	r0, #0
    d344:	beq.w	d1b8 <_strtod_l+0x1d0>
    d348:	ldr	r3, [sp, #68]	; 0x44
    d34a:	ldrb	r3, [r3, #0]
    d34c:	cmp	r3, #40	; 0x28
    d34e:	beq.w	dd36 <_strtod_l+0xd4e>
    d352:	ldr	r0, [pc, #88]	; (d3ac <_strtod_l+0x3c4>)
    d354:	bl	ed60 <nan>
    d358:	vmov.f64	d8, d0
    d35c:	b.n	d362 <_strtod_l+0x37a>
    d35e:	vldr	d8, [pc, #56]	; d398 <_strtod_l+0x3b0>
    d362:	ldr	r2, [sp, #28]
    d364:	cbz	r2, d36a <_strtod_l+0x382>
    d366:	ldr	r3, [sp, #68]	; 0x44
    d368:	str	r3, [r2, #0]
    d36a:	ldr	r3, [sp, #36]	; 0x24
    d36c:	cmp	r3, #0
    d36e:	beq.w	d1c6 <_strtod_l+0x1de>
    d372:	vneg.f64	d8, d8
    d376:	vmov.f64	d0, d8
    d37a:	add	sp, #92	; 0x5c
    d37c:	vpop	{d8-d15}
    d380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d384:	ldr	r3, [sp, #68]	; 0x44
    d386:	str	r0, [sp, #44]	; 0x2c
    d388:	adds	r2, r3, #1
    d38a:	str	r2, [sp, #68]	; 0x44
    d38c:	ldrb	r4, [r3, #1]
    d38e:	mov	lr, r5
    d390:	b.n	d184 <_strtod_l+0x19c>
    d392:	nop
    d394:	nop.w
	...
    d3a0:	.word	0x200009a8
    d3a4:	.word	0x20000328
    d3a8:	.word	0x200009b8
    d3ac:	.word	0x20000614
    d3b0:	ldr	r2, [sp, #40]	; 0x28
    d3b2:	subs	r3, r5, r3
    d3b4:	add	r3, r2
    d3b6:	cmp	r3, #0
    d3b8:	ble.w	d91c <_strtod_l+0x934>
    d3bc:	ands.w	r1, r3, #15
    d3c0:	beq.n	d3d8 <_strtod_l+0x3f0>
    d3c2:	ldr	r2, [pc, #780]	; (d6d0 <_strtod_l+0x6e8>)
    d3c4:	add.w	r2, r2, r1, lsl #3
    d3c8:	vldr	d6, [sp, #16]
    d3cc:	vldr	d7, [r2]
    d3d0:	vmul.f64	d7, d7, d6
    d3d4:	vstr	d7, [sp, #16]
    d3d8:	bics.w	r2, r3, #15
    d3dc:	bne.w	d850 <_strtod_l+0x868>
    d3e0:	movs	r3, #0
    d3e2:	str	r3, [sp, #32]
    d3e4:	str	r6, [sp, #0]
    d3e6:	mov	r3, r5
    d3e8:	mov	r2, lr
    d3ea:	mov	r1, r7
    d3ec:	mov	r0, r8
    d3ee:	bl	fa00 <__s2b>
    d3f2:	mov	r9, r0
    d3f4:	cmp	r0, #0
    d3f6:	beq.w	d9bc <_strtod_l+0x9d4>
    d3fa:	ldr	r3, [sp, #44]	; 0x2c
    d3fc:	sub.w	fp, r3, fp
    d400:	ldr	r3, [sp, #40]	; 0x28
    d402:	vldr	d14, [pc, #676]	; d6a8 <_strtod_l+0x6c0>
    d406:	cmp	r3, #0
    d408:	vldr	d12, [pc, #676]	; d6b0 <_strtod_l+0x6c8>
    d40c:	vldr	d13, [pc, #680]	; d6b8 <_strtod_l+0x6d0>
    d410:	vldr	d11, [pc, #684]	; d6c0 <_strtod_l+0x6d8>
    d414:	ite	lt
    d416:	movlt	r2, fp
    d418:	movge	r2, #0
    d41a:	mov.w	sl, #0
    d41e:	bic.w	r3, r3, r3, asr #31
    d422:	str	r2, [sp, #44]	; 0x2c
    d424:	str	r3, [sp, #48]	; 0x30
    d426:	mov	r4, sl
    d428:	ldr.w	r1, [r9, #4]
    d42c:	mov	r0, r8
    d42e:	bl	f8fc <_Balloc>
    d432:	mov	r6, r0
    d434:	cmp	r0, #0
    d436:	beq.w	d656 <_strtod_l+0x66e>
    d43a:	ldr.w	r2, [r9, #16]
    d43e:	vldr	d8, [sp, #16]
    d442:	adds	r2, #2
    d444:	lsls	r2, r2, #2
    d446:	add.w	r1, r9, #12
    d44a:	adds	r0, #12
    d44c:	bl	9c60 <memcpy>
    d450:	vmov.f64	d0, d8
    d454:	add	r2, sp, #80	; 0x50
    d456:	add	r1, sp, #76	; 0x4c
    d458:	mov	r0, r8
    d45a:	bl	10178 <__d2b>
    d45e:	str	r0, [sp, #72]	; 0x48
    d460:	cmp	r0, #0
    d462:	beq.w	d62e <_strtod_l+0x646>
    d466:	movs	r1, #1
    d468:	mov	r0, r8
    d46a:	bl	fb50 <__i2b>
    d46e:	mov	r4, r0
    d470:	cmp	r0, #0
    d472:	beq.w	d656 <_strtod_l+0x66e>
    d476:	ldr	r2, [sp, #76]	; 0x4c
    d478:	cmp	r2, #0
    d47a:	blt.w	d63a <_strtod_l+0x652>
    d47e:	ldr	r3, [sp, #44]	; 0x2c
    d480:	ldr	r7, [sp, #48]	; 0x30
    d482:	add.w	fp, r2, r3
    d486:	ldr	r3, [sp, #32]
    d488:	ldr	r5, [sp, #80]	; 0x50
    d48a:	subs	r2, r2, r3
    d48c:	add	r2, r5
    d48e:	ldr	r3, [pc, #580]	; (d6d4 <_strtod_l+0x6ec>)
    d490:	subs	r2, #1
    d492:	cmp	r2, r3
    d494:	rsb	r5, r5, #54	; 0x36
    d498:	bge.w	d5cc <_strtod_l+0x5e4>
    d49c:	subs	r1, r3, r2
    d49e:	cmp	r1, #31
    d4a0:	sub.w	r5, r5, r1
    d4a4:	bgt.w	d66e <_strtod_l+0x686>
    d4a8:	movs	r2, #1
    d4aa:	lsl.w	r3, r2, r1
    d4ae:	str	r3, [sp, #52]	; 0x34
    d4b0:	movs	r3, #0
    d4b2:	str	r3, [sp, #56]	; 0x38
    d4b4:	add	r7, r5
    d4b6:	ldr	r3, [sp, #32]
    d4b8:	add	r5, fp
    d4ba:	cmp	fp, r5
    d4bc:	mov	r2, fp
    d4be:	add	r7, r3
    d4c0:	it	ge
    d4c2:	movge	r2, r5
    d4c4:	cmp	r2, r7
    d4c6:	it	ge
    d4c8:	movge	r2, r7
    d4ca:	cmp	r2, #0
    d4cc:	ble.n	d4d6 <_strtod_l+0x4ee>
    d4ce:	subs	r5, r5, r2
    d4d0:	subs	r7, r7, r2
    d4d2:	sub.w	fp, fp, r2
    d4d6:	ldr	r3, [sp, #44]	; 0x2c
    d4d8:	cmp	r3, #0
    d4da:	bgt.w	d5ee <_strtod_l+0x606>
    d4de:	cmp	r5, #0
    d4e0:	bgt.w	d61c <_strtod_l+0x634>
    d4e4:	ldr	r3, [sp, #40]	; 0x28
    d4e6:	cmp	r3, #0
    d4e8:	bgt.w	d65a <_strtod_l+0x672>
    d4ec:	cmp	r7, #0
    d4ee:	bgt.w	d644 <_strtod_l+0x65c>
    d4f2:	cmp.w	fp, #0
    d4f6:	ble.n	d50a <_strtod_l+0x522>
    d4f8:	mov	r1, r4
    d4fa:	mov	r2, fp
    d4fc:	mov	r0, r8
    d4fe:	bl	fdc8 <__lshift>
    d502:	mov	r4, r0
    d504:	cmp	r0, #0
    d506:	beq.w	d656 <_strtod_l+0x66e>
    d50a:	ldr	r1, [sp, #72]	; 0x48
    d50c:	mov	r2, r6
    d50e:	mov	r0, r8
    d510:	bl	fefc <__mdiff>
    d514:	mov	sl, r0
    d516:	cmp	r0, #0
    d518:	beq.w	d656 <_strtod_l+0x66e>
    d51c:	movs	r3, #0
    d51e:	ldr	r5, [r0, #12]
    d520:	str	r3, [r0, #12]
    d522:	mov	r1, r4
    d524:	bl	feb8 <__mcmp>
    d528:	cmp	r0, #0
    d52a:	blt.w	dcbc <_strtod_l+0xcd4>
    d52e:	beq.w	dbf4 <_strtod_l+0xc0c>
    d532:	mov	r1, r4
    d534:	mov	r0, sl
    d536:	bl	1024c <__ratio>
    d53a:	vmov.f64	d7, #0	; 0x40000000  2.0
    d53e:	vcmpe.f64	d0, d7
    d542:	vmrs	APSR_nzcv, fpscr
    d546:	bhi.n	d5d6 <_strtod_l+0x5ee>
    d548:	cmp	r5, #0
    d54a:	beq.w	d6e4 <_strtod_l+0x6fc>
    d54e:	vmov.f64	d9, #112	; 0x3f800000  1.0
    d552:	ldr	r0, [sp, #20]
    d554:	ldr	r3, [pc, #384]	; (d6d8 <_strtod_l+0x6f0>)
    d556:	movs	r2, #0
    d558:	ldr	r1, [pc, #384]	; (d6dc <_strtod_l+0x6f4>)
    d55a:	ldr.w	ip, [pc, #388]	; d6e0 <_strtod_l+0x6f8>
    d55e:	and.w	r7, r0, r1
    d562:	cmp	r7, ip
    d564:	beq.w	d710 <_strtod_l+0x728>
    d568:	ldr	r1, [sp, #32]
    d56a:	cbz	r1, d584 <_strtod_l+0x59c>
    d56c:	cmp.w	r7, #111149056	; 0x6a00000
    d570:	bhi.n	d584 <_strtod_l+0x59c>
    d572:	vcmpe.f64	d9, d11
    d576:	vmrs	APSR_nzcv, fpscr
    d57a:	bls.w	d82a <_strtod_l+0x842>
    d57e:	add.w	r1, r3, #112197632	; 0x6b00000
    d582:	subs	r3, r1, r7
    d584:	vmov.f64	d0, d8
    d588:	vmov	d10, r2, r3
    d58c:	bl	10050 <__ulp>
    d590:	vfma.f64	d8, d10, d0
    d594:	vstr	d8, [sp, #16]
    d598:	vmov	r3, s17
    d59c:	ldr	r2, [sp, #32]
    d59e:	cbnz	r2, d5aa <_strtod_l+0x5c2>
    d5a0:	ldr	r2, [pc, #312]	; (d6dc <_strtod_l+0x6f4>)
    d5a2:	ands	r2, r3
    d5a4:	cmp	r7, r2
    d5a6:	beq.w	d772 <_strtod_l+0x78a>
    d5aa:	ldr	r1, [sp, #72]	; 0x48
    d5ac:	mov	r0, r8
    d5ae:	bl	f948 <_Bfree>
    d5b2:	mov	r1, r6
    d5b4:	mov	r0, r8
    d5b6:	bl	f948 <_Bfree>
    d5ba:	mov	r1, r4
    d5bc:	mov	r0, r8
    d5be:	bl	f948 <_Bfree>
    d5c2:	mov	r1, sl
    d5c4:	mov	r0, r8
    d5c6:	bl	f948 <_Bfree>
    d5ca:	b.n	d428 <_strtod_l+0x440>
    d5cc:	movs	r3, #1
    d5ce:	movs	r1, #0
    d5d0:	strd	r3, r1, [sp, #52]	; 0x34
    d5d4:	b.n	d4b4 <_strtod_l+0x4cc>
    d5d6:	vmov.f64	d9, #96	; 0x3f000000  0.5
    d5da:	vmul.f64	d9, d0, d9
    d5de:	cmp	r5, #0
    d5e0:	bne.n	d6a2 <_strtod_l+0x6ba>
    d5e2:	vneg.f64	d7, d9
    d5e6:	ldr	r0, [sp, #20]
    d5e8:	vmov	r2, r3, d7
    d5ec:	b.n	d558 <_strtod_l+0x570>
    d5ee:	mov	r1, r4
    d5f0:	mov	r2, r3
    d5f2:	mov	r0, r8
    d5f4:	bl	fd08 <__pow5mult>
    d5f8:	mov	r4, r0
    d5fa:	cbz	r0, d656 <_strtod_l+0x66e>
    d5fc:	mov	r1, r0
    d5fe:	ldr	r2, [sp, #72]	; 0x48
    d600:	mov	r0, r8
    d602:	bl	fbac <__multiply>
    d606:	cbz	r0, d656 <_strtod_l+0x66e>
    d608:	str	r0, [sp, #60]	; 0x3c
    d60a:	ldr	r1, [sp, #72]	; 0x48
    d60c:	mov	r0, r8
    d60e:	bl	f948 <_Bfree>
    d612:	ldr	r2, [sp, #60]	; 0x3c
    d614:	str	r2, [sp, #72]	; 0x48
    d616:	cmp	r5, #0
    d618:	ble.w	d4e4 <_strtod_l+0x4fc>
    d61c:	ldr	r1, [sp, #72]	; 0x48
    d61e:	mov	r2, r5
    d620:	mov	r0, r8
    d622:	bl	fdc8 <__lshift>
    d626:	str	r0, [sp, #72]	; 0x48
    d628:	cmp	r0, #0
    d62a:	bne.w	d4e4 <_strtod_l+0x4fc>
    d62e:	movs	r3, #34	; 0x22
    d630:	vldr	d8, [pc, #148]	; d6c8 <_strtod_l+0x6e0>
    d634:	str.w	r3, [r8]
    d638:	b.n	d7b4 <_strtod_l+0x7cc>
    d63a:	ldr	r3, [sp, #48]	; 0x30
    d63c:	ldr.w	fp, [sp, #44]	; 0x2c
    d640:	subs	r7, r3, r2
    d642:	b.n	d486 <_strtod_l+0x49e>
    d644:	mov	r1, r6
    d646:	mov	r2, r7
    d648:	mov	r0, r8
    d64a:	bl	fdc8 <__lshift>
    d64e:	mov	r6, r0
    d650:	cmp	r0, #0
    d652:	bne.w	d4f2 <_strtod_l+0x50a>
    d656:	ldr	r0, [sp, #72]	; 0x48
    d658:	b.n	d62e <_strtod_l+0x646>
    d65a:	mov	r1, r6
    d65c:	ldr	r2, [sp, #48]	; 0x30
    d65e:	mov	r0, r8
    d660:	bl	fd08 <__pow5mult>
    d664:	mov	r6, r0
    d666:	cmp	r0, #0
    d668:	bne.w	d4ec <_strtod_l+0x504>
    d66c:	b.n	d656 <_strtod_l+0x66e>
    d66e:	rsb	r2, r2, #4278190080	; 0xff000000
    d672:	add.w	r2, r2, #16711680	; 0xff0000
    d676:	add.w	r2, r2, #64256	; 0xfb00
    d67a:	movs	r1, #1
    d67c:	adds	r2, #226	; 0xe2
    d67e:	lsl.w	r3, r1, r2
    d682:	strd	r1, r3, [sp, #52]	; 0x34
    d686:	b.n	d4b4 <_strtod_l+0x4cc>
    d688:	str.w	sl, [sp, #68]	; 0x44
    d68c:	mov.w	fp, #0
    d690:	b.n	d214 <_strtod_l+0x22c>
    d692:	movs	r3, #1
    d694:	str	r3, [sp, #40]	; 0x28
    d696:	add.w	r3, sl, #2
    d69a:	str	r3, [sp, #68]	; 0x44
    d69c:	ldrb.w	r4, [sl, #2]
    d6a0:	b.n	d2a8 <_strtod_l+0x2c0>
    d6a2:	vmov.f64	d7, d9
    d6a6:	b.n	d5e6 <_strtod_l+0x5fe>
    d6a8:	.word	0x94a03595
    d6ac:	.word	0x3fcfffff
    d6b0:	.word	0x94a03595
    d6b4:	.word	0x3fdfffff
    d6b8:	.word	0x35afe535
    d6bc:	.word	0x3fe00000
    d6c0:	.word	0xffc00000
    d6c4:	.word	0x41dfffff
    d6c8:	.word	0x00000000
    d6cc:	.word	0x7ff00000
    d6d0:	.word	0x20000328
    d6d4:	.word	0xfffffc02
    d6d8:	.word	0x3ff00000
    d6dc:	.word	0x7ff00000
    d6e0:	.word	0x7fe00000
    d6e4:	ldrd	r1, r2, [sp, #16]
    d6e8:	cmp	r1, #0
    d6ea:	beq.w	d7f8 <_strtod_l+0x810>
    d6ee:	ldrd	r1, r2, [sp, #16]
    d6f2:	cmp	r1, #1
    d6f4:	beq.w	daa8 <_strtod_l+0xac0>
    d6f8:	mov	r0, r2
    d6fa:	ldr	r3, [pc, #732]	; (d9d8 <_strtod_l+0x9f0>)
    d6fc:	vmov.f64	d9, #112	; 0x3f800000  1.0
    d700:	movs	r2, #0
    d702:	b.n	d558 <_strtod_l+0x570>
    d704:	cmp	r4, #101	; 0x65
    d706:	mov.w	ip, #1
    d70a:	beq.w	d28a <_strtod_l+0x2a2>
    d70e:	b.n	d1aa <_strtod_l+0x1c2>
    d710:	vmov	d10, r2, r3
    d714:	sub.w	r3, r0, #55574528	; 0x3500000
    d718:	str	r3, [sp, #20]
    d71a:	vldr	d15, [sp, #16]
    d71e:	vmov.f64	d0, d15
    d722:	bl	10050 <__ulp>
    d726:	ldr	r1, [pc, #692]	; (d9dc <_strtod_l+0x9f4>)
    d728:	vfma.f64	d15, d10, d0
    d72c:	vmov	r3, s31
    d730:	ldr	r2, [pc, #684]	; (d9e0 <_strtod_l+0x9f8>)
    d732:	ands	r1, r3
    d734:	cmp	r1, r2
    d736:	vstr	d15, [sp, #16]
    d73a:	bls.n	d822 <_strtod_l+0x83a>
    d73c:	ldr	r3, [pc, #676]	; (d9e4 <_strtod_l+0x9fc>)
    d73e:	vmov	r2, s17
    d742:	cmp	r2, r3
    d744:	bne.n	d74e <_strtod_l+0x766>
    d746:	vmov	r3, s16
    d74a:	adds	r3, #1
    d74c:	beq.n	d656 <_strtod_l+0x66e>
    d74e:	ldr	r2, [pc, #660]	; (d9e4 <_strtod_l+0x9fc>)
    d750:	mov.w	r3, #4294967295
    d754:	strd	r3, r2, [sp, #16]
    d758:	b.n	d5aa <_strtod_l+0x5c2>
    d75a:	movs	r3, #0
    d75c:	str	r3, [sp, #40]	; 0x28
    d75e:	b.n	d696 <_strtod_l+0x6ae>
    d760:	cmp	r4, #101	; 0x65
    d762:	beq.w	d906 <_strtod_l+0x91e>
    d766:	cmp	r4, #69	; 0x45
    d768:	beq.w	d906 <_strtod_l+0x91e>
    d76c:	mov.w	ip, #1
    d770:	b.n	d316 <_strtod_l+0x32e>
    d772:	vmov	r0, r1, d9
    d776:	str	r3, [sp, #52]	; 0x34
    d778:	bl	17064 <__aeabi_d2lz>
    d77c:	bl	17008 <__aeabi_l2d>
    d780:	ldr	r3, [sp, #16]
    d782:	orrs	r5, r3
    d784:	ldr	r3, [sp, #52]	; 0x34
    d786:	vmov	d7, r0, r1
    d78a:	ubfx	r3, r3, #0, #20
    d78e:	orrs	r5, r3
    d790:	vsub.f64	d9, d9, d7
    d794:	beq.w	d8d8 <_strtod_l+0x8f0>
    d798:	vcmpe.f64	d9, d12
    d79c:	vmrs	APSR_nzcv, fpscr
    d7a0:	bmi.n	d7ae <_strtod_l+0x7c6>
    d7a2:	vcmpe.f64	d9, d13
    d7a6:	vmrs	APSR_nzcv, fpscr
    d7aa:	ble.w	d5aa <_strtod_l+0x5c2>
    d7ae:	vldr	d8, [sp, #16]
    d7b2:	ldr	r0, [sp, #72]	; 0x48
    d7b4:	mov	r1, r0
    d7b6:	mov	r0, r8
    d7b8:	bl	f948 <_Bfree>
    d7bc:	mov	r1, r6
    d7be:	mov	r0, r8
    d7c0:	bl	f948 <_Bfree>
    d7c4:	mov	r1, r4
    d7c6:	mov	r0, r8
    d7c8:	bl	f948 <_Bfree>
    d7cc:	mov	r1, r9
    d7ce:	mov	r0, r8
    d7d0:	bl	f948 <_Bfree>
    d7d4:	mov	r1, sl
    d7d6:	mov	r0, r8
    d7d8:	bl	f948 <_Bfree>
    d7dc:	b.n	d362 <_strtod_l+0x37a>
    d7de:	movs	r2, #1
    d7e0:	str	r2, [sp, #36]	; 0x24
    d7e2:	adds	r1, r7, #1
    d7e4:	str	r1, [sp, #68]	; 0x44
    d7e6:	ldrb	r2, [r7, #1]
    d7e8:	cmp	r2, #0
    d7ea:	beq.w	d1b8 <_strtod_l+0x1d0>
    d7ee:	mov	r7, r1
    d7f0:	b.n	d0d4 <_strtod_l+0xec>
    d7f2:	movs	r2, #0
    d7f4:	str	r2, [sp, #36]	; 0x24
    d7f6:	b.n	d7e2 <_strtod_l+0x7fa>
    d7f8:	ubfx	r3, r2, #0, #20
    d7fc:	mov	r0, r2
    d7fe:	cmp	r3, #0
    d800:	bne.w	d6fa <_strtod_l+0x712>
    d804:	vmov.f64	d7, #112	; 0x3f800000  1.0
    d808:	vcmpe.f64	d0, d7
    d80c:	vmrs	APSR_nzcv, fpscr
    d810:	bmi.w	dbba <_strtod_l+0xbd2>
    d814:	vmov.f64	d9, #96	; 0x3f000000  0.5
    d818:	vmul.f64	d9, d0, d9
    d81c:	vneg.f64	d7, d9
    d820:	b.n	d5e8 <_strtod_l+0x600>
    d822:	add.w	r3, r3, #55574528	; 0x3500000
    d826:	str	r3, [sp, #20]
    d828:	b.n	d59c <_strtod_l+0x5b4>
    d82a:	vcvt.u32.f64	s18, d9
    d82e:	vmov	r3, s18
    d832:	cmp	r3, #1
    d834:	it	cc
    d836:	movcc	r3, #1
    d838:	vmov	s18, r3
    d83c:	vcvt.f64.u32	d9, s18
    d840:	cmp	r5, #0
    d842:	bne.w	dac2 <_strtod_l+0xada>
    d846:	vneg.f64	d7, d9
    d84a:	vmov	r2, r3, d7
    d84e:	b.n	d57e <_strtod_l+0x596>
    d850:	cmp.w	r2, #308	; 0x134
    d854:	bgt.w	d9bc <_strtod_l+0x9d4>
    d858:	cmp	r2, #16
    d85a:	mov.w	r3, r2, asr #4
    d85e:	ble.w	dd6e <_strtod_l+0xd86>
    d862:	ldr	r4, [pc, #388]	; (d9e8 <_strtod_l+0xa00>)
    d864:	vldr	d7, [sp, #16]
    d868:	movs	r0, #0
    d86a:	mov	r2, r4
    d86c:	mov	r1, r0
    d86e:	tst.w	r3, #1
    d872:	add.w	r1, r1, #1
    d876:	mov.w	r3, r3, asr #1
    d87a:	beq.n	d886 <_strtod_l+0x89e>
    d87c:	vldr	d6, [r2]
    d880:	movs	r0, #1
    d882:	vmul.f64	d7, d7, d6
    d886:	cmp	r3, #1
    d888:	add.w	r2, r2, #8
    d88c:	bne.n	d86e <_strtod_l+0x886>
    d88e:	cbz	r0, d894 <_strtod_l+0x8ac>
    d890:	vstr	d7, [sp, #16]
    d894:	ldr	r3, [sp, #20]
    d896:	sub.w	r3, r3, #55574528	; 0x3500000
    d89a:	str	r3, [sp, #20]
    d89c:	add.w	r4, r4, r1, lsl #3
    d8a0:	vldr	d6, [sp, #16]
    d8a4:	vldr	d7, [r4]
    d8a8:	ldr	r3, [pc, #304]	; (d9dc <_strtod_l+0x9f4>)
    d8aa:	vmul.f64	d7, d7, d6
    d8ae:	vmov	r2, s15
    d8b2:	ldr	r1, [pc, #312]	; (d9ec <_strtod_l+0xa04>)
    d8b4:	ands	r3, r2
    d8b6:	cmp	r3, r1
    d8b8:	vstr	d7, [sp, #16]
    d8bc:	bhi.n	d9bc <_strtod_l+0x9d4>
    d8be:	sub.w	r1, r1, #1048576	; 0x100000
    d8c2:	cmp	r3, r1
    d8c4:	bls.w	dc74 <_strtod_l+0xc8c>
    d8c8:	ldr	r4, [pc, #280]	; (d9e4 <_strtod_l+0x9fc>)
    d8ca:	mov.w	r3, #4294967295
    d8ce:	strd	r3, r4, [sp, #16]
    d8d2:	movs	r3, #0
    d8d4:	str	r3, [sp, #32]
    d8d6:	b.n	d3e4 <_strtod_l+0x3fc>
    d8d8:	vcmpe.f64	d9, d14
    d8dc:	vmrs	APSR_nzcv, fpscr
    d8e0:	bpl.w	d5aa <_strtod_l+0x5c2>
    d8e4:	b.n	d7ae <_strtod_l+0x7c6>
    d8e6:	adds	r2, #22
    d8e8:	blt.w	d3b0 <_strtod_l+0x3c8>
    d8ec:	ldr	r3, [sp, #44]	; 0x2c
    d8ee:	sub.w	fp, r3, fp
    d8f2:	ldr	r3, [pc, #252]	; (d9f0 <_strtod_l+0xa08>)
    d8f4:	add.w	r3, r3, fp, lsl #3
    d8f8:	vldr	d7, [r3]
    d8fc:	vldr	d6, [sp, #16]
    d900:	vdiv.f64	d8, d6, d7
    d904:	b.n	d362 <_strtod_l+0x37a>
    d906:	mov.w	lr, #0
    d90a:	str.w	lr, [sp, #44]	; 0x2c
    d90e:	mov.w	ip, #1
    d912:	b.n	d1b2 <_strtod_l+0x1ca>
    d914:	cmp	r4, #110	; 0x6e
    d916:	beq.w	d33a <_strtod_l+0x352>
    d91a:	b.n	d1b8 <_strtod_l+0x1d0>
    d91c:	beq.w	d3e0 <_strtod_l+0x3f8>
    d920:	negs	r3, r3
    d922:	ands.w	r1, r3, #15
    d926:	beq.n	d93e <_strtod_l+0x956>
    d928:	ldr	r2, [pc, #196]	; (d9f0 <_strtod_l+0xa08>)
    d92a:	add.w	r2, r2, r1, lsl #3
    d92e:	vldr	d6, [sp, #16]
    d932:	vldr	d7, [r2]
    d936:	vdiv.f64	d7, d6, d7
    d93a:	vstr	d7, [sp, #16]
    d93e:	asrs	r3, r3, #4
    d940:	beq.w	d3e0 <_strtod_l+0x3f8>
    d944:	cmp	r3, #31
    d946:	bgt.n	d9b0 <_strtod_l+0x9c8>
    d948:	ands.w	r2, r3, #16
    d94c:	it	ne
    d94e:	movne	r2, #106	; 0x6a
    d950:	vldr	d7, [sp, #16]
    d954:	str	r2, [sp, #32]
    d956:	ldr	r2, [pc, #156]	; (d9f4 <_strtod_l+0xa0c>)
    d958:	movs	r1, #0
    d95a:	lsls	r0, r3, #31
    d95c:	bpl.n	d968 <_strtod_l+0x980>
    d95e:	vldr	d6, [r2]
    d962:	movs	r1, #1
    d964:	vmul.f64	d7, d7, d6
    d968:	asrs	r3, r3, #1
    d96a:	add.w	r2, r2, #8
    d96e:	bne.n	d95a <_strtod_l+0x972>
    d970:	cbz	r1, d976 <_strtod_l+0x98e>
    d972:	vstr	d7, [sp, #16]
    d976:	ldr	r3, [sp, #32]
    d978:	cbz	r3, d9a0 <_strtod_l+0x9b8>
    d97a:	ldrd	r0, r1, [sp, #16]
    d97e:	ubfx	r2, r1, #20, #11
    d982:	rsb	r3, r2, #107	; 0x6b
    d986:	cmp	r3, #0
    d988:	ble.n	d9a0 <_strtod_l+0x9b8>
    d98a:	cmp	r3, #31
    d98c:	ble.w	ddee <_strtod_l+0xe06>
    d990:	movs	r0, #0
    d992:	cmp	r3, #52	; 0x34
    d994:	str	r0, [sp, #16]
    d996:	ble.w	de1a <_strtod_l+0xe32>
    d99a:	mov.w	r3, #57671680	; 0x3700000
    d99e:	str	r3, [sp, #20]
    d9a0:	vldr	d7, [sp, #16]
    d9a4:	vcmp.f64	d7, #0.0
    d9a8:	vmrs	APSR_nzcv, fpscr
    d9ac:	bne.w	d3e4 <_strtod_l+0x3fc>
    d9b0:	movs	r3, #34	; 0x22
    d9b2:	vldr	d8, [pc, #20]	; d9c8 <_strtod_l+0x9e0>
    d9b6:	str.w	r3, [r8]
    d9ba:	b.n	d362 <_strtod_l+0x37a>
    d9bc:	movs	r3, #34	; 0x22
    d9be:	vldr	d8, [pc, #16]	; d9d0 <_strtod_l+0x9e8>
    d9c2:	str.w	r3, [r8]
    d9c6:	b.n	d362 <_strtod_l+0x37a>
	...
    d9d4:	.word	0x7ff00000
    d9d8:	.word	0xbff00000
    d9dc:	.word	0x7ff00000
    d9e0:	.word	0x7c9fffff
    d9e4:	.word	0x7fefffff
    d9e8:	.word	0x20000300
    d9ec:	.word	0x7ca00000
    d9f0:	.word	0x20000328
    d9f4:	.word	0x200003f0
    d9f8:	str	r3, [sp, #8]
    d9fa:	ldr	r3, [sp, #36]	; 0x24
    d9fc:	str	r3, [sp, #4]
    d9fe:	add	r3, sp, #72	; 0x48
    da00:	str	r3, [sp, #0]
    da02:	ldr	r2, [pc, #668]	; (dca0 <_strtod_l+0xcb8>)
    da04:	add	r3, sp, #76	; 0x4c
    da06:	add	r1, sp, #68	; 0x44
    da08:	mov	r0, r8
    da0a:	bl	f154 <__gethex>
    da0e:	ands.w	r5, r0, #15
    da12:	mov	r4, r0
    da14:	beq.w	d35e <_strtod_l+0x376>
    da18:	cmp	r5, #6
    da1a:	bne.n	db06 <_strtod_l+0xb1e>
    da1c:	ldr	r3, [sp, #28]
    da1e:	vldr	d8, [pc, #616]	; dc88 <_strtod_l+0xca0>
    da22:	adds	r7, #1
    da24:	cmp	r3, #0
    da26:	beq.w	d1c6 <_strtod_l+0x1de>
    da2a:	str	r7, [r3, #0]
    da2c:	b.w	d1c6 <_strtod_l+0x1de>
    da30:	vldr	d8, [sp, #16]
    da34:	b.n	d362 <_strtod_l+0x37a>
    da36:	ldr	r3, [sp, #44]	; 0x2c
    da38:	ldr.w	ip, [sp, #68]	; 0x44
    da3c:	add	r3, r0
    da3e:	str	r3, [sp, #44]	; 0x2c
    da40:	cmp	r0, #1
    da42:	add.w	r3, r5, #1
    da46:	mov	r2, r3
    da48:	beq.n	da74 <_strtod_l+0xa8c>
    da4a:	add	r0, r5
    da4c:	subs	r4, r0, #1
    da4e:	b.n	da58 <_strtod_l+0xa70>
    da50:	lsls	r6, r0, #1
    da52:	cmp	r4, r3
    da54:	beq.n	da72 <_strtod_l+0xa8a>
    da56:	adds	r3, #1
    da58:	mov	r2, r5
    da5a:	cmp	r2, #8
    da5c:	mov	r5, r3
    da5e:	add.w	r0, r6, r6, lsl #2
    da62:	bls.n	da50 <_strtod_l+0xa68>
    da64:	cmp	r3, #16
    da66:	itt	le
    da68:	addle.w	r9, r9, r9, lsl #2
    da6c:	movle.w	r9, r9, lsl #1
    da70:	b.n	da52 <_strtod_l+0xa6a>
    da72:	adds	r2, #2
    da74:	cmp	r5, #8
    da76:	bgt.n	daf2 <_strtod_l+0xb0a>
    da78:	mov	r5, r2
    da7a:	b.w	d170 <_strtod_l+0x188>
    da7e:	ldr	r1, [pc, #548]	; (dca4 <_strtod_l+0xcbc>)
    da80:	movs	r2, #1
    da82:	mov	r0, r7
    da84:	bl	e60c <strncmp>
    da88:	cmp	r0, #0
    da8a:	beq.w	db92 <_strtod_l+0xbaa>
    da8e:	mov.w	lr, #0
    da92:	mov	r9, lr
    da94:	mov	r6, lr
    da96:	mov	r5, lr
    da98:	b.w	d206 <_strtod_l+0x21e>
    da9c:	movw	r3, #19999	; 0x4e1f
    daa0:	cmp	fp, r3
    daa2:	it	ge
    daa4:	movge	fp, r3
    daa6:	b.n	d308 <_strtod_l+0x320>
    daa8:	ldrd	r2, r3, [sp, #16]
    daac:	mov	r0, r3
    daae:	cmp	r3, #0
    dab0:	bne.w	d6fa <_strtod_l+0x712>
    dab4:	movs	r3, #34	; 0x22
    dab6:	vldr	d8, [pc, #464]	; dc88 <_strtod_l+0xca0>
    daba:	ldr	r0, [sp, #72]	; 0x48
    dabc:	str.w	r3, [r8]
    dac0:	b.n	d7b4 <_strtod_l+0x7cc>
    dac2:	vmov.f64	d7, d9
    dac6:	b.n	d84a <_strtod_l+0x862>
    dac8:	ldr	r1, [pc, #476]	; (dca8 <_strtod_l+0xcc0>)
    daca:	add	r0, sp, #68	; 0x44
    dacc:	bl	f6e8 <__match>
    dad0:	cmp	r0, #0
    dad2:	beq.w	d1b8 <_strtod_l+0x1d0>
    dad6:	ldr	r3, [sp, #68]	; 0x44
    dad8:	ldr	r1, [pc, #464]	; (dcac <_strtod_l+0xcc4>)
    dada:	subs	r3, #1
    dadc:	add	r0, sp, #68	; 0x44
    dade:	str	r3, [sp, #68]	; 0x44
    dae0:	bl	f6e8 <__match>
    dae4:	cbnz	r0, daec <_strtod_l+0xb04>
    dae6:	ldr	r3, [sp, #68]	; 0x44
    dae8:	adds	r3, #1
    daea:	str	r3, [sp, #68]	; 0x44
    daec:	vldr	d8, [pc, #416]	; dc90 <_strtod_l+0xca8>
    daf0:	b.n	d362 <_strtod_l+0x37a>
    daf2:	cmp	r2, #16
    daf4:	itt	le
    daf6:	addle.w	r9, r9, r9, lsl #2
    dafa:	addle.w	r9, r1, r9, lsl #1
    dafe:	mov	r5, r2
    db00:	movs	r0, #0
    db02:	b.w	d17a <_strtod_l+0x192>
    db06:	ldr	r2, [sp, #72]	; 0x48
    db08:	cbz	r2, db1a <_strtod_l+0xb32>
    db0a:	movs	r1, #53	; 0x35
    db0c:	add	r0, sp, #80	; 0x50
    db0e:	bl	102b0 <__copybits>
    db12:	ldr	r1, [sp, #72]	; 0x48
    db14:	mov	r0, r8
    db16:	bl	f948 <_Bfree>
    db1a:	subs	r5, #1
    db1c:	ldr	r3, [sp, #76]	; 0x4c
    db1e:	cmp	r5, #4
    db20:	bhi.w	de42 <_strtod_l+0xe5a>
    db24:	tbb	[pc, r5]
    db28:	.word	0x1f2a2d03
    db2c:	.byte	0x03
    db2d:	.byte	0x00
    db2e:	ldr	r2, [sp, #80]	; 0x50
    db30:	str	r2, [sp, #16]
    db32:	addw	r2, r3, #1075	; 0x433
    db36:	ldr	r3, [sp, #84]	; 0x54
    db38:	bic.w	r3, r3, #1048576	; 0x100000
    db3c:	orr.w	r3, r3, r2, lsl #20
    db40:	str	r3, [sp, #20]
    db42:	lsls	r5, r4, #23
    db44:	bpl.n	db4c <_strtod_l+0xb64>
    db46:	orr.w	r3, r3, #2147483648	; 0x80000000
    db4a:	str	r3, [sp, #20]
    db4c:	ldr	r2, [pc, #352]	; (dcb0 <_strtod_l+0xcc8>)
    db4e:	ands	r2, r3
    db50:	vldr	d8, [sp, #16]
    db54:	cmp	r2, #0
    db56:	bne.w	d362 <_strtod_l+0x37a>
    db5a:	bl	e7d4 <__errno>
    db5e:	movs	r3, #34	; 0x22
    db60:	str	r3, [r0, #0]
    db62:	b.w	d362 <_strtod_l+0x37a>
    db66:	mov.w	r3, #4294967295
    db6a:	mvn.w	r6, #2147483648	; 0x80000000
    db6e:	strd	r3, r6, [sp, #16]
    db72:	lsls	r3, r4, #23
    db74:	bpl.w	da30 <_strtod_l+0xa48>
    db78:	ldr	r3, [sp, #20]
    db7a:	b.n	db46 <_strtod_l+0xb5e>
    db7c:	ldr	r3, [pc, #304]	; (dcb0 <_strtod_l+0xcc8>)
    db7e:	str	r3, [sp, #20]
    db80:	b.n	db72 <_strtod_l+0xb8a>
    db82:	ldr	r3, [sp, #80]	; 0x50
    db84:	str	r3, [sp, #16]
    db86:	ldr	r3, [sp, #84]	; 0x54
    db88:	str	r3, [sp, #20]
    db8a:	b.n	db42 <_strtod_l+0xb5a>
    db8c:	movs	r0, #0
    db8e:	b.w	d154 <_strtod_l+0x16c>
    db92:	ldr	r3, [sp, #68]	; 0x44
    db94:	mov	r2, r3
    db96:	adds	r3, #1
    db98:	str	r3, [sp, #68]	; 0x44
    db9a:	ldrb	r4, [r2, #1]
    db9c:	mov	r6, r0
    db9e:	mov	r9, r0
    dba0:	b.w	d13e <_strtod_l+0x156>
    dba4:	ldr	r3, [pc, #268]	; (dcb4 <_strtod_l+0xccc>)
    dba6:	add.w	r3, r3, r2, lsl #3
    dbaa:	vldr	d8, [r3]
    dbae:	vldr	d7, [sp, #16]
    dbb2:	vmul.f64	d8, d8, d7
    dbb6:	b.w	d362 <_strtod_l+0x37a>
    dbba:	vmov.f64	d7, #224	; 0xbf000000 -0.5
    dbbe:	vmov.f64	d9, #96	; 0x3f000000  0.5
    dbc2:	b.n	d5e8 <_strtod_l+0x600>
    dbc4:	mov	lr, r5
    dbc6:	str	r0, [sp, #44]	; 0x2c
    dbc8:	b.w	d184 <_strtod_l+0x19c>
    dbcc:	ldr	r3, [pc, #228]	; (dcb4 <_strtod_l+0xccc>)
    dbce:	rsb	r5, r5, #15
    dbd2:	subs	r2, r1, r5
    dbd4:	add.w	r5, r3, r5, lsl #3
    dbd8:	add.w	r3, r3, r2, lsl #3
    dbdc:	vldr	d8, [r5]
    dbe0:	vldr	d7, [r3]
    dbe4:	vldr	d6, [sp, #16]
    dbe8:	vmul.f64	d8, d8, d6
    dbec:	vmul.f64	d8, d8, d7
    dbf0:	b.w	d362 <_strtod_l+0x37a>
    dbf4:	cmp	r5, #0
    dbf6:	beq.w	dd24 <_strtod_l+0xd3c>
    dbfa:	ldrd	fp, ip, [sp, #16]
    dbfe:	ldr	r3, [pc, #184]	; (dcb8 <_strtod_l+0xcd0>)
    dc00:	ubfx	r1, ip, #0, #20
    dc04:	cmp	r1, r3
    dc06:	mov	r2, ip
    dc08:	beq.w	ddb0 <_strtod_l+0xdc8>
    dc0c:	ldr	r3, [sp, #56]	; 0x38
    dc0e:	cmp	r3, #0
    dc10:	beq.w	dd5e <_strtod_l+0xd76>
    dc14:	ldrd	r1, r2, [sp, #16]
    dc18:	tst	r3, r2
    dc1a:	mov	r7, r2
    dc1c:	beq.n	dc54 <_strtod_l+0xc6c>
    dc1e:	vmov.f64	d0, d8
    dc22:	cmp	r5, #0
    dc24:	beq.w	dd74 <_strtod_l+0xd8c>
    dc28:	bl	10050 <__ulp>
    dc2c:	ldr	r3, [sp, #32]
    dc2e:	cbz	r3, dc50 <_strtod_l+0xc68>
    dc30:	ubfx	r3, r7, #20, #11
    dc34:	rsb	r3, r3, #107	; 0x6b
    dc38:	cmp	r3, #0
    dc3a:	ble.n	dc50 <_strtod_l+0xc68>
    dc3c:	lsls	r3, r3, #20
    dc3e:	add.w	r1, r3, #1069547520	; 0x3fc00000
    dc42:	movs	r0, #0
    dc44:	add.w	r1, r1, #3145728	; 0x300000
    dc48:	vmov	d7, r0, r1
    dc4c:	vmul.f64	d0, d0, d7
    dc50:	vadd.f64	d8, d8, d0
    dc54:	ldr	r3, [sp, #32]
    dc56:	cbz	r3, dc70 <_strtod_l+0xc88>
    dc58:	vldr	d7, [pc, #60]	; dc98 <_strtod_l+0xcb0>
    dc5c:	ldr	r3, [pc, #80]	; (dcb0 <_strtod_l+0xcc8>)
    dc5e:	vmul.f64	d8, d8, d7
    dc62:	vmov	r2, s17
    dc66:	ands	r3, r2
    dc68:	cbnz	r3, dc70 <_strtod_l+0xc88>
    dc6a:	movs	r3, #34	; 0x22
    dc6c:	str.w	r3, [r8]
    dc70:	ldr	r0, [sp, #72]	; 0x48
    dc72:	b.n	d7b4 <_strtod_l+0x7cc>
    dc74:	add.w	r3, r2, #55574528	; 0x3500000
    dc78:	str	r3, [sp, #20]
    dc7a:	movs	r3, #0
    dc7c:	str	r3, [sp, #32]
    dc7e:	b.w	d3e4 <_strtod_l+0x3fc>
    dc82:	nop
    dc84:	nop.w
	...
    dc94:	.word	0x7ff00000
    dc98:	.word	0x00000000
    dc9c:	.word	0x39500000
    dca0:	.word	0x200077ac
    dca4:	.word	0x200009a8
    dca8:	.word	0x200009ac
    dcac:	.word	0x200009b0
    dcb0:	.word	0x7ff00000
    dcb4:	.word	0x20000328
    dcb8:	.word	0x000fffff
    dcbc:	ldrd	r1, r2, [sp, #16]
    dcc0:	orrs	r5, r1
    dcc2:	bne.n	dc54 <_strtod_l+0xc6c>
    dcc4:	ubfx	r3, r2, #0, #20
    dcc8:	mov	r7, r2
    dcca:	cmp	r3, #0
    dccc:	bne.n	dc54 <_strtod_l+0xc6c>
    dcce:	bic.w	r3, r2, #2147483648	; 0x80000000
    dcd2:	lsrs	r3, r3, #20
    dcd4:	lsls	r3, r3, #20
    dcd6:	cmp.w	r3, #112197632	; 0x6b00000
    dcda:	bls.n	dc54 <_strtod_l+0xc6c>
    dcdc:	ldr.w	r3, [sl, #20]
    dce0:	cbnz	r3, dcea <_strtod_l+0xd02>
    dce2:	ldr.w	r3, [sl, #16]
    dce6:	cmp	r3, #1
    dce8:	ble.n	dc54 <_strtod_l+0xc6c>
    dcea:	mov	r1, sl
    dcec:	movs	r2, #1
    dcee:	mov	r0, r8
    dcf0:	bl	fdc8 <__lshift>
    dcf4:	mov	r1, r4
    dcf6:	mov	sl, r0
    dcf8:	bl	feb8 <__mcmp>
    dcfc:	cmp	r0, #0
    dcfe:	ble.n	dc54 <_strtod_l+0xc6c>
    dd00:	ldr	r3, [sp, #32]
    dd02:	cmp	r3, #0
    dd04:	bne.n	de04 <_strtod_l+0xe1c>
    dd06:	ldr	r3, [pc, #320]	; (de48 <_strtod_l+0xe60>)
    dd08:	ands	r3, r7
    dd0a:	sub.w	r3, r3, #1048576	; 0x100000
    dd0e:	mvn.w	r3, r3, lsr #20
    dd12:	mvn.w	r3, r3, lsl #20
    dd16:	str	r3, [sp, #20]
    dd18:	mov.w	r3, #4294967295
    dd1c:	str	r3, [sp, #16]
    dd1e:	vldr	d8, [sp, #16]
    dd22:	b.n	dc54 <_strtod_l+0xc6c>
    dd24:	ldrd	r1, r2, [sp, #16]
    dd28:	ubfx	r3, r2, #0, #20
    dd2c:	orrs	r3, r1
    dd2e:	mov	r7, r2
    dd30:	bne.w	dc0c <_strtod_l+0xc24>
    dd34:	b.n	dd00 <_strtod_l+0xd18>
    dd36:	ldr	r1, [pc, #276]	; (de4c <_strtod_l+0xe64>)
    dd38:	add	r0, sp, #68	; 0x44
    dd3a:	add	r2, sp, #80	; 0x50
    dd3c:	bl	f720 <__hexnan>
    dd40:	cmp	r0, #5
    dd42:	bne.w	d352 <_strtod_l+0x36a>
    dd46:	ldr	r3, [sp, #84]	; 0x54
    dd48:	orr.w	r3, r3, #2139095040	; 0x7f800000
    dd4c:	orr.w	r3, r3, #7340032	; 0x700000
    dd50:	str	r3, [sp, #20]
    dd52:	ldr	r3, [sp, #80]	; 0x50
    dd54:	str	r3, [sp, #16]
    dd56:	vldr	d8, [sp, #16]
    dd5a:	b.w	d362 <_strtod_l+0x37a>
    dd5e:	ldrd	r0, r1, [sp, #16]
    dd62:	ldr	r3, [sp, #52]	; 0x34
    dd64:	tst	r3, r0
    dd66:	beq.w	dc54 <_strtod_l+0xc6c>
    dd6a:	mov	r7, r1
    dd6c:	b.n	dc1e <_strtod_l+0xc36>
    dd6e:	ldr	r4, [pc, #224]	; (de50 <_strtod_l+0xe68>)
    dd70:	movs	r1, #0
    dd72:	b.n	d894 <_strtod_l+0x8ac>
    dd74:	bl	10050 <__ulp>
    dd78:	ldr	r3, [sp, #32]
    dd7a:	cmp	r3, #0
    dd7c:	beq.n	de2a <_strtod_l+0xe42>
    dd7e:	ubfx	r3, r7, #20, #11
    dd82:	rsb	r3, r3, #107	; 0x6b
    dd86:	cmp	r3, #0
    dd88:	ble.n	dd9e <_strtod_l+0xdb6>
    dd8a:	lsls	r3, r3, #20
    dd8c:	add.w	r1, r3, #1069547520	; 0x3fc00000
    dd90:	add.w	r1, r1, #3145728	; 0x300000
    dd94:	mov	r0, r5
    dd96:	vmov	d7, r0, r1
    dd9a:	vmul.f64	d0, d0, d7
    dd9e:	vsub.f64	d8, d8, d0
    dda2:	vcmp.f64	d8, #0.0
    dda6:	vmrs	APSR_nzcv, fpscr
    ddaa:	bne.w	dc58 <_strtod_l+0xc70>
    ddae:	b.n	dab4 <_strtod_l+0xacc>
    ddb0:	ldr	r3, [sp, #32]
    ddb2:	ldr	r1, [sp, #16]
    ddb4:	cbz	r3, ddfe <_strtod_l+0xe16>
    ddb6:	ldr	r3, [pc, #144]	; (de48 <_strtod_l+0xe60>)
    ddb8:	ands	r3, r2
    ddba:	cmp.w	r3, #111149056	; 0x6a00000
    ddbe:	bhi.n	ddfe <_strtod_l+0xe16>
    ddc0:	lsrs	r3, r3, #20
    ddc2:	rsb	r3, r3, #107	; 0x6b
    ddc6:	mov.w	r0, #4294967295
    ddca:	lsl.w	r3, r0, r3
    ddce:	cmp	r1, r3
    ddd0:	bne.w	dc0c <_strtod_l+0xc24>
    ddd4:	ldr	r3, [pc, #124]	; (de54 <_strtod_l+0xe6c>)
    ddd6:	cmp	r2, r3
    ddd8:	beq.n	de3c <_strtod_l+0xe54>
    ddda:	ldr	r3, [pc, #108]	; (de48 <_strtod_l+0xe60>)
    dddc:	ands	r3, r2
    ddde:	add.w	r3, r3, #1048576	; 0x100000
    dde2:	str	r3, [sp, #20]
    dde4:	movs	r3, #0
    dde6:	str	r3, [sp, #16]
    dde8:	vldr	d8, [sp, #16]
    ddec:	b.n	dc54 <_strtod_l+0xc6c>
    ddee:	mov.w	r2, #4294967295
    ddf2:	lsl.w	r3, r2, r3
    ddf6:	ldr	r2, [sp, #16]
    ddf8:	ands	r2, r3
    ddfa:	str	r2, [sp, #16]
    ddfc:	b.n	d9a0 <_strtod_l+0x9b8>
    ddfe:	mov.w	r3, #4294967295
    de02:	b.n	ddce <_strtod_l+0xde6>
    de04:	ldr	r3, [pc, #64]	; (de48 <_strtod_l+0xe60>)
    de06:	ands	r3, r7
    de08:	cmp.w	r3, #112197632	; 0x6b00000
    de0c:	bgt.w	dd0a <_strtod_l+0xd22>
    de10:	cmp.w	r3, #57671680	; 0x3700000
    de14:	bgt.w	dc58 <_strtod_l+0xc70>
    de18:	b.n	dab4 <_strtod_l+0xacc>
    de1a:	rsb	r2, r2, #75	; 0x4b
    de1e:	mov.w	r3, #4294967295
    de22:	lsls	r3, r2
    de24:	ands	r3, r1
    de26:	str	r3, [sp, #20]
    de28:	b.n	d9a0 <_strtod_l+0x9b8>
    de2a:	vsub.f64	d8, d8, d0
    de2e:	vcmp.f64	d8, #0.0
    de32:	vmrs	APSR_nzcv, fpscr
    de36:	bne.w	dc70 <_strtod_l+0xc88>
    de3a:	b.n	dab4 <_strtod_l+0xacc>
    de3c:	adds	r1, #1
    de3e:	bne.n	ddda <_strtod_l+0xdf2>
    de40:	b.n	d656 <_strtod_l+0x66e>
    de42:	movs	r3, #0
    de44:	b.n	db42 <_strtod_l+0xb5a>
    de46:	nop
    de48:	.word	0x7ff00000
    de4c:	.word	0x200077c0
    de50:	.word	0x20000300
    de54:	.word	0x7fefffff

0000de58 <_strtod_r>:
    de58:	ldr	r3, [pc, #4]	; (de60 <_strtod_r+0x8>)
    de5a:	b.w	cfe8 <_strtod_l>
    de5e:	nop
    de60:	.word	0x20008d84

0000de64 <_strtol_l.constprop.0>:
    de64:	cmp	r3, #1
    de66:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de6a:	beq.n	deee <_strtol_l.constprop.0+0x8a>
    de6c:	cmp	r3, #36	; 0x24
    de6e:	mov	r8, r3
    de70:	bhi.n	deee <_strtol_l.constprop.0+0x8a>
    de72:	ldr	r5, [pc, #304]	; (dfa4 <_strtol_l.constprop.0+0x140>)
    de74:	mov	lr, r1
    de76:	mov	r6, lr
    de78:	ldrb.w	fp, [lr], #1
    de7c:	ldrb.w	r4, [r5, fp]
    de80:	ands.w	r4, r4, #8
    de84:	bne.n	de76 <_strtol_l.constprop.0+0x12>
    de86:	cmp.w	fp, #45	; 0x2d
    de8a:	beq.n	df72 <_strtol_l.constprop.0+0x10e>
    de8c:	cmp.w	fp, #43	; 0x2b
    de90:	it	eq
    de92:	ldrbeq.w	fp, [lr]
    de96:	mvn.w	r9, #2147483648	; 0x80000000
    de9a:	it	eq
    de9c:	addeq.w	lr, r6, #2
    dea0:	cmp	r3, #0
    dea2:	beq.n	df2a <_strtol_l.constprop.0+0xc6>
    dea4:	cmp	r3, #16
    dea6:	beq.n	df58 <_strtol_l.constprop.0+0xf4>
    dea8:	udiv	r7, r9, r8
    deac:	movs	r5, #0
    deae:	mov	r6, r5
    deb0:	mls	sl, r8, r7, r9
    deb4:	b.n	dec2 <_strtol_l.constprop.0+0x5e>
    deb6:	beq.n	df20 <_strtol_l.constprop.0+0xbc>
    deb8:	mla	r6, r8, r6, ip
    debc:	movs	r5, #1
    debe:	ldrb.w	fp, [lr], #1
    dec2:	sub.w	ip, fp, #48	; 0x30
    dec6:	cmp.w	ip, #9
    deca:	bls.n	deda <_strtol_l.constprop.0+0x76>
    decc:	sub.w	ip, fp, #65	; 0x41
    ded0:	cmp.w	ip, #25
    ded4:	bhi.n	defc <_strtol_l.constprop.0+0x98>
    ded6:	sub.w	ip, fp, #55	; 0x37
    deda:	cmp	r3, ip
    dedc:	ble.n	df0e <_strtol_l.constprop.0+0xaa>
    dede:	cmp.w	r5, #4294967295
    dee2:	beq.n	debe <_strtol_l.constprop.0+0x5a>
    dee4:	cmp	r7, r6
    dee6:	bcs.n	deb6 <_strtol_l.constprop.0+0x52>
    dee8:	mov.w	r5, #4294967295
    deec:	b.n	debe <_strtol_l.constprop.0+0x5a>
    deee:	bl	e7d4 <__errno>
    def2:	movs	r3, #22
    def4:	str	r3, [r0, #0]
    def6:	movs	r0, #0
    def8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    defc:	sub.w	ip, fp, #97	; 0x61
    df00:	cmp.w	ip, #25
    df04:	bhi.n	df0e <_strtol_l.constprop.0+0xaa>
    df06:	sub.w	ip, fp, #87	; 0x57
    df0a:	cmp	r3, ip
    df0c:	bgt.n	dede <_strtol_l.constprop.0+0x7a>
    df0e:	adds	r3, r5, #1
    df10:	beq.n	df62 <_strtol_l.constprop.0+0xfe>
    df12:	cbnz	r4, df38 <_strtol_l.constprop.0+0xd4>
    df14:	cbz	r2, df1a <_strtol_l.constprop.0+0xb6>
    df16:	cbnz	r5, df82 <_strtol_l.constprop.0+0x11e>
    df18:	str	r1, [r2, #0]
    df1a:	mov	r0, r6
    df1c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df20:	cmp	sl, ip
    df22:	bge.n	deb8 <_strtol_l.constprop.0+0x54>
    df24:	mov.w	r5, #4294967295
    df28:	b.n	debe <_strtol_l.constprop.0+0x5a>
    df2a:	cmp.w	fp, #48	; 0x30
    df2e:	beq.n	df3c <_strtol_l.constprop.0+0xd8>
    df30:	mov.w	r8, #10
    df34:	mov	r3, r8
    df36:	b.n	dea8 <_strtol_l.constprop.0+0x44>
    df38:	negs	r6, r6
    df3a:	b.n	df14 <_strtol_l.constprop.0+0xb0>
    df3c:	ldrb.w	r3, [lr]
    df40:	and.w	r3, r3, #223	; 0xdf
    df44:	cmp	r3, #88	; 0x58
    df46:	bne.n	df8c <_strtol_l.constprop.0+0x128>
    df48:	mov.w	r8, #16
    df4c:	ldrb.w	fp, [lr, #1]
    df50:	mov	r3, r8
    df52:	add.w	lr, lr, #2
    df56:	b.n	dea8 <_strtol_l.constprop.0+0x44>
    df58:	cmp.w	fp, #48	; 0x30
    df5c:	beq.n	df94 <_strtol_l.constprop.0+0x130>
    df5e:	mov	r8, r3
    df60:	b.n	dea8 <_strtol_l.constprop.0+0x44>
    df62:	movs	r3, #34	; 0x22
    df64:	str	r3, [r0, #0]
    df66:	cbz	r2, df86 <_strtol_l.constprop.0+0x122>
    df68:	add.w	r1, lr, #4294967295
    df6c:	mov	r6, r9
    df6e:	str	r1, [r2, #0]
    df70:	b.n	df1a <_strtol_l.constprop.0+0xb6>
    df72:	ldrb.w	fp, [lr]
    df76:	mov.w	r9, #2147483648	; 0x80000000
    df7a:	add.w	lr, r6, #2
    df7e:	movs	r4, #1
    df80:	b.n	dea0 <_strtol_l.constprop.0+0x3c>
    df82:	mov	r9, r6
    df84:	b.n	df68 <_strtol_l.constprop.0+0x104>
    df86:	mov	r6, r9
    df88:	mov	r0, r6
    df8a:	b.n	df1c <_strtol_l.constprop.0+0xb8>
    df8c:	mov.w	r8, #8
    df90:	mov	r3, r8
    df92:	b.n	dea8 <_strtol_l.constprop.0+0x44>
    df94:	ldrb.w	r5, [lr]
    df98:	and.w	r5, r5, #223	; 0xdf
    df9c:	cmp	r5, #88	; 0x58
    df9e:	beq.n	df48 <_strtol_l.constprop.0+0xe4>
    dfa0:	mov	r8, r3
    dfa2:	b.n	dea8 <_strtol_l.constprop.0+0x44>
    dfa4:	.word	0x20000825

0000dfa8 <_strtol_r>:
    dfa8:	b.w	de64 <_strtol_l.constprop.0>

0000dfac <__cxa_atexit>:
    dfac:	mov	r3, r2
    dfae:	mov	r2, r1
    dfb0:	mov	r1, r0
    dfb2:	movs	r0, #2
    dfb4:	b.w	ed7c <__register_exitproc>

0000dfb8 <fcvtf>:
    dfb8:	vcvt.f64.f32	d0, s0
    dfbc:	movs	r3, #0
    dfbe:	b.w	1038c <fcvtbuf>
    dfc2:	nop

0000dfc4 <stdio_exit_handler>:
    dfc4:	ldr	r2, [pc, #8]	; (dfd0 <stdio_exit_handler+0xc>)
    dfc6:	ldr	r1, [pc, #12]	; (dfd4 <stdio_exit_handler+0x10>)
    dfc8:	ldr	r0, [pc, #12]	; (dfd8 <stdio_exit_handler+0x14>)
    dfca:	b.w	e144 <_fwalk_sglue>
    dfce:	nop
    dfd0:	.word	0x20009300
    dfd4:	.word	0x000137c5
    dfd8:	.word	0x20008878

0000dfdc <cleanup_stdio>:
    dfdc:	ldr	r3, [pc, #48]	; (e010 <cleanup_stdio+0x34>)
    dfde:	ldr	r1, [r0, #4]
    dfe0:	cmp	r1, r3
    dfe2:	push	{r4, lr}
    dfe4:	mov	r4, r0
    dfe6:	beq.n	dfec <cleanup_stdio+0x10>
    dfe8:	bl	137c4 <_fclose_r>
    dfec:	ldr	r1, [r4, #8]
    dfee:	ldr	r3, [pc, #36]	; (e014 <cleanup_stdio+0x38>)
    dff0:	cmp	r1, r3
    dff2:	beq.n	dffa <cleanup_stdio+0x1e>
    dff4:	mov	r0, r4
    dff6:	bl	137c4 <_fclose_r>
    dffa:	ldr	r1, [r4, #12]
    dffc:	ldr	r3, [pc, #24]	; (e018 <cleanup_stdio+0x3c>)
    dffe:	cmp	r1, r3
    e000:	beq.n	e00c <cleanup_stdio+0x30>
    e002:	mov	r0, r4
    e004:	ldmia.w	sp!, {r4, lr}
    e008:	b.w	137c4 <_fclose_r>
    e00c:	pop	{r4, pc}
    e00e:	nop
    e010:	.word	0x20027428
    e014:	.word	0x20027490
    e018:	.word	0x200274f8

0000e01c <global_stdio_init.part.0>:
    e01c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e020:	ldr	r4, [pc, #168]	; (e0cc <global_stdio_init.part.0+0xb0>)
    e022:	ldr	r3, [pc, #172]	; (e0d0 <global_stdio_init.part.0+0xb4>)
    e024:	ldr	r0, [pc, #172]	; (e0d4 <global_stdio_init.part.0+0xb8>)
    e026:	ldr.w	r9, [pc, #192]	; e0e8 <global_stdio_init.part.0+0xcc>
    e02a:	ldr.w	r8, [pc, #192]	; e0ec <global_stdio_init.part.0+0xd0>
    e02e:	ldr	r7, [pc, #168]	; (e0d8 <global_stdio_init.part.0+0xbc>)
    e030:	str	r0, [r3, #0]
    e032:	movs	r5, #0
    e034:	movs	r3, #4
    e036:	movs	r2, #8
    e038:	mov	r1, r5
    e03a:	add.w	r0, r4, #92	; 0x5c
    e03e:	ldr	r6, [pc, #156]	; (e0dc <global_stdio_init.part.0+0xc0>)
    e040:	str	r5, [r4, #100]	; 0x64
    e042:	strd	r5, r3, [r4, #8]
    e046:	strd	r5, r5, [r4]
    e04a:	strd	r5, r5, [r4, #16]
    e04e:	str	r5, [r4, #24]
    e050:	bl	9c1c <memset>
    e054:	ldr	r3, [pc, #136]	; (e0e0 <global_stdio_init.part.0+0xc4>)
    e056:	str	r3, [r4, #116]	; 0x74
    e058:	movs	r2, #8
    e05a:	mov	r1, r5
    e05c:	add.w	r0, r4, #196	; 0xc4
    e060:	strd	r4, r9, [r4, #28]
    e064:	strd	r8, r7, [r4, #36]	; 0x24
    e068:	strd	r5, r5, [r4, #104]	; 0x68
    e06c:	strd	r5, r5, [r4, #120]	; 0x78
    e070:	str.w	r5, [r4, #204]	; 0xcc
    e074:	str	r5, [r4, #112]	; 0x70
    e076:	str.w	r5, [r4, #128]	; 0x80
    e07a:	str	r6, [r4, #44]	; 0x2c
    e07c:	bl	9c1c <memset>
    e080:	ldr	r3, [pc, #96]	; (e0e4 <global_stdio_init.part.0+0xc8>)
    e082:	str.w	r3, [r4, #220]	; 0xdc
    e086:	mov	r1, r5
    e088:	add.w	r3, r4, #104	; 0x68
    e08c:	movs	r2, #8
    e08e:	add.w	r0, r4, #300	; 0x12c
    e092:	str.w	r3, [r4, #132]	; 0x84
    e096:	strd	r9, r8, [r4, #136]	; 0x88
    e09a:	strd	r7, r6, [r4, #144]	; 0x90
    e09e:	strd	r5, r5, [r4, #208]	; 0xd0
    e0a2:	strd	r5, r5, [r4, #224]	; 0xe0
    e0a6:	str.w	r5, [r4, #308]	; 0x134
    e0aa:	str.w	r5, [r4, #216]	; 0xd8
    e0ae:	str.w	r5, [r4, #232]	; 0xe8
    e0b2:	bl	9c1c <memset>
    e0b6:	add.w	r3, r4, #208	; 0xd0
    e0ba:	strd	r9, r8, [r4, #240]	; 0xf0
    e0be:	strd	r7, r6, [r4, #248]	; 0xf8
    e0c2:	str.w	r3, [r4, #236]	; 0xec
    e0c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e0ca:	nop
    e0cc:	.word	0x20027428
    e0d0:	.word	0x20027560
    e0d4:	.word	0x0000dfc5
    e0d8:	.word	0x0000e315
    e0dc:	.word	0x0000e335
    e0e0:	.word	0x00010009
    e0e4:	.word	0x00020012
    e0e8:	.word	0x0000e2ad
    e0ec:	.word	0x0000e2d5

0000e0f0 <__sinit>:
    e0f0:	push	{r4, lr}
    e0f2:	mov	r4, r0
    e0f4:	ldr	r0, [pc, #40]	; (e120 <__sinit+0x30>)
    e0f6:	bl	e830 <__retarget_lock_acquire_recursive>
    e0fa:	ldr	r3, [r4, #52]	; 0x34
    e0fc:	cbnz	r3, e108 <__sinit+0x18>
    e0fe:	ldr	r3, [pc, #36]	; (e124 <__sinit+0x34>)
    e100:	ldr	r2, [pc, #36]	; (e128 <__sinit+0x38>)
    e102:	ldr	r3, [r3, #0]
    e104:	str	r2, [r4, #52]	; 0x34
    e106:	cbz	r3, e112 <__sinit+0x22>
    e108:	ldmia.w	sp!, {r4, lr}
    e10c:	ldr	r0, [pc, #16]	; (e120 <__sinit+0x30>)
    e10e:	b.w	e834 <__retarget_lock_release_recursive>
    e112:	bl	e01c <global_stdio_init.part.0>
    e116:	ldmia.w	sp!, {r4, lr}
    e11a:	ldr	r0, [pc, #4]	; (e120 <__sinit+0x30>)
    e11c:	b.w	e834 <__retarget_lock_release_recursive>
    e120:	.word	0x200273f0
    e124:	.word	0x20027560
    e128:	.word	0x0000dfdd

0000e12c <__sfp_lock_acquire>:
    e12c:	ldr	r0, [pc, #4]	; (e134 <__sfp_lock_acquire+0x8>)
    e12e:	b.w	e830 <__retarget_lock_acquire_recursive>
    e132:	nop
    e134:	.word	0x200273f0

0000e138 <__sfp_lock_release>:
    e138:	ldr	r0, [pc, #4]	; (e140 <__sfp_lock_release+0x8>)
    e13a:	b.w	e834 <__retarget_lock_release_recursive>
    e13e:	nop
    e140:	.word	0x200273f0

0000e144 <_fwalk_sglue>:
    e144:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e148:	mov	r8, r0
    e14a:	mov	r7, r1
    e14c:	mov	r6, r2
    e14e:	mov.w	r9, #0
    e152:	ldrd	r5, r4, [r6, #4]
    e156:	subs	r5, #1
    e158:	bmi.n	e17e <_fwalk_sglue+0x3a>
    e15a:	ldrh	r3, [r4, #12]
    e15c:	cmp	r3, #1
    e15e:	add.w	r5, r5, #4294967295
    e162:	bls.n	e176 <_fwalk_sglue+0x32>
    e164:	ldrsh.w	r3, [r4, #14]
    e168:	adds	r3, #1
    e16a:	mov	r1, r4
    e16c:	beq.n	e176 <_fwalk_sglue+0x32>
    e16e:	mov	r0, r8
    e170:	blx	r7
    e172:	orr.w	r9, r9, r0
    e176:	adds	r3, r5, #1
    e178:	add.w	r4, r4, #104	; 0x68
    e17c:	bne.n	e15a <_fwalk_sglue+0x16>
    e17e:	ldr	r6, [r6, #0]
    e180:	cmp	r6, #0
    e182:	bne.n	e152 <_fwalk_sglue+0xe>
    e184:	mov	r0, r9
    e186:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e18a:	nop

0000e18c <snprintf>:
    e18c:	push	{r2, r3}
    e18e:	push	{r4, lr}
    e190:	ldr	r3, [pc, #124]	; (e210 <snprintf+0x84>)
    e192:	cmp	r1, #0
    e194:	ldr	r4, [r3, #0]
    e196:	sub	sp, #112	; 0x70
    e198:	blt.n	e206 <snprintf+0x7a>
    e19a:	mov.w	r3, #520	; 0x208
    e19e:	strh.w	r3, [sp, #20]
    e1a2:	str	r0, [sp, #8]
    e1a4:	str	r0, [sp, #24]
    e1a6:	add	r3, sp, #124	; 0x7c
    e1a8:	beq.n	e1dc <snprintf+0x50>
    e1aa:	subs	r1, #1
    e1ac:	movw	r2, #65535	; 0xffff
    e1b0:	str	r1, [sp, #16]
    e1b2:	str	r1, [sp, #28]
    e1b4:	strh.w	r2, [sp, #22]
    e1b8:	add	r1, sp, #8
    e1ba:	ldr	r2, [sp, #120]	; 0x78
    e1bc:	str	r3, [sp, #4]
    e1be:	mov	r0, r4
    e1c0:	bl	10430 <_svfprintf_r>
    e1c4:	adds	r2, r0, #1
    e1c6:	bge.n	e1cc <snprintf+0x40>
    e1c8:	movs	r3, #139	; 0x8b
    e1ca:	str	r3, [r4, #0]
    e1cc:	ldr	r3, [sp, #8]
    e1ce:	movs	r2, #0
    e1d0:	strb	r2, [r3, #0]
    e1d2:	add	sp, #112	; 0x70
    e1d4:	ldmia.w	sp!, {r4, lr}
    e1d8:	add	sp, #8
    e1da:	bx	lr
    e1dc:	movw	r2, #65535	; 0xffff
    e1e0:	str	r1, [sp, #16]
    e1e2:	str	r1, [sp, #28]
    e1e4:	strh.w	r2, [sp, #22]
    e1e8:	add	r1, sp, #8
    e1ea:	ldr	r2, [sp, #120]	; 0x78
    e1ec:	str	r3, [sp, #4]
    e1ee:	mov	r0, r4
    e1f0:	bl	10430 <_svfprintf_r>
    e1f4:	adds	r3, r0, #1
    e1f6:	bge.n	e1fc <snprintf+0x70>
    e1f8:	movs	r3, #139	; 0x8b
    e1fa:	str	r3, [r4, #0]
    e1fc:	add	sp, #112	; 0x70
    e1fe:	ldmia.w	sp!, {r4, lr}
    e202:	add	sp, #8
    e204:	bx	lr
    e206:	movs	r3, #139	; 0x8b
    e208:	str	r3, [r4, #0]
    e20a:	mov.w	r0, #4294967295
    e20e:	b.n	e1fc <snprintf+0x70>
    e210:	.word	0x2000930c

0000e214 <sprintf>:
    e214:	push	{r1, r2, r3}
    e216:	push	{r4, lr}
    e218:	sub	sp, #116	; 0x74
    e21a:	mvn.w	r1, #2147483648	; 0x80000000
    e21e:	add	r3, sp, #124	; 0x7c
    e220:	strd	r0, r1, [sp, #24]
    e224:	str	r1, [sp, #16]
    e226:	ldr	r1, [pc, #36]	; (e24c <sprintf+0x38>)
    e228:	ldr.w	r2, [r3], #4
    e22c:	str	r0, [sp, #8]
    e22e:	ldr	r4, [pc, #32]	; (e250 <sprintf+0x3c>)
    e230:	ldr	r0, [r1, #0]
    e232:	str	r3, [sp, #4]
    e234:	add	r1, sp, #8
    e236:	str	r4, [sp, #20]
    e238:	bl	10430 <_svfprintf_r>
    e23c:	ldr	r3, [sp, #8]
    e23e:	movs	r2, #0
    e240:	strb	r2, [r3, #0]
    e242:	add	sp, #116	; 0x74
    e244:	ldmia.w	sp!, {r4, lr}
    e248:	add	sp, #12
    e24a:	bx	lr
    e24c:	.word	0x2000930c
    e250:	.word	0xffff0208

0000e254 <sscanf>:
    e254:	push	{r1, r2, r3}
    e256:	push	{r4, lr}
    e258:	sub	sp, #124	; 0x7c
    e25a:	add	r4, sp, #132	; 0x84
    e25c:	mov.w	r1, #516	; 0x204
    e260:	ldr.w	r2, [r4], #4
    e264:	str	r2, [sp, #4]
    e266:	strh.w	r1, [sp, #28]
    e26a:	str	r0, [sp, #16]
    e26c:	str	r0, [sp, #32]
    e26e:	bl	ec80 <strlen>
    e272:	str	r0, [sp, #20]
    e274:	str	r0, [sp, #36]	; 0x24
    e276:	ldr	r0, [pc, #44]	; (e2a4 <sscanf+0x50>)
    e278:	ldr	r1, [pc, #44]	; (e2a8 <sscanf+0x54>)
    e27a:	str	r1, [sp, #48]	; 0x30
    e27c:	movs	r3, #0
    e27e:	movw	ip, #65535	; 0xffff
    e282:	str	r3, [sp, #64]	; 0x40
    e284:	str	r3, [sp, #84]	; 0x54
    e286:	ldr	r2, [sp, #4]
    e288:	ldr	r0, [r0, #0]
    e28a:	strh.w	ip, [sp, #30]
    e28e:	mov	r3, r4
    e290:	add	r1, sp, #16
    e292:	str	r4, [sp, #12]
    e294:	bl	11f74 <__ssvfscanf_r>
    e298:	add	sp, #124	; 0x7c
    e29a:	ldmia.w	sp!, {r4, lr}
    e29e:	add	sp, #12
    e2a0:	bx	lr
    e2a2:	nop
    e2a4:	.word	0x2000930c
    e2a8:	.word	0x0000e2d1

0000e2ac <__sread>:
    e2ac:	push	{r4, lr}
    e2ae:	mov	r4, r1
    e2b0:	ldrsh.w	r1, [r1, #14]
    e2b4:	bl	e758 <_read_r>
    e2b8:	cmp	r0, #0
    e2ba:	blt.n	e2c4 <__sread+0x18>
    e2bc:	ldr	r3, [r4, #80]	; 0x50
    e2be:	add	r3, r0
    e2c0:	str	r3, [r4, #80]	; 0x50
    e2c2:	pop	{r4, pc}
    e2c4:	ldrh	r3, [r4, #12]
    e2c6:	bic.w	r3, r3, #4096	; 0x1000
    e2ca:	strh	r3, [r4, #12]
    e2cc:	pop	{r4, pc}
    e2ce:	nop

0000e2d0 <__seofread>:
    e2d0:	movs	r0, #0
    e2d2:	bx	lr

0000e2d4 <__swrite>:
    e2d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2d8:	mov	r4, r1
    e2da:	ldrsh.w	r1, [r1, #12]
    e2de:	mov	r7, r3
    e2e0:	lsls	r3, r1, #23
    e2e2:	mov	r5, r0
    e2e4:	mov	r6, r2
    e2e6:	bmi.n	e300 <__swrite+0x2c>
    e2e8:	bic.w	r1, r1, #4096	; 0x1000
    e2ec:	strh	r1, [r4, #12]
    e2ee:	mov	r3, r7
    e2f0:	ldrsh.w	r1, [r4, #14]
    e2f4:	mov	r2, r6
    e2f6:	mov	r0, r5
    e2f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e2fc:	b.w	e7a8 <_write_r>
    e300:	ldrsh.w	r1, [r4, #14]
    e304:	movs	r3, #2
    e306:	movs	r2, #0
    e308:	bl	e72c <_lseek_r>
    e30c:	ldrsh.w	r1, [r4, #12]
    e310:	b.n	e2e8 <__swrite+0x14>
    e312:	nop

0000e314 <__sseek>:
    e314:	push	{r4, lr}
    e316:	mov	r4, r1
    e318:	ldrsh.w	r1, [r1, #14]
    e31c:	bl	e72c <_lseek_r>
    e320:	ldrh	r3, [r4, #12]
    e322:	adds	r2, r0, #1
    e324:	itee	eq
    e326:	biceq.w	r3, r3, #4096	; 0x1000
    e32a:	orrne.w	r3, r3, #4096	; 0x1000
    e32e:	strne	r0, [r4, #80]	; 0x50
    e330:	strh	r3, [r4, #12]
    e332:	pop	{r4, pc}

0000e334 <__sclose>:
    e334:	ldrsh.w	r1, [r1, #14]
    e338:	b.w	e708 <_close_r>

0000e33c <_vdprintf_r>:
    e33c:	push	{r4, r5, r6, r7, lr}
    e33e:	sub.w	sp, sp, #532	; 0x214
    e342:	add	r7, sp, #16
    e344:	str	r3, [sp, #0]
    e346:	mov	r3, r2
    e348:	mov.w	r2, #512	; 0x200
    e34c:	mov	r6, r1
    e34e:	str	r2, [sp, #12]
    e350:	mov	r1, r7
    e352:	add	r2, sp, #12
    e354:	mov	r5, r0
    e356:	bl	e3a4 <_vasnprintf_r>
    e35a:	cbz	r0, e380 <_vdprintf_r+0x44>
    e35c:	mov	r4, r0
    e35e:	mov	r2, r0
    e360:	ldr	r3, [sp, #12]
    e362:	mov	r1, r6
    e364:	mov	r0, r5
    e366:	bl	e7a8 <_write_r>
    e36a:	cmp	r4, r7
    e36c:	str	r0, [sp, #12]
    e36e:	beq.n	e37a <_vdprintf_r+0x3e>
    e370:	mov	r0, r5
    e372:	mov	r1, r4
    e374:	bl	eea4 <_free_r>
    e378:	ldr	r0, [sp, #12]
    e37a:	add.w	sp, sp, #532	; 0x214
    e37e:	pop	{r4, r5, r6, r7, pc}
    e380:	mov.w	r0, #4294967295
    e384:	b.n	e37a <_vdprintf_r+0x3e>
    e386:	nop

0000e388 <vdprintf>:
    e388:	push	{r4}
    e38a:	ldr	r4, [pc, #20]	; (e3a0 <vdprintf+0x18>)
    e38c:	mov	ip, r0
    e38e:	mov	r3, r2
    e390:	ldr	r0, [r4, #0]
    e392:	ldr.w	r4, [sp], #4
    e396:	mov	r2, r1
    e398:	mov	r1, ip
    e39a:	b.w	e33c <_vdprintf_r>
    e39e:	nop
    e3a0:	.word	0x2000930c

0000e3a4 <_vasnprintf_r>:
    e3a4:	push	{r4, r5, lr}
    e3a6:	ldr	r4, [r2, #0]
    e3a8:	mov	r5, r2
    e3aa:	sub	sp, #108	; 0x6c
    e3ac:	mov	r2, r3
    e3ae:	cbz	r1, e3b4 <_vasnprintf_r+0x10>
    e3b0:	cmp	r4, #0
    e3b2:	bne.n	e3e8 <_vasnprintf_r+0x44>
    e3b4:	movs	r1, #0
    e3b6:	mov.w	r3, #648	; 0x288
    e3ba:	strh.w	r3, [sp, #12]
    e3be:	str	r1, [sp, #0]
    e3c0:	str	r1, [sp, #16]
    e3c2:	movw	r3, #65535	; 0xffff
    e3c6:	str	r1, [sp, #8]
    e3c8:	str	r1, [sp, #20]
    e3ca:	strh.w	r3, [sp, #14]
    e3ce:	mov	r1, sp
    e3d0:	ldr	r3, [sp, #120]	; 0x78
    e3d2:	bl	10430 <_svfprintf_r>
    e3d6:	cmp	r0, #0
    e3d8:	blt.n	e402 <_vasnprintf_r+0x5e>
    e3da:	ldr	r3, [sp, #0]
    e3dc:	str	r0, [r5, #0]
    e3de:	movs	r2, #0
    e3e0:	strb	r2, [r3, #0]
    e3e2:	ldr	r0, [sp, #16]
    e3e4:	add	sp, #108	; 0x6c
    e3e6:	pop	{r4, r5, pc}
    e3e8:	mov.w	r3, #1544	; 0x608
    e3ec:	str	r1, [sp, #0]
    e3ee:	str	r1, [sp, #16]
    e3f0:	strh.w	r3, [sp, #12]
    e3f4:	mov	r1, r4
    e3f6:	bge.n	e3c2 <_vasnprintf_r+0x1e>
    e3f8:	movs	r3, #139	; 0x8b
    e3fa:	str	r3, [r0, #0]
    e3fc:	movs	r0, #0
    e3fe:	add	sp, #108	; 0x6c
    e400:	pop	{r4, r5, pc}
    e402:	movs	r0, #0
    e404:	b.n	e3e4 <_vasnprintf_r+0x40>
    e406:	nop

0000e408 <memcmp>:
    e408:	cmp	r2, #3
    e40a:	push	{r4, r5, r6, lr}
    e40c:	bls.n	e438 <memcmp+0x30>
    e40e:	orr.w	r3, r0, r1
    e412:	lsls	r3, r3, #30
    e414:	bne.n	e45c <memcmp+0x54>
    e416:	mov	r4, r0
    e418:	mov	r3, r1
    e41a:	mov	r1, r3
    e41c:	mov	r0, r4
    e41e:	ldr	r6, [r1, #0]
    e420:	ldr	r5, [r0, #0]
    e422:	cmp	r5, r6
    e424:	add.w	r4, r4, #4
    e428:	add.w	r3, r3, #4
    e42c:	bne.n	e45c <memcmp+0x54>
    e42e:	subs	r2, #4
    e430:	cmp	r2, #3
    e432:	mov	r0, r4
    e434:	mov	r1, r3
    e436:	bhi.n	e41a <memcmp+0x12>
    e438:	subs	r4, r2, #1
    e43a:	cbz	r2, e464 <memcmp+0x5c>
    e43c:	subs	r2, r0, #1
    e43e:	subs	r1, #1
    e440:	b.n	e446 <memcmp+0x3e>
    e442:	adds	r3, r0, r3
    e444:	beq.n	e460 <memcmp+0x58>
    e446:	ldrb.w	lr, [r2, #1]!
    e44a:	ldrb.w	ip, [r1, #1]!
    e44e:	cmp	lr, ip
    e450:	sub.w	r3, r4, r2
    e454:	beq.n	e442 <memcmp+0x3a>
    e456:	sub.w	r0, lr, ip
    e45a:	pop	{r4, r5, r6, pc}
    e45c:	subs	r4, r2, #1
    e45e:	b.n	e43c <memcmp+0x34>
    e460:	mov	r0, r3
    e462:	pop	{r4, r5, r6, pc}
    e464:	mov	r0, r2
    e466:	pop	{r4, r5, r6, pc}

0000e468 <memmove>:
    e468:	cmp	r0, r1
    e46a:	bls.n	e488 <memmove+0x20>
    e46c:	adds	r3, r1, r2
    e46e:	cmp	r3, r0
    e470:	bls.n	e488 <memmove+0x20>
    e472:	add.w	ip, r0, r2
    e476:	cbz	r2, e4a8 <memmove+0x40>
    e478:	mov	r2, ip
    e47a:	ldrb.w	ip, [r3, #-1]!
    e47e:	strb.w	ip, [r2, #-1]!
    e482:	cmp	r1, r3
    e484:	bne.n	e47a <memmove+0x12>
    e486:	bx	lr
    e488:	cmp	r2, #15
    e48a:	bhi.n	e4aa <memmove+0x42>
    e48c:	mov	r3, r0
    e48e:	add.w	ip, r2, #4294967295
    e492:	cbz	r2, e4a8 <memmove+0x40>
    e494:	add.w	ip, ip, #1
    e498:	subs	r3, #1
    e49a:	add	ip, r1
    e49c:	ldrb.w	r2, [r1], #1
    e4a0:	strb.w	r2, [r3, #1]!
    e4a4:	cmp	r1, ip
    e4a6:	bne.n	e49c <memmove+0x34>
    e4a8:	bx	lr
    e4aa:	orr.w	r3, r0, r1
    e4ae:	lsls	r3, r3, #30
    e4b0:	bne.n	e554 <memmove+0xec>
    e4b2:	sub.w	r3, r2, #16
    e4b6:	push	{r4, r5, r6, lr}
    e4b8:	add.w	ip, r1, #32
    e4bc:	bic.w	r5, r3, #15
    e4c0:	add.w	lr, r1, #16
    e4c4:	add.w	r4, r0, #16
    e4c8:	add	ip, r5
    e4ca:	lsrs	r3, r3, #4
    e4cc:	ldr.w	r5, [lr, #-16]
    e4d0:	str.w	r5, [r4, #-16]
    e4d4:	ldr.w	r5, [lr, #-12]
    e4d8:	str.w	r5, [r4, #-12]
    e4dc:	ldr.w	r5, [lr, #-8]
    e4e0:	str.w	r5, [r4, #-8]
    e4e4:	ldr.w	r5, [lr, #-4]
    e4e8:	str.w	r5, [r4, #-4]
    e4ec:	add.w	lr, lr, #16
    e4f0:	cmp	lr, ip
    e4f2:	add.w	r4, r4, #16
    e4f6:	bne.n	e4cc <memmove+0x64>
    e4f8:	adds	r3, #1
    e4fa:	tst.w	r2, #12
    e4fe:	add.w	r1, r1, r3, lsl #4
    e502:	and.w	r4, r2, #15
    e506:	add.w	r3, r0, r3, lsl #4
    e50a:	beq.n	e55c <memmove+0xf4>
    e50c:	subs	r4, #4
    e50e:	bic.w	r6, r4, #3
    e512:	mov.w	ip, r4, lsr #2
    e516:	add	r6, r3
    e518:	subs	r4, r3, #4
    e51a:	mov	lr, r1
    e51c:	ldr.w	r5, [lr], #4
    e520:	str.w	r5, [r4, #4]!
    e524:	cmp	r4, r6
    e526:	bne.n	e51c <memmove+0xb4>
    e528:	add.w	r4, ip, #1
    e52c:	and.w	r2, r2, #3
    e530:	add.w	r3, r3, r4, lsl #2
    e534:	add.w	r1, r1, r4, lsl #2
    e538:	add.w	ip, r2, #4294967295
    e53c:	cbz	r2, e552 <memmove+0xea>
    e53e:	add.w	ip, ip, #1
    e542:	subs	r3, #1
    e544:	add	ip, r1
    e546:	ldrb.w	r2, [r1], #1
    e54a:	strb.w	r2, [r3, #1]!
    e54e:	cmp	r1, ip
    e550:	bne.n	e546 <memmove+0xde>
    e552:	pop	{r4, r5, r6, pc}
    e554:	add.w	ip, r2, #4294967295
    e558:	mov	r3, r0
    e55a:	b.n	e494 <memmove+0x2c>
    e55c:	mov	r2, r4
    e55e:	b.n	e538 <memmove+0xd0>

0000e560 <strlcat>:
    e560:	push	{r4, r5, r6, lr}
    e562:	cbz	r2, e5b8 <strlcat+0x58>
    e564:	mov	r3, r0
    e566:	adds	r5, r2, r0
    e568:	b.n	e570 <strlcat+0x10>
    e56a:	cmp	r5, r3
    e56c:	mov	ip, r3
    e56e:	beq.n	e57c <strlcat+0x1c>
    e570:	mov	ip, r3
    e572:	adds	r3, #1
    e574:	ldrb.w	r4, [ip]
    e578:	cmp	r4, #0
    e57a:	bne.n	e56a <strlcat+0xa>
    e57c:	sub.w	r6, ip, r0
    e580:	subs	r2, r2, r6
    e582:	subs	r5, r2, #1
    e584:	cbz	r2, e5ba <strlcat+0x5a>
    e586:	ldrb	r4, [r1, #0]
    e588:	mov	r3, r1
    e58a:	cbnz	r4, e59c <strlcat+0x3c>
    e58c:	b.n	e5ae <strlcat+0x4e>
    e58e:	strb.w	r4, [r2], #1
    e592:	subs	r5, #1
    e594:	mov	ip, r2
    e596:	ldrb	r4, [r3, #1]
    e598:	adds	r3, #1
    e59a:	cbz	r4, e5aa <strlcat+0x4a>
    e59c:	mov	r2, ip
    e59e:	cmp	r5, #0
    e5a0:	bne.n	e58e <strlcat+0x2e>
    e5a2:	ldrb	r2, [r3, #1]
    e5a4:	adds	r3, #1
    e5a6:	cmp	r2, #0
    e5a8:	bne.n	e596 <strlcat+0x36>
    e5aa:	subs	r3, r3, r1
    e5ac:	add	r6, r3
    e5ae:	movs	r3, #0
    e5b0:	strb.w	r3, [ip]
    e5b4:	mov	r0, r6
    e5b6:	pop	{r4, r5, r6, pc}
    e5b8:	mov	r6, r2
    e5ba:	mov	r0, r1
    e5bc:	bl	ec80 <strlen>
    e5c0:	add	r6, r0
    e5c2:	mov	r0, r6
    e5c4:	pop	{r4, r5, r6, pc}
    e5c6:	nop

0000e5c8 <strlcpy>:
    e5c8:	cbz	r2, e5fc <strlcpy+0x34>
    e5ca:	add.w	ip, r0, r2
    e5ce:	push	{lr}
    e5d0:	mov	r3, r1
    e5d2:	add.w	lr, ip, #4294967295
    e5d6:	b.n	e5e2 <strlcpy+0x1a>
    e5d8:	ldrb.w	r2, [r3], #1
    e5dc:	strb.w	r2, [r0], #1
    e5e0:	cbz	r2, e5f4 <strlcpy+0x2c>
    e5e2:	cmp	lr, r0
    e5e4:	bne.n	e5d8 <strlcpy+0x10>
    e5e6:	movs	r2, #0
    e5e8:	strb.w	r2, [ip, #-1]
    e5ec:	ldrb.w	r2, [r3], #1
    e5f0:	cmp	r2, #0
    e5f2:	bne.n	e5ec <strlcpy+0x24>
    e5f4:	subs	r1, r3, r1
    e5f6:	subs	r0, r1, #1
    e5f8:	ldr.w	pc, [sp], #4
    e5fc:	mov	r3, r1
    e5fe:	ldrb.w	r2, [r3], #1
    e602:	cmp	r2, #0
    e604:	bne.n	e5fe <strlcpy+0x36>
    e606:	subs	r1, r3, r1
    e608:	subs	r0, r1, #1
    e60a:	bx	lr

0000e60c <strncmp>:
    e60c:	cmp	r2, #0
    e60e:	beq.n	e68e <strncmp+0x82>
    e610:	orr.w	r3, r0, r1
    e614:	lsls	r3, r3, #30
    e616:	push	{r4, r5, lr}
    e618:	mov	ip, r0
    e61a:	bne.n	e67c <strncmp+0x70>
    e61c:	cmp	r2, #3
    e61e:	bls.n	e67c <strncmp+0x70>
    e620:	mov	r3, r1
    e622:	b.n	e636 <strncmp+0x2a>
    e624:	subs	r2, #4
    e626:	mov	ip, r0
    e628:	mov	r1, r3
    e62a:	beq.n	e678 <strncmp+0x6c>
    e62c:	tst.w	lr, #2155905152	; 0x80808080
    e630:	bne.n	e678 <strncmp+0x6c>
    e632:	cmp	r2, #3
    e634:	bls.n	e67c <strncmp+0x70>
    e636:	ldr	r4, [r0, #0]
    e638:	mov	r1, r3
    e63a:	ldr.w	r5, [r3], #4
    e63e:	sub.w	lr, r4, #16843009	; 0x1010101
    e642:	cmp	r4, r5
    e644:	mov	ip, r0
    e646:	bic.w	lr, lr, r4
    e64a:	add.w	r0, r0, #4
    e64e:	beq.n	e624 <strncmp+0x18>
    e650:	ldrb.w	r0, [ip]
    e654:	ldrb	r4, [r1, #0]
    e656:	cmp	r0, r4
    e658:	bne.n	e692 <strncmp+0x86>
    e65a:	mov	lr, ip
    e65c:	cbz	r0, e67a <strncmp+0x6e>
    e65e:	ldrb.w	r0, [lr, #1]!
    e662:	ldrb.w	r4, [r1, #1]!
    e666:	sub.w	r3, r2, lr
    e66a:	cmp	r0, r4
    e66c:	add.w	r3, r3, #4294967295
    e670:	bne.n	e692 <strncmp+0x86>
    e672:	adds.w	r3, ip, r3
    e676:	bne.n	e65c <strncmp+0x50>
    e678:	movs	r0, #0
    e67a:	pop	{r4, r5, pc}
    e67c:	ldrb.w	r0, [ip]
    e680:	ldrb	r4, [r1, #0]
    e682:	cmp	r4, r0
    e684:	bne.n	e692 <strncmp+0x86>
    e686:	cmp	r2, #1
    e688:	beq.n	e678 <strncmp+0x6c>
    e68a:	mov	lr, ip
    e68c:	b.n	e65c <strncmp+0x50>
    e68e:	mov	r0, r2
    e690:	bx	lr
    e692:	subs	r0, r0, r4
    e694:	pop	{r4, r5, pc}
    e696:	nop

0000e698 <strncpy>:
    e698:	orr.w	r3, r0, r1
    e69c:	lsls	r3, r3, #30
    e69e:	push	{r4, r5, lr}
    e6a0:	bne.n	e6a6 <strncpy+0xe>
    e6a2:	cmp	r2, #3
    e6a4:	bhi.n	e6c6 <strncpy+0x2e>
    e6a6:	mov	ip, r0
    e6a8:	add.w	lr, r1, #4294967295
    e6ac:	b.n	e6be <strncpy+0x26>
    e6ae:	ldrb.w	r1, [lr, #1]!
    e6b2:	strb.w	r1, [r3], #1
    e6b6:	subs	r4, r2, #1
    e6b8:	cbz	r1, e6ec <strncpy+0x54>
    e6ba:	mov	ip, r3
    e6bc:	mov	r2, r4
    e6be:	mov	r3, ip
    e6c0:	cmp	r2, #0
    e6c2:	bne.n	e6ae <strncpy+0x16>
    e6c4:	pop	{r4, r5, pc}
    e6c6:	mov	r3, r1
    e6c8:	mov	ip, r0
    e6ca:	mov	r1, r3
    e6cc:	ldr.w	r5, [r3], #4
    e6d0:	sub.w	r4, r5, #16843009	; 0x1010101
    e6d4:	bic.w	r4, r4, r5
    e6d8:	tst.w	r4, #2155905152	; 0x80808080
    e6dc:	bne.n	e6a8 <strncpy+0x10>
    e6de:	subs	r2, #4
    e6e0:	cmp	r2, #3
    e6e2:	str.w	r5, [ip], #4
    e6e6:	mov	r1, r3
    e6e8:	bhi.n	e6ca <strncpy+0x32>
    e6ea:	b.n	e6a8 <strncpy+0x10>
    e6ec:	add	ip, r2
    e6ee:	cmp	r4, #0
    e6f0:	beq.n	e6c4 <strncpy+0x2c>
    e6f2:	strb.w	r1, [r3], #1
    e6f6:	cmp	r3, ip
    e6f8:	bne.n	e6f2 <strncpy+0x5a>
    e6fa:	pop	{r4, r5, pc}

0000e6fc <__locale_mb_cur_max>:
    e6fc:	ldr	r3, [pc, #4]	; (e704 <__locale_mb_cur_max+0x8>)
    e6fe:	ldrb.w	r0, [r3, #296]	; 0x128
    e702:	bx	lr
    e704:	.word	0x20008d84

0000e708 <_close_r>:
    e708:	push	{r3, r4, r5, lr}
    e70a:	ldr	r5, [pc, #28]	; (e728 <_close_r+0x20>)
    e70c:	movs	r2, #0
    e70e:	mov	r4, r0
    e710:	mov	r0, r1
    e712:	str	r2, [r5, #0]
    e714:	bl	b384 <_close>
    e718:	adds	r3, r0, #1
    e71a:	beq.n	e71e <_close_r+0x16>
    e71c:	pop	{r3, r4, r5, pc}
    e71e:	ldr	r3, [r5, #0]
    e720:	cmp	r3, #0
    e722:	beq.n	e71c <_close_r+0x14>
    e724:	str	r3, [r4, #0]
    e726:	pop	{r3, r4, r5, pc}
    e728:	.word	0x20027770

0000e72c <_lseek_r>:
    e72c:	push	{r3, r4, r5, lr}
    e72e:	mov	r4, r1
    e730:	ldr	r5, [pc, #32]	; (e754 <_lseek_r+0x28>)
    e732:	mov	ip, r0
    e734:	mov	r1, r2
    e736:	mov	r0, r4
    e738:	mov	r2, r3
    e73a:	movs	r3, #0
    e73c:	str	r3, [r5, #0]
    e73e:	mov	r4, ip
    e740:	bl	b398 <_lseek>
    e744:	adds	r3, r0, #1
    e746:	beq.n	e74a <_lseek_r+0x1e>
    e748:	pop	{r3, r4, r5, pc}
    e74a:	ldr	r3, [r5, #0]
    e74c:	cmp	r3, #0
    e74e:	beq.n	e748 <_lseek_r+0x1c>
    e750:	str	r3, [r4, #0]
    e752:	pop	{r3, r4, r5, pc}
    e754:	.word	0x20027770

0000e758 <_read_r>:
    e758:	push	{r3, r4, r5, lr}
    e75a:	mov	r4, r1
    e75c:	ldr	r5, [pc, #32]	; (e780 <_read_r+0x28>)
    e75e:	mov	ip, r0
    e760:	mov	r1, r2
    e762:	mov	r0, r4
    e764:	mov	r2, r3
    e766:	movs	r3, #0
    e768:	str	r3, [r5, #0]
    e76a:	mov	r4, ip
    e76c:	bl	b380 <_read>
    e770:	adds	r3, r0, #1
    e772:	beq.n	e776 <_read_r+0x1e>
    e774:	pop	{r3, r4, r5, pc}
    e776:	ldr	r3, [r5, #0]
    e778:	cmp	r3, #0
    e77a:	beq.n	e774 <_read_r+0x1c>
    e77c:	str	r3, [r4, #0]
    e77e:	pop	{r3, r4, r5, pc}
    e780:	.word	0x20027770

0000e784 <_sbrk_r>:
    e784:	push	{r3, r4, r5, lr}
    e786:	ldr	r5, [pc, #28]	; (e7a4 <_sbrk_r+0x20>)
    e788:	movs	r2, #0
    e78a:	mov	r4, r0
    e78c:	mov	r0, r1
    e78e:	str	r2, [r5, #0]
    e790:	bl	b354 <_sbrk>
    e794:	adds	r3, r0, #1
    e796:	beq.n	e79a <_sbrk_r+0x16>
    e798:	pop	{r3, r4, r5, pc}
    e79a:	ldr	r3, [r5, #0]
    e79c:	cmp	r3, #0
    e79e:	beq.n	e798 <_sbrk_r+0x14>
    e7a0:	str	r3, [r4, #0]
    e7a2:	pop	{r3, r4, r5, pc}
    e7a4:	.word	0x20027770

0000e7a8 <_write_r>:
    e7a8:	push	{r3, r4, r5, lr}
    e7aa:	mov	r4, r1
    e7ac:	ldr	r5, [pc, #32]	; (e7d0 <_write_r+0x28>)
    e7ae:	mov	ip, r0
    e7b0:	mov	r1, r2
    e7b2:	mov	r0, r4
    e7b4:	mov	r2, r3
    e7b6:	movs	r3, #0
    e7b8:	str	r3, [r5, #0]
    e7ba:	mov	r4, ip
    e7bc:	bl	c148 <_write>
    e7c0:	adds	r3, r0, #1
    e7c2:	beq.n	e7c6 <_write_r+0x1e>
    e7c4:	pop	{r3, r4, r5, pc}
    e7c6:	ldr	r3, [r5, #0]
    e7c8:	cmp	r3, #0
    e7ca:	beq.n	e7c4 <_write_r+0x1c>
    e7cc:	str	r3, [r4, #0]
    e7ce:	pop	{r3, r4, r5, pc}
    e7d0:	.word	0x20027770

0000e7d4 <__errno>:
    e7d4:	ldr	r3, [pc, #4]	; (e7dc <__errno+0x8>)
    e7d6:	ldr	r0, [r3, #0]
    e7d8:	bx	lr
    e7da:	nop
    e7dc:	.word	0x2000930c

0000e7e0 <__libc_init_array>:
    e7e0:	push	{r4, r5, r6, lr}
    e7e2:	ldr	r6, [pc, #52]	; (e818 <__libc_init_array+0x38>)
    e7e4:	ldr	r5, [pc, #52]	; (e81c <__libc_init_array+0x3c>)
    e7e6:	subs	r6, r6, r5
    e7e8:	asrs	r6, r6, #2
    e7ea:	beq.n	e7fa <__libc_init_array+0x1a>
    e7ec:	movs	r4, #0
    e7ee:	ldr.w	r3, [r5], #4
    e7f2:	adds	r4, #1
    e7f4:	blx	r3
    e7f6:	cmp	r6, r4
    e7f8:	bne.n	e7ee <__libc_init_array+0xe>
    e7fa:	ldr	r6, [pc, #36]	; (e820 <__libc_init_array+0x40>)
    e7fc:	ldr	r5, [pc, #36]	; (e824 <__libc_init_array+0x44>)
    e7fe:	subs	r6, r6, r5
    e800:	bl	170d8 <___init_veneer>
    e804:	asrs	r6, r6, #2
    e806:	beq.n	e816 <__libc_init_array+0x36>
    e808:	movs	r4, #0
    e80a:	ldr.w	r3, [r5], #4
    e80e:	adds	r4, #1
    e810:	blx	r3
    e812:	cmp	r6, r4
    e814:	bne.n	e80a <__libc_init_array+0x2a>
    e816:	pop	{r4, r5, r6, pc}
    e818:	.word	0x600024c0
    e81c:	.word	0x600024c0
    e820:	.word	0x600024d0
    e824:	.word	0x600024c0

0000e828 <__retarget_lock_init_recursive>:
    e828:	bx	lr
    e82a:	nop

0000e82c <__retarget_lock_close_recursive>:
    e82c:	bx	lr
    e82e:	nop

0000e830 <__retarget_lock_acquire_recursive>:
    e830:	bx	lr
    e832:	nop

0000e834 <__retarget_lock_release_recursive>:
    e834:	bx	lr
    e836:	nop
	...
    e840:	sub.w	r0, r2, r3
    e844:	bx	lr
    e846:	nop

0000e848 <strcmp>:
    e848:	ldrb	r2, [r0, #0]
    e84a:	ldrb	r3, [r1, #0]
    e84c:	cmp	r2, #1
    e84e:	it	cs
    e850:	cmpcs	r2, r3
    e852:	bne.n	e840 <__retarget_lock_release_recursive+0xc>
    e854:	strd	r4, r5, [sp, #-16]!
    e858:	orr.w	r4, r0, r1
    e85c:	strd	r6, r7, [sp, #8]
    e860:	mvn.w	ip, #0
    e864:	mov.w	r2, r4, lsl #29
    e868:	cbz	r2, e8b0 <strcmp+0x68>
    e86a:	eor.w	r4, r0, r1
    e86e:	tst.w	r4, #7
    e872:	bne.n	e94a <strcmp+0x102>
    e874:	and.w	r4, r0, #7
    e878:	bic.w	r0, r0, #7
    e87c:	and.w	r5, r4, #3
    e880:	bic.w	r1, r1, #7
    e884:	mov.w	r5, r5, lsl #3
    e888:	ldrd	r2, r3, [r0], #16
    e88c:	tst.w	r4, #4
    e890:	ldrd	r6, r7, [r1], #16
    e894:	lsl.w	r4, ip, r5
    e898:	orn	r2, r2, r4
    e89c:	orn	r6, r6, r4
    e8a0:	beq.n	e8b8 <strcmp+0x70>
    e8a2:	orn	r3, r3, r4
    e8a6:	mov	r2, ip
    e8a8:	orn	r7, r7, r4
    e8ac:	mov	r6, ip
    e8ae:	b.n	e8b8 <strcmp+0x70>
    e8b0:	ldrd	r2, r3, [r0], #16
    e8b4:	ldrd	r6, r7, [r1], #16
    e8b8:	uadd8	r5, r2, ip
    e8bc:	eor.w	r4, r2, r6
    e8c0:	sel	r4, r4, ip
    e8c4:	cbnz	r4, e922 <strcmp+0xda>
    e8c6:	uadd8	r5, r3, ip
    e8ca:	eor.w	r5, r3, r7
    e8ce:	sel	r5, r5, ip
    e8d2:	cbnz	r5, e8fa <strcmp+0xb2>
    e8d4:	ldrd	r2, r3, [r0, #-8]
    e8d8:	ldrd	r6, r7, [r1, #-8]
    e8dc:	uadd8	r5, r2, ip
    e8e0:	eor.w	r4, r2, r6
    e8e4:	sel	r4, r4, ip
    e8e8:	uadd8	r5, r3, ip
    e8ec:	eor.w	r5, r3, r7
    e8f0:	sel	r5, r5, ip
    e8f4:	orrs	r5, r4
    e8f6:	beq.n	e8b0 <strcmp+0x68>
    e8f8:	cbnz	r4, e922 <strcmp+0xda>
    e8fa:	rev	r5, r5
    e8fc:	clz	r4, r5
    e900:	bic.w	r4, r4, #7
    e904:	lsr.w	r1, r7, r4
    e908:	ldrd	r6, r7, [sp, #8]
    e90c:	lsr.w	r3, r3, r4
    e910:	and.w	r0, r3, #255	; 0xff
    e914:	and.w	r1, r1, #255	; 0xff
    e918:	ldrd	r4, r5, [sp], #16
    e91c:	sub.w	r0, r0, r1
    e920:	bx	lr
    e922:	rev	r4, r4
    e924:	clz	r4, r4
    e928:	bic.w	r4, r4, #7
    e92c:	lsr.w	r1, r6, r4
    e930:	ldrd	r6, r7, [sp, #8]
    e934:	lsr.w	r2, r2, r4
    e938:	and.w	r0, r2, #255	; 0xff
    e93c:	and.w	r1, r1, #255	; 0xff
    e940:	ldrd	r4, r5, [sp], #16
    e944:	sub.w	r0, r0, r1
    e948:	bx	lr
    e94a:	tst.w	r4, #3
    e94e:	bne.n	e9ca <strcmp+0x182>
    e950:	ands.w	r4, r0, #3
    e954:	bne.n	e9a8 <strcmp+0x160>
    e956:	ldr.w	r2, [r0], #8
    e95a:	ldr.w	r3, [r1], #8
    e95e:	uadd8	r5, r2, ip
    e962:	eor.w	r5, r2, r3
    e966:	sel	r5, r5, ip
    e96a:	cbnz	r5, e984 <strcmp+0x13c>
    e96c:	ldr.w	r2, [r0, #-4]
    e970:	ldr.w	r3, [r1, #-4]
    e974:	uadd8	r5, r2, ip
    e978:	eor.w	r5, r2, r3
    e97c:	sel	r5, r5, ip
    e980:	cmp	r5, #0
    e982:	beq.n	e956 <strcmp+0x10e>
    e984:	rev	r5, r5
    e986:	clz	r4, r5
    e98a:	bic.w	r4, r4, #7
    e98e:	lsr.w	r1, r3, r4
    e992:	lsr.w	r2, r2, r4
    e996:	and.w	r0, r2, #255	; 0xff
    e99a:	and.w	r1, r1, #255	; 0xff
    e99e:	ldrd	r4, r5, [sp], #16
    e9a2:	sub.w	r0, r0, r1
    e9a6:	bx	lr
    e9a8:	mov.w	r4, r4, lsl #3
    e9ac:	bic.w	r0, r0, #3
    e9b0:	ldr.w	r2, [r0], #8
    e9b4:	bic.w	r1, r1, #3
    e9b8:	ldr.w	r3, [r1], #8
    e9bc:	lsl.w	r4, ip, r4
    e9c0:	orn	r2, r2, r4
    e9c4:	orn	r3, r3, r4
    e9c8:	b.n	e95e <strcmp+0x116>
    e9ca:	ands.w	r4, r0, #3
    e9ce:	beq.n	ea06 <strcmp+0x1be>
    e9d0:	sub.w	r1, r1, r4
    e9d4:	bic.w	r0, r0, #3
    e9d8:	lsls	r4, r4, #31
    e9da:	ldr.w	r2, [r0], #4
    e9de:	beq.n	e9ee <strcmp+0x1a6>
    e9e0:	bcs.n	ea02 <strcmp+0x1ba>
    e9e2:	ldrb	r3, [r1, #2]
    e9e4:	uxtb.w	r4, r2, ror #16
    e9e8:	subs	r4, r4, r3
    e9ea:	bne.n	e9fa <strcmp+0x1b2>
    e9ec:	cbz	r3, e9fa <strcmp+0x1b2>
    e9ee:	ldrb	r3, [r1, #3]
    e9f0:	uxtb.w	r4, r2, ror #24
    e9f4:	subs	r4, r4, r3
    e9f6:	bne.n	e9fa <strcmp+0x1b2>
    e9f8:	cbnz	r3, ea02 <strcmp+0x1ba>
    e9fa:	mov	r0, r4
    e9fc:	ldr.w	r4, [sp], #16
    ea00:	bx	lr
    ea02:	add.w	r1, r1, #4
    ea06:	ldr.w	r2, [r0], #4
    ea0a:	lsls	r4, r1, #31
    ea0c:	bic.w	r1, r1, #3
    ea10:	ldr.w	r3, [r1], #4
    ea14:	bhi.n	eaa8 <strcmp+0x260>
    ea16:	bcs.n	ea62 <strcmp+0x21a>
    ea18:	bic.w	r4, r2, #4278190080	; 0xff000000
    ea1c:	uadd8	r5, r2, ip
    ea20:	eors.w	r5, r4, r3, lsr #8
    ea24:	sel	r5, r5, ip
    ea28:	bne.n	ea40 <strcmp+0x1f8>
    ea2a:	cbnz	r5, ea46 <strcmp+0x1fe>
    ea2c:	ldr.w	r3, [r1], #4
    ea30:	eor.w	r4, r4, r2
    ea34:	cmp.w	r4, r3, lsl #24
    ea38:	bne.n	ea58 <strcmp+0x210>
    ea3a:	ldr.w	r2, [r0], #4
    ea3e:	b.n	ea18 <strcmp+0x1d0>
    ea40:	mov.w	r3, r3, lsr #8
    ea44:	b.n	eaf2 <strcmp+0x2aa>
    ea46:	bics.w	r5, r5, #4278190080	; 0xff000000
    ea4a:	bne.n	eae8 <strcmp+0x2a0>
    ea4c:	ldrb	r0, [r1, #0]
    ea4e:	ldrd	r4, r5, [sp], #16
    ea52:	rsb	r0, r0, #0
    ea56:	bx	lr
    ea58:	mov.w	r2, r2, lsr #24
    ea5c:	and.w	r3, r3, #255	; 0xff
    ea60:	b.n	eaf2 <strcmp+0x2aa>
    ea62:	and.w	r4, r2, ip, lsr #16
    ea66:	uadd8	r5, r2, ip
    ea6a:	eors.w	r5, r4, r3, lsr #16
    ea6e:	sel	r5, r5, ip
    ea72:	bne.n	ea8a <strcmp+0x242>
    ea74:	cbnz	r5, ea90 <strcmp+0x248>
    ea76:	ldr.w	r3, [r1], #4
    ea7a:	eor.w	r4, r4, r2
    ea7e:	cmp.w	r4, r3, lsl #16
    ea82:	bne.n	ea9e <strcmp+0x256>
    ea84:	ldr.w	r2, [r0], #4
    ea88:	b.n	ea62 <strcmp+0x21a>
    ea8a:	mov.w	r3, r3, lsr #16
    ea8e:	b.n	eaf2 <strcmp+0x2aa>
    ea90:	ands.w	r5, r5, ip, lsr #16
    ea94:	bne.n	eae8 <strcmp+0x2a0>
    ea96:	ldrh	r3, [r1, #0]
    ea98:	mov.w	r2, r2, lsr #16
    ea9c:	b.n	eaf2 <strcmp+0x2aa>
    ea9e:	mov.w	r2, r2, lsr #16
    eaa2:	and.w	r3, r3, ip, lsr #16
    eaa6:	b.n	eaf2 <strcmp+0x2aa>
    eaa8:	and.w	r4, r2, #255	; 0xff
    eaac:	uadd8	r5, r2, ip
    eab0:	eors.w	r5, r4, r3, lsr #24
    eab4:	sel	r5, r5, ip
    eab8:	bne.n	ead0 <strcmp+0x288>
    eaba:	cbnz	r5, ead6 <strcmp+0x28e>
    eabc:	ldr.w	r3, [r1], #4
    eac0:	eor.w	r4, r4, r2
    eac4:	cmp.w	r4, r3, lsl #8
    eac8:	bne.n	eade <strcmp+0x296>
    eaca:	ldr.w	r2, [r0], #4
    eace:	b.n	eaa8 <strcmp+0x260>
    ead0:	mov.w	r3, r3, lsr #24
    ead4:	b.n	eaf2 <strcmp+0x2aa>
    ead6:	tst.w	r5, #255	; 0xff
    eada:	bne.n	eae8 <strcmp+0x2a0>
    eadc:	ldr	r3, [r1, #0]
    eade:	mov.w	r2, r2, lsr #8
    eae2:	bic.w	r3, r3, #4278190080	; 0xff000000
    eae6:	b.n	eaf2 <strcmp+0x2aa>
    eae8:	mov.w	r0, #0
    eaec:	ldrd	r4, r5, [sp], #16
    eaf0:	bx	lr
    eaf2:	rev	r2, r2
    eaf4:	rev	r3, r3
    eaf6:	uadd8	r4, r2, ip
    eafa:	eor.w	r4, r2, r3
    eafe:	sel	r5, r4, ip
    eb02:	clz	r4, r5
    eb06:	lsl.w	r2, r2, r4
    eb0a:	lsl.w	r3, r3, r4
    eb0e:	mov.w	r0, r2, lsr #24
    eb12:	ldrd	r4, r5, [sp], #16
    eb16:	sub.w	r0, r0, r3, lsr #24
    eb1a:	bx	lr

0000eb1c <strcpy>:
    eb1c:	eor.w	r2, r0, r1
    eb20:	mov	ip, r0
    eb22:	tst.w	r2, #3
    eb26:	bne.n	ebc8 <strcpy+0xac>
    eb28:	tst.w	r1, #3
    eb2c:	bne.n	eb94 <strcpy+0x78>
    eb2e:	str.w	r4, [sp, #-4]!
    eb32:	tst.w	r1, #4
    eb36:	ldr.w	r3, [r1], #4
    eb3a:	beq.n	eb54 <strcpy+0x38>
    eb3c:	sub.w	r2, r3, #16843009	; 0x1010101
    eb40:	bics	r2, r3
    eb42:	tst.w	r2, #2155905152	; 0x80808080
    eb46:	itt	eq
    eb48:	streq.w	r3, [ip], #4
    eb4c:	ldreq.w	r3, [r1], #4
    eb50:	bne.n	eb80 <strcpy+0x64>
    eb52:	nop
    eb54:	ldr.w	r4, [r1], #4
    eb58:	sub.w	r2, r3, #16843009	; 0x1010101
    eb5c:	bics	r2, r3
    eb5e:	tst.w	r2, #2155905152	; 0x80808080
    eb62:	sub.w	r2, r4, #16843009	; 0x1010101
    eb66:	bne.n	eb80 <strcpy+0x64>
    eb68:	str.w	r3, [ip], #4
    eb6c:	bics	r2, r4
    eb6e:	tst.w	r2, #2155905152	; 0x80808080
    eb72:	itt	eq
    eb74:	ldreq.w	r3, [r1], #4
    eb78:	streq.w	r4, [ip], #4
    eb7c:	beq.n	eb54 <strcpy+0x38>
    eb7e:	mov	r3, r4
    eb80:	strb.w	r3, [ip], #1
    eb84:	tst.w	r3, #255	; 0xff
    eb88:	mov.w	r3, r3, ror #8
    eb8c:	bne.n	eb80 <strcpy+0x64>
    eb8e:	ldr.w	r4, [sp], #4
    eb92:	bx	lr
    eb94:	tst.w	r1, #1
    eb98:	beq.n	eba8 <strcpy+0x8c>
    eb9a:	ldrb.w	r2, [r1], #1
    eb9e:	strb.w	r2, [ip], #1
    eba2:	cmp	r2, #0
    eba4:	it	eq
    eba6:	bxeq	lr
    eba8:	tst.w	r1, #2
    ebac:	beq.n	eb2e <strcpy+0x12>
    ebae:	ldrh.w	r2, [r1], #2
    ebb2:	tst.w	r2, #255	; 0xff
    ebb6:	itet	ne
    ebb8:	strhne.w	r2, [ip], #2
    ebbc:	strbeq.w	r2, [ip]
    ebc0:	tstne.w	r2, #65280	; 0xff00
    ebc4:	bne.n	eb2e <strcpy+0x12>
    ebc6:	bx	lr
    ebc8:	ldrb.w	r2, [r1], #1
    ebcc:	strb.w	r2, [ip], #1
    ebd0:	cmp	r2, #0
    ebd2:	bne.n	ebc8 <strcpy+0xac>
    ebd4:	bx	lr
    ebd6:	nop
	...

0000ebe0 <memchr>:
    ebe0:	and.w	r1, r1, #255	; 0xff
    ebe4:	cmp	r2, #16
    ebe6:	blt.n	ec40 <memchr+0x60>
    ebe8:	tst.w	r0, #7
    ebec:	beq.n	ec00 <memchr+0x20>
    ebee:	ldrb.w	r3, [r0], #1
    ebf2:	subs	r2, #1
    ebf4:	cmp	r3, r1
    ebf6:	beq.n	ec54 <memchr+0x74>
    ebf8:	tst.w	r0, #7
    ebfc:	cbz	r2, ec50 <memchr+0x70>
    ebfe:	bne.n	ebee <memchr+0xe>
    ec00:	push	{r4, r5, r6, r7}
    ec02:	orr.w	r1, r1, r1, lsl #8
    ec06:	orr.w	r1, r1, r1, lsl #16
    ec0a:	bic.w	r4, r2, #7
    ec0e:	mvns.w	r7, #0
    ec12:	movs	r3, #0
    ec14:	ldrd	r5, r6, [r0], #8
    ec18:	subs	r4, #8
    ec1a:	eor.w	r5, r5, r1
    ec1e:	eor.w	r6, r6, r1
    ec22:	uadd8	r5, r5, r7
    ec26:	sel	r5, r3, r7
    ec2a:	uadd8	r6, r6, r7
    ec2e:	sel	r6, r5, r7
    ec32:	cbnz	r6, ec58 <memchr+0x78>
    ec34:	bne.n	ec14 <memchr+0x34>
    ec36:	pop	{r4, r5, r6, r7}
    ec38:	and.w	r1, r1, #255	; 0xff
    ec3c:	and.w	r2, r2, #7
    ec40:	cbz	r2, ec50 <memchr+0x70>
    ec42:	ldrb.w	r3, [r0], #1
    ec46:	subs	r2, #1
    ec48:	eor.w	r3, r3, r1
    ec4c:	cbz	r3, ec54 <memchr+0x74>
    ec4e:	bne.n	ec42 <memchr+0x62>
    ec50:	movs	r0, #0
    ec52:	bx	lr
    ec54:	subs	r0, #1
    ec56:	bx	lr
    ec58:	cmp	r5, #0
    ec5a:	itte	eq
    ec5c:	moveq	r5, r6
    ec5e:	subeq	r0, #3
    ec60:	subne	r0, #7
    ec62:	tst.w	r5, #1
    ec66:	bne.n	ec78 <memchr+0x98>
    ec68:	adds	r0, #1
    ec6a:	tst.w	r5, #256	; 0x100
    ec6e:	ittt	eq
    ec70:	addeq	r0, #1
    ec72:	tsteq.w	r5, #98304	; 0x18000
    ec76:	addeq	r0, #1
    ec78:	pop	{r4, r5, r6, r7}
    ec7a:	subs	r0, #1
    ec7c:	bx	lr
    ec7e:	nop

0000ec80 <strlen>:
    ec80:	pld	[r0]
    ec84:	strd	r4, r5, [sp, #-8]!
    ec88:	bic.w	r1, r0, #7
    ec8c:	mvn.w	ip, #0
    ec90:	ands.w	r4, r0, #7
    ec94:	pld	[r1, #32]
    ec98:	bne.w	ed2e <strlen+0xae>
    ec9c:	mov.w	r4, #0
    eca0:	mvn.w	r0, #7
    eca4:	ldrd	r2, r3, [r1]
    eca8:	pld	[r1, #64]	; 0x40
    ecac:	add.w	r0, r0, #8
    ecb0:	uadd8	r2, r2, ip
    ecb4:	sel	r2, r4, ip
    ecb8:	uadd8	r3, r3, ip
    ecbc:	sel	r3, r2, ip
    ecc0:	cbnz	r3, ed16 <strlen+0x96>
    ecc2:	ldrd	r2, r3, [r1, #8]
    ecc6:	uadd8	r2, r2, ip
    ecca:	add.w	r0, r0, #8
    ecce:	sel	r2, r4, ip
    ecd2:	uadd8	r3, r3, ip
    ecd6:	sel	r3, r2, ip
    ecda:	cbnz	r3, ed16 <strlen+0x96>
    ecdc:	ldrd	r2, r3, [r1, #16]
    ece0:	uadd8	r2, r2, ip
    ece4:	add.w	r0, r0, #8
    ece8:	sel	r2, r4, ip
    ecec:	uadd8	r3, r3, ip
    ecf0:	sel	r3, r2, ip
    ecf4:	cbnz	r3, ed16 <strlen+0x96>
    ecf6:	ldrd	r2, r3, [r1, #24]
    ecfa:	add.w	r1, r1, #32
    ecfe:	uadd8	r2, r2, ip
    ed02:	add.w	r0, r0, #8
    ed06:	sel	r2, r4, ip
    ed0a:	uadd8	r3, r3, ip
    ed0e:	sel	r3, r2, ip
    ed12:	cmp	r3, #0
    ed14:	beq.n	eca4 <strlen+0x24>
    ed16:	cmp	r2, #0
    ed18:	itt	eq
    ed1a:	addeq	r0, #4
    ed1c:	moveq	r2, r3
    ed1e:	rev	r2, r2
    ed20:	clz	r2, r2
    ed24:	ldrd	r4, r5, [sp], #8
    ed28:	add.w	r0, r0, r2, lsr #3
    ed2c:	bx	lr
    ed2e:	ldrd	r2, r3, [r1]
    ed32:	and.w	r5, r4, #3
    ed36:	rsb	r0, r4, #0
    ed3a:	mov.w	r5, r5, lsl #3
    ed3e:	tst.w	r4, #4
    ed42:	pld	[r1, #64]	; 0x40
    ed46:	lsl.w	r5, ip, r5
    ed4a:	orn	r2, r2, r5
    ed4e:	itt	ne
    ed50:	ornne	r3, r3, r5
    ed54:	movne	r2, ip
    ed56:	mov.w	r4, #0
    ed5a:	b.n	ecb0 <strlen+0x30>
    ed5c:	movs	r0, r0
	...

0000ed60 <nan>:
    ed60:	vldr	d0, [pc, #4]	; ed68 <nan+0x8>
    ed64:	bx	lr
    ed66:	nop
    ed68:	.word	0x00000000
    ed6c:	.word	0x7ff80000

0000ed70 <nanf>:
    ed70:	vldr	s0, [pc, #4]	; ed78 <nanf+0x8>
    ed74:	bx	lr
    ed76:	nop
    ed78:	.word	0x7fc00000

0000ed7c <__register_exitproc>:
    ed7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed80:	ldr.w	sl, [pc, #124]	; ee00 <__register_exitproc+0x84>
    ed84:	mov	r6, r0
    ed86:	ldr.w	r0, [sl]
    ed8a:	mov	r8, r3
    ed8c:	mov	r7, r1
    ed8e:	mov	r9, r2
    ed90:	bl	e830 <__retarget_lock_acquire_recursive>
    ed94:	ldr	r3, [pc, #96]	; (edf8 <__register_exitproc+0x7c>)
    ed96:	ldr	r4, [r3, #0]
    ed98:	cbz	r4, ede4 <__register_exitproc+0x68>
    ed9a:	ldr	r5, [r4, #4]
    ed9c:	cmp	r5, #31
    ed9e:	bgt.n	edea <__register_exitproc+0x6e>
    eda0:	cbnz	r6, edba <__register_exitproc+0x3e>
    eda2:	adds	r3, r5, #1
    eda4:	adds	r5, #2
    eda6:	ldr.w	r0, [sl]
    edaa:	str	r3, [r4, #4]
    edac:	str.w	r7, [r4, r5, lsl #2]
    edb0:	bl	e834 <__retarget_lock_release_recursive>
    edb4:	movs	r0, #0
    edb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    edba:	add.w	r1, r4, r5, lsl #2
    edbe:	movs	r3, #1
    edc0:	str.w	r9, [r1, #136]	; 0x88
    edc4:	ldr.w	r2, [r4, #392]	; 0x188
    edc8:	lsls	r3, r5
    edca:	orrs	r2, r3
    edcc:	cmp	r6, #2
    edce:	str.w	r2, [r4, #392]	; 0x188
    edd2:	str.w	r8, [r1, #264]	; 0x108
    edd6:	bne.n	eda2 <__register_exitproc+0x26>
    edd8:	ldr.w	r2, [r4, #396]	; 0x18c
    eddc:	orrs	r2, r3
    edde:	str.w	r2, [r4, #396]	; 0x18c
    ede2:	b.n	eda2 <__register_exitproc+0x26>
    ede4:	ldr	r4, [pc, #20]	; (edfc <__register_exitproc+0x80>)
    ede6:	str	r4, [r3, #0]
    ede8:	b.n	ed9a <__register_exitproc+0x1e>
    edea:	ldr.w	r0, [sl]
    edee:	bl	e834 <__retarget_lock_release_recursive>
    edf2:	mov.w	r0, #4294967295
    edf6:	b.n	edb6 <__register_exitproc+0x3a>
    edf8:	.word	0x20027254
    edfc:	.word	0x20027258
    ee00:	.word	0x20008d78

0000ee04 <_malloc_trim_r>:
    ee04:	push	{r3, r4, r5, r6, r7, lr}
    ee06:	ldr	r7, [pc, #144]	; (ee98 <_malloc_trim_r+0x94>)
    ee08:	mov	r4, r1
    ee0a:	mov	r6, r0
    ee0c:	bl	cbe0 <__malloc_lock>
    ee10:	ldr	r3, [r7, #8]
    ee12:	ldr	r5, [r3, #4]
    ee14:	rsb	r1, r4, #4064	; 0xfe0
    ee18:	adds	r1, #15
    ee1a:	bic.w	r5, r5, #3
    ee1e:	adds	r3, r1, r5
    ee20:	bic.w	r3, r3, #4080	; 0xff0
    ee24:	bic.w	r3, r3, #15
    ee28:	sub.w	r4, r3, #4096	; 0x1000
    ee2c:	cmp.w	r4, #4096	; 0x1000
    ee30:	blt.n	ee42 <_malloc_trim_r+0x3e>
    ee32:	movs	r1, #0
    ee34:	mov	r0, r6
    ee36:	bl	e784 <_sbrk_r>
    ee3a:	ldr	r3, [r7, #8]
    ee3c:	add	r3, r5
    ee3e:	cmp	r0, r3
    ee40:	beq.n	ee4c <_malloc_trim_r+0x48>
    ee42:	mov	r0, r6
    ee44:	bl	cbec <__malloc_unlock>
    ee48:	movs	r0, #0
    ee4a:	pop	{r3, r4, r5, r6, r7, pc}
    ee4c:	negs	r1, r4
    ee4e:	mov	r0, r6
    ee50:	bl	e784 <_sbrk_r>
    ee54:	adds	r0, #1
    ee56:	beq.n	ee74 <_malloc_trim_r+0x70>
    ee58:	ldr	r2, [pc, #64]	; (ee9c <_malloc_trim_r+0x98>)
    ee5a:	ldr	r3, [r7, #8]
    ee5c:	subs	r5, r5, r4
    ee5e:	orr.w	r5, r5, #1
    ee62:	str	r5, [r3, #4]
    ee64:	ldr	r3, [r2, #0]
    ee66:	mov	r0, r6
    ee68:	subs	r3, r3, r4
    ee6a:	str	r3, [r2, #0]
    ee6c:	bl	cbec <__malloc_unlock>
    ee70:	movs	r0, #1
    ee72:	pop	{r3, r4, r5, r6, r7, pc}
    ee74:	movs	r1, #0
    ee76:	mov	r0, r6
    ee78:	bl	e784 <_sbrk_r>
    ee7c:	ldr	r2, [r7, #8]
    ee7e:	subs	r3, r0, r2
    ee80:	cmp	r3, #15
    ee82:	ble.n	ee42 <_malloc_trim_r+0x3e>
    ee84:	orr.w	r3, r3, #1
    ee88:	str	r3, [r2, #4]
    ee8a:	ldr	r3, [pc, #20]	; (eea0 <_malloc_trim_r+0x9c>)
    ee8c:	ldr	r1, [pc, #12]	; (ee9c <_malloc_trim_r+0x98>)
    ee8e:	ldr	r3, [r3, #0]
    ee90:	subs	r0, r0, r3
    ee92:	str	r0, [r1, #0]
    ee94:	b.n	ee42 <_malloc_trim_r+0x3e>
    ee96:	nop
    ee98:	.word	0x20008ef0
    ee9c:	.word	0x200273f4
    eea0:	.word	0x200092f8

0000eea4 <_free_r>:
    eea4:	cmp	r1, #0
    eea6:	beq.n	ef6c <_free_r+0xc8>
    eea8:	push	{r3, r4, r5, r6, r7, lr}
    eeaa:	mov	r4, r1
    eeac:	mov	r6, r0
    eeae:	bl	cbe0 <__malloc_lock>
    eeb2:	ldr.w	r2, [r4, #-4]
    eeb6:	ldr	r7, [pc, #492]	; (f0a4 <_free_r+0x200>)
    eeb8:	sub.w	r5, r4, #8
    eebc:	bic.w	r1, r2, #1
    eec0:	add.w	ip, r5, r1
    eec4:	ldr	r0, [r7, #8]
    eec6:	ldr.w	r3, [ip, #4]
    eeca:	cmp	r0, ip
    eecc:	bic.w	r3, r3, #3
    eed0:	beq.w	efea <_free_r+0x146>
    eed4:	lsls	r2, r2, #31
    eed6:	str.w	r3, [ip, #4]
    eeda:	bmi.n	ef42 <_free_r+0x9e>
    eedc:	ldr.w	r2, [r4, #-8]
    eee0:	subs	r5, r5, r2
    eee2:	add	r1, r2
    eee4:	ldr	r2, [r5, #8]
    eee6:	add.w	r0, r7, #8
    eeea:	cmp	r2, r0
    eeec:	beq.n	efc4 <_free_r+0x120>
    eeee:	add.w	r4, ip, r3
    eef2:	ldr.w	lr, [r4, #4]
    eef6:	ldr	r4, [r5, #12]
    eef8:	str	r4, [r2, #12]
    eefa:	tst.w	lr, #1
    eefe:	str	r2, [r4, #8]
    ef00:	beq.w	f032 <_free_r+0x18e>
    ef04:	orr.w	r3, r1, #1
    ef08:	str	r3, [r5, #4]
    ef0a:	str.w	r1, [ip]
    ef0e:	cmp.w	r1, #512	; 0x200
    ef12:	bcs.n	ef80 <_free_r+0xdc>
    ef14:	ldr	r0, [r7, #4]
    ef16:	lsrs	r3, r1, #3
    ef18:	movs	r2, #1
    ef1a:	lsrs	r1, r1, #5
    ef1c:	adds	r3, #1
    ef1e:	lsls	r2, r1
    ef20:	orrs	r2, r0
    ef22:	ldr.w	r1, [r7, r3, lsl #3]
    ef26:	str	r2, [r7, #4]
    ef28:	add.w	r2, r7, r3, lsl #3
    ef2c:	subs	r2, #8
    ef2e:	strd	r1, r2, [r5, #8]
    ef32:	str.w	r5, [r7, r3, lsl #3]
    ef36:	str	r5, [r1, #12]
    ef38:	mov	r0, r6
    ef3a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ef3e:	b.w	cbec <__malloc_unlock>
    ef42:	add.w	r2, ip, r3
    ef46:	ldr	r2, [r2, #4]
    ef48:	lsls	r0, r2, #31
    ef4a:	bmi.n	ef6e <_free_r+0xca>
    ef4c:	add	r1, r3
    ef4e:	add.w	r0, r7, #8
    ef52:	ldr.w	r3, [ip, #8]
    ef56:	cmp	r3, r0
    ef58:	beq.n	f042 <_free_r+0x19e>
    ef5a:	ldr.w	r2, [ip, #12]
    ef5e:	str	r2, [r3, #12]
    ef60:	str	r3, [r2, #8]
    ef62:	orr.w	r3, r1, #1
    ef66:	str	r3, [r5, #4]
    ef68:	str	r1, [r5, r1]
    ef6a:	b.n	ef0e <_free_r+0x6a>
    ef6c:	bx	lr
    ef6e:	orr.w	r3, r1, #1
    ef72:	cmp.w	r1, #512	; 0x200
    ef76:	str.w	r3, [r4, #-4]
    ef7a:	str.w	r1, [ip]
    ef7e:	bcc.n	ef14 <_free_r+0x70>
    ef80:	cmp.w	r1, #2560	; 0xa00
    ef84:	mov.w	r3, r1, lsr #9
    ef88:	bcs.n	f01c <_free_r+0x178>
    ef8a:	lsrs	r3, r1, #6
    ef8c:	add.w	r0, r3, #57	; 0x39
    ef90:	add.w	r2, r3, #56	; 0x38
    ef94:	lsls	r3, r0, #3
    ef96:	adds	r0, r7, r3
    ef98:	ldr	r3, [r7, r3]
    ef9a:	subs	r0, #8
    ef9c:	cmp	r0, r3
    ef9e:	beq.n	f054 <_free_r+0x1b0>
    efa0:	ldr	r2, [r3, #4]
    efa2:	bic.w	r2, r2, #3
    efa6:	cmp	r2, r1
    efa8:	bls.n	efb0 <_free_r+0x10c>
    efaa:	ldr	r3, [r3, #8]
    efac:	cmp	r0, r3
    efae:	bne.n	efa0 <_free_r+0xfc>
    efb0:	ldr	r0, [r3, #12]
    efb2:	strd	r3, r0, [r5, #8]
    efb6:	str	r5, [r0, #8]
    efb8:	str	r5, [r3, #12]
    efba:	mov	r0, r6
    efbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    efc0:	b.w	cbec <__malloc_unlock>
    efc4:	add.w	r2, ip, r3
    efc8:	ldr	r2, [r2, #4]
    efca:	lsls	r2, r2, #31
    efcc:	bmi.n	f096 <_free_r+0x1f2>
    efce:	add	r3, r1
    efd0:	ldrd	r1, r2, [ip, #8]
    efd4:	str	r2, [r1, #12]
    efd6:	str	r1, [r2, #8]
    efd8:	orr.w	r2, r3, #1
    efdc:	str	r2, [r5, #4]
    efde:	mov	r0, r6
    efe0:	str	r3, [r5, r3]
    efe2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    efe6:	b.w	cbec <__malloc_unlock>
    efea:	add	r3, r1
    efec:	lsls	r1, r2, #31
    efee:	bmi.n	f000 <_free_r+0x15c>
    eff0:	ldr.w	r2, [r4, #-8]
    eff4:	subs	r5, r5, r2
    eff6:	add	r3, r2
    eff8:	ldrd	r1, r2, [r5, #8]
    effc:	str	r2, [r1, #12]
    effe:	str	r1, [r2, #8]
    f000:	orr.w	r2, r3, #1
    f004:	str	r2, [r5, #4]
    f006:	ldr	r2, [pc, #160]	; (f0a8 <_free_r+0x204>)
    f008:	str	r5, [r7, #8]
    f00a:	ldr	r2, [r2, #0]
    f00c:	cmp	r2, r3
    f00e:	bhi.n	ef38 <_free_r+0x94>
    f010:	ldr	r3, [pc, #152]	; (f0ac <_free_r+0x208>)
    f012:	mov	r0, r6
    f014:	ldr	r1, [r3, #0]
    f016:	bl	ee04 <_malloc_trim_r>
    f01a:	b.n	ef38 <_free_r+0x94>
    f01c:	cmp	r3, #20
    f01e:	bls.n	f036 <_free_r+0x192>
    f020:	cmp	r3, #84	; 0x54
    f022:	bhi.n	f064 <_free_r+0x1c0>
    f024:	lsrs	r3, r1, #12
    f026:	add.w	r0, r3, #111	; 0x6f
    f02a:	add.w	r2, r3, #110	; 0x6e
    f02e:	lsls	r3, r0, #3
    f030:	b.n	ef96 <_free_r+0xf2>
    f032:	add	r1, r3
    f034:	b.n	ef52 <_free_r+0xae>
    f036:	add.w	r0, r3, #92	; 0x5c
    f03a:	add.w	r2, r3, #91	; 0x5b
    f03e:	lsls	r3, r0, #3
    f040:	b.n	ef96 <_free_r+0xf2>
    f042:	orr.w	r3, r1, #1
    f046:	strd	r5, r5, [r7, #16]
    f04a:	strd	r0, r0, [r5, #8]
    f04e:	str	r3, [r5, #4]
    f050:	str	r1, [r5, r1]
    f052:	b.n	ef38 <_free_r+0x94>
    f054:	ldr	r1, [r7, #4]
    f056:	asrs	r2, r2, #2
    f058:	movs	r4, #1
    f05a:	lsl.w	r2, r4, r2
    f05e:	orrs	r2, r1
    f060:	str	r2, [r7, #4]
    f062:	b.n	efb2 <_free_r+0x10e>
    f064:	cmp.w	r3, #340	; 0x154
    f068:	bhi.n	f078 <_free_r+0x1d4>
    f06a:	lsrs	r3, r1, #15
    f06c:	add.w	r0, r3, #120	; 0x78
    f070:	add.w	r2, r3, #119	; 0x77
    f074:	lsls	r3, r0, #3
    f076:	b.n	ef96 <_free_r+0xf2>
    f078:	movw	r2, #1364	; 0x554
    f07c:	cmp	r3, r2
    f07e:	bhi.n	f08e <_free_r+0x1ea>
    f080:	lsrs	r3, r1, #18
    f082:	add.w	r0, r3, #125	; 0x7d
    f086:	add.w	r2, r3, #124	; 0x7c
    f08a:	lsls	r3, r0, #3
    f08c:	b.n	ef96 <_free_r+0xf2>
    f08e:	mov.w	r3, #1016	; 0x3f8
    f092:	movs	r2, #126	; 0x7e
    f094:	b.n	ef96 <_free_r+0xf2>
    f096:	orr.w	r3, r1, #1
    f09a:	str	r3, [r5, #4]
    f09c:	str.w	r1, [ip]
    f0a0:	b.n	ef38 <_free_r+0x94>
    f0a2:	nop
    f0a4:	.word	0x20008ef0
    f0a8:	.word	0x200092fc
    f0ac:	.word	0x20027424

0000f0b0 <rshift>:
    f0b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0b4:	ldr	r4, [r0, #16]
    f0b6:	cmp.w	r4, r1, asr #5
    f0ba:	ble.n	f11c <rshift+0x6c>
    f0bc:	add.w	lr, r0, #20
    f0c0:	asrs	r6, r1, #5
    f0c2:	ands.w	ip, r1, #31
    f0c6:	add.w	r5, lr, r4, lsl #2
    f0ca:	add.w	r3, lr, r6, lsl #2
    f0ce:	beq.n	f128 <rshift+0x78>
    f0d0:	ldr.w	r1, [lr, r6, lsl #2]
    f0d4:	adds	r3, #4
    f0d6:	cmp	r5, r3
    f0d8:	lsr.w	r1, r1, ip
    f0dc:	rsb	r8, ip, #32
    f0e0:	bls.n	f114 <rshift+0x64>
    f0e2:	mov	r7, lr
    f0e4:	ldr	r2, [r3, #0]
    f0e6:	lsl.w	r2, r2, r8
    f0ea:	orrs	r2, r1
    f0ec:	str.w	r2, [r7], #4
    f0f0:	ldr.w	r1, [r3], #4
    f0f4:	cmp	r5, r3
    f0f6:	lsr.w	r1, r1, ip
    f0fa:	bhi.n	f0e4 <rshift+0x34>
    f0fc:	subs	r3, r4, r6
    f0fe:	lsls	r3, r3, #2
    f100:	subs	r3, #5
    f102:	lsrs	r3, r3, #2
    f104:	adds	r3, #1
    f106:	add.w	r4, lr, r3, lsl #2
    f10a:	str.w	r1, [lr, r3, lsl #2]
    f10e:	cbz	r1, f144 <rshift+0x94>
    f110:	adds	r4, #4
    f112:	b.n	f144 <rshift+0x94>
    f114:	str	r1, [r0, #20]
    f116:	mov	r4, lr
    f118:	cmp	r1, #0
    f11a:	bne.n	f110 <rshift+0x60>
    f11c:	movs	r3, #0
    f11e:	str	r3, [r0, #16]
    f120:	movs	r3, #0
    f122:	str	r3, [r0, #20]
    f124:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f128:	cmp	r5, r3
    f12a:	it	hi
    f12c:	addhi.w	r2, r0, #16
    f130:	bls.n	f11c <rshift+0x6c>
    f132:	ldr.w	r1, [r3], #4
    f136:	str.w	r1, [r2, #4]!
    f13a:	cmp	r5, r3
    f13c:	bhi.n	f132 <rshift+0x82>
    f13e:	subs	r4, r4, r6
    f140:	add.w	r4, lr, r4, lsl #2
    f144:	sub.w	r3, r4, lr
    f148:	asrs	r3, r3, #2
    f14a:	cmp	r4, lr
    f14c:	str	r3, [r0, #16]
    f14e:	beq.n	f120 <rshift+0x70>
    f150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f154 <__gethex>:
    f154:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f158:	vpush	{d8}
    f15c:	ldr	r4, [r1, #0]
    f15e:	mov	fp, r1
    f160:	ldrb	r1, [r4, #2]
    f162:	sub	sp, #20
    f164:	cmp	r1, #48	; 0x30
    f166:	vmov	s16, r0
    f16a:	mov	sl, r2
    f16c:	str	r3, [sp, #8]
    f16e:	bne.w	f50e <__gethex+0x3ba>
    f172:	mvn.w	r0, #1
    f176:	subs	r0, r0, r4
    f178:	adds	r2, r4, #3
    f17a:	adds	r3, r0, r2
    f17c:	mov	r4, r2
    f17e:	ldrb.w	r1, [r2], #1
    f182:	cmp	r1, #48	; 0x30
    f184:	beq.n	f17a <__gethex+0x26>
    f186:	ldr.w	r8, [pc, #768]	; f488 <__gethex+0x334>
    f18a:	ldrb.w	r2, [r8, r1]
    f18e:	cmp	r2, #0
    f190:	beq.w	f35e <__gethex+0x20a>
    f194:	ldrb	r2, [r4, #0]
    f196:	movs	r7, #0
    f198:	ldrb.w	r2, [r8, r2]
    f19c:	mov	r5, r7
    f19e:	mov	r6, r4
    f1a0:	cbz	r2, f1ae <__gethex+0x5a>
    f1a2:	ldrb.w	r2, [r6, #1]!
    f1a6:	ldrb.w	r2, [r8, r2]
    f1aa:	cmp	r2, #0
    f1ac:	bne.n	f1a2 <__gethex+0x4e>
    f1ae:	ldr	r1, [pc, #724]	; (f484 <__gethex+0x330>)
    f1b0:	str	r3, [sp, #4]
    f1b2:	movs	r2, #1
    f1b4:	mov	r0, r6
    f1b6:	bl	e60c <strncmp>
    f1ba:	ldr	r3, [sp, #4]
    f1bc:	mov	r9, r0
    f1be:	cmp	r0, #0
    f1c0:	beq.n	f25e <__gethex+0x10a>
    f1c2:	cmp	r5, #0
    f1c4:	bne.n	f264 <__gethex+0x110>
    f1c6:	ldrb	r2, [r6, #0]
    f1c8:	mov	r9, r5
    f1ca:	and.w	r2, r2, #223	; 0xdf
    f1ce:	cmp	r2, #80	; 0x50
    f1d0:	mov	r5, r6
    f1d2:	beq.n	f276 <__gethex+0x122>
    f1d4:	str.w	r6, [fp]
    f1d8:	cmp	r7, #0
    f1da:	bne.n	f2b0 <__gethex+0x15c>
    f1dc:	subs	r3, r5, r4
    f1de:	subs	r3, #1
    f1e0:	cmp	r3, #7
    f1e2:	mov	r1, r7
    f1e4:	ble.n	f1f0 <__gethex+0x9c>
    f1e6:	asrs	r3, r3, #1
    f1e8:	cmp	r3, #7
    f1ea:	add.w	r1, r1, #1
    f1ee:	bgt.n	f1e6 <__gethex+0x92>
    f1f0:	vmov	r0, s16
    f1f4:	bl	f8fc <_Balloc>
    f1f8:	mov	fp, r0
    f1fa:	cmp	r0, #0
    f1fc:	beq.w	f6cc <__gethex+0x578>
    f200:	add.w	r6, r0, #20
    f204:	cmp	r4, r5
    f206:	str	r6, [sp, #4]
    f208:	bcs.w	f5b0 <__gethex+0x45c>
    f20c:	movs	r7, #0
    f20e:	str.w	r9, [sp, #12]
    f212:	ldr	r1, [pc, #624]	; (f484 <__gethex+0x330>)
    f214:	mov	r9, r4
    f216:	mov	r4, r7
    f218:	b.n	f234 <__gethex+0xe0>
    f21a:	cmp	r7, #32
    f21c:	beq.n	f252 <__gethex+0xfe>
    f21e:	mov	r0, r7
    f220:	adds	r7, #4
    f222:	ldrb	r2, [r5, #0]
    f224:	ldrb.w	r2, [r8, r2]
    f228:	and.w	r2, r2, #15
    f22c:	lsls	r2, r0
    f22e:	orrs	r4, r2
    f230:	cmp	r5, r9
    f232:	beq.n	f2c4 <__gethex+0x170>
    f234:	ldrb.w	r2, [r5, #-1]!
    f238:	cmp	r2, #46	; 0x2e
    f23a:	bne.n	f21a <__gethex+0xc6>
    f23c:	cmp	r5, r9
    f23e:	bcc.n	f21a <__gethex+0xc6>
    f240:	movs	r2, #1
    f242:	mov	r0, r5
    f244:	bl	e60c <strncmp>
    f248:	ldr	r1, [pc, #568]	; (f484 <__gethex+0x330>)
    f24a:	cmp	r0, #0
    f24c:	beq.n	f230 <__gethex+0xdc>
    f24e:	cmp	r7, #32
    f250:	bne.n	f21e <__gethex+0xca>
    f252:	movs	r0, #0
    f254:	str.w	r4, [r6], #4
    f258:	movs	r7, #4
    f25a:	mov	r4, r0
    f25c:	b.n	f222 <__gethex+0xce>
    f25e:	cmp	r5, #0
    f260:	beq.w	f4e8 <__gethex+0x394>
    f264:	ldrb	r2, [r6, #0]
    f266:	and.w	r2, r2, #223	; 0xdf
    f26a:	subs	r5, r5, r6
    f26c:	cmp	r2, #80	; 0x50
    f26e:	mov.w	r9, r5, lsl #2
    f272:	mov	r5, r6
    f274:	bne.n	f1d4 <__gethex+0x80>
    f276:	ldrb	r2, [r5, #1]
    f278:	cmp	r2, #43	; 0x2b
    f27a:	beq.w	f4c8 <__gethex+0x374>
    f27e:	cmp	r2, #45	; 0x2d
    f280:	beq.w	f3ce <__gethex+0x27a>
    f284:	adds	r6, r5, #1
    f286:	movs	r0, #0
    f288:	ldrb.w	r1, [r8, r2]
    f28c:	subs	r2, r1, #1
    f28e:	cmp	r2, #24
    f290:	bhi.w	f3ca <__gethex+0x276>
    f294:	ldrb	r2, [r6, #1]
    f296:	ldrb.w	r2, [r8, r2]
    f29a:	subs	r1, #16
    f29c:	adds	r6, #1
    f29e:	cmp	r2, #0
    f2a0:	bne.n	f358 <__gethex+0x204>
    f2a2:	cbz	r0, f2a6 <__gethex+0x152>
    f2a4:	negs	r1, r1
    f2a6:	add	r9, r1
    f2a8:	str.w	r6, [fp]
    f2ac:	cmp	r7, #0
    f2ae:	beq.n	f1dc <__gethex+0x88>
    f2b0:	cmp	r3, #0
    f2b2:	ite	ne
    f2b4:	movne	r5, #0
    f2b6:	moveq	r5, #6
    f2b8:	mov	r0, r5
    f2ba:	add	sp, #20
    f2bc:	vpop	{d8}
    f2c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2c4:	ldr.w	r9, [sp, #12]
    f2c8:	mov	r3, r4
    f2ca:	str.w	r3, [r6], #4
    f2ce:	mov	r0, r3
    f2d0:	ldr	r3, [sp, #4]
    f2d2:	subs	r6, r6, r3
    f2d4:	asrs	r6, r6, #2
    f2d6:	str.w	r6, [fp, #16]
    f2da:	bl	fab0 <__hi0bits>
    f2de:	lsls	r6, r6, #5
    f2e0:	ldr.w	r4, [sl]
    f2e4:	subs	r0, r6, r0
    f2e6:	cmp	r0, r4
    f2e8:	bgt.n	f3d6 <__gethex+0x282>
    f2ea:	blt.w	f4cc <__gethex+0x378>
    f2ee:	movs	r7, #0
    f2f0:	ldr.w	r3, [sl, #8]
    f2f4:	cmp	r3, r9
    f2f6:	blt.w	f59c <__gethex+0x448>
    f2fa:	ldr.w	r3, [sl, #4]
    f2fe:	cmp	r3, r9
    f300:	ble.n	f398 <__gethex+0x244>
    f302:	sub.w	r9, r3, r9
    f306:	cmp	r4, r9
    f308:	bgt.w	f410 <__gethex+0x2bc>
    f30c:	ldr.w	r2, [sl, #12]
    f310:	cmp	r2, #2
    f312:	beq.w	f5e0 <__gethex+0x48c>
    f316:	cmp	r2, #3
    f318:	beq.w	f61e <__gethex+0x4ca>
    f31c:	cmp	r2, #1
    f31e:	beq.w	f600 <__gethex+0x4ac>
    f322:	vmov	r0, s16
    f326:	mov	r1, fp
    f328:	bl	f948 <_Bfree>
    f32c:	movs	r5, #80	; 0x50
    f32e:	ldr	r2, [sp, #64]	; 0x40
    f330:	movs	r3, #0
    f332:	mov	r0, r5
    f334:	str	r3, [r2, #0]
    f336:	add	sp, #20
    f338:	vpop	{d8}
    f33c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f340:	add.w	r1, r1, r1, lsl #2
    f344:	add.w	r2, r2, r1, lsl #1
    f348:	sub.w	r1, r2, #16
    f34c:	ldrb.w	r2, [r6, #1]!
    f350:	ldrb.w	r2, [r8, r2]
    f354:	cmp	r2, #0
    f356:	beq.n	f2a2 <__gethex+0x14e>
    f358:	cmp	r2, #25
    f35a:	ble.n	f340 <__gethex+0x1ec>
    f35c:	b.n	f2a2 <__gethex+0x14e>
    f35e:	ldr	r1, [pc, #292]	; (f484 <__gethex+0x330>)
    f360:	str	r3, [sp, #4]
    f362:	movs	r2, #1
    f364:	mov	r0, r4
    f366:	bl	e60c <strncmp>
    f36a:	ldr	r3, [sp, #4]
    f36c:	cmp	r0, #0
    f36e:	bne.n	f44c <__gethex+0x2f8>
    f370:	ldrb	r1, [r4, #1]
    f372:	ldrb.w	r2, [r8, r1]
    f376:	adds	r5, r4, #1
    f378:	cmp	r2, #0
    f37a:	beq.n	f450 <__gethex+0x2fc>
    f37c:	cmp	r1, #48	; 0x30
    f37e:	mov	r4, r5
    f380:	bne.n	f38e <__gethex+0x23a>
    f382:	ldrb.w	r3, [r4, #1]!
    f386:	cmp	r3, #48	; 0x30
    f388:	beq.n	f382 <__gethex+0x22e>
    f38a:	ldrb.w	r2, [r8, r3]
    f38e:	clz	r7, r2
    f392:	lsrs	r7, r7, #5
    f394:	movs	r3, #1
    f396:	b.n	f19e <__gethex+0x4a>
    f398:	movs	r5, #1
    f39a:	cbz	r7, f3b2 <__gethex+0x25e>
    f39c:	ldr.w	r3, [sl, #12]
    f3a0:	cmp	r3, #2
    f3a2:	beq.n	f460 <__gethex+0x30c>
    f3a4:	cmp	r3, #3
    f3a6:	beq.n	f468 <__gethex+0x314>
    f3a8:	cmp	r3, #1
    f3aa:	beq.w	f4b6 <__gethex+0x362>
    f3ae:	orr.w	r5, r5, #16
    f3b2:	ldr	r3, [sp, #64]	; 0x40
    f3b4:	str.w	fp, [r3]
    f3b8:	ldr	r3, [sp, #8]
    f3ba:	mov	r0, r5
    f3bc:	str.w	r9, [r3]
    f3c0:	add	sp, #20
    f3c2:	vpop	{d8}
    f3c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ca:	mov	r6, r5
    f3cc:	b.n	f1d4 <__gethex+0x80>
    f3ce:	movs	r0, #1
    f3d0:	ldrb	r2, [r5, #2]
    f3d2:	adds	r6, r5, #2
    f3d4:	b.n	f288 <__gethex+0x134>
    f3d6:	subs	r6, r0, r4
    f3d8:	mov	r1, r6
    f3da:	mov	r0, fp
    f3dc:	bl	1030c <__any_on>
    f3e0:	mov	r7, r0
    f3e2:	cbz	r0, f404 <__gethex+0x2b0>
    f3e4:	subs	r2, r6, #1
    f3e6:	asrs	r3, r2, #5
    f3e8:	ldr	r1, [sp, #4]
    f3ea:	movs	r7, #1
    f3ec:	ldr.w	r1, [r1, r3, lsl #2]
    f3f0:	and.w	r3, r2, #31
    f3f4:	lsl.w	r3, r7, r3
    f3f8:	tst	r3, r1
    f3fa:	beq.n	f404 <__gethex+0x2b0>
    f3fc:	cmp	r2, r7
    f3fe:	bgt.w	f5c6 <__gethex+0x472>
    f402:	movs	r7, #2
    f404:	mov	r1, r6
    f406:	mov	r0, fp
    f408:	add	r9, r6
    f40a:	bl	f0b0 <rshift>
    f40e:	b.n	f2f0 <__gethex+0x19c>
    f410:	add.w	r5, r9, #4294967295
    f414:	cmp	r7, #0
    f416:	bne.w	f5b6 <__gethex+0x462>
    f41a:	cmp	r5, #0
    f41c:	bne.w	f5ba <__gethex+0x466>
    f420:	asrs	r3, r5, #5
    f422:	ldr	r2, [sp, #4]
    f424:	and.w	r5, r5, #31
    f428:	ldr.w	r2, [r2, r3, lsl #2]
    f42c:	movs	r3, #1
    f42e:	lsls	r3, r5
    f430:	tst	r3, r2
    f432:	mov	r1, r9
    f434:	mov	r0, fp
    f436:	it	ne
    f438:	orrne.w	r7, r7, #2
    f43c:	sub.w	r4, r4, r9
    f440:	bl	f0b0 <rshift>
    f444:	movs	r5, #2
    f446:	ldr.w	r9, [sl, #4]
    f44a:	b.n	f39a <__gethex+0x246>
    f44c:	ldrb	r1, [r4, #0]
    f44e:	mov	r5, r4
    f450:	and.w	r1, r1, #223	; 0xdf
    f454:	cmp	r1, #80	; 0x50
    f456:	beq.w	f5d8 <__gethex+0x484>
    f45a:	str.w	r5, [fp]
    f45e:	b.n	f2b0 <__gethex+0x15c>
    f460:	ldr	r3, [sp, #68]	; 0x44
    f462:	rsb	r3, r3, #1
    f466:	str	r3, [sp, #68]	; 0x44
    f468:	ldr	r3, [sp, #68]	; 0x44
    f46a:	cmp	r3, #0
    f46c:	beq.n	f3ae <__gethex+0x25a>
    f46e:	ldr.w	r7, [fp, #16]
    f472:	ldr.w	r8, [sp, #4]
    f476:	lsls	r2, r7, #2
    f478:	mov	r3, r8
    f47a:	str	r2, [sp, #4]
    f47c:	add.w	r0, r8, r7, lsl #2
    f480:	movs	r1, #0
    f482:	b.n	f494 <__gethex+0x340>
    f484:	.word	0x200009a8
    f488:	.word	0x200006c0
    f48c:	cmp	r0, r3
    f48e:	str.w	r1, [r3, #-4]
    f492:	bls.n	f514 <__gethex+0x3c0>
    f494:	mov	r6, r3
    f496:	ldr.w	r2, [r3], #4
    f49a:	cmp.w	r2, #4294967295
    f49e:	beq.n	f48c <__gethex+0x338>
    f4a0:	adds	r2, #1
    f4a2:	cmp	r5, #2
    f4a4:	str	r2, [r6, #0]
    f4a6:	beq.w	f628 <__gethex+0x4d4>
    f4aa:	ands.w	r4, r4, #31
    f4ae:	bne.w	f680 <__gethex+0x52c>
    f4b2:	movs	r5, #33	; 0x21
    f4b4:	b.n	f3b2 <__gethex+0x25e>
    f4b6:	lsls	r2, r7, #30
    f4b8:	bpl.w	f3ae <__gethex+0x25a>
    f4bc:	ldr	r3, [sp, #4]
    f4be:	ldr	r3, [r3, #0]
    f4c0:	orrs	r7, r3
    f4c2:	lsls	r3, r7, #31
    f4c4:	bmi.n	f46e <__gethex+0x31a>
    f4c6:	b.n	f3ae <__gethex+0x25a>
    f4c8:	movs	r0, #0
    f4ca:	b.n	f3d0 <__gethex+0x27c>
    f4cc:	subs	r2, r4, r0
    f4ce:	mov	r1, fp
    f4d0:	vmov	r0, s16
    f4d4:	sub.w	r9, r9, r2
    f4d8:	bl	fdc8 <__lshift>
    f4dc:	add.w	r3, r0, #20
    f4e0:	mov	fp, r0
    f4e2:	str	r3, [sp, #4]
    f4e4:	movs	r7, #0
    f4e6:	b.n	f2f0 <__gethex+0x19c>
    f4e8:	ldrb	r2, [r6, #1]
    f4ea:	ldrb.w	r0, [r8, r2]
    f4ee:	adds	r1, r6, #1
    f4f0:	cmp	r0, #0
    f4f2:	beq.w	f636 <__gethex+0x4e2>
    f4f6:	mov	r5, r1
    f4f8:	ldrb.w	r2, [r1, #1]!
    f4fc:	ldrb.w	r0, [r8, r2]
    f500:	cmp	r0, #0
    f502:	bne.n	f4f6 <__gethex+0x3a2>
    f504:	subs	r5, r6, r5
    f506:	mov.w	r9, r5, lsl #2
    f50a:	mov	r6, r1
    f50c:	b.n	f1ca <__gethex+0x76>
    f50e:	adds	r4, #2
    f510:	movs	r3, #0
    f512:	b.n	f186 <__gethex+0x32>
    f514:	ldr.w	r3, [fp, #8]
    f518:	cmp	r7, r3
    f51a:	bge.w	f63a <__gethex+0x4e6>
    f51e:	mov	r3, r7
    f520:	add.w	r2, fp, r3, lsl #2
    f524:	movs	r1, #1
    f526:	adds	r3, #1
    f528:	cmp	r5, #2
    f52a:	str.w	r3, [fp, #16]
    f52e:	str	r1, [r2, #20]
    f530:	beq.n	f628 <__gethex+0x4d4>
    f532:	cmp	r7, r3
    f534:	bge.n	f4aa <__gethex+0x356>
    f536:	cmp	r3, #0
    f538:	ble.w	f672 <__gethex+0x51e>
    f53c:	ldr.w	r2, [fp, #20]
    f540:	add.w	r3, r8, r3, lsl #2
    f544:	add.w	r0, fp, #24
    f548:	cmp	r3, r0
    f54a:	mov.w	r2, r2, lsr #1
    f54e:	bls.w	f6b4 <__gethex+0x560>
    f552:	mov	r4, r8
    f554:	ldr	r1, [r0, #0]
    f556:	orr.w	r2, r2, r1, lsl #31
    f55a:	str.w	r2, [r4], #4
    f55e:	ldr.w	r2, [r0], #4
    f562:	cmp	r3, r0
    f564:	mov.w	r2, r2, lsr #1
    f568:	bhi.n	f554 <__gethex+0x400>
    f56a:	sub.w	r3, r3, fp
    f56e:	subs	r3, #25
    f570:	lsrs	r3, r3, #2
    f572:	adds	r3, #1
    f574:	str.w	r2, [r8, r3, lsl #2]
    f578:	add.w	r3, r8, r3, lsl #2
    f57c:	cmp	r2, #0
    f57e:	bne.w	f6bc <__gethex+0x568>
    f582:	sub.w	r2, r3, r8
    f586:	asrs	r2, r2, #2
    f588:	cmp	r3, r8
    f58a:	str.w	r2, [fp, #16]
    f58e:	beq.n	f678 <__gethex+0x524>
    f590:	ldr.w	r3, [sl, #8]
    f594:	add.w	r9, r9, #1
    f598:	cmp	r3, r9
    f59a:	bge.n	f4b2 <__gethex+0x35e>
    f59c:	vmov	r0, s16
    f5a0:	mov	r1, fp
    f5a2:	bl	f948 <_Bfree>
    f5a6:	ldr	r2, [sp, #64]	; 0x40
    f5a8:	movs	r3, #0
    f5aa:	str	r3, [r2, #0]
    f5ac:	movs	r5, #163	; 0xa3
    f5ae:	b.n	f2b8 <__gethex+0x164>
    f5b0:	ldr	r6, [sp, #4]
    f5b2:	movs	r3, #0
    f5b4:	b.n	f2ca <__gethex+0x176>
    f5b6:	movs	r7, #1
    f5b8:	b.n	f420 <__gethex+0x2cc>
    f5ba:	mov	r1, r5
    f5bc:	mov	r0, fp
    f5be:	bl	1030c <__any_on>
    f5c2:	mov	r7, r0
    f5c4:	b.n	f420 <__gethex+0x2cc>
    f5c6:	subs	r1, r6, #2
    f5c8:	mov	r0, fp
    f5ca:	bl	1030c <__any_on>
    f5ce:	cmp	r0, #0
    f5d0:	beq.w	f402 <__gethex+0x2ae>
    f5d4:	movs	r7, #3
    f5d6:	b.n	f404 <__gethex+0x2b0>
    f5d8:	mov.w	r9, #0
    f5dc:	movs	r7, #1
    f5de:	b.n	f276 <__gethex+0x122>
    f5e0:	ldr	r2, [sp, #68]	; 0x44
    f5e2:	cmp	r2, #0
    f5e4:	bne.w	f322 <__gethex+0x1ce>
    f5e8:	ldr	r1, [sp, #8]
    f5ea:	str	r3, [r1, #0]
    f5ec:	ldr	r3, [sp, #4]
    f5ee:	movs	r2, #1
    f5f0:	str.w	r2, [fp, #16]
    f5f4:	str	r2, [r3, #0]
    f5f6:	ldr	r3, [sp, #64]	; 0x40
    f5f8:	movs	r5, #98	; 0x62
    f5fa:	str.w	fp, [r3]
    f5fe:	b.n	f2b8 <__gethex+0x164>
    f600:	cmp	r4, r9
    f602:	bne.w	f322 <__gethex+0x1ce>
    f606:	cmp	r4, #1
    f608:	beq.n	f5e8 <__gethex+0x494>
    f60a:	subs	r1, r4, #1
    f60c:	mov	r0, fp
    f60e:	bl	1030c <__any_on>
    f612:	cmp	r0, #0
    f614:	beq.w	f322 <__gethex+0x1ce>
    f618:	ldr.w	r3, [sl, #4]
    f61c:	b.n	f5e8 <__gethex+0x494>
    f61e:	ldr	r2, [sp, #68]	; 0x44
    f620:	cmp	r2, #0
    f622:	beq.w	f322 <__gethex+0x1ce>
    f626:	b.n	f5e8 <__gethex+0x494>
    f628:	ldr.w	r3, [sl]
    f62c:	subs	r3, #1
    f62e:	cmp	r3, r4
    f630:	beq.n	f69c <__gethex+0x548>
    f632:	movs	r5, #34	; 0x22
    f634:	b.n	f3b2 <__gethex+0x25e>
    f636:	mov	r6, r1
    f638:	b.n	f1ca <__gethex+0x76>
    f63a:	ldr.w	r1, [fp, #4]
    f63e:	vmov	r0, s16
    f642:	adds	r1, #1
    f644:	bl	f8fc <_Balloc>
    f648:	mov	r6, r0
    f64a:	cbz	r0, f6c0 <__gethex+0x56c>
    f64c:	ldr.w	r3, [fp, #16]
    f650:	adds	r3, #2
    f652:	lsls	r2, r3, #2
    f654:	add.w	r1, fp, #12
    f658:	adds	r0, #12
    f65a:	bl	9c60 <memcpy>
    f65e:	mov	r1, fp
    f660:	vmov	r0, s16
    f664:	bl	f948 <_Bfree>
    f668:	add.w	r8, r6, #20
    f66c:	ldr	r3, [r6, #16]
    f66e:	mov	fp, r6
    f670:	b.n	f520 <__gethex+0x3cc>
    f672:	movs	r3, #0
    f674:	str.w	r3, [fp, #16]
    f678:	movs	r3, #0
    f67a:	str.w	r3, [fp, #20]
    f67e:	b.n	f590 <__gethex+0x43c>
    f680:	ldr	r3, [sp, #4]
    f682:	add	r3, r8
    f684:	rsb	r4, r4, #32
    f688:	ldr.w	r0, [r3, #-4]
    f68c:	bl	fab0 <__hi0bits>
    f690:	cmp	r0, r4
    f692:	bge.w	f4b2 <__gethex+0x35e>
    f696:	ldr.w	r3, [fp, #16]
    f69a:	b.n	f536 <__gethex+0x3e2>
    f69c:	asrs	r3, r4, #5
    f69e:	and.w	r4, r4, #31
    f6a2:	ldr.w	r2, [r8, r3, lsl #2]
    f6a6:	movs	r3, #1
    f6a8:	lsls	r3, r4
    f6aa:	tst	r3, r2
    f6ac:	ite	eq
    f6ae:	moveq	r5, #34	; 0x22
    f6b0:	movne	r5, #33	; 0x21
    f6b2:	b.n	f3b2 <__gethex+0x25e>
    f6b4:	str.w	r2, [r8]
    f6b8:	mov	r3, r8
    f6ba:	cbz	r2, f6d8 <__gethex+0x584>
    f6bc:	adds	r3, #4
    f6be:	b.n	f582 <__gethex+0x42e>
    f6c0:	ldr	r3, [pc, #28]	; (f6e0 <__gethex+0x58c>)
    f6c2:	ldr	r0, [pc, #32]	; (f6e4 <__gethex+0x590>)
    f6c4:	mov	r2, r6
    f6c6:	movs	r1, #132	; 0x84
    f6c8:	bl	13b80 <__assert_func>
    f6cc:	ldr	r3, [pc, #16]	; (f6e0 <__gethex+0x58c>)
    f6ce:	ldr	r0, [pc, #20]	; (f6e4 <__gethex+0x590>)
    f6d0:	mov	r2, fp
    f6d2:	movs	r1, #228	; 0xe4
    f6d4:	bl	13b80 <__assert_func>
    f6d8:	str.w	r2, [fp, #16]
    f6dc:	b.n	f678 <__gethex+0x524>
    f6de:	nop
    f6e0:	.word	0x20000648
    f6e4:	.word	0x2000065c

0000f6e8 <__match>:
    f6e8:	push	{r4}
    f6ea:	ldr	r4, [r0, #0]
    f6ec:	b.n	f702 <__match+0x1a>
    f6ee:	ldrb.w	r3, [r4, #1]!
    f6f2:	sub.w	ip, r3, #65	; 0x41
    f6f6:	cmp.w	ip, #25
    f6fa:	it	ls
    f6fc:	addls	r3, #32
    f6fe:	cmp	r3, r2
    f700:	bne.n	f716 <__match+0x2e>
    f702:	ldrb.w	r2, [r1], #1
    f706:	cmp	r2, #0
    f708:	bne.n	f6ee <__match+0x6>
    f70a:	adds	r4, #1
    f70c:	str	r4, [r0, #0]
    f70e:	movs	r0, #1
    f710:	ldr.w	r4, [sp], #4
    f714:	bx	lr
    f716:	movs	r0, #0
    f718:	ldr.w	r4, [sp], #4
    f71c:	bx	lr
    f71e:	nop

0000f720 <__hexnan>:
    f720:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f724:	ldr	r1, [r1, #0]
    f726:	sub	sp, #20
    f728:	asrs	r3, r1, #5
    f72a:	ands.w	r1, r1, #31
    f72e:	str	r0, [sp, #8]
    f730:	add.w	r3, r2, r3, lsl #2
    f734:	str	r1, [sp, #12]
    f736:	bne.w	f858 <__hexnan+0x138>
    f73a:	subs	r5, r3, #4
    f73c:	str	r3, [sp, #4]
    f73e:	ldr	r3, [sp, #8]
    f740:	ldr	r1, [sp, #4]
    f742:	ldr	r4, [r3, #0]
    f744:	movs	r3, #0
    f746:	str.w	r3, [r1, #-4]
    f74a:	ldrb	r1, [r4, #1]
    f74c:	adds	r4, #1
    f74e:	cmp	r1, #0
    f750:	beq.w	f884 <__hexnan+0x164>
    f754:	ldr.w	r9, [pc, #372]	; f8cc <__hexnan+0x1ac>
    f758:	mov	r8, r5
    f75a:	mov	ip, r5
    f75c:	mov	sl, r3
    f75e:	mov	r6, r3
    f760:	b.n	f780 <__hexnan+0x60>
    f762:	cmp	r1, #32
    f764:	bhi.w	f880 <__hexnan+0x160>
    f768:	cmp	r6, sl
    f76a:	ble.n	f77a <__hexnan+0x5a>
    f76c:	cmp	ip, r8
    f76e:	bcs.n	f774 <__hexnan+0x54>
    f770:	cmp	r3, #7
    f772:	ble.n	f82c <__hexnan+0x10c>
    f774:	cmp	r2, ip
    f776:	bcc.n	f81c <__hexnan+0xfc>
    f778:	movs	r3, #8
    f77a:	ldrb.w	r1, [r4, #1]!
    f77e:	cbz	r1, f7aa <__hexnan+0x8a>
    f780:	ldrb.w	r0, [r9, r1]
    f784:	cmp	r0, #0
    f786:	beq.n	f762 <__hexnan+0x42>
    f788:	adds	r3, #1
    f78a:	cmp	r3, #8
    f78c:	add.w	r6, r6, #1
    f790:	bgt.n	f808 <__hexnan+0xe8>
    f792:	ldr.w	r1, [ip]
    f796:	lsls	r1, r1, #4
    f798:	and.w	r0, r0, #15
    f79c:	orrs	r0, r1
    f79e:	str.w	r0, [ip]
    f7a2:	ldrb.w	r1, [r4, #1]!
    f7a6:	cmp	r1, #0
    f7a8:	bne.n	f780 <__hexnan+0x60>
    f7aa:	cmp	r6, #0
    f7ac:	beq.n	f884 <__hexnan+0x164>
    f7ae:	cmp	ip, r8
    f7b0:	bcs.n	f7b6 <__hexnan+0x96>
    f7b2:	cmp	r3, #7
    f7b4:	ble.n	f8a0 <__hexnan+0x180>
    f7b6:	cmp	r2, ip
    f7b8:	bcs.n	f860 <__hexnan+0x140>
    f7ba:	subs	r1, r2, #4
    f7bc:	mov	r3, ip
    f7be:	ldr.w	r0, [r3], #4
    f7c2:	str.w	r0, [r1, #4]!
    f7c6:	cmp	r3, r5
    f7c8:	bls.n	f7be <__hexnan+0x9e>
    f7ca:	sub.w	r3, r5, ip
    f7ce:	bic.w	r3, r3, #3
    f7d2:	adds	r1, r5, #1
    f7d4:	adds	r3, #4
    f7d6:	add.w	ip, ip, #1
    f7da:	cmp	r1, ip
    f7dc:	it	cc
    f7de:	movcc	r3, #4
    f7e0:	add	r3, r2
    f7e2:	movs	r1, #0
    f7e4:	str.w	r1, [r3], #4
    f7e8:	cmp	r3, r5
    f7ea:	bls.n	f7e4 <__hexnan+0xc4>
    f7ec:	ldr	r3, [sp, #4]
    f7ee:	ldr.w	r3, [r3, #-4]
    f7f2:	cbnz	r3, f800 <__hexnan+0xe0>
    f7f4:	cmp	r2, r5
    f7f6:	beq.n	f88c <__hexnan+0x16c>
    f7f8:	ldr.w	r3, [r5, #-4]!
    f7fc:	cmp	r3, #0
    f7fe:	beq.n	f7f4 <__hexnan+0xd4>
    f800:	movs	r0, #5
    f802:	add	sp, #20
    f804:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f808:	cmp	r2, ip
    f80a:	bcs.n	f77a <__hexnan+0x5a>
    f80c:	movs	r3, #0
    f80e:	str.w	r3, [ip, #-4]
    f812:	mov	r1, r3
    f814:	sub.w	ip, ip, #4
    f818:	movs	r3, #1
    f81a:	b.n	f798 <__hexnan+0x78>
    f81c:	movs	r3, #0
    f81e:	sub.w	r8, ip, #4
    f822:	str.w	r3, [ip, #-4]
    f826:	mov	sl, r6
    f828:	mov	ip, r8
    f82a:	b.n	f77a <__hexnan+0x5a>
    f82c:	rsb	r1, r3, #8
    f830:	ldr.w	r3, [ip]
    f834:	lsls	r1, r1, #2
    f836:	rsb	lr, r1, #32
    f83a:	mov	r0, ip
    f83c:	mov	fp, r3
    f83e:	ldr	r7, [r0, #4]
    f840:	lsl.w	r3, r7, lr
    f844:	orr.w	r3, r3, fp
    f848:	lsr.w	fp, r7, r1
    f84c:	str	r3, [r0, #0]
    f84e:	str.w	fp, [r0, #4]!
    f852:	cmp	r0, r8
    f854:	bcc.n	f83e <__hexnan+0x11e>
    f856:	b.n	f774 <__hexnan+0x54>
    f858:	adds	r1, r3, #4
    f85a:	str	r1, [sp, #4]
    f85c:	mov	r5, r3
    f85e:	b.n	f73e <__hexnan+0x1e>
    f860:	ldr	r3, [sp, #12]
    f862:	cmp	r3, #0
    f864:	beq.n	f7ec <__hexnan+0xcc>
    f866:	ldr	r3, [sp, #12]
    f868:	ldr	r0, [sp, #4]
    f86a:	rsb	r1, r3, #32
    f86e:	mov.w	r3, #4294967295
    f872:	lsrs	r3, r1
    f874:	ldr.w	r1, [r0, #-4]
    f878:	ands	r3, r1
    f87a:	str.w	r3, [r0, #-4]
    f87e:	b.n	f7f2 <__hexnan+0xd2>
    f880:	cmp	r1, #41	; 0x29
    f882:	beq.n	f898 <__hexnan+0x178>
    f884:	movs	r0, #4
    f886:	add	sp, #20
    f888:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f88c:	movs	r3, #1
    f88e:	movs	r0, #5
    f890:	str	r3, [r5, #0]
    f892:	add	sp, #20
    f894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f898:	ldr	r1, [sp, #8]
    f89a:	adds	r4, #1
    f89c:	str	r4, [r1, #0]
    f89e:	b.n	f7aa <__hexnan+0x8a>
    f8a0:	ldr.w	r1, [ip]
    f8a4:	rsb	r3, r3, #8
    f8a8:	lsls	r3, r3, #2
    f8aa:	rsb	r7, r3, #32
    f8ae:	mov	r4, ip
    f8b0:	mov	r0, r1
    f8b2:	ldr	r6, [r4, #4]
    f8b4:	lsl.w	r1, r6, r7
    f8b8:	orrs	r1, r0
    f8ba:	lsr.w	r0, r6, r3
    f8be:	str	r1, [r4, #0]
    f8c0:	str.w	r0, [r4, #4]!
    f8c4:	cmp	r4, r8
    f8c6:	bcc.n	f8b2 <__hexnan+0x192>
    f8c8:	b.n	f7b6 <__hexnan+0x96>
    f8ca:	nop
    f8cc:	.word	0x200006c0

0000f8d0 <__ascii_mbtowc>:
    f8d0:	sub	sp, #8
    f8d2:	cbz	r1, f8e8 <__ascii_mbtowc+0x18>
    f8d4:	cbz	r2, f8ee <__ascii_mbtowc+0x1e>
    f8d6:	cbz	r3, f8f4 <__ascii_mbtowc+0x24>
    f8d8:	ldrb	r3, [r2, #0]
    f8da:	str	r3, [r1, #0]
    f8dc:	ldrb	r2, [r2, #0]
    f8de:	subs	r0, r2, #0
    f8e0:	it	ne
    f8e2:	movne	r0, #1
    f8e4:	add	sp, #8
    f8e6:	bx	lr
    f8e8:	add	r1, sp, #4
    f8ea:	cmp	r2, #0
    f8ec:	bne.n	f8d6 <__ascii_mbtowc+0x6>
    f8ee:	mov	r0, r2
    f8f0:	add	sp, #8
    f8f2:	bx	lr
    f8f4:	mvn.w	r0, #1
    f8f8:	b.n	f8e4 <__ascii_mbtowc+0x14>
    f8fa:	nop

0000f8fc <_Balloc>:
    f8fc:	ldr	r3, [r0, #68]	; 0x44
    f8fe:	push	{r4, r5, r6, lr}
    f900:	mov	r5, r0
    f902:	mov	r4, r1
    f904:	cbz	r3, f91a <_Balloc+0x1e>
    f906:	ldr.w	r0, [r3, r4, lsl #2]
    f90a:	cbz	r0, f92e <_Balloc+0x32>
    f90c:	ldr	r2, [r0, #0]
    f90e:	str.w	r2, [r3, r4, lsl #2]
    f912:	movs	r3, #0
    f914:	strd	r3, r3, [r0, #12]
    f918:	pop	{r4, r5, r6, pc}
    f91a:	movs	r2, #33	; 0x21
    f91c:	movs	r1, #4
    f91e:	bl	13bc0 <_calloc_r>
    f922:	mov	r3, r0
    f924:	str	r0, [r5, #68]	; 0x44
    f926:	cmp	r0, #0
    f928:	bne.n	f906 <_Balloc+0xa>
    f92a:	movs	r0, #0
    f92c:	pop	{r4, r5, r6, pc}
    f92e:	movs	r1, #1
    f930:	lsl.w	r6, r1, r4
    f934:	adds	r2, r6, #5
    f936:	lsls	r2, r2, #2
    f938:	mov	r0, r5
    f93a:	bl	13bc0 <_calloc_r>
    f93e:	cmp	r0, #0
    f940:	beq.n	f92a <_Balloc+0x2e>
    f942:	strd	r4, r6, [r0, #4]
    f946:	b.n	f912 <_Balloc+0x16>

0000f948 <_Bfree>:
    f948:	cbz	r1, f958 <_Bfree+0x10>
    f94a:	ldr	r3, [r0, #68]	; 0x44
    f94c:	ldr	r2, [r1, #4]
    f94e:	ldr.w	r0, [r3, r2, lsl #2]
    f952:	str	r0, [r1, #0]
    f954:	str.w	r1, [r3, r2, lsl #2]
    f958:	bx	lr
    f95a:	nop

0000f95c <__multadd>:
    f95c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f960:	ldr	r6, [r1, #16]
    f962:	mov	r8, r0
    f964:	mov	r7, r1
    f966:	mov	r5, r3
    f968:	add.w	lr, r1, #20
    f96c:	movs	r0, #0
    f96e:	ldr.w	r1, [lr]
    f972:	uxth	r4, r1
    f974:	mla	r3, r2, r4, r5
    f978:	lsrs	r1, r1, #16
    f97a:	mov.w	ip, r3, lsr #16
    f97e:	mla	ip, r2, r1, ip
    f982:	adds	r0, #1
    f984:	uxth	r4, r3
    f986:	add.w	r4, r4, ip, lsl #16
    f98a:	cmp	r6, r0
    f98c:	str.w	r4, [lr], #4
    f990:	mov.w	r5, ip, lsr #16
    f994:	bgt.n	f96e <__multadd+0x12>
    f996:	cbz	r5, f9a8 <__multadd+0x4c>
    f998:	ldr	r3, [r7, #8]
    f99a:	cmp	r3, r6
    f99c:	ble.n	f9ae <__multadd+0x52>
    f99e:	add.w	r3, r7, r6, lsl #2
    f9a2:	adds	r6, #1
    f9a4:	str	r5, [r3, #20]
    f9a6:	str	r6, [r7, #16]
    f9a8:	mov	r0, r7
    f9aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9ae:	ldr	r1, [r7, #4]
    f9b0:	mov	r0, r8
    f9b2:	adds	r1, #1
    f9b4:	bl	f8fc <_Balloc>
    f9b8:	mov	r4, r0
    f9ba:	cbz	r0, f9ea <__multadd+0x8e>
    f9bc:	ldr	r2, [r7, #16]
    f9be:	adds	r2, #2
    f9c0:	add.w	r1, r7, #12
    f9c4:	lsls	r2, r2, #2
    f9c6:	adds	r0, #12
    f9c8:	bl	9c60 <memcpy>
    f9cc:	ldr.w	r3, [r8, #68]	; 0x44
    f9d0:	ldr	r2, [r7, #4]
    f9d2:	ldr.w	r1, [r3, r2, lsl #2]
    f9d6:	str	r1, [r7, #0]
    f9d8:	str.w	r7, [r3, r2, lsl #2]
    f9dc:	mov	r7, r4
    f9de:	add.w	r3, r7, r6, lsl #2
    f9e2:	adds	r6, #1
    f9e4:	str	r5, [r3, #20]
    f9e6:	str	r6, [r7, #16]
    f9e8:	b.n	f9a8 <__multadd+0x4c>
    f9ea:	ldr	r3, [pc, #12]	; (f9f8 <__multadd+0x9c>)
    f9ec:	ldr	r0, [pc, #12]	; (f9fc <__multadd+0xa0>)
    f9ee:	mov	r2, r4
    f9f0:	movs	r1, #186	; 0xba
    f9f2:	bl	13b80 <__assert_func>
    f9f6:	nop
    f9f8:	.word	0x20000648
    f9fc:	.word	0x200007c0

0000fa00 <__s2b>:
    fa00:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa04:	mov	r7, r2
    fa06:	ldr	r2, [pc, #156]	; (faa4 <__s2b+0xa4>)
    fa08:	mov	r6, r3
    fa0a:	adds	r3, #8
    fa0c:	mov	r4, r1
    fa0e:	cmp	r6, #9
    fa10:	smull	r1, r2, r2, r3
    fa14:	mov.w	r3, r3, asr #31
    fa18:	mov	r5, r0
    fa1a:	rsb	r3, r3, r2, asr #1
    fa1e:	ble.n	fa94 <__s2b+0x94>
    fa20:	mov.w	ip, #1
    fa24:	movs	r1, #0
    fa26:	mov.w	ip, ip, lsl #1
    fa2a:	cmp	r3, ip
    fa2c:	add.w	r1, r1, #1
    fa30:	bgt.n	fa26 <__s2b+0x26>
    fa32:	mov	r0, r5
    fa34:	bl	f8fc <_Balloc>
    fa38:	mov	r1, r0
    fa3a:	cbz	r0, fa98 <__s2b+0x98>
    fa3c:	ldr	r3, [sp, #32]
    fa3e:	str	r3, [r0, #20]
    fa40:	cmp	r7, #9
    fa42:	mov.w	r3, #1
    fa46:	str	r3, [r0, #16]
    fa48:	bgt.n	fa70 <__s2b+0x70>
    fa4a:	adds	r4, #10
    fa4c:	movs	r7, #9
    fa4e:	cmp	r6, r7
    fa50:	ble.n	fa6a <__s2b+0x6a>
    fa52:	subs	r2, r6, r7
    fa54:	adds	r6, r4, r2
    fa56:	ldrb.w	r3, [r4], #1
    fa5a:	movs	r2, #10
    fa5c:	subs	r3, #48	; 0x30
    fa5e:	mov	r0, r5
    fa60:	bl	f95c <__multadd>
    fa64:	cmp	r6, r4
    fa66:	mov	r1, r0
    fa68:	bne.n	fa56 <__s2b+0x56>
    fa6a:	mov	r0, r1
    fa6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fa70:	add.w	r9, r4, #9
    fa74:	mov	r8, r9
    fa76:	add	r4, r7
    fa78:	ldrb.w	r3, [r8], #1
    fa7c:	movs	r2, #10
    fa7e:	subs	r3, #48	; 0x30
    fa80:	mov	r0, r5
    fa82:	bl	f95c <__multadd>
    fa86:	cmp	r8, r4
    fa88:	mov	r1, r0
    fa8a:	bne.n	fa78 <__s2b+0x78>
    fa8c:	sub.w	r4, r7, #8
    fa90:	add	r4, r9
    fa92:	b.n	fa4e <__s2b+0x4e>
    fa94:	movs	r1, #0
    fa96:	b.n	fa32 <__s2b+0x32>
    fa98:	mov	r2, r1
    fa9a:	ldr	r3, [pc, #12]	; (faa8 <__s2b+0xa8>)
    fa9c:	ldr	r0, [pc, #12]	; (faac <__s2b+0xac>)
    fa9e:	movs	r1, #211	; 0xd3
    faa0:	bl	13b80 <__assert_func>
    faa4:	.word	0x38e38e39
    faa8:	.word	0x20000648
    faac:	.word	0x200007c0

0000fab0 <__hi0bits>:
    fab0:	lsrs	r3, r0, #16
    fab2:	lsls	r3, r3, #16
    fab4:	cbnz	r3, faec <__hi0bits+0x3c>
    fab6:	lsls	r0, r0, #16
    fab8:	movs	r3, #16
    faba:	tst.w	r0, #4278190080	; 0xff000000
    fabe:	itt	eq
    fac0:	lsleq	r0, r0, #8
    fac2:	addeq	r3, #8
    fac4:	tst.w	r0, #4026531840	; 0xf0000000
    fac8:	itt	eq
    faca:	lsleq	r0, r0, #4
    facc:	addeq	r3, #4
    face:	tst.w	r0, #3221225472	; 0xc0000000
    fad2:	itt	eq
    fad4:	lsleq	r0, r0, #2
    fad6:	addeq	r3, #2
    fad8:	cmp	r0, #0
    fada:	blt.n	fae8 <__hi0bits+0x38>
    fadc:	tst.w	r0, #1073741824	; 0x40000000
    fae0:	add.w	r3, r3, #1
    fae4:	it	eq
    fae6:	moveq	r3, #32
    fae8:	mov	r0, r3
    faea:	bx	lr
    faec:	movs	r3, #0
    faee:	b.n	faba <__hi0bits+0xa>

0000faf0 <__lo0bits>:
    faf0:	ldr	r3, [r0, #0]
    faf2:	ands.w	r2, r3, #7
    faf6:	beq.n	fb0a <__lo0bits+0x1a>
    faf8:	lsls	r1, r3, #31
    fafa:	bmi.n	fb3c <__lo0bits+0x4c>
    fafc:	lsls	r2, r3, #30
    fafe:	bpl.n	fb46 <__lo0bits+0x56>
    fb00:	lsrs	r3, r3, #1
    fb02:	str	r3, [r0, #0]
    fb04:	movs	r2, #1
    fb06:	mov	r0, r2
    fb08:	bx	lr
    fb0a:	uxth	r1, r3
    fb0c:	cbnz	r1, fb12 <__lo0bits+0x22>
    fb0e:	lsrs	r3, r3, #16
    fb10:	movs	r2, #16
    fb12:	uxtb	r1, r3
    fb14:	cbnz	r1, fb1a <__lo0bits+0x2a>
    fb16:	adds	r2, #8
    fb18:	lsrs	r3, r3, #8
    fb1a:	lsls	r1, r3, #28
    fb1c:	itt	eq
    fb1e:	lsreq	r3, r3, #4
    fb20:	addeq	r2, #4
    fb22:	lsls	r1, r3, #30
    fb24:	itt	eq
    fb26:	lsreq	r3, r3, #2
    fb28:	addeq	r2, #2
    fb2a:	lsls	r1, r3, #31
    fb2c:	bmi.n	fb36 <__lo0bits+0x46>
    fb2e:	lsrs	r3, r3, #1
    fb30:	add.w	r2, r2, #1
    fb34:	beq.n	fb42 <__lo0bits+0x52>
    fb36:	str	r3, [r0, #0]
    fb38:	mov	r0, r2
    fb3a:	bx	lr
    fb3c:	movs	r2, #0
    fb3e:	mov	r0, r2
    fb40:	bx	lr
    fb42:	movs	r2, #32
    fb44:	b.n	fb06 <__lo0bits+0x16>
    fb46:	lsrs	r3, r3, #2
    fb48:	movs	r2, #2
    fb4a:	str	r3, [r0, #0]
    fb4c:	mov	r0, r2
    fb4e:	bx	lr

0000fb50 <__i2b>:
    fb50:	push	{r3, r4, r5, lr}
    fb52:	ldr	r3, [r0, #68]	; 0x44
    fb54:	mov	r4, r0
    fb56:	mov	r5, r1
    fb58:	cbz	r3, fb6e <__i2b+0x1e>
    fb5a:	ldr	r0, [r3, #4]
    fb5c:	cbz	r0, fb8c <__i2b+0x3c>
    fb5e:	ldr	r2, [r0, #0]
    fb60:	str	r2, [r3, #4]
    fb62:	movs	r2, #0
    fb64:	movs	r3, #1
    fb66:	strd	r3, r5, [r0, #16]
    fb6a:	str	r2, [r0, #12]
    fb6c:	pop	{r3, r4, r5, pc}
    fb6e:	movs	r2, #33	; 0x21
    fb70:	movs	r1, #4
    fb72:	bl	13bc0 <_calloc_r>
    fb76:	mov	r3, r0
    fb78:	str	r0, [r4, #68]	; 0x44
    fb7a:	cmp	r0, #0
    fb7c:	bne.n	fb5a <__i2b+0xa>
    fb7e:	ldr	r3, [pc, #36]	; (fba4 <__i2b+0x54>)
    fb80:	ldr	r0, [pc, #36]	; (fba8 <__i2b+0x58>)
    fb82:	movs	r2, #0
    fb84:	movw	r1, #325	; 0x145
    fb88:	bl	13b80 <__assert_func>
    fb8c:	movs	r2, #28
    fb8e:	movs	r1, #1
    fb90:	mov	r0, r4
    fb92:	bl	13bc0 <_calloc_r>
    fb96:	cmp	r0, #0
    fb98:	beq.n	fb7e <__i2b+0x2e>
    fb9a:	movs	r2, #1
    fb9c:	movs	r3, #2
    fb9e:	strd	r2, r3, [r0, #4]
    fba2:	b.n	fb62 <__i2b+0x12>
    fba4:	.word	0x20000648
    fba8:	.word	0x200007c0

0000fbac <__multiply>:
    fbac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbb0:	ldr	r6, [r1, #16]
    fbb2:	ldr	r5, [r2, #16]
    fbb4:	cmp	r6, r5
    fbb6:	sub	sp, #20
    fbb8:	mov	r8, r1
    fbba:	mov	r4, r2
    fbbc:	blt.n	fbca <__multiply+0x1e>
    fbbe:	mov	r2, r5
    fbc0:	mov	r3, r4
    fbc2:	mov	r5, r6
    fbc4:	mov	r4, r1
    fbc6:	mov	r6, r2
    fbc8:	mov	r8, r3
    fbca:	ldr	r3, [r4, #8]
    fbcc:	ldr	r1, [r4, #4]
    fbce:	adds	r7, r5, r6
    fbd0:	cmp	r3, r7
    fbd2:	it	lt
    fbd4:	addlt	r1, #1
    fbd6:	bl	f8fc <_Balloc>
    fbda:	str	r0, [sp, #4]
    fbdc:	cmp	r0, #0
    fbde:	beq.w	fcf0 <__multiply+0x144>
    fbe2:	ldr	r3, [sp, #4]
    fbe4:	add.w	r9, r3, #20
    fbe8:	add.w	sl, r9, r7, lsl #2
    fbec:	cmp	r9, sl
    fbee:	bcs.n	fbfc <__multiply+0x50>
    fbf0:	mov	r3, r9
    fbf2:	movs	r2, #0
    fbf4:	str.w	r2, [r3], #4
    fbf8:	cmp	sl, r3
    fbfa:	bhi.n	fbf4 <__multiply+0x48>
    fbfc:	add.w	r8, r8, #20
    fc00:	add.w	fp, r8, r6, lsl #2
    fc04:	add.w	r3, r4, #20
    fc08:	cmp	r8, fp
    fc0a:	mov	r2, r3
    fc0c:	add.w	r5, r3, r5, lsl #2
    fc10:	bcs.n	fcd2 <__multiply+0x126>
    fc12:	subs	r3, r5, r4
    fc14:	subs	r3, #21
    fc16:	bic.w	r3, r3, #3
    fc1a:	adds	r3, #4
    fc1c:	adds	r4, #21
    fc1e:	cmp	r5, r4
    fc20:	it	cc
    fc22:	movcc	r3, #4
    fc24:	strd	sl, r7, [sp, #8]
    fc28:	mov	ip, r5
    fc2a:	mov	r7, r3
    fc2c:	mov	sl, r2
    fc2e:	b.n	fc3c <__multiply+0x90>
    fc30:	lsrs	r1, r1, #16
    fc32:	bne.n	fc88 <__multiply+0xdc>
    fc34:	cmp	fp, r8
    fc36:	add.w	r9, r9, #4
    fc3a:	bls.n	fcce <__multiply+0x122>
    fc3c:	ldr.w	r1, [r8], #4
    fc40:	uxth	r5, r1
    fc42:	cmp	r5, #0
    fc44:	beq.n	fc30 <__multiply+0x84>
    fc46:	mov	r6, sl
    fc48:	mov	r4, r9
    fc4a:	movs	r3, #0
    fc4c:	ldr.w	r1, [r6], #4
    fc50:	ldr	r2, [r4, #0]
    fc52:	uxth.w	lr, r1
    fc56:	uxth	r0, r2
    fc58:	lsrs	r1, r1, #16
    fc5a:	mla	r0, r5, lr, r0
    fc5e:	lsrs	r2, r2, #16
    fc60:	add	r3, r0
    fc62:	mla	r2, r5, r1, r2
    fc66:	add.w	r2, r2, r3, lsr #16
    fc6a:	uxth	r3, r3
    fc6c:	orr.w	r3, r3, r2, lsl #16
    fc70:	cmp	ip, r6
    fc72:	str.w	r3, [r4], #4
    fc76:	mov.w	r3, r2, lsr #16
    fc7a:	bhi.n	fc4c <__multiply+0xa0>
    fc7c:	str.w	r3, [r9, r7]
    fc80:	ldr.w	r1, [r8, #-4]
    fc84:	lsrs	r1, r1, #16
    fc86:	beq.n	fc34 <__multiply+0x88>
    fc88:	ldr.w	r3, [r9]
    fc8c:	mov	r0, sl
    fc8e:	mov	r2, r3
    fc90:	mov	r4, r9
    fc92:	movs	r6, #0
    fc94:	ldrh	r5, [r0, #0]
    fc96:	lsrs	r2, r2, #16
    fc98:	mla	r2, r1, r5, r2
    fc9c:	add	r6, r2
    fc9e:	uxth	r3, r3
    fca0:	orr.w	r3, r3, r6, lsl #16
    fca4:	str.w	r3, [r4], #4
    fca8:	ldr.w	r5, [r0], #4
    fcac:	ldr	r2, [r4, #0]
    fcae:	lsrs	r5, r5, #16
    fcb0:	uxth	r3, r2
    fcb2:	mla	r3, r1, r5, r3
    fcb6:	add.w	r3, r3, r6, lsr #16
    fcba:	cmp	ip, r0
    fcbc:	mov.w	r6, r3, lsr #16
    fcc0:	bhi.n	fc94 <__multiply+0xe8>
    fcc2:	cmp	fp, r8
    fcc4:	str.w	r3, [r9, r7]
    fcc8:	add.w	r9, r9, #4
    fccc:	bhi.n	fc3c <__multiply+0x90>
    fcce:	ldrd	sl, r7, [sp, #8]
    fcd2:	cmp	r7, #0
    fcd4:	bgt.n	fcdc <__multiply+0x130>
    fcd6:	b.n	fce4 <__multiply+0x138>
    fcd8:	subs	r7, #1
    fcda:	beq.n	fce4 <__multiply+0x138>
    fcdc:	ldr.w	r3, [sl, #-4]!
    fce0:	cmp	r3, #0
    fce2:	beq.n	fcd8 <__multiply+0x12c>
    fce4:	ldr	r3, [sp, #4]
    fce6:	mov	r0, r3
    fce8:	str	r7, [r3, #16]
    fcea:	add	sp, #20
    fcec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcf0:	ldr	r3, [pc, #12]	; (fd00 <__multiply+0x154>)
    fcf2:	ldr	r0, [pc, #16]	; (fd04 <__multiply+0x158>)
    fcf4:	ldr	r2, [sp, #4]
    fcf6:	mov.w	r1, #354	; 0x162
    fcfa:	bl	13b80 <__assert_func>
    fcfe:	nop
    fd00:	.word	0x20000648
    fd04:	.word	0x200007c0

0000fd08 <__pow5mult>:
    fd08:	ands.w	r3, r2, #3
    fd0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd10:	mov	r4, r2
    fd12:	mov	r6, r0
    fd14:	bne.n	fd7c <__pow5mult+0x74>
    fd16:	mov	r5, r1
    fd18:	asrs	r4, r4, #2
    fd1a:	beq.n	fd5e <__pow5mult+0x56>
    fd1c:	ldr.w	r8, [r6, #64]	; 0x40
    fd20:	cmp.w	r8, #0
    fd24:	beq.n	fd8e <__pow5mult+0x86>
    fd26:	lsls	r3, r4, #31
    fd28:	mov.w	r7, #0
    fd2c:	bmi.n	fd3e <__pow5mult+0x36>
    fd2e:	asrs	r4, r4, #1
    fd30:	beq.n	fd5e <__pow5mult+0x56>
    fd32:	ldr.w	r0, [r8]
    fd36:	cbz	r0, fd64 <__pow5mult+0x5c>
    fd38:	mov	r8, r0
    fd3a:	lsls	r3, r4, #31
    fd3c:	bpl.n	fd2e <__pow5mult+0x26>
    fd3e:	mov	r2, r8
    fd40:	mov	r1, r5
    fd42:	mov	r0, r6
    fd44:	bl	fbac <__multiply>
    fd48:	cbz	r5, fd78 <__pow5mult+0x70>
    fd4a:	ldr	r1, [r5, #4]
    fd4c:	ldr	r3, [r6, #68]	; 0x44
    fd4e:	asrs	r4, r4, #1
    fd50:	ldr.w	r2, [r3, r1, lsl #2]
    fd54:	str	r2, [r5, #0]
    fd56:	str.w	r5, [r3, r1, lsl #2]
    fd5a:	mov	r5, r0
    fd5c:	bne.n	fd32 <__pow5mult+0x2a>
    fd5e:	mov	r0, r5
    fd60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd64:	mov	r2, r8
    fd66:	mov	r1, r8
    fd68:	mov	r0, r6
    fd6a:	bl	fbac <__multiply>
    fd6e:	str.w	r0, [r8]
    fd72:	str	r7, [r0, #0]
    fd74:	mov	r8, r0
    fd76:	b.n	fd3a <__pow5mult+0x32>
    fd78:	mov	r5, r0
    fd7a:	b.n	fd2e <__pow5mult+0x26>
    fd7c:	subs	r3, #1
    fd7e:	ldr	r2, [pc, #60]	; (fdbc <__pow5mult+0xb4>)
    fd80:	ldr.w	r2, [r2, r3, lsl #2]
    fd84:	movs	r3, #0
    fd86:	bl	f95c <__multadd>
    fd8a:	mov	r5, r0
    fd8c:	b.n	fd18 <__pow5mult+0x10>
    fd8e:	movs	r1, #1
    fd90:	mov	r0, r6
    fd92:	bl	f8fc <_Balloc>
    fd96:	mov	r8, r0
    fd98:	cbz	r0, fdac <__pow5mult+0xa4>
    fd9a:	movs	r3, #1
    fd9c:	movw	r2, #625	; 0x271
    fda0:	strd	r3, r2, [r0, #16]
    fda4:	movs	r3, #0
    fda6:	str	r0, [r6, #64]	; 0x40
    fda8:	str	r3, [r0, #0]
    fdaa:	b.n	fd26 <__pow5mult+0x1e>
    fdac:	ldr	r3, [pc, #16]	; (fdc0 <__pow5mult+0xb8>)
    fdae:	ldr	r0, [pc, #20]	; (fdc4 <__pow5mult+0xbc>)
    fdb0:	mov	r2, r8
    fdb2:	movw	r1, #325	; 0x145
    fdb6:	bl	13b80 <__assert_func>
    fdba:	nop
    fdbc:	.word	0x200077d4
    fdc0:	.word	0x20000648
    fdc4:	.word	0x200007c0

0000fdc8 <__lshift>:
    fdc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fdcc:	mov	r5, r1
    fdce:	mov	r4, r2
    fdd0:	ldr	r7, [r5, #16]
    fdd2:	ldr	r3, [r5, #8]
    fdd4:	ldr	r1, [r1, #4]
    fdd6:	add.w	r7, r7, r2, asr #5
    fdda:	adds	r6, r7, #1
    fddc:	cmp	r6, r3
    fdde:	mov	r8, r0
    fde0:	mov.w	r9, r2, asr #5
    fde4:	ble.n	fdf0 <__lshift+0x28>
    fde6:	lsls	r3, r3, #1
    fde8:	cmp	r6, r3
    fdea:	add.w	r1, r1, #1
    fdee:	bgt.n	fde6 <__lshift+0x1e>
    fdf0:	mov	r0, r8
    fdf2:	bl	f8fc <_Balloc>
    fdf6:	mov	ip, r0
    fdf8:	cmp	r0, #0
    fdfa:	beq.n	fea2 <__lshift+0xda>
    fdfc:	cmp.w	r9, #0
    fe00:	add.w	r2, r0, #20
    fe04:	ble.n	fe24 <__lshift+0x5c>
    fe06:	add.w	r1, r9, #5
    fe0a:	mov.w	lr, r1, lsl #2
    fe0e:	mov	r3, r2
    fe10:	add.w	r1, r0, r1, lsl #2
    fe14:	movs	r0, #0
    fe16:	str.w	r0, [r3], #4
    fe1a:	cmp	r3, r1
    fe1c:	bne.n	fe16 <__lshift+0x4e>
    fe1e:	sub.w	r3, lr, #20
    fe22:	add	r2, r3
    fe24:	ldr	r1, [r5, #16]
    fe26:	add.w	r3, r5, #20
    fe2a:	ands.w	lr, r4, #31
    fe2e:	add.w	r1, r3, r1, lsl #2
    fe32:	beq.n	fe92 <__lshift+0xca>
    fe34:	rsb	r9, lr, #32
    fe38:	mov	r0, r2
    fe3a:	mov.w	sl, #0
    fe3e:	ldr	r4, [r3, #0]
    fe40:	lsl.w	r4, r4, lr
    fe44:	orr.w	r4, r4, sl
    fe48:	str.w	r4, [r0], #4
    fe4c:	ldr.w	r4, [r3], #4
    fe50:	cmp	r1, r3
    fe52:	lsr.w	sl, r4, r9
    fe56:	bhi.n	fe3e <__lshift+0x76>
    fe58:	subs	r3, r1, r5
    fe5a:	subs	r3, #21
    fe5c:	bic.w	r3, r3, #3
    fe60:	adds	r3, #4
    fe62:	add.w	r0, r5, #21
    fe66:	cmp	r1, r0
    fe68:	it	cc
    fe6a:	movcc	r3, #4
    fe6c:	cmp.w	sl, #0
    fe70:	it	ne
    fe72:	movne	r7, r6
    fe74:	str.w	sl, [r2, r3]
    fe78:	ldr.w	r3, [r8, #68]	; 0x44
    fe7c:	ldr	r2, [r5, #4]
    fe7e:	str.w	r7, [ip, #16]
    fe82:	ldr.w	r1, [r3, r2, lsl #2]
    fe86:	str	r1, [r5, #0]
    fe88:	mov	r0, ip
    fe8a:	str.w	r5, [r3, r2, lsl #2]
    fe8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe92:	subs	r2, #4
    fe94:	ldr.w	r0, [r3], #4
    fe98:	str.w	r0, [r2, #4]!
    fe9c:	cmp	r1, r3
    fe9e:	bhi.n	fe94 <__lshift+0xcc>
    fea0:	b.n	fe78 <__lshift+0xb0>
    fea2:	ldr	r3, [pc, #12]	; (feb0 <__lshift+0xe8>)
    fea4:	ldr	r0, [pc, #12]	; (feb4 <__lshift+0xec>)
    fea6:	mov	r2, ip
    fea8:	mov.w	r1, #478	; 0x1de
    feac:	bl	13b80 <__assert_func>
    feb0:	.word	0x20000648
    feb4:	.word	0x200007c0

0000feb8 <__mcmp>:
    feb8:	ldr	r3, [r1, #16]
    feba:	mov	ip, r0
    febc:	ldr	r0, [r0, #16]
    febe:	subs	r0, r0, r3
    fec0:	bne.n	fef0 <__mcmp+0x38>
    fec2:	add.w	ip, ip, #20
    fec6:	adds	r1, #20
    fec8:	add.w	r2, ip, r3, lsl #2
    fecc:	push	{r4}
    fece:	add.w	r3, r1, r3, lsl #2
    fed2:	b.n	fed8 <__mcmp+0x20>
    fed4:	cmp	ip, r2
    fed6:	bcs.n	feea <__mcmp+0x32>
    fed8:	ldr.w	r4, [r2, #-4]!
    fedc:	ldr.w	r1, [r3, #-4]!
    fee0:	cmp	r4, r1
    fee2:	beq.n	fed4 <__mcmp+0x1c>
    fee4:	bcs.n	fef2 <__mcmp+0x3a>
    fee6:	mov.w	r0, #4294967295
    feea:	ldr.w	r4, [sp], #4
    feee:	bx	lr
    fef0:	bx	lr
    fef2:	movs	r0, #1
    fef4:	ldr.w	r4, [sp], #4
    fef8:	bx	lr
    fefa:	nop

0000fefc <__mdiff>:
    fefc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff00:	ldr	r7, [r1, #16]
    ff02:	ldr	r3, [r2, #16]
    ff04:	subs	r7, r7, r3
    ff06:	cmp	r7, #0
    ff08:	mov	r6, r1
    ff0a:	mov	r8, r2
    ff0c:	bne.n	1000e <__mdiff+0x112>
    ff0e:	add.w	r5, r1, #20
    ff12:	adds	r2, #20
    ff14:	add.w	r2, r2, r3, lsl #2
    ff18:	add.w	r3, r5, r3, lsl #2
    ff1c:	b.n	ff22 <__mdiff+0x26>
    ff1e:	cmp	r5, r3
    ff20:	bcs.n	10014 <__mdiff+0x118>
    ff22:	ldr.w	r1, [r3, #-4]!
    ff26:	ldr.w	r4, [r2, #-4]!
    ff2a:	cmp	r1, r4
    ff2c:	beq.n	ff1e <__mdiff+0x22>
    ff2e:	bcc.n	10004 <__mdiff+0x108>
    ff30:	ldr	r1, [r6, #4]
    ff32:	bl	f8fc <_Balloc>
    ff36:	mov	r9, r0
    ff38:	cmp	r0, #0
    ff3a:	beq.n	1002c <__mdiff+0x130>
    ff3c:	ldr	r5, [r6, #16]
    ff3e:	ldr.w	r2, [r8, #16]
    ff42:	str	r7, [r0, #12]
    ff44:	add.w	lr, r8, #20
    ff48:	add.w	r0, r6, #20
    ff4c:	add.w	sl, r9, #20
    ff50:	add.w	r1, r6, #16
    ff54:	add.w	r2, lr, r2, lsl #2
    ff58:	add.w	r7, r0, r5, lsl #2
    ff5c:	mov	r6, sl
    ff5e:	mov.w	ip, #0
    ff62:	ldr.w	r4, [lr], #4
    ff66:	ldr.w	fp, [r1, #4]!
    ff6a:	uxth	r3, r4
    ff6c:	uxtah	ip, ip, fp
    ff70:	sub.w	r3, ip, r3
    ff74:	mov.w	ip, r4, lsr #16
    ff78:	rsb	ip, ip, fp, lsr #16
    ff7c:	add.w	ip, ip, r3, asr #16
    ff80:	uxth	r3, r3
    ff82:	orr.w	r3, r3, ip, lsl #16
    ff86:	cmp	r2, lr
    ff88:	str.w	r3, [r6], #4
    ff8c:	mov.w	ip, ip, asr #16
    ff90:	bhi.n	ff62 <__mdiff+0x66>
    ff92:	sub.w	r1, r2, r8
    ff96:	subs	r1, #21
    ff98:	add.w	r8, r8, #21
    ff9c:	cmp	r2, r8
    ff9e:	bic.w	r4, r1, #3
    ffa2:	add.w	r4, r4, #4
    ffa6:	it	cc
    ffa8:	movcc	r4, #4
    ffaa:	add	r0, r4
    ffac:	bic.w	r2, r1, #3
    ffb0:	it	cc
    ffb2:	movcc	r2, #0
    ffb4:	cmp	r7, r0
    ffb6:	add	r2, sl
    ffb8:	add	r4, sl
    ffba:	bls.n	ffee <__mdiff+0xf2>
    ffbc:	mov	r6, r4
    ffbe:	mov	r1, r0
    ffc0:	ldr.w	r3, [r1], #4
    ffc4:	uxtah	ip, ip, r3
    ffc8:	mov.w	r2, ip, asr #16
    ffcc:	add.w	r2, r2, r3, lsr #16
    ffd0:	uxth.w	ip, ip
    ffd4:	orr.w	r3, ip, r2, lsl #16
    ffd8:	cmp	r7, r1
    ffda:	str.w	r3, [r6], #4
    ffde:	mov.w	ip, r2, asr #16
    ffe2:	bhi.n	ffc0 <__mdiff+0xc4>
    ffe4:	subs	r7, #1
    ffe6:	subs	r7, r7, r0
    ffe8:	bic.w	r7, r7, #3
    ffec:	adds	r2, r4, r7
    ffee:	cbnz	r3, fffa <__mdiff+0xfe>
    fff0:	ldr.w	r3, [r2, #-4]!
    fff4:	subs	r5, #1
    fff6:	cmp	r3, #0
    fff8:	beq.n	fff0 <__mdiff+0xf4>
    fffa:	str.w	r5, [r9, #16]
    fffe:	mov	r0, r9
   10000:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10004:	mov	r3, r6
   10006:	movs	r7, #1
   10008:	mov	r6, r8
   1000a:	mov	r8, r3
   1000c:	b.n	ff30 <__mdiff+0x34>
   1000e:	blt.n	10004 <__mdiff+0x108>
   10010:	movs	r7, #0
   10012:	b.n	ff30 <__mdiff+0x34>
   10014:	movs	r1, #0
   10016:	bl	f8fc <_Balloc>
   1001a:	mov	r9, r0
   1001c:	cbz	r0, 1003a <__mdiff+0x13e>
   1001e:	movs	r2, #1
   10020:	movs	r3, #0
   10022:	strd	r2, r3, [r9, #16]
   10026:	mov	r0, r9
   10028:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1002c:	ldr	r3, [pc, #24]	; (10048 <__mdiff+0x14c>)
   1002e:	ldr	r0, [pc, #28]	; (1004c <__mdiff+0x150>)
   10030:	mov	r2, r9
   10032:	movw	r1, #581	; 0x245
   10036:	bl	13b80 <__assert_func>
   1003a:	ldr	r3, [pc, #12]	; (10048 <__mdiff+0x14c>)
   1003c:	ldr	r0, [pc, #12]	; (1004c <__mdiff+0x150>)
   1003e:	mov	r2, r9
   10040:	movw	r1, #567	; 0x237
   10044:	bl	13b80 <__assert_func>
   10048:	.word	0x20000648
   1004c:	.word	0x200007c0

00010050 <__ulp>:
   10050:	sub	sp, #8
   10052:	vstr	d0, [sp]
   10056:	ldr	r3, [pc, #88]	; (100b0 <__ulp+0x60>)
   10058:	ldr	r2, [sp, #4]
   1005a:	ands	r3, r2
   1005c:	sub.w	r3, r3, #54525952	; 0x3400000
   10060:	cmp	r3, #0
   10062:	ble.n	10072 <__ulp+0x22>
   10064:	movs	r2, #0
   10066:	mov	r1, r3
   10068:	mov	r0, r2
   1006a:	vmov	d0, r0, r1
   1006e:	add	sp, #8
   10070:	bx	lr
   10072:	negs	r3, r3
   10074:	cmp.w	r3, #20971520	; 0x1400000
   10078:	mov.w	r2, r3, asr #20
   1007c:	bge.n	10092 <__ulp+0x42>
   1007e:	mov.w	r3, #524288	; 0x80000
   10082:	asrs	r3, r2
   10084:	movs	r2, #0
   10086:	mov	r1, r3
   10088:	mov	r0, r2
   1008a:	vmov	d0, r0, r1
   1008e:	add	sp, #8
   10090:	bx	lr
   10092:	sub.w	r3, r2, #20
   10096:	cmp	r3, #30
   10098:	itte	le
   1009a:	movle.w	r2, #2147483648	; 0x80000000
   1009e:	lsrle	r2, r3
   100a0:	movgt	r2, #1
   100a2:	movs	r3, #0
   100a4:	mov	r1, r3
   100a6:	mov	r0, r2
   100a8:	vmov	d0, r0, r1
   100ac:	add	sp, #8
   100ae:	bx	lr
   100b0:	.word	0x7ff00000

000100b4 <__b2d>:
   100b4:	push	{r3, r4, r5, r6, r7, lr}
   100b6:	ldr	r4, [r0, #16]
   100b8:	add.w	r6, r0, #20
   100bc:	add.w	r4, r6, r4, lsl #2
   100c0:	subs	r7, r4, #4
   100c2:	ldr.w	r5, [r4, #-4]
   100c6:	mov	r0, r5
   100c8:	bl	fab0 <__hi0bits>
   100cc:	rsb	r3, r0, #32
   100d0:	cmp	r0, #10
   100d2:	str	r3, [r1, #0]
   100d4:	ble.n	1010e <__b2d+0x5a>
   100d6:	cmp	r6, r7
   100d8:	bcs.n	100f2 <__b2d+0x3e>
   100da:	subs	r0, #11
   100dc:	ldr.w	r1, [r4, #-8]
   100e0:	bne.n	10140 <__b2d+0x8c>
   100e2:	orr.w	r3, r5, #1069547520	; 0x3fc00000
   100e6:	orr.w	r3, r3, #3145728	; 0x300000
   100ea:	mov	r2, r1
   100ec:	vmov	d0, r2, r3
   100f0:	pop	{r3, r4, r5, r6, r7, pc}
   100f2:	subs.w	r1, r0, #11
   100f6:	beq.n	100e2 <__b2d+0x2e>
   100f8:	lsl.w	r1, r5, r1
   100fc:	orr.w	r3, r1, #1069547520	; 0x3fc00000
   10100:	movs	r1, #0
   10102:	orr.w	r3, r3, #3145728	; 0x300000
   10106:	mov	r2, r1
   10108:	vmov	d0, r2, r3
   1010c:	pop	{r3, r4, r5, r6, r7, pc}
   1010e:	rsb	ip, r0, #11
   10112:	lsr.w	r1, r5, ip
   10116:	cmp	r6, r7
   10118:	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1011c:	it	cc
   1011e:	ldrcc.w	r1, [r4, #-8]
   10122:	add.w	r0, r0, #21
   10126:	ite	cc
   10128:	lsrcc.w	r1, r1, ip
   1012c:	movcs	r1, #0
   1012e:	lsl.w	r0, r5, r0
   10132:	orrs	r1, r0
   10134:	orr.w	r3, r3, #3145728	; 0x300000
   10138:	mov	r2, r1
   1013a:	vmov	d0, r2, r3
   1013e:	pop	{r3, r4, r5, r6, r7, pc}
   10140:	rsb	ip, r0, #32
   10144:	lsls	r5, r0
   10146:	lsr.w	r3, r1, ip
   1014a:	orr.w	r7, r5, r3
   1014e:	sub.w	r5, r4, #8
   10152:	cmp	r6, r5
   10154:	lsl.w	r1, r1, r0
   10158:	itt	cc
   1015a:	ldrcc.w	r0, [r4, #-12]
   1015e:	lsrcc.w	r0, r0, ip
   10162:	orr.w	r3, r7, #1069547520	; 0x3fc00000
   10166:	it	cc
   10168:	orrcc	r1, r0
   1016a:	orr.w	r3, r3, #3145728	; 0x300000
   1016e:	mov	r2, r1
   10170:	vmov	d0, r2, r3
   10174:	pop	{r3, r4, r5, r6, r7, pc}
   10176:	nop

00010178 <__d2b>:
   10178:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1017c:	mov	r8, r1
   1017e:	sub	sp, #12
   10180:	movs	r1, #1
   10182:	vmov	r6, r7, d0
   10186:	mov	r5, r2
   10188:	bl	f8fc <_Balloc>
   1018c:	mov	r4, r0
   1018e:	cmp	r0, #0
   10190:	beq.n	10236 <__d2b+0xbe>
   10192:	ubfx	r9, r7, #20, #11
   10196:	ubfx	r3, r7, #0, #20
   1019a:	cmp.w	r9, #0
   1019e:	beq.n	101a4 <__d2b+0x2c>
   101a0:	orr.w	r3, r3, #1048576	; 0x100000
   101a4:	cmp	r6, #0
   101a6:	str	r3, [sp, #4]
   101a8:	bne.n	101dc <__d2b+0x64>
   101aa:	add	r0, sp, #4
   101ac:	bl	faf0 <__lo0bits>
   101b0:	ldr	r2, [sp, #4]
   101b2:	str	r2, [r4, #20]
   101b4:	movs	r2, #1
   101b6:	add.w	r3, r0, #32
   101ba:	str	r2, [r4, #16]
   101bc:	cmp.w	r9, #0
   101c0:	beq.n	1020e <__d2b+0x96>
   101c2:	subw	r9, r9, #1075	; 0x433
   101c6:	add.w	r2, r9, r3
   101ca:	mov	r0, r4
   101cc:	rsb	r3, r3, #53	; 0x35
   101d0:	str.w	r2, [r8]
   101d4:	str	r3, [r5, #0]
   101d6:	add	sp, #12
   101d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   101dc:	mov	r0, sp
   101de:	str	r6, [sp, #0]
   101e0:	bl	faf0 <__lo0bits>
   101e4:	mov	r3, r0
   101e6:	cbz	r0, 1022e <__d2b+0xb6>
   101e8:	ldrd	r0, r2, [sp]
   101ec:	rsb	r1, r3, #32
   101f0:	lsl.w	r1, r2, r1
   101f4:	orrs	r1, r0
   101f6:	lsrs	r2, r3
   101f8:	str	r1, [r4, #20]
   101fa:	str	r2, [sp, #4]
   101fc:	cmp	r2, #0
   101fe:	str	r2, [r4, #24]
   10200:	ite	ne
   10202:	movne	r2, #2
   10204:	moveq	r2, #1
   10206:	str	r2, [r4, #16]
   10208:	cmp.w	r9, #0
   1020c:	bne.n	101c2 <__d2b+0x4a>
   1020e:	subw	r3, r3, #1074	; 0x432
   10212:	str.w	r3, [r8]
   10216:	add.w	r3, r4, r2, lsl #2
   1021a:	ldr	r0, [r3, #16]
   1021c:	bl	fab0 <__hi0bits>
   10220:	rsb	r3, r0, r2, lsl #5
   10224:	mov	r0, r4
   10226:	str	r3, [r5, #0]
   10228:	add	sp, #12
   1022a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1022e:	ldr	r2, [sp, #0]
   10230:	str	r2, [r4, #20]
   10232:	ldr	r2, [sp, #4]
   10234:	b.n	101fc <__d2b+0x84>
   10236:	ldr	r3, [pc, #12]	; (10244 <__d2b+0xcc>)
   10238:	ldr	r0, [pc, #12]	; (10248 <__d2b+0xd0>)
   1023a:	mov	r2, r4
   1023c:	movw	r1, #783	; 0x30f
   10240:	bl	13b80 <__assert_func>
   10244:	.word	0x20000648
   10248:	.word	0x200007c0

0001024c <__ratio>:
   1024c:	push	{r4, r5, r6, r7, lr}
   1024e:	sub	sp, #12
   10250:	mov	r6, r1
   10252:	mov	r1, sp
   10254:	mov	r7, r0
   10256:	bl	100b4 <__b2d>
   1025a:	add	r1, sp, #4
   1025c:	mov	r0, r6
   1025e:	vmov	r4, r5, d0
   10262:	vmov.f64	d7, d0
   10266:	bl	100b4 <__b2d>
   1026a:	ldr	r3, [r6, #16]
   1026c:	ldr	r2, [r7, #16]
   1026e:	subs	r2, r2, r3
   10270:	ldrd	r3, r1, [sp]
   10274:	subs	r3, r3, r1
   10276:	add.w	r3, r3, r2, lsl #5
   1027a:	cmp	r3, #0
   1027c:	ble.n	10292 <__ratio+0x46>
   1027e:	vmov	r2, s15
   10282:	add.w	r5, r2, r3, lsl #20
   10286:	vmov	d7, r4, r5
   1028a:	vdiv.f64	d0, d7, d0
   1028e:	add	sp, #12
   10290:	pop	{r4, r5, r6, r7, pc}
   10292:	vmov	r2, s1
   10296:	vmov	r0, r1, d0
   1029a:	rsb	r3, r3, r3, lsl #12
   1029e:	add.w	r1, r2, r3, lsl #20
   102a2:	vmov	d0, r0, r1
   102a6:	vdiv.f64	d0, d7, d0
   102aa:	add	sp, #12
   102ac:	pop	{r4, r5, r6, r7, pc}
   102ae:	nop

000102b0 <__copybits>:
   102b0:	subs	r1, #1
   102b2:	asrs	r1, r1, #5
   102b4:	add.w	ip, r1, #1
   102b8:	ldr	r1, [r2, #16]
   102ba:	add.w	r3, r2, #20
   102be:	add.w	r1, r3, r1, lsl #2
   102c2:	cmp	r3, r1
   102c4:	add.w	ip, r0, ip, lsl #2
   102c8:	bcs.n	102fa <__copybits+0x4a>
   102ca:	push	{r4, lr}
   102cc:	sub.w	lr, r0, #4
   102d0:	ldr.w	r4, [r3], #4
   102d4:	str.w	r4, [lr, #4]!
   102d8:	cmp	r1, r3
   102da:	bhi.n	102d0 <__copybits+0x20>
   102dc:	subs	r2, r1, r2
   102de:	sub.w	r3, r2, #21
   102e2:	bic.w	r3, r3, #3
   102e6:	adds	r3, #4
   102e8:	add	r0, r3
   102ea:	cmp	ip, r0
   102ec:	bls.n	102f8 <__copybits+0x48>
   102ee:	movs	r3, #0
   102f0:	str.w	r3, [r0], #4
   102f4:	cmp	ip, r0
   102f6:	bhi.n	102f0 <__copybits+0x40>
   102f8:	pop	{r4, pc}
   102fa:	cmp	ip, r0
   102fc:	bls.n	1030a <__copybits+0x5a>
   102fe:	movs	r3, #0
   10300:	str.w	r3, [r0], #4
   10304:	cmp	ip, r0
   10306:	bhi.n	10300 <__copybits+0x50>
   10308:	bx	lr
   1030a:	bx	lr

0001030c <__any_on>:
   1030c:	ldr	r3, [r0, #16]
   1030e:	asrs	r2, r1, #5
   10310:	cmp	r3, r2
   10312:	add.w	r0, r0, #20
   10316:	bge.n	1032c <__any_on+0x20>
   10318:	add.w	r3, r0, r3, lsl #2
   1031c:	b.n	10324 <__any_on+0x18>
   1031e:	ldr.w	r2, [r3, #-4]!
   10322:	cbnz	r2, 10356 <__any_on+0x4a>
   10324:	cmp	r3, r0
   10326:	bhi.n	1031e <__any_on+0x12>
   10328:	movs	r0, #0
   1032a:	bx	lr
   1032c:	ble.n	10350 <__any_on+0x44>
   1032e:	ands.w	r1, r1, #31
   10332:	beq.n	10350 <__any_on+0x44>
   10334:	push	{r4}
   10336:	ldr.w	r4, [r0, r2, lsl #2]
   1033a:	add.w	r3, r0, r2, lsl #2
   1033e:	lsr.w	r2, r4, r1
   10342:	lsls	r2, r1
   10344:	cmp	r4, r2
   10346:	beq.n	10362 <__any_on+0x56>
   10348:	movs	r0, #1
   1034a:	ldr.w	r4, [sp], #4
   1034e:	bx	lr
   10350:	add.w	r3, r0, r2, lsl #2
   10354:	b.n	10324 <__any_on+0x18>
   10356:	movs	r0, #1
   10358:	bx	lr
   1035a:	ldr.w	r2, [r3, #-4]!
   1035e:	cmp	r2, #0
   10360:	bne.n	10348 <__any_on+0x3c>
   10362:	cmp	r3, r0
   10364:	bhi.n	1035a <__any_on+0x4e>
   10366:	movs	r0, #0
   10368:	ldr.w	r4, [sp], #4
   1036c:	bx	lr
   1036e:	nop

00010370 <__ascii_wctomb>:
   10370:	cbz	r1, 10386 <__ascii_wctomb+0x16>
   10372:	cmp	r2, #255	; 0xff
   10374:	bhi.n	1037c <__ascii_wctomb+0xc>
   10376:	strb	r2, [r1, #0]
   10378:	movs	r0, #1
   1037a:	bx	lr
   1037c:	movs	r3, #138	; 0x8a
   1037e:	str	r3, [r0, #0]
   10380:	mov.w	r0, #4294967295
   10384:	bx	lr
   10386:	mov	r0, r1
   10388:	bx	lr
   1038a:	nop

0001038c <fcvtbuf>:
   1038c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10390:	mov	r6, r1
   10392:	ldr	r1, [pc, #152]	; (1042c <fcvtbuf+0xa0>)
   10394:	sub	sp, #28
   10396:	ldr	r7, [r1, #0]
   10398:	mov	r4, r0
   1039a:	mov	r8, r2
   1039c:	mov	r5, r3
   1039e:	cbz	r3, 103f6 <fcvtbuf+0x6a>
   103a0:	add	r2, sp, #20
   103a2:	mov	r3, r6
   103a4:	str	r2, [sp, #4]
   103a6:	movs	r1, #3
   103a8:	mov	r2, r4
   103aa:	str.w	r8, [sp]
   103ae:	mov	r0, r7
   103b0:	bl	13d60 <_dtoa_r>
   103b4:	ldr	r3, [sp, #20]
   103b6:	ldr	r2, [r6, #0]
   103b8:	cmp	r0, r3
   103ba:	mov	ip, r0
   103bc:	rsb	r2, r2, #0
   103c0:	mov	r1, r5
   103c2:	bcs.n	103d8 <fcvtbuf+0x4c>
   103c4:	subs	r0, r2, r0
   103c6:	ldrb.w	r3, [ip], #1
   103ca:	strb.w	r3, [r1], #1
   103ce:	ldr	r3, [sp, #20]
   103d0:	cmp	r3, ip
   103d2:	add.w	r2, r0, ip
   103d6:	bhi.n	103c6 <fcvtbuf+0x3a>
   103d8:	cmp	r4, r2
   103da:	ble.n	10426 <fcvtbuf+0x9a>
   103dc:	subs	r2, r4, r2
   103de:	add	r2, r1
   103e0:	movs	r3, #48	; 0x30
   103e2:	strb.w	r3, [r1], #1
   103e6:	cmp	r1, r2
   103e8:	bne.n	103e2 <fcvtbuf+0x56>
   103ea:	movs	r3, #0
   103ec:	strb	r3, [r2, #0]
   103ee:	mov	r0, r5
   103f0:	add	sp, #28
   103f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   103f6:	ldr	r2, [r7, #72]	; 0x48
   103f8:	add.w	r3, r0, #35	; 0x23
   103fc:	cmp	r2, r3
   103fe:	ble.n	10404 <fcvtbuf+0x78>
   10400:	ldr	r5, [r7, #76]	; 0x4c
   10402:	b.n	103a0 <fcvtbuf+0x14>
   10404:	add.w	r9, r0, #36	; 0x24
   10408:	ldr	r1, [r7, #76]	; 0x4c
   1040a:	mov	r2, r9
   1040c:	mov	r0, r7
   1040e:	vstr	d0, [sp, #8]
   10412:	bl	cc10 <_realloc_r>
   10416:	mov	r5, r0
   10418:	cmp	r0, #0
   1041a:	beq.n	103ee <fcvtbuf+0x62>
   1041c:	strd	r9, r0, [r7, #72]	; 0x48
   10420:	vldr	d0, [sp, #8]
   10424:	b.n	103a0 <fcvtbuf+0x14>
   10426:	mov	r2, r1
   10428:	b.n	103ea <fcvtbuf+0x5e>
   1042a:	nop
   1042c:	.word	0x2000930c

00010430 <_svfprintf_r>:
   10430:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10434:	vpush	{d8-d11}
   10438:	sub	sp, #324	; 0x144
   1043a:	mov	r4, r1
   1043c:	vmov	s22, r1
   10440:	mov	r8, r2
   10442:	str	r3, [sp, #32]
   10444:	mov	fp, r0
   10446:	bl	13afc <_localeconv_r>
   1044a:	ldr	r3, [r0, #0]
   1044c:	str	r3, [sp, #72]	; 0x48
   1044e:	mov	r0, r3
   10450:	bl	ec80 <strlen>
   10454:	add	r7, sp, #128	; 0x80
   10456:	str	r0, [sp, #64]	; 0x40
   10458:	movs	r2, #8
   1045a:	movs	r1, #0
   1045c:	mov	r0, r7
   1045e:	bl	9c1c <memset>
   10462:	ldrh	r3, [r4, #12]
   10464:	lsls	r3, r3, #24
   10466:	bpl.n	10470 <_svfprintf_r+0x40>
   10468:	ldr	r3, [r4, #16]
   1046a:	cmp	r3, #0
   1046c:	beq.w	1131a <_svfprintf_r+0xeea>
   10470:	movs	r3, #0
   10472:	vldr	d8, [pc, #524]	; 10680 <_svfprintf_r+0x250>
   10476:	vldr	d9, [pc, #528]	; 10688 <_svfprintf_r+0x258>
   1047a:	strd	r3, r3, [sp, #148]	; 0x94
   1047e:	strd	r3, r3, [sp, #76]	; 0x4c
   10482:	strd	r3, r3, [sp, #84]	; 0x54
   10486:	add	r2, sp, #156	; 0x9c
   10488:	str	r3, [sp, #56]	; 0x38
   1048a:	str	r2, [sp, #144]	; 0x90
   1048c:	mov	sl, r2
   1048e:	str	r3, [sp, #68]	; 0x44
   10490:	str	r3, [sp, #16]
   10492:	mov	r4, r8
   10494:	mov	r9, r4
   10496:	ldr	r3, [pc, #504]	; (10690 <_svfprintf_r+0x260>)
   10498:	ldr.w	r5, [r3, #228]	; 0xe4
   1049c:	bl	e6fc <__locale_mb_cur_max>
   104a0:	mov	r2, r9
   104a2:	mov	r3, r0
   104a4:	add	r1, sp, #112	; 0x70
   104a6:	str	r7, [sp, #0]
   104a8:	mov	r0, fp
   104aa:	blx	r5
   104ac:	cmp	r0, #0
   104ae:	beq.w	10612 <_svfprintf_r+0x1e2>
   104b2:	blt.w	10602 <_svfprintf_r+0x1d2>
   104b6:	ldr	r2, [sp, #112]	; 0x70
   104b8:	cmp	r2, #37	; 0x25
   104ba:	mov	r3, r0
   104bc:	beq.n	104c2 <_svfprintf_r+0x92>
   104be:	add	r9, r3
   104c0:	b.n	10496 <_svfprintf_r+0x66>
   104c2:	subs.w	r5, r9, r4
   104c6:	mov	r6, r0
   104c8:	bne.w	1061a <_svfprintf_r+0x1ea>
   104cc:	movs	r3, #0
   104ce:	mov.w	r2, #4294967295
   104d2:	strb.w	r3, [sp, #103]	; 0x67
   104d6:	mov	r8, r3
   104d8:	str	r3, [sp, #24]
   104da:	add.w	r9, r9, #1
   104de:	ldrb.w	r3, [r9]
   104e2:	str	r2, [sp, #12]
   104e4:	movs	r5, #43	; 0x2b
   104e6:	movs	r6, #32
   104e8:	add.w	r9, r9, #1
   104ec:	sub.w	r2, r3, #32
   104f0:	cmp	r2, #90	; 0x5a
   104f2:	bhi.w	10694 <_svfprintf_r+0x264>
   104f6:	tbh	[pc, r2, lsl #1]
   104fa:	.short	0x02e8
   104fc:	.word	0x00cd00cd
   10500:	.word	0x00cd02e3
   10504:	.word	0x00cd00cd
   10508:	.word	0x00cd006a
   1050c:	.word	0x020500cd
   10510:	.word	0x00cd0284
   10514:	.word	0x02c90210
   10518:	.word	0x02bd00cd
   1051c:	.word	0x005b005b
   10520:	.word	0x005b005b
   10524:	.word	0x005b005b
   10528:	.word	0x005b005b
   1052c:	.word	0x00cd005b
   10530:	.word	0x00cd00cd
   10534:	.word	0x00cd00cd
   10538:	.word	0x00cd00cd
   1053c:	.word	0x00cd0153
   10540:	.word	0x021a0183
   10544:	.word	0x01530153
   10548:	.word	0x00cd0153
   1054c:	.word	0x00cd00cd
   10550:	.word	0x021500cd
   10554:	.word	0x00cd00cd
   10558:	.word	0x00cd0296
   1055c:	.word	0x00cd00cd
   10560:	.word	0x00cd01ab
   10564:	.word	0x00cd02aa
   10568:	.word	0x06e300cd
   1056c:	.word	0x00cd00cd
   10570:	.word	0x00cd00cd
   10574:	.word	0x00cd00cd
   10578:	.word	0x00cd00cd
   1057c:	.word	0x00cd0153
   10580:	.word	0x01de0183
   10584:	.word	0x01530153
   10588:	.word	0x02770153
   1058c:	.word	0x007f01de
   10590:	.word	0x028900cd
   10594:	.word	0x025f00cd
   10598:	.word	0x022f06e0
   1059c:	.word	0x00cd007f
   105a0:	.word	0x007c01ab
   105a4:	.word	0x00cd06b8
   105a8:	.word	0x06bd00cd
   105ac:	.word	0x007c00cd
   105b0:	sub.w	r2, r3, #48	; 0x30
   105b4:	movs	r1, #0
   105b6:	ldrb.w	r3, [r9], #1
   105ba:	add.w	r1, r1, r1, lsl #2
   105be:	add.w	r1, r2, r1, lsl #1
   105c2:	sub.w	r2, r3, #48	; 0x30
   105c6:	cmp	r2, #9
   105c8:	bls.n	105b6 <_svfprintf_r+0x186>
   105ca:	str	r1, [sp, #24]
   105cc:	b.n	104ec <_svfprintf_r+0xbc>
   105ce:	mov	r0, fp
   105d0:	bl	13afc <_localeconv_r>
   105d4:	ldr	r3, [r0, #4]
   105d6:	str	r3, [sp, #84]	; 0x54
   105d8:	mov	r0, r3
   105da:	bl	ec80 <strlen>
   105de:	str	r0, [sp, #88]	; 0x58
   105e0:	mov	r0, fp
   105e2:	bl	13afc <_localeconv_r>
   105e6:	ldr	r3, [r0, #8]
   105e8:	str	r3, [sp, #76]	; 0x4c
   105ea:	ldr	r3, [sp, #88]	; 0x58
   105ec:	cmp	r3, #0
   105ee:	bne.w	1124c <_svfprintf_r+0xe1c>
   105f2:	ldrb.w	r3, [r9]
   105f6:	b.n	104e8 <_svfprintf_r+0xb8>
   105f8:	ldrb.w	r3, [r9]
   105fc:	orr.w	r8, r8, #32
   10600:	b.n	104e8 <_svfprintf_r+0xb8>
   10602:	movs	r2, #8
   10604:	movs	r1, #0
   10606:	mov	r0, r7
   10608:	bl	9c1c <memset>
   1060c:	movs	r3, #1
   1060e:	add	r9, r3
   10610:	b.n	10496 <_svfprintf_r+0x66>
   10612:	subs.w	r5, r9, r4
   10616:	mov	r6, r0
   10618:	beq.n	1063e <_svfprintf_r+0x20e>
   1061a:	ldr	r3, [sp, #152]	; 0x98
   1061c:	add	r3, r5
   1061e:	str	r3, [sp, #152]	; 0x98
   10620:	ldr	r3, [sp, #148]	; 0x94
   10622:	adds	r3, #1
   10624:	cmp	r3, #7
   10626:	strd	r4, r5, [sl]
   1062a:	str	r3, [sp, #148]	; 0x94
   1062c:	bgt.n	10668 <_svfprintf_r+0x238>
   1062e:	add.w	sl, sl, #8
   10632:	ldr	r3, [sp, #16]
   10634:	add	r3, r5
   10636:	str	r3, [sp, #16]
   10638:	cmp	r6, #0
   1063a:	bne.w	104cc <_svfprintf_r+0x9c>
   1063e:	ldr	r3, [sp, #152]	; 0x98
   10640:	cmp	r3, #0
   10642:	bne.w	11a5c <_svfprintf_r+0x162c>
   10646:	vmov	r3, s22
   1064a:	ldrsh.w	r3, [r3, #12]
   1064e:	tst.w	r3, #64	; 0x40
   10652:	ldr	r3, [sp, #16]
   10654:	it	ne
   10656:	movne.w	r3, #4294967295
   1065a:	str	r3, [sp, #16]
   1065c:	ldr	r0, [sp, #16]
   1065e:	add	sp, #324	; 0x144
   10660:	vpop	{d8-d11}
   10664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10668:	vmov	r1, s22
   1066c:	add	r2, sp, #144	; 0x90
   1066e:	mov	r0, fp
   10670:	bl	15148 <__ssprint_r>
   10674:	cmp	r0, #0
   10676:	bne.n	10646 <_svfprintf_r+0x216>
   10678:	add.w	sl, sp, #156	; 0x9c
   1067c:	b.n	10632 <_svfprintf_r+0x202>
   1067e:	nop
	...
   10688:	.word	0xffffffff
   1068c:	.word	0x7fefffff
   10690:	.word	0x20008d84
   10694:	str	r3, [sp, #44]	; 0x2c
   10696:	cmp	r3, #0
   10698:	beq.n	1063e <_svfprintf_r+0x20e>
   1069a:	movs	r1, #0
   1069c:	strd	r1, r1, [sp, #48]	; 0x30
   106a0:	strb.w	r3, [sp, #220]	; 0xdc
   106a4:	movs	r3, #1
   106a6:	strb.w	r1, [sp, #103]	; 0x67
   106aa:	str	r3, [sp, #8]
   106ac:	str	r1, [sp, #28]
   106ae:	str	r3, [sp, #20]
   106b0:	str	r1, [sp, #12]
   106b2:	str	r1, [sp, #60]	; 0x3c
   106b4:	add	r4, sp, #220	; 0xdc
   106b6:	ands.w	r3, r8, #2
   106ba:	str	r3, [sp, #36]	; 0x24
   106bc:	beq.n	106c4 <_svfprintf_r+0x294>
   106be:	ldr	r3, [sp, #8]
   106c0:	adds	r3, #2
   106c2:	str	r3, [sp, #8]
   106c4:	ands.w	r3, r8, #132	; 0x84
   106c8:	str	r3, [sp, #40]	; 0x28
   106ca:	bne.n	106d8 <_svfprintf_r+0x2a8>
   106cc:	ldr	r3, [sp, #24]
   106ce:	ldr	r2, [sp, #8]
   106d0:	subs	r5, r3, r2
   106d2:	cmp	r5, #0
   106d4:	bgt.w	10daa <_svfprintf_r+0x97a>
   106d8:	ldr	r2, [sp, #152]	; 0x98
   106da:	cbz	r1, 10700 <_svfprintf_r+0x2d0>
   106dc:	ldr	r1, [sp, #148]	; 0x94
   106de:	add.w	r0, sp, #103	; 0x67
   106e2:	adds	r1, #1
   106e4:	adds	r2, #1
   106e6:	str.w	r0, [sl]
   106ea:	cmp	r1, #7
   106ec:	mov.w	r0, #1
   106f0:	str	r2, [sp, #152]	; 0x98
   106f2:	str	r1, [sp, #148]	; 0x94
   106f4:	str.w	r0, [sl, #4]
   106f8:	bgt.w	10e40 <_svfprintf_r+0xa10>
   106fc:	add.w	sl, sl, #8
   10700:	ldr	r3, [sp, #36]	; 0x24
   10702:	cbz	r3, 10726 <_svfprintf_r+0x2f6>
   10704:	ldr	r3, [sp, #148]	; 0x94
   10706:	add	r1, sp, #104	; 0x68
   10708:	adds	r3, #1
   1070a:	adds	r2, #2
   1070c:	str.w	r1, [sl]
   10710:	cmp	r3, #7
   10712:	mov.w	r1, #2
   10716:	str	r2, [sp, #152]	; 0x98
   10718:	str	r3, [sp, #148]	; 0x94
   1071a:	str.w	r1, [sl, #4]
   1071e:	bgt.w	10e68 <_svfprintf_r+0xa38>
   10722:	add.w	sl, sl, #8
   10726:	ldr	r3, [sp, #40]	; 0x28
   10728:	cmp	r3, #128	; 0x80
   1072a:	beq.w	10c06 <_svfprintf_r+0x7d6>
   1072e:	ldr	r3, [sp, #12]
   10730:	ldr	r1, [sp, #20]
   10732:	subs	r5, r3, r1
   10734:	cmp	r5, #0
   10736:	bgt.w	10c84 <_svfprintf_r+0x854>
   1073a:	tst.w	r8, #256	; 0x100
   1073e:	bne.w	10b5c <_svfprintf_r+0x72c>
   10742:	ldr	r3, [sp, #20]
   10744:	str.w	r3, [sl, #4]
   10748:	add	r2, r3
   1074a:	ldr	r3, [sp, #148]	; 0x94
   1074c:	str.w	r4, [sl]
   10750:	adds	r3, #1
   10752:	cmp	r3, #7
   10754:	str	r2, [sp, #152]	; 0x98
   10756:	str	r3, [sp, #148]	; 0x94
   10758:	bgt.w	10d92 <_svfprintf_r+0x962>
   1075c:	add.w	sl, sl, #8
   10760:	tst.w	r8, #4
   10764:	beq.n	10772 <_svfprintf_r+0x342>
   10766:	ldr	r3, [sp, #24]
   10768:	ldr	r1, [sp, #8]
   1076a:	subs	r4, r3, r1
   1076c:	cmp	r4, #0
   1076e:	bgt.w	10e82 <_svfprintf_r+0xa52>
   10772:	ldr	r3, [sp, #16]
   10774:	ldr	r1, [sp, #24]
   10776:	ldr	r0, [sp, #8]
   10778:	cmp	r1, r0
   1077a:	ite	ge
   1077c:	addge	r3, r3, r1
   1077e:	addlt	r3, r3, r0
   10780:	str	r3, [sp, #16]
   10782:	cmp	r2, #0
   10784:	bne.w	10ce8 <_svfprintf_r+0x8b8>
   10788:	movs	r3, #0
   1078a:	str	r3, [sp, #148]	; 0x94
   1078c:	ldr	r3, [sp, #28]
   1078e:	cbz	r3, 10798 <_svfprintf_r+0x368>
   10790:	ldr	r1, [sp, #28]
   10792:	mov	r0, fp
   10794:	bl	eea4 <_free_r>
   10798:	add.w	sl, sp, #156	; 0x9c
   1079c:	mov	r4, r9
   1079e:	b.n	10494 <_svfprintf_r+0x64>
   107a0:	str	r3, [sp, #44]	; 0x2c
   107a2:	ldr	r3, [sp, #32]
   107a4:	adds	r3, #7
   107a6:	bic.w	r3, r3, #7
   107aa:	vldmia	r3!, {d8}
   107ae:	vabs.f64	d7, d8
   107b2:	vcmp.f64	d7, d9
   107b6:	vmrs	APSR_nzcv, fpscr
   107ba:	str	r3, [sp, #32]
   107bc:	ble.w	11192 <_svfprintf_r+0xd62>
   107c0:	vcmpe.f64	d8, #0.0
   107c4:	vmrs	APSR_nzcv, fpscr
   107c8:	bmi.w	1187e <_svfprintf_r+0x144e>
   107cc:	ldrb.w	r1, [sp, #103]	; 0x67
   107d0:	ldr	r4, [pc, #684]	; (10a80 <_svfprintf_r+0x650>)
   107d2:	ldr	r3, [pc, #688]	; (10a84 <_svfprintf_r+0x654>)
   107d4:	bic.w	r8, r8, #128	; 0x80
   107d8:	ldr	r2, [sp, #44]	; 0x2c
   107da:	cmp	r2, #71	; 0x47
   107dc:	it	gt
   107de:	movgt	r4, r3
   107e0:	movs	r3, #0
   107e2:	strd	r3, r3, [sp, #48]	; 0x30
   107e6:	movs	r2, #3
   107e8:	str	r3, [sp, #28]
   107ea:	str	r2, [sp, #8]
   107ec:	str	r2, [sp, #20]
   107ee:	str	r3, [sp, #12]
   107f0:	str	r3, [sp, #60]	; 0x3c
   107f2:	cmp	r1, #0
   107f4:	beq.w	106b6 <_svfprintf_r+0x286>
   107f8:	ldr	r3, [sp, #8]
   107fa:	adds	r3, #1
   107fc:	str	r3, [sp, #8]
   107fe:	b.n	106b6 <_svfprintf_r+0x286>
   10800:	cmp	r3, #67	; 0x43
   10802:	str	r3, [sp, #44]	; 0x2c
   10804:	beq.n	1080e <_svfprintf_r+0x3de>
   10806:	tst.w	r8, #16
   1080a:	beq.w	112c8 <_svfprintf_r+0xe98>
   1080e:	ldr	r5, [sp, #32]
   10810:	movs	r2, #8
   10812:	movs	r1, #0
   10814:	add	r0, sp, #136	; 0x88
   10816:	add	r4, sp, #220	; 0xdc
   10818:	bl	9c1c <memset>
   1081c:	add	r3, sp, #136	; 0x88
   1081e:	ldr.w	r2, [r5], #4
   10822:	mov	r1, r4
   10824:	mov	r0, fp
   10826:	bl	14ef4 <_wcrtomb_r>
   1082a:	mov	r3, r0
   1082c:	adds	r3, #1
   1082e:	str	r0, [sp, #20]
   10830:	beq.w	11e10 <_svfprintf_r+0x19e0>
   10834:	ldr	r3, [sp, #20]
   10836:	str	r5, [sp, #32]
   10838:	bic.w	r3, r3, r3, asr #31
   1083c:	str	r3, [sp, #8]
   1083e:	movs	r1, #0
   10840:	strd	r1, r1, [sp, #48]	; 0x30
   10844:	strb.w	r1, [sp, #103]	; 0x67
   10848:	str	r1, [sp, #28]
   1084a:	str	r1, [sp, #12]
   1084c:	str	r1, [sp, #60]	; 0x3c
   1084e:	b.n	106b6 <_svfprintf_r+0x286>
   10850:	str	r3, [sp, #44]	; 0x2c
   10852:	ldr	r3, [sp, #32]
   10854:	mov	r2, r3
   10856:	movs	r3, #0
   10858:	strb.w	r3, [sp, #103]	; 0x67
   1085c:	mov	r3, r2
   1085e:	ldr.w	r4, [r3], #4
   10862:	str	r3, [sp, #32]
   10864:	cmp	r4, #0
   10866:	beq.w	112fa <_svfprintf_r+0xeca>
   1086a:	ldr	r3, [sp, #44]	; 0x2c
   1086c:	cmp	r3, #83	; 0x53
   1086e:	beq.w	1164a <_svfprintf_r+0x121a>
   10872:	ands.w	r3, r8, #16
   10876:	str	r3, [sp, #48]	; 0x30
   10878:	bne.w	1164a <_svfprintf_r+0x121a>
   1087c:	ldr	r3, [sp, #12]
   1087e:	adds	r5, r3, #1
   10880:	beq.w	11a4e <_svfprintf_r+0x161e>
   10884:	ldr	r1, [sp, #48]	; 0x30
   10886:	mov	r2, r3
   10888:	mov	r0, r4
   1088a:	bl	ebe0 <memchr>
   1088e:	str	r0, [sp, #28]
   10890:	cmp	r0, #0
   10892:	beq.w	11ee6 <_svfprintf_r+0x1ab6>
   10896:	ldr	r3, [sp, #28]
   10898:	subs	r2, r3, r4
   1089a:	str	r2, [sp, #20]
   1089c:	ldr	r3, [sp, #48]	; 0x30
   1089e:	str	r3, [sp, #12]
   108a0:	bic.w	r2, r2, r2, asr #31
   108a4:	str	r3, [sp, #60]	; 0x3c
   108a6:	str	r3, [sp, #52]	; 0x34
   108a8:	str	r3, [sp, #28]
   108aa:	movs	r3, #115	; 0x73
   108ac:	ldrb.w	r1, [sp, #103]	; 0x67
   108b0:	str	r2, [sp, #8]
   108b2:	str	r3, [sp, #44]	; 0x2c
   108b4:	b.n	107f2 <_svfprintf_r+0x3c2>
   108b6:	tst.w	r8, #32
   108ba:	str	r3, [sp, #44]	; 0x2c
   108bc:	ldr	r3, [sp, #32]
   108be:	beq.n	1093c <_svfprintf_r+0x50c>
   108c0:	adds	r3, #7
   108c2:	bic.w	r3, r3, #7
   108c6:	mov	r2, r3
   108c8:	mov	r1, r2
   108ca:	ldr	r3, [r3, #4]
   108cc:	ldr.w	r2, [r1], #8
   108d0:	str	r1, [sp, #32]
   108d2:	mov	r1, r3
   108d4:	cmp	r3, #0
   108d6:	blt.w	110f2 <_svfprintf_r+0xcc2>
   108da:	ldr	r3, [sp, #12]
   108dc:	adds	r3, #1
   108de:	beq.w	10e1e <_svfprintf_r+0x9ee>
   108e2:	bic.w	r0, r8, #128	; 0x80
   108e6:	orrs.w	r3, r2, r1
   108ea:	str	r0, [sp, #8]
   108ec:	bne.w	10e22 <_svfprintf_r+0x9f2>
   108f0:	ldr	r3, [sp, #12]
   108f2:	cmp	r3, #0
   108f4:	bne.w	10e2c <_svfprintf_r+0x9fc>
   108f8:	mov	r8, r0
   108fa:	movs	r3, #0
   108fc:	str	r3, [sp, #12]
   108fe:	str	r3, [sp, #20]
   10900:	add	r4, sp, #320	; 0x140
   10902:	b.n	10b12 <_svfprintf_r+0x6e2>
   10904:	ldr	r3, [sp, #32]
   10906:	ldr.w	r2, [r3], #4
   1090a:	str	r2, [sp, #24]
   1090c:	cmp	r2, #0
   1090e:	bge.w	11144 <_svfprintf_r+0xd14>
   10912:	ldr	r2, [sp, #24]
   10914:	str	r3, [sp, #32]
   10916:	negs	r2, r2
   10918:	str	r2, [sp, #24]
   1091a:	ldrb.w	r3, [r9]
   1091e:	orr.w	r8, r8, #4
   10922:	b.n	104e8 <_svfprintf_r+0xb8>
   10924:	ldrb.w	r3, [r9]
   10928:	orr.w	r8, r8, #8
   1092c:	b.n	104e8 <_svfprintf_r+0xb8>
   1092e:	orr.w	r8, r8, #16
   10932:	tst.w	r8, #32
   10936:	str	r3, [sp, #44]	; 0x2c
   10938:	ldr	r3, [sp, #32]
   1093a:	bne.n	108c0 <_svfprintf_r+0x490>
   1093c:	tst.w	r8, #16
   10940:	bne.w	1115a <_svfprintf_r+0xd2a>
   10944:	tst.w	r8, #64	; 0x40
   10948:	beq.w	11152 <_svfprintf_r+0xd22>
   1094c:	ldrsh.w	r2, [r3], #4
   10950:	str	r3, [sp, #32]
   10952:	asrs	r1, r2, #31
   10954:	mov	r3, r1
   10956:	b.n	108d4 <_svfprintf_r+0x4a4>
   10958:	ldr	r3, [sp, #32]
   1095a:	orr.w	r2, r8, #2
   1095e:	str	r2, [sp, #8]
   10960:	ldr.w	r2, [r3], #4
   10964:	str	r3, [sp, #32]
   10966:	movw	r3, #30768	; 0x7830
   1096a:	strh.w	r3, [sp, #104]	; 0x68
   1096e:	movs	r0, #120	; 0x78
   10970:	ldr	r3, [pc, #276]	; (10a88 <_svfprintf_r+0x658>)
   10972:	str	r3, [sp, #68]	; 0x44
   10974:	movs	r1, #0
   10976:	movs	r3, #2
   10978:	str	r0, [sp, #44]	; 0x2c
   1097a:	movs	r0, #0
   1097c:	ldr	r4, [sp, #12]
   1097e:	strb.w	r0, [sp, #103]	; 0x67
   10982:	adds	r0, r4, #1
   10984:	beq.w	10ae2 <_svfprintf_r+0x6b2>
   10988:	ldr	r0, [sp, #8]
   1098a:	bic.w	r8, r0, #128	; 0x80
   1098e:	orrs.w	r0, r2, r1
   10992:	bne.w	10ade <_svfprintf_r+0x6ae>
   10996:	cmp	r4, #0
   10998:	bne.w	116f8 <_svfprintf_r+0x12c8>
   1099c:	cmp	r3, #0
   1099e:	bne.n	108fa <_svfprintf_r+0x4ca>
   109a0:	ldr	r3, [sp, #8]
   109a2:	ands.w	r3, r3, #1
   109a6:	str	r3, [sp, #20]
   109a8:	beq.w	1114e <_svfprintf_r+0xd1e>
   109ac:	movs	r3, #48	; 0x30
   109ae:	strb.w	r3, [sp, #319]	; 0x13f
   109b2:	addw	r4, sp, #319	; 0x13f
   109b6:	b.n	10b12 <_svfprintf_r+0x6e2>
   109b8:	tst.w	r8, #32
   109bc:	bne.w	11168 <_svfprintf_r+0xd38>
   109c0:	tst.w	r8, #16
   109c4:	bne.w	11706 <_svfprintf_r+0x12d6>
   109c8:	tst.w	r8, #64	; 0x40
   109cc:	bne.w	118fe <_svfprintf_r+0x14ce>
   109d0:	tst.w	r8, #512	; 0x200
   109d4:	beq.w	11706 <_svfprintf_r+0x12d6>
   109d8:	ldr	r3, [sp, #32]
   109da:	ldr	r1, [sp, #16]
   109dc:	ldr.w	r2, [r3], #4
   109e0:	str	r3, [sp, #32]
   109e2:	strb	r1, [r2, #0]
   109e4:	mov	r4, r9
   109e6:	b.n	10494 <_svfprintf_r+0x64>
   109e8:	ldrb.w	r3, [r9]
   109ec:	cmp	r3, #104	; 0x68
   109ee:	ittte	eq
   109f0:	ldrbeq.w	r3, [r9, #1]
   109f4:	orreq.w	r8, r8, #512	; 0x200
   109f8:	addeq.w	r9, r9, #1
   109fc:	orrne.w	r8, r8, #64	; 0x40
   10a00:	b.n	104e8 <_svfprintf_r+0xb8>
   10a02:	ldrb.w	r3, [r9]
   10a06:	strb.w	r5, [sp, #103]	; 0x67
   10a0a:	b.n	104e8 <_svfprintf_r+0xb8>
   10a0c:	ldrb.w	r3, [r9]
   10a10:	cmp	r3, #108	; 0x6c
   10a12:	ittte	eq
   10a14:	ldrbeq.w	r3, [r9, #1]
   10a18:	orreq.w	r8, r8, #32
   10a1c:	addeq.w	r9, r9, #1
   10a20:	orrne.w	r8, r8, #16
   10a24:	b.n	104e8 <_svfprintf_r+0xb8>
   10a26:	str	r3, [sp, #44]	; 0x2c
   10a28:	orr.w	r8, r8, #16
   10a2c:	ands.w	r1, r8, #32
   10a30:	beq.w	110d6 <_svfprintf_r+0xca6>
   10a34:	ldr	r3, [sp, #32]
   10a36:	adds	r3, #7
   10a38:	bic.w	r3, r3, #7
   10a3c:	ldr	r1, [r3, #4]
   10a3e:	ldr.w	r2, [r3], #8
   10a42:	str	r3, [sp, #32]
   10a44:	bic.w	r3, r8, #1024	; 0x400
   10a48:	str	r3, [sp, #8]
   10a4a:	movs	r3, #0
   10a4c:	b.n	1097a <_svfprintf_r+0x54a>
   10a4e:	str	r3, [sp, #44]	; 0x2c
   10a50:	orr.w	r3, r8, #16
   10a54:	str	r3, [sp, #8]
   10a56:	ldr	r3, [sp, #8]
   10a58:	ands.w	r1, r3, #32
   10a5c:	beq.w	110b2 <_svfprintf_r+0xc82>
   10a60:	ldr	r3, [sp, #32]
   10a62:	adds	r3, #7
   10a64:	bic.w	r3, r3, #7
   10a68:	ldr	r1, [r3, #4]
   10a6a:	ldr.w	r2, [r3], #8
   10a6e:	str	r3, [sp, #32]
   10a70:	movs	r3, #1
   10a72:	b.n	1097a <_svfprintf_r+0x54a>
   10a74:	ldrb.w	r3, [r9]
   10a78:	orr.w	r8, r8, #128	; 0x80
   10a7c:	b.n	104e8 <_svfprintf_r+0xb8>
   10a7e:	nop
   10a80:	.word	0x200009bc
   10a84:	.word	0x200009c0
   10a88:	.word	0x200009cc
   10a8c:	mov	r1, r9
   10a8e:	ldrb.w	r3, [r1], #1
   10a92:	cmp	r3, #42	; 0x2a
   10a94:	beq.w	11f2a <_svfprintf_r+0x1afa>
   10a98:	sub.w	r2, r3, #48	; 0x30
   10a9c:	cmp	r2, #9
   10a9e:	mov	r9, r1
   10aa0:	it	ls
   10aa2:	movls	r1, #0
   10aa4:	bhi.w	11d30 <_svfprintf_r+0x1900>
   10aa8:	ldrb.w	r3, [r9], #1
   10aac:	add.w	r1, r1, r1, lsl #2
   10ab0:	add.w	r1, r2, r1, lsl #1
   10ab4:	sub.w	r2, r3, #48	; 0x30
   10ab8:	cmp	r2, #9
   10aba:	bls.n	10aa8 <_svfprintf_r+0x678>
   10abc:	str	r1, [sp, #12]
   10abe:	b.n	104ec <_svfprintf_r+0xbc>
   10ac0:	ldrb.w	r3, [r9]
   10ac4:	orr.w	r8, r8, #1
   10ac8:	b.n	104e8 <_svfprintf_r+0xb8>
   10aca:	ldrb.w	r3, [sp, #103]	; 0x67
   10ace:	cmp	r3, #0
   10ad0:	bne.w	105f2 <_svfprintf_r+0x1c2>
   10ad4:	ldrb.w	r3, [r9]
   10ad8:	strb.w	r6, [sp, #103]	; 0x67
   10adc:	b.n	104e8 <_svfprintf_r+0xb8>
   10ade:	str.w	r8, [sp, #8]
   10ae2:	cmp	r3, #1
   10ae4:	beq.w	10e22 <_svfprintf_r+0x9f2>
   10ae8:	cmp	r3, #2
   10aea:	add	r4, sp, #320	; 0x140
   10aec:	bne.n	10b30 <_svfprintf_r+0x700>
   10aee:	ldr	r0, [sp, #68]	; 0x44
   10af0:	and.w	r3, r2, #15
   10af4:	lsrs	r2, r2, #4
   10af6:	ldrb	r3, [r0, r3]
   10af8:	strb.w	r3, [r4, #-1]!
   10afc:	orr.w	r2, r2, r1, lsl #28
   10b00:	lsrs	r1, r1, #4
   10b02:	orrs.w	r3, r2, r1
   10b06:	bne.n	10af0 <_svfprintf_r+0x6c0>
   10b08:	add	r3, sp, #320	; 0x140
   10b0a:	subs	r3, r3, r4
   10b0c:	ldr.w	r8, [sp, #8]
   10b10:	str	r3, [sp, #20]
   10b12:	ldr	r2, [sp, #20]
   10b14:	ldr	r0, [sp, #12]
   10b16:	ldrb.w	r1, [sp, #103]	; 0x67
   10b1a:	cmp	r2, r0
   10b1c:	mov.w	r3, #0
   10b20:	it	lt
   10b22:	movlt	r2, r0
   10b24:	strd	r3, r3, [sp, #48]	; 0x30
   10b28:	str	r3, [sp, #28]
   10b2a:	str	r2, [sp, #8]
   10b2c:	str	r3, [sp, #60]	; 0x3c
   10b2e:	b.n	107f2 <_svfprintf_r+0x3c2>
   10b30:	and.w	r3, r2, #7
   10b34:	lsrs	r2, r2, #3
   10b36:	orr.w	r2, r2, r1, lsl #29
   10b3a:	lsrs	r1, r1, #3
   10b3c:	adds	r3, #48	; 0x30
   10b3e:	orrs.w	r5, r2, r1
   10b42:	mov	r0, r4
   10b44:	strb.w	r3, [r4, #-1]!
   10b48:	bne.n	10b30 <_svfprintf_r+0x700>
   10b4a:	ldr	r2, [sp, #8]
   10b4c:	lsls	r1, r2, #31
   10b4e:	bmi.w	10fec <_svfprintf_r+0xbbc>
   10b52:	add	r3, sp, #320	; 0x140
   10b54:	subs	r3, r3, r4
   10b56:	mov	r8, r2
   10b58:	str	r3, [sp, #20]
   10b5a:	b.n	10b12 <_svfprintf_r+0x6e2>
   10b5c:	ldr	r3, [sp, #44]	; 0x2c
   10b5e:	cmp	r3, #101	; 0x65
   10b60:	ble.w	10d0c <_svfprintf_r+0x8dc>
   10b64:	vcmp.f64	d8, #0.0
   10b68:	vmrs	APSR_nzcv, fpscr
   10b6c:	bne.w	10ef2 <_svfprintf_r+0xac2>
   10b70:	ldr	r3, [sp, #148]	; 0x94
   10b72:	ldr	r1, [pc, #744]	; (10e5c <_svfprintf_r+0xa2c>)
   10b74:	str.w	r1, [sl]
   10b78:	adds	r3, #1
   10b7a:	adds	r2, #1
   10b7c:	movs	r1, #1
   10b7e:	cmp	r3, #7
   10b80:	str	r2, [sp, #152]	; 0x98
   10b82:	str	r3, [sp, #148]	; 0x94
   10b84:	str.w	r1, [sl, #4]
   10b88:	bgt.w	1162e <_svfprintf_r+0x11fe>
   10b8c:	add.w	sl, sl, #8
   10b90:	ldr	r3, [sp, #108]	; 0x6c
   10b92:	ldr	r1, [sp, #56]	; 0x38
   10b94:	cmp	r3, r1
   10b96:	bge.w	1113a <_svfprintf_r+0xd0a>
   10b9a:	ldr	r3, [sp, #64]	; 0x40
   10b9c:	ldr	r1, [sp, #72]	; 0x48
   10b9e:	add	r2, r3
   10ba0:	strd	r1, r3, [sl]
   10ba4:	ldr	r3, [sp, #148]	; 0x94
   10ba6:	str	r2, [sp, #152]	; 0x98
   10ba8:	adds	r3, #1
   10baa:	cmp	r3, #7
   10bac:	str	r3, [sp, #148]	; 0x94
   10bae:	bgt.w	112e0 <_svfprintf_r+0xeb0>
   10bb2:	add.w	sl, sl, #8
   10bb6:	ldr	r3, [sp, #56]	; 0x38
   10bb8:	subs	r4, r3, #1
   10bba:	cmp	r4, #0
   10bbc:	ble.w	10760 <_svfprintf_r+0x330>
   10bc0:	cmp	r4, #16
   10bc2:	ldr	r3, [sp, #148]	; 0x94
   10bc4:	ble.w	116a4 <_svfprintf_r+0x1274>
   10bc8:	vmov	r6, s22
   10bcc:	movs	r5, #16
   10bce:	b.n	10bdc <_svfprintf_r+0x7ac>
   10bd0:	add.w	sl, sl, #8
   10bd4:	subs	r4, #16
   10bd6:	cmp	r4, #16
   10bd8:	ble.w	116a4 <_svfprintf_r+0x1274>
   10bdc:	adds	r3, #1
   10bde:	ldr	r1, [pc, #640]	; (10e60 <_svfprintf_r+0xa30>)
   10be0:	adds	r2, #16
   10be2:	cmp	r3, #7
   10be4:	strd	r1, r5, [sl]
   10be8:	strd	r3, r2, [sp, #148]	; 0x94
   10bec:	ble.n	10bd0 <_svfprintf_r+0x7a0>
   10bee:	add	r2, sp, #144	; 0x90
   10bf0:	mov	r1, r6
   10bf2:	mov	r0, fp
   10bf4:	bl	15148 <__ssprint_r>
   10bf8:	cmp	r0, #0
   10bfa:	bne.n	10cfa <_svfprintf_r+0x8ca>
   10bfc:	ldrd	r3, r2, [sp, #148]	; 0x94
   10c00:	add.w	sl, sp, #156	; 0x9c
   10c04:	b.n	10bd4 <_svfprintf_r+0x7a4>
   10c06:	ldr	r3, [sp, #24]
   10c08:	ldr	r1, [sp, #8]
   10c0a:	subs	r5, r3, r1
   10c0c:	cmp	r5, #0
   10c0e:	ble.w	1072e <_svfprintf_r+0x2fe>
   10c12:	cmp	r5, #16
   10c14:	ldr	r3, [sp, #148]	; 0x94
   10c16:	ble.n	10c5c <_svfprintf_r+0x82c>
   10c18:	str	r4, [sp, #36]	; 0x24
   10c1a:	movs	r6, #16
   10c1c:	vmov	r4, s22
   10c20:	b.n	10c2c <_svfprintf_r+0x7fc>
   10c22:	subs	r5, #16
   10c24:	cmp	r5, #16
   10c26:	add.w	sl, sl, #8
   10c2a:	ble.n	10c5a <_svfprintf_r+0x82a>
   10c2c:	adds	r3, #1
   10c2e:	ldr	r1, [pc, #560]	; (10e60 <_svfprintf_r+0xa30>)
   10c30:	adds	r2, #16
   10c32:	cmp	r3, #7
   10c34:	strd	r1, r6, [sl]
   10c38:	strd	r3, r2, [sp, #148]	; 0x94
   10c3c:	ble.n	10c22 <_svfprintf_r+0x7f2>
   10c3e:	add	r2, sp, #144	; 0x90
   10c40:	mov	r1, r4
   10c42:	mov	r0, fp
   10c44:	add.w	sl, sp, #156	; 0x9c
   10c48:	bl	15148 <__ssprint_r>
   10c4c:	cmp	r0, #0
   10c4e:	bne.n	10cfa <_svfprintf_r+0x8ca>
   10c50:	subs	r5, #16
   10c52:	cmp	r5, #16
   10c54:	ldrd	r3, r2, [sp, #148]	; 0x94
   10c58:	bgt.n	10c2c <_svfprintf_r+0x7fc>
   10c5a:	ldr	r4, [sp, #36]	; 0x24
   10c5c:	ldr	r1, [pc, #512]	; (10e60 <_svfprintf_r+0xa30>)
   10c5e:	str.w	r5, [sl, #4]
   10c62:	adds	r3, #1
   10c64:	add	r2, r5
   10c66:	cmp	r3, #7
   10c68:	strd	r3, r2, [sp, #148]	; 0x94
   10c6c:	str.w	r1, [sl]
   10c70:	bgt.w	116c0 <_svfprintf_r+0x1290>
   10c74:	ldr	r3, [sp, #12]
   10c76:	ldr	r1, [sp, #20]
   10c78:	subs	r5, r3, r1
   10c7a:	cmp	r5, #0
   10c7c:	add.w	sl, sl, #8
   10c80:	ble.w	1073a <_svfprintf_r+0x30a>
   10c84:	cmp	r5, #16
   10c86:	ldr	r3, [sp, #148]	; 0x94
   10c88:	ble.n	10cca <_svfprintf_r+0x89a>
   10c8a:	mov	r1, sl
   10c8c:	movs	r6, #16
   10c8e:	vmov	sl, s22
   10c92:	b.n	10c9e <_svfprintf_r+0x86e>
   10c94:	subs	r5, #16
   10c96:	cmp	r5, #16
   10c98:	add.w	r1, r1, #8
   10c9c:	ble.n	10cc8 <_svfprintf_r+0x898>
   10c9e:	adds	r3, #1
   10ca0:	ldr	r0, [pc, #444]	; (10e60 <_svfprintf_r+0xa30>)
   10ca2:	adds	r2, #16
   10ca4:	cmp	r3, #7
   10ca6:	strd	r0, r6, [r1]
   10caa:	strd	r3, r2, [sp, #148]	; 0x94
   10cae:	ble.n	10c94 <_svfprintf_r+0x864>
   10cb0:	add	r2, sp, #144	; 0x90
   10cb2:	mov	r1, sl
   10cb4:	mov	r0, fp
   10cb6:	bl	15148 <__ssprint_r>
   10cba:	cbnz	r0, 10cfa <_svfprintf_r+0x8ca>
   10cbc:	subs	r5, #16
   10cbe:	cmp	r5, #16
   10cc0:	ldrd	r3, r2, [sp, #148]	; 0x94
   10cc4:	add	r1, sp, #156	; 0x9c
   10cc6:	bgt.n	10c9e <_svfprintf_r+0x86e>
   10cc8:	mov	sl, r1
   10cca:	adds	r3, #1
   10ccc:	ldr	r1, [pc, #400]	; (10e60 <_svfprintf_r+0xa30>)
   10cce:	str.w	r5, [sl, #4]
   10cd2:	add	r2, r5
   10cd4:	cmp	r3, #7
   10cd6:	strd	r3, r2, [sp, #148]	; 0x94
   10cda:	str.w	r1, [sl]
   10cde:	bgt.w	11096 <_svfprintf_r+0xc66>
   10ce2:	add.w	sl, sl, #8
   10ce6:	b.n	1073a <_svfprintf_r+0x30a>
   10ce8:	vmov	r1, s22
   10cec:	add	r2, sp, #144	; 0x90
   10cee:	mov	r0, fp
   10cf0:	bl	15148 <__ssprint_r>
   10cf4:	cmp	r0, #0
   10cf6:	beq.w	10788 <_svfprintf_r+0x358>
   10cfa:	ldr	r3, [sp, #28]
   10cfc:	cmp	r3, #0
   10cfe:	beq.w	10646 <_svfprintf_r+0x216>
   10d02:	ldr	r1, [sp, #28]
   10d04:	mov	r0, fp
   10d06:	bl	eea4 <_free_r>
   10d0a:	b.n	10646 <_svfprintf_r+0x216>
   10d0c:	ldr	r3, [sp, #56]	; 0x38
   10d0e:	cmp	r3, #1
   10d10:	ble.w	11008 <_svfprintf_r+0xbd8>
   10d14:	ldr	r3, [sp, #148]	; 0x94
   10d16:	str.w	r4, [sl]
   10d1a:	adds	r3, #1
   10d1c:	adds	r2, #1
   10d1e:	movs	r1, #1
   10d20:	cmp	r3, #7
   10d22:	str	r2, [sp, #152]	; 0x98
   10d24:	str	r3, [sp, #148]	; 0x94
   10d26:	str.w	r1, [sl, #4]
   10d2a:	bgt.w	1111e <_svfprintf_r+0xcee>
   10d2e:	add.w	sl, sl, #8
   10d32:	ldr	r1, [sp, #64]	; 0x40
   10d34:	ldr	r0, [sp, #72]	; 0x48
   10d36:	adds	r3, #1
   10d38:	add	r2, r1
   10d3a:	cmp	r3, #7
   10d3c:	strd	r0, r1, [sl]
   10d40:	strd	r3, r2, [sp, #148]	; 0x94
   10d44:	bgt.w	11102 <_svfprintf_r+0xcd2>
   10d48:	add.w	sl, sl, #8
   10d4c:	vcmp.f64	d8, #0.0
   10d50:	vmrs	APSR_nzcv, fpscr
   10d54:	beq.w	11046 <_svfprintf_r+0xc16>
   10d58:	ldr	r1, [sp, #56]	; 0x38
   10d5a:	adds	r3, #1
   10d5c:	subs	r1, #1
   10d5e:	adds	r4, #1
   10d60:	add	r2, r1
   10d62:	cmp	r3, #7
   10d64:	str.w	r4, [sl]
   10d68:	str	r3, [sp, #148]	; 0x94
   10d6a:	str.w	r1, [sl, #4]
   10d6e:	str	r2, [sp, #152]	; 0x98
   10d70:	bgt.w	1102a <_svfprintf_r+0xbfa>
   10d74:	add.w	sl, sl, #8
   10d78:	ldr	r1, [sp, #80]	; 0x50
   10d7a:	str.w	r1, [sl, #4]
   10d7e:	adds	r3, #1
   10d80:	add	r2, r1
   10d82:	cmp	r3, #7
   10d84:	add	r1, sp, #120	; 0x78
   10d86:	strd	r3, r2, [sp, #148]	; 0x94
   10d8a:	str.w	r1, [sl]
   10d8e:	ble.w	1075c <_svfprintf_r+0x32c>
   10d92:	vmov	r1, s22
   10d96:	add	r2, sp, #144	; 0x90
   10d98:	mov	r0, fp
   10d9a:	bl	15148 <__ssprint_r>
   10d9e:	cmp	r0, #0
   10da0:	bne.n	10cfa <_svfprintf_r+0x8ca>
   10da2:	ldr	r2, [sp, #152]	; 0x98
   10da4:	add.w	sl, sp, #156	; 0x9c
   10da8:	b.n	10760 <_svfprintf_r+0x330>
   10daa:	cmp	r5, #16
   10dac:	ldrd	r1, r2, [sp, #148]	; 0x94
   10db0:	ldr	r6, [pc, #176]	; (10e64 <_svfprintf_r+0xa34>)
   10db2:	ble.n	10dfe <_svfprintf_r+0x9ce>
   10db4:	str	r4, [sp, #92]	; 0x5c
   10db6:	movs	r3, #16
   10db8:	vmov	r4, s22
   10dbc:	mov	r0, r1
   10dbe:	b.n	10dca <_svfprintf_r+0x99a>
   10dc0:	subs	r5, #16
   10dc2:	cmp	r5, #16
   10dc4:	add.w	sl, sl, #8
   10dc8:	ble.n	10dfa <_svfprintf_r+0x9ca>
   10dca:	adds	r0, #1
   10dcc:	adds	r2, #16
   10dce:	cmp	r0, #7
   10dd0:	strd	r6, r3, [sl]
   10dd4:	strd	r0, r2, [sp, #148]	; 0x94
   10dd8:	ble.n	10dc0 <_svfprintf_r+0x990>
   10dda:	add	r2, sp, #144	; 0x90
   10ddc:	mov	r1, r4
   10dde:	mov	r0, fp
   10de0:	add.w	sl, sp, #156	; 0x9c
   10de4:	bl	15148 <__ssprint_r>
   10de8:	cmp	r0, #0
   10dea:	bne.n	10cfa <_svfprintf_r+0x8ca>
   10dec:	subs	r5, #16
   10dee:	cmp	r5, #16
   10df0:	ldrd	r0, r2, [sp, #148]	; 0x94
   10df4:	mov.w	r3, #16
   10df8:	bgt.n	10dca <_svfprintf_r+0x99a>
   10dfa:	ldr	r4, [sp, #92]	; 0x5c
   10dfc:	mov	r1, r0
   10dfe:	adds	r1, #1
   10e00:	add	r2, r5
   10e02:	cmp	r1, #7
   10e04:	strd	r1, r2, [sp, #148]	; 0x94
   10e08:	str.w	r6, [sl]
   10e0c:	str.w	r5, [sl, #4]
   10e10:	bgt.w	1158e <_svfprintf_r+0x115e>
   10e14:	ldrb.w	r1, [sp, #103]	; 0x67
   10e18:	add.w	sl, sl, #8
   10e1c:	b.n	106da <_svfprintf_r+0x2aa>
   10e1e:	str.w	r8, [sp, #8]
   10e22:	cmp	r2, #10
   10e24:	sbcs.w	r3, r1, #0
   10e28:	bcs.w	114b6 <_svfprintf_r+0x1086>
   10e2c:	adds	r2, #48	; 0x30
   10e2e:	movs	r3, #1
   10e30:	ldr.w	r8, [sp, #8]
   10e34:	strb.w	r2, [sp, #319]	; 0x13f
   10e38:	str	r3, [sp, #20]
   10e3a:	addw	r4, sp, #319	; 0x13f
   10e3e:	b.n	10b12 <_svfprintf_r+0x6e2>
   10e40:	vmov	r1, s22
   10e44:	add	r2, sp, #144	; 0x90
   10e46:	mov	r0, fp
   10e48:	bl	15148 <__ssprint_r>
   10e4c:	cmp	r0, #0
   10e4e:	bne.w	10cfa <_svfprintf_r+0x8ca>
   10e52:	ldr	r2, [sp, #152]	; 0x98
   10e54:	add.w	sl, sp, #156	; 0x9c
   10e58:	b.n	10700 <_svfprintf_r+0x2d0>
   10e5a:	nop
   10e5c:	.word	0x200009fc
   10e60:	.word	0x2000789c
   10e64:	.word	0x20002478
   10e68:	vmov	r1, s22
   10e6c:	add	r2, sp, #144	; 0x90
   10e6e:	mov	r0, fp
   10e70:	bl	15148 <__ssprint_r>
   10e74:	cmp	r0, #0
   10e76:	bne.w	10cfa <_svfprintf_r+0x8ca>
   10e7a:	ldr	r2, [sp, #152]	; 0x98
   10e7c:	add.w	sl, sp, #156	; 0x9c
   10e80:	b.n	10726 <_svfprintf_r+0x2f6>
   10e82:	cmp	r4, #16
   10e84:	ldr	r3, [sp, #148]	; 0x94
   10e86:	ldr	r6, [pc, #760]	; (11180 <_svfprintf_r+0xd50>)
   10e88:	ble.n	10eca <_svfprintf_r+0xa9a>
   10e8a:	vmov	r8, s22
   10e8e:	movs	r5, #16
   10e90:	b.n	10e9c <_svfprintf_r+0xa6c>
   10e92:	subs	r4, #16
   10e94:	cmp	r4, #16
   10e96:	add.w	sl, sl, #8
   10e9a:	ble.n	10eca <_svfprintf_r+0xa9a>
   10e9c:	adds	r3, #1
   10e9e:	adds	r2, #16
   10ea0:	cmp	r3, #7
   10ea2:	strd	r6, r5, [sl]
   10ea6:	strd	r3, r2, [sp, #148]	; 0x94
   10eaa:	ble.n	10e92 <_svfprintf_r+0xa62>
   10eac:	add	r2, sp, #144	; 0x90
   10eae:	mov	r1, r8
   10eb0:	mov	r0, fp
   10eb2:	add.w	sl, sp, #156	; 0x9c
   10eb6:	bl	15148 <__ssprint_r>
   10eba:	cmp	r0, #0
   10ebc:	bne.w	10cfa <_svfprintf_r+0x8ca>
   10ec0:	subs	r4, #16
   10ec2:	cmp	r4, #16
   10ec4:	ldrd	r3, r2, [sp, #148]	; 0x94
   10ec8:	bgt.n	10e9c <_svfprintf_r+0xa6c>
   10eca:	adds	r3, #1
   10ecc:	add	r2, r4
   10ece:	cmp	r3, #7
   10ed0:	strd	r6, r4, [sl]
   10ed4:	strd	r3, r2, [sp, #148]	; 0x94
   10ed8:	ble.w	10772 <_svfprintf_r+0x342>
   10edc:	vmov	r1, s22
   10ee0:	add	r2, sp, #144	; 0x90
   10ee2:	mov	r0, fp
   10ee4:	bl	15148 <__ssprint_r>
   10ee8:	cmp	r0, #0
   10eea:	bne.w	10cfa <_svfprintf_r+0x8ca>
   10eee:	ldr	r2, [sp, #152]	; 0x98
   10ef0:	b.n	10772 <_svfprintf_r+0x342>
   10ef2:	ldr	r1, [sp, #108]	; 0x6c
   10ef4:	cmp	r1, #0
   10ef6:	ble.w	115ae <_svfprintf_r+0x117e>
   10efa:	ldr	r6, [sp, #48]	; 0x30
   10efc:	ldr	r3, [sp, #56]	; 0x38
   10efe:	cmp	r6, r3
   10f00:	it	ge
   10f02:	movge	r6, r3
   10f04:	cmp	r6, #0
   10f06:	ble.n	10f20 <_svfprintf_r+0xaf0>
   10f08:	ldr	r3, [sp, #148]	; 0x94
   10f0a:	adds	r3, #1
   10f0c:	add	r2, r6
   10f0e:	cmp	r3, #7
   10f10:	strd	r4, r6, [sl]
   10f14:	str	r2, [sp, #152]	; 0x98
   10f16:	str	r3, [sp, #148]	; 0x94
   10f18:	bgt.w	11c2e <_svfprintf_r+0x17fe>
   10f1c:	add.w	sl, sl, #8
   10f20:	ldr	r5, [sp, #48]	; 0x30
   10f22:	cmp	r6, #0
   10f24:	it	ge
   10f26:	subge	r5, r5, r6
   10f28:	cmp	r5, #0
   10f2a:	bgt.w	11334 <_svfprintf_r+0xf04>
   10f2e:	ldr	r3, [sp, #48]	; 0x30
   10f30:	tst.w	r8, #1024	; 0x400
   10f34:	add	r3, r4
   10f36:	str	r3, [sp, #20]
   10f38:	bne.w	1137a <_svfprintf_r+0xf4a>
   10f3c:	ldr	r3, [sp, #108]	; 0x6c
   10f3e:	ldr	r1, [sp, #56]	; 0x38
   10f40:	cmp	r3, r1
   10f42:	blt.n	10f4c <_svfprintf_r+0xb1c>
   10f44:	tst.w	r8, #1
   10f48:	beq.w	118ea <_svfprintf_r+0x14ba>
   10f4c:	ldr	r1, [sp, #64]	; 0x40
   10f4e:	ldr	r0, [sp, #72]	; 0x48
   10f50:	add	r2, r1
   10f52:	strd	r0, r1, [sl]
   10f56:	ldr	r1, [sp, #148]	; 0x94
   10f58:	str	r2, [sp, #152]	; 0x98
   10f5a:	adds	r1, #1
   10f5c:	cmp	r1, #7
   10f5e:	str	r1, [sp, #148]	; 0x94
   10f60:	bgt.w	11cae <_svfprintf_r+0x187e>
   10f64:	add.w	sl, sl, #8
   10f68:	ldr	r1, [sp, #56]	; 0x38
   10f6a:	adds	r5, r4, r1
   10f6c:	subs	r4, r1, r3
   10f6e:	ldr	r3, [sp, #20]
   10f70:	subs	r5, r5, r3
   10f72:	cmp	r5, r4
   10f74:	it	ge
   10f76:	movge	r5, r4
   10f78:	cmp	r5, #0
   10f7a:	ble.n	10f98 <_svfprintf_r+0xb68>
   10f7c:	str.w	r3, [sl]
   10f80:	ldr	r3, [sp, #148]	; 0x94
   10f82:	str.w	r5, [sl, #4]
   10f86:	adds	r3, #1
   10f88:	add	r2, r5
   10f8a:	cmp	r3, #7
   10f8c:	str	r2, [sp, #152]	; 0x98
   10f8e:	str	r3, [sp, #148]	; 0x94
   10f90:	bgt.w	11d0a <_svfprintf_r+0x18da>
   10f94:	add.w	sl, sl, #8
   10f98:	cmp	r5, #0
   10f9a:	it	ge
   10f9c:	subge	r4, r4, r5
   10f9e:	cmp	r4, #0
   10fa0:	ble.w	10760 <_svfprintf_r+0x330>
   10fa4:	cmp	r4, #16
   10fa6:	ldr	r3, [sp, #148]	; 0x94
   10fa8:	ble.w	116a4 <_svfprintf_r+0x1274>
   10fac:	vmov	r6, s22
   10fb0:	movs	r5, #16
   10fb2:	b.n	10fc0 <_svfprintf_r+0xb90>
   10fb4:	add.w	sl, sl, #8
   10fb8:	subs	r4, #16
   10fba:	cmp	r4, #16
   10fbc:	ble.w	116a4 <_svfprintf_r+0x1274>
   10fc0:	adds	r3, #1
   10fc2:	ldr	r1, [pc, #448]	; (11184 <_svfprintf_r+0xd54>)
   10fc4:	adds	r2, #16
   10fc6:	cmp	r3, #7
   10fc8:	strd	r1, r5, [sl]
   10fcc:	strd	r3, r2, [sp, #148]	; 0x94
   10fd0:	ble.n	10fb4 <_svfprintf_r+0xb84>
   10fd2:	add	r2, sp, #144	; 0x90
   10fd4:	mov	r1, r6
   10fd6:	mov	r0, fp
   10fd8:	bl	15148 <__ssprint_r>
   10fdc:	cmp	r0, #0
   10fde:	bne.w	10cfa <_svfprintf_r+0x8ca>
   10fe2:	ldrd	r3, r2, [sp, #148]	; 0x94
   10fe6:	add.w	sl, sp, #156	; 0x9c
   10fea:	b.n	10fb8 <_svfprintf_r+0xb88>
   10fec:	cmp	r3, #48	; 0x30
   10fee:	beq.w	10b08 <_svfprintf_r+0x6d8>
   10ff2:	movs	r3, #48	; 0x30
   10ff4:	subs	r0, #2
   10ff6:	strb.w	r3, [r4, #-1]
   10ffa:	add	r3, sp, #320	; 0x140
   10ffc:	subs	r3, r3, r0
   10ffe:	ldr.w	r8, [sp, #8]
   11002:	str	r3, [sp, #20]
   11004:	mov	r4, r0
   11006:	b.n	10b12 <_svfprintf_r+0x6e2>
   11008:	tst.w	r8, #1
   1100c:	bne.w	10d14 <_svfprintf_r+0x8e4>
   11010:	ldr	r3, [sp, #148]	; 0x94
   11012:	str.w	r4, [sl]
   11016:	adds	r3, #1
   11018:	adds	r2, #1
   1101a:	movs	r1, #1
   1101c:	cmp	r3, #7
   1101e:	str	r2, [sp, #152]	; 0x98
   11020:	str	r3, [sp, #148]	; 0x94
   11022:	str.w	r1, [sl, #4]
   11026:	ble.w	10d74 <_svfprintf_r+0x944>
   1102a:	vmov	r1, s22
   1102e:	add	r2, sp, #144	; 0x90
   11030:	mov	r0, fp
   11032:	bl	15148 <__ssprint_r>
   11036:	cmp	r0, #0
   11038:	bne.w	10cfa <_svfprintf_r+0x8ca>
   1103c:	ldrd	r3, r2, [sp, #148]	; 0x94
   11040:	add.w	sl, sp, #156	; 0x9c
   11044:	b.n	10d78 <_svfprintf_r+0x948>
   11046:	ldr	r1, [sp, #56]	; 0x38
   11048:	subs	r4, r1, #1
   1104a:	cmp	r4, #0
   1104c:	ble.w	10d78 <_svfprintf_r+0x948>
   11050:	cmp	r4, #16
   11052:	ble.w	11718 <_svfprintf_r+0x12e8>
   11056:	vmov	r6, s22
   1105a:	movs	r5, #16
   1105c:	b.n	1106a <_svfprintf_r+0xc3a>
   1105e:	add.w	sl, sl, #8
   11062:	subs	r4, #16
   11064:	cmp	r4, #16
   11066:	ble.w	11718 <_svfprintf_r+0x12e8>
   1106a:	adds	r3, #1
   1106c:	ldr	r1, [pc, #276]	; (11184 <_svfprintf_r+0xd54>)
   1106e:	adds	r2, #16
   11070:	cmp	r3, #7
   11072:	strd	r1, r5, [sl]
   11076:	strd	r3, r2, [sp, #148]	; 0x94
   1107a:	ble.n	1105e <_svfprintf_r+0xc2e>
   1107c:	add	r2, sp, #144	; 0x90
   1107e:	mov	r1, r6
   11080:	mov	r0, fp
   11082:	bl	15148 <__ssprint_r>
   11086:	cmp	r0, #0
   11088:	bne.w	10cfa <_svfprintf_r+0x8ca>
   1108c:	ldrd	r3, r2, [sp, #148]	; 0x94
   11090:	add.w	sl, sp, #156	; 0x9c
   11094:	b.n	11062 <_svfprintf_r+0xc32>
   11096:	vmov	r1, s22
   1109a:	add	r2, sp, #144	; 0x90
   1109c:	mov	r0, fp
   1109e:	bl	15148 <__ssprint_r>
   110a2:	cmp	r0, #0
   110a4:	bne.w	10cfa <_svfprintf_r+0x8ca>
   110a8:	ldr	r2, [sp, #152]	; 0x98
   110aa:	add.w	sl, sp, #156	; 0x9c
   110ae:	b.w	1073a <_svfprintf_r+0x30a>
   110b2:	ldr	r3, [sp, #8]
   110b4:	ands.w	r3, r3, #16
   110b8:	bne.w	1123e <_svfprintf_r+0xe0e>
   110bc:	ldr	r2, [sp, #8]
   110be:	ands.w	r2, r2, #64	; 0x40
   110c2:	beq.w	117ba <_svfprintf_r+0x138a>
   110c6:	ldr	r0, [sp, #32]
   110c8:	ldr.w	r2, [r0], #4
   110cc:	str	r0, [sp, #32]
   110ce:	mov	r1, r3
   110d0:	uxth	r2, r2
   110d2:	movs	r3, #1
   110d4:	b.n	1097a <_svfprintf_r+0x54a>
   110d6:	ands.w	r3, r8, #16
   110da:	bne.n	11188 <_svfprintf_r+0xd58>
   110dc:	ands.w	r2, r8, #64	; 0x40
   110e0:	beq.w	1179e <_svfprintf_r+0x136e>
   110e4:	ldr	r0, [sp, #32]
   110e6:	ldr.w	r2, [r0], #4
   110ea:	str	r0, [sp, #32]
   110ec:	mov	r1, r3
   110ee:	uxth	r2, r2
   110f0:	b.n	10a44 <_svfprintf_r+0x614>
   110f2:	negs	r2, r2
   110f4:	sbc.w	r1, r1, r1, lsl #1
   110f8:	str.w	r8, [sp, #8]
   110fc:	movs	r0, #45	; 0x2d
   110fe:	movs	r3, #1
   11100:	b.n	1097c <_svfprintf_r+0x54c>
   11102:	vmov	r1, s22
   11106:	add	r2, sp, #144	; 0x90
   11108:	mov	r0, fp
   1110a:	bl	15148 <__ssprint_r>
   1110e:	cmp	r0, #0
   11110:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11114:	ldrd	r3, r2, [sp, #148]	; 0x94
   11118:	add.w	sl, sp, #156	; 0x9c
   1111c:	b.n	10d4c <_svfprintf_r+0x91c>
   1111e:	vmov	r1, s22
   11122:	add	r2, sp, #144	; 0x90
   11124:	mov	r0, fp
   11126:	bl	15148 <__ssprint_r>
   1112a:	cmp	r0, #0
   1112c:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11130:	ldrd	r3, r2, [sp, #148]	; 0x94
   11134:	add.w	sl, sp, #156	; 0x9c
   11138:	b.n	10d32 <_svfprintf_r+0x902>
   1113a:	tst.w	r8, #1
   1113e:	beq.w	10760 <_svfprintf_r+0x330>
   11142:	b.n	10b9a <_svfprintf_r+0x76a>
   11144:	str	r3, [sp, #32]
   11146:	ldrb.w	r3, [r9]
   1114a:	b.w	104e8 <_svfprintf_r+0xb8>
   1114e:	add	r4, sp, #320	; 0x140
   11150:	b.n	10b12 <_svfprintf_r+0x6e2>
   11152:	tst.w	r8, #512	; 0x200
   11156:	bne.w	11910 <_svfprintf_r+0x14e0>
   1115a:	ldr.w	r2, [r3], #4
   1115e:	str	r3, [sp, #32]
   11160:	asrs	r1, r2, #31
   11162:	mov	r3, r1
   11164:	b.w	108d4 <_svfprintf_r+0x4a4>
   11168:	ldr	r3, [sp, #32]
   1116a:	ldr	r0, [sp, #16]
   1116c:	ldr.w	r1, [r3], #4
   11170:	str	r3, [sp, #32]
   11172:	asrs	r2, r0, #31
   11174:	strd	r0, r2, [r1]
   11178:	mov	r4, r9
   1117a:	b.w	10494 <_svfprintf_r+0x64>
   1117e:	nop
   11180:	.word	0x20002478
   11184:	.word	0x2000789c
   11188:	ldr	r3, [sp, #32]
   1118a:	ldr.w	r2, [r3], #4
   1118e:	str	r3, [sp, #32]
   11190:	b.n	10a44 <_svfprintf_r+0x614>
   11192:	vcmp.f64	d8, d8
   11196:	vmrs	APSR_nzcv, fpscr
   1119a:	bvs.w	11ec6 <_svfprintf_r+0x1a96>
   1119e:	ldr	r3, [sp, #44]	; 0x2c
   111a0:	cmp	r3, #97	; 0x61
   111a2:	beq.w	11c4a <_svfprintf_r+0x181a>
   111a6:	cmp	r3, #65	; 0x41
   111a8:	beq.w	11d2c <_svfprintf_r+0x18fc>
   111ac:	ldr	r3, [sp, #12]
   111ae:	adds	r3, #1
   111b0:	ldr	r3, [sp, #44]	; 0x2c
   111b2:	bic.w	r5, r3, #32
   111b6:	beq.w	11aba <_svfprintf_r+0x168a>
   111ba:	cmp	r5, #71	; 0x47
   111bc:	bne.n	111c8 <_svfprintf_r+0xd98>
   111be:	ldr	r3, [sp, #12]
   111c0:	cmp	r3, #0
   111c2:	it	eq
   111c4:	moveq	r3, #1
   111c6:	str	r3, [sp, #12]
   111c8:	vmov	r3, s17
   111cc:	cmp	r3, #0
   111ce:	orr.w	r2, r8, #256	; 0x100
   111d2:	mov	r6, r8
   111d4:	blt.w	11e08 <_svfprintf_r+0x19d8>
   111d8:	vmov.f64	d10, d8
   111dc:	movs	r3, #0
   111de:	mov	r8, r2
   111e0:	str	r3, [sp, #36]	; 0x24
   111e2:	str	r3, [sp, #28]
   111e4:	ldr	r3, [sp, #44]	; 0x2c
   111e6:	subs	r3, #65	; 0x41
   111e8:	cmp	r3, #37	; 0x25
   111ea:	bhi.w	1191e <_svfprintf_r+0x14ee>
   111ee:	tbh	[pc, r3, lsl #1]
   111f2:	.short	0x046f
   111f4:	.word	0x03960396
   111f8:	.word	0x04680396
   111fc:	.word	0x0396046c
   11200:	.word	0x03960396
   11204:	.word	0x03960396
   11208:	.word	0x03960396
   1120c:	.word	0x03960396
   11210:	.word	0x03960396
   11214:	.word	0x03960396
   11218:	.word	0x03960396
   1121c:	.word	0x03960396
   11220:	.word	0x03960396
   11224:	.word	0x03960396
   11228:	.word	0x03960396
   1122c:	.word	0x03960396
   11230:	.word	0x03960396
   11234:	.word	0x03960396
   11238:	.word	0x04680396
   1123c:	.short	0x046c
   1123e:	ldr	r3, [sp, #32]
   11240:	ldr.w	r2, [r3], #4
   11244:	str	r3, [sp, #32]
   11246:	movs	r3, #1
   11248:	b.w	1097a <_svfprintf_r+0x54a>
   1124c:	ldr	r3, [sp, #76]	; 0x4c
   1124e:	cmp	r3, #0
   11250:	beq.w	105f2 <_svfprintf_r+0x1c2>
   11254:	ldr	r3, [sp, #76]	; 0x4c
   11256:	ldrb	r3, [r3, #0]
   11258:	cmp	r3, #0
   1125a:	beq.w	105f2 <_svfprintf_r+0x1c2>
   1125e:	ldrb.w	r3, [r9]
   11262:	orr.w	r8, r8, #1024	; 0x400
   11266:	b.w	104e8 <_svfprintf_r+0xb8>
   1126a:	str	r3, [sp, #44]	; 0x2c
   1126c:	str.w	r8, [sp, #8]
   11270:	b.w	10a56 <_svfprintf_r+0x626>
   11274:	str	r3, [sp, #44]	; 0x2c
   11276:	ldr	r3, [pc, #616]	; (114e0 <_svfprintf_r+0x10b0>)
   11278:	str	r3, [sp, #68]	; 0x44
   1127a:	ands.w	r1, r8, #32
   1127e:	beq.w	1148c <_svfprintf_r+0x105c>
   11282:	ldr	r3, [sp, #32]
   11284:	adds	r3, #7
   11286:	bic.w	r3, r3, #7
   1128a:	ldr	r1, [r3, #4]
   1128c:	ldr.w	r2, [r3], #8
   11290:	str	r3, [sp, #32]
   11292:	tst.w	r8, #1
   11296:	beq.n	112ae <_svfprintf_r+0xe7e>
   11298:	orrs.w	r3, r2, r1
   1129c:	beq.n	112ae <_svfprintf_r+0xe7e>
   1129e:	ldr	r3, [sp, #44]	; 0x2c
   112a0:	strb.w	r3, [sp, #105]	; 0x69
   112a4:	movs	r3, #48	; 0x30
   112a6:	orr.w	r8, r8, #2
   112aa:	strb.w	r3, [sp, #104]	; 0x68
   112ae:	bic.w	r3, r8, #1024	; 0x400
   112b2:	str	r3, [sp, #8]
   112b4:	movs	r3, #2
   112b6:	b.w	1097a <_svfprintf_r+0x54a>
   112ba:	str	r3, [sp, #44]	; 0x2c
   112bc:	b.w	10a2c <_svfprintf_r+0x5fc>
   112c0:	str	r3, [sp, #44]	; 0x2c
   112c2:	ldr	r3, [pc, #544]	; (114e4 <_svfprintf_r+0x10b4>)
   112c4:	str	r3, [sp, #68]	; 0x44
   112c6:	b.n	1127a <_svfprintf_r+0xe4a>
   112c8:	ldr	r3, [sp, #32]
   112ca:	movs	r1, #1
   112cc:	ldr.w	r2, [r3], #4
   112d0:	str	r1, [sp, #8]
   112d2:	strb.w	r2, [sp, #220]	; 0xdc
   112d6:	str	r3, [sp, #32]
   112d8:	str	r1, [sp, #20]
   112da:	add	r4, sp, #220	; 0xdc
   112dc:	b.w	1083e <_svfprintf_r+0x40e>
   112e0:	vmov	r1, s22
   112e4:	add	r2, sp, #144	; 0x90
   112e6:	mov	r0, fp
   112e8:	bl	15148 <__ssprint_r>
   112ec:	cmp	r0, #0
   112ee:	bne.w	10cfa <_svfprintf_r+0x8ca>
   112f2:	ldr	r2, [sp, #152]	; 0x98
   112f4:	add.w	sl, sp, #156	; 0x9c
   112f8:	b.n	10bb6 <_svfprintf_r+0x786>
   112fa:	ldr	r3, [sp, #12]
   112fc:	str	r4, [sp, #28]
   112fe:	cmp	r3, #6
   11300:	mov	r2, r4
   11302:	it	cs
   11304:	movcs	r3, #6
   11306:	str	r4, [sp, #12]
   11308:	mov	r1, r4
   1130a:	strd	r2, r2, [sp, #48]	; 0x30
   1130e:	ldr	r4, [pc, #472]	; (114e8 <_svfprintf_r+0x10b8>)
   11310:	str	r3, [sp, #8]
   11312:	str	r3, [sp, #20]
   11314:	str	r2, [sp, #60]	; 0x3c
   11316:	b.w	107f2 <_svfprintf_r+0x3c2>
   1131a:	movs	r1, #64	; 0x40
   1131c:	mov	r0, fp
   1131e:	bl	c680 <_malloc_r>
   11322:	str	r0, [r4, #0]
   11324:	str	r0, [r4, #16]
   11326:	cmp	r0, #0
   11328:	beq.w	11f4a <_svfprintf_r+0x1b1a>
   1132c:	movs	r3, #64	; 0x40
   1132e:	str	r3, [r4, #20]
   11330:	b.w	10470 <_svfprintf_r+0x40>
   11334:	cmp	r5, #16
   11336:	ldr	r3, [sp, #148]	; 0x94
   11338:	ble.w	117f6 <_svfprintf_r+0x13c6>
   1133c:	mov	r1, sl
   1133e:	movs	r6, #16
   11340:	vmov	sl, s22
   11344:	b.n	11350 <_svfprintf_r+0xf20>
   11346:	adds	r1, #8
   11348:	subs	r5, #16
   1134a:	cmp	r5, #16
   1134c:	ble.w	117f4 <_svfprintf_r+0x13c4>
   11350:	adds	r3, #1
   11352:	ldr	r0, [pc, #408]	; (114ec <_svfprintf_r+0x10bc>)
   11354:	adds	r2, #16
   11356:	cmp	r3, #7
   11358:	strd	r0, r6, [r1]
   1135c:	strd	r3, r2, [sp, #148]	; 0x94
   11360:	ble.n	11346 <_svfprintf_r+0xf16>
   11362:	add	r2, sp, #144	; 0x90
   11364:	mov	r1, sl
   11366:	mov	r0, fp
   11368:	bl	15148 <__ssprint_r>
   1136c:	cmp	r0, #0
   1136e:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11372:	ldrd	r3, r2, [sp, #148]	; 0x94
   11376:	add	r1, sp, #156	; 0x9c
   11378:	b.n	11348 <_svfprintf_r+0xf18>
   1137a:	ldr	r3, [sp, #56]	; 0x38
   1137c:	str.w	r9, [sp, #36]	; 0x24
   11380:	adds	r3, r4, r3
   11382:	str	r3, [sp, #12]
   11384:	ldr	r3, [sp, #52]	; 0x34
   11386:	str.w	r8, [sp, #40]	; 0x28
   1138a:	ldr	r6, [sp, #76]	; 0x4c
   1138c:	ldr	r5, [sp, #20]
   1138e:	ldr.w	r9, [sp, #88]	; 0x58
   11392:	ldr.w	r8, [sp, #60]	; 0x3c
   11396:	str	r4, [sp, #44]	; 0x2c
   11398:	vmov	r1, s22
   1139c:	mov	r0, sl
   1139e:	cmp	r3, #0
   113a0:	beq.n	1140c <_svfprintf_r+0xfdc>
   113a2:	cmp.w	r8, #0
   113a6:	bne.n	11414 <_svfprintf_r+0xfe4>
   113a8:	ldr	r3, [sp, #52]	; 0x34
   113aa:	subs	r3, #1
   113ac:	subs	r6, #1
   113ae:	str	r3, [sp, #52]	; 0x34
   113b0:	ldr	r3, [sp, #84]	; 0x54
   113b2:	strd	r3, r9, [r0]
   113b6:	ldr	r3, [sp, #148]	; 0x94
   113b8:	adds	r3, #1
   113ba:	add	r2, r9
   113bc:	cmp	r3, #7
   113be:	str	r2, [sp, #152]	; 0x98
   113c0:	str	r3, [sp, #148]	; 0x94
   113c2:	bgt.n	1149e <_svfprintf_r+0x106e>
   113c4:	adds	r0, #8
   113c6:	ldr	r3, [sp, #12]
   113c8:	ldrb.w	ip, [r6]
   113cc:	subs	r3, r3, r5
   113ce:	cmp	r3, ip
   113d0:	it	ge
   113d2:	movge	r3, ip
   113d4:	cmp	r3, #0
   113d6:	mov	sl, r3
   113d8:	ble.n	113f4 <_svfprintf_r+0xfc4>
   113da:	ldr	r4, [sp, #148]	; 0x94
   113dc:	adds	r4, #1
   113de:	add	r2, r3
   113e0:	cmp	r4, #7
   113e2:	strd	r5, r3, [r0]
   113e6:	str	r2, [sp, #152]	; 0x98
   113e8:	str	r4, [sp, #148]	; 0x94
   113ea:	bgt.w	116dc <_svfprintf_r+0x12ac>
   113ee:	ldrb.w	ip, [r6]
   113f2:	adds	r0, #8
   113f4:	cmp.w	sl, #0
   113f8:	ite	ge
   113fa:	subge.w	r4, ip, sl
   113fe:	movlt	r4, ip
   11400:	cmp	r4, #0
   11402:	bgt.n	1141a <_svfprintf_r+0xfea>
   11404:	add	r5, ip
   11406:	ldr	r3, [sp, #52]	; 0x34
   11408:	cmp	r3, #0
   1140a:	bne.n	113a2 <_svfprintf_r+0xf72>
   1140c:	cmp.w	r8, #0
   11410:	beq.w	11b6c <_svfprintf_r+0x173c>
   11414:	add.w	r8, r8, #4294967295
   11418:	b.n	113b0 <_svfprintf_r+0xf80>
   1141a:	cmp	r4, #16
   1141c:	ldr.w	ip, [sp, #148]	; 0x94
   11420:	ble.n	1146c <_svfprintf_r+0x103c>
   11422:	str	r5, [sp, #20]
   11424:	mov.w	sl, #16
   11428:	mov	r3, ip
   1142a:	mov	r5, r1
   1142c:	b.n	11438 <_svfprintf_r+0x1008>
   1142e:	subs	r4, #16
   11430:	cmp	r4, #16
   11432:	add.w	r0, r0, #8
   11436:	ble.n	11466 <_svfprintf_r+0x1036>
   11438:	adds	r3, #1
   1143a:	ldr	r1, [pc, #176]	; (114ec <_svfprintf_r+0x10bc>)
   1143c:	adds	r2, #16
   1143e:	cmp	r3, #7
   11440:	strd	r1, sl, [r0]
   11444:	strd	r3, r2, [sp, #148]	; 0x94
   11448:	ble.n	1142e <_svfprintf_r+0xffe>
   1144a:	add	r2, sp, #144	; 0x90
   1144c:	mov	r1, r5
   1144e:	mov	r0, fp
   11450:	bl	15148 <__ssprint_r>
   11454:	cmp	r0, #0
   11456:	bne.w	10cfa <_svfprintf_r+0x8ca>
   1145a:	subs	r4, #16
   1145c:	cmp	r4, #16
   1145e:	ldrd	r3, r2, [sp, #148]	; 0x94
   11462:	add	r0, sp, #156	; 0x9c
   11464:	bgt.n	11438 <_svfprintf_r+0x1008>
   11466:	mov	r1, r5
   11468:	ldr	r5, [sp, #20]
   1146a:	mov	ip, r3
   1146c:	add.w	r3, ip, #1
   11470:	add	r2, r4
   11472:	str	r4, [r0, #4]
   11474:	cmp	r3, #7
   11476:	ldr	r4, [pc, #116]	; (114ec <_svfprintf_r+0x10bc>)
   11478:	str	r4, [r0, #0]
   1147a:	strd	r3, r2, [sp, #148]	; 0x94
   1147e:	bgt.w	11c0e <_svfprintf_r+0x17de>
   11482:	ldrb.w	ip, [r6]
   11486:	adds	r0, #8
   11488:	add	r5, ip
   1148a:	b.n	11406 <_svfprintf_r+0xfd6>
   1148c:	ands.w	r3, r8, #16
   11490:	beq.w	11618 <_svfprintf_r+0x11e8>
   11494:	ldr	r3, [sp, #32]
   11496:	ldr.w	r2, [r3], #4
   1149a:	str	r3, [sp, #32]
   1149c:	b.n	11292 <_svfprintf_r+0xe62>
   1149e:	add	r2, sp, #144	; 0x90
   114a0:	mov	r0, fp
   114a2:	str	r1, [sp, #20]
   114a4:	bl	15148 <__ssprint_r>
   114a8:	cmp	r0, #0
   114aa:	bne.w	10cfa <_svfprintf_r+0x8ca>
   114ae:	ldr	r2, [sp, #152]	; 0x98
   114b0:	ldr	r1, [sp, #20]
   114b2:	add	r0, sp, #156	; 0x9c
   114b4:	b.n	113c6 <_svfprintf_r+0xf96>
   114b6:	ldr	r0, [sp, #8]
   114b8:	str.w	sl, [sp, #28]
   114bc:	add	r4, sp, #320	; 0x140
   114be:	and.w	r0, r0, #1024	; 0x400
   114c2:	movs	r5, #0
   114c4:	vmov	s20, fp
   114c8:	ldr	r3, [pc, #36]	; (114f0 <_svfprintf_r+0x10c0>)
   114ca:	ldr.w	sl, [sp, #76]	; 0x4c
   114ce:	str.w	r9, [sp, #20]
   114d2:	mov	fp, r4
   114d4:	mov.w	r8, #5
   114d8:	mov	ip, r5
   114da:	mov	r4, r0
   114dc:	b.n	11500 <_svfprintf_r+0x10d0>
   114de:	nop
   114e0:	.word	0x200009cc
   114e4:	.word	0x200009e0
   114e8:	.word	0x200009f4
   114ec:	.word	0x2000789c
   114f0:	.word	0xcccccccd
   114f4:	cmp	r2, #10
   114f6:	sbcs.w	r1, r1, #0
   114fa:	bcc.n	1156a <_svfprintf_r+0x113a>
   114fc:	mov	r2, r9
   114fe:	mov	r1, r6
   11500:	adds	r0, r2, r1
   11502:	adc.w	r0, r0, #0
   11506:	umull	r5, r6, r3, r0
   1150a:	bic.w	r5, r6, #3
   1150e:	add.w	r5, r5, r6, lsr #2
   11512:	subs	r0, r0, r5
   11514:	subs	r5, r2, r0
   11516:	mov.w	r6, #3435973836	; 0xcccccccc
   1151a:	sbc.w	lr, r1, #0
   1151e:	mul.w	r6, r6, r5
   11522:	umull	r9, r5, r5, r3
   11526:	mla	r6, r3, lr, r6
   1152a:	and.w	lr, r9, #1
   1152e:	add	r6, r5
   11530:	umull	r5, lr, lr, r8
   11534:	adds	r5, r5, r0
   11536:	mov.w	r9, r9, lsr #1
   1153a:	adds	r5, #48	; 0x30
   1153c:	strb.w	r5, [fp, #-1]
   11540:	orr.w	r9, r9, r6, lsl #31
   11544:	add.w	ip, ip, #1
   11548:	add.w	fp, fp, #4294967295
   1154c:	lsrs	r6, r6, #1
   1154e:	cmp	r4, #0
   11550:	beq.n	114f4 <_svfprintf_r+0x10c4>
   11552:	ldrb.w	r0, [sl]
   11556:	cmp	ip, r0
   11558:	bne.n	114f4 <_svfprintf_r+0x10c4>
   1155a:	cmp.w	ip, #255	; 0xff
   1155e:	beq.n	114f4 <_svfprintf_r+0x10c4>
   11560:	cmp	r2, #10
   11562:	sbcs.w	r1, r1, #0
   11566:	bcs.w	11888 <_svfprintf_r+0x1458>
   1156a:	mov	r4, fp
   1156c:	add	r3, sp, #320	; 0x140
   1156e:	subs	r3, r3, r4
   11570:	ldr.w	r9, [sp, #20]
   11574:	str.w	sl, [sp, #76]	; 0x4c
   11578:	vmov	fp, s20
   1157c:	ldr.w	sl, [sp, #28]
   11580:	ldr.w	r8, [sp, #8]
   11584:	str.w	ip, [sp, #56]	; 0x38
   11588:	str	r3, [sp, #20]
   1158a:	b.w	10b12 <_svfprintf_r+0x6e2>
   1158e:	vmov	r1, s22
   11592:	add	r2, sp, #144	; 0x90
   11594:	mov	r0, fp
   11596:	bl	15148 <__ssprint_r>
   1159a:	cmp	r0, #0
   1159c:	bne.w	10cfa <_svfprintf_r+0x8ca>
   115a0:	ldrb.w	r1, [sp, #103]	; 0x67
   115a4:	ldr	r2, [sp, #152]	; 0x98
   115a6:	add.w	sl, sp, #156	; 0x9c
   115aa:	b.w	106da <_svfprintf_r+0x2aa>
   115ae:	ldr	r3, [sp, #148]	; 0x94
   115b0:	ldr	r0, [pc, #760]	; (118ac <_svfprintf_r+0x147c>)
   115b2:	str.w	r0, [sl]
   115b6:	adds	r3, #1
   115b8:	adds	r2, #1
   115ba:	movs	r0, #1
   115bc:	cmp	r3, #7
   115be:	str	r2, [sp, #152]	; 0x98
   115c0:	str	r3, [sp, #148]	; 0x94
   115c2:	str.w	r0, [sl, #4]
   115c6:	bgt.w	118b8 <_svfprintf_r+0x1488>
   115ca:	add.w	sl, sl, #8
   115ce:	cmp	r1, #0
   115d0:	bne.w	11732 <_svfprintf_r+0x1302>
   115d4:	ldr	r1, [sp, #56]	; 0x38
   115d6:	and.w	r3, r8, #1
   115da:	orrs	r3, r1
   115dc:	beq.w	10760 <_svfprintf_r+0x330>
   115e0:	ldr	r3, [sp, #64]	; 0x40
   115e2:	ldr	r1, [sp, #72]	; 0x48
   115e4:	add	r2, r3
   115e6:	strd	r1, r3, [sl]
   115ea:	ldr	r3, [sp, #148]	; 0x94
   115ec:	str	r2, [sp, #152]	; 0x98
   115ee:	adds	r3, #1
   115f0:	cmp	r3, #7
   115f2:	str	r3, [sp, #148]	; 0x94
   115f4:	bgt.w	11a9c <_svfprintf_r+0x166c>
   115f8:	add.w	sl, sl, #8
   115fc:	ldr	r1, [sp, #56]	; 0x38
   115fe:	str.w	r4, [sl]
   11602:	adds	r3, #1
   11604:	add	r2, r1
   11606:	cmp	r3, #7
   11608:	strd	r3, r2, [sp, #148]	; 0x94
   1160c:	str.w	r1, [sl, #4]
   11610:	ble.w	1075c <_svfprintf_r+0x32c>
   11614:	b.w	10d92 <_svfprintf_r+0x962>
   11618:	ands.w	r2, r8, #64	; 0x40
   1161c:	beq.w	117da <_svfprintf_r+0x13aa>
   11620:	ldr	r0, [sp, #32]
   11622:	ldr.w	r2, [r0], #4
   11626:	str	r0, [sp, #32]
   11628:	mov	r1, r3
   1162a:	uxth	r2, r2
   1162c:	b.n	11292 <_svfprintf_r+0xe62>
   1162e:	vmov	r1, s22
   11632:	add	r2, sp, #144	; 0x90
   11634:	mov	r0, fp
   11636:	bl	15148 <__ssprint_r>
   1163a:	cmp	r0, #0
   1163c:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11640:	ldr	r2, [sp, #152]	; 0x98
   11642:	add.w	sl, sp, #156	; 0x9c
   11646:	b.w	10b90 <_svfprintf_r+0x760>
   1164a:	add	r6, sp, #136	; 0x88
   1164c:	movs	r2, #8
   1164e:	movs	r1, #0
   11650:	mov	r0, r6
   11652:	str	r4, [sp, #116]	; 0x74
   11654:	bl	9c1c <memset>
   11658:	ldr	r3, [sp, #12]
   1165a:	adds	r2, r3, #1
   1165c:	beq.w	11816 <_svfprintf_r+0x13e6>
   11660:	movs	r5, #0
   11662:	str.w	r9, [sp, #8]
   11666:	str.w	r8, [sp, #28]
   1166a:	mov	r9, r3
   1166c:	mov	r8, r5
   1166e:	b.n	1168a <_svfprintf_r+0x125a>
   11670:	add	r1, sp, #220	; 0xdc
   11672:	mov	r0, fp
   11674:	bl	14ef4 <_wcrtomb_r>
   11678:	adds	r3, r0, #1
   1167a:	add	r0, r8
   1167c:	beq.w	11e10 <_svfprintf_r+0x19e0>
   11680:	cmp	r0, r9
   11682:	bgt.n	11696 <_svfprintf_r+0x1266>
   11684:	beq.w	11eb8 <_svfprintf_r+0x1a88>
   11688:	mov	r8, r0
   1168a:	ldr	r2, [sp, #116]	; 0x74
   1168c:	ldr	r2, [r2, r5]
   1168e:	mov	r3, r6
   11690:	adds	r5, #4
   11692:	cmp	r2, #0
   11694:	bne.n	11670 <_svfprintf_r+0x1240>
   11696:	str.w	r8, [sp, #20]
   1169a:	ldr.w	r9, [sp, #8]
   1169e:	ldr.w	r8, [sp, #28]
   116a2:	b.n	11830 <_svfprintf_r+0x1400>
   116a4:	adds	r3, #1
   116a6:	ldr	r1, [pc, #520]	; (118b0 <_svfprintf_r+0x1480>)
   116a8:	str.w	r4, [sl, #4]
   116ac:	add	r2, r4
   116ae:	cmp	r3, #7
   116b0:	str.w	r1, [sl]
   116b4:	strd	r3, r2, [sp, #148]	; 0x94
   116b8:	ble.w	1075c <_svfprintf_r+0x32c>
   116bc:	b.w	10d92 <_svfprintf_r+0x962>
   116c0:	vmov	r1, s22
   116c4:	add	r2, sp, #144	; 0x90
   116c6:	mov	r0, fp
   116c8:	bl	15148 <__ssprint_r>
   116cc:	cmp	r0, #0
   116ce:	bne.w	10cfa <_svfprintf_r+0x8ca>
   116d2:	ldr	r2, [sp, #152]	; 0x98
   116d4:	add.w	sl, sp, #156	; 0x9c
   116d8:	b.w	1072e <_svfprintf_r+0x2fe>
   116dc:	add	r2, sp, #144	; 0x90
   116de:	mov	r0, fp
   116e0:	str	r1, [sp, #20]
   116e2:	bl	15148 <__ssprint_r>
   116e6:	cmp	r0, #0
   116e8:	bne.w	10cfa <_svfprintf_r+0x8ca>
   116ec:	ldrb.w	ip, [r6]
   116f0:	ldr	r2, [sp, #152]	; 0x98
   116f2:	ldr	r1, [sp, #20]
   116f4:	add	r0, sp, #156	; 0x9c
   116f6:	b.n	113f4 <_svfprintf_r+0xfc4>
   116f8:	cmp	r3, #1
   116fa:	str.w	r8, [sp, #8]
   116fe:	bne.w	10ae8 <_svfprintf_r+0x6b8>
   11702:	b.w	10e2c <_svfprintf_r+0x9fc>
   11706:	ldr	r3, [sp, #32]
   11708:	ldr	r1, [sp, #16]
   1170a:	ldr.w	r2, [r3], #4
   1170e:	mov	r4, r9
   11710:	str	r1, [r2, #0]
   11712:	str	r3, [sp, #32]
   11714:	b.w	10494 <_svfprintf_r+0x64>
   11718:	adds	r3, #1
   1171a:	ldr	r1, [pc, #404]	; (118b0 <_svfprintf_r+0x1480>)
   1171c:	str.w	r4, [sl, #4]
   11720:	add	r2, r4
   11722:	cmp	r3, #7
   11724:	strd	r3, r2, [sp, #148]	; 0x94
   11728:	str.w	r1, [sl]
   1172c:	ble.w	10d74 <_svfprintf_r+0x944>
   11730:	b.n	1102a <_svfprintf_r+0xbfa>
   11732:	ldr	r3, [sp, #64]	; 0x40
   11734:	ldr	r0, [sp, #72]	; 0x48
   11736:	add	r2, r3
   11738:	strd	r0, r3, [sl]
   1173c:	ldr	r3, [sp, #148]	; 0x94
   1173e:	str	r2, [sp, #152]	; 0x98
   11740:	adds	r3, #1
   11742:	cmp	r3, #7
   11744:	str	r3, [sp, #148]	; 0x94
   11746:	bgt.w	11a9c <_svfprintf_r+0x166c>
   1174a:	add.w	sl, sl, #8
   1174e:	cmp	r1, #0
   11750:	bge.w	115fc <_svfprintf_r+0x11cc>
   11754:	negs	r5, r1
   11756:	adds	r1, #16
   11758:	bge.w	11d7a <_svfprintf_r+0x194a>
   1175c:	vmov	r1, s22
   11760:	movs	r6, #16
   11762:	b.n	11770 <_svfprintf_r+0x1340>
   11764:	add.w	sl, sl, #8
   11768:	subs	r5, #16
   1176a:	cmp	r5, #16
   1176c:	ble.w	11d7a <_svfprintf_r+0x194a>
   11770:	adds	r3, #1
   11772:	ldr	r0, [pc, #316]	; (118b0 <_svfprintf_r+0x1480>)
   11774:	adds	r2, #16
   11776:	cmp	r3, #7
   11778:	strd	r0, r6, [sl]
   1177c:	strd	r3, r2, [sp, #148]	; 0x94
   11780:	ble.n	11764 <_svfprintf_r+0x1334>
   11782:	add	r2, sp, #144	; 0x90
   11784:	mov	r0, fp
   11786:	str	r1, [sp, #12]
   11788:	bl	15148 <__ssprint_r>
   1178c:	cmp	r0, #0
   1178e:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11792:	ldrd	r3, r2, [sp, #148]	; 0x94
   11796:	ldr	r1, [sp, #12]
   11798:	add.w	sl, sp, #156	; 0x9c
   1179c:	b.n	11768 <_svfprintf_r+0x1338>
   1179e:	ldr	r3, [sp, #32]
   117a0:	ands.w	r1, r8, #512	; 0x200
   117a4:	itte	ne
   117a6:	movne	r1, r2
   117a8:	ldrne.w	r2, [r3], #4
   117ac:	ldreq.w	r2, [r3], #4
   117b0:	str	r3, [sp, #32]
   117b2:	it	ne
   117b4:	uxtbne	r2, r2
   117b6:	b.w	10a44 <_svfprintf_r+0x614>
   117ba:	ldr	r3, [sp, #8]
   117bc:	ands.w	r1, r3, #512	; 0x200
   117c0:	ldr	r3, [sp, #32]
   117c2:	itte	ne
   117c4:	movne	r1, r2
   117c6:	ldrne.w	r2, [r3], #4
   117ca:	ldreq.w	r2, [r3], #4
   117ce:	str	r3, [sp, #32]
   117d0:	it	ne
   117d2:	uxtbne	r2, r2
   117d4:	movs	r3, #1
   117d6:	b.w	1097a <_svfprintf_r+0x54a>
   117da:	ldr	r3, [sp, #32]
   117dc:	ands.w	r1, r8, #512	; 0x200
   117e0:	itte	ne
   117e2:	movne	r1, r2
   117e4:	ldrne.w	r2, [r3], #4
   117e8:	ldreq.w	r2, [r3], #4
   117ec:	str	r3, [sp, #32]
   117ee:	it	ne
   117f0:	uxtbne	r2, r2
   117f2:	b.n	11292 <_svfprintf_r+0xe62>
   117f4:	mov	sl, r1
   117f6:	adds	r3, #1
   117f8:	ldr	r1, [pc, #180]	; (118b0 <_svfprintf_r+0x1480>)
   117fa:	str.w	r5, [sl, #4]
   117fe:	add	r2, r5
   11800:	cmp	r3, #7
   11802:	strd	r3, r2, [sp, #148]	; 0x94
   11806:	str.w	r1, [sl]
   1180a:	bgt.w	11a80 <_svfprintf_r+0x1650>
   1180e:	add.w	sl, sl, #8
   11812:	b.w	10f2e <_svfprintf_r+0xafe>
   11816:	movs	r3, #0
   11818:	mov	r1, r3
   1181a:	str	r6, [sp, #0]
   1181c:	add	r2, sp, #116	; 0x74
   1181e:	mov	r0, fp
   11820:	bl	14f40 <_wcsrtombs_r>
   11824:	mov	r3, r0
   11826:	adds	r3, #1
   11828:	str	r0, [sp, #20]
   1182a:	beq.w	11e10 <_svfprintf_r+0x19e0>
   1182e:	str	r4, [sp, #116]	; 0x74
   11830:	ldr	r3, [sp, #20]
   11832:	cmp	r3, #0
   11834:	beq.n	118d4 <_svfprintf_r+0x14a4>
   11836:	cmp	r3, #99	; 0x63
   11838:	bgt.w	11a6c <_svfprintf_r+0x163c>
   1183c:	movs	r3, #0
   1183e:	str	r3, [sp, #28]
   11840:	add	r4, sp, #220	; 0xdc
   11842:	movs	r2, #8
   11844:	movs	r1, #0
   11846:	mov	r0, r6
   11848:	bl	9c1c <memset>
   1184c:	ldr	r5, [sp, #20]
   1184e:	str	r6, [sp, #0]
   11850:	mov	r3, r5
   11852:	add	r2, sp, #116	; 0x74
   11854:	mov	r1, r4
   11856:	mov	r0, fp
   11858:	bl	14f40 <_wcsrtombs_r>
   1185c:	cmp	r5, r0
   1185e:	bne.w	11f5a <_svfprintf_r+0x1b2a>
   11862:	ldr	r2, [sp, #20]
   11864:	movs	r3, #0
   11866:	strb	r3, [r4, r2]
   11868:	bic.w	r2, r2, r2, asr #31
   1186c:	strd	r3, r3, [sp, #48]	; 0x30
   11870:	ldrb.w	r1, [sp, #103]	; 0x67
   11874:	str	r3, [sp, #12]
   11876:	str	r2, [sp, #8]
   11878:	str	r3, [sp, #60]	; 0x3c
   1187a:	b.w	107f2 <_svfprintf_r+0x3c2>
   1187e:	movs	r1, #45	; 0x2d
   11880:	strb.w	r1, [sp, #103]	; 0x67
   11884:	b.w	107d0 <_svfprintf_r+0x3a0>
   11888:	ldr	r3, [sp, #88]	; 0x58
   1188a:	ldr	r1, [sp, #84]	; 0x54
   1188c:	sub.w	fp, fp, r3
   11890:	mov	r2, r3
   11892:	mov	r0, fp
   11894:	bl	e698 <strncpy>
   11898:	ldrb.w	r2, [sl, #1]
   1189c:	ldr	r3, [pc, #20]	; (118b4 <_svfprintf_r+0x1484>)
   1189e:	cbz	r2, 118a4 <_svfprintf_r+0x1474>
   118a0:	add.w	sl, sl, #1
   118a4:	mov.w	ip, #0
   118a8:	b.n	114fc <_svfprintf_r+0x10cc>
   118aa:	nop
   118ac:	.word	0x200009fc
   118b0:	.word	0x2000789c
   118b4:	.word	0xcccccccd
   118b8:	vmov	r1, s22
   118bc:	add	r2, sp, #144	; 0x90
   118be:	mov	r0, fp
   118c0:	bl	15148 <__ssprint_r>
   118c4:	cmp	r0, #0
   118c6:	bne.w	10cfa <_svfprintf_r+0x8ca>
   118ca:	ldr	r1, [sp, #108]	; 0x6c
   118cc:	ldr	r2, [sp, #152]	; 0x98
   118ce:	add.w	sl, sp, #156	; 0x9c
   118d2:	b.n	115ce <_svfprintf_r+0x119e>
   118d4:	ldr	r3, [sp, #20]
   118d6:	ldrb.w	r1, [sp, #103]	; 0x67
   118da:	str	r3, [sp, #60]	; 0x3c
   118dc:	strd	r3, r3, [sp, #8]
   118e0:	strd	r3, r3, [sp, #48]	; 0x30
   118e4:	str	r3, [sp, #28]
   118e6:	b.w	107f2 <_svfprintf_r+0x3c2>
   118ea:	ldr	r1, [sp, #56]	; 0x38
   118ec:	ldr	r0, [sp, #20]
   118ee:	adds	r5, r4, r1
   118f0:	subs	r5, r5, r0
   118f2:	subs	r4, r1, r3
   118f4:	cmp	r5, r4
   118f6:	it	ge
   118f8:	movge	r5, r4
   118fa:	b.w	10f98 <_svfprintf_r+0xb68>
   118fe:	ldr	r3, [sp, #32]
   11900:	ldr	r1, [sp, #16]
   11902:	ldr.w	r2, [r3], #4
   11906:	str	r3, [sp, #32]
   11908:	strh	r1, [r2, #0]
   1190a:	mov	r4, r9
   1190c:	b.w	10494 <_svfprintf_r+0x64>
   11910:	ldrsb.w	r2, [r3], #4
   11914:	str	r3, [sp, #32]
   11916:	asrs	r1, r2, #31
   11918:	mov	r3, r1
   1191a:	b.w	108d4 <_svfprintf_r+0x4a4>
   1191e:	ldr	r2, [sp, #12]
   11920:	movs	r1, #2
   11922:	add	r3, sp, #136	; 0x88
   11924:	str	r3, [sp, #4]
   11926:	add	r3, sp, #116	; 0x74
   11928:	str	r3, [sp, #0]
   1192a:	mov	r0, fp
   1192c:	add	r3, sp, #108	; 0x6c
   1192e:	vmov.f64	d0, d10
   11932:	str	r2, [sp, #8]
   11934:	bl	13d60 <_dtoa_r>
   11938:	cmp	r5, #71	; 0x47
   1193a:	ldr	r2, [sp, #8]
   1193c:	mov	r4, r0
   1193e:	beq.w	11c04 <_svfprintf_r+0x17d4>
   11942:	cmp	r5, #70	; 0x46
   11944:	add	r0, r2
   11946:	bne.n	11954 <_svfprintf_r+0x1524>
   11948:	ldrb	r3, [r4, #0]
   1194a:	cmp	r3, #48	; 0x30
   1194c:	beq.w	11e2e <_svfprintf_r+0x19fe>
   11950:	ldr	r2, [sp, #108]	; 0x6c
   11952:	add	r0, r2
   11954:	vcmp.f64	d10, #0.0
   11958:	vmrs	APSR_nzcv, fpscr
   1195c:	bne.w	11bec <_svfprintf_r+0x17bc>
   11960:	mov	r3, r0
   11962:	subs	r3, r3, r4
   11964:	str	r3, [sp, #56]	; 0x38
   11966:	cmp	r5, #71	; 0x47
   11968:	beq.w	11b8c <_svfprintf_r+0x175c>
   1196c:	cmp	r5, #70	; 0x46
   1196e:	beq.w	11cdc <_svfprintf_r+0x18ac>
   11972:	ldr	r3, [sp, #108]	; 0x6c
   11974:	str	r3, [sp, #48]	; 0x30
   11976:	ldr	r3, [sp, #48]	; 0x30
   11978:	cmp	r5, #65	; 0x41
   1197a:	add.w	r3, r3, #4294967295
   1197e:	str	r3, [sp, #108]	; 0x6c
   11980:	beq.w	11d4e <_svfprintf_r+0x191e>
   11984:	ldrb.w	r2, [sp, #44]	; 0x2c
   11988:	movs	r1, #0
   1198a:	cmp	r3, #0
   1198c:	it	lt
   1198e:	ldrlt	r3, [sp, #48]	; 0x30
   11990:	strb.w	r2, [sp, #120]	; 0x78
   11994:	itte	lt
   11996:	rsblt	r3, r3, #1
   1199a:	movlt	r2, #45	; 0x2d
   1199c:	movge	r2, #43	; 0x2b
   1199e:	cmp	r3, #9
   119a0:	strb.w	r2, [sp, #121]	; 0x79
   119a4:	ble.w	11d5c <_svfprintf_r+0x192c>
   119a8:	add.w	r5, sp, #143	; 0x8f
   119ac:	ldr.w	ip, [pc, #1052]	; 11dcc <_svfprintf_r+0x199c>
   119b0:	mov	r2, r5
   119b2:	mov	r0, r2
   119b4:	smull	r2, r1, ip, r3
   119b8:	asrs	r2, r3, #31
   119ba:	rsb	r2, r2, r1, asr #2
   119be:	add.w	r1, r2, r2, lsl #2
   119c2:	sub.w	r1, r3, r1, lsl #1
   119c6:	adds	r1, #48	; 0x30
   119c8:	strb.w	r1, [r0, #-1]
   119cc:	mov	r1, r3
   119ce:	cmp	r1, #99	; 0x63
   119d0:	mov	r3, r2
   119d2:	add.w	r2, r0, #4294967295
   119d6:	bgt.n	119b2 <_svfprintf_r+0x1582>
   119d8:	adds	r3, #48	; 0x30
   119da:	uxtb	r1, r3
   119dc:	subs	r3, r0, #2
   119de:	cmp	r5, r3
   119e0:	strb.w	r1, [r2, #-1]
   119e4:	bls.w	11efe <_svfprintf_r+0x1ace>
   119e8:	mov	r3, r2
   119ea:	add.w	r2, sp, #122	; 0x7a
   119ee:	b.n	119f4 <_svfprintf_r+0x15c4>
   119f0:	ldrb.w	r1, [r3], #1
   119f4:	strb.w	r1, [r2], #1
   119f8:	cmp	r5, r3
   119fa:	bne.n	119f0 <_svfprintf_r+0x15c0>
   119fc:	add.w	r3, sp, #145	; 0x91
   11a00:	add.w	r2, sp, #122	; 0x7a
   11a04:	subs	r3, r3, r0
   11a06:	add	r3, r2
   11a08:	add	r2, sp, #120	; 0x78
   11a0a:	subs	r3, r3, r2
   11a0c:	str	r3, [sp, #80]	; 0x50
   11a0e:	ldr	r3, [sp, #56]	; 0x38
   11a10:	ldr	r2, [sp, #80]	; 0x50
   11a12:	cmp	r3, #1
   11a14:	add	r2, r3
   11a16:	str	r2, [sp, #20]
   11a18:	ble.w	11e22 <_svfprintf_r+0x19f2>
   11a1c:	ldr	r3, [sp, #20]
   11a1e:	ldr	r2, [sp, #64]	; 0x40
   11a20:	add	r3, r2
   11a22:	str	r3, [sp, #20]
   11a24:	bic.w	r3, r6, #1024	; 0x400
   11a28:	ldr	r2, [sp, #20]
   11a2a:	orr.w	r8, r3, #256	; 0x100
   11a2e:	movs	r3, #0
   11a30:	strd	r3, r3, [sp, #48]	; 0x30
   11a34:	bic.w	r2, r2, r2, asr #31
   11a38:	str	r3, [sp, #60]	; 0x3c
   11a3a:	str	r2, [sp, #8]
   11a3c:	ldr	r3, [sp, #36]	; 0x24
   11a3e:	cmp	r3, #0
   11a40:	bne.w	11ba6 <_svfprintf_r+0x1776>
   11a44:	ldrb.w	r1, [sp, #103]	; 0x67
   11a48:	str	r3, [sp, #12]
   11a4a:	b.w	107f2 <_svfprintf_r+0x3c2>
   11a4e:	mov	r0, r4
   11a50:	bl	ec80 <strlen>
   11a54:	mov	r2, r0
   11a56:	str	r0, [sp, #20]
   11a58:	b.w	1089c <_svfprintf_r+0x46c>
   11a5c:	vmov	r1, s22
   11a60:	add	r2, sp, #144	; 0x90
   11a62:	mov	r0, fp
   11a64:	bl	15148 <__ssprint_r>
   11a68:	b.w	10646 <_svfprintf_r+0x216>
   11a6c:	adds	r1, r3, #1
   11a6e:	mov	r0, fp
   11a70:	bl	c680 <_malloc_r>
   11a74:	mov	r4, r0
   11a76:	cmp	r0, #0
   11a78:	beq.w	11e10 <_svfprintf_r+0x19e0>
   11a7c:	str	r0, [sp, #28]
   11a7e:	b.n	11842 <_svfprintf_r+0x1412>
   11a80:	vmov	r1, s22
   11a84:	add	r2, sp, #144	; 0x90
   11a86:	mov	r0, fp
   11a88:	bl	15148 <__ssprint_r>
   11a8c:	cmp	r0, #0
   11a8e:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11a92:	ldr	r2, [sp, #152]	; 0x98
   11a94:	add.w	sl, sp, #156	; 0x9c
   11a98:	b.w	10f2e <_svfprintf_r+0xafe>
   11a9c:	vmov	r1, s22
   11aa0:	add	r2, sp, #144	; 0x90
   11aa2:	mov	r0, fp
   11aa4:	bl	15148 <__ssprint_r>
   11aa8:	cmp	r0, #0
   11aaa:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11aae:	ldrd	r3, r2, [sp, #148]	; 0x94
   11ab2:	ldr	r1, [sp, #108]	; 0x6c
   11ab4:	add.w	sl, sp, #156	; 0x9c
   11ab8:	b.n	1174e <_svfprintf_r+0x131e>
   11aba:	movs	r3, #6
   11abc:	str	r3, [sp, #12]
   11abe:	b.w	111c8 <_svfprintf_r+0xd98>
   11ac2:	ldr	r3, [sp, #12]
   11ac4:	movs	r1, #2
   11ac6:	adds	r2, r3, #1
   11ac8:	b.n	11922 <_svfprintf_r+0x14f2>
   11aca:	ldr	r2, [sp, #12]
   11acc:	movs	r1, #3
   11ace:	b.n	11922 <_svfprintf_r+0x14f2>
   11ad0:	add	r0, sp, #108	; 0x6c
   11ad2:	vmov.f64	d0, d10
   11ad6:	bl	13b08 <frexp>
   11ada:	vmov.f64	d7, #64	; 0x3e000000  0.125
   11ade:	vmul.f64	d0, d0, d7
   11ae2:	vcmp.f64	d0, #0.0
   11ae6:	vmrs	APSR_nzcv, fpscr
   11aea:	bne.n	11af0 <_svfprintf_r+0x16c0>
   11aec:	movs	r3, #1
   11aee:	str	r3, [sp, #108]	; 0x6c
   11af0:	ldr	r0, [pc, #716]	; (11dc0 <_svfprintf_r+0x1990>)
   11af2:	ldr	r3, [sp, #12]
   11af4:	vmov.f64	d5, #48	; 0x41800000  16.0
   11af8:	subs	r3, #1
   11afa:	mov	r2, r4
   11afc:	b.n	11b08 <_svfprintf_r+0x16d8>
   11afe:	vcmp.f64	d0, #0.0
   11b02:	vmrs	APSR_nzcv, fpscr
   11b06:	beq.n	11b30 <_svfprintf_r+0x1700>
   11b08:	vmul.f64	d0, d0, d5
   11b0c:	vcvt.s32.f64	s15, d0
   11b10:	cmp.w	r3, #4294967295
   11b14:	vmov	r1, s15
   11b18:	ldrb	r1, [r0, r1]
   11b1a:	vcvt.f64.s32	d6, s15
   11b1e:	mov	ip, r2
   11b20:	vsub.f64	d0, d0, d6
   11b24:	strb.w	r1, [r2], #1
   11b28:	mov	r1, r3
   11b2a:	add.w	r3, r3, #4294967295
   11b2e:	bne.n	11afe <_svfprintf_r+0x16ce>
   11b30:	vmov.f64	d6, #96	; 0x3f000000  0.5
   11b34:	vcmpe.f64	d0, d6
   11b38:	vmrs	APSR_nzcv, fpscr
   11b3c:	bgt.w	11dd0 <_svfprintf_r+0x19a0>
   11b40:	vcmp.f64	d0, d6
   11b44:	vmrs	APSR_nzcv, fpscr
   11b48:	bne.n	11b54 <_svfprintf_r+0x1724>
   11b4a:	vmov	r3, s15
   11b4e:	lsls	r3, r3, #31
   11b50:	bmi.w	11dd0 <_svfprintf_r+0x19a0>
   11b54:	cmp	r1, #0
   11b56:	blt.n	11b66 <_svfprintf_r+0x1736>
   11b58:	adds	r3, r1, #1
   11b5a:	add	r3, r2
   11b5c:	movs	r1, #48	; 0x30
   11b5e:	strb.w	r1, [r2], #1
   11b62:	cmp	r3, r2
   11b64:	bne.n	11b5e <_svfprintf_r+0x172e>
   11b66:	subs	r3, r2, r4
   11b68:	str	r3, [sp, #56]	; 0x38
   11b6a:	b.n	11966 <_svfprintf_r+0x1536>
   11b6c:	ldr	r4, [sp, #44]	; 0x2c
   11b6e:	ldr	r3, [sp, #56]	; 0x38
   11b70:	ldr.w	r9, [sp, #36]	; 0x24
   11b74:	ldr.w	r8, [sp, #40]	; 0x28
   11b78:	str	r6, [sp, #76]	; 0x4c
   11b7a:	adds	r3, r4, r3
   11b7c:	cmp	r5, r3
   11b7e:	mov	r1, r5
   11b80:	it	cs
   11b82:	movcs	r1, r3
   11b84:	mov	sl, r0
   11b86:	str	r1, [sp, #20]
   11b88:	b.w	10f3c <_svfprintf_r+0xb0c>
   11b8c:	ldr	r3, [sp, #108]	; 0x6c
   11b8e:	str	r3, [sp, #48]	; 0x30
   11b90:	adds	r2, r3, #3
   11b92:	blt.n	11b9a <_svfprintf_r+0x176a>
   11b94:	ldr	r2, [sp, #12]
   11b96:	cmp	r3, r2
   11b98:	ble.n	11bb4 <_svfprintf_r+0x1784>
   11b9a:	ldr	r3, [sp, #44]	; 0x2c
   11b9c:	subs	r3, #2
   11b9e:	str	r3, [sp, #44]	; 0x2c
   11ba0:	bic.w	r5, r3, #32
   11ba4:	b.n	11976 <_svfprintf_r+0x1546>
   11ba6:	movs	r1, #45	; 0x2d
   11ba8:	movs	r3, #0
   11baa:	strb.w	r1, [sp, #103]	; 0x67
   11bae:	str	r3, [sp, #12]
   11bb0:	b.w	107f8 <_svfprintf_r+0x3c8>
   11bb4:	ldr	r3, [sp, #48]	; 0x30
   11bb6:	ldr	r2, [sp, #56]	; 0x38
   11bb8:	cmp	r3, r2
   11bba:	blt.w	11d38 <_svfprintf_r+0x1908>
   11bbe:	lsls	r0, r6, #31
   11bc0:	ldr	r3, [sp, #48]	; 0x30
   11bc2:	bpl.w	11e2a <_svfprintf_r+0x19fa>
   11bc6:	ldr	r2, [sp, #64]	; 0x40
   11bc8:	add	r3, r2
   11bca:	str	r3, [sp, #20]
   11bcc:	lsls	r1, r6, #21
   11bce:	bpl.n	11bd8 <_svfprintf_r+0x17a8>
   11bd0:	ldr	r3, [sp, #48]	; 0x30
   11bd2:	cmp	r3, #0
   11bd4:	bgt.w	11e42 <_svfprintf_r+0x1a12>
   11bd8:	ldr	r3, [sp, #20]
   11bda:	bic.w	r3, r3, r3, asr #31
   11bde:	str	r3, [sp, #8]
   11be0:	movs	r3, #103	; 0x67
   11be2:	str	r3, [sp, #44]	; 0x2c
   11be4:	movs	r3, #0
   11be6:	str	r3, [sp, #60]	; 0x3c
   11be8:	str	r3, [sp, #52]	; 0x34
   11bea:	b.n	11a3c <_svfprintf_r+0x160c>
   11bec:	ldr	r3, [sp, #136]	; 0x88
   11bee:	cmp	r3, r0
   11bf0:	bcs.w	11962 <_svfprintf_r+0x1532>
   11bf4:	movs	r1, #48	; 0x30
   11bf6:	adds	r2, r3, #1
   11bf8:	str	r2, [sp, #136]	; 0x88
   11bfa:	strb	r1, [r3, #0]
   11bfc:	ldr	r3, [sp, #136]	; 0x88
   11bfe:	cmp	r0, r3
   11c00:	bhi.n	11bf6 <_svfprintf_r+0x17c6>
   11c02:	b.n	11962 <_svfprintf_r+0x1532>
   11c04:	lsls	r3, r6, #31
   11c06:	bmi.w	11d58 <_svfprintf_r+0x1928>
   11c0a:	ldr	r3, [sp, #136]	; 0x88
   11c0c:	b.n	11962 <_svfprintf_r+0x1532>
   11c0e:	add	r2, sp, #144	; 0x90
   11c10:	mov	r0, fp
   11c12:	str	r1, [sp, #20]
   11c14:	bl	15148 <__ssprint_r>
   11c18:	cmp	r0, #0
   11c1a:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11c1e:	ldrb.w	ip, [r6]
   11c22:	ldr	r2, [sp, #152]	; 0x98
   11c24:	ldr	r1, [sp, #20]
   11c26:	add	r0, sp, #156	; 0x9c
   11c28:	add	r5, ip
   11c2a:	b.w	11406 <_svfprintf_r+0xfd6>
   11c2e:	vmov	r1, s22
   11c32:	add	r2, sp, #144	; 0x90
   11c34:	mov	r0, fp
   11c36:	bl	15148 <__ssprint_r>
   11c3a:	cmp	r0, #0
   11c3c:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11c40:	ldr	r2, [sp, #152]	; 0x98
   11c42:	add.w	sl, sp, #156	; 0x9c
   11c46:	b.w	10f20 <_svfprintf_r+0xaf0>
   11c4a:	movs	r3, #120	; 0x78
   11c4c:	strb.w	r3, [sp, #105]	; 0x69
   11c50:	movs	r3, #48	; 0x30
   11c52:	strb.w	r3, [sp, #104]	; 0x68
   11c56:	ldr	r3, [sp, #12]
   11c58:	cmp	r3, #99	; 0x63
   11c5a:	orr.w	r6, r8, #2
   11c5e:	bgt.w	11dae <_svfprintf_r+0x197e>
   11c62:	movs	r3, #0
   11c64:	str	r3, [sp, #28]
   11c66:	add	r4, sp, #220	; 0xdc
   11c68:	vmov	r3, s17
   11c6c:	cmp	r3, #0
   11c6e:	orr.w	r8, r8, #258	; 0x102
   11c72:	blt.n	11ccc <_svfprintf_r+0x189c>
   11c74:	vmov.f64	d10, d8
   11c78:	ldr	r3, [sp, #44]	; 0x2c
   11c7a:	bic.w	r5, r3, #32
   11c7e:	movs	r3, #0
   11c80:	str	r3, [sp, #36]	; 0x24
   11c82:	ldr	r3, [sp, #44]	; 0x2c
   11c84:	cmp	r3, #97	; 0x61
   11c86:	bne.w	111e4 <_svfprintf_r+0xdb4>
   11c8a:	vmov.f64	d0, d10
   11c8e:	add	r0, sp, #108	; 0x6c
   11c90:	bl	13b08 <frexp>
   11c94:	vmov.f64	d7, #64	; 0x3e000000  0.125
   11c98:	vmul.f64	d0, d0, d7
   11c9c:	vcmp.f64	d0, #0.0
   11ca0:	vmrs	APSR_nzcv, fpscr
   11ca4:	bne.n	11caa <_svfprintf_r+0x187a>
   11ca6:	movs	r3, #1
   11ca8:	str	r3, [sp, #108]	; 0x6c
   11caa:	ldr	r0, [pc, #280]	; (11dc4 <_svfprintf_r+0x1994>)
   11cac:	b.n	11af2 <_svfprintf_r+0x16c2>
   11cae:	vmov	r1, s22
   11cb2:	add	r2, sp, #144	; 0x90
   11cb4:	mov	r0, fp
   11cb6:	bl	15148 <__ssprint_r>
   11cba:	cmp	r0, #0
   11cbc:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11cc0:	ldr	r3, [sp, #108]	; 0x6c
   11cc2:	ldr	r2, [sp, #152]	; 0x98
   11cc4:	add.w	sl, sp, #156	; 0x9c
   11cc8:	b.w	10f68 <_svfprintf_r+0xb38>
   11ccc:	ldr	r3, [sp, #44]	; 0x2c
   11cce:	bic.w	r5, r3, #32
   11cd2:	movs	r3, #45	; 0x2d
   11cd4:	str	r3, [sp, #36]	; 0x24
   11cd6:	vneg.f64	d10, d8
   11cda:	b.n	11c82 <_svfprintf_r+0x1852>
   11cdc:	ldr	r2, [sp, #108]	; 0x6c
   11cde:	str	r2, [sp, #48]	; 0x30
   11ce0:	cmp	r2, #0
   11ce2:	and.w	r3, r6, #1
   11ce6:	ble.w	11f04 <_svfprintf_r+0x1ad4>
   11cea:	ldr	r1, [sp, #12]
   11cec:	orrs	r3, r1
   11cee:	bne.w	11e90 <_svfprintf_r+0x1a60>
   11cf2:	ldr	r3, [sp, #48]	; 0x30
   11cf4:	str	r3, [sp, #20]
   11cf6:	movs	r3, #102	; 0x66
   11cf8:	str	r3, [sp, #44]	; 0x2c
   11cfa:	lsls	r2, r6, #21
   11cfc:	bmi.w	11e46 <_svfprintf_r+0x1a16>
   11d00:	ldr	r3, [sp, #20]
   11d02:	bic.w	r3, r3, r3, asr #31
   11d06:	str	r3, [sp, #8]
   11d08:	b.n	11be4 <_svfprintf_r+0x17b4>
   11d0a:	vmov	r1, s22
   11d0e:	add	r2, sp, #144	; 0x90
   11d10:	mov	r0, fp
   11d12:	bl	15148 <__ssprint_r>
   11d16:	cmp	r0, #0
   11d18:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11d1c:	ldr	r4, [sp, #108]	; 0x6c
   11d1e:	ldr	r3, [sp, #56]	; 0x38
   11d20:	ldr	r2, [sp, #152]	; 0x98
   11d22:	subs	r4, r3, r4
   11d24:	add.w	sl, sp, #156	; 0x9c
   11d28:	b.w	10f98 <_svfprintf_r+0xb68>
   11d2c:	movs	r3, #88	; 0x58
   11d2e:	b.n	11c4c <_svfprintf_r+0x181c>
   11d30:	movs	r2, #0
   11d32:	str	r2, [sp, #12]
   11d34:	b.w	104ec <_svfprintf_r+0xbc>
   11d38:	ldr	r3, [sp, #56]	; 0x38
   11d3a:	ldr	r2, [sp, #64]	; 0x40
   11d3c:	adds	r2, r3, r2
   11d3e:	ldr	r3, [sp, #48]	; 0x30
   11d40:	str	r2, [sp, #20]
   11d42:	cmp	r3, #0
   11d44:	ble.w	11e9e <_svfprintf_r+0x1a6e>
   11d48:	movs	r3, #103	; 0x67
   11d4a:	str	r3, [sp, #44]	; 0x2c
   11d4c:	b.n	11cfa <_svfprintf_r+0x18ca>
   11d4e:	ldr	r2, [sp, #44]	; 0x2c
   11d50:	adds	r2, #15
   11d52:	uxtb	r2, r2
   11d54:	movs	r1, #1
   11d56:	b.n	1198a <_svfprintf_r+0x155a>
   11d58:	adds	r0, r4, r2
   11d5a:	b.n	11954 <_svfprintf_r+0x1524>
   11d5c:	cmp	r1, #0
   11d5e:	bne.w	11eb2 <_svfprintf_r+0x1a82>
   11d62:	movs	r2, #48	; 0x30
   11d64:	strb.w	r2, [sp, #122]	; 0x7a
   11d68:	add.w	r2, sp, #123	; 0x7b
   11d6c:	adds	r3, #48	; 0x30
   11d6e:	strb.w	r3, [r2], #1
   11d72:	add	r3, sp, #120	; 0x78
   11d74:	subs	r3, r2, r3
   11d76:	str	r3, [sp, #80]	; 0x50
   11d78:	b.n	11a0e <_svfprintf_r+0x15de>
   11d7a:	adds	r3, #1
   11d7c:	ldr	r1, [pc, #72]	; (11dc8 <_svfprintf_r+0x1998>)
   11d7e:	str.w	r5, [sl, #4]
   11d82:	add	r2, r5
   11d84:	cmp	r3, #7
   11d86:	strd	r3, r2, [sp, #148]	; 0x94
   11d8a:	str.w	r1, [sl]
   11d8e:	ble.w	115f8 <_svfprintf_r+0x11c8>
   11d92:	vmov	r1, s22
   11d96:	add	r2, sp, #144	; 0x90
   11d98:	mov	r0, fp
   11d9a:	bl	15148 <__ssprint_r>
   11d9e:	cmp	r0, #0
   11da0:	bne.w	10cfa <_svfprintf_r+0x8ca>
   11da4:	ldrd	r3, r2, [sp, #148]	; 0x94
   11da8:	add.w	sl, sp, #156	; 0x9c
   11dac:	b.n	115fc <_svfprintf_r+0x11cc>
   11dae:	adds	r1, r3, #1
   11db0:	mov	r0, fp
   11db2:	bl	c680 <_malloc_r>
   11db6:	mov	r4, r0
   11db8:	cbz	r0, 11e10 <_svfprintf_r+0x19e0>
   11dba:	str	r0, [sp, #28]
   11dbc:	b.n	11c68 <_svfprintf_r+0x1838>
   11dbe:	nop
   11dc0:	.word	0x200009e0
   11dc4:	.word	0x200009cc
   11dc8:	.word	0x2000789c
   11dcc:	.word	0x66666667
   11dd0:	str.w	ip, [sp, #136]	; 0x88
   11dd4:	ldrb.w	r1, [r2, #-1]
   11dd8:	ldrb.w	ip, [r0, #15]
   11ddc:	cmp	r1, ip
   11dde:	mov	r3, r2
   11de0:	bne.n	11df8 <_svfprintf_r+0x19c8>
   11de2:	mov.w	lr, #48	; 0x30
   11de6:	strb.w	lr, [r3, #-1]
   11dea:	ldr	r3, [sp, #136]	; 0x88
   11dec:	subs	r1, r3, #1
   11dee:	str	r1, [sp, #136]	; 0x88
   11df0:	ldrb.w	r1, [r3, #-1]
   11df4:	cmp	ip, r1
   11df6:	beq.n	11de6 <_svfprintf_r+0x19b6>
   11df8:	cmp	r1, #57	; 0x39
   11dfa:	itet	ne
   11dfc:	addne	r1, #1
   11dfe:	ldrbeq	r1, [r0, #10]
   11e00:	uxtbne	r1, r1
   11e02:	strb.w	r1, [r3, #-1]
   11e06:	b.n	11b66 <_svfprintf_r+0x1736>
   11e08:	movs	r3, #0
   11e0a:	mov	r8, r2
   11e0c:	str	r3, [sp, #28]
   11e0e:	b.n	11cd2 <_svfprintf_r+0x18a2>
   11e10:	vmov	r2, s22
   11e14:	ldrsh.w	r3, [r2, #12]
   11e18:	orr.w	r3, r3, #64	; 0x40
   11e1c:	strh	r3, [r2, #12]
   11e1e:	b.w	1064e <_svfprintf_r+0x21e>
   11e22:	lsls	r5, r6, #31
   11e24:	bpl.w	11a24 <_svfprintf_r+0x15f4>
   11e28:	b.n	11a1c <_svfprintf_r+0x15ec>
   11e2a:	str	r3, [sp, #20]
   11e2c:	b.n	11bcc <_svfprintf_r+0x179c>
   11e2e:	vcmp.f64	d10, #0.0
   11e32:	vmrs	APSR_nzcv, fpscr
   11e36:	beq.w	11950 <_svfprintf_r+0x1520>
   11e3a:	rsb	r2, r2, #1
   11e3e:	str	r2, [sp, #108]	; 0x6c
   11e40:	b.n	11952 <_svfprintf_r+0x1522>
   11e42:	movs	r3, #103	; 0x67
   11e44:	str	r3, [sp, #44]	; 0x2c
   11e46:	ldr	r1, [sp, #76]	; 0x4c
   11e48:	ldrb	r3, [r1, #0]
   11e4a:	cmp	r3, #255	; 0xff
   11e4c:	beq.n	11f42 <_svfprintf_r+0x1b12>
   11e4e:	movs	r5, #0
   11e50:	ldr	r2, [sp, #48]	; 0x30
   11e52:	mov	r0, r5
   11e54:	b.n	11e5e <_svfprintf_r+0x1a2e>
   11e56:	adds	r0, #1
   11e58:	adds	r1, #1
   11e5a:	cmp	r3, #255	; 0xff
   11e5c:	beq.n	11e70 <_svfprintf_r+0x1a40>
   11e5e:	cmp	r3, r2
   11e60:	bge.n	11e70 <_svfprintf_r+0x1a40>
   11e62:	subs	r2, r2, r3
   11e64:	ldrb	r3, [r1, #1]
   11e66:	cmp	r3, #0
   11e68:	bne.n	11e56 <_svfprintf_r+0x1a26>
   11e6a:	ldrb	r3, [r1, #0]
   11e6c:	adds	r5, #1
   11e6e:	b.n	11e5a <_svfprintf_r+0x1a2a>
   11e70:	str	r2, [sp, #48]	; 0x30
   11e72:	str	r1, [sp, #76]	; 0x4c
   11e74:	str	r0, [sp, #52]	; 0x34
   11e76:	str	r5, [sp, #60]	; 0x3c
   11e78:	ldr	r2, [sp, #60]	; 0x3c
   11e7a:	ldr	r3, [sp, #52]	; 0x34
   11e7c:	ldr	r1, [sp, #88]	; 0x58
   11e7e:	add	r3, r2
   11e80:	ldr	r2, [sp, #20]
   11e82:	mla	r3, r1, r3, r2
   11e86:	str	r3, [sp, #20]
   11e88:	bic.w	r3, r3, r3, asr #31
   11e8c:	str	r3, [sp, #8]
   11e8e:	b.n	11a3c <_svfprintf_r+0x160c>
   11e90:	ldr	r3, [sp, #64]	; 0x40
   11e92:	adds	r3, r2, r3
   11e94:	add	r1, r3
   11e96:	movs	r3, #102	; 0x66
   11e98:	str	r1, [sp, #20]
   11e9a:	str	r3, [sp, #44]	; 0x2c
   11e9c:	b.n	11cfa <_svfprintf_r+0x18ca>
   11e9e:	rsb	r3, r3, #1
   11ea2:	add	r2, r3
   11ea4:	bic.w	r3, r2, r2, asr #31
   11ea8:	str	r3, [sp, #8]
   11eaa:	movs	r3, #103	; 0x67
   11eac:	str	r2, [sp, #20]
   11eae:	str	r3, [sp, #44]	; 0x2c
   11eb0:	b.n	11be4 <_svfprintf_r+0x17b4>
   11eb2:	add.w	r2, sp, #122	; 0x7a
   11eb6:	b.n	11d6c <_svfprintf_r+0x193c>
   11eb8:	ldr	r3, [sp, #12]
   11eba:	ldr.w	r9, [sp, #8]
   11ebe:	ldr.w	r8, [sp, #28]
   11ec2:	str	r3, [sp, #20]
   11ec4:	b.n	11830 <_svfprintf_r+0x1400>
   11ec6:	vmov	r3, s17
   11eca:	cmp	r3, #0
   11ecc:	ite	lt
   11ece:	movlt	r1, #45	; 0x2d
   11ed0:	ldrbge.w	r1, [sp, #103]	; 0x67
   11ed4:	ldr	r4, [pc, #148]	; (11f6c <_svfprintf_r+0x1b3c>)
   11ed6:	ldr	r3, [pc, #152]	; (11f70 <_svfprintf_r+0x1b40>)
   11ed8:	it	lt
   11eda:	strblt.w	r1, [sp, #103]	; 0x67
   11ede:	bic.w	r8, r8, #128	; 0x80
   11ee2:	b.w	107d8 <_svfprintf_r+0x3a8>
   11ee6:	ldr	r3, [sp, #12]
   11ee8:	str	r3, [sp, #8]
   11eea:	str	r3, [sp, #20]
   11eec:	movs	r3, #115	; 0x73
   11eee:	ldrb.w	r1, [sp, #103]	; 0x67
   11ef2:	str	r0, [sp, #12]
   11ef4:	str	r0, [sp, #60]	; 0x3c
   11ef6:	str	r0, [sp, #52]	; 0x34
   11ef8:	str	r3, [sp, #44]	; 0x2c
   11efa:	b.w	107f2 <_svfprintf_r+0x3c2>
   11efe:	movs	r3, #2
   11f00:	str	r3, [sp, #80]	; 0x50
   11f02:	b.n	11a0e <_svfprintf_r+0x15de>
   11f04:	ldr	r2, [sp, #12]
   11f06:	orrs	r3, r2
   11f08:	bne.n	11f16 <_svfprintf_r+0x1ae6>
   11f0a:	movs	r3, #1
   11f0c:	movs	r2, #102	; 0x66
   11f0e:	str	r3, [sp, #8]
   11f10:	str	r2, [sp, #44]	; 0x2c
   11f12:	str	r3, [sp, #20]
   11f14:	b.n	11be4 <_svfprintf_r+0x17b4>
   11f16:	ldr	r3, [sp, #64]	; 0x40
   11f18:	adds	r3, #1
   11f1a:	add	r2, r3
   11f1c:	bic.w	r3, r2, r2, asr #31
   11f20:	str	r3, [sp, #8]
   11f22:	movs	r3, #102	; 0x66
   11f24:	str	r2, [sp, #20]
   11f26:	str	r3, [sp, #44]	; 0x2c
   11f28:	b.n	11be4 <_svfprintf_r+0x17b4>
   11f2a:	ldr	r2, [sp, #32]
   11f2c:	ldrb.w	r3, [r9, #1]
   11f30:	mov	r9, r1
   11f32:	ldr.w	r1, [r2], #4
   11f36:	str	r2, [sp, #32]
   11f38:	orr.w	r1, r1, r1, asr #31
   11f3c:	str	r1, [sp, #12]
   11f3e:	b.w	104e8 <_svfprintf_r+0xb8>
   11f42:	movs	r3, #0
   11f44:	str	r3, [sp, #60]	; 0x3c
   11f46:	str	r3, [sp, #52]	; 0x34
   11f48:	b.n	11e78 <_svfprintf_r+0x1a48>
   11f4a:	movs	r3, #12
   11f4c:	str.w	r3, [fp]
   11f50:	mov.w	r3, #4294967295
   11f54:	str	r3, [sp, #16]
   11f56:	b.w	1065c <_svfprintf_r+0x22c>
   11f5a:	vmov	r2, s22
   11f5e:	ldrh	r3, [r2, #12]
   11f60:	orr.w	r3, r3, #64	; 0x40
   11f64:	strh	r3, [r2, #12]
   11f66:	b.w	10cfa <_svfprintf_r+0x8ca>
   11f6a:	nop
   11f6c:	.word	0x200009c4
   11f70:	.word	0x200009c8

00011f74 <__ssvfscanf_r>:
   11f74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f78:	vpush	{d8}
   11f7c:	sub.w	sp, sp, #732	; 0x2dc
   11f80:	mov	fp, r1
   11f82:	ldrsh.w	r1, [r1, #12]
   11f86:	add	r7, sp, #8
   11f88:	lsls	r4, r1, #18
   11f8a:	mov	r9, r0
   11f8c:	str	r2, [r7, #76]	; 0x4c
   11f8e:	str	r3, [r7, #48]	; 0x30
   11f90:	bmi.n	11fa6 <__ssvfscanf_r+0x32>
   11f92:	ldr.w	r3, [fp, #100]	; 0x64
   11f96:	orr.w	r1, r1, #8192	; 0x2000
   11f9a:	bic.w	r3, r3, #8192	; 0x2000
   11f9e:	strh.w	r1, [fp, #12]
   11fa2:	str.w	r3, [fp, #100]	; 0x64
   11fa6:	movs	r3, #0
   11fa8:	mov	r4, r3
   11faa:	movs	r2, #8
   11fac:	mov	r1, r3
   11fae:	add.w	r0, r7, #88	; 0x58
   11fb2:	str	r3, [r7, #44]	; 0x2c
   11fb4:	mov	sl, r4
   11fb6:	bl	9c1c <memset>
   11fba:	str	r4, [r7, #64]	; 0x40
   11fbc:	str	r4, [r7, #36]	; 0x24
   11fbe:	str	r4, [r7, #56]	; 0x38
   11fc0:	str	r4, [r7, #68]	; 0x44
   11fc2:	ldr	r3, [pc, #524]	; (121d0 <__ssvfscanf_r+0x25c>)
   11fc4:	ldr.w	r4, [r3, #228]	; 0xe4
   11fc8:	bl	e6fc <__locale_mb_cur_max>
   11fcc:	add.w	r2, r7, #88	; 0x58
   11fd0:	mov	r3, r0
   11fd2:	str	r2, [sp, #0]
   11fd4:	add.w	r1, r7, #84	; 0x54
   11fd8:	ldr	r2, [r7, #76]	; 0x4c
   11fda:	mov	r0, r9
   11fdc:	blx	r4
   11fde:	subs	r5, r0, #0
   11fe0:	ldr	r3, [r7, #76]	; 0x4c
   11fe2:	blt.n	1204c <__ssvfscanf_r+0xd8>
   11fe4:	add	r3, r5
   11fe6:	str	r3, [r7, #76]	; 0x4c
   11fe8:	ldr	r3, [r7, #84]	; 0x54
   11fea:	mov	r6, r5
   11fec:	cmp	r3, #0
   11fee:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   11ff2:	cmp	r5, #1
   11ff4:	beq.n	12068 <__ssvfscanf_r+0xf4>
   11ff6:	cmp	r3, #37	; 0x25
   11ff8:	beq.n	1207c <__ssvfscanf_r+0x108>
   11ffa:	cmp	r5, #0
   11ffc:	beq.n	11fc2 <__ssvfscanf_r+0x4e>
   11ffe:	ldr	r3, [r7, #76]	; 0x4c
   12000:	subs	r6, r3, r6
   12002:	ldr.w	r3, [fp, #4]
   12006:	subs	r4, r6, #1
   12008:	cmp	r3, #0
   1200a:	ble.w	1213e <__ssvfscanf_r+0x1ca>
   1200e:	ldr.w	r1, [fp]
   12012:	ldrb.w	ip, [r4, #1]
   12016:	ldrb.w	lr, [r1]
   1201a:	adds	r3, r4, #2
   1201c:	add.w	r0, sl, r3
   12020:	cmp	lr, ip
   12022:	add.w	r1, r1, #1
   12026:	sub.w	r2, r3, r6
   1202a:	add.w	r4, r4, #1
   1202e:	sub.w	r0, r0, r6
   12032:	bne.w	1215e <__ssvfscanf_r+0x1ea>
   12036:	ldr.w	r3, [fp, #4]
   1203a:	str.w	r1, [fp]
   1203e:	subs	r3, #1
   12040:	cmp	r2, r5
   12042:	str.w	r3, [fp, #4]
   12046:	blt.n	12008 <__ssvfscanf_r+0x94>
   12048:	mov	sl, r0
   1204a:	b.n	11fc2 <__ssvfscanf_r+0x4e>
   1204c:	adds	r3, #1
   1204e:	str	r3, [r7, #76]	; 0x4c
   12050:	movs	r2, #8
   12052:	movw	r3, #65533	; 0xfffd
   12056:	movs	r1, #0
   12058:	add.w	r0, r7, #88	; 0x58
   1205c:	str	r3, [r7, #84]	; 0x54
   1205e:	bl	9c1c <memset>
   12062:	ldr	r3, [r7, #84]	; 0x54
   12064:	cmp	r3, #0
   12066:	beq.n	1215e <__ssvfscanf_r+0x1ea>
   12068:	ldr	r6, [pc, #360]	; (121d4 <__ssvfscanf_r+0x260>)
   1206a:	ldrb	r2, [r6, r3]
   1206c:	lsls	r0, r2, #28
   1206e:	bmi.w	12aaa <__ssvfscanf_r+0xb36>
   12072:	cmp	r3, #37	; 0x25
   12074:	bne.w	12184 <__ssvfscanf_r+0x210>
   12078:	movs	r5, #1
   1207a:	mov	r6, r5
   1207c:	ldr	r0, [r7, #76]	; 0x4c
   1207e:	movs	r4, #0
   12080:	ldrb	r2, [r0, #0]
   12082:	mov	r8, r4
   12084:	sub.w	r3, r2, #37	; 0x25
   12088:	adds	r1, r0, #1
   1208a:	cmp	r3, #85	; 0x55
   1208c:	bhi.n	1215e <__ssvfscanf_r+0x1ea>
   1208e:	tbh	[pc, r3, lsl #1]
   12092:	.short	0x070a
   12094:	.word	0x00660066
   12098:	.word	0x00660066
   1209c:	.word	0x00660701
   120a0:	.word	0x00660066
   120a4:	.word	0x00660066
   120a8:	.word	0x060c060c
   120ac:	.word	0x060c060c
   120b0:	.word	0x060c060c
   120b4:	.word	0x060c060c
   120b8:	.word	0x060c060c
   120bc:	.word	0x00660066
   120c0:	.word	0x00660066
   120c4:	.word	0x00660066
   120c8:	.word	0x06180066
   120cc:	.word	0x048e0066
   120d0:	.word	0x061804c9
   120d4:	.word	0x06180618
   120d8:	.word	0x00660066
   120dc:	.word	0x00660066
   120e0:	.word	0x00660082
   120e4:	.word	0x04bf0066
   120e8:	.word	0x00660066
   120ec:	.word	0x00890066
   120f0:	.word	0x00660066
   120f4:	.word	0x00660066
   120f8:	.word	0x0066066b
   120fc:	.word	0x06dd0066
   12100:	.word	0x00660066
   12104:	.word	0x00660066
   12108:	.word	0x06180066
   1210c:	.word	0x04900066
   12110:	.word	0x061804cb
   12114:	.word	0x06180618
   12118:	.word	0x06d206be
   1211c:	.word	0x00660082
   12120:	.word	0x06f306e7
   12124:	.word	0x04c106ac
   12128:	.word	0x006606da
   1212c:	.word	0x008b0066
   12130:	.word	0x06ca007d
   12134:	.word	0x00660066
   12138:	.word	0x0066066b
   1213c:	.short	0x007d
   1213e:	mov	r1, fp
   12140:	mov	r0, r9
   12142:	bl	152c8 <__ssrefill_r>
   12146:	cmp	r0, #0
   12148:	beq.w	1200e <__ssvfscanf_r+0x9a>
   1214c:	ldr	r3, [r7, #68]	; 0x44
   1214e:	cmp	r3, #0
   12150:	beq.w	131f8 <__ssvfscanf_r+0x1284>
   12154:	ldrh.w	r3, [fp, #12]
   12158:	lsls	r2, r3, #25
   1215a:	bmi.w	131f8 <__ssvfscanf_r+0x1284>
   1215e:	ldr	r3, [r7, #64]	; 0x40
   12160:	cbz	r3, 12174 <__ssvfscanf_r+0x200>
   12162:	ldr	r3, [r7, #64]	; 0x40
   12164:	ldr.w	r8, [r3]
   12168:	cmp.w	r8, #0
   1216c:	beq.n	12174 <__ssvfscanf_r+0x200>
   1216e:	mov	r0, r8
   12170:	bl	c670 <free>
   12174:	ldr	r0, [r7, #68]	; 0x44
   12176:	add.w	r7, r7, #724	; 0x2d4
   1217a:	mov	sp, r7
   1217c:	vpop	{d8}
   12180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12184:	ldr	r3, [r7, #76]	; 0x4c
   12186:	movs	r5, #1
   12188:	subs	r6, r3, #1
   1218a:	b.n	12002 <__ssvfscanf_r+0x8e>
   1218c:	lsls	r3, r4, #28
   1218e:	bne.n	1215e <__ssvfscanf_r+0x1ea>
   12190:	ldrb	r2, [r0, #1]
   12192:	mov	r0, r1
   12194:	b.n	12084 <__ssvfscanf_r+0x110>
   12196:	lsls	r2, r4, #28
   12198:	bne.n	1215e <__ssvfscanf_r+0x1ea>
   1219a:	ldrb	r2, [r0, #1]
   1219c:	orr.w	r4, r4, #2
   121a0:	mov	r0, r1
   121a2:	b.n	12084 <__ssvfscanf_r+0x110>
   121a4:	orr.w	r4, r4, #1
   121a8:	str	r1, [r7, #76]	; 0x4c
   121aa:	movs	r5, #2
   121ac:	ldr.w	r3, [fp, #4]
   121b0:	cmp	r3, #0
   121b2:	ble.w	129c6 <__ssvfscanf_r+0xa52>
   121b6:	lsls	r0, r4, #25
   121b8:	bpl.w	129da <__ssvfscanf_r+0xa66>
   121bc:	subs	r3, r5, #1
   121be:	cmp	r3, #3
   121c0:	bhi.w	1339a <__ssvfscanf_r+0x1426>
   121c4:	tbh	[pc, r3, lsl #1]
   121c8:	.word	0x01f1027b
   121cc:	.word	0x0008014b
   121d0:	.word	0x20008d84
   121d4:	.word	0x20000825
   121d8:	mov	r0, r9
   121da:	bl	13afc <_localeconv_r>
   121de:	ldr	r3, [r0, #0]
   121e0:	str	r3, [r7, #32]
   121e2:	add.w	r3, r8, #4294967295
   121e6:	cmp.w	r3, #348	; 0x15c
   121ea:	bls.w	12ca2 <__ssvfscanf_r+0xd2e>
   121ee:	mvn.w	r5, #348	; 0x15c
   121f2:	add.w	r3, r8, r5
   121f6:	str	r3, [r7, #16]
   121f8:	movw	r8, #349	; 0x15d
   121fc:	movs	r6, #0
   121fe:	add.w	r3, r7, #368	; 0x170
   12202:	vmov	s16, r9
   12206:	strd	r6, r6, [r7, #20]
   1220a:	str	r6, [r7, #60]	; 0x3c
   1220c:	str	r6, [r7, #52]	; 0x34
   1220e:	str	r6, [r7, #28]
   12210:	str	r6, [r7, #72]	; 0x48
   12212:	orr.w	r4, r4, #1920	; 0x780
   12216:	str	r3, [r7, #40]	; 0x28
   12218:	mov	r5, r3
   1221a:	mov	r6, r8
   1221c:	ldr.w	r1, [fp]
   12220:	ldrb	r2, [r1, #0]
   12222:	sub.w	r3, r2, #43	; 0x2b
   12226:	cmp	r3, #78	; 0x4e
   12228:	bhi.n	122cc <__ssvfscanf_r+0x358>
   1222a:	tbh	[pc, r3, lsl #1]
   1222e:	.short	0x037e
   12230:	.word	0x037e004f
   12234:	.word	0x004f004f
   12238:	.word	0x00a600a3
   1223c:	.word	0x00a600a6
   12240:	.word	0x00a600a6
   12244:	.word	0x00a600a6
   12248:	.word	0x00a600a6
   1224c:	.word	0x004f004f
   12250:	.word	0x004f004f
   12254:	.word	0x004f004f
   12258:	.word	0x0374004f
   1225c:	.word	0x030b030b
   12260:	.word	0x039e030b
   12264:	.word	0x004f0394
   12268:	.word	0x0384004f
   1226c:	.word	0x004f004f
   12270:	.word	0x004f004f
   12274:	.word	0x004f035d
   12278:	.word	0x004f033a
   1227c:	.word	0x004f004f
   12280:	.word	0x004f0333
   12284:	.word	0x004f004f
   12288:	.word	0x036d031e
   1228c:	.word	0x004f004f
   12290:	.word	0x004f004f
   12294:	.word	0x004f004f
   12298:	.word	0x0374004f
   1229c:	.word	0x030b030b
   122a0:	.word	0x039e030b
   122a4:	.word	0x004f0394
   122a8:	.word	0x0384004f
   122ac:	.word	0x004f004f
   122b0:	.word	0x004f004f
   122b4:	.word	0x004f035d
   122b8:	.word	0x004f033a
   122bc:	.word	0x004f004f
   122c0:	.word	0x004f0333
   122c4:	.word	0x004f004f
   122c8:	.word	0x036d031e
   122cc:	lsls	r0, r4, #22
   122ce:	bpl.n	123b0 <__ssvfscanf_r+0x43c>
   122d0:	ldr	r0, [r7, #32]
   122d2:	ldrb	r3, [r0, #0]
   122d4:	cmp	r3, r2
   122d6:	bne.n	123b0 <__ssvfscanf_r+0x43c>
   122d8:	strd	r4, r5, [r7, #8]
   122dc:	str	r6, [r7, #4]
   122de:	mov	r9, r0
   122e0:	vmov	r6, s16
   122e4:	mov.w	r8, #0
   122e8:	mov	r4, fp
   122ea:	b.n	122fc <__ssvfscanf_r+0x388>
   122ec:	str	r1, [r4, #0]
   122ee:	ldrb.w	lr, [r1]
   122f2:	ldrb.w	r0, [r9]
   122f6:	cmp	lr, r0
   122f8:	bne.n	12334 <__ssvfscanf_r+0x3c0>
   122fa:	mov	sl, fp
   122fc:	ldrb.w	r0, [r9, #1]!
   12300:	mov	r5, r8
   12302:	add.w	fp, sl, #1
   12306:	adds	r1, #1
   12308:	add.w	r8, r8, #1
   1230c:	cmp	r0, #0
   1230e:	beq.w	12fda <__ssvfscanf_r+0x1066>
   12312:	ldr	r0, [r4, #4]
   12314:	subs	r0, #1
   12316:	cmp	r0, #0
   12318:	str	r0, [r4, #4]
   1231a:	bgt.n	122ec <__ssvfscanf_r+0x378>
   1231c:	mov	r1, r4
   1231e:	mov	r0, r6
   12320:	bl	152c8 <__ssrefill_r>
   12324:	cbnz	r0, 12334 <__ssvfscanf_r+0x3c0>
   12326:	ldr	r1, [r4, #0]
   12328:	ldrb.w	r0, [r9]
   1232c:	ldrb.w	lr, [r1]
   12330:	cmp	lr, r0
   12332:	beq.n	122fa <__ssvfscanf_r+0x386>
   12334:	mov	fp, r4
   12336:	ldr	r2, [r7, #32]
   12338:	ldr	r4, [r7, #8]
   1233a:	str	r5, [r7, #16]
   1233c:	mov	r3, r5
   1233e:	mov	r9, r6
   12340:	ldr	r6, [r7, #72]	; 0x48
   12342:	ldr	r5, [r7, #12]
   12344:	str	r5, [r7, #72]	; 0x48
   12346:	adds	r3, #1
   12348:	mov	r5, fp
   1234a:	add.w	r8, r2, r3
   1234e:	mov	fp, r6
   12350:	mov	r6, r4
   12352:	mov	r4, r2
   12354:	ldrb.w	r1, [r8, #-1]!
   12358:	mov	r2, r5
   1235a:	mov	r0, r9
   1235c:	bl	15248 <_sungetc_r>
   12360:	cmp	r4, r8
   12362:	bne.n	12354 <__ssvfscanf_r+0x3e0>
   12364:	ldr	r3, [r7, #16]
   12366:	mov	r4, r6
   12368:	sub.w	sl, sl, r3
   1236c:	mov	r6, fp
   1236e:	mov	fp, r5
   12370:	ldr	r5, [r7, #72]	; 0x48
   12372:	b.n	123b6 <__ssvfscanf_r+0x442>
   12374:	lsls	r0, r4, #23
   12376:	bmi.w	12d7c <__ssvfscanf_r+0xe08>
   1237a:	ldr	r3, [r7, #72]	; 0x48
   1237c:	ldr	r1, [r7, #60]	; 0x3c
   1237e:	cmn	r1, r3
   12380:	bne.n	123b0 <__ssvfscanf_r+0x43c>
   12382:	bic.w	r4, r4, #384	; 0x180
   12386:	strb.w	r2, [r5], #1
   1238a:	subs	r6, #1
   1238c:	ldr.w	r3, [fp, #4]
   12390:	subs	r3, #1
   12392:	cmp	r3, #0
   12394:	add.w	sl, sl, #1
   12398:	str.w	r3, [fp, #4]
   1239c:	ble.w	12a7e <__ssvfscanf_r+0xb0a>
   123a0:	ldr.w	r3, [fp]
   123a4:	adds	r3, #1
   123a6:	str.w	r3, [fp]
   123aa:	cmp	r6, #0
   123ac:	bne.w	1221c <__ssvfscanf_r+0x2a8>
   123b0:	ldr	r6, [r7, #72]	; 0x48
   123b2:	vmov	r9, s16
   123b6:	ldr	r3, [r7, #52]	; 0x34
   123b8:	cmp	r3, #0
   123ba:	bne.w	12976 <__ssvfscanf_r+0xa02>
   123be:	ldr	r3, [r7, #60]	; 0x3c
   123c0:	subs	r3, #1
   123c2:	cmp	r3, #1
   123c4:	bls.w	133f4 <__ssvfscanf_r+0x1480>
   123c8:	subs	r3, r6, #1
   123ca:	cmp	r3, #6
   123cc:	bls.w	1301e <__ssvfscanf_r+0x10aa>
   123d0:	lsls	r3, r4, #23
   123d2:	bpl.n	1240c <__ssvfscanf_r+0x498>
   123d4:	lsls	r6, r4, #21
   123d6:	bmi.w	13544 <__ssvfscanf_r+0x15d0>
   123da:	ldrb.w	r1, [r5, #-1]
   123de:	cmp	r1, #101	; 0x65
   123e0:	add.w	r3, r5, #4294967295
   123e4:	add.w	r6, sl, #4294967295
   123e8:	beq.n	12400 <__ssvfscanf_r+0x48c>
   123ea:	cmp	r1, #69	; 0x45
   123ec:	beq.n	12400 <__ssvfscanf_r+0x48c>
   123ee:	mov	r2, fp
   123f0:	mov	r0, r9
   123f2:	bl	15248 <_sungetc_r>
   123f6:	ldrb.w	r1, [r5, #-2]
   123fa:	sub.w	r6, sl, #2
   123fe:	subs	r3, r5, #2
   12400:	mov	r2, fp
   12402:	mov	r0, r9
   12404:	mov	sl, r6
   12406:	mov	r5, r3
   12408:	bl	15248 <_sungetc_r>
   1240c:	ands.w	r2, r4, #16
   12410:	bne.w	11fc2 <__ssvfscanf_r+0x4e>
   12414:	and.w	r3, r4, #1536	; 0x600
   12418:	cmp.w	r3, #1024	; 0x400
   1241c:	strb	r2, [r5, #0]
   1241e:	beq.w	12dc6 <__ssvfscanf_r+0xe52>
   12422:	ldr	r3, [r7, #24]
   12424:	cmp	r3, #0
   12426:	bne.w	13282 <__ssvfscanf_r+0x130e>
   1242a:	mov	r0, r9
   1242c:	ldr	r1, [r7, #40]	; 0x28
   1242e:	movs	r2, #0
   12430:	bl	de58 <_strtod_r>
   12434:	lsls	r0, r4, #31
   12436:	ldr	r3, [r7, #48]	; 0x30
   12438:	bmi.w	12fce <__ssvfscanf_r+0x105a>
   1243c:	lsls	r1, r4, #30
   1243e:	bmi.w	12fce <__ssvfscanf_r+0x105a>
   12442:	vcmp.f64	d0, d0
   12446:	vmrs	APSR_nzcv, fpscr
   1244a:	ldr.w	r4, [r3], #4
   1244e:	bvs.w	1323a <__ssvfscanf_r+0x12c6>
   12452:	vcvt.f32.f64	s0, d0
   12456:	str	r3, [r7, #48]	; 0x30
   12458:	vstr	s0, [r4]
   1245c:	b.n	12ba4 <__ssvfscanf_r+0xc30>
   1245e:	add.w	r3, r8, #4294967295
   12462:	cmp.w	r3, #348	; 0x15c
   12466:	bls.w	12bae <__ssvfscanf_r+0xc3a>
   1246a:	mvn.w	r2, #348	; 0x15c
   1246e:	add.w	r3, r8, r2
   12472:	str	r3, [r7, #60]	; 0x3c
   12474:	movw	r8, #349	; 0x15d
   12478:	add.w	r3, r7, #368	; 0x170
   1247c:	movs	r2, #0
   1247e:	ldr	r6, [r7, #56]	; 0x38
   12480:	str	r3, [r7, #40]	; 0x28
   12482:	mov	r1, fp
   12484:	orr.w	r4, r4, #3456	; 0xd80
   12488:	mov	fp, sl
   1248a:	mov	r5, r3
   1248c:	mov	sl, r2
   1248e:	ldr	r2, [r1, #0]
   12490:	ldrb	r0, [r2, #0]
   12492:	sub.w	r3, r0, #43	; 0x2b
   12496:	cmp	r3, #77	; 0x4d
   12498:	bhi.n	1255c <__ssvfscanf_r+0x5e8>
   1249a:	tbh	[pc, r3, lsl #1]
   1249e:	.short	0x0282
   124a0:	.word	0x0282005f
   124a4:	.word	0x005f005f
   124a8:	.word	0x01e002cd
   124ac:	.word	0x01e001e0
   124b0:	.word	0x01e001e0
   124b4:	.word	0x01e001e0
   124b8:	.word	0x026f026f
   124bc:	.word	0x005f005f
   124c0:	.word	0x005f005f
   124c4:	.word	0x005f005f
   124c8:	.word	0x004e005f
   124cc:	.word	0x004e004e
   124d0:	.word	0x004e004e
   124d4:	.word	0x005f004e
   124d8:	.word	0x005f005f
   124dc:	.word	0x005f005f
   124e0:	.word	0x005f005f
   124e4:	.word	0x005f005f
   124e8:	.word	0x005f005f
   124ec:	.word	0x005f005f
   124f0:	.word	0x005f005f
   124f4:	.word	0x005f005f
   124f8:	.word	0x005f0276
   124fc:	.word	0x005f005f
   12500:	.word	0x005f005f
   12504:	.word	0x005f005f
   12508:	.word	0x004e005f
   1250c:	.word	0x004e004e
   12510:	.word	0x004e004e
   12514:	.word	0x005f004e
   12518:	.word	0x005f005f
   1251c:	.word	0x005f005f
   12520:	.word	0x005f005f
   12524:	.word	0x005f005f
   12528:	.word	0x005f005f
   1252c:	.word	0x005f005f
   12530:	.word	0x005f005f
   12534:	.word	0x005f005f
   12538:	.short	0x0276
   1253a:	cmp	r6, #10
   1253c:	ble.n	1255c <__ssvfscanf_r+0x5e8>
   1253e:	bic.w	r4, r4, #2944	; 0xb80
   12542:	ldr	r3, [r1, #4]
   12544:	strb.w	r0, [r5], #1
   12548:	subs	r3, #1
   1254a:	cmp	r3, #0
   1254c:	str	r3, [r1, #4]
   1254e:	ble.w	12a6c <__ssvfscanf_r+0xaf8>
   12552:	adds	r2, #1
   12554:	str	r2, [r1, #0]
   12556:	subs.w	r8, r8, #1
   1255a:	bne.n	1248e <__ssvfscanf_r+0x51a>
   1255c:	lsls	r0, r4, #23
   1255e:	mov	r8, sl
   12560:	str	r6, [r7, #56]	; 0x38
   12562:	mov	sl, fp
   12564:	mov	fp, r1
   12566:	bpl.n	12578 <__ssvfscanf_r+0x604>
   12568:	ldr	r3, [r7, #40]	; 0x28
   1256a:	cmp	r5, r3
   1256c:	bhi.w	12db4 <__ssvfscanf_r+0xe40>
   12570:	ldr	r3, [r7, #40]	; 0x28
   12572:	cmp	r5, r3
   12574:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   12578:	ands.w	r2, r4, #16
   1257c:	bne.n	125a0 <__ssvfscanf_r+0x62c>
   1257e:	ldr	r1, [r7, #40]	; 0x28
   12580:	ldr	r3, [r7, #56]	; 0x38
   12582:	ldr	r6, [r7, #44]	; 0x2c
   12584:	strb	r2, [r5, #0]
   12586:	mov	r0, r9
   12588:	blx	r6
   1258a:	lsls	r1, r4, #26
   1258c:	bpl.w	12da0 <__ssvfscanf_r+0xe2c>
   12590:	ldr	r3, [r7, #48]	; 0x30
   12592:	ldr.w	r2, [r3], #4
   12596:	str	r0, [r2, #0]
   12598:	str	r3, [r7, #48]	; 0x30
   1259a:	ldr	r3, [r7, #68]	; 0x44
   1259c:	adds	r3, #1
   1259e:	str	r3, [r7, #68]	; 0x44
   125a0:	ldr	r3, [r7, #40]	; 0x28
   125a2:	subs	r5, r5, r3
   125a4:	add	r5, r8
   125a6:	add	sl, r5
   125a8:	b.n	11fc2 <__ssvfscanf_r+0x4e>
   125aa:	cmp.w	r8, #0
   125ae:	it	eq
   125b0:	moveq.w	r8, #4294967295
   125b4:	lsls	r0, r4, #31
   125b6:	bpl.w	12ae4 <__ssvfscanf_r+0xb70>
   125ba:	ands.w	r3, r4, #16
   125be:	str	r3, [r7, #52]	; 0x34
   125c0:	bne.w	12eac <__ssvfscanf_r+0xf38>
   125c4:	lsls	r1, r4, #24
   125c6:	bpl.w	13296 <__ssvfscanf_r+0x1322>
   125ca:	ldr	r4, [r7, #48]	; 0x30
   125cc:	ldr.w	r3, [r4], #4
   125d0:	str	r3, [r7, #60]	; 0x3c
   125d2:	cmp	r3, #0
   125d4:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   125d8:	movs	r0, #128	; 0x80
   125da:	bl	c660 <malloc>
   125de:	str	r0, [r7, #72]	; 0x48
   125e0:	cmp	r0, #0
   125e2:	beq.w	134d6 <__ssvfscanf_r+0x1562>
   125e6:	ldr	r3, [r7, #60]	; 0x3c
   125e8:	ldr	r2, [r7, #72]	; 0x48
   125ea:	str	r2, [r3, #0]
   125ec:	ldr	r2, [r7, #64]	; 0x40
   125ee:	ldrh	r5, [r2, #6]
   125f0:	ldrh	r3, [r2, #4]
   125f2:	cmp	r5, r3
   125f4:	bcs.w	1309c <__ssvfscanf_r+0x1128>
   125f8:	ldr	r0, [r2, #0]
   125fa:	ldr	r3, [r7, #60]	; 0x3c
   125fc:	str.w	r3, [r0, r5, lsl #2]
   12600:	ldr	r3, [r7, #64]	; 0x40
   12602:	str	r4, [r7, #48]	; 0x30
   12604:	adds	r5, #1
   12606:	strh	r5, [r3, #6]
   12608:	ldr	r3, [r7, #72]	; 0x48
   1260a:	str	r3, [r7, #40]	; 0x28
   1260c:	movs	r3, #32
   1260e:	str	r3, [r7, #32]
   12610:	ldr.w	r3, [fp]
   12614:	ldr	r6, [pc, #708]	; (128dc <__ssvfscanf_r+0x968>)
   12616:	ldrb	r3, [r3, #0]
   12618:	ldrb	r3, [r6, r3]
   1261a:	ands.w	r3, r3, #8
   1261e:	bne.w	12f98 <__ssvfscanf_r+0x1024>
   12622:	ldr	r4, [r7, #36]	; 0x24
   12624:	str	r6, [r7, #36]	; 0x24
   12626:	mov	r5, r3
   12628:	bl	e6fc <__locale_mb_cur_max>
   1262c:	cmp	r0, r5
   1262e:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   12632:	ldrd	r3, r2, [fp]
   12636:	add.w	r0, r7, #368	; 0x170
   1263a:	ldrb.w	r1, [r3], #1
   1263e:	strb	r1, [r0, r5]
   12640:	subs	r2, #1
   12642:	cmp	r4, #3
   12644:	strd	r3, r2, [fp]
   12648:	add.w	r5, r5, #1
   1264c:	add.w	r6, r7, #104	; 0x68
   12650:	bne.n	12658 <__ssvfscanf_r+0x6e4>
   12652:	ldr	r3, [r6, #0]
   12654:	cmp	r3, #4
   12656:	beq.n	12662 <__ssvfscanf_r+0x6ee>
   12658:	movs	r2, #8
   1265a:	movs	r1, #0
   1265c:	mov	r0, r6
   1265e:	bl	9c1c <memset>
   12662:	add.w	r2, r7, #368	; 0x170
   12666:	ldr	r1, [r7, #72]	; 0x48
   12668:	str	r6, [sp, #0]
   1266a:	mov	r3, r5
   1266c:	mov	r0, r9
   1266e:	bl	14ea0 <_mbrtowc_r>
   12672:	adds	r2, r0, #1
   12674:	mov	r4, r0
   12676:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   1267a:	cmp	r0, #0
   1267c:	bne.w	12f70 <__ssvfscanf_r+0xffc>
   12680:	ldr	r3, [r7, #72]	; 0x48
   12682:	str	r0, [r3, #0]
   12684:	bl	14f58 <iswspace>
   12688:	cmp	r0, #0
   1268a:	bne.w	13346 <__ssvfscanf_r+0x13d2>
   1268e:	add	sl, r5
   12690:	add.w	r8, r8, #4294967295
   12694:	ldr	r3, [r7, #52]	; 0x34
   12696:	cmp	r3, #0
   12698:	bne.w	13302 <__ssvfscanf_r+0x138e>
   1269c:	ldr	r3, [r7, #72]	; 0x48
   1269e:	ldr	r2, [r7, #60]	; 0x3c
   126a0:	adds	r3, #4
   126a2:	str	r3, [r7, #72]	; 0x48
   126a4:	cmp	r2, #0
   126a6:	beq.w	13302 <__ssvfscanf_r+0x138e>
   126aa:	ldr	r2, [r7, #40]	; 0x28
   126ac:	subs	r5, r3, r2
   126ae:	ldr	r3, [r7, #32]
   126b0:	cmp.w	r3, r5, asr #2
   126b4:	bls.w	13564 <__ssvfscanf_r+0x15f0>
   126b8:	ldr	r5, [r7, #52]	; 0x34
   126ba:	b.w	12f76 <__ssvfscanf_r+0x1002>
   126be:	cmp.w	r8, #0
   126c2:	it	eq
   126c4:	moveq.w	r8, #4294967295
   126c8:	lsls	r0, r4, #31
   126ca:	bpl.w	12bc4 <__ssvfscanf_r+0xc50>
   126ce:	ands.w	r3, r4, #16
   126d2:	str	r3, [r7, #40]	; 0x28
   126d4:	bne.w	12ebe <__ssvfscanf_r+0xf4a>
   126d8:	lsls	r1, r4, #24
   126da:	bpl.w	132b8 <__ssvfscanf_r+0x1344>
   126de:	ldr	r6, [r7, #48]	; 0x30
   126e0:	ldr.w	r3, [r6], #4
   126e4:	str	r3, [r7, #32]
   126e6:	cmp	r3, #0
   126e8:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   126ec:	movs	r0, #128	; 0x80
   126ee:	bl	c660 <malloc>
   126f2:	mov	r4, r0
   126f4:	cmp	r0, #0
   126f6:	beq.w	134d6 <__ssvfscanf_r+0x1562>
   126fa:	ldr	r3, [r7, #32]
   126fc:	ldr	r2, [r7, #64]	; 0x40
   126fe:	str	r0, [r3, #0]
   12700:	ldrh	r5, [r2, #6]
   12702:	ldrh	r3, [r2, #4]
   12704:	cmp	r5, r3
   12706:	bcs.w	130c4 <__ssvfscanf_r+0x1150>
   1270a:	ldr	r0, [r2, #0]
   1270c:	ldr	r3, [r7, #32]
   1270e:	str.w	r3, [r0, r5, lsl #2]
   12712:	ldr	r3, [r7, #64]	; 0x40
   12714:	str	r6, [r7, #48]	; 0x30
   12716:	adds	r5, #1
   12718:	strh	r5, [r3, #6]
   1271a:	movs	r3, #32
   1271c:	str	r4, [r7, #28]
   1271e:	str	r3, [r7, #24]
   12720:	ldr	r6, [r7, #36]	; 0x24
   12722:	str.w	sl, [r7, #60]	; 0x3c
   12726:	movs	r5, #0
   12728:	mov	sl, r8
   1272a:	mov	r8, r4
   1272c:	bl	e6fc <__locale_mb_cur_max>
   12730:	cmp	r0, r5
   12732:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   12736:	ldrd	r3, r2, [fp]
   1273a:	ldrb.w	r1, [r3], #1
   1273e:	subs	r2, #1
   12740:	add.w	r0, r7, #368	; 0x170
   12744:	strd	r3, r2, [fp]
   12748:	cmp	r6, #3
   1274a:	add.w	r3, r5, #1
   1274e:	strb	r1, [r0, r5]
   12750:	str	r3, [r7, #72]	; 0x48
   12752:	add.w	r4, r7, #96	; 0x60
   12756:	bne.n	1275e <__ssvfscanf_r+0x7ea>
   12758:	ldr	r3, [r4, #0]
   1275a:	cmp	r3, #4
   1275c:	beq.n	12768 <__ssvfscanf_r+0x7f4>
   1275e:	movs	r2, #8
   12760:	movs	r1, #0
   12762:	mov	r0, r4
   12764:	bl	9c1c <memset>
   12768:	add.w	r2, r7, #368	; 0x170
   1276c:	ldr	r3, [r7, #72]	; 0x48
   1276e:	str	r4, [sp, #0]
   12770:	mov	r1, r8
   12772:	mov	r0, r9
   12774:	bl	14ea0 <_mbrtowc_r>
   12778:	adds	r2, r0, #1
   1277a:	mov	r6, r0
   1277c:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   12780:	cmp	r0, #0
   12782:	bne.w	12d1a <__ssvfscanf_r+0xda6>
   12786:	str.w	r0, [r8]
   1278a:	mov	r5, r0
   1278c:	add.w	r3, r7, #104	; 0x68
   12790:	movs	r2, #8
   12792:	movs	r1, #0
   12794:	mov	r0, r3
   12796:	str	r3, [r7, #52]	; 0x34
   12798:	bl	9c1c <memset>
   1279c:	ldr	r1, [pc, #320]	; (128e0 <__ssvfscanf_r+0x96c>)
   1279e:	ldr	r3, [r7, #52]	; 0x34
   127a0:	ldr.w	r1, [r1, #224]	; 0xe0
   127a4:	mov	r2, r5
   127a6:	mov	r0, r9
   127a8:	mov	r5, r1
   127aa:	add.w	r1, r7, #80	; 0x50
   127ae:	blx	r5
   127b0:	cmp	r0, #1
   127b2:	beq.w	12f60 <__ssvfscanf_r+0xfec>
   127b6:	movs	r2, #0
   127b8:	add.w	r3, r7, #112	; 0x70
   127bc:	ldrb	r3, [r3, r2]
   127be:	cmp	r3, #0
   127c0:	beq.w	13306 <__ssvfscanf_r+0x1392>
   127c4:	ldr	r3, [r7, #60]	; 0x3c
   127c6:	ldr	r2, [r7, #72]	; 0x48
   127c8:	cmp	r6, #3
   127ca:	add	r3, r2
   127cc:	str	r3, [r7, #60]	; 0x3c
   127ce:	beq.w	12f66 <__ssvfscanf_r+0xff2>
   127d2:	add.w	sl, sl, #4294967295
   127d6:	ldr	r3, [r7, #40]	; 0x28
   127d8:	cbnz	r3, 127f2 <__ssvfscanf_r+0x87e>
   127da:	ldr	r3, [r7, #32]
   127dc:	add.w	r8, r8, #4
   127e0:	cbz	r3, 127f2 <__ssvfscanf_r+0x87e>
   127e2:	ldr	r3, [r7, #28]
   127e4:	sub.w	r4, r8, r3
   127e8:	ldr	r3, [r7, #24]
   127ea:	cmp.w	r3, r4, asr #2
   127ee:	bls.w	12ffc <__ssvfscanf_r+0x1088>
   127f2:	ldr.w	r3, [fp, #4]
   127f6:	cmp	r3, #0
   127f8:	mov.w	r5, #0
   127fc:	ble.w	12d2c <__ssvfscanf_r+0xdb8>
   12800:	cmp.w	sl, #0
   12804:	bne.n	1272c <__ssvfscanf_r+0x7b8>
   12806:	ldr.w	sl, [r7, #60]	; 0x3c
   1280a:	str	r6, [r7, #36]	; 0x24
   1280c:	mov	r4, r8
   1280e:	ldr	r3, [r7, #40]	; 0x28
   12810:	cmp	r3, #0
   12812:	bne.w	11fc2 <__ssvfscanf_r+0x4e>
   12816:	str	r3, [r4, #0]
   12818:	ldr	r3, [r7, #32]
   1281a:	cmp	r3, #0
   1281c:	beq.w	12ba4 <__ssvfscanf_r+0xc30>
   12820:	ldr	r3, [r7, #28]
   12822:	ldr	r2, [r7, #24]
   12824:	subs	r1, r4, r3
   12826:	asrs	r3, r1, #2
   12828:	adds	r3, #1
   1282a:	cmp	r2, r3
   1282c:	bls.w	12ba4 <__ssvfscanf_r+0xc30>
   12830:	ldr	r4, [r7, #32]
   12832:	adds	r1, #4
   12834:	ldr	r0, [r4, #0]
   12836:	bl	cbf8 <realloc>
   1283a:	cmp	r0, #0
   1283c:	beq.w	12ba4 <__ssvfscanf_r+0xc30>
   12840:	str	r0, [r4, #0]
   12842:	b.n	12ba4 <__ssvfscanf_r+0xc30>
   12844:	lsls	r1, r4, #20
   12846:	bpl.w	123b0 <__ssvfscanf_r+0x43c>
   1284a:	ldr	r3, [r7, #60]	; 0x3c
   1284c:	ldr	r1, [r7, #72]	; 0x48
   1284e:	adds	r3, r3, r1
   12850:	bne.w	123b0 <__ssvfscanf_r+0x43c>
   12854:	str	r3, [r7, #72]	; 0x48
   12856:	bic.w	r4, r4, #384	; 0x180
   1285a:	str	r3, [r7, #60]	; 0x3c
   1285c:	b.n	12386 <__ssvfscanf_r+0x412>
   1285e:	ldr	r3, [pc, #132]	; (128e4 <__ssvfscanf_r+0x970>)
   12860:	bic.w	r4, r4, #2944	; 0xb80
   12864:	ldrsh.w	r6, [r3, r6, lsl #1]
   12868:	b.n	12542 <__ssvfscanf_r+0x5ce>
   1286a:	and.w	r3, r4, #2432	; 0x980
   1286e:	cmp.w	r3, #256	; 0x100
   12872:	bne.w	123b0 <__ssvfscanf_r+0x43c>
   12876:	ldr	r3, [r7, #52]	; 0x34
   12878:	cmp	r3, #1
   1287a:	bne.w	123b0 <__ssvfscanf_r+0x43c>
   1287e:	movs	r3, #48	; 0x30
   12880:	strb.w	r3, [r5], #1
   12884:	bic.w	r4, r4, #256	; 0x100
   12888:	movs	r3, #0
   1288a:	orr.w	r4, r4, #2048	; 0x800
   1288e:	subs	r6, #1
   12890:	str	r3, [r7, #52]	; 0x34
   12892:	b.n	12386 <__ssvfscanf_r+0x412>
   12894:	ldr	r3, [r7, #72]	; 0x48
   12896:	cmp	r3, #6
   12898:	bne.w	13384 <__ssvfscanf_r+0x1410>
   1289c:	movs	r3, #7
   1289e:	str	r3, [r7, #72]	; 0x48
   128a0:	b.n	12386 <__ssvfscanf_r+0x412>
   128a2:	lsls	r3, r4, #20
   128a4:	bpl.w	123b0 <__ssvfscanf_r+0x43c>
   128a8:	and.w	r3, r4, #1280	; 0x500
   128ac:	cmp.w	r3, #1024	; 0x400
   128b0:	beq.n	128be <__ssvfscanf_r+0x94a>
   128b2:	lsls	r1, r4, #21
   128b4:	bpl.w	123b0 <__ssvfscanf_r+0x43c>
   128b8:	ldr	r3, [r7, #52]	; 0x34
   128ba:	cmp	r3, #0
   128bc:	beq.n	1294e <__ssvfscanf_r+0x9da>
   128be:	lsls	r3, r4, #22
   128c0:	bmi.n	128cc <__ssvfscanf_r+0x958>
   128c2:	ldr	r3, [r7, #52]	; 0x34
   128c4:	ldr	r1, [r7, #28]
   128c6:	subs	r3, r3, r1
   128c8:	strd	r5, r3, [r7, #20]
   128cc:	bic.w	r4, r4, #3968	; 0xf80
   128d0:	movs	r3, #0
   128d2:	orr.w	r4, r4, #384	; 0x180
   128d6:	str	r3, [r7, #52]	; 0x34
   128d8:	b.n	12386 <__ssvfscanf_r+0x412>
   128da:	nop
   128dc:	.word	0x20000825
   128e0:	.word	0x20008d84
   128e4:	.word	0x20002454
   128e8:	ldr	r3, [r7, #60]	; 0x3c
   128ea:	cmp	r3, #0
   128ec:	beq.w	12cee <__ssvfscanf_r+0xd7a>
   128f0:	ldr	r3, [r7, #60]	; 0x3c
   128f2:	cmp	r3, #2
   128f4:	beq.w	13058 <__ssvfscanf_r+0x10e4>
   128f8:	ldr	r3, [r7, #72]	; 0x48
   128fa:	cmp	r3, #1
   128fc:	beq.w	12ce2 <__ssvfscanf_r+0xd6e>
   12900:	cmp	r3, #4
   12902:	beq.w	12ce2 <__ssvfscanf_r+0xd6e>
   12906:	b.n	123b0 <__ssvfscanf_r+0x43c>
   12908:	ldr	r3, [r7, #72]	; 0x48
   1290a:	cmp	r3, #7
   1290c:	bne.w	13384 <__ssvfscanf_r+0x1410>
   12910:	movs	r3, #8
   12912:	str	r3, [r7, #72]	; 0x48
   12914:	b.n	12386 <__ssvfscanf_r+0x412>
   12916:	lsls	r0, r4, #20
   12918:	bmi.w	12d0e <__ssvfscanf_r+0xd9a>
   1291c:	ldr	r3, [r7, #60]	; 0x3c
   1291e:	cmp	r3, #1
   12920:	bne.w	123b0 <__ssvfscanf_r+0x43c>
   12924:	movs	r3, #2
   12926:	str	r3, [r7, #60]	; 0x3c
   12928:	b.n	12386 <__ssvfscanf_r+0x412>
   1292a:	lsls	r3, r4, #24
   1292c:	bpl.w	123b0 <__ssvfscanf_r+0x43c>
   12930:	bic.w	r4, r4, #128	; 0x80
   12934:	b.n	12386 <__ssvfscanf_r+0x412>
   12936:	ldr	r3, [r7, #72]	; 0x48
   12938:	cmp	r3, #0
   1293a:	bne.w	12cd6 <__ssvfscanf_r+0xd62>
   1293e:	ldr	r3, [r7, #52]	; 0x34
   12940:	cbnz	r3, 12970 <__ssvfscanf_r+0x9fc>
   12942:	and.w	r3, r4, #1792	; 0x700
   12946:	cmp.w	r3, #1792	; 0x700
   1294a:	beq.w	1338e <__ssvfscanf_r+0x141a>
   1294e:	ldr	r6, [r7, #72]	; 0x48
   12950:	vmov	r9, s16
   12954:	b.n	123be <__ssvfscanf_r+0x44a>
   12956:	lsls	r1, r4, #20
   12958:	bmi.w	12cca <__ssvfscanf_r+0xd56>
   1295c:	ldr	r3, [r7, #72]	; 0x48
   1295e:	cmp	r3, #2
   12960:	bne.w	13384 <__ssvfscanf_r+0x1410>
   12964:	movs	r3, #3
   12966:	str	r3, [r7, #72]	; 0x48
   12968:	b.n	12386 <__ssvfscanf_r+0x412>
   1296a:	lsls	r0, r4, #20
   1296c:	bpl.n	128a8 <__ssvfscanf_r+0x934>
   1296e:	b.n	1284a <__ssvfscanf_r+0x8d6>
   12970:	ldr	r6, [r7, #72]	; 0x48
   12972:	vmov	r9, s16
   12976:	bic.w	r4, r4, #256	; 0x100
   1297a:	b.n	123be <__ssvfscanf_r+0x44a>
   1297c:	ldr	r3, [pc, #564]	; (12bb4 <__ssvfscanf_r+0xc40>)
   1297e:	ldrsh.w	r6, [r3, r6, lsl #1]
   12982:	cmp	r6, #8
   12984:	bgt.w	1253e <__ssvfscanf_r+0x5ca>
   12988:	b.n	1255c <__ssvfscanf_r+0x5e8>
   1298a:	and.w	r3, r4, #1536	; 0x600
   1298e:	cmp.w	r3, #512	; 0x200
   12992:	bne.w	1255c <__ssvfscanf_r+0x5e8>
   12996:	bic.w	r4, r4, #512	; 0x200
   1299a:	orr.w	r4, r4, #1280	; 0x500
   1299e:	movs	r6, #16
   129a0:	b.n	12542 <__ssvfscanf_r+0x5ce>
   129a2:	lsls	r3, r4, #24
   129a4:	bpl.w	1255c <__ssvfscanf_r+0x5e8>
   129a8:	bic.w	r4, r4, #128	; 0x80
   129ac:	b.n	12542 <__ssvfscanf_r+0x5ce>
   129ae:	orr.w	r4, r4, #1
   129b2:	ldr.w	r3, [fp, #4]
   129b6:	str	r1, [r7, #76]	; 0x4c
   129b8:	cmp	r3, #0
   129ba:	orr.w	r4, r4, #64	; 0x40
   129be:	mov.w	r5, #0
   129c2:	bgt.w	121b6 <__ssvfscanf_r+0x242>
   129c6:	mov	r1, fp
   129c8:	mov	r0, r9
   129ca:	bl	152c8 <__ssrefill_r>
   129ce:	cmp	r0, #0
   129d0:	bne.w	1214c <__ssvfscanf_r+0x1d8>
   129d4:	lsls	r0, r4, #25
   129d6:	bmi.w	121bc <__ssvfscanf_r+0x248>
   129da:	ldr.w	r2, [fp]
   129de:	ldr	r6, [pc, #472]	; (12bb8 <__ssvfscanf_r+0xc44>)
   129e0:	ldrb	r3, [r2, #0]
   129e2:	ldrb	r3, [r6, r3]
   129e4:	lsls	r1, r3, #28
   129e6:	bpl.w	121bc <__ssvfscanf_r+0x248>
   129ea:	ldr.w	r3, [fp, #4]
   129ee:	subs	r3, #1
   129f0:	cmp	r3, #0
   129f2:	add.w	sl, sl, #1
   129f6:	str.w	r3, [fp, #4]
   129fa:	add.w	r2, r2, #1
   129fe:	ble.n	12a96 <__ssvfscanf_r+0xb22>
   12a00:	str.w	r2, [fp]
   12a04:	ldrb	r3, [r2, #0]
   12a06:	ldrb	r3, [r6, r3]
   12a08:	lsls	r1, r3, #28
   12a0a:	bpl.w	121bc <__ssvfscanf_r+0x248>
   12a0e:	b.n	129ea <__ssvfscanf_r+0xa76>
   12a10:	orr.w	r4, r4, #1
   12a14:	ldr	r3, [pc, #420]	; (12bbc <__ssvfscanf_r+0xc48>)
   12a16:	str	r3, [r7, #44]	; 0x2c
   12a18:	movs	r3, #8
   12a1a:	str	r1, [r7, #76]	; 0x4c
   12a1c:	str	r3, [r7, #56]	; 0x38
   12a1e:	movs	r5, #3
   12a20:	b.w	121ac <__ssvfscanf_r+0x238>
   12a24:	orr.w	r4, r4, #1
   12a28:	ldr	r3, [pc, #404]	; (12bc0 <__ssvfscanf_r+0xc4c>)
   12a2a:	str	r3, [r7, #44]	; 0x2c
   12a2c:	movs	r3, #10
   12a2e:	str	r1, [r7, #76]	; 0x4c
   12a30:	str	r3, [r7, #56]	; 0x38
   12a32:	movs	r5, #3
   12a34:	b.w	121ac <__ssvfscanf_r+0x238>
   12a38:	lsls	r3, r4, #20
   12a3a:	bpl.w	12542 <__ssvfscanf_r+0x5ce>
   12a3e:	cbnz	r6, 12a46 <__ssvfscanf_r+0xad2>
   12a40:	orr.w	r4, r4, #512	; 0x200
   12a44:	movs	r6, #8
   12a46:	lsls	r3, r4, #21
   12a48:	bmi.w	12d98 <__ssvfscanf_r+0xe24>
   12a4c:	ldr	r3, [r7, #60]	; 0x3c
   12a4e:	bic.w	r4, r4, #896	; 0x380
   12a52:	cbz	r3, 12a5c <__ssvfscanf_r+0xae8>
   12a54:	subs	r3, #1
   12a56:	str	r3, [r7, #60]	; 0x3c
   12a58:	add.w	r8, r8, #1
   12a5c:	ldr	r3, [r1, #4]
   12a5e:	subs	r3, #1
   12a60:	cmp	r3, #0
   12a62:	add.w	sl, sl, #1
   12a66:	str	r3, [r1, #4]
   12a68:	bgt.w	12552 <__ssvfscanf_r+0x5de>
   12a6c:	mov	r0, r9
   12a6e:	str	r1, [r7, #72]	; 0x48
   12a70:	bl	152c8 <__ssrefill_r>
   12a74:	ldr	r1, [r7, #72]	; 0x48
   12a76:	cmp	r0, #0
   12a78:	beq.w	12556 <__ssvfscanf_r+0x5e2>
   12a7c:	b.n	1255c <__ssvfscanf_r+0x5e8>
   12a7e:	vmov	r0, s16
   12a82:	mov	r1, fp
   12a84:	bl	152c8 <__ssrefill_r>
   12a88:	cmp	r0, #0
   12a8a:	bne.w	123b0 <__ssvfscanf_r+0x43c>
   12a8e:	cmp	r6, #0
   12a90:	bne.w	1221c <__ssvfscanf_r+0x2a8>
   12a94:	b.n	123b0 <__ssvfscanf_r+0x43c>
   12a96:	mov	r1, fp
   12a98:	mov	r0, r9
   12a9a:	bl	152c8 <__ssrefill_r>
   12a9e:	cmp	r0, #0
   12aa0:	bne.w	1214c <__ssvfscanf_r+0x1d8>
   12aa4:	ldr.w	r2, [fp]
   12aa8:	b.n	129e0 <__ssvfscanf_r+0xa6c>
   12aaa:	ldr.w	r2, [fp, #4]
   12aae:	b.n	12ad0 <__ssvfscanf_r+0xb5c>
   12ab0:	ldr.w	r3, [fp]
   12ab4:	ldrb	r2, [r3, #0]
   12ab6:	ldrb	r2, [r6, r2]
   12ab8:	lsls	r1, r2, #28
   12aba:	add.w	r3, r3, #1
   12abe:	bpl.w	11fc2 <__ssvfscanf_r+0x4e>
   12ac2:	ldr.w	r2, [fp, #4]
   12ac6:	subs	r2, #1
   12ac8:	strd	r3, r2, [fp]
   12acc:	add.w	sl, sl, #1
   12ad0:	cmp	r2, #0
   12ad2:	bgt.n	12ab0 <__ssvfscanf_r+0xb3c>
   12ad4:	mov	r1, fp
   12ad6:	mov	r0, r9
   12ad8:	bl	152c8 <__ssrefill_r>
   12adc:	cmp	r0, #0
   12ade:	beq.n	12ab0 <__ssvfscanf_r+0xb3c>
   12ae0:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   12ae4:	lsls	r1, r4, #27
   12ae6:	bmi.w	1317c <__ssvfscanf_r+0x1208>
   12aea:	ands.w	r4, r4, #128	; 0x80
   12aee:	beq.w	13248 <__ssvfscanf_r+0x12d4>
   12af2:	ldr	r4, [r7, #48]	; 0x30
   12af4:	ldr.w	r6, [r4], #4
   12af8:	str	r6, [r7, #72]	; 0x48
   12afa:	cmp	r6, #0
   12afc:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   12b00:	movs	r0, #32
   12b02:	bl	c660 <malloc>
   12b06:	mov	r5, r0
   12b08:	cmp	r0, #0
   12b0a:	beq.w	133d2 <__ssvfscanf_r+0x145e>
   12b0e:	ldr	r2, [r7, #64]	; 0x40
   12b10:	str	r0, [r6, #0]
   12b12:	ldrh	r3, [r2, #4]
   12b14:	ldrh	r6, [r2, #6]
   12b16:	cmp	r6, r3
   12b18:	bcs.w	1306c <__ssvfscanf_r+0x10f8>
   12b1c:	ldr	r0, [r2, #0]
   12b1e:	ldr	r3, [r7, #72]	; 0x48
   12b20:	str.w	r3, [r0, r6, lsl #2]
   12b24:	ldr	r3, [r7, #64]	; 0x40
   12b26:	str	r4, [r7, #48]	; 0x30
   12b28:	adds	r6, #1
   12b2a:	strh	r6, [r3, #6]
   12b2c:	movs	r3, #32
   12b2e:	str	r3, [r7, #60]	; 0x3c
   12b30:	ldr.w	r2, [fp]
   12b34:	ldr	r6, [pc, #128]	; (12bb8 <__ssvfscanf_r+0xc44>)
   12b36:	ldrb	r1, [r2, #0]
   12b38:	ldrb	r1, [r6, r1]
   12b3a:	lsls	r0, r1, #28
   12b3c:	bmi.w	13098 <__ssvfscanf_r+0x1124>
   12b40:	mov	r3, r6
   12b42:	mov	r4, r5
   12b44:	mov	r0, r2
   12b46:	mov	r6, r5
   12b48:	ldr.w	r1, [fp, #4]
   12b4c:	ldr	r2, [r7, #72]	; 0x48
   12b4e:	subs	r1, #1
   12b50:	str.w	r1, [fp, #4]
   12b54:	adds	r1, r0, #1
   12b56:	str.w	r1, [fp]
   12b5a:	mov	r5, r6
   12b5c:	ldrb	r1, [r0, #0]
   12b5e:	strb.w	r1, [r5], #1
   12b62:	cbz	r2, 12b6e <__ssvfscanf_r+0xbfa>
   12b64:	ldr	r2, [r7, #60]	; 0x3c
   12b66:	subs	r6, r5, r4
   12b68:	cmp	r6, r2
   12b6a:	bcs.w	13262 <__ssvfscanf_r+0x12ee>
   12b6e:	subs.w	r8, r8, #1
   12b72:	beq.n	12b8c <__ssvfscanf_r+0xc18>
   12b74:	ldr.w	r1, [fp, #4]
   12b78:	cmp	r1, #0
   12b7a:	mov	r6, r5
   12b7c:	ble.w	132dc <__ssvfscanf_r+0x1368>
   12b80:	ldr.w	r0, [fp]
   12b84:	ldrb	r1, [r0, #0]
   12b86:	ldrb	r1, [r3, r1]
   12b88:	lsls	r1, r1, #28
   12b8a:	bpl.n	12b48 <__ssvfscanf_r+0xbd4>
   12b8c:	subs	r1, r5, r4
   12b8e:	add	sl, r1
   12b90:	adds	r1, #1
   12b92:	mov.w	r3, #0
   12b96:	strb	r3, [r5, #0]
   12b98:	ldr	r3, [r7, #72]	; 0x48
   12b9a:	cbz	r3, 12ba4 <__ssvfscanf_r+0xc30>
   12b9c:	ldr	r3, [r7, #60]	; 0x3c
   12b9e:	cmp	r3, r1
   12ba0:	bhi.w	132cc <__ssvfscanf_r+0x1358>
   12ba4:	ldr	r3, [r7, #68]	; 0x44
   12ba6:	adds	r3, #1
   12ba8:	str	r3, [r7, #68]	; 0x44
   12baa:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   12bae:	movs	r3, #0
   12bb0:	str	r3, [r7, #60]	; 0x3c
   12bb2:	b.n	12478 <__ssvfscanf_r+0x504>
   12bb4:	.word	0x20002454
   12bb8:	.word	0x20000825
   12bbc:	.word	0x00014b8d
   12bc0:	.word	0x0000dfa9
   12bc4:	lsls	r6, r4, #27
   12bc6:	bmi.w	12ecc <__ssvfscanf_r+0xf58>
   12bca:	ands.w	r4, r4, #128	; 0x80
   12bce:	beq.w	132ac <__ssvfscanf_r+0x1338>
   12bd2:	ldr	r4, [r7, #48]	; 0x30
   12bd4:	ldr.w	r6, [r4], #4
   12bd8:	str	r6, [r7, #72]	; 0x48
   12bda:	cmp	r6, #0
   12bdc:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   12be0:	movs	r0, #32
   12be2:	bl	c660 <malloc>
   12be6:	mov	r5, r0
   12be8:	cmp	r0, #0
   12bea:	beq.w	133d2 <__ssvfscanf_r+0x145e>
   12bee:	ldr	r2, [r7, #64]	; 0x40
   12bf0:	str	r0, [r6, #0]
   12bf2:	ldrh	r3, [r2, #4]
   12bf4:	ldrh	r6, [r2, #6]
   12bf6:	cmp	r6, r3
   12bf8:	bcs.w	130f0 <__ssvfscanf_r+0x117c>
   12bfc:	ldr	r0, [r2, #0]
   12bfe:	ldr	r3, [r7, #72]	; 0x48
   12c00:	str.w	r3, [r0, r6, lsl #2]
   12c04:	ldr	r3, [r7, #64]	; 0x40
   12c06:	str	r4, [r7, #48]	; 0x30
   12c08:	adds	r6, #1
   12c0a:	strh	r6, [r3, #6]
   12c0c:	movs	r4, #32
   12c0e:	ldr.w	r2, [fp]
   12c12:	add.w	r3, r7, #112	; 0x70
   12c16:	mov	r1, r3
   12c18:	ldrb	r3, [r2, #0]
   12c1a:	ldrb	r3, [r1, r3]
   12c1c:	cmp	r3, #0
   12c1e:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   12c22:	vmov	s16, r9
   12c26:	ldr.w	r9, [r7, #72]	; 0x48
   12c2a:	str.w	sl, [r7, #60]	; 0x3c
   12c2e:	mov	r6, r5
   12c30:	mov	sl, r4
   12c32:	mov	r0, r2
   12c34:	mov	r4, r1
   12c36:	ldr.w	r1, [fp, #4]
   12c3a:	adds	r3, r0, #1
   12c3c:	subs	r1, #1
   12c3e:	strd	r3, r1, [fp]
   12c42:	mov	r1, r5
   12c44:	ldrb	r0, [r0, #0]
   12c46:	strb.w	r0, [r1], #1
   12c4a:	cmp.w	r9, #0
   12c4e:	beq.n	12c56 <__ssvfscanf_r+0xce2>
   12c50:	subs	r5, r1, r6
   12c52:	cmp	r5, sl
   12c54:	bcs.n	12d4c <__ssvfscanf_r+0xdd8>
   12c56:	mov	r5, r1
   12c58:	subs.w	r8, r8, #1
   12c5c:	beq.n	12c74 <__ssvfscanf_r+0xd00>
   12c5e:	ldr.w	r1, [fp, #4]
   12c62:	cmp	r1, #0
   12c64:	ble.w	12f3c <__ssvfscanf_r+0xfc8>
   12c68:	ldr.w	r0, [fp]
   12c6c:	ldrb	r1, [r0, #0]
   12c6e:	ldrb	r1, [r4, r1]
   12c70:	cmp	r1, #0
   12c72:	bne.n	12c36 <__ssvfscanf_r+0xcc2>
   12c74:	mov	r4, sl
   12c76:	vmov	r9, s16
   12c7a:	ldr.w	sl, [r7, #60]	; 0x3c
   12c7e:	subs	r6, r5, r6
   12c80:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   12c84:	mov.w	r3, #0
   12c88:	strb	r3, [r5, #0]
   12c8a:	ldr	r3, [r7, #72]	; 0x48
   12c8c:	cbz	r3, 12c96 <__ssvfscanf_r+0xd22>
   12c8e:	adds	r1, r6, #1
   12c90:	cmp	r4, r1
   12c92:	bhi.w	132f0 <__ssvfscanf_r+0x137c>
   12c96:	ldr	r3, [r7, #68]	; 0x44
   12c98:	adds	r3, #1
   12c9a:	add	sl, r6
   12c9c:	str	r3, [r7, #68]	; 0x44
   12c9e:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   12ca2:	movs	r3, #0
   12ca4:	str	r3, [r7, #16]
   12ca6:	b.w	121fc <__ssvfscanf_r+0x288>
   12caa:	tst.w	r4, #143	; 0x8f
   12cae:	bne.w	1215e <__ssvfscanf_r+0x1ea>
   12cb2:	add.w	r8, r8, r8, lsl #2
   12cb6:	add.w	r8, r2, r8, lsl #1
   12cba:	sub.w	r8, r8, #48	; 0x30
   12cbe:	b.w	12190 <__ssvfscanf_r+0x21c>
   12cc2:	str	r1, [r7, #76]	; 0x4c
   12cc4:	movs	r5, #4
   12cc6:	b.w	121ac <__ssvfscanf_r+0x238>
   12cca:	ldr	r3, [r7, #60]	; 0x3c
   12ccc:	ldr	r1, [r7, #72]	; 0x48
   12cce:	adds	r3, r3, r1
   12cd0:	bne.w	1295c <__ssvfscanf_r+0x9e8>
   12cd4:	b.n	12854 <__ssvfscanf_r+0x8e0>
   12cd6:	ldr	r3, [r7, #72]	; 0x48
   12cd8:	cmp	r3, #3
   12cda:	beq.n	12ce2 <__ssvfscanf_r+0xd6e>
   12cdc:	cmp	r3, #5
   12cde:	bne.w	123b0 <__ssvfscanf_r+0x43c>
   12ce2:	ldr	r3, [r7, #72]	; 0x48
   12ce4:	adds	r3, #1
   12ce6:	uxtb	r3, r3
   12ce8:	str	r3, [r7, #72]	; 0x48
   12cea:	b.w	12386 <__ssvfscanf_r+0x412>
   12cee:	ldr	r3, [r7, #52]	; 0x34
   12cf0:	cmp	r3, #0
   12cf2:	bne.w	128f8 <__ssvfscanf_r+0x984>
   12cf6:	and.w	r3, r4, #1792	; 0x700
   12cfa:	cmp.w	r3, #1792	; 0x700
   12cfe:	bne.w	128f8 <__ssvfscanf_r+0x984>
   12d02:	movs	r3, #1
   12d04:	bic.w	r4, r4, #1920	; 0x780
   12d08:	str	r3, [r7, #60]	; 0x3c
   12d0a:	b.w	12386 <__ssvfscanf_r+0x412>
   12d0e:	ldr	r3, [r7, #60]	; 0x3c
   12d10:	ldr	r1, [r7, #72]	; 0x48
   12d12:	adds	r3, r3, r1
   12d14:	bne.w	1291c <__ssvfscanf_r+0x9a8>
   12d18:	b.n	12854 <__ssvfscanf_r+0x8e0>
   12d1a:	adds	r3, r0, #2
   12d1c:	bne.w	135d6 <__ssvfscanf_r+0x1662>
   12d20:	ldr.w	r3, [fp, #4]
   12d24:	ldr	r5, [r7, #72]	; 0x48
   12d26:	cmp	r3, #0
   12d28:	bgt.w	1272c <__ssvfscanf_r+0x7b8>
   12d2c:	mov	r1, fp
   12d2e:	mov	r0, r9
   12d30:	bl	152c8 <__ssrefill_r>
   12d34:	cmp	r0, #0
   12d36:	beq.w	12800 <__ssvfscanf_r+0x88c>
   12d3a:	ldr.w	sl, [r7, #60]	; 0x3c
   12d3e:	str	r6, [r7, #36]	; 0x24
   12d40:	mov	r4, r8
   12d42:	cmp	r5, #0
   12d44:	beq.w	1280e <__ssvfscanf_r+0x89a>
   12d48:	b.w	1214c <__ssvfscanf_r+0x1d8>
   12d4c:	mov.w	sl, sl, lsl #1
   12d50:	mov	r0, r6
   12d52:	mov	r1, sl
   12d54:	bl	cbf8 <realloc>
   12d58:	mov	r6, r0
   12d5a:	cmp	r0, #0
   12d5c:	beq.w	133d2 <__ssvfscanf_r+0x145e>
   12d60:	add	r5, r0
   12d62:	str.w	r0, [r9]
   12d66:	b.n	12c58 <__ssvfscanf_r+0xce4>
   12d68:	orr.w	r4, r4, #512	; 0x200
   12d6c:	ldr	r3, [pc, #752]	; (13060 <__ssvfscanf_r+0x10ec>)
   12d6e:	str	r3, [r7, #44]	; 0x2c
   12d70:	movs	r3, #16
   12d72:	str	r1, [r7, #76]	; 0x4c
   12d74:	str	r3, [r7, #56]	; 0x38
   12d76:	movs	r5, #3
   12d78:	b.w	121ac <__ssvfscanf_r+0x238>
   12d7c:	ldr	r3, [r7, #52]	; 0x34
   12d7e:	adds	r3, #1
   12d80:	str	r3, [r7, #52]	; 0x34
   12d82:	ldr	r3, [r7, #16]
   12d84:	bic.w	r4, r4, #128	; 0x80
   12d88:	cmp	r3, #0
   12d8a:	beq.w	1238a <__ssvfscanf_r+0x416>
   12d8e:	ldr	r3, [r7, #16]
   12d90:	subs	r3, #1
   12d92:	str	r3, [r7, #16]
   12d94:	b.w	1238c <__ssvfscanf_r+0x418>
   12d98:	bic.w	r4, r4, #1408	; 0x580
   12d9c:	b.w	12542 <__ssvfscanf_r+0x5ce>
   12da0:	lsls	r2, r4, #28
   12da2:	bpl.w	13134 <__ssvfscanf_r+0x11c0>
   12da6:	ldr	r3, [r7, #48]	; 0x30
   12da8:	ldr.w	r2, [r3], #4
   12dac:	str	r3, [r7, #48]	; 0x30
   12dae:	strb	r0, [r2, #0]
   12db0:	b.w	1259a <__ssvfscanf_r+0x626>
   12db4:	ldrb.w	r1, [r5, #-1]
   12db8:	mov	r2, fp
   12dba:	mov	r0, r9
   12dbc:	subs	r5, #1
   12dbe:	bl	15248 <_sungetc_r>
   12dc2:	b.w	12570 <__ssvfscanf_r+0x5fc>
   12dc6:	ldr	r3, [r7, #28]
   12dc8:	ldr	r2, [r7, #52]	; 0x34
   12dca:	cmp	r3, r2
   12dcc:	beq.w	1242a <__ssvfscanf_r+0x4b6>
   12dd0:	subs	r2, r3, r2
   12dd2:	addw	r3, r7, #707	; 0x2c3
   12dd6:	cmp	r5, r3
   12dd8:	it	cs
   12dda:	addwcs	r5, r7, #706	; 0x2c2
   12dde:	ldr	r1, [pc, #644]	; (13064 <__ssvfscanf_r+0x10f0>)
   12de0:	mov	r0, r5
   12de2:	bl	e214 <sprintf>
   12de6:	b.w	1242a <__ssvfscanf_r+0x4b6>
   12dea:	lsls	r2, r4, #27
   12dec:	bmi.w	13052 <__ssvfscanf_r+0x10de>
   12df0:	lsls	r3, r4, #28
   12df2:	bmi.w	1316a <__ssvfscanf_r+0x11f6>
   12df6:	lsls	r6, r4, #29
   12df8:	bpl.w	13364 <__ssvfscanf_r+0x13f0>
   12dfc:	ldr	r3, [r7, #48]	; 0x30
   12dfe:	str	r1, [r7, #76]	; 0x4c
   12e00:	ldr.w	r2, [r3], #4
   12e04:	str	r3, [r7, #48]	; 0x30
   12e06:	strh.w	sl, [r2]
   12e0a:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   12e0e:	lsls	r3, r4, #28
   12e10:	bne.w	1215e <__ssvfscanf_r+0x1ea>
   12e14:	ldrb	r2, [r0, #1]
   12e16:	cmp	r2, #104	; 0x68
   12e18:	beq.w	13128 <__ssvfscanf_r+0x11b4>
   12e1c:	orr.w	r4, r4, #4
   12e20:	mov	r0, r1
   12e22:	b.w	12084 <__ssvfscanf_r+0x110>
   12e26:	ldr	r3, [pc, #568]	; (13060 <__ssvfscanf_r+0x10ec>)
   12e28:	str	r3, [r7, #44]	; 0x2c
   12e2a:	movs	r3, #10
   12e2c:	str	r1, [r7, #76]	; 0x4c
   12e2e:	str	r3, [r7, #56]	; 0x38
   12e30:	movs	r5, #3
   12e32:	b.w	121ac <__ssvfscanf_r+0x238>
   12e36:	ldr	r3, [pc, #560]	; (13068 <__ssvfscanf_r+0x10f4>)
   12e38:	str	r3, [r7, #44]	; 0x2c
   12e3a:	movs	r3, #0
   12e3c:	str	r1, [r7, #76]	; 0x4c
   12e3e:	str	r3, [r7, #56]	; 0x38
   12e40:	movs	r5, #3
   12e42:	b.w	121ac <__ssvfscanf_r+0x238>
   12e46:	orr.w	r4, r4, #544	; 0x220
   12e4a:	b.n	12d6c <__ssvfscanf_r+0xdf8>
   12e4c:	add.w	r0, r7, #112	; 0x70
   12e50:	bl	13a10 <__sccl>
   12e54:	orr.w	r4, r4, #64	; 0x40
   12e58:	str	r0, [r7, #76]	; 0x4c
   12e5a:	movs	r5, #1
   12e5c:	b.w	121ac <__ssvfscanf_r+0x238>
   12e60:	lsls	r2, r4, #28
   12e62:	bne.w	1215e <__ssvfscanf_r+0x1ea>
   12e66:	ldrb	r2, [r0, #1]
   12e68:	cmp	r2, #108	; 0x6c
   12e6a:	beq.w	1311c <__ssvfscanf_r+0x11a8>
   12e6e:	orr.w	r4, r4, #1
   12e72:	mov	r0, r1
   12e74:	b.w	12084 <__ssvfscanf_r+0x110>
   12e78:	ands.w	r3, r4, #143	; 0x8f
   12e7c:	bne.w	1215e <__ssvfscanf_r+0x1ea>
   12e80:	ldr	r2, [r7, #64]	; 0x40
   12e82:	cmp	r2, #0
   12e84:	beq.w	13256 <__ssvfscanf_r+0x12e2>
   12e88:	ldrb	r2, [r0, #1]
   12e8a:	orr.w	r4, r4, #128	; 0x80
   12e8e:	mov	r0, r1
   12e90:	b.w	12084 <__ssvfscanf_r+0x110>
   12e94:	orrs.w	r8, r8, r4
   12e98:	bne.w	1215e <__ssvfscanf_r+0x1ea>
   12e9c:	ldrb	r2, [r0, #1]
   12e9e:	movs	r4, #16
   12ea0:	mov	r0, r1
   12ea2:	b.w	12084 <__ssvfscanf_r+0x110>
   12ea6:	str	r1, [r7, #76]	; 0x4c
   12ea8:	b.w	11ffa <__ssvfscanf_r+0x86>
   12eac:	movs	r3, #0
   12eae:	str	r3, [r7, #32]
   12eb0:	str	r3, [r7, #40]	; 0x28
   12eb2:	str	r3, [r7, #60]	; 0x3c
   12eb4:	add.w	r3, r7, #84	; 0x54
   12eb8:	str	r3, [r7, #72]	; 0x48
   12eba:	b.w	12610 <__ssvfscanf_r+0x69c>
   12ebe:	movs	r3, #0
   12ec0:	strd	r3, r3, [r7, #24]
   12ec4:	str	r3, [r7, #32]
   12ec6:	add.w	r4, r7, #84	; 0x54
   12eca:	b.n	12720 <__ssvfscanf_r+0x7ac>
   12ecc:	ldr.w	r3, [fp]
   12ed0:	add.w	r2, r7, #112	; 0x70
   12ed4:	mov	r1, r2
   12ed6:	ldrb	r2, [r3, #0]
   12ed8:	ldrb	r2, [r1, r2]
   12eda:	cmp	r2, #0
   12edc:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   12ee0:	adds	r3, #1
   12ee2:	str.w	r3, [fp]
   12ee6:	ldr.w	r3, [fp, #4]
   12eea:	cmp.w	r8, #1
   12eee:	add.w	r3, r3, #4294967295
   12ef2:	str.w	r3, [fp, #4]
   12ef6:	it	ne
   12ef8:	movne	r4, r1
   12efa:	bne.n	12f26 <__ssvfscanf_r+0xfb2>
   12efc:	b.w	125a6 <__ssvfscanf_r+0x632>
   12f00:	ldr.w	r3, [fp]
   12f04:	ldrb	r2, [r3, #0]
   12f06:	ldrb	r2, [r4, r2]
   12f08:	adds	r3, #1
   12f0a:	cmp	r2, #0
   12f0c:	beq.w	125a6 <__ssvfscanf_r+0x632>
   12f10:	str.w	r3, [fp]
   12f14:	ldr.w	r3, [fp, #4]
   12f18:	adds	r5, #1
   12f1a:	subs	r3, #1
   12f1c:	cmp	r5, r8
   12f1e:	str.w	r3, [fp, #4]
   12f22:	beq.w	125a6 <__ssvfscanf_r+0x632>
   12f26:	cmp	r3, #0
   12f28:	bgt.n	12f00 <__ssvfscanf_r+0xf8c>
   12f2a:	mov	r1, fp
   12f2c:	mov	r0, r9
   12f2e:	bl	152c8 <__ssrefill_r>
   12f32:	cmp	r0, #0
   12f34:	beq.n	12f00 <__ssvfscanf_r+0xf8c>
   12f36:	add	sl, r5
   12f38:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   12f3c:	vmov	r0, s16
   12f40:	mov	r1, fp
   12f42:	bl	152c8 <__ssrefill_r>
   12f46:	cmp	r0, #0
   12f48:	beq.w	12c68 <__ssvfscanf_r+0xcf4>
   12f4c:	cmp	r5, r6
   12f4e:	mov	r4, sl
   12f50:	vmov	r9, s16
   12f54:	ldr.w	sl, [r7, #60]	; 0x3c
   12f58:	bne.w	12c7e <__ssvfscanf_r+0xd0a>
   12f5c:	b.w	1214c <__ssvfscanf_r+0x1d8>
   12f60:	ldrb.w	r2, [r7, #80]	; 0x50
   12f64:	b.n	127b8 <__ssvfscanf_r+0x844>
   12f66:	ldr	r3, [r4, #0]
   12f68:	cmp	r3, #4
   12f6a:	bne.w	127d2 <__ssvfscanf_r+0x85e>
   12f6e:	b.n	127d6 <__ssvfscanf_r+0x862>
   12f70:	adds	r3, r0, #2
   12f72:	bne.w	135e8 <__ssvfscanf_r+0x1674>
   12f76:	ldr.w	r3, [fp, #4]
   12f7a:	cmp	r3, #0
   12f7c:	ble.w	1332e <__ssvfscanf_r+0x13ba>
   12f80:	ldr.w	r3, [fp]
   12f84:	ldr	r2, [r7, #36]	; 0x24
   12f86:	ldrb	r3, [r3, #0]
   12f88:	ldrb	r3, [r2, r3]
   12f8a:	lsls	r0, r3, #28
   12f8c:	bmi.n	12f96 <__ssvfscanf_r+0x1022>
   12f8e:	cmp.w	r8, #0
   12f92:	bne.w	12628 <__ssvfscanf_r+0x6b4>
   12f96:	str	r4, [r7, #36]	; 0x24
   12f98:	ldr	r3, [r7, #52]	; 0x34
   12f9a:	cmp	r3, #0
   12f9c:	bne.w	11fc2 <__ssvfscanf_r+0x4e>
   12fa0:	ldr	r2, [r7, #72]	; 0x48
   12fa2:	str	r3, [r2, #0]
   12fa4:	ldr	r3, [r7, #60]	; 0x3c
   12fa6:	cmp	r3, #0
   12fa8:	beq.w	12ba4 <__ssvfscanf_r+0xc30>
   12fac:	ldr	r3, [r7, #40]	; 0x28
   12fae:	subs	r1, r2, r3
   12fb0:	asrs	r3, r1, #2
   12fb2:	ldr	r2, [r7, #32]
   12fb4:	adds	r3, #1
   12fb6:	cmp	r2, r3
   12fb8:	bls.w	12ba4 <__ssvfscanf_r+0xc30>
   12fbc:	ldr	r4, [r7, #60]	; 0x3c
   12fbe:	adds	r1, #4
   12fc0:	ldr	r0, [r4, #0]
   12fc2:	bl	cbf8 <realloc>
   12fc6:	cmp	r0, #0
   12fc8:	bne.w	12840 <__ssvfscanf_r+0x8cc>
   12fcc:	b.n	12ba4 <__ssvfscanf_r+0xc30>
   12fce:	ldr.w	r2, [r3], #4
   12fd2:	vstr	d0, [r2]
   12fd6:	str	r3, [r7, #48]	; 0x30
   12fd8:	b.n	12ba4 <__ssvfscanf_r+0xc30>
   12fda:	ldr	r5, [r7, #12]
   12fdc:	ldr	r1, [r7, #32]
   12fde:	ldr	r6, [r7, #4]
   12fe0:	mov	r0, r5
   12fe2:	mov	r2, r8
   12fe4:	mov	fp, r4
   12fe6:	ldr	r4, [r7, #8]
   12fe8:	bl	13a98 <stpncpy>
   12fec:	ldr	r3, [r7, #52]	; 0x34
   12fee:	str	r3, [r7, #28]
   12ff0:	bic.w	r4, r4, #640	; 0x280
   12ff4:	subs	r6, #1
   12ff6:	mov	r5, r0
   12ff8:	b.w	1238c <__ssvfscanf_r+0x418>
   12ffc:	ldr	r0, [r7, #28]
   12ffe:	lsls	r1, r3, #3
   13000:	mov	r5, r3
   13002:	bl	cbf8 <realloc>
   13006:	str	r0, [r7, #28]
   13008:	cmp	r0, #0
   1300a:	beq.w	134d6 <__ssvfscanf_r+0x1562>
   1300e:	ldr	r2, [r7, #32]
   13010:	lsls	r3, r5, #1
   13012:	add.w	r8, r0, r4
   13016:	str	r0, [r2, #0]
   13018:	str	r3, [r7, #24]
   1301a:	b.w	127f2 <__ssvfscanf_r+0x87e>
   1301e:	cmp	r6, #2
   13020:	bls.w	135ac <__ssvfscanf_r+0x1638>
   13024:	cmp	r6, #3
   13026:	beq.w	123d0 <__ssvfscanf_r+0x45c>
   1302a:	subs	r6, #4
   1302c:	uxtb.w	r8, r6
   13030:	mvn.w	r3, r8
   13034:	adds	r6, r5, r3
   13036:	ldrb.w	r1, [r5, #-1]!
   1303a:	mov	r2, fp
   1303c:	mov	r0, r9
   1303e:	bl	15248 <_sungetc_r>
   13042:	cmp	r6, r5
   13044:	bne.n	13036 <__ssvfscanf_r+0x10c2>
   13046:	add.w	sl, sl, #4294967295
   1304a:	sub.w	sl, sl, r8
   1304e:	b.w	123d0 <__ssvfscanf_r+0x45c>
   13052:	str	r1, [r7, #76]	; 0x4c
   13054:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   13058:	movs	r3, #3
   1305a:	str	r3, [r7, #60]	; 0x3c
   1305c:	b.w	12386 <__ssvfscanf_r+0x412>
   13060:	.word	0x00014b8d
   13064:	.word	0x2000081c
   13068:	.word	0x0000dfa9
   1306c:	movw	r2, #65526	; 0xfff6
   13070:	cmp	r3, r2
   13072:	bhi.w	135a4 <__ssvfscanf_r+0x1630>
   13076:	ldr	r2, [r7, #64]	; 0x40
   13078:	adds	r3, #8
   1307a:	uxth	r3, r3
   1307c:	ldr	r0, [r2, #0]
   1307e:	str	r0, [r7, #60]	; 0x3c
   13080:	lsls	r1, r3, #2
   13082:	str	r3, [r7, #52]	; 0x34
   13084:	bl	cbf8 <realloc>
   13088:	cmp	r0, #0
   1308a:	beq.w	13584 <__ssvfscanf_r+0x1610>
   1308e:	ldr	r2, [r7, #64]	; 0x40
   13090:	ldr	r3, [r7, #52]	; 0x34
   13092:	strh	r3, [r2, #4]
   13094:	str	r0, [r2, #0]
   13096:	b.n	12b1e <__ssvfscanf_r+0xbaa>
   13098:	movs	r1, #1
   1309a:	b.n	12b92 <__ssvfscanf_r+0xc1e>
   1309c:	movw	r2, #65526	; 0xfff6
   130a0:	cmp	r3, r2
   130a2:	bhi.w	135cc <__ssvfscanf_r+0x1658>
   130a6:	adds	r3, #8
   130a8:	uxth	r6, r3
   130aa:	ldr	r3, [r7, #64]	; 0x40
   130ac:	lsls	r1, r6, #2
   130ae:	ldr	r0, [r3, #0]
   130b0:	bl	cbf8 <realloc>
   130b4:	ldr	r3, [r7, #64]	; 0x40
   130b6:	cmp	r0, #0
   130b8:	beq.w	13538 <__ssvfscanf_r+0x15c4>
   130bc:	strh	r6, [r3, #4]
   130be:	str	r0, [r3, #0]
   130c0:	b.w	125fa <__ssvfscanf_r+0x686>
   130c4:	movw	r2, #65526	; 0xfff6
   130c8:	cmp	r3, r2
   130ca:	bhi.w	135cc <__ssvfscanf_r+0x1658>
   130ce:	ldr	r2, [r7, #64]	; 0x40
   130d0:	adds	r3, #8
   130d2:	uxth	r3, r3
   130d4:	lsls	r1, r3, #2
   130d6:	ldr	r0, [r2, #0]
   130d8:	str	r3, [r7, #72]	; 0x48
   130da:	bl	cbf8 <realloc>
   130de:	ldr	r3, [r7, #72]	; 0x48
   130e0:	cmp	r0, #0
   130e2:	beq.w	13536 <__ssvfscanf_r+0x15c2>
   130e6:	ldr	r2, [r7, #64]	; 0x40
   130e8:	strh	r3, [r2, #4]
   130ea:	str	r0, [r2, #0]
   130ec:	b.w	1270c <__ssvfscanf_r+0x798>
   130f0:	movw	r2, #65526	; 0xfff6
   130f4:	cmp	r3, r2
   130f6:	bhi.w	135a4 <__ssvfscanf_r+0x1630>
   130fa:	ldr	r2, [r7, #64]	; 0x40
   130fc:	adds	r3, #8
   130fe:	uxth	r3, r3
   13100:	ldr	r0, [r2, #0]
   13102:	str	r0, [r7, #60]	; 0x3c
   13104:	lsls	r1, r3, #2
   13106:	str	r3, [r7, #52]	; 0x34
   13108:	bl	cbf8 <realloc>
   1310c:	cmp	r0, #0
   1310e:	beq.w	13584 <__ssvfscanf_r+0x1610>
   13112:	ldr	r2, [r7, #64]	; 0x40
   13114:	ldr	r3, [r7, #52]	; 0x34
   13116:	strh	r3, [r2, #4]
   13118:	str	r0, [r2, #0]
   1311a:	b.n	12bfe <__ssvfscanf_r+0xc8a>
   1311c:	ldrb	r2, [r0, #2]
   1311e:	orr.w	r4, r4, #2
   13122:	adds	r0, #2
   13124:	b.w	12084 <__ssvfscanf_r+0x110>
   13128:	ldrb	r2, [r0, #2]
   1312a:	orr.w	r4, r4, #8
   1312e:	adds	r0, #2
   13130:	b.w	12084 <__ssvfscanf_r+0x110>
   13134:	lsls	r3, r4, #29
   13136:	bmi.n	131ea <__ssvfscanf_r+0x1276>
   13138:	ands.w	r2, r4, #1
   1313c:	bne.w	12590 <__ssvfscanf_r+0x61c>
   13140:	lsls	r6, r4, #30
   13142:	bpl.w	12590 <__ssvfscanf_r+0x61c>
   13146:	ldr	r3, [pc, #716]	; (13414 <__ssvfscanf_r+0x14a0>)
   13148:	ldr	r1, [r7, #44]	; 0x2c
   1314a:	cmp	r1, r3
   1314c:	mov	r0, r9
   1314e:	ldr	r3, [r7, #56]	; 0x38
   13150:	ldr	r1, [r7, #40]	; 0x28
   13152:	beq.w	135d0 <__ssvfscanf_r+0x165c>
   13156:	bl	14cfc <_strtoll_r>
   1315a:	ldr	r3, [r7, #48]	; 0x30
   1315c:	ldr.w	r2, [r3], #4
   13160:	str	r3, [r7, #48]	; 0x30
   13162:	strd	r0, r1, [r2]
   13166:	b.w	1259a <__ssvfscanf_r+0x626>
   1316a:	ldr	r3, [r7, #48]	; 0x30
   1316c:	str	r1, [r7, #76]	; 0x4c
   1316e:	ldr.w	r2, [r3], #4
   13172:	str	r3, [r7, #48]	; 0x30
   13174:	strb.w	sl, [r2]
   13178:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   1317c:	ldr.w	r3, [fp]
   13180:	ldr	r6, [pc, #660]	; (13418 <__ssvfscanf_r+0x14a4>)
   13182:	ldrb	r2, [r3, #0]
   13184:	ldrb	r2, [r6, r2]
   13186:	lsls	r2, r2, #28
   13188:	bmi.w	11fc2 <__ssvfscanf_r+0x4e>
   1318c:	adds	r3, #1
   1318e:	str.w	r3, [fp]
   13192:	ldr.w	r3, [fp, #4]
   13196:	cmp.w	r8, #1
   1319a:	add.w	r3, r3, #4294967295
   1319e:	str.w	r3, [fp, #4]
   131a2:	it	eq
   131a4:	addeq.w	sl, sl, #1
   131a8:	beq.w	11fc2 <__ssvfscanf_r+0x4e>
   131ac:	movs	r4, #1
   131ae:	b.n	131d4 <__ssvfscanf_r+0x1260>
   131b0:	ldr.w	r3, [fp]
   131b4:	ldrb	r2, [r3, #0]
   131b6:	ldrb	r2, [r6, r2]
   131b8:	lsls	r5, r2, #28
   131ba:	add.w	r3, r3, #1
   131be:	bmi.n	131e4 <__ssvfscanf_r+0x1270>
   131c0:	str.w	r3, [fp]
   131c4:	ldr.w	r3, [fp, #4]
   131c8:	adds	r4, #1
   131ca:	subs	r3, #1
   131cc:	cmp	r4, r8
   131ce:	str.w	r3, [fp, #4]
   131d2:	beq.n	131e4 <__ssvfscanf_r+0x1270>
   131d4:	cmp	r3, #0
   131d6:	bgt.n	131b0 <__ssvfscanf_r+0x123c>
   131d8:	mov	r1, fp
   131da:	mov	r0, r9
   131dc:	bl	152c8 <__ssrefill_r>
   131e0:	cmp	r0, #0
   131e2:	beq.n	131b0 <__ssvfscanf_r+0x123c>
   131e4:	add	sl, r4
   131e6:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   131ea:	ldr	r3, [r7, #48]	; 0x30
   131ec:	ldr.w	r2, [r3], #4
   131f0:	str	r3, [r7, #48]	; 0x30
   131f2:	strh	r0, [r2, #0]
   131f4:	b.w	1259a <__ssvfscanf_r+0x626>
   131f8:	ldr	r3, [r7, #64]	; 0x40
   131fa:	cmp	r3, #0
   131fc:	beq.w	134dc <__ssvfscanf_r+0x1568>
   13200:	ldr	r3, [r7, #64]	; 0x40
   13202:	ldr.w	r8, [r3]
   13206:	ldrh	r6, [r3, #6]
   13208:	cbz	r6, 13228 <__ssvfscanf_r+0x12b4>
   1320a:	movs	r4, #0
   1320c:	sub.w	r5, r8, #4
   13210:	mov	r9, r4
   13212:	ldr.w	r3, [r5, #4]!
   13216:	ldr	r0, [r3, #0]
   13218:	bl	c670 <free>
   1321c:	adds	r4, #1
   1321e:	ldr	r3, [r5, #0]
   13220:	cmp	r6, r4
   13222:	str.w	r9, [r3]
   13226:	bne.n	13212 <__ssvfscanf_r+0x129e>
   13228:	mov.w	r3, #4294967295
   1322c:	str	r3, [r7, #68]	; 0x44
   1322e:	cmp.w	r8, #0
   13232:	bne.w	1216e <__ssvfscanf_r+0x1fa>
   13236:	b.w	12174 <__ssvfscanf_r+0x200>
   1323a:	ldr	r0, [pc, #480]	; (1341c <__ssvfscanf_r+0x14a8>)
   1323c:	str	r3, [r7, #48]	; 0x30
   1323e:	bl	ed70 <nanf>
   13242:	vstr	s0, [r4]
   13246:	b.n	12ba4 <__ssvfscanf_r+0xc30>
   13248:	ldr	r2, [r7, #48]	; 0x30
   1324a:	str	r4, [r7, #60]	; 0x3c
   1324c:	ldr.w	r5, [r2], #4
   13250:	str	r2, [r7, #48]	; 0x30
   13252:	str	r4, [r7, #72]	; 0x48
   13254:	b.n	12b30 <__ssvfscanf_r+0xbbc>
   13256:	sub	sp, #8
   13258:	strd	r3, r3, [sp, #8]
   1325c:	add	r3, sp, #8
   1325e:	str	r3, [r7, #64]	; 0x40
   13260:	b.n	12e88 <__ssvfscanf_r+0xf14>
   13262:	str	r3, [r7, #52]	; 0x34
   13264:	lsls	r3, r2, #1
   13266:	mov	r0, r4
   13268:	mov	r1, r3
   1326a:	str	r3, [r7, #60]	; 0x3c
   1326c:	bl	cbf8 <realloc>
   13270:	mov	r4, r0
   13272:	cmp	r0, #0
   13274:	beq.w	133d2 <__ssvfscanf_r+0x145e>
   13278:	ldr	r3, [r7, #72]	; 0x48
   1327a:	adds	r5, r0, r6
   1327c:	str	r0, [r3, #0]
   1327e:	ldr	r3, [r7, #52]	; 0x34
   13280:	b.n	12b6e <__ssvfscanf_r+0xbfa>
   13282:	ldr	r5, [r7, #20]
   13284:	mov	r1, r5
   13286:	movs	r3, #10
   13288:	adds	r1, #1
   1328a:	mov	r0, r9
   1328c:	bl	dfa8 <_strtol_r>
   13290:	ldr	r3, [r7, #24]
   13292:	subs	r2, r0, r3
   13294:	b.n	12dd2 <__ssvfscanf_r+0xe5e>
   13296:	ldrd	r3, r2, [r7, #48]	; 0x30
   1329a:	ldr.w	r1, [r3], #4
   1329e:	str	r2, [r7, #32]
   132a0:	str	r1, [r7, #72]	; 0x48
   132a2:	str	r3, [r7, #48]	; 0x30
   132a4:	str	r2, [r7, #40]	; 0x28
   132a6:	str	r2, [r7, #60]	; 0x3c
   132a8:	b.w	12610 <__ssvfscanf_r+0x69c>
   132ac:	ldr	r3, [r7, #48]	; 0x30
   132ae:	str	r4, [r7, #72]	; 0x48
   132b0:	ldr.w	r5, [r3], #4
   132b4:	str	r3, [r7, #48]	; 0x30
   132b6:	b.n	12c0e <__ssvfscanf_r+0xc9a>
   132b8:	ldr	r3, [r7, #48]	; 0x30
   132ba:	ldr	r2, [r7, #40]	; 0x28
   132bc:	ldr.w	r4, [r3], #4
   132c0:	str	r2, [r7, #24]
   132c2:	strd	r2, r2, [r7, #28]
   132c6:	str	r3, [r7, #48]	; 0x30
   132c8:	b.w	12720 <__ssvfscanf_r+0x7ac>
   132cc:	ldr	r4, [r7, #72]	; 0x48
   132ce:	ldr	r0, [r4, #0]
   132d0:	bl	cbf8 <realloc>
   132d4:	cmp	r0, #0
   132d6:	bne.w	12840 <__ssvfscanf_r+0x8cc>
   132da:	b.n	12ba4 <__ssvfscanf_r+0xc30>
   132dc:	mov	r1, fp
   132de:	mov	r0, r9
   132e0:	str	r3, [r7, #52]	; 0x34
   132e2:	bl	152c8 <__ssrefill_r>
   132e6:	ldr	r3, [r7, #52]	; 0x34
   132e8:	cmp	r0, #0
   132ea:	beq.w	12b80 <__ssvfscanf_r+0xc0c>
   132ee:	b.n	12b8c <__ssvfscanf_r+0xc18>
   132f0:	ldr	r0, [r3, #0]
   132f2:	mov	r4, r3
   132f4:	bl	cbf8 <realloc>
   132f8:	cmp	r0, #0
   132fa:	beq.w	12c96 <__ssvfscanf_r+0xd22>
   132fe:	str	r0, [r4, #0]
   13300:	b.n	12c96 <__ssvfscanf_r+0xd22>
   13302:	movs	r5, #0
   13304:	b.n	12f76 <__ssvfscanf_r+0x1002>
   13306:	ldr	r5, [r7, #72]	; 0x48
   13308:	ldr.w	sl, [r7, #60]	; 0x3c
   1330c:	str	r6, [r7, #36]	; 0x24
   1330e:	mov	r4, r8
   13310:	cmp	r5, #0
   13312:	beq.w	1280e <__ssvfscanf_r+0x89a>
   13316:	subs	r5, #1
   13318:	add.w	r3, r7, #368	; 0x170
   1331c:	mov	r2, fp
   1331e:	ldrb	r1, [r3, r5]
   13320:	mov	r0, r9
   13322:	bl	15248 <_sungetc_r>
   13326:	cmp	r5, #0
   13328:	bne.n	13316 <__ssvfscanf_r+0x13a2>
   1332a:	b.w	1280e <__ssvfscanf_r+0x89a>
   1332e:	mov	r1, fp
   13330:	mov	r0, r9
   13332:	bl	152c8 <__ssrefill_r>
   13336:	cmp	r0, #0
   13338:	beq.w	12f80 <__ssvfscanf_r+0x100c>
   1333c:	str	r4, [r7, #36]	; 0x24
   1333e:	cmp	r5, #0
   13340:	bne.w	1214c <__ssvfscanf_r+0x1d8>
   13344:	b.n	12f98 <__ssvfscanf_r+0x1024>
   13346:	str	r4, [r7, #36]	; 0x24
   13348:	cmp	r5, #0
   1334a:	beq.w	12f98 <__ssvfscanf_r+0x1024>
   1334e:	subs	r5, #1
   13350:	add.w	r3, r7, #368	; 0x170
   13354:	mov	r2, fp
   13356:	ldrb	r1, [r3, r5]
   13358:	mov	r0, r9
   1335a:	bl	15248 <_sungetc_r>
   1335e:	cmp	r5, #0
   13360:	bne.n	1334e <__ssvfscanf_r+0x13da>
   13362:	b.n	12f98 <__ssvfscanf_r+0x1024>
   13364:	lsls	r5, r4, #31
   13366:	bmi.n	133e2 <__ssvfscanf_r+0x146e>
   13368:	lsls	r4, r4, #30
   1336a:	bpl.n	133e2 <__ssvfscanf_r+0x146e>
   1336c:	ldr	r3, [r7, #48]	; 0x30
   1336e:	str	r1, [r7, #76]	; 0x4c
   13370:	ldr.w	r2, [r3], #4
   13374:	str	r3, [r7, #48]	; 0x30
   13376:	mov.w	r3, sl, asr #31
   1337a:	str.w	sl, [r2]
   1337e:	str	r3, [r2, #4]
   13380:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   13384:	vmov	r9, s16
   13388:	mov	r6, r3
   1338a:	b.w	123b6 <__ssvfscanf_r+0x442>
   1338e:	movs	r3, #1
   13390:	bic.w	r4, r4, #1920	; 0x780
   13394:	str	r3, [r7, #72]	; 0x48
   13396:	b.w	12386 <__ssvfscanf_r+0x412>
   1339a:	cmp.w	r8, #1
   1339e:	it	cc
   133a0:	movcc.w	r8, #1
   133a4:	ands.w	r3, r4, #1
   133a8:	bne.n	13420 <__ssvfscanf_r+0x14ac>
   133aa:	lsls	r5, r4, #27
   133ac:	bmi.w	1361c <__ssvfscanf_r+0x16a8>
   133b0:	lsls	r4, r4, #24
   133b2:	bpl.w	1364e <__ssvfscanf_r+0x16da>
   133b6:	ldr	r3, [r7, #48]	; 0x30
   133b8:	ldr.w	r5, [r3], #4
   133bc:	str	r3, [r7, #72]	; 0x48
   133be:	cmp	r5, #0
   133c0:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   133c4:	mov	r0, r8
   133c6:	bl	c660 <malloc>
   133ca:	mov	r3, r0
   133cc:	cmp	r0, #0
   133ce:	bne.w	1358a <__ssvfscanf_r+0x1616>
   133d2:	ldr	r3, [r7, #64]	; 0x40
   133d4:	cmp	r3, #0
   133d6:	beq.w	134dc <__ssvfscanf_r+0x1568>
   133da:	ldr.w	r8, [r3]
   133de:	ldrh	r6, [r3, #6]
   133e0:	b.n	13208 <__ssvfscanf_r+0x1294>
   133e2:	ldr	r3, [r7, #48]	; 0x30
   133e4:	str	r1, [r7, #76]	; 0x4c
   133e6:	ldr.w	r2, [r3], #4
   133ea:	str.w	sl, [r2]
   133ee:	str	r3, [r7, #48]	; 0x30
   133f0:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   133f4:	mov	r3, r5
   133f6:	ldr	r5, [r7, #40]	; 0x28
   133f8:	cmp	r3, r5
   133fa:	bls.w	1215e <__ssvfscanf_r+0x1ea>
   133fe:	mov	r4, r3
   13400:	ldrb.w	r1, [r4, #-1]!
   13404:	mov	r2, fp
   13406:	mov	r0, r9
   13408:	bl	15248 <_sungetc_r>
   1340c:	cmp	r4, r5
   1340e:	bne.n	13400 <__ssvfscanf_r+0x148c>
   13410:	b.w	1215e <__ssvfscanf_r+0x1ea>
   13414:	.word	0x00014b8d
   13418:	.word	0x20000825
   1341c:	.word	0x20000614
   13420:	ands.w	r3, r4, #16
   13424:	str	r3, [r7, #52]	; 0x34
   13426:	beq.n	134e6 <__ssvfscanf_r+0x1572>
   13428:	movs	r5, #0
   1342a:	str	r5, [r7, #60]	; 0x3c
   1342c:	str	r5, [r7, #72]	; 0x48
   1342e:	mov	r6, r5
   13430:	movs	r4, #0
   13432:	mov	r3, r9
   13434:	mov	r9, r8
   13436:	mov	r8, r5
   13438:	mov	r5, r4
   1343a:	mov	r4, r3
   1343c:	bl	e6fc <__locale_mb_cur_max>
   13440:	cmp	r0, r5
   13442:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   13446:	ldrd	r3, r2, [fp]
   1344a:	ldrb.w	r1, [r3], #1
   1344e:	subs	r2, #1
   13450:	strd	r3, r2, [fp]
   13454:	ldr	r2, [r7, #36]	; 0x24
   13456:	add.w	r0, r7, #368	; 0x170
   1345a:	cmp	r2, #3
   1345c:	strb	r1, [r0, r5]
   1345e:	add.w	r3, r5, #1
   13462:	add.w	r5, r7, #104	; 0x68
   13466:	bne.n	1346e <__ssvfscanf_r+0x14fa>
   13468:	ldr	r2, [r5, #0]
   1346a:	cmp	r2, #4
   1346c:	beq.n	1347c <__ssvfscanf_r+0x1508>
   1346e:	movs	r2, #8
   13470:	movs	r1, #0
   13472:	mov	r0, r5
   13474:	str	r3, [r7, #40]	; 0x28
   13476:	bl	9c1c <memset>
   1347a:	ldr	r3, [r7, #40]	; 0x28
   1347c:	str	r5, [sp, #0]
   1347e:	add.w	r2, r7, #368	; 0x170
   13482:	mov	r1, r6
   13484:	mov	r0, r4
   13486:	str	r3, [r7, #40]	; 0x28
   13488:	bl	14ea0 <_mbrtowc_r>
   1348c:	adds	r3, r0, #1
   1348e:	str	r0, [r7, #36]	; 0x24
   13490:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   13494:	ldr	r3, [r7, #40]	; 0x28
   13496:	cmp	r0, #0
   13498:	bne.w	1372a <__ssvfscanf_r+0x17b6>
   1349c:	ldr	r2, [r7, #52]	; 0x34
   1349e:	cbnz	r2, 134a2 <__ssvfscanf_r+0x152e>
   134a0:	str	r2, [r6, #0]
   134a2:	add	sl, r3
   134a4:	add.w	r9, r9, #4294967295
   134a8:	ldr	r3, [r7, #52]	; 0x34
   134aa:	cmp	r3, #0
   134ac:	bne.w	1379a <__ssvfscanf_r+0x1826>
   134b0:	ldr	r3, [r7, #72]	; 0x48
   134b2:	cmp	r3, #0
   134b4:	beq.w	13798 <__ssvfscanf_r+0x1824>
   134b8:	ldr	r3, [r7, #60]	; 0x3c
   134ba:	subs	r5, r6, r3
   134bc:	cmp.w	r8, r5, asr #2
   134c0:	bhi.w	13798 <__ssvfscanf_r+0x1824>
   134c4:	mov	r0, r3
   134c6:	mov.w	r1, r8, lsl #3
   134ca:	bl	cbf8 <realloc>
   134ce:	str	r0, [r7, #60]	; 0x3c
   134d0:	cmp	r0, #0
   134d2:	bne.w	1378e <__ssvfscanf_r+0x181a>
   134d6:	ldr	r3, [r7, #64]	; 0x40
   134d8:	cmp	r3, #0
   134da:	bne.n	13538 <__ssvfscanf_r+0x15c4>
   134dc:	mov.w	r3, #4294967295
   134e0:	str	r3, [r7, #68]	; 0x44
   134e2:	b.w	12174 <__ssvfscanf_r+0x200>
   134e6:	lsls	r2, r4, #24
   134e8:	bpl.w	1360a <__ssvfscanf_r+0x1696>
   134ec:	ldr	r4, [r7, #48]	; 0x30
   134ee:	ldr.w	r3, [r4], #4
   134f2:	str	r3, [r7, #72]	; 0x48
   134f4:	cmp	r3, #0
   134f6:	beq.w	1215e <__ssvfscanf_r+0x1ea>
   134fa:	movs	r0, #128	; 0x80
   134fc:	bl	c660 <malloc>
   13500:	mov	r6, r0
   13502:	cmp	r0, #0
   13504:	beq.n	134d6 <__ssvfscanf_r+0x1562>
   13506:	ldr	r3, [r7, #72]	; 0x48
   13508:	str	r0, [r3, #0]
   1350a:	ldr	r3, [r7, #64]	; 0x40
   1350c:	ldrh	r5, [r3, #6]
   1350e:	ldrh	r2, [r3, #4]
   13510:	cmp	r5, r2
   13512:	bcc.w	1367c <__ssvfscanf_r+0x1708>
   13516:	movw	r1, #65526	; 0xfff6
   1351a:	cmp	r2, r1
   1351c:	bhi.n	135cc <__ssvfscanf_r+0x1658>
   1351e:	adds	r2, #8
   13520:	uxth	r3, r2
   13522:	ldr	r2, [r7, #64]	; 0x40
   13524:	str	r3, [r7, #60]	; 0x3c
   13526:	lsls	r1, r3, #2
   13528:	ldr	r0, [r2, #0]
   1352a:	bl	cbf8 <realloc>
   1352e:	ldr	r3, [r7, #60]	; 0x3c
   13530:	cmp	r0, #0
   13532:	bne.w	13692 <__ssvfscanf_r+0x171e>
   13536:	ldr	r3, [r7, #64]	; 0x40
   13538:	ldrh	r3, [r3, #6]
   1353a:	ldr	r2, [r7, #64]	; 0x40
   1353c:	mov	r6, r3
   1353e:	ldr.w	r8, [r2]
   13542:	b.n	13208 <__ssvfscanf_r+0x1294>
   13544:	mov	r3, r5
   13546:	ldr	r5, [r7, #40]	; 0x28
   13548:	cmp	r3, r5
   1354a:	bls.w	1215e <__ssvfscanf_r+0x1ea>
   1354e:	mov	r4, r3
   13550:	ldrb.w	r1, [r4, #-1]!
   13554:	mov	r2, fp
   13556:	mov	r0, r9
   13558:	bl	15248 <_sungetc_r>
   1355c:	cmp	r4, r5
   1355e:	bne.n	13550 <__ssvfscanf_r+0x15dc>
   13560:	b.w	1215e <__ssvfscanf_r+0x1ea>
   13564:	mov	r0, r2
   13566:	lsls	r1, r3, #3
   13568:	mov	r6, r3
   1356a:	bl	cbf8 <realloc>
   1356e:	str	r0, [r7, #40]	; 0x28
   13570:	cmp	r0, #0
   13572:	beq.n	134d6 <__ssvfscanf_r+0x1562>
   13574:	adds	r2, r0, r5
   13576:	str	r2, [r7, #72]	; 0x48
   13578:	ldr	r2, [r7, #60]	; 0x3c
   1357a:	ldr	r5, [r7, #52]	; 0x34
   1357c:	str	r0, [r2, #0]
   1357e:	lsls	r3, r6, #1
   13580:	str	r3, [r7, #32]
   13582:	b.n	12f76 <__ssvfscanf_r+0x1002>
   13584:	ldr.w	r8, [r7, #60]	; 0x3c
   13588:	b.n	13208 <__ssvfscanf_r+0x1294>
   1358a:	ldr	r1, [r7, #64]	; 0x40
   1358c:	str	r0, [r5, #0]
   1358e:	ldrh	r6, [r1, #6]
   13590:	ldrh	r2, [r1, #4]
   13592:	cmp	r6, r2
   13594:	bcc.w	136b4 <__ssvfscanf_r+0x1740>
   13598:	movw	r1, #65526	; 0xfff6
   1359c:	cmp	r2, r1
   1359e:	str	r0, [r7, #48]	; 0x30
   135a0:	bls.w	136ee <__ssvfscanf_r+0x177a>
   135a4:	ldr	r3, [r7, #64]	; 0x40
   135a6:	ldr.w	r8, [r3]
   135aa:	b.n	13208 <__ssvfscanf_r+0x1294>
   135ac:	ldr	r2, [r7, #40]	; 0x28
   135ae:	cmp	r5, r2
   135b0:	bls.w	1215e <__ssvfscanf_r+0x1ea>
   135b4:	mov	r4, r5
   135b6:	ldr	r5, [r7, #40]	; 0x28
   135b8:	ldrb.w	r1, [r4, #-1]!
   135bc:	mov	r2, fp
   135be:	mov	r0, r9
   135c0:	bl	15248 <_sungetc_r>
   135c4:	cmp	r4, r5
   135c6:	bne.n	135b8 <__ssvfscanf_r+0x1644>
   135c8:	b.w	1215e <__ssvfscanf_r+0x1ea>
   135cc:	mov	r3, r5
   135ce:	b.n	1353a <__ssvfscanf_r+0x15c6>
   135d0:	bl	14e9c <_strtoull_r>
   135d4:	b.n	1315a <__ssvfscanf_r+0x11e6>
   135d6:	ldr.w	r3, [r8]
   135da:	mov	r5, r3
   135dc:	adds	r3, #1
   135de:	bne.w	1278c <__ssvfscanf_r+0x818>
   135e2:	mov	r2, r5
   135e4:	b.w	127b8 <__ssvfscanf_r+0x844>
   135e8:	ldr	r3, [r7, #72]	; 0x48
   135ea:	ldr	r0, [r3, #0]
   135ec:	bl	14f58 <iswspace>
   135f0:	cmp	r0, #0
   135f2:	bne.w	13346 <__ssvfscanf_r+0x13d2>
   135f6:	cmp	r4, #3
   135f8:	add	sl, r5
   135fa:	bne.w	12690 <__ssvfscanf_r+0x71c>
   135fe:	ldr	r3, [r6, #0]
   13600:	cmp	r3, #4
   13602:	bne.w	12690 <__ssvfscanf_r+0x71c>
   13606:	b.w	12694 <__ssvfscanf_r+0x720>
   1360a:	ldrd	r3, r2, [r7, #48]	; 0x30
   1360e:	ldr.w	r6, [r3], #4
   13612:	str	r3, [r7, #48]	; 0x30
   13614:	mov	r5, r2
   13616:	str	r2, [r7, #60]	; 0x3c
   13618:	str	r2, [r7, #72]	; 0x48
   1361a:	b.n	13430 <__ssvfscanf_r+0x14bc>
   1361c:	mov	r4, r3
   1361e:	ldr.w	r3, [fp, #4]
   13622:	cmp	r8, r3
   13624:	ble.n	1369a <__ssvfscanf_r+0x1726>
   13626:	ldr.w	r2, [fp]
   1362a:	add	r2, r3
   1362c:	str.w	r2, [fp]
   13630:	mov	r1, fp
   13632:	mov	r0, r9
   13634:	add	r4, r3
   13636:	sub.w	r8, r8, r3
   1363a:	bl	152c8 <__ssrefill_r>
   1363e:	cmp	r0, #0
   13640:	beq.n	1361e <__ssvfscanf_r+0x16aa>
   13642:	cmp	r4, #0
   13644:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   13648:	add	sl, r4
   1364a:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   1364e:	ldr	r5, [r7, #48]	; 0x30
   13650:	mov	r3, r8
   13652:	ldr	r1, [r5, #0]
   13654:	str.w	fp, [sp]
   13658:	movs	r2, #1
   1365a:	mov	r0, r9
   1365c:	bl	15304 <_sfread_r>
   13660:	mov	r4, r0
   13662:	cmp	r0, #0
   13664:	beq.w	1214c <__ssvfscanf_r+0x1d8>
   13668:	adds	r5, #4
   1366a:	str	r5, [r7, #72]	; 0x48
   1366c:	ldr	r3, [r7, #68]	; 0x44
   1366e:	adds	r3, #1
   13670:	str	r3, [r7, #68]	; 0x44
   13672:	ldr	r3, [r7, #72]	; 0x48
   13674:	str	r3, [r7, #48]	; 0x30
   13676:	add	sl, r4
   13678:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   1367c:	ldr	r0, [r3, #0]
   1367e:	ldr	r3, [r7, #72]	; 0x48
   13680:	str.w	r3, [r0, r5, lsl #2]
   13684:	ldr	r3, [r7, #64]	; 0x40
   13686:	str	r4, [r7, #48]	; 0x30
   13688:	adds	r5, #1
   1368a:	strh	r5, [r3, #6]
   1368c:	str	r6, [r7, #60]	; 0x3c
   1368e:	movs	r5, #32
   13690:	b.n	13430 <__ssvfscanf_r+0x14bc>
   13692:	ldr	r2, [r7, #64]	; 0x40
   13694:	strh	r3, [r2, #4]
   13696:	str	r0, [r2, #0]
   13698:	b.n	1367e <__ssvfscanf_r+0x170a>
   1369a:	sub.w	r3, r3, r8
   1369e:	str.w	r3, [fp, #4]
   136a2:	ldr.w	r3, [fp]
   136a6:	add	r4, r8
   136a8:	add	r3, r8
   136aa:	str.w	r3, [fp]
   136ae:	add	sl, r4
   136b0:	b.w	11fc2 <__ssvfscanf_r+0x4e>
   136b4:	ldr	r2, [r1, #0]
   136b6:	str	r2, [r7, #60]	; 0x3c
   136b8:	ldr	r2, [r7, #60]	; 0x3c
   136ba:	str.w	r5, [r2, r6, lsl #2]
   136be:	ldr	r2, [r7, #64]	; 0x40
   136c0:	adds	r6, #1
   136c2:	uxth	r6, r6
   136c4:	strh	r6, [r2, #6]
   136c6:	mov	r1, r3
   136c8:	str.w	fp, [sp]
   136cc:	mov	r3, r8
   136ce:	movs	r2, #1
   136d0:	mov	r0, r9
   136d2:	bl	15304 <_sfread_r>
   136d6:	mov	r4, r0
   136d8:	cbz	r0, 13712 <__ssvfscanf_r+0x179e>
   136da:	cmp	r8, r0
   136dc:	bls.n	1366c <__ssvfscanf_r+0x16f8>
   136de:	ldr	r0, [r5, #0]
   136e0:	mov	r1, r4
   136e2:	bl	cbf8 <realloc>
   136e6:	cmp	r0, #0
   136e8:	beq.n	1366c <__ssvfscanf_r+0x16f8>
   136ea:	str	r0, [r5, #0]
   136ec:	b.n	1366c <__ssvfscanf_r+0x16f8>
   136ee:	ldr	r3, [r7, #64]	; 0x40
   136f0:	adds	r2, #8
   136f2:	uxth	r4, r2
   136f4:	ldr	r2, [r3, #0]
   136f6:	str	r2, [r7, #52]	; 0x34
   136f8:	mov	r0, r2
   136fa:	lsls	r1, r4, #2
   136fc:	bl	cbf8 <realloc>
   13700:	ldr	r2, [r7, #52]	; 0x34
   13702:	str	r0, [r7, #60]	; 0x3c
   13704:	cmp	r0, #0
   13706:	beq.n	137c0 <__ssvfscanf_r+0x184c>
   13708:	ldr	r3, [r7, #64]	; 0x40
   1370a:	strh	r4, [r3, #4]
   1370c:	str	r0, [r3, #0]
   1370e:	ldr	r3, [r7, #48]	; 0x30
   13710:	b.n	136b8 <__ssvfscanf_r+0x1744>
   13712:	ldr	r3, [r7, #68]	; 0x44
   13714:	ldr.w	r8, [r7, #60]	; 0x3c
   13718:	cmp	r3, #0
   1371a:	beq.w	13208 <__ssvfscanf_r+0x1294>
   1371e:	ldrh.w	r3, [fp, #12]
   13722:	lsls	r3, r3, #25
   13724:	bpl.w	12162 <__ssvfscanf_r+0x1ee>
   13728:	b.n	13200 <__ssvfscanf_r+0x128c>
   1372a:	ldr	r2, [r7, #36]	; 0x24
   1372c:	adds	r2, #2
   1372e:	bne.n	1376c <__ssvfscanf_r+0x17f8>
   13730:	ldr.w	r2, [fp, #4]
   13734:	cmp	r2, #0
   13736:	mov	r5, r3
   13738:	bgt.w	1343c <__ssvfscanf_r+0x14c8>
   1373c:	mov	r1, fp
   1373e:	mov	r0, r4
   13740:	bl	152c8 <__ssrefill_r>
   13744:	cbnz	r0, 13780 <__ssvfscanf_r+0x180c>
   13746:	cmp.w	r9, #0
   1374a:	bne.w	1343c <__ssvfscanf_r+0x14c8>
   1374e:	mov	r5, r8
   13750:	mov	r9, r4
   13752:	ldr	r3, [r7, #72]	; 0x48
   13754:	cbz	r3, 13760 <__ssvfscanf_r+0x17ec>
   13756:	ldr	r3, [r7, #60]	; 0x3c
   13758:	subs	r1, r6, r3
   1375a:	cmp.w	r5, r1, asr #2
   1375e:	bhi.n	137b0 <__ssvfscanf_r+0x183c>
   13760:	ldr	r3, [r7, #52]	; 0x34
   13762:	cmp	r3, #0
   13764:	bne.w	11fc2 <__ssvfscanf_r+0x4e>
   13768:	b.w	12ba4 <__ssvfscanf_r+0xc30>
   1376c:	add	sl, r3
   1376e:	ldr	r3, [r7, #36]	; 0x24
   13770:	cmp	r3, #3
   13772:	bne.w	134a4 <__ssvfscanf_r+0x1530>
   13776:	ldr	r3, [r5, #0]
   13778:	cmp	r3, #4
   1377a:	bne.w	134a4 <__ssvfscanf_r+0x1530>
   1377e:	b.n	134a8 <__ssvfscanf_r+0x1534>
   13780:	mov	r9, r4
   13782:	mov	r4, r5
   13784:	mov	r5, r8
   13786:	cmp	r4, #0
   13788:	beq.n	13752 <__ssvfscanf_r+0x17de>
   1378a:	b.w	1214c <__ssvfscanf_r+0x1d8>
   1378e:	ldr	r2, [r7, #72]	; 0x48
   13790:	adds	r6, r0, r5
   13792:	str	r0, [r2, #0]
   13794:	mov.w	r8, r8, lsl #1
   13798:	adds	r6, #4
   1379a:	ldr.w	r3, [fp, #4]
   1379e:	cmp	r3, #0
   137a0:	mov.w	r5, #0
   137a4:	ble.n	1373c <__ssvfscanf_r+0x17c8>
   137a6:	cmp.w	r9, #0
   137aa:	bne.w	1343c <__ssvfscanf_r+0x14c8>
   137ae:	b.n	1374e <__ssvfscanf_r+0x17da>
   137b0:	ldr	r4, [r7, #72]	; 0x48
   137b2:	ldr	r0, [r4, #0]
   137b4:	bl	cbf8 <realloc>
   137b8:	cmp	r0, #0
   137ba:	beq.n	13760 <__ssvfscanf_r+0x17ec>
   137bc:	str	r0, [r4, #0]
   137be:	b.n	13760 <__ssvfscanf_r+0x17ec>
   137c0:	mov	r8, r2
   137c2:	b.n	13208 <__ssvfscanf_r+0x1294>

000137c4 <_fclose_r>:
   137c4:	push	{r4, r5, r6, lr}
   137c6:	cmp	r1, #0
   137c8:	beq.n	13862 <_fclose_r+0x9e>
   137ca:	mov	r6, r0
   137cc:	mov	r4, r1
   137ce:	cbz	r0, 137d6 <_fclose_r+0x12>
   137d0:	ldr	r3, [r0, #52]	; 0x34
   137d2:	cmp	r3, #0
   137d4:	beq.n	13868 <_fclose_r+0xa4>
   137d6:	ldr	r3, [r4, #100]	; 0x64
   137d8:	lsls	r0, r3, #31
   137da:	bpl.n	13846 <_fclose_r+0x82>
   137dc:	ldrsh.w	r3, [r4, #12]
   137e0:	cmp	r3, #0
   137e2:	beq.n	13862 <_fclose_r+0x9e>
   137e4:	mov	r1, r4
   137e6:	mov	r0, r6
   137e8:	bl	1388c <__sflush_r>
   137ec:	ldr	r3, [r4, #44]	; 0x2c
   137ee:	mov	r5, r0
   137f0:	cbz	r3, 13800 <_fclose_r+0x3c>
   137f2:	ldr	r1, [r4, #28]
   137f4:	mov	r0, r6
   137f6:	blx	r3
   137f8:	cmp	r0, #0
   137fa:	it	lt
   137fc:	movlt.w	r5, #4294967295
   13800:	ldrh	r3, [r4, #12]
   13802:	lsls	r2, r3, #24
   13804:	bmi.n	13880 <_fclose_r+0xbc>
   13806:	ldr	r1, [r4, #48]	; 0x30
   13808:	cbz	r1, 1381c <_fclose_r+0x58>
   1380a:	add.w	r3, r4, #64	; 0x40
   1380e:	cmp	r1, r3
   13810:	beq.n	13818 <_fclose_r+0x54>
   13812:	mov	r0, r6
   13814:	bl	eea4 <_free_r>
   13818:	movs	r3, #0
   1381a:	str	r3, [r4, #48]	; 0x30
   1381c:	ldr	r1, [r4, #68]	; 0x44
   1381e:	cbz	r1, 1382a <_fclose_r+0x66>
   13820:	mov	r0, r6
   13822:	bl	eea4 <_free_r>
   13826:	movs	r3, #0
   13828:	str	r3, [r4, #68]	; 0x44
   1382a:	bl	e12c <__sfp_lock_acquire>
   1382e:	ldr	r3, [r4, #100]	; 0x64
   13830:	movs	r2, #0
   13832:	lsls	r3, r3, #31
   13834:	strh	r2, [r4, #12]
   13836:	bpl.n	13878 <_fclose_r+0xb4>
   13838:	ldr	r0, [r4, #88]	; 0x58
   1383a:	bl	e82c <__retarget_lock_close_recursive>
   1383e:	bl	e138 <__sfp_lock_release>
   13842:	mov	r0, r5
   13844:	pop	{r4, r5, r6, pc}
   13846:	ldrh	r3, [r4, #12]
   13848:	lsls	r1, r3, #22
   1384a:	bmi.n	137e4 <_fclose_r+0x20>
   1384c:	ldr	r0, [r4, #88]	; 0x58
   1384e:	bl	e830 <__retarget_lock_acquire_recursive>
   13852:	ldrsh.w	r3, [r4, #12]
   13856:	cmp	r3, #0
   13858:	bne.n	137e4 <_fclose_r+0x20>
   1385a:	ldr	r5, [r4, #100]	; 0x64
   1385c:	ands.w	r5, r5, #1
   13860:	beq.n	1386e <_fclose_r+0xaa>
   13862:	movs	r5, #0
   13864:	mov	r0, r5
   13866:	pop	{r4, r5, r6, pc}
   13868:	bl	e0f0 <__sinit>
   1386c:	b.n	137d6 <_fclose_r+0x12>
   1386e:	ldr	r0, [r4, #88]	; 0x58
   13870:	bl	e834 <__retarget_lock_release_recursive>
   13874:	mov	r0, r5
   13876:	pop	{r4, r5, r6, pc}
   13878:	ldr	r0, [r4, #88]	; 0x58
   1387a:	bl	e834 <__retarget_lock_release_recursive>
   1387e:	b.n	13838 <_fclose_r+0x74>
   13880:	ldr	r1, [r4, #16]
   13882:	mov	r0, r6
   13884:	bl	eea4 <_free_r>
   13888:	b.n	13806 <_fclose_r+0x42>
   1388a:	nop

0001388c <__sflush_r>:
   1388c:	ldrsh.w	r2, [r1, #12]
   13890:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13894:	mov	r4, r1
   13896:	lsls	r1, r2, #28
   13898:	mov	r8, r0
   1389a:	bmi.n	1392c <__sflush_r+0xa0>
   1389c:	ldr	r3, [r4, #4]
   1389e:	orr.w	r2, r2, #2048	; 0x800
   138a2:	cmp	r3, #0
   138a4:	strh	r2, [r4, #12]
   138a6:	ble.n	13966 <__sflush_r+0xda>
   138a8:	ldr	r5, [r4, #40]	; 0x28
   138aa:	cmp	r5, #0
   138ac:	beq.n	13960 <__sflush_r+0xd4>
   138ae:	movs	r3, #0
   138b0:	ldr.w	r6, [r8]
   138b4:	str.w	r3, [r8]
   138b8:	uxth	r3, r2
   138ba:	ands.w	r2, r2, #4096	; 0x1000
   138be:	bne.n	1396e <__sflush_r+0xe2>
   138c0:	movs	r3, #1
   138c2:	ldr	r1, [r4, #28]
   138c4:	mov	r0, r8
   138c6:	blx	r5
   138c8:	adds	r3, r0, #1
   138ca:	beq.n	1399c <__sflush_r+0x110>
   138cc:	ldrh	r3, [r4, #12]
   138ce:	ldr	r5, [r4, #40]	; 0x28
   138d0:	lsls	r7, r3, #29
   138d2:	bpl.n	138e0 <__sflush_r+0x54>
   138d4:	ldr	r3, [r4, #4]
   138d6:	subs	r0, r0, r3
   138d8:	ldr	r3, [r4, #48]	; 0x30
   138da:	cbz	r3, 138e0 <__sflush_r+0x54>
   138dc:	ldr	r3, [r4, #60]	; 0x3c
   138de:	subs	r0, r0, r3
   138e0:	ldr	r1, [r4, #28]
   138e2:	mov	r2, r0
   138e4:	movs	r3, #0
   138e6:	mov	r0, r8
   138e8:	blx	r5
   138ea:	adds	r1, r0, #1
   138ec:	bne.n	13972 <__sflush_r+0xe6>
   138ee:	ldr.w	r3, [r8]
   138f2:	cmp	r3, #0
   138f4:	beq.n	13972 <__sflush_r+0xe6>
   138f6:	cmp	r3, #29
   138f8:	beq.n	138fe <__sflush_r+0x72>
   138fa:	cmp	r3, #22
   138fc:	bne.n	139ac <__sflush_r+0x120>
   138fe:	ldrh	r3, [r4, #12]
   13900:	ldr	r2, [r4, #16]
   13902:	str	r2, [r4, #0]
   13904:	bic.w	r3, r3, #2048	; 0x800
   13908:	movs	r1, #0
   1390a:	str	r1, [r4, #4]
   1390c:	strh	r3, [r4, #12]
   1390e:	ldr	r1, [r4, #48]	; 0x30
   13910:	str.w	r6, [r8]
   13914:	cbz	r1, 13960 <__sflush_r+0xd4>
   13916:	add.w	r3, r4, #64	; 0x40
   1391a:	cmp	r1, r3
   1391c:	beq.n	13924 <__sflush_r+0x98>
   1391e:	mov	r0, r8
   13920:	bl	eea4 <_free_r>
   13924:	movs	r0, #0
   13926:	str	r0, [r4, #48]	; 0x30
   13928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1392c:	ldr	r6, [r4, #16]
   1392e:	cbz	r6, 13960 <__sflush_r+0xd4>
   13930:	uxth	r3, r2
   13932:	ldr	r5, [r4, #0]
   13934:	str	r6, [r4, #0]
   13936:	lsls	r2, r3, #30
   13938:	ite	eq
   1393a:	ldreq	r3, [r4, #20]
   1393c:	movne	r3, #0
   1393e:	subs	r5, r5, r6
   13940:	str	r3, [r4, #8]
   13942:	b.n	1395c <__sflush_r+0xd0>
   13944:	mov	r3, r5
   13946:	mov	r2, r6
   13948:	ldr	r1, [r4, #28]
   1394a:	ldr	r7, [r4, #36]	; 0x24
   1394c:	mov	r0, r8
   1394e:	blx	r7
   13950:	subs.w	ip, r0, #0
   13954:	sub.w	r5, r5, ip
   13958:	add	r6, ip
   1395a:	ble.n	1398c <__sflush_r+0x100>
   1395c:	cmp	r5, #0
   1395e:	bgt.n	13944 <__sflush_r+0xb8>
   13960:	movs	r0, #0
   13962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13966:	ldr	r3, [r4, #60]	; 0x3c
   13968:	cmp	r3, #0
   1396a:	bgt.n	138a8 <__sflush_r+0x1c>
   1396c:	b.n	13960 <__sflush_r+0xd4>
   1396e:	ldr	r0, [r4, #80]	; 0x50
   13970:	b.n	138d0 <__sflush_r+0x44>
   13972:	ldrsh.w	r3, [r4, #12]
   13976:	ldr	r2, [r4, #16]
   13978:	str	r2, [r4, #0]
   1397a:	bic.w	r3, r3, #2048	; 0x800
   1397e:	strh	r3, [r4, #12]
   13980:	movs	r2, #0
   13982:	lsls	r3, r3, #19
   13984:	str	r2, [r4, #4]
   13986:	bpl.n	1390e <__sflush_r+0x82>
   13988:	str	r0, [r4, #80]	; 0x50
   1398a:	b.n	1390e <__sflush_r+0x82>
   1398c:	ldrh	r3, [r4, #12]
   1398e:	orr.w	r3, r3, #64	; 0x40
   13992:	mov.w	r0, #4294967295
   13996:	strh	r3, [r4, #12]
   13998:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1399c:	ldr.w	r3, [r8]
   139a0:	cmp	r3, #0
   139a2:	beq.n	138cc <__sflush_r+0x40>
   139a4:	cmp	r3, #29
   139a6:	beq.n	139b6 <__sflush_r+0x12a>
   139a8:	cmp	r3, #22
   139aa:	beq.n	139b6 <__sflush_r+0x12a>
   139ac:	ldrh	r3, [r4, #12]
   139ae:	orr.w	r3, r3, #64	; 0x40
   139b2:	strh	r3, [r4, #12]
   139b4:	b.n	13962 <__sflush_r+0xd6>
   139b6:	str.w	r6, [r8]
   139ba:	b.n	13960 <__sflush_r+0xd4>

000139bc <_fflush_r>:
   139bc:	push	{r3, r4, r5, lr}
   139be:	mov	r4, r1
   139c0:	mov	r5, r0
   139c2:	cbz	r0, 139c8 <_fflush_r+0xc>
   139c4:	ldr	r3, [r0, #52]	; 0x34
   139c6:	cbz	r3, 13a0a <_fflush_r+0x4e>
   139c8:	ldrsh.w	r0, [r4, #12]
   139cc:	cbz	r0, 139f2 <_fflush_r+0x36>
   139ce:	ldr	r3, [r4, #100]	; 0x64
   139d0:	lsls	r3, r3, #31
   139d2:	bmi.n	139d8 <_fflush_r+0x1c>
   139d4:	lsls	r1, r0, #22
   139d6:	bpl.n	139f8 <_fflush_r+0x3c>
   139d8:	mov	r0, r5
   139da:	mov	r1, r4
   139dc:	bl	1388c <__sflush_r>
   139e0:	ldr	r3, [r4, #100]	; 0x64
   139e2:	lsls	r2, r3, #31
   139e4:	mov	r5, r0
   139e6:	bmi.n	139ee <_fflush_r+0x32>
   139e8:	ldrh	r3, [r4, #12]
   139ea:	lsls	r3, r3, #22
   139ec:	bpl.n	13a00 <_fflush_r+0x44>
   139ee:	mov	r0, r5
   139f0:	pop	{r3, r4, r5, pc}
   139f2:	mov	r5, r0
   139f4:	mov	r0, r5
   139f6:	pop	{r3, r4, r5, pc}
   139f8:	ldr	r0, [r4, #88]	; 0x58
   139fa:	bl	e830 <__retarget_lock_acquire_recursive>
   139fe:	b.n	139d8 <_fflush_r+0x1c>
   13a00:	ldr	r0, [r4, #88]	; 0x58
   13a02:	bl	e834 <__retarget_lock_release_recursive>
   13a06:	mov	r0, r5
   13a08:	pop	{r3, r4, r5, pc}
   13a0a:	bl	e0f0 <__sinit>
   13a0e:	b.n	139c8 <_fflush_r+0xc>

00013a10 <__sccl>:
   13a10:	push	{r4, r5, r6, lr}
   13a12:	ldrb	r4, [r1, #0]
   13a14:	cmp	r4, #94	; 0x5e
   13a16:	mov	lr, r0
   13a18:	beq.n	13a58 <__sccl+0x48>
   13a1a:	movs	r2, #0
   13a1c:	adds	r0, r1, #1
   13a1e:	mov	ip, r2
   13a20:	add.w	r3, lr, #4294967295
   13a24:	add.w	r1, lr, #255	; 0xff
   13a28:	strb.w	r2, [r3, #1]!
   13a2c:	cmp	r3, r1
   13a2e:	bne.n	13a28 <__sccl+0x18>
   13a30:	cbz	r4, 13a54 <__sccl+0x44>
   13a32:	eor.w	r1, ip, #1
   13a36:	strb.w	r1, [lr, r4]
   13a3a:	adds	r5, r0, #1
   13a3c:	ldrb.w	r3, [r5, #-1]
   13a40:	cmp	r3, #45	; 0x2d
   13a42:	beq.n	13a62 <__sccl+0x52>
   13a44:	cmp	r3, #93	; 0x5d
   13a46:	beq.n	13a50 <__sccl+0x40>
   13a48:	cbz	r3, 13a52 <__sccl+0x42>
   13a4a:	mov	r4, r3
   13a4c:	mov	r0, r5
   13a4e:	b.n	13a36 <__sccl+0x26>
   13a50:	mov	r0, r5
   13a52:	pop	{r4, r5, r6, pc}
   13a54:	subs	r0, #1
   13a56:	pop	{r4, r5, r6, pc}
   13a58:	movs	r2, #1
   13a5a:	ldrb	r4, [r1, #1]
   13a5c:	adds	r0, r1, #2
   13a5e:	mov	ip, r2
   13a60:	b.n	13a20 <__sccl+0x10>
   13a62:	ldrb.w	ip, [r0, #1]
   13a66:	cmp.w	ip, #93	; 0x5d
   13a6a:	beq.n	13a4a <__sccl+0x3a>
   13a6c:	cmp	r4, ip
   13a6e:	bgt.n	13a4a <__sccl+0x3a>
   13a70:	adds	r6, r4, #1
   13a72:	adds	r0, #2
   13a74:	add.w	r2, lr, r6
   13a78:	strb.w	r1, [r2], #1
   13a7c:	sub.w	r3, r2, lr
   13a80:	subs	r3, #1
   13a82:	cmp	ip, r3
   13a84:	bgt.n	13a78 <__sccl+0x68>
   13a86:	sub.w	r3, ip, r4
   13a8a:	subs	r3, #1
   13a8c:	cmp	r4, ip
   13a8e:	it	ge
   13a90:	movge	r3, #0
   13a92:	adds	r5, #2
   13a94:	adds	r4, r3, r6
   13a96:	b.n	13a3c <__sccl+0x2c>

00013a98 <stpncpy>:
   13a98:	orr.w	r3, r1, r0
   13a9c:	lsls	r3, r3, #30
   13a9e:	push	{r4, r5}
   13aa0:	bne.n	13aa6 <stpncpy+0xe>
   13aa2:	cmp	r2, #3
   13aa4:	bhi.n	13ac6 <stpncpy+0x2e>
   13aa6:	add.w	ip, r1, #4294967295
   13aaa:	b.n	13abc <stpncpy+0x24>
   13aac:	ldrb.w	r1, [ip, #1]!
   13ab0:	strb.w	r1, [r3], #1
   13ab4:	subs	r4, r2, #1
   13ab6:	cbz	r1, 13aea <stpncpy+0x52>
   13ab8:	mov	r2, r4
   13aba:	mov	r0, r3
   13abc:	mov	r3, r0
   13abe:	cmp	r2, #0
   13ac0:	bne.n	13aac <stpncpy+0x14>
   13ac2:	pop	{r4, r5}
   13ac4:	bx	lr
   13ac6:	mov	r3, r1
   13ac8:	mov	r1, r3
   13aca:	ldr.w	r5, [r3], #4
   13ace:	sub.w	r4, r5, #16843009	; 0x1010101
   13ad2:	bic.w	r4, r4, r5
   13ad6:	tst.w	r4, #2155905152	; 0x80808080
   13ada:	bne.n	13aa6 <stpncpy+0xe>
   13adc:	subs	r2, #4
   13ade:	cmp	r2, #3
   13ae0:	str.w	r5, [r0], #4
   13ae4:	mov	r1, r3
   13ae6:	bhi.n	13ac8 <stpncpy+0x30>
   13ae8:	b.n	13aa6 <stpncpy+0xe>
   13aea:	add	r2, r0
   13aec:	cmp	r4, #0
   13aee:	beq.n	13ac2 <stpncpy+0x2a>
   13af0:	strb.w	r1, [r3], #1
   13af4:	cmp	r3, r2
   13af6:	bne.n	13af0 <stpncpy+0x58>
   13af8:	pop	{r4, r5}
   13afa:	bx	lr

00013afc <_localeconv_r>:
   13afc:	ldr	r0, [pc, #0]	; (13b00 <_localeconv_r+0x4>)
   13afe:	bx	lr
   13b00:	.word	0x20008e74
   13b04:	.word	0x00000000

00013b08 <frexp>:
   13b08:	push	{r4, r5}
   13b0a:	sub	sp, #8
   13b0c:	vstr	d0, [sp]
   13b10:	ldr	r2, [sp, #4]
   13b12:	ldr	r4, [pc, #100]	; (13b78 <frexp+0x70>)
   13b14:	bic.w	r3, r2, #2147483648	; 0x80000000
   13b18:	movs	r1, #0
   13b1a:	cmp	r3, r4
   13b1c:	str	r1, [r0, #0]
   13b1e:	bgt.n	13b64 <frexp+0x5c>
   13b20:	ldr	r4, [sp, #0]
   13b22:	orrs	r4, r3
   13b24:	beq.n	13b64 <frexp+0x5c>
   13b26:	ldr	r4, [pc, #84]	; (13b7c <frexp+0x74>)
   13b28:	ands	r4, r2
   13b2a:	cbnz	r4, 13b42 <frexp+0x3a>
   13b2c:	vldr	d7, [pc, #64]	; 13b70 <frexp+0x68>
   13b30:	vmul.f64	d7, d0, d7
   13b34:	vstr	d7, [sp]
   13b38:	ldr	r2, [sp, #4]
   13b3a:	mvn.w	r1, #53	; 0x35
   13b3e:	bic.w	r3, r2, #2147483648	; 0x80000000
   13b42:	bic.w	r2, r2, #2139095040	; 0x7f800000
   13b46:	ldrd	r4, r5, [sp]
   13b4a:	bic.w	r2, r2, #7340032	; 0x700000
   13b4e:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   13b52:	asrs	r3, r3, #20
   13b54:	orr.w	r5, r5, #2097152	; 0x200000
   13b58:	subw	r3, r3, #1022	; 0x3fe
   13b5c:	strd	r4, r5, [sp]
   13b60:	add	r3, r1
   13b62:	str	r3, [r0, #0]
   13b64:	vldr	d0, [sp]
   13b68:	add	sp, #8
   13b6a:	pop	{r4, r5}
   13b6c:	bx	lr
   13b6e:	nop
   13b70:	.word	0x00000000
   13b74:	.word	0x43500000
   13b78:	.word	0x7fefffff
   13b7c:	.word	0x7ff00000

00013b80 <__assert_func>:
   13b80:	push	{lr}
   13b82:	ldr	r4, [pc, #44]	; (13bb0 <__assert_func+0x30>)
   13b84:	ldr	r5, [r4, #0]
   13b86:	mov	r4, r2
   13b88:	ldr	r6, [r5, #12]
   13b8a:	mov	r2, r3
   13b8c:	sub	sp, #20
   13b8e:	mov	r3, r0
   13b90:	mov	r5, r1
   13b92:	cbz	r4, 13ba8 <__assert_func+0x28>
   13b94:	ldr	r1, [pc, #28]	; (13bb4 <__assert_func+0x34>)
   13b96:	str	r5, [sp, #0]
   13b98:	strd	r1, r4, [sp, #4]
   13b9c:	mov	r0, r6
   13b9e:	ldr	r1, [pc, #24]	; (13bb8 <__assert_func+0x38>)
   13ba0:	bl	15120 <fiprintf>
   13ba4:	bl	b39e <abort>
   13ba8:	ldr	r1, [pc, #16]	; (13bbc <__assert_func+0x3c>)
   13baa:	mov	r4, r1
   13bac:	b.n	13b96 <__assert_func+0x16>
   13bae:	nop
   13bb0:	.word	0x2000930c
   13bb4:	.word	0x20000608
   13bb8:	.word	0x20000618
   13bbc:	.word	0x20000614

00013bc0 <_calloc_r>:
   13bc0:	push	{r3, r4, r5, lr}
   13bc2:	umull	r1, r4, r1, r2
   13bc6:	cbnz	r4, 13c2c <_calloc_r+0x6c>
   13bc8:	bl	c680 <_malloc_r>
   13bcc:	mov	r5, r0
   13bce:	cbz	r0, 13c0a <_calloc_r+0x4a>
   13bd0:	ldr.w	r2, [r0, #-4]
   13bd4:	bic.w	r2, r2, #3
   13bd8:	subs	r2, #4
   13bda:	cmp	r2, #36	; 0x24
   13bdc:	bhi.n	13c0e <_calloc_r+0x4e>
   13bde:	cmp	r2, #19
   13be0:	bls.n	13c18 <_calloc_r+0x58>
   13be2:	cmp	r2, #27
   13be4:	strd	r4, r4, [r0]
   13be8:	bls.n	13c26 <_calloc_r+0x66>
   13bea:	cmp	r2, #36	; 0x24
   13bec:	ite	ne
   13bee:	addne.w	r2, r0, #16
   13bf2:	addeq.w	r2, r0, #24
   13bf6:	mov.w	r3, #0
   13bfa:	strd	r4, r4, [r0, #8]
   13bfe:	itt	eq
   13c00:	streq	r4, [r0, #16]
   13c02:	streq	r4, [r0, #20]
   13c04:	strd	r3, r3, [r2]
   13c08:	str	r3, [r2, #8]
   13c0a:	mov	r0, r5
   13c0c:	pop	{r3, r4, r5, pc}
   13c0e:	mov	r1, r4
   13c10:	bl	9c1c <memset>
   13c14:	mov	r0, r5
   13c16:	pop	{r3, r4, r5, pc}
   13c18:	mov	r2, r0
   13c1a:	movs	r3, #0
   13c1c:	strd	r3, r3, [r2]
   13c20:	str	r3, [r2, #8]
   13c22:	mov	r0, r5
   13c24:	pop	{r3, r4, r5, pc}
   13c26:	add.w	r2, r0, #8
   13c2a:	b.n	13c1a <_calloc_r+0x5a>
   13c2c:	bl	e7d4 <__errno>
   13c30:	movs	r3, #12
   13c32:	movs	r5, #0
   13c34:	str	r3, [r0, #0]
   13c36:	b.n	13c0a <_calloc_r+0x4a>

00013c38 <quorem>:
   13c38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c3c:	ldr	r3, [r0, #16]
   13c3e:	ldr	r4, [r1, #16]
   13c40:	cmp	r3, r4
   13c42:	sub	sp, #12
   13c44:	blt.w	13d56 <quorem+0x11e>
   13c48:	subs	r4, #1
   13c4a:	add.w	r5, r1, #20
   13c4e:	lsls	r3, r4, #2
   13c50:	add.w	r8, r0, #20
   13c54:	str	r3, [sp, #0]
   13c56:	ldr.w	r3, [r5, r4, lsl #2]
   13c5a:	ldr.w	r2, [r8, r4, lsl #2]
   13c5e:	adds	r3, #1
   13c60:	mov	r9, r0
   13c62:	cmp	r2, r3
   13c64:	add.w	r0, r8, r4, lsl #2
   13c68:	add.w	r7, r5, r4, lsl #2
   13c6c:	str	r0, [sp, #4]
   13c6e:	udiv	r6, r2, r3
   13c72:	bcc.n	13cec <quorem+0xb4>
   13c74:	mov.w	ip, #0
   13c78:	mov	lr, r5
   13c7a:	mov	r0, r8
   13c7c:	mov	sl, ip
   13c7e:	mov	r3, ip
   13c80:	ldr.w	fp, [lr], #4
   13c84:	ldr	r2, [r0, #0]
   13c86:	uxth.w	ip, fp
   13c8a:	mla	r3, r6, ip, r3
   13c8e:	mov.w	ip, r3, lsr #16
   13c92:	mov.w	fp, fp, lsr #16
   13c96:	mla	ip, r6, fp, ip
   13c9a:	uxth	r3, r3
   13c9c:	sub.w	r3, sl, r3
   13ca0:	uxth.w	sl, ip
   13ca4:	uxtah	r3, r3, r2
   13ca8:	rsb	r2, sl, r2, lsr #16
   13cac:	add.w	r2, r2, r3, asr #16
   13cb0:	uxth	r3, r3
   13cb2:	orr.w	r3, r3, r2, lsl #16
   13cb6:	cmp	r7, lr
   13cb8:	str.w	r3, [r0], #4
   13cbc:	mov.w	sl, r2, asr #16
   13cc0:	mov.w	r3, ip, lsr #16
   13cc4:	bcs.n	13c80 <quorem+0x48>
   13cc6:	ldr	r3, [sp, #0]
   13cc8:	ldr.w	r3, [r8, r3]
   13ccc:	cbnz	r3, 13cec <quorem+0xb4>
   13cce:	ldr	r3, [sp, #4]
   13cd0:	subs	r3, #4
   13cd2:	cmp	r8, r3
   13cd4:	bcc.n	13ce0 <quorem+0xa8>
   13cd6:	b.n	13ce8 <quorem+0xb0>
   13cd8:	cmp	r8, r3
   13cda:	add.w	r4, r4, #4294967295
   13cde:	bcs.n	13ce8 <quorem+0xb0>
   13ce0:	ldr.w	r2, [r3], #-4
   13ce4:	cmp	r2, #0
   13ce6:	beq.n	13cd8 <quorem+0xa0>
   13ce8:	str.w	r4, [r9, #16]
   13cec:	mov	r0, r9
   13cee:	bl	feb8 <__mcmp>
   13cf2:	cmp	r0, #0
   13cf4:	blt.n	13d4e <quorem+0x116>
   13cf6:	adds	r6, #1
   13cf8:	mov	r1, r8
   13cfa:	movs	r3, #0
   13cfc:	ldr.w	r0, [r5], #4
   13d00:	ldr.w	ip, [r1]
   13d04:	uxth	r2, r0
   13d06:	subs	r2, r3, r2
   13d08:	lsrs	r3, r0, #16
   13d0a:	uxtah	r2, r2, ip
   13d0e:	rsb	r3, r3, ip, lsr #16
   13d12:	add.w	r3, r3, r2, asr #16
   13d16:	uxth	r2, r2
   13d18:	orr.w	r2, r2, r3, lsl #16
   13d1c:	cmp	r7, r5
   13d1e:	str.w	r2, [r1], #4
   13d22:	mov.w	r3, r3, asr #16
   13d26:	bcs.n	13cfc <quorem+0xc4>
   13d28:	ldr.w	r2, [r8, r4, lsl #2]
   13d2c:	add.w	r3, r8, r4, lsl #2
   13d30:	cbnz	r2, 13d4e <quorem+0x116>
   13d32:	subs	r3, #4
   13d34:	cmp	r8, r3
   13d36:	bcc.n	13d42 <quorem+0x10a>
   13d38:	b.n	13d4a <quorem+0x112>
   13d3a:	cmp	r8, r3
   13d3c:	add.w	r4, r4, #4294967295
   13d40:	bcs.n	13d4a <quorem+0x112>
   13d42:	ldr.w	r2, [r3], #-4
   13d46:	cmp	r2, #0
   13d48:	beq.n	13d3a <quorem+0x102>
   13d4a:	str.w	r4, [r9, #16]
   13d4e:	mov	r0, r6
   13d50:	add	sp, #12
   13d52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d56:	movs	r0, #0
   13d58:	add	sp, #12
   13d5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d5e:	nop

00013d60 <_dtoa_r>:
   13d60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d64:	vpush	{d8}
   13d68:	sub	sp, #60	; 0x3c
   13d6a:	vstr	d0, [sp, #8]
   13d6e:	str	r1, [sp, #4]
   13d70:	ldr	r1, [r0, #56]	; 0x38
   13d72:	ldr	r5, [sp, #104]	; 0x68
   13d74:	str	r3, [sp, #20]
   13d76:	vmov	r6, r7, d0
   13d7a:	mov	r4, r0
   13d7c:	mov	fp, r2
   13d7e:	cbz	r1, 13d92 <_dtoa_r+0x32>
   13d80:	ldr	r2, [r0, #60]	; 0x3c
   13d82:	str	r2, [r1, #4]
   13d84:	movs	r3, #1
   13d86:	lsls	r3, r2
   13d88:	str	r3, [r1, #8]
   13d8a:	bl	f948 <_Bfree>
   13d8e:	movs	r3, #0
   13d90:	str	r3, [r4, #56]	; 0x38
   13d92:	subs.w	r8, r7, #0
   13d96:	ite	lt
   13d98:	movlt	r3, #1
   13d9a:	movge	r3, #0
   13d9c:	str	r3, [r5, #0]
   13d9e:	ldr	r3, [pc, #760]	; (14098 <_dtoa_r+0x338>)
   13da0:	itt	lt
   13da2:	biclt.w	r8, r8, #2147483648	; 0x80000000
   13da6:	strlt.w	r8, [sp, #12]
   13daa:	bics.w	r3, r3, r8
   13dae:	beq.w	13ef0 <_dtoa_r+0x190>
   13db2:	vldr	d8, [sp, #8]
   13db6:	vcmp.f64	d8, #0.0
   13dba:	vmrs	APSR_nzcv, fpscr
   13dbe:	bne.n	13de4 <_dtoa_r+0x84>
   13dc0:	ldr	r2, [sp, #20]
   13dc2:	movs	r3, #1
   13dc4:	str	r3, [r2, #0]
   13dc6:	ldr	r3, [sp, #108]	; 0x6c
   13dc8:	cmp	r3, #0
   13dca:	beq.w	1424c <_dtoa_r+0x4ec>
   13dce:	ldr	r3, [pc, #716]	; (1409c <_dtoa_r+0x33c>)
   13dd0:	ldr	r2, [sp, #108]	; 0x6c
   13dd2:	str	r3, [r2, #0]
   13dd4:	subs	r3, #1
   13dd6:	str	r3, [sp, #0]
   13dd8:	ldr	r0, [sp, #0]
   13dda:	add	sp, #60	; 0x3c
   13ddc:	vpop	{d8}
   13de0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de4:	add	r2, sp, #48	; 0x30
   13de6:	add	r1, sp, #52	; 0x34
   13de8:	mov	r0, r4
   13dea:	vmov.f64	d0, d8
   13dee:	bl	10178 <__d2b>
   13df2:	movs.w	r3, r8, lsr #20
   13df6:	mov	r5, r0
   13df8:	bne.w	13f20 <_dtoa_r+0x1c0>
   13dfc:	ldrd	r1, r3, [sp, #48]	; 0x30
   13e00:	add	r3, r1
   13e02:	addw	r2, r3, #1074	; 0x432
   13e06:	cmp	r2, #32
   13e08:	ble.w	14400 <_dtoa_r+0x6a0>
   13e0c:	rsb	r2, r2, #64	; 0x40
   13e10:	lsl.w	r8, r8, r2
   13e14:	addw	r2, r3, #1042	; 0x412
   13e18:	lsrs	r6, r2
   13e1a:	orr.w	r2, r8, r6
   13e1e:	vmov	s14, r2
   13e22:	vcvt.f64.u32	d7, s14
   13e26:	subs	r0, r3, #1
   13e28:	vmov	r6, s15
   13e2c:	vmov	r2, r3, d7
   13e30:	mov.w	sl, #1
   13e34:	sub.w	r3, r6, #32505856	; 0x1f00000
   13e38:	vldr	d3, [pc, #580]	; 14080 <_dtoa_r+0x320>
   13e3c:	vldr	d7, [pc, #584]	; 14088 <_dtoa_r+0x328>
   13e40:	vldr	d5, [pc, #588]	; 14090 <_dtoa_r+0x330>
   13e44:	vmov	s13, r0
   13e48:	vmov	d2, r2, r3
   13e4c:	vcvt.f64.s32	d4, s13
   13e50:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   13e54:	vsub.f64	d6, d2, d6
   13e58:	vfma.f64	d7, d6, d3
   13e5c:	vfma.f64	d7, d4, d5
   13e60:	vcvt.s32.f64	s13, d7
   13e64:	vcmpe.f64	d7, #0.0
   13e68:	vmrs	APSR_nzcv, fpscr
   13e6c:	vmov	r7, s13
   13e70:	bpl.n	13e84 <_dtoa_r+0x124>
   13e72:	vcvt.f64.s32	d6, s13
   13e76:	vcmp.f64	d6, d7
   13e7a:	vmrs	APSR_nzcv, fpscr
   13e7e:	it	ne
   13e80:	addne.w	r7, r7, #4294967295
   13e84:	cmp	r7, #22
   13e86:	bhi.w	14114 <_dtoa_r+0x3b4>
   13e8a:	ldr	r3, [pc, #532]	; (140a0 <_dtoa_r+0x340>)
   13e8c:	add.w	r3, r3, r7, lsl #3
   13e90:	vldr	d7, [r3]
   13e94:	vcmpe.f64	d8, d7
   13e98:	vmrs	APSR_nzcv, fpscr
   13e9c:	bpl.n	13f4e <_dtoa_r+0x1ee>
   13e9e:	subs	r1, r1, r0
   13ea0:	movs	r3, #0
   13ea2:	subs.w	r8, r1, #1
   13ea6:	add.w	r7, r7, #4294967295
   13eaa:	str	r3, [sp, #40]	; 0x28
   13eac:	bmi.w	14122 <_dtoa_r+0x3c2>
   13eb0:	movs	r3, #0
   13eb2:	str	r3, [sp, #24]
   13eb4:	cmp	r7, #0
   13eb6:	bge.n	13f5e <_dtoa_r+0x1fe>
   13eb8:	ldr	r3, [sp, #24]
   13eba:	str	r7, [sp, #16]
   13ebc:	subs	r3, r3, r7
   13ebe:	str	r3, [sp, #24]
   13ec0:	negs	r3, r7
   13ec2:	str	r3, [sp, #32]
   13ec4:	ldr	r3, [sp, #4]
   13ec6:	cmp	r3, #9
   13ec8:	mov.w	r7, #0
   13ecc:	bhi.n	13f6c <_dtoa_r+0x20c>
   13ece:	cmp	r3, #5
   13ed0:	ble.w	1440e <_dtoa_r+0x6ae>
   13ed4:	subs	r3, #4
   13ed6:	str	r3, [sp, #4]
   13ed8:	movs	r6, #0
   13eda:	ldr	r3, [sp, #4]
   13edc:	subs	r2, r3, #2
   13ede:	cmp	r2, #3
   13ee0:	bhi.w	1412e <_dtoa_r+0x3ce>
   13ee4:	tbh	[pc, r2, lsl #1]
   13ee8:	.word	0x03a703aa
   13eec:	.word	0x037e039d
   13ef0:	ldr	r2, [sp, #20]
   13ef2:	ubfx	r8, r8, #0, #20
   13ef6:	movw	r3, #9999	; 0x270f
   13efa:	orrs.w	r8, r8, r6
   13efe:	str	r3, [r2, #0]
   13f00:	bne.n	13f40 <_dtoa_r+0x1e0>
   13f02:	ldr	r3, [sp, #108]	; 0x6c
   13f04:	cmp	r3, #0
   13f06:	beq.w	14a2c <_dtoa_r+0xccc>
   13f0a:	ldr	r3, [pc, #408]	; (140a4 <_dtoa_r+0x344>)
   13f0c:	str	r3, [sp, #0]
   13f0e:	adds	r3, #8
   13f10:	ldr	r2, [sp, #108]	; 0x6c
   13f12:	ldr	r0, [sp, #0]
   13f14:	str	r3, [r2, #0]
   13f16:	add	sp, #60	; 0x3c
   13f18:	vpop	{d8}
   13f1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f20:	vmov	r6, s17
   13f24:	ubfx	r6, r6, #0, #20
   13f28:	subw	r0, r3, #1023	; 0x3ff
   13f2c:	vmov	r2, r3, d8
   13f30:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   13f34:	ldr	r1, [sp, #48]	; 0x30
   13f36:	mov.w	sl, #0
   13f3a:	orr.w	r3, r3, #3145728	; 0x300000
   13f3e:	b.n	13e38 <_dtoa_r+0xd8>
   13f40:	ldr	r3, [sp, #108]	; 0x6c
   13f42:	cmp	r3, #0
   13f44:	bne.w	145be <_dtoa_r+0x85e>
   13f48:	ldr	r3, [pc, #348]	; (140a8 <_dtoa_r+0x348>)
   13f4a:	str	r3, [sp, #0]
   13f4c:	b.n	13dd8 <_dtoa_r+0x78>
   13f4e:	subs	r1, r1, r0
   13f50:	movs	r3, #0
   13f52:	subs.w	r8, r1, #1
   13f56:	str	r3, [sp, #40]	; 0x28
   13f58:	bmi.w	14122 <_dtoa_r+0x3c2>
   13f5c:	str	r3, [sp, #24]
   13f5e:	movs	r3, #0
   13f60:	str	r3, [sp, #32]
   13f62:	ldr	r3, [sp, #4]
   13f64:	str	r7, [sp, #16]
   13f66:	cmp	r3, #9
   13f68:	add	r8, r7
   13f6a:	bls.n	13ece <_dtoa_r+0x16e>
   13f6c:	movs	r3, #0
   13f6e:	movs	r6, #1
   13f70:	str	r3, [sp, #4]
   13f72:	str	r6, [sp, #28]
   13f74:	mov.w	r9, #4294967295
   13f78:	mov	fp, r3
   13f7a:	movs	r1, #0
   13f7c:	str	r1, [r4, #60]	; 0x3c
   13f7e:	str.w	r9, [sp, #44]	; 0x2c
   13f82:	mov	r0, r4
   13f84:	bl	f8fc <_Balloc>
   13f88:	str	r0, [sp, #0]
   13f8a:	cmp	r0, #0
   13f8c:	beq.w	14a10 <_dtoa_r+0xcb0>
   13f90:	ldr	r3, [sp, #0]
   13f92:	str	r3, [r4, #56]	; 0x38
   13f94:	cmp.w	r9, #14
   13f98:	bhi.w	14154 <_dtoa_r+0x3f4>
   13f9c:	cmp	r6, #0
   13f9e:	beq.w	14154 <_dtoa_r+0x3f4>
   13fa2:	ldr	r3, [sp, #16]
   13fa4:	cmp	r3, #0
   13fa6:	ble.w	14766 <_dtoa_r+0xa06>
   13faa:	ldr	r2, [pc, #244]	; (140a0 <_dtoa_r+0x340>)
   13fac:	and.w	r1, r3, #15
   13fb0:	add.w	r2, r2, r1, lsl #3
   13fb4:	vldr	d7, [r2]
   13fb8:	asrs	r2, r3, #4
   13fba:	lsls	r3, r3, #23
   13fbc:	bpl.w	146c4 <_dtoa_r+0x964>
   13fc0:	ldr	r1, [pc, #232]	; (140ac <_dtoa_r+0x34c>)
   13fc2:	vldr	d6, [r1, #32]
   13fc6:	and.w	r2, r2, #15
   13fca:	movs	r0, #3
   13fcc:	vdiv.f64	d5, d8, d6
   13fd0:	cbz	r2, 13fea <_dtoa_r+0x28a>
   13fd2:	ldr	r1, [pc, #216]	; (140ac <_dtoa_r+0x34c>)
   13fd4:	lsls	r6, r2, #31
   13fd6:	bpl.n	13fe2 <_dtoa_r+0x282>
   13fd8:	vldr	d6, [r1]
   13fdc:	adds	r0, #1
   13fde:	vmul.f64	d7, d7, d6
   13fe2:	asrs	r2, r2, #1
   13fe4:	add.w	r1, r1, #8
   13fe8:	bne.n	13fd4 <_dtoa_r+0x274>
   13fea:	vdiv.f64	d6, d5, d7
   13fee:	ldr	r3, [sp, #40]	; 0x28
   13ff0:	cbz	r3, 14002 <_dtoa_r+0x2a2>
   13ff2:	vmov.f64	d7, #112	; 0x3f800000  1.0
   13ff6:	vcmpe.f64	d6, d7
   13ffa:	vmrs	APSR_nzcv, fpscr
   13ffe:	bmi.w	1495e <_dtoa_r+0xbfe>
   14002:	vmov	s15, r0
   14006:	vcvt.f64.s32	d5, s15
   1400a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1400e:	vfma.f64	d7, d5, d6
   14012:	vmov	r2, s15
   14016:	vmov	r0, r1, d7
   1401a:	sub.w	r1, r2, #54525952	; 0x3400000
   1401e:	cmp.w	r9, #0
   14022:	beq.w	14736 <_dtoa_r+0x9d6>
   14026:	ldr	r6, [sp, #16]
   14028:	mov	r2, r9
   1402a:	ldr	r3, [sp, #28]
   1402c:	cmp	r3, #0
   1402e:	beq.w	148c0 <_dtoa_r+0xb60>
   14032:	vmov.f64	d3, #96	; 0x3f000000  0.5
   14036:	ldr	r3, [pc, #104]	; (140a0 <_dtoa_r+0x340>)
   14038:	vcvt.s32.f64	s9, d6
   1403c:	add.w	ip, r3, r2, lsl #3
   14040:	vcvt.f64.s32	d7, s9
   14044:	vsub.f64	d7, d6, d7
   14048:	vldr	d6, [ip, #-8]
   1404c:	vdiv.f64	d5, d3, d6
   14050:	vmov	d6, r0, r1
   14054:	vmov	r0, s9
   14058:	vsub.f64	d5, d5, d6
   1405c:	ldr	r1, [sp, #0]
   1405e:	vcmpe.f64	d5, d7
   14062:	adds	r0, #48	; 0x30
   14064:	vmrs	APSR_nzcv, fpscr
   14068:	strb.w	r0, [r1], #1
   1406c:	bgt.w	149c8 <_dtoa_r+0xc68>
   14070:	vmov.f64	d2, #112	; 0x3f800000  1.0
   14074:	vmov.f64	d4, #36	; 0x41200000  10.0
   14078:	mov.w	ip, #0
   1407c:	b.n	140e2 <_dtoa_r+0x382>
   1407e:	nop
   14080:	.word	0x636f4361
   14084:	.word	0x3fd287a7
   14088:	.word	0x8b60c8b3
   1408c:	.word	0x3fc68a28
   14090:	.word	0x509f79fb
   14094:	.word	0x3fd34413
   14098:	.word	0x7ff00000
   1409c:	.word	0x200009fd
   140a0:	.word	0x20000328
   140a4:	.word	0x20000928
   140a8:	.word	0x20000934
   140ac:	.word	0x20000300
   140b0:	add.w	ip, ip, #1
   140b4:	cmp	ip, r2
   140b6:	bge.n	14154 <_dtoa_r+0x3f4>
   140b8:	vmul.f64	d7, d7, d4
   140bc:	vmul.f64	d5, d5, d4
   140c0:	vcvt.s32.f64	s13, d7
   140c4:	vmov	r3, s13
   140c8:	vcvt.f64.s32	d3, s13
   140cc:	adds	r3, #48	; 0x30
   140ce:	vsub.f64	d7, d7, d3
   140d2:	vcmpe.f64	d7, d5
   140d6:	vmrs	APSR_nzcv, fpscr
   140da:	strb.w	r3, [r1], #1
   140de:	bmi.w	149c8 <_dtoa_r+0xc68>
   140e2:	vsub.f64	d6, d2, d7
   140e6:	vcmpe.f64	d6, d5
   140ea:	vmrs	APSR_nzcv, fpscr
   140ee:	bpl.n	140b0 <_dtoa_r+0x350>
   140f0:	ldr	r2, [sp, #0]
   140f2:	str	r6, [sp, #16]
   140f4:	b.n	140fc <_dtoa_r+0x39c>
   140f6:	cmp	r2, r1
   140f8:	beq.w	1499c <_dtoa_r+0xc3c>
   140fc:	mov	r9, r1
   140fe:	ldrb.w	r3, [r1, #-1]!
   14102:	cmp	r3, #57	; 0x39
   14104:	beq.n	140f6 <_dtoa_r+0x396>
   14106:	adds	r3, #1
   14108:	uxtb	r3, r3
   1410a:	strb	r3, [r1, #0]
   1410c:	ldr	r3, [sp, #16]
   1410e:	adds	r3, #1
   14110:	str	r3, [sp, #16]
   14112:	b.n	143c0 <_dtoa_r+0x660>
   14114:	subs	r1, r1, r0
   14116:	movs	r3, #1
   14118:	subs.w	r8, r1, #1
   1411c:	str	r3, [sp, #40]	; 0x28
   1411e:	bpl.w	13eb0 <_dtoa_r+0x150>
   14122:	rsb	r3, r1, #1
   14126:	str	r3, [sp, #24]
   14128:	mov.w	r8, #0
   1412c:	b.n	13eb4 <_dtoa_r+0x154>
   1412e:	movs	r6, #0
   14130:	str	r6, [r4, #60]	; 0x3c
   14132:	mov	r1, r6
   14134:	mov	r0, r4
   14136:	bl	f8fc <_Balloc>
   1413a:	str	r0, [sp, #0]
   1413c:	cmp	r0, #0
   1413e:	beq.w	14a10 <_dtoa_r+0xcb0>
   14142:	ldr	r3, [sp, #0]
   14144:	str	r3, [r4, #56]	; 0x38
   14146:	mov.w	r3, #4294967295
   1414a:	str	r3, [sp, #44]	; 0x2c
   1414c:	mov	r9, r3
   1414e:	movs	r3, #1
   14150:	mov	fp, r6
   14152:	str	r3, [sp, #28]
   14154:	ldr	r2, [sp, #52]	; 0x34
   14156:	cmp	r2, #0
   14158:	blt.n	14206 <_dtoa_r+0x4a6>
   1415a:	ldr	r1, [sp, #16]
   1415c:	cmp	r1, #14
   1415e:	bgt.n	14206 <_dtoa_r+0x4a6>
   14160:	ldr	r3, [pc, #732]	; (14440 <_dtoa_r+0x6e0>)
   14162:	cmp.w	fp, #0
   14166:	add.w	r3, r3, r1, lsl #3
   1416a:	vldr	d6, [r3]
   1416e:	bge.n	1419c <_dtoa_r+0x43c>
   14170:	cmp.w	r9, #0
   14174:	bgt.n	1419c <_dtoa_r+0x43c>
   14176:	bne.w	1475e <_dtoa_r+0x9fe>
   1417a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1417e:	vmul.f64	d7, d6, d7
   14182:	vcmpe.f64	d8, d7
   14186:	vmrs	APSR_nzcv, fpscr
   1418a:	mov	sl, r9
   1418c:	mov	r6, r9
   1418e:	bhi.w	1466c <_dtoa_r+0x90c>
   14192:	ldr.w	r8, [sp]
   14196:	mvn.w	fp, fp
   1419a:	b.n	1467e <_dtoa_r+0x91e>
   1419c:	vdiv.f64	d7, d8, d6
   141a0:	vcvt.s32.f64	s14, d7
   141a4:	ldr	r1, [sp, #0]
   141a6:	vmov	r3, s14
   141aa:	cmp.w	r9, #1
   141ae:	add.w	r3, r3, #48	; 0x30
   141b2:	vcvt.f64.s32	d5, s14
   141b6:	strb.w	r3, [r1], #1
   141ba:	vfms.f64	d8, d5, d6
   141be:	beq.w	1482a <_dtoa_r+0xaca>
   141c2:	vmov.f64	d4, #36	; 0x41200000  10.0
   141c6:	movs	r3, #1
   141c8:	b.n	141ee <_dtoa_r+0x48e>
   141ca:	vdiv.f64	d7, d8, d6
   141ce:	vcvt.s32.f64	s14, d7
   141d2:	adds	r3, #1
   141d4:	vmov	r2, s14
   141d8:	cmp	r3, r9
   141da:	add.w	r2, r2, #48	; 0x30
   141de:	vcvt.f64.s32	d5, s14
   141e2:	strb.w	r2, [r1], #1
   141e6:	vfms.f64	d8, d5, d6
   141ea:	beq.w	1482a <_dtoa_r+0xaca>
   141ee:	vmul.f64	d8, d8, d4
   141f2:	vcmp.f64	d8, #0.0
   141f6:	vmrs	APSR_nzcv, fpscr
   141fa:	bne.n	141ca <_dtoa_r+0x46a>
   141fc:	ldr	r3, [sp, #16]
   141fe:	adds	r3, #1
   14200:	str	r3, [sp, #16]
   14202:	mov	r9, r1
   14204:	b.n	143c0 <_dtoa_r+0x660>
   14206:	ldr	r3, [sp, #28]
   14208:	cbz	r3, 1425c <_dtoa_r+0x4fc>
   1420a:	ldr	r3, [sp, #4]
   1420c:	cmp	r3, #1
   1420e:	ble.w	146fe <_dtoa_r+0x99e>
   14212:	ldr	r3, [sp, #32]
   14214:	add.w	sl, r9, #4294967295
   14218:	cmp	r3, sl
   1421a:	bge.w	1469c <_dtoa_r+0x93c>
   1421e:	ldr	r3, [sp, #32]
   14220:	str.w	sl, [sp, #32]
   14224:	sub.w	r2, sl, r3
   14228:	add	r7, r2
   1422a:	mov.w	sl, #0
   1422e:	cmp.w	r9, #0
   14232:	blt.w	14880 <_dtoa_r+0xb20>
   14236:	ldr	r3, [sp, #24]
   14238:	str	r3, [sp, #36]	; 0x24
   1423a:	add	r3, r9
   1423c:	add	r8, r9
   1423e:	str	r3, [sp, #24]
   14240:	movs	r1, #1
   14242:	mov	r0, r4
   14244:	bl	fb50 <__i2b>
   14248:	mov	r6, r0
   1424a:	b.n	14266 <_dtoa_r+0x506>
   1424c:	ldr	r3, [pc, #500]	; (14444 <_dtoa_r+0x6e4>)
   1424e:	str	r3, [sp, #0]
   14250:	ldr	r0, [sp, #0]
   14252:	add	sp, #60	; 0x3c
   14254:	vpop	{d8}
   14258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1425c:	ldr	r3, [sp, #24]
   1425e:	ldr.w	sl, [sp, #32]
   14262:	ldr	r6, [sp, #28]
   14264:	str	r3, [sp, #36]	; 0x24
   14266:	ldr	r3, [sp, #36]	; 0x24
   14268:	cbz	r3, 14286 <_dtoa_r+0x526>
   1426a:	cmp.w	r8, #0
   1426e:	ble.n	14286 <_dtoa_r+0x526>
   14270:	cmp	r3, r8
   14272:	ldr	r1, [sp, #24]
   14274:	mov	r2, r3
   14276:	it	ge
   14278:	movge	r2, r8
   1427a:	subs	r1, r1, r2
   1427c:	subs	r3, r3, r2
   1427e:	str	r1, [sp, #24]
   14280:	str	r3, [sp, #36]	; 0x24
   14282:	sub.w	r8, r8, r2
   14286:	ldr	r3, [sp, #32]
   14288:	cbz	r3, 142a4 <_dtoa_r+0x544>
   1428a:	ldr	r3, [sp, #28]
   1428c:	cmp	r3, #0
   1428e:	beq.w	147e0 <_dtoa_r+0xa80>
   14292:	cmp.w	sl, #0
   14296:	bgt.w	146a2 <_dtoa_r+0x942>
   1429a:	ldr	r3, [sp, #32]
   1429c:	subs.w	r2, r3, sl
   142a0:	bne.w	148a2 <_dtoa_r+0xb42>
   142a4:	movs	r1, #1
   142a6:	mov	r0, r4
   142a8:	bl	fb50 <__i2b>
   142ac:	cmp	r7, #0
   142ae:	mov	sl, r0
   142b0:	bgt.w	14412 <_dtoa_r+0x6b2>
   142b4:	ldr	r3, [sp, #4]
   142b6:	cmp	r3, #1
   142b8:	ble.w	145ca <_dtoa_r+0x86a>
   142bc:	movs	r3, #0
   142be:	str	r3, [sp, #32]
   142c0:	movs	r0, #1
   142c2:	cmp	r7, #0
   142c4:	bne.w	1442a <_dtoa_r+0x6ca>
   142c8:	add	r0, r8
   142ca:	ands.w	r0, r0, #31
   142ce:	beq.w	145c6 <_dtoa_r+0x866>
   142d2:	rsb	r2, r0, #32
   142d6:	cmp	r2, #4
   142d8:	bgt.w	143ec <_dtoa_r+0x68c>
   142dc:	bne.w	146cc <_dtoa_r+0x96c>
   142e0:	ldr	r3, [sp, #24]
   142e2:	cmp	r3, #0
   142e4:	ble.n	142f2 <_dtoa_r+0x592>
   142e6:	mov	r1, r5
   142e8:	mov	r2, r3
   142ea:	mov	r0, r4
   142ec:	bl	fdc8 <__lshift>
   142f0:	mov	r5, r0
   142f2:	cmp.w	r8, #0
   142f6:	ble.n	14304 <_dtoa_r+0x5a4>
   142f8:	mov	r1, sl
   142fa:	mov	r2, r8
   142fc:	mov	r0, r4
   142fe:	bl	fdc8 <__lshift>
   14302:	mov	sl, r0
   14304:	ldr	r3, [sp, #40]	; 0x28
   14306:	cmp	r3, #0
   14308:	bne.w	1458a <_dtoa_r+0x82a>
   1430c:	cmp.w	r9, #0
   14310:	ble.w	1455e <_dtoa_r+0x7fe>
   14314:	ldr	r3, [sp, #28]
   14316:	cmp	r3, #0
   14318:	bne.w	14462 <_dtoa_r+0x702>
   1431c:	ldr	r3, [sp, #16]
   1431e:	adds	r3, #1
   14320:	str	r3, [sp, #16]
   14322:	ldr.w	r8, [sp]
   14326:	movs	r7, #1
   14328:	b.n	1433a <_dtoa_r+0x5da>
   1432a:	mov	r1, r5
   1432c:	movs	r3, #0
   1432e:	movs	r2, #10
   14330:	mov	r0, r4
   14332:	bl	f95c <__multadd>
   14336:	adds	r7, #1
   14338:	mov	r5, r0
   1433a:	mov	r1, sl
   1433c:	mov	r0, r5
   1433e:	bl	13c38 <quorem>
   14342:	cmp	r9, r7
   14344:	add.w	r0, r0, #48	; 0x30
   14348:	strb.w	r0, [r8], #1
   1434c:	bgt.n	1432a <_dtoa_r+0x5ca>
   1434e:	cmp.w	r9, #0
   14352:	ldr	r2, [sp, #0]
   14354:	ite	gt
   14356:	movgt	fp, r9
   14358:	movle.w	fp, #1
   1435c:	mov	r3, r0
   1435e:	add	fp, r2
   14360:	movs	r7, #0
   14362:	mov	r1, r5
   14364:	movs	r2, #1
   14366:	mov	r0, r4
   14368:	str	r3, [sp, #4]
   1436a:	bl	fdc8 <__lshift>
   1436e:	mov	r1, sl
   14370:	mov	r5, r0
   14372:	bl	feb8 <__mcmp>
   14376:	cmp	r0, #0
   14378:	ble.w	146da <_dtoa_r+0x97a>
   1437c:	ldrb.w	r3, [fp, #-1]
   14380:	ldr	r2, [sp, #0]
   14382:	add.w	fp, fp, #4294967295
   14386:	b.n	14392 <_dtoa_r+0x632>
   14388:	cmp	r2, fp
   1438a:	beq.w	146f0 <_dtoa_r+0x990>
   1438e:	ldrb.w	r3, [fp, #-1]!
   14392:	cmp	r3, #57	; 0x39
   14394:	add.w	r9, fp, #1
   14398:	beq.n	14388 <_dtoa_r+0x628>
   1439a:	adds	r3, #1
   1439c:	strb.w	r3, [fp]
   143a0:	mov	r1, sl
   143a2:	mov	r0, r4
   143a4:	bl	f948 <_Bfree>
   143a8:	cbz	r6, 143c0 <_dtoa_r+0x660>
   143aa:	cbz	r7, 143b8 <_dtoa_r+0x658>
   143ac:	cmp	r7, r6
   143ae:	beq.n	143b8 <_dtoa_r+0x658>
   143b0:	mov	r1, r7
   143b2:	mov	r0, r4
   143b4:	bl	f948 <_Bfree>
   143b8:	mov	r1, r6
   143ba:	mov	r0, r4
   143bc:	bl	f948 <_Bfree>
   143c0:	mov	r1, r5
   143c2:	mov	r0, r4
   143c4:	bl	f948 <_Bfree>
   143c8:	movs	r3, #0
   143ca:	strb.w	r3, [r9]
   143ce:	ldrd	r2, r3, [sp, #16]
   143d2:	str	r2, [r3, #0]
   143d4:	ldr	r3, [sp, #108]	; 0x6c
   143d6:	cmp	r3, #0
   143d8:	beq.w	13dd8 <_dtoa_r+0x78>
   143dc:	ldr	r0, [sp, #0]
   143de:	str.w	r9, [r3]
   143e2:	add	sp, #60	; 0x3c
   143e4:	vpop	{d8}
   143e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ec:	rsb	r0, r0, #28
   143f0:	ldr	r3, [sp, #24]
   143f2:	add	r3, r0
   143f4:	str	r3, [sp, #24]
   143f6:	ldr	r3, [sp, #36]	; 0x24
   143f8:	add	r3, r0
   143fa:	str	r3, [sp, #36]	; 0x24
   143fc:	add	r8, r0
   143fe:	b.n	142e0 <_dtoa_r+0x580>
   14400:	rsb	r2, r2, #32
   14404:	lsl.w	r2, r6, r2
   14408:	vmov	s14, r2
   1440c:	b.n	13e22 <_dtoa_r+0xc2>
   1440e:	movs	r6, #1
   14410:	b.n	13eda <_dtoa_r+0x17a>
   14412:	mov	r1, r0
   14414:	mov	r2, r7
   14416:	mov	r0, r4
   14418:	bl	fd08 <__pow5mult>
   1441c:	ldr	r3, [sp, #4]
   1441e:	cmp	r3, #1
   14420:	mov	sl, r0
   14422:	ble.w	147b0 <_dtoa_r+0xa50>
   14426:	movs	r3, #0
   14428:	str	r3, [sp, #32]
   1442a:	ldr.w	r2, [sl, #16]
   1442e:	add.w	r2, sl, r2, lsl #2
   14432:	ldr	r0, [r2, #16]
   14434:	bl	fab0 <__hi0bits>
   14438:	rsb	r0, r0, #32
   1443c:	b.n	142c8 <_dtoa_r+0x568>
   1443e:	nop
   14440:	.word	0x20000328
   14444:	.word	0x200009fc
   14448:	mov	r1, r6
   1444a:	movs	r3, #0
   1444c:	movs	r2, #10
   1444e:	mov	r0, r4
   14450:	bl	f95c <__multadd>
   14454:	ldr	r3, [sp, #44]	; 0x2c
   14456:	cmp	r3, #0
   14458:	mov	r6, r0
   1445a:	ble.w	149fa <_dtoa_r+0xc9a>
   1445e:	str	r7, [sp, #16]
   14460:	mov	r9, r3
   14462:	ldr	r3, [sp, #36]	; 0x24
   14464:	cmp	r3, #0
   14466:	ble.n	14474 <_dtoa_r+0x714>
   14468:	mov	r1, r6
   1446a:	mov	r2, r3
   1446c:	mov	r0, r4
   1446e:	bl	fdc8 <__lshift>
   14472:	mov	r6, r0
   14474:	ldr	r3, [sp, #32]
   14476:	cmp	r3, #0
   14478:	bne.w	14852 <_dtoa_r+0xaf2>
   1447c:	mov	r8, r6
   1447e:	ldr	r3, [sp, #8]
   14480:	ldr	r7, [sp, #0]
   14482:	and.w	r2, r3, #1
   14486:	subs	r3, r7, #1
   14488:	add	r3, r9
   1448a:	str	r3, [sp, #32]
   1448c:	ldr	r3, [sp, #4]
   1448e:	str	r2, [sp, #40]	; 0x28
   14490:	orrs	r3, r2
   14492:	str	r3, [sp, #36]	; 0x24
   14494:	mov	r1, sl
   14496:	mov	r0, r5
   14498:	bl	13c38 <quorem>
   1449c:	mov	r1, r6
   1449e:	mov	fp, r0
   144a0:	mov	r0, r5
   144a2:	bl	feb8 <__mcmp>
   144a6:	mov	r2, r8
   144a8:	mov	r1, sl
   144aa:	mov	r9, r0
   144ac:	mov	r0, r4
   144ae:	bl	fefc <__mdiff>
   144b2:	ldr	r2, [r0, #12]
   144b4:	mov	r1, r0
   144b6:	add.w	r3, fp, #48	; 0x30
   144ba:	cmp	r2, #0
   144bc:	bne.n	14544 <_dtoa_r+0x7e4>
   144be:	strd	r0, r3, [sp, #24]
   144c2:	mov	r0, r5
   144c4:	bl	feb8 <__mcmp>
   144c8:	ldr	r1, [sp, #24]
   144ca:	str	r0, [sp, #8]
   144cc:	mov	r0, r4
   144ce:	bl	f948 <_Bfree>
   144d2:	ldr	r2, [sp, #8]
   144d4:	ldr	r3, [sp, #28]
   144d6:	cbnz	r2, 144e0 <_dtoa_r+0x780>
   144d8:	ldr	r1, [sp, #36]	; 0x24
   144da:	cmp	r1, #0
   144dc:	beq.w	149dc <_dtoa_r+0xc7c>
   144e0:	cmp.w	r9, #0
   144e4:	blt.w	147ee <_dtoa_r+0xa8e>
   144e8:	ldr	r1, [sp, #4]
   144ea:	orr.w	r9, r9, r1
   144ee:	ldr	r1, [sp, #40]	; 0x28
   144f0:	orrs.w	r9, r1, r9
   144f4:	beq.w	147ee <_dtoa_r+0xa8e>
   144f8:	cmp	r2, #0
   144fa:	bgt.w	1488a <_dtoa_r+0xb2a>
   144fe:	ldr	r2, [sp, #32]
   14500:	strb	r3, [r7, #0]
   14502:	add.w	r9, r7, #1
   14506:	cmp	r7, r2
   14508:	mov	fp, r9
   1450a:	beq.w	14896 <_dtoa_r+0xb36>
   1450e:	mov	r1, r5
   14510:	movs	r3, #0
   14512:	movs	r2, #10
   14514:	mov	r0, r4
   14516:	bl	f95c <__multadd>
   1451a:	cmp	r6, r8
   1451c:	mov	r5, r0
   1451e:	mov	r1, r6
   14520:	mov.w	r3, #0
   14524:	mov.w	r2, #10
   14528:	mov	r0, r4
   1452a:	beq.n	14552 <_dtoa_r+0x7f2>
   1452c:	bl	f95c <__multadd>
   14530:	mov	r1, r8
   14532:	mov	r6, r0
   14534:	movs	r3, #0
   14536:	movs	r2, #10
   14538:	mov	r0, r4
   1453a:	bl	f95c <__multadd>
   1453e:	mov	r7, r9
   14540:	mov	r8, r0
   14542:	b.n	14494 <_dtoa_r+0x734>
   14544:	mov	r0, r4
   14546:	str	r3, [sp, #8]
   14548:	bl	f948 <_Bfree>
   1454c:	ldr	r3, [sp, #8]
   1454e:	movs	r2, #1
   14550:	b.n	144e0 <_dtoa_r+0x780>
   14552:	bl	f95c <__multadd>
   14556:	mov	r7, r9
   14558:	mov	r6, r0
   1455a:	mov	r8, r0
   1455c:	b.n	14494 <_dtoa_r+0x734>
   1455e:	ldr	r3, [sp, #4]
   14560:	cmp	r3, #2
   14562:	bgt.n	14648 <_dtoa_r+0x8e8>
   14564:	ldr	r3, [sp, #28]
   14566:	cmp	r3, #0
   14568:	bne.w	14462 <_dtoa_r+0x702>
   1456c:	ldr	r3, [sp, #16]
   1456e:	mov	r1, sl
   14570:	adds	r3, #1
   14572:	mov	r0, r5
   14574:	str	r3, [sp, #16]
   14576:	bl	13c38 <quorem>
   1457a:	ldr.w	fp, [sp]
   1457e:	add.w	r3, r0, #48	; 0x30
   14582:	strb.w	r3, [fp], #1
   14586:	movs	r7, #0
   14588:	b.n	14362 <_dtoa_r+0x602>
   1458a:	mov	r1, sl
   1458c:	mov	r0, r5
   1458e:	bl	feb8 <__mcmp>
   14592:	cmp	r0, #0
   14594:	bge.w	1430c <_dtoa_r+0x5ac>
   14598:	mov	r1, r5
   1459a:	movs	r3, #0
   1459c:	movs	r2, #10
   1459e:	mov	r0, r4
   145a0:	bl	f95c <__multadd>
   145a4:	ldr	r3, [sp, #16]
   145a6:	subs	r7, r3, #1
   145a8:	ldr	r3, [sp, #28]
   145aa:	mov	r5, r0
   145ac:	cmp	r3, #0
   145ae:	bne.w	14448 <_dtoa_r+0x6e8>
   145b2:	ldr	r3, [sp, #44]	; 0x2c
   145b4:	cmp	r3, #0
   145b6:	ble.w	149ea <_dtoa_r+0xc8a>
   145ba:	mov	r9, r3
   145bc:	b.n	14322 <_dtoa_r+0x5c2>
   145be:	ldr	r3, [pc, #752]	; (148b0 <_dtoa_r+0xb50>)
   145c0:	str	r3, [sp, #0]
   145c2:	adds	r3, #3
   145c4:	b.n	13f10 <_dtoa_r+0x1b0>
   145c6:	movs	r0, #28
   145c8:	b.n	143f0 <_dtoa_r+0x690>
   145ca:	ldrd	r0, r1, [sp, #8]
   145ce:	cmp	r0, #0
   145d0:	bne.w	142bc <_dtoa_r+0x55c>
   145d4:	ubfx	r2, r1, #0, #20
   145d8:	cmp	r2, #0
   145da:	beq.w	147c6 <_dtoa_r+0xa66>
   145de:	ldr	r3, [sp, #8]
   145e0:	str	r3, [sp, #32]
   145e2:	b.n	142c0 <_dtoa_r+0x560>
   145e4:	movs	r3, #1
   145e6:	str	r3, [sp, #28]
   145e8:	ldr	r3, [sp, #16]
   145ea:	add	r3, fp
   145ec:	add.w	r9, r3, #1
   145f0:	cmp.w	r9, #1
   145f4:	mov	ip, r9
   145f6:	str	r3, [sp, #44]	; 0x2c
   145f8:	it	lt
   145fa:	movlt.w	ip, #1
   145fe:	movs	r1, #0
   14600:	cmp.w	ip, #23
   14604:	str	r1, [r4, #60]	; 0x3c
   14606:	ble.w	13f82 <_dtoa_r+0x222>
   1460a:	movs	r0, #1
   1460c:	movs	r2, #4
   1460e:	lsls	r2, r2, #1
   14610:	add.w	r3, r2, #20
   14614:	cmp	r3, ip
   14616:	mov	r1, r0
   14618:	add.w	r0, r0, #1
   1461c:	bls.n	1460e <_dtoa_r+0x8ae>
   1461e:	str	r1, [r4, #60]	; 0x3c
   14620:	b.n	13f82 <_dtoa_r+0x222>
   14622:	movs	r3, #1
   14624:	str	r3, [sp, #28]
   14626:	cmp.w	fp, #0
   1462a:	ble.n	146d2 <_dtoa_r+0x972>
   1462c:	str.w	fp, [sp, #44]	; 0x2c
   14630:	mov	r9, fp
   14632:	mov	ip, fp
   14634:	b.n	145fe <_dtoa_r+0x89e>
   14636:	movs	r3, #0
   14638:	str	r3, [sp, #28]
   1463a:	b.n	145e8 <_dtoa_r+0x888>
   1463c:	movs	r3, #0
   1463e:	str	r3, [sp, #28]
   14640:	b.n	14626 <_dtoa_r+0x8c6>
   14642:	ldr.w	r9, [sp, #44]	; 0x2c
   14646:	str	r7, [sp, #16]
   14648:	cmp.w	r9, #0
   1464c:	bne.w	14192 <_dtoa_r+0x432>
   14650:	mov	r1, sl
   14652:	mov	r3, r9
   14654:	movs	r2, #5
   14656:	mov	r0, r4
   14658:	bl	f95c <__multadd>
   1465c:	mov	r1, r0
   1465e:	mov	sl, r0
   14660:	mov	r0, r5
   14662:	bl	feb8 <__mcmp>
   14666:	cmp	r0, #0
   14668:	ble.w	14192 <_dtoa_r+0x432>
   1466c:	ldr	r3, [sp, #16]
   1466e:	add.w	fp, r3, #1
   14672:	ldr	r3, [sp, #0]
   14674:	movs	r2, #49	; 0x31
   14676:	mov	r8, r3
   14678:	strb.w	r2, [r3], #1
   1467c:	str	r3, [sp, #0]
   1467e:	mov	r1, sl
   14680:	mov	r0, r4
   14682:	bl	f948 <_Bfree>
   14686:	add.w	r3, fp, #1
   1468a:	ldr.w	r9, [sp]
   1468e:	str	r3, [sp, #16]
   14690:	str.w	r8, [sp]
   14694:	cmp	r6, #0
   14696:	bne.w	143b8 <_dtoa_r+0x658>
   1469a:	b.n	143c0 <_dtoa_r+0x660>
   1469c:	sub.w	sl, r3, sl
   146a0:	b.n	1422e <_dtoa_r+0x4ce>
   146a2:	mov	r1, r6
   146a4:	mov	r2, sl
   146a6:	mov	r0, r4
   146a8:	bl	fd08 <__pow5mult>
   146ac:	mov	r2, r5
   146ae:	mov	r1, r0
   146b0:	mov	r6, r0
   146b2:	mov	r0, r4
   146b4:	bl	fbac <__multiply>
   146b8:	mov	r1, r5
   146ba:	mov	r5, r0
   146bc:	mov	r0, r4
   146be:	bl	f948 <_Bfree>
   146c2:	b.n	1429a <_dtoa_r+0x53a>
   146c4:	movs	r0, #2
   146c6:	vmov.f64	d5, d8
   146ca:	b.n	13fd0 <_dtoa_r+0x270>
   146cc:	rsb	r0, r0, #60	; 0x3c
   146d0:	b.n	143f0 <_dtoa_r+0x690>
   146d2:	mov.w	fp, #1
   146d6:	mov	r9, fp
   146d8:	b.n	13f7a <_dtoa_r+0x21a>
   146da:	bne.n	146e4 <_dtoa_r+0x984>
   146dc:	ldr	r3, [sp, #4]
   146de:	lsls	r3, r3, #31
   146e0:	bmi.w	1437c <_dtoa_r+0x61c>
   146e4:	mov	r9, fp
   146e6:	ldrb.w	r3, [fp, #-1]!
   146ea:	cmp	r3, #48	; 0x30
   146ec:	beq.n	146e4 <_dtoa_r+0x984>
   146ee:	b.n	143a0 <_dtoa_r+0x640>
   146f0:	ldr	r3, [sp, #16]
   146f2:	ldr	r2, [sp, #0]
   146f4:	adds	r3, #1
   146f6:	str	r3, [sp, #16]
   146f8:	movs	r3, #49	; 0x31
   146fa:	strb	r3, [r2, #0]
   146fc:	b.n	143a0 <_dtoa_r+0x640>
   146fe:	cmp.w	sl, #0
   14702:	beq.w	1494c <_dtoa_r+0xbec>
   14706:	addw	r2, r2, #1075	; 0x433
   1470a:	ldr	r3, [sp, #24]
   1470c:	str	r3, [sp, #36]	; 0x24
   1470e:	add	r3, r2
   14710:	ldr.w	sl, [sp, #32]
   14714:	str	r3, [sp, #24]
   14716:	add	r8, r2
   14718:	b.n	14240 <_dtoa_r+0x4e0>
   1471a:	vmov	s15, r0
   1471e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   14722:	vcvt.f64.s32	d7, s15
   14726:	vfma.f64	d5, d6, d7
   1472a:	vmov	r2, s11
   1472e:	vmov	r0, r1, d5
   14732:	sub.w	r1, r2, #54525952	; 0x3400000
   14736:	vmov	d5, r0, r1
   1473a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1473e:	vsub.f64	d7, d6, d7
   14742:	vcmpe.f64	d7, d5
   14746:	vmrs	APSR_nzcv, fpscr
   1474a:	bgt.w	149bc <_dtoa_r+0xc5c>
   1474e:	vneg.f64	d5, d5
   14752:	vcmpe.f64	d7, d5
   14756:	vmrs	APSR_nzcv, fpscr
   1475a:	bpl.w	14154 <_dtoa_r+0x3f4>
   1475e:	mov.w	sl, #0
   14762:	mov	r6, sl
   14764:	b.n	14192 <_dtoa_r+0x432>
   14766:	beq.w	14954 <_dtoa_r+0xbf4>
   1476a:	ldr	r3, [sp, #16]
   1476c:	ldr	r1, [pc, #324]	; (148b4 <_dtoa_r+0xb54>)
   1476e:	negs	r2, r3
   14770:	and.w	r0, r2, #15
   14774:	add.w	r1, r1, r0, lsl #3
   14778:	vldr	d6, [r1]
   1477c:	asrs	r2, r2, #4
   1477e:	vmul.f64	d6, d8, d6
   14782:	beq.w	14a0a <_dtoa_r+0xcaa>
   14786:	vmov.f64	d7, d6
   1478a:	ldr	r1, [pc, #300]	; (148b8 <_dtoa_r+0xb58>)
   1478c:	movs	r6, #0
   1478e:	movs	r0, #2
   14790:	lsls	r3, r2, #31
   14792:	bpl.n	147a0 <_dtoa_r+0xa40>
   14794:	vldr	d5, [r1]
   14798:	adds	r0, #1
   1479a:	movs	r6, #1
   1479c:	vmul.f64	d7, d7, d5
   147a0:	asrs	r2, r2, #1
   147a2:	add.w	r1, r1, #8
   147a6:	bne.n	14790 <_dtoa_r+0xa30>
   147a8:	cmp	r6, #0
   147aa:	vseleq.f64	d6, d6, d7
   147ae:	b.n	13fee <_dtoa_r+0x28e>
   147b0:	ldr	r3, [sp, #8]
   147b2:	cmp	r3, #0
   147b4:	bne.w	14426 <_dtoa_r+0x6c6>
   147b8:	ldrd	r0, r1, [sp, #8]
   147bc:	ubfx	r2, r1, #0, #20
   147c0:	cmp	r2, #0
   147c2:	bne.w	14a34 <_dtoa_r+0xcd4>
   147c6:	ldr	r2, [pc, #244]	; (148bc <_dtoa_r+0xb5c>)
   147c8:	ands	r2, r1
   147ca:	cmp	r2, #0
   147cc:	beq.w	149c4 <_dtoa_r+0xc64>
   147d0:	ldr	r3, [sp, #24]
   147d2:	adds	r3, #1
   147d4:	str	r3, [sp, #24]
   147d6:	movs	r3, #1
   147d8:	add.w	r8, r8, #1
   147dc:	str	r3, [sp, #32]
   147de:	b.n	142c0 <_dtoa_r+0x560>
   147e0:	mov	r1, r5
   147e2:	ldr	r2, [sp, #32]
   147e4:	mov	r0, r4
   147e6:	bl	fd08 <__pow5mult>
   147ea:	mov	r5, r0
   147ec:	b.n	142a4 <_dtoa_r+0x544>
   147ee:	cmp	r2, #0
   147f0:	ble.n	14818 <_dtoa_r+0xab8>
   147f2:	mov	r1, r5
   147f4:	movs	r2, #1
   147f6:	mov	r0, r4
   147f8:	str	r3, [sp, #4]
   147fa:	bl	fdc8 <__lshift>
   147fe:	mov	r1, sl
   14800:	mov	r5, r0
   14802:	bl	feb8 <__mcmp>
   14806:	cmp	r0, #0
   14808:	ldr	r3, [sp, #4]
   1480a:	ble.w	149d0 <_dtoa_r+0xc70>
   1480e:	cmp	r3, #57	; 0x39
   14810:	beq.w	149a8 <_dtoa_r+0xc48>
   14814:	add.w	r3, fp, #49	; 0x31
   14818:	mov	r9, r7
   1481a:	strb.w	r3, [r9], #1
   1481e:	ldr	r3, [sp, #16]
   14820:	adds	r3, #1
   14822:	mov	r7, r6
   14824:	str	r3, [sp, #16]
   14826:	mov	r6, r8
   14828:	b.n	143a0 <_dtoa_r+0x640>
   1482a:	vadd.f64	d8, d8, d8
   1482e:	vcmpe.f64	d8, d6
   14832:	vmrs	APSR_nzcv, fpscr
   14836:	bgt.n	1484e <_dtoa_r+0xaee>
   14838:	vcmp.f64	d8, d6
   1483c:	vmrs	APSR_nzcv, fpscr
   14840:	bne.w	141fc <_dtoa_r+0x49c>
   14844:	vmov	r3, s14
   14848:	lsls	r0, r3, #31
   1484a:	bpl.w	141fc <_dtoa_r+0x49c>
   1484e:	ldr	r2, [sp, #0]
   14850:	b.n	140fc <_dtoa_r+0x39c>
   14852:	ldr	r1, [r6, #4]
   14854:	mov	r0, r4
   14856:	bl	f8fc <_Balloc>
   1485a:	mov	r7, r0
   1485c:	cmp	r0, #0
   1485e:	beq.w	14a1e <_dtoa_r+0xcbe>
   14862:	ldr	r3, [r6, #16]
   14864:	adds	r3, #2
   14866:	lsls	r2, r3, #2
   14868:	add.w	r1, r6, #12
   1486c:	adds	r0, #12
   1486e:	bl	9c60 <memcpy>
   14872:	mov	r1, r7
   14874:	movs	r2, #1
   14876:	mov	r0, r4
   14878:	bl	fdc8 <__lshift>
   1487c:	mov	r8, r0
   1487e:	b.n	1447e <_dtoa_r+0x71e>
   14880:	ldr	r3, [sp, #24]
   14882:	sub.w	r3, r3, r9
   14886:	str	r3, [sp, #36]	; 0x24
   14888:	b.n	14240 <_dtoa_r+0x4e0>
   1488a:	cmp	r3, #57	; 0x39
   1488c:	beq.w	149a8 <_dtoa_r+0xc48>
   14890:	mov	r9, r7
   14892:	adds	r3, #1
   14894:	b.n	1481a <_dtoa_r+0xaba>
   14896:	ldr	r2, [sp, #16]
   14898:	adds	r2, #1
   1489a:	mov	r7, r6
   1489c:	str	r2, [sp, #16]
   1489e:	mov	r6, r8
   148a0:	b.n	14362 <_dtoa_r+0x602>
   148a2:	mov	r1, r5
   148a4:	mov	r0, r4
   148a6:	bl	fd08 <__pow5mult>
   148aa:	mov	r5, r0
   148ac:	b.n	142a4 <_dtoa_r+0x544>
   148ae:	nop
   148b0:	.word	0x20000934
   148b4:	.word	0x20000328
   148b8:	.word	0x20000300
   148bc:	.word	0x7ff00000
   148c0:	ldr	r3, [pc, #376]	; (14a3c <_dtoa_r+0xcdc>)
   148c2:	vcvt.s32.f64	s11, d6
   148c6:	add.w	ip, r3, r2, lsl #3
   148ca:	vldr	d3, [ip, #-8]
   148ce:	vcvt.f64.s32	d7, s11
   148d2:	vsub.f64	d7, d6, d7
   148d6:	vmov	d6, r0, r1
   148da:	vmov	r1, s11
   148de:	vmul.f64	d3, d3, d6
   148e2:	ldr	r0, [sp, #0]
   148e4:	adds	r1, #48	; 0x30
   148e6:	cmp	r2, #1
   148e8:	strb.w	r1, [r0], #1
   148ec:	beq.w	149f6 <_dtoa_r+0xc96>
   148f0:	vmov.f64	d4, #36	; 0x41200000  10.0
   148f4:	ldr	r3, [sp, #0]
   148f6:	adds	r1, r3, r2
   148f8:	vmul.f64	d7, d7, d4
   148fc:	vcvt.s32.f64	s13, d7
   14900:	vmov	r3, s13
   14904:	adds	r3, #48	; 0x30
   14906:	strb.w	r3, [r0], #1
   1490a:	cmp	r1, r0
   1490c:	vcvt.f64.s32	d5, s13
   14910:	vsub.f64	d7, d7, d5
   14914:	bne.n	148f8 <_dtoa_r+0xb98>
   14916:	vmov.f64	d6, #96	; 0x3f000000  0.5
   1491a:	vadd.f64	d5, d3, d6
   1491e:	vcmpe.f64	d5, d7
   14922:	vmrs	APSR_nzcv, fpscr
   14926:	bmi.w	140f0 <_dtoa_r+0x390>
   1492a:	vsub.f64	d6, d6, d3
   1492e:	vcmpe.f64	d6, d7
   14932:	vmrs	APSR_nzcv, fpscr
   14936:	ble.w	14154 <_dtoa_r+0x3f4>
   1493a:	mov	r9, r1
   1493c:	subs	r1, #1
   1493e:	ldrb.w	r3, [r9, #-1]
   14942:	cmp	r3, #48	; 0x30
   14944:	beq.n	1493a <_dtoa_r+0xbda>
   14946:	adds	r3, r6, #1
   14948:	str	r3, [sp, #16]
   1494a:	b.n	143c0 <_dtoa_r+0x660>
   1494c:	ldr	r2, [sp, #48]	; 0x30
   1494e:	rsb	r2, r2, #54	; 0x36
   14952:	b.n	1470a <_dtoa_r+0x9aa>
   14954:	movs	r0, #2
   14956:	vmov.f64	d6, d8
   1495a:	b.w	13fee <_dtoa_r+0x28e>
   1495e:	cmp.w	r9, #0
   14962:	beq.w	1471a <_dtoa_r+0x9ba>
   14966:	ldr	r2, [sp, #44]	; 0x2c
   14968:	cmp	r2, #0
   1496a:	ble.w	14154 <_dtoa_r+0x3f4>
   1496e:	vmov.f64	d4, #36	; 0x41200000  10.0
   14972:	vmul.f64	d6, d6, d4
   14976:	adds	r0, #1
   14978:	vmov	s15, r0
   1497c:	ldr	r3, [sp, #16]
   1497e:	vcvt.f64.s32	d5, s15
   14982:	vmov.f64	d7, #28	; 0x40e00000  7.0
   14986:	vfma.f64	d7, d6, d5
   1498a:	vmov	ip, s15
   1498e:	vmov	r0, r1, d7
   14992:	subs	r6, r3, #1
   14994:	sub.w	r1, ip, #54525952	; 0x3400000
   14998:	b.w	1402a <_dtoa_r+0x2ca>
   1499c:	ldr	r3, [sp, #16]
   1499e:	adds	r3, #1
   149a0:	str	r3, [sp, #16]
   149a2:	movs	r3, #49	; 0x31
   149a4:	b.w	1410a <_dtoa_r+0x3aa>
   149a8:	ldr	r3, [sp, #16]
   149aa:	mov	fp, r7
   149ac:	adds	r3, #1
   149ae:	str	r3, [sp, #16]
   149b0:	movs	r3, #57	; 0x39
   149b2:	mov	r7, r6
   149b4:	strb.w	r3, [fp], #1
   149b8:	mov	r6, r8
   149ba:	b.n	14380 <_dtoa_r+0x620>
   149bc:	mov.w	sl, #0
   149c0:	mov	r6, sl
   149c2:	b.n	1466c <_dtoa_r+0x90c>
   149c4:	str	r2, [sp, #32]
   149c6:	b.n	142c0 <_dtoa_r+0x560>
   149c8:	adds	r3, r6, #1
   149ca:	str	r3, [sp, #16]
   149cc:	mov	r9, r1
   149ce:	b.n	143c0 <_dtoa_r+0x660>
   149d0:	bne.w	14818 <_dtoa_r+0xab8>
   149d4:	lsls	r2, r3, #31
   149d6:	bpl.w	14818 <_dtoa_r+0xab8>
   149da:	b.n	1480e <_dtoa_r+0xaae>
   149dc:	cmp	r3, #57	; 0x39
   149de:	beq.n	149a8 <_dtoa_r+0xc48>
   149e0:	cmp.w	r9, #0
   149e4:	bgt.w	14814 <_dtoa_r+0xab4>
   149e8:	b.n	14818 <_dtoa_r+0xab8>
   149ea:	ldr	r3, [sp, #4]
   149ec:	cmp	r3, #2
   149ee:	bgt.w	14642 <_dtoa_r+0x8e2>
   149f2:	str	r7, [sp, #16]
   149f4:	b.n	1456c <_dtoa_r+0x80c>
   149f6:	mov	r1, r0
   149f8:	b.n	14916 <_dtoa_r+0xbb6>
   149fa:	ldr	r3, [sp, #4]
   149fc:	cmp	r3, #2
   149fe:	bgt.w	14642 <_dtoa_r+0x8e2>
   14a02:	ldr.w	r9, [sp, #44]	; 0x2c
   14a06:	str	r7, [sp, #16]
   14a08:	b.n	14462 <_dtoa_r+0x702>
   14a0a:	movs	r0, #2
   14a0c:	b.w	13fee <_dtoa_r+0x28e>
   14a10:	ldr	r3, [pc, #44]	; (14a40 <_dtoa_r+0xce0>)
   14a12:	ldr	r0, [pc, #48]	; (14a44 <_dtoa_r+0xce4>)
   14a14:	movs	r2, #0
   14a16:	movw	r1, #431	; 0x1af
   14a1a:	bl	13b80 <__assert_func>
   14a1e:	ldr	r3, [pc, #32]	; (14a40 <_dtoa_r+0xce0>)
   14a20:	ldr	r0, [pc, #32]	; (14a44 <_dtoa_r+0xce4>)
   14a22:	mov	r2, r7
   14a24:	movw	r1, #751	; 0x2ef
   14a28:	bl	13b80 <__assert_func>
   14a2c:	ldr	r3, [pc, #24]	; (14a48 <_dtoa_r+0xce8>)
   14a2e:	str	r3, [sp, #0]
   14a30:	b.w	13dd8 <_dtoa_r+0x78>
   14a34:	ldr	r3, [sp, #8]
   14a36:	str	r3, [sp, #32]
   14a38:	b.n	1442a <_dtoa_r+0x6ca>
   14a3a:	nop
   14a3c:	.word	0x20000328
   14a40:	.word	0x20000648
   14a44:	.word	0x20000938
   14a48:	.word	0x20000928

00014a4c <_strtoul_l.constprop.0>:
   14a4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a50:	mov	r7, r0
   14a52:	ldr	r0, [pc, #304]	; (14b84 <_strtoul_l.constprop.0+0x138>)
   14a54:	mov	r6, r1
   14a56:	mov	r5, r6
   14a58:	ldrb.w	lr, [r6], #1
   14a5c:	ldrb.w	ip, [r0, lr]
   14a60:	ands.w	ip, ip, #8
   14a64:	bne.n	14a56 <_strtoul_l.constprop.0+0xa>
   14a66:	cmp.w	lr, #45	; 0x2d
   14a6a:	beq.n	14b22 <_strtoul_l.constprop.0+0xd6>
   14a6c:	cmp.w	lr, #43	; 0x2b
   14a70:	ittte	eq
   14a72:	ldrbeq.w	lr, [r6]
   14a76:	moveq	r4, ip
   14a78:	addeq	r6, r5, #2
   14a7a:	movne	r4, ip
   14a7c:	cbz	r3, 14a96 <_strtoul_l.constprop.0+0x4a>
   14a7e:	cmp	r3, #16
   14a80:	beq.n	14b2c <_strtoul_l.constprop.0+0xe0>
   14a82:	mov.w	r8, #4294967295
   14a86:	udiv	r8, r8, r3
   14a8a:	mul.w	sl, r3, r8
   14a8e:	mvn.w	sl, sl
   14a92:	mov	r9, r3
   14a94:	b.n	14aa8 <_strtoul_l.constprop.0+0x5c>
   14a96:	cmp.w	lr, #48	; 0x30
   14a9a:	beq.n	14b52 <_strtoul_l.constprop.0+0x106>
   14a9c:	movs	r3, #10
   14a9e:	ldr.w	r8, [pc, #232]	; 14b88 <_strtoul_l.constprop.0+0x13c>
   14aa2:	mov.w	sl, #5
   14aa6:	mov	r9, r3
   14aa8:	movs	r5, #0
   14aaa:	mov	r0, r5
   14aac:	b.n	14aba <_strtoul_l.constprop.0+0x6e>
   14aae:	beq.n	14b0a <_strtoul_l.constprop.0+0xbe>
   14ab0:	mla	r0, r9, r0, ip
   14ab4:	movs	r5, #1
   14ab6:	ldrb.w	lr, [r6], #1
   14aba:	sub.w	ip, lr, #48	; 0x30
   14abe:	cmp.w	ip, #9
   14ac2:	bls.n	14ad2 <_strtoul_l.constprop.0+0x86>
   14ac4:	sub.w	ip, lr, #65	; 0x41
   14ac8:	cmp.w	ip, #25
   14acc:	bhi.n	14ae6 <_strtoul_l.constprop.0+0x9a>
   14ace:	sub.w	ip, lr, #55	; 0x37
   14ad2:	cmp	r3, ip
   14ad4:	ble.n	14af8 <_strtoul_l.constprop.0+0xac>
   14ad6:	cmp.w	r5, #4294967295
   14ada:	beq.n	14ab6 <_strtoul_l.constprop.0+0x6a>
   14adc:	cmp	r0, r8
   14ade:	bls.n	14aae <_strtoul_l.constprop.0+0x62>
   14ae0:	mov.w	r5, #4294967295
   14ae4:	b.n	14ab6 <_strtoul_l.constprop.0+0x6a>
   14ae6:	sub.w	ip, lr, #97	; 0x61
   14aea:	cmp.w	ip, #25
   14aee:	bhi.n	14af8 <_strtoul_l.constprop.0+0xac>
   14af0:	sub.w	ip, lr, #87	; 0x57
   14af4:	cmp	r3, ip
   14af6:	bgt.n	14ad6 <_strtoul_l.constprop.0+0x8a>
   14af8:	adds	r3, r5, #1
   14afa:	beq.n	14b14 <_strtoul_l.constprop.0+0xc8>
   14afc:	cbz	r4, 14b00 <_strtoul_l.constprop.0+0xb4>
   14afe:	negs	r0, r0
   14b00:	cbz	r2, 14b06 <_strtoul_l.constprop.0+0xba>
   14b02:	cbnz	r5, 14b1e <_strtoul_l.constprop.0+0xd2>
   14b04:	str	r1, [r2, #0]
   14b06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b0a:	cmp	ip, sl
   14b0c:	ble.n	14ab0 <_strtoul_l.constprop.0+0x64>
   14b0e:	mov.w	r5, #4294967295
   14b12:	b.n	14ab6 <_strtoul_l.constprop.0+0x6a>
   14b14:	movs	r3, #34	; 0x22
   14b16:	str	r3, [r7, #0]
   14b18:	mov	r0, r5
   14b1a:	cmp	r2, #0
   14b1c:	beq.n	14b06 <_strtoul_l.constprop.0+0xba>
   14b1e:	subs	r1, r6, #1
   14b20:	b.n	14b04 <_strtoul_l.constprop.0+0xb8>
   14b22:	ldrb.w	lr, [r6]
   14b26:	movs	r4, #1
   14b28:	adds	r6, r5, #2
   14b2a:	b.n	14a7c <_strtoul_l.constprop.0+0x30>
   14b2c:	cmp.w	lr, #48	; 0x30
   14b30:	bne.n	14b76 <_strtoul_l.constprop.0+0x12a>
   14b32:	ldrb	r0, [r6, #0]
   14b34:	and.w	r0, r0, #223	; 0xdf
   14b38:	cmp	r0, #88	; 0x58
   14b3a:	bne.n	14b6a <_strtoul_l.constprop.0+0x11e>
   14b3c:	mov.w	r9, #16
   14b40:	ldrb.w	lr, [r6, #1]
   14b44:	mov.w	sl, #15
   14b48:	adds	r6, #2
   14b4a:	mvn.w	r8, #4026531840	; 0xf0000000
   14b4e:	mov	r3, r9
   14b50:	b.n	14aa8 <_strtoul_l.constprop.0+0x5c>
   14b52:	ldrb	r3, [r6, #0]
   14b54:	and.w	r3, r3, #223	; 0xdf
   14b58:	cmp	r3, #88	; 0x58
   14b5a:	beq.n	14b3c <_strtoul_l.constprop.0+0xf0>
   14b5c:	movs	r3, #8
   14b5e:	mov.w	sl, #7
   14b62:	mvn.w	r8, #3758096384	; 0xe0000000
   14b66:	mov	r9, r3
   14b68:	b.n	14aa8 <_strtoul_l.constprop.0+0x5c>
   14b6a:	mov	r9, r3
   14b6c:	mvn.w	r8, #4026531840	; 0xf0000000
   14b70:	mov.w	sl, #15
   14b74:	b.n	14aa8 <_strtoul_l.constprop.0+0x5c>
   14b76:	mov.w	sl, #15
   14b7a:	mvn.w	r8, #4026531840	; 0xf0000000
   14b7e:	mov	r9, r3
   14b80:	b.n	14aa8 <_strtoul_l.constprop.0+0x5c>
   14b82:	nop
   14b84:	.word	0x20000825
   14b88:	.word	0x19999999

00014b8c <_strtoul_r>:
   14b8c:	b.w	14a4c <_strtoul_l.constprop.0>

00014b90 <_strtoll_l.constprop.0>:
   14b90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b94:	sub	sp, #20
   14b96:	mov	r7, r3
   14b98:	ldr	r3, [pc, #348]	; (14cf8 <_strtoll_l.constprop.0+0x168>)
   14b9a:	str	r0, [sp, #12]
   14b9c:	mov	sl, r1
   14b9e:	str	r2, [sp, #0]
   14ba0:	mov	r5, r1
   14ba2:	mov	r2, r5
   14ba4:	ldrb.w	r4, [r5], #1
   14ba8:	ldrb	r6, [r3, r4]
   14baa:	ands.w	r6, r6, #8
   14bae:	bne.n	14ba2 <_strtoll_l.constprop.0+0x12>
   14bb0:	cmp	r4, #45	; 0x2d
   14bb2:	beq.n	14ca0 <_strtoll_l.constprop.0+0x110>
   14bb4:	cmp	r4, #43	; 0x2b
   14bb6:	ittet	eq
   14bb8:	ldrbeq	r4, [r5, #0]
   14bba:	streq	r6, [sp, #8]
   14bbc:	strne	r6, [sp, #8]
   14bbe:	addeq	r5, r2, #2
   14bc0:	mov.w	r6, #4294967295
   14bc4:	mvn.w	fp, #2147483648	; 0x80000000
   14bc8:	cbz	r7, 14bd6 <_strtoll_l.constprop.0+0x46>
   14bca:	cmp	r7, #16
   14bcc:	beq.n	14cae <_strtoll_l.constprop.0+0x11e>
   14bce:	mov	r8, r7
   14bd0:	mov.w	r9, r7, asr #31
   14bd4:	b.n	14be2 <_strtoll_l.constprop.0+0x52>
   14bd6:	cmp	r4, #48	; 0x30
   14bd8:	beq.n	14cc4 <_strtoll_l.constprop.0+0x134>
   14bda:	mov.w	r8, #10
   14bde:	mov	r9, r7
   14be0:	mov	r7, r8
   14be2:	mov	r2, r8
   14be4:	mov	r3, r9
   14be6:	mov	r0, r6
   14be8:	mov	r1, fp
   14bea:	bl	c364 <__aeabi_uldivmod>
   14bee:	movs	r3, #0
   14bf0:	str	r2, [sp, #4]
   14bf2:	mov	ip, r0
   14bf4:	mov	r2, r1
   14bf6:	mov	r0, r3
   14bf8:	mov	r1, r3
   14bfa:	b.n	14c20 <_strtoll_l.constprop.0+0x90>
   14bfc:	cmp	r2, r1
   14bfe:	it	eq
   14c00:	cmpeq	ip, r0
   14c02:	beq.n	14c80 <_strtoll_l.constprop.0+0xf0>
   14c04:	mul.w	r3, r0, r9
   14c08:	mla	r3, r8, r1, r3
   14c0c:	umull	r0, r1, r0, r8
   14c10:	add	r3, r1
   14c12:	adds.w	r0, lr, r0
   14c16:	adc.w	r1, r3, lr, asr #31
   14c1a:	movs	r3, #1
   14c1c:	ldrb.w	r4, [r5], #1
   14c20:	sub.w	lr, r4, #48	; 0x30
   14c24:	cmp.w	lr, #9
   14c28:	bls.n	14c38 <_strtoll_l.constprop.0+0xa8>
   14c2a:	sub.w	lr, r4, #65	; 0x41
   14c2e:	cmp.w	lr, #25
   14c32:	bhi.n	14c4e <_strtoll_l.constprop.0+0xbe>
   14c34:	sub.w	lr, r4, #55	; 0x37
   14c38:	cmp	r7, lr
   14c3a:	ble.n	14c60 <_strtoll_l.constprop.0+0xd0>
   14c3c:	adds	r4, r3, #1
   14c3e:	beq.n	14c1c <_strtoll_l.constprop.0+0x8c>
   14c40:	cmp	ip, r0
   14c42:	sbcs.w	r3, r2, r1
   14c46:	bcs.n	14bfc <_strtoll_l.constprop.0+0x6c>
   14c48:	mov.w	r3, #4294967295
   14c4c:	b.n	14c1c <_strtoll_l.constprop.0+0x8c>
   14c4e:	sub.w	lr, r4, #97	; 0x61
   14c52:	cmp.w	lr, #25
   14c56:	bhi.n	14c60 <_strtoll_l.constprop.0+0xd0>
   14c58:	sub.w	lr, r4, #87	; 0x57
   14c5c:	cmp	r7, lr
   14c5e:	bgt.n	14c3c <_strtoll_l.constprop.0+0xac>
   14c60:	adds	r2, r3, #1
   14c62:	beq.n	14c8c <_strtoll_l.constprop.0+0xfc>
   14c64:	ldr	r2, [sp, #8]
   14c66:	cbz	r2, 14c6e <_strtoll_l.constprop.0+0xde>
   14c68:	negs	r0, r0
   14c6a:	sbc.w	r1, r1, r1, lsl #1
   14c6e:	ldr	r2, [sp, #0]
   14c70:	cbz	r2, 14c7a <_strtoll_l.constprop.0+0xea>
   14c72:	cbnz	r3, 14cde <_strtoll_l.constprop.0+0x14e>
   14c74:	ldr	r3, [sp, #0]
   14c76:	str.w	sl, [r3]
   14c7a:	add	sp, #20
   14c7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c80:	ldr	r3, [sp, #4]
   14c82:	cmp	r3, lr
   14c84:	bge.n	14c04 <_strtoll_l.constprop.0+0x74>
   14c86:	mov.w	r3, #4294967295
   14c8a:	b.n	14c1c <_strtoll_l.constprop.0+0x8c>
   14c8c:	ldr	r2, [sp, #12]
   14c8e:	movs	r3, #34	; 0x22
   14c90:	str	r3, [r2, #0]
   14c92:	ldr	r3, [sp, #0]
   14c94:	cbz	r3, 14ce4 <_strtoll_l.constprop.0+0x154>
   14c96:	add.w	sl, r5, #4294967295
   14c9a:	mov	r0, r6
   14c9c:	mov	r1, fp
   14c9e:	b.n	14c74 <_strtoll_l.constprop.0+0xe4>
   14ca0:	movs	r3, #1
   14ca2:	ldrb	r4, [r5, #0]
   14ca4:	str	r3, [sp, #8]
   14ca6:	adds	r5, r2, #2
   14ca8:	mov.w	fp, #2147483648	; 0x80000000
   14cac:	b.n	14bc8 <_strtoll_l.constprop.0+0x38>
   14cae:	cmp	r4, #48	; 0x30
   14cb0:	bne.n	14cbc <_strtoll_l.constprop.0+0x12c>
   14cb2:	ldrb	r3, [r5, #0]
   14cb4:	and.w	r3, r3, #223	; 0xdf
   14cb8:	cmp	r3, #88	; 0x58
   14cba:	beq.n	14cce <_strtoll_l.constprop.0+0x13e>
   14cbc:	mov	r8, r7
   14cbe:	mov.w	r9, #0
   14cc2:	b.n	14be2 <_strtoll_l.constprop.0+0x52>
   14cc4:	ldrb	r3, [r5, #0]
   14cc6:	and.w	r3, r3, #223	; 0xdf
   14cca:	cmp	r3, #88	; 0x58
   14ccc:	bne.n	14cee <_strtoll_l.constprop.0+0x15e>
   14cce:	mov.w	r8, #16
   14cd2:	ldrb	r4, [r5, #1]
   14cd4:	mov.w	r9, #0
   14cd8:	adds	r5, #2
   14cda:	mov	r7, r8
   14cdc:	b.n	14be2 <_strtoll_l.constprop.0+0x52>
   14cde:	mov	r6, r0
   14ce0:	mov	fp, r1
   14ce2:	b.n	14c96 <_strtoll_l.constprop.0+0x106>
   14ce4:	mov	r0, r6
   14ce6:	mov	r1, fp
   14ce8:	add	sp, #20
   14cea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cee:	mov.w	r8, #8
   14cf2:	mov	r9, r7
   14cf4:	mov	r7, r8
   14cf6:	b.n	14be2 <_strtoll_l.constprop.0+0x52>
   14cf8:	.word	0x20000825

00014cfc <_strtoll_r>:
   14cfc:	b.w	14b90 <_strtoll_l.constprop.0>

00014d00 <_strtoull_l.constprop.0>:
   14d00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d04:	sub	sp, #20
   14d06:	mov	fp, r1
   14d08:	str	r2, [sp, #4]
   14d0a:	ldr	r2, [pc, #392]	; (14e94 <_strtoull_l.constprop.0+0x194>)
   14d0c:	str	r0, [sp, #12]
   14d0e:	mov	r6, r3
   14d10:	mov	r5, r1
   14d12:	mov	r1, r5
   14d14:	ldrb.w	r4, [r5], #1
   14d18:	ldrb	r3, [r2, r4]
   14d1a:	ands.w	r3, r3, #8
   14d1e:	bne.n	14d12 <_strtoull_l.constprop.0+0x12>
   14d20:	cmp	r4, #45	; 0x2d
   14d22:	beq.w	14e2a <_strtoull_l.constprop.0+0x12a>
   14d26:	cmp	r4, #43	; 0x2b
   14d28:	ittte	eq
   14d2a:	ldrbeq	r4, [r5, #0]
   14d2c:	streq	r3, [sp, #8]
   14d2e:	addeq	r5, r1, #2
   14d30:	strne	r3, [sp, #8]
   14d32:	cbz	r6, 14d64 <_strtoull_l.constprop.0+0x64>
   14d34:	cmp	r6, #16
   14d36:	beq.n	14e34 <_strtoull_l.constprop.0+0x134>
   14d38:	mov.w	sl, r6, asr #31
   14d3c:	mov	r2, r6
   14d3e:	mov	r3, sl
   14d40:	mov.w	r0, #4294967295
   14d44:	mov.w	r1, #4294967295
   14d48:	bl	c364 <__aeabi_uldivmod>
   14d4c:	mov	r2, r6
   14d4e:	mov	r7, r0
   14d50:	mov	r8, r1
   14d52:	mov	r3, sl
   14d54:	mov.w	r0, #4294967295
   14d58:	mov.w	r1, #4294967295
   14d5c:	mov	r9, r6
   14d5e:	bl	c364 <__aeabi_uldivmod>
   14d62:	b.n	14d7a <_strtoull_l.constprop.0+0x7a>
   14d64:	cmp	r4, #48	; 0x30
   14d66:	beq.n	14e5c <_strtoull_l.constprop.0+0x15c>
   14d68:	mov.w	r9, #10
   14d6c:	ldr.w	r8, [pc, #296]	; 14e98 <_strtoull_l.constprop.0+0x198>
   14d70:	mov	sl, r6
   14d72:	movs	r2, #5
   14d74:	mov.w	r7, #2576980377	; 0x99999999
   14d78:	mov	r6, r9
   14d7a:	mov.w	ip, #0
   14d7e:	mov	r0, ip
   14d80:	mov	r1, ip
   14d82:	b.n	14da8 <_strtoull_l.constprop.0+0xa8>
   14d84:	cmp	r1, r8
   14d86:	it	eq
   14d88:	cmpeq	r0, r7
   14d8a:	beq.n	14e0a <_strtoull_l.constprop.0+0x10a>
   14d8c:	mul.w	r4, r0, sl
   14d90:	mla	r1, r9, r1, r4
   14d94:	umull	r0, r4, r0, r9
   14d98:	add	r1, r4
   14d9a:	adds	r0, r3, r0
   14d9c:	adc.w	r1, r1, r3, asr #31
   14da0:	mov.w	ip, #1
   14da4:	ldrb.w	r4, [r5], #1
   14da8:	sub.w	r3, r4, #48	; 0x30
   14dac:	cmp	r3, #9
   14dae:	bls.n	14dbc <_strtoull_l.constprop.0+0xbc>
   14db0:	sub.w	r3, r4, #65	; 0x41
   14db4:	cmp	r3, #25
   14db6:	bhi.n	14dd4 <_strtoull_l.constprop.0+0xd4>
   14db8:	sub.w	r3, r4, #55	; 0x37
   14dbc:	cmp	r6, r3
   14dbe:	ble.n	14de4 <_strtoull_l.constprop.0+0xe4>
   14dc0:	cmp.w	ip, #4294967295
   14dc4:	beq.n	14da4 <_strtoull_l.constprop.0+0xa4>
   14dc6:	cmp	r7, r0
   14dc8:	sbcs.w	r4, r8, r1
   14dcc:	bcs.n	14d84 <_strtoull_l.constprop.0+0x84>
   14dce:	mov.w	ip, #4294967295
   14dd2:	b.n	14da4 <_strtoull_l.constprop.0+0xa4>
   14dd4:	sub.w	r3, r4, #97	; 0x61
   14dd8:	cmp	r3, #25
   14dda:	bhi.n	14de4 <_strtoull_l.constprop.0+0xe4>
   14ddc:	sub.w	r3, r4, #87	; 0x57
   14de0:	cmp	r6, r3
   14de2:	bgt.n	14dc0 <_strtoull_l.constprop.0+0xc0>
   14de4:	cmp.w	ip, #4294967295
   14de8:	beq.n	14e14 <_strtoull_l.constprop.0+0x114>
   14dea:	ldr	r3, [sp, #8]
   14dec:	cbz	r3, 14df4 <_strtoull_l.constprop.0+0xf4>
   14dee:	negs	r0, r0
   14df0:	sbc.w	r1, r1, r1, lsl #1
   14df4:	ldr	r3, [sp, #4]
   14df6:	cbz	r3, 14e04 <_strtoull_l.constprop.0+0x104>
   14df8:	cmp.w	ip, #0
   14dfc:	bne.n	14e24 <_strtoull_l.constprop.0+0x124>
   14dfe:	ldr	r3, [sp, #4]
   14e00:	str.w	fp, [r3]
   14e04:	add	sp, #20
   14e06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e0a:	cmp	r3, r2
   14e0c:	ble.n	14d8c <_strtoull_l.constprop.0+0x8c>
   14e0e:	mov.w	ip, #4294967295
   14e12:	b.n	14da4 <_strtoull_l.constprop.0+0xa4>
   14e14:	ldr	r2, [sp, #12]
   14e16:	movs	r3, #34	; 0x22
   14e18:	str	r3, [r2, #0]
   14e1a:	ldr	r3, [sp, #4]
   14e1c:	mov	r0, ip
   14e1e:	mov	r1, ip
   14e20:	cmp	r3, #0
   14e22:	beq.n	14e04 <_strtoull_l.constprop.0+0x104>
   14e24:	add.w	fp, r5, #4294967295
   14e28:	b.n	14dfe <_strtoull_l.constprop.0+0xfe>
   14e2a:	movs	r3, #1
   14e2c:	ldrb	r4, [r5, #0]
   14e2e:	str	r3, [sp, #8]
   14e30:	adds	r5, r1, #2
   14e32:	b.n	14d32 <_strtoull_l.constprop.0+0x32>
   14e34:	cmp	r4, #48	; 0x30
   14e36:	bne.n	14e80 <_strtoull_l.constprop.0+0x180>
   14e38:	ldrb	r3, [r5, #0]
   14e3a:	and.w	r3, r3, #223	; 0xdf
   14e3e:	cmp	r3, #88	; 0x58
   14e40:	bne.n	14e7a <_strtoull_l.constprop.0+0x17a>
   14e42:	mov.w	r9, #16
   14e46:	ldrb	r4, [r5, #1]
   14e48:	movs	r2, #15
   14e4a:	adds	r5, #2
   14e4c:	mov.w	r7, #4294967295
   14e50:	mvn.w	r8, #4026531840	; 0xf0000000
   14e54:	mov.w	sl, #0
   14e58:	mov	r6, r9
   14e5a:	b.n	14d7a <_strtoull_l.constprop.0+0x7a>
   14e5c:	ldrb	r3, [r5, #0]
   14e5e:	and.w	r3, r3, #223	; 0xdf
   14e62:	cmp	r3, #88	; 0x58
   14e64:	beq.n	14e42 <_strtoull_l.constprop.0+0x142>
   14e66:	mov.w	r9, #8
   14e6a:	mov	sl, r6
   14e6c:	movs	r2, #7
   14e6e:	mov.w	r7, #4294967295
   14e72:	mvn.w	r8, #3758096384	; 0xe0000000
   14e76:	mov	r6, r9
   14e78:	b.n	14d7a <_strtoull_l.constprop.0+0x7a>
   14e7a:	mov.w	sl, #0
   14e7e:	b.n	14d3c <_strtoull_l.constprop.0+0x3c>
   14e80:	movs	r2, #15
   14e82:	mov.w	r7, #4294967295
   14e86:	mvn.w	r8, #4026531840	; 0xf0000000
   14e8a:	mov	r9, r6
   14e8c:	mov.w	sl, #0
   14e90:	b.n	14d7a <_strtoull_l.constprop.0+0x7a>
   14e92:	nop
   14e94:	.word	0x20000825
   14e98:	.word	0x19999999

00014e9c <_strtoull_r>:
   14e9c:	b.w	14d00 <_strtoull_l.constprop.0>

00014ea0 <_mbrtowc_r>:
   14ea0:	push	{r4, r5, r6, lr}
   14ea2:	sub	sp, #8
   14ea4:	mov	r4, r0
   14ea6:	ldr	r5, [sp, #24]
   14ea8:	cbz	r5, 14ec0 <_mbrtowc_r+0x20>
   14eaa:	cbz	r2, 14ec8 <_mbrtowc_r+0x28>
   14eac:	ldr	r0, [pc, #60]	; (14eec <_mbrtowc_r+0x4c>)
   14eae:	str	r5, [sp, #0]
   14eb0:	ldr.w	r6, [r0, #228]	; 0xe4
   14eb4:	mov	r0, r4
   14eb6:	blx	r6
   14eb8:	adds	r3, r0, #1
   14eba:	beq.n	14ede <_mbrtowc_r+0x3e>
   14ebc:	add	sp, #8
   14ebe:	pop	{r4, r5, r6, pc}
   14ec0:	add.w	r5, r0, #244	; 0xf4
   14ec4:	cmp	r2, #0
   14ec6:	bne.n	14eac <_mbrtowc_r+0xc>
   14ec8:	ldr	r3, [pc, #32]	; (14eec <_mbrtowc_r+0x4c>)
   14eca:	str	r5, [sp, #0]
   14ecc:	ldr.w	r6, [r3, #228]	; 0xe4
   14ed0:	mov	r1, r2
   14ed2:	movs	r3, #1
   14ed4:	ldr	r2, [pc, #24]	; (14ef0 <_mbrtowc_r+0x50>)
   14ed6:	mov	r0, r4
   14ed8:	blx	r6
   14eda:	adds	r3, r0, #1
   14edc:	bne.n	14ebc <_mbrtowc_r+0x1c>
   14ede:	movs	r2, #0
   14ee0:	movs	r3, #138	; 0x8a
   14ee2:	str	r2, [r5, #0]
   14ee4:	str	r3, [r4, #0]
   14ee6:	add	sp, #8
   14ee8:	pop	{r4, r5, r6, pc}
   14eea:	nop
   14eec:	.word	0x20008d84
   14ef0:	.word	0x20000614

00014ef4 <_wcrtomb_r>:
   14ef4:	push	{r4, r5, r6, lr}
   14ef6:	mov	r5, r0
   14ef8:	sub	sp, #16
   14efa:	cbz	r3, 14f14 <_wcrtomb_r+0x20>
   14efc:	mov	r4, r3
   14efe:	cbz	r1, 14f1c <_wcrtomb_r+0x28>
   14f00:	ldr	r3, [pc, #56]	; (14f3c <_wcrtomb_r+0x48>)
   14f02:	mov	r0, r5
   14f04:	ldr.w	r6, [r3, #224]	; 0xe0
   14f08:	mov	r3, r4
   14f0a:	blx	r6
   14f0c:	adds	r3, r0, #1
   14f0e:	beq.n	14f30 <_wcrtomb_r+0x3c>
   14f10:	add	sp, #16
   14f12:	pop	{r4, r5, r6, pc}
   14f14:	add.w	r4, r0, #260	; 0x104
   14f18:	cmp	r1, #0
   14f1a:	bne.n	14f00 <_wcrtomb_r+0xc>
   14f1c:	ldr	r2, [pc, #28]	; (14f3c <_wcrtomb_r+0x48>)
   14f1e:	mov	r3, r4
   14f20:	ldr.w	r6, [r2, #224]	; 0xe0
   14f24:	mov	r0, r5
   14f26:	mov	r2, r1
   14f28:	add	r1, sp, #4
   14f2a:	blx	r6
   14f2c:	adds	r3, r0, #1
   14f2e:	bne.n	14f10 <_wcrtomb_r+0x1c>
   14f30:	movs	r2, #0
   14f32:	movs	r3, #138	; 0x8a
   14f34:	str	r2, [r4, #0]
   14f36:	str	r3, [r5, #0]
   14f38:	add	sp, #16
   14f3a:	pop	{r4, r5, r6, pc}
   14f3c:	.word	0x20008d84

00014f40 <_wcsrtombs_r>:
   14f40:	push	{r4, lr}
   14f42:	sub	sp, #8
   14f44:	ldr	r4, [sp, #16]
   14f46:	strd	r3, r4, [sp]
   14f4a:	mov.w	r3, #4294967295
   14f4e:	bl	16a90 <_wcsnrtombs_r>
   14f52:	add	sp, #8
   14f54:	pop	{r4, pc}
   14f56:	nop

00014f58 <iswspace>:
   14f58:	movs	r1, #0
   14f5a:	b.w	14f60 <iswspace_l>
   14f5e:	nop

00014f60 <iswspace_l>:
   14f60:	push	{r4, lr}
   14f62:	bl	150bc <_jp2uc_l>
   14f66:	mov	r4, r0
   14f68:	bl	16ab4 <category>
   14f6c:	sub.w	r3, r0, #26
   14f70:	uxtb	r3, r3
   14f72:	cmp	r3, #2
   14f74:	bls.n	14f84 <iswspace_l+0x24>
   14f76:	sub.w	r0, r4, #9
   14f7a:	cmp	r0, #4
   14f7c:	ite	hi
   14f7e:	movhi	r0, #0
   14f80:	movls	r0, #1
   14f82:	pop	{r4, pc}
   14f84:	movs	r0, #1
   14f86:	pop	{r4, pc}

00014f88 <__jp2uc>:
   14f88:	cmp	r1, #2
   14f8a:	beq.n	14ff2 <__jp2uc+0x6a>
   14f8c:	cmp	r1, #3
   14f8e:	ubfx	r3, r0, #8, #8
   14f92:	ittte	ne
   14f94:	subne.w	r2, r0, #128	; 0x80
   14f98:	eorne.w	r3, r3, #128	; 0x80
   14f9c:	uxtbne	r2, r2
   14f9e:	uxtbeq	r2, r0
   14fa0:	add.w	r1, r3, #80	; 0x50
   14fa4:	uxtb	r1, r1
   14fa6:	cmp	r1, #31
   14fa8:	bhi.n	14fb8 <__jp2uc+0x30>
   14faa:	movw	r1, #53203	; 0xcfd3
   14fae:	cmp	r0, r1
   14fb0:	bls.n	15086 <__jp2uc+0xfe>
   14fb2:	mov.w	r0, #4294967295
   14fb6:	bx	lr
   14fb8:	add.w	r1, r3, #48	; 0x30
   14fbc:	uxtb	r1, r1
   14fbe:	cmp	r1, #36	; 0x24
   14fc0:	bhi.n	14fe0 <__jp2uc+0x58>
   14fc2:	movw	r1, #62630	; 0xf4a6
   14fc6:	cmp	r0, r1
   14fc8:	bhi.n	14fb2 <__jp2uc+0x2a>
   14fca:	subs	r3, #208	; 0xd0
   14fcc:	rsb	r3, r3, r3, lsl #7
   14fd0:	sub.w	r0, r2, #161	; 0xa1
   14fd4:	add.w	r0, r0, r3, lsl #1
   14fd8:	ldr	r2, [pc, #192]	; (1509c <__jp2uc+0x114>)
   14fda:	ldrh.w	r0, [r2, r0, lsl #1]
   14fde:	bx	lr
   14fe0:	subs	r3, #161	; 0xa1
   14fe2:	cmp	r3, #7
   14fe4:	bhi.n	14fb2 <__jp2uc+0x2a>
   14fe6:	tbb	[pc, r3]
   14fea:	.short	0x3e48
   14fec:	.word	0x25292e34
   14ff0:	.short	0x1921
   14ff2:	uxtb	r2, r0
   14ff4:	cmp	r2, #158	; 0x9e
   14ff6:	ubfx	r1, r0, #8, #8
   14ffa:	bls.n	15014 <__jp2uc+0x8c>
   14ffc:	adds	r2, #35	; 0x23
   14ffe:	uxtb	r2, r2
   15000:	movs	r3, #128	; 0x80
   15002:	cmp	r1, #159	; 0x9f
   15004:	ite	ls
   15006:	subls	r1, #112	; 0x70
   15008:	addhi	r1, #80	; 0x50
   1500a:	add.w	r3, r3, r1, lsl #1
   1500e:	and.w	r3, r3, #255	; 0xff
   15012:	b.n	14fa0 <__jp2uc+0x18>
   15014:	subs	r2, #126	; 0x7e
   15016:	uxtb	r2, r2
   15018:	movs	r3, #127	; 0x7f
   1501a:	b.n	15002 <__jp2uc+0x7a>
   1501c:	cmp	r2, #192	; 0xc0
   1501e:	bhi.n	14fb2 <__jp2uc+0x2a>
   15020:	ldr	r3, [pc, #124]	; (150a0 <__jp2uc+0x118>)
   15022:	sub.w	r0, r2, #161	; 0xa1
   15026:	ldrh.w	r0, [r3, r0, lsl #1]
   1502a:	bx	lr
   1502c:	cmp	r2, #241	; 0xf1
   1502e:	bhi.n	14fb2 <__jp2uc+0x2a>
   15030:	ldr	r3, [pc, #112]	; (150a4 <__jp2uc+0x11c>)
   15032:	b.n	15068 <__jp2uc+0xe0>
   15034:	cmp	r2, #216	; 0xd8
   15036:	bhi.n	14fb2 <__jp2uc+0x2a>
   15038:	ldr	r3, [pc, #108]	; (150a8 <__jp2uc+0x120>)
   1503a:	b.n	15068 <__jp2uc+0xe0>
   1503c:	cmp	r2, #246	; 0xf6
   1503e:	bhi.n	14fb2 <__jp2uc+0x2a>
   15040:	add.w	r0, r2, #12288	; 0x3000
   15044:	bx	lr
   15046:	cmp	r2, #243	; 0xf3
   15048:	bhi.n	14fb2 <__jp2uc+0x2a>
   1504a:	add.w	r0, r2, #12160	; 0x2f80
   1504e:	adds	r0, #32
   15050:	bx	lr
   15052:	ldr	r3, [pc, #88]	; (150ac <__jp2uc+0x124>)
   15054:	add	r3, r2
   15056:	ldrb.w	r3, [r3, #-161]
   1505a:	cmp	r3, #0
   1505c:	beq.n	14fb2 <__jp2uc+0x2a>
   1505e:	add.w	r0, r2, #65024	; 0xfe00
   15062:	adds	r0, #96	; 0x60
   15064:	bx	lr
   15066:	ldr	r3, [pc, #72]	; (150b0 <__jp2uc+0x128>)
   15068:	sub.w	r0, r2, #161	; 0xa1
   1506c:	ldrh.w	r0, [r3, r0, lsl #1]
   15070:	cmp	r0, #0
   15072:	it	eq
   15074:	moveq.w	r0, #4294967295
   15078:	bx	lr
   1507a:	ldr	r3, [pc, #56]	; (150b4 <__jp2uc+0x12c>)
   1507c:	sub.w	r0, r2, #161	; 0xa1
   15080:	ldrh.w	r0, [r3, r0, lsl #1]
   15084:	bx	lr
   15086:	subs	r3, #176	; 0xb0
   15088:	rsb	r3, r3, r3, lsl #7
   1508c:	sub.w	r0, r2, #161	; 0xa1
   15090:	add.w	r0, r0, r3, lsl #1
   15094:	ldr	r2, [pc, #32]	; (150b8 <__jp2uc+0x130>)
   15096:	ldrh.w	r0, [r2, r0, lsl #1]
   1509a:	bx	lr
   1509c:	.word	0x200059c0
   150a0:	.word	0x20000ce8
   150a4:	.word	0x20000c44
   150a8:	.word	0x20000bd4
   150ac:	.word	0x20000b78
   150b0:	.word	0x20000abc
   150b4:	.word	0x20000a00
   150b8:	.word	0x20000d28

000150bc <_jp2uc_l>:
   150bc:	push	{r3, r4, r5, lr}
   150be:	mov	r5, r0
   150c0:	cbz	r1, 150f2 <_jp2uc_l+0x36>
   150c2:	add.w	r4, r1, #298	; 0x12a
   150c6:	ldr	r1, [pc, #72]	; (15110 <_jp2uc_l+0x54>)
   150c8:	mov	r0, r4
   150ca:	bl	e848 <strcmp>
   150ce:	cbnz	r0, 150dc <_jp2uc_l+0x20>
   150d0:	mov	r0, r5
   150d2:	movs	r1, #1
   150d4:	ldmia.w	sp!, {r3, r4, r5, lr}
   150d8:	b.w	14f88 <__jp2uc>
   150dc:	ldr	r1, [pc, #52]	; (15114 <_jp2uc_l+0x58>)
   150de:	mov	r0, r4
   150e0:	bl	e848 <strcmp>
   150e4:	cbnz	r0, 150f6 <_jp2uc_l+0x3a>
   150e6:	mov	r0, r5
   150e8:	movs	r1, #2
   150ea:	ldmia.w	sp!, {r3, r4, r5, lr}
   150ee:	b.w	14f88 <__jp2uc>
   150f2:	ldr	r4, [pc, #36]	; (15118 <_jp2uc_l+0x5c>)
   150f4:	b.n	150c6 <_jp2uc_l+0xa>
   150f6:	ldr	r1, [pc, #36]	; (1511c <_jp2uc_l+0x60>)
   150f8:	mov	r0, r4
   150fa:	bl	e848 <strcmp>
   150fe:	cbnz	r0, 1510c <_jp2uc_l+0x50>
   15100:	mov	r0, r5
   15102:	movs	r1, #3
   15104:	ldmia.w	sp!, {r3, r4, r5, lr}
   15108:	b.w	14f88 <__jp2uc>
   1510c:	mov	r0, r5
   1510e:	pop	{r3, r4, r5, pc}
   15110:	.word	0x20000994
   15114:	.word	0x20000998
   15118:	.word	0x20008eae
   1511c:	.word	0x200009a0

00015120 <fiprintf>:
   15120:	push	{r1, r2, r3}
   15122:	push	{r4, lr}
   15124:	sub	sp, #12
   15126:	add	r3, sp, #20
   15128:	ldr	r4, [pc, #24]	; (15144 <fiprintf+0x24>)
   1512a:	ldr.w	r2, [r3], #4
   1512e:	str	r3, [sp, #4]
   15130:	mov	r1, r0
   15132:	ldr	r0, [r4, #0]
   15134:	bl	15430 <_vfiprintf_r>
   15138:	add	sp, #12
   1513a:	ldmia.w	sp!, {r4, lr}
   1513e:	add	sp, #12
   15140:	bx	lr
   15142:	nop
   15144:	.word	0x2000930c

00015148 <__ssprint_r>:
   15148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1514c:	ldr	r3, [r2, #8]
   1514e:	ldr	r7, [r2, #0]
   15150:	sub	sp, #12
   15152:	mov	sl, r2
   15154:	cmp	r3, #0
   15156:	beq.n	1523a <__ssprint_r+0xf2>
   15158:	mov	r9, r0
   1515a:	ldr	r2, [r1, #8]
   1515c:	ldr	r0, [r1, #0]
   1515e:	mov	r4, r1
   15160:	adds	r7, #8
   15162:	b.n	151ec <__ssprint_r+0xa4>
   15164:	ldrh	r3, [r4, #12]
   15166:	tst.w	r3, #1152	; 0x480
   1516a:	beq.n	151ca <__ssprint_r+0x82>
   1516c:	ldrd	r1, r6, [r4, #16]
   15170:	sub.w	r8, r0, r1
   15174:	add.w	r6, r6, r6, lsl #1
   15178:	add.w	r6, r6, r6, lsr #31
   1517c:	add.w	r0, r8, #1
   15180:	asrs	r6, r6, #1
   15182:	add	r0, r5
   15184:	cmp	r0, r6
   15186:	mov	r2, r6
   15188:	itt	hi
   1518a:	movhi	r6, r0
   1518c:	movhi	r2, r6
   1518e:	lsls	r3, r3, #21
   15190:	bpl.n	15202 <__ssprint_r+0xba>
   15192:	mov	r1, r2
   15194:	mov	r0, r9
   15196:	bl	c680 <_malloc_r>
   1519a:	str	r0, [sp, #4]
   1519c:	cmp	r0, #0
   1519e:	beq.n	15216 <__ssprint_r+0xce>
   151a0:	mov	r2, r8
   151a2:	ldr	r1, [r4, #16]
   151a4:	bl	9c60 <memcpy>
   151a8:	ldrh	r2, [r4, #12]
   151aa:	ldr	r3, [sp, #4]
   151ac:	bic.w	r2, r2, #1152	; 0x480
   151b0:	orr.w	r2, r2, #128	; 0x80
   151b4:	strh	r2, [r4, #12]
   151b6:	sub.w	r2, r6, r8
   151ba:	add.w	r0, r3, r8
   151be:	str	r6, [r4, #20]
   151c0:	str	r2, [r4, #8]
   151c2:	str	r3, [r4, #16]
   151c4:	str	r0, [r4, #0]
   151c6:	mov	r6, r5
   151c8:	mov	r8, r5
   151ca:	mov	r2, r8
   151cc:	mov	r1, fp
   151ce:	bl	e468 <memmove>
   151d2:	ldr.w	r3, [sl, #8]
   151d6:	ldr	r2, [r4, #8]
   151d8:	ldr	r0, [r4, #0]
   151da:	subs	r2, r2, r6
   151dc:	add	r0, r8
   151de:	subs	r3, r3, r5
   151e0:	str	r2, [r4, #8]
   151e2:	str	r0, [r4, #0]
   151e4:	str.w	r3, [sl, #8]
   151e8:	cbz	r3, 1523a <__ssprint_r+0xf2>
   151ea:	adds	r7, #8
   151ec:	ldrd	fp, r5, [r7, #-8]
   151f0:	cmp	r5, #0
   151f2:	beq.n	151ea <__ssprint_r+0xa2>
   151f4:	cmp	r2, r5
   151f6:	mov	r6, r2
   151f8:	mov	r8, r2
   151fa:	bls.n	15164 <__ssprint_r+0x1c>
   151fc:	mov	r6, r5
   151fe:	mov	r8, r5
   15200:	b.n	151ca <__ssprint_r+0x82>
   15202:	mov	r0, r9
   15204:	bl	cc10 <_realloc_r>
   15208:	mov	r3, r0
   1520a:	cmp	r0, #0
   1520c:	bne.n	151b6 <__ssprint_r+0x6e>
   1520e:	ldr	r1, [r4, #16]
   15210:	mov	r0, r9
   15212:	bl	eea4 <_free_r>
   15216:	ldrh	r3, [r4, #12]
   15218:	movs	r2, #12
   1521a:	orr.w	r3, r3, #64	; 0x40
   1521e:	str.w	r2, [r9]
   15222:	mov.w	r0, #4294967295
   15226:	strh	r3, [r4, #12]
   15228:	movs	r2, #0
   1522a:	movs	r3, #0
   1522c:	str.w	r2, [sl, #8]
   15230:	str.w	r3, [sl, #4]
   15234:	add	sp, #12
   15236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1523a:	movs	r0, #0
   1523c:	movs	r3, #0
   1523e:	str.w	r3, [sl, #4]
   15242:	add	sp, #12
   15244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015248 <_sungetc_r>:
   15248:	push	{r3, r4, r5, lr}
   1524a:	adds	r3, r1, #1
   1524c:	beq.n	15284 <_sungetc_r+0x3c>
   1524e:	ldrh	r3, [r2, #12]
   15250:	mov	r4, r2
   15252:	ldr	r2, [r2, #48]	; 0x30
   15254:	bic.w	r3, r3, #32
   15258:	strh	r3, [r4, #12]
   1525a:	uxtb	r5, r1
   1525c:	cbz	r2, 1528a <_sungetc_r+0x42>
   1525e:	ldr	r2, [r4, #4]
   15260:	ldr	r3, [r4, #52]	; 0x34
   15262:	cmp	r2, r3
   15264:	bge.n	1527a <_sungetc_r+0x32>
   15266:	ldr	r3, [r4, #0]
   15268:	subs	r2, r3, #1
   1526a:	str	r2, [r4, #0]
   1526c:	strb.w	r5, [r3, #-1]
   15270:	ldr	r3, [r4, #4]
   15272:	adds	r3, #1
   15274:	str	r3, [r4, #4]
   15276:	mov	r0, r5
   15278:	pop	{r3, r4, r5, pc}
   1527a:	mov	r1, r4
   1527c:	bl	16730 <__submore>
   15280:	cmp	r0, #0
   15282:	beq.n	15266 <_sungetc_r+0x1e>
   15284:	mov.w	r5, #4294967295
   15288:	b.n	15276 <_sungetc_r+0x2e>
   1528a:	ldr	r3, [r4, #16]
   1528c:	ldr	r2, [r4, #0]
   1528e:	cbz	r3, 1529c <_sungetc_r+0x54>
   15290:	cmp	r3, r2
   15292:	bcs.n	1529c <_sungetc_r+0x54>
   15294:	ldrb.w	r3, [r2, #-1]
   15298:	cmp	r3, r5
   1529a:	beq.n	152bc <_sungetc_r+0x74>
   1529c:	ldr	r1, [r4, #4]
   1529e:	str	r1, [r4, #60]	; 0x3c
   152a0:	mov	r3, r4
   152a2:	str	r2, [r4, #56]	; 0x38
   152a4:	add.w	r1, r4, #64	; 0x40
   152a8:	movs	r2, #3
   152aa:	str	r2, [r4, #52]	; 0x34
   152ac:	str	r1, [r4, #48]	; 0x30
   152ae:	strb.w	r5, [r3, #66]!
   152b2:	movs	r2, #1
   152b4:	strd	r3, r2, [r4]
   152b8:	mov	r0, r5
   152ba:	pop	{r3, r4, r5, pc}
   152bc:	ldr	r3, [r4, #4]
   152be:	subs	r2, #1
   152c0:	adds	r3, #1
   152c2:	strd	r2, r3, [r4]
   152c6:	b.n	15276 <_sungetc_r+0x2e>

000152c8 <__ssrefill_r>:
   152c8:	push	{r4, lr}
   152ca:	mov	r4, r1
   152cc:	ldr	r1, [r1, #48]	; 0x30
   152ce:	cbz	r1, 152ec <__ssrefill_r+0x24>
   152d0:	add.w	r3, r4, #64	; 0x40
   152d4:	cmp	r1, r3
   152d6:	beq.n	152dc <__ssrefill_r+0x14>
   152d8:	bl	eea4 <_free_r>
   152dc:	ldr	r3, [r4, #60]	; 0x3c
   152de:	str	r3, [r4, #4]
   152e0:	movs	r0, #0
   152e2:	str	r0, [r4, #48]	; 0x30
   152e4:	cbz	r3, 152ec <__ssrefill_r+0x24>
   152e6:	ldr	r3, [r4, #56]	; 0x38
   152e8:	str	r3, [r4, #0]
   152ea:	pop	{r4, pc}
   152ec:	ldrh	r3, [r4, #12]
   152ee:	ldr	r1, [r4, #16]
   152f0:	movs	r2, #0
   152f2:	orr.w	r3, r3, #32
   152f6:	strd	r1, r2, [r4]
   152fa:	strh	r3, [r4, #12]
   152fc:	mov.w	r0, #4294967295
   15300:	pop	{r4, pc}
   15302:	nop

00015304 <_sfread_r>:
   15304:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15308:	sub	sp, #20
   1530a:	strd	r3, r2, [sp, #8]
   1530e:	mul.w	r3, r2, r3
   15312:	ldr	r4, [sp, #56]	; 0x38
   15314:	str	r3, [sp, #4]
   15316:	cbz	r3, 15382 <_sfread_r+0x7e>
   15318:	ldr.w	sl, [r4, #4]
   1531c:	ldr	r3, [sp, #4]
   1531e:	cmp	r3, sl
   15320:	mov	fp, r1
   15322:	bls.n	153b2 <_sfread_r+0xae>
   15324:	mov	r8, r4
   15326:	ldr	r5, [sp, #4]
   15328:	ldr.w	r1, [r8], #64
   1532c:	mov	r7, r0
   1532e:	movs	r6, #0
   15330:	mov	r2, sl
   15332:	mov	r0, fp
   15334:	bl	9c60 <memcpy>
   15338:	ldr	r3, [r4, #0]
   1533a:	ldr	r2, [r4, #48]	; 0x30
   1533c:	add	r3, sl
   1533e:	mov	r9, r5
   15340:	strd	r3, r6, [r4]
   15344:	mov	r1, r2
   15346:	mov	r0, r7
   15348:	add	fp, sl
   1534a:	sub.w	r5, r5, sl
   1534e:	cbz	r2, 1538a <_sfread_r+0x86>
   15350:	cmp	r2, r8
   15352:	beq.n	15358 <_sfread_r+0x54>
   15354:	bl	eea4 <_free_r>
   15358:	ldr	r3, [r4, #60]	; 0x3c
   1535a:	str	r6, [r4, #48]	; 0x30
   1535c:	str	r3, [r4, #4]
   1535e:	cbz	r3, 1538a <_sfread_r+0x86>
   15360:	ldr	r1, [r4, #56]	; 0x38
   15362:	str	r1, [r4, #0]
   15364:	cmp	r3, r5
   15366:	mov	sl, r3
   15368:	bcc.n	15330 <_sfread_r+0x2c>
   1536a:	ldr	r3, [sp, #8]
   1536c:	str	r3, [sp, #4]
   1536e:	mov	r2, r5
   15370:	mov	r0, fp
   15372:	bl	9c60 <memcpy>
   15376:	ldrd	r3, r2, [r4]
   1537a:	subs	r2, r2, r5
   1537c:	add	r3, r5
   1537e:	strd	r3, r2, [r4]
   15382:	ldr	r0, [sp, #4]
   15384:	add	sp, #20
   15386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1538a:	ldr	r2, [sp, #4]
   1538c:	ldr	r3, [sp, #12]
   1538e:	add	r2, sl
   15390:	sub.w	r2, r2, r9
   15394:	udiv	r3, r2, r3
   15398:	str	r3, [sp, #4]
   1539a:	ldrh	r3, [r4, #12]
   1539c:	ldr	r2, [r4, #16]
   1539e:	ldr	r0, [sp, #4]
   153a0:	orr.w	r3, r3, #32
   153a4:	strh	r3, [r4, #12]
   153a6:	movs	r3, #0
   153a8:	strd	r2, r3, [r4]
   153ac:	add	sp, #20
   153ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b2:	ldr	r1, [r4, #0]
   153b4:	mov	r5, r3
   153b6:	b.n	1536a <_sfread_r+0x66>

000153b8 <__sprint_r.part.0>:
   153b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153bc:	ldr	r3, [r1, #100]	; 0x64
   153be:	lsls	r4, r3, #18
   153c0:	mov	r8, r2
   153c2:	bpl.n	15420 <__sprint_r.part.0+0x68>
   153c4:	ldr	r3, [r2, #8]
   153c6:	ldr	r2, [r2, #0]
   153c8:	cbz	r3, 1541c <__sprint_r.part.0+0x64>
   153ca:	mov	fp, r1
   153cc:	mov	r6, r0
   153ce:	add.w	r9, r2, #8
   153d2:	ldrd	r5, sl, [r9, #-8]
   153d6:	movs.w	r7, sl, lsr #2
   153da:	beq.n	15408 <__sprint_r.part.0+0x50>
   153dc:	subs	r5, #4
   153de:	movs	r4, #0
   153e0:	b.n	153e6 <__sprint_r.part.0+0x2e>
   153e2:	cmp	r7, r4
   153e4:	beq.n	15404 <__sprint_r.part.0+0x4c>
   153e6:	ldr.w	r1, [r5, #4]!
   153ea:	mov	r2, fp
   153ec:	mov	r0, r6
   153ee:	bl	16920 <_fputwc_r>
   153f2:	adds	r3, r0, #1
   153f4:	add.w	r4, r4, #1
   153f8:	bne.n	153e2 <__sprint_r.part.0+0x2a>
   153fa:	movs	r3, #0
   153fc:	strd	r3, r3, [r8, #4]
   15400:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15404:	ldr.w	r3, [r8, #8]
   15408:	bic.w	sl, sl, #3
   1540c:	sub.w	r3, r3, sl
   15410:	str.w	r3, [r8, #8]
   15414:	add.w	r9, r9, #8
   15418:	cmp	r3, #0
   1541a:	bne.n	153d2 <__sprint_r.part.0+0x1a>
   1541c:	movs	r0, #0
   1541e:	b.n	153fa <__sprint_r.part.0+0x42>
   15420:	bl	1643c <__sfvwrite_r>
   15424:	movs	r3, #0
   15426:	strd	r3, r3, [r8, #4]
   1542a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1542e:	nop

00015430 <_vfiprintf_r>:
   15430:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15434:	vpush	{d8}
   15438:	sub	sp, #276	; 0x114
   1543a:	add.w	sl, sp, #80	; 0x50
   1543e:	mov	fp, r0
   15440:	vmov	s16, r1
   15444:	mov	r6, r2
   15446:	movs	r1, #0
   15448:	movs	r2, #8
   1544a:	mov	r0, sl
   1544c:	mov	r4, r3
   1544e:	str	r3, [sp, #28]
   15450:	bl	9c1c <memset>
   15454:	cmp.w	fp, #0
   15458:	beq.n	15464 <_vfiprintf_r+0x34>
   1545a:	ldr.w	r3, [fp, #52]	; 0x34
   1545e:	cmp	r3, #0
   15460:	beq.w	161a4 <_vfiprintf_r+0xd74>
   15464:	vmov	r2, s16
   15468:	ldr	r3, [r2, #100]	; 0x64
   1546a:	lsls	r3, r3, #31
   1546c:	bpl.w	15e96 <_vfiprintf_r+0xa66>
   15470:	ldrsh.w	r1, [r2, #12]
   15474:	uxth	r2, r1
   15476:	lsls	r5, r2, #18
   15478:	bmi.n	15492 <_vfiprintf_r+0x62>
   1547a:	vmov	r3, s16
   1547e:	orr.w	r1, r1, #8192	; 0x2000
   15482:	strh	r1, [r3, #12]
   15484:	ldr	r3, [r3, #100]	; 0x64
   15486:	uxth	r2, r1
   15488:	vmov	r1, s16
   1548c:	bic.w	r3, r3, #8192	; 0x2000
   15490:	str	r3, [r1, #100]	; 0x64
   15492:	lsls	r0, r2, #28
   15494:	bpl.w	156a2 <_vfiprintf_r+0x272>
   15498:	vmov	r3, s16
   1549c:	ldr	r3, [r3, #16]
   1549e:	cmp	r3, #0
   154a0:	beq.w	156a2 <_vfiprintf_r+0x272>
   154a4:	and.w	r3, r2, #26
   154a8:	cmp	r3, #10
   154aa:	beq.w	156c2 <_vfiprintf_r+0x292>
   154ae:	movs	r3, #0
   154b0:	strd	r3, r3, [sp, #100]	; 0x64
   154b4:	strd	r3, r3, [sp, #52]	; 0x34
   154b8:	add	r2, sp, #108	; 0x6c
   154ba:	str	r3, [sp, #48]	; 0x30
   154bc:	str	r2, [sp, #96]	; 0x60
   154be:	mov	r9, r2
   154c0:	str	r3, [sp, #44]	; 0x2c
   154c2:	str	r3, [sp, #20]
   154c4:	mov	r8, r6
   154c6:	mov	r4, r8
   154c8:	ldr	r3, [pc, #672]	; (1576c <_vfiprintf_r+0x33c>)
   154ca:	ldr.w	r5, [r3, #228]	; 0xe4
   154ce:	bl	e6fc <__locale_mb_cur_max>
   154d2:	mov	r2, r4
   154d4:	mov	r3, r0
   154d6:	add	r1, sp, #72	; 0x48
   154d8:	str.w	sl, [sp]
   154dc:	mov	r0, fp
   154de:	blx	r5
   154e0:	cmp	r0, #0
   154e2:	beq.w	15770 <_vfiprintf_r+0x340>
   154e6:	blt.w	1575c <_vfiprintf_r+0x32c>
   154ea:	ldr	r2, [sp, #72]	; 0x48
   154ec:	cmp	r2, #37	; 0x25
   154ee:	mov	r3, r0
   154f0:	beq.n	154f6 <_vfiprintf_r+0xc6>
   154f2:	add	r4, r3
   154f4:	b.n	154c8 <_vfiprintf_r+0x98>
   154f6:	subs.w	r6, r4, r8
   154fa:	mov	r5, r0
   154fc:	bne.w	15778 <_vfiprintf_r+0x348>
   15500:	movs	r3, #0
   15502:	ldrb	r1, [r4, #1]
   15504:	strb.w	r3, [sp, #67]	; 0x43
   15508:	add.w	r8, r4, #1
   1550c:	str	r3, [sp, #24]
   1550e:	mov.w	r7, #4294967295
   15512:	mov	r6, r3
   15514:	movs	r4, #43	; 0x2b
   15516:	add.w	r8, r8, #1
   1551a:	sub.w	r3, r1, #32
   1551e:	cmp	r3, #90	; 0x5a
   15520:	bhi.w	15814 <_vfiprintf_r+0x3e4>
   15524:	tbh	[pc, r3, lsl #1]
   15528:	.word	0x017602b5
   1552c:	.word	0x02b00176
   15530:	.word	0x01760176
   15534:	.word	0x006a0176
   15538:	.word	0x01760176
   1553c:	.word	0x028d027d
   15540:	.word	0x02880176
   15544:	.word	0x01760297
   15548:	.word	0x005b0292
   1554c:	.word	0x005b005b
   15550:	.word	0x005b005b
   15554:	.word	0x005b005b
   15558:	.word	0x005b005b
   1555c:	.word	0x01760176
   15560:	.word	0x01760176
   15564:	.word	0x01760176
   15568:	.word	0x01760176
   1556c:	.word	0x025c0176
   15570:	.word	0x01760084
   15574:	.word	0x01760176
   15578:	.word	0x01760176
   1557c:	.word	0x01760176
   15580:	.word	0x01760176
   15584:	.word	0x00e80176
   15588:	.word	0x01760176
   1558c:	.word	0x02330176
   15590:	.word	0x02da0176
   15594:	.word	0x01760176
   15598:	.word	0x0176058b
   1559c:	.word	0x01760176
   155a0:	.word	0x01760176
   155a4:	.word	0x01760176
   155a8:	.word	0x01760176
   155ac:	.word	0x025c0176
   155b0:	.word	0x01760086
   155b4:	.word	0x01760176
   155b8:	.word	0x008602cd
   155bc:	.word	0x0176007f
   155c0:	.word	0x017602c0
   155c4:	.word	0x00ea02fd
   155c8:	.word	0x007f02ed
   155cc:	.word	0x02330176
   155d0:	.word	0x0569007c
   155d4:	.word	0x01760176
   155d8:	.word	0x0176056b
   155dc:	.short	0x007c
   155de:	sub.w	r3, r1, #48	; 0x30
   155e2:	movs	r2, #0
   155e4:	ldrb.w	r1, [r8], #1
   155e8:	add.w	r2, r2, r2, lsl #2
   155ec:	add.w	r2, r3, r2, lsl #1
   155f0:	sub.w	r3, r1, #48	; 0x30
   155f4:	cmp	r3, #9
   155f6:	bls.n	155e4 <_vfiprintf_r+0x1b4>
   155f8:	str	r2, [sp, #24]
   155fa:	b.n	1551a <_vfiprintf_r+0xea>
   155fc:	mov	r0, fp
   155fe:	bl	13afc <_localeconv_r>
   15602:	ldr	r3, [r0, #4]
   15604:	str	r3, [sp, #52]	; 0x34
   15606:	mov	r0, r3
   15608:	bl	ec80 <strlen>
   1560c:	str	r0, [sp, #56]	; 0x38
   1560e:	mov	r5, r0
   15610:	mov	r0, fp
   15612:	bl	13afc <_localeconv_r>
   15616:	ldr	r3, [r0, #8]
   15618:	str	r3, [sp, #44]	; 0x2c
   1561a:	cmp	r5, #0
   1561c:	bne.w	15fcc <_vfiprintf_r+0xb9c>
   15620:	ldrb.w	r1, [r8]
   15624:	b.n	15516 <_vfiprintf_r+0xe6>
   15626:	ldrb.w	r1, [r8]
   1562a:	orr.w	r6, r6, #32
   1562e:	b.n	15516 <_vfiprintf_r+0xe6>
   15630:	orr.w	r6, r6, #16
   15634:	lsls	r4, r6, #26
   15636:	bpl.w	15956 <_vfiprintf_r+0x526>
   1563a:	ldr	r3, [sp, #28]
   1563c:	adds	r3, #7
   1563e:	bic.w	r3, r3, #7
   15642:	mov	r2, r3
   15644:	ldr	r1, [r3, #4]
   15646:	ldr.w	r3, [r2], #8
   1564a:	str	r2, [sp, #28]
   1564c:	mov	r2, r1
   1564e:	cmp	r1, #0
   15650:	blt.w	15f34 <_vfiprintf_r+0xb04>
   15654:	adds	r1, r7, #1
   15656:	beq.w	1619e <_vfiprintf_r+0xd6e>
   1565a:	bic.w	r1, r6, #128	; 0x80
   1565e:	str	r1, [sp, #12]
   15660:	orrs.w	r1, r3, r2
   15664:	beq.w	15ee6 <_vfiprintf_r+0xab6>
   15668:	cmp	r3, #10
   1566a:	sbcs.w	r1, r2, #0
   1566e:	bcs.w	160f4 <_vfiprintf_r+0xcc4>
   15672:	adds	r3, #48	; 0x30
   15674:	strb.w	r3, [sp, #271]	; 0x10f
   15678:	ldr	r6, [sp, #12]
   1567a:	movs	r3, #1
   1567c:	str	r3, [sp, #16]
   1567e:	addw	r4, sp, #271	; 0x10f
   15682:	ldr	r3, [sp, #16]
   15684:	cmp	r3, r7
   15686:	it	lt
   15688:	movlt	r3, r7
   1568a:	str	r3, [sp, #12]
   1568c:	movs	r3, #0
   1568e:	str	r3, [sp, #32]
   15690:	ldrb.w	r3, [sp, #67]	; 0x43
   15694:	cmp	r3, #0
   15696:	beq.w	15830 <_vfiprintf_r+0x400>
   1569a:	ldr	r3, [sp, #12]
   1569c:	adds	r3, #1
   1569e:	str	r3, [sp, #12]
   156a0:	b.n	15830 <_vfiprintf_r+0x400>
   156a2:	vmov	r1, s16
   156a6:	mov	r0, fp
   156a8:	vmov	r5, s16
   156ac:	bl	167a8 <__swsetup_r>
   156b0:	cmp	r0, #0
   156b2:	bne.w	1635a <_vfiprintf_r+0xf2a>
   156b6:	ldrh	r2, [r5, #12]
   156b8:	and.w	r3, r2, #26
   156bc:	cmp	r3, #10
   156be:	bne.w	154ae <_vfiprintf_r+0x7e>
   156c2:	vmov	r1, s16
   156c6:	ldrsh.w	r3, [r1, #14]
   156ca:	cmp	r3, #0
   156cc:	blt.w	154ae <_vfiprintf_r+0x7e>
   156d0:	ldr	r3, [r1, #100]	; 0x64
   156d2:	lsls	r3, r3, #31
   156d4:	bmi.n	156dc <_vfiprintf_r+0x2ac>
   156d6:	lsls	r7, r2, #22
   156d8:	bpl.w	16300 <_vfiprintf_r+0xed0>
   156dc:	vmov	r1, s16
   156e0:	mov	r3, r4
   156e2:	mov	r2, r6
   156e4:	mov	r0, fp
   156e6:	bl	163bc <__sbprintf>
   156ea:	str	r0, [sp, #20]
   156ec:	ldr	r0, [sp, #20]
   156ee:	add	sp, #276	; 0x114
   156f0:	vpop	{d8}
   156f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156f8:	orr.w	r6, r6, #16
   156fc:	ands.w	r2, r6, #32
   15700:	beq.w	15970 <_vfiprintf_r+0x540>
   15704:	ldr	r3, [sp, #28]
   15706:	adds	r3, #7
   15708:	bic.w	r3, r3, #7
   1570c:	mov	r1, r3
   1570e:	ldr	r2, [r3, #4]
   15710:	ldr.w	r3, [r1], #8
   15714:	str	r1, [sp, #28]
   15716:	bic.w	r1, r6, #1024	; 0x400
   1571a:	str	r1, [sp, #12]
   1571c:	movs	r1, #0
   1571e:	movs	r0, #0
   15720:	strb.w	r0, [sp, #67]	; 0x43
   15724:	adds	r0, r7, #1
   15726:	beq.w	15b4a <_vfiprintf_r+0x71a>
   1572a:	ldr	r0, [sp, #12]
   1572c:	bic.w	r6, r0, #128	; 0x80
   15730:	orrs.w	r0, r3, r2
   15734:	bne.w	15b48 <_vfiprintf_r+0x718>
   15738:	cmp	r7, #0
   1573a:	bne.w	161ae <_vfiprintf_r+0xd7e>
   1573e:	cmp	r1, #0
   15740:	bne.w	15eee <_vfiprintf_r+0xabe>
   15744:	ldr	r3, [sp, #12]
   15746:	ands.w	r3, r3, #1
   1574a:	str	r3, [sp, #16]
   1574c:	beq.w	15f72 <_vfiprintf_r+0xb42>
   15750:	movs	r3, #48	; 0x30
   15752:	strb.w	r3, [sp, #271]	; 0x10f
   15756:	addw	r4, sp, #271	; 0x10f
   1575a:	b.n	15682 <_vfiprintf_r+0x252>
   1575c:	movs	r2, #8
   1575e:	movs	r1, #0
   15760:	mov	r0, sl
   15762:	bl	9c1c <memset>
   15766:	movs	r3, #1
   15768:	add	r4, r3
   1576a:	b.n	154c8 <_vfiprintf_r+0x98>
   1576c:	.word	0x20008d84
   15770:	subs.w	r6, r4, r8
   15774:	mov	r5, r0
   15776:	beq.n	157b0 <_vfiprintf_r+0x380>
   15778:	ldr	r3, [sp, #100]	; 0x64
   1577a:	ldr	r2, [sp, #104]	; 0x68
   1577c:	adds	r3, #1
   1577e:	add	r2, r6
   15780:	cmp	r3, #7
   15782:	strd	r8, r6, [r9]
   15786:	str	r2, [sp, #104]	; 0x68
   15788:	str	r3, [sp, #100]	; 0x64
   1578a:	ble.n	157c6 <_vfiprintf_r+0x396>
   1578c:	cmp	r2, #0
   1578e:	beq.w	15ede <_vfiprintf_r+0xaae>
   15792:	vmov	r1, s16
   15796:	add	r2, sp, #96	; 0x60
   15798:	mov	r0, fp
   1579a:	bl	153b8 <__sprint_r.part.0>
   1579e:	cbnz	r0, 157ea <_vfiprintf_r+0x3ba>
   157a0:	add.w	r9, sp, #108	; 0x6c
   157a4:	ldr	r3, [sp, #20]
   157a6:	add	r3, r6
   157a8:	str	r3, [sp, #20]
   157aa:	cmp	r5, #0
   157ac:	bne.w	15500 <_vfiprintf_r+0xd0>
   157b0:	ldr	r3, [sp, #104]	; 0x68
   157b2:	cmp	r3, #0
   157b4:	bne.w	1633a <_vfiprintf_r+0xf0a>
   157b8:	vmov	r3, s16
   157bc:	movs	r2, #0
   157be:	ldrsh.w	r3, [r3, #12]
   157c2:	str	r2, [sp, #100]	; 0x64
   157c4:	b.n	157f2 <_vfiprintf_r+0x3c2>
   157c6:	add.w	r9, r9, #8
   157ca:	b.n	157a4 <_vfiprintf_r+0x374>
   157cc:	vmov	r1, s16
   157d0:	add	r2, sp, #96	; 0x60
   157d2:	mov	r0, fp
   157d4:	bl	153b8 <__sprint_r.part.0>
   157d8:	cmp	r0, #0
   157da:	beq.w	1592a <_vfiprintf_r+0x4fa>
   157de:	ldr	r3, [sp, #32]
   157e0:	cbz	r3, 157ea <_vfiprintf_r+0x3ba>
   157e2:	ldr	r1, [sp, #32]
   157e4:	mov	r0, fp
   157e6:	bl	eea4 <_free_r>
   157ea:	vmov	r3, s16
   157ee:	ldrsh.w	r3, [r3, #12]
   157f2:	vmov	r2, s16
   157f6:	ldr	r2, [r2, #100]	; 0x64
   157f8:	tst.w	r2, #1
   157fc:	uxth	r2, r3
   157fe:	beq.w	15942 <_vfiprintf_r+0x512>
   15802:	lsls	r0, r2, #25
   15804:	bmi.w	1636c <_vfiprintf_r+0xf3c>
   15808:	ldr	r0, [sp, #20]
   1580a:	add	sp, #276	; 0x114
   1580c:	vpop	{d8}
   15810:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15814:	cmp	r1, #0
   15816:	beq.n	157b0 <_vfiprintf_r+0x380>
   15818:	movs	r3, #0
   1581a:	strb.w	r3, [sp, #67]	; 0x43
   1581e:	movs	r3, #1
   15820:	strd	r3, r3, [sp, #12]
   15824:	strb.w	r1, [sp, #172]	; 0xac
   15828:	add	r4, sp, #172	; 0xac
   1582a:	movs	r3, #0
   1582c:	str	r3, [sp, #32]
   1582e:	mov	r7, r3
   15830:	ands.w	r3, r6, #2
   15834:	str	r3, [sp, #36]	; 0x24
   15836:	beq.n	1583e <_vfiprintf_r+0x40e>
   15838:	ldr	r3, [sp, #12]
   1583a:	adds	r3, #2
   1583c:	str	r3, [sp, #12]
   1583e:	ands.w	r3, r6, #132	; 0x84
   15842:	str	r3, [sp, #40]	; 0x28
   15844:	bne.n	15852 <_vfiprintf_r+0x422>
   15846:	ldr	r3, [sp, #24]
   15848:	ldr	r2, [sp, #12]
   1584a:	subs	r5, r3, r2
   1584c:	cmp	r5, #0
   1584e:	bgt.w	15d48 <_vfiprintf_r+0x918>
   15852:	ldrd	r0, r3, [sp, #100]	; 0x64
   15856:	adds	r1, r0, #1
   15858:	ldrb.w	r2, [sp, #67]	; 0x43
   1585c:	cbz	r2, 15880 <_vfiprintf_r+0x450>
   1585e:	movs	r2, #1
   15860:	adds	r3, #1
   15862:	str.w	r2, [r9, #4]
   15866:	cmp	r1, #7
   15868:	add.w	r2, sp, #67	; 0x43
   1586c:	strd	r1, r3, [sp, #100]	; 0x64
   15870:	str.w	r2, [r9]
   15874:	bgt.w	15d0c <_vfiprintf_r+0x8dc>
   15878:	mov	r0, r1
   1587a:	add.w	r9, r9, #8
   1587e:	adds	r1, #1
   15880:	ldr	r2, [sp, #36]	; 0x24
   15882:	cbz	r2, 158be <_vfiprintf_r+0x48e>
   15884:	add	r2, sp, #68	; 0x44
   15886:	adds	r3, #2
   15888:	str.w	r2, [r9]
   1588c:	cmp	r1, #7
   1588e:	mov.w	r2, #2
   15892:	strd	r1, r3, [sp, #100]	; 0x64
   15896:	str.w	r2, [r9, #4]
   1589a:	ble.w	15d3e <_vfiprintf_r+0x90e>
   1589e:	cmp	r3, #0
   158a0:	beq.w	15f2a <_vfiprintf_r+0xafa>
   158a4:	vmov	r1, s16
   158a8:	add	r2, sp, #96	; 0x60
   158aa:	mov	r0, fp
   158ac:	bl	153b8 <__sprint_r.part.0>
   158b0:	cmp	r0, #0
   158b2:	bne.n	157de <_vfiprintf_r+0x3ae>
   158b4:	ldrd	r0, r3, [sp, #100]	; 0x64
   158b8:	add.w	r9, sp, #108	; 0x6c
   158bc:	adds	r1, r0, #1
   158be:	ldr	r2, [sp, #40]	; 0x28
   158c0:	cmp	r2, #128	; 0x80
   158c2:	beq.w	15bce <_vfiprintf_r+0x79e>
   158c6:	ldr	r2, [sp, #16]
   158c8:	subs	r5, r7, r2
   158ca:	cmp	r5, #0
   158cc:	bgt.w	15c7e <_vfiprintf_r+0x84e>
   158d0:	ldr	r2, [sp, #16]
   158d2:	str.w	r4, [r9]
   158d6:	add	r3, r2
   158d8:	cmp	r1, #7
   158da:	strd	r1, r3, [sp, #100]	; 0x64
   158de:	str.w	r2, [r9, #4]
   158e2:	ble.w	15bc2 <_vfiprintf_r+0x792>
   158e6:	cmp	r3, #0
   158e8:	beq.w	15dd6 <_vfiprintf_r+0x9a6>
   158ec:	vmov	r1, s16
   158f0:	add	r2, sp, #96	; 0x60
   158f2:	mov	r0, fp
   158f4:	bl	153b8 <__sprint_r.part.0>
   158f8:	cmp	r0, #0
   158fa:	bne.w	157de <_vfiprintf_r+0x3ae>
   158fe:	ldr	r3, [sp, #104]	; 0x68
   15900:	add.w	r9, sp, #108	; 0x6c
   15904:	lsls	r5, r6, #29
   15906:	bpl.n	15914 <_vfiprintf_r+0x4e4>
   15908:	ldr	r2, [sp, #24]
   1590a:	ldr	r1, [sp, #12]
   1590c:	subs	r4, r2, r1
   1590e:	cmp	r4, #0
   15910:	bgt.w	15dea <_vfiprintf_r+0x9ba>
   15914:	ldrd	r2, r1, [sp, #20]
   15918:	ldr	r0, [sp, #12]
   1591a:	cmp	r1, r0
   1591c:	ite	ge
   1591e:	addge	r2, r2, r1
   15920:	addlt	r2, r2, r0
   15922:	str	r2, [sp, #20]
   15924:	cmp	r3, #0
   15926:	bne.w	157cc <_vfiprintf_r+0x39c>
   1592a:	ldr	r1, [sp, #32]
   1592c:	movs	r3, #0
   1592e:	str	r3, [sp, #100]	; 0x64
   15930:	cmp	r1, #0
   15932:	beq.w	15bc8 <_vfiprintf_r+0x798>
   15936:	mov	r0, fp
   15938:	bl	eea4 <_free_r>
   1593c:	add.w	r9, sp, #108	; 0x6c
   15940:	b.n	154c6 <_vfiprintf_r+0x96>
   15942:	lsls	r4, r3, #22
   15944:	bmi.w	15802 <_vfiprintf_r+0x3d2>
   15948:	vmov	r4, s16
   1594c:	ldr	r0, [r4, #88]	; 0x58
   1594e:	bl	e834 <__retarget_lock_release_recursive>
   15952:	ldrh	r2, [r4, #12]
   15954:	b.n	15802 <_vfiprintf_r+0x3d2>
   15956:	lsls	r0, r6, #27
   15958:	ldr	r2, [sp, #28]
   1595a:	bmi.w	15f9c <_vfiprintf_r+0xb6c>
   1595e:	lsls	r1, r6, #25
   15960:	bpl.w	15f96 <_vfiprintf_r+0xb66>
   15964:	ldrsh.w	r3, [r2], #4
   15968:	str	r2, [sp, #28]
   1596a:	asrs	r2, r3, #31
   1596c:	mov	r1, r2
   1596e:	b.n	1564e <_vfiprintf_r+0x21e>
   15970:	ands.w	r3, r6, #16
   15974:	ldr	r1, [sp, #28]
   15976:	bne.w	15f8c <_vfiprintf_r+0xb5c>
   1597a:	ands.w	r0, r6, #64	; 0x40
   1597e:	beq.w	15f84 <_vfiprintf_r+0xb54>
   15982:	mov	r2, r3
   15984:	ldr.w	r3, [r1], #4
   15988:	str	r1, [sp, #28]
   1598a:	uxth	r3, r3
   1598c:	b.n	15716 <_vfiprintf_r+0x2e6>
   1598e:	ldr	r3, [sp, #28]
   15990:	mov	r2, r3
   15992:	movs	r3, #0
   15994:	strb.w	r3, [sp, #67]	; 0x43
   15998:	mov	r3, r2
   1599a:	ldr.w	r4, [r3], #4
   1599e:	str	r3, [sp, #12]
   159a0:	cmp	r4, #0
   159a2:	beq.w	161ca <_vfiprintf_r+0xd9a>
   159a6:	cmp	r1, #83	; 0x53
   159a8:	beq.w	16076 <_vfiprintf_r+0xc46>
   159ac:	ands.w	r5, r6, #16
   159b0:	bne.w	16076 <_vfiprintf_r+0xc46>
   159b4:	adds	r3, r7, #1
   159b6:	beq.w	16320 <_vfiprintf_r+0xef0>
   159ba:	mov	r2, r7
   159bc:	mov	r1, r5
   159be:	mov	r0, r4
   159c0:	bl	ebe0 <memchr>
   159c4:	str	r0, [sp, #32]
   159c6:	cmp	r0, #0
   159c8:	beq.w	1630a <_vfiprintf_r+0xeda>
   159cc:	subs	r3, r0, r4
   159ce:	ldr	r2, [sp, #12]
   159d0:	str	r3, [sp, #16]
   159d2:	bic.w	r3, r3, r3, asr #31
   159d6:	mov	r7, r5
   159d8:	str	r2, [sp, #28]
   159da:	str	r3, [sp, #12]
   159dc:	str	r5, [sp, #32]
   159de:	b.n	15690 <_vfiprintf_r+0x260>
   159e0:	cmp	r1, #67	; 0x43
   159e2:	beq.n	159ea <_vfiprintf_r+0x5ba>
   159e4:	lsls	r5, r6, #27
   159e6:	bpl.w	16044 <_vfiprintf_r+0xc14>
   159ea:	ldr	r5, [sp, #28]
   159ec:	movs	r2, #8
   159ee:	movs	r1, #0
   159f0:	add	r0, sp, #88	; 0x58
   159f2:	add	r4, sp, #172	; 0xac
   159f4:	bl	9c1c <memset>
   159f8:	add	r3, sp, #88	; 0x58
   159fa:	ldr.w	r2, [r5], #4
   159fe:	mov	r1, r4
   15a00:	mov	r0, fp
   15a02:	bl	14ef4 <_wcrtomb_r>
   15a06:	mov	r3, r0
   15a08:	adds	r3, #1
   15a0a:	str	r0, [sp, #16]
   15a0c:	beq.w	16376 <_vfiprintf_r+0xf46>
   15a10:	ldr	r3, [sp, #16]
   15a12:	str	r5, [sp, #28]
   15a14:	bic.w	r3, r3, r3, asr #31
   15a18:	str	r3, [sp, #12]
   15a1a:	movs	r3, #0
   15a1c:	strb.w	r3, [sp, #67]	; 0x43
   15a20:	b.n	1582a <_vfiprintf_r+0x3fa>
   15a22:	ldr	r3, [sp, #28]
   15a24:	ldr.w	r2, [r3], #4
   15a28:	str	r2, [sp, #24]
   15a2a:	cmp	r2, #0
   15a2c:	bge.w	15f68 <_vfiprintf_r+0xb38>
   15a30:	ldr	r2, [sp, #24]
   15a32:	negs	r2, r2
   15a34:	strd	r2, r3, [sp, #24]
   15a38:	ldrb.w	r1, [r8]
   15a3c:	orr.w	r6, r6, #4
   15a40:	b.n	15516 <_vfiprintf_r+0xe6>
   15a42:	ldrb.w	r1, [r8]
   15a46:	strb.w	r4, [sp, #67]	; 0x43
   15a4a:	b.n	15516 <_vfiprintf_r+0xe6>
   15a4c:	ldrb.w	r1, [r8]
   15a50:	orr.w	r6, r6, #128	; 0x80
   15a54:	b.n	15516 <_vfiprintf_r+0xe6>
   15a56:	mov	r2, r8
   15a58:	ldrb.w	r1, [r2], #1
   15a5c:	cmp	r1, #42	; 0x2a
   15a5e:	beq.w	1638e <_vfiprintf_r+0xf5e>
   15a62:	sub.w	r3, r1, #48	; 0x30
   15a66:	cmp	r3, #9
   15a68:	mov	r8, r2
   15a6a:	mov.w	r7, #0
   15a6e:	bhi.w	1551a <_vfiprintf_r+0xea>
   15a72:	ldrb.w	r1, [r8], #1
   15a76:	add.w	r7, r7, r7, lsl #2
   15a7a:	add.w	r7, r3, r7, lsl #1
   15a7e:	sub.w	r3, r1, #48	; 0x30
   15a82:	cmp	r3, #9
   15a84:	bls.n	15a72 <_vfiprintf_r+0x642>
   15a86:	b.n	1551a <_vfiprintf_r+0xea>
   15a88:	ldrb.w	r1, [r8]
   15a8c:	orr.w	r6, r6, #1
   15a90:	b.n	15516 <_vfiprintf_r+0xe6>
   15a92:	ldrb.w	r3, [sp, #67]	; 0x43
   15a96:	cmp	r3, #0
   15a98:	bne.w	15620 <_vfiprintf_r+0x1f0>
   15a9c:	movs	r3, #32
   15a9e:	ldrb.w	r1, [r8]
   15aa2:	strb.w	r3, [sp, #67]	; 0x43
   15aa6:	b.n	15516 <_vfiprintf_r+0xe6>
   15aa8:	ldrb.w	r1, [r8]
   15aac:	cmp	r1, #108	; 0x6c
   15aae:	ittte	eq
   15ab0:	ldrbeq.w	r1, [r8, #1]
   15ab4:	orreq.w	r6, r6, #32
   15ab8:	addeq.w	r8, r8, #1
   15abc:	orrne.w	r6, r6, #16
   15ac0:	b.n	15516 <_vfiprintf_r+0xe6>
   15ac2:	ldrb.w	r1, [r8]
   15ac6:	cmp	r1, #104	; 0x68
   15ac8:	ittte	eq
   15aca:	ldrbeq.w	r1, [r8, #1]
   15ace:	orreq.w	r6, r6, #512	; 0x200
   15ad2:	addeq.w	r8, r8, #1
   15ad6:	orrne.w	r6, r6, #64	; 0x40
   15ada:	b.n	15516 <_vfiprintf_r+0xe6>
   15adc:	orr.w	r3, r6, #16
   15ae0:	str	r3, [sp, #12]
   15ae2:	ldr	r3, [sp, #12]
   15ae4:	ands.w	r2, r3, #32
   15ae8:	beq.w	15ef8 <_vfiprintf_r+0xac8>
   15aec:	ldr	r3, [sp, #28]
   15aee:	adds	r3, #7
   15af0:	bic.w	r3, r3, #7
   15af4:	mov	r1, r3
   15af6:	ldr	r2, [r3, #4]
   15af8:	ldr.w	r3, [r1], #8
   15afc:	str	r1, [sp, #28]
   15afe:	movs	r1, #1
   15b00:	b.n	1571e <_vfiprintf_r+0x2ee>
   15b02:	ldr	r2, [sp, #28]
   15b04:	orr.w	r3, r6, #2
   15b08:	str	r3, [sp, #12]
   15b0a:	ldr.w	r3, [r2], #4
   15b0e:	str	r2, [sp, #28]
   15b10:	movw	r2, #30768	; 0x7830
   15b14:	strh.w	r2, [sp, #68]	; 0x44
   15b18:	ldr	r2, [pc, #736]	; (15dfc <_vfiprintf_r+0x9cc>)
   15b1a:	str	r2, [sp, #48]	; 0x30
   15b1c:	movs	r1, #2
   15b1e:	movs	r2, #0
   15b20:	b.n	1571e <_vfiprintf_r+0x2ee>
   15b22:	lsls	r7, r6, #26
   15b24:	bmi.w	15fb8 <_vfiprintf_r+0xb88>
   15b28:	lsls	r5, r6, #27
   15b2a:	bmi.w	161ba <_vfiprintf_r+0xd8a>
   15b2e:	lsls	r4, r6, #25
   15b30:	bmi.w	162de <_vfiprintf_r+0xeae>
   15b34:	lsls	r0, r6, #22
   15b36:	bpl.w	161ba <_vfiprintf_r+0xd8a>
   15b3a:	ldr	r3, [sp, #28]
   15b3c:	ldr	r1, [sp, #20]
   15b3e:	ldr.w	r2, [r3], #4
   15b42:	str	r3, [sp, #28]
   15b44:	strb	r1, [r2, #0]
   15b46:	b.n	154c6 <_vfiprintf_r+0x96>
   15b48:	str	r6, [sp, #12]
   15b4a:	cmp	r1, #1
   15b4c:	beq.w	15668 <_vfiprintf_r+0x238>
   15b50:	cmp	r1, #2
   15b52:	add	r4, sp, #272	; 0x110
   15b54:	bne.n	15b7a <_vfiprintf_r+0x74a>
   15b56:	ldr	r0, [sp, #48]	; 0x30
   15b58:	and.w	r1, r3, #15
   15b5c:	lsrs	r3, r3, #4
   15b5e:	ldrb	r1, [r0, r1]
   15b60:	strb.w	r1, [r4, #-1]!
   15b64:	orr.w	r3, r3, r2, lsl #28
   15b68:	lsrs	r2, r2, #4
   15b6a:	orrs.w	r1, r3, r2
   15b6e:	bne.n	15b58 <_vfiprintf_r+0x728>
   15b70:	ldr	r6, [sp, #12]
   15b72:	add	r3, sp, #272	; 0x110
   15b74:	subs	r3, r3, r4
   15b76:	str	r3, [sp, #16]
   15b78:	b.n	15682 <_vfiprintf_r+0x252>
   15b7a:	and.w	r1, r3, #7
   15b7e:	lsrs	r3, r3, #3
   15b80:	orr.w	r3, r3, r2, lsl #29
   15b84:	lsrs	r2, r2, #3
   15b86:	adds	r1, #48	; 0x30
   15b88:	orrs.w	r5, r3, r2
   15b8c:	mov	r0, r4
   15b8e:	strb.w	r1, [r4, #-1]!
   15b92:	bne.n	15b7a <_vfiprintf_r+0x74a>
   15b94:	ldr	r6, [sp, #12]
   15b96:	lsls	r3, r6, #31
   15b98:	bpl.n	15b72 <_vfiprintf_r+0x742>
   15b9a:	cmp	r1, #48	; 0x30
   15b9c:	beq.n	15b70 <_vfiprintf_r+0x740>
   15b9e:	movs	r3, #48	; 0x30
   15ba0:	subs	r0, #2
   15ba2:	strb.w	r3, [r4, #-1]
   15ba6:	add	r3, sp, #272	; 0x110
   15ba8:	subs	r3, r3, r0
   15baa:	ldr	r6, [sp, #12]
   15bac:	str	r3, [sp, #16]
   15bae:	mov	r4, r0
   15bb0:	b.n	15682 <_vfiprintf_r+0x252>
   15bb2:	ldr	r3, [sp, #16]
   15bb4:	str	r4, [sp, #108]	; 0x6c
   15bb6:	movs	r2, #1
   15bb8:	str	r3, [sp, #112]	; 0x70
   15bba:	str	r3, [sp, #104]	; 0x68
   15bbc:	str	r2, [sp, #100]	; 0x64
   15bbe:	add.w	r9, sp, #108	; 0x6c
   15bc2:	add.w	r9, r9, #8
   15bc6:	b.n	15904 <_vfiprintf_r+0x4d4>
   15bc8:	add.w	r9, sp, #108	; 0x6c
   15bcc:	b.n	154c6 <_vfiprintf_r+0x96>
   15bce:	ldr	r2, [sp, #24]
   15bd0:	ldr	r5, [sp, #12]
   15bd2:	subs	r5, r2, r5
   15bd4:	cmp	r5, #0
   15bd6:	ble.w	158c6 <_vfiprintf_r+0x496>
   15bda:	cmp	r5, #16
   15bdc:	ble.w	16356 <_vfiprintf_r+0xf26>
   15be0:	str	r4, [sp, #36]	; 0x24
   15be2:	vmov	r4, s16
   15be6:	b.n	15bf8 <_vfiprintf_r+0x7c8>
   15be8:	add.w	ip, r0, #2
   15bec:	add.w	r9, r9, #8
   15bf0:	mov	r0, r2
   15bf2:	subs	r5, #16
   15bf4:	cmp	r5, #16
   15bf6:	ble.n	15c36 <_vfiprintf_r+0x806>
   15bf8:	ldr	r1, [pc, #516]	; (15e00 <_vfiprintf_r+0x9d0>)
   15bfa:	str.w	r1, [r9]
   15bfe:	adds	r2, r0, #1
   15c00:	adds	r3, #16
   15c02:	movs	r1, #16
   15c04:	cmp	r2, #7
   15c06:	strd	r2, r3, [sp, #100]	; 0x64
   15c0a:	str.w	r1, [r9, #4]
   15c0e:	ble.n	15be8 <_vfiprintf_r+0x7b8>
   15c10:	add	r2, sp, #96	; 0x60
   15c12:	cmp	r3, #0
   15c14:	beq.n	15d00 <_vfiprintf_r+0x8d0>
   15c16:	mov	r1, r4
   15c18:	mov	r0, fp
   15c1a:	add.w	r9, sp, #108	; 0x6c
   15c1e:	bl	153b8 <__sprint_r.part.0>
   15c22:	cmp	r0, #0
   15c24:	bne.w	157de <_vfiprintf_r+0x3ae>
   15c28:	ldrd	r0, r3, [sp, #100]	; 0x64
   15c2c:	subs	r5, #16
   15c2e:	cmp	r5, #16
   15c30:	add.w	ip, r0, #1
   15c34:	bgt.n	15bf8 <_vfiprintf_r+0x7c8>
   15c36:	ldr	r4, [sp, #36]	; 0x24
   15c38:	ldr	r2, [pc, #452]	; (15e00 <_vfiprintf_r+0x9d0>)
   15c3a:	str.w	r5, [r9, #4]
   15c3e:	add	r3, r5
   15c40:	cmp.w	ip, #7
   15c44:	strd	ip, r3, [sp, #100]	; 0x64
   15c48:	str.w	r2, [r9]
   15c4c:	ble.w	15f78 <_vfiprintf_r+0xb48>
   15c50:	cmp	r3, #0
   15c52:	beq.w	16294 <_vfiprintf_r+0xe64>
   15c56:	vmov	r1, s16
   15c5a:	add	r2, sp, #96	; 0x60
   15c5c:	mov	r0, fp
   15c5e:	bl	153b8 <__sprint_r.part.0>
   15c62:	cmp	r0, #0
   15c64:	bne.w	157de <_vfiprintf_r+0x3ae>
   15c68:	ldr	r2, [sp, #16]
   15c6a:	ldrd	r0, r3, [sp, #100]	; 0x64
   15c6e:	subs	r5, r7, r2
   15c70:	cmp	r5, #0
   15c72:	add.w	r1, r0, #1
   15c76:	add.w	r9, sp, #108	; 0x6c
   15c7a:	ble.w	158d0 <_vfiprintf_r+0x4a0>
   15c7e:	cmp	r5, #16
   15c80:	ble.n	15cd6 <_vfiprintf_r+0x8a6>
   15c82:	str	r4, [sp, #36]	; 0x24
   15c84:	movs	r7, #16
   15c86:	vmov	r4, s16
   15c8a:	b.n	15c9c <_vfiprintf_r+0x86c>
   15c8c:	add.w	ip, r0, #2
   15c90:	add.w	r9, r9, #8
   15c94:	mov	r0, r2
   15c96:	subs	r5, #16
   15c98:	cmp	r5, #16
   15c9a:	ble.n	15cd2 <_vfiprintf_r+0x8a2>
   15c9c:	adds	r2, r0, #1
   15c9e:	ldr	r1, [pc, #352]	; (15e00 <_vfiprintf_r+0x9d0>)
   15ca0:	adds	r3, #16
   15ca2:	cmp	r2, #7
   15ca4:	strd	r1, r7, [r9]
   15ca8:	strd	r2, r3, [sp, #100]	; 0x64
   15cac:	ble.n	15c8c <_vfiprintf_r+0x85c>
   15cae:	add	r2, sp, #96	; 0x60
   15cb0:	cbz	r3, 15cf4 <_vfiprintf_r+0x8c4>
   15cb2:	mov	r1, r4
   15cb4:	mov	r0, fp
   15cb6:	add.w	r9, sp, #108	; 0x6c
   15cba:	bl	153b8 <__sprint_r.part.0>
   15cbe:	cmp	r0, #0
   15cc0:	bne.w	157de <_vfiprintf_r+0x3ae>
   15cc4:	ldrd	r0, r3, [sp, #100]	; 0x64
   15cc8:	subs	r5, #16
   15cca:	cmp	r5, #16
   15ccc:	add.w	ip, r0, #1
   15cd0:	bgt.n	15c9c <_vfiprintf_r+0x86c>
   15cd2:	ldr	r4, [sp, #36]	; 0x24
   15cd4:	mov	r1, ip
   15cd6:	ldr	r2, [pc, #296]	; (15e00 <_vfiprintf_r+0x9d0>)
   15cd8:	str.w	r5, [r9, #4]
   15cdc:	add	r3, r5
   15cde:	cmp	r1, #7
   15ce0:	strd	r1, r3, [sp, #100]	; 0x64
   15ce4:	str.w	r2, [r9]
   15ce8:	bgt.w	15eba <_vfiprintf_r+0xa8a>
   15cec:	add.w	r9, r9, #8
   15cf0:	adds	r1, #1
   15cf2:	b.n	158d0 <_vfiprintf_r+0x4a0>
   15cf4:	mov.w	ip, #1
   15cf8:	mov	r0, r3
   15cfa:	add.w	r9, sp, #108	; 0x6c
   15cfe:	b.n	15c96 <_vfiprintf_r+0x866>
   15d00:	mov.w	ip, #1
   15d04:	mov	r0, r3
   15d06:	add.w	r9, sp, #108	; 0x6c
   15d0a:	b.n	15bf2 <_vfiprintf_r+0x7c2>
   15d0c:	cmp	r3, #0
   15d0e:	beq.w	15f1a <_vfiprintf_r+0xaea>
   15d12:	vmov	r1, s16
   15d16:	add	r2, sp, #96	; 0x60
   15d18:	mov	r0, fp
   15d1a:	bl	153b8 <__sprint_r.part.0>
   15d1e:	cmp	r0, #0
   15d20:	bne.w	157de <_vfiprintf_r+0x3ae>
   15d24:	ldrd	r0, r3, [sp, #100]	; 0x64
   15d28:	add.w	r9, sp, #108	; 0x6c
   15d2c:	adds	r1, r0, #1
   15d2e:	b.n	15880 <_vfiprintf_r+0x450>
   15d30:	movs	r3, #2
   15d32:	add	r2, sp, #68	; 0x44
   15d34:	str	r3, [sp, #112]	; 0x70
   15d36:	str	r2, [sp, #108]	; 0x6c
   15d38:	movs	r1, #1
   15d3a:	add.w	r9, sp, #108	; 0x6c
   15d3e:	mov	r0, r1
   15d40:	add.w	r9, r9, #8
   15d44:	adds	r1, r0, #1
   15d46:	b.n	158be <_vfiprintf_r+0x48e>
   15d48:	cmp	r5, #16
   15d4a:	ble.w	16318 <_vfiprintf_r+0xee8>
   15d4e:	ldrd	r1, r3, [sp, #100]	; 0x64
   15d52:	str	r4, [sp, #60]	; 0x3c
   15d54:	mov	r0, r1
   15d56:	vmov	r4, s16
   15d5a:	b.n	15d6c <_vfiprintf_r+0x93c>
   15d5c:	add.w	ip, r0, #2
   15d60:	add.w	r9, r9, #8
   15d64:	mov	r0, r2
   15d66:	subs	r5, #16
   15d68:	cmp	r5, #16
   15d6a:	ble.n	15da8 <_vfiprintf_r+0x978>
   15d6c:	ldr	r1, [pc, #148]	; (15e04 <_vfiprintf_r+0x9d4>)
   15d6e:	str.w	r1, [r9]
   15d72:	adds	r2, r0, #1
   15d74:	adds	r3, #16
   15d76:	movs	r1, #16
   15d78:	cmp	r2, #7
   15d7a:	strd	r2, r3, [sp, #100]	; 0x64
   15d7e:	str.w	r1, [r9, #4]
   15d82:	ble.n	15d5c <_vfiprintf_r+0x92c>
   15d84:	add	r2, sp, #96	; 0x60
   15d86:	cbz	r3, 15dca <_vfiprintf_r+0x99a>
   15d88:	mov	r1, r4
   15d8a:	mov	r0, fp
   15d8c:	add.w	r9, sp, #108	; 0x6c
   15d90:	bl	153b8 <__sprint_r.part.0>
   15d94:	cmp	r0, #0
   15d96:	bne.w	157de <_vfiprintf_r+0x3ae>
   15d9a:	ldrd	r0, r3, [sp, #100]	; 0x64
   15d9e:	subs	r5, #16
   15da0:	cmp	r5, #16
   15da2:	add.w	ip, r0, #1
   15da6:	bgt.n	15d6c <_vfiprintf_r+0x93c>
   15da8:	ldr	r4, [sp, #60]	; 0x3c
   15daa:	mov	r0, ip
   15dac:	ldr	r2, [pc, #84]	; (15e04 <_vfiprintf_r+0x9d4>)
   15dae:	str.w	r5, [r9, #4]
   15db2:	add	r3, r5
   15db4:	cmp	r0, #7
   15db6:	strd	r0, r3, [sp, #100]	; 0x64
   15dba:	str.w	r2, [r9]
   15dbe:	bgt.w	15f44 <_vfiprintf_r+0xb14>
   15dc2:	add.w	r9, r9, #8
   15dc6:	adds	r1, r0, #1
   15dc8:	b.n	15858 <_vfiprintf_r+0x428>
   15dca:	mov	r0, r3
   15dcc:	mov.w	ip, #1
   15dd0:	add.w	r9, sp, #108	; 0x6c
   15dd4:	b.n	15d66 <_vfiprintf_r+0x936>
   15dd6:	lsls	r6, r6, #29
   15dd8:	str	r3, [sp, #100]	; 0x64
   15dda:	bpl.n	15e84 <_vfiprintf_r+0xa54>
   15ddc:	ldr	r2, [sp, #24]
   15dde:	ldr	r1, [sp, #12]
   15de0:	subs	r4, r2, r1
   15de2:	cmp	r4, #0
   15de4:	ble.n	15e84 <_vfiprintf_r+0xa54>
   15de6:	add.w	r9, sp, #108	; 0x6c
   15dea:	cmp	r4, #16
   15dec:	ble.w	16350 <_vfiprintf_r+0xf20>
   15df0:	ldr	r1, [sp, #100]	; 0x64
   15df2:	vmov	r6, s16
   15df6:	movs	r5, #16
   15df8:	b.n	15e16 <_vfiprintf_r+0x9e6>
   15dfa:	nop
   15dfc:	.word	0x200009cc
   15e00:	.word	0x200078ac
   15e04:	.word	0x20002488
   15e08:	adds	r0, r1, #2
   15e0a:	add.w	r9, r9, #8
   15e0e:	mov	r1, r2
   15e10:	subs	r4, #16
   15e12:	cmp	r4, #16
   15e14:	ble.n	15e4c <_vfiprintf_r+0xa1c>
   15e16:	adds	r2, r1, #1
   15e18:	ldr	r0, [pc, #716]	; (160e8 <_vfiprintf_r+0xcb8>)
   15e1a:	adds	r3, #16
   15e1c:	cmp	r2, #7
   15e1e:	strd	r0, r5, [r9]
   15e22:	strd	r2, r3, [sp, #100]	; 0x64
   15e26:	ble.n	15e08 <_vfiprintf_r+0x9d8>
   15e28:	add	r2, sp, #96	; 0x60
   15e2a:	cbz	r3, 15e7a <_vfiprintf_r+0xa4a>
   15e2c:	mov	r1, r6
   15e2e:	mov	r0, fp
   15e30:	bl	153b8 <__sprint_r.part.0>
   15e34:	cmp	r0, #0
   15e36:	bne.w	157de <_vfiprintf_r+0x3ae>
   15e3a:	ldrd	r1, r3, [sp, #100]	; 0x64
   15e3e:	subs	r4, #16
   15e40:	cmp	r4, #16
   15e42:	add.w	r0, r1, #1
   15e46:	add.w	r9, sp, #108	; 0x6c
   15e4a:	bgt.n	15e16 <_vfiprintf_r+0x9e6>
   15e4c:	ldr	r2, [pc, #664]	; (160e8 <_vfiprintf_r+0xcb8>)
   15e4e:	str.w	r4, [r9, #4]
   15e52:	add	r3, r4
   15e54:	cmp	r0, #7
   15e56:	strd	r0, r3, [sp, #100]	; 0x64
   15e5a:	str.w	r2, [r9]
   15e5e:	ble.w	15914 <_vfiprintf_r+0x4e4>
   15e62:	cbz	r3, 15e84 <_vfiprintf_r+0xa54>
   15e64:	vmov	r1, s16
   15e68:	add	r2, sp, #96	; 0x60
   15e6a:	mov	r0, fp
   15e6c:	bl	153b8 <__sprint_r.part.0>
   15e70:	cmp	r0, #0
   15e72:	bne.w	157de <_vfiprintf_r+0x3ae>
   15e76:	ldr	r3, [sp, #104]	; 0x68
   15e78:	b.n	15914 <_vfiprintf_r+0x4e4>
   15e7a:	movs	r0, #1
   15e7c:	mov	r1, r3
   15e7e:	add.w	r9, sp, #108	; 0x6c
   15e82:	b.n	15e10 <_vfiprintf_r+0x9e0>
   15e84:	ldrd	r3, r2, [sp, #20]
   15e88:	ldr	r1, [sp, #12]
   15e8a:	cmp	r2, r1
   15e8c:	ite	ge
   15e8e:	addge	r3, r3, r2
   15e90:	addlt	r3, r3, r1
   15e92:	str	r3, [sp, #20]
   15e94:	b.n	1592a <_vfiprintf_r+0x4fa>
   15e96:	ldrsh.w	r1, [r2, #12]
   15e9a:	lsls	r7, r1, #22
   15e9c:	vmov	r3, s16
   15ea0:	uxth	r2, r1
   15ea2:	bmi.w	15476 <_vfiprintf_r+0x46>
   15ea6:	vmov	r5, s16
   15eaa:	ldr	r0, [r3, #88]	; 0x58
   15eac:	bl	e830 <__retarget_lock_acquire_recursive>
   15eb0:	ldrsh.w	r1, [r5, #12]
   15eb4:	uxth	r2, r1
   15eb6:	b.w	15476 <_vfiprintf_r+0x46>
   15eba:	cmp	r3, #0
   15ebc:	beq.w	15bb2 <_vfiprintf_r+0x782>
   15ec0:	vmov	r1, s16
   15ec4:	add	r2, sp, #96	; 0x60
   15ec6:	mov	r0, fp
   15ec8:	bl	153b8 <__sprint_r.part.0>
   15ecc:	cmp	r0, #0
   15ece:	bne.w	157de <_vfiprintf_r+0x3ae>
   15ed2:	ldr	r1, [sp, #100]	; 0x64
   15ed4:	ldr	r3, [sp, #104]	; 0x68
   15ed6:	adds	r1, #1
   15ed8:	add.w	r9, sp, #108	; 0x6c
   15edc:	b.n	158d0 <_vfiprintf_r+0x4a0>
   15ede:	str	r2, [sp, #100]	; 0x64
   15ee0:	add.w	r9, sp, #108	; 0x6c
   15ee4:	b.n	157a4 <_vfiprintf_r+0x374>
   15ee6:	cmp	r7, #0
   15ee8:	bne.w	15672 <_vfiprintf_r+0x242>
   15eec:	ldr	r6, [sp, #12]
   15eee:	movs	r7, #0
   15ef0:	str	r7, [sp, #16]
   15ef2:	add	r4, sp, #272	; 0x110
   15ef4:	b.w	15682 <_vfiprintf_r+0x252>
   15ef8:	ldr	r3, [sp, #12]
   15efa:	ands.w	r3, r3, #16
   15efe:	bne.n	15faa <_vfiprintf_r+0xb7a>
   15f00:	ldr	r2, [sp, #12]
   15f02:	ands.w	r0, r2, #64	; 0x40
   15f06:	beq.w	161e0 <_vfiprintf_r+0xdb0>
   15f0a:	ldr	r1, [sp, #28]
   15f0c:	mov	r2, r3
   15f0e:	ldr.w	r3, [r1], #4
   15f12:	str	r1, [sp, #28]
   15f14:	uxth	r3, r3
   15f16:	movs	r1, #1
   15f18:	b.n	1571e <_vfiprintf_r+0x2ee>
   15f1a:	ldr	r2, [sp, #36]	; 0x24
   15f1c:	cmp	r2, #0
   15f1e:	bne.n	15fea <_vfiprintf_r+0xbba>
   15f20:	mov	r0, r3
   15f22:	movs	r1, #1
   15f24:	add.w	r9, sp, #108	; 0x6c
   15f28:	b.n	158be <_vfiprintf_r+0x48e>
   15f2a:	movs	r1, #1
   15f2c:	mov	r0, r3
   15f2e:	add.w	r9, sp, #108	; 0x6c
   15f32:	b.n	158be <_vfiprintf_r+0x48e>
   15f34:	negs	r3, r3
   15f36:	sbc.w	r2, r2, r2, lsl #1
   15f3a:	str	r6, [sp, #12]
   15f3c:	movs	r0, #45	; 0x2d
   15f3e:	movs	r1, #1
   15f40:	b.w	15720 <_vfiprintf_r+0x2f0>
   15f44:	cmp	r3, #0
   15f46:	beq.w	1605a <_vfiprintf_r+0xc2a>
   15f4a:	vmov	r1, s16
   15f4e:	add	r2, sp, #96	; 0x60
   15f50:	mov	r0, fp
   15f52:	bl	153b8 <__sprint_r.part.0>
   15f56:	cmp	r0, #0
   15f58:	bne.w	157de <_vfiprintf_r+0x3ae>
   15f5c:	ldrd	r0, r3, [sp, #100]	; 0x64
   15f60:	add.w	r9, sp, #108	; 0x6c
   15f64:	adds	r1, r0, #1
   15f66:	b.n	15858 <_vfiprintf_r+0x428>
   15f68:	ldrb.w	r1, [r8]
   15f6c:	str	r3, [sp, #28]
   15f6e:	b.w	15516 <_vfiprintf_r+0xe6>
   15f72:	add	r4, sp, #272	; 0x110
   15f74:	b.w	15682 <_vfiprintf_r+0x252>
   15f78:	add.w	r9, r9, #8
   15f7c:	add.w	r1, ip, #1
   15f80:	mov	r0, ip
   15f82:	b.n	158c6 <_vfiprintf_r+0x496>
   15f84:	ands.w	r2, r6, #512	; 0x200
   15f88:	bne.w	162ba <_vfiprintf_r+0xe8a>
   15f8c:	ldr.w	r3, [r1], #4
   15f90:	str	r1, [sp, #28]
   15f92:	b.w	15716 <_vfiprintf_r+0x2e6>
   15f96:	lsls	r3, r6, #22
   15f98:	bmi.w	162ac <_vfiprintf_r+0xe7c>
   15f9c:	ldr.w	r3, [r2], #4
   15fa0:	str	r2, [sp, #28]
   15fa2:	asrs	r2, r3, #31
   15fa4:	mov	r1, r2
   15fa6:	b.w	1564e <_vfiprintf_r+0x21e>
   15faa:	ldr	r1, [sp, #28]
   15fac:	ldr.w	r3, [r1], #4
   15fb0:	str	r1, [sp, #28]
   15fb2:	movs	r1, #1
   15fb4:	b.w	1571e <_vfiprintf_r+0x2ee>
   15fb8:	ldr	r3, [sp, #28]
   15fba:	ldr	r0, [sp, #20]
   15fbc:	ldr.w	r1, [r3], #4
   15fc0:	str	r3, [sp, #28]
   15fc2:	asrs	r2, r0, #31
   15fc4:	strd	r0, r2, [r1]
   15fc8:	b.w	154c6 <_vfiprintf_r+0x96>
   15fcc:	ldr	r3, [sp, #44]	; 0x2c
   15fce:	cmp	r3, #0
   15fd0:	beq.w	15620 <_vfiprintf_r+0x1f0>
   15fd4:	ldr	r3, [sp, #44]	; 0x2c
   15fd6:	ldrb	r3, [r3, #0]
   15fd8:	cmp	r3, #0
   15fda:	beq.w	15620 <_vfiprintf_r+0x1f0>
   15fde:	ldrb.w	r1, [r8]
   15fe2:	orr.w	r6, r6, #1024	; 0x400
   15fe6:	b.w	15516 <_vfiprintf_r+0xe6>
   15fea:	movs	r3, #2
   15fec:	add	r2, sp, #68	; 0x44
   15fee:	str	r3, [sp, #112]	; 0x70
   15ff0:	str	r2, [sp, #108]	; 0x6c
   15ff2:	movs	r0, #1
   15ff4:	add.w	r9, sp, #108	; 0x6c
   15ff8:	b.n	15d40 <_vfiprintf_r+0x910>
   15ffa:	str	r6, [sp, #12]
   15ffc:	b.n	15ae2 <_vfiprintf_r+0x6b2>
   15ffe:	ldr	r3, [pc, #236]	; (160ec <_vfiprintf_r+0xcbc>)
   16000:	str	r3, [sp, #48]	; 0x30
   16002:	ands.w	r2, r6, #32
   16006:	beq.n	160bc <_vfiprintf_r+0xc8c>
   16008:	ldr	r3, [sp, #28]
   1600a:	adds	r3, #7
   1600c:	bic.w	r3, r3, #7
   16010:	mov	r0, r3
   16012:	ldr	r2, [r3, #4]
   16014:	ldr.w	r3, [r0], #8
   16018:	str	r0, [sp, #28]
   1601a:	lsls	r4, r6, #31
   1601c:	bpl.n	16032 <_vfiprintf_r+0xc02>
   1601e:	orrs.w	r0, r3, r2
   16022:	beq.n	16032 <_vfiprintf_r+0xc02>
   16024:	strb.w	r1, [sp, #69]	; 0x45
   16028:	movs	r1, #48	; 0x30
   1602a:	orr.w	r6, r6, #2
   1602e:	strb.w	r1, [sp, #68]	; 0x44
   16032:	bic.w	r1, r6, #1024	; 0x400
   16036:	str	r1, [sp, #12]
   16038:	movs	r1, #2
   1603a:	b.w	1571e <_vfiprintf_r+0x2ee>
   1603e:	ldr	r3, [pc, #176]	; (160f0 <_vfiprintf_r+0xcc0>)
   16040:	str	r3, [sp, #48]	; 0x30
   16042:	b.n	16002 <_vfiprintf_r+0xbd2>
   16044:	ldr	r3, [sp, #28]
   16046:	movs	r1, #1
   16048:	ldr.w	r2, [r3], #4
   1604c:	str	r1, [sp, #12]
   1604e:	strb.w	r2, [sp, #172]	; 0xac
   16052:	str	r3, [sp, #28]
   16054:	str	r1, [sp, #16]
   16056:	add	r4, sp, #172	; 0xac
   16058:	b.n	15a1a <_vfiprintf_r+0x5ea>
   1605a:	ldrb.w	r2, [sp, #67]	; 0x43
   1605e:	cmp	r2, #0
   16060:	bne.w	162c8 <_vfiprintf_r+0xe98>
   16064:	ldr	r2, [sp, #36]	; 0x24
   16066:	cmp	r2, #0
   16068:	bne.w	15d30 <_vfiprintf_r+0x900>
   1606c:	mov	r0, r3
   1606e:	movs	r1, #1
   16070:	add.w	r9, sp, #108	; 0x6c
   16074:	b.n	158c6 <_vfiprintf_r+0x496>
   16076:	movs	r1, #0
   16078:	movs	r2, #8
   1607a:	add	r0, sp, #88	; 0x58
   1607c:	str	r4, [sp, #76]	; 0x4c
   1607e:	bl	9c1c <memset>
   16082:	adds	r1, r7, #1
   16084:	beq.w	16200 <_vfiprintf_r+0xdd0>
   16088:	movs	r5, #0
   1608a:	str	r4, [sp, #28]
   1608c:	mov	r4, r5
   1608e:	b.n	160aa <_vfiprintf_r+0xc7a>
   16090:	add	r1, sp, #172	; 0xac
   16092:	mov	r0, fp
   16094:	bl	14ef4 <_wcrtomb_r>
   16098:	adds	r2, r0, #1
   1609a:	add	r0, r4
   1609c:	beq.w	16376 <_vfiprintf_r+0xf46>
   160a0:	cmp	r0, r7
   160a2:	bgt.n	160b6 <_vfiprintf_r+0xc86>
   160a4:	beq.w	16388 <_vfiprintf_r+0xf58>
   160a8:	mov	r4, r0
   160aa:	ldr	r2, [sp, #76]	; 0x4c
   160ac:	ldr	r2, [r2, r5]
   160ae:	add	r3, sp, #88	; 0x58
   160b0:	adds	r5, #4
   160b2:	cmp	r2, #0
   160b4:	bne.n	16090 <_vfiprintf_r+0xc60>
   160b6:	str	r4, [sp, #16]
   160b8:	ldr	r4, [sp, #28]
   160ba:	b.n	1621c <_vfiprintf_r+0xdec>
   160bc:	ands.w	r3, r6, #16
   160c0:	ldr	r0, [sp, #28]
   160c2:	bne.n	160de <_vfiprintf_r+0xcae>
   160c4:	ands.w	r4, r6, #64	; 0x40
   160c8:	beq.n	160d6 <_vfiprintf_r+0xca6>
   160ca:	mov	r2, r3
   160cc:	ldr.w	r3, [r0], #4
   160d0:	str	r0, [sp, #28]
   160d2:	uxth	r3, r3
   160d4:	b.n	1601a <_vfiprintf_r+0xbea>
   160d6:	ands.w	r2, r6, #512	; 0x200
   160da:	bne.w	162a0 <_vfiprintf_r+0xe70>
   160de:	ldr.w	r3, [r0], #4
   160e2:	str	r0, [sp, #28]
   160e4:	b.n	1601a <_vfiprintf_r+0xbea>
   160e6:	nop
   160e8:	.word	0x20002488
   160ec:	.word	0x200009cc
   160f0:	.word	0x200009e0
   160f4:	ldr	r1, [sp, #12]
   160f6:	str	r7, [sp, #16]
   160f8:	add	r4, sp, #272	; 0x110
   160fa:	mov	lr, r3
   160fc:	vmov	s17, fp
   16100:	and.w	r6, r1, #1024	; 0x400
   16104:	mov.w	ip, #0
   16108:	mov	r3, r4
   1610a:	b.n	1611a <_vfiprintf_r+0xcea>
   1610c:	cmp.w	lr, #10
   16110:	sbcs.w	r2, r2, #0
   16114:	bcc.n	1618a <_vfiprintf_r+0xd5a>
   16116:	mov	lr, r4
   16118:	mov	r2, r5
   1611a:	ldr	r1, [pc, #664]	; (163b4 <_vfiprintf_r+0xf84>)
   1611c:	adds.w	r0, lr, r2
   16120:	adc.w	r0, r0, #0
   16124:	mov	r7, r1
   16126:	umull	r1, r4, r1, r0
   1612a:	bic.w	r1, r4, #3
   1612e:	add.w	r1, r1, r4, lsr #2
   16132:	subs	r0, r0, r1
   16134:	subs.w	r1, lr, r0
   16138:	mov.w	r5, #3435973836	; 0xcccccccc
   1613c:	sbc.w	r4, r2, #0
   16140:	mul.w	r5, r5, r1
   16144:	mla	r5, r7, r4, r5
   16148:	umull	r4, r1, r1, r7
   1614c:	add	r5, r1
   1614e:	movs	r7, #5
   16150:	and.w	r1, r4, #1
   16154:	umull	r1, fp, r1, r7
   16158:	adds	r1, r1, r0
   1615a:	lsrs	r4, r4, #1
   1615c:	adds	r1, #48	; 0x30
   1615e:	strb.w	r1, [r3, #-1]
   16162:	orr.w	r4, r4, r5, lsl #31
   16166:	add.w	ip, ip, #1
   1616a:	subs	r3, #1
   1616c:	lsrs	r5, r5, #1
   1616e:	cmp	r6, #0
   16170:	beq.n	1610c <_vfiprintf_r+0xcdc>
   16172:	ldr	r1, [sp, #44]	; 0x2c
   16174:	ldrb	r1, [r1, #0]
   16176:	cmp	r1, ip
   16178:	bne.n	1610c <_vfiprintf_r+0xcdc>
   1617a:	cmp.w	ip, #255	; 0xff
   1617e:	beq.n	1610c <_vfiprintf_r+0xcdc>
   16180:	cmp.w	lr, #10
   16184:	sbcs.w	r2, r2, #0
   16188:	bcs.n	16264 <_vfiprintf_r+0xe34>
   1618a:	mov	r4, r3
   1618c:	add	r3, sp, #272	; 0x110
   1618e:	subs	r3, r3, r4
   16190:	ldr	r7, [sp, #16]
   16192:	ldr	r6, [sp, #12]
   16194:	str	r3, [sp, #16]
   16196:	vmov	fp, s17
   1619a:	b.w	15682 <_vfiprintf_r+0x252>
   1619e:	str	r6, [sp, #12]
   161a0:	b.w	15668 <_vfiprintf_r+0x238>
   161a4:	mov	r0, fp
   161a6:	bl	e0f0 <__sinit>
   161aa:	b.w	15464 <_vfiprintf_r+0x34>
   161ae:	cmp	r1, #1
   161b0:	str	r6, [sp, #12]
   161b2:	bne.w	15b50 <_vfiprintf_r+0x720>
   161b6:	b.w	15672 <_vfiprintf_r+0x242>
   161ba:	ldr	r3, [sp, #28]
   161bc:	ldr	r1, [sp, #20]
   161be:	ldr.w	r2, [r3], #4
   161c2:	str	r1, [r2, #0]
   161c4:	str	r3, [sp, #28]
   161c6:	b.w	154c6 <_vfiprintf_r+0x96>
   161ca:	cmp	r7, #6
   161cc:	mov	r3, r7
   161ce:	ldr	r2, [sp, #12]
   161d0:	ldr	r4, [pc, #484]	; (163b8 <_vfiprintf_r+0xf88>)
   161d2:	str	r2, [sp, #28]
   161d4:	it	cs
   161d6:	movcs	r3, #6
   161d8:	str	r3, [sp, #16]
   161da:	str	r3, [sp, #12]
   161dc:	b.w	1582a <_vfiprintf_r+0x3fa>
   161e0:	ldr	r3, [sp, #12]
   161e2:	ldr	r1, [sp, #28]
   161e4:	ands.w	r2, r3, #512	; 0x200
   161e8:	ite	ne
   161ea:	ldrne.w	r3, [r1], #4
   161ee:	ldreq.w	r3, [r1], #4
   161f2:	str	r1, [sp, #28]
   161f4:	itt	ne
   161f6:	movne	r2, r0
   161f8:	uxtbne	r3, r3
   161fa:	movs	r1, #1
   161fc:	b.w	1571e <_vfiprintf_r+0x2ee>
   16200:	add	r3, sp, #88	; 0x58
   16202:	str	r3, [sp, #0]
   16204:	movs	r3, #0
   16206:	mov	r1, r3
   16208:	add	r2, sp, #76	; 0x4c
   1620a:	mov	r0, fp
   1620c:	bl	14f40 <_wcsrtombs_r>
   16210:	mov	r3, r0
   16212:	adds	r3, #1
   16214:	str	r0, [sp, #16]
   16216:	beq.w	16376 <_vfiprintf_r+0xf46>
   1621a:	str	r4, [sp, #76]	; 0x4c
   1621c:	ldr	r3, [sp, #16]
   1621e:	cmp	r3, #0
   16220:	beq.n	16284 <_vfiprintf_r+0xe54>
   16222:	cmp	r3, #99	; 0x63
   16224:	bgt.n	162ee <_vfiprintf_r+0xebe>
   16226:	movs	r3, #0
   16228:	str	r3, [sp, #32]
   1622a:	add	r4, sp, #172	; 0xac
   1622c:	movs	r2, #8
   1622e:	movs	r1, #0
   16230:	add	r0, sp, #88	; 0x58
   16232:	bl	9c1c <memset>
   16236:	ldr	r5, [sp, #16]
   16238:	add	r3, sp, #88	; 0x58
   1623a:	str	r3, [sp, #0]
   1623c:	add	r2, sp, #76	; 0x4c
   1623e:	mov	r3, r5
   16240:	mov	r1, r4
   16242:	mov	r0, fp
   16244:	bl	14f40 <_wcsrtombs_r>
   16248:	cmp	r5, r0
   1624a:	bne.w	163a4 <_vfiprintf_r+0xf74>
   1624e:	ldr	r3, [sp, #12]
   16250:	ldr	r2, [sp, #16]
   16252:	str	r3, [sp, #28]
   16254:	movs	r3, #0
   16256:	strb	r3, [r4, r2]
   16258:	mov	r7, r3
   1625a:	bic.w	r3, r2, r2, asr #31
   1625e:	str	r3, [sp, #12]
   16260:	b.w	15690 <_vfiprintf_r+0x260>
   16264:	ldr	r2, [sp, #56]	; 0x38
   16266:	ldr	r1, [sp, #52]	; 0x34
   16268:	subs	r3, r3, r2
   1626a:	mov	r0, r3
   1626c:	str	r3, [sp, #32]
   1626e:	bl	e698 <strncpy>
   16272:	ldr	r1, [sp, #44]	; 0x2c
   16274:	ldr	r3, [sp, #32]
   16276:	ldrb	r2, [r1, #1]
   16278:	cbz	r2, 1627e <_vfiprintf_r+0xe4e>
   1627a:	adds	r1, #1
   1627c:	str	r1, [sp, #44]	; 0x2c
   1627e:	mov.w	ip, #0
   16282:	b.n	16116 <_vfiprintf_r+0xce6>
   16284:	ldr	r3, [sp, #12]
   16286:	str	r3, [sp, #28]
   16288:	ldr	r3, [sp, #16]
   1628a:	str	r3, [sp, #12]
   1628c:	mov	r7, r3
   1628e:	str	r3, [sp, #32]
   16290:	b.w	15690 <_vfiprintf_r+0x260>
   16294:	movs	r1, #1
   16296:	mov	r0, r3
   16298:	add.w	r9, sp, #108	; 0x6c
   1629c:	b.w	158c6 <_vfiprintf_r+0x496>
   162a0:	ldr.w	r3, [r0], #4
   162a4:	str	r0, [sp, #28]
   162a6:	mov	r2, r4
   162a8:	uxtb	r3, r3
   162aa:	b.n	1601a <_vfiprintf_r+0xbea>
   162ac:	ldrsb.w	r3, [r2], #4
   162b0:	str	r2, [sp, #28]
   162b2:	asrs	r2, r3, #31
   162b4:	mov	r1, r2
   162b6:	b.w	1564e <_vfiprintf_r+0x21e>
   162ba:	ldr.w	r3, [r1], #4
   162be:	str	r1, [sp, #28]
   162c0:	mov	r2, r0
   162c2:	uxtb	r3, r3
   162c4:	b.w	15716 <_vfiprintf_r+0x2e6>
   162c8:	movs	r3, #1
   162ca:	str	r3, [sp, #112]	; 0x70
   162cc:	movs	r1, #1
   162ce:	add.w	r3, sp, #67	; 0x43
   162d2:	str	r3, [sp, #108]	; 0x6c
   162d4:	add.w	r9, sp, #108	; 0x6c
   162d8:	mov	r3, r1
   162da:	b.w	15878 <_vfiprintf_r+0x448>
   162de:	ldr	r3, [sp, #28]
   162e0:	ldr	r1, [sp, #20]
   162e2:	ldr.w	r2, [r3], #4
   162e6:	str	r3, [sp, #28]
   162e8:	strh	r1, [r2, #0]
   162ea:	b.w	154c6 <_vfiprintf_r+0x96>
   162ee:	adds	r1, r3, #1
   162f0:	mov	r0, fp
   162f2:	bl	c680 <_malloc_r>
   162f6:	mov	r4, r0
   162f8:	cmp	r0, #0
   162fa:	beq.n	16376 <_vfiprintf_r+0xf46>
   162fc:	str	r0, [sp, #32]
   162fe:	b.n	1622c <_vfiprintf_r+0xdfc>
   16300:	ldr	r0, [r1, #88]	; 0x58
   16302:	bl	e834 <__retarget_lock_release_recursive>
   16306:	b.w	156dc <_vfiprintf_r+0x2ac>
   1630a:	ldr	r3, [sp, #12]
   1630c:	str	r3, [sp, #28]
   1630e:	strd	r7, r7, [sp, #12]
   16312:	ldr	r7, [sp, #32]
   16314:	b.w	15690 <_vfiprintf_r+0x260>
   16318:	ldr	r0, [sp, #100]	; 0x64
   1631a:	ldr	r3, [sp, #104]	; 0x68
   1631c:	adds	r0, #1
   1631e:	b.n	15dac <_vfiprintf_r+0x97c>
   16320:	ldr	r3, [sp, #12]
   16322:	str	r3, [sp, #28]
   16324:	mov	r0, r4
   16326:	bl	ec80 <strlen>
   1632a:	bic.w	r3, r0, r0, asr #31
   1632e:	mov	r7, r5
   16330:	str	r0, [sp, #16]
   16332:	str	r3, [sp, #12]
   16334:	str	r5, [sp, #32]
   16336:	b.w	15690 <_vfiprintf_r+0x260>
   1633a:	vmov	r1, s16
   1633e:	add	r2, sp, #96	; 0x60
   16340:	mov	r0, fp
   16342:	bl	153b8 <__sprint_r.part.0>
   16346:	cmp	r0, #0
   16348:	beq.w	157b8 <_vfiprintf_r+0x388>
   1634c:	b.w	157ea <_vfiprintf_r+0x3ba>
   16350:	ldr	r0, [sp, #100]	; 0x64
   16352:	adds	r0, #1
   16354:	b.n	15e4c <_vfiprintf_r+0xa1c>
   16356:	mov	ip, r1
   16358:	b.n	15c38 <_vfiprintf_r+0x808>
   1635a:	ldr	r3, [r5, #100]	; 0x64
   1635c:	lsls	r1, r3, #31
   1635e:	bmi.n	1636c <_vfiprintf_r+0xf3c>
   16360:	ldrh	r3, [r5, #12]
   16362:	lsls	r2, r3, #22
   16364:	bmi.n	1636c <_vfiprintf_r+0xf3c>
   16366:	ldr	r0, [r5, #88]	; 0x58
   16368:	bl	e834 <__retarget_lock_release_recursive>
   1636c:	mov.w	r3, #4294967295
   16370:	str	r3, [sp, #20]
   16372:	b.w	15808 <_vfiprintf_r+0x3d8>
   16376:	vmov	r2, s16
   1637a:	ldrsh.w	r3, [r2, #12]
   1637e:	orr.w	r3, r3, #64	; 0x40
   16382:	strh	r3, [r2, #12]
   16384:	b.w	157f2 <_vfiprintf_r+0x3c2>
   16388:	ldr	r4, [sp, #28]
   1638a:	str	r7, [sp, #16]
   1638c:	b.n	1621c <_vfiprintf_r+0xdec>
   1638e:	ldr	r3, [sp, #28]
   16390:	ldrb.w	r1, [r8, #1]
   16394:	ldr.w	r7, [r3], #4
   16398:	str	r3, [sp, #28]
   1639a:	mov	r8, r2
   1639c:	orr.w	r7, r7, r7, asr #31
   163a0:	b.w	15516 <_vfiprintf_r+0xe6>
   163a4:	vmov	r2, s16
   163a8:	ldrh	r3, [r2, #12]
   163aa:	orr.w	r3, r3, #64	; 0x40
   163ae:	strh	r3, [r2, #12]
   163b0:	b.w	157de <_vfiprintf_r+0x3ae>
   163b4:	.word	0xcccccccd
   163b8:	.word	0x200009f4

000163bc <__sbprintf>:
   163bc:	push	{r4, r5, r6, lr}
   163be:	mov	r4, r1
   163c0:	ldrh	r1, [r1, #12]
   163c2:	sub.w	sp, sp, #1136	; 0x470
   163c6:	bic.w	r1, r1, #2
   163ca:	strh.w	r1, [sp, #20]
   163ce:	ldr	r1, [r4, #100]	; 0x64
   163d0:	str	r1, [sp, #108]	; 0x6c
   163d2:	ldrh	r1, [r4, #14]
   163d4:	strh.w	r1, [sp, #22]
   163d8:	ldr	r1, [r4, #28]
   163da:	str	r1, [sp, #36]	; 0x24
   163dc:	ldr	r1, [r4, #36]	; 0x24
   163de:	str	r1, [sp, #44]	; 0x2c
   163e0:	add	r1, sp, #112	; 0x70
   163e2:	str	r1, [sp, #8]
   163e4:	str	r1, [sp, #24]
   163e6:	mov.w	r1, #1024	; 0x400
   163ea:	mov	r6, r0
   163ec:	str	r1, [sp, #16]
   163ee:	str	r1, [sp, #28]
   163f0:	add	r0, sp, #96	; 0x60
   163f2:	movs	r1, #0
   163f4:	strd	r3, r2, [sp]
   163f8:	str	r1, [sp, #32]
   163fa:	bl	e828 <__retarget_lock_init_recursive>
   163fe:	ldrd	r3, r2, [sp]
   16402:	add	r1, sp, #8
   16404:	mov	r0, r6
   16406:	bl	15430 <_vfiprintf_r>
   1640a:	subs	r5, r0, #0
   1640c:	blt.n	1641e <__sbprintf+0x62>
   1640e:	add	r1, sp, #8
   16410:	mov	r0, r6
   16412:	bl	139bc <_fflush_r>
   16416:	cmp	r0, #0
   16418:	it	ne
   1641a:	movne.w	r5, #4294967295
   1641e:	ldrh.w	r3, [sp, #20]
   16422:	lsls	r3, r3, #25
   16424:	bpl.n	1642e <__sbprintf+0x72>
   16426:	ldrh	r3, [r4, #12]
   16428:	orr.w	r3, r3, #64	; 0x40
   1642c:	strh	r3, [r4, #12]
   1642e:	ldr	r0, [sp, #96]	; 0x60
   16430:	bl	e82c <__retarget_lock_close_recursive>
   16434:	mov	r0, r5
   16436:	add.w	sp, sp, #1136	; 0x470
   1643a:	pop	{r4, r5, r6, pc}

0001643c <__sfvwrite_r>:
   1643c:	ldr	r3, [r2, #8]
   1643e:	cmp	r3, #0
   16440:	beq.w	1654e <__sfvwrite_r+0x112>
   16444:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16448:	ldrsh.w	r3, [r1, #12]
   1644c:	mov	r4, r1
   1644e:	lsls	r1, r3, #28
   16450:	mov	r8, r0
   16452:	sub	sp, #12
   16454:	mov	r7, r2
   16456:	uxth	r0, r3
   16458:	bpl.n	164a6 <__sfvwrite_r+0x6a>
   1645a:	ldr	r3, [r4, #16]
   1645c:	cbz	r3, 164a6 <__sfvwrite_r+0x6a>
   1645e:	ands.w	r3, r0, #2
   16462:	ldr	r5, [r7, #0]
   16464:	beq.n	164c2 <__sfvwrite_r+0x86>
   16466:	mov.w	sl, #0
   1646a:	ldr.w	fp, [pc, #704]	; 1672c <__sfvwrite_r+0x2f0>
   1646e:	mov	r6, sl
   16470:	mov	r9, r7
   16472:	cmp	r6, fp
   16474:	mov	r3, r6
   16476:	mov	r2, sl
   16478:	it	cs
   1647a:	movcs	r3, fp
   1647c:	mov	r0, r8
   1647e:	cmp	r6, #0
   16480:	beq.n	16528 <__sfvwrite_r+0xec>
   16482:	ldr	r1, [r4, #28]
   16484:	ldr	r7, [r4, #36]	; 0x24
   16486:	blx	r7
   16488:	cmp	r0, #0
   1648a:	ble.n	1653a <__sfvwrite_r+0xfe>
   1648c:	ldr.w	r3, [r9, #8]
   16490:	subs	r3, r3, r0
   16492:	add	sl, r0
   16494:	subs	r6, r6, r0
   16496:	str.w	r3, [r9, #8]
   1649a:	cmp	r3, #0
   1649c:	bne.n	16472 <__sfvwrite_r+0x36>
   1649e:	movs	r0, #0
   164a0:	add	sp, #12
   164a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a6:	mov	r1, r4
   164a8:	mov	r0, r8
   164aa:	bl	167a8 <__swsetup_r>
   164ae:	cmp	r0, #0
   164b0:	bne.w	16724 <__sfvwrite_r+0x2e8>
   164b4:	ldrsh.w	r3, [r4, #12]
   164b8:	ldr	r5, [r7, #0]
   164ba:	uxth	r0, r3
   164bc:	ands.w	r3, r0, #2
   164c0:	bne.n	16466 <__sfvwrite_r+0x2a>
   164c2:	ands.w	r9, r0, #1
   164c6:	bne.n	16552 <__sfvwrite_r+0x116>
   164c8:	mov	r6, r9
   164ca:	str	r7, [sp, #0]
   164cc:	cbz	r6, 16520 <__sfvwrite_r+0xe4>
   164ce:	lsls	r2, r0, #22
   164d0:	ldr.w	fp, [r4, #8]
   164d4:	bpl.w	165e2 <__sfvwrite_r+0x1a6>
   164d8:	cmp	fp, r6
   164da:	mov	r2, fp
   164dc:	bhi.w	16648 <__sfvwrite_r+0x20c>
   164e0:	tst.w	r0, #1152	; 0x480
   164e4:	bne.w	1666a <__sfvwrite_r+0x22e>
   164e8:	ldr	r0, [r4, #0]
   164ea:	str	r2, [sp, #4]
   164ec:	mov	r1, r9
   164ee:	bl	e468 <memmove>
   164f2:	ldr	r3, [r4, #8]
   164f4:	ldr	r2, [sp, #4]
   164f6:	sub.w	r1, r3, fp
   164fa:	ldr	r3, [r4, #0]
   164fc:	str	r1, [r4, #8]
   164fe:	add	r3, r2
   16500:	mov	sl, r6
   16502:	str	r3, [r4, #0]
   16504:	movs	r6, #0
   16506:	ldr	r2, [sp, #0]
   16508:	ldr	r3, [r2, #8]
   1650a:	sub.w	r3, r3, sl
   1650e:	add	r9, sl
   16510:	str	r3, [r2, #8]
   16512:	cmp	r3, #0
   16514:	beq.n	1649e <__sfvwrite_r+0x62>
   16516:	ldrsh.w	r0, [r4, #12]
   1651a:	uxth	r0, r0
   1651c:	cmp	r6, #0
   1651e:	bne.n	164ce <__sfvwrite_r+0x92>
   16520:	ldrd	r9, r6, [r5]
   16524:	adds	r5, #8
   16526:	b.n	164cc <__sfvwrite_r+0x90>
   16528:	ldrd	sl, r6, [r5]
   1652c:	adds	r5, #8
   1652e:	b.n	16472 <__sfvwrite_r+0x36>
   16530:	mov	r1, r4
   16532:	mov	r0, r8
   16534:	bl	139bc <_fflush_r>
   16538:	cbz	r0, 1659e <__sfvwrite_r+0x162>
   1653a:	ldrsh.w	r3, [r4, #12]
   1653e:	orr.w	r3, r3, #64	; 0x40
   16542:	mov.w	r0, #4294967295
   16546:	strh	r3, [r4, #12]
   16548:	add	sp, #12
   1654a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1654e:	movs	r0, #0
   16550:	bx	lr
   16552:	mov	r6, r3
   16554:	mov	sl, r7
   16556:	mov	r9, r3
   16558:	mov	r0, r3
   1655a:	str	r5, [sp, #0]
   1655c:	mov	r7, r3
   1655e:	cbz	r6, 165ba <__sfvwrite_r+0x17e>
   16560:	cmp	r0, #0
   16562:	beq.n	165ca <__sfvwrite_r+0x18e>
   16564:	mov	r2, r9
   16566:	ldrd	r1, r3, [r4, #16]
   1656a:	ldr	r0, [r4, #0]
   1656c:	ldr	r5, [r4, #8]
   1656e:	cmp	r2, r6
   16570:	it	cs
   16572:	movcs	r2, r6
   16574:	cmp	r0, r1
   16576:	bls.n	16582 <__sfvwrite_r+0x146>
   16578:	add.w	fp, r5, r3
   1657c:	cmp	r2, fp
   1657e:	bgt.w	166d0 <__sfvwrite_r+0x294>
   16582:	cmp	r3, r2
   16584:	bgt.n	16650 <__sfvwrite_r+0x214>
   16586:	ldr	r1, [r4, #28]
   16588:	ldr	r5, [r4, #36]	; 0x24
   1658a:	mov	r2, r7
   1658c:	mov	r0, r8
   1658e:	blx	r5
   16590:	subs.w	fp, r0, #0
   16594:	ble.n	1653a <__sfvwrite_r+0xfe>
   16596:	subs.w	r9, r9, fp
   1659a:	beq.n	16530 <__sfvwrite_r+0xf4>
   1659c:	movs	r0, #1
   1659e:	ldr.w	r3, [sl, #8]
   165a2:	sub.w	r3, r3, fp
   165a6:	add	r7, fp
   165a8:	sub.w	r6, r6, fp
   165ac:	str.w	r3, [sl, #8]
   165b0:	cmp	r3, #0
   165b2:	beq.w	1649e <__sfvwrite_r+0x62>
   165b6:	cmp	r6, #0
   165b8:	bne.n	16560 <__sfvwrite_r+0x124>
   165ba:	ldr	r2, [sp, #0]
   165bc:	ldr	r6, [r2, #4]
   165be:	mov	r3, r2
   165c0:	adds	r2, #8
   165c2:	str	r2, [sp, #0]
   165c4:	cmp	r6, #0
   165c6:	beq.n	165ba <__sfvwrite_r+0x17e>
   165c8:	ldr	r7, [r3, #0]
   165ca:	mov	r2, r6
   165cc:	movs	r1, #10
   165ce:	mov	r0, r7
   165d0:	bl	ebe0 <memchr>
   165d4:	cmp	r0, #0
   165d6:	beq.w	16712 <__sfvwrite_r+0x2d6>
   165da:	adds	r0, #1
   165dc:	sub.w	r9, r0, r7
   165e0:	b.n	16564 <__sfvwrite_r+0x128>
   165e2:	ldr	r0, [r4, #0]
   165e4:	ldr	r3, [r4, #16]
   165e6:	cmp	r0, r3
   165e8:	bhi.n	16618 <__sfvwrite_r+0x1dc>
   165ea:	ldr	r2, [r4, #20]
   165ec:	cmp	r2, r6
   165ee:	bhi.n	16618 <__sfvwrite_r+0x1dc>
   165f0:	mvn.w	r3, #2147483648	; 0x80000000
   165f4:	cmp	r3, r6
   165f6:	it	cs
   165f8:	movcs	r3, r6
   165fa:	ldr	r1, [r4, #28]
   165fc:	sdiv	r3, r3, r2
   16600:	ldr	r7, [r4, #36]	; 0x24
   16602:	mul.w	r3, r2, r3
   16606:	mov	r0, r8
   16608:	mov	r2, r9
   1660a:	blx	r7
   1660c:	subs.w	sl, r0, #0
   16610:	ble.n	1653a <__sfvwrite_r+0xfe>
   16612:	sub.w	r6, r6, sl
   16616:	b.n	16506 <__sfvwrite_r+0xca>
   16618:	cmp	fp, r6
   1661a:	mov	sl, fp
   1661c:	it	cs
   1661e:	movcs	sl, r6
   16620:	mov	r2, sl
   16622:	mov	r1, r9
   16624:	bl	e468 <memmove>
   16628:	ldr	r3, [r4, #8]
   1662a:	ldr	r2, [r4, #0]
   1662c:	sub.w	r3, r3, sl
   16630:	add	r2, sl
   16632:	str	r3, [r4, #8]
   16634:	str	r2, [r4, #0]
   16636:	cmp	r3, #0
   16638:	bne.n	16612 <__sfvwrite_r+0x1d6>
   1663a:	mov	r1, r4
   1663c:	mov	r0, r8
   1663e:	bl	139bc <_fflush_r>
   16642:	cmp	r0, #0
   16644:	beq.n	16612 <__sfvwrite_r+0x1d6>
   16646:	b.n	1653a <__sfvwrite_r+0xfe>
   16648:	ldr	r0, [r4, #0]
   1664a:	mov	fp, r6
   1664c:	mov	r2, r6
   1664e:	b.n	164ea <__sfvwrite_r+0xae>
   16650:	mov	r1, r7
   16652:	str	r2, [sp, #4]
   16654:	bl	e468 <memmove>
   16658:	ldr	r2, [sp, #4]
   1665a:	ldr	r3, [r4, #8]
   1665c:	subs	r3, r3, r2
   1665e:	str	r3, [r4, #8]
   16660:	ldr	r3, [r4, #0]
   16662:	add	r3, r2
   16664:	str	r3, [r4, #0]
   16666:	mov	fp, r2
   16668:	b.n	16596 <__sfvwrite_r+0x15a>
   1666a:	ldr	r3, [r4, #0]
   1666c:	ldr	r1, [r4, #16]
   1666e:	sub.w	fp, r3, r1
   16672:	ldr	r3, [r4, #20]
   16674:	add.w	sl, r3, r3, lsl #1
   16678:	add.w	sl, sl, sl, lsr #31
   1667c:	add.w	r3, fp, #1
   16680:	mov.w	sl, sl, asr #1
   16684:	add	r3, r6
   16686:	cmp	r3, sl
   16688:	mov	r2, sl
   1668a:	itt	hi
   1668c:	movhi	sl, r3
   1668e:	movhi	r2, sl
   16690:	lsls	r3, r0, #21
   16692:	bpl.n	166ee <__sfvwrite_r+0x2b2>
   16694:	mov	r1, r2
   16696:	mov	r0, r8
   16698:	bl	c680 <_malloc_r>
   1669c:	cmp	r0, #0
   1669e:	beq.n	16718 <__sfvwrite_r+0x2dc>
   166a0:	mov	r2, fp
   166a2:	ldr	r1, [r4, #16]
   166a4:	str	r0, [sp, #4]
   166a6:	bl	9c60 <memcpy>
   166aa:	ldrh	r2, [r4, #12]
   166ac:	ldr	r3, [sp, #4]
   166ae:	bic.w	r2, r2, #1152	; 0x480
   166b2:	orr.w	r2, r2, #128	; 0x80
   166b6:	strh	r2, [r4, #12]
   166b8:	add.w	r0, r3, fp
   166bc:	str	r3, [r4, #16]
   166be:	sub.w	r3, sl, fp
   166c2:	str.w	sl, [r4, #20]
   166c6:	str	r3, [r4, #8]
   166c8:	str	r0, [r4, #0]
   166ca:	mov	fp, r6
   166cc:	mov	r2, r6
   166ce:	b.n	164ea <__sfvwrite_r+0xae>
   166d0:	mov	r1, r7
   166d2:	mov	r2, fp
   166d4:	bl	e468 <memmove>
   166d8:	ldr	r3, [r4, #0]
   166da:	add	r3, fp
   166dc:	str	r3, [r4, #0]
   166de:	mov	r1, r4
   166e0:	mov	r0, r8
   166e2:	bl	139bc <_fflush_r>
   166e6:	cmp	r0, #0
   166e8:	beq.w	16596 <__sfvwrite_r+0x15a>
   166ec:	b.n	1653a <__sfvwrite_r+0xfe>
   166ee:	mov	r0, r8
   166f0:	bl	cc10 <_realloc_r>
   166f4:	mov	r3, r0
   166f6:	cmp	r0, #0
   166f8:	bne.n	166b8 <__sfvwrite_r+0x27c>
   166fa:	ldr	r1, [r4, #16]
   166fc:	mov	r0, r8
   166fe:	bl	eea4 <_free_r>
   16702:	ldrsh.w	r3, [r4, #12]
   16706:	movs	r2, #12
   16708:	bic.w	r3, r3, #128	; 0x80
   1670c:	str.w	r2, [r8]
   16710:	b.n	1653e <__sfvwrite_r+0x102>
   16712:	adds	r2, r6, #1
   16714:	mov	r9, r2
   16716:	b.n	16566 <__sfvwrite_r+0x12a>
   16718:	movs	r2, #12
   1671a:	ldrsh.w	r3, [r4, #12]
   1671e:	str.w	r2, [r8]
   16722:	b.n	1653e <__sfvwrite_r+0x102>
   16724:	mov.w	r0, #4294967295
   16728:	b.n	164a0 <__sfvwrite_r+0x64>
   1672a:	nop
   1672c:	.word	0x7ffffc00

00016730 <__submore>:
   16730:	add.w	r3, r1, #64	; 0x40
   16734:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16738:	mov	r4, r1
   1673a:	ldr	r1, [r1, #48]	; 0x30
   1673c:	cmp	r1, r3
   1673e:	beq.n	1676a <__submore+0x3a>
   16740:	ldr	r6, [r4, #52]	; 0x34
   16742:	lsls	r7, r6, #1
   16744:	mov	r2, r7
   16746:	bl	cc10 <_realloc_r>
   1674a:	mov	r5, r0
   1674c:	cbz	r0, 167a0 <__submore+0x70>
   1674e:	add.w	r8, r0, r6
   16752:	mov	r1, r0
   16754:	mov	r2, r6
   16756:	mov	r0, r8
   16758:	bl	9c60 <memcpy>
   1675c:	strd	r5, r7, [r4, #48]	; 0x30
   16760:	str.w	r8, [r4]
   16764:	movs	r0, #0
   16766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1676a:	mov.w	r1, #1024	; 0x400
   1676e:	bl	c680 <_malloc_r>
   16772:	cbz	r0, 167a0 <__submore+0x70>
   16774:	ldrb.w	r3, [r4, #66]	; 0x42
   16778:	mov.w	r2, #1024	; 0x400
   1677c:	strd	r0, r2, [r4, #48]	; 0x30
   16780:	strb.w	r3, [r0, #1023]	; 0x3ff
   16784:	ldrb.w	r3, [r4, #65]	; 0x41
   16788:	strb.w	r3, [r0, #1022]	; 0x3fe
   1678c:	ldrb.w	r2, [r4, #64]	; 0x40
   16790:	strb.w	r2, [r0, #1021]	; 0x3fd
   16794:	addw	r3, r0, #1021	; 0x3fd
   16798:	str	r3, [r4, #0]
   1679a:	movs	r0, #0
   1679c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167a0:	mov.w	r0, #4294967295
   167a4:	b.n	16766 <__submore+0x36>
   167a6:	nop

000167a8 <__swsetup_r>:
   167a8:	push	{r3, r4, r5, lr}
   167aa:	ldr	r3, [pc, #196]	; (16870 <__swsetup_r+0xc8>)
   167ac:	ldr	r3, [r3, #0]
   167ae:	mov	r5, r0
   167b0:	mov	r4, r1
   167b2:	cbz	r3, 167ba <__swsetup_r+0x12>
   167b4:	ldr	r2, [r3, #52]	; 0x34
   167b6:	cmp	r2, #0
   167b8:	beq.n	16858 <__swsetup_r+0xb0>
   167ba:	ldrsh.w	r3, [r4, #12]
   167be:	lsls	r0, r3, #28
   167c0:	uxth	r2, r3
   167c2:	bpl.n	167fe <__swsetup_r+0x56>
   167c4:	ldr	r1, [r4, #16]
   167c6:	cbz	r1, 16814 <__swsetup_r+0x6c>
   167c8:	ands.w	r0, r2, #1
   167cc:	beq.n	167de <__swsetup_r+0x36>
   167ce:	movs	r0, #0
   167d0:	str	r0, [r4, #8]
   167d2:	ldr	r0, [r4, #20]
   167d4:	negs	r0, r0
   167d6:	str	r0, [r4, #24]
   167d8:	cbz	r1, 167ea <__swsetup_r+0x42>
   167da:	movs	r0, #0
   167dc:	pop	{r3, r4, r5, pc}
   167de:	lsls	r5, r2, #30
   167e0:	it	pl
   167e2:	ldrpl	r0, [r4, #20]
   167e4:	str	r0, [r4, #8]
   167e6:	cmp	r1, #0
   167e8:	bne.n	167da <__swsetup_r+0x32>
   167ea:	lsls	r2, r2, #24
   167ec:	it	pl
   167ee:	movpl	r0, r1
   167f0:	bpl.n	167dc <__swsetup_r+0x34>
   167f2:	orr.w	r3, r3, #64	; 0x40
   167f6:	strh	r3, [r4, #12]
   167f8:	mov.w	r0, #4294967295
   167fc:	pop	{r3, r4, r5, pc}
   167fe:	lsls	r1, r2, #27
   16800:	bpl.n	16860 <__swsetup_r+0xb8>
   16802:	lsls	r2, r2, #29
   16804:	bmi.n	16830 <__swsetup_r+0x88>
   16806:	ldr	r1, [r4, #16]
   16808:	orr.w	r3, r3, #8
   1680c:	strh	r3, [r4, #12]
   1680e:	uxth	r2, r3
   16810:	cmp	r1, #0
   16812:	bne.n	167c8 <__swsetup_r+0x20>
   16814:	and.w	r0, r2, #640	; 0x280
   16818:	cmp.w	r0, #512	; 0x200
   1681c:	beq.n	167c8 <__swsetup_r+0x20>
   1681e:	mov	r1, r4
   16820:	mov	r0, r5
   16822:	bl	16b14 <__smakebuf_r>
   16826:	ldrsh.w	r3, [r4, #12]
   1682a:	ldr	r1, [r4, #16]
   1682c:	uxth	r2, r3
   1682e:	b.n	167c8 <__swsetup_r+0x20>
   16830:	ldr	r1, [r4, #48]	; 0x30
   16832:	cbz	r1, 1684a <__swsetup_r+0xa2>
   16834:	add.w	r2, r4, #64	; 0x40
   16838:	cmp	r1, r2
   1683a:	beq.n	16846 <__swsetup_r+0x9e>
   1683c:	mov	r0, r5
   1683e:	bl	eea4 <_free_r>
   16842:	ldrsh.w	r3, [r4, #12]
   16846:	movs	r2, #0
   16848:	str	r2, [r4, #48]	; 0x30
   1684a:	ldr	r1, [r4, #16]
   1684c:	movs	r2, #0
   1684e:	strd	r1, r2, [r4]
   16852:	bic.w	r3, r3, #36	; 0x24
   16856:	b.n	16808 <__swsetup_r+0x60>
   16858:	mov	r0, r3
   1685a:	bl	e0f0 <__sinit>
   1685e:	b.n	167ba <__swsetup_r+0x12>
   16860:	movs	r2, #9
   16862:	orr.w	r3, r3, #64	; 0x40
   16866:	str	r2, [r5, #0]
   16868:	mov.w	r0, #4294967295
   1686c:	strh	r3, [r4, #12]
   1686e:	pop	{r3, r4, r5, pc}
   16870:	.word	0x2000930c

00016874 <__fputwc>:
   16874:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16878:	sub	sp, #8
   1687a:	mov	sl, r0
   1687c:	mov	r8, r1
   1687e:	mov	r4, r2
   16880:	bl	e6fc <__locale_mb_cur_max>
   16884:	cmp	r0, #1
   16886:	bne.n	16890 <__fputwc+0x1c>
   16888:	add.w	r3, r8, #4294967295
   1688c:	cmp	r3, #254	; 0xfe
   1688e:	bls.n	168fe <__fputwc+0x8a>
   16890:	add.w	r9, sp, #4
   16894:	mov	r2, r8
   16896:	add.w	r3, r4, #92	; 0x5c
   1689a:	mov	r1, r9
   1689c:	mov	r0, sl
   1689e:	bl	14ef4 <_wcrtomb_r>
   168a2:	adds	r2, r0, #1
   168a4:	mov	r6, r0
   168a6:	beq.n	1690e <__fputwc+0x9a>
   168a8:	cbz	r0, 168f4 <__fputwc+0x80>
   168aa:	ldrb.w	ip, [sp, #4]
   168ae:	movs	r5, #0
   168b0:	b.n	168c6 <__fputwc+0x52>
   168b2:	ldr	r3, [r4, #0]
   168b4:	adds	r2, r3, #1
   168b6:	str	r2, [r4, #0]
   168b8:	strb.w	ip, [r3]
   168bc:	adds	r5, #1
   168be:	cmp	r5, r6
   168c0:	bcs.n	168f4 <__fputwc+0x80>
   168c2:	ldrb.w	ip, [r9, #1]!
   168c6:	ldr	r3, [r4, #8]
   168c8:	subs	r3, #1
   168ca:	cmp	r3, #0
   168cc:	str	r3, [r4, #8]
   168ce:	bge.n	168b2 <__fputwc+0x3e>
   168d0:	ldr	r7, [r4, #24]
   168d2:	cmp	r3, r7
   168d4:	mov	r1, ip
   168d6:	mov	r2, r4
   168d8:	mov	r0, sl
   168da:	blt.n	168e2 <__fputwc+0x6e>
   168dc:	cmp.w	ip, #10
   168e0:	bne.n	168b2 <__fputwc+0x3e>
   168e2:	bl	16bec <__swbuf_r>
   168e6:	adds	r3, r0, #1
   168e8:	bne.n	168bc <__fputwc+0x48>
   168ea:	mov	r6, r0
   168ec:	mov	r0, r6
   168ee:	add	sp, #8
   168f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   168f4:	mov	r6, r8
   168f6:	mov	r0, r6
   168f8:	add	sp, #8
   168fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   168fe:	uxtb.w	ip, r8
   16902:	strb.w	ip, [sp, #4]
   16906:	mov	r6, r0
   16908:	add.w	r9, sp, #4
   1690c:	b.n	168ae <__fputwc+0x3a>
   1690e:	ldrh	r3, [r4, #12]
   16910:	mov	r0, r6
   16912:	orr.w	r3, r3, #64	; 0x40
   16916:	strh	r3, [r4, #12]
   16918:	add	sp, #8
   1691a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1691e:	nop

00016920 <_fputwc_r>:
   16920:	push	{r4, r5, lr}
   16922:	ldr	r3, [r2, #100]	; 0x64
   16924:	tst.w	r3, #1
   16928:	ldrsh.w	r3, [r2, #12]
   1692c:	mov	r4, r2
   1692e:	sub	sp, #12
   16930:	mov	r5, r0
   16932:	uxth	r2, r3
   16934:	bne.n	1693a <_fputwc_r+0x1a>
   16936:	lsls	r0, r3, #22
   16938:	bpl.n	16974 <_fputwc_r+0x54>
   1693a:	lsls	r0, r2, #18
   1693c:	bmi.n	1694c <_fputwc_r+0x2c>
   1693e:	ldr	r2, [r4, #100]	; 0x64
   16940:	orr.w	r3, r3, #8192	; 0x2000
   16944:	orr.w	r2, r2, #8192	; 0x2000
   16948:	strh	r3, [r4, #12]
   1694a:	str	r2, [r4, #100]	; 0x64
   1694c:	mov	r2, r4
   1694e:	mov	r0, r5
   16950:	bl	16874 <__fputwc>
   16954:	ldr	r3, [r4, #100]	; 0x64
   16956:	lsls	r2, r3, #31
   16958:	mov	r5, r0
   1695a:	bmi.n	16962 <_fputwc_r+0x42>
   1695c:	ldrh	r3, [r4, #12]
   1695e:	lsls	r3, r3, #22
   16960:	bpl.n	16968 <_fputwc_r+0x48>
   16962:	mov	r0, r5
   16964:	add	sp, #12
   16966:	pop	{r4, r5, pc}
   16968:	ldr	r0, [r4, #88]	; 0x58
   1696a:	bl	e834 <__retarget_lock_release_recursive>
   1696e:	mov	r0, r5
   16970:	add	sp, #12
   16972:	pop	{r4, r5, pc}
   16974:	ldr	r0, [r4, #88]	; 0x58
   16976:	str	r1, [sp, #4]
   16978:	bl	e830 <__retarget_lock_acquire_recursive>
   1697c:	ldrsh.w	r3, [r4, #12]
   16980:	ldr	r1, [sp, #4]
   16982:	uxth	r2, r3
   16984:	b.n	1693a <_fputwc_r+0x1a>
   16986:	nop

00016988 <_wcsnrtombs_l>:
   16988:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1698c:	sub	sp, #44	; 0x2c
   1698e:	ldrd	r8, sl, [sp, #84]	; 0x54
   16992:	ldr	r7, [sp, #80]	; 0x50
   16994:	str	r1, [sp, #12]
   16996:	mov	r9, r0
   16998:	str	r2, [sp, #20]
   1699a:	mov	r6, r3
   1699c:	cmp.w	r8, #0
   169a0:	beq.n	16a5c <_wcsnrtombs_l+0xd4>
   169a2:	ldr	r3, [sp, #12]
   169a4:	cmp	r3, #0
   169a6:	beq.n	16a66 <_wcsnrtombs_l+0xde>
   169a8:	ldr	r3, [sp, #20]
   169aa:	ldr	r5, [r3, #0]
   169ac:	cmp	r7, #0
   169ae:	beq.n	16a86 <_wcsnrtombs_l+0xfe>
   169b0:	subs	r4, r6, #1
   169b2:	cbz	r6, 16a08 <_wcsnrtombs_l+0x80>
   169b4:	ldr	r3, [sp, #12]
   169b6:	str	r3, [sp, #16]
   169b8:	subs	r5, #4
   169ba:	movs	r6, #0
   169bc:	str	r5, [sp, #4]
   169be:	b.n	169d8 <_wcsnrtombs_l+0x50>
   169c0:	ldr	r3, [sp, #12]
   169c2:	cbnz	r3, 16a10 <_wcsnrtombs_l+0x88>
   169c4:	ldr	r3, [sp, #4]
   169c6:	ldr	r2, [r3, #0]
   169c8:	cmp	r2, #0
   169ca:	beq.n	16a42 <_wcsnrtombs_l+0xba>
   169cc:	cmp	ip, r7
   169ce:	bcs.n	16a8a <_wcsnrtombs_l+0x102>
   169d0:	subs	r4, #1
   169d2:	adds	r3, r4, #1
   169d4:	mov	r6, ip
   169d6:	beq.n	16a08 <_wcsnrtombs_l+0x80>
   169d8:	ldr.w	r3, [r8]
   169dc:	str	r3, [sp, #8]
   169de:	ldr	r3, [sp, #4]
   169e0:	ldr.w	r5, [sl, #224]	; 0xe0
   169e4:	ldr.w	r2, [r3, #4]!
   169e8:	str	r3, [sp, #4]
   169ea:	add	r1, sp, #28
   169ec:	mov	r3, r8
   169ee:	mov	r0, r9
   169f0:	ldr.w	fp, [r8, #4]
   169f4:	blx	r5
   169f6:	adds	r2, r0, #1
   169f8:	beq.n	16a70 <_wcsnrtombs_l+0xe8>
   169fa:	add.w	ip, r0, r6
   169fe:	cmp	ip, r7
   16a00:	bls.n	169c0 <_wcsnrtombs_l+0x38>
   16a02:	ldr	r3, [sp, #8]
   16a04:	strd	r3, fp, [r8]
   16a08:	mov	r0, r6
   16a0a:	add	sp, #44	; 0x2c
   16a0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a10:	cmp	r0, #0
   16a12:	ble.n	16a32 <_wcsnrtombs_l+0xaa>
   16a14:	ldr	r3, [sp, #16]
   16a16:	ldr	r5, [sp, #4]
   16a18:	add	r0, r3
   16a1a:	subs	r2, r3, #1
   16a1c:	add	r1, sp, #28
   16a1e:	add.w	lr, r0, #4294967295
   16a22:	ldrb.w	r3, [r1], #1
   16a26:	strb.w	r3, [r2, #1]!
   16a2a:	cmp	r2, lr
   16a2c:	bne.n	16a22 <_wcsnrtombs_l+0x9a>
   16a2e:	str	r5, [sp, #4]
   16a30:	str	r0, [sp, #16]
   16a32:	ldr	r3, [sp, #20]
   16a34:	ldr	r2, [r3, #0]
   16a36:	adds	r2, #4
   16a38:	str	r2, [r3, #0]
   16a3a:	ldr	r3, [sp, #4]
   16a3c:	ldr	r2, [r3, #0]
   16a3e:	cmp	r2, #0
   16a40:	bne.n	169cc <_wcsnrtombs_l+0x44>
   16a42:	ldr	r3, [sp, #12]
   16a44:	cbz	r3, 16a4a <_wcsnrtombs_l+0xc2>
   16a46:	ldr	r3, [sp, #20]
   16a48:	str	r2, [r3, #0]
   16a4a:	add.w	r6, ip, #4294967295
   16a4e:	movs	r2, #0
   16a50:	mov	r0, r6
   16a52:	str.w	r2, [r8]
   16a56:	add	sp, #44	; 0x2c
   16a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a5c:	ldr	r3, [sp, #12]
   16a5e:	add.w	r8, r0, #268	; 0x10c
   16a62:	cmp	r3, #0
   16a64:	bne.n	169a8 <_wcsnrtombs_l+0x20>
   16a66:	ldr	r3, [sp, #20]
   16a68:	mov.w	r7, #4294967295
   16a6c:	ldr	r5, [r3, #0]
   16a6e:	b.n	169b0 <_wcsnrtombs_l+0x28>
   16a70:	mov	r6, r0
   16a72:	movs	r1, #138	; 0x8a
   16a74:	movs	r2, #0
   16a76:	mov	r0, r6
   16a78:	str.w	r1, [r9]
   16a7c:	str.w	r2, [r8]
   16a80:	add	sp, #44	; 0x2c
   16a82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a86:	mov	r6, r7
   16a88:	b.n	16a08 <_wcsnrtombs_l+0x80>
   16a8a:	mov	r6, ip
   16a8c:	b.n	16a08 <_wcsnrtombs_l+0x80>
   16a8e:	nop

00016a90 <_wcsnrtombs_r>:
   16a90:	push	{r4, lr}
   16a92:	sub	sp, #16
   16a94:	ldr	r4, [pc, #20]	; (16aac <_wcsnrtombs_r+0x1c>)
   16a96:	ldr	r0, [sp, #24]
   16a98:	str	r0, [sp, #0]
   16a9a:	ldr	r0, [sp, #28]
   16a9c:	str	r0, [sp, #4]
   16a9e:	ldr	r0, [pc, #16]	; (16ab0 <_wcsnrtombs_r+0x20>)
   16aa0:	ldr	r0, [r0, #0]
   16aa2:	str	r4, [sp, #8]
   16aa4:	bl	16988 <_wcsnrtombs_l>
   16aa8:	add	sp, #16
   16aaa:	pop	{r4, pc}
   16aac:	.word	0x20008d84
   16ab0:	.word	0x2000930c

00016ab4 <category>:
   16ab4:	ldr	r3, [pc, #84]	; (16b0c <category+0x58>)
   16ab6:	cmp	r0, r3
   16ab8:	bhi.n	16b02 <category+0x4e>
   16aba:	push	{r4, r5, r6, lr}
   16abc:	ldr	r6, [pc, #80]	; (16b10 <category+0x5c>)
   16abe:	mov.w	lr, #0
   16ac2:	movw	r4, #2267	; 0x8db
   16ac6:	b.n	16ad0 <category+0x1c>
   16ac8:	add.w	lr, r2, #1
   16acc:	cmp	lr, r4
   16ace:	bgt.n	16afe <category+0x4a>
   16ad0:	add.w	r2, r4, lr
   16ad4:	bic.w	r3, r2, #1
   16ad8:	add.w	r3, r3, r2, asr #1
   16adc:	add.w	r3, r6, r3, lsl #1
   16ae0:	asrs	r2, r2, #1
   16ae2:	ldrb	r1, [r3, #1]
   16ae4:	ldrh	r5, [r3, #2]
   16ae6:	ldrh.w	ip, [r3, #4]
   16aea:	orr.w	r1, r1, r5, lsl #8
   16aee:	add	ip, r1
   16af0:	cmp	r0, ip
   16af2:	bhi.n	16ac8 <category+0x14>
   16af4:	cmp	r0, r1
   16af6:	bcs.n	16b06 <category+0x52>
   16af8:	subs	r4, r2, #1
   16afa:	cmp	lr, r4
   16afc:	ble.n	16ad0 <category+0x1c>
   16afe:	movs	r0, #255	; 0xff
   16b00:	pop	{r4, r5, r6, pc}
   16b02:	movs	r0, #255	; 0xff
   16b04:	bx	lr
   16b06:	ldrb	r0, [r3, #0]
   16b08:	pop	{r4, r5, r6, pc}
   16b0a:	nop
   16b0c:	.word	0x000e01ef
   16b10:	.word	0x20002498

00016b14 <__smakebuf_r>:
   16b14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b18:	ldrh	r3, [r1, #12]
   16b1a:	mov	r4, r1
   16b1c:	lsls	r1, r3, #30
   16b1e:	sub	sp, #88	; 0x58
   16b20:	bpl.n	16b34 <__smakebuf_r+0x20>
   16b22:	add.w	r3, r4, #67	; 0x43
   16b26:	movs	r2, #1
   16b28:	strd	r3, r2, [r4, #16]
   16b2c:	str	r3, [r4, #0]
   16b2e:	add	sp, #88	; 0x58
   16b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b34:	ldrsh.w	r1, [r4, #14]
   16b38:	cmp	r1, #0
   16b3a:	mov	r6, r0
   16b3c:	blt.n	16b8a <__smakebuf_r+0x76>
   16b3e:	mov	r2, sp
   16b40:	bl	16c9c <_fstat_r>
   16b44:	cmp	r0, #0
   16b46:	blt.n	16b88 <__smakebuf_r+0x74>
   16b48:	ldr	r5, [sp, #4]
   16b4a:	and.w	r5, r5, #61440	; 0xf000
   16b4e:	sub.w	r5, r5, #8192	; 0x2000
   16b52:	clz	r5, r5
   16b56:	mov.w	r8, #1024	; 0x400
   16b5a:	lsrs	r5, r5, #5
   16b5c:	mov.w	r7, #2048	; 0x800
   16b60:	mov	r1, r8
   16b62:	mov	r0, r6
   16b64:	bl	c680 <_malloc_r>
   16b68:	cbz	r0, 16ba4 <__smakebuf_r+0x90>
   16b6a:	ldrsh.w	r3, [r4, #12]
   16b6e:	str.w	r8, [r4, #20]
   16b72:	orr.w	r3, r3, #128	; 0x80
   16b76:	str	r0, [r4, #0]
   16b78:	str	r0, [r4, #16]
   16b7a:	strh	r3, [r4, #12]
   16b7c:	cbnz	r5, 16bcc <__smakebuf_r+0xb8>
   16b7e:	orrs	r3, r7
   16b80:	strh	r3, [r4, #12]
   16b82:	add	sp, #88	; 0x58
   16b84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b88:	ldrh	r3, [r4, #12]
   16b8a:	ands.w	r5, r3, #128	; 0x80
   16b8e:	beq.n	16bc4 <__smakebuf_r+0xb0>
   16b90:	mov.w	r8, #64	; 0x40
   16b94:	movs	r5, #0
   16b96:	mov	r1, r8
   16b98:	mov	r0, r6
   16b9a:	mov	r7, r5
   16b9c:	bl	c680 <_malloc_r>
   16ba0:	cmp	r0, #0
   16ba2:	bne.n	16b6a <__smakebuf_r+0x56>
   16ba4:	ldrsh.w	r3, [r4, #12]
   16ba8:	lsls	r2, r3, #22
   16baa:	bmi.n	16b2e <__smakebuf_r+0x1a>
   16bac:	bic.w	r3, r3, #3
   16bb0:	add.w	r2, r4, #67	; 0x43
   16bb4:	orr.w	r3, r3, #2
   16bb8:	movs	r1, #1
   16bba:	strd	r2, r1, [r4, #16]
   16bbe:	strh	r3, [r4, #12]
   16bc0:	str	r2, [r4, #0]
   16bc2:	b.n	16b2e <__smakebuf_r+0x1a>
   16bc4:	mov.w	r8, #1024	; 0x400
   16bc8:	mov	r7, r5
   16bca:	b.n	16b60 <__smakebuf_r+0x4c>
   16bcc:	ldrsh.w	r1, [r4, #14]
   16bd0:	mov	r0, r6
   16bd2:	bl	16cc8 <_isatty_r>
   16bd6:	cbnz	r0, 16bde <__smakebuf_r+0xca>
   16bd8:	ldrsh.w	r3, [r4, #12]
   16bdc:	b.n	16b7e <__smakebuf_r+0x6a>
   16bde:	ldrh	r3, [r4, #12]
   16be0:	bic.w	r3, r3, #3
   16be4:	orr.w	r3, r3, #1
   16be8:	sxth	r3, r3
   16bea:	b.n	16b7e <__smakebuf_r+0x6a>

00016bec <__swbuf_r>:
   16bec:	push	{r3, r4, r5, r6, r7, lr}
   16bee:	mov	r5, r1
   16bf0:	mov	r4, r2
   16bf2:	mov	r6, r0
   16bf4:	cbz	r0, 16bfc <__swbuf_r+0x10>
   16bf6:	ldr	r3, [r0, #52]	; 0x34
   16bf8:	cmp	r3, #0
   16bfa:	beq.n	16c96 <__swbuf_r+0xaa>
   16bfc:	ldrsh.w	r2, [r4, #12]
   16c00:	ldr	r3, [r4, #24]
   16c02:	str	r3, [r4, #8]
   16c04:	lsls	r7, r2, #28
   16c06:	uxth	r0, r2
   16c08:	bpl.n	16c42 <__swbuf_r+0x56>
   16c0a:	ldr	r3, [r4, #16]
   16c0c:	cbz	r3, 16c42 <__swbuf_r+0x56>
   16c0e:	uxtb	r5, r5
   16c10:	lsls	r1, r0, #18
   16c12:	mov	r7, r5
   16c14:	bpl.n	16c5c <__swbuf_r+0x70>
   16c16:	ldr	r2, [r4, #0]
   16c18:	ldr	r1, [r4, #20]
   16c1a:	subs	r3, r2, r3
   16c1c:	cmp	r1, r3
   16c1e:	ble.n	16c74 <__swbuf_r+0x88>
   16c20:	adds	r3, #1
   16c22:	ldr	r1, [r4, #8]
   16c24:	subs	r1, #1
   16c26:	str	r1, [r4, #8]
   16c28:	adds	r1, r2, #1
   16c2a:	str	r1, [r4, #0]
   16c2c:	strb	r5, [r2, #0]
   16c2e:	ldr	r2, [r4, #20]
   16c30:	cmp	r2, r3
   16c32:	beq.n	16c84 <__swbuf_r+0x98>
   16c34:	ldrh	r3, [r4, #12]
   16c36:	lsls	r3, r3, #31
   16c38:	bpl.n	16c3e <__swbuf_r+0x52>
   16c3a:	cmp	r5, #10
   16c3c:	beq.n	16c84 <__swbuf_r+0x98>
   16c3e:	mov	r0, r7
   16c40:	pop	{r3, r4, r5, r6, r7, pc}
   16c42:	mov	r1, r4
   16c44:	mov	r0, r6
   16c46:	bl	167a8 <__swsetup_r>
   16c4a:	cbnz	r0, 16c90 <__swbuf_r+0xa4>
   16c4c:	ldrsh.w	r2, [r4, #12]
   16c50:	ldr	r3, [r4, #16]
   16c52:	uxth	r0, r2
   16c54:	uxtb	r5, r5
   16c56:	lsls	r1, r0, #18
   16c58:	mov	r7, r5
   16c5a:	bmi.n	16c16 <__swbuf_r+0x2a>
   16c5c:	orr.w	r2, r2, #8192	; 0x2000
   16c60:	strh	r2, [r4, #12]
   16c62:	ldr	r2, [r4, #100]	; 0x64
   16c64:	ldr	r1, [r4, #20]
   16c66:	bic.w	r2, r2, #8192	; 0x2000
   16c6a:	str	r2, [r4, #100]	; 0x64
   16c6c:	ldr	r2, [r4, #0]
   16c6e:	subs	r3, r2, r3
   16c70:	cmp	r1, r3
   16c72:	bgt.n	16c20 <__swbuf_r+0x34>
   16c74:	mov	r1, r4
   16c76:	mov	r0, r6
   16c78:	bl	139bc <_fflush_r>
   16c7c:	cbnz	r0, 16c90 <__swbuf_r+0xa4>
   16c7e:	ldr	r2, [r4, #0]
   16c80:	movs	r3, #1
   16c82:	b.n	16c22 <__swbuf_r+0x36>
   16c84:	mov	r1, r4
   16c86:	mov	r0, r6
   16c88:	bl	139bc <_fflush_r>
   16c8c:	cmp	r0, #0
   16c8e:	beq.n	16c3e <__swbuf_r+0x52>
   16c90:	mov.w	r7, #4294967295
   16c94:	b.n	16c3e <__swbuf_r+0x52>
   16c96:	bl	e0f0 <__sinit>
   16c9a:	b.n	16bfc <__swbuf_r+0x10>

00016c9c <_fstat_r>:
   16c9c:	push	{r4, r5, r6, lr}
   16c9e:	mov	r4, r1
   16ca0:	ldr	r5, [pc, #32]	; (16cc4 <_fstat_r+0x28>)
   16ca2:	mov	r3, r0
   16ca4:	movs	r6, #0
   16ca6:	mov	r0, r4
   16ca8:	mov	r1, r2
   16caa:	mov	r4, r3
   16cac:	str	r6, [r5, #0]
   16cae:	bl	b38a <_fstat>
   16cb2:	adds	r3, r0, #1
   16cb4:	beq.n	16cb8 <_fstat_r+0x1c>
   16cb6:	pop	{r4, r5, r6, pc}
   16cb8:	ldr	r3, [r5, #0]
   16cba:	cmp	r3, #0
   16cbc:	beq.n	16cb6 <_fstat_r+0x1a>
   16cbe:	str	r3, [r4, #0]
   16cc0:	pop	{r4, r5, r6, pc}
   16cc2:	nop
   16cc4:	.word	0x20027770

00016cc8 <_isatty_r>:
   16cc8:	push	{r3, r4, r5, lr}
   16cca:	ldr	r5, [pc, #28]	; (16ce8 <_isatty_r+0x20>)
   16ccc:	movs	r2, #0
   16cce:	mov	r4, r0
   16cd0:	mov	r0, r1
   16cd2:	str	r2, [r5, #0]
   16cd4:	bl	b394 <_isatty>
   16cd8:	adds	r3, r0, #1
   16cda:	beq.n	16cde <_isatty_r+0x16>
   16cdc:	pop	{r3, r4, r5, pc}
   16cde:	ldr	r3, [r5, #0]
   16ce0:	cmp	r3, #0
   16ce2:	beq.n	16cdc <_isatty_r+0x14>
   16ce4:	str	r3, [r4, #0]
   16ce6:	pop	{r3, r4, r5, pc}
   16ce8:	.word	0x20027770

00016cec <__aeabi_drsub>:
   16cec:	eor.w	r1, r1, #2147483648	; 0x80000000
   16cf0:	b.n	16cf8 <__adddf3>
   16cf2:	nop

00016cf4 <__aeabi_dsub>:
   16cf4:	eor.w	r3, r3, #2147483648	; 0x80000000

00016cf8 <__adddf3>:
   16cf8:	push	{r4, r5, lr}
   16cfa:	mov.w	r4, r1, lsl #1
   16cfe:	mov.w	r5, r3, lsl #1
   16d02:	teq	r4, r5
   16d06:	it	eq
   16d08:	teqeq	r0, r2
   16d0c:	itttt	ne
   16d0e:	orrsne.w	ip, r4, r0
   16d12:	orrsne.w	ip, r5, r2
   16d16:	mvnsne.w	ip, r4, asr #21
   16d1a:	mvnsne.w	ip, r5, asr #21
   16d1e:	beq.w	16ee6 <__adddf3+0x1ee>
   16d22:	mov.w	r4, r4, lsr #21
   16d26:	rsbs	r5, r4, r5, lsr #21
   16d2a:	it	lt
   16d2c:	neglt	r5, r5
   16d2e:	ble.n	16d4a <__adddf3+0x52>
   16d30:	add	r4, r5
   16d32:	eor.w	r2, r0, r2
   16d36:	eor.w	r3, r1, r3
   16d3a:	eor.w	r0, r2, r0
   16d3e:	eor.w	r1, r3, r1
   16d42:	eor.w	r2, r0, r2
   16d46:	eor.w	r3, r1, r3
   16d4a:	cmp	r5, #54	; 0x36
   16d4c:	it	hi
   16d4e:	pophi	{r4, r5, pc}
   16d50:	tst.w	r1, #2147483648	; 0x80000000
   16d54:	mov.w	r1, r1, lsl #12
   16d58:	mov.w	ip, #1048576	; 0x100000
   16d5c:	orr.w	r1, ip, r1, lsr #12
   16d60:	beq.n	16d68 <__adddf3+0x70>
   16d62:	negs	r0, r0
   16d64:	sbc.w	r1, r1, r1, lsl #1
   16d68:	tst.w	r3, #2147483648	; 0x80000000
   16d6c:	mov.w	r3, r3, lsl #12
   16d70:	orr.w	r3, ip, r3, lsr #12
   16d74:	beq.n	16d7c <__adddf3+0x84>
   16d76:	negs	r2, r2
   16d78:	sbc.w	r3, r3, r3, lsl #1
   16d7c:	teq	r4, r5
   16d80:	beq.w	16ed2 <__adddf3+0x1da>
   16d84:	sub.w	r4, r4, #1
   16d88:	rsbs	lr, r5, #32
   16d8c:	blt.n	16daa <__adddf3+0xb2>
   16d8e:	lsl.w	ip, r2, lr
   16d92:	lsr.w	r2, r2, r5
   16d96:	adds	r0, r0, r2
   16d98:	adc.w	r1, r1, #0
   16d9c:	lsl.w	r2, r3, lr
   16da0:	adds	r0, r0, r2
   16da2:	asr.w	r3, r3, r5
   16da6:	adcs	r1, r3
   16da8:	b.n	16dc8 <__adddf3+0xd0>
   16daa:	sub.w	r5, r5, #32
   16dae:	add.w	lr, lr, #32
   16db2:	cmp	r2, #1
   16db4:	lsl.w	ip, r3, lr
   16db8:	it	cs
   16dba:	orrcs.w	ip, ip, #2
   16dbe:	asr.w	r3, r3, r5
   16dc2:	adds	r0, r0, r3
   16dc4:	adcs.w	r1, r1, r3, asr #31
   16dc8:	and.w	r5, r1, #2147483648	; 0x80000000
   16dcc:	bpl.n	16dde <__adddf3+0xe6>
   16dce:	mov.w	lr, #0
   16dd2:	rsbs	ip, ip, #0
   16dd6:	sbcs.w	r0, lr, r0
   16dda:	sbc.w	r1, lr, r1
   16dde:	cmp.w	r1, #1048576	; 0x100000
   16de2:	bcc.n	16e1c <__adddf3+0x124>
   16de4:	cmp.w	r1, #2097152	; 0x200000
   16de8:	bcc.n	16e04 <__adddf3+0x10c>
   16dea:	lsrs	r1, r1, #1
   16dec:	movs.w	r0, r0, rrx
   16df0:	mov.w	ip, ip, rrx
   16df4:	add.w	r4, r4, #1
   16df8:	mov.w	r2, r4, lsl #21
   16dfc:	cmn.w	r2, #4194304	; 0x400000
   16e00:	bcs.w	16f38 <__adddf3+0x240>
   16e04:	cmp.w	ip, #2147483648	; 0x80000000
   16e08:	it	eq
   16e0a:	movseq.w	ip, r0, lsr #1
   16e0e:	adcs.w	r0, r0, #0
   16e12:	adc.w	r1, r1, r4, lsl #20
   16e16:	orr.w	r1, r1, r5
   16e1a:	pop	{r4, r5, pc}
   16e1c:	movs.w	ip, ip, lsl #1
   16e20:	adcs	r0, r0
   16e22:	adc.w	r1, r1, r1
   16e26:	subs	r4, #1
   16e28:	it	cs
   16e2a:	cmpcs.w	r1, #1048576	; 0x100000
   16e2e:	bcs.n	16e04 <__adddf3+0x10c>
   16e30:	teq	r1, #0
   16e34:	itt	eq
   16e36:	moveq	r1, r0
   16e38:	moveq	r0, #0
   16e3a:	clz	r3, r1
   16e3e:	it	eq
   16e40:	addeq	r3, #32
   16e42:	sub.w	r3, r3, #11
   16e46:	subs.w	r2, r3, #32
   16e4a:	bge.n	16e66 <__adddf3+0x16e>
   16e4c:	adds	r2, #12
   16e4e:	ble.n	16e62 <__adddf3+0x16a>
   16e50:	add.w	ip, r2, #20
   16e54:	rsb	r2, r2, #12
   16e58:	lsl.w	r0, r1, ip
   16e5c:	lsr.w	r1, r1, r2
   16e60:	b.n	16e7c <__adddf3+0x184>
   16e62:	add.w	r2, r2, #20
   16e66:	it	le
   16e68:	rsble	ip, r2, #32
   16e6c:	lsl.w	r1, r1, r2
   16e70:	lsr.w	ip, r0, ip
   16e74:	itt	le
   16e76:	orrle.w	r1, r1, ip
   16e7a:	lslle	r0, r2
   16e7c:	subs	r4, r4, r3
   16e7e:	ittt	ge
   16e80:	addge.w	r1, r1, r4, lsl #20
   16e84:	orrge	r1, r5
   16e86:	popge	{r4, r5, pc}
   16e88:	mvn.w	r4, r4
   16e8c:	subs	r4, #31
   16e8e:	bge.n	16eca <__adddf3+0x1d2>
   16e90:	adds	r4, #12
   16e92:	bgt.n	16eb2 <__adddf3+0x1ba>
   16e94:	add.w	r4, r4, #20
   16e98:	rsb	r2, r4, #32
   16e9c:	lsr.w	r0, r0, r4
   16ea0:	lsl.w	r3, r1, r2
   16ea4:	orr.w	r0, r0, r3
   16ea8:	lsr.w	r3, r1, r4
   16eac:	orr.w	r1, r5, r3
   16eb0:	pop	{r4, r5, pc}
   16eb2:	rsb	r4, r4, #12
   16eb6:	rsb	r2, r4, #32
   16eba:	lsr.w	r0, r0, r2
   16ebe:	lsl.w	r3, r1, r4
   16ec2:	orr.w	r0, r0, r3
   16ec6:	mov	r1, r5
   16ec8:	pop	{r4, r5, pc}
   16eca:	lsr.w	r0, r1, r4
   16ece:	mov	r1, r5
   16ed0:	pop	{r4, r5, pc}
   16ed2:	teq	r4, #0
   16ed6:	eor.w	r3, r3, #1048576	; 0x100000
   16eda:	itte	eq
   16edc:	eoreq.w	r1, r1, #1048576	; 0x100000
   16ee0:	addeq	r4, #1
   16ee2:	subne	r5, #1
   16ee4:	b.n	16d84 <__adddf3+0x8c>
   16ee6:	mvns.w	ip, r4, asr #21
   16eea:	it	ne
   16eec:	mvnsne.w	ip, r5, asr #21
   16ef0:	beq.n	16f46 <__adddf3+0x24e>
   16ef2:	teq	r4, r5
   16ef6:	it	eq
   16ef8:	teqeq	r0, r2
   16efc:	beq.n	16f0a <__adddf3+0x212>
   16efe:	orrs.w	ip, r4, r0
   16f02:	itt	eq
   16f04:	moveq	r1, r3
   16f06:	moveq	r0, r2
   16f08:	pop	{r4, r5, pc}
   16f0a:	teq	r1, r3
   16f0e:	ittt	ne
   16f10:	movne	r1, #0
   16f12:	movne	r0, #0
   16f14:	popne	{r4, r5, pc}
   16f16:	movs.w	ip, r4, lsr #21
   16f1a:	bne.n	16f28 <__adddf3+0x230>
   16f1c:	lsls	r0, r0, #1
   16f1e:	adcs	r1, r1
   16f20:	it	cs
   16f22:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   16f26:	pop	{r4, r5, pc}
   16f28:	adds.w	r4, r4, #4194304	; 0x400000
   16f2c:	itt	cc
   16f2e:	addcc.w	r1, r1, #1048576	; 0x100000
   16f32:	popcc	{r4, r5, pc}
   16f34:	and.w	r5, r1, #2147483648	; 0x80000000
   16f38:	orr.w	r1, r5, #2130706432	; 0x7f000000
   16f3c:	orr.w	r1, r1, #15728640	; 0xf00000
   16f40:	mov.w	r0, #0
   16f44:	pop	{r4, r5, pc}
   16f46:	mvns.w	ip, r4, asr #21
   16f4a:	itte	ne
   16f4c:	movne	r1, r3
   16f4e:	movne	r0, r2
   16f50:	mvnseq.w	ip, r5, asr #21
   16f54:	itt	ne
   16f56:	movne	r3, r1
   16f58:	movne	r2, r0
   16f5a:	orrs.w	r4, r0, r1, lsl #12
   16f5e:	itte	eq
   16f60:	orrseq.w	r5, r2, r3, lsl #12
   16f64:	teqeq	r1, r3
   16f68:	orrne.w	r1, r1, #524288	; 0x80000
   16f6c:	pop	{r4, r5, pc}
   16f6e:	nop

00016f70 <__aeabi_ui2d>:
   16f70:	teq	r0, #0
   16f74:	itt	eq
   16f76:	moveq	r1, #0
   16f78:	bxeq	lr
   16f7a:	push	{r4, r5, lr}
   16f7c:	mov.w	r4, #1024	; 0x400
   16f80:	add.w	r4, r4, #50	; 0x32
   16f84:	mov.w	r5, #0
   16f88:	mov.w	r1, #0
   16f8c:	b.n	16e30 <__adddf3+0x138>
   16f8e:	nop

00016f90 <__aeabi_i2d>:
   16f90:	teq	r0, #0
   16f94:	itt	eq
   16f96:	moveq	r1, #0
   16f98:	bxeq	lr
   16f9a:	push	{r4, r5, lr}
   16f9c:	mov.w	r4, #1024	; 0x400
   16fa0:	add.w	r4, r4, #50	; 0x32
   16fa4:	ands.w	r5, r0, #2147483648	; 0x80000000
   16fa8:	it	mi
   16faa:	negmi	r0, r0
   16fac:	mov.w	r1, #0
   16fb0:	b.n	16e30 <__adddf3+0x138>
   16fb2:	nop

00016fb4 <__aeabi_f2d>:
   16fb4:	lsls	r2, r0, #1
   16fb6:	mov.w	r1, r2, asr #3
   16fba:	mov.w	r1, r1, rrx
   16fbe:	mov.w	r0, r2, lsl #28
   16fc2:	itttt	ne
   16fc4:	andsne.w	r3, r2, #4278190080	; 0xff000000
   16fc8:	teqne	r3, #4278190080	; 0xff000000
   16fcc:	eorne.w	r1, r1, #939524096	; 0x38000000
   16fd0:	bxne	lr
   16fd2:	bics.w	r2, r2, #4278190080	; 0xff000000
   16fd6:	it	eq
   16fd8:	bxeq	lr
   16fda:	teq	r3, #4278190080	; 0xff000000
   16fde:	itt	eq
   16fe0:	orreq.w	r1, r1, #524288	; 0x80000
   16fe4:	bxeq	lr
   16fe6:	push	{r4, r5, lr}
   16fe8:	mov.w	r4, #896	; 0x380
   16fec:	and.w	r5, r1, #2147483648	; 0x80000000
   16ff0:	bic.w	r1, r1, #2147483648	; 0x80000000
   16ff4:	b.n	16e30 <__adddf3+0x138>
   16ff6:	nop

00016ff8 <__aeabi_ul2d>:
   16ff8:	orrs.w	r2, r0, r1
   16ffc:	it	eq
   16ffe:	bxeq	lr
   17000:	push	{r4, r5, lr}
   17002:	mov.w	r5, #0
   17006:	b.n	1701e <__aeabi_l2d+0x16>

00017008 <__aeabi_l2d>:
   17008:	orrs.w	r2, r0, r1
   1700c:	it	eq
   1700e:	bxeq	lr
   17010:	push	{r4, r5, lr}
   17012:	ands.w	r5, r1, #2147483648	; 0x80000000
   17016:	bpl.n	1701e <__aeabi_l2d+0x16>
   17018:	negs	r0, r0
   1701a:	sbc.w	r1, r1, r1, lsl #1
   1701e:	mov.w	r4, #1024	; 0x400
   17022:	add.w	r4, r4, #50	; 0x32
   17026:	movs.w	ip, r1, lsr #22
   1702a:	beq.w	16dde <__adddf3+0xe6>
   1702e:	mov.w	r2, #3
   17032:	movs.w	ip, ip, lsr #3
   17036:	it	ne
   17038:	addne	r2, #3
   1703a:	movs.w	ip, ip, lsr #3
   1703e:	it	ne
   17040:	addne	r2, #3
   17042:	add.w	r2, r2, ip, lsr #3
   17046:	rsb	r3, r2, #32
   1704a:	lsl.w	ip, r0, r3
   1704e:	lsr.w	r0, r0, r2
   17052:	lsl.w	lr, r1, r3
   17056:	orr.w	r0, r0, lr
   1705a:	lsr.w	r1, r1, r2
   1705e:	add	r4, r2
   17060:	b.n	16dde <__adddf3+0xe6>
   17062:	nop

00017064 <__aeabi_d2lz>:
   17064:	push	{r3, lr}
   17066:	mov	r2, r0
   17068:	mov	r3, r1
   1706a:	vmov	d7, r2, r3
   1706e:	vcmpe.f64	d7, #0.0
   17072:	vmrs	APSR_nzcv, fpscr
   17076:	bmi.n	17080 <__aeabi_d2lz+0x1c>
   17078:	ldmia.w	sp!, {r3, lr}
   1707c:	b.w	17098 <__aeabi_d2ulz>
   17080:	vneg.f64	d7, d7
   17084:	vmov	r0, r1, d7
   17088:	bl	17098 <__aeabi_d2ulz>
   1708c:	negs	r0, r0
   1708e:	sbc.w	r1, r1, r1, lsl #1
   17092:	pop	{r3, pc}
   17094:	movs	r0, r0
	...

00017098 <__aeabi_d2ulz>:
   17098:	vldr	d6, [pc, #44]	; 170c8 <__aeabi_d2ulz+0x30>
   1709c:	vmov	d7, r0, r1
   170a0:	vldr	d5, [pc, #44]	; 170d0 <__aeabi_d2ulz+0x38>
   170a4:	vmul.f64	d6, d7, d6
   170a8:	vcvt.u32.f64	s12, d6
   170ac:	vcvt.f64.u32	d4, s12
   170b0:	vfms.f64	d7, d4, d5
   170b4:	vcvt.u32.f64	s15, d7
   170b8:	vmov	r1, s12
   170bc:	vmov	r0, s15
   170c0:	bx	lr
   170c2:	nop
   170c4:	nop.w
   170c8:	.word	0x00000000
   170cc:	.word	0x3df00000
   170d0:	.word	0x00000000
   170d4:	.word	0x41f00000

000170d8 <___init_veneer>:
   170d8:	ldr.w	pc, [pc]	; 170dc <___init_veneer+0x4>
   170dc:	.word	0x6000241d

000170e0 <___reboot_Teensyduino__veneer>:
   170e0:	ldr.w	pc, [pc]	; 170e4 <___reboot_Teensyduino__veneer+0x4>
   170e4:	.word	0x60001899

000170e8 <__usb_init_veneer>:
   170e8:	ldr.w	pc, [pc]	; 170ec <__usb_init_veneer+0x4>
   170ec:	.word	0x600017b5

000170f0 <___Z14set_audioClockilm_veneer>:
   170f0:	ldr.w	pc, [pc]	; 170f4 <___Z14set_audioClockilm_veneer+0x4>
   170f4:	.word	0x600024d1

000170f8 <___ZN16CrashReportClasscvbEv_veneer>:
   170f8:	ldr.w	pc, [pc]	; 170fc <___ZN16CrashReportClasscvbEv_veneer+0x4>
   170fc:	.word	0x600023c1

00017100 <___ZN7TwoWire5beginEv_veneer>:
   17100:	ldr.w	pc, [pc]	; 17104 <___ZN7TwoWire5beginEv_veneer+0x4>
   17104:	.word	0x6000176d

00017108 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   17108:	ldr.w	pc, [pc]	; 1710c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1710c:	.word	0x60001f1d

Disassembly of section .fini:

00017110 <_fini>:
   17110:	push	{r3, r4, r5, r6, r7, lr}
   17112:	nop
